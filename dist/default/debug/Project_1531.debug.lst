

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Mar 21 18:07:22 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    13                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    18                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1,group=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1,group=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1,group=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1,group=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1,group=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   145                           	psect	text121,global,reloc=2,class=CODE,delta=1
   146                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   147                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   148  0000                     
   149                           ; Version 1.45
   150                           ; Generated 16/11/2017 GMT
   151                           ; 
   152                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   153                           ; All rights reserved.
   154                           ; 
   155                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   156                           ; 
   157                           ; Redistribution and use in source and binary forms, with or without modification, are
   158                           ; permitted provided that the following conditions are met:
   159                           ; 
   160                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   161                           ;        conditions and the following disclaimer.
   162                           ; 
   163                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   164                           ;        of conditions and the following disclaimer in the documentation and/or other
   165                           ;        materials provided with the distribution.
   166                           ; 
   167                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   168                           ;        software without specific prior written permission.
   169                           ; 
   170                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   171                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   172                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   173                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   174                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   175                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   176                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   177                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   178                           ; 
   179                           ; 
   180                           ; Code-generator required, PIC18F45K22 Definitions
   181                           ; 
   182                           ; SFR Addresses
   183  0000                     
   184 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   185  0000                     
   186                           	psect	idataCOMRAM
   187  0042DA                     __pidataCOMRAM:
   188                           	opt stack 0
   189                           
   190                           ;initializer for _writeAddress
   191  0042DA  4500               	dw	17664
   192  0042DC  0000               	dw	0
   193                           
   194                           ;initializer for _SynthRxOper
   195  0042DE  01                 	db	1
   196                           
   197                           ;initializer for _SynthTxOper
   198  0042DF  01                 	db	1
   199                           
   200                           	psect	idataBANK0
   201  0042E6                     __pidataBANK0:
   202                           	opt stack 0
   203                           
   204                           ;initializer for _readAddress
   205  0042E6  4500               	dw	17664
   206  0042E8  0000               	dw	0
   207                           
   208                           ;initializer for _synthLdRxCnt
   209  0042EA  02                 	db	2
   210                           
   211                           	psect	idataBANK1
   212  004284                     __pidataBANK1:
   213                           	opt stack 0
   214                           
   215                           ;initializer for _groupsArray
   216  004284  42                 	db	low _GroupControlMcu
   217  004285  3E                 	db	high _GroupControlMcu
   218  004286  1E                 	db	low _GroupStatusAndVersion
   219  004287  40                 	db	high _GroupStatusAndVersion
   220  004288  CE                 	db	low _GroupAdc
   221  004289  40                 	db	high _GroupAdc
   222  00428A  A0                 	db	low _GroupSynthesizers
   223  00428B  32                 	db	high _GroupSynthesizers
   224  00428C  24                 	db	low _GroupFlashMemory
   225  00428D  3C                 	db	high _GroupFlashMemory
   226  00428E  A6                 	db	low _GroupDAC
   227  00428F  3D                 	db	high _GroupDAC
   228                           
   229                           	psect	smallconst
   230  000600                     __psmallconst:
   231                           	opt stack 0
   232  000600  00                 	db	0
   233  000601                     _SYNTH_REGS:
   234                           	opt stack 0
   235  000601  041C               	dw	1052
   236  000603  0001               	dw	1
   237  000605  300B               	dw	12299
   238  000607  0061               	dw	97
   239  000609  193A               	dw	6458
   240  00060B  00C0               	dw	192
   241  00060D  FCC9               	dw	64713
   242  00060F  1110               	dw	4368
   243  000611  0428               	dw	1064
   244  000613  102D               	dw	4141
   245  000615  00E7               	dw	231
   246  000617  1200               	dw	4608
   247  000619  6076               	dw	24694
   248  00061B  3500               	dw	13568
   249  00061D  0025               	dw	37
   250  00061F  0080               	dw	128
   251  000621  8384               	dw	33668
   252  000623  1000               	dw	4096
   253  000625  0003               	dw	3
   254  000627  0000               	dw	0
   255  000629  0012               	dw	18
   256  00062B  0000               	dw	0
   257  00062D  0001               	dw	1
   258  00062F  0C00               	dw	3072
   259  000631  0680               	dw	1664
   260  000633  0020               	dw	32
   261  000635                     __end_of_SYNTH_REGS:
   262                           	opt stack 0
   263  000635                     _SYNTH_ADDRES:
   264                           	opt stack 0
   265  000635  04                 	db	4
   266  000636  08                 	db	8
   267  000637  0C                 	db	12
   268  000638  00                 	db	0
   269  000639  10                 	db	16
   270  00063A  00                 	db	0
   271  00063B  14                 	db	20
   272  00063C  00                 	db	0
   273  00063D  00                 	db	0
   274  00063E  00                 	db	0
   275  00063F  18                 	db	24
   276  000640  00                 	db	0
   277  000641  00                 	db	0
   278  000642                     __end_of_SYNTH_ADDRES:
   279                           	opt stack 0
   280  000642                     _channelArr:
   281                           	opt stack 0
   282  000642  04                 	db	4
   283  000643  05                 	db	5
   284  000644  06                 	db	6
   285  000645  07                 	db	7
   286  000646  08                 	db	8
   287  000647  09                 	db	9
   288  000648  0A                 	db	10
   289  000649  0D                 	db	13
   290  00064A  19                 	db	25
   291  00064B                     __end_of_channelArr:
   292                           	opt stack 0
   293  00064B                     _DAC_DEFAULT_INIT_VALUES:
   294                           	opt stack 0
   295  00064B  2344               	dw	9028
   296  00064D  6344               	dw	25412
   297  00064F  A344               	dw	41796
   298  000651  E344               	dw	58180
   299  000653                     __end_of_DAC_DEFAULT_INIT_VALUES:
   300                           	opt stack 0
   301  000653                     _DAC_ADDRES:
   302                           	opt stack 0
   303  000653  02                 	db	2
   304  000654  04                 	db	4
   305  000655  06                 	db	6
   306  000656  08                 	db	8
   307  000657                     __end_of_DAC_ADDRES:
   308                           	opt stack 0
   309  000657                     exp@coeff:
   310                           	opt stack 0
   311  000657  00                 	db	0
   312  000658  80                 	db	128
   313  000659  3F                 	db	63
   314  00065A  72                 	db	114
   315  00065B  31                 	db	49
   316  00065C  3F                 	db	63
   317  00065D  FE                 	db	254
   318  00065E  75                 	db	117
   319  00065F  3E                 	db	62
   320  000660  58                 	db	88
   321  000661  63                 	db	99
   322  000662  3D                 	db	61
   323  000663  95                 	db	149
   324  000664  1D                 	db	29
   325  000665  3C                 	db	60
   326  000666  C5                 	db	197
   327  000667  AE                 	db	174
   328  000668  3A                 	db	58
   329  000669  79                 	db	121
   330  00066A  21                 	db	33
   331  00066B  39                 	db	57
   332  00066C  94                 	db	148
   333  00066D  80                 	db	128
   334  00066E  37                 	db	55
   335  00066F  93                 	db	147
   336  000670  A7                 	db	167
   337  000671  35                 	db	53
   338  000672  56                 	db	86
   339  000673  15                 	db	21
   340  000674  34                 	db	52
   341  000675                     __end_ofexp@coeff:
   342                           	opt stack 0
   343  000675                     log@coeff:
   344                           	opt stack 0
   345  000675  00                 	db	0
   346  000676  00                 	db	0
   347  000677  00                 	db	0
   348  000678  00                 	db	0
   349  000679  80                 	db	128
   350  00067A  3F                 	db	63
   351  00067B  F0                 	db	240
   352  00067C  FF                 	db	255
   353  00067D  BE                 	db	190
   354  00067E  E2                 	db	226
   355  00067F  A9                 	db	169
   356  000680  3E                 	db	62
   357  000681  83                 	db	131
   358  000682  76                 	db	118
   359  000683  BE                 	db	190
   360  000684  AE                 	db	174
   361  000685  2B                 	db	43
   362  000686  3E                 	db	62
   363  000687  3C                 	db	60
   364  000688  C3                 	db	195
   365  000689  BD                 	db	189
   366  00068A  D2                 	db	210
   367  00068B  13                 	db	19
   368  00068C  3D                 	db	61
   369  00068D  78                 	db	120
   370  00068E  D3                 	db	211
   371  00068F  BB                 	db	187
   372  000690                     __end_oflog@coeff:
   373                           	opt stack 0
   374  000690                     STR_1:
   375                           
   376                           ; BSR set to: 0
   377  000690  4D                 	db	77	;'M'
   378  000691  61                 	db	97	;'a'
   379  000692  72                 	db	114	;'r'
   380  000693  20                 	db	32
   381  000694  32                 	db	50	;'2'
   382  000695  31                 	db	49	;'1'
   383  000696  20                 	db	32
   384  000697  32                 	db	50	;'2'
   385  000698  30                 	db	48	;'0'
   386  000699  31                 	db	49	;'1'
   387  00069A  38                 	db	56	;'8'
   388  00069B  00                 	db	0
   389  00069C                     STR_18:
   390                           
   391                           ; BSR set to: 0
   392  00069C  31                 	db	49	;'1'
   393  00069D  38                 	db	56	;'8'
   394  00069E  3A                 	db	58	;':'
   395  00069F  30                 	db	48	;'0'
   396  0006A0  33                 	db	51	;'3'
   397  0006A1  3A                 	db	58	;':'
   398  0006A2  32                 	db	50	;'2'
   399  0006A3  33                 	db	51	;'3'
   400  0006A4  00                 	db	0
   401  0000                     
   402                           ; #config settings
   403  0006A5  00                 	db	0	; dummy byte at the end
   404  0000                     
   405                           	psect	nvCOMRAM
   406  000046                     __pnvCOMRAM:
   407                           	opt stack 0
   408  000046                     _timer0ReloadVal:
   409                           	opt stack 0
   410  000046                     	ds	2
   411                           
   412                           	psect	nvBANK0
   413  0000FF                     __pnvBANK0:
   414                           	opt stack 0
   415  0000FF                     _eusart1TxBufferRemaining:
   416                           	opt stack 0
   417  0000FF                     	ds	1
   418                           
   419                           	psect	nvBANK1
   420  0001E4                     __pnvBANK1:
   421                           	opt stack 0
   422  0001E4                     _TMR0_InterruptHandler:
   423                           	opt stack 0
   424  0001E4                     	ds	2
   425  0001E6                     _IOCB5_InterruptHandler:
   426                           	opt stack 0
   427  0001E6                     	ds	2
   428  0001E8                     _IOCB4_InterruptHandler:
   429                           	opt stack 0
   430  0001E8                     	ds	2
   431  0000                     _ANSELA	set	3896
   432  0000                     _ANSELE	set	3900
   433  0000                     _ANSELD	set	3899
   434  0000                     _ANSELB	set	3897
   435  0000                     _ANSELC	set	3898
   436  0000                     _ADCON0bits	set	4034
   437  0000                     _ADRESH	set	4036
   438  0000                     _ADRESL	set	4035
   439  0000                     _ADCON2	set	4032
   440  0000                     _ADCON1	set	4033
   441  0000                     _ADCON0	set	4034
   442  0000                     _T0CONbits	set	4053
   443  0000                     _T0CON	set	4053
   444  0000                     _TMR0L	set	4054
   445  0000                     _TMR0H	set	4055
   446  0000                     _EEDATA	set	4008
   447  0000                     _EEADR	set	4009
   448  0000                     _EECON2	set	4007
   449  0000                     _EECON1bits	set	4006
   450  0000                     _TABLAT	set	4085
   451  0000                     _TBLPTRL	set	4086
   452  0000                     _TBLPTRH	set	4087
   453  0000                     _TBLPTRU	set	4088
   454  0000                     _IOCBbits	set	3938
   455  0000                     _INTCON2bits	set	4081
   456  0000                     _WPUB	set	3937
   457  0000                     _TRISD	set	3989
   458  0000                     _TRISC	set	3988
   459  0000                     _TRISB	set	3987
   460  0000                     _TRISA	set	3986
   461  0000                     _TRISE	set	3990
   462  0000                     _LATC	set	3979
   463  0000                     _LATB	set	3978
   464  0000                     _LATA	set	3977
   465  0000                     _LATD	set	3980
   466  0000                     _LATE	set	3981
   467  0000                     _RCREG1	set	4014
   468  0000                     _RCSTA1bits	set	4011
   469  0000                     _TXREG1	set	4013
   470  0000                     _SPBRGH1	set	4016
   471  0000                     _SPBRG1	set	4015
   472  0000                     _TXSTA1	set	4012
   473  0000                     _RCSTA1	set	4011
   474  0000                     _BAUDCON1	set	4024
   475  0000                     _PIR1bits	set	3998
   476  0000                     _PIE1bits	set	3997
   477  0000                     _PIR2bits	set	4001
   478  0000                     _PIE2bits	set	4000
   479  0000                     _RCONbits	set	4048
   480  0000                     _OSCTUNE	set	3995
   481  0000                     _OSCCON2	set	4050
   482  0000                     _OSCCON	set	4051
   483  0000                     _LATAbits	set	3977
   484  0000                     _LATDbits	set	3980
   485  0000                     _INTCONbits	set	4082
   486  0000                     _PORTDbits	set	3971
   487  0000                     _LATCbits	set	3979
   488  0000                     _LATBbits	set	3978
   489                           
   490                           	psect	cinit
   491  0030EE                     __pcinit:
   492                           	opt stack 0
   493  0030EE                     start_initialization:
   494                           	opt stack 0
   495  0030EE                     __initialization:
   496                           	opt stack 0
   497                           
   498                           ; Initialize objects allocated to BANK1 (12 bytes)
   499                           ; load TBLPTR registers with __pidataBANK1
   500  0030EE  0E84               	movlw	low __pidataBANK1
   501  0030F0  6EF6               	movwf	tblptrl,c
   502  0030F2  0E42               	movlw	high __pidataBANK1
   503  0030F4  6EF7               	movwf	tblptrh,c
   504  0030F6  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   505  0030F8  6EF8               	movwf	tblptru,c
   506  0030FA  EE01  F0D8         	lfsr	0,__pdataBANK1
   507  0030FE  EE10 F00C          	lfsr	1,12
   508  003102                     copy_data0:
   509  003102  0009               	tblrd		*+
   510  003104  CFF5 FFEE          	movff	tablat,postinc0
   511  003108  50E5               	movf	postdec1,w,c
   512  00310A  50E1               	movf	fsr1l,w,c
   513  00310C  E1FA               	bnz	copy_data0
   514                           
   515                           ; Initialize objects allocated to BANK0 (5 bytes)
   516                           ; load TBLPTR registers with __pidataBANK0
   517  00310E  0EE6               	movlw	low __pidataBANK0
   518  003110  6EF6               	movwf	tblptrl,c
   519  003112  0E42               	movlw	high __pidataBANK0
   520  003114  6EF7               	movwf	tblptrh,c
   521  003116  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   522  003118  6EF8               	movwf	tblptru,c
   523  00311A  EE00  F0FA         	lfsr	0,__pdataBANK0
   524  00311E  EE10 F005          	lfsr	1,5
   525  003122                     copy_data1:
   526  003122  0009               	tblrd		*+
   527  003124  CFF5 FFEE          	movff	tablat,postinc0
   528  003128  50E5               	movf	postdec1,w,c
   529  00312A  50E1               	movf	fsr1l,w,c
   530  00312C  E1FA               	bnz	copy_data1
   531                           
   532                           ; Initialize objects allocated to COMRAM (6 bytes)
   533                           ; load TBLPTR registers with __pidataCOMRAM
   534  00312E  0EDA               	movlw	low __pidataCOMRAM
   535  003130  6EF6               	movwf	tblptrl,c
   536  003132  0E42               	movlw	high __pidataCOMRAM
   537  003134  6EF7               	movwf	tblptrh,c
   538  003136  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   539  003138  6EF8               	movwf	tblptru,c
   540  00313A  EE00  F040         	lfsr	0,__pdataCOMRAM
   541  00313E  EE10 F006          	lfsr	1,6
   542  003142                     copy_data2:
   543  003142  0009               	tblrd		*+
   544  003144  CFF5 FFEE          	movff	tablat,postinc0
   545  003148  50E5               	movf	postdec1,w,c
   546  00314A  50E1               	movf	fsr1l,w,c
   547  00314C  E1FA               	bnz	copy_data2
   548                           
   549                           ; Clear objects allocated to BANK1 (216 bytes)
   550  00314E  EE01  F000         	lfsr	0,__pbssBANK1
   551  003152  0ED8               	movlw	216
   552  003154                     clear_0:
   553  003154  6AEE               	clrf	postinc0,c
   554  003156  06E8               	decf	wreg,f,c
   555  003158  E1FD               	bnz	clear_0
   556                           
   557                           ; Clear objects allocated to BANK0 (26 bytes)
   558  00315A  EE00  F0E0         	lfsr	0,__pbssBANK0
   559  00315E  0E1A               	movlw	26
   560  003160                     clear_1:
   561  003160  6AEE               	clrf	postinc0,c
   562  003162  06E8               	decf	wreg,f,c
   563  003164  E1FD               	bnz	clear_1
   564                           
   565                           ; Clear objects allocated to COMRAM (15 bytes)
   566  003166  EE00  F031         	lfsr	0,__pbssCOMRAM
   567  00316A  0E0F               	movlw	15
   568  00316C                     clear_2:
   569  00316C  6AEE               	clrf	postinc0,c
   570  00316E  06E8               	decf	wreg,f,c
   571  003170  E1FD               	bnz	clear_2
   572  003172                     end_of_initialization:
   573                           	opt stack 0
   574  003172                     __end_of__initialization:
   575                           	opt stack 0
   576  003172  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   577  003174  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   578  003176  0E00               	movlw	low (__Lmediumconst shr (0+16))
   579  003178  6EF8               	movwf	tblptru,c
   580  00317A  0100               	movlb	0
   581  00317C  EF52  F01A         	goto	_main	;jump to C main() function
   582                           tblptru	equ	0xFF8
   583                           tblptrh	equ	0xFF7
   584                           tblptrl	equ	0xFF6
   585                           tablat	equ	0xFF5
   586                           postinc0	equ	0xFEE
   587                           wreg	equ	0xFE8
   588                           postdec1	equ	0xFE5
   589                           fsr1l	equ	0xFE1
   590                           
   591                           	psect	bssCOMRAM
   592  000031                     __pbssCOMRAM:
   593                           	opt stack 0
   594  000031                     _numOfValidateSamples:
   595                           	opt stack 0
   596  000031                     	ds	4
   597  000035                     TMR0_ISR@CountCallBack:
   598                           	opt stack 0
   599  000035                     	ds	2
   600  000037                     _eusart1RxTail:
   601                           	opt stack 0
   602  000037                     	ds	1
   603  000038                     _eusart1RxHead:
   604                           	opt stack 0
   605  000038                     	ds	1
   606  000039                     _eusart1TxTail:
   607                           	opt stack 0
   608  000039                     	ds	1
   609  00003A                     _eusart1TxHead:
   610                           	opt stack 0
   611  00003A                     	ds	1
   612  00003B                     _adcSampleMode:
   613                           	opt stack 0
   614  00003B                     	ds	1
   615  00003C                     _numOfReadSamples:
   616                           	opt stack 0
   617  00003C                     	ds	4
   618                           tblptru	equ	0xFF8
   619                           tblptrh	equ	0xFF7
   620                           tblptrl	equ	0xFF6
   621                           tablat	equ	0xFF5
   622                           postinc0	equ	0xFEE
   623                           wreg	equ	0xFE8
   624                           postdec1	equ	0xFE5
   625                           fsr1l	equ	0xFE1
   626                           
   627                           	psect	dataCOMRAM
   628  000040                     __pdataCOMRAM:
   629                           	opt stack 0
   630  000040                     _writeAddress:
   631                           	opt stack 0
   632  000040                     	ds	4
   633  000044                     _SynthRxOper:
   634                           	opt stack 0
   635  000044                     	ds	1
   636  000045                     _SynthTxOper:
   637                           	opt stack 0
   638  000045                     	ds	1
   639                           tblptru	equ	0xFF8
   640                           tblptrh	equ	0xFF7
   641                           tblptrl	equ	0xFF6
   642                           tablat	equ	0xFF5
   643                           postinc0	equ	0xFEE
   644                           wreg	equ	0xFE8
   645                           postdec1	equ	0xFE5
   646                           fsr1l	equ	0xFE1
   647                           
   648                           	psect	bssBANK0
   649  0000E0                     __pbssBANK0:
   650                           	opt stack 0
   651  0000E0                     _mcuRunTimeIn5SecTicks:
   652                           	opt stack 0
   653  0000E0                     	ds	4
   654  0000E4                     _sampleCount:
   655                           	opt stack 0
   656  0000E4                     	ds	2
   657  0000E6                     _count:
   658                           	opt stack 0
   659  0000E6                     	ds	2
   660  0000E8                     _synthLdRxFlag:
   661                           	opt stack 0
   662  0000E8                     	ds	1
   663  0000E9                     _synthLdTxFlag:
   664                           	opt stack 0
   665  0000E9                     	ds	1
   666  0000EA                     _cntRegUpdate:
   667                           	opt stack 0
   668  0000EA                     	ds	1
   669  0000EB                     _isReWriteDone:
   670                           	opt stack 0
   671  0000EB                     	ds	1
   672  0000EC                     _msgCount:
   673                           	opt stack 0
   674  0000EC                     	ds	1
   675  0000ED                     _crcGiven:
   676                           	opt stack 0
   677  0000ED                     	ds	1
   678  0000EE                     _crcCalc:
   679                           	opt stack 0
   680  0000EE                     	ds	1
   681  0000EF                     _data:
   682                           	opt stack 0
   683  0000EF                     	ds	1
   684  0000F0                     _dataSize:
   685                           	opt stack 0
   686  0000F0                     	ds	1
   687  0000F1                     _request:
   688                           	opt stack 0
   689  0000F1                     	ds	1
   690  0000F2                     _group:
   691                           	opt stack 0
   692  0000F2                     	ds	1
   693  0000F3                     _cState:
   694                           	opt stack 0
   695  0000F3                     	ds	1
   696  0000F4                     _eusart1RxCount:
   697                           	opt stack 0
   698  0000F4                     	ds	1
   699  0000F5                     _channel:
   700                           	opt stack 0
   701  0000F5                     	ds	1
   702  0000F6                     _Timer0_OneSec:
   703                           	opt stack 0
   704  0000F6                     	ds	1
   705  0000F7                     _Timer0_KeepAlive:
   706                           	opt stack 0
   707  0000F7                     	ds	1
   708  0000F8                     _Timer0_Sampling:
   709                           	opt stack 0
   710  0000F8                     	ds	1
   711  0000F9                     _Timer0_SynthLd:
   712                           	opt stack 0
   713  0000F9                     	ds	1
   714                           tblptru	equ	0xFF8
   715                           tblptrh	equ	0xFF7
   716                           tblptrl	equ	0xFF6
   717                           tablat	equ	0xFF5
   718                           postinc0	equ	0xFEE
   719                           wreg	equ	0xFE8
   720                           postdec1	equ	0xFE5
   721                           fsr1l	equ	0xFE1
   722                           
   723                           	psect	dataBANK0
   724  0000FA                     __pdataBANK0:
   725                           	opt stack 0
   726  0000FA                     _readAddress:
   727                           	opt stack 0
   728  0000FA                     	ds	4
   729  0000FE                     _synthLdRxCnt:
   730                           	opt stack 0
   731  0000FE                     	ds	1
   732                           tblptru	equ	0xFF8
   733                           tblptrh	equ	0xFF7
   734                           tblptrl	equ	0xFF6
   735                           tablat	equ	0xFF5
   736                           postinc0	equ	0xFEE
   737                           wreg	equ	0xFE8
   738                           postdec1	equ	0xFE5
   739                           fsr1l	equ	0xFE1
   740                           
   741                           	psect	bssBANK1
   742  000100                     __pbssBANK1:
   743                           	opt stack 0
   744  000100                     _eusart1TxBuffer:
   745                           	opt stack 0
   746  000100                     	ds	70
   747  000146                     _eusart1RxBuffer:
   748                           	opt stack 0
   749  000146                     	ds	40
   750  00016E                     _errno:
   751                           	opt stack 0
   752  00016E                     	ds	2
   753  000170                     _sampleArray:
   754                           	opt stack 0
   755  000170                     	ds	64
   756  0001B0                     _rxMsgData:
   757                           	opt stack 0
   758  0001B0                     	ds	20
   759  0001C4                     _rxMsgQueue:
   760                           	opt stack 0
   761  0001C4                     	ds	20
   762                           tblptru	equ	0xFF8
   763                           tblptrh	equ	0xFF7
   764                           tblptrl	equ	0xFF6
   765                           tablat	equ	0xFF5
   766                           postinc0	equ	0xFEE
   767                           wreg	equ	0xFE8
   768                           postdec1	equ	0xFE5
   769                           fsr1l	equ	0xFE1
   770                           
   771                           	psect	dataBANK1
   772  0001D8                     __pdataBANK1:
   773                           	opt stack 0
   774  0001D8                     _groupsArray:
   775                           	opt stack 0
   776  0001D8                     	ds	12
   777                           tblptru	equ	0xFF8
   778                           tblptrh	equ	0xFF7
   779                           tblptrl	equ	0xFF6
   780                           tablat	equ	0xFF5
   781                           postinc0	equ	0xFEE
   782                           wreg	equ	0xFE8
   783                           postdec1	equ	0xFE5
   784                           fsr1l	equ	0xFE1
   785                           
   786                           	psect	cstackBANK2
   787  000200                     __pcstackBANK2:
   788                           	opt stack 0
   789  000200                     SynthReadData@TxMsg:
   790                           	opt stack 0
   791                           
   792                           ; 18 bytes @ 0x0
   793  000200                     	ds	18
   794  000212                     SynthReadData@data_947:
   795                           	opt stack 0
   796                           
   797                           ; 1 bytes @ 0x12
   798  000212                     	ds	1
   799  000213                     SynthReadData@cType:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x13
   803  000213                     	ds	1
   804  000214                     SynthReadData@eepromDataArray:
   805                           	opt stack 0
   806                           
   807                           ; 12 bytes @ 0x14
   808  000214                     	ds	12
   809  000220                     SynthReadData@regNum:
   810                           	opt stack 0
   811                           
   812                           ; 1 bytes @ 0x20
   813  000220                     	ds	1
   814  000221                     SynthReadData@byteNum:
   815                           	opt stack 0
   816                           
   817                           ; 1 bytes @ 0x21
   818  000221                     	ds	1
   819                           tblptru	equ	0xFF8
   820                           tblptrh	equ	0xFF7
   821                           tblptrl	equ	0xFF6
   822                           tablat	equ	0xFF5
   823                           postinc0	equ	0xFEE
   824                           wreg	equ	0xFE8
   825                           postdec1	equ	0xFE5
   826                           fsr1l	equ	0xFE1
   827                           
   828                           	psect	cstackBANK1
   829  0001EA                     __pcstackBANK1:
   830                           	opt stack 0
   831  0001EA                     ??_readUartMessage:
   832                           
   833                           ; 1 bytes @ 0x0
   834  0001EA                     	ds	4
   835                           tblptru	equ	0xFF8
   836                           tblptrh	equ	0xFF7
   837                           tblptrl	equ	0xFF6
   838                           tablat	equ	0xFF5
   839                           postinc0	equ	0xFEE
   840                           wreg	equ	0xFE8
   841                           postdec1	equ	0xFE5
   842                           fsr1l	equ	0xFE1
   843                           
   844                           	psect	cstackBANK0
   845  000060                     __pcstackBANK0:
   846                           	opt stack 0
   847  000060                     ??_FlashSampleWrite:
   848  000060                     ??___ftdiv:
   849  000060                     ??_FlashReadUart:
   850  000060                     strtol@sign:
   851                           	opt stack 0
   852  000060                     GetMcuFwVersion@compileData:
   853                           	opt stack 0
   854  000060                     GetMcuRunTime@TxMsg:
   855                           	opt stack 0
   856  000060                     SWSPI_Synth_send_bits@bitArray:
   857                           	opt stack 0
   858                           
   859                           ; 32 bytes @ 0x0
   860  000060                     	ds	1
   861  000061                     strtol@a:
   862                           	opt stack 0
   863                           
   864                           ; 4 bytes @ 0x1
   865  000061                     	ds	1
   866  000062                     FlashSampleWrite@rotateLeft:
   867                           	opt stack 0
   868                           
   869                           ; 2 bytes @ 0x2
   870  000062                     	ds	1
   871  000063                     ___ftdiv@cntr:
   872                           	opt stack 0
   873                           
   874                           ; 1 bytes @ 0x3
   875  000063                     	ds	1
   876  000064                     ___ftdiv@f3:
   877                           	opt stack 0
   878  000064                     GetMcuFwVersion@TxMsg:
   879                           	opt stack 0
   880                           
   881                           ; 18 bytes @ 0x4
   882  000064                     	ds	1
   883  000065                     strtol@c:
   884                           	opt stack 0
   885                           
   886                           ; 1 bytes @ 0x5
   887  000065                     	ds	1
   888  000066                     ?_GetIntFromUartData:
   889                           	opt stack 0
   890  000066                     GetIntFromUartData@data:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0x6
   894  000066                     	ds	1
   895  000067                     ___ftdiv@exp:
   896                           	opt stack 0
   897                           
   898                           ; 1 bytes @ 0x7
   899  000067                     	ds	1
   900  000068                     ___ftdiv@sign:
   901                           	opt stack 0
   902                           
   903                           ; 1 bytes @ 0x8
   904  000068                     	ds	1
   905  000069                     ?___ftmul:
   906                           	opt stack 0
   907  000069                     ___ftmul@f1:
   908                           	opt stack 0
   909  000069                     GetMcuRunTime@tempRunTime:
   910                           	opt stack 0
   911                           
   912                           ; 4 bytes @ 0x9
   913  000069                     	ds	3
   914  00006C                     ___ftmul@f2:
   915                           	opt stack 0
   916  00006C                     FlashReadUart@TxMsg:
   917                           	opt stack 0
   918                           
   919                           ; 69 bytes @ 0xC
   920  00006C                     	ds	1
   921  00006D                     GetMcuRunTime@idx:
   922                           	opt stack 0
   923                           
   924                           ; 2 bytes @ 0xD
   925  00006D                     	ds	1
   926  00006E                     ??_GetIntFromUartData:
   927                           
   928                           ; 1 bytes @ 0xE
   929  00006E                     	ds	1
   930  00006F                     ??___ftmul:
   931                           
   932                           ; 1 bytes @ 0xF
   933  00006F                     	ds	1
   934  000070                     GetIntFromUartData@dataRegArr:
   935                           	opt stack 0
   936                           
   937                           ; 10 bytes @ 0x10
   938  000070                     	ds	2
   939  000072                     ___ftmul@exp:
   940                           	opt stack 0
   941                           
   942                           ; 1 bytes @ 0x12
   943  000072                     	ds	1
   944  000073                     ___ftmul@f3_as_product:
   945                           	opt stack 0
   946                           
   947                           ; 3 bytes @ 0x13
   948  000073                     	ds	3
   949  000076                     ___ftmul@cntr:
   950                           	opt stack 0
   951  000076                     _GetMcuFwVersion$2639:
   952                           	opt stack 0
   953                           
   954                           ; 2 bytes @ 0x16
   955  000076                     	ds	1
   956  000077                     ___ftmul@sign:
   957                           	opt stack 0
   958                           
   959                           ; 1 bytes @ 0x17
   960  000077                     	ds	1
   961  000078                     ??_CheckFlashPrecentage:
   962  000078                     ?___ftadd:
   963                           	opt stack 0
   964  000078                     ?___fttol:
   965                           	opt stack 0
   966  000078                     _GetMcuFwVersion$2643:
   967                           	opt stack 0
   968  000078                     ___ftadd@f1:
   969                           	opt stack 0
   970  000078                     ___fttol@f1:
   971                           	opt stack 0
   972                           
   973                           ; 3 bytes @ 0x18
   974  000078                     	ds	2
   975  00007A                     GetIntFromUartData@num:
   976                           	opt stack 0
   977                           
   978                           ; 1 bytes @ 0x1A
   979  00007A                     	ds	1
   980  00007B                     GetIntFromUartData@recVal:
   981                           	opt stack 0
   982  00007B                     ___ftadd@f2:
   983                           	opt stack 0
   984                           
   985                           ; 3 bytes @ 0x1B
   986  00007B                     	ds	1
   987  00007C                     ??___fttol:
   988  00007C                     CheckFlashPrecentage@precentage:
   989                           	opt stack 0
   990  00007C                     GetIntFromUartData@retVal:
   991                           	opt stack 0
   992                           
   993                           ; 8 bytes @ 0x1C
   994  00007C                     	ds	2
   995  00007E                     ??___ftadd:
   996                           
   997                           ; 1 bytes @ 0x1E
   998  00007E                     	ds	2
   999  000080                     SWSPI_Synth_send_bits@mask:
  1000                           	opt stack 0
  1001                           
  1002                           ; 4 bytes @ 0x20
  1003  000080                     	ds	1
  1004  000081                     ___ftadd@sign:
  1005                           	opt stack 0
  1006  000081                     ___fttol@sign1:
  1007                           	opt stack 0
  1008                           
  1009                           ; 1 bytes @ 0x21
  1010  000081                     	ds	1
  1011  000082                     ___ftadd@exp2:
  1012                           	opt stack 0
  1013  000082                     ___fttol@lval:
  1014                           	opt stack 0
  1015                           
  1016                           ; 4 bytes @ 0x22
  1017  000082                     	ds	1
  1018  000083                     ___ftadd@exp1:
  1019                           	opt stack 0
  1020                           
  1021                           ; 1 bytes @ 0x23
  1022  000083                     	ds	1
  1023  000084                     ?___ftsub:
  1024                           	opt stack 0
  1025  000084                     ?_eval_poly:
  1026                           	opt stack 0
  1027  000084                     SWSPI_Synth_send_bits@count:
  1028                           	opt stack 0
  1029  000084                     GetIntFromUartData@idxCon:
  1030                           	opt stack 0
  1031  000084                     ___ftsub@f1:
  1032                           	opt stack 0
  1033  000084                     eval_poly@x:
  1034                           	opt stack 0
  1035                           
  1036                           ; 3 bytes @ 0x24
  1037  000084                     	ds	1
  1038  000085                     SWSPI_Synth_send_bits@phrType:
  1039                           	opt stack 0
  1040                           
  1041                           ; 1 bytes @ 0x25
  1042  000085                     	ds	1
  1043  000086                     GetIntFromUartData@idxData:
  1044                           	opt stack 0
  1045  000086                     ___fttol@exp1:
  1046                           	opt stack 0
  1047                           
  1048                           ; 1 bytes @ 0x26
  1049  000086                     	ds	1
  1050  000087                     ?___altoft:
  1051                           	opt stack 0
  1052  000087                     DacSetValue@data:
  1053                           	opt stack 0
  1054  000087                     UpdateSynthFreq@data:
  1055                           	opt stack 0
  1056  000087                     eval_poly@d:
  1057                           	opt stack 0
  1058  000087                     ___ftsub@f2:
  1059                           	opt stack 0
  1060  000087                     ___altoft@c:
  1061                           	opt stack 0
  1062                           
  1063                           ; 4 bytes @ 0x27
  1064  000087                     	ds	2
  1065  000089                     ??_DacSetValue:
  1066  000089                     UpdateSynthFreq@cType:
  1067                           	opt stack 0
  1068  000089                     eval_poly@n:
  1069                           	opt stack 0
  1070                           
  1071                           ; 2 bytes @ 0x29
  1072  000089                     	ds	1
  1073  00008A                     UpdateSynthFreq@retVal:
  1074                           	opt stack 0
  1075                           
  1076                           ; 8 bytes @ 0x2A
  1077  00008A                     	ds	1
  1078  00008B                     ??___altoft:
  1079  00008B                     eval_poly@res:
  1080                           	opt stack 0
  1081                           
  1082                           ; 3 bytes @ 0x2B
  1083  00008B                     	ds	2
  1084  00008D                     DacSetValue@dacIndex:
  1085                           	opt stack 0
  1086                           
  1087                           ; 1 bytes @ 0x2D
  1088  00008D                     	ds	1
  1089  00008E                     ?_log:
  1090                           	opt stack 0
  1091  00008E                     ?_ldexp:
  1092                           	opt stack 0
  1093  00008E                     ldexp@value:
  1094                           	opt stack 0
  1095  00008E                     log@x:
  1096                           	opt stack 0
  1097  00008E                     DacSetValue@retVal:
  1098                           	opt stack 0
  1099                           
  1100                           ; 8 bytes @ 0x2E
  1101  00008E                     	ds	1
  1102  00008F                     ?_floor:
  1103                           	opt stack 0
  1104  00008F                     floor@x:
  1105                           	opt stack 0
  1106                           
  1107                           ; 3 bytes @ 0x2F
  1108  00008F                     	ds	2
  1109  000091                     ldexp@newexp:
  1110                           	opt stack 0
  1111  000091                     log@exponent:
  1112                           	opt stack 0
  1113                           
  1114                           ; 2 bytes @ 0x31
  1115  000091                     	ds	1
  1116  000092                     floor@i:
  1117                           	opt stack 0
  1118                           
  1119                           ; 3 bytes @ 0x32
  1120  000092                     	ds	1
  1121  000093                     ??_ldexp:
  1122                           
  1123                           ; 1 bytes @ 0x33
  1124  000093                     	ds	2
  1125  000095                     floor@expon:
  1126                           	opt stack 0
  1127                           
  1128                           ; 2 bytes @ 0x35
  1129  000095                     	ds	2
  1130  000097                     ?_exp:
  1131                           	opt stack 0
  1132  000097                     exp@x:
  1133                           	opt stack 0
  1134                           
  1135                           ; 3 bytes @ 0x37
  1136  000097                     	ds	3
  1137  00009A                     _exp$3544:
  1138                           	opt stack 0
  1139                           
  1140                           ; 3 bytes @ 0x3A
  1141  00009A                     	ds	3
  1142  00009D                     exp@exponent:
  1143                           	opt stack 0
  1144                           
  1145                           ; 2 bytes @ 0x3D
  1146  00009D                     	ds	2
  1147  00009F                     exp@sign:
  1148                           	opt stack 0
  1149                           
  1150                           ; 1 bytes @ 0x3F
  1151  00009F                     	ds	1
  1152  0000A0                     ?_pow:
  1153                           	opt stack 0
  1154  0000A0                     pow@x:
  1155                           	opt stack 0
  1156                           
  1157                           ; 3 bytes @ 0x40
  1158  0000A0                     	ds	3
  1159  0000A3                     pow@y:
  1160                           	opt stack 0
  1161                           
  1162                           ; 3 bytes @ 0x43
  1163  0000A3                     	ds	3
  1164  0000A6                     _pow$3542:
  1165                           	opt stack 0
  1166                           
  1167                           ; 3 bytes @ 0x46
  1168  0000A6                     	ds	3
  1169  0000A9                     _pow$3543:
  1170                           	opt stack 0
  1171                           
  1172                           ; 3 bytes @ 0x49
  1173  0000A9                     	ds	3
  1174  0000AC                     pow@sign:
  1175                           	opt stack 0
  1176                           
  1177                           ; 1 bytes @ 0x4C
  1178  0000AC                     	ds	1
  1179  0000AD                     pow@yi:
  1180                           	opt stack 0
  1181                           
  1182                           ; 4 bytes @ 0x4D
  1183  0000AD                     	ds	4
  1184  0000B1                     ??_AdcConvert:
  1185  0000B1                     ?_ReadIntFromEeprom:
  1186                           	opt stack 0
  1187  0000B1                     ReadIntFromEeprom@numOfByes:
  1188                           	opt stack 0
  1189  0000B1                     _FlashReadUart$582:
  1190                           	opt stack 0
  1191                           
  1192                           ; 4 bytes @ 0x51
  1193  0000B1                     	ds	2
  1194  0000B3                     AdcConvert@_adcResult:
  1195                           	opt stack 0
  1196                           
  1197                           ; 2 bytes @ 0x53
  1198  0000B3                     	ds	2
  1199  0000B5                     ??_ReadIntFromEeprom:
  1200  0000B5                     AdcConvert@_adcResult_336:
  1201                           	opt stack 0
  1202  0000B5                     _FlashReadUart$583:
  1203                           	opt stack 0
  1204                           
  1205                           ; 4 bytes @ 0x55
  1206  0000B5                     	ds	2
  1207  0000B7                     _AdcConvert$3539:
  1208                           	opt stack 0
  1209                           
  1210                           ; 3 bytes @ 0x57
  1211  0000B7                     	ds	1
  1212  0000B8                     ReadIntFromEeprom@base:
  1213                           	opt stack 0
  1214                           
  1215                           ; 4 bytes @ 0x58
  1216  0000B8                     	ds	1
  1217  0000B9                     FlashReadUart@j:
  1218                           	opt stack 0
  1219                           
  1220                           ; 2 bytes @ 0x59
  1221  0000B9                     	ds	1
  1222  0000BA                     AdcConvert@adcRes:
  1223                           	opt stack 0
  1224                           
  1225                           ; 2 bytes @ 0x5A
  1226  0000BA                     	ds	1
  1227  0000BB                     FlashReadUart@idx:
  1228                           	opt stack 0
  1229                           
  1230                           ; 2 bytes @ 0x5B
  1231  0000BB                     	ds	1
  1232  0000BC                     AdcConvert@idx:
  1233                           	opt stack 0
  1234  0000BC                     _ReadIntFromEeprom$3540:
  1235                           	opt stack 0
  1236                           
  1237                           ; 3 bytes @ 0x5C
  1238  0000BC                     	ds	1
  1239  0000BD                     FlashReadUart@offset:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x5D
  1243  0000BD                     	ds	2
  1244  0000BF                     FlashReadUart@numOfSampleToRead:
  1245                           	opt stack 0
  1246  0000BF                     _ReadIntFromEeprom$3541:
  1247                           	opt stack 0
  1248                           
  1249                           ; 3 bytes @ 0x5F
  1250  0000BF                     	ds	3
  1251  0000C2                     ReadIntFromEeprom@address:
  1252                           	opt stack 0
  1253                           
  1254                           ; 1 bytes @ 0x62
  1255  0000C2                     	ds	1
  1256  0000C3                     ReadIntFromEeprom@retVal:
  1257                           	opt stack 0
  1258                           
  1259                           ; 4 bytes @ 0x63
  1260  0000C3                     	ds	4
  1261  0000C7                     ReadIntFromEeprom@idx:
  1262                           	opt stack 0
  1263                           
  1264                           ; 1 bytes @ 0x67
  1265  0000C7                     	ds	1
  1266  0000C8                     ??_DacInit:
  1267  0000C8                     DacReadValue@data:
  1268                           	opt stack 0
  1269  0000C8                     SynthReadData@data:
  1270                           	opt stack 0
  1271  0000C8                     InitSynth@EepromVal:
  1272                           	opt stack 0
  1273                           
  1274                           ; 4 bytes @ 0x68
  1275  0000C8                     	ds	2
  1276  0000CA                     ??_DacReadValue:
  1277  0000CA                     DacInit@dacInput:
  1278                           	opt stack 0
  1279                           
  1280                           ; 2 bytes @ 0x6A
  1281  0000CA                     	ds	2
  1282  0000CC                     DacInit@idx:
  1283                           	opt stack 0
  1284  0000CC                     DacReadValue@regNum:
  1285                           	opt stack 0
  1286  0000CC                     InitSynth@cType:
  1287                           	opt stack 0
  1288                           
  1289                           ; 1 bytes @ 0x6C
  1290  0000CC                     	ds	1
  1291  0000CD                     DacReadValue@byteNum:
  1292                           	opt stack 0
  1293  0000CD                     InitSynth@idx:
  1294                           	opt stack 0
  1295                           
  1296                           ; 1 bytes @ 0x6D
  1297  0000CD                     	ds	1
  1298  0000CE                     InitSynth@regNum:
  1299                           	opt stack 0
  1300  0000CE                     DacReadValue@readVal:
  1301                           	opt stack 0
  1302                           
  1303                           ; 2 bytes @ 0x6E
  1304  0000CE                     	ds	1
  1305  0000CF                     SetSynthOper@cType:
  1306                           	opt stack 0
  1307                           
  1308                           ; 1 bytes @ 0x6F
  1309  0000CF                     	ds	1
  1310  0000D0                     DacReadValue@dacIndex:
  1311                           	opt stack 0
  1312                           
  1313                           ; 1 bytes @ 0x70
  1314  0000D0                     	ds	1
  1315  0000D1                     DacReadValue@TxMsg:
  1316                           	opt stack 0
  1317                           
  1318                           ; 7 bytes @ 0x71
  1319  0000D1                     	ds	7
  1320  0000D8                     DacReadValue@byteIdx:
  1321                           	opt stack 0
  1322                           
  1323                           ; 2 bytes @ 0x78
  1324  0000D8                     	ds	2
  1325  0000DA                     GroupAdc@data:
  1326                           	opt stack 0
  1327  0000DA                     GroupSynthesizers@data:
  1328                           	opt stack 0
  1329  0000DA                     GroupFlashMemory@data:
  1330                           	opt stack 0
  1331  0000DA                     GroupDAC@data:
  1332                           	opt stack 0
  1333  0000DA                     
  1334                           ; 3 bytes @ 0x7A
  1335  0000DA                     	ds	2
  1336  0000DC                     GroupAdc@request:
  1337                           	opt stack 0
  1338  0000DC                     GroupSynthesizers@request:
  1339                           	opt stack 0
  1340  0000DC                     GroupFlashMemory@request:
  1341                           	opt stack 0
  1342  0000DC                     GroupDAC@request:
  1343                           	opt stack 0
  1344                           
  1345                           ; 1 bytes @ 0x7C
  1346  0000DC                     	ds	1
  1347  0000DD                     GroupControlMcu@request:
  1348                           	opt stack 0
  1349  0000DD                     GroupStatusAndVersion@request:
  1350                           	opt stack 0
  1351  0000DD                     readUartMessage@idx:
  1352                           	opt stack 0
  1353                           
  1354                           ; 2 bytes @ 0x7D
  1355  0000DD                     	ds	2
  1356  0000DF                     readUartMessage@chRec:
  1357                           	opt stack 0
  1358                           
  1359                           ; 1 bytes @ 0x7F
  1360  0000DF                     	ds	1
  1361                           tblptru	equ	0xFF8
  1362                           tblptrh	equ	0xFF7
  1363                           tblptrl	equ	0xFF6
  1364                           tablat	equ	0xFF5
  1365                           postinc0	equ	0xFEE
  1366                           wreg	equ	0xFE8
  1367                           postdec1	equ	0xFE5
  1368                           fsr1l	equ	0xFE1
  1369                           
  1370                           	psect	cstackCOMRAM
  1371  000001                     __pcstackCOMRAM:
  1372                           	opt stack 0
  1373  000001                     ?___lwmod:
  1374                           	opt stack 0
  1375  000001                     ___lwmod@dividend:
  1376                           	opt stack 0
  1377                           
  1378                           ; 2 bytes @ 0x0
  1379  000001                     	ds	2
  1380  000003                     ___lwmod@divisor:
  1381                           	opt stack 0
  1382                           
  1383                           ; 2 bytes @ 0x2
  1384  000003                     	ds	2
  1385  000005                     ___lwmod@counter:
  1386                           	opt stack 0
  1387                           
  1388                           ; 1 bytes @ 0x4
  1389  000005                     	ds	1
  1390  000006                     ??_INTERRUPT_InterruptManager:
  1391                           
  1392                           ; 1 bytes @ 0x5
  1393  000006                     	ds	18
  1394  000018                     ??_EUSART1_Read:
  1395  000018                     ??_isspace:
  1396  000018                     ??_isdigit:
  1397  000018                     ??_isupper:
  1398  000018                     ??_BlinkErrorLeds:
  1399  000018                     ??_BlinkOkLeds:
  1400  000018                     ??_keepAliveSignalLed:
  1401  000018                     ?_ADC_GetConversion:
  1402                           	opt stack 0
  1403  000018                     ?_abs:
  1404                           	opt stack 0
  1405  000018                     ?___wmul:
  1406                           	opt stack 0
  1407  000018                     ?___ftpack:
  1408                           	opt stack 0
  1409  000018                     ?_frexp:
  1410                           	opt stack 0
  1411  000018                     ?___ftneg:
  1412                           	opt stack 0
  1413  000018                     ?___lldiv:
  1414                           	opt stack 0
  1415  000018                     ?___llmod:
  1416                           	opt stack 0
  1417  000018                     SwSpi_Data_Pin@cPinMode:
  1418                           	opt stack 0
  1419  000018                     SwSpi_Clk_Pin@cPinMode:
  1420                           	opt stack 0
  1421  000018                     SwSpi_Set_CE_Pin@cPinMode:
  1422                           	opt stack 0
  1423  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  1424                           	opt stack 0
  1425  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  1426                           	opt stack 0
  1427  000018                     EUSART1_Write@txData:
  1428                           	opt stack 0
  1429  000018                     DATAEE_WriteByte@bData:
  1430                           	opt stack 0
  1431  000018                     DATAEE_ReadByte@bAdd:
  1432                           	opt stack 0
  1433  000018                     toupper@c:
  1434                           	opt stack 0
  1435  000018                     IOCB4_SetInterruptHandler@InterruptHandler:
  1436                           	opt stack 0
  1437  000018                     IOCB5_SetInterruptHandler@InterruptHandler:
  1438                           	opt stack 0
  1439  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  1440                           	opt stack 0
  1441  000018                     crc8@dataArray:
  1442                           	opt stack 0
  1443  000018                     Make32bitsArray@array:
  1444                           	opt stack 0
  1445  000018                     ___wmul@multiplier:
  1446                           	opt stack 0
  1447  000018                     abs@a:
  1448                           	opt stack 0
  1449  000018                     memset@p1:
  1450                           	opt stack 0
  1451  000018                     ___ftpack@arg:
  1452                           	opt stack 0
  1453  000018                     ___ftge@ff1:
  1454                           	opt stack 0
  1455  000018                     ___ftneg@f1:
  1456                           	opt stack 0
  1457  000018                     frexp@value:
  1458                           	opt stack 0
  1459  000018                     FLASH_ReadByte@flashAddr:
  1460                           	opt stack 0
  1461  000018                     FLASH_EraseBlock@baseAddr:
  1462                           	opt stack 0
  1463  000018                     make8@data:
  1464                           	opt stack 0
  1465  000018                     ___lldiv@dividend:
  1466                           	opt stack 0
  1467  000018                     ___llmod@dividend:
  1468                           	opt stack 0
  1469                           
  1470                           ; 4 bytes @ 0x17
  1471  000018                     	ds	1
  1472  000019                     EepromRead@address:
  1473                           	opt stack 0
  1474  000019                     SwSpi_Data_Pin@phrType:
  1475                           	opt stack 0
  1476  000019                     SwSpi_Clk_Pin@phrType:
  1477                           	opt stack 0
  1478  000019                     SwSpi_Set_CE_Pin@phrType:
  1479                           	opt stack 0
  1480  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  1481                           	opt stack 0
  1482  000019                     DATAEE_WriteByte@bAdd:
  1483                           	opt stack 0
  1484  000019                     _isdigit$3269:
  1485                           	opt stack 0
  1486  000019                     _isspace$3272:
  1487                           	opt stack 0
  1488  000019                     _isupper$3275:
  1489                           	opt stack 0
  1490  000019                     WriteUartMessage@dataBuf:
  1491                           	opt stack 0
  1492  000019                     EUSART1_Read@readValue:
  1493                           	opt stack 0
  1494                           
  1495                           ; 2 bytes @ 0x18
  1496  000019                     	ds	1
  1497  00001A                     ??_ADC_GetConversion:
  1498  00001A                     ??_abs:
  1499  00001A                     ??_TMR0_Initialize:
  1500  00001A                     ?___lmul:
  1501                           	opt stack 0
  1502  00001A                     SWSPI_DAC_send_bits@data:
  1503                           	opt stack 0
  1504  00001A                     DATAEE_WriteByte@GIEBitValue:
  1505                           	opt stack 0
  1506  00001A                     isdigit@c:
  1507                           	opt stack 0
  1508  00001A                     isspace@c:
  1509                           	opt stack 0
  1510  00001A                     isupper@c:
  1511                           	opt stack 0
  1512  00001A                     crc8@dataSize:
  1513                           	opt stack 0
  1514  00001A                     ___wmul@multiplicand:
  1515                           	opt stack 0
  1516  00001A                     memset@c:
  1517                           	opt stack 0
  1518  00001A                     Make32bitsArray@data:
  1519                           	opt stack 0
  1520  00001A                     ___lmul@multiplier:
  1521                           	opt stack 0
  1522                           
  1523                           ; 4 bytes @ 0x19
  1524  00001A                     	ds	1
  1525  00001B                     ??_isalpha:
  1526  00001B                     BlinkErrorLeds@state:
  1527                           	opt stack 0
  1528  00001B                     BlinkOkLeds@state:
  1529                           	opt stack 0
  1530  00001B                     EepromWrite@data:
  1531                           	opt stack 0
  1532  00001B                     SWSPI_DAC_send_bits@count:
  1533                           	opt stack 0
  1534  00001B                     ___ftpack@exp:
  1535                           	opt stack 0
  1536  00001B                     WriteUartMessage@dataSize:
  1537                           	opt stack 0
  1538  00001B                     frexp@eptr:
  1539                           	opt stack 0
  1540  00001B                     ___ftge@ff2:
  1541                           	opt stack 0
  1542                           
  1543                           ; 3 bytes @ 0x1A
  1544  00001B                     	ds	1
  1545  00001C                     ??_crc8:
  1546  00001C                     EepromWrite@address:
  1547                           	opt stack 0
  1548  00001C                     SWSPI_DAC_send_bits@phrType:
  1549                           	opt stack 0
  1550  00001C                     FLASH_EraseBlock@GIEBitValue:
  1551                           	opt stack 0
  1552  00001C                     ADC_GetConversion@channel:
  1553                           	opt stack 0
  1554  00001C                     make8@dataLocation:
  1555                           	opt stack 0
  1556  00001C                     ___ftpack@sign:
  1557                           	opt stack 0
  1558  00001C                     _isalpha$3266:
  1559                           	opt stack 0
  1560  00001C                     BlinkErrorLeds@idx:
  1561                           	opt stack 0
  1562  00001C                     BlinkOkLeds@idx:
  1563                           	opt stack 0
  1564  00001C                     ___wmul@product:
  1565                           	opt stack 0
  1566  00001C                     memset@n:
  1567                           	opt stack 0
  1568  00001C                     ___lldiv@divisor:
  1569                           	opt stack 0
  1570  00001C                     ___llmod@divisor:
  1571                           	opt stack 0
  1572                           
  1573                           ; 4 bytes @ 0x1B
  1574  00001C                     	ds	1
  1575  00001D                     ??_make8:
  1576  00001D                     ??___ftpack:
  1577  00001D                     ??_frexp:
  1578  00001D                     ??_WriteUartMessage:
  1579  00001D                     isalpha@c:
  1580                           	opt stack 0
  1581  00001D                     crc8@crc:
  1582                           	opt stack 0
  1583  00001D                     FLASH_WriteBlock@writeAddr:
  1584                           	opt stack 0
  1585                           
  1586                           ; 4 bytes @ 0x1C
  1587  00001D                     	ds	1
  1588  00001E                     ??_Make32bitsArray:
  1589  00001E                     ??___ftge:
  1590  00001E                     WriteUartMessage@idx:
  1591                           	opt stack 0
  1592  00001E                     memset@p:
  1593                           	opt stack 0
  1594  00001E                     ___lmul@multiplicand:
  1595                           	opt stack 0
  1596                           
  1597                           ; 4 bytes @ 0x1D
  1598  00001E                     	ds	1
  1599  00001F                     crc8@i:
  1600                           	opt stack 0
  1601                           
  1602                           ; 2 bytes @ 0x1E
  1603  00001F                     	ds	1
  1604  000020                     ?___awtoft:
  1605                           	opt stack 0
  1606  000020                     ?___lltoft:
  1607                           	opt stack 0
  1608  000020                     ?___lwtoft:
  1609                           	opt stack 0
  1610  000020                     ___llmod@counter:
  1611                           	opt stack 0
  1612  000020                     ZeroArray@array:
  1613                           	opt stack 0
  1614  000020                     ZeroBitsArray@array:
  1615                           	opt stack 0
  1616  000020                     Make32bitsArray@idx:
  1617                           	opt stack 0
  1618  000020                     ___awtoft@c:
  1619                           	opt stack 0
  1620  000020                     ___lwtoft@c:
  1621                           	opt stack 0
  1622  000020                     ___lldiv@quotient:
  1623                           	opt stack 0
  1624  000020                     ___lltoft@c:
  1625                           	opt stack 0
  1626                           
  1627                           ; 4 bytes @ 0x1F
  1628  000020                     	ds	1
  1629  000021                     FLASH_WriteBlock@flashWrBufPtr:
  1630                           	opt stack 0
  1631  000021                     StoreIntInEeprom@data:
  1632                           	opt stack 0
  1633                           
  1634                           ; 4 bytes @ 0x20
  1635  000021                     	ds	1
  1636  000022                     ZeroArray@size:
  1637                           	opt stack 0
  1638  000022                     SWSPI_Synth_send_bits@data:
  1639                           	opt stack 0
  1640  000022                     ___lmul@product:
  1641                           	opt stack 0
  1642                           
  1643                           ; 4 bytes @ 0x21
  1644  000022                     	ds	1
  1645  000023                     ??_FLASH_WriteBlock:
  1646  000023                     ___awtoft@sign:
  1647                           	opt stack 0
  1648                           
  1649                           ; 1 bytes @ 0x22
  1650  000023                     	ds	1
  1651  000024                     ??_GetMcuFwVersion:
  1652  000024                     ??_FlashReadCondition:
  1653  000024                     ??___lltoft:
  1654  000024                     SendAckMessage@inRequest:
  1655                           	opt stack 0
  1656  000024                     ___lldiv@counter:
  1657                           	opt stack 0
  1658                           
  1659                           ; 1 bytes @ 0x23
  1660  000024                     	ds	1
  1661  000025                     ??_GetMcuRunTime:
  1662  000025                     SendAckMessage@inGroup:
  1663                           	opt stack 0
  1664  000025                     StoreIntInEeprom@address:
  1665                           	opt stack 0
  1666                           
  1667                           ; 1 bytes @ 0x24
  1668  000025                     	ds	1
  1669  000026                     ?_strtol:
  1670                           	opt stack 0
  1671  000026                     StoreIntInEeprom@numOfByes:
  1672                           	opt stack 0
  1673  000026                     strtol@s:
  1674                           	opt stack 0
  1675  000026                     SWSPI_send_word@data:
  1676                           	opt stack 0
  1677  000026                     SendAckMessage@TxMsg:
  1678                           	opt stack 0
  1679                           
  1680                           ; 6 bytes @ 0x25
  1681  000026                     	ds	1
  1682  000027                     FLASH_WriteBlock@blockStartAddr:
  1683                           	opt stack 0
  1684                           
  1685                           ; 4 bytes @ 0x26
  1686  000027                     	ds	1
  1687  000028                     StoreIntInEeprom@val:
  1688                           	opt stack 0
  1689  000028                     ___lltoft@exp:
  1690                           	opt stack 0
  1691  000028                     strtol@endptr:
  1692                           	opt stack 0
  1693  000028                     FlashReadCondition@TxMsg:
  1694                           	opt stack 0
  1695                           
  1696                           ; 9 bytes @ 0x27
  1697  000028                     	ds	1
  1698  000029                     ?___ftdiv:
  1699                           	opt stack 0
  1700  000029                     StoreIntInEeprom@idx:
  1701                           	opt stack 0
  1702  000029                     ___ftdiv@f1:
  1703                           	opt stack 0
  1704                           
  1705                           ; 3 bytes @ 0x28
  1706  000029                     	ds	1
  1707  00002A                     SWSPI_send_word@dataSize:
  1708                           	opt stack 0
  1709  00002A                     strtol@base:
  1710                           	opt stack 0
  1711                           
  1712                           ; 2 bytes @ 0x29
  1713  00002A                     	ds	1
  1714  00002B                     SWSPI_send_word@datac:
  1715                           	opt stack 0
  1716  00002B                     FLASH_WriteBlock@GIEBitValue:
  1717                           	opt stack 0
  1718                           
  1719                           ; 1 bytes @ 0x2A
  1720  00002B                     	ds	1
  1721  00002C                     ??_strtol:
  1722  00002C                     ??_testLeds:
  1723  00002C                     FLASH_WriteBlock@i:
  1724                           	opt stack 0
  1725  00002C                     SetChannelMode@data:
  1726                           	opt stack 0
  1727  00002C                     FlashReadUart@data:
  1728                           	opt stack 0
  1729  00002C                     SWSPI_send_word@idx:
  1730                           	opt stack 0
  1731  00002C                     ___ftdiv@f2:
  1732                           	opt stack 0
  1733                           
  1734                           ; 3 bytes @ 0x2B
  1735  00002C                     	ds	1
  1736  00002D                     testLeds@idx:
  1737                           	opt stack 0
  1738  00002D                     FlashSampleWrite@sampleData:
  1739                           	opt stack 0
  1740                           
  1741                           ; 2 bytes @ 0x2C
  1742  00002D                     	ds	1
  1743  00002E                     SWSPI_send_word@phrType:
  1744                           	opt stack 0
  1745                           
  1746                           ; 1 bytes @ 0x2D
  1747  00002E                     	ds	1
  1748  00002F                     ??_eval_poly:
  1749  00002F                     FlashSampleWrite@channelNum:
  1750                           	opt stack 0
  1751  00002F                     ___altoft@exp:
  1752                           	opt stack 0
  1753                           
  1754                           ; 1 bytes @ 0x2E
  1755  00002F                     	ds	1
  1756  000030                     ___altoft@sign:
  1757                           	opt stack 0
  1758                           
  1759                           ; 1 bytes @ 0x2F
  1760  000030                     	ds	1
  1761  000031                     tblptru	equ	0xFF8
  1762                           tblptrh	equ	0xFF7
  1763                           tblptrl	equ	0xFF6
  1764                           tablat	equ	0xFF5
  1765                           postinc0	equ	0xFEE
  1766                           wreg	equ	0xFE8
  1767                           postdec1	equ	0xFE5
  1768                           fsr1l	equ	0xFE1
  1769                           
  1770                           ; 1 bytes @ 0x30
  1771 ;;
  1772 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1773 ;;
  1774 ;; *************** function _main *****************
  1775 ;; Defined at:
  1776 ;;		line 13 in file "main.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;		None
  1779 ;; Auto vars:     Size  Location     Type
  1780 ;;		None
  1781 ;; Return value:  Size  Location     Type
  1782 ;;                  1    wreg      void 
  1783 ;; Registers used:
  1784 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1785 ;; Tracked objects:
  1786 ;;		On entry : 0/0
  1787 ;;		On exit  : 0/0
  1788 ;;		Unchanged: 0/0
  1789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1790 ;;      Params:         0       0       0       0       0       0       0
  1791 ;;      Locals:         0       0       0       0       0       0       0
  1792 ;;      Temps:          0       0       0       0       0       0       0
  1793 ;;      Totals:         0       0       0       0       0       0       0
  1794 ;;Total ram usage:        0 bytes
  1795 ;; Hardware stack levels required when called:   14
  1796 ;; This function calls:
  1797 ;;		_AdcConvert
  1798 ;;		_BlinkErrorLeds
  1799 ;;		_BlinkOkLeds
  1800 ;;		_CheckFlashPrecentage
  1801 ;;		_InitSystemApplicationManagers
  1802 ;;		_SendSystemStartAck
  1803 ;;		_SetMcuRunTime
  1804 ;;		_SetMcuSystem
  1805 ;;		_SynthLdDetect
  1806 ;;		_keepAliveSignalLed
  1807 ;;		_keepAliveSignalUart
  1808 ;;		_readUartMessage
  1809 ;; This function is called by:
  1810 ;;		Startup code after reset
  1811 ;; This function uses a non-reentrant model
  1812 ;;
  1813                           
  1814                           	psect	text0
  1815  0034A4                     __ptext0:
  1816                           	opt stack 0
  1817  0034A4                     _main:
  1818                           	opt stack 17
  1819                           
  1820                           ;main.c: 16: SetMcuSystem();
  1821                           
  1822                           ;incstack = 0
  1823  0034A4  EC54  F021         	call	_SetMcuSystem	;wreg free
  1824                           
  1825                           ;main.c: 19: InitSystemApplicationManagers();
  1826  0034A8  ECE5  F020         	call	_InitSystemApplicationManagers	;wreg free
  1827                           
  1828                           ;main.c: 22: SendSystemStartAck();
  1829  0034AC  EC4E  F021         	call	_SendSystemStartAck	;wreg free
  1830                           
  1831                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  1832  0034B0  0E03               	movlw	3
  1833  0034B2  EC55  F01B         	call	_BlinkOkLeds
  1834  0034B6                     
  1835                           ;main.c: 28: {
  1836                           ;main.c: 29: readUartMessage();
  1837  0034B6  EC6C  F009         	call	_readUartMessage	;wreg free
  1838                           
  1839                           ;main.c: 31: if (Timer0_OneSec == 1)
  1840  0034BA  0100               	movlb	0	; () banked
  1841  0034BC  05F6               	decf	_Timer0_OneSec& (0+255),w,b	;volatile
  1842  0034BE  A4D8               	btfss	status,2,c
  1843  0034C0  D006               	goto	l1530
  1844                           
  1845                           ; BSR set to: 0
  1846                           ;main.c: 32: {
  1847                           ;main.c: 33: SetMcuRunTime();
  1848  0034C2  EC54  F01D         	call	_SetMcuRunTime	;wreg free
  1849                           
  1850                           ;main.c: 34: Timer0_OneSec = 0;
  1851  0034C6  0E00               	movlw	0
  1852  0034C8  0100               	movlb	0	; () banked
  1853  0034CA  6FF6               	movwf	_Timer0_OneSec& (0+255),b	;volatile
  1854                           
  1855                           ;main.c: 35: }
  1856  0034CC  D7F4               	goto	l1529
  1857  0034CE                     l1530:
  1858                           
  1859                           ; BSR set to: 0
  1860                           ;main.c: 36: else if (Timer0_Sampling == 1)
  1861                           
  1862                           ; BSR set to: 0
  1863  0034CE  05F8               	decf	_Timer0_Sampling& (0+255),w,b	;volatile
  1864  0034D0  A4D8               	btfss	status,2,c
  1865  0034D2  D010               	goto	l1532
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;main.c: 37: {
  1869                           ;main.c: 38: keepAliveSignalLed();
  1870  0034D4  ECCE  F020         	call	_keepAliveSignalLed	;wreg free
  1871                           
  1872                           ;main.c: 40: if(1 == CheckFlashPrecentage())
  1873  0034D8  ECD7  F016         	call	_CheckFlashPrecentage	;wreg free
  1874  0034DC  06E8               	decf	wreg,f,c
  1875  0034DE  A4D8               	btfss	status,2,c
  1876  0034E0  D003               	goto	l1533
  1877                           
  1878                           ;main.c: 41: {
  1879                           ;main.c: 42: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  1880  0034E2  0E04               	movlw	4
  1881  0034E4  EC26  F01B         	call	_BlinkErrorLeds
  1882  0034E8                     l1533:
  1883                           
  1884                           ;main.c: 43: }
  1885                           ;main.c: 46: AdcConvert();
  1886  0034E8  EC40  F00C         	call	_AdcConvert	;wreg free
  1887                           
  1888                           ;main.c: 47: Timer0_Sampling = 0;
  1889  0034EC  0E00               	movlw	0
  1890  0034EE  0100               	movlb	0	; () banked
  1891  0034F0  6FF8               	movwf	_Timer0_Sampling& (0+255),b	;volatile
  1892                           
  1893                           ;main.c: 48: }
  1894  0034F2  D7E1               	goto	l1529
  1895  0034F4                     l1532:
  1896                           
  1897                           ; BSR set to: 0
  1898                           ;main.c: 49: else if (Timer0_KeepAlive == 1)
  1899                           
  1900                           ; BSR set to: 0
  1901  0034F4  05F7               	decf	_Timer0_KeepAlive& (0+255),w,b	;volatile
  1902  0034F6  A4D8               	btfss	status,2,c
  1903  0034F8  D006               	goto	l1535
  1904                           
  1905                           ; BSR set to: 0
  1906                           ;main.c: 50: {
  1907                           ;main.c: 51: keepAliveSignalUart();
  1908  0034FA  EC48  F021         	call	_keepAliveSignalUart	;wreg free
  1909                           
  1910                           ;main.c: 52: Timer0_KeepAlive = 0;
  1911  0034FE  0E00               	movlw	0
  1912  003500  0100               	movlb	0	; () banked
  1913  003502  6FF7               	movwf	_Timer0_KeepAlive& (0+255),b	;volatile
  1914                           
  1915                           ;main.c: 53: }
  1916  003504  D7D8               	goto	l1529
  1917  003506                     l1535:
  1918                           
  1919                           ; BSR set to: 0
  1920                           ;main.c: 54: else if (Timer0_SynthLd == 1)
  1921                           
  1922                           ; BSR set to: 0
  1923  003506  05F9               	decf	_Timer0_SynthLd& (0+255),w,b	;volatile
  1924  003508  A4D8               	btfss	status,2,c
  1925  00350A  D7D5               	goto	l1529
  1926                           
  1927                           ; BSR set to: 0
  1928                           ;main.c: 55: {
  1929                           ;main.c: 56: SynthLdDetect();
  1930  00350C  EC69  F01F         	call	_SynthLdDetect	;wreg free
  1931                           
  1932                           ;main.c: 57: Timer0_SynthLd = 0;
  1933  003510  0E00               	movlw	0
  1934  003512  0100               	movlb	0	; () banked
  1935  003514  6FF9               	movwf	_Timer0_SynthLd& (0+255),b	;volatile
  1936                           
  1937                           ; BSR set to: 0
  1938                           
  1939                           ; BSR set to: 0
  1940                           
  1941                           ; BSR set to: 0
  1942                           
  1943                           ; BSR set to: 0
  1944                           
  1945                           ; BSR set to: 0
  1946  003516  D7CF               	goto	l1529
  1947  003518                     __end_of_main:
  1948                           	opt stack 0
  1949                           tblptru	equ	0xFF8
  1950                           tblptrh	equ	0xFF7
  1951                           tblptrl	equ	0xFF6
  1952                           tablat	equ	0xFF5
  1953                           postinc0	equ	0xFEE
  1954                           wreg	equ	0xFE8
  1955                           postdec1	equ	0xFE5
  1956                           fsr1l	equ	0xFE1
  1957                           status	equ	0xFD8
  1958                           
  1959 ;; *************** function _readUartMessage *****************
  1960 ;; Defined at:
  1961 ;;		line 28 in file "EusartApp.c"
  1962 ;; Parameters:    Size  Location     Type
  1963 ;;		None
  1964 ;; Auto vars:     Size  Location     Type
  1965 ;;  idx             2  125[BANK0 ] int 
  1966 ;;  chRec           1  127[BANK0 ] unsigned char 
  1967 ;; Return value:  Size  Location     Type
  1968 ;;                  1    wreg      void 
  1969 ;; Registers used:
  1970 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1971 ;; Tracked objects:
  1972 ;;		On entry : 0/0
  1973 ;;		On exit  : 0/0
  1974 ;;		Unchanged: 0/0
  1975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1976 ;;      Params:         0       0       0       0       0       0       0
  1977 ;;      Locals:         0       3       0       0       0       0       0
  1978 ;;      Temps:          0       0       4       0       0       0       0
  1979 ;;      Totals:         0       3       4       0       0       0       0
  1980 ;;Total ram usage:        7 bytes
  1981 ;; Hardware stack levels used:    1
  1982 ;; Hardware stack levels required when called:   13
  1983 ;; This function calls:
  1984 ;;		_EUSART1_Read
  1985 ;;		_GroupAdc
  1986 ;;		_GroupControlMcu
  1987 ;;		_GroupDAC
  1988 ;;		_GroupFlashMemory
  1989 ;;		_GroupStatusAndVersion
  1990 ;;		_GroupSynthesizers
  1991 ;;		_InitRxMessageParams
  1992 ;;		_ZeroArray
  1993 ;;		_crc8
  1994 ;; This function is called by:
  1995 ;;		_main
  1996 ;; This function uses a non-reentrant model
  1997 ;;
  1998                           
  1999                           	psect	text1
  2000  0012D8                     __ptext1:
  2001                           	opt stack 0
  2002  0012D8                     _readUartMessage:
  2003                           	opt stack 17
  2004                           
  2005                           ;EusartApp.c: 31: uint8_t chRec = (0);
  2006                           
  2007                           ; BSR set to: 0
  2008                           ;incstack = 0
  2009  0012D8  0E00               	movlw	0
  2010  0012DA  0100               	movlb	0	; () banked
  2011  0012DC  6FDF               	movwf	readUartMessage@chRec& (0+255),b
  2012                           
  2013                           ;EusartApp.c: 32: switch(cState)
  2014  0012DE  D0DC               	goto	l188
  2015  0012E0                     
  2016                           ; BSR set to: 0
  2017                           ;EusartApp.c: 37: if(eusart1RxCount > (4))
  2018                           
  2019                           ; BSR set to: 0
  2020  0012E0  0E04               	movlw	4
  2021  0012E2  65F4               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2022  0012E4  0012               	return	
  2023                           
  2024                           ; BSR set to: 0
  2025                           ;EusartApp.c: 38: {
  2026                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  2027  0012E6  0E01               	movlw	1
  2028  0012E8  6FF3               	movwf	_cState& (0+255),b
  2029                           
  2030                           ; BSR set to: 0
  2031                           ;EusartApp.c: 40: }
  2032                           ;EusartApp.c: 41: return;
  2033                           
  2034                           ; BSR set to: 0
  2035  0012EA  0012               	return	
  2036  0012EC                     
  2037                           ; BSR set to: 0
  2038                           ;EusartApp.c: 45: InitRxMessageParams();
  2039                           
  2040                           ; BSR set to: 0
  2041  0012EC  ECAD  F01F         	call	_InitRxMessageParams	;wreg free
  2042                           
  2043                           ;EusartApp.c: 46: msgCount = 0;
  2044  0012F0  0E00               	movlw	0
  2045  0012F2  0100               	movlb	0	; () banked
  2046  0012F4  6FEC               	movwf	_msgCount& (0+255),b
  2047                           
  2048                           ; BSR set to: 0
  2049                           ;EusartApp.c: 47: if(eusart1RxCount > 1)
  2050  0012F6  0E01               	movlw	1
  2051  0012F8  65F4               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2052  0012FA  D00D               	goto	l193
  2053                           
  2054                           ; BSR set to: 0
  2055                           ;EusartApp.c: 48: {
  2056                           ;EusartApp.c: 49: chRec = EUSART1_Read();
  2057  0012FC  EC32  F01D         	call	_EUSART1_Read	;wreg free
  2058  001300  0100               	movlb	0	; () banked
  2059  001302  6FDF               	movwf	readUartMessage@chRec& (0+255),b
  2060                           
  2061                           ; BSR set to: 0
  2062                           ;EusartApp.c: 50: rxMsgQueue[(0)] = chRec;
  2063  001304  C0DF  F1C4         	movff	readUartMessage@chRec,_rxMsgQueue
  2064                           
  2065                           ; BSR set to: 0
  2066                           ;EusartApp.c: 51: if(chRec == (0x24))
  2067  001308  0E24               	movlw	36
  2068  00130A  19DF               	xorwf	readUartMessage@chRec& (0+255),w,b
  2069  00130C  A4D8               	btfss	status,2,c
  2070  00130E  0012               	return	
  2071                           
  2072                           ; BSR set to: 0
  2073                           ;EusartApp.c: 52: {
  2074                           ;EusartApp.c: 53: cState = READ_GROUP;
  2075  001310  0E02               	movlw	2
  2076  001312  6FF3               	movwf	_cState& (0+255),b
  2077                           
  2078                           ; BSR set to: 0
  2079                           ;EusartApp.c: 54: }
  2080                           ;EusartApp.c: 55: }
  2081  001314  0012               	return	
  2082  001316                     l193:
  2083                           
  2084                           ; BSR set to: 0
  2085                           ;EusartApp.c: 56: else
  2086                           ;EusartApp.c: 57: {
  2087                           ;EusartApp.c: 58: cState = START_RX_MESSAGE_READ;
  2088                           
  2089                           ; BSR set to: 0
  2090  001316  0E00               	movlw	0
  2091  001318  6FF3               	movwf	_cState& (0+255),b
  2092                           
  2093                           ; BSR set to: 0
  2094                           ;EusartApp.c: 59: }
  2095                           ;EusartApp.c: 61: break;
  2096  00131A  0012               	return	
  2097  00131C                     
  2098                           ; BSR set to: 0
  2099                           ;EusartApp.c: 65: if(eusart1RxCount > 1)
  2100                           
  2101                           ; BSR set to: 0
  2102  00131C  0E01               	movlw	1
  2103  00131E  65F4               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2104  001320  0012               	return	
  2105                           
  2106                           ; BSR set to: 0
  2107                           ;EusartApp.c: 66: {
  2108                           ;EusartApp.c: 67: group = EUSART1_Read();
  2109  001322  EC32  F01D         	call	_EUSART1_Read	;wreg free
  2110  001326  0100               	movlb	0	; () banked
  2111  001328  6FF2               	movwf	_group& (0+255),b
  2112                           
  2113                           ; BSR set to: 0
  2114                           ;EusartApp.c: 68: rxMsgQueue[(1)] = group;
  2115  00132A  C0F2  F1C5         	movff	_group,_rxMsgQueue+1
  2116                           
  2117                           ; BSR set to: 0
  2118                           ;EusartApp.c: 69: cState = READ_REQUEST;
  2119  00132E  0E03               	movlw	3
  2120  001330  6FF3               	movwf	_cState& (0+255),b
  2121                           
  2122                           ; BSR set to: 0
  2123                           ;EusartApp.c: 70: }
  2124                           ;EusartApp.c: 71: break;
  2125  001332  0012               	return	
  2126  001334                     
  2127                           ; BSR set to: 0
  2128                           ;EusartApp.c: 75: if(eusart1RxCount > 1)
  2129                           
  2130                           ; BSR set to: 0
  2131  001334  0E01               	movlw	1
  2132  001336  65F4               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2133  001338  0012               	return	
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;EusartApp.c: 76: {
  2137                           ;EusartApp.c: 77: request = EUSART1_Read();
  2138  00133A  EC32  F01D         	call	_EUSART1_Read	;wreg free
  2139  00133E  0100               	movlb	0	; () banked
  2140  001340  6FF1               	movwf	_request& (0+255),b
  2141                           
  2142                           ; BSR set to: 0
  2143                           ;EusartApp.c: 78: rxMsgQueue[(2)] = request;
  2144  001342  C0F1  F1C6         	movff	_request,_rxMsgQueue+2
  2145                           
  2146                           ; BSR set to: 0
  2147                           ;EusartApp.c: 79: cState = READ_DATA_SIZE;
  2148  001346  0E04               	movlw	4
  2149  001348  6FF3               	movwf	_cState& (0+255),b
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;EusartApp.c: 80: }
  2153                           ;EusartApp.c: 81: break;
  2154  00134A  0012               	return	
  2155  00134C                     
  2156                           ; BSR set to: 0
  2157                           ;EusartApp.c: 84: if(eusart1RxCount > 1)
  2158                           
  2159                           ; BSR set to: 0
  2160  00134C  0E01               	movlw	1
  2161  00134E  65F4               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2162  001350  0012               	return	
  2163                           
  2164                           ; BSR set to: 0
  2165                           ;EusartApp.c: 85: {
  2166                           ;EusartApp.c: 86: dataSize = EUSART1_Read();
  2167  001352  EC32  F01D         	call	_EUSART1_Read	;wreg free
  2168  001356  0100               	movlb	0	; () banked
  2169  001358  6FF0               	movwf	_dataSize& (0+255),b
  2170                           
  2171                           ; BSR set to: 0
  2172                           ;EusartApp.c: 87: rxMsgQueue[(3)] = dataSize;
  2173  00135A  C0F0  F1C7         	movff	_dataSize,_rxMsgQueue+3
  2174                           
  2175                           ; BSR set to: 0
  2176                           ;EusartApp.c: 88: if(dataSize == 0)
  2177  00135E  51F0               	movf	_dataSize& (0+255),w,b
  2178  001360  A4D8               	btfss	status,2,c
  2179  001362  D003               	goto	l203
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;EusartApp.c: 89: {
  2183                           ;EusartApp.c: 90: cState = CHECK_CRC;
  2184  001364  0E06               	movlw	6
  2185  001366  6FF3               	movwf	_cState& (0+255),b
  2186                           
  2187                           ;EusartApp.c: 91: }
  2188  001368  0012               	return	
  2189  00136A                     l203:
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;EusartApp.c: 92: else
  2193                           ;EusartApp.c: 93: {
  2194                           ;EusartApp.c: 94: cState = READ_DATA;
  2195                           
  2196                           ; BSR set to: 0
  2197  00136A  0E05               	movlw	5
  2198  00136C  6FF3               	movwf	_cState& (0+255),b
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;EusartApp.c: 95: }
  2202                           ;EusartApp.c: 97: }
  2203                           ;EusartApp.c: 99: break;
  2204                           
  2205                           ; BSR set to: 0
  2206  00136E  0012               	return	
  2207  001370                     
  2208                           ; BSR set to: 0
  2209                           ;EusartApp.c: 103: if(eusart1RxCount >= dataSize)
  2210                           
  2211                           ; BSR set to: 0
  2212  001370  51F0               	movf	_dataSize& (0+255),w,b
  2213  001372  5DF4               	subwf	_eusart1RxCount& (0+255),w,b	;volatile
  2214  001374  A0D8               	btfss	status,0,c
  2215  001376  0012               	return	
  2216                           
  2217                           ; BSR set to: 0
  2218                           ;EusartApp.c: 104: {
  2219                           ;EusartApp.c: 105: ZeroArray(rxMsgData, (0x14));
  2220  001378  0EB0               	movlw	low _rxMsgData
  2221  00137A  6E20               	movwf	ZeroArray@array,c
  2222  00137C  0E01               	movlw	high _rxMsgData
  2223  00137E  6E21               	movwf	ZeroArray@array+1,c
  2224  001380  0E00               	movlw	0
  2225  001382  6E23               	movwf	ZeroArray@size+1,c
  2226  001384  0E14               	movlw	20
  2227  001386  6E22               	movwf	ZeroArray@size,c
  2228  001388  EC95  F020         	call	_ZeroArray	;wreg free
  2229                           
  2230                           ;EusartApp.c: 107: for(int idx = 0; idx < dataSize; idx++)
  2231  00138C  0E00               	movlw	0
  2232  00138E  0100               	movlb	0	; () banked
  2233  001390  6FDE               	movwf	(readUartMessage@idx+1)& (0+255),b
  2234  001392  0E00               	movlw	0
  2235  001394  6FDD               	movwf	readUartMessage@idx& (0+255),b
  2236  001396  D020               	goto	l207
  2237  001398                     
  2238                           ;EusartApp.c: 108: {
  2239                           ;EusartApp.c: 109: chRec = EUSART1_Read();
  2240                           
  2241                           ; BSR set to: 0
  2242  001398  EC32  F01D         	call	_EUSART1_Read	;wreg free
  2243  00139C  0100               	movlb	0	; () banked
  2244  00139E  6FDF               	movwf	readUartMessage@chRec& (0+255),b
  2245                           
  2246                           ; BSR set to: 0
  2247                           ;EusartApp.c: 110: rxMsgQueue[(0x4) + msgCount++] = chRec;
  2248  0013A0  51EC               	movf	_msgCount& (0+255),w,b
  2249  0013A2  0101               	movlb	1	; () banked
  2250  0013A4  6FEA               	movwf	??_readUartMessage& (0+255),b
  2251  0013A6  6BEB               	clrf	(??_readUartMessage+1)& (0+255),b
  2252  0013A8  0E04               	movlw	4
  2253  0013AA  27EA               	addwf	??_readUartMessage& (0+255),f,b
  2254  0013AC  0E00               	movlw	0
  2255  0013AE  23EB               	addwfc	(??_readUartMessage+1)& (0+255),f,b
  2256  0013B0  0EC4               	movlw	low _rxMsgQueue
  2257  0013B2  25EA               	addwf	??_readUartMessage& (0+255),w,b
  2258  0013B4  6ED9               	movwf	fsr2l,c
  2259  0013B6  0E01               	movlw	high _rxMsgQueue
  2260  0013B8  21EB               	addwfc	(??_readUartMessage+1)& (0+255),w,b
  2261  0013BA  6EDA               	movwf	fsr2h,c
  2262  0013BC  C0DF  FFDF         	movff	readUartMessage@chRec,indf2
  2263                           
  2264                           ; BSR set to: 1
  2265  0013C0  0100               	movlb	0	; () banked
  2266  0013C2  2BEC               	incf	_msgCount& (0+255),f,b
  2267                           
  2268                           ; BSR set to: 0
  2269                           ;EusartApp.c: 111: rxMsgData[idx] = chRec;
  2270  0013C4  0EB0               	movlw	low _rxMsgData
  2271  0013C6  25DD               	addwf	readUartMessage@idx& (0+255),w,b
  2272  0013C8  6ED9               	movwf	fsr2l,c
  2273  0013CA  0E01               	movlw	high _rxMsgData
  2274  0013CC  21DE               	addwfc	(readUartMessage@idx+1)& (0+255),w,b
  2275  0013CE  6EDA               	movwf	fsr2h,c
  2276  0013D0  C0DF  FFDF         	movff	readUartMessage@chRec,indf2
  2277                           
  2278                           ; BSR set to: 0
  2279  0013D4  4BDD               	infsnz	readUartMessage@idx& (0+255),f,b
  2280  0013D6  2BDE               	incf	(readUartMessage@idx+1)& (0+255),f,b
  2281  0013D8                     l207:
  2282                           
  2283                           ; BSR set to: 0
  2284                           
  2285                           ; BSR set to: 0
  2286  0013D8  51F0               	movf	_dataSize& (0+255),w,b
  2287  0013DA  0101               	movlb	1	; () banked
  2288  0013DC  6FEA               	movwf	??_readUartMessage& (0+255),b
  2289  0013DE  6BEB               	clrf	(??_readUartMessage+1)& (0+255),b
  2290  0013E0  51EA               	movf	??_readUartMessage& (0+255),w,b
  2291  0013E2  0100               	movlb	0	; () banked
  2292  0013E4  5DDD               	subwf	readUartMessage@idx& (0+255),w,b
  2293  0013E6  51DE               	movf	(readUartMessage@idx+1)& (0+255),w,b
  2294  0013E8  0A80               	xorlw	128
  2295  0013EA  0101               	movlb	1	; () banked
  2296  0013EC  6FEC               	movwf	(??_readUartMessage+2)& (0+255),b
  2297  0013EE  51EB               	movf	(??_readUartMessage+1)& (0+255),w,b
  2298  0013F0  0A80               	xorlw	128
  2299  0013F2  59EC               	subwfb	(??_readUartMessage+2)& (0+255),w,b
  2300  0013F4  A0D8               	btfss	status,0,c
  2301  0013F6  D7D0               	goto	l208
  2302                           
  2303                           ; BSR set to: 1
  2304                           ;EusartApp.c: 112: }
  2305                           ;EusartApp.c: 114: cState = CHECK_CRC;
  2306                           
  2307                           ; BSR set to: 1
  2308  0013F8  0E06               	movlw	6
  2309  0013FA  0100               	movlb	0	; () banked
  2310  0013FC  6FF3               	movwf	_cState& (0+255),b
  2311                           
  2312                           ; BSR set to: 0
  2313                           ;EusartApp.c: 115: }
  2314                           ;EusartApp.c: 116: break;
  2315  0013FE  0012               	return	
  2316  001400                     
  2317                           ; BSR set to: 0
  2318                           ;EusartApp.c: 119: if(eusart1RxCount >= 1)
  2319                           
  2320                           ; BSR set to: 0
  2321  001400  51F4               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  2322  001402  B4D8               	btfsc	status,2,c
  2323  001404  0012               	return	
  2324                           
  2325                           ; BSR set to: 0
  2326                           ;EusartApp.c: 120: {
  2327                           ;EusartApp.c: 121: crcGiven = EUSART1_Read();
  2328  001406  EC32  F01D         	call	_EUSART1_Read	;wreg free
  2329  00140A  0100               	movlb	0	; () banked
  2330  00140C  6FED               	movwf	_crcGiven& (0+255),b
  2331                           
  2332                           ; BSR set to: 0
  2333                           ;EusartApp.c: 122: crcCalc = crc8(rxMsgQueue, (0x4) + msgCount);
  2334  00140E  0EC4               	movlw	low _rxMsgQueue
  2335  001410  6E18               	movwf	crc8@dataArray,c
  2336  001412  0E01               	movlw	high _rxMsgQueue
  2337  001414  6E19               	movwf	crc8@dataArray+1,c
  2338  001416  0E04               	movlw	4
  2339  001418  25EC               	addwf	_msgCount& (0+255),w,b
  2340  00141A  6E1A               	movwf	crc8@dataSize,c
  2341  00141C  6A1B               	clrf	crc8@dataSize+1,c
  2342  00141E  0E00               	movlw	0
  2343  001420  221B               	addwfc	crc8@dataSize+1,f,c
  2344  001422  EC0B  F01D         	call	_crc8	;wreg free
  2345  001426  0100               	movlb	0	; () banked
  2346  001428  6FEE               	movwf	_crcCalc& (0+255),b
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;EusartApp.c: 124: if(crcGiven == crcCalc)
  2350  00142A  51EE               	movf	_crcCalc& (0+255),w,b
  2351  00142C  19ED               	xorwf	_crcGiven& (0+255),w,b
  2352  00142E  A4D8               	btfss	status,2,c
  2353  001430  D003               	goto	l212
  2354                           
  2355                           ; BSR set to: 0
  2356                           ;EusartApp.c: 125: {
  2357                           ;EusartApp.c: 126: cState = JUMP_FUNCTION;
  2358  001432  0E07               	movlw	7
  2359  001434  6FF3               	movwf	_cState& (0+255),b
  2360                           
  2361                           ;EusartApp.c: 127: }
  2362  001436  0012               	return	
  2363  001438                     l212:
  2364                           
  2365                           ; BSR set to: 0
  2366                           ;EusartApp.c: 128: else
  2367                           ;EusartApp.c: 129: {
  2368                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  2369                           
  2370                           ; BSR set to: 0
  2371  001438  0E00               	movlw	0
  2372  00143A  6FF3               	movwf	_cState& (0+255),b
  2373                           
  2374                           ; BSR set to: 0
  2375                           ;EusartApp.c: 131: }
  2376                           ;EusartApp.c: 132: }
  2377                           ;EusartApp.c: 133: break;
  2378                           
  2379                           ; BSR set to: 0
  2380  00143C  0012               	return	
  2381  00143E                     
  2382                           ; BSR set to: 0
  2383                           ;EusartApp.c: 136: groupsArray[group - 1](request, rxMsgData);
  2384                           
  2385                           ; BSR set to: 0
  2386  00143E  0EFE               	movlw	254
  2387  001440  0101               	movlb	1	; () banked
  2388  001442  6FEA               	movwf	??_readUartMessage& (0+255),b
  2389  001444  0EFF               	movlw	255
  2390  001446  6FEB               	movwf	(??_readUartMessage+1)& (0+255),b
  2391  001448  0100               	movlb	0	; () banked
  2392  00144A  51F2               	movf	_group& (0+255),w,b
  2393  00144C  0101               	movlb	1	; () banked
  2394  00144E  6FEC               	movwf	(??_readUartMessage+2)& (0+255),b
  2395  001450  6BED               	clrf	(??_readUartMessage+3)& (0+255),b
  2396  001452  90D8               	bcf	status,0,c
  2397  001454  37EC               	rlcf	(??_readUartMessage+2)& (0+255),f,b
  2398  001456  37ED               	rlcf	(??_readUartMessage+3)& (0+255),f,b
  2399  001458  51EA               	movf	??_readUartMessage& (0+255),w,b
  2400  00145A  27EC               	addwf	(??_readUartMessage+2)& (0+255),f,b
  2401  00145C  51EB               	movf	(??_readUartMessage+1)& (0+255),w,b
  2402  00145E  23ED               	addwfc	(??_readUartMessage+3)& (0+255),f,b
  2403  001460  0ED8               	movlw	low _groupsArray
  2404  001462  25EC               	addwf	(??_readUartMessage+2)& (0+255),w,b
  2405  001464  6ED9               	movwf	fsr2l,c
  2406  001466  0E01               	movlw	high _groupsArray
  2407  001468  21ED               	addwfc	(??_readUartMessage+3)& (0+255),w,b
  2408  00146A  6EDA               	movwf	fsr2h,c
  2409  00146C  D801               	call	u9178
  2410  00146E  D010               	goto	u9179
  2411  001470                     u9178:
  2412  001470  0005               	push	
  2413  001472  6EFA               	movwf	pclath,c
  2414  001474  50DE               	movf	postinc2,w,c
  2415  001476  6EFD               	movwf	tosl,c
  2416  001478  50DE               	movf	postinc2,w,c
  2417  00147A  6EFE               	movwf	tosh,c
  2418  00147C  50F8               	movf	tblptru,w,c
  2419  00147E  6EFF               	movwf	tosu,c
  2420  001480  50FA               	movf	pclath,w,c
  2421  001482  0EB0               	movlw	low _rxMsgData
  2422  001484  0100               	movlb	0	; () banked
  2423  001486  6FDA               	movwf	GroupDAC@data& (0+255),b
  2424  001488  0E01               	movlw	high _rxMsgData
  2425  00148A  6FDB               	movwf	(GroupDAC@data+1)& (0+255),b
  2426  00148C  51F1               	movf	_request& (0+255),w,b
  2427  00148E  0012               	return		;indir
  2428  001490                     u9179:
  2429                           
  2430                           ;EusartApp.c: 137: cState = START_RX_MESSAGE_READ;
  2431  001490  0E00               	movlw	0
  2432  001492  0100               	movlb	0	; () banked
  2433  001494  6FF3               	movwf	_cState& (0+255),b
  2434                           
  2435                           ; BSR set to: 0
  2436                           ;EusartApp.c: 139: }
  2437                           
  2438                           ;EusartApp.c: 138: break;
  2439  001496  0012               	return	
  2440  001498                     l188:
  2441                           
  2442                           ; BSR set to: 0
  2443                           
  2444                           ; BSR set to: 0
  2445  001498  51F3               	movf	_cState& (0+255),w,b
  2446                           
  2447                           ; Switch size 1, requested type "space"
  2448                           ; Number of cases is 8, Range of values is 0 to 7
  2449                           ; switch strategies available:
  2450                           ; Name         Instructions Cycles
  2451                           ; simple_byte           25    13 (average)
  2452                           ;	Chosen strategy is simple_byte
  2453  00149A  0A00               	xorlw	0	; case 0
  2454  00149C  B4D8               	btfsc	status,2,c
  2455  00149E  D720               	goto	l189
  2456  0014A0  0A01               	xorlw	1	; case 1
  2457  0014A2  B4D8               	btfsc	status,2,c
  2458  0014A4  D723               	goto	l192
  2459  0014A6  0A03               	xorlw	3	; case 2
  2460  0014A8  B4D8               	btfsc	status,2,c
  2461  0014AA  D738               	goto	l197
  2462  0014AC  0A01               	xorlw	1	; case 3
  2463  0014AE  B4D8               	btfsc	status,2,c
  2464  0014B0  D741               	goto	l199
  2465  0014B2  0A07               	xorlw	7	; case 4
  2466  0014B4  B4D8               	btfsc	status,2,c
  2467  0014B6  D74A               	goto	l201
  2468  0014B8  0A01               	xorlw	1	; case 5
  2469  0014BA  B4D8               	btfsc	status,2,c
  2470  0014BC  D759               	goto	l205
  2471  0014BE  0A03               	xorlw	3	; case 6
  2472  0014C0  B4D8               	btfsc	status,2,c
  2473  0014C2  D79E               	goto	l210
  2474  0014C4  0A01               	xorlw	1	; case 7
  2475  0014C6  A4D8               	btfss	status,2,c
  2476  0014C8  0012               	return	
  2477  0014CA  D7B9               	goto	l214
  2478  0014CC                     __end_of_readUartMessage:
  2479                           	opt stack 0
  2480                           tosu	equ	0xFFF
  2481                           tosh	equ	0xFFE
  2482                           tosl	equ	0xFFD
  2483                           pclath	equ	0xFFA
  2484                           tblptru	equ	0xFF8
  2485                           tblptrh	equ	0xFF7
  2486                           tblptrl	equ	0xFF6
  2487                           tablat	equ	0xFF5
  2488                           postinc0	equ	0xFEE
  2489                           wreg	equ	0xFE8
  2490                           postdec1	equ	0xFE5
  2491                           fsr1l	equ	0xFE1
  2492                           indf2	equ	0xFDF
  2493                           postinc2	equ	0xFDE
  2494                           fsr2h	equ	0xFDA
  2495                           fsr2l	equ	0xFD9
  2496                           status	equ	0xFD8
  2497                           
  2498 ;; *************** function _InitRxMessageParams *****************
  2499 ;; Defined at:
  2500 ;;		line 142 in file "EusartApp.c"
  2501 ;; Parameters:    Size  Location     Type
  2502 ;;		None
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;		None
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  1    wreg      void 
  2507 ;; Registers used:
  2508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2514 ;;      Params:         0       0       0       0       0       0       0
  2515 ;;      Locals:         0       0       0       0       0       0       0
  2516 ;;      Temps:          0       0       0       0       0       0       0
  2517 ;;      Totals:         0       0       0       0       0       0       0
  2518 ;;Total ram usage:        0 bytes
  2519 ;; Hardware stack levels used:    1
  2520 ;; Hardware stack levels required when called:    6
  2521 ;; This function calls:
  2522 ;;		_ZeroArray
  2523 ;; This function is called by:
  2524 ;;		_readUartMessage
  2525 ;; This function uses a non-reentrant model
  2526 ;;
  2527                           
  2528                           	psect	text2
  2529  003F5A                     __ptext2:
  2530                           	opt stack 0
  2531  003F5A                     _InitRxMessageParams:
  2532                           	opt stack 23
  2533                           
  2534                           ;EusartApp.c: 146: dataSize = 0;
  2535                           
  2536                           ; BSR set to: 0
  2537                           ;incstack = 0
  2538  003F5A  0E00               	movlw	0
  2539  003F5C  0100               	movlb	0	; () banked
  2540  003F5E  6FF0               	movwf	_dataSize& (0+255),b
  2541                           
  2542                           ;EusartApp.c: 147: crcCalc = 0;
  2543  003F60  0E00               	movlw	0
  2544  003F62  6FEE               	movwf	_crcCalc& (0+255),b
  2545                           
  2546                           ;EusartApp.c: 148: crcGiven = 0;
  2547  003F64  0E00               	movlw	0
  2548  003F66  6FED               	movwf	_crcGiven& (0+255),b
  2549                           
  2550                           ;EusartApp.c: 149: msgCount = 0;
  2551  003F68  0E00               	movlw	0
  2552  003F6A  6FEC               	movwf	_msgCount& (0+255),b
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;EusartApp.c: 150: ZeroArray(rxMsgQueue, (0x14));
  2556  003F6C  0EC4               	movlw	low _rxMsgQueue
  2557  003F6E  6E20               	movwf	ZeroArray@array,c
  2558  003F70  0E01               	movlw	high _rxMsgQueue
  2559  003F72  6E21               	movwf	ZeroArray@array+1,c
  2560  003F74  0E00               	movlw	0
  2561  003F76  6E23               	movwf	ZeroArray@size+1,c
  2562  003F78  0E14               	movlw	20
  2563  003F7A  6E22               	movwf	ZeroArray@size,c
  2564  003F7C  EC95  F020         	call	_ZeroArray
  2565  003F80  0012               	return		;funcret
  2566  003F82                     __end_of_InitRxMessageParams:
  2567                           	opt stack 0
  2568                           tosu	equ	0xFFF
  2569                           tosh	equ	0xFFE
  2570                           tosl	equ	0xFFD
  2571                           pclath	equ	0xFFA
  2572                           tblptru	equ	0xFF8
  2573                           tblptrh	equ	0xFF7
  2574                           tblptrl	equ	0xFF6
  2575                           tablat	equ	0xFF5
  2576                           postinc0	equ	0xFEE
  2577                           wreg	equ	0xFE8
  2578                           postdec1	equ	0xFE5
  2579                           fsr1l	equ	0xFE1
  2580                           indf2	equ	0xFDF
  2581                           postinc2	equ	0xFDE
  2582                           fsr2h	equ	0xFDA
  2583                           fsr2l	equ	0xFD9
  2584                           status	equ	0xFD8
  2585                           
  2586 ;; *************** function _GroupDAC *****************
  2587 ;; Defined at:
  2588 ;;		line 125 in file "MessageFunctions.c"
  2589 ;; Parameters:    Size  Location     Type
  2590 ;;  request         1    wreg     enum E12
  2591 ;;  data            2  122[BANK0 ] PTR unsigned char 
  2592 ;;		 -> rxMsgData(20), 
  2593 ;; Auto vars:     Size  Location     Type
  2594 ;;  request         1  124[BANK0 ] enum E12
  2595 ;; Return value:  Size  Location     Type
  2596 ;;                  1    wreg      void 
  2597 ;; Registers used:
  2598 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2599 ;; Tracked objects:
  2600 ;;		On entry : 0/0
  2601 ;;		On exit  : 0/0
  2602 ;;		Unchanged: 0/0
  2603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2604 ;;      Params:         0       2       0       0       0       0       0
  2605 ;;      Locals:         0       1       0       0       0       0       0
  2606 ;;      Temps:          0       0       0       0       0       0       0
  2607 ;;      Totals:         0       3       0       0       0       0       0
  2608 ;;Total ram usage:        3 bytes
  2609 ;; Hardware stack levels used:    1
  2610 ;; Hardware stack levels required when called:   11
  2611 ;; This function calls:
  2612 ;;		_DacReadValue
  2613 ;;		_DacSetValue
  2614 ;; This function is called by:
  2615 ;;		_readUartMessage
  2616 ;; This function uses a non-reentrant model
  2617 ;;
  2618                           
  2619                           	psect	text3
  2620  003DA6                     __ptext3:
  2621                           	opt stack 0
  2622  003DA6                     _GroupDAC:
  2623                           	opt stack 18
  2624                           
  2625                           ;incstack = 0
  2626                           ;GroupDAC@request stored from wreg
  2627  003DA6  0100               	movlb	0	; () banked
  2628  003DA8  6FDC               	movwf	GroupDAC@request& (0+255),b
  2629                           
  2630                           ;MessageFunctions.c: 127: switch (request)
  2631  003DAA  D00E               	goto	l1296
  2632  003DAC                     
  2633                           ;MessageFunctions.c: 130: DacSetValue(data);
  2634  003DAC  C0DA  F087         	movff	GroupDAC@data,DacSetValue@data
  2635  003DB0  C0DB  F088         	movff	GroupDAC@data+1,DacSetValue@data+1
  2636  003DB4  ECDB  F017         	call	_DacSetValue	;wreg free
  2637                           
  2638                           ;MessageFunctions.c: 131: break;
  2639  003DB8  0012               	return	
  2640  003DBA                     
  2641                           ;MessageFunctions.c: 134: DacReadValue(data);
  2642  003DBA  C0DA  F0C8         	movff	GroupDAC@data,DacReadValue@data
  2643  003DBE  C0DB  F0C9         	movff	GroupDAC@data+1,DacReadValue@data+1
  2644  003DC2  ECF5  F013         	call	_DacReadValue	;wreg free
  2645                           
  2646                           ;MessageFunctions.c: 139: }
  2647                           
  2648                           ;MessageFunctions.c: 138: break;
  2649                           
  2650                           ;MessageFunctions.c: 137: default:
  2651                           
  2652                           ;MessageFunctions.c: 135: break;
  2653  003DC6  0012               	return	
  2654  003DC8                     l1296:
  2655  003DC8  0100               	movlb	0	; () banked
  2656  003DCA  51DC               	movf	GroupDAC@request& (0+255),w,b
  2657                           
  2658                           ; Switch size 1, requested type "space"
  2659                           ; Number of cases is 2, Range of values is 97 to 98
  2660                           ; switch strategies available:
  2661                           ; Name         Instructions Cycles
  2662                           ; simple_byte            7     4 (average)
  2663                           ;	Chosen strategy is simple_byte
  2664  003DCC  0A61               	xorlw	97	; case 97
  2665  003DCE  B4D8               	btfsc	status,2,c
  2666  003DD0  D7ED               	goto	l1297
  2667  003DD2  0A03               	xorlw	3	; case 98
  2668  003DD4  A4D8               	btfss	status,2,c
  2669  003DD6  0012               	return	
  2670  003DD8  D7F0               	goto	l1299
  2671  003DDA                     __end_of_GroupDAC:
  2672                           	opt stack 0
  2673                           tosu	equ	0xFFF
  2674                           tosh	equ	0xFFE
  2675                           tosl	equ	0xFFD
  2676                           pclath	equ	0xFFA
  2677                           tblptru	equ	0xFF8
  2678                           tblptrh	equ	0xFF7
  2679                           tblptrl	equ	0xFF6
  2680                           tablat	equ	0xFF5
  2681                           postinc0	equ	0xFEE
  2682                           wreg	equ	0xFE8
  2683                           postdec1	equ	0xFE5
  2684                           fsr1l	equ	0xFE1
  2685                           indf2	equ	0xFDF
  2686                           postinc2	equ	0xFDE
  2687                           fsr2h	equ	0xFDA
  2688                           fsr2l	equ	0xFD9
  2689                           status	equ	0xFD8
  2690                           
  2691 ;; *************** function _GroupFlashMemory *****************
  2692 ;; Defined at:
  2693 ;;		line 104 in file "MessageFunctions.c"
  2694 ;; Parameters:    Size  Location     Type
  2695 ;;  request         1    wreg     enum E12
  2696 ;;  data            2  122[BANK0 ] PTR unsigned char 
  2697 ;; Auto vars:     Size  Location     Type
  2698 ;;  request         1  124[BANK0 ] enum E12
  2699 ;; Return value:  Size  Location     Type
  2700 ;;                  1    wreg      void 
  2701 ;; Registers used:
  2702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2703 ;; Tracked objects:
  2704 ;;		On entry : 0/0
  2705 ;;		On exit  : 0/0
  2706 ;;		Unchanged: 0/0
  2707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2708 ;;      Params:         0       2       0       0       0       0       0
  2709 ;;      Locals:         0       1       0       0       0       0       0
  2710 ;;      Temps:          0       0       0       0       0       0       0
  2711 ;;      Totals:         0       3       0       0       0       0       0
  2712 ;;Total ram usage:        3 bytes
  2713 ;; Hardware stack levels used:    1
  2714 ;; Hardware stack levels required when called:    8
  2715 ;; This function calls:
  2716 ;;		_FlashEreaseMem
  2717 ;;		_FlashReadCondition
  2718 ;;		_FlashReadUart
  2719 ;; This function is called by:
  2720 ;;		_readUartMessage
  2721 ;; This function uses a non-reentrant model
  2722 ;;
  2723                           
  2724                           	psect	text4
  2725  003C24                     __ptext4:
  2726                           	opt stack 0
  2727  003C24                     _GroupFlashMemory:
  2728                           	opt stack 21
  2729                           
  2730                           ;incstack = 0
  2731                           ;GroupFlashMemory@request stored from wreg
  2732  003C24  0100               	movlb	0	; () banked
  2733  003C26  6FDC               	movwf	GroupFlashMemory@request& (0+255),b
  2734                           
  2735                           ;MessageFunctions.c: 106: switch (request)
  2736  003C28  D00D               	goto	l1287
  2737  003C2A                     
  2738                           ;MessageFunctions.c: 109: FlashEreaseMem();
  2739  003C2A  ECB9  F01C         	call	_FlashEreaseMem	;wreg free
  2740                           
  2741                           ;MessageFunctions.c: 110: break;
  2742  003C2E  0012               	return	
  2743  003C30                     
  2744                           ;MessageFunctions.c: 113: FlashReadCondition();
  2745  003C30  EC98  F010         	call	_FlashReadCondition	;wreg free
  2746                           
  2747                           ;MessageFunctions.c: 114: break;
  2748  003C34  0012               	return	
  2749  003C36                     
  2750                           ;MessageFunctions.c: 117: FlashReadUart(data);
  2751  003C36  C0DA  F02C         	movff	GroupFlashMemory@data,FlashReadUart@data
  2752  003C3A  C0DB  F02D         	movff	GroupFlashMemory@data+1,FlashReadUart@data+1
  2753  003C3E  EC4B  F005         	call	_FlashReadUart	;wreg free
  2754                           
  2755                           ;MessageFunctions.c: 122: }
  2756                           
  2757                           ;MessageFunctions.c: 121: break;
  2758                           
  2759                           ;MessageFunctions.c: 120: default:
  2760                           
  2761                           ;MessageFunctions.c: 118: break;
  2762  003C42  0012               	return	
  2763  003C44                     l1287:
  2764  003C44  0100               	movlb	0	; () banked
  2765  003C46  51DC               	movf	GroupFlashMemory@request& (0+255),w,b
  2766                           
  2767                           ; Switch size 1, requested type "space"
  2768                           ; Number of cases is 3, Range of values is 81 to 83
  2769                           ; switch strategies available:
  2770                           ; Name         Instructions Cycles
  2771                           ; simple_byte           10     6 (average)
  2772                           ;	Chosen strategy is simple_byte
  2773  003C48  0A51               	xorlw	81	; case 81
  2774  003C4A  B4D8               	btfsc	status,2,c
  2775  003C4C  D7EE               	goto	l1288
  2776  003C4E  0A03               	xorlw	3	; case 82
  2777  003C50  B4D8               	btfsc	status,2,c
  2778  003C52  D7EE               	goto	l1290
  2779  003C54  0A01               	xorlw	1	; case 83
  2780  003C56  A4D8               	btfss	status,2,c
  2781  003C58  0012               	return	
  2782  003C5A  D7ED               	goto	l1291
  2783  003C5C                     __end_of_GroupFlashMemory:
  2784                           	opt stack 0
  2785                           tosu	equ	0xFFF
  2786                           tosh	equ	0xFFE
  2787                           tosl	equ	0xFFD
  2788                           pclath	equ	0xFFA
  2789                           tblptru	equ	0xFF8
  2790                           tblptrh	equ	0xFF7
  2791                           tblptrl	equ	0xFF6
  2792                           tablat	equ	0xFF5
  2793                           postinc0	equ	0xFEE
  2794                           wreg	equ	0xFE8
  2795                           postdec1	equ	0xFE5
  2796                           fsr1l	equ	0xFE1
  2797                           indf2	equ	0xFDF
  2798                           postinc2	equ	0xFDE
  2799                           fsr2h	equ	0xFDA
  2800                           fsr2l	equ	0xFD9
  2801                           status	equ	0xFD8
  2802                           
  2803 ;; *************** function _GroupAdc *****************
  2804 ;; Defined at:
  2805 ;;		line 51 in file "MessageFunctions.c"
  2806 ;; Parameters:    Size  Location     Type
  2807 ;;  request         1    wreg     enum E12
  2808 ;;  data            2  122[BANK0 ] PTR unsigned char 
  2809 ;; Auto vars:     Size  Location     Type
  2810 ;;  request         1  124[BANK0 ] enum E12
  2811 ;; Return value:  Size  Location     Type
  2812 ;;                  1    wreg      void 
  2813 ;; Registers used:
  2814 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2815 ;; Tracked objects:
  2816 ;;		On entry : 0/0
  2817 ;;		On exit  : 0/0
  2818 ;;		Unchanged: 0/0
  2819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2820 ;;      Params:         0       2       0       0       0       0       0
  2821 ;;      Locals:         0       1       0       0       0       0       0
  2822 ;;      Temps:          0       0       0       0       0       0       0
  2823 ;;      Totals:         0       3       0       0       0       0       0
  2824 ;;Total ram usage:        3 bytes
  2825 ;; Hardware stack levels used:    1
  2826 ;; Hardware stack levels required when called:    8
  2827 ;; This function calls:
  2828 ;;		_SetChannelMode
  2829 ;; This function is called by:
  2830 ;;		_readUartMessage
  2831 ;; This function uses a non-reentrant model
  2832 ;;
  2833                           
  2834                           	psect	text5
  2835  0040CE                     __ptext5:
  2836                           	opt stack 0
  2837  0040CE                     _GroupAdc:
  2838                           	opt stack 21
  2839                           
  2840                           ;incstack = 0
  2841                           ;GroupAdc@request stored from wreg
  2842  0040CE  0100               	movlb	0	; () banked
  2843  0040D0  6FDC               	movwf	GroupAdc@request& (0+255),b
  2844                           
  2845                           ;MessageFunctions.c: 53: switch (request)
  2846  0040D2  D007               	goto	l1266
  2847  0040D4                     
  2848                           ;MessageFunctions.c: 56: SetChannelMode(data);
  2849  0040D4  C0DA  F02C         	movff	GroupAdc@data,SetChannelMode@data
  2850  0040D8  C0DB  F02D         	movff	GroupAdc@data+1,SetChannelMode@data+1
  2851  0040DC  EC39  F01F         	call	_SetChannelMode	;wreg free
  2852                           
  2853                           ;MessageFunctions.c: 61: }
  2854                           
  2855                           ;MessageFunctions.c: 60: break;
  2856                           
  2857                           ;MessageFunctions.c: 59: default:
  2858                           
  2859                           ;MessageFunctions.c: 57: break;
  2860  0040E0  0012               	return	
  2861  0040E2                     l1266:
  2862  0040E2  0100               	movlb	0	; () banked
  2863  0040E4  51DC               	movf	GroupAdc@request& (0+255),w,b
  2864                           
  2865                           ; Switch size 1, requested type "space"
  2866                           ; Number of cases is 1, Range of values is 50 to 50
  2867                           ; switch strategies available:
  2868                           ; Name         Instructions Cycles
  2869                           ; simple_byte            4     3 (average)
  2870                           ;	Chosen strategy is simple_byte
  2871  0040E6  0A32               	xorlw	50	; case 50
  2872  0040E8  A4D8               	btfss	status,2,c
  2873  0040EA  0012               	return	
  2874  0040EC  D7F3               	goto	l1267
  2875  0040EE                     __end_of_GroupAdc:
  2876                           	opt stack 0
  2877                           tosu	equ	0xFFF
  2878                           tosh	equ	0xFFE
  2879                           tosl	equ	0xFFD
  2880                           pclath	equ	0xFFA
  2881                           tblptru	equ	0xFF8
  2882                           tblptrh	equ	0xFF7
  2883                           tblptrl	equ	0xFF6
  2884                           tablat	equ	0xFF5
  2885                           postinc0	equ	0xFEE
  2886                           wreg	equ	0xFE8
  2887                           postdec1	equ	0xFE5
  2888                           fsr1l	equ	0xFE1
  2889                           indf2	equ	0xFDF
  2890                           postinc2	equ	0xFDE
  2891                           fsr2h	equ	0xFDA
  2892                           fsr2l	equ	0xFD9
  2893                           status	equ	0xFD8
  2894                           
  2895 ;; *************** function _GroupStatusAndVersion *****************
  2896 ;; Defined at:
  2897 ;;		line 34 in file "MessageFunctions.c"
  2898 ;; Parameters:    Size  Location     Type
  2899 ;;  request         1    wreg     enum E12
  2900 ;;  data            3  122[BANK0 ] PTR unsigned char 
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;  request         1  125[BANK0 ] enum E12
  2903 ;; Return value:  Size  Location     Type
  2904 ;;                  1    wreg      void 
  2905 ;; Registers used:
  2906 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2907 ;; Tracked objects:
  2908 ;;		On entry : 0/0
  2909 ;;		On exit  : 0/0
  2910 ;;		Unchanged: 0/0
  2911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2912 ;;      Params:         0       2       0       0       0       0       0
  2913 ;;      Locals:         0       1       0       0       0       0       0
  2914 ;;      Temps:          0       0       0       0       0       0       0
  2915 ;;      Totals:         0       3       0       0       0       0       0
  2916 ;;Total ram usage:        3 bytes
  2917 ;; Hardware stack levels used:    1
  2918 ;; Hardware stack levels required when called:    7
  2919 ;; This function calls:
  2920 ;;		_GetMcuFwVersion
  2921 ;;		_GetMcuRunTime
  2922 ;; This function is called by:
  2923 ;;		_readUartMessage
  2924 ;; This function uses a non-reentrant model
  2925 ;;
  2926                           
  2927                           	psect	text6
  2928  00401E                     __ptext6:
  2929                           	opt stack 0
  2930  00401E                     _GroupStatusAndVersion:
  2931                           	opt stack 22
  2932                           
  2933                           ;incstack = 0
  2934                           ;GroupStatusAndVersion@request stored from wreg
  2935  00401E  0100               	movlb	0	; () banked
  2936  004020  6FDD               	movwf	GroupStatusAndVersion@request& (0+255),b
  2937                           
  2938                           ;MessageFunctions.c: 36: switch (request)
  2939  004022  D006               	goto	l1258
  2940  004024                     
  2941                           ;MessageFunctions.c: 39: GetMcuFwVersion();
  2942  004024  EC53  F003         	call	_GetMcuFwVersion	;wreg free
  2943                           
  2944                           ;MessageFunctions.c: 40: break;
  2945  004028  0012               	return	
  2946  00402A                     
  2947                           ;MessageFunctions.c: 43: GetMcuRunTime();
  2948  00402A  EC83  F013         	call	_GetMcuRunTime	;wreg free
  2949                           
  2950                           ;MessageFunctions.c: 48: }
  2951                           
  2952                           ;MessageFunctions.c: 47: break;
  2953                           
  2954                           ;MessageFunctions.c: 46: default:
  2955                           
  2956                           ;MessageFunctions.c: 44: break;
  2957  00402E  0012               	return	
  2958  004030                     l1258:
  2959  004030  0100               	movlb	0	; () banked
  2960  004032  51DD               	movf	GroupStatusAndVersion@request& (0+255),w,b
  2961                           
  2962                           ; Switch size 1, requested type "space"
  2963                           ; Number of cases is 2, Range of values is 33 to 34
  2964                           ; switch strategies available:
  2965                           ; Name         Instructions Cycles
  2966                           ; simple_byte            7     4 (average)
  2967                           ;	Chosen strategy is simple_byte
  2968  004034  0A21               	xorlw	33	; case 33
  2969  004036  B4D8               	btfsc	status,2,c
  2970  004038  D7F8               	goto	l1261
  2971  00403A  0A03               	xorlw	3	; case 34
  2972  00403C  A4D8               	btfss	status,2,c
  2973  00403E  0012               	return	
  2974  004040  D7F1               	goto	l1259
  2975  004042                     __end_of_GroupStatusAndVersion:
  2976                           	opt stack 0
  2977                           tosu	equ	0xFFF
  2978                           tosh	equ	0xFFE
  2979                           tosl	equ	0xFFD
  2980                           pclath	equ	0xFFA
  2981                           tblptru	equ	0xFF8
  2982                           tblptrh	equ	0xFF7
  2983                           tblptrl	equ	0xFF6
  2984                           tablat	equ	0xFF5
  2985                           postinc0	equ	0xFEE
  2986                           wreg	equ	0xFE8
  2987                           postdec1	equ	0xFE5
  2988                           fsr1l	equ	0xFE1
  2989                           indf2	equ	0xFDF
  2990                           postinc2	equ	0xFDE
  2991                           fsr2h	equ	0xFDA
  2992                           fsr2l	equ	0xFD9
  2993                           status	equ	0xFD8
  2994                           
  2995 ;; *************** function _GroupControlMcu *****************
  2996 ;; Defined at:
  2997 ;;		line 11 in file "MessageFunctions.c"
  2998 ;; Parameters:    Size  Location     Type
  2999 ;;  request         1    wreg     enum E12
  3000 ;;  data            3  122[BANK0 ] PTR unsigned char 
  3001 ;; Auto vars:     Size  Location     Type
  3002 ;;  request         1  125[BANK0 ] enum E12
  3003 ;; Return value:  Size  Location     Type
  3004 ;;                  1    wreg      void 
  3005 ;; Registers used:
  3006 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3007 ;; Tracked objects:
  3008 ;;		On entry : 0/0
  3009 ;;		On exit  : 0/0
  3010 ;;		Unchanged: 0/0
  3011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3012 ;;      Params:         0       2       0       0       0       0       0
  3013 ;;      Locals:         0       1       0       0       0       0       0
  3014 ;;      Temps:          0       0       0       0       0       0       0
  3015 ;;      Totals:         0       3       0       0       0       0       0
  3016 ;;Total ram usage:        3 bytes
  3017 ;; Hardware stack levels used:    1
  3018 ;; Hardware stack levels required when called:    8
  3019 ;; This function calls:
  3020 ;;		_ResetMcu
  3021 ;;		_testLeds
  3022 ;; This function is called by:
  3023 ;;		_readUartMessage
  3024 ;; This function uses a non-reentrant model
  3025 ;;
  3026                           
  3027                           	psect	text7
  3028  003E42                     __ptext7:
  3029                           	opt stack 0
  3030  003E42                     _GroupControlMcu:
  3031                           	opt stack 21
  3032                           
  3033                           ;incstack = 0
  3034                           ;GroupControlMcu@request stored from wreg
  3035  003E42  0100               	movlb	0	; () banked
  3036  003E44  6FDD               	movwf	GroupControlMcu@request& (0+255),b
  3037                           
  3038                           ;MessageFunctions.c: 13: switch (request)
  3039  003E46  D006               	goto	l1248
  3040  003E48                     
  3041                           ;MessageFunctions.c: 16: testLeds();
  3042  003E48  EC8C  F01A         	call	_testLeds	;wreg free
  3043                           
  3044                           ;MessageFunctions.c: 17: break;
  3045  003E4C  0012               	return	
  3046  003E4E                     
  3047                           ;MessageFunctions.c: 20: ResetMcu();
  3048  003E4E  EC1F  F021         	call	_ResetMcu	;wreg free
  3049                           
  3050                           ;MessageFunctions.c: 31: }
  3051                           
  3052                           ;MessageFunctions.c: 30: break;
  3053                           
  3054                           ;MessageFunctions.c: 29: default:
  3055                           
  3056                           ;MessageFunctions.c: 27: break;
  3057                           
  3058                           ;MessageFunctions.c: 26: case CONTROL_PA2_SET:
  3059                           
  3060                           ;MessageFunctions.c: 24: break;
  3061                           
  3062                           ;MessageFunctions.c: 23: case CONTROL_PA1_SET:
  3063                           
  3064                           ;MessageFunctions.c: 21: break;
  3065  003E52  0012               	return	
  3066  003E54                     l1248:
  3067  003E54  0100               	movlb	0	; () banked
  3068  003E56  51DD               	movf	GroupControlMcu@request& (0+255),w,b
  3069                           
  3070                           ; Switch size 1, requested type "space"
  3071                           ; Number of cases is 4, Range of values is 17 to 20
  3072                           ; switch strategies available:
  3073                           ; Name         Instructions Cycles
  3074                           ; simple_byte           13     7 (average)
  3075                           ;	Chosen strategy is simple_byte
  3076  003E58  0A11               	xorlw	17	; case 17
  3077  003E5A  B4D8               	btfsc	status,2,c
  3078  003E5C  D7F8               	goto	l1251
  3079  003E5E  0A03               	xorlw	3	; case 18
  3080  003E60  B4D8               	btfsc	status,2,c
  3081  003E62  0012               	return	
  3082  003E64  0A01               	xorlw	1	; case 19
  3083  003E66  B4D8               	btfsc	status,2,c
  3084  003E68  0012               	return	
  3085  003E6A  0A07               	xorlw	7	; case 20
  3086  003E6C  A4D8               	btfss	status,2,c
  3087  003E6E  0012               	return	
  3088  003E70  D7EB               	goto	l1249
  3089  003E72                     __end_of_GroupControlMcu:
  3090                           	opt stack 0
  3091                           tosu	equ	0xFFF
  3092                           tosh	equ	0xFFE
  3093                           tosl	equ	0xFFD
  3094                           pclath	equ	0xFFA
  3095                           tblptru	equ	0xFF8
  3096                           tblptrh	equ	0xFF7
  3097                           tblptrl	equ	0xFF6
  3098                           tablat	equ	0xFF5
  3099                           postinc0	equ	0xFEE
  3100                           wreg	equ	0xFE8
  3101                           postdec1	equ	0xFE5
  3102                           fsr1l	equ	0xFE1
  3103                           indf2	equ	0xFDF
  3104                           postinc2	equ	0xFDE
  3105                           fsr2h	equ	0xFDA
  3106                           fsr2l	equ	0xFD9
  3107                           status	equ	0xFD8
  3108                           
  3109 ;; *************** function _GroupSynthesizers *****************
  3110 ;; Defined at:
  3111 ;;		line 63 in file "MessageFunctions.c"
  3112 ;; Parameters:    Size  Location     Type
  3113 ;;  request         1    wreg     enum E12
  3114 ;;  data            2  122[BANK0 ] PTR unsigned char 
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;  request         1  124[BANK0 ] enum E12
  3117 ;; Return value:  Size  Location     Type
  3118 ;;                  1    wreg      void 
  3119 ;; Registers used:
  3120 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3121 ;; Tracked objects:
  3122 ;;		On entry : 0/0
  3123 ;;		On exit  : 0/0
  3124 ;;		Unchanged: 0/0
  3125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3126 ;;      Params:         0       2       0       0       0       0       0
  3127 ;;      Locals:         0       1       0       0       0       0       0
  3128 ;;      Temps:          0       0       0       0       0       0       0
  3129 ;;      Totals:         0       3       0       0       0       0       0
  3130 ;;Total ram usage:        3 bytes
  3131 ;; Hardware stack levels used:    1
  3132 ;; Hardware stack levels required when called:   12
  3133 ;; This function calls:
  3134 ;;		_SetSynthOper
  3135 ;;		_SynthReadData
  3136 ;;		_UpdateSynthFreq
  3137 ;; This function is called by:
  3138 ;;		_readUartMessage
  3139 ;; This function uses a non-reentrant model
  3140 ;;
  3141                           
  3142                           	psect	text8
  3143  0032A0                     __ptext8:
  3144                           	opt stack 0
  3145  0032A0                     _GroupSynthesizers:
  3146                           	opt stack 17
  3147                           
  3148                           ;incstack = 0
  3149                           ;GroupSynthesizers@request stored from wreg
  3150  0032A0  0100               	movlb	0	; () banked
  3151  0032A2  6FDC               	movwf	GroupSynthesizers@request& (0+255),b
  3152                           
  3153                           ;MessageFunctions.c: 65: switch (request)
  3154  0032A4  D028               	goto	l1273
  3155  0032A6                     
  3156                           ;MessageFunctions.c: 76: UpdateSynthFreq(SYNTH_TX, data);
  3157  0032A6  C0DA  F087         	movff	GroupSynthesizers@data,UpdateSynthFreq@data
  3158  0032AA  C0DB  F088         	movff	GroupSynthesizers@data+1,UpdateSynthFreq@data+1
  3159  0032AE  0E00               	movlw	0
  3160  0032B0  EC9C  F011         	call	_UpdateSynthFreq
  3161                           
  3162                           ;MessageFunctions.c: 77: break;
  3163  0032B4  0012               	return	
  3164  0032B6                     
  3165                           ;MessageFunctions.c: 80: UpdateSynthFreq(SYNTH_RX, data);
  3166  0032B6  C0DA  F087         	movff	GroupSynthesizers@data,UpdateSynthFreq@data
  3167  0032BA  C0DB  F088         	movff	GroupSynthesizers@data+1,UpdateSynthFreq@data+1
  3168  0032BE  0E01               	movlw	1
  3169  0032C0  EC9C  F011         	call	_UpdateSynthFreq
  3170                           
  3171                           ;MessageFunctions.c: 81: break;
  3172  0032C4  0012               	return	
  3173  0032C6                     
  3174                           ;MessageFunctions.c: 84: SetSynthOper(SYNTH_RX);
  3175  0032C6  0E01               	movlw	1
  3176  0032C8  ECD7  F019         	call	_SetSynthOper
  3177                           
  3178                           ;MessageFunctions.c: 85: break;
  3179  0032CC  0012               	return	
  3180  0032CE                     
  3181                           ;MessageFunctions.c: 88: SetSynthOper(SYNTH_TX);
  3182  0032CE  0E00               	movlw	0
  3183  0032D0  ECD7  F019         	call	_SetSynthOper
  3184                           
  3185                           ;MessageFunctions.c: 89: break;
  3186  0032D4  0012               	return	
  3187  0032D6                     
  3188                           ;MessageFunctions.c: 92: SynthReadData(SYNTH_RX, data);
  3189  0032D6  C0DA  F0C8         	movff	GroupSynthesizers@data,SynthReadData@data
  3190  0032DA  C0DB  F0C9         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3191  0032DE  0E01               	movlw	1
  3192  0032E0  EC66  F00A         	call	_SynthReadData
  3193                           
  3194                           ;MessageFunctions.c: 93: break;
  3195  0032E4  0012               	return	
  3196  0032E6                     
  3197                           ;MessageFunctions.c: 96: SynthReadData(SYNTH_TX, data);
  3198  0032E6  C0DA  F0C8         	movff	GroupSynthesizers@data,SynthReadData@data
  3199  0032EA  C0DB  F0C9         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3200  0032EE  0E00               	movlw	0
  3201  0032F0  EC66  F00A         	call	_SynthReadData
  3202                           
  3203                           ;MessageFunctions.c: 101: }
  3204                           
  3205                           ;MessageFunctions.c: 100: break;
  3206                           
  3207                           ;MessageFunctions.c: 99: default:
  3208                           
  3209                           ;MessageFunctions.c: 97: break;
  3210  0032F4  0012               	return	
  3211  0032F6                     l1273:
  3212  0032F6  0100               	movlb	0	; () banked
  3213  0032F8  51DC               	movf	GroupSynthesizers@request& (0+255),w,b
  3214                           
  3215                           ; Switch size 1, requested type "space"
  3216                           ; Number of cases is 8, Range of values is 64 to 71
  3217                           ; switch strategies available:
  3218                           ; Name         Instructions Cycles
  3219                           ; simple_byte           25    13 (average)
  3220                           ;	Chosen strategy is simple_byte
  3221  0032FA  0A40               	xorlw	64	; case 64
  3222  0032FC  B4D8               	btfsc	status,2,c
  3223  0032FE  0012               	return	
  3224  003300  0A01               	xorlw	1	; case 65
  3225  003302  B4D8               	btfsc	status,2,c
  3226  003304  0012               	return	
  3227  003306  0A03               	xorlw	3	; case 66
  3228  003308  B4D8               	btfsc	status,2,c
  3229  00330A  D7CD               	goto	l1277
  3230  00330C  0A01               	xorlw	1	; case 67
  3231  00330E  B4D8               	btfsc	status,2,c
  3232  003310  D7D2               	goto	l1278
  3233  003312  0A07               	xorlw	7	; case 68
  3234  003314  B4D8               	btfsc	status,2,c
  3235  003316  D7D7               	goto	l1279
  3236  003318  0A01               	xorlw	1	; case 69
  3237  00331A  B4D8               	btfsc	status,2,c
  3238  00331C  D7D8               	goto	l1280
  3239  00331E  0A03               	xorlw	3	; case 70
  3240  003320  B4D8               	btfsc	status,2,c
  3241  003322  D7D9               	goto	l1281
  3242  003324  0A01               	xorlw	1	; case 71
  3243  003326  A4D8               	btfss	status,2,c
  3244  003328  0012               	return	
  3245  00332A  D7DD               	goto	l1282
  3246  00332C                     __end_of_GroupSynthesizers:
  3247                           	opt stack 0
  3248                           tosu	equ	0xFFF
  3249                           tosh	equ	0xFFE
  3250                           tosl	equ	0xFFD
  3251                           pclath	equ	0xFFA
  3252                           tblptru	equ	0xFF8
  3253                           tblptrh	equ	0xFF7
  3254                           tblptrl	equ	0xFF6
  3255                           tablat	equ	0xFF5
  3256                           postinc0	equ	0xFEE
  3257                           wreg	equ	0xFE8
  3258                           postdec1	equ	0xFE5
  3259                           fsr1l	equ	0xFE1
  3260                           indf2	equ	0xFDF
  3261                           postinc2	equ	0xFDE
  3262                           fsr2h	equ	0xFDA
  3263                           fsr2l	equ	0xFD9
  3264                           status	equ	0xFD8
  3265                           
  3266 ;; *************** function _UpdateSynthFreq *****************
  3267 ;; Defined at:
  3268 ;;		line 83 in file "SyntApp.c"
  3269 ;; Parameters:    Size  Location     Type
  3270 ;;  cType           1    wreg     enum E1
  3271 ;;  data            2   39[BANK0 ] PTR unsigned char 
  3272 ;; Auto vars:     Size  Location     Type
  3273 ;;  cType           1   41[BANK0 ] enum E1
  3274 ;;  retVal          8   42[BANK0 ] struct .
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  1    wreg      void 
  3277 ;; Registers used:
  3278 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3284 ;;      Params:         0       2       0       0       0       0       0
  3285 ;;      Locals:         0       9       0       0       0       0       0
  3286 ;;      Temps:          0       0       0       0       0       0       0
  3287 ;;      Totals:         0      11       0       0       0       0       0
  3288 ;;Total ram usage:       11 bytes
  3289 ;; Hardware stack levels used:    1
  3290 ;; Hardware stack levels required when called:    8
  3291 ;; This function calls:
  3292 ;;		_GetIntFromUartData
  3293 ;;		_SWSPI_send_word
  3294 ;;		_SendAckMessage
  3295 ;;		_StoreIntInEeprom
  3296 ;; This function is called by:
  3297 ;;		_GroupSynthesizers
  3298 ;; This function uses a non-reentrant model
  3299 ;;
  3300                           
  3301                           	psect	text9
  3302  002338                     __ptext9:
  3303                           	opt stack 0
  3304  002338                     _UpdateSynthFreq:
  3305                           	opt stack 20
  3306                           
  3307                           ;incstack = 0
  3308                           ;UpdateSynthFreq@cType stored from wreg
  3309  002338  0100               	movlb	0	; () banked
  3310  00233A  6F89               	movwf	UpdateSynthFreq@cType& (0+255),b
  3311                           
  3312                           ;SyntApp.c: 85: INT_VAL retVal;
  3313                           ;SyntApp.c: 86: if(cntRegUpdate < 7)
  3314  00233C  0E07               	movlw	7
  3315  00233E  0100               	movlb	0	; () banked
  3316  002340  61EA               	cpfslt	_cntRegUpdate& (0+255),b
  3317  002342  D061               	goto	l505
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;SyntApp.c: 87: {
  3321                           ;SyntApp.c: 88: retVal = GetIntFromUartData(10, data);
  3322  002344  C087  F066         	movff	UpdateSynthFreq@data,GetIntFromUartData@data
  3323  002348  C088  F067         	movff	UpdateSynthFreq@data+1,GetIntFromUartData@data+1
  3324  00234C  0E0A               	movlw	10
  3325  00234E  ECB2  F00E         	call	_GetIntFromUartData
  3326  002352  EE20  F08A         	lfsr	2,UpdateSynthFreq@retVal
  3327  002356  0E07               	movlw	7
  3328  002358                     u8701:
  3329  002358  CFEB FFDB          	movff	plusw0,plusw2
  3330  00235C  06E8               	decf	wreg,f,c
  3331  00235E  E2FC               	bc	u8701
  3332                           
  3333                           ;SyntApp.c: 89: SWSPI_send_word(cType, retVal.num, 3);
  3334  002360  C08A  F026         	movff	UpdateSynthFreq@retVal,SWSPI_send_word@data
  3335  002364  C08B  F027         	movff	UpdateSynthFreq@retVal+1,SWSPI_send_word@data+1
  3336  002368  C08C  F028         	movff	UpdateSynthFreq@retVal+2,SWSPI_send_word@data+2
  3337  00236C  C08D  F029         	movff	UpdateSynthFreq@retVal+3,SWSPI_send_word@data+3
  3338  002370  0E03               	movlw	3
  3339  002372  6E2A               	movwf	SWSPI_send_word@dataSize,c
  3340  002374  0100               	movlb	0	; () banked
  3341  002376  5189               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3342  002378  EC2A  F018         	call	_SWSPI_send_word
  3343                           
  3344                           ;SyntApp.c: 90: if(cType == SYNTH_TX)
  3345  00237C  0100               	movlb	0	; () banked
  3346  00237E  5189               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3347  002380  A4D8               	btfss	status,2,c
  3348  002382  D01D               	goto	l506
  3349                           
  3350                           ; BSR set to: 0
  3351                           ;SyntApp.c: 91: {
  3352                           ;SyntApp.c: 92: StoreIntInEeprom(retVal.num, (0) | SYNTH_ADDRES[retVal.con], 4);
  3353  002384  C08A  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3354  002388  C08B  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3355  00238C  C08C  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3356  002390  C08D  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3357  002394  0E35               	movlw	low _SYNTH_ADDRES
  3358  002396  258E               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3359  002398  6EF6               	movwf	tblptrl,c
  3360  00239A  0E06               	movlw	high _SYNTH_ADDRES
  3361  00239C  218F               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3362  00239E  6EF7               	movwf	tblptrh,c
  3363  0023A0                     	if	0	;There are less than 3 active tblptr bytes
  3364  0023A0                     	endif
  3365  0023A0  0008               	tblrd		*
  3366  0023A2  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
  3367  0023A6  0E00               	movlw	0
  3368  0023A8  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3369  0023AA  0E04               	movlw	4
  3370  0023AC  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3371  0023AE  EC2E  F01E         	call	_StoreIntInEeprom	;wreg free
  3372                           
  3373                           ;SyntApp.c: 93: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_TX_R
      +                          EG);
  3374  0023B2  0E48               	movlw	72
  3375  0023B4  6E24               	movwf	SendAckMessage@inRequest,c
  3376  0023B6  0E04               	movlw	4
  3377  0023B8  ECE2  F01C         	call	_SendAckMessage
  3378                           
  3379                           ;SyntApp.c: 94: }
  3380  0023BC  D021               	goto	l508
  3381  0023BE                     l506:
  3382                           
  3383                           ;SyntApp.c: 95: else if(cType == SYNTH_RX)
  3384  0023BE  0100               	movlb	0	; () banked
  3385  0023C0  0589               	decf	UpdateSynthFreq@cType& (0+255),w,b
  3386  0023C2  A4D8               	btfss	status,2,c
  3387  0023C4  D01D               	goto	l508
  3388                           
  3389                           ; BSR set to: 0
  3390                           ;SyntApp.c: 96: {
  3391                           ;SyntApp.c: 97: StoreIntInEeprom(retVal.num, (0x20) | SYNTH_ADDRES[retVal.con], 4);
  3392  0023C6  C08A  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3393  0023CA  C08B  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3394  0023CE  C08C  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3395  0023D2  C08D  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3396  0023D6  0E35               	movlw	low _SYNTH_ADDRES
  3397  0023D8  258E               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3398  0023DA  6EF6               	movwf	tblptrl,c
  3399  0023DC  0E06               	movlw	high _SYNTH_ADDRES
  3400  0023DE  218F               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3401  0023E0  6EF7               	movwf	tblptrh,c
  3402  0023E2                     	if	0	;There are less than 3 active tblptr bytes
  3403  0023E2                     	endif
  3404  0023E2  0008               	tblrd		*
  3405  0023E4  50F5               	movf	tablat,w,c
  3406  0023E6  0920               	iorlw	32
  3407  0023E8  6E25               	movwf	StoreIntInEeprom@address,c
  3408  0023EA  0E00               	movlw	0
  3409  0023EC  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3410  0023EE  0E04               	movlw	4
  3411  0023F0  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3412  0023F2  EC2E  F01E         	call	_StoreIntInEeprom	;wreg free
  3413                           
  3414                           ;SyntApp.c: 98: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_RX_R
      +                          EG);
  3415  0023F6  0E49               	movlw	73
  3416  0023F8  6E24               	movwf	SendAckMessage@inRequest,c
  3417  0023FA  0E04               	movlw	4
  3418  0023FC  ECE2  F01C         	call	_SendAckMessage
  3419  002400                     l508:
  3420                           
  3421                           ;SyntApp.c: 99: }
  3422                           ;SyntApp.c: 100: cntRegUpdate ++;
  3423  002400  0100               	movlb	0	; () banked
  3424  002402  2BEA               	incf	_cntRegUpdate& (0+255),f,b
  3425                           
  3426                           ;SyntApp.c: 101: }
  3427  002404  0012               	return	
  3428  002406                     l505:
  3429                           
  3430                           ; BSR set to: 0
  3431                           ;SyntApp.c: 103: else
  3432                           ;SyntApp.c: 104: {
  3433                           ;SyntApp.c: 105: cntRegUpdate = 0;
  3434                           
  3435                           ; BSR set to: 0
  3436  002406  0E00               	movlw	0
  3437  002408  6FEA               	movwf	_cntRegUpdate& (0+255),b
  3438                           
  3439                           ;SyntApp.c: 106: if(cType == SYNTH_TX)
  3440  00240A  5189               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3441  00240C  A4D8               	btfss	status,2,c
  3442  00240E  D006               	goto	l510
  3443                           
  3444                           ; BSR set to: 0
  3445                           ;SyntApp.c: 107: {
  3446                           ;SyntApp.c: 108: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_SET);
  3447  002410  0E42               	movlw	66
  3448  002412  6E24               	movwf	SendAckMessage@inRequest,c
  3449  002414  0E04               	movlw	4
  3450  002416  ECE2  F01C         	call	_SendAckMessage
  3451                           
  3452                           ;SyntApp.c: 109: }
  3453  00241A  0012               	return	
  3454  00241C                     l510:
  3455                           
  3456                           ;SyntApp.c: 110: else if(cType == SYNTH_RX)
  3457  00241C  0100               	movlb	0	; () banked
  3458  00241E  0589               	decf	UpdateSynthFreq@cType& (0+255),w,b
  3459  002420  A4D8               	btfss	status,2,c
  3460  002422  0012               	return	
  3461                           
  3462                           ; BSR set to: 0
  3463                           ;SyntApp.c: 111: {
  3464                           ;SyntApp.c: 112: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_SET);
  3465  002424  0E43               	movlw	67
  3466  002426  6E24               	movwf	SendAckMessage@inRequest,c
  3467  002428  0E04               	movlw	4
  3468  00242A  ECE2  F01C         	call	_SendAckMessage
  3469  00242E  0012               	return	
  3470  002430                     __end_of_UpdateSynthFreq:
  3471                           	opt stack 0
  3472                           tosu	equ	0xFFF
  3473                           tosh	equ	0xFFE
  3474                           tosl	equ	0xFFD
  3475                           pclath	equ	0xFFA
  3476                           tblptru	equ	0xFF8
  3477                           tblptrh	equ	0xFF7
  3478                           tblptrl	equ	0xFF6
  3479                           tablat	equ	0xFF5
  3480                           postinc0	equ	0xFEE
  3481                           plusw0	equ	0xFEB
  3482                           wreg	equ	0xFE8
  3483                           postdec1	equ	0xFE5
  3484                           fsr1l	equ	0xFE1
  3485                           indf2	equ	0xFDF
  3486                           postinc2	equ	0xFDE
  3487                           plusw2	equ	0xFDB
  3488                           fsr2h	equ	0xFDA
  3489                           fsr2l	equ	0xFD9
  3490                           status	equ	0xFD8
  3491                           
  3492 ;; *************** function _SynthReadData *****************
  3493 ;; Defined at:
  3494 ;;		line 152 in file "SyntApp.c"
  3495 ;; Parameters:    Size  Location     Type
  3496 ;;  cType           1    wreg     enum E1
  3497 ;;  data            2  104[BANK0 ] PTR unsigned char 
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;  cType           1   19[BANK2 ] enum E1
  3500 ;;  data            1   18[BANK2 ] unsigned char 
  3501 ;;  TxMsg          18    0[BANK2 ] unsigned char [18]
  3502 ;;  eepromDataAr   12   20[BANK2 ] unsigned long [3]
  3503 ;;  byteNum         1   33[BANK2 ] unsigned char 
  3504 ;;  regNum          1   32[BANK2 ] unsigned char 
  3505 ;; Return value:  Size  Location     Type
  3506 ;;                  1    wreg      void 
  3507 ;; Registers used:
  3508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3509 ;; Tracked objects:
  3510 ;;		On entry : 0/0
  3511 ;;		On exit  : 0/0
  3512 ;;		Unchanged: 0/0
  3513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3514 ;;      Params:         0       2       0       0       0       0       0
  3515 ;;      Locals:         0       0       0      34       0       0       0
  3516 ;;      Temps:          0       0       0       0       0       0       0
  3517 ;;      Totals:         0       2       0      34       0       0       0
  3518 ;;Total ram usage:       36 bytes
  3519 ;; Hardware stack levels used:    1
  3520 ;; Hardware stack levels required when called:   10
  3521 ;; This function calls:
  3522 ;;		_ReadIntFromEeprom
  3523 ;;		_WriteUartMessage
  3524 ;;		_ZeroArray
  3525 ;;		_crc8
  3526 ;;		_make8
  3527 ;; This function is called by:
  3528 ;;		_GroupSynthesizers
  3529 ;; This function uses a non-reentrant model
  3530 ;;
  3531                           
  3532                           	psect	text10
  3533  0014CC                     __ptext10:
  3534                           	opt stack 0
  3535  0014CC                     _SynthReadData:
  3536                           	opt stack 18
  3537                           
  3538                           ;incstack = 0
  3539                           ;SynthReadData@cType stored from wreg
  3540  0014CC  0102               	movlb	2	; () banked
  3541  0014CE  6F13               	movwf	SynthReadData@cType& (0+255),b
  3542                           
  3543                           ;SyntApp.c: 154: uint32_t eepromDataArray[3];
  3544                           ;SyntApp.c: 155: uint8_t regNum = 0, byteNum = 0;
  3545  0014D0  0E00               	movlw	0
  3546  0014D2  0102               	movlb	2	; () banked
  3547  0014D4  6F20               	movwf	SynthReadData@regNum& (0+255),b
  3548  0014D6  0E00               	movlw	0
  3549  0014D8  6F21               	movwf	SynthReadData@byteNum& (0+255),b
  3550                           
  3551                           ; BSR set to: 2
  3552                           ;SyntApp.c: 156: char TxMsg[5 * 3 + 1 + 1 + 1];
  3553                           ;SyntApp.c: 157: ZeroArray(TxMsg, 5 * 3 + 1 + 1 + 1);
  3554  0014DA  0E00               	movlw	low SynthReadData@TxMsg
  3555  0014DC  6E20               	movwf	ZeroArray@array,c
  3556  0014DE  0E02               	movlw	high SynthReadData@TxMsg
  3557  0014E0  6E21               	movwf	ZeroArray@array+1,c
  3558  0014E2  0E00               	movlw	0
  3559  0014E4  6E23               	movwf	ZeroArray@size+1,c
  3560  0014E6  0E12               	movlw	18
  3561  0014E8  6E22               	movwf	ZeroArray@size,c
  3562  0014EA  EC95  F020         	call	_ZeroArray	;wreg free
  3563                           
  3564                           ;SyntApp.c: 160: TxMsg[(0)] = (0x24);
  3565  0014EE  0E24               	movlw	36
  3566  0014F0  0102               	movlb	2	; () banked
  3567  0014F2  6F00               	movwf	SynthReadData@TxMsg& (0+255),b
  3568                           
  3569                           ; BSR set to: 2
  3570                           ;SyntApp.c: 161: TxMsg[(1)] = SYNTH_MSG;
  3571  0014F4  0E04               	movlw	4
  3572  0014F6  6F01               	movwf	(SynthReadData@TxMsg+1)& (0+255),b
  3573                           
  3574                           ; BSR set to: 2
  3575                           ;SyntApp.c: 162: TxMsg[(3)] = 5 * 3 + 1 - (0x4);
  3576  0014F8  0E0C               	movlw	12
  3577  0014FA  6F03               	movwf	(SynthReadData@TxMsg+3)& (0+255),b
  3578                           
  3579                           ; BSR set to: 2
  3580                           ;SyntApp.c: 164: if(cType == SYNTH_TX)
  3581  0014FC  5113               	movf	SynthReadData@cType& (0+255),w,b
  3582  0014FE  A4D8               	btfss	status,2,c
  3583  001500  D03A               	goto	l526
  3584                           
  3585                           ; BSR set to: 2
  3586                           ;SyntApp.c: 165: {
  3587                           ;SyntApp.c: 166: TxMsg[(2)] = SYNTH_DOWN_READ_DATA;
  3588  001502  0E47               	movlw	71
  3589  001504  6F02               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  3590                           
  3591                           ; BSR set to: 2
  3592                           ;SyntApp.c: 167: eepromDataArray[0] = ReadIntFromEeprom((0) | SYNTH_ADDRES[0], 4);
  3593  001506  0E00               	movlw	0
  3594  001508  0100               	movlb	0	; () banked
  3595  00150A  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3596  00150C  0E04               	movlw	4
  3597  00150E  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3598  001510  0E35               	movlw	low _SYNTH_ADDRES
  3599  001512  6EF6               	movwf	tblptrl,c
  3600  001514                     	if	1	;There is more than 1 active tblptr byte
  3601  001514  0E06               	movlw	high _SYNTH_ADDRES
  3602  001516  6EF7               	movwf	tblptrh,c
  3603  001518                     	endif
  3604  001518                     	if	0	;There are less than 3 active tblptr bytes
  3605  001518                     	endif
  3606  001518  0008               	tblrd		*
  3607  00151A  50F5               	movf	tablat,w,c
  3608  00151C  EC05  F010         	call	_ReadIntFromEeprom
  3609  001520  C0B1  F214         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray
  3610  001524  C0B2  F215         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+1
  3611  001528  C0B3  F216         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+2
  3612  00152C  C0B4  F217         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+3
  3613                           
  3614                           ;SyntApp.c: 168: eepromDataArray[1] = ReadIntFromEeprom((0) | SYNTH_ADDRES[1], 4);
  3615  001530  0E00               	movlw	0
  3616  001532  0100               	movlb	0	; () banked
  3617  001534  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3618  001536  0E04               	movlw	4
  3619  001538  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3620  00153A  0E36               	movlw	low (_SYNTH_ADDRES+1)
  3621  00153C  6EF6               	movwf	tblptrl,c
  3622  00153E  0E06               	movlw	high (_SYNTH_ADDRES+1)
  3623  001540  6EF7               	movwf	tblptrh,c
  3624  001542                     	if	0	;tblptru may be non-zero
  3625  001542                     	endif
  3626  001542                     	if	0	;tblptru may be non-zero
  3627  001542                     	endif
  3628  001542  0008               	tblrd		*
  3629  001544  50F5               	movf	tablat,w,c
  3630  001546  EC05  F010         	call	_ReadIntFromEeprom
  3631  00154A  C0B1  F218         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+4
  3632  00154E  C0B2  F219         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+5
  3633  001552  C0B3  F21A         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+6
  3634  001556  C0B4  F21B         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+7
  3635                           
  3636                           ;SyntApp.c: 169: eepromDataArray[2] = ReadIntFromEeprom((0) | SYNTH_ADDRES[2], 4);
  3637  00155A  0E00               	movlw	0
  3638  00155C  0100               	movlb	0	; () banked
  3639  00155E  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3640  001560  0E04               	movlw	4
  3641  001562  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3642  001564  0E37               	movlw	low (_SYNTH_ADDRES+2)
  3643  001566  6EF6               	movwf	tblptrl,c
  3644  001568  0E06               	movlw	high (_SYNTH_ADDRES+2)
  3645  00156A  6EF7               	movwf	tblptrh,c
  3646  00156C                     	if	0	;tblptru may be non-zero
  3647  00156C                     	endif
  3648  00156C                     	if	0	;tblptru may be non-zero
  3649  00156C                     	endif
  3650  00156C  0008               	tblrd		*
  3651  00156E  50F5               	movf	tablat,w,c
  3652  001570  EC05  F010         	call	_ReadIntFromEeprom
  3653  001574  D040               	goto	L1
  3654  001576                     l526:
  3655                           
  3656                           ;SyntApp.c: 171: else if (cType == SYNTH_RX)
  3657  001576  0102               	movlb	2	; () banked
  3658  001578  0513               	decf	SynthReadData@cType& (0+255),w,b
  3659  00157A  A4D8               	btfss	status,2,c
  3660  00157C  D044               	goto	l528
  3661                           
  3662                           ; BSR set to: 2
  3663                           ;SyntApp.c: 172: {
  3664                           ;SyntApp.c: 173: TxMsg[(2)] = SYNTH_UP_READ_DATA;
  3665  00157E  0E46               	movlw	70
  3666  001580  6F02               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  3667                           
  3668                           ; BSR set to: 2
  3669                           ;SyntApp.c: 174: eepromDataArray[0] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[0], 4);
  3670  001582  0E00               	movlw	0
  3671  001584  0100               	movlb	0	; () banked
  3672  001586  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3673  001588  0E04               	movlw	4
  3674  00158A  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3675  00158C  0E35               	movlw	low _SYNTH_ADDRES
  3676  00158E  6EF6               	movwf	tblptrl,c
  3677  001590                     	if	1	;There is more than 1 active tblptr byte
  3678  001590  0E06               	movlw	high _SYNTH_ADDRES
  3679  001592  6EF7               	movwf	tblptrh,c
  3680  001594                     	endif
  3681  001594                     	if	0	;There are less than 3 active tblptr bytes
  3682  001594                     	endif
  3683  001594  0008               	tblrd		*
  3684  001596  50F5               	movf	tablat,w,c
  3685  001598  0920               	iorlw	32
  3686  00159A  EC05  F010         	call	_ReadIntFromEeprom
  3687  00159E  C0B1  F214         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray
  3688  0015A2  C0B2  F215         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+1
  3689  0015A6  C0B3  F216         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+2
  3690  0015AA  C0B4  F217         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+3
  3691                           
  3692                           ;SyntApp.c: 175: eepromDataArray[1] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[1], 4);
  3693  0015AE  0E00               	movlw	0
  3694  0015B0  0100               	movlb	0	; () banked
  3695  0015B2  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3696  0015B4  0E04               	movlw	4
  3697  0015B6  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3698  0015B8  0E36               	movlw	low (_SYNTH_ADDRES+1)
  3699  0015BA  6EF6               	movwf	tblptrl,c
  3700  0015BC  0E06               	movlw	high (_SYNTH_ADDRES+1)
  3701  0015BE  6EF7               	movwf	tblptrh,c
  3702  0015C0                     	if	0	;tblptru may be non-zero
  3703  0015C0                     	endif
  3704  0015C0                     	if	0	;tblptru may be non-zero
  3705  0015C0                     	endif
  3706  0015C0  0008               	tblrd		*
  3707  0015C2  50F5               	movf	tablat,w,c
  3708  0015C4  0920               	iorlw	32
  3709  0015C6  EC05  F010         	call	_ReadIntFromEeprom
  3710  0015CA  C0B1  F218         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+4
  3711  0015CE  C0B2  F219         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+5
  3712  0015D2  C0B3  F21A         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+6
  3713  0015D6  C0B4  F21B         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+7
  3714                           
  3715                           ;SyntApp.c: 176: eepromDataArray[2] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[2], 4);
  3716  0015DA  0E00               	movlw	0
  3717  0015DC  0100               	movlb	0	; () banked
  3718  0015DE  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3719  0015E0  0E04               	movlw	4
  3720  0015E2  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3721  0015E4  0E37               	movlw	low (_SYNTH_ADDRES+2)
  3722  0015E6  6EF6               	movwf	tblptrl,c
  3723  0015E8  0E06               	movlw	high (_SYNTH_ADDRES+2)
  3724  0015EA  6EF7               	movwf	tblptrh,c
  3725  0015EC                     	if	0	;tblptru may be non-zero
  3726  0015EC                     	endif
  3727  0015EC                     	if	0	;tblptru may be non-zero
  3728  0015EC                     	endif
  3729  0015EC  0008               	tblrd		*
  3730  0015EE  50F5               	movf	tablat,w,c
  3731  0015F0  0920               	iorlw	32
  3732  0015F2  EC05  F010         	call	_ReadIntFromEeprom
  3733  0015F6                     L1:
  3734  0015F6  C0B1  F21C         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+8
  3735  0015FA  C0B2  F21D         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+9
  3736  0015FE  C0B3  F21E         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+10
  3737  001602  C0B4  F21F         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+11
  3738  001606                     l528:
  3739                           
  3740                           ;SyntApp.c: 177: }
  3741                           ;SyntApp.c: 179: for(regNum = 0; regNum < 3; regNum++)
  3742  001606  0E00               	movlw	0
  3743  001608  0102               	movlb	2	; () banked
  3744  00160A  6F20               	movwf	SynthReadData@regNum& (0+255),b
  3745  00160C                     l8295:
  3746                           
  3747                           ; BSR set to: 2
  3748  00160C  0E02               	movlw	2
  3749  00160E  6520               	cpfsgt	SynthReadData@regNum& (0+255),b
  3750  001610  D001               	goto	l529
  3751  001612  D032               	goto	u8880
  3752  001614                     l529:
  3753                           
  3754                           ; BSR set to: 2
  3755                           ;SyntApp.c: 180: {
  3756                           ;SyntApp.c: 181: for(byteNum = 0; byteNum < (5); byteNum++)
  3757                           
  3758                           ; BSR set to: 2
  3759  001614  0E00               	movlw	0
  3760  001616  6F21               	movwf	SynthReadData@byteNum& (0+255),b
  3761  001618                     l8301:
  3762                           
  3763                           ; BSR set to: 2
  3764  001618  0E04               	movlw	4
  3765  00161A  6521               	cpfsgt	SynthReadData@byteNum& (0+255),b
  3766  00161C  D001               	goto	l531
  3767  00161E  D02A               	goto	u8870
  3768  001620                     l531:
  3769                           
  3770                           ; BSR set to: 2
  3771                           ;SyntApp.c: 182: {
  3772                           ;SyntApp.c: 183: uint8_t data = make8(eepromDataArray[regNum], byteNum);
  3773                           
  3774                           ; BSR set to: 2
  3775  001620  5120               	movf	SynthReadData@regNum& (0+255),w,b
  3776  001622  0D04               	mullw	4
  3777  001624  0E14               	movlw	low SynthReadData@eepromDataArray
  3778  001626  24F3               	addwf	prodl,w,c
  3779  001628  6ED9               	movwf	fsr2l,c
  3780  00162A  0E02               	movlw	high SynthReadData@eepromDataArray
  3781  00162C  20F4               	addwfc	prodh,w,c
  3782  00162E  6EDA               	movwf	fsr2h,c
  3783  001630  CFDE F018          	movff	postinc2,make8@data
  3784  001634  CFDE F019          	movff	postinc2,make8@data+1
  3785  001638  CFDE F01A          	movff	postinc2,make8@data+2
  3786  00163C  CFDE F01B          	movff	postinc2,make8@data+3
  3787  001640  C221  F01C         	movff	SynthReadData@byteNum,make8@dataLocation
  3788  001644  EC84  F01B         	call	_make8	;wreg free
  3789  001648  0102               	movlb	2	; () banked
  3790  00164A  6F12               	movwf	SynthReadData@data_947& (0+255),b
  3791                           
  3792                           ; BSR set to: 2
  3793                           ;SyntApp.c: 184: TxMsg[(0x4) + (3 + 1)*regNum + byteNum] = data;
  3794  00164C  5120               	movf	SynthReadData@regNum& (0+255),w,b
  3795  00164E  0D04               	mullw	4
  3796  001650  5121               	movf	SynthReadData@byteNum& (0+255),w,b
  3797  001652  26F3               	addwf	prodl,f,c
  3798  001654  0E00               	movlw	0
  3799  001656  22F4               	addwfc	prodh,f,c
  3800  001658  0E04               	movlw	4
  3801  00165A  26F3               	addwf	prodl,f,c
  3802  00165C  0E00               	movlw	0
  3803  00165E  22F4               	addwfc	prodh,f,c
  3804  001660  0E00               	movlw	low SynthReadData@TxMsg
  3805  001662  24F3               	addwf	prodl,w,c
  3806  001664  6ED9               	movwf	fsr2l,c
  3807  001666  0E02               	movlw	high SynthReadData@TxMsg
  3808  001668  20F4               	addwfc	prodh,w,c
  3809  00166A  6EDA               	movwf	fsr2h,c
  3810  00166C  C212  FFDF         	movff	SynthReadData@data_947,indf2
  3811                           
  3812                           ; BSR set to: 2
  3813  001670  2B21               	incf	SynthReadData@byteNum& (0+255),f,b
  3814  001672  D7D2               	goto	l8301
  3815  001674                     u8870:
  3816                           
  3817                           ; BSR set to: 2
  3818                           
  3819                           ; BSR set to: 2
  3820  001674  2B20               	incf	SynthReadData@regNum& (0+255),f,b
  3821  001676  D7CA               	goto	l8295
  3822  001678                     u8880:
  3823                           
  3824                           ; BSR set to: 2
  3825                           ;SyntApp.c: 185: }
  3826                           ;SyntApp.c: 186: }
  3827                           ;SyntApp.c: 188: TxMsg[5 * 3 + 1] = 0x9;
  3828                           
  3829                           ; BSR set to: 2
  3830  001678  0E09               	movlw	9
  3831  00167A  6F10               	movwf	(SynthReadData@TxMsg+16)& (0+255),b
  3832                           
  3833                           ; BSR set to: 2
  3834                           ;SyntApp.c: 189: TxMsg[5 * 3 + 1 + 1] = crc8(TxMsg, 5 * 3 + 1 + 1);
  3835  00167C  0E00               	movlw	low SynthReadData@TxMsg
  3836  00167E  6E18               	movwf	crc8@dataArray,c
  3837  001680  0E02               	movlw	high SynthReadData@TxMsg
  3838  001682  6E19               	movwf	crc8@dataArray+1,c
  3839  001684  0E00               	movlw	0
  3840  001686  6E1B               	movwf	crc8@dataSize+1,c
  3841  001688  0E11               	movlw	17
  3842  00168A  6E1A               	movwf	crc8@dataSize,c
  3843  00168C  EC0B  F01D         	call	_crc8	;wreg free
  3844  001690  0102               	movlb	2	; () banked
  3845  001692  6F11               	movwf	(SynthReadData@TxMsg+17)& (0+255),b
  3846                           
  3847                           ; BSR set to: 2
  3848                           ;SyntApp.c: 190: WriteUartMessage(TxMsg, 5 * 3 + 1 + 1 + 1);
  3849  001694  0E00               	movlw	low SynthReadData@TxMsg
  3850  001696  6E19               	movwf	WriteUartMessage@dataBuf,c
  3851  001698  0E02               	movlw	high SynthReadData@TxMsg
  3852  00169A  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  3853  00169C  0E00               	movlw	0
  3854  00169E  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  3855  0016A0  0E12               	movlw	18
  3856  0016A2  6E1B               	movwf	WriteUartMessage@dataSize,c
  3857  0016A4  EC9D  F01E         	call	_WriteUartMessage	;wreg free
  3858  0016A8  0012               	return		;funcret
  3859  0016AA                     __end_of_SynthReadData:
  3860                           	opt stack 0
  3861                           tosu	equ	0xFFF
  3862                           tosh	equ	0xFFE
  3863                           tosl	equ	0xFFD
  3864                           pclath	equ	0xFFA
  3865                           tblptru	equ	0xFF8
  3866                           tblptrh	equ	0xFF7
  3867                           tblptrl	equ	0xFF6
  3868                           tablat	equ	0xFF5
  3869                           prodh	equ	0xFF4
  3870                           prodl	equ	0xFF3
  3871                           postinc0	equ	0xFEE
  3872                           plusw0	equ	0xFEB
  3873                           wreg	equ	0xFE8
  3874                           postdec1	equ	0xFE5
  3875                           fsr1l	equ	0xFE1
  3876                           indf2	equ	0xFDF
  3877                           postinc2	equ	0xFDE
  3878                           plusw2	equ	0xFDB
  3879                           fsr2h	equ	0xFDA
  3880                           fsr2l	equ	0xFD9
  3881                           status	equ	0xFD8
  3882                           
  3883 ;; *************** function _SetSynthOper *****************
  3884 ;; Defined at:
  3885 ;;		line 121 in file "SyntApp.c"
  3886 ;; Parameters:    Size  Location     Type
  3887 ;;  cType           1    wreg     enum E1
  3888 ;; Auto vars:     Size  Location     Type
  3889 ;;  cType           1  111[BANK0 ] enum E1
  3890 ;; Return value:  Size  Location     Type
  3891 ;;                  1    wreg      void 
  3892 ;; Registers used:
  3893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3894 ;; Tracked objects:
  3895 ;;		On entry : 0/0
  3896 ;;		On exit  : 0/0
  3897 ;;		Unchanged: 0/0
  3898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3899 ;;      Params:         0       0       0       0       0       0       0
  3900 ;;      Locals:         0       1       0       0       0       0       0
  3901 ;;      Temps:          0       0       0       0       0       0       0
  3902 ;;      Totals:         0       1       0       0       0       0       0
  3903 ;;Total ram usage:        1 bytes
  3904 ;; Hardware stack levels used:    1
  3905 ;; Hardware stack levels required when called:   11
  3906 ;; This function calls:
  3907 ;;		_InitSynth
  3908 ;;		_SendAckMessage
  3909 ;;		_SwSpi_Set_CE_Pin
  3910 ;; This function is called by:
  3911 ;;		_GroupSynthesizers
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           	psect	text11
  3916  0033AE                     __ptext11:
  3917                           	opt stack 0
  3918  0033AE                     _SetSynthOper:
  3919                           	opt stack 17
  3920                           
  3921                           ;incstack = 0
  3922                           ;SetSynthOper@cType stored from wreg
  3923  0033AE  0100               	movlb	0	; () banked
  3924  0033B0  6FCF               	movwf	SetSynthOper@cType& (0+255),b
  3925                           
  3926                           ;SyntApp.c: 123: if(cType == SYNTH_TX)
  3927  0033B2  0100               	movlb	0	; () banked
  3928  0033B4  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  3929  0033B6  A4D8               	btfss	status,2,c
  3930  0033B8  D01A               	goto	l516
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;SyntApp.c: 124: {
  3934                           ;SyntApp.c: 125: SynthTxOper = !SynthTxOper;
  3935  0033BA  5045               	movf	_SynthTxOper,w,c
  3936  0033BC  A4D8               	btfss	status,2,c
  3937  0033BE  D002               	goto	u8760
  3938  0033C0  0E01               	movlw	1
  3939  0033C2  D001               	goto	u8770
  3940  0033C4                     u8760:
  3941  0033C4  0E00               	movlw	0
  3942  0033C6                     u8770:
  3943  0033C6  6E45               	movwf	_SynthTxOper,c
  3944                           
  3945                           ;SyntApp.c: 126: if(SynthTxOper)
  3946  0033C8  5045               	movf	_SynthTxOper,w,c
  3947  0033CA  B4D8               	btfsc	status,2,c
  3948  0033CC  D004               	goto	l517
  3949                           
  3950                           ; BSR set to: 0
  3951                           ;SyntApp.c: 127: {
  3952                           ;SyntApp.c: 128: InitSynth(cType);
  3953  0033CE  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  3954  0033D0  EC36  F007         	call	_InitSynth
  3955                           
  3956                           ;SyntApp.c: 129: }
  3957  0033D4  D006               	goto	l518
  3958  0033D6                     l517:
  3959                           
  3960                           ;SyntApp.c: 130: else
  3961                           ;SyntApp.c: 131: {
  3962                           ;SyntApp.c: 132: SwSpi_Set_CE_Pin(cType, 0);
  3963  0033D6  0E00               	movlw	0
  3964  0033D8  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  3965  0033DA  0100               	movlb	0	; () banked
  3966  0033DC  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  3967  0033DE  ECD6  F01D         	call	_SwSpi_Set_CE_Pin
  3968  0033E2                     l518:
  3969                           
  3970                           ;SyntApp.c: 133: }
  3971                           ;SyntApp.c: 134: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_OPER);
  3972  0033E2  0E45               	movlw	69
  3973  0033E4  6E24               	movwf	SendAckMessage@inRequest,c
  3974  0033E6  0E04               	movlw	4
  3975  0033E8  ECE2  F01C         	call	_SendAckMessage
  3976                           
  3977                           ;SyntApp.c: 135: }
  3978  0033EC  0012               	return	
  3979  0033EE                     l516:
  3980                           
  3981                           ;SyntApp.c: 136: else if (cType == SYNTH_RX)
  3982  0033EE  0100               	movlb	0	; () banked
  3983  0033F0  05CF               	decf	SetSynthOper@cType& (0+255),w,b
  3984  0033F2  A4D8               	btfss	status,2,c
  3985  0033F4  0012               	return	
  3986                           
  3987                           ; BSR set to: 0
  3988                           ;SyntApp.c: 137: {
  3989                           ;SyntApp.c: 138: SynthRxOper = !SynthRxOper;
  3990  0033F6  5044               	movf	_SynthRxOper,w,c
  3991  0033F8  A4D8               	btfss	status,2,c
  3992  0033FA  D002               	goto	u8800
  3993  0033FC  0E01               	movlw	1
  3994  0033FE  D001               	goto	u8810
  3995  003400                     u8800:
  3996  003400  0E00               	movlw	0
  3997  003402                     u8810:
  3998  003402  6E44               	movwf	_SynthRxOper,c
  3999                           
  4000                           ;SyntApp.c: 139: if(SynthRxOper)
  4001  003404  5044               	movf	_SynthRxOper,w,c
  4002  003406  B4D8               	btfsc	status,2,c
  4003  003408  D004               	goto	l521
  4004                           
  4005                           ; BSR set to: 0
  4006                           ;SyntApp.c: 140: {
  4007                           ;SyntApp.c: 141: InitSynth(cType);
  4008  00340A  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4009  00340C  EC36  F007         	call	_InitSynth
  4010                           
  4011                           ;SyntApp.c: 142: }
  4012  003410  D006               	goto	l522
  4013  003412                     l521:
  4014                           
  4015                           ;SyntApp.c: 143: else
  4016                           ;SyntApp.c: 144: {
  4017                           ;SyntApp.c: 145: SwSpi_Set_CE_Pin(cType, 0);
  4018  003412  0E00               	movlw	0
  4019  003414  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  4020  003416  0100               	movlb	0	; () banked
  4021  003418  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4022  00341A  ECD6  F01D         	call	_SwSpi_Set_CE_Pin
  4023  00341E                     l522:
  4024                           
  4025                           ;SyntApp.c: 146: }
  4026                           ;SyntApp.c: 147: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_OPER);
  4027  00341E  0E44               	movlw	68
  4028  003420  6E24               	movwf	SendAckMessage@inRequest,c
  4029  003422  0E04               	movlw	4
  4030  003424  ECE2  F01C         	call	_SendAckMessage
  4031  003428  0012               	return	
  4032  00342A                     __end_of_SetSynthOper:
  4033                           	opt stack 0
  4034                           tosu	equ	0xFFF
  4035                           tosh	equ	0xFFE
  4036                           tosl	equ	0xFFD
  4037                           pclath	equ	0xFFA
  4038                           tblptru	equ	0xFF8
  4039                           tblptrh	equ	0xFF7
  4040                           tblptrl	equ	0xFF6
  4041                           tablat	equ	0xFF5
  4042                           prodh	equ	0xFF4
  4043                           prodl	equ	0xFF3
  4044                           postinc0	equ	0xFEE
  4045                           plusw0	equ	0xFEB
  4046                           wreg	equ	0xFE8
  4047                           postdec1	equ	0xFE5
  4048                           fsr1l	equ	0xFE1
  4049                           indf2	equ	0xFDF
  4050                           postinc2	equ	0xFDE
  4051                           plusw2	equ	0xFDB
  4052                           fsr2h	equ	0xFDA
  4053                           fsr2l	equ	0xFD9
  4054                           status	equ	0xFD8
  4055                           
  4056 ;; *************** function _GetMcuRunTime *****************
  4057 ;; Defined at:
  4058 ;;		line 68 in file "SystemStatus.c"
  4059 ;; Parameters:    Size  Location     Type
  4060 ;;		None
  4061 ;; Auto vars:     Size  Location     Type
  4062 ;;  idx             2   13[BANK0 ] int 
  4063 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  4064 ;;  tempRunTime     4    9[BANK0 ] unsigned long 
  4065 ;; Return value:  Size  Location     Type
  4066 ;;                  1    wreg      void 
  4067 ;; Registers used:
  4068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4069 ;; Tracked objects:
  4070 ;;		On entry : 0/0
  4071 ;;		On exit  : 0/0
  4072 ;;		Unchanged: 0/0
  4073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4074 ;;      Params:         0       0       0       0       0       0       0
  4075 ;;      Locals:         0      15       0       0       0       0       0
  4076 ;;      Temps:          2       0       0       0       0       0       0
  4077 ;;      Totals:         2      15       0       0       0       0       0
  4078 ;;Total ram usage:       17 bytes
  4079 ;; Hardware stack levels used:    1
  4080 ;; Hardware stack levels required when called:    6
  4081 ;; This function calls:
  4082 ;;		_WriteUartMessage
  4083 ;;		___lldiv
  4084 ;;		___llmod
  4085 ;;		_crc8
  4086 ;; This function is called by:
  4087 ;;		_GroupStatusAndVersion
  4088 ;; This function uses a non-reentrant model
  4089 ;;
  4090                           
  4091                           	psect	text12
  4092  002706                     __ptext12:
  4093                           	opt stack 0
  4094  002706                     _GetMcuRunTime:
  4095                           	opt stack 22
  4096                           
  4097                           ;SystemStatus.c: 71: char TxMsg[(0x4) + (0x4) + 1];
  4098                           ;SystemStatus.c: 74: TxMsg[(0)] = (0x24);
  4099                           
  4100                           ;incstack = 0
  4101  002706  0E24               	movlw	36
  4102  002708  0100               	movlb	0	; () banked
  4103  00270A  6F60               	movwf	GetMcuRunTime@TxMsg& (0+255),b
  4104                           
  4105                           ;SystemStatus.c: 75: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4106  00270C  0E02               	movlw	2
  4107  00270E  6F61               	movwf	(GetMcuRunTime@TxMsg+1)& (0+255),b
  4108                           
  4109                           ;SystemStatus.c: 76: TxMsg[(2)] = STATUS_MCU_RUN_TIME;
  4110  002710  0E21               	movlw	33
  4111  002712  6F62               	movwf	(GetMcuRunTime@TxMsg+2)& (0+255),b
  4112                           
  4113                           ;SystemStatus.c: 77: TxMsg[(3)] = (0x4);
  4114  002714  0E04               	movlw	4
  4115  002716  6F63               	movwf	(GetMcuRunTime@TxMsg+3)& (0+255),b
  4116                           
  4117                           ; BSR set to: 0
  4118                           ;SystemStatus.c: 79: uint32_t tempRunTime = mcuRunTimeIn5SecTicks;
  4119  002718  C0E0  F069         	movff	_mcuRunTimeIn5SecTicks,GetMcuRunTime@tempRunTime
  4120  00271C  C0E1  F06A         	movff	_mcuRunTimeIn5SecTicks+1,GetMcuRunTime@tempRunTime+1
  4121  002720  C0E2  F06B         	movff	_mcuRunTimeIn5SecTicks+2,GetMcuRunTime@tempRunTime+2
  4122  002724  C0E3  F06C         	movff	_mcuRunTimeIn5SecTicks+3,GetMcuRunTime@tempRunTime+3
  4123                           
  4124                           ;SystemStatus.c: 82: for(int idx = 0; idx < (0x4); idx++)
  4125  002728  0E00               	movlw	0
  4126  00272A  6F6E               	movwf	(GetMcuRunTime@idx+1)& (0+255),b
  4127  00272C  0E00               	movlw	0
  4128  00272E  6F6D               	movwf	GetMcuRunTime@idx& (0+255),b
  4129  002730                     l8381:
  4130                           
  4131                           ; BSR set to: 0
  4132  002730  BF6E               	btfsc	(GetMcuRunTime@idx+1)& (0+255),7,b
  4133  002732  D006               	goto	l1463
  4134  002734  516E               	movf	(GetMcuRunTime@idx+1)& (0+255),w,b
  4135  002736  E142               	bnz	l8393
  4136  002738  0E04               	movlw	4
  4137  00273A  5D6D               	subwf	GetMcuRunTime@idx& (0+255),w,b
  4138  00273C  B0D8               	btfsc	status,0,c
  4139  00273E  D03E               	goto	u8920
  4140  002740                     l1463:
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;SystemStatus.c: 83: {
  4144                           ;SystemStatus.c: 84: TxMsg[(0x4) + idx] = tempRunTime % 10;
  4145                           
  4146                           ; BSR set to: 0
  4147  002740  0E04               	movlw	4
  4148  002742  256D               	addwf	GetMcuRunTime@idx& (0+255),w,b
  4149  002744  6E25               	movwf	??_GetMcuRunTime& (0+255),c
  4150  002746  0E00               	movlw	0
  4151  002748  216E               	addwfc	(GetMcuRunTime@idx+1)& (0+255),w,b
  4152  00274A  6E26               	movwf	(??_GetMcuRunTime+1)& (0+255),c
  4153  00274C  0E60               	movlw	low GetMcuRunTime@TxMsg
  4154  00274E  2425               	addwf	??_GetMcuRunTime,w,c
  4155  002750  6ED9               	movwf	fsr2l,c
  4156  002752  0E00               	movlw	high GetMcuRunTime@TxMsg
  4157  002754  2026               	addwfc	??_GetMcuRunTime+1,w,c
  4158  002756  6EDA               	movwf	fsr2h,c
  4159  002758  C069  F018         	movff	GetMcuRunTime@tempRunTime,___llmod@dividend
  4160  00275C  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___llmod@dividend+1
  4161  002760  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___llmod@dividend+2
  4162  002764  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___llmod@dividend+3
  4163  002768  0E0A               	movlw	10
  4164  00276A  6E1C               	movwf	___llmod@divisor,c
  4165  00276C  0E00               	movlw	0
  4166  00276E  6E1D               	movwf	___llmod@divisor+1,c
  4167  002770  0E00               	movlw	0
  4168  002772  6E1E               	movwf	___llmod@divisor+2,c
  4169  002774  0E00               	movlw	0
  4170  002776  6E1F               	movwf	___llmod@divisor+3,c
  4171  002778  ECC1  F01A         	call	___llmod	;wreg free
  4172  00277C  5018               	movf	?___llmod,w,c
  4173  00277E  6EDF               	movwf	indf2,c
  4174                           
  4175                           ;SystemStatus.c: 85: tempRunTime /= 10;
  4176  002780  C069  F018         	movff	GetMcuRunTime@tempRunTime,___lldiv@dividend
  4177  002784  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___lldiv@dividend+1
  4178  002788  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___lldiv@dividend+2
  4179  00278C  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___lldiv@dividend+3
  4180  002790  0E0A               	movlw	10
  4181  002792  6E1C               	movwf	___lldiv@divisor,c
  4182  002794  0E00               	movlw	0
  4183  002796  6E1D               	movwf	___lldiv@divisor+1,c
  4184  002798  0E00               	movlw	0
  4185  00279A  6E1E               	movwf	___lldiv@divisor+2,c
  4186  00279C  0E00               	movlw	0
  4187  00279E  6E1F               	movwf	___lldiv@divisor+3,c
  4188  0027A0  EC96  F019         	call	___lldiv	;wreg free
  4189  0027A4  C018  F069         	movff	?___lldiv,GetMcuRunTime@tempRunTime
  4190  0027A8  C019  F06A         	movff	?___lldiv+1,GetMcuRunTime@tempRunTime+1
  4191  0027AC  C01A  F06B         	movff	?___lldiv+2,GetMcuRunTime@tempRunTime+2
  4192  0027B0  C01B  F06C         	movff	?___lldiv+3,GetMcuRunTime@tempRunTime+3
  4193  0027B4  0100               	movlb	0	; () banked
  4194  0027B6  4B6D               	infsnz	GetMcuRunTime@idx& (0+255),f,b
  4195  0027B8  2B6E               	incf	(GetMcuRunTime@idx+1)& (0+255),f,b
  4196  0027BA  D7BA               	goto	l8381
  4197  0027BC                     u8920:
  4198  0027BC                     l8393:
  4199                           
  4200                           ; BSR set to: 0
  4201                           ;SystemStatus.c: 86: }
  4202                           ;SystemStatus.c: 88: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4203  0027BC  0E60               	movlw	low GetMcuRunTime@TxMsg
  4204  0027BE  6E18               	movwf	crc8@dataArray,c
  4205  0027C0  0E00               	movlw	high GetMcuRunTime@TxMsg
  4206  0027C2  6E19               	movwf	crc8@dataArray+1,c
  4207  0027C4  0E00               	movlw	0
  4208  0027C6  6E1B               	movwf	crc8@dataSize+1,c
  4209  0027C8  0E08               	movlw	8
  4210  0027CA  6E1A               	movwf	crc8@dataSize,c
  4211  0027CC  EC0B  F01D         	call	_crc8	;wreg free
  4212  0027D0  0100               	movlb	0	; () banked
  4213  0027D2  6F68               	movwf	(GetMcuRunTime@TxMsg+8)& (0+255),b
  4214                           
  4215                           ; BSR set to: 0
  4216                           ;SystemStatus.c: 90: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4217  0027D4  0E60               	movlw	low GetMcuRunTime@TxMsg
  4218  0027D6  6E19               	movwf	WriteUartMessage@dataBuf,c
  4219  0027D8  0E00               	movlw	high GetMcuRunTime@TxMsg
  4220  0027DA  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4221  0027DC  0E00               	movlw	0
  4222  0027DE  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4223  0027E0  0E09               	movlw	9
  4224  0027E2  6E1B               	movwf	WriteUartMessage@dataSize,c
  4225  0027E4  EC9D  F01E         	call	_WriteUartMessage	;wreg free
  4226  0027E8  0012               	return		;funcret
  4227  0027EA                     __end_of_GetMcuRunTime:
  4228                           	opt stack 0
  4229                           tosu	equ	0xFFF
  4230                           tosh	equ	0xFFE
  4231                           tosl	equ	0xFFD
  4232                           pclath	equ	0xFFA
  4233                           tblptru	equ	0xFF8
  4234                           tblptrh	equ	0xFF7
  4235                           tblptrl	equ	0xFF6
  4236                           tablat	equ	0xFF5
  4237                           prodh	equ	0xFF4
  4238                           prodl	equ	0xFF3
  4239                           postinc0	equ	0xFEE
  4240                           plusw0	equ	0xFEB
  4241                           wreg	equ	0xFE8
  4242                           postdec1	equ	0xFE5
  4243                           fsr1l	equ	0xFE1
  4244                           indf2	equ	0xFDF
  4245                           postinc2	equ	0xFDE
  4246                           plusw2	equ	0xFDB
  4247                           fsr2h	equ	0xFDA
  4248                           fsr2l	equ	0xFD9
  4249                           status	equ	0xFD8
  4250                           
  4251 ;; *************** function ___lldiv *****************
  4252 ;; Defined at:
  4253 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4254 ;; Parameters:    Size  Location     Type
  4255 ;;  dividend        4   23[COMRAM] unsigned long 
  4256 ;;  divisor         4   27[COMRAM] unsigned long 
  4257 ;; Auto vars:     Size  Location     Type
  4258 ;;  quotient        4   31[COMRAM] unsigned long 
  4259 ;;  counter         1   35[COMRAM] unsigned char 
  4260 ;; Return value:  Size  Location     Type
  4261 ;;                  4   23[COMRAM] unsigned long 
  4262 ;; Registers used:
  4263 ;;		wreg, status,2, status,0
  4264 ;; Tracked objects:
  4265 ;;		On entry : 0/0
  4266 ;;		On exit  : 0/0
  4267 ;;		Unchanged: 0/0
  4268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4269 ;;      Params:         8       0       0       0       0       0       0
  4270 ;;      Locals:         5       0       0       0       0       0       0
  4271 ;;      Temps:          0       0       0       0       0       0       0
  4272 ;;      Totals:        13       0       0       0       0       0       0
  4273 ;;Total ram usage:       13 bytes
  4274 ;; Hardware stack levels used:    1
  4275 ;; Hardware stack levels required when called:    4
  4276 ;; This function calls:
  4277 ;;		Nothing
  4278 ;; This function is called by:
  4279 ;;		_GetMcuRunTime
  4280 ;; This function uses a non-reentrant model
  4281 ;;
  4282                           
  4283                           	psect	text13
  4284  00332C                     __ptext13:
  4285                           	opt stack 0
  4286  00332C                     ___lldiv:
  4287                           	opt stack 23
  4288                           
  4289                           ;incstack = 0
  4290  00332C  0E00               	movlw	0
  4291  00332E  6E20               	movwf	___lldiv@quotient,c
  4292  003330  0E00               	movlw	0
  4293  003332  6E21               	movwf	___lldiv@quotient+1,c
  4294  003334  0E00               	movlw	0
  4295  003336  6E22               	movwf	___lldiv@quotient+2,c
  4296  003338  0E00               	movlw	0
  4297  00333A  6E23               	movwf	___lldiv@quotient+3,c
  4298  00333C  501C               	movf	___lldiv@divisor,w,c
  4299  00333E  101D               	iorwf	___lldiv@divisor+1,w,c
  4300  003340  101E               	iorwf	___lldiv@divisor+2,w,c
  4301  003342  101F               	iorwf	___lldiv@divisor+3,w,c
  4302  003344  B4D8               	btfsc	status,2,c
  4303  003346  D02A               	goto	l1900
  4304  003348  0E01               	movlw	1
  4305  00334A  6E24               	movwf	___lldiv@counter,c
  4306  00334C  D006               	goto	l1895
  4307  00334E  90D8               	bcf	status,0,c
  4308  003350  361C               	rlcf	___lldiv@divisor,f,c
  4309  003352  361D               	rlcf	___lldiv@divisor+1,f,c
  4310  003354  361E               	rlcf	___lldiv@divisor+2,f,c
  4311  003356  361F               	rlcf	___lldiv@divisor+3,f,c
  4312  003358  2A24               	incf	___lldiv@counter,f,c
  4313  00335A                     l1895:
  4314  00335A  AE1F               	btfss	___lldiv@divisor+3,7,c
  4315  00335C  D7F8               	goto	l1896
  4316  00335E                     u8290:
  4317  00335E  90D8               	bcf	status,0,c
  4318  003360  3620               	rlcf	___lldiv@quotient,f,c
  4319  003362  3621               	rlcf	___lldiv@quotient+1,f,c
  4320  003364  3622               	rlcf	___lldiv@quotient+2,f,c
  4321  003366  3623               	rlcf	___lldiv@quotient+3,f,c
  4322  003368  501C               	movf	___lldiv@divisor,w,c
  4323  00336A  5C18               	subwf	___lldiv@dividend,w,c
  4324  00336C  501D               	movf	___lldiv@divisor+1,w,c
  4325  00336E  5819               	subwfb	___lldiv@dividend+1,w,c
  4326  003370  501E               	movf	___lldiv@divisor+2,w,c
  4327  003372  581A               	subwfb	___lldiv@dividend+2,w,c
  4328  003374  501F               	movf	___lldiv@divisor+3,w,c
  4329  003376  581B               	subwfb	___lldiv@dividend+3,w,c
  4330  003378  A0D8               	btfss	status,0,c
  4331  00337A  D009               	goto	l1899
  4332  00337C  501C               	movf	___lldiv@divisor,w,c
  4333  00337E  5E18               	subwf	___lldiv@dividend,f,c
  4334  003380  501D               	movf	___lldiv@divisor+1,w,c
  4335  003382  5A19               	subwfb	___lldiv@dividend+1,f,c
  4336  003384  501E               	movf	___lldiv@divisor+2,w,c
  4337  003386  5A1A               	subwfb	___lldiv@dividend+2,f,c
  4338  003388  501F               	movf	___lldiv@divisor+3,w,c
  4339  00338A  5A1B               	subwfb	___lldiv@dividend+3,f,c
  4340  00338C  8020               	bsf	___lldiv@quotient,0,c
  4341  00338E                     l1899:
  4342  00338E  90D8               	bcf	status,0,c
  4343  003390  321F               	rrcf	___lldiv@divisor+3,f,c
  4344  003392  321E               	rrcf	___lldiv@divisor+2,f,c
  4345  003394  321D               	rrcf	___lldiv@divisor+1,f,c
  4346  003396  321C               	rrcf	___lldiv@divisor,f,c
  4347  003398  2E24               	decfsz	___lldiv@counter,f,c
  4348  00339A  D7E1               	goto	u8290
  4349  00339C                     l1900:
  4350  00339C  C020  F018         	movff	___lldiv@quotient,?___lldiv
  4351  0033A0  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  4352  0033A4  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  4353  0033A8  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  4354  0033AC  0012               	return		;funcret
  4355  0033AE                     __end_of___lldiv:
  4356                           	opt stack 0
  4357                           tosu	equ	0xFFF
  4358                           tosh	equ	0xFFE
  4359                           tosl	equ	0xFFD
  4360                           pclath	equ	0xFFA
  4361                           tblptru	equ	0xFF8
  4362                           tblptrh	equ	0xFF7
  4363                           tblptrl	equ	0xFF6
  4364                           tablat	equ	0xFF5
  4365                           prodh	equ	0xFF4
  4366                           prodl	equ	0xFF3
  4367                           postinc0	equ	0xFEE
  4368                           plusw0	equ	0xFEB
  4369                           wreg	equ	0xFE8
  4370                           postdec1	equ	0xFE5
  4371                           fsr1l	equ	0xFE1
  4372                           indf2	equ	0xFDF
  4373                           postinc2	equ	0xFDE
  4374                           plusw2	equ	0xFDB
  4375                           fsr2h	equ	0xFDA
  4376                           fsr2l	equ	0xFD9
  4377                           status	equ	0xFD8
  4378                           
  4379 ;; *************** function _GetMcuFwVersion *****************
  4380 ;; Defined at:
  4381 ;;		line 14 in file "SystemStatus.c"
  4382 ;; Parameters:    Size  Location     Type
  4383 ;;		None
  4384 ;; Auto vars:     Size  Location     Type
  4385 ;;  TxMsg          18    4[BANK0 ] unsigned char [18]
  4386 ;;  compileData     4    0[BANK0 ] unsigned long 
  4387 ;; Return value:  Size  Location     Type
  4388 ;;                  1    wreg      void 
  4389 ;; Registers used:
  4390 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4391 ;; Tracked objects:
  4392 ;;		On entry : 0/0
  4393 ;;		On exit  : 0/0
  4394 ;;		Unchanged: 0/0
  4395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4396 ;;      Params:         0       0       0       0       0       0       0
  4397 ;;      Locals:         0      26       0       0       0       0       0
  4398 ;;      Temps:          7       0       0       0       0       0       0
  4399 ;;      Totals:         7      26       0       0       0       0       0
  4400 ;;Total ram usage:       33 bytes
  4401 ;; Hardware stack levels used:    1
  4402 ;; Hardware stack levels required when called:    6
  4403 ;; This function calls:
  4404 ;;		_WriteUartMessage
  4405 ;;		_ZeroArray
  4406 ;;		___wmul
  4407 ;;		_crc8
  4408 ;; This function is called by:
  4409 ;;		_GroupStatusAndVersion
  4410 ;; This function uses a non-reentrant model
  4411 ;;
  4412                           
  4413                           	psect	text14
  4414  0006A6                     __ptext14:
  4415                           	opt stack 0
  4416  0006A6                     _GetMcuFwVersion:
  4417                           	opt stack 22
  4418                           
  4419                           ;SystemStatus.c: 16: uint32_t compileData = 0x0;
  4420                           
  4421                           ;incstack = 0
  4422  0006A6  0E00               	movlw	0
  4423  0006A8  0100               	movlb	0	; () banked
  4424  0006AA  6F60               	movwf	GetMcuFwVersion@compileData& (0+255),b
  4425  0006AC  0E00               	movlw	0
  4426  0006AE  6F61               	movwf	(GetMcuFwVersion@compileData+1)& (0+255),b
  4427  0006B0  0E00               	movlw	0
  4428  0006B2  6F62               	movwf	(GetMcuFwVersion@compileData+2)& (0+255),b
  4429  0006B4  0E00               	movlw	0
  4430  0006B6  6F63               	movwf	(GetMcuFwVersion@compileData+3)& (0+255),b
  4431                           
  4432                           ; BSR set to: 0
  4433                           ;SystemStatus.c: 19: char TxMsg[(13) + (0x4) + 1];
  4434                           ;SystemStatus.c: 20: ZeroArray(TxMsg, (13) + (0x4) + 1);
  4435  0006B8  0E64               	movlw	low GetMcuFwVersion@TxMsg
  4436  0006BA  6E20               	movwf	ZeroArray@array,c
  4437  0006BC  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4438  0006BE  6E21               	movwf	ZeroArray@array+1,c
  4439  0006C0  0E00               	movlw	0
  4440  0006C2  6E23               	movwf	ZeroArray@size+1,c
  4441  0006C4  0E12               	movlw	18
  4442  0006C6  6E22               	movwf	ZeroArray@size,c
  4443  0006C8  EC95  F020         	call	_ZeroArray	;wreg free
  4444                           
  4445                           ;SystemStatus.c: 23: TxMsg[(0)] = (0x24);
  4446  0006CC  0E24               	movlw	36
  4447  0006CE  0100               	movlb	0	; () banked
  4448  0006D0  6F64               	movwf	GetMcuFwVersion@TxMsg& (0+255),b
  4449                           
  4450                           ; BSR set to: 0
  4451                           ;SystemStatus.c: 24: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4452  0006D2  0E02               	movlw	2
  4453  0006D4  6F65               	movwf	(GetMcuFwVersion@TxMsg+1)& (0+255),b
  4454                           
  4455                           ; BSR set to: 0
  4456                           ;SystemStatus.c: 25: TxMsg[(2)] = STATUS_GET_MCU_FW_VERSION;
  4457  0006D6  0E22               	movlw	34
  4458  0006D8  6F66               	movwf	(GetMcuFwVersion@TxMsg+2)& (0+255),b
  4459                           
  4460                           ; BSR set to: 0
  4461                           ;SystemStatus.c: 26: TxMsg[(3)] = (13);
  4462  0006DA  0E0D               	movlw	13
  4463  0006DC  6F67               	movwf	(GetMcuFwVersion@TxMsg+3)& (0+255),b
  4464                           
  4465                           ; BSR set to: 0
  4466                           ;SystemStatus.c: 29: TxMsg[(0x4) + 0] = (( ("Mar 21 2018"[ 7] - '0') * 1000 + ("Mar 21 2
      +                          018"[ 8] - '0') * 100 + ("Mar 21 2018"[ 9] - '0') * 10 + ("Mar 21 2018"[10] - '0') ) & 0
      +                          xFF00) >> 8;
  4467  0006DE  0ED0               	movlw	208
  4468  0006E0  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4469  0006E2  0EFF               	movlw	255
  4470  0006E4  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4471  0006E6  0E97               	movlw	low (STR_1+7)
  4472  0006E8  6EF6               	movwf	tblptrl,c
  4473  0006EA  0E06               	movlw	high (STR_1+7)
  4474  0006EC  6EF7               	movwf	tblptrh,c
  4475  0006EE                     	if	0	;tblptru may be non-zero
  4476  0006EE                     	endif
  4477  0006EE                     	if	0	;tblptru may be non-zero
  4478  0006EE                     	endif
  4479  0006EE  0008               	tblrd		*
  4480  0006F0  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4481  0006F4  0ED0               	movlw	208
  4482  0006F6  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4483  0006F8  6E18               	movwf	___wmul@multiplier,c
  4484  0006FA  6A19               	clrf	___wmul@multiplier+1,c
  4485  0006FC  0EFF               	movlw	255
  4486  0006FE  2219               	addwfc	___wmul@multiplier+1,f,c
  4487  000700  0E03               	movlw	3
  4488  000702  6E1B               	movwf	___wmul@multiplicand+1,c
  4489  000704  0EE8               	movlw	232
  4490  000706  6E1A               	movwf	___wmul@multiplicand,c
  4491  000708  ECFC  F01F         	call	___wmul	;wreg free
  4492  00070C  0E9A               	movlw	low (STR_1+10)
  4493  00070E  6EF6               	movwf	tblptrl,c
  4494  000710  0E06               	movlw	high (STR_1+10)
  4495  000712  6EF7               	movwf	tblptrh,c
  4496  000714                     	if	0	;tblptru may be non-zero
  4497  000714                     	endif
  4498  000714                     	if	0	;tblptru may be non-zero
  4499  000714                     	endif
  4500  000714  0008               	tblrd		*
  4501  000716  50F5               	movf	tablat,w,c
  4502  000718  6E27               	movwf	(??_GetMcuFwVersion+3)& (0+255),c
  4503  00071A  6A28               	clrf	(??_GetMcuFwVersion+4)& (0+255),c
  4504  00071C  5018               	movf	?___wmul,w,c
  4505  00071E  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4506  000720  5019               	movf	?___wmul+1,w,c
  4507  000722  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4508  000724  0E98               	movlw	low (STR_1+8)
  4509  000726  6EF6               	movwf	tblptrl,c
  4510  000728  0E06               	movlw	high (STR_1+8)
  4511  00072A  6EF7               	movwf	tblptrh,c
  4512  00072C                     	if	0	;tblptru may be non-zero
  4513  00072C                     	endif
  4514  00072C                     	if	0	;tblptru may be non-zero
  4515  00072C                     	endif
  4516  00072C  0008               	tblrd		*
  4517  00072E  CFF5 F029          	movff	tablat,??_GetMcuFwVersion+5
  4518  000732  0ED0               	movlw	208
  4519  000734  2429               	addwf	??_GetMcuFwVersion+5,w,c
  4520  000736  6E18               	movwf	___wmul@multiplier,c
  4521  000738  6A19               	clrf	___wmul@multiplier+1,c
  4522  00073A  0EFF               	movlw	255
  4523  00073C  2219               	addwfc	___wmul@multiplier+1,f,c
  4524  00073E  0E00               	movlw	0
  4525  000740  6E1B               	movwf	___wmul@multiplicand+1,c
  4526  000742  0E64               	movlw	100
  4527  000744  6E1A               	movwf	___wmul@multiplicand,c
  4528  000746  ECFC  F01F         	call	___wmul	;wreg free
  4529  00074A  5018               	movf	?___wmul,w,c
  4530  00074C  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4531  00074E  5019               	movf	?___wmul+1,w,c
  4532  000750  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4533  000752  0E99               	movlw	low (STR_1+9)
  4534  000754  6EF6               	movwf	tblptrl,c
  4535  000756  0E06               	movlw	high (STR_1+9)
  4536  000758  6EF7               	movwf	tblptrh,c
  4537  00075A                     	if	0	;tblptru may be non-zero
  4538  00075A                     	endif
  4539  00075A                     	if	0	;tblptru may be non-zero
  4540  00075A                     	endif
  4541  00075A  0008               	tblrd		*
  4542  00075C  CFF5 F02A          	movff	tablat,??_GetMcuFwVersion+6
  4543  000760  0ED0               	movlw	208
  4544  000762  242A               	addwf	??_GetMcuFwVersion+6,w,c
  4545  000764  6E18               	movwf	___wmul@multiplier,c
  4546  000766  6A19               	clrf	___wmul@multiplier+1,c
  4547  000768  0EFF               	movlw	255
  4548  00076A  2219               	addwfc	___wmul@multiplier+1,f,c
  4549  00076C  0E00               	movlw	0
  4550  00076E  6E1B               	movwf	___wmul@multiplicand+1,c
  4551  000770  0E0A               	movlw	10
  4552  000772  6E1A               	movwf	___wmul@multiplicand,c
  4553  000774  ECFC  F01F         	call	___wmul	;wreg free
  4554  000778  5018               	movf	?___wmul,w,c
  4555  00077A  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4556  00077C  5019               	movf	?___wmul+1,w,c
  4557  00077E  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4558  000780  5024               	movf	??_GetMcuFwVersion,w,c
  4559  000782  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4560  000784  5025               	movf	??_GetMcuFwVersion+1,w,c
  4561  000786  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4562  000788  C028  F027         	movff	??_GetMcuFwVersion+4,??_GetMcuFwVersion+3
  4563  00078C  6A28               	clrf	??_GetMcuFwVersion+4,c
  4564  00078E  5027               	movf	??_GetMcuFwVersion+3,w,c
  4565  000790  0100               	movlb	0	; () banked
  4566  000792  6F68               	movwf	(GetMcuFwVersion@TxMsg+4)& (0+255),b
  4567                           
  4568                           ; BSR set to: 0
  4569                           ;SystemStatus.c: 30: TxMsg[(0x4) + 1] = ( ("Mar 21 2018"[ 7] - '0') * 1000 + ("Mar 21 20
      +                          18"[ 8] - '0') * 100 + ("Mar 21 2018"[ 9] - '0') * 10 + ("Mar 21 2018"[10] - '0') ) & 0x
      +                          FF;
  4570  000794  0E9A               	movlw	low (STR_1+10)
  4571  000796  6EF6               	movwf	tblptrl,c
  4572  000798  0E06               	movlw	high (STR_1+10)
  4573  00079A  6EF7               	movwf	tblptrh,c
  4574  00079C                     	if	0	;tblptru may be non-zero
  4575  00079C                     	endif
  4576  00079C                     	if	0	;tblptru may be non-zero
  4577  00079C                     	endif
  4578  00079C  0008               	tblrd		*
  4579  00079E  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4580  0007A2  0E99               	movlw	low (STR_1+9)
  4581  0007A4  6EF6               	movwf	tblptrl,c
  4582  0007A6  0E06               	movlw	high (STR_1+9)
  4583  0007A8  6EF7               	movwf	tblptrh,c
  4584  0007AA                     	if	0	;tblptru may be non-zero
  4585  0007AA                     	endif
  4586  0007AA                     	if	0	;tblptru may be non-zero
  4587  0007AA                     	endif
  4588  0007AA  0008               	tblrd		*
  4589  0007AC  50F5               	movf	tablat,w,c
  4590  0007AE  0FD0               	addlw	208
  4591  0007B0  0D0A               	mullw	10
  4592  0007B2  CFF3 F025          	movff	prodl,??_GetMcuFwVersion+1
  4593  0007B6  0E98               	movlw	low (STR_1+8)
  4594  0007B8  6EF6               	movwf	tblptrl,c
  4595  0007BA  0E06               	movlw	high (STR_1+8)
  4596  0007BC  6EF7               	movwf	tblptrh,c
  4597  0007BE                     	if	0	;tblptru may be non-zero
  4598  0007BE                     	endif
  4599  0007BE                     	if	0	;tblptru may be non-zero
  4600  0007BE                     	endif
  4601  0007BE  0008               	tblrd		*
  4602  0007C0  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4603  0007C4  0ED0               	movlw	208
  4604  0007C6  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4605  0007C8  6E18               	movwf	___wmul@multiplier,c
  4606  0007CA  6A19               	clrf	___wmul@multiplier+1,c
  4607  0007CC  0EFF               	movlw	255
  4608  0007CE  2219               	addwfc	___wmul@multiplier+1,f,c
  4609  0007D0  0E00               	movlw	0
  4610  0007D2  6E1B               	movwf	___wmul@multiplicand+1,c
  4611  0007D4  0E64               	movlw	100
  4612  0007D6  6E1A               	movwf	___wmul@multiplicand,c
  4613  0007D8  ECFC  F01F         	call	___wmul	;wreg free
  4614  0007DC  0E97               	movlw	low (STR_1+7)
  4615  0007DE  6EF6               	movwf	tblptrl,c
  4616  0007E0  0E06               	movlw	high (STR_1+7)
  4617  0007E2  6EF7               	movwf	tblptrh,c
  4618  0007E4                     	if	0	;tblptru may be non-zero
  4619  0007E4                     	endif
  4620  0007E4                     	if	0	;tblptru may be non-zero
  4621  0007E4                     	endif
  4622  0007E4  0008               	tblrd		*
  4623  0007E6  50F5               	movf	tablat,w,c
  4624  0007E8  0FD0               	addlw	208
  4625  0007EA  0DE8               	mullw	232
  4626  0007EC  50F3               	movf	prodl,w,c
  4627  0007EE  2418               	addwf	?___wmul,w,c
  4628  0007F0  2425               	addwf	??_GetMcuFwVersion+1,w,c
  4629  0007F2  2424               	addwf	??_GetMcuFwVersion,w,c
  4630  0007F4  0FD0               	addlw	208
  4631  0007F6  0100               	movlb	0	; () banked
  4632  0007F8  6F69               	movwf	(GetMcuFwVersion@TxMsg+5)& (0+255),b
  4633                           
  4634                           ; BSR set to: 0
  4635                           ;SystemStatus.c: 33: TxMsg[(0x4) + 2] = "Mar 21 2018"[0];
  4636  0007FA  0E90               	movlw	low STR_1
  4637  0007FC  6EF6               	movwf	tblptrl,c
  4638  0007FE                     	if	1	;There is more than 1 active tblptr byte
  4639  0007FE  0E06               	movlw	high STR_1
  4640  000800  6EF7               	movwf	tblptrh,c
  4641  000802                     	endif
  4642  000802                     	if	0	;There are less than 3 active tblptr bytes
  4643  000802                     	endif
  4644  000802  0008               	tblrd		*
  4645  000804  CFF5 F06A          	movff	tablat,GetMcuFwVersion@TxMsg+6
  4646                           
  4647                           ; BSR set to: 0
  4648                           ;SystemStatus.c: 34: TxMsg[(0x4) + 3] = "Mar 21 2018"[1];
  4649  000808  0E91               	movlw	low (STR_1+1)
  4650  00080A  6EF6               	movwf	tblptrl,c
  4651  00080C  0E06               	movlw	high (STR_1+1)
  4652  00080E  6EF7               	movwf	tblptrh,c
  4653  000810                     	if	0	;tblptru may be non-zero
  4654  000810                     	endif
  4655  000810                     	if	0	;tblptru may be non-zero
  4656  000810                     	endif
  4657  000810  0008               	tblrd		*
  4658  000812  CFF5 F06B          	movff	tablat,GetMcuFwVersion@TxMsg+7
  4659                           
  4660                           ; BSR set to: 0
  4661                           ;SystemStatus.c: 35: TxMsg[(0x4) + 4] = "Mar 21 2018"[2];
  4662  000816  0E92               	movlw	low (STR_1+2)
  4663  000818  6EF6               	movwf	tblptrl,c
  4664  00081A  0E06               	movlw	high (STR_1+2)
  4665  00081C  6EF7               	movwf	tblptrh,c
  4666  00081E                     	if	0	;tblptru may be non-zero
  4667  00081E                     	endif
  4668  00081E                     	if	0	;tblptru may be non-zero
  4669  00081E                     	endif
  4670  00081E  0008               	tblrd		*
  4671  000820  CFF5 F06C          	movff	tablat,GetMcuFwVersion@TxMsg+8
  4672                           
  4673                           ; BSR set to: 0
  4674                           ;SystemStatus.c: 38: TxMsg[(0x4) + 5] = (( (("Mar 21 2018"[4] >= '0') ? ("Mar 21 2018"[4
      +                          ] - '0') * 10 : 0) + ("Mar 21 2018"[5] - '0') ) & 0xFF00) >> 8;
  4675  000824  0E94               	movlw	low (STR_1+4)
  4676  000826  6EF6               	movwf	tblptrl,c
  4677  000828  0E06               	movlw	high (STR_1+4)
  4678  00082A  6EF7               	movwf	tblptrh,c
  4679  00082C                     	if	0	;tblptru may be non-zero
  4680  00082C                     	endif
  4681  00082C                     	if	0	;tblptru may be non-zero
  4682  00082C                     	endif
  4683  00082C  0E30               	movlw	48
  4684  00082E  0008               	tblrd		*
  4685  000830  60F5               	cpfslt	tablat,c
  4686  000832  D005               	goto	l1447
  4687                           
  4688                           ; BSR set to: 0
  4689  000834  0E00               	movlw	0
  4690  000836  6F77               	movwf	(_GetMcuFwVersion$2639+1)& (0+255),b
  4691  000838  0E00               	movlw	0
  4692  00083A  6F76               	movwf	_GetMcuFwVersion$2639& (0+255),b
  4693  00083C  D017               	goto	l1449
  4694  00083E                     l1447:
  4695                           
  4696                           ; BSR set to: 0
  4697                           
  4698                           ; BSR set to: 0
  4699  00083E  0E94               	movlw	low (STR_1+4)
  4700  000840  6EF6               	movwf	tblptrl,c
  4701  000842  0E06               	movlw	high (STR_1+4)
  4702  000844  6EF7               	movwf	tblptrh,c
  4703  000846                     	if	0	;tblptru may be non-zero
  4704  000846                     	endif
  4705  000846                     	if	0	;tblptru may be non-zero
  4706  000846                     	endif
  4707  000846  0008               	tblrd		*
  4708  000848  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4709  00084C  0ED0               	movlw	208
  4710  00084E  2424               	addwf	??_GetMcuFwVersion,w,c
  4711  000850  6E18               	movwf	___wmul@multiplier,c
  4712  000852  6A19               	clrf	___wmul@multiplier+1,c
  4713  000854  0EFF               	movlw	255
  4714  000856  2219               	addwfc	___wmul@multiplier+1,f,c
  4715  000858  0E00               	movlw	0
  4716  00085A  6E1B               	movwf	___wmul@multiplicand+1,c
  4717  00085C  0E0A               	movlw	10
  4718  00085E  6E1A               	movwf	___wmul@multiplicand,c
  4719  000860  ECFC  F01F         	call	___wmul	;wreg free
  4720  000864  C018  F076         	movff	?___wmul,_GetMcuFwVersion$2639
  4721  000868  C019  F077         	movff	?___wmul+1,_GetMcuFwVersion$2639+1
  4722  00086C                     l1449:
  4723  00086C  0ED0               	movlw	208
  4724  00086E  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4725  000870  0EFF               	movlw	255
  4726  000872  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4727  000874  0E95               	movlw	low (STR_1+5)
  4728  000876  6EF6               	movwf	tblptrl,c
  4729  000878  0E06               	movlw	high (STR_1+5)
  4730  00087A  6EF7               	movwf	tblptrh,c
  4731  00087C                     	if	0	;tblptru may be non-zero
  4732  00087C                     	endif
  4733  00087C                     	if	0	;tblptru may be non-zero
  4734  00087C                     	endif
  4735  00087C  0008               	tblrd		*
  4736  00087E  50F5               	movf	tablat,w,c
  4737  000880  0100               	movlb	0	; () banked
  4738  000882  2576               	addwf	_GetMcuFwVersion$2639& (0+255),w,b
  4739  000884  6E26               	movwf	(??_GetMcuFwVersion+2)& (0+255),c
  4740  000886  0E00               	movlw	0
  4741  000888  2177               	addwfc	(_GetMcuFwVersion$2639+1)& (0+255),w,b
  4742  00088A  6E27               	movwf	(??_GetMcuFwVersion+3)& (0+255),c
  4743  00088C  5024               	movf	??_GetMcuFwVersion,w,c
  4744  00088E  2626               	addwf	??_GetMcuFwVersion+2,f,c
  4745  000890  5025               	movf	??_GetMcuFwVersion+1,w,c
  4746  000892  2227               	addwfc	??_GetMcuFwVersion+3,f,c
  4747  000894  C027  F026         	movff	??_GetMcuFwVersion+3,??_GetMcuFwVersion+2
  4748  000898  6A27               	clrf	??_GetMcuFwVersion+3,c
  4749  00089A  5026               	movf	??_GetMcuFwVersion+2,w,c
  4750  00089C  6F6D               	movwf	(GetMcuFwVersion@TxMsg+9)& (0+255),b
  4751                           
  4752                           ; BSR set to: 0
  4753                           ;SystemStatus.c: 39: TxMsg[(0x4) + 6] = ( (("Mar 21 2018"[4] >= '0') ? ("Mar 21 2018"[4]
      +                           - '0') * 10 : 0) + ("Mar 21 2018"[5] - '0') ) & 0xFF;
  4754  00089E  0E94               	movlw	low (STR_1+4)
  4755  0008A0  6EF6               	movwf	tblptrl,c
  4756  0008A2  0E06               	movlw	high (STR_1+4)
  4757  0008A4  6EF7               	movwf	tblptrh,c
  4758  0008A6                     	if	0	;tblptru may be non-zero
  4759  0008A6                     	endif
  4760  0008A6                     	if	0	;tblptru may be non-zero
  4761  0008A6                     	endif
  4762  0008A6  0E30               	movlw	48
  4763  0008A8  0008               	tblrd		*
  4764  0008AA  60F5               	cpfslt	tablat,c
  4765  0008AC  D005               	goto	l1451
  4766                           
  4767                           ; BSR set to: 0
  4768  0008AE  0E00               	movlw	0
  4769  0008B0  6F79               	movwf	(_GetMcuFwVersion$2643+1)& (0+255),b
  4770  0008B2  0E00               	movlw	0
  4771  0008B4  6F78               	movwf	_GetMcuFwVersion$2643& (0+255),b
  4772  0008B6  D017               	goto	l1453
  4773  0008B8                     l1451:
  4774                           
  4775                           ; BSR set to: 0
  4776                           
  4777                           ; BSR set to: 0
  4778  0008B8  0E94               	movlw	low (STR_1+4)
  4779  0008BA  6EF6               	movwf	tblptrl,c
  4780  0008BC  0E06               	movlw	high (STR_1+4)
  4781  0008BE  6EF7               	movwf	tblptrh,c
  4782  0008C0                     	if	0	;tblptru may be non-zero
  4783  0008C0                     	endif
  4784  0008C0                     	if	0	;tblptru may be non-zero
  4785  0008C0                     	endif
  4786  0008C0  0008               	tblrd		*
  4787  0008C2  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4788  0008C6  0ED0               	movlw	208
  4789  0008C8  2424               	addwf	??_GetMcuFwVersion,w,c
  4790  0008CA  6E18               	movwf	___wmul@multiplier,c
  4791  0008CC  6A19               	clrf	___wmul@multiplier+1,c
  4792  0008CE  0EFF               	movlw	255
  4793  0008D0  2219               	addwfc	___wmul@multiplier+1,f,c
  4794  0008D2  0E00               	movlw	0
  4795  0008D4  6E1B               	movwf	___wmul@multiplicand+1,c
  4796  0008D6  0E0A               	movlw	10
  4797  0008D8  6E1A               	movwf	___wmul@multiplicand,c
  4798  0008DA  ECFC  F01F         	call	___wmul	;wreg free
  4799  0008DE  C018  F078         	movff	?___wmul,_GetMcuFwVersion$2643
  4800  0008E2  C019  F079         	movff	?___wmul+1,_GetMcuFwVersion$2643+1
  4801  0008E6                     l1453:
  4802  0008E6  0E95               	movlw	low (STR_1+5)
  4803  0008E8  6EF6               	movwf	tblptrl,c
  4804  0008EA  0E06               	movlw	high (STR_1+5)
  4805  0008EC  6EF7               	movwf	tblptrh,c
  4806  0008EE                     	if	0	;tblptru may be non-zero
  4807  0008EE                     	endif
  4808  0008EE                     	if	0	;tblptru may be non-zero
  4809  0008EE                     	endif
  4810  0008EE  0008               	tblrd		*
  4811  0008F0  50F5               	movf	tablat,w,c
  4812  0008F2  0100               	movlb	0	; () banked
  4813  0008F4  2578               	addwf	_GetMcuFwVersion$2643& (0+255),w,b
  4814  0008F6  0FD0               	addlw	208
  4815  0008F8  6F6E               	movwf	(GetMcuFwVersion@TxMsg+10)& (0+255),b
  4816                           
  4817                           ; BSR set to: 0
  4818                           ;SystemStatus.c: 42: TxMsg[(0x4) + 7] = ((("18:03:23"[0] - '0') * 10 + "18:03:23"[1] - '
      +                          0') & 0xFF00) >> 8;
  4819  0008FA  0ED0               	movlw	208
  4820  0008FC  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4821  0008FE  0EFF               	movlw	255
  4822  000900  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4823  000902  0E9C               	movlw	low STR_18
  4824  000904  6EF6               	movwf	tblptrl,c
  4825  000906                     	if	1	;There is more than 1 active tblptr byte
  4826  000906  0E06               	movlw	high STR_18
  4827  000908  6EF7               	movwf	tblptrh,c
  4828  00090A                     	endif
  4829  00090A                     	if	0	;There are less than 3 active tblptr bytes
  4830  00090A                     	endif
  4831  00090A  0008               	tblrd		*
  4832  00090C  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4833  000910  0ED0               	movlw	208
  4834  000912  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4835  000914  6E18               	movwf	___wmul@multiplier,c
  4836  000916  6A19               	clrf	___wmul@multiplier+1,c
  4837  000918  0EFF               	movlw	255
  4838  00091A  2219               	addwfc	___wmul@multiplier+1,f,c
  4839  00091C  0E00               	movlw	0
  4840  00091E  6E1B               	movwf	___wmul@multiplicand+1,c
  4841  000920  0E0A               	movlw	10
  4842  000922  6E1A               	movwf	___wmul@multiplicand,c
  4843  000924  ECFC  F01F         	call	___wmul	;wreg free
  4844  000928  0E9D               	movlw	low (STR_18+1)
  4845  00092A  6EF6               	movwf	tblptrl,c
  4846  00092C  0E06               	movlw	high (STR_18+1)
  4847  00092E  6EF7               	movwf	tblptrh,c
  4848  000930                     	if	0	;tblptru may be non-zero
  4849  000930                     	endif
  4850  000930                     	if	0	;tblptru may be non-zero
  4851  000930                     	endif
  4852  000930  0008               	tblrd		*
  4853  000932  50F5               	movf	tablat,w,c
  4854  000934  2618               	addwf	?___wmul,f,c
  4855  000936  0E00               	movlw	0
  4856  000938  2219               	addwfc	?___wmul+1,f,c
  4857  00093A  5024               	movf	??_GetMcuFwVersion,w,c
  4858  00093C  2618               	addwf	?___wmul,f,c
  4859  00093E  5025               	movf	??_GetMcuFwVersion+1,w,c
  4860  000940  2219               	addwfc	?___wmul+1,f,c
  4861  000942  C019  F018         	movff	?___wmul+1,?___wmul
  4862  000946  6A19               	clrf	?___wmul+1,c
  4863  000948  5018               	movf	?___wmul,w,c
  4864  00094A  0100               	movlb	0	; () banked
  4865  00094C  6F6F               	movwf	(GetMcuFwVersion@TxMsg+11)& (0+255),b
  4866                           
  4867                           ; BSR set to: 0
  4868                           ;SystemStatus.c: 43: TxMsg[(0x4) + 8] = (("18:03:23"[0] - '0') * 10 + "18:03:23"[1] - '0
      +                          ') & 0xFF;
  4869  00094E  0E9D               	movlw	low (STR_18+1)
  4870  000950  6EF6               	movwf	tblptrl,c
  4871  000952  0E06               	movlw	high (STR_18+1)
  4872  000954  6EF7               	movwf	tblptrh,c
  4873  000956                     	if	0	;tblptru may be non-zero
  4874  000956                     	endif
  4875  000956                     	if	0	;tblptru may be non-zero
  4876  000956                     	endif
  4877  000956  0008               	tblrd		*
  4878  000958  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4879  00095C  0E9C               	movlw	low STR_18
  4880  00095E  6EF6               	movwf	tblptrl,c
  4881  000960                     	if	1	;There is more than 1 active tblptr byte
  4882  000960  0E06               	movlw	high STR_18
  4883  000962  6EF7               	movwf	tblptrh,c
  4884  000964                     	endif
  4885  000964                     	if	0	;There are less than 3 active tblptr bytes
  4886  000964                     	endif
  4887  000964  0008               	tblrd		*
  4888  000966  50F5               	movf	tablat,w,c
  4889  000968  0FD0               	addlw	208
  4890  00096A  0D0A               	mullw	10
  4891  00096C  50F3               	movf	prodl,w,c
  4892  00096E  2424               	addwf	??_GetMcuFwVersion,w,c
  4893  000970  0FD0               	addlw	208
  4894  000972  6F70               	movwf	(GetMcuFwVersion@TxMsg+12)& (0+255),b
  4895                           
  4896                           ; BSR set to: 0
  4897                           ;SystemStatus.c: 46: TxMsg[(0x4) + 9] = ((("18:03:23"[3] - '0') * 10 + "18:03:23"[4] - '
      +                          0') & 0xFF00) >> 8;
  4898  000974  0ED0               	movlw	208
  4899  000976  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4900  000978  0EFF               	movlw	255
  4901  00097A  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4902  00097C  0E9F               	movlw	low (STR_18+3)
  4903  00097E  6EF6               	movwf	tblptrl,c
  4904  000980  0E06               	movlw	high (STR_18+3)
  4905  000982  6EF7               	movwf	tblptrh,c
  4906  000984                     	if	0	;tblptru may be non-zero
  4907  000984                     	endif
  4908  000984                     	if	0	;tblptru may be non-zero
  4909  000984                     	endif
  4910  000984  0008               	tblrd		*
  4911  000986  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4912  00098A  0ED0               	movlw	208
  4913  00098C  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4914  00098E  6E18               	movwf	___wmul@multiplier,c
  4915  000990  6A19               	clrf	___wmul@multiplier+1,c
  4916  000992  0EFF               	movlw	255
  4917  000994  2219               	addwfc	___wmul@multiplier+1,f,c
  4918  000996  0E00               	movlw	0
  4919  000998  6E1B               	movwf	___wmul@multiplicand+1,c
  4920  00099A  0E0A               	movlw	10
  4921  00099C  6E1A               	movwf	___wmul@multiplicand,c
  4922  00099E  ECFC  F01F         	call	___wmul	;wreg free
  4923  0009A2  0EA0               	movlw	low (STR_18+4)
  4924  0009A4  6EF6               	movwf	tblptrl,c
  4925  0009A6  0E06               	movlw	high (STR_18+4)
  4926  0009A8  6EF7               	movwf	tblptrh,c
  4927  0009AA                     	if	0	;tblptru may be non-zero
  4928  0009AA                     	endif
  4929  0009AA                     	if	0	;tblptru may be non-zero
  4930  0009AA                     	endif
  4931  0009AA  0008               	tblrd		*
  4932  0009AC  50F5               	movf	tablat,w,c
  4933  0009AE  2618               	addwf	?___wmul,f,c
  4934  0009B0  0E00               	movlw	0
  4935  0009B2  2219               	addwfc	?___wmul+1,f,c
  4936  0009B4  5024               	movf	??_GetMcuFwVersion,w,c
  4937  0009B6  2618               	addwf	?___wmul,f,c
  4938  0009B8  5025               	movf	??_GetMcuFwVersion+1,w,c
  4939  0009BA  2219               	addwfc	?___wmul+1,f,c
  4940  0009BC  C019  F018         	movff	?___wmul+1,?___wmul
  4941  0009C0  6A19               	clrf	?___wmul+1,c
  4942  0009C2  5018               	movf	?___wmul,w,c
  4943  0009C4  0100               	movlb	0	; () banked
  4944  0009C6  6F71               	movwf	(GetMcuFwVersion@TxMsg+13)& (0+255),b
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;SystemStatus.c: 47: TxMsg[(0x4) + 10] = (("18:03:23"[3] - '0') * 10 + "18:03:23"[4] - '
      +                          0') & 0xFF;
  4948  0009C8  0EA0               	movlw	low (STR_18+4)
  4949  0009CA  6EF6               	movwf	tblptrl,c
  4950  0009CC  0E06               	movlw	high (STR_18+4)
  4951  0009CE  6EF7               	movwf	tblptrh,c
  4952  0009D0                     	if	0	;tblptru may be non-zero
  4953  0009D0                     	endif
  4954  0009D0                     	if	0	;tblptru may be non-zero
  4955  0009D0                     	endif
  4956  0009D0  0008               	tblrd		*
  4957  0009D2  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4958  0009D6  0E9F               	movlw	low (STR_18+3)
  4959  0009D8  6EF6               	movwf	tblptrl,c
  4960  0009DA  0E06               	movlw	high (STR_18+3)
  4961  0009DC  6EF7               	movwf	tblptrh,c
  4962  0009DE                     	if	0	;tblptru may be non-zero
  4963  0009DE                     	endif
  4964  0009DE                     	if	0	;tblptru may be non-zero
  4965  0009DE                     	endif
  4966  0009DE  0008               	tblrd		*
  4967  0009E0  50F5               	movf	tablat,w,c
  4968  0009E2  0FD0               	addlw	208
  4969  0009E4  0D0A               	mullw	10
  4970  0009E6  50F3               	movf	prodl,w,c
  4971  0009E8  2424               	addwf	??_GetMcuFwVersion,w,c
  4972  0009EA  0FD0               	addlw	208
  4973  0009EC  6F72               	movwf	(GetMcuFwVersion@TxMsg+14)& (0+255),b
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;SystemStatus.c: 49: TxMsg[(0x4) + 11] = ((("18:03:23"[6] - '0') * 10 + "18:03:23"[7] - 
      +                          '0') & 0xFF00) >> 8;
  4977  0009EE  0ED0               	movlw	208
  4978  0009F0  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4979  0009F2  0EFF               	movlw	255
  4980  0009F4  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4981  0009F6  0EA2               	movlw	low (STR_18+6)
  4982  0009F8  6EF6               	movwf	tblptrl,c
  4983  0009FA  0E06               	movlw	high (STR_18+6)
  4984  0009FC  6EF7               	movwf	tblptrh,c
  4985  0009FE                     	if	0	;tblptru may be non-zero
  4986  0009FE                     	endif
  4987  0009FE                     	if	0	;tblptru may be non-zero
  4988  0009FE                     	endif
  4989  0009FE  0008               	tblrd		*
  4990  000A00  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4991  000A04  0ED0               	movlw	208
  4992  000A06  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4993  000A08  6E18               	movwf	___wmul@multiplier,c
  4994  000A0A  6A19               	clrf	___wmul@multiplier+1,c
  4995  000A0C  0EFF               	movlw	255
  4996  000A0E  2219               	addwfc	___wmul@multiplier+1,f,c
  4997  000A10  0E00               	movlw	0
  4998  000A12  6E1B               	movwf	___wmul@multiplicand+1,c
  4999  000A14  0E0A               	movlw	10
  5000  000A16  6E1A               	movwf	___wmul@multiplicand,c
  5001  000A18  ECFC  F01F         	call	___wmul	;wreg free
  5002  000A1C  0EA3               	movlw	low (STR_18+7)
  5003  000A1E  6EF6               	movwf	tblptrl,c
  5004  000A20  0E06               	movlw	high (STR_18+7)
  5005  000A22  6EF7               	movwf	tblptrh,c
  5006  000A24                     	if	0	;tblptru may be non-zero
  5007  000A24                     	endif
  5008  000A24                     	if	0	;tblptru may be non-zero
  5009  000A24                     	endif
  5010  000A24  0008               	tblrd		*
  5011  000A26  50F5               	movf	tablat,w,c
  5012  000A28  2618               	addwf	?___wmul,f,c
  5013  000A2A  0E00               	movlw	0
  5014  000A2C  2219               	addwfc	?___wmul+1,f,c
  5015  000A2E  5024               	movf	??_GetMcuFwVersion,w,c
  5016  000A30  2618               	addwf	?___wmul,f,c
  5017  000A32  5025               	movf	??_GetMcuFwVersion+1,w,c
  5018  000A34  2219               	addwfc	?___wmul+1,f,c
  5019  000A36  C019  F018         	movff	?___wmul+1,?___wmul
  5020  000A3A  6A19               	clrf	?___wmul+1,c
  5021  000A3C  5018               	movf	?___wmul,w,c
  5022  000A3E  0100               	movlb	0	; () banked
  5023  000A40  6F73               	movwf	(GetMcuFwVersion@TxMsg+15)& (0+255),b
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;SystemStatus.c: 50: TxMsg[(0x4) + 12] = (("18:03:23"[6] - '0') * 10 + "18:03:23"[7] - '
      +                          0') & 0xFF;
  5027  000A42  0EA3               	movlw	low (STR_18+7)
  5028  000A44  6EF6               	movwf	tblptrl,c
  5029  000A46  0E06               	movlw	high (STR_18+7)
  5030  000A48  6EF7               	movwf	tblptrh,c
  5031  000A4A                     	if	0	;tblptru may be non-zero
  5032  000A4A                     	endif
  5033  000A4A                     	if	0	;tblptru may be non-zero
  5034  000A4A                     	endif
  5035  000A4A  0008               	tblrd		*
  5036  000A4C  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  5037  000A50  0EA2               	movlw	low (STR_18+6)
  5038  000A52  6EF6               	movwf	tblptrl,c
  5039  000A54  0E06               	movlw	high (STR_18+6)
  5040  000A56  6EF7               	movwf	tblptrh,c
  5041  000A58                     	if	0	;tblptru may be non-zero
  5042  000A58                     	endif
  5043  000A58                     	if	0	;tblptru may be non-zero
  5044  000A58                     	endif
  5045  000A58  0008               	tblrd		*
  5046  000A5A  50F5               	movf	tablat,w,c
  5047  000A5C  0FD0               	addlw	208
  5048  000A5E  0D0A               	mullw	10
  5049  000A60  50F3               	movf	prodl,w,c
  5050  000A62  2424               	addwf	??_GetMcuFwVersion,w,c
  5051  000A64  0FD0               	addlw	208
  5052  000A66  6F74               	movwf	(GetMcuFwVersion@TxMsg+16)& (0+255),b
  5053                           
  5054                           ; BSR set to: 0
  5055                           ;SystemStatus.c: 52: TxMsg[(13) + (0x4)] = crc8(TxMsg, (13) + (0x4));
  5056  000A68  0E64               	movlw	low GetMcuFwVersion@TxMsg
  5057  000A6A  6E18               	movwf	crc8@dataArray,c
  5058  000A6C  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5059  000A6E  6E19               	movwf	crc8@dataArray+1,c
  5060  000A70  0E00               	movlw	0
  5061  000A72  6E1B               	movwf	crc8@dataSize+1,c
  5062  000A74  0E11               	movlw	17
  5063  000A76  6E1A               	movwf	crc8@dataSize,c
  5064  000A78  EC0B  F01D         	call	_crc8	;wreg free
  5065  000A7C  0100               	movlb	0	; () banked
  5066  000A7E  6F75               	movwf	(GetMcuFwVersion@TxMsg+17)& (0+255),b
  5067                           
  5068                           ;SystemStatus.c: 54: WriteUartMessage(TxMsg, (13) + (0x4) + 1);
  5069  000A80  0E64               	movlw	low GetMcuFwVersion@TxMsg
  5070  000A82  6E19               	movwf	WriteUartMessage@dataBuf,c
  5071  000A84  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5072  000A86  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5073  000A88  0E00               	movlw	0
  5074  000A8A  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5075  000A8C  0E12               	movlw	18
  5076  000A8E  6E1B               	movwf	WriteUartMessage@dataSize,c
  5077  000A90  EC9D  F01E         	call	_WriteUartMessage	;wreg free
  5078  000A94  0012               	return		;funcret
  5079  000A96                     __end_of_GetMcuFwVersion:
  5080                           	opt stack 0
  5081                           tosu	equ	0xFFF
  5082                           tosh	equ	0xFFE
  5083                           tosl	equ	0xFFD
  5084                           pclath	equ	0xFFA
  5085                           tblptru	equ	0xFF8
  5086                           tblptrh	equ	0xFF7
  5087                           tblptrl	equ	0xFF6
  5088                           tablat	equ	0xFF5
  5089                           prodh	equ	0xFF4
  5090                           prodl	equ	0xFF3
  5091                           postinc0	equ	0xFEE
  5092                           plusw0	equ	0xFEB
  5093                           wreg	equ	0xFE8
  5094                           postdec1	equ	0xFE5
  5095                           fsr1l	equ	0xFE1
  5096                           indf2	equ	0xFDF
  5097                           postinc2	equ	0xFDE
  5098                           plusw2	equ	0xFDB
  5099                           fsr2h	equ	0xFDA
  5100                           fsr2l	equ	0xFD9
  5101                           status	equ	0xFD8
  5102                           
  5103 ;; *************** function _FlashReadUart *****************
  5104 ;; Defined at:
  5105 ;;		line 62 in file "FlashApp.c"
  5106 ;; Parameters:    Size  Location     Type
  5107 ;;  data            2   43[COMRAM] PTR unsigned char 
  5108 ;; Auto vars:     Size  Location     Type
  5109 ;;  idx             2   91[BANK0 ] int 
  5110 ;;  TxMsg          69   12[BANK0 ] unsigned char [69]
  5111 ;;  numOfSampleT    2   95[BANK0 ] int 
  5112 ;;  offset          2   93[BANK0 ] int 
  5113 ;;  j               2   89[BANK0 ] int 
  5114 ;; Return value:  Size  Location     Type
  5115 ;;                  1    wreg      void 
  5116 ;; Registers used:
  5117 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5118 ;; Tracked objects:
  5119 ;;		On entry : 0/0
  5120 ;;		On exit  : 0/0
  5121 ;;		Unchanged: 0/0
  5122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5123 ;;      Params:         2       0       0       0       0       0       0
  5124 ;;      Locals:         0      85       0       0       0       0       0
  5125 ;;      Temps:          0      12       0       0       0       0       0
  5126 ;;      Totals:         2      97       0       0       0       0       0
  5127 ;;Total ram usage:       99 bytes
  5128 ;; Hardware stack levels used:    1
  5129 ;; Hardware stack levels required when called:    7
  5130 ;; This function calls:
  5131 ;;		_FLASH_IsWriteDone
  5132 ;;		_FLASH_ReadByte
  5133 ;;		_SendAckMessage
  5134 ;;		_WriteUartMessage
  5135 ;;		_ZeroArray
  5136 ;;		_abs
  5137 ;;		_crc8
  5138 ;; This function is called by:
  5139 ;;		_GroupFlashMemory
  5140 ;; This function uses a non-reentrant model
  5141 ;;
  5142                           
  5143                           	psect	text15
  5144  000A96                     __ptext15:
  5145                           	opt stack 0
  5146  000A96                     _FlashReadUart:
  5147                           	opt stack 21
  5148                           
  5149                           ;FlashApp.c: 65: int j=0;
  5150                           
  5151                           ;incstack = 0
  5152  000A96  0E00               	movlw	0
  5153  000A98  0100               	movlb	0	; () banked
  5154  000A9A  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  5155  000A9C  0E00               	movlw	0
  5156  000A9E  6FB9               	movwf	FlashReadUart@j& (0+255),b
  5157                           
  5158                           ;FlashApp.c: 66: int offset = 0;
  5159  000AA0  0E00               	movlw	0
  5160  000AA2  6FBE               	movwf	(FlashReadUart@offset+1)& (0+255),b
  5161  000AA4  0E00               	movlw	0
  5162  000AA6  6FBD               	movwf	FlashReadUart@offset& (0+255),b
  5163                           
  5164                           ; BSR set to: 0
  5165                           ;FlashApp.c: 68: int numOfSampleToRead = data[0];
  5166  000AA8  C02C  FFD9         	movff	FlashReadUart@data,fsr2l
  5167  000AAC  C02D  FFDA         	movff	FlashReadUart@data+1,fsr2h
  5168  000AB0  50DF               	movf	indf2,w,c
  5169  000AB2  6F60               	movwf	??_FlashReadUart& (0+255),b
  5170  000AB4  5160               	movf	??_FlashReadUart& (0+255),w,b
  5171  000AB6  6FBF               	movwf	FlashReadUart@numOfSampleToRead& (0+255),b
  5172  000AB8  6BC0               	clrf	(FlashReadUart@numOfSampleToRead+1)& (0+255),b
  5173                           
  5174                           ; BSR set to: 0
  5175                           ;FlashApp.c: 69: char TxMsg[(64) + (0x4) + 1];
  5176                           ;FlashApp.c: 70: ZeroArray(TxMsg, (64) + (0x4) + 1);
  5177  000ABA  0E6C               	movlw	low FlashReadUart@TxMsg
  5178  000ABC  6E20               	movwf	ZeroArray@array,c
  5179  000ABE  0E00               	movlw	high FlashReadUart@TxMsg
  5180  000AC0  6E21               	movwf	ZeroArray@array+1,c
  5181  000AC2  0E00               	movlw	0
  5182  000AC4  6E23               	movwf	ZeroArray@size+1,c
  5183  000AC6  0E45               	movlw	69
  5184  000AC8  6E22               	movwf	ZeroArray@size,c
  5185  000ACA  EC95  F020         	call	_ZeroArray	;wreg free
  5186                           
  5187                           ;FlashApp.c: 73: if (FLASH_IsWriteDone() == 0)
  5188  000ACE  EC3B  F021         	call	_FLASH_IsWriteDone	;wreg free
  5189  000AD2  0900               	iorlw	0
  5190  000AD4  B4D8               	btfsc	status,2,c
  5191  000AD6  0012               	return	
  5192                           
  5193                           ;FlashApp.c: 76: }
  5194                           ;FlashApp.c: 78: if (numOfReadSamples)
  5195                           
  5196                           ;FlashApp.c: 74: {
  5197                           ;FlashApp.c: 75: return;
  5198  000AD8  503C               	movf	_numOfReadSamples,w,c
  5199  000ADA  103D               	iorwf	_numOfReadSamples+1,w,c
  5200  000ADC  103E               	iorwf	_numOfReadSamples+2,w,c
  5201  000ADE  103F               	iorwf	_numOfReadSamples+3,w,c
  5202  000AE0  B4D8               	btfsc	status,2,c
  5203  000AE2  D0EE               	goto	l306
  5204                           
  5205                           ;FlashApp.c: 79: {
  5206                           ;FlashApp.c: 80: if (numOfValidateSamples)
  5207  000AE4  5031               	movf	_numOfValidateSamples,w,c
  5208  000AE6  1032               	iorwf	_numOfValidateSamples+1,w,c
  5209  000AE8  1033               	iorwf	_numOfValidateSamples+2,w,c
  5210  000AEA  1034               	iorwf	_numOfValidateSamples+3,w,c
  5211  000AEC  B4D8               	btfsc	status,2,c
  5212  000AEE  D09A               	goto	l307
  5213                           
  5214                           ;FlashApp.c: 81: {
  5215                           ;FlashApp.c: 82: offset = numOfValidateSamples - (numOfValidateSamples > numOfSampleToRe
      +                          ad)? numOfValidateSamples : numOfSampleToRead;
  5216  000AF0  C0BF  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  5217  000AF4  C0C0  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  5218  000AF8  0E00               	movlw	0
  5219  000AFA  0100               	movlb	0	; () banked
  5220  000AFC  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5221  000AFE  0EFF               	movlw	255
  5222  000B00  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  5223  000B02  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  5224  000B04  5031               	movf	_numOfValidateSamples,w,c
  5225  000B06  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  5226  000B08  5032               	movf	_numOfValidateSamples+1,w,c
  5227  000B0A  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  5228  000B0C  5033               	movf	_numOfValidateSamples+2,w,c
  5229  000B0E  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  5230  000B10  5034               	movf	_numOfValidateSamples+3,w,c
  5231  000B12  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  5232  000B14  B0D8               	btfsc	status,0,c
  5233  000B16  D002               	goto	u8450
  5234  000B18  0E01               	movlw	1
  5235  000B1A  D001               	goto	u8460
  5236  000B1C                     u8450:
  5237  000B1C  0E00               	movlw	0
  5238  000B1E                     u8460:
  5239  000B1E  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  5240  000B20  6B65               	clrf	(??_FlashReadUart+5)& (0+255),b
  5241  000B22  6B66               	clrf	(??_FlashReadUart+6)& (0+255),b
  5242  000B24  6B67               	clrf	(??_FlashReadUart+7)& (0+255),b
  5243  000B26  1F64               	comf	(??_FlashReadUart+4)& (0+255),f,b
  5244  000B28  1F65               	comf	(??_FlashReadUart+5)& (0+255),f,b
  5245  000B2A  1F66               	comf	(??_FlashReadUart+6)& (0+255),f,b
  5246  000B2C  1F67               	comf	(??_FlashReadUart+7)& (0+255),f,b
  5247  000B2E  2B64               	incf	(??_FlashReadUart+4)& (0+255),f,b
  5248  000B30  0E00               	movlw	0
  5249  000B32  2365               	addwfc	(??_FlashReadUart+5)& (0+255),f,b
  5250  000B34  2366               	addwfc	(??_FlashReadUart+6)& (0+255),f,b
  5251  000B36  2367               	addwfc	(??_FlashReadUart+7)& (0+255),f,b
  5252  000B38  5031               	movf	_numOfValidateSamples,w,c
  5253  000B3A  2564               	addwf	(??_FlashReadUart+4)& (0+255),w,b
  5254  000B3C  6F68               	movwf	(??_FlashReadUart+8)& (0+255),b
  5255  000B3E  5032               	movf	_numOfValidateSamples+1,w,c
  5256  000B40  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  5257  000B42  6F69               	movwf	(??_FlashReadUart+9)& (0+255),b
  5258  000B44  5033               	movf	_numOfValidateSamples+2,w,c
  5259  000B46  2166               	addwfc	(??_FlashReadUart+6)& (0+255),w,b
  5260  000B48  6F6A               	movwf	(??_FlashReadUart+10)& (0+255),b
  5261  000B4A  5034               	movf	_numOfValidateSamples+3,w,c
  5262  000B4C  2167               	addwfc	(??_FlashReadUart+7)& (0+255),w,b
  5263  000B4E  6F6B               	movwf	(??_FlashReadUart+11)& (0+255),b
  5264  000B50  5168               	movf	(??_FlashReadUart+8)& (0+255),w,b
  5265  000B52  1169               	iorwf	(??_FlashReadUart+9)& (0+255),w,b
  5266  000B54  116A               	iorwf	(??_FlashReadUart+10)& (0+255),w,b
  5267  000B56  116B               	iorwf	(??_FlashReadUart+11)& (0+255),w,b
  5268  000B58  A4D8               	btfss	status,2,c
  5269  000B5A  D00A               	goto	l309
  5270                           
  5271                           ; BSR set to: 0
  5272  000B5C  C0BF  F0B1         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$582
  5273  000B60  C0C0  F0B2         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$582+1
  5274  000B64  0E00               	movlw	0
  5275  000B66  BFB2               	btfsc	(_FlashReadUart$582+1)& (0+255),7,b
  5276  000B68  0EFF               	movlw	-1
  5277  000B6A  6FB3               	movwf	(_FlashReadUart$582+2)& (0+255),b
  5278  000B6C  6FB4               	movwf	(_FlashReadUart$582+3)& (0+255),b
  5279  000B6E  D008               	goto	l311
  5280  000B70                     l309:
  5281                           
  5282                           ; BSR set to: 0
  5283  000B70  C031  F0B1         	movff	_numOfValidateSamples,_FlashReadUart$582
  5284  000B74  C032  F0B2         	movff	_numOfValidateSamples+1,_FlashReadUart$582+1
  5285  000B78  C033  F0B3         	movff	_numOfValidateSamples+2,_FlashReadUart$582+2
  5286  000B7C  C034  F0B4         	movff	_numOfValidateSamples+3,_FlashReadUart$582+3
  5287  000B80                     l311:
  5288                           
  5289                           ; BSR set to: 0
  5290  000B80  C0B1  F0BD         	movff	_FlashReadUart$582,FlashReadUart@offset
  5291  000B84  C0B2  F0BE         	movff	_FlashReadUart$582+1,FlashReadUart@offset+1
  5292                           
  5293                           ; BSR set to: 0
  5294                           ;FlashApp.c: 83: if(offset < 0)
  5295  000B88  AFBE               	btfss	(FlashReadUart@offset+1)& (0+255),7,b
  5296  000B8A  D091               	goto	l314
  5297                           
  5298                           ; BSR set to: 0
  5299                           ;FlashApp.c: 84: {
  5300                           ;FlashApp.c: 85: if (abs(offset) > numOfReadSamples)
  5301  000B8C  C0BD  F018         	movff	FlashReadUart@offset,abs@a
  5302  000B90  C0BE  F019         	movff	FlashReadUart@offset+1,abs@a+1
  5303  000B94  ECC1  F01F         	call	_abs	;wreg free
  5304  000B98  C018  F060         	movff	?_abs,??_FlashReadUart
  5305  000B9C  C019  F061         	movff	?_abs+1,??_FlashReadUart+1
  5306  000BA0  0E00               	movlw	0
  5307  000BA2  0100               	movlb	0	; () banked
  5308  000BA4  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5309  000BA6  0EFF               	movlw	255
  5310  000BA8  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  5311  000BAA  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  5312  000BAC  5160               	movf	??_FlashReadUart& (0+255),w,b
  5313  000BAE  5C3C               	subwf	_numOfReadSamples,w,c
  5314  000BB0  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  5315  000BB2  583D               	subwfb	_numOfReadSamples+1,w,c
  5316  000BB4  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  5317  000BB6  583E               	subwfb	_numOfReadSamples+2,w,c
  5318  000BB8  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  5319  000BBA  583F               	subwfb	_numOfReadSamples+3,w,c
  5320  000BBC  B0D8               	btfsc	status,0,c
  5321  000BBE  D016               	goto	l313
  5322                           
  5323                           ; BSR set to: 0
  5324                           ;FlashApp.c: 86: {
  5325                           ;FlashApp.c: 87: numOfSampleToRead += offset + numOfReadSamples;
  5326  000BC0  503C               	movf	_numOfReadSamples,w,c
  5327  000BC2  25BD               	addwf	FlashReadUart@offset& (0+255),w,b
  5328  000BC4  6F60               	movwf	??_FlashReadUart& (0+255),b
  5329  000BC6  503D               	movf	_numOfReadSamples+1,w,c
  5330  000BC8  21BE               	addwfc	(FlashReadUart@offset+1)& (0+255),w,b
  5331  000BCA  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  5332  000BCC  5160               	movf	??_FlashReadUart& (0+255),w,b
  5333  000BCE  27BF               	addwf	FlashReadUart@numOfSampleToRead& (0+255),f,b
  5334  000BD0  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  5335  000BD2  23C0               	addwfc	(FlashReadUart@numOfSampleToRead+1)& (0+255),f,b
  5336                           
  5337                           ; BSR set to: 0
  5338                           ;FlashApp.c: 88: offset = numOfReadSamples * (-1);
  5339  000BD4  C03C  F060         	movff	_numOfReadSamples,??_FlashReadUart
  5340  000BD8  C03D  F061         	movff	_numOfReadSamples+1,??_FlashReadUart+1
  5341  000BDC  1F60               	comf	??_FlashReadUart& (0+255),f,b
  5342  000BDE  1F61               	comf	(??_FlashReadUart+1)& (0+255),f,b
  5343  000BE0  4B60               	infsnz	??_FlashReadUart& (0+255),f,b
  5344  000BE2  2B61               	incf	(??_FlashReadUart+1)& (0+255),f,b
  5345  000BE4  C060  F0BD         	movff	??_FlashReadUart,FlashReadUart@offset
  5346  000BE8  C061  F0BE         	movff	??_FlashReadUart+1,FlashReadUart@offset+1
  5347  000BEC                     l313:
  5348                           
  5349                           ; BSR set to: 0
  5350                           ;FlashApp.c: 90: }
  5351                           ;FlashApp.c: 92: readAddress += offset * (64);
  5352  000BEC  C0BD  F060         	movff	FlashReadUart@offset,??_FlashReadUart
  5353  000BF0  C0BE  F061         	movff	FlashReadUart@offset+1,??_FlashReadUart+1
  5354  000BF4  0E06               	movlw	6
  5355  000BF6                     u8505:
  5356  000BF6  90D8               	bcf	status,0,c
  5357  000BF8  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  5358  000BFA  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  5359  000BFC  2EE8               	decfsz	wreg,f,c
  5360  000BFE  D7FB               	goto	u8505
  5361  000C00  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  5362  000C04  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  5363  000C08  0E00               	movlw	0
  5364  000C0A  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  5365  000C0C  0EFF               	movlw	255
  5366  000C0E  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  5367  000C10  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  5368  000C12  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  5369  000C14  27FA               	addwf	_readAddress& (0+255),f,b
  5370  000C16  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  5371  000C18  23FB               	addwfc	(_readAddress+1)& (0+255),f,b
  5372  000C1A  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  5373  000C1C  23FC               	addwfc	(_readAddress+2)& (0+255),f,b
  5374  000C1E  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  5375  000C20  23FD               	addwfc	(_readAddress+3)& (0+255),f,b
  5376                           
  5377                           ; BSR set to: 0
  5378                           ;FlashApp.c: 93: }
  5379                           ;FlashApp.c: 94: }
  5380  000C22  D045               	goto	l314
  5381  000C24                     l307:
  5382                           
  5383                           ;FlashApp.c: 95: else
  5384                           ;FlashApp.c: 96: {
  5385                           ;FlashApp.c: 97: numOfSampleToRead = (numOfReadSamples > numOfSampleToRead)? numOfSample
      +                          ToRead : numOfReadSamples;
  5386                           
  5387                           ; BSR set to: 0
  5388  000C24  C0BF  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  5389  000C28  C0C0  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  5390  000C2C  0E00               	movlw	0
  5391  000C2E  0100               	movlb	0	; () banked
  5392  000C30  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5393  000C32  0EFF               	movlw	255
  5394  000C34  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  5395  000C36  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  5396  000C38  503C               	movf	_numOfReadSamples,w,c
  5397  000C3A  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  5398  000C3C  503D               	movf	_numOfReadSamples+1,w,c
  5399  000C3E  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  5400  000C40  503E               	movf	_numOfReadSamples+2,w,c
  5401  000C42  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  5402  000C44  503F               	movf	_numOfReadSamples+3,w,c
  5403  000C46  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  5404  000C48  A0D8               	btfss	status,0,c
  5405  000C4A  D009               	goto	l316
  5406                           
  5407                           ; BSR set to: 0
  5408  000C4C  C03C  F0B5         	movff	_numOfReadSamples,_FlashReadUart$583
  5409  000C50  C03D  F0B6         	movff	_numOfReadSamples+1,_FlashReadUart$583+1
  5410  000C54  C03E  F0B7         	movff	_numOfReadSamples+2,_FlashReadUart$583+2
  5411  000C58  C03F  F0B8         	movff	_numOfReadSamples+3,_FlashReadUart$583+3
  5412  000C5C  D009               	goto	l318
  5413  000C5E                     l316:
  5414                           
  5415                           ; BSR set to: 0
  5416                           
  5417                           ; BSR set to: 0
  5418  000C5E  C0BF  F0B5         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$583
  5419  000C62  C0C0  F0B6         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$583+1
  5420  000C66  0E00               	movlw	0
  5421  000C68  BFB6               	btfsc	(_FlashReadUart$583+1)& (0+255),7,b
  5422  000C6A  0EFF               	movlw	-1
  5423  000C6C  6FB7               	movwf	(_FlashReadUart$583+2)& (0+255),b
  5424  000C6E  6FB8               	movwf	(_FlashReadUart$583+3)& (0+255),b
  5425  000C70                     l318:
  5426                           
  5427                           ; BSR set to: 0
  5428                           
  5429                           ; BSR set to: 0
  5430  000C70  C0B5  F0BF         	movff	_FlashReadUart$583,FlashReadUart@numOfSampleToRead
  5431  000C74  C0B6  F0C0         	movff	_FlashReadUart$583+1,FlashReadUart@numOfSampleToRead+1
  5432                           
  5433                           ; BSR set to: 0
  5434                           ;FlashApp.c: 98: readAddress -= numOfSampleToRead * (64);
  5435  000C78  C0BF  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  5436  000C7C  C0C0  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  5437  000C80  0E06               	movlw	6
  5438  000C82                     u8525:
  5439  000C82  90D8               	bcf	status,0,c
  5440  000C84  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  5441  000C86  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  5442  000C88  2EE8               	decfsz	wreg,f,c
  5443  000C8A  D7FB               	goto	u8525
  5444  000C8C  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  5445  000C90  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  5446  000C94  0E00               	movlw	0
  5447  000C96  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  5448  000C98  0EFF               	movlw	255
  5449  000C9A  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  5450  000C9C  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  5451  000C9E  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  5452  000CA0  5FFA               	subwf	_readAddress& (0+255),f,b
  5453  000CA2  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  5454  000CA4  5BFB               	subwfb	(_readAddress+1)& (0+255),f,b
  5455  000CA6  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  5456  000CA8  5BFC               	subwfb	(_readAddress+2)& (0+255),f,b
  5457  000CAA  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  5458  000CAC  5BFD               	subwfb	(_readAddress+3)& (0+255),f,b
  5459  000CAE                     l314:
  5460                           
  5461                           ; BSR set to: 0
  5462                           ;FlashApp.c: 99: }
  5463                           ;FlashApp.c: 101: if (readAddress <= 0x4500)
  5464                           
  5465                           ; BSR set to: 0
  5466  000CAE  51FD               	movf	(_readAddress+3)& (0+255),w,b
  5467  000CB0  11FC               	iorwf	(_readAddress+2)& (0+255),w,b
  5468  000CB2  E13E               	bnz	l8113
  5469  000CB4  05FA               	decf	_readAddress& (0+255),w,b
  5470  000CB6  0E45               	movlw	69
  5471  000CB8  59FB               	subwfb	(_readAddress+1)& (0+255),w,b
  5472  000CBA  B0D8               	btfsc	status,0,c
  5473  000CBC  D039               	goto	l324
  5474  000CBE  D023               	goto	u8560
  5475  000CC0                     l306:
  5476                           
  5477                           ;FlashApp.c: 106: else
  5478                           ;FlashApp.c: 107: {
  5479                           ;FlashApp.c: 108: if ((isReWriteDone) && (readAddress <= writeAddress))
  5480                           
  5481                           ; BSR set to: 0
  5482  000CC0  0100               	movlb	0	; () banked
  5483  000CC2  51EB               	movf	_isReWriteDone& (0+255),w,b
  5484  000CC4  B4D8               	btfsc	status,2,c
  5485  000CC6  D028               	goto	l321
  5486                           
  5487                           ; BSR set to: 0
  5488  000CC8  51FA               	movf	_readAddress& (0+255),w,b
  5489  000CCA  5C40               	subwf	_writeAddress,w,c
  5490  000CCC  51FB               	movf	(_readAddress+1)& (0+255),w,b
  5491  000CCE  5841               	subwfb	_writeAddress+1,w,c
  5492  000CD0  51FC               	movf	(_readAddress+2)& (0+255),w,b
  5493  000CD2  5842               	subwfb	_writeAddress+2,w,c
  5494  000CD4  51FD               	movf	(_readAddress+3)& (0+255),w,b
  5495  000CD6  5843               	subwfb	_writeAddress+3,w,c
  5496  000CD8  A0D8               	btfss	status,0,c
  5497  000CDA  D01E               	goto	l321
  5498                           
  5499                           ; BSR set to: 0
  5500                           ;FlashApp.c: 109: {
  5501                           ;FlashApp.c: 110: readAddress = writeAddress + (64);
  5502  000CDC  0E40               	movlw	64
  5503  000CDE  2440               	addwf	_writeAddress,w,c
  5504  000CE0  6FFA               	movwf	_readAddress& (0+255),b
  5505  000CE2  0E00               	movlw	0
  5506  000CE4  2041               	addwfc	_writeAddress+1,w,c
  5507  000CE6  6FFB               	movwf	(_readAddress+1)& (0+255),b
  5508  000CE8  0E00               	movlw	0
  5509  000CEA  2042               	addwfc	_writeAddress+2,w,c
  5510  000CEC  6FFC               	movwf	(_readAddress+2)& (0+255),b
  5511  000CEE  0E00               	movlw	0
  5512  000CF0  2043               	addwfc	_writeAddress+3,w,c
  5513  000CF2  6FFD               	movwf	(_readAddress+3)& (0+255),b
  5514                           
  5515                           ;FlashApp.c: 111: if (readAddress >= 0x7FF0)
  5516  000CF4  51FD               	movf	(_readAddress+3)& (0+255),w,b
  5517  000CF6  11FC               	iorwf	(_readAddress+2)& (0+255),w,b
  5518  000CF8  E106               	bnz	u8560
  5519  000CFA  0EF0               	movlw	240
  5520  000CFC  5DFA               	subwf	_readAddress& (0+255),w,b
  5521  000CFE  0E7F               	movlw	127
  5522  000D00  59FB               	subwfb	(_readAddress+1)& (0+255),w,b
  5523  000D02  A0D8               	btfss	status,0,c
  5524  000D04  D015               	goto	l324
  5525  000D06                     u8560:
  5526                           
  5527                           ; BSR set to: 0
  5528                           ;FlashApp.c: 112: {
  5529                           ;FlashApp.c: 113: readAddress = 0x4500;
  5530  000D06  0E00               	movlw	0
  5531  000D08  6FFA               	movwf	_readAddress& (0+255),b
  5532  000D0A  0E45               	movlw	69
  5533  000D0C  6FFB               	movwf	(_readAddress+1)& (0+255),b
  5534  000D0E  0E00               	movlw	0
  5535  000D10  6FFC               	movwf	(_readAddress+2)& (0+255),b
  5536  000D12  0E00               	movlw	0
  5537  000D14  6FFD               	movwf	(_readAddress+3)& (0+255),b
  5538                           
  5539                           ; BSR set to: 0
  5540                           ;FlashApp.c: 114: }
  5541                           ;FlashApp.c: 116: }
  5542  000D16  D00C               	goto	l324
  5543  000D18                     l321:
  5544                           
  5545                           ; BSR set to: 0
  5546                           ;FlashApp.c: 117: else
  5547                           ;FlashApp.c: 118: {
  5548                           ;FlashApp.c: 119: if(numOfValidateSamples == 0)
  5549                           
  5550                           ; BSR set to: 0
  5551  000D18  5031               	movf	_numOfValidateSamples,w,c
  5552  000D1A  1032               	iorwf	_numOfValidateSamples+1,w,c
  5553  000D1C  1033               	iorwf	_numOfValidateSamples+2,w,c
  5554  000D1E  1034               	iorwf	_numOfValidateSamples+3,w,c
  5555  000D20  A4D8               	btfss	status,2,c
  5556  000D22  D006               	goto	l324
  5557                           
  5558                           ; BSR set to: 0
  5559                           ;FlashApp.c: 120: {
  5560                           ;FlashApp.c: 121: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_NO_SAMPLE_YET
      +                          );
  5561  000D24  0E55               	movlw	85
  5562  000D26  6E24               	movwf	SendAckMessage@inRequest,c
  5563  000D28  0E05               	movlw	5
  5564  000D2A  ECE2  F01C         	call	_SendAckMessage
  5565                           
  5566                           ;FlashApp.c: 122: return;
  5567  000D2E  0012               	return	
  5568  000D30                     l324:
  5569  000D30                     l8113:
  5570                           
  5571                           ;FlashApp.c: 123: }
  5572                           ;FlashApp.c: 125: }
  5573                           ;FlashApp.c: 126: }
  5574                           ;FlashApp.c: 129: TxMsg[(0)] = (0x24);
  5575  000D30  0E24               	movlw	36
  5576  000D32  0100               	movlb	0	; () banked
  5577  000D34  6F6C               	movwf	FlashReadUart@TxMsg& (0+255),b
  5578                           
  5579                           ;FlashApp.c: 130: TxMsg[(1)] = FLASH_MSG;
  5580  000D36  0E05               	movlw	5
  5581  000D38  6F6D               	movwf	(FlashReadUart@TxMsg+1)& (0+255),b
  5582                           
  5583                           ;FlashApp.c: 131: TxMsg[(2)] = FLASH_SEND_RAW_DATA;
  5584  000D3A  0E54               	movlw	84
  5585  000D3C  6F6E               	movwf	(FlashReadUart@TxMsg+2)& (0+255),b
  5586                           
  5587                           ;FlashApp.c: 132: TxMsg[(3)] = (64);
  5588  000D3E  0E40               	movlw	64
  5589  000D40  6F6F               	movwf	(FlashReadUart@TxMsg+3)& (0+255),b
  5590                           
  5591                           ;FlashApp.c: 134: for (j=0; j<numOfSampleToRead; j++)
  5592  000D42  0E00               	movlw	0
  5593  000D44  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  5594  000D46  0E00               	movlw	0
  5595  000D48  6FB9               	movwf	FlashReadUart@j& (0+255),b
  5596  000D4A  D085               	goto	l325
  5597  000D4C                     
  5598                           ; BSR set to: 0
  5599                           ;FlashApp.c: 135: {
  5600                           ;FlashApp.c: 137: for(int idx = 0; idx < (64); idx++)
  5601                           
  5602                           ; BSR set to: 0
  5603  000D4C  0E00               	movlw	0
  5604  000D4E  6FBC               	movwf	(FlashReadUart@idx+1)& (0+255),b
  5605  000D50  0E00               	movlw	0
  5606  000D52  6FBB               	movwf	FlashReadUart@idx& (0+255),b
  5607  000D54                     l8117:
  5608                           
  5609                           ; BSR set to: 0
  5610  000D54  BFBC               	btfsc	(FlashReadUart@idx+1)& (0+255),7,b
  5611  000D56  D006               	goto	l327
  5612  000D58  51BC               	movf	(FlashReadUart@idx+1)& (0+255),w,b
  5613  000D5A  E12C               	bnz	l8127
  5614  000D5C  0E40               	movlw	64
  5615  000D5E  5DBB               	subwf	FlashReadUart@idx& (0+255),w,b
  5616  000D60  B0D8               	btfsc	status,0,c
  5617  000D62  D028               	goto	u8590
  5618  000D64                     l327:
  5619                           
  5620                           ; BSR set to: 0
  5621                           ;FlashApp.c: 138: {
  5622                           ;FlashApp.c: 139: TxMsg[(0x4) + idx] = FLASH_ReadByte(readAddress + idx);
  5623                           
  5624                           ; BSR set to: 0
  5625  000D64  0E04               	movlw	4
  5626  000D66  25BB               	addwf	FlashReadUart@idx& (0+255),w,b
  5627  000D68  6F60               	movwf	??_FlashReadUart& (0+255),b
  5628  000D6A  0E00               	movlw	0
  5629  000D6C  21BC               	addwfc	(FlashReadUart@idx+1)& (0+255),w,b
  5630  000D6E  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  5631  000D70  0E6C               	movlw	low FlashReadUart@TxMsg
  5632  000D72  2560               	addwf	??_FlashReadUart& (0+255),w,b
  5633  000D74  6ED9               	movwf	fsr2l,c
  5634  000D76  0E00               	movlw	high FlashReadUart@TxMsg
  5635  000D78  2161               	addwfc	(??_FlashReadUart+1)& (0+255),w,b
  5636  000D7A  6EDA               	movwf	fsr2h,c
  5637  000D7C  C0BB  F062         	movff	FlashReadUart@idx,??_FlashReadUart+2
  5638  000D80  C0BC  F063         	movff	FlashReadUart@idx+1,??_FlashReadUart+3
  5639  000D84  0E00               	movlw	0
  5640  000D86  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  5641  000D88  0EFF               	movlw	255
  5642  000D8A  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  5643  000D8C  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  5644  000D8E  51FA               	movf	_readAddress& (0+255),w,b
  5645  000D90  2562               	addwf	(??_FlashReadUart+2)& (0+255),w,b
  5646  000D92  6E18               	movwf	FLASH_ReadByte@flashAddr,c
  5647  000D94  51FB               	movf	(_readAddress+1)& (0+255),w,b
  5648  000D96  2163               	addwfc	(??_FlashReadUart+3)& (0+255),w,b
  5649  000D98  6E19               	movwf	FLASH_ReadByte@flashAddr+1,c
  5650  000D9A  51FC               	movf	(_readAddress+2)& (0+255),w,b
  5651  000D9C  2164               	addwfc	(??_FlashReadUart+4)& (0+255),w,b
  5652  000D9E  6E1A               	movwf	FLASH_ReadByte@flashAddr+2,c
  5653  000DA0  51FD               	movf	(_readAddress+3)& (0+255),w,b
  5654  000DA2  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  5655  000DA4  6E1B               	movwf	FLASH_ReadByte@flashAddr+3,c
  5656  000DA6  EC0E  F021         	call	_FLASH_ReadByte	;wreg free
  5657  000DAA  6EDF               	movwf	indf2,c
  5658  000DAC  0100               	movlb	0	; () banked
  5659  000DAE  4BBB               	infsnz	FlashReadUart@idx& (0+255),f,b
  5660  000DB0  2BBC               	incf	(FlashReadUart@idx+1)& (0+255),f,b
  5661  000DB2  D7D0               	goto	l8117
  5662  000DB4                     u8590:
  5663  000DB4                     l8127:
  5664                           
  5665                           ; BSR set to: 0
  5666                           ;FlashApp.c: 140: }
  5667                           ;FlashApp.c: 142: readAddress += (64);
  5668  000DB4  0E40               	movlw	64
  5669  000DB6  27FA               	addwf	_readAddress& (0+255),f,b
  5670  000DB8  0E00               	movlw	0
  5671  000DBA  23FB               	addwfc	(_readAddress+1)& (0+255),f,b
  5672  000DBC  23FC               	addwfc	(_readAddress+2)& (0+255),f,b
  5673  000DBE  23FD               	addwfc	(_readAddress+3)& (0+255),f,b
  5674                           
  5675                           ;FlashApp.c: 143: if (readAddress >= 0x7FF0)
  5676  000DC0  51FD               	movf	(_readAddress+3)& (0+255),w,b
  5677  000DC2  11FC               	iorwf	(_readAddress+2)& (0+255),w,b
  5678  000DC4  E106               	bnz	u8600
  5679  000DC6  0EF0               	movlw	240
  5680  000DC8  5DFA               	subwf	_readAddress& (0+255),w,b
  5681  000DCA  0E7F               	movlw	127
  5682  000DCC  59FB               	subwfb	(_readAddress+1)& (0+255),w,b
  5683  000DCE  A0D8               	btfss	status,0,c
  5684  000DD0  D008               	goto	l329
  5685  000DD2                     u8600:
  5686                           
  5687                           ; BSR set to: 0
  5688                           ;FlashApp.c: 144: {
  5689                           ;FlashApp.c: 145: readAddress = 0x4500;
  5690  000DD2  0E00               	movlw	0
  5691  000DD4  6FFA               	movwf	_readAddress& (0+255),b
  5692  000DD6  0E45               	movlw	69
  5693  000DD8  6FFB               	movwf	(_readAddress+1)& (0+255),b
  5694  000DDA  0E00               	movlw	0
  5695  000DDC  6FFC               	movwf	(_readAddress+2)& (0+255),b
  5696  000DDE  0E00               	movlw	0
  5697  000DE0  6FFD               	movwf	(_readAddress+3)& (0+255),b
  5698  000DE2                     l329:
  5699                           
  5700                           ; BSR set to: 0
  5701                           ;FlashApp.c: 146: }
  5702                           ;FlashApp.c: 147: TxMsg[(64) + (0x4)] = crc8(TxMsg, (64) + (0x4));
  5703                           
  5704                           ; BSR set to: 0
  5705  000DE2  0E6C               	movlw	low FlashReadUart@TxMsg
  5706  000DE4  6E18               	movwf	crc8@dataArray,c
  5707  000DE6  0E00               	movlw	high FlashReadUart@TxMsg
  5708  000DE8  6E19               	movwf	crc8@dataArray+1,c
  5709  000DEA  0E00               	movlw	0
  5710  000DEC  6E1B               	movwf	crc8@dataSize+1,c
  5711  000DEE  0E44               	movlw	68
  5712  000DF0  6E1A               	movwf	crc8@dataSize,c
  5713  000DF2  EC0B  F01D         	call	_crc8	;wreg free
  5714  000DF6  0100               	movlb	0	; () banked
  5715  000DF8  6FB0               	movwf	(FlashReadUart@TxMsg+68)& (0+255),b
  5716                           
  5717                           ; BSR set to: 0
  5718                           ;FlashApp.c: 149: WriteUartMessage(TxMsg, (64) + (0x4) + 1);
  5719  000DFA  0E6C               	movlw	low FlashReadUart@TxMsg
  5720  000DFC  6E19               	movwf	WriteUartMessage@dataBuf,c
  5721  000DFE  0E00               	movlw	high FlashReadUart@TxMsg
  5722  000E00  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5723  000E02  0E00               	movlw	0
  5724  000E04  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5725  000E06  0E45               	movlw	69
  5726  000E08  6E1B               	movwf	WriteUartMessage@dataSize,c
  5727  000E0A  EC9D  F01E         	call	_WriteUartMessage	;wreg free
  5728                           
  5729                           ;FlashApp.c: 151: if(numOfValidateSamples)
  5730  000E0E  5031               	movf	_numOfValidateSamples,w,c
  5731  000E10  1032               	iorwf	_numOfValidateSamples+1,w,c
  5732  000E12  1033               	iorwf	_numOfValidateSamples+2,w,c
  5733  000E14  1034               	iorwf	_numOfValidateSamples+3,w,c
  5734  000E16  B4D8               	btfsc	status,2,c
  5735  000E18  D01B               	goto	l332
  5736                           
  5737                           ;FlashApp.c: 152: {
  5738                           ;FlashApp.c: 153: if (numOfReadSamples < ((0x4500-0x7FF0)/(64)))
  5739  000E1A  0E15               	movlw	21
  5740  000E1C  5C3C               	subwf	_numOfReadSamples,w,c
  5741  000E1E  0EFF               	movlw	255
  5742  000E20  583D               	subwfb	_numOfReadSamples+1,w,c
  5743  000E22  0EFF               	movlw	255
  5744  000E24  583E               	subwfb	_numOfReadSamples+2,w,c
  5745  000E26  0EFF               	movlw	255
  5746  000E28  583F               	subwfb	_numOfReadSamples+3,w,c
  5747  000E2A  B0D8               	btfsc	status,0,c
  5748  000E2C  D006               	goto	l331
  5749                           
  5750                           ;FlashApp.c: 154: {
  5751                           ;FlashApp.c: 155: numOfReadSamples++;
  5752  000E2E  0E01               	movlw	1
  5753  000E30  263C               	addwf	_numOfReadSamples,f,c
  5754  000E32  0E00               	movlw	0
  5755  000E34  223D               	addwfc	_numOfReadSamples+1,f,c
  5756  000E36  223E               	addwfc	_numOfReadSamples+2,f,c
  5757  000E38  223F               	addwfc	_numOfReadSamples+3,f,c
  5758  000E3A                     l331:
  5759                           
  5760                           ;FlashApp.c: 156: }
  5761                           ;FlashApp.c: 157: if (numOfValidateSamples > 0)
  5762  000E3A  5031               	movf	_numOfValidateSamples,w,c
  5763  000E3C  1032               	iorwf	_numOfValidateSamples+1,w,c
  5764  000E3E  1033               	iorwf	_numOfValidateSamples+2,w,c
  5765  000E40  1034               	iorwf	_numOfValidateSamples+3,w,c
  5766  000E42  B4D8               	btfsc	status,2,c
  5767  000E44  D005               	goto	l332
  5768                           
  5769                           ;FlashApp.c: 158: {
  5770                           ;FlashApp.c: 159: numOfValidateSamples--;
  5771  000E46  0631               	decf	_numOfValidateSamples,f,c
  5772  000E48  0E00               	movlw	0
  5773  000E4A  5A32               	subwfb	_numOfValidateSamples+1,f,c
  5774  000E4C  5A33               	subwfb	_numOfValidateSamples+2,f,c
  5775  000E4E  5A34               	subwfb	_numOfValidateSamples+3,f,c
  5776  000E50                     l332:
  5777  000E50  0100               	movlb	0	; () banked
  5778  000E52  4BB9               	infsnz	FlashReadUart@j& (0+255),f,b
  5779  000E54  2BBA               	incf	(FlashReadUart@j+1)& (0+255),f,b
  5780  000E56                     l325:
  5781                           
  5782                           ; BSR set to: 0
  5783                           
  5784                           ; BSR set to: 0
  5785  000E56  51BF               	movf	FlashReadUart@numOfSampleToRead& (0+255),w,b
  5786  000E58  5DB9               	subwf	FlashReadUart@j& (0+255),w,b
  5787  000E5A  51BA               	movf	(FlashReadUart@j+1)& (0+255),w,b
  5788  000E5C  0A80               	xorlw	128
  5789  000E5E  6F60               	movwf	??_FlashReadUart& (0+255),b
  5790  000E60  51C0               	movf	(FlashReadUart@numOfSampleToRead+1)& (0+255),w,b
  5791  000E62  0A80               	xorlw	128
  5792  000E64  5960               	subwfb	??_FlashReadUart& (0+255),w,b
  5793  000E66  B0D8               	btfsc	status,0,c
  5794  000E68  0012               	return	
  5795  000E6A  D770               	goto	l326
  5796  000E6C                     __end_of_FlashReadUart:
  5797                           	opt stack 0
  5798                           tosu	equ	0xFFF
  5799                           tosh	equ	0xFFE
  5800                           tosl	equ	0xFFD
  5801                           pclath	equ	0xFFA
  5802                           tblptru	equ	0xFF8
  5803                           tblptrh	equ	0xFF7
  5804                           tblptrl	equ	0xFF6
  5805                           tablat	equ	0xFF5
  5806                           prodh	equ	0xFF4
  5807                           prodl	equ	0xFF3
  5808                           postinc0	equ	0xFEE
  5809                           plusw0	equ	0xFEB
  5810                           wreg	equ	0xFE8
  5811                           postdec1	equ	0xFE5
  5812                           fsr1l	equ	0xFE1
  5813                           indf2	equ	0xFDF
  5814                           postinc2	equ	0xFDE
  5815                           plusw2	equ	0xFDB
  5816                           fsr2h	equ	0xFDA
  5817                           fsr2l	equ	0xFD9
  5818                           status	equ	0xFD8
  5819                           
  5820 ;; *************** function _abs *****************
  5821 ;; Defined at:
  5822 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;  a               2   23[COMRAM] int 
  5825 ;; Auto vars:     Size  Location     Type
  5826 ;;		None
  5827 ;; Return value:  Size  Location     Type
  5828 ;;                  2   23[COMRAM] int 
  5829 ;; Registers used:
  5830 ;;		wreg, status,2, status,0
  5831 ;; Tracked objects:
  5832 ;;		On entry : 0/0
  5833 ;;		On exit  : 0/0
  5834 ;;		Unchanged: 0/0
  5835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5836 ;;      Params:         2       0       0       0       0       0       0
  5837 ;;      Locals:         0       0       0       0       0       0       0
  5838 ;;      Temps:          2       0       0       0       0       0       0
  5839 ;;      Totals:         4       0       0       0       0       0       0
  5840 ;;Total ram usage:        4 bytes
  5841 ;; Hardware stack levels used:    1
  5842 ;; Hardware stack levels required when called:    4
  5843 ;; This function calls:
  5844 ;;		Nothing
  5845 ;; This function is called by:
  5846 ;;		_FlashReadUart
  5847 ;; This function uses a non-reentrant model
  5848 ;;
  5849                           
  5850                           	psect	text16
  5851  003F82                     __ptext16:
  5852                           	opt stack 0
  5853  003F82                     _abs:
  5854                           	opt stack 23
  5855                           
  5856                           ;incstack = 0
  5857  003F82  AE19               	btfss	abs@a+1,7,c
  5858  003F84  D00D               	goto	l1590
  5859  003F86  C018  F01A         	movff	abs@a,??_abs
  5860  003F8A  C019  F01B         	movff	abs@a+1,??_abs+1
  5861  003F8E  1E1A               	comf	??_abs,f,c
  5862  003F90  1E1B               	comf	??_abs+1,f,c
  5863  003F92  4A1A               	infsnz	??_abs,f,c
  5864  003F94  2A1B               	incf	??_abs+1,f,c
  5865  003F96  C01A  F018         	movff	??_abs,?_abs
  5866  003F9A  C01B  F019         	movff	??_abs+1,?_abs+1
  5867  003F9E  0012               	return	
  5868  003FA0                     l1590:
  5869  003FA0  C018  F018         	movff	abs@a,?_abs
  5870  003FA4  C019  F019         	movff	abs@a+1,?_abs+1
  5871  003FA8  0012               	return		;funcret
  5872  003FAA                     __end_of_abs:
  5873                           	opt stack 0
  5874                           tosu	equ	0xFFF
  5875                           tosh	equ	0xFFE
  5876                           tosl	equ	0xFFD
  5877                           pclath	equ	0xFFA
  5878                           tblptru	equ	0xFF8
  5879                           tblptrh	equ	0xFF7
  5880                           tblptrl	equ	0xFF6
  5881                           tablat	equ	0xFF5
  5882                           prodh	equ	0xFF4
  5883                           prodl	equ	0xFF3
  5884                           postinc0	equ	0xFEE
  5885                           plusw0	equ	0xFEB
  5886                           wreg	equ	0xFE8
  5887                           postdec1	equ	0xFE5
  5888                           fsr1l	equ	0xFE1
  5889                           indf2	equ	0xFDF
  5890                           postinc2	equ	0xFDE
  5891                           plusw2	equ	0xFDB
  5892                           fsr2h	equ	0xFDA
  5893                           fsr2l	equ	0xFD9
  5894                           status	equ	0xFD8
  5895                           
  5896 ;; *************** function _FLASH_ReadByte *****************
  5897 ;; Defined at:
  5898 ;;		line 58 in file "mcc_generated_files/memory.c"
  5899 ;; Parameters:    Size  Location     Type
  5900 ;;  flashAddr       4   23[COMRAM] unsigned long 
  5901 ;; Auto vars:     Size  Location     Type
  5902 ;;		None
  5903 ;; Return value:  Size  Location     Type
  5904 ;;                  1    wreg      unsigned char 
  5905 ;; Registers used:
  5906 ;;		wreg, status,2
  5907 ;; Tracked objects:
  5908 ;;		On entry : 0/0
  5909 ;;		On exit  : 0/0
  5910 ;;		Unchanged: 0/0
  5911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5912 ;;      Params:         4       0       0       0       0       0       0
  5913 ;;      Locals:         0       0       0       0       0       0       0
  5914 ;;      Temps:          0       0       0       0       0       0       0
  5915 ;;      Totals:         4       0       0       0       0       0       0
  5916 ;;Total ram usage:        4 bytes
  5917 ;; Hardware stack levels used:    1
  5918 ;; Hardware stack levels required when called:    4
  5919 ;; This function calls:
  5920 ;;		Nothing
  5921 ;; This function is called by:
  5922 ;;		_FlashReadUart
  5923 ;;		_FLASH_ReadWord
  5924 ;;		_FLASH_WriteByte
  5925 ;; This function uses a non-reentrant model
  5926 ;;
  5927                           
  5928                           	psect	text17
  5929  00421C                     __ptext17:
  5930                           	opt stack 0
  5931  00421C                     _FLASH_ReadByte:
  5932                           	opt stack 23
  5933                           
  5934                           ;memory.c: 60: TBLPTRU = (uint8_t)((flashAddr & 0x00FF0000) >> 16);
  5935                           
  5936                           ;incstack = 0
  5937  00421C  C01A  FFF8         	movff	FLASH_ReadByte@flashAddr+2,tblptru	;volatile
  5938                           
  5939                           ;memory.c: 61: TBLPTRH = (uint8_t)((flashAddr & 0x0000FF00)>> 8);
  5940  004220  C019  FFF7         	movff	FLASH_ReadByte@flashAddr+1,tblptrh	;volatile
  5941                           
  5942                           ;memory.c: 62: TBLPTRL = (uint8_t)(flashAddr & 0x000000FF);
  5943  004224  C018  FFF6         	movff	FLASH_ReadByte@flashAddr,tblptrl	;volatile
  5944  004228  0008               	tblrd		*	;# 
  5945                           
  5946                           ;memory.c: 66: return (TABLAT);
  5947  00422A  50F5               	movf	tablat,w,c	;volatile
  5948  00422C  0012               	return	
  5949  00422E                     __end_of_FLASH_ReadByte:
  5950                           	opt stack 0
  5951                           tosu	equ	0xFFF
  5952                           tosh	equ	0xFFE
  5953                           tosl	equ	0xFFD
  5954                           pclath	equ	0xFFA
  5955                           tblptru	equ	0xFF8
  5956                           tblptrh	equ	0xFF7
  5957                           tblptrl	equ	0xFF6
  5958                           tablat	equ	0xFF5
  5959                           prodh	equ	0xFF4
  5960                           prodl	equ	0xFF3
  5961                           postinc0	equ	0xFEE
  5962                           plusw0	equ	0xFEB
  5963                           wreg	equ	0xFE8
  5964                           postdec1	equ	0xFE5
  5965                           fsr1l	equ	0xFE1
  5966                           indf2	equ	0xFDF
  5967                           postinc2	equ	0xFDE
  5968                           plusw2	equ	0xFDB
  5969                           fsr2h	equ	0xFDA
  5970                           fsr2l	equ	0xFD9
  5971                           status	equ	0xFD8
  5972                           
  5973 ;; *************** function _FlashReadCondition *****************
  5974 ;; Defined at:
  5975 ;;		line 180 in file "FlashApp.c"
  5976 ;; Parameters:    Size  Location     Type
  5977 ;;		None
  5978 ;; Auto vars:     Size  Location     Type
  5979 ;;  TxMsg           9   39[COMRAM] unsigned char [9]
  5980 ;; Return value:  Size  Location     Type
  5981 ;;                  1    wreg      void 
  5982 ;; Registers used:
  5983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5984 ;; Tracked objects:
  5985 ;;		On entry : 0/0
  5986 ;;		On exit  : 0/0
  5987 ;;		Unchanged: 0/0
  5988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5989 ;;      Params:         0       0       0       0       0       0       0
  5990 ;;      Locals:         9       0       0       0       0       0       0
  5991 ;;      Temps:          4       0       0       0       0       0       0
  5992 ;;      Totals:        13       0       0       0       0       0       0
  5993 ;;Total ram usage:       13 bytes
  5994 ;; Hardware stack levels used:    1
  5995 ;; Hardware stack levels required when called:    6
  5996 ;; This function calls:
  5997 ;;		_WriteUartMessage
  5998 ;;		_ZeroArray
  5999 ;;		_crc8
  6000 ;;		_make8
  6001 ;; This function is called by:
  6002 ;;		_GroupFlashMemory
  6003 ;; This function uses a non-reentrant model
  6004 ;;
  6005                           
  6006                           	psect	text18
  6007  002130                     __ptext18:
  6008                           	opt stack 0
  6009  002130                     _FlashReadCondition:
  6010                           	opt stack 22
  6011                           
  6012                           ;FlashApp.c: 183: char TxMsg[4 + (0x4) + 1];
  6013                           ;FlashApp.c: 184: ZeroArray(TxMsg, 4 + (0x4) + 1);
  6014                           
  6015                           ;incstack = 0
  6016  002130  0E28               	movlw	low FlashReadCondition@TxMsg
  6017  002132  6E20               	movwf	ZeroArray@array,c
  6018  002134  0E00               	movlw	high FlashReadCondition@TxMsg
  6019  002136  6E21               	movwf	ZeroArray@array+1,c
  6020  002138  0E00               	movlw	0
  6021  00213A  6E23               	movwf	ZeroArray@size+1,c
  6022  00213C  0E09               	movlw	9
  6023  00213E  6E22               	movwf	ZeroArray@size,c
  6024  002140  EC95  F020         	call	_ZeroArray	;wreg free
  6025                           
  6026                           ;FlashApp.c: 187: TxMsg[(0)] = (0x24);
  6027  002144  0E24               	movlw	36
  6028  002146  6E28               	movwf	FlashReadCondition@TxMsg,c
  6029                           
  6030                           ;FlashApp.c: 188: TxMsg[(1)] = FLASH_MSG;
  6031  002148  0E05               	movlw	5
  6032  00214A  6E29               	movwf	FlashReadCondition@TxMsg+1,c
  6033                           
  6034                           ;FlashApp.c: 189: TxMsg[(2)] = FLASH_READ_CONDITION;
  6035  00214C  0E52               	movlw	82
  6036  00214E  6E2A               	movwf	FlashReadCondition@TxMsg+2,c
  6037                           
  6038                           ;FlashApp.c: 190: TxMsg[(3)] = 4;
  6039  002150  0E04               	movlw	4
  6040  002152  6E2B               	movwf	FlashReadCondition@TxMsg+3,c
  6041                           
  6042                           ;FlashApp.c: 195: TxMsg[(0x4) + 0] = make8(0x7FF0 - 0x4500,1);
  6043  002154  0EF0               	movlw	240
  6044  002156  6E18               	movwf	make8@data,c
  6045  002158  0E3A               	movlw	58
  6046  00215A  6E19               	movwf	make8@data+1,c
  6047  00215C  0E00               	movlw	0
  6048  00215E  6E1A               	movwf	make8@data+2,c
  6049  002160  0E00               	movlw	0
  6050  002162  6E1B               	movwf	make8@data+3,c
  6051  002164  0E01               	movlw	1
  6052  002166  6E1C               	movwf	make8@dataLocation,c
  6053  002168  EC84  F01B         	call	_make8	;wreg free
  6054  00216C  6E2C               	movwf	FlashReadCondition@TxMsg+4,c
  6055                           
  6056                           ;FlashApp.c: 196: TxMsg[(0x4) + 1] = make8(0x7FF0 - 0x4500,0);
  6057  00216E  0EF0               	movlw	240
  6058  002170  6E18               	movwf	make8@data,c
  6059  002172  0E3A               	movlw	58
  6060  002174  6E19               	movwf	make8@data+1,c
  6061  002176  0E00               	movlw	0
  6062  002178  6E1A               	movwf	make8@data+2,c
  6063  00217A  0E00               	movlw	0
  6064  00217C  6E1B               	movwf	make8@data+3,c
  6065  00217E  0E00               	movlw	0
  6066  002180  6E1C               	movwf	make8@dataLocation,c
  6067  002182  EC84  F01B         	call	_make8	;wreg free
  6068  002186  6E2D               	movwf	FlashReadCondition@TxMsg+5,c
  6069                           
  6070                           ;FlashApp.c: 199: TxMsg[(0x4) + 2] = make8(0x7FF0 - writeAddress,1);
  6071  002188  C040  F024         	movff	_writeAddress,??_FlashReadCondition
  6072  00218C  C041  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  6073  002190  C042  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  6074  002194  C043  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  6075  002198  1E24               	comf	??_FlashReadCondition,f,c
  6076  00219A  1E25               	comf	??_FlashReadCondition+1,f,c
  6077  00219C  1E26               	comf	??_FlashReadCondition+2,f,c
  6078  00219E  1E27               	comf	??_FlashReadCondition+3,f,c
  6079  0021A0  2A24               	incf	??_FlashReadCondition,f,c
  6080  0021A2  0E00               	movlw	0
  6081  0021A4  2225               	addwfc	??_FlashReadCondition+1,f,c
  6082  0021A6  2226               	addwfc	??_FlashReadCondition+2,f,c
  6083  0021A8  2227               	addwfc	??_FlashReadCondition+3,f,c
  6084  0021AA  0EF0               	movlw	240
  6085  0021AC  2424               	addwf	??_FlashReadCondition,w,c
  6086  0021AE  6E18               	movwf	make8@data,c
  6087  0021B0  0E7F               	movlw	127
  6088  0021B2  2025               	addwfc	??_FlashReadCondition+1,w,c
  6089  0021B4  6E19               	movwf	make8@data+1,c
  6090  0021B6  0E00               	movlw	0
  6091  0021B8  2026               	addwfc	??_FlashReadCondition+2,w,c
  6092  0021BA  6E1A               	movwf	make8@data+2,c
  6093  0021BC  0E00               	movlw	0
  6094  0021BE  2027               	addwfc	??_FlashReadCondition+3,w,c
  6095  0021C0  6E1B               	movwf	make8@data+3,c
  6096  0021C2  0E01               	movlw	1
  6097  0021C4  6E1C               	movwf	make8@dataLocation,c
  6098  0021C6  EC84  F01B         	call	_make8	;wreg free
  6099  0021CA  6E2E               	movwf	FlashReadCondition@TxMsg+6,c
  6100                           
  6101                           ;FlashApp.c: 200: TxMsg[(0x4) + 3] = make8(0x7FF0 - writeAddress,0);
  6102  0021CC  C040  F024         	movff	_writeAddress,??_FlashReadCondition
  6103  0021D0  C041  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  6104  0021D4  C042  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  6105  0021D8  C043  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  6106  0021DC  1E24               	comf	??_FlashReadCondition,f,c
  6107  0021DE  1E25               	comf	??_FlashReadCondition+1,f,c
  6108  0021E0  1E26               	comf	??_FlashReadCondition+2,f,c
  6109  0021E2  1E27               	comf	??_FlashReadCondition+3,f,c
  6110  0021E4  2A24               	incf	??_FlashReadCondition,f,c
  6111  0021E6  0E00               	movlw	0
  6112  0021E8  2225               	addwfc	??_FlashReadCondition+1,f,c
  6113  0021EA  2226               	addwfc	??_FlashReadCondition+2,f,c
  6114  0021EC  2227               	addwfc	??_FlashReadCondition+3,f,c
  6115  0021EE  0EF0               	movlw	240
  6116  0021F0  2424               	addwf	??_FlashReadCondition,w,c
  6117  0021F2  6E18               	movwf	make8@data,c
  6118  0021F4  0E7F               	movlw	127
  6119  0021F6  2025               	addwfc	??_FlashReadCondition+1,w,c
  6120  0021F8  6E19               	movwf	make8@data+1,c
  6121  0021FA  0E00               	movlw	0
  6122  0021FC  2026               	addwfc	??_FlashReadCondition+2,w,c
  6123  0021FE  6E1A               	movwf	make8@data+2,c
  6124  002200  0E00               	movlw	0
  6125  002202  2027               	addwfc	??_FlashReadCondition+3,w,c
  6126  002204  6E1B               	movwf	make8@data+3,c
  6127  002206  0E00               	movlw	0
  6128  002208  6E1C               	movwf	make8@dataLocation,c
  6129  00220A  EC84  F01B         	call	_make8	;wreg free
  6130  00220E  6E2F               	movwf	FlashReadCondition@TxMsg+7,c
  6131                           
  6132                           ;FlashApp.c: 202: TxMsg[4 + (0x4)] = crc8(TxMsg, 4 + (0x4));
  6133  002210  0E28               	movlw	low FlashReadCondition@TxMsg
  6134  002212  6E18               	movwf	crc8@dataArray,c
  6135  002214  0E00               	movlw	high FlashReadCondition@TxMsg
  6136  002216  6E19               	movwf	crc8@dataArray+1,c
  6137  002218  0E00               	movlw	0
  6138  00221A  6E1B               	movwf	crc8@dataSize+1,c
  6139  00221C  0E08               	movlw	8
  6140  00221E  6E1A               	movwf	crc8@dataSize,c
  6141  002220  EC0B  F01D         	call	_crc8	;wreg free
  6142  002224  6E30               	movwf	FlashReadCondition@TxMsg+8,c
  6143                           
  6144                           ;FlashApp.c: 204: WriteUartMessage(TxMsg, 4 + (0x4) + 1);
  6145  002226  0E28               	movlw	low FlashReadCondition@TxMsg
  6146  002228  6E19               	movwf	WriteUartMessage@dataBuf,c
  6147  00222A  0E00               	movlw	high FlashReadCondition@TxMsg
  6148  00222C  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  6149  00222E  0E00               	movlw	0
  6150  002230  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  6151  002232  0E09               	movlw	9
  6152  002234  6E1B               	movwf	WriteUartMessage@dataSize,c
  6153  002236  EC9D  F01E         	call	_WriteUartMessage	;wreg free
  6154  00223A  0012               	return		;funcret
  6155  00223C                     __end_of_FlashReadCondition:
  6156                           	opt stack 0
  6157                           tosu	equ	0xFFF
  6158                           tosh	equ	0xFFE
  6159                           tosl	equ	0xFFD
  6160                           pclath	equ	0xFFA
  6161                           tblptru	equ	0xFF8
  6162                           tblptrh	equ	0xFF7
  6163                           tblptrl	equ	0xFF6
  6164                           tablat	equ	0xFF5
  6165                           prodh	equ	0xFF4
  6166                           prodl	equ	0xFF3
  6167                           postinc0	equ	0xFEE
  6168                           plusw0	equ	0xFEB
  6169                           wreg	equ	0xFE8
  6170                           postdec1	equ	0xFE5
  6171                           fsr1l	equ	0xFE1
  6172                           indf2	equ	0xFDF
  6173                           postinc2	equ	0xFDE
  6174                           plusw2	equ	0xFDB
  6175                           fsr2h	equ	0xFDA
  6176                           fsr2l	equ	0xFD9
  6177                           status	equ	0xFD8
  6178                           
  6179 ;; *************** function _FlashEreaseMem *****************
  6180 ;; Defined at:
  6181 ;;		line 170 in file "FlashApp.c"
  6182 ;; Parameters:    Size  Location     Type
  6183 ;;		None
  6184 ;; Auto vars:     Size  Location     Type
  6185 ;;		None
  6186 ;; Return value:  Size  Location     Type
  6187 ;;                  1    wreg      void 
  6188 ;; Registers used:
  6189 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6190 ;; Tracked objects:
  6191 ;;		On entry : 0/0
  6192 ;;		On exit  : 0/0
  6193 ;;		Unchanged: 0/0
  6194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6195 ;;      Params:         0       0       0       0       0       0       0
  6196 ;;      Locals:         0       0       0       0       0       0       0
  6197 ;;      Temps:          0       0       0       0       0       0       0
  6198 ;;      Totals:         0       0       0       0       0       0       0
  6199 ;;Total ram usage:        0 bytes
  6200 ;; Hardware stack levels used:    1
  6201 ;; Hardware stack levels required when called:    7
  6202 ;; This function calls:
  6203 ;;		_SendAckMessage
  6204 ;;		_ZeroArray
  6205 ;; This function is called by:
  6206 ;;		_GroupFlashMemory
  6207 ;; This function uses a non-reentrant model
  6208 ;;
  6209                           
  6210                           	psect	text19
  6211  003972                     __ptext19:
  6212                           	opt stack 0
  6213  003972                     _FlashEreaseMem:
  6214                           	opt stack 21
  6215                           
  6216                           ;FlashApp.c: 172: writeAddress = 0x4500;
  6217                           
  6218                           ;incstack = 0
  6219  003972  0E00               	movlw	0
  6220  003974  6E40               	movwf	_writeAddress,c
  6221  003976  0E45               	movlw	69
  6222  003978  6E41               	movwf	_writeAddress+1,c
  6223  00397A  0E00               	movlw	0
  6224  00397C  6E42               	movwf	_writeAddress+2,c
  6225  00397E  0E00               	movlw	0
  6226  003980  6E43               	movwf	_writeAddress+3,c
  6227                           
  6228                           ;FlashApp.c: 173: readAddress = 0x4500;
  6229  003982  0E00               	movlw	0
  6230  003984  0100               	movlb	0	; () banked
  6231  003986  6FFA               	movwf	_readAddress& (0+255),b
  6232  003988  0E45               	movlw	69
  6233  00398A  6FFB               	movwf	(_readAddress+1)& (0+255),b
  6234  00398C  0E00               	movlw	0
  6235  00398E  6FFC               	movwf	(_readAddress+2)& (0+255),b
  6236  003990  0E00               	movlw	0
  6237  003992  6FFD               	movwf	(_readAddress+3)& (0+255),b
  6238                           
  6239                           ;FlashApp.c: 174: numOfValidateSamples = 0;
  6240  003994  0E00               	movlw	0
  6241  003996  6E31               	movwf	_numOfValidateSamples,c
  6242  003998  0E00               	movlw	0
  6243  00399A  6E32               	movwf	_numOfValidateSamples+1,c
  6244  00399C  0E00               	movlw	0
  6245  00399E  6E33               	movwf	_numOfValidateSamples+2,c
  6246  0039A0  0E00               	movlw	0
  6247  0039A2  6E34               	movwf	_numOfValidateSamples+3,c
  6248                           
  6249                           ; BSR set to: 0
  6250                           ;FlashApp.c: 175: ZeroArray(sampleArray, (64)/sizeof(adc_result_t));
  6251  0039A4  0E70               	movlw	low _sampleArray
  6252  0039A6  6E20               	movwf	ZeroArray@array,c
  6253  0039A8  0E01               	movlw	high _sampleArray
  6254  0039AA  6E21               	movwf	ZeroArray@array+1,c
  6255  0039AC  0E00               	movlw	0
  6256  0039AE  6E23               	movwf	ZeroArray@size+1,c
  6257  0039B0  0E20               	movlw	32
  6258  0039B2  6E22               	movwf	ZeroArray@size,c
  6259  0039B4  EC95  F020         	call	_ZeroArray	;wreg free
  6260                           
  6261                           ;FlashApp.c: 176: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_EREASE_MEMORY
      +                          );
  6262  0039B8  0E51               	movlw	81
  6263  0039BA  6E24               	movwf	SendAckMessage@inRequest,c
  6264  0039BC  0E05               	movlw	5
  6265  0039BE  ECE2  F01C         	call	_SendAckMessage
  6266  0039C2  0012               	return		;funcret
  6267  0039C4                     __end_of_FlashEreaseMem:
  6268                           	opt stack 0
  6269                           tosu	equ	0xFFF
  6270                           tosh	equ	0xFFE
  6271                           tosl	equ	0xFFD
  6272                           pclath	equ	0xFFA
  6273                           tblptru	equ	0xFF8
  6274                           tblptrh	equ	0xFF7
  6275                           tblptrl	equ	0xFF6
  6276                           tablat	equ	0xFF5
  6277                           prodh	equ	0xFF4
  6278                           prodl	equ	0xFF3
  6279                           postinc0	equ	0xFEE
  6280                           plusw0	equ	0xFEB
  6281                           wreg	equ	0xFE8
  6282                           postdec1	equ	0xFE5
  6283                           fsr1l	equ	0xFE1
  6284                           indf2	equ	0xFDF
  6285                           postinc2	equ	0xFDE
  6286                           plusw2	equ	0xFDB
  6287                           fsr2h	equ	0xFDA
  6288                           fsr2l	equ	0xFD9
  6289                           status	equ	0xFD8
  6290                           
  6291 ;; *************** function _DacSetValue *****************
  6292 ;; Defined at:
  6293 ;;		line 30 in file "DacApp.c"
  6294 ;; Parameters:    Size  Location     Type
  6295 ;;  data            2   39[BANK0 ] PTR unsigned char 
  6296 ;;		 -> rxMsgData(20), 
  6297 ;; Auto vars:     Size  Location     Type
  6298 ;;  retVal          8   46[BANK0 ] struct .
  6299 ;;  dacIndex        1   45[BANK0 ] char 
  6300 ;; Return value:  Size  Location     Type
  6301 ;;                  1    wreg      void 
  6302 ;; Registers used:
  6303 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6304 ;; Tracked objects:
  6305 ;;		On entry : 0/0
  6306 ;;		On exit  : 0/0
  6307 ;;		Unchanged: 0/0
  6308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6309 ;;      Params:         0       2       0       0       0       0       0
  6310 ;;      Locals:         0       9       0       0       0       0       0
  6311 ;;      Temps:          0       4       0       0       0       0       0
  6312 ;;      Totals:         0      15       0       0       0       0       0
  6313 ;;Total ram usage:       15 bytes
  6314 ;; Hardware stack levels used:    1
  6315 ;; Hardware stack levels required when called:    8
  6316 ;; This function calls:
  6317 ;;		_GetIntFromUartData
  6318 ;;		_SWSPI_send_word
  6319 ;;		_SendAckMessage
  6320 ;;		_StoreIntInEeprom
  6321 ;; This function is called by:
  6322 ;;		_GroupDAC
  6323 ;; This function uses a non-reentrant model
  6324 ;;
  6325                           
  6326                           	psect	text20
  6327  002FB6                     __ptext20:
  6328                           	opt stack 0
  6329  002FB6                     _DacSetValue:
  6330                           	opt stack 20
  6331                           
  6332                           ;DacApp.c: 32: INT_VAL retVal;
  6333                           ;DacApp.c: 33: retVal = GetIntFromUartData(16, data);
  6334                           
  6335                           ;incstack = 0
  6336  002FB6  C087  F066         	movff	DacSetValue@data,GetIntFromUartData@data
  6337  002FBA  C088  F067         	movff	DacSetValue@data+1,GetIntFromUartData@data+1
  6338  002FBE  0E10               	movlw	16
  6339  002FC0  ECB2  F00E         	call	_GetIntFromUartData
  6340  002FC4  EE20  F08E         	lfsr	2,DacSetValue@retVal
  6341  002FC8  0E07               	movlw	7
  6342  002FCA                     u8651:
  6343  002FCA  CFEB FFDB          	movff	plusw0,plusw2
  6344  002FCE  06E8               	decf	wreg,f,c
  6345  002FD0  E2FC               	bc	u8651
  6346                           
  6347                           ;DacApp.c: 34: SWSPI_send_word(EXT_DAC, retVal.num, 1);
  6348  002FD2  C08E  F026         	movff	DacSetValue@retVal,SWSPI_send_word@data
  6349  002FD6  C08F  F027         	movff	DacSetValue@retVal+1,SWSPI_send_word@data+1
  6350  002FDA  C090  F028         	movff	DacSetValue@retVal+2,SWSPI_send_word@data+2
  6351  002FDE  C091  F029         	movff	DacSetValue@retVal+3,SWSPI_send_word@data+3
  6352  002FE2  0E01               	movlw	1
  6353  002FE4  6E2A               	movwf	SWSPI_send_word@dataSize,c
  6354  002FE6  0E02               	movlw	2
  6355  002FE8  EC2A  F018         	call	_SWSPI_send_word
  6356                           
  6357                           ;DacApp.c: 37: int8_t dacIndex = (retVal.num >> 14);
  6358  002FEC  C08E  F089         	movff	DacSetValue@retVal,??_DacSetValue
  6359  002FF0  C08F  F08A         	movff	DacSetValue@retVal+1,??_DacSetValue+1
  6360  002FF4  C090  F08B         	movff	DacSetValue@retVal+2,??_DacSetValue+2
  6361  002FF8  C091  F08C         	movff	DacSetValue@retVal+3,??_DacSetValue+3
  6362  002FFC  0E0F               	movlw	15
  6363  002FFE  D006               	goto	u8660
  6364  003000                     u8665:
  6365  003000  0100               	movlb	0	; () banked
  6366  003002  90D8               	bcf	status,0,c
  6367  003004  338C               	rrcf	(??_DacSetValue+3)& (0+255),f,b
  6368  003006  338B               	rrcf	(??_DacSetValue+2)& (0+255),f,b
  6369  003008  338A               	rrcf	(??_DacSetValue+1)& (0+255),f,b
  6370  00300A  3389               	rrcf	??_DacSetValue& (0+255),f,b
  6371  00300C                     u8660:
  6372  00300C  2EE8               	decfsz	wreg,f,c
  6373  00300E  D7F8               	goto	u8665
  6374  003010  5189               	movf	??_DacSetValue& (0+255),w,b
  6375  003012  6F8D               	movwf	DacSetValue@dacIndex& (0+255),b
  6376                           
  6377                           ; BSR set to: 0
  6378                           ;DacApp.c: 38: StoreIntInEeprom(retVal.num, (0x40) | DAC_ADDRES[dacIndex], 2);
  6379  003014  C08E  F021         	movff	DacSetValue@retVal,StoreIntInEeprom@data
  6380  003018  C08F  F022         	movff	DacSetValue@retVal+1,StoreIntInEeprom@data+1
  6381  00301C  C090  F023         	movff	DacSetValue@retVal+2,StoreIntInEeprom@data+2
  6382  003020  C091  F024         	movff	DacSetValue@retVal+3,StoreIntInEeprom@data+3
  6383  003024  518D               	movf	DacSetValue@dacIndex& (0+255),w,b
  6384  003026  0D01               	mullw	1
  6385  003028  0E53               	movlw	low _DAC_ADDRES
  6386  00302A  24F3               	addwf	prodl,w,c
  6387  00302C  6EF6               	movwf	tblptrl,c
  6388  00302E  0E06               	movlw	high _DAC_ADDRES
  6389  003030  20F4               	addwfc	prodh,w,c
  6390  003032  6EF7               	movwf	tblptrh,c
  6391  003034                     	if	0	;There are less than 3 active tblptr bytes
  6392  003034                     	endif
  6393  003034  0008               	tblrd		*
  6394  003036  50F5               	movf	tablat,w,c
  6395  003038  0940               	iorlw	64
  6396  00303A  6E25               	movwf	StoreIntInEeprom@address,c
  6397  00303C  0E00               	movlw	0
  6398  00303E  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  6399  003040  0E02               	movlw	2
  6400  003042  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  6401  003044  EC2E  F01E         	call	_StoreIntInEeprom	;wreg free
  6402                           
  6403                           ;DacApp.c: 41: SendAckMessage((MSG_GROUPS)DAC_MSG, (MSG_REQUEST)DAC_SET_VALUE);
  6404  003048  0E61               	movlw	97
  6405  00304A  6E24               	movwf	SendAckMessage@inRequest,c
  6406  00304C  0E06               	movlw	6
  6407  00304E  ECE2  F01C         	call	_SendAckMessage
  6408  003052  0012               	return		;funcret
  6409  003054                     __end_of_DacSetValue:
  6410                           	opt stack 0
  6411                           tosu	equ	0xFFF
  6412                           tosh	equ	0xFFE
  6413                           tosl	equ	0xFFD
  6414                           pclath	equ	0xFFA
  6415                           tblptru	equ	0xFF8
  6416                           tblptrh	equ	0xFF7
  6417                           tblptrl	equ	0xFF6
  6418                           tablat	equ	0xFF5
  6419                           prodh	equ	0xFF4
  6420                           prodl	equ	0xFF3
  6421                           postinc0	equ	0xFEE
  6422                           plusw0	equ	0xFEB
  6423                           wreg	equ	0xFE8
  6424                           postdec1	equ	0xFE5
  6425                           fsr1l	equ	0xFE1
  6426                           indf2	equ	0xFDF
  6427                           postinc2	equ	0xFDE
  6428                           plusw2	equ	0xFDB
  6429                           fsr2h	equ	0xFDA
  6430                           fsr2l	equ	0xFD9
  6431                           status	equ	0xFD8
  6432                           
  6433 ;; *************** function _GetIntFromUartData *****************
  6434 ;; Defined at:
  6435 ;;		line 34 in file "SystemCommon.c"
  6436 ;; Parameters:    Size  Location     Type
  6437 ;;  num             1    wreg     char 
  6438 ;;  data            2    6[BANK0 ] PTR unsigned char 
  6439 ;;		 -> rxMsgData(20), 
  6440 ;; Auto vars:     Size  Location     Type
  6441 ;;  num             1   26[BANK0 ] char 
  6442 ;;  idxCon          2   36[BANK0 ] int 
  6443 ;;  dataRegArr     10   16[BANK0 ] unsigned char [10]
  6444 ;;  retVal          8   28[BANK0 ] struct .
  6445 ;;  idxData         1   38[BANK0 ] unsigned char 
  6446 ;;  recVal          1   27[BANK0 ] unsigned char 
  6447 ;; Return value:  Size  Location     Type
  6448 ;;                  8    6[BANK0 ] struct .
  6449 ;; Registers used:
  6450 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6451 ;; Tracked objects:
  6452 ;;		On entry : 0/0
  6453 ;;		On exit  : 0/0
  6454 ;;		Unchanged: 0/0
  6455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6456 ;;      Params:         0       8       0       0       0       0       0
  6457 ;;      Locals:         0      23       0       0       0       0       0
  6458 ;;      Temps:          0       2       0       0       0       0       0
  6459 ;;      Totals:         0      33       0       0       0       0       0
  6460 ;;Total ram usage:       33 bytes
  6461 ;; Hardware stack levels used:    1
  6462 ;; Hardware stack levels required when called:    7
  6463 ;; This function calls:
  6464 ;;		_ZeroArray
  6465 ;;		_strtol
  6466 ;; This function is called by:
  6467 ;;		_DacSetValue
  6468 ;;		_UpdateSynthFreq
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           	psect	text21
  6473  001D64                     __ptext21:
  6474                           	opt stack 0
  6475  001D64                     _GetIntFromUartData:
  6476                           	opt stack 20
  6477                           
  6478                           ;incstack = 0
  6479                           ;GetIntFromUartData@num stored from wreg
  6480  001D64  0100               	movlb	0	; () banked
  6481  001D66  6F7A               	movwf	GetIntFromUartData@num& (0+255),b
  6482                           
  6483                           ;SystemCommon.c: 36: INT_VAL retVal;
  6484                           ;SystemCommon.c: 37: retVal.num = 0;
  6485  001D68  0E00               	movlw	0
  6486  001D6A  0100               	movlb	0	; () banked
  6487  001D6C  6F7C               	movwf	GetIntFromUartData@retVal& (0+255),b
  6488  001D6E  0E00               	movlw	0
  6489  001D70  6F7D               	movwf	(GetIntFromUartData@retVal+1)& (0+255),b
  6490  001D72  0E00               	movlw	0
  6491  001D74  6F7E               	movwf	(GetIntFromUartData@retVal+2)& (0+255),b
  6492  001D76  0E00               	movlw	0
  6493  001D78  6F7F               	movwf	(GetIntFromUartData@retVal+3)& (0+255),b
  6494                           
  6495                           ;SystemCommon.c: 38: retVal.con = 0;
  6496  001D7A  0E00               	movlw	0
  6497  001D7C  6F80               	movwf	(GetIntFromUartData@retVal+4)& (0+255),b
  6498  001D7E  0E00               	movlw	0
  6499  001D80  6F81               	movwf	(GetIntFromUartData@retVal+5)& (0+255),b
  6500  001D82  0E00               	movlw	0
  6501  001D84  6F82               	movwf	(GetIntFromUartData@retVal+6)& (0+255),b
  6502  001D86  0E00               	movlw	0
  6503  001D88  6F83               	movwf	(GetIntFromUartData@retVal+7)& (0+255),b
  6504                           
  6505                           ;SystemCommon.c: 39: uint8_t idxData = 0;
  6506  001D8A  0E00               	movlw	0
  6507  001D8C  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  6508                           
  6509                           ;SystemCommon.c: 40: char recVal = (0);
  6510  001D8E  0E00               	movlw	0
  6511  001D90  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6512                           
  6513                           ; BSR set to: 0
  6514                           ;SystemCommon.c: 42: char dataRegArr[0xA];
  6515                           ;SystemCommon.c: 43: ZeroArray(dataRegArr, 0xA);
  6516  001D92  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6517  001D94  6E20               	movwf	ZeroArray@array,c
  6518  001D96  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6519  001D98  6E21               	movwf	ZeroArray@array+1,c
  6520  001D9A  0E00               	movlw	0
  6521  001D9C  6E23               	movwf	ZeroArray@size+1,c
  6522  001D9E  0E0A               	movlw	10
  6523  001DA0  6E22               	movwf	ZeroArray@size,c
  6524  001DA2  EC95  F020         	call	_ZeroArray	;wreg free
  6525                           
  6526                           ;SystemCommon.c: 45: for(idxData = 0; idxData < 0xA; idxData++)
  6527  001DA6  0E00               	movlw	0
  6528  001DA8  0100               	movlb	0	; () banked
  6529  001DAA  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  6530  001DAC                     l7825:
  6531                           
  6532                           ; BSR set to: 0
  6533  001DAC  0E09               	movlw	9
  6534  001DAE  6586               	cpfsgt	GetIntFromUartData@idxData& (0+255),b
  6535  001DB0  D001               	goto	l1360
  6536  001DB2  D01D               	goto	u8100
  6537  001DB4                     l1360:
  6538                           
  6539                           ; BSR set to: 0
  6540                           ;SystemCommon.c: 46: {
  6541                           ;SystemCommon.c: 47: recVal = data[idxData];
  6542                           
  6543                           ; BSR set to: 0
  6544  001DB4  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6545  001DB6  0D01               	mullw	1
  6546  001DB8  50F3               	movf	prodl,w,c
  6547  001DBA  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6548  001DBC  6ED9               	movwf	fsr2l,c
  6549  001DBE  50F4               	movf	prodh,w,c
  6550  001DC0  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6551  001DC2  6EDA               	movwf	fsr2h,c
  6552  001DC4  50DF               	movf	indf2,w,c
  6553  001DC6  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6554                           
  6555                           ; BSR set to: 0
  6556                           ;SystemCommon.c: 48: if(recVal == 0x10)
  6557  001DC8  0E10               	movlw	16
  6558  001DCA  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  6559  001DCC  A4D8               	btfss	status,2,c
  6560  001DCE  D002               	goto	l1362
  6561                           
  6562                           ; BSR set to: 0
  6563                           ;SystemCommon.c: 49: {
  6564                           ;SystemCommon.c: 50: idxData++;
  6565  001DD0  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  6566                           
  6567                           ;SystemCommon.c: 51: break;
  6568  001DD2  D00D               	goto	u8100
  6569  001DD4                     l1362:
  6570                           
  6571                           ; BSR set to: 0
  6572                           ;SystemCommon.c: 53: else
  6573                           ;SystemCommon.c: 54: {
  6574                           ;SystemCommon.c: 55: dataRegArr[idxData] = recVal + '0';
  6575                           
  6576                           ; BSR set to: 0
  6577  001DD4  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6578  001DD6  0D01               	mullw	1
  6579  001DD8  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6580  001DDA  24F3               	addwf	prodl,w,c
  6581  001DDC  6ED9               	movwf	fsr2l,c
  6582  001DDE  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6583  001DE0  20F4               	addwfc	prodh,w,c
  6584  001DE2  6EDA               	movwf	fsr2h,c
  6585  001DE4  517B               	movf	GetIntFromUartData@recVal& (0+255),w,b
  6586  001DE6  0F30               	addlw	48
  6587  001DE8  6EDF               	movwf	indf2,c
  6588                           
  6589                           ; BSR set to: 0
  6590                           
  6591                           ; BSR set to: 0
  6592  001DEA  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  6593  001DEC  D7DF               	goto	l7825
  6594  001DEE                     u8100:
  6595                           
  6596                           ; BSR set to: 0
  6597                           ;SystemCommon.c: 56: }
  6598                           ;SystemCommon.c: 57: }
  6599                           ;SystemCommon.c: 58: retVal.num = strtol(dataRegArr, (0), num);
  6600                           
  6601                           ; BSR set to: 0
  6602  001DEE  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6603  001DF0  6E26               	movwf	strtol@s,c
  6604  001DF2  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6605  001DF4  6E27               	movwf	strtol@s+1,c
  6606  001DF6  0E00               	movlw	0
  6607  001DF8  6E28               	movwf	strtol@endptr,c
  6608  001DFA  0E00               	movlw	0
  6609  001DFC  6E29               	movwf	strtol@endptr+1,c
  6610  001DFE  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  6611  001E00  6E2A               	movwf	strtol@base,c
  6612  001E02  6A2B               	clrf	strtol@base+1,c
  6613  001E04  BE2A               	btfsc	strtol@base,7,c
  6614  001E06  062B               	decf	strtol@base+1,f,c
  6615  001E08  EC55  F00B         	call	_strtol	;wreg free
  6616  001E0C  C026  F07C         	movff	?_strtol,GetIntFromUartData@retVal
  6617  001E10  C027  F07D         	movff	?_strtol+1,GetIntFromUartData@retVal+1
  6618  001E14  C028  F07E         	movff	?_strtol+2,GetIntFromUartData@retVal+2
  6619  001E18  C029  F07F         	movff	?_strtol+3,GetIntFromUartData@retVal+3
  6620                           
  6621                           ;SystemCommon.c: 60: ZeroArray(dataRegArr, 0xA);
  6622  001E1C  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6623  001E1E  6E20               	movwf	ZeroArray@array,c
  6624  001E20  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6625  001E22  6E21               	movwf	ZeroArray@array+1,c
  6626  001E24  0E00               	movlw	0
  6627  001E26  6E23               	movwf	ZeroArray@size+1,c
  6628  001E28  0E0A               	movlw	10
  6629  001E2A  6E22               	movwf	ZeroArray@size,c
  6630  001E2C  EC95  F020         	call	_ZeroArray	;wreg free
  6631                           
  6632                           ;SystemCommon.c: 62: for(int idxCon = 0; idxCon < 0xA; idxCon++)
  6633  001E30  0E00               	movlw	0
  6634  001E32  0100               	movlb	0	; () banked
  6635  001E34  6F85               	movwf	(GetIntFromUartData@idxCon+1)& (0+255),b
  6636  001E36  0E00               	movlw	0
  6637  001E38  6F84               	movwf	GetIntFromUartData@idxCon& (0+255),b
  6638  001E3A                     l7847:
  6639                           
  6640                           ; BSR set to: 0
  6641  001E3A  BF85               	btfsc	(GetIntFromUartData@idxCon+1)& (0+255),7,b
  6642  001E3C  D006               	goto	l1364
  6643  001E3E  5185               	movf	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6644  001E40  E12E               	bnz	l7865
  6645  001E42  0E0A               	movlw	10
  6646  001E44  5D84               	subwf	GetIntFromUartData@idxCon& (0+255),w,b
  6647  001E46  B0D8               	btfsc	status,0,c
  6648  001E48  D02A               	goto	u8130
  6649  001E4A                     l1364:
  6650                           
  6651                           ; BSR set to: 0
  6652                           ;SystemCommon.c: 63: {
  6653                           ;SystemCommon.c: 64: recVal = data[idxData + idxCon];
  6654                           
  6655                           ; BSR set to: 0
  6656  001E4A  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6657  001E4C  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6658  001E4E  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  6659  001E50  0E00               	movlw	0
  6660  001E52  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6661  001E54  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  6662  001E56  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  6663  001E58  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6664  001E5A  6ED9               	movwf	fsr2l,c
  6665  001E5C  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  6666  001E5E  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6667  001E60  6EDA               	movwf	fsr2h,c
  6668  001E62  50DF               	movf	indf2,w,c
  6669  001E64  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6670                           
  6671                           ; BSR set to: 0
  6672                           ;SystemCommon.c: 65: if(recVal == 0x23)
  6673  001E66  0E23               	movlw	35
  6674  001E68  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  6675  001E6A  B4D8               	btfsc	status,2,c
  6676  001E6C  D018               	goto	u8130
  6677                           
  6678                           ; BSR set to: 0
  6679                           ;SystemCommon.c: 69: else
  6680                           ;SystemCommon.c: 70: {
  6681                           ;SystemCommon.c: 71: dataRegArr[idxCon] = data[idxCon + idxData] + '0';
  6682                           
  6683                           ; BSR set to: 0
  6684                           
  6685                           ; BSR set to: 0
  6686                           ;SystemCommon.c: 68: }
  6687                           
  6688                           ; BSR set to: 0
  6689                           ;SystemCommon.c: 66: {
  6690                           ;SystemCommon.c: 67: break;
  6691  001E6E  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6692  001E70  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6693  001E72  6ED9               	movwf	fsr2l,c
  6694  001E74  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6695  001E76  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6696  001E78  6EDA               	movwf	fsr2h,c
  6697  001E7A  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6698  001E7C  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6699  001E7E  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  6700  001E80  0E00               	movlw	0
  6701  001E82  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6702  001E84  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  6703  001E86  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  6704  001E88  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6705  001E8A  6EE1               	movwf	fsr1l,c
  6706  001E8C  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  6707  001E8E  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6708  001E90  6EE2               	movwf	fsr1h,c
  6709  001E92  50E7               	movf	indf1,w,c
  6710  001E94  0F30               	addlw	48
  6711  001E96  6EDF               	movwf	indf2,c
  6712                           
  6713                           ; BSR set to: 0
  6714                           
  6715                           ; BSR set to: 0
  6716  001E98  4B84               	infsnz	GetIntFromUartData@idxCon& (0+255),f,b
  6717  001E9A  2B85               	incf	(GetIntFromUartData@idxCon+1)& (0+255),f,b
  6718  001E9C  D7CE               	goto	l7847
  6719  001E9E                     u8130:
  6720  001E9E                     l7865:
  6721                           
  6722                           ; BSR set to: 0
  6723                           ;SystemCommon.c: 72: }
  6724                           ;SystemCommon.c: 73: }
  6725                           ;SystemCommon.c: 74: retVal.con = strtol(dataRegArr, (0), num);
  6726  001E9E  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6727  001EA0  6E26               	movwf	strtol@s,c
  6728  001EA2  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6729  001EA4  6E27               	movwf	strtol@s+1,c
  6730  001EA6  0E00               	movlw	0
  6731  001EA8  6E28               	movwf	strtol@endptr,c
  6732  001EAA  0E00               	movlw	0
  6733  001EAC  6E29               	movwf	strtol@endptr+1,c
  6734  001EAE  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  6735  001EB0  6E2A               	movwf	strtol@base,c
  6736  001EB2  6A2B               	clrf	strtol@base+1,c
  6737  001EB4  BE2A               	btfsc	strtol@base,7,c
  6738  001EB6  062B               	decf	strtol@base+1,f,c
  6739  001EB8  EC55  F00B         	call	_strtol	;wreg free
  6740  001EBC  C026  F080         	movff	?_strtol,GetIntFromUartData@retVal+4
  6741  001EC0  C027  F081         	movff	?_strtol+1,GetIntFromUartData@retVal+5
  6742  001EC4  C028  F082         	movff	?_strtol+2,GetIntFromUartData@retVal+6
  6743  001EC8  C029  F083         	movff	?_strtol+3,GetIntFromUartData@retVal+7
  6744                           
  6745                           ;SystemCommon.c: 76: return retVal;
  6746  001ECC  EE20  F07C         	lfsr	2,GetIntFromUartData@retVal
  6747  001ED0  EE00  F066         	lfsr	0,?_GetIntFromUartData
  6748  001ED4  0E07               	movlw	7
  6749  001ED6                     u8141:
  6750  001ED6  CFDB FFEB          	movff	plusw2,plusw0
  6751  001EDA  06E8               	decf	wreg,f,c
  6752  001EDC  E2FC               	bc	u8141
  6753  001EDE  0012               	return	
  6754  001EE0                     __end_of_GetIntFromUartData:
  6755                           	opt stack 0
  6756                           tosu	equ	0xFFF
  6757                           tosh	equ	0xFFE
  6758                           tosl	equ	0xFFD
  6759                           pclath	equ	0xFFA
  6760                           tblptru	equ	0xFF8
  6761                           tblptrh	equ	0xFF7
  6762                           tblptrl	equ	0xFF6
  6763                           tablat	equ	0xFF5
  6764                           prodh	equ	0xFF4
  6765                           prodl	equ	0xFF3
  6766                           postinc0	equ	0xFEE
  6767                           plusw0	equ	0xFEB
  6768                           wreg	equ	0xFE8
  6769                           indf1	equ	0xFE7
  6770                           postdec1	equ	0xFE5
  6771                           fsr1h	equ	0xFE2
  6772                           fsr1l	equ	0xFE1
  6773                           indf2	equ	0xFDF
  6774                           postinc2	equ	0xFDE
  6775                           plusw2	equ	0xFDB
  6776                           fsr2h	equ	0xFDA
  6777                           fsr2l	equ	0xFD9
  6778                           status	equ	0xFD8
  6779                           
  6780 ;; *************** function _strtol *****************
  6781 ;; Defined at:
  6782 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  6783 ;; Parameters:    Size  Location     Type
  6784 ;;  s               2   37[COMRAM] PTR const unsigned char 
  6785 ;;		 -> GetIntFromUartData@dataRegArr(10), 
  6786 ;;  endptr          2   39[COMRAM] PTR PTR unsigned char 
  6787 ;;		 -> NULL(0), 
  6788 ;;  base            2   41[COMRAM] int 
  6789 ;; Auto vars:     Size  Location     Type
  6790 ;;  a               4    1[BANK0 ] long 
  6791 ;;  c               1    5[BANK0 ] unsigned char 
  6792 ;;  sign            1    0[BANK0 ] unsigned char 
  6793 ;; Return value:  Size  Location     Type
  6794 ;;                  4   37[COMRAM] long 
  6795 ;; Registers used:
  6796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6797 ;; Tracked objects:
  6798 ;;		On entry : 0/0
  6799 ;;		On exit  : 0/0
  6800 ;;		Unchanged: 0/0
  6801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6802 ;;      Params:         6       0       0       0       0       0       0
  6803 ;;      Locals:         0       6       0       0       0       0       0
  6804 ;;      Temps:          4       0       0       0       0       0       0
  6805 ;;      Totals:        10       6       0       0       0       0       0
  6806 ;;Total ram usage:       16 bytes
  6807 ;; Hardware stack levels used:    1
  6808 ;; Hardware stack levels required when called:    6
  6809 ;; This function calls:
  6810 ;;		___lmul
  6811 ;;		_isalpha
  6812 ;;		_isdigit
  6813 ;;		_isspace
  6814 ;;		_toupper
  6815 ;; This function is called by:
  6816 ;;		_GetIntFromUartData
  6817 ;; This function uses a non-reentrant model
  6818 ;;
  6819                           
  6820                           	psect	text22
  6821  0016AA                     __ptext22:
  6822                           	opt stack 0
  6823  0016AA                     _strtol:
  6824                           	opt stack 20
  6825                           
  6826                           ;incstack = 0
  6827  0016AA  C026  FFD9         	movff	strtol@s,fsr2l
  6828  0016AE  C027  FFDA         	movff	strtol@s+1,fsr2h
  6829  0016B2  50DF               	movf	indf2,w,c
  6830  0016B4  0100               	movlb	0	; () banked
  6831  0016B6  6F65               	movwf	strtol@c& (0+255),b
  6832                           
  6833                           ; BSR set to: 0
  6834  0016B8  4A26               	infsnz	strtol@s,f,c
  6835  0016BA  2A27               	incf	strtol@s+1,f,c
  6836                           
  6837                           ; BSR set to: 0
  6838  0016BC  5165               	movf	strtol@c& (0+255),w,b
  6839  0016BE  ECE9  F01F         	call	_isspace
  6840  0016C2  B0D8               	btfsc	status,0,c
  6841  0016C4  D7F2               	goto	_strtol
  6842  0016C6  0E00               	movlw	0
  6843  0016C8  0100               	movlb	0	; () banked
  6844  0016CA  6F61               	movwf	strtol@a& (0+255),b
  6845  0016CC  0E00               	movlw	0
  6846  0016CE  6F62               	movwf	(strtol@a+1)& (0+255),b
  6847  0016D0  0E00               	movlw	0
  6848  0016D2  6F63               	movwf	(strtol@a+2)& (0+255),b
  6849  0016D4  0E00               	movlw	0
  6850  0016D6  6F64               	movwf	(strtol@a+3)& (0+255),b
  6851  0016D8  0E00               	movlw	0
  6852  0016DA  6F60               	movwf	strtol@sign& (0+255),b
  6853                           
  6854                           ; BSR set to: 0
  6855  0016DC  0E2D               	movlw	45
  6856  0016DE  1965               	xorwf	strtol@c& (0+255),w,b
  6857  0016E0  A4D8               	btfss	status,2,c
  6858  0016E2  D003               	goto	l2123
  6859                           
  6860                           ; BSR set to: 0
  6861  0016E4  0E01               	movlw	1
  6862  0016E6  6F60               	movwf	strtol@sign& (0+255),b
  6863  0016E8  D004               	goto	u7930
  6864  0016EA                     l2123:
  6865                           
  6866                           ; BSR set to: 0
  6867                           
  6868                           ; BSR set to: 0
  6869  0016EA  0E2B               	movlw	43
  6870  0016EC  1965               	xorwf	strtol@c& (0+255),w,b
  6871  0016EE  A4D8               	btfss	status,2,c
  6872  0016F0  D008               	goto	l2125
  6873  0016F2                     u7930:
  6874                           
  6875                           ; BSR set to: 0
  6876  0016F2  C026  FFD9         	movff	strtol@s,fsr2l
  6877  0016F6  C027  FFDA         	movff	strtol@s+1,fsr2h
  6878  0016FA  50DF               	movf	indf2,w,c
  6879  0016FC  6F65               	movwf	strtol@c& (0+255),b
  6880                           
  6881                           ; BSR set to: 0
  6882  0016FE  4A26               	infsnz	strtol@s,f,c
  6883  001700  2A27               	incf	strtol@s+1,f,c
  6884  001702                     l2125:
  6885                           
  6886                           ; BSR set to: 0
  6887                           
  6888                           ; BSR set to: 0
  6889                           
  6890                           ; BSR set to: 0
  6891  001702  0E30               	movlw	48
  6892  001704  1965               	xorwf	strtol@c& (0+255),w,b
  6893  001706  A4D8               	btfss	status,2,c
  6894  001708  D02E               	goto	l2133
  6895                           
  6896                           ; BSR set to: 0
  6897  00170A  C026  FFD9         	movff	strtol@s,fsr2l
  6898  00170E  C027  FFDA         	movff	strtol@s+1,fsr2h
  6899  001712  50DF               	movf	indf2,w,c
  6900  001714  6F65               	movwf	strtol@c& (0+255),b
  6901                           
  6902                           ; BSR set to: 0
  6903  001716  4A26               	infsnz	strtol@s,f,c
  6904  001718  2A27               	incf	strtol@s+1,f,c
  6905                           
  6906                           ; BSR set to: 0
  6907  00171A  502A               	movf	strtol@base,w,c
  6908  00171C  102B               	iorwf	strtol@base+1,w,c
  6909  00171E  B4D8               	btfsc	status,2,c
  6910  001720  D005               	goto	u7960
  6911                           
  6912                           ; BSR set to: 0
  6913  001722  0E10               	movlw	16
  6914  001724  182A               	xorwf	strtol@base,w,c
  6915  001726  102B               	iorwf	strtol@base+1,w,c
  6916  001728  A4D8               	btfss	status,2,c
  6917  00172A  D015               	goto	l2127
  6918  00172C                     u7960:
  6919                           
  6920                           ; BSR set to: 0
  6921                           
  6922                           ; BSR set to: 0
  6923  00172C  0E78               	movlw	120
  6924  00172E  1965               	xorwf	strtol@c& (0+255),w,b
  6925  001730  B4D8               	btfsc	status,2,c
  6926  001732  D004               	goto	u7980
  6927                           
  6928                           ; BSR set to: 0
  6929  001734  0E58               	movlw	88
  6930  001736  1965               	xorwf	strtol@c& (0+255),w,b
  6931  001738  A4D8               	btfss	status,2,c
  6932  00173A  D00D               	goto	l2127
  6933  00173C                     u7980:
  6934                           
  6935                           ; BSR set to: 0
  6936                           
  6937                           ; BSR set to: 0
  6938  00173C  0E00               	movlw	0
  6939  00173E  6E2B               	movwf	strtol@base+1,c
  6940  001740  0E10               	movlw	16
  6941  001742  6E2A               	movwf	strtol@base,c
  6942                           
  6943                           ; BSR set to: 0
  6944  001744  C026  FFD9         	movff	strtol@s,fsr2l
  6945  001748  C027  FFDA         	movff	strtol@s+1,fsr2h
  6946  00174C  50DF               	movf	indf2,w,c
  6947  00174E  6F65               	movwf	strtol@c& (0+255),b
  6948                           
  6949                           ; BSR set to: 0
  6950  001750  4A26               	infsnz	strtol@s,f,c
  6951  001752  2A27               	incf	strtol@s+1,f,c
  6952  001754  D008               	goto	l2133
  6953  001756                     l2127:
  6954                           
  6955                           ; BSR set to: 0
  6956                           
  6957                           ; BSR set to: 0
  6958  001756  502A               	movf	strtol@base,w,c
  6959  001758  102B               	iorwf	strtol@base+1,w,c
  6960  00175A  A4D8               	btfss	status,2,c
  6961  00175C  D004               	goto	l2133
  6962                           
  6963                           ; BSR set to: 0
  6964  00175E  0E00               	movlw	0
  6965  001760  6E2B               	movwf	strtol@base+1,c
  6966  001762  0E08               	movlw	8
  6967  001764  6E2A               	movwf	strtol@base,c
  6968  001766                     l2133:
  6969                           
  6970                           ; BSR set to: 0
  6971                           
  6972                           ; BSR set to: 0
  6973                           
  6974                           ; BSR set to: 0
  6975                           
  6976                           ; BSR set to: 0
  6977  001766  502A               	movf	strtol@base,w,c
  6978  001768  102B               	iorwf	strtol@base+1,w,c
  6979  00176A  A4D8               	btfss	status,2,c
  6980  00176C  D004               	goto	l2134
  6981                           
  6982                           ; BSR set to: 0
  6983  00176E  0E00               	movlw	0
  6984  001770  6E2B               	movwf	strtol@base+1,c
  6985  001772  0E0A               	movlw	10
  6986  001774  6E2A               	movwf	strtol@base,c
  6987  001776                     l2134:
  6988                           
  6989                           ; BSR set to: 0
  6990                           
  6991                           ; BSR set to: 0
  6992                           
  6993                           ; BSR set to: 0
  6994  001776  5165               	movf	strtol@c& (0+255),w,b
  6995  001778  ECD5  F01F         	call	_isalpha
  6996  00177C  A0D8               	btfss	status,0,c
  6997  00177E  D008               	goto	l2136
  6998  001780  0100               	movlb	0	; () banked
  6999  001782  5165               	movf	strtol@c& (0+255),w,b
  7000  001784  ECF0  F020         	call	_toupper
  7001  001788  0FC9               	addlw	201
  7002  00178A  0100               	movlb	0	; () banked
  7003  00178C  6F65               	movwf	strtol@c& (0+255),b
  7004  00178E  D009               	goto	l2139
  7005  001790                     l2136:
  7006                           
  7007                           ; BSR set to: 0
  7008  001790  0100               	movlb	0	; () banked
  7009  001792  5165               	movf	strtol@c& (0+255),w,b
  7010  001794  EC77  F020         	call	_isdigit
  7011  001798  A0D8               	btfss	status,0,c
  7012  00179A  D039               	goto	l2140
  7013  00179C  0E30               	movlw	48
  7014  00179E  0100               	movlb	0	; () banked
  7015  0017A0  5F65               	subwf	strtol@c& (0+255),f,b
  7016  0017A2                     l2139:
  7017                           
  7018                           ; BSR set to: 0
  7019                           
  7020                           ; BSR set to: 0
  7021                           
  7022                           ; BSR set to: 0
  7023  0017A2  5165               	movf	strtol@c& (0+255),w,b
  7024  0017A4  6E2C               	movwf	??_strtol& (0+255),c
  7025  0017A6  6A2D               	clrf	(??_strtol+1)& (0+255),c
  7026  0017A8  502A               	movf	strtol@base,w,c
  7027  0017AA  5C2C               	subwf	??_strtol,w,c
  7028  0017AC  502D               	movf	??_strtol+1,w,c
  7029  0017AE  0A80               	xorlw	128
  7030  0017B0  6E2E               	movwf	(??_strtol+2)& (0+255),c
  7031  0017B2  502B               	movf	strtol@base+1,w,c
  7032  0017B4  0A80               	xorlw	128
  7033  0017B6  582E               	subwfb	(??_strtol+2)& (0+255),w,c
  7034  0017B8  B0D8               	btfsc	status,0,c
  7035  0017BA  D029               	goto	l2140
  7036                           
  7037                           ; BSR set to: 0
  7038                           
  7039                           ; BSR set to: 0
  7040                           
  7041                           ; BSR set to: 0
  7042  0017BC  C02A  F01A         	movff	strtol@base,___lmul@multiplier
  7043  0017C0  C02B  F01B         	movff	strtol@base+1,___lmul@multiplier+1
  7044  0017C4  0E00               	movlw	0
  7045  0017C6  BE1B               	btfsc	___lmul@multiplier+1,7,c
  7046  0017C8  0EFF               	movlw	-1
  7047  0017CA  6E1C               	movwf	___lmul@multiplier+2,c
  7048  0017CC  6E1D               	movwf	___lmul@multiplier+3,c
  7049  0017CE  C061  F01E         	movff	strtol@a,___lmul@multiplicand
  7050  0017D2  C062  F01F         	movff	strtol@a+1,___lmul@multiplicand+1
  7051  0017D6  C063  F020         	movff	strtol@a+2,___lmul@multiplicand+2
  7052  0017DA  C064  F021         	movff	strtol@a+3,___lmul@multiplicand+3
  7053  0017DE  EC8E  F01C         	call	___lmul	;wreg free
  7054  0017E2  0100               	movlb	0	; () banked
  7055  0017E4  5165               	movf	strtol@c& (0+255),w,b
  7056  0017E6  241A               	addwf	?___lmul,w,c
  7057  0017E8  6F61               	movwf	strtol@a& (0+255),b
  7058  0017EA  0E00               	movlw	0
  7059  0017EC  201B               	addwfc	?___lmul+1,w,c
  7060  0017EE  6F62               	movwf	(strtol@a+1)& (0+255),b
  7061  0017F0  0E00               	movlw	0
  7062  0017F2  201C               	addwfc	?___lmul+2,w,c
  7063  0017F4  6F63               	movwf	(strtol@a+2)& (0+255),b
  7064  0017F6  0E00               	movlw	0
  7065  0017F8  201D               	addwfc	?___lmul+3,w,c
  7066  0017FA  6F64               	movwf	(strtol@a+3)& (0+255),b
  7067                           
  7068                           ; BSR set to: 0
  7069  0017FC  C026  FFD9         	movff	strtol@s,fsr2l
  7070  001800  C027  FFDA         	movff	strtol@s+1,fsr2h
  7071  001804  50DF               	movf	indf2,w,c
  7072  001806  6F65               	movwf	strtol@c& (0+255),b
  7073                           
  7074                           ; BSR set to: 0
  7075  001808  4A26               	infsnz	strtol@s,f,c
  7076  00180A  2A27               	incf	strtol@s+1,f,c
  7077  00180C  D7B4               	goto	l2134
  7078  00180E                     l2140:
  7079                           
  7080                           ; BSR set to: 0
  7081  00180E  5028               	movf	strtol@endptr,w,c
  7082  001810  1029               	iorwf	strtol@endptr+1,w,c
  7083  001812  B4D8               	btfsc	status,2,c
  7084  001814  D00E               	goto	l2142
  7085  001816  0EFF               	movlw	255
  7086  001818  2426               	addwf	strtol@s,w,c
  7087  00181A  6E2C               	movwf	??_strtol& (0+255),c
  7088  00181C  0EFF               	movlw	255
  7089  00181E  2027               	addwfc	strtol@s+1,w,c
  7090  001820  6E2D               	movwf	(??_strtol+1)& (0+255),c
  7091  001822  C028  FFD9         	movff	strtol@endptr,fsr2l
  7092  001826  C029  FFDA         	movff	strtol@endptr+1,fsr2h
  7093  00182A  C02C  FFDE         	movff	??_strtol,postinc2
  7094  00182E  C02D  FFDD         	movff	??_strtol+1,postdec2
  7095  001832                     l2142:
  7096  001832  0100               	movlb	0	; () banked
  7097  001834  5160               	movf	strtol@sign& (0+255),w,b
  7098  001836  B4D8               	btfsc	status,2,c
  7099  001838  D01A               	goto	l2143
  7100                           
  7101                           ; BSR set to: 0
  7102  00183A  C061  F02C         	movff	strtol@a,??_strtol
  7103  00183E  C062  F02D         	movff	strtol@a+1,??_strtol+1
  7104  001842  C063  F02E         	movff	strtol@a+2,??_strtol+2
  7105  001846  C064  F02F         	movff	strtol@a+3,??_strtol+3
  7106  00184A  1E2C               	comf	??_strtol,f,c
  7107  00184C  1E2D               	comf	??_strtol+1,f,c
  7108  00184E  1E2E               	comf	??_strtol+2,f,c
  7109  001850  1E2F               	comf	??_strtol+3,f,c
  7110  001852  2A2C               	incf	??_strtol,f,c
  7111  001854  0E00               	movlw	0
  7112  001856  222D               	addwfc	??_strtol+1,f,c
  7113  001858  222E               	addwfc	??_strtol+2,f,c
  7114  00185A  222F               	addwfc	??_strtol+3,f,c
  7115  00185C  C02C  F026         	movff	??_strtol,?_strtol
  7116  001860  C02D  F027         	movff	??_strtol+1,?_strtol+1
  7117  001864  C02E  F028         	movff	??_strtol+2,?_strtol+2
  7118  001868  C02F  F029         	movff	??_strtol+3,?_strtol+3
  7119                           
  7120                           ; BSR set to: 0
  7121  00186C  0012               	return	
  7122  00186E                     l2143:
  7123                           
  7124                           ; BSR set to: 0
  7125  00186E  C061  F026         	movff	strtol@a,?_strtol
  7126  001872  C062  F027         	movff	strtol@a+1,?_strtol+1
  7127  001876  C063  F028         	movff	strtol@a+2,?_strtol+2
  7128  00187A  C064  F029         	movff	strtol@a+3,?_strtol+3
  7129                           
  7130                           ; BSR set to: 0
  7131  00187E  0012               	return		;funcret
  7132  001880                     __end_of_strtol:
  7133                           	opt stack 0
  7134                           tosu	equ	0xFFF
  7135                           tosh	equ	0xFFE
  7136                           tosl	equ	0xFFD
  7137                           pclath	equ	0xFFA
  7138                           tblptru	equ	0xFF8
  7139                           tblptrh	equ	0xFF7
  7140                           tblptrl	equ	0xFF6
  7141                           tablat	equ	0xFF5
  7142                           prodh	equ	0xFF4
  7143                           prodl	equ	0xFF3
  7144                           postinc0	equ	0xFEE
  7145                           plusw0	equ	0xFEB
  7146                           wreg	equ	0xFE8
  7147                           indf1	equ	0xFE7
  7148                           postdec1	equ	0xFE5
  7149                           fsr1h	equ	0xFE2
  7150                           fsr1l	equ	0xFE1
  7151                           indf2	equ	0xFDF
  7152                           postinc2	equ	0xFDE
  7153                           postdec2	equ	0xFDD
  7154                           plusw2	equ	0xFDB
  7155                           fsr2h	equ	0xFDA
  7156                           fsr2l	equ	0xFD9
  7157                           status	equ	0xFD8
  7158                           
  7159 ;; *************** function _toupper *****************
  7160 ;; Defined at:
  7161 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  7162 ;; Parameters:    Size  Location     Type
  7163 ;;  c               1    wreg     unsigned char 
  7164 ;; Auto vars:     Size  Location     Type
  7165 ;;  c               1   23[COMRAM] unsigned char 
  7166 ;; Return value:  Size  Location     Type
  7167 ;;                  1    wreg      unsigned char 
  7168 ;; Registers used:
  7169 ;;		wreg, status,2, status,0
  7170 ;; Tracked objects:
  7171 ;;		On entry : 0/0
  7172 ;;		On exit  : 0/0
  7173 ;;		Unchanged: 0/0
  7174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7175 ;;      Params:         0       0       0       0       0       0       0
  7176 ;;      Locals:         1       0       0       0       0       0       0
  7177 ;;      Temps:          0       0       0       0       0       0       0
  7178 ;;      Totals:         1       0       0       0       0       0       0
  7179 ;;Total ram usage:        1 bytes
  7180 ;; Hardware stack levels used:    1
  7181 ;; Hardware stack levels required when called:    4
  7182 ;; This function calls:
  7183 ;;		Nothing
  7184 ;; This function is called by:
  7185 ;;		_strtol
  7186 ;; This function uses a non-reentrant model
  7187 ;;
  7188                           
  7189                           	psect	text23
  7190  0041E0                     __ptext23:
  7191                           	opt stack 0
  7192  0041E0                     _toupper:
  7193                           	opt stack 21
  7194                           
  7195                           ; BSR set to: 0
  7196                           ;incstack = 0
  7197                           ;toupper@c stored from wreg
  7198  0041E0  6E18               	movwf	toupper@c,c
  7199  0041E2  0E7B               	movlw	123
  7200  0041E4  6018               	cpfslt	toupper@c,c
  7201  0041E6  D004               	goto	l2147
  7202  0041E8  0E60               	movlw	96
  7203  0041EA  6418               	cpfsgt	toupper@c,c
  7204  0041EC  D001               	goto	l2147
  7205  0041EE  9A18               	bcf	toupper@c,5,c
  7206  0041F0                     l2147:
  7207  0041F0  5018               	movf	toupper@c,w,c
  7208  0041F2  0012               	return	
  7209  0041F4                     __end_of_toupper:
  7210                           	opt stack 0
  7211                           tosu	equ	0xFFF
  7212                           tosh	equ	0xFFE
  7213                           tosl	equ	0xFFD
  7214                           pclath	equ	0xFFA
  7215                           tblptru	equ	0xFF8
  7216                           tblptrh	equ	0xFF7
  7217                           tblptrl	equ	0xFF6
  7218                           tablat	equ	0xFF5
  7219                           prodh	equ	0xFF4
  7220                           prodl	equ	0xFF3
  7221                           postinc0	equ	0xFEE
  7222                           plusw0	equ	0xFEB
  7223                           wreg	equ	0xFE8
  7224                           indf1	equ	0xFE7
  7225                           postdec1	equ	0xFE5
  7226                           fsr1h	equ	0xFE2
  7227                           fsr1l	equ	0xFE1
  7228                           indf2	equ	0xFDF
  7229                           postinc2	equ	0xFDE
  7230                           postdec2	equ	0xFDD
  7231                           plusw2	equ	0xFDB
  7232                           fsr2h	equ	0xFDA
  7233                           fsr2l	equ	0xFD9
  7234                           status	equ	0xFD8
  7235                           
  7236 ;; *************** function _isspace *****************
  7237 ;; Defined at:
  7238 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  7239 ;; Parameters:    Size  Location     Type
  7240 ;;  c               1    wreg     unsigned char 
  7241 ;; Auto vars:     Size  Location     Type
  7242 ;;  c               1   25[COMRAM] unsigned char 
  7243 ;; Return value:  Size  Location     Type
  7244 ;;		None               void
  7245 ;; Registers used:
  7246 ;;		wreg, status,2, status,0
  7247 ;; Tracked objects:
  7248 ;;		On entry : 0/0
  7249 ;;		On exit  : 0/0
  7250 ;;		Unchanged: 0/0
  7251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7252 ;;      Params:         0       0       0       0       0       0       0
  7253 ;;      Locals:         2       0       0       0       0       0       0
  7254 ;;      Temps:          1       0       0       0       0       0       0
  7255 ;;      Totals:         3       0       0       0       0       0       0
  7256 ;;Total ram usage:        3 bytes
  7257 ;; Hardware stack levels used:    1
  7258 ;; Hardware stack levels required when called:    4
  7259 ;; This function calls:
  7260 ;;		Nothing
  7261 ;; This function is called by:
  7262 ;;		_strtol
  7263 ;; This function uses a non-reentrant model
  7264 ;;
  7265                           
  7266                           	psect	text24
  7267  003FD2                     __ptext24:
  7268                           	opt stack 0
  7269  003FD2                     _isspace:
  7270                           	opt stack 21
  7271                           
  7272                           ;incstack = 0
  7273                           ;isspace@c stored from wreg
  7274  003FD2  6E1A               	movwf	isspace@c,c
  7275  003FD4  0E01               	movlw	1
  7276  003FD6  6E19               	movwf	_isspace$3272,c
  7277  003FD8  0E20               	movlw	32
  7278  003FDA  181A               	xorwf	isspace@c,w,c
  7279  003FDC  B4D8               	btfsc	status,2,c
  7280  003FDE  D008               	goto	l2229
  7281  003FE0  0E0E               	movlw	14
  7282  003FE2  601A               	cpfslt	isspace@c,c
  7283  003FE4  D003               	goto	u7700
  7284  003FE6  0E09               	movlw	9
  7285  003FE8  601A               	cpfslt	isspace@c,c
  7286  003FEA  D002               	goto	l2229
  7287  003FEC                     u7700:
  7288  003FEC  0E00               	movlw	0
  7289  003FEE  6E19               	movwf	_isspace$3272,c
  7290  003FF0                     l2229:
  7291  003FF0  C019  F018         	movff	_isspace$3272,??_isspace
  7292  003FF4  3018               	rrcf	??_isspace,w,c
  7293  003FF6  0012               	return	
  7294  003FF8                     __end_of_isspace:
  7295                           	opt stack 0
  7296                           tosu	equ	0xFFF
  7297                           tosh	equ	0xFFE
  7298                           tosl	equ	0xFFD
  7299                           pclath	equ	0xFFA
  7300                           tblptru	equ	0xFF8
  7301                           tblptrh	equ	0xFF7
  7302                           tblptrl	equ	0xFF6
  7303                           tablat	equ	0xFF5
  7304                           prodh	equ	0xFF4
  7305                           prodl	equ	0xFF3
  7306                           postinc0	equ	0xFEE
  7307                           plusw0	equ	0xFEB
  7308                           wreg	equ	0xFE8
  7309                           indf1	equ	0xFE7
  7310                           postdec1	equ	0xFE5
  7311                           fsr1h	equ	0xFE2
  7312                           fsr1l	equ	0xFE1
  7313                           indf2	equ	0xFDF
  7314                           postinc2	equ	0xFDE
  7315                           postdec2	equ	0xFDD
  7316                           plusw2	equ	0xFDB
  7317                           fsr2h	equ	0xFDA
  7318                           fsr2l	equ	0xFD9
  7319                           status	equ	0xFD8
  7320                           
  7321 ;; *************** function _isdigit *****************
  7322 ;; Defined at:
  7323 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  7324 ;; Parameters:    Size  Location     Type
  7325 ;;  c               1    wreg     unsigned char 
  7326 ;; Auto vars:     Size  Location     Type
  7327 ;;  c               1   25[COMRAM] unsigned char 
  7328 ;; Return value:  Size  Location     Type
  7329 ;;		None               void
  7330 ;; Registers used:
  7331 ;;		wreg, status,2, status,0
  7332 ;; Tracked objects:
  7333 ;;		On entry : 0/0
  7334 ;;		On exit  : 0/0
  7335 ;;		Unchanged: 0/0
  7336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7337 ;;      Params:         0       0       0       0       0       0       0
  7338 ;;      Locals:         2       0       0       0       0       0       0
  7339 ;;      Temps:          1       0       0       0       0       0       0
  7340 ;;      Totals:         3       0       0       0       0       0       0
  7341 ;;Total ram usage:        3 bytes
  7342 ;; Hardware stack levels used:    1
  7343 ;; Hardware stack levels required when called:    4
  7344 ;; This function calls:
  7345 ;;		Nothing
  7346 ;; This function is called by:
  7347 ;;		_strtol
  7348 ;; This function uses a non-reentrant model
  7349 ;;
  7350                           
  7351                           	psect	text25
  7352  0040EE                     __ptext25:
  7353                           	opt stack 0
  7354  0040EE                     _isdigit:
  7355                           	opt stack 21
  7356                           
  7357                           ;incstack = 0
  7358                           ;isdigit@c stored from wreg
  7359  0040EE  6E1A               	movwf	isdigit@c,c
  7360  0040F0  0E00               	movlw	0
  7361  0040F2  6E19               	movwf	_isdigit$3269,c
  7362  0040F4  0E3A               	movlw	58
  7363  0040F6  601A               	cpfslt	isdigit@c,c
  7364  0040F8  D005               	goto	l2224
  7365  0040FA  0E2F               	movlw	47
  7366  0040FC  641A               	cpfsgt	isdigit@c,c
  7367  0040FE  D002               	goto	l2224
  7368  004100  0E01               	movlw	1
  7369  004102  6E19               	movwf	_isdigit$3269,c
  7370  004104                     l2224:
  7371  004104  C019  F018         	movff	_isdigit$3269,??_isdigit
  7372  004108  3018               	rrcf	??_isdigit,w,c
  7373  00410A  0012               	return	
  7374  00410C                     __end_of_isdigit:
  7375                           	opt stack 0
  7376                           tosu	equ	0xFFF
  7377                           tosh	equ	0xFFE
  7378                           tosl	equ	0xFFD
  7379                           pclath	equ	0xFFA
  7380                           tblptru	equ	0xFF8
  7381                           tblptrh	equ	0xFF7
  7382                           tblptrl	equ	0xFF6
  7383                           tablat	equ	0xFF5
  7384                           prodh	equ	0xFF4
  7385                           prodl	equ	0xFF3
  7386                           postinc0	equ	0xFEE
  7387                           plusw0	equ	0xFEB
  7388                           wreg	equ	0xFE8
  7389                           indf1	equ	0xFE7
  7390                           postdec1	equ	0xFE5
  7391                           fsr1h	equ	0xFE2
  7392                           fsr1l	equ	0xFE1
  7393                           indf2	equ	0xFDF
  7394                           postinc2	equ	0xFDE
  7395                           postdec2	equ	0xFDD
  7396                           plusw2	equ	0xFDB
  7397                           fsr2h	equ	0xFDA
  7398                           fsr2l	equ	0xFD9
  7399                           status	equ	0xFD8
  7400                           
  7401 ;; *************** function _isalpha *****************
  7402 ;; Defined at:
  7403 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  7404 ;; Parameters:    Size  Location     Type
  7405 ;;  c               1    wreg     unsigned char 
  7406 ;; Auto vars:     Size  Location     Type
  7407 ;;  c               1   28[COMRAM] unsigned char 
  7408 ;; Return value:  Size  Location     Type
  7409 ;;		None               void
  7410 ;; Registers used:
  7411 ;;		wreg, status,2, status,0, cstack
  7412 ;; Tracked objects:
  7413 ;;		On entry : 0/0
  7414 ;;		On exit  : 0/0
  7415 ;;		Unchanged: 0/0
  7416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7417 ;;      Params:         0       0       0       0       0       0       0
  7418 ;;      Locals:         2       0       0       0       0       0       0
  7419 ;;      Temps:          1       0       0       0       0       0       0
  7420 ;;      Totals:         3       0       0       0       0       0       0
  7421 ;;Total ram usage:        3 bytes
  7422 ;; Hardware stack levels used:    1
  7423 ;; Hardware stack levels required when called:    5
  7424 ;; This function calls:
  7425 ;;		_isupper
  7426 ;; This function is called by:
  7427 ;;		_strtol
  7428 ;; This function uses a non-reentrant model
  7429 ;;
  7430                           
  7431                           	psect	text26
  7432  003FAA                     __ptext26:
  7433                           	opt stack 0
  7434  003FAA                     _isalpha:
  7435                           	opt stack 20
  7436                           
  7437                           ;incstack = 0
  7438                           ;isalpha@c stored from wreg
  7439  003FAA  6E1D               	movwf	isalpha@c,c
  7440  003FAC  0E01               	movlw	1
  7441  003FAE  6E1C               	movwf	_isalpha$3266,c
  7442  003FB0  0E7B               	movlw	123
  7443  003FB2  601D               	cpfslt	isalpha@c,c
  7444  003FB4  D003               	goto	u7720
  7445  003FB6  0E61               	movlw	97
  7446  003FB8  601D               	cpfslt	isalpha@c,c
  7447  003FBA  D007               	goto	l2219
  7448  003FBC                     u7720:
  7449  003FBC  501D               	movf	isalpha@c,w,c
  7450  003FBE  EC86  F020         	call	_isupper
  7451  003FC2  B0D8               	btfsc	status,0,c
  7452  003FC4  D002               	goto	l2219
  7453  003FC6  0E00               	movlw	0
  7454  003FC8  6E1C               	movwf	_isalpha$3266,c
  7455  003FCA                     l2219:
  7456  003FCA  C01C  F01B         	movff	_isalpha$3266,??_isalpha
  7457  003FCE  301B               	rrcf	??_isalpha,w,c
  7458  003FD0  0012               	return	
  7459  003FD2                     __end_of_isalpha:
  7460                           	opt stack 0
  7461                           tosu	equ	0xFFF
  7462                           tosh	equ	0xFFE
  7463                           tosl	equ	0xFFD
  7464                           pclath	equ	0xFFA
  7465                           tblptru	equ	0xFF8
  7466                           tblptrh	equ	0xFF7
  7467                           tblptrl	equ	0xFF6
  7468                           tablat	equ	0xFF5
  7469                           prodh	equ	0xFF4
  7470                           prodl	equ	0xFF3
  7471                           postinc0	equ	0xFEE
  7472                           plusw0	equ	0xFEB
  7473                           wreg	equ	0xFE8
  7474                           indf1	equ	0xFE7
  7475                           postdec1	equ	0xFE5
  7476                           fsr1h	equ	0xFE2
  7477                           fsr1l	equ	0xFE1
  7478                           indf2	equ	0xFDF
  7479                           postinc2	equ	0xFDE
  7480                           postdec2	equ	0xFDD
  7481                           plusw2	equ	0xFDB
  7482                           fsr2h	equ	0xFDA
  7483                           fsr2l	equ	0xFD9
  7484                           status	equ	0xFD8
  7485                           
  7486 ;; *************** function _isupper *****************
  7487 ;; Defined at:
  7488 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  7489 ;; Parameters:    Size  Location     Type
  7490 ;;  c               1    wreg     unsigned char 
  7491 ;; Auto vars:     Size  Location     Type
  7492 ;;  c               1   25[COMRAM] unsigned char 
  7493 ;; Return value:  Size  Location     Type
  7494 ;;		None               void
  7495 ;; Registers used:
  7496 ;;		wreg, status,2, status,0
  7497 ;; Tracked objects:
  7498 ;;		On entry : 0/0
  7499 ;;		On exit  : 0/0
  7500 ;;		Unchanged: 0/0
  7501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7502 ;;      Params:         0       0       0       0       0       0       0
  7503 ;;      Locals:         2       0       0       0       0       0       0
  7504 ;;      Temps:          1       0       0       0       0       0       0
  7505 ;;      Totals:         3       0       0       0       0       0       0
  7506 ;;Total ram usage:        3 bytes
  7507 ;; Hardware stack levels used:    1
  7508 ;; Hardware stack levels required when called:    4
  7509 ;; This function calls:
  7510 ;;		Nothing
  7511 ;; This function is called by:
  7512 ;;		_isalpha
  7513 ;; This function uses a non-reentrant model
  7514 ;;
  7515                           
  7516                           	psect	text27
  7517  00410C                     __ptext27:
  7518                           	opt stack 0
  7519  00410C                     _isupper:
  7520                           	opt stack 20
  7521                           
  7522                           ;incstack = 0
  7523                           ;isupper@c stored from wreg
  7524  00410C  6E1A               	movwf	isupper@c,c
  7525  00410E  0E00               	movlw	0
  7526  004110  6E19               	movwf	_isupper$3275,c
  7527  004112  0E5B               	movlw	91
  7528  004114  601A               	cpfslt	isupper@c,c
  7529  004116  D005               	goto	l2234
  7530  004118  0E40               	movlw	64
  7531  00411A  641A               	cpfsgt	isupper@c,c
  7532  00411C  D002               	goto	l2234
  7533  00411E  0E01               	movlw	1
  7534  004120  6E19               	movwf	_isupper$3275,c
  7535  004122                     l2234:
  7536  004122  C019  F018         	movff	_isupper$3275,??_isupper
  7537  004126  3018               	rrcf	??_isupper,w,c
  7538  004128  0012               	return	
  7539  00412A                     __end_of_isupper:
  7540                           	opt stack 0
  7541                           tosu	equ	0xFFF
  7542                           tosh	equ	0xFFE
  7543                           tosl	equ	0xFFD
  7544                           pclath	equ	0xFFA
  7545                           tblptru	equ	0xFF8
  7546                           tblptrh	equ	0xFF7
  7547                           tblptrl	equ	0xFF6
  7548                           tablat	equ	0xFF5
  7549                           prodh	equ	0xFF4
  7550                           prodl	equ	0xFF3
  7551                           postinc0	equ	0xFEE
  7552                           plusw0	equ	0xFEB
  7553                           wreg	equ	0xFE8
  7554                           indf1	equ	0xFE7
  7555                           postdec1	equ	0xFE5
  7556                           fsr1h	equ	0xFE2
  7557                           fsr1l	equ	0xFE1
  7558                           indf2	equ	0xFDF
  7559                           postinc2	equ	0xFDE
  7560                           postdec2	equ	0xFDD
  7561                           plusw2	equ	0xFDB
  7562                           fsr2h	equ	0xFDA
  7563                           fsr2l	equ	0xFD9
  7564                           status	equ	0xFD8
  7565                           
  7566 ;; *************** function _DacReadValue *****************
  7567 ;; Defined at:
  7568 ;;		line 44 in file "DacApp.c"
  7569 ;; Parameters:    Size  Location     Type
  7570 ;;  data            2  104[BANK0 ] PTR unsigned char 
  7571 ;;		 -> rxMsgData(20), 
  7572 ;; Auto vars:     Size  Location     Type
  7573 ;;  byteIdx         2  120[BANK0 ] int 
  7574 ;;  TxMsg           7  113[BANK0 ] unsigned char [7]
  7575 ;;  readVal         2  110[BANK0 ] unsigned int 
  7576 ;;  dacIndex        1  112[BANK0 ] unsigned char 
  7577 ;;  byteNum         1  109[BANK0 ] unsigned char 
  7578 ;;  regNum          1  108[BANK0 ] unsigned char 
  7579 ;; Return value:  Size  Location     Type
  7580 ;;                  1    wreg      void 
  7581 ;; Registers used:
  7582 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7583 ;; Tracked objects:
  7584 ;;		On entry : 0/0
  7585 ;;		On exit  : 0/0
  7586 ;;		Unchanged: 0/0
  7587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7588 ;;      Params:         0       2       0       0       0       0       0
  7589 ;;      Locals:         0      14       0       0       0       0       0
  7590 ;;      Temps:          0       2       0       0       0       0       0
  7591 ;;      Totals:         0      18       0       0       0       0       0
  7592 ;;Total ram usage:       18 bytes
  7593 ;; Hardware stack levels used:    1
  7594 ;; Hardware stack levels required when called:   10
  7595 ;; This function calls:
  7596 ;;		_ReadIntFromEeprom
  7597 ;;		_WriteUartMessage
  7598 ;;		_ZeroArray
  7599 ;;		_crc8
  7600 ;;		_make8
  7601 ;; This function is called by:
  7602 ;;		_GroupDAC
  7603 ;; This function uses a non-reentrant model
  7604 ;;
  7605                           
  7606                           	psect	text28
  7607  0027EA                     __ptext28:
  7608                           	opt stack 0
  7609  0027EA                     _DacReadValue:
  7610                           	opt stack 18
  7611                           
  7612                           ;DacApp.c: 46: uint16_t readVal;
  7613                           ;DacApp.c: 47: uint8_t regNum = 0, byteNum = 0;
  7614                           
  7615                           ;incstack = 0
  7616  0027EA  0E00               	movlw	0
  7617  0027EC  0100               	movlb	0	; () banked
  7618  0027EE  6FCC               	movwf	DacReadValue@regNum& (0+255),b
  7619  0027F0  0E00               	movlw	0
  7620  0027F2  6FCD               	movwf	DacReadValue@byteNum& (0+255),b
  7621                           
  7622                           ; BSR set to: 0
  7623                           ;DacApp.c: 48: char TxMsg[2 + (0x4) + 1];
  7624                           ;DacApp.c: 49: ZeroArray(TxMsg, 2 + (0x4) + 1);
  7625  0027F4  0ED1               	movlw	low DacReadValue@TxMsg
  7626  0027F6  6E20               	movwf	ZeroArray@array,c
  7627  0027F8  0E00               	movlw	high DacReadValue@TxMsg
  7628  0027FA  6E21               	movwf	ZeroArray@array+1,c
  7629  0027FC  0E00               	movlw	0
  7630  0027FE  6E23               	movwf	ZeroArray@size+1,c
  7631  002800  0E07               	movlw	7
  7632  002802  6E22               	movwf	ZeroArray@size,c
  7633  002804  EC95  F020         	call	_ZeroArray	;wreg free
  7634                           
  7635                           ;DacApp.c: 52: TxMsg[(0)] = (0x24);
  7636  002808  0E24               	movlw	36
  7637  00280A  0100               	movlb	0	; () banked
  7638  00280C  6FD1               	movwf	DacReadValue@TxMsg& (0+255),b
  7639                           
  7640                           ; BSR set to: 0
  7641                           ;DacApp.c: 53: TxMsg[(1)] = DAC_MSG;
  7642  00280E  0E06               	movlw	6
  7643  002810  6FD2               	movwf	(DacReadValue@TxMsg+1)& (0+255),b
  7644                           
  7645                           ; BSR set to: 0
  7646                           ;DacApp.c: 54: TxMsg[(2)] = DAC_READ_VALUE;
  7647  002812  0E62               	movlw	98
  7648  002814  6FD3               	movwf	(DacReadValue@TxMsg+2)& (0+255),b
  7649                           
  7650                           ; BSR set to: 0
  7651                           ;DacApp.c: 55: TxMsg[(3)] = 2;
  7652  002816  0E02               	movlw	2
  7653  002818  6FD4               	movwf	(DacReadValue@TxMsg+3)& (0+255),b
  7654                           
  7655                           ; BSR set to: 0
  7656                           ;DacApp.c: 57: uint8_t dacIndex = data[0];
  7657  00281A  C0C8  FFD9         	movff	DacReadValue@data,fsr2l
  7658  00281E  C0C9  FFDA         	movff	DacReadValue@data+1,fsr2h
  7659  002822  50DF               	movf	indf2,w,c
  7660  002824  6FD0               	movwf	DacReadValue@dacIndex& (0+255),b
  7661                           
  7662                           ; BSR set to: 0
  7663                           ;DacApp.c: 58: uint16_t readVal = ReadIntFromEeprom((0x40) | DAC_ADDRES[dacIndex], 2);
  7664  002826  0E00               	movlw	0
  7665  002828  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  7666  00282A  0E02               	movlw	2
  7667  00282C  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  7668  00282E  51D0               	movf	DacReadValue@dacIndex& (0+255),w,b
  7669  002830  0D01               	mullw	1
  7670  002832  0E53               	movlw	low _DAC_ADDRES
  7671  002834  24F3               	addwf	prodl,w,c
  7672  002836  6EF6               	movwf	tblptrl,c
  7673  002838  0E06               	movlw	high _DAC_ADDRES
  7674  00283A  20F4               	addwfc	prodh,w,c
  7675  00283C  6EF7               	movwf	tblptrh,c
  7676  00283E                     	if	0	;There are less than 3 active tblptr bytes
  7677  00283E                     	endif
  7678  00283E  0008               	tblrd		*
  7679  002840  50F5               	movf	tablat,w,c
  7680  002842  0940               	iorlw	64
  7681  002844  EC05  F010         	call	_ReadIntFromEeprom
  7682  002848  C0B1  F0CE         	movff	?_ReadIntFromEeprom,DacReadValue@readVal
  7683  00284C  C0B2  F0CF         	movff	?_ReadIntFromEeprom+1,DacReadValue@readVal+1
  7684                           
  7685                           ;DacApp.c: 60: for(int byteIdx = 0; byteIdx < 2; byteIdx++)
  7686  002850  0E00               	movlw	0
  7687  002852  0100               	movlb	0	; () banked
  7688  002854  6FD9               	movwf	(DacReadValue@byteIdx+1)& (0+255),b
  7689  002856  0E00               	movlw	0
  7690  002858  6FD8               	movwf	DacReadValue@byteIdx& (0+255),b
  7691  00285A                     l8201:
  7692                           
  7693                           ; BSR set to: 0
  7694  00285A  BFD9               	btfsc	(DacReadValue@byteIdx+1)& (0+255),7,b
  7695  00285C  D006               	goto	l411
  7696  00285E  51D9               	movf	(DacReadValue@byteIdx+1)& (0+255),w,b
  7697  002860  E11F               	bnz	l8211
  7698  002862  0E02               	movlw	2
  7699  002864  5DD8               	subwf	DacReadValue@byteIdx& (0+255),w,b
  7700  002866  B0D8               	btfsc	status,0,c
  7701  002868  D01B               	goto	u8680
  7702  00286A                     l411:
  7703                           
  7704                           ; BSR set to: 0
  7705                           ;DacApp.c: 61: {
  7706                           ;DacApp.c: 62: TxMsg[(0x4) + byteIdx] = make8(readVal, byteIdx);
  7707                           
  7708                           ; BSR set to: 0
  7709  00286A  0E04               	movlw	4
  7710  00286C  25D8               	addwf	DacReadValue@byteIdx& (0+255),w,b
  7711  00286E  6FCA               	movwf	??_DacReadValue& (0+255),b
  7712  002870  0E00               	movlw	0
  7713  002872  21D9               	addwfc	(DacReadValue@byteIdx+1)& (0+255),w,b
  7714  002874  6FCB               	movwf	(??_DacReadValue+1)& (0+255),b
  7715  002876  0ED1               	movlw	low DacReadValue@TxMsg
  7716  002878  25CA               	addwf	??_DacReadValue& (0+255),w,b
  7717  00287A  6ED9               	movwf	fsr2l,c
  7718  00287C  0E00               	movlw	high DacReadValue@TxMsg
  7719  00287E  21CB               	addwfc	(??_DacReadValue+1)& (0+255),w,b
  7720  002880  6EDA               	movwf	fsr2h,c
  7721  002882  C0CE  F018         	movff	DacReadValue@readVal,make8@data
  7722  002886  C0CF  F019         	movff	DacReadValue@readVal+1,make8@data+1
  7723  00288A  6A1A               	clrf	make8@data+2,c
  7724  00288C  6A1B               	clrf	make8@data+3,c
  7725  00288E  C0D8  F01C         	movff	DacReadValue@byteIdx,make8@dataLocation
  7726  002892  EC84  F01B         	call	_make8	;wreg free
  7727  002896  6EDF               	movwf	indf2,c
  7728  002898  0100               	movlb	0	; () banked
  7729  00289A  4BD8               	infsnz	DacReadValue@byteIdx& (0+255),f,b
  7730  00289C  2BD9               	incf	(DacReadValue@byteIdx+1)& (0+255),f,b
  7731  00289E  D7DD               	goto	l8201
  7732  0028A0                     u8680:
  7733  0028A0                     l8211:
  7734                           
  7735                           ; BSR set to: 0
  7736                           ;DacApp.c: 63: }
  7737                           ;DacApp.c: 64: TxMsg[2 + (0x4)] = crc8(TxMsg, 2 + (0x4));
  7738  0028A0  0ED1               	movlw	low DacReadValue@TxMsg
  7739  0028A2  6E18               	movwf	crc8@dataArray,c
  7740  0028A4  0E00               	movlw	high DacReadValue@TxMsg
  7741  0028A6  6E19               	movwf	crc8@dataArray+1,c
  7742  0028A8  0E00               	movlw	0
  7743  0028AA  6E1B               	movwf	crc8@dataSize+1,c
  7744  0028AC  0E06               	movlw	6
  7745  0028AE  6E1A               	movwf	crc8@dataSize,c
  7746  0028B0  EC0B  F01D         	call	_crc8	;wreg free
  7747  0028B4  0100               	movlb	0	; () banked
  7748  0028B6  6FD7               	movwf	(DacReadValue@TxMsg+6)& (0+255),b
  7749                           
  7750                           ; BSR set to: 0
  7751                           ;DacApp.c: 65: WriteUartMessage(TxMsg, 2 + (0x4) + 1);
  7752  0028B8  0ED1               	movlw	low DacReadValue@TxMsg
  7753  0028BA  6E19               	movwf	WriteUartMessage@dataBuf,c
  7754  0028BC  0E00               	movlw	high DacReadValue@TxMsg
  7755  0028BE  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  7756  0028C0  0E00               	movlw	0
  7757  0028C2  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  7758  0028C4  0E07               	movlw	7
  7759  0028C6  6E1B               	movwf	WriteUartMessage@dataSize,c
  7760  0028C8  EC9D  F01E         	call	_WriteUartMessage	;wreg free
  7761  0028CC  0012               	return		;funcret
  7762  0028CE                     __end_of_DacReadValue:
  7763                           	opt stack 0
  7764                           tosu	equ	0xFFF
  7765                           tosh	equ	0xFFE
  7766                           tosl	equ	0xFFD
  7767                           pclath	equ	0xFFA
  7768                           tblptru	equ	0xFF8
  7769                           tblptrh	equ	0xFF7
  7770                           tblptrl	equ	0xFF6
  7771                           tablat	equ	0xFF5
  7772                           prodh	equ	0xFF4
  7773                           prodl	equ	0xFF3
  7774                           postinc0	equ	0xFEE
  7775                           plusw0	equ	0xFEB
  7776                           wreg	equ	0xFE8
  7777                           indf1	equ	0xFE7
  7778                           postdec1	equ	0xFE5
  7779                           fsr1h	equ	0xFE2
  7780                           fsr1l	equ	0xFE1
  7781                           indf2	equ	0xFDF
  7782                           postinc2	equ	0xFDE
  7783                           postdec2	equ	0xFDD
  7784                           plusw2	equ	0xFDB
  7785                           fsr2h	equ	0xFDA
  7786                           fsr2l	equ	0xFD9
  7787                           status	equ	0xFD8
  7788                           
  7789 ;; *************** function _testLeds *****************
  7790 ;; Defined at:
  7791 ;;		line 43 in file "LedsApp.c"
  7792 ;; Parameters:    Size  Location     Type
  7793 ;;		None
  7794 ;; Auto vars:     Size  Location     Type
  7795 ;;  idx             2   44[COMRAM] int 
  7796 ;; Return value:  Size  Location     Type
  7797 ;;                  1    wreg      void 
  7798 ;; Registers used:
  7799 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7800 ;; Tracked objects:
  7801 ;;		On entry : 0/0
  7802 ;;		On exit  : 0/0
  7803 ;;		Unchanged: 0/0
  7804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7805 ;;      Params:         0       0       0       0       0       0       0
  7806 ;;      Locals:         2       0       0       0       0       0       0
  7807 ;;      Temps:          1       0       0       0       0       0       0
  7808 ;;      Totals:         3       0       0       0       0       0       0
  7809 ;;Total ram usage:        3 bytes
  7810 ;; Hardware stack levels used:    1
  7811 ;; Hardware stack levels required when called:    7
  7812 ;; This function calls:
  7813 ;;		_SendAckMessage
  7814 ;; This function is called by:
  7815 ;;		_GroupControlMcu
  7816 ;; This function uses a non-reentrant model
  7817 ;;
  7818                           
  7819                           	psect	text29
  7820  003518                     __ptext29:
  7821                           	opt stack 0
  7822  003518                     _testLeds:
  7823                           	opt stack 21
  7824                           
  7825                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  7826                           
  7827                           ;incstack = 0
  7828  003518  0E00               	movlw	0
  7829  00351A  6E2E               	movwf	testLeds@idx+1,c
  7830  00351C  0E00               	movlw	0
  7831  00351E  6E2D               	movwf	testLeds@idx,c
  7832  003520                     l7993:
  7833  003520  BE2E               	btfsc	testLeds@idx+1,7,c
  7834  003522  D006               	goto	l56
  7835  003524  502E               	movf	testLeds@idx+1,w,c
  7836  003526  E127               	bnz	l8007
  7837  003528  0E0A               	movlw	10
  7838  00352A  5C2D               	subwf	testLeds@idx,w,c
  7839  00352C  B0D8               	btfsc	status,0,c
  7840  00352E  D023               	goto	u8350
  7841  003530                     l56:
  7842                           
  7843                           ;LedsApp.c: 47: {
  7844                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  7845  003530  808B               	bsf	3979,0,c	;volatile
  7846                           
  7847                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  7848  003532  0E82               	movlw	130
  7849  003534  6E2C               	movwf	??_testLeds& (0+255),c
  7850  003536  0EDE               	movlw	222
  7851  003538                     u9307:
  7852  003538  2EE8               	decfsz	wreg,f,c
  7853  00353A  D7FE               	bra	u9307
  7854  00353C  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7855  00353E  D7FC               	bra	u9307
  7856                           
  7857                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  7858  003540  888A               	bsf	3978,4,c	;volatile
  7859                           
  7860                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  7861  003542  0E82               	movlw	130
  7862  003544  6E2C               	movwf	??_testLeds& (0+255),c
  7863  003546  0EDE               	movlw	222
  7864  003548                     u9317:
  7865  003548  2EE8               	decfsz	wreg,f,c
  7866  00354A  D7FE               	bra	u9317
  7867  00354C  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7868  00354E  D7FC               	bra	u9317
  7869                           
  7870                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  7871  003550  908B               	bcf	3979,0,c	;volatile
  7872                           
  7873                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  7874  003552  0E82               	movlw	130
  7875  003554  6E2C               	movwf	??_testLeds& (0+255),c
  7876  003556  0EDE               	movlw	222
  7877  003558                     u9327:
  7878  003558  2EE8               	decfsz	wreg,f,c
  7879  00355A  D7FE               	bra	u9327
  7880  00355C  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7881  00355E  D7FC               	bra	u9327
  7882                           
  7883                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  7884  003560  988A               	bcf	3978,4,c	;volatile
  7885                           
  7886                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  7887  003562  0E82               	movlw	130
  7888  003564  6E2C               	movwf	??_testLeds& (0+255),c
  7889  003566  0EDE               	movlw	222
  7890  003568                     u9337:
  7891  003568  2EE8               	decfsz	wreg,f,c
  7892  00356A  D7FE               	bra	u9337
  7893  00356C  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7894  00356E  D7FC               	bra	u9337
  7895  003570  4A2D               	infsnz	testLeds@idx,f,c
  7896  003572  2A2E               	incf	testLeds@idx+1,f,c
  7897  003574  D7D5               	goto	l7993
  7898  003576                     u8350:
  7899  003576                     l8007:
  7900                           
  7901                           ;LedsApp.c: 57: }
  7902                           ;LedsApp.c: 59: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_TEST_LEDS);
  7903  003576  0E14               	movlw	20
  7904  003578  6E24               	movwf	SendAckMessage@inRequest,c
  7905  00357A  0E01               	movlw	1
  7906  00357C  ECE2  F01C         	call	_SendAckMessage
  7907  003580  0012               	return	
  7908  003582                     __end_of_testLeds:
  7909                           	opt stack 0
  7910                           tosu	equ	0xFFF
  7911                           tosh	equ	0xFFE
  7912                           tosl	equ	0xFFD
  7913                           pclath	equ	0xFFA
  7914                           tblptru	equ	0xFF8
  7915                           tblptrh	equ	0xFF7
  7916                           tblptrl	equ	0xFF6
  7917                           tablat	equ	0xFF5
  7918                           prodh	equ	0xFF4
  7919                           prodl	equ	0xFF3
  7920                           postinc0	equ	0xFEE
  7921                           plusw0	equ	0xFEB
  7922                           wreg	equ	0xFE8
  7923                           indf1	equ	0xFE7
  7924                           postdec1	equ	0xFE5
  7925                           fsr1h	equ	0xFE2
  7926                           fsr1l	equ	0xFE1
  7927                           indf2	equ	0xFDF
  7928                           postinc2	equ	0xFDE
  7929                           postdec2	equ	0xFDD
  7930                           plusw2	equ	0xFDB
  7931                           fsr2h	equ	0xFDA
  7932                           fsr2l	equ	0xFD9
  7933                           status	equ	0xFD8
  7934                           
  7935 ;; *************** function _ResetMcu *****************
  7936 ;; Defined at:
  7937 ;;		line 131 in file "SystemCommon.c"
  7938 ;; Parameters:    Size  Location     Type
  7939 ;;		None
  7940 ;; Auto vars:     Size  Location     Type
  7941 ;;		None
  7942 ;; Return value:  Size  Location     Type
  7943 ;;                  1    wreg      void 
  7944 ;; Registers used:
  7945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7946 ;; Tracked objects:
  7947 ;;		On entry : 0/0
  7948 ;;		On exit  : 0/0
  7949 ;;		Unchanged: 0/0
  7950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7951 ;;      Params:         0       0       0       0       0       0       0
  7952 ;;      Locals:         0       0       0       0       0       0       0
  7953 ;;      Temps:          0       0       0       0       0       0       0
  7954 ;;      Totals:         0       0       0       0       0       0       0
  7955 ;;Total ram usage:        0 bytes
  7956 ;; Hardware stack levels used:    1
  7957 ;; Hardware stack levels required when called:    7
  7958 ;; This function calls:
  7959 ;;		_SendAckMessage
  7960 ;; This function is called by:
  7961 ;;		_GroupControlMcu
  7962 ;; This function uses a non-reentrant model
  7963 ;;
  7964                           
  7965                           	psect	text30
  7966  00423E                     __ptext30:
  7967                           	opt stack 0
  7968  00423E                     _ResetMcu:
  7969                           	opt stack 21
  7970                           
  7971                           ;SystemCommon.c: 134: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET
      +                          _MCU);
  7972                           
  7973                           ;incstack = 0
  7974  00423E  0E11               	movlw	17
  7975  004240  6E24               	movwf	SendAckMessage@inRequest,c
  7976  004242  0E01               	movlw	1
  7977  004244  ECE2  F01C         	call	_SendAckMessage
  7978  004248  00FF               	reset		;# 
  7979  00424A  0012               	return		;funcret
  7980  00424C                     __end_of_ResetMcu:
  7981                           	opt stack 0
  7982                           tosu	equ	0xFFF
  7983                           tosh	equ	0xFFE
  7984                           tosl	equ	0xFFD
  7985                           pclath	equ	0xFFA
  7986                           tblptru	equ	0xFF8
  7987                           tblptrh	equ	0xFF7
  7988                           tblptrl	equ	0xFF6
  7989                           tablat	equ	0xFF5
  7990                           prodh	equ	0xFF4
  7991                           prodl	equ	0xFF3
  7992                           postinc0	equ	0xFEE
  7993                           plusw0	equ	0xFEB
  7994                           wreg	equ	0xFE8
  7995                           indf1	equ	0xFE7
  7996                           postdec1	equ	0xFE5
  7997                           fsr1h	equ	0xFE2
  7998                           fsr1l	equ	0xFE1
  7999                           indf2	equ	0xFDF
  8000                           postinc2	equ	0xFDE
  8001                           postdec2	equ	0xFDD
  8002                           plusw2	equ	0xFDB
  8003                           fsr2h	equ	0xFDA
  8004                           fsr2l	equ	0xFD9
  8005                           status	equ	0xFD8
  8006                           
  8007 ;; *************** function _SetChannelMode *****************
  8008 ;; Defined at:
  8009 ;;		line 30 in file "AdcApp.c"
  8010 ;; Parameters:    Size  Location     Type
  8011 ;;  data            2   43[COMRAM] PTR unsigned char 
  8012 ;; Auto vars:     Size  Location     Type
  8013 ;;		None
  8014 ;; Return value:  Size  Location     Type
  8015 ;;                  1    wreg      void 
  8016 ;; Registers used:
  8017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8018 ;; Tracked objects:
  8019 ;;		On entry : 0/0
  8020 ;;		On exit  : 0/0
  8021 ;;		Unchanged: 0/0
  8022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8023 ;;      Params:         2       0       0       0       0       0       0
  8024 ;;      Locals:         0       0       0       0       0       0       0
  8025 ;;      Temps:          0       0       0       0       0       0       0
  8026 ;;      Totals:         2       0       0       0       0       0       0
  8027 ;;Total ram usage:        2 bytes
  8028 ;; Hardware stack levels used:    1
  8029 ;; Hardware stack levels required when called:    7
  8030 ;; This function calls:
  8031 ;;		_SendAckMessage
  8032 ;; This function is called by:
  8033 ;;		_GroupAdc
  8034 ;; This function uses a non-reentrant model
  8035 ;;
  8036                           
  8037                           	psect	text31
  8038  003E72                     __ptext31:
  8039                           	opt stack 0
  8040  003E72                     _SetChannelMode:
  8041                           	opt stack 21
  8042                           
  8043                           ;AdcApp.c: 32: adcSampleMode = data[0];
  8044                           
  8045                           ;incstack = 0
  8046  003E72  C02C  FFD9         	movff	SetChannelMode@data,fsr2l
  8047  003E76  C02D  FFDA         	movff	SetChannelMode@data+1,fsr2h
  8048  003E7A  50DF               	movf	indf2,w,c
  8049  003E7C  6E3B               	movwf	_adcSampleMode,c
  8050                           
  8051                           ;AdcApp.c: 33: if (adcSampleMode == SINGLE_CHANNEL)
  8052  003E7E  043B               	decf	_adcSampleMode,w,c
  8053  003E80  A4D8               	btfss	status,2,c
  8054  003E82  D009               	goto	l112
  8055                           
  8056                           ;AdcApp.c: 34: {
  8057                           ;AdcApp.c: 35: channel = data[1];
  8058  003E84  EE20 F001          	lfsr	2,1
  8059  003E88  502C               	movf	SetChannelMode@data,w,c
  8060  003E8A  26D9               	addwf	fsr2l,f,c
  8061  003E8C  502D               	movf	SetChannelMode@data+1,w,c
  8062  003E8E  22DA               	addwfc	fsr2h,f,c
  8063  003E90  50DF               	movf	indf2,w,c
  8064  003E92  0100               	movlb	0	; () banked
  8065  003E94  6FF5               	movwf	_channel& (0+255),b
  8066  003E96                     l112:
  8067                           
  8068                           ;AdcApp.c: 36: }
  8069                           ;AdcApp.c: 37: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CHANNEL_MODE);
  8070                           
  8071                           ; BSR set to: 0
  8072  003E96  0E32               	movlw	50
  8073  003E98  6E24               	movwf	SendAckMessage@inRequest,c
  8074  003E9A  0E03               	movlw	3
  8075  003E9C  ECE2  F01C         	call	_SendAckMessage
  8076  003EA0  0012               	return		;funcret
  8077  003EA2                     __end_of_SetChannelMode:
  8078                           	opt stack 0
  8079                           tosu	equ	0xFFF
  8080                           tosh	equ	0xFFE
  8081                           tosl	equ	0xFFD
  8082                           pclath	equ	0xFFA
  8083                           tblptru	equ	0xFF8
  8084                           tblptrh	equ	0xFF7
  8085                           tblptrl	equ	0xFF6
  8086                           tablat	equ	0xFF5
  8087                           prodh	equ	0xFF4
  8088                           prodl	equ	0xFF3
  8089                           postinc0	equ	0xFEE
  8090                           plusw0	equ	0xFEB
  8091                           wreg	equ	0xFE8
  8092                           indf1	equ	0xFE7
  8093                           postdec1	equ	0xFE5
  8094                           fsr1h	equ	0xFE2
  8095                           fsr1l	equ	0xFE1
  8096                           indf2	equ	0xFDF
  8097                           postinc2	equ	0xFDE
  8098                           postdec2	equ	0xFDD
  8099                           plusw2	equ	0xFDB
  8100                           fsr2h	equ	0xFDA
  8101                           fsr2l	equ	0xFD9
  8102                           status	equ	0xFD8
  8103                           
  8104 ;; *************** function _EUSART1_Read *****************
  8105 ;; Defined at:
  8106 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  8107 ;; Parameters:    Size  Location     Type
  8108 ;;		None
  8109 ;; Auto vars:     Size  Location     Type
  8110 ;;  readValue       2   24[COMRAM] unsigned int 
  8111 ;; Return value:  Size  Location     Type
  8112 ;;                  1    wreg      unsigned char 
  8113 ;; Registers used:
  8114 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8115 ;; Tracked objects:
  8116 ;;		On entry : 0/0
  8117 ;;		On exit  : 0/0
  8118 ;;		Unchanged: 0/0
  8119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8120 ;;      Params:         0       0       0       0       0       0       0
  8121 ;;      Locals:         2       0       0       0       0       0       0
  8122 ;;      Temps:          1       0       0       0       0       0       0
  8123 ;;      Totals:         3       0       0       0       0       0       0
  8124 ;;Total ram usage:        3 bytes
  8125 ;; Hardware stack levels used:    1
  8126 ;; Hardware stack levels required when called:    4
  8127 ;; This function calls:
  8128 ;;		Nothing
  8129 ;; This function is called by:
  8130 ;;		_readUartMessage
  8131 ;; This function uses a non-reentrant model
  8132 ;;
  8133                           
  8134                           	psect	text32
  8135  003A64                     __ptext32:
  8136                           	opt stack 0
  8137  003A64                     _EUSART1_Read:
  8138                           	opt stack 25
  8139                           
  8140                           ;eusart1.c: 112: uint16_t readValue = 0;
  8141                           
  8142                           ;incstack = 0
  8143  003A64  0E00               	movlw	0
  8144  003A66  6E1A               	movwf	EUSART1_Read@readValue+1,c
  8145  003A68  0E00               	movlw	0
  8146  003A6A  6E19               	movwf	EUSART1_Read@readValue,c
  8147                           
  8148                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  8149  003A6C  0100               	movlb	0	; () banked
  8150  003A6E  51F4               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  8151  003A70  A4D8               	btfss	status,2,c
  8152  003A72  D002               	goto	l866
  8153                           
  8154                           ; BSR set to: 0
  8155                           ;eusart1.c: 120: {
  8156                           ;eusart1.c: 121: return readValue;
  8157  003A74  5019               	movf	EUSART1_Read@readValue,w,c
  8158                           
  8159                           ; BSR set to: 0
  8160  003A76  0012               	return	
  8161  003A78                     l866:
  8162                           
  8163                           ; BSR set to: 0
  8164                           ;eusart1.c: 122: }
  8165                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  8166                           
  8167                           ; BSR set to: 0
  8168  003A78  5037               	movf	_eusart1RxTail,w,c	;volatile
  8169  003A7A  0D01               	mullw	1
  8170  003A7C  0E46               	movlw	low _eusart1RxBuffer
  8171  003A7E  24F3               	addwf	prodl,w,c
  8172  003A80  6ED9               	movwf	fsr2l,c
  8173  003A82  0E01               	movlw	high _eusart1RxBuffer
  8174  003A84  20F4               	addwfc	prodh,w,c
  8175  003A86  6EDA               	movwf	fsr2h,c
  8176  003A88  50DF               	movf	indf2,w,c
  8177  003A8A  6E18               	movwf	??_EUSART1_Read& (0+255),c
  8178  003A8C  5018               	movf	??_EUSART1_Read,w,c
  8179  003A8E  6E19               	movwf	EUSART1_Read@readValue,c
  8180  003A90  6A1A               	clrf	EUSART1_Read@readValue+1,c
  8181                           
  8182                           ; BSR set to: 0
  8183  003A92  2A37               	incf	_eusart1RxTail,f,c	;volatile
  8184                           
  8185                           ; BSR set to: 0
  8186                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  8187  003A94  0E27               	movlw	39
  8188  003A96  6437               	cpfsgt	_eusart1RxTail,c	;volatile
  8189  003A98  D002               	goto	l868
  8190                           
  8191                           ; BSR set to: 0
  8192                           ;eusart1.c: 126: {
  8193                           ;eusart1.c: 127: eusart1RxTail = 0;
  8194  003A9A  0E00               	movlw	0
  8195  003A9C  6E37               	movwf	_eusart1RxTail,c	;volatile
  8196  003A9E                     l868:
  8197                           
  8198                           ; BSR set to: 0
  8199                           ;eusart1.c: 128: }
  8200                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  8201                           
  8202                           ; BSR set to: 0
  8203  003A9E  9A9D               	bcf	3997,5,c	;volatile
  8204                           
  8205                           ; BSR set to: 0
  8206                           ;eusart1.c: 130: eusart1RxCount--;
  8207  003AA0  07F4               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  8208                           
  8209                           ; BSR set to: 0
  8210                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  8211  003AA2  8A9D               	bsf	3997,5,c	;volatile
  8212                           
  8213                           ; BSR set to: 0
  8214                           ;eusart1.c: 133: return readValue;
  8215  003AA4  5019               	movf	EUSART1_Read@readValue,w,c
  8216  003AA6  0012               	return	
  8217  003AA8                     __end_of_EUSART1_Read:
  8218                           	opt stack 0
  8219                           tosu	equ	0xFFF
  8220                           tosh	equ	0xFFE
  8221                           tosl	equ	0xFFD
  8222                           pclath	equ	0xFFA
  8223                           tblptru	equ	0xFF8
  8224                           tblptrh	equ	0xFF7
  8225                           tblptrl	equ	0xFF6
  8226                           tablat	equ	0xFF5
  8227                           prodh	equ	0xFF4
  8228                           prodl	equ	0xFF3
  8229                           postinc0	equ	0xFEE
  8230                           plusw0	equ	0xFEB
  8231                           wreg	equ	0xFE8
  8232                           indf1	equ	0xFE7
  8233                           postdec1	equ	0xFE5
  8234                           fsr1h	equ	0xFE2
  8235                           fsr1l	equ	0xFE1
  8236                           indf2	equ	0xFDF
  8237                           postinc2	equ	0xFDE
  8238                           postdec2	equ	0xFDD
  8239                           plusw2	equ	0xFDB
  8240                           fsr2h	equ	0xFDA
  8241                           fsr2l	equ	0xFD9
  8242                           status	equ	0xFD8
  8243                           
  8244 ;; *************** function _keepAliveSignalUart *****************
  8245 ;; Defined at:
  8246 ;;		line 93 in file "SystemStatus.c"
  8247 ;; Parameters:    Size  Location     Type
  8248 ;;		None
  8249 ;; Auto vars:     Size  Location     Type
  8250 ;;		None
  8251 ;; Return value:  Size  Location     Type
  8252 ;;                  1    wreg      void 
  8253 ;; Registers used:
  8254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8255 ;; Tracked objects:
  8256 ;;		On entry : 0/0
  8257 ;;		On exit  : 0/0
  8258 ;;		Unchanged: 0/0
  8259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8260 ;;      Params:         0       0       0       0       0       0       0
  8261 ;;      Locals:         0       0       0       0       0       0       0
  8262 ;;      Temps:          0       0       0       0       0       0       0
  8263 ;;      Totals:         0       0       0       0       0       0       0
  8264 ;;Total ram usage:        0 bytes
  8265 ;; Hardware stack levels used:    1
  8266 ;; Hardware stack levels required when called:    7
  8267 ;; This function calls:
  8268 ;;		_SendAckMessage
  8269 ;; This function is called by:
  8270 ;;		_main
  8271 ;; This function uses a non-reentrant model
  8272 ;;
  8273                           
  8274                           	psect	text33
  8275  004290                     __ptext33:
  8276                           	opt stack 0
  8277  004290                     _keepAliveSignalUart:
  8278                           	opt stack 23
  8279                           
  8280                           ;SystemStatus.c: 95: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_KEEP_A
      +                          LIVE);
  8281                           
  8282                           ; BSR set to: 0
  8283                           ;incstack = 0
  8284  004290  0E15               	movlw	21
  8285  004292  6E24               	movwf	SendAckMessage@inRequest,c
  8286  004294  0E01               	movlw	1
  8287  004296  ECE2  F01C         	call	_SendAckMessage
  8288  00429A  0012               	return		;funcret
  8289  00429C                     __end_of_keepAliveSignalUart:
  8290                           	opt stack 0
  8291                           tosu	equ	0xFFF
  8292                           tosh	equ	0xFFE
  8293                           tosl	equ	0xFFD
  8294                           pclath	equ	0xFFA
  8295                           tblptru	equ	0xFF8
  8296                           tblptrh	equ	0xFF7
  8297                           tblptrl	equ	0xFF6
  8298                           tablat	equ	0xFF5
  8299                           prodh	equ	0xFF4
  8300                           prodl	equ	0xFF3
  8301                           postinc0	equ	0xFEE
  8302                           plusw0	equ	0xFEB
  8303                           wreg	equ	0xFE8
  8304                           indf1	equ	0xFE7
  8305                           postdec1	equ	0xFE5
  8306                           fsr1h	equ	0xFE2
  8307                           fsr1l	equ	0xFE1
  8308                           indf2	equ	0xFDF
  8309                           postinc2	equ	0xFDE
  8310                           postdec2	equ	0xFDD
  8311                           plusw2	equ	0xFDB
  8312                           fsr2h	equ	0xFDA
  8313                           fsr2l	equ	0xFD9
  8314                           status	equ	0xFD8
  8315                           
  8316 ;; *************** function _keepAliveSignalLed *****************
  8317 ;; Defined at:
  8318 ;;		line 35 in file "LedsApp.c"
  8319 ;; Parameters:    Size  Location     Type
  8320 ;;		None
  8321 ;; Auto vars:     Size  Location     Type
  8322 ;;		None
  8323 ;; Return value:  Size  Location     Type
  8324 ;;                  1    wreg      void 
  8325 ;; Registers used:
  8326 ;;		wreg, status,2, status,0
  8327 ;; Tracked objects:
  8328 ;;		On entry : 0/0
  8329 ;;		On exit  : 0/0
  8330 ;;		Unchanged: 0/0
  8331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8332 ;;      Params:         0       0       0       0       0       0       0
  8333 ;;      Locals:         0       0       0       0       0       0       0
  8334 ;;      Temps:          1       0       0       0       0       0       0
  8335 ;;      Totals:         1       0       0       0       0       0       0
  8336 ;;Total ram usage:        1 bytes
  8337 ;; Hardware stack levels used:    1
  8338 ;; Hardware stack levels required when called:    4
  8339 ;; This function calls:
  8340 ;;		Nothing
  8341 ;; This function is called by:
  8342 ;;		_main
  8343 ;; This function uses a non-reentrant model
  8344 ;;
  8345                           
  8346                           	psect	text34
  8347  00419C                     __ptext34:
  8348                           	opt stack 0
  8349  00419C                     _keepAliveSignalLed:
  8350                           	opt stack 26
  8351                           
  8352                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  8353                           
  8354                           ;incstack = 0
  8355  00419C  B08B               	btfsc	3979,0,c	;volatile
  8356  00419E  D003               	goto	u5930
  8357  0041A0  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  8358  0041A2  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  8359  0041A4  D001               	goto	u5948
  8360  0041A6                     u5930:
  8361  0041A6  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  8362  0041A8                     u5948:
  8363  0041A8  508B               	movf	3979,w,c	;volatile
  8364  0041AA  1818               	xorwf	??_keepAliveSignalLed,w,c
  8365  0041AC  0BFE               	andlw	-2
  8366  0041AE  1818               	xorwf	??_keepAliveSignalLed,w,c
  8367  0041B0  6E8B               	movwf	3979,c	;volatile
  8368  0041B2  0012               	return		;funcret
  8369  0041B4                     __end_of_keepAliveSignalLed:
  8370                           	opt stack 0
  8371                           tosu	equ	0xFFF
  8372                           tosh	equ	0xFFE
  8373                           tosl	equ	0xFFD
  8374                           pclath	equ	0xFFA
  8375                           tblptru	equ	0xFF8
  8376                           tblptrh	equ	0xFF7
  8377                           tblptrl	equ	0xFF6
  8378                           tablat	equ	0xFF5
  8379                           prodh	equ	0xFF4
  8380                           prodl	equ	0xFF3
  8381                           postinc0	equ	0xFEE
  8382                           plusw0	equ	0xFEB
  8383                           wreg	equ	0xFE8
  8384                           indf1	equ	0xFE7
  8385                           postdec1	equ	0xFE5
  8386                           fsr1h	equ	0xFE2
  8387                           fsr1l	equ	0xFE1
  8388                           indf2	equ	0xFDF
  8389                           postinc2	equ	0xFDE
  8390                           postdec2	equ	0xFDD
  8391                           plusw2	equ	0xFDB
  8392                           fsr2h	equ	0xFDA
  8393                           fsr2l	equ	0xFD9
  8394                           status	equ	0xFD8
  8395                           
  8396 ;; *************** function _SynthLdDetect *****************
  8397 ;; Defined at:
  8398 ;;		line 198 in file "SyntApp.c"
  8399 ;; Parameters:    Size  Location     Type
  8400 ;;		None
  8401 ;; Auto vars:     Size  Location     Type
  8402 ;;		None
  8403 ;; Return value:  Size  Location     Type
  8404 ;;                  1    wreg      void 
  8405 ;; Registers used:
  8406 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8407 ;; Tracked objects:
  8408 ;;		On entry : 0/0
  8409 ;;		On exit  : 0/0
  8410 ;;		Unchanged: 0/0
  8411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8412 ;;      Params:         0       0       0       0       0       0       0
  8413 ;;      Locals:         0       0       0       0       0       0       0
  8414 ;;      Temps:          0       0       0       0       0       0       0
  8415 ;;      Totals:         0       0       0       0       0       0       0
  8416 ;;Total ram usage:        0 bytes
  8417 ;; Hardware stack levels used:    1
  8418 ;; Hardware stack levels required when called:   11
  8419 ;; This function calls:
  8420 ;;		_BlinkErrorLeds
  8421 ;;		_InitSynth
  8422 ;; This function is called by:
  8423 ;;		_main
  8424 ;; This function uses a non-reentrant model
  8425 ;;
  8426                           
  8427                           	psect	text35
  8428  003ED2                     __ptext35:
  8429                           	opt stack 0
  8430  003ED2                     _SynthLdDetect:
  8431                           	opt stack 19
  8432                           
  8433                           ;SyntApp.c: 201: if(PORTDbits.RD4 == 0)
  8434                           
  8435                           ;incstack = 0
  8436  003ED2  B883               	btfsc	3971,4,c	;volatile
  8437  003ED4  D00F               	goto	l538
  8438                           
  8439                           ;SyntApp.c: 202: {
  8440                           ;SyntApp.c: 203: if(synthLdRxCnt > 0)
  8441  003ED6  0100               	movlb	0	; () banked
  8442  003ED8  51FE               	movf	_synthLdRxCnt& (0+255),w,b
  8443  003EDA  0A80               	xorlw	128
  8444  003EDC  0F7F               	addlw	-129
  8445  003EDE  A0D8               	btfss	status,0,c
  8446  003EE0  D006               	goto	l537
  8447                           
  8448                           ; BSR set to: 0
  8449                           ;SyntApp.c: 204: {
  8450                           ;SyntApp.c: 205: InitSynth(SYNTH_RX);
  8451  003EE2  0E01               	movlw	1
  8452  003EE4  EC36  F007         	call	_InitSynth
  8453                           
  8454                           ;SyntApp.c: 206: synthLdRxCnt--;
  8455  003EE8  0100               	movlb	0	; () banked
  8456  003EEA  07FE               	decf	_synthLdRxCnt& (0+255),f,b
  8457                           
  8458                           ;SyntApp.c: 207: }
  8459  003EEC  D003               	goto	l538
  8460  003EEE                     l537:
  8461                           
  8462                           ; BSR set to: 0
  8463                           ;SyntApp.c: 208: else
  8464                           ;SyntApp.c: 209: {
  8465                           ;SyntApp.c: 210: BlinkErrorLeds(FAIL_SYNTH_RX_LATCH);
  8466                           
  8467                           ; BSR set to: 0
  8468  003EEE  0E08               	movlw	8
  8469  003EF0  EC26  F01B         	call	_BlinkErrorLeds
  8470  003EF4                     l538:
  8471                           
  8472                           ;SyntApp.c: 211: }
  8473                           ;SyntApp.c: 212: }
  8474                           ;SyntApp.c: 214: if(PORTDbits.RD4 == 1)
  8475  003EF4  A883               	btfss	3971,4,c	;volatile
  8476  003EF6  0012               	return	
  8477                           
  8478                           ;SyntApp.c: 215: {
  8479                           ;SyntApp.c: 216: synthLdTxFlag = 1;
  8480  003EF8  0E01               	movlw	1
  8481  003EFA  0100               	movlb	0	; () banked
  8482  003EFC  6FE9               	movwf	_synthLdTxFlag& (0+255),b
  8483  003EFE  0012               	return	
  8484  003F00                     __end_of_SynthLdDetect:
  8485                           	opt stack 0
  8486                           tosu	equ	0xFFF
  8487                           tosh	equ	0xFFE
  8488                           tosl	equ	0xFFD
  8489                           pclath	equ	0xFFA
  8490                           tblptru	equ	0xFF8
  8491                           tblptrh	equ	0xFF7
  8492                           tblptrl	equ	0xFF6
  8493                           tablat	equ	0xFF5
  8494                           prodh	equ	0xFF4
  8495                           prodl	equ	0xFF3
  8496                           postinc0	equ	0xFEE
  8497                           plusw0	equ	0xFEB
  8498                           wreg	equ	0xFE8
  8499                           indf1	equ	0xFE7
  8500                           postdec1	equ	0xFE5
  8501                           fsr1h	equ	0xFE2
  8502                           fsr1l	equ	0xFE1
  8503                           indf2	equ	0xFDF
  8504                           postinc2	equ	0xFDE
  8505                           postdec2	equ	0xFDD
  8506                           plusw2	equ	0xFDB
  8507                           fsr2h	equ	0xFDA
  8508                           fsr2l	equ	0xFD9
  8509                           status	equ	0xFD8
  8510                           
  8511 ;; *************** function _BlinkErrorLeds *****************
  8512 ;; Defined at:
  8513 ;;		line 13 in file "LedsApp.c"
  8514 ;; Parameters:    Size  Location     Type
  8515 ;;  state           1    wreg     enum E7584
  8516 ;; Auto vars:     Size  Location     Type
  8517 ;;  state           1   26[COMRAM] enum E7584
  8518 ;;  idx             2   27[COMRAM] int 
  8519 ;; Return value:  Size  Location     Type
  8520 ;;                  1    wreg      void 
  8521 ;; Registers used:
  8522 ;;		wreg, status,2, status,0
  8523 ;; Tracked objects:
  8524 ;;		On entry : 0/0
  8525 ;;		On exit  : 0/0
  8526 ;;		Unchanged: 0/0
  8527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8528 ;;      Params:         0       0       0       0       0       0       0
  8529 ;;      Locals:         3       0       0       0       0       0       0
  8530 ;;      Temps:          3       0       0       0       0       0       0
  8531 ;;      Totals:         6       0       0       0       0       0       0
  8532 ;;Total ram usage:        6 bytes
  8533 ;; Hardware stack levels used:    1
  8534 ;; Hardware stack levels required when called:    4
  8535 ;; This function calls:
  8536 ;;		Nothing
  8537 ;; This function is called by:
  8538 ;;		_SynthLdDetect
  8539 ;;		_main
  8540 ;; This function uses a non-reentrant model
  8541 ;;
  8542                           
  8543                           	psect	text36
  8544  00364C                     __ptext36:
  8545                           	opt stack 0
  8546  00364C                     _BlinkErrorLeds:
  8547                           	opt stack 25
  8548                           
  8549                           ;incstack = 0
  8550                           ;BlinkErrorLeds@state stored from wreg
  8551  00364C  6E1B               	movwf	BlinkErrorLeds@state,c
  8552                           
  8553                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
  8554  00364E  0E00               	movlw	0
  8555  003650  6E1D               	movwf	BlinkErrorLeds@idx+1,c
  8556  003652  0E00               	movlw	0
  8557  003654  6E1C               	movwf	BlinkErrorLeds@idx,c
  8558  003656                     l6247:
  8559  003656  501B               	movf	BlinkErrorLeds@state,w,c
  8560  003658  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8561  00365A  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
  8562  00365C  5018               	movf	??_BlinkErrorLeds,w,c
  8563  00365E  5C1C               	subwf	BlinkErrorLeds@idx,w,c
  8564  003660  501D               	movf	BlinkErrorLeds@idx+1,w,c
  8565  003662  0A80               	xorlw	128
  8566  003664  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
  8567  003666  5019               	movf	??_BlinkErrorLeds+1,w,c
  8568  003668  0A80               	xorlw	128
  8569  00366A  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
  8570  00366C  B0D8               	btfsc	status,0,c
  8571  00366E  0012               	return	
  8572                           
  8573                           ;LedsApp.c: 16: {
  8574                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
  8575  003670  988A               	bcf	3978,4,c	;volatile
  8576                           
  8577                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
  8578  003672  0E02               	movlw	2
  8579  003674  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
  8580  003676  0E04               	movlw	4
  8581  003678  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8582  00367A  0EBA               	movlw	186
  8583  00367C                     u9347:
  8584  00367C  2EE8               	decfsz	wreg,f,c
  8585  00367E  D7FE               	bra	u9347
  8586  003680  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
  8587  003682  D7FC               	bra	u9347
  8588  003684  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
  8589  003686  D7FA               	bra	u9347
  8590  003688  D000               	nop2	
  8591                           
  8592                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
  8593  00368A  888A               	bsf	3978,4,c	;volatile
  8594                           
  8595                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
  8596  00368C  0E02               	movlw	2
  8597  00368E  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
  8598  003690  0E04               	movlw	4
  8599  003692  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8600  003694  0EBA               	movlw	186
  8601  003696                     u9357:
  8602  003696  2EE8               	decfsz	wreg,f,c
  8603  003698  D7FE               	bra	u9357
  8604  00369A  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
  8605  00369C  D7FC               	bra	u9357
  8606  00369E  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
  8607  0036A0  D7FA               	bra	u9357
  8608  0036A2  D000               	nop2	
  8609  0036A4  4A1C               	infsnz	BlinkErrorLeds@idx,f,c
  8610  0036A6  2A1D               	incf	BlinkErrorLeds@idx+1,f,c
  8611  0036A8  D7D6               	goto	l6247
  8612  0036AA                     __end_of_BlinkErrorLeds:
  8613                           	opt stack 0
  8614                           tosu	equ	0xFFF
  8615                           tosh	equ	0xFFE
  8616                           tosl	equ	0xFFD
  8617                           pclath	equ	0xFFA
  8618                           tblptru	equ	0xFF8
  8619                           tblptrh	equ	0xFF7
  8620                           tblptrl	equ	0xFF6
  8621                           tablat	equ	0xFF5
  8622                           prodh	equ	0xFF4
  8623                           prodl	equ	0xFF3
  8624                           postinc0	equ	0xFEE
  8625                           plusw0	equ	0xFEB
  8626                           wreg	equ	0xFE8
  8627                           indf1	equ	0xFE7
  8628                           postdec1	equ	0xFE5
  8629                           fsr1h	equ	0xFE2
  8630                           fsr1l	equ	0xFE1
  8631                           indf2	equ	0xFDF
  8632                           postinc2	equ	0xFDE
  8633                           postdec2	equ	0xFDD
  8634                           plusw2	equ	0xFDB
  8635                           fsr2h	equ	0xFDA
  8636                           fsr2l	equ	0xFD9
  8637                           status	equ	0xFD8
  8638                           
  8639 ;; *************** function _SetMcuSystem *****************
  8640 ;; Defined at:
  8641 ;;		line 11 in file "SystemSettings.c"
  8642 ;; Parameters:    Size  Location     Type
  8643 ;;		None
  8644 ;; Auto vars:     Size  Location     Type
  8645 ;;		None
  8646 ;; Return value:  Size  Location     Type
  8647 ;;                  1    wreg      void 
  8648 ;; Registers used:
  8649 ;;		wreg, status,2, status,0, cstack
  8650 ;; Tracked objects:
  8651 ;;		On entry : 0/0
  8652 ;;		On exit  : 0/0
  8653 ;;		Unchanged: 0/0
  8654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8655 ;;      Params:         0       0       0       0       0       0       0
  8656 ;;      Locals:         0       0       0       0       0       0       0
  8657 ;;      Temps:          0       0       0       0       0       0       0
  8658 ;;      Totals:         0       0       0       0       0       0       0
  8659 ;;Total ram usage:        0 bytes
  8660 ;; Hardware stack levels used:    1
  8661 ;; Hardware stack levels required when called:    7
  8662 ;; This function calls:
  8663 ;;		_SYSTEM_Initialize
  8664 ;; This function is called by:
  8665 ;;		_main
  8666 ;; This function uses a non-reentrant model
  8667 ;;
  8668                           
  8669                           	psect	text37
  8670  0042A8                     __ptext37:
  8671                           	opt stack 0
  8672  0042A8                     _SetMcuSystem:
  8673                           	opt stack 23
  8674                           
  8675                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  8676                           
  8677                           ;incstack = 0
  8678  0042A8  ECC1  F020         	call	_SYSTEM_Initialize	;wreg free
  8679                           
  8680                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  8681  0042AC  8EF2               	bsf	intcon,7,c	;volatile
  8682                           
  8683                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  8684  0042AE  8CF2               	bsf	intcon,6,c	;volatile
  8685  0042B0  0012               	return		;funcret
  8686  0042B2                     __end_of_SetMcuSystem:
  8687                           	opt stack 0
  8688                           tosu	equ	0xFFF
  8689                           tosh	equ	0xFFE
  8690                           tosl	equ	0xFFD
  8691                           pclath	equ	0xFFA
  8692                           tblptru	equ	0xFF8
  8693                           tblptrh	equ	0xFF7
  8694                           tblptrl	equ	0xFF6
  8695                           tablat	equ	0xFF5
  8696                           prodh	equ	0xFF4
  8697                           prodl	equ	0xFF3
  8698                           intcon	equ	0xFF2
  8699                           postinc0	equ	0xFEE
  8700                           plusw0	equ	0xFEB
  8701                           wreg	equ	0xFE8
  8702                           indf1	equ	0xFE7
  8703                           postdec1	equ	0xFE5
  8704                           fsr1h	equ	0xFE2
  8705                           fsr1l	equ	0xFE1
  8706                           indf2	equ	0xFDF
  8707                           postinc2	equ	0xFDE
  8708                           postdec2	equ	0xFDD
  8709                           plusw2	equ	0xFDB
  8710                           fsr2h	equ	0xFDA
  8711                           fsr2l	equ	0xFD9
  8712                           status	equ	0xFD8
  8713                           
  8714 ;; *************** function _SYSTEM_Initialize *****************
  8715 ;; Defined at:
  8716 ;;		line 112 in file "mcc_generated_files/mcc.c"
  8717 ;; Parameters:    Size  Location     Type
  8718 ;;		None
  8719 ;; Auto vars:     Size  Location     Type
  8720 ;;		None
  8721 ;; Return value:  Size  Location     Type
  8722 ;;                  1    wreg      void 
  8723 ;; Registers used:
  8724 ;;		wreg, status,2, status,0, cstack
  8725 ;; Tracked objects:
  8726 ;;		On entry : 0/0
  8727 ;;		On exit  : 0/0
  8728 ;;		Unchanged: 0/0
  8729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8730 ;;      Params:         0       0       0       0       0       0       0
  8731 ;;      Locals:         0       0       0       0       0       0       0
  8732 ;;      Temps:          0       0       0       0       0       0       0
  8733 ;;      Totals:         0       0       0       0       0       0       0
  8734 ;;Total ram usage:        0 bytes
  8735 ;; Hardware stack levels used:    1
  8736 ;; Hardware stack levels required when called:    6
  8737 ;; This function calls:
  8738 ;;		_ADC_Initialize
  8739 ;;		_EUSART1_Initialize
  8740 ;;		_INTERRUPT_Initialize
  8741 ;;		_OSCILLATOR_Initialize
  8742 ;;		_PIN_MANAGER_Initialize
  8743 ;;		_TMR0_Initialize
  8744 ;; This function is called by:
  8745 ;;		_SetMcuSystem
  8746 ;; This function uses a non-reentrant model
  8747 ;;
  8748                           
  8749                           	psect	text38
  8750  004182                     __ptext38:
  8751                           	opt stack 0
  8752  004182                     _SYSTEM_Initialize:
  8753                           	opt stack 23
  8754                           
  8755                           ;mcc.c: 114: INTERRUPT_Initialize();
  8756                           
  8757                           ;incstack = 0
  8758  004182  EC76  F021         	call	_INTERRUPT_Initialize	;wreg free
  8759                           
  8760                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  8761  004186  ECF4  F01A         	call	_PIN_MANAGER_Initialize	;wreg free
  8762                           
  8763                           ;mcc.c: 116: OSCILLATOR_Initialize();
  8764  00418A  EC26  F021         	call	_OSCILLATOR_Initialize	;wreg free
  8765                           
  8766                           ;mcc.c: 117: ADC_Initialize();
  8767  00418E  ECDA  F020         	call	_ADC_Initialize	;wreg free
  8768                           
  8769                           ;mcc.c: 118: TMR0_Initialize();
  8770  004192  ECED  F01E         	call	_TMR0_Initialize	;wreg free
  8771                           
  8772                           ;mcc.c: 119: EUSART1_Initialize();
  8773  004196  EC82  F01E         	call	_EUSART1_Initialize	;wreg free
  8774  00419A  0012               	return		;funcret
  8775  00419C                     __end_of_SYSTEM_Initialize:
  8776                           	opt stack 0
  8777                           tosu	equ	0xFFF
  8778                           tosh	equ	0xFFE
  8779                           tosl	equ	0xFFD
  8780                           pclath	equ	0xFFA
  8781                           tblptru	equ	0xFF8
  8782                           tblptrh	equ	0xFF7
  8783                           tblptrl	equ	0xFF6
  8784                           tablat	equ	0xFF5
  8785                           prodh	equ	0xFF4
  8786                           prodl	equ	0xFF3
  8787                           intcon	equ	0xFF2
  8788                           postinc0	equ	0xFEE
  8789                           plusw0	equ	0xFEB
  8790                           wreg	equ	0xFE8
  8791                           indf1	equ	0xFE7
  8792                           postdec1	equ	0xFE5
  8793                           fsr1h	equ	0xFE2
  8794                           fsr1l	equ	0xFE1
  8795                           indf2	equ	0xFDF
  8796                           postinc2	equ	0xFDE
  8797                           postdec2	equ	0xFDD
  8798                           plusw2	equ	0xFDB
  8799                           fsr2h	equ	0xFDA
  8800                           fsr2l	equ	0xFD9
  8801                           status	equ	0xFD8
  8802                           
  8803 ;; *************** function _TMR0_Initialize *****************
  8804 ;; Defined at:
  8805 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  8806 ;; Parameters:    Size  Location     Type
  8807 ;;		None
  8808 ;; Auto vars:     Size  Location     Type
  8809 ;;		None
  8810 ;; Return value:  Size  Location     Type
  8811 ;;                  1    wreg      void 
  8812 ;; Registers used:
  8813 ;;		wreg, status,2, status,0, cstack
  8814 ;; Tracked objects:
  8815 ;;		On entry : 0/0
  8816 ;;		On exit  : 0/0
  8817 ;;		Unchanged: 0/0
  8818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8819 ;;      Params:         0       0       0       0       0       0       0
  8820 ;;      Locals:         0       0       0       0       0       0       0
  8821 ;;      Temps:          2       0       0       0       0       0       0
  8822 ;;      Totals:         2       0       0       0       0       0       0
  8823 ;;Total ram usage:        2 bytes
  8824 ;; Hardware stack levels used:    1
  8825 ;; Hardware stack levels required when called:    5
  8826 ;; This function calls:
  8827 ;;		_TMR0_SetInterruptHandler
  8828 ;; This function is called by:
  8829 ;;		_SYSTEM_Initialize
  8830 ;; This function uses a non-reentrant model
  8831 ;;
  8832                           
  8833                           	psect	text39
  8834  003DDA                     __ptext39:
  8835                           	opt stack 0
  8836  003DDA                     _TMR0_Initialize:
  8837                           	opt stack 23
  8838                           
  8839                           ;tmr0.c: 71: TMR0H = 0xF8;
  8840                           
  8841                           ;incstack = 0
  8842  003DDA  0EF8               	movlw	248
  8843  003DDC  6ED7               	movwf	4055,c	;volatile
  8844                           
  8845                           ;tmr0.c: 74: TMR0L = 0x2F;
  8846  003DDE  0E2F               	movlw	47
  8847  003DE0  6ED6               	movwf	4054,c	;volatile
  8848                           
  8849                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  8850  003DE2  50D6               	movf	4054,w,c	;volatile
  8851  003DE4  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  8852  003DE8  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  8853  003DEA  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  8854  003DEE  6A1A               	clrf	??_TMR0_Initialize,c
  8855  003DF0  101A               	iorwf	??_TMR0_Initialize,w,c
  8856  003DF2  6E46               	movwf	_timer0ReloadVal,c	;volatile
  8857  003DF4  501B               	movf	??_TMR0_Initialize+1,w,c
  8858  003DF6  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  8859                           
  8860                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  8861  003DF8  94F2               	bcf	intcon,2,c	;volatile
  8862                           
  8863                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  8864  003DFA  8AF2               	bsf	intcon,5,c	;volatile
  8865                           
  8866                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  8867  003DFC  0E00               	movlw	0
  8868  003DFE  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  8869  003E00  0E00               	movlw	0
  8870  003E02  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  8871  003E04  EC59  F021         	call	_TMR0_SetInterruptHandler	;wreg free
  8872                           
  8873                           ;tmr0.c: 90: T0CON = 0x90;
  8874  003E08  0E90               	movlw	144
  8875  003E0A  6ED5               	movwf	4053,c	;volatile
  8876  003E0C  0012               	return		;funcret
  8877  003E0E                     __end_of_TMR0_Initialize:
  8878                           	opt stack 0
  8879                           tosu	equ	0xFFF
  8880                           tosh	equ	0xFFE
  8881                           tosl	equ	0xFFD
  8882                           pclath	equ	0xFFA
  8883                           tblptru	equ	0xFF8
  8884                           tblptrh	equ	0xFF7
  8885                           tblptrl	equ	0xFF6
  8886                           tablat	equ	0xFF5
  8887                           prodh	equ	0xFF4
  8888                           prodl	equ	0xFF3
  8889                           intcon	equ	0xFF2
  8890                           postinc0	equ	0xFEE
  8891                           plusw0	equ	0xFEB
  8892                           wreg	equ	0xFE8
  8893                           indf1	equ	0xFE7
  8894                           postdec1	equ	0xFE5
  8895                           fsr1h	equ	0xFE2
  8896                           fsr1l	equ	0xFE1
  8897                           indf2	equ	0xFDF
  8898                           postinc2	equ	0xFDE
  8899                           postdec2	equ	0xFDD
  8900                           plusw2	equ	0xFDB
  8901                           fsr2h	equ	0xFDA
  8902                           fsr2l	equ	0xFD9
  8903                           status	equ	0xFD8
  8904                           
  8905 ;; *************** function _TMR0_SetInterruptHandler *****************
  8906 ;; Defined at:
  8907 ;;		line 179 in file "mcc_generated_files/tmr0.c"
  8908 ;; Parameters:    Size  Location     Type
  8909 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  8910 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  8911 ;; Auto vars:     Size  Location     Type
  8912 ;;		None
  8913 ;; Return value:  Size  Location     Type
  8914 ;;                  1    wreg      void 
  8915 ;; Registers used:
  8916 ;;		wreg, status,2, status,0
  8917 ;; Tracked objects:
  8918 ;;		On entry : 0/0
  8919 ;;		On exit  : 0/0
  8920 ;;		Unchanged: 0/0
  8921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8922 ;;      Params:         2       0       0       0       0       0       0
  8923 ;;      Locals:         0       0       0       0       0       0       0
  8924 ;;      Temps:          0       0       0       0       0       0       0
  8925 ;;      Totals:         2       0       0       0       0       0       0
  8926 ;;Total ram usage:        2 bytes
  8927 ;; Hardware stack levels used:    1
  8928 ;; Hardware stack levels required when called:    4
  8929 ;; This function calls:
  8930 ;;		Nothing
  8931 ;; This function is called by:
  8932 ;;		_TMR0_Initialize
  8933 ;; This function uses a non-reentrant model
  8934 ;;
  8935                           
  8936                           	psect	text40
  8937  0042B2                     __ptext40:
  8938                           	opt stack 0
  8939  0042B2                     _TMR0_SetInterruptHandler:
  8940                           	opt stack 23
  8941                           
  8942                           ;tmr0.c: 180: TMR0_InterruptHandler = InterruptHandler;
  8943                           
  8944                           ;incstack = 0
  8945  0042B2  C018  F1E4         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  8946  0042B6  C019  F1E5         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  8947  0042BA  0012               	return		;funcret
  8948  0042BC                     __end_of_TMR0_SetInterruptHandler:
  8949                           	opt stack 0
  8950                           tosu	equ	0xFFF
  8951                           tosh	equ	0xFFE
  8952                           tosl	equ	0xFFD
  8953                           pclath	equ	0xFFA
  8954                           tblptru	equ	0xFF8
  8955                           tblptrh	equ	0xFF7
  8956                           tblptrl	equ	0xFF6
  8957                           tablat	equ	0xFF5
  8958                           prodh	equ	0xFF4
  8959                           prodl	equ	0xFF3
  8960                           intcon	equ	0xFF2
  8961                           postinc0	equ	0xFEE
  8962                           plusw0	equ	0xFEB
  8963                           wreg	equ	0xFE8
  8964                           indf1	equ	0xFE7
  8965                           postdec1	equ	0xFE5
  8966                           fsr1h	equ	0xFE2
  8967                           fsr1l	equ	0xFE1
  8968                           indf2	equ	0xFDF
  8969                           postinc2	equ	0xFDE
  8970                           postdec2	equ	0xFDD
  8971                           plusw2	equ	0xFDB
  8972                           fsr2h	equ	0xFDA
  8973                           fsr2l	equ	0xFD9
  8974                           status	equ	0xFD8
  8975                           
  8976 ;; *************** function _PIN_MANAGER_Initialize *****************
  8977 ;; Defined at:
  8978 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  8979 ;; Parameters:    Size  Location     Type
  8980 ;;		None
  8981 ;; Auto vars:     Size  Location     Type
  8982 ;;		None
  8983 ;; Return value:  Size  Location     Type
  8984 ;;                  1    wreg      void 
  8985 ;; Registers used:
  8986 ;;		wreg, status,2, status,0, cstack
  8987 ;; Tracked objects:
  8988 ;;		On entry : 0/0
  8989 ;;		On exit  : 0/0
  8990 ;;		Unchanged: 0/0
  8991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8992 ;;      Params:         0       0       0       0       0       0       0
  8993 ;;      Locals:         0       0       0       0       0       0       0
  8994 ;;      Temps:          0       0       0       0       0       0       0
  8995 ;;      Totals:         0       0       0       0       0       0       0
  8996 ;;Total ram usage:        0 bytes
  8997 ;; Hardware stack levels used:    1
  8998 ;; Hardware stack levels required when called:    5
  8999 ;; This function calls:
  9000 ;;		_IOCB4_SetInterruptHandler
  9001 ;;		_IOCB5_SetInterruptHandler
  9002 ;; This function is called by:
  9003 ;;		_SYSTEM_Initialize
  9004 ;; This function uses a non-reentrant model
  9005 ;;
  9006                           
  9007                           	psect	text41
  9008  0035E8                     __ptext41:
  9009                           	opt stack 0
  9010  0035E8                     _PIN_MANAGER_Initialize:
  9011                           	opt stack 23
  9012                           
  9013                           ;pin_manager.c: 60: LATE = 0x00;
  9014                           
  9015                           ;incstack = 0
  9016  0035E8  0E00               	movlw	0
  9017  0035EA  6E8D               	movwf	3981,c	;volatile
  9018                           
  9019                           ;pin_manager.c: 61: LATD = 0x00;
  9020  0035EC  0E00               	movlw	0
  9021  0035EE  6E8C               	movwf	3980,c	;volatile
  9022                           
  9023                           ;pin_manager.c: 62: LATA = 0x06;
  9024  0035F0  0E06               	movlw	6
  9025  0035F2  6E89               	movwf	3977,c	;volatile
  9026                           
  9027                           ;pin_manager.c: 63: LATB = 0x00;
  9028  0035F4  0E00               	movlw	0
  9029  0035F6  6E8A               	movwf	3978,c	;volatile
  9030                           
  9031                           ;pin_manager.c: 64: LATC = 0x00;
  9032  0035F8  0E00               	movlw	0
  9033  0035FA  6E8B               	movwf	3979,c	;volatile
  9034                           
  9035                           ;pin_manager.c: 69: TRISE = 0x07;
  9036  0035FC  0E07               	movlw	7
  9037  0035FE  6E96               	movwf	3990,c	;volatile
  9038                           
  9039                           ;pin_manager.c: 70: TRISA = 0xE1;
  9040  003600  0EE1               	movlw	225
  9041  003602  6E92               	movwf	3986,c	;volatile
  9042                           
  9043                           ;pin_manager.c: 71: TRISB = 0xEF;
  9044  003604  0EEF               	movlw	239
  9045  003606  6E93               	movwf	3987,c	;volatile
  9046                           
  9047                           ;pin_manager.c: 72: TRISC = 0x80;
  9048  003608  0E80               	movlw	128
  9049  00360A  6E94               	movwf	3988,c	;volatile
  9050                           
  9051                           ;pin_manager.c: 73: TRISD = 0xF2;
  9052  00360C  0EF2               	movlw	242
  9053  00360E  6E95               	movwf	3989,c	;volatile
  9054                           
  9055                           ;pin_manager.c: 78: ANSELC = 0x34;
  9056  003610  0E34               	movlw	52
  9057  003612  010F               	movlb	15	; () banked
  9058  003614  6F3A               	movwf	58,b	;volatile
  9059                           
  9060                           ;pin_manager.c: 79: ANSELB = 0x3E;
  9061  003616  0E3E               	movlw	62
  9062  003618  6F39               	movwf	57,b	;volatile
  9063                           
  9064                           ;pin_manager.c: 80: ANSELD = 0xE4;
  9065  00361A  0EE4               	movlw	228
  9066  00361C  6F3B               	movwf	59,b	;volatile
  9067                           
  9068                           ;pin_manager.c: 81: ANSELE = 0x07;
  9069  00361E  0E07               	movlw	7
  9070  003620  6F3C               	movwf	60,b	;volatile
  9071                           
  9072                           ;pin_manager.c: 82: ANSELA = 0x2F;
  9073  003622  0E2F               	movlw	47
  9074  003624  6F38               	movwf	56,b	;volatile
  9075                           
  9076                           ;pin_manager.c: 87: WPUB = 0xC3;
  9077  003626  0EC3               	movlw	195
  9078  003628  6E61               	movwf	3937,c	;volatile
  9079                           
  9080                           ; BSR set to: 15
  9081                           ;pin_manager.c: 88: INTCON2bits.nRBPU = 0;
  9082  00362A  9EF1               	bcf	intcon2,7,c	;volatile
  9083                           
  9084                           ; BSR set to: 15
  9085                           ;pin_manager.c: 96: IOCBbits.IOCB4 = 1;
  9086  00362C  8862               	bsf	3938,4,c	;volatile
  9087                           
  9088                           ; BSR set to: 15
  9089                           ;pin_manager.c: 97: IOCBbits.IOCB5 = 1;
  9090  00362E  8A62               	bsf	3938,5,c	;volatile
  9091                           
  9092                           ; BSR set to: 15
  9093                           ;pin_manager.c: 100: IOCB4_SetInterruptHandler(IOCB4_DefaultInterruptHandler);
  9094  003630  0EFA               	movlw	low _IOCB4_DefaultInterruptHandler
  9095  003632  6E18               	movwf	IOCB4_SetInterruptHandler@InterruptHandler,c
  9096  003634  0E42               	movlw	high _IOCB4_DefaultInterruptHandler
  9097  003636  6E19               	movwf	IOCB4_SetInterruptHandler@InterruptHandler+1,c
  9098  003638  EC63  F021         	call	_IOCB4_SetInterruptHandler	;wreg free
  9099                           
  9100                           ;pin_manager.c: 101: IOCB5_SetInterruptHandler(IOCB5_DefaultInterruptHandler);
  9101  00363C  0EF8               	movlw	low _IOCB5_DefaultInterruptHandler
  9102  00363E  6E18               	movwf	IOCB5_SetInterruptHandler@InterruptHandler,c
  9103  003640  0E42               	movlw	high _IOCB5_DefaultInterruptHandler
  9104  003642  6E19               	movwf	IOCB5_SetInterruptHandler@InterruptHandler+1,c
  9105  003644  EC5E  F021         	call	_IOCB5_SetInterruptHandler	;wreg free
  9106                           
  9107                           ;pin_manager.c: 104: INTCONbits.RBIE = 1;
  9108  003648  86F2               	bsf	intcon,3,c	;volatile
  9109  00364A  0012               	return		;funcret
  9110  00364C                     __end_of_PIN_MANAGER_Initialize:
  9111                           	opt stack 0
  9112                           tosu	equ	0xFFF
  9113                           tosh	equ	0xFFE
  9114                           tosl	equ	0xFFD
  9115                           pclath	equ	0xFFA
  9116                           tblptru	equ	0xFF8
  9117                           tblptrh	equ	0xFF7
  9118                           tblptrl	equ	0xFF6
  9119                           tablat	equ	0xFF5
  9120                           prodh	equ	0xFF4
  9121                           prodl	equ	0xFF3
  9122                           intcon	equ	0xFF2
  9123                           intcon2	equ	0xFF1
  9124                           postinc0	equ	0xFEE
  9125                           plusw0	equ	0xFEB
  9126                           wreg	equ	0xFE8
  9127                           indf1	equ	0xFE7
  9128                           postdec1	equ	0xFE5
  9129                           fsr1h	equ	0xFE2
  9130                           fsr1l	equ	0xFE1
  9131                           indf2	equ	0xFDF
  9132                           postinc2	equ	0xFDE
  9133                           postdec2	equ	0xFDD
  9134                           plusw2	equ	0xFDB
  9135                           fsr2h	equ	0xFDA
  9136                           fsr2l	equ	0xFD9
  9137                           status	equ	0xFD8
  9138                           
  9139 ;; *************** function _IOCB5_SetInterruptHandler *****************
  9140 ;; Defined at:
  9141 ;;		line 172 in file "mcc_generated_files/pin_manager.c"
  9142 ;; Parameters:    Size  Location     Type
  9143 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  9144 ;;		 -> IOCB5_DefaultInterruptHandler(1), 
  9145 ;; Auto vars:     Size  Location     Type
  9146 ;;		None
  9147 ;; Return value:  Size  Location     Type
  9148 ;;                  1    wreg      void 
  9149 ;; Registers used:
  9150 ;;		wreg, status,2, status,0
  9151 ;; Tracked objects:
  9152 ;;		On entry : 0/0
  9153 ;;		On exit  : 0/0
  9154 ;;		Unchanged: 0/0
  9155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9156 ;;      Params:         2       0       0       0       0       0       0
  9157 ;;      Locals:         0       0       0       0       0       0       0
  9158 ;;      Temps:          0       0       0       0       0       0       0
  9159 ;;      Totals:         2       0       0       0       0       0       0
  9160 ;;Total ram usage:        2 bytes
  9161 ;; Hardware stack levels used:    1
  9162 ;; Hardware stack levels required when called:    4
  9163 ;; This function calls:
  9164 ;;		Nothing
  9165 ;; This function is called by:
  9166 ;;		_PIN_MANAGER_Initialize
  9167 ;; This function uses a non-reentrant model
  9168 ;;
  9169                           
  9170                           	psect	text42
  9171  0042BC                     __ptext42:
  9172                           	opt stack 0
  9173  0042BC                     _IOCB5_SetInterruptHandler:
  9174                           	opt stack 23
  9175                           
  9176                           ;pin_manager.c: 173: IOCB5_InterruptHandler = InterruptHandler;
  9177                           
  9178                           ;incstack = 0
  9179  0042BC  C018  F1E6         	movff	IOCB5_SetInterruptHandler@InterruptHandler,_IOCB5_InterruptHandler
  9180  0042C0  C019  F1E7         	movff	IOCB5_SetInterruptHandler@InterruptHandler+1,_IOCB5_InterruptHandler+1
  9181  0042C4  0012               	return		;funcret
  9182  0042C6                     __end_of_IOCB5_SetInterruptHandler:
  9183                           	opt stack 0
  9184                           tosu	equ	0xFFF
  9185                           tosh	equ	0xFFE
  9186                           tosl	equ	0xFFD
  9187                           pclath	equ	0xFFA
  9188                           tblptru	equ	0xFF8
  9189                           tblptrh	equ	0xFF7
  9190                           tblptrl	equ	0xFF6
  9191                           tablat	equ	0xFF5
  9192                           prodh	equ	0xFF4
  9193                           prodl	equ	0xFF3
  9194                           intcon	equ	0xFF2
  9195                           intcon2	equ	0xFF1
  9196                           postinc0	equ	0xFEE
  9197                           plusw0	equ	0xFEB
  9198                           wreg	equ	0xFE8
  9199                           indf1	equ	0xFE7
  9200                           postdec1	equ	0xFE5
  9201                           fsr1h	equ	0xFE2
  9202                           fsr1l	equ	0xFE1
  9203                           indf2	equ	0xFDF
  9204                           postinc2	equ	0xFDE
  9205                           postdec2	equ	0xFDD
  9206                           plusw2	equ	0xFDB
  9207                           fsr2h	equ	0xFDA
  9208                           fsr2l	equ	0xFD9
  9209                           status	equ	0xFD8
  9210                           
  9211 ;; *************** function _IOCB4_SetInterruptHandler *****************
  9212 ;; Defined at:
  9213 ;;		line 143 in file "mcc_generated_files/pin_manager.c"
  9214 ;; Parameters:    Size  Location     Type
  9215 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  9216 ;;		 -> IOCB4_DefaultInterruptHandler(1), 
  9217 ;; Auto vars:     Size  Location     Type
  9218 ;;		None
  9219 ;; Return value:  Size  Location     Type
  9220 ;;                  1    wreg      void 
  9221 ;; Registers used:
  9222 ;;		wreg, status,2, status,0
  9223 ;; Tracked objects:
  9224 ;;		On entry : 0/0
  9225 ;;		On exit  : 0/0
  9226 ;;		Unchanged: 0/0
  9227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9228 ;;      Params:         2       0       0       0       0       0       0
  9229 ;;      Locals:         0       0       0       0       0       0       0
  9230 ;;      Temps:          0       0       0       0       0       0       0
  9231 ;;      Totals:         2       0       0       0       0       0       0
  9232 ;;Total ram usage:        2 bytes
  9233 ;; Hardware stack levels used:    1
  9234 ;; Hardware stack levels required when called:    4
  9235 ;; This function calls:
  9236 ;;		Nothing
  9237 ;; This function is called by:
  9238 ;;		_PIN_MANAGER_Initialize
  9239 ;; This function uses a non-reentrant model
  9240 ;;
  9241                           
  9242                           	psect	text43
  9243  0042C6                     __ptext43:
  9244                           	opt stack 0
  9245  0042C6                     _IOCB4_SetInterruptHandler:
  9246                           	opt stack 23
  9247                           
  9248                           ;pin_manager.c: 144: IOCB4_InterruptHandler = InterruptHandler;
  9249                           
  9250                           ;incstack = 0
  9251  0042C6  C018  F1E8         	movff	IOCB4_SetInterruptHandler@InterruptHandler,_IOCB4_InterruptHandler
  9252  0042CA  C019  F1E9         	movff	IOCB4_SetInterruptHandler@InterruptHandler+1,_IOCB4_InterruptHandler+1
  9253  0042CE  0012               	return		;funcret
  9254  0042D0                     __end_of_IOCB4_SetInterruptHandler:
  9255                           	opt stack 0
  9256                           tosu	equ	0xFFF
  9257                           tosh	equ	0xFFE
  9258                           tosl	equ	0xFFD
  9259                           pclath	equ	0xFFA
  9260                           tblptru	equ	0xFF8
  9261                           tblptrh	equ	0xFF7
  9262                           tblptrl	equ	0xFF6
  9263                           tablat	equ	0xFF5
  9264                           prodh	equ	0xFF4
  9265                           prodl	equ	0xFF3
  9266                           intcon	equ	0xFF2
  9267                           intcon2	equ	0xFF1
  9268                           postinc0	equ	0xFEE
  9269                           plusw0	equ	0xFEB
  9270                           wreg	equ	0xFE8
  9271                           indf1	equ	0xFE7
  9272                           postdec1	equ	0xFE5
  9273                           fsr1h	equ	0xFE2
  9274                           fsr1l	equ	0xFE1
  9275                           indf2	equ	0xFDF
  9276                           postinc2	equ	0xFDE
  9277                           postdec2	equ	0xFDD
  9278                           plusw2	equ	0xFDB
  9279                           fsr2h	equ	0xFDA
  9280                           fsr2l	equ	0xFD9
  9281                           status	equ	0xFD8
  9282                           
  9283 ;; *************** function _OSCILLATOR_Initialize *****************
  9284 ;; Defined at:
  9285 ;;		line 122 in file "mcc_generated_files/mcc.c"
  9286 ;; Parameters:    Size  Location     Type
  9287 ;;		None
  9288 ;; Auto vars:     Size  Location     Type
  9289 ;;		None
  9290 ;; Return value:  Size  Location     Type
  9291 ;;                  1    wreg      void 
  9292 ;; Registers used:
  9293 ;;		wreg, status,2
  9294 ;; Tracked objects:
  9295 ;;		On entry : 0/0
  9296 ;;		On exit  : 0/0
  9297 ;;		Unchanged: 0/0
  9298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9299 ;;      Params:         0       0       0       0       0       0       0
  9300 ;;      Locals:         0       0       0       0       0       0       0
  9301 ;;      Temps:          0       0       0       0       0       0       0
  9302 ;;      Totals:         0       0       0       0       0       0       0
  9303 ;;Total ram usage:        0 bytes
  9304 ;; Hardware stack levels used:    1
  9305 ;; Hardware stack levels required when called:    4
  9306 ;; This function calls:
  9307 ;;		Nothing
  9308 ;; This function is called by:
  9309 ;;		_SYSTEM_Initialize
  9310 ;; This function uses a non-reentrant model
  9311 ;;
  9312                           
  9313                           	psect	text44
  9314  00424C                     __ptext44:
  9315                           	opt stack 0
  9316  00424C                     _OSCILLATOR_Initialize:
  9317                           	opt stack 24
  9318                           
  9319                           ;mcc.c: 125: OSCCON = 0x60;
  9320                           
  9321                           ;incstack = 0
  9322  00424C  0E60               	movlw	96
  9323  00424E  6ED3               	movwf	4051,c	;volatile
  9324                           
  9325                           ;mcc.c: 127: OSCCON2 = 0x04;
  9326  004250  0E04               	movlw	4
  9327  004252  6ED2               	movwf	4050,c	;volatile
  9328                           
  9329                           ;mcc.c: 129: OSCTUNE = 0x80;
  9330  004254  0E80               	movlw	128
  9331  004256  6E9B               	movwf	3995,c	;volatile
  9332  004258  0012               	return		;funcret
  9333  00425A                     __end_of_OSCILLATOR_Initialize:
  9334                           	opt stack 0
  9335                           tosu	equ	0xFFF
  9336                           tosh	equ	0xFFE
  9337                           tosl	equ	0xFFD
  9338                           pclath	equ	0xFFA
  9339                           tblptru	equ	0xFF8
  9340                           tblptrh	equ	0xFF7
  9341                           tblptrl	equ	0xFF6
  9342                           tablat	equ	0xFF5
  9343                           prodh	equ	0xFF4
  9344                           prodl	equ	0xFF3
  9345                           intcon	equ	0xFF2
  9346                           intcon2	equ	0xFF1
  9347                           postinc0	equ	0xFEE
  9348                           plusw0	equ	0xFEB
  9349                           wreg	equ	0xFE8
  9350                           indf1	equ	0xFE7
  9351                           postdec1	equ	0xFE5
  9352                           fsr1h	equ	0xFE2
  9353                           fsr1l	equ	0xFE1
  9354                           indf2	equ	0xFDF
  9355                           postinc2	equ	0xFDE
  9356                           postdec2	equ	0xFDD
  9357                           plusw2	equ	0xFDB
  9358                           fsr2h	equ	0xFDA
  9359                           fsr2l	equ	0xFD9
  9360                           status	equ	0xFD8
  9361                           
  9362 ;; *************** function _INTERRUPT_Initialize *****************
  9363 ;; Defined at:
  9364 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  9365 ;; Parameters:    Size  Location     Type
  9366 ;;		None
  9367 ;; Auto vars:     Size  Location     Type
  9368 ;;		None
  9369 ;; Return value:  Size  Location     Type
  9370 ;;                  1    wreg      void 
  9371 ;; Registers used:
  9372 ;;		None
  9373 ;; Tracked objects:
  9374 ;;		On entry : 0/0
  9375 ;;		On exit  : 0/0
  9376 ;;		Unchanged: 0/0
  9377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9378 ;;      Params:         0       0       0       0       0       0       0
  9379 ;;      Locals:         0       0       0       0       0       0       0
  9380 ;;      Temps:          0       0       0       0       0       0       0
  9381 ;;      Totals:         0       0       0       0       0       0       0
  9382 ;;Total ram usage:        0 bytes
  9383 ;; Hardware stack levels used:    1
  9384 ;; Hardware stack levels required when called:    4
  9385 ;; This function calls:
  9386 ;;		Nothing
  9387 ;; This function is called by:
  9388 ;;		_SYSTEM_Initialize
  9389 ;; This function uses a non-reentrant model
  9390 ;;
  9391                           
  9392                           	psect	text45
  9393  0042EC                     __ptext45:
  9394                           	opt stack 0
  9395  0042EC                     _INTERRUPT_Initialize:
  9396                           	opt stack 24
  9397                           
  9398                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  9399                           
  9400                           ;incstack = 0
  9401  0042EC  9ED0               	bcf	4048,7,c	;volatile
  9402  0042EE  0012               	return		;funcret
  9403  0042F0                     __end_of_INTERRUPT_Initialize:
  9404                           	opt stack 0
  9405                           tosu	equ	0xFFF
  9406                           tosh	equ	0xFFE
  9407                           tosl	equ	0xFFD
  9408                           pclath	equ	0xFFA
  9409                           tblptru	equ	0xFF8
  9410                           tblptrh	equ	0xFF7
  9411                           tblptrl	equ	0xFF6
  9412                           tablat	equ	0xFF5
  9413                           prodh	equ	0xFF4
  9414                           prodl	equ	0xFF3
  9415                           intcon	equ	0xFF2
  9416                           intcon2	equ	0xFF1
  9417                           postinc0	equ	0xFEE
  9418                           plusw0	equ	0xFEB
  9419                           wreg	equ	0xFE8
  9420                           indf1	equ	0xFE7
  9421                           postdec1	equ	0xFE5
  9422                           fsr1h	equ	0xFE2
  9423                           fsr1l	equ	0xFE1
  9424                           indf2	equ	0xFDF
  9425                           postinc2	equ	0xFDE
  9426                           postdec2	equ	0xFDD
  9427                           plusw2	equ	0xFDB
  9428                           fsr2h	equ	0xFDA
  9429                           fsr2l	equ	0xFD9
  9430                           status	equ	0xFD8
  9431                           
  9432 ;; *************** function _EUSART1_Initialize *****************
  9433 ;; Defined at:
  9434 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  9435 ;; Parameters:    Size  Location     Type
  9436 ;;		None
  9437 ;; Auto vars:     Size  Location     Type
  9438 ;;		None
  9439 ;; Return value:  Size  Location     Type
  9440 ;;                  1    wreg      void 
  9441 ;; Registers used:
  9442 ;;		wreg, status,2
  9443 ;; Tracked objects:
  9444 ;;		On entry : 0/0
  9445 ;;		On exit  : 0/0
  9446 ;;		Unchanged: 0/0
  9447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9448 ;;      Params:         0       0       0       0       0       0       0
  9449 ;;      Locals:         0       0       0       0       0       0       0
  9450 ;;      Temps:          0       0       0       0       0       0       0
  9451 ;;      Totals:         0       0       0       0       0       0       0
  9452 ;;Total ram usage:        0 bytes
  9453 ;; Hardware stack levels used:    1
  9454 ;; Hardware stack levels required when called:    4
  9455 ;; This function calls:
  9456 ;;		Nothing
  9457 ;; This function is called by:
  9458 ;;		_SYSTEM_Initialize
  9459 ;; This function uses a non-reentrant model
  9460 ;;
  9461                           
  9462                           	psect	text46
  9463  003D04                     __ptext46:
  9464                           	opt stack 0
  9465  003D04                     _EUSART1_Initialize:
  9466                           	opt stack 24
  9467                           
  9468                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  9469                           
  9470                           ;incstack = 0
  9471  003D04  9A9D               	bcf	3997,5,c	;volatile
  9472                           
  9473                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  9474  003D06  989D               	bcf	3997,4,c	;volatile
  9475                           
  9476                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  9477  003D08  0E08               	movlw	8
  9478  003D0A  6EB8               	movwf	4024,c	;volatile
  9479                           
  9480                           ;eusart1.c: 85: RCSTA1 = 0x90;
  9481  003D0C  0E90               	movlw	144
  9482  003D0E  6EAB               	movwf	4011,c	;volatile
  9483                           
  9484                           ;eusart1.c: 88: TXSTA1 = 0x24;
  9485  003D10  0E24               	movlw	36
  9486  003D12  6EAC               	movwf	4012,c	;volatile
  9487                           
  9488                           ;eusart1.c: 91: SPBRG1 = 0x10;
  9489  003D14  0E10               	movlw	16
  9490  003D16  6EAF               	movwf	4015,c	;volatile
  9491                           
  9492                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  9493  003D18  0E00               	movlw	0
  9494  003D1A  6EB0               	movwf	4016,c	;volatile
  9495                           
  9496                           ;eusart1.c: 98: eusart1TxHead = 0;
  9497  003D1C  0E00               	movlw	0
  9498  003D1E  6E3A               	movwf	_eusart1TxHead,c	;volatile
  9499                           
  9500                           ;eusart1.c: 99: eusart1TxTail = 0;
  9501  003D20  0E00               	movlw	0
  9502  003D22  6E39               	movwf	_eusart1TxTail,c	;volatile
  9503                           
  9504                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  9505  003D24  0E46               	movlw	70
  9506  003D26  0100               	movlb	0	; () banked
  9507  003D28  6FFF               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  9508                           
  9509                           ;eusart1.c: 102: eusart1RxHead = 0;
  9510  003D2A  0E00               	movlw	0
  9511  003D2C  6E38               	movwf	_eusart1RxHead,c	;volatile
  9512                           
  9513                           ;eusart1.c: 103: eusart1RxTail = 0;
  9514  003D2E  0E00               	movlw	0
  9515  003D30  6E37               	movwf	_eusart1RxTail,c	;volatile
  9516                           
  9517                           ;eusart1.c: 104: eusart1RxCount = 0;
  9518  003D32  0E00               	movlw	0
  9519  003D34  6FF4               	movwf	_eusart1RxCount& (0+255),b	;volatile
  9520                           
  9521                           ; BSR set to: 0
  9522                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  9523  003D36  8A9D               	bsf	3997,5,c	;volatile
  9524                           
  9525                           ; BSR set to: 0
  9526  003D38  0012               	return		;funcret
  9527  003D3A                     __end_of_EUSART1_Initialize:
  9528                           	opt stack 0
  9529                           tosu	equ	0xFFF
  9530                           tosh	equ	0xFFE
  9531                           tosl	equ	0xFFD
  9532                           pclath	equ	0xFFA
  9533                           tblptru	equ	0xFF8
  9534                           tblptrh	equ	0xFF7
  9535                           tblptrl	equ	0xFF6
  9536                           tablat	equ	0xFF5
  9537                           prodh	equ	0xFF4
  9538                           prodl	equ	0xFF3
  9539                           intcon	equ	0xFF2
  9540                           intcon2	equ	0xFF1
  9541                           postinc0	equ	0xFEE
  9542                           plusw0	equ	0xFEB
  9543                           wreg	equ	0xFE8
  9544                           indf1	equ	0xFE7
  9545                           postdec1	equ	0xFE5
  9546                           fsr1h	equ	0xFE2
  9547                           fsr1l	equ	0xFE1
  9548                           indf2	equ	0xFDF
  9549                           postinc2	equ	0xFDE
  9550                           postdec2	equ	0xFDD
  9551                           plusw2	equ	0xFDB
  9552                           fsr2h	equ	0xFDA
  9553                           fsr2l	equ	0xFD9
  9554                           status	equ	0xFD8
  9555                           
  9556 ;; *************** function _ADC_Initialize *****************
  9557 ;; Defined at:
  9558 ;;		line 58 in file "mcc_generated_files/adc.c"
  9559 ;; Parameters:    Size  Location     Type
  9560 ;;		None
  9561 ;; Auto vars:     Size  Location     Type
  9562 ;;		None
  9563 ;; Return value:  Size  Location     Type
  9564 ;;                  1    wreg      void 
  9565 ;; Registers used:
  9566 ;;		wreg, status,2
  9567 ;; Tracked objects:
  9568 ;;		On entry : 0/0
  9569 ;;		On exit  : 0/0
  9570 ;;		Unchanged: 0/0
  9571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9572 ;;      Params:         0       0       0       0       0       0       0
  9573 ;;      Locals:         0       0       0       0       0       0       0
  9574 ;;      Temps:          0       0       0       0       0       0       0
  9575 ;;      Totals:         0       0       0       0       0       0       0
  9576 ;;Total ram usage:        0 bytes
  9577 ;; Hardware stack levels used:    1
  9578 ;; Hardware stack levels required when called:    4
  9579 ;; This function calls:
  9580 ;;		Nothing
  9581 ;; This function is called by:
  9582 ;;		_SYSTEM_Initialize
  9583 ;; This function uses a non-reentrant model
  9584 ;;
  9585                           
  9586                           	psect	text47
  9587  0041B4                     __ptext47:
  9588                           	opt stack 0
  9589  0041B4                     _ADC_Initialize:
  9590                           	opt stack 24
  9591                           
  9592                           ;adc.c: 63: ADCON0 = 0x05;
  9593                           
  9594                           ; BSR set to: 0
  9595                           ;incstack = 0
  9596  0041B4  0E05               	movlw	5
  9597  0041B6  6EC2               	movwf	4034,c	;volatile
  9598                           
  9599                           ;adc.c: 66: ADCON1 = 0x00;
  9600  0041B8  0E00               	movlw	0
  9601  0041BA  6EC1               	movwf	4033,c	;volatile
  9602                           
  9603                           ;adc.c: 69: ADCON2 = 0x87;
  9604  0041BC  0E87               	movlw	135
  9605  0041BE  6EC0               	movwf	4032,c	;volatile
  9606                           
  9607                           ;adc.c: 72: ADRESL = 0x00;
  9608  0041C0  0E00               	movlw	0
  9609  0041C2  6EC3               	movwf	4035,c	;volatile
  9610                           
  9611                           ;adc.c: 75: ADRESH = 0x00;
  9612  0041C4  0E00               	movlw	0
  9613  0041C6  6EC4               	movwf	4036,c	;volatile
  9614  0041C8  0012               	return		;funcret
  9615  0041CA                     __end_of_ADC_Initialize:
  9616                           	opt stack 0
  9617                           tosu	equ	0xFFF
  9618                           tosh	equ	0xFFE
  9619                           tosl	equ	0xFFD
  9620                           pclath	equ	0xFFA
  9621                           tblptru	equ	0xFF8
  9622                           tblptrh	equ	0xFF7
  9623                           tblptrl	equ	0xFF6
  9624                           tablat	equ	0xFF5
  9625                           prodh	equ	0xFF4
  9626                           prodl	equ	0xFF3
  9627                           intcon	equ	0xFF2
  9628                           intcon2	equ	0xFF1
  9629                           postinc0	equ	0xFEE
  9630                           plusw0	equ	0xFEB
  9631                           wreg	equ	0xFE8
  9632                           indf1	equ	0xFE7
  9633                           postdec1	equ	0xFE5
  9634                           fsr1h	equ	0xFE2
  9635                           fsr1l	equ	0xFE1
  9636                           indf2	equ	0xFDF
  9637                           postinc2	equ	0xFDE
  9638                           postdec2	equ	0xFDD
  9639                           plusw2	equ	0xFDB
  9640                           fsr2h	equ	0xFDA
  9641                           fsr2l	equ	0xFD9
  9642                           status	equ	0xFD8
  9643                           
  9644 ;; *************** function _SetMcuRunTime *****************
  9645 ;; Defined at:
  9646 ;;		line 57 in file "SystemStatus.c"
  9647 ;; Parameters:    Size  Location     Type
  9648 ;;		None
  9649 ;; Auto vars:     Size  Location     Type
  9650 ;;		None
  9651 ;; Return value:  Size  Location     Type
  9652 ;;                  1    wreg      void 
  9653 ;; Registers used:
  9654 ;;		wreg, status,2, status,0, cstack
  9655 ;; Tracked objects:
  9656 ;;		On entry : 0/0
  9657 ;;		On exit  : 0/0
  9658 ;;		Unchanged: 0/0
  9659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9660 ;;      Params:         0       0       0       0       0       0       0
  9661 ;;      Locals:         0       0       0       0       0       0       0
  9662 ;;      Temps:          0       0       0       0       0       0       0
  9663 ;;      Totals:         0       0       0       0       0       0       0
  9664 ;;Total ram usage:        0 bytes
  9665 ;; Hardware stack levels used:    1
  9666 ;; Hardware stack levels required when called:    5
  9667 ;; This function calls:
  9668 ;;		___llmod
  9669 ;; This function is called by:
  9670 ;;		_main
  9671 ;; This function uses a non-reentrant model
  9672 ;;
  9673                           
  9674                           	psect	text48
  9675  003AA8                     __ptext48:
  9676                           	opt stack 0
  9677  003AA8                     _SetMcuRunTime:
  9678                           	opt stack 25
  9679                           
  9680                           ;SystemStatus.c: 59: mcuRunTimeIn5SecTicks++;
  9681                           
  9682                           ;incstack = 0
  9683  003AA8  0E01               	movlw	1
  9684  003AAA  0100               	movlb	0	; () banked
  9685  003AAC  27E0               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  9686  003AAE  0E00               	movlw	0
  9687  003AB0  23E1               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  9688  003AB2  23E2               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  9689  003AB4  23E3               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  9690                           
  9691                           ; BSR set to: 0
  9692                           ;SystemStatus.c: 60: mcuRunTimeIn5SecTicks %= (17280);
  9693  003AB6  C0E0  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  9694  003ABA  C0E1  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  9695  003ABE  C0E2  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  9696  003AC2  C0E3  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  9697  003AC6  0E80               	movlw	128
  9698  003AC8  6E1C               	movwf	___llmod@divisor,c
  9699  003ACA  0E43               	movlw	67
  9700  003ACC  6E1D               	movwf	___llmod@divisor+1,c
  9701  003ACE  0E00               	movlw	0
  9702  003AD0  6E1E               	movwf	___llmod@divisor+2,c
  9703  003AD2  0E00               	movlw	0
  9704  003AD4  6E1F               	movwf	___llmod@divisor+3,c
  9705  003AD6  ECC1  F01A         	call	___llmod	;wreg free
  9706  003ADA  C018  F0E0         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  9707  003ADE  C019  F0E1         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  9708  003AE2  C01A  F0E2         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  9709  003AE6  C01B  F0E3         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  9710  003AEA  0012               	return		;funcret
  9711  003AEC                     __end_of_SetMcuRunTime:
  9712                           	opt stack 0
  9713                           tosu	equ	0xFFF
  9714                           tosh	equ	0xFFE
  9715                           tosl	equ	0xFFD
  9716                           pclath	equ	0xFFA
  9717                           tblptru	equ	0xFF8
  9718                           tblptrh	equ	0xFF7
  9719                           tblptrl	equ	0xFF6
  9720                           tablat	equ	0xFF5
  9721                           prodh	equ	0xFF4
  9722                           prodl	equ	0xFF3
  9723                           intcon	equ	0xFF2
  9724                           intcon2	equ	0xFF1
  9725                           postinc0	equ	0xFEE
  9726                           plusw0	equ	0xFEB
  9727                           wreg	equ	0xFE8
  9728                           indf1	equ	0xFE7
  9729                           postdec1	equ	0xFE5
  9730                           fsr1h	equ	0xFE2
  9731                           fsr1l	equ	0xFE1
  9732                           indf2	equ	0xFDF
  9733                           postinc2	equ	0xFDE
  9734                           postdec2	equ	0xFDD
  9735                           plusw2	equ	0xFDB
  9736                           fsr2h	equ	0xFDA
  9737                           fsr2l	equ	0xFD9
  9738                           status	equ	0xFD8
  9739                           
  9740 ;; *************** function ___llmod *****************
  9741 ;; Defined at:
  9742 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  9743 ;; Parameters:    Size  Location     Type
  9744 ;;  dividend        4   23[COMRAM] unsigned long 
  9745 ;;  divisor         4   27[COMRAM] unsigned long 
  9746 ;; Auto vars:     Size  Location     Type
  9747 ;;  counter         1   31[COMRAM] unsigned char 
  9748 ;; Return value:  Size  Location     Type
  9749 ;;                  4   23[COMRAM] unsigned long 
  9750 ;; Registers used:
  9751 ;;		wreg, status,2, status,0
  9752 ;; Tracked objects:
  9753 ;;		On entry : 0/0
  9754 ;;		On exit  : 0/0
  9755 ;;		Unchanged: 0/0
  9756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9757 ;;      Params:         8       0       0       0       0       0       0
  9758 ;;      Locals:         1       0       0       0       0       0       0
  9759 ;;      Temps:          0       0       0       0       0       0       0
  9760 ;;      Totals:         9       0       0       0       0       0       0
  9761 ;;Total ram usage:        9 bytes
  9762 ;; Hardware stack levels used:    1
  9763 ;; Hardware stack levels required when called:    4
  9764 ;; This function calls:
  9765 ;;		Nothing
  9766 ;; This function is called by:
  9767 ;;		_SetMcuRunTime
  9768 ;;		_GetMcuRunTime
  9769 ;; This function uses a non-reentrant model
  9770 ;;
  9771                           
  9772                           	psect	text49
  9773  003582                     __ptext49:
  9774                           	opt stack 0
  9775  003582                     ___llmod:
  9776                           	opt stack 23
  9777                           
  9778                           ;incstack = 0
  9779  003582  501C               	movf	___llmod@divisor,w,c
  9780  003584  101D               	iorwf	___llmod@divisor+1,w,c
  9781  003586  101E               	iorwf	___llmod@divisor+2,w,c
  9782  003588  101F               	iorwf	___llmod@divisor+3,w,c
  9783  00358A  B4D8               	btfsc	status,2,c
  9784  00358C  D024               	goto	l1910
  9785  00358E  0E01               	movlw	1
  9786  003590  6E20               	movwf	___llmod@counter,c
  9787  003592  D006               	goto	l1905
  9788  003594  90D8               	bcf	status,0,c
  9789  003596  361C               	rlcf	___llmod@divisor,f,c
  9790  003598  361D               	rlcf	___llmod@divisor+1,f,c
  9791  00359A  361E               	rlcf	___llmod@divisor+2,f,c
  9792  00359C  361F               	rlcf	___llmod@divisor+3,f,c
  9793  00359E  2A20               	incf	___llmod@counter,f,c
  9794  0035A0                     l1905:
  9795  0035A0  AE1F               	btfss	___llmod@divisor+3,7,c
  9796  0035A2  D7F8               	goto	l1906
  9797  0035A4                     u8320:
  9798  0035A4  501C               	movf	___llmod@divisor,w,c
  9799  0035A6  5C18               	subwf	___llmod@dividend,w,c
  9800  0035A8  501D               	movf	___llmod@divisor+1,w,c
  9801  0035AA  5819               	subwfb	___llmod@dividend+1,w,c
  9802  0035AC  501E               	movf	___llmod@divisor+2,w,c
  9803  0035AE  581A               	subwfb	___llmod@dividend+2,w,c
  9804  0035B0  501F               	movf	___llmod@divisor+3,w,c
  9805  0035B2  581B               	subwfb	___llmod@dividend+3,w,c
  9806  0035B4  A0D8               	btfss	status,0,c
  9807  0035B6  D008               	goto	l1909
  9808  0035B8  501C               	movf	___llmod@divisor,w,c
  9809  0035BA  5E18               	subwf	___llmod@dividend,f,c
  9810  0035BC  501D               	movf	___llmod@divisor+1,w,c
  9811  0035BE  5A19               	subwfb	___llmod@dividend+1,f,c
  9812  0035C0  501E               	movf	___llmod@divisor+2,w,c
  9813  0035C2  5A1A               	subwfb	___llmod@dividend+2,f,c
  9814  0035C4  501F               	movf	___llmod@divisor+3,w,c
  9815  0035C6  5A1B               	subwfb	___llmod@dividend+3,f,c
  9816  0035C8                     l1909:
  9817  0035C8  90D8               	bcf	status,0,c
  9818  0035CA  321F               	rrcf	___llmod@divisor+3,f,c
  9819  0035CC  321E               	rrcf	___llmod@divisor+2,f,c
  9820  0035CE  321D               	rrcf	___llmod@divisor+1,f,c
  9821  0035D0  321C               	rrcf	___llmod@divisor,f,c
  9822  0035D2  2E20               	decfsz	___llmod@counter,f,c
  9823  0035D4  D7E7               	goto	u8320
  9824  0035D6                     l1910:
  9825  0035D6  C018  F018         	movff	___llmod@dividend,?___llmod
  9826  0035DA  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
  9827  0035DE  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
  9828  0035E2  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
  9829  0035E6  0012               	return		;funcret
  9830  0035E8                     __end_of___llmod:
  9831                           	opt stack 0
  9832                           tosu	equ	0xFFF
  9833                           tosh	equ	0xFFE
  9834                           tosl	equ	0xFFD
  9835                           pclath	equ	0xFFA
  9836                           tblptru	equ	0xFF8
  9837                           tblptrh	equ	0xFF7
  9838                           tblptrl	equ	0xFF6
  9839                           tablat	equ	0xFF5
  9840                           prodh	equ	0xFF4
  9841                           prodl	equ	0xFF3
  9842                           intcon	equ	0xFF2
  9843                           intcon2	equ	0xFF1
  9844                           postinc0	equ	0xFEE
  9845                           plusw0	equ	0xFEB
  9846                           wreg	equ	0xFE8
  9847                           indf1	equ	0xFE7
  9848                           postdec1	equ	0xFE5
  9849                           fsr1h	equ	0xFE2
  9850                           fsr1l	equ	0xFE1
  9851                           indf2	equ	0xFDF
  9852                           postinc2	equ	0xFDE
  9853                           postdec2	equ	0xFDD
  9854                           plusw2	equ	0xFDB
  9855                           fsr2h	equ	0xFDA
  9856                           fsr2l	equ	0xFD9
  9857                           status	equ	0xFD8
  9858                           
  9859 ;; *************** function _SendSystemStartAck *****************
  9860 ;; Defined at:
  9861 ;;		line 140 in file "SystemCommon.c"
  9862 ;; Parameters:    Size  Location     Type
  9863 ;;		None
  9864 ;; Auto vars:     Size  Location     Type
  9865 ;;		None
  9866 ;; Return value:  Size  Location     Type
  9867 ;;                  1    wreg      void 
  9868 ;; Registers used:
  9869 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9870 ;; Tracked objects:
  9871 ;;		On entry : 0/0
  9872 ;;		On exit  : 0/0
  9873 ;;		Unchanged: 0/0
  9874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9875 ;;      Params:         0       0       0       0       0       0       0
  9876 ;;      Locals:         0       0       0       0       0       0       0
  9877 ;;      Temps:          0       0       0       0       0       0       0
  9878 ;;      Totals:         0       0       0       0       0       0       0
  9879 ;;Total ram usage:        0 bytes
  9880 ;; Hardware stack levels used:    1
  9881 ;; Hardware stack levels required when called:    7
  9882 ;; This function calls:
  9883 ;;		_SendAckMessage
  9884 ;; This function is called by:
  9885 ;;		_main
  9886 ;; This function uses a non-reentrant model
  9887 ;;
  9888                           
  9889                           	psect	text50
  9890  00429C                     __ptext50:
  9891                           	opt stack 0
  9892  00429C                     _SendSystemStartAck:
  9893                           	opt stack 23
  9894                           
  9895                           ;SystemCommon.c: 142: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_SYSTE
      +                          M_START);
  9896                           
  9897                           ;incstack = 0
  9898  00429C  0E10               	movlw	16
  9899  00429E  6E24               	movwf	SendAckMessage@inRequest,c
  9900  0042A0  0E01               	movlw	1
  9901  0042A2  ECE2  F01C         	call	_SendAckMessage
  9902  0042A6  0012               	return		;funcret
  9903  0042A8                     __end_of_SendSystemStartAck:
  9904                           	opt stack 0
  9905                           tosu	equ	0xFFF
  9906                           tosh	equ	0xFFE
  9907                           tosl	equ	0xFFD
  9908                           pclath	equ	0xFFA
  9909                           tblptru	equ	0xFF8
  9910                           tblptrh	equ	0xFF7
  9911                           tblptrl	equ	0xFF6
  9912                           tablat	equ	0xFF5
  9913                           prodh	equ	0xFF4
  9914                           prodl	equ	0xFF3
  9915                           intcon	equ	0xFF2
  9916                           intcon2	equ	0xFF1
  9917                           postinc0	equ	0xFEE
  9918                           plusw0	equ	0xFEB
  9919                           wreg	equ	0xFE8
  9920                           indf1	equ	0xFE7
  9921                           postdec1	equ	0xFE5
  9922                           fsr1h	equ	0xFE2
  9923                           fsr1l	equ	0xFE1
  9924                           indf2	equ	0xFDF
  9925                           postinc2	equ	0xFDE
  9926                           postdec2	equ	0xFDD
  9927                           plusw2	equ	0xFDB
  9928                           fsr2h	equ	0xFDA
  9929                           fsr2l	equ	0xFD9
  9930                           status	equ	0xFD8
  9931                           
  9932 ;; *************** function _SendAckMessage *****************
  9933 ;; Defined at:
  9934 ;;		line 171 in file "EusartApp.c"
  9935 ;; Parameters:    Size  Location     Type
  9936 ;;  inGroup         1    wreg     enum E7193
  9937 ;;  inRequest       1   35[COMRAM] enum E7201
  9938 ;; Auto vars:     Size  Location     Type
  9939 ;;  inGroup         1   36[COMRAM] enum E7193
  9940 ;;  TxMsg           6   37[COMRAM] unsigned char [6]
  9941 ;; Return value:  Size  Location     Type
  9942 ;;                  1    wreg      void 
  9943 ;; Registers used:
  9944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9945 ;; Tracked objects:
  9946 ;;		On entry : 0/0
  9947 ;;		On exit  : 0/0
  9948 ;;		Unchanged: 0/0
  9949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9950 ;;      Params:         1       0       0       0       0       0       0
  9951 ;;      Locals:         7       0       0       0       0       0       0
  9952 ;;      Temps:          0       0       0       0       0       0       0
  9953 ;;      Totals:         8       0       0       0       0       0       0
  9954 ;;Total ram usage:        8 bytes
  9955 ;; Hardware stack levels used:    1
  9956 ;; Hardware stack levels required when called:    6
  9957 ;; This function calls:
  9958 ;;		_WriteUartMessage
  9959 ;;		_ZeroArray
  9960 ;;		_crc8
  9961 ;; This function is called by:
  9962 ;;		_testLeds
  9963 ;;		_SetChannelMode
  9964 ;;		_FlashReadUart
  9965 ;;		_FlashEreaseMem
  9966 ;;		_DacSetValue
  9967 ;;		_UpdateSynthFreq
  9968 ;;		_SetSynthOper
  9969 ;;		_ResetMcu
  9970 ;;		_SendSystemStartAck
  9971 ;;		_keepAliveSignalUart
  9972 ;; This function uses a non-reentrant model
  9973 ;;
  9974                           
  9975                           	psect	text51
  9976  0039C4                     __ptext51:
  9977                           	opt stack 0
  9978  0039C4                     _SendAckMessage:
  9979                           	opt stack 21
  9980                           
  9981                           ;incstack = 0
  9982                           ;SendAckMessage@inGroup stored from wreg
  9983  0039C4  6E25               	movwf	SendAckMessage@inGroup,c
  9984                           
  9985                           ;EusartApp.c: 174: char TxMsg[(0x5) + 1];
  9986                           ;EusartApp.c: 175: ZeroArray(TxMsg, (0x5) + 1);
  9987  0039C6  0E26               	movlw	low SendAckMessage@TxMsg
  9988  0039C8  6E20               	movwf	ZeroArray@array,c
  9989  0039CA  0E00               	movlw	high SendAckMessage@TxMsg
  9990  0039CC  6E21               	movwf	ZeroArray@array+1,c
  9991  0039CE  0E00               	movlw	0
  9992  0039D0  6E23               	movwf	ZeroArray@size+1,c
  9993  0039D2  0E06               	movlw	6
  9994  0039D4  6E22               	movwf	ZeroArray@size,c
  9995  0039D6  EC95  F020         	call	_ZeroArray	;wreg free
  9996                           
  9997                           ;EusartApp.c: 178: TxMsg[(0)] = (0x24);
  9998  0039DA  0E24               	movlw	36
  9999  0039DC  6E26               	movwf	SendAckMessage@TxMsg,c
 10000                           
 10001                           ;EusartApp.c: 179: TxMsg[(1)] = inGroup;
 10002  0039DE  C025  F027         	movff	SendAckMessage@inGroup,SendAckMessage@TxMsg+1
 10003                           
 10004                           ;EusartApp.c: 180: TxMsg[(2)] = inRequest;
 10005  0039E2  C024  F028         	movff	SendAckMessage@inRequest,SendAckMessage@TxMsg+2
 10006                           
 10007                           ;EusartApp.c: 181: TxMsg[(3)] = 0;
 10008  0039E6  0E00               	movlw	0
 10009  0039E8  6E29               	movwf	SendAckMessage@TxMsg+3,c
 10010                           
 10011                           ;EusartApp.c: 183: TxMsg[(0x5)] = crc8(TxMsg, (0x5));
 10012  0039EA  0E26               	movlw	low SendAckMessage@TxMsg
 10013  0039EC  6E18               	movwf	crc8@dataArray,c
 10014  0039EE  0E00               	movlw	high SendAckMessage@TxMsg
 10015  0039F0  6E19               	movwf	crc8@dataArray+1,c
 10016  0039F2  0E00               	movlw	0
 10017  0039F4  6E1B               	movwf	crc8@dataSize+1,c
 10018  0039F6  0E05               	movlw	5
 10019  0039F8  6E1A               	movwf	crc8@dataSize,c
 10020  0039FA  EC0B  F01D         	call	_crc8	;wreg free
 10021  0039FE  6E2B               	movwf	SendAckMessage@TxMsg+5,c
 10022                           
 10023                           ;EusartApp.c: 185: WriteUartMessage(TxMsg, (0x5) + 1);
 10024  003A00  0E26               	movlw	low SendAckMessage@TxMsg
 10025  003A02  6E19               	movwf	WriteUartMessage@dataBuf,c
 10026  003A04  0E00               	movlw	high SendAckMessage@TxMsg
 10027  003A06  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
 10028  003A08  0E00               	movlw	0
 10029  003A0A  6E1C               	movwf	WriteUartMessage@dataSize+1,c
 10030  003A0C  0E06               	movlw	6
 10031  003A0E  6E1B               	movwf	WriteUartMessage@dataSize,c
 10032  003A10  EC9D  F01E         	call	_WriteUartMessage	;wreg free
 10033  003A14  0012               	return		;funcret
 10034  003A16                     __end_of_SendAckMessage:
 10035                           	opt stack 0
 10036                           tosu	equ	0xFFF
 10037                           tosh	equ	0xFFE
 10038                           tosl	equ	0xFFD
 10039                           pclath	equ	0xFFA
 10040                           tblptru	equ	0xFF8
 10041                           tblptrh	equ	0xFF7
 10042                           tblptrl	equ	0xFF6
 10043                           tablat	equ	0xFF5
 10044                           prodh	equ	0xFF4
 10045                           prodl	equ	0xFF3
 10046                           intcon	equ	0xFF2
 10047                           intcon2	equ	0xFF1
 10048                           postinc0	equ	0xFEE
 10049                           plusw0	equ	0xFEB
 10050                           wreg	equ	0xFE8
 10051                           indf1	equ	0xFE7
 10052                           postdec1	equ	0xFE5
 10053                           fsr1h	equ	0xFE2
 10054                           fsr1l	equ	0xFE1
 10055                           indf2	equ	0xFDF
 10056                           postinc2	equ	0xFDE
 10057                           postdec2	equ	0xFDD
 10058                           plusw2	equ	0xFDB
 10059                           fsr2h	equ	0xFDA
 10060                           fsr2l	equ	0xFD9
 10061                           status	equ	0xFD8
 10062                           
 10063 ;; *************** function _crc8 *****************
 10064 ;; Defined at:
 10065 ;;		line 13 in file "SystemCommon.c"
 10066 ;; Parameters:    Size  Location     Type
 10067 ;;  dataArray       2   23[COMRAM] PTR unsigned char 
 10068 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(18), SynthReadData@TxMsg(18), DacReadValue@TxMsg(7), 
 10069 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
 10070 ;;  dataSize        2   25[COMRAM] int 
 10071 ;; Auto vars:     Size  Location     Type
 10072 ;;  i               2   30[COMRAM] int 
 10073 ;;  crc             2   28[COMRAM] int 
 10074 ;; Return value:  Size  Location     Type
 10075 ;;                  1    wreg      unsigned char 
 10076 ;; Registers used:
 10077 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10078 ;; Tracked objects:
 10079 ;;		On entry : 0/0
 10080 ;;		On exit  : 0/0
 10081 ;;		Unchanged: 0/0
 10082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10083 ;;      Params:         4       0       0       0       0       0       0
 10084 ;;      Locals:         4       0       0       0       0       0       0
 10085 ;;      Temps:          1       0       0       0       0       0       0
 10086 ;;      Totals:         9       0       0       0       0       0       0
 10087 ;;Total ram usage:        9 bytes
 10088 ;; Hardware stack levels used:    1
 10089 ;; Hardware stack levels required when called:    4
 10090 ;; This function calls:
 10091 ;;		Nothing
 10092 ;; This function is called by:
 10093 ;;		_readUartMessage
 10094 ;;		_SendAckMessage
 10095 ;;		_FlashReadUart
 10096 ;;		_FlashReadCondition
 10097 ;;		_DacReadValue
 10098 ;;		_SynthReadData
 10099 ;;		_GetMcuFwVersion
 10100 ;;		_GetMcuRunTime
 10101 ;; This function uses a non-reentrant model
 10102 ;;
 10103                           
 10104                           	psect	text52
 10105  003A16                     __ptext52:
 10106                           	opt stack 0
 10107  003A16                     _crc8:
 10108                           	opt stack 25
 10109                           
 10110                           ;SystemCommon.c: 15: int crc = 0;
 10111                           
 10112                           ;incstack = 0
 10113  003A16  0E00               	movlw	0
 10114  003A18  6E1E               	movwf	crc8@crc+1,c
 10115  003A1A  0E00               	movlw	0
 10116  003A1C  6E1D               	movwf	crc8@crc,c
 10117                           
 10118                           ;SystemCommon.c: 16: for (int i = 0; i < dataSize; i++)
 10119  003A1E  0E00               	movlw	0
 10120  003A20  6E20               	movwf	crc8@i+1,c
 10121  003A22  0E00               	movlw	0
 10122  003A24  6E1F               	movwf	crc8@i,c
 10123  003A26  D00E               	goto	l1348
 10124  003A28                     
 10125                           ;SystemCommon.c: 17: {
 10126                           ;SystemCommon.c: 18: crc += dataArray[i];
 10127  003A28  501F               	movf	crc8@i,w,c
 10128  003A2A  2418               	addwf	crc8@dataArray,w,c
 10129  003A2C  6ED9               	movwf	fsr2l,c
 10130  003A2E  5020               	movf	crc8@i+1,w,c
 10131  003A30  2019               	addwfc	crc8@dataArray+1,w,c
 10132  003A32  6EDA               	movwf	fsr2h,c
 10133  003A34  50DF               	movf	indf2,w,c
 10134  003A36  6E1C               	movwf	??_crc8& (0+255),c
 10135  003A38  501C               	movf	??_crc8,w,c
 10136  003A3A  261D               	addwf	crc8@crc,f,c
 10137  003A3C  0E00               	movlw	0
 10138  003A3E  221E               	addwfc	crc8@crc+1,f,c
 10139  003A40  4A1F               	infsnz	crc8@i,f,c
 10140  003A42  2A20               	incf	crc8@i+1,f,c
 10141  003A44                     l1348:
 10142  003A44  501A               	movf	crc8@dataSize,w,c
 10143  003A46  5C1F               	subwf	crc8@i,w,c
 10144  003A48  5020               	movf	crc8@i+1,w,c
 10145  003A4A  0A80               	xorlw	128
 10146  003A4C  6E1C               	movwf	??_crc8& (0+255),c
 10147  003A4E  501B               	movf	crc8@dataSize+1,w,c
 10148  003A50  0A80               	xorlw	128
 10149  003A52  581C               	subwfb	??_crc8& (0+255),w,c
 10150  003A54  A0D8               	btfss	status,0,c
 10151  003A56  D7E8               	goto	l1349
 10152                           
 10153                           ;SystemCommon.c: 19: }
 10154                           ;SystemCommon.c: 20: crc &= 0xff;
 10155  003A58  0EFF               	movlw	255
 10156  003A5A  161D               	andwf	crc8@crc,f,c
 10157  003A5C  0E00               	movlw	0
 10158  003A5E  161E               	andwf	crc8@crc+1,f,c
 10159                           
 10160                           ;SystemCommon.c: 21: return crc;
 10161  003A60  501D               	movf	crc8@crc,w,c
 10162  003A62  0012               	return	
 10163  003A64                     __end_of_crc8:
 10164                           	opt stack 0
 10165                           tosu	equ	0xFFF
 10166                           tosh	equ	0xFFE
 10167                           tosl	equ	0xFFD
 10168                           pclath	equ	0xFFA
 10169                           tblptru	equ	0xFF8
 10170                           tblptrh	equ	0xFF7
 10171                           tblptrl	equ	0xFF6
 10172                           tablat	equ	0xFF5
 10173                           prodh	equ	0xFF4
 10174                           prodl	equ	0xFF3
 10175                           intcon	equ	0xFF2
 10176                           intcon2	equ	0xFF1
 10177                           postinc0	equ	0xFEE
 10178                           plusw0	equ	0xFEB
 10179                           wreg	equ	0xFE8
 10180                           indf1	equ	0xFE7
 10181                           postdec1	equ	0xFE5
 10182                           fsr1h	equ	0xFE2
 10183                           fsr1l	equ	0xFE1
 10184                           indf2	equ	0xFDF
 10185                           postinc2	equ	0xFDE
 10186                           postdec2	equ	0xFDD
 10187                           plusw2	equ	0xFDB
 10188                           fsr2h	equ	0xFDA
 10189                           fsr2l	equ	0xFD9
 10190                           status	equ	0xFD8
 10191                           
 10192 ;; *************** function _ZeroArray *****************
 10193 ;; Defined at:
 10194 ;;		line 24 in file "SystemCommon.c"
 10195 ;; Parameters:    Size  Location     Type
 10196 ;;  array           2   31[COMRAM] PTR unsigned char 
 10197 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SynthReadData@TxMsg(18), DacReadValue@TxMsg(7), 
 10198 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), 
 10199 ;;		 -> rxMsgData(20), rxMsgQueue(20), 
 10200 ;;  size            2   33[COMRAM] int 
 10201 ;; Auto vars:     Size  Location     Type
 10202 ;;		None
 10203 ;; Return value:  Size  Location     Type
 10204 ;;                  1    wreg      void 
 10205 ;; Registers used:
 10206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10207 ;; Tracked objects:
 10208 ;;		On entry : 0/0
 10209 ;;		On exit  : 0/0
 10210 ;;		Unchanged: 0/0
 10211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10212 ;;      Params:         4       0       0       0       0       0       0
 10213 ;;      Locals:         0       0       0       0       0       0       0
 10214 ;;      Temps:          0       0       0       0       0       0       0
 10215 ;;      Totals:         4       0       0       0       0       0       0
 10216 ;;Total ram usage:        4 bytes
 10217 ;; Hardware stack levels used:    1
 10218 ;; Hardware stack levels required when called:    5
 10219 ;; This function calls:
 10220 ;;		_memset
 10221 ;; This function is called by:
 10222 ;;		_readUartMessage
 10223 ;;		_InitRxMessageParams
 10224 ;;		_SendAckMessage
 10225 ;;		_FlashReadUart
 10226 ;;		_FlashEreaseMem
 10227 ;;		_FlashReadCondition
 10228 ;;		_DacReadValue
 10229 ;;		_SynthReadData
 10230 ;;		_GetIntFromUartData
 10231 ;;		_GetMcuFwVersion
 10232 ;; This function uses a non-reentrant model
 10233 ;;
 10234                           
 10235                           	psect	text53
 10236  00412A                     __ptext53:
 10237                           	opt stack 0
 10238  00412A                     _ZeroArray:
 10239                           	opt stack 24
 10240                           
 10241                           ;SystemCommon.c: 26: memset(array, 0x0, size);
 10242                           
 10243                           ;incstack = 0
 10244  00412A  C020  F018         	movff	ZeroArray@array,memset@p1
 10245  00412E  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
 10246  004132  0E00               	movlw	0
 10247  004134  6E1B               	movwf	memset@c+1,c
 10248  004136  0E00               	movlw	0
 10249  004138  6E1A               	movwf	memset@c,c
 10250  00413A  C022  F01C         	movff	ZeroArray@size,memset@n
 10251  00413E  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
 10252  004142  EC97  F01F         	call	_memset	;wreg free
 10253  004146  0012               	return		;funcret
 10254  004148                     __end_of_ZeroArray:
 10255                           	opt stack 0
 10256                           tosu	equ	0xFFF
 10257                           tosh	equ	0xFFE
 10258                           tosl	equ	0xFFD
 10259                           pclath	equ	0xFFA
 10260                           tblptru	equ	0xFF8
 10261                           tblptrh	equ	0xFF7
 10262                           tblptrl	equ	0xFF6
 10263                           tablat	equ	0xFF5
 10264                           prodh	equ	0xFF4
 10265                           prodl	equ	0xFF3
 10266                           intcon	equ	0xFF2
 10267                           intcon2	equ	0xFF1
 10268                           postinc0	equ	0xFEE
 10269                           plusw0	equ	0xFEB
 10270                           wreg	equ	0xFE8
 10271                           indf1	equ	0xFE7
 10272                           postdec1	equ	0xFE5
 10273                           fsr1h	equ	0xFE2
 10274                           fsr1l	equ	0xFE1
 10275                           indf2	equ	0xFDF
 10276                           postinc2	equ	0xFDE
 10277                           postdec2	equ	0xFDD
 10278                           plusw2	equ	0xFDB
 10279                           fsr2h	equ	0xFDA
 10280                           fsr2l	equ	0xFD9
 10281                           status	equ	0xFD8
 10282                           
 10283 ;; *************** function _WriteUartMessage *****************
 10284 ;; Defined at:
 10285 ;;		line 158 in file "EusartApp.c"
 10286 ;; Parameters:    Size  Location     Type
 10287 ;;  dataBuf         2   24[COMRAM] PTR unsigned char 
 10288 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(18), SynthReadData@TxMsg(18), DacReadValue@TxMsg(7), 
 10289 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), 
 10290 ;;  dataSize        2   26[COMRAM] int 
 10291 ;; Auto vars:     Size  Location     Type
 10292 ;;  idx             2   29[COMRAM] int 
 10293 ;; Return value:  Size  Location     Type
 10294 ;;                  1    wreg      void 
 10295 ;; Registers used:
 10296 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10297 ;; Tracked objects:
 10298 ;;		On entry : 0/0
 10299 ;;		On exit  : 0/0
 10300 ;;		Unchanged: 0/0
 10301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10302 ;;      Params:         4       0       0       0       0       0       0
 10303 ;;      Locals:         2       0       0       0       0       0       0
 10304 ;;      Temps:          1       0       0       0       0       0       0
 10305 ;;      Totals:         7       0       0       0       0       0       0
 10306 ;;Total ram usage:        7 bytes
 10307 ;; Hardware stack levels used:    1
 10308 ;; Hardware stack levels required when called:    5
 10309 ;; This function calls:
 10310 ;;		_EUSART1_Write
 10311 ;; This function is called by:
 10312 ;;		_SendAckMessage
 10313 ;;		_FlashReadUart
 10314 ;;		_FlashReadCondition
 10315 ;;		_DacReadValue
 10316 ;;		_SynthReadData
 10317 ;;		_GetMcuFwVersion
 10318 ;;		_GetMcuRunTime
 10319 ;; This function uses a non-reentrant model
 10320 ;;
 10321                           
 10322                           	psect	text54
 10323  003D3A                     __ptext54:
 10324                           	opt stack 0
 10325  003D3A                     _WriteUartMessage:
 10326                           	opt stack 21
 10327                           
 10328                           ;EusartApp.c: 160: for(int idx = 0; idx < dataSize; idx++)
 10329                           
 10330                           ;incstack = 0
 10331  003D3A  0E00               	movlw	0
 10332  003D3C  6E1F               	movwf	WriteUartMessage@idx+1,c
 10333  003D3E  0E00               	movlw	0
 10334  003D40  6E1E               	movwf	WriteUartMessage@idx,c
 10335  003D42  D00B               	goto	l220
 10336  003D44                     
 10337                           ;EusartApp.c: 161: {
 10338                           ;EusartApp.c: 162: EUSART1_Write(dataBuf[idx]);
 10339  003D44  501E               	movf	WriteUartMessage@idx,w,c
 10340  003D46  2419               	addwf	WriteUartMessage@dataBuf,w,c
 10341  003D48  6ED9               	movwf	fsr2l,c
 10342  003D4A  501F               	movf	WriteUartMessage@idx+1,w,c
 10343  003D4C  201A               	addwfc	WriteUartMessage@dataBuf+1,w,c
 10344  003D4E  6EDA               	movwf	fsr2h,c
 10345  003D50  50DF               	movf	indf2,w,c
 10346  003D52  ECB8  F01D         	call	_EUSART1_Write
 10347  003D56  4A1E               	infsnz	WriteUartMessage@idx,f,c
 10348  003D58  2A1F               	incf	WriteUartMessage@idx+1,f,c
 10349  003D5A                     l220:
 10350  003D5A  501B               	movf	WriteUartMessage@dataSize,w,c
 10351  003D5C  5C1E               	subwf	WriteUartMessage@idx,w,c
 10352  003D5E  501F               	movf	WriteUartMessage@idx+1,w,c
 10353  003D60  0A80               	xorlw	128
 10354  003D62  6E1D               	movwf	??_WriteUartMessage& (0+255),c
 10355  003D64  501C               	movf	WriteUartMessage@dataSize+1,w,c
 10356  003D66  0A80               	xorlw	128
 10357  003D68  581D               	subwfb	??_WriteUartMessage& (0+255),w,c
 10358  003D6A  B0D8               	btfsc	status,0,c
 10359  003D6C  0012               	return	
 10360  003D6E  D7EA               	goto	l221
 10361  003D70                     __end_of_WriteUartMessage:
 10362                           	opt stack 0
 10363                           tosu	equ	0xFFF
 10364                           tosh	equ	0xFFE
 10365                           tosl	equ	0xFFD
 10366                           pclath	equ	0xFFA
 10367                           tblptru	equ	0xFF8
 10368                           tblptrh	equ	0xFF7
 10369                           tblptrl	equ	0xFF6
 10370                           tablat	equ	0xFF5
 10371                           prodh	equ	0xFF4
 10372                           prodl	equ	0xFF3
 10373                           intcon	equ	0xFF2
 10374                           intcon2	equ	0xFF1
 10375                           postinc0	equ	0xFEE
 10376                           plusw0	equ	0xFEB
 10377                           wreg	equ	0xFE8
 10378                           indf1	equ	0xFE7
 10379                           postdec1	equ	0xFE5
 10380                           fsr1h	equ	0xFE2
 10381                           fsr1l	equ	0xFE1
 10382                           indf2	equ	0xFDF
 10383                           postinc2	equ	0xFDE
 10384                           postdec2	equ	0xFDD
 10385                           plusw2	equ	0xFDB
 10386                           fsr2h	equ	0xFDA
 10387                           fsr2l	equ	0xFD9
 10388                           status	equ	0xFD8
 10389                           
 10390 ;; *************** function _EUSART1_Write *****************
 10391 ;; Defined at:
 10392 ;;		line 157 in file "mcc_generated_files/eusart1.c"
 10393 ;; Parameters:    Size  Location     Type
 10394 ;;  txData          1    wreg     unsigned char 
 10395 ;; Auto vars:     Size  Location     Type
 10396 ;;  txData          1   23[COMRAM] unsigned char 
 10397 ;; Return value:  Size  Location     Type
 10398 ;;                  1    wreg      void 
 10399 ;; Registers used:
 10400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10401 ;; Tracked objects:
 10402 ;;		On entry : 0/0
 10403 ;;		On exit  : 0/0
 10404 ;;		Unchanged: 0/0
 10405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10406 ;;      Params:         0       0       0       0       0       0       0
 10407 ;;      Locals:         1       0       0       0       0       0       0
 10408 ;;      Temps:          0       0       0       0       0       0       0
 10409 ;;      Totals:         1       0       0       0       0       0       0
 10410 ;;Total ram usage:        1 bytes
 10411 ;; Hardware stack levels used:    1
 10412 ;; Hardware stack levels required when called:    4
 10413 ;; This function calls:
 10414 ;;		Nothing
 10415 ;; This function is called by:
 10416 ;;		_WriteUartMessage
 10417 ;; This function uses a non-reentrant model
 10418 ;;
 10419                           
 10420                           	psect	text55
 10421  003B70                     __ptext55:
 10422                           	opt stack 0
 10423  003B70                     _EUSART1_Write:
 10424                           	opt stack 21
 10425                           
 10426                           ;incstack = 0
 10427                           ;EUSART1_Write@txData stored from wreg
 10428  003B70  6E18               	movwf	EUSART1_Write@txData,c
 10429  003B72                     
 10430                           ;eusart1.c: 160: {
 10431                           
 10432                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
 10433  003B72  0100               	movlb	0	; () banked
 10434  003B74  51FF               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 10435  003B76  B4D8               	btfsc	status,2,c
 10436  003B78  D7FC               	goto	l7451
 10437                           
 10438                           ; BSR set to: 0
 10439                           ;eusart1.c: 161: }
 10440                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
 10441  003B7A  B89D               	btfsc	3997,4,c	;volatile
 10442  003B7C  D003               	goto	l879
 10443                           
 10444                           ; BSR set to: 0
 10445                           ;eusart1.c: 164: {
 10446                           ;eusart1.c: 165: TXREG1 = txData;
 10447  003B7E  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 10448                           
 10449                           ;eusart1.c: 166: }
 10450  003B82  D012               	goto	l880
 10451  003B84                     l879:
 10452                           
 10453                           ; BSR set to: 0
 10454                           ;eusart1.c: 167: else
 10455                           ;eusart1.c: 168: {
 10456                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
 10457  003B84  989D               	bcf	3997,4,c	;volatile
 10458                           
 10459                           ; BSR set to: 0
 10460                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
 10461  003B86  503A               	movf	_eusart1TxHead,w,c	;volatile
 10462  003B88  0D01               	mullw	1
 10463  003B8A  0E00               	movlw	low _eusart1TxBuffer
 10464  003B8C  24F3               	addwf	prodl,w,c
 10465  003B8E  6ED9               	movwf	fsr2l,c
 10466  003B90  0E01               	movlw	high _eusart1TxBuffer
 10467  003B92  20F4               	addwfc	prodh,w,c
 10468  003B94  6EDA               	movwf	fsr2h,c
 10469  003B96  C018  FFDF         	movff	EUSART1_Write@txData,indf2
 10470                           
 10471                           ; BSR set to: 0
 10472  003B9A  2A3A               	incf	_eusart1TxHead,f,c	;volatile
 10473                           
 10474                           ; BSR set to: 0
 10475                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 10476  003B9C  0E45               	movlw	69
 10477  003B9E  643A               	cpfsgt	_eusart1TxHead,c	;volatile
 10478  003BA0  D002               	goto	l881
 10479                           
 10480                           ; BSR set to: 0
 10481                           ;eusart1.c: 172: {
 10482                           ;eusart1.c: 173: eusart1TxHead = 0;
 10483  003BA2  0E00               	movlw	0
 10484  003BA4  6E3A               	movwf	_eusart1TxHead,c	;volatile
 10485  003BA6                     l881:
 10486                           
 10487                           ; BSR set to: 0
 10488                           ;eusart1.c: 174: }
 10489                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
 10490                           
 10491                           ; BSR set to: 0
 10492  003BA6  07FF               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 10493  003BA8                     l880:
 10494                           
 10495                           ; BSR set to: 0
 10496                           ;eusart1.c: 176: }
 10497                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
 10498                           
 10499                           ; BSR set to: 0
 10500  003BA8  889D               	bsf	3997,4,c	;volatile
 10501                           
 10502                           ; BSR set to: 0
 10503  003BAA  0012               	return		;funcret
 10504  003BAC                     __end_of_EUSART1_Write:
 10505                           	opt stack 0
 10506                           tosu	equ	0xFFF
 10507                           tosh	equ	0xFFE
 10508                           tosl	equ	0xFFD
 10509                           pclath	equ	0xFFA
 10510                           tblptru	equ	0xFF8
 10511                           tblptrh	equ	0xFF7
 10512                           tblptrl	equ	0xFF6
 10513                           tablat	equ	0xFF5
 10514                           prodh	equ	0xFF4
 10515                           prodl	equ	0xFF3
 10516                           intcon	equ	0xFF2
 10517                           intcon2	equ	0xFF1
 10518                           postinc0	equ	0xFEE
 10519                           plusw0	equ	0xFEB
 10520                           wreg	equ	0xFE8
 10521                           indf1	equ	0xFE7
 10522                           postdec1	equ	0xFE5
 10523                           fsr1h	equ	0xFE2
 10524                           fsr1l	equ	0xFE1
 10525                           indf2	equ	0xFDF
 10526                           postinc2	equ	0xFDE
 10527                           postdec2	equ	0xFDD
 10528                           plusw2	equ	0xFDB
 10529                           fsr2h	equ	0xFDA
 10530                           fsr2l	equ	0xFD9
 10531                           status	equ	0xFD8
 10532                           
 10533 ;; *************** function _InitSystemApplicationManagers *****************
 10534 ;; Defined at:
 10535 ;;		line 33 in file "SystemSettings.c"
 10536 ;; Parameters:    Size  Location     Type
 10537 ;;		None
 10538 ;; Auto vars:     Size  Location     Type
 10539 ;;		None
 10540 ;; Return value:  Size  Location     Type
 10541 ;;                  1    wreg      void 
 10542 ;; Registers used:
 10543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10544 ;; Tracked objects:
 10545 ;;		On entry : 0/0
 10546 ;;		On exit  : 0/0
 10547 ;;		Unchanged: 0/0
 10548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10549 ;;      Params:         0       0       0       0       0       0       0
 10550 ;;      Locals:         0       0       0       0       0       0       0
 10551 ;;      Temps:          0       0       0       0       0       0       0
 10552 ;;      Totals:         0       0       0       0       0       0       0
 10553 ;;Total ram usage:        0 bytes
 10554 ;; Hardware stack levels used:    1
 10555 ;; Hardware stack levels required when called:   12
 10556 ;; This function calls:
 10557 ;;		_ClearMcuRunTime
 10558 ;;		_DacInit
 10559 ;;		_InitAdcApplicationMgr
 10560 ;;		_PLLInitialize
 10561 ;;		_TMR0_StartTimer
 10562 ;; This function is called by:
 10563 ;;		_main
 10564 ;; This function uses a non-reentrant model
 10565 ;;
 10566                           
 10567                           	psect	text56
 10568  0041CA                     __ptext56:
 10569                           	opt stack 0
 10570  0041CA                     _InitSystemApplicationManagers:
 10571                           	opt stack 18
 10572                           
 10573                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
 10574                           
 10575                           ; BSR set to: 0
 10576                           ;incstack = 0
 10577  0041CA  EC70  F021         	call	_InitAdcApplicationMgr	;wreg free
 10578                           
 10579                           ;SystemSettings.c: 39: TMR0_StartTimer();
 10580  0041CE  EC78  F021         	call	_TMR0_StartTimer	;wreg free
 10581                           
 10582                           ;SystemSettings.c: 42: PLLInitialize();
 10583  0041D2  EC2D  F021         	call	_PLLInitialize	;wreg free
 10584                           
 10585                           ;SystemSettings.c: 45: ClearMcuRunTime();
 10586  0041D6  EC04  F021         	call	_ClearMcuRunTime	;wreg free
 10587                           
 10588                           ;SystemSettings.c: 48: DacInit();
 10589  0041DA  EC67  F014         	call	_DacInit	;wreg free
 10590  0041DE  0012               	return		;funcret
 10591  0041E0                     __end_of_InitSystemApplicationManagers:
 10592                           	opt stack 0
 10593                           tosu	equ	0xFFF
 10594                           tosh	equ	0xFFE
 10595                           tosl	equ	0xFFD
 10596                           pclath	equ	0xFFA
 10597                           tblptru	equ	0xFF8
 10598                           tblptrh	equ	0xFF7
 10599                           tblptrl	equ	0xFF6
 10600                           tablat	equ	0xFF5
 10601                           prodh	equ	0xFF4
 10602                           prodl	equ	0xFF3
 10603                           intcon	equ	0xFF2
 10604                           intcon2	equ	0xFF1
 10605                           postinc0	equ	0xFEE
 10606                           plusw0	equ	0xFEB
 10607                           wreg	equ	0xFE8
 10608                           indf1	equ	0xFE7
 10609                           postdec1	equ	0xFE5
 10610                           fsr1h	equ	0xFE2
 10611                           fsr1l	equ	0xFE1
 10612                           indf2	equ	0xFDF
 10613                           postinc2	equ	0xFDE
 10614                           postdec2	equ	0xFDD
 10615                           plusw2	equ	0xFDB
 10616                           fsr2h	equ	0xFDA
 10617                           fsr2l	equ	0xFD9
 10618                           status	equ	0xFD8
 10619                           
 10620 ;; *************** function _TMR0_StartTimer *****************
 10621 ;; Defined at:
 10622 ;;		line 93 in file "mcc_generated_files/tmr0.c"
 10623 ;; Parameters:    Size  Location     Type
 10624 ;;		None
 10625 ;; Auto vars:     Size  Location     Type
 10626 ;;		None
 10627 ;; Return value:  Size  Location     Type
 10628 ;;                  1    wreg      void 
 10629 ;; Registers used:
 10630 ;;		None
 10631 ;; Tracked objects:
 10632 ;;		On entry : 0/0
 10633 ;;		On exit  : 0/0
 10634 ;;		Unchanged: 0/0
 10635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10636 ;;      Params:         0       0       0       0       0       0       0
 10637 ;;      Locals:         0       0       0       0       0       0       0
 10638 ;;      Temps:          0       0       0       0       0       0       0
 10639 ;;      Totals:         0       0       0       0       0       0       0
 10640 ;;Total ram usage:        0 bytes
 10641 ;; Hardware stack levels used:    1
 10642 ;; Hardware stack levels required when called:    4
 10643 ;; This function calls:
 10644 ;;		Nothing
 10645 ;; This function is called by:
 10646 ;;		_InitSystemApplicationManagers
 10647 ;; This function uses a non-reentrant model
 10648 ;;
 10649                           
 10650                           	psect	text57
 10651  0042F0                     __ptext57:
 10652                           	opt stack 0
 10653  0042F0                     _TMR0_StartTimer:
 10654                           	opt stack 25
 10655                           
 10656                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
 10657                           
 10658                           ;incstack = 0
 10659  0042F0  8ED5               	bsf	4053,7,c	;volatile
 10660  0042F2  0012               	return		;funcret
 10661  0042F4                     __end_of_TMR0_StartTimer:
 10662                           	opt stack 0
 10663                           tosu	equ	0xFFF
 10664                           tosh	equ	0xFFE
 10665                           tosl	equ	0xFFD
 10666                           pclath	equ	0xFFA
 10667                           tblptru	equ	0xFF8
 10668                           tblptrh	equ	0xFF7
 10669                           tblptrl	equ	0xFF6
 10670                           tablat	equ	0xFF5
 10671                           prodh	equ	0xFF4
 10672                           prodl	equ	0xFF3
 10673                           intcon	equ	0xFF2
 10674                           intcon2	equ	0xFF1
 10675                           postinc0	equ	0xFEE
 10676                           plusw0	equ	0xFEB
 10677                           wreg	equ	0xFE8
 10678                           indf1	equ	0xFE7
 10679                           postdec1	equ	0xFE5
 10680                           fsr1h	equ	0xFE2
 10681                           fsr1l	equ	0xFE1
 10682                           indf2	equ	0xFDF
 10683                           postinc2	equ	0xFDE
 10684                           postdec2	equ	0xFDD
 10685                           plusw2	equ	0xFDB
 10686                           fsr2h	equ	0xFDA
 10687                           fsr2l	equ	0xFD9
 10688                           status	equ	0xFD8
 10689                           
 10690 ;; *************** function _PLLInitialize *****************
 10691 ;; Defined at:
 10692 ;;		line 25 in file "SyntApp.c"
 10693 ;; Parameters:    Size  Location     Type
 10694 ;;		None
 10695 ;; Auto vars:     Size  Location     Type
 10696 ;;		None
 10697 ;; Return value:  Size  Location     Type
 10698 ;;                  1    wreg      void 
 10699 ;; Registers used:
 10700 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10701 ;; Tracked objects:
 10702 ;;		On entry : 0/0
 10703 ;;		On exit  : 0/0
 10704 ;;		Unchanged: 0/0
 10705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10706 ;;      Params:         0       0       0       0       0       0       0
 10707 ;;      Locals:         0       0       0       0       0       0       0
 10708 ;;      Temps:          0       0       0       0       0       0       0
 10709 ;;      Totals:         0       0       0       0       0       0       0
 10710 ;;Total ram usage:        0 bytes
 10711 ;; Hardware stack levels used:    1
 10712 ;; Hardware stack levels required when called:   11
 10713 ;; This function calls:
 10714 ;;		_InitSynth
 10715 ;; This function is called by:
 10716 ;;		_InitSystemApplicationManagers
 10717 ;; This function uses a non-reentrant model
 10718 ;;
 10719                           
 10720                           	psect	text58
 10721  00425A                     __ptext58:
 10722                           	opt stack 0
 10723  00425A                     _PLLInitialize:
 10724                           	opt stack 18
 10725                           
 10726                           ;SyntApp.c: 27: InitSynth(SYNTH_TX);
 10727                           
 10728                           ;incstack = 0
 10729  00425A  0E00               	movlw	0
 10730  00425C  EC36  F007         	call	_InitSynth
 10731                           
 10732                           ;SyntApp.c: 28: InitSynth(SYNTH_RX);
 10733  004260  0E01               	movlw	1
 10734  004262  EC36  F007         	call	_InitSynth
 10735  004266  0012               	return		;funcret
 10736  004268                     __end_of_PLLInitialize:
 10737                           	opt stack 0
 10738                           tosu	equ	0xFFF
 10739                           tosh	equ	0xFFE
 10740                           tosl	equ	0xFFD
 10741                           pclath	equ	0xFFA
 10742                           tblptru	equ	0xFF8
 10743                           tblptrh	equ	0xFF7
 10744                           tblptrl	equ	0xFF6
 10745                           tablat	equ	0xFF5
 10746                           prodh	equ	0xFF4
 10747                           prodl	equ	0xFF3
 10748                           intcon	equ	0xFF2
 10749                           intcon2	equ	0xFF1
 10750                           postinc0	equ	0xFEE
 10751                           plusw0	equ	0xFEB
 10752                           wreg	equ	0xFE8
 10753                           indf1	equ	0xFE7
 10754                           postdec1	equ	0xFE5
 10755                           fsr1h	equ	0xFE2
 10756                           fsr1l	equ	0xFE1
 10757                           indf2	equ	0xFDF
 10758                           postinc2	equ	0xFDE
 10759                           postdec2	equ	0xFDD
 10760                           plusw2	equ	0xFDB
 10761                           fsr2h	equ	0xFDA
 10762                           fsr2l	equ	0xFD9
 10763                           status	equ	0xFD8
 10764                           
 10765 ;; *************** function _InitSynth *****************
 10766 ;; Defined at:
 10767 ;;		line 31 in file "SyntApp.c"
 10768 ;; Parameters:    Size  Location     Type
 10769 ;;  cType           1    wreg     enum E1
 10770 ;; Auto vars:     Size  Location     Type
 10771 ;;  cType           1  108[BANK0 ] enum E1
 10772 ;;  idx             1  109[BANK0 ] unsigned char 
 10773 ;;  EepromVal       4  104[BANK0 ] unsigned long 
 10774 ;;  regNum          1  110[BANK0 ] unsigned char 
 10775 ;; Return value:  Size  Location     Type
 10776 ;;                  1    wreg      void 
 10777 ;; Registers used:
 10778 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10779 ;; Tracked objects:
 10780 ;;		On entry : 0/0
 10781 ;;		On exit  : 0/0
 10782 ;;		Unchanged: 0/0
 10783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10784 ;;      Params:         0       0       0       0       0       0       0
 10785 ;;      Locals:         0       7       0       0       0       0       0
 10786 ;;      Temps:          0       0       0       0       0       0       0
 10787 ;;      Totals:         0       7       0       0       0       0       0
 10788 ;;Total ram usage:        7 bytes
 10789 ;; Hardware stack levels used:    1
 10790 ;; Hardware stack levels required when called:   10
 10791 ;; This function calls:
 10792 ;;		_ReadIntFromEeprom
 10793 ;;		_SWSPI_send_word
 10794 ;;		_StoreIntInEeprom
 10795 ;;		_SwSpi_Set_CE_Pin
 10796 ;; This function is called by:
 10797 ;;		_PLLInitialize
 10798 ;;		_SetSynthOper
 10799 ;;		_SynthLdDetect
 10800 ;; This function uses a non-reentrant model
 10801 ;;
 10802                           
 10803                           	psect	text59
 10804  000E6C                     __ptext59:
 10805                           	opt stack 0
 10806  000E6C                     _InitSynth:
 10807                           	opt stack 17
 10808                           
 10809                           ;incstack = 0
 10810                           ;InitSynth@cType stored from wreg
 10811  000E6C  0100               	movlb	0	; () banked
 10812  000E6E  6FCC               	movwf	InitSynth@cType& (0+255),b
 10813                           
 10814                           ;SyntApp.c: 33: SwSpi_Set_CE_Pin(cType, 1);
 10815  000E70  0E01               	movlw	1
 10816  000E72  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
 10817  000E74  0100               	movlb	0	; () banked
 10818  000E76  51CC               	movf	InitSynth@cType& (0+255),w,b
 10819  000E78  ECD6  F01D         	call	_SwSpi_Set_CE_Pin
 10820                           
 10821                           ;SyntApp.c: 35: uint8_t regNum = 0;
 10822  000E7C  0E00               	movlw	0
 10823  000E7E  0100               	movlb	0	; () banked
 10824  000E80  6FCE               	movwf	InitSynth@regNum& (0+255),b
 10825                           
 10826                           ; BSR set to: 0
 10827                           ;SyntApp.c: 36: uint32_t EepromVal = 0x0;
 10828  000E82  0E00               	movlw	0
 10829  000E84  6FC8               	movwf	InitSynth@EepromVal& (0+255),b
 10830  000E86  0E00               	movlw	0
 10831  000E88  6FC9               	movwf	(InitSynth@EepromVal+1)& (0+255),b
 10832  000E8A  0E00               	movlw	0
 10833  000E8C  6FCA               	movwf	(InitSynth@EepromVal+2)& (0+255),b
 10834  000E8E  0E00               	movlw	0
 10835  000E90  6FCB               	movwf	(InitSynth@EepromVal+3)& (0+255),b
 10836                           
 10837                           ; BSR set to: 0
 10838                           ;SyntApp.c: 39: for(uint8_t idx = 0; idx < 13; idx++)
 10839  000E92  0E00               	movlw	0
 10840  000E94  6FCD               	movwf	InitSynth@idx& (0+255),b
 10841  000E96                     l7879:
 10842                           
 10843                           ; BSR set to: 0
 10844  000E96  0E0C               	movlw	12
 10845  000E98  65CD               	cpfsgt	InitSynth@idx& (0+255),b
 10846  000E9A  D001               	goto	l489
 10847  000E9C  0012               	return	
 10848  000E9E                     l489:
 10849                           
 10850                           ; BSR set to: 0
 10851                           ;SyntApp.c: 40: {
 10852                           ;SyntApp.c: 41: regNum = 13 - idx - 1;
 10853                           
 10854                           ; BSR set to: 0
 10855  000E9E  29CD               	incf	InitSynth@idx& (0+255),w,b
 10856  000EA0  0800               	sublw	0
 10857  000EA2  0F0D               	addlw	13
 10858  000EA4  6FCE               	movwf	InitSynth@regNum& (0+255),b
 10859                           
 10860                           ; BSR set to: 0
 10861                           ;SyntApp.c: 42: if(regNum == 0x0 || regNum == 0x1 || regNum == 0x2 || regNum == 0x4 || r
      +                          egNum == 0x6 || regNum == 0xA)
 10862  000EA6  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10863  000EA8  B4D8               	btfsc	status,2,c
 10864  000EAA  D013               	goto	u8210
 10865                           
 10866                           ; BSR set to: 0
 10867  000EAC  05CE               	decf	InitSynth@regNum& (0+255),w,b
 10868  000EAE  B4D8               	btfsc	status,2,c
 10869  000EB0  D010               	goto	u8210
 10870                           
 10871                           ; BSR set to: 0
 10872  000EB2  0E02               	movlw	2
 10873  000EB4  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10874  000EB6  B4D8               	btfsc	status,2,c
 10875  000EB8  D00C               	goto	u8210
 10876                           
 10877                           ; BSR set to: 0
 10878  000EBA  0E04               	movlw	4
 10879  000EBC  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10880  000EBE  B4D8               	btfsc	status,2,c
 10881  000EC0  D008               	goto	u8210
 10882                           
 10883                           ; BSR set to: 0
 10884  000EC2  0E06               	movlw	6
 10885  000EC4  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10886  000EC6  B4D8               	btfsc	status,2,c
 10887  000EC8  D004               	goto	u8210
 10888                           
 10889                           ; BSR set to: 0
 10890  000ECA  0E0A               	movlw	10
 10891  000ECC  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10892  000ECE  A4D8               	btfss	status,2,c
 10893  000ED0  D0EB               	goto	l491
 10894  000ED2                     u8210:
 10895                           
 10896                           ; BSR set to: 0
 10897                           ;SyntApp.c: 43: {
 10898                           ;SyntApp.c: 44: if(cType == SYNTH_TX)
 10899                           
 10900                           ; BSR set to: 0
 10901  000ED2  51CC               	movf	InitSynth@cType& (0+255),w,b
 10902  000ED4  A4D8               	btfss	status,2,c
 10903  000ED6  D071               	goto	l494
 10904                           
 10905                           ; BSR set to: 0
 10906                           ;SyntApp.c: 45: {
 10907                           ;SyntApp.c: 46: EepromVal = ReadIntFromEeprom((0) | SYNTH_ADDRES[regNum], 4);
 10908  000ED8  0E00               	movlw	0
 10909  000EDA  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 10910  000EDC  0E04               	movlw	4
 10911  000EDE  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 10912  000EE0  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10913  000EE2  0D01               	mullw	1
 10914  000EE4  0E35               	movlw	low _SYNTH_ADDRES
 10915  000EE6  24F3               	addwf	prodl,w,c
 10916  000EE8  6EF6               	movwf	tblptrl,c
 10917  000EEA  0E06               	movlw	high _SYNTH_ADDRES
 10918  000EEC  20F4               	addwfc	prodh,w,c
 10919  000EEE  6EF7               	movwf	tblptrh,c
 10920  000EF0                     	if	0	;There are less than 3 active tblptr bytes
 10921  000EF0                     	endif
 10922  000EF0  0008               	tblrd		*
 10923  000EF2  50F5               	movf	tablat,w,c
 10924  000EF4  EC05  F010         	call	_ReadIntFromEeprom
 10925  000EF8  C0B1  F0C8         	movff	?_ReadIntFromEeprom,InitSynth@EepromVal
 10926  000EFC  C0B2  F0C9         	movff	?_ReadIntFromEeprom+1,InitSynth@EepromVal+1
 10927  000F00  C0B3  F0CA         	movff	?_ReadIntFromEeprom+2,InitSynth@EepromVal+2
 10928  000F04  C0B4  F0CB         	movff	?_ReadIntFromEeprom+3,InitSynth@EepromVal+3
 10929                           
 10930                           ;SyntApp.c: 47: if(EepromVal == 0xFFFFFFFF)
 10931  000F08  0100               	movlb	0	; () banked
 10932  000F0A  29C8               	incf	InitSynth@EepromVal& (0+255),w,b
 10933  000F0C  E147               	bnz	l7907
 10934  000F0E  29C9               	incf	(InitSynth@EepromVal+1)& (0+255),w,b
 10935  000F10  E145               	bnz	l7907
 10936  000F12  29CA               	incf	(InitSynth@EepromVal+2)& (0+255),w,b
 10937  000F14  E143               	bnz	l7907
 10938  000F16  29CB               	incf	(InitSynth@EepromVal+3)& (0+255),w,b
 10939  000F18  A4D8               	btfss	status,2,c
 10940  000F1A  D040               	goto	l495
 10941                           
 10942                           ; BSR set to: 0
 10943                           ;SyntApp.c: 48: {
 10944                           ;SyntApp.c: 49: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 10945  000F1C  51CD               	movf	InitSynth@idx& (0+255),w,b
 10946  000F1E  0D04               	mullw	4
 10947  000F20  0E01               	movlw	low _SYNTH_REGS
 10948  000F22  24F3               	addwf	prodl,w,c
 10949  000F24  6EF6               	movwf	tblptrl,c
 10950  000F26  0E06               	movlw	high _SYNTH_REGS
 10951  000F28  20F4               	addwfc	prodh,w,c
 10952  000F2A  6EF7               	movwf	tblptrh,c
 10953  000F2C                     	if	0	;There are less than 3 active tblptr bytes
 10954  000F2C                     	endif
 10955  000F2C  0009               	tblrd		*+
 10956  000F2E  CFF5 F026          	movff	tablat,SWSPI_send_word@data
 10957  000F32  0009               	tblrd		*+
 10958  000F34  CFF5 F027          	movff	tablat,SWSPI_send_word@data+1
 10959  000F38  0009               	tblrd		*+
 10960  000F3A  CFF5 F028          	movff	tablat,SWSPI_send_word@data+2
 10961  000F3E  000A               	tblrd		*-
 10962  000F40  CFF5 F029          	movff	tablat,SWSPI_send_word@data+3
 10963  000F44  0E03               	movlw	3
 10964  000F46  6E2A               	movwf	SWSPI_send_word@dataSize,c
 10965  000F48  51CC               	movf	InitSynth@cType& (0+255),w,b
 10966  000F4A  EC2A  F018         	call	_SWSPI_send_word
 10967                           
 10968                           ;SyntApp.c: 50: StoreIntInEeprom(SYNTH_REGS[idx], (0) | SYNTH_ADDRES[regNum], 4);
 10969  000F4E  0100               	movlb	0	; () banked
 10970  000F50  51CD               	movf	InitSynth@idx& (0+255),w,b
 10971  000F52  0D04               	mullw	4
 10972  000F54  0E01               	movlw	low _SYNTH_REGS
 10973  000F56  24F3               	addwf	prodl,w,c
 10974  000F58  6EF6               	movwf	tblptrl,c
 10975  000F5A  0E06               	movlw	high _SYNTH_REGS
 10976  000F5C  20F4               	addwfc	prodh,w,c
 10977  000F5E  6EF7               	movwf	tblptrh,c
 10978  000F60                     	if	0	;There are less than 3 active tblptr bytes
 10979  000F60                     	endif
 10980  000F60  0009               	tblrd		*+
 10981  000F62  CFF5 F021          	movff	tablat,StoreIntInEeprom@data
 10982  000F66  0009               	tblrd		*+
 10983  000F68  CFF5 F022          	movff	tablat,StoreIntInEeprom@data+1
 10984  000F6C  0009               	tblrd		*+
 10985  000F6E  CFF5 F023          	movff	tablat,StoreIntInEeprom@data+2
 10986  000F72  000A               	tblrd		*-
 10987  000F74  CFF5 F024          	movff	tablat,StoreIntInEeprom@data+3
 10988  000F78  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10989  000F7A  0D01               	mullw	1
 10990  000F7C  0E35               	movlw	low _SYNTH_ADDRES
 10991  000F7E  24F3               	addwf	prodl,w,c
 10992  000F80  6EF6               	movwf	tblptrl,c
 10993  000F82  0E06               	movlw	high _SYNTH_ADDRES
 10994  000F84  20F4               	addwfc	prodh,w,c
 10995  000F86  6EF7               	movwf	tblptrh,c
 10996  000F88                     	if	0	;There are less than 3 active tblptr bytes
 10997  000F88                     	endif
 10998  000F88  0008               	tblrd		*
 10999  000F8A  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
 11000  000F8E  0E00               	movlw	0
 11001  000F90  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 11002  000F92  0E04               	movlw	4
 11003  000F94  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 11004  000F96  EC2E  F01E         	call	_StoreIntInEeprom	;wreg free
 11005                           
 11006                           ;SyntApp.c: 51: }
 11007  000F9A  D0A0               	goto	l501
 11008  000F9C                     l495:
 11009  000F9C                     l7907:
 11010                           
 11011                           ;SyntApp.c: 52: else
 11012                           ;SyntApp.c: 53: {
 11013                           ;SyntApp.c: 54: SWSPI_send_word(cType, EepromVal,3);
 11014  000F9C  C0C8  F026         	movff	InitSynth@EepromVal,SWSPI_send_word@data
 11015  000FA0  C0C9  F027         	movff	InitSynth@EepromVal+1,SWSPI_send_word@data+1
 11016  000FA4  C0CA  F028         	movff	InitSynth@EepromVal+2,SWSPI_send_word@data+2
 11017  000FA8  C0CB  F029         	movff	InitSynth@EepromVal+3,SWSPI_send_word@data+3
 11018  000FAC  0E03               	movlw	3
 11019  000FAE  6E2A               	movwf	SWSPI_send_word@dataSize,c
 11020  000FB0  0100               	movlb	0	; () banked
 11021  000FB2  51CC               	movf	InitSynth@cType& (0+255),w,b
 11022  000FB4  EC2A  F018         	call	_SWSPI_send_word
 11023                           
 11024                           ;SyntApp.c: 55: }
 11025                           ;SyntApp.c: 56: }
 11026  000FB8  D091               	goto	l501
 11027  000FBA                     l494:
 11028                           
 11029                           ;SyntApp.c: 57: else if (cType == SYNTH_RX)
 11030  000FBA  0100               	movlb	0	; () banked
 11031  000FBC  05CC               	decf	InitSynth@cType& (0+255),w,b
 11032  000FBE  A4D8               	btfss	status,2,c
 11033  000FC0  D08D               	goto	l501
 11034                           
 11035                           ; BSR set to: 0
 11036                           ;SyntApp.c: 58: {
 11037                           ;SyntApp.c: 59: EepromVal = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[regNum], 4);
 11038  000FC2  0E00               	movlw	0
 11039  000FC4  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 11040  000FC6  0E04               	movlw	4
 11041  000FC8  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 11042  000FCA  51CE               	movf	InitSynth@regNum& (0+255),w,b
 11043  000FCC  0D01               	mullw	1
 11044  000FCE  0E35               	movlw	low _SYNTH_ADDRES
 11045  000FD0  24F3               	addwf	prodl,w,c
 11046  000FD2  6EF6               	movwf	tblptrl,c
 11047  000FD4  0E06               	movlw	high _SYNTH_ADDRES
 11048  000FD6  20F4               	addwfc	prodh,w,c
 11049  000FD8  6EF7               	movwf	tblptrh,c
 11050  000FDA                     	if	0	;There are less than 3 active tblptr bytes
 11051  000FDA                     	endif
 11052  000FDA  0008               	tblrd		*
 11053  000FDC  50F5               	movf	tablat,w,c
 11054  000FDE  0920               	iorlw	32
 11055  000FE0  EC05  F010         	call	_ReadIntFromEeprom
 11056  000FE4  C0B1  F0C8         	movff	?_ReadIntFromEeprom,InitSynth@EepromVal
 11057  000FE8  C0B2  F0C9         	movff	?_ReadIntFromEeprom+1,InitSynth@EepromVal+1
 11058  000FEC  C0B3  F0CA         	movff	?_ReadIntFromEeprom+2,InitSynth@EepromVal+2
 11059  000FF0  C0B4  F0CB         	movff	?_ReadIntFromEeprom+3,InitSynth@EepromVal+3
 11060                           
 11061                           ;SyntApp.c: 60: if(EepromVal == 0xFFFFFFFF)
 11062  000FF4  0100               	movlb	0	; () banked
 11063  000FF6  29C8               	incf	InitSynth@EepromVal& (0+255),w,b
 11064  000FF8  E148               	bnz	l7919
 11065  000FFA  29C9               	incf	(InitSynth@EepromVal+1)& (0+255),w,b
 11066  000FFC  E146               	bnz	l7919
 11067  000FFE  29CA               	incf	(InitSynth@EepromVal+2)& (0+255),w,b
 11068  001000  E144               	bnz	l7919
 11069  001002  29CB               	incf	(InitSynth@EepromVal+3)& (0+255),w,b
 11070  001004  A4D8               	btfss	status,2,c
 11071  001006  D041               	goto	l499
 11072                           
 11073                           ; BSR set to: 0
 11074                           ;SyntApp.c: 61: {
 11075                           ;SyntApp.c: 62: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 11076  001008  51CD               	movf	InitSynth@idx& (0+255),w,b
 11077  00100A  0D04               	mullw	4
 11078  00100C  0E01               	movlw	low _SYNTH_REGS
 11079  00100E  24F3               	addwf	prodl,w,c
 11080  001010  6EF6               	movwf	tblptrl,c
 11081  001012  0E06               	movlw	high _SYNTH_REGS
 11082  001014  20F4               	addwfc	prodh,w,c
 11083  001016  6EF7               	movwf	tblptrh,c
 11084  001018                     	if	0	;There are less than 3 active tblptr bytes
 11085  001018                     	endif
 11086  001018  0009               	tblrd		*+
 11087  00101A  CFF5 F026          	movff	tablat,SWSPI_send_word@data
 11088  00101E  0009               	tblrd		*+
 11089  001020  CFF5 F027          	movff	tablat,SWSPI_send_word@data+1
 11090  001024  0009               	tblrd		*+
 11091  001026  CFF5 F028          	movff	tablat,SWSPI_send_word@data+2
 11092  00102A  000A               	tblrd		*-
 11093  00102C  CFF5 F029          	movff	tablat,SWSPI_send_word@data+3
 11094  001030  0E03               	movlw	3
 11095  001032  6E2A               	movwf	SWSPI_send_word@dataSize,c
 11096  001034  51CC               	movf	InitSynth@cType& (0+255),w,b
 11097  001036  EC2A  F018         	call	_SWSPI_send_word
 11098                           
 11099                           ;SyntApp.c: 63: StoreIntInEeprom(SYNTH_REGS[idx], (0x20) | SYNTH_ADDRES[regNum], 4);
 11100  00103A  0100               	movlb	0	; () banked
 11101  00103C  51CD               	movf	InitSynth@idx& (0+255),w,b
 11102  00103E  0D04               	mullw	4
 11103  001040  0E01               	movlw	low _SYNTH_REGS
 11104  001042  24F3               	addwf	prodl,w,c
 11105  001044  6EF6               	movwf	tblptrl,c
 11106  001046  0E06               	movlw	high _SYNTH_REGS
 11107  001048  20F4               	addwfc	prodh,w,c
 11108  00104A  6EF7               	movwf	tblptrh,c
 11109  00104C                     	if	0	;There are less than 3 active tblptr bytes
 11110  00104C                     	endif
 11111  00104C  0009               	tblrd		*+
 11112  00104E  CFF5 F021          	movff	tablat,StoreIntInEeprom@data
 11113  001052  0009               	tblrd		*+
 11114  001054  CFF5 F022          	movff	tablat,StoreIntInEeprom@data+1
 11115  001058  0009               	tblrd		*+
 11116  00105A  CFF5 F023          	movff	tablat,StoreIntInEeprom@data+2
 11117  00105E  000A               	tblrd		*-
 11118  001060  CFF5 F024          	movff	tablat,StoreIntInEeprom@data+3
 11119  001064  51CE               	movf	InitSynth@regNum& (0+255),w,b
 11120  001066  0D01               	mullw	1
 11121  001068  0E35               	movlw	low _SYNTH_ADDRES
 11122  00106A  24F3               	addwf	prodl,w,c
 11123  00106C  6EF6               	movwf	tblptrl,c
 11124  00106E  0E06               	movlw	high _SYNTH_ADDRES
 11125  001070  20F4               	addwfc	prodh,w,c
 11126  001072  6EF7               	movwf	tblptrh,c
 11127  001074                     	if	0	;There are less than 3 active tblptr bytes
 11128  001074                     	endif
 11129  001074  0008               	tblrd		*
 11130  001076  50F5               	movf	tablat,w,c
 11131  001078  0920               	iorlw	32
 11132  00107A  6E25               	movwf	StoreIntInEeprom@address,c
 11133  00107C  0E00               	movlw	0
 11134  00107E  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 11135  001080  0E04               	movlw	4
 11136  001082  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 11137  001084  EC2E  F01E         	call	_StoreIntInEeprom	;wreg free
 11138                           
 11139                           ;SyntApp.c: 64: }
 11140  001088  D029               	goto	l501
 11141  00108A                     l499:
 11142  00108A                     l7919:
 11143                           
 11144                           ;SyntApp.c: 65: else
 11145                           ;SyntApp.c: 66: {
 11146                           ;SyntApp.c: 67: SWSPI_send_word(cType, EepromVal,3);
 11147  00108A  C0C8  F026         	movff	InitSynth@EepromVal,SWSPI_send_word@data
 11148  00108E  C0C9  F027         	movff	InitSynth@EepromVal+1,SWSPI_send_word@data+1
 11149  001092  C0CA  F028         	movff	InitSynth@EepromVal+2,SWSPI_send_word@data+2
 11150  001096  C0CB  F029         	movff	InitSynth@EepromVal+3,SWSPI_send_word@data+3
 11151  00109A  0E03               	movlw	3
 11152  00109C  6E2A               	movwf	SWSPI_send_word@dataSize,c
 11153  00109E  0100               	movlb	0	; () banked
 11154  0010A0  51CC               	movf	InitSynth@cType& (0+255),w,b
 11155  0010A2  EC2A  F018         	call	_SWSPI_send_word
 11156                           
 11157                           ;SyntApp.c: 68: }
 11158                           ;SyntApp.c: 69: }
 11159                           ;SyntApp.c: 72: }
 11160  0010A6  D01A               	goto	l501
 11161  0010A8                     l491:
 11162                           
 11163                           ;SyntApp.c: 73: else
 11164                           ;SyntApp.c: 74: {
 11165                           ;SyntApp.c: 75: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 11166  0010A8  0100               	movlb	0	; () banked
 11167  0010AA  51CD               	movf	InitSynth@idx& (0+255),w,b
 11168  0010AC  0D04               	mullw	4
 11169  0010AE  0E01               	movlw	low _SYNTH_REGS
 11170  0010B0  24F3               	addwf	prodl,w,c
 11171  0010B2  6EF6               	movwf	tblptrl,c
 11172  0010B4  0E06               	movlw	high _SYNTH_REGS
 11173  0010B6  20F4               	addwfc	prodh,w,c
 11174  0010B8  6EF7               	movwf	tblptrh,c
 11175  0010BA                     	if	0	;There are less than 3 active tblptr bytes
 11176  0010BA                     	endif
 11177  0010BA  0009               	tblrd		*+
 11178  0010BC  CFF5 F026          	movff	tablat,SWSPI_send_word@data
 11179  0010C0  0009               	tblrd		*+
 11180  0010C2  CFF5 F027          	movff	tablat,SWSPI_send_word@data+1
 11181  0010C6  0009               	tblrd		*+
 11182  0010C8  CFF5 F028          	movff	tablat,SWSPI_send_word@data+2
 11183  0010CC  000A               	tblrd		*-
 11184  0010CE  CFF5 F029          	movff	tablat,SWSPI_send_word@data+3
 11185  0010D2  0E03               	movlw	3
 11186  0010D4  6E2A               	movwf	SWSPI_send_word@dataSize,c
 11187  0010D6  51CC               	movf	InitSynth@cType& (0+255),w,b
 11188  0010D8  EC2A  F018         	call	_SWSPI_send_word
 11189  0010DC                     l501:
 11190  0010DC  0100               	movlb	0	; () banked
 11191  0010DE  2BCD               	incf	InitSynth@idx& (0+255),f,b
 11192  0010E0  D6DA               	goto	l7879
 11193  0010E2                     __end_of_InitSynth:
 11194                           	opt stack 0
 11195                           tosu	equ	0xFFF
 11196                           tosh	equ	0xFFE
 11197                           tosl	equ	0xFFD
 11198                           pclath	equ	0xFFA
 11199                           tblptru	equ	0xFF8
 11200                           tblptrh	equ	0xFF7
 11201                           tblptrl	equ	0xFF6
 11202                           tablat	equ	0xFF5
 11203                           prodh	equ	0xFF4
 11204                           prodl	equ	0xFF3
 11205                           intcon	equ	0xFF2
 11206                           intcon2	equ	0xFF1
 11207                           postinc0	equ	0xFEE
 11208                           plusw0	equ	0xFEB
 11209                           wreg	equ	0xFE8
 11210                           indf1	equ	0xFE7
 11211                           postdec1	equ	0xFE5
 11212                           fsr1h	equ	0xFE2
 11213                           fsr1l	equ	0xFE1
 11214                           indf2	equ	0xFDF
 11215                           postinc2	equ	0xFDE
 11216                           postdec2	equ	0xFDD
 11217                           plusw2	equ	0xFDB
 11218                           fsr2h	equ	0xFDA
 11219                           fsr2l	equ	0xFD9
 11220                           status	equ	0xFD8
 11221                           
 11222 ;; *************** function _SwSpi_Set_CE_Pin *****************
 11223 ;; Defined at:
 11224 ;;		line 201 in file "SwSpiApp.c"
 11225 ;; Parameters:    Size  Location     Type
 11226 ;;  phrType         1    wreg     enum E1
 11227 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11228 ;; Auto vars:     Size  Location     Type
 11229 ;;  phrType         1   24[COMRAM] enum E1
 11230 ;; Return value:  Size  Location     Type
 11231 ;;                  1    wreg      void 
 11232 ;; Registers used:
 11233 ;;		wreg, status,2, status,0
 11234 ;; Tracked objects:
 11235 ;;		On entry : 0/0
 11236 ;;		On exit  : 0/0
 11237 ;;		Unchanged: 0/0
 11238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11239 ;;      Params:         1       0       0       0       0       0       0
 11240 ;;      Locals:         1       0       0       0       0       0       0
 11241 ;;      Temps:          0       0       0       0       0       0       0
 11242 ;;      Totals:         2       0       0       0       0       0       0
 11243 ;;Total ram usage:        2 bytes
 11244 ;; Hardware stack levels used:    1
 11245 ;; Hardware stack levels required when called:    4
 11246 ;; This function calls:
 11247 ;;		Nothing
 11248 ;; This function is called by:
 11249 ;;		_InitSynth
 11250 ;;		_SetSynthOper
 11251 ;; This function uses a non-reentrant model
 11252 ;;
 11253                           
 11254                           	psect	text60
 11255  003BAC                     __ptext60:
 11256                           	opt stack 0
 11257  003BAC                     _SwSpi_Set_CE_Pin:
 11258                           	opt stack 23
 11259                           
 11260                           ; BSR set to: 0
 11261                           ;incstack = 0
 11262                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
 11263  003BAC  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
 11264                           
 11265                           ;SwSpiApp.c: 203: switch(phrType)
 11266  003BAE  D014               	goto	l694
 11267  003BB0                     
 11268                           ;SwSpiApp.c: 206: if(cPinMode == 1)
 11269  003BB0  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11270  003BB2  A4D8               	btfss	status,2,c
 11271  003BB4  D002               	goto	l696
 11272                           
 11273                           ;SwSpiApp.c: 207: {
 11274                           ;SwSpiApp.c: 208: do { LATCbits.LATC1 = 1; } while(0);
 11275  003BB6  828B               	bsf	3979,1,c	;volatile
 11276                           
 11277                           ;SwSpiApp.c: 209: }
 11278  003BB8  0012               	return	
 11279  003BBA                     l696:
 11280                           
 11281                           ;SwSpiApp.c: 210: else if(cPinMode == 0)
 11282  003BBA  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11283  003BBC  A4D8               	btfss	status,2,c
 11284  003BBE  0012               	return	
 11285                           
 11286                           ;SwSpiApp.c: 211: {
 11287                           ;SwSpiApp.c: 212: do { LATCbits.LATC1 = 0; } while(0);
 11288  003BC0  928B               	bcf	3979,1,c	;volatile
 11289                           
 11290                           ;SwSpiApp.c: 213: }
 11291                           ;SwSpiApp.c: 214: break;
 11292  003BC2  0012               	return	
 11293  003BC4                     
 11294                           ;SwSpiApp.c: 217: if(cPinMode == 1)
 11295  003BC4  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11296  003BC6  A4D8               	btfss	status,2,c
 11297  003BC8  D002               	goto	l705
 11298                           
 11299                           ;SwSpiApp.c: 218: {
 11300                           ;SwSpiApp.c: 219: do { LATDbits.LATD2 = 1; } while(0);
 11301  003BCA  848C               	bsf	3980,2,c	;volatile
 11302                           
 11303                           ;SwSpiApp.c: 220: }
 11304  003BCC  0012               	return	
 11305  003BCE                     l705:
 11306                           
 11307                           ;SwSpiApp.c: 221: else if(cPinMode == 0)
 11308  003BCE  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11309  003BD0  A4D8               	btfss	status,2,c
 11310  003BD2  0012               	return	
 11311                           
 11312                           ;SwSpiApp.c: 222: {
 11313                           ;SwSpiApp.c: 223: do { LATCbits.LATC1 = 0; } while(0);
 11314  003BD4  928B               	bcf	3979,1,c	;volatile
 11315                           
 11316                           ;SwSpiApp.c: 226: }
 11317                           
 11318                           ;SwSpiApp.c: 224: }
 11319                           ;SwSpiApp.c: 225: break;
 11320  003BD6  0012               	return	
 11321  003BD8                     l694:
 11322  003BD8  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
 11323                           
 11324                           ; Switch size 1, requested type "space"
 11325                           ; Number of cases is 2, Range of values is 0 to 1
 11326                           ; switch strategies available:
 11327                           ; Name         Instructions Cycles
 11328                           ; simple_byte            7     4 (average)
 11329                           ;	Chosen strategy is simple_byte
 11330  003BDA  0A00               	xorlw	0	; case 0
 11331  003BDC  B4D8               	btfsc	status,2,c
 11332  003BDE  D7E8               	goto	l695
 11333  003BE0  0A01               	xorlw	1	; case 1
 11334  003BE2  A4D8               	btfss	status,2,c
 11335  003BE4  0012               	return	
 11336  003BE6  D7EE               	goto	l704
 11337  003BE8                     __end_of_SwSpi_Set_CE_Pin:
 11338                           	opt stack 0
 11339                           tosu	equ	0xFFF
 11340                           tosh	equ	0xFFE
 11341                           tosl	equ	0xFFD
 11342                           pclath	equ	0xFFA
 11343                           tblptru	equ	0xFF8
 11344                           tblptrh	equ	0xFF7
 11345                           tblptrl	equ	0xFF6
 11346                           tablat	equ	0xFF5
 11347                           prodh	equ	0xFF4
 11348                           prodl	equ	0xFF3
 11349                           intcon	equ	0xFF2
 11350                           intcon2	equ	0xFF1
 11351                           postinc0	equ	0xFEE
 11352                           plusw0	equ	0xFEB
 11353                           wreg	equ	0xFE8
 11354                           indf1	equ	0xFE7
 11355                           postdec1	equ	0xFE5
 11356                           fsr1h	equ	0xFE2
 11357                           fsr1l	equ	0xFE1
 11358                           indf2	equ	0xFDF
 11359                           postinc2	equ	0xFDE
 11360                           postdec2	equ	0xFDD
 11361                           plusw2	equ	0xFDB
 11362                           fsr2h	equ	0xFDA
 11363                           fsr2l	equ	0xFD9
 11364                           status	equ	0xFD8
 11365                           
 11366 ;; *************** function _InitAdcApplicationMgr *****************
 11367 ;; Defined at:
 11368 ;;		line 20 in file "AdcApp.c"
 11369 ;; Parameters:    Size  Location     Type
 11370 ;;		None
 11371 ;; Auto vars:     Size  Location     Type
 11372 ;;		None
 11373 ;; Return value:  Size  Location     Type
 11374 ;;                  1    wreg      void 
 11375 ;; Registers used:
 11376 ;;		wreg, status,2
 11377 ;; Tracked objects:
 11378 ;;		On entry : 0/0
 11379 ;;		On exit  : 0/0
 11380 ;;		Unchanged: 0/0
 11381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11382 ;;      Params:         0       0       0       0       0       0       0
 11383 ;;      Locals:         0       0       0       0       0       0       0
 11384 ;;      Temps:          0       0       0       0       0       0       0
 11385 ;;      Totals:         0       0       0       0       0       0       0
 11386 ;;Total ram usage:        0 bytes
 11387 ;; Hardware stack levels used:    1
 11388 ;; Hardware stack levels required when called:    4
 11389 ;; This function calls:
 11390 ;;		Nothing
 11391 ;; This function is called by:
 11392 ;;		_InitSystemApplicationManagers
 11393 ;; This function uses a non-reentrant model
 11394 ;;
 11395                           
 11396                           	psect	text61
 11397  0042E0                     __ptext61:
 11398                           	opt stack 0
 11399  0042E0                     _InitAdcApplicationMgr:
 11400                           	opt stack 25
 11401                           
 11402                           ;AdcApp.c: 22: adcSampleMode = CIRCULAR;
 11403                           
 11404                           ;incstack = 0
 11405  0042E0  0E00               	movlw	0
 11406  0042E2  6E3B               	movwf	_adcSampleMode,c
 11407  0042E4  0012               	return		;funcret
 11408  0042E6                     __end_of_InitAdcApplicationMgr:
 11409                           	opt stack 0
 11410                           tosu	equ	0xFFF
 11411                           tosh	equ	0xFFE
 11412                           tosl	equ	0xFFD
 11413                           pclath	equ	0xFFA
 11414                           tblptru	equ	0xFF8
 11415                           tblptrh	equ	0xFF7
 11416                           tblptrl	equ	0xFF6
 11417                           tablat	equ	0xFF5
 11418                           prodh	equ	0xFF4
 11419                           prodl	equ	0xFF3
 11420                           intcon	equ	0xFF2
 11421                           intcon2	equ	0xFF1
 11422                           postinc0	equ	0xFEE
 11423                           plusw0	equ	0xFEB
 11424                           wreg	equ	0xFE8
 11425                           indf1	equ	0xFE7
 11426                           postdec1	equ	0xFE5
 11427                           fsr1h	equ	0xFE2
 11428                           fsr1l	equ	0xFE1
 11429                           indf2	equ	0xFDF
 11430                           postinc2	equ	0xFDE
 11431                           postdec2	equ	0xFDD
 11432                           plusw2	equ	0xFDB
 11433                           fsr2h	equ	0xFDA
 11434                           fsr2l	equ	0xFD9
 11435                           status	equ	0xFD8
 11436                           
 11437 ;; *************** function _DacInit *****************
 11438 ;; Defined at:
 11439 ;;		line 11 in file "DacApp.c"
 11440 ;; Parameters:    Size  Location     Type
 11441 ;;		None
 11442 ;; Auto vars:     Size  Location     Type
 11443 ;;  dacInput        2  106[BANK0 ] unsigned int 
 11444 ;;  idx             1  108[BANK0 ] char 
 11445 ;; Return value:  Size  Location     Type
 11446 ;;                  1    wreg      void 
 11447 ;; Registers used:
 11448 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11449 ;; Tracked objects:
 11450 ;;		On entry : 0/0
 11451 ;;		On exit  : 0/0
 11452 ;;		Unchanged: 0/0
 11453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11454 ;;      Params:         0       0       0       0       0       0       0
 11455 ;;      Locals:         0       3       0       0       0       0       0
 11456 ;;      Temps:          0       2       0       0       0       0       0
 11457 ;;      Totals:         0       5       0       0       0       0       0
 11458 ;;Total ram usage:        5 bytes
 11459 ;; Hardware stack levels used:    1
 11460 ;; Hardware stack levels required when called:   10
 11461 ;; This function calls:
 11462 ;;		_ReadIntFromEeprom
 11463 ;;		_SWSPI_send_word
 11464 ;;		_StoreIntInEeprom
 11465 ;; This function is called by:
 11466 ;;		_InitSystemApplicationManagers
 11467 ;; This function uses a non-reentrant model
 11468 ;;
 11469                           
 11470                           	psect	text62
 11471  0028CE                     __ptext62:
 11472                           	opt stack 0
 11473  0028CE                     _DacInit:
 11474                           	opt stack 19
 11475                           
 11476                           ;DacApp.c: 13: for(int8_t idx = 0; idx < (4); idx++)
 11477                           
 11478                           ;incstack = 0
 11479  0028CE  0E00               	movlw	0
 11480  0028D0  0100               	movlb	0	; () banked
 11481  0028D2  6FCC               	movwf	DacInit@idx& (0+255),b
 11482  0028D4                     l8429:
 11483                           
 11484                           ; BSR set to: 0
 11485  0028D4  51CC               	movf	DacInit@idx& (0+255),w,b
 11486  0028D6  0A80               	xorlw	128
 11487  0028D8  0F7C               	addlw	-132
 11488  0028DA  B0D8               	btfsc	status,0,c
 11489  0028DC  0012               	return	
 11490                           
 11491                           ; BSR set to: 0
 11492                           ;DacApp.c: 14: {
 11493                           ;DacApp.c: 15: uint16_t dacInput = ReadIntFromEeprom((0x40) | DAC_ADDRES[idx], 2);
 11494                           
 11495                           ; BSR set to: 0
 11496                           
 11497                           ; BSR set to: 0
 11498  0028DE  0E00               	movlw	0
 11499  0028E0  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 11500  0028E2  0E02               	movlw	2
 11501  0028E4  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 11502  0028E6  51CC               	movf	DacInit@idx& (0+255),w,b
 11503  0028E8  0D01               	mullw	1
 11504  0028EA  0E53               	movlw	low _DAC_ADDRES
 11505  0028EC  24F3               	addwf	prodl,w,c
 11506  0028EE  6EF6               	movwf	tblptrl,c
 11507  0028F0  0E06               	movlw	high _DAC_ADDRES
 11508  0028F2  20F4               	addwfc	prodh,w,c
 11509  0028F4  6EF7               	movwf	tblptrh,c
 11510  0028F6                     	if	0	;There are less than 3 active tblptr bytes
 11511  0028F6                     	endif
 11512  0028F6  0008               	tblrd		*
 11513  0028F8  50F5               	movf	tablat,w,c
 11514  0028FA  0940               	iorlw	64
 11515  0028FC  EC05  F010         	call	_ReadIntFromEeprom
 11516  002900  C0B1  F0CA         	movff	?_ReadIntFromEeprom,DacInit@dacInput
 11517  002904  C0B2  F0CB         	movff	?_ReadIntFromEeprom+1,DacInit@dacInput+1
 11518                           
 11519                           ;DacApp.c: 16: if(dacInput == 0xFFFF)
 11520  002908  0100               	movlb	0	; () banked
 11521  00290A  29CA               	incf	DacInit@dacInput& (0+255),w,b
 11522  00290C  E144               	bnz	l8441
 11523  00290E  29CB               	incf	(DacInit@dacInput+1)& (0+255),w,b
 11524  002910  A4D8               	btfss	status,2,c
 11525  002912  D041               	goto	l403
 11526                           
 11527                           ; BSR set to: 0
 11528                           ;DacApp.c: 17: {
 11529                           ;DacApp.c: 18: SWSPI_send_word(EXT_DAC, DAC_DEFAULT_INIT_VALUES[idx], 1);
 11530  002914  51CC               	movf	DacInit@idx& (0+255),w,b
 11531  002916  0D02               	mullw	2
 11532  002918  0E4B               	movlw	low _DAC_DEFAULT_INIT_VALUES
 11533  00291A  24F3               	addwf	prodl,w,c
 11534  00291C  6EF6               	movwf	tblptrl,c
 11535  00291E  0E06               	movlw	high _DAC_DEFAULT_INIT_VALUES
 11536  002920  20F4               	addwfc	prodh,w,c
 11537  002922  6EF7               	movwf	tblptrh,c
 11538  002924                     	if	0	;There are less than 3 active tblptr bytes
 11539  002924                     	endif
 11540  002924  0009               	tblrd		*+
 11541  002926  CFF5 F0C8          	movff	tablat,??_DacInit
 11542  00292A  0009               	tblrd		*+
 11543  00292C  CFF5 F0C9          	movff	tablat,??_DacInit+1
 11544  002930  C0C8  F026         	movff	??_DacInit,SWSPI_send_word@data
 11545  002934  C0C9  F027         	movff	??_DacInit+1,SWSPI_send_word@data+1
 11546  002938  6A28               	clrf	SWSPI_send_word@data+2,c
 11547  00293A  6A29               	clrf	SWSPI_send_word@data+3,c
 11548  00293C  0E01               	movlw	1
 11549  00293E  6E2A               	movwf	SWSPI_send_word@dataSize,c
 11550  002940  0E02               	movlw	2
 11551  002942  EC2A  F018         	call	_SWSPI_send_word
 11552                           
 11553                           ;DacApp.c: 19: StoreIntInEeprom(DAC_DEFAULT_INIT_VALUES[idx], (0x40) | DAC_ADDRES[idx], 
      +                          2);
 11554  002946  0100               	movlb	0	; () banked
 11555  002948  51CC               	movf	DacInit@idx& (0+255),w,b
 11556  00294A  0D02               	mullw	2
 11557  00294C  0E4B               	movlw	low _DAC_DEFAULT_INIT_VALUES
 11558  00294E  24F3               	addwf	prodl,w,c
 11559  002950  6EF6               	movwf	tblptrl,c
 11560  002952  0E06               	movlw	high _DAC_DEFAULT_INIT_VALUES
 11561  002954  20F4               	addwfc	prodh,w,c
 11562  002956  6EF7               	movwf	tblptrh,c
 11563  002958                     	if	0	;There are less than 3 active tblptr bytes
 11564  002958                     	endif
 11565  002958  0009               	tblrd		*+
 11566  00295A  CFF5 F0C8          	movff	tablat,??_DacInit
 11567  00295E  0009               	tblrd		*+
 11568  002960  CFF5 F0C9          	movff	tablat,??_DacInit+1
 11569  002964  C0C8  F021         	movff	??_DacInit,StoreIntInEeprom@data
 11570  002968  C0C9  F022         	movff	??_DacInit+1,StoreIntInEeprom@data+1
 11571  00296C  6A23               	clrf	StoreIntInEeprom@data+2,c
 11572  00296E  6A24               	clrf	StoreIntInEeprom@data+3,c
 11573  002970  51CC               	movf	DacInit@idx& (0+255),w,b
 11574  002972  0D01               	mullw	1
 11575  002974  0E53               	movlw	low _DAC_ADDRES
 11576  002976  24F3               	addwf	prodl,w,c
 11577  002978  6EF6               	movwf	tblptrl,c
 11578  00297A  0E06               	movlw	high _DAC_ADDRES
 11579  00297C  20F4               	addwfc	prodh,w,c
 11580  00297E  6EF7               	movwf	tblptrh,c
 11581  002980                     	if	0	;There are less than 3 active tblptr bytes
 11582  002980                     	endif
 11583  002980  0008               	tblrd		*
 11584  002982  50F5               	movf	tablat,w,c
 11585  002984  0940               	iorlw	64
 11586  002986  6E25               	movwf	StoreIntInEeprom@address,c
 11587  002988  0E00               	movlw	0
 11588  00298A  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 11589  00298C  0E02               	movlw	2
 11590  00298E  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 11591  002990  EC2E  F01E         	call	_StoreIntInEeprom	;wreg free
 11592                           
 11593                           ;DacApp.c: 20: }
 11594  002994  D00B               	goto	l404
 11595  002996                     l403:
 11596  002996                     l8441:
 11597                           
 11598                           ;DacApp.c: 21: else
 11599                           ;DacApp.c: 22: {
 11600                           ;DacApp.c: 23: SWSPI_send_word(EXT_DAC, dacInput, 1);
 11601  002996  C0CA  F026         	movff	DacInit@dacInput,SWSPI_send_word@data
 11602  00299A  C0CB  F027         	movff	DacInit@dacInput+1,SWSPI_send_word@data+1
 11603  00299E  6A28               	clrf	SWSPI_send_word@data+2,c
 11604  0029A0  6A29               	clrf	SWSPI_send_word@data+3,c
 11605  0029A2  0E01               	movlw	1
 11606  0029A4  6E2A               	movwf	SWSPI_send_word@dataSize,c
 11607  0029A6  0E02               	movlw	2
 11608  0029A8  EC2A  F018         	call	_SWSPI_send_word
 11609  0029AC                     l404:
 11610  0029AC  0100               	movlb	0	; () banked
 11611  0029AE  2BCC               	incf	DacInit@idx& (0+255),f,b
 11612  0029B0  D791               	goto	l8429
 11613  0029B2                     __end_of_DacInit:
 11614                           	opt stack 0
 11615                           tosu	equ	0xFFF
 11616                           tosh	equ	0xFFE
 11617                           tosl	equ	0xFFD
 11618                           pclath	equ	0xFFA
 11619                           tblptru	equ	0xFF8
 11620                           tblptrh	equ	0xFF7
 11621                           tblptrl	equ	0xFF6
 11622                           tablat	equ	0xFF5
 11623                           prodh	equ	0xFF4
 11624                           prodl	equ	0xFF3
 11625                           intcon	equ	0xFF2
 11626                           intcon2	equ	0xFF1
 11627                           postinc0	equ	0xFEE
 11628                           plusw0	equ	0xFEB
 11629                           wreg	equ	0xFE8
 11630                           indf1	equ	0xFE7
 11631                           postdec1	equ	0xFE5
 11632                           fsr1h	equ	0xFE2
 11633                           fsr1l	equ	0xFE1
 11634                           indf2	equ	0xFDF
 11635                           postinc2	equ	0xFDE
 11636                           postdec2	equ	0xFDD
 11637                           plusw2	equ	0xFDB
 11638                           fsr2h	equ	0xFDA
 11639                           fsr2l	equ	0xFD9
 11640                           status	equ	0xFD8
 11641                           
 11642 ;; *************** function _StoreIntInEeprom *****************
 11643 ;; Defined at:
 11644 ;;		line 109 in file "SystemCommon.c"
 11645 ;; Parameters:    Size  Location     Type
 11646 ;;  data            4   32[COMRAM] unsigned long 
 11647 ;;  address         1   36[COMRAM] unsigned char 
 11648 ;;  numOfByes       2   37[COMRAM] int 
 11649 ;; Auto vars:     Size  Location     Type
 11650 ;;  val             1   39[COMRAM] unsigned char 
 11651 ;;  idx             1   40[COMRAM] unsigned char 
 11652 ;; Return value:  Size  Location     Type
 11653 ;;                  1    wreg      void 
 11654 ;; Registers used:
 11655 ;;		wreg, status,2, status,0, cstack
 11656 ;; Tracked objects:
 11657 ;;		On entry : 0/0
 11658 ;;		On exit  : 0/0
 11659 ;;		Unchanged: 0/0
 11660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11661 ;;      Params:         7       0       0       0       0       0       0
 11662 ;;      Locals:         2       0       0       0       0       0       0
 11663 ;;      Temps:          0       0       0       0       0       0       0
 11664 ;;      Totals:         9       0       0       0       0       0       0
 11665 ;;Total ram usage:        9 bytes
 11666 ;; Hardware stack levels used:    1
 11667 ;; Hardware stack levels required when called:    6
 11668 ;; This function calls:
 11669 ;;		_EepromWrite
 11670 ;;		_make8
 11671 ;; This function is called by:
 11672 ;;		_DacInit
 11673 ;;		_DacSetValue
 11674 ;;		_InitSynth
 11675 ;;		_UpdateSynthFreq
 11676 ;; This function uses a non-reentrant model
 11677 ;;
 11678                           
 11679                           	psect	text63
 11680  003C5C                     __ptext63:
 11681                           	opt stack 0
 11682  003C5C                     _StoreIntInEeprom:
 11683                           	opt stack 21
 11684                           
 11685                           ;SystemCommon.c: 111: for(uint8_t idx = numOfByes; idx; idx--)
 11686                           
 11687                           ; BSR set to: 0
 11688                           ;incstack = 0
 11689  003C5C  C026  F029         	movff	StoreIntInEeprom@numOfByes,StoreIntInEeprom@idx
 11690  003C60  D015               	goto	l1386
 11691  003C62                     
 11692                           ;SystemCommon.c: 112: {
 11693                           ;SystemCommon.c: 113: uint8_t val = make8(data, idx - 1);
 11694  003C62  C021  F018         	movff	StoreIntInEeprom@data,make8@data
 11695  003C66  C022  F019         	movff	StoreIntInEeprom@data+1,make8@data+1
 11696  003C6A  C023  F01A         	movff	StoreIntInEeprom@data+2,make8@data+2
 11697  003C6E  C024  F01B         	movff	StoreIntInEeprom@data+3,make8@data+3
 11698  003C72  0429               	decf	StoreIntInEeprom@idx,w,c
 11699  003C74  6E1C               	movwf	make8@dataLocation,c
 11700  003C76  EC84  F01B         	call	_make8	;wreg free
 11701  003C7A  6E28               	movwf	StoreIntInEeprom@val,c
 11702                           
 11703                           ;SystemCommon.c: 114: EepromWrite(address - idx, val);
 11704  003C7C  C028  F01B         	movff	StoreIntInEeprom@val,EepromWrite@data
 11705  003C80  5029               	movf	StoreIntInEeprom@idx,w,c
 11706  003C82  0800               	sublw	0
 11707  003C84  2425               	addwf	StoreIntInEeprom@address,w,c
 11708  003C86  EC34  F021         	call	_EepromWrite
 11709  003C8A  0629               	decf	StoreIntInEeprom@idx,f,c
 11710  003C8C                     l1386:
 11711  003C8C  5029               	movf	StoreIntInEeprom@idx,w,c
 11712  003C8E  B4D8               	btfsc	status,2,c
 11713  003C90  0012               	return	
 11714  003C92  D7E7               	goto	l1387
 11715  003C94                     __end_of_StoreIntInEeprom:
 11716                           	opt stack 0
 11717                           tosu	equ	0xFFF
 11718                           tosh	equ	0xFFE
 11719                           tosl	equ	0xFFD
 11720                           pclath	equ	0xFFA
 11721                           tblptru	equ	0xFF8
 11722                           tblptrh	equ	0xFF7
 11723                           tblptrl	equ	0xFF6
 11724                           tablat	equ	0xFF5
 11725                           prodh	equ	0xFF4
 11726                           prodl	equ	0xFF3
 11727                           intcon	equ	0xFF2
 11728                           intcon2	equ	0xFF1
 11729                           postinc0	equ	0xFEE
 11730                           plusw0	equ	0xFEB
 11731                           wreg	equ	0xFE8
 11732                           indf1	equ	0xFE7
 11733                           postdec1	equ	0xFE5
 11734                           fsr1h	equ	0xFE2
 11735                           fsr1l	equ	0xFE1
 11736                           indf2	equ	0xFDF
 11737                           postinc2	equ	0xFDE
 11738                           postdec2	equ	0xFDD
 11739                           plusw2	equ	0xFDB
 11740                           fsr2h	equ	0xFDA
 11741                           fsr2l	equ	0xFD9
 11742                           status	equ	0xFD8
 11743                           
 11744 ;; *************** function _EepromWrite *****************
 11745 ;; Defined at:
 11746 ;;		line 222 in file "FlashApp.c"
 11747 ;; Parameters:    Size  Location     Type
 11748 ;;  address         1    wreg     unsigned char 
 11749 ;;  data            1   26[COMRAM] unsigned char 
 11750 ;; Auto vars:     Size  Location     Type
 11751 ;;  address         1   27[COMRAM] unsigned char 
 11752 ;; Return value:  Size  Location     Type
 11753 ;;                  1    wreg      void 
 11754 ;; Registers used:
 11755 ;;		wreg, status,2, cstack
 11756 ;; Tracked objects:
 11757 ;;		On entry : 0/0
 11758 ;;		On exit  : 0/0
 11759 ;;		Unchanged: 0/0
 11760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11761 ;;      Params:         1       0       0       0       0       0       0
 11762 ;;      Locals:         1       0       0       0       0       0       0
 11763 ;;      Temps:          0       0       0       0       0       0       0
 11764 ;;      Totals:         2       0       0       0       0       0       0
 11765 ;;Total ram usage:        2 bytes
 11766 ;; Hardware stack levels used:    1
 11767 ;; Hardware stack levels required when called:    5
 11768 ;; This function calls:
 11769 ;;		_DATAEE_WriteByte
 11770 ;; This function is called by:
 11771 ;;		_StoreIntInEeprom
 11772 ;; This function uses a non-reentrant model
 11773 ;;
 11774                           
 11775                           	psect	text64
 11776  004268                     __ptext64:
 11777                           	opt stack 0
 11778  004268                     _EepromWrite:
 11779                           	opt stack 21
 11780                           
 11781                           ;incstack = 0
 11782                           ;EepromWrite@address stored from wreg
 11783  004268  6E1C               	movwf	EepromWrite@address,c
 11784                           
 11785                           ;FlashApp.c: 224: DATAEE_WriteByte(address, data);
 11786  00426A  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
 11787  00426E  501C               	movf	EepromWrite@address,w,c
 11788  004270  ECB8  F01E         	call	_DATAEE_WriteByte
 11789  004274  0012               	return		;funcret
 11790  004276                     __end_of_EepromWrite:
 11791                           	opt stack 0
 11792                           tosu	equ	0xFFF
 11793                           tosh	equ	0xFFE
 11794                           tosl	equ	0xFFD
 11795                           pclath	equ	0xFFA
 11796                           tblptru	equ	0xFF8
 11797                           tblptrh	equ	0xFF7
 11798                           tblptrl	equ	0xFF6
 11799                           tablat	equ	0xFF5
 11800                           prodh	equ	0xFF4
 11801                           prodl	equ	0xFF3
 11802                           intcon	equ	0xFF2
 11803                           intcon2	equ	0xFF1
 11804                           postinc0	equ	0xFEE
 11805                           plusw0	equ	0xFEB
 11806                           wreg	equ	0xFE8
 11807                           indf1	equ	0xFE7
 11808                           postdec1	equ	0xFE5
 11809                           fsr1h	equ	0xFE2
 11810                           fsr1l	equ	0xFE1
 11811                           indf2	equ	0xFDF
 11812                           postinc2	equ	0xFDE
 11813                           postdec2	equ	0xFDD
 11814                           plusw2	equ	0xFDB
 11815                           fsr2h	equ	0xFDA
 11816                           fsr2l	equ	0xFD9
 11817                           status	equ	0xFD8
 11818                           
 11819 ;; *************** function _DATAEE_WriteByte *****************
 11820 ;; Defined at:
 11821 ;;		line 167 in file "mcc_generated_files/memory.c"
 11822 ;; Parameters:    Size  Location     Type
 11823 ;;  bAdd            1    wreg     unsigned char 
 11824 ;;  bData           1   23[COMRAM] unsigned char 
 11825 ;; Auto vars:     Size  Location     Type
 11826 ;;  bAdd            1   24[COMRAM] unsigned char 
 11827 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
 11828 ;; Return value:  Size  Location     Type
 11829 ;;                  1    wreg      void 
 11830 ;; Registers used:
 11831 ;;		wreg, status,2
 11832 ;; Tracked objects:
 11833 ;;		On entry : 0/0
 11834 ;;		On exit  : 0/0
 11835 ;;		Unchanged: 0/0
 11836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11837 ;;      Params:         1       0       0       0       0       0       0
 11838 ;;      Locals:         2       0       0       0       0       0       0
 11839 ;;      Temps:          0       0       0       0       0       0       0
 11840 ;;      Totals:         3       0       0       0       0       0       0
 11841 ;;Total ram usage:        3 bytes
 11842 ;; Hardware stack levels used:    1
 11843 ;; Hardware stack levels required when called:    4
 11844 ;; This function calls:
 11845 ;;		Nothing
 11846 ;; This function is called by:
 11847 ;;		_EepromWrite
 11848 ;; This function uses a non-reentrant model
 11849 ;;
 11850                           
 11851                           	psect	text65
 11852  003D70                     __ptext65:
 11853                           	opt stack 0
 11854  003D70                     _DATAEE_WriteByte:
 11855                           	opt stack 21
 11856                           
 11857                           ;incstack = 0
 11858                           ;DATAEE_WriteByte@bAdd stored from wreg
 11859  003D70  6E19               	movwf	DATAEE_WriteByte@bAdd,c
 11860                           
 11861                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
 11862  003D72  0E00               	movlw	0
 11863  003D74  BEF2               	btfsc	intcon,7,c	;volatile
 11864  003D76  0E01               	movlw	1
 11865  003D78  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
 11866                           
 11867                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
 11868  003D7A  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
 11869                           
 11870                           ;memory.c: 172: EEDATA = bData;
 11871  003D7E  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
 11872                           
 11873                           ;memory.c: 173: EECON1bits.EEPGD = 0;
 11874  003D82  9EA6               	bcf	4006,7,c	;volsfr
 11875                           
 11876                           ;memory.c: 174: EECON1bits.CFGS = 0;
 11877  003D84  9CA6               	bcf	4006,6,c	;volsfr
 11878                           
 11879                           ;memory.c: 175: EECON1bits.WREN = 1;
 11880  003D86  84A6               	bsf	4006,2,c	;volsfr
 11881                           
 11882                           ;memory.c: 176: INTCONbits.GIE = 0;
 11883  003D88  9EF2               	bcf	intcon,7,c	;volatile
 11884                           
 11885                           ;memory.c: 177: EECON2 = 0x55;
 11886  003D8A  0E55               	movlw	85
 11887  003D8C  6EA7               	movwf	4007,c	;volsfr
 11888                           
 11889                           ;memory.c: 178: EECON2 = 0xAA;
 11890  003D8E  0EAA               	movlw	170
 11891  003D90  6EA7               	movwf	4007,c	;volsfr
 11892                           
 11893                           ;memory.c: 179: EECON1bits.WR = 1;
 11894  003D92  82A6               	bsf	4006,1,c	;volsfr
 11895  003D94                     
 11896                           ;memory.c: 182: {
 11897  003D94  B2A6               	btfsc	4006,1,c	;volsfr
 11898  003D96  D7FE               	goto	l1027
 11899                           
 11900                           ;memory.c: 183: }
 11901                           ;memory.c: 185: EECON1bits.WREN = 0;
 11902  003D98  94A6               	bcf	4006,2,c	;volsfr
 11903                           
 11904                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
 11905  003D9A  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
 11906  003D9C  D002               	bra	u7195
 11907  003D9E  9EF2               	bcf	intcon,7,c	;volatile
 11908  003DA0  D001               	bra	u7196
 11909  003DA2                     u7195:
 11910  003DA2  8EF2               	bsf	intcon,7,c	;volatile
 11911  003DA4                     u7196:
 11912  003DA4  0012               	return		;funcret
 11913  003DA6                     __end_of_DATAEE_WriteByte:
 11914                           	opt stack 0
 11915                           tosu	equ	0xFFF
 11916                           tosh	equ	0xFFE
 11917                           tosl	equ	0xFFD
 11918                           pclath	equ	0xFFA
 11919                           tblptru	equ	0xFF8
 11920                           tblptrh	equ	0xFF7
 11921                           tblptrl	equ	0xFF6
 11922                           tablat	equ	0xFF5
 11923                           prodh	equ	0xFF4
 11924                           prodl	equ	0xFF3
 11925                           intcon	equ	0xFF2
 11926                           intcon2	equ	0xFF1
 11927                           postinc0	equ	0xFEE
 11928                           plusw0	equ	0xFEB
 11929                           wreg	equ	0xFE8
 11930                           indf1	equ	0xFE7
 11931                           postdec1	equ	0xFE5
 11932                           fsr1h	equ	0xFE2
 11933                           fsr1l	equ	0xFE1
 11934                           indf2	equ	0xFDF
 11935                           postinc2	equ	0xFDE
 11936                           postdec2	equ	0xFDD
 11937                           plusw2	equ	0xFDB
 11938                           fsr2h	equ	0xFDA
 11939                           fsr2l	equ	0xFD9
 11940                           status	equ	0xFD8
 11941                           
 11942 ;; *************** function _SWSPI_send_word *****************
 11943 ;; Defined at:
 11944 ;;		line 17 in file "SwSpiApp.c"
 11945 ;; Parameters:    Size  Location     Type
 11946 ;;  phrType         1    wreg     enum E1
 11947 ;;  data            4   37[COMRAM] unsigned long 
 11948 ;;  dataSize        1   41[COMRAM] unsigned char 
 11949 ;; Auto vars:     Size  Location     Type
 11950 ;;  phrType         1   45[COMRAM] enum E1
 11951 ;;  datac           1   42[COMRAM] unsigned char 
 11952 ;;  idx             2   43[COMRAM] int 
 11953 ;; Return value:  Size  Location     Type
 11954 ;;                  1    wreg      void 
 11955 ;; Registers used:
 11956 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11957 ;; Tracked objects:
 11958 ;;		On entry : 0/0
 11959 ;;		On exit  : 0/0
 11960 ;;		Unchanged: 0/0
 11961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11962 ;;      Params:         5       0       0       0       0       0       0
 11963 ;;      Locals:         4       0       0       0       0       0       0
 11964 ;;      Temps:          0       0       0       0       0       0       0
 11965 ;;      Totals:         9       0       0       0       0       0       0
 11966 ;;Total ram usage:        9 bytes
 11967 ;; Hardware stack levels used:    1
 11968 ;; Hardware stack levels required when called:    7
 11969 ;; This function calls:
 11970 ;;		_SWSPI_DAC_send_bits
 11971 ;;		_SWSPI_Synth_send_bits
 11972 ;;		_SwSpi_Set_Dac_Sync_Pin
 11973 ;;		_SwSpi_Set_Synth_Le_Pin
 11974 ;;		_make8
 11975 ;; This function is called by:
 11976 ;;		_DacInit
 11977 ;;		_DacSetValue
 11978 ;;		_InitSynth
 11979 ;;		_UpdateSynthFreq
 11980 ;; This function uses a non-reentrant model
 11981 ;;
 11982                           
 11983                           	psect	text66
 11984  003054                     __ptext66:
 11985                           	opt stack 0
 11986  003054                     _SWSPI_send_word:
 11987                           	opt stack 20
 11988                           
 11989                           ;incstack = 0
 11990                           ;SWSPI_send_word@phrType stored from wreg
 11991  003054  6E2E               	movwf	SWSPI_send_word@phrType,c
 11992                           
 11993                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 11994  003056  9EF2               	bcf	intcon,7,c	;volatile
 11995                           
 11996                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 11997  003058  502E               	movf	SWSPI_send_word@phrType,w,c
 11998  00305A  B4D8               	btfsc	status,2,c
 11999  00305C  D003               	goto	u7820
 12000  00305E  042E               	decf	SWSPI_send_word@phrType,w,c
 12001  003060  A4D8               	btfss	status,2,c
 12002  003062  D016               	goto	l603
 12003  003064                     u7820:
 12004                           
 12005                           ;SwSpiApp.c: 24: {
 12006                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 12007  003064  0E00               	movlw	0
 12008  003066  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 12009  003068  502E               	movf	SWSPI_send_word@phrType,w,c
 12010  00306A  ECF4  F01D         	call	_SwSpi_Set_Synth_Le_Pin
 12011                           
 12012                           ;SwSpiApp.c: 26: SWSPI_Synth_send_bits(phrType, data);
 12013  00306E  C026  F022         	movff	SWSPI_send_word@data,SWSPI_Synth_send_bits@data
 12014  003072  C027  F023         	movff	SWSPI_send_word@data+1,SWSPI_Synth_send_bits@data+1
 12015  003076  C028  F024         	movff	SWSPI_send_word@data+2,SWSPI_Synth_send_bits@data+2
 12016  00307A  C029  F025         	movff	SWSPI_send_word@data+3,SWSPI_Synth_send_bits@data+3
 12017  00307E  502E               	movf	SWSPI_send_word@phrType,w,c
 12018  003080  EC7A  F016         	call	_SWSPI_Synth_send_bits
 12019                           
 12020                           ;SwSpiApp.c: 27: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 12021  003084  0E01               	movlw	1
 12022  003086  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 12023  003088  502E               	movf	SWSPI_send_word@phrType,w,c
 12024  00308A  ECF4  F01D         	call	_SwSpi_Set_Synth_Le_Pin
 12025                           
 12026                           ;SwSpiApp.c: 28: }
 12027  00308E  D02D               	goto	l607
 12028  003090                     l603:
 12029                           
 12030                           ;SwSpiApp.c: 29: else if(phrType == EXT_DAC)
 12031  003090  0E02               	movlw	2
 12032  003092  182E               	xorwf	SWSPI_send_word@phrType,w,c
 12033  003094  A4D8               	btfss	status,2,c
 12034  003096  D029               	goto	l607
 12035                           
 12036                           ;SwSpiApp.c: 30: {
 12037                           ;SwSpiApp.c: 31: SwSpi_Set_Dac_Sync_Pin(0);
 12038  003098  0E00               	movlw	0
 12039  00309A  ECB3  F020         	call	_SwSpi_Set_Dac_Sync_Pin
 12040                           
 12041                           ;SwSpiApp.c: 32: for(int idx = dataSize + 1; idx > 0; idx--)
 12042  00309E  0E01               	movlw	1
 12043  0030A0  242A               	addwf	SWSPI_send_word@dataSize,w,c
 12044  0030A2  6E2C               	movwf	SWSPI_send_word@idx,c
 12045  0030A4  6A2D               	clrf	SWSPI_send_word@idx+1,c
 12046  0030A6  0E00               	movlw	0
 12047  0030A8  222D               	addwfc	SWSPI_send_word@idx+1,f,c
 12048  0030AA                     l7689:
 12049  0030AA  BE2D               	btfsc	SWSPI_send_word@idx+1,7,c
 12050  0030AC  D01B               	goto	u7850
 12051  0030AE  502D               	movf	SWSPI_send_word@idx+1,w,c
 12052  0030B0  E103               	bnz	l7693
 12053  0030B2  042C               	decf	SWSPI_send_word@idx,w,c
 12054  0030B4  A0D8               	btfss	status,0,c
 12055  0030B6  D016               	goto	u7850
 12056  0030B8                     l7693:
 12057                           
 12058                           ;SwSpiApp.c: 33: {
 12059                           ;SwSpiApp.c: 34: uint8_t datac = make8(data, idx - 1);
 12060  0030B8  C026  F018         	movff	SWSPI_send_word@data,make8@data
 12061  0030BC  C027  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 12062  0030C0  C028  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 12063  0030C4  C029  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 12064  0030C8  042C               	decf	SWSPI_send_word@idx,w,c
 12065  0030CA  6E1C               	movwf	make8@dataLocation,c
 12066  0030CC  EC84  F01B         	call	_make8	;wreg free
 12067  0030D0  6E2B               	movwf	SWSPI_send_word@datac,c
 12068                           
 12069                           ;SwSpiApp.c: 35: SWSPI_DAC_send_bits(phrType, datac);
 12070  0030D2  C02B  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 12071  0030D6  502E               	movf	SWSPI_send_word@phrType,w,c
 12072  0030D8  EC0C  F01C         	call	_SWSPI_DAC_send_bits
 12073  0030DC  062C               	decf	SWSPI_send_word@idx,f,c
 12074  0030DE  A0D8               	btfss	status,0,c
 12075  0030E0  062D               	decf	SWSPI_send_word@idx+1,f,c
 12076  0030E2  D7E3               	goto	l7689
 12077  0030E4                     u7850:
 12078                           
 12079                           ;SwSpiApp.c: 36: }
 12080                           ;SwSpiApp.c: 37: SwSpi_Set_Dac_Sync_Pin(1);
 12081  0030E4  0E01               	movlw	1
 12082  0030E6  ECB3  F020         	call	_SwSpi_Set_Dac_Sync_Pin
 12083  0030EA                     l607:
 12084                           
 12085                           ;SwSpiApp.c: 38: }
 12086                           ;SwSpiApp.c: 40: (INTCONbits.GIE = 1);
 12087  0030EA  8EF2               	bsf	intcon,7,c	;volatile
 12088  0030EC  0012               	return		;funcret
 12089  0030EE                     __end_of_SWSPI_send_word:
 12090                           	opt stack 0
 12091                           tosu	equ	0xFFF
 12092                           tosh	equ	0xFFE
 12093                           tosl	equ	0xFFD
 12094                           pclath	equ	0xFFA
 12095                           tblptru	equ	0xFF8
 12096                           tblptrh	equ	0xFF7
 12097                           tblptrl	equ	0xFF6
 12098                           tablat	equ	0xFF5
 12099                           prodh	equ	0xFF4
 12100                           prodl	equ	0xFF3
 12101                           intcon	equ	0xFF2
 12102                           intcon2	equ	0xFF1
 12103                           postinc0	equ	0xFEE
 12104                           plusw0	equ	0xFEB
 12105                           wreg	equ	0xFE8
 12106                           indf1	equ	0xFE7
 12107                           postdec1	equ	0xFE5
 12108                           fsr1h	equ	0xFE2
 12109                           fsr1l	equ	0xFE1
 12110                           indf2	equ	0xFDF
 12111                           postinc2	equ	0xFDE
 12112                           postdec2	equ	0xFDD
 12113                           plusw2	equ	0xFDB
 12114                           fsr2h	equ	0xFDA
 12115                           fsr2l	equ	0xFD9
 12116                           status	equ	0xFD8
 12117                           
 12118 ;; *************** function _make8 *****************
 12119 ;; Defined at:
 12120 ;;		line 79 in file "SystemCommon.c"
 12121 ;; Parameters:    Size  Location     Type
 12122 ;;  data            4   23[COMRAM] unsigned long 
 12123 ;;  dataLocation    1   27[COMRAM] unsigned char 
 12124 ;; Auto vars:     Size  Location     Type
 12125 ;;		None
 12126 ;; Return value:  Size  Location     Type
 12127 ;;                  1    wreg      unsigned char 
 12128 ;; Registers used:
 12129 ;;		wreg, status,2, status,0
 12130 ;; Tracked objects:
 12131 ;;		On entry : 0/0
 12132 ;;		On exit  : 0/0
 12133 ;;		Unchanged: 0/0
 12134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12135 ;;      Params:         5       0       0       0       0       0       0
 12136 ;;      Locals:         0       0       0       0       0       0       0
 12137 ;;      Temps:          4       0       0       0       0       0       0
 12138 ;;      Totals:         9       0       0       0       0       0       0
 12139 ;;Total ram usage:        9 bytes
 12140 ;; Hardware stack levels used:    1
 12141 ;; Hardware stack levels required when called:    4
 12142 ;; This function calls:
 12143 ;;		Nothing
 12144 ;; This function is called by:
 12145 ;;		_FlashReadCondition
 12146 ;;		_DacReadValue
 12147 ;;		_SynthReadData
 12148 ;;		_SWSPI_send_word
 12149 ;;		_StoreIntInEeprom
 12150 ;; This function uses a non-reentrant model
 12151 ;;
 12152                           
 12153                           	psect	text67
 12154  003708                     __ptext67:
 12155                           	opt stack 0
 12156  003708                     _make8:
 12157                           	opt stack 22
 12158                           
 12159                           ;SystemCommon.c: 81: switch(dataLocation)
 12160                           
 12161                           ;incstack = 0
 12162  003708  D01F               	goto	l1371
 12163  00370A                     
 12164                           ;SystemCommon.c: 84: return (data & 0x000000ff);
 12165  00370A  5018               	movf	make8@data,w,c
 12166  00370C  0012               	return	
 12167  00370E                     
 12168                           ;SystemCommon.c: 87: return (data & 0x0000ff00) >> 8;
 12169  00370E  5019               	movf	make8@data+1,w,c
 12170  003710  0012               	return	
 12171  003712                     
 12172                           ;SystemCommon.c: 90: return (data & 0x00ff0000) >> 16;
 12173  003712  501A               	movf	make8@data+2,w,c
 12174  003714  0012               	return	
 12175  003716                     
 12176                           ;SystemCommon.c: 93: return (data & 0xff000000) >> 24;
 12177  003716  0E00               	movlw	0
 12178  003718  1418               	andwf	make8@data,w,c
 12179  00371A  6E1D               	movwf	??_make8& (0+255),c
 12180  00371C  0E00               	movlw	0
 12181  00371E  1419               	andwf	make8@data+1,w,c
 12182  003720  6E1E               	movwf	(??_make8+1)& (0+255),c
 12183  003722  0E00               	movlw	0
 12184  003724  141A               	andwf	make8@data+2,w,c
 12185  003726  6E1F               	movwf	(??_make8+2)& (0+255),c
 12186  003728  0EFF               	movlw	255
 12187  00372A  141B               	andwf	make8@data+3,w,c
 12188  00372C  6E20               	movwf	(??_make8+3)& (0+255),c
 12189  00372E  0E19               	movlw	25
 12190  003730  D005               	goto	u7560
 12191  003732                     u7565:
 12192  003732  90D8               	bcf	status,0,c
 12193  003734  3220               	rrcf	??_make8+3,f,c
 12194  003736  321F               	rrcf	??_make8+2,f,c
 12195  003738  321E               	rrcf	??_make8+1,f,c
 12196  00373A  321D               	rrcf	??_make8,f,c
 12197  00373C                     u7560:
 12198  00373C  2EE8               	decfsz	wreg,f,c
 12199  00373E  D7F9               	goto	u7565
 12200  003740  501D               	movf	??_make8,w,c
 12201  003742  0012               	return	
 12202  003744                     
 12203                           ;SystemCommon.c: 96: return (0);
 12204  003744  0E00               	movlw	0
 12205                           
 12206                           ;SystemCommon.c: 97: }
 12207  003746  0012               	return	
 12208  003748                     l1371:
 12209  003748  501C               	movf	make8@dataLocation,w,c
 12210                           
 12211                           ; Switch size 1, requested type "space"
 12212                           ; Number of cases is 4, Range of values is 0 to 3
 12213                           ; switch strategies available:
 12214                           ; Name         Instructions Cycles
 12215                           ; simple_byte           13     7 (average)
 12216                           ;	Chosen strategy is simple_byte
 12217  00374A  0A00               	xorlw	0	; case 0
 12218  00374C  B4D8               	btfsc	status,2,c
 12219  00374E  D7DD               	goto	l1372
 12220  003750  0A01               	xorlw	1	; case 1
 12221  003752  B4D8               	btfsc	status,2,c
 12222  003754  D7DC               	goto	l1374
 12223  003756  0A03               	xorlw	3	; case 2
 12224  003758  B4D8               	btfsc	status,2,c
 12225  00375A  D7DB               	goto	l1375
 12226  00375C  0A01               	xorlw	1	; case 3
 12227  00375E  B4D8               	btfsc	status,2,c
 12228  003760  D7DA               	goto	l1376
 12229  003762  D7F0               	goto	l1377
 12230  003764                     __end_of_make8:
 12231                           	opt stack 0
 12232                           tosu	equ	0xFFF
 12233                           tosh	equ	0xFFE
 12234                           tosl	equ	0xFFD
 12235                           pclath	equ	0xFFA
 12236                           tblptru	equ	0xFF8
 12237                           tblptrh	equ	0xFF7
 12238                           tblptrl	equ	0xFF6
 12239                           tablat	equ	0xFF5
 12240                           prodh	equ	0xFF4
 12241                           prodl	equ	0xFF3
 12242                           intcon	equ	0xFF2
 12243                           intcon2	equ	0xFF1
 12244                           postinc0	equ	0xFEE
 12245                           plusw0	equ	0xFEB
 12246                           wreg	equ	0xFE8
 12247                           indf1	equ	0xFE7
 12248                           postdec1	equ	0xFE5
 12249                           fsr1h	equ	0xFE2
 12250                           fsr1l	equ	0xFE1
 12251                           indf2	equ	0xFDF
 12252                           postinc2	equ	0xFDE
 12253                           postdec2	equ	0xFDD
 12254                           plusw2	equ	0xFDB
 12255                           fsr2h	equ	0xFDA
 12256                           fsr2l	equ	0xFD9
 12257                           status	equ	0xFD8
 12258                           
 12259 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 12260 ;; Defined at:
 12261 ;;		line 232 in file "SwSpiApp.c"
 12262 ;; Parameters:    Size  Location     Type
 12263 ;;  phrType         1    wreg     enum E1
 12264 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12265 ;; Auto vars:     Size  Location     Type
 12266 ;;  phrType         1   24[COMRAM] enum E1
 12267 ;; Return value:  Size  Location     Type
 12268 ;;                  1    wreg      void 
 12269 ;; Registers used:
 12270 ;;		wreg, status,2, status,0
 12271 ;; Tracked objects:
 12272 ;;		On entry : 0/0
 12273 ;;		On exit  : 0/0
 12274 ;;		Unchanged: 0/0
 12275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12276 ;;      Params:         1       0       0       0       0       0       0
 12277 ;;      Locals:         1       0       0       0       0       0       0
 12278 ;;      Temps:          0       0       0       0       0       0       0
 12279 ;;      Totals:         2       0       0       0       0       0       0
 12280 ;;Total ram usage:        2 bytes
 12281 ;; Hardware stack levels used:    1
 12282 ;; Hardware stack levels required when called:    4
 12283 ;; This function calls:
 12284 ;;		Nothing
 12285 ;; This function is called by:
 12286 ;;		_SWSPI_send_word
 12287 ;; This function uses a non-reentrant model
 12288 ;;
 12289                           
 12290                           	psect	text68
 12291  003BE8                     __ptext68:
 12292                           	opt stack 0
 12293  003BE8                     _SwSpi_Set_Synth_Le_Pin:
 12294                           	opt stack 22
 12295                           
 12296                           ;incstack = 0
 12297                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 12298  003BE8  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 12299                           
 12300                           ;SwSpiApp.c: 234: switch(phrType)
 12301  003BEA  D014               	goto	l715
 12302  003BEC                     
 12303                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 12304  003BEC  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12305  003BEE  A4D8               	btfss	status,2,c
 12306  003BF0  D002               	goto	l717
 12307                           
 12308                           ;SwSpiApp.c: 238: {
 12309                           ;SwSpiApp.c: 239: do { LATCbits.LATC2 = 1; } while(0);
 12310  003BF2  848B               	bsf	3979,2,c	;volatile
 12311                           
 12312                           ;SwSpiApp.c: 240: }
 12313  003BF4  0012               	return	
 12314  003BF6                     l717:
 12315                           
 12316                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 12317  003BF6  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12318  003BF8  A4D8               	btfss	status,2,c
 12319  003BFA  0012               	return	
 12320                           
 12321                           ;SwSpiApp.c: 242: {
 12322                           ;SwSpiApp.c: 243: do { LATCbits.LATC2 = 0; } while(0);
 12323  003BFC  948B               	bcf	3979,2,c	;volatile
 12324                           
 12325                           ;SwSpiApp.c: 244: }
 12326                           ;SwSpiApp.c: 245: break;
 12327  003BFE  0012               	return	
 12328  003C00                     
 12329                           ;SwSpiApp.c: 248: if(cPinMode == 1)
 12330  003C00  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12331  003C02  A4D8               	btfss	status,2,c
 12332  003C04  D002               	goto	l726
 12333                           
 12334                           ;SwSpiApp.c: 249: {
 12335                           ;SwSpiApp.c: 250: do { LATDbits.LATD3 = 1; } while(0);
 12336  003C06  868C               	bsf	3980,3,c	;volatile
 12337                           
 12338                           ;SwSpiApp.c: 251: }
 12339  003C08  0012               	return	
 12340  003C0A                     l726:
 12341                           
 12342                           ;SwSpiApp.c: 252: else if(cPinMode == 0)
 12343  003C0A  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12344  003C0C  A4D8               	btfss	status,2,c
 12345  003C0E  0012               	return	
 12346                           
 12347                           ;SwSpiApp.c: 253: {
 12348                           ;SwSpiApp.c: 254: do { LATDbits.LATD3 = 0; } while(0);
 12349  003C10  968C               	bcf	3980,3,c	;volatile
 12350                           
 12351                           ;SwSpiApp.c: 257: }
 12352                           
 12353                           ;SwSpiApp.c: 255: }
 12354                           ;SwSpiApp.c: 256: break;
 12355  003C12  0012               	return	
 12356  003C14                     l715:
 12357  003C14  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 12358                           
 12359                           ; Switch size 1, requested type "space"
 12360                           ; Number of cases is 2, Range of values is 0 to 1
 12361                           ; switch strategies available:
 12362                           ; Name         Instructions Cycles
 12363                           ; simple_byte            7     4 (average)
 12364                           ;	Chosen strategy is simple_byte
 12365  003C16  0A00               	xorlw	0	; case 0
 12366  003C18  B4D8               	btfsc	status,2,c
 12367  003C1A  D7E8               	goto	l716
 12368  003C1C  0A01               	xorlw	1	; case 1
 12369  003C1E  A4D8               	btfss	status,2,c
 12370  003C20  0012               	return	
 12371  003C22  D7EE               	goto	l725
 12372  003C24                     __end_of_SwSpi_Set_Synth_Le_Pin:
 12373                           	opt stack 0
 12374                           tosu	equ	0xFFF
 12375                           tosh	equ	0xFFE
 12376                           tosl	equ	0xFFD
 12377                           pclath	equ	0xFFA
 12378                           tblptru	equ	0xFF8
 12379                           tblptrh	equ	0xFF7
 12380                           tblptrl	equ	0xFF6
 12381                           tablat	equ	0xFF5
 12382                           prodh	equ	0xFF4
 12383                           prodl	equ	0xFF3
 12384                           intcon	equ	0xFF2
 12385                           intcon2	equ	0xFF1
 12386                           postinc0	equ	0xFEE
 12387                           plusw0	equ	0xFEB
 12388                           wreg	equ	0xFE8
 12389                           indf1	equ	0xFE7
 12390                           postdec1	equ	0xFE5
 12391                           fsr1h	equ	0xFE2
 12392                           fsr1l	equ	0xFE1
 12393                           indf2	equ	0xFDF
 12394                           postinc2	equ	0xFDE
 12395                           postdec2	equ	0xFDD
 12396                           plusw2	equ	0xFDB
 12397                           fsr2h	equ	0xFDA
 12398                           fsr2l	equ	0xFD9
 12399                           status	equ	0xFD8
 12400                           
 12401 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 12402 ;; Defined at:
 12403 ;;		line 260 in file "SwSpiApp.c"
 12404 ;; Parameters:    Size  Location     Type
 12405 ;;  cPinMode        1    wreg     unsigned char 
 12406 ;; Auto vars:     Size  Location     Type
 12407 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12408 ;; Return value:  Size  Location     Type
 12409 ;;                  1    wreg      void 
 12410 ;; Registers used:
 12411 ;;		wreg, status,2, status,0
 12412 ;; Tracked objects:
 12413 ;;		On entry : 0/0
 12414 ;;		On exit  : 0/0
 12415 ;;		Unchanged: 0/0
 12416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12417 ;;      Params:         0       0       0       0       0       0       0
 12418 ;;      Locals:         1       0       0       0       0       0       0
 12419 ;;      Temps:          0       0       0       0       0       0       0
 12420 ;;      Totals:         1       0       0       0       0       0       0
 12421 ;;Total ram usage:        1 bytes
 12422 ;; Hardware stack levels used:    1
 12423 ;; Hardware stack levels required when called:    4
 12424 ;; This function calls:
 12425 ;;		Nothing
 12426 ;; This function is called by:
 12427 ;;		_SWSPI_send_word
 12428 ;; This function uses a non-reentrant model
 12429 ;;
 12430                           
 12431                           	psect	text69
 12432  004166                     __ptext69:
 12433                           	opt stack 0
 12434  004166                     _SwSpi_Set_Dac_Sync_Pin:
 12435                           	opt stack 22
 12436                           
 12437                           ;incstack = 0
 12438                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 12439  004166  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 12440                           
 12441                           ;SwSpiApp.c: 262: switch(cPinMode)
 12442  004168  D004               	goto	l736
 12443  00416A                     
 12444                           ;SwSpiApp.c: 265: do { LATAbits.LATA2 = 0; } while(0);
 12445  00416A  9489               	bcf	3977,2,c	;volatile
 12446                           
 12447                           ;SwSpiApp.c: 266: break;
 12448  00416C  0012               	return	
 12449  00416E                     
 12450                           ;SwSpiApp.c: 269: do { LATAbits.LATA2 = 1; } while(0);
 12451  00416E  8489               	bsf	3977,2,c	;volatile
 12452                           
 12453                           ;SwSpiApp.c: 271: }
 12454                           
 12455                           ;SwSpiApp.c: 270: break;
 12456  004170  0012               	return	
 12457  004172                     l736:
 12458  004172  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 12459                           
 12460                           ; Switch size 1, requested type "space"
 12461                           ; Number of cases is 2, Range of values is 0 to 1
 12462                           ; switch strategies available:
 12463                           ; Name         Instructions Cycles
 12464                           ; simple_byte            7     4 (average)
 12465                           ;	Chosen strategy is simple_byte
 12466  004174  0A00               	xorlw	0	; case 0
 12467  004176  B4D8               	btfsc	status,2,c
 12468  004178  D7F8               	goto	l737
 12469  00417A  0A01               	xorlw	1	; case 1
 12470  00417C  A4D8               	btfss	status,2,c
 12471  00417E  0012               	return	
 12472  004180  D7F6               	goto	l741
 12473  004182                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 12474                           	opt stack 0
 12475                           tosu	equ	0xFFF
 12476                           tosh	equ	0xFFE
 12477                           tosl	equ	0xFFD
 12478                           pclath	equ	0xFFA
 12479                           tblptru	equ	0xFF8
 12480                           tblptrh	equ	0xFF7
 12481                           tblptrl	equ	0xFF6
 12482                           tablat	equ	0xFF5
 12483                           prodh	equ	0xFF4
 12484                           prodl	equ	0xFF3
 12485                           intcon	equ	0xFF2
 12486                           intcon2	equ	0xFF1
 12487                           postinc0	equ	0xFEE
 12488                           plusw0	equ	0xFEB
 12489                           wreg	equ	0xFE8
 12490                           indf1	equ	0xFE7
 12491                           postdec1	equ	0xFE5
 12492                           fsr1h	equ	0xFE2
 12493                           fsr1l	equ	0xFE1
 12494                           indf2	equ	0xFDF
 12495                           postinc2	equ	0xFDE
 12496                           postdec2	equ	0xFDD
 12497                           plusw2	equ	0xFDB
 12498                           fsr2h	equ	0xFDA
 12499                           fsr2l	equ	0xFD9
 12500                           status	equ	0xFD8
 12501                           
 12502 ;; *************** function _SWSPI_Synth_send_bits *****************
 12503 ;; Defined at:
 12504 ;;		line 67 in file "SwSpiApp.c"
 12505 ;; Parameters:    Size  Location     Type
 12506 ;;  phrType         1    wreg     enum E1
 12507 ;;  data            4   33[COMRAM] unsigned long 
 12508 ;; Auto vars:     Size  Location     Type
 12509 ;;  phrType         1   37[BANK0 ] enum E1
 12510 ;;  bitArray       32    0[BANK0 ] unsigned char [32]
 12511 ;;  mask            4   32[BANK0 ] unsigned long 
 12512 ;;  count           1   36[BANK0 ] unsigned char 
 12513 ;; Return value:  Size  Location     Type
 12514 ;;                  1    wreg      void 
 12515 ;; Registers used:
 12516 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12517 ;; Tracked objects:
 12518 ;;		On entry : 0/0
 12519 ;;		On exit  : 0/0
 12520 ;;		Unchanged: 0/0
 12521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12522 ;;      Params:         4       0       0       0       0       0       0
 12523 ;;      Locals:         0      38       0       0       0       0       0
 12524 ;;      Temps:          0       0       0       0       0       0       0
 12525 ;;      Totals:         4      38       0       0       0       0       0
 12526 ;;Total ram usage:       42 bytes
 12527 ;; Hardware stack levels used:    1
 12528 ;; Hardware stack levels required when called:    6
 12529 ;; This function calls:
 12530 ;;		_Make32bitsArray
 12531 ;;		_SwSpi_Clk_Pin
 12532 ;;		_SwSpi_Data_Pin
 12533 ;;		_ZeroBitsArray
 12534 ;; This function is called by:
 12535 ;;		_SWSPI_send_word
 12536 ;; This function uses a non-reentrant model
 12537 ;;
 12538                           
 12539                           	psect	text70
 12540  002CF4                     __ptext70:
 12541                           	opt stack 0
 12542  002CF4                     _SWSPI_Synth_send_bits:
 12543                           	opt stack 20
 12544                           
 12545                           ;incstack = 0
 12546                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 12547  002CF4  0100               	movlb	0	; () banked
 12548  002CF6  6F85               	movwf	SWSPI_Synth_send_bits@phrType& (0+255),b
 12549                           
 12550                           ;SwSpiApp.c: 69: uint8_t count;
 12551                           ;SwSpiApp.c: 70: uint32_t mask = 0x1;
 12552  002CF8  0E01               	movlw	1
 12553  002CFA  0100               	movlb	0	; () banked
 12554  002CFC  6F80               	movwf	SWSPI_Synth_send_bits@mask& (0+255),b
 12555  002CFE  0E00               	movlw	0
 12556  002D00  6F81               	movwf	(SWSPI_Synth_send_bits@mask+1)& (0+255),b
 12557  002D02  0E00               	movlw	0
 12558  002D04  6F82               	movwf	(SWSPI_Synth_send_bits@mask+2)& (0+255),b
 12559  002D06  0E00               	movlw	0
 12560  002D08  6F83               	movwf	(SWSPI_Synth_send_bits@mask+3)& (0+255),b
 12561                           
 12562                           ; BSR set to: 0
 12563                           ;SwSpiApp.c: 72: bool bitArray[32];
 12564                           ;SwSpiApp.c: 73: ZeroBitsArray(bitArray);
 12565  002D0A  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 12566  002D0C  6E20               	movwf	ZeroBitsArray@array,c
 12567  002D0E  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12568  002D10  6E21               	movwf	ZeroBitsArray@array+1,c
 12569  002D12  ECA4  F020         	call	_ZeroBitsArray	;wreg free
 12570                           
 12571                           ;SwSpiApp.c: 75: Make32bitsArray(bitArray, data);
 12572  002D16  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 12573  002D18  6E18               	movwf	Make32bitsArray@array,c
 12574  002D1A  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12575  002D1C  6E19               	movwf	Make32bitsArray@array+1,c
 12576  002D1E  C022  F01A         	movff	SWSPI_Synth_send_bits@data,Make32bitsArray@data
 12577  002D22  C023  F01B         	movff	SWSPI_Synth_send_bits@data+1,Make32bitsArray@data+1
 12578  002D26  C024  F01C         	movff	SWSPI_Synth_send_bits@data+2,Make32bitsArray@data+2
 12579  002D2A  C025  F01D         	movff	SWSPI_Synth_send_bits@data+3,Make32bitsArray@data+3
 12580  002D2E  ECE0  F01B         	call	_Make32bitsArray	;wreg free
 12581                           
 12582                           ;SwSpiApp.c: 77: for (count = 0; count <= 31 ; count++)
 12583  002D32  0E00               	movlw	0
 12584  002D34  0100               	movlb	0	; () banked
 12585  002D36  6F84               	movwf	SWSPI_Synth_send_bits@count& (0+255),b
 12586  002D38                     l7523:
 12587                           
 12588                           ; BSR set to: 0
 12589  002D38  0E1F               	movlw	31
 12590  002D3A  6584               	cpfsgt	SWSPI_Synth_send_bits@count& (0+255),b
 12591  002D3C  D001               	goto	l621
 12592  002D3E  D026               	goto	u7630
 12593  002D40                     l621:
 12594                           
 12595                           ; BSR set to: 0
 12596                           ;SwSpiApp.c: 78: {
 12597                           ;SwSpiApp.c: 80: SwSpi_Clk_Pin(phrType, 0);
 12598                           
 12599                           ; BSR set to: 0
 12600  002D40  0E00               	movlw	0
 12601  002D42  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12602  002D44  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12603  002D46  EC63  F01C         	call	_SwSpi_Clk_Pin
 12604                           
 12605                           ;SwSpiApp.c: 82: if (bitArray[count])
 12606  002D4A  0100               	movlb	0	; () banked
 12607  002D4C  5184               	movf	SWSPI_Synth_send_bits@count& (0+255),w,b
 12608  002D4E  0D01               	mullw	1
 12609  002D50  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 12610  002D52  24F3               	addwf	prodl,w,c
 12611  002D54  6ED9               	movwf	fsr2l,c
 12612  002D56  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12613  002D58  20F4               	addwfc	prodh,w,c
 12614  002D5A  6EDA               	movwf	fsr2h,c
 12615  002D5C  50DF               	movf	indf2,w,c
 12616  002D5E  B4D8               	btfsc	status,2,c
 12617  002D60  D006               	goto	l623
 12618                           
 12619                           ; BSR set to: 0
 12620                           ;SwSpiApp.c: 83: {
 12621                           ;SwSpiApp.c: 84: SwSpi_Data_Pin(phrType, 1);
 12622  002D62  0E01               	movlw	1
 12623  002D64  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12624  002D66  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12625  002D68  EC38  F01C         	call	_SwSpi_Data_Pin
 12626                           
 12627                           ;SwSpiApp.c: 85: }
 12628  002D6C  D006               	goto	l624
 12629  002D6E                     l623:
 12630                           
 12631                           ;SwSpiApp.c: 86: else
 12632                           ;SwSpiApp.c: 87: {
 12633                           ;SwSpiApp.c: 88: SwSpi_Data_Pin(phrType, 0);
 12634  002D6E  0E00               	movlw	0
 12635  002D70  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12636  002D72  0100               	movlb	0	; () banked
 12637  002D74  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12638  002D76  EC38  F01C         	call	_SwSpi_Data_Pin
 12639  002D7A                     l624:
 12640                           
 12641                           ;SwSpiApp.c: 89: }
 12642                           ;SwSpiApp.c: 91: SwSpi_Clk_Pin(phrType, 1);
 12643  002D7A  0E01               	movlw	1
 12644  002D7C  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12645  002D7E  0100               	movlb	0	; () banked
 12646  002D80  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12647  002D82  EC63  F01C         	call	_SwSpi_Clk_Pin
 12648  002D86  0100               	movlb	0	; () banked
 12649  002D88  2B84               	incf	SWSPI_Synth_send_bits@count& (0+255),f,b
 12650  002D8A  D7D6               	goto	l7523
 12651  002D8C                     u7630:
 12652                           
 12653                           ; BSR set to: 0
 12654                           ;SwSpiApp.c: 92: }
 12655                           ;SwSpiApp.c: 94: _delay((unsigned long)((50)*(8000000/4000000.0)));
 12656                           
 12657                           ; BSR set to: 0
 12658  002D8C  0E21               	movlw	33
 12659  002D8E                     u9367:
 12660  002D8E  2EE8               	decfsz	wreg,f,c
 12661  002D90  D7FE               	bra	u9367
 12662  002D92  F000               	nop	
 12663                           
 12664                           ;SwSpiApp.c: 95: SwSpi_Data_Pin(phrType, 0);
 12665  002D94  0E00               	movlw	0
 12666  002D96  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12667  002D98  0100               	movlb	0	; () banked
 12668  002D9A  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12669  002D9C  EC38  F01C         	call	_SwSpi_Data_Pin
 12670                           
 12671                           ;SwSpiApp.c: 96: SwSpi_Clk_Pin(phrType, 0);
 12672  002DA0  0E00               	movlw	0
 12673  002DA2  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12674  002DA4  0100               	movlb	0	; () banked
 12675  002DA6  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12676  002DA8  EC63  F01C         	call	_SwSpi_Clk_Pin
 12677  002DAC  0012               	return		;funcret
 12678  002DAE                     __end_of_SWSPI_Synth_send_bits:
 12679                           	opt stack 0
 12680                           tosu	equ	0xFFF
 12681                           tosh	equ	0xFFE
 12682                           tosl	equ	0xFFD
 12683                           pclath	equ	0xFFA
 12684                           tblptru	equ	0xFF8
 12685                           tblptrh	equ	0xFF7
 12686                           tblptrl	equ	0xFF6
 12687                           tablat	equ	0xFF5
 12688                           prodh	equ	0xFF4
 12689                           prodl	equ	0xFF3
 12690                           intcon	equ	0xFF2
 12691                           intcon2	equ	0xFF1
 12692                           postinc0	equ	0xFEE
 12693                           plusw0	equ	0xFEB
 12694                           wreg	equ	0xFE8
 12695                           indf1	equ	0xFE7
 12696                           postdec1	equ	0xFE5
 12697                           fsr1h	equ	0xFE2
 12698                           fsr1l	equ	0xFE1
 12699                           indf2	equ	0xFDF
 12700                           postinc2	equ	0xFDE
 12701                           postdec2	equ	0xFDD
 12702                           plusw2	equ	0xFDB
 12703                           fsr2h	equ	0xFDA
 12704                           fsr2l	equ	0xFD9
 12705                           status	equ	0xFD8
 12706                           
 12707 ;; *************** function _ZeroBitsArray *****************
 12708 ;; Defined at:
 12709 ;;		line 29 in file "SystemCommon.c"
 12710 ;; Parameters:    Size  Location     Type
 12711 ;;  array           2   31[COMRAM] PTR unsigned char 
 12712 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 12713 ;; Auto vars:     Size  Location     Type
 12714 ;;		None
 12715 ;; Return value:  Size  Location     Type
 12716 ;;                  1    wreg      void 
 12717 ;; Registers used:
 12718 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12719 ;; Tracked objects:
 12720 ;;		On entry : 0/0
 12721 ;;		On exit  : 0/0
 12722 ;;		Unchanged: 0/0
 12723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12724 ;;      Params:         2       0       0       0       0       0       0
 12725 ;;      Locals:         0       0       0       0       0       0       0
 12726 ;;      Temps:          0       0       0       0       0       0       0
 12727 ;;      Totals:         2       0       0       0       0       0       0
 12728 ;;Total ram usage:        2 bytes
 12729 ;; Hardware stack levels used:    1
 12730 ;; Hardware stack levels required when called:    5
 12731 ;; This function calls:
 12732 ;;		_memset
 12733 ;; This function is called by:
 12734 ;;		_SWSPI_Synth_send_bits
 12735 ;; This function uses a non-reentrant model
 12736 ;;
 12737                           
 12738                           	psect	text71
 12739  004148                     __ptext71:
 12740                           	opt stack 0
 12741  004148                     _ZeroBitsArray:
 12742                           	opt stack 20
 12743                           
 12744                           ;SystemCommon.c: 31: memset(array, 0x0, 32);
 12745                           
 12746                           ;incstack = 0
 12747  004148  C020  F018         	movff	ZeroBitsArray@array,memset@p1
 12748  00414C  C021  F019         	movff	ZeroBitsArray@array+1,memset@p1+1
 12749  004150  0E00               	movlw	0
 12750  004152  6E1B               	movwf	memset@c+1,c
 12751  004154  0E00               	movlw	0
 12752  004156  6E1A               	movwf	memset@c,c
 12753  004158  0E00               	movlw	0
 12754  00415A  6E1D               	movwf	memset@n+1,c
 12755  00415C  0E20               	movlw	32
 12756  00415E  6E1C               	movwf	memset@n,c
 12757  004160  EC97  F01F         	call	_memset	;wreg free
 12758  004164  0012               	return		;funcret
 12759  004166                     __end_of_ZeroBitsArray:
 12760                           	opt stack 0
 12761                           tosu	equ	0xFFF
 12762                           tosh	equ	0xFFE
 12763                           tosl	equ	0xFFD
 12764                           pclath	equ	0xFFA
 12765                           tblptru	equ	0xFF8
 12766                           tblptrh	equ	0xFF7
 12767                           tblptrl	equ	0xFF6
 12768                           tablat	equ	0xFF5
 12769                           prodh	equ	0xFF4
 12770                           prodl	equ	0xFF3
 12771                           intcon	equ	0xFF2
 12772                           intcon2	equ	0xFF1
 12773                           postinc0	equ	0xFEE
 12774                           plusw0	equ	0xFEB
 12775                           wreg	equ	0xFE8
 12776                           indf1	equ	0xFE7
 12777                           postdec1	equ	0xFE5
 12778                           fsr1h	equ	0xFE2
 12779                           fsr1l	equ	0xFE1
 12780                           indf2	equ	0xFDF
 12781                           postinc2	equ	0xFDE
 12782                           postdec2	equ	0xFDD
 12783                           plusw2	equ	0xFDB
 12784                           fsr2h	equ	0xFDA
 12785                           fsr2l	equ	0xFD9
 12786                           status	equ	0xFD8
 12787                           
 12788 ;; *************** function _memset *****************
 12789 ;; Defined at:
 12790 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 12791 ;; Parameters:    Size  Location     Type
 12792 ;;  p1              2   23[COMRAM] PTR void 
 12793 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@
      +TxMsg(18), 
 12794 ;;		 -> DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), 
 12795 ;;		 -> SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 12796 ;;  c               2   25[COMRAM] int 
 12797 ;;  n               2   27[COMRAM] unsigned int 
 12798 ;; Auto vars:     Size  Location     Type
 12799 ;;  p               2   29[COMRAM] PTR unsigned char 
 12800 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@
      +TxMsg(18), 
 12801 ;;		 -> DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), 
 12802 ;;		 -> SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 12803 ;; Return value:  Size  Location     Type
 12804 ;;                  2   23[COMRAM] PTR void 
 12805 ;; Registers used:
 12806 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12807 ;; Tracked objects:
 12808 ;;		On entry : 0/0
 12809 ;;		On exit  : 0/0
 12810 ;;		Unchanged: 0/0
 12811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12812 ;;      Params:         6       0       0       0       0       0       0
 12813 ;;      Locals:         2       0       0       0       0       0       0
 12814 ;;      Temps:          0       0       0       0       0       0       0
 12815 ;;      Totals:         8       0       0       0       0       0       0
 12816 ;;Total ram usage:        8 bytes
 12817 ;; Hardware stack levels used:    1
 12818 ;; Hardware stack levels required when called:    4
 12819 ;; This function calls:
 12820 ;;		Nothing
 12821 ;; This function is called by:
 12822 ;;		_ZeroArray
 12823 ;;		_ZeroBitsArray
 12824 ;; This function uses a non-reentrant model
 12825 ;;
 12826                           
 12827                           	psect	text72
 12828  003F2E                     __ptext72:
 12829                           	opt stack 0
 12830  003F2E                     _memset:
 12831                           	opt stack 24
 12832                           
 12833                           ;incstack = 0
 12834  003F2E  C018  F01E         	movff	memset@p1,memset@p
 12835  003F32  C019  F01F         	movff	memset@p1+1,memset@p+1
 12836  003F36  D008               	goto	l1972
 12837  003F38                     l7093:
 12838  003F38  C01E  FFD9         	movff	memset@p,fsr2l
 12839  003F3C  C01F  FFDA         	movff	memset@p+1,fsr2h
 12840  003F40  C01A  FFDF         	movff	memset@c,indf2
 12841  003F44  4A1E               	infsnz	memset@p,f,c
 12842  003F46  2A1F               	incf	memset@p+1,f,c
 12843  003F48                     l1972:
 12844  003F48  061C               	decf	memset@n,f,c
 12845  003F4A  A0D8               	btfss	status,0,c
 12846  003F4C  061D               	decf	memset@n+1,f,c
 12847  003F4E  281C               	incf	memset@n,w,c
 12848  003F50  E1F3               	bnz	l7093
 12849  003F52  281D               	incf	memset@n+1,w,c
 12850  003F54  B4D8               	btfsc	status,2,c
 12851  003F56  0012               	return	
 12852  003F58  D7EF               	goto	l1973
 12853  003F5A                     __end_of_memset:
 12854                           	opt stack 0
 12855                           tosu	equ	0xFFF
 12856                           tosh	equ	0xFFE
 12857                           tosl	equ	0xFFD
 12858                           pclath	equ	0xFFA
 12859                           tblptru	equ	0xFF8
 12860                           tblptrh	equ	0xFF7
 12861                           tblptrl	equ	0xFF6
 12862                           tablat	equ	0xFF5
 12863                           prodh	equ	0xFF4
 12864                           prodl	equ	0xFF3
 12865                           intcon	equ	0xFF2
 12866                           intcon2	equ	0xFF1
 12867                           postinc0	equ	0xFEE
 12868                           plusw0	equ	0xFEB
 12869                           wreg	equ	0xFE8
 12870                           indf1	equ	0xFE7
 12871                           postdec1	equ	0xFE5
 12872                           fsr1h	equ	0xFE2
 12873                           fsr1l	equ	0xFE1
 12874                           indf2	equ	0xFDF
 12875                           postinc2	equ	0xFDE
 12876                           postdec2	equ	0xFDD
 12877                           plusw2	equ	0xFDB
 12878                           fsr2h	equ	0xFDA
 12879                           fsr2l	equ	0xFD9
 12880                           status	equ	0xFD8
 12881                           
 12882 ;; *************** function _Make32bitsArray *****************
 12883 ;; Defined at:
 12884 ;;		line 100 in file "SystemCommon.c"
 12885 ;; Parameters:    Size  Location     Type
 12886 ;;  array           2   23[COMRAM] PTR unsigned char 
 12887 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 12888 ;;  data            4   25[COMRAM] unsigned long 
 12889 ;; Auto vars:     Size  Location     Type
 12890 ;;  idx             2   31[COMRAM] int 
 12891 ;; Return value:  Size  Location     Type
 12892 ;;                  1    wreg      void 
 12893 ;; Registers used:
 12894 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12895 ;; Tracked objects:
 12896 ;;		On entry : 0/0
 12897 ;;		On exit  : 0/0
 12898 ;;		Unchanged: 0/0
 12899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12900 ;;      Params:         6       0       0       0       0       0       0
 12901 ;;      Locals:         2       0       0       0       0       0       0
 12902 ;;      Temps:          2       0       0       0       0       0       0
 12903 ;;      Totals:        10       0       0       0       0       0       0
 12904 ;;Total ram usage:       10 bytes
 12905 ;; Hardware stack levels used:    1
 12906 ;; Hardware stack levels required when called:    4
 12907 ;; This function calls:
 12908 ;;		Nothing
 12909 ;; This function is called by:
 12910 ;;		_SWSPI_Synth_send_bits
 12911 ;; This function uses a non-reentrant model
 12912 ;;
 12913                           
 12914                           	psect	text73
 12915  0037C0                     __ptext73:
 12916                           	opt stack 0
 12917  0037C0                     _Make32bitsArray:
 12918                           	opt stack 21
 12919                           
 12920                           ;SystemCommon.c: 102: for(int idx = 0; idx <= 32; idx++)
 12921                           
 12922                           ;incstack = 0
 12923  0037C0  0E00               	movlw	0
 12924  0037C2  6E21               	movwf	Make32bitsArray@idx+1,c
 12925  0037C4  0E00               	movlw	0
 12926  0037C6  6E20               	movwf	Make32bitsArray@idx,c
 12927  0037C8                     l7311:
 12928  0037C8  BE21               	btfsc	Make32bitsArray@idx+1,7,c
 12929  0037CA  D006               	goto	l1381
 12930  0037CC  5021               	movf	Make32bitsArray@idx+1,w,c
 12931  0037CE  E123               	bnz	l1383
 12932  0037D0  0E21               	movlw	33
 12933  0037D2  5C20               	subwf	Make32bitsArray@idx,w,c
 12934  0037D4  B0D8               	btfsc	status,0,c
 12935  0037D6  0012               	return	
 12936  0037D8                     l1381:
 12937                           
 12938                           ;SystemCommon.c: 103: {
 12939                           ;SystemCommon.c: 104: array[32 - idx - 1] = data % 2;
 12940  0037D8  0E01               	movlw	1
 12941  0037DA  2420               	addwf	Make32bitsArray@idx,w,c
 12942  0037DC  6E1E               	movwf	??_Make32bitsArray& (0+255),c
 12943  0037DE  0E00               	movlw	0
 12944  0037E0  2021               	addwfc	Make32bitsArray@idx+1,w,c
 12945  0037E2  6E1F               	movwf	(??_Make32bitsArray+1)& (0+255),c
 12946  0037E4  1E1E               	comf	??_Make32bitsArray,f,c
 12947  0037E6  1E1F               	comf	??_Make32bitsArray+1,f,c
 12948  0037E8  4A1E               	infsnz	??_Make32bitsArray,f,c
 12949  0037EA  2A1F               	incf	??_Make32bitsArray+1,f,c
 12950  0037EC  0E20               	movlw	32
 12951  0037EE  261E               	addwf	??_Make32bitsArray,f,c
 12952  0037F0  0E00               	movlw	0
 12953  0037F2  221F               	addwfc	??_Make32bitsArray+1,f,c
 12954  0037F4  501E               	movf	??_Make32bitsArray,w,c
 12955  0037F6  2418               	addwf	Make32bitsArray@array,w,c
 12956  0037F8  6ED9               	movwf	fsr2l,c
 12957  0037FA  501F               	movf	??_Make32bitsArray+1,w,c
 12958  0037FC  2019               	addwfc	Make32bitsArray@array+1,w,c
 12959  0037FE  6EDA               	movwf	fsr2h,c
 12960  003800  501A               	movf	Make32bitsArray@data,w,c
 12961  003802  0B01               	andlw	1
 12962  003804  6EDF               	movwf	indf2,c
 12963                           
 12964                           ;SystemCommon.c: 105: data /= 2;
 12965  003806  90D8               	bcf	status,0,c
 12966  003808  321D               	rrcf	Make32bitsArray@data+3,f,c
 12967  00380A  321C               	rrcf	Make32bitsArray@data+2,f,c
 12968  00380C  321B               	rrcf	Make32bitsArray@data+1,f,c
 12969  00380E  321A               	rrcf	Make32bitsArray@data,f,c
 12970  003810  4A20               	infsnz	Make32bitsArray@idx,f,c
 12971  003812  2A21               	incf	Make32bitsArray@idx+1,f,c
 12972  003814  D7D9               	goto	l7311
 12973  003816                     l1383:
 12974  003816  0012               	return		;funcret
 12975  003818                     __end_of_Make32bitsArray:
 12976                           	opt stack 0
 12977                           tosu	equ	0xFFF
 12978                           tosh	equ	0xFFE
 12979                           tosl	equ	0xFFD
 12980                           pclath	equ	0xFFA
 12981                           tblptru	equ	0xFF8
 12982                           tblptrh	equ	0xFF7
 12983                           tblptrl	equ	0xFF6
 12984                           tablat	equ	0xFF5
 12985                           prodh	equ	0xFF4
 12986                           prodl	equ	0xFF3
 12987                           intcon	equ	0xFF2
 12988                           intcon2	equ	0xFF1
 12989                           postinc0	equ	0xFEE
 12990                           plusw0	equ	0xFEB
 12991                           wreg	equ	0xFE8
 12992                           indf1	equ	0xFE7
 12993                           postdec1	equ	0xFE5
 12994                           fsr1h	equ	0xFE2
 12995                           fsr1l	equ	0xFE1
 12996                           indf2	equ	0xFDF
 12997                           postinc2	equ	0xFDE
 12998                           postdec2	equ	0xFDD
 12999                           plusw2	equ	0xFDB
 13000                           fsr2h	equ	0xFDA
 13001                           fsr2l	equ	0xFD9
 13002                           status	equ	0xFD8
 13003                           
 13004 ;; *************** function _SWSPI_DAC_send_bits *****************
 13005 ;; Defined at:
 13006 ;;		line 43 in file "SwSpiApp.c"
 13007 ;; Parameters:    Size  Location     Type
 13008 ;;  phrType         1    wreg     enum E1
 13009 ;;  data            1   25[COMRAM] unsigned char 
 13010 ;; Auto vars:     Size  Location     Type
 13011 ;;  phrType         1   27[COMRAM] enum E1
 13012 ;;  count           1   26[COMRAM] unsigned char 
 13013 ;; Return value:  Size  Location     Type
 13014 ;;                  1    wreg      void 
 13015 ;; Registers used:
 13016 ;;		wreg, status,2, status,0, cstack
 13017 ;; Tracked objects:
 13018 ;;		On entry : 0/0
 13019 ;;		On exit  : 0/0
 13020 ;;		Unchanged: 0/0
 13021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13022 ;;      Params:         1       0       0       0       0       0       0
 13023 ;;      Locals:         2       0       0       0       0       0       0
 13024 ;;      Temps:          0       0       0       0       0       0       0
 13025 ;;      Totals:         3       0       0       0       0       0       0
 13026 ;;Total ram usage:        3 bytes
 13027 ;; Hardware stack levels used:    1
 13028 ;; Hardware stack levels required when called:    5
 13029 ;; This function calls:
 13030 ;;		_SwSpi_Clk_Pin
 13031 ;;		_SwSpi_Data_Pin
 13032 ;; This function is called by:
 13033 ;;		_SWSPI_send_word
 13034 ;; This function uses a non-reentrant model
 13035 ;;
 13036                           
 13037                           	psect	text74
 13038  003818                     __ptext74:
 13039                           	opt stack 0
 13040  003818                     _SWSPI_DAC_send_bits:
 13041                           	opt stack 21
 13042                           
 13043                           ;incstack = 0
 13044                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 13045  003818  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 13046                           
 13047                           ;SwSpiApp.c: 45: uint8_t count;
 13048                           ;SwSpiApp.c: 46: for (count = 8; count ; count--, data <<= 1)
 13049  00381A  0E08               	movlw	8
 13050  00381C  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 13051  00381E  D01A               	goto	l613
 13052  003820                     
 13053                           ;SwSpiApp.c: 47: {
 13054                           ;SwSpiApp.c: 48: SwSpi_Clk_Pin(phrType, 1);
 13055  003820  0E01               	movlw	1
 13056  003822  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13057  003824  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13058  003826  EC63  F01C         	call	_SwSpi_Clk_Pin
 13059                           
 13060                           ;SwSpiApp.c: 50: if (data & 0X80)
 13061  00382A  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 13062  00382C  D006               	goto	l615
 13063                           
 13064                           ;SwSpiApp.c: 51: {
 13065                           ;SwSpiApp.c: 53: SwSpi_Data_Pin(phrType, 1);
 13066  00382E  0E01               	movlw	1
 13067  003830  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13068  003832  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13069  003834  EC38  F01C         	call	_SwSpi_Data_Pin
 13070                           
 13071                           ;SwSpiApp.c: 54: }
 13072  003838  D005               	goto	l616
 13073  00383A                     l615:
 13074                           
 13075                           ;SwSpiApp.c: 55: else
 13076                           ;SwSpiApp.c: 56: {
 13077                           ;SwSpiApp.c: 57: SwSpi_Data_Pin(phrType, 0);
 13078  00383A  0E00               	movlw	0
 13079  00383C  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13080  00383E  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13081  003840  EC38  F01C         	call	_SwSpi_Data_Pin
 13082  003844                     l616:
 13083                           
 13084                           ;SwSpiApp.c: 58: }
 13085                           ;SwSpiApp.c: 60: SwSpi_Clk_Pin(phrType, 0);
 13086  003844  0E00               	movlw	0
 13087  003846  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13088  003848  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13089  00384A  EC63  F01C         	call	_SwSpi_Clk_Pin
 13090  00384E  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 13091  003850  90D8               	bcf	status,0,c
 13092  003852  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 13093  003854                     l613:
 13094  003854  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 13095  003856  A4D8               	btfss	status,2,c
 13096  003858  D7E3               	goto	l614
 13097                           
 13098                           ;SwSpiApp.c: 61: }
 13099                           ;SwSpiApp.c: 63: SwSpi_Data_Pin(phrType, 0);
 13100  00385A  0E00               	movlw	0
 13101  00385C  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13102  00385E  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13103  003860  EC38  F01C         	call	_SwSpi_Data_Pin
 13104                           
 13105                           ;SwSpiApp.c: 64: SwSpi_Clk_Pin(phrType, 0);
 13106  003864  0E00               	movlw	0
 13107  003866  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13108  003868  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13109  00386A  EC63  F01C         	call	_SwSpi_Clk_Pin
 13110  00386E  0012               	return		;funcret
 13111  003870                     __end_of_SWSPI_DAC_send_bits:
 13112                           	opt stack 0
 13113                           tosu	equ	0xFFF
 13114                           tosh	equ	0xFFE
 13115                           tosl	equ	0xFFD
 13116                           pclath	equ	0xFFA
 13117                           tblptru	equ	0xFF8
 13118                           tblptrh	equ	0xFF7
 13119                           tblptrl	equ	0xFF6
 13120                           tablat	equ	0xFF5
 13121                           prodh	equ	0xFF4
 13122                           prodl	equ	0xFF3
 13123                           intcon	equ	0xFF2
 13124                           intcon2	equ	0xFF1
 13125                           postinc0	equ	0xFEE
 13126                           plusw0	equ	0xFEB
 13127                           wreg	equ	0xFE8
 13128                           indf1	equ	0xFE7
 13129                           postdec1	equ	0xFE5
 13130                           fsr1h	equ	0xFE2
 13131                           fsr1l	equ	0xFE1
 13132                           indf2	equ	0xFDF
 13133                           postinc2	equ	0xFDE
 13134                           postdec2	equ	0xFDD
 13135                           plusw2	equ	0xFDB
 13136                           fsr2h	equ	0xFDA
 13137                           fsr2l	equ	0xFD9
 13138                           status	equ	0xFD8
 13139                           
 13140 ;; *************** function _SwSpi_Data_Pin *****************
 13141 ;; Defined at:
 13142 ;;		line 103 in file "SwSpiApp.c"
 13143 ;; Parameters:    Size  Location     Type
 13144 ;;  phrType         1    wreg     enum E1
 13145 ;;  cPinMode        1   23[COMRAM] unsigned char 
 13146 ;; Auto vars:     Size  Location     Type
 13147 ;;  phrType         1   24[COMRAM] enum E1
 13148 ;; Return value:  Size  Location     Type
 13149 ;;                  1    wreg      void 
 13150 ;; Registers used:
 13151 ;;		wreg, status,2, status,0
 13152 ;; Tracked objects:
 13153 ;;		On entry : 0/0
 13154 ;;		On exit  : 0/0
 13155 ;;		Unchanged: 0/0
 13156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13157 ;;      Params:         1       0       0       0       0       0       0
 13158 ;;      Locals:         1       0       0       0       0       0       0
 13159 ;;      Temps:          0       0       0       0       0       0       0
 13160 ;;      Totals:         2       0       0       0       0       0       0
 13161 ;;Total ram usage:        2 bytes
 13162 ;; Hardware stack levels used:    1
 13163 ;; Hardware stack levels required when called:    4
 13164 ;; This function calls:
 13165 ;;		Nothing
 13166 ;; This function is called by:
 13167 ;;		_SWSPI_DAC_send_bits
 13168 ;;		_SWSPI_Synth_send_bits
 13169 ;; This function uses a non-reentrant model
 13170 ;;
 13171                           
 13172                           	psect	text75
 13173  003870                     __ptext75:
 13174                           	opt stack 0
 13175  003870                     _SwSpi_Data_Pin:
 13176                           	opt stack 21
 13177                           
 13178                           ;incstack = 0
 13179                           ;SwSpi_Data_Pin@phrType stored from wreg
 13180  003870  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 13181                           
 13182                           ;SwSpiApp.c: 105: switch(phrType)
 13183  003872  D01E               	goto	l628
 13184  003874                     
 13185                           ;SwSpiApp.c: 108: if(cPinMode == 1)
 13186  003874  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 13187  003876  A4D8               	btfss	status,2,c
 13188  003878  D002               	goto	l630
 13189                           
 13190                           ;SwSpiApp.c: 109: {
 13191                           ;SwSpiApp.c: 110: do { LATDbits.LATD0 = 1; } while(0);
 13192  00387A  808C               	bsf	3980,0,c	;volatile
 13193                           
 13194                           ;SwSpiApp.c: 111: }
 13195  00387C  0012               	return	
 13196  00387E                     l630:
 13197                           
 13198                           ;SwSpiApp.c: 112: else if (cPinMode == 0)
 13199  00387E  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 13200  003880  A4D8               	btfss	status,2,c
 13201  003882  0012               	return	
 13202                           
 13203                           ;SwSpiApp.c: 113: {
 13204                           ;SwSpiApp.c: 114: do { LATDbits.LATD0 = 0; } while(0);
 13205  003884  908C               	bcf	3980,0,c	;volatile
 13206                           
 13207                           ;SwSpiApp.c: 115: }
 13208                           ;SwSpiApp.c: 116: break;
 13209  003886  0012               	return	
 13210  003888                     
 13211                           ;SwSpiApp.c: 119: if(cPinMode == 1)
 13212  003888  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 13213  00388A  A4D8               	btfss	status,2,c
 13214  00388C  D002               	goto	l639
 13215                           
 13216                           ;SwSpiApp.c: 120: {
 13217                           ;SwSpiApp.c: 121: do { LATCbits.LATC5 = 1; } while(0);
 13218  00388E  8A8B               	bsf	3979,5,c	;volatile
 13219                           
 13220                           ;SwSpiApp.c: 122: }
 13221  003890  0012               	return	
 13222  003892                     l639:
 13223                           
 13224                           ;SwSpiApp.c: 123: else if (cPinMode == 0)
 13225  003892  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 13226  003894  A4D8               	btfss	status,2,c
 13227  003896  0012               	return	
 13228                           
 13229                           ;SwSpiApp.c: 124: {
 13230                           ;SwSpiApp.c: 125: do { LATCbits.LATC5 = 0; } while(0);
 13231  003898  9A8B               	bcf	3979,5,c	;volatile
 13232                           
 13233                           ;SwSpiApp.c: 126: }
 13234                           ;SwSpiApp.c: 127: break;
 13235  00389A  0012               	return	
 13236  00389C                     
 13237                           ;SwSpiApp.c: 130: if(cPinMode == 1)
 13238  00389C  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 13239  00389E  A4D8               	btfss	status,2,c
 13240  0038A0  D002               	goto	l647
 13241                           
 13242                           ;SwSpiApp.c: 131: {
 13243                           ;SwSpiApp.c: 132: do { LATAbits.LATA4 = 1; } while(0);
 13244  0038A2  8889               	bsf	3977,4,c	;volatile
 13245                           
 13246                           ;SwSpiApp.c: 133: }
 13247  0038A4  0012               	return	
 13248  0038A6                     l647:
 13249                           
 13250                           ;SwSpiApp.c: 134: else if (cPinMode == 0)
 13251  0038A6  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 13252  0038A8  A4D8               	btfss	status,2,c
 13253  0038AA  0012               	return	
 13254                           
 13255                           ;SwSpiApp.c: 135: {
 13256                           ;SwSpiApp.c: 136: do { LATAbits.LATA4 = 0; } while(0);
 13257  0038AC  9889               	bcf	3977,4,c	;volatile
 13258                           
 13259                           ;SwSpiApp.c: 139: }
 13260                           
 13261                           ;SwSpiApp.c: 137: }
 13262                           ;SwSpiApp.c: 138: break;
 13263  0038AE  0012               	return	
 13264  0038B0                     l628:
 13265  0038B0  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 13266                           
 13267                           ; Switch size 1, requested type "space"
 13268                           ; Number of cases is 3, Range of values is 0 to 2
 13269                           ; switch strategies available:
 13270                           ; Name         Instructions Cycles
 13271                           ; simple_byte           10     6 (average)
 13272                           ;	Chosen strategy is simple_byte
 13273  0038B2  0A00               	xorlw	0	; case 0
 13274  0038B4  B4D8               	btfsc	status,2,c
 13275  0038B6  D7DE               	goto	l629
 13276  0038B8  0A01               	xorlw	1	; case 1
 13277  0038BA  B4D8               	btfsc	status,2,c
 13278  0038BC  D7E5               	goto	l638
 13279  0038BE  0A03               	xorlw	3	; case 2
 13280  0038C0  A4D8               	btfss	status,2,c
 13281  0038C2  0012               	return	
 13282  0038C4  D7EB               	goto	l646
 13283  0038C6                     __end_of_SwSpi_Data_Pin:
 13284                           	opt stack 0
 13285                           tosu	equ	0xFFF
 13286                           tosh	equ	0xFFE
 13287                           tosl	equ	0xFFD
 13288                           pclath	equ	0xFFA
 13289                           tblptru	equ	0xFF8
 13290                           tblptrh	equ	0xFF7
 13291                           tblptrl	equ	0xFF6
 13292                           tablat	equ	0xFF5
 13293                           prodh	equ	0xFF4
 13294                           prodl	equ	0xFF3
 13295                           intcon	equ	0xFF2
 13296                           intcon2	equ	0xFF1
 13297                           postinc0	equ	0xFEE
 13298                           plusw0	equ	0xFEB
 13299                           wreg	equ	0xFE8
 13300                           indf1	equ	0xFE7
 13301                           postdec1	equ	0xFE5
 13302                           fsr1h	equ	0xFE2
 13303                           fsr1l	equ	0xFE1
 13304                           indf2	equ	0xFDF
 13305                           postinc2	equ	0xFDE
 13306                           postdec2	equ	0xFDD
 13307                           plusw2	equ	0xFDB
 13308                           fsr2h	equ	0xFDA
 13309                           fsr2l	equ	0xFD9
 13310                           status	equ	0xFD8
 13311                           
 13312 ;; *************** function _SwSpi_Clk_Pin *****************
 13313 ;; Defined at:
 13314 ;;		line 142 in file "SwSpiApp.c"
 13315 ;; Parameters:    Size  Location     Type
 13316 ;;  phrType         1    wreg     enum E1
 13317 ;;  cPinMode        1   23[COMRAM] unsigned char 
 13318 ;; Auto vars:     Size  Location     Type
 13319 ;;  phrType         1   24[COMRAM] enum E1
 13320 ;; Return value:  Size  Location     Type
 13321 ;;                  1    wreg      void 
 13322 ;; Registers used:
 13323 ;;		wreg, status,2, status,0
 13324 ;; Tracked objects:
 13325 ;;		On entry : 0/0
 13326 ;;		On exit  : 0/0
 13327 ;;		Unchanged: 0/0
 13328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13329 ;;      Params:         1       0       0       0       0       0       0
 13330 ;;      Locals:         1       0       0       0       0       0       0
 13331 ;;      Temps:          0       0       0       0       0       0       0
 13332 ;;      Totals:         2       0       0       0       0       0       0
 13333 ;;Total ram usage:        2 bytes
 13334 ;; Hardware stack levels used:    1
 13335 ;; Hardware stack levels required when called:    4
 13336 ;; This function calls:
 13337 ;;		Nothing
 13338 ;; This function is called by:
 13339 ;;		_SWSPI_DAC_send_bits
 13340 ;;		_SWSPI_Synth_send_bits
 13341 ;;		_SwSpi_Synth_Toggle_Clock
 13342 ;; This function uses a non-reentrant model
 13343 ;;
 13344                           
 13345                           	psect	text76
 13346  0038C6                     __ptext76:
 13347                           	opt stack 0
 13348  0038C6                     _SwSpi_Clk_Pin:
 13349                           	opt stack 21
 13350                           
 13351                           ;incstack = 0
 13352                           ;SwSpi_Clk_Pin@phrType stored from wreg
 13353  0038C6  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 13354                           
 13355                           ;SwSpiApp.c: 144: switch(phrType)
 13356  0038C8  D01E               	goto	l657
 13357  0038CA                     
 13358                           ;SwSpiApp.c: 147: if(cPinMode == 1)
 13359  0038CA  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 13360  0038CC  A4D8               	btfss	status,2,c
 13361  0038CE  D002               	goto	l659
 13362                           
 13363                           ;SwSpiApp.c: 148: {
 13364                           ;SwSpiApp.c: 149: do { LATCbits.LATC3 = 1; } while(0);
 13365  0038D0  868B               	bsf	3979,3,c	;volatile
 13366                           
 13367                           ;SwSpiApp.c: 150: }
 13368  0038D2  0012               	return	
 13369  0038D4                     l659:
 13370                           
 13371                           ;SwSpiApp.c: 151: else if (cPinMode == 0)
 13372  0038D4  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 13373  0038D6  A4D8               	btfss	status,2,c
 13374  0038D8  0012               	return	
 13375                           
 13376                           ;SwSpiApp.c: 152: {
 13377                           ;SwSpiApp.c: 153: do { LATCbits.LATC3 = 0; } while(0);
 13378  0038DA  968B               	bcf	3979,3,c	;volatile
 13379                           
 13380                           ;SwSpiApp.c: 154: }
 13381                           ;SwSpiApp.c: 155: break;
 13382  0038DC  0012               	return	
 13383  0038DE                     
 13384                           ;SwSpiApp.c: 158: if(cPinMode == 1)
 13385  0038DE  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 13386  0038E0  A4D8               	btfss	status,2,c
 13387  0038E2  D002               	goto	l668
 13388                           
 13389                           ;SwSpiApp.c: 159: {
 13390                           ;SwSpiApp.c: 160: do { LATCbits.LATC4 = 1; } while(0);
 13391  0038E4  888B               	bsf	3979,4,c	;volatile
 13392                           
 13393                           ;SwSpiApp.c: 161: }
 13394  0038E6  0012               	return	
 13395  0038E8                     l668:
 13396                           
 13397                           ;SwSpiApp.c: 162: else if (cPinMode == 0)
 13398  0038E8  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 13399  0038EA  A4D8               	btfss	status,2,c
 13400  0038EC  0012               	return	
 13401                           
 13402                           ;SwSpiApp.c: 163: {
 13403                           ;SwSpiApp.c: 164: do { LATCbits.LATC4 = 0; } while(0);
 13404  0038EE  988B               	bcf	3979,4,c	;volatile
 13405                           
 13406                           ;SwSpiApp.c: 165: }
 13407                           ;SwSpiApp.c: 167: break;
 13408  0038F0  0012               	return	
 13409  0038F2                     
 13410                           ;SwSpiApp.c: 170: if(cPinMode == 1)
 13411  0038F2  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 13412  0038F4  A4D8               	btfss	status,2,c
 13413  0038F6  D002               	goto	l676
 13414                           
 13415                           ;SwSpiApp.c: 171: {
 13416                           ;SwSpiApp.c: 172: do { LATAbits.LATA3 = 1; } while(0);
 13417  0038F8  8689               	bsf	3977,3,c	;volatile
 13418                           
 13419                           ;SwSpiApp.c: 173: }
 13420  0038FA  0012               	return	
 13421  0038FC                     l676:
 13422                           
 13423                           ;SwSpiApp.c: 174: else if (cPinMode == 0)
 13424  0038FC  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 13425  0038FE  A4D8               	btfss	status,2,c
 13426  003900  0012               	return	
 13427                           
 13428                           ;SwSpiApp.c: 175: {
 13429                           ;SwSpiApp.c: 176: do { LATAbits.LATA3 = 0; } while(0);
 13430  003902  9689               	bcf	3977,3,c	;volatile
 13431                           
 13432                           ;SwSpiApp.c: 179: }
 13433                           
 13434                           ;SwSpiApp.c: 177: }
 13435                           ;SwSpiApp.c: 178: break;
 13436  003904  0012               	return	
 13437  003906                     l657:
 13438  003906  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 13439                           
 13440                           ; Switch size 1, requested type "space"
 13441                           ; Number of cases is 3, Range of values is 0 to 2
 13442                           ; switch strategies available:
 13443                           ; Name         Instructions Cycles
 13444                           ; simple_byte           10     6 (average)
 13445                           ;	Chosen strategy is simple_byte
 13446  003908  0A00               	xorlw	0	; case 0
 13447  00390A  B4D8               	btfsc	status,2,c
 13448  00390C  D7DE               	goto	l658
 13449  00390E  0A01               	xorlw	1	; case 1
 13450  003910  B4D8               	btfsc	status,2,c
 13451  003912  D7E5               	goto	l667
 13452  003914  0A03               	xorlw	3	; case 2
 13453  003916  A4D8               	btfss	status,2,c
 13454  003918  0012               	return	
 13455  00391A  D7EB               	goto	l675
 13456  00391C                     __end_of_SwSpi_Clk_Pin:
 13457                           	opt stack 0
 13458                           tosu	equ	0xFFF
 13459                           tosh	equ	0xFFE
 13460                           tosl	equ	0xFFD
 13461                           pclath	equ	0xFFA
 13462                           tblptru	equ	0xFF8
 13463                           tblptrh	equ	0xFF7
 13464                           tblptrl	equ	0xFF6
 13465                           tablat	equ	0xFF5
 13466                           prodh	equ	0xFF4
 13467                           prodl	equ	0xFF3
 13468                           intcon	equ	0xFF2
 13469                           intcon2	equ	0xFF1
 13470                           postinc0	equ	0xFEE
 13471                           plusw0	equ	0xFEB
 13472                           wreg	equ	0xFE8
 13473                           indf1	equ	0xFE7
 13474                           postdec1	equ	0xFE5
 13475                           fsr1h	equ	0xFE2
 13476                           fsr1l	equ	0xFE1
 13477                           indf2	equ	0xFDF
 13478                           postinc2	equ	0xFDE
 13479                           postdec2	equ	0xFDD
 13480                           plusw2	equ	0xFDB
 13481                           fsr2h	equ	0xFDA
 13482                           fsr2l	equ	0xFD9
 13483                           status	equ	0xFD8
 13484                           
 13485 ;; *************** function _ReadIntFromEeprom *****************
 13486 ;; Defined at:
 13487 ;;		line 118 in file "SystemCommon.c"
 13488 ;; Parameters:    Size  Location     Type
 13489 ;;  address         1    wreg     unsigned char 
 13490 ;;  numOfByes       2   81[BANK0 ] int 
 13491 ;; Auto vars:     Size  Location     Type
 13492 ;;  address         1   98[BANK0 ] unsigned char 
 13493 ;;  base            4   88[BANK0 ] unsigned long 
 13494 ;;  idx             1  103[BANK0 ] unsigned char 
 13495 ;;  retVal          4   99[BANK0 ] unsigned long 
 13496 ;; Return value:  Size  Location     Type
 13497 ;;                  4   81[BANK0 ] unsigned long 
 13498 ;; Registers used:
 13499 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13500 ;; Tracked objects:
 13501 ;;		On entry : 0/0
 13502 ;;		On exit  : 0/0
 13503 ;;		Unchanged: 0/0
 13504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13505 ;;      Params:         0       4       0       0       0       0       0
 13506 ;;      Locals:         0      16       0       0       0       0       0
 13507 ;;      Temps:          0       3       0       0       0       0       0
 13508 ;;      Totals:         0      23       0       0       0       0       0
 13509 ;;Total ram usage:       23 bytes
 13510 ;; Hardware stack levels used:    1
 13511 ;; Hardware stack levels required when called:    9
 13512 ;; This function calls:
 13513 ;;		_EepromRead
 13514 ;;		___awtoft
 13515 ;;		___fttol
 13516 ;;		___lmul
 13517 ;;		_pow
 13518 ;; This function is called by:
 13519 ;;		_DacInit
 13520 ;;		_DacReadValue
 13521 ;;		_InitSynth
 13522 ;;		_SynthReadData
 13523 ;; This function uses a non-reentrant model
 13524 ;;
 13525                           
 13526                           	psect	text77
 13527  00200A                     __ptext77:
 13528                           	opt stack 0
 13529  00200A                     _ReadIntFromEeprom:
 13530                           	opt stack 18
 13531                           
 13532                           ;incstack = 0
 13533                           ;ReadIntFromEeprom@address stored from wreg
 13534  00200A  0100               	movlb	0	; () banked
 13535  00200C  6FC2               	movwf	ReadIntFromEeprom@address& (0+255),b
 13536                           
 13537                           ;SystemCommon.c: 120: uint32_t retVal = 0x00;
 13538  00200E  0E00               	movlw	0
 13539  002010  0100               	movlb	0	; () banked
 13540  002012  6FC3               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 13541  002014  0E00               	movlw	0
 13542  002016  6FC4               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 13543  002018  0E00               	movlw	0
 13544  00201A  6FC5               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 13545  00201C  0E00               	movlw	0
 13546  00201E  6FC6               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 13547                           
 13548                           ; BSR set to: 0
 13549                           ;SystemCommon.c: 121: address -= numOfByes;
 13550  002020  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13551  002022  5FC2               	subwf	ReadIntFromEeprom@address& (0+255),f,b
 13552                           
 13553                           ; BSR set to: 0
 13554                           ;SystemCommon.c: 123: for(uint8_t idx = 0; idx < numOfByes; idx++)
 13555  002024  0E00               	movlw	0
 13556  002026  6FC7               	movwf	ReadIntFromEeprom@idx& (0+255),b
 13557  002028  D06D               	goto	l1392
 13558  00202A                     
 13559                           ; BSR set to: 0
 13560                           ;SystemCommon.c: 124: {
 13561                           ;SystemCommon.c: 125: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 13562                           
 13563                           ; BSR set to: 0
 13564  00202A  51C7               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 13565  00202C  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 13566  00202E  6BB6               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 13567  002030  0E01               	movlw	1
 13568  002032  27B5               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 13569  002034  0E00               	movlw	0
 13570  002036  23B6               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13571  002038  1FB5               	comf	??_ReadIntFromEeprom& (0+255),f,b
 13572  00203A  1FB6               	comf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13573  00203C  4BB5               	infsnz	??_ReadIntFromEeprom& (0+255),f,b
 13574  00203E  2BB6               	incf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13575  002040  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13576  002042  27B5               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 13577  002044  51B2               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 13578  002046  23B6               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13579  002048  90D8               	bcf	status,0,c
 13580  00204A  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13581  00204C  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13582  00204E  90D8               	bcf	status,0,c
 13583  002050  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13584  002052  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13585  002054  90D8               	bcf	status,0,c
 13586  002056  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13587  002058  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13588  00205A  C0B5  F020         	movff	??_ReadIntFromEeprom,___awtoft@c
 13589  00205E  C0B6  F021         	movff	??_ReadIntFromEeprom+1,___awtoft@c+1
 13590  002062  EC4A  F01E         	call	___awtoft	;wreg free
 13591  002066  C020  F0BC         	movff	?___awtoft,_ReadIntFromEeprom$3540
 13592  00206A  C021  F0BD         	movff	?___awtoft+1,_ReadIntFromEeprom$3540+1
 13593  00206E  C022  F0BE         	movff	?___awtoft+2,_ReadIntFromEeprom$3540+2
 13594                           
 13595                           ;SystemCommon.c: 124: {
 13596                           ;SystemCommon.c: 125: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 13597  002072  C0BC  F0A3         	movff	_ReadIntFromEeprom$3540,pow@y
 13598  002076  C0BD  F0A4         	movff	_ReadIntFromEeprom$3540+1,pow@y+1
 13599  00207A  C0BE  F0A5         	movff	_ReadIntFromEeprom$3540+2,pow@y+2
 13600  00207E  0E00               	movlw	0
 13601  002080  0100               	movlb	0	; () banked
 13602  002082  6FA0               	movwf	pow@x& (0+255),b
 13603  002084  0E00               	movlw	0
 13604  002086  6FA1               	movwf	(pow@x+1)& (0+255),b
 13605  002088  0E40               	movlw	64
 13606  00208A  6FA2               	movwf	(pow@x+2)& (0+255),b
 13607  00208C  ECF2  F00D         	call	_pow	;wreg free
 13608  002090  C0A0  F0BF         	movff	?_pow,_ReadIntFromEeprom$3541
 13609  002094  C0A1  F0C0         	movff	?_pow+1,_ReadIntFromEeprom$3541+1
 13610  002098  C0A2  F0C1         	movff	?_pow+2,_ReadIntFromEeprom$3541+2
 13611                           
 13612                           ;SystemCommon.c: 124: {
 13613                           ;SystemCommon.c: 125: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 13614  00209C  C0BF  F078         	movff	_ReadIntFromEeprom$3541,___fttol@f1
 13615  0020A0  C0C0  F079         	movff	_ReadIntFromEeprom$3541+1,___fttol@f1+1
 13616  0020A4  C0C1  F07A         	movff	_ReadIntFromEeprom$3541+2,___fttol@f1+2
 13617  0020A8  EC18  F012         	call	___fttol	;wreg free
 13618  0020AC  C078  F0B8         	movff	?___fttol,ReadIntFromEeprom@base
 13619  0020B0  C079  F0B9         	movff	?___fttol+1,ReadIntFromEeprom@base+1
 13620  0020B4  C07A  F0BA         	movff	?___fttol+2,ReadIntFromEeprom@base+2
 13621  0020B8  C07B  F0BB         	movff	?___fttol+3,ReadIntFromEeprom@base+3
 13622                           
 13623                           ;SystemCommon.c: 126: retVal = retVal | EepromRead(address + idx) * base;
 13624  0020BC  0100               	movlb	0	; () banked
 13625  0020BE  51C2               	movf	ReadIntFromEeprom@address& (0+255),w,b
 13626  0020C0  25C7               	addwf	ReadIntFromEeprom@idx& (0+255),w,b
 13627  0020C2  EC68  F021         	call	_EepromRead
 13628  0020C6  0100               	movlb	0	; () banked
 13629  0020C8  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 13630  0020CA  51B5               	movf	??_ReadIntFromEeprom& (0+255),w,b
 13631  0020CC  6E1A               	movwf	___lmul@multiplier,c
 13632  0020CE  6A1B               	clrf	___lmul@multiplier+1,c
 13633  0020D0  6A1C               	clrf	___lmul@multiplier+2,c
 13634  0020D2  6A1D               	clrf	___lmul@multiplier+3,c
 13635  0020D4  C0B8  F01E         	movff	ReadIntFromEeprom@base,___lmul@multiplicand
 13636  0020D8  C0B9  F01F         	movff	ReadIntFromEeprom@base+1,___lmul@multiplicand+1
 13637  0020DC  C0BA  F020         	movff	ReadIntFromEeprom@base+2,___lmul@multiplicand+2
 13638  0020E0  C0BB  F021         	movff	ReadIntFromEeprom@base+3,___lmul@multiplicand+3
 13639  0020E4  EC8E  F01C         	call	___lmul	;wreg free
 13640  0020E8  0100               	movlb	0	; () banked
 13641  0020EA  51C3               	movf	ReadIntFromEeprom@retVal& (0+255),w,b
 13642  0020EC  101A               	iorwf	?___lmul,w,c
 13643  0020EE  6FC3               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 13644  0020F0  51C4               	movf	(ReadIntFromEeprom@retVal+1)& (0+255),w,b
 13645  0020F2  101B               	iorwf	?___lmul+1,w,c
 13646  0020F4  6FC4               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 13647  0020F6  51C5               	movf	(ReadIntFromEeprom@retVal+2)& (0+255),w,b
 13648  0020F8  101C               	iorwf	?___lmul+2,w,c
 13649  0020FA  6FC5               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 13650  0020FC  51C6               	movf	(ReadIntFromEeprom@retVal+3)& (0+255),w,b
 13651  0020FE  101D               	iorwf	?___lmul+3,w,c
 13652  002100  6FC6               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 13653                           
 13654                           ; BSR set to: 0
 13655  002102  2BC7               	incf	ReadIntFromEeprom@idx& (0+255),f,b
 13656  002104                     l1392:
 13657                           
 13658                           ; BSR set to: 0
 13659                           
 13660                           ; BSR set to: 0
 13661  002104  51C7               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 13662  002106  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 13663  002108  6BB6               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 13664  00210A  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13665  00210C  5DB5               	subwf	??_ReadIntFromEeprom& (0+255),w,b
 13666  00210E  51B6               	movf	(??_ReadIntFromEeprom+1)& (0+255),w,b
 13667  002110  0A80               	xorlw	128
 13668  002112  6FB7               	movwf	(??_ReadIntFromEeprom+2)& (0+255),b
 13669  002114  51B2               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 13670  002116  0A80               	xorlw	128
 13671  002118  59B7               	subwfb	(??_ReadIntFromEeprom+2)& (0+255),w,b
 13672  00211A  A0D8               	btfss	status,0,c
 13673  00211C  D786               	goto	l1393
 13674                           
 13675                           ; BSR set to: 0
 13676                           ;SystemCommon.c: 127: }
 13677                           ;SystemCommon.c: 128: return retVal;
 13678  00211E  C0C3  F0B1         	movff	ReadIntFromEeprom@retVal,?_ReadIntFromEeprom
 13679  002122  C0C4  F0B2         	movff	ReadIntFromEeprom@retVal+1,?_ReadIntFromEeprom+1
 13680  002126  C0C5  F0B3         	movff	ReadIntFromEeprom@retVal+2,?_ReadIntFromEeprom+2
 13681  00212A  C0C6  F0B4         	movff	ReadIntFromEeprom@retVal+3,?_ReadIntFromEeprom+3
 13682                           
 13683                           ; BSR set to: 0
 13684  00212E  0012               	return		;funcret
 13685  002130                     __end_of_ReadIntFromEeprom:
 13686                           	opt stack 0
 13687                           tosu	equ	0xFFF
 13688                           tosh	equ	0xFFE
 13689                           tosl	equ	0xFFD
 13690                           pclath	equ	0xFFA
 13691                           tblptru	equ	0xFF8
 13692                           tblptrh	equ	0xFF7
 13693                           tblptrl	equ	0xFF6
 13694                           tablat	equ	0xFF5
 13695                           prodh	equ	0xFF4
 13696                           prodl	equ	0xFF3
 13697                           intcon	equ	0xFF2
 13698                           intcon2	equ	0xFF1
 13699                           postinc0	equ	0xFEE
 13700                           plusw0	equ	0xFEB
 13701                           wreg	equ	0xFE8
 13702                           indf1	equ	0xFE7
 13703                           postdec1	equ	0xFE5
 13704                           fsr1h	equ	0xFE2
 13705                           fsr1l	equ	0xFE1
 13706                           indf2	equ	0xFDF
 13707                           postinc2	equ	0xFDE
 13708                           postdec2	equ	0xFDD
 13709                           plusw2	equ	0xFDB
 13710                           fsr2h	equ	0xFDA
 13711                           fsr2l	equ	0xFD9
 13712                           status	equ	0xFD8
 13713                           
 13714 ;; *************** function ___lmul *****************
 13715 ;; Defined at:
 13716 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 13717 ;; Parameters:    Size  Location     Type
 13718 ;;  multiplier      4   25[COMRAM] unsigned long 
 13719 ;;  multiplicand    4   29[COMRAM] unsigned long 
 13720 ;; Auto vars:     Size  Location     Type
 13721 ;;  product         4   33[COMRAM] unsigned long 
 13722 ;; Return value:  Size  Location     Type
 13723 ;;                  4   25[COMRAM] unsigned long 
 13724 ;; Registers used:
 13725 ;;		wreg, status,2, status,0
 13726 ;; Tracked objects:
 13727 ;;		On entry : 0/0
 13728 ;;		On exit  : 0/0
 13729 ;;		Unchanged: 0/0
 13730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13731 ;;      Params:         8       0       0       0       0       0       0
 13732 ;;      Locals:         4       0       0       0       0       0       0
 13733 ;;      Temps:          0       0       0       0       0       0       0
 13734 ;;      Totals:        12       0       0       0       0       0       0
 13735 ;;Total ram usage:       12 bytes
 13736 ;; Hardware stack levels used:    1
 13737 ;; Hardware stack levels required when called:    4
 13738 ;; This function calls:
 13739 ;;		Nothing
 13740 ;; This function is called by:
 13741 ;;		_ReadIntFromEeprom
 13742 ;;		_strtol
 13743 ;; This function uses a non-reentrant model
 13744 ;;
 13745                           
 13746                           	psect	text78
 13747  00391C                     __ptext78:
 13748                           	opt stack 0
 13749  00391C                     ___lmul:
 13750                           	opt stack 21
 13751                           
 13752                           ; BSR set to: 0
 13753                           ;incstack = 0
 13754  00391C  0E00               	movlw	0
 13755  00391E  6E22               	movwf	___lmul@product,c
 13756  003920  0E00               	movlw	0
 13757  003922  6E23               	movwf	___lmul@product+1,c
 13758  003924  0E00               	movlw	0
 13759  003926  6E24               	movwf	___lmul@product+2,c
 13760  003928  0E00               	movlw	0
 13761  00392A  6E25               	movwf	___lmul@product+3,c
 13762  00392C  A01A               	btfss	___lmul@multiplier,0,c
 13763  00392E  D008               	goto	l1553
 13764  003930  501E               	movf	___lmul@multiplicand,w,c
 13765  003932  2622               	addwf	___lmul@product,f,c
 13766  003934  501F               	movf	___lmul@multiplicand+1,w,c
 13767  003936  2223               	addwfc	___lmul@product+1,f,c
 13768  003938  5020               	movf	___lmul@multiplicand+2,w,c
 13769  00393A  2224               	addwfc	___lmul@product+2,f,c
 13770  00393C  5021               	movf	___lmul@multiplicand+3,w,c
 13771  00393E  2225               	addwfc	___lmul@product+3,f,c
 13772  003940                     l1553:
 13773  003940  90D8               	bcf	status,0,c
 13774  003942  361E               	rlcf	___lmul@multiplicand,f,c
 13775  003944  361F               	rlcf	___lmul@multiplicand+1,f,c
 13776  003946  3620               	rlcf	___lmul@multiplicand+2,f,c
 13777  003948  3621               	rlcf	___lmul@multiplicand+3,f,c
 13778  00394A  90D8               	bcf	status,0,c
 13779  00394C  321D               	rrcf	___lmul@multiplier+3,f,c
 13780  00394E  321C               	rrcf	___lmul@multiplier+2,f,c
 13781  003950  321B               	rrcf	___lmul@multiplier+1,f,c
 13782  003952  321A               	rrcf	___lmul@multiplier,f,c
 13783  003954  501A               	movf	___lmul@multiplier,w,c
 13784  003956  101B               	iorwf	___lmul@multiplier+1,w,c
 13785  003958  101C               	iorwf	___lmul@multiplier+2,w,c
 13786  00395A  101D               	iorwf	___lmul@multiplier+3,w,c
 13787  00395C  A4D8               	btfss	status,2,c
 13788  00395E  D7E6               	goto	l1552
 13789  003960  C022  F01A         	movff	___lmul@product,?___lmul
 13790  003964  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 13791  003968  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 13792  00396C  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 13793  003970  0012               	return		;funcret
 13794  003972                     __end_of___lmul:
 13795                           	opt stack 0
 13796                           tosu	equ	0xFFF
 13797                           tosh	equ	0xFFE
 13798                           tosl	equ	0xFFD
 13799                           pclath	equ	0xFFA
 13800                           tblptru	equ	0xFF8
 13801                           tblptrh	equ	0xFF7
 13802                           tblptrl	equ	0xFF6
 13803                           tablat	equ	0xFF5
 13804                           prodh	equ	0xFF4
 13805                           prodl	equ	0xFF3
 13806                           intcon	equ	0xFF2
 13807                           intcon2	equ	0xFF1
 13808                           postinc0	equ	0xFEE
 13809                           plusw0	equ	0xFEB
 13810                           wreg	equ	0xFE8
 13811                           indf1	equ	0xFE7
 13812                           postdec1	equ	0xFE5
 13813                           fsr1h	equ	0xFE2
 13814                           fsr1l	equ	0xFE1
 13815                           indf2	equ	0xFDF
 13816                           postinc2	equ	0xFDE
 13817                           postdec2	equ	0xFDD
 13818                           plusw2	equ	0xFDB
 13819                           fsr2h	equ	0xFDA
 13820                           fsr2l	equ	0xFD9
 13821                           status	equ	0xFD8
 13822                           
 13823 ;; *************** function _EepromRead *****************
 13824 ;; Defined at:
 13825 ;;		line 217 in file "FlashApp.c"
 13826 ;; Parameters:    Size  Location     Type
 13827 ;;  address         1    wreg     unsigned char 
 13828 ;; Auto vars:     Size  Location     Type
 13829 ;;  address         1   24[COMRAM] unsigned char 
 13830 ;; Return value:  Size  Location     Type
 13831 ;;                  1    wreg      unsigned char 
 13832 ;; Registers used:
 13833 ;;		wreg, status,2, cstack
 13834 ;; Tracked objects:
 13835 ;;		On entry : 0/0
 13836 ;;		On exit  : 0/0
 13837 ;;		Unchanged: 0/0
 13838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13839 ;;      Params:         0       0       0       0       0       0       0
 13840 ;;      Locals:         1       0       0       0       0       0       0
 13841 ;;      Temps:          0       0       0       0       0       0       0
 13842 ;;      Totals:         1       0       0       0       0       0       0
 13843 ;;Total ram usage:        1 bytes
 13844 ;; Hardware stack levels used:    1
 13845 ;; Hardware stack levels required when called:    5
 13846 ;; This function calls:
 13847 ;;		_DATAEE_ReadByte
 13848 ;; This function is called by:
 13849 ;;		_ReadIntFromEeprom
 13850 ;; This function uses a non-reentrant model
 13851 ;;
 13852                           
 13853                           	psect	text79
 13854  0042D0                     __ptext79:
 13855                           	opt stack 0
 13856  0042D0                     _EepromRead:
 13857                           	opt stack 21
 13858                           
 13859                           ;incstack = 0
 13860                           ;EepromRead@address stored from wreg
 13861  0042D0  6E19               	movwf	EepromRead@address,c
 13862                           
 13863                           ;FlashApp.c: 219: return DATAEE_ReadByte(address);
 13864  0042D2  5019               	movf	EepromRead@address,w,c
 13865  0042D4  ECFA  F020         	call	_DATAEE_ReadByte
 13866  0042D8  0012               	return	
 13867  0042DA                     __end_of_EepromRead:
 13868                           	opt stack 0
 13869                           tosu	equ	0xFFF
 13870                           tosh	equ	0xFFE
 13871                           tosl	equ	0xFFD
 13872                           pclath	equ	0xFFA
 13873                           tblptru	equ	0xFF8
 13874                           tblptrh	equ	0xFF7
 13875                           tblptrl	equ	0xFF6
 13876                           tablat	equ	0xFF5
 13877                           prodh	equ	0xFF4
 13878                           prodl	equ	0xFF3
 13879                           intcon	equ	0xFF2
 13880                           intcon2	equ	0xFF1
 13881                           postinc0	equ	0xFEE
 13882                           plusw0	equ	0xFEB
 13883                           wreg	equ	0xFE8
 13884                           indf1	equ	0xFE7
 13885                           postdec1	equ	0xFE5
 13886                           fsr1h	equ	0xFE2
 13887                           fsr1l	equ	0xFE1
 13888                           indf2	equ	0xFDF
 13889                           postinc2	equ	0xFDE
 13890                           postdec2	equ	0xFDD
 13891                           plusw2	equ	0xFDB
 13892                           fsr2h	equ	0xFDA
 13893                           fsr2l	equ	0xFD9
 13894                           status	equ	0xFD8
 13895                           
 13896 ;; *************** function _DATAEE_ReadByte *****************
 13897 ;; Defined at:
 13898 ;;		line 194 in file "mcc_generated_files/memory.c"
 13899 ;; Parameters:    Size  Location     Type
 13900 ;;  bAdd            1    wreg     unsigned char 
 13901 ;; Auto vars:     Size  Location     Type
 13902 ;;  bAdd            1   23[COMRAM] unsigned char 
 13903 ;; Return value:  Size  Location     Type
 13904 ;;                  1    wreg      unsigned char 
 13905 ;; Registers used:
 13906 ;;		wreg, status,2
 13907 ;; Tracked objects:
 13908 ;;		On entry : 0/0
 13909 ;;		On exit  : 0/0
 13910 ;;		Unchanged: 0/0
 13911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13912 ;;      Params:         0       0       0       0       0       0       0
 13913 ;;      Locals:         1       0       0       0       0       0       0
 13914 ;;      Temps:          0       0       0       0       0       0       0
 13915 ;;      Totals:         1       0       0       0       0       0       0
 13916 ;;Total ram usage:        1 bytes
 13917 ;; Hardware stack levels used:    1
 13918 ;; Hardware stack levels required when called:    4
 13919 ;; This function calls:
 13920 ;;		Nothing
 13921 ;; This function is called by:
 13922 ;;		_EepromRead
 13923 ;; This function uses a non-reentrant model
 13924 ;;
 13925                           
 13926                           	psect	text80
 13927  0041F4                     __ptext80:
 13928                           	opt stack 0
 13929  0041F4                     _DATAEE_ReadByte:
 13930                           	opt stack 21
 13931                           
 13932                           ;incstack = 0
 13933                           ;DATAEE_ReadByte@bAdd stored from wreg
 13934  0041F4  6E18               	movwf	DATAEE_ReadByte@bAdd,c
 13935                           
 13936                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
 13937  0041F6  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
 13938                           
 13939                           ;memory.c: 198: EECON1bits.CFGS = 0;
 13940  0041FA  9CA6               	bcf	4006,6,c	;volsfr
 13941                           
 13942                           ;memory.c: 199: EECON1bits.EEPGD = 0;
 13943  0041FC  9EA6               	bcf	4006,7,c	;volsfr
 13944                           
 13945                           ;memory.c: 200: EECON1bits.RD = 1;
 13946  0041FE  80A6               	bsf	4006,0,c	;volsfr
 13947                           
 13948                           ;memory.c: 201: __nop();
 13949  004200  F000               	nop	
 13950                           
 13951                           ;memory.c: 202: __nop();
 13952  004202  F000               	nop	
 13953                           
 13954                           ;memory.c: 204: return (EEDATA);
 13955  004204  50A8               	movf	4008,w,c	;volatile
 13956  004206  0012               	return	
 13957  004208                     __end_of_DATAEE_ReadByte:
 13958                           	opt stack 0
 13959                           tosu	equ	0xFFF
 13960                           tosh	equ	0xFFE
 13961                           tosl	equ	0xFFD
 13962                           pclath	equ	0xFFA
 13963                           tblptru	equ	0xFF8
 13964                           tblptrh	equ	0xFF7
 13965                           tblptrl	equ	0xFF6
 13966                           tablat	equ	0xFF5
 13967                           prodh	equ	0xFF4
 13968                           prodl	equ	0xFF3
 13969                           intcon	equ	0xFF2
 13970                           intcon2	equ	0xFF1
 13971                           postinc0	equ	0xFEE
 13972                           plusw0	equ	0xFEB
 13973                           wreg	equ	0xFE8
 13974                           indf1	equ	0xFE7
 13975                           postdec1	equ	0xFE5
 13976                           fsr1h	equ	0xFE2
 13977                           fsr1l	equ	0xFE1
 13978                           indf2	equ	0xFDF
 13979                           postinc2	equ	0xFDE
 13980                           postdec2	equ	0xFDD
 13981                           plusw2	equ	0xFDB
 13982                           fsr2h	equ	0xFDA
 13983                           fsr2l	equ	0xFD9
 13984                           status	equ	0xFD8
 13985                           
 13986 ;; *************** function _ClearMcuRunTime *****************
 13987 ;; Defined at:
 13988 ;;		line 63 in file "SystemStatus.c"
 13989 ;; Parameters:    Size  Location     Type
 13990 ;;		None
 13991 ;; Auto vars:     Size  Location     Type
 13992 ;;		None
 13993 ;; Return value:  Size  Location     Type
 13994 ;;                  1    wreg      void 
 13995 ;; Registers used:
 13996 ;;		wreg, status,2
 13997 ;; Tracked objects:
 13998 ;;		On entry : 0/0
 13999 ;;		On exit  : 0/0
 14000 ;;		Unchanged: 0/0
 14001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14002 ;;      Params:         0       0       0       0       0       0       0
 14003 ;;      Locals:         0       0       0       0       0       0       0
 14004 ;;      Temps:          0       0       0       0       0       0       0
 14005 ;;      Totals:         0       0       0       0       0       0       0
 14006 ;;Total ram usage:        0 bytes
 14007 ;; Hardware stack levels used:    1
 14008 ;; Hardware stack levels required when called:    4
 14009 ;; This function calls:
 14010 ;;		Nothing
 14011 ;; This function is called by:
 14012 ;;		_InitSystemApplicationManagers
 14013 ;; This function uses a non-reentrant model
 14014 ;;
 14015                           
 14016                           	psect	text81
 14017  004208                     __ptext81:
 14018                           	opt stack 0
 14019  004208                     _ClearMcuRunTime:
 14020                           	opt stack 25
 14021                           
 14022                           ;SystemStatus.c: 65: mcuRunTimeIn5SecTicks = 0;
 14023                           
 14024                           ;incstack = 0
 14025  004208  0E00               	movlw	0
 14026  00420A  0100               	movlb	0	; () banked
 14027  00420C  6FE0               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 14028  00420E  0E00               	movlw	0
 14029  004210  6FE1               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 14030  004212  0E00               	movlw	0
 14031  004214  6FE2               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 14032  004216  0E00               	movlw	0
 14033  004218  6FE3               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 14034                           
 14035                           ; BSR set to: 0
 14036  00421A  0012               	return		;funcret
 14037  00421C                     __end_of_ClearMcuRunTime:
 14038                           	opt stack 0
 14039                           tosu	equ	0xFFF
 14040                           tosh	equ	0xFFE
 14041                           tosl	equ	0xFFD
 14042                           pclath	equ	0xFFA
 14043                           tblptru	equ	0xFF8
 14044                           tblptrh	equ	0xFF7
 14045                           tblptrl	equ	0xFF6
 14046                           tablat	equ	0xFF5
 14047                           prodh	equ	0xFF4
 14048                           prodl	equ	0xFF3
 14049                           intcon	equ	0xFF2
 14050                           intcon2	equ	0xFF1
 14051                           postinc0	equ	0xFEE
 14052                           plusw0	equ	0xFEB
 14053                           wreg	equ	0xFE8
 14054                           indf1	equ	0xFE7
 14055                           postdec1	equ	0xFE5
 14056                           fsr1h	equ	0xFE2
 14057                           fsr1l	equ	0xFE1
 14058                           indf2	equ	0xFDF
 14059                           postinc2	equ	0xFDE
 14060                           postdec2	equ	0xFDD
 14061                           plusw2	equ	0xFDB
 14062                           fsr2h	equ	0xFDA
 14063                           fsr2l	equ	0xFD9
 14064                           status	equ	0xFD8
 14065                           
 14066 ;; *************** function _CheckFlashPrecentage *****************
 14067 ;; Defined at:
 14068 ;;		line 207 in file "FlashApp.c"
 14069 ;; Parameters:    Size  Location     Type
 14070 ;;		None
 14071 ;; Auto vars:     Size  Location     Type
 14072 ;;  precentage      3   28[BANK0 ] void 
 14073 ;; Return value:  Size  Location     Type
 14074 ;;                  1    wreg      unsigned char 
 14075 ;; Registers used:
 14076 ;;		wreg, status,2, status,0, cstack
 14077 ;; Tracked objects:
 14078 ;;		On entry : 0/0
 14079 ;;		On exit  : 0/0
 14080 ;;		Unchanged: 0/0
 14081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14082 ;;      Params:         0       0       0       0       0       0       0
 14083 ;;      Locals:         0       3       0       0       0       0       0
 14084 ;;      Temps:          0       4       0       0       0       0       0
 14085 ;;      Totals:         0       7       0       0       0       0       0
 14086 ;;Total ram usage:        7 bytes
 14087 ;; Hardware stack levels used:    1
 14088 ;; Hardware stack levels required when called:    6
 14089 ;; This function calls:
 14090 ;;		___ftdiv
 14091 ;;		___ftge
 14092 ;;		___ftmul
 14093 ;;		___lltoft
 14094 ;; This function is called by:
 14095 ;;		_main
 14096 ;; This function uses a non-reentrant model
 14097 ;;
 14098                           
 14099                           	psect	text82
 14100  002DAE                     __ptext82:
 14101                           	opt stack 0
 14102  002DAE                     _CheckFlashPrecentage:
 14103                           	opt stack 24
 14104                           
 14105                           ;FlashApp.c: 209: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
 14106                           
 14107                           ; BSR set to: 0
 14108                           ;incstack = 0
 14109  002DAE  0EE0               	movlw	224
 14110  002DB0  6E2C               	movwf	___ftdiv@f2,c
 14111  002DB2  0EFF               	movlw	255
 14112  002DB4  6E2D               	movwf	___ftdiv@f2+1,c
 14113  002DB6  0E46               	movlw	70
 14114  002DB8  6E2E               	movwf	___ftdiv@f2+2,c
 14115  002DBA  C040  F078         	movff	_writeAddress,??_CheckFlashPrecentage
 14116  002DBE  C041  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
 14117  002DC2  C042  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
 14118  002DC6  C043  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
 14119  002DCA  0100               	movlb	0	; () banked
 14120  002DCC  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
 14121  002DCE  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
 14122  002DD0  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
 14123  002DD2  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
 14124  002DD4  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
 14125  002DD6  0E00               	movlw	0
 14126  002DD8  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
 14127  002DDA  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
 14128  002DDC  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
 14129  002DDE  0EF0               	movlw	240
 14130  002DE0  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
 14131  002DE2  6E20               	movwf	___lltoft@c,c
 14132  002DE4  0E7F               	movlw	127
 14133  002DE6  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
 14134  002DE8  6E21               	movwf	___lltoft@c+1,c
 14135  002DEA  0E00               	movlw	0
 14136  002DEC  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
 14137  002DEE  6E22               	movwf	___lltoft@c+2,c
 14138  002DF0  0E00               	movlw	0
 14139  002DF2  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
 14140  002DF4  6E23               	movwf	___lltoft@c+3,c
 14141  002DF6  ECB2  F01B         	call	___lltoft	;wreg free
 14142  002DFA  C020  F029         	movff	?___lltoft,___ftdiv@f1
 14143  002DFE  C021  F02A         	movff	?___lltoft+1,___ftdiv@f1+1
 14144  002E02  C022  F02B         	movff	?___lltoft+2,___ftdiv@f1+2
 14145  002E06  EC0F  F013         	call	___ftdiv	;wreg free
 14146  002E0A  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14147  002E0E  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14148  002E12  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14149  002E16  0E00               	movlw	0
 14150  002E18  0100               	movlb	0	; () banked
 14151  002E1A  6F6C               	movwf	___ftmul@f2& (0+255),b
 14152  002E1C  0EC8               	movlw	200
 14153  002E1E  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14154  002E20  0E42               	movlw	66
 14155  002E22  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14156  002E24  EC94  F012         	call	___ftmul	;wreg free
 14157  002E28  C069  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
 14158  002E2C  C06A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
 14159  002E30  C06B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
 14160                           
 14161                           ;FlashApp.c: 210: return (precentage > 75) ? 1 : 0;
 14162  002E34  0E00               	movlw	0
 14163  002E36  6E18               	movwf	___ftge@ff1,c
 14164  002E38  0E96               	movlw	150
 14165  002E3A  6E19               	movwf	___ftge@ff1+1,c
 14166  002E3C  0E42               	movlw	66
 14167  002E3E  6E1A               	movwf	___ftge@ff1+2,c
 14168  002E40  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
 14169  002E44  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
 14170  002E48  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
 14171  002E4C  EC08  F019         	call	___ftge	;wreg free
 14172  002E50  B0D8               	btfsc	status,0,c
 14173  002E52  D002               	goto	u9180
 14174  002E54  0E01               	movlw	1
 14175  002E56  0012               	return	
 14176  002E58                     u9180:
 14177  002E58  0E00               	movlw	0
 14178  002E5A  0012               	return	
 14179  002E5C                     __end_of_CheckFlashPrecentage:
 14180                           	opt stack 0
 14181                           tosu	equ	0xFFF
 14182                           tosh	equ	0xFFE
 14183                           tosl	equ	0xFFD
 14184                           pclath	equ	0xFFA
 14185                           tblptru	equ	0xFF8
 14186                           tblptrh	equ	0xFF7
 14187                           tblptrl	equ	0xFF6
 14188                           tablat	equ	0xFF5
 14189                           prodh	equ	0xFF4
 14190                           prodl	equ	0xFF3
 14191                           intcon	equ	0xFF2
 14192                           intcon2	equ	0xFF1
 14193                           postinc0	equ	0xFEE
 14194                           plusw0	equ	0xFEB
 14195                           wreg	equ	0xFE8
 14196                           indf1	equ	0xFE7
 14197                           postdec1	equ	0xFE5
 14198                           fsr1h	equ	0xFE2
 14199                           fsr1l	equ	0xFE1
 14200                           indf2	equ	0xFDF
 14201                           postinc2	equ	0xFDE
 14202                           postdec2	equ	0xFDD
 14203                           plusw2	equ	0xFDB
 14204                           fsr2h	equ	0xFDA
 14205                           fsr2l	equ	0xFD9
 14206                           status	equ	0xFD8
 14207                           
 14208 ;; *************** function _BlinkOkLeds *****************
 14209 ;; Defined at:
 14210 ;;		line 24 in file "LedsApp.c"
 14211 ;; Parameters:    Size  Location     Type
 14212 ;;  state           1    wreg     enum E7581
 14213 ;; Auto vars:     Size  Location     Type
 14214 ;;  state           1   26[COMRAM] enum E7581
 14215 ;;  idx             2   27[COMRAM] int 
 14216 ;; Return value:  Size  Location     Type
 14217 ;;                  1    wreg      void 
 14218 ;; Registers used:
 14219 ;;		wreg, status,2, status,0
 14220 ;; Tracked objects:
 14221 ;;		On entry : 0/0
 14222 ;;		On exit  : 0/0
 14223 ;;		Unchanged: 0/0
 14224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14225 ;;      Params:         0       0       0       0       0       0       0
 14226 ;;      Locals:         3       0       0       0       0       0       0
 14227 ;;      Temps:          3       0       0       0       0       0       0
 14228 ;;      Totals:         6       0       0       0       0       0       0
 14229 ;;Total ram usage:        6 bytes
 14230 ;; Hardware stack levels used:    1
 14231 ;; Hardware stack levels required when called:    4
 14232 ;; This function calls:
 14233 ;;		Nothing
 14234 ;; This function is called by:
 14235 ;;		_main
 14236 ;; This function uses a non-reentrant model
 14237 ;;
 14238                           
 14239                           	psect	text83
 14240  0036AA                     __ptext83:
 14241                           	opt stack 0
 14242  0036AA                     _BlinkOkLeds:
 14243                           	opt stack 26
 14244                           
 14245                           ;incstack = 0
 14246                           ;BlinkOkLeds@state stored from wreg
 14247  0036AA  6E1B               	movwf	BlinkOkLeds@state,c
 14248                           
 14249                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 14250  0036AC  0E00               	movlw	0
 14251  0036AE  6E1D               	movwf	BlinkOkLeds@idx+1,c
 14252  0036B0  0E00               	movlw	0
 14253  0036B2  6E1C               	movwf	BlinkOkLeds@idx,c
 14254  0036B4                     l6459:
 14255  0036B4  501B               	movf	BlinkOkLeds@state,w,c
 14256  0036B6  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14257  0036B8  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 14258  0036BA  5018               	movf	??_BlinkOkLeds,w,c
 14259  0036BC  5C1C               	subwf	BlinkOkLeds@idx,w,c
 14260  0036BE  501D               	movf	BlinkOkLeds@idx+1,w,c
 14261  0036C0  0A80               	xorlw	128
 14262  0036C2  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 14263  0036C4  5019               	movf	??_BlinkOkLeds+1,w,c
 14264  0036C6  0A80               	xorlw	128
 14265  0036C8  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 14266  0036CA  B0D8               	btfsc	status,0,c
 14267  0036CC  0012               	return	
 14268                           
 14269                           ;LedsApp.c: 27: {
 14270                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 14271  0036CE  908B               	bcf	3979,0,c	;volatile
 14272                           
 14273                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 14274  0036D0  0E02               	movlw	2
 14275  0036D2  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 14276  0036D4  0E04               	movlw	4
 14277  0036D6  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14278  0036D8  0EBA               	movlw	186
 14279  0036DA                     u9377:
 14280  0036DA  2EE8               	decfsz	wreg,f,c
 14281  0036DC  D7FE               	bra	u9377
 14282  0036DE  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 14283  0036E0  D7FC               	bra	u9377
 14284  0036E2  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 14285  0036E4  D7FA               	bra	u9377
 14286  0036E6  D000               	nop2	
 14287                           
 14288                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 14289  0036E8  808B               	bsf	3979,0,c	;volatile
 14290                           
 14291                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 14292  0036EA  0E02               	movlw	2
 14293  0036EC  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 14294  0036EE  0E04               	movlw	4
 14295  0036F0  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14296  0036F2  0EBA               	movlw	186
 14297  0036F4                     u9387:
 14298  0036F4  2EE8               	decfsz	wreg,f,c
 14299  0036F6  D7FE               	bra	u9387
 14300  0036F8  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 14301  0036FA  D7FC               	bra	u9387
 14302  0036FC  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 14303  0036FE  D7FA               	bra	u9387
 14304  003700  D000               	nop2	
 14305  003702  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 14306  003704  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 14307  003706  D7D6               	goto	l6459
 14308  003708                     __end_of_BlinkOkLeds:
 14309                           	opt stack 0
 14310                           tosu	equ	0xFFF
 14311                           tosh	equ	0xFFE
 14312                           tosl	equ	0xFFD
 14313                           pclath	equ	0xFFA
 14314                           tblptru	equ	0xFF8
 14315                           tblptrh	equ	0xFF7
 14316                           tblptrl	equ	0xFF6
 14317                           tablat	equ	0xFF5
 14318                           prodh	equ	0xFF4
 14319                           prodl	equ	0xFF3
 14320                           intcon	equ	0xFF2
 14321                           intcon2	equ	0xFF1
 14322                           postinc0	equ	0xFEE
 14323                           plusw0	equ	0xFEB
 14324                           wreg	equ	0xFE8
 14325                           indf1	equ	0xFE7
 14326                           postdec1	equ	0xFE5
 14327                           fsr1h	equ	0xFE2
 14328                           fsr1l	equ	0xFE1
 14329                           indf2	equ	0xFDF
 14330                           postinc2	equ	0xFDE
 14331                           postdec2	equ	0xFDD
 14332                           plusw2	equ	0xFDB
 14333                           fsr2h	equ	0xFDA
 14334                           fsr2l	equ	0xFD9
 14335                           status	equ	0xFD8
 14336                           
 14337 ;; *************** function _AdcConvert *****************
 14338 ;; Defined at:
 14339 ;;		line 43 in file "AdcApp.c"
 14340 ;; Parameters:    Size  Location     Type
 14341 ;;		None
 14342 ;; Auto vars:     Size  Location     Type
 14343 ;;  _adcResult      2   83[BANK0 ] unsigned int 
 14344 ;;  idx             1   92[BANK0 ] unsigned char 
 14345 ;;  _adcResult      2   85[BANK0 ] unsigned int 
 14346 ;;  adcRes          2   90[BANK0 ] unsigned int 
 14347 ;; Return value:  Size  Location     Type
 14348 ;;                  1    wreg      void 
 14349 ;; Registers used:
 14350 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14351 ;; Tracked objects:
 14352 ;;		On entry : 0/0
 14353 ;;		On exit  : 0/0
 14354 ;;		Unchanged: 0/0
 14355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14356 ;;      Params:         0       0       0       0       0       0       0
 14357 ;;      Locals:         0      10       0       0       0       0       0
 14358 ;;      Temps:          0       2       0       0       0       0       0
 14359 ;;      Totals:         0      12       0       0       0       0       0
 14360 ;;Total ram usage:       12 bytes
 14361 ;; Hardware stack levels used:    1
 14362 ;; Hardware stack levels required when called:    9
 14363 ;; This function calls:
 14364 ;;		_ADC_GetConversion
 14365 ;;		_FlashSampleWrite
 14366 ;;		___ftdiv
 14367 ;;		___ftmul
 14368 ;;		___fttol
 14369 ;;		___lwtoft
 14370 ;;		_pow
 14371 ;; This function is called by:
 14372 ;;		_main
 14373 ;; This function uses a non-reentrant model
 14374 ;;
 14375                           
 14376                           	psect	text84
 14377  001880                     __ptext84:
 14378                           	opt stack 0
 14379  001880                     _AdcConvert:
 14380                           	opt stack 21
 14381                           
 14382                           ;AdcApp.c: 48: uint16_t adcRes = 0;
 14383                           
 14384                           ;incstack = 0
 14385  001880  0E00               	movlw	0
 14386  001882  0100               	movlb	0	; () banked
 14387  001884  6FBB               	movwf	(AdcConvert@adcRes+1)& (0+255),b
 14388  001886  0E00               	movlw	0
 14389  001888  6FBA               	movwf	AdcConvert@adcRes& (0+255),b
 14390                           
 14391                           ;AdcApp.c: 50: if (adcSampleMode == CIRCULAR)
 14392  00188A  503B               	movf	_adcSampleMode,w,c
 14393  00188C  A4D8               	btfss	status,2,c
 14394  00188E  D073               	goto	l116
 14395                           
 14396                           ; BSR set to: 0
 14397                           ;AdcApp.c: 51: {
 14398                           ;AdcApp.c: 52: for(uint8_t idx = 0; idx < (9); idx++)
 14399  001890  0E00               	movlw	0
 14400  001892  6FBC               	movwf	AdcConvert@idx& (0+255),b
 14401  001894                     l8525:
 14402                           
 14403                           ; BSR set to: 0
 14404  001894  0E08               	movlw	8
 14405  001896  65BC               	cpfsgt	AdcConvert@idx& (0+255),b
 14406  001898  D001               	goto	l117
 14407  00189A  0012               	return	
 14408  00189C                     l117:
 14409                           
 14410                           ; BSR set to: 0
 14411                           ;AdcApp.c: 53: {
 14412                           ;AdcApp.c: 54: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
 14413                           
 14414                           ; BSR set to: 0
 14415  00189C  51BC               	movf	AdcConvert@idx& (0+255),w,b
 14416  00189E  0D01               	mullw	1
 14417  0018A0  0E42               	movlw	low _channelArr
 14418  0018A2  24F3               	addwf	prodl,w,c
 14419  0018A4  6EF6               	movwf	tblptrl,c
 14420  0018A6  0E06               	movlw	high _channelArr
 14421  0018A8  20F4               	addwfc	prodh,w,c
 14422  0018AA  6EF7               	movwf	tblptrh,c
 14423  0018AC                     	if	0	;There are less than 3 active tblptr bytes
 14424  0018AC                     	endif
 14425  0018AC  0008               	tblrd		*
 14426  0018AE  50F5               	movf	tablat,w,c
 14427  0018B0  EC51  F01F         	call	_ADC_GetConversion
 14428  0018B4  C018  F0B3         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
 14429  0018B8  C019  F0B4         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
 14430                           
 14431                           ;AdcApp.c: 55: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14432  0018BC  0E00               	movlw	0
 14433  0018BE  0100               	movlb	0	; () banked
 14434  0018C0  6FA3               	movwf	pow@y& (0+255),b
 14435  0018C2  0E20               	movlw	32
 14436  0018C4  6FA4               	movwf	(pow@y+1)& (0+255),b
 14437  0018C6  0E41               	movlw	65
 14438  0018C8  6FA5               	movwf	(pow@y+2)& (0+255),b
 14439  0018CA  0E00               	movlw	0
 14440  0018CC  6FA0               	movwf	pow@x& (0+255),b
 14441  0018CE  0E00               	movlw	0
 14442  0018D0  6FA1               	movwf	(pow@x+1)& (0+255),b
 14443  0018D2  0E40               	movlw	64
 14444  0018D4  6FA2               	movwf	(pow@x+2)& (0+255),b
 14445  0018D6  ECF2  F00D         	call	_pow	;wreg free
 14446  0018DA  C0A0  F0B7         	movff	?_pow,_AdcConvert$3539
 14447  0018DE  C0A1  F0B8         	movff	?_pow+1,_AdcConvert$3539+1
 14448  0018E2  C0A2  F0B9         	movff	?_pow+2,_AdcConvert$3539+2
 14449                           
 14450                           ;AdcApp.c: 55: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14451  0018E6  0EC0               	movlw	192
 14452  0018E8  0100               	movlb	0	; () banked
 14453  0018EA  6F6C               	movwf	___ftmul@f2& (0+255),b
 14454  0018EC  0E50               	movlw	80
 14455  0018EE  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14456  0018F0  0E45               	movlw	69
 14457  0018F2  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14458  0018F4  C0B7  F02C         	movff	_AdcConvert$3539,___ftdiv@f2
 14459  0018F8  C0B8  F02D         	movff	_AdcConvert$3539+1,___ftdiv@f2+1
 14460  0018FC  C0B9  F02E         	movff	_AdcConvert$3539+2,___ftdiv@f2+2
 14461  001900  C0B3  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
 14462  001904  C0B4  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
 14463  001908  EC33  F020         	call	___lwtoft	;wreg free
 14464  00190C  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 14465  001910  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 14466  001914  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 14467  001918  EC0F  F013         	call	___ftdiv	;wreg free
 14468  00191C  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14469  001920  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14470  001924  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14471  001928  EC94  F012         	call	___ftmul	;wreg free
 14472  00192C  C069  F078         	movff	?___ftmul,___fttol@f1
 14473  001930  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 14474  001934  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 14475  001938  EC18  F012         	call	___fttol	;wreg free
 14476  00193C  C078  F0BA         	movff	?___fttol,AdcConvert@adcRes
 14477  001940  C079  F0BB         	movff	?___fttol+1,AdcConvert@adcRes+1
 14478                           
 14479                           ;AdcApp.c: 56: FlashSampleWrite(adcRes, idx + 1);
 14480  001944  C0BA  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 14481  001948  C0BB  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 14482  00194C  0100               	movlb	0	; () banked
 14483  00194E  29BC               	incf	AdcConvert@idx& (0+255),w,b
 14484  001950  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14485  001952  EC1E  F011         	call	_FlashSampleWrite	;wreg free
 14486                           
 14487                           ;AdcApp.c: 57: _delay((unsigned long)((250)*(8000000/4000.0)));
 14488  001956  0E03               	movlw	3
 14489  001958  0100               	movlb	0	; () banked
 14490  00195A  6FB2               	movwf	(??_AdcConvert+1)& (0+255),b
 14491  00195C  0E8A               	movlw	138
 14492  00195E  6FB1               	movwf	??_AdcConvert& (0+255),b
 14493  001960  0E55               	movlw	85
 14494  001962                     u9397:
 14495  001962  2EE8               	decfsz	wreg,f,c
 14496  001964  D7FE               	bra	u9397
 14497  001966  2FB1               	decfsz	??_AdcConvert& (0+255),f,b
 14498  001968  D7FC               	bra	u9397
 14499  00196A  2FB2               	decfsz	(??_AdcConvert+1)& (0+255),f,b
 14500  00196C  D7FA               	bra	u9397
 14501  00196E  D000               	nop2	
 14502  001970  0100               	movlb	0	; () banked
 14503  001972  2BBC               	incf	AdcConvert@idx& (0+255),f,b
 14504  001974  D78F               	goto	l8525
 14505  001976                     l116:
 14506                           
 14507                           ; BSR set to: 0
 14508                           ;AdcApp.c: 60: else if (adcSampleMode == SINGLE_CHANNEL)
 14509                           
 14510                           ; BSR set to: 0
 14511  001976  043B               	decf	_adcSampleMode,w,c
 14512  001978  A4D8               	btfss	status,2,c
 14513  00197A  0012               	return	
 14514                           
 14515                           ; BSR set to: 0
 14516                           ;AdcApp.c: 61: {
 14517                           ;AdcApp.c: 62: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
 14518  00197C  51F5               	movf	_channel& (0+255),w,b
 14519  00197E  0D01               	mullw	1
 14520  001980  0E42               	movlw	low _channelArr
 14521  001982  24F3               	addwf	prodl,w,c
 14522  001984  6EF6               	movwf	tblptrl,c
 14523  001986  0E06               	movlw	high _channelArr
 14524  001988  20F4               	addwfc	prodh,w,c
 14525  00198A  6EF7               	movwf	tblptrh,c
 14526  00198C                     	if	0	;There are less than 3 active tblptr bytes
 14527  00198C                     	endif
 14528  00198C  0008               	tblrd		*
 14529  00198E  50F5               	movf	tablat,w,c
 14530  001990  EC51  F01F         	call	_ADC_GetConversion
 14531  001994  C018  F0B5         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_336
 14532  001998  C019  F0B6         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_336+1
 14533                           
 14534                           ;AdcApp.c: 63: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14535  00199C  0E00               	movlw	0
 14536  00199E  0100               	movlb	0	; () banked
 14537  0019A0  6FA3               	movwf	pow@y& (0+255),b
 14538  0019A2  0E20               	movlw	32
 14539  0019A4  6FA4               	movwf	(pow@y+1)& (0+255),b
 14540  0019A6  0E41               	movlw	65
 14541  0019A8  6FA5               	movwf	(pow@y+2)& (0+255),b
 14542  0019AA  0E00               	movlw	0
 14543  0019AC  6FA0               	movwf	pow@x& (0+255),b
 14544  0019AE  0E00               	movlw	0
 14545  0019B0  6FA1               	movwf	(pow@x+1)& (0+255),b
 14546  0019B2  0E40               	movlw	64
 14547  0019B4  6FA2               	movwf	(pow@x+2)& (0+255),b
 14548  0019B6  ECF2  F00D         	call	_pow	;wreg free
 14549  0019BA  C0A0  F0B7         	movff	?_pow,_AdcConvert$3539
 14550  0019BE  C0A1  F0B8         	movff	?_pow+1,_AdcConvert$3539+1
 14551  0019C2  C0A2  F0B9         	movff	?_pow+2,_AdcConvert$3539+2
 14552                           
 14553                           ;AdcApp.c: 63: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14554  0019C6  0EC0               	movlw	192
 14555  0019C8  0100               	movlb	0	; () banked
 14556  0019CA  6F6C               	movwf	___ftmul@f2& (0+255),b
 14557  0019CC  0E50               	movlw	80
 14558  0019CE  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14559  0019D0  0E45               	movlw	69
 14560  0019D2  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14561  0019D4  C0B7  F02C         	movff	_AdcConvert$3539,___ftdiv@f2
 14562  0019D8  C0B8  F02D         	movff	_AdcConvert$3539+1,___ftdiv@f2+1
 14563  0019DC  C0B9  F02E         	movff	_AdcConvert$3539+2,___ftdiv@f2+2
 14564  0019E0  C0B5  F020         	movff	AdcConvert@_adcResult_336,___lwtoft@c
 14565  0019E4  C0B6  F021         	movff	AdcConvert@_adcResult_336+1,___lwtoft@c+1
 14566  0019E8  EC33  F020         	call	___lwtoft	;wreg free
 14567  0019EC  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 14568  0019F0  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 14569  0019F4  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 14570  0019F8  EC0F  F013         	call	___ftdiv	;wreg free
 14571  0019FC  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14572  001A00  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14573  001A04  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14574  001A08  EC94  F012         	call	___ftmul	;wreg free
 14575  001A0C  C069  F078         	movff	?___ftmul,___fttol@f1
 14576  001A10  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 14577  001A14  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 14578  001A18  EC18  F012         	call	___fttol	;wreg free
 14579  001A1C  C078  F0BA         	movff	?___fttol,AdcConvert@adcRes
 14580  001A20  C079  F0BB         	movff	?___fttol+1,AdcConvert@adcRes+1
 14581                           
 14582                           ;AdcApp.c: 64: FlashSampleWrite(adcRes, 1);
 14583  001A24  C0BA  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 14584  001A28  C0BB  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 14585  001A2C  0E01               	movlw	1
 14586  001A2E  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14587  001A30  EC1E  F011         	call	_FlashSampleWrite	;wreg free
 14588  001A34  0012               	return	
 14589  001A36                     __end_of_AdcConvert:
 14590                           	opt stack 0
 14591                           tosu	equ	0xFFF
 14592                           tosh	equ	0xFFE
 14593                           tosl	equ	0xFFD
 14594                           pclath	equ	0xFFA
 14595                           tblptru	equ	0xFF8
 14596                           tblptrh	equ	0xFF7
 14597                           tblptrl	equ	0xFF6
 14598                           tablat	equ	0xFF5
 14599                           prodh	equ	0xFF4
 14600                           prodl	equ	0xFF3
 14601                           intcon	equ	0xFF2
 14602                           intcon2	equ	0xFF1
 14603                           postinc0	equ	0xFEE
 14604                           plusw0	equ	0xFEB
 14605                           wreg	equ	0xFE8
 14606                           indf1	equ	0xFE7
 14607                           postdec1	equ	0xFE5
 14608                           fsr1h	equ	0xFE2
 14609                           fsr1l	equ	0xFE1
 14610                           indf2	equ	0xFDF
 14611                           postinc2	equ	0xFDE
 14612                           postdec2	equ	0xFDD
 14613                           plusw2	equ	0xFDB
 14614                           fsr2h	equ	0xFDA
 14615                           fsr2l	equ	0xFD9
 14616                           status	equ	0xFD8
 14617                           
 14618 ;; *************** function _pow *****************
 14619 ;; Defined at:
 14620 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 14621 ;; Parameters:    Size  Location     Type
 14622 ;;  x               3   64[BANK0 ] void 
 14623 ;;  y               3   67[BANK0 ] void 
 14624 ;; Auto vars:     Size  Location     Type
 14625 ;;  yi              4   77[BANK0 ] unsigned long 
 14626 ;;  sign            1   76[BANK0 ] unsigned char 
 14627 ;; Return value:  Size  Location     Type
 14628 ;;                  3   64[BANK0 ] unsigned char 
 14629 ;; Registers used:
 14630 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14631 ;; Tracked objects:
 14632 ;;		On entry : 0/0
 14633 ;;		On exit  : 0/0
 14634 ;;		Unchanged: 0/0
 14635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14636 ;;      Params:         0       6       0       0       0       0       0
 14637 ;;      Locals:         0      11       0       0       0       0       0
 14638 ;;      Temps:          0       0       0       0       0       0       0
 14639 ;;      Totals:         0      17       0       0       0       0       0
 14640 ;;Total ram usage:       17 bytes
 14641 ;; Hardware stack levels used:    1
 14642 ;; Hardware stack levels required when called:    8
 14643 ;; This function calls:
 14644 ;;		___ftge
 14645 ;;		___ftmul
 14646 ;;		___ftneg
 14647 ;;		___fttol
 14648 ;;		___lltoft
 14649 ;;		_exp
 14650 ;;		_log
 14651 ;; This function is called by:
 14652 ;;		_AdcConvert
 14653 ;;		_ReadIntFromEeprom
 14654 ;; This function uses a non-reentrant model
 14655 ;;
 14656                           
 14657                           	psect	text85
 14658  001BE4                     __ptext85:
 14659                           	opt stack 0
 14660  001BE4                     _pow:
 14661                           	opt stack 18
 14662                           
 14663                           ;incstack = 0
 14664  001BE4  0E00               	movlw	0
 14665  001BE6  0100               	movlb	0	; () banked
 14666  001BE8  6FAC               	movwf	pow@sign& (0+255),b
 14667                           
 14668                           ; BSR set to: 0
 14669  001BEA  51A0               	movf	pow@x& (0+255),w,b
 14670  001BEC  11A1               	iorwf	(pow@x+1)& (0+255),w,b
 14671  001BEE  11A2               	iorwf	(pow@x+2)& (0+255),w,b
 14672  001BF0  A4D8               	btfss	status,2,c
 14673  001BF2  D01D               	goto	l1984
 14674                           
 14675                           ; BSR set to: 0
 14676  001BF4  0E00               	movlw	0
 14677  001BF6  6E18               	movwf	___ftge@ff1,c
 14678  001BF8  0E00               	movlw	0
 14679  001BFA  6E19               	movwf	___ftge@ff1+1,c
 14680  001BFC  0E00               	movlw	0
 14681  001BFE  6E1A               	movwf	___ftge@ff1+2,c
 14682  001C00  C0A3  F01B         	movff	pow@y,___ftge@ff2
 14683  001C04  C0A4  F01C         	movff	pow@y+1,___ftge@ff2+1
 14684  001C08  C0A5  F01D         	movff	pow@y+2,___ftge@ff2+2
 14685  001C0C  EC08  F019         	call	___ftge	;wreg free
 14686  001C10  A0D8               	btfss	status,0,c
 14687  001C12  D005               	goto	l1985
 14688  001C14  0E00               	movlw	0
 14689  001C16  0101               	movlb	1	; () banked
 14690  001C18  6F6F               	movwf	(_errno+1)& (0+255),b
 14691  001C1A  0E21               	movlw	33
 14692  001C1C  6F6E               	movwf	_errno& (0+255),b
 14693  001C1E                     l1985:
 14694  001C1E  0E00               	movlw	0
 14695  001C20  0100               	movlb	0	; () banked
 14696  001C22  6FA0               	movwf	?_pow& (0+255),b
 14697  001C24  0E00               	movlw	0
 14698  001C26  6FA1               	movwf	(?_pow+1)& (0+255),b
 14699  001C28  0E00               	movlw	0
 14700  001C2A  6FA2               	movwf	(?_pow+2)& (0+255),b
 14701                           
 14702                           ; BSR set to: 0
 14703  001C2C  0012               	return	
 14704  001C2E                     l1984:
 14705                           
 14706                           ; BSR set to: 0
 14707                           
 14708                           ; BSR set to: 0
 14709  001C2E  51A3               	movf	pow@y& (0+255),w,b
 14710  001C30  11A4               	iorwf	(pow@y+1)& (0+255),w,b
 14711  001C32  11A5               	iorwf	(pow@y+2)& (0+255),w,b
 14712  001C34  A4D8               	btfss	status,2,c
 14713  001C36  D007               	goto	l1987
 14714                           
 14715                           ; BSR set to: 0
 14716  001C38  0E00               	movlw	0
 14717  001C3A  6FA0               	movwf	?_pow& (0+255),b
 14718  001C3C  0E80               	movlw	128
 14719  001C3E  6FA1               	movwf	(?_pow+1)& (0+255),b
 14720  001C40  0E3F               	movlw	63
 14721  001C42  6FA2               	movwf	(?_pow+2)& (0+255),b
 14722                           
 14723                           ; BSR set to: 0
 14724  001C44  0012               	return	
 14725  001C46                     l1987:
 14726                           
 14727                           ; BSR set to: 0
 14728                           
 14729                           ; BSR set to: 0
 14730  001C46  AFA2               	btfss	(pow@x+2)& (0+255),7,b
 14731  001C48  D043               	goto	l1988
 14732                           
 14733                           ; BSR set to: 0
 14734  001C4A  C0A3  F078         	movff	pow@y,___fttol@f1
 14735  001C4E  C0A4  F079         	movff	pow@y+1,___fttol@f1+1
 14736  001C52  C0A5  F07A         	movff	pow@y+2,___fttol@f1+2
 14737  001C56  EC18  F012         	call	___fttol	;wreg free
 14738  001C5A  C078  F0AD         	movff	?___fttol,pow@yi
 14739  001C5E  C079  F0AE         	movff	?___fttol+1,pow@yi+1
 14740  001C62  C07A  F0AF         	movff	?___fttol+2,pow@yi+2
 14741  001C66  C07B  F0B0         	movff	?___fttol+3,pow@yi+3
 14742  001C6A  C0AD  F020         	movff	pow@yi,___lltoft@c
 14743  001C6E  C0AE  F021         	movff	pow@yi+1,___lltoft@c+1
 14744  001C72  C0AF  F022         	movff	pow@yi+2,___lltoft@c+2
 14745  001C76  C0B0  F023         	movff	pow@yi+3,___lltoft@c+3
 14746  001C7A  ECB2  F01B         	call	___lltoft	;wreg free
 14747  001C7E  0100               	movlb	0	; () banked
 14748  001C80  51A3               	movf	pow@y& (0+255),w,b
 14749  001C82  1820               	xorwf	?___lltoft,w,c
 14750  001C84  E107               	bnz	u7510
 14751  001C86  51A4               	movf	(pow@y+1)& (0+255),w,b
 14752  001C88  1821               	xorwf	?___lltoft+1,w,c
 14753  001C8A  E104               	bnz	u7510
 14754  001C8C  51A5               	movf	(pow@y+2)& (0+255),w,b
 14755  001C8E  1822               	xorwf	?___lltoft+2,w,c
 14756  001C90  B4D8               	btfsc	status,2,c
 14757  001C92  D00D               	goto	l1989
 14758  001C94                     u7510:
 14759                           
 14760                           ; BSR set to: 0
 14761  001C94  0E00               	movlw	0
 14762  001C96  0101               	movlb	1	; () banked
 14763  001C98  6F6F               	movwf	(_errno+1)& (0+255),b
 14764  001C9A  0E21               	movlw	33
 14765  001C9C  6F6E               	movwf	_errno& (0+255),b
 14766  001C9E  0E00               	movlw	0
 14767  001CA0  0100               	movlb	0	; () banked
 14768  001CA2  6FA0               	movwf	?_pow& (0+255),b
 14769  001CA4  0E00               	movlw	0
 14770  001CA6  6FA1               	movwf	(?_pow+1)& (0+255),b
 14771  001CA8  0E00               	movlw	0
 14772  001CAA  6FA2               	movwf	(?_pow+2)& (0+255),b
 14773                           
 14774                           ; BSR set to: 0
 14775  001CAC  0012               	return	
 14776  001CAE                     l1989:
 14777                           
 14778                           ; BSR set to: 0
 14779                           
 14780                           ; BSR set to: 0
 14781  001CAE  51AD               	movf	pow@yi& (0+255),w,b
 14782  001CB0  0B01               	andlw	1
 14783  001CB2  6FAC               	movwf	pow@sign& (0+255),b
 14784                           
 14785                           ; BSR set to: 0
 14786  001CB4  C0A0  F018         	movff	pow@x,___ftneg@f1
 14787  001CB8  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 14788  001CBC  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 14789  001CC0  EC21  F020         	call	___ftneg	;wreg free
 14790  001CC4  C018  F0A0         	movff	?___ftneg,pow@x
 14791  001CC8  C019  F0A1         	movff	?___ftneg+1,pow@x+1
 14792  001CCC  C01A  F0A2         	movff	?___ftneg+2,pow@x+2
 14793  001CD0                     l1988:
 14794  001CD0  C0A0  F08E         	movff	pow@x,log@x
 14795  001CD4  C0A1  F08F         	movff	pow@x+1,log@x+1
 14796  001CD8  C0A2  F090         	movff	pow@x+2,log@x+2
 14797  001CDC  EC70  F00F         	call	_log	;wreg free
 14798  001CE0  C08E  F0A6         	movff	?_log,_pow$3542
 14799  001CE4  C08F  F0A7         	movff	?_log+1,_pow$3542+1
 14800  001CE8  C090  F0A8         	movff	?_log+2,_pow$3542+2
 14801  001CEC  C0A6  F069         	movff	_pow$3542,___ftmul@f1
 14802  001CF0  C0A7  F06A         	movff	_pow$3542+1,___ftmul@f1+1
 14803  001CF4  C0A8  F06B         	movff	_pow$3542+2,___ftmul@f1+2
 14804  001CF8  C0A3  F06C         	movff	pow@y,___ftmul@f2
 14805  001CFC  C0A4  F06D         	movff	pow@y+1,___ftmul@f2+1
 14806  001D00  C0A5  F06E         	movff	pow@y+2,___ftmul@f2+2
 14807  001D04  EC94  F012         	call	___ftmul	;wreg free
 14808  001D08  C069  F0A9         	movff	?___ftmul,_pow$3543
 14809  001D0C  C06A  F0AA         	movff	?___ftmul+1,_pow$3543+1
 14810  001D10  C06B  F0AB         	movff	?___ftmul+2,_pow$3543+2
 14811  001D14  C0A9  F097         	movff	_pow$3543,exp@x
 14812  001D18  C0AA  F098         	movff	_pow$3543+1,exp@x+1
 14813  001D1C  C0AB  F099         	movff	_pow$3543+2,exp@x+2
 14814  001D20  EC71  F008         	call	_exp	;wreg free
 14815  001D24  C097  F0A0         	movff	?_exp,pow@x
 14816  001D28  C098  F0A1         	movff	?_exp+1,pow@x+1
 14817  001D2C  C099  F0A2         	movff	?_exp+2,pow@x+2
 14818  001D30  0100               	movlb	0	; () banked
 14819  001D32  51AC               	movf	pow@sign& (0+255),w,b
 14820  001D34  B4D8               	btfsc	status,2,c
 14821  001D36  D00F               	goto	l1990
 14822                           
 14823                           ; BSR set to: 0
 14824  001D38  C0A0  F018         	movff	pow@x,___ftneg@f1
 14825  001D3C  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 14826  001D40  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 14827  001D44  EC21  F020         	call	___ftneg	;wreg free
 14828  001D48  C018  F0A0         	movff	?___ftneg,?_pow
 14829  001D4C  C019  F0A1         	movff	?___ftneg+1,?_pow+1
 14830  001D50  C01A  F0A2         	movff	?___ftneg+2,?_pow+2
 14831  001D54  0012               	return	
 14832  001D56                     l1990:
 14833                           
 14834                           ; BSR set to: 0
 14835  001D56  C0A0  F0A0         	movff	pow@x,?_pow
 14836  001D5A  C0A1  F0A1         	movff	pow@x+1,?_pow+1
 14837  001D5E  C0A2  F0A2         	movff	pow@x+2,?_pow+2
 14838  001D62  0012               	return		;funcret
 14839  001D64                     __end_of_pow:
 14840                           	opt stack 0
 14841                           tosu	equ	0xFFF
 14842                           tosh	equ	0xFFE
 14843                           tosl	equ	0xFFD
 14844                           pclath	equ	0xFFA
 14845                           tblptru	equ	0xFF8
 14846                           tblptrh	equ	0xFF7
 14847                           tblptrl	equ	0xFF6
 14848                           tablat	equ	0xFF5
 14849                           prodh	equ	0xFF4
 14850                           prodl	equ	0xFF3
 14851                           intcon	equ	0xFF2
 14852                           intcon2	equ	0xFF1
 14853                           postinc0	equ	0xFEE
 14854                           plusw0	equ	0xFEB
 14855                           wreg	equ	0xFE8
 14856                           indf1	equ	0xFE7
 14857                           postdec1	equ	0xFE5
 14858                           fsr1h	equ	0xFE2
 14859                           fsr1l	equ	0xFE1
 14860                           indf2	equ	0xFDF
 14861                           postinc2	equ	0xFDE
 14862                           postdec2	equ	0xFDD
 14863                           plusw2	equ	0xFDB
 14864                           fsr2h	equ	0xFDA
 14865                           fsr2l	equ	0xFD9
 14866                           status	equ	0xFD8
 14867                           
 14868 ;; *************** function _log *****************
 14869 ;; Defined at:
 14870 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 14871 ;; Parameters:    Size  Location     Type
 14872 ;;  x               3   46[BANK0 ] unsigned char 
 14873 ;; Auto vars:     Size  Location     Type
 14874 ;;  exponent        2   49[BANK0 ] int 
 14875 ;; Return value:  Size  Location     Type
 14876 ;;                  3   46[BANK0 ] int 
 14877 ;; Registers used:
 14878 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14879 ;; Tracked objects:
 14880 ;;		On entry : 0/0
 14881 ;;		On exit  : 0/0
 14882 ;;		Unchanged: 0/0
 14883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14884 ;;      Params:         0       3       0       0       0       0       0
 14885 ;;      Locals:         0       2       0       0       0       0       0
 14886 ;;      Temps:          0       0       0       0       0       0       0
 14887 ;;      Totals:         0       5       0       0       0       0       0
 14888 ;;Total ram usage:        5 bytes
 14889 ;; Hardware stack levels used:    1
 14890 ;; Hardware stack levels required when called:    7
 14891 ;; This function calls:
 14892 ;;		___awtoft
 14893 ;;		___ftadd
 14894 ;;		___ftmul
 14895 ;;		_eval_poly
 14896 ;;		_frexp
 14897 ;; This function is called by:
 14898 ;;		_pow
 14899 ;; This function uses a non-reentrant model
 14900 ;;
 14901                           
 14902                           	psect	text86
 14903  001EE0                     __ptext86:
 14904                           	opt stack 0
 14905  001EE0                     _log:
 14906                           	opt stack 18
 14907                           
 14908                           ;incstack = 0
 14909  001EE0  0100               	movlb	0	; () banked
 14910  001EE2  AF90               	btfss	(log@x+2)& (0+255),7,b
 14911  001EE4  D00D               	goto	l2246
 14912                           
 14913                           ; BSR set to: 0
 14914  001EE6  0E00               	movlw	0
 14915  001EE8  0101               	movlb	1	; () banked
 14916  001EEA  6F6F               	movwf	(_errno+1)& (0+255),b
 14917  001EEC  0E21               	movlw	33
 14918  001EEE  6F6E               	movwf	_errno& (0+255),b
 14919  001EF0  0E00               	movlw	0
 14920  001EF2  0100               	movlb	0	; () banked
 14921  001EF4  6F8E               	movwf	?_log& (0+255),b
 14922  001EF6  0E00               	movlw	0
 14923  001EF8  6F8F               	movwf	(?_log+1)& (0+255),b
 14924  001EFA  0E00               	movlw	0
 14925  001EFC  6F90               	movwf	(?_log+2)& (0+255),b
 14926                           
 14927                           ; BSR set to: 0
 14928  001EFE  0012               	return	
 14929  001F00                     l2246:
 14930                           
 14931                           ; BSR set to: 0
 14932                           
 14933                           ; BSR set to: 0
 14934  001F00  518E               	movf	log@x& (0+255),w,b
 14935  001F02  118F               	iorwf	(log@x+1)& (0+255),w,b
 14936  001F04  1190               	iorwf	(log@x+2)& (0+255),w,b
 14937  001F06  A4D8               	btfss	status,2,c
 14938  001F08  D00D               	goto	l2248
 14939                           
 14940                           ; BSR set to: 0
 14941  001F0A  0E00               	movlw	0
 14942  001F0C  0101               	movlb	1	; () banked
 14943  001F0E  6F6F               	movwf	(_errno+1)& (0+255),b
 14944  001F10  0E22               	movlw	34
 14945  001F12  6F6E               	movwf	_errno& (0+255),b
 14946  001F14  0E00               	movlw	0
 14947  001F16  0100               	movlb	0	; () banked
 14948  001F18  6F8E               	movwf	?_log& (0+255),b
 14949  001F1A  0E00               	movlw	0
 14950  001F1C  6F8F               	movwf	(?_log+1)& (0+255),b
 14951  001F1E  0E00               	movlw	0
 14952  001F20  6F90               	movwf	(?_log+2)& (0+255),b
 14953                           
 14954                           ; BSR set to: 0
 14955  001F22  0012               	return	
 14956  001F24                     l2248:
 14957                           
 14958                           ; BSR set to: 0
 14959                           
 14960                           ; BSR set to: 0
 14961  001F24  0E00               	movlw	0
 14962  001F26  6F6C               	movwf	___ftmul@f2& (0+255),b
 14963  001F28  0E00               	movlw	0
 14964  001F2A  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14965  001F2C  0E40               	movlw	64
 14966  001F2E  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14967  001F30  0E91               	movlw	low log@exponent
 14968  001F32  6E1B               	movwf	frexp@eptr,c
 14969  001F34  0E00               	movlw	high log@exponent
 14970  001F36  6E1C               	movwf	frexp@eptr+1,c
 14971  001F38  C08E  F018         	movff	log@x,frexp@value
 14972  001F3C  C08F  F019         	movff	log@x+1,frexp@value+1
 14973  001F40  C090  F01A         	movff	log@x+2,frexp@value+2
 14974  001F44  ECC0  F018         	call	_frexp	;wreg free
 14975  001F48  C018  F069         	movff	?_frexp,___ftmul@f1
 14976  001F4C  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
 14977  001F50  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
 14978  001F54  EC94  F012         	call	___ftmul	;wreg free
 14979  001F58  C069  F078         	movff	?___ftmul,___ftadd@f1
 14980  001F5C  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 14981  001F60  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 14982  001F64  0E00               	movlw	0
 14983  001F66  0100               	movlb	0	; () banked
 14984  001F68  6F7B               	movwf	___ftadd@f2& (0+255),b
 14985  001F6A  0E80               	movlw	128
 14986  001F6C  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 14987  001F6E  0EBF               	movlw	191
 14988  001F70  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 14989  001F72  EC1B  F00D         	call	___ftadd	;wreg free
 14990  001F76  C078  F08E         	movff	?___ftadd,log@x
 14991  001F7A  C079  F08F         	movff	?___ftadd+1,log@x+1
 14992  001F7E  C07A  F090         	movff	?___ftadd+2,log@x+2
 14993  001F82  0100               	movlb	0	; () banked
 14994  001F84  0791               	decf	log@exponent& (0+255),f,b
 14995  001F86  A0D8               	btfss	status,0,c
 14996  001F88  0792               	decf	(log@exponent+1)& (0+255),f,b
 14997                           
 14998                           ; BSR set to: 0
 14999  001F8A  C08E  F084         	movff	log@x,eval_poly@x
 15000  001F8E  C08F  F085         	movff	log@x+1,eval_poly@x+1
 15001  001F92  C090  F086         	movff	log@x+2,eval_poly@x+2
 15002  001F96  0E75               	movlw	low log@coeff
 15003  001F98  6F87               	movwf	eval_poly@d& (0+255),b
 15004  001F9A  0E06               	movlw	high log@coeff
 15005  001F9C  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 15006  001F9E  0E00               	movlw	0
 15007  001FA0  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 15008  001FA2  0E08               	movlw	8
 15009  001FA4  6F89               	movwf	eval_poly@n& (0+255),b
 15010  001FA6  EC4A  F015         	call	_eval_poly	;wreg free
 15011  001FAA  C084  F08E         	movff	?_eval_poly,log@x
 15012  001FAE  C085  F08F         	movff	?_eval_poly+1,log@x+1
 15013  001FB2  C086  F090         	movff	?_eval_poly+2,log@x+2
 15014  001FB6  0E72               	movlw	114
 15015  001FB8  0100               	movlb	0	; () banked
 15016  001FBA  6F6C               	movwf	___ftmul@f2& (0+255),b
 15017  001FBC  0E31               	movlw	49
 15018  001FBE  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 15019  001FC0  0E3F               	movlw	63
 15020  001FC2  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 15021  001FC4  C091  F020         	movff	log@exponent,___awtoft@c
 15022  001FC8  C092  F021         	movff	log@exponent+1,___awtoft@c+1
 15023  001FCC  EC4A  F01E         	call	___awtoft	;wreg free
 15024  001FD0  C020  F069         	movff	?___awtoft,___ftmul@f1
 15025  001FD4  C021  F06A         	movff	?___awtoft+1,___ftmul@f1+1
 15026  001FD8  C022  F06B         	movff	?___awtoft+2,___ftmul@f1+2
 15027  001FDC  EC94  F012         	call	___ftmul	;wreg free
 15028  001FE0  C069  F078         	movff	?___ftmul,___ftadd@f1
 15029  001FE4  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 15030  001FE8  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 15031  001FEC  C08E  F07B         	movff	log@x,___ftadd@f2
 15032  001FF0  C08F  F07C         	movff	log@x+1,___ftadd@f2+1
 15033  001FF4  C090  F07D         	movff	log@x+2,___ftadd@f2+2
 15034  001FF8  EC1B  F00D         	call	___ftadd	;wreg free
 15035  001FFC  C078  F08E         	movff	?___ftadd,?_log
 15036  002000  C079  F08F         	movff	?___ftadd+1,?_log+1
 15037  002004  C07A  F090         	movff	?___ftadd+2,?_log+2
 15038  002008  0012               	return	
 15039  00200A                     __end_of_log:
 15040                           	opt stack 0
 15041                           tosu	equ	0xFFF
 15042                           tosh	equ	0xFFE
 15043                           tosl	equ	0xFFD
 15044                           pclath	equ	0xFFA
 15045                           tblptru	equ	0xFF8
 15046                           tblptrh	equ	0xFF7
 15047                           tblptrl	equ	0xFF6
 15048                           tablat	equ	0xFF5
 15049                           prodh	equ	0xFF4
 15050                           prodl	equ	0xFF3
 15051                           intcon	equ	0xFF2
 15052                           intcon2	equ	0xFF1
 15053                           postinc0	equ	0xFEE
 15054                           plusw0	equ	0xFEB
 15055                           wreg	equ	0xFE8
 15056                           indf1	equ	0xFE7
 15057                           postdec1	equ	0xFE5
 15058                           fsr1h	equ	0xFE2
 15059                           fsr1l	equ	0xFE1
 15060                           indf2	equ	0xFDF
 15061                           postinc2	equ	0xFDE
 15062                           postdec2	equ	0xFDD
 15063                           plusw2	equ	0xFDB
 15064                           fsr2h	equ	0xFDA
 15065                           fsr2l	equ	0xFD9
 15066                           status	equ	0xFD8
 15067                           
 15068 ;; *************** function _exp *****************
 15069 ;; Defined at:
 15070 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 15071 ;; Parameters:    Size  Location     Type
 15072 ;;  x               3   55[BANK0 ] int 
 15073 ;; Auto vars:     Size  Location     Type
 15074 ;;  exponent        2   61[BANK0 ] int 
 15075 ;;  sign            1   63[BANK0 ] unsigned char 
 15076 ;; Return value:  Size  Location     Type
 15077 ;;                  3   55[BANK0 ] unsigned char 
 15078 ;; Registers used:
 15079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15080 ;; Tracked objects:
 15081 ;;		On entry : 0/0
 15082 ;;		On exit  : 0/0
 15083 ;;		Unchanged: 0/0
 15084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15085 ;;      Params:         0       3       0       0       0       0       0
 15086 ;;      Locals:         0       6       0       0       0       0       0
 15087 ;;      Temps:          0       0       0       0       0       0       0
 15088 ;;      Totals:         0       9       0       0       0       0       0
 15089 ;;Total ram usage:        9 bytes
 15090 ;; Hardware stack levels used:    1
 15091 ;; Hardware stack levels required when called:    7
 15092 ;; This function calls:
 15093 ;;		___awtoft
 15094 ;;		___ftdiv
 15095 ;;		___ftge
 15096 ;;		___ftmul
 15097 ;;		___ftneg
 15098 ;;		___ftsub
 15099 ;;		___fttol
 15100 ;;		_eval_poly
 15101 ;;		_floor
 15102 ;;		_ldexp
 15103 ;; This function is called by:
 15104 ;;		_pow
 15105 ;; This function uses a non-reentrant model
 15106 ;;
 15107                           
 15108                           	psect	text87
 15109  0010E2                     __ptext87:
 15110                           	opt stack 0
 15111  0010E2                     _exp:
 15112                           	opt stack 18
 15113                           
 15114                           ;incstack = 0
 15115  0010E2  0100               	movlb	0	; () banked
 15116  0010E4  5197               	movf	exp@x& (0+255),w,b
 15117  0010E6  1198               	iorwf	(exp@x+1)& (0+255),w,b
 15118  0010E8  1199               	iorwf	(exp@x+2)& (0+255),w,b
 15119  0010EA  A4D8               	btfss	status,2,c
 15120  0010EC  D007               	goto	l2182
 15121                           
 15122                           ; BSR set to: 0
 15123  0010EE  0E00               	movlw	0
 15124  0010F0  6F97               	movwf	?_exp& (0+255),b
 15125  0010F2  0E80               	movlw	128
 15126  0010F4  6F98               	movwf	(?_exp+1)& (0+255),b
 15127  0010F6  0E3F               	movlw	63
 15128  0010F8  6F99               	movwf	(?_exp+2)& (0+255),b
 15129                           
 15130                           ; BSR set to: 0
 15131  0010FA  0012               	return	
 15132  0010FC                     l2182:
 15133                           
 15134                           ; BSR set to: 0
 15135                           
 15136                           ; BSR set to: 0
 15137  0010FC  0E72               	movlw	114
 15138  0010FE  6E18               	movwf	___ftge@ff1,c
 15139  001100  0E31               	movlw	49
 15140  001102  6E19               	movwf	___ftge@ff1+1,c
 15141  001104  0E44               	movlw	68
 15142  001106  6E1A               	movwf	___ftge@ff1+2,c
 15143  001108  C097  F01B         	movff	exp@x,___ftge@ff2
 15144  00110C  C098  F01C         	movff	exp@x+1,___ftge@ff2+1
 15145  001110  C099  F01D         	movff	exp@x+2,___ftge@ff2+2
 15146  001114  EC08  F019         	call	___ftge	;wreg free
 15147  001118  B0D8               	btfsc	status,0,c
 15148  00111A  D00D               	goto	l2184
 15149  00111C  0E00               	movlw	0
 15150  00111E  0101               	movlb	1	; () banked
 15151  001120  6F6F               	movwf	(_errno+1)& (0+255),b
 15152  001122  0E22               	movlw	34
 15153  001124  6F6E               	movwf	_errno& (0+255),b
 15154  001126  0EFF               	movlw	255
 15155  001128  0100               	movlb	0	; () banked
 15156  00112A  6F97               	movwf	?_exp& (0+255),b
 15157  00112C  0E7F               	movlw	127
 15158  00112E  6F98               	movwf	(?_exp+1)& (0+255),b
 15159  001130  0E7F               	movlw	127
 15160  001132  6F99               	movwf	(?_exp+2)& (0+255),b
 15161                           
 15162                           ; BSR set to: 0
 15163  001134  0012               	return	
 15164  001136                     l2184:
 15165                           
 15166                           ; BSR set to: 0
 15167  001136  C097  F018         	movff	exp@x,___ftge@ff1
 15168  00113A  C098  F019         	movff	exp@x+1,___ftge@ff1+1
 15169  00113E  C099  F01A         	movff	exp@x+2,___ftge@ff1+2
 15170  001142  0E49               	movlw	73
 15171  001144  6E1B               	movwf	___ftge@ff2,c
 15172  001146  0E3A               	movlw	58
 15173  001148  6E1C               	movwf	___ftge@ff2+1,c
 15174  00114A  0EC4               	movlw	196
 15175  00114C  6E1D               	movwf	___ftge@ff2+2,c
 15176  00114E  EC08  F019         	call	___ftge	;wreg free
 15177  001152  B0D8               	btfsc	status,0,c
 15178  001154  D00D               	goto	l2185
 15179  001156  0E00               	movlw	0
 15180  001158  0101               	movlb	1	; () banked
 15181  00115A  6F6F               	movwf	(_errno+1)& (0+255),b
 15182  00115C  0E22               	movlw	34
 15183  00115E  6F6E               	movwf	_errno& (0+255),b
 15184  001160  0E00               	movlw	0
 15185  001162  0100               	movlb	0	; () banked
 15186  001164  6F97               	movwf	?_exp& (0+255),b
 15187  001166  0E00               	movlw	0
 15188  001168  6F98               	movwf	(?_exp+1)& (0+255),b
 15189  00116A  0E00               	movlw	0
 15190  00116C  6F99               	movwf	(?_exp+2)& (0+255),b
 15191                           
 15192                           ; BSR set to: 0
 15193  00116E  0012               	return	
 15194  001170                     l2185:
 15195                           
 15196                           ; BSR set to: 0
 15197  001170  0100               	movlb	0	; () banked
 15198  001172  AF99               	btfss	(exp@x+2)& (0+255),7,b
 15199  001174  D002               	goto	u7400
 15200  001176  0E01               	movlw	1
 15201  001178  D001               	goto	u7410
 15202  00117A                     u7400:
 15203  00117A  0E00               	movlw	0
 15204  00117C                     u7410:
 15205  00117C  6F9F               	movwf	exp@sign& (0+255),b
 15206                           
 15207                           ; BSR set to: 0
 15208  00117E  519F               	movf	exp@sign& (0+255),w,b
 15209  001180  B4D8               	btfsc	status,2,c
 15210  001182  D00E               	goto	l2186
 15211                           
 15212                           ; BSR set to: 0
 15213  001184  C097  F018         	movff	exp@x,___ftneg@f1
 15214  001188  C098  F019         	movff	exp@x+1,___ftneg@f1+1
 15215  00118C  C099  F01A         	movff	exp@x+2,___ftneg@f1+2
 15216  001190  EC21  F020         	call	___ftneg	;wreg free
 15217  001194  C018  F097         	movff	?___ftneg,exp@x
 15218  001198  C019  F098         	movff	?___ftneg+1,exp@x+1
 15219  00119C  C01A  F099         	movff	?___ftneg+2,exp@x+2
 15220  0011A0                     l2186:
 15221  0011A0  C097  F069         	movff	exp@x,___ftmul@f1
 15222  0011A4  C098  F06A         	movff	exp@x+1,___ftmul@f1+1
 15223  0011A8  C099  F06B         	movff	exp@x+2,___ftmul@f1+2
 15224  0011AC  0EAA               	movlw	170
 15225  0011AE  0100               	movlb	0	; () banked
 15226  0011B0  6F6C               	movwf	___ftmul@f2& (0+255),b
 15227  0011B2  0EB8               	movlw	184
 15228  0011B4  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 15229  0011B6  0E3F               	movlw	63
 15230  0011B8  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 15231  0011BA  EC94  F012         	call	___ftmul	;wreg free
 15232  0011BE  C069  F097         	movff	?___ftmul,exp@x
 15233  0011C2  C06A  F098         	movff	?___ftmul+1,exp@x+1
 15234  0011C6  C06B  F099         	movff	?___ftmul+2,exp@x+2
 15235  0011CA  C097  F08F         	movff	exp@x,floor@x
 15236  0011CE  C098  F090         	movff	exp@x+1,floor@x+1
 15237  0011D2  C099  F091         	movff	exp@x+2,floor@x+2
 15238  0011D6  ECD9  F014         	call	_floor	;wreg free
 15239  0011DA  C08F  F09A         	movff	?_floor,_exp$3544
 15240  0011DE  C090  F09B         	movff	?_floor+1,_exp$3544+1
 15241  0011E2  C091  F09C         	movff	?_floor+2,_exp$3544+2
 15242  0011E6  C09A  F078         	movff	_exp$3544,___fttol@f1
 15243  0011EA  C09B  F079         	movff	_exp$3544+1,___fttol@f1+1
 15244  0011EE  C09C  F07A         	movff	_exp$3544+2,___fttol@f1+2
 15245  0011F2  EC18  F012         	call	___fttol	;wreg free
 15246  0011F6  C078  F09D         	movff	?___fttol,exp@exponent
 15247  0011FA  C079  F09E         	movff	?___fttol+1,exp@exponent+1
 15248  0011FE  C097  F084         	movff	exp@x,___ftsub@f1
 15249  001202  C098  F085         	movff	exp@x+1,___ftsub@f1+1
 15250  001206  C099  F086         	movff	exp@x+2,___ftsub@f1+2
 15251  00120A  C09D  F020         	movff	exp@exponent,___awtoft@c
 15252  00120E  C09E  F021         	movff	exp@exponent+1,___awtoft@c+1
 15253  001212  EC4A  F01E         	call	___awtoft	;wreg free
 15254  001216  C020  F087         	movff	?___awtoft,___ftsub@f2
 15255  00121A  C021  F088         	movff	?___awtoft+1,___ftsub@f2+1
 15256  00121E  C022  F089         	movff	?___awtoft+2,___ftsub@f2+2
 15257  001222  EC76  F01D         	call	___ftsub	;wreg free
 15258  001226  C084  F097         	movff	?___ftsub,exp@x
 15259  00122A  C085  F098         	movff	?___ftsub+1,exp@x+1
 15260  00122E  C086  F099         	movff	?___ftsub+2,exp@x+2
 15261  001232  C097  F084         	movff	exp@x,eval_poly@x
 15262  001236  C098  F085         	movff	exp@x+1,eval_poly@x+1
 15263  00123A  C099  F086         	movff	exp@x+2,eval_poly@x+2
 15264  00123E  0E57               	movlw	low exp@coeff
 15265  001240  0100               	movlb	0	; () banked
 15266  001242  6F87               	movwf	eval_poly@d& (0+255),b
 15267  001244  0E06               	movlw	high exp@coeff
 15268  001246  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 15269  001248  0E00               	movlw	0
 15270  00124A  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 15271  00124C  0E09               	movlw	9
 15272  00124E  6F89               	movwf	eval_poly@n& (0+255),b
 15273  001250  EC4A  F015         	call	_eval_poly	;wreg free
 15274  001254  C084  F08E         	movff	?_eval_poly,ldexp@value
 15275  001258  C085  F08F         	movff	?_eval_poly+1,ldexp@value+1
 15276  00125C  C086  F090         	movff	?_eval_poly+2,ldexp@value+2
 15277  001260  C09D  F091         	movff	exp@exponent,ldexp@newexp
 15278  001264  C09E  F092         	movff	exp@exponent+1,ldexp@newexp+1
 15279  001268  ECB5  F015         	call	_ldexp	;wreg free
 15280  00126C  C08E  F097         	movff	?_ldexp,exp@x
 15281  001270  C08F  F098         	movff	?_ldexp+1,exp@x+1
 15282  001274  C090  F099         	movff	?_ldexp+2,exp@x+2
 15283  001278  0100               	movlb	0	; () banked
 15284  00127A  519F               	movf	exp@sign& (0+255),w,b
 15285  00127C  B4D8               	btfsc	status,2,c
 15286  00127E  D025               	goto	l2187
 15287                           
 15288                           ; BSR set to: 0
 15289  001280  2997               	incf	exp@x& (0+255),w,b
 15290  001282  E10E               	bnz	l7395
 15291  001284  0E7F               	movlw	127
 15292  001286  1998               	xorwf	(exp@x+1)& (0+255),w,b
 15293  001288  E10B               	bnz	l7395
 15294  00128A  0E7F               	movlw	127
 15295  00128C  1999               	xorwf	(exp@x+2)& (0+255),w,b
 15296  00128E  A4D8               	btfss	status,2,c
 15297  001290  D007               	goto	l2188
 15298                           
 15299                           ; BSR set to: 0
 15300  001292  0E00               	movlw	0
 15301  001294  6F97               	movwf	?_exp& (0+255),b
 15302  001296  0E00               	movlw	0
 15303  001298  6F98               	movwf	(?_exp+1)& (0+255),b
 15304  00129A  0E00               	movlw	0
 15305  00129C  6F99               	movwf	(?_exp+2)& (0+255),b
 15306                           
 15307                           ; BSR set to: 0
 15308  00129E  0012               	return	
 15309  0012A0                     l2188:
 15310  0012A0                     l7395:
 15311                           
 15312                           ; BSR set to: 0
 15313  0012A0  0E00               	movlw	0
 15314  0012A2  6E29               	movwf	___ftdiv@f1,c
 15315  0012A4  0E80               	movlw	128
 15316  0012A6  6E2A               	movwf	___ftdiv@f1+1,c
 15317  0012A8  0E3F               	movlw	63
 15318  0012AA  6E2B               	movwf	___ftdiv@f1+2,c
 15319  0012AC  C097  F02C         	movff	exp@x,___ftdiv@f2
 15320  0012B0  C098  F02D         	movff	exp@x+1,___ftdiv@f2+1
 15321  0012B4  C099  F02E         	movff	exp@x+2,___ftdiv@f2+2
 15322  0012B8  EC0F  F013         	call	___ftdiv	;wreg free
 15323  0012BC  C029  F097         	movff	?___ftdiv,?_exp
 15324  0012C0  C02A  F098         	movff	?___ftdiv+1,?_exp+1
 15325  0012C4  C02B  F099         	movff	?___ftdiv+2,?_exp+2
 15326  0012C8  0012               	return	
 15327  0012CA                     l2187:
 15328                           
 15329                           ; BSR set to: 0
 15330  0012CA  C097  F097         	movff	exp@x,?_exp
 15331  0012CE  C098  F098         	movff	exp@x+1,?_exp+1
 15332  0012D2  C099  F099         	movff	exp@x+2,?_exp+2
 15333  0012D6  0012               	return		;funcret
 15334  0012D8                     __end_of_exp:
 15335                           	opt stack 0
 15336                           tosu	equ	0xFFF
 15337                           tosh	equ	0xFFE
 15338                           tosl	equ	0xFFD
 15339                           pclath	equ	0xFFA
 15340                           tblptru	equ	0xFF8
 15341                           tblptrh	equ	0xFF7
 15342                           tblptrl	equ	0xFF6
 15343                           tablat	equ	0xFF5
 15344                           prodh	equ	0xFF4
 15345                           prodl	equ	0xFF3
 15346                           intcon	equ	0xFF2
 15347                           intcon2	equ	0xFF1
 15348                           postinc0	equ	0xFEE
 15349                           plusw0	equ	0xFEB
 15350                           wreg	equ	0xFE8
 15351                           indf1	equ	0xFE7
 15352                           postdec1	equ	0xFE5
 15353                           fsr1h	equ	0xFE2
 15354                           fsr1l	equ	0xFE1
 15355                           indf2	equ	0xFDF
 15356                           postinc2	equ	0xFDE
 15357                           postdec2	equ	0xFDD
 15358                           plusw2	equ	0xFDB
 15359                           fsr2h	equ	0xFDA
 15360                           fsr2l	equ	0xFD9
 15361                           status	equ	0xFD8
 15362                           
 15363 ;; *************** function _ldexp *****************
 15364 ;; Defined at:
 15365 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 15366 ;; Parameters:    Size  Location     Type
 15367 ;;  value           3   46[BANK0 ] unsigned char 
 15368 ;;  newexp          2   49[BANK0 ] int 
 15369 ;; Auto vars:     Size  Location     Type
 15370 ;;		None
 15371 ;; Return value:  Size  Location     Type
 15372 ;;                  3   46[BANK0 ] int 
 15373 ;; Registers used:
 15374 ;;		wreg, status,2, status,0
 15375 ;; Tracked objects:
 15376 ;;		On entry : 0/0
 15377 ;;		On exit  : 0/0
 15378 ;;		Unchanged: 0/0
 15379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15380 ;;      Params:         0       5       0       0       0       0       0
 15381 ;;      Locals:         0       0       0       0       0       0       0
 15382 ;;      Temps:          0       2       0       0       0       0       0
 15383 ;;      Totals:         0       7       0       0       0       0       0
 15384 ;;Total ram usage:        7 bytes
 15385 ;; Hardware stack levels used:    1
 15386 ;; Hardware stack levels required when called:    4
 15387 ;; This function calls:
 15388 ;;		Nothing
 15389 ;; This function is called by:
 15390 ;;		_exp
 15391 ;; This function uses a non-reentrant model
 15392 ;;
 15393                           
 15394                           	psect	text88
 15395  002B6A                     __ptext88:
 15396                           	opt stack 0
 15397  002B6A                     _ldexp:
 15398                           	opt stack 20
 15399                           
 15400                           ;incstack = 0
 15401  002B6A  0100               	movlb	0	; () banked
 15402  002B6C  518E               	movf	ldexp@value& (0+255),w,b
 15403  002B6E  118F               	iorwf	(ldexp@value+1)& (0+255),w,b
 15404  002B70  1190               	iorwf	(ldexp@value+2)& (0+255),w,b
 15405  002B72  A4D8               	btfss	status,2,c
 15406  002B74  D007               	goto	l2206
 15407                           
 15408                           ; BSR set to: 0
 15409  002B76  0E00               	movlw	0
 15410  002B78  6F8E               	movwf	?_ldexp& (0+255),b
 15411  002B7A  0E00               	movlw	0
 15412  002B7C  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15413  002B7E  0E00               	movlw	0
 15414  002B80  6F90               	movwf	(?_ldexp+2)& (0+255),b
 15415                           
 15416                           ; BSR set to: 0
 15417  002B82  0012               	return	
 15418  002B84                     l2206:
 15419                           
 15420                           ; BSR set to: 0
 15421                           
 15422                           ; BSR set to: 0
 15423  002B84  5190               	movf	(ldexp@value+2)& (0+255),w,b
 15424  002B86  0B7F               	andlw	127
 15425  002B88  6F93               	movwf	??_ldexp& (0+255),b
 15426  002B8A  6B94               	clrf	(??_ldexp+1)& (0+255),b
 15427  002B8C  90D8               	bcf	status,0,c
 15428  002B8E  3793               	rlcf	??_ldexp& (0+255),f,b
 15429  002B90  3794               	rlcf	(??_ldexp+1)& (0+255),f,b
 15430  002B92  5193               	movf	??_ldexp& (0+255),w,b
 15431  002B94  2791               	addwf	ldexp@newexp& (0+255),f,b
 15432  002B96  5194               	movf	(??_ldexp+1)& (0+255),w,b
 15433  002B98  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 15434  002B9A  AF8F               	btfss	(ldexp@value+1)& (0+255),7,b
 15435  002B9C  D003               	goto	u7140
 15436  002B9E  6B93               	clrf	??_ldexp& (0+255),b
 15437  002BA0  2B93               	incf	??_ldexp& (0+255),f,b
 15438  002BA2  D002               	goto	u7148
 15439  002BA4                     u7140:
 15440  002BA4  0100               	movlb	0	; () banked
 15441  002BA6  6B93               	clrf	??_ldexp& (0+255),b
 15442  002BA8                     u7148:
 15443  002BA8  5193               	movf	??_ldexp& (0+255),w,b
 15444  002BAA  2791               	addwf	ldexp@newexp& (0+255),f,b
 15445  002BAC  0E00               	movlw	0
 15446  002BAE  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 15447  002BB0  AF92               	btfss	(ldexp@newexp+1)& (0+255),7,b
 15448  002BB2  D00D               	goto	l2208
 15449                           
 15450                           ; BSR set to: 0
 15451  002BB4  0E00               	movlw	0
 15452  002BB6  0101               	movlb	1	; () banked
 15453  002BB8  6F6F               	movwf	(_errno+1)& (0+255),b
 15454  002BBA  0E22               	movlw	34
 15455  002BBC  6F6E               	movwf	_errno& (0+255),b
 15456  002BBE  0E00               	movlw	0
 15457  002BC0  0100               	movlb	0	; () banked
 15458  002BC2  6F8E               	movwf	?_ldexp& (0+255),b
 15459  002BC4  0E00               	movlw	0
 15460  002BC6  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15461  002BC8  0E00               	movlw	0
 15462  002BCA                     L2:
 15463  002BCA  6F90               	movwf	(?_ldexp+2)& (0+255),b
 15464                           
 15465                           ; BSR set to: 0
 15466  002BCC  0012               	return	
 15467  002BCE                     l2208:
 15468                           
 15469                           ; BSR set to: 0
 15470                           
 15471                           ; BSR set to: 0
 15472  002BCE  BF92               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 15473  002BD0  D017               	goto	l2210
 15474  002BD2  0592               	decf	(ldexp@newexp+1)& (0+255),w,b
 15475  002BD4  A0D8               	btfss	status,0,c
 15476  002BD6  D014               	goto	l2210
 15477                           
 15478                           ; BSR set to: 0
 15479  002BD8  0E00               	movlw	0
 15480  002BDA  0101               	movlb	1	; () banked
 15481  002BDC  6F6F               	movwf	(_errno+1)& (0+255),b
 15482  002BDE  0E22               	movlw	34
 15483  002BE0  6F6E               	movwf	_errno& (0+255),b
 15484                           
 15485                           ; BSR set to: 1
 15486  002BE2  0100               	movlb	0	; () banked
 15487  002BE4  AF90               	btfss	(ldexp@value+2)& (0+255),7,b
 15488  002BE6  D006               	goto	l2211
 15489                           
 15490                           ; BSR set to: 0
 15491  002BE8  0EFF               	movlw	255
 15492  002BEA  6F8E               	movwf	?_ldexp& (0+255),b
 15493  002BEC  0E7F               	movlw	127
 15494  002BEE  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15495  002BF0  0EFF               	movlw	255
 15496  002BF2  D7EB               	goto	L2
 15497  002BF4                     l2211:
 15498                           
 15499                           ; BSR set to: 0
 15500                           
 15501                           ; BSR set to: 0
 15502  002BF4  0EFF               	movlw	255
 15503  002BF6  6F8E               	movwf	?_ldexp& (0+255),b
 15504  002BF8  0E7F               	movlw	127
 15505  002BFA  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15506  002BFC  0E7F               	movlw	127
 15507  002BFE  D7E5               	goto	L2
 15508  002C00                     l2210:
 15509                           
 15510                           ; BSR set to: 0
 15511                           
 15512                           ; BSR set to: 0
 15513  002C00  3592               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 15514  002C02  3192               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 15515  002C04  6F94               	movwf	(??_ldexp+1)& (0+255),b
 15516  002C06  3191               	rrcf	ldexp@newexp& (0+255),w,b
 15517  002C08  6F93               	movwf	??_ldexp& (0+255),b
 15518  002C0A  5190               	movf	(ldexp@value+2)& (0+255),w,b
 15519  002C0C  1993               	xorwf	??_ldexp& (0+255),w,b
 15520  002C0E  0B80               	andlw	-128
 15521  002C10  1993               	xorwf	??_ldexp& (0+255),w,b
 15522  002C12  6F90               	movwf	(ldexp@value+2)& (0+255),b
 15523  002C14  C091  F093         	movff	ldexp@newexp,??_ldexp
 15524  002C18  0E01               	movlw	1
 15525  002C1A  1793               	andwf	??_ldexp& (0+255),f,b
 15526  002C1C  3393               	rrcf	??_ldexp& (0+255),f,b
 15527  002C1E  3393               	rrcf	??_ldexp& (0+255),f,b
 15528  002C20  518F               	movf	(ldexp@value+1)& (0+255),w,b
 15529  002C22  1993               	xorwf	??_ldexp& (0+255),w,b
 15530  002C24  0B7F               	andlw	-129
 15531  002C26  1993               	xorwf	??_ldexp& (0+255),w,b
 15532  002C28  6F8F               	movwf	(ldexp@value+1)& (0+255),b
 15533                           
 15534                           ; BSR set to: 0
 15535                           
 15536                           ; BSR set to: 0
 15537                           
 15538                           ; BSR set to: 0
 15539  002C2A  C08E  F08E         	movff	ldexp@value,?_ldexp
 15540  002C2E  C08F  F08F         	movff	ldexp@value+1,?_ldexp+1
 15541  002C32  C090  F090         	movff	ldexp@value+2,?_ldexp+2
 15542  002C36  0012               	return	
 15543  002C38                     __end_of_ldexp:
 15544                           	opt stack 0
 15545                           tosu	equ	0xFFF
 15546                           tosh	equ	0xFFE
 15547                           tosl	equ	0xFFD
 15548                           pclath	equ	0xFFA
 15549                           tblptru	equ	0xFF8
 15550                           tblptrh	equ	0xFF7
 15551                           tblptrl	equ	0xFF6
 15552                           tablat	equ	0xFF5
 15553                           prodh	equ	0xFF4
 15554                           prodl	equ	0xFF3
 15555                           intcon	equ	0xFF2
 15556                           intcon2	equ	0xFF1
 15557                           postinc0	equ	0xFEE
 15558                           plusw0	equ	0xFEB
 15559                           wreg	equ	0xFE8
 15560                           indf1	equ	0xFE7
 15561                           postdec1	equ	0xFE5
 15562                           fsr1h	equ	0xFE2
 15563                           fsr1l	equ	0xFE1
 15564                           indf2	equ	0xFDF
 15565                           postinc2	equ	0xFDE
 15566                           postdec2	equ	0xFDD
 15567                           plusw2	equ	0xFDB
 15568                           fsr2h	equ	0xFDA
 15569                           fsr2l	equ	0xFD9
 15570                           status	equ	0xFD8
 15571                           
 15572 ;; *************** function _floor *****************
 15573 ;; Defined at:
 15574 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 15575 ;; Parameters:    Size  Location     Type
 15576 ;;  x               3   47[BANK0 ] int 
 15577 ;; Auto vars:     Size  Location     Type
 15578 ;;  i               3   50[BANK0 ] int 
 15579 ;;  expon           2   53[BANK0 ] int 
 15580 ;; Return value:  Size  Location     Type
 15581 ;;                  3   47[BANK0 ] int 
 15582 ;; Registers used:
 15583 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15584 ;; Tracked objects:
 15585 ;;		On entry : 0/0
 15586 ;;		On exit  : 0/0
 15587 ;;		Unchanged: 0/0
 15588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15589 ;;      Params:         0       3       0       0       0       0       0
 15590 ;;      Locals:         0       5       0       0       0       0       0
 15591 ;;      Temps:          0       0       0       0       0       0       0
 15592 ;;      Totals:         0       8       0       0       0       0       0
 15593 ;;Total ram usage:        8 bytes
 15594 ;; Hardware stack levels used:    1
 15595 ;; Hardware stack levels required when called:    6
 15596 ;; This function calls:
 15597 ;;		___altoft
 15598 ;;		___ftadd
 15599 ;;		___ftge
 15600 ;;		___fttol
 15601 ;;		_frexp
 15602 ;; This function is called by:
 15603 ;;		_exp
 15604 ;; This function uses a non-reentrant model
 15605 ;;
 15606                           
 15607                           	psect	text89
 15608  0029B2                     __ptext89:
 15609                           	opt stack 0
 15610  0029B2                     _floor:
 15611                           	opt stack 18
 15612                           
 15613                           ; BSR set to: 0
 15614                           ;incstack = 0
 15615  0029B2  C08F  F018         	movff	floor@x,frexp@value
 15616  0029B6  C090  F019         	movff	floor@x+1,frexp@value+1
 15617  0029BA  C091  F01A         	movff	floor@x+2,frexp@value+2
 15618  0029BE  0E95               	movlw	low floor@expon
 15619  0029C0  6E1B               	movwf	frexp@eptr,c
 15620  0029C2  0E00               	movlw	high floor@expon
 15621  0029C4  6E1C               	movwf	frexp@eptr+1,c
 15622  0029C6  ECC0  F018         	call	_frexp	;wreg free
 15623  0029CA  0100               	movlb	0	; () banked
 15624  0029CC  AF96               	btfss	(floor@expon+1)& (0+255),7,b
 15625  0029CE  D010               	goto	l2193
 15626                           
 15627                           ; BSR set to: 0
 15628  0029D0  AF91               	btfss	(floor@x+2)& (0+255),7,b
 15629  0029D2  D007               	goto	l2194
 15630                           
 15631                           ; BSR set to: 0
 15632  0029D4  0E00               	movlw	0
 15633  0029D6  6F8F               	movwf	?_floor& (0+255),b
 15634  0029D8  0E80               	movlw	128
 15635  0029DA  6F90               	movwf	(?_floor+1)& (0+255),b
 15636  0029DC  0EBF               	movlw	191
 15637  0029DE  6F91               	movwf	(?_floor+2)& (0+255),b
 15638                           
 15639                           ; BSR set to: 0
 15640  0029E0  0012               	return	
 15641  0029E2                     l2194:
 15642                           
 15643                           ; BSR set to: 0
 15644                           
 15645                           ; BSR set to: 0
 15646  0029E2  0E00               	movlw	0
 15647  0029E4  6F8F               	movwf	?_floor& (0+255),b
 15648  0029E6  0E00               	movlw	0
 15649  0029E8  6F90               	movwf	(?_floor+1)& (0+255),b
 15650  0029EA  0E00               	movlw	0
 15651  0029EC  6F91               	movwf	(?_floor+2)& (0+255),b
 15652                           
 15653                           ; BSR set to: 0
 15654  0029EE  0012               	return	
 15655  0029F0                     l2193:
 15656                           
 15657                           ; BSR set to: 0
 15658                           
 15659                           ; BSR set to: 0
 15660  0029F0  5196               	movf	(floor@expon+1)& (0+255),w,b
 15661  0029F2  E104               	bnz	u7100
 15662  0029F4  0E15               	movlw	21
 15663  0029F6  5D95               	subwf	floor@expon& (0+255),w,b
 15664  0029F8  A0D8               	btfss	status,0,c
 15665  0029FA  D007               	goto	l2196
 15666  0029FC                     u7100:
 15667                           
 15668                           ; BSR set to: 0
 15669  0029FC  C08F  F08F         	movff	floor@x,?_floor
 15670  002A00  C090  F090         	movff	floor@x+1,?_floor+1
 15671  002A04  C091  F091         	movff	floor@x+2,?_floor+2
 15672  002A08  0012               	return	
 15673  002A0A                     l2196:
 15674                           
 15675                           ; BSR set to: 0
 15676                           
 15677                           ; BSR set to: 0
 15678  002A0A  C08F  F078         	movff	floor@x,___fttol@f1
 15679  002A0E  C090  F079         	movff	floor@x+1,___fttol@f1+1
 15680  002A12  C091  F07A         	movff	floor@x+2,___fttol@f1+2
 15681  002A16  EC18  F012         	call	___fttol	;wreg free
 15682  002A1A  C078  F087         	movff	?___fttol,___altoft@c
 15683  002A1E  C079  F088         	movff	?___fttol+1,___altoft@c+1
 15684  002A22  C07A  F089         	movff	?___fttol+2,___altoft@c+2
 15685  002A26  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
 15686  002A2A  EC15  F01A         	call	___altoft	;wreg free
 15687  002A2E  C087  F092         	movff	?___altoft,floor@i
 15688  002A32  C088  F093         	movff	?___altoft+1,floor@i+1
 15689  002A36  C089  F094         	movff	?___altoft+2,floor@i+2
 15690  002A3A  C08F  F018         	movff	floor@x,___ftge@ff1
 15691  002A3E  C090  F019         	movff	floor@x+1,___ftge@ff1+1
 15692  002A42  C091  F01A         	movff	floor@x+2,___ftge@ff1+2
 15693  002A46  C092  F01B         	movff	floor@i,___ftge@ff2
 15694  002A4A  C093  F01C         	movff	floor@i+1,___ftge@ff2+1
 15695  002A4E  C094  F01D         	movff	floor@i+2,___ftge@ff2+2
 15696  002A52  EC08  F019         	call	___ftge	;wreg free
 15697  002A56  B0D8               	btfsc	status,0,c
 15698  002A58  D016               	goto	l2197
 15699  002A5A  C092  F078         	movff	floor@i,___ftadd@f1
 15700  002A5E  C093  F079         	movff	floor@i+1,___ftadd@f1+1
 15701  002A62  C094  F07A         	movff	floor@i+2,___ftadd@f1+2
 15702  002A66  0E00               	movlw	0
 15703  002A68  0100               	movlb	0	; () banked
 15704  002A6A  6F7B               	movwf	___ftadd@f2& (0+255),b
 15705  002A6C  0E80               	movlw	128
 15706  002A6E  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 15707  002A70  0EBF               	movlw	191
 15708  002A72  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 15709  002A74  EC1B  F00D         	call	___ftadd	;wreg free
 15710  002A78  C078  F08F         	movff	?___ftadd,?_floor
 15711  002A7C  C079  F090         	movff	?___ftadd+1,?_floor+1
 15712  002A80  C07A  F091         	movff	?___ftadd+2,?_floor+2
 15713  002A84  0012               	return	
 15714  002A86                     l2197:
 15715  002A86  C092  F08F         	movff	floor@i,?_floor
 15716  002A8A  C093  F090         	movff	floor@i+1,?_floor+1
 15717  002A8E  C094  F091         	movff	floor@i+2,?_floor+2
 15718  002A92  0012               	return		;funcret
 15719  002A94                     __end_of_floor:
 15720                           	opt stack 0
 15721                           tosu	equ	0xFFF
 15722                           tosh	equ	0xFFE
 15723                           tosl	equ	0xFFD
 15724                           pclath	equ	0xFFA
 15725                           tblptru	equ	0xFF8
 15726                           tblptrh	equ	0xFF7
 15727                           tblptrl	equ	0xFF6
 15728                           tablat	equ	0xFF5
 15729                           prodh	equ	0xFF4
 15730                           prodl	equ	0xFF3
 15731                           intcon	equ	0xFF2
 15732                           intcon2	equ	0xFF1
 15733                           postinc0	equ	0xFEE
 15734                           plusw0	equ	0xFEB
 15735                           wreg	equ	0xFE8
 15736                           indf1	equ	0xFE7
 15737                           postdec1	equ	0xFE5
 15738                           fsr1h	equ	0xFE2
 15739                           fsr1l	equ	0xFE1
 15740                           indf2	equ	0xFDF
 15741                           postinc2	equ	0xFDE
 15742                           postdec2	equ	0xFDD
 15743                           plusw2	equ	0xFDB
 15744                           fsr2h	equ	0xFDA
 15745                           fsr2l	equ	0xFD9
 15746                           status	equ	0xFD8
 15747                           
 15748 ;; *************** function _frexp *****************
 15749 ;; Defined at:
 15750 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 15751 ;; Parameters:    Size  Location     Type
 15752 ;;  value           3   23[COMRAM] int 
 15753 ;;  eptr            2   26[COMRAM] PTR int 
 15754 ;;		 -> log@exponent(2), floor@expon(2), 
 15755 ;; Auto vars:     Size  Location     Type
 15756 ;;		None
 15757 ;; Return value:  Size  Location     Type
 15758 ;;                  3   23[COMRAM] PTR int 
 15759 ;; Registers used:
 15760 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15761 ;; Tracked objects:
 15762 ;;		On entry : 0/0
 15763 ;;		On exit  : 0/0
 15764 ;;		Unchanged: 0/0
 15765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15766 ;;      Params:         5       0       0       0       0       0       0
 15767 ;;      Locals:         0       0       0       0       0       0       0
 15768 ;;      Temps:          2       0       0       0       0       0       0
 15769 ;;      Totals:         7       0       0       0       0       0       0
 15770 ;;Total ram usage:        7 bytes
 15771 ;; Hardware stack levels used:    1
 15772 ;; Hardware stack levels required when called:    4
 15773 ;; This function calls:
 15774 ;;		Nothing
 15775 ;; This function is called by:
 15776 ;;		_floor
 15777 ;;		_log
 15778 ;; This function uses a non-reentrant model
 15779 ;;
 15780                           
 15781                           	psect	text90
 15782  003180                     __ptext90:
 15783                           	opt stack 0
 15784  003180                     _frexp:
 15785                           	opt stack 20
 15786                           
 15787                           ;incstack = 0
 15788  003180  5018               	movf	frexp@value,w,c
 15789  003182  1019               	iorwf	frexp@value+1,w,c
 15790  003184  101A               	iorwf	frexp@value+2,w,c
 15791  003186  A4D8               	btfss	status,2,c
 15792  003188  D00F               	goto	l2202
 15793  00318A  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15794  00318E  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15795  003192  0E00               	movlw	0
 15796  003194  6EDE               	movwf	postinc2,c
 15797  003196  0E00               	movlw	0
 15798  003198  6EDD               	movwf	postdec2,c
 15799  00319A  0E00               	movlw	0
 15800  00319C  6E18               	movwf	?_frexp,c
 15801  00319E  0E00               	movlw	0
 15802  0031A0  6E19               	movwf	?_frexp+1,c
 15803  0031A2  0E00               	movlw	0
 15804  0031A4  6E1A               	movwf	?_frexp+2,c
 15805  0031A6  0012               	return	
 15806  0031A8                     l2202:
 15807  0031A8  501A               	movf	frexp@value+2,w,c
 15808  0031AA  0B7F               	andlw	127
 15809  0031AC  6E1D               	movwf	??_frexp& (0+255),c
 15810  0031AE  6A1E               	clrf	(??_frexp+1)& (0+255),c
 15811  0031B0  90D8               	bcf	status,0,c
 15812  0031B2  361D               	rlcf	??_frexp,f,c
 15813  0031B4  361E               	rlcf	??_frexp+1,f,c
 15814  0031B6  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15815  0031BA  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15816  0031BE  C01D  FFDE         	movff	??_frexp,postinc2
 15817  0031C2  C01E  FFDD         	movff	??_frexp+1,postdec2
 15818  0031C6  AE19               	btfss	frexp@value+1,7,c
 15819  0031C8  D003               	goto	u6980
 15820  0031CA  6A1D               	clrf	??_frexp& (0+255),c
 15821  0031CC  2A1D               	incf	??_frexp& (0+255),f,c
 15822  0031CE  D001               	goto	u6988
 15823  0031D0                     u6980:
 15824  0031D0  6A1D               	clrf	??_frexp& (0+255),c
 15825  0031D2                     u6988:
 15826  0031D2  501D               	movf	??_frexp,w,c
 15827  0031D4  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15828  0031D8  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15829  0031DC  12DE               	iorwf	postinc2,f,c
 15830  0031DE  0E00               	movlw	0
 15831  0031E0  12DD               	iorwf	postdec2,f,c
 15832  0031E2  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15833  0031E6  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15834  0031EA  0E82               	movlw	130
 15835  0031EC  26DE               	addwf	postinc2,f,c
 15836  0031EE  0EFF               	movlw	255
 15837  0031F0  22DD               	addwfc	postdec2,f,c
 15838  0031F2  801A               	bsf	frexp@value+2,0,c
 15839  0031F4  821A               	bsf	frexp@value+2,1,c
 15840  0031F6  841A               	bsf	frexp@value+2,2,c
 15841  0031F8  861A               	bsf	frexp@value+2,3,c
 15842  0031FA  881A               	bsf	frexp@value+2,4,c
 15843  0031FC  8A1A               	bsf	frexp@value+2,5,c
 15844  0031FE  9C1A               	bcf	frexp@value+2,6,c
 15845  003200  9E19               	bcf	frexp@value+1,7,c
 15846  003202  C018  F018         	movff	frexp@value,?_frexp
 15847  003206  C019  F019         	movff	frexp@value+1,?_frexp+1
 15848  00320A  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 15849  00320E  0012               	return	
 15850  003210                     __end_of_frexp:
 15851                           	opt stack 0
 15852                           tosu	equ	0xFFF
 15853                           tosh	equ	0xFFE
 15854                           tosl	equ	0xFFD
 15855                           pclath	equ	0xFFA
 15856                           tblptru	equ	0xFF8
 15857                           tblptrh	equ	0xFF7
 15858                           tblptrl	equ	0xFF6
 15859                           tablat	equ	0xFF5
 15860                           prodh	equ	0xFF4
 15861                           prodl	equ	0xFF3
 15862                           intcon	equ	0xFF2
 15863                           intcon2	equ	0xFF1
 15864                           postinc0	equ	0xFEE
 15865                           plusw0	equ	0xFEB
 15866                           wreg	equ	0xFE8
 15867                           indf1	equ	0xFE7
 15868                           postdec1	equ	0xFE5
 15869                           fsr1h	equ	0xFE2
 15870                           fsr1l	equ	0xFE1
 15871                           indf2	equ	0xFDF
 15872                           postinc2	equ	0xFDE
 15873                           postdec2	equ	0xFDD
 15874                           plusw2	equ	0xFDB
 15875                           fsr2h	equ	0xFDA
 15876                           fsr2l	equ	0xFD9
 15877                           status	equ	0xFD8
 15878                           
 15879 ;; *************** function ___fttol *****************
 15880 ;; Defined at:
 15881 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 15882 ;; Parameters:    Size  Location     Type
 15883 ;;  f1              3   24[BANK0 ] float 
 15884 ;; Auto vars:     Size  Location     Type
 15885 ;;  lval            4   34[BANK0 ] unsigned long 
 15886 ;;  exp1            1   38[BANK0 ] unsigned char 
 15887 ;;  sign1           1   33[BANK0 ] unsigned char 
 15888 ;; Return value:  Size  Location     Type
 15889 ;;                  4   24[BANK0 ] long 
 15890 ;; Registers used:
 15891 ;;		wreg, status,2, status,0
 15892 ;; Tracked objects:
 15893 ;;		On entry : 0/0
 15894 ;;		On exit  : 0/0
 15895 ;;		Unchanged: 0/0
 15896 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15897 ;;      Params:         0       4       0       0       0       0       0
 15898 ;;      Locals:         0       6       0       0       0       0       0
 15899 ;;      Temps:          0       5       0       0       0       0       0
 15900 ;;      Totals:         0      15       0       0       0       0       0
 15901 ;;Total ram usage:       15 bytes
 15902 ;; Hardware stack levels used:    1
 15903 ;; Hardware stack levels required when called:    4
 15904 ;; This function calls:
 15905 ;;		Nothing
 15906 ;; This function is called by:
 15907 ;;		_AdcConvert
 15908 ;;		_ReadIntFromEeprom
 15909 ;;		_pow
 15910 ;;		_exp
 15911 ;;		_floor
 15912 ;; This function uses a non-reentrant model
 15913 ;;
 15914                           
 15915                           	psect	text91
 15916  002430                     __ptext91:
 15917                           	opt stack 0
 15918  002430                     ___fttol:
 15919                           	opt stack 19
 15920                           
 15921                           ;incstack = 0
 15922  002430  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 15923  002434  0100               	movlb	0	; () banked
 15924  002436  6B7D               	clrf	(??___fttol+1)& (0+255),b
 15925  002438  6B7E               	clrf	(??___fttol+2)& (0+255),b
 15926  00243A  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 15927  00243C  377C               	rlcf	??___fttol& (0+255),f,b
 15928  00243E  E301               	bnc	u6891
 15929  002440  817D               	bsf	(??___fttol+1)& (0+255),0,b
 15930  002442                     u6891:
 15931  002442  517C               	movf	??___fttol& (0+255),w,b
 15932  002444  6F86               	movwf	___fttol@exp1& (0+255),b
 15933  002446  5186               	movf	___fttol@exp1& (0+255),w,b
 15934  002448  A4D8               	btfss	status,2,c
 15935  00244A  D009               	goto	l1859
 15936                           
 15937                           ; BSR set to: 0
 15938  00244C  0E00               	movlw	0
 15939  00244E  6F78               	movwf	?___fttol& (0+255),b
 15940  002450  0E00               	movlw	0
 15941  002452  6F79               	movwf	(?___fttol+1)& (0+255),b
 15942  002454  0E00               	movlw	0
 15943  002456  6F7A               	movwf	(?___fttol+2)& (0+255),b
 15944  002458  0E00               	movlw	0
 15945  00245A  6F7B               	movwf	(?___fttol+3)& (0+255),b
 15946                           
 15947                           ; BSR set to: 0
 15948  00245C  0012               	return	
 15949  00245E                     l1859:
 15950                           
 15951                           ; BSR set to: 0
 15952                           
 15953                           ; BSR set to: 0
 15954  00245E  0E17               	movlw	23
 15955  002460  6F7C               	movwf	??___fttol& (0+255),b
 15956  002462  C078  F07D         	movff	___fttol@f1,??___fttol+1
 15957  002466  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 15958  00246A  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 15959  00246E  297C               	incf	??___fttol& (0+255),w,b
 15960  002470  6F80               	movwf	(??___fttol+4)& (0+255),b
 15961  002472  D004               	goto	u6910
 15962  002474                     u6915:
 15963  002474  90D8               	bcf	status,0,c
 15964  002476  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 15965  002478  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 15966  00247A  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 15967  00247C                     u6910:
 15968  00247C  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 15969  00247E  D7FA               	goto	u6915
 15970  002480  0100               	movlb	0	; () banked
 15971  002482  517D               	movf	(??___fttol+1)& (0+255),w,b
 15972  002484  6F81               	movwf	___fttol@sign1& (0+255),b
 15973                           
 15974                           ; BSR set to: 0
 15975  002486  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 15976                           
 15977                           ; BSR set to: 0
 15978  002488  0EFF               	movlw	255
 15979  00248A  1778               	andwf	___fttol@f1& (0+255),f,b
 15980  00248C  0EFF               	movlw	255
 15981  00248E  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 15982  002490  0E00               	movlw	0
 15983  002492  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 15984                           
 15985                           ; BSR set to: 0
 15986  002494  5178               	movf	___fttol@f1& (0+255),w,b
 15987  002496  6F82               	movwf	___fttol@lval& (0+255),b
 15988  002498  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 15989  00249A  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 15990  00249C  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 15991  00249E  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 15992  0024A0  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 15993                           
 15994                           ; BSR set to: 0
 15995  0024A2  0E8E               	movlw	142
 15996  0024A4  5F86               	subwf	___fttol@exp1& (0+255),f,b
 15997                           
 15998                           ; BSR set to: 0
 15999  0024A6  AF86               	btfss	___fttol@exp1& (0+255),7,b
 16000  0024A8  D016               	goto	l1861
 16001                           
 16002                           ; BSR set to: 0
 16003  0024AA  5186               	movf	___fttol@exp1& (0+255),w,b
 16004  0024AC  0A80               	xorlw	128
 16005  0024AE  0F8F               	addlw	143
 16006  0024B0  B0D8               	btfsc	status,0,c
 16007  0024B2  D009               	goto	l1862
 16008                           
 16009                           ; BSR set to: 0
 16010  0024B4  0E00               	movlw	0
 16011  0024B6  6F78               	movwf	?___fttol& (0+255),b
 16012  0024B8  0E00               	movlw	0
 16013  0024BA  6F79               	movwf	(?___fttol+1)& (0+255),b
 16014  0024BC  0E00               	movlw	0
 16015  0024BE  6F7A               	movwf	(?___fttol+2)& (0+255),b
 16016  0024C0  0E00               	movlw	0
 16017  0024C2  6F7B               	movwf	(?___fttol+3)& (0+255),b
 16018                           
 16019                           ; BSR set to: 0
 16020  0024C4  0012               	return	
 16021  0024C6                     l1862:
 16022                           
 16023                           ; BSR set to: 0
 16024                           
 16025                           ; BSR set to: 0
 16026                           
 16027                           ; BSR set to: 0
 16028  0024C6  90D8               	bcf	status,0,c
 16029  0024C8  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 16030  0024CA  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 16031  0024CC  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 16032  0024CE  3382               	rrcf	___fttol@lval& (0+255),f,b
 16033                           
 16034                           ; BSR set to: 0
 16035  0024D0  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 16036  0024D2  D7F9               	goto	l1862
 16037                           
 16038                           ; BSR set to: 0
 16039  0024D4  D015               	goto	u6950
 16040  0024D6                     l1861:
 16041                           
 16042                           ; BSR set to: 0
 16043                           
 16044                           ; BSR set to: 0
 16045  0024D6  0E17               	movlw	23
 16046  0024D8  6586               	cpfsgt	___fttol@exp1& (0+255),b
 16047  0024DA  D00F               	goto	l1867
 16048                           
 16049                           ; BSR set to: 0
 16050  0024DC  0E00               	movlw	0
 16051  0024DE  6F78               	movwf	?___fttol& (0+255),b
 16052  0024E0  0E00               	movlw	0
 16053  0024E2  6F79               	movwf	(?___fttol+1)& (0+255),b
 16054  0024E4  0E00               	movlw	0
 16055  0024E6  6F7A               	movwf	(?___fttol+2)& (0+255),b
 16056  0024E8  0E00               	movlw	0
 16057  0024EA  6F7B               	movwf	(?___fttol+3)& (0+255),b
 16058                           
 16059                           ; BSR set to: 0
 16060  0024EC  0012               	return	
 16061  0024EE                     
 16062                           ; BSR set to: 0
 16063                           
 16064                           ; BSR set to: 0
 16065  0024EE  90D8               	bcf	status,0,c
 16066  0024F0  3782               	rlcf	___fttol@lval& (0+255),f,b
 16067  0024F2  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 16068  0024F4  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 16069  0024F6  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 16070  0024F8  0786               	decf	___fttol@exp1& (0+255),f,b
 16071  0024FA                     l1867:
 16072                           
 16073                           ; BSR set to: 0
 16074                           
 16075                           ; BSR set to: 0
 16076  0024FA  5186               	movf	___fttol@exp1& (0+255),w,b
 16077  0024FC  A4D8               	btfss	status,2,c
 16078  0024FE  D7F7               	goto	l1868
 16079  002500                     u6950:
 16080                           
 16081                           ; BSR set to: 0
 16082                           
 16083                           ; BSR set to: 0
 16084                           
 16085                           ; BSR set to: 0
 16086  002500  5181               	movf	___fttol@sign1& (0+255),w,b
 16087  002502  B4D8               	btfsc	status,2,c
 16088  002504  D008               	goto	l1870
 16089                           
 16090                           ; BSR set to: 0
 16091  002506  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 16092  002508  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 16093  00250A  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 16094  00250C  6D82               	negf	___fttol@lval& (0+255),b
 16095  00250E  0E00               	movlw	0
 16096  002510  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 16097  002512  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 16098  002514  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 16099  002516                     l1870:
 16100                           
 16101                           ; BSR set to: 0
 16102                           
 16103                           ; BSR set to: 0
 16104  002516  C082  F078         	movff	___fttol@lval,?___fttol
 16105  00251A  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 16106  00251E  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 16107  002522  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 16108  002526  0012               	return	
 16109  002528                     __end_of___fttol:
 16110                           	opt stack 0
 16111                           tosu	equ	0xFFF
 16112                           tosh	equ	0xFFE
 16113                           tosl	equ	0xFFD
 16114                           pclath	equ	0xFFA
 16115                           tblptru	equ	0xFF8
 16116                           tblptrh	equ	0xFF7
 16117                           tblptrl	equ	0xFF6
 16118                           tablat	equ	0xFF5
 16119                           prodh	equ	0xFF4
 16120                           prodl	equ	0xFF3
 16121                           intcon	equ	0xFF2
 16122                           intcon2	equ	0xFF1
 16123                           postinc0	equ	0xFEE
 16124                           plusw0	equ	0xFEB
 16125                           wreg	equ	0xFE8
 16126                           indf1	equ	0xFE7
 16127                           postdec1	equ	0xFE5
 16128                           fsr1h	equ	0xFE2
 16129                           fsr1l	equ	0xFE1
 16130                           indf2	equ	0xFDF
 16131                           postinc2	equ	0xFDE
 16132                           postdec2	equ	0xFDD
 16133                           plusw2	equ	0xFDB
 16134                           fsr2h	equ	0xFDA
 16135                           fsr2l	equ	0xFD9
 16136                           status	equ	0xFD8
 16137                           
 16138 ;; *************** function ___ftge *****************
 16139 ;; Defined at:
 16140 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 16141 ;; Parameters:    Size  Location     Type
 16142 ;;  ff1             3   23[COMRAM] float 
 16143 ;;  ff2             3   26[COMRAM] float 
 16144 ;; Auto vars:     Size  Location     Type
 16145 ;;		None
 16146 ;; Return value:  Size  Location     Type
 16147 ;;		None               void
 16148 ;; Registers used:
 16149 ;;		wreg, status,2, status,0
 16150 ;; Tracked objects:
 16151 ;;		On entry : 0/0
 16152 ;;		On exit  : 0/0
 16153 ;;		Unchanged: 0/0
 16154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16155 ;;      Params:         6       0       0       0       0       0       0
 16156 ;;      Locals:         0       0       0       0       0       0       0
 16157 ;;      Temps:          3       0       0       0       0       0       0
 16158 ;;      Totals:         9       0       0       0       0       0       0
 16159 ;;Total ram usage:        9 bytes
 16160 ;; Hardware stack levels used:    1
 16161 ;; Hardware stack levels required when called:    4
 16162 ;; This function calls:
 16163 ;;		Nothing
 16164 ;; This function is called by:
 16165 ;;		_CheckFlashPrecentage
 16166 ;;		_pow
 16167 ;;		_exp
 16168 ;;		_floor
 16169 ;; This function uses a non-reentrant model
 16170 ;;
 16171                           
 16172                           	psect	text92
 16173  003210                     __ptext92:
 16174                           	opt stack 0
 16175  003210                     ___ftge:
 16176                           	opt stack 19
 16177                           
 16178                           ; BSR set to: 0
 16179                           ;incstack = 0
 16180  003210  AE1A               	btfss	___ftge@ff1+2,7,c
 16181  003212  D016               	goto	l1831
 16182  003214  C018  F01E         	movff	___ftge@ff1,??___ftge
 16183  003218  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 16184  00321C  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 16185  003220  1E1E               	comf	??___ftge,f,c
 16186  003222  1E1F               	comf	??___ftge+1,f,c
 16187  003224  1E20               	comf	??___ftge+2,f,c
 16188  003226  2A1E               	incf	??___ftge,f,c
 16189  003228  0E00               	movlw	0
 16190  00322A  221F               	addwfc	??___ftge+1,f,c
 16191  00322C  2220               	addwfc	??___ftge+2,f,c
 16192  00322E  0E00               	movlw	0
 16193  003230  241E               	addwf	??___ftge,w,c
 16194  003232  6E18               	movwf	___ftge@ff1,c
 16195  003234  0E00               	movlw	0
 16196  003236  201F               	addwfc	??___ftge+1,w,c
 16197  003238  6E19               	movwf	___ftge@ff1+1,c
 16198  00323A  0E80               	movlw	128
 16199  00323C  2020               	addwfc	??___ftge+2,w,c
 16200  00323E  6E1A               	movwf	___ftge@ff1+2,c
 16201  003240                     l1831:
 16202  003240  AE1D               	btfss	___ftge@ff2+2,7,c
 16203  003242  D016               	goto	l1832
 16204  003244  C01B  F01E         	movff	___ftge@ff2,??___ftge
 16205  003248  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 16206  00324C  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 16207  003250  1E1E               	comf	??___ftge,f,c
 16208  003252  1E1F               	comf	??___ftge+1,f,c
 16209  003254  1E20               	comf	??___ftge+2,f,c
 16210  003256  2A1E               	incf	??___ftge,f,c
 16211  003258  0E00               	movlw	0
 16212  00325A  221F               	addwfc	??___ftge+1,f,c
 16213  00325C  2220               	addwfc	??___ftge+2,f,c
 16214  00325E  0E00               	movlw	0
 16215  003260  241E               	addwf	??___ftge,w,c
 16216  003262  6E1B               	movwf	___ftge@ff2,c
 16217  003264  0E00               	movlw	0
 16218  003266  201F               	addwfc	??___ftge+1,w,c
 16219  003268  6E1C               	movwf	___ftge@ff2+1,c
 16220  00326A  0E80               	movlw	128
 16221  00326C  2020               	addwfc	??___ftge+2,w,c
 16222  00326E  6E1D               	movwf	___ftge@ff2+2,c
 16223  003270                     l1832:
 16224  003270  0E00               	movlw	0
 16225  003272  1A18               	xorwf	___ftge@ff1,f,c
 16226  003274  0E00               	movlw	0
 16227  003276  1A19               	xorwf	___ftge@ff1+1,f,c
 16228  003278  0E80               	movlw	128
 16229  00327A  1A1A               	xorwf	___ftge@ff1+2,f,c
 16230  00327C  0E00               	movlw	0
 16231  00327E  1A1B               	xorwf	___ftge@ff2,f,c
 16232  003280  0E00               	movlw	0
 16233  003282  1A1C               	xorwf	___ftge@ff2+1,f,c
 16234  003284  0E80               	movlw	128
 16235  003286  1A1D               	xorwf	___ftge@ff2+2,f,c
 16236  003288  501B               	movf	___ftge@ff2,w,c
 16237  00328A  5C18               	subwf	___ftge@ff1,w,c
 16238  00328C  501C               	movf	___ftge@ff2+1,w,c
 16239  00328E  5819               	subwfb	___ftge@ff1+1,w,c
 16240  003290  501D               	movf	___ftge@ff2+2,w,c
 16241  003292  581A               	subwfb	___ftge@ff1+2,w,c
 16242  003294  B0D8               	btfsc	status,0,c
 16243  003296  D002               	goto	l6827
 16244  003298  90D8               	bcf	status,0,c
 16245  00329A  0012               	return	
 16246  00329C                     l6827:
 16247  00329C  80D8               	bsf	status,0,c
 16248  00329E  0012               	return	
 16249  0032A0                     __end_of___ftge:
 16250                           	opt stack 0
 16251                           tosu	equ	0xFFF
 16252                           tosh	equ	0xFFE
 16253                           tosl	equ	0xFFD
 16254                           pclath	equ	0xFFA
 16255                           tblptru	equ	0xFF8
 16256                           tblptrh	equ	0xFF7
 16257                           tblptrl	equ	0xFF6
 16258                           tablat	equ	0xFF5
 16259                           prodh	equ	0xFF4
 16260                           prodl	equ	0xFF3
 16261                           intcon	equ	0xFF2
 16262                           intcon2	equ	0xFF1
 16263                           postinc0	equ	0xFEE
 16264                           plusw0	equ	0xFEB
 16265                           wreg	equ	0xFE8
 16266                           indf1	equ	0xFE7
 16267                           postdec1	equ	0xFE5
 16268                           fsr1h	equ	0xFE2
 16269                           fsr1l	equ	0xFE1
 16270                           indf2	equ	0xFDF
 16271                           postinc2	equ	0xFDE
 16272                           postdec2	equ	0xFDD
 16273                           plusw2	equ	0xFDB
 16274                           fsr2h	equ	0xFDA
 16275                           fsr2l	equ	0xFD9
 16276                           status	equ	0xFD8
 16277                           
 16278 ;; *************** function ___altoft *****************
 16279 ;; Defined at:
 16280 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 16281 ;; Parameters:    Size  Location     Type
 16282 ;;  c               4   39[BANK0 ] long 
 16283 ;; Auto vars:     Size  Location     Type
 16284 ;;  sign            1   47[COMRAM] unsigned char 
 16285 ;;  exp             1   46[COMRAM] unsigned char 
 16286 ;; Return value:  Size  Location     Type
 16287 ;;                  3   39[BANK0 ] float 
 16288 ;; Registers used:
 16289 ;;		wreg, status,2, status,0, cstack
 16290 ;; Tracked objects:
 16291 ;;		On entry : 0/0
 16292 ;;		On exit  : 0/0
 16293 ;;		Unchanged: 0/0
 16294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16295 ;;      Params:         0       4       0       0       0       0       0
 16296 ;;      Locals:         2       0       0       0       0       0       0
 16297 ;;      Temps:          0       4       0       0       0       0       0
 16298 ;;      Totals:         2       8       0       0       0       0       0
 16299 ;;Total ram usage:       10 bytes
 16300 ;; Hardware stack levels used:    1
 16301 ;; Hardware stack levels required when called:    5
 16302 ;; This function calls:
 16303 ;;		___ftpack
 16304 ;; This function is called by:
 16305 ;;		_floor
 16306 ;; This function uses a non-reentrant model
 16307 ;;
 16308                           
 16309                           	psect	text93
 16310  00342A                     __ptext93:
 16311                           	opt stack 0
 16312  00342A                     ___altoft:
 16313                           	opt stack 18
 16314                           
 16315                           ;incstack = 0
 16316  00342A  0E00               	movlw	0
 16317  00342C  6E30               	movwf	___altoft@sign,c
 16318  00342E  0E8E               	movlw	142
 16319  003430  6E2F               	movwf	___altoft@exp,c
 16320  003432  0100               	movlb	0	; () banked
 16321  003434  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
 16322  003436  D011               	goto	l1629
 16323                           
 16324                           ; BSR set to: 0
 16325  003438  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
 16326  00343A  1F89               	comf	(___altoft@c+2)& (0+255),f,b
 16327  00343C  1F88               	comf	(___altoft@c+1)& (0+255),f,b
 16328  00343E  6D87               	negf	___altoft@c& (0+255),b
 16329  003440  0E00               	movlw	0
 16330  003442  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
 16331  003444  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
 16332  003446  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
 16333                           
 16334                           ; BSR set to: 0
 16335  003448  0E01               	movlw	1
 16336  00344A  6E30               	movwf	___altoft@sign,c
 16337                           
 16338                           ; BSR set to: 0
 16339  00344C  D006               	goto	l1629
 16340  00344E                     
 16341                           ; BSR set to: 0
 16342                           
 16343                           ; BSR set to: 0
 16344  00344E  90D8               	bcf	status,0,c
 16345  003450  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
 16346  003452  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
 16347  003454  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
 16348  003456  3387               	rrcf	___altoft@c& (0+255),f,b
 16349  003458  2A2F               	incf	___altoft@exp,f,c
 16350  00345A                     l1629:
 16351                           
 16352                           ; BSR set to: 0
 16353                           
 16354                           ; BSR set to: 0
 16355  00345A  0E00               	movlw	0
 16356  00345C  1587               	andwf	___altoft@c& (0+255),w,b
 16357  00345E  6F8B               	movwf	??___altoft& (0+255),b
 16358  003460  0E00               	movlw	0
 16359  003462  1588               	andwf	(___altoft@c+1)& (0+255),w,b
 16360  003464  6F8C               	movwf	(??___altoft+1)& (0+255),b
 16361  003466  0E00               	movlw	0
 16362  003468  1589               	andwf	(___altoft@c+2)& (0+255),w,b
 16363  00346A  6F8D               	movwf	(??___altoft+2)& (0+255),b
 16364  00346C  0EFF               	movlw	255
 16365  00346E  158A               	andwf	(___altoft@c+3)& (0+255),w,b
 16366  003470  6F8E               	movwf	(??___altoft+3)& (0+255),b
 16367  003472  518B               	movf	??___altoft& (0+255),w,b
 16368  003474  118C               	iorwf	(??___altoft+1)& (0+255),w,b
 16369  003476  118D               	iorwf	(??___altoft+2)& (0+255),w,b
 16370  003478  118E               	iorwf	(??___altoft+3)& (0+255),w,b
 16371  00347A  A4D8               	btfss	status,2,c
 16372  00347C  D7E8               	goto	l1630
 16373                           
 16374                           ; BSR set to: 0
 16375                           
 16376                           ; BSR set to: 0
 16377  00347E  C087  F018         	movff	___altoft@c,___ftpack@arg
 16378  003482  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
 16379  003486  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 16380  00348A  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 16381  00348E  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 16382  003492  EC2E  F017         	call	___ftpack	;wreg free
 16383  003496  C018  F087         	movff	?___ftpack,?___altoft
 16384  00349A  C019  F088         	movff	?___ftpack+1,?___altoft+1
 16385  00349E  C01A  F089         	movff	?___ftpack+2,?___altoft+2
 16386  0034A2  0012               	return	
 16387  0034A4                     __end_of___altoft:
 16388                           	opt stack 0
 16389                           tosu	equ	0xFFF
 16390                           tosh	equ	0xFFE
 16391                           tosl	equ	0xFFD
 16392                           pclath	equ	0xFFA
 16393                           tblptru	equ	0xFF8
 16394                           tblptrh	equ	0xFF7
 16395                           tblptrl	equ	0xFF6
 16396                           tablat	equ	0xFF5
 16397                           prodh	equ	0xFF4
 16398                           prodl	equ	0xFF3
 16399                           intcon	equ	0xFF2
 16400                           intcon2	equ	0xFF1
 16401                           postinc0	equ	0xFEE
 16402                           plusw0	equ	0xFEB
 16403                           wreg	equ	0xFE8
 16404                           indf1	equ	0xFE7
 16405                           postdec1	equ	0xFE5
 16406                           fsr1h	equ	0xFE2
 16407                           fsr1l	equ	0xFE1
 16408                           indf2	equ	0xFDF
 16409                           postinc2	equ	0xFDE
 16410                           postdec2	equ	0xFDD
 16411                           plusw2	equ	0xFDB
 16412                           fsr2h	equ	0xFDA
 16413                           fsr2l	equ	0xFD9
 16414                           status	equ	0xFD8
 16415                           
 16416 ;; *************** function _eval_poly *****************
 16417 ;; Defined at:
 16418 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 16419 ;; Parameters:    Size  Location     Type
 16420 ;;  x               3   36[BANK0 ] float 
 16421 ;;  d               2   39[BANK0 ] PTR const 
 16422 ;;		 -> log@coeff(27), exp@coeff(30), 
 16423 ;;  n               2   41[BANK0 ] int 
 16424 ;; Auto vars:     Size  Location     Type
 16425 ;;  res             3   43[BANK0 ] int 
 16426 ;; Return value:  Size  Location     Type
 16427 ;;                  3   36[BANK0 ] int 
 16428 ;; Registers used:
 16429 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16430 ;; Tracked objects:
 16431 ;;		On entry : 0/0
 16432 ;;		On exit  : 0/0
 16433 ;;		Unchanged: 0/0
 16434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16435 ;;      Params:         0       7       0       0       0       0       0
 16436 ;;      Locals:         0       3       0       0       0       0       0
 16437 ;;      Temps:          2       0       0       0       0       0       0
 16438 ;;      Totals:         2      10       0       0       0       0       0
 16439 ;;Total ram usage:       12 bytes
 16440 ;; Hardware stack levels used:    1
 16441 ;; Hardware stack levels required when called:    6
 16442 ;; This function calls:
 16443 ;;		___ftadd
 16444 ;;		___ftmul
 16445 ;;		___wmul
 16446 ;; This function is called by:
 16447 ;;		_exp
 16448 ;;		_log
 16449 ;; This function uses a non-reentrant model
 16450 ;;
 16451                           
 16452                           	psect	text94
 16453  002A94                     __ptext94:
 16454                           	opt stack 0
 16455  002A94                     _eval_poly:
 16456                           	opt stack 18
 16457                           
 16458                           ;incstack = 0
 16459  002A94  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 16460  002A98  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 16461  002A9C  0E00               	movlw	0
 16462  002A9E  6E1B               	movwf	___wmul@multiplicand+1,c
 16463  002AA0  0E03               	movlw	3
 16464  002AA2  6E1A               	movwf	___wmul@multiplicand,c
 16465  002AA4  ECFC  F01F         	call	___wmul	;wreg free
 16466  002AA8  C087  F02F         	movff	eval_poly@d,??_eval_poly
 16467  002AAC  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 16468  002AB0  5018               	movf	?___wmul,w,c
 16469  002AB2  262F               	addwf	??_eval_poly,f,c
 16470  002AB4  5019               	movf	?___wmul+1,w,c
 16471  002AB6  2230               	addwfc	??_eval_poly+1,f,c
 16472  002AB8  C02F  FFF6         	movff	??_eval_poly,tblptrl
 16473  002ABC  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 16474  002AC0                     	if	0	;tblptru may be non-zero
 16475  002AC0                     	endif
 16476  002AC0                     	if	0	;tblptru may be non-zero
 16477  002AC0                     	endif
 16478  002AC0  0009               	tblrd		*+
 16479  002AC2  CFF5 F08B          	movff	tablat,eval_poly@res
 16480  002AC6  0009               	tblrd		*+
 16481  002AC8  CFF5 F08C          	movff	tablat,eval_poly@res+1
 16482  002ACC  000A               	tblrd		*-
 16483  002ACE  CFF5 F08D          	movff	tablat,eval_poly@res+2
 16484  002AD2  D03F               	goto	l2254
 16485  002AD4  C08B  F06C         	movff	eval_poly@res,___ftmul@f2
 16486  002AD8  C08C  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
 16487  002ADC  C08D  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
 16488  002AE0  C084  F069         	movff	eval_poly@x,___ftmul@f1
 16489  002AE4  C085  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
 16490  002AE8  C086  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
 16491  002AEC  EC94  F012         	call	___ftmul	;wreg free
 16492  002AF0  C069  F078         	movff	?___ftmul,___ftadd@f1
 16493  002AF4  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 16494  002AF8  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 16495  002AFC  0E00               	movlw	0
 16496  002AFE  6E1B               	movwf	___wmul@multiplicand+1,c
 16497  002B00  0E03               	movlw	3
 16498  002B02  6E1A               	movwf	___wmul@multiplicand,c
 16499  002B04  0100               	movlb	0	; () banked
 16500  002B06  0789               	decf	eval_poly@n& (0+255),f,b
 16501  002B08  A0D8               	btfss	status,0,c
 16502  002B0A  078A               	decf	(eval_poly@n+1)& (0+255),f,b
 16503  002B0C  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 16504  002B10  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 16505  002B14  ECFC  F01F         	call	___wmul	;wreg free
 16506  002B18  C087  F02F         	movff	eval_poly@d,??_eval_poly
 16507  002B1C  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 16508  002B20  5018               	movf	?___wmul,w,c
 16509  002B22  262F               	addwf	??_eval_poly,f,c
 16510  002B24  5019               	movf	?___wmul+1,w,c
 16511  002B26  2230               	addwfc	??_eval_poly+1,f,c
 16512  002B28  C02F  FFF6         	movff	??_eval_poly,tblptrl
 16513  002B2C  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 16514  002B30                     	if	0	;tblptru may be non-zero
 16515  002B30                     	endif
 16516  002B30                     	if	0	;tblptru may be non-zero
 16517  002B30                     	endif
 16518  002B30  0009               	tblrd		*+
 16519  002B32  CFF5 F07B          	movff	tablat,___ftadd@f2
 16520  002B36  0009               	tblrd		*+
 16521  002B38  CFF5 F07C          	movff	tablat,___ftadd@f2+1
 16522  002B3C  000A               	tblrd		*-
 16523  002B3E  CFF5 F07D          	movff	tablat,___ftadd@f2+2
 16524  002B42  EC1B  F00D         	call	___ftadd	;wreg free
 16525  002B46  C078  F08B         	movff	?___ftadd,eval_poly@res
 16526  002B4A  C079  F08C         	movff	?___ftadd+1,eval_poly@res+1
 16527  002B4E  C07A  F08D         	movff	?___ftadd+2,eval_poly@res+2
 16528  002B52                     l2254:
 16529  002B52  0100               	movlb	0	; () banked
 16530  002B54  5189               	movf	eval_poly@n& (0+255),w,b
 16531  002B56  118A               	iorwf	(eval_poly@n+1)& (0+255),w,b
 16532  002B58  A4D8               	btfss	status,2,c
 16533  002B5A  D7BC               	goto	l2255
 16534                           
 16535                           ; BSR set to: 0
 16536  002B5C  C08B  F084         	movff	eval_poly@res,?_eval_poly
 16537  002B60  C08C  F085         	movff	eval_poly@res+1,?_eval_poly+1
 16538  002B64  C08D  F086         	movff	eval_poly@res+2,?_eval_poly+2
 16539                           
 16540                           ; BSR set to: 0
 16541  002B68  0012               	return		;funcret
 16542  002B6A                     __end_of_eval_poly:
 16543                           	opt stack 0
 16544                           tosu	equ	0xFFF
 16545                           tosh	equ	0xFFE
 16546                           tosl	equ	0xFFD
 16547                           pclath	equ	0xFFA
 16548                           tblptru	equ	0xFF8
 16549                           tblptrh	equ	0xFF7
 16550                           tblptrl	equ	0xFF6
 16551                           tablat	equ	0xFF5
 16552                           prodh	equ	0xFF4
 16553                           prodl	equ	0xFF3
 16554                           intcon	equ	0xFF2
 16555                           intcon2	equ	0xFF1
 16556                           postinc0	equ	0xFEE
 16557                           plusw0	equ	0xFEB
 16558                           wreg	equ	0xFE8
 16559                           indf1	equ	0xFE7
 16560                           postdec1	equ	0xFE5
 16561                           fsr1h	equ	0xFE2
 16562                           fsr1l	equ	0xFE1
 16563                           indf2	equ	0xFDF
 16564                           postinc2	equ	0xFDE
 16565                           postdec2	equ	0xFDD
 16566                           plusw2	equ	0xFDB
 16567                           fsr2h	equ	0xFDA
 16568                           fsr2l	equ	0xFD9
 16569                           status	equ	0xFD8
 16570                           
 16571 ;; *************** function ___wmul *****************
 16572 ;; Defined at:
 16573 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 16574 ;; Parameters:    Size  Location     Type
 16575 ;;  multiplier      2   23[COMRAM] unsigned int 
 16576 ;;  multiplicand    2   25[COMRAM] unsigned int 
 16577 ;; Auto vars:     Size  Location     Type
 16578 ;;  product         2   27[COMRAM] unsigned int 
 16579 ;; Return value:  Size  Location     Type
 16580 ;;                  2   23[COMRAM] unsigned int 
 16581 ;; Registers used:
 16582 ;;		wreg, status,2, status,0, prodl, prodh
 16583 ;; Tracked objects:
 16584 ;;		On entry : 0/0
 16585 ;;		On exit  : 0/0
 16586 ;;		Unchanged: 0/0
 16587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16588 ;;      Params:         4       0       0       0       0       0       0
 16589 ;;      Locals:         2       0       0       0       0       0       0
 16590 ;;      Temps:          0       0       0       0       0       0       0
 16591 ;;      Totals:         6       0       0       0       0       0       0
 16592 ;;Total ram usage:        6 bytes
 16593 ;; Hardware stack levels used:    1
 16594 ;; Hardware stack levels required when called:    4
 16595 ;; This function calls:
 16596 ;;		Nothing
 16597 ;; This function is called by:
 16598 ;;		_GetMcuFwVersion
 16599 ;;		_eval_poly
 16600 ;; This function uses a non-reentrant model
 16601 ;;
 16602                           
 16603                           	psect	text95
 16604  003FF8                     __ptext95:
 16605                           	opt stack 0
 16606  003FF8                     ___wmul:
 16607                           	opt stack 19
 16608                           
 16609                           ; BSR set to: 0
 16610                           ;incstack = 0
 16611  003FF8  5018               	movf	___wmul@multiplier,w,c
 16612  003FFA  021A               	mulwf	___wmul@multiplicand,c
 16613  003FFC  CFF3 F01C          	movff	prodl,___wmul@product
 16614  004000  CFF4 F01D          	movff	prodh,___wmul@product+1
 16615  004004  5018               	movf	___wmul@multiplier,w,c
 16616  004006  021B               	mulwf	___wmul@multiplicand+1,c
 16617  004008  50F3               	movf	prodl,w,c
 16618  00400A  261D               	addwf	___wmul@product+1,f,c
 16619  00400C  5019               	movf	___wmul@multiplier+1,w,c
 16620  00400E  021A               	mulwf	___wmul@multiplicand,c
 16621  004010  50F3               	movf	prodl,w,c
 16622  004012  261D               	addwf	___wmul@product+1,f,c
 16623  004014  C01C  F018         	movff	___wmul@product,?___wmul
 16624  004018  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 16625  00401C  0012               	return	
 16626  00401E                     __end_of___wmul:
 16627                           	opt stack 0
 16628                           tosu	equ	0xFFF
 16629                           tosh	equ	0xFFE
 16630                           tosl	equ	0xFFD
 16631                           pclath	equ	0xFFA
 16632                           tblptru	equ	0xFF8
 16633                           tblptrh	equ	0xFF7
 16634                           tblptrl	equ	0xFF6
 16635                           tablat	equ	0xFF5
 16636                           prodh	equ	0xFF4
 16637                           prodl	equ	0xFF3
 16638                           intcon	equ	0xFF2
 16639                           intcon2	equ	0xFF1
 16640                           postinc0	equ	0xFEE
 16641                           plusw0	equ	0xFEB
 16642                           wreg	equ	0xFE8
 16643                           indf1	equ	0xFE7
 16644                           postdec1	equ	0xFE5
 16645                           fsr1h	equ	0xFE2
 16646                           fsr1l	equ	0xFE1
 16647                           indf2	equ	0xFDF
 16648                           postinc2	equ	0xFDE
 16649                           postdec2	equ	0xFDD
 16650                           plusw2	equ	0xFDB
 16651                           fsr2h	equ	0xFDA
 16652                           fsr2l	equ	0xFD9
 16653                           status	equ	0xFD8
 16654                           
 16655 ;; *************** function ___ftmul *****************
 16656 ;; Defined at:
 16657 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 16658 ;; Parameters:    Size  Location     Type
 16659 ;;  f1              3    9[BANK0 ] float 
 16660 ;;  f2              3   12[BANK0 ] float 
 16661 ;; Auto vars:     Size  Location     Type
 16662 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 16663 ;;  sign            1   23[BANK0 ] unsigned char 
 16664 ;;  cntr            1   22[BANK0 ] unsigned char 
 16665 ;;  exp             1   18[BANK0 ] unsigned char 
 16666 ;; Return value:  Size  Location     Type
 16667 ;;                  3    9[BANK0 ] float 
 16668 ;; Registers used:
 16669 ;;		wreg, status,2, status,0, cstack
 16670 ;; Tracked objects:
 16671 ;;		On entry : 0/0
 16672 ;;		On exit  : 0/0
 16673 ;;		Unchanged: 0/0
 16674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16675 ;;      Params:         0       6       0       0       0       0       0
 16676 ;;      Locals:         0       6       0       0       0       0       0
 16677 ;;      Temps:          0       3       0       0       0       0       0
 16678 ;;      Totals:         0      15       0       0       0       0       0
 16679 ;;Total ram usage:       15 bytes
 16680 ;; Hardware stack levels used:    1
 16681 ;; Hardware stack levels required when called:    5
 16682 ;; This function calls:
 16683 ;;		___ftpack
 16684 ;; This function is called by:
 16685 ;;		_AdcConvert
 16686 ;;		_CheckFlashPrecentage
 16687 ;;		_pow
 16688 ;;		_exp
 16689 ;;		_log
 16690 ;;		_eval_poly
 16691 ;; This function uses a non-reentrant model
 16692 ;;
 16693                           
 16694                           	psect	text96
 16695  002528                     __ptext96:
 16696                           	opt stack 0
 16697  002528                     ___ftmul:
 16698                           	opt stack 18
 16699                           
 16700                           ;incstack = 0
 16701  002528  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
 16702  00252C  0100               	movlb	0	; () banked
 16703  00252E  6B70               	clrf	(??___ftmul+1)& (0+255),b
 16704  002530  6B71               	clrf	(??___ftmul+2)& (0+255),b
 16705  002532  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 16706  002534  376F               	rlcf	??___ftmul& (0+255),f,b
 16707  002536  E301               	bnc	u6801
 16708  002538  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 16709  00253A                     u6801:
 16710  00253A  516F               	movf	??___ftmul& (0+255),w,b
 16711  00253C  6F72               	movwf	___ftmul@exp& (0+255),b
 16712  00253E  5172               	movf	___ftmul@exp& (0+255),w,b
 16713  002540  A4D8               	btfss	status,2,c
 16714  002542  D007               	goto	l1838
 16715                           
 16716                           ; BSR set to: 0
 16717  002544  0E00               	movlw	0
 16718  002546  6F69               	movwf	?___ftmul& (0+255),b
 16719  002548  0E00               	movlw	0
 16720  00254A  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 16721  00254C  0E00               	movlw	0
 16722  00254E  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 16723                           
 16724                           ; BSR set to: 0
 16725  002550  0012               	return	
 16726  002552                     l1838:
 16727                           
 16728                           ; BSR set to: 0
 16729                           
 16730                           ; BSR set to: 0
 16731  002552  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
 16732  002556  6B70               	clrf	(??___ftmul+1)& (0+255),b
 16733  002558  6B71               	clrf	(??___ftmul+2)& (0+255),b
 16734  00255A  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 16735  00255C  376F               	rlcf	??___ftmul& (0+255),f,b
 16736  00255E  E301               	bnc	u6821
 16737  002560  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 16738  002562                     u6821:
 16739  002562  516F               	movf	??___ftmul& (0+255),w,b
 16740  002564  6F77               	movwf	___ftmul@sign& (0+255),b
 16741  002566  5177               	movf	___ftmul@sign& (0+255),w,b
 16742  002568  A4D8               	btfss	status,2,c
 16743  00256A  D007               	goto	l1840
 16744                           
 16745                           ; BSR set to: 0
 16746  00256C  0E00               	movlw	0
 16747  00256E  6F69               	movwf	?___ftmul& (0+255),b
 16748  002570  0E00               	movlw	0
 16749  002572  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 16750  002574  0E00               	movlw	0
 16751  002576  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 16752                           
 16753                           ; BSR set to: 0
 16754  002578  0012               	return	
 16755  00257A                     l1840:
 16756                           
 16757                           ; BSR set to: 0
 16758                           
 16759                           ; BSR set to: 0
 16760  00257A  5177               	movf	___ftmul@sign& (0+255),w,b
 16761  00257C  0F7B               	addlw	123
 16762  00257E  2772               	addwf	___ftmul@exp& (0+255),f,b
 16763                           
 16764                           ; BSR set to: 0
 16765  002580  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
 16766  002584  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 16767  002586  1B77               	xorwf	___ftmul@sign& (0+255),f,b
 16768  002588  0E80               	movlw	128
 16769  00258A  1777               	andwf	___ftmul@sign& (0+255),f,b
 16770                           
 16771                           ; BSR set to: 0
 16772  00258C  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 16773                           
 16774                           ; BSR set to: 0
 16775  00258E  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 16776                           
 16777                           ; BSR set to: 0
 16778  002590  0EFF               	movlw	255
 16779  002592  176C               	andwf	___ftmul@f2& (0+255),f,b
 16780  002594  0EFF               	movlw	255
 16781  002596  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 16782  002598  0E00               	movlw	0
 16783  00259A  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 16784                           
 16785                           ; BSR set to: 0
 16786  00259C  0E00               	movlw	0
 16787  00259E  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
 16788  0025A0  0E00               	movlw	0
 16789  0025A2  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 16790  0025A4  0E00               	movlw	0
 16791  0025A6  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 16792                           
 16793                           ; BSR set to: 0
 16794  0025A8  0E07               	movlw	7
 16795  0025AA  6F76               	movwf	___ftmul@cntr& (0+255),b
 16796  0025AC                     
 16797                           ; BSR set to: 0
 16798                           
 16799                           ; BSR set to: 0
 16800  0025AC  A169               	btfss	___ftmul@f1& (0+255),0,b
 16801  0025AE  D006               	goto	l1842
 16802                           
 16803                           ; BSR set to: 0
 16804  0025B0  516C               	movf	___ftmul@f2& (0+255),w,b
 16805  0025B2  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 16806  0025B4  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 16807  0025B6  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 16808  0025B8  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 16809  0025BA  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 16810  0025BC                     l1842:
 16811                           
 16812                           ; BSR set to: 0
 16813                           
 16814                           ; BSR set to: 0
 16815  0025BC  90D8               	bcf	status,0,c
 16816  0025BE  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 16817  0025C0  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 16818  0025C2  3369               	rrcf	___ftmul@f1& (0+255),f,b
 16819  0025C4  90D8               	bcf	status,0,c
 16820  0025C6  376C               	rlcf	___ftmul@f2& (0+255),f,b
 16821  0025C8  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 16822  0025CA  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 16823                           
 16824                           ; BSR set to: 0
 16825  0025CC  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 16826  0025CE  D7EE               	goto	l1841
 16827                           
 16828                           ; BSR set to: 0
 16829                           
 16830                           ; BSR set to: 0
 16831  0025D0  0E09               	movlw	9
 16832  0025D2  6F76               	movwf	___ftmul@cntr& (0+255),b
 16833  0025D4                     
 16834                           ; BSR set to: 0
 16835                           
 16836                           ; BSR set to: 0
 16837  0025D4  A169               	btfss	___ftmul@f1& (0+255),0,b
 16838  0025D6  D006               	goto	l1845
 16839                           
 16840                           ; BSR set to: 0
 16841  0025D8  516C               	movf	___ftmul@f2& (0+255),w,b
 16842  0025DA  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 16843  0025DC  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 16844  0025DE  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 16845  0025E0  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 16846  0025E2  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 16847  0025E4                     l1845:
 16848                           
 16849                           ; BSR set to: 0
 16850                           
 16851                           ; BSR set to: 0
 16852  0025E4  90D8               	bcf	status,0,c
 16853  0025E6  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 16854  0025E8  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 16855  0025EA  3369               	rrcf	___ftmul@f1& (0+255),f,b
 16856  0025EC  90D8               	bcf	status,0,c
 16857  0025EE  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 16858  0025F0  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 16859  0025F2  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 16860                           
 16861                           ; BSR set to: 0
 16862  0025F4  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 16863  0025F6  D7EE               	goto	l1844
 16864                           
 16865                           ; BSR set to: 0
 16866                           
 16867                           ; BSR set to: 0
 16868  0025F8  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 16869  0025FC  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 16870  002600  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 16871  002604  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
 16872  002608  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
 16873  00260C  EC2E  F017         	call	___ftpack	;wreg free
 16874  002610  C018  F069         	movff	?___ftpack,?___ftmul
 16875  002614  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
 16876  002618  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
 16877  00261C  0012               	return	
 16878  00261E                     __end_of___ftmul:
 16879                           	opt stack 0
 16880                           tosu	equ	0xFFF
 16881                           tosh	equ	0xFFE
 16882                           tosl	equ	0xFFD
 16883                           pclath	equ	0xFFA
 16884                           tblptru	equ	0xFF8
 16885                           tblptrh	equ	0xFF7
 16886                           tblptrl	equ	0xFF6
 16887                           tablat	equ	0xFF5
 16888                           prodh	equ	0xFF4
 16889                           prodl	equ	0xFF3
 16890                           intcon	equ	0xFF2
 16891                           intcon2	equ	0xFF1
 16892                           postinc0	equ	0xFEE
 16893                           plusw0	equ	0xFEB
 16894                           wreg	equ	0xFE8
 16895                           indf1	equ	0xFE7
 16896                           postdec1	equ	0xFE5
 16897                           fsr1h	equ	0xFE2
 16898                           fsr1l	equ	0xFE1
 16899                           indf2	equ	0xFDF
 16900                           postinc2	equ	0xFDE
 16901                           postdec2	equ	0xFDD
 16902                           plusw2	equ	0xFDB
 16903                           fsr2h	equ	0xFDA
 16904                           fsr2l	equ	0xFD9
 16905                           status	equ	0xFD8
 16906                           
 16907 ;; *************** function ___ftsub *****************
 16908 ;; Defined at:
 16909 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 16910 ;; Parameters:    Size  Location     Type
 16911 ;;  f1              3   36[BANK0 ] float 
 16912 ;;  f2              3   39[BANK0 ] float 
 16913 ;; Auto vars:     Size  Location     Type
 16914 ;;		None
 16915 ;; Return value:  Size  Location     Type
 16916 ;;                  3   36[BANK0 ] float 
 16917 ;; Registers used:
 16918 ;;		wreg, status,2, status,0, cstack
 16919 ;; Tracked objects:
 16920 ;;		On entry : 0/0
 16921 ;;		On exit  : 0/0
 16922 ;;		Unchanged: 0/0
 16923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16924 ;;      Params:         0       6       0       0       0       0       0
 16925 ;;      Locals:         0       0       0       0       0       0       0
 16926 ;;      Temps:          0       0       0       0       0       0       0
 16927 ;;      Totals:         0       6       0       0       0       0       0
 16928 ;;Total ram usage:        6 bytes
 16929 ;; Hardware stack levels used:    1
 16930 ;; Hardware stack levels required when called:    6
 16931 ;; This function calls:
 16932 ;;		___ftadd
 16933 ;; This function is called by:
 16934 ;;		_exp
 16935 ;; This function uses a non-reentrant model
 16936 ;;
 16937                           
 16938                           	psect	text97
 16939  003AEC                     __ptext97:
 16940                           	opt stack 0
 16941  003AEC                     ___ftsub:
 16942                           	opt stack 18
 16943                           
 16944                           ;incstack = 0
 16945  003AEC  0100               	movlb	0	; () banked
 16946  003AEE  5187               	movf	___ftsub@f2& (0+255),w,b
 16947  003AF0  1188               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 16948  003AF2  1189               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 16949  003AF4  B4D8               	btfsc	status,2,c
 16950  003AF6  D006               	goto	l1855
 16951                           
 16952                           ; BSR set to: 0
 16953  003AF8  0E00               	movlw	0
 16954  003AFA  1B87               	xorwf	___ftsub@f2& (0+255),f,b
 16955  003AFC  0E00               	movlw	0
 16956  003AFE  1B88               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 16957  003B00  0E80               	movlw	128
 16958  003B02  1B89               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 16959  003B04                     l1855:
 16960                           
 16961                           ; BSR set to: 0
 16962                           
 16963                           ; BSR set to: 0
 16964  003B04  C084  F078         	movff	___ftsub@f1,___ftadd@f1
 16965  003B08  C085  F079         	movff	___ftsub@f1+1,___ftadd@f1+1
 16966  003B0C  C086  F07A         	movff	___ftsub@f1+2,___ftadd@f1+2
 16967  003B10  C087  F07B         	movff	___ftsub@f2,___ftadd@f2
 16968  003B14  C088  F07C         	movff	___ftsub@f2+1,___ftadd@f2+1
 16969  003B18  C089  F07D         	movff	___ftsub@f2+2,___ftadd@f2+2
 16970  003B1C  EC1B  F00D         	call	___ftadd	;wreg free
 16971  003B20  C078  F084         	movff	?___ftadd,?___ftsub
 16972  003B24  C079  F085         	movff	?___ftadd+1,?___ftsub+1
 16973  003B28  C07A  F086         	movff	?___ftadd+2,?___ftsub+2
 16974  003B2C  0012               	return	
 16975  003B2E                     __end_of___ftsub:
 16976                           	opt stack 0
 16977                           tosu	equ	0xFFF
 16978                           tosh	equ	0xFFE
 16979                           tosl	equ	0xFFD
 16980                           pclath	equ	0xFFA
 16981                           tblptru	equ	0xFF8
 16982                           tblptrh	equ	0xFF7
 16983                           tblptrl	equ	0xFF6
 16984                           tablat	equ	0xFF5
 16985                           prodh	equ	0xFF4
 16986                           prodl	equ	0xFF3
 16987                           intcon	equ	0xFF2
 16988                           intcon2	equ	0xFF1
 16989                           postinc0	equ	0xFEE
 16990                           plusw0	equ	0xFEB
 16991                           wreg	equ	0xFE8
 16992                           indf1	equ	0xFE7
 16993                           postdec1	equ	0xFE5
 16994                           fsr1h	equ	0xFE2
 16995                           fsr1l	equ	0xFE1
 16996                           indf2	equ	0xFDF
 16997                           postinc2	equ	0xFDE
 16998                           postdec2	equ	0xFDD
 16999                           plusw2	equ	0xFDB
 17000                           fsr2h	equ	0xFDA
 17001                           fsr2l	equ	0xFD9
 17002                           status	equ	0xFD8
 17003                           
 17004 ;; *************** function ___ftadd *****************
 17005 ;; Defined at:
 17006 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 17007 ;; Parameters:    Size  Location     Type
 17008 ;;  f1              3   24[BANK0 ] float 
 17009 ;;  f2              3   27[BANK0 ] float 
 17010 ;; Auto vars:     Size  Location     Type
 17011 ;;  exp1            1   35[BANK0 ] unsigned char 
 17012 ;;  exp2            1   34[BANK0 ] unsigned char 
 17013 ;;  sign            1   33[BANK0 ] unsigned char 
 17014 ;; Return value:  Size  Location     Type
 17015 ;;                  3   24[BANK0 ] float 
 17016 ;; Registers used:
 17017 ;;		wreg, status,2, status,0, cstack
 17018 ;; Tracked objects:
 17019 ;;		On entry : 0/0
 17020 ;;		On exit  : 0/0
 17021 ;;		Unchanged: 0/0
 17022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17023 ;;      Params:         0       6       0       0       0       0       0
 17024 ;;      Locals:         0       3       0       0       0       0       0
 17025 ;;      Temps:          0       3       0       0       0       0       0
 17026 ;;      Totals:         0      12       0       0       0       0       0
 17027 ;;Total ram usage:       12 bytes
 17028 ;; Hardware stack levels used:    1
 17029 ;; Hardware stack levels required when called:    5
 17030 ;; This function calls:
 17031 ;;		___ftpack
 17032 ;; This function is called by:
 17033 ;;		___ftsub
 17034 ;;		_floor
 17035 ;;		_log
 17036 ;;		_eval_poly
 17037 ;; This function uses a non-reentrant model
 17038 ;;
 17039                           
 17040                           	psect	text98
 17041  001A36                     __ptext98:
 17042                           	opt stack 0
 17043  001A36                     ___ftadd:
 17044                           	opt stack 18
 17045                           
 17046                           ;incstack = 0
 17047  001A36  C07A  F07E         	movff	___ftadd@f1+2,??___ftadd
 17048  001A3A  0100               	movlb	0	; () banked
 17049  001A3C  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 17050  001A3E  6B80               	clrf	(??___ftadd+2)& (0+255),b
 17051  001A40  3579               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 17052  001A42  377E               	rlcf	??___ftadd& (0+255),f,b
 17053  001A44  E301               	bnc	u6591
 17054  001A46  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 17055  001A48                     u6591:
 17056  001A48  517E               	movf	??___ftadd& (0+255),w,b
 17057  001A4A  6F83               	movwf	___ftadd@exp1& (0+255),b
 17058  001A4C  C07D  F07E         	movff	___ftadd@f2+2,??___ftadd
 17059  001A50  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 17060  001A52  6B80               	clrf	(??___ftadd+2)& (0+255),b
 17061  001A54  357C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 17062  001A56  377E               	rlcf	??___ftadd& (0+255),f,b
 17063  001A58  E301               	bnc	u6601
 17064  001A5A  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 17065  001A5C                     u6601:
 17066  001A5C  517E               	movf	??___ftadd& (0+255),w,b
 17067  001A5E  6F82               	movwf	___ftadd@exp2& (0+255),b
 17068                           
 17069                           ; BSR set to: 0
 17070  001A60  5183               	movf	___ftadd@exp1& (0+255),w,b
 17071  001A62  B4D8               	btfsc	status,2,c
 17072  001A64  D00B               	goto	u6630
 17073                           
 17074                           ; BSR set to: 0
 17075  001A66  5182               	movf	___ftadd@exp2& (0+255),w,b
 17076  001A68  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 17077  001A6A  B0D8               	btfsc	status,0,c
 17078  001A6C  D00E               	goto	l1790
 17079                           
 17080                           ; BSR set to: 0
 17081  001A6E  5183               	movf	___ftadd@exp1& (0+255),w,b
 17082  001A70  0800               	sublw	0
 17083  001A72  2582               	addwf	___ftadd@exp2& (0+255),w,b
 17084  001A74  6F7E               	movwf	??___ftadd& (0+255),b
 17085  001A76  0E18               	movlw	24
 17086  001A78  657E               	cpfsgt	??___ftadd& (0+255),b
 17087  001A7A  D007               	goto	l1790
 17088  001A7C                     u6630:
 17089                           
 17090                           ; BSR set to: 0
 17091  001A7C  C07B  F078         	movff	___ftadd@f2,?___ftadd
 17092  001A80  C07C  F079         	movff	___ftadd@f2+1,?___ftadd+1
 17093  001A84  C07D  F07A         	movff	___ftadd@f2+2,?___ftadd+2
 17094  001A88  0012               	return	
 17095  001A8A                     l1790:
 17096                           
 17097                           ; BSR set to: 0
 17098                           
 17099                           ; BSR set to: 0
 17100  001A8A  5182               	movf	___ftadd@exp2& (0+255),w,b
 17101  001A8C  B4D8               	btfsc	status,2,c
 17102  001A8E  D00B               	goto	u6660
 17103                           
 17104                           ; BSR set to: 0
 17105  001A90  5183               	movf	___ftadd@exp1& (0+255),w,b
 17106  001A92  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 17107  001A94  B0D8               	btfsc	status,0,c
 17108  001A96  D00E               	goto	l1794
 17109                           
 17110                           ; BSR set to: 0
 17111  001A98  5182               	movf	___ftadd@exp2& (0+255),w,b
 17112  001A9A  0800               	sublw	0
 17113  001A9C  2583               	addwf	___ftadd@exp1& (0+255),w,b
 17114  001A9E  6F7E               	movwf	??___ftadd& (0+255),b
 17115  001AA0  0E18               	movlw	24
 17116  001AA2  657E               	cpfsgt	??___ftadd& (0+255),b
 17117  001AA4  D007               	goto	l1794
 17118  001AA6                     u6660:
 17119                           
 17120                           ; BSR set to: 0
 17121  001AA6  C078  F078         	movff	___ftadd@f1,?___ftadd
 17122  001AAA  C079  F079         	movff	___ftadd@f1+1,?___ftadd+1
 17123  001AAE  C07A  F07A         	movff	___ftadd@f1+2,?___ftadd+2
 17124  001AB2  0012               	return	
 17125  001AB4                     l1794:
 17126                           
 17127                           ; BSR set to: 0
 17128                           
 17129                           ; BSR set to: 0
 17130  001AB4  0E06               	movlw	6
 17131  001AB6  6F81               	movwf	___ftadd@sign& (0+255),b
 17132                           
 17133                           ; BSR set to: 0
 17134  001AB8  BF7A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 17135                           
 17136                           ; BSR set to: 0
 17137  001ABA  8F81               	bsf	___ftadd@sign& (0+255),7,b
 17138                           
 17139                           ; BSR set to: 0
 17140                           
 17141                           ; BSR set to: 0
 17142  001ABC  BF7D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 17143                           
 17144                           ; BSR set to: 0
 17145  001ABE  8D81               	bsf	___ftadd@sign& (0+255),6,b
 17146                           
 17147                           ; BSR set to: 0
 17148  001AC0  8F79               	bsf	(___ftadd@f1+1)& (0+255),7,b
 17149                           
 17150                           ; BSR set to: 0
 17151  001AC2  0EFF               	movlw	255
 17152  001AC4  1778               	andwf	___ftadd@f1& (0+255),f,b
 17153  001AC6  0EFF               	movlw	255
 17154  001AC8  1779               	andwf	(___ftadd@f1+1)& (0+255),f,b
 17155  001ACA  0E00               	movlw	0
 17156  001ACC  177A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 17157  001ACE  8F7C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 17158                           
 17159                           ; BSR set to: 0
 17160  001AD0  0EFF               	movlw	255
 17161  001AD2  177B               	andwf	___ftadd@f2& (0+255),f,b
 17162  001AD4  0EFF               	movlw	255
 17163  001AD6  177C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 17164  001AD8  0E00               	movlw	0
 17165  001ADA  177D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 17166                           
 17167                           ; BSR set to: 0
 17168  001ADC  5182               	movf	___ftadd@exp2& (0+255),w,b
 17169  001ADE  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 17170  001AE0  B0D8               	btfsc	status,0,c
 17171  001AE2  D01B               	goto	l1799
 17172  001AE4                     u6690:
 17173                           
 17174                           ; BSR set to: 0
 17175                           
 17176                           ; BSR set to: 0
 17177  001AE4  90D8               	bcf	status,0,c
 17178  001AE6  377B               	rlcf	___ftadd@f2& (0+255),f,b
 17179  001AE8  377C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 17180  001AEA  377D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 17181  001AEC  0782               	decf	___ftadd@exp2& (0+255),f,b
 17182                           
 17183                           ; BSR set to: 0
 17184  001AEE  5183               	movf	___ftadd@exp1& (0+255),w,b
 17185  001AF0  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 17186  001AF2  B4D8               	btfsc	status,2,c
 17187  001AF4  D00D               	goto	l1804
 17188                           
 17189                           ; BSR set to: 0
 17190  001AF6  0781               	decf	___ftadd@sign& (0+255),f,b
 17191  001AF8  C081  F07E         	movff	___ftadd@sign,??___ftadd
 17192  001AFC  0E07               	movlw	7
 17193  001AFE  177E               	andwf	??___ftadd& (0+255),f,b
 17194  001B00  B4D8               	btfsc	status,2,c
 17195  001B02  D006               	goto	l1804
 17196  001B04  D7EF               	goto	u6690
 17197  001B06                     
 17198                           ; BSR set to: 0
 17199                           
 17200                           ; BSR set to: 0
 17201  001B06  90D8               	bcf	status,0,c
 17202  001B08  337A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 17203  001B0A  3379               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 17204  001B0C  3378               	rrcf	___ftadd@f1& (0+255),f,b
 17205  001B0E  2B83               	incf	___ftadd@exp1& (0+255),f,b
 17206  001B10                     l1804:
 17207                           
 17208                           ; BSR set to: 0
 17209                           
 17210                           ; BSR set to: 0
 17211  001B10  5182               	movf	___ftadd@exp2& (0+255),w,b
 17212  001B12  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 17213  001B14  B4D8               	btfsc	status,2,c
 17214  001B16  D01F               	goto	u6760
 17215  001B18  D7F6               	goto	l1805
 17216  001B1A                     l1799:
 17217                           
 17218                           ; BSR set to: 0
 17219                           
 17220                           ; BSR set to: 0
 17221  001B1A  5183               	movf	___ftadd@exp1& (0+255),w,b
 17222  001B1C  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 17223  001B1E  B0D8               	btfsc	status,0,c
 17224  001B20  D01A               	goto	u6760
 17225  001B22                     u6730:
 17226                           
 17227                           ; BSR set to: 0
 17228                           
 17229                           ; BSR set to: 0
 17230  001B22  90D8               	bcf	status,0,c
 17231  001B24  3778               	rlcf	___ftadd@f1& (0+255),f,b
 17232  001B26  3779               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 17233  001B28  377A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 17234  001B2A  0783               	decf	___ftadd@exp1& (0+255),f,b
 17235                           
 17236                           ; BSR set to: 0
 17237  001B2C  5183               	movf	___ftadd@exp1& (0+255),w,b
 17238  001B2E  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 17239  001B30  B4D8               	btfsc	status,2,c
 17240  001B32  D00D               	goto	l1813
 17241                           
 17242                           ; BSR set to: 0
 17243  001B34  0781               	decf	___ftadd@sign& (0+255),f,b
 17244  001B36  C081  F07E         	movff	___ftadd@sign,??___ftadd
 17245  001B3A  0E07               	movlw	7
 17246  001B3C  177E               	andwf	??___ftadd& (0+255),f,b
 17247  001B3E  B4D8               	btfsc	status,2,c
 17248  001B40  D006               	goto	l1813
 17249  001B42  D7EF               	goto	u6730
 17250  001B44                     
 17251                           ; BSR set to: 0
 17252                           
 17253                           ; BSR set to: 0
 17254  001B44  90D8               	bcf	status,0,c
 17255  001B46  337D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 17256  001B48  337C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 17257  001B4A  337B               	rrcf	___ftadd@f2& (0+255),f,b
 17258  001B4C  2B82               	incf	___ftadd@exp2& (0+255),f,b
 17259  001B4E                     l1813:
 17260                           
 17261                           ; BSR set to: 0
 17262                           
 17263                           ; BSR set to: 0
 17264  001B4E  5182               	movf	___ftadd@exp2& (0+255),w,b
 17265  001B50  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 17266  001B52  A4D8               	btfss	status,2,c
 17267  001B54  D7F7               	goto	l1814
 17268  001B56                     u6760:
 17269                           
 17270                           ; BSR set to: 0
 17271                           
 17272                           ; BSR set to: 0
 17273                           
 17274                           ; BSR set to: 0
 17275  001B56  AF81               	btfss	___ftadd@sign& (0+255),7,b
 17276  001B58  D00C               	goto	l1816
 17277                           
 17278                           ; BSR set to: 0
 17279  001B5A  0EFF               	movlw	255
 17280  001B5C  1B78               	xorwf	___ftadd@f1& (0+255),f,b
 17281  001B5E  0EFF               	movlw	255
 17282  001B60  1B79               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 17283  001B62  0EFF               	movlw	255
 17284  001B64  1B7A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 17285  001B66  0E01               	movlw	1
 17286  001B68  2778               	addwf	___ftadd@f1& (0+255),f,b
 17287  001B6A  0E00               	movlw	0
 17288  001B6C  2379               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 17289  001B6E  0E00               	movlw	0
 17290  001B70  237A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 17291  001B72                     l1816:
 17292                           
 17293                           ; BSR set to: 0
 17294  001B72  AD81               	btfss	___ftadd@sign& (0+255),6,b
 17295  001B74  D00C               	goto	l1817
 17296                           
 17297                           ; BSR set to: 0
 17298  001B76  0EFF               	movlw	255
 17299  001B78  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 17300  001B7A  0EFF               	movlw	255
 17301  001B7C  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 17302  001B7E  0EFF               	movlw	255
 17303  001B80  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 17304  001B82  0E01               	movlw	1
 17305  001B84  277B               	addwf	___ftadd@f2& (0+255),f,b
 17306  001B86  0E00               	movlw	0
 17307  001B88  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17308  001B8A  0E00               	movlw	0
 17309  001B8C  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17310  001B8E                     l1817:
 17311                           
 17312                           ; BSR set to: 0
 17313                           
 17314                           ; BSR set to: 0
 17315  001B8E  0E00               	movlw	0
 17316  001B90  6F81               	movwf	___ftadd@sign& (0+255),b
 17317                           
 17318                           ; BSR set to: 0
 17319  001B92  5178               	movf	___ftadd@f1& (0+255),w,b
 17320  001B94  277B               	addwf	___ftadd@f2& (0+255),f,b
 17321  001B96  5179               	movf	(___ftadd@f1+1)& (0+255),w,b
 17322  001B98  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17323  001B9A  517A               	movf	(___ftadd@f1+2)& (0+255),w,b
 17324  001B9C  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17325                           
 17326                           ; BSR set to: 0
 17327  001B9E  AF7D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 17328  001BA0  D00E               	goto	l1818
 17329                           
 17330                           ; BSR set to: 0
 17331  001BA2  0EFF               	movlw	255
 17332  001BA4  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 17333  001BA6  0EFF               	movlw	255
 17334  001BA8  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 17335  001BAA  0EFF               	movlw	255
 17336  001BAC  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 17337  001BAE  0E01               	movlw	1
 17338  001BB0  277B               	addwf	___ftadd@f2& (0+255),f,b
 17339  001BB2  0E00               	movlw	0
 17340  001BB4  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17341  001BB6  0E00               	movlw	0
 17342  001BB8  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17343                           
 17344                           ; BSR set to: 0
 17345  001BBA  0E01               	movlw	1
 17346  001BBC  6F81               	movwf	___ftadd@sign& (0+255),b
 17347  001BBE                     l1818:
 17348                           
 17349                           ; BSR set to: 0
 17350                           
 17351                           ; BSR set to: 0
 17352  001BBE  C07B  F018         	movff	___ftadd@f2,___ftpack@arg
 17353  001BC2  C07C  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 17354  001BC6  C07D  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 17355  001BCA  C083  F01B         	movff	___ftadd@exp1,___ftpack@exp
 17356  001BCE  C081  F01C         	movff	___ftadd@sign,___ftpack@sign
 17357  001BD2  EC2E  F017         	call	___ftpack	;wreg free
 17358  001BD6  C018  F078         	movff	?___ftpack,?___ftadd
 17359  001BDA  C019  F079         	movff	?___ftpack+1,?___ftadd+1
 17360  001BDE  C01A  F07A         	movff	?___ftpack+2,?___ftadd+2
 17361  001BE2  0012               	return	
 17362  001BE4                     __end_of___ftadd:
 17363                           	opt stack 0
 17364                           tosu	equ	0xFFF
 17365                           tosh	equ	0xFFE
 17366                           tosl	equ	0xFFD
 17367                           pclath	equ	0xFFA
 17368                           tblptru	equ	0xFF8
 17369                           tblptrh	equ	0xFF7
 17370                           tblptrl	equ	0xFF6
 17371                           tablat	equ	0xFF5
 17372                           prodh	equ	0xFF4
 17373                           prodl	equ	0xFF3
 17374                           intcon	equ	0xFF2
 17375                           intcon2	equ	0xFF1
 17376                           postinc0	equ	0xFEE
 17377                           plusw0	equ	0xFEB
 17378                           wreg	equ	0xFE8
 17379                           indf1	equ	0xFE7
 17380                           postdec1	equ	0xFE5
 17381                           fsr1h	equ	0xFE2
 17382                           fsr1l	equ	0xFE1
 17383                           indf2	equ	0xFDF
 17384                           postinc2	equ	0xFDE
 17385                           postdec2	equ	0xFDD
 17386                           plusw2	equ	0xFDB
 17387                           fsr2h	equ	0xFDA
 17388                           fsr2l	equ	0xFD9
 17389                           status	equ	0xFD8
 17390                           
 17391 ;; *************** function ___ftneg *****************
 17392 ;; Defined at:
 17393 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 17394 ;; Parameters:    Size  Location     Type
 17395 ;;  f1              3   23[COMRAM] float 
 17396 ;; Auto vars:     Size  Location     Type
 17397 ;;		None
 17398 ;; Return value:  Size  Location     Type
 17399 ;;                  3   23[COMRAM] float 
 17400 ;; Registers used:
 17401 ;;		wreg, status,2, status,0
 17402 ;; Tracked objects:
 17403 ;;		On entry : 0/0
 17404 ;;		On exit  : 0/0
 17405 ;;		Unchanged: 0/0
 17406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17407 ;;      Params:         3       0       0       0       0       0       0
 17408 ;;      Locals:         0       0       0       0       0       0       0
 17409 ;;      Temps:          0       0       0       0       0       0       0
 17410 ;;      Totals:         3       0       0       0       0       0       0
 17411 ;;Total ram usage:        3 bytes
 17412 ;; Hardware stack levels used:    1
 17413 ;; Hardware stack levels required when called:    4
 17414 ;; This function calls:
 17415 ;;		Nothing
 17416 ;; This function is called by:
 17417 ;;		_pow
 17418 ;;		_exp
 17419 ;; This function uses a non-reentrant model
 17420 ;;
 17421                           
 17422                           	psect	text99
 17423  004042                     __ptext99:
 17424                           	opt stack 0
 17425  004042                     ___ftneg:
 17426                           	opt stack 20
 17427                           
 17428                           ;incstack = 0
 17429  004042  5018               	movf	___ftneg@f1,w,c
 17430  004044  1019               	iorwf	___ftneg@f1+1,w,c
 17431  004046  101A               	iorwf	___ftneg@f1+2,w,c
 17432  004048  B4D8               	btfsc	status,2,c
 17433  00404A  D006               	goto	l1849
 17434  00404C  0E00               	movlw	0
 17435  00404E  1A18               	xorwf	___ftneg@f1,f,c
 17436  004050  0E00               	movlw	0
 17437  004052  1A19               	xorwf	___ftneg@f1+1,f,c
 17438  004054  0E80               	movlw	128
 17439  004056  1A1A               	xorwf	___ftneg@f1+2,f,c
 17440  004058                     l1849:
 17441  004058  C018  F018         	movff	___ftneg@f1,?___ftneg
 17442  00405C  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 17443  004060  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 17444  004064  0012               	return		;funcret
 17445  004066                     __end_of___ftneg:
 17446                           	opt stack 0
 17447                           tosu	equ	0xFFF
 17448                           tosh	equ	0xFFE
 17449                           tosl	equ	0xFFD
 17450                           pclath	equ	0xFFA
 17451                           tblptru	equ	0xFF8
 17452                           tblptrh	equ	0xFF7
 17453                           tblptrl	equ	0xFF6
 17454                           tablat	equ	0xFF5
 17455                           prodh	equ	0xFF4
 17456                           prodl	equ	0xFF3
 17457                           intcon	equ	0xFF2
 17458                           intcon2	equ	0xFF1
 17459                           postinc0	equ	0xFEE
 17460                           plusw0	equ	0xFEB
 17461                           wreg	equ	0xFE8
 17462                           indf1	equ	0xFE7
 17463                           postdec1	equ	0xFE5
 17464                           fsr1h	equ	0xFE2
 17465                           fsr1l	equ	0xFE1
 17466                           indf2	equ	0xFDF
 17467                           postinc2	equ	0xFDE
 17468                           postdec2	equ	0xFDD
 17469                           plusw2	equ	0xFDB
 17470                           fsr2h	equ	0xFDA
 17471                           fsr2l	equ	0xFD9
 17472                           status	equ	0xFD8
 17473                           
 17474 ;; *************** function ___ftdiv *****************
 17475 ;; Defined at:
 17476 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 17477 ;; Parameters:    Size  Location     Type
 17478 ;;  f1              3   40[COMRAM] float 
 17479 ;;  f2              3   43[COMRAM] float 
 17480 ;; Auto vars:     Size  Location     Type
 17481 ;;  f3              3    4[BANK0 ] float 
 17482 ;;  sign            1    8[BANK0 ] unsigned char 
 17483 ;;  exp             1    7[BANK0 ] unsigned char 
 17484 ;;  cntr            1    3[BANK0 ] unsigned char 
 17485 ;; Return value:  Size  Location     Type
 17486 ;;                  3   40[COMRAM] float 
 17487 ;; Registers used:
 17488 ;;		wreg, status,2, status,0, cstack
 17489 ;; Tracked objects:
 17490 ;;		On entry : 0/0
 17491 ;;		On exit  : 0/0
 17492 ;;		Unchanged: 0/0
 17493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17494 ;;      Params:         6       0       0       0       0       0       0
 17495 ;;      Locals:         0       6       0       0       0       0       0
 17496 ;;      Temps:          0       3       0       0       0       0       0
 17497 ;;      Totals:         6       9       0       0       0       0       0
 17498 ;;Total ram usage:       15 bytes
 17499 ;; Hardware stack levels used:    1
 17500 ;; Hardware stack levels required when called:    5
 17501 ;; This function calls:
 17502 ;;		___ftpack
 17503 ;; This function is called by:
 17504 ;;		_AdcConvert
 17505 ;;		_CheckFlashPrecentage
 17506 ;;		_exp
 17507 ;; This function uses a non-reentrant model
 17508 ;;
 17509                           
 17510                           	psect	text100
 17511  00261E                     __ptext100:
 17512                           	opt stack 0
 17513  00261E                     ___ftdiv:
 17514                           	opt stack 19
 17515                           
 17516                           ;incstack = 0
 17517  00261E  C02B  F060         	movff	___ftdiv@f1+2,??___ftdiv
 17518  002622  0100               	movlb	0	; () banked
 17519  002624  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 17520  002626  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 17521  002628  342A               	rlcf	___ftdiv@f1+1,w,c
 17522  00262A  3760               	rlcf	??___ftdiv& (0+255),f,b
 17523  00262C  E301               	bnc	u7001
 17524  00262E  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 17525  002630                     u7001:
 17526  002630  5160               	movf	??___ftdiv& (0+255),w,b
 17527  002632  6F67               	movwf	___ftdiv@exp& (0+255),b
 17528  002634  5167               	movf	___ftdiv@exp& (0+255),w,b
 17529  002636  A4D8               	btfss	status,2,c
 17530  002638  D007               	goto	l1823
 17531                           
 17532                           ; BSR set to: 0
 17533  00263A  0E00               	movlw	0
 17534  00263C  6E29               	movwf	?___ftdiv,c
 17535  00263E  0E00               	movlw	0
 17536  002640  6E2A               	movwf	?___ftdiv+1,c
 17537  002642  0E00               	movlw	0
 17538  002644  6E2B               	movwf	?___ftdiv+2,c
 17539                           
 17540                           ; BSR set to: 0
 17541  002646  0012               	return	
 17542  002648                     l1823:
 17543                           
 17544                           ; BSR set to: 0
 17545                           
 17546                           ; BSR set to: 0
 17547  002648  C02E  F060         	movff	___ftdiv@f2+2,??___ftdiv
 17548  00264C  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 17549  00264E  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 17550  002650  342D               	rlcf	___ftdiv@f2+1,w,c
 17551  002652  3760               	rlcf	??___ftdiv& (0+255),f,b
 17552  002654  E301               	bnc	u7021
 17553  002656  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 17554  002658                     u7021:
 17555  002658  5160               	movf	??___ftdiv& (0+255),w,b
 17556  00265A  6F68               	movwf	___ftdiv@sign& (0+255),b
 17557  00265C  5168               	movf	___ftdiv@sign& (0+255),w,b
 17558  00265E  A4D8               	btfss	status,2,c
 17559  002660  D007               	goto	l1825
 17560                           
 17561                           ; BSR set to: 0
 17562  002662  0E00               	movlw	0
 17563  002664  6E29               	movwf	?___ftdiv,c
 17564  002666  0E00               	movlw	0
 17565  002668  6E2A               	movwf	?___ftdiv+1,c
 17566  00266A  0E00               	movlw	0
 17567  00266C  6E2B               	movwf	?___ftdiv+2,c
 17568                           
 17569                           ; BSR set to: 0
 17570  00266E  0012               	return	
 17571  002670                     l1825:
 17572                           
 17573                           ; BSR set to: 0
 17574                           
 17575                           ; BSR set to: 0
 17576  002670  0E00               	movlw	0
 17577  002672  6F64               	movwf	___ftdiv@f3& (0+255),b
 17578  002674  0E00               	movlw	0
 17579  002676  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 17580  002678  0E00               	movlw	0
 17581  00267A  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 17582                           
 17583                           ; BSR set to: 0
 17584  00267C  5168               	movf	___ftdiv@sign& (0+255),w,b
 17585  00267E  0F89               	addlw	137
 17586  002680  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 17587                           
 17588                           ; BSR set to: 0
 17589  002682  C02B  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 17590                           
 17591                           ; BSR set to: 0
 17592  002686  502E               	movf	___ftdiv@f2+2,w,c
 17593  002688  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 17594                           
 17595                           ; BSR set to: 0
 17596  00268A  0E80               	movlw	128
 17597  00268C  1768               	andwf	___ftdiv@sign& (0+255),f,b
 17598                           
 17599                           ; BSR set to: 0
 17600  00268E  8E2A               	bsf	___ftdiv@f1+1,7,c
 17601                           
 17602                           ; BSR set to: 0
 17603  002690  0EFF               	movlw	255
 17604  002692  1629               	andwf	___ftdiv@f1,f,c
 17605  002694  0EFF               	movlw	255
 17606  002696  162A               	andwf	___ftdiv@f1+1,f,c
 17607  002698  0E00               	movlw	0
 17608  00269A  162B               	andwf	___ftdiv@f1+2,f,c
 17609                           
 17610                           ; BSR set to: 0
 17611  00269C  8E2D               	bsf	___ftdiv@f2+1,7,c
 17612                           
 17613                           ; BSR set to: 0
 17614  00269E  0EFF               	movlw	255
 17615  0026A0  162C               	andwf	___ftdiv@f2,f,c
 17616  0026A2  0EFF               	movlw	255
 17617  0026A4  162D               	andwf	___ftdiv@f2+1,f,c
 17618  0026A6  0E00               	movlw	0
 17619  0026A8  162E               	andwf	___ftdiv@f2+2,f,c
 17620                           
 17621                           ; BSR set to: 0
 17622  0026AA  0E18               	movlw	24
 17623  0026AC  6F63               	movwf	___ftdiv@cntr& (0+255),b
 17624  0026AE                     
 17625                           ; BSR set to: 0
 17626                           
 17627                           ; BSR set to: 0
 17628  0026AE  90D8               	bcf	status,0,c
 17629  0026B0  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 17630  0026B2  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 17631  0026B4  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 17632                           
 17633                           ; BSR set to: 0
 17634  0026B6  502C               	movf	___ftdiv@f2,w,c
 17635  0026B8  5C29               	subwf	___ftdiv@f1,w,c
 17636  0026BA  502D               	movf	___ftdiv@f2+1,w,c
 17637  0026BC  582A               	subwfb	___ftdiv@f1+1,w,c
 17638  0026BE  502E               	movf	___ftdiv@f2+2,w,c
 17639  0026C0  582B               	subwfb	___ftdiv@f1+2,w,c
 17640  0026C2  A0D8               	btfss	status,0,c
 17641  0026C4  D007               	goto	l1827
 17642                           
 17643                           ; BSR set to: 0
 17644  0026C6  502C               	movf	___ftdiv@f2,w,c
 17645  0026C8  5E29               	subwf	___ftdiv@f1,f,c
 17646  0026CA  502D               	movf	___ftdiv@f2+1,w,c
 17647  0026CC  5A2A               	subwfb	___ftdiv@f1+1,f,c
 17648  0026CE  502E               	movf	___ftdiv@f2+2,w,c
 17649  0026D0  5A2B               	subwfb	___ftdiv@f1+2,f,c
 17650                           
 17651                           ; BSR set to: 0
 17652  0026D2  8164               	bsf	___ftdiv@f3& (0+255),0,b
 17653  0026D4                     l1827:
 17654                           
 17655                           ; BSR set to: 0
 17656  0026D4  90D8               	bcf	status,0,c
 17657  0026D6  3629               	rlcf	___ftdiv@f1,f,c
 17658  0026D8  362A               	rlcf	___ftdiv@f1+1,f,c
 17659  0026DA  362B               	rlcf	___ftdiv@f1+2,f,c
 17660                           
 17661                           ; BSR set to: 0
 17662  0026DC  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 17663  0026DE  D7E7               	goto	l1826
 17664                           
 17665                           ; BSR set to: 0
 17666                           
 17667                           ; BSR set to: 0
 17668  0026E0  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 17669  0026E4  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 17670  0026E8  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 17671  0026EC  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 17672  0026F0  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 17673  0026F4  EC2E  F017         	call	___ftpack	;wreg free
 17674  0026F8  C018  F029         	movff	?___ftpack,?___ftdiv
 17675  0026FC  C019  F02A         	movff	?___ftpack+1,?___ftdiv+1
 17676  002700  C01A  F02B         	movff	?___ftpack+2,?___ftdiv+2
 17677  002704  0012               	return	
 17678  002706                     __end_of___ftdiv:
 17679                           	opt stack 0
 17680                           tosu	equ	0xFFF
 17681                           tosh	equ	0xFFE
 17682                           tosl	equ	0xFFD
 17683                           pclath	equ	0xFFA
 17684                           tblptru	equ	0xFF8
 17685                           tblptrh	equ	0xFF7
 17686                           tblptrl	equ	0xFF6
 17687                           tablat	equ	0xFF5
 17688                           prodh	equ	0xFF4
 17689                           prodl	equ	0xFF3
 17690                           intcon	equ	0xFF2
 17691                           intcon2	equ	0xFF1
 17692                           postinc0	equ	0xFEE
 17693                           plusw0	equ	0xFEB
 17694                           wreg	equ	0xFE8
 17695                           indf1	equ	0xFE7
 17696                           postdec1	equ	0xFE5
 17697                           fsr1h	equ	0xFE2
 17698                           fsr1l	equ	0xFE1
 17699                           indf2	equ	0xFDF
 17700                           postinc2	equ	0xFDE
 17701                           postdec2	equ	0xFDD
 17702                           plusw2	equ	0xFDB
 17703                           fsr2h	equ	0xFDA
 17704                           fsr2l	equ	0xFD9
 17705                           status	equ	0xFD8
 17706                           
 17707 ;; *************** function ___awtoft *****************
 17708 ;; Defined at:
 17709 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 17710 ;; Parameters:    Size  Location     Type
 17711 ;;  c               2   31[COMRAM] int 
 17712 ;; Auto vars:     Size  Location     Type
 17713 ;;  sign            1   34[COMRAM] unsigned char 
 17714 ;; Return value:  Size  Location     Type
 17715 ;;                  3   31[COMRAM] float 
 17716 ;; Registers used:
 17717 ;;		wreg, status,2, status,0, cstack
 17718 ;; Tracked objects:
 17719 ;;		On entry : 0/0
 17720 ;;		On exit  : 0/0
 17721 ;;		Unchanged: 0/0
 17722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17723 ;;      Params:         3       0       0       0       0       0       0
 17724 ;;      Locals:         1       0       0       0       0       0       0
 17725 ;;      Temps:          0       0       0       0       0       0       0
 17726 ;;      Totals:         4       0       0       0       0       0       0
 17727 ;;Total ram usage:        4 bytes
 17728 ;; Hardware stack levels used:    1
 17729 ;; Hardware stack levels required when called:    5
 17730 ;; This function calls:
 17731 ;;		___ftpack
 17732 ;; This function is called by:
 17733 ;;		_ReadIntFromEeprom
 17734 ;;		_exp
 17735 ;;		_log
 17736 ;; This function uses a non-reentrant model
 17737 ;;
 17738                           
 17739                           	psect	text101
 17740  003C94                     __ptext101:
 17741                           	opt stack 0
 17742  003C94                     ___awtoft:
 17743                           	opt stack 19
 17744                           
 17745                           ;incstack = 0
 17746  003C94  0E00               	movlw	0
 17747  003C96  6E23               	movwf	___awtoft@sign,c
 17748  003C98  AE21               	btfss	___awtoft@c+1,7,c
 17749  003C9A  D006               	goto	l1740
 17750  003C9C  6C20               	negf	___awtoft@c,c
 17751  003C9E  1E21               	comf	___awtoft@c+1,f,c
 17752  003CA0  B0D8               	btfsc	status,0,c
 17753  003CA2  2A21               	incf	___awtoft@c+1,f,c
 17754  003CA4  0E01               	movlw	1
 17755  003CA6  6E23               	movwf	___awtoft@sign,c
 17756  003CA8                     l1740:
 17757  003CA8  C020  F018         	movff	___awtoft@c,___ftpack@arg
 17758  003CAC  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 17759  003CB0  6A1A               	clrf	___ftpack@arg+2,c
 17760  003CB2  0E8E               	movlw	142
 17761  003CB4  6E1B               	movwf	___ftpack@exp,c
 17762  003CB6  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 17763  003CBA  EC2E  F017         	call	___ftpack	;wreg free
 17764  003CBE  C018  F020         	movff	?___ftpack,?___awtoft
 17765  003CC2  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 17766  003CC6  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 17767  003CCA  0012               	return	
 17768  003CCC                     __end_of___awtoft:
 17769                           	opt stack 0
 17770                           tosu	equ	0xFFF
 17771                           tosh	equ	0xFFE
 17772                           tosl	equ	0xFFD
 17773                           pclath	equ	0xFFA
 17774                           tblptru	equ	0xFF8
 17775                           tblptrh	equ	0xFF7
 17776                           tblptrl	equ	0xFF6
 17777                           tablat	equ	0xFF5
 17778                           prodh	equ	0xFF4
 17779                           prodl	equ	0xFF3
 17780                           intcon	equ	0xFF2
 17781                           intcon2	equ	0xFF1
 17782                           postinc0	equ	0xFEE
 17783                           plusw0	equ	0xFEB
 17784                           wreg	equ	0xFE8
 17785                           indf1	equ	0xFE7
 17786                           postdec1	equ	0xFE5
 17787                           fsr1h	equ	0xFE2
 17788                           fsr1l	equ	0xFE1
 17789                           indf2	equ	0xFDF
 17790                           postinc2	equ	0xFDE
 17791                           postdec2	equ	0xFDD
 17792                           plusw2	equ	0xFDB
 17793                           fsr2h	equ	0xFDA
 17794                           fsr2l	equ	0xFD9
 17795                           status	equ	0xFD8
 17796                           
 17797 ;; *************** function ___lltoft *****************
 17798 ;; Defined at:
 17799 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 17800 ;; Parameters:    Size  Location     Type
 17801 ;;  c               4   31[COMRAM] unsigned long 
 17802 ;; Auto vars:     Size  Location     Type
 17803 ;;  exp             1   39[COMRAM] unsigned char 
 17804 ;; Return value:  Size  Location     Type
 17805 ;;                  3   31[COMRAM] float 
 17806 ;; Registers used:
 17807 ;;		wreg, status,2, status,0, cstack
 17808 ;; Tracked objects:
 17809 ;;		On entry : 0/0
 17810 ;;		On exit  : 0/0
 17811 ;;		Unchanged: 0/0
 17812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17813 ;;      Params:         4       0       0       0       0       0       0
 17814 ;;      Locals:         1       0       0       0       0       0       0
 17815 ;;      Temps:          4       0       0       0       0       0       0
 17816 ;;      Totals:         9       0       0       0       0       0       0
 17817 ;;Total ram usage:        9 bytes
 17818 ;; Hardware stack levels used:    1
 17819 ;; Hardware stack levels required when called:    5
 17820 ;; This function calls:
 17821 ;;		___ftpack
 17822 ;; This function is called by:
 17823 ;;		_CheckFlashPrecentage
 17824 ;;		_pow
 17825 ;; This function uses a non-reentrant model
 17826 ;;
 17827                           
 17828                           	psect	text102
 17829  003764                     __ptext102:
 17830                           	opt stack 0
 17831  003764                     ___lltoft:
 17832                           	opt stack 20
 17833                           
 17834                           ;incstack = 0
 17835  003764  0E8E               	movlw	142
 17836  003766  6E28               	movwf	___lltoft@exp,c
 17837  003768  D006               	goto	l1916
 17838  00376A  90D8               	bcf	status,0,c
 17839  00376C  3223               	rrcf	___lltoft@c+3,f,c
 17840  00376E  3222               	rrcf	___lltoft@c+2,f,c
 17841  003770  3221               	rrcf	___lltoft@c+1,f,c
 17842  003772  3220               	rrcf	___lltoft@c,f,c
 17843  003774  2A28               	incf	___lltoft@exp,f,c
 17844  003776                     l1916:
 17845  003776  0E00               	movlw	0
 17846  003778  1420               	andwf	___lltoft@c,w,c
 17847  00377A  6E24               	movwf	??___lltoft& (0+255),c
 17848  00377C  0E00               	movlw	0
 17849  00377E  1421               	andwf	___lltoft@c+1,w,c
 17850  003780  6E25               	movwf	(??___lltoft+1)& (0+255),c
 17851  003782  0E00               	movlw	0
 17852  003784  1422               	andwf	___lltoft@c+2,w,c
 17853  003786  6E26               	movwf	(??___lltoft+2)& (0+255),c
 17854  003788  0EFF               	movlw	255
 17855  00378A  1423               	andwf	___lltoft@c+3,w,c
 17856  00378C  6E27               	movwf	(??___lltoft+3)& (0+255),c
 17857  00378E  5024               	movf	??___lltoft,w,c
 17858  003790  1025               	iorwf	??___lltoft+1,w,c
 17859  003792  1026               	iorwf	??___lltoft+2,w,c
 17860  003794  1027               	iorwf	??___lltoft+3,w,c
 17861  003796  A4D8               	btfss	status,2,c
 17862  003798  D7E8               	goto	l1917
 17863  00379A  C020  F018         	movff	___lltoft@c,___ftpack@arg
 17864  00379E  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 17865  0037A2  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 17866  0037A6  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 17867  0037AA  0E00               	movlw	0
 17868  0037AC  6E1C               	movwf	___ftpack@sign,c
 17869  0037AE  EC2E  F017         	call	___ftpack	;wreg free
 17870  0037B2  C018  F020         	movff	?___ftpack,?___lltoft
 17871  0037B6  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 17872  0037BA  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 17873  0037BE  0012               	return	
 17874  0037C0                     __end_of___lltoft:
 17875                           	opt stack 0
 17876                           tosu	equ	0xFFF
 17877                           tosh	equ	0xFFE
 17878                           tosl	equ	0xFFD
 17879                           pclath	equ	0xFFA
 17880                           tblptru	equ	0xFF8
 17881                           tblptrh	equ	0xFF7
 17882                           tblptrl	equ	0xFF6
 17883                           tablat	equ	0xFF5
 17884                           prodh	equ	0xFF4
 17885                           prodl	equ	0xFF3
 17886                           intcon	equ	0xFF2
 17887                           intcon2	equ	0xFF1
 17888                           postinc0	equ	0xFEE
 17889                           plusw0	equ	0xFEB
 17890                           wreg	equ	0xFE8
 17891                           indf1	equ	0xFE7
 17892                           postdec1	equ	0xFE5
 17893                           fsr1h	equ	0xFE2
 17894                           fsr1l	equ	0xFE1
 17895                           indf2	equ	0xFDF
 17896                           postinc2	equ	0xFDE
 17897                           postdec2	equ	0xFDD
 17898                           plusw2	equ	0xFDB
 17899                           fsr2h	equ	0xFDA
 17900                           fsr2l	equ	0xFD9
 17901                           status	equ	0xFD8
 17902                           
 17903 ;; *************** function ___lwtoft *****************
 17904 ;; Defined at:
 17905 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 17906 ;; Parameters:    Size  Location     Type
 17907 ;;  c               2   31[COMRAM] unsigned int 
 17908 ;; Auto vars:     Size  Location     Type
 17909 ;;		None
 17910 ;; Return value:  Size  Location     Type
 17911 ;;                  3   31[COMRAM] float 
 17912 ;; Registers used:
 17913 ;;		wreg, status,2, status,0, cstack
 17914 ;; Tracked objects:
 17915 ;;		On entry : 0/0
 17916 ;;		On exit  : 0/0
 17917 ;;		Unchanged: 0/0
 17918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17919 ;;      Params:         3       0       0       0       0       0       0
 17920 ;;      Locals:         0       0       0       0       0       0       0
 17921 ;;      Temps:          0       0       0       0       0       0       0
 17922 ;;      Totals:         3       0       0       0       0       0       0
 17923 ;;Total ram usage:        3 bytes
 17924 ;; Hardware stack levels used:    1
 17925 ;; Hardware stack levels required when called:    5
 17926 ;; This function calls:
 17927 ;;		___ftpack
 17928 ;; This function is called by:
 17929 ;;		_AdcConvert
 17930 ;; This function uses a non-reentrant model
 17931 ;;
 17932                           
 17933                           	psect	text103
 17934  004066                     __ptext103:
 17935                           	opt stack 0
 17936  004066                     ___lwtoft:
 17937                           	opt stack 24
 17938                           
 17939                           ;incstack = 0
 17940  004066  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 17941  00406A  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 17942  00406E  6A1A               	clrf	___ftpack@arg+2,c
 17943  004070  0E8E               	movlw	142
 17944  004072  6E1B               	movwf	___ftpack@exp,c
 17945  004074  0E00               	movlw	0
 17946  004076  6E1C               	movwf	___ftpack@sign,c
 17947  004078  EC2E  F017         	call	___ftpack	;wreg free
 17948  00407C  C018  F020         	movff	?___ftpack,?___lwtoft
 17949  004080  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 17950  004084  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 17951  004088  0012               	return	
 17952  00408A                     __end_of___lwtoft:
 17953                           	opt stack 0
 17954                           tosu	equ	0xFFF
 17955                           tosh	equ	0xFFE
 17956                           tosl	equ	0xFFD
 17957                           pclath	equ	0xFFA
 17958                           tblptru	equ	0xFF8
 17959                           tblptrh	equ	0xFF7
 17960                           tblptrl	equ	0xFF6
 17961                           tablat	equ	0xFF5
 17962                           prodh	equ	0xFF4
 17963                           prodl	equ	0xFF3
 17964                           intcon	equ	0xFF2
 17965                           intcon2	equ	0xFF1
 17966                           postinc0	equ	0xFEE
 17967                           plusw0	equ	0xFEB
 17968                           wreg	equ	0xFE8
 17969                           indf1	equ	0xFE7
 17970                           postdec1	equ	0xFE5
 17971                           fsr1h	equ	0xFE2
 17972                           fsr1l	equ	0xFE1
 17973                           indf2	equ	0xFDF
 17974                           postinc2	equ	0xFDE
 17975                           postdec2	equ	0xFDD
 17976                           plusw2	equ	0xFDB
 17977                           fsr2h	equ	0xFDA
 17978                           fsr2l	equ	0xFD9
 17979                           status	equ	0xFD8
 17980                           
 17981 ;; *************** function ___ftpack *****************
 17982 ;; Defined at:
 17983 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 17984 ;; Parameters:    Size  Location     Type
 17985 ;;  arg             3   23[COMRAM] unsigned um
 17986 ;;  exp             1   26[COMRAM] unsigned char 
 17987 ;;  sign            1   27[COMRAM] unsigned char 
 17988 ;; Auto vars:     Size  Location     Type
 17989 ;;		None
 17990 ;; Return value:  Size  Location     Type
 17991 ;;                  3   23[COMRAM] float 
 17992 ;; Registers used:
 17993 ;;		wreg, status,2, status,0
 17994 ;; Tracked objects:
 17995 ;;		On entry : 0/0
 17996 ;;		On exit  : 0/0
 17997 ;;		Unchanged: 0/0
 17998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17999 ;;      Params:         5       0       0       0       0       0       0
 18000 ;;      Locals:         0       0       0       0       0       0       0
 18001 ;;      Temps:          3       0       0       0       0       0       0
 18002 ;;      Totals:         8       0       0       0       0       0       0
 18003 ;;Total ram usage:        8 bytes
 18004 ;; Hardware stack levels used:    1
 18005 ;; Hardware stack levels required when called:    4
 18006 ;; This function calls:
 18007 ;;		Nothing
 18008 ;; This function is called by:
 18009 ;;		___altoft
 18010 ;;		___awtoft
 18011 ;;		___ftadd
 18012 ;;		___ftdiv
 18013 ;;		___ftmul
 18014 ;;		___lltoft
 18015 ;;		___lwtoft
 18016 ;; This function uses a non-reentrant model
 18017 ;;
 18018                           
 18019                           	psect	text104
 18020  002E5C                     __ptext104:
 18021                           	opt stack 0
 18022  002E5C                     ___ftpack:
 18023                           	opt stack 18
 18024                           
 18025                           ;incstack = 0
 18026  002E5C  501B               	movf	___ftpack@exp,w,c
 18027  002E5E  B4D8               	btfsc	status,2,c
 18028  002E60  D005               	goto	u6500
 18029  002E62  5018               	movf	___ftpack@arg,w,c
 18030  002E64  1019               	iorwf	___ftpack@arg+1,w,c
 18031  002E66  101A               	iorwf	___ftpack@arg+2,w,c
 18032  002E68  A4D8               	btfss	status,2,c
 18033  002E6A  D00C               	goto	l1759
 18034  002E6C                     u6500:
 18035  002E6C  0E00               	movlw	0
 18036  002E6E  6E18               	movwf	?___ftpack,c
 18037  002E70  0E00               	movlw	0
 18038  002E72  6E19               	movwf	?___ftpack+1,c
 18039  002E74  0E00               	movlw	0
 18040  002E76  6E1A               	movwf	?___ftpack+2,c
 18041  002E78  0012               	return	
 18042  002E7A  2A1B               	incf	___ftpack@exp,f,c
 18043  002E7C  90D8               	bcf	status,0,c
 18044  002E7E  321A               	rrcf	___ftpack@arg+2,f,c
 18045  002E80  3219               	rrcf	___ftpack@arg+1,f,c
 18046  002E82  3218               	rrcf	___ftpack@arg,f,c
 18047  002E84                     l1759:
 18048  002E84  0E00               	movlw	0
 18049  002E86  1418               	andwf	___ftpack@arg,w,c
 18050  002E88  6E1D               	movwf	??___ftpack& (0+255),c
 18051  002E8A  0E00               	movlw	0
 18052  002E8C  1419               	andwf	___ftpack@arg+1,w,c
 18053  002E8E  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 18054  002E90  0EFE               	movlw	254
 18055  002E92  141A               	andwf	___ftpack@arg+2,w,c
 18056  002E94  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 18057  002E96  501D               	movf	??___ftpack,w,c
 18058  002E98  101E               	iorwf	??___ftpack+1,w,c
 18059  002E9A  101F               	iorwf	??___ftpack+2,w,c
 18060  002E9C  B4D8               	btfsc	status,2,c
 18061  002E9E  D00C               	goto	l1762
 18062  002EA0  D7EC               	goto	l1760
 18063  002EA2  2A1B               	incf	___ftpack@exp,f,c
 18064  002EA4  0E01               	movlw	1
 18065  002EA6  2618               	addwf	___ftpack@arg,f,c
 18066  002EA8  0E00               	movlw	0
 18067  002EAA  2219               	addwfc	___ftpack@arg+1,f,c
 18068  002EAC  0E00               	movlw	0
 18069  002EAE  221A               	addwfc	___ftpack@arg+2,f,c
 18070  002EB0  90D8               	bcf	status,0,c
 18071  002EB2  321A               	rrcf	___ftpack@arg+2,f,c
 18072  002EB4  3219               	rrcf	___ftpack@arg+1,f,c
 18073  002EB6  3218               	rrcf	___ftpack@arg,f,c
 18074  002EB8                     l1762:
 18075  002EB8  0E00               	movlw	0
 18076  002EBA  1418               	andwf	___ftpack@arg,w,c
 18077  002EBC  6E1D               	movwf	??___ftpack& (0+255),c
 18078  002EBE  0E00               	movlw	0
 18079  002EC0  1419               	andwf	___ftpack@arg+1,w,c
 18080  002EC2  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 18081  002EC4  0EFF               	movlw	255
 18082  002EC6  141A               	andwf	___ftpack@arg+2,w,c
 18083  002EC8  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 18084  002ECA  501D               	movf	??___ftpack,w,c
 18085  002ECC  101E               	iorwf	??___ftpack+1,w,c
 18086  002ECE  101F               	iorwf	??___ftpack+2,w,c
 18087  002ED0  B4D8               	btfsc	status,2,c
 18088  002ED2  D006               	goto	l1765
 18089  002ED4  D7E6               	goto	l1763
 18090  002ED6  061B               	decf	___ftpack@exp,f,c
 18091  002ED8  90D8               	bcf	status,0,c
 18092  002EDA  3618               	rlcf	___ftpack@arg,f,c
 18093  002EDC  3619               	rlcf	___ftpack@arg+1,f,c
 18094  002EDE  361A               	rlcf	___ftpack@arg+2,f,c
 18095  002EE0                     l1765:
 18096  002EE0  BE19               	btfsc	___ftpack@arg+1,7,c
 18097  002EE2  D003               	goto	u6540
 18098  002EE4  0E02               	movlw	2
 18099  002EE6  601B               	cpfslt	___ftpack@exp,c
 18100  002EE8  D7F6               	goto	l1766
 18101  002EEA                     u6540:
 18102  002EEA  A01B               	btfss	___ftpack@exp,0,c
 18103  002EEC  9E19               	bcf	___ftpack@arg+1,7,c
 18104  002EEE  90D8               	bcf	status,0,c
 18105  002EF0  321B               	rrcf	___ftpack@exp,f,c
 18106  002EF2  501B               	movf	___ftpack@exp,w,c
 18107  002EF4  121A               	iorwf	___ftpack@arg+2,f,c
 18108  002EF6  501C               	movf	___ftpack@sign,w,c
 18109  002EF8  A4D8               	btfss	status,2,c
 18110  002EFA  8E1A               	bsf	___ftpack@arg+2,7,c
 18111  002EFC  C018  F018         	movff	___ftpack@arg,?___ftpack
 18112  002F00  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 18113  002F04  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 18114  002F08  0012               	return	
 18115  002F0A                     __end_of___ftpack:
 18116                           	opt stack 0
 18117                           tosu	equ	0xFFF
 18118                           tosh	equ	0xFFE
 18119                           tosl	equ	0xFFD
 18120                           pclath	equ	0xFFA
 18121                           tblptru	equ	0xFF8
 18122                           tblptrh	equ	0xFF7
 18123                           tblptrl	equ	0xFF6
 18124                           tablat	equ	0xFF5
 18125                           prodh	equ	0xFF4
 18126                           prodl	equ	0xFF3
 18127                           intcon	equ	0xFF2
 18128                           intcon2	equ	0xFF1
 18129                           postinc0	equ	0xFEE
 18130                           plusw0	equ	0xFEB
 18131                           wreg	equ	0xFE8
 18132                           indf1	equ	0xFE7
 18133                           postdec1	equ	0xFE5
 18134                           fsr1h	equ	0xFE2
 18135                           fsr1l	equ	0xFE1
 18136                           indf2	equ	0xFDF
 18137                           postinc2	equ	0xFDE
 18138                           postdec2	equ	0xFDD
 18139                           plusw2	equ	0xFDB
 18140                           fsr2h	equ	0xFDA
 18141                           fsr2l	equ	0xFD9
 18142                           status	equ	0xFD8
 18143                           
 18144 ;; *************** function _FlashSampleWrite *****************
 18145 ;; Defined at:
 18146 ;;		line 29 in file "FlashApp.c"
 18147 ;; Parameters:    Size  Location     Type
 18148 ;;  sampleData      2   44[COMRAM] unsigned int 
 18149 ;;  channelNum      1   46[COMRAM] unsigned char 
 18150 ;; Auto vars:     Size  Location     Type
 18151 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 18152 ;; Return value:  Size  Location     Type
 18153 ;;                  1    wreg      void 
 18154 ;; Registers used:
 18155 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18156 ;; Tracked objects:
 18157 ;;		On entry : 0/0
 18158 ;;		On exit  : 0/0
 18159 ;;		Unchanged: 0/0
 18160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18161 ;;      Params:         3       0       0       0       0       0       0
 18162 ;;      Locals:         0       2       0       0       0       0       0
 18163 ;;      Temps:          0       2       0       0       0       0       0
 18164 ;;      Totals:         3       4       0       0       0       0       0
 18165 ;;Total ram usage:        7 bytes
 18166 ;; Hardware stack levels used:    1
 18167 ;; Hardware stack levels required when called:    6
 18168 ;; This function calls:
 18169 ;;		_FLASH_IsWriteDone
 18170 ;;		_FLASH_WriteBlock
 18171 ;; This function is called by:
 18172 ;;		_AdcConvert
 18173 ;; This function uses a non-reentrant model
 18174 ;;
 18175                           
 18176                           	psect	text105
 18177  00223C                     __ptext105:
 18178                           	opt stack 0
 18179  00223C                     _FlashSampleWrite:
 18180                           	opt stack 23
 18181                           
 18182                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 18183                           
 18184                           ;incstack = 0
 18185  00223C  502F               	movf	FlashSampleWrite@channelNum,w,c
 18186  00223E  0100               	movlb	0	; () banked
 18187  002240  6F60               	movwf	??_FlashSampleWrite& (0+255),b
 18188  002242  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
 18189  002244  0E0C               	movlw	12
 18190  002246                     u8935:
 18191  002246  90D8               	bcf	status,0,c
 18192  002248  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 18193  00224A  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 18194  00224C  2EE8               	decfsz	wreg,f,c
 18195  00224E  D7FB               	goto	u8935
 18196  002250  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 18197  002254  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 18198                           
 18199                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 18200  002258  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 18201  00225A  122D               	iorwf	FlashSampleWrite@sampleData,f,c
 18202  00225C  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 18203  00225E  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
 18204                           
 18205                           ; BSR set to: 0
 18206                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 18207  002260  90D8               	bcf	status,0,c
 18208  002262  35E4               	rlcf	_sampleCount& (0+255),w,b
 18209  002264  6ED9               	movwf	fsr2l,c
 18210  002266  35E5               	rlcf	(_sampleCount+1)& (0+255),w,b
 18211  002268  6EDA               	movwf	fsr2h,c
 18212  00226A  0E70               	movlw	low _sampleArray
 18213  00226C  26D9               	addwf	fsr2l,f,c
 18214  00226E  0E01               	movlw	high _sampleArray
 18215  002270  22DA               	addwfc	fsr2h,f,c
 18216  002272  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 18217  002276  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 18218                           
 18219                           ; BSR set to: 0
 18220                           ;FlashApp.c: 35: sampleCount ++;
 18221  00227A  4BE4               	infsnz	_sampleCount& (0+255),f,b
 18222  00227C  2BE5               	incf	(_sampleCount+1)& (0+255),f,b
 18223                           
 18224                           ; BSR set to: 0
 18225                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 18226  00227E  C0E4  F060         	movff	_sampleCount,??_FlashSampleWrite
 18227  002282  C0E5  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
 18228  002286  90D8               	bcf	status,0,c
 18229  002288  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 18230  00228A  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 18231  00228C  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 18232  00228E  E104               	bnz	u8940
 18233  002290  0E40               	movlw	64
 18234  002292  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
 18235  002294  A0D8               	btfss	status,0,c
 18236  002296  0012               	return	
 18237  002298                     u8940:
 18238                           
 18239                           ; BSR set to: 0
 18240  002298  EC3B  F021         	call	_FLASH_IsWriteDone	;wreg free
 18241  00229C  0900               	iorlw	0
 18242  00229E  B4D8               	btfsc	status,2,c
 18243  0022A0  0012               	return	
 18244                           
 18245                           ;FlashApp.c: 38: {
 18246                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 18247  0022A2  C040  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 18248  0022A6  C041  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 18249  0022AA  C042  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 18250  0022AE  C043  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 18251  0022B2  0E70               	movlw	low _sampleArray
 18252  0022B4  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 18253  0022B6  0E01               	movlw	high _sampleArray
 18254  0022B8  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 18255  0022BA  EC1C  F016         	call	_FLASH_WriteBlock	;wreg free
 18256                           
 18257                           ;FlashApp.c: 40: writeAddress += (64);
 18258  0022BE  0E40               	movlw	64
 18259  0022C0  2640               	addwf	_writeAddress,f,c
 18260  0022C2  0E00               	movlw	0
 18261  0022C4  2241               	addwfc	_writeAddress+1,f,c
 18262  0022C6  2242               	addwfc	_writeAddress+2,f,c
 18263  0022C8  2243               	addwfc	_writeAddress+3,f,c
 18264                           
 18265                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 18266  0022CA  5043               	movf	_writeAddress+3,w,c
 18267  0022CC  1042               	iorwf	_writeAddress+2,w,c
 18268  0022CE  E106               	bnz	u8960
 18269  0022D0  0EF0               	movlw	240
 18270  0022D2  5C40               	subwf	_writeAddress,w,c
 18271  0022D4  0E7F               	movlw	127
 18272  0022D6  5841               	subwfb	_writeAddress+1,w,c
 18273  0022D8  A0D8               	btfss	status,0,c
 18274  0022DA  D018               	goto	l299
 18275  0022DC                     u8960:
 18276                           
 18277                           ;FlashApp.c: 42: {
 18278                           ;FlashApp.c: 43: writeAddress = 0x4500;
 18279  0022DC  0E00               	movlw	0
 18280  0022DE  6E40               	movwf	_writeAddress,c
 18281  0022E0  0E45               	movlw	69
 18282  0022E2  6E41               	movwf	_writeAddress+1,c
 18283  0022E4  0E00               	movlw	0
 18284  0022E6  6E42               	movwf	_writeAddress+2,c
 18285  0022E8  0E00               	movlw	0
 18286  0022EA  6E43               	movwf	_writeAddress+3,c
 18287                           
 18288                           ;FlashApp.c: 44: isReWriteDone = 1;
 18289  0022EC  0E01               	movlw	1
 18290  0022EE  0100               	movlb	0	; () banked
 18291  0022F0  6FEB               	movwf	_isReWriteDone& (0+255),b
 18292                           
 18293                           ; BSR set to: 0
 18294                           ;FlashApp.c: 45: if (readAddress == 0x4500)
 18295  0022F2  0E45               	movlw	69
 18296  0022F4  19FB               	xorwf	(_readAddress+1)& (0+255),w,b
 18297  0022F6  11FA               	iorwf	_readAddress& (0+255),w,b
 18298  0022F8  11FC               	iorwf	(_readAddress+2)& (0+255),w,b
 18299  0022FA  11FD               	iorwf	(_readAddress+3)& (0+255),w,b
 18300  0022FC  A4D8               	btfss	status,2,c
 18301  0022FE  D006               	goto	l299
 18302                           
 18303                           ; BSR set to: 0
 18304                           ;FlashApp.c: 46: {
 18305                           ;FlashApp.c: 47: readAddress += (64);
 18306  002300  0E40               	movlw	64
 18307  002302  27FA               	addwf	_readAddress& (0+255),f,b
 18308  002304  0E00               	movlw	0
 18309  002306  23FB               	addwfc	(_readAddress+1)& (0+255),f,b
 18310  002308  23FC               	addwfc	(_readAddress+2)& (0+255),f,b
 18311  00230A  23FD               	addwfc	(_readAddress+3)& (0+255),f,b
 18312  00230C                     l299:
 18313                           
 18314                           ;FlashApp.c: 48: }
 18315                           ;FlashApp.c: 49: }
 18316                           ;FlashApp.c: 51: if (numOfValidateSamples < ((0x4500-0x7FF0)/(64)))
 18317                           
 18318                           ; BSR set to: 0
 18319  00230C  0E15               	movlw	21
 18320  00230E  5C31               	subwf	_numOfValidateSamples,w,c
 18321  002310  0EFF               	movlw	255
 18322  002312  5832               	subwfb	_numOfValidateSamples+1,w,c
 18323  002314  0EFF               	movlw	255
 18324  002316  5833               	subwfb	_numOfValidateSamples+2,w,c
 18325  002318  0EFF               	movlw	255
 18326  00231A  5834               	subwfb	_numOfValidateSamples+3,w,c
 18327  00231C  B0D8               	btfsc	status,0,c
 18328  00231E  D006               	goto	l300
 18329                           
 18330                           ;FlashApp.c: 52: {
 18331                           ;FlashApp.c: 53: numOfValidateSamples++;
 18332  002320  0E01               	movlw	1
 18333  002322  2631               	addwf	_numOfValidateSamples,f,c
 18334  002324  0E00               	movlw	0
 18335  002326  2232               	addwfc	_numOfValidateSamples+1,f,c
 18336  002328  2233               	addwfc	_numOfValidateSamples+2,f,c
 18337  00232A  2234               	addwfc	_numOfValidateSamples+3,f,c
 18338  00232C                     l300:
 18339                           
 18340                           ;FlashApp.c: 54: }
 18341                           ;FlashApp.c: 55: sampleCount = 0;
 18342  00232C  0E00               	movlw	0
 18343  00232E  0100               	movlb	0	; () banked
 18344  002330  6FE5               	movwf	(_sampleCount+1)& (0+255),b
 18345  002332  0E00               	movlw	0
 18346  002334  6FE4               	movwf	_sampleCount& (0+255),b
 18347  002336  0012               	return	
 18348  002338                     __end_of_FlashSampleWrite:
 18349                           	opt stack 0
 18350                           tosu	equ	0xFFF
 18351                           tosh	equ	0xFFE
 18352                           tosl	equ	0xFFD
 18353                           pclath	equ	0xFFA
 18354                           tblptru	equ	0xFF8
 18355                           tblptrh	equ	0xFF7
 18356                           tblptrl	equ	0xFF6
 18357                           tablat	equ	0xFF5
 18358                           prodh	equ	0xFF4
 18359                           prodl	equ	0xFF3
 18360                           intcon	equ	0xFF2
 18361                           intcon2	equ	0xFF1
 18362                           postinc0	equ	0xFEE
 18363                           plusw0	equ	0xFEB
 18364                           wreg	equ	0xFE8
 18365                           indf1	equ	0xFE7
 18366                           postdec1	equ	0xFE5
 18367                           fsr1h	equ	0xFE2
 18368                           fsr1l	equ	0xFE1
 18369                           indf2	equ	0xFDF
 18370                           postinc2	equ	0xFDE
 18371                           postdec2	equ	0xFDD
 18372                           plusw2	equ	0xFDB
 18373                           fsr2h	equ	0xFDA
 18374                           fsr2l	equ	0xFD9
 18375                           status	equ	0xFD8
 18376                           
 18377 ;; *************** function _FLASH_WriteBlock *****************
 18378 ;; Defined at:
 18379 ;;		line 93 in file "mcc_generated_files/memory.c"
 18380 ;; Parameters:    Size  Location     Type
 18381 ;;  writeAddr       4   28[COMRAM] unsigned long 
 18382 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 18383 ;;		 -> sampleArray(64), 
 18384 ;; Auto vars:     Size  Location     Type
 18385 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 18386 ;;  i               1   43[COMRAM] unsigned char 
 18387 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 18388 ;; Return value:  Size  Location     Type
 18389 ;;                  1    wreg      char 
 18390 ;; Registers used:
 18391 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18392 ;; Tracked objects:
 18393 ;;		On entry : 0/0
 18394 ;;		On exit  : 0/0
 18395 ;;		Unchanged: 0/0
 18396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18397 ;;      Params:         6       0       0       0       0       0       0
 18398 ;;      Locals:         6       0       0       0       0       0       0
 18399 ;;      Temps:          4       0       0       0       0       0       0
 18400 ;;      Totals:        16       0       0       0       0       0       0
 18401 ;;Total ram usage:       16 bytes
 18402 ;; Hardware stack levels used:    1
 18403 ;; Hardware stack levels required when called:    5
 18404 ;; This function calls:
 18405 ;;		_FLASH_EraseBlock
 18406 ;; This function is called by:
 18407 ;;		_FlashSampleWrite
 18408 ;;		_FLASH_WriteByte
 18409 ;; This function uses a non-reentrant model
 18410 ;;
 18411                           
 18412                           	psect	text106
 18413  002C38                     __ptext106:
 18414                           	opt stack 0
 18415  002C38                     _FLASH_WriteBlock:
 18416                           	opt stack 23
 18417                           
 18418                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 18419                           
 18420                           ;incstack = 0
 18421  002C38  0EC0               	movlw	192
 18422  002C3A  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 18423  002C3C  0E7F               	movlw	127
 18424  002C3E  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 18425  002C40  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 18426  002C44  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 18427  002C48  5023               	movf	??_FLASH_WriteBlock,w,c
 18428  002C4A  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 18429  002C4C  5024               	movf	??_FLASH_WriteBlock+1,w,c
 18430  002C4E  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 18431  002C50  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 18432  002C54  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 18433  002C58  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 18434  002C5A  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 18435                           
 18436                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 18437  002C5C  0E00               	movlw	0
 18438  002C5E  BEF2               	btfsc	intcon,7,c	;volatile
 18439  002C60  0E01               	movlw	1
 18440  002C62  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 18441                           
 18442                           ;memory.c: 97: uint8_t i;
 18443                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 18444  002C64  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 18445  002C66  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 18446  002C68  E144               	bnz	l1016
 18447  002C6A  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 18448  002C6C  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 18449  002C6E  E141               	bnz	l1016
 18450  002C70  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 18451  002C72  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 18452  002C74  E13E               	bnz	l1016
 18453  002C76  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 18454  002C78  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 18455  002C7A  A4D8               	btfss	status,2,c
 18456  002C7C  0012               	return	
 18457                           
 18458                           ;memory.c: 103: }
 18459                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 18460                           
 18461                           ;memory.c: 101: {
 18462                           ;memory.c: 102: return -1;
 18463                           ;	Return value of _FLASH_WriteBlock is never used
 18464  002C7E  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 18465  002C82  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 18466  002C86  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 18467  002C8A  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 18468  002C8E  EC07  F01F         	call	_FLASH_EraseBlock	;wreg free
 18469                           
 18470                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 18471  002C92  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 18472                           
 18473                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 18474  002C96  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 18475                           
 18476                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 18477  002C9A  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 18478                           
 18479                           ;memory.c: 114: for (i=0; i<(64); i++)
 18480  002C9E  0E00               	movlw	0
 18481  002CA0  6E2C               	movwf	FLASH_WriteBlock@i,c
 18482  002CA2                     l8037:
 18483  002CA2  0E3F               	movlw	63
 18484  002CA4  642C               	cpfsgt	FLASH_WriteBlock@i,c
 18485  002CA6  D001               	goto	l1017
 18486  002CA8  D013               	goto	u8400
 18487  002CAA                     l1017:
 18488                           
 18489                           ;memory.c: 115: {
 18490                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 18491  002CAA  502C               	movf	FLASH_WriteBlock@i,w,c
 18492  002CAC  0D01               	mullw	1
 18493  002CAE  50F3               	movf	prodl,w,c
 18494  002CB0  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 18495  002CB2  6ED9               	movwf	fsr2l,c
 18496  002CB4  50F4               	movf	prodh,w,c
 18497  002CB6  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 18498  002CB8  6EDA               	movwf	fsr2h,c
 18499  002CBA  50DF               	movf	indf2,w,c
 18500  002CBC  6EF5               	movwf	tablat,c	;volatile
 18501                           
 18502                           ;memory.c: 118: if (i == ((64)-1))
 18503  002CBE  0E3F               	movlw	63
 18504  002CC0  182C               	xorwf	FLASH_WriteBlock@i,w,c
 18505  002CC2  A4D8               	btfss	status,2,c
 18506  002CC4  D002               	goto	l1019
 18507  002CC6  000C               	tblwt		*	;# 
 18508                           
 18509                           ;memory.c: 121: }
 18510  002CC8  D001               	goto	l1020
 18511  002CCA                     l1019:
 18512  002CCA  000D               	tblwt		*+	;# 
 18513  002CCC                     l1020:
 18514  002CCC  2A2C               	incf	FLASH_WriteBlock@i,f,c
 18515  002CCE  D7E9               	goto	l8037
 18516  002CD0                     u8400:
 18517                           
 18518                           ;memory.c: 125: }
 18519                           ;memory.c: 126: }
 18520                           ;memory.c: 128: PIR2bits.EEIF = 1;
 18521  002CD0  88A1               	bsf	4001,4,c	;volatile
 18522                           
 18523                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 18524  002CD2  8EA6               	bsf	4006,7,c	;volsfr
 18525                           
 18526                           ;memory.c: 130: EECON1bits.CFGS = 0;
 18527  002CD4  9CA6               	bcf	4006,6,c	;volsfr
 18528                           
 18529                           ;memory.c: 131: EECON1bits.WREN = 1;
 18530  002CD6  84A6               	bsf	4006,2,c	;volsfr
 18531                           
 18532                           ;memory.c: 132: INTCONbits.GIE = 0;
 18533  002CD8  9EF2               	bcf	intcon,7,c	;volatile
 18534                           
 18535                           ;memory.c: 133: EECON2 = 0x55;
 18536  002CDA  0E55               	movlw	85
 18537  002CDC  6EA7               	movwf	4007,c	;volsfr
 18538                           
 18539                           ;memory.c: 134: EECON2 = 0xAA;
 18540  002CDE  0EAA               	movlw	170
 18541  002CE0  6EA7               	movwf	4007,c	;volsfr
 18542                           
 18543                           ;memory.c: 135: EECON1bits.WR = 1;
 18544  002CE2  82A6               	bsf	4006,1,c	;volsfr
 18545                           
 18546                           ;memory.c: 137: EECON1bits.WREN = 0;
 18547  002CE4  94A6               	bcf	4006,2,c	;volsfr
 18548                           
 18549                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 18550  002CE6  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 18551  002CE8  D002               	bra	u8415
 18552  002CEA  9EF2               	bcf	intcon,7,c	;volatile
 18553  002CEC  D001               	bra	u8416
 18554  002CEE                     u8415:
 18555  002CEE  8EF2               	bsf	intcon,7,c	;volatile
 18556  002CF0                     u8416:
 18557  002CF0  0012               	return	
 18558  002CF2                     l1016:
 18559  002CF2  0012               	return		;funcret
 18560  002CF4                     __end_of_FLASH_WriteBlock:
 18561                           	opt stack 0
 18562                           tosu	equ	0xFFF
 18563                           tosh	equ	0xFFE
 18564                           tosl	equ	0xFFD
 18565                           pclath	equ	0xFFA
 18566                           tblptru	equ	0xFF8
 18567                           tblptrh	equ	0xFF7
 18568                           tblptrl	equ	0xFF6
 18569                           tablat	equ	0xFF5
 18570                           prodh	equ	0xFF4
 18571                           prodl	equ	0xFF3
 18572                           intcon	equ	0xFF2
 18573                           intcon2	equ	0xFF1
 18574                           postinc0	equ	0xFEE
 18575                           plusw0	equ	0xFEB
 18576                           wreg	equ	0xFE8
 18577                           indf1	equ	0xFE7
 18578                           postdec1	equ	0xFE5
 18579                           fsr1h	equ	0xFE2
 18580                           fsr1l	equ	0xFE1
 18581                           indf2	equ	0xFDF
 18582                           postinc2	equ	0xFDE
 18583                           postdec2	equ	0xFDD
 18584                           plusw2	equ	0xFDB
 18585                           fsr2h	equ	0xFDA
 18586                           fsr2l	equ	0xFD9
 18587                           status	equ	0xFD8
 18588                           
 18589 ;; *************** function _FLASH_EraseBlock *****************
 18590 ;; Defined at:
 18591 ;;		line 144 in file "mcc_generated_files/memory.c"
 18592 ;; Parameters:    Size  Location     Type
 18593 ;;  baseAddr        4   23[COMRAM] unsigned long 
 18594 ;; Auto vars:     Size  Location     Type
 18595 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 18596 ;; Return value:  Size  Location     Type
 18597 ;;                  1    wreg      void 
 18598 ;; Registers used:
 18599 ;;		wreg, status,2
 18600 ;; Tracked objects:
 18601 ;;		On entry : 0/0
 18602 ;;		On exit  : 0/0
 18603 ;;		Unchanged: 0/0
 18604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18605 ;;      Params:         4       0       0       0       0       0       0
 18606 ;;      Locals:         1       0       0       0       0       0       0
 18607 ;;      Temps:          0       0       0       0       0       0       0
 18608 ;;      Totals:         5       0       0       0       0       0       0
 18609 ;;Total ram usage:        5 bytes
 18610 ;; Hardware stack levels used:    1
 18611 ;; Hardware stack levels required when called:    4
 18612 ;; This function calls:
 18613 ;;		Nothing
 18614 ;; This function is called by:
 18615 ;;		_FLASH_WriteBlock
 18616 ;; This function uses a non-reentrant model
 18617 ;;
 18618                           
 18619                           	psect	text107
 18620  003E0E                     __ptext107:
 18621                           	opt stack 0
 18622  003E0E                     _FLASH_EraseBlock:
 18623                           	opt stack 23
 18624                           
 18625                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 18626                           
 18627                           ;incstack = 0
 18628  003E0E  0E00               	movlw	0
 18629  003E10  BEF2               	btfsc	intcon,7,c	;volatile
 18630  003E12  0E01               	movlw	1
 18631  003E14  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 18632                           
 18633                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 18634  003E16  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 18635                           
 18636                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 18637  003E1A  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 18638                           
 18639                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 18640  003E1E  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 18641                           
 18642                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 18643  003E22  8EA6               	bsf	4006,7,c	;volsfr
 18644                           
 18645                           ;memory.c: 153: EECON1bits.CFGS = 0;
 18646  003E24  9CA6               	bcf	4006,6,c	;volsfr
 18647                           
 18648                           ;memory.c: 154: EECON1bits.WREN = 1;
 18649  003E26  84A6               	bsf	4006,2,c	;volsfr
 18650                           
 18651                           ;memory.c: 155: EECON1bits.FREE = 1;
 18652  003E28  88A6               	bsf	4006,4,c	;volsfr
 18653                           
 18654                           ;memory.c: 156: INTCONbits.GIE = 0;
 18655  003E2A  9EF2               	bcf	intcon,7,c	;volatile
 18656                           
 18657                           ;memory.c: 157: EECON2 = 0x55;
 18658  003E2C  0E55               	movlw	85
 18659  003E2E  6EA7               	movwf	4007,c	;volsfr
 18660                           
 18661                           ;memory.c: 158: EECON2 = 0xAA;
 18662  003E30  0EAA               	movlw	170
 18663  003E32  6EA7               	movwf	4007,c	;volsfr
 18664                           
 18665                           ;memory.c: 159: EECON1bits.WR = 1;
 18666  003E34  82A6               	bsf	4006,1,c	;volsfr
 18667                           
 18668                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 18669  003E36  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 18670  003E38  D002               	bra	u8275
 18671  003E3A  9EF2               	bcf	intcon,7,c	;volatile
 18672  003E3C  D001               	bra	u8276
 18673  003E3E                     u8275:
 18674  003E3E  8EF2               	bsf	intcon,7,c	;volatile
 18675  003E40                     u8276:
 18676  003E40  0012               	return		;funcret
 18677  003E42                     __end_of_FLASH_EraseBlock:
 18678                           	opt stack 0
 18679                           tosu	equ	0xFFF
 18680                           tosh	equ	0xFFE
 18681                           tosl	equ	0xFFD
 18682                           pclath	equ	0xFFA
 18683                           tblptru	equ	0xFF8
 18684                           tblptrh	equ	0xFF7
 18685                           tblptrl	equ	0xFF6
 18686                           tablat	equ	0xFF5
 18687                           prodh	equ	0xFF4
 18688                           prodl	equ	0xFF3
 18689                           intcon	equ	0xFF2
 18690                           intcon2	equ	0xFF1
 18691                           postinc0	equ	0xFEE
 18692                           plusw0	equ	0xFEB
 18693                           wreg	equ	0xFE8
 18694                           indf1	equ	0xFE7
 18695                           postdec1	equ	0xFE5
 18696                           fsr1h	equ	0xFE2
 18697                           fsr1l	equ	0xFE1
 18698                           indf2	equ	0xFDF
 18699                           postinc2	equ	0xFDE
 18700                           postdec2	equ	0xFDD
 18701                           plusw2	equ	0xFDB
 18702                           fsr2h	equ	0xFDA
 18703                           fsr2l	equ	0xFD9
 18704                           status	equ	0xFD8
 18705                           
 18706 ;; *************** function _FLASH_IsWriteDone *****************
 18707 ;; Defined at:
 18708 ;;		line 189 in file "mcc_generated_files/memory.c"
 18709 ;; Parameters:    Size  Location     Type
 18710 ;;		None
 18711 ;; Auto vars:     Size  Location     Type
 18712 ;;		None
 18713 ;; Return value:  Size  Location     Type
 18714 ;;                  1    wreg      unsigned char 
 18715 ;; Registers used:
 18716 ;;		wreg
 18717 ;; Tracked objects:
 18718 ;;		On entry : 0/0
 18719 ;;		On exit  : 0/0
 18720 ;;		Unchanged: 0/0
 18721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18722 ;;      Params:         0       0       0       0       0       0       0
 18723 ;;      Locals:         0       0       0       0       0       0       0
 18724 ;;      Temps:          0       0       0       0       0       0       0
 18725 ;;      Totals:         0       0       0       0       0       0       0
 18726 ;;Total ram usage:        0 bytes
 18727 ;; Hardware stack levels used:    1
 18728 ;; Hardware stack levels required when called:    4
 18729 ;; This function calls:
 18730 ;;		Nothing
 18731 ;; This function is called by:
 18732 ;;		_FlashSampleWrite
 18733 ;;		_FlashReadUart
 18734 ;; This function uses a non-reentrant model
 18735 ;;
 18736                           
 18737                           	psect	text108
 18738  004276                     __ptext108:
 18739                           	opt stack 0
 18740  004276                     _FLASH_IsWriteDone:
 18741                           	opt stack 23
 18742                           
 18743                           ;memory.c: 191: return (EECON1bits.WR == 0);
 18744                           
 18745                           ;incstack = 0
 18746  004276  A2A6               	btfss	4006,1,c	;volsfr
 18747  004278  D001               	goto	u8061
 18748  00427A  D002               	goto	u8060
 18749  00427C                     u8061:
 18750  00427C  0E01               	movlw	1
 18751  00427E  0012               	return	
 18752  004280                     u8060:
 18753  004280  0E00               	movlw	0
 18754  004282  0012               	return	
 18755  004284                     __end_of_FLASH_IsWriteDone:
 18756                           	opt stack 0
 18757                           tosu	equ	0xFFF
 18758                           tosh	equ	0xFFE
 18759                           tosl	equ	0xFFD
 18760                           pclath	equ	0xFFA
 18761                           tblptru	equ	0xFF8
 18762                           tblptrh	equ	0xFF7
 18763                           tblptrl	equ	0xFF6
 18764                           tablat	equ	0xFF5
 18765                           prodh	equ	0xFF4
 18766                           prodl	equ	0xFF3
 18767                           intcon	equ	0xFF2
 18768                           intcon2	equ	0xFF1
 18769                           postinc0	equ	0xFEE
 18770                           plusw0	equ	0xFEB
 18771                           wreg	equ	0xFE8
 18772                           indf1	equ	0xFE7
 18773                           postdec1	equ	0xFE5
 18774                           fsr1h	equ	0xFE2
 18775                           fsr1l	equ	0xFE1
 18776                           indf2	equ	0xFDF
 18777                           postinc2	equ	0xFDE
 18778                           postdec2	equ	0xFDD
 18779                           plusw2	equ	0xFDB
 18780                           fsr2h	equ	0xFDA
 18781                           fsr2l	equ	0xFD9
 18782                           status	equ	0xFD8
 18783                           
 18784 ;; *************** function _ADC_GetConversion *****************
 18785 ;; Defined at:
 18786 ;;		line 106 in file "mcc_generated_files/adc.c"
 18787 ;; Parameters:    Size  Location     Type
 18788 ;;  channel         1    wreg     enum E6975
 18789 ;; Auto vars:     Size  Location     Type
 18790 ;;  channel         1   27[COMRAM] enum E6975
 18791 ;; Return value:  Size  Location     Type
 18792 ;;                  2   23[COMRAM] unsigned int 
 18793 ;; Registers used:
 18794 ;;		wreg, status,2, status,0
 18795 ;; Tracked objects:
 18796 ;;		On entry : 0/0
 18797 ;;		On exit  : 0/0
 18798 ;;		Unchanged: 0/0
 18799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18800 ;;      Params:         2       0       0       0       0       0       0
 18801 ;;      Locals:         1       0       0       0       0       0       0
 18802 ;;      Temps:          2       0       0       0       0       0       0
 18803 ;;      Totals:         5       0       0       0       0       0       0
 18804 ;;Total ram usage:        5 bytes
 18805 ;; Hardware stack levels used:    1
 18806 ;; Hardware stack levels required when called:    4
 18807 ;; This function calls:
 18808 ;;		Nothing
 18809 ;; This function is called by:
 18810 ;;		_AdcConvert
 18811 ;; This function uses a non-reentrant model
 18812 ;;
 18813                           
 18814                           	psect	text109
 18815  003EA2                     __ptext109:
 18816                           	opt stack 0
 18817  003EA2                     _ADC_GetConversion:
 18818                           	opt stack 25
 18819                           
 18820                           ;incstack = 0
 18821                           ;ADC_GetConversion@channel stored from wreg
 18822  003EA2  6E1C               	movwf	ADC_GetConversion@channel,c
 18823                           
 18824                           ;adc.c: 109: ADCON0bits.CHS = channel;
 18825  003EA4  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 18826  003EA8  461A               	rlncf	??_ADC_GetConversion,f,c
 18827  003EAA  461A               	rlncf	??_ADC_GetConversion,f,c
 18828  003EAC  50C2               	movf	4034,w,c	;volatile
 18829  003EAE  181A               	xorwf	??_ADC_GetConversion,w,c
 18830  003EB0  0B83               	andlw	-125
 18831  003EB2  181A               	xorwf	??_ADC_GetConversion,w,c
 18832  003EB4  6EC2               	movwf	4034,c	;volatile
 18833                           
 18834                           ;adc.c: 112: ADCON0bits.ADON = 1;
 18835  003EB6  80C2               	bsf	4034,0,c	;volatile
 18836                           
 18837                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 18838  003EB8  82C2               	bsf	4034,1,c	;volatile
 18839  003EBA                     
 18840                           ;adc.c: 119: {
 18841  003EBA  B2C2               	btfsc	4034,1,c	;volatile
 18842  003EBC  D7FE               	goto	l1133
 18843                           
 18844                           ;adc.c: 120: }
 18845                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 18846  003EBE  50C4               	movf	4036,w,c	;volatile
 18847  003EC0  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 18848  003EC2  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 18849  003EC4  50C3               	movf	4035,w,c	;volatile
 18850  003EC6  241A               	addwf	??_ADC_GetConversion,w,c
 18851  003EC8  6E18               	movwf	?_ADC_GetConversion,c
 18852  003ECA  0E00               	movlw	0
 18853  003ECC  201B               	addwfc	??_ADC_GetConversion+1,w,c
 18854  003ECE  6E19               	movwf	?_ADC_GetConversion+1,c
 18855  003ED0  0012               	return	
 18856  003ED2                     __end_of_ADC_GetConversion:
 18857                           	opt stack 0
 18858                           tosu	equ	0xFFF
 18859                           tosh	equ	0xFFE
 18860                           tosl	equ	0xFFD
 18861                           pclath	equ	0xFFA
 18862                           tblptru	equ	0xFF8
 18863                           tblptrh	equ	0xFF7
 18864                           tblptrl	equ	0xFF6
 18865                           tablat	equ	0xFF5
 18866                           prodh	equ	0xFF4
 18867                           prodl	equ	0xFF3
 18868                           intcon	equ	0xFF2
 18869                           intcon2	equ	0xFF1
 18870                           postinc0	equ	0xFEE
 18871                           plusw0	equ	0xFEB
 18872                           wreg	equ	0xFE8
 18873                           indf1	equ	0xFE7
 18874                           postdec1	equ	0xFE5
 18875                           fsr1h	equ	0xFE2
 18876                           fsr1l	equ	0xFE1
 18877                           indf2	equ	0xFDF
 18878                           postinc2	equ	0xFDE
 18879                           postdec2	equ	0xFDD
 18880                           plusw2	equ	0xFDB
 18881                           fsr2h	equ	0xFDA
 18882                           fsr2l	equ	0xFD9
 18883                           status	equ	0xFD8
 18884                           
 18885 ;; *************** function _INTERRUPT_InterruptManager *****************
 18886 ;; Defined at:
 18887 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 18888 ;; Parameters:    Size  Location     Type
 18889 ;;		None
 18890 ;; Auto vars:     Size  Location     Type
 18891 ;;		None
 18892 ;; Return value:  Size  Location     Type
 18893 ;;                  1    wreg      void 
 18894 ;; Registers used:
 18895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 18896 ;; Tracked objects:
 18897 ;;		On entry : 0/0
 18898 ;;		On exit  : 0/0
 18899 ;;		Unchanged: 0/0
 18900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18901 ;;      Params:         0       0       0       0       0       0       0
 18902 ;;      Locals:         0       0       0       0       0       0       0
 18903 ;;      Temps:         18       0       0       0       0       0       0
 18904 ;;      Totals:        18       0       0       0       0       0       0
 18905 ;;Total ram usage:       18 bytes
 18906 ;; Hardware stack levels used:    1
 18907 ;; Hardware stack levels required when called:    3
 18908 ;; This function calls:
 18909 ;;		_EUSART1_Receive_ISR
 18910 ;;		_EUSART1_Transmit_ISR
 18911 ;;		_MEMORY_ISR
 18912 ;;		_PIN_MANAGER_IOC
 18913 ;;		_TMR0_ISR
 18914 ;; This function is called by:
 18915 ;;		Interrupt level 2
 18916 ;; This function uses a non-reentrant model
 18917 ;;
 18918                           
 18919                           	psect	intcode
 18920  000008                     __pintcode:
 18921                           	opt stack 0
 18922  000008                     _INTERRUPT_InterruptManager:
 18923                           	opt stack 17
 18924                           
 18925                           ;incstack = 0
 18926  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 18927  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 18928  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 18929  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 18930  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 18931  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 18932  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 18933  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 18934  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 18935  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 18936  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 18937  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 18938  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 18939  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 18940  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 18941  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 18942  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 18943  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 18944  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 18945                           
 18946                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 18947  000052  B6F2               	btfsc	intcon,3,c	;volatile
 18948  000054  A0F2               	btfss	intcon,0,c	;volatile
 18949  000056  D003               	goto	i2l814
 18950                           
 18951                           ;interrupt_manager.c: 61: {
 18952                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 18953  000058  EC17  F021         	call	_PIN_MANAGER_IOC	;wreg free
 18954                           
 18955                           ;interrupt_manager.c: 63: }
 18956  00005C  D019               	goto	i2l823
 18957  00005E                     i2l814:
 18958                           
 18959                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 18960  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 18961  000060  A4F2               	btfss	intcon,2,c	;volatile
 18962  000062  D003               	goto	i2l816
 18963                           
 18964                           ;interrupt_manager.c: 65: {
 18965                           ;interrupt_manager.c: 66: TMR0_ISR();
 18966  000064  EC85  F017         	call	_TMR0_ISR	;wreg free
 18967                           
 18968                           ;interrupt_manager.c: 67: }
 18969  000068  D013               	goto	i2l823
 18970  00006A                     i2l816:
 18971                           
 18972                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 18973  00006A  ACF2               	btfss	intcon,6,c	;volatile
 18974  00006C  D011               	goto	i2l823
 18975                           
 18976                           ;interrupt_manager.c: 69: {
 18977                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 18978  00006E  B8A0               	btfsc	4000,4,c	;volatile
 18979  000070  A8A1               	btfss	4001,4,c	;volatile
 18980  000072  D003               	goto	i2l819
 18981                           
 18982                           ;interrupt_manager.c: 71: {
 18983                           ;interrupt_manager.c: 72: MEMORY_ISR();
 18984  000074  EC7A  F021         	call	_MEMORY_ISR	;wreg free
 18985                           
 18986                           ;interrupt_manager.c: 73: }
 18987  000078  D00B               	goto	i2l823
 18988  00007A                     i2l819:
 18989                           
 18990                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 18991  00007A  B89D               	btfsc	3997,4,c	;volatile
 18992  00007C  A89E               	btfss	3998,4,c	;volatile
 18993  00007E  D003               	goto	i2l821
 18994                           
 18995                           ;interrupt_manager.c: 75: {
 18996                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 18997  000080  EC66  F01E         	call	_EUSART1_Transmit_ISR	;wreg free
 18998                           
 18999                           ;interrupt_manager.c: 77: }
 19000  000084  D005               	goto	i2l823
 19001  000086                     i2l821:
 19002                           
 19003                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 19004  000086  BA9D               	btfsc	3997,5,c	;volatile
 19005  000088  AA9E               	btfss	3998,5,c	;volatile
 19006  00008A  D002               	goto	i2l823
 19007                           
 19008                           ;interrupt_manager.c: 79: {
 19009                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 19010  00008C  EC80  F01F         	call	_EUSART1_Receive_ISR	;wreg free
 19011  000090                     i2l823:
 19012                           
 19013                           ;interrupt_manager.c: 87: else
 19014                           ;interrupt_manager.c: 88: {
 19015                           
 19016                           ;interrupt_manager.c: 85: }
 19017                           ;interrupt_manager.c: 86: }
 19018                           
 19019                           ;interrupt_manager.c: 82: else
 19020                           ;interrupt_manager.c: 83: {
 19021  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 19022  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 19023  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 19024  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 19025  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 19026  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 19027  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 19028  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 19029  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 19030  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 19031  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 19032  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 19033  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 19034  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 19035  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 19036  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 19037  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 19038  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 19039  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19040  0000DA  0011               	retfie		f
 19041  0000DC                     __end_of_INTERRUPT_InterruptManager:
 19042                           	opt stack 0
 19043                           tosu	equ	0xFFF
 19044                           tosh	equ	0xFFE
 19045                           tosl	equ	0xFFD
 19046                           pclatu	equ	0xFFB
 19047                           pclath	equ	0xFFA
 19048                           tblptru	equ	0xFF8
 19049                           tblptrh	equ	0xFF7
 19050                           tblptrl	equ	0xFF6
 19051                           tablat	equ	0xFF5
 19052                           prodh	equ	0xFF4
 19053                           prodl	equ	0xFF3
 19054                           intcon	equ	0xFF2
 19055                           intcon2	equ	0xFF1
 19056                           postinc0	equ	0xFEE
 19057                           plusw0	equ	0xFEB
 19058                           fsr0h	equ	0xFEA
 19059                           fsr0l	equ	0xFE9
 19060                           wreg	equ	0xFE8
 19061                           indf1	equ	0xFE7
 19062                           postdec1	equ	0xFE5
 19063                           fsr1h	equ	0xFE2
 19064                           fsr1l	equ	0xFE1
 19065                           indf2	equ	0xFDF
 19066                           postinc2	equ	0xFDE
 19067                           postdec2	equ	0xFDD
 19068                           plusw2	equ	0xFDB
 19069                           fsr2h	equ	0xFDA
 19070                           fsr2l	equ	0xFD9
 19071                           status	equ	0xFD8
 19072                           
 19073 ;; *************** function _TMR0_ISR *****************
 19074 ;; Defined at:
 19075 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 19076 ;; Parameters:    Size  Location     Type
 19077 ;;		None
 19078 ;; Auto vars:     Size  Location     Type
 19079 ;;		None
 19080 ;; Return value:  Size  Location     Type
 19081 ;;                  1    wreg      void 
 19082 ;; Registers used:
 19083 ;;		wreg, status,2, status,0, cstack
 19084 ;; Tracked objects:
 19085 ;;		On entry : 0/0
 19086 ;;		On exit  : 0/0
 19087 ;;		Unchanged: 0/0
 19088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19089 ;;      Params:         0       0       0       0       0       0       0
 19090 ;;      Locals:         0       0       0       0       0       0       0
 19091 ;;      Temps:          0       0       0       0       0       0       0
 19092 ;;      Totals:         0       0       0       0       0       0       0
 19093 ;;Total ram usage:        0 bytes
 19094 ;; Hardware stack levels used:    1
 19095 ;; Hardware stack levels required when called:    1
 19096 ;; This function calls:
 19097 ;;		___lwmod
 19098 ;; This function is called by:
 19099 ;;		_INTERRUPT_InterruptManager
 19100 ;; This function uses a non-reentrant model
 19101 ;;
 19102                           
 19103                           	psect	text111
 19104  002F0A                     __ptext111:
 19105                           	opt stack 0
 19106  002F0A                     _TMR0_ISR:
 19107                           	opt stack 18
 19108                           
 19109                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 19110                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 19111                           
 19112                           ;incstack = 0
 19113  002F0A  94F2               	bcf	intcon,2,c	;volatile
 19114                           
 19115                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 19116  002F0C  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 19117  002F0E  6ED7               	movwf	4055,c	;volatile
 19118                           
 19119                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 19120  002F10  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 19121                           
 19122                           ;tmr0.c: 144: CountCallBack++;
 19123  002F14  4A35               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 19124  002F16  2A36               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 19125                           
 19126                           ;tmr0.c: 145: if ((CountCallBack % 100) == 0)
 19127  002F18  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19128  002F1C  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19129  002F20  0E00               	movlw	0
 19130  002F22  6E04               	movwf	___lwmod@divisor+1,c
 19131  002F24  0E64               	movlw	100
 19132  002F26  6E03               	movwf	___lwmod@divisor,c
 19133  002F28  EC97  F01D         	call	___lwmod	;wreg free
 19134  002F2C  5001               	movf	?___lwmod,w,c
 19135  002F2E  1002               	iorwf	?___lwmod+1,w,c
 19136  002F30  A4D8               	btfss	status,2,c
 19137  002F32  D003               	goto	i2l1087
 19138                           
 19139                           ;tmr0.c: 146: {
 19140                           ;tmr0.c: 147: Timer0_SynthLd = 1;
 19141  002F34  0E01               	movlw	1
 19142  002F36  0100               	movlb	0	; () banked
 19143  002F38  6FF9               	movwf	_Timer0_SynthLd& (0+255),b	;volatile
 19144  002F3A                     i2l1087:
 19145                           
 19146                           ;tmr0.c: 148: }
 19147                           ;tmr0.c: 149: if ((CountCallBack % 100) == 0)
 19148                           
 19149                           ; BSR set to: 0
 19150  002F3A  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19151  002F3E  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19152  002F42  0E00               	movlw	0
 19153  002F44  6E04               	movwf	___lwmod@divisor+1,c
 19154  002F46  0E64               	movlw	100
 19155  002F48  6E03               	movwf	___lwmod@divisor,c
 19156  002F4A  EC97  F01D         	call	___lwmod	;wreg free
 19157  002F4E  5001               	movf	?___lwmod,w,c
 19158  002F50  1002               	iorwf	?___lwmod+1,w,c
 19159  002F52  A4D8               	btfss	status,2,c
 19160  002F54  D003               	goto	i2l1088
 19161                           
 19162                           ;tmr0.c: 150: {
 19163                           ;tmr0.c: 151: Timer0_Sampling = 1;
 19164  002F56  0E01               	movlw	1
 19165  002F58  0100               	movlb	0	; () banked
 19166  002F5A  6FF8               	movwf	_Timer0_Sampling& (0+255),b	;volatile
 19167  002F5C                     i2l1088:
 19168                           
 19169                           ;tmr0.c: 152: }
 19170                           ;tmr0.c: 153: if ((CountCallBack % 200) == 0)
 19171                           
 19172                           ; BSR set to: 0
 19173  002F5C  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19174  002F60  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19175  002F64  0E00               	movlw	0
 19176  002F66  6E04               	movwf	___lwmod@divisor+1,c
 19177  002F68  0EC8               	movlw	200
 19178  002F6A  6E03               	movwf	___lwmod@divisor,c
 19179  002F6C  EC97  F01D         	call	___lwmod	;wreg free
 19180  002F70  5001               	movf	?___lwmod,w,c
 19181  002F72  1002               	iorwf	?___lwmod+1,w,c
 19182  002F74  A4D8               	btfss	status,2,c
 19183  002F76  D003               	goto	i2l1089
 19184                           
 19185                           ;tmr0.c: 154: {
 19186                           ;tmr0.c: 155: Timer0_KeepAlive = 1;
 19187  002F78  0E01               	movlw	1
 19188  002F7A  0100               	movlb	0	; () banked
 19189  002F7C  6FF7               	movwf	_Timer0_KeepAlive& (0+255),b	;volatile
 19190  002F7E                     i2l1089:
 19191                           
 19192                           ;tmr0.c: 156: }
 19193                           ;tmr0.c: 157: if ((CountCallBack % 10) == 0)
 19194                           
 19195                           ; BSR set to: 0
 19196  002F7E  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19197  002F82  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19198  002F86  0E00               	movlw	0
 19199  002F88  6E04               	movwf	___lwmod@divisor+1,c
 19200  002F8A  0E0A               	movlw	10
 19201  002F8C  6E03               	movwf	___lwmod@divisor,c
 19202  002F8E  EC97  F01D         	call	___lwmod	;wreg free
 19203  002F92  5001               	movf	?___lwmod,w,c
 19204  002F94  1002               	iorwf	?___lwmod+1,w,c
 19205  002F96  A4D8               	btfss	status,2,c
 19206  002F98  D003               	goto	i2l1090
 19207                           
 19208                           ;tmr0.c: 158: {
 19209                           ;tmr0.c: 159: Timer0_OneSec = 1;
 19210  002F9A  0E01               	movlw	1
 19211  002F9C  0100               	movlb	0	; () banked
 19212  002F9E  6FF6               	movwf	_Timer0_OneSec& (0+255),b	;volatile
 19213  002FA0                     i2l1090:
 19214                           
 19215                           ;tmr0.c: 160: }
 19216                           ;tmr0.c: 161: if(CountCallBack >= 35000)
 19217                           
 19218                           ; BSR set to: 0
 19219  002FA0  0EB8               	movlw	184
 19220  002FA2  5C35               	subwf	TMR0_ISR@CountCallBack,w,c	;volatile
 19221  002FA4  0E88               	movlw	136
 19222  002FA6  5836               	subwfb	TMR0_ISR@CountCallBack+1,w,c	;volatile
 19223  002FA8  A0D8               	btfss	status,0,c
 19224  002FAA  0012               	return	
 19225                           
 19226                           ;tmr0.c: 163: {
 19227                           ;tmr0.c: 165: CountCallBack = 0;
 19228  002FAC  0E00               	movlw	0
 19229  002FAE  6E36               	movwf	TMR0_ISR@CountCallBack+1,c	;volatile
 19230  002FB0  0E00               	movlw	0
 19231  002FB2  6E35               	movwf	TMR0_ISR@CountCallBack,c	;volatile
 19232  002FB4  0012               	return	
 19233  002FB6                     __end_of_TMR0_ISR:
 19234                           	opt stack 0
 19235                           tosu	equ	0xFFF
 19236                           tosh	equ	0xFFE
 19237                           tosl	equ	0xFFD
 19238                           pclatu	equ	0xFFB
 19239                           pclath	equ	0xFFA
 19240                           tblptru	equ	0xFF8
 19241                           tblptrh	equ	0xFF7
 19242                           tblptrl	equ	0xFF6
 19243                           tablat	equ	0xFF5
 19244                           prodh	equ	0xFF4
 19245                           prodl	equ	0xFF3
 19246                           intcon	equ	0xFF2
 19247                           intcon2	equ	0xFF1
 19248                           postinc0	equ	0xFEE
 19249                           plusw0	equ	0xFEB
 19250                           fsr0h	equ	0xFEA
 19251                           fsr0l	equ	0xFE9
 19252                           wreg	equ	0xFE8
 19253                           indf1	equ	0xFE7
 19254                           postdec1	equ	0xFE5
 19255                           fsr1h	equ	0xFE2
 19256                           fsr1l	equ	0xFE1
 19257                           indf2	equ	0xFDF
 19258                           postinc2	equ	0xFDE
 19259                           postdec2	equ	0xFDD
 19260                           plusw2	equ	0xFDB
 19261                           fsr2h	equ	0xFDA
 19262                           fsr2l	equ	0xFD9
 19263                           status	equ	0xFD8
 19264                           
 19265 ;; *************** function ___lwmod *****************
 19266 ;; Defined at:
 19267 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 19268 ;; Parameters:    Size  Location     Type
 19269 ;;  dividend        2    0[COMRAM] unsigned int 
 19270 ;;  divisor         2    2[COMRAM] unsigned int 
 19271 ;; Auto vars:     Size  Location     Type
 19272 ;;  counter         1    4[COMRAM] unsigned char 
 19273 ;; Return value:  Size  Location     Type
 19274 ;;                  2    0[COMRAM] unsigned int 
 19275 ;; Registers used:
 19276 ;;		wreg, status,2, status,0
 19277 ;; Tracked objects:
 19278 ;;		On entry : 0/0
 19279 ;;		On exit  : 0/0
 19280 ;;		Unchanged: 0/0
 19281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19282 ;;      Params:         4       0       0       0       0       0       0
 19283 ;;      Locals:         1       0       0       0       0       0       0
 19284 ;;      Temps:          0       0       0       0       0       0       0
 19285 ;;      Totals:         5       0       0       0       0       0       0
 19286 ;;Total ram usage:        5 bytes
 19287 ;; Hardware stack levels used:    1
 19288 ;; This function calls:
 19289 ;;		Nothing
 19290 ;; This function is called by:
 19291 ;;		_TMR0_ISR
 19292 ;; This function uses a non-reentrant model
 19293 ;;
 19294                           
 19295                           	psect	text112
 19296  003B2E                     __ptext112:
 19297                           	opt stack 0
 19298  003B2E                     ___lwmod:
 19299                           	opt stack 18
 19300                           
 19301                           ;incstack = 0
 19302  003B2E  5003               	movf	___lwmod@divisor,w,c
 19303  003B30  1004               	iorwf	___lwmod@divisor+1,w,c
 19304  003B32  B4D8               	btfsc	status,2,c
 19305  003B34  D018               	goto	i2l1963
 19306  003B36  0E01               	movlw	1
 19307  003B38  6E05               	movwf	___lwmod@counter,c
 19308  003B3A  D004               	goto	i2l1958
 19309  003B3C  90D8               	bcf	status,0,c
 19310  003B3E  3603               	rlcf	___lwmod@divisor,f,c
 19311  003B40  3604               	rlcf	___lwmod@divisor+1,f,c
 19312  003B42  2A05               	incf	___lwmod@counter,f,c
 19313  003B44                     i2l1958:
 19314  003B44  AE04               	btfss	___lwmod@divisor+1,7,c
 19315  003B46  D7FA               	goto	i2l1959
 19316  003B48                     i2u589_40:
 19317  003B48  5003               	movf	___lwmod@divisor,w,c
 19318  003B4A  5C01               	subwf	___lwmod@dividend,w,c
 19319  003B4C  5004               	movf	___lwmod@divisor+1,w,c
 19320  003B4E  5802               	subwfb	___lwmod@dividend+1,w,c
 19321  003B50  A0D8               	btfss	status,0,c
 19322  003B52  D004               	goto	i2l1962
 19323  003B54  5003               	movf	___lwmod@divisor,w,c
 19324  003B56  5E01               	subwf	___lwmod@dividend,f,c
 19325  003B58  5004               	movf	___lwmod@divisor+1,w,c
 19326  003B5A  5A02               	subwfb	___lwmod@dividend+1,f,c
 19327  003B5C                     i2l1962:
 19328  003B5C  90D8               	bcf	status,0,c
 19329  003B5E  3204               	rrcf	___lwmod@divisor+1,f,c
 19330  003B60  3203               	rrcf	___lwmod@divisor,f,c
 19331  003B62  2E05               	decfsz	___lwmod@counter,f,c
 19332  003B64  D7F1               	goto	i2u589_40
 19333  003B66                     i2l1963:
 19334  003B66  C001  F001         	movff	___lwmod@dividend,?___lwmod
 19335  003B6A  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 19336  003B6E  0012               	return		;funcret
 19337  003B70                     __end_of___lwmod:
 19338                           	opt stack 0
 19339                           tosu	equ	0xFFF
 19340                           tosh	equ	0xFFE
 19341                           tosl	equ	0xFFD
 19342                           pclatu	equ	0xFFB
 19343                           pclath	equ	0xFFA
 19344                           tblptru	equ	0xFF8
 19345                           tblptrh	equ	0xFF7
 19346                           tblptrl	equ	0xFF6
 19347                           tablat	equ	0xFF5
 19348                           prodh	equ	0xFF4
 19349                           prodl	equ	0xFF3
 19350                           intcon	equ	0xFF2
 19351                           intcon2	equ	0xFF1
 19352                           postinc0	equ	0xFEE
 19353                           plusw0	equ	0xFEB
 19354                           fsr0h	equ	0xFEA
 19355                           fsr0l	equ	0xFE9
 19356                           wreg	equ	0xFE8
 19357                           indf1	equ	0xFE7
 19358                           postdec1	equ	0xFE5
 19359                           fsr1h	equ	0xFE2
 19360                           fsr1l	equ	0xFE1
 19361                           indf2	equ	0xFDF
 19362                           postinc2	equ	0xFDE
 19363                           postdec2	equ	0xFDD
 19364                           plusw2	equ	0xFDB
 19365                           fsr2h	equ	0xFDA
 19366                           fsr2l	equ	0xFD9
 19367                           status	equ	0xFD8
 19368                           
 19369 ;; *************** function _PIN_MANAGER_IOC *****************
 19370 ;; Defined at:
 19371 ;;		line 108 in file "mcc_generated_files/pin_manager.c"
 19372 ;; Parameters:    Size  Location     Type
 19373 ;;		None
 19374 ;; Auto vars:     Size  Location     Type
 19375 ;;		None
 19376 ;; Return value:  Size  Location     Type
 19377 ;;                  1    wreg      void 
 19378 ;; Registers used:
 19379 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19380 ;; Tracked objects:
 19381 ;;		On entry : 0/0
 19382 ;;		On exit  : 0/0
 19383 ;;		Unchanged: 0/0
 19384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19385 ;;      Params:         0       0       0       0       0       0       0
 19386 ;;      Locals:         0       0       0       0       0       0       0
 19387 ;;      Temps:          0       0       0       0       0       0       0
 19388 ;;      Totals:         0       0       0       0       0       0       0
 19389 ;;Total ram usage:        0 bytes
 19390 ;; Hardware stack levels used:    1
 19391 ;; Hardware stack levels required when called:    2
 19392 ;; This function calls:
 19393 ;;		_IOCB4_ISR
 19394 ;;		_IOCB5_ISR
 19395 ;; This function is called by:
 19396 ;;		_INTERRUPT_InterruptManager
 19397 ;; This function uses a non-reentrant model
 19398 ;;
 19399                           
 19400                           	psect	text113
 19401  00422E                     __ptext113:
 19402                           	opt stack 0
 19403  00422E                     _PIN_MANAGER_IOC:
 19404                           	opt stack 17
 19405                           
 19406                           ;pin_manager.c: 111: if(IOCBbits.IOCB4 == 1)
 19407                           
 19408                           ;incstack = 0
 19409  00422E  B862               	btfsc	3938,4,c	;volatile
 19410                           
 19411                           ;pin_manager.c: 112: {
 19412                           ;pin_manager.c: 113: IOCB4_ISR();
 19413  004230  EC56  F020         	call	_IOCB4_ISR	;wreg free
 19414                           
 19415                           ;pin_manager.c: 114: }
 19416                           ;pin_manager.c: 116: if(IOCBbits.IOCB5 == 1)
 19417  004234  BA62               	btfsc	3938,5,c	;volatile
 19418                           
 19419                           ;pin_manager.c: 117: {
 19420                           ;pin_manager.c: 118: IOCB5_ISR();
 19421  004236  EC45  F020         	call	_IOCB5_ISR	;wreg free
 19422                           
 19423                           ;pin_manager.c: 119: }
 19424                           ;pin_manager.c: 122: INTCONbits.RBIF = 0;
 19425  00423A  90F2               	bcf	intcon,0,c	;volatile
 19426  00423C  0012               	return		;funcret
 19427  00423E                     __end_of_PIN_MANAGER_IOC:
 19428                           	opt stack 0
 19429                           tosu	equ	0xFFF
 19430                           tosh	equ	0xFFE
 19431                           tosl	equ	0xFFD
 19432                           pclatu	equ	0xFFB
 19433                           pclath	equ	0xFFA
 19434                           tblptru	equ	0xFF8
 19435                           tblptrh	equ	0xFF7
 19436                           tblptrl	equ	0xFF6
 19437                           tablat	equ	0xFF5
 19438                           prodh	equ	0xFF4
 19439                           prodl	equ	0xFF3
 19440                           intcon	equ	0xFF2
 19441                           intcon2	equ	0xFF1
 19442                           postinc0	equ	0xFEE
 19443                           plusw0	equ	0xFEB
 19444                           fsr0h	equ	0xFEA
 19445                           fsr0l	equ	0xFE9
 19446                           wreg	equ	0xFE8
 19447                           indf1	equ	0xFE7
 19448                           postdec1	equ	0xFE5
 19449                           fsr1h	equ	0xFE2
 19450                           fsr1l	equ	0xFE1
 19451                           indf2	equ	0xFDF
 19452                           postinc2	equ	0xFDE
 19453                           postdec2	equ	0xFDD
 19454                           plusw2	equ	0xFDB
 19455                           fsr2h	equ	0xFDA
 19456                           fsr2l	equ	0xFD9
 19457                           status	equ	0xFD8
 19458                           
 19459 ;; *************** function _IOCB5_ISR *****************
 19460 ;; Defined at:
 19461 ;;		line 158 in file "mcc_generated_files/pin_manager.c"
 19462 ;; Parameters:    Size  Location     Type
 19463 ;;		None
 19464 ;; Auto vars:     Size  Location     Type
 19465 ;;		None
 19466 ;; Return value:  Size  Location     Type
 19467 ;;                  1    wreg      void 
 19468 ;; Registers used:
 19469 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19470 ;; Tracked objects:
 19471 ;;		On entry : 0/0
 19472 ;;		On exit  : 0/0
 19473 ;;		Unchanged: 0/0
 19474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19475 ;;      Params:         0       0       0       0       0       0       0
 19476 ;;      Locals:         0       0       0       0       0       0       0
 19477 ;;      Temps:          0       0       0       0       0       0       0
 19478 ;;      Totals:         0       0       0       0       0       0       0
 19479 ;;Total ram usage:        0 bytes
 19480 ;; Hardware stack levels used:    1
 19481 ;; Hardware stack levels required when called:    1
 19482 ;; This function calls:
 19483 ;;		Absolute function
 19484 ;;		_IOCB5_DefaultInterruptHandler
 19485 ;; This function is called by:
 19486 ;;		_PIN_MANAGER_IOC
 19487 ;; This function uses a non-reentrant model
 19488 ;;
 19489                           
 19490                           	psect	text114
 19491  00408A                     __ptext114:
 19492                           	opt stack 0
 19493  00408A                     _IOCB5_ISR:
 19494                           	opt stack 17
 19495                           
 19496                           ;pin_manager.c: 163: if(IOCB5_InterruptHandler)
 19497                           
 19498                           ;incstack = 0
 19499  00408A  0101               	movlb	1	; () banked
 19500  00408C  51E6               	movf	_IOCB5_InterruptHandler& (0+255),w,b
 19501  00408E  11E7               	iorwf	(_IOCB5_InterruptHandler+1)& (0+255),w,b
 19502  004090  B4D8               	btfsc	status,2,c
 19503  004092  0012               	return	
 19504                           
 19505                           ; BSR set to: 1
 19506                           ;pin_manager.c: 164: {
 19507                           ;pin_manager.c: 165: IOCB5_InterruptHandler();
 19508  004094  D801               	call	i2u587_48
 19509  004096  0012               	return	
 19510  004098                     i2u587_48:
 19511  004098  0005               	push	
 19512  00409A  6EFA               	movwf	pclath,c
 19513  00409C  51E6               	movf	_IOCB5_InterruptHandler& (0+255),w,b
 19514  00409E  6EFD               	movwf	tosl,c
 19515  0040A0  51E7               	movf	(_IOCB5_InterruptHandler+1)& (0+255),w,b
 19516  0040A2  6EFE               	movwf	tosh,c
 19517  0040A4  50F8               	movf	tblptru,w,c
 19518  0040A6  6EFF               	movwf	tosu,c
 19519  0040A8  50FA               	movf	pclath,w,c
 19520  0040AA  0012               	return		;indir
 19521  0040AC                     __end_of_IOCB5_ISR:
 19522                           	opt stack 0
 19523                           tosu	equ	0xFFF
 19524                           tosh	equ	0xFFE
 19525                           tosl	equ	0xFFD
 19526                           pclatu	equ	0xFFB
 19527                           pclath	equ	0xFFA
 19528                           tblptru	equ	0xFF8
 19529                           tblptrh	equ	0xFF7
 19530                           tblptrl	equ	0xFF6
 19531                           tablat	equ	0xFF5
 19532                           prodh	equ	0xFF4
 19533                           prodl	equ	0xFF3
 19534                           intcon	equ	0xFF2
 19535                           intcon2	equ	0xFF1
 19536                           postinc0	equ	0xFEE
 19537                           plusw0	equ	0xFEB
 19538                           fsr0h	equ	0xFEA
 19539                           fsr0l	equ	0xFE9
 19540                           wreg	equ	0xFE8
 19541                           indf1	equ	0xFE7
 19542                           postdec1	equ	0xFE5
 19543                           fsr1h	equ	0xFE2
 19544                           fsr1l	equ	0xFE1
 19545                           indf2	equ	0xFDF
 19546                           postinc2	equ	0xFDE
 19547                           postdec2	equ	0xFDD
 19548                           plusw2	equ	0xFDB
 19549                           fsr2h	equ	0xFDA
 19550                           fsr2l	equ	0xFD9
 19551                           status	equ	0xFD8
 19552                           
 19553 ;; *************** function _IOCB5_DefaultInterruptHandler *****************
 19554 ;; Defined at:
 19555 ;;		line 179 in file "mcc_generated_files/pin_manager.c"
 19556 ;; Parameters:    Size  Location     Type
 19557 ;;		None
 19558 ;; Auto vars:     Size  Location     Type
 19559 ;;		None
 19560 ;; Return value:  Size  Location     Type
 19561 ;;                  1    wreg      void 
 19562 ;; Registers used:
 19563 ;;		None
 19564 ;; Tracked objects:
 19565 ;;		On entry : 0/0
 19566 ;;		On exit  : 0/0
 19567 ;;		Unchanged: 0/0
 19568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19569 ;;      Params:         0       0       0       0       0       0       0
 19570 ;;      Locals:         0       0       0       0       0       0       0
 19571 ;;      Temps:          0       0       0       0       0       0       0
 19572 ;;      Totals:         0       0       0       0       0       0       0
 19573 ;;Total ram usage:        0 bytes
 19574 ;; Hardware stack levels used:    1
 19575 ;; This function calls:
 19576 ;;		Nothing
 19577 ;; This function is called by:
 19578 ;;		_PIN_MANAGER_Initialize
 19579 ;;		_IOCB5_ISR
 19580 ;; This function uses a non-reentrant model
 19581 ;;
 19582                           
 19583                           	psect	text115
 19584  0042F8                     __ptext115:
 19585                           	opt stack 0
 19586  0042F8                     _IOCB5_DefaultInterruptHandler:
 19587                           	opt stack 17
 19588                           
 19589                           ;incstack = 0
 19590  0042F8  0012               	return		;funcret
 19591  0042FA                     __end_of_IOCB5_DefaultInterruptHandler:
 19592                           	opt stack 0
 19593                           tosu	equ	0xFFF
 19594                           tosh	equ	0xFFE
 19595                           tosl	equ	0xFFD
 19596                           pclatu	equ	0xFFB
 19597                           pclath	equ	0xFFA
 19598                           tblptru	equ	0xFF8
 19599                           tblptrh	equ	0xFF7
 19600                           tblptrl	equ	0xFF6
 19601                           tablat	equ	0xFF5
 19602                           prodh	equ	0xFF4
 19603                           prodl	equ	0xFF3
 19604                           intcon	equ	0xFF2
 19605                           intcon2	equ	0xFF1
 19606                           postinc0	equ	0xFEE
 19607                           plusw0	equ	0xFEB
 19608                           fsr0h	equ	0xFEA
 19609                           fsr0l	equ	0xFE9
 19610                           wreg	equ	0xFE8
 19611                           indf1	equ	0xFE7
 19612                           postdec1	equ	0xFE5
 19613                           fsr1h	equ	0xFE2
 19614                           fsr1l	equ	0xFE1
 19615                           indf2	equ	0xFDF
 19616                           postinc2	equ	0xFDE
 19617                           postdec2	equ	0xFDD
 19618                           plusw2	equ	0xFDB
 19619                           fsr2h	equ	0xFDA
 19620                           fsr2l	equ	0xFD9
 19621                           status	equ	0xFD8
 19622                           
 19623 ;; *************** function _IOCB4_ISR *****************
 19624 ;; Defined at:
 19625 ;;		line 129 in file "mcc_generated_files/pin_manager.c"
 19626 ;; Parameters:    Size  Location     Type
 19627 ;;		None
 19628 ;; Auto vars:     Size  Location     Type
 19629 ;;		None
 19630 ;; Return value:  Size  Location     Type
 19631 ;;                  1    wreg      void 
 19632 ;; Registers used:
 19633 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19634 ;; Tracked objects:
 19635 ;;		On entry : 0/0
 19636 ;;		On exit  : 0/0
 19637 ;;		Unchanged: 0/0
 19638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19639 ;;      Params:         0       0       0       0       0       0       0
 19640 ;;      Locals:         0       0       0       0       0       0       0
 19641 ;;      Temps:          0       0       0       0       0       0       0
 19642 ;;      Totals:         0       0       0       0       0       0       0
 19643 ;;Total ram usage:        0 bytes
 19644 ;; Hardware stack levels used:    1
 19645 ;; Hardware stack levels required when called:    1
 19646 ;; This function calls:
 19647 ;;		Absolute function
 19648 ;;		_IOCB4_DefaultInterruptHandler
 19649 ;; This function is called by:
 19650 ;;		_PIN_MANAGER_IOC
 19651 ;; This function uses a non-reentrant model
 19652 ;;
 19653                           
 19654                           	psect	text116
 19655  0040AC                     __ptext116:
 19656                           	opt stack 0
 19657  0040AC                     _IOCB4_ISR:
 19658                           	opt stack 17
 19659                           
 19660                           ;pin_manager.c: 134: if(IOCB4_InterruptHandler)
 19661                           
 19662                           ;incstack = 0
 19663  0040AC  0101               	movlb	1	; () banked
 19664  0040AE  51E8               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 19665  0040B0  11E9               	iorwf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 19666  0040B2  B4D8               	btfsc	status,2,c
 19667  0040B4  0012               	return	
 19668                           
 19669                           ; BSR set to: 1
 19670                           ;pin_manager.c: 135: {
 19671                           ;pin_manager.c: 136: IOCB4_InterruptHandler();
 19672  0040B6  D801               	call	i2u585_48
 19673  0040B8  0012               	return	
 19674  0040BA                     i2u585_48:
 19675  0040BA  0005               	push	
 19676  0040BC  6EFA               	movwf	pclath,c
 19677  0040BE  51E8               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 19678  0040C0  6EFD               	movwf	tosl,c
 19679  0040C2  51E9               	movf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 19680  0040C4  6EFE               	movwf	tosh,c
 19681  0040C6  50F8               	movf	tblptru,w,c
 19682  0040C8  6EFF               	movwf	tosu,c
 19683  0040CA  50FA               	movf	pclath,w,c
 19684  0040CC  0012               	return		;indir
 19685  0040CE                     __end_of_IOCB4_ISR:
 19686                           	opt stack 0
 19687                           tosu	equ	0xFFF
 19688                           tosh	equ	0xFFE
 19689                           tosl	equ	0xFFD
 19690                           pclatu	equ	0xFFB
 19691                           pclath	equ	0xFFA
 19692                           tblptru	equ	0xFF8
 19693                           tblptrh	equ	0xFF7
 19694                           tblptrl	equ	0xFF6
 19695                           tablat	equ	0xFF5
 19696                           prodh	equ	0xFF4
 19697                           prodl	equ	0xFF3
 19698                           intcon	equ	0xFF2
 19699                           intcon2	equ	0xFF1
 19700                           postinc0	equ	0xFEE
 19701                           plusw0	equ	0xFEB
 19702                           fsr0h	equ	0xFEA
 19703                           fsr0l	equ	0xFE9
 19704                           wreg	equ	0xFE8
 19705                           indf1	equ	0xFE7
 19706                           postdec1	equ	0xFE5
 19707                           fsr1h	equ	0xFE2
 19708                           fsr1l	equ	0xFE1
 19709                           indf2	equ	0xFDF
 19710                           postinc2	equ	0xFDE
 19711                           postdec2	equ	0xFDD
 19712                           plusw2	equ	0xFDB
 19713                           fsr2h	equ	0xFDA
 19714                           fsr2l	equ	0xFD9
 19715                           status	equ	0xFD8
 19716                           
 19717 ;; *************** function _IOCB4_DefaultInterruptHandler *****************
 19718 ;; Defined at:
 19719 ;;		line 150 in file "mcc_generated_files/pin_manager.c"
 19720 ;; Parameters:    Size  Location     Type
 19721 ;;		None
 19722 ;; Auto vars:     Size  Location     Type
 19723 ;;		None
 19724 ;; Return value:  Size  Location     Type
 19725 ;;                  1    wreg      void 
 19726 ;; Registers used:
 19727 ;;		None
 19728 ;; Tracked objects:
 19729 ;;		On entry : 0/0
 19730 ;;		On exit  : 0/0
 19731 ;;		Unchanged: 0/0
 19732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19733 ;;      Params:         0       0       0       0       0       0       0
 19734 ;;      Locals:         0       0       0       0       0       0       0
 19735 ;;      Temps:          0       0       0       0       0       0       0
 19736 ;;      Totals:         0       0       0       0       0       0       0
 19737 ;;Total ram usage:        0 bytes
 19738 ;; Hardware stack levels used:    1
 19739 ;; This function calls:
 19740 ;;		Nothing
 19741 ;; This function is called by:
 19742 ;;		_PIN_MANAGER_Initialize
 19743 ;;		_IOCB4_ISR
 19744 ;; This function uses a non-reentrant model
 19745 ;;
 19746                           
 19747                           	psect	text117
 19748  0042FA                     __ptext117:
 19749                           	opt stack 0
 19750  0042FA                     _IOCB4_DefaultInterruptHandler:
 19751                           	opt stack 17
 19752                           
 19753                           ;incstack = 0
 19754  0042FA  0012               	return		;funcret
 19755  0042FC                     __end_of_IOCB4_DefaultInterruptHandler:
 19756                           	opt stack 0
 19757                           tosu	equ	0xFFF
 19758                           tosh	equ	0xFFE
 19759                           tosl	equ	0xFFD
 19760                           pclatu	equ	0xFFB
 19761                           pclath	equ	0xFFA
 19762                           tblptru	equ	0xFF8
 19763                           tblptrh	equ	0xFF7
 19764                           tblptrl	equ	0xFF6
 19765                           tablat	equ	0xFF5
 19766                           prodh	equ	0xFF4
 19767                           prodl	equ	0xFF3
 19768                           intcon	equ	0xFF2
 19769                           intcon2	equ	0xFF1
 19770                           postinc0	equ	0xFEE
 19771                           plusw0	equ	0xFEB
 19772                           fsr0h	equ	0xFEA
 19773                           fsr0l	equ	0xFE9
 19774                           wreg	equ	0xFE8
 19775                           indf1	equ	0xFE7
 19776                           postdec1	equ	0xFE5
 19777                           fsr1h	equ	0xFE2
 19778                           fsr1l	equ	0xFE1
 19779                           indf2	equ	0xFDF
 19780                           postinc2	equ	0xFDE
 19781                           postdec2	equ	0xFDD
 19782                           plusw2	equ	0xFDB
 19783                           fsr2h	equ	0xFDA
 19784                           fsr2l	equ	0xFD9
 19785                           status	equ	0xFD8
 19786                           
 19787 ;; *************** function _MEMORY_ISR *****************
 19788 ;; Defined at:
 19789 ;;		line 206 in file "mcc_generated_files/memory.c"
 19790 ;; Parameters:    Size  Location     Type
 19791 ;;		None
 19792 ;; Auto vars:     Size  Location     Type
 19793 ;;		None
 19794 ;; Return value:  Size  Location     Type
 19795 ;;                  1    wreg      void 
 19796 ;; Registers used:
 19797 ;;		None
 19798 ;; Tracked objects:
 19799 ;;		On entry : 0/0
 19800 ;;		On exit  : 0/0
 19801 ;;		Unchanged: 0/0
 19802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19803 ;;      Params:         0       0       0       0       0       0       0
 19804 ;;      Locals:         0       0       0       0       0       0       0
 19805 ;;      Temps:          0       0       0       0       0       0       0
 19806 ;;      Totals:         0       0       0       0       0       0       0
 19807 ;;Total ram usage:        0 bytes
 19808 ;; Hardware stack levels used:    1
 19809 ;; This function calls:
 19810 ;;		Nothing
 19811 ;; This function is called by:
 19812 ;;		_INTERRUPT_InterruptManager
 19813 ;; This function uses a non-reentrant model
 19814 ;;
 19815                           
 19816                           	psect	text118
 19817  0042F4                     __ptext118:
 19818                           	opt stack 0
 19819  0042F4                     _MEMORY_ISR:
 19820                           	opt stack 19
 19821                           
 19822                           ;memory.c: 209: PIR2bits.EEIF = 0;
 19823                           
 19824                           ;incstack = 0
 19825  0042F4  98A1               	bcf	4001,4,c	;volatile
 19826  0042F6  0012               	return		;funcret
 19827  0042F8                     __end_of_MEMORY_ISR:
 19828                           	opt stack 0
 19829                           tosu	equ	0xFFF
 19830                           tosh	equ	0xFFE
 19831                           tosl	equ	0xFFD
 19832                           pclatu	equ	0xFFB
 19833                           pclath	equ	0xFFA
 19834                           tblptru	equ	0xFF8
 19835                           tblptrh	equ	0xFF7
 19836                           tblptrl	equ	0xFF6
 19837                           tablat	equ	0xFF5
 19838                           prodh	equ	0xFF4
 19839                           prodl	equ	0xFF3
 19840                           intcon	equ	0xFF2
 19841                           intcon2	equ	0xFF1
 19842                           postinc0	equ	0xFEE
 19843                           plusw0	equ	0xFEB
 19844                           fsr0h	equ	0xFEA
 19845                           fsr0l	equ	0xFE9
 19846                           wreg	equ	0xFE8
 19847                           indf1	equ	0xFE7
 19848                           postdec1	equ	0xFE5
 19849                           fsr1h	equ	0xFE2
 19850                           fsr1l	equ	0xFE1
 19851                           indf2	equ	0xFDF
 19852                           postinc2	equ	0xFDE
 19853                           postdec2	equ	0xFDD
 19854                           plusw2	equ	0xFDB
 19855                           fsr2h	equ	0xFDA
 19856                           fsr2l	equ	0xFD9
 19857                           status	equ	0xFD8
 19858                           
 19859 ;; *************** function _EUSART1_Transmit_ISR *****************
 19860 ;; Defined at:
 19861 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 19862 ;; Parameters:    Size  Location     Type
 19863 ;;		None
 19864 ;; Auto vars:     Size  Location     Type
 19865 ;;		None
 19866 ;; Return value:  Size  Location     Type
 19867 ;;                  1    wreg      void 
 19868 ;; Registers used:
 19869 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19870 ;; Tracked objects:
 19871 ;;		On entry : 0/0
 19872 ;;		On exit  : 0/0
 19873 ;;		Unchanged: 0/0
 19874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19875 ;;      Params:         0       0       0       0       0       0       0
 19876 ;;      Locals:         0       0       0       0       0       0       0
 19877 ;;      Temps:          0       0       0       0       0       0       0
 19878 ;;      Totals:         0       0       0       0       0       0       0
 19879 ;;Total ram usage:        0 bytes
 19880 ;; Hardware stack levels used:    1
 19881 ;; This function calls:
 19882 ;;		Nothing
 19883 ;; This function is called by:
 19884 ;;		_INTERRUPT_InterruptManager
 19885 ;; This function uses a non-reentrant model
 19886 ;;
 19887                           
 19888                           	psect	text119
 19889  003CCC                     __ptext119:
 19890                           	opt stack 0
 19891  003CCC                     _EUSART1_Transmit_ISR:
 19892                           	opt stack 19
 19893                           
 19894                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 19895                           
 19896                           ;incstack = 0
 19897  003CCC  0E46               	movlw	70
 19898  003CCE  0100               	movlb	0	; () banked
 19899  003CD0  61FF               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 19900  003CD2  D012               	goto	i2l885
 19901                           
 19902                           ; BSR set to: 0
 19903                           ;eusart1.c: 186: {
 19904                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 19905  003CD4  5039               	movf	_eusart1TxTail,w,c	;volatile
 19906  003CD6  0D01               	mullw	1
 19907  003CD8  0E00               	movlw	low _eusart1TxBuffer
 19908  003CDA  24F3               	addwf	prodl,w,c
 19909  003CDC  6ED9               	movwf	fsr2l,c
 19910  003CDE  0E01               	movlw	high _eusart1TxBuffer
 19911  003CE0  20F4               	addwfc	prodh,w,c
 19912  003CE2  6EDA               	movwf	fsr2h,c
 19913  003CE4  50DF               	movf	indf2,w,c
 19914  003CE6  6EAD               	movwf	4013,c	;volatile
 19915                           
 19916                           ; BSR set to: 0
 19917  003CE8  2A39               	incf	_eusart1TxTail,f,c	;volatile
 19918                           
 19919                           ; BSR set to: 0
 19920                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 19921  003CEA  0E45               	movlw	69
 19922  003CEC  6439               	cpfsgt	_eusart1TxTail,c	;volatile
 19923  003CEE  D002               	goto	i2l886
 19924                           
 19925                           ; BSR set to: 0
 19926                           ;eusart1.c: 189: {
 19927                           ;eusart1.c: 190: eusart1TxTail = 0;
 19928  003CF0  0E00               	movlw	0
 19929  003CF2  6E39               	movwf	_eusart1TxTail,c	;volatile
 19930  003CF4                     i2l886:
 19931                           
 19932                           ; BSR set to: 0
 19933                           ;eusart1.c: 191: }
 19934                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 19935                           
 19936                           ; BSR set to: 0
 19937  003CF4  2BFF               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 19938                           
 19939                           ;eusart1.c: 193: }
 19940  003CF6  0012               	return	
 19941  003CF8                     i2l885:
 19942                           
 19943                           ; BSR set to: 0
 19944                           ;eusart1.c: 194: else
 19945                           ;eusart1.c: 195: {
 19946                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 19947  003CF8  989D               	bcf	3997,4,c	;volatile
 19948                           
 19949                           ; BSR set to: 0
 19950                           ;eusart1.c: 197: eusart1TxTail = 0;
 19951  003CFA  0E00               	movlw	0
 19952  003CFC  6E39               	movwf	_eusart1TxTail,c	;volatile
 19953                           
 19954                           ;eusart1.c: 198: eusart1TxHead = 0;
 19955  003CFE  0E00               	movlw	0
 19956  003D00  6E3A               	movwf	_eusart1TxHead,c	;volatile
 19957  003D02  0012               	return	
 19958  003D04                     __end_of_EUSART1_Transmit_ISR:
 19959                           	opt stack 0
 19960                           tosu	equ	0xFFF
 19961                           tosh	equ	0xFFE
 19962                           tosl	equ	0xFFD
 19963                           pclatu	equ	0xFFB
 19964                           pclath	equ	0xFFA
 19965                           tblptru	equ	0xFF8
 19966                           tblptrh	equ	0xFF7
 19967                           tblptrl	equ	0xFF6
 19968                           tablat	equ	0xFF5
 19969                           prodh	equ	0xFF4
 19970                           prodl	equ	0xFF3
 19971                           intcon	equ	0xFF2
 19972                           intcon2	equ	0xFF1
 19973                           postinc0	equ	0xFEE
 19974                           plusw0	equ	0xFEB
 19975                           fsr0h	equ	0xFEA
 19976                           fsr0l	equ	0xFE9
 19977                           wreg	equ	0xFE8
 19978                           indf1	equ	0xFE7
 19979                           postdec1	equ	0xFE5
 19980                           fsr1h	equ	0xFE2
 19981                           fsr1l	equ	0xFE1
 19982                           indf2	equ	0xFDF
 19983                           postinc2	equ	0xFDE
 19984                           postdec2	equ	0xFDD
 19985                           plusw2	equ	0xFDB
 19986                           fsr2h	equ	0xFDA
 19987                           fsr2l	equ	0xFD9
 19988                           status	equ	0xFD8
 19989                           
 19990 ;; *************** function _EUSART1_Receive_ISR *****************
 19991 ;; Defined at:
 19992 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 19993 ;; Parameters:    Size  Location     Type
 19994 ;;		None
 19995 ;; Auto vars:     Size  Location     Type
 19996 ;;		None
 19997 ;; Return value:  Size  Location     Type
 19998 ;;                  1    wreg      void 
 19999 ;; Registers used:
 20000 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20001 ;; Tracked objects:
 20002 ;;		On entry : 0/0
 20003 ;;		On exit  : 0/0
 20004 ;;		Unchanged: 0/0
 20005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20006 ;;      Params:         0       0       0       0       0       0       0
 20007 ;;      Locals:         0       0       0       0       0       0       0
 20008 ;;      Temps:          0       0       0       0       0       0       0
 20009 ;;      Totals:         0       0       0       0       0       0       0
 20010 ;;Total ram usage:        0 bytes
 20011 ;; Hardware stack levels used:    1
 20012 ;; This function calls:
 20013 ;;		Nothing
 20014 ;; This function is called by:
 20015 ;;		_INTERRUPT_InterruptManager
 20016 ;; This function uses a non-reentrant model
 20017 ;;
 20018                           
 20019                           	psect	text120
 20020  003F00                     __ptext120:
 20021                           	opt stack 0
 20022  003F00                     _EUSART1_Receive_ISR:
 20023                           	opt stack 19
 20024                           
 20025                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 20026                           
 20027                           ; BSR set to: 0
 20028                           ;incstack = 0
 20029  003F00  A2AB               	btfss	4011,1,c	;volatile
 20030  003F02  D002               	goto	i2l891
 20031                           
 20032                           ;eusart1.c: 206: {
 20033                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 20034  003F04  98AB               	bcf	4011,4,c	;volatile
 20035                           
 20036                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 20037  003F06  88AB               	bsf	4011,4,c	;volatile
 20038  003F08                     i2l891:
 20039                           
 20040                           ;eusart1.c: 210: }
 20041                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 20042  003F08  5038               	movf	_eusart1RxHead,w,c	;volatile
 20043  003F0A  0D01               	mullw	1
 20044  003F0C  0E46               	movlw	low _eusart1RxBuffer
 20045  003F0E  24F3               	addwf	prodl,w,c
 20046  003F10  6ED9               	movwf	fsr2l,c
 20047  003F12  0E01               	movlw	high _eusart1RxBuffer
 20048  003F14  20F4               	addwfc	prodh,w,c
 20049  003F16  6EDA               	movwf	fsr2h,c
 20050  003F18  CFAE FFDF          	movff	4014,indf2	;volatile
 20051  003F1C  2A38               	incf	_eusart1RxHead,f,c	;volatile
 20052                           
 20053                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 20054  003F1E  0E27               	movlw	39
 20055  003F20  6438               	cpfsgt	_eusart1RxHead,c	;volatile
 20056  003F22  D002               	goto	i2l892
 20057                           
 20058                           ;eusart1.c: 217: {
 20059                           ;eusart1.c: 218: eusart1RxHead = 0;
 20060  003F24  0E00               	movlw	0
 20061  003F26  6E38               	movwf	_eusart1RxHead,c	;volatile
 20062  003F28                     i2l892:
 20063                           
 20064                           ;eusart1.c: 219: }
 20065                           ;eusart1.c: 220: eusart1RxCount++;
 20066  003F28  0100               	movlb	0	; () banked
 20067  003F2A  2BF4               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 20068                           
 20069                           ; BSR set to: 0
 20070  003F2C  0012               	return		;funcret
 20071  003F2E                     __end_of_EUSART1_Receive_ISR:
 20072                           	opt stack 0
 20073                           tosu	equ	0xFFF
 20074                           tosh	equ	0xFFE
 20075                           tosl	equ	0xFFD
 20076                           pclatu	equ	0xFFB
 20077                           pclath	equ	0xFFA
 20078                           tblptru	equ	0xFF8
 20079                           tblptrh	equ	0xFF7
 20080                           tblptrl	equ	0xFF6
 20081                           tablat	equ	0xFF5
 20082                           prodh	equ	0xFF4
 20083                           prodl	equ	0xFF3
 20084                           intcon	equ	0xFF2
 20085                           intcon2	equ	0xFF1
 20086                           postinc0	equ	0xFEE
 20087                           plusw0	equ	0xFEB
 20088                           fsr0h	equ	0xFEA
 20089                           fsr0l	equ	0xFE9
 20090                           wreg	equ	0xFE8
 20091                           indf1	equ	0xFE7
 20092                           postdec1	equ	0xFE5
 20093                           fsr1h	equ	0xFE2
 20094                           fsr1l	equ	0xFE1
 20095                           indf2	equ	0xFDF
 20096                           postinc2	equ	0xFDE
 20097                           postdec2	equ	0xFDD
 20098                           plusw2	equ	0xFDB
 20099                           fsr2h	equ	0xFDA
 20100                           fsr2l	equ	0xFD9
 20101                           status	equ	0xFD8
 20102                           tosu	equ	0xFFF
 20103                           tosh	equ	0xFFE
 20104                           tosl	equ	0xFFD
 20105                           pclatu	equ	0xFFB
 20106                           pclath	equ	0xFFA
 20107                           tblptru	equ	0xFF8
 20108                           tblptrh	equ	0xFF7
 20109                           tblptrl	equ	0xFF6
 20110                           tablat	equ	0xFF5
 20111                           prodh	equ	0xFF4
 20112                           prodl	equ	0xFF3
 20113                           intcon	equ	0xFF2
 20114                           intcon2	equ	0xFF1
 20115                           postinc0	equ	0xFEE
 20116                           plusw0	equ	0xFEB
 20117                           fsr0h	equ	0xFEA
 20118                           fsr0l	equ	0xFE9
 20119                           wreg	equ	0xFE8
 20120                           indf1	equ	0xFE7
 20121                           postdec1	equ	0xFE5
 20122                           fsr1h	equ	0xFE2
 20123                           fsr1l	equ	0xFE1
 20124                           indf2	equ	0xFDF
 20125                           postinc2	equ	0xFDE
 20126                           postdec2	equ	0xFDD
 20127                           plusw2	equ	0xFDB
 20128                           fsr2h	equ	0xFDA
 20129                           fsr2l	equ	0xFD9
 20130                           status	equ	0xFD8
 20131                           
 20132                           	psect	text121
 20133  000000                     __ptext121:
 20134                           	opt stack 0
 20135                           tosu	equ	0xFFF
 20136                           tosh	equ	0xFFE
 20137                           tosl	equ	0xFFD
 20138                           pclatu	equ	0xFFB
 20139                           pclath	equ	0xFFA
 20140                           tblptru	equ	0xFF8
 20141                           tblptrh	equ	0xFF7
 20142                           tblptrl	equ	0xFF6
 20143                           tablat	equ	0xFF5
 20144                           prodh	equ	0xFF4
 20145                           prodl	equ	0xFF3
 20146                           intcon	equ	0xFF2
 20147                           intcon2	equ	0xFF1
 20148                           postinc0	equ	0xFEE
 20149                           plusw0	equ	0xFEB
 20150                           fsr0h	equ	0xFEA
 20151                           fsr0l	equ	0xFE9
 20152                           wreg	equ	0xFE8
 20153                           indf1	equ	0xFE7
 20154                           postdec1	equ	0xFE5
 20155                           fsr1h	equ	0xFE2
 20156                           fsr1l	equ	0xFE1
 20157                           indf2	equ	0xFDF
 20158                           postinc2	equ	0xFDE
 20159                           postdec2	equ	0xFDD
 20160                           plusw2	equ	0xFDB
 20161                           fsr2h	equ	0xFDA
 20162                           fsr2l	equ	0xFD9
 20163                           status	equ	0xFD8
 20164                           
 20165                           	psect	rparam
 20166  0000                     tosu	equ	0xFFF
 20167                           tosh	equ	0xFFE
 20168                           tosl	equ	0xFFD
 20169                           pclatu	equ	0xFFB
 20170                           pclath	equ	0xFFA
 20171                           tblptru	equ	0xFF8
 20172                           tblptrh	equ	0xFF7
 20173                           tblptrl	equ	0xFF6
 20174                           tablat	equ	0xFF5
 20175                           prodh	equ	0xFF4
 20176                           prodl	equ	0xFF3
 20177                           intcon	equ	0xFF2
 20178                           intcon2	equ	0xFF1
 20179                           postinc0	equ	0xFEE
 20180                           plusw0	equ	0xFEB
 20181                           fsr0h	equ	0xFEA
 20182                           fsr0l	equ	0xFE9
 20183                           wreg	equ	0xFE8
 20184                           indf1	equ	0xFE7
 20185                           postdec1	equ	0xFE5
 20186                           fsr1h	equ	0xFE2
 20187                           fsr1l	equ	0xFE1
 20188                           indf2	equ	0xFDF
 20189                           postinc2	equ	0xFDE
 20190                           postdec2	equ	0xFDD
 20191                           plusw2	equ	0xFDB
 20192                           fsr2h	equ	0xFDA
 20193                           fsr2l	equ	0xFD9
 20194                           status	equ	0xFD8
 20195                           
 20196                           	psect	temp
 20197  000048                     btemp:
 20198                           	opt stack 0
 20199  000048                     	ds	1
 20200  0000                     int$flags	set	btemp
 20201  0000                     wtemp6	set	btemp+1
 20202                           tosu	equ	0xFFF
 20203                           tosh	equ	0xFFE
 20204                           tosl	equ	0xFFD
 20205                           pclatu	equ	0xFFB
 20206                           pclath	equ	0xFFA
 20207                           tblptru	equ	0xFF8
 20208                           tblptrh	equ	0xFF7
 20209                           tblptrl	equ	0xFF6
 20210                           tablat	equ	0xFF5
 20211                           prodh	equ	0xFF4
 20212                           prodl	equ	0xFF3
 20213                           intcon	equ	0xFF2
 20214                           intcon2	equ	0xFF1
 20215                           postinc0	equ	0xFEE
 20216                           plusw0	equ	0xFEB
 20217                           fsr0h	equ	0xFEA
 20218                           fsr0l	equ	0xFE9
 20219                           wreg	equ	0xFE8
 20220                           indf1	equ	0xFE7
 20221                           postdec1	equ	0xFE5
 20222                           fsr1h	equ	0xFE2
 20223                           fsr1l	equ	0xFE1
 20224                           indf2	equ	0xFDF
 20225                           postinc2	equ	0xFDE
 20226                           postdec2	equ	0xFDD
 20227                           plusw2	equ	0xFDB
 20228                           fsr2h	equ	0xFDA
 20229                           fsr2l	equ	0xFD9
 20230                           status	equ	0xFD8


Data Sizes:
    Strings     21
    Constant    143
    Data        23
    BSS         257
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160    128     160
    BANK1           256      4     238
    BANK2           256     34      34
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    readUartMessage$3546	PTR FTN()void  size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 

    SynthReadData@data	PTR unsigned char  size(2) Largest target is 0

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 10
		 -> GetIntFromUartData@dataRegArr(BANK0[10]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK2[18]), 
		 -> DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK2[18]), 
		 -> DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    Make32bitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    ZeroBitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK2[18]), 
		 -> DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SynthReadData@TxMsg(BANK2[18]), DacReadValue@TxMsg(BANK0[7]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    crc8@dataArray	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[18]), SynthReadData@TxMsg(BANK2[18]), DacReadValue@TxMsg(BANK0[7]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK1[20]), 

    GroupDAC@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 64
		 -> sampleArray(BANK1[64]), 

    IOCB5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB5_DefaultInterruptHandler(), 

    IOCB5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCB5_DefaultInterruptHandler(), 

    IOCB4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB4_DefaultInterruptHandler(), 

    IOCB4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCB4_DefaultInterruptHandler(), 

    UpdateSynthFreq@data	PTR unsigned char  size(2) Largest target is 0

    DacReadValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    DacSetValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    FlashReadUart@data	PTR unsigned char  size(2) Largest target is 0

    WriteUartMessage@dataBuf	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[18]), SynthReadData@TxMsg(BANK2[18]), DacReadValue@TxMsg(BANK0[7]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), 

    SetChannelMode@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _GetMcuRunTime->___lldiv
    _GetMcuFwVersion->_ZeroArray
    _GroupFlashMemory->_FlashReadCondition
    _FlashReadUart->_SendAckMessage
    _FlashReadCondition->_ZeroArray
    _FlashEreaseMem->_SendAckMessage
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _testLeds->_SendAckMessage
    _ResetMcu->_SendAckMessage
    _SetChannelMode->_SendAckMessage
    _keepAliveSignalUart->_SendAckMessage
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB5_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendSystemStartAck->_SendAckMessage
    _SendAckMessage->_ZeroArray
    _ZeroArray->_memset
    _WriteUartMessage->_EUSART1_Write
    _StoreIntInEeprom->_make8
    _EepromWrite->_DATAEE_WriteByte
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _SWSPI_Synth_send_bits->_Make32bitsArray
    _SWSPI_Synth_send_bits->_ZeroBitsArray
    _ZeroBitsArray->_memset
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    ___lmul->_EepromRead
    _EepromRead->_DATAEE_ReadByte
    _CheckFlashPrecentage->___ftdiv
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _main->_readUartMessage
    _readUartMessage->_GroupAdc
    _readUartMessage->_GroupControlMcu
    _readUartMessage->_GroupDAC
    _readUartMessage->_GroupFlashMemory
    _readUartMessage->_GroupStatusAndVersion
    _readUartMessage->_GroupSynthesizers
    _UpdateSynthFreq->_GetIntFromUartData
    _SynthReadData->_ReadIntFromEeprom
    _SetSynthOper->_InitSynth
    _GroupDAC->_DacReadValue
    _DacSetValue->_GetIntFromUartData
    _GetIntFromUartData->_strtol
    _DacReadValue->_ReadIntFromEeprom
    _SynthLdDetect->_InitSynth
    _PLLInitialize->_InitSynth
    _InitSynth->_ReadIntFromEeprom
    _DacInit->_ReadIntFromEeprom
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _ReadIntFromEeprom->_pow
    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_readUartMessage

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _GroupSynthesizers->_SynthReadData

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  919098
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
                 _SendSystemStartAck
                      _SetMcuRunTime
                       _SetMcuSystem
                      _SynthLdDetect
                 _keepAliveSignalLed
                _keepAliveSignalUart
                    _readUartMessage
 ---------------------------------------------------------------------------------
 (1) _readUartMessage                                      7     7      0  455989
                                            125 BANK0      3     3      0
                                              0 BANK1      4     4      0
                       _EUSART1_Read
                           _GroupAdc *
                    _GroupControlMcu *
                           _GroupDAC *
                   _GroupFlashMemory *
              _GroupStatusAndVersion *
                  _GroupSynthesizers *
                _InitRxMessageParams
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    2719
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupSynthesizers                                    3     1      2  249456
                                            122 BANK0      3     1      2
                       _SetSynthOper
                      _SynthReadData
                    _UpdateSynthFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateSynthFreq                                     11     9      2   27657
                                             39 BANK0     11     9      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (3) _SynthReadData                                       36    34      2  103787
                                            104 BANK0      2     0      2
                                              0 BANK2     34    34      0
                  _ReadIntFromEeprom
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _SetSynthOper                                         1     1      0  117857
                                            111 BANK0      1     1      0
                          _InitSynth
                     _SendAckMessage
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (2) _GroupStatusAndVersion                                4     1      3   13446
                                            122 BANK0      3     1      2
                    _GetMcuFwVersion
                      _GetMcuRunTime
 ---------------------------------------------------------------------------------
 (3) _GetMcuRunTime                                       17    17      0    4498
                                             36 COMRAM     2     2      0
                                              0 BANK0     15    15      0
                   _WriteUartMessage
                            ___lldiv
                            ___llmod
                               _crc8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _GetMcuFwVersion                                     33    33      0    8917
                                             35 COMRAM     7     7      0
                                              0 BANK0     26    26      0
                   _WriteUartMessage
                          _ZeroArray
                             ___wmul
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _GroupFlashMemory                                     3     1      2   32558
                                            122 BANK0      3     1      2
                     _FlashEreaseMem
                 _FlashReadCondition
                      _FlashReadUart
 ---------------------------------------------------------------------------------
 (3) _FlashReadUart                                       99    97      2   14638
                                             43 COMRAM     2     0      2
                                              0 BANK0     97    97      0
                  _FLASH_IsWriteDone
                     _FLASH_ReadByte
                     _SendAckMessage
                   _WriteUartMessage
                          _ZeroArray
                                _abs
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     142
                                             23 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _FLASH_ReadByte                                       4     0      4     370
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _FlashReadCondition                                  13    13      0    7780
                                             35 COMRAM    13    13      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _FlashEreaseMem                                       0     0      0   10078
                     _SendAckMessage
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupDAC                                             3     1      2  130844
                                            122 BANK0      3     1      2
                       _DacReadValue
                        _DacSetValue
 ---------------------------------------------------------------------------------
 (3) _DacSetValue                                         15    13      2   27378
                                             39 BANK0     15    13      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  33    25      8    6571
                                              6 BANK0     33    25      8
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2723
                                             37 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _DacReadValue                                        18    16      2  103308
                                            104 BANK0     18    16      2
                  _ReadIntFromEeprom
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (2) _GroupControlMcu                                      4     1      3   14817
                                            122 BANK0      3     1      2
                           _ResetMcu
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0    7427
                                             43 COMRAM     3     3      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetMcu                                             0     0      0    7359
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupAdc                                             3     1      2    7573
                                            122 BANK0      3     1      2
                     _SetChannelMode
 ---------------------------------------------------------------------------------
 (3) _SetChannelMode                                       2     0      2    7511
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      46
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalUart                                  0     0      0    7359
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SynthLdDetect                                        0     0      0  109977
                     _BlinkErrorLeds
                          _InitSynth
 ---------------------------------------------------------------------------------
 (2) _BlinkErrorLeds                                       6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0     294
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     294
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0     196
          _IOCB4_SetInterruptHandler
          _IOCB5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _IOCB5_SetInterruptHandler                            2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _IOCB4_SetInterruptHandler                            2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     592
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     592
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendSystemStartAck                                   0     0      0    7359
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _SendAckMessage                                       8     7      1    7359
                                             35 COMRAM     8     7      1
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _crc8                                                 9     5      4    1610
                                             23 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ZeroArray                                            4     0      4    2719
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _WriteUartMessage                                     7     3      4    1452
                                             24 COMRAM     7     3      4
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0  218655
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        0     0      0  109887
                          _InitSynth
 ---------------------------------------------------------------------------------
 (4) _InitSynth                                            7     7      0  109887
                                            104 BANK0      7     7      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_CE_Pin                                     2     1      1     425
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              5     5      0  108768
                                            104 BANK0      5     5      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _StoreIntInEeprom                                     9     2      7    3779
                                             32 COMRAM     9     2      7
                        _EepromWrite
                              _make8
 ---------------------------------------------------------------------------------
 (5) _EepromWrite                                          2     1      1     338
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_WriteByte                                     3     2      1     186
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (4) _SWSPI_send_word                                      9     4      5    9418
                                             37 COMRAM     9     4      5
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5    1595
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SWSPI_Synth_send_bits                               42    38      4    3353
                                             33 COMRAM     4     0      4
                                              0 BANK0     38    38      0
                    _Make32bitsArray
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
                      _ZeroBitsArray
 ---------------------------------------------------------------------------------
 (6) _ZeroBitsArray                                        2     0      2     798
                                             31 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     677
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (6) _Make32bitsArray                                     10     4      6     344
                                             23 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) _SWSPI_DAC_send_bits                                  3     2      1    2041
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Data_Pin                                       2     1      1     757
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Clk_Pin                                        2     1      1     937
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _ReadIntFromEeprom                                   23    19      4   95314
                                             81 BANK0     23    19      4
                         _EepromRead
                           ___awtoft
                            ___fttol
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     636
                                             25 COMRAM    12     4      8
                         _EepromRead (ARG)
 ---------------------------------------------------------------------------------
 (5) _EepromRead                                           1     1      0      62
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_ReadByte                                      1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   14121
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          12    12      0  104572
                                             81 BANK0     12    12      0
                  _ADC_GetConversion
                   _FlashSampleWrite
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (5) _pow                                                 17    11      6   88933
                                             64 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (6) _log                                                  5     2      3   28922
                                             46 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _exp                                                  9     6      3   47974
                                             55 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (7) _ldexp                                                7     2      5     539
                                             46 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (7) _floor                                                8     5      3   11854
                                             47 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (7) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     911
                                             24 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6    1098
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) ___altoft                                            10     6      4    3367
                                             46 COMRAM     2     2      0
                                             39 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (7) _eval_poly                                           12     5      7   13735
                                             46 COMRAM     2     2      0
                                             36 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___wmul                                               6     2      4    2322
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     335
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             4     1      3    3476
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1451
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6     992
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                         18    18      0     767
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     767
                            ___lwmod
 ---------------------------------------------------------------------------------
 (13) ___lwmod                                             5     1      4     767
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (12) _PIN_MANAGER_IOC                                     0     0      0       0
                          _IOCB4_ISR
                          _IOCB5_ISR
 ---------------------------------------------------------------------------------
 (13) _IOCB5_ISR                                           0     0      0       0
                   Absolute function *
      _IOCB5_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (14) _IOCB5_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _IOCB4_ISR                                           0     0      0       0
                   Absolute function *
      _IOCB4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (14) _IOCB4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _MEMORY_ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
           _ZeroBitsArray
             _memset
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _StoreIntInEeprom
         _EepromWrite
           _DATAEE_WriteByte
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
       _InitSynth
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
         _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SendSystemStartAck
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
         _IOCB4_SetInterruptHandler
         _IOCB5_SetInterruptHandler
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _SynthLdDetect
     _BlinkErrorLeds
     _InitSynth
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
           _ZeroBitsArray
             _memset
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _StoreIntInEeprom
         _EepromWrite
           _DATAEE_WriteByte
         _make8
       _SwSpi_Set_CE_Pin
   _keepAliveSignalLed
   _keepAliveSignalUart
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _readUartMessage
     _EUSART1_Read
     _GroupAdc *
       _SetChannelMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupControlMcu *
       _ResetMcu
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _testLeds
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupDAC *
       _DacReadValue
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _DacSetValue
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _GroupFlashMemory *
       _FlashEreaseMem
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _ZeroArray
           _memset
       _FlashReadCondition
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _FlashReadUart
         _FLASH_IsWriteDone
         _FLASH_ReadByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _abs
         _crc8
     _GroupStatusAndVersion *
       _GetMcuFwVersion
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         ___wmul
         _crc8
       _GetMcuRunTime
         _WriteUartMessage
           _EUSART1_Write
         ___lldiv
         ___llmod
         _crc8
     _GroupSynthesizers *
       _SetSynthOper
         _InitSynth
           _ReadIntFromEeprom
             _EepromRead
               _DATAEE_ReadByte
             ___awtoft
               ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _pow
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___wmul
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___wmul
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
           _SWSPI_send_word
             _SWSPI_DAC_send_bits
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SWSPI_Synth_send_bits
               _Make32bitsArray
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
               _ZeroBitsArray
                 _memset
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
             _make8
           _StoreIntInEeprom
             _EepromWrite
               _DATAEE_WriteByte
             _make8
           _SwSpi_Set_CE_Pin
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _SwSpi_Set_CE_Pin
       _SynthReadData
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _UpdateSynthFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _ZeroArray *
       _memset
     _crc8 *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
     _IOCB4_ISR
       Absolute function(Fake) *
       _IOCB4_DefaultInterruptHandler *
     _IOCB5_ISR
       Absolute function(Fake) *
       _IOCB5_DefaultInterruptHandler *
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100     22      22      10       13.3%
BITBANK1           100      0       0       7        0.0%
BANK1              100      4      EE       8       93.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     80      A0       6      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1F7       3        0.0%
DATA                 0      0     1F7       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Mar 21 18:07:22 2018

              __size_of_SendSystemStartAck 000C                          ??_GetMcuFwVersion 0024  
               __end_of_keepAliveSignalLed 41B4                               ___altoft@exp 002F  
                 _eusart1TxBufferRemaining 00FF                         readUartMessage@idx 00DD  
                 GetIntFromUartData@idxCon 0084                            _GroupControlMcu 3E42  
              __end_of_keepAliveSignalUart 429C                              ___altoft@sign 0030  
               __size_of_FLASH_IsWriteDone 000E                   GetIntFromUartData@recVal 007B  
                                       l56 3530                   GetIntFromUartData@retVal 007C  
                      __end_of_BlinkOkLeds 3708                            _SWSPI_send_word 3054  
                      ___wmul@multiplicand 001A         __size_of_IOCB4_SetInterruptHandler 000A  
                          _timer0ReloadVal 0046                 ?_IOCB4_SetInterruptHandler 0018  
                             __CFG_CP0$OFF 000000                               __CFG_CP1$OFF 000000  
                             __CFG_CP2$OFF 000000                               __CFG_CP3$OFF 000000  
                             ___ftadd@exp1 0083                               ___ftadd@exp2 0082  
                             ___ftadd@sign 0081                                ?_MEMORY_ISR 0001  
                                      l112 3E96                                        l201 134C  
                                      l210 1400                                        l203 136A  
                                      l300 232C                                        l116 1976  
                                      l220 3D5A                                        l212 1438  
                                      l117 189C                                        l221 3D44  
                                      l205 1370                                        l214 143E  
                                      l311 0B80                                        l207 13D8  
                                      l208 1398                                        l321 0D18  
                                      l313 0BEC                                        l306 0CC0  
                                      l314 0CAE                                        l403 2996  
                                      l411 286A                                        l331 0E3A  
                                      l307 0C24                                        l404 29AC  
                                      l332 0E50                                        l324 0D30  
                                      l316 0C5E                                        l501 10DC  
                                      l325 0E56                                        l309 0B70  
                                      l326 0D4C                                        l318 0C70  
                                      l510 241C                                        l327 0D64  
                                      l192 12EC                                        l329 0DE2  
                                      l521 3412                                        l505 2406  
                                      l193 1316                                        l522 341E  
                                      l506 23BE                                        l603 3090  
                                      l531 1620                                        l516 33EE  
                                      l508 2400                                        l188 1498  
                                      l613 3854                                        l621 2D40  
                                      l517 33D6                                        l197 131C  
                                      l189 12E0                                        l630 387E  
                                      l614 3820                                        l518 33E2  
                                      l526 1576                                        l615 383A  
                                      l623 2D6E                                        l607 30EA  
                                      l199 1334                                        l616 3844  
                                      l624 2D7A                                        l704 3BC4  
                                      l528 1606                                        l705 3BCE  
                                      l537 3EEE                                        l529 1614  
                                      l538 3EF4                                        l299 230C  
                                      l715 3C14                                        l491 10A8  
                                      l628 38B0                                        l716 3BEC  
                                      l629 3874                                        l741 416E  
                                      l725 3C00                                        l717 3BF6  
                                      l646 389C                                        l638 3888  
                                      l726 3C0A                                        l494 0FBA  
                                      l647 38A6                                        l639 3892  
                                      l495 0F9C                                        l736 4172  
                                      l657 3906                                        l737 416A  
                                      l489 0E9E                                        l658 38CA  
                                      l675 38F2                                        l667 38DE  
                                      l659 38D4                                        l499 108A  
                                      l676 38FC                                        l668 38E8  
                                      l694 3BD8                                        l695 3BB0  
                                      l696 3BBA                                        l880 3BA8  
                                      l881 3BA6                                        l866 3A78  
                                      l868 3A9E                                        l879 3B84  
                             __CFG_CPB$OFF 000000                               __CFG_CPD$OFF 000000  
                     readUartMessage@chRec 00DF                          ??_Make32bitsArray 001E  
                               _SYNTH_REGS 0601                                        _abs 3F82  
                                      _exp 10E2                                        _log 1EE0  
                                      _pow 1BE4                                        prod 000FF3  
                                      tosl 000FFD                                        wreg 000FE8  
           ?_InitSystemApplicationManagers 0001                               __CFG_LVP$OFF 000000  
               __end_of_FlashReadCondition 223C                             InitSynth@cType 00CC  
                             ___ftdiv@cntr 0063                         __size_of_IOCB4_ISR 0022  
                       __size_of_IOCB5_ISR 0022                               ___ftdiv@sign 0068  
                           ?_ZeroBitsArray 0020                                       l1020 2CCC  
                                     l1016 2CF2                                       l1017 2CAA  
                                     l1019 2CCA                                       l1027 3D94  
                                     ?_abs 0018                                       l1133 3EBA  
                                     l2202 31A8                                       l2210 2C00  
                                     l2211 2BF4                                       l2123 16EA  
                                     l1251 3E4E                                       l2140 180E  
                                     l2133 1766                                       l2125 1702  
                                     l1261 402A                                       l2206 2B84  
                                     l2142 1832                                       l2134 1776  
                                     l2143 186E                                       l2127 1756  
                                     l2208 2BCE                                       l2224 4104  
                                     l2136 1790                                       l1360 1DB4  
                                     l1280 32CE                                       l1248 3E54  
                                     l1273 32F6                                       l1281 32D6  
                                     l1249 3E48                                       l2234 4122  
                                     l1362 1DD4                                       l1282 32E6  
                                     l1258 4030                                       l1266 40E2  
                                     l1290 3C30                                       l1530 34CE  
                                     l1371 3748                                       l2219 3FCA  
                                     l2147 41F0                                       l2139 17A2  
                                     l1451 08B8                                       l1259 4024  
                                     l1267 40D4                                       l1291 3C36  
                                     l1372 370A                                       l1348 3A44  
                                     l1364 1E4A                                       l1532 34F4  
                                     l1381 37D8                                       l1349 3A28  
                                     l2229 3FF0                                       l1453 08E6  
                                     l1277 32A6                                       l1533 34E8  
                                     l2254 2B52                                       l1630 344E  
                                     l2182 10FC                                       l2246 1F00  
                                     l1374 370E                                       l1278 32B6  
                                     l2255 2AD4                                       l1383 3816  
                                     l1375 3712                                       l1447 083E  
                                     l1463 2740                                       l1279 32C6  
                                     l1287 3C44                                       l1535 3506  
                                     l2184 1136                                       l2248 1F24  
                                     l1552 392C                                       l1392 2104  
                                     l1376 3716                                       l1288 3C2A  
                                     l1296 3DC8                                       l2193 29F0  
                                     l2185 1170                                       l1553 3940  
                                     l1393 202A                                       l1377 3744  
                                     l1449 086C                                       l1297 3DAC  
                                     l1529 34B6                                       l2194 29E2  
                                     l2186 11A0                                       l1386 3C8C  
                                     l2187 12CA                                       l1387 3C62  
                                     l1299 3DBA                                       l1740 3CA8  
                                     l1804 1B10                                       l2196 2A0A  
                                     l2188 12A0                                       l1900 339C  
                                     l1813 1B4E                                       l1805 1B06  
                                     l1629 345A                                       l2197 2A86  
                                     l1814 1B44                                       l1910 35D6  
                                     l1590 3FA0                                       l1823 2648  
                                     l1831 3240                                       l1760 2E7A  
                                     l1816 1B72                                       l1840 257A  
                                     l1832 3270                                       l1825 2670  
                                     l1817 1B8E                                       l1841 25AC  
                                     l1905 35A0                                       l1762 2EB8  
                                     l1826 26AE                                       l1818 1BBE  
                                     l1842 25BC                                       l1906 3594  
                                     l1763 2EA2                                       l1827 26D4  
                                     l1916 3776                                       l1844 25D4  
                                     l1765 2EE0                                       l1917 376A  
                                     l1845 25E4                                       l1861 24D6  
                                     l1909 35C8                                       l1766 2ED6  
                                     l1790 1A8A                                       l1838 2552  
                                     l1870 2516                                       l1862 24C6  
                                     l1759 2E84                                       l1855 3B04  
                                     l1849 4058                                       l1794 1AB4  
                                     l1867 24FA                                       l1859 245E  
                                     l1868 24EE                                       l1972 3F48  
                                     l1973 3F38                                       l1990 1D56  
                                     l1799 1B1A                                       l1895 335A  
                                     l1984 1C2E                                       l1896 334E  
                                     l1985 1C1E                                       l1987 1C46  
                                     l1899 338E                                       l1988 1CD0  
                                     l1989 1CAE                                       l7311 37C8  
                                     l6247 3656                                       l8007 3576  
                                     l8201 285A                                       l8113 0D30  
                                     l8211 28A0                                       ?_exp 0097  
                                     l8037 2CA2                                       l7093 3F38  
                                     l8117 0D54                                       l8301 1618  
                                     ?_log 008E                                       l8127 0DB4  
                                     l6459 36B4                                       l7523 2D38  
                                     l7451 3B72                                       l8441 2996  
                                     l6827 329C                                       l7395 12A0  
                                     l8525 1894                                       l8429 28D4  
                                     l8381 2730                                       l8295 160C  
                                     l7825 1DAC                                       l8393 27BC  
                                     l7907 0F9C                                       l7693 30B8  
                                     l7919 108A                                       l7847 1E3A  
                                     l7689 30AA                                       l7865 1E9E  
                                     ?_pow 00A0                                       l7879 0E96  
                                     l7993 3520                                       STR_1 0690  
                                     STR_2 0690                                       STR_3 0690  
                                     STR_4 0690                                       STR_5 0690  
                                     STR_6 0690                                       STR_7 0690  
                                     STR_8 0690                                       STR_9 0690  
                       EepromWrite@address 001C                                       _LATA 000F89  
                                     _LATB 000F8A                                       _LATC 000F8B  
                                     _LATD 000F8C                                       _LATE 000F8D  
                                     u7001 2630                                       u7100 29FC  
                                     u7021 2658                                       u6500 2E6C  
                                     u7140 2BA4                                       u8100 1DEE  
                                     u7400 117A                                       u6601 1A5C  
                                     u7410 117C                                       u8210 0ED2  
                                     u8130 1E9E                                       u8060 4280  
                                     u6540 2EEA                                       u7148 2BA8  
                                     u8061 427C                                       u8141 1ED6  
                                     u6630 1A7C                                       u7510 1C94  
                                     u8400 2CD0                                       u8320 35A4  
                                     u6801 253A                                       u6730 1B22  
                                     u5930 41A6                                       u7195 3DA2  
                                     u6660 1AA6                                       u7196 3DA4  
                                     u7700 3FEC                                       u6821 2562  
                                     u6910 247C                                       u7630 2D8C  
                                     u8350 3576                                       u8415 2CEE  
                                     u6591 1A48                                       u8416 2CF0  
                                     u6760 1B56                                       u7560 373C  
                                     u7720 3FBC                                       u8600 0DD2  
                                     u8505 0BF6                                       u6690 1AE4  
                                     u8450 0B1C                                       u8290 335E  
                                     u8275 3E3E                                       u6915 2474  
                                     u9307 3538                                       u8276 3E40  
                                     u9180 2E58                                       u7820 3064  
                                     u5948 41A8                                       u8460 0B1E  
                                     u7565 3732                                       u9317 3548  
                                     u8525 0C82                                       u8701 2358  
                                     u6950 2500                                       u9327 3558  
                                     u8560 0D06                                       u8800 3400  
                                     u9337 3568                                       u7850 30E4  
                                     u7930 16F2                                       u8810 3402  
                                     u9178 1470                                       u6891 2442  
                                     u9347 367C                                       u8651 2FCA  
                                     u9179 1490                                       u6980 31D0  
                                     u8660 300C                                       u9357 3696  
                                     u8590 0DB4                                       u9367 2D8E  
                                     u8680 28A0                                       u7960 172C  
                                     u8920 27BC                                       u8760 33C4  
                                     u9377 36DA                                       u8665 3000  
                                     u8770 33C6                                       u9387 36F4  
                                     u8940 2298                                       u6988 31D2  
                                     u7980 173C                                       u9397 1962  
                                     u8870 1674                                       u8935 2246  
                                     u8960 22DC                                       u8880 1678  
                 ??_SwSpi_Set_Synth_Le_Pin 0019                                       _WPUB 000F61  
                            _EUSART1_Write 3B70                                       abs@a 0018  
                                     _crc8 3A16                    ??_InitAdcApplicationMgr 0018  
                                     _data 00EF                                       _main 34A4  
                             ___ftpack@arg 0018                              ?_EUSART1_Read 0001  
                             ___ftpack@exp 001B                            _TMR0_StartTimer 42F0  
                          __end_of_DacInit 29B2                                       fsr0h 000FEA  
                                     fsr1h 000FE2                                       fsr2h 000FDA  
                                     fsr0l 000FE9                                       indf1 000FE7  
                                     indf2 000FDF                                       fsr1l 000FE1  
                                     fsr2l 000FD9                                       btemp 0048  
                            __CFG_BORV$190 000000                                       exp@x 0097  
                                     log@x 008E                          ?_FLASH_WriteBlock 001D  
                         ?_ClearMcuRunTime 0001                                       pow@x 00A0  
                                     pow@y 00A3                                       prodh 000FF4  
                                     prodl 000FF3                  GroupStatusAndVersion@data 00DA  
            __size_of_CheckFlashPrecentage 00AE                                       start 00DC  
                            __CFG_IESO$OFF 000000                          DacReadValue@TxMsg 00D1  
                      __end_of_EepromWrite 4276                         ??_FLASH_WriteBlock 0023  
                            _adcSampleMode 003B                               ___ftmul@cntr 0076  
                             ___param_bank 000000                               ___ftmul@sign 0077  
                           _BlinkErrorLeds 364C                               ___fttol@exp1 0086  
                                    ??_abs 001A                  __size_of_DATAEE_WriteByte 0036  
                                    ??_exp 0031                                      ??_log 0031  
                             ___fttol@lval 0082                                      ??_pow 0031  
                  __end_of_TMR0_Initialize 3E0E                     _ReadIntFromEeprom$3540 00BC  
                   _ReadIntFromEeprom$3541 00BF             __size_of_OSCILLATOR_Initialize 000E  
            __end_of_OSCILLATOR_Initialize 425A                                      ?_crc8 0018  
               SWSPI_DAC_send_bits@phrType 001C                                      ?_main 0001  
                                    _EEADR 000FA9                            __end_of___ftadd 1BE4  
                                    STR_10 0690                                      STR_11 0690  
                                    STR_20 069C                                      STR_12 0690  
                                    STR_21 069C                                      STR_13 0690  
                                    STR_22 069C                                      STR_14 0690  
                                    STR_23 069C                                      STR_15 0690  
                                    STR_24 069C                                      STR_16 0690  
                                    STR_25 069C                                      STR_17 0690  
          __size_of_SwSpi_Set_Dac_Sync_Pin 001C                                      STR_26 069C  
                                    STR_18 069C                                      STR_27 069C  
                                    STR_19 069C                                      STR_28 069C  
                                    STR_29 069C                            __end_of___ftdiv 2706  
        __end_of_IOCB4_SetInterruptHandler 42D0                            __end_of___ftneg 4066  
                          __end_of___lldiv 33AE                                 _EepromRead 42D0  
                          __end_of___ftmul 261E                                      _T0CON 000FD5  
                          __end_of___llmod 35E8                            __end_of___ftsub 3B2E  
                          __end_of___fttol 2528                               _SYNTH_ADDRES 0635  
                           __CFG_DEBUG$OFF 000000                            InitSynth@regNum 00CE  
                          __end_of___lwmod 3B70                        StoreIntInEeprom@idx 0029  
                                    i2l821 0086                                      i2l814 005E  
                                    i2l823 0090                                      i2l816 006A  
                                    i2l819 007A                                      i2l891 3F08  
                                    i2l892 3F28                                      i2l885 3CF8  
                                    i2l886 3CF4                        StoreIntInEeprom@val 0028  
                                    _TMR0H 000FD7                                      _TMR0L 000FD6  
                                    _TRISA 000F92                                      _TRISB 000F93  
                                    _TRISC 000F94                                      _TRISD 000F95  
                                    _TRISE 000F96                        _SWSPI_DAC_send_bits 3818  
        __size_of_TMR0_SetInterruptHandler 000A                              __CFG_WRT0$OFF 000000  
                            __CFG_WRT1$OFF 000000                 __end_of_GetIntFromUartData 1EE0  
                            __CFG_WRT2$OFF 000000                        ___lmul@multiplicand 001E  
                ?_TMR0_SetInterruptHandler 0018                              __CFG_WRT3$OFF 000000  
                             ___lltoft@exp 0028                       _EUSART1_Transmit_ISR 3CCC  
                           __CFG_EBTR0$OFF 000000                             __CFG_FCMEN$OFF 000000  
                           __CFG_EBTR1$OFF 000000                             __CFG_EBTR2$OFF 000000  
                           __CFG_EBTR3$OFF 000000                          ?_WriteUartMessage 0019  
                         __end_of_TMR0_ISR 2FB6                              __CFG_WRTB$OFF 000000  
                            __CFG_WRTC$OFF 000000                              __CFG_WRTD$OFF 000000  
                          DacSetValue@data 0087                            _DATAEE_ReadByte 41F4  
                           __CFG_EBTRB$OFF 000000                              ___awtoft@sign 0023  
                  __end_of_PIN_MANAGER_IOC 423E                                      crc8@i 001F  
                                    _make8 3708             __size_of_SWSPI_Synth_send_bits 00BA  
                    __end_of_GetMcuRunTime 27EA                                      _count 00E6  
                                    _floor 29B2                                      _ldexp 2B6A  
                                    _frexp 3180                                      _errno 016E  
            __end_of_SWSPI_Synth_send_bits 2DAE                            __end_of_isalpha 3FD2  
                          __end_of_isdigit 410C                                      _group 00F2  
                       ??_WriteUartMessage 001D                         __CFG_MCLRE$EXTMCLR 000000  
                            ___ftpack@sign 001C                    ??_GroupStatusAndVersion 0031  
                          __end_of_isspace 3FF8                             ?_EUSART1_Write 0001  
                              ?_AdcConvert 0001                             __CFG_BOREN$OFF 000000  
                          __end_of_isupper 412A                                      pclath 000FFA  
                                    tablat 000FF5                          ??_UpdateSynthFreq 0030  
                                    pow@yi 00AD                             ??_EUSART1_Read 0018  
                                    plusw0 000FEB                                      plusw2 000FDB  
                                    status 000FD8                                      wtemp6 0049  
                     ReadIntFromEeprom@idx 00C7                             __CFG_HFOFST$ON 000000  
                          __end_of_toupper 41F4             SwSpi_Set_Synth_Le_Pin@cPinMode 0018  
                   __size_of_SynthLdDetect 002E                    __end_of_GroupControlMcu 3E72  
                      __size_of_MEMORY_ISR 0004                             __CFG_PBADEN$ON 000000  
                              exp@exponent 009D             CheckFlashPrecentage@precentage 007C  
                     ?_SWSPI_DAC_send_bits 001A                     __end_of_BlinkErrorLeds 36AA  
          ??_IOCB4_DefaultInterruptHandler 0001                                ldexp@newexp 0091  
                  __end_of_SWSPI_send_word 30EE                                _BlinkOkLeds 36AA  
                  WriteUartMessage@dataBuf 0019                            __initialization 30EE  
                              log@exponent 0091                               __end_of_crc8 3A64  
               __end_of_EUSART1_Initialize 3D3A                               __end_of_main 3518  
                       DacReadValue@regNum 00CC                          __end_of_IOCB4_ISR 40CE  
                        __end_of_IOCB5_ISR 40AC                    FLASH_ReadByte@flashAddr 0018  
              ?_INTERRUPT_InterruptManager 0001                           __end_of_GroupDAC 3DDA  
                   __size_of_SynthReadData 01DE                            _readUartMessage 12D8  
                         __end_of_GroupAdc 40EE                                     ??_crc8 001C  
                                   ??_main 0031                              ___fttol@sign1 0081  
                        ?_SwSpi_Set_CE_Pin 0018                              __activetblptr 000002  
                  __size_of_FLASH_ReadByte 0012                           __end_of_ResetMcu 424C  
                             _writeAddress 0040                         ??_SwSpi_Set_CE_Pin 0019  
                    ?_EUSART1_Transmit_ISR 0001                            ??_ZeroBitsArray 0022  
                  __end_of_TMR0_StartTimer 42F4                                     ?_make8 0018  
                                   _ADCON0 000FC2                                     _ADCON1 000FC1  
                                   _ADCON2 000FC0                                     ?_floor 008F  
                FLASH_WriteBlock@writeAddr 001D                                     ?_ldexp 008E  
                                   ?_frexp 0018                           __end_of___altoft 34A4  
                         ___llmod@dividend 0018                                     _ADRESH 000FC4  
                                   _ADRESL 000FC3                                     _EEDATA 000FA8  
                                ??_DacInit 00C8                                     _EECON2 000FA7  
                         __end_of___awtoft 3CCC                                     _ANSELA 000F38  
                                   _ANSELB 000F39                                     _ANSELC 000F3A  
                                   _ANSELD 000F3B                                     _ANSELE 000F3C  
                         __end_of___ftpack 2F0A             ?_IOCB5_DefaultInterruptHandler 0001  
                         __end_of___lltoft 37C0                          _FlashReadUart$582 00B1  
                        _FlashReadUart$583 00B5                          ?_FlashSampleWrite 002D  
                                   i2l1090 2FA0                                     i2l1087 2F3A  
                                   i2l1088 2F5C                                     i2l1089 2F7E  
                           __CFG_WDTEN$OFF 000000                       StoreIntInEeprom@data 0021  
                                   i2l1962 3B5C                                     i2l1963 3B66  
                                   i2l1958 3B44                                     i2l1959 3B3C  
                                   _TABLAT 000FF5                                _EepromWrite 4268  
                                   _RCREG1 000FAE                           __end_of___lwtoft 408A  
                  __size_of_FlashEreaseMem 0052                  __size_of_FLASH_EraseBlock 0034  
                                   _RCSTA1 000FAB                          SynthReadData@data 00C8  
          __size_of_SwSpi_Set_Synth_Le_Pin 003C                                     _OSCCON 000FD3  
                                   _SPBRG1 000FAF                     _SwSpi_Set_Dac_Sync_Pin 4166  
                  __size_of_SwSpi_Data_Pin 0056                   GroupSynthesizers@request 00DC  
                       ??_FlashSampleWrite 0060                                     _TXREG1 000FAD  
                                   _TXSTA1 000FAC                         __size_of_InitSynth 0276  
                    ??_SWSPI_DAC_send_bits 001B                             _Timer0_SynthLd 00F9  
                 __end_of_GroupFlashMemory 3C5C                            ?_BlinkErrorLeds 0001  
                           __CFG_PWRTEN$ON 000000                             __CFG_XINST$OFF 000000  
                             _synthLdRxCnt 00FE                                     _cState 00F3  
                                   ___ftge 3210                                     ___lmul 391C  
                SWSPI_Synth_send_bits@data 0022                                     ___wmul 3FF8  
                                ??___ftadd 007E                  SWSPI_Synth_send_bits@mask 0080  
                                ??___ftdiv 0060                                  ??___ftneg 001B  
                                ??___lldiv 0020                                  ??___ftmul 006F  
                    __end_of_PLLInitialize 4268                                  ??___llmod 0020  
                                ??___ftsub 002F                                  ??___fttol 007C  
                                ??___lwmod 0005             SwSpi_Set_Dac_Sync_Pin@cPinMode 0018  
                         ?_TMR0_Initialize 0001                                     _memset 3F2E  
                       __end_of_DAC_ADDRES 0657                                     clear_0 3154  
                                   clear_1 3160                                     clear_2 316C  
                      __size_of_AdcConvert 01B6                    __end_of_DATAEE_ReadByte 4208  
                              ?_EepromRead 0001                                     _strtol 16AA  
                                   floor@i 0092                      __end_of_SwSpi_Clk_Pin 391C  
                                   floor@x 008F                      ___ftmul@f3_as_product 0073  
                            _SynthLdDetect 3ED2                   SWSPI_DAC_send_bits@count 001B  
               FlashSampleWrite@channelNum 002F                               __pdataCOMRAM 0040  
                                ??_isalpha 001B                                  ??_isdigit 0018  
                    __end_of_FlashReadUart 0E6C                           __end_of_testLeds 3582  
                            ?_SetMcuSystem 0001                               __mediumconst 0000  
                                ??_isspace 0018                                     tblptrh 000FF7  
                                ??_isupper 0018                                     tblptrl 000FF6  
                                   tblptru 000FF8                   ADC_GetConversion@channel 001C  
                          ??_EUSART1_Write 0018   TMR0_SetInterruptHandler@InterruptHandler 0018  
IOCB5_SetInterruptHandler@InterruptHandler 0018  IOCB4_SetInterruptHandler@InterruptHandler 0018  
             __size_of_InitRxMessageParams 0028                           ?_PIN_MANAGER_IOC 0001  
                    ReadIntFromEeprom@base 00B8                            _eusart1RxBuffer 0146  
                                ??_toupper 0018                         __size_of_ZeroArray 001E  
            __size_of_INTERRUPT_Initialize 0004                              _SynthReadData 14CC  
                          _eusart1TxBuffer 0100                            _GetMcuFwVersion 06A6  
                         __end_ofexp@coeff 0675                          _SYSTEM_Initialize 4182  
                         __end_oflog@coeff 0690                                 __accesstop 0060  
                  __end_of__initialization 3172                                 ___altoft@c 0087  
                            ZeroArray@size 0022                                 ___ftadd@f1 0078  
                               ___ftadd@f2 007B                                 ___ftge@ff1 0018  
                               ___ftge@ff2 001B                         ?_SYSTEM_Initialize 0001  
                             eval_poly@res 008B                              ___rparam_used 000001  
                               ___ftdiv@f1 0029                                 ___ftdiv@f2 002C  
                               ___ftdiv@f3 0064                           ?_GroupControlMcu 00DA  
             GroupStatusAndVersion@request 00DD                               InitSynth@idx 00CD  
                               ___ftneg@f1 0018                                 ___awtoft@c 0020  
                  __end_of_readUartMessage 14CC                   WriteUartMessage@dataSize 001B  
                               ___ftmul@f1 0069                                 ___ftmul@f2 006C  
                         ?_SWSPI_send_word 0026                               ?_DacSetValue 0087  
                               ___ftsub@f1 0084                                 ___ftsub@f2 0087  
                               ___fttol@f1 0078                            _Make32bitsArray 37C0  
                           __pcstackCOMRAM 0001                               __pidataBANK0 42E6  
                             __pidataBANK1 4284                        ??_SYSTEM_Initialize 001C  
                                ?_TMR0_ISR 0001                        DacReadValue@byteIdx 00D8  
                               ___lltoft@c 0020                        DacReadValue@byteNum 00CD  
                            __end_of_make8 3764                        DacReadValue@readVal 00CE  
                         _DATAEE_WriteByte 3D70                              __end_of_floor 2A94  
                            __end_of_ldexp 2C38                              __end_of_frexp 3210  
    __end_of_IOCB4_DefaultInterruptHandler 42FC     __size_of_IOCB4_DefaultInterruptHandler 0002  
            _IOCB4_DefaultInterruptHandler 42FA                     _SwSpi_Set_Synth_Le_Pin 3BE8  
                     GroupFlashMemory@data 00DA                                 ___lwtoft@c 0020  
              ??_IOCB4_SetInterruptHandler 001A                             ?_SynthLdDetect 0001  
          __end_of_DAC_DEFAULT_INIT_VALUES 0653                       __end_of_EUSART1_Read 3AA8  
                             ??_MEMORY_ISR 0001                  __size_of_StoreIntInEeprom 0038  
                   __size_of_SetMcuRunTime 0044                     ??_EUSART1_Transmit_ISR 0001  
                        __end_of_InitSynth 10E2                             ??_SetMcuSystem 001C  
                       ZeroBitsArray@array 0020                      TMR0_ISR@CountCallBack 0035  
            SwSpi_Set_Synth_Le_Pin@phrType 0019                    GroupFlashMemory@request 00DC  
                       _keepAliveSignalLed 419C                          make8@dataLocation 001C  
              __end_of_EUSART1_Receive_ISR 3F2E                FLASH_WriteBlock@GIEBitValue 002B  
                             GroupDAC@data 00DA                              ?_SetSynthOper 0001  
                                  ??_make8 001D                                    ??_floor 0031  
                         ?_TMR0_StartTimer 0001                                    ??_ldexp 0093  
                                  ??_frexp 001D                  __end_of_SYSTEM_Initialize 419C  
                          _AdcConvert$3539 00B7                             ?_SynthReadData 00C8  
                            _eusart1RxHead 0038                       GetMcuFwVersion@TxMsg 0064  
                            _eusart1TxHead 003A                              _eusart1RxTail 0037  
                               __pbssBANK0 00E0                                 __pbssBANK1 0100  
                            _eusart1TxTail 0039                        ?_keepAliveSignalLed 0001  
                       __size_of_eval_poly 00D6                            __CFG_PLLCFG$OFF 000000  
                               _channelArr 0642                                  ?_GroupDAC 00DA  
                               __pnvCOMRAM 0046                                  ?_GroupAdc 00DA  
           __size_of_InitAdcApplicationMgr 0006                 __end_of_SendSystemStartAck 42A8  
            __end_of_InitAdcApplicationMgr 42E6                        __size_of_EepromRead 000A  
                       __end_of_MEMORY_ISR 42F8                                  ?_ResetMcu 0001  
                       _FlashReadCondition 2130            ??_InitSystemApplicationManagers 0031  
                       __CFG_CCP2MX$PORTC1 000000                                    ?___ftge 0018  
                           FlashReadUart@j 00B9           __end_of_TMR0_SetInterruptHandler 42BC  
                                  ?___lmul 001A                                    ?___wmul 0018  
                               ??_TMR0_ISR 0006                         __CFG_CCP3MX$PORTB5 000000  
                       SetChannelMode@data 002C                       ??_keepAliveSignalLed 0018  
                        __end_of_ZeroArray 4148                                  ?___altoft 0087  
                                  ?_memset 0018                          _ReadIntFromEeprom 200A  
                           ___lmul@product 0022                        ?_FlashReadCondition 0001  
       __size_of_IOCB5_SetInterruptHandler 000A                                  ?___awtoft 0020  
                                ?___ftpack 0018                               GroupAdc@data 00DA  
                         FlashReadUart@idx 00BB                 ?_IOCB5_SetInterruptHandler 0018  
                                ?___lltoft 0020                  __size_of_FLASH_WriteBlock 00BC  
                  __size_of_ADC_Initialize 0016                 FlashSampleWrite@sampleData 002D  
                           _FLASH_ReadByte 421C                                  ?___lwtoft 0020  
             __end_of_CheckFlashPrecentage 2E5C                         ?_ReadIntFromEeprom 00B1  
                                  ?_strtol 0026                           ?_DATAEE_ReadByte 0001  
               GetMcuFwVersion@compileData 0060                            _UpdateSynthFreq 2338  
                          _Timer0_Sampling 00F8               __size_of_keepAliveSignalUart 000C  
                       SynthReadData@TxMsg 0200                    __end_of_GetMcuFwVersion 0A96  
                       SynthReadData@cType 0213                                    _OSCCON2 000FD2  
                           ??_SetSynthOper 0031                                    _TBLPTRH 000FF7  
                                  _TBLPTRL 000FF6                                    _TBLPTRU 000FF8  
                                  _OSCTUNE 000F9B                                    _SPBRGH1 000FB0  
                      ??_ReadIntFromEeprom 00B5                                    _DacInit 28CE  
                    GetIntFromUartData@num 007A                           GetMcuRunTime@idx 006D  
                             ??_AdcConvert 00B1                       ??_FlashReadCondition 0024  
                           _FlashEreaseMem 3972                           _FLASH_EraseBlock 3E0E  
           __size_of_GroupStatusAndVersion 0024                             _SwSpi_Data_Pin 3870  
                _IOCB4_SetInterruptHandler 42C6                       DATAEE_WriteByte@bAdd 0019  
            __end_of_GroupStatusAndVersion 4042                    __end_of_Make32bitsArray 3818  
                               ??_GroupDAC 0031                                 ??_GroupAdc 0031  
                            _SetMcuRunTime 3AA8                         _GetIntFromUartData 1D64  
                       FlashReadUart@TxMsg 006C                      GroupSynthesizers@data 00DA  
                                  __Hparam 0000                              _synthLdRxFlag 00E8  
                               ??_ResetMcu 002C                  __size_of_WriteUartMessage 0036  
                             ?_BlinkOkLeds 0001                              _synthLdTxFlag 00E9  
                                  __Lparam 0000                               _cntRegUpdate 00EA  
                    SendAckMessage@inGroup 0025                           ?_readUartMessage 0001  
                   GroupControlMcu@request 00DD                                  ?_testLeds 0001  
                __end_of_ReadIntFromEeprom 2130                        ?_GetIntFromUartData 0066  
                          __size_of___ftge 0090                            __size_of___lmul 0056  
                                  ___ftadd 1A36                                    ___ftdiv 261E  
                                  ___ftneg 4042                                    ___lldiv 332C  
                          __size_of___wmul 0026                                    ___ftmul 2528  
                                  ___llmod 3582                                    ___ftsub 3AEC  
                                  ___fttol 2430                 FlashSampleWrite@rotateLeft 0062  
                             crc8@dataSize 001A                   __size_of_ClearMcuRunTime 0014  
                                  ___lwmod 3B2E                       AdcConvert@_adcResult 00B3  
                             __psmallconst 0600                            ??_SynthLdDetect 0031  
                               ??___altoft 008B                     __end_of_FLASH_ReadByte 422E  
                          __CFG_STVREN$OFF 000000                 SWSPI_Synth_send_bits@count 0084  
                    _mcuRunTimeIn5SecTicks 00E0                                    _crcCalc 00EE  
                                  _channel 00F5                                    __pcinit 30EE  
                               ??___awtoft 0023                                 ??___ftpack 001D  
                        __end_of_eval_poly 2B6A                            __size_of_memset 002C  
                                  __ramtop 0600                    __size_of_SendAckMessage 0052  
                               ??___lltoft 0024                    __size_of_SetChannelMode 0030  
                                  __ptext0 34A4                                    __ptext1 12D8  
                                  __ptext2 3F5A                                    __ptext3 3DA6  
                                  __ptext4 3C24                                    __ptext5 40CE  
                                  __ptext6 401E                                    __ptext7 3E42  
                                  __ptext8 32A0                                    __ptext9 2338  
                                  crc8@crc 001D                         __end_of_AdcConvert 1A36  
                        DacSetValue@retVal 008E                                 ??___lwtoft 0023  
                                _T0CONbits 000FD5          __end_of_IOCB5_SetInterruptHandler 42C6  
                                _IOCB4_ISR 40AC                                  _IOCB5_ISR 408A  
                        BlinkErrorLeds@idx 001C                            __size_of_strtol 01D6  
                    _OSCILLATOR_Initialize 424C                               __size_of_abs 0028  
                                  _isalpha 3FAA                               __size_of_exp 01F6  
                             __size_of_log 012A                                    _isdigit 40EE  
                             __size_of_pow 0180                         _EUSART1_Initialize 3D04  
                 ??_PIN_MANAGER_Initialize 001A                                    _isspace 3FD2  
                StoreIntInEeprom@numOfByes 0026                                    _isupper 410C  
                                  _request 00F1                            GroupDAC@request 00DC  
                          ??_SynthReadData 0031                       ??_GetIntFromUartData 006E  
                   __end_of_FlashEreaseMem 39C4                 __size_of_SYSTEM_Initialize 001A  
                  ?_SwSpi_Set_Dac_Sync_Pin 0001                     __end_of_SwSpi_Data_Pin 38C6  
                  StoreIntInEeprom@address 0025                                    _toupper 41E0  
                     end_of_initialization 3172                                    exp@sign 009F  
                      ?_EUSART1_Initialize 0001                           ??_BlinkErrorLeds 0018  
                             ?_EepromWrite 001B                      _SWSPI_Synth_send_bits 2CF4  
                __size_of_SwSpi_Set_CE_Pin 003C                             ?_SetMcuRunTime 0001  
                                  memset@c 001A                                    memset@n 001C  
                                  memset@p 001E                              __Lmediumconst 0000  
                          ___lldiv@divisor 001C                       __end_of_SetMcuSystem 42B2  
                                  pow@sign 00AC                            ___lldiv@counter 0024  
                        ?_GroupFlashMemory 00DA                           AdcConvert@adcRes 00BA  
                       __end_of_SYNTH_REGS 0635                       UpdateSynthFreq@cType 0089  
                               ??_testLeds 002C                       SWSPI_send_word@datac 002B  
                               _rxMsgQueue 01C4                                    postdec1 000FE5  
                                  postdec2 000FDD            ??_IOCB5_DefaultInterruptHandler 0001  
                       ??_GroupFlashMemory 0031                                    postinc0 000FEE  
                                  postinc2 000FDE                      __size_of_EUSART1_Read 0044  
                     SynthReadData@byteNum 0221                        _InitRxMessageParams 3F5A  
                              testLeds@idx 002D                    __end_of_UpdateSynthFreq 2430  
                     __size_of_DacSetValue 009E                  __size_of_FlashSampleWrite 00FC  
                   __size_of_GetMcuRunTime 00E4                       ??_EUSART1_Initialize 0018  
    __end_of_InitSystemApplicationManagers 41E0     __size_of_InitSystemApplicationManagers 0016  
            _InitSystemApplicationManagers 41CA                            ?_FLASH_ReadByte 0018  
                                  strtol@a 0061                                    strtol@c 0065  
                                  strtol@s 0026                   _TMR0_SetInterruptHandler 42B2  
                                _PORTDbits 000F83                               ??_EepromRead 0019  
                         _StoreIntInEeprom 3C5C                                 ?_IOCB4_ISR 0001  
                               ?_IOCB5_ISR 0001                           ?_GetMcuFwVersion 0001  
                           ZeroArray@array 0020             __end_of_SwSpi_Set_Dac_Sync_Pin 4182  
                             strtol@endptr 0028              FLASH_WriteBlock@flashWrBufPtr 0021  
                       GetMcuRunTime@TxMsg 0060                       ?_InitRxMessageParams 0001  
                          ?_FlashEreaseMem 0001                        EUSART1_Write@txData 0018  
                          ?_SwSpi_Data_Pin 0018                      __end_of_ZeroBitsArray 4166  
                 __end_of_DATAEE_WriteByte 3DA6                __end_of_SWSPI_DAC_send_bits 3870  
                            ?_DacReadValue 00C8                       DacReadValue@dacIndex 00D0  
                 FLASH_EraseBlock@baseAddr 0018                           ?_Make32bitsArray 0018  
                              ___ftdiv@exp 0067                               _EUSART1_Read 3A64  
                     _CheckFlashPrecentage 2DAE                          FLASH_WriteBlock@i 002C  
                       __end_of_EepromRead 42DA                           DacReadValue@data 00C8  
                              ___ftmul@exp 0072                    ?_SwSpi_Set_Synth_Le_Pin 0018  
                     __end_of_SetSynthOper 342A                 __size_of_ReadIntFromEeprom 0126  
             __end_of_INTERRUPT_Initialize 42F0                             __end_of___ftge 32A0  
                           __end_of___lmul 3972                             __end_of___wmul 401E  
                      GroupControlMcu@data 00DA                              __pidataCOMRAM 42DA  
                        __size_of_TMR0_ISR 00AC                             _ADC_Initialize 41B4  
                         _FLASH_WriteBlock 2C38                     ?_OSCILLATOR_Initialize 0001  
                           __end_of_memset 3F5A                         InitSynth@EepromVal 00C8  
                               floor@expon 0095                          ??_ClearMcuRunTime 0018  
                           __end_of_strtol 1880                        start_initialization 30EE  
                               eval_poly@d 0087                                 eval_poly@n 0089  
                               eval_poly@x 0084                                _SynthRxOper 0044  
                         BlinkOkLeds@state 001B                   __size_of_TMR0_Initialize 0034  
                               ldexp@value 008E                                _SynthTxOper 0045  
          __size_of_PIN_MANAGER_Initialize 0064                                __end_of_abs 3FAA  
                    ??_InitRxMessageParams 0024                                __end_of_exp 12D8  
                              __end_of_log 200A                                __end_of_pow 1D64  
                 AdcConvert@_adcResult_336 00B5                                  _InitSynth 0E6C  
                           ??_DacReadValue 00CA                              _GetMcuRunTime 2706  
                   ?_SWSPI_Synth_send_bits 0022                            ??_SetMcuRunTime 0021  
                    __end_of_EUSART1_Write 3BAC                     __size_of_PLLInitialize 000E  
                               frexp@value 0018                            ___llmod@divisor 001C  
                            _Timer0_OneSec 00F6                      ?_CheckFlashPrecentage 0001  
                          ___llmod@counter 0020                        DATAEE_ReadByte@bAdd 0018  
                 __size_of_PIN_MANAGER_IOC 0010                     __size_of_SwSpi_Clk_Pin 0056  
                      SendAckMessage@TxMsg 0026             __end_of_SwSpi_Set_Synth_Le_Pin 3C24  
                      _keepAliveSignalUart 4290                          __size_of_GroupDAC 0034  
                         _WriteUartMessage 3D3A                          __size_of_GroupAdc 0020  
                   __size_of_FlashReadUart 03D6                                   ??___ftge 001E  
                                 ??___lmul 0022                    SendAckMessage@inRequest 0024  
                                 ??___wmul 001C                  GetIntFromUartData@idxData 0086  
                        __size_of_ResetMcu 000E                       __size_of_BlinkOkLeds 005E  
                   __end_of_ADC_Initialize 41CA                           ?_UpdateSynthFreq 0087  
                              __pdataBANK0 00FA                                __pdataBANK1 01D8  
                  SWSPI_DAC_send_bits@data 001A                                   ??_memset 001E  
                 __size_of_GroupControlMcu 0030                FLASH_EraseBlock@GIEBitValue 001C  
                           _SendAckMessage 39C4                             _SetChannelMode 3E72  
                 __end_of_FLASH_EraseBlock 3E42                         _SendSystemStartAck 429C  
                 __size_of_SWSPI_send_word 009A      __end_of_IOCB5_DefaultInterruptHandler 42FA  
   __size_of_IOCB5_DefaultInterruptHandler 0002              _IOCB5_DefaultInterruptHandler 42F8  
              ??_IOCB5_SetInterruptHandler 001A                                   ??_strtol 002C  
                           _eusart1RxCount 00F4                                ??_IOCB4_ISR 0001  
                              ??_IOCB5_ISR 0001                          __size_of___altoft 007A  
                                _ZeroArray 412A                            DacInit@dacInput 00CA  
                        __size_of___awtoft 0038                          __size_of___ftpack 00AE  
                     ?_keepAliveSignalUart 0001                          __size_of___lltoft 005C  
                              __pbssCOMRAM 0031                          __size_of___lwtoft 0024  
            __size_of_EUSART1_Transmit_ISR 0038                              __pcstackBANK0 0060  
                            __pcstackBANK1 01EA                              __pcstackBANK2 0200  
                             _isalpha$3266 001C                        ?_SendSystemStartAck 0001  
                               ?_InitSynth 0001                               _isdigit$3269 0019  
                           ?_GetMcuRunTime 0001                        DacSetValue@dacIndex 008D  
                           BlinkOkLeds@idx 001C                                   ?_DacInit 0001  
                    __size_of_SetMcuSystem 000A                           _SwSpi_Set_CE_Pin 3BAC  
             __size_of_EUSART1_Receive_ISR 002E              SWSPI_Synth_send_bits@bitArray 0060  
                  _DAC_DEFAULT_INIT_VALUES 064B                       __size_of_EepromWrite 000E  
                    _TMR0_InterruptHandler 01E4                                  __pnvBANK0 00FF  
                                __pnvBANK1 01E4                          SetSynthOper@cType 00CF  
                 __size_of_TMR0_StartTimer 0004                     _PIN_MANAGER_Initialize 35E8  
                     ??_SendSystemStartAck 002C                      _InitAdcApplicationMgr 42E0  
                                __pintcode 0008                     __end_of_SendAckMessage 3A16  
                                __ptext100 261E                                  __ptext101 3C94  
                                __ptext102 3764                                  __ptext111 2F0A  
                                __ptext103 4066                                  __ptext120 3F00  
                                __ptext112 3B2E                                  __ptext104 2E5C  
                                __ptext121 0000                                  __ptext113 422E  
                                __ptext105 223C                                  __ptext114 408A  
                                __ptext106 2C38                                  __ptext115 42F8  
                                __ptext107 3E0E                                  __ptext116 40AC  
                                __ptext108 4276                                  __ptext117 42FA  
                                __ptext109 3EA2                                   ?___ftadd 0078  
                                __ptext118 42F4                                  __ptext119 3CCC  
                                 ?___ftdiv 0029                     __end_of_SetChannelMode 3EA2  
                                 ?___ftneg 0018                                   ?___lldiv 0018  
                                 ?___ftmul 0069                                   ?___llmod 0018  
                                 ?___ftsub 0084                                   ?___fttol 0078  
                         _FlashSampleWrite 223C                                   ?___lwmod 0001  
                          ?_ADC_Initialize 0001                           _Timer0_KeepAlive 00F7  
                        __size_of_testLeds 006A                              _PLLInitialize 425A  
              __size_of_keepAliveSignalLed 0018               ??_INTERRUPT_InterruptManager 0006  
                         __CFG_PRICLKEN$ON 000000                                 ?_ZeroArray 0020  
                              __smallconst 0600                      ??_keepAliveSignalUart 002C  
                                 _BAUDCON1 000FB8                              _SwSpi_Clk_Pin 38C6  
                                 ?_isalpha 0001                                   ?_isdigit 0001  
                                _eval_poly 2A94                        BlinkErrorLeds@state 001B  
                                 ?_isspace 0001                               _SetMcuSystem 42A8  
                        FlashReadUart@data 002C                                   ?_isupper 0001  
                            _FlashReadUart 0A96                             __size_of_make8 005C  
                           __size_of_floor 00E2                             __size_of_ldexp 00CE  
                           __size_of_frexp 0090                   __size_of_DATAEE_ReadByte 0014  
                                 ?_toupper 0001                       _INTERRUPT_Initialize 42EC  
           FLASH_WriteBlock@blockStartAddr 0027                __size_of_FlashReadCondition 010C  
                _IOCB5_SetInterruptHandler 42BC                          ??_TMR0_Initialize 001A  
                   ??_CheckFlashPrecentage 0078                             ___wmul@product 001C  
                                 _IOCBbits 000F62                                   _LATAbits 000F89  
                                 _LATBbits 000F8A                                   _LATCbits 000F8B  
                                 _LATDbits 000F8C                      __size_of_SetSynthOper 007C  
                 __end_of_StoreIntInEeprom 3C94             FlashReadUart@numOfSampleToRead 00BF  
                                 _PIE1bits 000F9D                                   _PIE2bits 000FA0  
                    _GroupStatusAndVersion 401E                          _GroupSynthesizers 32A0  
      __size_of_INTERRUPT_InterruptManager 00D4                 ??_TMR0_SetInterruptHandler 001A  
                     Make32bitsArray@array 0018                                   _PIR1bits 000F9E  
                         ??_FLASH_ReadByte 001C                                   _PIR2bits 000FA1  
                                _rxMsgData 01B0                        UpdateSynthFreq@data 0087  
                                 i2u585_48 40BA                        SWSPI_send_word@data 0026  
                                 i2u587_48 4098                                   i2u589_40 3B48  
                       ?_GroupSynthesizers 00DA                                   _RCONbits 000FD0  
                         __CFG_WDTPS$16384 000000                        SynthReadData@regNum 0220  
                                make8@data 0018                                   _TMR0_ISR 2F0A  
                          ?_SendAckMessage 0024                            ?_SetChannelMode 002C  
                           ?_PLLInitialize 0001                          ??_PIN_MANAGER_IOC 0001  
                     __end_of_DacReadValue 28CE                        ??_GroupSynthesizers 0031  
                   GetIntFromUartData@data 0066                    SWSPI_send_word@dataSize 002A  
                               _ADCON0bits 000FC2                      __end_of_SynthLdDetect 3F00  
                 __size_of_readUartMessage 01F4                          ___wmul@multiplier 0018  
                           ?_SwSpi_Clk_Pin 0018                           ??_FlashEreaseMem 002C  
                       __end_of_channelArr 064B                           ??_SwSpi_Data_Pin 0019  
                __size_of_GroupFlashMemory 0038                                 ?_eval_poly 0084  
                           ?_FlashReadUart 002C                          ??_GroupControlMcu 0031  
                          ??_GetMcuRunTime 0025                      DATAEE_WriteByte@bData 0018  
                             _isspace$3272 0019                                ??_InitSynth 0031  
                        ??_SWSPI_send_word 002B                                 DacInit@idx 00CC  
                             _SetSynthOper 33AE                                 _DAC_ADDRES 0653  
              __size_of_GetIntFromUartData 017C                          ___lmul@multiplier 001A  
                  FlashReadCondition@TxMsg 0028                                _INTCON2bits 000FF1  
                    __end_of_SynthReadData 16AA                                  copy_data0 3102  
                                copy_data1 3122                                  copy_data2 3142  
                    ?_INTERRUPT_Initialize 0001                           __size_of_DacInit 00E4  
                        ?_DATAEE_WriteByte 0018                  __end_of_GroupSynthesizers 332C  
                    EUSART1_Read@readValue 0019                   __end_of_FLASH_WriteBlock 2CF4  
                                 _GroupDAC 3DA6                         ??_DATAEE_WriteByte 0019  
                                 _GroupAdc 40CE                                  frexp@eptr 001B  
                               _EECON1bits 000FA6                                   __Hrparam 0000  
                   ?_InitAdcApplicationMgr 0001                                   _ResetMcu 423E  
                            ??_DacSetValue 0089                                _readAddress 00FA  
                                 __Lrparam 0000               SynthReadData@eepromDataArray 0214  
                        _ADC_GetConversion 3EA2                        FlashReadUart@offset 00BD  
                          _ClearMcuRunTime 4208                          __CFG_P2BMX$PORTD2 000000  
                  ??_OSCILLATOR_Initialize 0018                         ?_ADC_GetConversion 0018  
                        ??_TMR0_StartTimer 0018                           __size_of___ftadd 01AE  
                         __size_of___ftdiv 00E8                       _numOfValidateSamples 0031  
                         __size_of___ftneg 0024                           __size_of___lldiv 0082  
                                 ___altoft 342A                           __size_of___ftmul 00F6  
                         __size_of___llmod 0066                           __size_of___ftsub 0042  
                         __size_of___fttol 00F8                __size_of_EUSART1_Initialize 0036  
                         __size_of___lwmod 0042                            GroupAdc@request 00DC  
                                 ___awtoft 3C94                              crc8@dataArray 0018  
                                 ___ftpack 2E5C                           _numOfReadSamples 003C  
                                 ___lltoft 3764                          _FLASH_IsWriteDone 4276  
                   _IOCB4_InterruptHandler 01E8                        WriteUartMessage@idx 001E  
                                 ___lwtoft 4066                                ??_ZeroArray 0024  
                 GetMcuRunTime@tempRunTime 0069                        ??_ADC_GetConversion 001A  
                                 _exp$3544 009A                               _isupper$3275 0019  
                       ?_FLASH_IsWriteDone 0001                                   _dataSize 00F0  
                    SwSpi_Clk_Pin@cPinMode 0018                   __end_of_WriteUartMessage 3D70  
                         __size_of_isalpha 0028                                   _crcGiven 00ED  
                         __size_of_isdigit 001E                    ??_SWSPI_Synth_send_bits 0026  
                   SwSpi_Data_Pin@cPinMode 0018             ?_IOCB4_DefaultInterruptHandler 0001  
                         __size_of_isspace 0026                                   __ptext10 14CC  
                                 __ptext11 33AE                                   __ptext20 2FB6  
                                 __ptext12 2706                                   __ptext21 1D64  
                                 __ptext13 332C                                   __ptext30 423E  
                                 __ptext22 16AA                                   __ptext14 06A6  
                                 __ptext31 3E72                                   __ptext23 41E0  
                                 __ptext15 0A96                                   __ptext40 42B2  
                                 __ptext32 3A64                                   __ptext24 3FD2  
                                 __ptext16 3F82                                   __ptext41 35E8  
                                 __ptext33 4290                                   __ptext25 40EE  
                                 __ptext17 421C                                   __ptext50 429C  
                                 __ptext42 42BC                                   __ptext34 419C  
                                 __ptext26 3FAA                                   __ptext18 2130  
                                 __ptext51 39C4                                   __ptext43 42C6  
                                 __ptext35 3ED2                                   __ptext27 410C  
                                 __ptext19 3972                                   __ptext60 3BAC  
                                 __ptext52 3A16                                   __ptext44 424C  
                                 __ptext36 364C                                   __ptext28 27EA  
                                 __ptext61 42E0                                   __ptext53 412A  
                                 __ptext45 42EC                                   __ptext37 42A8  
                                 __ptext29 3518                                   __ptext70 2CF4  
                                 __ptext62 28CE                                   __ptext54 3D3A  
                                 __ptext46 3D04                                   __ptext38 4182  
                                 __ptext71 4148                                   __ptext63 3C5C  
                                 __ptext55 3B70                                   __ptext47 41B4  
                                 __ptext39 3DDA                                   __ptext80 41F4  
                                 __ptext72 3F2E                                   __ptext64 4268  
                                 __ptext56 41CA                                   __ptext48 3AA8  
                                 __ptext81 4208                                   __ptext73 37C0  
                                 __ptext65 3D70                                   __ptext57 42F0  
                                 __ptext49 3582                                   __ptext90 3180  
                                 __ptext82 2DAE                                   __ptext74 3818  
                                 __ptext66 3054                                   __ptext58 425A  
                                 __ptext91 2430                                   __ptext83 36AA  
                                 __ptext75 3870                                   __ptext67 3708  
                                 __ptext59 0E6C                                   __ptext92 3210  
                                 __ptext84 1880                                   __ptext76 38C6  
                                 __ptext68 3BE8                                   __ptext93 342A  
                                 __ptext85 1BE4                                   __ptext77 200A  
                                 __ptext69 4166                                   __ptext94 2A94  
                                 __ptext86 1EE0                                   __ptext78 391C  
                                 __ptext95 3FF8                                   __ptext87 10E2  
                                 __ptext79 42D0                                   __ptext96 2528  
                                 __ptext88 2B6A                                   __ptext97 3AEC  
                                 __ptext89 29B2                                   __ptext98 1A36  
                                 __ptext99 4042                           __size_of_isupper 001E  
             SWSPI_Synth_send_bits@phrType 0085                   SwSpi_Set_CE_Pin@cPinMode 0018  
                                 _pow$3542 00A6                                   _pow$3543 00A9  
                      ??_FLASH_IsWriteDone 0018                DATAEE_WriteByte@GIEBitValue 001A  
                         __size_of_toupper 0014                   __size_of_GetMcuFwVersion 03F0  
                     _GetMcuFwVersion$2643 0078                       _GetMcuFwVersion$2639 0076  
                            __size_of_crc8 004E                              __size_of_main 0074  
                   ?_GroupStatusAndVersion 00DA                       __end_of_SYNTH_ADDRES 0642  
                                 _msgCount 00EC               _TMR0_DefaultInterruptHandler 000000  
                        ??_DATAEE_ReadByte 0018                  __end_of_ADC_GetConversion 3ED2  
             __size_of_SWSPI_DAC_send_bits 0058                        Make32bitsArray@data 001A  
                       SWSPI_send_word@idx 002C                                _groupsArray 01D8  
                          ??_PLLInitialize 0031                                   _testLeds 3518  
                  __size_of_BlinkErrorLeds 005E                                   int$flags 0048  
                 __size_of_Make32bitsArray 0058                                 strtol@base 002A  
                               strtol@sign 0060                  __end_of_FLASH_IsWriteDone 4284  
       __end_of_INTERRUPT_InterruptManager 00DC                 _INTERRUPT_InterruptManager 0008  
                   __size_of_ZeroBitsArray 001E                            EepromWrite@data 001B  
                          ??_SwSpi_Clk_Pin 0019                        __end_of_DacSetValue 3054  
                      _EUSART1_Receive_ISR 3F00                   __end_of_SwSpi_Set_CE_Pin 3BE8  
                        ?_FLASH_EraseBlock 0018                __end_of_InitRxMessageParams 3F82  
                                 exp@coeff 0657                                 _MEMORY_ISR 42F4  
                          ??_FlashReadUart 0060                                   log@coeff 0675  
                   SWSPI_send_word@phrType 002E                         ??_FLASH_EraseBlock 001C  
                               _INTCONbits 000FF2                                ??_eval_poly 002F  
                              _sampleArray 0170                                _sampleCount 00E4  
                                 isalpha@c 001D                                   isdigit@c 001A  
                   ??_INTERRUPT_Initialize 0018                                   memset@p1 0018  
                        ??_readUartMessage 01EA                   __end_of_FlashSampleWrite 2338  
                                 intlevel2 0000                       ?_EUSART1_Receive_ISR 0001  
                    __end_of_SetMcuRunTime 3AEC                           ___lwmod@dividend 0001  
               __size_of_GroupSynthesizers 008C                                   isspace@c 001A  
                    SynthReadData@data_947 0212                           ___lldiv@dividend 0018  
                  ?_PIN_MANAGER_Initialize 0001                    __end_of_ClearMcuRunTime 421C  
                               _RCSTA1bits 000FAB                                   isupper@c 001A  
                 ReadIntFromEeprom@address 00C2               __end_of_EUSART1_Transmit_ISR 3D04  
                            ??_BlinkOkLeds 0018                           ??_ADC_Initialize 0018  
                    __size_of_DacReadValue 00E4                         Make32bitsArray@idx 0020  
                            AdcConvert@idx 00BC                              _isReWriteDone 00EB  
                    UpdateSynthFreq@retVal 008A                       SwSpi_Clk_Pin@phrType 0019  
                    SwSpi_Data_Pin@phrType 0019                    SwSpi_Set_CE_Pin@phrType 0019  
                   __size_of_EUSART1_Write 003C                   ??_SwSpi_Set_Dac_Sync_Pin 0018  
                        EepromRead@address 0019                           ___lldiv@quotient 0020  
                         _GroupFlashMemory 3C24                            ___lwmod@divisor 0003  
                          _TMR0_Initialize 3DDA                            ___lwmod@counter 0005  
                 __size_of_UpdateSynthFreq 00F8                                   toupper@c 0018  
               ReadIntFromEeprom@numOfByes 00B1                          __CFG_T3CMX$PORTC0 000000  
                  ReadIntFromEeprom@retVal 00C3                              ??_EepromWrite 001C  
                            _ZeroBitsArray 4148                                 _AdcConvert 1880  
                    ??_EUSART1_Receive_ISR 0001             __end_of_PIN_MANAGER_Initialize 364C  
                             _DacReadValue 27EA               GetIntFromUartData@dataRegArr 0070  
                        __CFG_FOSC$INTIO67 000000                     _IOCB5_InterruptHandler 01E6  
                          _PIN_MANAGER_IOC 422E                          ?_StoreIntInEeprom 0021  
                         ??_SendAckMessage 0025                 __size_of_ADC_GetConversion 0030  
                         ??_SetChannelMode 002E                         ??_StoreIntInEeprom 0028  
                              _DacSetValue 2FB6  



Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Mar 11 14:17:12 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1,group=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1,group=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1,group=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1
   129                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   130                           	psect	text111,global,reloc=2,class=CODE,delta=1
   131                           	psect	text112,global,reloc=2,class=CODE,delta=1,group=1
   132                           	psect	text113,global,reloc=2,class=CODE,delta=1
   133                           	psect	text114,global,reloc=2,class=CODE,delta=1
   134                           	psect	text115,global,reloc=2,class=CODE,delta=1
   135                           	psect	text116,global,reloc=2,class=CODE,delta=1
   136                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   137                           	psect	text117,global,reloc=2,class=CODE,delta=1
   138                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   139                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   140  0000                     
   141                           ; Version 1.45
   142                           ; Generated 16/11/2017 GMT
   143                           ; 
   144                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   145                           ; All rights reserved.
   146                           ; 
   147                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   148                           ; 
   149                           ; Redistribution and use in source and binary forms, with or without modification, are
   150                           ; permitted provided that the following conditions are met:
   151                           ; 
   152                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   153                           ;        conditions and the following disclaimer.
   154                           ; 
   155                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   156                           ;        of conditions and the following disclaimer in the documentation and/or other
   157                           ;        materials provided with the distribution.
   158                           ; 
   159                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   160                           ;        software without specific prior written permission.
   161                           ; 
   162                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   163                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   164                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   165                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   166                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   167                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   168                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   169                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   170                           ; 
   171                           ; 
   172                           ; Code-generator required, PIC18F45K22 Definitions
   173                           ; 
   174                           ; SFR Addresses
   175  0000                     
   176 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   177  0000                     
   178                           	psect	idataCOMRAM
   179  003908                     __pidataCOMRAM:
   180                           	opt stack 0
   181                           
   182                           ;initializer for _writeAddress
   183  003908  4000               	dw	16384
   184  00390A  0000               	dw	0
   185                           
   186                           	psect	idataBANK0
   187  003858                     __pidataBANK0:
   188                           	opt stack 0
   189                           
   190                           ;initializer for _groupsArray
   191  003858  0C                 	db	low _GroupControlMcu
   192  003859  32                 	db	high _GroupControlMcu
   193  00385A  AC                 	db	low _GroupStatusAndVersion
   194  00385B  2C                 	db	high _GroupStatusAndVersion
   195  00385C  A8                 	db	low _GroupAdc
   196  00385D  2F                 	db	high _GroupAdc
   197  00385E  98                 	db	low _GroupSynthesizers
   198  00385F  2B                 	db	high _GroupSynthesizers
   199  003860  38                 	db	low _GroupFlashMemory
   200  003861  30                 	db	high _GroupFlashMemory
   201  003862  F4                 	db	low _GroupDAC
   202  003863  36                 	db	high _GroupDAC
   203                           
   204                           ;initializer for _readAddress
   205  003864  4000               	dw	16384
   206  003866  0000               	dw	0
   207                           
   208                           	psect	smallconst
   209  000600                     __psmallconst:
   210                           	opt stack 0
   211  000600  00                 	db	0
   212  000601                     _TEST_PLL_REGISTERS:
   213                           	opt stack 0
   214  000601  041C               	dw	1052
   215  000603  0001               	dw	1
   216  000605  300B               	dw	12299
   217  000607  0061               	dw	97
   218  000609  26BA               	dw	9914
   219  00060B  00C0               	dw	192
   220  00060D  FCC9               	dw	64713
   221  00060F  1A19               	dw	6681
   222  000611  0428               	dw	1064
   223  000613  102D               	dw	4141
   224  000615  00E7               	dw	231
   225  000617  1200               	dw	4608
   226  000619  6076               	dw	24694
   227  00061B  3505               	dw	13573
   228  00061D  0025               	dw	37
   229  00061F  0080               	dw	128
   230  000621  8B84               	dw	35716
   231  000623  3200               	dw	12800
   232  000625  0003               	dw	3
   233  000627  0000               	dw	0
   234  000629  0032               	dw	50
   235  00062B  0008               	dw	8
   236  00062D  AAA1               	dw	43681
   237  00062F  01AA               	dw	426
   238  000631  0EDA               	dw	3802
   239  000633  0003               	dw	3
   240  000635                     __end_of_TEST_PLL_REGISTERS:
   241                           	opt stack 0
   242  000635                     _PLL_INIT_REGISTERS:
   243                           	opt stack 0
   244  000635  041C               	dw	1052
   245  000637  0001               	dw	1
   246  000639  300B               	dw	12299
   247  00063B  0061               	dw	97
   248  00063D  323A               	dw	12858
   249  00063F  00C0               	dw	192
   250  000641  BCC9               	dw	48329
   251  000643  2221               	dw	8737
   252  000645  0428               	dw	1064
   253  000647  102D               	dw	4141
   254  000649  00E7               	dw	231
   255  00064B  1200               	dw	4608
   256  00064D  2076               	dw	8310
   257  00064F  3501               	dw	13569
   258  000651  0025               	dw	37
   259  000653  0080               	dw	128
   260  000655  9B84               	dw	39812
   261  000657  3400               	dw	13312
   262  000659  0003               	dw	3
   263  00065B  0000               	dw	0
   264  00065D  0012               	dw	18
   265  00065F  0000               	dw	0
   266  000661  0001               	dw	1
   267  000663  0600               	dw	1536
   268  000665  0340               	dw	832
   269  000667  0020               	dw	32
   270  000669                     __end_of_PLL_INIT_REGISTERS:
   271                           	opt stack 0
   272  000669                     _channelArr:
   273                           	opt stack 0
   274  000669  07                 	db	7
   275  00066A  06                 	db	6
   276  00066B  05                 	db	5
   277  00066C  04                 	db	4
   278  00066D  19                 	db	25
   279  00066E  0A                 	db	10
   280  00066F  0D                 	db	13
   281  000670                     __end_of_channelArr:
   282                           	opt stack 0
   283  000670                     exp@coeff:
   284                           	opt stack 0
   285  000670  00                 	db	0
   286  000671  80                 	db	128
   287  000672  3F                 	db	63
   288  000673  72                 	db	114
   289  000674  31                 	db	49
   290  000675  3F                 	db	63
   291  000676  FE                 	db	254
   292  000677  75                 	db	117
   293  000678  3E                 	db	62
   294  000679  58                 	db	88
   295  00067A  63                 	db	99
   296  00067B  3D                 	db	61
   297  00067C  95                 	db	149
   298  00067D  1D                 	db	29
   299  00067E  3C                 	db	60
   300  00067F  C5                 	db	197
   301  000680  AE                 	db	174
   302  000681  3A                 	db	58
   303  000682  79                 	db	121
   304  000683  21                 	db	33
   305  000684  39                 	db	57
   306  000685  94                 	db	148
   307  000686  80                 	db	128
   308  000687  37                 	db	55
   309  000688  93                 	db	147
   310  000689  A7                 	db	167
   311  00068A  35                 	db	53
   312  00068B  56                 	db	86
   313  00068C  15                 	db	21
   314  00068D  34                 	db	52
   315  00068E                     __end_ofexp@coeff:
   316                           	opt stack 0
   317  00068E                     log@coeff:
   318                           	opt stack 0
   319  00068E  00                 	db	0
   320  00068F  00                 	db	0
   321  000690  00                 	db	0
   322  000691  00                 	db	0
   323  000692  80                 	db	128
   324  000693  3F                 	db	63
   325  000694  F0                 	db	240
   326  000695  FF                 	db	255
   327  000696  BE                 	db	190
   328  000697  E2                 	db	226
   329  000698  A9                 	db	169
   330  000699  3E                 	db	62
   331  00069A  83                 	db	131
   332  00069B  76                 	db	118
   333  00069C  BE                 	db	190
   334  00069D  AE                 	db	174
   335  00069E  2B                 	db	43
   336  00069F  3E                 	db	62
   337  0006A0  3C                 	db	60
   338  0006A1  C3                 	db	195
   339  0006A2  BD                 	db	189
   340  0006A3  D2                 	db	210
   341  0006A4  13                 	db	19
   342  0006A5  3D                 	db	61
   343  0006A6  78                 	db	120
   344  0006A7  D3                 	db	211
   345  0006A8  BB                 	db	187
   346  0006A9                     __end_oflog@coeff:
   347                           	opt stack 0
   348  0006A9  00                 	db	0	; dummy byte at the end
   349  0000                     
   350                           	psect	nvCOMRAM
   351  000046                     __pnvCOMRAM:
   352                           	opt stack 0
   353  000046                     _timer0ReloadVal:
   354                           	opt stack 0
   355  000046                     	ds	2
   356                           
   357                           	psect	nvBANK0
   358  0000FB                     __pnvBANK0:
   359                           	opt stack 0
   360  0000FB                     _TMR0_InterruptHandler:
   361                           	opt stack 0
   362  0000FB                     	ds	2
   363  0000FD                     _cnt:
   364                           	opt stack 0
   365  0000FD                     	ds	2
   366  0000FF                     _eusart1TxBufferRemaining:
   367                           	opt stack 0
   368  0000FF                     	ds	1
   369  0000                     _ANSELE	set	3900
   370  0000                     _ANSELB	set	3897
   371  0000                     _ANSELC	set	3898
   372  0000                     _ANSELD	set	3899
   373  0000                     _ANSELA	set	3896
   374  0000                     _ADCON0bits	set	4034
   375  0000                     _ADRESH	set	4036
   376  0000                     _ADRESL	set	4035
   377  0000                     _ADCON2	set	4032
   378  0000                     _ADCON1	set	4033
   379  0000                     _ADCON0	set	4034
   380  0000                     _T0CONbits	set	4053
   381  0000                     _T0CON	set	4053
   382  0000                     _TMR0L	set	4054
   383  0000                     _TMR0H	set	4055
   384  0000                     _EEDATA	set	4008
   385  0000                     _EEADR	set	4009
   386  0000                     _EECON2	set	4007
   387  0000                     _EECON1bits	set	4006
   388  0000                     _TABLAT	set	4085
   389  0000                     _TBLPTRL	set	4086
   390  0000                     _TBLPTRH	set	4087
   391  0000                     _TBLPTRU	set	4088
   392  0000                     _INTCON2bits	set	4081
   393  0000                     _WPUB	set	3937
   394  0000                     _TRISC	set	3988
   395  0000                     _TRISB	set	3987
   396  0000                     _TRISE	set	3990
   397  0000                     _LATC	set	3979
   398  0000                     _LATB	set	3978
   399  0000                     _LATE	set	3981
   400  0000                     _RCREG1	set	4014
   401  0000                     _RCSTA1bits	set	4011
   402  0000                     _TXREG1	set	4013
   403  0000                     _SPBRGH1	set	4016
   404  0000                     _SPBRG1	set	4015
   405  0000                     _TXSTA1	set	4012
   406  0000                     _RCSTA1	set	4011
   407  0000                     _BAUDCON1	set	4024
   408  0000                     _PIR1bits	set	3998
   409  0000                     _PIE1bits	set	3997
   410  0000                     _PIR2bits	set	4001
   411  0000                     _PIE2bits	set	4000
   412  0000                     _RCONbits	set	4048
   413  0000                     _OSCTUNE	set	3995
   414  0000                     _OSCCON2	set	4050
   415  0000                     _OSCCON	set	4051
   416  0000                     _LATAbits	set	3977
   417  0000                     _LATDbits	set	3980
   418  0000                     _INTCONbits	set	4082
   419  0000                     _IOCB	set	3938
   420  0000                     _PORTD	set	3971
   421  0000                     _LATD	set	3980
   422  0000                     _TRISD	set	3989
   423  0000                     _LATA	set	3977
   424  0000                     _TRISA	set	3986
   425  0000                     _LATCbits	set	3979
   426  0000                     _LATBbits	set	3978
   427                           
   428                           ; #config settings
   429  0000                     
   430                           	psect	cinit
   431  0028CE                     __pcinit:
   432                           	opt stack 0
   433  0028CE                     start_initialization:
   434                           	opt stack 0
   435  0028CE                     __initialization:
   436                           	opt stack 0
   437                           
   438                           ; Initialize objects allocated to BANK0 (16 bytes)
   439                           ; load TBLPTR registers with __pidataBANK0
   440  0028CE  0E58               	movlw	low __pidataBANK0
   441  0028D0  6EF6               	movwf	tblptrl,c
   442  0028D2  0E38               	movlw	high __pidataBANK0
   443  0028D4  6EF7               	movwf	tblptrh,c
   444  0028D6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   445  0028D8  6EF8               	movwf	tblptru,c
   446  0028DA  EE00  F0EB         	lfsr	0,__pdataBANK0
   447  0028DE  EE10 F010          	lfsr	1,16
   448  0028E2                     copy_data0:
   449  0028E2  0009               	tblrd		*+
   450  0028E4  CFF5 FFEE          	movff	tablat,postinc0
   451  0028E8  50E5               	movf	postdec1,w,c
   452  0028EA  50E1               	movf	fsr1l,w,c
   453  0028EC  E1FA               	bnz	copy_data0
   454                           
   455                           ; Initialize objects allocated to COMRAM (4 bytes)
   456                           ; load TBLPTR registers with __pidataCOMRAM
   457  0028EE  0E08               	movlw	low __pidataCOMRAM
   458  0028F0  6EF6               	movwf	tblptrl,c
   459  0028F2  0E39               	movlw	high __pidataCOMRAM
   460  0028F4  6EF7               	movwf	tblptrh,c
   461  0028F6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   462  0028F8  6EF8               	movwf	tblptru,c
   463  0028FA  EE00  F042         	lfsr	0,__pdataCOMRAM
   464  0028FE  EE10 F004          	lfsr	1,4
   465  002902                     copy_data1:
   466  002902  0009               	tblrd		*+
   467  002904  CFF5 FFEE          	movff	tablat,postinc0
   468  002908  50E5               	movf	postdec1,w,c
   469  00290A  50E1               	movf	fsr1l,w,c
   470  00290C  E1FA               	bnz	copy_data1
   471                           
   472                           ; Clear objects allocated to BANK1 (194 bytes)
   473  00290E  EE01  F000         	lfsr	0,__pbssBANK1
   474  002912  0EC2               	movlw	194
   475  002914                     clear_0:
   476  002914  6AEE               	clrf	postinc0,c
   477  002916  06E8               	decf	wreg,f,c
   478  002918  E1FD               	bnz	clear_0
   479                           
   480                           ; Clear objects allocated to BANK0 (43 bytes)
   481  00291A  EE00  F0C0         	lfsr	0,__pbssBANK0
   482  00291E  0E2B               	movlw	43
   483  002920                     clear_1:
   484  002920  6AEE               	clrf	postinc0,c
   485  002922  06E8               	decf	wreg,f,c
   486  002924  E1FD               	bnz	clear_1
   487                           
   488                           ; Clear objects allocated to COMRAM (17 bytes)
   489  002926  EE00  F031         	lfsr	0,__pbssCOMRAM
   490  00292A  0E11               	movlw	17
   491  00292C                     clear_2:
   492  00292C  6AEE               	clrf	postinc0,c
   493  00292E  06E8               	decf	wreg,f,c
   494  002930  E1FD               	bnz	clear_2
   495  002932                     end_of_initialization:
   496                           	opt stack 0
   497  002932                     __end_of__initialization:
   498                           	opt stack 0
   499  002932  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   500  002934  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   501  002936  0E00               	movlw	low (__Lmediumconst shr (0+16))
   502  002938  6EF8               	movwf	tblptru,c
   503  00293A  0100               	movlb	0
   504  00293C  EF3D  F015         	goto	_main	;jump to C main() function
   505                           tblptru	equ	0xFF8
   506                           tblptrh	equ	0xFF7
   507                           tblptrl	equ	0xFF6
   508                           tablat	equ	0xFF5
   509                           postinc0	equ	0xFEE
   510                           wreg	equ	0xFE8
   511                           postdec1	equ	0xFE5
   512                           fsr1l	equ	0xFE1
   513                           
   514                           	psect	bssCOMRAM
   515  000031                     __pbssCOMRAM:
   516                           	opt stack 0
   517  000031                     _numOfValidateSamples:
   518                           	opt stack 0
   519  000031                     	ds	4
   520  000035                     TMR0_ISR@CountCallBack:
   521                           	opt stack 0
   522  000035                     	ds	2
   523  000037                     _eusart1RxTail:
   524                           	opt stack 0
   525  000037                     	ds	1
   526  000038                     _eusart1RxHead:
   527                           	opt stack 0
   528  000038                     	ds	1
   529  000039                     _eusart1TxTail:
   530                           	opt stack 0
   531  000039                     	ds	1
   532  00003A                     _eusart1TxHead:
   533                           	opt stack 0
   534  00003A                     	ds	1
   535  00003B                     _isReWriteDone:
   536                           	opt stack 0
   537  00003B                     	ds	1
   538  00003C                     _adcSampleMode:
   539                           	opt stack 0
   540  00003C                     	ds	1
   541  00003D                     _conversionFormat:
   542                           	opt stack 0
   543  00003D                     	ds	1
   544  00003E                     _numOfReadSamples:
   545                           	opt stack 0
   546  00003E                     	ds	4
   547                           tblptru	equ	0xFF8
   548                           tblptrh	equ	0xFF7
   549                           tblptrl	equ	0xFF6
   550                           tablat	equ	0xFF5
   551                           postinc0	equ	0xFEE
   552                           wreg	equ	0xFE8
   553                           postdec1	equ	0xFE5
   554                           fsr1l	equ	0xFE1
   555                           
   556                           	psect	dataCOMRAM
   557  000042                     __pdataCOMRAM:
   558                           	opt stack 0
   559  000042                     _writeAddress:
   560                           	opt stack 0
   561  000042                     	ds	4
   562                           tblptru	equ	0xFF8
   563                           tblptrh	equ	0xFF7
   564                           tblptrl	equ	0xFF6
   565                           tablat	equ	0xFF5
   566                           postinc0	equ	0xFEE
   567                           wreg	equ	0xFE8
   568                           postdec1	equ	0xFE5
   569                           fsr1l	equ	0xFE1
   570                           
   571                           	psect	bssBANK0
   572  0000C0                     __pbssBANK0:
   573                           	opt stack 0
   574  0000C0                     _mcuRunTimeIn5SecTicks:
   575                           	opt stack 0
   576  0000C0                     	ds	4
   577  0000C4                     _errno:
   578                           	opt stack 0
   579  0000C4                     	ds	2
   580  0000C6                     _sampleCount:
   581                           	opt stack 0
   582  0000C6                     	ds	2
   583  0000C8                     _count:
   584                           	opt stack 0
   585  0000C8                     	ds	2
   586  0000CA                     _msgCount:
   587                           	opt stack 0
   588  0000CA                     	ds	1
   589  0000CB                     _crcGiven:
   590                           	opt stack 0
   591  0000CB                     	ds	1
   592  0000CC                     _crcCalc:
   593                           	opt stack 0
   594  0000CC                     	ds	1
   595  0000CD                     _data:
   596                           	opt stack 0
   597  0000CD                     	ds	1
   598  0000CE                     _dataSize:
   599                           	opt stack 0
   600  0000CE                     	ds	1
   601  0000CF                     _request:
   602                           	opt stack 0
   603  0000CF                     	ds	1
   604  0000D0                     _group:
   605                           	opt stack 0
   606  0000D0                     	ds	1
   607  0000D1                     _cState:
   608                           	opt stack 0
   609  0000D1                     	ds	1
   610  0000D2                     _eusart1RxCount:
   611                           	opt stack 0
   612  0000D2                     	ds	1
   613  0000D3                     _channel:
   614                           	opt stack 0
   615  0000D3                     	ds	1
   616  0000D4                     _TimerKeepAliveFlag:
   617                           	opt stack 0
   618  0000D4                     	ds	1
   619  0000D5                     _TimerSamplingFlag:
   620                           	opt stack 0
   621  0000D5                     	ds	1
   622  0000D6                     _TimerOneSecFlag:
   623                           	opt stack 0
   624  0000D6                     	ds	1
   625  0000D7                     _rxMsgQueue:
   626                           	opt stack 0
   627  0000D7                     	ds	20
   628                           tblptru	equ	0xFF8
   629                           tblptrh	equ	0xFF7
   630                           tblptrl	equ	0xFF6
   631                           tablat	equ	0xFF5
   632                           postinc0	equ	0xFEE
   633                           wreg	equ	0xFE8
   634                           postdec1	equ	0xFE5
   635                           fsr1l	equ	0xFE1
   636                           
   637                           	psect	dataBANK0
   638  0000EB                     __pdataBANK0:
   639                           	opt stack 0
   640  0000EB                     _groupsArray:
   641                           	opt stack 0
   642  0000EB                     	ds	12
   643  0000F7                     _readAddress:
   644                           	opt stack 0
   645  0000F7                     	ds	4
   646                           tblptru	equ	0xFF8
   647                           tblptrh	equ	0xFF7
   648                           tblptrl	equ	0xFF6
   649                           tablat	equ	0xFF5
   650                           postinc0	equ	0xFEE
   651                           wreg	equ	0xFE8
   652                           postdec1	equ	0xFE5
   653                           fsr1l	equ	0xFE1
   654                           
   655                           	psect	bssBANK1
   656  000100                     __pbssBANK1:
   657                           	opt stack 0
   658  000100                     _eusart1TxBuffer:
   659                           	opt stack 0
   660  000100                     	ds	70
   661  000146                     _eusart1RxBuffer:
   662                           	opt stack 0
   663  000146                     	ds	40
   664  00016E                     _sampleArray:
   665                           	opt stack 0
   666  00016E                     	ds	64
   667  0001AE                     _rxMsgData:
   668                           	opt stack 0
   669  0001AE                     	ds	20
   670                           tblptru	equ	0xFF8
   671                           tblptrh	equ	0xFF7
   672                           tblptrl	equ	0xFF6
   673                           tablat	equ	0xFF5
   674                           postinc0	equ	0xFEE
   675                           wreg	equ	0xFE8
   676                           postdec1	equ	0xFE5
   677                           fsr1l	equ	0xFE1
   678                           
   679                           	psect	cstackBANK1
   680  0001C2                     __pcstackBANK1:
   681                           	opt stack 0
   682  0001C2                     GroupStatusAndVersion@data:
   683                           	opt stack 0
   684  0001C2                     GroupAdc@data:
   685                           	opt stack 0
   686  0001C2                     GroupSynthesizers@data:
   687                           	opt stack 0
   688  0001C2                     GroupFlashMemory@data:
   689                           	opt stack 0
   690  0001C2                     GroupDAC@data:
   691                           	opt stack 0
   692  0001C2                     
   693                           ; 3 bytes @ 0x0
   694  0001C2                     	ds	2
   695  0001C4                     GroupFlashMemory@request:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x2
   699  0001C4                     	ds	1
   700  0001C5                     ??_readUartMessage:
   701                           
   702                           ; 1 bytes @ 0x3
   703  0001C5                     	ds	4
   704  0001C9                     readUartMessage@idx:
   705                           	opt stack 0
   706                           
   707                           ; 2 bytes @ 0x7
   708  0001C9                     	ds	2
   709  0001CB                     readUartMessage@chRec:
   710                           	opt stack 0
   711                           
   712                           ; 1 bytes @ 0x9
   713  0001CB                     	ds	1
   714                           tblptru	equ	0xFF8
   715                           tblptrh	equ	0xFF7
   716                           tblptrl	equ	0xFF6
   717                           tablat	equ	0xFF5
   718                           postinc0	equ	0xFEE
   719                           wreg	equ	0xFE8
   720                           postdec1	equ	0xFE5
   721                           fsr1l	equ	0xFE1
   722                           
   723                           	psect	cstackBANK0
   724  000060                     __pcstackBANK0:
   725                           	opt stack 0
   726  000060                     ??_FlashSampleWrite:
   727  000060                     ??___ftdiv:
   728  000060                     ??_FlashReadUart:
   729  000060                     strtol@sign:
   730                           	opt stack 0
   731  000060                     GetMcuRunTime@TxMsg:
   732                           	opt stack 0
   733  000060                     SWSPI_Synth_send_bits@bitArray:
   734                           	opt stack 0
   735                           
   736                           ; 32 bytes @ 0x0
   737  000060                     	ds	1
   738  000061                     strtol@a:
   739                           	opt stack 0
   740                           
   741                           ; 4 bytes @ 0x1
   742  000061                     	ds	1
   743  000062                     FlashSampleWrite@rotateLeft:
   744                           	opt stack 0
   745                           
   746                           ; 2 bytes @ 0x2
   747  000062                     	ds	1
   748  000063                     ___ftdiv@cntr:
   749                           	opt stack 0
   750                           
   751                           ; 1 bytes @ 0x3
   752  000063                     	ds	1
   753  000064                     ___ftdiv@f3:
   754                           	opt stack 0
   755                           
   756                           ; 3 bytes @ 0x4
   757  000064                     	ds	1
   758  000065                     strtol@c:
   759                           	opt stack 0
   760                           
   761                           ; 1 bytes @ 0x5
   762  000065                     	ds	1
   763  000066                     ?_GetIntFromUartData:
   764                           	opt stack 0
   765  000066                     GetIntFromUartData@data:
   766                           	opt stack 0
   767                           
   768                           ; 2 bytes @ 0x6
   769  000066                     	ds	1
   770  000067                     ___ftdiv@exp:
   771                           	opt stack 0
   772                           
   773                           ; 1 bytes @ 0x7
   774  000067                     	ds	1
   775  000068                     ___ftdiv@sign:
   776                           	opt stack 0
   777                           
   778                           ; 1 bytes @ 0x8
   779  000068                     	ds	1
   780  000069                     ?___ftmul:
   781                           	opt stack 0
   782  000069                     ___ftmul@f1:
   783                           	opt stack 0
   784  000069                     GetMcuRunTime@tempRunTime:
   785                           	opt stack 0
   786                           
   787                           ; 4 bytes @ 0x9
   788  000069                     	ds	1
   789  00006A                     GetIntFromUartData@t:
   790                           	opt stack 0
   791                           
   792                           ; 4 bytes @ 0xA
   793  00006A                     	ds	2
   794  00006C                     ___ftmul@f2:
   795                           	opt stack 0
   796  00006C                     FlashReadUart@TxMsg:
   797                           	opt stack 0
   798                           
   799                           ; 69 bytes @ 0xC
   800  00006C                     	ds	1
   801  00006D                     GetMcuRunTime@idx:
   802                           	opt stack 0
   803                           
   804                           ; 2 bytes @ 0xD
   805  00006D                     	ds	1
   806  00006E                     GetIntFromUartData@dataRegArr:
   807                           	opt stack 0
   808                           
   809                           ; 9 bytes @ 0xE
   810  00006E                     	ds	1
   811  00006F                     ??___ftmul:
   812                           
   813                           ; 1 bytes @ 0xF
   814  00006F                     	ds	3
   815  000072                     ___ftmul@exp:
   816                           	opt stack 0
   817                           
   818                           ; 1 bytes @ 0x12
   819  000072                     	ds	1
   820  000073                     ___ftmul@f3_as_product:
   821                           	opt stack 0
   822                           
   823                           ; 3 bytes @ 0x13
   824  000073                     	ds	3
   825  000076                     ___ftmul@cntr:
   826                           	opt stack 0
   827                           
   828                           ; 1 bytes @ 0x16
   829  000076                     	ds	1
   830  000077                     GetIntFromUartData@c:
   831                           	opt stack 0
   832  000077                     ___ftmul@sign:
   833                           	opt stack 0
   834                           
   835                           ; 1 bytes @ 0x17
   836  000077                     	ds	1
   837  000078                     ??_CheckFlashPrecentage:
   838  000078                     ?___ftadd:
   839                           	opt stack 0
   840  000078                     ?___fttol:
   841                           	opt stack 0
   842  000078                     GetIntFromUartData@idx:
   843                           	opt stack 0
   844  000078                     ___ftadd@f1:
   845                           	opt stack 0
   846  000078                     ___fttol@f1:
   847                           	opt stack 0
   848                           
   849                           ; 3 bytes @ 0x18
   850  000078                     	ds	3
   851  00007B                     ___ftadd@f2:
   852                           	opt stack 0
   853                           
   854                           ; 3 bytes @ 0x1B
   855  00007B                     	ds	1
   856  00007C                     ??___fttol:
   857  00007C                     CheckFlashPrecentage@precentage:
   858                           	opt stack 0
   859                           
   860                           ; 3 bytes @ 0x1C
   861  00007C                     	ds	2
   862  00007E                     ??___ftadd:
   863                           
   864                           ; 1 bytes @ 0x1E
   865  00007E                     	ds	2
   866  000080                     SWSPI_Synth_send_bits@mask:
   867                           	opt stack 0
   868                           
   869                           ; 4 bytes @ 0x20
   870  000080                     	ds	1
   871  000081                     ___ftadd@sign:
   872                           	opt stack 0
   873  000081                     ___fttol@sign1:
   874                           	opt stack 0
   875                           
   876                           ; 1 bytes @ 0x21
   877  000081                     	ds	1
   878  000082                     ___ftadd@exp2:
   879                           	opt stack 0
   880  000082                     ___fttol@lval:
   881                           	opt stack 0
   882                           
   883                           ; 4 bytes @ 0x22
   884  000082                     	ds	1
   885  000083                     ___ftadd@exp1:
   886                           	opt stack 0
   887                           
   888                           ; 1 bytes @ 0x23
   889  000083                     	ds	1
   890  000084                     ?___ftsub:
   891                           	opt stack 0
   892  000084                     ?_eval_poly:
   893                           	opt stack 0
   894  000084                     SWSPI_Synth_send_bits@count:
   895                           	opt stack 0
   896  000084                     ___ftsub@f1:
   897                           	opt stack 0
   898  000084                     eval_poly@x:
   899                           	opt stack 0
   900                           
   901                           ; 3 bytes @ 0x24
   902  000084                     	ds	1
   903  000085                     SWSPI_Synth_send_bits@phrType:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x25
   907  000085                     	ds	1
   908  000086                     ___fttol@exp1:
   909                           	opt stack 0
   910  000086                     DacSetValue@data:
   911                           	opt stack 0
   912  000086                     PLLInitialize@idx:
   913                           	opt stack 0
   914  000086                     UpdateRxFreq@data:
   915                           	opt stack 0
   916                           
   917                           ; 2 bytes @ 0x26
   918  000086                     	ds	1
   919  000087                     ?___altoft:
   920                           	opt stack 0
   921  000087                     eval_poly@d:
   922                           	opt stack 0
   923  000087                     ___ftsub@f2:
   924                           	opt stack 0
   925  000087                     ___altoft@c:
   926                           	opt stack 0
   927                           
   928                           ; 4 bytes @ 0x27
   929  000087                     	ds	1
   930  000088                     UpdateRxFreq@regData:
   931                           	opt stack 0
   932                           
   933                           ; 4 bytes @ 0x28
   934  000088                     	ds	1
   935  000089                     eval_poly@n:
   936                           	opt stack 0
   937                           
   938                           ; 2 bytes @ 0x29
   939  000089                     	ds	2
   940  00008B                     ??___altoft:
   941  00008B                     eval_poly@res:
   942                           	opt stack 0
   943                           
   944                           ; 3 bytes @ 0x2B
   945  00008B                     	ds	3
   946  00008E                     ?_log:
   947                           	opt stack 0
   948  00008E                     ?_ldexp:
   949                           	opt stack 0
   950  00008E                     ldexp@value:
   951                           	opt stack 0
   952  00008E                     log@x:
   953                           	opt stack 0
   954                           
   955                           ; 3 bytes @ 0x2E
   956  00008E                     	ds	1
   957  00008F                     ?_floor:
   958                           	opt stack 0
   959  00008F                     floor@x:
   960                           	opt stack 0
   961                           
   962                           ; 3 bytes @ 0x2F
   963  00008F                     	ds	2
   964  000091                     ldexp@newexp:
   965                           	opt stack 0
   966  000091                     log@exponent:
   967                           	opt stack 0
   968                           
   969                           ; 2 bytes @ 0x31
   970  000091                     	ds	1
   971  000092                     floor@i:
   972                           	opt stack 0
   973                           
   974                           ; 3 bytes @ 0x32
   975  000092                     	ds	1
   976  000093                     ??_ldexp:
   977                           
   978                           ; 1 bytes @ 0x33
   979  000093                     	ds	2
   980  000095                     floor@expon:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x35
   984  000095                     	ds	2
   985  000097                     ?_exp:
   986                           	opt stack 0
   987  000097                     exp@x:
   988                           	opt stack 0
   989                           
   990                           ; 3 bytes @ 0x37
   991  000097                     	ds	3
   992  00009A                     _exp$3299:
   993                           	opt stack 0
   994                           
   995                           ; 3 bytes @ 0x3A
   996  00009A                     	ds	3
   997  00009D                     exp@exponent:
   998                           	opt stack 0
   999                           
  1000                           ; 2 bytes @ 0x3D
  1001  00009D                     	ds	2
  1002  00009F                     exp@sign:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x3F
  1006  00009F                     	ds	1
  1007  0000A0                     ?_pow:
  1008                           	opt stack 0
  1009  0000A0                     pow@x:
  1010                           	opt stack 0
  1011                           
  1012                           ; 3 bytes @ 0x40
  1013  0000A0                     	ds	3
  1014  0000A3                     pow@y:
  1015                           	opt stack 0
  1016                           
  1017                           ; 3 bytes @ 0x43
  1018  0000A3                     	ds	3
  1019  0000A6                     _pow$3297:
  1020                           	opt stack 0
  1021                           
  1022                           ; 3 bytes @ 0x46
  1023  0000A6                     	ds	3
  1024  0000A9                     _pow$3298:
  1025                           	opt stack 0
  1026                           
  1027                           ; 3 bytes @ 0x49
  1028  0000A9                     	ds	3
  1029  0000AC                     pow@sign:
  1030                           	opt stack 0
  1031                           
  1032                           ; 1 bytes @ 0x4C
  1033  0000AC                     	ds	1
  1034  0000AD                     pow@yi:
  1035                           	opt stack 0
  1036                           
  1037                           ; 4 bytes @ 0x4D
  1038  0000AD                     	ds	4
  1039  0000B1                     ??_AdcConvert:
  1040  0000B1                     _FlashReadUart$565:
  1041                           	opt stack 0
  1042                           
  1043                           ; 4 bytes @ 0x51
  1044  0000B1                     	ds	2
  1045  0000B3                     AdcConvert@_adcResult:
  1046                           	opt stack 0
  1047                           
  1048                           ; 2 bytes @ 0x53
  1049  0000B3                     	ds	2
  1050  0000B5                     AdcConvert@_adcResult_332:
  1051                           	opt stack 0
  1052  0000B5                     _FlashReadUart$566:
  1053                           	opt stack 0
  1054                           
  1055                           ; 4 bytes @ 0x55
  1056  0000B5                     	ds	2
  1057  0000B7                     _AdcConvert$3296:
  1058                           	opt stack 0
  1059                           
  1060                           ; 3 bytes @ 0x57
  1061  0000B7                     	ds	2
  1062  0000B9                     FlashReadUart@j:
  1063                           	opt stack 0
  1064                           
  1065                           ; 2 bytes @ 0x59
  1066  0000B9                     	ds	1
  1067  0000BA                     AdcConvert@adcRes:
  1068                           	opt stack 0
  1069                           
  1070                           ; 2 bytes @ 0x5A
  1071  0000BA                     	ds	1
  1072  0000BB                     FlashReadUart@idx:
  1073                           	opt stack 0
  1074                           
  1075                           ; 2 bytes @ 0x5B
  1076  0000BB                     	ds	1
  1077  0000BC                     AdcConvert@idx:
  1078                           	opt stack 0
  1079                           
  1080                           ; 1 bytes @ 0x5C
  1081  0000BC                     	ds	1
  1082  0000BD                     FlashReadUart@offset:
  1083                           	opt stack 0
  1084                           
  1085                           ; 2 bytes @ 0x5D
  1086  0000BD                     	ds	2
  1087  0000BF                     ??_GroupFlashMemory:
  1088  0000BF                     GroupControlMcu@request:
  1089                           	opt stack 0
  1090  0000BF                     GroupStatusAndVersion@request:
  1091                           	opt stack 0
  1092  0000BF                     GroupAdc@request:
  1093                           	opt stack 0
  1094  0000BF                     GroupSynthesizers@request:
  1095                           	opt stack 0
  1096  0000BF                     GroupDAC@request:
  1097                           	opt stack 0
  1098                           
  1099                           ; 1 bytes @ 0x5F
  1100  0000BF                     	ds	1
  1101                           tblptru	equ	0xFF8
  1102                           tblptrh	equ	0xFF7
  1103                           tblptrl	equ	0xFF6
  1104                           tablat	equ	0xFF5
  1105                           postinc0	equ	0xFEE
  1106                           wreg	equ	0xFE8
  1107                           postdec1	equ	0xFE5
  1108                           fsr1l	equ	0xFE1
  1109                           
  1110                           	psect	cstackCOMRAM
  1111  000001                     __pcstackCOMRAM:
  1112                           	opt stack 0
  1113  000001                     ?___lwmod:
  1114                           	opt stack 0
  1115  000001                     ___lwmod@dividend:
  1116                           	opt stack 0
  1117                           
  1118                           ; 2 bytes @ 0x0
  1119  000001                     	ds	2
  1120  000003                     ___lwmod@divisor:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x2
  1124  000003                     	ds	2
  1125  000005                     ___lwmod@counter:
  1126                           	opt stack 0
  1127                           
  1128                           ; 1 bytes @ 0x4
  1129  000005                     	ds	1
  1130  000006                     ??_INTERRUPT_InterruptManager:
  1131                           
  1132                           ; 1 bytes @ 0x5
  1133  000006                     	ds	18
  1134  000018                     ??_EUSART1_Read:
  1135  000018                     ??_isspace:
  1136  000018                     ??_isdigit:
  1137  000018                     ??_isupper:
  1138  000018                     ??_BlinkErrorLeds:
  1139  000018                     ??_BlinkOkLeds:
  1140  000018                     ??_keepAliveSignalLed:
  1141  000018                     ?_ADC_GetConversion:
  1142                           	opt stack 0
  1143  000018                     ?_abs:
  1144                           	opt stack 0
  1145  000018                     ?___wmul:
  1146                           	opt stack 0
  1147  000018                     ?___ftpack:
  1148                           	opt stack 0
  1149  000018                     ?_frexp:
  1150                           	opt stack 0
  1151  000018                     ?___ftneg:
  1152                           	opt stack 0
  1153  000018                     ?___lmul:
  1154                           	opt stack 0
  1155  000018                     ?___lldiv:
  1156                           	opt stack 0
  1157  000018                     ?___llmod:
  1158                           	opt stack 0
  1159  000018                     InitAdcApplicationMgr@channel:
  1160                           	opt stack 0
  1161  000018                     SwSpi_Data_Pin@cPinMode:
  1162                           	opt stack 0
  1163  000018                     SwSpi_Clk_Pin@cPinMode:
  1164                           	opt stack 0
  1165  000018                     SwSpi_Set_CE_Pin@cPinMode:
  1166                           	opt stack 0
  1167  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  1168                           	opt stack 0
  1169  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  1170                           	opt stack 0
  1171  000018                     EUSART1_Write@txData:
  1172                           	opt stack 0
  1173  000018                     DATAEE_WriteByte@bData:
  1174                           	opt stack 0
  1175  000018                     DATAEE_ReadByte@bAdd:
  1176                           	opt stack 0
  1177  000018                     toupper@c:
  1178                           	opt stack 0
  1179  000018                     PLLUartInitialize@data:
  1180                           	opt stack 0
  1181  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  1182                           	opt stack 0
  1183  000018                     crc8@dataArray:
  1184                           	opt stack 0
  1185  000018                     Make32bitsArray@array:
  1186                           	opt stack 0
  1187  000018                     ___wmul@multiplier:
  1188                           	opt stack 0
  1189  000018                     abs@a:
  1190                           	opt stack 0
  1191  000018                     memset@p1:
  1192                           	opt stack 0
  1193  000018                     ___ftpack@arg:
  1194                           	opt stack 0
  1195  000018                     ___ftge@ff1:
  1196                           	opt stack 0
  1197  000018                     ___ftneg@f1:
  1198                           	opt stack 0
  1199  000018                     frexp@value:
  1200                           	opt stack 0
  1201  000018                     FLASH_ReadByte@flashAddr:
  1202                           	opt stack 0
  1203  000018                     FLASH_EraseBlock@baseAddr:
  1204                           	opt stack 0
  1205  000018                     make8@data:
  1206                           	opt stack 0
  1207  000018                     ___lmul@multiplier:
  1208                           	opt stack 0
  1209  000018                     ___lldiv@dividend:
  1210                           	opt stack 0
  1211  000018                     ___llmod@dividend:
  1212                           	opt stack 0
  1213                           
  1214                           ; 4 bytes @ 0x17
  1215  000018                     	ds	1
  1216  000019                     EepromRead@address:
  1217                           	opt stack 0
  1218  000019                     SwSpi_Data_Pin@phrType:
  1219                           	opt stack 0
  1220  000019                     SwSpi_Clk_Pin@phrType:
  1221                           	opt stack 0
  1222  000019                     SwSpi_Set_CE_Pin@phrType:
  1223                           	opt stack 0
  1224  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  1225                           	opt stack 0
  1226  000019                     DATAEE_WriteByte@bAdd:
  1227                           	opt stack 0
  1228  000019                     _isdigit$3006:
  1229                           	opt stack 0
  1230  000019                     _isspace$3009:
  1231                           	opt stack 0
  1232  000019                     _isupper$3012:
  1233                           	opt stack 0
  1234  000019                     WriteUartMessage@dataBuf:
  1235                           	opt stack 0
  1236  000019                     EUSART1_Read@readValue:
  1237                           	opt stack 0
  1238                           
  1239                           ; 2 bytes @ 0x18
  1240  000019                     	ds	1
  1241  00001A                     ??_ADC_GetConversion:
  1242  00001A                     ??_abs:
  1243  00001A                     ??_TMR0_Initialize:
  1244  00001A                     SWSPI_DAC_send_bits@data:
  1245                           	opt stack 0
  1246  00001A                     DATAEE_WriteByte@GIEBitValue:
  1247                           	opt stack 0
  1248  00001A                     isdigit@c:
  1249                           	opt stack 0
  1250  00001A                     isspace@c:
  1251                           	opt stack 0
  1252  00001A                     isupper@c:
  1253                           	opt stack 0
  1254  00001A                     crc8@dataSize:
  1255                           	opt stack 0
  1256  00001A                     ___wmul@multiplicand:
  1257                           	opt stack 0
  1258  00001A                     memset@c:
  1259                           	opt stack 0
  1260  00001A                     Make32bitsArray@data:
  1261                           	opt stack 0
  1262                           
  1263                           ; 4 bytes @ 0x19
  1264  00001A                     	ds	1
  1265  00001B                     ??_isalpha:
  1266  00001B                     BlinkErrorLeds@state:
  1267                           	opt stack 0
  1268  00001B                     BlinkOkLeds@state:
  1269                           	opt stack 0
  1270  00001B                     EepromWrite@data:
  1271                           	opt stack 0
  1272  00001B                     SWSPI_DAC_send_bits@count:
  1273                           	opt stack 0
  1274  00001B                     ___ftpack@exp:
  1275                           	opt stack 0
  1276  00001B                     WriteUartMessage@dataSize:
  1277                           	opt stack 0
  1278  00001B                     frexp@eptr:
  1279                           	opt stack 0
  1280  00001B                     ___ftge@ff2:
  1281                           	opt stack 0
  1282                           
  1283                           ; 3 bytes @ 0x1A
  1284  00001B                     	ds	1
  1285  00001C                     ??_crc8:
  1286  00001C                     EepromWrite@address:
  1287                           	opt stack 0
  1288  00001C                     SWSPI_DAC_send_bits@phrType:
  1289                           	opt stack 0
  1290  00001C                     FLASH_EraseBlock@GIEBitValue:
  1291                           	opt stack 0
  1292  00001C                     ADC_GetConversion@channel:
  1293                           	opt stack 0
  1294  00001C                     make8@dataLocation:
  1295                           	opt stack 0
  1296  00001C                     ___ftpack@sign:
  1297                           	opt stack 0
  1298  00001C                     _isalpha$3003:
  1299                           	opt stack 0
  1300  00001C                     BlinkErrorLeds@idx:
  1301                           	opt stack 0
  1302  00001C                     BlinkOkLeds@idx:
  1303                           	opt stack 0
  1304  00001C                     ___wmul@product:
  1305                           	opt stack 0
  1306  00001C                     memset@n:
  1307                           	opt stack 0
  1308  00001C                     ___lmul@multiplicand:
  1309                           	opt stack 0
  1310  00001C                     ___lldiv@divisor:
  1311                           	opt stack 0
  1312  00001C                     ___llmod@divisor:
  1313                           	opt stack 0
  1314                           
  1315                           ; 4 bytes @ 0x1B
  1316  00001C                     	ds	1
  1317  00001D                     ??_make8:
  1318  00001D                     ??___ftpack:
  1319  00001D                     ??_frexp:
  1320  00001D                     ??_WriteUartMessage:
  1321  00001D                     isalpha@c:
  1322                           	opt stack 0
  1323  00001D                     crc8@crc:
  1324                           	opt stack 0
  1325  00001D                     FLASH_WriteBlock@writeAddr:
  1326                           	opt stack 0
  1327                           
  1328                           ; 4 bytes @ 0x1C
  1329  00001D                     	ds	1
  1330  00001E                     ??_Make32bitsArray:
  1331  00001E                     ??___ftge:
  1332  00001E                     WriteUartMessage@idx:
  1333                           	opt stack 0
  1334  00001E                     memset@p:
  1335                           	opt stack 0
  1336                           
  1337                           ; 2 bytes @ 0x1D
  1338  00001E                     	ds	1
  1339  00001F                     crc8@i:
  1340                           	opt stack 0
  1341                           
  1342                           ; 2 bytes @ 0x1E
  1343  00001F                     	ds	1
  1344  000020                     ?___awtoft:
  1345                           	opt stack 0
  1346  000020                     ?___lltoft:
  1347                           	opt stack 0
  1348  000020                     ?___lwtoft:
  1349                           	opt stack 0
  1350  000020                     ___llmod@counter:
  1351                           	opt stack 0
  1352  000020                     ZeroArray@array:
  1353                           	opt stack 0
  1354  000020                     ZeroBitsArray@array:
  1355                           	opt stack 0
  1356  000020                     Make32bitsArray@idx:
  1357                           	opt stack 0
  1358  000020                     ___awtoft@c:
  1359                           	opt stack 0
  1360  000020                     ___lwtoft@c:
  1361                           	opt stack 0
  1362  000020                     ___lmul@product:
  1363                           	opt stack 0
  1364  000020                     ___lldiv@quotient:
  1365                           	opt stack 0
  1366  000020                     ___lltoft@c:
  1367                           	opt stack 0
  1368                           
  1369                           ; 4 bytes @ 0x1F
  1370  000020                     	ds	1
  1371  000021                     FLASH_WriteBlock@flashWrBufPtr:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x20
  1375  000021                     	ds	1
  1376  000022                     ZeroArray@size:
  1377                           	opt stack 0
  1378  000022                     SWSPI_Synth_send_bits@data:
  1379                           	opt stack 0
  1380                           
  1381                           ; 4 bytes @ 0x21
  1382  000022                     	ds	1
  1383  000023                     ??_FLASH_WriteBlock:
  1384  000023                     ___awtoft@sign:
  1385                           	opt stack 0
  1386                           
  1387                           ; 1 bytes @ 0x22
  1388  000023                     	ds	1
  1389  000024                     ??_GetMcuFwVersion:
  1390  000024                     ??_GetCpldFwVersion:
  1391  000024                     ??_FlashReadCondition:
  1392  000024                     ??___lltoft:
  1393  000024                     ?_strtol:
  1394                           	opt stack 0
  1395  000024                     SendAckMessage@inRequest:
  1396                           	opt stack 0
  1397  000024                     ___lldiv@counter:
  1398                           	opt stack 0
  1399  000024                     strtol@s:
  1400                           	opt stack 0
  1401                           
  1402                           ; 2 bytes @ 0x23
  1403  000024                     	ds	1
  1404  000025                     ??_GetMcuRunTime:
  1405  000025                     SendAckMessage@inGroup:
  1406                           	opt stack 0
  1407                           
  1408                           ; 1 bytes @ 0x24
  1409  000025                     	ds	1
  1410  000026                     strtol@endptr:
  1411                           	opt stack 0
  1412  000026                     SWSPI_send_word@data:
  1413                           	opt stack 0
  1414  000026                     SendAckMessage@TxMsg:
  1415                           	opt stack 0
  1416  000026                     GetMcuFwVersion@TxMsg:
  1417                           	opt stack 0
  1418  000026                     GetCpldFwVersion@TxMsg:
  1419                           	opt stack 0
  1420                           
  1421                           ; 9 bytes @ 0x25
  1422  000026                     	ds	1
  1423  000027                     FLASH_WriteBlock@blockStartAddr:
  1424                           	opt stack 0
  1425                           
  1426                           ; 4 bytes @ 0x26
  1427  000027                     	ds	1
  1428  000028                     ___lltoft@exp:
  1429                           	opt stack 0
  1430  000028                     strtol@base:
  1431                           	opt stack 0
  1432  000028                     FlashReadCondition@TxMsg:
  1433                           	opt stack 0
  1434                           
  1435                           ; 9 bytes @ 0x27
  1436  000028                     	ds	1
  1437  000029                     ?___ftdiv:
  1438                           	opt stack 0
  1439  000029                     ___ftdiv@f1:
  1440                           	opt stack 0
  1441                           
  1442                           ; 3 bytes @ 0x28
  1443  000029                     	ds	1
  1444  00002A                     ??_strtol:
  1445  00002A                     SWSPI_send_word@dataSize:
  1446                           	opt stack 0
  1447                           
  1448                           ; 1 bytes @ 0x29
  1449  00002A                     	ds	1
  1450  00002B                     SWSPI_send_word@datac:
  1451                           	opt stack 0
  1452  00002B                     FLASH_WriteBlock@GIEBitValue:
  1453                           	opt stack 0
  1454                           
  1455                           ; 1 bytes @ 0x2A
  1456  00002B                     	ds	1
  1457  00002C                     ??_testLeds:
  1458  00002C                     FLASH_WriteBlock@i:
  1459                           	opt stack 0
  1460  00002C                     SetAdcOperationMode@data:
  1461                           	opt stack 0
  1462  00002C                     SetConversionResultFormat@data:
  1463                           	opt stack 0
  1464  00002C                     SetChannelMode@data:
  1465                           	opt stack 0
  1466  00002C                     FlashReadUart@numOfSampleToRead:
  1467                           	opt stack 0
  1468  00002C                     SWSPI_send_word@idx:
  1469                           	opt stack 0
  1470  00002C                     SetMcuFwVersion@data:
  1471                           	opt stack 0
  1472  00002C                     SetCpldFwVersion@data:
  1473                           	opt stack 0
  1474  00002C                     ___ftdiv@f2:
  1475                           	opt stack 0
  1476                           
  1477                           ; 3 bytes @ 0x2B
  1478  00002C                     	ds	1
  1479  00002D                     testLeds@idx:
  1480                           	opt stack 0
  1481  00002D                     FlashSampleWrite@sampleData:
  1482                           	opt stack 0
  1483                           
  1484                           ; 2 bytes @ 0x2C
  1485  00002D                     	ds	1
  1486  00002E                     SWSPI_send_word@phrType:
  1487                           	opt stack 0
  1488  00002E                     SetMcuFwVersion@idx:
  1489                           	opt stack 0
  1490  00002E                     SetCpldFwVersion@idx:
  1491                           	opt stack 0
  1492                           
  1493                           ; 2 bytes @ 0x2D
  1494  00002E                     	ds	1
  1495  00002F                     ??_eval_poly:
  1496  00002F                     ??_PLLInitialize:
  1497  00002F                     FlashSampleWrite@channelNum:
  1498                           	opt stack 0
  1499  00002F                     GetMcuFwVersion@idx:
  1500                           	opt stack 0
  1501  00002F                     ___altoft@exp:
  1502                           	opt stack 0
  1503  00002F                     DacSetValue@regData:
  1504                           	opt stack 0
  1505  00002F                     UpdateTxFreq@data:
  1506                           	opt stack 0
  1507  00002F                     GetCpldFwVersion@idx:
  1508                           	opt stack 0
  1509                           
  1510                           ; 2 bytes @ 0x2E
  1511  00002F                     	ds	1
  1512  000030                     ___altoft@sign:
  1513                           	opt stack 0
  1514                           
  1515                           ; 1 bytes @ 0x2F
  1516  000030                     	ds	1
  1517  000031                     tblptru	equ	0xFF8
  1518                           tblptrh	equ	0xFF7
  1519                           tblptrl	equ	0xFF6
  1520                           tablat	equ	0xFF5
  1521                           postinc0	equ	0xFEE
  1522                           wreg	equ	0xFE8
  1523                           postdec1	equ	0xFE5
  1524                           fsr1l	equ	0xFE1
  1525                           
  1526                           ; 1 bytes @ 0x30
  1527 ;;
  1528 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1529 ;;
  1530 ;; *************** function _main *****************
  1531 ;; Defined at:
  1532 ;;		line 13 in file "main.c"
  1533 ;; Parameters:    Size  Location     Type
  1534 ;;		None
  1535 ;; Auto vars:     Size  Location     Type
  1536 ;;		None
  1537 ;; Return value:  Size  Location     Type
  1538 ;;                  1    wreg      void 
  1539 ;; Registers used:
  1540 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1541 ;; Tracked objects:
  1542 ;;		On entry : 0/0
  1543 ;;		On exit  : 0/0
  1544 ;;		Unchanged: 0/0
  1545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1546 ;;      Params:         0       0       0       0       0       0       0
  1547 ;;      Locals:         0       0       0       0       0       0       0
  1548 ;;      Temps:          0       0       0       0       0       0       0
  1549 ;;      Totals:         0       0       0       0       0       0       0
  1550 ;;Total ram usage:        0 bytes
  1551 ;; Hardware stack levels required when called:   10
  1552 ;; This function calls:
  1553 ;;		_AdcConvert
  1554 ;;		_BlinkErrorLeds
  1555 ;;		_BlinkOkLeds
  1556 ;;		_CheckFlashPrecentage
  1557 ;;		_InitSystemApplicationManagers
  1558 ;;		_SendSystemStartAck
  1559 ;;		_SetMcuRunTime
  1560 ;;		_SetMcuSystem
  1561 ;;		_keepAliveSignalLed
  1562 ;;		_keepAliveSignalUart
  1563 ;;		_readUartMessage
  1564 ;; This function is called by:
  1565 ;;		Startup code after reset
  1566 ;; This function uses a non-reentrant model
  1567 ;;
  1568                           
  1569                           	psect	text0
  1570  002A7A                     __ptext0:
  1571                           	opt stack 0
  1572  002A7A                     _main:
  1573                           	opt stack 21
  1574                           
  1575                           ;main.c: 16: SetMcuSystem();
  1576                           
  1577                           ;incstack = 0
  1578  002A7A  EC7A  F01C         	call	_SetMcuSystem	;wreg free
  1579                           
  1580                           ;main.c: 19: InitSystemApplicationManagers();
  1581  002A7E  ECE1  F01B         	call	_InitSystemApplicationManagers	;wreg free
  1582                           
  1583                           ;main.c: 22: SendSystemStartAck();
  1584  002A82  EC6F  F01C         	call	_SendSystemStartAck	;wreg free
  1585                           
  1586                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  1587  002A86  0E03               	movlw	3
  1588  002A88  EC6E  F015         	call	_BlinkOkLeds
  1589  002A8C                     
  1590                           ;main.c: 28: {
  1591                           ;main.c: 29: readUartMessage();
  1592  002A8C  EC72  F006         	call	_readUartMessage	;wreg free
  1593                           
  1594                           ;main.c: 31: if (TimerOneSecFlag == 1)
  1595  002A90  0100               	movlb	0	; () banked
  1596  002A92  05D6               	decf	_TimerOneSecFlag& (0+255),w,b	;volatile
  1597  002A94  A4D8               	btfss	status,2,c
  1598  002A96  D006               	goto	l1433
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;main.c: 32: {
  1602                           ;main.c: 34: SetMcuRunTime();
  1603  002A98  EC60  F018         	call	_SetMcuRunTime	;wreg free
  1604                           
  1605                           ;main.c: 35: TimerOneSecFlag = 0;
  1606  002A9C  0E00               	movlw	0
  1607  002A9E  0100               	movlb	0	; () banked
  1608  002AA0  6FD6               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
  1609                           
  1610                           ;main.c: 36: }
  1611  002AA2  D7F4               	goto	l1432
  1612  002AA4                     l1433:
  1613                           
  1614                           ; BSR set to: 0
  1615                           ;main.c: 37: else if (TimerSamplingFlag == 1)
  1616                           
  1617                           ; BSR set to: 0
  1618  002AA4  05D5               	decf	_TimerSamplingFlag& (0+255),w,b	;volatile
  1619  002AA6  A4D8               	btfss	status,2,c
  1620  002AA8  D010               	goto	l1435
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;main.c: 38: {
  1624                           ;main.c: 39: keepAliveSignalLed();
  1625  002AAA  ECEE  F01B         	call	_keepAliveSignalLed	;wreg free
  1626                           
  1627                           ;main.c: 41: if(1 == CheckFlashPrecentage())
  1628  002AAE  EC8C  F011         	call	_CheckFlashPrecentage	;wreg free
  1629  002AB2  06E8               	decf	wreg,f,c
  1630  002AB4  A4D8               	btfss	status,2,c
  1631  002AB6  D003               	goto	l1436
  1632                           
  1633                           ;main.c: 42: {
  1634                           ;main.c: 43: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  1635  002AB8  0E04               	movlw	4
  1636  002ABA  EC9D  F015         	call	_BlinkErrorLeds
  1637  002ABE                     l1436:
  1638                           
  1639                           ;main.c: 44: }
  1640                           ;main.c: 47: AdcConvert();
  1641  002ABE  EC54  F009         	call	_AdcConvert	;wreg free
  1642                           
  1643                           ;main.c: 49: TimerSamplingFlag = 0;
  1644  002AC2  0E00               	movlw	0
  1645  002AC4  0100               	movlb	0	; () banked
  1646  002AC6  6FD5               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
  1647                           
  1648                           ;main.c: 50: }
  1649  002AC8  D7E1               	goto	l1432
  1650  002ACA                     l1435:
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;main.c: 51: else if (TimerKeepAliveFlag == 1)
  1654                           
  1655                           ; BSR set to: 0
  1656  002ACA  05D4               	decf	_TimerKeepAliveFlag& (0+255),w,b	;volatile
  1657  002ACC  A4D8               	btfss	status,2,c
  1658  002ACE  D7DE               	goto	l1432
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;main.c: 52: {
  1662                           ;main.c: 53: keepAliveSignalUart();
  1663  002AD0  EC69  F01C         	call	_keepAliveSignalUart	;wreg free
  1664                           
  1665                           ;main.c: 54: TimerKeepAliveFlag = 0;
  1666  002AD4  0E00               	movlw	0
  1667  002AD6  0100               	movlb	0	; () banked
  1668  002AD8  6FD4               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
  1669                           
  1670                           ; BSR set to: 0
  1671                           
  1672                           ; BSR set to: 0
  1673                           
  1674                           ; BSR set to: 0
  1675                           
  1676                           ; BSR set to: 0
  1677  002ADA  D7D8               	goto	l1432
  1678  002ADC                     __end_of_main:
  1679                           	opt stack 0
  1680                           tblptru	equ	0xFF8
  1681                           tblptrh	equ	0xFF7
  1682                           tblptrl	equ	0xFF6
  1683                           tablat	equ	0xFF5
  1684                           postinc0	equ	0xFEE
  1685                           wreg	equ	0xFE8
  1686                           postdec1	equ	0xFE5
  1687                           fsr1l	equ	0xFE1
  1688                           status	equ	0xFD8
  1689                           
  1690 ;; *************** function _readUartMessage *****************
  1691 ;; Defined at:
  1692 ;;		line 28 in file "EusartApp.c"
  1693 ;; Parameters:    Size  Location     Type
  1694 ;;		None
  1695 ;; Auto vars:     Size  Location     Type
  1696 ;;  idx             2    7[BANK1 ] int 
  1697 ;;  chRec           1    9[BANK1 ] unsigned char 
  1698 ;; Return value:  Size  Location     Type
  1699 ;;                  1    wreg      void 
  1700 ;; Registers used:
  1701 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1702 ;; Tracked objects:
  1703 ;;		On entry : 0/0
  1704 ;;		On exit  : 0/0
  1705 ;;		Unchanged: 0/0
  1706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1707 ;;      Params:         0       0       0       0       0       0       0
  1708 ;;      Locals:         0       0       3       0       0       0       0
  1709 ;;      Temps:          0       0       4       0       0       0       0
  1710 ;;      Totals:         0       0       7       0       0       0       0
  1711 ;;Total ram usage:        7 bytes
  1712 ;; Hardware stack levels used:    1
  1713 ;; Hardware stack levels required when called:    9
  1714 ;; This function calls:
  1715 ;;		_EUSART1_Read
  1716 ;;		_GroupAdc
  1717 ;;		_GroupControlMcu
  1718 ;;		_GroupDAC
  1719 ;;		_GroupFlashMemory
  1720 ;;		_GroupStatusAndVersion
  1721 ;;		_GroupSynthesizers
  1722 ;;		_InitRxMessageParams
  1723 ;;		_ZeroArray
  1724 ;;		_crc8
  1725 ;; This function is called by:
  1726 ;;		_main
  1727 ;; This function uses a non-reentrant model
  1728 ;;
  1729                           
  1730                           	psect	text1
  1731  000CE4                     __ptext1:
  1732                           	opt stack 0
  1733  000CE4                     _readUartMessage:
  1734                           	opt stack 21
  1735                           
  1736                           ;EusartApp.c: 31: uint8_t chRec = (0);
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;incstack = 0
  1740  000CE4  0E00               	movlw	0
  1741  000CE6  0101               	movlb	1	; () banked
  1742  000CE8  6FCB               	movwf	readUartMessage@chRec& (0+255),b
  1743                           
  1744                           ;EusartApp.c: 32: switch(cState)
  1745  000CEA  D0DF               	goto	l178
  1746  000CEC                     
  1747                           ;EusartApp.c: 37: if(eusart1RxCount > (4))
  1748                           
  1749                           ; BSR set to: 1
  1750  000CEC  0E04               	movlw	4
  1751  000CEE  0100               	movlb	0	; () banked
  1752  000CF0  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1753  000CF2  0012               	return	
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;EusartApp.c: 38: {
  1757                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  1758  000CF4  0E01               	movlw	1
  1759  000CF6  6FD1               	movwf	_cState& (0+255),b
  1760                           
  1761                           ; BSR set to: 0
  1762                           ;EusartApp.c: 40: }
  1763                           ;EusartApp.c: 41: return;
  1764                           
  1765                           ; BSR set to: 0
  1766  000CF8  0012               	return	
  1767  000CFA                     
  1768                           ; BSR set to: 0
  1769                           ;EusartApp.c: 45: InitRxMessageParams();
  1770                           
  1771                           ; BSR set to: 0
  1772  000CFA  ECCE  F01A         	call	_InitRxMessageParams	;wreg free
  1773                           
  1774                           ;EusartApp.c: 46: msgCount = 0;
  1775  000CFE  0E00               	movlw	0
  1776  000D00  0100               	movlb	0	; () banked
  1777  000D02  6FCA               	movwf	_msgCount& (0+255),b
  1778                           
  1779                           ; BSR set to: 0
  1780                           ;EusartApp.c: 47: if(eusart1RxCount > 1)
  1781  000D04  0E01               	movlw	1
  1782  000D06  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1783  000D08  D00E               	goto	l183
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;EusartApp.c: 48: {
  1787                           ;EusartApp.c: 49: chRec = EUSART1_Read();
  1788  000D0A  EC3E  F018         	call	_EUSART1_Read	;wreg free
  1789  000D0E  0101               	movlb	1	; () banked
  1790  000D10  6FCB               	movwf	readUartMessage@chRec& (0+255),b
  1791                           
  1792                           ; BSR set to: 1
  1793                           ;EusartApp.c: 50: rxMsgQueue[(0)] = chRec;
  1794  000D12  C1CB  F0D7         	movff	readUartMessage@chRec,_rxMsgQueue
  1795                           
  1796                           ; BSR set to: 1
  1797                           ;EusartApp.c: 51: if(chRec == (0x24))
  1798  000D16  0E24               	movlw	36
  1799  000D18  19CB               	xorwf	readUartMessage@chRec& (0+255),w,b
  1800  000D1A  A4D8               	btfss	status,2,c
  1801  000D1C  0012               	return	
  1802                           
  1803                           ; BSR set to: 1
  1804                           ;EusartApp.c: 52: {
  1805                           ;EusartApp.c: 53: cState = READ_GROUP;
  1806  000D1E  0E02               	movlw	2
  1807  000D20  0100               	movlb	0	; () banked
  1808  000D22  6FD1               	movwf	_cState& (0+255),b
  1809                           
  1810                           ; BSR set to: 0
  1811                           ;EusartApp.c: 54: }
  1812                           ;EusartApp.c: 55: }
  1813  000D24  0012               	return	
  1814  000D26                     l183:
  1815                           
  1816                           ; BSR set to: 0
  1817                           ;EusartApp.c: 56: else
  1818                           ;EusartApp.c: 57: {
  1819                           ;EusartApp.c: 58: cState = START_RX_MESSAGE_READ;
  1820                           
  1821                           ; BSR set to: 0
  1822  000D26  0E00               	movlw	0
  1823  000D28  6FD1               	movwf	_cState& (0+255),b
  1824                           
  1825                           ; BSR set to: 0
  1826                           ;EusartApp.c: 59: }
  1827                           ;EusartApp.c: 61: break;
  1828  000D2A  0012               	return	
  1829  000D2C                     
  1830                           ; BSR set to: 0
  1831                           ;EusartApp.c: 65: if(eusart1RxCount > 1)
  1832                           
  1833                           ; BSR set to: 0
  1834  000D2C  0E01               	movlw	1
  1835  000D2E  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1836  000D30  0012               	return	
  1837                           
  1838                           ; BSR set to: 0
  1839                           ;EusartApp.c: 66: {
  1840                           ;EusartApp.c: 67: group = EUSART1_Read();
  1841  000D32  EC3E  F018         	call	_EUSART1_Read	;wreg free
  1842  000D36  0100               	movlb	0	; () banked
  1843  000D38  6FD0               	movwf	_group& (0+255),b
  1844                           
  1845                           ; BSR set to: 0
  1846                           ;EusartApp.c: 68: rxMsgQueue[(1)] = group;
  1847  000D3A  C0D0  F0D8         	movff	_group,_rxMsgQueue+1
  1848                           
  1849                           ; BSR set to: 0
  1850                           ;EusartApp.c: 69: cState = READ_REQUEST;
  1851  000D3E  0E03               	movlw	3
  1852  000D40  6FD1               	movwf	_cState& (0+255),b
  1853                           
  1854                           ; BSR set to: 0
  1855                           ;EusartApp.c: 70: }
  1856                           ;EusartApp.c: 71: break;
  1857  000D42  0012               	return	
  1858  000D44                     
  1859                           ; BSR set to: 0
  1860                           ;EusartApp.c: 75: if(eusart1RxCount > 1)
  1861                           
  1862                           ; BSR set to: 0
  1863  000D44  0E01               	movlw	1
  1864  000D46  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1865  000D48  0012               	return	
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;EusartApp.c: 76: {
  1869                           ;EusartApp.c: 77: request = EUSART1_Read();
  1870  000D4A  EC3E  F018         	call	_EUSART1_Read	;wreg free
  1871  000D4E  0100               	movlb	0	; () banked
  1872  000D50  6FCF               	movwf	_request& (0+255),b
  1873                           
  1874                           ; BSR set to: 0
  1875                           ;EusartApp.c: 78: rxMsgQueue[(2)] = request;
  1876  000D52  C0CF  F0D9         	movff	_request,_rxMsgQueue+2
  1877                           
  1878                           ; BSR set to: 0
  1879                           ;EusartApp.c: 79: cState = READ_DATA_SIZE;
  1880  000D56  0E04               	movlw	4
  1881  000D58  6FD1               	movwf	_cState& (0+255),b
  1882                           
  1883                           ; BSR set to: 0
  1884                           ;EusartApp.c: 80: }
  1885                           ;EusartApp.c: 81: break;
  1886  000D5A  0012               	return	
  1887  000D5C                     
  1888                           ; BSR set to: 0
  1889                           ;EusartApp.c: 84: if(eusart1RxCount > 1)
  1890                           
  1891                           ; BSR set to: 0
  1892  000D5C  0E01               	movlw	1
  1893  000D5E  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1894  000D60  0012               	return	
  1895                           
  1896                           ; BSR set to: 0
  1897                           ;EusartApp.c: 85: {
  1898                           ;EusartApp.c: 86: dataSize = EUSART1_Read();
  1899  000D62  EC3E  F018         	call	_EUSART1_Read	;wreg free
  1900  000D66  0100               	movlb	0	; () banked
  1901  000D68  6FCE               	movwf	_dataSize& (0+255),b
  1902                           
  1903                           ; BSR set to: 0
  1904                           ;EusartApp.c: 87: rxMsgQueue[(3)] = dataSize;
  1905  000D6A  C0CE  F0DA         	movff	_dataSize,_rxMsgQueue+3
  1906                           
  1907                           ; BSR set to: 0
  1908                           ;EusartApp.c: 88: if(dataSize == 0)
  1909  000D6E  51CE               	movf	_dataSize& (0+255),w,b
  1910  000D70  A4D8               	btfss	status,2,c
  1911  000D72  D003               	goto	l193
  1912                           
  1913                           ; BSR set to: 0
  1914                           ;EusartApp.c: 89: {
  1915                           ;EusartApp.c: 90: cState = CHECK_CRC;
  1916  000D74  0E06               	movlw	6
  1917  000D76  6FD1               	movwf	_cState& (0+255),b
  1918                           
  1919                           ;EusartApp.c: 91: }
  1920  000D78  0012               	return	
  1921  000D7A                     l193:
  1922                           
  1923                           ; BSR set to: 0
  1924                           ;EusartApp.c: 92: else
  1925                           ;EusartApp.c: 93: {
  1926                           ;EusartApp.c: 94: cState = READ_DATA;
  1927                           
  1928                           ; BSR set to: 0
  1929  000D7A  0E05               	movlw	5
  1930  000D7C  6FD1               	movwf	_cState& (0+255),b
  1931                           
  1932                           ; BSR set to: 0
  1933                           ;EusartApp.c: 95: }
  1934                           ;EusartApp.c: 97: }
  1935                           ;EusartApp.c: 99: break;
  1936                           
  1937                           ; BSR set to: 0
  1938  000D7E  0012               	return	
  1939  000D80                     
  1940                           ; BSR set to: 0
  1941                           ;EusartApp.c: 103: if(eusart1RxCount >= dataSize)
  1942                           
  1943                           ; BSR set to: 0
  1944  000D80  51CE               	movf	_dataSize& (0+255),w,b
  1945  000D82  5DD2               	subwf	_eusart1RxCount& (0+255),w,b	;volatile
  1946  000D84  A0D8               	btfss	status,0,c
  1947  000D86  0012               	return	
  1948                           
  1949                           ; BSR set to: 0
  1950                           ;EusartApp.c: 104: {
  1951                           ;EusartApp.c: 105: ZeroArray(rxMsgData, (0x14));
  1952  000D88  0EAE               	movlw	low _rxMsgData
  1953  000D8A  6E20               	movwf	ZeroArray@array,c
  1954  000D8C  0E01               	movlw	high _rxMsgData
  1955  000D8E  6E21               	movwf	ZeroArray@array+1,c
  1956  000D90  0E00               	movlw	0
  1957  000D92  6E23               	movwf	ZeroArray@size+1,c
  1958  000D94  0E14               	movlw	20
  1959  000D96  6E22               	movwf	ZeroArray@size,c
  1960  000D98  ECA8  F01B         	call	_ZeroArray	;wreg free
  1961                           
  1962                           ;EusartApp.c: 107: for(int idx = 0; idx < dataSize; idx++)
  1963  000D9C  0E00               	movlw	0
  1964  000D9E  0101               	movlb	1	; () banked
  1965  000DA0  6FCA               	movwf	(readUartMessage@idx+1)& (0+255),b
  1966  000DA2  0E00               	movlw	0
  1967  000DA4  6FC9               	movwf	readUartMessage@idx& (0+255),b
  1968  000DA6  D022               	goto	l197
  1969  000DA8                     
  1970                           ; BSR set to: 1
  1971                           ;EusartApp.c: 108: {
  1972                           ;EusartApp.c: 109: chRec = EUSART1_Read();
  1973                           
  1974                           ; BSR set to: 1
  1975  000DA8  EC3E  F018         	call	_EUSART1_Read	;wreg free
  1976  000DAC  0101               	movlb	1	; () banked
  1977  000DAE  6FCB               	movwf	readUartMessage@chRec& (0+255),b
  1978                           
  1979                           ; BSR set to: 1
  1980                           ;EusartApp.c: 110: rxMsgQueue[(0x4) + msgCount++] = chRec;
  1981  000DB0  0100               	movlb	0	; () banked
  1982  000DB2  51CA               	movf	_msgCount& (0+255),w,b
  1983  000DB4  0101               	movlb	1	; () banked
  1984  000DB6  6FC5               	movwf	??_readUartMessage& (0+255),b
  1985  000DB8  6BC6               	clrf	(??_readUartMessage+1)& (0+255),b
  1986  000DBA  0E04               	movlw	4
  1987  000DBC  27C5               	addwf	??_readUartMessage& (0+255),f,b
  1988  000DBE  0E00               	movlw	0
  1989  000DC0  23C6               	addwfc	(??_readUartMessage+1)& (0+255),f,b
  1990  000DC2  0ED7               	movlw	low _rxMsgQueue
  1991  000DC4  25C5               	addwf	??_readUartMessage& (0+255),w,b
  1992  000DC6  6ED9               	movwf	fsr2l,c
  1993  000DC8  0E00               	movlw	high _rxMsgQueue
  1994  000DCA  21C6               	addwfc	(??_readUartMessage+1)& (0+255),w,b
  1995  000DCC  6EDA               	movwf	fsr2h,c
  1996  000DCE  C1CB  FFDF         	movff	readUartMessage@chRec,indf2
  1997                           
  1998                           ; BSR set to: 1
  1999  000DD2  0100               	movlb	0	; () banked
  2000  000DD4  2BCA               	incf	_msgCount& (0+255),f,b
  2001                           
  2002                           ; BSR set to: 0
  2003                           ;EusartApp.c: 111: rxMsgData[idx] = chRec;
  2004  000DD6  0EAE               	movlw	low _rxMsgData
  2005  000DD8  0101               	movlb	1	; () banked
  2006  000DDA  25C9               	addwf	readUartMessage@idx& (0+255),w,b
  2007  000DDC  6ED9               	movwf	fsr2l,c
  2008  000DDE  0E01               	movlw	high _rxMsgData
  2009  000DE0  21CA               	addwfc	(readUartMessage@idx+1)& (0+255),w,b
  2010  000DE2  6EDA               	movwf	fsr2h,c
  2011  000DE4  C1CB  FFDF         	movff	readUartMessage@chRec,indf2
  2012                           
  2013                           ; BSR set to: 1
  2014  000DE8  4BC9               	infsnz	readUartMessage@idx& (0+255),f,b
  2015  000DEA  2BCA               	incf	(readUartMessage@idx+1)& (0+255),f,b
  2016  000DEC                     l197:
  2017                           
  2018                           ; BSR set to: 1
  2019                           
  2020                           ; BSR set to: 1
  2021  000DEC  0100               	movlb	0	; () banked
  2022  000DEE  51CE               	movf	_dataSize& (0+255),w,b
  2023  000DF0  0101               	movlb	1	; () banked
  2024  000DF2  6FC5               	movwf	??_readUartMessage& (0+255),b
  2025  000DF4  6BC6               	clrf	(??_readUartMessage+1)& (0+255),b
  2026  000DF6  51C5               	movf	??_readUartMessage& (0+255),w,b
  2027  000DF8  5DC9               	subwf	readUartMessage@idx& (0+255),w,b
  2028  000DFA  51CA               	movf	(readUartMessage@idx+1)& (0+255),w,b
  2029  000DFC  0A80               	xorlw	128
  2030  000DFE  6FC7               	movwf	(??_readUartMessage+2)& (0+255),b
  2031  000E00  51C6               	movf	(??_readUartMessage+1)& (0+255),w,b
  2032  000E02  0A80               	xorlw	128
  2033  000E04  59C7               	subwfb	(??_readUartMessage+2)& (0+255),w,b
  2034  000E06  A0D8               	btfss	status,0,c
  2035  000E08  D7CF               	goto	l198
  2036                           
  2037                           ; BSR set to: 1
  2038                           ;EusartApp.c: 112: }
  2039                           ;EusartApp.c: 114: cState = CHECK_CRC;
  2040                           
  2041                           ; BSR set to: 1
  2042  000E0A  0E06               	movlw	6
  2043  000E0C  0100               	movlb	0	; () banked
  2044  000E0E  6FD1               	movwf	_cState& (0+255),b
  2045                           
  2046                           ; BSR set to: 0
  2047                           ;EusartApp.c: 115: }
  2048                           ;EusartApp.c: 116: break;
  2049  000E10  0012               	return	
  2050  000E12                     
  2051                           ; BSR set to: 0
  2052                           ;EusartApp.c: 119: if(eusart1RxCount >= 1)
  2053                           
  2054                           ; BSR set to: 0
  2055  000E12  51D2               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  2056  000E14  B4D8               	btfsc	status,2,c
  2057  000E16  0012               	return	
  2058                           
  2059                           ; BSR set to: 0
  2060                           ;EusartApp.c: 120: {
  2061                           ;EusartApp.c: 121: crcGiven = EUSART1_Read();
  2062  000E18  EC3E  F018         	call	_EUSART1_Read	;wreg free
  2063  000E1C  0100               	movlb	0	; () banked
  2064  000E1E  6FCB               	movwf	_crcGiven& (0+255),b
  2065                           
  2066                           ; BSR set to: 0
  2067                           ;EusartApp.c: 122: crcCalc = crc8(rxMsgQueue, (0x4) + msgCount);
  2068  000E20  0ED7               	movlw	low _rxMsgQueue
  2069  000E22  6E18               	movwf	crc8@dataArray,c
  2070  000E24  0E00               	movlw	high _rxMsgQueue
  2071  000E26  6E19               	movwf	crc8@dataArray+1,c
  2072  000E28  0E04               	movlw	4
  2073  000E2A  25CA               	addwf	_msgCount& (0+255),w,b
  2074  000E2C  6E1A               	movwf	crc8@dataSize,c
  2075  000E2E  6A1B               	clrf	crc8@dataSize+1,c
  2076  000E30  0E00               	movlw	0
  2077  000E32  221B               	addwfc	crc8@dataSize+1,f,c
  2078  000E34  ECAD  F017         	call	_crc8	;wreg free
  2079  000E38  0100               	movlb	0	; () banked
  2080  000E3A  6FCC               	movwf	_crcCalc& (0+255),b
  2081                           
  2082                           ; BSR set to: 0
  2083                           ;EusartApp.c: 124: if(crcGiven == crcCalc)
  2084  000E3C  51CC               	movf	_crcCalc& (0+255),w,b
  2085  000E3E  19CB               	xorwf	_crcGiven& (0+255),w,b
  2086  000E40  A4D8               	btfss	status,2,c
  2087  000E42  D003               	goto	l202
  2088                           
  2089                           ; BSR set to: 0
  2090                           ;EusartApp.c: 125: {
  2091                           ;EusartApp.c: 126: cState = JUMP_FUNCTION;
  2092  000E44  0E07               	movlw	7
  2093  000E46  6FD1               	movwf	_cState& (0+255),b
  2094                           
  2095                           ;EusartApp.c: 127: }
  2096  000E48  0012               	return	
  2097  000E4A                     l202:
  2098                           
  2099                           ; BSR set to: 0
  2100                           ;EusartApp.c: 128: else
  2101                           ;EusartApp.c: 129: {
  2102                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  2103                           
  2104                           ; BSR set to: 0
  2105  000E4A  0E00               	movlw	0
  2106  000E4C  6FD1               	movwf	_cState& (0+255),b
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;EusartApp.c: 131: }
  2110                           ;EusartApp.c: 132: }
  2111                           ;EusartApp.c: 133: break;
  2112                           
  2113                           ; BSR set to: 0
  2114  000E4E  0012               	return	
  2115  000E50                     
  2116                           ; BSR set to: 0
  2117                           ;EusartApp.c: 136: groupsArray[group - 1](request, rxMsgData);
  2118                           
  2119                           ; BSR set to: 0
  2120  000E50  0EFE               	movlw	254
  2121  000E52  0101               	movlb	1	; () banked
  2122  000E54  6FC5               	movwf	??_readUartMessage& (0+255),b
  2123  000E56  0EFF               	movlw	255
  2124  000E58  6FC6               	movwf	(??_readUartMessage+1)& (0+255),b
  2125  000E5A  0100               	movlb	0	; () banked
  2126  000E5C  51D0               	movf	_group& (0+255),w,b
  2127  000E5E  0101               	movlb	1	; () banked
  2128  000E60  6FC7               	movwf	(??_readUartMessage+2)& (0+255),b
  2129  000E62  6BC8               	clrf	(??_readUartMessage+3)& (0+255),b
  2130  000E64  90D8               	bcf	status,0,c
  2131  000E66  37C7               	rlcf	(??_readUartMessage+2)& (0+255),f,b
  2132  000E68  37C8               	rlcf	(??_readUartMessage+3)& (0+255),f,b
  2133  000E6A  51C5               	movf	??_readUartMessage& (0+255),w,b
  2134  000E6C  27C7               	addwf	(??_readUartMessage+2)& (0+255),f,b
  2135  000E6E  51C6               	movf	(??_readUartMessage+1)& (0+255),w,b
  2136  000E70  23C8               	addwfc	(??_readUartMessage+3)& (0+255),f,b
  2137  000E72  0EEB               	movlw	low _groupsArray
  2138  000E74  25C7               	addwf	(??_readUartMessage+2)& (0+255),w,b
  2139  000E76  6ED9               	movwf	fsr2l,c
  2140  000E78  0E00               	movlw	high _groupsArray
  2141  000E7A  21C8               	addwfc	(??_readUartMessage+3)& (0+255),w,b
  2142  000E7C  6EDA               	movwf	fsr2h,c
  2143  000E7E  D801               	call	u7838
  2144  000E80  D010               	goto	u7839
  2145  000E82                     u7838:
  2146  000E82  0005               	push	
  2147  000E84  6EFA               	movwf	pclath,c
  2148  000E86  50DE               	movf	postinc2,w,c
  2149  000E88  6EFD               	movwf	tosl,c
  2150  000E8A  50DE               	movf	postinc2,w,c
  2151  000E8C  6EFE               	movwf	tosh,c
  2152  000E8E  50F8               	movf	tblptru,w,c
  2153  000E90  6EFF               	movwf	tosu,c
  2154  000E92  50FA               	movf	pclath,w,c
  2155  000E94  0EAE               	movlw	low _rxMsgData
  2156  000E96  6FC2               	movwf	GroupDAC@data& (0+255),b
  2157  000E98  0E01               	movlw	high _rxMsgData
  2158  000E9A  6FC3               	movwf	(GroupDAC@data+1)& (0+255),b
  2159  000E9C  0100               	movlb	0	; () banked
  2160  000E9E  51CF               	movf	_request& (0+255),w,b
  2161  000EA0  0012               	return		;indir
  2162  000EA2                     u7839:
  2163                           
  2164                           ;EusartApp.c: 137: cState = START_RX_MESSAGE_READ;
  2165  000EA2  0E00               	movlw	0
  2166  000EA4  0100               	movlb	0	; () banked
  2167  000EA6  6FD1               	movwf	_cState& (0+255),b
  2168                           
  2169                           ; BSR set to: 0
  2170                           ;EusartApp.c: 139: }
  2171                           
  2172                           ;EusartApp.c: 138: break;
  2173  000EA8  0012               	return	
  2174  000EAA                     l178:
  2175                           
  2176                           ; BSR set to: 0
  2177  000EAA  0100               	movlb	0	; () banked
  2178  000EAC  51D1               	movf	_cState& (0+255),w,b
  2179                           
  2180                           ; Switch size 1, requested type "space"
  2181                           ; Number of cases is 8, Range of values is 0 to 7
  2182                           ; switch strategies available:
  2183                           ; Name         Instructions Cycles
  2184                           ; simple_byte           25    13 (average)
  2185                           ;	Chosen strategy is simple_byte
  2186  000EAE  0A00               	xorlw	0	; case 0
  2187  000EB0  B4D8               	btfsc	status,2,c
  2188  000EB2  D71C               	goto	l179
  2189  000EB4  0A01               	xorlw	1	; case 1
  2190  000EB6  B4D8               	btfsc	status,2,c
  2191  000EB8  D720               	goto	l182
  2192  000EBA  0A03               	xorlw	3	; case 2
  2193  000EBC  B4D8               	btfsc	status,2,c
  2194  000EBE  D736               	goto	l187
  2195  000EC0  0A01               	xorlw	1	; case 3
  2196  000EC2  B4D8               	btfsc	status,2,c
  2197  000EC4  D73F               	goto	l189
  2198  000EC6  0A07               	xorlw	7	; case 4
  2199  000EC8  B4D8               	btfsc	status,2,c
  2200  000ECA  D748               	goto	l191
  2201  000ECC  0A01               	xorlw	1	; case 5
  2202  000ECE  B4D8               	btfsc	status,2,c
  2203  000ED0  D757               	goto	l195
  2204  000ED2  0A03               	xorlw	3	; case 6
  2205  000ED4  B4D8               	btfsc	status,2,c
  2206  000ED6  D79D               	goto	l200
  2207  000ED8  0A01               	xorlw	1	; case 7
  2208  000EDA  A4D8               	btfss	status,2,c
  2209  000EDC  0012               	return	
  2210  000EDE  D7B8               	goto	l204
  2211  000EE0                     __end_of_readUartMessage:
  2212                           	opt stack 0
  2213                           tosu	equ	0xFFF
  2214                           tosh	equ	0xFFE
  2215                           tosl	equ	0xFFD
  2216                           pclath	equ	0xFFA
  2217                           tblptru	equ	0xFF8
  2218                           tblptrh	equ	0xFF7
  2219                           tblptrl	equ	0xFF6
  2220                           tablat	equ	0xFF5
  2221                           postinc0	equ	0xFEE
  2222                           wreg	equ	0xFE8
  2223                           postdec1	equ	0xFE5
  2224                           fsr1l	equ	0xFE1
  2225                           indf2	equ	0xFDF
  2226                           postinc2	equ	0xFDE
  2227                           fsr2h	equ	0xFDA
  2228                           fsr2l	equ	0xFD9
  2229                           status	equ	0xFD8
  2230                           
  2231 ;; *************** function _InitRxMessageParams *****************
  2232 ;; Defined at:
  2233 ;;		line 142 in file "EusartApp.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;		None
  2236 ;; Auto vars:     Size  Location     Type
  2237 ;;		None
  2238 ;; Return value:  Size  Location     Type
  2239 ;;                  1    wreg      void 
  2240 ;; Registers used:
  2241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2242 ;; Tracked objects:
  2243 ;;		On entry : 0/0
  2244 ;;		On exit  : 0/0
  2245 ;;		Unchanged: 0/0
  2246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2247 ;;      Params:         0       0       0       0       0       0       0
  2248 ;;      Locals:         0       0       0       0       0       0       0
  2249 ;;      Temps:          0       0       0       0       0       0       0
  2250 ;;      Totals:         0       0       0       0       0       0       0
  2251 ;;Total ram usage:        0 bytes
  2252 ;; Hardware stack levels used:    1
  2253 ;; Hardware stack levels required when called:    5
  2254 ;; This function calls:
  2255 ;;		_ZeroArray
  2256 ;; This function is called by:
  2257 ;;		_readUartMessage
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261                           	psect	text2
  2262  00359C                     __ptext2:
  2263                           	opt stack 0
  2264  00359C                     _InitRxMessageParams:
  2265                           	opt stack 24
  2266                           
  2267                           ;EusartApp.c: 146: dataSize = 0;
  2268                           
  2269                           ;incstack = 0
  2270  00359C  0E00               	movlw	0
  2271  00359E  0100               	movlb	0	; () banked
  2272  0035A0  6FCE               	movwf	_dataSize& (0+255),b
  2273                           
  2274                           ;EusartApp.c: 147: crcCalc = 0;
  2275  0035A2  0E00               	movlw	0
  2276  0035A4  6FCC               	movwf	_crcCalc& (0+255),b
  2277                           
  2278                           ;EusartApp.c: 148: crcGiven = 0;
  2279  0035A6  0E00               	movlw	0
  2280  0035A8  6FCB               	movwf	_crcGiven& (0+255),b
  2281                           
  2282                           ;EusartApp.c: 149: msgCount = 0;
  2283  0035AA  0E00               	movlw	0
  2284  0035AC  6FCA               	movwf	_msgCount& (0+255),b
  2285                           
  2286                           ; BSR set to: 0
  2287                           ;EusartApp.c: 150: ZeroArray(rxMsgQueue, (0x14));
  2288  0035AE  0ED7               	movlw	low _rxMsgQueue
  2289  0035B0  6E20               	movwf	ZeroArray@array,c
  2290  0035B2  0E00               	movlw	high _rxMsgQueue
  2291  0035B4  6E21               	movwf	ZeroArray@array+1,c
  2292  0035B6  0E00               	movlw	0
  2293  0035B8  6E23               	movwf	ZeroArray@size+1,c
  2294  0035BA  0E14               	movlw	20
  2295  0035BC  6E22               	movwf	ZeroArray@size,c
  2296  0035BE  ECA8  F01B         	call	_ZeroArray
  2297  0035C2  0012               	return		;funcret
  2298  0035C4                     __end_of_InitRxMessageParams:
  2299                           	opt stack 0
  2300                           tosu	equ	0xFFF
  2301                           tosh	equ	0xFFE
  2302                           tosl	equ	0xFFD
  2303                           pclath	equ	0xFFA
  2304                           tblptru	equ	0xFF8
  2305                           tblptrh	equ	0xFF7
  2306                           tblptrl	equ	0xFF6
  2307                           tablat	equ	0xFF5
  2308                           postinc0	equ	0xFEE
  2309                           wreg	equ	0xFE8
  2310                           postdec1	equ	0xFE5
  2311                           fsr1l	equ	0xFE1
  2312                           indf2	equ	0xFDF
  2313                           postinc2	equ	0xFDE
  2314                           fsr2h	equ	0xFDA
  2315                           fsr2l	equ	0xFD9
  2316                           status	equ	0xFD8
  2317                           
  2318 ;; *************** function _GroupDAC *****************
  2319 ;; Defined at:
  2320 ;;		line 133 in file "MessageFunctions.c"
  2321 ;; Parameters:    Size  Location     Type
  2322 ;;  request         1    wreg     enum E12
  2323 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2324 ;;		 -> rxMsgData(20), 
  2325 ;; Auto vars:     Size  Location     Type
  2326 ;;  request         1   95[BANK0 ] enum E12
  2327 ;; Return value:  Size  Location     Type
  2328 ;;                  1    wreg      void 
  2329 ;; Registers used:
  2330 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2331 ;; Tracked objects:
  2332 ;;		On entry : 0/0
  2333 ;;		On exit  : 0/0
  2334 ;;		Unchanged: 0/0
  2335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2336 ;;      Params:         0       0       2       0       0       0       0
  2337 ;;      Locals:         0       1       0       0       0       0       0
  2338 ;;      Temps:          0       0       0       0       0       0       0
  2339 ;;      Totals:         0       1       2       0       0       0       0
  2340 ;;Total ram usage:        3 bytes
  2341 ;; Hardware stack levels used:    1
  2342 ;; Hardware stack levels required when called:    8
  2343 ;; This function calls:
  2344 ;;		_DacSetValue
  2345 ;; This function is called by:
  2346 ;;		_readUartMessage
  2347 ;; This function uses a non-reentrant model
  2348 ;;
  2349                           
  2350                           	psect	text3
  2351  0036F4                     __ptext3:
  2352                           	opt stack 0
  2353  0036F4                     _GroupDAC:
  2354                           	opt stack 21
  2355                           
  2356                           ;incstack = 0
  2357                           ;GroupDAC@request stored from wreg
  2358  0036F4  0100               	movlb	0	; () banked
  2359  0036F6  6FBF               	movwf	GroupDAC@request& (0+255),b
  2360                           
  2361                           ;MessageFunctions.c: 135: switch (request)
  2362  0036F8  D007               	goto	l1220
  2363  0036FA                     
  2364                           ;MessageFunctions.c: 138: DacSetValue(data);
  2365  0036FA  C1C2  F086         	movff	GroupDAC@data,DacSetValue@data
  2366  0036FE  C1C3  F087         	movff	GroupDAC@data+1,DacSetValue@data+1
  2367  003702  ECEC  F019         	call	_DacSetValue	;wreg free
  2368                           
  2369                           ;MessageFunctions.c: 143: }
  2370                           
  2371                           ;MessageFunctions.c: 142: break;
  2372                           
  2373                           ;MessageFunctions.c: 141: default:
  2374                           
  2375                           ;MessageFunctions.c: 139: break;
  2376  003706  0012               	return	
  2377  003708                     l1220:
  2378  003708  0100               	movlb	0	; () banked
  2379  00370A  51BF               	movf	GroupDAC@request& (0+255),w,b
  2380                           
  2381                           ; Switch size 1, requested type "space"
  2382                           ; Number of cases is 1, Range of values is 97 to 97
  2383                           ; switch strategies available:
  2384                           ; Name         Instructions Cycles
  2385                           ; simple_byte            4     3 (average)
  2386                           ;	Chosen strategy is simple_byte
  2387  00370C  0A61               	xorlw	97	; case 97
  2388  00370E  A4D8               	btfss	status,2,c
  2389  003710  0012               	return	
  2390  003712  D7F3               	goto	l1221
  2391  003714                     __end_of_GroupDAC:
  2392                           	opt stack 0
  2393                           tosu	equ	0xFFF
  2394                           tosh	equ	0xFFE
  2395                           tosl	equ	0xFFD
  2396                           pclath	equ	0xFFA
  2397                           tblptru	equ	0xFF8
  2398                           tblptrh	equ	0xFF7
  2399                           tblptrl	equ	0xFF6
  2400                           tablat	equ	0xFF5
  2401                           postinc0	equ	0xFEE
  2402                           wreg	equ	0xFE8
  2403                           postdec1	equ	0xFE5
  2404                           fsr1l	equ	0xFE1
  2405                           indf2	equ	0xFDF
  2406                           postinc2	equ	0xFDE
  2407                           fsr2h	equ	0xFDA
  2408                           fsr2l	equ	0xFD9
  2409                           status	equ	0xFD8
  2410                           
  2411 ;; *************** function _GroupFlashMemory *****************
  2412 ;; Defined at:
  2413 ;;		line 112 in file "MessageFunctions.c"
  2414 ;; Parameters:    Size  Location     Type
  2415 ;;  request         1    wreg     enum E12
  2416 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2417 ;; Auto vars:     Size  Location     Type
  2418 ;;  request         1    2[BANK1 ] enum E12
  2419 ;; Return value:  Size  Location     Type
  2420 ;;                  1    wreg      void 
  2421 ;; Registers used:
  2422 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2428 ;;      Params:         0       0       2       0       0       0       0
  2429 ;;      Locals:         0       0       1       0       0       0       0
  2430 ;;      Temps:          0       1       0       0       0       0       0
  2431 ;;      Totals:         0       1       3       0       0       0       0
  2432 ;;Total ram usage:        4 bytes
  2433 ;; Hardware stack levels used:    1
  2434 ;; Hardware stack levels required when called:    7
  2435 ;; This function calls:
  2436 ;;		_FlashEreaseMem
  2437 ;;		_FlashReadCondition
  2438 ;;		_FlashReadUart
  2439 ;; This function is called by:
  2440 ;;		_readUartMessage
  2441 ;; This function uses a non-reentrant model
  2442 ;;
  2443                           
  2444                           	psect	text4
  2445  003038                     __ptext4:
  2446                           	opt stack 0
  2447  003038                     _GroupFlashMemory:
  2448                           	opt stack 22
  2449                           
  2450                           ;incstack = 0
  2451                           ;GroupFlashMemory@request stored from wreg
  2452  003038  0101               	movlb	1	; () banked
  2453  00303A  6FC4               	movwf	GroupFlashMemory@request& (0+255),b
  2454                           
  2455                           ;MessageFunctions.c: 114: switch (request)
  2456  00303C  D013               	goto	l1211
  2457  00303E                     
  2458                           ;MessageFunctions.c: 117: FlashEreaseMem();
  2459  00303E  EC5B  F017         	call	_FlashEreaseMem	;wreg free
  2460                           
  2461                           ;MessageFunctions.c: 118: break;
  2462  003042  0012               	return	
  2463  003044                     
  2464                           ;MessageFunctions.c: 121: FlashReadCondition();
  2465  003044  EC55  F00C         	call	_FlashReadCondition	;wreg free
  2466                           
  2467                           ;MessageFunctions.c: 122: break;
  2468  003048  0012               	return	
  2469  00304A                     
  2470                           ;MessageFunctions.c: 125: FlashReadUart((int)data[0]);
  2471  00304A  C1C2  FFD9         	movff	GroupFlashMemory@data,fsr2l
  2472  00304E  C1C3  FFDA         	movff	GroupFlashMemory@data+1,fsr2h
  2473  003052  50DF               	movf	indf2,w,c
  2474  003054  0100               	movlb	0	; () banked
  2475  003056  6FBF               	movwf	??_GroupFlashMemory& (0+255),b
  2476  003058  51BF               	movf	??_GroupFlashMemory& (0+255),w,b
  2477  00305A  6E2C               	movwf	FlashReadUart@numOfSampleToRead,c
  2478  00305C  6A2D               	clrf	FlashReadUart@numOfSampleToRead+1,c
  2479  00305E  EC55  F003         	call	_FlashReadUart	;wreg free
  2480                           
  2481                           ;MessageFunctions.c: 130: }
  2482                           
  2483                           ;MessageFunctions.c: 129: break;
  2484                           
  2485                           ;MessageFunctions.c: 128: default:
  2486                           
  2487                           ;MessageFunctions.c: 126: break;
  2488  003062  0012               	return	
  2489  003064                     l1211:
  2490  003064  0101               	movlb	1	; () banked
  2491  003066  51C4               	movf	GroupFlashMemory@request& (0+255),w,b
  2492                           
  2493                           ; Switch size 1, requested type "space"
  2494                           ; Number of cases is 3, Range of values is 81 to 83
  2495                           ; switch strategies available:
  2496                           ; Name         Instructions Cycles
  2497                           ; simple_byte           10     6 (average)
  2498                           ;	Chosen strategy is simple_byte
  2499  003068  0A51               	xorlw	81	; case 81
  2500  00306A  B4D8               	btfsc	status,2,c
  2501  00306C  D7E8               	goto	l1212
  2502  00306E  0A03               	xorlw	3	; case 82
  2503  003070  B4D8               	btfsc	status,2,c
  2504  003072  D7E8               	goto	l1214
  2505  003074  0A01               	xorlw	1	; case 83
  2506  003076  A4D8               	btfss	status,2,c
  2507  003078  0012               	return	
  2508  00307A  D7E7               	goto	l1215
  2509  00307C                     __end_of_GroupFlashMemory:
  2510                           	opt stack 0
  2511                           tosu	equ	0xFFF
  2512                           tosh	equ	0xFFE
  2513                           tosl	equ	0xFFD
  2514                           pclath	equ	0xFFA
  2515                           tblptru	equ	0xFF8
  2516                           tblptrh	equ	0xFF7
  2517                           tblptrl	equ	0xFF6
  2518                           tablat	equ	0xFF5
  2519                           postinc0	equ	0xFEE
  2520                           wreg	equ	0xFE8
  2521                           postdec1	equ	0xFE5
  2522                           fsr1l	equ	0xFE1
  2523                           indf2	equ	0xFDF
  2524                           postinc2	equ	0xFDE
  2525                           fsr2h	equ	0xFDA
  2526                           fsr2l	equ	0xFD9
  2527                           status	equ	0xFD8
  2528                           
  2529 ;; *************** function _GroupAdc *****************
  2530 ;; Defined at:
  2531 ;;		line 67 in file "MessageFunctions.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;  request         1    wreg     enum E12
  2534 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2535 ;; Auto vars:     Size  Location     Type
  2536 ;;  request         1   95[BANK0 ] enum E12
  2537 ;; Return value:  Size  Location     Type
  2538 ;;                  1    wreg      void 
  2539 ;; Registers used:
  2540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2541 ;; Tracked objects:
  2542 ;;		On entry : 0/0
  2543 ;;		On exit  : 0/0
  2544 ;;		Unchanged: 0/0
  2545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2546 ;;      Params:         0       0       2       0       0       0       0
  2547 ;;      Locals:         0       1       0       0       0       0       0
  2548 ;;      Temps:          0       0       0       0       0       0       0
  2549 ;;      Totals:         0       1       2       0       0       0       0
  2550 ;;Total ram usage:        3 bytes
  2551 ;; Hardware stack levels used:    1
  2552 ;; Hardware stack levels required when called:    7
  2553 ;; This function calls:
  2554 ;;		_SetAdcOperationMode
  2555 ;;		_SetChannelMode
  2556 ;;		_SetConversionResultFormat
  2557 ;; This function is called by:
  2558 ;;		_readUartMessage
  2559 ;; This function uses a non-reentrant model
  2560 ;;
  2561                           
  2562                           	psect	text5
  2563  002FA8                     __ptext5:
  2564                           	opt stack 0
  2565  002FA8                     _GroupAdc:
  2566                           	opt stack 22
  2567                           
  2568                           ;incstack = 0
  2569                           ;GroupAdc@request stored from wreg
  2570  002FA8  0100               	movlb	0	; () banked
  2571  002FAA  6FBF               	movwf	GroupAdc@request& (0+255),b
  2572                           
  2573                           ;MessageFunctions.c: 69: switch (request)
  2574  002FAC  D015               	goto	l1192
  2575  002FAE                     
  2576                           ;MessageFunctions.c: 72: SetAdcOperationMode(data);
  2577  002FAE  C1C2  F02C         	movff	GroupAdc@data,SetAdcOperationMode@data
  2578  002FB2  C1C3  F02D         	movff	GroupAdc@data+1,SetAdcOperationMode@data+1
  2579  002FB6  EC63  F01C         	call	_SetAdcOperationMode	;wreg free
  2580                           
  2581                           ;MessageFunctions.c: 73: break;
  2582  002FBA  0012               	return	
  2583  002FBC                     
  2584                           ;MessageFunctions.c: 76: SetChannelMode(data);
  2585  002FBC  C1C2  F02C         	movff	GroupAdc@data,SetChannelMode@data
  2586  002FC0  C1C3  F02D         	movff	GroupAdc@data+1,SetChannelMode@data+1
  2587  002FC4  EC71  F01A         	call	_SetChannelMode	;wreg free
  2588                           
  2589                           ;MessageFunctions.c: 77: break;
  2590  002FC8  0012               	return	
  2591  002FCA                     
  2592                           ;MessageFunctions.c: 80: SetConversionResultFormat(data);
  2593  002FCA  C1C2  F02C         	movff	GroupAdc@data,SetConversionResultFormat@data
  2594  002FCE  C1C3  F02D         	movff	GroupAdc@data+1,SetConversionResultFormat@data+1
  2595  002FD2  EC5D  F01C         	call	_SetConversionResultFormat	;wreg free
  2596                           
  2597                           ;MessageFunctions.c: 85: }
  2598                           
  2599                           ;MessageFunctions.c: 84: break;
  2600                           
  2601                           ;MessageFunctions.c: 83: default:
  2602                           
  2603                           ;MessageFunctions.c: 81: break;
  2604  002FD6  0012               	return	
  2605  002FD8                     l1192:
  2606  002FD8  0100               	movlb	0	; () banked
  2607  002FDA  51BF               	movf	GroupAdc@request& (0+255),w,b
  2608                           
  2609                           ; Switch size 1, requested type "space"
  2610                           ; Number of cases is 3, Range of values is 49 to 51
  2611                           ; switch strategies available:
  2612                           ; Name         Instructions Cycles
  2613                           ; simple_byte           10     6 (average)
  2614                           ;	Chosen strategy is simple_byte
  2615  002FDC  0A31               	xorlw	49	; case 49
  2616  002FDE  B4D8               	btfsc	status,2,c
  2617  002FE0  D7E6               	goto	l1193
  2618  002FE2  0A03               	xorlw	3	; case 50
  2619  002FE4  B4D8               	btfsc	status,2,c
  2620  002FE6  D7EA               	goto	l1195
  2621  002FE8  0A01               	xorlw	1	; case 51
  2622  002FEA  A4D8               	btfss	status,2,c
  2623  002FEC  0012               	return	
  2624  002FEE  D7ED               	goto	l1196
  2625  002FF0                     __end_of_GroupAdc:
  2626                           	opt stack 0
  2627                           tosu	equ	0xFFF
  2628                           tosh	equ	0xFFE
  2629                           tosl	equ	0xFFD
  2630                           pclath	equ	0xFFA
  2631                           tblptru	equ	0xFF8
  2632                           tblptrh	equ	0xFF7
  2633                           tblptrl	equ	0xFF6
  2634                           tablat	equ	0xFF5
  2635                           postinc0	equ	0xFEE
  2636                           wreg	equ	0xFE8
  2637                           postdec1	equ	0xFE5
  2638                           fsr1l	equ	0xFE1
  2639                           indf2	equ	0xFDF
  2640                           postinc2	equ	0xFDE
  2641                           fsr2h	equ	0xFDA
  2642                           fsr2l	equ	0xFD9
  2643                           status	equ	0xFD8
  2644                           
  2645 ;; *************** function _GroupStatusAndVersion *****************
  2646 ;; Defined at:
  2647 ;;		line 38 in file "MessageFunctions.c"
  2648 ;; Parameters:    Size  Location     Type
  2649 ;;  request         1    wreg     enum E12
  2650 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2651 ;; Auto vars:     Size  Location     Type
  2652 ;;  request         1   95[BANK0 ] enum E12
  2653 ;; Return value:  Size  Location     Type
  2654 ;;                  1    wreg      void 
  2655 ;; Registers used:
  2656 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2657 ;; Tracked objects:
  2658 ;;		On entry : 0/0
  2659 ;;		On exit  : 0/0
  2660 ;;		Unchanged: 0/0
  2661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2662 ;;      Params:         0       0       2       0       0       0       0
  2663 ;;      Locals:         0       1       0       0       0       0       0
  2664 ;;      Temps:          0       0       0       0       0       0       0
  2665 ;;      Totals:         0       1       2       0       0       0       0
  2666 ;;Total ram usage:        3 bytes
  2667 ;; Hardware stack levels used:    1
  2668 ;; Hardware stack levels required when called:    7
  2669 ;; This function calls:
  2670 ;;		_GetCpldFwVersion
  2671 ;;		_GetMcuFwVersion
  2672 ;;		_GetMcuRunTime
  2673 ;;		_SetCpldFwVersion
  2674 ;;		_SetMcuFwVersion
  2675 ;; This function is called by:
  2676 ;;		_readUartMessage
  2677 ;; This function uses a non-reentrant model
  2678 ;;
  2679                           
  2680                           	psect	text6
  2681  002CAC                     __ptext6:
  2682                           	opt stack 0
  2683  002CAC                     _GroupStatusAndVersion:
  2684                           	opt stack 22
  2685                           
  2686                           ;incstack = 0
  2687                           ;GroupStatusAndVersion@request stored from wreg
  2688  002CAC  0100               	movlb	0	; () banked
  2689  002CAE  6FBF               	movwf	GroupStatusAndVersion@request& (0+255),b
  2690                           
  2691                           ;MessageFunctions.c: 40: switch (request)
  2692  002CB0  D017               	goto	l1181
  2693  002CB2                     
  2694                           ;MessageFunctions.c: 43: GetMcuFwVersion();
  2695  002CB2  ECE9  F013         	call	_GetMcuFwVersion	;wreg free
  2696                           
  2697                           ;MessageFunctions.c: 44: break;
  2698  002CB6  0012               	return	
  2699  002CB8                     
  2700                           ;MessageFunctions.c: 47: SetMcuFwVersion(data);
  2701  002CB8  C1C2  F02C         	movff	GroupStatusAndVersion@data,SetMcuFwVersion@data
  2702  002CBC  C1C3  F02D         	movff	GroupStatusAndVersion@data+1,SetMcuFwVersion@data+1
  2703  002CC0  ECB6  F019         	call	_SetMcuFwVersion	;wreg free
  2704                           
  2705                           ;MessageFunctions.c: 48: break;
  2706  002CC4  0012               	return	
  2707  002CC6                     
  2708                           ;MessageFunctions.c: 51: GetCpldFwVersion();
  2709  002CC6  ECD0  F012         	call	_GetCpldFwVersion	;wreg free
  2710                           
  2711                           ;MessageFunctions.c: 52: break;
  2712  002CCA  0012               	return	
  2713  002CCC                     
  2714                           ;MessageFunctions.c: 55: SetCpldFwVersion(data);
  2715  002CCC  C1C2  F02C         	movff	GroupStatusAndVersion@data,SetCpldFwVersion@data
  2716  002CD0  C1C3  F02D         	movff	GroupStatusAndVersion@data+1,SetCpldFwVersion@data+1
  2717  002CD4  ECA3  F018         	call	_SetCpldFwVersion	;wreg free
  2718                           
  2719                           ;MessageFunctions.c: 56: break;
  2720  002CD8  0012               	return	
  2721  002CDA                     
  2722                           ;MessageFunctions.c: 59: GetMcuRunTime();
  2723  002CDA  ECC3  F00E         	call	_GetMcuRunTime	;wreg free
  2724                           
  2725                           ;MessageFunctions.c: 64: }
  2726                           
  2727                           ;MessageFunctions.c: 63: break;
  2728                           
  2729                           ;MessageFunctions.c: 62: default:
  2730                           
  2731                           ;MessageFunctions.c: 60: break;
  2732  002CDE  0012               	return	
  2733  002CE0                     l1181:
  2734  002CE0  0100               	movlb	0	; () banked
  2735  002CE2  51BF               	movf	GroupStatusAndVersion@request& (0+255),w,b
  2736                           
  2737                           ; Switch size 1, requested type "space"
  2738                           ; Number of cases is 5, Range of values is 33 to 37
  2739                           ; switch strategies available:
  2740                           ; Name         Instructions Cycles
  2741                           ; simple_byte           16     9 (average)
  2742                           ;	Chosen strategy is simple_byte
  2743  002CE4  0A21               	xorlw	33	; case 33
  2744  002CE6  B4D8               	btfsc	status,2,c
  2745  002CE8  D7F8               	goto	l1187
  2746  002CEA  0A03               	xorlw	3	; case 34
  2747  002CEC  B4D8               	btfsc	status,2,c
  2748  002CEE  D7E1               	goto	l1182
  2749  002CF0  0A01               	xorlw	1	; case 35
  2750  002CF2  B4D8               	btfsc	status,2,c
  2751  002CF4  D7E8               	goto	l1185
  2752  002CF6  0A07               	xorlw	7	; case 36
  2753  002CF8  B4D8               	btfsc	status,2,c
  2754  002CFA  D7DE               	goto	l1184
  2755  002CFC  0A01               	xorlw	1	; case 37
  2756  002CFE  A4D8               	btfss	status,2,c
  2757  002D00  0012               	return	
  2758  002D02  D7E4               	goto	l1186
  2759  002D04                     __end_of_GroupStatusAndVersion:
  2760                           	opt stack 0
  2761                           tosu	equ	0xFFF
  2762                           tosh	equ	0xFFE
  2763                           tosl	equ	0xFFD
  2764                           pclath	equ	0xFFA
  2765                           tblptru	equ	0xFF8
  2766                           tblptrh	equ	0xFF7
  2767                           tblptrl	equ	0xFF6
  2768                           tablat	equ	0xFF5
  2769                           postinc0	equ	0xFEE
  2770                           wreg	equ	0xFE8
  2771                           postdec1	equ	0xFE5
  2772                           fsr1l	equ	0xFE1
  2773                           indf2	equ	0xFDF
  2774                           postinc2	equ	0xFDE
  2775                           fsr2h	equ	0xFDA
  2776                           fsr2l	equ	0xFD9
  2777                           status	equ	0xFD8
  2778                           
  2779 ;; *************** function _GroupControlMcu *****************
  2780 ;; Defined at:
  2781 ;;		line 11 in file "MessageFunctions.c"
  2782 ;; Parameters:    Size  Location     Type
  2783 ;;  request         1    wreg     enum E12
  2784 ;;  data            3    0[BANK1 ] PTR unsigned char 
  2785 ;; Auto vars:     Size  Location     Type
  2786 ;;  request         1   95[BANK0 ] enum E12
  2787 ;; Return value:  Size  Location     Type
  2788 ;;                  1    wreg      void 
  2789 ;; Registers used:
  2790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2791 ;; Tracked objects:
  2792 ;;		On entry : 0/0
  2793 ;;		On exit  : 0/0
  2794 ;;		Unchanged: 0/0
  2795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2796 ;;      Params:         0       0       2       0       0       0       0
  2797 ;;      Locals:         0       1       0       0       0       0       0
  2798 ;;      Temps:          0       0       0       0       0       0       0
  2799 ;;      Totals:         0       1       2       0       0       0       0
  2800 ;;Total ram usage:        3 bytes
  2801 ;; Hardware stack levels used:    1
  2802 ;; Hardware stack levels required when called:    7
  2803 ;; This function calls:
  2804 ;;		_ResetCpld
  2805 ;;		_ResetMcu
  2806 ;;		_testLeds
  2807 ;; This function is called by:
  2808 ;;		_readUartMessage
  2809 ;; This function uses a non-reentrant model
  2810 ;;
  2811                           
  2812                           	psect	text7
  2813  00320C                     __ptext7:
  2814                           	opt stack 0
  2815  00320C                     _GroupControlMcu:
  2816                           	opt stack 22
  2817                           
  2818                           ;incstack = 0
  2819                           ;GroupControlMcu@request stored from wreg
  2820  00320C  0100               	movlb	0	; () banked
  2821  00320E  6FBF               	movwf	GroupControlMcu@request& (0+255),b
  2822                           
  2823                           ;MessageFunctions.c: 13: switch (request)
  2824  003210  D009               	goto	l1170
  2825  003212                     
  2826                           ;MessageFunctions.c: 16: testLeds();
  2827  003212  ECA0  F014         	call	_testLeds	;wreg free
  2828                           
  2829                           ;MessageFunctions.c: 17: break;
  2830  003216  0012               	return	
  2831  003218                     
  2832                           ;MessageFunctions.c: 20: ResetMcu();
  2833  003218  EC3B  F01C         	call	_ResetMcu	;wreg free
  2834                           
  2835                           ;MessageFunctions.c: 21: break;
  2836  00321C  0012               	return	
  2837  00321E                     
  2838                           ;MessageFunctions.c: 24: ResetCpld();
  2839  00321E  EC57  F01C         	call	_ResetCpld	;wreg free
  2840                           
  2841                           ;MessageFunctions.c: 35: }
  2842                           
  2843                           ;MessageFunctions.c: 34: break;
  2844                           
  2845                           ;MessageFunctions.c: 33: default:
  2846                           
  2847                           ;MessageFunctions.c: 31: break;
  2848                           
  2849                           ;MessageFunctions.c: 30: case CONTROL_PA2_SET:
  2850                           
  2851                           ;MessageFunctions.c: 28: break;
  2852                           
  2853                           ;MessageFunctions.c: 27: case CONTROL_PA1_SET:
  2854                           
  2855                           ;MessageFunctions.c: 25: break;
  2856  003222  0012               	return	
  2857  003224                     l1170:
  2858  003224  0100               	movlb	0	; () banked
  2859  003226  51BF               	movf	GroupControlMcu@request& (0+255),w,b
  2860                           
  2861                           ; Switch size 1, requested type "space"
  2862                           ; Number of cases is 5, Range of values is 17 to 21
  2863                           ; switch strategies available:
  2864                           ; Name         Instructions Cycles
  2865                           ; simple_byte           16     9 (average)
  2866                           ;	Chosen strategy is simple_byte
  2867  003228  0A11               	xorlw	17	; case 17
  2868  00322A  B4D8               	btfsc	status,2,c
  2869  00322C  D7F5               	goto	l1173
  2870  00322E  0A03               	xorlw	3	; case 18
  2871  003230  B4D8               	btfsc	status,2,c
  2872  003232  D7F5               	goto	l1174
  2873  003234  0A01               	xorlw	1	; case 19
  2874  003236  B4D8               	btfsc	status,2,c
  2875  003238  0012               	return	
  2876  00323A  0A07               	xorlw	7	; case 20
  2877  00323C  B4D8               	btfsc	status,2,c
  2878  00323E  0012               	return	
  2879  003240  0A01               	xorlw	1	; case 21
  2880  003242  A4D8               	btfss	status,2,c
  2881  003244  0012               	return	
  2882  003246  D7E5               	goto	l1171
  2883  003248                     __end_of_GroupControlMcu:
  2884                           	opt stack 0
  2885                           tosu	equ	0xFFF
  2886                           tosh	equ	0xFFE
  2887                           tosl	equ	0xFFD
  2888                           pclath	equ	0xFFA
  2889                           tblptru	equ	0xFF8
  2890                           tblptrh	equ	0xFF7
  2891                           tblptrl	equ	0xFF6
  2892                           tablat	equ	0xFF5
  2893                           postinc0	equ	0xFEE
  2894                           wreg	equ	0xFE8
  2895                           postdec1	equ	0xFE5
  2896                           fsr1l	equ	0xFE1
  2897                           indf2	equ	0xFDF
  2898                           postinc2	equ	0xFDE
  2899                           fsr2h	equ	0xFDA
  2900                           fsr2l	equ	0xFD9
  2901                           status	equ	0xFD8
  2902                           
  2903 ;; *************** function _GroupSynthesizers *****************
  2904 ;; Defined at:
  2905 ;;		line 87 in file "MessageFunctions.c"
  2906 ;; Parameters:    Size  Location     Type
  2907 ;;  request         1    wreg     enum E12
  2908 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2909 ;; Auto vars:     Size  Location     Type
  2910 ;;  request         1   95[BANK0 ] enum E12
  2911 ;; Return value:  Size  Location     Type
  2912 ;;                  1    wreg      void 
  2913 ;; Registers used:
  2914 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2915 ;; Tracked objects:
  2916 ;;		On entry : 0/0
  2917 ;;		On exit  : 0/0
  2918 ;;		Unchanged: 0/0
  2919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2920 ;;      Params:         0       0       2       0       0       0       0
  2921 ;;      Locals:         0       1       0       0       0       0       0
  2922 ;;      Temps:          0       0       0       0       0       0       0
  2923 ;;      Totals:         0       1       2       0       0       0       0
  2924 ;;Total ram usage:        3 bytes
  2925 ;; Hardware stack levels used:    1
  2926 ;; Hardware stack levels required when called:    8
  2927 ;; This function calls:
  2928 ;;		_PLLUartInitialize
  2929 ;;		_UpdateRxFreq
  2930 ;;		_UpdateTxFreq
  2931 ;; This function is called by:
  2932 ;;		_readUartMessage
  2933 ;; This function uses a non-reentrant model
  2934 ;;
  2935                           
  2936                           	psect	text8
  2937  002B98                     __ptext8:
  2938                           	opt stack 0
  2939  002B98                     _GroupSynthesizers:
  2940                           	opt stack 21
  2941                           
  2942                           ;incstack = 0
  2943                           ;GroupSynthesizers@request stored from wreg
  2944  002B98  0100               	movlb	0	; () banked
  2945  002B9A  6FBF               	movwf	GroupSynthesizers@request& (0+255),b
  2946                           
  2947                           ;MessageFunctions.c: 89: switch (request)
  2948  002B9C  D01C               	goto	l1201
  2949  002B9E                     
  2950                           ;MessageFunctions.c: 92: PLLUartInitialize(data);
  2951  002B9E  C1C2  F018         	movff	GroupSynthesizers@data,PLLUartInitialize@data
  2952  002BA2  C1C3  F019         	movff	GroupSynthesizers@data+1,PLLUartInitialize@data+1
  2953  002BA6  EC8E  F01C         	call	_PLLUartInitialize	;wreg free
  2954                           
  2955                           ;MessageFunctions.c: 93: break;
  2956  002BAA  0012               	return	
  2957  002BAC                     
  2958                           ;MessageFunctions.c: 96: PLLUartInitialize(data);
  2959  002BAC  C1C2  F018         	movff	GroupSynthesizers@data,PLLUartInitialize@data
  2960  002BB0  C1C3  F019         	movff	GroupSynthesizers@data+1,PLLUartInitialize@data+1
  2961  002BB4  EC8E  F01C         	call	_PLLUartInitialize	;wreg free
  2962                           
  2963                           ;MessageFunctions.c: 97: break;
  2964  002BB8  0012               	return	
  2965  002BBA                     
  2966                           ;MessageFunctions.c: 100: UpdateTxFreq(data);
  2967  002BBA  C1C2  F02F         	movff	GroupSynthesizers@data,UpdateTxFreq@data
  2968  002BBE  C1C3  F030         	movff	GroupSynthesizers@data+1,UpdateTxFreq@data+1
  2969  002BC2  EC0A  F01B         	call	_UpdateTxFreq	;wreg free
  2970                           
  2971                           ;MessageFunctions.c: 101: break;
  2972  002BC6  0012               	return	
  2973  002BC8                     
  2974                           ;MessageFunctions.c: 104: UpdateRxFreq(data);
  2975  002BC8  C1C2  F086         	movff	GroupSynthesizers@data,UpdateRxFreq@data
  2976  002BCC  C1C3  F087         	movff	GroupSynthesizers@data+1,UpdateRxFreq@data+1
  2977  002BD0  EC82  F018         	call	_UpdateRxFreq	;wreg free
  2978                           
  2979                           ;MessageFunctions.c: 109: }
  2980                           
  2981                           ;MessageFunctions.c: 108: break;
  2982                           
  2983                           ;MessageFunctions.c: 107: default:
  2984                           
  2985                           ;MessageFunctions.c: 105: break;
  2986  002BD4  0012               	return	
  2987  002BD6                     l1201:
  2988  002BD6  0100               	movlb	0	; () banked
  2989  002BD8  51BF               	movf	GroupSynthesizers@request& (0+255),w,b
  2990                           
  2991                           ; Switch size 1, requested type "space"
  2992                           ; Number of cases is 4, Range of values is 64 to 67
  2993                           ; switch strategies available:
  2994                           ; Name         Instructions Cycles
  2995                           ; simple_byte           13     7 (average)
  2996                           ;	Chosen strategy is simple_byte
  2997  002BDA  0A40               	xorlw	64	; case 64
  2998  002BDC  B4D8               	btfsc	status,2,c
  2999  002BDE  D7DF               	goto	l1202
  3000  002BE0  0A01               	xorlw	1	; case 65
  3001  002BE2  B4D8               	btfsc	status,2,c
  3002  002BE4  D7E3               	goto	l1204
  3003  002BE6  0A03               	xorlw	3	; case 66
  3004  002BE8  B4D8               	btfsc	status,2,c
  3005  002BEA  D7E7               	goto	l1205
  3006  002BEC  0A01               	xorlw	1	; case 67
  3007  002BEE  A4D8               	btfss	status,2,c
  3008  002BF0  0012               	return	
  3009  002BF2  D7EA               	goto	l1206
  3010  002BF4                     __end_of_GroupSynthesizers:
  3011                           	opt stack 0
  3012                           tosu	equ	0xFFF
  3013                           tosh	equ	0xFFE
  3014                           tosl	equ	0xFFD
  3015                           pclath	equ	0xFFA
  3016                           tblptru	equ	0xFF8
  3017                           tblptrh	equ	0xFF7
  3018                           tblptrl	equ	0xFF6
  3019                           tablat	equ	0xFF5
  3020                           postinc0	equ	0xFEE
  3021                           wreg	equ	0xFE8
  3022                           postdec1	equ	0xFE5
  3023                           fsr1l	equ	0xFE1
  3024                           indf2	equ	0xFDF
  3025                           postinc2	equ	0xFDE
  3026                           fsr2h	equ	0xFDA
  3027                           fsr2l	equ	0xFD9
  3028                           status	equ	0xFD8
  3029                           
  3030 ;; *************** function _UpdateTxFreq *****************
  3031 ;; Defined at:
  3032 ;;		line 77 in file "SyntApp.c"
  3033 ;; Parameters:    Size  Location     Type
  3034 ;;  data            2   46[COMRAM] PTR unsigned char 
  3035 ;; Auto vars:     Size  Location     Type
  3036 ;;		None
  3037 ;; Return value:  Size  Location     Type
  3038 ;;                  1    wreg      void 
  3039 ;; Registers used:
  3040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3041 ;; Tracked objects:
  3042 ;;		On entry : 0/0
  3043 ;;		On exit  : 0/0
  3044 ;;		Unchanged: 0/0
  3045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3046 ;;      Params:         2       0       0       0       0       0       0
  3047 ;;      Locals:         0       0       0       0       0       0       0
  3048 ;;      Temps:          0       0       0       0       0       0       0
  3049 ;;      Totals:         2       0       0       0       0       0       0
  3050 ;;Total ram usage:        2 bytes
  3051 ;; Hardware stack levels used:    1
  3052 ;; Hardware stack levels required when called:    7
  3053 ;; This function calls:
  3054 ;;		_SWSPI_send_word
  3055 ;;		_SwSpi_Set_Synth_Le_Pin
  3056 ;; This function is called by:
  3057 ;;		_GroupSynthesizers
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060                           
  3061                           	psect	text9
  3062  003614                     __ptext9:
  3063                           	opt stack 0
  3064  003614                     _UpdateTxFreq:
  3065                           	opt stack 21
  3066                           
  3067                           ;SyntApp.c: 83: SwSpi_Set_Synth_Le_Pin(SYNTH_TX, 1);
  3068                           
  3069                           ;incstack = 0
  3070  003614  0E01               	movlw	1
  3071  003616  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
  3072  003618  0E00               	movlw	0
  3073  00361A  EC60  F019         	call	_SwSpi_Set_Synth_Le_Pin
  3074                           
  3075                           ;SyntApp.c: 85: SWSPI_send_word(SYNTH_TX, 0x3, 3);
  3076  00361E  0E03               	movlw	3
  3077  003620  6E26               	movwf	SWSPI_send_word@data,c
  3078  003622  0E00               	movlw	0
  3079  003624  6E27               	movwf	SWSPI_send_word@data+1,c
  3080  003626  0E00               	movlw	0
  3081  003628  6E28               	movwf	SWSPI_send_word@data+2,c
  3082  00362A  0E00               	movlw	0
  3083  00362C  6E29               	movwf	SWSPI_send_word@data+3,c
  3084  00362E  0E03               	movlw	3
  3085  003630  6E2A               	movwf	SWSPI_send_word@dataSize,c
  3086  003632  0E00               	movlw	0
  3087  003634  EC3A  F012         	call	_SWSPI_send_word
  3088  003638  0012               	return		;funcret
  3089  00363A                     __end_of_UpdateTxFreq:
  3090                           	opt stack 0
  3091                           tosu	equ	0xFFF
  3092                           tosh	equ	0xFFE
  3093                           tosl	equ	0xFFD
  3094                           pclath	equ	0xFFA
  3095                           tblptru	equ	0xFF8
  3096                           tblptrh	equ	0xFF7
  3097                           tblptrl	equ	0xFF6
  3098                           tablat	equ	0xFF5
  3099                           postinc0	equ	0xFEE
  3100                           wreg	equ	0xFE8
  3101                           postdec1	equ	0xFE5
  3102                           fsr1l	equ	0xFE1
  3103                           indf2	equ	0xFDF
  3104                           postinc2	equ	0xFDE
  3105                           fsr2h	equ	0xFDA
  3106                           fsr2l	equ	0xFD9
  3107                           status	equ	0xFD8
  3108                           
  3109 ;; *************** function _UpdateRxFreq *****************
  3110 ;; Defined at:
  3111 ;;		line 100 in file "SyntApp.c"
  3112 ;; Parameters:    Size  Location     Type
  3113 ;;  data            2   38[BANK0 ] PTR unsigned char 
  3114 ;; Auto vars:     Size  Location     Type
  3115 ;;  regData         4   40[BANK0 ] unsigned long 
  3116 ;; Return value:  Size  Location     Type
  3117 ;;                  1    wreg      void 
  3118 ;; Registers used:
  3119 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3120 ;; Tracked objects:
  3121 ;;		On entry : 0/0
  3122 ;;		On exit  : 0/0
  3123 ;;		Unchanged: 0/0
  3124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3125 ;;      Params:         0       2       0       0       0       0       0
  3126 ;;      Locals:         0       4       0       0       0       0       0
  3127 ;;      Temps:          0       0       0       0       0       0       0
  3128 ;;      Totals:         0       6       0       0       0       0       0
  3129 ;;Total ram usage:        6 bytes
  3130 ;; Hardware stack levels used:    1
  3131 ;; Hardware stack levels required when called:    7
  3132 ;; This function calls:
  3133 ;;		_GetIntFromUartData
  3134 ;;		_SWSPI_send_word
  3135 ;;		_SendAckMessage
  3136 ;; This function is called by:
  3137 ;;		_GroupSynthesizers
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           	psect	text10
  3142  003104                     __ptext10:
  3143                           	opt stack 0
  3144  003104                     _UpdateRxFreq:
  3145                           	opt stack 21
  3146                           
  3147                           ;SyntApp.c: 102: uint32_t regData = GetIntFromUartData(data);
  3148                           
  3149                           ;incstack = 0
  3150  003104  C086  F066         	movff	UpdateRxFreq@data,GetIntFromUartData@data
  3151  003108  C087  F067         	movff	UpdateRxFreq@data+1,GetIntFromUartData@data+1
  3152  00310C  EC74  F010         	call	_GetIntFromUartData	;wreg free
  3153  003110  C066  F088         	movff	?_GetIntFromUartData,UpdateRxFreq@regData
  3154  003114  C067  F089         	movff	?_GetIntFromUartData+1,UpdateRxFreq@regData+1
  3155  003118  C068  F08A         	movff	?_GetIntFromUartData+2,UpdateRxFreq@regData+2
  3156  00311C  C069  F08B         	movff	?_GetIntFromUartData+3,UpdateRxFreq@regData+3
  3157                           
  3158                           ;SyntApp.c: 103: SWSPI_send_word(SYNTH_RX, regData, 3);
  3159  003120  C088  F026         	movff	UpdateRxFreq@regData,SWSPI_send_word@data
  3160  003124  C089  F027         	movff	UpdateRxFreq@regData+1,SWSPI_send_word@data+1
  3161  003128  C08A  F028         	movff	UpdateRxFreq@regData+2,SWSPI_send_word@data+2
  3162  00312C  C08B  F029         	movff	UpdateRxFreq@regData+3,SWSPI_send_word@data+3
  3163  003130  0E03               	movlw	3
  3164  003132  6E2A               	movwf	SWSPI_send_word@dataSize,c
  3165  003134  0E01               	movlw	1
  3166  003136  EC3A  F012         	call	_SWSPI_send_word
  3167                           
  3168                           ;SyntApp.c: 104: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_SET);
  3169  00313A  0E43               	movlw	67
  3170  00313C  6E24               	movwf	SendAckMessage@inRequest,c
  3171  00313E  0E04               	movlw	4
  3172  003140  EC84  F017         	call	_SendAckMessage
  3173  003144  0012               	return		;funcret
  3174  003146                     __end_of_UpdateRxFreq:
  3175                           	opt stack 0
  3176                           tosu	equ	0xFFF
  3177                           tosh	equ	0xFFE
  3178                           tosl	equ	0xFFD
  3179                           pclath	equ	0xFFA
  3180                           tblptru	equ	0xFF8
  3181                           tblptrh	equ	0xFF7
  3182                           tblptrl	equ	0xFF6
  3183                           tablat	equ	0xFF5
  3184                           postinc0	equ	0xFEE
  3185                           wreg	equ	0xFE8
  3186                           postdec1	equ	0xFE5
  3187                           fsr1l	equ	0xFE1
  3188                           indf2	equ	0xFDF
  3189                           postinc2	equ	0xFDE
  3190                           fsr2h	equ	0xFDA
  3191                           fsr2l	equ	0xFD9
  3192                           status	equ	0xFD8
  3193                           
  3194 ;; *************** function _PLLUartInitialize *****************
  3195 ;; Defined at:
  3196 ;;		line 68 in file "SyntApp.c"
  3197 ;; Parameters:    Size  Location     Type
  3198 ;;  data            2   23[COMRAM] PTR unsigned char 
  3199 ;; Auto vars:     Size  Location     Type
  3200 ;;		None
  3201 ;; Return value:  Size  Location     Type
  3202 ;;                  1    wreg      void 
  3203 ;; Registers used:
  3204 ;;		None
  3205 ;; Tracked objects:
  3206 ;;		On entry : 0/0
  3207 ;;		On exit  : 0/0
  3208 ;;		Unchanged: 0/0
  3209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3210 ;;      Params:         2       0       0       0       0       0       0
  3211 ;;      Locals:         0       0       0       0       0       0       0
  3212 ;;      Temps:          0       0       0       0       0       0       0
  3213 ;;      Totals:         2       0       0       0       0       0       0
  3214 ;;Total ram usage:        2 bytes
  3215 ;; Hardware stack levels used:    1
  3216 ;; Hardware stack levels required when called:    3
  3217 ;; This function calls:
  3218 ;;		Nothing
  3219 ;; This function is called by:
  3220 ;;		_GroupSynthesizers
  3221 ;; This function uses a non-reentrant model
  3222 ;;
  3223                           
  3224                           	psect	text11
  3225  00391C                     __ptext11:
  3226                           	opt stack 0
  3227  00391C                     _PLLUartInitialize:
  3228                           	opt stack 25
  3229                           
  3230                           ;incstack = 0
  3231  00391C  0012               	return		;funcret
  3232  00391E                     __end_of_PLLUartInitialize:
  3233                           	opt stack 0
  3234                           tosu	equ	0xFFF
  3235                           tosh	equ	0xFFE
  3236                           tosl	equ	0xFFD
  3237                           pclath	equ	0xFFA
  3238                           tblptru	equ	0xFF8
  3239                           tblptrh	equ	0xFF7
  3240                           tblptrl	equ	0xFF6
  3241                           tablat	equ	0xFF5
  3242                           postinc0	equ	0xFEE
  3243                           wreg	equ	0xFE8
  3244                           postdec1	equ	0xFE5
  3245                           fsr1l	equ	0xFE1
  3246                           indf2	equ	0xFDF
  3247                           postinc2	equ	0xFDE
  3248                           fsr2h	equ	0xFDA
  3249                           fsr2l	equ	0xFD9
  3250                           status	equ	0xFD8
  3251                           
  3252 ;; *************** function _SetMcuFwVersion *****************
  3253 ;; Defined at:
  3254 ;;		line 15 in file "SystemStatus.c"
  3255 ;; Parameters:    Size  Location     Type
  3256 ;;  data            2   43[COMRAM] PTR unsigned char 
  3257 ;; Auto vars:     Size  Location     Type
  3258 ;;  idx             1   45[COMRAM] unsigned char 
  3259 ;; Return value:  Size  Location     Type
  3260 ;;                  1    wreg      void 
  3261 ;; Registers used:
  3262 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3263 ;; Tracked objects:
  3264 ;;		On entry : 0/0
  3265 ;;		On exit  : 0/0
  3266 ;;		Unchanged: 0/0
  3267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3268 ;;      Params:         2       0       0       0       0       0       0
  3269 ;;      Locals:         1       0       0       0       0       0       0
  3270 ;;      Temps:          0       0       0       0       0       0       0
  3271 ;;      Totals:         3       0       0       0       0       0       0
  3272 ;;Total ram usage:        3 bytes
  3273 ;; Hardware stack levels used:    1
  3274 ;; Hardware stack levels required when called:    6
  3275 ;; This function calls:
  3276 ;;		_EepromWrite
  3277 ;;		_SendAckMessage
  3278 ;; This function is called by:
  3279 ;;		_GroupStatusAndVersion
  3280 ;; This function uses a non-reentrant model
  3281 ;;
  3282                           
  3283                           	psect	text12
  3284  00336C                     __ptext12:
  3285                           	opt stack 0
  3286  00336C                     _SetMcuFwVersion:
  3287                           	opt stack 22
  3288                           
  3289                           ;SystemStatus.c: 17: for(uint8_t idx = 0; idx < (0x4); idx++)
  3290                           
  3291                           ;incstack = 0
  3292  00336C  0E00               	movlw	0
  3293  00336E  6E2E               	movwf	SetMcuFwVersion@idx,c
  3294  003370                     l7546:
  3295  003370  0E03               	movlw	3
  3296  003372  642E               	cpfsgt	SetMcuFwVersion@idx,c
  3297  003374  D001               	goto	l1348
  3298  003376  D00F               	goto	u7340
  3299  003378                     l1348:
  3300                           
  3301                           ;SystemStatus.c: 18: {
  3302                           ;SystemStatus.c: 19: EepromWrite(idx, data[idx]);
  3303  003378  502E               	movf	SetMcuFwVersion@idx,w,c
  3304  00337A  0D01               	mullw	1
  3305  00337C  50F3               	movf	prodl,w,c
  3306  00337E  242C               	addwf	SetMcuFwVersion@data,w,c
  3307  003380  6ED9               	movwf	fsr2l,c
  3308  003382  50F4               	movf	prodh,w,c
  3309  003384  202D               	addwfc	SetMcuFwVersion@data+1,w,c
  3310  003386  6EDA               	movwf	fsr2h,c
  3311  003388  50DF               	movf	indf2,w,c
  3312  00338A  6E1B               	movwf	EepromWrite@data,c
  3313  00338C  502E               	movf	SetMcuFwVersion@idx,w,c
  3314  00338E  EC34  F01C         	call	_EepromWrite
  3315  003392  2A2E               	incf	SetMcuFwVersion@idx,f,c
  3316  003394  D7ED               	goto	l7546
  3317  003396                     u7340:
  3318                           
  3319                           ;SystemStatus.c: 20: }
  3320                           ;SystemStatus.c: 23: SendAckMessage((MSG_GROUPS)MCU_STATUS_VERSION_MSG, (MSG_REQUEST)STA
      +                          TUS_SET_MCU_FW_VERSION);
  3321  003396  0E24               	movlw	36
  3322  003398  6E24               	movwf	SendAckMessage@inRequest,c
  3323  00339A  0E02               	movlw	2
  3324  00339C  EC84  F017         	call	_SendAckMessage
  3325  0033A0  0012               	return		;funcret
  3326  0033A2                     __end_of_SetMcuFwVersion:
  3327                           	opt stack 0
  3328                           tosu	equ	0xFFF
  3329                           tosh	equ	0xFFE
  3330                           tosl	equ	0xFFD
  3331                           pclath	equ	0xFFA
  3332                           tblptru	equ	0xFF8
  3333                           tblptrh	equ	0xFF7
  3334                           tblptrl	equ	0xFF6
  3335                           tablat	equ	0xFF5
  3336                           prodh	equ	0xFF4
  3337                           prodl	equ	0xFF3
  3338                           postinc0	equ	0xFEE
  3339                           wreg	equ	0xFE8
  3340                           postdec1	equ	0xFE5
  3341                           fsr1l	equ	0xFE1
  3342                           indf2	equ	0xFDF
  3343                           postinc2	equ	0xFDE
  3344                           fsr2h	equ	0xFDA
  3345                           fsr2l	equ	0xFD9
  3346                           status	equ	0xFD8
  3347                           
  3348 ;; *************** function _SetCpldFwVersion *****************
  3349 ;; Defined at:
  3350 ;;		line 49 in file "SystemStatus.c"
  3351 ;; Parameters:    Size  Location     Type
  3352 ;;  data            2   43[COMRAM] PTR unsigned char 
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;  idx             2   45[COMRAM] int 
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  1    wreg      void 
  3357 ;; Registers used:
  3358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3364 ;;      Params:         2       0       0       0       0       0       0
  3365 ;;      Locals:         2       0       0       0       0       0       0
  3366 ;;      Temps:          0       0       0       0       0       0       0
  3367 ;;      Totals:         4       0       0       0       0       0       0
  3368 ;;Total ram usage:        4 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    6
  3371 ;; This function calls:
  3372 ;;		_EepromWrite
  3373 ;;		_SendAckMessage
  3374 ;; This function is called by:
  3375 ;;		_GroupStatusAndVersion
  3376 ;; This function uses a non-reentrant model
  3377 ;;
  3378                           
  3379                           	psect	text13
  3380  003146                     __ptext13:
  3381                           	opt stack 0
  3382  003146                     _SetCpldFwVersion:
  3383                           	opt stack 22
  3384                           
  3385                           ;SystemStatus.c: 51: for(int idx = 0; idx < (0x4); idx++)
  3386                           
  3387                           ;incstack = 0
  3388  003146  0E00               	movlw	0
  3389  003148  6E2F               	movwf	SetCpldFwVersion@idx+1,c
  3390  00314A  0E00               	movlw	0
  3391  00314C  6E2E               	movwf	SetCpldFwVersion@idx,c
  3392  00314E                     l7586:
  3393  00314E  BE2F               	btfsc	SetCpldFwVersion@idx+1,7,c
  3394  003150  D006               	goto	l1358
  3395  003152  502F               	movf	SetCpldFwVersion@idx+1,w,c
  3396  003154  E113               	bnz	l7596
  3397  003156  0E04               	movlw	4
  3398  003158  5C2E               	subwf	SetCpldFwVersion@idx,w,c
  3399  00315A  B0D8               	btfsc	status,0,c
  3400  00315C  D00F               	goto	u7380
  3401  00315E                     l1358:
  3402                           
  3403                           ;SystemStatus.c: 52: {
  3404                           ;SystemStatus.c: 53: EepromWrite((0x4) + idx, data[idx]);
  3405  00315E  502E               	movf	SetCpldFwVersion@idx,w,c
  3406  003160  242C               	addwf	SetCpldFwVersion@data,w,c
  3407  003162  6ED9               	movwf	fsr2l,c
  3408  003164  502F               	movf	SetCpldFwVersion@idx+1,w,c
  3409  003166  202D               	addwfc	SetCpldFwVersion@data+1,w,c
  3410  003168  6EDA               	movwf	fsr2h,c
  3411  00316A  50DF               	movf	indf2,w,c
  3412  00316C  6E1B               	movwf	EepromWrite@data,c
  3413  00316E  502E               	movf	SetCpldFwVersion@idx,w,c
  3414  003170  0F04               	addlw	4
  3415  003172  EC34  F01C         	call	_EepromWrite
  3416  003176  4A2E               	infsnz	SetCpldFwVersion@idx,f,c
  3417  003178  2A2F               	incf	SetCpldFwVersion@idx+1,f,c
  3418  00317A  D7E9               	goto	l7586
  3419  00317C                     u7380:
  3420  00317C                     l7596:
  3421                           
  3422                           ;SystemStatus.c: 54: }
  3423                           ;SystemStatus.c: 55: SendAckMessage((MSG_GROUPS)MCU_STATUS_VERSION_MSG, (MSG_REQUEST)STA
      +                          TUS_SET_CPLD_FW_VERSION);
  3424  00317C  0E25               	movlw	37
  3425  00317E  6E24               	movwf	SendAckMessage@inRequest,c
  3426  003180  0E02               	movlw	2
  3427  003182  EC84  F017         	call	_SendAckMessage
  3428  003186  0012               	return		;funcret
  3429  003188                     __end_of_SetCpldFwVersion:
  3430                           	opt stack 0
  3431                           tosu	equ	0xFFF
  3432                           tosh	equ	0xFFE
  3433                           tosl	equ	0xFFD
  3434                           pclath	equ	0xFFA
  3435                           tblptru	equ	0xFF8
  3436                           tblptrh	equ	0xFF7
  3437                           tblptrl	equ	0xFF6
  3438                           tablat	equ	0xFF5
  3439                           prodh	equ	0xFF4
  3440                           prodl	equ	0xFF3
  3441                           postinc0	equ	0xFEE
  3442                           wreg	equ	0xFE8
  3443                           postdec1	equ	0xFE5
  3444                           fsr1l	equ	0xFE1
  3445                           indf2	equ	0xFDF
  3446                           postinc2	equ	0xFDE
  3447                           fsr2h	equ	0xFDA
  3448                           fsr2l	equ	0xFD9
  3449                           status	equ	0xFD8
  3450                           
  3451 ;; *************** function _EepromWrite *****************
  3452 ;; Defined at:
  3453 ;;		line 220 in file "FlashApp.c"
  3454 ;; Parameters:    Size  Location     Type
  3455 ;;  address         1    wreg     unsigned char 
  3456 ;;  data            1   26[COMRAM] unsigned char 
  3457 ;; Auto vars:     Size  Location     Type
  3458 ;;  address         1   27[COMRAM] unsigned char 
  3459 ;; Return value:  Size  Location     Type
  3460 ;;                  1    wreg      void 
  3461 ;; Registers used:
  3462 ;;		wreg, status,2, cstack
  3463 ;; Tracked objects:
  3464 ;;		On entry : 0/0
  3465 ;;		On exit  : 0/0
  3466 ;;		Unchanged: 0/0
  3467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3468 ;;      Params:         1       0       0       0       0       0       0
  3469 ;;      Locals:         1       0       0       0       0       0       0
  3470 ;;      Temps:          0       0       0       0       0       0       0
  3471 ;;      Totals:         2       0       0       0       0       0       0
  3472 ;;Total ram usage:        2 bytes
  3473 ;; Hardware stack levels used:    1
  3474 ;; Hardware stack levels required when called:    4
  3475 ;; This function calls:
  3476 ;;		_DATAEE_WriteByte
  3477 ;; This function is called by:
  3478 ;;		_SetMcuFwVersion
  3479 ;;		_SetCpldFwVersion
  3480 ;; This function uses a non-reentrant model
  3481 ;;
  3482                           
  3483                           	psect	text14
  3484  003868                     __ptext14:
  3485                           	opt stack 0
  3486  003868                     _EepromWrite:
  3487                           	opt stack 23
  3488                           
  3489                           ;incstack = 0
  3490                           ;EepromWrite@address stored from wreg
  3491  003868  6E1C               	movwf	EepromWrite@address,c
  3492                           
  3493                           ;FlashApp.c: 222: DATAEE_WriteByte(address, data);
  3494  00386A  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
  3495  00386E  501C               	movf	EepromWrite@address,w,c
  3496  003870  ECD1  F019         	call	_DATAEE_WriteByte
  3497  003874  0012               	return		;funcret
  3498  003876                     __end_of_EepromWrite:
  3499                           	opt stack 0
  3500                           tosu	equ	0xFFF
  3501                           tosh	equ	0xFFE
  3502                           tosl	equ	0xFFD
  3503                           pclath	equ	0xFFA
  3504                           tblptru	equ	0xFF8
  3505                           tblptrh	equ	0xFF7
  3506                           tblptrl	equ	0xFF6
  3507                           tablat	equ	0xFF5
  3508                           prodh	equ	0xFF4
  3509                           prodl	equ	0xFF3
  3510                           postinc0	equ	0xFEE
  3511                           wreg	equ	0xFE8
  3512                           postdec1	equ	0xFE5
  3513                           fsr1l	equ	0xFE1
  3514                           indf2	equ	0xFDF
  3515                           postinc2	equ	0xFDE
  3516                           fsr2h	equ	0xFDA
  3517                           fsr2l	equ	0xFD9
  3518                           status	equ	0xFD8
  3519                           
  3520 ;; *************** function _DATAEE_WriteByte *****************
  3521 ;; Defined at:
  3522 ;;		line 167 in file "mcc_generated_files/memory.c"
  3523 ;; Parameters:    Size  Location     Type
  3524 ;;  bAdd            1    wreg     unsigned char 
  3525 ;;  bData           1   23[COMRAM] unsigned char 
  3526 ;; Auto vars:     Size  Location     Type
  3527 ;;  bAdd            1   24[COMRAM] unsigned char 
  3528 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
  3529 ;; Return value:  Size  Location     Type
  3530 ;;                  1    wreg      void 
  3531 ;; Registers used:
  3532 ;;		wreg, status,2
  3533 ;; Tracked objects:
  3534 ;;		On entry : 0/0
  3535 ;;		On exit  : 0/0
  3536 ;;		Unchanged: 0/0
  3537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3538 ;;      Params:         1       0       0       0       0       0       0
  3539 ;;      Locals:         2       0       0       0       0       0       0
  3540 ;;      Temps:          0       0       0       0       0       0       0
  3541 ;;      Totals:         3       0       0       0       0       0       0
  3542 ;;Total ram usage:        3 bytes
  3543 ;; Hardware stack levels used:    1
  3544 ;; Hardware stack levels required when called:    3
  3545 ;; This function calls:
  3546 ;;		Nothing
  3547 ;; This function is called by:
  3548 ;;		_EepromWrite
  3549 ;;		_EepromTest
  3550 ;; This function uses a non-reentrant model
  3551 ;;
  3552                           
  3553                           	psect	text15
  3554  0033A2                     __ptext15:
  3555                           	opt stack 0
  3556  0033A2                     _DATAEE_WriteByte:
  3557                           	opt stack 23
  3558                           
  3559                           ;incstack = 0
  3560                           ;DATAEE_WriteByte@bAdd stored from wreg
  3561  0033A2  6E19               	movwf	DATAEE_WriteByte@bAdd,c
  3562                           
  3563                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
  3564  0033A4  0E00               	movlw	0
  3565  0033A6  BEF2               	btfsc	intcon,7,c	;volatile
  3566  0033A8  0E01               	movlw	1
  3567  0033AA  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
  3568                           
  3569                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
  3570  0033AC  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
  3571                           
  3572                           ;memory.c: 172: EEDATA = bData;
  3573  0033B0  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
  3574                           
  3575                           ;memory.c: 173: EECON1bits.EEPGD = 0;
  3576  0033B4  9EA6               	bcf	4006,7,c	;volsfr
  3577                           
  3578                           ;memory.c: 174: EECON1bits.CFGS = 0;
  3579  0033B6  9CA6               	bcf	4006,6,c	;volsfr
  3580                           
  3581                           ;memory.c: 175: EECON1bits.WREN = 1;
  3582  0033B8  84A6               	bsf	4006,2,c	;volsfr
  3583                           
  3584                           ;memory.c: 176: INTCONbits.GIE = 0;
  3585  0033BA  9EF2               	bcf	intcon,7,c	;volatile
  3586                           
  3587                           ;memory.c: 177: EECON2 = 0x55;
  3588  0033BC  0E55               	movlw	85
  3589  0033BE  6EA7               	movwf	4007,c	;volsfr
  3590                           
  3591                           ;memory.c: 178: EECON2 = 0xAA;
  3592  0033C0  0EAA               	movlw	170
  3593  0033C2  6EA7               	movwf	4007,c	;volsfr
  3594                           
  3595                           ;memory.c: 179: EECON1bits.WR = 1;
  3596  0033C4  82A6               	bsf	4006,1,c	;volsfr
  3597  0033C6                     
  3598                           ;memory.c: 182: {
  3599  0033C6  B2A6               	btfsc	4006,1,c	;volsfr
  3600  0033C8  D7FE               	goto	l953
  3601                           
  3602                           ;memory.c: 183: }
  3603                           ;memory.c: 185: EECON1bits.WREN = 0;
  3604  0033CA  94A6               	bcf	4006,2,c	;volsfr
  3605                           
  3606                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
  3607  0033CC  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
  3608  0033CE  D002               	bra	u6125
  3609  0033D0  9EF2               	bcf	intcon,7,c	;volatile
  3610  0033D2  D001               	bra	u6126
  3611  0033D4                     u6125:
  3612  0033D4  8EF2               	bsf	intcon,7,c	;volatile
  3613  0033D6                     u6126:
  3614  0033D6  0012               	return		;funcret
  3615  0033D8                     __end_of_DATAEE_WriteByte:
  3616                           	opt stack 0
  3617                           tosu	equ	0xFFF
  3618                           tosh	equ	0xFFE
  3619                           tosl	equ	0xFFD
  3620                           pclath	equ	0xFFA
  3621                           tblptru	equ	0xFF8
  3622                           tblptrh	equ	0xFF7
  3623                           tblptrl	equ	0xFF6
  3624                           tablat	equ	0xFF5
  3625                           prodh	equ	0xFF4
  3626                           prodl	equ	0xFF3
  3627                           intcon	equ	0xFF2
  3628                           postinc0	equ	0xFEE
  3629                           wreg	equ	0xFE8
  3630                           postdec1	equ	0xFE5
  3631                           fsr1l	equ	0xFE1
  3632                           indf2	equ	0xFDF
  3633                           postinc2	equ	0xFDE
  3634                           fsr2h	equ	0xFDA
  3635                           fsr2l	equ	0xFD9
  3636                           status	equ	0xFD8
  3637                           
  3638 ;; *************** function _GetMcuRunTime *****************
  3639 ;; Defined at:
  3640 ;;		line 92 in file "SystemStatus.c"
  3641 ;; Parameters:    Size  Location     Type
  3642 ;;		None
  3643 ;; Auto vars:     Size  Location     Type
  3644 ;;  idx             2   13[BANK0 ] int 
  3645 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  3646 ;;  tempRunTime     4    9[BANK0 ] unsigned long 
  3647 ;; Return value:  Size  Location     Type
  3648 ;;                  1    wreg      void 
  3649 ;; Registers used:
  3650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3651 ;; Tracked objects:
  3652 ;;		On entry : 0/0
  3653 ;;		On exit  : 0/0
  3654 ;;		Unchanged: 0/0
  3655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3656 ;;      Params:         0       0       0       0       0       0       0
  3657 ;;      Locals:         0      15       0       0       0       0       0
  3658 ;;      Temps:          2       0       0       0       0       0       0
  3659 ;;      Totals:         2      15       0       0       0       0       0
  3660 ;;Total ram usage:       17 bytes
  3661 ;; Hardware stack levels used:    1
  3662 ;; Hardware stack levels required when called:    5
  3663 ;; This function calls:
  3664 ;;		_WriteUartMessage
  3665 ;;		___lldiv
  3666 ;;		___llmod
  3667 ;;		_crc8
  3668 ;; This function is called by:
  3669 ;;		_GroupStatusAndVersion
  3670 ;; This function uses a non-reentrant model
  3671 ;;
  3672                           
  3673                           	psect	text16
  3674  001D86                     __ptext16:
  3675                           	opt stack 0
  3676  001D86                     _GetMcuRunTime:
  3677                           	opt stack 23
  3678                           
  3679                           ;SystemStatus.c: 95: char TxMsg[(0x4) + (0x4) + 1];
  3680                           ;SystemStatus.c: 98: TxMsg[(0)] = (0x24);
  3681                           
  3682                           ;incstack = 0
  3683  001D86  0E24               	movlw	36
  3684  001D88  0100               	movlb	0	; () banked
  3685  001D8A  6F60               	movwf	GetMcuRunTime@TxMsg& (0+255),b
  3686                           
  3687                           ;SystemStatus.c: 99: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  3688  001D8C  0E02               	movlw	2
  3689  001D8E  6F61               	movwf	(GetMcuRunTime@TxMsg+1)& (0+255),b
  3690                           
  3691                           ;SystemStatus.c: 100: TxMsg[(2)] = STATUS_MCU_RUN_TIME;
  3692  001D90  0E21               	movlw	33
  3693  001D92  6F62               	movwf	(GetMcuRunTime@TxMsg+2)& (0+255),b
  3694                           
  3695                           ;SystemStatus.c: 101: TxMsg[(3)] = (0x4);
  3696  001D94  0E04               	movlw	4
  3697  001D96  6F63               	movwf	(GetMcuRunTime@TxMsg+3)& (0+255),b
  3698                           
  3699                           ; BSR set to: 0
  3700                           ;SystemStatus.c: 103: uint32_t tempRunTime = mcuRunTimeIn5SecTicks;
  3701  001D98  C0C0  F069         	movff	_mcuRunTimeIn5SecTicks,GetMcuRunTime@tempRunTime
  3702  001D9C  C0C1  F06A         	movff	_mcuRunTimeIn5SecTicks+1,GetMcuRunTime@tempRunTime+1
  3703  001DA0  C0C2  F06B         	movff	_mcuRunTimeIn5SecTicks+2,GetMcuRunTime@tempRunTime+2
  3704  001DA4  C0C3  F06C         	movff	_mcuRunTimeIn5SecTicks+3,GetMcuRunTime@tempRunTime+3
  3705                           
  3706                           ;SystemStatus.c: 106: for(int idx = 0; idx < (0x4); idx++)
  3707  001DA8  0E00               	movlw	0
  3708  001DAA  6F6E               	movwf	(GetMcuRunTime@idx+1)& (0+255),b
  3709  001DAC  0E00               	movlw	0
  3710  001DAE  6F6D               	movwf	GetMcuRunTime@idx& (0+255),b
  3711  001DB0                     l7602:
  3712                           
  3713                           ; BSR set to: 0
  3714  001DB0  BF6E               	btfsc	(GetMcuRunTime@idx+1)& (0+255),7,b
  3715  001DB2  D006               	goto	l1374
  3716  001DB4  516E               	movf	(GetMcuRunTime@idx+1)& (0+255),w,b
  3717  001DB6  E142               	bnz	l7614
  3718  001DB8  0E04               	movlw	4
  3719  001DBA  5D6D               	subwf	GetMcuRunTime@idx& (0+255),w,b
  3720  001DBC  B0D8               	btfsc	status,0,c
  3721  001DBE  D03E               	goto	u7400
  3722  001DC0                     l1374:
  3723                           
  3724                           ; BSR set to: 0
  3725                           ;SystemStatus.c: 107: {
  3726                           ;SystemStatus.c: 108: TxMsg[(0x4) + idx] = tempRunTime % 10;
  3727                           
  3728                           ; BSR set to: 0
  3729  001DC0  0E04               	movlw	4
  3730  001DC2  256D               	addwf	GetMcuRunTime@idx& (0+255),w,b
  3731  001DC4  6E25               	movwf	??_GetMcuRunTime& (0+255),c
  3732  001DC6  0E00               	movlw	0
  3733  001DC8  216E               	addwfc	(GetMcuRunTime@idx+1)& (0+255),w,b
  3734  001DCA  6E26               	movwf	(??_GetMcuRunTime+1)& (0+255),c
  3735  001DCC  0E60               	movlw	low GetMcuRunTime@TxMsg
  3736  001DCE  2425               	addwf	??_GetMcuRunTime,w,c
  3737  001DD0  6ED9               	movwf	fsr2l,c
  3738  001DD2  0E00               	movlw	high GetMcuRunTime@TxMsg
  3739  001DD4  2026               	addwfc	??_GetMcuRunTime+1,w,c
  3740  001DD6  6EDA               	movwf	fsr2h,c
  3741  001DD8  C069  F018         	movff	GetMcuRunTime@tempRunTime,___llmod@dividend
  3742  001DDC  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___llmod@dividend+1
  3743  001DE0  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___llmod@dividend+2
  3744  001DE4  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___llmod@dividend+3
  3745  001DE8  0E0A               	movlw	10
  3746  001DEA  6E1C               	movwf	___llmod@divisor,c
  3747  001DEC  0E00               	movlw	0
  3748  001DEE  6E1D               	movwf	___llmod@divisor+1,c
  3749  001DF0  0E00               	movlw	0
  3750  001DF2  6E1E               	movwf	___llmod@divisor+2,c
  3751  001DF4  0E00               	movlw	0
  3752  001DF6  6E1F               	movwf	___llmod@divisor+3,c
  3753  001DF8  EC0A  F015         	call	___llmod	;wreg free
  3754  001DFC  5018               	movf	?___llmod,w,c
  3755  001DFE  6EDF               	movwf	indf2,c
  3756                           
  3757                           ;SystemStatus.c: 109: tempRunTime /= 10;
  3758  001E00  C069  F018         	movff	GetMcuRunTime@tempRunTime,___lldiv@dividend
  3759  001E04  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___lldiv@dividend+1
  3760  001E08  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___lldiv@dividend+2
  3761  001E0C  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___lldiv@dividend+3
  3762  001E10  0E0A               	movlw	10
  3763  001E12  6E1C               	movwf	___lldiv@divisor,c
  3764  001E14  0E00               	movlw	0
  3765  001E16  6E1D               	movwf	___lldiv@divisor+1,c
  3766  001E18  0E00               	movlw	0
  3767  001E1A  6E1E               	movwf	___lldiv@divisor+2,c
  3768  001E1C  0E00               	movlw	0
  3769  001E1E  6E1F               	movwf	___lldiv@divisor+3,c
  3770  001E20  ECA8  F013         	call	___lldiv	;wreg free
  3771  001E24  C018  F069         	movff	?___lldiv,GetMcuRunTime@tempRunTime
  3772  001E28  C019  F06A         	movff	?___lldiv+1,GetMcuRunTime@tempRunTime+1
  3773  001E2C  C01A  F06B         	movff	?___lldiv+2,GetMcuRunTime@tempRunTime+2
  3774  001E30  C01B  F06C         	movff	?___lldiv+3,GetMcuRunTime@tempRunTime+3
  3775  001E34  0100               	movlb	0	; () banked
  3776  001E36  4B6D               	infsnz	GetMcuRunTime@idx& (0+255),f,b
  3777  001E38  2B6E               	incf	(GetMcuRunTime@idx+1)& (0+255),f,b
  3778  001E3A  D7BA               	goto	l7602
  3779  001E3C                     u7400:
  3780  001E3C                     l7614:
  3781                           
  3782                           ; BSR set to: 0
  3783                           ;SystemStatus.c: 110: }
  3784                           ;SystemStatus.c: 112: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  3785  001E3C  0E60               	movlw	low GetMcuRunTime@TxMsg
  3786  001E3E  6E18               	movwf	crc8@dataArray,c
  3787  001E40  0E00               	movlw	high GetMcuRunTime@TxMsg
  3788  001E42  6E19               	movwf	crc8@dataArray+1,c
  3789  001E44  0E00               	movlw	0
  3790  001E46  6E1B               	movwf	crc8@dataSize+1,c
  3791  001E48  0E08               	movlw	8
  3792  001E4A  6E1A               	movwf	crc8@dataSize,c
  3793  001E4C  ECAD  F017         	call	_crc8	;wreg free
  3794  001E50  0100               	movlb	0	; () banked
  3795  001E52  6F68               	movwf	(GetMcuRunTime@TxMsg+8)& (0+255),b
  3796                           
  3797                           ; BSR set to: 0
  3798                           ;SystemStatus.c: 114: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  3799  001E54  0E60               	movlw	low GetMcuRunTime@TxMsg
  3800  001E56  6E19               	movwf	WriteUartMessage@dataBuf,c
  3801  001E58  0E00               	movlw	high GetMcuRunTime@TxMsg
  3802  001E5A  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  3803  001E5C  0E00               	movlw	0
  3804  001E5E  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  3805  001E60  0E09               	movlw	9
  3806  001E62  6E1B               	movwf	WriteUartMessage@dataSize,c
  3807  001E64  EC22  F01A         	call	_WriteUartMessage	;wreg free
  3808  001E68  0012               	return		;funcret
  3809  001E6A                     __end_of_GetMcuRunTime:
  3810                           	opt stack 0
  3811                           tosu	equ	0xFFF
  3812                           tosh	equ	0xFFE
  3813                           tosl	equ	0xFFD
  3814                           pclath	equ	0xFFA
  3815                           tblptru	equ	0xFF8
  3816                           tblptrh	equ	0xFF7
  3817                           tblptrl	equ	0xFF6
  3818                           tablat	equ	0xFF5
  3819                           prodh	equ	0xFF4
  3820                           prodl	equ	0xFF3
  3821                           intcon	equ	0xFF2
  3822                           postinc0	equ	0xFEE
  3823                           wreg	equ	0xFE8
  3824                           postdec1	equ	0xFE5
  3825                           fsr1l	equ	0xFE1
  3826                           indf2	equ	0xFDF
  3827                           postinc2	equ	0xFDE
  3828                           fsr2h	equ	0xFDA
  3829                           fsr2l	equ	0xFD9
  3830                           status	equ	0xFD8
  3831                           
  3832 ;; *************** function ___lldiv *****************
  3833 ;; Defined at:
  3834 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  3835 ;; Parameters:    Size  Location     Type
  3836 ;;  dividend        4   23[COMRAM] unsigned long 
  3837 ;;  divisor         4   27[COMRAM] unsigned long 
  3838 ;; Auto vars:     Size  Location     Type
  3839 ;;  quotient        4   31[COMRAM] unsigned long 
  3840 ;;  counter         1   35[COMRAM] unsigned char 
  3841 ;; Return value:  Size  Location     Type
  3842 ;;                  4   23[COMRAM] unsigned long 
  3843 ;; Registers used:
  3844 ;;		wreg, status,2, status,0
  3845 ;; Tracked objects:
  3846 ;;		On entry : 0/0
  3847 ;;		On exit  : 0/0
  3848 ;;		Unchanged: 0/0
  3849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3850 ;;      Params:         8       0       0       0       0       0       0
  3851 ;;      Locals:         5       0       0       0       0       0       0
  3852 ;;      Temps:          0       0       0       0       0       0       0
  3853 ;;      Totals:        13       0       0       0       0       0       0
  3854 ;;Total ram usage:       13 bytes
  3855 ;; Hardware stack levels used:    1
  3856 ;; Hardware stack levels required when called:    3
  3857 ;; This function calls:
  3858 ;;		Nothing
  3859 ;; This function is called by:
  3860 ;;		_GetMcuRunTime
  3861 ;; This function uses a non-reentrant model
  3862 ;;
  3863                           
  3864                           	psect	text17
  3865  002750                     __ptext17:
  3866                           	opt stack 0
  3867  002750                     ___lldiv:
  3868                           	opt stack 24
  3869                           
  3870                           ;incstack = 0
  3871  002750  0E00               	movlw	0
  3872  002752  6E20               	movwf	___lldiv@quotient,c
  3873  002754  0E00               	movlw	0
  3874  002756  6E21               	movwf	___lldiv@quotient+1,c
  3875  002758  0E00               	movlw	0
  3876  00275A  6E22               	movwf	___lldiv@quotient+2,c
  3877  00275C  0E00               	movlw	0
  3878  00275E  6E23               	movwf	___lldiv@quotient+3,c
  3879  002760  501C               	movf	___lldiv@divisor,w,c
  3880  002762  101D               	iorwf	___lldiv@divisor+1,w,c
  3881  002764  101E               	iorwf	___lldiv@divisor+2,w,c
  3882  002766  101F               	iorwf	___lldiv@divisor+3,w,c
  3883  002768  B4D8               	btfsc	status,2,c
  3884  00276A  D02A               	goto	l1801
  3885  00276C  0E01               	movlw	1
  3886  00276E  6E24               	movwf	___lldiv@counter,c
  3887  002770  D006               	goto	l1796
  3888  002772  90D8               	bcf	status,0,c
  3889  002774  361C               	rlcf	___lldiv@divisor,f,c
  3890  002776  361D               	rlcf	___lldiv@divisor+1,f,c
  3891  002778  361E               	rlcf	___lldiv@divisor+2,f,c
  3892  00277A  361F               	rlcf	___lldiv@divisor+3,f,c
  3893  00277C  2A24               	incf	___lldiv@counter,f,c
  3894  00277E                     l1796:
  3895  00277E  AE1F               	btfss	___lldiv@divisor+3,7,c
  3896  002780  D7F8               	goto	l1797
  3897  002782                     u6860:
  3898  002782  90D8               	bcf	status,0,c
  3899  002784  3620               	rlcf	___lldiv@quotient,f,c
  3900  002786  3621               	rlcf	___lldiv@quotient+1,f,c
  3901  002788  3622               	rlcf	___lldiv@quotient+2,f,c
  3902  00278A  3623               	rlcf	___lldiv@quotient+3,f,c
  3903  00278C  501C               	movf	___lldiv@divisor,w,c
  3904  00278E  5C18               	subwf	___lldiv@dividend,w,c
  3905  002790  501D               	movf	___lldiv@divisor+1,w,c
  3906  002792  5819               	subwfb	___lldiv@dividend+1,w,c
  3907  002794  501E               	movf	___lldiv@divisor+2,w,c
  3908  002796  581A               	subwfb	___lldiv@dividend+2,w,c
  3909  002798  501F               	movf	___lldiv@divisor+3,w,c
  3910  00279A  581B               	subwfb	___lldiv@dividend+3,w,c
  3911  00279C  A0D8               	btfss	status,0,c
  3912  00279E  D009               	goto	l1800
  3913  0027A0  501C               	movf	___lldiv@divisor,w,c
  3914  0027A2  5E18               	subwf	___lldiv@dividend,f,c
  3915  0027A4  501D               	movf	___lldiv@divisor+1,w,c
  3916  0027A6  5A19               	subwfb	___lldiv@dividend+1,f,c
  3917  0027A8  501E               	movf	___lldiv@divisor+2,w,c
  3918  0027AA  5A1A               	subwfb	___lldiv@dividend+2,f,c
  3919  0027AC  501F               	movf	___lldiv@divisor+3,w,c
  3920  0027AE  5A1B               	subwfb	___lldiv@dividend+3,f,c
  3921  0027B0  8020               	bsf	___lldiv@quotient,0,c
  3922  0027B2                     l1800:
  3923  0027B2  90D8               	bcf	status,0,c
  3924  0027B4  321F               	rrcf	___lldiv@divisor+3,f,c
  3925  0027B6  321E               	rrcf	___lldiv@divisor+2,f,c
  3926  0027B8  321D               	rrcf	___lldiv@divisor+1,f,c
  3927  0027BA  321C               	rrcf	___lldiv@divisor,f,c
  3928  0027BC  2E24               	decfsz	___lldiv@counter,f,c
  3929  0027BE  D7E1               	goto	u6860
  3930  0027C0                     l1801:
  3931  0027C0  C020  F018         	movff	___lldiv@quotient,?___lldiv
  3932  0027C4  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  3933  0027C8  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  3934  0027CC  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  3935  0027D0  0012               	return		;funcret
  3936  0027D2                     __end_of___lldiv:
  3937                           	opt stack 0
  3938                           tosu	equ	0xFFF
  3939                           tosh	equ	0xFFE
  3940                           tosl	equ	0xFFD
  3941                           pclath	equ	0xFFA
  3942                           tblptru	equ	0xFF8
  3943                           tblptrh	equ	0xFF7
  3944                           tblptrl	equ	0xFF6
  3945                           tablat	equ	0xFF5
  3946                           prodh	equ	0xFF4
  3947                           prodl	equ	0xFF3
  3948                           intcon	equ	0xFF2
  3949                           postinc0	equ	0xFEE
  3950                           wreg	equ	0xFE8
  3951                           postdec1	equ	0xFE5
  3952                           fsr1l	equ	0xFE1
  3953                           indf2	equ	0xFDF
  3954                           postinc2	equ	0xFDE
  3955                           fsr2h	equ	0xFDA
  3956                           fsr2l	equ	0xFD9
  3957                           status	equ	0xFD8
  3958                           
  3959 ;; *************** function _GetMcuFwVersion *****************
  3960 ;; Defined at:
  3961 ;;		line 26 in file "SystemStatus.c"
  3962 ;; Parameters:    Size  Location     Type
  3963 ;;		None
  3964 ;; Auto vars:     Size  Location     Type
  3965 ;;  idx             1   46[COMRAM] unsigned char 
  3966 ;;  TxMsg           9   37[COMRAM] unsigned char [9]
  3967 ;; Return value:  Size  Location     Type
  3968 ;;                  1    wreg      void 
  3969 ;; Registers used:
  3970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/0
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3976 ;;      Params:         0       0       0       0       0       0       0
  3977 ;;      Locals:        10       0       0       0       0       0       0
  3978 ;;      Temps:          2       0       0       0       0       0       0
  3979 ;;      Totals:        12       0       0       0       0       0       0
  3980 ;;Total ram usage:       12 bytes
  3981 ;; Hardware stack levels used:    1
  3982 ;; Hardware stack levels required when called:    5
  3983 ;; This function calls:
  3984 ;;		_EepromRead
  3985 ;;		_WriteUartMessage
  3986 ;;		_ZeroArray
  3987 ;;		_crc8
  3988 ;; This function is called by:
  3989 ;;		_GroupStatusAndVersion
  3990 ;; This function uses a non-reentrant model
  3991 ;;
  3992                           
  3993                           	psect	text18
  3994  0027D2                     __ptext18:
  3995                           	opt stack 0
  3996  0027D2                     _GetMcuFwVersion:
  3997                           	opt stack 23
  3998                           
  3999                           ;SystemStatus.c: 29: char TxMsg[(0x4) + (0x4) + 1];
  4000                           ;SystemStatus.c: 30: ZeroArray(TxMsg, (0x4) + (0x4) + 1);
  4001                           
  4002                           ;incstack = 0
  4003  0027D2  0E26               	movlw	low GetMcuFwVersion@TxMsg
  4004  0027D4  6E20               	movwf	ZeroArray@array,c
  4005  0027D6  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4006  0027D8  6E21               	movwf	ZeroArray@array+1,c
  4007  0027DA  0E00               	movlw	0
  4008  0027DC  6E23               	movwf	ZeroArray@size+1,c
  4009  0027DE  0E09               	movlw	9
  4010  0027E0  6E22               	movwf	ZeroArray@size,c
  4011  0027E2  ECA8  F01B         	call	_ZeroArray	;wreg free
  4012                           
  4013                           ;SystemStatus.c: 33: TxMsg[(0)] = (0x24);
  4014  0027E6  0E24               	movlw	36
  4015  0027E8  6E26               	movwf	GetMcuFwVersion@TxMsg,c
  4016                           
  4017                           ;SystemStatus.c: 34: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4018  0027EA  0E02               	movlw	2
  4019  0027EC  6E27               	movwf	GetMcuFwVersion@TxMsg+1,c
  4020                           
  4021                           ;SystemStatus.c: 35: TxMsg[(2)] = STATUS_GET_MCU_FW_VERSION;
  4022  0027EE  0E22               	movlw	34
  4023  0027F0  6E28               	movwf	GetMcuFwVersion@TxMsg+2,c
  4024                           
  4025                           ;SystemStatus.c: 36: TxMsg[(3)] = (0x4);
  4026  0027F2  0E04               	movlw	4
  4027  0027F4  6E29               	movwf	GetMcuFwVersion@TxMsg+3,c
  4028                           
  4029                           ;SystemStatus.c: 39: for(uint8_t idx = 0; idx < (0x4); idx++)
  4030  0027F6  0E00               	movlw	0
  4031  0027F8  6E2F               	movwf	GetMcuFwVersion@idx,c
  4032  0027FA                     l7530:
  4033  0027FA  0E03               	movlw	3
  4034  0027FC  642F               	cpfsgt	GetMcuFwVersion@idx,c
  4035  0027FE  D001               	goto	l1353
  4036  002800  D013               	goto	u7320
  4037  002802                     l1353:
  4038                           
  4039                           ;SystemStatus.c: 40: {
  4040                           ;SystemStatus.c: 41: TxMsg[(0x4) + idx] = EepromRead(idx);
  4041  002802  502F               	movf	GetMcuFwVersion@idx,w,c
  4042  002804  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4043  002806  6A25               	clrf	(??_GetMcuFwVersion+1)& (0+255),c
  4044  002808  0E04               	movlw	4
  4045  00280A  2624               	addwf	??_GetMcuFwVersion,f,c
  4046  00280C  0E00               	movlw	0
  4047  00280E  2225               	addwfc	??_GetMcuFwVersion+1,f,c
  4048  002810  0E26               	movlw	low GetMcuFwVersion@TxMsg
  4049  002812  2424               	addwf	??_GetMcuFwVersion,w,c
  4050  002814  6ED9               	movwf	fsr2l,c
  4051  002816  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4052  002818  2025               	addwfc	??_GetMcuFwVersion+1,w,c
  4053  00281A  6EDA               	movwf	fsr2h,c
  4054  00281C  502F               	movf	GetMcuFwVersion@idx,w,c
  4055  00281E  EC75  F01C         	call	_EepromRead
  4056  002822  6EDF               	movwf	indf2,c
  4057  002824  2A2F               	incf	GetMcuFwVersion@idx,f,c
  4058  002826  D7E9               	goto	l7530
  4059  002828                     u7320:
  4060                           
  4061                           ;SystemStatus.c: 42: }
  4062                           ;SystemStatus.c: 44: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4063  002828  0E26               	movlw	low GetMcuFwVersion@TxMsg
  4064  00282A  6E18               	movwf	crc8@dataArray,c
  4065  00282C  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4066  00282E  6E19               	movwf	crc8@dataArray+1,c
  4067  002830  0E00               	movlw	0
  4068  002832  6E1B               	movwf	crc8@dataSize+1,c
  4069  002834  0E08               	movlw	8
  4070  002836  6E1A               	movwf	crc8@dataSize,c
  4071  002838  ECAD  F017         	call	_crc8	;wreg free
  4072  00283C  6E2E               	movwf	GetMcuFwVersion@TxMsg+8,c
  4073                           
  4074                           ;SystemStatus.c: 46: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4075  00283E  0E26               	movlw	low GetMcuFwVersion@TxMsg
  4076  002840  6E19               	movwf	WriteUartMessage@dataBuf,c
  4077  002842  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4078  002844  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4079  002846  0E00               	movlw	0
  4080  002848  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4081  00284A  0E09               	movlw	9
  4082  00284C  6E1B               	movwf	WriteUartMessage@dataSize,c
  4083  00284E  EC22  F01A         	call	_WriteUartMessage	;wreg free
  4084  002852  0012               	return		;funcret
  4085  002854                     __end_of_GetMcuFwVersion:
  4086                           	opt stack 0
  4087                           tosu	equ	0xFFF
  4088                           tosh	equ	0xFFE
  4089                           tosl	equ	0xFFD
  4090                           pclath	equ	0xFFA
  4091                           tblptru	equ	0xFF8
  4092                           tblptrh	equ	0xFF7
  4093                           tblptrl	equ	0xFF6
  4094                           tablat	equ	0xFF5
  4095                           prodh	equ	0xFF4
  4096                           prodl	equ	0xFF3
  4097                           intcon	equ	0xFF2
  4098                           postinc0	equ	0xFEE
  4099                           wreg	equ	0xFE8
  4100                           postdec1	equ	0xFE5
  4101                           fsr1l	equ	0xFE1
  4102                           indf2	equ	0xFDF
  4103                           postinc2	equ	0xFDE
  4104                           fsr2h	equ	0xFDA
  4105                           fsr2l	equ	0xFD9
  4106                           status	equ	0xFD8
  4107                           
  4108 ;; *************** function _GetCpldFwVersion *****************
  4109 ;; Defined at:
  4110 ;;		line 58 in file "SystemStatus.c"
  4111 ;; Parameters:    Size  Location     Type
  4112 ;;		None
  4113 ;; Auto vars:     Size  Location     Type
  4114 ;;  idx             2   46[COMRAM] int 
  4115 ;;  TxMsg           9   37[COMRAM] unsigned char [9]
  4116 ;; Return value:  Size  Location     Type
  4117 ;;                  1    wreg      void 
  4118 ;; Registers used:
  4119 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4120 ;; Tracked objects:
  4121 ;;		On entry : 0/0
  4122 ;;		On exit  : 0/0
  4123 ;;		Unchanged: 0/0
  4124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4125 ;;      Params:         0       0       0       0       0       0       0
  4126 ;;      Locals:        11       0       0       0       0       0       0
  4127 ;;      Temps:          2       0       0       0       0       0       0
  4128 ;;      Totals:        13       0       0       0       0       0       0
  4129 ;;Total ram usage:       13 bytes
  4130 ;; Hardware stack levels used:    1
  4131 ;; Hardware stack levels required when called:    5
  4132 ;; This function calls:
  4133 ;;		_EepromRead
  4134 ;;		_WriteUartMessage
  4135 ;;		_ZeroArray
  4136 ;;		_crc8
  4137 ;; This function is called by:
  4138 ;;		_GroupStatusAndVersion
  4139 ;; This function uses a non-reentrant model
  4140 ;;
  4141                           
  4142                           	psect	text19
  4143  0025A0                     __ptext19:
  4144                           	opt stack 0
  4145  0025A0                     _GetCpldFwVersion:
  4146                           	opt stack 23
  4147                           
  4148                           ;SystemStatus.c: 61: char TxMsg[(0x4) + (0x4) + 1];
  4149                           ;SystemStatus.c: 62: ZeroArray(TxMsg, (0x4) + (0x4) + 1);
  4150                           
  4151                           ;incstack = 0
  4152  0025A0  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4153  0025A2  6E20               	movwf	ZeroArray@array,c
  4154  0025A4  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4155  0025A6  6E21               	movwf	ZeroArray@array+1,c
  4156  0025A8  0E00               	movlw	0
  4157  0025AA  6E23               	movwf	ZeroArray@size+1,c
  4158  0025AC  0E09               	movlw	9
  4159  0025AE  6E22               	movwf	ZeroArray@size,c
  4160  0025B0  ECA8  F01B         	call	_ZeroArray	;wreg free
  4161                           
  4162                           ;SystemStatus.c: 65: TxMsg[(0)] = (0x24);
  4163  0025B4  0E24               	movlw	36
  4164  0025B6  6E26               	movwf	GetCpldFwVersion@TxMsg,c
  4165                           
  4166                           ;SystemStatus.c: 66: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4167  0025B8  0E02               	movlw	2
  4168  0025BA  6E27               	movwf	GetCpldFwVersion@TxMsg+1,c
  4169                           
  4170                           ;SystemStatus.c: 67: TxMsg[(2)] = STATUS_GET_CPLD_FW_VERSION;
  4171  0025BC  0E23               	movlw	35
  4172  0025BE  6E28               	movwf	GetCpldFwVersion@TxMsg+2,c
  4173                           
  4174                           ;SystemStatus.c: 68: TxMsg[(3)] = (0x4);
  4175  0025C0  0E04               	movlw	4
  4176  0025C2  6E29               	movwf	GetCpldFwVersion@TxMsg+3,c
  4177                           
  4178                           ;SystemStatus.c: 71: for(int idx = 0; idx < (0x4); idx++)
  4179  0025C4  0E00               	movlw	0
  4180  0025C6  6E30               	movwf	GetCpldFwVersion@idx+1,c
  4181  0025C8  0E00               	movlw	0
  4182  0025CA  6E2F               	movwf	GetCpldFwVersion@idx,c
  4183  0025CC                     l7570:
  4184  0025CC  BE30               	btfsc	GetCpldFwVersion@idx+1,7,c
  4185  0025CE  D006               	goto	l1363
  4186  0025D0  5030               	movf	GetCpldFwVersion@idx+1,w,c
  4187  0025D2  E118               	bnz	l7580
  4188  0025D4  0E04               	movlw	4
  4189  0025D6  5C2F               	subwf	GetCpldFwVersion@idx,w,c
  4190  0025D8  B0D8               	btfsc	status,0,c
  4191  0025DA  D014               	goto	u7360
  4192  0025DC                     l1363:
  4193                           
  4194                           ;SystemStatus.c: 72: {
  4195                           ;SystemStatus.c: 73: TxMsg[(0x4) + idx] = EepromRead((0x4) + idx);
  4196  0025DC  0E04               	movlw	4
  4197  0025DE  242F               	addwf	GetCpldFwVersion@idx,w,c
  4198  0025E0  6E24               	movwf	??_GetCpldFwVersion& (0+255),c
  4199  0025E2  0E00               	movlw	0
  4200  0025E4  2030               	addwfc	GetCpldFwVersion@idx+1,w,c
  4201  0025E6  6E25               	movwf	(??_GetCpldFwVersion+1)& (0+255),c
  4202  0025E8  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4203  0025EA  2424               	addwf	??_GetCpldFwVersion,w,c
  4204  0025EC  6ED9               	movwf	fsr2l,c
  4205  0025EE  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4206  0025F0  2025               	addwfc	??_GetCpldFwVersion+1,w,c
  4207  0025F2  6EDA               	movwf	fsr2h,c
  4208  0025F4  502F               	movf	GetCpldFwVersion@idx,w,c
  4209  0025F6  0F04               	addlw	4
  4210  0025F8  EC75  F01C         	call	_EepromRead
  4211  0025FC  6EDF               	movwf	indf2,c
  4212  0025FE  4A2F               	infsnz	GetCpldFwVersion@idx,f,c
  4213  002600  2A30               	incf	GetCpldFwVersion@idx+1,f,c
  4214  002602  D7E4               	goto	l7570
  4215  002604                     u7360:
  4216  002604                     l7580:
  4217                           
  4218                           ;SystemStatus.c: 74: }
  4219                           ;SystemStatus.c: 76: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4220  002604  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4221  002606  6E18               	movwf	crc8@dataArray,c
  4222  002608  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4223  00260A  6E19               	movwf	crc8@dataArray+1,c
  4224  00260C  0E00               	movlw	0
  4225  00260E  6E1B               	movwf	crc8@dataSize+1,c
  4226  002610  0E08               	movlw	8
  4227  002612  6E1A               	movwf	crc8@dataSize,c
  4228  002614  ECAD  F017         	call	_crc8	;wreg free
  4229  002618  6E2E               	movwf	GetCpldFwVersion@TxMsg+8,c
  4230                           
  4231                           ;SystemStatus.c: 78: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4232  00261A  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4233  00261C  6E19               	movwf	WriteUartMessage@dataBuf,c
  4234  00261E  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4235  002620  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4236  002622  0E00               	movlw	0
  4237  002624  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4238  002626  0E09               	movlw	9
  4239  002628  6E1B               	movwf	WriteUartMessage@dataSize,c
  4240  00262A  EC22  F01A         	call	_WriteUartMessage	;wreg free
  4241  00262E  0012               	return		;funcret
  4242  002630                     __end_of_GetCpldFwVersion:
  4243                           	opt stack 0
  4244                           tosu	equ	0xFFF
  4245                           tosh	equ	0xFFE
  4246                           tosl	equ	0xFFD
  4247                           pclath	equ	0xFFA
  4248                           tblptru	equ	0xFF8
  4249                           tblptrh	equ	0xFF7
  4250                           tblptrl	equ	0xFF6
  4251                           tablat	equ	0xFF5
  4252                           prodh	equ	0xFF4
  4253                           prodl	equ	0xFF3
  4254                           intcon	equ	0xFF2
  4255                           postinc0	equ	0xFEE
  4256                           wreg	equ	0xFE8
  4257                           postdec1	equ	0xFE5
  4258                           fsr1l	equ	0xFE1
  4259                           indf2	equ	0xFDF
  4260                           postinc2	equ	0xFDE
  4261                           fsr2h	equ	0xFDA
  4262                           fsr2l	equ	0xFD9
  4263                           status	equ	0xFD8
  4264                           
  4265 ;; *************** function _EepromRead *****************
  4266 ;; Defined at:
  4267 ;;		line 215 in file "FlashApp.c"
  4268 ;; Parameters:    Size  Location     Type
  4269 ;;  address         1    wreg     unsigned char 
  4270 ;; Auto vars:     Size  Location     Type
  4271 ;;  address         1   24[COMRAM] unsigned char 
  4272 ;; Return value:  Size  Location     Type
  4273 ;;                  1    wreg      unsigned char 
  4274 ;; Registers used:
  4275 ;;		wreg, status,2, cstack
  4276 ;; Tracked objects:
  4277 ;;		On entry : 0/0
  4278 ;;		On exit  : 0/0
  4279 ;;		Unchanged: 0/0
  4280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4281 ;;      Params:         0       0       0       0       0       0       0
  4282 ;;      Locals:         1       0       0       0       0       0       0
  4283 ;;      Temps:          0       0       0       0       0       0       0
  4284 ;;      Totals:         1       0       0       0       0       0       0
  4285 ;;Total ram usage:        1 bytes
  4286 ;; Hardware stack levels used:    1
  4287 ;; Hardware stack levels required when called:    4
  4288 ;; This function calls:
  4289 ;;		_DATAEE_ReadByte
  4290 ;; This function is called by:
  4291 ;;		_GetMcuFwVersion
  4292 ;;		_GetCpldFwVersion
  4293 ;; This function uses a non-reentrant model
  4294 ;;
  4295                           
  4296                           	psect	text20
  4297  0038EA                     __ptext20:
  4298                           	opt stack 0
  4299  0038EA                     _EepromRead:
  4300                           	opt stack 23
  4301                           
  4302                           ;incstack = 0
  4303                           ;EepromRead@address stored from wreg
  4304  0038EA  6E19               	movwf	EepromRead@address,c
  4305                           
  4306                           ;FlashApp.c: 217: return DATAEE_ReadByte(address);
  4307  0038EC  5019               	movf	EepromRead@address,w,c
  4308  0038EE  EC05  F01C         	call	_DATAEE_ReadByte
  4309  0038F2  0012               	return	
  4310  0038F4                     __end_of_EepromRead:
  4311                           	opt stack 0
  4312                           tosu	equ	0xFFF
  4313                           tosh	equ	0xFFE
  4314                           tosl	equ	0xFFD
  4315                           pclath	equ	0xFFA
  4316                           tblptru	equ	0xFF8
  4317                           tblptrh	equ	0xFF7
  4318                           tblptrl	equ	0xFF6
  4319                           tablat	equ	0xFF5
  4320                           prodh	equ	0xFF4
  4321                           prodl	equ	0xFF3
  4322                           intcon	equ	0xFF2
  4323                           postinc0	equ	0xFEE
  4324                           wreg	equ	0xFE8
  4325                           postdec1	equ	0xFE5
  4326                           fsr1l	equ	0xFE1
  4327                           indf2	equ	0xFDF
  4328                           postinc2	equ	0xFDE
  4329                           fsr2h	equ	0xFDA
  4330                           fsr2l	equ	0xFD9
  4331                           status	equ	0xFD8
  4332                           
  4333 ;; *************** function _DATAEE_ReadByte *****************
  4334 ;; Defined at:
  4335 ;;		line 194 in file "mcc_generated_files/memory.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;  bAdd            1    wreg     unsigned char 
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;  bAdd            1   23[COMRAM] unsigned char 
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  1    wreg      unsigned char 
  4342 ;; Registers used:
  4343 ;;		wreg, status,2
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4349 ;;      Params:         0       0       0       0       0       0       0
  4350 ;;      Locals:         1       0       0       0       0       0       0
  4351 ;;      Temps:          0       0       0       0       0       0       0
  4352 ;;      Totals:         1       0       0       0       0       0       0
  4353 ;;Total ram usage:        1 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    3
  4356 ;; This function calls:
  4357 ;;		Nothing
  4358 ;; This function is called by:
  4359 ;;		_EepromRead
  4360 ;;		_EepromTest
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           	psect	text21
  4365  00380A                     __ptext21:
  4366                           	opt stack 0
  4367  00380A                     _DATAEE_ReadByte:
  4368                           	opt stack 23
  4369                           
  4370                           ;incstack = 0
  4371                           ;DATAEE_ReadByte@bAdd stored from wreg
  4372  00380A  6E18               	movwf	DATAEE_ReadByte@bAdd,c
  4373                           
  4374                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
  4375  00380C  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  4376                           
  4377                           ;memory.c: 198: EECON1bits.CFGS = 0;
  4378  003810  9CA6               	bcf	4006,6,c	;volsfr
  4379                           
  4380                           ;memory.c: 199: EECON1bits.EEPGD = 0;
  4381  003812  9EA6               	bcf	4006,7,c	;volsfr
  4382                           
  4383                           ;memory.c: 200: EECON1bits.RD = 1;
  4384  003814  80A6               	bsf	4006,0,c	;volsfr
  4385                           
  4386                           ;memory.c: 201: __nop();
  4387  003816  F000               	nop	
  4388                           
  4389                           ;memory.c: 202: __nop();
  4390  003818  F000               	nop	
  4391                           
  4392                           ;memory.c: 204: return (EEDATA);
  4393  00381A  50A8               	movf	4008,w,c	;volatile
  4394  00381C  0012               	return	
  4395  00381E                     __end_of_DATAEE_ReadByte:
  4396                           	opt stack 0
  4397                           tosu	equ	0xFFF
  4398                           tosh	equ	0xFFE
  4399                           tosl	equ	0xFFD
  4400                           pclath	equ	0xFFA
  4401                           tblptru	equ	0xFF8
  4402                           tblptrh	equ	0xFF7
  4403                           tblptrl	equ	0xFF6
  4404                           tablat	equ	0xFF5
  4405                           prodh	equ	0xFF4
  4406                           prodl	equ	0xFF3
  4407                           intcon	equ	0xFF2
  4408                           postinc0	equ	0xFEE
  4409                           wreg	equ	0xFE8
  4410                           postdec1	equ	0xFE5
  4411                           fsr1l	equ	0xFE1
  4412                           indf2	equ	0xFDF
  4413                           postinc2	equ	0xFDE
  4414                           fsr2h	equ	0xFDA
  4415                           fsr2l	equ	0xFD9
  4416                           status	equ	0xFD8
  4417                           
  4418 ;; *************** function _FlashReadUart *****************
  4419 ;; Defined at:
  4420 ;;		line 62 in file "FlashApp.c"
  4421 ;; Parameters:    Size  Location     Type
  4422 ;;  numOfSampleT    2   43[COMRAM] int 
  4423 ;; Auto vars:     Size  Location     Type
  4424 ;;  idx             2   91[BANK0 ] int 
  4425 ;;  TxMsg          69   12[BANK0 ] unsigned char [69]
  4426 ;;  offset          2   93[BANK0 ] int 
  4427 ;;  j               2   89[BANK0 ] int 
  4428 ;; Return value:  Size  Location     Type
  4429 ;;                  1    wreg      void 
  4430 ;; Registers used:
  4431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4432 ;; Tracked objects:
  4433 ;;		On entry : 0/0
  4434 ;;		On exit  : 0/0
  4435 ;;		Unchanged: 0/0
  4436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4437 ;;      Params:         2       0       0       0       0       0       0
  4438 ;;      Locals:         0      83       0       0       0       0       0
  4439 ;;      Temps:          0      12       0       0       0       0       0
  4440 ;;      Totals:         2      95       0       0       0       0       0
  4441 ;;Total ram usage:       97 bytes
  4442 ;; Hardware stack levels used:    1
  4443 ;; Hardware stack levels required when called:    6
  4444 ;; This function calls:
  4445 ;;		_FLASH_IsWriteDone
  4446 ;;		_FLASH_ReadByte
  4447 ;;		_SendAckMessage
  4448 ;;		_WriteUartMessage
  4449 ;;		_ZeroArray
  4450 ;;		_abs
  4451 ;;		_crc8
  4452 ;; This function is called by:
  4453 ;;		_GroupFlashMemory
  4454 ;; This function uses a non-reentrant model
  4455 ;;
  4456                           
  4457                           	psect	text22
  4458  0006AA                     __ptext22:
  4459                           	opt stack 0
  4460  0006AA                     _FlashReadUart:
  4461                           	opt stack 22
  4462                           
  4463                           ;FlashApp.c: 65: int j=0;
  4464                           
  4465                           ;incstack = 0
  4466  0006AA  0E00               	movlw	0
  4467  0006AC  0100               	movlb	0	; () banked
  4468  0006AE  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  4469  0006B0  0E00               	movlw	0
  4470  0006B2  6FB9               	movwf	FlashReadUart@j& (0+255),b
  4471                           
  4472                           ;FlashApp.c: 66: int offset = 0;
  4473  0006B4  0E00               	movlw	0
  4474  0006B6  6FBE               	movwf	(FlashReadUart@offset+1)& (0+255),b
  4475  0006B8  0E00               	movlw	0
  4476  0006BA  6FBD               	movwf	FlashReadUart@offset& (0+255),b
  4477                           
  4478                           ; BSR set to: 0
  4479                           ;FlashApp.c: 67: char TxMsg[(64) + (0x4) + 1];
  4480                           ;FlashApp.c: 68: ZeroArray(TxMsg, (64) + (0x4) + 1);
  4481  0006BC  0E6C               	movlw	low FlashReadUart@TxMsg
  4482  0006BE  6E20               	movwf	ZeroArray@array,c
  4483  0006C0  0E00               	movlw	high FlashReadUart@TxMsg
  4484  0006C2  6E21               	movwf	ZeroArray@array+1,c
  4485  0006C4  0E00               	movlw	0
  4486  0006C6  6E23               	movwf	ZeroArray@size+1,c
  4487  0006C8  0E45               	movlw	69
  4488  0006CA  6E22               	movwf	ZeroArray@size,c
  4489  0006CC  ECA8  F01B         	call	_ZeroArray	;wreg free
  4490                           
  4491                           ;FlashApp.c: 71: if (FLASH_IsWriteDone() == 0)
  4492  0006D0  EC50  F01C         	call	_FLASH_IsWriteDone	;wreg free
  4493  0006D4  0900               	iorlw	0
  4494  0006D6  B4D8               	btfsc	status,2,c
  4495  0006D8  0012               	return	
  4496                           
  4497                           ;FlashApp.c: 74: }
  4498                           ;FlashApp.c: 76: if (numOfReadSamples)
  4499                           
  4500                           ;FlashApp.c: 72: {
  4501                           ;FlashApp.c: 73: return;
  4502  0006DA  503E               	movf	_numOfReadSamples,w,c
  4503  0006DC  103F               	iorwf	_numOfReadSamples+1,w,c
  4504  0006DE  1040               	iorwf	_numOfReadSamples+2,w,c
  4505  0006E0  1041               	iorwf	_numOfReadSamples+3,w,c
  4506  0006E2  B4D8               	btfsc	status,2,c
  4507  0006E4  D0EE               	goto	l290
  4508                           
  4509                           ;FlashApp.c: 77: {
  4510                           ;FlashApp.c: 78: if (numOfValidateSamples)
  4511  0006E6  5031               	movf	_numOfValidateSamples,w,c
  4512  0006E8  1032               	iorwf	_numOfValidateSamples+1,w,c
  4513  0006EA  1033               	iorwf	_numOfValidateSamples+2,w,c
  4514  0006EC  1034               	iorwf	_numOfValidateSamples+3,w,c
  4515  0006EE  B4D8               	btfsc	status,2,c
  4516  0006F0  D09A               	goto	l291
  4517                           
  4518                           ;FlashApp.c: 79: {
  4519                           ;FlashApp.c: 80: offset = numOfValidateSamples - (numOfValidateSamples > numOfSampleToRe
      +                          ad)? numOfValidateSamples : numOfSampleToRead;
  4520  0006F2  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4521  0006F6  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4522  0006FA  0E00               	movlw	0
  4523  0006FC  0100               	movlb	0	; () banked
  4524  0006FE  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4525  000700  0EFF               	movlw	255
  4526  000702  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  4527  000704  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  4528  000706  5031               	movf	_numOfValidateSamples,w,c
  4529  000708  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  4530  00070A  5032               	movf	_numOfValidateSamples+1,w,c
  4531  00070C  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  4532  00070E  5033               	movf	_numOfValidateSamples+2,w,c
  4533  000710  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  4534  000712  5034               	movf	_numOfValidateSamples+3,w,c
  4535  000714  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  4536  000716  B0D8               	btfsc	status,0,c
  4537  000718  D002               	goto	u7070
  4538  00071A  0E01               	movlw	1
  4539  00071C  D001               	goto	u7080
  4540  00071E                     u7070:
  4541  00071E  0E00               	movlw	0
  4542  000720                     u7080:
  4543  000720  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4544  000722  6B65               	clrf	(??_FlashReadUart+5)& (0+255),b
  4545  000724  6B66               	clrf	(??_FlashReadUart+6)& (0+255),b
  4546  000726  6B67               	clrf	(??_FlashReadUart+7)& (0+255),b
  4547  000728  1F64               	comf	(??_FlashReadUart+4)& (0+255),f,b
  4548  00072A  1F65               	comf	(??_FlashReadUart+5)& (0+255),f,b
  4549  00072C  1F66               	comf	(??_FlashReadUart+6)& (0+255),f,b
  4550  00072E  1F67               	comf	(??_FlashReadUart+7)& (0+255),f,b
  4551  000730  2B64               	incf	(??_FlashReadUart+4)& (0+255),f,b
  4552  000732  0E00               	movlw	0
  4553  000734  2365               	addwfc	(??_FlashReadUart+5)& (0+255),f,b
  4554  000736  2366               	addwfc	(??_FlashReadUart+6)& (0+255),f,b
  4555  000738  2367               	addwfc	(??_FlashReadUart+7)& (0+255),f,b
  4556  00073A  5031               	movf	_numOfValidateSamples,w,c
  4557  00073C  2564               	addwf	(??_FlashReadUart+4)& (0+255),w,b
  4558  00073E  6F68               	movwf	(??_FlashReadUart+8)& (0+255),b
  4559  000740  5032               	movf	_numOfValidateSamples+1,w,c
  4560  000742  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  4561  000744  6F69               	movwf	(??_FlashReadUart+9)& (0+255),b
  4562  000746  5033               	movf	_numOfValidateSamples+2,w,c
  4563  000748  2166               	addwfc	(??_FlashReadUart+6)& (0+255),w,b
  4564  00074A  6F6A               	movwf	(??_FlashReadUart+10)& (0+255),b
  4565  00074C  5034               	movf	_numOfValidateSamples+3,w,c
  4566  00074E  2167               	addwfc	(??_FlashReadUart+7)& (0+255),w,b
  4567  000750  6F6B               	movwf	(??_FlashReadUart+11)& (0+255),b
  4568  000752  5168               	movf	(??_FlashReadUart+8)& (0+255),w,b
  4569  000754  1169               	iorwf	(??_FlashReadUart+9)& (0+255),w,b
  4570  000756  116A               	iorwf	(??_FlashReadUart+10)& (0+255),w,b
  4571  000758  116B               	iorwf	(??_FlashReadUart+11)& (0+255),w,b
  4572  00075A  A4D8               	btfss	status,2,c
  4573  00075C  D00A               	goto	l293
  4574                           
  4575                           ; BSR set to: 0
  4576  00075E  C02C  F0B1         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$565
  4577  000762  C02D  F0B2         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$565+1
  4578  000766  0E00               	movlw	0
  4579  000768  BFB2               	btfsc	(_FlashReadUart$565+1)& (0+255),7,b
  4580  00076A  0EFF               	movlw	-1
  4581  00076C  6FB3               	movwf	(_FlashReadUart$565+2)& (0+255),b
  4582  00076E  6FB4               	movwf	(_FlashReadUart$565+3)& (0+255),b
  4583  000770  D008               	goto	l295
  4584  000772                     l293:
  4585                           
  4586                           ; BSR set to: 0
  4587  000772  C031  F0B1         	movff	_numOfValidateSamples,_FlashReadUart$565
  4588  000776  C032  F0B2         	movff	_numOfValidateSamples+1,_FlashReadUart$565+1
  4589  00077A  C033  F0B3         	movff	_numOfValidateSamples+2,_FlashReadUart$565+2
  4590  00077E  C034  F0B4         	movff	_numOfValidateSamples+3,_FlashReadUart$565+3
  4591  000782                     l295:
  4592                           
  4593                           ; BSR set to: 0
  4594  000782  C0B1  F0BD         	movff	_FlashReadUart$565,FlashReadUart@offset
  4595  000786  C0B2  F0BE         	movff	_FlashReadUart$565+1,FlashReadUart@offset+1
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;FlashApp.c: 81: if(offset < 0)
  4599  00078A  AFBE               	btfss	(FlashReadUart@offset+1)& (0+255),7,b
  4600  00078C  D091               	goto	l298
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;FlashApp.c: 82: {
  4604                           ;FlashApp.c: 83: if (abs(offset) > numOfReadSamples)
  4605  00078E  C0BD  F018         	movff	FlashReadUart@offset,abs@a
  4606  000792  C0BE  F019         	movff	FlashReadUart@offset+1,abs@a+1
  4607  000796  ECE2  F01A         	call	_abs	;wreg free
  4608  00079A  C018  F060         	movff	?_abs,??_FlashReadUart
  4609  00079E  C019  F061         	movff	?_abs+1,??_FlashReadUart+1
  4610  0007A2  0E00               	movlw	0
  4611  0007A4  0100               	movlb	0	; () banked
  4612  0007A6  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4613  0007A8  0EFF               	movlw	255
  4614  0007AA  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  4615  0007AC  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  4616  0007AE  5160               	movf	??_FlashReadUart& (0+255),w,b
  4617  0007B0  5C3E               	subwf	_numOfReadSamples,w,c
  4618  0007B2  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  4619  0007B4  583F               	subwfb	_numOfReadSamples+1,w,c
  4620  0007B6  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  4621  0007B8  5840               	subwfb	_numOfReadSamples+2,w,c
  4622  0007BA  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  4623  0007BC  5841               	subwfb	_numOfReadSamples+3,w,c
  4624  0007BE  B0D8               	btfsc	status,0,c
  4625  0007C0  D016               	goto	l297
  4626                           
  4627                           ; BSR set to: 0
  4628                           ;FlashApp.c: 84: {
  4629                           ;FlashApp.c: 85: numOfSampleToRead += offset + numOfReadSamples;
  4630  0007C2  503E               	movf	_numOfReadSamples,w,c
  4631  0007C4  25BD               	addwf	FlashReadUart@offset& (0+255),w,b
  4632  0007C6  6F60               	movwf	??_FlashReadUart& (0+255),b
  4633  0007C8  503F               	movf	_numOfReadSamples+1,w,c
  4634  0007CA  21BE               	addwfc	(FlashReadUart@offset+1)& (0+255),w,b
  4635  0007CC  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  4636  0007CE  5160               	movf	??_FlashReadUart& (0+255),w,b
  4637  0007D0  262C               	addwf	FlashReadUart@numOfSampleToRead,f,c
  4638  0007D2  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  4639  0007D4  222D               	addwfc	FlashReadUart@numOfSampleToRead+1,f,c
  4640                           
  4641                           ; BSR set to: 0
  4642                           ;FlashApp.c: 86: offset = numOfReadSamples * (-1);
  4643  0007D6  C03E  F060         	movff	_numOfReadSamples,??_FlashReadUart
  4644  0007DA  C03F  F061         	movff	_numOfReadSamples+1,??_FlashReadUart+1
  4645  0007DE  1F60               	comf	??_FlashReadUart& (0+255),f,b
  4646  0007E0  1F61               	comf	(??_FlashReadUart+1)& (0+255),f,b
  4647  0007E2  4B60               	infsnz	??_FlashReadUart& (0+255),f,b
  4648  0007E4  2B61               	incf	(??_FlashReadUart+1)& (0+255),f,b
  4649  0007E6  C060  F0BD         	movff	??_FlashReadUart,FlashReadUart@offset
  4650  0007EA  C061  F0BE         	movff	??_FlashReadUart+1,FlashReadUart@offset+1
  4651  0007EE                     l297:
  4652                           
  4653                           ; BSR set to: 0
  4654                           ;FlashApp.c: 88: }
  4655                           ;FlashApp.c: 90: readAddress += offset * (64);
  4656  0007EE  C0BD  F060         	movff	FlashReadUart@offset,??_FlashReadUart
  4657  0007F2  C0BE  F061         	movff	FlashReadUart@offset+1,??_FlashReadUart+1
  4658  0007F6  0E06               	movlw	6
  4659  0007F8                     u7125:
  4660  0007F8  90D8               	bcf	status,0,c
  4661  0007FA  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  4662  0007FC  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  4663  0007FE  2EE8               	decfsz	wreg,f,c
  4664  000800  D7FB               	goto	u7125
  4665  000802  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  4666  000806  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  4667  00080A  0E00               	movlw	0
  4668  00080C  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4669  00080E  0EFF               	movlw	255
  4670  000810  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4671  000812  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  4672  000814  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  4673  000816  27F7               	addwf	_readAddress& (0+255),f,b
  4674  000818  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  4675  00081A  23F8               	addwfc	(_readAddress+1)& (0+255),f,b
  4676  00081C  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  4677  00081E  23F9               	addwfc	(_readAddress+2)& (0+255),f,b
  4678  000820  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  4679  000822  23FA               	addwfc	(_readAddress+3)& (0+255),f,b
  4680                           
  4681                           ; BSR set to: 0
  4682                           ;FlashApp.c: 91: }
  4683                           ;FlashApp.c: 92: }
  4684  000824  D045               	goto	l298
  4685  000826                     l291:
  4686                           
  4687                           ;FlashApp.c: 93: else
  4688                           ;FlashApp.c: 94: {
  4689                           ;FlashApp.c: 95: numOfSampleToRead = (numOfReadSamples > numOfSampleToRead)? numOfSample
      +                          ToRead : numOfReadSamples;
  4690                           
  4691                           ; BSR set to: 0
  4692  000826  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4693  00082A  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4694  00082E  0E00               	movlw	0
  4695  000830  0100               	movlb	0	; () banked
  4696  000832  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4697  000834  0EFF               	movlw	255
  4698  000836  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  4699  000838  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  4700  00083A  503E               	movf	_numOfReadSamples,w,c
  4701  00083C  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  4702  00083E  503F               	movf	_numOfReadSamples+1,w,c
  4703  000840  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  4704  000842  5040               	movf	_numOfReadSamples+2,w,c
  4705  000844  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  4706  000846  5041               	movf	_numOfReadSamples+3,w,c
  4707  000848  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  4708  00084A  A0D8               	btfss	status,0,c
  4709  00084C  D009               	goto	l300
  4710                           
  4711                           ; BSR set to: 0
  4712  00084E  C03E  F0B5         	movff	_numOfReadSamples,_FlashReadUart$566
  4713  000852  C03F  F0B6         	movff	_numOfReadSamples+1,_FlashReadUart$566+1
  4714  000856  C040  F0B7         	movff	_numOfReadSamples+2,_FlashReadUart$566+2
  4715  00085A  C041  F0B8         	movff	_numOfReadSamples+3,_FlashReadUart$566+3
  4716  00085E  D009               	goto	l302
  4717  000860                     l300:
  4718                           
  4719                           ; BSR set to: 0
  4720                           
  4721                           ; BSR set to: 0
  4722  000860  C02C  F0B5         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$566
  4723  000864  C02D  F0B6         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$566+1
  4724  000868  0E00               	movlw	0
  4725  00086A  BFB6               	btfsc	(_FlashReadUart$566+1)& (0+255),7,b
  4726  00086C  0EFF               	movlw	-1
  4727  00086E  6FB7               	movwf	(_FlashReadUart$566+2)& (0+255),b
  4728  000870  6FB8               	movwf	(_FlashReadUart$566+3)& (0+255),b
  4729  000872                     l302:
  4730                           
  4731                           ; BSR set to: 0
  4732                           
  4733                           ; BSR set to: 0
  4734  000872  C0B5  F02C         	movff	_FlashReadUart$566,FlashReadUart@numOfSampleToRead
  4735  000876  C0B6  F02D         	movff	_FlashReadUart$566+1,FlashReadUart@numOfSampleToRead+1
  4736                           
  4737                           ; BSR set to: 0
  4738                           ;FlashApp.c: 96: readAddress -= numOfSampleToRead * (64);
  4739  00087A  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4740  00087E  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4741  000882  0E06               	movlw	6
  4742  000884                     u7145:
  4743  000884  90D8               	bcf	status,0,c
  4744  000886  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  4745  000888  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  4746  00088A  2EE8               	decfsz	wreg,f,c
  4747  00088C  D7FB               	goto	u7145
  4748  00088E  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  4749  000892  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  4750  000896  0E00               	movlw	0
  4751  000898  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4752  00089A  0EFF               	movlw	255
  4753  00089C  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4754  00089E  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  4755  0008A0  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  4756  0008A2  5FF7               	subwf	_readAddress& (0+255),f,b
  4757  0008A4  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  4758  0008A6  5BF8               	subwfb	(_readAddress+1)& (0+255),f,b
  4759  0008A8  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  4760  0008AA  5BF9               	subwfb	(_readAddress+2)& (0+255),f,b
  4761  0008AC  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  4762  0008AE  5BFA               	subwfb	(_readAddress+3)& (0+255),f,b
  4763  0008B0                     l298:
  4764                           
  4765                           ; BSR set to: 0
  4766                           ;FlashApp.c: 97: }
  4767                           ;FlashApp.c: 99: if (readAddress <= 0x4000)
  4768                           
  4769                           ; BSR set to: 0
  4770  0008B0  51FA               	movf	(_readAddress+3)& (0+255),w,b
  4771  0008B2  11F9               	iorwf	(_readAddress+2)& (0+255),w,b
  4772  0008B4  E13E               	bnz	l7424
  4773  0008B6  05F7               	decf	_readAddress& (0+255),w,b
  4774  0008B8  0E40               	movlw	64
  4775  0008BA  59F8               	subwfb	(_readAddress+1)& (0+255),w,b
  4776  0008BC  B0D8               	btfsc	status,0,c
  4777  0008BE  D039               	goto	l308
  4778  0008C0  D023               	goto	u7180
  4779  0008C2                     l290:
  4780                           
  4781                           ;FlashApp.c: 104: else
  4782                           ;FlashApp.c: 105: {
  4783                           ;FlashApp.c: 106: if ((isReWriteDone) && (readAddress <= writeAddress))
  4784                           
  4785                           ; BSR set to: 0
  4786  0008C2  503B               	movf	_isReWriteDone,w,c
  4787  0008C4  B4D8               	btfsc	status,2,c
  4788  0008C6  D029               	goto	l305
  4789  0008C8  0100               	movlb	0	; () banked
  4790  0008CA  51F7               	movf	_readAddress& (0+255),w,b
  4791  0008CC  5C42               	subwf	_writeAddress,w,c
  4792  0008CE  51F8               	movf	(_readAddress+1)& (0+255),w,b
  4793  0008D0  5843               	subwfb	_writeAddress+1,w,c
  4794  0008D2  51F9               	movf	(_readAddress+2)& (0+255),w,b
  4795  0008D4  5844               	subwfb	_writeAddress+2,w,c
  4796  0008D6  51FA               	movf	(_readAddress+3)& (0+255),w,b
  4797  0008D8  5845               	subwfb	_writeAddress+3,w,c
  4798  0008DA  A0D8               	btfss	status,0,c
  4799  0008DC  D01E               	goto	l305
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;FlashApp.c: 107: {
  4803                           ;FlashApp.c: 108: readAddress = writeAddress + (64);
  4804  0008DE  0E40               	movlw	64
  4805  0008E0  2442               	addwf	_writeAddress,w,c
  4806  0008E2  6FF7               	movwf	_readAddress& (0+255),b
  4807  0008E4  0E00               	movlw	0
  4808  0008E6  2043               	addwfc	_writeAddress+1,w,c
  4809  0008E8  6FF8               	movwf	(_readAddress+1)& (0+255),b
  4810  0008EA  0E00               	movlw	0
  4811  0008EC  2044               	addwfc	_writeAddress+2,w,c
  4812  0008EE  6FF9               	movwf	(_readAddress+2)& (0+255),b
  4813  0008F0  0E00               	movlw	0
  4814  0008F2  2045               	addwfc	_writeAddress+3,w,c
  4815  0008F4  6FFA               	movwf	(_readAddress+3)& (0+255),b
  4816                           
  4817                           ;FlashApp.c: 109: if (readAddress >= 0x7FF0)
  4818  0008F6  51FA               	movf	(_readAddress+3)& (0+255),w,b
  4819  0008F8  11F9               	iorwf	(_readAddress+2)& (0+255),w,b
  4820  0008FA  E106               	bnz	u7180
  4821  0008FC  0EF0               	movlw	240
  4822  0008FE  5DF7               	subwf	_readAddress& (0+255),w,b
  4823  000900  0E7F               	movlw	127
  4824  000902  59F8               	subwfb	(_readAddress+1)& (0+255),w,b
  4825  000904  A0D8               	btfss	status,0,c
  4826  000906  D015               	goto	l308
  4827  000908                     u7180:
  4828                           
  4829                           ; BSR set to: 0
  4830                           ;FlashApp.c: 110: {
  4831                           ;FlashApp.c: 111: readAddress = 0x4000;
  4832  000908  0E00               	movlw	0
  4833  00090A  6FF7               	movwf	_readAddress& (0+255),b
  4834  00090C  0E40               	movlw	64
  4835  00090E  6FF8               	movwf	(_readAddress+1)& (0+255),b
  4836  000910  0E00               	movlw	0
  4837  000912  6FF9               	movwf	(_readAddress+2)& (0+255),b
  4838  000914  0E00               	movlw	0
  4839  000916  6FFA               	movwf	(_readAddress+3)& (0+255),b
  4840                           
  4841                           ; BSR set to: 0
  4842                           ;FlashApp.c: 112: }
  4843                           ;FlashApp.c: 114: }
  4844  000918  D00C               	goto	l308
  4845  00091A                     l305:
  4846                           
  4847                           ;FlashApp.c: 115: else
  4848                           ;FlashApp.c: 116: {
  4849                           ;FlashApp.c: 117: if(numOfValidateSamples == 0)
  4850                           
  4851                           ; BSR set to: 0
  4852  00091A  5031               	movf	_numOfValidateSamples,w,c
  4853  00091C  1032               	iorwf	_numOfValidateSamples+1,w,c
  4854  00091E  1033               	iorwf	_numOfValidateSamples+2,w,c
  4855  000920  1034               	iorwf	_numOfValidateSamples+3,w,c
  4856  000922  A4D8               	btfss	status,2,c
  4857  000924  D006               	goto	l308
  4858                           
  4859                           ;FlashApp.c: 118: {
  4860                           ;FlashApp.c: 119: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_NO_SAMPLE_YET
      +                          );
  4861  000926  0E55               	movlw	85
  4862  000928  6E24               	movwf	SendAckMessage@inRequest,c
  4863  00092A  0E05               	movlw	5
  4864  00092C  EC84  F017         	call	_SendAckMessage
  4865                           
  4866                           ;FlashApp.c: 120: return;
  4867  000930  0012               	return	
  4868  000932                     l308:
  4869  000932                     l7424:
  4870                           
  4871                           ;FlashApp.c: 121: }
  4872                           ;FlashApp.c: 123: }
  4873                           ;FlashApp.c: 124: }
  4874                           ;FlashApp.c: 127: TxMsg[(0)] = (0x24);
  4875  000932  0E24               	movlw	36
  4876  000934  0100               	movlb	0	; () banked
  4877  000936  6F6C               	movwf	FlashReadUart@TxMsg& (0+255),b
  4878                           
  4879                           ;FlashApp.c: 128: TxMsg[(1)] = FLASH_MSG;
  4880  000938  0E05               	movlw	5
  4881  00093A  6F6D               	movwf	(FlashReadUart@TxMsg+1)& (0+255),b
  4882                           
  4883                           ;FlashApp.c: 129: TxMsg[(2)] = FLASH_SEND_RAW_DATA;
  4884  00093C  0E54               	movlw	84
  4885  00093E  6F6E               	movwf	(FlashReadUart@TxMsg+2)& (0+255),b
  4886                           
  4887                           ;FlashApp.c: 130: TxMsg[(3)] = (64);
  4888  000940  0E40               	movlw	64
  4889  000942  6F6F               	movwf	(FlashReadUart@TxMsg+3)& (0+255),b
  4890                           
  4891                           ;FlashApp.c: 132: for (j=0; j<numOfSampleToRead; j++)
  4892  000944  0E00               	movlw	0
  4893  000946  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  4894  000948  0E00               	movlw	0
  4895  00094A  6FB9               	movwf	FlashReadUart@j& (0+255),b
  4896  00094C  D084               	goto	l309
  4897  00094E                     
  4898                           ; BSR set to: 0
  4899                           ;FlashApp.c: 133: {
  4900                           ;FlashApp.c: 135: for(int idx = 0; idx < (64); idx++)
  4901                           
  4902                           ; BSR set to: 0
  4903  00094E  0E00               	movlw	0
  4904  000950  6FBC               	movwf	(FlashReadUart@idx+1)& (0+255),b
  4905  000952  0E00               	movlw	0
  4906  000954  6FBB               	movwf	FlashReadUart@idx& (0+255),b
  4907  000956                     l7428:
  4908                           
  4909                           ; BSR set to: 0
  4910  000956  BFBC               	btfsc	(FlashReadUart@idx+1)& (0+255),7,b
  4911  000958  D006               	goto	l311
  4912  00095A  51BC               	movf	(FlashReadUart@idx+1)& (0+255),w,b
  4913  00095C  E12C               	bnz	l7438
  4914  00095E  0E40               	movlw	64
  4915  000960  5DBB               	subwf	FlashReadUart@idx& (0+255),w,b
  4916  000962  B0D8               	btfsc	status,0,c
  4917  000964  D028               	goto	u7210
  4918  000966                     l311:
  4919                           
  4920                           ; BSR set to: 0
  4921                           ;FlashApp.c: 136: {
  4922                           ;FlashApp.c: 137: TxMsg[(0x4) + idx] = FLASH_ReadByte(readAddress + idx);
  4923                           
  4924                           ; BSR set to: 0
  4925  000966  0E04               	movlw	4
  4926  000968  25BB               	addwf	FlashReadUart@idx& (0+255),w,b
  4927  00096A  6F60               	movwf	??_FlashReadUart& (0+255),b
  4928  00096C  0E00               	movlw	0
  4929  00096E  21BC               	addwfc	(FlashReadUart@idx+1)& (0+255),w,b
  4930  000970  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  4931  000972  0E6C               	movlw	low FlashReadUart@TxMsg
  4932  000974  2560               	addwf	??_FlashReadUart& (0+255),w,b
  4933  000976  6ED9               	movwf	fsr2l,c
  4934  000978  0E00               	movlw	high FlashReadUart@TxMsg
  4935  00097A  2161               	addwfc	(??_FlashReadUart+1)& (0+255),w,b
  4936  00097C  6EDA               	movwf	fsr2h,c
  4937  00097E  C0BB  F062         	movff	FlashReadUart@idx,??_FlashReadUart+2
  4938  000982  C0BC  F063         	movff	FlashReadUart@idx+1,??_FlashReadUart+3
  4939  000986  0E00               	movlw	0
  4940  000988  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4941  00098A  0EFF               	movlw	255
  4942  00098C  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4943  00098E  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  4944  000990  51F7               	movf	_readAddress& (0+255),w,b
  4945  000992  2562               	addwf	(??_FlashReadUart+2)& (0+255),w,b
  4946  000994  6E18               	movwf	FLASH_ReadByte@flashAddr,c
  4947  000996  51F8               	movf	(_readAddress+1)& (0+255),w,b
  4948  000998  2163               	addwfc	(??_FlashReadUart+3)& (0+255),w,b
  4949  00099A  6E19               	movwf	FLASH_ReadByte@flashAddr+1,c
  4950  00099C  51F9               	movf	(_readAddress+2)& (0+255),w,b
  4951  00099E  2164               	addwfc	(??_FlashReadUart+4)& (0+255),w,b
  4952  0009A0  6E1A               	movwf	FLASH_ReadByte@flashAddr+2,c
  4953  0009A2  51FA               	movf	(_readAddress+3)& (0+255),w,b
  4954  0009A4  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  4955  0009A6  6E1B               	movwf	FLASH_ReadByte@flashAddr+3,c
  4956  0009A8  EC23  F01C         	call	_FLASH_ReadByte	;wreg free
  4957  0009AC  6EDF               	movwf	indf2,c
  4958  0009AE  0100               	movlb	0	; () banked
  4959  0009B0  4BBB               	infsnz	FlashReadUart@idx& (0+255),f,b
  4960  0009B2  2BBC               	incf	(FlashReadUart@idx+1)& (0+255),f,b
  4961  0009B4  D7D0               	goto	l7428
  4962  0009B6                     u7210:
  4963  0009B6                     l7438:
  4964                           
  4965                           ; BSR set to: 0
  4966                           ;FlashApp.c: 138: }
  4967                           ;FlashApp.c: 140: readAddress += (64);
  4968  0009B6  0E40               	movlw	64
  4969  0009B8  27F7               	addwf	_readAddress& (0+255),f,b
  4970  0009BA  0E00               	movlw	0
  4971  0009BC  23F8               	addwfc	(_readAddress+1)& (0+255),f,b
  4972  0009BE  23F9               	addwfc	(_readAddress+2)& (0+255),f,b
  4973  0009C0  23FA               	addwfc	(_readAddress+3)& (0+255),f,b
  4974                           
  4975                           ;FlashApp.c: 141: if (readAddress >= 0x7FF0)
  4976  0009C2  51FA               	movf	(_readAddress+3)& (0+255),w,b
  4977  0009C4  11F9               	iorwf	(_readAddress+2)& (0+255),w,b
  4978  0009C6  E106               	bnz	u7220
  4979  0009C8  0EF0               	movlw	240
  4980  0009CA  5DF7               	subwf	_readAddress& (0+255),w,b
  4981  0009CC  0E7F               	movlw	127
  4982  0009CE  59F8               	subwfb	(_readAddress+1)& (0+255),w,b
  4983  0009D0  A0D8               	btfss	status,0,c
  4984  0009D2  D008               	goto	l313
  4985  0009D4                     u7220:
  4986                           
  4987                           ; BSR set to: 0
  4988                           ;FlashApp.c: 142: {
  4989                           ;FlashApp.c: 143: readAddress = 0x4000;
  4990  0009D4  0E00               	movlw	0
  4991  0009D6  6FF7               	movwf	_readAddress& (0+255),b
  4992  0009D8  0E40               	movlw	64
  4993  0009DA  6FF8               	movwf	(_readAddress+1)& (0+255),b
  4994  0009DC  0E00               	movlw	0
  4995  0009DE  6FF9               	movwf	(_readAddress+2)& (0+255),b
  4996  0009E0  0E00               	movlw	0
  4997  0009E2  6FFA               	movwf	(_readAddress+3)& (0+255),b
  4998  0009E4                     l313:
  4999                           
  5000                           ; BSR set to: 0
  5001                           ;FlashApp.c: 144: }
  5002                           ;FlashApp.c: 145: TxMsg[(64) + (0x4)] = crc8(TxMsg, (64) + (0x4));
  5003                           
  5004                           ; BSR set to: 0
  5005  0009E4  0E6C               	movlw	low FlashReadUart@TxMsg
  5006  0009E6  6E18               	movwf	crc8@dataArray,c
  5007  0009E8  0E00               	movlw	high FlashReadUart@TxMsg
  5008  0009EA  6E19               	movwf	crc8@dataArray+1,c
  5009  0009EC  0E00               	movlw	0
  5010  0009EE  6E1B               	movwf	crc8@dataSize+1,c
  5011  0009F0  0E44               	movlw	68
  5012  0009F2  6E1A               	movwf	crc8@dataSize,c
  5013  0009F4  ECAD  F017         	call	_crc8	;wreg free
  5014  0009F8  0100               	movlb	0	; () banked
  5015  0009FA  6FB0               	movwf	(FlashReadUart@TxMsg+68)& (0+255),b
  5016                           
  5017                           ; BSR set to: 0
  5018                           ;FlashApp.c: 147: WriteUartMessage(TxMsg, (64) + (0x4) + 1);
  5019  0009FC  0E6C               	movlw	low FlashReadUart@TxMsg
  5020  0009FE  6E19               	movwf	WriteUartMessage@dataBuf,c
  5021  000A00  0E00               	movlw	high FlashReadUart@TxMsg
  5022  000A02  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5023  000A04  0E00               	movlw	0
  5024  000A06  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5025  000A08  0E45               	movlw	69
  5026  000A0A  6E1B               	movwf	WriteUartMessage@dataSize,c
  5027  000A0C  EC22  F01A         	call	_WriteUartMessage	;wreg free
  5028                           
  5029                           ;FlashApp.c: 149: if(numOfValidateSamples)
  5030  000A10  5031               	movf	_numOfValidateSamples,w,c
  5031  000A12  1032               	iorwf	_numOfValidateSamples+1,w,c
  5032  000A14  1033               	iorwf	_numOfValidateSamples+2,w,c
  5033  000A16  1034               	iorwf	_numOfValidateSamples+3,w,c
  5034  000A18  B4D8               	btfsc	status,2,c
  5035  000A1A  D01A               	goto	l316
  5036                           
  5037                           ;FlashApp.c: 150: {
  5038                           ;FlashApp.c: 151: if (numOfReadSamples < ((0x4000-0x7FF0)/(64)))
  5039  000A1C  043E               	decf	_numOfReadSamples,w,c
  5040  000A1E  0EFF               	movlw	255
  5041  000A20  583F               	subwfb	_numOfReadSamples+1,w,c
  5042  000A22  0EFF               	movlw	255
  5043  000A24  5840               	subwfb	_numOfReadSamples+2,w,c
  5044  000A26  0EFF               	movlw	255
  5045  000A28  5841               	subwfb	_numOfReadSamples+3,w,c
  5046  000A2A  B0D8               	btfsc	status,0,c
  5047  000A2C  D006               	goto	l315
  5048                           
  5049                           ;FlashApp.c: 152: {
  5050                           ;FlashApp.c: 153: numOfReadSamples++;
  5051  000A2E  0E01               	movlw	1
  5052  000A30  263E               	addwf	_numOfReadSamples,f,c
  5053  000A32  0E00               	movlw	0
  5054  000A34  223F               	addwfc	_numOfReadSamples+1,f,c
  5055  000A36  2240               	addwfc	_numOfReadSamples+2,f,c
  5056  000A38  2241               	addwfc	_numOfReadSamples+3,f,c
  5057  000A3A                     l315:
  5058                           
  5059                           ;FlashApp.c: 154: }
  5060                           ;FlashApp.c: 155: if (numOfValidateSamples > 0)
  5061  000A3A  5031               	movf	_numOfValidateSamples,w,c
  5062  000A3C  1032               	iorwf	_numOfValidateSamples+1,w,c
  5063  000A3E  1033               	iorwf	_numOfValidateSamples+2,w,c
  5064  000A40  1034               	iorwf	_numOfValidateSamples+3,w,c
  5065  000A42  B4D8               	btfsc	status,2,c
  5066  000A44  D005               	goto	l316
  5067                           
  5068                           ;FlashApp.c: 156: {
  5069                           ;FlashApp.c: 157: numOfValidateSamples--;
  5070  000A46  0631               	decf	_numOfValidateSamples,f,c
  5071  000A48  0E00               	movlw	0
  5072  000A4A  5A32               	subwfb	_numOfValidateSamples+1,f,c
  5073  000A4C  5A33               	subwfb	_numOfValidateSamples+2,f,c
  5074  000A4E  5A34               	subwfb	_numOfValidateSamples+3,f,c
  5075  000A50                     l316:
  5076  000A50  0100               	movlb	0	; () banked
  5077  000A52  4BB9               	infsnz	FlashReadUart@j& (0+255),f,b
  5078  000A54  2BBA               	incf	(FlashReadUart@j+1)& (0+255),f,b
  5079  000A56                     l309:
  5080                           
  5081                           ; BSR set to: 0
  5082                           
  5083                           ; BSR set to: 0
  5084  000A56  502C               	movf	FlashReadUart@numOfSampleToRead,w,c
  5085  000A58  5DB9               	subwf	FlashReadUart@j& (0+255),w,b
  5086  000A5A  51BA               	movf	(FlashReadUart@j+1)& (0+255),w,b
  5087  000A5C  0A80               	xorlw	128
  5088  000A5E  6F60               	movwf	??_FlashReadUart& (0+255),b
  5089  000A60  502D               	movf	FlashReadUart@numOfSampleToRead+1,w,c
  5090  000A62  0A80               	xorlw	128
  5091  000A64  5960               	subwfb	??_FlashReadUart& (0+255),w,b
  5092  000A66  B0D8               	btfsc	status,0,c
  5093  000A68  0012               	return	
  5094  000A6A  D771               	goto	l310
  5095  000A6C                     __end_of_FlashReadUart:
  5096                           	opt stack 0
  5097                           tosu	equ	0xFFF
  5098                           tosh	equ	0xFFE
  5099                           tosl	equ	0xFFD
  5100                           pclath	equ	0xFFA
  5101                           tblptru	equ	0xFF8
  5102                           tblptrh	equ	0xFF7
  5103                           tblptrl	equ	0xFF6
  5104                           tablat	equ	0xFF5
  5105                           prodh	equ	0xFF4
  5106                           prodl	equ	0xFF3
  5107                           intcon	equ	0xFF2
  5108                           postinc0	equ	0xFEE
  5109                           wreg	equ	0xFE8
  5110                           postdec1	equ	0xFE5
  5111                           fsr1l	equ	0xFE1
  5112                           indf2	equ	0xFDF
  5113                           postinc2	equ	0xFDE
  5114                           fsr2h	equ	0xFDA
  5115                           fsr2l	equ	0xFD9
  5116                           status	equ	0xFD8
  5117                           
  5118 ;; *************** function _abs *****************
  5119 ;; Defined at:
  5120 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  5121 ;; Parameters:    Size  Location     Type
  5122 ;;  a               2   23[COMRAM] int 
  5123 ;; Auto vars:     Size  Location     Type
  5124 ;;		None
  5125 ;; Return value:  Size  Location     Type
  5126 ;;                  2   23[COMRAM] int 
  5127 ;; Registers used:
  5128 ;;		wreg, status,2, status,0
  5129 ;; Tracked objects:
  5130 ;;		On entry : 0/0
  5131 ;;		On exit  : 0/0
  5132 ;;		Unchanged: 0/0
  5133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5134 ;;      Params:         2       0       0       0       0       0       0
  5135 ;;      Locals:         0       0       0       0       0       0       0
  5136 ;;      Temps:          2       0       0       0       0       0       0
  5137 ;;      Totals:         4       0       0       0       0       0       0
  5138 ;;Total ram usage:        4 bytes
  5139 ;; Hardware stack levels used:    1
  5140 ;; Hardware stack levels required when called:    3
  5141 ;; This function calls:
  5142 ;;		Nothing
  5143 ;; This function is called by:
  5144 ;;		_FlashReadUart
  5145 ;; This function uses a non-reentrant model
  5146 ;;
  5147                           
  5148                           	psect	text23
  5149  0035C4                     __ptext23:
  5150                           	opt stack 0
  5151  0035C4                     _abs:
  5152                           	opt stack 24
  5153                           
  5154                           ;incstack = 0
  5155  0035C4  AE19               	btfss	abs@a+1,7,c
  5156  0035C6  D00D               	goto	l1491
  5157  0035C8  C018  F01A         	movff	abs@a,??_abs
  5158  0035CC  C019  F01B         	movff	abs@a+1,??_abs+1
  5159  0035D0  1E1A               	comf	??_abs,f,c
  5160  0035D2  1E1B               	comf	??_abs+1,f,c
  5161  0035D4  4A1A               	infsnz	??_abs,f,c
  5162  0035D6  2A1B               	incf	??_abs+1,f,c
  5163  0035D8  C01A  F018         	movff	??_abs,?_abs
  5164  0035DC  C01B  F019         	movff	??_abs+1,?_abs+1
  5165  0035E0  0012               	return	
  5166  0035E2                     l1491:
  5167  0035E2  C018  F018         	movff	abs@a,?_abs
  5168  0035E6  C019  F019         	movff	abs@a+1,?_abs+1
  5169  0035EA  0012               	return		;funcret
  5170  0035EC                     __end_of_abs:
  5171                           	opt stack 0
  5172                           tosu	equ	0xFFF
  5173                           tosh	equ	0xFFE
  5174                           tosl	equ	0xFFD
  5175                           pclath	equ	0xFFA
  5176                           tblptru	equ	0xFF8
  5177                           tblptrh	equ	0xFF7
  5178                           tblptrl	equ	0xFF6
  5179                           tablat	equ	0xFF5
  5180                           prodh	equ	0xFF4
  5181                           prodl	equ	0xFF3
  5182                           intcon	equ	0xFF2
  5183                           postinc0	equ	0xFEE
  5184                           wreg	equ	0xFE8
  5185                           postdec1	equ	0xFE5
  5186                           fsr1l	equ	0xFE1
  5187                           indf2	equ	0xFDF
  5188                           postinc2	equ	0xFDE
  5189                           fsr2h	equ	0xFDA
  5190                           fsr2l	equ	0xFD9
  5191                           status	equ	0xFD8
  5192                           
  5193 ;; *************** function _FLASH_ReadByte *****************
  5194 ;; Defined at:
  5195 ;;		line 58 in file "mcc_generated_files/memory.c"
  5196 ;; Parameters:    Size  Location     Type
  5197 ;;  flashAddr       4   23[COMRAM] unsigned long 
  5198 ;; Auto vars:     Size  Location     Type
  5199 ;;		None
  5200 ;; Return value:  Size  Location     Type
  5201 ;;                  1    wreg      unsigned char 
  5202 ;; Registers used:
  5203 ;;		wreg, status,2
  5204 ;; Tracked objects:
  5205 ;;		On entry : 0/0
  5206 ;;		On exit  : 0/0
  5207 ;;		Unchanged: 0/0
  5208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5209 ;;      Params:         4       0       0       0       0       0       0
  5210 ;;      Locals:         0       0       0       0       0       0       0
  5211 ;;      Temps:          0       0       0       0       0       0       0
  5212 ;;      Totals:         4       0       0       0       0       0       0
  5213 ;;Total ram usage:        4 bytes
  5214 ;; Hardware stack levels used:    1
  5215 ;; Hardware stack levels required when called:    3
  5216 ;; This function calls:
  5217 ;;		Nothing
  5218 ;; This function is called by:
  5219 ;;		_FlashReadUart
  5220 ;;		_FlashTest
  5221 ;;		_FLASH_ReadWord
  5222 ;;		_FLASH_WriteByte
  5223 ;; This function uses a non-reentrant model
  5224 ;;
  5225                           
  5226                           	psect	text24
  5227  003846                     __ptext24:
  5228                           	opt stack 0
  5229  003846                     _FLASH_ReadByte:
  5230                           	opt stack 24
  5231                           
  5232                           ;memory.c: 60: TBLPTRU = (uint8_t)((flashAddr & 0x00FF0000) >> 16);
  5233                           
  5234                           ;incstack = 0
  5235  003846  C01A  FFF8         	movff	FLASH_ReadByte@flashAddr+2,tblptru	;volatile
  5236                           
  5237                           ;memory.c: 61: TBLPTRH = (uint8_t)((flashAddr & 0x0000FF00)>> 8);
  5238  00384A  C019  FFF7         	movff	FLASH_ReadByte@flashAddr+1,tblptrh	;volatile
  5239                           
  5240                           ;memory.c: 62: TBLPTRL = (uint8_t)(flashAddr & 0x000000FF);
  5241  00384E  C018  FFF6         	movff	FLASH_ReadByte@flashAddr,tblptrl	;volatile
  5242  003852  0008               	tblrd		*	;# 
  5243                           
  5244                           ;memory.c: 66: return (TABLAT);
  5245  003854  50F5               	movf	tablat,w,c	;volatile
  5246  003856  0012               	return	
  5247  003858                     __end_of_FLASH_ReadByte:
  5248                           	opt stack 0
  5249                           tosu	equ	0xFFF
  5250                           tosh	equ	0xFFE
  5251                           tosl	equ	0xFFD
  5252                           pclath	equ	0xFFA
  5253                           tblptru	equ	0xFF8
  5254                           tblptrh	equ	0xFF7
  5255                           tblptrl	equ	0xFF6
  5256                           tablat	equ	0xFF5
  5257                           prodh	equ	0xFF4
  5258                           prodl	equ	0xFF3
  5259                           intcon	equ	0xFF2
  5260                           postinc0	equ	0xFEE
  5261                           wreg	equ	0xFE8
  5262                           postdec1	equ	0xFE5
  5263                           fsr1l	equ	0xFE1
  5264                           indf2	equ	0xFDF
  5265                           postinc2	equ	0xFDE
  5266                           fsr2h	equ	0xFDA
  5267                           fsr2l	equ	0xFD9
  5268                           status	equ	0xFD8
  5269                           
  5270 ;; *************** function _FlashReadCondition *****************
  5271 ;; Defined at:
  5272 ;;		line 178 in file "FlashApp.c"
  5273 ;; Parameters:    Size  Location     Type
  5274 ;;		None
  5275 ;; Auto vars:     Size  Location     Type
  5276 ;;  TxMsg           9   39[COMRAM] unsigned char [9]
  5277 ;; Return value:  Size  Location     Type
  5278 ;;                  1    wreg      void 
  5279 ;; Registers used:
  5280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5281 ;; Tracked objects:
  5282 ;;		On entry : 0/0
  5283 ;;		On exit  : 0/0
  5284 ;;		Unchanged: 0/0
  5285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5286 ;;      Params:         0       0       0       0       0       0       0
  5287 ;;      Locals:         9       0       0       0       0       0       0
  5288 ;;      Temps:          4       0       0       0       0       0       0
  5289 ;;      Totals:        13       0       0       0       0       0       0
  5290 ;;Total ram usage:       13 bytes
  5291 ;; Hardware stack levels used:    1
  5292 ;; Hardware stack levels required when called:    5
  5293 ;; This function calls:
  5294 ;;		_WriteUartMessage
  5295 ;;		_ZeroArray
  5296 ;;		_crc8
  5297 ;;		_make8
  5298 ;; This function is called by:
  5299 ;;		_GroupFlashMemory
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302                           
  5303                           	psect	text25
  5304  0018AA                     __ptext25:
  5305                           	opt stack 0
  5306  0018AA                     _FlashReadCondition:
  5307                           	opt stack 23
  5308                           
  5309                           ;FlashApp.c: 181: char TxMsg[4 + (0x4) + 1];
  5310                           ;FlashApp.c: 182: ZeroArray(TxMsg, 4 + (0x4) + 1);
  5311                           
  5312                           ;incstack = 0
  5313  0018AA  0E28               	movlw	low FlashReadCondition@TxMsg
  5314  0018AC  6E20               	movwf	ZeroArray@array,c
  5315  0018AE  0E00               	movlw	high FlashReadCondition@TxMsg
  5316  0018B0  6E21               	movwf	ZeroArray@array+1,c
  5317  0018B2  0E00               	movlw	0
  5318  0018B4  6E23               	movwf	ZeroArray@size+1,c
  5319  0018B6  0E09               	movlw	9
  5320  0018B8  6E22               	movwf	ZeroArray@size,c
  5321  0018BA  ECA8  F01B         	call	_ZeroArray	;wreg free
  5322                           
  5323                           ;FlashApp.c: 185: TxMsg[(0)] = (0x24);
  5324  0018BE  0E24               	movlw	36
  5325  0018C0  6E28               	movwf	FlashReadCondition@TxMsg,c
  5326                           
  5327                           ;FlashApp.c: 186: TxMsg[(1)] = FLASH_MSG;
  5328  0018C2  0E05               	movlw	5
  5329  0018C4  6E29               	movwf	FlashReadCondition@TxMsg+1,c
  5330                           
  5331                           ;FlashApp.c: 187: TxMsg[(2)] = FLASH_READ_CONDITION;
  5332  0018C6  0E52               	movlw	82
  5333  0018C8  6E2A               	movwf	FlashReadCondition@TxMsg+2,c
  5334                           
  5335                           ;FlashApp.c: 188: TxMsg[(3)] = 4;
  5336  0018CA  0E04               	movlw	4
  5337  0018CC  6E2B               	movwf	FlashReadCondition@TxMsg+3,c
  5338                           
  5339                           ;FlashApp.c: 193: TxMsg[(0x4) + 0] = make8(0x7FF0 - 0x4000,1);
  5340  0018CE  0EF0               	movlw	240
  5341  0018D0  6E18               	movwf	make8@data,c
  5342  0018D2  0E3F               	movlw	63
  5343  0018D4  6E19               	movwf	make8@data+1,c
  5344  0018D6  0E00               	movlw	0
  5345  0018D8  6E1A               	movwf	make8@data+2,c
  5346  0018DA  0E00               	movlw	0
  5347  0018DC  6E1B               	movwf	make8@data+3,c
  5348  0018DE  0E01               	movlw	1
  5349  0018E0  6E1C               	movwf	make8@dataLocation,c
  5350  0018E2  ECFA  F015         	call	_make8	;wreg free
  5351  0018E6  6E2C               	movwf	FlashReadCondition@TxMsg+4,c
  5352                           
  5353                           ;FlashApp.c: 194: TxMsg[(0x4) + 1] = make8(0x7FF0 - 0x4000,0);
  5354  0018E8  0EF0               	movlw	240
  5355  0018EA  6E18               	movwf	make8@data,c
  5356  0018EC  0E3F               	movlw	63
  5357  0018EE  6E19               	movwf	make8@data+1,c
  5358  0018F0  0E00               	movlw	0
  5359  0018F2  6E1A               	movwf	make8@data+2,c
  5360  0018F4  0E00               	movlw	0
  5361  0018F6  6E1B               	movwf	make8@data+3,c
  5362  0018F8  0E00               	movlw	0
  5363  0018FA  6E1C               	movwf	make8@dataLocation,c
  5364  0018FC  ECFA  F015         	call	_make8	;wreg free
  5365  001900  6E2D               	movwf	FlashReadCondition@TxMsg+5,c
  5366                           
  5367                           ;FlashApp.c: 197: TxMsg[(0x4) + 2] = make8(0x7FF0 - writeAddress,1);
  5368  001902  C042  F024         	movff	_writeAddress,??_FlashReadCondition
  5369  001906  C043  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5370  00190A  C044  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5371  00190E  C045  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5372  001912  1E24               	comf	??_FlashReadCondition,f,c
  5373  001914  1E25               	comf	??_FlashReadCondition+1,f,c
  5374  001916  1E26               	comf	??_FlashReadCondition+2,f,c
  5375  001918  1E27               	comf	??_FlashReadCondition+3,f,c
  5376  00191A  2A24               	incf	??_FlashReadCondition,f,c
  5377  00191C  0E00               	movlw	0
  5378  00191E  2225               	addwfc	??_FlashReadCondition+1,f,c
  5379  001920  2226               	addwfc	??_FlashReadCondition+2,f,c
  5380  001922  2227               	addwfc	??_FlashReadCondition+3,f,c
  5381  001924  0EF0               	movlw	240
  5382  001926  2424               	addwf	??_FlashReadCondition,w,c
  5383  001928  6E18               	movwf	make8@data,c
  5384  00192A  0E7F               	movlw	127
  5385  00192C  2025               	addwfc	??_FlashReadCondition+1,w,c
  5386  00192E  6E19               	movwf	make8@data+1,c
  5387  001930  0E00               	movlw	0
  5388  001932  2026               	addwfc	??_FlashReadCondition+2,w,c
  5389  001934  6E1A               	movwf	make8@data+2,c
  5390  001936  0E00               	movlw	0
  5391  001938  2027               	addwfc	??_FlashReadCondition+3,w,c
  5392  00193A  6E1B               	movwf	make8@data+3,c
  5393  00193C  0E01               	movlw	1
  5394  00193E  6E1C               	movwf	make8@dataLocation,c
  5395  001940  ECFA  F015         	call	_make8	;wreg free
  5396  001944  6E2E               	movwf	FlashReadCondition@TxMsg+6,c
  5397                           
  5398                           ;FlashApp.c: 198: TxMsg[(0x4) + 3] = make8(0x7FF0 - writeAddress,0);
  5399  001946  C042  F024         	movff	_writeAddress,??_FlashReadCondition
  5400  00194A  C043  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5401  00194E  C044  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5402  001952  C045  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5403  001956  1E24               	comf	??_FlashReadCondition,f,c
  5404  001958  1E25               	comf	??_FlashReadCondition+1,f,c
  5405  00195A  1E26               	comf	??_FlashReadCondition+2,f,c
  5406  00195C  1E27               	comf	??_FlashReadCondition+3,f,c
  5407  00195E  2A24               	incf	??_FlashReadCondition,f,c
  5408  001960  0E00               	movlw	0
  5409  001962  2225               	addwfc	??_FlashReadCondition+1,f,c
  5410  001964  2226               	addwfc	??_FlashReadCondition+2,f,c
  5411  001966  2227               	addwfc	??_FlashReadCondition+3,f,c
  5412  001968  0EF0               	movlw	240
  5413  00196A  2424               	addwf	??_FlashReadCondition,w,c
  5414  00196C  6E18               	movwf	make8@data,c
  5415  00196E  0E7F               	movlw	127
  5416  001970  2025               	addwfc	??_FlashReadCondition+1,w,c
  5417  001972  6E19               	movwf	make8@data+1,c
  5418  001974  0E00               	movlw	0
  5419  001976  2026               	addwfc	??_FlashReadCondition+2,w,c
  5420  001978  6E1A               	movwf	make8@data+2,c
  5421  00197A  0E00               	movlw	0
  5422  00197C  2027               	addwfc	??_FlashReadCondition+3,w,c
  5423  00197E  6E1B               	movwf	make8@data+3,c
  5424  001980  0E00               	movlw	0
  5425  001982  6E1C               	movwf	make8@dataLocation,c
  5426  001984  ECFA  F015         	call	_make8	;wreg free
  5427  001988  6E2F               	movwf	FlashReadCondition@TxMsg+7,c
  5428                           
  5429                           ;FlashApp.c: 200: TxMsg[4 + (0x4)] = crc8(TxMsg, 4 + (0x4));
  5430  00198A  0E28               	movlw	low FlashReadCondition@TxMsg
  5431  00198C  6E18               	movwf	crc8@dataArray,c
  5432  00198E  0E00               	movlw	high FlashReadCondition@TxMsg
  5433  001990  6E19               	movwf	crc8@dataArray+1,c
  5434  001992  0E00               	movlw	0
  5435  001994  6E1B               	movwf	crc8@dataSize+1,c
  5436  001996  0E08               	movlw	8
  5437  001998  6E1A               	movwf	crc8@dataSize,c
  5438  00199A  ECAD  F017         	call	_crc8	;wreg free
  5439  00199E  6E30               	movwf	FlashReadCondition@TxMsg+8,c
  5440                           
  5441                           ;FlashApp.c: 202: WriteUartMessage(TxMsg, 4 + (0x4) + 1);
  5442  0019A0  0E28               	movlw	low FlashReadCondition@TxMsg
  5443  0019A2  6E19               	movwf	WriteUartMessage@dataBuf,c
  5444  0019A4  0E00               	movlw	high FlashReadCondition@TxMsg
  5445  0019A6  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5446  0019A8  0E00               	movlw	0
  5447  0019AA  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5448  0019AC  0E09               	movlw	9
  5449  0019AE  6E1B               	movwf	WriteUartMessage@dataSize,c
  5450  0019B0  EC22  F01A         	call	_WriteUartMessage	;wreg free
  5451  0019B4  0012               	return		;funcret
  5452  0019B6                     __end_of_FlashReadCondition:
  5453                           	opt stack 0
  5454                           tosu	equ	0xFFF
  5455                           tosh	equ	0xFFE
  5456                           tosl	equ	0xFFD
  5457                           pclath	equ	0xFFA
  5458                           tblptru	equ	0xFF8
  5459                           tblptrh	equ	0xFF7
  5460                           tblptrl	equ	0xFF6
  5461                           tablat	equ	0xFF5
  5462                           prodh	equ	0xFF4
  5463                           prodl	equ	0xFF3
  5464                           intcon	equ	0xFF2
  5465                           postinc0	equ	0xFEE
  5466                           wreg	equ	0xFE8
  5467                           postdec1	equ	0xFE5
  5468                           fsr1l	equ	0xFE1
  5469                           indf2	equ	0xFDF
  5470                           postinc2	equ	0xFDE
  5471                           fsr2h	equ	0xFDA
  5472                           fsr2l	equ	0xFD9
  5473                           status	equ	0xFD8
  5474                           
  5475 ;; *************** function _FlashEreaseMem *****************
  5476 ;; Defined at:
  5477 ;;		line 168 in file "FlashApp.c"
  5478 ;; Parameters:    Size  Location     Type
  5479 ;;		None
  5480 ;; Auto vars:     Size  Location     Type
  5481 ;;		None
  5482 ;; Return value:  Size  Location     Type
  5483 ;;                  1    wreg      void 
  5484 ;; Registers used:
  5485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5486 ;; Tracked objects:
  5487 ;;		On entry : 0/0
  5488 ;;		On exit  : 0/0
  5489 ;;		Unchanged: 0/0
  5490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5491 ;;      Params:         0       0       0       0       0       0       0
  5492 ;;      Locals:         0       0       0       0       0       0       0
  5493 ;;      Temps:          0       0       0       0       0       0       0
  5494 ;;      Totals:         0       0       0       0       0       0       0
  5495 ;;Total ram usage:        0 bytes
  5496 ;; Hardware stack levels used:    1
  5497 ;; Hardware stack levels required when called:    6
  5498 ;; This function calls:
  5499 ;;		_SendAckMessage
  5500 ;;		_ZeroArray
  5501 ;; This function is called by:
  5502 ;;		_GroupFlashMemory
  5503 ;; This function uses a non-reentrant model
  5504 ;;
  5505                           
  5506                           	psect	text26
  5507  002EB6                     __ptext26:
  5508                           	opt stack 0
  5509  002EB6                     _FlashEreaseMem:
  5510                           	opt stack 22
  5511                           
  5512                           ;FlashApp.c: 170: writeAddress = 0x4000;
  5513                           
  5514                           ;incstack = 0
  5515  002EB6  0E00               	movlw	0
  5516  002EB8  6E42               	movwf	_writeAddress,c
  5517  002EBA  0E40               	movlw	64
  5518  002EBC  6E43               	movwf	_writeAddress+1,c
  5519  002EBE  0E00               	movlw	0
  5520  002EC0  6E44               	movwf	_writeAddress+2,c
  5521  002EC2  0E00               	movlw	0
  5522  002EC4  6E45               	movwf	_writeAddress+3,c
  5523                           
  5524                           ;FlashApp.c: 171: readAddress = 0x4000;
  5525  002EC6  0E00               	movlw	0
  5526  002EC8  0100               	movlb	0	; () banked
  5527  002ECA  6FF7               	movwf	_readAddress& (0+255),b
  5528  002ECC  0E40               	movlw	64
  5529  002ECE  6FF8               	movwf	(_readAddress+1)& (0+255),b
  5530  002ED0  0E00               	movlw	0
  5531  002ED2  6FF9               	movwf	(_readAddress+2)& (0+255),b
  5532  002ED4  0E00               	movlw	0
  5533  002ED6  6FFA               	movwf	(_readAddress+3)& (0+255),b
  5534                           
  5535                           ;FlashApp.c: 172: numOfValidateSamples = 0;
  5536  002ED8  0E00               	movlw	0
  5537  002EDA  6E31               	movwf	_numOfValidateSamples,c
  5538  002EDC  0E00               	movlw	0
  5539  002EDE  6E32               	movwf	_numOfValidateSamples+1,c
  5540  002EE0  0E00               	movlw	0
  5541  002EE2  6E33               	movwf	_numOfValidateSamples+2,c
  5542  002EE4  0E00               	movlw	0
  5543  002EE6  6E34               	movwf	_numOfValidateSamples+3,c
  5544                           
  5545                           ; BSR set to: 0
  5546                           ;FlashApp.c: 173: ZeroArray(sampleArray, (64)/sizeof(adc_result_t));
  5547  002EE8  0E6E               	movlw	low _sampleArray
  5548  002EEA  6E20               	movwf	ZeroArray@array,c
  5549  002EEC  0E01               	movlw	high _sampleArray
  5550  002EEE  6E21               	movwf	ZeroArray@array+1,c
  5551  002EF0  0E00               	movlw	0
  5552  002EF2  6E23               	movwf	ZeroArray@size+1,c
  5553  002EF4  0E20               	movlw	32
  5554  002EF6  6E22               	movwf	ZeroArray@size,c
  5555  002EF8  ECA8  F01B         	call	_ZeroArray	;wreg free
  5556                           
  5557                           ;FlashApp.c: 174: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_EREASE_MEMORY
      +                          );
  5558  002EFC  0E51               	movlw	81
  5559  002EFE  6E24               	movwf	SendAckMessage@inRequest,c
  5560  002F00  0E05               	movlw	5
  5561  002F02  EC84  F017         	call	_SendAckMessage
  5562  002F06  0012               	return		;funcret
  5563  002F08                     __end_of_FlashEreaseMem:
  5564                           	opt stack 0
  5565                           tosu	equ	0xFFF
  5566                           tosh	equ	0xFFE
  5567                           tosl	equ	0xFFD
  5568                           pclath	equ	0xFFA
  5569                           tblptru	equ	0xFF8
  5570                           tblptrh	equ	0xFF7
  5571                           tblptrl	equ	0xFF6
  5572                           tablat	equ	0xFF5
  5573                           prodh	equ	0xFF4
  5574                           prodl	equ	0xFF3
  5575                           intcon	equ	0xFF2
  5576                           postinc0	equ	0xFEE
  5577                           wreg	equ	0xFE8
  5578                           postdec1	equ	0xFE5
  5579                           fsr1l	equ	0xFE1
  5580                           indf2	equ	0xFDF
  5581                           postinc2	equ	0xFDE
  5582                           fsr2h	equ	0xFDA
  5583                           fsr2l	equ	0xFD9
  5584                           status	equ	0xFD8
  5585                           
  5586 ;; *************** function _DacSetValue *****************
  5587 ;; Defined at:
  5588 ;;		line 33 in file "DacApp.c"
  5589 ;; Parameters:    Size  Location     Type
  5590 ;;  data            2   38[BANK0 ] PTR unsigned char 
  5591 ;;		 -> rxMsgData(20), 
  5592 ;; Auto vars:     Size  Location     Type
  5593 ;;  regData         2   46[COMRAM] unsigned int 
  5594 ;; Return value:  Size  Location     Type
  5595 ;;                  1    wreg      void 
  5596 ;; Registers used:
  5597 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5598 ;; Tracked objects:
  5599 ;;		On entry : 0/0
  5600 ;;		On exit  : 0/0
  5601 ;;		Unchanged: 0/0
  5602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5603 ;;      Params:         0       2       0       0       0       0       0
  5604 ;;      Locals:         2       0       0       0       0       0       0
  5605 ;;      Temps:          0       0       0       0       0       0       0
  5606 ;;      Totals:         2       2       0       0       0       0       0
  5607 ;;Total ram usage:        4 bytes
  5608 ;; Hardware stack levels used:    1
  5609 ;; Hardware stack levels required when called:    7
  5610 ;; This function calls:
  5611 ;;		_GetIntFromUartData
  5612 ;;		_SWSPI_send_word
  5613 ;;		_SendAckMessage
  5614 ;; This function is called by:
  5615 ;;		_GroupDAC
  5616 ;; This function uses a non-reentrant model
  5617 ;;
  5618                           
  5619                           	psect	text27
  5620  0033D8                     __ptext27:
  5621                           	opt stack 0
  5622  0033D8                     _DacSetValue:
  5623                           	opt stack 21
  5624                           
  5625                           ;DacApp.c: 35: uint16_t regData = GetIntFromUartData(data);
  5626                           
  5627                           ;incstack = 0
  5628  0033D8  C086  F066         	movff	DacSetValue@data,GetIntFromUartData@data
  5629  0033DC  C087  F067         	movff	DacSetValue@data+1,GetIntFromUartData@data+1
  5630  0033E0  EC74  F010         	call	_GetIntFromUartData	;wreg free
  5631  0033E4  C066  F02F         	movff	?_GetIntFromUartData,DacSetValue@regData
  5632  0033E8  C067  F030         	movff	?_GetIntFromUartData+1,DacSetValue@regData+1
  5633                           
  5634                           ;DacApp.c: 36: SWSPI_send_word(EXT_DAC, regData, 1);
  5635  0033EC  C02F  F026         	movff	DacSetValue@regData,SWSPI_send_word@data
  5636  0033F0  C030  F027         	movff	DacSetValue@regData+1,SWSPI_send_word@data+1
  5637  0033F4  6A28               	clrf	SWSPI_send_word@data+2,c
  5638  0033F6  6A29               	clrf	SWSPI_send_word@data+3,c
  5639  0033F8  0E01               	movlw	1
  5640  0033FA  6E2A               	movwf	SWSPI_send_word@dataSize,c
  5641  0033FC  0E02               	movlw	2
  5642  0033FE  EC3A  F012         	call	_SWSPI_send_word
  5643                           
  5644                           ;DacApp.c: 39: SendAckMessage((MSG_GROUPS)DAC_MSG, (MSG_REQUEST)DAC_SET_VALUE);
  5645  003402  0E61               	movlw	97
  5646  003404  6E24               	movwf	SendAckMessage@inRequest,c
  5647  003406  0E06               	movlw	6
  5648  003408  EC84  F017         	call	_SendAckMessage
  5649  00340C  0012               	return		;funcret
  5650  00340E                     __end_of_DacSetValue:
  5651                           	opt stack 0
  5652                           tosu	equ	0xFFF
  5653                           tosh	equ	0xFFE
  5654                           tosl	equ	0xFFD
  5655                           pclath	equ	0xFFA
  5656                           tblptru	equ	0xFF8
  5657                           tblptrh	equ	0xFF7
  5658                           tblptrl	equ	0xFF6
  5659                           tablat	equ	0xFF5
  5660                           prodh	equ	0xFF4
  5661                           prodl	equ	0xFF3
  5662                           intcon	equ	0xFF2
  5663                           postinc0	equ	0xFEE
  5664                           wreg	equ	0xFE8
  5665                           postdec1	equ	0xFE5
  5666                           fsr1l	equ	0xFE1
  5667                           indf2	equ	0xFDF
  5668                           postinc2	equ	0xFDE
  5669                           fsr2h	equ	0xFDA
  5670                           fsr2l	equ	0xFD9
  5671                           status	equ	0xFD8
  5672                           
  5673 ;; *************** function _GetIntFromUartData *****************
  5674 ;; Defined at:
  5675 ;;		line 45 in file "SystemCommon.c"
  5676 ;; Parameters:    Size  Location     Type
  5677 ;;  data            2    6[BANK0 ] PTR unsigned char 
  5678 ;;		 -> rxMsgData(20), 
  5679 ;; Auto vars:     Size  Location     Type
  5680 ;;  c               1   23[BANK0 ] unsigned char 
  5681 ;;  idx             2   24[BANK0 ] int 
  5682 ;;  dataRegArr      9   14[BANK0 ] unsigned char [9]
  5683 ;;  t               4   10[BANK0 ] unsigned long 
  5684 ;; Return value:  Size  Location     Type
  5685 ;;                  4    6[BANK0 ] unsigned long 
  5686 ;; Registers used:
  5687 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5688 ;; Tracked objects:
  5689 ;;		On entry : 0/0
  5690 ;;		On exit  : 0/0
  5691 ;;		Unchanged: 0/0
  5692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5693 ;;      Params:         0       4       0       0       0       0       0
  5694 ;;      Locals:         0      16       0       0       0       0       0
  5695 ;;      Temps:          0       0       0       0       0       0       0
  5696 ;;      Totals:         0      20       0       0       0       0       0
  5697 ;;Total ram usage:       20 bytes
  5698 ;; Hardware stack levels used:    1
  5699 ;; Hardware stack levels required when called:    6
  5700 ;; This function calls:
  5701 ;;		_ZeroArray
  5702 ;;		_strtol
  5703 ;; This function is called by:
  5704 ;;		_DacSetValue
  5705 ;;		_UpdateRxFreq
  5706 ;; This function uses a non-reentrant model
  5707 ;;
  5708                           
  5709                           	psect	text28
  5710  0020E8                     __ptext28:
  5711                           	opt stack 0
  5712  0020E8                     _GetIntFromUartData:
  5713                           	opt stack 21
  5714                           
  5715                           ;SystemCommon.c: 47: char dataRegArr[9];
  5716                           ;SystemCommon.c: 48: ZeroArray(dataRegArr, 9);
  5717                           
  5718                           ;incstack = 0
  5719  0020E8  0E6E               	movlw	low GetIntFromUartData@dataRegArr
  5720  0020EA  6E20               	movwf	ZeroArray@array,c
  5721  0020EC  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5722  0020EE  6E21               	movwf	ZeroArray@array+1,c
  5723  0020F0  0E00               	movlw	0
  5724  0020F2  6E23               	movwf	ZeroArray@size+1,c
  5725  0020F4  0E09               	movlw	9
  5726  0020F6  6E22               	movwf	ZeroArray@size,c
  5727  0020F8  ECA8  F01B         	call	_ZeroArray	;wreg free
  5728                           
  5729                           ;SystemCommon.c: 50: for(int idx = 0; idx < 9; idx++)
  5730  0020FC  0E00               	movlw	0
  5731  0020FE  0100               	movlb	0	; () banked
  5732  002100  6F79               	movwf	(GetIntFromUartData@idx+1)& (0+255),b
  5733  002102  0E00               	movlw	0
  5734  002104  6F78               	movwf	GetIntFromUartData@idx& (0+255),b
  5735  002106                     l7116:
  5736                           
  5737                           ; BSR set to: 0
  5738  002106  BF79               	btfsc	(GetIntFromUartData@idx+1)& (0+255),7,b
  5739  002108  D006               	goto	l1277
  5740  00210A  5179               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5741  00210C  E122               	bnz	l7134
  5742  00210E  0E09               	movlw	9
  5743  002110  5D78               	subwf	GetIntFromUartData@idx& (0+255),w,b
  5744  002112  B0D8               	btfsc	status,0,c
  5745  002114  D01E               	goto	u6760
  5746  002116                     l1277:
  5747                           
  5748                           ; BSR set to: 0
  5749                           ;SystemCommon.c: 51: {
  5750                           ;SystemCommon.c: 52: char c = data[idx];
  5751                           
  5752                           ; BSR set to: 0
  5753  002116  5178               	movf	GetIntFromUartData@idx& (0+255),w,b
  5754  002118  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  5755  00211A  6ED9               	movwf	fsr2l,c
  5756  00211C  5179               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5757  00211E  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  5758  002120  6EDA               	movwf	fsr2h,c
  5759  002122  50DF               	movf	indf2,w,c
  5760  002124  6F77               	movwf	GetIntFromUartData@c& (0+255),b
  5761                           
  5762                           ; BSR set to: 0
  5763                           ;SystemCommon.c: 53: if(c == 0x40)
  5764  002126  0E40               	movlw	64
  5765  002128  1977               	xorwf	GetIntFromUartData@c& (0+255),w,b
  5766  00212A  B4D8               	btfsc	status,2,c
  5767  00212C  D012               	goto	u6760
  5768                           
  5769                           ; BSR set to: 0
  5770                           ;SystemCommon.c: 57: else
  5771                           ;SystemCommon.c: 58: {
  5772                           ;SystemCommon.c: 59: dataRegArr[idx] = data[idx] + '0';
  5773                           
  5774                           ; BSR set to: 0
  5775                           
  5776                           ; BSR set to: 0
  5777                           ;SystemCommon.c: 56: }
  5778                           
  5779                           ; BSR set to: 0
  5780                           ;SystemCommon.c: 54: {
  5781                           ;SystemCommon.c: 55: break;
  5782  00212E  0E6E               	movlw	low GetIntFromUartData@dataRegArr
  5783  002130  2578               	addwf	GetIntFromUartData@idx& (0+255),w,b
  5784  002132  6ED9               	movwf	fsr2l,c
  5785  002134  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5786  002136  2179               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  5787  002138  6EDA               	movwf	fsr2h,c
  5788  00213A  5178               	movf	GetIntFromUartData@idx& (0+255),w,b
  5789  00213C  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  5790  00213E  6EE1               	movwf	fsr1l,c
  5791  002140  5179               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5792  002142  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  5793  002144  6EE2               	movwf	fsr1h,c
  5794  002146  50E7               	movf	indf1,w,c
  5795  002148  0F30               	addlw	48
  5796  00214A  6EDF               	movwf	indf2,c
  5797                           
  5798                           ; BSR set to: 0
  5799                           
  5800                           ; BSR set to: 0
  5801  00214C  4B78               	infsnz	GetIntFromUartData@idx& (0+255),f,b
  5802  00214E  2B79               	incf	(GetIntFromUartData@idx+1)& (0+255),f,b
  5803  002150  D7DA               	goto	l7116
  5804  002152                     u6760:
  5805  002152                     l7134:
  5806                           
  5807                           ; BSR set to: 0
  5808                           ;SystemCommon.c: 60: }
  5809                           ;SystemCommon.c: 62: }
  5810                           ;SystemCommon.c: 63: uint32_t t = strtol(dataRegArr, (0), 16);
  5811  002152  0E6E               	movlw	low GetIntFromUartData@dataRegArr
  5812  002154  6E24               	movwf	strtol@s,c
  5813  002156  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5814  002158  6E25               	movwf	strtol@s+1,c
  5815  00215A  0E00               	movlw	0
  5816  00215C  6E26               	movwf	strtol@endptr,c
  5817  00215E  0E00               	movlw	0
  5818  002160  6E27               	movwf	strtol@endptr+1,c
  5819  002162  0E00               	movlw	0
  5820  002164  6E29               	movwf	strtol@base+1,c
  5821  002166  0E10               	movlw	16
  5822  002168  6E28               	movwf	strtol@base,c
  5823  00216A  EC69  F008         	call	_strtol	;wreg free
  5824  00216E  C024  F06A         	movff	?_strtol,GetIntFromUartData@t
  5825  002172  C025  F06B         	movff	?_strtol+1,GetIntFromUartData@t+1
  5826  002176  C026  F06C         	movff	?_strtol+2,GetIntFromUartData@t+2
  5827  00217A  C027  F06D         	movff	?_strtol+3,GetIntFromUartData@t+3
  5828                           
  5829                           ;SystemCommon.c: 64: return strtol(dataRegArr, (0), 16);
  5830  00217E  0E6E               	movlw	low GetIntFromUartData@dataRegArr
  5831  002180  6E24               	movwf	strtol@s,c
  5832  002182  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5833  002184  6E25               	movwf	strtol@s+1,c
  5834  002186  0E00               	movlw	0
  5835  002188  6E26               	movwf	strtol@endptr,c
  5836  00218A  0E00               	movlw	0
  5837  00218C  6E27               	movwf	strtol@endptr+1,c
  5838  00218E  0E00               	movlw	0
  5839  002190  6E29               	movwf	strtol@base+1,c
  5840  002192  0E10               	movlw	16
  5841  002194  6E28               	movwf	strtol@base,c
  5842  002196  EC69  F008         	call	_strtol	;wreg free
  5843  00219A  C024  F066         	movff	?_strtol,?_GetIntFromUartData
  5844  00219E  C025  F067         	movff	?_strtol+1,?_GetIntFromUartData+1
  5845  0021A2  C026  F068         	movff	?_strtol+2,?_GetIntFromUartData+2
  5846  0021A6  C027  F069         	movff	?_strtol+3,?_GetIntFromUartData+3
  5847  0021AA  0012               	return	
  5848  0021AC                     __end_of_GetIntFromUartData:
  5849                           	opt stack 0
  5850                           tosu	equ	0xFFF
  5851                           tosh	equ	0xFFE
  5852                           tosl	equ	0xFFD
  5853                           pclath	equ	0xFFA
  5854                           tblptru	equ	0xFF8
  5855                           tblptrh	equ	0xFF7
  5856                           tblptrl	equ	0xFF6
  5857                           tablat	equ	0xFF5
  5858                           prodh	equ	0xFF4
  5859                           prodl	equ	0xFF3
  5860                           intcon	equ	0xFF2
  5861                           postinc0	equ	0xFEE
  5862                           wreg	equ	0xFE8
  5863                           indf1	equ	0xFE7
  5864                           postdec1	equ	0xFE5
  5865                           fsr1h	equ	0xFE2
  5866                           fsr1l	equ	0xFE1
  5867                           indf2	equ	0xFDF
  5868                           postinc2	equ	0xFDE
  5869                           fsr2h	equ	0xFDA
  5870                           fsr2l	equ	0xFD9
  5871                           status	equ	0xFD8
  5872                           
  5873 ;; *************** function _strtol *****************
  5874 ;; Defined at:
  5875 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  5876 ;; Parameters:    Size  Location     Type
  5877 ;;  s               2   35[COMRAM] PTR const unsigned char 
  5878 ;;		 -> GetIntFromUartData@dataRegArr(9), 
  5879 ;;  endptr          2   37[COMRAM] PTR PTR unsigned char 
  5880 ;;		 -> NULL(0), 
  5881 ;;  base            2   39[COMRAM] int 
  5882 ;; Auto vars:     Size  Location     Type
  5883 ;;  a               4    1[BANK0 ] long 
  5884 ;;  c               1    5[BANK0 ] unsigned char 
  5885 ;;  sign            1    0[BANK0 ] unsigned char 
  5886 ;; Return value:  Size  Location     Type
  5887 ;;                  4   35[COMRAM] long 
  5888 ;; Registers used:
  5889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5890 ;; Tracked objects:
  5891 ;;		On entry : 0/0
  5892 ;;		On exit  : 0/0
  5893 ;;		Unchanged: 0/0
  5894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5895 ;;      Params:         6       0       0       0       0       0       0
  5896 ;;      Locals:         0       6       0       0       0       0       0
  5897 ;;      Temps:          4       0       0       0       0       0       0
  5898 ;;      Totals:        10       6       0       0       0       0       0
  5899 ;;Total ram usage:       16 bytes
  5900 ;; Hardware stack levels used:    1
  5901 ;; Hardware stack levels required when called:    5
  5902 ;; This function calls:
  5903 ;;		___lmul
  5904 ;;		_isalpha
  5905 ;;		_isdigit
  5906 ;;		_isspace
  5907 ;;		_toupper
  5908 ;; This function is called by:
  5909 ;;		_GetIntFromUartData
  5910 ;; This function uses a non-reentrant model
  5911 ;;
  5912                           
  5913                           	psect	text29
  5914  0010D2                     __ptext29:
  5915                           	opt stack 0
  5916  0010D2                     _strtol:
  5917                           	opt stack 21
  5918                           
  5919                           ;incstack = 0
  5920  0010D2  C024  FFD9         	movff	strtol@s,fsr2l
  5921  0010D6  C025  FFDA         	movff	strtol@s+1,fsr2h
  5922  0010DA  50DF               	movf	indf2,w,c
  5923  0010DC  0100               	movlb	0	; () banked
  5924  0010DE  6F65               	movwf	strtol@c& (0+255),b
  5925                           
  5926                           ; BSR set to: 0
  5927  0010E0  4A24               	infsnz	strtol@s,f,c
  5928  0010E2  2A25               	incf	strtol@s+1,f,c
  5929                           
  5930                           ; BSR set to: 0
  5931  0010E4  5165               	movf	strtol@c& (0+255),w,b
  5932  0010E6  EC1D  F01B         	call	_isspace
  5933  0010EA  B0D8               	btfsc	status,0,c
  5934  0010EC  D7F2               	goto	_strtol
  5935  0010EE  0E00               	movlw	0
  5936  0010F0  0100               	movlb	0	; () banked
  5937  0010F2  6F61               	movwf	strtol@a& (0+255),b
  5938  0010F4  0E00               	movlw	0
  5939  0010F6  6F62               	movwf	(strtol@a+1)& (0+255),b
  5940  0010F8  0E00               	movlw	0
  5941  0010FA  6F63               	movwf	(strtol@a+2)& (0+255),b
  5942  0010FC  0E00               	movlw	0
  5943  0010FE  6F64               	movwf	(strtol@a+3)& (0+255),b
  5944  001100  0E00               	movlw	0
  5945  001102  6F60               	movwf	strtol@sign& (0+255),b
  5946                           
  5947                           ; BSR set to: 0
  5948  001104  0E2D               	movlw	45
  5949  001106  1965               	xorwf	strtol@c& (0+255),w,b
  5950  001108  A4D8               	btfss	status,2,c
  5951  00110A  D003               	goto	l2024
  5952                           
  5953                           ; BSR set to: 0
  5954  00110C  0E01               	movlw	1
  5955  00110E  6F60               	movwf	strtol@sign& (0+255),b
  5956  001110  D004               	goto	u6240
  5957  001112                     l2024:
  5958                           
  5959                           ; BSR set to: 0
  5960                           
  5961                           ; BSR set to: 0
  5962  001112  0E2B               	movlw	43
  5963  001114  1965               	xorwf	strtol@c& (0+255),w,b
  5964  001116  A4D8               	btfss	status,2,c
  5965  001118  D008               	goto	l2026
  5966  00111A                     u6240:
  5967                           
  5968                           ; BSR set to: 0
  5969  00111A  C024  FFD9         	movff	strtol@s,fsr2l
  5970  00111E  C025  FFDA         	movff	strtol@s+1,fsr2h
  5971  001122  50DF               	movf	indf2,w,c
  5972  001124  6F65               	movwf	strtol@c& (0+255),b
  5973                           
  5974                           ; BSR set to: 0
  5975  001126  4A24               	infsnz	strtol@s,f,c
  5976  001128  2A25               	incf	strtol@s+1,f,c
  5977  00112A                     l2026:
  5978                           
  5979                           ; BSR set to: 0
  5980                           
  5981                           ; BSR set to: 0
  5982                           
  5983                           ; BSR set to: 0
  5984  00112A  0E30               	movlw	48
  5985  00112C  1965               	xorwf	strtol@c& (0+255),w,b
  5986  00112E  A4D8               	btfss	status,2,c
  5987  001130  D02E               	goto	l2034
  5988                           
  5989                           ; BSR set to: 0
  5990  001132  C024  FFD9         	movff	strtol@s,fsr2l
  5991  001136  C025  FFDA         	movff	strtol@s+1,fsr2h
  5992  00113A  50DF               	movf	indf2,w,c
  5993  00113C  6F65               	movwf	strtol@c& (0+255),b
  5994                           
  5995                           ; BSR set to: 0
  5996  00113E  4A24               	infsnz	strtol@s,f,c
  5997  001140  2A25               	incf	strtol@s+1,f,c
  5998                           
  5999                           ; BSR set to: 0
  6000  001142  5028               	movf	strtol@base,w,c
  6001  001144  1029               	iorwf	strtol@base+1,w,c
  6002  001146  B4D8               	btfsc	status,2,c
  6003  001148  D005               	goto	u6270
  6004                           
  6005                           ; BSR set to: 0
  6006  00114A  0E10               	movlw	16
  6007  00114C  1828               	xorwf	strtol@base,w,c
  6008  00114E  1029               	iorwf	strtol@base+1,w,c
  6009  001150  A4D8               	btfss	status,2,c
  6010  001152  D015               	goto	l2028
  6011  001154                     u6270:
  6012                           
  6013                           ; BSR set to: 0
  6014                           
  6015                           ; BSR set to: 0
  6016  001154  0E78               	movlw	120
  6017  001156  1965               	xorwf	strtol@c& (0+255),w,b
  6018  001158  B4D8               	btfsc	status,2,c
  6019  00115A  D004               	goto	u6290
  6020                           
  6021                           ; BSR set to: 0
  6022  00115C  0E58               	movlw	88
  6023  00115E  1965               	xorwf	strtol@c& (0+255),w,b
  6024  001160  A4D8               	btfss	status,2,c
  6025  001162  D00D               	goto	l2028
  6026  001164                     u6290:
  6027                           
  6028                           ; BSR set to: 0
  6029                           
  6030                           ; BSR set to: 0
  6031  001164  0E00               	movlw	0
  6032  001166  6E29               	movwf	strtol@base+1,c
  6033  001168  0E10               	movlw	16
  6034  00116A  6E28               	movwf	strtol@base,c
  6035                           
  6036                           ; BSR set to: 0
  6037  00116C  C024  FFD9         	movff	strtol@s,fsr2l
  6038  001170  C025  FFDA         	movff	strtol@s+1,fsr2h
  6039  001174  50DF               	movf	indf2,w,c
  6040  001176  6F65               	movwf	strtol@c& (0+255),b
  6041                           
  6042                           ; BSR set to: 0
  6043  001178  4A24               	infsnz	strtol@s,f,c
  6044  00117A  2A25               	incf	strtol@s+1,f,c
  6045  00117C  D008               	goto	l2034
  6046  00117E                     l2028:
  6047                           
  6048                           ; BSR set to: 0
  6049                           
  6050                           ; BSR set to: 0
  6051  00117E  5028               	movf	strtol@base,w,c
  6052  001180  1029               	iorwf	strtol@base+1,w,c
  6053  001182  A4D8               	btfss	status,2,c
  6054  001184  D004               	goto	l2034
  6055                           
  6056                           ; BSR set to: 0
  6057  001186  0E00               	movlw	0
  6058  001188  6E29               	movwf	strtol@base+1,c
  6059  00118A  0E08               	movlw	8
  6060  00118C  6E28               	movwf	strtol@base,c
  6061  00118E                     l2034:
  6062                           
  6063                           ; BSR set to: 0
  6064                           
  6065                           ; BSR set to: 0
  6066                           
  6067                           ; BSR set to: 0
  6068                           
  6069                           ; BSR set to: 0
  6070  00118E  5028               	movf	strtol@base,w,c
  6071  001190  1029               	iorwf	strtol@base+1,w,c
  6072  001192  A4D8               	btfss	status,2,c
  6073  001194  D004               	goto	l2035
  6074                           
  6075                           ; BSR set to: 0
  6076  001196  0E00               	movlw	0
  6077  001198  6E29               	movwf	strtol@base+1,c
  6078  00119A  0E0A               	movlw	10
  6079  00119C  6E28               	movwf	strtol@base,c
  6080  00119E                     l2035:
  6081                           
  6082                           ; BSR set to: 0
  6083                           
  6084                           ; BSR set to: 0
  6085                           
  6086                           ; BSR set to: 0
  6087  00119E  5165               	movf	strtol@c& (0+255),w,b
  6088  0011A0  ECF6  F01A         	call	_isalpha
  6089  0011A4  A0D8               	btfss	status,0,c
  6090  0011A6  D008               	goto	l2037
  6091  0011A8  0100               	movlb	0	; () banked
  6092  0011AA  5165               	movf	strtol@c& (0+255),w,b
  6093  0011AC  EC0F  F01C         	call	_toupper
  6094  0011B0  0FC9               	addlw	201
  6095  0011B2  0100               	movlb	0	; () banked
  6096  0011B4  6F65               	movwf	strtol@c& (0+255),b
  6097  0011B6  D009               	goto	l2040
  6098  0011B8                     l2037:
  6099                           
  6100                           ; BSR set to: 0
  6101  0011B8  0100               	movlb	0	; () banked
  6102  0011BA  5165               	movf	strtol@c& (0+255),w,b
  6103  0011BC  EC8A  F01B         	call	_isdigit
  6104  0011C0  A0D8               	btfss	status,0,c
  6105  0011C2  D039               	goto	l2041
  6106  0011C4  0E30               	movlw	48
  6107  0011C6  0100               	movlb	0	; () banked
  6108  0011C8  5F65               	subwf	strtol@c& (0+255),f,b
  6109  0011CA                     l2040:
  6110                           
  6111                           ; BSR set to: 0
  6112                           
  6113                           ; BSR set to: 0
  6114                           
  6115                           ; BSR set to: 0
  6116  0011CA  5165               	movf	strtol@c& (0+255),w,b
  6117  0011CC  6E2A               	movwf	??_strtol& (0+255),c
  6118  0011CE  6A2B               	clrf	(??_strtol+1)& (0+255),c
  6119  0011D0  5028               	movf	strtol@base,w,c
  6120  0011D2  5C2A               	subwf	??_strtol,w,c
  6121  0011D4  502B               	movf	??_strtol+1,w,c
  6122  0011D6  0A80               	xorlw	128
  6123  0011D8  6E2C               	movwf	(??_strtol+2)& (0+255),c
  6124  0011DA  5029               	movf	strtol@base+1,w,c
  6125  0011DC  0A80               	xorlw	128
  6126  0011DE  582C               	subwfb	(??_strtol+2)& (0+255),w,c
  6127  0011E0  B0D8               	btfsc	status,0,c
  6128  0011E2  D029               	goto	l2041
  6129                           
  6130                           ; BSR set to: 0
  6131                           
  6132                           ; BSR set to: 0
  6133                           
  6134                           ; BSR set to: 0
  6135  0011E4  C028  F018         	movff	strtol@base,___lmul@multiplier
  6136  0011E8  C029  F019         	movff	strtol@base+1,___lmul@multiplier+1
  6137  0011EC  0E00               	movlw	0
  6138  0011EE  BE19               	btfsc	___lmul@multiplier+1,7,c
  6139  0011F0  0EFF               	movlw	-1
  6140  0011F2  6E1A               	movwf	___lmul@multiplier+2,c
  6141  0011F4  6E1B               	movwf	___lmul@multiplier+3,c
  6142  0011F6  C061  F01C         	movff	strtol@a,___lmul@multiplicand
  6143  0011FA  C062  F01D         	movff	strtol@a+1,___lmul@multiplicand+1
  6144  0011FE  C063  F01E         	movff	strtol@a+2,___lmul@multiplicand+2
  6145  001202  C064  F01F         	movff	strtol@a+3,___lmul@multiplicand+3
  6146  001206  ECDA  F016         	call	___lmul	;wreg free
  6147  00120A  0100               	movlb	0	; () banked
  6148  00120C  5165               	movf	strtol@c& (0+255),w,b
  6149  00120E  2418               	addwf	?___lmul,w,c
  6150  001210  6F61               	movwf	strtol@a& (0+255),b
  6151  001212  0E00               	movlw	0
  6152  001214  2019               	addwfc	?___lmul+1,w,c
  6153  001216  6F62               	movwf	(strtol@a+1)& (0+255),b
  6154  001218  0E00               	movlw	0
  6155  00121A  201A               	addwfc	?___lmul+2,w,c
  6156  00121C  6F63               	movwf	(strtol@a+2)& (0+255),b
  6157  00121E  0E00               	movlw	0
  6158  001220  201B               	addwfc	?___lmul+3,w,c
  6159  001222  6F64               	movwf	(strtol@a+3)& (0+255),b
  6160                           
  6161                           ; BSR set to: 0
  6162  001224  C024  FFD9         	movff	strtol@s,fsr2l
  6163  001228  C025  FFDA         	movff	strtol@s+1,fsr2h
  6164  00122C  50DF               	movf	indf2,w,c
  6165  00122E  6F65               	movwf	strtol@c& (0+255),b
  6166                           
  6167                           ; BSR set to: 0
  6168  001230  4A24               	infsnz	strtol@s,f,c
  6169  001232  2A25               	incf	strtol@s+1,f,c
  6170  001234  D7B4               	goto	l2035
  6171  001236                     l2041:
  6172                           
  6173                           ; BSR set to: 0
  6174  001236  5026               	movf	strtol@endptr,w,c
  6175  001238  1027               	iorwf	strtol@endptr+1,w,c
  6176  00123A  B4D8               	btfsc	status,2,c
  6177  00123C  D00E               	goto	l2043
  6178  00123E  0EFF               	movlw	255
  6179  001240  2424               	addwf	strtol@s,w,c
  6180  001242  6E2A               	movwf	??_strtol& (0+255),c
  6181  001244  0EFF               	movlw	255
  6182  001246  2025               	addwfc	strtol@s+1,w,c
  6183  001248  6E2B               	movwf	(??_strtol+1)& (0+255),c
  6184  00124A  C026  FFD9         	movff	strtol@endptr,fsr2l
  6185  00124E  C027  FFDA         	movff	strtol@endptr+1,fsr2h
  6186  001252  C02A  FFDE         	movff	??_strtol,postinc2
  6187  001256  C02B  FFDD         	movff	??_strtol+1,postdec2
  6188  00125A                     l2043:
  6189  00125A  0100               	movlb	0	; () banked
  6190  00125C  5160               	movf	strtol@sign& (0+255),w,b
  6191  00125E  B4D8               	btfsc	status,2,c
  6192  001260  D01A               	goto	l2044
  6193                           
  6194                           ; BSR set to: 0
  6195  001262  C061  F02A         	movff	strtol@a,??_strtol
  6196  001266  C062  F02B         	movff	strtol@a+1,??_strtol+1
  6197  00126A  C063  F02C         	movff	strtol@a+2,??_strtol+2
  6198  00126E  C064  F02D         	movff	strtol@a+3,??_strtol+3
  6199  001272  1E2A               	comf	??_strtol,f,c
  6200  001274  1E2B               	comf	??_strtol+1,f,c
  6201  001276  1E2C               	comf	??_strtol+2,f,c
  6202  001278  1E2D               	comf	??_strtol+3,f,c
  6203  00127A  2A2A               	incf	??_strtol,f,c
  6204  00127C  0E00               	movlw	0
  6205  00127E  222B               	addwfc	??_strtol+1,f,c
  6206  001280  222C               	addwfc	??_strtol+2,f,c
  6207  001282  222D               	addwfc	??_strtol+3,f,c
  6208  001284  C02A  F024         	movff	??_strtol,?_strtol
  6209  001288  C02B  F025         	movff	??_strtol+1,?_strtol+1
  6210  00128C  C02C  F026         	movff	??_strtol+2,?_strtol+2
  6211  001290  C02D  F027         	movff	??_strtol+3,?_strtol+3
  6212                           
  6213                           ; BSR set to: 0
  6214  001294  0012               	return	
  6215  001296                     l2044:
  6216                           
  6217                           ; BSR set to: 0
  6218  001296  C061  F024         	movff	strtol@a,?_strtol
  6219  00129A  C062  F025         	movff	strtol@a+1,?_strtol+1
  6220  00129E  C063  F026         	movff	strtol@a+2,?_strtol+2
  6221  0012A2  C064  F027         	movff	strtol@a+3,?_strtol+3
  6222                           
  6223                           ; BSR set to: 0
  6224  0012A6  0012               	return		;funcret
  6225  0012A8                     __end_of_strtol:
  6226                           	opt stack 0
  6227                           tosu	equ	0xFFF
  6228                           tosh	equ	0xFFE
  6229                           tosl	equ	0xFFD
  6230                           pclath	equ	0xFFA
  6231                           tblptru	equ	0xFF8
  6232                           tblptrh	equ	0xFF7
  6233                           tblptrl	equ	0xFF6
  6234                           tablat	equ	0xFF5
  6235                           prodh	equ	0xFF4
  6236                           prodl	equ	0xFF3
  6237                           intcon	equ	0xFF2
  6238                           postinc0	equ	0xFEE
  6239                           wreg	equ	0xFE8
  6240                           indf1	equ	0xFE7
  6241                           postdec1	equ	0xFE5
  6242                           fsr1h	equ	0xFE2
  6243                           fsr1l	equ	0xFE1
  6244                           indf2	equ	0xFDF
  6245                           postinc2	equ	0xFDE
  6246                           postdec2	equ	0xFDD
  6247                           fsr2h	equ	0xFDA
  6248                           fsr2l	equ	0xFD9
  6249                           status	equ	0xFD8
  6250                           
  6251 ;; *************** function _toupper *****************
  6252 ;; Defined at:
  6253 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  6254 ;; Parameters:    Size  Location     Type
  6255 ;;  c               1    wreg     unsigned char 
  6256 ;; Auto vars:     Size  Location     Type
  6257 ;;  c               1   23[COMRAM] unsigned char 
  6258 ;; Return value:  Size  Location     Type
  6259 ;;                  1    wreg      unsigned char 
  6260 ;; Registers used:
  6261 ;;		wreg, status,2, status,0
  6262 ;; Tracked objects:
  6263 ;;		On entry : 0/0
  6264 ;;		On exit  : 0/0
  6265 ;;		Unchanged: 0/0
  6266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6267 ;;      Params:         0       0       0       0       0       0       0
  6268 ;;      Locals:         1       0       0       0       0       0       0
  6269 ;;      Temps:          0       0       0       0       0       0       0
  6270 ;;      Totals:         1       0       0       0       0       0       0
  6271 ;;Total ram usage:        1 bytes
  6272 ;; Hardware stack levels used:    1
  6273 ;; Hardware stack levels required when called:    3
  6274 ;; This function calls:
  6275 ;;		Nothing
  6276 ;; This function is called by:
  6277 ;;		_strtol
  6278 ;; This function uses a non-reentrant model
  6279 ;;
  6280                           
  6281                           	psect	text30
  6282  00381E                     __ptext30:
  6283                           	opt stack 0
  6284  00381E                     _toupper:
  6285                           	opt stack 22
  6286                           
  6287                           ; BSR set to: 0
  6288                           ;incstack = 0
  6289                           ;toupper@c stored from wreg
  6290  00381E  6E18               	movwf	toupper@c,c
  6291  003820  0E7B               	movlw	123
  6292  003822  6018               	cpfslt	toupper@c,c
  6293  003824  D004               	goto	l2048
  6294  003826  0E60               	movlw	96
  6295  003828  6418               	cpfsgt	toupper@c,c
  6296  00382A  D001               	goto	l2048
  6297  00382C  9A18               	bcf	toupper@c,5,c
  6298  00382E                     l2048:
  6299  00382E  5018               	movf	toupper@c,w,c
  6300  003830  0012               	return	
  6301  003832                     __end_of_toupper:
  6302                           	opt stack 0
  6303                           tosu	equ	0xFFF
  6304                           tosh	equ	0xFFE
  6305                           tosl	equ	0xFFD
  6306                           pclath	equ	0xFFA
  6307                           tblptru	equ	0xFF8
  6308                           tblptrh	equ	0xFF7
  6309                           tblptrl	equ	0xFF6
  6310                           tablat	equ	0xFF5
  6311                           prodh	equ	0xFF4
  6312                           prodl	equ	0xFF3
  6313                           intcon	equ	0xFF2
  6314                           postinc0	equ	0xFEE
  6315                           wreg	equ	0xFE8
  6316                           indf1	equ	0xFE7
  6317                           postdec1	equ	0xFE5
  6318                           fsr1h	equ	0xFE2
  6319                           fsr1l	equ	0xFE1
  6320                           indf2	equ	0xFDF
  6321                           postinc2	equ	0xFDE
  6322                           postdec2	equ	0xFDD
  6323                           fsr2h	equ	0xFDA
  6324                           fsr2l	equ	0xFD9
  6325                           status	equ	0xFD8
  6326                           
  6327 ;; *************** function _isspace *****************
  6328 ;; Defined at:
  6329 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  6330 ;; Parameters:    Size  Location     Type
  6331 ;;  c               1    wreg     unsigned char 
  6332 ;; Auto vars:     Size  Location     Type
  6333 ;;  c               1   25[COMRAM] unsigned char 
  6334 ;; Return value:  Size  Location     Type
  6335 ;;		None               void
  6336 ;; Registers used:
  6337 ;;		wreg, status,2, status,0
  6338 ;; Tracked objects:
  6339 ;;		On entry : 0/0
  6340 ;;		On exit  : 0/0
  6341 ;;		Unchanged: 0/0
  6342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6343 ;;      Params:         0       0       0       0       0       0       0
  6344 ;;      Locals:         2       0       0       0       0       0       0
  6345 ;;      Temps:          1       0       0       0       0       0       0
  6346 ;;      Totals:         3       0       0       0       0       0       0
  6347 ;;Total ram usage:        3 bytes
  6348 ;; Hardware stack levels used:    1
  6349 ;; Hardware stack levels required when called:    3
  6350 ;; This function calls:
  6351 ;;		Nothing
  6352 ;; This function is called by:
  6353 ;;		_strtol
  6354 ;; This function uses a non-reentrant model
  6355 ;;
  6356                           
  6357                           	psect	text31
  6358  00363A                     __ptext31:
  6359                           	opt stack 0
  6360  00363A                     _isspace:
  6361                           	opt stack 22
  6362                           
  6363                           ;incstack = 0
  6364                           ;isspace@c stored from wreg
  6365  00363A  6E1A               	movwf	isspace@c,c
  6366  00363C  0E01               	movlw	1
  6367  00363E  6E19               	movwf	_isspace$3009,c
  6368  003640  0E20               	movlw	32
  6369  003642  181A               	xorwf	isspace@c,w,c
  6370  003644  B4D8               	btfsc	status,2,c
  6371  003646  D008               	goto	l2130
  6372  003648  0E0E               	movlw	14
  6373  00364A  601A               	cpfslt	isspace@c,c
  6374  00364C  D003               	goto	u6000
  6375  00364E  0E09               	movlw	9
  6376  003650  601A               	cpfslt	isspace@c,c
  6377  003652  D002               	goto	l2130
  6378  003654                     u6000:
  6379  003654  0E00               	movlw	0
  6380  003656  6E19               	movwf	_isspace$3009,c
  6381  003658                     l2130:
  6382  003658  C019  F018         	movff	_isspace$3009,??_isspace
  6383  00365C  3018               	rrcf	??_isspace,w,c
  6384  00365E  0012               	return	
  6385  003660                     __end_of_isspace:
  6386                           	opt stack 0
  6387                           tosu	equ	0xFFF
  6388                           tosh	equ	0xFFE
  6389                           tosl	equ	0xFFD
  6390                           pclath	equ	0xFFA
  6391                           tblptru	equ	0xFF8
  6392                           tblptrh	equ	0xFF7
  6393                           tblptrl	equ	0xFF6
  6394                           tablat	equ	0xFF5
  6395                           prodh	equ	0xFF4
  6396                           prodl	equ	0xFF3
  6397                           intcon	equ	0xFF2
  6398                           postinc0	equ	0xFEE
  6399                           wreg	equ	0xFE8
  6400                           indf1	equ	0xFE7
  6401                           postdec1	equ	0xFE5
  6402                           fsr1h	equ	0xFE2
  6403                           fsr1l	equ	0xFE1
  6404                           indf2	equ	0xFDF
  6405                           postinc2	equ	0xFDE
  6406                           postdec2	equ	0xFDD
  6407                           fsr2h	equ	0xFDA
  6408                           fsr2l	equ	0xFD9
  6409                           status	equ	0xFD8
  6410                           
  6411 ;; *************** function _isdigit *****************
  6412 ;; Defined at:
  6413 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  6414 ;; Parameters:    Size  Location     Type
  6415 ;;  c               1    wreg     unsigned char 
  6416 ;; Auto vars:     Size  Location     Type
  6417 ;;  c               1   25[COMRAM] unsigned char 
  6418 ;; Return value:  Size  Location     Type
  6419 ;;		None               void
  6420 ;; Registers used:
  6421 ;;		wreg, status,2, status,0
  6422 ;; Tracked objects:
  6423 ;;		On entry : 0/0
  6424 ;;		On exit  : 0/0
  6425 ;;		Unchanged: 0/0
  6426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6427 ;;      Params:         0       0       0       0       0       0       0
  6428 ;;      Locals:         2       0       0       0       0       0       0
  6429 ;;      Temps:          1       0       0       0       0       0       0
  6430 ;;      Totals:         3       0       0       0       0       0       0
  6431 ;;Total ram usage:        3 bytes
  6432 ;; Hardware stack levels used:    1
  6433 ;; Hardware stack levels required when called:    3
  6434 ;; This function calls:
  6435 ;;		Nothing
  6436 ;; This function is called by:
  6437 ;;		_strtol
  6438 ;; This function uses a non-reentrant model
  6439 ;;
  6440                           
  6441                           	psect	text32
  6442  003714                     __ptext32:
  6443                           	opt stack 0
  6444  003714                     _isdigit:
  6445                           	opt stack 22
  6446                           
  6447                           ;incstack = 0
  6448                           ;isdigit@c stored from wreg
  6449  003714  6E1A               	movwf	isdigit@c,c
  6450  003716  0E00               	movlw	0
  6451  003718  6E19               	movwf	_isdigit$3006,c
  6452  00371A  0E3A               	movlw	58
  6453  00371C  601A               	cpfslt	isdigit@c,c
  6454  00371E  D005               	goto	l2125
  6455  003720  0E2F               	movlw	47
  6456  003722  641A               	cpfsgt	isdigit@c,c
  6457  003724  D002               	goto	l2125
  6458  003726  0E01               	movlw	1
  6459  003728  6E19               	movwf	_isdigit$3006,c
  6460  00372A                     l2125:
  6461  00372A  C019  F018         	movff	_isdigit$3006,??_isdigit
  6462  00372E  3018               	rrcf	??_isdigit,w,c
  6463  003730  0012               	return	
  6464  003732                     __end_of_isdigit:
  6465                           	opt stack 0
  6466                           tosu	equ	0xFFF
  6467                           tosh	equ	0xFFE
  6468                           tosl	equ	0xFFD
  6469                           pclath	equ	0xFFA
  6470                           tblptru	equ	0xFF8
  6471                           tblptrh	equ	0xFF7
  6472                           tblptrl	equ	0xFF6
  6473                           tablat	equ	0xFF5
  6474                           prodh	equ	0xFF4
  6475                           prodl	equ	0xFF3
  6476                           intcon	equ	0xFF2
  6477                           postinc0	equ	0xFEE
  6478                           wreg	equ	0xFE8
  6479                           indf1	equ	0xFE7
  6480                           postdec1	equ	0xFE5
  6481                           fsr1h	equ	0xFE2
  6482                           fsr1l	equ	0xFE1
  6483                           indf2	equ	0xFDF
  6484                           postinc2	equ	0xFDE
  6485                           postdec2	equ	0xFDD
  6486                           fsr2h	equ	0xFDA
  6487                           fsr2l	equ	0xFD9
  6488                           status	equ	0xFD8
  6489                           
  6490 ;; *************** function _isalpha *****************
  6491 ;; Defined at:
  6492 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  6493 ;; Parameters:    Size  Location     Type
  6494 ;;  c               1    wreg     unsigned char 
  6495 ;; Auto vars:     Size  Location     Type
  6496 ;;  c               1   28[COMRAM] unsigned char 
  6497 ;; Return value:  Size  Location     Type
  6498 ;;		None               void
  6499 ;; Registers used:
  6500 ;;		wreg, status,2, status,0, cstack
  6501 ;; Tracked objects:
  6502 ;;		On entry : 0/0
  6503 ;;		On exit  : 0/0
  6504 ;;		Unchanged: 0/0
  6505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6506 ;;      Params:         0       0       0       0       0       0       0
  6507 ;;      Locals:         2       0       0       0       0       0       0
  6508 ;;      Temps:          1       0       0       0       0       0       0
  6509 ;;      Totals:         3       0       0       0       0       0       0
  6510 ;;Total ram usage:        3 bytes
  6511 ;; Hardware stack levels used:    1
  6512 ;; Hardware stack levels required when called:    4
  6513 ;; This function calls:
  6514 ;;		_isupper
  6515 ;; This function is called by:
  6516 ;;		_strtol
  6517 ;; This function uses a non-reentrant model
  6518 ;;
  6519                           
  6520                           	psect	text33
  6521  0035EC                     __ptext33:
  6522                           	opt stack 0
  6523  0035EC                     _isalpha:
  6524                           	opt stack 21
  6525                           
  6526                           ;incstack = 0
  6527                           ;isalpha@c stored from wreg
  6528  0035EC  6E1D               	movwf	isalpha@c,c
  6529  0035EE  0E01               	movlw	1
  6530  0035F0  6E1C               	movwf	_isalpha$3003,c
  6531  0035F2  0E7B               	movlw	123
  6532  0035F4  601D               	cpfslt	isalpha@c,c
  6533  0035F6  D003               	goto	u6020
  6534  0035F8  0E61               	movlw	97
  6535  0035FA  601D               	cpfslt	isalpha@c,c
  6536  0035FC  D007               	goto	l2120
  6537  0035FE                     u6020:
  6538  0035FE  501D               	movf	isalpha@c,w,c
  6539  003600  EC99  F01B         	call	_isupper
  6540  003604  B0D8               	btfsc	status,0,c
  6541  003606  D002               	goto	l2120
  6542  003608  0E00               	movlw	0
  6543  00360A  6E1C               	movwf	_isalpha$3003,c
  6544  00360C                     l2120:
  6545  00360C  C01C  F01B         	movff	_isalpha$3003,??_isalpha
  6546  003610  301B               	rrcf	??_isalpha,w,c
  6547  003612  0012               	return	
  6548  003614                     __end_of_isalpha:
  6549                           	opt stack 0
  6550                           tosu	equ	0xFFF
  6551                           tosh	equ	0xFFE
  6552                           tosl	equ	0xFFD
  6553                           pclath	equ	0xFFA
  6554                           tblptru	equ	0xFF8
  6555                           tblptrh	equ	0xFF7
  6556                           tblptrl	equ	0xFF6
  6557                           tablat	equ	0xFF5
  6558                           prodh	equ	0xFF4
  6559                           prodl	equ	0xFF3
  6560                           intcon	equ	0xFF2
  6561                           postinc0	equ	0xFEE
  6562                           wreg	equ	0xFE8
  6563                           indf1	equ	0xFE7
  6564                           postdec1	equ	0xFE5
  6565                           fsr1h	equ	0xFE2
  6566                           fsr1l	equ	0xFE1
  6567                           indf2	equ	0xFDF
  6568                           postinc2	equ	0xFDE
  6569                           postdec2	equ	0xFDD
  6570                           fsr2h	equ	0xFDA
  6571                           fsr2l	equ	0xFD9
  6572                           status	equ	0xFD8
  6573                           
  6574 ;; *************** function _isupper *****************
  6575 ;; Defined at:
  6576 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  6577 ;; Parameters:    Size  Location     Type
  6578 ;;  c               1    wreg     unsigned char 
  6579 ;; Auto vars:     Size  Location     Type
  6580 ;;  c               1   25[COMRAM] unsigned char 
  6581 ;; Return value:  Size  Location     Type
  6582 ;;		None               void
  6583 ;; Registers used:
  6584 ;;		wreg, status,2, status,0
  6585 ;; Tracked objects:
  6586 ;;		On entry : 0/0
  6587 ;;		On exit  : 0/0
  6588 ;;		Unchanged: 0/0
  6589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6590 ;;      Params:         0       0       0       0       0       0       0
  6591 ;;      Locals:         2       0       0       0       0       0       0
  6592 ;;      Temps:          1       0       0       0       0       0       0
  6593 ;;      Totals:         3       0       0       0       0       0       0
  6594 ;;Total ram usage:        3 bytes
  6595 ;; Hardware stack levels used:    1
  6596 ;; Hardware stack levels required when called:    3
  6597 ;; This function calls:
  6598 ;;		Nothing
  6599 ;; This function is called by:
  6600 ;;		_isalpha
  6601 ;; This function uses a non-reentrant model
  6602 ;;
  6603                           
  6604                           	psect	text34
  6605  003732                     __ptext34:
  6606                           	opt stack 0
  6607  003732                     _isupper:
  6608                           	opt stack 21
  6609                           
  6610                           ;incstack = 0
  6611                           ;isupper@c stored from wreg
  6612  003732  6E1A               	movwf	isupper@c,c
  6613  003734  0E00               	movlw	0
  6614  003736  6E19               	movwf	_isupper$3012,c
  6615  003738  0E5B               	movlw	91
  6616  00373A  601A               	cpfslt	isupper@c,c
  6617  00373C  D005               	goto	l2135
  6618  00373E  0E40               	movlw	64
  6619  003740  641A               	cpfsgt	isupper@c,c
  6620  003742  D002               	goto	l2135
  6621  003744  0E01               	movlw	1
  6622  003746  6E19               	movwf	_isupper$3012,c
  6623  003748                     l2135:
  6624  003748  C019  F018         	movff	_isupper$3012,??_isupper
  6625  00374C  3018               	rrcf	??_isupper,w,c
  6626  00374E  0012               	return	
  6627  003750                     __end_of_isupper:
  6628                           	opt stack 0
  6629                           tosu	equ	0xFFF
  6630                           tosh	equ	0xFFE
  6631                           tosl	equ	0xFFD
  6632                           pclath	equ	0xFFA
  6633                           tblptru	equ	0xFF8
  6634                           tblptrh	equ	0xFF7
  6635                           tblptrl	equ	0xFF6
  6636                           tablat	equ	0xFF5
  6637                           prodh	equ	0xFF4
  6638                           prodl	equ	0xFF3
  6639                           intcon	equ	0xFF2
  6640                           postinc0	equ	0xFEE
  6641                           wreg	equ	0xFE8
  6642                           indf1	equ	0xFE7
  6643                           postdec1	equ	0xFE5
  6644                           fsr1h	equ	0xFE2
  6645                           fsr1l	equ	0xFE1
  6646                           indf2	equ	0xFDF
  6647                           postinc2	equ	0xFDE
  6648                           postdec2	equ	0xFDD
  6649                           fsr2h	equ	0xFDA
  6650                           fsr2l	equ	0xFD9
  6651                           status	equ	0xFD8
  6652                           
  6653 ;; *************** function ___lmul *****************
  6654 ;; Defined at:
  6655 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  6656 ;; Parameters:    Size  Location     Type
  6657 ;;  multiplier      4   23[COMRAM] unsigned long 
  6658 ;;  multiplicand    4   27[COMRAM] unsigned long 
  6659 ;; Auto vars:     Size  Location     Type
  6660 ;;  product         4   31[COMRAM] unsigned long 
  6661 ;; Return value:  Size  Location     Type
  6662 ;;                  4   23[COMRAM] unsigned long 
  6663 ;; Registers used:
  6664 ;;		wreg, status,2, status,0
  6665 ;; Tracked objects:
  6666 ;;		On entry : 0/0
  6667 ;;		On exit  : 0/0
  6668 ;;		Unchanged: 0/0
  6669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6670 ;;      Params:         8       0       0       0       0       0       0
  6671 ;;      Locals:         4       0       0       0       0       0       0
  6672 ;;      Temps:          0       0       0       0       0       0       0
  6673 ;;      Totals:        12       0       0       0       0       0       0
  6674 ;;Total ram usage:       12 bytes
  6675 ;; Hardware stack levels used:    1
  6676 ;; Hardware stack levels required when called:    3
  6677 ;; This function calls:
  6678 ;;		Nothing
  6679 ;; This function is called by:
  6680 ;;		_strtol
  6681 ;; This function uses a non-reentrant model
  6682 ;;
  6683                           
  6684                           	psect	text35
  6685  002DB4                     __ptext35:
  6686                           	opt stack 0
  6687  002DB4                     ___lmul:
  6688                           	opt stack 22
  6689                           
  6690                           ;incstack = 0
  6691  002DB4  0E00               	movlw	0
  6692  002DB6  6E20               	movwf	___lmul@product,c
  6693  002DB8  0E00               	movlw	0
  6694  002DBA  6E21               	movwf	___lmul@product+1,c
  6695  002DBC  0E00               	movlw	0
  6696  002DBE  6E22               	movwf	___lmul@product+2,c
  6697  002DC0  0E00               	movlw	0
  6698  002DC2  6E23               	movwf	___lmul@product+3,c
  6699  002DC4  A018               	btfss	___lmul@multiplier,0,c
  6700  002DC6  D008               	goto	l1454
  6701  002DC8  501C               	movf	___lmul@multiplicand,w,c
  6702  002DCA  2620               	addwf	___lmul@product,f,c
  6703  002DCC  501D               	movf	___lmul@multiplicand+1,w,c
  6704  002DCE  2221               	addwfc	___lmul@product+1,f,c
  6705  002DD0  501E               	movf	___lmul@multiplicand+2,w,c
  6706  002DD2  2222               	addwfc	___lmul@product+2,f,c
  6707  002DD4  501F               	movf	___lmul@multiplicand+3,w,c
  6708  002DD6  2223               	addwfc	___lmul@product+3,f,c
  6709  002DD8                     l1454:
  6710  002DD8  90D8               	bcf	status,0,c
  6711  002DDA  361C               	rlcf	___lmul@multiplicand,f,c
  6712  002DDC  361D               	rlcf	___lmul@multiplicand+1,f,c
  6713  002DDE  361E               	rlcf	___lmul@multiplicand+2,f,c
  6714  002DE0  361F               	rlcf	___lmul@multiplicand+3,f,c
  6715  002DE2  90D8               	bcf	status,0,c
  6716  002DE4  321B               	rrcf	___lmul@multiplier+3,f,c
  6717  002DE6  321A               	rrcf	___lmul@multiplier+2,f,c
  6718  002DE8  3219               	rrcf	___lmul@multiplier+1,f,c
  6719  002DEA  3218               	rrcf	___lmul@multiplier,f,c
  6720  002DEC  5018               	movf	___lmul@multiplier,w,c
  6721  002DEE  1019               	iorwf	___lmul@multiplier+1,w,c
  6722  002DF0  101A               	iorwf	___lmul@multiplier+2,w,c
  6723  002DF2  101B               	iorwf	___lmul@multiplier+3,w,c
  6724  002DF4  A4D8               	btfss	status,2,c
  6725  002DF6  D7E6               	goto	l1453
  6726  002DF8  C020  F018         	movff	___lmul@product,?___lmul
  6727  002DFC  C021  F019         	movff	___lmul@product+1,?___lmul+1
  6728  002E00  C022  F01A         	movff	___lmul@product+2,?___lmul+2
  6729  002E04  C023  F01B         	movff	___lmul@product+3,?___lmul+3
  6730  002E08  0012               	return		;funcret
  6731  002E0A                     __end_of___lmul:
  6732                           	opt stack 0
  6733                           tosu	equ	0xFFF
  6734                           tosh	equ	0xFFE
  6735                           tosl	equ	0xFFD
  6736                           pclath	equ	0xFFA
  6737                           tblptru	equ	0xFF8
  6738                           tblptrh	equ	0xFF7
  6739                           tblptrl	equ	0xFF6
  6740                           tablat	equ	0xFF5
  6741                           prodh	equ	0xFF4
  6742                           prodl	equ	0xFF3
  6743                           intcon	equ	0xFF2
  6744                           postinc0	equ	0xFEE
  6745                           wreg	equ	0xFE8
  6746                           indf1	equ	0xFE7
  6747                           postdec1	equ	0xFE5
  6748                           fsr1h	equ	0xFE2
  6749                           fsr1l	equ	0xFE1
  6750                           indf2	equ	0xFDF
  6751                           postinc2	equ	0xFDE
  6752                           postdec2	equ	0xFDD
  6753                           fsr2h	equ	0xFDA
  6754                           fsr2l	equ	0xFD9
  6755                           status	equ	0xFD8
  6756                           
  6757 ;; *************** function _testLeds *****************
  6758 ;; Defined at:
  6759 ;;		line 43 in file "LedsApp.c"
  6760 ;; Parameters:    Size  Location     Type
  6761 ;;		None
  6762 ;; Auto vars:     Size  Location     Type
  6763 ;;  idx             2   44[COMRAM] int 
  6764 ;; Return value:  Size  Location     Type
  6765 ;;                  1    wreg      void 
  6766 ;; Registers used:
  6767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6768 ;; Tracked objects:
  6769 ;;		On entry : 0/0
  6770 ;;		On exit  : 0/0
  6771 ;;		Unchanged: 0/0
  6772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6773 ;;      Params:         0       0       0       0       0       0       0
  6774 ;;      Locals:         2       0       0       0       0       0       0
  6775 ;;      Temps:          1       0       0       0       0       0       0
  6776 ;;      Totals:         3       0       0       0       0       0       0
  6777 ;;Total ram usage:        3 bytes
  6778 ;; Hardware stack levels used:    1
  6779 ;; Hardware stack levels required when called:    6
  6780 ;; This function calls:
  6781 ;;		_SendAckMessage
  6782 ;; This function is called by:
  6783 ;;		_GroupControlMcu
  6784 ;; This function uses a non-reentrant model
  6785 ;;
  6786                           
  6787                           	psect	text36
  6788  002940                     __ptext36:
  6789                           	opt stack 0
  6790  002940                     _testLeds:
  6791                           	opt stack 22
  6792                           
  6793                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  6794                           
  6795                           ;incstack = 0
  6796  002940  0E00               	movlw	0
  6797  002942  6E2E               	movwf	testLeds@idx+1,c
  6798  002944  0E00               	movlw	0
  6799  002946  6E2D               	movwf	testLeds@idx,c
  6800  002948                     l7300:
  6801  002948  BE2E               	btfsc	testLeds@idx+1,7,c
  6802  00294A  D006               	goto	l50
  6803  00294C  502E               	movf	testLeds@idx+1,w,c
  6804  00294E  E127               	bnz	l7314
  6805  002950  0E0A               	movlw	10
  6806  002952  5C2D               	subwf	testLeds@idx,w,c
  6807  002954  B0D8               	btfsc	status,0,c
  6808  002956  D023               	goto	u6970
  6809  002958                     l50:
  6810                           
  6811                           ;LedsApp.c: 47: {
  6812                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  6813  002958  808B               	bsf	3979,0,c	;volatile
  6814                           
  6815                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  6816  00295A  0E82               	movlw	130
  6817  00295C  6E2C               	movwf	??_testLeds& (0+255),c
  6818  00295E  0EDE               	movlw	222
  6819  002960                     u7997:
  6820  002960  2EE8               	decfsz	wreg,f,c
  6821  002962  D7FE               	bra	u7997
  6822  002964  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6823  002966  D7FC               	bra	u7997
  6824                           
  6825                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  6826  002968  888A               	bsf	3978,4,c	;volatile
  6827                           
  6828                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  6829  00296A  0E82               	movlw	130
  6830  00296C  6E2C               	movwf	??_testLeds& (0+255),c
  6831  00296E  0EDE               	movlw	222
  6832  002970                     u8007:
  6833  002970  2EE8               	decfsz	wreg,f,c
  6834  002972  D7FE               	bra	u8007
  6835  002974  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6836  002976  D7FC               	bra	u8007
  6837                           
  6838                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  6839  002978  908B               	bcf	3979,0,c	;volatile
  6840                           
  6841                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  6842  00297A  0E82               	movlw	130
  6843  00297C  6E2C               	movwf	??_testLeds& (0+255),c
  6844  00297E  0EDE               	movlw	222
  6845  002980                     u8017:
  6846  002980  2EE8               	decfsz	wreg,f,c
  6847  002982  D7FE               	bra	u8017
  6848  002984  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6849  002986  D7FC               	bra	u8017
  6850                           
  6851                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  6852  002988  988A               	bcf	3978,4,c	;volatile
  6853                           
  6854                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  6855  00298A  0E82               	movlw	130
  6856  00298C  6E2C               	movwf	??_testLeds& (0+255),c
  6857  00298E  0EDE               	movlw	222
  6858  002990                     u8027:
  6859  002990  2EE8               	decfsz	wreg,f,c
  6860  002992  D7FE               	bra	u8027
  6861  002994  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6862  002996  D7FC               	bra	u8027
  6863  002998  4A2D               	infsnz	testLeds@idx,f,c
  6864  00299A  2A2E               	incf	testLeds@idx+1,f,c
  6865  00299C  D7D5               	goto	l7300
  6866  00299E                     u6970:
  6867  00299E                     l7314:
  6868                           
  6869                           ;LedsApp.c: 57: }
  6870                           ;LedsApp.c: 59: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_TEST_LEDS);
  6871  00299E  0E15               	movlw	21
  6872  0029A0  6E24               	movwf	SendAckMessage@inRequest,c
  6873  0029A2  0E01               	movlw	1
  6874  0029A4  EC84  F017         	call	_SendAckMessage
  6875  0029A8  0012               	return	
  6876  0029AA                     __end_of_testLeds:
  6877                           	opt stack 0
  6878                           tosu	equ	0xFFF
  6879                           tosh	equ	0xFFE
  6880                           tosl	equ	0xFFD
  6881                           pclath	equ	0xFFA
  6882                           tblptru	equ	0xFF8
  6883                           tblptrh	equ	0xFF7
  6884                           tblptrl	equ	0xFF6
  6885                           tablat	equ	0xFF5
  6886                           prodh	equ	0xFF4
  6887                           prodl	equ	0xFF3
  6888                           intcon	equ	0xFF2
  6889                           postinc0	equ	0xFEE
  6890                           wreg	equ	0xFE8
  6891                           indf1	equ	0xFE7
  6892                           postdec1	equ	0xFE5
  6893                           fsr1h	equ	0xFE2
  6894                           fsr1l	equ	0xFE1
  6895                           indf2	equ	0xFDF
  6896                           postinc2	equ	0xFDE
  6897                           postdec2	equ	0xFDD
  6898                           fsr2h	equ	0xFDA
  6899                           fsr2l	equ	0xFD9
  6900                           status	equ	0xFD8
  6901                           
  6902 ;; *************** function _ResetMcu *****************
  6903 ;; Defined at:
  6904 ;;		line 99 in file "SystemCommon.c"
  6905 ;; Parameters:    Size  Location     Type
  6906 ;;		None
  6907 ;; Auto vars:     Size  Location     Type
  6908 ;;		None
  6909 ;; Return value:  Size  Location     Type
  6910 ;;                  1    wreg      void 
  6911 ;; Registers used:
  6912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6913 ;; Tracked objects:
  6914 ;;		On entry : 0/0
  6915 ;;		On exit  : 0/0
  6916 ;;		Unchanged: 0/0
  6917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6918 ;;      Params:         0       0       0       0       0       0       0
  6919 ;;      Locals:         0       0       0       0       0       0       0
  6920 ;;      Temps:          0       0       0       0       0       0       0
  6921 ;;      Totals:         0       0       0       0       0       0       0
  6922 ;;Total ram usage:        0 bytes
  6923 ;; Hardware stack levels used:    1
  6924 ;; Hardware stack levels required when called:    6
  6925 ;; This function calls:
  6926 ;;		_SendAckMessage
  6927 ;; This function is called by:
  6928 ;;		_GroupControlMcu
  6929 ;; This function uses a non-reentrant model
  6930 ;;
  6931                           
  6932                           	psect	text37
  6933  003876                     __ptext37:
  6934                           	opt stack 0
  6935  003876                     _ResetMcu:
  6936                           	opt stack 22
  6937                           
  6938                           ;SystemCommon.c: 102: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET
      +                          _MCU);
  6939                           
  6940                           ;incstack = 0
  6941  003876  0E11               	movlw	17
  6942  003878  6E24               	movwf	SendAckMessage@inRequest,c
  6943  00387A  0E01               	movlw	1
  6944  00387C  EC84  F017         	call	_SendAckMessage
  6945  003880  00FF               	reset		;# 
  6946  003882  0012               	return		;funcret
  6947  003884                     __end_of_ResetMcu:
  6948                           	opt stack 0
  6949                           tosu	equ	0xFFF
  6950                           tosh	equ	0xFFE
  6951                           tosl	equ	0xFFD
  6952                           pclath	equ	0xFFA
  6953                           tblptru	equ	0xFF8
  6954                           tblptrh	equ	0xFF7
  6955                           tblptrl	equ	0xFF6
  6956                           tablat	equ	0xFF5
  6957                           prodh	equ	0xFF4
  6958                           prodl	equ	0xFF3
  6959                           intcon	equ	0xFF2
  6960                           postinc0	equ	0xFEE
  6961                           wreg	equ	0xFE8
  6962                           indf1	equ	0xFE7
  6963                           postdec1	equ	0xFE5
  6964                           fsr1h	equ	0xFE2
  6965                           fsr1l	equ	0xFE1
  6966                           indf2	equ	0xFDF
  6967                           postinc2	equ	0xFDE
  6968                           postdec2	equ	0xFDD
  6969                           fsr2h	equ	0xFDA
  6970                           fsr2l	equ	0xFD9
  6971                           status	equ	0xFD8
  6972                           
  6973 ;; *************** function _ResetCpld *****************
  6974 ;; Defined at:
  6975 ;;		line 108 in file "SystemCommon.c"
  6976 ;; Parameters:    Size  Location     Type
  6977 ;;		None
  6978 ;; Auto vars:     Size  Location     Type
  6979 ;;		None
  6980 ;; Return value:  Size  Location     Type
  6981 ;;                  1    wreg      void 
  6982 ;; Registers used:
  6983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6984 ;; Tracked objects:
  6985 ;;		On entry : 0/0
  6986 ;;		On exit  : 0/0
  6987 ;;		Unchanged: 0/0
  6988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6989 ;;      Params:         0       0       0       0       0       0       0
  6990 ;;      Locals:         0       0       0       0       0       0       0
  6991 ;;      Temps:          0       0       0       0       0       0       0
  6992 ;;      Totals:         0       0       0       0       0       0       0
  6993 ;;Total ram usage:        0 bytes
  6994 ;; Hardware stack levels used:    1
  6995 ;; Hardware stack levels required when called:    6
  6996 ;; This function calls:
  6997 ;;		_SendAckMessage
  6998 ;; This function is called by:
  6999 ;;		_GroupControlMcu
  7000 ;; This function uses a non-reentrant model
  7001 ;;
  7002                           
  7003                           	psect	text38
  7004  0038AE                     __ptext38:
  7005                           	opt stack 0
  7006  0038AE                     _ResetCpld:
  7007                           	opt stack 22
  7008                           
  7009                           ;SystemCommon.c: 111: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET
      +                          _CPLD);
  7010                           
  7011                           ;incstack = 0
  7012  0038AE  0E12               	movlw	18
  7013  0038B0  6E24               	movwf	SendAckMessage@inRequest,c
  7014  0038B2  0E01               	movlw	1
  7015  0038B4  EC84  F017         	call	_SendAckMessage
  7016  0038B8  0012               	return		;funcret
  7017  0038BA                     __end_of_ResetCpld:
  7018                           	opt stack 0
  7019                           tosu	equ	0xFFF
  7020                           tosh	equ	0xFFE
  7021                           tosl	equ	0xFFD
  7022                           pclath	equ	0xFFA
  7023                           tblptru	equ	0xFF8
  7024                           tblptrh	equ	0xFF7
  7025                           tblptrl	equ	0xFF6
  7026                           tablat	equ	0xFF5
  7027                           prodh	equ	0xFF4
  7028                           prodl	equ	0xFF3
  7029                           intcon	equ	0xFF2
  7030                           postinc0	equ	0xFEE
  7031                           wreg	equ	0xFE8
  7032                           indf1	equ	0xFE7
  7033                           postdec1	equ	0xFE5
  7034                           fsr1h	equ	0xFE2
  7035                           fsr1l	equ	0xFE1
  7036                           indf2	equ	0xFDF
  7037                           postinc2	equ	0xFDE
  7038                           postdec2	equ	0xFDD
  7039                           fsr2h	equ	0xFDA
  7040                           fsr2l	equ	0xFD9
  7041                           status	equ	0xFD8
  7042                           
  7043 ;; *************** function _SetConversionResultFormat *****************
  7044 ;; Defined at:
  7045 ;;		line 38 in file "AdcApp.c"
  7046 ;; Parameters:    Size  Location     Type
  7047 ;;  data            2   43[COMRAM] PTR unsigned char 
  7048 ;; Auto vars:     Size  Location     Type
  7049 ;;		None
  7050 ;; Return value:  Size  Location     Type
  7051 ;;                  1    wreg      void 
  7052 ;; Registers used:
  7053 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7054 ;; Tracked objects:
  7055 ;;		On entry : 0/0
  7056 ;;		On exit  : 0/0
  7057 ;;		Unchanged: 0/0
  7058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7059 ;;      Params:         2       0       0       0       0       0       0
  7060 ;;      Locals:         0       0       0       0       0       0       0
  7061 ;;      Temps:          0       0       0       0       0       0       0
  7062 ;;      Totals:         2       0       0       0       0       0       0
  7063 ;;Total ram usage:        2 bytes
  7064 ;; Hardware stack levels used:    1
  7065 ;; Hardware stack levels required when called:    6
  7066 ;; This function calls:
  7067 ;;		_SendAckMessage
  7068 ;; This function is called by:
  7069 ;;		_GroupAdc
  7070 ;; This function uses a non-reentrant model
  7071 ;;
  7072                           
  7073                           	psect	text39
  7074  0038BA                     __ptext39:
  7075                           	opt stack 0
  7076  0038BA                     _SetConversionResultFormat:
  7077                           	opt stack 22
  7078                           
  7079                           ;AdcApp.c: 40: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CONVERSION_MODE);
  7080                           
  7081                           ;incstack = 0
  7082  0038BA  0E33               	movlw	51
  7083  0038BC  6E24               	movwf	SendAckMessage@inRequest,c
  7084  0038BE  0E03               	movlw	3
  7085  0038C0  EC84  F017         	call	_SendAckMessage
  7086  0038C4  0012               	return		;funcret
  7087  0038C6                     __end_of_SetConversionResultFormat:
  7088                           	opt stack 0
  7089                           tosu	equ	0xFFF
  7090                           tosh	equ	0xFFE
  7091                           tosl	equ	0xFFD
  7092                           pclath	equ	0xFFA
  7093                           tblptru	equ	0xFF8
  7094                           tblptrh	equ	0xFF7
  7095                           tblptrl	equ	0xFF6
  7096                           tablat	equ	0xFF5
  7097                           prodh	equ	0xFF4
  7098                           prodl	equ	0xFF3
  7099                           intcon	equ	0xFF2
  7100                           postinc0	equ	0xFEE
  7101                           wreg	equ	0xFE8
  7102                           indf1	equ	0xFE7
  7103                           postdec1	equ	0xFE5
  7104                           fsr1h	equ	0xFE2
  7105                           fsr1l	equ	0xFE1
  7106                           indf2	equ	0xFDF
  7107                           postinc2	equ	0xFDE
  7108                           postdec2	equ	0xFDD
  7109                           fsr2h	equ	0xFDA
  7110                           fsr2l	equ	0xFD9
  7111                           status	equ	0xFD8
  7112                           
  7113 ;; *************** function _SetChannelMode *****************
  7114 ;; Defined at:
  7115 ;;		line 43 in file "AdcApp.c"
  7116 ;; Parameters:    Size  Location     Type
  7117 ;;  data            2   43[COMRAM] PTR unsigned char 
  7118 ;; Auto vars:     Size  Location     Type
  7119 ;;		None
  7120 ;; Return value:  Size  Location     Type
  7121 ;;                  1    wreg      void 
  7122 ;; Registers used:
  7123 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7124 ;; Tracked objects:
  7125 ;;		On entry : 0/0
  7126 ;;		On exit  : 0/0
  7127 ;;		Unchanged: 0/0
  7128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7129 ;;      Params:         2       0       0       0       0       0       0
  7130 ;;      Locals:         0       0       0       0       0       0       0
  7131 ;;      Temps:          0       0       0       0       0       0       0
  7132 ;;      Totals:         2       0       0       0       0       0       0
  7133 ;;Total ram usage:        2 bytes
  7134 ;; Hardware stack levels used:    1
  7135 ;; Hardware stack levels required when called:    6
  7136 ;; This function calls:
  7137 ;;		_SendAckMessage
  7138 ;; This function is called by:
  7139 ;;		_GroupAdc
  7140 ;; This function uses a non-reentrant model
  7141 ;;
  7142                           
  7143                           	psect	text40
  7144  0034E2                     __ptext40:
  7145                           	opt stack 0
  7146  0034E2                     _SetChannelMode:
  7147                           	opt stack 22
  7148                           
  7149                           ;AdcApp.c: 45: adcSampleMode = data[0];
  7150                           
  7151                           ;incstack = 0
  7152  0034E2  C02C  FFD9         	movff	SetChannelMode@data,fsr2l
  7153  0034E6  C02D  FFDA         	movff	SetChannelMode@data+1,fsr2h
  7154  0034EA  50DF               	movf	indf2,w,c
  7155  0034EC  6E3C               	movwf	_adcSampleMode,c
  7156                           
  7157                           ;AdcApp.c: 46: if (adcSampleMode == SINGLE_CHANNEL)
  7158  0034EE  043C               	decf	_adcSampleMode,w,c
  7159  0034F0  A4D8               	btfss	status,2,c
  7160  0034F2  D009               	goto	l108
  7161                           
  7162                           ;AdcApp.c: 47: {
  7163                           ;AdcApp.c: 48: channel = data[1];
  7164  0034F4  EE20 F001          	lfsr	2,1
  7165  0034F8  502C               	movf	SetChannelMode@data,w,c
  7166  0034FA  26D9               	addwf	fsr2l,f,c
  7167  0034FC  502D               	movf	SetChannelMode@data+1,w,c
  7168  0034FE  22DA               	addwfc	fsr2h,f,c
  7169  003500  50DF               	movf	indf2,w,c
  7170  003502  0100               	movlb	0	; () banked
  7171  003504  6FD3               	movwf	_channel& (0+255),b
  7172  003506                     l108:
  7173                           
  7174                           ;AdcApp.c: 49: }
  7175                           ;AdcApp.c: 50: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CHANNEL_MODE);
  7176                           
  7177                           ; BSR set to: 0
  7178  003506  0E32               	movlw	50
  7179  003508  6E24               	movwf	SendAckMessage@inRequest,c
  7180  00350A  0E03               	movlw	3
  7181  00350C  EC84  F017         	call	_SendAckMessage
  7182  003510  0012               	return		;funcret
  7183  003512                     __end_of_SetChannelMode:
  7184                           	opt stack 0
  7185                           tosu	equ	0xFFF
  7186                           tosh	equ	0xFFE
  7187                           tosl	equ	0xFFD
  7188                           pclath	equ	0xFFA
  7189                           tblptru	equ	0xFF8
  7190                           tblptrh	equ	0xFF7
  7191                           tblptrl	equ	0xFF6
  7192                           tablat	equ	0xFF5
  7193                           prodh	equ	0xFF4
  7194                           prodl	equ	0xFF3
  7195                           intcon	equ	0xFF2
  7196                           postinc0	equ	0xFEE
  7197                           wreg	equ	0xFE8
  7198                           indf1	equ	0xFE7
  7199                           postdec1	equ	0xFE5
  7200                           fsr1h	equ	0xFE2
  7201                           fsr1l	equ	0xFE1
  7202                           indf2	equ	0xFDF
  7203                           postinc2	equ	0xFDE
  7204                           postdec2	equ	0xFDD
  7205                           fsr2h	equ	0xFDA
  7206                           fsr2l	equ	0xFD9
  7207                           status	equ	0xFD8
  7208                           
  7209 ;; *************** function _SetAdcOperationMode *****************
  7210 ;; Defined at:
  7211 ;;		line 33 in file "AdcApp.c"
  7212 ;; Parameters:    Size  Location     Type
  7213 ;;  data            2   43[COMRAM] PTR unsigned char 
  7214 ;; Auto vars:     Size  Location     Type
  7215 ;;		None
  7216 ;; Return value:  Size  Location     Type
  7217 ;;                  1    wreg      void 
  7218 ;; Registers used:
  7219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7220 ;; Tracked objects:
  7221 ;;		On entry : 0/0
  7222 ;;		On exit  : 0/0
  7223 ;;		Unchanged: 0/0
  7224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7225 ;;      Params:         2       0       0       0       0       0       0
  7226 ;;      Locals:         0       0       0       0       0       0       0
  7227 ;;      Temps:          0       0       0       0       0       0       0
  7228 ;;      Totals:         2       0       0       0       0       0       0
  7229 ;;Total ram usage:        2 bytes
  7230 ;; Hardware stack levels used:    1
  7231 ;; Hardware stack levels required when called:    6
  7232 ;; This function calls:
  7233 ;;		_SendAckMessage
  7234 ;; This function is called by:
  7235 ;;		_GroupAdc
  7236 ;; This function uses a non-reentrant model
  7237 ;;
  7238                           
  7239                           	psect	text41
  7240  0038C6                     __ptext41:
  7241                           	opt stack 0
  7242  0038C6                     _SetAdcOperationMode:
  7243                           	opt stack 22
  7244                           
  7245                           ;AdcApp.c: 35: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_OPERATION);
  7246                           
  7247                           ;incstack = 0
  7248  0038C6  0E31               	movlw	49
  7249  0038C8  6E24               	movwf	SendAckMessage@inRequest,c
  7250  0038CA  0E03               	movlw	3
  7251  0038CC  EC84  F017         	call	_SendAckMessage
  7252  0038D0  0012               	return		;funcret
  7253  0038D2                     __end_of_SetAdcOperationMode:
  7254                           	opt stack 0
  7255                           tosu	equ	0xFFF
  7256                           tosh	equ	0xFFE
  7257                           tosl	equ	0xFFD
  7258                           pclath	equ	0xFFA
  7259                           tblptru	equ	0xFF8
  7260                           tblptrh	equ	0xFF7
  7261                           tblptrl	equ	0xFF6
  7262                           tablat	equ	0xFF5
  7263                           prodh	equ	0xFF4
  7264                           prodl	equ	0xFF3
  7265                           intcon	equ	0xFF2
  7266                           postinc0	equ	0xFEE
  7267                           wreg	equ	0xFE8
  7268                           indf1	equ	0xFE7
  7269                           postdec1	equ	0xFE5
  7270                           fsr1h	equ	0xFE2
  7271                           fsr1l	equ	0xFE1
  7272                           indf2	equ	0xFDF
  7273                           postinc2	equ	0xFDE
  7274                           postdec2	equ	0xFDD
  7275                           fsr2h	equ	0xFDA
  7276                           fsr2l	equ	0xFD9
  7277                           status	equ	0xFD8
  7278                           
  7279 ;; *************** function _EUSART1_Read *****************
  7280 ;; Defined at:
  7281 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  7282 ;; Parameters:    Size  Location     Type
  7283 ;;		None
  7284 ;; Auto vars:     Size  Location     Type
  7285 ;;  readValue       2   24[COMRAM] unsigned int 
  7286 ;; Return value:  Size  Location     Type
  7287 ;;                  1    wreg      unsigned char 
  7288 ;; Registers used:
  7289 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7290 ;; Tracked objects:
  7291 ;;		On entry : 0/0
  7292 ;;		On exit  : 0/0
  7293 ;;		Unchanged: 0/0
  7294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7295 ;;      Params:         0       0       0       0       0       0       0
  7296 ;;      Locals:         2       0       0       0       0       0       0
  7297 ;;      Temps:          1       0       0       0       0       0       0
  7298 ;;      Totals:         3       0       0       0       0       0       0
  7299 ;;Total ram usage:        3 bytes
  7300 ;; Hardware stack levels used:    1
  7301 ;; Hardware stack levels required when called:    3
  7302 ;; This function calls:
  7303 ;;		Nothing
  7304 ;; This function is called by:
  7305 ;;		_readUartMessage
  7306 ;; This function uses a non-reentrant model
  7307 ;;
  7308                           
  7309                           	psect	text42
  7310  00307C                     __ptext42:
  7311                           	opt stack 0
  7312  00307C                     _EUSART1_Read:
  7313                           	opt stack 26
  7314                           
  7315                           ;eusart1.c: 112: uint16_t readValue = 0;
  7316                           
  7317                           ;incstack = 0
  7318  00307C  0E00               	movlw	0
  7319  00307E  6E1A               	movwf	EUSART1_Read@readValue+1,c
  7320  003080  0E00               	movlw	0
  7321  003082  6E19               	movwf	EUSART1_Read@readValue,c
  7322                           
  7323                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  7324  003084  0100               	movlb	0	; () banked
  7325  003086  51D2               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  7326  003088  A4D8               	btfss	status,2,c
  7327  00308A  D002               	goto	l832
  7328                           
  7329                           ; BSR set to: 0
  7330                           ;eusart1.c: 120: {
  7331                           ;eusart1.c: 121: return readValue;
  7332  00308C  5019               	movf	EUSART1_Read@readValue,w,c
  7333                           
  7334                           ; BSR set to: 0
  7335  00308E  0012               	return	
  7336  003090                     l832:
  7337                           
  7338                           ; BSR set to: 0
  7339                           ;eusart1.c: 122: }
  7340                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  7341                           
  7342                           ; BSR set to: 0
  7343  003090  5037               	movf	_eusart1RxTail,w,c	;volatile
  7344  003092  0D01               	mullw	1
  7345  003094  0E46               	movlw	low _eusart1RxBuffer
  7346  003096  24F3               	addwf	prodl,w,c
  7347  003098  6ED9               	movwf	fsr2l,c
  7348  00309A  0E01               	movlw	high _eusart1RxBuffer
  7349  00309C  20F4               	addwfc	prodh,w,c
  7350  00309E  6EDA               	movwf	fsr2h,c
  7351  0030A0  50DF               	movf	indf2,w,c
  7352  0030A2  6E18               	movwf	??_EUSART1_Read& (0+255),c
  7353  0030A4  5018               	movf	??_EUSART1_Read,w,c
  7354  0030A6  6E19               	movwf	EUSART1_Read@readValue,c
  7355  0030A8  6A1A               	clrf	EUSART1_Read@readValue+1,c
  7356                           
  7357                           ; BSR set to: 0
  7358  0030AA  2A37               	incf	_eusart1RxTail,f,c	;volatile
  7359                           
  7360                           ; BSR set to: 0
  7361                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  7362  0030AC  0E27               	movlw	39
  7363  0030AE  6437               	cpfsgt	_eusart1RxTail,c	;volatile
  7364  0030B0  D002               	goto	l834
  7365                           
  7366                           ; BSR set to: 0
  7367                           ;eusart1.c: 126: {
  7368                           ;eusart1.c: 127: eusart1RxTail = 0;
  7369  0030B2  0E00               	movlw	0
  7370  0030B4  6E37               	movwf	_eusart1RxTail,c	;volatile
  7371  0030B6                     l834:
  7372                           
  7373                           ; BSR set to: 0
  7374                           ;eusart1.c: 128: }
  7375                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  7376                           
  7377                           ; BSR set to: 0
  7378  0030B6  9A9D               	bcf	3997,5,c	;volatile
  7379                           
  7380                           ; BSR set to: 0
  7381                           ;eusart1.c: 130: eusart1RxCount--;
  7382  0030B8  07D2               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  7383                           
  7384                           ; BSR set to: 0
  7385                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  7386  0030BA  8A9D               	bsf	3997,5,c	;volatile
  7387                           
  7388                           ; BSR set to: 0
  7389                           ;eusart1.c: 133: return readValue;
  7390  0030BC  5019               	movf	EUSART1_Read@readValue,w,c
  7391  0030BE  0012               	return	
  7392  0030C0                     __end_of_EUSART1_Read:
  7393                           	opt stack 0
  7394                           tosu	equ	0xFFF
  7395                           tosh	equ	0xFFE
  7396                           tosl	equ	0xFFD
  7397                           pclath	equ	0xFFA
  7398                           tblptru	equ	0xFF8
  7399                           tblptrh	equ	0xFF7
  7400                           tblptrl	equ	0xFF6
  7401                           tablat	equ	0xFF5
  7402                           prodh	equ	0xFF4
  7403                           prodl	equ	0xFF3
  7404                           intcon	equ	0xFF2
  7405                           postinc0	equ	0xFEE
  7406                           wreg	equ	0xFE8
  7407                           indf1	equ	0xFE7
  7408                           postdec1	equ	0xFE5
  7409                           fsr1h	equ	0xFE2
  7410                           fsr1l	equ	0xFE1
  7411                           indf2	equ	0xFDF
  7412                           postinc2	equ	0xFDE
  7413                           postdec2	equ	0xFDD
  7414                           fsr2h	equ	0xFDA
  7415                           fsr2l	equ	0xFD9
  7416                           status	equ	0xFD8
  7417                           
  7418 ;; *************** function _keepAliveSignalUart *****************
  7419 ;; Defined at:
  7420 ;;		line 117 in file "SystemStatus.c"
  7421 ;; Parameters:    Size  Location     Type
  7422 ;;		None
  7423 ;; Auto vars:     Size  Location     Type
  7424 ;;		None
  7425 ;; Return value:  Size  Location     Type
  7426 ;;                  1    wreg      void 
  7427 ;; Registers used:
  7428 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7429 ;; Tracked objects:
  7430 ;;		On entry : 0/0
  7431 ;;		On exit  : 0/0
  7432 ;;		Unchanged: 0/0
  7433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7434 ;;      Params:         0       0       0       0       0       0       0
  7435 ;;      Locals:         0       0       0       0       0       0       0
  7436 ;;      Temps:          0       0       0       0       0       0       0
  7437 ;;      Totals:         0       0       0       0       0       0       0
  7438 ;;Total ram usage:        0 bytes
  7439 ;; Hardware stack levels used:    1
  7440 ;; Hardware stack levels required when called:    6
  7441 ;; This function calls:
  7442 ;;		_SendAckMessage
  7443 ;; This function is called by:
  7444 ;;		_main
  7445 ;; This function uses a non-reentrant model
  7446 ;;
  7447                           
  7448                           	psect	text43
  7449  0038D2                     __ptext43:
  7450                           	opt stack 0
  7451  0038D2                     _keepAliveSignalUart:
  7452                           	opt stack 24
  7453                           
  7454                           ;SystemStatus.c: 119: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_KEEP_
      +                          ALIVE);
  7455                           
  7456                           ; BSR set to: 0
  7457                           ;incstack = 0
  7458  0038D2  0E16               	movlw	22
  7459  0038D4  6E24               	movwf	SendAckMessage@inRequest,c
  7460  0038D6  0E01               	movlw	1
  7461  0038D8  EC84  F017         	call	_SendAckMessage
  7462  0038DC  0012               	return		;funcret
  7463  0038DE                     __end_of_keepAliveSignalUart:
  7464                           	opt stack 0
  7465                           tosu	equ	0xFFF
  7466                           tosh	equ	0xFFE
  7467                           tosl	equ	0xFFD
  7468                           pclath	equ	0xFFA
  7469                           tblptru	equ	0xFF8
  7470                           tblptrh	equ	0xFF7
  7471                           tblptrl	equ	0xFF6
  7472                           tablat	equ	0xFF5
  7473                           prodh	equ	0xFF4
  7474                           prodl	equ	0xFF3
  7475                           intcon	equ	0xFF2
  7476                           postinc0	equ	0xFEE
  7477                           wreg	equ	0xFE8
  7478                           indf1	equ	0xFE7
  7479                           postdec1	equ	0xFE5
  7480                           fsr1h	equ	0xFE2
  7481                           fsr1l	equ	0xFE1
  7482                           indf2	equ	0xFDF
  7483                           postinc2	equ	0xFDE
  7484                           postdec2	equ	0xFDD
  7485                           fsr2h	equ	0xFDA
  7486                           fsr2l	equ	0xFD9
  7487                           status	equ	0xFD8
  7488                           
  7489 ;; *************** function _keepAliveSignalLed *****************
  7490 ;; Defined at:
  7491 ;;		line 35 in file "LedsApp.c"
  7492 ;; Parameters:    Size  Location     Type
  7493 ;;		None
  7494 ;; Auto vars:     Size  Location     Type
  7495 ;;		None
  7496 ;; Return value:  Size  Location     Type
  7497 ;;                  1    wreg      void 
  7498 ;; Registers used:
  7499 ;;		wreg, status,2, status,0
  7500 ;; Tracked objects:
  7501 ;;		On entry : 0/0
  7502 ;;		On exit  : 0/0
  7503 ;;		Unchanged: 0/0
  7504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7505 ;;      Params:         0       0       0       0       0       0       0
  7506 ;;      Locals:         0       0       0       0       0       0       0
  7507 ;;      Temps:          1       0       0       0       0       0       0
  7508 ;;      Totals:         1       0       0       0       0       0       0
  7509 ;;Total ram usage:        1 bytes
  7510 ;; Hardware stack levels used:    1
  7511 ;; Hardware stack levels required when called:    3
  7512 ;; This function calls:
  7513 ;;		Nothing
  7514 ;; This function is called by:
  7515 ;;		_main
  7516 ;; This function uses a non-reentrant model
  7517 ;;
  7518                           
  7519                           	psect	text44
  7520  0037DC                     __ptext44:
  7521                           	opt stack 0
  7522  0037DC                     _keepAliveSignalLed:
  7523                           	opt stack 27
  7524                           
  7525                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  7526                           
  7527                           ;incstack = 0
  7528  0037DC  B08B               	btfsc	3979,0,c	;volatile
  7529  0037DE  D003               	goto	u5130
  7530  0037E0  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7531  0037E2  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  7532  0037E4  D001               	goto	u5148
  7533  0037E6                     u5130:
  7534  0037E6  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7535  0037E8                     u5148:
  7536  0037E8  508B               	movf	3979,w,c	;volatile
  7537  0037EA  1818               	xorwf	??_keepAliveSignalLed,w,c
  7538  0037EC  0BFE               	andlw	-2
  7539  0037EE  1818               	xorwf	??_keepAliveSignalLed,w,c
  7540  0037F0  6E8B               	movwf	3979,c	;volatile
  7541  0037F2  0012               	return		;funcret
  7542  0037F4                     __end_of_keepAliveSignalLed:
  7543                           	opt stack 0
  7544                           tosu	equ	0xFFF
  7545                           tosh	equ	0xFFE
  7546                           tosl	equ	0xFFD
  7547                           pclath	equ	0xFFA
  7548                           tblptru	equ	0xFF8
  7549                           tblptrh	equ	0xFF7
  7550                           tblptrl	equ	0xFF6
  7551                           tablat	equ	0xFF5
  7552                           prodh	equ	0xFF4
  7553                           prodl	equ	0xFF3
  7554                           intcon	equ	0xFF2
  7555                           postinc0	equ	0xFEE
  7556                           wreg	equ	0xFE8
  7557                           indf1	equ	0xFE7
  7558                           postdec1	equ	0xFE5
  7559                           fsr1h	equ	0xFE2
  7560                           fsr1l	equ	0xFE1
  7561                           indf2	equ	0xFDF
  7562                           postinc2	equ	0xFDE
  7563                           postdec2	equ	0xFDD
  7564                           fsr2h	equ	0xFDA
  7565                           fsr2l	equ	0xFD9
  7566                           status	equ	0xFD8
  7567                           
  7568 ;; *************** function _SetMcuSystem *****************
  7569 ;; Defined at:
  7570 ;;		line 11 in file "SystemSettings.c"
  7571 ;; Parameters:    Size  Location     Type
  7572 ;;		None
  7573 ;; Auto vars:     Size  Location     Type
  7574 ;;		None
  7575 ;; Return value:  Size  Location     Type
  7576 ;;                  1    wreg      void 
  7577 ;; Registers used:
  7578 ;;		wreg, status,2, status,0, cstack
  7579 ;; Tracked objects:
  7580 ;;		On entry : 0/0
  7581 ;;		On exit  : 0/0
  7582 ;;		Unchanged: 0/0
  7583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7584 ;;      Params:         0       0       0       0       0       0       0
  7585 ;;      Locals:         0       0       0       0       0       0       0
  7586 ;;      Temps:          0       0       0       0       0       0       0
  7587 ;;      Totals:         0       0       0       0       0       0       0
  7588 ;;Total ram usage:        0 bytes
  7589 ;; Hardware stack levels used:    1
  7590 ;; Hardware stack levels required when called:    6
  7591 ;; This function calls:
  7592 ;;		_SYSTEM_Initialize
  7593 ;; This function is called by:
  7594 ;;		_main
  7595 ;; This function uses a non-reentrant model
  7596 ;;
  7597                           
  7598                           	psect	text45
  7599  0038F4                     __ptext45:
  7600                           	opt stack 0
  7601  0038F4                     _SetMcuSystem:
  7602                           	opt stack 24
  7603                           
  7604                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  7605                           
  7606                           ;incstack = 0
  7607  0038F4  ECD4  F01B         	call	_SYSTEM_Initialize	;wreg free
  7608                           
  7609                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  7610  0038F8  8EF2               	bsf	intcon,7,c	;volatile
  7611                           
  7612                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  7613  0038FA  8CF2               	bsf	intcon,6,c	;volatile
  7614  0038FC  0012               	return		;funcret
  7615  0038FE                     __end_of_SetMcuSystem:
  7616                           	opt stack 0
  7617                           tosu	equ	0xFFF
  7618                           tosh	equ	0xFFE
  7619                           tosl	equ	0xFFD
  7620                           pclath	equ	0xFFA
  7621                           tblptru	equ	0xFF8
  7622                           tblptrh	equ	0xFF7
  7623                           tblptrl	equ	0xFF6
  7624                           tablat	equ	0xFF5
  7625                           prodh	equ	0xFF4
  7626                           prodl	equ	0xFF3
  7627                           intcon	equ	0xFF2
  7628                           postinc0	equ	0xFEE
  7629                           wreg	equ	0xFE8
  7630                           indf1	equ	0xFE7
  7631                           postdec1	equ	0xFE5
  7632                           fsr1h	equ	0xFE2
  7633                           fsr1l	equ	0xFE1
  7634                           indf2	equ	0xFDF
  7635                           postinc2	equ	0xFDE
  7636                           postdec2	equ	0xFDD
  7637                           fsr2h	equ	0xFDA
  7638                           fsr2l	equ	0xFD9
  7639                           status	equ	0xFD8
  7640                           
  7641 ;; *************** function _SYSTEM_Initialize *****************
  7642 ;; Defined at:
  7643 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7644 ;; Parameters:    Size  Location     Type
  7645 ;;		None
  7646 ;; Auto vars:     Size  Location     Type
  7647 ;;		None
  7648 ;; Return value:  Size  Location     Type
  7649 ;;                  1    wreg      void 
  7650 ;; Registers used:
  7651 ;;		wreg, status,2, status,0, cstack
  7652 ;; Tracked objects:
  7653 ;;		On entry : 0/0
  7654 ;;		On exit  : 0/0
  7655 ;;		Unchanged: 0/0
  7656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7657 ;;      Params:         0       0       0       0       0       0       0
  7658 ;;      Locals:         0       0       0       0       0       0       0
  7659 ;;      Temps:          0       0       0       0       0       0       0
  7660 ;;      Totals:         0       0       0       0       0       0       0
  7661 ;;Total ram usage:        0 bytes
  7662 ;; Hardware stack levels used:    1
  7663 ;; Hardware stack levels required when called:    5
  7664 ;; This function calls:
  7665 ;;		_ADC_Initialize
  7666 ;;		_EUSART1_Initialize
  7667 ;;		_INTERRUPT_Initialize
  7668 ;;		_OSCILLATOR_Initialize
  7669 ;;		_PIN_MANAGER_Initialize
  7670 ;;		_TMR0_Initialize
  7671 ;; This function is called by:
  7672 ;;		_SetMcuSystem
  7673 ;; This function uses a non-reentrant model
  7674 ;;
  7675                           
  7676                           	psect	text46
  7677  0037A8                     __ptext46:
  7678                           	opt stack 0
  7679  0037A8                     _SYSTEM_Initialize:
  7680                           	opt stack 24
  7681                           
  7682                           ;mcc.c: 114: INTERRUPT_Initialize();
  7683                           
  7684                           ;incstack = 0
  7685  0037A8  EC86  F01C         	call	_INTERRUPT_Initialize	;wreg free
  7686                           
  7687                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  7688  0037AC  ECF8  F017         	call	_PIN_MANAGER_Initialize	;wreg free
  7689                           
  7690                           ;mcc.c: 116: OSCILLATOR_Initialize();
  7691  0037B0  EC42  F01C         	call	_OSCILLATOR_Initialize	;wreg free
  7692                           
  7693                           ;mcc.c: 117: ADC_Initialize();
  7694  0037B4  ECFA  F01B         	call	_ADC_Initialize	;wreg free
  7695                           
  7696                           ;mcc.c: 118: TMR0_Initialize();
  7697  0037B8  EC3D  F01A         	call	_TMR0_Initialize	;wreg free
  7698                           
  7699                           ;mcc.c: 119: EUSART1_Initialize();
  7700  0037BC  EC07  F01A         	call	_EUSART1_Initialize	;wreg free
  7701  0037C0  0012               	return		;funcret
  7702  0037C2                     __end_of_SYSTEM_Initialize:
  7703                           	opt stack 0
  7704                           tosu	equ	0xFFF
  7705                           tosh	equ	0xFFE
  7706                           tosl	equ	0xFFD
  7707                           pclath	equ	0xFFA
  7708                           tblptru	equ	0xFF8
  7709                           tblptrh	equ	0xFF7
  7710                           tblptrl	equ	0xFF6
  7711                           tablat	equ	0xFF5
  7712                           prodh	equ	0xFF4
  7713                           prodl	equ	0xFF3
  7714                           intcon	equ	0xFF2
  7715                           postinc0	equ	0xFEE
  7716                           wreg	equ	0xFE8
  7717                           indf1	equ	0xFE7
  7718                           postdec1	equ	0xFE5
  7719                           fsr1h	equ	0xFE2
  7720                           fsr1l	equ	0xFE1
  7721                           indf2	equ	0xFDF
  7722                           postinc2	equ	0xFDE
  7723                           postdec2	equ	0xFDD
  7724                           fsr2h	equ	0xFDA
  7725                           fsr2l	equ	0xFD9
  7726                           status	equ	0xFD8
  7727                           
  7728 ;; *************** function _TMR0_Initialize *****************
  7729 ;; Defined at:
  7730 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  7731 ;; Parameters:    Size  Location     Type
  7732 ;;		None
  7733 ;; Auto vars:     Size  Location     Type
  7734 ;;		None
  7735 ;; Return value:  Size  Location     Type
  7736 ;;                  1    wreg      void 
  7737 ;; Registers used:
  7738 ;;		wreg, status,2, status,0, cstack
  7739 ;; Tracked objects:
  7740 ;;		On entry : 0/0
  7741 ;;		On exit  : 0/0
  7742 ;;		Unchanged: 0/0
  7743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7744 ;;      Params:         0       0       0       0       0       0       0
  7745 ;;      Locals:         0       0       0       0       0       0       0
  7746 ;;      Temps:          2       0       0       0       0       0       0
  7747 ;;      Totals:         2       0       0       0       0       0       0
  7748 ;;Total ram usage:        2 bytes
  7749 ;; Hardware stack levels used:    1
  7750 ;; Hardware stack levels required when called:    4
  7751 ;; This function calls:
  7752 ;;		_TMR0_SetInterruptHandler
  7753 ;; This function is called by:
  7754 ;;		_SYSTEM_Initialize
  7755 ;; This function uses a non-reentrant model
  7756 ;;
  7757                           
  7758                           	psect	text47
  7759  00347A                     __ptext47:
  7760                           	opt stack 0
  7761  00347A                     _TMR0_Initialize:
  7762                           	opt stack 24
  7763                           
  7764                           ;tmr0.c: 71: TMR0H = 0x3C;
  7765                           
  7766                           ;incstack = 0
  7767  00347A  0E3C               	movlw	60
  7768  00347C  6ED7               	movwf	4055,c	;volatile
  7769                           
  7770                           ;tmr0.c: 74: TMR0L = 0xAF;
  7771  00347E  0EAF               	movlw	175
  7772  003480  6ED6               	movwf	4054,c	;volatile
  7773                           
  7774                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  7775  003482  50D6               	movf	4054,w,c	;volatile
  7776  003484  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  7777  003488  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  7778  00348A  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  7779  00348E  6A1A               	clrf	??_TMR0_Initialize,c
  7780  003490  101A               	iorwf	??_TMR0_Initialize,w,c
  7781  003492  6E46               	movwf	_timer0ReloadVal,c	;volatile
  7782  003494  501B               	movf	??_TMR0_Initialize+1,w,c
  7783  003496  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  7784                           
  7785                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  7786  003498  94F2               	bcf	intcon,2,c	;volatile
  7787                           
  7788                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  7789  00349A  8AF2               	bsf	intcon,5,c	;volatile
  7790                           
  7791                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  7792  00349C  0E00               	movlw	0
  7793  00349E  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  7794  0034A0  0E00               	movlw	0
  7795  0034A2  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  7796  0034A4  EC7F  F01C         	call	_TMR0_SetInterruptHandler	;wreg free
  7797                           
  7798                           ;tmr0.c: 90: T0CON = 0x90;
  7799  0034A8  0E90               	movlw	144
  7800  0034AA  6ED5               	movwf	4053,c	;volatile
  7801  0034AC  0012               	return		;funcret
  7802  0034AE                     __end_of_TMR0_Initialize:
  7803                           	opt stack 0
  7804                           tosu	equ	0xFFF
  7805                           tosh	equ	0xFFE
  7806                           tosl	equ	0xFFD
  7807                           pclath	equ	0xFFA
  7808                           tblptru	equ	0xFF8
  7809                           tblptrh	equ	0xFF7
  7810                           tblptrl	equ	0xFF6
  7811                           tablat	equ	0xFF5
  7812                           prodh	equ	0xFF4
  7813                           prodl	equ	0xFF3
  7814                           intcon	equ	0xFF2
  7815                           postinc0	equ	0xFEE
  7816                           wreg	equ	0xFE8
  7817                           indf1	equ	0xFE7
  7818                           postdec1	equ	0xFE5
  7819                           fsr1h	equ	0xFE2
  7820                           fsr1l	equ	0xFE1
  7821                           indf2	equ	0xFDF
  7822                           postinc2	equ	0xFDE
  7823                           postdec2	equ	0xFDD
  7824                           fsr2h	equ	0xFDA
  7825                           fsr2l	equ	0xFD9
  7826                           status	equ	0xFD8
  7827                           
  7828 ;; *************** function _TMR0_SetInterruptHandler *****************
  7829 ;; Defined at:
  7830 ;;		line 177 in file "mcc_generated_files/tmr0.c"
  7831 ;; Parameters:    Size  Location     Type
  7832 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  7833 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  7834 ;; Auto vars:     Size  Location     Type
  7835 ;;		None
  7836 ;; Return value:  Size  Location     Type
  7837 ;;                  1    wreg      void 
  7838 ;; Registers used:
  7839 ;;		wreg, status,2, status,0
  7840 ;; Tracked objects:
  7841 ;;		On entry : 0/0
  7842 ;;		On exit  : 0/0
  7843 ;;		Unchanged: 0/0
  7844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7845 ;;      Params:         2       0       0       0       0       0       0
  7846 ;;      Locals:         0       0       0       0       0       0       0
  7847 ;;      Temps:          0       0       0       0       0       0       0
  7848 ;;      Totals:         2       0       0       0       0       0       0
  7849 ;;Total ram usage:        2 bytes
  7850 ;; Hardware stack levels used:    1
  7851 ;; Hardware stack levels required when called:    3
  7852 ;; This function calls:
  7853 ;;		Nothing
  7854 ;; This function is called by:
  7855 ;;		_TMR0_Initialize
  7856 ;; This function uses a non-reentrant model
  7857 ;;
  7858                           
  7859                           	psect	text48
  7860  0038FE                     __ptext48:
  7861                           	opt stack 0
  7862  0038FE                     _TMR0_SetInterruptHandler:
  7863                           	opt stack 24
  7864                           
  7865                           ;tmr0.c: 178: TMR0_InterruptHandler = InterruptHandler;
  7866                           
  7867                           ;incstack = 0
  7868  0038FE  C018  F0FB         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  7869  003902  C019  F0FC         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  7870  003906  0012               	return		;funcret
  7871  003908                     __end_of_TMR0_SetInterruptHandler:
  7872                           	opt stack 0
  7873                           tosu	equ	0xFFF
  7874                           tosh	equ	0xFFE
  7875                           tosl	equ	0xFFD
  7876                           pclath	equ	0xFFA
  7877                           tblptru	equ	0xFF8
  7878                           tblptrh	equ	0xFF7
  7879                           tblptrl	equ	0xFF6
  7880                           tablat	equ	0xFF5
  7881                           prodh	equ	0xFF4
  7882                           prodl	equ	0xFF3
  7883                           intcon	equ	0xFF2
  7884                           postinc0	equ	0xFEE
  7885                           wreg	equ	0xFE8
  7886                           indf1	equ	0xFE7
  7887                           postdec1	equ	0xFE5
  7888                           fsr1h	equ	0xFE2
  7889                           fsr1l	equ	0xFE1
  7890                           indf2	equ	0xFDF
  7891                           postinc2	equ	0xFDE
  7892                           postdec2	equ	0xFDD
  7893                           fsr2h	equ	0xFDA
  7894                           fsr2l	equ	0xFD9
  7895                           status	equ	0xFD8
  7896                           
  7897 ;; *************** function _PIN_MANAGER_Initialize *****************
  7898 ;; Defined at:
  7899 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  7900 ;; Parameters:    Size  Location     Type
  7901 ;;		None
  7902 ;; Auto vars:     Size  Location     Type
  7903 ;;		None
  7904 ;; Return value:  Size  Location     Type
  7905 ;;                  1    wreg      void 
  7906 ;; Registers used:
  7907 ;;		wreg, status,2
  7908 ;; Tracked objects:
  7909 ;;		On entry : 0/0
  7910 ;;		On exit  : 0/0
  7911 ;;		Unchanged: 0/0
  7912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7913 ;;      Params:         0       0       0       0       0       0       0
  7914 ;;      Locals:         0       0       0       0       0       0       0
  7915 ;;      Temps:          0       0       0       0       0       0       0
  7916 ;;      Totals:         0       0       0       0       0       0       0
  7917 ;;Total ram usage:        0 bytes
  7918 ;; Hardware stack levels used:    1
  7919 ;; Hardware stack levels required when called:    3
  7920 ;; This function calls:
  7921 ;;		Nothing
  7922 ;; This function is called by:
  7923 ;;		_SYSTEM_Initialize
  7924 ;; This function uses a non-reentrant model
  7925 ;;
  7926                           
  7927                           	psect	text49
  7928  002FF0                     __ptext49:
  7929                           	opt stack 0
  7930  002FF0                     _PIN_MANAGER_Initialize:
  7931                           	opt stack 25
  7932                           
  7933                           ;pin_manager.c: 57: LATE = 0x00;
  7934                           
  7935                           ;incstack = 0
  7936  002FF0  0E00               	movlw	0
  7937  002FF2  6E8D               	movwf	3981,c	;volatile
  7938                           
  7939                           ;pin_manager.c: 58: LATD = 0x00;
  7940  002FF4  0E00               	movlw	0
  7941  002FF6  6E8C               	movwf	3980,c	;volatile
  7942                           
  7943                           ;pin_manager.c: 59: LATA = 0x06;
  7944  002FF8  0E06               	movlw	6
  7945  002FFA  6E89               	movwf	3977,c	;volatile
  7946                           
  7947                           ;pin_manager.c: 60: LATB = 0x00;
  7948  002FFC  0E00               	movlw	0
  7949  002FFE  6E8A               	movwf	3978,c	;volatile
  7950                           
  7951                           ;pin_manager.c: 61: LATC = 0x00;
  7952  003000  0E00               	movlw	0
  7953  003002  6E8B               	movwf	3979,c	;volatile
  7954                           
  7955                           ;pin_manager.c: 66: TRISE = 0x07;
  7956  003004  0E07               	movlw	7
  7957  003006  6E96               	movwf	3990,c	;volatile
  7958                           
  7959                           ;pin_manager.c: 67: TRISA = 0xE1;
  7960  003008  0EE1               	movlw	225
  7961  00300A  6E92               	movwf	3986,c	;volatile
  7962                           
  7963                           ;pin_manager.c: 68: TRISB = 0xEF;
  7964  00300C  0EEF               	movlw	239
  7965  00300E  6E93               	movwf	3987,c	;volatile
  7966                           
  7967                           ;pin_manager.c: 69: TRISC = 0x80;
  7968  003010  0E80               	movlw	128
  7969  003012  6E94               	movwf	3988,c	;volatile
  7970                           
  7971                           ;pin_manager.c: 70: TRISD = 0xF2;
  7972  003014  0EF2               	movlw	242
  7973  003016  6E95               	movwf	3989,c	;volatile
  7974                           
  7975                           ;pin_manager.c: 75: ANSELC = 0x34;
  7976  003018  0E34               	movlw	52
  7977  00301A  010F               	movlb	15	; () banked
  7978  00301C  6F3A               	movwf	58,b	;volatile
  7979                           
  7980                           ;pin_manager.c: 76: ANSELB = 0x33;
  7981  00301E  0E33               	movlw	51
  7982  003020  6F39               	movwf	57,b	;volatile
  7983                           
  7984                           ;pin_manager.c: 77: ANSELD = 0xE4;
  7985  003022  0EE4               	movlw	228
  7986  003024  6F3B               	movwf	59,b	;volatile
  7987                           
  7988                           ;pin_manager.c: 78: ANSELE = 0x07;
  7989  003026  0E07               	movlw	7
  7990  003028  6F3C               	movwf	60,b	;volatile
  7991                           
  7992                           ;pin_manager.c: 79: ANSELA = 0x2F;
  7993  00302A  0E2F               	movlw	47
  7994  00302C  6F38               	movwf	56,b	;volatile
  7995                           
  7996                           ;pin_manager.c: 84: WPUB = 0xC2;
  7997  00302E  0EC2               	movlw	194
  7998  003030  6E61               	movwf	3937,c	;volatile
  7999                           
  8000                           ; BSR set to: 15
  8001                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  8002  003032  9EF1               	bcf	intcon2,7,c	;volatile
  8003                           
  8004                           ; BSR set to: 15
  8005                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  8006  003034  86F2               	bsf	intcon,3,c	;volatile
  8007                           
  8008                           ; BSR set to: 15
  8009  003036  0012               	return		;funcret
  8010  003038                     __end_of_PIN_MANAGER_Initialize:
  8011                           	opt stack 0
  8012                           tosu	equ	0xFFF
  8013                           tosh	equ	0xFFE
  8014                           tosl	equ	0xFFD
  8015                           pclath	equ	0xFFA
  8016                           tblptru	equ	0xFF8
  8017                           tblptrh	equ	0xFF7
  8018                           tblptrl	equ	0xFF6
  8019                           tablat	equ	0xFF5
  8020                           prodh	equ	0xFF4
  8021                           prodl	equ	0xFF3
  8022                           intcon	equ	0xFF2
  8023                           intcon2	equ	0xFF1
  8024                           postinc0	equ	0xFEE
  8025                           wreg	equ	0xFE8
  8026                           indf1	equ	0xFE7
  8027                           postdec1	equ	0xFE5
  8028                           fsr1h	equ	0xFE2
  8029                           fsr1l	equ	0xFE1
  8030                           indf2	equ	0xFDF
  8031                           postinc2	equ	0xFDE
  8032                           postdec2	equ	0xFDD
  8033                           fsr2h	equ	0xFDA
  8034                           fsr2l	equ	0xFD9
  8035                           status	equ	0xFD8
  8036                           
  8037 ;; *************** function _OSCILLATOR_Initialize *****************
  8038 ;; Defined at:
  8039 ;;		line 122 in file "mcc_generated_files/mcc.c"
  8040 ;; Parameters:    Size  Location     Type
  8041 ;;		None
  8042 ;; Auto vars:     Size  Location     Type
  8043 ;;		None
  8044 ;; Return value:  Size  Location     Type
  8045 ;;                  1    wreg      void 
  8046 ;; Registers used:
  8047 ;;		wreg, status,2
  8048 ;; Tracked objects:
  8049 ;;		On entry : 0/0
  8050 ;;		On exit  : 0/0
  8051 ;;		Unchanged: 0/0
  8052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8053 ;;      Params:         0       0       0       0       0       0       0
  8054 ;;      Locals:         0       0       0       0       0       0       0
  8055 ;;      Temps:          0       0       0       0       0       0       0
  8056 ;;      Totals:         0       0       0       0       0       0       0
  8057 ;;Total ram usage:        0 bytes
  8058 ;; Hardware stack levels used:    1
  8059 ;; Hardware stack levels required when called:    3
  8060 ;; This function calls:
  8061 ;;		Nothing
  8062 ;; This function is called by:
  8063 ;;		_SYSTEM_Initialize
  8064 ;; This function uses a non-reentrant model
  8065 ;;
  8066                           
  8067                           	psect	text50
  8068  003884                     __ptext50:
  8069                           	opt stack 0
  8070  003884                     _OSCILLATOR_Initialize:
  8071                           	opt stack 25
  8072                           
  8073                           ;mcc.c: 125: OSCCON = 0x60;
  8074                           
  8075                           ; BSR set to: 15
  8076                           ;incstack = 0
  8077  003884  0E60               	movlw	96
  8078  003886  6ED3               	movwf	4051,c	;volatile
  8079                           
  8080                           ;mcc.c: 127: OSCCON2 = 0x04;
  8081  003888  0E04               	movlw	4
  8082  00388A  6ED2               	movwf	4050,c	;volatile
  8083                           
  8084                           ;mcc.c: 129: OSCTUNE = 0x00;
  8085  00388C  0E00               	movlw	0
  8086  00388E  6E9B               	movwf	3995,c	;volatile
  8087  003890  0012               	return		;funcret
  8088  003892                     __end_of_OSCILLATOR_Initialize:
  8089                           	opt stack 0
  8090                           tosu	equ	0xFFF
  8091                           tosh	equ	0xFFE
  8092                           tosl	equ	0xFFD
  8093                           pclath	equ	0xFFA
  8094                           tblptru	equ	0xFF8
  8095                           tblptrh	equ	0xFF7
  8096                           tblptrl	equ	0xFF6
  8097                           tablat	equ	0xFF5
  8098                           prodh	equ	0xFF4
  8099                           prodl	equ	0xFF3
  8100                           intcon	equ	0xFF2
  8101                           intcon2	equ	0xFF1
  8102                           postinc0	equ	0xFEE
  8103                           wreg	equ	0xFE8
  8104                           indf1	equ	0xFE7
  8105                           postdec1	equ	0xFE5
  8106                           fsr1h	equ	0xFE2
  8107                           fsr1l	equ	0xFE1
  8108                           indf2	equ	0xFDF
  8109                           postinc2	equ	0xFDE
  8110                           postdec2	equ	0xFDD
  8111                           fsr2h	equ	0xFDA
  8112                           fsr2l	equ	0xFD9
  8113                           status	equ	0xFD8
  8114                           
  8115 ;; *************** function _INTERRUPT_Initialize *****************
  8116 ;; Defined at:
  8117 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8118 ;; Parameters:    Size  Location     Type
  8119 ;;		None
  8120 ;; Auto vars:     Size  Location     Type
  8121 ;;		None
  8122 ;; Return value:  Size  Location     Type
  8123 ;;                  1    wreg      void 
  8124 ;; Registers used:
  8125 ;;		None
  8126 ;; Tracked objects:
  8127 ;;		On entry : 0/0
  8128 ;;		On exit  : 0/0
  8129 ;;		Unchanged: 0/0
  8130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8131 ;;      Params:         0       0       0       0       0       0       0
  8132 ;;      Locals:         0       0       0       0       0       0       0
  8133 ;;      Temps:          0       0       0       0       0       0       0
  8134 ;;      Totals:         0       0       0       0       0       0       0
  8135 ;;Total ram usage:        0 bytes
  8136 ;; Hardware stack levels used:    1
  8137 ;; Hardware stack levels required when called:    3
  8138 ;; This function calls:
  8139 ;;		Nothing
  8140 ;; This function is called by:
  8141 ;;		_SYSTEM_Initialize
  8142 ;; This function uses a non-reentrant model
  8143 ;;
  8144                           
  8145                           	psect	text51
  8146  00390C                     __ptext51:
  8147                           	opt stack 0
  8148  00390C                     _INTERRUPT_Initialize:
  8149                           	opt stack 25
  8150                           
  8151                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  8152                           
  8153                           ;incstack = 0
  8154  00390C  9ED0               	bcf	4048,7,c	;volatile
  8155  00390E  0012               	return		;funcret
  8156  003910                     __end_of_INTERRUPT_Initialize:
  8157                           	opt stack 0
  8158                           tosu	equ	0xFFF
  8159                           tosh	equ	0xFFE
  8160                           tosl	equ	0xFFD
  8161                           pclath	equ	0xFFA
  8162                           tblptru	equ	0xFF8
  8163                           tblptrh	equ	0xFF7
  8164                           tblptrl	equ	0xFF6
  8165                           tablat	equ	0xFF5
  8166                           prodh	equ	0xFF4
  8167                           prodl	equ	0xFF3
  8168                           intcon	equ	0xFF2
  8169                           intcon2	equ	0xFF1
  8170                           postinc0	equ	0xFEE
  8171                           wreg	equ	0xFE8
  8172                           indf1	equ	0xFE7
  8173                           postdec1	equ	0xFE5
  8174                           fsr1h	equ	0xFE2
  8175                           fsr1l	equ	0xFE1
  8176                           indf2	equ	0xFDF
  8177                           postinc2	equ	0xFDE
  8178                           postdec2	equ	0xFDD
  8179                           fsr2h	equ	0xFDA
  8180                           fsr2l	equ	0xFD9
  8181                           status	equ	0xFD8
  8182                           
  8183 ;; *************** function _EUSART1_Initialize *****************
  8184 ;; Defined at:
  8185 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  8186 ;; Parameters:    Size  Location     Type
  8187 ;;		None
  8188 ;; Auto vars:     Size  Location     Type
  8189 ;;		None
  8190 ;; Return value:  Size  Location     Type
  8191 ;;                  1    wreg      void 
  8192 ;; Registers used:
  8193 ;;		wreg, status,2
  8194 ;; Tracked objects:
  8195 ;;		On entry : 0/0
  8196 ;;		On exit  : 0/0
  8197 ;;		Unchanged: 0/0
  8198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8199 ;;      Params:         0       0       0       0       0       0       0
  8200 ;;      Locals:         0       0       0       0       0       0       0
  8201 ;;      Temps:          0       0       0       0       0       0       0
  8202 ;;      Totals:         0       0       0       0       0       0       0
  8203 ;;Total ram usage:        0 bytes
  8204 ;; Hardware stack levels used:    1
  8205 ;; Hardware stack levels required when called:    3
  8206 ;; This function calls:
  8207 ;;		Nothing
  8208 ;; This function is called by:
  8209 ;;		_SYSTEM_Initialize
  8210 ;; This function uses a non-reentrant model
  8211 ;;
  8212                           
  8213                           	psect	text52
  8214  00340E                     __ptext52:
  8215                           	opt stack 0
  8216  00340E                     _EUSART1_Initialize:
  8217                           	opt stack 25
  8218                           
  8219                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  8220                           
  8221                           ;incstack = 0
  8222  00340E  9A9D               	bcf	3997,5,c	;volatile
  8223                           
  8224                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  8225  003410  989D               	bcf	3997,4,c	;volatile
  8226                           
  8227                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  8228  003412  0E08               	movlw	8
  8229  003414  6EB8               	movwf	4024,c	;volatile
  8230                           
  8231                           ;eusart1.c: 85: RCSTA1 = 0x90;
  8232  003416  0E90               	movlw	144
  8233  003418  6EAB               	movwf	4011,c	;volatile
  8234                           
  8235                           ;eusart1.c: 88: TXSTA1 = 0x24;
  8236  00341A  0E24               	movlw	36
  8237  00341C  6EAC               	movwf	4012,c	;volatile
  8238                           
  8239                           ;eusart1.c: 91: SPBRG1 = 0x10;
  8240  00341E  0E10               	movlw	16
  8241  003420  6EAF               	movwf	4015,c	;volatile
  8242                           
  8243                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  8244  003422  0E00               	movlw	0
  8245  003424  6EB0               	movwf	4016,c	;volatile
  8246                           
  8247                           ;eusart1.c: 98: eusart1TxHead = 0;
  8248  003426  0E00               	movlw	0
  8249  003428  6E3A               	movwf	_eusart1TxHead,c	;volatile
  8250                           
  8251                           ;eusart1.c: 99: eusart1TxTail = 0;
  8252  00342A  0E00               	movlw	0
  8253  00342C  6E39               	movwf	_eusart1TxTail,c	;volatile
  8254                           
  8255                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  8256  00342E  0E46               	movlw	70
  8257  003430  0100               	movlb	0	; () banked
  8258  003432  6FFF               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  8259                           
  8260                           ;eusart1.c: 102: eusart1RxHead = 0;
  8261  003434  0E00               	movlw	0
  8262  003436  6E38               	movwf	_eusart1RxHead,c	;volatile
  8263                           
  8264                           ;eusart1.c: 103: eusart1RxTail = 0;
  8265  003438  0E00               	movlw	0
  8266  00343A  6E37               	movwf	_eusart1RxTail,c	;volatile
  8267                           
  8268                           ;eusart1.c: 104: eusart1RxCount = 0;
  8269  00343C  0E00               	movlw	0
  8270  00343E  6FD2               	movwf	_eusart1RxCount& (0+255),b	;volatile
  8271                           
  8272                           ; BSR set to: 0
  8273                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  8274  003440  8A9D               	bsf	3997,5,c	;volatile
  8275                           
  8276                           ; BSR set to: 0
  8277  003442  0012               	return		;funcret
  8278  003444                     __end_of_EUSART1_Initialize:
  8279                           	opt stack 0
  8280                           tosu	equ	0xFFF
  8281                           tosh	equ	0xFFE
  8282                           tosl	equ	0xFFD
  8283                           pclath	equ	0xFFA
  8284                           tblptru	equ	0xFF8
  8285                           tblptrh	equ	0xFF7
  8286                           tblptrl	equ	0xFF6
  8287                           tablat	equ	0xFF5
  8288                           prodh	equ	0xFF4
  8289                           prodl	equ	0xFF3
  8290                           intcon	equ	0xFF2
  8291                           intcon2	equ	0xFF1
  8292                           postinc0	equ	0xFEE
  8293                           wreg	equ	0xFE8
  8294                           indf1	equ	0xFE7
  8295                           postdec1	equ	0xFE5
  8296                           fsr1h	equ	0xFE2
  8297                           fsr1l	equ	0xFE1
  8298                           indf2	equ	0xFDF
  8299                           postinc2	equ	0xFDE
  8300                           postdec2	equ	0xFDD
  8301                           fsr2h	equ	0xFDA
  8302                           fsr2l	equ	0xFD9
  8303                           status	equ	0xFD8
  8304                           
  8305 ;; *************** function _ADC_Initialize *****************
  8306 ;; Defined at:
  8307 ;;		line 58 in file "mcc_generated_files/adc.c"
  8308 ;; Parameters:    Size  Location     Type
  8309 ;;		None
  8310 ;; Auto vars:     Size  Location     Type
  8311 ;;		None
  8312 ;; Return value:  Size  Location     Type
  8313 ;;                  1    wreg      void 
  8314 ;; Registers used:
  8315 ;;		wreg, status,2
  8316 ;; Tracked objects:
  8317 ;;		On entry : 0/0
  8318 ;;		On exit  : 0/0
  8319 ;;		Unchanged: 0/0
  8320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8321 ;;      Params:         0       0       0       0       0       0       0
  8322 ;;      Locals:         0       0       0       0       0       0       0
  8323 ;;      Temps:          0       0       0       0       0       0       0
  8324 ;;      Totals:         0       0       0       0       0       0       0
  8325 ;;Total ram usage:        0 bytes
  8326 ;; Hardware stack levels used:    1
  8327 ;; Hardware stack levels required when called:    3
  8328 ;; This function calls:
  8329 ;;		Nothing
  8330 ;; This function is called by:
  8331 ;;		_SYSTEM_Initialize
  8332 ;; This function uses a non-reentrant model
  8333 ;;
  8334                           
  8335                           	psect	text53
  8336  0037F4                     __ptext53:
  8337                           	opt stack 0
  8338  0037F4                     _ADC_Initialize:
  8339                           	opt stack 25
  8340                           
  8341                           ;adc.c: 63: ADCON0 = 0x05;
  8342                           
  8343                           ; BSR set to: 0
  8344                           ;incstack = 0
  8345  0037F4  0E05               	movlw	5
  8346  0037F6  6EC2               	movwf	4034,c	;volatile
  8347                           
  8348                           ;adc.c: 66: ADCON1 = 0x00;
  8349  0037F8  0E00               	movlw	0
  8350  0037FA  6EC1               	movwf	4033,c	;volatile
  8351                           
  8352                           ;adc.c: 69: ADCON2 = 0x87;
  8353  0037FC  0E87               	movlw	135
  8354  0037FE  6EC0               	movwf	4032,c	;volatile
  8355                           
  8356                           ;adc.c: 72: ADRESL = 0x00;
  8357  003800  0E00               	movlw	0
  8358  003802  6EC3               	movwf	4035,c	;volatile
  8359                           
  8360                           ;adc.c: 75: ADRESH = 0x00;
  8361  003804  0E00               	movlw	0
  8362  003806  6EC4               	movwf	4036,c	;volatile
  8363  003808  0012               	return		;funcret
  8364  00380A                     __end_of_ADC_Initialize:
  8365                           	opt stack 0
  8366                           tosu	equ	0xFFF
  8367                           tosh	equ	0xFFE
  8368                           tosl	equ	0xFFD
  8369                           pclath	equ	0xFFA
  8370                           tblptru	equ	0xFF8
  8371                           tblptrh	equ	0xFF7
  8372                           tblptrl	equ	0xFF6
  8373                           tablat	equ	0xFF5
  8374                           prodh	equ	0xFF4
  8375                           prodl	equ	0xFF3
  8376                           intcon	equ	0xFF2
  8377                           intcon2	equ	0xFF1
  8378                           postinc0	equ	0xFEE
  8379                           wreg	equ	0xFE8
  8380                           indf1	equ	0xFE7
  8381                           postdec1	equ	0xFE5
  8382                           fsr1h	equ	0xFE2
  8383                           fsr1l	equ	0xFE1
  8384                           indf2	equ	0xFDF
  8385                           postinc2	equ	0xFDE
  8386                           postdec2	equ	0xFDD
  8387                           fsr2h	equ	0xFDA
  8388                           fsr2l	equ	0xFD9
  8389                           status	equ	0xFD8
  8390                           
  8391 ;; *************** function _SetMcuRunTime *****************
  8392 ;; Defined at:
  8393 ;;		line 81 in file "SystemStatus.c"
  8394 ;; Parameters:    Size  Location     Type
  8395 ;;		None
  8396 ;; Auto vars:     Size  Location     Type
  8397 ;;		None
  8398 ;; Return value:  Size  Location     Type
  8399 ;;                  1    wreg      void 
  8400 ;; Registers used:
  8401 ;;		wreg, status,2, status,0, cstack
  8402 ;; Tracked objects:
  8403 ;;		On entry : 0/0
  8404 ;;		On exit  : 0/0
  8405 ;;		Unchanged: 0/0
  8406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8407 ;;      Params:         0       0       0       0       0       0       0
  8408 ;;      Locals:         0       0       0       0       0       0       0
  8409 ;;      Temps:          0       0       0       0       0       0       0
  8410 ;;      Totals:         0       0       0       0       0       0       0
  8411 ;;Total ram usage:        0 bytes
  8412 ;; Hardware stack levels used:    1
  8413 ;; Hardware stack levels required when called:    4
  8414 ;; This function calls:
  8415 ;;		___llmod
  8416 ;; This function is called by:
  8417 ;;		_main
  8418 ;; This function uses a non-reentrant model
  8419 ;;
  8420                           
  8421                           	psect	text54
  8422  0030C0                     __ptext54:
  8423                           	opt stack 0
  8424  0030C0                     _SetMcuRunTime:
  8425                           	opt stack 26
  8426                           
  8427                           ;SystemStatus.c: 83: mcuRunTimeIn5SecTicks++;
  8428                           
  8429                           ;incstack = 0
  8430  0030C0  0E01               	movlw	1
  8431  0030C2  0100               	movlb	0	; () banked
  8432  0030C4  27C0               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  8433  0030C6  0E00               	movlw	0
  8434  0030C8  23C1               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  8435  0030CA  23C2               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  8436  0030CC  23C3               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  8437                           
  8438                           ; BSR set to: 0
  8439                           ;SystemStatus.c: 84: mcuRunTimeIn5SecTicks %= (17280);
  8440  0030CE  C0C0  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  8441  0030D2  C0C1  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  8442  0030D6  C0C2  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  8443  0030DA  C0C3  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  8444  0030DE  0E80               	movlw	128
  8445  0030E0  6E1C               	movwf	___llmod@divisor,c
  8446  0030E2  0E43               	movlw	67
  8447  0030E4  6E1D               	movwf	___llmod@divisor+1,c
  8448  0030E6  0E00               	movlw	0
  8449  0030E8  6E1E               	movwf	___llmod@divisor+2,c
  8450  0030EA  0E00               	movlw	0
  8451  0030EC  6E1F               	movwf	___llmod@divisor+3,c
  8452  0030EE  EC0A  F015         	call	___llmod	;wreg free
  8453  0030F2  C018  F0C0         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  8454  0030F6  C019  F0C1         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  8455  0030FA  C01A  F0C2         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  8456  0030FE  C01B  F0C3         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  8457  003102  0012               	return		;funcret
  8458  003104                     __end_of_SetMcuRunTime:
  8459                           	opt stack 0
  8460                           tosu	equ	0xFFF
  8461                           tosh	equ	0xFFE
  8462                           tosl	equ	0xFFD
  8463                           pclath	equ	0xFFA
  8464                           tblptru	equ	0xFF8
  8465                           tblptrh	equ	0xFF7
  8466                           tblptrl	equ	0xFF6
  8467                           tablat	equ	0xFF5
  8468                           prodh	equ	0xFF4
  8469                           prodl	equ	0xFF3
  8470                           intcon	equ	0xFF2
  8471                           intcon2	equ	0xFF1
  8472                           postinc0	equ	0xFEE
  8473                           wreg	equ	0xFE8
  8474                           indf1	equ	0xFE7
  8475                           postdec1	equ	0xFE5
  8476                           fsr1h	equ	0xFE2
  8477                           fsr1l	equ	0xFE1
  8478                           indf2	equ	0xFDF
  8479                           postinc2	equ	0xFDE
  8480                           postdec2	equ	0xFDD
  8481                           fsr2h	equ	0xFDA
  8482                           fsr2l	equ	0xFD9
  8483                           status	equ	0xFD8
  8484                           
  8485 ;; *************** function ___llmod *****************
  8486 ;; Defined at:
  8487 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  8488 ;; Parameters:    Size  Location     Type
  8489 ;;  dividend        4   23[COMRAM] unsigned long 
  8490 ;;  divisor         4   27[COMRAM] unsigned long 
  8491 ;; Auto vars:     Size  Location     Type
  8492 ;;  counter         1   31[COMRAM] unsigned char 
  8493 ;; Return value:  Size  Location     Type
  8494 ;;                  4   23[COMRAM] unsigned long 
  8495 ;; Registers used:
  8496 ;;		wreg, status,2, status,0
  8497 ;; Tracked objects:
  8498 ;;		On entry : 0/0
  8499 ;;		On exit  : 0/0
  8500 ;;		Unchanged: 0/0
  8501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8502 ;;      Params:         8       0       0       0       0       0       0
  8503 ;;      Locals:         1       0       0       0       0       0       0
  8504 ;;      Temps:          0       0       0       0       0       0       0
  8505 ;;      Totals:         9       0       0       0       0       0       0
  8506 ;;Total ram usage:        9 bytes
  8507 ;; Hardware stack levels used:    1
  8508 ;; Hardware stack levels required when called:    3
  8509 ;; This function calls:
  8510 ;;		Nothing
  8511 ;; This function is called by:
  8512 ;;		_SetMcuRunTime
  8513 ;;		_GetMcuRunTime
  8514 ;; This function uses a non-reentrant model
  8515 ;;
  8516                           
  8517                           	psect	text55
  8518  002A14                     __ptext55:
  8519                           	opt stack 0
  8520  002A14                     ___llmod:
  8521                           	opt stack 24
  8522                           
  8523                           ;incstack = 0
  8524  002A14  501C               	movf	___llmod@divisor,w,c
  8525  002A16  101D               	iorwf	___llmod@divisor+1,w,c
  8526  002A18  101E               	iorwf	___llmod@divisor+2,w,c
  8527  002A1A  101F               	iorwf	___llmod@divisor+3,w,c
  8528  002A1C  B4D8               	btfsc	status,2,c
  8529  002A1E  D024               	goto	l1811
  8530  002A20  0E01               	movlw	1
  8531  002A22  6E20               	movwf	___llmod@counter,c
  8532  002A24  D006               	goto	l1806
  8533  002A26  90D8               	bcf	status,0,c
  8534  002A28  361C               	rlcf	___llmod@divisor,f,c
  8535  002A2A  361D               	rlcf	___llmod@divisor+1,f,c
  8536  002A2C  361E               	rlcf	___llmod@divisor+2,f,c
  8537  002A2E  361F               	rlcf	___llmod@divisor+3,f,c
  8538  002A30  2A20               	incf	___llmod@counter,f,c
  8539  002A32                     l1806:
  8540  002A32  AE1F               	btfss	___llmod@divisor+3,7,c
  8541  002A34  D7F8               	goto	l1807
  8542  002A36                     u6890:
  8543  002A36  501C               	movf	___llmod@divisor,w,c
  8544  002A38  5C18               	subwf	___llmod@dividend,w,c
  8545  002A3A  501D               	movf	___llmod@divisor+1,w,c
  8546  002A3C  5819               	subwfb	___llmod@dividend+1,w,c
  8547  002A3E  501E               	movf	___llmod@divisor+2,w,c
  8548  002A40  581A               	subwfb	___llmod@dividend+2,w,c
  8549  002A42  501F               	movf	___llmod@divisor+3,w,c
  8550  002A44  581B               	subwfb	___llmod@dividend+3,w,c
  8551  002A46  A0D8               	btfss	status,0,c
  8552  002A48  D008               	goto	l1810
  8553  002A4A  501C               	movf	___llmod@divisor,w,c
  8554  002A4C  5E18               	subwf	___llmod@dividend,f,c
  8555  002A4E  501D               	movf	___llmod@divisor+1,w,c
  8556  002A50  5A19               	subwfb	___llmod@dividend+1,f,c
  8557  002A52  501E               	movf	___llmod@divisor+2,w,c
  8558  002A54  5A1A               	subwfb	___llmod@dividend+2,f,c
  8559  002A56  501F               	movf	___llmod@divisor+3,w,c
  8560  002A58  5A1B               	subwfb	___llmod@dividend+3,f,c
  8561  002A5A                     l1810:
  8562  002A5A  90D8               	bcf	status,0,c
  8563  002A5C  321F               	rrcf	___llmod@divisor+3,f,c
  8564  002A5E  321E               	rrcf	___llmod@divisor+2,f,c
  8565  002A60  321D               	rrcf	___llmod@divisor+1,f,c
  8566  002A62  321C               	rrcf	___llmod@divisor,f,c
  8567  002A64  2E20               	decfsz	___llmod@counter,f,c
  8568  002A66  D7E7               	goto	u6890
  8569  002A68                     l1811:
  8570  002A68  C018  F018         	movff	___llmod@dividend,?___llmod
  8571  002A6C  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
  8572  002A70  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
  8573  002A74  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
  8574  002A78  0012               	return		;funcret
  8575  002A7A                     __end_of___llmod:
  8576                           	opt stack 0
  8577                           tosu	equ	0xFFF
  8578                           tosh	equ	0xFFE
  8579                           tosl	equ	0xFFD
  8580                           pclath	equ	0xFFA
  8581                           tblptru	equ	0xFF8
  8582                           tblptrh	equ	0xFF7
  8583                           tblptrl	equ	0xFF6
  8584                           tablat	equ	0xFF5
  8585                           prodh	equ	0xFF4
  8586                           prodl	equ	0xFF3
  8587                           intcon	equ	0xFF2
  8588                           intcon2	equ	0xFF1
  8589                           postinc0	equ	0xFEE
  8590                           wreg	equ	0xFE8
  8591                           indf1	equ	0xFE7
  8592                           postdec1	equ	0xFE5
  8593                           fsr1h	equ	0xFE2
  8594                           fsr1l	equ	0xFE1
  8595                           indf2	equ	0xFDF
  8596                           postinc2	equ	0xFDE
  8597                           postdec2	equ	0xFDD
  8598                           fsr2h	equ	0xFDA
  8599                           fsr2l	equ	0xFD9
  8600                           status	equ	0xFD8
  8601                           
  8602 ;; *************** function _SendSystemStartAck *****************
  8603 ;; Defined at:
  8604 ;;		line 117 in file "SystemCommon.c"
  8605 ;; Parameters:    Size  Location     Type
  8606 ;;		None
  8607 ;; Auto vars:     Size  Location     Type
  8608 ;;		None
  8609 ;; Return value:  Size  Location     Type
  8610 ;;                  1    wreg      void 
  8611 ;; Registers used:
  8612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8613 ;; Tracked objects:
  8614 ;;		On entry : 0/0
  8615 ;;		On exit  : 0/0
  8616 ;;		Unchanged: 0/0
  8617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8618 ;;      Params:         0       0       0       0       0       0       0
  8619 ;;      Locals:         0       0       0       0       0       0       0
  8620 ;;      Temps:          0       0       0       0       0       0       0
  8621 ;;      Totals:         0       0       0       0       0       0       0
  8622 ;;Total ram usage:        0 bytes
  8623 ;; Hardware stack levels used:    1
  8624 ;; Hardware stack levels required when called:    6
  8625 ;; This function calls:
  8626 ;;		_SendAckMessage
  8627 ;; This function is called by:
  8628 ;;		_main
  8629 ;; This function uses a non-reentrant model
  8630 ;;
  8631                           
  8632                           	psect	text56
  8633  0038DE                     __ptext56:
  8634                           	opt stack 0
  8635  0038DE                     _SendSystemStartAck:
  8636                           	opt stack 24
  8637                           
  8638                           ;SystemCommon.c: 119: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_SYSTE
      +                          M_START);
  8639                           
  8640                           ;incstack = 0
  8641  0038DE  0E10               	movlw	16
  8642  0038E0  6E24               	movwf	SendAckMessage@inRequest,c
  8643  0038E2  0E01               	movlw	1
  8644  0038E4  EC84  F017         	call	_SendAckMessage
  8645  0038E8  0012               	return		;funcret
  8646  0038EA                     __end_of_SendSystemStartAck:
  8647                           	opt stack 0
  8648                           tosu	equ	0xFFF
  8649                           tosh	equ	0xFFE
  8650                           tosl	equ	0xFFD
  8651                           pclath	equ	0xFFA
  8652                           tblptru	equ	0xFF8
  8653                           tblptrh	equ	0xFF7
  8654                           tblptrl	equ	0xFF6
  8655                           tablat	equ	0xFF5
  8656                           prodh	equ	0xFF4
  8657                           prodl	equ	0xFF3
  8658                           intcon	equ	0xFF2
  8659                           intcon2	equ	0xFF1
  8660                           postinc0	equ	0xFEE
  8661                           wreg	equ	0xFE8
  8662                           indf1	equ	0xFE7
  8663                           postdec1	equ	0xFE5
  8664                           fsr1h	equ	0xFE2
  8665                           fsr1l	equ	0xFE1
  8666                           indf2	equ	0xFDF
  8667                           postinc2	equ	0xFDE
  8668                           postdec2	equ	0xFDD
  8669                           fsr2h	equ	0xFDA
  8670                           fsr2l	equ	0xFD9
  8671                           status	equ	0xFD8
  8672                           
  8673 ;; *************** function _SendAckMessage *****************
  8674 ;; Defined at:
  8675 ;;		line 171 in file "EusartApp.c"
  8676 ;; Parameters:    Size  Location     Type
  8677 ;;  inGroup         1    wreg     enum E7163
  8678 ;;  inRequest       1   35[COMRAM] enum E7171
  8679 ;; Auto vars:     Size  Location     Type
  8680 ;;  inGroup         1   36[COMRAM] enum E7163
  8681 ;;  TxMsg           6   37[COMRAM] unsigned char [6]
  8682 ;; Return value:  Size  Location     Type
  8683 ;;                  1    wreg      void 
  8684 ;; Registers used:
  8685 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8686 ;; Tracked objects:
  8687 ;;		On entry : 0/0
  8688 ;;		On exit  : 0/0
  8689 ;;		Unchanged: 0/0
  8690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8691 ;;      Params:         1       0       0       0       0       0       0
  8692 ;;      Locals:         7       0       0       0       0       0       0
  8693 ;;      Temps:          0       0       0       0       0       0       0
  8694 ;;      Totals:         8       0       0       0       0       0       0
  8695 ;;Total ram usage:        8 bytes
  8696 ;; Hardware stack levels used:    1
  8697 ;; Hardware stack levels required when called:    5
  8698 ;; This function calls:
  8699 ;;		_WriteUartMessage
  8700 ;;		_ZeroArray
  8701 ;;		_crc8
  8702 ;; This function is called by:
  8703 ;;		_testLeds
  8704 ;;		_SetAdcOperationMode
  8705 ;;		_SetConversionResultFormat
  8706 ;;		_SetChannelMode
  8707 ;;		_FlashReadUart
  8708 ;;		_FlashEreaseMem
  8709 ;;		_DacSetValue
  8710 ;;		_UpdateRxFreq
  8711 ;;		_ResetMcu
  8712 ;;		_ResetCpld
  8713 ;;		_SendSystemStartAck
  8714 ;;		_SetMcuFwVersion
  8715 ;;		_SetCpldFwVersion
  8716 ;;		_keepAliveSignalUart
  8717 ;; This function uses a non-reentrant model
  8718 ;;
  8719                           
  8720                           	psect	text57
  8721  002F08                     __ptext57:
  8722                           	opt stack 0
  8723  002F08                     _SendAckMessage:
  8724                           	opt stack 22
  8725                           
  8726                           ;incstack = 0
  8727                           ;SendAckMessage@inGroup stored from wreg
  8728  002F08  6E25               	movwf	SendAckMessage@inGroup,c
  8729                           
  8730                           ;EusartApp.c: 174: char TxMsg[(0x5) + 1];
  8731                           ;EusartApp.c: 175: ZeroArray(TxMsg, (0x5) + 1);
  8732  002F0A  0E26               	movlw	low SendAckMessage@TxMsg
  8733  002F0C  6E20               	movwf	ZeroArray@array,c
  8734  002F0E  0E00               	movlw	high SendAckMessage@TxMsg
  8735  002F10  6E21               	movwf	ZeroArray@array+1,c
  8736  002F12  0E00               	movlw	0
  8737  002F14  6E23               	movwf	ZeroArray@size+1,c
  8738  002F16  0E06               	movlw	6
  8739  002F18  6E22               	movwf	ZeroArray@size,c
  8740  002F1A  ECA8  F01B         	call	_ZeroArray	;wreg free
  8741                           
  8742                           ;EusartApp.c: 178: TxMsg[(0)] = (0x24);
  8743  002F1E  0E24               	movlw	36
  8744  002F20  6E26               	movwf	SendAckMessage@TxMsg,c
  8745                           
  8746                           ;EusartApp.c: 179: TxMsg[(1)] = inGroup;
  8747  002F22  C025  F027         	movff	SendAckMessage@inGroup,SendAckMessage@TxMsg+1
  8748                           
  8749                           ;EusartApp.c: 180: TxMsg[(2)] = inRequest;
  8750  002F26  C024  F028         	movff	SendAckMessage@inRequest,SendAckMessage@TxMsg+2
  8751                           
  8752                           ;EusartApp.c: 181: TxMsg[(3)] = 0;
  8753  002F2A  0E00               	movlw	0
  8754  002F2C  6E29               	movwf	SendAckMessage@TxMsg+3,c
  8755                           
  8756                           ;EusartApp.c: 183: TxMsg[(0x5)] = crc8(TxMsg, (0x5));
  8757  002F2E  0E26               	movlw	low SendAckMessage@TxMsg
  8758  002F30  6E18               	movwf	crc8@dataArray,c
  8759  002F32  0E00               	movlw	high SendAckMessage@TxMsg
  8760  002F34  6E19               	movwf	crc8@dataArray+1,c
  8761  002F36  0E00               	movlw	0
  8762  002F38  6E1B               	movwf	crc8@dataSize+1,c
  8763  002F3A  0E05               	movlw	5
  8764  002F3C  6E1A               	movwf	crc8@dataSize,c
  8765  002F3E  ECAD  F017         	call	_crc8	;wreg free
  8766  002F42  6E2B               	movwf	SendAckMessage@TxMsg+5,c
  8767                           
  8768                           ;EusartApp.c: 185: WriteUartMessage(TxMsg, (0x5) + 1);
  8769  002F44  0E26               	movlw	low SendAckMessage@TxMsg
  8770  002F46  6E19               	movwf	WriteUartMessage@dataBuf,c
  8771  002F48  0E00               	movlw	high SendAckMessage@TxMsg
  8772  002F4A  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  8773  002F4C  0E00               	movlw	0
  8774  002F4E  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  8775  002F50  0E06               	movlw	6
  8776  002F52  6E1B               	movwf	WriteUartMessage@dataSize,c
  8777  002F54  EC22  F01A         	call	_WriteUartMessage	;wreg free
  8778  002F58  0012               	return		;funcret
  8779  002F5A                     __end_of_SendAckMessage:
  8780                           	opt stack 0
  8781                           tosu	equ	0xFFF
  8782                           tosh	equ	0xFFE
  8783                           tosl	equ	0xFFD
  8784                           pclath	equ	0xFFA
  8785                           tblptru	equ	0xFF8
  8786                           tblptrh	equ	0xFF7
  8787                           tblptrl	equ	0xFF6
  8788                           tablat	equ	0xFF5
  8789                           prodh	equ	0xFF4
  8790                           prodl	equ	0xFF3
  8791                           intcon	equ	0xFF2
  8792                           intcon2	equ	0xFF1
  8793                           postinc0	equ	0xFEE
  8794                           wreg	equ	0xFE8
  8795                           indf1	equ	0xFE7
  8796                           postdec1	equ	0xFE5
  8797                           fsr1h	equ	0xFE2
  8798                           fsr1l	equ	0xFE1
  8799                           indf2	equ	0xFDF
  8800                           postinc2	equ	0xFDE
  8801                           postdec2	equ	0xFDD
  8802                           fsr2h	equ	0xFDA
  8803                           fsr2l	equ	0xFD9
  8804                           status	equ	0xFD8
  8805                           
  8806 ;; *************** function _crc8 *****************
  8807 ;; Defined at:
  8808 ;;		line 13 in file "SystemCommon.c"
  8809 ;; Parameters:    Size  Location     Type
  8810 ;;  dataArray       2   23[COMRAM] PTR unsigned char 
  8811 ;;		 -> GetMcuRunTime@TxMsg(9), GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), FlashReadCondition@TxMsg(9), 
  8812 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
  8813 ;;  dataSize        2   25[COMRAM] int 
  8814 ;; Auto vars:     Size  Location     Type
  8815 ;;  i               2   30[COMRAM] int 
  8816 ;;  crc             2   28[COMRAM] int 
  8817 ;; Return value:  Size  Location     Type
  8818 ;;                  1    wreg      unsigned char 
  8819 ;; Registers used:
  8820 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8821 ;; Tracked objects:
  8822 ;;		On entry : 0/0
  8823 ;;		On exit  : 0/0
  8824 ;;		Unchanged: 0/0
  8825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8826 ;;      Params:         4       0       0       0       0       0       0
  8827 ;;      Locals:         4       0       0       0       0       0       0
  8828 ;;      Temps:          1       0       0       0       0       0       0
  8829 ;;      Totals:         9       0       0       0       0       0       0
  8830 ;;Total ram usage:        9 bytes
  8831 ;; Hardware stack levels used:    1
  8832 ;; Hardware stack levels required when called:    3
  8833 ;; This function calls:
  8834 ;;		Nothing
  8835 ;; This function is called by:
  8836 ;;		_readUartMessage
  8837 ;;		_SendAckMessage
  8838 ;;		_FlashReadUart
  8839 ;;		_FlashReadCondition
  8840 ;;		_GetMcuFwVersion
  8841 ;;		_GetCpldFwVersion
  8842 ;;		_GetMcuRunTime
  8843 ;; This function uses a non-reentrant model
  8844 ;;
  8845                           
  8846                           	psect	text58
  8847  002F5A                     __ptext58:
  8848                           	opt stack 0
  8849  002F5A                     _crc8:
  8850                           	opt stack 26
  8851                           
  8852                           ;SystemCommon.c: 15: int crc = 0;
  8853                           
  8854                           ;incstack = 0
  8855  002F5A  0E00               	movlw	0
  8856  002F5C  6E1E               	movwf	crc8@crc+1,c
  8857  002F5E  0E00               	movlw	0
  8858  002F60  6E1D               	movwf	crc8@crc,c
  8859                           
  8860                           ;SystemCommon.c: 16: for (int i = 0; i < dataSize; i++)
  8861  002F62  0E00               	movlw	0
  8862  002F64  6E20               	movwf	crc8@i+1,c
  8863  002F66  0E00               	movlw	0
  8864  002F68  6E1F               	movwf	crc8@i,c
  8865  002F6A  D00E               	goto	l1259
  8866  002F6C                     
  8867                           ;SystemCommon.c: 17: {
  8868                           ;SystemCommon.c: 18: crc += dataArray[i];
  8869  002F6C  501F               	movf	crc8@i,w,c
  8870  002F6E  2418               	addwf	crc8@dataArray,w,c
  8871  002F70  6ED9               	movwf	fsr2l,c
  8872  002F72  5020               	movf	crc8@i+1,w,c
  8873  002F74  2019               	addwfc	crc8@dataArray+1,w,c
  8874  002F76  6EDA               	movwf	fsr2h,c
  8875  002F78  50DF               	movf	indf2,w,c
  8876  002F7A  6E1C               	movwf	??_crc8& (0+255),c
  8877  002F7C  501C               	movf	??_crc8,w,c
  8878  002F7E  261D               	addwf	crc8@crc,f,c
  8879  002F80  0E00               	movlw	0
  8880  002F82  221E               	addwfc	crc8@crc+1,f,c
  8881  002F84  4A1F               	infsnz	crc8@i,f,c
  8882  002F86  2A20               	incf	crc8@i+1,f,c
  8883  002F88                     l1259:
  8884  002F88  501A               	movf	crc8@dataSize,w,c
  8885  002F8A  5C1F               	subwf	crc8@i,w,c
  8886  002F8C  5020               	movf	crc8@i+1,w,c
  8887  002F8E  0A80               	xorlw	128
  8888  002F90  6E1C               	movwf	??_crc8& (0+255),c
  8889  002F92  501B               	movf	crc8@dataSize+1,w,c
  8890  002F94  0A80               	xorlw	128
  8891  002F96  581C               	subwfb	??_crc8& (0+255),w,c
  8892  002F98  A0D8               	btfss	status,0,c
  8893  002F9A  D7E8               	goto	l1260
  8894                           
  8895                           ;SystemCommon.c: 19: }
  8896                           ;SystemCommon.c: 20: crc &= 0xff;
  8897  002F9C  0EFF               	movlw	255
  8898  002F9E  161D               	andwf	crc8@crc,f,c
  8899  002FA0  0E00               	movlw	0
  8900  002FA2  161E               	andwf	crc8@crc+1,f,c
  8901                           
  8902                           ;SystemCommon.c: 21: return crc;
  8903  002FA4  501D               	movf	crc8@crc,w,c
  8904  002FA6  0012               	return	
  8905  002FA8                     __end_of_crc8:
  8906                           	opt stack 0
  8907                           tosu	equ	0xFFF
  8908                           tosh	equ	0xFFE
  8909                           tosl	equ	0xFFD
  8910                           pclath	equ	0xFFA
  8911                           tblptru	equ	0xFF8
  8912                           tblptrh	equ	0xFF7
  8913                           tblptrl	equ	0xFF6
  8914                           tablat	equ	0xFF5
  8915                           prodh	equ	0xFF4
  8916                           prodl	equ	0xFF3
  8917                           intcon	equ	0xFF2
  8918                           intcon2	equ	0xFF1
  8919                           postinc0	equ	0xFEE
  8920                           wreg	equ	0xFE8
  8921                           indf1	equ	0xFE7
  8922                           postdec1	equ	0xFE5
  8923                           fsr1h	equ	0xFE2
  8924                           fsr1l	equ	0xFE1
  8925                           indf2	equ	0xFDF
  8926                           postinc2	equ	0xFDE
  8927                           postdec2	equ	0xFDD
  8928                           fsr2h	equ	0xFDA
  8929                           fsr2l	equ	0xFD9
  8930                           status	equ	0xFD8
  8931                           
  8932 ;; *************** function _ZeroArray *****************
  8933 ;; Defined at:
  8934 ;;		line 24 in file "SystemCommon.c"
  8935 ;; Parameters:    Size  Location     Type
  8936 ;;  array           2   31[COMRAM] PTR unsigned char 
  8937 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(9), FlashReadCondition@TxMsg(
      +9), 
  8938 ;;		 -> FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), 
  8939 ;;		 -> rxMsgQueue(20), 
  8940 ;;  size            2   33[COMRAM] int 
  8941 ;; Auto vars:     Size  Location     Type
  8942 ;;		None
  8943 ;; Return value:  Size  Location     Type
  8944 ;;                  1    wreg      void 
  8945 ;; Registers used:
  8946 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8947 ;; Tracked objects:
  8948 ;;		On entry : 0/0
  8949 ;;		On exit  : 0/0
  8950 ;;		Unchanged: 0/0
  8951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8952 ;;      Params:         4       0       0       0       0       0       0
  8953 ;;      Locals:         0       0       0       0       0       0       0
  8954 ;;      Temps:          0       0       0       0       0       0       0
  8955 ;;      Totals:         4       0       0       0       0       0       0
  8956 ;;Total ram usage:        4 bytes
  8957 ;; Hardware stack levels used:    1
  8958 ;; Hardware stack levels required when called:    4
  8959 ;; This function calls:
  8960 ;;		_memset
  8961 ;; This function is called by:
  8962 ;;		_readUartMessage
  8963 ;;		_InitRxMessageParams
  8964 ;;		_SendAckMessage
  8965 ;;		_FlashReadUart
  8966 ;;		_FlashEreaseMem
  8967 ;;		_FlashReadCondition
  8968 ;;		_GetIntFromUartData
  8969 ;;		_GetMcuFwVersion
  8970 ;;		_GetCpldFwVersion
  8971 ;; This function uses a non-reentrant model
  8972 ;;
  8973                           
  8974                           	psect	text59
  8975  003750                     __ptext59:
  8976                           	opt stack 0
  8977  003750                     _ZeroArray:
  8978                           	opt stack 25
  8979                           
  8980                           ;SystemCommon.c: 26: memset(array, 0x0, size);
  8981                           
  8982                           ;incstack = 0
  8983  003750  C020  F018         	movff	ZeroArray@array,memset@p1
  8984  003754  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
  8985  003758  0E00               	movlw	0
  8986  00375A  6E1B               	movwf	memset@c+1,c
  8987  00375C  0E00               	movlw	0
  8988  00375E  6E1A               	movwf	memset@c,c
  8989  003760  C022  F01C         	movff	ZeroArray@size,memset@n
  8990  003764  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
  8991  003768  ECB8  F01A         	call	_memset	;wreg free
  8992  00376C  0012               	return		;funcret
  8993  00376E                     __end_of_ZeroArray:
  8994                           	opt stack 0
  8995                           tosu	equ	0xFFF
  8996                           tosh	equ	0xFFE
  8997                           tosl	equ	0xFFD
  8998                           pclath	equ	0xFFA
  8999                           tblptru	equ	0xFF8
  9000                           tblptrh	equ	0xFF7
  9001                           tblptrl	equ	0xFF6
  9002                           tablat	equ	0xFF5
  9003                           prodh	equ	0xFF4
  9004                           prodl	equ	0xFF3
  9005                           intcon	equ	0xFF2
  9006                           intcon2	equ	0xFF1
  9007                           postinc0	equ	0xFEE
  9008                           wreg	equ	0xFE8
  9009                           indf1	equ	0xFE7
  9010                           postdec1	equ	0xFE5
  9011                           fsr1h	equ	0xFE2
  9012                           fsr1l	equ	0xFE1
  9013                           indf2	equ	0xFDF
  9014                           postinc2	equ	0xFDE
  9015                           postdec2	equ	0xFDD
  9016                           fsr2h	equ	0xFDA
  9017                           fsr2l	equ	0xFD9
  9018                           status	equ	0xFD8
  9019                           
  9020 ;; *************** function _WriteUartMessage *****************
  9021 ;; Defined at:
  9022 ;;		line 158 in file "EusartApp.c"
  9023 ;; Parameters:    Size  Location     Type
  9024 ;;  dataBuf         2   24[COMRAM] PTR unsigned char 
  9025 ;;		 -> GetMcuRunTime@TxMsg(9), GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), FlashReadCondition@TxMsg(9), 
  9026 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), 
  9027 ;;  dataSize        2   26[COMRAM] int 
  9028 ;; Auto vars:     Size  Location     Type
  9029 ;;  idx             2   29[COMRAM] int 
  9030 ;; Return value:  Size  Location     Type
  9031 ;;                  1    wreg      void 
  9032 ;; Registers used:
  9033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9034 ;; Tracked objects:
  9035 ;;		On entry : 0/0
  9036 ;;		On exit  : 0/0
  9037 ;;		Unchanged: 0/0
  9038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9039 ;;      Params:         4       0       0       0       0       0       0
  9040 ;;      Locals:         2       0       0       0       0       0       0
  9041 ;;      Temps:          1       0       0       0       0       0       0
  9042 ;;      Totals:         7       0       0       0       0       0       0
  9043 ;;Total ram usage:        7 bytes
  9044 ;; Hardware stack levels used:    1
  9045 ;; Hardware stack levels required when called:    4
  9046 ;; This function calls:
  9047 ;;		_EUSART1_Write
  9048 ;; This function is called by:
  9049 ;;		_SendAckMessage
  9050 ;;		_FlashReadUart
  9051 ;;		_FlashReadCondition
  9052 ;;		_GetMcuFwVersion
  9053 ;;		_GetCpldFwVersion
  9054 ;;		_GetMcuRunTime
  9055 ;; This function uses a non-reentrant model
  9056 ;;
  9057                           
  9058                           	psect	text60
  9059  003444                     __ptext60:
  9060                           	opt stack 0
  9061  003444                     _WriteUartMessage:
  9062                           	opt stack 22
  9063                           
  9064                           ;EusartApp.c: 160: for(int idx = 0; idx < dataSize; idx++)
  9065                           
  9066                           ;incstack = 0
  9067  003444  0E00               	movlw	0
  9068  003446  6E1F               	movwf	WriteUartMessage@idx+1,c
  9069  003448  0E00               	movlw	0
  9070  00344A  6E1E               	movwf	WriteUartMessage@idx,c
  9071  00344C  D00B               	goto	l210
  9072  00344E                     
  9073                           ;EusartApp.c: 161: {
  9074                           ;EusartApp.c: 162: EUSART1_Write(dataBuf[idx]);
  9075  00344E  501E               	movf	WriteUartMessage@idx,w,c
  9076  003450  2419               	addwf	WriteUartMessage@dataBuf,w,c
  9077  003452  6ED9               	movwf	fsr2l,c
  9078  003454  501F               	movf	WriteUartMessage@idx+1,w,c
  9079  003456  201A               	addwfc	WriteUartMessage@dataBuf+1,w,c
  9080  003458  6EDA               	movwf	fsr2h,c
  9081  00345A  50DF               	movf	indf2,w,c
  9082  00345C  EC24  F019         	call	_EUSART1_Write
  9083  003460  4A1E               	infsnz	WriteUartMessage@idx,f,c
  9084  003462  2A1F               	incf	WriteUartMessage@idx+1,f,c
  9085  003464                     l210:
  9086  003464  501B               	movf	WriteUartMessage@dataSize,w,c
  9087  003466  5C1E               	subwf	WriteUartMessage@idx,w,c
  9088  003468  501F               	movf	WriteUartMessage@idx+1,w,c
  9089  00346A  0A80               	xorlw	128
  9090  00346C  6E1D               	movwf	??_WriteUartMessage& (0+255),c
  9091  00346E  501C               	movf	WriteUartMessage@dataSize+1,w,c
  9092  003470  0A80               	xorlw	128
  9093  003472  581D               	subwfb	??_WriteUartMessage& (0+255),w,c
  9094  003474  B0D8               	btfsc	status,0,c
  9095  003476  0012               	return	
  9096  003478  D7EA               	goto	l211
  9097  00347A                     __end_of_WriteUartMessage:
  9098                           	opt stack 0
  9099                           tosu	equ	0xFFF
  9100                           tosh	equ	0xFFE
  9101                           tosl	equ	0xFFD
  9102                           pclath	equ	0xFFA
  9103                           tblptru	equ	0xFF8
  9104                           tblptrh	equ	0xFF7
  9105                           tblptrl	equ	0xFF6
  9106                           tablat	equ	0xFF5
  9107                           prodh	equ	0xFF4
  9108                           prodl	equ	0xFF3
  9109                           intcon	equ	0xFF2
  9110                           intcon2	equ	0xFF1
  9111                           postinc0	equ	0xFEE
  9112                           wreg	equ	0xFE8
  9113                           indf1	equ	0xFE7
  9114                           postdec1	equ	0xFE5
  9115                           fsr1h	equ	0xFE2
  9116                           fsr1l	equ	0xFE1
  9117                           indf2	equ	0xFDF
  9118                           postinc2	equ	0xFDE
  9119                           postdec2	equ	0xFDD
  9120                           fsr2h	equ	0xFDA
  9121                           fsr2l	equ	0xFD9
  9122                           status	equ	0xFD8
  9123                           
  9124 ;; *************** function _EUSART1_Write *****************
  9125 ;; Defined at:
  9126 ;;		line 157 in file "mcc_generated_files/eusart1.c"
  9127 ;; Parameters:    Size  Location     Type
  9128 ;;  txData          1    wreg     unsigned char 
  9129 ;; Auto vars:     Size  Location     Type
  9130 ;;  txData          1   23[COMRAM] unsigned char 
  9131 ;; Return value:  Size  Location     Type
  9132 ;;                  1    wreg      void 
  9133 ;; Registers used:
  9134 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9135 ;; Tracked objects:
  9136 ;;		On entry : 0/0
  9137 ;;		On exit  : 0/0
  9138 ;;		Unchanged: 0/0
  9139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9140 ;;      Params:         0       0       0       0       0       0       0
  9141 ;;      Locals:         1       0       0       0       0       0       0
  9142 ;;      Temps:          0       0       0       0       0       0       0
  9143 ;;      Totals:         1       0       0       0       0       0       0
  9144 ;;Total ram usage:        1 bytes
  9145 ;; Hardware stack levels used:    1
  9146 ;; Hardware stack levels required when called:    3
  9147 ;; This function calls:
  9148 ;;		Nothing
  9149 ;; This function is called by:
  9150 ;;		_WriteUartMessage
  9151 ;; This function uses a non-reentrant model
  9152 ;;
  9153                           
  9154                           	psect	text61
  9155  003248                     __ptext61:
  9156                           	opt stack 0
  9157  003248                     _EUSART1_Write:
  9158                           	opt stack 22
  9159                           
  9160                           ;incstack = 0
  9161                           ;EUSART1_Write@txData stored from wreg
  9162  003248  6E18               	movwf	EUSART1_Write@txData,c
  9163  00324A                     
  9164                           ;eusart1.c: 160: {
  9165                           
  9166                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
  9167  00324A  0100               	movlb	0	; () banked
  9168  00324C  51FF               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
  9169  00324E  B4D8               	btfsc	status,2,c
  9170  003250  D7FC               	goto	l6520
  9171                           
  9172                           ; BSR set to: 0
  9173                           ;eusart1.c: 161: }
  9174                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
  9175  003252  B89D               	btfsc	3997,4,c	;volatile
  9176  003254  D003               	goto	l845
  9177                           
  9178                           ; BSR set to: 0
  9179                           ;eusart1.c: 164: {
  9180                           ;eusart1.c: 165: TXREG1 = txData;
  9181  003256  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  9182                           
  9183                           ;eusart1.c: 166: }
  9184  00325A  D012               	goto	l846
  9185  00325C                     l845:
  9186                           
  9187                           ; BSR set to: 0
  9188                           ;eusart1.c: 167: else
  9189                           ;eusart1.c: 168: {
  9190                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
  9191  00325C  989D               	bcf	3997,4,c	;volatile
  9192                           
  9193                           ; BSR set to: 0
  9194                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
  9195  00325E  503A               	movf	_eusart1TxHead,w,c	;volatile
  9196  003260  0D01               	mullw	1
  9197  003262  0E00               	movlw	low _eusart1TxBuffer
  9198  003264  24F3               	addwf	prodl,w,c
  9199  003266  6ED9               	movwf	fsr2l,c
  9200  003268  0E01               	movlw	high _eusart1TxBuffer
  9201  00326A  20F4               	addwfc	prodh,w,c
  9202  00326C  6EDA               	movwf	fsr2h,c
  9203  00326E  C018  FFDF         	movff	EUSART1_Write@txData,indf2
  9204                           
  9205                           ; BSR set to: 0
  9206  003272  2A3A               	incf	_eusart1TxHead,f,c	;volatile
  9207                           
  9208                           ; BSR set to: 0
  9209                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  9210  003274  0E45               	movlw	69
  9211  003276  643A               	cpfsgt	_eusart1TxHead,c	;volatile
  9212  003278  D002               	goto	l847
  9213                           
  9214                           ; BSR set to: 0
  9215                           ;eusart1.c: 172: {
  9216                           ;eusart1.c: 173: eusart1TxHead = 0;
  9217  00327A  0E00               	movlw	0
  9218  00327C  6E3A               	movwf	_eusart1TxHead,c	;volatile
  9219  00327E                     l847:
  9220                           
  9221                           ; BSR set to: 0
  9222                           ;eusart1.c: 174: }
  9223                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
  9224                           
  9225                           ; BSR set to: 0
  9226  00327E  07FF               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
  9227  003280                     l846:
  9228                           
  9229                           ; BSR set to: 0
  9230                           ;eusart1.c: 176: }
  9231                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
  9232                           
  9233                           ; BSR set to: 0
  9234  003280  889D               	bsf	3997,4,c	;volatile
  9235                           
  9236                           ; BSR set to: 0
  9237  003282  0012               	return		;funcret
  9238  003284                     __end_of_EUSART1_Write:
  9239                           	opt stack 0
  9240                           tosu	equ	0xFFF
  9241                           tosh	equ	0xFFE
  9242                           tosl	equ	0xFFD
  9243                           pclath	equ	0xFFA
  9244                           tblptru	equ	0xFF8
  9245                           tblptrh	equ	0xFF7
  9246                           tblptrl	equ	0xFF6
  9247                           tablat	equ	0xFF5
  9248                           prodh	equ	0xFF4
  9249                           prodl	equ	0xFF3
  9250                           intcon	equ	0xFF2
  9251                           intcon2	equ	0xFF1
  9252                           postinc0	equ	0xFEE
  9253                           wreg	equ	0xFE8
  9254                           indf1	equ	0xFE7
  9255                           postdec1	equ	0xFE5
  9256                           fsr1h	equ	0xFE2
  9257                           fsr1l	equ	0xFE1
  9258                           indf2	equ	0xFDF
  9259                           postinc2	equ	0xFDE
  9260                           postdec2	equ	0xFDD
  9261                           fsr2h	equ	0xFDA
  9262                           fsr2l	equ	0xFD9
  9263                           status	equ	0xFD8
  9264                           
  9265 ;; *************** function _InitSystemApplicationManagers *****************
  9266 ;; Defined at:
  9267 ;;		line 33 in file "SystemSettings.c"
  9268 ;; Parameters:    Size  Location     Type
  9269 ;;		None
  9270 ;; Auto vars:     Size  Location     Type
  9271 ;;		None
  9272 ;; Return value:  Size  Location     Type
  9273 ;;                  1    wreg      void 
  9274 ;; Registers used:
  9275 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9276 ;; Tracked objects:
  9277 ;;		On entry : 0/0
  9278 ;;		On exit  : 0/0
  9279 ;;		Unchanged: 0/0
  9280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9281 ;;      Params:         0       0       0       0       0       0       0
  9282 ;;      Locals:         0       0       0       0       0       0       0
  9283 ;;      Temps:          0       0       0       0       0       0       0
  9284 ;;      Totals:         0       0       0       0       0       0       0
  9285 ;;Total ram usage:        0 bytes
  9286 ;; Hardware stack levels used:    1
  9287 ;; Hardware stack levels required when called:    8
  9288 ;; This function calls:
  9289 ;;		_ClearMcuRunTime
  9290 ;;		_DacInit
  9291 ;;		_InitAdcApplicationMgr
  9292 ;;		_InitSevenSegment
  9293 ;;		_PLLInitialize
  9294 ;;		_TMR0_StartTimer
  9295 ;; This function is called by:
  9296 ;;		_main
  9297 ;; This function uses a non-reentrant model
  9298 ;;
  9299                           
  9300                           	psect	text62
  9301  0037C2                     __ptext62:
  9302                           	opt stack 0
  9303  0037C2                     _InitSystemApplicationManagers:
  9304                           	opt stack 22
  9305                           
  9306                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
  9307                           
  9308                           ; BSR set to: 0
  9309                           ;incstack = 0
  9310  0037C2  EC49  F01C         	call	_InitAdcApplicationMgr	;wreg free
  9311                           
  9312                           ;SystemSettings.c: 39: TMR0_StartTimer();
  9313  0037C6  EC88  F01C         	call	_TMR0_StartTimer	;wreg free
  9314                           
  9315                           ;SystemSettings.c: 42: InitSevenSegment();
  9316  0037CA  EC30  F01B         	call	_InitSevenSegment	;wreg free
  9317                           
  9318                           ;SystemSettings.c: 45: PLLInitialize();
  9319  0037CE  EC36  F005         	call	_PLLInitialize	;wreg free
  9320                           
  9321                           ;SystemSettings.c: 48: ClearMcuRunTime();
  9322  0037D2  EC19  F01C         	call	_ClearMcuRunTime	;wreg free
  9323                           
  9324                           ;SystemSettings.c: 51: DacInit();
  9325  0037D6  ECD5  F014         	call	_DacInit	;wreg free
  9326  0037DA  0012               	return		;funcret
  9327  0037DC                     __end_of_InitSystemApplicationManagers:
  9328                           	opt stack 0
  9329                           tosu	equ	0xFFF
  9330                           tosh	equ	0xFFE
  9331                           tosl	equ	0xFFD
  9332                           pclath	equ	0xFFA
  9333                           tblptru	equ	0xFF8
  9334                           tblptrh	equ	0xFF7
  9335                           tblptrl	equ	0xFF6
  9336                           tablat	equ	0xFF5
  9337                           prodh	equ	0xFF4
  9338                           prodl	equ	0xFF3
  9339                           intcon	equ	0xFF2
  9340                           intcon2	equ	0xFF1
  9341                           postinc0	equ	0xFEE
  9342                           wreg	equ	0xFE8
  9343                           indf1	equ	0xFE7
  9344                           postdec1	equ	0xFE5
  9345                           fsr1h	equ	0xFE2
  9346                           fsr1l	equ	0xFE1
  9347                           indf2	equ	0xFDF
  9348                           postinc2	equ	0xFDE
  9349                           postdec2	equ	0xFDD
  9350                           fsr2h	equ	0xFDA
  9351                           fsr2l	equ	0xFD9
  9352                           status	equ	0xFD8
  9353                           
  9354 ;; *************** function _TMR0_StartTimer *****************
  9355 ;; Defined at:
  9356 ;;		line 93 in file "mcc_generated_files/tmr0.c"
  9357 ;; Parameters:    Size  Location     Type
  9358 ;;		None
  9359 ;; Auto vars:     Size  Location     Type
  9360 ;;		None
  9361 ;; Return value:  Size  Location     Type
  9362 ;;                  1    wreg      void 
  9363 ;; Registers used:
  9364 ;;		None
  9365 ;; Tracked objects:
  9366 ;;		On entry : 0/0
  9367 ;;		On exit  : 0/0
  9368 ;;		Unchanged: 0/0
  9369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9370 ;;      Params:         0       0       0       0       0       0       0
  9371 ;;      Locals:         0       0       0       0       0       0       0
  9372 ;;      Temps:          0       0       0       0       0       0       0
  9373 ;;      Totals:         0       0       0       0       0       0       0
  9374 ;;Total ram usage:        0 bytes
  9375 ;; Hardware stack levels used:    1
  9376 ;; Hardware stack levels required when called:    3
  9377 ;; This function calls:
  9378 ;;		Nothing
  9379 ;; This function is called by:
  9380 ;;		_InitSystemApplicationManagers
  9381 ;; This function uses a non-reentrant model
  9382 ;;
  9383                           
  9384                           	psect	text63
  9385  003910                     __ptext63:
  9386                           	opt stack 0
  9387  003910                     _TMR0_StartTimer:
  9388                           	opt stack 26
  9389                           
  9390                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
  9391                           
  9392                           ;incstack = 0
  9393  003910  8ED5               	bsf	4053,7,c	;volatile
  9394  003912  0012               	return		;funcret
  9395  003914                     __end_of_TMR0_StartTimer:
  9396                           	opt stack 0
  9397                           tosu	equ	0xFFF
  9398                           tosh	equ	0xFFE
  9399                           tosl	equ	0xFFD
  9400                           pclath	equ	0xFFA
  9401                           tblptru	equ	0xFF8
  9402                           tblptrh	equ	0xFF7
  9403                           tblptrl	equ	0xFF6
  9404                           tablat	equ	0xFF5
  9405                           prodh	equ	0xFF4
  9406                           prodl	equ	0xFF3
  9407                           intcon	equ	0xFF2
  9408                           intcon2	equ	0xFF1
  9409                           postinc0	equ	0xFEE
  9410                           wreg	equ	0xFE8
  9411                           indf1	equ	0xFE7
  9412                           postdec1	equ	0xFE5
  9413                           fsr1h	equ	0xFE2
  9414                           fsr1l	equ	0xFE1
  9415                           indf2	equ	0xFDF
  9416                           postinc2	equ	0xFDE
  9417                           postdec2	equ	0xFDD
  9418                           fsr2h	equ	0xFDA
  9419                           fsr2l	equ	0xFD9
  9420                           status	equ	0xFD8
  9421                           
  9422 ;; *************** function _PLLInitialize *****************
  9423 ;; Defined at:
  9424 ;;		line 14 in file "SyntApp.c"
  9425 ;; Parameters:    Size  Location     Type
  9426 ;;		None
  9427 ;; Auto vars:     Size  Location     Type
  9428 ;;  idx             2   38[BANK0 ] int 
  9429 ;; Return value:  Size  Location     Type
  9430 ;;                  1    wreg      void 
  9431 ;; Registers used:
  9432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9433 ;; Tracked objects:
  9434 ;;		On entry : 0/0
  9435 ;;		On exit  : 0/0
  9436 ;;		Unchanged: 0/0
  9437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9438 ;;      Params:         0       0       0       0       0       0       0
  9439 ;;      Locals:         0       2       0       0       0       0       0
  9440 ;;      Temps:          2       0       0       0       0       0       0
  9441 ;;      Totals:         2       2       0       0       0       0       0
  9442 ;;Total ram usage:        4 bytes
  9443 ;; Hardware stack levels used:    1
  9444 ;; Hardware stack levels required when called:    7
  9445 ;; This function calls:
  9446 ;;		_SWSPI_send_word
  9447 ;;		_SwSpi_Set_CE_Pin
  9448 ;; This function is called by:
  9449 ;;		_InitSystemApplicationManagers
  9450 ;; This function uses a non-reentrant model
  9451 ;;
  9452                           
  9453                           	psect	text64
  9454  000A6C                     __ptext64:
  9455                           	opt stack 0
  9456  000A6C                     _PLLInitialize:
  9457                           	opt stack 22
  9458                           
  9459                           ;SyntApp.c: 17: IOCB = 0b10000000;
  9460                           
  9461                           ;incstack = 0
  9462  000A6C  0E80               	movlw	128
  9463  000A6E  6E62               	movwf	3938,c	;volatile
  9464                           
  9465                           ;SyntApp.c: 20: SwSpi_Set_CE_Pin(SYNTH_TX, 1);
  9466  000A70  0E01               	movlw	1
  9467  000A72  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  9468  000A74  0E00               	movlw	0
  9469  000A76  EC42  F019         	call	_SwSpi_Set_CE_Pin
  9470                           
  9471                           ;SyntApp.c: 28: SWSPI_send_word(SYNTH_TX, 0x1041C, 3);
  9472  000A7A  0E1C               	movlw	28
  9473  000A7C  6E26               	movwf	SWSPI_send_word@data,c
  9474  000A7E  0E04               	movlw	4
  9475  000A80  6E27               	movwf	SWSPI_send_word@data+1,c
  9476  000A82  0E01               	movlw	1
  9477  000A84  6E28               	movwf	SWSPI_send_word@data+2,c
  9478  000A86  0E00               	movlw	0
  9479  000A88  6E29               	movwf	SWSPI_send_word@data+3,c
  9480  000A8A  0E03               	movlw	3
  9481  000A8C  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9482  000A8E  0E00               	movlw	0
  9483  000A90  EC3A  F012         	call	_SWSPI_send_word
  9484                           
  9485                           ;SyntApp.c: 29: SWSPI_send_word(SYNTH_TX, 0x61300B, 3);
  9486  000A94  0E0B               	movlw	11
  9487  000A96  6E26               	movwf	SWSPI_send_word@data,c
  9488  000A98  0E30               	movlw	48
  9489  000A9A  6E27               	movwf	SWSPI_send_word@data+1,c
  9490  000A9C  0E61               	movlw	97
  9491  000A9E  6E28               	movwf	SWSPI_send_word@data+2,c
  9492  000AA0  0E00               	movlw	0
  9493  000AA2  6E29               	movwf	SWSPI_send_word@data+3,c
  9494  000AA4  0E03               	movlw	3
  9495  000AA6  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9496  000AA8  0E00               	movlw	0
  9497  000AAA  EC3A  F012         	call	_SWSPI_send_word
  9498                           
  9499                           ;SyntApp.c: 30: SWSPI_send_word(SYNTH_TX, 0xC0323A, 3);
  9500  000AAE  0E3A               	movlw	58
  9501  000AB0  6E26               	movwf	SWSPI_send_word@data,c
  9502  000AB2  0E32               	movlw	50
  9503  000AB4  6E27               	movwf	SWSPI_send_word@data+1,c
  9504  000AB6  0EC0               	movlw	192
  9505  000AB8  6E28               	movwf	SWSPI_send_word@data+2,c
  9506  000ABA  0E00               	movlw	0
  9507  000ABC  6E29               	movwf	SWSPI_send_word@data+3,c
  9508  000ABE  0E03               	movlw	3
  9509  000AC0  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9510  000AC2  0E00               	movlw	0
  9511  000AC4  EC3A  F012         	call	_SWSPI_send_word
  9512                           
  9513                           ;SyntApp.c: 32: SWSPI_send_word(SYNTH_TX, 0x2221BCC9, 3);
  9514  000AC8  0EC9               	movlw	201
  9515  000ACA  6E26               	movwf	SWSPI_send_word@data,c
  9516  000ACC  0EBC               	movlw	188
  9517  000ACE  6E27               	movwf	SWSPI_send_word@data+1,c
  9518  000AD0  0E21               	movlw	33
  9519  000AD2  6E28               	movwf	SWSPI_send_word@data+2,c
  9520  000AD4  0E22               	movlw	34
  9521  000AD6  6E29               	movwf	SWSPI_send_word@data+3,c
  9522  000AD8  0E03               	movlw	3
  9523  000ADA  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9524  000ADC  0E00               	movlw	0
  9525  000ADE  EC3A  F012         	call	_SWSPI_send_word
  9526                           
  9527                           ;SyntApp.c: 34: SWSPI_send_word(SYNTH_TX, 0x102D0428, 3);
  9528  000AE2  0E28               	movlw	40
  9529  000AE4  6E26               	movwf	SWSPI_send_word@data,c
  9530  000AE6  0E04               	movlw	4
  9531  000AE8  6E27               	movwf	SWSPI_send_word@data+1,c
  9532  000AEA  0E2D               	movlw	45
  9533  000AEC  6E28               	movwf	SWSPI_send_word@data+2,c
  9534  000AEE  0E10               	movlw	16
  9535  000AF0  6E29               	movwf	SWSPI_send_word@data+3,c
  9536  000AF2  0E03               	movlw	3
  9537  000AF4  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9538  000AF6  0E00               	movlw	0
  9539  000AF8  EC3A  F012         	call	_SWSPI_send_word
  9540                           
  9541                           ;SyntApp.c: 36: SWSPI_send_word(SYNTH_TX, 0x120000E7, 3);
  9542  000AFC  0EE7               	movlw	231
  9543  000AFE  6E26               	movwf	SWSPI_send_word@data,c
  9544  000B00  0E00               	movlw	0
  9545  000B02  6E27               	movwf	SWSPI_send_word@data+1,c
  9546  000B04  0E00               	movlw	0
  9547  000B06  6E28               	movwf	SWSPI_send_word@data+2,c
  9548  000B08  0E12               	movlw	18
  9549  000B0A  6E29               	movwf	SWSPI_send_word@data+3,c
  9550  000B0C  0E03               	movlw	3
  9551  000B0E  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9552  000B10  0E00               	movlw	0
  9553  000B12  EC3A  F012         	call	_SWSPI_send_word
  9554                           
  9555                           ;SyntApp.c: 38: SWSPI_send_word(SYNTH_TX, 0x35010076, 3);
  9556  000B16  0E76               	movlw	118
  9557  000B18  6E26               	movwf	SWSPI_send_word@data,c
  9558  000B1A  0E00               	movlw	0
  9559  000B1C  6E27               	movwf	SWSPI_send_word@data+1,c
  9560  000B1E  0E01               	movlw	1
  9561  000B20  6E28               	movwf	SWSPI_send_word@data+2,c
  9562  000B22  0E35               	movlw	53
  9563  000B24  6E29               	movwf	SWSPI_send_word@data+3,c
  9564  000B26  0E03               	movlw	3
  9565  000B28  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9566  000B2A  0E00               	movlw	0
  9567  000B2C  EC3A  F012         	call	_SWSPI_send_word
  9568                           
  9569                           ;SyntApp.c: 40: SWSPI_send_word(SYNTH_TX, 0x800025, 3);
  9570  000B30  0E25               	movlw	37
  9571  000B32  6E26               	movwf	SWSPI_send_word@data,c
  9572  000B34  0E00               	movlw	0
  9573  000B36  6E27               	movwf	SWSPI_send_word@data+1,c
  9574  000B38  0E80               	movlw	128
  9575  000B3A  6E28               	movwf	SWSPI_send_word@data+2,c
  9576  000B3C  0E00               	movlw	0
  9577  000B3E  6E29               	movwf	SWSPI_send_word@data+3,c
  9578  000B40  0E03               	movlw	3
  9579  000B42  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9580  000B44  0E00               	movlw	0
  9581  000B46  EC3A  F012         	call	_SWSPI_send_word
  9582                           
  9583                           ;SyntApp.c: 42: SWSPI_send_word(SYNTH_TX, 0x34008B84, 3);
  9584  000B4A  0E84               	movlw	132
  9585  000B4C  6E26               	movwf	SWSPI_send_word@data,c
  9586  000B4E  0E8B               	movlw	139
  9587  000B50  6E27               	movwf	SWSPI_send_word@data+1,c
  9588  000B52  0E00               	movlw	0
  9589  000B54  6E28               	movwf	SWSPI_send_word@data+2,c
  9590  000B56  0E34               	movlw	52
  9591  000B58  6E29               	movwf	SWSPI_send_word@data+3,c
  9592  000B5A  0E03               	movlw	3
  9593  000B5C  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9594  000B5E  0E00               	movlw	0
  9595  000B60  EC3A  F012         	call	_SWSPI_send_word
  9596                           
  9597                           ;SyntApp.c: 44: SWSPI_send_word(SYNTH_TX, 0x3, 3);
  9598  000B64  0E03               	movlw	3
  9599  000B66  6E26               	movwf	SWSPI_send_word@data,c
  9600  000B68  0E00               	movlw	0
  9601  000B6A  6E27               	movwf	SWSPI_send_word@data+1,c
  9602  000B6C  0E00               	movlw	0
  9603  000B6E  6E28               	movwf	SWSPI_send_word@data+2,c
  9604  000B70  0E00               	movlw	0
  9605  000B72  6E29               	movwf	SWSPI_send_word@data+3,c
  9606  000B74  0E03               	movlw	3
  9607  000B76  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9608  000B78  0E00               	movlw	0
  9609  000B7A  EC3A  F012         	call	_SWSPI_send_word
  9610                           
  9611                           ;SyntApp.c: 46: SWSPI_send_word(SYNTH_TX, 0x12, 3);
  9612  000B7E  0E12               	movlw	18
  9613  000B80  6E26               	movwf	SWSPI_send_word@data,c
  9614  000B82  0E00               	movlw	0
  9615  000B84  6E27               	movwf	SWSPI_send_word@data+1,c
  9616  000B86  0E00               	movlw	0
  9617  000B88  6E28               	movwf	SWSPI_send_word@data+2,c
  9618  000B8A  0E00               	movlw	0
  9619  000B8C  6E29               	movwf	SWSPI_send_word@data+3,c
  9620  000B8E  0E03               	movlw	3
  9621  000B90  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9622  000B92  0E00               	movlw	0
  9623  000B94  EC3A  F012         	call	_SWSPI_send_word
  9624                           
  9625                           ;SyntApp.c: 48: SWSPI_send_word(SYNTH_TX, 0x1, 3);
  9626  000B98  0E01               	movlw	1
  9627  000B9A  6E26               	movwf	SWSPI_send_word@data,c
  9628  000B9C  0E00               	movlw	0
  9629  000B9E  6E27               	movwf	SWSPI_send_word@data+1,c
  9630  000BA0  0E00               	movlw	0
  9631  000BA2  6E28               	movwf	SWSPI_send_word@data+2,c
  9632  000BA4  0E00               	movlw	0
  9633  000BA6  6E29               	movwf	SWSPI_send_word@data+3,c
  9634  000BA8  0E03               	movlw	3
  9635  000BAA  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9636  000BAC  0E00               	movlw	0
  9637  000BAE  EC3A  F012         	call	_SWSPI_send_word
  9638                           
  9639                           ;SyntApp.c: 50: SWSPI_send_word(SYNTH_TX, 0x2007D0, 3);
  9640  000BB2  0ED0               	movlw	208
  9641  000BB4  6E26               	movwf	SWSPI_send_word@data,c
  9642  000BB6  0E07               	movlw	7
  9643  000BB8  6E27               	movwf	SWSPI_send_word@data+1,c
  9644  000BBA  0E20               	movlw	32
  9645  000BBC  6E28               	movwf	SWSPI_send_word@data+2,c
  9646  000BBE  0E00               	movlw	0
  9647  000BC0  6E29               	movwf	SWSPI_send_word@data+3,c
  9648  000BC2  0E03               	movlw	3
  9649  000BC4  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9650  000BC6  0E00               	movlw	0
  9651  000BC8  EC3A  F012         	call	_SWSPI_send_word
  9652                           
  9653                           ;SyntApp.c: 53: SwSpi_Set_CE_Pin(SYNTH_RX, 1);
  9654  000BCC  0E01               	movlw	1
  9655  000BCE  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  9656  000BD0  0E01               	movlw	1
  9657  000BD2  EC42  F019         	call	_SwSpi_Set_CE_Pin
  9658                           
  9659                           ;SyntApp.c: 56: for(int idx = 0; idx < 13; idx++)
  9660  000BD6  0E00               	movlw	0
  9661  000BD8  0100               	movlb	0	; () banked
  9662  000BDA  6F87               	movwf	(PLLInitialize@idx+1)& (0+255),b
  9663  000BDC  0E00               	movlw	0
  9664  000BDE  6F86               	movwf	PLLInitialize@idx& (0+255),b
  9665  000BE0                     l7824:
  9666                           
  9667                           ; BSR set to: 0
  9668  000BE0  BF87               	btfsc	(PLLInitialize@idx+1)& (0+255),7,b
  9669  000BE2  D006               	goto	l502
  9670  000BE4  5187               	movf	(PLLInitialize@idx+1)& (0+255),w,b
  9671  000BE6  E129               	bnz	l7834
  9672  000BE8  0E0D               	movlw	13
  9673  000BEA  5D86               	subwf	PLLInitialize@idx& (0+255),w,b
  9674  000BEC  B0D8               	btfsc	status,0,c
  9675  000BEE  D025               	goto	u7670
  9676  000BF0                     l502:
  9677                           
  9678                           ; BSR set to: 0
  9679                           ;SyntApp.c: 57: {
  9680                           ;SyntApp.c: 58: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[idx], 3);
  9681                           
  9682                           ; BSR set to: 0
  9683  000BF0  C086  F02F         	movff	PLLInitialize@idx,??_PLLInitialize
  9684  000BF4  C087  F030         	movff	PLLInitialize@idx+1,??_PLLInitialize+1
  9685  000BF8  90D8               	bcf	status,0,c
  9686  000BFA  362F               	rlcf	??_PLLInitialize,f,c
  9687  000BFC  3630               	rlcf	??_PLLInitialize+1,f,c
  9688  000BFE  90D8               	bcf	status,0,c
  9689  000C00  362F               	rlcf	??_PLLInitialize,f,c
  9690  000C02  3630               	rlcf	??_PLLInitialize+1,f,c
  9691  000C04  0E35               	movlw	low _PLL_INIT_REGISTERS
  9692  000C06  242F               	addwf	??_PLLInitialize,w,c
  9693  000C08  6EF6               	movwf	tblptrl,c
  9694  000C0A  0E06               	movlw	high _PLL_INIT_REGISTERS
  9695  000C0C  2030               	addwfc	??_PLLInitialize+1,w,c
  9696  000C0E  6EF7               	movwf	tblptrh,c
  9697  000C10                     	if	0	;There are less than 3 active tblptr bytes
  9698  000C10                     	endif
  9699  000C10  0009               	tblrd		*+
  9700  000C12  CFF5 F026          	movff	tablat,SWSPI_send_word@data
  9701  000C16  0009               	tblrd		*+
  9702  000C18  CFF5 F027          	movff	tablat,SWSPI_send_word@data+1
  9703  000C1C  0009               	tblrd		*+
  9704  000C1E  CFF5 F028          	movff	tablat,SWSPI_send_word@data+2
  9705  000C22  000A               	tblrd		*-
  9706  000C24  CFF5 F029          	movff	tablat,SWSPI_send_word@data+3
  9707  000C28  0E03               	movlw	3
  9708  000C2A  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9709  000C2C  0E01               	movlw	1
  9710  000C2E  EC3A  F012         	call	_SWSPI_send_word
  9711  000C32  0100               	movlb	0	; () banked
  9712  000C34  4B86               	infsnz	PLLInitialize@idx& (0+255),f,b
  9713  000C36  2B87               	incf	(PLLInitialize@idx+1)& (0+255),f,b
  9714  000C38  D7D3               	goto	l7824
  9715  000C3A                     u7670:
  9716  000C3A                     l7834:
  9717                           
  9718                           ; BSR set to: 0
  9719                           ;SyntApp.c: 59: }
  9720                           ;SyntApp.c: 62: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[4], 3);
  9721  000C3A  0E45               	movlw	low (_PLL_INIT_REGISTERS+16)
  9722  000C3C  6EF6               	movwf	tblptrl,c
  9723  000C3E  0E06               	movlw	high (_PLL_INIT_REGISTERS+16)
  9724  000C40  6EF7               	movwf	tblptrh,c
  9725  000C42                     	if	0	;tblptru may be non-zero
  9726  000C42                     	endif
  9727  000C42                     	if	0	;tblptru may be non-zero
  9728  000C42                     	endif
  9729  000C42  0009               	tblrd		*+
  9730  000C44  CFF5 F026          	movff	tablat,SWSPI_send_word@data
  9731  000C48  0009               	tblrd		*+
  9732  000C4A  CFF5 F027          	movff	tablat,SWSPI_send_word@data+1
  9733  000C4E  0009               	tblrd		*+
  9734  000C50  CFF5 F028          	movff	tablat,SWSPI_send_word@data+2
  9735  000C54  000A               	tblrd		*-
  9736  000C56  CFF5 F029          	movff	tablat,SWSPI_send_word@data+3
  9737  000C5A  0E03               	movlw	3
  9738  000C5C  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9739  000C5E  0E01               	movlw	1
  9740  000C60  EC3A  F012         	call	_SWSPI_send_word
  9741                           
  9742                           ;SyntApp.c: 63: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[2], 3);
  9743  000C64  0E3D               	movlw	low (_PLL_INIT_REGISTERS+8)
  9744  000C66  6EF6               	movwf	tblptrl,c
  9745  000C68  0E06               	movlw	high (_PLL_INIT_REGISTERS+8)
  9746  000C6A  6EF7               	movwf	tblptrh,c
  9747  000C6C                     	if	0	;tblptru may be non-zero
  9748  000C6C                     	endif
  9749  000C6C                     	if	0	;tblptru may be non-zero
  9750  000C6C                     	endif
  9751  000C6C  0009               	tblrd		*+
  9752  000C6E  CFF5 F026          	movff	tablat,SWSPI_send_word@data
  9753  000C72  0009               	tblrd		*+
  9754  000C74  CFF5 F027          	movff	tablat,SWSPI_send_word@data+1
  9755  000C78  0009               	tblrd		*+
  9756  000C7A  CFF5 F028          	movff	tablat,SWSPI_send_word@data+2
  9757  000C7E  000A               	tblrd		*-
  9758  000C80  CFF5 F029          	movff	tablat,SWSPI_send_word@data+3
  9759  000C84  0E03               	movlw	3
  9760  000C86  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9761  000C88  0E01               	movlw	1
  9762  000C8A  EC3A  F012         	call	_SWSPI_send_word
  9763                           
  9764                           ;SyntApp.c: 64: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[1], 3);
  9765  000C8E  0E39               	movlw	low (_PLL_INIT_REGISTERS+4)
  9766  000C90  6EF6               	movwf	tblptrl,c
  9767  000C92  0E06               	movlw	high (_PLL_INIT_REGISTERS+4)
  9768  000C94  6EF7               	movwf	tblptrh,c
  9769  000C96                     	if	0	;tblptru may be non-zero
  9770  000C96                     	endif
  9771  000C96                     	if	0	;tblptru may be non-zero
  9772  000C96                     	endif
  9773  000C96  0009               	tblrd		*+
  9774  000C98  CFF5 F026          	movff	tablat,SWSPI_send_word@data
  9775  000C9C  0009               	tblrd		*+
  9776  000C9E  CFF5 F027          	movff	tablat,SWSPI_send_word@data+1
  9777  000CA2  0009               	tblrd		*+
  9778  000CA4  CFF5 F028          	movff	tablat,SWSPI_send_word@data+2
  9779  000CA8  000A               	tblrd		*-
  9780  000CAA  CFF5 F029          	movff	tablat,SWSPI_send_word@data+3
  9781  000CAE  0E03               	movlw	3
  9782  000CB0  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9783  000CB2  0E01               	movlw	1
  9784  000CB4  EC3A  F012         	call	_SWSPI_send_word
  9785                           
  9786                           ;SyntApp.c: 65: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[0], 3);
  9787  000CB8  0E35               	movlw	low _PLL_INIT_REGISTERS
  9788  000CBA  6EF6               	movwf	tblptrl,c
  9789  000CBC                     	if	1	;There is more than 1 active tblptr byte
  9790  000CBC  0E06               	movlw	high _PLL_INIT_REGISTERS
  9791  000CBE  6EF7               	movwf	tblptrh,c
  9792  000CC0                     	endif
  9793  000CC0                     	if	0	;There are less than 3 active tblptr bytes
  9794  000CC0                     	endif
  9795  000CC0  0009               	tblrd		*+
  9796  000CC2  CFF5 F026          	movff	tablat,SWSPI_send_word@data
  9797  000CC6  0009               	tblrd		*+
  9798  000CC8  CFF5 F027          	movff	tablat,SWSPI_send_word@data+1
  9799  000CCC  0009               	tblrd		*+
  9800  000CCE  CFF5 F028          	movff	tablat,SWSPI_send_word@data+2
  9801  000CD2  000A               	tblrd		*-
  9802  000CD4  CFF5 F029          	movff	tablat,SWSPI_send_word@data+3
  9803  000CD8  0E03               	movlw	3
  9804  000CDA  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9805  000CDC  0E01               	movlw	1
  9806  000CDE  EC3A  F012         	call	_SWSPI_send_word
  9807  000CE2  0012               	return		;funcret
  9808  000CE4                     __end_of_PLLInitialize:
  9809                           	opt stack 0
  9810                           tosu	equ	0xFFF
  9811                           tosh	equ	0xFFE
  9812                           tosl	equ	0xFFD
  9813                           pclath	equ	0xFFA
  9814                           tblptru	equ	0xFF8
  9815                           tblptrh	equ	0xFF7
  9816                           tblptrl	equ	0xFF6
  9817                           tablat	equ	0xFF5
  9818                           prodh	equ	0xFF4
  9819                           prodl	equ	0xFF3
  9820                           intcon	equ	0xFF2
  9821                           intcon2	equ	0xFF1
  9822                           postinc0	equ	0xFEE
  9823                           wreg	equ	0xFE8
  9824                           indf1	equ	0xFE7
  9825                           postdec1	equ	0xFE5
  9826                           fsr1h	equ	0xFE2
  9827                           fsr1l	equ	0xFE1
  9828                           indf2	equ	0xFDF
  9829                           postinc2	equ	0xFDE
  9830                           postdec2	equ	0xFDD
  9831                           fsr2h	equ	0xFDA
  9832                           fsr2l	equ	0xFD9
  9833                           status	equ	0xFD8
  9834                           
  9835 ;; *************** function _SwSpi_Set_CE_Pin *****************
  9836 ;; Defined at:
  9837 ;;		line 201 in file "SwSpiApp.c"
  9838 ;; Parameters:    Size  Location     Type
  9839 ;;  phrType         1    wreg     enum E7543
  9840 ;;  cPinMode        1   23[COMRAM] unsigned char 
  9841 ;; Auto vars:     Size  Location     Type
  9842 ;;  phrType         1   24[COMRAM] enum E7543
  9843 ;; Return value:  Size  Location     Type
  9844 ;;                  1    wreg      void 
  9845 ;; Registers used:
  9846 ;;		wreg, status,2, status,0
  9847 ;; Tracked objects:
  9848 ;;		On entry : 0/0
  9849 ;;		On exit  : 0/0
  9850 ;;		Unchanged: 0/0
  9851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9852 ;;      Params:         1       0       0       0       0       0       0
  9853 ;;      Locals:         1       0       0       0       0       0       0
  9854 ;;      Temps:          0       0       0       0       0       0       0
  9855 ;;      Totals:         2       0       0       0       0       0       0
  9856 ;;Total ram usage:        2 bytes
  9857 ;; Hardware stack levels used:    1
  9858 ;; Hardware stack levels required when called:    3
  9859 ;; This function calls:
  9860 ;;		Nothing
  9861 ;; This function is called by:
  9862 ;;		_PLLInitialize
  9863 ;; This function uses a non-reentrant model
  9864 ;;
  9865                           
  9866                           	psect	text65
  9867  003284                     __ptext65:
  9868                           	opt stack 0
  9869  003284                     _SwSpi_Set_CE_Pin:
  9870                           	opt stack 25
  9871                           
  9872                           ;incstack = 0
  9873                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
  9874  003284  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
  9875                           
  9876                           ;SwSpiApp.c: 203: switch(phrType)
  9877  003286  D014               	goto	l664
  9878  003288                     
  9879                           ;SwSpiApp.c: 206: if(cPinMode == 1)
  9880  003288  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9881  00328A  A4D8               	btfss	status,2,c
  9882  00328C  D002               	goto	l666
  9883                           
  9884                           ;SwSpiApp.c: 207: {
  9885                           ;SwSpiApp.c: 208: do { LATCbits.LATC1 = 1; } while(0);
  9886  00328E  828B               	bsf	3979,1,c	;volatile
  9887                           
  9888                           ;SwSpiApp.c: 209: }
  9889  003290  0012               	return	
  9890  003292                     l666:
  9891                           
  9892                           ;SwSpiApp.c: 210: else if(cPinMode == 0)
  9893  003292  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9894  003294  A4D8               	btfss	status,2,c
  9895  003296  0012               	return	
  9896                           
  9897                           ;SwSpiApp.c: 211: {
  9898                           ;SwSpiApp.c: 212: do { LATCbits.LATC1 = 0; } while(0);
  9899  003298  928B               	bcf	3979,1,c	;volatile
  9900                           
  9901                           ;SwSpiApp.c: 213: }
  9902                           ;SwSpiApp.c: 214: break;
  9903  00329A  0012               	return	
  9904  00329C                     
  9905                           ;SwSpiApp.c: 217: if(cPinMode == 1)
  9906  00329C  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9907  00329E  A4D8               	btfss	status,2,c
  9908  0032A0  D002               	goto	l675
  9909                           
  9910                           ;SwSpiApp.c: 218: {
  9911                           ;SwSpiApp.c: 219: do { LATDbits.LATD2 = 1; } while(0);
  9912  0032A2  848C               	bsf	3980,2,c	;volatile
  9913                           
  9914                           ;SwSpiApp.c: 220: }
  9915  0032A4  0012               	return	
  9916  0032A6                     l675:
  9917                           
  9918                           ;SwSpiApp.c: 221: else if(cPinMode == 0)
  9919  0032A6  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9920  0032A8  A4D8               	btfss	status,2,c
  9921  0032AA  0012               	return	
  9922                           
  9923                           ;SwSpiApp.c: 222: {
  9924                           ;SwSpiApp.c: 223: do { LATCbits.LATC1 = 0; } while(0);
  9925  0032AC  928B               	bcf	3979,1,c	;volatile
  9926                           
  9927                           ;SwSpiApp.c: 226: }
  9928                           
  9929                           ;SwSpiApp.c: 224: }
  9930                           ;SwSpiApp.c: 225: break;
  9931  0032AE  0012               	return	
  9932  0032B0                     l664:
  9933  0032B0  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
  9934                           
  9935                           ; Switch size 1, requested type "space"
  9936                           ; Number of cases is 2, Range of values is 0 to 1
  9937                           ; switch strategies available:
  9938                           ; Name         Instructions Cycles
  9939                           ; simple_byte            7     4 (average)
  9940                           ;	Chosen strategy is simple_byte
  9941  0032B2  0A00               	xorlw	0	; case 0
  9942  0032B4  B4D8               	btfsc	status,2,c
  9943  0032B6  D7E8               	goto	l665
  9944  0032B8  0A01               	xorlw	1	; case 1
  9945  0032BA  A4D8               	btfss	status,2,c
  9946  0032BC  0012               	return	
  9947  0032BE  D7EE               	goto	l674
  9948  0032C0                     __end_of_SwSpi_Set_CE_Pin:
  9949                           	opt stack 0
  9950                           tosu	equ	0xFFF
  9951                           tosh	equ	0xFFE
  9952                           tosl	equ	0xFFD
  9953                           pclath	equ	0xFFA
  9954                           tblptru	equ	0xFF8
  9955                           tblptrh	equ	0xFF7
  9956                           tblptrl	equ	0xFF6
  9957                           tablat	equ	0xFF5
  9958                           prodh	equ	0xFF4
  9959                           prodl	equ	0xFF3
  9960                           intcon	equ	0xFF2
  9961                           intcon2	equ	0xFF1
  9962                           postinc0	equ	0xFEE
  9963                           wreg	equ	0xFE8
  9964                           indf1	equ	0xFE7
  9965                           postdec1	equ	0xFE5
  9966                           fsr1h	equ	0xFE2
  9967                           fsr1l	equ	0xFE1
  9968                           indf2	equ	0xFDF
  9969                           postinc2	equ	0xFDE
  9970                           postdec2	equ	0xFDD
  9971                           fsr2h	equ	0xFDA
  9972                           fsr2l	equ	0xFD9
  9973                           status	equ	0xFD8
  9974                           
  9975 ;; *************** function _InitSevenSegment *****************
  9976 ;; Defined at:
  9977 ;;		line 14 in file "SevenSegmentApp.c"
  9978 ;; Parameters:    Size  Location     Type
  9979 ;;		None
  9980 ;; Auto vars:     Size  Location     Type
  9981 ;;		None
  9982 ;; Return value:  Size  Location     Type
  9983 ;;                  1    wreg      void 
  9984 ;; Registers used:
  9985 ;;		wreg, status,2
  9986 ;; Tracked objects:
  9987 ;;		On entry : 0/0
  9988 ;;		On exit  : 0/0
  9989 ;;		Unchanged: 0/0
  9990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9991 ;;      Params:         0       0       0       0       0       0       0
  9992 ;;      Locals:         0       0       0       0       0       0       0
  9993 ;;      Temps:          0       0       0       0       0       0       0
  9994 ;;      Totals:         0       0       0       0       0       0       0
  9995 ;;Total ram usage:        0 bytes
  9996 ;; Hardware stack levels used:    1
  9997 ;; Hardware stack levels required when called:    3
  9998 ;; This function calls:
  9999 ;;		Nothing
 10000 ;; This function is called by:
 10001 ;;		_InitSystemApplicationManagers
 10002 ;; This function uses a non-reentrant model
 10003 ;;
 10004                           
 10005                           	psect	text66
 10006  003660                     __ptext66:
 10007                           	opt stack 0
 10008  003660                     _InitSevenSegment:
 10009                           	opt stack 26
 10010                           
 10011                           ;SevenSegmentApp.c: 16: ANSELA = 0;
 10012                           
 10013                           ;incstack = 0
 10014  003660  0E00               	movlw	0
 10015  003662  010F               	movlb	15	; () banked
 10016  003664  6F38               	movwf	56,b	;volatile
 10017                           
 10018                           ;SevenSegmentApp.c: 17: ANSELD = 0;
 10019  003666  0E00               	movlw	0
 10020  003668  6F3B               	movwf	59,b	;volatile
 10021                           
 10022                           ;SevenSegmentApp.c: 19: TRISA = 0;
 10023  00366A  0E00               	movlw	0
 10024  00366C  6E92               	movwf	3986,c	;volatile
 10025                           
 10026                           ;SevenSegmentApp.c: 20: LATA = 0;
 10027  00366E  0E00               	movlw	0
 10028  003670  6E89               	movwf	3977,c	;volatile
 10029                           
 10030                           ;SevenSegmentApp.c: 21: TRISD = 0;
 10031  003672  0E00               	movlw	0
 10032  003674  6E95               	movwf	3989,c	;volatile
 10033                           
 10034                           ;SevenSegmentApp.c: 22: LATD = 0;
 10035  003676  0E00               	movlw	0
 10036  003678  6E8C               	movwf	3980,c	;volatile
 10037                           
 10038                           ;SevenSegmentApp.c: 24: cnt = 1;
 10039  00367A  0E00               	movlw	0
 10040  00367C  0100               	movlb	0	; () banked
 10041  00367E  6FFE               	movwf	(_cnt+1)& (0+255),b
 10042  003680  0E01               	movlw	1
 10043  003682  6FFD               	movwf	_cnt& (0+255),b
 10044                           
 10045                           ; BSR set to: 0
 10046  003684  0012               	return		;funcret
 10047  003686                     __end_of_InitSevenSegment:
 10048                           	opt stack 0
 10049                           tosu	equ	0xFFF
 10050                           tosh	equ	0xFFE
 10051                           tosl	equ	0xFFD
 10052                           pclath	equ	0xFFA
 10053                           tblptru	equ	0xFF8
 10054                           tblptrh	equ	0xFF7
 10055                           tblptrl	equ	0xFF6
 10056                           tablat	equ	0xFF5
 10057                           prodh	equ	0xFF4
 10058                           prodl	equ	0xFF3
 10059                           intcon	equ	0xFF2
 10060                           intcon2	equ	0xFF1
 10061                           postinc0	equ	0xFEE
 10062                           wreg	equ	0xFE8
 10063                           indf1	equ	0xFE7
 10064                           postdec1	equ	0xFE5
 10065                           fsr1h	equ	0xFE2
 10066                           fsr1l	equ	0xFE1
 10067                           indf2	equ	0xFDF
 10068                           postinc2	equ	0xFDE
 10069                           postdec2	equ	0xFDD
 10070                           fsr2h	equ	0xFDA
 10071                           fsr2l	equ	0xFD9
 10072                           status	equ	0xFD8
 10073                           
 10074 ;; *************** function _InitAdcApplicationMgr *****************
 10075 ;; Defined at:
 10076 ;;		line 22 in file "AdcApp.c"
 10077 ;; Parameters:    Size  Location     Type
 10078 ;;		None
 10079 ;; Auto vars:     Size  Location     Type
 10080 ;;  channel         1   23[COMRAM] unsigned char 
 10081 ;; Return value:  Size  Location     Type
 10082 ;;                  1    wreg      void 
 10083 ;; Registers used:
 10084 ;;		wreg, status,2
 10085 ;; Tracked objects:
 10086 ;;		On entry : 0/0
 10087 ;;		On exit  : 0/0
 10088 ;;		Unchanged: 0/0
 10089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10090 ;;      Params:         0       0       0       0       0       0       0
 10091 ;;      Locals:         1       0       0       0       0       0       0
 10092 ;;      Temps:          0       0       0       0       0       0       0
 10093 ;;      Totals:         1       0       0       0       0       0       0
 10094 ;;Total ram usage:        1 bytes
 10095 ;; Hardware stack levels used:    1
 10096 ;; Hardware stack levels required when called:    3
 10097 ;; This function calls:
 10098 ;;		Nothing
 10099 ;; This function is called by:
 10100 ;;		_InitSystemApplicationManagers
 10101 ;; This function uses a non-reentrant model
 10102 ;;
 10103                           
 10104                           	psect	text67
 10105  003892                     __ptext67:
 10106                           	opt stack 0
 10107  003892                     _InitAdcApplicationMgr:
 10108                           	opt stack 26
 10109                           
 10110                           ;AdcApp.c: 24: conversionFormat = CONVERSION_LEFT_FORAMT;
 10111                           
 10112                           ; BSR set to: 0
 10113                           ;incstack = 0
 10114  003892  0E00               	movlw	0
 10115  003894  6E3D               	movwf	_conversionFormat,c
 10116                           
 10117                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
 10118  003896  0E00               	movlw	0
 10119  003898  6E3C               	movwf	_adcSampleMode,c
 10120                           
 10121                           ;AdcApp.c: 26: char channel = 0;
 10122  00389A  0E00               	movlw	0
 10123  00389C  6E18               	movwf	InitAdcApplicationMgr@channel,c
 10124  00389E  0012               	return		;funcret
 10125  0038A0                     __end_of_InitAdcApplicationMgr:
 10126                           	opt stack 0
 10127                           tosu	equ	0xFFF
 10128                           tosh	equ	0xFFE
 10129                           tosl	equ	0xFFD
 10130                           pclath	equ	0xFFA
 10131                           tblptru	equ	0xFF8
 10132                           tblptrh	equ	0xFF7
 10133                           tblptrl	equ	0xFF6
 10134                           tablat	equ	0xFF5
 10135                           prodh	equ	0xFF4
 10136                           prodl	equ	0xFF3
 10137                           intcon	equ	0xFF2
 10138                           intcon2	equ	0xFF1
 10139                           postinc0	equ	0xFEE
 10140                           wreg	equ	0xFE8
 10141                           indf1	equ	0xFE7
 10142                           postdec1	equ	0xFE5
 10143                           fsr1h	equ	0xFE2
 10144                           fsr1l	equ	0xFE1
 10145                           indf2	equ	0xFDF
 10146                           postinc2	equ	0xFDE
 10147                           postdec2	equ	0xFDD
 10148                           fsr2h	equ	0xFDA
 10149                           fsr2l	equ	0xFD9
 10150                           status	equ	0xFD8
 10151                           
 10152 ;; *************** function _DacInit *****************
 10153 ;; Defined at:
 10154 ;;		line 24 in file "DacApp.c"
 10155 ;; Parameters:    Size  Location     Type
 10156 ;;		None
 10157 ;; Auto vars:     Size  Location     Type
 10158 ;;		None
 10159 ;; Return value:  Size  Location     Type
 10160 ;;                  1    wreg      void 
 10161 ;; Registers used:
 10162 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10163 ;; Tracked objects:
 10164 ;;		On entry : 0/0
 10165 ;;		On exit  : 0/0
 10166 ;;		Unchanged: 0/0
 10167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10168 ;;      Params:         0       0       0       0       0       0       0
 10169 ;;      Locals:         0       0       0       0       0       0       0
 10170 ;;      Temps:          0       0       0       0       0       0       0
 10171 ;;      Totals:         0       0       0       0       0       0       0
 10172 ;;Total ram usage:        0 bytes
 10173 ;; Hardware stack levels used:    1
 10174 ;; Hardware stack levels required when called:    7
 10175 ;; This function calls:
 10176 ;;		_SWSPI_send_word
 10177 ;; This function is called by:
 10178 ;;		_InitSystemApplicationManagers
 10179 ;; This function uses a non-reentrant model
 10180 ;;
 10181                           
 10182                           	psect	text68
 10183  0029AA                     __ptext68:
 10184                           	opt stack 0
 10185  0029AA                     _DacInit:
 10186                           	opt stack 22
 10187                           
 10188                           ;DacApp.c: 26: SWSPI_send_word(EXT_DAC, (0x2344), 1);
 10189                           
 10190                           ;incstack = 0
 10191  0029AA  0E44               	movlw	68
 10192  0029AC  6E26               	movwf	SWSPI_send_word@data,c
 10193  0029AE  0E23               	movlw	35
 10194  0029B0  6E27               	movwf	SWSPI_send_word@data+1,c
 10195  0029B2  0E00               	movlw	0
 10196  0029B4  6E28               	movwf	SWSPI_send_word@data+2,c
 10197  0029B6  0E00               	movlw	0
 10198  0029B8  6E29               	movwf	SWSPI_send_word@data+3,c
 10199  0029BA  0E01               	movlw	1
 10200  0029BC  6E2A               	movwf	SWSPI_send_word@dataSize,c
 10201  0029BE  0E02               	movlw	2
 10202  0029C0  EC3A  F012         	call	_SWSPI_send_word
 10203                           
 10204                           ;DacApp.c: 27: SWSPI_send_word(EXT_DAC, (0x6344), 1);
 10205  0029C4  0E44               	movlw	68
 10206  0029C6  6E26               	movwf	SWSPI_send_word@data,c
 10207  0029C8  0E63               	movlw	99
 10208  0029CA  6E27               	movwf	SWSPI_send_word@data+1,c
 10209  0029CC  0E00               	movlw	0
 10210  0029CE  6E28               	movwf	SWSPI_send_word@data+2,c
 10211  0029D0  0E00               	movlw	0
 10212  0029D2  6E29               	movwf	SWSPI_send_word@data+3,c
 10213  0029D4  0E01               	movlw	1
 10214  0029D6  6E2A               	movwf	SWSPI_send_word@dataSize,c
 10215  0029D8  0E02               	movlw	2
 10216  0029DA  EC3A  F012         	call	_SWSPI_send_word
 10217                           
 10218                           ;DacApp.c: 28: SWSPI_send_word(EXT_DAC, (0xA344), 1);
 10219  0029DE  0E44               	movlw	68
 10220  0029E0  6E26               	movwf	SWSPI_send_word@data,c
 10221  0029E2  0EA3               	movlw	163
 10222  0029E4  6E27               	movwf	SWSPI_send_word@data+1,c
 10223  0029E6  0E00               	movlw	0
 10224  0029E8  6E28               	movwf	SWSPI_send_word@data+2,c
 10225  0029EA  0E00               	movlw	0
 10226  0029EC  6E29               	movwf	SWSPI_send_word@data+3,c
 10227  0029EE  0E01               	movlw	1
 10228  0029F0  6E2A               	movwf	SWSPI_send_word@dataSize,c
 10229  0029F2  0E02               	movlw	2
 10230  0029F4  EC3A  F012         	call	_SWSPI_send_word
 10231                           
 10232                           ;DacApp.c: 29: SWSPI_send_word(EXT_DAC, (0xE344), 1);
 10233  0029F8  0E44               	movlw	68
 10234  0029FA  6E26               	movwf	SWSPI_send_word@data,c
 10235  0029FC  0EE3               	movlw	227
 10236  0029FE  6E27               	movwf	SWSPI_send_word@data+1,c
 10237  002A00  0E00               	movlw	0
 10238  002A02  6E28               	movwf	SWSPI_send_word@data+2,c
 10239  002A04  0E00               	movlw	0
 10240  002A06  6E29               	movwf	SWSPI_send_word@data+3,c
 10241  002A08  0E01               	movlw	1
 10242  002A0A  6E2A               	movwf	SWSPI_send_word@dataSize,c
 10243  002A0C  0E02               	movlw	2
 10244  002A0E  EC3A  F012         	call	_SWSPI_send_word
 10245  002A12  0012               	return		;funcret
 10246  002A14                     __end_of_DacInit:
 10247                           	opt stack 0
 10248                           tosu	equ	0xFFF
 10249                           tosh	equ	0xFFE
 10250                           tosl	equ	0xFFD
 10251                           pclath	equ	0xFFA
 10252                           tblptru	equ	0xFF8
 10253                           tblptrh	equ	0xFF7
 10254                           tblptrl	equ	0xFF6
 10255                           tablat	equ	0xFF5
 10256                           prodh	equ	0xFF4
 10257                           prodl	equ	0xFF3
 10258                           intcon	equ	0xFF2
 10259                           intcon2	equ	0xFF1
 10260                           postinc0	equ	0xFEE
 10261                           wreg	equ	0xFE8
 10262                           indf1	equ	0xFE7
 10263                           postdec1	equ	0xFE5
 10264                           fsr1h	equ	0xFE2
 10265                           fsr1l	equ	0xFE1
 10266                           indf2	equ	0xFDF
 10267                           postinc2	equ	0xFDE
 10268                           postdec2	equ	0xFDD
 10269                           fsr2h	equ	0xFDA
 10270                           fsr2l	equ	0xFD9
 10271                           status	equ	0xFD8
 10272                           
 10273 ;; *************** function _SWSPI_send_word *****************
 10274 ;; Defined at:
 10275 ;;		line 17 in file "SwSpiApp.c"
 10276 ;; Parameters:    Size  Location     Type
 10277 ;;  phrType         1    wreg     enum E7543
 10278 ;;  data            4   37[COMRAM] unsigned long 
 10279 ;;  dataSize        1   41[COMRAM] unsigned char 
 10280 ;; Auto vars:     Size  Location     Type
 10281 ;;  phrType         1   45[COMRAM] enum E7543
 10282 ;;  datac           1   42[COMRAM] unsigned char 
 10283 ;;  idx             2   43[COMRAM] int 
 10284 ;; Return value:  Size  Location     Type
 10285 ;;                  1    wreg      void 
 10286 ;; Registers used:
 10287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10288 ;; Tracked objects:
 10289 ;;		On entry : 0/0
 10290 ;;		On exit  : 0/0
 10291 ;;		Unchanged: 0/0
 10292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10293 ;;      Params:         5       0       0       0       0       0       0
 10294 ;;      Locals:         4       0       0       0       0       0       0
 10295 ;;      Temps:          0       0       0       0       0       0       0
 10296 ;;      Totals:         9       0       0       0       0       0       0
 10297 ;;Total ram usage:        9 bytes
 10298 ;; Hardware stack levels used:    1
 10299 ;; Hardware stack levels required when called:    6
 10300 ;; This function calls:
 10301 ;;		_SWSPI_DAC_send_bits
 10302 ;;		_SWSPI_Synth_send_bits
 10303 ;;		_SwSpi_Set_Dac_Sync_Pin
 10304 ;;		_SwSpi_Set_Synth_Le_Pin
 10305 ;;		_make8
 10306 ;; This function is called by:
 10307 ;;		_DacInit
 10308 ;;		_DacSetValue
 10309 ;;		_PLLInitialize
 10310 ;;		_UpdateTxFreq
 10311 ;;		_UpdateRxFreq
 10312 ;; This function uses a non-reentrant model
 10313 ;;
 10314                           
 10315                           	psect	text69
 10316  002474                     __ptext69:
 10317                           	opt stack 0
 10318  002474                     _SWSPI_send_word:
 10319                           	opt stack 21
 10320                           
 10321                           ;incstack = 0
 10322                           ;SWSPI_send_word@phrType stored from wreg
 10323  002474  6E2E               	movwf	SWSPI_send_word@phrType,c
 10324                           
 10325                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 10326  002476  9EF2               	bcf	intcon,7,c	;volatile
 10327                           
 10328                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 10329  002478  502E               	movf	SWSPI_send_word@phrType,w,c
 10330  00247A  B4D8               	btfsc	status,2,c
 10331  00247C  D003               	goto	u6700
 10332  00247E  042E               	decf	SWSPI_send_word@phrType,w,c
 10333  002480  A4D8               	btfss	status,2,c
 10334  002482  D016               	goto	l573
 10335  002484                     u6700:
 10336                           
 10337                           ;SwSpiApp.c: 24: {
 10338                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 10339  002484  0E00               	movlw	0
 10340  002486  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 10341  002488  502E               	movf	SWSPI_send_word@phrType,w,c
 10342  00248A  EC60  F019         	call	_SwSpi_Set_Synth_Le_Pin
 10343                           
 10344                           ;SwSpiApp.c: 26: SWSPI_Synth_send_bits(phrType, data);
 10345  00248E  C026  F022         	movff	SWSPI_send_word@data,SWSPI_Synth_send_bits@data
 10346  002492  C027  F023         	movff	SWSPI_send_word@data+1,SWSPI_Synth_send_bits@data+1
 10347  002496  C028  F024         	movff	SWSPI_send_word@data+2,SWSPI_Synth_send_bits@data+2
 10348  00249A  C029  F025         	movff	SWSPI_send_word@data+3,SWSPI_Synth_send_bits@data+3
 10349  00249E  502E               	movf	SWSPI_send_word@phrType,w,c
 10350  0024A0  EC34  F011         	call	_SWSPI_Synth_send_bits
 10351                           
 10352                           ;SwSpiApp.c: 27: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 10353  0024A4  0E01               	movlw	1
 10354  0024A6  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 10355  0024A8  502E               	movf	SWSPI_send_word@phrType,w,c
 10356  0024AA  EC60  F019         	call	_SwSpi_Set_Synth_Le_Pin
 10357                           
 10358                           ;SwSpiApp.c: 29: }
 10359  0024AE  D02D               	goto	l577
 10360  0024B0                     l573:
 10361                           
 10362                           ;SwSpiApp.c: 30: else if(phrType == EXT_DAC)
 10363  0024B0  0E02               	movlw	2
 10364  0024B2  182E               	xorwf	SWSPI_send_word@phrType,w,c
 10365  0024B4  A4D8               	btfss	status,2,c
 10366  0024B6  D029               	goto	l577
 10367                           
 10368                           ;SwSpiApp.c: 31: {
 10369                           ;SwSpiApp.c: 32: SwSpi_Set_Dac_Sync_Pin(0);
 10370  0024B8  0E00               	movlw	0
 10371  0024BA  ECC6  F01B         	call	_SwSpi_Set_Dac_Sync_Pin
 10372                           
 10373                           ;SwSpiApp.c: 33: for(int idx = dataSize + 1; idx > 0; idx--)
 10374  0024BE  0E01               	movlw	1
 10375  0024C0  242A               	addwf	SWSPI_send_word@dataSize,w,c
 10376  0024C2  6E2C               	movwf	SWSPI_send_word@idx,c
 10377  0024C4  6A2D               	clrf	SWSPI_send_word@idx+1,c
 10378  0024C6  0E00               	movlw	0
 10379  0024C8  222D               	addwfc	SWSPI_send_word@idx+1,f,c
 10380  0024CA                     l7098:
 10381  0024CA  BE2D               	btfsc	SWSPI_send_word@idx+1,7,c
 10382  0024CC  D01B               	goto	u6730
 10383  0024CE  502D               	movf	SWSPI_send_word@idx+1,w,c
 10384  0024D0  E103               	bnz	l7102
 10385  0024D2  042C               	decf	SWSPI_send_word@idx,w,c
 10386  0024D4  A0D8               	btfss	status,0,c
 10387  0024D6  D016               	goto	u6730
 10388  0024D8                     l7102:
 10389                           
 10390                           ;SwSpiApp.c: 34: {
 10391                           ;SwSpiApp.c: 35: uint8_t datac = make8(data, idx - 1);
 10392  0024D8  C026  F018         	movff	SWSPI_send_word@data,make8@data
 10393  0024DC  C027  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 10394  0024E0  C028  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 10395  0024E4  C029  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 10396  0024E8  042C               	decf	SWSPI_send_word@idx,w,c
 10397  0024EA  6E1C               	movwf	make8@dataLocation,c
 10398  0024EC  ECFA  F015         	call	_make8	;wreg free
 10399  0024F0  6E2B               	movwf	SWSPI_send_word@datac,c
 10400                           
 10401                           ;SwSpiApp.c: 36: SWSPI_DAC_send_bits(phrType, datac);
 10402  0024F2  C02B  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 10403  0024F6  502E               	movf	SWSPI_send_word@phrType,w,c
 10404  0024F8  ECAE  F016         	call	_SWSPI_DAC_send_bits
 10405  0024FC  062C               	decf	SWSPI_send_word@idx,f,c
 10406  0024FE  A0D8               	btfss	status,0,c
 10407  002500  062D               	decf	SWSPI_send_word@idx+1,f,c
 10408  002502  D7E3               	goto	l7098
 10409  002504                     u6730:
 10410                           
 10411                           ;SwSpiApp.c: 37: }
 10412                           ;SwSpiApp.c: 38: SwSpi_Set_Dac_Sync_Pin(1);
 10413  002504  0E01               	movlw	1
 10414  002506  ECC6  F01B         	call	_SwSpi_Set_Dac_Sync_Pin
 10415  00250A                     l577:
 10416                           
 10417                           ;SwSpiApp.c: 39: }
 10418                           ;SwSpiApp.c: 41: (INTCONbits.GIE = 1);
 10419  00250A  8EF2               	bsf	intcon,7,c	;volatile
 10420  00250C  0012               	return		;funcret
 10421  00250E                     __end_of_SWSPI_send_word:
 10422                           	opt stack 0
 10423                           tosu	equ	0xFFF
 10424                           tosh	equ	0xFFE
 10425                           tosl	equ	0xFFD
 10426                           pclath	equ	0xFFA
 10427                           tblptru	equ	0xFF8
 10428                           tblptrh	equ	0xFF7
 10429                           tblptrl	equ	0xFF6
 10430                           tablat	equ	0xFF5
 10431                           prodh	equ	0xFF4
 10432                           prodl	equ	0xFF3
 10433                           intcon	equ	0xFF2
 10434                           intcon2	equ	0xFF1
 10435                           postinc0	equ	0xFEE
 10436                           wreg	equ	0xFE8
 10437                           indf1	equ	0xFE7
 10438                           postdec1	equ	0xFE5
 10439                           fsr1h	equ	0xFE2
 10440                           fsr1l	equ	0xFE1
 10441                           indf2	equ	0xFDF
 10442                           postinc2	equ	0xFDE
 10443                           postdec2	equ	0xFDD
 10444                           fsr2h	equ	0xFDA
 10445                           fsr2l	equ	0xFD9
 10446                           status	equ	0xFD8
 10447                           
 10448 ;; *************** function _make8 *****************
 10449 ;; Defined at:
 10450 ;;		line 67 in file "SystemCommon.c"
 10451 ;; Parameters:    Size  Location     Type
 10452 ;;  data            4   23[COMRAM] unsigned long 
 10453 ;;  dataLocation    1   27[COMRAM] unsigned char 
 10454 ;; Auto vars:     Size  Location     Type
 10455 ;;		None
 10456 ;; Return value:  Size  Location     Type
 10457 ;;                  1    wreg      unsigned char 
 10458 ;; Registers used:
 10459 ;;		wreg, status,2, status,0
 10460 ;; Tracked objects:
 10461 ;;		On entry : 0/0
 10462 ;;		On exit  : 0/0
 10463 ;;		Unchanged: 0/0
 10464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10465 ;;      Params:         5       0       0       0       0       0       0
 10466 ;;      Locals:         0       0       0       0       0       0       0
 10467 ;;      Temps:          4       0       0       0       0       0       0
 10468 ;;      Totals:         9       0       0       0       0       0       0
 10469 ;;Total ram usage:        9 bytes
 10470 ;; Hardware stack levels used:    1
 10471 ;; Hardware stack levels required when called:    3
 10472 ;; This function calls:
 10473 ;;		Nothing
 10474 ;; This function is called by:
 10475 ;;		_FlashReadCondition
 10476 ;;		_SWSPI_send_word
 10477 ;; This function uses a non-reentrant model
 10478 ;;
 10479                           
 10480                           	psect	text70
 10481  002BF4                     __ptext70:
 10482                           	opt stack 0
 10483  002BF4                     _make8:
 10484                           	opt stack 23
 10485                           
 10486                           ;SystemCommon.c: 69: switch(dataLocation)
 10487                           
 10488                           ;incstack = 0
 10489  002BF4  D01F               	goto	l1284
 10490  002BF6                     
 10491                           ;SystemCommon.c: 72: return (data & 0x000000ff);
 10492  002BF6  5018               	movf	make8@data,w,c
 10493  002BF8  0012               	return	
 10494  002BFA                     
 10495                           ;SystemCommon.c: 75: return (data & 0x0000ff00) >> 8;
 10496  002BFA  5019               	movf	make8@data+1,w,c
 10497  002BFC  0012               	return	
 10498  002BFE                     
 10499                           ;SystemCommon.c: 78: return (data & 0x00ff0000) >> 16;
 10500  002BFE  501A               	movf	make8@data+2,w,c
 10501  002C00  0012               	return	
 10502  002C02                     
 10503                           ;SystemCommon.c: 81: return (data & 0xff000000) >> 24;
 10504  002C02  0E00               	movlw	0
 10505  002C04  1418               	andwf	make8@data,w,c
 10506  002C06  6E1D               	movwf	??_make8& (0+255),c
 10507  002C08  0E00               	movlw	0
 10508  002C0A  1419               	andwf	make8@data+1,w,c
 10509  002C0C  6E1E               	movwf	(??_make8+1)& (0+255),c
 10510  002C0E  0E00               	movlw	0
 10511  002C10  141A               	andwf	make8@data+2,w,c
 10512  002C12  6E1F               	movwf	(??_make8+2)& (0+255),c
 10513  002C14  0EFF               	movlw	255
 10514  002C16  141B               	andwf	make8@data+3,w,c
 10515  002C18  6E20               	movwf	(??_make8+3)& (0+255),c
 10516  002C1A  0E19               	movlw	25
 10517  002C1C  D005               	goto	u6100
 10518  002C1E                     u6105:
 10519  002C1E  90D8               	bcf	status,0,c
 10520  002C20  3220               	rrcf	??_make8+3,f,c
 10521  002C22  321F               	rrcf	??_make8+2,f,c
 10522  002C24  321E               	rrcf	??_make8+1,f,c
 10523  002C26  321D               	rrcf	??_make8,f,c
 10524  002C28                     u6100:
 10525  002C28  2EE8               	decfsz	wreg,f,c
 10526  002C2A  D7F9               	goto	u6105
 10527  002C2C  501D               	movf	??_make8,w,c
 10528  002C2E  0012               	return	
 10529  002C30                     
 10530                           ;SystemCommon.c: 84: return (0);
 10531  002C30  0E00               	movlw	0
 10532                           
 10533                           ;SystemCommon.c: 85: }
 10534  002C32  0012               	return	
 10535  002C34                     l1284:
 10536  002C34  501C               	movf	make8@dataLocation,w,c
 10537                           
 10538                           ; Switch size 1, requested type "space"
 10539                           ; Number of cases is 4, Range of values is 0 to 3
 10540                           ; switch strategies available:
 10541                           ; Name         Instructions Cycles
 10542                           ; simple_byte           13     7 (average)
 10543                           ;	Chosen strategy is simple_byte
 10544  002C36  0A00               	xorlw	0	; case 0
 10545  002C38  B4D8               	btfsc	status,2,c
 10546  002C3A  D7DD               	goto	l1285
 10547  002C3C  0A01               	xorlw	1	; case 1
 10548  002C3E  B4D8               	btfsc	status,2,c
 10549  002C40  D7DC               	goto	l1287
 10550  002C42  0A03               	xorlw	3	; case 2
 10551  002C44  B4D8               	btfsc	status,2,c
 10552  002C46  D7DB               	goto	l1288
 10553  002C48  0A01               	xorlw	1	; case 3
 10554  002C4A  B4D8               	btfsc	status,2,c
 10555  002C4C  D7DA               	goto	l1289
 10556  002C4E  D7F0               	goto	l1290
 10557  002C50                     __end_of_make8:
 10558                           	opt stack 0
 10559                           tosu	equ	0xFFF
 10560                           tosh	equ	0xFFE
 10561                           tosl	equ	0xFFD
 10562                           pclath	equ	0xFFA
 10563                           tblptru	equ	0xFF8
 10564                           tblptrh	equ	0xFF7
 10565                           tblptrl	equ	0xFF6
 10566                           tablat	equ	0xFF5
 10567                           prodh	equ	0xFF4
 10568                           prodl	equ	0xFF3
 10569                           intcon	equ	0xFF2
 10570                           intcon2	equ	0xFF1
 10571                           postinc0	equ	0xFEE
 10572                           wreg	equ	0xFE8
 10573                           indf1	equ	0xFE7
 10574                           postdec1	equ	0xFE5
 10575                           fsr1h	equ	0xFE2
 10576                           fsr1l	equ	0xFE1
 10577                           indf2	equ	0xFDF
 10578                           postinc2	equ	0xFDE
 10579                           postdec2	equ	0xFDD
 10580                           fsr2h	equ	0xFDA
 10581                           fsr2l	equ	0xFD9
 10582                           status	equ	0xFD8
 10583                           
 10584 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 10585 ;; Defined at:
 10586 ;;		line 232 in file "SwSpiApp.c"
 10587 ;; Parameters:    Size  Location     Type
 10588 ;;  phrType         1    wreg     enum E7543
 10589 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10590 ;; Auto vars:     Size  Location     Type
 10591 ;;  phrType         1   24[COMRAM] enum E7543
 10592 ;; Return value:  Size  Location     Type
 10593 ;;                  1    wreg      void 
 10594 ;; Registers used:
 10595 ;;		wreg, status,2, status,0
 10596 ;; Tracked objects:
 10597 ;;		On entry : 0/0
 10598 ;;		On exit  : 0/0
 10599 ;;		Unchanged: 0/0
 10600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10601 ;;      Params:         1       0       0       0       0       0       0
 10602 ;;      Locals:         1       0       0       0       0       0       0
 10603 ;;      Temps:          0       0       0       0       0       0       0
 10604 ;;      Totals:         2       0       0       0       0       0       0
 10605 ;;Total ram usage:        2 bytes
 10606 ;; Hardware stack levels used:    1
 10607 ;; Hardware stack levels required when called:    3
 10608 ;; This function calls:
 10609 ;;		Nothing
 10610 ;; This function is called by:
 10611 ;;		_UpdateTxFreq
 10612 ;;		_SWSPI_send_word
 10613 ;; This function uses a non-reentrant model
 10614 ;;
 10615                           
 10616                           	psect	text71
 10617  0032C0                     __ptext71:
 10618                           	opt stack 0
 10619  0032C0                     _SwSpi_Set_Synth_Le_Pin:
 10620                           	opt stack 24
 10621                           
 10622                           ;incstack = 0
 10623                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 10624  0032C0  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 10625                           
 10626                           ;SwSpiApp.c: 234: switch(phrType)
 10627  0032C2  D014               	goto	l685
 10628  0032C4                     
 10629                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 10630  0032C4  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10631  0032C6  A4D8               	btfss	status,2,c
 10632  0032C8  D002               	goto	l687
 10633                           
 10634                           ;SwSpiApp.c: 238: {
 10635                           ;SwSpiApp.c: 239: do { LATCbits.LATC2 = 1; } while(0);
 10636  0032CA  848B               	bsf	3979,2,c	;volatile
 10637                           
 10638                           ;SwSpiApp.c: 240: }
 10639  0032CC  0012               	return	
 10640  0032CE                     l687:
 10641                           
 10642                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 10643  0032CE  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10644  0032D0  A4D8               	btfss	status,2,c
 10645  0032D2  0012               	return	
 10646                           
 10647                           ;SwSpiApp.c: 242: {
 10648                           ;SwSpiApp.c: 243: do { LATCbits.LATC2 = 0; } while(0);
 10649  0032D4  948B               	bcf	3979,2,c	;volatile
 10650                           
 10651                           ;SwSpiApp.c: 244: }
 10652                           ;SwSpiApp.c: 245: break;
 10653  0032D6  0012               	return	
 10654  0032D8                     
 10655                           ;SwSpiApp.c: 248: if(cPinMode == 1)
 10656  0032D8  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10657  0032DA  A4D8               	btfss	status,2,c
 10658  0032DC  D002               	goto	l696
 10659                           
 10660                           ;SwSpiApp.c: 249: {
 10661                           ;SwSpiApp.c: 250: do { LATDbits.LATD3 = 1; } while(0);
 10662  0032DE  868C               	bsf	3980,3,c	;volatile
 10663                           
 10664                           ;SwSpiApp.c: 251: }
 10665  0032E0  0012               	return	
 10666  0032E2                     l696:
 10667                           
 10668                           ;SwSpiApp.c: 252: else if(cPinMode == 0)
 10669  0032E2  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10670  0032E4  A4D8               	btfss	status,2,c
 10671  0032E6  0012               	return	
 10672                           
 10673                           ;SwSpiApp.c: 253: {
 10674                           ;SwSpiApp.c: 254: do { LATDbits.LATD3 = 0; } while(0);
 10675  0032E8  968C               	bcf	3980,3,c	;volatile
 10676                           
 10677                           ;SwSpiApp.c: 257: }
 10678                           
 10679                           ;SwSpiApp.c: 255: }
 10680                           ;SwSpiApp.c: 256: break;
 10681  0032EA  0012               	return	
 10682  0032EC                     l685:
 10683  0032EC  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 10684                           
 10685                           ; Switch size 1, requested type "space"
 10686                           ; Number of cases is 2, Range of values is 0 to 1
 10687                           ; switch strategies available:
 10688                           ; Name         Instructions Cycles
 10689                           ; simple_byte            7     4 (average)
 10690                           ;	Chosen strategy is simple_byte
 10691  0032EE  0A00               	xorlw	0	; case 0
 10692  0032F0  B4D8               	btfsc	status,2,c
 10693  0032F2  D7E8               	goto	l686
 10694  0032F4  0A01               	xorlw	1	; case 1
 10695  0032F6  A4D8               	btfss	status,2,c
 10696  0032F8  0012               	return	
 10697  0032FA  D7EE               	goto	l695
 10698  0032FC                     __end_of_SwSpi_Set_Synth_Le_Pin:
 10699                           	opt stack 0
 10700                           tosu	equ	0xFFF
 10701                           tosh	equ	0xFFE
 10702                           tosl	equ	0xFFD
 10703                           pclath	equ	0xFFA
 10704                           tblptru	equ	0xFF8
 10705                           tblptrh	equ	0xFF7
 10706                           tblptrl	equ	0xFF6
 10707                           tablat	equ	0xFF5
 10708                           prodh	equ	0xFF4
 10709                           prodl	equ	0xFF3
 10710                           intcon	equ	0xFF2
 10711                           intcon2	equ	0xFF1
 10712                           postinc0	equ	0xFEE
 10713                           wreg	equ	0xFE8
 10714                           indf1	equ	0xFE7
 10715                           postdec1	equ	0xFE5
 10716                           fsr1h	equ	0xFE2
 10717                           fsr1l	equ	0xFE1
 10718                           indf2	equ	0xFDF
 10719                           postinc2	equ	0xFDE
 10720                           postdec2	equ	0xFDD
 10721                           fsr2h	equ	0xFDA
 10722                           fsr2l	equ	0xFD9
 10723                           status	equ	0xFD8
 10724                           
 10725 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 10726 ;; Defined at:
 10727 ;;		line 260 in file "SwSpiApp.c"
 10728 ;; Parameters:    Size  Location     Type
 10729 ;;  cPinMode        1    wreg     unsigned char 
 10730 ;; Auto vars:     Size  Location     Type
 10731 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10732 ;; Return value:  Size  Location     Type
 10733 ;;                  1    wreg      void 
 10734 ;; Registers used:
 10735 ;;		wreg, status,2, status,0
 10736 ;; Tracked objects:
 10737 ;;		On entry : 0/0
 10738 ;;		On exit  : 0/0
 10739 ;;		Unchanged: 0/0
 10740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10741 ;;      Params:         0       0       0       0       0       0       0
 10742 ;;      Locals:         1       0       0       0       0       0       0
 10743 ;;      Temps:          0       0       0       0       0       0       0
 10744 ;;      Totals:         1       0       0       0       0       0       0
 10745 ;;Total ram usage:        1 bytes
 10746 ;; Hardware stack levels used:    1
 10747 ;; Hardware stack levels required when called:    3
 10748 ;; This function calls:
 10749 ;;		Nothing
 10750 ;; This function is called by:
 10751 ;;		_SWSPI_send_word
 10752 ;; This function uses a non-reentrant model
 10753 ;;
 10754                           
 10755                           	psect	text72
 10756  00378C                     __ptext72:
 10757                           	opt stack 0
 10758  00378C                     _SwSpi_Set_Dac_Sync_Pin:
 10759                           	opt stack 23
 10760                           
 10761                           ;incstack = 0
 10762                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 10763  00378C  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 10764                           
 10765                           ;SwSpiApp.c: 262: switch(cPinMode)
 10766  00378E  D004               	goto	l706
 10767  003790                     
 10768                           ;SwSpiApp.c: 265: do { LATAbits.LATA2 = 0; } while(0);
 10769  003790  9489               	bcf	3977,2,c	;volatile
 10770                           
 10771                           ;SwSpiApp.c: 266: break;
 10772  003792  0012               	return	
 10773  003794                     
 10774                           ;SwSpiApp.c: 269: do { LATAbits.LATA2 = 1; } while(0);
 10775  003794  8489               	bsf	3977,2,c	;volatile
 10776                           
 10777                           ;SwSpiApp.c: 271: }
 10778                           
 10779                           ;SwSpiApp.c: 270: break;
 10780  003796  0012               	return	
 10781  003798                     l706:
 10782  003798  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 10783                           
 10784                           ; Switch size 1, requested type "space"
 10785                           ; Number of cases is 2, Range of values is 0 to 1
 10786                           ; switch strategies available:
 10787                           ; Name         Instructions Cycles
 10788                           ; simple_byte            7     4 (average)
 10789                           ;	Chosen strategy is simple_byte
 10790  00379A  0A00               	xorlw	0	; case 0
 10791  00379C  B4D8               	btfsc	status,2,c
 10792  00379E  D7F8               	goto	l707
 10793  0037A0  0A01               	xorlw	1	; case 1
 10794  0037A2  A4D8               	btfss	status,2,c
 10795  0037A4  0012               	return	
 10796  0037A6  D7F6               	goto	l711
 10797  0037A8                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 10798                           	opt stack 0
 10799                           tosu	equ	0xFFF
 10800                           tosh	equ	0xFFE
 10801                           tosl	equ	0xFFD
 10802                           pclath	equ	0xFFA
 10803                           tblptru	equ	0xFF8
 10804                           tblptrh	equ	0xFF7
 10805                           tblptrl	equ	0xFF6
 10806                           tablat	equ	0xFF5
 10807                           prodh	equ	0xFF4
 10808                           prodl	equ	0xFF3
 10809                           intcon	equ	0xFF2
 10810                           intcon2	equ	0xFF1
 10811                           postinc0	equ	0xFEE
 10812                           wreg	equ	0xFE8
 10813                           indf1	equ	0xFE7
 10814                           postdec1	equ	0xFE5
 10815                           fsr1h	equ	0xFE2
 10816                           fsr1l	equ	0xFE1
 10817                           indf2	equ	0xFDF
 10818                           postinc2	equ	0xFDE
 10819                           postdec2	equ	0xFDD
 10820                           fsr2h	equ	0xFDA
 10821                           fsr2l	equ	0xFD9
 10822                           status	equ	0xFD8
 10823                           
 10824 ;; *************** function _SWSPI_Synth_send_bits *****************
 10825 ;; Defined at:
 10826 ;;		line 68 in file "SwSpiApp.c"
 10827 ;; Parameters:    Size  Location     Type
 10828 ;;  phrType         1    wreg     enum E7543
 10829 ;;  data            4   33[COMRAM] unsigned long 
 10830 ;; Auto vars:     Size  Location     Type
 10831 ;;  phrType         1   37[BANK0 ] enum E7543
 10832 ;;  bitArray       32    0[BANK0 ] unsigned char [32]
 10833 ;;  mask            4   32[BANK0 ] unsigned long 
 10834 ;;  count           1   36[BANK0 ] unsigned char 
 10835 ;; Return value:  Size  Location     Type
 10836 ;;                  1    wreg      void 
 10837 ;; Registers used:
 10838 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10839 ;; Tracked objects:
 10840 ;;		On entry : 0/0
 10841 ;;		On exit  : 0/0
 10842 ;;		Unchanged: 0/0
 10843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10844 ;;      Params:         4       0       0       0       0       0       0
 10845 ;;      Locals:         0      38       0       0       0       0       0
 10846 ;;      Temps:          0       0       0       0       0       0       0
 10847 ;;      Totals:         4      38       0       0       0       0       0
 10848 ;;Total ram usage:       42 bytes
 10849 ;; Hardware stack levels used:    1
 10850 ;; Hardware stack levels required when called:    5
 10851 ;; This function calls:
 10852 ;;		_Make32bitsArray
 10853 ;;		_SwSpi_Clk_Pin
 10854 ;;		_SwSpi_Data_Pin
 10855 ;;		_ZeroBitsArray
 10856 ;; This function is called by:
 10857 ;;		_SWSPI_send_word
 10858 ;; This function uses a non-reentrant model
 10859 ;;
 10860                           
 10861                           	psect	text73
 10862  002268                     __ptext73:
 10863                           	opt stack 0
 10864  002268                     _SWSPI_Synth_send_bits:
 10865                           	opt stack 21
 10866                           
 10867                           ;incstack = 0
 10868                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 10869  002268  0100               	movlb	0	; () banked
 10870  00226A  6F85               	movwf	SWSPI_Synth_send_bits@phrType& (0+255),b
 10871                           
 10872                           ;SwSpiApp.c: 70: uint8_t count;
 10873                           ;SwSpiApp.c: 71: uint32_t mask = 0x1;
 10874  00226C  0E01               	movlw	1
 10875  00226E  0100               	movlb	0	; () banked
 10876  002270  6F80               	movwf	SWSPI_Synth_send_bits@mask& (0+255),b
 10877  002272  0E00               	movlw	0
 10878  002274  6F81               	movwf	(SWSPI_Synth_send_bits@mask+1)& (0+255),b
 10879  002276  0E00               	movlw	0
 10880  002278  6F82               	movwf	(SWSPI_Synth_send_bits@mask+2)& (0+255),b
 10881  00227A  0E00               	movlw	0
 10882  00227C  6F83               	movwf	(SWSPI_Synth_send_bits@mask+3)& (0+255),b
 10883                           
 10884                           ; BSR set to: 0
 10885                           ;SwSpiApp.c: 73: bool bitArray[32];
 10886                           ;SwSpiApp.c: 74: ZeroBitsArray(bitArray);
 10887  00227E  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 10888  002280  6E20               	movwf	ZeroBitsArray@array,c
 10889  002282  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 10890  002284  6E21               	movwf	ZeroBitsArray@array+1,c
 10891  002286  ECB7  F01B         	call	_ZeroBitsArray	;wreg free
 10892                           
 10893                           ;SwSpiApp.c: 76: Make32bitsArray(bitArray, data);
 10894  00228A  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 10895  00228C  6E18               	movwf	Make32bitsArray@array,c
 10896  00228E  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 10897  002290  6E19               	movwf	Make32bitsArray@array+1,c
 10898  002292  C022  F01A         	movff	SWSPI_Synth_send_bits@data,Make32bitsArray@data
 10899  002296  C023  F01B         	movff	SWSPI_Synth_send_bits@data+1,Make32bitsArray@data+1
 10900  00229A  C024  F01C         	movff	SWSPI_Synth_send_bits@data+2,Make32bitsArray@data+2
 10901  00229E  C025  F01D         	movff	SWSPI_Synth_send_bits@data+3,Make32bitsArray@data+3
 10902  0022A2  EC82  F016         	call	_Make32bitsArray	;wreg free
 10903                           
 10904                           ;SwSpiApp.c: 78: for (count = 0; count <= 31 ; count++)
 10905  0022A6  0E00               	movlw	0
 10906  0022A8  0100               	movlb	0	; () banked
 10907  0022AA  6F84               	movwf	SWSPI_Synth_send_bits@count& (0+255),b
 10908  0022AC                     l6794:
 10909                           
 10910                           ; BSR set to: 0
 10911  0022AC  0E1F               	movlw	31
 10912  0022AE  6584               	cpfsgt	SWSPI_Synth_send_bits@count& (0+255),b
 10913  0022B0  D001               	goto	l591
 10914  0022B2  D026               	goto	u6190
 10915  0022B4                     l591:
 10916                           
 10917                           ; BSR set to: 0
 10918                           ;SwSpiApp.c: 79: {
 10919                           ;SwSpiApp.c: 81: SwSpi_Clk_Pin(phrType, 0);
 10920                           
 10921                           ; BSR set to: 0
 10922  0022B4  0E00               	movlw	0
 10923  0022B6  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10924  0022B8  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10925  0022BA  EC30  F017         	call	_SwSpi_Clk_Pin
 10926                           
 10927                           ;SwSpiApp.c: 83: if (bitArray[count])
 10928  0022BE  0100               	movlb	0	; () banked
 10929  0022C0  5184               	movf	SWSPI_Synth_send_bits@count& (0+255),w,b
 10930  0022C2  0D01               	mullw	1
 10931  0022C4  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 10932  0022C6  24F3               	addwf	prodl,w,c
 10933  0022C8  6ED9               	movwf	fsr2l,c
 10934  0022CA  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 10935  0022CC  20F4               	addwfc	prodh,w,c
 10936  0022CE  6EDA               	movwf	fsr2h,c
 10937  0022D0  50DF               	movf	indf2,w,c
 10938  0022D2  B4D8               	btfsc	status,2,c
 10939  0022D4  D006               	goto	l593
 10940                           
 10941                           ; BSR set to: 0
 10942                           ;SwSpiApp.c: 84: {
 10943                           ;SwSpiApp.c: 85: SwSpi_Data_Pin(phrType, 1);
 10944  0022D6  0E01               	movlw	1
 10945  0022D8  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 10946  0022DA  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10947  0022DC  EC05  F017         	call	_SwSpi_Data_Pin
 10948                           
 10949                           ;SwSpiApp.c: 86: }
 10950  0022E0  D006               	goto	l594
 10951  0022E2                     l593:
 10952                           
 10953                           ;SwSpiApp.c: 87: else
 10954                           ;SwSpiApp.c: 88: {
 10955                           ;SwSpiApp.c: 89: SwSpi_Data_Pin(phrType, 0);
 10956  0022E2  0E00               	movlw	0
 10957  0022E4  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 10958  0022E6  0100               	movlb	0	; () banked
 10959  0022E8  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10960  0022EA  EC05  F017         	call	_SwSpi_Data_Pin
 10961  0022EE                     l594:
 10962                           
 10963                           ;SwSpiApp.c: 90: }
 10964                           ;SwSpiApp.c: 92: SwSpi_Clk_Pin(phrType, 1);
 10965  0022EE  0E01               	movlw	1
 10966  0022F0  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10967  0022F2  0100               	movlb	0	; () banked
 10968  0022F4  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10969  0022F6  EC30  F017         	call	_SwSpi_Clk_Pin
 10970  0022FA  0100               	movlb	0	; () banked
 10971  0022FC  2B84               	incf	SWSPI_Synth_send_bits@count& (0+255),f,b
 10972  0022FE  D7D6               	goto	l6794
 10973  002300                     u6190:
 10974                           
 10975                           ; BSR set to: 0
 10976                           ;SwSpiApp.c: 93: }
 10977                           ;SwSpiApp.c: 95: SwSpi_Data_Pin(phrType, 0);
 10978                           
 10979                           ; BSR set to: 0
 10980  002300  0E00               	movlw	0
 10981  002302  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 10982  002304  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10983  002306  EC05  F017         	call	_SwSpi_Data_Pin
 10984                           
 10985                           ;SwSpiApp.c: 96: SwSpi_Clk_Pin(phrType, 0);
 10986  00230A  0E00               	movlw	0
 10987  00230C  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10988  00230E  0100               	movlb	0	; () banked
 10989  002310  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10990  002312  EC30  F017         	call	_SwSpi_Clk_Pin
 10991  002316  0012               	return		;funcret
 10992  002318                     __end_of_SWSPI_Synth_send_bits:
 10993                           	opt stack 0
 10994                           tosu	equ	0xFFF
 10995                           tosh	equ	0xFFE
 10996                           tosl	equ	0xFFD
 10997                           pclath	equ	0xFFA
 10998                           tblptru	equ	0xFF8
 10999                           tblptrh	equ	0xFF7
 11000                           tblptrl	equ	0xFF6
 11001                           tablat	equ	0xFF5
 11002                           prodh	equ	0xFF4
 11003                           prodl	equ	0xFF3
 11004                           intcon	equ	0xFF2
 11005                           intcon2	equ	0xFF1
 11006                           postinc0	equ	0xFEE
 11007                           wreg	equ	0xFE8
 11008                           indf1	equ	0xFE7
 11009                           postdec1	equ	0xFE5
 11010                           fsr1h	equ	0xFE2
 11011                           fsr1l	equ	0xFE1
 11012                           indf2	equ	0xFDF
 11013                           postinc2	equ	0xFDE
 11014                           postdec2	equ	0xFDD
 11015                           fsr2h	equ	0xFDA
 11016                           fsr2l	equ	0xFD9
 11017                           status	equ	0xFD8
 11018                           
 11019 ;; *************** function _ZeroBitsArray *****************
 11020 ;; Defined at:
 11021 ;;		line 29 in file "SystemCommon.c"
 11022 ;; Parameters:    Size  Location     Type
 11023 ;;  array           2   31[COMRAM] PTR unsigned char 
 11024 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 11025 ;; Auto vars:     Size  Location     Type
 11026 ;;		None
 11027 ;; Return value:  Size  Location     Type
 11028 ;;                  1    wreg      void 
 11029 ;; Registers used:
 11030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11031 ;; Tracked objects:
 11032 ;;		On entry : 0/0
 11033 ;;		On exit  : 0/0
 11034 ;;		Unchanged: 0/0
 11035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11036 ;;      Params:         2       0       0       0       0       0       0
 11037 ;;      Locals:         0       0       0       0       0       0       0
 11038 ;;      Temps:          0       0       0       0       0       0       0
 11039 ;;      Totals:         2       0       0       0       0       0       0
 11040 ;;Total ram usage:        2 bytes
 11041 ;; Hardware stack levels used:    1
 11042 ;; Hardware stack levels required when called:    4
 11043 ;; This function calls:
 11044 ;;		_memset
 11045 ;; This function is called by:
 11046 ;;		_SWSPI_Synth_send_bits
 11047 ;; This function uses a non-reentrant model
 11048 ;;
 11049                           
 11050                           	psect	text74
 11051  00376E                     __ptext74:
 11052                           	opt stack 0
 11053  00376E                     _ZeroBitsArray:
 11054                           	opt stack 21
 11055                           
 11056                           ;SystemCommon.c: 31: memset(array, 0x0, 32);
 11057                           
 11058                           ;incstack = 0
 11059  00376E  C020  F018         	movff	ZeroBitsArray@array,memset@p1
 11060  003772  C021  F019         	movff	ZeroBitsArray@array+1,memset@p1+1
 11061  003776  0E00               	movlw	0
 11062  003778  6E1B               	movwf	memset@c+1,c
 11063  00377A  0E00               	movlw	0
 11064  00377C  6E1A               	movwf	memset@c,c
 11065  00377E  0E00               	movlw	0
 11066  003780  6E1D               	movwf	memset@n+1,c
 11067  003782  0E20               	movlw	32
 11068  003784  6E1C               	movwf	memset@n,c
 11069  003786  ECB8  F01A         	call	_memset	;wreg free
 11070  00378A  0012               	return		;funcret
 11071  00378C                     __end_of_ZeroBitsArray:
 11072                           	opt stack 0
 11073                           tosu	equ	0xFFF
 11074                           tosh	equ	0xFFE
 11075                           tosl	equ	0xFFD
 11076                           pclath	equ	0xFFA
 11077                           tblptru	equ	0xFF8
 11078                           tblptrh	equ	0xFF7
 11079                           tblptrl	equ	0xFF6
 11080                           tablat	equ	0xFF5
 11081                           prodh	equ	0xFF4
 11082                           prodl	equ	0xFF3
 11083                           intcon	equ	0xFF2
 11084                           intcon2	equ	0xFF1
 11085                           postinc0	equ	0xFEE
 11086                           wreg	equ	0xFE8
 11087                           indf1	equ	0xFE7
 11088                           postdec1	equ	0xFE5
 11089                           fsr1h	equ	0xFE2
 11090                           fsr1l	equ	0xFE1
 11091                           indf2	equ	0xFDF
 11092                           postinc2	equ	0xFDE
 11093                           postdec2	equ	0xFDD
 11094                           fsr2h	equ	0xFDA
 11095                           fsr2l	equ	0xFD9
 11096                           status	equ	0xFD8
 11097                           
 11098 ;; *************** function _memset *****************
 11099 ;; Defined at:
 11100 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 11101 ;; Parameters:    Size  Location     Type
 11102 ;;  p1              2   23[COMRAM] PTR void 
 11103 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(9), SWSPI_Synth_send_bits@bit
      +Array(32), 
 11104 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), 
 11105 ;;		 -> rxMsgData(20), rxMsgQueue(20), 
 11106 ;;  c               2   25[COMRAM] int 
 11107 ;;  n               2   27[COMRAM] unsigned int 
 11108 ;; Auto vars:     Size  Location     Type
 11109 ;;  p               2   29[COMRAM] PTR unsigned char 
 11110 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(9), SWSPI_Synth_send_bits@bit
      +Array(32), 
 11111 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), 
 11112 ;;		 -> rxMsgData(20), rxMsgQueue(20), 
 11113 ;; Return value:  Size  Location     Type
 11114 ;;                  2   23[COMRAM] PTR void 
 11115 ;; Registers used:
 11116 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11117 ;; Tracked objects:
 11118 ;;		On entry : 0/0
 11119 ;;		On exit  : 0/0
 11120 ;;		Unchanged: 0/0
 11121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11122 ;;      Params:         6       0       0       0       0       0       0
 11123 ;;      Locals:         2       0       0       0       0       0       0
 11124 ;;      Temps:          0       0       0       0       0       0       0
 11125 ;;      Totals:         8       0       0       0       0       0       0
 11126 ;;Total ram usage:        8 bytes
 11127 ;; Hardware stack levels used:    1
 11128 ;; Hardware stack levels required when called:    3
 11129 ;; This function calls:
 11130 ;;		Nothing
 11131 ;; This function is called by:
 11132 ;;		_ZeroArray
 11133 ;;		_ZeroBitsArray
 11134 ;; This function uses a non-reentrant model
 11135 ;;
 11136                           
 11137                           	psect	text75
 11138  003570                     __ptext75:
 11139                           	opt stack 0
 11140  003570                     _memset:
 11141                           	opt stack 25
 11142                           
 11143                           ;incstack = 0
 11144  003570  C018  F01E         	movff	memset@p1,memset@p
 11145  003574  C019  F01F         	movff	memset@p1+1,memset@p+1
 11146  003578  D008               	goto	l1873
 11147  00357A                     l6502:
 11148  00357A  C01E  FFD9         	movff	memset@p,fsr2l
 11149  00357E  C01F  FFDA         	movff	memset@p+1,fsr2h
 11150  003582  C01A  FFDF         	movff	memset@c,indf2
 11151  003586  4A1E               	infsnz	memset@p,f,c
 11152  003588  2A1F               	incf	memset@p+1,f,c
 11153  00358A                     l1873:
 11154  00358A  061C               	decf	memset@n,f,c
 11155  00358C  A0D8               	btfss	status,0,c
 11156  00358E  061D               	decf	memset@n+1,f,c
 11157  003590  281C               	incf	memset@n,w,c
 11158  003592  E1F3               	bnz	l6502
 11159  003594  281D               	incf	memset@n+1,w,c
 11160  003596  B4D8               	btfsc	status,2,c
 11161  003598  0012               	return	
 11162  00359A  D7EF               	goto	l1874
 11163  00359C                     __end_of_memset:
 11164                           	opt stack 0
 11165                           tosu	equ	0xFFF
 11166                           tosh	equ	0xFFE
 11167                           tosl	equ	0xFFD
 11168                           pclath	equ	0xFFA
 11169                           tblptru	equ	0xFF8
 11170                           tblptrh	equ	0xFF7
 11171                           tblptrl	equ	0xFF6
 11172                           tablat	equ	0xFF5
 11173                           prodh	equ	0xFF4
 11174                           prodl	equ	0xFF3
 11175                           intcon	equ	0xFF2
 11176                           intcon2	equ	0xFF1
 11177                           postinc0	equ	0xFEE
 11178                           wreg	equ	0xFE8
 11179                           indf1	equ	0xFE7
 11180                           postdec1	equ	0xFE5
 11181                           fsr1h	equ	0xFE2
 11182                           fsr1l	equ	0xFE1
 11183                           indf2	equ	0xFDF
 11184                           postinc2	equ	0xFDE
 11185                           postdec2	equ	0xFDD
 11186                           fsr2h	equ	0xFDA
 11187                           fsr2l	equ	0xFD9
 11188                           status	equ	0xFD8
 11189                           
 11190 ;; *************** function _Make32bitsArray *****************
 11191 ;; Defined at:
 11192 ;;		line 88 in file "SystemCommon.c"
 11193 ;; Parameters:    Size  Location     Type
 11194 ;;  array           2   23[COMRAM] PTR unsigned char 
 11195 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 11196 ;;  data            4   25[COMRAM] unsigned long 
 11197 ;; Auto vars:     Size  Location     Type
 11198 ;;  idx             2   31[COMRAM] int 
 11199 ;; Return value:  Size  Location     Type
 11200 ;;                  1    wreg      void 
 11201 ;; Registers used:
 11202 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11203 ;; Tracked objects:
 11204 ;;		On entry : 0/0
 11205 ;;		On exit  : 0/0
 11206 ;;		Unchanged: 0/0
 11207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11208 ;;      Params:         6       0       0       0       0       0       0
 11209 ;;      Locals:         2       0       0       0       0       0       0
 11210 ;;      Temps:          2       0       0       0       0       0       0
 11211 ;;      Totals:        10       0       0       0       0       0       0
 11212 ;;Total ram usage:       10 bytes
 11213 ;; Hardware stack levels used:    1
 11214 ;; Hardware stack levels required when called:    3
 11215 ;; This function calls:
 11216 ;;		Nothing
 11217 ;; This function is called by:
 11218 ;;		_SWSPI_Synth_send_bits
 11219 ;; This function uses a non-reentrant model
 11220 ;;
 11221                           
 11222                           	psect	text76
 11223  002D04                     __ptext76:
 11224                           	opt stack 0
 11225  002D04                     _Make32bitsArray:
 11226                           	opt stack 22
 11227                           
 11228                           ;SystemCommon.c: 90: for(int idx = 0; idx <= 32; idx++)
 11229                           
 11230                           ;incstack = 0
 11231  002D04  0E00               	movlw	0
 11232  002D06  6E21               	movwf	Make32bitsArray@idx+1,c
 11233  002D08  0E00               	movlw	0
 11234  002D0A  6E20               	movwf	Make32bitsArray@idx,c
 11235  002D0C                     l6578:
 11236  002D0C  BE21               	btfsc	Make32bitsArray@idx+1,7,c
 11237  002D0E  D006               	goto	l1294
 11238  002D10  5021               	movf	Make32bitsArray@idx+1,w,c
 11239  002D12  E123               	bnz	l1296
 11240  002D14  0E21               	movlw	33
 11241  002D16  5C20               	subwf	Make32bitsArray@idx,w,c
 11242  002D18  B0D8               	btfsc	status,0,c
 11243  002D1A  0012               	return	
 11244  002D1C                     l1294:
 11245                           
 11246                           ;SystemCommon.c: 91: {
 11247                           ;SystemCommon.c: 92: array[32 - idx - 1] = data % 2;
 11248  002D1C  0E01               	movlw	1
 11249  002D1E  2420               	addwf	Make32bitsArray@idx,w,c
 11250  002D20  6E1E               	movwf	??_Make32bitsArray& (0+255),c
 11251  002D22  0E00               	movlw	0
 11252  002D24  2021               	addwfc	Make32bitsArray@idx+1,w,c
 11253  002D26  6E1F               	movwf	(??_Make32bitsArray+1)& (0+255),c
 11254  002D28  1E1E               	comf	??_Make32bitsArray,f,c
 11255  002D2A  1E1F               	comf	??_Make32bitsArray+1,f,c
 11256  002D2C  4A1E               	infsnz	??_Make32bitsArray,f,c
 11257  002D2E  2A1F               	incf	??_Make32bitsArray+1,f,c
 11258  002D30  0E20               	movlw	32
 11259  002D32  261E               	addwf	??_Make32bitsArray,f,c
 11260  002D34  0E00               	movlw	0
 11261  002D36  221F               	addwfc	??_Make32bitsArray+1,f,c
 11262  002D38  501E               	movf	??_Make32bitsArray,w,c
 11263  002D3A  2418               	addwf	Make32bitsArray@array,w,c
 11264  002D3C  6ED9               	movwf	fsr2l,c
 11265  002D3E  501F               	movf	??_Make32bitsArray+1,w,c
 11266  002D40  2019               	addwfc	Make32bitsArray@array+1,w,c
 11267  002D42  6EDA               	movwf	fsr2h,c
 11268  002D44  501A               	movf	Make32bitsArray@data,w,c
 11269  002D46  0B01               	andlw	1
 11270  002D48  6EDF               	movwf	indf2,c
 11271                           
 11272                           ;SystemCommon.c: 93: data /= 2;
 11273  002D4A  90D8               	bcf	status,0,c
 11274  002D4C  321D               	rrcf	Make32bitsArray@data+3,f,c
 11275  002D4E  321C               	rrcf	Make32bitsArray@data+2,f,c
 11276  002D50  321B               	rrcf	Make32bitsArray@data+1,f,c
 11277  002D52  321A               	rrcf	Make32bitsArray@data,f,c
 11278  002D54  4A20               	infsnz	Make32bitsArray@idx,f,c
 11279  002D56  2A21               	incf	Make32bitsArray@idx+1,f,c
 11280  002D58  D7D9               	goto	l6578
 11281  002D5A                     l1296:
 11282  002D5A  0012               	return		;funcret
 11283  002D5C                     __end_of_Make32bitsArray:
 11284                           	opt stack 0
 11285                           tosu	equ	0xFFF
 11286                           tosh	equ	0xFFE
 11287                           tosl	equ	0xFFD
 11288                           pclath	equ	0xFFA
 11289                           tblptru	equ	0xFF8
 11290                           tblptrh	equ	0xFF7
 11291                           tblptrl	equ	0xFF6
 11292                           tablat	equ	0xFF5
 11293                           prodh	equ	0xFF4
 11294                           prodl	equ	0xFF3
 11295                           intcon	equ	0xFF2
 11296                           intcon2	equ	0xFF1
 11297                           postinc0	equ	0xFEE
 11298                           wreg	equ	0xFE8
 11299                           indf1	equ	0xFE7
 11300                           postdec1	equ	0xFE5
 11301                           fsr1h	equ	0xFE2
 11302                           fsr1l	equ	0xFE1
 11303                           indf2	equ	0xFDF
 11304                           postinc2	equ	0xFDE
 11305                           postdec2	equ	0xFDD
 11306                           fsr2h	equ	0xFDA
 11307                           fsr2l	equ	0xFD9
 11308                           status	equ	0xFD8
 11309                           
 11310 ;; *************** function _SWSPI_DAC_send_bits *****************
 11311 ;; Defined at:
 11312 ;;		line 44 in file "SwSpiApp.c"
 11313 ;; Parameters:    Size  Location     Type
 11314 ;;  phrType         1    wreg     enum E7543
 11315 ;;  data            1   25[COMRAM] unsigned char 
 11316 ;; Auto vars:     Size  Location     Type
 11317 ;;  phrType         1   27[COMRAM] enum E7543
 11318 ;;  count           1   26[COMRAM] unsigned char 
 11319 ;; Return value:  Size  Location     Type
 11320 ;;                  1    wreg      void 
 11321 ;; Registers used:
 11322 ;;		wreg, status,2, status,0, cstack
 11323 ;; Tracked objects:
 11324 ;;		On entry : 0/0
 11325 ;;		On exit  : 0/0
 11326 ;;		Unchanged: 0/0
 11327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11328 ;;      Params:         1       0       0       0       0       0       0
 11329 ;;      Locals:         2       0       0       0       0       0       0
 11330 ;;      Temps:          0       0       0       0       0       0       0
 11331 ;;      Totals:         3       0       0       0       0       0       0
 11332 ;;Total ram usage:        3 bytes
 11333 ;; Hardware stack levels used:    1
 11334 ;; Hardware stack levels required when called:    4
 11335 ;; This function calls:
 11336 ;;		_SwSpi_Clk_Pin
 11337 ;;		_SwSpi_Data_Pin
 11338 ;; This function is called by:
 11339 ;;		_SWSPI_send_word
 11340 ;; This function uses a non-reentrant model
 11341 ;;
 11342                           
 11343                           	psect	text77
 11344  002D5C                     __ptext77:
 11345                           	opt stack 0
 11346  002D5C                     _SWSPI_DAC_send_bits:
 11347                           	opt stack 22
 11348                           
 11349                           ;incstack = 0
 11350                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 11351  002D5C  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 11352                           
 11353                           ;SwSpiApp.c: 46: uint8_t count;
 11354                           ;SwSpiApp.c: 47: for (count = 8; count ; count--, data <<= 1)
 11355  002D5E  0E08               	movlw	8
 11356  002D60  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 11357  002D62  D01A               	goto	l583
 11358  002D64                     
 11359                           ;SwSpiApp.c: 48: {
 11360                           ;SwSpiApp.c: 49: SwSpi_Clk_Pin(phrType, 1);
 11361  002D64  0E01               	movlw	1
 11362  002D66  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11363  002D68  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11364  002D6A  EC30  F017         	call	_SwSpi_Clk_Pin
 11365                           
 11366                           ;SwSpiApp.c: 51: if (data & 0X80)
 11367  002D6E  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 11368  002D70  D006               	goto	l585
 11369                           
 11370                           ;SwSpiApp.c: 52: {
 11371                           ;SwSpiApp.c: 54: SwSpi_Data_Pin(phrType, 1);
 11372  002D72  0E01               	movlw	1
 11373  002D74  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11374  002D76  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11375  002D78  EC05  F017         	call	_SwSpi_Data_Pin
 11376                           
 11377                           ;SwSpiApp.c: 55: }
 11378  002D7C  D005               	goto	l586
 11379  002D7E                     l585:
 11380                           
 11381                           ;SwSpiApp.c: 56: else
 11382                           ;SwSpiApp.c: 57: {
 11383                           ;SwSpiApp.c: 58: SwSpi_Data_Pin(phrType, 0);
 11384  002D7E  0E00               	movlw	0
 11385  002D80  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11386  002D82  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11387  002D84  EC05  F017         	call	_SwSpi_Data_Pin
 11388  002D88                     l586:
 11389                           
 11390                           ;SwSpiApp.c: 59: }
 11391                           ;SwSpiApp.c: 61: SwSpi_Clk_Pin(phrType, 0);
 11392  002D88  0E00               	movlw	0
 11393  002D8A  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11394  002D8C  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11395  002D8E  EC30  F017         	call	_SwSpi_Clk_Pin
 11396  002D92  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 11397  002D94  90D8               	bcf	status,0,c
 11398  002D96  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 11399  002D98                     l583:
 11400  002D98  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 11401  002D9A  A4D8               	btfss	status,2,c
 11402  002D9C  D7E3               	goto	l584
 11403                           
 11404                           ;SwSpiApp.c: 62: }
 11405                           ;SwSpiApp.c: 64: SwSpi_Data_Pin(phrType, 0);
 11406  002D9E  0E00               	movlw	0
 11407  002DA0  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11408  002DA2  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11409  002DA4  EC05  F017         	call	_SwSpi_Data_Pin
 11410                           
 11411                           ;SwSpiApp.c: 65: SwSpi_Clk_Pin(phrType, 0);
 11412  002DA8  0E00               	movlw	0
 11413  002DAA  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11414  002DAC  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11415  002DAE  EC30  F017         	call	_SwSpi_Clk_Pin
 11416  002DB2  0012               	return		;funcret
 11417  002DB4                     __end_of_SWSPI_DAC_send_bits:
 11418                           	opt stack 0
 11419                           tosu	equ	0xFFF
 11420                           tosh	equ	0xFFE
 11421                           tosl	equ	0xFFD
 11422                           pclath	equ	0xFFA
 11423                           tblptru	equ	0xFF8
 11424                           tblptrh	equ	0xFF7
 11425                           tblptrl	equ	0xFF6
 11426                           tablat	equ	0xFF5
 11427                           prodh	equ	0xFF4
 11428                           prodl	equ	0xFF3
 11429                           intcon	equ	0xFF2
 11430                           intcon2	equ	0xFF1
 11431                           postinc0	equ	0xFEE
 11432                           wreg	equ	0xFE8
 11433                           indf1	equ	0xFE7
 11434                           postdec1	equ	0xFE5
 11435                           fsr1h	equ	0xFE2
 11436                           fsr1l	equ	0xFE1
 11437                           indf2	equ	0xFDF
 11438                           postinc2	equ	0xFDE
 11439                           postdec2	equ	0xFDD
 11440                           fsr2h	equ	0xFDA
 11441                           fsr2l	equ	0xFD9
 11442                           status	equ	0xFD8
 11443                           
 11444 ;; *************** function _SwSpi_Data_Pin *****************
 11445 ;; Defined at:
 11446 ;;		line 103 in file "SwSpiApp.c"
 11447 ;; Parameters:    Size  Location     Type
 11448 ;;  phrType         1    wreg     enum E7543
 11449 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11450 ;; Auto vars:     Size  Location     Type
 11451 ;;  phrType         1   24[COMRAM] enum E7543
 11452 ;; Return value:  Size  Location     Type
 11453 ;;                  1    wreg      void 
 11454 ;; Registers used:
 11455 ;;		wreg, status,2, status,0
 11456 ;; Tracked objects:
 11457 ;;		On entry : 0/0
 11458 ;;		On exit  : 0/0
 11459 ;;		Unchanged: 0/0
 11460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11461 ;;      Params:         1       0       0       0       0       0       0
 11462 ;;      Locals:         1       0       0       0       0       0       0
 11463 ;;      Temps:          0       0       0       0       0       0       0
 11464 ;;      Totals:         2       0       0       0       0       0       0
 11465 ;;Total ram usage:        2 bytes
 11466 ;; Hardware stack levels used:    1
 11467 ;; Hardware stack levels required when called:    3
 11468 ;; This function calls:
 11469 ;;		Nothing
 11470 ;; This function is called by:
 11471 ;;		_SWSPI_DAC_send_bits
 11472 ;;		_SWSPI_Synth_send_bits
 11473 ;; This function uses a non-reentrant model
 11474 ;;
 11475                           
 11476                           	psect	text78
 11477  002E0A                     __ptext78:
 11478                           	opt stack 0
 11479  002E0A                     _SwSpi_Data_Pin:
 11480                           	opt stack 22
 11481                           
 11482                           ;incstack = 0
 11483                           ;SwSpi_Data_Pin@phrType stored from wreg
 11484  002E0A  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 11485                           
 11486                           ;SwSpiApp.c: 105: switch(phrType)
 11487  002E0C  D01E               	goto	l598
 11488  002E0E                     
 11489                           ;SwSpiApp.c: 108: if(cPinMode == 1)
 11490  002E0E  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11491  002E10  A4D8               	btfss	status,2,c
 11492  002E12  D002               	goto	l600
 11493                           
 11494                           ;SwSpiApp.c: 109: {
 11495                           ;SwSpiApp.c: 110: do { LATDbits.LATD0 = 1; } while(0);
 11496  002E14  808C               	bsf	3980,0,c	;volatile
 11497                           
 11498                           ;SwSpiApp.c: 111: }
 11499  002E16  0012               	return	
 11500  002E18                     l600:
 11501                           
 11502                           ;SwSpiApp.c: 112: else if (cPinMode == 0)
 11503  002E18  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11504  002E1A  A4D8               	btfss	status,2,c
 11505  002E1C  0012               	return	
 11506                           
 11507                           ;SwSpiApp.c: 113: {
 11508                           ;SwSpiApp.c: 114: do { LATDbits.LATD0 = 0; } while(0);
 11509  002E1E  908C               	bcf	3980,0,c	;volatile
 11510                           
 11511                           ;SwSpiApp.c: 115: }
 11512                           ;SwSpiApp.c: 116: break;
 11513  002E20  0012               	return	
 11514  002E22                     
 11515                           ;SwSpiApp.c: 119: if(cPinMode == 1)
 11516  002E22  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11517  002E24  A4D8               	btfss	status,2,c
 11518  002E26  D002               	goto	l609
 11519                           
 11520                           ;SwSpiApp.c: 120: {
 11521                           ;SwSpiApp.c: 121: do { LATCbits.LATC5 = 1; } while(0);
 11522  002E28  8A8B               	bsf	3979,5,c	;volatile
 11523                           
 11524                           ;SwSpiApp.c: 122: }
 11525  002E2A  0012               	return	
 11526  002E2C                     l609:
 11527                           
 11528                           ;SwSpiApp.c: 123: else if (cPinMode == 0)
 11529  002E2C  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11530  002E2E  A4D8               	btfss	status,2,c
 11531  002E30  0012               	return	
 11532                           
 11533                           ;SwSpiApp.c: 124: {
 11534                           ;SwSpiApp.c: 125: do { LATCbits.LATC5 = 0; } while(0);
 11535  002E32  9A8B               	bcf	3979,5,c	;volatile
 11536                           
 11537                           ;SwSpiApp.c: 126: }
 11538                           ;SwSpiApp.c: 127: break;
 11539  002E34  0012               	return	
 11540  002E36                     
 11541                           ;SwSpiApp.c: 130: if(cPinMode == 1)
 11542  002E36  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11543  002E38  A4D8               	btfss	status,2,c
 11544  002E3A  D002               	goto	l617
 11545                           
 11546                           ;SwSpiApp.c: 131: {
 11547                           ;SwSpiApp.c: 132: do { LATAbits.LATA4 = 1; } while(0);
 11548  002E3C  8889               	bsf	3977,4,c	;volatile
 11549                           
 11550                           ;SwSpiApp.c: 133: }
 11551  002E3E  0012               	return	
 11552  002E40                     l617:
 11553                           
 11554                           ;SwSpiApp.c: 134: else if (cPinMode == 0)
 11555  002E40  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11556  002E42  A4D8               	btfss	status,2,c
 11557  002E44  0012               	return	
 11558                           
 11559                           ;SwSpiApp.c: 135: {
 11560                           ;SwSpiApp.c: 136: do { LATAbits.LATA4 = 0; } while(0);
 11561  002E46  9889               	bcf	3977,4,c	;volatile
 11562                           
 11563                           ;SwSpiApp.c: 139: }
 11564                           
 11565                           ;SwSpiApp.c: 137: }
 11566                           ;SwSpiApp.c: 138: break;
 11567  002E48  0012               	return	
 11568  002E4A                     l598:
 11569  002E4A  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 11570                           
 11571                           ; Switch size 1, requested type "space"
 11572                           ; Number of cases is 3, Range of values is 0 to 2
 11573                           ; switch strategies available:
 11574                           ; Name         Instructions Cycles
 11575                           ; simple_byte           10     6 (average)
 11576                           ;	Chosen strategy is simple_byte
 11577  002E4C  0A00               	xorlw	0	; case 0
 11578  002E4E  B4D8               	btfsc	status,2,c
 11579  002E50  D7DE               	goto	l599
 11580  002E52  0A01               	xorlw	1	; case 1
 11581  002E54  B4D8               	btfsc	status,2,c
 11582  002E56  D7E5               	goto	l608
 11583  002E58  0A03               	xorlw	3	; case 2
 11584  002E5A  A4D8               	btfss	status,2,c
 11585  002E5C  0012               	return	
 11586  002E5E  D7EB               	goto	l616
 11587  002E60                     __end_of_SwSpi_Data_Pin:
 11588                           	opt stack 0
 11589                           tosu	equ	0xFFF
 11590                           tosh	equ	0xFFE
 11591                           tosl	equ	0xFFD
 11592                           pclath	equ	0xFFA
 11593                           tblptru	equ	0xFF8
 11594                           tblptrh	equ	0xFF7
 11595                           tblptrl	equ	0xFF6
 11596                           tablat	equ	0xFF5
 11597                           prodh	equ	0xFF4
 11598                           prodl	equ	0xFF3
 11599                           intcon	equ	0xFF2
 11600                           intcon2	equ	0xFF1
 11601                           postinc0	equ	0xFEE
 11602                           wreg	equ	0xFE8
 11603                           indf1	equ	0xFE7
 11604                           postdec1	equ	0xFE5
 11605                           fsr1h	equ	0xFE2
 11606                           fsr1l	equ	0xFE1
 11607                           indf2	equ	0xFDF
 11608                           postinc2	equ	0xFDE
 11609                           postdec2	equ	0xFDD
 11610                           fsr2h	equ	0xFDA
 11611                           fsr2l	equ	0xFD9
 11612                           status	equ	0xFD8
 11613                           
 11614 ;; *************** function _SwSpi_Clk_Pin *****************
 11615 ;; Defined at:
 11616 ;;		line 142 in file "SwSpiApp.c"
 11617 ;; Parameters:    Size  Location     Type
 11618 ;;  phrType         1    wreg     enum E7543
 11619 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11620 ;; Auto vars:     Size  Location     Type
 11621 ;;  phrType         1   24[COMRAM] enum E7543
 11622 ;; Return value:  Size  Location     Type
 11623 ;;                  1    wreg      void 
 11624 ;; Registers used:
 11625 ;;		wreg, status,2, status,0
 11626 ;; Tracked objects:
 11627 ;;		On entry : 0/0
 11628 ;;		On exit  : 0/0
 11629 ;;		Unchanged: 0/0
 11630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11631 ;;      Params:         1       0       0       0       0       0       0
 11632 ;;      Locals:         1       0       0       0       0       0       0
 11633 ;;      Temps:          0       0       0       0       0       0       0
 11634 ;;      Totals:         2       0       0       0       0       0       0
 11635 ;;Total ram usage:        2 bytes
 11636 ;; Hardware stack levels used:    1
 11637 ;; Hardware stack levels required when called:    3
 11638 ;; This function calls:
 11639 ;;		Nothing
 11640 ;; This function is called by:
 11641 ;;		_SWSPI_DAC_send_bits
 11642 ;;		_SWSPI_Synth_send_bits
 11643 ;;		_SwSpi_Synth_Toggle_Clock
 11644 ;; This function uses a non-reentrant model
 11645 ;;
 11646                           
 11647                           	psect	text79
 11648  002E60                     __ptext79:
 11649                           	opt stack 0
 11650  002E60                     _SwSpi_Clk_Pin:
 11651                           	opt stack 22
 11652                           
 11653                           ;incstack = 0
 11654                           ;SwSpi_Clk_Pin@phrType stored from wreg
 11655  002E60  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 11656                           
 11657                           ;SwSpiApp.c: 144: switch(phrType)
 11658  002E62  D01E               	goto	l627
 11659  002E64                     
 11660                           ;SwSpiApp.c: 147: if(cPinMode == 1)
 11661  002E64  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11662  002E66  A4D8               	btfss	status,2,c
 11663  002E68  D002               	goto	l629
 11664                           
 11665                           ;SwSpiApp.c: 148: {
 11666                           ;SwSpiApp.c: 149: do { LATCbits.LATC3 = 1; } while(0);
 11667  002E6A  868B               	bsf	3979,3,c	;volatile
 11668                           
 11669                           ;SwSpiApp.c: 150: }
 11670  002E6C  0012               	return	
 11671  002E6E                     l629:
 11672                           
 11673                           ;SwSpiApp.c: 151: else if (cPinMode == 0)
 11674  002E6E  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11675  002E70  A4D8               	btfss	status,2,c
 11676  002E72  0012               	return	
 11677                           
 11678                           ;SwSpiApp.c: 152: {
 11679                           ;SwSpiApp.c: 153: do { LATCbits.LATC3 = 0; } while(0);
 11680  002E74  968B               	bcf	3979,3,c	;volatile
 11681                           
 11682                           ;SwSpiApp.c: 154: }
 11683                           ;SwSpiApp.c: 155: break;
 11684  002E76  0012               	return	
 11685  002E78                     
 11686                           ;SwSpiApp.c: 158: if(cPinMode == 1)
 11687  002E78  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11688  002E7A  A4D8               	btfss	status,2,c
 11689  002E7C  D002               	goto	l638
 11690                           
 11691                           ;SwSpiApp.c: 159: {
 11692                           ;SwSpiApp.c: 160: do { LATCbits.LATC4 = 1; } while(0);
 11693  002E7E  888B               	bsf	3979,4,c	;volatile
 11694                           
 11695                           ;SwSpiApp.c: 161: }
 11696  002E80  0012               	return	
 11697  002E82                     l638:
 11698                           
 11699                           ;SwSpiApp.c: 162: else if (cPinMode == 0)
 11700  002E82  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11701  002E84  A4D8               	btfss	status,2,c
 11702  002E86  0012               	return	
 11703                           
 11704                           ;SwSpiApp.c: 163: {
 11705                           ;SwSpiApp.c: 164: do { LATCbits.LATC4 = 0; } while(0);
 11706  002E88  988B               	bcf	3979,4,c	;volatile
 11707                           
 11708                           ;SwSpiApp.c: 165: }
 11709                           ;SwSpiApp.c: 167: break;
 11710  002E8A  0012               	return	
 11711  002E8C                     
 11712                           ;SwSpiApp.c: 170: if(cPinMode == 1)
 11713  002E8C  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11714  002E8E  A4D8               	btfss	status,2,c
 11715  002E90  D002               	goto	l646
 11716                           
 11717                           ;SwSpiApp.c: 171: {
 11718                           ;SwSpiApp.c: 172: do { LATAbits.LATA3 = 1; } while(0);
 11719  002E92  8689               	bsf	3977,3,c	;volatile
 11720                           
 11721                           ;SwSpiApp.c: 173: }
 11722  002E94  0012               	return	
 11723  002E96                     l646:
 11724                           
 11725                           ;SwSpiApp.c: 174: else if (cPinMode == 0)
 11726  002E96  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11727  002E98  A4D8               	btfss	status,2,c
 11728  002E9A  0012               	return	
 11729                           
 11730                           ;SwSpiApp.c: 175: {
 11731                           ;SwSpiApp.c: 176: do { LATAbits.LATA3 = 0; } while(0);
 11732  002E9C  9689               	bcf	3977,3,c	;volatile
 11733                           
 11734                           ;SwSpiApp.c: 179: }
 11735                           
 11736                           ;SwSpiApp.c: 177: }
 11737                           ;SwSpiApp.c: 178: break;
 11738  002E9E  0012               	return	
 11739  002EA0                     l627:
 11740  002EA0  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 11741                           
 11742                           ; Switch size 1, requested type "space"
 11743                           ; Number of cases is 3, Range of values is 0 to 2
 11744                           ; switch strategies available:
 11745                           ; Name         Instructions Cycles
 11746                           ; simple_byte           10     6 (average)
 11747                           ;	Chosen strategy is simple_byte
 11748  002EA2  0A00               	xorlw	0	; case 0
 11749  002EA4  B4D8               	btfsc	status,2,c
 11750  002EA6  D7DE               	goto	l628
 11751  002EA8  0A01               	xorlw	1	; case 1
 11752  002EAA  B4D8               	btfsc	status,2,c
 11753  002EAC  D7E5               	goto	l637
 11754  002EAE  0A03               	xorlw	3	; case 2
 11755  002EB0  A4D8               	btfss	status,2,c
 11756  002EB2  0012               	return	
 11757  002EB4  D7EB               	goto	l645
 11758  002EB6                     __end_of_SwSpi_Clk_Pin:
 11759                           	opt stack 0
 11760                           tosu	equ	0xFFF
 11761                           tosh	equ	0xFFE
 11762                           tosl	equ	0xFFD
 11763                           pclath	equ	0xFFA
 11764                           tblptru	equ	0xFF8
 11765                           tblptrh	equ	0xFF7
 11766                           tblptrl	equ	0xFF6
 11767                           tablat	equ	0xFF5
 11768                           prodh	equ	0xFF4
 11769                           prodl	equ	0xFF3
 11770                           intcon	equ	0xFF2
 11771                           intcon2	equ	0xFF1
 11772                           postinc0	equ	0xFEE
 11773                           wreg	equ	0xFE8
 11774                           indf1	equ	0xFE7
 11775                           postdec1	equ	0xFE5
 11776                           fsr1h	equ	0xFE2
 11777                           fsr1l	equ	0xFE1
 11778                           indf2	equ	0xFDF
 11779                           postinc2	equ	0xFDE
 11780                           postdec2	equ	0xFDD
 11781                           fsr2h	equ	0xFDA
 11782                           fsr2l	equ	0xFD9
 11783                           status	equ	0xFD8
 11784                           
 11785 ;; *************** function _ClearMcuRunTime *****************
 11786 ;; Defined at:
 11787 ;;		line 87 in file "SystemStatus.c"
 11788 ;; Parameters:    Size  Location     Type
 11789 ;;		None
 11790 ;; Auto vars:     Size  Location     Type
 11791 ;;		None
 11792 ;; Return value:  Size  Location     Type
 11793 ;;                  1    wreg      void 
 11794 ;; Registers used:
 11795 ;;		wreg, status,2
 11796 ;; Tracked objects:
 11797 ;;		On entry : 0/0
 11798 ;;		On exit  : 0/0
 11799 ;;		Unchanged: 0/0
 11800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11801 ;;      Params:         0       0       0       0       0       0       0
 11802 ;;      Locals:         0       0       0       0       0       0       0
 11803 ;;      Temps:          0       0       0       0       0       0       0
 11804 ;;      Totals:         0       0       0       0       0       0       0
 11805 ;;Total ram usage:        0 bytes
 11806 ;; Hardware stack levels used:    1
 11807 ;; Hardware stack levels required when called:    3
 11808 ;; This function calls:
 11809 ;;		Nothing
 11810 ;; This function is called by:
 11811 ;;		_InitSystemApplicationManagers
 11812 ;; This function uses a non-reentrant model
 11813 ;;
 11814                           
 11815                           	psect	text80
 11816  003832                     __ptext80:
 11817                           	opt stack 0
 11818  003832                     _ClearMcuRunTime:
 11819                           	opt stack 26
 11820                           
 11821                           ;SystemStatus.c: 89: mcuRunTimeIn5SecTicks = 0;
 11822                           
 11823                           ;incstack = 0
 11824  003832  0E00               	movlw	0
 11825  003834  0100               	movlb	0	; () banked
 11826  003836  6FC0               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 11827  003838  0E00               	movlw	0
 11828  00383A  6FC1               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 11829  00383C  0E00               	movlw	0
 11830  00383E  6FC2               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 11831  003840  0E00               	movlw	0
 11832  003842  6FC3               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 11833                           
 11834                           ; BSR set to: 0
 11835  003844  0012               	return		;funcret
 11836  003846                     __end_of_ClearMcuRunTime:
 11837                           	opt stack 0
 11838                           tosu	equ	0xFFF
 11839                           tosh	equ	0xFFE
 11840                           tosl	equ	0xFFD
 11841                           pclath	equ	0xFFA
 11842                           tblptru	equ	0xFF8
 11843                           tblptrh	equ	0xFF7
 11844                           tblptrl	equ	0xFF6
 11845                           tablat	equ	0xFF5
 11846                           prodh	equ	0xFF4
 11847                           prodl	equ	0xFF3
 11848                           intcon	equ	0xFF2
 11849                           intcon2	equ	0xFF1
 11850                           postinc0	equ	0xFEE
 11851                           wreg	equ	0xFE8
 11852                           indf1	equ	0xFE7
 11853                           postdec1	equ	0xFE5
 11854                           fsr1h	equ	0xFE2
 11855                           fsr1l	equ	0xFE1
 11856                           indf2	equ	0xFDF
 11857                           postinc2	equ	0xFDE
 11858                           postdec2	equ	0xFDD
 11859                           fsr2h	equ	0xFDA
 11860                           fsr2l	equ	0xFD9
 11861                           status	equ	0xFD8
 11862                           
 11863 ;; *************** function _CheckFlashPrecentage *****************
 11864 ;; Defined at:
 11865 ;;		line 205 in file "FlashApp.c"
 11866 ;; Parameters:    Size  Location     Type
 11867 ;;		None
 11868 ;; Auto vars:     Size  Location     Type
 11869 ;;  precentage      3   28[BANK0 ] void 
 11870 ;; Return value:  Size  Location     Type
 11871 ;;                  1    wreg      unsigned char 
 11872 ;; Registers used:
 11873 ;;		wreg, status,2, status,0, cstack
 11874 ;; Tracked objects:
 11875 ;;		On entry : 0/0
 11876 ;;		On exit  : 0/0
 11877 ;;		Unchanged: 0/0
 11878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11879 ;;      Params:         0       0       0       0       0       0       0
 11880 ;;      Locals:         0       3       0       0       0       0       0
 11881 ;;      Temps:          0       4       0       0       0       0       0
 11882 ;;      Totals:         0       7       0       0       0       0       0
 11883 ;;Total ram usage:        7 bytes
 11884 ;; Hardware stack levels used:    1
 11885 ;; Hardware stack levels required when called:    5
 11886 ;; This function calls:
 11887 ;;		___ftdiv
 11888 ;;		___ftge
 11889 ;;		___ftmul
 11890 ;;		___lltoft
 11891 ;; This function is called by:
 11892 ;;		_main
 11893 ;; This function uses a non-reentrant model
 11894 ;;
 11895                           
 11896                           	psect	text81
 11897  002318                     __ptext81:
 11898                           	opt stack 0
 11899  002318                     _CheckFlashPrecentage:
 11900                           	opt stack 25
 11901                           
 11902                           ;FlashApp.c: 207: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
 11903                           
 11904                           ; BSR set to: 0
 11905                           ;incstack = 0
 11906  002318  0EE0               	movlw	224
 11907  00231A  6E2C               	movwf	___ftdiv@f2,c
 11908  00231C  0EFF               	movlw	255
 11909  00231E  6E2D               	movwf	___ftdiv@f2+1,c
 11910  002320  0E46               	movlw	70
 11911  002322  6E2E               	movwf	___ftdiv@f2+2,c
 11912  002324  C042  F078         	movff	_writeAddress,??_CheckFlashPrecentage
 11913  002328  C043  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
 11914  00232C  C044  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
 11915  002330  C045  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
 11916  002334  0100               	movlb	0	; () banked
 11917  002336  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
 11918  002338  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
 11919  00233A  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
 11920  00233C  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
 11921  00233E  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
 11922  002340  0E00               	movlw	0
 11923  002342  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
 11924  002344  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
 11925  002346  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
 11926  002348  0EF0               	movlw	240
 11927  00234A  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
 11928  00234C  6E20               	movwf	___lltoft@c,c
 11929  00234E  0E7F               	movlw	127
 11930  002350  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
 11931  002352  6E21               	movwf	___lltoft@c+1,c
 11932  002354  0E00               	movlw	0
 11933  002356  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
 11934  002358  6E22               	movwf	___lltoft@c+2,c
 11935  00235A  0E00               	movlw	0
 11936  00235C  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
 11937  00235E  6E23               	movwf	___lltoft@c+3,c
 11938  002360  EC28  F016         	call	___lltoft	;wreg free
 11939  002364  C020  F029         	movff	?___lltoft,___ftdiv@f1
 11940  002368  C021  F02A         	movff	?___lltoft+1,___ftdiv@f1+1
 11941  00236C  C022  F02B         	movff	?___lltoft+2,___ftdiv@f1+2
 11942  002370  EC4F  F00E         	call	___ftdiv	;wreg free
 11943  002374  C029  F069         	movff	?___ftdiv,___ftmul@f1
 11944  002378  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 11945  00237C  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 11946  002380  0E00               	movlw	0
 11947  002382  0100               	movlb	0	; () banked
 11948  002384  6F6C               	movwf	___ftmul@f2& (0+255),b
 11949  002386  0EC8               	movlw	200
 11950  002388  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 11951  00238A  0E42               	movlw	66
 11952  00238C  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 11953  00238E  ECD4  F00D         	call	___ftmul	;wreg free
 11954  002392  C069  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
 11955  002396  C06A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
 11956  00239A  C06B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
 11957                           
 11958                           ;FlashApp.c: 208: return (precentage > 75) ? 1 : 0;
 11959  00239E  0E00               	movlw	0
 11960  0023A0  6E18               	movwf	___ftge@ff1,c
 11961  0023A2  0E96               	movlw	150
 11962  0023A4  6E19               	movwf	___ftge@ff1+1,c
 11963  0023A6  0E42               	movlw	66
 11964  0023A8  6E1A               	movwf	___ftge@ff1+2,c
 11965  0023AA  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
 11966  0023AE  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
 11967  0023B2  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
 11968  0023B6  EC60  F013         	call	___ftge	;wreg free
 11969  0023BA  B0D8               	btfsc	status,0,c
 11970  0023BC  D002               	goto	u7840
 11971  0023BE  0E01               	movlw	1
 11972  0023C0  0012               	return	
 11973  0023C2                     u7840:
 11974  0023C2  0E00               	movlw	0
 11975  0023C4  0012               	return	
 11976  0023C6                     __end_of_CheckFlashPrecentage:
 11977                           	opt stack 0
 11978                           tosu	equ	0xFFF
 11979                           tosh	equ	0xFFE
 11980                           tosl	equ	0xFFD
 11981                           pclath	equ	0xFFA
 11982                           tblptru	equ	0xFF8
 11983                           tblptrh	equ	0xFF7
 11984                           tblptrl	equ	0xFF6
 11985                           tablat	equ	0xFF5
 11986                           prodh	equ	0xFF4
 11987                           prodl	equ	0xFF3
 11988                           intcon	equ	0xFF2
 11989                           intcon2	equ	0xFF1
 11990                           postinc0	equ	0xFEE
 11991                           wreg	equ	0xFE8
 11992                           indf1	equ	0xFE7
 11993                           postdec1	equ	0xFE5
 11994                           fsr1h	equ	0xFE2
 11995                           fsr1l	equ	0xFE1
 11996                           indf2	equ	0xFDF
 11997                           postinc2	equ	0xFDE
 11998                           postdec2	equ	0xFDD
 11999                           fsr2h	equ	0xFDA
 12000                           fsr2l	equ	0xFD9
 12001                           status	equ	0xFD8
 12002                           
 12003 ;; *************** function _BlinkOkLeds *****************
 12004 ;; Defined at:
 12005 ;;		line 24 in file "LedsApp.c"
 12006 ;; Parameters:    Size  Location     Type
 12007 ;;  state           1    wreg     enum E7559
 12008 ;; Auto vars:     Size  Location     Type
 12009 ;;  state           1   26[COMRAM] enum E7559
 12010 ;;  idx             2   27[COMRAM] int 
 12011 ;; Return value:  Size  Location     Type
 12012 ;;                  1    wreg      void 
 12013 ;; Registers used:
 12014 ;;		wreg, status,2, status,0
 12015 ;; Tracked objects:
 12016 ;;		On entry : 0/0
 12017 ;;		On exit  : 0/0
 12018 ;;		Unchanged: 0/0
 12019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12020 ;;      Params:         0       0       0       0       0       0       0
 12021 ;;      Locals:         3       0       0       0       0       0       0
 12022 ;;      Temps:          3       0       0       0       0       0       0
 12023 ;;      Totals:         6       0       0       0       0       0       0
 12024 ;;Total ram usage:        6 bytes
 12025 ;; Hardware stack levels used:    1
 12026 ;; Hardware stack levels required when called:    3
 12027 ;; This function calls:
 12028 ;;		Nothing
 12029 ;; This function is called by:
 12030 ;;		_main
 12031 ;; This function uses a non-reentrant model
 12032 ;;
 12033                           
 12034                           	psect	text82
 12035  002ADC                     __ptext82:
 12036                           	opt stack 0
 12037  002ADC                     _BlinkOkLeds:
 12038                           	opt stack 27
 12039                           
 12040                           ;incstack = 0
 12041                           ;BlinkOkLeds@state stored from wreg
 12042  002ADC  6E1B               	movwf	BlinkOkLeds@state,c
 12043                           
 12044                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 12045  002ADE  0E00               	movlw	0
 12046  002AE0  6E1D               	movwf	BlinkOkLeds@idx+1,c
 12047  002AE2  0E00               	movlw	0
 12048  002AE4  6E1C               	movwf	BlinkOkLeds@idx,c
 12049  002AE6                     l6058:
 12050  002AE6  501B               	movf	BlinkOkLeds@state,w,c
 12051  002AE8  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 12052  002AEA  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 12053  002AEC  5018               	movf	??_BlinkOkLeds,w,c
 12054  002AEE  5C1C               	subwf	BlinkOkLeds@idx,w,c
 12055  002AF0  501D               	movf	BlinkOkLeds@idx+1,w,c
 12056  002AF2  0A80               	xorlw	128
 12057  002AF4  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 12058  002AF6  5019               	movf	??_BlinkOkLeds+1,w,c
 12059  002AF8  0A80               	xorlw	128
 12060  002AFA  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 12061  002AFC  B0D8               	btfsc	status,0,c
 12062  002AFE  0012               	return	
 12063                           
 12064                           ;LedsApp.c: 27: {
 12065                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 12066  002B00  908B               	bcf	3979,0,c	;volatile
 12067                           
 12068                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 12069  002B02  0E02               	movlw	2
 12070  002B04  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 12071  002B06  0E04               	movlw	4
 12072  002B08  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 12073  002B0A  0EBA               	movlw	186
 12074  002B0C                     u8037:
 12075  002B0C  2EE8               	decfsz	wreg,f,c
 12076  002B0E  D7FE               	bra	u8037
 12077  002B10  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 12078  002B12  D7FC               	bra	u8037
 12079  002B14  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 12080  002B16  D7FA               	bra	u8037
 12081  002B18  D000               	nop2	
 12082                           
 12083                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 12084  002B1A  808B               	bsf	3979,0,c	;volatile
 12085                           
 12086                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 12087  002B1C  0E02               	movlw	2
 12088  002B1E  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 12089  002B20  0E04               	movlw	4
 12090  002B22  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 12091  002B24  0EBA               	movlw	186
 12092  002B26                     u8047:
 12093  002B26  2EE8               	decfsz	wreg,f,c
 12094  002B28  D7FE               	bra	u8047
 12095  002B2A  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 12096  002B2C  D7FC               	bra	u8047
 12097  002B2E  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 12098  002B30  D7FA               	bra	u8047
 12099  002B32  D000               	nop2	
 12100  002B34  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 12101  002B36  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 12102  002B38  D7D6               	goto	l6058
 12103  002B3A                     __end_of_BlinkOkLeds:
 12104                           	opt stack 0
 12105                           tosu	equ	0xFFF
 12106                           tosh	equ	0xFFE
 12107                           tosl	equ	0xFFD
 12108                           pclath	equ	0xFFA
 12109                           tblptru	equ	0xFF8
 12110                           tblptrh	equ	0xFF7
 12111                           tblptrl	equ	0xFF6
 12112                           tablat	equ	0xFF5
 12113                           prodh	equ	0xFF4
 12114                           prodl	equ	0xFF3
 12115                           intcon	equ	0xFF2
 12116                           intcon2	equ	0xFF1
 12117                           postinc0	equ	0xFEE
 12118                           wreg	equ	0xFE8
 12119                           indf1	equ	0xFE7
 12120                           postdec1	equ	0xFE5
 12121                           fsr1h	equ	0xFE2
 12122                           fsr1l	equ	0xFE1
 12123                           indf2	equ	0xFDF
 12124                           postinc2	equ	0xFDE
 12125                           postdec2	equ	0xFDD
 12126                           fsr2h	equ	0xFDA
 12127                           fsr2l	equ	0xFD9
 12128                           status	equ	0xFD8
 12129                           
 12130 ;; *************** function _BlinkErrorLeds *****************
 12131 ;; Defined at:
 12132 ;;		line 13 in file "LedsApp.c"
 12133 ;; Parameters:    Size  Location     Type
 12134 ;;  state           1    wreg     enum E7562
 12135 ;; Auto vars:     Size  Location     Type
 12136 ;;  state           1   26[COMRAM] enum E7562
 12137 ;;  idx             2   27[COMRAM] int 
 12138 ;; Return value:  Size  Location     Type
 12139 ;;                  1    wreg      void 
 12140 ;; Registers used:
 12141 ;;		wreg, status,2, status,0
 12142 ;; Tracked objects:
 12143 ;;		On entry : 0/0
 12144 ;;		On exit  : 0/0
 12145 ;;		Unchanged: 0/0
 12146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12147 ;;      Params:         0       0       0       0       0       0       0
 12148 ;;      Locals:         3       0       0       0       0       0       0
 12149 ;;      Temps:          3       0       0       0       0       0       0
 12150 ;;      Totals:         6       0       0       0       0       0       0
 12151 ;;Total ram usage:        6 bytes
 12152 ;; Hardware stack levels used:    1
 12153 ;; Hardware stack levels required when called:    3
 12154 ;; This function calls:
 12155 ;;		Nothing
 12156 ;; This function is called by:
 12157 ;;		_main
 12158 ;; This function uses a non-reentrant model
 12159 ;;
 12160                           
 12161                           	psect	text83
 12162  002B3A                     __ptext83:
 12163                           	opt stack 0
 12164  002B3A                     _BlinkErrorLeds:
 12165                           	opt stack 27
 12166                           
 12167                           ;incstack = 0
 12168                           ;BlinkErrorLeds@state stored from wreg
 12169  002B3A  6E1B               	movwf	BlinkErrorLeds@state,c
 12170                           
 12171                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
 12172  002B3C  0E00               	movlw	0
 12173  002B3E  6E1D               	movwf	BlinkErrorLeds@idx+1,c
 12174  002B40  0E00               	movlw	0
 12175  002B42  6E1C               	movwf	BlinkErrorLeds@idx,c
 12176  002B44                     l6046:
 12177  002B44  501B               	movf	BlinkErrorLeds@state,w,c
 12178  002B46  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 12179  002B48  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
 12180  002B4A  5018               	movf	??_BlinkErrorLeds,w,c
 12181  002B4C  5C1C               	subwf	BlinkErrorLeds@idx,w,c
 12182  002B4E  501D               	movf	BlinkErrorLeds@idx+1,w,c
 12183  002B50  0A80               	xorlw	128
 12184  002B52  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
 12185  002B54  5019               	movf	??_BlinkErrorLeds+1,w,c
 12186  002B56  0A80               	xorlw	128
 12187  002B58  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
 12188  002B5A  B0D8               	btfsc	status,0,c
 12189  002B5C  0012               	return	
 12190                           
 12191                           ;LedsApp.c: 16: {
 12192                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
 12193  002B5E  988A               	bcf	3978,4,c	;volatile
 12194                           
 12195                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
 12196  002B60  0E02               	movlw	2
 12197  002B62  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 12198  002B64  0E04               	movlw	4
 12199  002B66  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 12200  002B68  0EBA               	movlw	186
 12201  002B6A                     u8057:
 12202  002B6A  2EE8               	decfsz	wreg,f,c
 12203  002B6C  D7FE               	bra	u8057
 12204  002B6E  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 12205  002B70  D7FC               	bra	u8057
 12206  002B72  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 12207  002B74  D7FA               	bra	u8057
 12208  002B76  D000               	nop2	
 12209                           
 12210                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
 12211  002B78  888A               	bsf	3978,4,c	;volatile
 12212                           
 12213                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
 12214  002B7A  0E02               	movlw	2
 12215  002B7C  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 12216  002B7E  0E04               	movlw	4
 12217  002B80  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 12218  002B82  0EBA               	movlw	186
 12219  002B84                     u8067:
 12220  002B84  2EE8               	decfsz	wreg,f,c
 12221  002B86  D7FE               	bra	u8067
 12222  002B88  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 12223  002B8A  D7FC               	bra	u8067
 12224  002B8C  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 12225  002B8E  D7FA               	bra	u8067
 12226  002B90  D000               	nop2	
 12227  002B92  4A1C               	infsnz	BlinkErrorLeds@idx,f,c
 12228  002B94  2A1D               	incf	BlinkErrorLeds@idx+1,f,c
 12229  002B96  D7D6               	goto	l6046
 12230  002B98                     __end_of_BlinkErrorLeds:
 12231                           	opt stack 0
 12232                           tosu	equ	0xFFF
 12233                           tosh	equ	0xFFE
 12234                           tosl	equ	0xFFD
 12235                           pclath	equ	0xFFA
 12236                           tblptru	equ	0xFF8
 12237                           tblptrh	equ	0xFF7
 12238                           tblptrl	equ	0xFF6
 12239                           tablat	equ	0xFF5
 12240                           prodh	equ	0xFF4
 12241                           prodl	equ	0xFF3
 12242                           intcon	equ	0xFF2
 12243                           intcon2	equ	0xFF1
 12244                           postinc0	equ	0xFEE
 12245                           wreg	equ	0xFE8
 12246                           indf1	equ	0xFE7
 12247                           postdec1	equ	0xFE5
 12248                           fsr1h	equ	0xFE2
 12249                           fsr1l	equ	0xFE1
 12250                           indf2	equ	0xFDF
 12251                           postinc2	equ	0xFDE
 12252                           postdec2	equ	0xFDD
 12253                           fsr2h	equ	0xFDA
 12254                           fsr2l	equ	0xFD9
 12255                           status	equ	0xFD8
 12256                           
 12257 ;; *************** function _AdcConvert *****************
 12258 ;; Defined at:
 12259 ;;		line 56 in file "AdcApp.c"
 12260 ;; Parameters:    Size  Location     Type
 12261 ;;		None
 12262 ;; Auto vars:     Size  Location     Type
 12263 ;;  _adcResult      2   83[BANK0 ] unsigned int 
 12264 ;;  idx             1   92[BANK0 ] unsigned char 
 12265 ;;  _adcResult      2   85[BANK0 ] unsigned int 
 12266 ;;  adcRes          2   90[BANK0 ] unsigned int 
 12267 ;; Return value:  Size  Location     Type
 12268 ;;                  1    wreg      void 
 12269 ;; Registers used:
 12270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12271 ;; Tracked objects:
 12272 ;;		On entry : 0/0
 12273 ;;		On exit  : 0/0
 12274 ;;		Unchanged: 0/0
 12275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12276 ;;      Params:         0       0       0       0       0       0       0
 12277 ;;      Locals:         0      10       0       0       0       0       0
 12278 ;;      Temps:          0       2       0       0       0       0       0
 12279 ;;      Totals:         0      12       0       0       0       0       0
 12280 ;;Total ram usage:       12 bytes
 12281 ;; Hardware stack levels used:    1
 12282 ;; Hardware stack levels required when called:    8
 12283 ;; This function calls:
 12284 ;;		_ADC_GetConversion
 12285 ;;		_FlashSampleWrite
 12286 ;;		___ftdiv
 12287 ;;		___ftmul
 12288 ;;		___fttol
 12289 ;;		___lwtoft
 12290 ;;		_pow
 12291 ;; This function is called by:
 12292 ;;		_main
 12293 ;; This function uses a non-reentrant model
 12294 ;;
 12295                           
 12296                           	psect	text84
 12297  0012A8                     __ptext84:
 12298                           	opt stack 0
 12299  0012A8                     _AdcConvert:
 12300                           	opt stack 22
 12301                           
 12302                           ;AdcApp.c: 61: uint16_t adcRes = 0;
 12303                           
 12304                           ;incstack = 0
 12305  0012A8  0E00               	movlw	0
 12306  0012AA  0100               	movlb	0	; () banked
 12307  0012AC  6FBB               	movwf	(AdcConvert@adcRes+1)& (0+255),b
 12308  0012AE  0E00               	movlw	0
 12309  0012B0  6FBA               	movwf	AdcConvert@adcRes& (0+255),b
 12310                           
 12311                           ;AdcApp.c: 63: if (adcSampleMode == CIRCULAR)
 12312  0012B2  503C               	movf	_adcSampleMode,w,c
 12313  0012B4  A4D8               	btfss	status,2,c
 12314  0012B6  D073               	goto	l112
 12315                           
 12316                           ; BSR set to: 0
 12317                           ;AdcApp.c: 64: {
 12318                           ;AdcApp.c: 65: for(uint8_t idx = 0; idx < (7); idx++)
 12319  0012B8  0E00               	movlw	0
 12320  0012BA  6FBC               	movwf	AdcConvert@idx& (0+255),b
 12321  0012BC                     l7918:
 12322                           
 12323                           ; BSR set to: 0
 12324  0012BC  0E06               	movlw	6
 12325  0012BE  65BC               	cpfsgt	AdcConvert@idx& (0+255),b
 12326  0012C0  D001               	goto	l113
 12327  0012C2  0012               	return	
 12328  0012C4                     l113:
 12329                           
 12330                           ; BSR set to: 0
 12331                           ;AdcApp.c: 66: {
 12332                           ;AdcApp.c: 67: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
 12333                           
 12334                           ; BSR set to: 0
 12335  0012C4  51BC               	movf	AdcConvert@idx& (0+255),w,b
 12336  0012C6  0D01               	mullw	1
 12337  0012C8  0E69               	movlw	low _channelArr
 12338  0012CA  24F3               	addwf	prodl,w,c
 12339  0012CC  6EF6               	movwf	tblptrl,c
 12340  0012CE  0E06               	movlw	high _channelArr
 12341  0012D0  20F4               	addwfc	prodh,w,c
 12342  0012D2  6EF7               	movwf	tblptrh,c
 12343  0012D4                     	if	0	;There are less than 3 active tblptr bytes
 12344  0012D4                     	endif
 12345  0012D4  0008               	tblrd		*
 12346  0012D6  50F5               	movf	tablat,w,c
 12347  0012D8  EC89  F01A         	call	_ADC_GetConversion
 12348  0012DC  C018  F0B3         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
 12349  0012E0  C019  F0B4         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
 12350                           
 12351                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12352  0012E4  0E00               	movlw	0
 12353  0012E6  0100               	movlb	0	; () banked
 12354  0012E8  6FA3               	movwf	pow@y& (0+255),b
 12355  0012EA  0E20               	movlw	32
 12356  0012EC  6FA4               	movwf	(pow@y+1)& (0+255),b
 12357  0012EE  0E41               	movlw	65
 12358  0012F0  6FA5               	movwf	(pow@y+2)& (0+255),b
 12359  0012F2  0E00               	movlw	0
 12360  0012F4  6FA0               	movwf	pow@x& (0+255),b
 12361  0012F6  0E00               	movlw	0
 12362  0012F8  6FA1               	movwf	(pow@x+1)& (0+255),b
 12363  0012FA  0E40               	movlw	64
 12364  0012FC  6FA2               	movwf	(pow@x+2)& (0+255),b
 12365  0012FE  EC06  F00B         	call	_pow	;wreg free
 12366  001302  C0A0  F0B7         	movff	?_pow,_AdcConvert$3296
 12367  001306  C0A1  F0B8         	movff	?_pow+1,_AdcConvert$3296+1
 12368  00130A  C0A2  F0B9         	movff	?_pow+2,_AdcConvert$3296+2
 12369                           
 12370                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12371  00130E  0EC0               	movlw	192
 12372  001310  0100               	movlb	0	; () banked
 12373  001312  6F6C               	movwf	___ftmul@f2& (0+255),b
 12374  001314  0E50               	movlw	80
 12375  001316  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12376  001318  0E45               	movlw	69
 12377  00131A  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12378  00131C  C0B7  F02C         	movff	_AdcConvert$3296,___ftdiv@f2
 12379  001320  C0B8  F02D         	movff	_AdcConvert$3296+1,___ftdiv@f2+1
 12380  001324  C0B9  F02E         	movff	_AdcConvert$3296+2,___ftdiv@f2+2
 12381  001328  C0B3  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
 12382  00132C  C0B4  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
 12383  001330  EC68  F01B         	call	___lwtoft	;wreg free
 12384  001334  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 12385  001338  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 12386  00133C  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 12387  001340  EC4F  F00E         	call	___ftdiv	;wreg free
 12388  001344  C029  F069         	movff	?___ftdiv,___ftmul@f1
 12389  001348  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 12390  00134C  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 12391  001350  ECD4  F00D         	call	___ftmul	;wreg free
 12392  001354  C069  F078         	movff	?___ftmul,___fttol@f1
 12393  001358  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 12394  00135C  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 12395  001360  EC58  F00D         	call	___fttol	;wreg free
 12396  001364  C078  F0BA         	movff	?___fttol,AdcConvert@adcRes
 12397  001368  C079  F0BB         	movff	?___fttol+1,AdcConvert@adcRes+1
 12398                           
 12399                           ;AdcApp.c: 69: FlashSampleWrite(adcRes, idx + 1);
 12400  00136C  C0BA  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 12401  001370  C0BB  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 12402  001374  0100               	movlb	0	; () banked
 12403  001376  29BC               	incf	AdcConvert@idx& (0+255),w,b
 12404  001378  6E2F               	movwf	FlashSampleWrite@channelNum,c
 12405  00137A  ECDB  F00C         	call	_FlashSampleWrite	;wreg free
 12406                           
 12407                           ;AdcApp.c: 70: _delay((unsigned long)((250)*(8000000/4000.0)));
 12408  00137E  0E03               	movlw	3
 12409  001380  0100               	movlb	0	; () banked
 12410  001382  6FB2               	movwf	(??_AdcConvert+1)& (0+255),b
 12411  001384  0E8A               	movlw	138
 12412  001386  6FB1               	movwf	??_AdcConvert& (0+255),b
 12413  001388  0E55               	movlw	85
 12414  00138A                     u8077:
 12415  00138A  2EE8               	decfsz	wreg,f,c
 12416  00138C  D7FE               	bra	u8077
 12417  00138E  2FB1               	decfsz	??_AdcConvert& (0+255),f,b
 12418  001390  D7FC               	bra	u8077
 12419  001392  2FB2               	decfsz	(??_AdcConvert+1)& (0+255),f,b
 12420  001394  D7FA               	bra	u8077
 12421  001396  D000               	nop2	
 12422  001398  0100               	movlb	0	; () banked
 12423  00139A  2BBC               	incf	AdcConvert@idx& (0+255),f,b
 12424  00139C  D78F               	goto	l7918
 12425  00139E                     l112:
 12426                           
 12427                           ; BSR set to: 0
 12428                           ;AdcApp.c: 73: else if (adcSampleMode == SINGLE_CHANNEL)
 12429                           
 12430                           ; BSR set to: 0
 12431  00139E  043C               	decf	_adcSampleMode,w,c
 12432  0013A0  A4D8               	btfss	status,2,c
 12433  0013A2  0012               	return	
 12434                           
 12435                           ; BSR set to: 0
 12436                           ;AdcApp.c: 74: {
 12437                           ;AdcApp.c: 75: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
 12438  0013A4  51D3               	movf	_channel& (0+255),w,b
 12439  0013A6  0D01               	mullw	1
 12440  0013A8  0E69               	movlw	low _channelArr
 12441  0013AA  24F3               	addwf	prodl,w,c
 12442  0013AC  6EF6               	movwf	tblptrl,c
 12443  0013AE  0E06               	movlw	high _channelArr
 12444  0013B0  20F4               	addwfc	prodh,w,c
 12445  0013B2  6EF7               	movwf	tblptrh,c
 12446  0013B4                     	if	0	;There are less than 3 active tblptr bytes
 12447  0013B4                     	endif
 12448  0013B4  0008               	tblrd		*
 12449  0013B6  50F5               	movf	tablat,w,c
 12450  0013B8  EC89  F01A         	call	_ADC_GetConversion
 12451  0013BC  C018  F0B5         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_332
 12452  0013C0  C019  F0B6         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_332+1
 12453                           
 12454                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12455  0013C4  0E00               	movlw	0
 12456  0013C6  0100               	movlb	0	; () banked
 12457  0013C8  6FA3               	movwf	pow@y& (0+255),b
 12458  0013CA  0E20               	movlw	32
 12459  0013CC  6FA4               	movwf	(pow@y+1)& (0+255),b
 12460  0013CE  0E41               	movlw	65
 12461  0013D0  6FA5               	movwf	(pow@y+2)& (0+255),b
 12462  0013D2  0E00               	movlw	0
 12463  0013D4  6FA0               	movwf	pow@x& (0+255),b
 12464  0013D6  0E00               	movlw	0
 12465  0013D8  6FA1               	movwf	(pow@x+1)& (0+255),b
 12466  0013DA  0E40               	movlw	64
 12467  0013DC  6FA2               	movwf	(pow@x+2)& (0+255),b
 12468  0013DE  EC06  F00B         	call	_pow	;wreg free
 12469  0013E2  C0A0  F0B7         	movff	?_pow,_AdcConvert$3296
 12470  0013E6  C0A1  F0B8         	movff	?_pow+1,_AdcConvert$3296+1
 12471  0013EA  C0A2  F0B9         	movff	?_pow+2,_AdcConvert$3296+2
 12472                           
 12473                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12474  0013EE  0EC0               	movlw	192
 12475  0013F0  0100               	movlb	0	; () banked
 12476  0013F2  6F6C               	movwf	___ftmul@f2& (0+255),b
 12477  0013F4  0E50               	movlw	80
 12478  0013F6  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12479  0013F8  0E45               	movlw	69
 12480  0013FA  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12481  0013FC  C0B7  F02C         	movff	_AdcConvert$3296,___ftdiv@f2
 12482  001400  C0B8  F02D         	movff	_AdcConvert$3296+1,___ftdiv@f2+1
 12483  001404  C0B9  F02E         	movff	_AdcConvert$3296+2,___ftdiv@f2+2
 12484  001408  C0B5  F020         	movff	AdcConvert@_adcResult_332,___lwtoft@c
 12485  00140C  C0B6  F021         	movff	AdcConvert@_adcResult_332+1,___lwtoft@c+1
 12486  001410  EC68  F01B         	call	___lwtoft	;wreg free
 12487  001414  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 12488  001418  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 12489  00141C  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 12490  001420  EC4F  F00E         	call	___ftdiv	;wreg free
 12491  001424  C029  F069         	movff	?___ftdiv,___ftmul@f1
 12492  001428  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 12493  00142C  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 12494  001430  ECD4  F00D         	call	___ftmul	;wreg free
 12495  001434  C069  F078         	movff	?___ftmul,___fttol@f1
 12496  001438  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 12497  00143C  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 12498  001440  EC58  F00D         	call	___fttol	;wreg free
 12499  001444  C078  F0BA         	movff	?___fttol,AdcConvert@adcRes
 12500  001448  C079  F0BB         	movff	?___fttol+1,AdcConvert@adcRes+1
 12501                           
 12502                           ;AdcApp.c: 77: FlashSampleWrite(adcRes, 1);
 12503  00144C  C0BA  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 12504  001450  C0BB  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 12505  001454  0E01               	movlw	1
 12506  001456  6E2F               	movwf	FlashSampleWrite@channelNum,c
 12507  001458  ECDB  F00C         	call	_FlashSampleWrite	;wreg free
 12508  00145C  0012               	return	
 12509  00145E                     __end_of_AdcConvert:
 12510                           	opt stack 0
 12511                           tosu	equ	0xFFF
 12512                           tosh	equ	0xFFE
 12513                           tosl	equ	0xFFD
 12514                           pclath	equ	0xFFA
 12515                           tblptru	equ	0xFF8
 12516                           tblptrh	equ	0xFF7
 12517                           tblptrl	equ	0xFF6
 12518                           tablat	equ	0xFF5
 12519                           prodh	equ	0xFF4
 12520                           prodl	equ	0xFF3
 12521                           intcon	equ	0xFF2
 12522                           intcon2	equ	0xFF1
 12523                           postinc0	equ	0xFEE
 12524                           wreg	equ	0xFE8
 12525                           indf1	equ	0xFE7
 12526                           postdec1	equ	0xFE5
 12527                           fsr1h	equ	0xFE2
 12528                           fsr1l	equ	0xFE1
 12529                           indf2	equ	0xFDF
 12530                           postinc2	equ	0xFDE
 12531                           postdec2	equ	0xFDD
 12532                           fsr2h	equ	0xFDA
 12533                           fsr2l	equ	0xFD9
 12534                           status	equ	0xFD8
 12535                           
 12536 ;; *************** function _pow *****************
 12537 ;; Defined at:
 12538 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 12539 ;; Parameters:    Size  Location     Type
 12540 ;;  x               3   64[BANK0 ] void 
 12541 ;;  y               3   67[BANK0 ] void 
 12542 ;; Auto vars:     Size  Location     Type
 12543 ;;  yi              4   77[BANK0 ] unsigned long 
 12544 ;;  sign            1   76[BANK0 ] unsigned char 
 12545 ;; Return value:  Size  Location     Type
 12546 ;;                  3   64[BANK0 ] unsigned char 
 12547 ;; Registers used:
 12548 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12549 ;; Tracked objects:
 12550 ;;		On entry : 0/0
 12551 ;;		On exit  : 0/0
 12552 ;;		Unchanged: 0/0
 12553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12554 ;;      Params:         0       6       0       0       0       0       0
 12555 ;;      Locals:         0      11       0       0       0       0       0
 12556 ;;      Temps:          0       0       0       0       0       0       0
 12557 ;;      Totals:         0      17       0       0       0       0       0
 12558 ;;Total ram usage:       17 bytes
 12559 ;; Hardware stack levels used:    1
 12560 ;; Hardware stack levels required when called:    7
 12561 ;; This function calls:
 12562 ;;		___ftge
 12563 ;;		___ftmul
 12564 ;;		___ftneg
 12565 ;;		___fttol
 12566 ;;		___lltoft
 12567 ;;		_exp
 12568 ;;		_log
 12569 ;; This function is called by:
 12570 ;;		_AdcConvert
 12571 ;; This function uses a non-reentrant model
 12572 ;;
 12573                           
 12574                           	psect	text85
 12575  00160C                     __ptext85:
 12576                           	opt stack 0
 12577  00160C                     _pow:
 12578                           	opt stack 22
 12579                           
 12580                           ;incstack = 0
 12581  00160C  0E00               	movlw	0
 12582  00160E  0100               	movlb	0	; () banked
 12583  001610  6FAC               	movwf	pow@sign& (0+255),b
 12584                           
 12585                           ; BSR set to: 0
 12586  001612  51A0               	movf	pow@x& (0+255),w,b
 12587  001614  11A1               	iorwf	(pow@x+1)& (0+255),w,b
 12588  001616  11A2               	iorwf	(pow@x+2)& (0+255),w,b
 12589  001618  A4D8               	btfss	status,2,c
 12590  00161A  D01D               	goto	l1885
 12591                           
 12592                           ; BSR set to: 0
 12593  00161C  0E00               	movlw	0
 12594  00161E  6E18               	movwf	___ftge@ff1,c
 12595  001620  0E00               	movlw	0
 12596  001622  6E19               	movwf	___ftge@ff1+1,c
 12597  001624  0E00               	movlw	0
 12598  001626  6E1A               	movwf	___ftge@ff1+2,c
 12599  001628  C0A3  F01B         	movff	pow@y,___ftge@ff2
 12600  00162C  C0A4  F01C         	movff	pow@y+1,___ftge@ff2+1
 12601  001630  C0A5  F01D         	movff	pow@y+2,___ftge@ff2+2
 12602  001634  EC60  F013         	call	___ftge	;wreg free
 12603  001638  A0D8               	btfss	status,0,c
 12604  00163A  D005               	goto	l1886
 12605  00163C  0E00               	movlw	0
 12606  00163E  0100               	movlb	0	; () banked
 12607  001640  6FC5               	movwf	(_errno+1)& (0+255),b
 12608  001642  0E21               	movlw	33
 12609  001644  6FC4               	movwf	_errno& (0+255),b
 12610  001646                     l1886:
 12611  001646  0E00               	movlw	0
 12612  001648  0100               	movlb	0	; () banked
 12613  00164A  6FA0               	movwf	?_pow& (0+255),b
 12614  00164C  0E00               	movlw	0
 12615  00164E  6FA1               	movwf	(?_pow+1)& (0+255),b
 12616  001650  0E00               	movlw	0
 12617  001652  6FA2               	movwf	(?_pow+2)& (0+255),b
 12618                           
 12619                           ; BSR set to: 0
 12620  001654  0012               	return	
 12621  001656                     l1885:
 12622                           
 12623                           ; BSR set to: 0
 12624                           
 12625                           ; BSR set to: 0
 12626  001656  51A3               	movf	pow@y& (0+255),w,b
 12627  001658  11A4               	iorwf	(pow@y+1)& (0+255),w,b
 12628  00165A  11A5               	iorwf	(pow@y+2)& (0+255),w,b
 12629  00165C  A4D8               	btfss	status,2,c
 12630  00165E  D007               	goto	l1888
 12631                           
 12632                           ; BSR set to: 0
 12633  001660  0E00               	movlw	0
 12634  001662  6FA0               	movwf	?_pow& (0+255),b
 12635  001664  0E80               	movlw	128
 12636  001666  6FA1               	movwf	(?_pow+1)& (0+255),b
 12637  001668  0E3F               	movlw	63
 12638  00166A  6FA2               	movwf	(?_pow+2)& (0+255),b
 12639                           
 12640                           ; BSR set to: 0
 12641  00166C  0012               	return	
 12642  00166E                     l1888:
 12643                           
 12644                           ; BSR set to: 0
 12645                           
 12646                           ; BSR set to: 0
 12647  00166E  AFA2               	btfss	(pow@x+2)& (0+255),7,b
 12648  001670  D041               	goto	l1889
 12649                           
 12650                           ; BSR set to: 0
 12651  001672  C0A3  F078         	movff	pow@y,___fttol@f1
 12652  001676  C0A4  F079         	movff	pow@y+1,___fttol@f1+1
 12653  00167A  C0A5  F07A         	movff	pow@y+2,___fttol@f1+2
 12654  00167E  EC58  F00D         	call	___fttol	;wreg free
 12655  001682  C078  F0AD         	movff	?___fttol,pow@yi
 12656  001686  C079  F0AE         	movff	?___fttol+1,pow@yi+1
 12657  00168A  C07A  F0AF         	movff	?___fttol+2,pow@yi+2
 12658  00168E  C07B  F0B0         	movff	?___fttol+3,pow@yi+3
 12659  001692  C0AD  F020         	movff	pow@yi,___lltoft@c
 12660  001696  C0AE  F021         	movff	pow@yi+1,___lltoft@c+1
 12661  00169A  C0AF  F022         	movff	pow@yi+2,___lltoft@c+2
 12662  00169E  C0B0  F023         	movff	pow@yi+3,___lltoft@c+3
 12663  0016A2  EC28  F016         	call	___lltoft	;wreg free
 12664  0016A6  0100               	movlb	0	; () banked
 12665  0016A8  51A3               	movf	pow@y& (0+255),w,b
 12666  0016AA  1820               	xorwf	?___lltoft,w,c
 12667  0016AC  E107               	bnz	u7560
 12668  0016AE  51A4               	movf	(pow@y+1)& (0+255),w,b
 12669  0016B0  1821               	xorwf	?___lltoft+1,w,c
 12670  0016B2  E104               	bnz	u7560
 12671  0016B4  51A5               	movf	(pow@y+2)& (0+255),w,b
 12672  0016B6  1822               	xorwf	?___lltoft+2,w,c
 12673  0016B8  B4D8               	btfsc	status,2,c
 12674  0016BA  D00B               	goto	l1890
 12675  0016BC                     u7560:
 12676                           
 12677                           ; BSR set to: 0
 12678  0016BC  0E00               	movlw	0
 12679  0016BE  6FC5               	movwf	(_errno+1)& (0+255),b
 12680  0016C0  0E21               	movlw	33
 12681  0016C2  6FC4               	movwf	_errno& (0+255),b
 12682  0016C4  0E00               	movlw	0
 12683  0016C6  6FA0               	movwf	?_pow& (0+255),b
 12684  0016C8  0E00               	movlw	0
 12685  0016CA  6FA1               	movwf	(?_pow+1)& (0+255),b
 12686  0016CC  0E00               	movlw	0
 12687  0016CE  6FA2               	movwf	(?_pow+2)& (0+255),b
 12688                           
 12689                           ; BSR set to: 0
 12690  0016D0  0012               	return	
 12691  0016D2                     l1890:
 12692                           
 12693                           ; BSR set to: 0
 12694                           
 12695                           ; BSR set to: 0
 12696  0016D2  51AD               	movf	pow@yi& (0+255),w,b
 12697  0016D4  0B01               	andlw	1
 12698  0016D6  6FAC               	movwf	pow@sign& (0+255),b
 12699                           
 12700                           ; BSR set to: 0
 12701  0016D8  C0A0  F018         	movff	pow@x,___ftneg@f1
 12702  0016DC  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 12703  0016E0  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 12704  0016E4  EC56  F01B         	call	___ftneg	;wreg free
 12705  0016E8  C018  F0A0         	movff	?___ftneg,pow@x
 12706  0016EC  C019  F0A1         	movff	?___ftneg+1,pow@x+1
 12707  0016F0  C01A  F0A2         	movff	?___ftneg+2,pow@x+2
 12708  0016F4                     l1889:
 12709  0016F4  C0A0  F08E         	movff	pow@x,log@x
 12710  0016F8  C0A1  F08F         	movff	pow@x+1,log@x+1
 12711  0016FC  C0A2  F090         	movff	pow@x+2,log@x+2
 12712  001700  ECC4  F00B         	call	_log	;wreg free
 12713  001704  C08E  F0A6         	movff	?_log,_pow$3297
 12714  001708  C08F  F0A7         	movff	?_log+1,_pow$3297+1
 12715  00170C  C090  F0A8         	movff	?_log+2,_pow$3297+2
 12716  001710  C0A6  F069         	movff	_pow$3297,___ftmul@f1
 12717  001714  C0A7  F06A         	movff	_pow$3297+1,___ftmul@f1+1
 12718  001718  C0A8  F06B         	movff	_pow$3297+2,___ftmul@f1+2
 12719  00171C  C0A3  F06C         	movff	pow@y,___ftmul@f2
 12720  001720  C0A4  F06D         	movff	pow@y+1,___ftmul@f2+1
 12721  001724  C0A5  F06E         	movff	pow@y+2,___ftmul@f2+2
 12722  001728  ECD4  F00D         	call	___ftmul	;wreg free
 12723  00172C  C069  F0A9         	movff	?___ftmul,_pow$3298
 12724  001730  C06A  F0AA         	movff	?___ftmul+1,_pow$3298+1
 12725  001734  C06B  F0AB         	movff	?___ftmul+2,_pow$3298+2
 12726  001738  C0A9  F097         	movff	_pow$3298,exp@x
 12727  00173C  C0AA  F098         	movff	_pow$3298+1,exp@x+1
 12728  001740  C0AB  F099         	movff	_pow$3298+2,exp@x+2
 12729  001744  EC70  F007         	call	_exp	;wreg free
 12730  001748  C097  F0A0         	movff	?_exp,pow@x
 12731  00174C  C098  F0A1         	movff	?_exp+1,pow@x+1
 12732  001750  C099  F0A2         	movff	?_exp+2,pow@x+2
 12733  001754  0100               	movlb	0	; () banked
 12734  001756  51AC               	movf	pow@sign& (0+255),w,b
 12735  001758  B4D8               	btfsc	status,2,c
 12736  00175A  D00F               	goto	l1891
 12737                           
 12738                           ; BSR set to: 0
 12739  00175C  C0A0  F018         	movff	pow@x,___ftneg@f1
 12740  001760  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 12741  001764  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 12742  001768  EC56  F01B         	call	___ftneg	;wreg free
 12743  00176C  C018  F0A0         	movff	?___ftneg,?_pow
 12744  001770  C019  F0A1         	movff	?___ftneg+1,?_pow+1
 12745  001774  C01A  F0A2         	movff	?___ftneg+2,?_pow+2
 12746  001778  0012               	return	
 12747  00177A                     l1891:
 12748                           
 12749                           ; BSR set to: 0
 12750  00177A  C0A0  F0A0         	movff	pow@x,?_pow
 12751  00177E  C0A1  F0A1         	movff	pow@x+1,?_pow+1
 12752  001782  C0A2  F0A2         	movff	pow@x+2,?_pow+2
 12753  001786  0012               	return		;funcret
 12754  001788                     __end_of_pow:
 12755                           	opt stack 0
 12756                           tosu	equ	0xFFF
 12757                           tosh	equ	0xFFE
 12758                           tosl	equ	0xFFD
 12759                           pclath	equ	0xFFA
 12760                           tblptru	equ	0xFF8
 12761                           tblptrh	equ	0xFF7
 12762                           tblptrl	equ	0xFF6
 12763                           tablat	equ	0xFF5
 12764                           prodh	equ	0xFF4
 12765                           prodl	equ	0xFF3
 12766                           intcon	equ	0xFF2
 12767                           intcon2	equ	0xFF1
 12768                           postinc0	equ	0xFEE
 12769                           wreg	equ	0xFE8
 12770                           indf1	equ	0xFE7
 12771                           postdec1	equ	0xFE5
 12772                           fsr1h	equ	0xFE2
 12773                           fsr1l	equ	0xFE1
 12774                           indf2	equ	0xFDF
 12775                           postinc2	equ	0xFDE
 12776                           postdec2	equ	0xFDD
 12777                           fsr2h	equ	0xFDA
 12778                           fsr2l	equ	0xFD9
 12779                           status	equ	0xFD8
 12780                           
 12781 ;; *************** function _log *****************
 12782 ;; Defined at:
 12783 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 12784 ;; Parameters:    Size  Location     Type
 12785 ;;  x               3   46[BANK0 ] unsigned char 
 12786 ;; Auto vars:     Size  Location     Type
 12787 ;;  exponent        2   49[BANK0 ] int 
 12788 ;; Return value:  Size  Location     Type
 12789 ;;                  3   46[BANK0 ] int 
 12790 ;; Registers used:
 12791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12792 ;; Tracked objects:
 12793 ;;		On entry : 0/0
 12794 ;;		On exit  : 0/0
 12795 ;;		Unchanged: 0/0
 12796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12797 ;;      Params:         0       3       0       0       0       0       0
 12798 ;;      Locals:         0       2       0       0       0       0       0
 12799 ;;      Temps:          0       0       0       0       0       0       0
 12800 ;;      Totals:         0       5       0       0       0       0       0
 12801 ;;Total ram usage:        5 bytes
 12802 ;; Hardware stack levels used:    1
 12803 ;; Hardware stack levels required when called:    6
 12804 ;; This function calls:
 12805 ;;		___awtoft
 12806 ;;		___ftadd
 12807 ;;		___ftmul
 12808 ;;		_eval_poly
 12809 ;;		_frexp
 12810 ;; This function is called by:
 12811 ;;		_pow
 12812 ;; This function uses a non-reentrant model
 12813 ;;
 12814                           
 12815                           	psect	text86
 12816  001788                     __ptext86:
 12817                           	opt stack 0
 12818  001788                     _log:
 12819                           	opt stack 22
 12820                           
 12821                           ;incstack = 0
 12822  001788  0100               	movlb	0	; () banked
 12823  00178A  AF90               	btfss	(log@x+2)& (0+255),7,b
 12824  00178C  D00B               	goto	l2147
 12825                           
 12826                           ; BSR set to: 0
 12827  00178E  0E00               	movlw	0
 12828  001790  6FC5               	movwf	(_errno+1)& (0+255),b
 12829  001792  0E21               	movlw	33
 12830  001794  6FC4               	movwf	_errno& (0+255),b
 12831  001796  0E00               	movlw	0
 12832  001798  6F8E               	movwf	?_log& (0+255),b
 12833  00179A  0E00               	movlw	0
 12834  00179C  6F8F               	movwf	(?_log+1)& (0+255),b
 12835  00179E  0E00               	movlw	0
 12836  0017A0  6F90               	movwf	(?_log+2)& (0+255),b
 12837                           
 12838                           ; BSR set to: 0
 12839  0017A2  0012               	return	
 12840  0017A4                     l2147:
 12841                           
 12842                           ; BSR set to: 0
 12843                           
 12844                           ; BSR set to: 0
 12845  0017A4  518E               	movf	log@x& (0+255),w,b
 12846  0017A6  118F               	iorwf	(log@x+1)& (0+255),w,b
 12847  0017A8  1190               	iorwf	(log@x+2)& (0+255),w,b
 12848  0017AA  A4D8               	btfss	status,2,c
 12849  0017AC  D00B               	goto	l2149
 12850                           
 12851                           ; BSR set to: 0
 12852  0017AE  0E00               	movlw	0
 12853  0017B0  6FC5               	movwf	(_errno+1)& (0+255),b
 12854  0017B2  0E22               	movlw	34
 12855  0017B4  6FC4               	movwf	_errno& (0+255),b
 12856  0017B6  0E00               	movlw	0
 12857  0017B8  6F8E               	movwf	?_log& (0+255),b
 12858  0017BA  0E00               	movlw	0
 12859  0017BC  6F8F               	movwf	(?_log+1)& (0+255),b
 12860  0017BE  0E00               	movlw	0
 12861  0017C0  6F90               	movwf	(?_log+2)& (0+255),b
 12862                           
 12863                           ; BSR set to: 0
 12864  0017C2  0012               	return	
 12865  0017C4                     l2149:
 12866                           
 12867                           ; BSR set to: 0
 12868                           
 12869                           ; BSR set to: 0
 12870  0017C4  0E00               	movlw	0
 12871  0017C6  6F6C               	movwf	___ftmul@f2& (0+255),b
 12872  0017C8  0E00               	movlw	0
 12873  0017CA  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12874  0017CC  0E40               	movlw	64
 12875  0017CE  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12876  0017D0  0E91               	movlw	low log@exponent
 12877  0017D2  6E1B               	movwf	frexp@eptr,c
 12878  0017D4  0E00               	movlw	high log@exponent
 12879  0017D6  6E1C               	movwf	frexp@eptr+1,c
 12880  0017D8  C08E  F018         	movff	log@x,frexp@value
 12881  0017DC  C08F  F019         	movff	log@x+1,frexp@value+1
 12882  0017E0  C090  F01A         	movff	log@x+2,frexp@value+2
 12883  0017E4  EC18  F013         	call	_frexp	;wreg free
 12884  0017E8  C018  F069         	movff	?_frexp,___ftmul@f1
 12885  0017EC  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
 12886  0017F0  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
 12887  0017F4  ECD4  F00D         	call	___ftmul	;wreg free
 12888  0017F8  C069  F078         	movff	?___ftmul,___ftadd@f1
 12889  0017FC  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 12890  001800  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 12891  001804  0E00               	movlw	0
 12892  001806  0100               	movlb	0	; () banked
 12893  001808  6F7B               	movwf	___ftadd@f2& (0+255),b
 12894  00180A  0E80               	movlw	128
 12895  00180C  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 12896  00180E  0EBF               	movlw	191
 12897  001810  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 12898  001812  EC2F  F00A         	call	___ftadd	;wreg free
 12899  001816  C078  F08E         	movff	?___ftadd,log@x
 12900  00181A  C079  F08F         	movff	?___ftadd+1,log@x+1
 12901  00181E  C07A  F090         	movff	?___ftadd+2,log@x+2
 12902  001822  0100               	movlb	0	; () banked
 12903  001824  0791               	decf	log@exponent& (0+255),f,b
 12904  001826  A0D8               	btfss	status,0,c
 12905  001828  0792               	decf	(log@exponent+1)& (0+255),f,b
 12906                           
 12907                           ; BSR set to: 0
 12908  00182A  C08E  F084         	movff	log@x,eval_poly@x
 12909  00182E  C08F  F085         	movff	log@x+1,eval_poly@x+1
 12910  001832  C090  F086         	movff	log@x+2,eval_poly@x+2
 12911  001836  0E8E               	movlw	low log@coeff
 12912  001838  6F87               	movwf	eval_poly@d& (0+255),b
 12913  00183A  0E06               	movlw	high log@coeff
 12914  00183C  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 12915  00183E  0E00               	movlw	0
 12916  001840  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 12917  001842  0E08               	movlw	8
 12918  001844  6F89               	movwf	eval_poly@n& (0+255),b
 12919  001846  ECA6  F00F         	call	_eval_poly	;wreg free
 12920  00184A  C084  F08E         	movff	?_eval_poly,log@x
 12921  00184E  C085  F08F         	movff	?_eval_poly+1,log@x+1
 12922  001852  C086  F090         	movff	?_eval_poly+2,log@x+2
 12923  001856  0E72               	movlw	114
 12924  001858  0100               	movlb	0	; () banked
 12925  00185A  6F6C               	movwf	___ftmul@f2& (0+255),b
 12926  00185C  0E31               	movlw	49
 12927  00185E  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12928  001860  0E3F               	movlw	63
 12929  001862  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12930  001864  C091  F020         	movff	log@exponent,___awtoft@c
 12931  001868  C092  F021         	movff	log@exponent+1,___awtoft@c+1
 12932  00186C  EC7E  F019         	call	___awtoft	;wreg free
 12933  001870  C020  F069         	movff	?___awtoft,___ftmul@f1
 12934  001874  C021  F06A         	movff	?___awtoft+1,___ftmul@f1+1
 12935  001878  C022  F06B         	movff	?___awtoft+2,___ftmul@f1+2
 12936  00187C  ECD4  F00D         	call	___ftmul	;wreg free
 12937  001880  C069  F078         	movff	?___ftmul,___ftadd@f1
 12938  001884  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 12939  001888  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 12940  00188C  C08E  F07B         	movff	log@x,___ftadd@f2
 12941  001890  C08F  F07C         	movff	log@x+1,___ftadd@f2+1
 12942  001894  C090  F07D         	movff	log@x+2,___ftadd@f2+2
 12943  001898  EC2F  F00A         	call	___ftadd	;wreg free
 12944  00189C  C078  F08E         	movff	?___ftadd,?_log
 12945  0018A0  C079  F08F         	movff	?___ftadd+1,?_log+1
 12946  0018A4  C07A  F090         	movff	?___ftadd+2,?_log+2
 12947  0018A8  0012               	return	
 12948  0018AA                     __end_of_log:
 12949                           	opt stack 0
 12950                           tosu	equ	0xFFF
 12951                           tosh	equ	0xFFE
 12952                           tosl	equ	0xFFD
 12953                           pclath	equ	0xFFA
 12954                           tblptru	equ	0xFF8
 12955                           tblptrh	equ	0xFF7
 12956                           tblptrl	equ	0xFF6
 12957                           tablat	equ	0xFF5
 12958                           prodh	equ	0xFF4
 12959                           prodl	equ	0xFF3
 12960                           intcon	equ	0xFF2
 12961                           intcon2	equ	0xFF1
 12962                           postinc0	equ	0xFEE
 12963                           wreg	equ	0xFE8
 12964                           indf1	equ	0xFE7
 12965                           postdec1	equ	0xFE5
 12966                           fsr1h	equ	0xFE2
 12967                           fsr1l	equ	0xFE1
 12968                           indf2	equ	0xFDF
 12969                           postinc2	equ	0xFDE
 12970                           postdec2	equ	0xFDD
 12971                           fsr2h	equ	0xFDA
 12972                           fsr2l	equ	0xFD9
 12973                           status	equ	0xFD8
 12974                           
 12975 ;; *************** function _exp *****************
 12976 ;; Defined at:
 12977 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 12978 ;; Parameters:    Size  Location     Type
 12979 ;;  x               3   55[BANK0 ] int 
 12980 ;; Auto vars:     Size  Location     Type
 12981 ;;  exponent        2   61[BANK0 ] int 
 12982 ;;  sign            1   63[BANK0 ] unsigned char 
 12983 ;; Return value:  Size  Location     Type
 12984 ;;                  3   55[BANK0 ] unsigned char 
 12985 ;; Registers used:
 12986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12987 ;; Tracked objects:
 12988 ;;		On entry : 0/0
 12989 ;;		On exit  : 0/0
 12990 ;;		Unchanged: 0/0
 12991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12992 ;;      Params:         0       3       0       0       0       0       0
 12993 ;;      Locals:         0       6       0       0       0       0       0
 12994 ;;      Temps:          0       0       0       0       0       0       0
 12995 ;;      Totals:         0       9       0       0       0       0       0
 12996 ;;Total ram usage:        9 bytes
 12997 ;; Hardware stack levels used:    1
 12998 ;; Hardware stack levels required when called:    6
 12999 ;; This function calls:
 13000 ;;		___awtoft
 13001 ;;		___ftdiv
 13002 ;;		___ftge
 13003 ;;		___ftmul
 13004 ;;		___ftneg
 13005 ;;		___ftsub
 13006 ;;		___fttol
 13007 ;;		_eval_poly
 13008 ;;		_floor
 13009 ;;		_ldexp
 13010 ;; This function is called by:
 13011 ;;		_pow
 13012 ;; This function uses a non-reentrant model
 13013 ;;
 13014                           
 13015                           	psect	text87
 13016  000EE0                     __ptext87:
 13017                           	opt stack 0
 13018  000EE0                     _exp:
 13019                           	opt stack 22
 13020                           
 13021                           ;incstack = 0
 13022  000EE0  0100               	movlb	0	; () banked
 13023  000EE2  5197               	movf	exp@x& (0+255),w,b
 13024  000EE4  1198               	iorwf	(exp@x+1)& (0+255),w,b
 13025  000EE6  1199               	iorwf	(exp@x+2)& (0+255),w,b
 13026  000EE8  A4D8               	btfss	status,2,c
 13027  000EEA  D007               	goto	l2083
 13028                           
 13029                           ; BSR set to: 0
 13030  000EEC  0E00               	movlw	0
 13031  000EEE  6F97               	movwf	?_exp& (0+255),b
 13032  000EF0  0E80               	movlw	128
 13033  000EF2  6F98               	movwf	(?_exp+1)& (0+255),b
 13034  000EF4  0E3F               	movlw	63
 13035  000EF6  6F99               	movwf	(?_exp+2)& (0+255),b
 13036                           
 13037                           ; BSR set to: 0
 13038  000EF8  0012               	return	
 13039  000EFA                     l2083:
 13040                           
 13041                           ; BSR set to: 0
 13042                           
 13043                           ; BSR set to: 0
 13044  000EFA  0E72               	movlw	114
 13045  000EFC  6E18               	movwf	___ftge@ff1,c
 13046  000EFE  0E31               	movlw	49
 13047  000F00  6E19               	movwf	___ftge@ff1+1,c
 13048  000F02  0E44               	movlw	68
 13049  000F04  6E1A               	movwf	___ftge@ff1+2,c
 13050  000F06  C097  F01B         	movff	exp@x,___ftge@ff2
 13051  000F0A  C098  F01C         	movff	exp@x+1,___ftge@ff2+1
 13052  000F0E  C099  F01D         	movff	exp@x+2,___ftge@ff2+2
 13053  000F12  EC60  F013         	call	___ftge	;wreg free
 13054  000F16  B0D8               	btfsc	status,0,c
 13055  000F18  D00C               	goto	l2085
 13056  000F1A  0E00               	movlw	0
 13057  000F1C  0100               	movlb	0	; () banked
 13058  000F1E  6FC5               	movwf	(_errno+1)& (0+255),b
 13059  000F20  0E22               	movlw	34
 13060  000F22  6FC4               	movwf	_errno& (0+255),b
 13061  000F24  0EFF               	movlw	255
 13062  000F26  6F97               	movwf	?_exp& (0+255),b
 13063  000F28  0E7F               	movlw	127
 13064  000F2A  6F98               	movwf	(?_exp+1)& (0+255),b
 13065  000F2C  0E7F               	movlw	127
 13066  000F2E  6F99               	movwf	(?_exp+2)& (0+255),b
 13067                           
 13068                           ; BSR set to: 0
 13069  000F30  0012               	return	
 13070  000F32                     l2085:
 13071                           
 13072                           ; BSR set to: 0
 13073  000F32  C097  F018         	movff	exp@x,___ftge@ff1
 13074  000F36  C098  F019         	movff	exp@x+1,___ftge@ff1+1
 13075  000F3A  C099  F01A         	movff	exp@x+2,___ftge@ff1+2
 13076  000F3E  0E49               	movlw	73
 13077  000F40  6E1B               	movwf	___ftge@ff2,c
 13078  000F42  0E3A               	movlw	58
 13079  000F44  6E1C               	movwf	___ftge@ff2+1,c
 13080  000F46  0EC4               	movlw	196
 13081  000F48  6E1D               	movwf	___ftge@ff2+2,c
 13082  000F4A  EC60  F013         	call	___ftge	;wreg free
 13083  000F4E  B0D8               	btfsc	status,0,c
 13084  000F50  D00C               	goto	l2086
 13085  000F52  0E00               	movlw	0
 13086  000F54  0100               	movlb	0	; () banked
 13087  000F56  6FC5               	movwf	(_errno+1)& (0+255),b
 13088  000F58  0E22               	movlw	34
 13089  000F5A  6FC4               	movwf	_errno& (0+255),b
 13090  000F5C  0E00               	movlw	0
 13091  000F5E  6F97               	movwf	?_exp& (0+255),b
 13092  000F60  0E00               	movlw	0
 13093  000F62  6F98               	movwf	(?_exp+1)& (0+255),b
 13094  000F64  0E00               	movlw	0
 13095  000F66  6F99               	movwf	(?_exp+2)& (0+255),b
 13096                           
 13097                           ; BSR set to: 0
 13098  000F68  0012               	return	
 13099  000F6A                     l2086:
 13100                           
 13101                           ; BSR set to: 0
 13102  000F6A  0100               	movlb	0	; () banked
 13103  000F6C  AF99               	btfss	(exp@x+2)& (0+255),7,b
 13104  000F6E  D002               	goto	u7470
 13105  000F70  0E01               	movlw	1
 13106  000F72  D001               	goto	u7480
 13107  000F74                     u7470:
 13108  000F74  0E00               	movlw	0
 13109  000F76                     u7480:
 13110  000F76  6F9F               	movwf	exp@sign& (0+255),b
 13111                           
 13112                           ; BSR set to: 0
 13113  000F78  519F               	movf	exp@sign& (0+255),w,b
 13114  000F7A  B4D8               	btfsc	status,2,c
 13115  000F7C  D00E               	goto	l2087
 13116                           
 13117                           ; BSR set to: 0
 13118  000F7E  C097  F018         	movff	exp@x,___ftneg@f1
 13119  000F82  C098  F019         	movff	exp@x+1,___ftneg@f1+1
 13120  000F86  C099  F01A         	movff	exp@x+2,___ftneg@f1+2
 13121  000F8A  EC56  F01B         	call	___ftneg	;wreg free
 13122  000F8E  C018  F097         	movff	?___ftneg,exp@x
 13123  000F92  C019  F098         	movff	?___ftneg+1,exp@x+1
 13124  000F96  C01A  F099         	movff	?___ftneg+2,exp@x+2
 13125  000F9A                     l2087:
 13126  000F9A  C097  F069         	movff	exp@x,___ftmul@f1
 13127  000F9E  C098  F06A         	movff	exp@x+1,___ftmul@f1+1
 13128  000FA2  C099  F06B         	movff	exp@x+2,___ftmul@f1+2
 13129  000FA6  0EAA               	movlw	170
 13130  000FA8  0100               	movlb	0	; () banked
 13131  000FAA  6F6C               	movwf	___ftmul@f2& (0+255),b
 13132  000FAC  0EB8               	movlw	184
 13133  000FAE  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 13134  000FB0  0E3F               	movlw	63
 13135  000FB2  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 13136  000FB4  ECD4  F00D         	call	___ftmul	;wreg free
 13137  000FB8  C069  F097         	movff	?___ftmul,exp@x
 13138  000FBC  C06A  F098         	movff	?___ftmul+1,exp@x+1
 13139  000FC0  C06B  F099         	movff	?___ftmul+2,exp@x+2
 13140  000FC4  C097  F08F         	movff	exp@x,floor@x
 13141  000FC8  C098  F090         	movff	exp@x+1,floor@x+1
 13142  000FCC  C099  F091         	movff	exp@x+2,floor@x+2
 13143  000FD0  EC35  F00F         	call	_floor	;wreg free
 13144  000FD4  C08F  F09A         	movff	?_floor,_exp$3299
 13145  000FD8  C090  F09B         	movff	?_floor+1,_exp$3299+1
 13146  000FDC  C091  F09C         	movff	?_floor+2,_exp$3299+2
 13147  000FE0  C09A  F078         	movff	_exp$3299,___fttol@f1
 13148  000FE4  C09B  F079         	movff	_exp$3299+1,___fttol@f1+1
 13149  000FE8  C09C  F07A         	movff	_exp$3299+2,___fttol@f1+2
 13150  000FEC  EC58  F00D         	call	___fttol	;wreg free
 13151  000FF0  C078  F09D         	movff	?___fttol,exp@exponent
 13152  000FF4  C079  F09E         	movff	?___fttol+1,exp@exponent+1
 13153  000FF8  C097  F084         	movff	exp@x,___ftsub@f1
 13154  000FFC  C098  F085         	movff	exp@x+1,___ftsub@f1+1
 13155  001000  C099  F086         	movff	exp@x+2,___ftsub@f1+2
 13156  001004  C09D  F020         	movff	exp@exponent,___awtoft@c
 13157  001008  C09E  F021         	movff	exp@exponent+1,___awtoft@c+1
 13158  00100C  EC7E  F019         	call	___awtoft	;wreg free
 13159  001010  C020  F087         	movff	?___awtoft,___ftsub@f2
 13160  001014  C021  F088         	movff	?___awtoft+1,___ftsub@f2+1
 13161  001018  C022  F089         	movff	?___awtoft+2,___ftsub@f2+2
 13162  00101C  ECC4  F018         	call	___ftsub	;wreg free
 13163  001020  C084  F097         	movff	?___ftsub,exp@x
 13164  001024  C085  F098         	movff	?___ftsub+1,exp@x+1
 13165  001028  C086  F099         	movff	?___ftsub+2,exp@x+2
 13166  00102C  C097  F084         	movff	exp@x,eval_poly@x
 13167  001030  C098  F085         	movff	exp@x+1,eval_poly@x+1
 13168  001034  C099  F086         	movff	exp@x+2,eval_poly@x+2
 13169  001038  0E70               	movlw	low exp@coeff
 13170  00103A  0100               	movlb	0	; () banked
 13171  00103C  6F87               	movwf	eval_poly@d& (0+255),b
 13172  00103E  0E06               	movlw	high exp@coeff
 13173  001040  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 13174  001042  0E00               	movlw	0
 13175  001044  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 13176  001046  0E09               	movlw	9
 13177  001048  6F89               	movwf	eval_poly@n& (0+255),b
 13178  00104A  ECA6  F00F         	call	_eval_poly	;wreg free
 13179  00104E  C084  F08E         	movff	?_eval_poly,ldexp@value
 13180  001052  C085  F08F         	movff	?_eval_poly+1,ldexp@value+1
 13181  001056  C086  F090         	movff	?_eval_poly+2,ldexp@value+2
 13182  00105A  C09D  F091         	movff	exp@exponent,ldexp@newexp
 13183  00105E  C09E  F092         	movff	exp@exponent+1,ldexp@newexp+1
 13184  001062  EC11  F010         	call	_ldexp	;wreg free
 13185  001066  C08E  F097         	movff	?_ldexp,exp@x
 13186  00106A  C08F  F098         	movff	?_ldexp+1,exp@x+1
 13187  00106E  C090  F099         	movff	?_ldexp+2,exp@x+2
 13188  001072  0100               	movlb	0	; () banked
 13189  001074  519F               	movf	exp@sign& (0+255),w,b
 13190  001076  B4D8               	btfsc	status,2,c
 13191  001078  D025               	goto	l2088
 13192                           
 13193                           ; BSR set to: 0
 13194  00107A  2997               	incf	exp@x& (0+255),w,b
 13195  00107C  E10E               	bnz	l7690
 13196  00107E  0E7F               	movlw	127
 13197  001080  1998               	xorwf	(exp@x+1)& (0+255),w,b
 13198  001082  E10B               	bnz	l7690
 13199  001084  0E7F               	movlw	127
 13200  001086  1999               	xorwf	(exp@x+2)& (0+255),w,b
 13201  001088  A4D8               	btfss	status,2,c
 13202  00108A  D007               	goto	l2089
 13203                           
 13204                           ; BSR set to: 0
 13205  00108C  0E00               	movlw	0
 13206  00108E  6F97               	movwf	?_exp& (0+255),b
 13207  001090  0E00               	movlw	0
 13208  001092  6F98               	movwf	(?_exp+1)& (0+255),b
 13209  001094  0E00               	movlw	0
 13210  001096  6F99               	movwf	(?_exp+2)& (0+255),b
 13211                           
 13212                           ; BSR set to: 0
 13213  001098  0012               	return	
 13214  00109A                     l2089:
 13215  00109A                     l7690:
 13216                           
 13217                           ; BSR set to: 0
 13218  00109A  0E00               	movlw	0
 13219  00109C  6E29               	movwf	___ftdiv@f1,c
 13220  00109E  0E80               	movlw	128
 13221  0010A0  6E2A               	movwf	___ftdiv@f1+1,c
 13222  0010A2  0E3F               	movlw	63
 13223  0010A4  6E2B               	movwf	___ftdiv@f1+2,c
 13224  0010A6  C097  F02C         	movff	exp@x,___ftdiv@f2
 13225  0010AA  C098  F02D         	movff	exp@x+1,___ftdiv@f2+1
 13226  0010AE  C099  F02E         	movff	exp@x+2,___ftdiv@f2+2
 13227  0010B2  EC4F  F00E         	call	___ftdiv	;wreg free
 13228  0010B6  C029  F097         	movff	?___ftdiv,?_exp
 13229  0010BA  C02A  F098         	movff	?___ftdiv+1,?_exp+1
 13230  0010BE  C02B  F099         	movff	?___ftdiv+2,?_exp+2
 13231  0010C2  0012               	return	
 13232  0010C4                     l2088:
 13233                           
 13234                           ; BSR set to: 0
 13235  0010C4  C097  F097         	movff	exp@x,?_exp
 13236  0010C8  C098  F098         	movff	exp@x+1,?_exp+1
 13237  0010CC  C099  F099         	movff	exp@x+2,?_exp+2
 13238  0010D0  0012               	return		;funcret
 13239  0010D2                     __end_of_exp:
 13240                           	opt stack 0
 13241                           tosu	equ	0xFFF
 13242                           tosh	equ	0xFFE
 13243                           tosl	equ	0xFFD
 13244                           pclath	equ	0xFFA
 13245                           tblptru	equ	0xFF8
 13246                           tblptrh	equ	0xFF7
 13247                           tblptrl	equ	0xFF6
 13248                           tablat	equ	0xFF5
 13249                           prodh	equ	0xFF4
 13250                           prodl	equ	0xFF3
 13251                           intcon	equ	0xFF2
 13252                           intcon2	equ	0xFF1
 13253                           postinc0	equ	0xFEE
 13254                           wreg	equ	0xFE8
 13255                           indf1	equ	0xFE7
 13256                           postdec1	equ	0xFE5
 13257                           fsr1h	equ	0xFE2
 13258                           fsr1l	equ	0xFE1
 13259                           indf2	equ	0xFDF
 13260                           postinc2	equ	0xFDE
 13261                           postdec2	equ	0xFDD
 13262                           fsr2h	equ	0xFDA
 13263                           fsr2l	equ	0xFD9
 13264                           status	equ	0xFD8
 13265                           
 13266 ;; *************** function _ldexp *****************
 13267 ;; Defined at:
 13268 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 13269 ;; Parameters:    Size  Location     Type
 13270 ;;  value           3   46[BANK0 ] unsigned char 
 13271 ;;  newexp          2   49[BANK0 ] int 
 13272 ;; Auto vars:     Size  Location     Type
 13273 ;;		None
 13274 ;; Return value:  Size  Location     Type
 13275 ;;                  3   46[BANK0 ] int 
 13276 ;; Registers used:
 13277 ;;		wreg, status,2, status,0
 13278 ;; Tracked objects:
 13279 ;;		On entry : 0/0
 13280 ;;		On exit  : 0/0
 13281 ;;		Unchanged: 0/0
 13282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13283 ;;      Params:         0       5       0       0       0       0       0
 13284 ;;      Locals:         0       0       0       0       0       0       0
 13285 ;;      Temps:          0       2       0       0       0       0       0
 13286 ;;      Totals:         0       7       0       0       0       0       0
 13287 ;;Total ram usage:        7 bytes
 13288 ;; Hardware stack levels used:    1
 13289 ;; Hardware stack levels required when called:    3
 13290 ;; This function calls:
 13291 ;;		Nothing
 13292 ;; This function is called by:
 13293 ;;		_exp
 13294 ;; This function uses a non-reentrant model
 13295 ;;
 13296                           
 13297                           	psect	text88
 13298  002022                     __ptext88:
 13299                           	opt stack 0
 13300  002022                     _ldexp:
 13301                           	opt stack 24
 13302                           
 13303                           ;incstack = 0
 13304  002022  0100               	movlb	0	; () banked
 13305  002024  518E               	movf	ldexp@value& (0+255),w,b
 13306  002026  118F               	iorwf	(ldexp@value+1)& (0+255),w,b
 13307  002028  1190               	iorwf	(ldexp@value+2)& (0+255),w,b
 13308  00202A  A4D8               	btfss	status,2,c
 13309  00202C  D007               	goto	l2107
 13310                           
 13311                           ; BSR set to: 0
 13312  00202E  0E00               	movlw	0
 13313  002030  6F8E               	movwf	?_ldexp& (0+255),b
 13314  002032  0E00               	movlw	0
 13315  002034  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 13316  002036  0E00               	movlw	0
 13317  002038  6F90               	movwf	(?_ldexp+2)& (0+255),b
 13318                           
 13319                           ; BSR set to: 0
 13320  00203A  0012               	return	
 13321  00203C                     l2107:
 13322                           
 13323                           ; BSR set to: 0
 13324                           
 13325                           ; BSR set to: 0
 13326  00203C  5190               	movf	(ldexp@value+2)& (0+255),w,b
 13327  00203E  0B7F               	andlw	127
 13328  002040  6F93               	movwf	??_ldexp& (0+255),b
 13329  002042  6B94               	clrf	(??_ldexp+1)& (0+255),b
 13330  002044  90D8               	bcf	status,0,c
 13331  002046  3793               	rlcf	??_ldexp& (0+255),f,b
 13332  002048  3794               	rlcf	(??_ldexp+1)& (0+255),f,b
 13333  00204A  5193               	movf	??_ldexp& (0+255),w,b
 13334  00204C  2791               	addwf	ldexp@newexp& (0+255),f,b
 13335  00204E  5194               	movf	(??_ldexp+1)& (0+255),w,b
 13336  002050  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 13337  002052  AF8F               	btfss	(ldexp@value+1)& (0+255),7,b
 13338  002054  D003               	goto	u4290
 13339  002056  6B93               	clrf	??_ldexp& (0+255),b
 13340  002058  2B93               	incf	??_ldexp& (0+255),f,b
 13341  00205A  D002               	goto	u4298
 13342  00205C                     u4290:
 13343  00205C  0100               	movlb	0	; () banked
 13344  00205E  6B93               	clrf	??_ldexp& (0+255),b
 13345  002060                     u4298:
 13346  002060  5193               	movf	??_ldexp& (0+255),w,b
 13347  002062  2791               	addwf	ldexp@newexp& (0+255),f,b
 13348  002064  0E00               	movlw	0
 13349  002066  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 13350  002068  AF92               	btfss	(ldexp@newexp+1)& (0+255),7,b
 13351  00206A  D00B               	goto	l2109
 13352                           
 13353                           ; BSR set to: 0
 13354  00206C  0E00               	movlw	0
 13355  00206E  6FC5               	movwf	(_errno+1)& (0+255),b
 13356  002070  0E22               	movlw	34
 13357  002072  6FC4               	movwf	_errno& (0+255),b
 13358  002074  0E00               	movlw	0
 13359  002076  6F8E               	movwf	?_ldexp& (0+255),b
 13360  002078  0E00               	movlw	0
 13361  00207A  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 13362  00207C  0E00               	movlw	0
 13363  00207E                     L1:
 13364  00207E  6F90               	movwf	(?_ldexp+2)& (0+255),b
 13365                           
 13366                           ; BSR set to: 0
 13367  002080  0012               	return	
 13368  002082                     l2109:
 13369                           
 13370                           ; BSR set to: 0
 13371                           
 13372                           ; BSR set to: 0
 13373  002082  BF92               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 13374  002084  D015               	goto	l2111
 13375  002086  0592               	decf	(ldexp@newexp+1)& (0+255),w,b
 13376  002088  A0D8               	btfss	status,0,c
 13377  00208A  D012               	goto	l2111
 13378                           
 13379                           ; BSR set to: 0
 13380  00208C  0E00               	movlw	0
 13381  00208E  6FC5               	movwf	(_errno+1)& (0+255),b
 13382  002090  0E22               	movlw	34
 13383  002092  6FC4               	movwf	_errno& (0+255),b
 13384                           
 13385                           ; BSR set to: 0
 13386  002094  AF90               	btfss	(ldexp@value+2)& (0+255),7,b
 13387  002096  D006               	goto	l2112
 13388                           
 13389                           ; BSR set to: 0
 13390  002098  0EFF               	movlw	255
 13391  00209A  6F8E               	movwf	?_ldexp& (0+255),b
 13392  00209C  0E7F               	movlw	127
 13393  00209E  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 13394  0020A0  0EFF               	movlw	255
 13395  0020A2  D7ED               	goto	L1
 13396  0020A4                     l2112:
 13397                           
 13398                           ; BSR set to: 0
 13399                           
 13400                           ; BSR set to: 0
 13401  0020A4  0EFF               	movlw	255
 13402  0020A6  6F8E               	movwf	?_ldexp& (0+255),b
 13403  0020A8  0E7F               	movlw	127
 13404  0020AA  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 13405  0020AC  0E7F               	movlw	127
 13406  0020AE  D7E7               	goto	L1
 13407  0020B0                     l2111:
 13408                           
 13409                           ; BSR set to: 0
 13410                           
 13411                           ; BSR set to: 0
 13412  0020B0  3592               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 13413  0020B2  3192               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 13414  0020B4  6F94               	movwf	(??_ldexp+1)& (0+255),b
 13415  0020B6  3191               	rrcf	ldexp@newexp& (0+255),w,b
 13416  0020B8  6F93               	movwf	??_ldexp& (0+255),b
 13417  0020BA  5190               	movf	(ldexp@value+2)& (0+255),w,b
 13418  0020BC  1993               	xorwf	??_ldexp& (0+255),w,b
 13419  0020BE  0B80               	andlw	-128
 13420  0020C0  1993               	xorwf	??_ldexp& (0+255),w,b
 13421  0020C2  6F90               	movwf	(ldexp@value+2)& (0+255),b
 13422  0020C4  C091  F093         	movff	ldexp@newexp,??_ldexp
 13423  0020C8  0E01               	movlw	1
 13424  0020CA  1793               	andwf	??_ldexp& (0+255),f,b
 13425  0020CC  3393               	rrcf	??_ldexp& (0+255),f,b
 13426  0020CE  3393               	rrcf	??_ldexp& (0+255),f,b
 13427  0020D0  518F               	movf	(ldexp@value+1)& (0+255),w,b
 13428  0020D2  1993               	xorwf	??_ldexp& (0+255),w,b
 13429  0020D4  0B7F               	andlw	-129
 13430  0020D6  1993               	xorwf	??_ldexp& (0+255),w,b
 13431  0020D8  6F8F               	movwf	(ldexp@value+1)& (0+255),b
 13432                           
 13433                           ; BSR set to: 0
 13434                           
 13435                           ; BSR set to: 0
 13436                           
 13437                           ; BSR set to: 0
 13438  0020DA  C08E  F08E         	movff	ldexp@value,?_ldexp
 13439  0020DE  C08F  F08F         	movff	ldexp@value+1,?_ldexp+1
 13440  0020E2  C090  F090         	movff	ldexp@value+2,?_ldexp+2
 13441  0020E6  0012               	return	
 13442  0020E8                     __end_of_ldexp:
 13443                           	opt stack 0
 13444                           tosu	equ	0xFFF
 13445                           tosh	equ	0xFFE
 13446                           tosl	equ	0xFFD
 13447                           pclath	equ	0xFFA
 13448                           tblptru	equ	0xFF8
 13449                           tblptrh	equ	0xFF7
 13450                           tblptrl	equ	0xFF6
 13451                           tablat	equ	0xFF5
 13452                           prodh	equ	0xFF4
 13453                           prodl	equ	0xFF3
 13454                           intcon	equ	0xFF2
 13455                           intcon2	equ	0xFF1
 13456                           postinc0	equ	0xFEE
 13457                           wreg	equ	0xFE8
 13458                           indf1	equ	0xFE7
 13459                           postdec1	equ	0xFE5
 13460                           fsr1h	equ	0xFE2
 13461                           fsr1l	equ	0xFE1
 13462                           indf2	equ	0xFDF
 13463                           postinc2	equ	0xFDE
 13464                           postdec2	equ	0xFDD
 13465                           fsr2h	equ	0xFDA
 13466                           fsr2l	equ	0xFD9
 13467                           status	equ	0xFD8
 13468                           
 13469 ;; *************** function _floor *****************
 13470 ;; Defined at:
 13471 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 13472 ;; Parameters:    Size  Location     Type
 13473 ;;  x               3   47[BANK0 ] int 
 13474 ;; Auto vars:     Size  Location     Type
 13475 ;;  i               3   50[BANK0 ] int 
 13476 ;;  expon           2   53[BANK0 ] int 
 13477 ;; Return value:  Size  Location     Type
 13478 ;;                  3   47[BANK0 ] int 
 13479 ;; Registers used:
 13480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13481 ;; Tracked objects:
 13482 ;;		On entry : 0/0
 13483 ;;		On exit  : 0/0
 13484 ;;		Unchanged: 0/0
 13485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13486 ;;      Params:         0       3       0       0       0       0       0
 13487 ;;      Locals:         0       5       0       0       0       0       0
 13488 ;;      Temps:          0       0       0       0       0       0       0
 13489 ;;      Totals:         0       8       0       0       0       0       0
 13490 ;;Total ram usage:        8 bytes
 13491 ;; Hardware stack levels used:    1
 13492 ;; Hardware stack levels required when called:    5
 13493 ;; This function calls:
 13494 ;;		___altoft
 13495 ;;		___ftadd
 13496 ;;		___ftge
 13497 ;;		___fttol
 13498 ;;		_frexp
 13499 ;; This function is called by:
 13500 ;;		_exp
 13501 ;; This function uses a non-reentrant model
 13502 ;;
 13503                           
 13504                           	psect	text89
 13505  001E6A                     __ptext89:
 13506                           	opt stack 0
 13507  001E6A                     _floor:
 13508                           	opt stack 22
 13509                           
 13510                           ; BSR set to: 0
 13511                           ;incstack = 0
 13512  001E6A  C08F  F018         	movff	floor@x,frexp@value
 13513  001E6E  C090  F019         	movff	floor@x+1,frexp@value+1
 13514  001E72  C091  F01A         	movff	floor@x+2,frexp@value+2
 13515  001E76  0E95               	movlw	low floor@expon
 13516  001E78  6E1B               	movwf	frexp@eptr,c
 13517  001E7A  0E00               	movlw	high floor@expon
 13518  001E7C  6E1C               	movwf	frexp@eptr+1,c
 13519  001E7E  EC18  F013         	call	_frexp	;wreg free
 13520  001E82  0100               	movlb	0	; () banked
 13521  001E84  AF96               	btfss	(floor@expon+1)& (0+255),7,b
 13522  001E86  D010               	goto	l2094
 13523                           
 13524                           ; BSR set to: 0
 13525  001E88  AF91               	btfss	(floor@x+2)& (0+255),7,b
 13526  001E8A  D007               	goto	l2095
 13527                           
 13528                           ; BSR set to: 0
 13529  001E8C  0E00               	movlw	0
 13530  001E8E  6F8F               	movwf	?_floor& (0+255),b
 13531  001E90  0E80               	movlw	128
 13532  001E92  6F90               	movwf	(?_floor+1)& (0+255),b
 13533  001E94  0EBF               	movlw	191
 13534  001E96  6F91               	movwf	(?_floor+2)& (0+255),b
 13535                           
 13536                           ; BSR set to: 0
 13537  001E98  0012               	return	
 13538  001E9A                     l2095:
 13539                           
 13540                           ; BSR set to: 0
 13541                           
 13542                           ; BSR set to: 0
 13543  001E9A  0E00               	movlw	0
 13544  001E9C  6F8F               	movwf	?_floor& (0+255),b
 13545  001E9E  0E00               	movlw	0
 13546  001EA0  6F90               	movwf	(?_floor+1)& (0+255),b
 13547  001EA2  0E00               	movlw	0
 13548  001EA4  6F91               	movwf	(?_floor+2)& (0+255),b
 13549                           
 13550                           ; BSR set to: 0
 13551  001EA6  0012               	return	
 13552  001EA8                     l2094:
 13553                           
 13554                           ; BSR set to: 0
 13555                           
 13556                           ; BSR set to: 0
 13557  001EA8  5196               	movf	(floor@expon+1)& (0+255),w,b
 13558  001EAA  E104               	bnz	u6930
 13559  001EAC  0E15               	movlw	21
 13560  001EAE  5D95               	subwf	floor@expon& (0+255),w,b
 13561  001EB0  A0D8               	btfss	status,0,c
 13562  001EB2  D007               	goto	l2097
 13563  001EB4                     u6930:
 13564                           
 13565                           ; BSR set to: 0
 13566  001EB4  C08F  F08F         	movff	floor@x,?_floor
 13567  001EB8  C090  F090         	movff	floor@x+1,?_floor+1
 13568  001EBC  C091  F091         	movff	floor@x+2,?_floor+2
 13569  001EC0  0012               	return	
 13570  001EC2                     l2097:
 13571                           
 13572                           ; BSR set to: 0
 13573                           
 13574                           ; BSR set to: 0
 13575  001EC2  C08F  F078         	movff	floor@x,___fttol@f1
 13576  001EC6  C090  F079         	movff	floor@x+1,___fttol@f1+1
 13577  001ECA  C091  F07A         	movff	floor@x+2,___fttol@f1+2
 13578  001ECE  EC58  F00D         	call	___fttol	;wreg free
 13579  001ED2  C078  F087         	movff	?___fttol,___altoft@c
 13580  001ED6  C079  F088         	movff	?___fttol+1,___altoft@c+1
 13581  001EDA  C07A  F089         	movff	?___fttol+2,___altoft@c+2
 13582  001EDE  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
 13583  001EE2  EC2A  F014         	call	___altoft	;wreg free
 13584  001EE6  C087  F092         	movff	?___altoft,floor@i
 13585  001EEA  C088  F093         	movff	?___altoft+1,floor@i+1
 13586  001EEE  C089  F094         	movff	?___altoft+2,floor@i+2
 13587  001EF2  C08F  F018         	movff	floor@x,___ftge@ff1
 13588  001EF6  C090  F019         	movff	floor@x+1,___ftge@ff1+1
 13589  001EFA  C091  F01A         	movff	floor@x+2,___ftge@ff1+2
 13590  001EFE  C092  F01B         	movff	floor@i,___ftge@ff2
 13591  001F02  C093  F01C         	movff	floor@i+1,___ftge@ff2+1
 13592  001F06  C094  F01D         	movff	floor@i+2,___ftge@ff2+2
 13593  001F0A  EC60  F013         	call	___ftge	;wreg free
 13594  001F0E  B0D8               	btfsc	status,0,c
 13595  001F10  D016               	goto	l2098
 13596  001F12  C092  F078         	movff	floor@i,___ftadd@f1
 13597  001F16  C093  F079         	movff	floor@i+1,___ftadd@f1+1
 13598  001F1A  C094  F07A         	movff	floor@i+2,___ftadd@f1+2
 13599  001F1E  0E00               	movlw	0
 13600  001F20  0100               	movlb	0	; () banked
 13601  001F22  6F7B               	movwf	___ftadd@f2& (0+255),b
 13602  001F24  0E80               	movlw	128
 13603  001F26  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 13604  001F28  0EBF               	movlw	191
 13605  001F2A  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 13606  001F2C  EC2F  F00A         	call	___ftadd	;wreg free
 13607  001F30  C078  F08F         	movff	?___ftadd,?_floor
 13608  001F34  C079  F090         	movff	?___ftadd+1,?_floor+1
 13609  001F38  C07A  F091         	movff	?___ftadd+2,?_floor+2
 13610  001F3C  0012               	return	
 13611  001F3E                     l2098:
 13612  001F3E  C092  F08F         	movff	floor@i,?_floor
 13613  001F42  C093  F090         	movff	floor@i+1,?_floor+1
 13614  001F46  C094  F091         	movff	floor@i+2,?_floor+2
 13615  001F4A  0012               	return		;funcret
 13616  001F4C                     __end_of_floor:
 13617                           	opt stack 0
 13618                           tosu	equ	0xFFF
 13619                           tosh	equ	0xFFE
 13620                           tosl	equ	0xFFD
 13621                           pclath	equ	0xFFA
 13622                           tblptru	equ	0xFF8
 13623                           tblptrh	equ	0xFF7
 13624                           tblptrl	equ	0xFF6
 13625                           tablat	equ	0xFF5
 13626                           prodh	equ	0xFF4
 13627                           prodl	equ	0xFF3
 13628                           intcon	equ	0xFF2
 13629                           intcon2	equ	0xFF1
 13630                           postinc0	equ	0xFEE
 13631                           wreg	equ	0xFE8
 13632                           indf1	equ	0xFE7
 13633                           postdec1	equ	0xFE5
 13634                           fsr1h	equ	0xFE2
 13635                           fsr1l	equ	0xFE1
 13636                           indf2	equ	0xFDF
 13637                           postinc2	equ	0xFDE
 13638                           postdec2	equ	0xFDD
 13639                           fsr2h	equ	0xFDA
 13640                           fsr2l	equ	0xFD9
 13641                           status	equ	0xFD8
 13642                           
 13643 ;; *************** function _frexp *****************
 13644 ;; Defined at:
 13645 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 13646 ;; Parameters:    Size  Location     Type
 13647 ;;  value           3   23[COMRAM] int 
 13648 ;;  eptr            2   26[COMRAM] PTR int 
 13649 ;;		 -> log@exponent(2), floor@expon(2), 
 13650 ;; Auto vars:     Size  Location     Type
 13651 ;;		None
 13652 ;; Return value:  Size  Location     Type
 13653 ;;                  3   23[COMRAM] PTR int 
 13654 ;; Registers used:
 13655 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13656 ;; Tracked objects:
 13657 ;;		On entry : 0/0
 13658 ;;		On exit  : 0/0
 13659 ;;		Unchanged: 0/0
 13660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13661 ;;      Params:         5       0       0       0       0       0       0
 13662 ;;      Locals:         0       0       0       0       0       0       0
 13663 ;;      Temps:          2       0       0       0       0       0       0
 13664 ;;      Totals:         7       0       0       0       0       0       0
 13665 ;;Total ram usage:        7 bytes
 13666 ;; Hardware stack levels used:    1
 13667 ;; Hardware stack levels required when called:    3
 13668 ;; This function calls:
 13669 ;;		Nothing
 13670 ;; This function is called by:
 13671 ;;		_floor
 13672 ;;		_log
 13673 ;; This function uses a non-reentrant model
 13674 ;;
 13675                           
 13676                           	psect	text90
 13677  002630                     __ptext90:
 13678                           	opt stack 0
 13679  002630                     _frexp:
 13680                           	opt stack 24
 13681                           
 13682                           ;incstack = 0
 13683  002630  5018               	movf	frexp@value,w,c
 13684  002632  1019               	iorwf	frexp@value+1,w,c
 13685  002634  101A               	iorwf	frexp@value+2,w,c
 13686  002636  A4D8               	btfss	status,2,c
 13687  002638  D00F               	goto	l2103
 13688  00263A  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13689  00263E  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13690  002642  0E00               	movlw	0
 13691  002644  6EDE               	movwf	postinc2,c
 13692  002646  0E00               	movlw	0
 13693  002648  6EDD               	movwf	postdec2,c
 13694  00264A  0E00               	movlw	0
 13695  00264C  6E18               	movwf	?_frexp,c
 13696  00264E  0E00               	movlw	0
 13697  002650  6E19               	movwf	?_frexp+1,c
 13698  002652  0E00               	movlw	0
 13699  002654  6E1A               	movwf	?_frexp+2,c
 13700  002656  0012               	return	
 13701  002658                     l2103:
 13702  002658  501A               	movf	frexp@value+2,w,c
 13703  00265A  0B7F               	andlw	127
 13704  00265C  6E1D               	movwf	??_frexp& (0+255),c
 13705  00265E  6A1E               	clrf	(??_frexp+1)& (0+255),c
 13706  002660  90D8               	bcf	status,0,c
 13707  002662  361D               	rlcf	??_frexp,f,c
 13708  002664  361E               	rlcf	??_frexp+1,f,c
 13709  002666  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13710  00266A  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13711  00266E  C01D  FFDE         	movff	??_frexp,postinc2
 13712  002672  C01E  FFDD         	movff	??_frexp+1,postdec2
 13713  002676  AE19               	btfss	frexp@value+1,7,c
 13714  002678  D003               	goto	u3960
 13715  00267A  6A1D               	clrf	??_frexp& (0+255),c
 13716  00267C  2A1D               	incf	??_frexp& (0+255),f,c
 13717  00267E  D001               	goto	u3968
 13718  002680                     u3960:
 13719  002680  6A1D               	clrf	??_frexp& (0+255),c
 13720  002682                     u3968:
 13721  002682  501D               	movf	??_frexp,w,c
 13722  002684  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13723  002688  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13724  00268C  12DE               	iorwf	postinc2,f,c
 13725  00268E  0E00               	movlw	0
 13726  002690  12DD               	iorwf	postdec2,f,c
 13727  002692  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13728  002696  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13729  00269A  0E82               	movlw	130
 13730  00269C  26DE               	addwf	postinc2,f,c
 13731  00269E  0EFF               	movlw	255
 13732  0026A0  22DD               	addwfc	postdec2,f,c
 13733  0026A2  801A               	bsf	frexp@value+2,0,c
 13734  0026A4  821A               	bsf	frexp@value+2,1,c
 13735  0026A6  841A               	bsf	frexp@value+2,2,c
 13736  0026A8  861A               	bsf	frexp@value+2,3,c
 13737  0026AA  881A               	bsf	frexp@value+2,4,c
 13738  0026AC  8A1A               	bsf	frexp@value+2,5,c
 13739  0026AE  9C1A               	bcf	frexp@value+2,6,c
 13740  0026B0  9E19               	bcf	frexp@value+1,7,c
 13741  0026B2  C018  F018         	movff	frexp@value,?_frexp
 13742  0026B6  C019  F019         	movff	frexp@value+1,?_frexp+1
 13743  0026BA  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 13744  0026BE  0012               	return	
 13745  0026C0                     __end_of_frexp:
 13746                           	opt stack 0
 13747                           tosu	equ	0xFFF
 13748                           tosh	equ	0xFFE
 13749                           tosl	equ	0xFFD
 13750                           pclath	equ	0xFFA
 13751                           tblptru	equ	0xFF8
 13752                           tblptrh	equ	0xFF7
 13753                           tblptrl	equ	0xFF6
 13754                           tablat	equ	0xFF5
 13755                           prodh	equ	0xFF4
 13756                           prodl	equ	0xFF3
 13757                           intcon	equ	0xFF2
 13758                           intcon2	equ	0xFF1
 13759                           postinc0	equ	0xFEE
 13760                           wreg	equ	0xFE8
 13761                           indf1	equ	0xFE7
 13762                           postdec1	equ	0xFE5
 13763                           fsr1h	equ	0xFE2
 13764                           fsr1l	equ	0xFE1
 13765                           indf2	equ	0xFDF
 13766                           postinc2	equ	0xFDE
 13767                           postdec2	equ	0xFDD
 13768                           fsr2h	equ	0xFDA
 13769                           fsr2l	equ	0xFD9
 13770                           status	equ	0xFD8
 13771                           
 13772 ;; *************** function ___fttol *****************
 13773 ;; Defined at:
 13774 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 13775 ;; Parameters:    Size  Location     Type
 13776 ;;  f1              3   24[BANK0 ] float 
 13777 ;; Auto vars:     Size  Location     Type
 13778 ;;  lval            4   34[BANK0 ] unsigned long 
 13779 ;;  exp1            1   38[BANK0 ] unsigned char 
 13780 ;;  sign1           1   33[BANK0 ] unsigned char 
 13781 ;; Return value:  Size  Location     Type
 13782 ;;                  4   24[BANK0 ] long 
 13783 ;; Registers used:
 13784 ;;		wreg, status,2, status,0
 13785 ;; Tracked objects:
 13786 ;;		On entry : 0/0
 13787 ;;		On exit  : 0/0
 13788 ;;		Unchanged: 0/0
 13789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13790 ;;      Params:         0       4       0       0       0       0       0
 13791 ;;      Locals:         0       6       0       0       0       0       0
 13792 ;;      Temps:          0       5       0       0       0       0       0
 13793 ;;      Totals:         0      15       0       0       0       0       0
 13794 ;;Total ram usage:       15 bytes
 13795 ;; Hardware stack levels used:    1
 13796 ;; Hardware stack levels required when called:    3
 13797 ;; This function calls:
 13798 ;;		Nothing
 13799 ;; This function is called by:
 13800 ;;		_AdcConvert
 13801 ;;		_pow
 13802 ;;		_exp
 13803 ;;		_floor
 13804 ;; This function uses a non-reentrant model
 13805 ;;
 13806                           
 13807                           	psect	text91
 13808  001AB0                     __ptext91:
 13809                           	opt stack 0
 13810  001AB0                     ___fttol:
 13811                           	opt stack 23
 13812                           
 13813                           ;incstack = 0
 13814  001AB0  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 13815  001AB4  0100               	movlb	0	; () banked
 13816  001AB6  6B7D               	clrf	(??___fttol+1)& (0+255),b
 13817  001AB8  6B7E               	clrf	(??___fttol+2)& (0+255),b
 13818  001ABA  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 13819  001ABC  377C               	rlcf	??___fttol& (0+255),f,b
 13820  001ABE  E301               	bnc	u3871
 13821  001AC0  817D               	bsf	(??___fttol+1)& (0+255),0,b
 13822  001AC2                     u3871:
 13823  001AC2  517C               	movf	??___fttol& (0+255),w,b
 13824  001AC4  6F86               	movwf	___fttol@exp1& (0+255),b
 13825  001AC6  5186               	movf	___fttol@exp1& (0+255),w,b
 13826  001AC8  A4D8               	btfss	status,2,c
 13827  001ACA  D009               	goto	l1760
 13828                           
 13829                           ; BSR set to: 0
 13830  001ACC  0E00               	movlw	0
 13831  001ACE  6F78               	movwf	?___fttol& (0+255),b
 13832  001AD0  0E00               	movlw	0
 13833  001AD2  6F79               	movwf	(?___fttol+1)& (0+255),b
 13834  001AD4  0E00               	movlw	0
 13835  001AD6  6F7A               	movwf	(?___fttol+2)& (0+255),b
 13836  001AD8  0E00               	movlw	0
 13837  001ADA  6F7B               	movwf	(?___fttol+3)& (0+255),b
 13838                           
 13839                           ; BSR set to: 0
 13840  001ADC  0012               	return	
 13841  001ADE                     l1760:
 13842                           
 13843                           ; BSR set to: 0
 13844                           
 13845                           ; BSR set to: 0
 13846  001ADE  0E17               	movlw	23
 13847  001AE0  6F7C               	movwf	??___fttol& (0+255),b
 13848  001AE2  C078  F07D         	movff	___fttol@f1,??___fttol+1
 13849  001AE6  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 13850  001AEA  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 13851  001AEE  297C               	incf	??___fttol& (0+255),w,b
 13852  001AF0  6F80               	movwf	(??___fttol+4)& (0+255),b
 13853  001AF2  D004               	goto	u3890
 13854  001AF4                     u3895:
 13855  001AF4  90D8               	bcf	status,0,c
 13856  001AF6  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 13857  001AF8  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 13858  001AFA  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 13859  001AFC                     u3890:
 13860  001AFC  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 13861  001AFE  D7FA               	goto	u3895
 13862  001B00  0100               	movlb	0	; () banked
 13863  001B02  517D               	movf	(??___fttol+1)& (0+255),w,b
 13864  001B04  6F81               	movwf	___fttol@sign1& (0+255),b
 13865                           
 13866                           ; BSR set to: 0
 13867  001B06  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 13868                           
 13869                           ; BSR set to: 0
 13870  001B08  0EFF               	movlw	255
 13871  001B0A  1778               	andwf	___fttol@f1& (0+255),f,b
 13872  001B0C  0EFF               	movlw	255
 13873  001B0E  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 13874  001B10  0E00               	movlw	0
 13875  001B12  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 13876                           
 13877                           ; BSR set to: 0
 13878  001B14  5178               	movf	___fttol@f1& (0+255),w,b
 13879  001B16  6F82               	movwf	___fttol@lval& (0+255),b
 13880  001B18  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 13881  001B1A  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 13882  001B1C  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 13883  001B1E  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 13884  001B20  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 13885                           
 13886                           ; BSR set to: 0
 13887  001B22  0E8E               	movlw	142
 13888  001B24  5F86               	subwf	___fttol@exp1& (0+255),f,b
 13889                           
 13890                           ; BSR set to: 0
 13891  001B26  AF86               	btfss	___fttol@exp1& (0+255),7,b
 13892  001B28  D016               	goto	l1762
 13893                           
 13894                           ; BSR set to: 0
 13895  001B2A  5186               	movf	___fttol@exp1& (0+255),w,b
 13896  001B2C  0A80               	xorlw	128
 13897  001B2E  0F8F               	addlw	143
 13898  001B30  B0D8               	btfsc	status,0,c
 13899  001B32  D009               	goto	l1763
 13900                           
 13901                           ; BSR set to: 0
 13902  001B34  0E00               	movlw	0
 13903  001B36  6F78               	movwf	?___fttol& (0+255),b
 13904  001B38  0E00               	movlw	0
 13905  001B3A  6F79               	movwf	(?___fttol+1)& (0+255),b
 13906  001B3C  0E00               	movlw	0
 13907  001B3E  6F7A               	movwf	(?___fttol+2)& (0+255),b
 13908  001B40  0E00               	movlw	0
 13909  001B42  6F7B               	movwf	(?___fttol+3)& (0+255),b
 13910                           
 13911                           ; BSR set to: 0
 13912  001B44  0012               	return	
 13913  001B46                     l1763:
 13914                           
 13915                           ; BSR set to: 0
 13916                           
 13917                           ; BSR set to: 0
 13918                           
 13919                           ; BSR set to: 0
 13920  001B46  90D8               	bcf	status,0,c
 13921  001B48  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 13922  001B4A  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 13923  001B4C  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 13924  001B4E  3382               	rrcf	___fttol@lval& (0+255),f,b
 13925                           
 13926                           ; BSR set to: 0
 13927  001B50  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 13928  001B52  D7F9               	goto	l1763
 13929                           
 13930                           ; BSR set to: 0
 13931  001B54  D015               	goto	u3930
 13932  001B56                     l1762:
 13933                           
 13934                           ; BSR set to: 0
 13935                           
 13936                           ; BSR set to: 0
 13937  001B56  0E17               	movlw	23
 13938  001B58  6586               	cpfsgt	___fttol@exp1& (0+255),b
 13939  001B5A  D00F               	goto	l1768
 13940                           
 13941                           ; BSR set to: 0
 13942  001B5C  0E00               	movlw	0
 13943  001B5E  6F78               	movwf	?___fttol& (0+255),b
 13944  001B60  0E00               	movlw	0
 13945  001B62  6F79               	movwf	(?___fttol+1)& (0+255),b
 13946  001B64  0E00               	movlw	0
 13947  001B66  6F7A               	movwf	(?___fttol+2)& (0+255),b
 13948  001B68  0E00               	movlw	0
 13949  001B6A  6F7B               	movwf	(?___fttol+3)& (0+255),b
 13950                           
 13951                           ; BSR set to: 0
 13952  001B6C  0012               	return	
 13953  001B6E                     
 13954                           ; BSR set to: 0
 13955                           
 13956                           ; BSR set to: 0
 13957  001B6E  90D8               	bcf	status,0,c
 13958  001B70  3782               	rlcf	___fttol@lval& (0+255),f,b
 13959  001B72  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 13960  001B74  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 13961  001B76  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 13962  001B78  0786               	decf	___fttol@exp1& (0+255),f,b
 13963  001B7A                     l1768:
 13964                           
 13965                           ; BSR set to: 0
 13966                           
 13967                           ; BSR set to: 0
 13968  001B7A  5186               	movf	___fttol@exp1& (0+255),w,b
 13969  001B7C  A4D8               	btfss	status,2,c
 13970  001B7E  D7F7               	goto	l1769
 13971  001B80                     u3930:
 13972                           
 13973                           ; BSR set to: 0
 13974                           
 13975                           ; BSR set to: 0
 13976                           
 13977                           ; BSR set to: 0
 13978  001B80  5181               	movf	___fttol@sign1& (0+255),w,b
 13979  001B82  B4D8               	btfsc	status,2,c
 13980  001B84  D008               	goto	l1771
 13981                           
 13982                           ; BSR set to: 0
 13983  001B86  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 13984  001B88  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 13985  001B8A  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 13986  001B8C  6D82               	negf	___fttol@lval& (0+255),b
 13987  001B8E  0E00               	movlw	0
 13988  001B90  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 13989  001B92  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 13990  001B94  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 13991  001B96                     l1771:
 13992                           
 13993                           ; BSR set to: 0
 13994                           
 13995                           ; BSR set to: 0
 13996  001B96  C082  F078         	movff	___fttol@lval,?___fttol
 13997  001B9A  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 13998  001B9E  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 13999  001BA2  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 14000  001BA6  0012               	return	
 14001  001BA8                     __end_of___fttol:
 14002                           	opt stack 0
 14003                           tosu	equ	0xFFF
 14004                           tosh	equ	0xFFE
 14005                           tosl	equ	0xFFD
 14006                           pclath	equ	0xFFA
 14007                           tblptru	equ	0xFF8
 14008                           tblptrh	equ	0xFF7
 14009                           tblptrl	equ	0xFF6
 14010                           tablat	equ	0xFF5
 14011                           prodh	equ	0xFF4
 14012                           prodl	equ	0xFF3
 14013                           intcon	equ	0xFF2
 14014                           intcon2	equ	0xFF1
 14015                           postinc0	equ	0xFEE
 14016                           wreg	equ	0xFE8
 14017                           indf1	equ	0xFE7
 14018                           postdec1	equ	0xFE5
 14019                           fsr1h	equ	0xFE2
 14020                           fsr1l	equ	0xFE1
 14021                           indf2	equ	0xFDF
 14022                           postinc2	equ	0xFDE
 14023                           postdec2	equ	0xFDD
 14024                           fsr2h	equ	0xFDA
 14025                           fsr2l	equ	0xFD9
 14026                           status	equ	0xFD8
 14027                           
 14028 ;; *************** function ___ftge *****************
 14029 ;; Defined at:
 14030 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 14031 ;; Parameters:    Size  Location     Type
 14032 ;;  ff1             3   23[COMRAM] float 
 14033 ;;  ff2             3   26[COMRAM] float 
 14034 ;; Auto vars:     Size  Location     Type
 14035 ;;		None
 14036 ;; Return value:  Size  Location     Type
 14037 ;;		None               void
 14038 ;; Registers used:
 14039 ;;		wreg, status,2, status,0
 14040 ;; Tracked objects:
 14041 ;;		On entry : 0/0
 14042 ;;		On exit  : 0/0
 14043 ;;		Unchanged: 0/0
 14044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14045 ;;      Params:         6       0       0       0       0       0       0
 14046 ;;      Locals:         0       0       0       0       0       0       0
 14047 ;;      Temps:          3       0       0       0       0       0       0
 14048 ;;      Totals:         9       0       0       0       0       0       0
 14049 ;;Total ram usage:        9 bytes
 14050 ;; Hardware stack levels used:    1
 14051 ;; Hardware stack levels required when called:    3
 14052 ;; This function calls:
 14053 ;;		Nothing
 14054 ;; This function is called by:
 14055 ;;		_CheckFlashPrecentage
 14056 ;;		_pow
 14057 ;;		_exp
 14058 ;;		_floor
 14059 ;; This function uses a non-reentrant model
 14060 ;;
 14061                           
 14062                           	psect	text92
 14063  0026C0                     __ptext92:
 14064                           	opt stack 0
 14065  0026C0                     ___ftge:
 14066                           	opt stack 26
 14067                           
 14068                           ; BSR set to: 0
 14069                           ;incstack = 0
 14070  0026C0  AE1A               	btfss	___ftge@ff1+2,7,c
 14071  0026C2  D016               	goto	l1732
 14072  0026C4  C018  F01E         	movff	___ftge@ff1,??___ftge
 14073  0026C8  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 14074  0026CC  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 14075  0026D0  1E1E               	comf	??___ftge,f,c
 14076  0026D2  1E1F               	comf	??___ftge+1,f,c
 14077  0026D4  1E20               	comf	??___ftge+2,f,c
 14078  0026D6  2A1E               	incf	??___ftge,f,c
 14079  0026D8  0E00               	movlw	0
 14080  0026DA  221F               	addwfc	??___ftge+1,f,c
 14081  0026DC  2220               	addwfc	??___ftge+2,f,c
 14082  0026DE  0E00               	movlw	0
 14083  0026E0  241E               	addwf	??___ftge,w,c
 14084  0026E2  6E18               	movwf	___ftge@ff1,c
 14085  0026E4  0E00               	movlw	0
 14086  0026E6  201F               	addwfc	??___ftge+1,w,c
 14087  0026E8  6E19               	movwf	___ftge@ff1+1,c
 14088  0026EA  0E80               	movlw	128
 14089  0026EC  2020               	addwfc	??___ftge+2,w,c
 14090  0026EE  6E1A               	movwf	___ftge@ff1+2,c
 14091  0026F0                     l1732:
 14092  0026F0  AE1D               	btfss	___ftge@ff2+2,7,c
 14093  0026F2  D016               	goto	l1733
 14094  0026F4  C01B  F01E         	movff	___ftge@ff2,??___ftge
 14095  0026F8  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 14096  0026FC  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 14097  002700  1E1E               	comf	??___ftge,f,c
 14098  002702  1E1F               	comf	??___ftge+1,f,c
 14099  002704  1E20               	comf	??___ftge+2,f,c
 14100  002706  2A1E               	incf	??___ftge,f,c
 14101  002708  0E00               	movlw	0
 14102  00270A  221F               	addwfc	??___ftge+1,f,c
 14103  00270C  2220               	addwfc	??___ftge+2,f,c
 14104  00270E  0E00               	movlw	0
 14105  002710  241E               	addwf	??___ftge,w,c
 14106  002712  6E1B               	movwf	___ftge@ff2,c
 14107  002714  0E00               	movlw	0
 14108  002716  201F               	addwfc	??___ftge+1,w,c
 14109  002718  6E1C               	movwf	___ftge@ff2+1,c
 14110  00271A  0E80               	movlw	128
 14111  00271C  2020               	addwfc	??___ftge+2,w,c
 14112  00271E  6E1D               	movwf	___ftge@ff2+2,c
 14113  002720                     l1733:
 14114  002720  0E00               	movlw	0
 14115  002722  1A18               	xorwf	___ftge@ff1,f,c
 14116  002724  0E00               	movlw	0
 14117  002726  1A19               	xorwf	___ftge@ff1+1,f,c
 14118  002728  0E80               	movlw	128
 14119  00272A  1A1A               	xorwf	___ftge@ff1+2,f,c
 14120  00272C  0E00               	movlw	0
 14121  00272E  1A1B               	xorwf	___ftge@ff2,f,c
 14122  002730  0E00               	movlw	0
 14123  002732  1A1C               	xorwf	___ftge@ff2+1,f,c
 14124  002734  0E80               	movlw	128
 14125  002736  1A1D               	xorwf	___ftge@ff2+2,f,c
 14126  002738  501B               	movf	___ftge@ff2,w,c
 14127  00273A  5C18               	subwf	___ftge@ff1,w,c
 14128  00273C  501C               	movf	___ftge@ff2+1,w,c
 14129  00273E  5819               	subwfb	___ftge@ff1+1,w,c
 14130  002740  501D               	movf	___ftge@ff2+2,w,c
 14131  002742  581A               	subwfb	___ftge@ff1+2,w,c
 14132  002744  B0D8               	btfsc	status,0,c
 14133  002746  D002               	goto	l4418
 14134  002748  90D8               	bcf	status,0,c
 14135  00274A  0012               	return	
 14136  00274C                     l4418:
 14137  00274C  80D8               	bsf	status,0,c
 14138  00274E  0012               	return	
 14139  002750                     __end_of___ftge:
 14140                           	opt stack 0
 14141                           tosu	equ	0xFFF
 14142                           tosh	equ	0xFFE
 14143                           tosl	equ	0xFFD
 14144                           pclath	equ	0xFFA
 14145                           tblptru	equ	0xFF8
 14146                           tblptrh	equ	0xFF7
 14147                           tblptrl	equ	0xFF6
 14148                           tablat	equ	0xFF5
 14149                           prodh	equ	0xFF4
 14150                           prodl	equ	0xFF3
 14151                           intcon	equ	0xFF2
 14152                           intcon2	equ	0xFF1
 14153                           postinc0	equ	0xFEE
 14154                           wreg	equ	0xFE8
 14155                           indf1	equ	0xFE7
 14156                           postdec1	equ	0xFE5
 14157                           fsr1h	equ	0xFE2
 14158                           fsr1l	equ	0xFE1
 14159                           indf2	equ	0xFDF
 14160                           postinc2	equ	0xFDE
 14161                           postdec2	equ	0xFDD
 14162                           fsr2h	equ	0xFDA
 14163                           fsr2l	equ	0xFD9
 14164                           status	equ	0xFD8
 14165                           
 14166 ;; *************** function ___altoft *****************
 14167 ;; Defined at:
 14168 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 14169 ;; Parameters:    Size  Location     Type
 14170 ;;  c               4   39[BANK0 ] long 
 14171 ;; Auto vars:     Size  Location     Type
 14172 ;;  sign            1   47[COMRAM] unsigned char 
 14173 ;;  exp             1   46[COMRAM] unsigned char 
 14174 ;; Return value:  Size  Location     Type
 14175 ;;                  3   39[BANK0 ] float 
 14176 ;; Registers used:
 14177 ;;		wreg, status,2, status,0, cstack
 14178 ;; Tracked objects:
 14179 ;;		On entry : 0/0
 14180 ;;		On exit  : 0/0
 14181 ;;		Unchanged: 0/0
 14182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14183 ;;      Params:         0       4       0       0       0       0       0
 14184 ;;      Locals:         2       0       0       0       0       0       0
 14185 ;;      Temps:          0       4       0       0       0       0       0
 14186 ;;      Totals:         2       8       0       0       0       0       0
 14187 ;;Total ram usage:       10 bytes
 14188 ;; Hardware stack levels used:    1
 14189 ;; Hardware stack levels required when called:    4
 14190 ;; This function calls:
 14191 ;;		___ftpack
 14192 ;; This function is called by:
 14193 ;;		_floor
 14194 ;; This function uses a non-reentrant model
 14195 ;;
 14196                           
 14197                           	psect	text93
 14198  002854                     __ptext93:
 14199                           	opt stack 0
 14200  002854                     ___altoft:
 14201                           	opt stack 22
 14202                           
 14203                           ;incstack = 0
 14204  002854  0E00               	movlw	0
 14205  002856  6E30               	movwf	___altoft@sign,c
 14206  002858  0E8E               	movlw	142
 14207  00285A  6E2F               	movwf	___altoft@exp,c
 14208  00285C  0100               	movlb	0	; () banked
 14209  00285E  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
 14210  002860  D011               	goto	l1530
 14211                           
 14212                           ; BSR set to: 0
 14213  002862  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
 14214  002864  1F89               	comf	(___altoft@c+2)& (0+255),f,b
 14215  002866  1F88               	comf	(___altoft@c+1)& (0+255),f,b
 14216  002868  6D87               	negf	___altoft@c& (0+255),b
 14217  00286A  0E00               	movlw	0
 14218  00286C  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
 14219  00286E  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
 14220  002870  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
 14221                           
 14222                           ; BSR set to: 0
 14223  002872  0E01               	movlw	1
 14224  002874  6E30               	movwf	___altoft@sign,c
 14225                           
 14226                           ; BSR set to: 0
 14227  002876  D006               	goto	l1530
 14228  002878                     
 14229                           ; BSR set to: 0
 14230                           
 14231                           ; BSR set to: 0
 14232  002878  90D8               	bcf	status,0,c
 14233  00287A  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
 14234  00287C  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
 14235  00287E  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
 14236  002880  3387               	rrcf	___altoft@c& (0+255),f,b
 14237  002882  2A2F               	incf	___altoft@exp,f,c
 14238  002884                     l1530:
 14239                           
 14240                           ; BSR set to: 0
 14241                           
 14242                           ; BSR set to: 0
 14243  002884  0E00               	movlw	0
 14244  002886  1587               	andwf	___altoft@c& (0+255),w,b
 14245  002888  6F8B               	movwf	??___altoft& (0+255),b
 14246  00288A  0E00               	movlw	0
 14247  00288C  1588               	andwf	(___altoft@c+1)& (0+255),w,b
 14248  00288E  6F8C               	movwf	(??___altoft+1)& (0+255),b
 14249  002890  0E00               	movlw	0
 14250  002892  1589               	andwf	(___altoft@c+2)& (0+255),w,b
 14251  002894  6F8D               	movwf	(??___altoft+2)& (0+255),b
 14252  002896  0EFF               	movlw	255
 14253  002898  158A               	andwf	(___altoft@c+3)& (0+255),w,b
 14254  00289A  6F8E               	movwf	(??___altoft+3)& (0+255),b
 14255  00289C  518B               	movf	??___altoft& (0+255),w,b
 14256  00289E  118C               	iorwf	(??___altoft+1)& (0+255),w,b
 14257  0028A0  118D               	iorwf	(??___altoft+2)& (0+255),w,b
 14258  0028A2  118E               	iorwf	(??___altoft+3)& (0+255),w,b
 14259  0028A4  A4D8               	btfss	status,2,c
 14260  0028A6  D7E8               	goto	l1531
 14261                           
 14262                           ; BSR set to: 0
 14263                           
 14264                           ; BSR set to: 0
 14265  0028A8  C087  F018         	movff	___altoft@c,___ftpack@arg
 14266  0028AC  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
 14267  0028B0  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 14268  0028B4  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 14269  0028B8  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 14270  0028BC  ECE3  F011         	call	___ftpack	;wreg free
 14271  0028C0  C018  F087         	movff	?___ftpack,?___altoft
 14272  0028C4  C019  F088         	movff	?___ftpack+1,?___altoft+1
 14273  0028C8  C01A  F089         	movff	?___ftpack+2,?___altoft+2
 14274  0028CC  0012               	return	
 14275  0028CE                     __end_of___altoft:
 14276                           	opt stack 0
 14277                           tosu	equ	0xFFF
 14278                           tosh	equ	0xFFE
 14279                           tosl	equ	0xFFD
 14280                           pclath	equ	0xFFA
 14281                           tblptru	equ	0xFF8
 14282                           tblptrh	equ	0xFF7
 14283                           tblptrl	equ	0xFF6
 14284                           tablat	equ	0xFF5
 14285                           prodh	equ	0xFF4
 14286                           prodl	equ	0xFF3
 14287                           intcon	equ	0xFF2
 14288                           intcon2	equ	0xFF1
 14289                           postinc0	equ	0xFEE
 14290                           wreg	equ	0xFE8
 14291                           indf1	equ	0xFE7
 14292                           postdec1	equ	0xFE5
 14293                           fsr1h	equ	0xFE2
 14294                           fsr1l	equ	0xFE1
 14295                           indf2	equ	0xFDF
 14296                           postinc2	equ	0xFDE
 14297                           postdec2	equ	0xFDD
 14298                           fsr2h	equ	0xFDA
 14299                           fsr2l	equ	0xFD9
 14300                           status	equ	0xFD8
 14301                           
 14302 ;; *************** function _eval_poly *****************
 14303 ;; Defined at:
 14304 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 14305 ;; Parameters:    Size  Location     Type
 14306 ;;  x               3   36[BANK0 ] float 
 14307 ;;  d               2   39[BANK0 ] PTR const 
 14308 ;;		 -> log@coeff(27), exp@coeff(30), 
 14309 ;;  n               2   41[BANK0 ] int 
 14310 ;; Auto vars:     Size  Location     Type
 14311 ;;  res             3   43[BANK0 ] int 
 14312 ;; Return value:  Size  Location     Type
 14313 ;;                  3   36[BANK0 ] int 
 14314 ;; Registers used:
 14315 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14316 ;; Tracked objects:
 14317 ;;		On entry : 0/0
 14318 ;;		On exit  : 0/0
 14319 ;;		Unchanged: 0/0
 14320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14321 ;;      Params:         0       7       0       0       0       0       0
 14322 ;;      Locals:         0       3       0       0       0       0       0
 14323 ;;      Temps:          2       0       0       0       0       0       0
 14324 ;;      Totals:         2      10       0       0       0       0       0
 14325 ;;Total ram usage:       12 bytes
 14326 ;; Hardware stack levels used:    1
 14327 ;; Hardware stack levels required when called:    5
 14328 ;; This function calls:
 14329 ;;		___ftadd
 14330 ;;		___ftmul
 14331 ;;		___wmul
 14332 ;; This function is called by:
 14333 ;;		_exp
 14334 ;;		_log
 14335 ;; This function uses a non-reentrant model
 14336 ;;
 14337                           
 14338                           	psect	text94
 14339  001F4C                     __ptext94:
 14340                           	opt stack 0
 14341  001F4C                     _eval_poly:
 14342                           	opt stack 22
 14343                           
 14344                           ;incstack = 0
 14345  001F4C  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 14346  001F50  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 14347  001F54  0E00               	movlw	0
 14348  001F56  6E1B               	movwf	___wmul@multiplicand+1,c
 14349  001F58  0E03               	movlw	3
 14350  001F5A  6E1A               	movwf	___wmul@multiplicand,c
 14351  001F5C  EC43  F01B         	call	___wmul	;wreg free
 14352  001F60  C087  F02F         	movff	eval_poly@d,??_eval_poly
 14353  001F64  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 14354  001F68  5018               	movf	?___wmul,w,c
 14355  001F6A  262F               	addwf	??_eval_poly,f,c
 14356  001F6C  5019               	movf	?___wmul+1,w,c
 14357  001F6E  2230               	addwfc	??_eval_poly+1,f,c
 14358  001F70  C02F  FFF6         	movff	??_eval_poly,tblptrl
 14359  001F74  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 14360  001F78                     	if	0	;tblptru may be non-zero
 14361  001F78                     	endif
 14362  001F78                     	if	0	;tblptru may be non-zero
 14363  001F78                     	endif
 14364  001F78  0009               	tblrd		*+
 14365  001F7A  CFF5 F08B          	movff	tablat,eval_poly@res
 14366  001F7E  0009               	tblrd		*+
 14367  001F80  CFF5 F08C          	movff	tablat,eval_poly@res+1
 14368  001F84  000A               	tblrd		*-
 14369  001F86  CFF5 F08D          	movff	tablat,eval_poly@res+2
 14370  001F8A  D03F               	goto	l2155
 14371  001F8C  C08B  F06C         	movff	eval_poly@res,___ftmul@f2
 14372  001F90  C08C  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
 14373  001F94  C08D  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
 14374  001F98  C084  F069         	movff	eval_poly@x,___ftmul@f1
 14375  001F9C  C085  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
 14376  001FA0  C086  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
 14377  001FA4  ECD4  F00D         	call	___ftmul	;wreg free
 14378  001FA8  C069  F078         	movff	?___ftmul,___ftadd@f1
 14379  001FAC  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 14380  001FB0  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 14381  001FB4  0E00               	movlw	0
 14382  001FB6  6E1B               	movwf	___wmul@multiplicand+1,c
 14383  001FB8  0E03               	movlw	3
 14384  001FBA  6E1A               	movwf	___wmul@multiplicand,c
 14385  001FBC  0100               	movlb	0	; () banked
 14386  001FBE  0789               	decf	eval_poly@n& (0+255),f,b
 14387  001FC0  A0D8               	btfss	status,0,c
 14388  001FC2  078A               	decf	(eval_poly@n+1)& (0+255),f,b
 14389  001FC4  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 14390  001FC8  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 14391  001FCC  EC43  F01B         	call	___wmul	;wreg free
 14392  001FD0  C087  F02F         	movff	eval_poly@d,??_eval_poly
 14393  001FD4  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 14394  001FD8  5018               	movf	?___wmul,w,c
 14395  001FDA  262F               	addwf	??_eval_poly,f,c
 14396  001FDC  5019               	movf	?___wmul+1,w,c
 14397  001FDE  2230               	addwfc	??_eval_poly+1,f,c
 14398  001FE0  C02F  FFF6         	movff	??_eval_poly,tblptrl
 14399  001FE4  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 14400  001FE8                     	if	0	;tblptru may be non-zero
 14401  001FE8                     	endif
 14402  001FE8                     	if	0	;tblptru may be non-zero
 14403  001FE8                     	endif
 14404  001FE8  0009               	tblrd		*+
 14405  001FEA  CFF5 F07B          	movff	tablat,___ftadd@f2
 14406  001FEE  0009               	tblrd		*+
 14407  001FF0  CFF5 F07C          	movff	tablat,___ftadd@f2+1
 14408  001FF4  000A               	tblrd		*-
 14409  001FF6  CFF5 F07D          	movff	tablat,___ftadd@f2+2
 14410  001FFA  EC2F  F00A         	call	___ftadd	;wreg free
 14411  001FFE  C078  F08B         	movff	?___ftadd,eval_poly@res
 14412  002002  C079  F08C         	movff	?___ftadd+1,eval_poly@res+1
 14413  002006  C07A  F08D         	movff	?___ftadd+2,eval_poly@res+2
 14414  00200A                     l2155:
 14415  00200A  0100               	movlb	0	; () banked
 14416  00200C  5189               	movf	eval_poly@n& (0+255),w,b
 14417  00200E  118A               	iorwf	(eval_poly@n+1)& (0+255),w,b
 14418  002010  A4D8               	btfss	status,2,c
 14419  002012  D7BC               	goto	l2156
 14420                           
 14421                           ; BSR set to: 0
 14422  002014  C08B  F084         	movff	eval_poly@res,?_eval_poly
 14423  002018  C08C  F085         	movff	eval_poly@res+1,?_eval_poly+1
 14424  00201C  C08D  F086         	movff	eval_poly@res+2,?_eval_poly+2
 14425                           
 14426                           ; BSR set to: 0
 14427  002020  0012               	return		;funcret
 14428  002022                     __end_of_eval_poly:
 14429                           	opt stack 0
 14430                           tosu	equ	0xFFF
 14431                           tosh	equ	0xFFE
 14432                           tosl	equ	0xFFD
 14433                           pclath	equ	0xFFA
 14434                           tblptru	equ	0xFF8
 14435                           tblptrh	equ	0xFF7
 14436                           tblptrl	equ	0xFF6
 14437                           tablat	equ	0xFF5
 14438                           prodh	equ	0xFF4
 14439                           prodl	equ	0xFF3
 14440                           intcon	equ	0xFF2
 14441                           intcon2	equ	0xFF1
 14442                           postinc0	equ	0xFEE
 14443                           wreg	equ	0xFE8
 14444                           indf1	equ	0xFE7
 14445                           postdec1	equ	0xFE5
 14446                           fsr1h	equ	0xFE2
 14447                           fsr1l	equ	0xFE1
 14448                           indf2	equ	0xFDF
 14449                           postinc2	equ	0xFDE
 14450                           postdec2	equ	0xFDD
 14451                           fsr2h	equ	0xFDA
 14452                           fsr2l	equ	0xFD9
 14453                           status	equ	0xFD8
 14454                           
 14455 ;; *************** function ___wmul *****************
 14456 ;; Defined at:
 14457 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 14458 ;; Parameters:    Size  Location     Type
 14459 ;;  multiplier      2   23[COMRAM] unsigned int 
 14460 ;;  multiplicand    2   25[COMRAM] unsigned int 
 14461 ;; Auto vars:     Size  Location     Type
 14462 ;;  product         2   27[COMRAM] unsigned int 
 14463 ;; Return value:  Size  Location     Type
 14464 ;;                  2   23[COMRAM] unsigned int 
 14465 ;; Registers used:
 14466 ;;		wreg, status,2, status,0, prodl, prodh
 14467 ;; Tracked objects:
 14468 ;;		On entry : 0/0
 14469 ;;		On exit  : 0/0
 14470 ;;		Unchanged: 0/0
 14471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14472 ;;      Params:         4       0       0       0       0       0       0
 14473 ;;      Locals:         2       0       0       0       0       0       0
 14474 ;;      Temps:          0       0       0       0       0       0       0
 14475 ;;      Totals:         6       0       0       0       0       0       0
 14476 ;;Total ram usage:        6 bytes
 14477 ;; Hardware stack levels used:    1
 14478 ;; Hardware stack levels required when called:    3
 14479 ;; This function calls:
 14480 ;;		Nothing
 14481 ;; This function is called by:
 14482 ;;		_eval_poly
 14483 ;; This function uses a non-reentrant model
 14484 ;;
 14485                           
 14486                           	psect	text95
 14487  003686                     __ptext95:
 14488                           	opt stack 0
 14489  003686                     ___wmul:
 14490                           	opt stack 23
 14491                           
 14492                           ; BSR set to: 0
 14493                           ;incstack = 0
 14494  003686  5018               	movf	___wmul@multiplier,w,c
 14495  003688  021A               	mulwf	___wmul@multiplicand,c
 14496  00368A  CFF3 F01C          	movff	prodl,___wmul@product
 14497  00368E  CFF4 F01D          	movff	prodh,___wmul@product+1
 14498  003692  5018               	movf	___wmul@multiplier,w,c
 14499  003694  021B               	mulwf	___wmul@multiplicand+1,c
 14500  003696  50F3               	movf	prodl,w,c
 14501  003698  261D               	addwf	___wmul@product+1,f,c
 14502  00369A  5019               	movf	___wmul@multiplier+1,w,c
 14503  00369C  021A               	mulwf	___wmul@multiplicand,c
 14504  00369E  50F3               	movf	prodl,w,c
 14505  0036A0  261D               	addwf	___wmul@product+1,f,c
 14506  0036A2  C01C  F018         	movff	___wmul@product,?___wmul
 14507  0036A6  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 14508  0036AA  0012               	return	
 14509  0036AC                     __end_of___wmul:
 14510                           	opt stack 0
 14511                           tosu	equ	0xFFF
 14512                           tosh	equ	0xFFE
 14513                           tosl	equ	0xFFD
 14514                           pclath	equ	0xFFA
 14515                           tblptru	equ	0xFF8
 14516                           tblptrh	equ	0xFF7
 14517                           tblptrl	equ	0xFF6
 14518                           tablat	equ	0xFF5
 14519                           prodh	equ	0xFF4
 14520                           prodl	equ	0xFF3
 14521                           intcon	equ	0xFF2
 14522                           intcon2	equ	0xFF1
 14523                           postinc0	equ	0xFEE
 14524                           wreg	equ	0xFE8
 14525                           indf1	equ	0xFE7
 14526                           postdec1	equ	0xFE5
 14527                           fsr1h	equ	0xFE2
 14528                           fsr1l	equ	0xFE1
 14529                           indf2	equ	0xFDF
 14530                           postinc2	equ	0xFDE
 14531                           postdec2	equ	0xFDD
 14532                           fsr2h	equ	0xFDA
 14533                           fsr2l	equ	0xFD9
 14534                           status	equ	0xFD8
 14535                           
 14536 ;; *************** function ___ftmul *****************
 14537 ;; Defined at:
 14538 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 14539 ;; Parameters:    Size  Location     Type
 14540 ;;  f1              3    9[BANK0 ] float 
 14541 ;;  f2              3   12[BANK0 ] float 
 14542 ;; Auto vars:     Size  Location     Type
 14543 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 14544 ;;  sign            1   23[BANK0 ] unsigned char 
 14545 ;;  cntr            1   22[BANK0 ] unsigned char 
 14546 ;;  exp             1   18[BANK0 ] unsigned char 
 14547 ;; Return value:  Size  Location     Type
 14548 ;;                  3    9[BANK0 ] float 
 14549 ;; Registers used:
 14550 ;;		wreg, status,2, status,0, cstack
 14551 ;; Tracked objects:
 14552 ;;		On entry : 0/0
 14553 ;;		On exit  : 0/0
 14554 ;;		Unchanged: 0/0
 14555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14556 ;;      Params:         0       6       0       0       0       0       0
 14557 ;;      Locals:         0       6       0       0       0       0       0
 14558 ;;      Temps:          0       3       0       0       0       0       0
 14559 ;;      Totals:         0      15       0       0       0       0       0
 14560 ;;Total ram usage:       15 bytes
 14561 ;; Hardware stack levels used:    1
 14562 ;; Hardware stack levels required when called:    4
 14563 ;; This function calls:
 14564 ;;		___ftpack
 14565 ;; This function is called by:
 14566 ;;		_AdcConvert
 14567 ;;		_CheckFlashPrecentage
 14568 ;;		_pow
 14569 ;;		_exp
 14570 ;;		_log
 14571 ;;		_eval_poly
 14572 ;; This function uses a non-reentrant model
 14573 ;;
 14574                           
 14575                           	psect	text96
 14576  001BA8                     __ptext96:
 14577                           	opt stack 0
 14578  001BA8                     ___ftmul:
 14579                           	opt stack 25
 14580                           
 14581                           ;incstack = 0
 14582  001BA8  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
 14583  001BAC  0100               	movlb	0	; () banked
 14584  001BAE  6B70               	clrf	(??___ftmul+1)& (0+255),b
 14585  001BB0  6B71               	clrf	(??___ftmul+2)& (0+255),b
 14586  001BB2  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 14587  001BB4  376F               	rlcf	??___ftmul& (0+255),f,b
 14588  001BB6  E301               	bnc	u6601
 14589  001BB8  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 14590  001BBA                     u6601:
 14591  001BBA  516F               	movf	??___ftmul& (0+255),w,b
 14592  001BBC  6F72               	movwf	___ftmul@exp& (0+255),b
 14593  001BBE  5172               	movf	___ftmul@exp& (0+255),w,b
 14594  001BC0  A4D8               	btfss	status,2,c
 14595  001BC2  D007               	goto	l1739
 14596                           
 14597                           ; BSR set to: 0
 14598  001BC4  0E00               	movlw	0
 14599  001BC6  6F69               	movwf	?___ftmul& (0+255),b
 14600  001BC8  0E00               	movlw	0
 14601  001BCA  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 14602  001BCC  0E00               	movlw	0
 14603  001BCE  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 14604                           
 14605                           ; BSR set to: 0
 14606  001BD0  0012               	return	
 14607  001BD2                     l1739:
 14608                           
 14609                           ; BSR set to: 0
 14610                           
 14611                           ; BSR set to: 0
 14612  001BD2  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
 14613  001BD6  6B70               	clrf	(??___ftmul+1)& (0+255),b
 14614  001BD8  6B71               	clrf	(??___ftmul+2)& (0+255),b
 14615  001BDA  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 14616  001BDC  376F               	rlcf	??___ftmul& (0+255),f,b
 14617  001BDE  E301               	bnc	u6621
 14618  001BE0  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 14619  001BE2                     u6621:
 14620  001BE2  516F               	movf	??___ftmul& (0+255),w,b
 14621  001BE4  6F77               	movwf	___ftmul@sign& (0+255),b
 14622  001BE6  5177               	movf	___ftmul@sign& (0+255),w,b
 14623  001BE8  A4D8               	btfss	status,2,c
 14624  001BEA  D007               	goto	l1741
 14625                           
 14626                           ; BSR set to: 0
 14627  001BEC  0E00               	movlw	0
 14628  001BEE  6F69               	movwf	?___ftmul& (0+255),b
 14629  001BF0  0E00               	movlw	0
 14630  001BF2  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 14631  001BF4  0E00               	movlw	0
 14632  001BF6  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 14633                           
 14634                           ; BSR set to: 0
 14635  001BF8  0012               	return	
 14636  001BFA                     l1741:
 14637                           
 14638                           ; BSR set to: 0
 14639                           
 14640                           ; BSR set to: 0
 14641  001BFA  5177               	movf	___ftmul@sign& (0+255),w,b
 14642  001BFC  0F7B               	addlw	123
 14643  001BFE  2772               	addwf	___ftmul@exp& (0+255),f,b
 14644                           
 14645                           ; BSR set to: 0
 14646  001C00  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
 14647  001C04  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 14648  001C06  1B77               	xorwf	___ftmul@sign& (0+255),f,b
 14649  001C08  0E80               	movlw	128
 14650  001C0A  1777               	andwf	___ftmul@sign& (0+255),f,b
 14651                           
 14652                           ; BSR set to: 0
 14653  001C0C  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 14654                           
 14655                           ; BSR set to: 0
 14656  001C0E  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 14657                           
 14658                           ; BSR set to: 0
 14659  001C10  0EFF               	movlw	255
 14660  001C12  176C               	andwf	___ftmul@f2& (0+255),f,b
 14661  001C14  0EFF               	movlw	255
 14662  001C16  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 14663  001C18  0E00               	movlw	0
 14664  001C1A  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 14665                           
 14666                           ; BSR set to: 0
 14667  001C1C  0E00               	movlw	0
 14668  001C1E  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
 14669  001C20  0E00               	movlw	0
 14670  001C22  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 14671  001C24  0E00               	movlw	0
 14672  001C26  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 14673                           
 14674                           ; BSR set to: 0
 14675  001C28  0E07               	movlw	7
 14676  001C2A  6F76               	movwf	___ftmul@cntr& (0+255),b
 14677  001C2C                     
 14678                           ; BSR set to: 0
 14679                           
 14680                           ; BSR set to: 0
 14681  001C2C  A169               	btfss	___ftmul@f1& (0+255),0,b
 14682  001C2E  D006               	goto	l1743
 14683                           
 14684                           ; BSR set to: 0
 14685  001C30  516C               	movf	___ftmul@f2& (0+255),w,b
 14686  001C32  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 14687  001C34  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 14688  001C36  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 14689  001C38  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 14690  001C3A  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 14691  001C3C                     l1743:
 14692                           
 14693                           ; BSR set to: 0
 14694                           
 14695                           ; BSR set to: 0
 14696  001C3C  90D8               	bcf	status,0,c
 14697  001C3E  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 14698  001C40  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 14699  001C42  3369               	rrcf	___ftmul@f1& (0+255),f,b
 14700  001C44  90D8               	bcf	status,0,c
 14701  001C46  376C               	rlcf	___ftmul@f2& (0+255),f,b
 14702  001C48  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 14703  001C4A  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 14704                           
 14705                           ; BSR set to: 0
 14706  001C4C  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 14707  001C4E  D7EE               	goto	l1742
 14708                           
 14709                           ; BSR set to: 0
 14710                           
 14711                           ; BSR set to: 0
 14712  001C50  0E09               	movlw	9
 14713  001C52  6F76               	movwf	___ftmul@cntr& (0+255),b
 14714  001C54                     
 14715                           ; BSR set to: 0
 14716                           
 14717                           ; BSR set to: 0
 14718  001C54  A169               	btfss	___ftmul@f1& (0+255),0,b
 14719  001C56  D006               	goto	l1746
 14720                           
 14721                           ; BSR set to: 0
 14722  001C58  516C               	movf	___ftmul@f2& (0+255),w,b
 14723  001C5A  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 14724  001C5C  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 14725  001C5E  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 14726  001C60  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 14727  001C62  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 14728  001C64                     l1746:
 14729                           
 14730                           ; BSR set to: 0
 14731                           
 14732                           ; BSR set to: 0
 14733  001C64  90D8               	bcf	status,0,c
 14734  001C66  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 14735  001C68  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 14736  001C6A  3369               	rrcf	___ftmul@f1& (0+255),f,b
 14737  001C6C  90D8               	bcf	status,0,c
 14738  001C6E  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 14739  001C70  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 14740  001C72  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 14741                           
 14742                           ; BSR set to: 0
 14743  001C74  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 14744  001C76  D7EE               	goto	l1745
 14745                           
 14746                           ; BSR set to: 0
 14747                           
 14748                           ; BSR set to: 0
 14749  001C78  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 14750  001C7C  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 14751  001C80  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 14752  001C84  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
 14753  001C88  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
 14754  001C8C  ECE3  F011         	call	___ftpack	;wreg free
 14755  001C90  C018  F069         	movff	?___ftpack,?___ftmul
 14756  001C94  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
 14757  001C98  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
 14758  001C9C  0012               	return	
 14759  001C9E                     __end_of___ftmul:
 14760                           	opt stack 0
 14761                           tosu	equ	0xFFF
 14762                           tosh	equ	0xFFE
 14763                           tosl	equ	0xFFD
 14764                           pclath	equ	0xFFA
 14765                           tblptru	equ	0xFF8
 14766                           tblptrh	equ	0xFF7
 14767                           tblptrl	equ	0xFF6
 14768                           tablat	equ	0xFF5
 14769                           prodh	equ	0xFF4
 14770                           prodl	equ	0xFF3
 14771                           intcon	equ	0xFF2
 14772                           intcon2	equ	0xFF1
 14773                           postinc0	equ	0xFEE
 14774                           wreg	equ	0xFE8
 14775                           indf1	equ	0xFE7
 14776                           postdec1	equ	0xFE5
 14777                           fsr1h	equ	0xFE2
 14778                           fsr1l	equ	0xFE1
 14779                           indf2	equ	0xFDF
 14780                           postinc2	equ	0xFDE
 14781                           postdec2	equ	0xFDD
 14782                           fsr2h	equ	0xFDA
 14783                           fsr2l	equ	0xFD9
 14784                           status	equ	0xFD8
 14785                           
 14786 ;; *************** function ___ftsub *****************
 14787 ;; Defined at:
 14788 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 14789 ;; Parameters:    Size  Location     Type
 14790 ;;  f1              3   36[BANK0 ] float 
 14791 ;;  f2              3   39[BANK0 ] float 
 14792 ;; Auto vars:     Size  Location     Type
 14793 ;;		None
 14794 ;; Return value:  Size  Location     Type
 14795 ;;                  3   36[BANK0 ] float 
 14796 ;; Registers used:
 14797 ;;		wreg, status,2, status,0, cstack
 14798 ;; Tracked objects:
 14799 ;;		On entry : 0/0
 14800 ;;		On exit  : 0/0
 14801 ;;		Unchanged: 0/0
 14802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14803 ;;      Params:         0       6       0       0       0       0       0
 14804 ;;      Locals:         0       0       0       0       0       0       0
 14805 ;;      Temps:          0       0       0       0       0       0       0
 14806 ;;      Totals:         0       6       0       0       0       0       0
 14807 ;;Total ram usage:        6 bytes
 14808 ;; Hardware stack levels used:    1
 14809 ;; Hardware stack levels required when called:    5
 14810 ;; This function calls:
 14811 ;;		___ftadd
 14812 ;; This function is called by:
 14813 ;;		_exp
 14814 ;; This function uses a non-reentrant model
 14815 ;;
 14816                           
 14817                           	psect	text97
 14818  003188                     __ptext97:
 14819                           	opt stack 0
 14820  003188                     ___ftsub:
 14821                           	opt stack 22
 14822                           
 14823                           ;incstack = 0
 14824  003188  0100               	movlb	0	; () banked
 14825  00318A  5187               	movf	___ftsub@f2& (0+255),w,b
 14826  00318C  1188               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 14827  00318E  1189               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 14828  003190  B4D8               	btfsc	status,2,c
 14829  003192  D006               	goto	l1756
 14830                           
 14831                           ; BSR set to: 0
 14832  003194  0E00               	movlw	0
 14833  003196  1B87               	xorwf	___ftsub@f2& (0+255),f,b
 14834  003198  0E00               	movlw	0
 14835  00319A  1B88               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 14836  00319C  0E80               	movlw	128
 14837  00319E  1B89               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 14838  0031A0                     l1756:
 14839                           
 14840                           ; BSR set to: 0
 14841                           
 14842                           ; BSR set to: 0
 14843  0031A0  C084  F078         	movff	___ftsub@f1,___ftadd@f1
 14844  0031A4  C085  F079         	movff	___ftsub@f1+1,___ftadd@f1+1
 14845  0031A8  C086  F07A         	movff	___ftsub@f1+2,___ftadd@f1+2
 14846  0031AC  C087  F07B         	movff	___ftsub@f2,___ftadd@f2
 14847  0031B0  C088  F07C         	movff	___ftsub@f2+1,___ftadd@f2+1
 14848  0031B4  C089  F07D         	movff	___ftsub@f2+2,___ftadd@f2+2
 14849  0031B8  EC2F  F00A         	call	___ftadd	;wreg free
 14850  0031BC  C078  F084         	movff	?___ftadd,?___ftsub
 14851  0031C0  C079  F085         	movff	?___ftadd+1,?___ftsub+1
 14852  0031C4  C07A  F086         	movff	?___ftadd+2,?___ftsub+2
 14853  0031C8  0012               	return	
 14854  0031CA                     __end_of___ftsub:
 14855                           	opt stack 0
 14856                           tosu	equ	0xFFF
 14857                           tosh	equ	0xFFE
 14858                           tosl	equ	0xFFD
 14859                           pclath	equ	0xFFA
 14860                           tblptru	equ	0xFF8
 14861                           tblptrh	equ	0xFF7
 14862                           tblptrl	equ	0xFF6
 14863                           tablat	equ	0xFF5
 14864                           prodh	equ	0xFF4
 14865                           prodl	equ	0xFF3
 14866                           intcon	equ	0xFF2
 14867                           intcon2	equ	0xFF1
 14868                           postinc0	equ	0xFEE
 14869                           wreg	equ	0xFE8
 14870                           indf1	equ	0xFE7
 14871                           postdec1	equ	0xFE5
 14872                           fsr1h	equ	0xFE2
 14873                           fsr1l	equ	0xFE1
 14874                           indf2	equ	0xFDF
 14875                           postinc2	equ	0xFDE
 14876                           postdec2	equ	0xFDD
 14877                           fsr2h	equ	0xFDA
 14878                           fsr2l	equ	0xFD9
 14879                           status	equ	0xFD8
 14880                           
 14881 ;; *************** function ___ftadd *****************
 14882 ;; Defined at:
 14883 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 14884 ;; Parameters:    Size  Location     Type
 14885 ;;  f1              3   24[BANK0 ] float 
 14886 ;;  f2              3   27[BANK0 ] float 
 14887 ;; Auto vars:     Size  Location     Type
 14888 ;;  exp1            1   35[BANK0 ] unsigned char 
 14889 ;;  exp2            1   34[BANK0 ] unsigned char 
 14890 ;;  sign            1   33[BANK0 ] unsigned char 
 14891 ;; Return value:  Size  Location     Type
 14892 ;;                  3   24[BANK0 ] float 
 14893 ;; Registers used:
 14894 ;;		wreg, status,2, status,0, cstack
 14895 ;; Tracked objects:
 14896 ;;		On entry : 0/0
 14897 ;;		On exit  : 0/0
 14898 ;;		Unchanged: 0/0
 14899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14900 ;;      Params:         0       6       0       0       0       0       0
 14901 ;;      Locals:         0       3       0       0       0       0       0
 14902 ;;      Temps:          0       3       0       0       0       0       0
 14903 ;;      Totals:         0      12       0       0       0       0       0
 14904 ;;Total ram usage:       12 bytes
 14905 ;; Hardware stack levels used:    1
 14906 ;; Hardware stack levels required when called:    4
 14907 ;; This function calls:
 14908 ;;		___ftpack
 14909 ;; This function is called by:
 14910 ;;		___ftsub
 14911 ;;		_floor
 14912 ;;		_log
 14913 ;;		_eval_poly
 14914 ;; This function uses a non-reentrant model
 14915 ;;
 14916                           
 14917                           	psect	text98
 14918  00145E                     __ptext98:
 14919                           	opt stack 0
 14920  00145E                     ___ftadd:
 14921                           	opt stack 22
 14922                           
 14923                           ;incstack = 0
 14924  00145E  C07A  F07E         	movff	___ftadd@f1+2,??___ftadd
 14925  001462  0100               	movlb	0	; () banked
 14926  001464  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 14927  001466  6B80               	clrf	(??___ftadd+2)& (0+255),b
 14928  001468  3579               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 14929  00146A  377E               	rlcf	??___ftadd& (0+255),f,b
 14930  00146C  E301               	bnc	u6391
 14931  00146E  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 14932  001470                     u6391:
 14933  001470  517E               	movf	??___ftadd& (0+255),w,b
 14934  001472  6F83               	movwf	___ftadd@exp1& (0+255),b
 14935  001474  C07D  F07E         	movff	___ftadd@f2+2,??___ftadd
 14936  001478  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 14937  00147A  6B80               	clrf	(??___ftadd+2)& (0+255),b
 14938  00147C  357C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 14939  00147E  377E               	rlcf	??___ftadd& (0+255),f,b
 14940  001480  E301               	bnc	u6401
 14941  001482  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 14942  001484                     u6401:
 14943  001484  517E               	movf	??___ftadd& (0+255),w,b
 14944  001486  6F82               	movwf	___ftadd@exp2& (0+255),b
 14945                           
 14946                           ; BSR set to: 0
 14947  001488  5183               	movf	___ftadd@exp1& (0+255),w,b
 14948  00148A  B4D8               	btfsc	status,2,c
 14949  00148C  D00B               	goto	u6430
 14950                           
 14951                           ; BSR set to: 0
 14952  00148E  5182               	movf	___ftadd@exp2& (0+255),w,b
 14953  001490  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 14954  001492  B0D8               	btfsc	status,0,c
 14955  001494  D00E               	goto	l1691
 14956                           
 14957                           ; BSR set to: 0
 14958  001496  5183               	movf	___ftadd@exp1& (0+255),w,b
 14959  001498  0800               	sublw	0
 14960  00149A  2582               	addwf	___ftadd@exp2& (0+255),w,b
 14961  00149C  6F7E               	movwf	??___ftadd& (0+255),b
 14962  00149E  0E18               	movlw	24
 14963  0014A0  657E               	cpfsgt	??___ftadd& (0+255),b
 14964  0014A2  D007               	goto	l1691
 14965  0014A4                     u6430:
 14966                           
 14967                           ; BSR set to: 0
 14968  0014A4  C07B  F078         	movff	___ftadd@f2,?___ftadd
 14969  0014A8  C07C  F079         	movff	___ftadd@f2+1,?___ftadd+1
 14970  0014AC  C07D  F07A         	movff	___ftadd@f2+2,?___ftadd+2
 14971  0014B0  0012               	return	
 14972  0014B2                     l1691:
 14973                           
 14974                           ; BSR set to: 0
 14975                           
 14976                           ; BSR set to: 0
 14977  0014B2  5182               	movf	___ftadd@exp2& (0+255),w,b
 14978  0014B4  B4D8               	btfsc	status,2,c
 14979  0014B6  D00B               	goto	u6460
 14980                           
 14981                           ; BSR set to: 0
 14982  0014B8  5183               	movf	___ftadd@exp1& (0+255),w,b
 14983  0014BA  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 14984  0014BC  B0D8               	btfsc	status,0,c
 14985  0014BE  D00E               	goto	l1695
 14986                           
 14987                           ; BSR set to: 0
 14988  0014C0  5182               	movf	___ftadd@exp2& (0+255),w,b
 14989  0014C2  0800               	sublw	0
 14990  0014C4  2583               	addwf	___ftadd@exp1& (0+255),w,b
 14991  0014C6  6F7E               	movwf	??___ftadd& (0+255),b
 14992  0014C8  0E18               	movlw	24
 14993  0014CA  657E               	cpfsgt	??___ftadd& (0+255),b
 14994  0014CC  D007               	goto	l1695
 14995  0014CE                     u6460:
 14996                           
 14997                           ; BSR set to: 0
 14998  0014CE  C078  F078         	movff	___ftadd@f1,?___ftadd
 14999  0014D2  C079  F079         	movff	___ftadd@f1+1,?___ftadd+1
 15000  0014D6  C07A  F07A         	movff	___ftadd@f1+2,?___ftadd+2
 15001  0014DA  0012               	return	
 15002  0014DC                     l1695:
 15003                           
 15004                           ; BSR set to: 0
 15005                           
 15006                           ; BSR set to: 0
 15007  0014DC  0E06               	movlw	6
 15008  0014DE  6F81               	movwf	___ftadd@sign& (0+255),b
 15009                           
 15010                           ; BSR set to: 0
 15011  0014E0  BF7A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 15012                           
 15013                           ; BSR set to: 0
 15014  0014E2  8F81               	bsf	___ftadd@sign& (0+255),7,b
 15015                           
 15016                           ; BSR set to: 0
 15017                           
 15018                           ; BSR set to: 0
 15019  0014E4  BF7D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 15020                           
 15021                           ; BSR set to: 0
 15022  0014E6  8D81               	bsf	___ftadd@sign& (0+255),6,b
 15023                           
 15024                           ; BSR set to: 0
 15025  0014E8  8F79               	bsf	(___ftadd@f1+1)& (0+255),7,b
 15026                           
 15027                           ; BSR set to: 0
 15028  0014EA  0EFF               	movlw	255
 15029  0014EC  1778               	andwf	___ftadd@f1& (0+255),f,b
 15030  0014EE  0EFF               	movlw	255
 15031  0014F0  1779               	andwf	(___ftadd@f1+1)& (0+255),f,b
 15032  0014F2  0E00               	movlw	0
 15033  0014F4  177A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 15034  0014F6  8F7C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 15035                           
 15036                           ; BSR set to: 0
 15037  0014F8  0EFF               	movlw	255
 15038  0014FA  177B               	andwf	___ftadd@f2& (0+255),f,b
 15039  0014FC  0EFF               	movlw	255
 15040  0014FE  177C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 15041  001500  0E00               	movlw	0
 15042  001502  177D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 15043                           
 15044                           ; BSR set to: 0
 15045  001504  5182               	movf	___ftadd@exp2& (0+255),w,b
 15046  001506  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 15047  001508  B0D8               	btfsc	status,0,c
 15048  00150A  D01B               	goto	l1700
 15049  00150C                     u6490:
 15050                           
 15051                           ; BSR set to: 0
 15052                           
 15053                           ; BSR set to: 0
 15054  00150C  90D8               	bcf	status,0,c
 15055  00150E  377B               	rlcf	___ftadd@f2& (0+255),f,b
 15056  001510  377C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 15057  001512  377D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 15058  001514  0782               	decf	___ftadd@exp2& (0+255),f,b
 15059                           
 15060                           ; BSR set to: 0
 15061  001516  5183               	movf	___ftadd@exp1& (0+255),w,b
 15062  001518  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 15063  00151A  B4D8               	btfsc	status,2,c
 15064  00151C  D00D               	goto	l1705
 15065                           
 15066                           ; BSR set to: 0
 15067  00151E  0781               	decf	___ftadd@sign& (0+255),f,b
 15068  001520  C081  F07E         	movff	___ftadd@sign,??___ftadd
 15069  001524  0E07               	movlw	7
 15070  001526  177E               	andwf	??___ftadd& (0+255),f,b
 15071  001528  B4D8               	btfsc	status,2,c
 15072  00152A  D006               	goto	l1705
 15073  00152C  D7EF               	goto	u6490
 15074  00152E                     
 15075                           ; BSR set to: 0
 15076                           
 15077                           ; BSR set to: 0
 15078  00152E  90D8               	bcf	status,0,c
 15079  001530  337A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 15080  001532  3379               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 15081  001534  3378               	rrcf	___ftadd@f1& (0+255),f,b
 15082  001536  2B83               	incf	___ftadd@exp1& (0+255),f,b
 15083  001538                     l1705:
 15084                           
 15085                           ; BSR set to: 0
 15086                           
 15087                           ; BSR set to: 0
 15088  001538  5182               	movf	___ftadd@exp2& (0+255),w,b
 15089  00153A  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 15090  00153C  B4D8               	btfsc	status,2,c
 15091  00153E  D01F               	goto	u6560
 15092  001540  D7F6               	goto	l1706
 15093  001542                     l1700:
 15094                           
 15095                           ; BSR set to: 0
 15096                           
 15097                           ; BSR set to: 0
 15098  001542  5183               	movf	___ftadd@exp1& (0+255),w,b
 15099  001544  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 15100  001546  B0D8               	btfsc	status,0,c
 15101  001548  D01A               	goto	u6560
 15102  00154A                     u6530:
 15103                           
 15104                           ; BSR set to: 0
 15105                           
 15106                           ; BSR set to: 0
 15107  00154A  90D8               	bcf	status,0,c
 15108  00154C  3778               	rlcf	___ftadd@f1& (0+255),f,b
 15109  00154E  3779               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 15110  001550  377A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 15111  001552  0783               	decf	___ftadd@exp1& (0+255),f,b
 15112                           
 15113                           ; BSR set to: 0
 15114  001554  5183               	movf	___ftadd@exp1& (0+255),w,b
 15115  001556  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 15116  001558  B4D8               	btfsc	status,2,c
 15117  00155A  D00D               	goto	l1714
 15118                           
 15119                           ; BSR set to: 0
 15120  00155C  0781               	decf	___ftadd@sign& (0+255),f,b
 15121  00155E  C081  F07E         	movff	___ftadd@sign,??___ftadd
 15122  001562  0E07               	movlw	7
 15123  001564  177E               	andwf	??___ftadd& (0+255),f,b
 15124  001566  B4D8               	btfsc	status,2,c
 15125  001568  D006               	goto	l1714
 15126  00156A  D7EF               	goto	u6530
 15127  00156C                     
 15128                           ; BSR set to: 0
 15129                           
 15130                           ; BSR set to: 0
 15131  00156C  90D8               	bcf	status,0,c
 15132  00156E  337D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 15133  001570  337C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 15134  001572  337B               	rrcf	___ftadd@f2& (0+255),f,b
 15135  001574  2B82               	incf	___ftadd@exp2& (0+255),f,b
 15136  001576                     l1714:
 15137                           
 15138                           ; BSR set to: 0
 15139                           
 15140                           ; BSR set to: 0
 15141  001576  5182               	movf	___ftadd@exp2& (0+255),w,b
 15142  001578  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 15143  00157A  A4D8               	btfss	status,2,c
 15144  00157C  D7F7               	goto	l1715
 15145  00157E                     u6560:
 15146                           
 15147                           ; BSR set to: 0
 15148                           
 15149                           ; BSR set to: 0
 15150                           
 15151                           ; BSR set to: 0
 15152  00157E  AF81               	btfss	___ftadd@sign& (0+255),7,b
 15153  001580  D00C               	goto	l1717
 15154                           
 15155                           ; BSR set to: 0
 15156  001582  0EFF               	movlw	255
 15157  001584  1B78               	xorwf	___ftadd@f1& (0+255),f,b
 15158  001586  0EFF               	movlw	255
 15159  001588  1B79               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 15160  00158A  0EFF               	movlw	255
 15161  00158C  1B7A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 15162  00158E  0E01               	movlw	1
 15163  001590  2778               	addwf	___ftadd@f1& (0+255),f,b
 15164  001592  0E00               	movlw	0
 15165  001594  2379               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 15166  001596  0E00               	movlw	0
 15167  001598  237A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 15168  00159A                     l1717:
 15169                           
 15170                           ; BSR set to: 0
 15171  00159A  AD81               	btfss	___ftadd@sign& (0+255),6,b
 15172  00159C  D00C               	goto	l1718
 15173                           
 15174                           ; BSR set to: 0
 15175  00159E  0EFF               	movlw	255
 15176  0015A0  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 15177  0015A2  0EFF               	movlw	255
 15178  0015A4  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 15179  0015A6  0EFF               	movlw	255
 15180  0015A8  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 15181  0015AA  0E01               	movlw	1
 15182  0015AC  277B               	addwf	___ftadd@f2& (0+255),f,b
 15183  0015AE  0E00               	movlw	0
 15184  0015B0  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 15185  0015B2  0E00               	movlw	0
 15186  0015B4  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 15187  0015B6                     l1718:
 15188                           
 15189                           ; BSR set to: 0
 15190                           
 15191                           ; BSR set to: 0
 15192  0015B6  0E00               	movlw	0
 15193  0015B8  6F81               	movwf	___ftadd@sign& (0+255),b
 15194                           
 15195                           ; BSR set to: 0
 15196  0015BA  5178               	movf	___ftadd@f1& (0+255),w,b
 15197  0015BC  277B               	addwf	___ftadd@f2& (0+255),f,b
 15198  0015BE  5179               	movf	(___ftadd@f1+1)& (0+255),w,b
 15199  0015C0  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 15200  0015C2  517A               	movf	(___ftadd@f1+2)& (0+255),w,b
 15201  0015C4  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 15202                           
 15203                           ; BSR set to: 0
 15204  0015C6  AF7D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 15205  0015C8  D00E               	goto	l1719
 15206                           
 15207                           ; BSR set to: 0
 15208  0015CA  0EFF               	movlw	255
 15209  0015CC  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 15210  0015CE  0EFF               	movlw	255
 15211  0015D0  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 15212  0015D2  0EFF               	movlw	255
 15213  0015D4  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 15214  0015D6  0E01               	movlw	1
 15215  0015D8  277B               	addwf	___ftadd@f2& (0+255),f,b
 15216  0015DA  0E00               	movlw	0
 15217  0015DC  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 15218  0015DE  0E00               	movlw	0
 15219  0015E0  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 15220                           
 15221                           ; BSR set to: 0
 15222  0015E2  0E01               	movlw	1
 15223  0015E4  6F81               	movwf	___ftadd@sign& (0+255),b
 15224  0015E6                     l1719:
 15225                           
 15226                           ; BSR set to: 0
 15227                           
 15228                           ; BSR set to: 0
 15229  0015E6  C07B  F018         	movff	___ftadd@f2,___ftpack@arg
 15230  0015EA  C07C  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 15231  0015EE  C07D  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 15232  0015F2  C083  F01B         	movff	___ftadd@exp1,___ftpack@exp
 15233  0015F6  C081  F01C         	movff	___ftadd@sign,___ftpack@sign
 15234  0015FA  ECE3  F011         	call	___ftpack	;wreg free
 15235  0015FE  C018  F078         	movff	?___ftpack,?___ftadd
 15236  001602  C019  F079         	movff	?___ftpack+1,?___ftadd+1
 15237  001606  C01A  F07A         	movff	?___ftpack+2,?___ftadd+2
 15238  00160A  0012               	return	
 15239  00160C                     __end_of___ftadd:
 15240                           	opt stack 0
 15241                           tosu	equ	0xFFF
 15242                           tosh	equ	0xFFE
 15243                           tosl	equ	0xFFD
 15244                           pclath	equ	0xFFA
 15245                           tblptru	equ	0xFF8
 15246                           tblptrh	equ	0xFF7
 15247                           tblptrl	equ	0xFF6
 15248                           tablat	equ	0xFF5
 15249                           prodh	equ	0xFF4
 15250                           prodl	equ	0xFF3
 15251                           intcon	equ	0xFF2
 15252                           intcon2	equ	0xFF1
 15253                           postinc0	equ	0xFEE
 15254                           wreg	equ	0xFE8
 15255                           indf1	equ	0xFE7
 15256                           postdec1	equ	0xFE5
 15257                           fsr1h	equ	0xFE2
 15258                           fsr1l	equ	0xFE1
 15259                           indf2	equ	0xFDF
 15260                           postinc2	equ	0xFDE
 15261                           postdec2	equ	0xFDD
 15262                           fsr2h	equ	0xFDA
 15263                           fsr2l	equ	0xFD9
 15264                           status	equ	0xFD8
 15265                           
 15266 ;; *************** function ___ftneg *****************
 15267 ;; Defined at:
 15268 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 15269 ;; Parameters:    Size  Location     Type
 15270 ;;  f1              3   23[COMRAM] float 
 15271 ;; Auto vars:     Size  Location     Type
 15272 ;;		None
 15273 ;; Return value:  Size  Location     Type
 15274 ;;                  3   23[COMRAM] float 
 15275 ;; Registers used:
 15276 ;;		wreg, status,2, status,0
 15277 ;; Tracked objects:
 15278 ;;		On entry : 0/0
 15279 ;;		On exit  : 0/0
 15280 ;;		Unchanged: 0/0
 15281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15282 ;;      Params:         3       0       0       0       0       0       0
 15283 ;;      Locals:         0       0       0       0       0       0       0
 15284 ;;      Temps:          0       0       0       0       0       0       0
 15285 ;;      Totals:         3       0       0       0       0       0       0
 15286 ;;Total ram usage:        3 bytes
 15287 ;; Hardware stack levels used:    1
 15288 ;; Hardware stack levels required when called:    3
 15289 ;; This function calls:
 15290 ;;		Nothing
 15291 ;; This function is called by:
 15292 ;;		_pow
 15293 ;;		_exp
 15294 ;; This function uses a non-reentrant model
 15295 ;;
 15296                           
 15297                           	psect	text99
 15298  0036AC                     __ptext99:
 15299                           	opt stack 0
 15300  0036AC                     ___ftneg:
 15301                           	opt stack 24
 15302                           
 15303                           ;incstack = 0
 15304  0036AC  5018               	movf	___ftneg@f1,w,c
 15305  0036AE  1019               	iorwf	___ftneg@f1+1,w,c
 15306  0036B0  101A               	iorwf	___ftneg@f1+2,w,c
 15307  0036B2  B4D8               	btfsc	status,2,c
 15308  0036B4  D006               	goto	l1750
 15309  0036B6  0E00               	movlw	0
 15310  0036B8  1A18               	xorwf	___ftneg@f1,f,c
 15311  0036BA  0E00               	movlw	0
 15312  0036BC  1A19               	xorwf	___ftneg@f1+1,f,c
 15313  0036BE  0E80               	movlw	128
 15314  0036C0  1A1A               	xorwf	___ftneg@f1+2,f,c
 15315  0036C2                     l1750:
 15316  0036C2  C018  F018         	movff	___ftneg@f1,?___ftneg
 15317  0036C6  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 15318  0036CA  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 15319  0036CE  0012               	return		;funcret
 15320  0036D0                     __end_of___ftneg:
 15321                           	opt stack 0
 15322                           tosu	equ	0xFFF
 15323                           tosh	equ	0xFFE
 15324                           tosl	equ	0xFFD
 15325                           pclath	equ	0xFFA
 15326                           tblptru	equ	0xFF8
 15327                           tblptrh	equ	0xFF7
 15328                           tblptrl	equ	0xFF6
 15329                           tablat	equ	0xFF5
 15330                           prodh	equ	0xFF4
 15331                           prodl	equ	0xFF3
 15332                           intcon	equ	0xFF2
 15333                           intcon2	equ	0xFF1
 15334                           postinc0	equ	0xFEE
 15335                           wreg	equ	0xFE8
 15336                           indf1	equ	0xFE7
 15337                           postdec1	equ	0xFE5
 15338                           fsr1h	equ	0xFE2
 15339                           fsr1l	equ	0xFE1
 15340                           indf2	equ	0xFDF
 15341                           postinc2	equ	0xFDE
 15342                           postdec2	equ	0xFDD
 15343                           fsr2h	equ	0xFDA
 15344                           fsr2l	equ	0xFD9
 15345                           status	equ	0xFD8
 15346                           
 15347 ;; *************** function ___ftdiv *****************
 15348 ;; Defined at:
 15349 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 15350 ;; Parameters:    Size  Location     Type
 15351 ;;  f1              3   40[COMRAM] float 
 15352 ;;  f2              3   43[COMRAM] float 
 15353 ;; Auto vars:     Size  Location     Type
 15354 ;;  f3              3    4[BANK0 ] float 
 15355 ;;  sign            1    8[BANK0 ] unsigned char 
 15356 ;;  exp             1    7[BANK0 ] unsigned char 
 15357 ;;  cntr            1    3[BANK0 ] unsigned char 
 15358 ;; Return value:  Size  Location     Type
 15359 ;;                  3   40[COMRAM] float 
 15360 ;; Registers used:
 15361 ;;		wreg, status,2, status,0, cstack
 15362 ;; Tracked objects:
 15363 ;;		On entry : 0/0
 15364 ;;		On exit  : 0/0
 15365 ;;		Unchanged: 0/0
 15366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15367 ;;      Params:         6       0       0       0       0       0       0
 15368 ;;      Locals:         0       6       0       0       0       0       0
 15369 ;;      Temps:          0       3       0       0       0       0       0
 15370 ;;      Totals:         6       9       0       0       0       0       0
 15371 ;;Total ram usage:       15 bytes
 15372 ;; Hardware stack levels used:    1
 15373 ;; Hardware stack levels required when called:    4
 15374 ;; This function calls:
 15375 ;;		___ftpack
 15376 ;; This function is called by:
 15377 ;;		_AdcConvert
 15378 ;;		_CheckFlashPrecentage
 15379 ;;		_exp
 15380 ;; This function uses a non-reentrant model
 15381 ;;
 15382                           
 15383                           	psect	text100
 15384  001C9E                     __ptext100:
 15385                           	opt stack 0
 15386  001C9E                     ___ftdiv:
 15387                           	opt stack 25
 15388                           
 15389                           ;incstack = 0
 15390  001C9E  C02B  F060         	movff	___ftdiv@f1+2,??___ftdiv
 15391  001CA2  0100               	movlb	0	; () banked
 15392  001CA4  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 15393  001CA6  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 15394  001CA8  342A               	rlcf	___ftdiv@f1+1,w,c
 15395  001CAA  3760               	rlcf	??___ftdiv& (0+255),f,b
 15396  001CAC  E301               	bnc	u6781
 15397  001CAE  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 15398  001CB0                     u6781:
 15399  001CB0  5160               	movf	??___ftdiv& (0+255),w,b
 15400  001CB2  6F67               	movwf	___ftdiv@exp& (0+255),b
 15401  001CB4  5167               	movf	___ftdiv@exp& (0+255),w,b
 15402  001CB6  A4D8               	btfss	status,2,c
 15403  001CB8  D007               	goto	l1724
 15404                           
 15405                           ; BSR set to: 0
 15406  001CBA  0E00               	movlw	0
 15407  001CBC  6E29               	movwf	?___ftdiv,c
 15408  001CBE  0E00               	movlw	0
 15409  001CC0  6E2A               	movwf	?___ftdiv+1,c
 15410  001CC2  0E00               	movlw	0
 15411  001CC4  6E2B               	movwf	?___ftdiv+2,c
 15412                           
 15413                           ; BSR set to: 0
 15414  001CC6  0012               	return	
 15415  001CC8                     l1724:
 15416                           
 15417                           ; BSR set to: 0
 15418                           
 15419                           ; BSR set to: 0
 15420  001CC8  C02E  F060         	movff	___ftdiv@f2+2,??___ftdiv
 15421  001CCC  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 15422  001CCE  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 15423  001CD0  342D               	rlcf	___ftdiv@f2+1,w,c
 15424  001CD2  3760               	rlcf	??___ftdiv& (0+255),f,b
 15425  001CD4  E301               	bnc	u6801
 15426  001CD6  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 15427  001CD8                     u6801:
 15428  001CD8  5160               	movf	??___ftdiv& (0+255),w,b
 15429  001CDA  6F68               	movwf	___ftdiv@sign& (0+255),b
 15430  001CDC  5168               	movf	___ftdiv@sign& (0+255),w,b
 15431  001CDE  A4D8               	btfss	status,2,c
 15432  001CE0  D007               	goto	l1726
 15433                           
 15434                           ; BSR set to: 0
 15435  001CE2  0E00               	movlw	0
 15436  001CE4  6E29               	movwf	?___ftdiv,c
 15437  001CE6  0E00               	movlw	0
 15438  001CE8  6E2A               	movwf	?___ftdiv+1,c
 15439  001CEA  0E00               	movlw	0
 15440  001CEC  6E2B               	movwf	?___ftdiv+2,c
 15441                           
 15442                           ; BSR set to: 0
 15443  001CEE  0012               	return	
 15444  001CF0                     l1726:
 15445                           
 15446                           ; BSR set to: 0
 15447                           
 15448                           ; BSR set to: 0
 15449  001CF0  0E00               	movlw	0
 15450  001CF2  6F64               	movwf	___ftdiv@f3& (0+255),b
 15451  001CF4  0E00               	movlw	0
 15452  001CF6  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 15453  001CF8  0E00               	movlw	0
 15454  001CFA  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 15455                           
 15456                           ; BSR set to: 0
 15457  001CFC  5168               	movf	___ftdiv@sign& (0+255),w,b
 15458  001CFE  0F89               	addlw	137
 15459  001D00  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 15460                           
 15461                           ; BSR set to: 0
 15462  001D02  C02B  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 15463                           
 15464                           ; BSR set to: 0
 15465  001D06  502E               	movf	___ftdiv@f2+2,w,c
 15466  001D08  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 15467                           
 15468                           ; BSR set to: 0
 15469  001D0A  0E80               	movlw	128
 15470  001D0C  1768               	andwf	___ftdiv@sign& (0+255),f,b
 15471                           
 15472                           ; BSR set to: 0
 15473  001D0E  8E2A               	bsf	___ftdiv@f1+1,7,c
 15474                           
 15475                           ; BSR set to: 0
 15476  001D10  0EFF               	movlw	255
 15477  001D12  1629               	andwf	___ftdiv@f1,f,c
 15478  001D14  0EFF               	movlw	255
 15479  001D16  162A               	andwf	___ftdiv@f1+1,f,c
 15480  001D18  0E00               	movlw	0
 15481  001D1A  162B               	andwf	___ftdiv@f1+2,f,c
 15482                           
 15483                           ; BSR set to: 0
 15484  001D1C  8E2D               	bsf	___ftdiv@f2+1,7,c
 15485                           
 15486                           ; BSR set to: 0
 15487  001D1E  0EFF               	movlw	255
 15488  001D20  162C               	andwf	___ftdiv@f2,f,c
 15489  001D22  0EFF               	movlw	255
 15490  001D24  162D               	andwf	___ftdiv@f2+1,f,c
 15491  001D26  0E00               	movlw	0
 15492  001D28  162E               	andwf	___ftdiv@f2+2,f,c
 15493                           
 15494                           ; BSR set to: 0
 15495  001D2A  0E18               	movlw	24
 15496  001D2C  6F63               	movwf	___ftdiv@cntr& (0+255),b
 15497  001D2E                     
 15498                           ; BSR set to: 0
 15499                           
 15500                           ; BSR set to: 0
 15501  001D2E  90D8               	bcf	status,0,c
 15502  001D30  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 15503  001D32  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 15504  001D34  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 15505                           
 15506                           ; BSR set to: 0
 15507  001D36  502C               	movf	___ftdiv@f2,w,c
 15508  001D38  5C29               	subwf	___ftdiv@f1,w,c
 15509  001D3A  502D               	movf	___ftdiv@f2+1,w,c
 15510  001D3C  582A               	subwfb	___ftdiv@f1+1,w,c
 15511  001D3E  502E               	movf	___ftdiv@f2+2,w,c
 15512  001D40  582B               	subwfb	___ftdiv@f1+2,w,c
 15513  001D42  A0D8               	btfss	status,0,c
 15514  001D44  D007               	goto	l1728
 15515                           
 15516                           ; BSR set to: 0
 15517  001D46  502C               	movf	___ftdiv@f2,w,c
 15518  001D48  5E29               	subwf	___ftdiv@f1,f,c
 15519  001D4A  502D               	movf	___ftdiv@f2+1,w,c
 15520  001D4C  5A2A               	subwfb	___ftdiv@f1+1,f,c
 15521  001D4E  502E               	movf	___ftdiv@f2+2,w,c
 15522  001D50  5A2B               	subwfb	___ftdiv@f1+2,f,c
 15523                           
 15524                           ; BSR set to: 0
 15525  001D52  8164               	bsf	___ftdiv@f3& (0+255),0,b
 15526  001D54                     l1728:
 15527                           
 15528                           ; BSR set to: 0
 15529  001D54  90D8               	bcf	status,0,c
 15530  001D56  3629               	rlcf	___ftdiv@f1,f,c
 15531  001D58  362A               	rlcf	___ftdiv@f1+1,f,c
 15532  001D5A  362B               	rlcf	___ftdiv@f1+2,f,c
 15533                           
 15534                           ; BSR set to: 0
 15535  001D5C  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 15536  001D5E  D7E7               	goto	l1727
 15537                           
 15538                           ; BSR set to: 0
 15539                           
 15540                           ; BSR set to: 0
 15541  001D60  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 15542  001D64  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 15543  001D68  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 15544  001D6C  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 15545  001D70  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 15546  001D74  ECE3  F011         	call	___ftpack	;wreg free
 15547  001D78  C018  F029         	movff	?___ftpack,?___ftdiv
 15548  001D7C  C019  F02A         	movff	?___ftpack+1,?___ftdiv+1
 15549  001D80  C01A  F02B         	movff	?___ftpack+2,?___ftdiv+2
 15550  001D84  0012               	return	
 15551  001D86                     __end_of___ftdiv:
 15552                           	opt stack 0
 15553                           tosu	equ	0xFFF
 15554                           tosh	equ	0xFFE
 15555                           tosl	equ	0xFFD
 15556                           pclath	equ	0xFFA
 15557                           tblptru	equ	0xFF8
 15558                           tblptrh	equ	0xFF7
 15559                           tblptrl	equ	0xFF6
 15560                           tablat	equ	0xFF5
 15561                           prodh	equ	0xFF4
 15562                           prodl	equ	0xFF3
 15563                           intcon	equ	0xFF2
 15564                           intcon2	equ	0xFF1
 15565                           postinc0	equ	0xFEE
 15566                           wreg	equ	0xFE8
 15567                           indf1	equ	0xFE7
 15568                           postdec1	equ	0xFE5
 15569                           fsr1h	equ	0xFE2
 15570                           fsr1l	equ	0xFE1
 15571                           indf2	equ	0xFDF
 15572                           postinc2	equ	0xFDE
 15573                           postdec2	equ	0xFDD
 15574                           fsr2h	equ	0xFDA
 15575                           fsr2l	equ	0xFD9
 15576                           status	equ	0xFD8
 15577                           
 15578 ;; *************** function ___awtoft *****************
 15579 ;; Defined at:
 15580 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 15581 ;; Parameters:    Size  Location     Type
 15582 ;;  c               2   31[COMRAM] int 
 15583 ;; Auto vars:     Size  Location     Type
 15584 ;;  sign            1   34[COMRAM] unsigned char 
 15585 ;; Return value:  Size  Location     Type
 15586 ;;                  3   31[COMRAM] float 
 15587 ;; Registers used:
 15588 ;;		wreg, status,2, status,0, cstack
 15589 ;; Tracked objects:
 15590 ;;		On entry : 0/0
 15591 ;;		On exit  : 0/0
 15592 ;;		Unchanged: 0/0
 15593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15594 ;;      Params:         3       0       0       0       0       0       0
 15595 ;;      Locals:         1       0       0       0       0       0       0
 15596 ;;      Temps:          0       0       0       0       0       0       0
 15597 ;;      Totals:         4       0       0       0       0       0       0
 15598 ;;Total ram usage:        4 bytes
 15599 ;; Hardware stack levels used:    1
 15600 ;; Hardware stack levels required when called:    4
 15601 ;; This function calls:
 15602 ;;		___ftpack
 15603 ;; This function is called by:
 15604 ;;		_exp
 15605 ;;		_log
 15606 ;; This function uses a non-reentrant model
 15607 ;;
 15608                           
 15609                           	psect	text101
 15610  0032FC                     __ptext101:
 15611                           	opt stack 0
 15612  0032FC                     ___awtoft:
 15613                           	opt stack 23
 15614                           
 15615                           ;incstack = 0
 15616  0032FC  0E00               	movlw	0
 15617  0032FE  6E23               	movwf	___awtoft@sign,c
 15618  003300  AE21               	btfss	___awtoft@c+1,7,c
 15619  003302  D006               	goto	l1641
 15620  003304  6C20               	negf	___awtoft@c,c
 15621  003306  1E21               	comf	___awtoft@c+1,f,c
 15622  003308  B0D8               	btfsc	status,0,c
 15623  00330A  2A21               	incf	___awtoft@c+1,f,c
 15624  00330C  0E01               	movlw	1
 15625  00330E  6E23               	movwf	___awtoft@sign,c
 15626  003310                     l1641:
 15627  003310  C020  F018         	movff	___awtoft@c,___ftpack@arg
 15628  003314  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 15629  003318  6A1A               	clrf	___ftpack@arg+2,c
 15630  00331A  0E8E               	movlw	142
 15631  00331C  6E1B               	movwf	___ftpack@exp,c
 15632  00331E  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 15633  003322  ECE3  F011         	call	___ftpack	;wreg free
 15634  003326  C018  F020         	movff	?___ftpack,?___awtoft
 15635  00332A  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 15636  00332E  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 15637  003332  0012               	return	
 15638  003334                     __end_of___awtoft:
 15639                           	opt stack 0
 15640                           tosu	equ	0xFFF
 15641                           tosh	equ	0xFFE
 15642                           tosl	equ	0xFFD
 15643                           pclath	equ	0xFFA
 15644                           tblptru	equ	0xFF8
 15645                           tblptrh	equ	0xFF7
 15646                           tblptrl	equ	0xFF6
 15647                           tablat	equ	0xFF5
 15648                           prodh	equ	0xFF4
 15649                           prodl	equ	0xFF3
 15650                           intcon	equ	0xFF2
 15651                           intcon2	equ	0xFF1
 15652                           postinc0	equ	0xFEE
 15653                           wreg	equ	0xFE8
 15654                           indf1	equ	0xFE7
 15655                           postdec1	equ	0xFE5
 15656                           fsr1h	equ	0xFE2
 15657                           fsr1l	equ	0xFE1
 15658                           indf2	equ	0xFDF
 15659                           postinc2	equ	0xFDE
 15660                           postdec2	equ	0xFDD
 15661                           fsr2h	equ	0xFDA
 15662                           fsr2l	equ	0xFD9
 15663                           status	equ	0xFD8
 15664                           
 15665 ;; *************** function ___lltoft *****************
 15666 ;; Defined at:
 15667 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 15668 ;; Parameters:    Size  Location     Type
 15669 ;;  c               4   31[COMRAM] unsigned long 
 15670 ;; Auto vars:     Size  Location     Type
 15671 ;;  exp             1   39[COMRAM] unsigned char 
 15672 ;; Return value:  Size  Location     Type
 15673 ;;                  3   31[COMRAM] float 
 15674 ;; Registers used:
 15675 ;;		wreg, status,2, status,0, cstack
 15676 ;; Tracked objects:
 15677 ;;		On entry : 0/0
 15678 ;;		On exit  : 0/0
 15679 ;;		Unchanged: 0/0
 15680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15681 ;;      Params:         4       0       0       0       0       0       0
 15682 ;;      Locals:         1       0       0       0       0       0       0
 15683 ;;      Temps:          4       0       0       0       0       0       0
 15684 ;;      Totals:         9       0       0       0       0       0       0
 15685 ;;Total ram usage:        9 bytes
 15686 ;; Hardware stack levels used:    1
 15687 ;; Hardware stack levels required when called:    4
 15688 ;; This function calls:
 15689 ;;		___ftpack
 15690 ;; This function is called by:
 15691 ;;		_CheckFlashPrecentage
 15692 ;;		_pow
 15693 ;; This function uses a non-reentrant model
 15694 ;;
 15695                           
 15696                           	psect	text102
 15697  002C50                     __ptext102:
 15698                           	opt stack 0
 15699  002C50                     ___lltoft:
 15700                           	opt stack 25
 15701                           
 15702                           ;incstack = 0
 15703  002C50  0E8E               	movlw	142
 15704  002C52  6E28               	movwf	___lltoft@exp,c
 15705  002C54  D006               	goto	l1817
 15706  002C56  90D8               	bcf	status,0,c
 15707  002C58  3223               	rrcf	___lltoft@c+3,f,c
 15708  002C5A  3222               	rrcf	___lltoft@c+2,f,c
 15709  002C5C  3221               	rrcf	___lltoft@c+1,f,c
 15710  002C5E  3220               	rrcf	___lltoft@c,f,c
 15711  002C60  2A28               	incf	___lltoft@exp,f,c
 15712  002C62                     l1817:
 15713  002C62  0E00               	movlw	0
 15714  002C64  1420               	andwf	___lltoft@c,w,c
 15715  002C66  6E24               	movwf	??___lltoft& (0+255),c
 15716  002C68  0E00               	movlw	0
 15717  002C6A  1421               	andwf	___lltoft@c+1,w,c
 15718  002C6C  6E25               	movwf	(??___lltoft+1)& (0+255),c
 15719  002C6E  0E00               	movlw	0
 15720  002C70  1422               	andwf	___lltoft@c+2,w,c
 15721  002C72  6E26               	movwf	(??___lltoft+2)& (0+255),c
 15722  002C74  0EFF               	movlw	255
 15723  002C76  1423               	andwf	___lltoft@c+3,w,c
 15724  002C78  6E27               	movwf	(??___lltoft+3)& (0+255),c
 15725  002C7A  5024               	movf	??___lltoft,w,c
 15726  002C7C  1025               	iorwf	??___lltoft+1,w,c
 15727  002C7E  1026               	iorwf	??___lltoft+2,w,c
 15728  002C80  1027               	iorwf	??___lltoft+3,w,c
 15729  002C82  A4D8               	btfss	status,2,c
 15730  002C84  D7E8               	goto	l1818
 15731  002C86  C020  F018         	movff	___lltoft@c,___ftpack@arg
 15732  002C8A  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 15733  002C8E  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 15734  002C92  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 15735  002C96  0E00               	movlw	0
 15736  002C98  6E1C               	movwf	___ftpack@sign,c
 15737  002C9A  ECE3  F011         	call	___ftpack	;wreg free
 15738  002C9E  C018  F020         	movff	?___ftpack,?___lltoft
 15739  002CA2  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 15740  002CA6  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 15741  002CAA  0012               	return	
 15742  002CAC                     __end_of___lltoft:
 15743                           	opt stack 0
 15744                           tosu	equ	0xFFF
 15745                           tosh	equ	0xFFE
 15746                           tosl	equ	0xFFD
 15747                           pclath	equ	0xFFA
 15748                           tblptru	equ	0xFF8
 15749                           tblptrh	equ	0xFF7
 15750                           tblptrl	equ	0xFF6
 15751                           tablat	equ	0xFF5
 15752                           prodh	equ	0xFF4
 15753                           prodl	equ	0xFF3
 15754                           intcon	equ	0xFF2
 15755                           intcon2	equ	0xFF1
 15756                           postinc0	equ	0xFEE
 15757                           wreg	equ	0xFE8
 15758                           indf1	equ	0xFE7
 15759                           postdec1	equ	0xFE5
 15760                           fsr1h	equ	0xFE2
 15761                           fsr1l	equ	0xFE1
 15762                           indf2	equ	0xFDF
 15763                           postinc2	equ	0xFDE
 15764                           postdec2	equ	0xFDD
 15765                           fsr2h	equ	0xFDA
 15766                           fsr2l	equ	0xFD9
 15767                           status	equ	0xFD8
 15768                           
 15769 ;; *************** function ___lwtoft *****************
 15770 ;; Defined at:
 15771 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 15772 ;; Parameters:    Size  Location     Type
 15773 ;;  c               2   31[COMRAM] unsigned int 
 15774 ;; Auto vars:     Size  Location     Type
 15775 ;;		None
 15776 ;; Return value:  Size  Location     Type
 15777 ;;                  3   31[COMRAM] float 
 15778 ;; Registers used:
 15779 ;;		wreg, status,2, status,0, cstack
 15780 ;; Tracked objects:
 15781 ;;		On entry : 0/0
 15782 ;;		On exit  : 0/0
 15783 ;;		Unchanged: 0/0
 15784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15785 ;;      Params:         3       0       0       0       0       0       0
 15786 ;;      Locals:         0       0       0       0       0       0       0
 15787 ;;      Temps:          0       0       0       0       0       0       0
 15788 ;;      Totals:         3       0       0       0       0       0       0
 15789 ;;Total ram usage:        3 bytes
 15790 ;; Hardware stack levels used:    1
 15791 ;; Hardware stack levels required when called:    4
 15792 ;; This function calls:
 15793 ;;		___ftpack
 15794 ;; This function is called by:
 15795 ;;		_AdcConvert
 15796 ;; This function uses a non-reentrant model
 15797 ;;
 15798                           
 15799                           	psect	text103
 15800  0036D0                     __ptext103:
 15801                           	opt stack 0
 15802  0036D0                     ___lwtoft:
 15803                           	opt stack 25
 15804                           
 15805                           ;incstack = 0
 15806  0036D0  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 15807  0036D4  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 15808  0036D8  6A1A               	clrf	___ftpack@arg+2,c
 15809  0036DA  0E8E               	movlw	142
 15810  0036DC  6E1B               	movwf	___ftpack@exp,c
 15811  0036DE  0E00               	movlw	0
 15812  0036E0  6E1C               	movwf	___ftpack@sign,c
 15813  0036E2  ECE3  F011         	call	___ftpack	;wreg free
 15814  0036E6  C018  F020         	movff	?___ftpack,?___lwtoft
 15815  0036EA  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 15816  0036EE  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 15817  0036F2  0012               	return	
 15818  0036F4                     __end_of___lwtoft:
 15819                           	opt stack 0
 15820                           tosu	equ	0xFFF
 15821                           tosh	equ	0xFFE
 15822                           tosl	equ	0xFFD
 15823                           pclath	equ	0xFFA
 15824                           tblptru	equ	0xFF8
 15825                           tblptrh	equ	0xFF7
 15826                           tblptrl	equ	0xFF6
 15827                           tablat	equ	0xFF5
 15828                           prodh	equ	0xFF4
 15829                           prodl	equ	0xFF3
 15830                           intcon	equ	0xFF2
 15831                           intcon2	equ	0xFF1
 15832                           postinc0	equ	0xFEE
 15833                           wreg	equ	0xFE8
 15834                           indf1	equ	0xFE7
 15835                           postdec1	equ	0xFE5
 15836                           fsr1h	equ	0xFE2
 15837                           fsr1l	equ	0xFE1
 15838                           indf2	equ	0xFDF
 15839                           postinc2	equ	0xFDE
 15840                           postdec2	equ	0xFDD
 15841                           fsr2h	equ	0xFDA
 15842                           fsr2l	equ	0xFD9
 15843                           status	equ	0xFD8
 15844                           
 15845 ;; *************** function ___ftpack *****************
 15846 ;; Defined at:
 15847 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 15848 ;; Parameters:    Size  Location     Type
 15849 ;;  arg             3   23[COMRAM] unsigned um
 15850 ;;  exp             1   26[COMRAM] unsigned char 
 15851 ;;  sign            1   27[COMRAM] unsigned char 
 15852 ;; Auto vars:     Size  Location     Type
 15853 ;;		None
 15854 ;; Return value:  Size  Location     Type
 15855 ;;                  3   23[COMRAM] float 
 15856 ;; Registers used:
 15857 ;;		wreg, status,2, status,0
 15858 ;; Tracked objects:
 15859 ;;		On entry : 0/0
 15860 ;;		On exit  : 0/0
 15861 ;;		Unchanged: 0/0
 15862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15863 ;;      Params:         5       0       0       0       0       0       0
 15864 ;;      Locals:         0       0       0       0       0       0       0
 15865 ;;      Temps:          3       0       0       0       0       0       0
 15866 ;;      Totals:         8       0       0       0       0       0       0
 15867 ;;Total ram usage:        8 bytes
 15868 ;; Hardware stack levels used:    1
 15869 ;; Hardware stack levels required when called:    3
 15870 ;; This function calls:
 15871 ;;		Nothing
 15872 ;; This function is called by:
 15873 ;;		___altoft
 15874 ;;		___awtoft
 15875 ;;		___ftadd
 15876 ;;		___ftdiv
 15877 ;;		___ftmul
 15878 ;;		___lltoft
 15879 ;;		___lwtoft
 15880 ;; This function uses a non-reentrant model
 15881 ;;
 15882                           
 15883                           	psect	text104
 15884  0023C6                     __ptext104:
 15885                           	opt stack 0
 15886  0023C6                     ___ftpack:
 15887                           	opt stack 25
 15888                           
 15889                           ;incstack = 0
 15890  0023C6  501B               	movf	___ftpack@exp,w,c
 15891  0023C8  B4D8               	btfsc	status,2,c
 15892  0023CA  D005               	goto	u5910
 15893  0023CC  5018               	movf	___ftpack@arg,w,c
 15894  0023CE  1019               	iorwf	___ftpack@arg+1,w,c
 15895  0023D0  101A               	iorwf	___ftpack@arg+2,w,c
 15896  0023D2  A4D8               	btfss	status,2,c
 15897  0023D4  D00C               	goto	l1660
 15898  0023D6                     u5910:
 15899  0023D6  0E00               	movlw	0
 15900  0023D8  6E18               	movwf	?___ftpack,c
 15901  0023DA  0E00               	movlw	0
 15902  0023DC  6E19               	movwf	?___ftpack+1,c
 15903  0023DE  0E00               	movlw	0
 15904  0023E0  6E1A               	movwf	?___ftpack+2,c
 15905  0023E2  0012               	return	
 15906  0023E4  2A1B               	incf	___ftpack@exp,f,c
 15907  0023E6  90D8               	bcf	status,0,c
 15908  0023E8  321A               	rrcf	___ftpack@arg+2,f,c
 15909  0023EA  3219               	rrcf	___ftpack@arg+1,f,c
 15910  0023EC  3218               	rrcf	___ftpack@arg,f,c
 15911  0023EE                     l1660:
 15912  0023EE  0E00               	movlw	0
 15913  0023F0  1418               	andwf	___ftpack@arg,w,c
 15914  0023F2  6E1D               	movwf	??___ftpack& (0+255),c
 15915  0023F4  0E00               	movlw	0
 15916  0023F6  1419               	andwf	___ftpack@arg+1,w,c
 15917  0023F8  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 15918  0023FA  0EFE               	movlw	254
 15919  0023FC  141A               	andwf	___ftpack@arg+2,w,c
 15920  0023FE  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 15921  002400  501D               	movf	??___ftpack,w,c
 15922  002402  101E               	iorwf	??___ftpack+1,w,c
 15923  002404  101F               	iorwf	??___ftpack+2,w,c
 15924  002406  B4D8               	btfsc	status,2,c
 15925  002408  D00C               	goto	l1663
 15926  00240A  D7EC               	goto	l1661
 15927  00240C  2A1B               	incf	___ftpack@exp,f,c
 15928  00240E  0E01               	movlw	1
 15929  002410  2618               	addwf	___ftpack@arg,f,c
 15930  002412  0E00               	movlw	0
 15931  002414  2219               	addwfc	___ftpack@arg+1,f,c
 15932  002416  0E00               	movlw	0
 15933  002418  221A               	addwfc	___ftpack@arg+2,f,c
 15934  00241A  90D8               	bcf	status,0,c
 15935  00241C  321A               	rrcf	___ftpack@arg+2,f,c
 15936  00241E  3219               	rrcf	___ftpack@arg+1,f,c
 15937  002420  3218               	rrcf	___ftpack@arg,f,c
 15938  002422                     l1663:
 15939  002422  0E00               	movlw	0
 15940  002424  1418               	andwf	___ftpack@arg,w,c
 15941  002426  6E1D               	movwf	??___ftpack& (0+255),c
 15942  002428  0E00               	movlw	0
 15943  00242A  1419               	andwf	___ftpack@arg+1,w,c
 15944  00242C  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 15945  00242E  0EFF               	movlw	255
 15946  002430  141A               	andwf	___ftpack@arg+2,w,c
 15947  002432  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 15948  002434  501D               	movf	??___ftpack,w,c
 15949  002436  101E               	iorwf	??___ftpack+1,w,c
 15950  002438  101F               	iorwf	??___ftpack+2,w,c
 15951  00243A  B4D8               	btfsc	status,2,c
 15952  00243C  D006               	goto	l1666
 15953  00243E  D7E6               	goto	l1664
 15954  002440  061B               	decf	___ftpack@exp,f,c
 15955  002442  90D8               	bcf	status,0,c
 15956  002444  3618               	rlcf	___ftpack@arg,f,c
 15957  002446  3619               	rlcf	___ftpack@arg+1,f,c
 15958  002448  361A               	rlcf	___ftpack@arg+2,f,c
 15959  00244A                     l1666:
 15960  00244A  BE19               	btfsc	___ftpack@arg+1,7,c
 15961  00244C  D003               	goto	u5950
 15962  00244E  0E02               	movlw	2
 15963  002450  601B               	cpfslt	___ftpack@exp,c
 15964  002452  D7F6               	goto	l1667
 15965  002454                     u5950:
 15966  002454  A01B               	btfss	___ftpack@exp,0,c
 15967  002456  9E19               	bcf	___ftpack@arg+1,7,c
 15968  002458  90D8               	bcf	status,0,c
 15969  00245A  321B               	rrcf	___ftpack@exp,f,c
 15970  00245C  501B               	movf	___ftpack@exp,w,c
 15971  00245E  121A               	iorwf	___ftpack@arg+2,f,c
 15972  002460  501C               	movf	___ftpack@sign,w,c
 15973  002462  A4D8               	btfss	status,2,c
 15974  002464  8E1A               	bsf	___ftpack@arg+2,7,c
 15975  002466  C018  F018         	movff	___ftpack@arg,?___ftpack
 15976  00246A  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 15977  00246E  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 15978  002472  0012               	return	
 15979  002474                     __end_of___ftpack:
 15980                           	opt stack 0
 15981                           tosu	equ	0xFFF
 15982                           tosh	equ	0xFFE
 15983                           tosl	equ	0xFFD
 15984                           pclath	equ	0xFFA
 15985                           tblptru	equ	0xFF8
 15986                           tblptrh	equ	0xFF7
 15987                           tblptrl	equ	0xFF6
 15988                           tablat	equ	0xFF5
 15989                           prodh	equ	0xFF4
 15990                           prodl	equ	0xFF3
 15991                           intcon	equ	0xFF2
 15992                           intcon2	equ	0xFF1
 15993                           postinc0	equ	0xFEE
 15994                           wreg	equ	0xFE8
 15995                           indf1	equ	0xFE7
 15996                           postdec1	equ	0xFE5
 15997                           fsr1h	equ	0xFE2
 15998                           fsr1l	equ	0xFE1
 15999                           indf2	equ	0xFDF
 16000                           postinc2	equ	0xFDE
 16001                           postdec2	equ	0xFDD
 16002                           fsr2h	equ	0xFDA
 16003                           fsr2l	equ	0xFD9
 16004                           status	equ	0xFD8
 16005                           
 16006 ;; *************** function _FlashSampleWrite *****************
 16007 ;; Defined at:
 16008 ;;		line 29 in file "FlashApp.c"
 16009 ;; Parameters:    Size  Location     Type
 16010 ;;  sampleData      2   44[COMRAM] unsigned int 
 16011 ;;  channelNum      1   46[COMRAM] unsigned char 
 16012 ;; Auto vars:     Size  Location     Type
 16013 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 16014 ;; Return value:  Size  Location     Type
 16015 ;;                  1    wreg      void 
 16016 ;; Registers used:
 16017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16018 ;; Tracked objects:
 16019 ;;		On entry : 0/0
 16020 ;;		On exit  : 0/0
 16021 ;;		Unchanged: 0/0
 16022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16023 ;;      Params:         3       0       0       0       0       0       0
 16024 ;;      Locals:         0       2       0       0       0       0       0
 16025 ;;      Temps:          0       2       0       0       0       0       0
 16026 ;;      Totals:         3       4       0       0       0       0       0
 16027 ;;Total ram usage:        7 bytes
 16028 ;; Hardware stack levels used:    1
 16029 ;; Hardware stack levels required when called:    5
 16030 ;; This function calls:
 16031 ;;		_FLASH_IsWriteDone
 16032 ;;		_FLASH_WriteBlock
 16033 ;; This function is called by:
 16034 ;;		_AdcConvert
 16035 ;; This function uses a non-reentrant model
 16036 ;;
 16037                           
 16038                           	psect	text105
 16039  0019B6                     __ptext105:
 16040                           	opt stack 0
 16041  0019B6                     _FlashSampleWrite:
 16042                           	opt stack 24
 16043                           
 16044                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 16045                           
 16046                           ;incstack = 0
 16047  0019B6  502F               	movf	FlashSampleWrite@channelNum,w,c
 16048  0019B8  0100               	movlb	0	; () banked
 16049  0019BA  6F60               	movwf	??_FlashSampleWrite& (0+255),b
 16050  0019BC  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
 16051  0019BE  0E0C               	movlw	12
 16052  0019C0                     u7585:
 16053  0019C0  90D8               	bcf	status,0,c
 16054  0019C2  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 16055  0019C4  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 16056  0019C6  2EE8               	decfsz	wreg,f,c
 16057  0019C8  D7FB               	goto	u7585
 16058  0019CA  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 16059  0019CE  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 16060                           
 16061                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 16062  0019D2  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 16063  0019D4  122D               	iorwf	FlashSampleWrite@sampleData,f,c
 16064  0019D6  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 16065  0019D8  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
 16066                           
 16067                           ; BSR set to: 0
 16068                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 16069  0019DA  90D8               	bcf	status,0,c
 16070  0019DC  35C6               	rlcf	_sampleCount& (0+255),w,b
 16071  0019DE  6ED9               	movwf	fsr2l,c
 16072  0019E0  35C7               	rlcf	(_sampleCount+1)& (0+255),w,b
 16073  0019E2  6EDA               	movwf	fsr2h,c
 16074  0019E4  0E6E               	movlw	low _sampleArray
 16075  0019E6  26D9               	addwf	fsr2l,f,c
 16076  0019E8  0E01               	movlw	high _sampleArray
 16077  0019EA  22DA               	addwfc	fsr2h,f,c
 16078  0019EC  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 16079  0019F0  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 16080                           
 16081                           ; BSR set to: 0
 16082                           ;FlashApp.c: 35: sampleCount ++;
 16083  0019F4  4BC6               	infsnz	_sampleCount& (0+255),f,b
 16084  0019F6  2BC7               	incf	(_sampleCount+1)& (0+255),f,b
 16085                           
 16086                           ; BSR set to: 0
 16087                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 16088  0019F8  C0C6  F060         	movff	_sampleCount,??_FlashSampleWrite
 16089  0019FC  C0C7  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
 16090  001A00  90D8               	bcf	status,0,c
 16091  001A02  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 16092  001A04  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 16093  001A06  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 16094  001A08  E104               	bnz	u7590
 16095  001A0A  0E40               	movlw	64
 16096  001A0C  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
 16097  001A0E  A0D8               	btfss	status,0,c
 16098  001A10  0012               	return	
 16099  001A12                     u7590:
 16100                           
 16101                           ; BSR set to: 0
 16102  001A12  EC50  F01C         	call	_FLASH_IsWriteDone	;wreg free
 16103  001A16  0900               	iorlw	0
 16104  001A18  B4D8               	btfsc	status,2,c
 16105  001A1A  0012               	return	
 16106                           
 16107                           ;FlashApp.c: 38: {
 16108                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 16109  001A1C  C042  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 16110  001A20  C043  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 16111  001A24  C044  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 16112  001A28  C045  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 16113  001A2C  0E6E               	movlw	low _sampleArray
 16114  001A2E  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 16115  001A30  0E01               	movlw	high _sampleArray
 16116  001A32  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 16117  001A34  ECD6  F010         	call	_FLASH_WriteBlock	;wreg free
 16118                           
 16119                           ;FlashApp.c: 40: writeAddress += (64);
 16120  001A38  0E40               	movlw	64
 16121  001A3A  2642               	addwf	_writeAddress,f,c
 16122  001A3C  0E00               	movlw	0
 16123  001A3E  2243               	addwfc	_writeAddress+1,f,c
 16124  001A40  2244               	addwfc	_writeAddress+2,f,c
 16125  001A42  2245               	addwfc	_writeAddress+3,f,c
 16126                           
 16127                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 16128  001A44  5045               	movf	_writeAddress+3,w,c
 16129  001A46  1044               	iorwf	_writeAddress+2,w,c
 16130  001A48  E106               	bnz	u7610
 16131  001A4A  0EF0               	movlw	240
 16132  001A4C  5C42               	subwf	_writeAddress,w,c
 16133  001A4E  0E7F               	movlw	127
 16134  001A50  5843               	subwfb	_writeAddress+1,w,c
 16135  001A52  A0D8               	btfss	status,0,c
 16136  001A54  D018               	goto	l283
 16137  001A56                     u7610:
 16138                           
 16139                           ;FlashApp.c: 42: {
 16140                           ;FlashApp.c: 43: writeAddress = 0x4000;
 16141  001A56  0E00               	movlw	0
 16142  001A58  6E42               	movwf	_writeAddress,c
 16143  001A5A  0E40               	movlw	64
 16144  001A5C  6E43               	movwf	_writeAddress+1,c
 16145  001A5E  0E00               	movlw	0
 16146  001A60  6E44               	movwf	_writeAddress+2,c
 16147  001A62  0E00               	movlw	0
 16148  001A64  6E45               	movwf	_writeAddress+3,c
 16149                           
 16150                           ;FlashApp.c: 44: isReWriteDone = 1;
 16151  001A66  0E01               	movlw	1
 16152  001A68  6E3B               	movwf	_isReWriteDone,c
 16153                           
 16154                           ;FlashApp.c: 45: if (readAddress == 0x4000)
 16155  001A6A  0E40               	movlw	64
 16156  001A6C  0100               	movlb	0	; () banked
 16157  001A6E  19F8               	xorwf	(_readAddress+1)& (0+255),w,b
 16158  001A70  11F7               	iorwf	_readAddress& (0+255),w,b
 16159  001A72  11F9               	iorwf	(_readAddress+2)& (0+255),w,b
 16160  001A74  11FA               	iorwf	(_readAddress+3)& (0+255),w,b
 16161  001A76  A4D8               	btfss	status,2,c
 16162  001A78  D006               	goto	l283
 16163                           
 16164                           ; BSR set to: 0
 16165                           ;FlashApp.c: 46: {
 16166                           ;FlashApp.c: 47: readAddress += (64);
 16167  001A7A  0E40               	movlw	64
 16168  001A7C  27F7               	addwf	_readAddress& (0+255),f,b
 16169  001A7E  0E00               	movlw	0
 16170  001A80  23F8               	addwfc	(_readAddress+1)& (0+255),f,b
 16171  001A82  23F9               	addwfc	(_readAddress+2)& (0+255),f,b
 16172  001A84  23FA               	addwfc	(_readAddress+3)& (0+255),f,b
 16173  001A86                     l283:
 16174                           
 16175                           ;FlashApp.c: 48: }
 16176                           ;FlashApp.c: 49: }
 16177                           ;FlashApp.c: 51: if (numOfValidateSamples < ((0x4000-0x7FF0)/(64)))
 16178                           
 16179                           ; BSR set to: 0
 16180  001A86  0431               	decf	_numOfValidateSamples,w,c
 16181  001A88  0EFF               	movlw	255
 16182  001A8A  5832               	subwfb	_numOfValidateSamples+1,w,c
 16183  001A8C  0EFF               	movlw	255
 16184  001A8E  5833               	subwfb	_numOfValidateSamples+2,w,c
 16185  001A90  0EFF               	movlw	255
 16186  001A92  5834               	subwfb	_numOfValidateSamples+3,w,c
 16187  001A94  B0D8               	btfsc	status,0,c
 16188  001A96  D006               	goto	l284
 16189                           
 16190                           ;FlashApp.c: 52: {
 16191                           ;FlashApp.c: 53: numOfValidateSamples++;
 16192  001A98  0E01               	movlw	1
 16193  001A9A  2631               	addwf	_numOfValidateSamples,f,c
 16194  001A9C  0E00               	movlw	0
 16195  001A9E  2232               	addwfc	_numOfValidateSamples+1,f,c
 16196  001AA0  2233               	addwfc	_numOfValidateSamples+2,f,c
 16197  001AA2  2234               	addwfc	_numOfValidateSamples+3,f,c
 16198  001AA4                     l284:
 16199                           
 16200                           ;FlashApp.c: 54: }
 16201                           ;FlashApp.c: 55: sampleCount = 0;
 16202  001AA4  0E00               	movlw	0
 16203  001AA6  0100               	movlb	0	; () banked
 16204  001AA8  6FC7               	movwf	(_sampleCount+1)& (0+255),b
 16205  001AAA  0E00               	movlw	0
 16206  001AAC  6FC6               	movwf	_sampleCount& (0+255),b
 16207  001AAE  0012               	return	
 16208  001AB0                     __end_of_FlashSampleWrite:
 16209                           	opt stack 0
 16210                           tosu	equ	0xFFF
 16211                           tosh	equ	0xFFE
 16212                           tosl	equ	0xFFD
 16213                           pclath	equ	0xFFA
 16214                           tblptru	equ	0xFF8
 16215                           tblptrh	equ	0xFF7
 16216                           tblptrl	equ	0xFF6
 16217                           tablat	equ	0xFF5
 16218                           prodh	equ	0xFF4
 16219                           prodl	equ	0xFF3
 16220                           intcon	equ	0xFF2
 16221                           intcon2	equ	0xFF1
 16222                           postinc0	equ	0xFEE
 16223                           wreg	equ	0xFE8
 16224                           indf1	equ	0xFE7
 16225                           postdec1	equ	0xFE5
 16226                           fsr1h	equ	0xFE2
 16227                           fsr1l	equ	0xFE1
 16228                           indf2	equ	0xFDF
 16229                           postinc2	equ	0xFDE
 16230                           postdec2	equ	0xFDD
 16231                           fsr2h	equ	0xFDA
 16232                           fsr2l	equ	0xFD9
 16233                           status	equ	0xFD8
 16234                           
 16235 ;; *************** function _FLASH_WriteBlock *****************
 16236 ;; Defined at:
 16237 ;;		line 93 in file "mcc_generated_files/memory.c"
 16238 ;; Parameters:    Size  Location     Type
 16239 ;;  writeAddr       4   28[COMRAM] unsigned long 
 16240 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 16241 ;;		 -> FlashTest@buff(128), sampleArray(64), 
 16242 ;; Auto vars:     Size  Location     Type
 16243 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 16244 ;;  i               1   43[COMRAM] unsigned char 
 16245 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 16246 ;; Return value:  Size  Location     Type
 16247 ;;                  1    wreg      char 
 16248 ;; Registers used:
 16249 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16250 ;; Tracked objects:
 16251 ;;		On entry : 0/0
 16252 ;;		On exit  : 0/0
 16253 ;;		Unchanged: 0/0
 16254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16255 ;;      Params:         6       0       0       0       0       0       0
 16256 ;;      Locals:         6       0       0       0       0       0       0
 16257 ;;      Temps:          4       0       0       0       0       0       0
 16258 ;;      Totals:        16       0       0       0       0       0       0
 16259 ;;Total ram usage:       16 bytes
 16260 ;; Hardware stack levels used:    1
 16261 ;; Hardware stack levels required when called:    4
 16262 ;; This function calls:
 16263 ;;		_FLASH_EraseBlock
 16264 ;; This function is called by:
 16265 ;;		_FlashSampleWrite
 16266 ;;		_FlashTest
 16267 ;;		_FLASH_WriteByte
 16268 ;; This function uses a non-reentrant model
 16269 ;;
 16270                           
 16271                           	psect	text106
 16272  0021AC                     __ptext106:
 16273                           	opt stack 0
 16274  0021AC                     _FLASH_WriteBlock:
 16275                           	opt stack 24
 16276                           
 16277                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 16278                           
 16279                           ;incstack = 0
 16280  0021AC  0EC0               	movlw	192
 16281  0021AE  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 16282  0021B0  0E7F               	movlw	127
 16283  0021B2  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 16284  0021B4  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 16285  0021B8  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 16286  0021BC  5023               	movf	??_FLASH_WriteBlock,w,c
 16287  0021BE  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 16288  0021C0  5024               	movf	??_FLASH_WriteBlock+1,w,c
 16289  0021C2  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 16290  0021C4  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 16291  0021C8  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 16292  0021CC  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 16293  0021CE  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 16294                           
 16295                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 16296  0021D0  0E00               	movlw	0
 16297  0021D2  BEF2               	btfsc	intcon,7,c	;volatile
 16298  0021D4  0E01               	movlw	1
 16299  0021D6  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 16300                           
 16301                           ;memory.c: 97: uint8_t i;
 16302                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 16303  0021D8  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 16304  0021DA  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 16305  0021DC  E144               	bnz	l942
 16306  0021DE  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 16307  0021E0  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 16308  0021E2  E141               	bnz	l942
 16309  0021E4  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 16310  0021E6  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 16311  0021E8  E13E               	bnz	l942
 16312  0021EA  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 16313  0021EC  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 16314  0021EE  A4D8               	btfss	status,2,c
 16315  0021F0  0012               	return	
 16316                           
 16317                           ;memory.c: 103: }
 16318                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 16319                           
 16320                           ;memory.c: 101: {
 16321                           ;memory.c: 102: return -1;
 16322                           ;	Return value of _FLASH_WriteBlock is never used
 16323  0021F2  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 16324  0021F6  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 16325  0021FA  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 16326  0021FE  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 16327  002202  EC57  F01A         	call	_FLASH_EraseBlock	;wreg free
 16328                           
 16329                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 16330  002206  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 16331                           
 16332                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 16333  00220A  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 16334                           
 16335                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 16336  00220E  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 16337                           
 16338                           ;memory.c: 114: for (i=0; i<(64); i++)
 16339  002212  0E00               	movlw	0
 16340  002214  6E2C               	movwf	FLASH_WriteBlock@i,c
 16341  002216                     l7348:
 16342  002216  0E3F               	movlw	63
 16343  002218  642C               	cpfsgt	FLASH_WriteBlock@i,c
 16344  00221A  D001               	goto	l943
 16345  00221C  D013               	goto	u7020
 16346  00221E                     l943:
 16347                           
 16348                           ;memory.c: 115: {
 16349                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 16350  00221E  502C               	movf	FLASH_WriteBlock@i,w,c
 16351  002220  0D01               	mullw	1
 16352  002222  50F3               	movf	prodl,w,c
 16353  002224  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 16354  002226  6ED9               	movwf	fsr2l,c
 16355  002228  50F4               	movf	prodh,w,c
 16356  00222A  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 16357  00222C  6EDA               	movwf	fsr2h,c
 16358  00222E  50DF               	movf	indf2,w,c
 16359  002230  6EF5               	movwf	tablat,c	;volatile
 16360                           
 16361                           ;memory.c: 118: if (i == ((64)-1))
 16362  002232  0E3F               	movlw	63
 16363  002234  182C               	xorwf	FLASH_WriteBlock@i,w,c
 16364  002236  A4D8               	btfss	status,2,c
 16365  002238  D002               	goto	l945
 16366  00223A  000C               	tblwt		*	;# 
 16367                           
 16368                           ;memory.c: 121: }
 16369  00223C  D001               	goto	l946
 16370  00223E                     l945:
 16371  00223E  000D               	tblwt		*+	;# 
 16372  002240                     l946:
 16373  002240  2A2C               	incf	FLASH_WriteBlock@i,f,c
 16374  002242  D7E9               	goto	l7348
 16375  002244                     u7020:
 16376                           
 16377                           ;memory.c: 125: }
 16378                           ;memory.c: 126: }
 16379                           ;memory.c: 128: PIR2bits.EEIF = 1;
 16380  002244  88A1               	bsf	4001,4,c	;volatile
 16381                           
 16382                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 16383  002246  8EA6               	bsf	4006,7,c	;volsfr
 16384                           
 16385                           ;memory.c: 130: EECON1bits.CFGS = 0;
 16386  002248  9CA6               	bcf	4006,6,c	;volsfr
 16387                           
 16388                           ;memory.c: 131: EECON1bits.WREN = 1;
 16389  00224A  84A6               	bsf	4006,2,c	;volsfr
 16390                           
 16391                           ;memory.c: 132: INTCONbits.GIE = 0;
 16392  00224C  9EF2               	bcf	intcon,7,c	;volatile
 16393                           
 16394                           ;memory.c: 133: EECON2 = 0x55;
 16395  00224E  0E55               	movlw	85
 16396  002250  6EA7               	movwf	4007,c	;volsfr
 16397                           
 16398                           ;memory.c: 134: EECON2 = 0xAA;
 16399  002252  0EAA               	movlw	170
 16400  002254  6EA7               	movwf	4007,c	;volsfr
 16401                           
 16402                           ;memory.c: 135: EECON1bits.WR = 1;
 16403  002256  82A6               	bsf	4006,1,c	;volsfr
 16404                           
 16405                           ;memory.c: 137: EECON1bits.WREN = 0;
 16406  002258  94A6               	bcf	4006,2,c	;volsfr
 16407                           
 16408                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 16409  00225A  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 16410  00225C  D002               	bra	u7035
 16411  00225E  9EF2               	bcf	intcon,7,c	;volatile
 16412  002260  D001               	bra	u7036
 16413  002262                     u7035:
 16414  002262  8EF2               	bsf	intcon,7,c	;volatile
 16415  002264                     u7036:
 16416  002264  0012               	return	
 16417  002266                     l942:
 16418  002266  0012               	return		;funcret
 16419  002268                     __end_of_FLASH_WriteBlock:
 16420                           	opt stack 0
 16421                           tosu	equ	0xFFF
 16422                           tosh	equ	0xFFE
 16423                           tosl	equ	0xFFD
 16424                           pclath	equ	0xFFA
 16425                           tblptru	equ	0xFF8
 16426                           tblptrh	equ	0xFF7
 16427                           tblptrl	equ	0xFF6
 16428                           tablat	equ	0xFF5
 16429                           prodh	equ	0xFF4
 16430                           prodl	equ	0xFF3
 16431                           intcon	equ	0xFF2
 16432                           intcon2	equ	0xFF1
 16433                           postinc0	equ	0xFEE
 16434                           wreg	equ	0xFE8
 16435                           indf1	equ	0xFE7
 16436                           postdec1	equ	0xFE5
 16437                           fsr1h	equ	0xFE2
 16438                           fsr1l	equ	0xFE1
 16439                           indf2	equ	0xFDF
 16440                           postinc2	equ	0xFDE
 16441                           postdec2	equ	0xFDD
 16442                           fsr2h	equ	0xFDA
 16443                           fsr2l	equ	0xFD9
 16444                           status	equ	0xFD8
 16445                           
 16446 ;; *************** function _FLASH_EraseBlock *****************
 16447 ;; Defined at:
 16448 ;;		line 144 in file "mcc_generated_files/memory.c"
 16449 ;; Parameters:    Size  Location     Type
 16450 ;;  baseAddr        4   23[COMRAM] unsigned long 
 16451 ;; Auto vars:     Size  Location     Type
 16452 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 16453 ;; Return value:  Size  Location     Type
 16454 ;;                  1    wreg      void 
 16455 ;; Registers used:
 16456 ;;		wreg, status,2
 16457 ;; Tracked objects:
 16458 ;;		On entry : 0/0
 16459 ;;		On exit  : 0/0
 16460 ;;		Unchanged: 0/0
 16461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16462 ;;      Params:         4       0       0       0       0       0       0
 16463 ;;      Locals:         1       0       0       0       0       0       0
 16464 ;;      Temps:          0       0       0       0       0       0       0
 16465 ;;      Totals:         5       0       0       0       0       0       0
 16466 ;;Total ram usage:        5 bytes
 16467 ;; Hardware stack levels used:    1
 16468 ;; Hardware stack levels required when called:    3
 16469 ;; This function calls:
 16470 ;;		Nothing
 16471 ;; This function is called by:
 16472 ;;		_FLASH_WriteBlock
 16473 ;; This function uses a non-reentrant model
 16474 ;;
 16475                           
 16476                           	psect	text107
 16477  0034AE                     __ptext107:
 16478                           	opt stack 0
 16479  0034AE                     _FLASH_EraseBlock:
 16480                           	opt stack 24
 16481                           
 16482                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 16483                           
 16484                           ;incstack = 0
 16485  0034AE  0E00               	movlw	0
 16486  0034B0  BEF2               	btfsc	intcon,7,c	;volatile
 16487  0034B2  0E01               	movlw	1
 16488  0034B4  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 16489                           
 16490                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 16491  0034B6  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 16492                           
 16493                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 16494  0034BA  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 16495                           
 16496                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 16497  0034BE  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 16498                           
 16499                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 16500  0034C2  8EA6               	bsf	4006,7,c	;volsfr
 16501                           
 16502                           ;memory.c: 153: EECON1bits.CFGS = 0;
 16503  0034C4  9CA6               	bcf	4006,6,c	;volsfr
 16504                           
 16505                           ;memory.c: 154: EECON1bits.WREN = 1;
 16506  0034C6  84A6               	bsf	4006,2,c	;volsfr
 16507                           
 16508                           ;memory.c: 155: EECON1bits.FREE = 1;
 16509  0034C8  88A6               	bsf	4006,4,c	;volsfr
 16510                           
 16511                           ;memory.c: 156: INTCONbits.GIE = 0;
 16512  0034CA  9EF2               	bcf	intcon,7,c	;volatile
 16513                           
 16514                           ;memory.c: 157: EECON2 = 0x55;
 16515  0034CC  0E55               	movlw	85
 16516  0034CE  6EA7               	movwf	4007,c	;volsfr
 16517                           
 16518                           ;memory.c: 158: EECON2 = 0xAA;
 16519  0034D0  0EAA               	movlw	170
 16520  0034D2  6EA7               	movwf	4007,c	;volsfr
 16521                           
 16522                           ;memory.c: 159: EECON1bits.WR = 1;
 16523  0034D4  82A6               	bsf	4006,1,c	;volsfr
 16524                           
 16525                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 16526  0034D6  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 16527  0034D8  D002               	bra	u6775
 16528  0034DA  9EF2               	bcf	intcon,7,c	;volatile
 16529  0034DC  D001               	bra	u6776
 16530  0034DE                     u6775:
 16531  0034DE  8EF2               	bsf	intcon,7,c	;volatile
 16532  0034E0                     u6776:
 16533  0034E0  0012               	return		;funcret
 16534  0034E2                     __end_of_FLASH_EraseBlock:
 16535                           	opt stack 0
 16536                           tosu	equ	0xFFF
 16537                           tosh	equ	0xFFE
 16538                           tosl	equ	0xFFD
 16539                           pclath	equ	0xFFA
 16540                           tblptru	equ	0xFF8
 16541                           tblptrh	equ	0xFF7
 16542                           tblptrl	equ	0xFF6
 16543                           tablat	equ	0xFF5
 16544                           prodh	equ	0xFF4
 16545                           prodl	equ	0xFF3
 16546                           intcon	equ	0xFF2
 16547                           intcon2	equ	0xFF1
 16548                           postinc0	equ	0xFEE
 16549                           wreg	equ	0xFE8
 16550                           indf1	equ	0xFE7
 16551                           postdec1	equ	0xFE5
 16552                           fsr1h	equ	0xFE2
 16553                           fsr1l	equ	0xFE1
 16554                           indf2	equ	0xFDF
 16555                           postinc2	equ	0xFDE
 16556                           postdec2	equ	0xFDD
 16557                           fsr2h	equ	0xFDA
 16558                           fsr2l	equ	0xFD9
 16559                           status	equ	0xFD8
 16560                           
 16561 ;; *************** function _FLASH_IsWriteDone *****************
 16562 ;; Defined at:
 16563 ;;		line 189 in file "mcc_generated_files/memory.c"
 16564 ;; Parameters:    Size  Location     Type
 16565 ;;		None
 16566 ;; Auto vars:     Size  Location     Type
 16567 ;;		None
 16568 ;; Return value:  Size  Location     Type
 16569 ;;                  1    wreg      unsigned char 
 16570 ;; Registers used:
 16571 ;;		wreg
 16572 ;; Tracked objects:
 16573 ;;		On entry : 0/0
 16574 ;;		On exit  : 0/0
 16575 ;;		Unchanged: 0/0
 16576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16577 ;;      Params:         0       0       0       0       0       0       0
 16578 ;;      Locals:         0       0       0       0       0       0       0
 16579 ;;      Temps:          0       0       0       0       0       0       0
 16580 ;;      Totals:         0       0       0       0       0       0       0
 16581 ;;Total ram usage:        0 bytes
 16582 ;; Hardware stack levels used:    1
 16583 ;; Hardware stack levels required when called:    3
 16584 ;; This function calls:
 16585 ;;		Nothing
 16586 ;; This function is called by:
 16587 ;;		_FlashSampleWrite
 16588 ;;		_FlashReadUart
 16589 ;; This function uses a non-reentrant model
 16590 ;;
 16591                           
 16592                           	psect	text108
 16593  0038A0                     __ptext108:
 16594                           	opt stack 0
 16595  0038A0                     _FLASH_IsWriteDone:
 16596                           	opt stack 24
 16597                           
 16598                           ;memory.c: 191: return (EECON1bits.WR == 0);
 16599                           
 16600                           ;incstack = 0
 16601  0038A0  A2A6               	btfss	4006,1,c	;volsfr
 16602  0038A2  D001               	goto	u6661
 16603  0038A4  D002               	goto	u6660
 16604  0038A6                     u6661:
 16605  0038A6  0E01               	movlw	1
 16606  0038A8  0012               	return	
 16607  0038AA                     u6660:
 16608  0038AA  0E00               	movlw	0
 16609  0038AC  0012               	return	
 16610  0038AE                     __end_of_FLASH_IsWriteDone:
 16611                           	opt stack 0
 16612                           tosu	equ	0xFFF
 16613                           tosh	equ	0xFFE
 16614                           tosl	equ	0xFFD
 16615                           pclath	equ	0xFFA
 16616                           tblptru	equ	0xFF8
 16617                           tblptrh	equ	0xFF7
 16618                           tblptrl	equ	0xFF6
 16619                           tablat	equ	0xFF5
 16620                           prodh	equ	0xFF4
 16621                           prodl	equ	0xFF3
 16622                           intcon	equ	0xFF2
 16623                           intcon2	equ	0xFF1
 16624                           postinc0	equ	0xFEE
 16625                           wreg	equ	0xFE8
 16626                           indf1	equ	0xFE7
 16627                           postdec1	equ	0xFE5
 16628                           fsr1h	equ	0xFE2
 16629                           fsr1l	equ	0xFE1
 16630                           indf2	equ	0xFDF
 16631                           postinc2	equ	0xFDE
 16632                           postdec2	equ	0xFDD
 16633                           fsr2h	equ	0xFDA
 16634                           fsr2l	equ	0xFD9
 16635                           status	equ	0xFD8
 16636                           
 16637 ;; *************** function _ADC_GetConversion *****************
 16638 ;; Defined at:
 16639 ;;		line 106 in file "mcc_generated_files/adc.c"
 16640 ;; Parameters:    Size  Location     Type
 16641 ;;  channel         1    wreg     enum E6975
 16642 ;; Auto vars:     Size  Location     Type
 16643 ;;  channel         1   27[COMRAM] enum E6975
 16644 ;; Return value:  Size  Location     Type
 16645 ;;                  2   23[COMRAM] unsigned int 
 16646 ;; Registers used:
 16647 ;;		wreg, status,2, status,0
 16648 ;; Tracked objects:
 16649 ;;		On entry : 0/0
 16650 ;;		On exit  : 0/0
 16651 ;;		Unchanged: 0/0
 16652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16653 ;;      Params:         2       0       0       0       0       0       0
 16654 ;;      Locals:         1       0       0       0       0       0       0
 16655 ;;      Temps:          2       0       0       0       0       0       0
 16656 ;;      Totals:         5       0       0       0       0       0       0
 16657 ;;Total ram usage:        5 bytes
 16658 ;; Hardware stack levels used:    1
 16659 ;; Hardware stack levels required when called:    3
 16660 ;; This function calls:
 16661 ;;		Nothing
 16662 ;; This function is called by:
 16663 ;;		_AdcConvert
 16664 ;; This function uses a non-reentrant model
 16665 ;;
 16666                           
 16667                           	psect	text109
 16668  003512                     __ptext109:
 16669                           	opt stack 0
 16670  003512                     _ADC_GetConversion:
 16671                           	opt stack 26
 16672                           
 16673                           ;incstack = 0
 16674                           ;ADC_GetConversion@channel stored from wreg
 16675  003512  6E1C               	movwf	ADC_GetConversion@channel,c
 16676                           
 16677                           ;adc.c: 109: ADCON0bits.CHS = channel;
 16678  003514  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 16679  003518  461A               	rlncf	??_ADC_GetConversion,f,c
 16680  00351A  461A               	rlncf	??_ADC_GetConversion,f,c
 16681  00351C  50C2               	movf	4034,w,c	;volatile
 16682  00351E  181A               	xorwf	??_ADC_GetConversion,w,c
 16683  003520  0B83               	andlw	-125
 16684  003522  181A               	xorwf	??_ADC_GetConversion,w,c
 16685  003524  6EC2               	movwf	4034,c	;volatile
 16686                           
 16687                           ;adc.c: 112: ADCON0bits.ADON = 1;
 16688  003526  80C2               	bsf	4034,0,c	;volatile
 16689                           
 16690                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 16691  003528  82C2               	bsf	4034,1,c	;volatile
 16692  00352A                     
 16693                           ;adc.c: 119: {
 16694  00352A  B2C2               	btfsc	4034,1,c	;volatile
 16695  00352C  D7FE               	goto	l1055
 16696                           
 16697                           ;adc.c: 120: }
 16698                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 16699  00352E  50C4               	movf	4036,w,c	;volatile
 16700  003530  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 16701  003532  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 16702  003534  50C3               	movf	4035,w,c	;volatile
 16703  003536  241A               	addwf	??_ADC_GetConversion,w,c
 16704  003538  6E18               	movwf	?_ADC_GetConversion,c
 16705  00353A  0E00               	movlw	0
 16706  00353C  201B               	addwfc	??_ADC_GetConversion+1,w,c
 16707  00353E  6E19               	movwf	?_ADC_GetConversion+1,c
 16708  003540  0012               	return	
 16709  003542                     __end_of_ADC_GetConversion:
 16710                           	opt stack 0
 16711                           tosu	equ	0xFFF
 16712                           tosh	equ	0xFFE
 16713                           tosl	equ	0xFFD
 16714                           pclath	equ	0xFFA
 16715                           tblptru	equ	0xFF8
 16716                           tblptrh	equ	0xFF7
 16717                           tblptrl	equ	0xFF6
 16718                           tablat	equ	0xFF5
 16719                           prodh	equ	0xFF4
 16720                           prodl	equ	0xFF3
 16721                           intcon	equ	0xFF2
 16722                           intcon2	equ	0xFF1
 16723                           postinc0	equ	0xFEE
 16724                           wreg	equ	0xFE8
 16725                           indf1	equ	0xFE7
 16726                           postdec1	equ	0xFE5
 16727                           fsr1h	equ	0xFE2
 16728                           fsr1l	equ	0xFE1
 16729                           indf2	equ	0xFDF
 16730                           postinc2	equ	0xFDE
 16731                           postdec2	equ	0xFDD
 16732                           fsr2h	equ	0xFDA
 16733                           fsr2l	equ	0xFD9
 16734                           status	equ	0xFD8
 16735                           
 16736 ;; *************** function _INTERRUPT_InterruptManager *****************
 16737 ;; Defined at:
 16738 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 16739 ;; Parameters:    Size  Location     Type
 16740 ;;		None
 16741 ;; Auto vars:     Size  Location     Type
 16742 ;;		None
 16743 ;; Return value:  Size  Location     Type
 16744 ;;                  1    wreg      void 
 16745 ;; Registers used:
 16746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16747 ;; Tracked objects:
 16748 ;;		On entry : 0/0
 16749 ;;		On exit  : 0/0
 16750 ;;		Unchanged: 0/0
 16751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16752 ;;      Params:         0       0       0       0       0       0       0
 16753 ;;      Locals:         0       0       0       0       0       0       0
 16754 ;;      Temps:         18       0       0       0       0       0       0
 16755 ;;      Totals:        18       0       0       0       0       0       0
 16756 ;;Total ram usage:       18 bytes
 16757 ;; Hardware stack levels used:    1
 16758 ;; Hardware stack levels required when called:    2
 16759 ;; This function calls:
 16760 ;;		_EUSART1_Receive_ISR
 16761 ;;		_EUSART1_Transmit_ISR
 16762 ;;		_MEMORY_ISR
 16763 ;;		_PIN_MANAGER_IOC
 16764 ;;		_TMR0_ISR
 16765 ;; This function is called by:
 16766 ;;		Interrupt level 2
 16767 ;; This function uses a non-reentrant model
 16768 ;;
 16769                           
 16770                           	psect	intcode
 16771  000008                     __pintcode:
 16772                           	opt stack 0
 16773  000008                     _INTERRUPT_InterruptManager:
 16774                           	opt stack 21
 16775                           
 16776                           ;incstack = 0
 16777  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16778  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 16779  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 16780  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 16781  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 16782  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 16783  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 16784  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 16785  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 16786  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 16787  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 16788  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 16789  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 16790  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 16791  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 16792  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 16793  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 16794  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 16795  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 16796                           
 16797                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 16798  000052  B6F2               	btfsc	intcon,3,c	;volatile
 16799  000054  A0F2               	btfss	intcon,0,c	;volatile
 16800  000056  D003               	goto	i2l780
 16801                           
 16802                           ;interrupt_manager.c: 61: {
 16803                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 16804  000058  EC8A  F01C         	call	_PIN_MANAGER_IOC	;wreg free
 16805                           
 16806                           ;interrupt_manager.c: 63: }
 16807  00005C  D019               	goto	i2l789
 16808  00005E                     i2l780:
 16809                           
 16810                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 16811  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 16812  000060  A4F2               	btfss	intcon,2,c	;volatile
 16813  000062  D003               	goto	i2l782
 16814                           
 16815                           ;interrupt_manager.c: 65: {
 16816                           ;interrupt_manager.c: 66: TMR0_ISR();
 16817  000064  EC87  F012         	call	_TMR0_ISR	;wreg free
 16818                           
 16819                           ;interrupt_manager.c: 67: }
 16820  000068  D013               	goto	i2l789
 16821  00006A                     i2l782:
 16822                           
 16823                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 16824  00006A  ACF2               	btfss	intcon,6,c	;volatile
 16825  00006C  D011               	goto	i2l789
 16826                           
 16827                           ;interrupt_manager.c: 69: {
 16828                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 16829  00006E  B8A0               	btfsc	4000,4,c	;volatile
 16830  000070  A8A1               	btfss	4001,4,c	;volatile
 16831  000072  D003               	goto	i2l785
 16832                           
 16833                           ;interrupt_manager.c: 71: {
 16834                           ;interrupt_manager.c: 72: MEMORY_ISR();
 16835  000074  EC8C  F01C         	call	_MEMORY_ISR	;wreg free
 16836                           
 16837                           ;interrupt_manager.c: 73: }
 16838  000078  D00B               	goto	i2l789
 16839  00007A                     i2l785:
 16840                           
 16841                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 16842  00007A  B89D               	btfsc	3997,4,c	;volatile
 16843  00007C  A89E               	btfss	3998,4,c	;volatile
 16844  00007E  D003               	goto	i2l787
 16845                           
 16846                           ;interrupt_manager.c: 75: {
 16847                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 16848  000080  EC9A  F019         	call	_EUSART1_Transmit_ISR	;wreg free
 16849                           
 16850                           ;interrupt_manager.c: 77: }
 16851  000084  D005               	goto	i2l789
 16852  000086                     i2l787:
 16853                           
 16854                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 16855  000086  BA9D               	btfsc	3997,5,c	;volatile
 16856  000088  AA9E               	btfss	3998,5,c	;volatile
 16857  00008A  D002               	goto	i2l789
 16858                           
 16859                           ;interrupt_manager.c: 79: {
 16860                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 16861  00008C  ECA1  F01A         	call	_EUSART1_Receive_ISR	;wreg free
 16862  000090                     i2l789:
 16863                           
 16864                           ;interrupt_manager.c: 87: else
 16865                           ;interrupt_manager.c: 88: {
 16866                           
 16867                           ;interrupt_manager.c: 85: }
 16868                           ;interrupt_manager.c: 86: }
 16869                           
 16870                           ;interrupt_manager.c: 82: else
 16871                           ;interrupt_manager.c: 83: {
 16872  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 16873  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 16874  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 16875  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 16876  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 16877  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 16878  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 16879  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 16880  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 16881  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 16882  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 16883  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 16884  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 16885  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 16886  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 16887  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 16888  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 16889  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 16890  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16891  0000DA  0011               	retfie		f
 16892  0000DC                     __end_of_INTERRUPT_InterruptManager:
 16893                           	opt stack 0
 16894                           tosu	equ	0xFFF
 16895                           tosh	equ	0xFFE
 16896                           tosl	equ	0xFFD
 16897                           pclatu	equ	0xFFB
 16898                           pclath	equ	0xFFA
 16899                           tblptru	equ	0xFF8
 16900                           tblptrh	equ	0xFF7
 16901                           tblptrl	equ	0xFF6
 16902                           tablat	equ	0xFF5
 16903                           prodh	equ	0xFF4
 16904                           prodl	equ	0xFF3
 16905                           intcon	equ	0xFF2
 16906                           intcon2	equ	0xFF1
 16907                           postinc0	equ	0xFEE
 16908                           fsr0h	equ	0xFEA
 16909                           fsr0l	equ	0xFE9
 16910                           wreg	equ	0xFE8
 16911                           indf1	equ	0xFE7
 16912                           postdec1	equ	0xFE5
 16913                           fsr1h	equ	0xFE2
 16914                           fsr1l	equ	0xFE1
 16915                           indf2	equ	0xFDF
 16916                           postinc2	equ	0xFDE
 16917                           postdec2	equ	0xFDD
 16918                           fsr2h	equ	0xFDA
 16919                           fsr2l	equ	0xFD9
 16920                           status	equ	0xFD8
 16921                           
 16922 ;; *************** function _TMR0_ISR *****************
 16923 ;; Defined at:
 16924 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 16925 ;; Parameters:    Size  Location     Type
 16926 ;;		None
 16927 ;; Auto vars:     Size  Location     Type
 16928 ;;		None
 16929 ;; Return value:  Size  Location     Type
 16930 ;;                  1    wreg      void 
 16931 ;; Registers used:
 16932 ;;		wreg, status,2, status,0, cstack
 16933 ;; Tracked objects:
 16934 ;;		On entry : 0/0
 16935 ;;		On exit  : 0/0
 16936 ;;		Unchanged: 0/0
 16937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16938 ;;      Params:         0       0       0       0       0       0       0
 16939 ;;      Locals:         0       0       0       0       0       0       0
 16940 ;;      Temps:          0       0       0       0       0       0       0
 16941 ;;      Totals:         0       0       0       0       0       0       0
 16942 ;;Total ram usage:        0 bytes
 16943 ;; Hardware stack levels used:    1
 16944 ;; Hardware stack levels required when called:    1
 16945 ;; This function calls:
 16946 ;;		___lwmod
 16947 ;; This function is called by:
 16948 ;;		_INTERRUPT_InterruptManager
 16949 ;; This function uses a non-reentrant model
 16950 ;;
 16951                           
 16952                           	psect	text111
 16953  00250E                     __ptext111:
 16954                           	opt stack 0
 16955  00250E                     _TMR0_ISR:
 16956                           	opt stack 21
 16957                           
 16958                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 16959                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 16960                           
 16961                           ;incstack = 0
 16962  00250E  94F2               	bcf	intcon,2,c	;volatile
 16963                           
 16964                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 16965  002510  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 16966  002512  6ED7               	movwf	4055,c	;volatile
 16967                           
 16968                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 16969  002514  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 16970                           
 16971                           ;tmr0.c: 146: CountCallBack ++;
 16972  002518  4A35               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 16973  00251A  2A36               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 16974                           
 16975                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 16976  00251C  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16977  002520  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16978  002524  0E00               	movlw	0
 16979  002526  6E04               	movwf	___lwmod@divisor+1,c
 16980  002528  0E14               	movlw	20
 16981  00252A  6E03               	movwf	___lwmod@divisor,c
 16982  00252C  ECE5  F018         	call	___lwmod	;wreg free
 16983  002530  5001               	movf	?___lwmod,w,c
 16984  002532  1002               	iorwf	?___lwmod+1,w,c
 16985  002534  A4D8               	btfss	status,2,c
 16986  002536  D003               	goto	i2l1011
 16987                           
 16988                           ;tmr0.c: 148: {
 16989                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 16990  002538  0E01               	movlw	1
 16991  00253A  0100               	movlb	0	; () banked
 16992  00253C  6FD6               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
 16993  00253E                     i2l1011:
 16994                           
 16995                           ;tmr0.c: 150: }
 16996                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 16997                           
 16998                           ; BSR set to: 0
 16999  00253E  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 17000  002542  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 17001  002546  0E00               	movlw	0
 17002  002548  6E04               	movwf	___lwmod@divisor+1,c
 17003  00254A  0E32               	movlw	50
 17004  00254C  6E03               	movwf	___lwmod@divisor,c
 17005  00254E  ECE5  F018         	call	___lwmod	;wreg free
 17006  002552  5001               	movf	?___lwmod,w,c
 17007  002554  1002               	iorwf	?___lwmod+1,w,c
 17008  002556  A4D8               	btfss	status,2,c
 17009  002558  D003               	goto	i2l1012
 17010                           
 17011                           ;tmr0.c: 153: {
 17012                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 17013  00255A  0E01               	movlw	1
 17014  00255C  0100               	movlb	0	; () banked
 17015  00255E  6FD5               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
 17016  002560                     i2l1012:
 17017                           
 17018                           ;tmr0.c: 155: }
 17019                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 17020                           
 17021                           ; BSR set to: 0
 17022  002560  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 17023  002564  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 17024  002568  0E01               	movlw	1
 17025  00256A  6E04               	movwf	___lwmod@divisor+1,c
 17026  00256C  0E2C               	movlw	44
 17027  00256E  6E03               	movwf	___lwmod@divisor,c
 17028  002570  ECE5  F018         	call	___lwmod	;wreg free
 17029  002574  5001               	movf	?___lwmod,w,c
 17030  002576  1002               	iorwf	?___lwmod+1,w,c
 17031  002578  A4D8               	btfss	status,2,c
 17032  00257A  D003               	goto	i2l1013
 17033                           
 17034                           ;tmr0.c: 157: {
 17035                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 17036  00257C  0E01               	movlw	1
 17037  00257E  0100               	movlb	0	; () banked
 17038  002580  6FD4               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
 17039  002582                     i2l1013:
 17040                           
 17041                           ;tmr0.c: 159: }
 17042                           ;tmr0.c: 161: CountCallBack %= 300;
 17043                           
 17044                           ; BSR set to: 0
 17045  002582  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 17046  002586  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 17047  00258A  0E01               	movlw	1
 17048  00258C  6E04               	movwf	___lwmod@divisor+1,c
 17049  00258E  0E2C               	movlw	44
 17050  002590  6E03               	movwf	___lwmod@divisor,c
 17051  002592  ECE5  F018         	call	___lwmod	;wreg free
 17052  002596  C001  F035         	movff	?___lwmod,TMR0_ISR@CountCallBack	;volatile
 17053  00259A  C002  F036         	movff	?___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 17054  00259E  0012               	return		;funcret
 17055  0025A0                     __end_of_TMR0_ISR:
 17056                           	opt stack 0
 17057                           tosu	equ	0xFFF
 17058                           tosh	equ	0xFFE
 17059                           tosl	equ	0xFFD
 17060                           pclatu	equ	0xFFB
 17061                           pclath	equ	0xFFA
 17062                           tblptru	equ	0xFF8
 17063                           tblptrh	equ	0xFF7
 17064                           tblptrl	equ	0xFF6
 17065                           tablat	equ	0xFF5
 17066                           prodh	equ	0xFF4
 17067                           prodl	equ	0xFF3
 17068                           intcon	equ	0xFF2
 17069                           intcon2	equ	0xFF1
 17070                           postinc0	equ	0xFEE
 17071                           fsr0h	equ	0xFEA
 17072                           fsr0l	equ	0xFE9
 17073                           wreg	equ	0xFE8
 17074                           indf1	equ	0xFE7
 17075                           postdec1	equ	0xFE5
 17076                           fsr1h	equ	0xFE2
 17077                           fsr1l	equ	0xFE1
 17078                           indf2	equ	0xFDF
 17079                           postinc2	equ	0xFDE
 17080                           postdec2	equ	0xFDD
 17081                           fsr2h	equ	0xFDA
 17082                           fsr2l	equ	0xFD9
 17083                           status	equ	0xFD8
 17084                           
 17085 ;; *************** function ___lwmod *****************
 17086 ;; Defined at:
 17087 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 17088 ;; Parameters:    Size  Location     Type
 17089 ;;  dividend        2    0[COMRAM] unsigned int 
 17090 ;;  divisor         2    2[COMRAM] unsigned int 
 17091 ;; Auto vars:     Size  Location     Type
 17092 ;;  counter         1    4[COMRAM] unsigned char 
 17093 ;; Return value:  Size  Location     Type
 17094 ;;                  2    0[COMRAM] unsigned int 
 17095 ;; Registers used:
 17096 ;;		wreg, status,2, status,0
 17097 ;; Tracked objects:
 17098 ;;		On entry : 0/0
 17099 ;;		On exit  : 0/0
 17100 ;;		Unchanged: 0/0
 17101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17102 ;;      Params:         4       0       0       0       0       0       0
 17103 ;;      Locals:         1       0       0       0       0       0       0
 17104 ;;      Temps:          0       0       0       0       0       0       0
 17105 ;;      Totals:         5       0       0       0       0       0       0
 17106 ;;Total ram usage:        5 bytes
 17107 ;; Hardware stack levels used:    1
 17108 ;; This function calls:
 17109 ;;		Nothing
 17110 ;; This function is called by:
 17111 ;;		_TMR0_ISR
 17112 ;;		_segmentCounter
 17113 ;; This function uses a non-reentrant model
 17114 ;;
 17115                           
 17116                           	psect	text112
 17117  0031CA                     __ptext112:
 17118                           	opt stack 0
 17119  0031CA                     ___lwmod:
 17120                           	opt stack 21
 17121                           
 17122                           ;incstack = 0
 17123  0031CA  5003               	movf	___lwmod@divisor,w,c
 17124  0031CC  1004               	iorwf	___lwmod@divisor+1,w,c
 17125  0031CE  B4D8               	btfsc	status,2,c
 17126  0031D0  D018               	goto	i2l1864
 17127  0031D2  0E01               	movlw	1
 17128  0031D4  6E05               	movwf	___lwmod@counter,c
 17129  0031D6  D004               	goto	i2l1859
 17130  0031D8  90D8               	bcf	status,0,c
 17131  0031DA  3603               	rlcf	___lwmod@divisor,f,c
 17132  0031DC  3604               	rlcf	___lwmod@divisor+1,f,c
 17133  0031DE  2A05               	incf	___lwmod@counter,f,c
 17134  0031E0                     i2l1859:
 17135  0031E0  AE04               	btfss	___lwmod@divisor+1,7,c
 17136  0031E2  D7FA               	goto	i2l1860
 17137  0031E4                     i2u507_40:
 17138  0031E4  5003               	movf	___lwmod@divisor,w,c
 17139  0031E6  5C01               	subwf	___lwmod@dividend,w,c
 17140  0031E8  5004               	movf	___lwmod@divisor+1,w,c
 17141  0031EA  5802               	subwfb	___lwmod@dividend+1,w,c
 17142  0031EC  A0D8               	btfss	status,0,c
 17143  0031EE  D004               	goto	i2l1863
 17144  0031F0  5003               	movf	___lwmod@divisor,w,c
 17145  0031F2  5E01               	subwf	___lwmod@dividend,f,c
 17146  0031F4  5004               	movf	___lwmod@divisor+1,w,c
 17147  0031F6  5A02               	subwfb	___lwmod@dividend+1,f,c
 17148  0031F8                     i2l1863:
 17149  0031F8  90D8               	bcf	status,0,c
 17150  0031FA  3204               	rrcf	___lwmod@divisor+1,f,c
 17151  0031FC  3203               	rrcf	___lwmod@divisor,f,c
 17152  0031FE  2E05               	decfsz	___lwmod@counter,f,c
 17153  003200  D7F1               	goto	i2u507_40
 17154  003202                     i2l1864:
 17155  003202  C001  F001         	movff	___lwmod@dividend,?___lwmod
 17156  003206  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 17157  00320A  0012               	return		;funcret
 17158  00320C                     __end_of___lwmod:
 17159                           	opt stack 0
 17160                           tosu	equ	0xFFF
 17161                           tosh	equ	0xFFE
 17162                           tosl	equ	0xFFD
 17163                           pclatu	equ	0xFFB
 17164                           pclath	equ	0xFFA
 17165                           tblptru	equ	0xFF8
 17166                           tblptrh	equ	0xFF7
 17167                           tblptrl	equ	0xFF6
 17168                           tablat	equ	0xFF5
 17169                           prodh	equ	0xFF4
 17170                           prodl	equ	0xFF3
 17171                           intcon	equ	0xFF2
 17172                           intcon2	equ	0xFF1
 17173                           postinc0	equ	0xFEE
 17174                           fsr0h	equ	0xFEA
 17175                           fsr0l	equ	0xFE9
 17176                           wreg	equ	0xFE8
 17177                           indf1	equ	0xFE7
 17178                           postdec1	equ	0xFE5
 17179                           fsr1h	equ	0xFE2
 17180                           fsr1l	equ	0xFE1
 17181                           indf2	equ	0xFDF
 17182                           postinc2	equ	0xFDE
 17183                           postdec2	equ	0xFDD
 17184                           fsr2h	equ	0xFDA
 17185                           fsr2l	equ	0xFD9
 17186                           status	equ	0xFD8
 17187                           
 17188 ;; *************** function _PIN_MANAGER_IOC *****************
 17189 ;; Defined at:
 17190 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 17191 ;; Parameters:    Size  Location     Type
 17192 ;;		None
 17193 ;; Auto vars:     Size  Location     Type
 17194 ;;		None
 17195 ;; Return value:  Size  Location     Type
 17196 ;;                  1    wreg      void 
 17197 ;; Registers used:
 17198 ;;		None
 17199 ;; Tracked objects:
 17200 ;;		On entry : 0/0
 17201 ;;		On exit  : 0/0
 17202 ;;		Unchanged: 0/0
 17203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17204 ;;      Params:         0       0       0       0       0       0       0
 17205 ;;      Locals:         0       0       0       0       0       0       0
 17206 ;;      Temps:          0       0       0       0       0       0       0
 17207 ;;      Totals:         0       0       0       0       0       0       0
 17208 ;;Total ram usage:        0 bytes
 17209 ;; Hardware stack levels used:    1
 17210 ;; This function calls:
 17211 ;;		Nothing
 17212 ;; This function is called by:
 17213 ;;		_INTERRUPT_InterruptManager
 17214 ;; This function uses a non-reentrant model
 17215 ;;
 17216                           
 17217                           	psect	text113
 17218  003914                     __ptext113:
 17219                           	opt stack 0
 17220  003914                     _PIN_MANAGER_IOC:
 17221                           	opt stack 22
 17222                           
 17223                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 17224                           
 17225                           ;incstack = 0
 17226  003914  90F2               	bcf	intcon,0,c	;volatile
 17227  003916  0012               	return		;funcret
 17228  003918                     __end_of_PIN_MANAGER_IOC:
 17229                           	opt stack 0
 17230                           tosu	equ	0xFFF
 17231                           tosh	equ	0xFFE
 17232                           tosl	equ	0xFFD
 17233                           pclatu	equ	0xFFB
 17234                           pclath	equ	0xFFA
 17235                           tblptru	equ	0xFF8
 17236                           tblptrh	equ	0xFF7
 17237                           tblptrl	equ	0xFF6
 17238                           tablat	equ	0xFF5
 17239                           prodh	equ	0xFF4
 17240                           prodl	equ	0xFF3
 17241                           intcon	equ	0xFF2
 17242                           intcon2	equ	0xFF1
 17243                           postinc0	equ	0xFEE
 17244                           fsr0h	equ	0xFEA
 17245                           fsr0l	equ	0xFE9
 17246                           wreg	equ	0xFE8
 17247                           indf1	equ	0xFE7
 17248                           postdec1	equ	0xFE5
 17249                           fsr1h	equ	0xFE2
 17250                           fsr1l	equ	0xFE1
 17251                           indf2	equ	0xFDF
 17252                           postinc2	equ	0xFDE
 17253                           postdec2	equ	0xFDD
 17254                           fsr2h	equ	0xFDA
 17255                           fsr2l	equ	0xFD9
 17256                           status	equ	0xFD8
 17257                           
 17258 ;; *************** function _MEMORY_ISR *****************
 17259 ;; Defined at:
 17260 ;;		line 206 in file "mcc_generated_files/memory.c"
 17261 ;; Parameters:    Size  Location     Type
 17262 ;;		None
 17263 ;; Auto vars:     Size  Location     Type
 17264 ;;		None
 17265 ;; Return value:  Size  Location     Type
 17266 ;;                  1    wreg      void 
 17267 ;; Registers used:
 17268 ;;		None
 17269 ;; Tracked objects:
 17270 ;;		On entry : 0/0
 17271 ;;		On exit  : 0/0
 17272 ;;		Unchanged: 0/0
 17273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17274 ;;      Params:         0       0       0       0       0       0       0
 17275 ;;      Locals:         0       0       0       0       0       0       0
 17276 ;;      Temps:          0       0       0       0       0       0       0
 17277 ;;      Totals:         0       0       0       0       0       0       0
 17278 ;;Total ram usage:        0 bytes
 17279 ;; Hardware stack levels used:    1
 17280 ;; This function calls:
 17281 ;;		Nothing
 17282 ;; This function is called by:
 17283 ;;		_INTERRUPT_InterruptManager
 17284 ;; This function uses a non-reentrant model
 17285 ;;
 17286                           
 17287                           	psect	text114
 17288  003918                     __ptext114:
 17289                           	opt stack 0
 17290  003918                     _MEMORY_ISR:
 17291                           	opt stack 22
 17292                           
 17293                           ;memory.c: 209: PIR2bits.EEIF = 0;
 17294                           
 17295                           ;incstack = 0
 17296  003918  98A1               	bcf	4001,4,c	;volatile
 17297  00391A  0012               	return		;funcret
 17298  00391C                     __end_of_MEMORY_ISR:
 17299                           	opt stack 0
 17300                           tosu	equ	0xFFF
 17301                           tosh	equ	0xFFE
 17302                           tosl	equ	0xFFD
 17303                           pclatu	equ	0xFFB
 17304                           pclath	equ	0xFFA
 17305                           tblptru	equ	0xFF8
 17306                           tblptrh	equ	0xFF7
 17307                           tblptrl	equ	0xFF6
 17308                           tablat	equ	0xFF5
 17309                           prodh	equ	0xFF4
 17310                           prodl	equ	0xFF3
 17311                           intcon	equ	0xFF2
 17312                           intcon2	equ	0xFF1
 17313                           postinc0	equ	0xFEE
 17314                           fsr0h	equ	0xFEA
 17315                           fsr0l	equ	0xFE9
 17316                           wreg	equ	0xFE8
 17317                           indf1	equ	0xFE7
 17318                           postdec1	equ	0xFE5
 17319                           fsr1h	equ	0xFE2
 17320                           fsr1l	equ	0xFE1
 17321                           indf2	equ	0xFDF
 17322                           postinc2	equ	0xFDE
 17323                           postdec2	equ	0xFDD
 17324                           fsr2h	equ	0xFDA
 17325                           fsr2l	equ	0xFD9
 17326                           status	equ	0xFD8
 17327                           
 17328 ;; *************** function _EUSART1_Transmit_ISR *****************
 17329 ;; Defined at:
 17330 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 17331 ;; Parameters:    Size  Location     Type
 17332 ;;		None
 17333 ;; Auto vars:     Size  Location     Type
 17334 ;;		None
 17335 ;; Return value:  Size  Location     Type
 17336 ;;                  1    wreg      void 
 17337 ;; Registers used:
 17338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17339 ;; Tracked objects:
 17340 ;;		On entry : 0/0
 17341 ;;		On exit  : 0/0
 17342 ;;		Unchanged: 0/0
 17343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17344 ;;      Params:         0       0       0       0       0       0       0
 17345 ;;      Locals:         0       0       0       0       0       0       0
 17346 ;;      Temps:          0       0       0       0       0       0       0
 17347 ;;      Totals:         0       0       0       0       0       0       0
 17348 ;;Total ram usage:        0 bytes
 17349 ;; Hardware stack levels used:    1
 17350 ;; This function calls:
 17351 ;;		Nothing
 17352 ;; This function is called by:
 17353 ;;		_INTERRUPT_InterruptManager
 17354 ;; This function uses a non-reentrant model
 17355 ;;
 17356                           
 17357                           	psect	text115
 17358  003334                     __ptext115:
 17359                           	opt stack 0
 17360  003334                     _EUSART1_Transmit_ISR:
 17361                           	opt stack 22
 17362                           
 17363                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 17364                           
 17365                           ;incstack = 0
 17366  003334  0E46               	movlw	70
 17367  003336  0100               	movlb	0	; () banked
 17368  003338  61FF               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 17369  00333A  D012               	goto	i2l851
 17370                           
 17371                           ; BSR set to: 0
 17372                           ;eusart1.c: 186: {
 17373                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 17374  00333C  5039               	movf	_eusart1TxTail,w,c	;volatile
 17375  00333E  0D01               	mullw	1
 17376  003340  0E00               	movlw	low _eusart1TxBuffer
 17377  003342  24F3               	addwf	prodl,w,c
 17378  003344  6ED9               	movwf	fsr2l,c
 17379  003346  0E01               	movlw	high _eusart1TxBuffer
 17380  003348  20F4               	addwfc	prodh,w,c
 17381  00334A  6EDA               	movwf	fsr2h,c
 17382  00334C  50DF               	movf	indf2,w,c
 17383  00334E  6EAD               	movwf	4013,c	;volatile
 17384                           
 17385                           ; BSR set to: 0
 17386  003350  2A39               	incf	_eusart1TxTail,f,c	;volatile
 17387                           
 17388                           ; BSR set to: 0
 17389                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 17390  003352  0E45               	movlw	69
 17391  003354  6439               	cpfsgt	_eusart1TxTail,c	;volatile
 17392  003356  D002               	goto	i2l852
 17393                           
 17394                           ; BSR set to: 0
 17395                           ;eusart1.c: 189: {
 17396                           ;eusart1.c: 190: eusart1TxTail = 0;
 17397  003358  0E00               	movlw	0
 17398  00335A  6E39               	movwf	_eusart1TxTail,c	;volatile
 17399  00335C                     i2l852:
 17400                           
 17401                           ; BSR set to: 0
 17402                           ;eusart1.c: 191: }
 17403                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 17404                           
 17405                           ; BSR set to: 0
 17406  00335C  2BFF               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 17407                           
 17408                           ;eusart1.c: 193: }
 17409  00335E  0012               	return	
 17410  003360                     i2l851:
 17411                           
 17412                           ; BSR set to: 0
 17413                           ;eusart1.c: 194: else
 17414                           ;eusart1.c: 195: {
 17415                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 17416  003360  989D               	bcf	3997,4,c	;volatile
 17417                           
 17418                           ; BSR set to: 0
 17419                           ;eusart1.c: 197: eusart1TxTail = 0;
 17420  003362  0E00               	movlw	0
 17421  003364  6E39               	movwf	_eusart1TxTail,c	;volatile
 17422                           
 17423                           ;eusart1.c: 198: eusart1TxHead = 0;
 17424  003366  0E00               	movlw	0
 17425  003368  6E3A               	movwf	_eusart1TxHead,c	;volatile
 17426  00336A  0012               	return	
 17427  00336C                     __end_of_EUSART1_Transmit_ISR:
 17428                           	opt stack 0
 17429                           tosu	equ	0xFFF
 17430                           tosh	equ	0xFFE
 17431                           tosl	equ	0xFFD
 17432                           pclatu	equ	0xFFB
 17433                           pclath	equ	0xFFA
 17434                           tblptru	equ	0xFF8
 17435                           tblptrh	equ	0xFF7
 17436                           tblptrl	equ	0xFF6
 17437                           tablat	equ	0xFF5
 17438                           prodh	equ	0xFF4
 17439                           prodl	equ	0xFF3
 17440                           intcon	equ	0xFF2
 17441                           intcon2	equ	0xFF1
 17442                           postinc0	equ	0xFEE
 17443                           fsr0h	equ	0xFEA
 17444                           fsr0l	equ	0xFE9
 17445                           wreg	equ	0xFE8
 17446                           indf1	equ	0xFE7
 17447                           postdec1	equ	0xFE5
 17448                           fsr1h	equ	0xFE2
 17449                           fsr1l	equ	0xFE1
 17450                           indf2	equ	0xFDF
 17451                           postinc2	equ	0xFDE
 17452                           postdec2	equ	0xFDD
 17453                           fsr2h	equ	0xFDA
 17454                           fsr2l	equ	0xFD9
 17455                           status	equ	0xFD8
 17456                           
 17457 ;; *************** function _EUSART1_Receive_ISR *****************
 17458 ;; Defined at:
 17459 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 17460 ;; Parameters:    Size  Location     Type
 17461 ;;		None
 17462 ;; Auto vars:     Size  Location     Type
 17463 ;;		None
 17464 ;; Return value:  Size  Location     Type
 17465 ;;                  1    wreg      void 
 17466 ;; Registers used:
 17467 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17468 ;; Tracked objects:
 17469 ;;		On entry : 0/0
 17470 ;;		On exit  : 0/0
 17471 ;;		Unchanged: 0/0
 17472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17473 ;;      Params:         0       0       0       0       0       0       0
 17474 ;;      Locals:         0       0       0       0       0       0       0
 17475 ;;      Temps:          0       0       0       0       0       0       0
 17476 ;;      Totals:         0       0       0       0       0       0       0
 17477 ;;Total ram usage:        0 bytes
 17478 ;; Hardware stack levels used:    1
 17479 ;; This function calls:
 17480 ;;		Nothing
 17481 ;; This function is called by:
 17482 ;;		_INTERRUPT_InterruptManager
 17483 ;; This function uses a non-reentrant model
 17484 ;;
 17485                           
 17486                           	psect	text116
 17487  003542                     __ptext116:
 17488                           	opt stack 0
 17489  003542                     _EUSART1_Receive_ISR:
 17490                           	opt stack 22
 17491                           
 17492                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 17493                           
 17494                           ; BSR set to: 0
 17495                           ;incstack = 0
 17496  003542  A2AB               	btfss	4011,1,c	;volatile
 17497  003544  D002               	goto	i2l857
 17498                           
 17499                           ;eusart1.c: 206: {
 17500                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 17501  003546  98AB               	bcf	4011,4,c	;volatile
 17502                           
 17503                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 17504  003548  88AB               	bsf	4011,4,c	;volatile
 17505  00354A                     i2l857:
 17506                           
 17507                           ;eusart1.c: 210: }
 17508                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 17509  00354A  5038               	movf	_eusart1RxHead,w,c	;volatile
 17510  00354C  0D01               	mullw	1
 17511  00354E  0E46               	movlw	low _eusart1RxBuffer
 17512  003550  24F3               	addwf	prodl,w,c
 17513  003552  6ED9               	movwf	fsr2l,c
 17514  003554  0E01               	movlw	high _eusart1RxBuffer
 17515  003556  20F4               	addwfc	prodh,w,c
 17516  003558  6EDA               	movwf	fsr2h,c
 17517  00355A  CFAE FFDF          	movff	4014,indf2	;volatile
 17518  00355E  2A38               	incf	_eusart1RxHead,f,c	;volatile
 17519                           
 17520                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 17521  003560  0E27               	movlw	39
 17522  003562  6438               	cpfsgt	_eusart1RxHead,c	;volatile
 17523  003564  D002               	goto	i2l858
 17524                           
 17525                           ;eusart1.c: 217: {
 17526                           ;eusart1.c: 218: eusart1RxHead = 0;
 17527  003566  0E00               	movlw	0
 17528  003568  6E38               	movwf	_eusart1RxHead,c	;volatile
 17529  00356A                     i2l858:
 17530                           
 17531                           ;eusart1.c: 219: }
 17532                           ;eusart1.c: 220: eusart1RxCount++;
 17533  00356A  0100               	movlb	0	; () banked
 17534  00356C  2BD2               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 17535                           
 17536                           ; BSR set to: 0
 17537  00356E  0012               	return		;funcret
 17538  003570                     __end_of_EUSART1_Receive_ISR:
 17539                           	opt stack 0
 17540                           tosu	equ	0xFFF
 17541                           tosh	equ	0xFFE
 17542                           tosl	equ	0xFFD
 17543                           pclatu	equ	0xFFB
 17544                           pclath	equ	0xFFA
 17545                           tblptru	equ	0xFF8
 17546                           tblptrh	equ	0xFF7
 17547                           tblptrl	equ	0xFF6
 17548                           tablat	equ	0xFF5
 17549                           prodh	equ	0xFF4
 17550                           prodl	equ	0xFF3
 17551                           intcon	equ	0xFF2
 17552                           intcon2	equ	0xFF1
 17553                           postinc0	equ	0xFEE
 17554                           fsr0h	equ	0xFEA
 17555                           fsr0l	equ	0xFE9
 17556                           wreg	equ	0xFE8
 17557                           indf1	equ	0xFE7
 17558                           postdec1	equ	0xFE5
 17559                           fsr1h	equ	0xFE2
 17560                           fsr1l	equ	0xFE1
 17561                           indf2	equ	0xFDF
 17562                           postinc2	equ	0xFDE
 17563                           postdec2	equ	0xFDD
 17564                           fsr2h	equ	0xFDA
 17565                           fsr2l	equ	0xFD9
 17566                           status	equ	0xFD8
 17567                           tosu	equ	0xFFF
 17568                           tosh	equ	0xFFE
 17569                           tosl	equ	0xFFD
 17570                           pclatu	equ	0xFFB
 17571                           pclath	equ	0xFFA
 17572                           tblptru	equ	0xFF8
 17573                           tblptrh	equ	0xFF7
 17574                           tblptrl	equ	0xFF6
 17575                           tablat	equ	0xFF5
 17576                           prodh	equ	0xFF4
 17577                           prodl	equ	0xFF3
 17578                           intcon	equ	0xFF2
 17579                           intcon2	equ	0xFF1
 17580                           postinc0	equ	0xFEE
 17581                           fsr0h	equ	0xFEA
 17582                           fsr0l	equ	0xFE9
 17583                           wreg	equ	0xFE8
 17584                           indf1	equ	0xFE7
 17585                           postdec1	equ	0xFE5
 17586                           fsr1h	equ	0xFE2
 17587                           fsr1l	equ	0xFE1
 17588                           indf2	equ	0xFDF
 17589                           postinc2	equ	0xFDE
 17590                           postdec2	equ	0xFDD
 17591                           fsr2h	equ	0xFDA
 17592                           fsr2l	equ	0xFD9
 17593                           status	equ	0xFD8
 17594                           
 17595                           	psect	text117
 17596  000000                     __ptext117:
 17597                           	opt stack 0
 17598                           tosu	equ	0xFFF
 17599                           tosh	equ	0xFFE
 17600                           tosl	equ	0xFFD
 17601                           pclatu	equ	0xFFB
 17602                           pclath	equ	0xFFA
 17603                           tblptru	equ	0xFF8
 17604                           tblptrh	equ	0xFF7
 17605                           tblptrl	equ	0xFF6
 17606                           tablat	equ	0xFF5
 17607                           prodh	equ	0xFF4
 17608                           prodl	equ	0xFF3
 17609                           intcon	equ	0xFF2
 17610                           intcon2	equ	0xFF1
 17611                           postinc0	equ	0xFEE
 17612                           fsr0h	equ	0xFEA
 17613                           fsr0l	equ	0xFE9
 17614                           wreg	equ	0xFE8
 17615                           indf1	equ	0xFE7
 17616                           postdec1	equ	0xFE5
 17617                           fsr1h	equ	0xFE2
 17618                           fsr1l	equ	0xFE1
 17619                           indf2	equ	0xFDF
 17620                           postinc2	equ	0xFDE
 17621                           postdec2	equ	0xFDD
 17622                           fsr2h	equ	0xFDA
 17623                           fsr2l	equ	0xFD9
 17624                           status	equ	0xFD8
 17625                           
 17626                           	psect	rparam
 17627  0000                     tosu	equ	0xFFF
 17628                           tosh	equ	0xFFE
 17629                           tosl	equ	0xFFD
 17630                           pclatu	equ	0xFFB
 17631                           pclath	equ	0xFFA
 17632                           tblptru	equ	0xFF8
 17633                           tblptrh	equ	0xFF7
 17634                           tblptrl	equ	0xFF6
 17635                           tablat	equ	0xFF5
 17636                           prodh	equ	0xFF4
 17637                           prodl	equ	0xFF3
 17638                           intcon	equ	0xFF2
 17639                           intcon2	equ	0xFF1
 17640                           postinc0	equ	0xFEE
 17641                           fsr0h	equ	0xFEA
 17642                           fsr0l	equ	0xFE9
 17643                           wreg	equ	0xFE8
 17644                           indf1	equ	0xFE7
 17645                           postdec1	equ	0xFE5
 17646                           fsr1h	equ	0xFE2
 17647                           fsr1l	equ	0xFE1
 17648                           indf2	equ	0xFDF
 17649                           postinc2	equ	0xFDE
 17650                           postdec2	equ	0xFDD
 17651                           fsr2h	equ	0xFDA
 17652                           fsr2l	equ	0xFD9
 17653                           status	equ	0xFD8
 17654                           
 17655                           	psect	temp
 17656  000048                     btemp:
 17657                           	opt stack 0
 17658  000048                     	ds	1
 17659  0000                     int$flags	set	btemp
 17660  0000                     wtemp6	set	btemp+1
 17661                           tosu	equ	0xFFF
 17662                           tosh	equ	0xFFE
 17663                           tosl	equ	0xFFD
 17664                           pclatu	equ	0xFFB
 17665                           pclath	equ	0xFFA
 17666                           tblptru	equ	0xFF8
 17667                           tblptrh	equ	0xFF7
 17668                           tblptrl	equ	0xFF6
 17669                           tablat	equ	0xFF5
 17670                           prodh	equ	0xFF4
 17671                           prodl	equ	0xFF3
 17672                           intcon	equ	0xFF2
 17673                           intcon2	equ	0xFF1
 17674                           postinc0	equ	0xFEE
 17675                           fsr0h	equ	0xFEA
 17676                           fsr0l	equ	0xFE9
 17677                           wreg	equ	0xFE8
 17678                           indf1	equ	0xFE7
 17679                           postdec1	equ	0xFE5
 17680                           fsr1h	equ	0xFE2
 17681                           fsr1l	equ	0xFE1
 17682                           indf2	equ	0xFDF
 17683                           postinc2	equ	0xFDE
 17684                           postdec2	equ	0xFDD
 17685                           fsr2h	equ	0xFDA
 17686                           fsr2l	equ	0xFD9
 17687                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    168
    Data        20
    BSS         254
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160     96     160
    BANK1           256     10     204
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    UpdateTxFreq@data	PTR unsigned char  size(2) Largest target is 0

    PLLUartInitialize@data	PTR unsigned char  size(2) Largest target is 0

    SetConversionResultFormat@data	PTR unsigned char  size(2) Largest target is 0

    SetAdcOperationMode@data	PTR unsigned char  size(2) Largest target is 0

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 9
		 -> GetIntFromUartData@dataRegArr(BANK0[9]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[9]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK0[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[9]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK0[20]), 

    SetCpldFwVersion@data	PTR unsigned char  size(2) Largest target is 0

    SetMcuFwVersion@data	PTR unsigned char  size(2) Largest target is 0

    Make32bitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    ZeroBitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[9]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK0[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[9]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK0[20]), 

    crc8@dataArray	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK0[20]), 

    GroupDAC@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 128
		 -> FlashTest@buff(BANK0[128]), sampleArray(BANK1[64]), 

    UpdateRxFreq@data	PTR unsigned char  size(2) Largest target is 0

    DacSetValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    WriteUartMessage@dataBuf	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), 

    SetChannelMode@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _GroupSynthesizers->_UpdateTxFreq
    _UpdateTxFreq->_SWSPI_send_word
    _UpdateRxFreq->_SWSPI_send_word
    _GroupStatusAndVersion->_GetCpldFwVersion
    _SetMcuFwVersion->_SendAckMessage
    _SetCpldFwVersion->_SendAckMessage
    _EepromWrite->_DATAEE_WriteByte
    _GetMcuRunTime->___lldiv
    _GetMcuFwVersion->_ZeroArray
    _GetCpldFwVersion->_ZeroArray
    _EepromRead->_DATAEE_ReadByte
    _GroupFlashMemory->_FlashReadCondition
    _FlashReadUart->_SendAckMessage
    _FlashReadCondition->_ZeroArray
    _FlashEreaseMem->_SendAckMessage
    _GroupDAC->_DacSetValue
    _DacSetValue->_SWSPI_send_word
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _testLeds->_SendAckMessage
    _ResetMcu->_SendAckMessage
    _ResetCpld->_SendAckMessage
    _SetConversionResultFormat->_SendAckMessage
    _SetChannelMode->_SendAckMessage
    _SetAdcOperationMode->_SendAckMessage
    _keepAliveSignalUart->_SendAckMessage
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendSystemStartAck->_SendAckMessage
    _SendAckMessage->_ZeroArray
    _ZeroArray->_memset
    _WriteUartMessage->_EUSART1_Write
    _InitSystemApplicationManagers->_PLLInitialize
    _PLLInitialize->_SWSPI_send_word
    _DacInit->_SWSPI_send_word
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _SWSPI_Synth_send_bits->_Make32bitsArray
    _SWSPI_Synth_send_bits->_ZeroBitsArray
    _ZeroBitsArray->_memset
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    _CheckFlashPrecentage->___ftdiv
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _readUartMessage->_GroupAdc
    _readUartMessage->_GroupControlMcu
    _readUartMessage->_GroupDAC
    _readUartMessage->_GroupFlashMemory
    _readUartMessage->_GroupStatusAndVersion
    _readUartMessage->_GroupSynthesizers
    _GroupFlashMemory->_FlashReadUart
    _GetIntFromUartData->_strtol
    _InitSystemApplicationManagers->_PLLInitialize
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_readUartMessage
    _readUartMessage->_GroupFlashMemory

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  317783
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
                 _SendSystemStartAck
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                _keepAliveSignalUart
                    _readUartMessage
 ---------------------------------------------------------------------------------
 (1) _readUartMessage                                      7     7      0  167004
                                              3 BANK1      7     7      0
                       _EUSART1_Read
                           _GroupAdc *
                    _GroupControlMcu *
                           _GroupDAC *
                   _GroupFlashMemory *
              _GroupStatusAndVersion *
                  _GroupSynthesizers *
                _InitRxMessageParams
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    2359
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupSynthesizers                                    3     1      2   36836
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                  _PLLUartInitialize
                       _UpdateRxFreq
                       _UpdateTxFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateTxFreq                                         2     0      2   12363
                                             46 COMRAM     2     0      2
                    _SWSPI_send_word
             _SwSpi_Set_Synth_Le_Pin
 ---------------------------------------------------------------------------------
 (3) _UpdateRxFreq                                         6     4      2   24138
                                             38 BANK0      6     4      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _PLLUartInitialize                                    2     0      2     180
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _GroupStatusAndVersion                                3     1      2   30139
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                   _GetCpldFwVersion
                    _GetMcuFwVersion
                      _GetMcuRunTime
                   _SetCpldFwVersion
                    _SetMcuFwVersion
 ---------------------------------------------------------------------------------
 (3) _SetMcuFwVersion                                      3     1      2    7408
                                             43 COMRAM     3     1      2
                        _EepromWrite
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetCpldFwVersion                                     4     2      2    7408
                                             43 COMRAM     4     2      2
                        _EepromWrite
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _EepromWrite                                          2     1      1     518
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     3     2      1     276
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) _GetMcuRunTime                                       17    17      0    4138
                                             36 COMRAM     2     2      0
                                              0 BANK0     15    15      0
                   _WriteUartMessage
                            ___lldiv
                            ___llmod
                               _crc8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _GetMcuFwVersion                                     12    12      0    5546
                                             35 COMRAM    12    12      0
                         _EepromRead
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _GetCpldFwVersion                                    13    13      0    5546
                                             35 COMRAM    13    13      0
                         _EepromRead
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _EepromRead                                           1     1      0      62
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_ReadByte                                      1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _GroupFlashMemory                                     4     2      2   28958
                                             95 BANK0      1     1      0
                                              0 BANK1      3     1      2
                     _FlashEreaseMem
                 _FlashReadCondition
                      _FlashReadUart
 ---------------------------------------------------------------------------------
 (3) _FlashReadUart                                       97    95      2   13378
                                             43 COMRAM     2     0      2
                                              0 BANK0     95    95      0
                  _FLASH_IsWriteDone
                     _FLASH_ReadByte
                     _SendAckMessage
                   _WriteUartMessage
                          _ZeroArray
                                _abs
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     183
                                             23 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _FLASH_ReadByte                                       4     0      4     543
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _FlashReadCondition                                  13    13      0    6520
                                             35 COMRAM    13    13      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _FlashEreaseMem                                       0     0      0    8998
                     _SendAckMessage
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupDAC                                             3     1      2   24265
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                        _DacSetValue
 ---------------------------------------------------------------------------------
 (3) _DacSetValue                                          4     2      2   24138
                                             46 COMRAM     2     2      0
                                             38 BANK0      2     0      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  20    16      4    5496
                                              6 BANK0     20    16      4
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2543
                                             35 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     456
                                             23 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _GroupControlMcu                                      4     1      3   20016
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                          _ResetCpld
                           _ResetMcu
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0    6707
                                             43 COMRAM     3     3      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetMcu                                             0     0      0    6639
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetCpld                                            0     0      0    6639
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupAdc                                             3     1      2   20373
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                _SetAdcOperationMode
                     _SetChannelMode
          _SetConversionResultFormat
 ---------------------------------------------------------------------------------
 (3) _SetConversionResultFormat                            2     0      2    6729
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetChannelMode                                       2     0      2    6791
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetAdcOperationMode                                  2     0      2    6729
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalUart                                  0     0      0    6639
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     592
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     592
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendSystemStartAck                                   0     0      0    6639
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _SendAckMessage                                       8     7      1    6639
                                             35 COMRAM     8     7      1
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _crc8                                                 9     5      4    1430
                                             23 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ZeroArray                                            4     0      4    2359
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _WriteUartMessage                                     7     3      4    1272
                                             24 COMRAM     7     3      4
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0   24131
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                   _InitSevenSegment
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        4     4      0   12282
                                             46 COMRAM     2     2      0
                                             38 BANK0      2     2      0
                    _SWSPI_send_word
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (3) _SwSpi_Set_CE_Pin                                     2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitSevenSegment                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                1     1      0       1
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              0     0      0   11848
                    _SWSPI_send_word
 ---------------------------------------------------------------------------------
 (4) _SWSPI_send_word                                      9     4      5   11848
                                             37 COMRAM     9     4      5
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5    1055
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_Synth_Le_Pin                               2     1      1     425
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SWSPI_Synth_send_bits                               42    38      4    3353
                                             33 COMRAM     4     0      4
                                              0 BANK0     38    38      0
                    _Make32bitsArray
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
                      _ZeroBitsArray
 ---------------------------------------------------------------------------------
 (6) _ZeroBitsArray                                        2     0      2     798
                                             31 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     677
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (6) _Make32bitsArray                                     10     4      6     344
                                             23 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) _SWSPI_DAC_send_bits                                  3     2      1    2041
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Data_Pin                                       2     1      1     757
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Clk_Pin                                        2     1      1     937
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   13919
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _BlinkErrorLeds                                       6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          12    12      0   98581
                                             81 BANK0     12    12      0
                  _ADC_GetConversion
                   _FlashSampleWrite
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   83041
                                             64 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   26919
                                             46 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   44808
                                             55 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     400
                                             46 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   11219
                                             47 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     528
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     632
                                             24 BANK0     15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     896
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    3367
                                             46 COMRAM     2     2      0
                                             39 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   11976
                                             46 COMRAM     2     2      0
                                             36 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     563
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     273
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3386
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1631
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6    1172
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          18    18      0     919
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0     919
                            ___lwmod
 ---------------------------------------------------------------------------------
 (10) ___lwmod                                             5     1      4     919
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _MEMORY_ISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
           _ZeroBitsArray
             _memset
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
     _InitAdcApplicationMgr
     _InitSevenSegment
     _PLLInitialize
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
           _ZeroBitsArray
             _memset
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SendSystemStartAck
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _keepAliveSignalUart
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _readUartMessage
     _EUSART1_Read
     _GroupAdc *
       _SetAdcOperationMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetChannelMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetConversionResultFormat
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupControlMcu *
       _ResetCpld
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _ResetMcu
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _testLeds
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupDAC *
       _DacSetValue
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupFlashMemory *
       _FlashEreaseMem
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _ZeroArray
           _memset
       _FlashReadCondition
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _FlashReadUart
         _FLASH_IsWriteDone
         _FLASH_ReadByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _abs
         _crc8
     _GroupStatusAndVersion *
       _GetCpldFwVersion
         _EepromRead
           _DATAEE_ReadByte
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _GetMcuFwVersion
         _EepromRead
           _DATAEE_ReadByte
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _GetMcuRunTime
         _WriteUartMessage
           _EUSART1_Write
         ___lldiv
         ___llmod
         _crc8
       _SetCpldFwVersion
         _EepromWrite
           _DATAEE_WriteByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetMcuFwVersion
         _EepromWrite
           _DATAEE_WriteByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupSynthesizers *
       _PLLUartInitialize
       _UpdateRxFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _UpdateTxFreq
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SwSpi_Set_Synth_Le_Pin
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _ZeroArray *
       _memset
     _crc8 *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      A      CC       8       79.7%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0     60      A0       6      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B3       3        0.0%
DATA                 0      0     1B3       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Mar 11 14:17:12 2018

             __size_of_SendSystemStartAck 000C                         ??_GetMcuFwVersion 0024  
              __end_of_keepAliveSignalLed 37F4                              ___altoft@exp 002F  
                _eusart1TxBufferRemaining 00FF                        readUartMessage@idx 01C9  
                         _GroupControlMcu 320C               __end_of_keepAliveSignalUart 38DE  
                           ___altoft@sign 0030                __size_of_FLASH_IsWriteDone 000E  
                                      l50 2958                       __end_of_BlinkOkLeds 2B3A  
                         _SWSPI_send_word 2474                       ___wmul@multiplicand 001A  
                         _timer0ReloadVal 0046                              __CFG_CP0$OFF 000000  
                            __CFG_CP1$OFF 000000                              __CFG_CP2$OFF 000000  
                            __CFG_CP3$OFF 000000                              ___ftadd@exp1 0083  
                            ___ftadd@exp2 0082                               __CFG_LVP$ON 000000  
                            ___ftadd@sign 0081                               ?_MEMORY_ISR 0001  
                                     l112 139E                                       l200 0E12  
                                     l113 12C4                                       l210 3464  
                                     l202 0E4A                                       l211 344E  
                                     l108 3506                                       l300 0860  
                                     l204 0E50                                       l310 094E  
                                     l302 0872                                       l311 0966  
                                     l313 09E4                                       l305 091A  
                                     l315 0A3A                                       l316 0A50  
                                     l308 0932                                       l309 0A56  
                                     l502 0BF0                                       l182 0CFA  
                                     l191 0D5C                                       l183 0D26  
                                     l600 2E18                                       l193 0D7A  
                                     l290 08C2                                       l178 0EAA  
                                     l283 1A86                                       l291 0826  
                                     l195 0D80                                       l187 0D2C  
                                     l179 0CEC                                       l284 1AA4  
                                     l293 0772                                       l197 0DEC  
                                     l189 0D44                                       l198 0DA8  
                                     l711 3794                                       l295 0782  
                                     l616 2E36                                       l608 2E22  
                                     l617 2E40                                       l609 2E2C  
                                     l297 07EE                                       l706 3798  
                                     l298 08B0                                       l627 2EA0  
                                     l707 3790                                       l628 2E64  
                                     l645 2E8C                                       l637 2E78  
                                     l629 2E6E                                       l573 24B0  
                                     l646 2E96                                       l638 2E82  
                                     l583 2D98                                       l591 22B4  
                                     l584 2D64                                       l664 32B0  
                                     l832 3090                                       l585 2D7E  
                                     l593 22E2                                       l577 250A  
                                     l665 3288                                       l586 2D88  
                                     l594 22EE                                       l674 329C  
                                     l666 3292                                       l834 30B6  
                                     l675 32A6                                       l685 32EC  
                                     l845 325C                                       l942 2266  
                                     l598 2E4A                                       l686 32C4  
                                     l846 3280                                       l943 221E  
                                     l599 2E0E                                       l695 32D8  
                                     l687 32CE                                       l847 327E  
                                     l696 32E2                                       l945 223E  
                                     l953 33C6                                       l946 2240  
                            __CFG_CPB$OFF 000000                              __CFG_CPD$OFF 000000  
                    readUartMessage@chRec 01CB                         ??_Make32bitsArray 001E  
                        PLLInitialize@idx 0086                                       _abs 35C4  
                                     _cnt 00FD                                       _exp 0EE0  
                                     _log 1788                                       _pow 160C  
                                     prod 000FF3                                       tosl 000FFD  
                                     wreg 000FE8                     ??_SetAdcOperationMode 002E  
          ?_InitSystemApplicationManagers 0001                __end_of_FlashReadCondition 19B6  
                            ___ftdiv@cntr 0063                              ___ftdiv@sign 0068  
                          ?_ZeroBitsArray 0020                                      l1201 2BD6  
                                    l1202 2B9E                                      l1211 3064  
                                    ?_abs 0018                                      l1204 2BAC  
                                    l1212 303E                                      l1220 3708  
                                    l1205 2BBA                                      l1221 36FA  
                                    l1206 2BC8                                      l1214 3044  
                                    l1055 352A                                      l2103 2658  
                                    l2111 20B0                                      l1215 304A  
                                    l2112 20A4                                      l2120 360C  
                                    l2040 11CA                                      l2024 1112  
                                    l2041 1236                                      l2130 3658  
                                    l2034 118E                                      l2026 112A  
                                    l1170 3224                                      l2107 203C  
                                    l2043 125A                                      l2035 119E  
                                    l1171 3212                                      l1260 2F6C  
                                    l2044 1296                                      l2028 117E  
                                    l2109 2082                                      l2125 372A  
                                    l2037 11B8                                      l1173 3218  
                                    l1181 2CE0                                      l1174 321E  
                                    l1182 2CB2                                      l2135 3748  
                                    l2048 382E                                      l1184 2CB8  
                                    l1192 2FD8                                      l1432 2A8C  
                                    l1353 2802                                      l1185 2CC6  
                                    l1193 2FAE                                      l1433 2AA4  
                                    l1530 2884                                      l1290 2C30  
                                    l1186 2CCC                                      l2155 200A  
                                    l1531 2878                                      l2083 0EFA  
                                    l2147 17A4                                      l1259 2F88  
                                    l1363 25DC                                      l1187 2CDA  
                                    l1195 2FBC                                      l1435 2ACA  
                                    l1700 1542                                      l2156 1F8C  
                                    l1284 2C34                                      l1348 3378  
                                    l1196 2FCA                                      l1436 2ABE  
                                    l2085 0F32                                      l2149 17C4  
                                    l1285 2BF6                                      l1453 2DC4  
                                    l1277 2116                                      l2094 1EA8  
                                    l2086 0F6A                                      l1294 2D1C  
                                    l1454 2DD8                                      l1374 1DC0  
                                    l1358 315E                                      l2095 1E9A  
                                    l2087 0F9A                                      l1287 2BFA  
                                    l2088 10C4                                      l1296 2D5A  
                                    l1288 2BFE                                      l1800 27B2  
                                    l1641 3310                                      l1705 1538  
                                    l2097 1EC2                                      l2089 109A  
                                    l1289 2C02                                      l1801 27C0  
                                    l1714 1576                                      l1706 152E  
                                    l2098 1F3E                                      l1810 2A5A  
                                    l1715 156C                                      l1811 2A68  
                                    l1491 35E2                                      l1660 23EE  
                                    l1724 1CC8                                      l1732 26F0  
                                    l1661 23E4                                      l1717 159A  
                                    l1741 1BFA                                      l1733 2720  
                                    l1726 1CF0                                      l1750 36C2  
                                    l1718 15B6                                      l1742 1C2C  
                                    l1806 2A32                                      l1663 2422  
                                    l1727 1D2E                                      l1719 15E6  
                                    l1743 1C3C                                      l1807 2A26  
                                    l1664 240C                                      l1728 1D54  
                                    l1760 1ADE                                      l1817 2C62  
                                    l1745 1C54                                      l1666 244A  
                                    l1818 2C56                                      l1746 1C64  
                                    l1762 1B56                                      l1667 2440  
                                    l1691 14B2                                      l1739 1BD2  
                                    l1771 1B96                                      l1763 1B46  
                                    l1756 31A0                                      l1695 14DC  
                                    l1768 1B7A                                      l1769 1B6E  
                                    l1873 358A                                      l4418 274C  
                                    l1890 16D2                                      l1874 357A  
                                    l1891 177A                                      l1796 277E  
                                    l1885 1656                                      l1797 2772  
                                    l1886 1646                                      l6046 2B44  
                                    l7102 24D8                                      l1888 166E  
                                    l1889 16F4                                      l6058 2AE6  
                                    l7300 2948                                      l7116 2106  
                                    l6502 357A                                      l7134 2152  
                                    l6520 324A                                      l7314 299E  
                                    ?_exp 0097                                      ?_log 008E  
                                    l7424 0932                                      l7098 24CA  
                                    l7530 27FA                                      l7602 1DB0  
                                    l7348 2216                                      l7428 0956  
                                    l7438 09B6                                      l7614 1E3C  
                                    l6578 2D0C                                      l7570 25CC  
                                    l7546 3370                                      l7580 2604  
                                    l7824 0BE0                                      l7690 109A  
                                    l6794 22AC                                      l7834 0C3A  
                                    l7586 314E                                      l7596 317C  
                                    l7918 12BC                                      ?_pow 00A0  
                      EepromWrite@address 001C                                      _IOCB 000F62  
                                    _LATA 000F89                                      _LATB 000F8A  
                                    _LATC 000F8B                                      _LATD 000F8C  
                                    _LATE 000F8D                                      u6000 3654  
                                    u5130 37E6                                      u6100 2C28  
                                    u6020 35FE                                      u6105 2C1E  
                                    u4290 205C                                      u7020 2244  
                                    u5148 37E8                                      u6125 33D4  
                                    u6126 33D6                                      u6240 111A  
                                    u6401 1484                                      u3930 1B80  
                                    u4298 2060                                      u7210 09B6  
                                    u7035 2262                                      u7036 2264  
                                    u7220 09D4                                      u7125 07F8  
                                    u6430 14A4                                      u6190 2300  
                                    u6270 1154                                      u7070 071E  
                                    u3871 1AC2                                      u8007 2970  
                                    u3960 2680                                      u7080 0720  
                                    u7320 2828                                      u7400 1E3C  
                                    u6601 1BBA                                      u8017 2980  
                                    u7145 0884                                      u6530 154A  
                                    u3890 1AFC                                      u6290 1164  
                                    u8027 2990                                      u6460 14CE  
                                    u6700 2484                                      u7180 0908  
                                    u7340 3396                                      u6621 1BE2  
                                    u8037 2B0C                                      u5910 23D6  
                                    u6391 1470                                      u3895 1AF4  
                                    u8047 2B26                                      u6560 157E  
                                    u3968 2682                                      u7360 2604  
                                    u6801 1CD8                                      u8057 2B6A  
                                    u7610 1A56                                      u6490 150C  
                                    u6730 2504                                      u8067 2B84  
                                    u6660 38AA                                      u7380 317C  
                                    u6661 38A6                                      u8077 138A  
                                    u5950 2454                                      u7470 0F74  
                                    u7480 0F76                                      u7560 16BC  
                                    u6760 2152                                      u6930 1EB4  
                                    u6860 2782                                      u6781 1CB0  
                                    u7590 1A12                                      u7670 0C3A  
                                    u6775 34DE                                      u6776 34E0  
                                    u7840 23C2                                      u7585 19C0  
                                    u6890 2A36                                      u6970 299E  
                                    u7838 0E82                                      u7839 0EA2  
                                    u7997 2960                  ??_SwSpi_Set_Synth_Le_Pin 0019  
                                    _WPUB 000F61                             _EUSART1_Write 3248  
                                    abs@a 0018                                      _crc8 2F5A  
                 ??_InitAdcApplicationMgr 0018                                      _data 00CD  
                                    _main 2A7A                              ___ftpack@arg 0018  
                           ?_EUSART1_Read 0001                              ___ftpack@exp 001B  
                         _TMR0_StartTimer 3910                           __end_of_DacInit 2A14  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf1 000FE7                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 0048                             __CFG_BORV$190 000000  
                                    exp@x 0097                                      log@x 008E  
                       ?_FLASH_WriteBlock 001D                          ?_ClearMcuRunTime 0001  
                                    pow@x 00A0                                      pow@y 00A3  
                                    prodh 000FF4                                      prodl 000FF3  
               GroupStatusAndVersion@data 01C2             __size_of_CheckFlashPrecentage 00AE  
                                    start 00DC                             __CFG_IESO$OFF 000000  
                     __end_of_EepromWrite 3876                        ??_FLASH_WriteBlock 0023  
                           _adcSampleMode 003C                              ___ftmul@cntr 0076  
                            ___param_bank 000000                              ___ftmul@sign 0077  
                          _BlinkErrorLeds 2B3A                              ___fttol@exp1 0086  
                                   ??_abs 001A                 __size_of_DATAEE_WriteByte 0036  
                                   ??_exp 0031                                     ??_log 0031  
                            ___fttol@lval 0082                                     ??_pow 0031  
                 __end_of_TMR0_Initialize 34AE            __size_of_OSCILLATOR_Initialize 000E  
           __end_of_OSCILLATOR_Initialize 3892                                     ?_crc8 0018  
              SWSPI_DAC_send_bits@phrType 001C                                     ?_main 0001  
                                   _EEADR 000FA9                           __end_of___ftadd 160C  
         __size_of_SwSpi_Set_Dac_Sync_Pin 001C                           __end_of___ftdiv 1D86  
                         __end_of___ftneg 36D0                           __end_of___lldiv 27D2  
                              _EepromRead 38EA                           __end_of___ftmul 1C9E  
                                   _T0CON 000FD5                           __end_of___llmod 2A7A  
                         __end_of___ftsub 31CA                           __end_of___fttol 1BA8  
                          __CFG_DEBUG$OFF 000000                           __end_of___lwmod 320C  
                                   i2l851 3360                                     i2l852 335C  
                                   i2l780 005E                                     i2l782 006A  
                                   i2l857 354A                                     i2l785 007A  
                                   i2l858 356A                                     i2l787 0086  
                                   i2l789 0090                                     _TMR0H 000FD7  
                                   _TMR0L 000FD6                                     _PORTD 000F83  
                                   _TRISA 000F92                                     _TRISB 000F93  
                                   _TRISC 000F94                                     _TRISD 000F95  
                                   _TRISE 000F96                       _SWSPI_DAC_send_bits 2D5C  
       __size_of_TMR0_SetInterruptHandler 000A                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                __end_of_GetIntFromUartData 21AC  
                           __CFG_WRT2$OFF 000000                       ___lmul@multiplicand 001C  
               ?_TMR0_SetInterruptHandler 0018                             __CFG_WRT3$OFF 000000  
                            ___lltoft@exp 0028                      _EUSART1_Transmit_ISR 3334  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                         ?_WriteUartMessage 0019  
                        __end_of_TMR0_ISR 25A0                             __CFG_WRTB$OFF 000000  
                __size_of_SetMcuFwVersion 0036                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                           DacSetValue@data 0086  
                         _DATAEE_ReadByte 380A                            __CFG_EBTRB$OFF 000000  
                           ___awtoft@sign 0023                   __end_of_PIN_MANAGER_IOC 3918  
                                   crc8@i 001F                                     _make8 2BF4  
          __size_of_SWSPI_Synth_send_bits 00B0                     __end_of_GetMcuRunTime 1E6A  
                                   _count 00C8                                     _floor 1E6A  
                                   _ldexp 2022                                     _frexp 2630  
                                   _errno 00C4             __end_of_SWSPI_Synth_send_bits 2318  
                         __end_of_isalpha 3614                           __end_of_isdigit 3732  
                                   _group 00D0                        ??_WriteUartMessage 001D  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 001C  
                 ??_GroupStatusAndVersion 0031                           __end_of_isspace 3660  
                          ?_EUSART1_Write 0001                               ?_AdcConvert 0001  
                         __end_of_isupper 3750                                     pclath 000FFA  
                                   tablat 000FF5                                     pow@yi 00AD  
                          ??_EUSART1_Read 0018                                     status 000FD8  
                                   wtemp6 0049                            __CFG_HFOFST$ON 000000  
                         __end_of_toupper 3832            SwSpi_Set_Synth_Le_Pin@cPinMode 0018  
                 __end_of_GroupControlMcu 3248                       __size_of_MEMORY_ISR 0004  
                          __CFG_PBADEN$ON 000000        __size_of_SetConversionResultFormat 000C  
                             exp@exponent 009D            CheckFlashPrecentage@precentage 007C  
                    ?_SWSPI_DAC_send_bits 001A                    __end_of_BlinkErrorLeds 2B98  
                             ldexp@newexp 0091                   __end_of_SWSPI_send_word 250E  
                             _BlinkOkLeds 2ADC                   WriteUartMessage@dataBuf 0019  
                         __initialization 28CE                               log@exponent 0091  
                            __end_of_crc8 2FA8                __end_of_EUSART1_Initialize 3444  
                            __end_of_main 2ADC                   FLASH_ReadByte@flashAddr 0018  
             ?_INTERRUPT_InterruptManager 0001                          __end_of_GroupDAC 3714  
                         _readUartMessage 0CE4                          __end_of_GroupAdc 2FF0  
                                  ??_crc8 001C                                    ??_main 0031  
                           ___fttol@sign1 0081                         ?_SwSpi_Set_CE_Pin 0018  
                      _TimerKeepAliveFlag 00D4                             __activetblptr 000002  
                 __size_of_FLASH_ReadByte 0012                          __end_of_ResetMcu 3884  
                     SetMcuFwVersion@data 002C                              _writeAddress 0042  
                      ??_SwSpi_Set_CE_Pin 0019                     ?_EUSART1_Transmit_ISR 0001  
                         ??_ZeroBitsArray 0022                   __end_of_TMR0_StartTimer 3914  
                                  ?_make8 0018                                    _ADCON0 000FC2  
                                  _ADCON1 000FC1                                    _ADCON2 000FC0  
                                  ?_floor 008F                 FLASH_WriteBlock@writeAddr 001D  
                                  ?_ldexp 008E                                    ?_frexp 0018  
                        __end_of___altoft 28CE                          ___llmod@dividend 0018  
                                  _ADRESH 000FC4                                    _ADRESL 000FC3  
                                  _EEDATA 000FA8                                 ??_DacInit 002F  
                                  _EECON2 000FA7                          __end_of___awtoft 3334  
                                  _ANSELA 000F38                                    _ANSELB 000F39  
                                  _ANSELC 000F3A                                    _ANSELD 000F3B  
                                  _ANSELE 000F3C                          __end_of___ftpack 2474  
                        __end_of___lltoft 2CAC                         _FlashReadUart$565 00B1  
                       _FlashReadUart$566 00B5                                    i2l1011 253E  
                       ?_FlashSampleWrite 002D                                    i2l1012 2560  
                                  i2l1013 2582                            __CFG_WDTEN$OFF 000000  
                                  i2l1860 31D8                                    i2l1863 31F8  
                                  i2l1864 3202                                    i2l1859 31E0  
                                  _TABLAT 000FF5                               _EepromWrite 3868  
                                  _RCREG1 000FAE                          __end_of___lwtoft 36F4  
                 __size_of_FlashEreaseMem 0052                 __size_of_FLASH_EraseBlock 0034  
                                  _RCSTA1 000FAB           __size_of_SwSpi_Set_Synth_Le_Pin 003C  
                                  _OSCCON 000FD3                                    _SPBRG1 000FAF  
                  _SwSpi_Set_Dac_Sync_Pin 378C                   __size_of_SwSpi_Data_Pin 0056  
                GroupSynthesizers@request 00BF                        ??_FlashSampleWrite 0060  
                                  _TXREG1 000FAD                                    _TXSTA1 000FAC  
                   ??_SWSPI_DAC_send_bits 001B                  __end_of_GroupFlashMemory 307C  
                         ?_BlinkErrorLeds 0001                          _GetCpldFwVersion 25A0  
                          __CFG_XINST$OFF 000000                         ?_SetCpldFwVersion 002C  
                                  _cState 00D1                                    ___ftge 26C0  
                                  ___lmul 2DB4                 SWSPI_Synth_send_bits@data 0022  
                                  ___wmul 3686                       UpdateRxFreq@regData 0088  
                               ??___ftadd 007E                 SWSPI_Synth_send_bits@mask 0080  
                          __CFG_STVREN$ON 000000                                 ??___ftdiv 0060  
                               ??___ftneg 001B                         ?_InitSevenSegment 0001  
                               ??___lldiv 0020                                 ??___ftmul 006F  
                   __end_of_PLLInitialize 0CE4                                 ??___llmod 0020  
                               ??___ftsub 002F                                 ??___fttol 007C  
                      ??_SetCpldFwVersion 002E                                 ??___lwmod 0005  
          SwSpi_Set_Dac_Sync_Pin@cPinMode 0018                        __size_of_ResetCpld 000C  
                        ?_TMR0_Initialize 0001                                    _memset 3570  
                                  clear_0 2914                                    clear_1 2920  
                                  clear_2 292C                        ??_InitSevenSegment 0018  
                     __size_of_AdcConvert 01B6                   __end_of_DATAEE_ReadByte 381E  
                             ?_EepromRead 0001                                    _strtol 10D2  
                                  floor@i 0092                     __end_of_SwSpi_Clk_Pin 2EB6  
                                  floor@x 008F                     ___ftmul@f3_as_product 0073  
                SWSPI_DAC_send_bits@count 001B                FlashSampleWrite@channelNum 002F  
                            __pdataCOMRAM 0042                                 ??_isalpha 001B  
                               ??_isdigit 0018                     __end_of_FlashReadUart 0A6C  
                        __end_of_testLeds 29AA                             ?_SetMcuSystem 0001  
                            __mediumconst 0000                                 ??_isspace 0018  
                                  tblptrh 000FF7                                 ??_isupper 0018  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                ADC_GetConversion@channel 001C                           ??_EUSART1_Write 0018  
TMR0_SetInterruptHandler@InterruptHandler 0018              __size_of_InitRxMessageParams 0028  
                        ?_PIN_MANAGER_IOC 0001                           _eusart1RxBuffer 0146  
                               ??_toupper 0018                        __size_of_ZeroArray 001E  
           __size_of_INTERRUPT_Initialize 0004                           _eusart1TxBuffer 0100  
                         _GetMcuFwVersion 27D2                          __end_ofexp@coeff 068E  
                       _SYSTEM_Initialize 37A8                          __end_oflog@coeff 06A9  
                              __accesstop 0060                   __end_of__initialization 2932  
                              ___altoft@c 0087                             ZeroArray@size 0022  
                       ??_SetMcuFwVersion 002E                                ___ftadd@f1 0078  
                              ___ftadd@f2 007B                                ___ftge@ff1 0018  
                              ___ftge@ff2 001B                        ?_SYSTEM_Initialize 0001  
                            eval_poly@res 008B                             ___rparam_used 000001  
                              ___ftdiv@f1 0029                                ___ftdiv@f2 002C  
                              ___ftdiv@f3 0064                          ?_GroupControlMcu 01C2  
            GroupStatusAndVersion@request 00BF                                ___ftneg@f1 0018  
                              ___awtoft@c 0020                   __end_of_readUartMessage 0EE0  
                WriteUartMessage@dataSize 001B                                ___ftmul@f1 0069  
                              ___ftmul@f2 006C                          ?_SWSPI_send_word 0026  
                            ?_DacSetValue 0086                                ___ftsub@f1 0084  
                              ___ftsub@f2 0087                                ___fttol@f1 0078  
                         _Make32bitsArray 2D04                            __pcstackCOMRAM 0001  
                            __pidataBANK0 3858                       ??_SYSTEM_Initialize 001C  
                               ?_TMR0_ISR 0001                                ___lltoft@c 0020  
                           __end_of_make8 2C50                          _DATAEE_WriteByte 33A2  
                           __end_of_floor 1F4C                             __end_of_ldexp 20E8  
                           __end_of_frexp 26C0                    _SwSpi_Set_Synth_Le_Pin 32C0  
                    GroupFlashMemory@data 01C2                                ___lwtoft@c 0020  
                    __end_of_EUSART1_Read 30C0                              ??_MEMORY_ISR 0001  
                  __size_of_SetMcuRunTime 0044                    ??_EUSART1_Transmit_ISR 0001  
                          ??_SetMcuSystem 001C                        ZeroBitsArray@array 0020  
                   TMR0_ISR@CountCallBack 0035             SwSpi_Set_Synth_Le_Pin@phrType 0019  
                 GroupFlashMemory@request 01C4                        _keepAliveSignalLed 37DC  
                       make8@dataLocation 001C               __end_of_EUSART1_Receive_ISR 3570  
             FLASH_WriteBlock@GIEBitValue 002B                              GroupDAC@data 01C2  
                                 ??_make8 001D                                   ??_floor 0031  
                        ?_TMR0_StartTimer 0001                                   ??_ldexp 0093  
                                 ??_frexp 001D                 __end_of_SYSTEM_Initialize 37C2  
                         _AdcConvert$3296 00B7                             _eusart1RxHead 0038  
                    GetMcuFwVersion@TxMsg 0026                             _eusart1TxHead 003A  
                           _eusart1RxTail 0037                                __pbssBANK0 00C0  
                              __pbssBANK1 0100                             _eusart1TxTail 0039  
                     ?_keepAliveSignalLed 0001                        __size_of_eval_poly 00D6  
                       __end_of_ResetCpld 38BA                           __CFG_PLLCFG$OFF 000000  
                              _channelArr 0669                                 ?_GroupDAC 01C2  
                              __pnvCOMRAM 0046                                 ?_GroupAdc 01C2  
          __size_of_InitAdcApplicationMgr 000E                __end_of_SendSystemStartAck 38EA  
           __end_of_InitAdcApplicationMgr 38A0                       __size_of_EepromRead 000A  
                      __end_of_MEMORY_ISR 391C                                 ?_ResetMcu 0001  
                      _FlashReadCondition 18AA           ??_InitSystemApplicationManagers 0031  
                      __CFG_CCP2MX$PORTC1 000000                                   ?___ftge 0018  
                          FlashReadUart@j 00B9          __end_of_TMR0_SetInterruptHandler 3908  
                                 ?___lmul 0018                                   ?___wmul 0018  
                              ??_TMR0_ISR 0006                        __CFG_CCP3MX$PORTB5 000000  
                      SetChannelMode@data 002C                      ??_keepAliveSignalLed 0018  
                       __end_of_ZeroArray 376E                                 ?___altoft 0087  
                                 ?_memset 0018                            ___lmul@product 0020  
                     ?_FlashReadCondition 0001                                 ?___awtoft 0020  
                               ?___ftpack 0018                              GroupAdc@data 01C2  
                        FlashReadUart@idx 00BB                                 ?___lltoft 0020  
               __size_of_FLASH_WriteBlock 00BC                   __size_of_ADC_Initialize 0016  
             __end_of_SetAdcOperationMode 38D2                FlashSampleWrite@sampleData 002D  
                          _FLASH_ReadByte 3846                                 ?___lwtoft 0020  
            __end_of_CheckFlashPrecentage 23C6                                   ?_strtol 0024  
                        ?_DATAEE_ReadByte 0001              __size_of_keepAliveSignalUart 000C  
                 __end_of_GetMcuFwVersion 2854                                   _OSCCON2 000FD2  
                                 _TBLPTRH 000FF7                                   _TBLPTRL 000FF6  
                                 _TBLPTRU 000FF8                                   _OSCTUNE 000F9B  
                                 _SPBRGH1 000FB0                                   _DacInit 29AA  
                   GetIntFromUartData@idx 0078                          GetMcuRunTime@idx 006D  
                            ??_AdcConvert 00B1                      ??_FlashReadCondition 0024  
                          _FlashEreaseMem 2EB6                          _FLASH_EraseBlock 34AE  
          __size_of_GroupStatusAndVersion 0058                            _SwSpi_Data_Pin 2E0A  
                    DATAEE_WriteByte@bAdd 0019             __end_of_GroupStatusAndVersion 2D04  
                 __end_of_Make32bitsArray 2D5C                                ??_GroupDAC 0031  
                              ??_GroupAdc 0031                             _SetMcuRunTime 30C0  
                      _GetIntFromUartData 20E8                           __CFG_PWRTEN$OFF 000000  
                      FlashReadUart@TxMsg 006C                     GroupSynthesizers@data 01C2  
                                 __Hparam 0000                                ??_ResetMcu 002C  
               __size_of_WriteUartMessage 0036                              ?_BlinkOkLeds 0001  
                                 __Lparam 0000                          UpdateRxFreq@data 0086  
                   SendAckMessage@inGroup 0025                          ?_readUartMessage 0001  
                  GroupControlMcu@request 00BF                                 ?_testLeds 0001  
                     ?_GetIntFromUartData 0066                           __size_of___ftge 0090  
                         __size_of___lmul 0056                                   ___ftadd 145E  
                                 ___ftdiv 1C9E                                   ___ftneg 36AC  
                                 ___lldiv 2750                           __size_of___wmul 0026  
                                 ___ftmul 1BA8                                   ___llmod 2A14  
                                 ___ftsub 3188                                   ___fttol 1AB0  
              FlashSampleWrite@rotateLeft 0062                              crc8@dataSize 001A  
                __size_of_ClearMcuRunTime 0014                                   ___lwmod 31CA  
                    AdcConvert@_adcResult 00B3                              __psmallconst 0600  
                              ??___altoft 008B                    __end_of_FLASH_ReadByte 3858  
              SWSPI_Synth_send_bits@count 0084                     _mcuRunTimeIn5SecTicks 00C0  
                                 _crcCalc 00CC                                   _channel 00D3  
                                 __pcinit 28CE                                ??___awtoft 0023  
                              ??___ftpack 001D                         __end_of_eval_poly 2022  
                         __size_of_memset 002C                                   __ramtop 0600  
                 __size_of_SendAckMessage 0052                                ??___lltoft 0024  
                 __size_of_SetChannelMode 0030                                   __ptext0 2A7A  
                                 __ptext1 0CE4                                   __ptext2 359C  
                                 __ptext3 36F4                                   __ptext4 3038  
                                 __ptext5 2FA8                                   __ptext6 2CAC  
                                 __ptext7 320C                                   __ptext8 2B98  
                                 __ptext9 3614                                   crc8@crc 001D  
                      __end_of_AdcConvert 145E                                ??___lwtoft 0023  
                               _T0CONbits 000FD5                         BlinkErrorLeds@idx 001C  
                         __size_of_strtol 01D6                     _OSCILLATOR_Initialize 3884  
                            __size_of_abs 0028                                   _isalpha 35EC  
                            __size_of_exp 01F2                              __size_of_log 0122  
                                 _isdigit 3714                              __size_of_pow 017C  
                      _EUSART1_Initialize 340E                  ??_PIN_MANAGER_Initialize 0018  
                                 _isspace 363A                  __end_of_GetCpldFwVersion 2630  
                                 _isupper 3732                          UpdateTxFreq@data 002F  
                                 _request 00CF                           GroupDAC@request 00BF  
                    ??_GetIntFromUartData 002E                    __end_of_FlashEreaseMem 2F08  
              __size_of_SYSTEM_Initialize 001A                   ?_SwSpi_Set_Dac_Sync_Pin 0001  
                  __end_of_SwSpi_Data_Pin 2E60                                   _toupper 381E  
                    end_of_initialization 2932                       GetCpldFwVersion@idx 002F  
                           ?_UpdateRxFreq 0086                                   exp@sign 009F  
                           ?_UpdateTxFreq 002F                       ?_EUSART1_Initialize 0001  
                        ??_BlinkErrorLeds 0018                              ?_EepromWrite 001B  
                     SetCpldFwVersion@idx 002E                     _SWSPI_Synth_send_bits 2268  
              __end_of_TEST_PLL_REGISTERS 0635                 __size_of_SwSpi_Set_CE_Pin 003C  
                          ?_SetMcuRunTime 0001                                   memset@c 001A  
                                 memset@n 001C                                   memset@p 001E  
                           __Lmediumconst 0000                           ___lldiv@divisor 001C  
                    __end_of_SetMcuSystem 38FE                                   pow@sign 00AC  
                         ___lldiv@counter 0024                         ?_GroupFlashMemory 01C2  
                        AdcConvert@adcRes 00BA                                ??_testLeds 002C  
                    SWSPI_send_word@datac 002B                                _rxMsgQueue 00D7  
                                 postdec1 000FE5                                   postdec2 000FDD  
                      ??_GroupFlashMemory 00BF                __end_of_PLL_INIT_REGISTERS 0669  
                                 postinc0 000FEE                                   postinc2 000FDE  
                   __size_of_EUSART1_Read 0044                       _InitRxMessageParams 359C  
                             testLeds@idx 002D                      __size_of_DacSetValue 0036  
               __size_of_FlashSampleWrite 00FA                    __size_of_GetMcuRunTime 00E4  
                    ??_EUSART1_Initialize 0018     __end_of_InitSystemApplicationManagers 37DC  
  __size_of_InitSystemApplicationManagers 001A             _InitSystemApplicationManagers 37C2  
                         ?_FLASH_ReadByte 0018                                   strtol@a 0061  
                                 strtol@c 0065                                   strtol@s 0024  
                _TMR0_SetInterruptHandler 38FE                              ??_EepromRead 0019  
                         _SetMcuFwVersion 336C                          ?_GetMcuFwVersion 0001  
               __size_of_SetCpldFwVersion 0042                            ZeroArray@array 0020  
          __end_of_SwSpi_Set_Dac_Sync_Pin 37A8                              strtol@endptr 0026  
           FLASH_WriteBlock@flashWrBufPtr 0021                 __size_of_InitSevenSegment 0026  
                      GetMcuRunTime@TxMsg 0060                      ?_InitRxMessageParams 0001  
                         ?_FlashEreaseMem 0001                       EUSART1_Write@txData 0018  
                         ?_SwSpi_Data_Pin 0018                     __end_of_ZeroBitsArray 378C  
                          ??_UpdateRxFreq 002F                            ??_UpdateTxFreq 0031  
                __end_of_DATAEE_WriteByte 33D8               __end_of_SWSPI_DAC_send_bits 2DB4  
                FLASH_EraseBlock@baseAddr 0018                          ?_Make32bitsArray 0018  
                             ___ftdiv@exp 0067                              _EUSART1_Read 307C  
                    _CheckFlashPrecentage 2318                         FLASH_WriteBlock@i 002C  
                      __end_of_EepromRead 38F4                               ___ftmul@exp 0072  
                 ?_SwSpi_Set_Synth_Le_Pin 0018                     PLLUartInitialize@data 0018  
              ?_SetConversionResultFormat 002C              __end_of_INTERRUPT_Initialize 3910  
                          __end_of___ftge 2750              InitAdcApplicationMgr@channel 0018  
                          __end_of___lmul 2E0A                            __end_of___wmul 36AC  
                     GroupControlMcu@data 01C2                             __pidataCOMRAM 3908  
                       __size_of_TMR0_ISR 0092                            _ADC_Initialize 37F4  
                        _FLASH_WriteBlock 21AC                    ?_OSCILLATOR_Initialize 0001  
                          __end_of_memset 359C                                floor@expon 0095  
                       ??_ClearMcuRunTime 0018                            __end_of_strtol 12A8  
                     start_initialization 28CE                                eval_poly@d 0087  
                              eval_poly@n 0089                                eval_poly@x 0084  
                        BlinkOkLeds@state 001B                  __size_of_TMR0_Initialize 0034  
                              ldexp@value 008E           __size_of_PIN_MANAGER_Initialize 0048  
                             __end_of_abs 35EC                     ??_InitRxMessageParams 0024  
                             __end_of_exp 10D2                               __end_of_log 18AA  
                             __end_of_pow 1788                  AdcConvert@_adcResult_332 00B5  
                           _GetMcuRunTime 1D86                    ?_SWSPI_Synth_send_bits 0022  
                         ??_SetMcuRunTime 0021                     __end_of_EUSART1_Write 3284  
                      GetMcuFwVersion@idx 002F                        SetMcuFwVersion@idx 002E  
                  __size_of_PLLInitialize 0278                                frexp@value 0018  
                         ___llmod@divisor 001C                     ?_CheckFlashPrecentage 0001  
                         ___llmod@counter 0020                       DATAEE_ReadByte@bAdd 0018  
                __size_of_PIN_MANAGER_IOC 0004                                 _ResetCpld 38AE  
                  __size_of_SwSpi_Clk_Pin 0056                       SendAckMessage@TxMsg 0026  
          __end_of_SwSpi_Set_Synth_Le_Pin 32FC                       _keepAliveSignalUart 38D2  
                       __size_of_GroupDAC 0020                          _WriteUartMessage 3444  
                       __size_of_GroupAdc 0048                    __size_of_FlashReadUart 03C2  
                                ??___ftge 001E                                  ??___lmul 0020  
                 SendAckMessage@inRequest 0024                                  ??___wmul 001C  
                       __size_of_ResetMcu 000E                      __size_of_BlinkOkLeds 005E  
                 SetAdcOperationMode@data 002C                    __end_of_ADC_Initialize 380A  
       __end_of_SetConversionResultFormat 38C6                               __pdataBANK0 00EB  
                 SWSPI_DAC_send_bits@data 001A                   __end_of_SetMcuFwVersion 33A2  
                                ??_memset 001E                  __size_of_GroupControlMcu 003C  
             FLASH_EraseBlock@GIEBitValue 001C                            _SendAckMessage 2F08  
                          _SetChannelMode 34E2                  __end_of_FLASH_EraseBlock 34E2  
                      _SendSystemStartAck 38DE                  __size_of_SWSPI_send_word 009A  
                                ??_strtol 002A                            _eusart1RxCount 00D2  
                       __size_of___altoft 007A                                 _ZeroArray 3750  
                       __size_of___awtoft 0038                         __size_of___ftpack 00AE  
                    ?_keepAliveSignalUart 0001                         __size_of___lltoft 005C  
                             __pbssCOMRAM 0031                         __size_of___lwtoft 0024  
           __size_of_EUSART1_Transmit_ISR 0038                             __pcstackBANK0 0060  
                           __pcstackBANK1 01C2                              _isalpha$3003 001C  
                     ?_SendSystemStartAck 0001                              _isdigit$3006 0019  
                          ?_GetMcuRunTime 0001                            BlinkOkLeds@idx 001C  
                                ?_DacInit 0001                     __size_of_SetMcuSystem 000A  
                        _SwSpi_Set_CE_Pin 3284              __size_of_EUSART1_Receive_ISR 002E  
           SWSPI_Synth_send_bits@bitArray 0060                      __size_of_EepromWrite 000E  
                   _TMR0_InterruptHandler 00FB                                 __pnvBANK0 00FB  
                __size_of_TMR0_StartTimer 0004                                ?_ResetCpld 0001  
                  _PIN_MANAGER_Initialize 2FF0                      ??_SendSystemStartAck 002C  
                   _InitAdcApplicationMgr 3892                                 __pintcode 0008  
                  __end_of_SendAckMessage 2F5A                                 __ptext100 1C9E  
                               __ptext101 32FC                                 __ptext102 2C50  
                               __ptext111 250E                                 __ptext103 36D0  
                               __ptext112 31CA                                 __ptext104 23C6  
                               __ptext113 3914                                 __ptext105 19B6  
                               __ptext114 3918                                 __ptext106 21AC  
                               __ptext115 3334                                 __ptext107 34AE  
                               __ptext116 3542                                 __ptext108 38A0  
                               __ptext117 0000                                 __ptext109 3512  
                                ?___ftadd 0078                                  ?___ftdiv 0029  
                  __end_of_SetChannelMode 3512                                  ?___ftneg 0018  
                                ?___lldiv 0018                                  ?___ftmul 0069  
                                ?___llmod 0018                                  ?___ftsub 0084  
                                ?___fttol 0078                          _FlashSampleWrite 19B6  
                                ?___lwmod 0001                           ?_ADC_Initialize 0001  
                    __end_of_UpdateRxFreq 3146                         __size_of_testLeds 006A  
                           _PLLInitialize 0A6C             SetConversionResultFormat@data 002C  
                    __end_of_UpdateTxFreq 363A               __size_of_keepAliveSignalLed 0018  
            ??_INTERRUPT_InterruptManager 0006                          __CFG_PRICLKEN$ON 000000  
                              ?_ZeroArray 0020                               __smallconst 0600  
                   ??_keepAliveSignalUart 002C                                  _BAUDCON1 000FB8  
                           _SwSpi_Clk_Pin 2E60                                  ?_isalpha 0001  
                                ?_isdigit 0001                                 _eval_poly 1F4C  
                     BlinkErrorLeds@state 001B                           _TimerOneSecFlag 00D6  
                                ?_isspace 0001                          _SetCpldFwVersion 3146  
                            _SetMcuSystem 38F4                                  ?_isupper 0001  
                           _FlashReadUart 06AA                         _PLLUartInitialize 391C  
                       ?_GetCpldFwVersion 0001                          _InitSevenSegment 3660  
            __size_of_SetAdcOperationMode 000C                            __size_of_make8 005C  
                          __size_of_floor 00E2                            __size_of_ldexp 00C6  
                          __size_of_frexp 0090                        ?_PLLUartInitialize 0018  
                __size_of_DATAEE_ReadByte 0014                                  ?_toupper 0001  
                        _conversionFormat 003D                        ??_GetCpldFwVersion 0024  
                    _INTERRUPT_Initialize 390C            FLASH_WriteBlock@blockStartAddr 0027  
             __size_of_FlashReadCondition 010C                         ??_TMR0_Initialize 001A  
                  ??_CheckFlashPrecentage 0078                            ___wmul@product 001C  
                                _LATAbits 000F89                                  _LATBbits 000F8A  
                                _LATCbits 000F8B                                  _LATDbits 000F8C  
                     ??_PLLUartInitialize 001A            FlashReadUart@numOfSampleToRead 002C  
                                _PIE1bits 000F9D                                  _PIE2bits 000FA0  
                   _GroupStatusAndVersion 2CAC                         _GroupSynthesizers 2B98  
     __size_of_INTERRUPT_InterruptManager 00D4                ??_TMR0_SetInterruptHandler 001A  
                    Make32bitsArray@array 0018                                  _PIR1bits 000F9E  
                        ??_FLASH_ReadByte 001C                                  i2u507_40 31E4  
                                _PIR2bits 000FA1                                 _rxMsgData 01AE  
                     SWSPI_send_word@data 0026                        ?_GroupSynthesizers 01C2  
                                _RCONbits 000FD0                          __CFG_WDTPS$32768 000000  
                               make8@data 0018                                  _TMR0_ISR 250E  
                         ?_SendAckMessage 0024                           ?_SetChannelMode 002C  
                      _TEST_PLL_REGISTERS 0601                            ?_PLLInitialize 0001  
                       ??_PIN_MANAGER_IOC 0001                          ?_SetMcuFwVersion 002C  
                     ??_GroupSynthesizers 0031                    GetIntFromUartData@data 0066  
                 SWSPI_send_word@dataSize 002A                                _ADCON0bits 000FC2  
                __size_of_readUartMessage 01FC                         ___wmul@multiplier 0018  
                          ?_SwSpi_Clk_Pin 0018                          ??_FlashEreaseMem 002C  
               __end_of_PLLUartInitialize 391E                        __end_of_channelArr 0670  
                        ??_SwSpi_Data_Pin 0019                 __size_of_GroupFlashMemory 0044  
                              ?_eval_poly 0084                            ?_FlashReadUart 002C  
                       ??_GroupControlMcu 0031                        _PLL_INIT_REGISTERS 0635  
                         ??_GetMcuRunTime 0025                     DATAEE_WriteByte@bData 0018  
                            _isspace$3009 0019                         ??_SWSPI_send_word 002B  
                   GetCpldFwVersion@TxMsg 0026               __size_of_GetIntFromUartData 00C4  
                       ___lmul@multiplier 0018                   FlashReadCondition@TxMsg 0028  
                             _INTCON2bits 000FF1                                 copy_data0 28E2  
                               copy_data1 2902                     ?_INTERRUPT_Initialize 0001  
                        __size_of_DacInit 006A                         ?_DATAEE_WriteByte 0018  
               __end_of_GroupSynthesizers 2BF4                     EUSART1_Read@readValue 0019  
                __end_of_FLASH_WriteBlock 2268                                  _GroupDAC 36F4  
                      ??_DATAEE_WriteByte 0019                                  _GroupAdc 2FA8  
                               frexp@eptr 001B                                _EECON1bits 000FA6  
                             ??_ResetCpld 002C                                  __Hrparam 0000  
                  ?_InitAdcApplicationMgr 0001                                  _ResetMcu 3876  
                           ??_DacSetValue 002F                               _readAddress 00F7  
                                __Lrparam 0000                         _ADC_GetConversion 3512  
                     FlashReadUart@offset 00BD                        __CFG_BOREN$SBORDIS 000000  
                         _ClearMcuRunTime 3832                         __CFG_P2BMX$PORTD2 000000  
             ??_SetConversionResultFormat 002E                   ??_OSCILLATOR_Initialize 0018  
                      ?_ADC_GetConversion 0018                         ??_TMR0_StartTimer 0018  
                        __size_of___ftadd 01AE                          __size_of___ftdiv 00E8  
                    _numOfValidateSamples 0031                          __size_of___ftneg 0024  
                        __size_of___lldiv 0082                                  ___altoft 2854  
                        __size_of___ftmul 00F6                          __size_of___llmod 0066  
                        __size_of___ftsub 0042                          __size_of___fttol 00F8  
             __size_of_EUSART1_Initialize 0036                          __size_of___lwmod 0042  
                         GroupAdc@request 00BF                                  ___awtoft 32FC  
                           crc8@dataArray 0018                                  ___ftpack 23C6  
                        _numOfReadSamples 003E                                  ___lltoft 2C50  
                       _FLASH_IsWriteDone 38A0                       WriteUartMessage@idx 001E  
                                ___lwtoft 36D0                               ??_ZeroArray 0024  
                GetMcuRunTime@tempRunTime 0069                       ??_ADC_GetConversion 001A  
                            _isupper$3012 0019                                  _exp$3299 009A  
                      ?_FLASH_IsWriteDone 0001                                  _dataSize 00CE  
                   SwSpi_Clk_Pin@cPinMode 0018                  __end_of_WriteUartMessage 347A  
                        __size_of_isalpha 0028                                  _crcGiven 00CB  
                        __size_of_isdigit 001E                   ??_SWSPI_Synth_send_bits 0026  
                  SwSpi_Data_Pin@cPinMode 0018                          __size_of_isspace 0026  
                      DacSetValue@regData 002F                                  __ptext10 3104  
                                __ptext11 391C                                  __ptext20 38EA  
                                __ptext12 336C                                  __ptext21 380A  
                                __ptext13 3146                                  __ptext30 381E  
                                __ptext22 06AA                                  __ptext14 3868  
                                __ptext31 363A                                  __ptext23 35C4  
                                __ptext15 33A2                                  __ptext40 34E2  
                                __ptext32 3714                                  __ptext24 3846  
                                __ptext16 1D86                                  __ptext41 38C6  
                                __ptext33 35EC                                  __ptext25 18AA  
                                __ptext17 2750                                  __ptext50 3884  
                                __ptext42 307C                                  __ptext34 3732  
                                __ptext26 2EB6                                  __ptext18 27D2  
                                __ptext51 390C                                  __ptext43 38D2  
                                __ptext35 2DB4                                  __ptext27 33D8  
                                __ptext19 25A0                                  __ptext60 3444  
                                __ptext52 340E                                  __ptext44 37DC  
                                __ptext36 2940                                  __ptext28 20E8  
                                __ptext61 3248                                  __ptext53 37F4  
                                __ptext45 38F4                                  __ptext37 3876  
                                __ptext29 10D2                                  __ptext70 2BF4  
                                __ptext62 37C2                                  __ptext54 30C0  
                                __ptext46 37A8                                  __ptext38 38AE  
                                __ptext71 32C0                                  __ptext63 3910  
                                __ptext55 2A14                                  __ptext47 347A  
                                __ptext39 38BA                                  __ptext80 3832  
                                __ptext72 378C                                  __ptext64 0A6C  
                                __ptext56 38DE                                  __ptext48 38FE  
                                __ptext81 2318                                  __ptext73 2268  
                                __ptext65 3284                                  __ptext57 2F08  
                                __ptext49 2FF0                                  __ptext90 2630  
                                __ptext82 2ADC                                  __ptext74 376E  
                                __ptext66 3660                                  __ptext58 2F5A  
                                __ptext91 1AB0                                  __ptext83 2B3A  
                                __ptext75 3570                                  __ptext67 3892  
                                __ptext59 3750                                  __ptext92 26C0  
                                __ptext84 12A8                                  __ptext76 2D04  
                                __ptext68 29AA                                  __ptext93 2854  
                                __ptext85 160C                                  __ptext77 2D5C  
                                __ptext69 2474                                  __ptext94 1F4C  
                                __ptext86 1788                                  __ptext78 2E0A  
                                __ptext95 3686                                  __ptext87 0EE0  
                                __ptext79 2E60                                  __ptext96 1BA8  
                                __ptext88 2022                                  __ptext97 3188  
                                __ptext89 1E6A                                  __ptext98 145E  
                                __ptext99 36AC                          __size_of_isupper 001E  
            SWSPI_Synth_send_bits@phrType 0085                  SwSpi_Set_CE_Pin@cPinMode 0018  
                                _pow$3297 00A6                                  _pow$3298 00A9  
                     ??_FLASH_IsWriteDone 0018                       GetIntFromUartData@c 0077  
                     GetIntFromUartData@t 006A               DATAEE_WriteByte@GIEBitValue 001A  
                        __size_of_toupper 0014                  __size_of_GetMcuFwVersion 0082  
                           __size_of_crc8 004E                             __size_of_main 0062  
                  ?_GroupStatusAndVersion 01C2                                  _msgCount 00CA  
            _TMR0_DefaultInterruptHandler 000000                         ??_DATAEE_ReadByte 0018  
               __end_of_ADC_GetConversion 3542              __size_of_SWSPI_DAC_send_bits 0058  
                   __size_of_UpdateRxFreq 0042                       Make32bitsArray@data 001A  
                   __size_of_UpdateTxFreq 0026                        SWSPI_send_word@idx 002C  
                             _groupsArray 00EB                           ??_PLLInitialize 002F  
                                _testLeds 2940                   __size_of_BlinkErrorLeds 005E  
                                int$flags 0048                  __size_of_Make32bitsArray 0058  
                              strtol@base 0028                                strtol@sign 0060  
               __end_of_FLASH_IsWriteDone 38AE        __end_of_INTERRUPT_InterruptManager 00DC  
              _INTERRUPT_InterruptManager 0008                    __size_of_ZeroBitsArray 001E  
                         EepromWrite@data 001B                           ??_SwSpi_Clk_Pin 0019  
                     __end_of_DacSetValue 340E                       _EUSART1_Receive_ISR 3542  
                __end_of_SwSpi_Set_CE_Pin 32C0                         ?_FLASH_EraseBlock 0018  
             __end_of_InitRxMessageParams 35C4                                  exp@coeff 0670  
                              _MEMORY_ISR 3918                           ??_FlashReadUart 0060  
                                log@coeff 068E                __size_of_PLLUartInitialize 0002  
                  SWSPI_send_word@phrType 002E                      SetCpldFwVersion@data 002C  
                      ??_FLASH_EraseBlock 001C                                _INTCONbits 000FF2  
                             ??_eval_poly 002F                               _sampleArray 016E  
                             _sampleCount 00C6                                  isalpha@c 001D  
                                isdigit@c 001A                    ??_INTERRUPT_Initialize 0018  
                                memset@p1 0018                         ??_readUartMessage 01C5  
               _SetConversionResultFormat 38BA                  __end_of_FlashSampleWrite 1AB0  
                                intlevel2 0000                              _UpdateRxFreq 3104  
                            _UpdateTxFreq 3614                      ?_EUSART1_Receive_ISR 0001  
                   __end_of_SetMcuRunTime 3104                          ___lwmod@dividend 0001  
              __size_of_GroupSynthesizers 005C                                  isspace@c 001A  
                        ___lldiv@dividend 0018                   ?_PIN_MANAGER_Initialize 0001  
                 __end_of_ClearMcuRunTime 3846                                _RCSTA1bits 000FAB  
                                isupper@c 001A              __end_of_EUSART1_Transmit_ISR 336C  
                           ??_BlinkOkLeds 0018                          ??_ADC_Initialize 0018  
                __end_of_SetCpldFwVersion 3188                        Make32bitsArray@idx 0020  
                       _TimerSamplingFlag 00D5                             AdcConvert@idx 00BC  
                __end_of_InitSevenSegment 3686                       _SetAdcOperationMode 38C6  
                           _isReWriteDone 003B                      SwSpi_Clk_Pin@phrType 0019  
                   SwSpi_Data_Pin@phrType 0019                   SwSpi_Set_CE_Pin@phrType 0019  
                  __size_of_EUSART1_Write 003C                  ??_SwSpi_Set_Dac_Sync_Pin 0018  
                       EepromRead@address 0019                          ___lldiv@quotient 0020  
                        _GroupFlashMemory 3038                           ___lwmod@divisor 0003  
                         _TMR0_Initialize 347A                           ___lwmod@counter 0005  
                                toupper@c 0018                         __CFG_T3CMX$PORTC0 000000  
                    ?_SetAdcOperationMode 002C                             ??_EepromWrite 001C  
                           _ZeroBitsArray 376E                                _AdcConvert 12A8  
                   ??_EUSART1_Receive_ISR 0001            __end_of_PIN_MANAGER_Initialize 3038  
            GetIntFromUartData@dataRegArr 006E                         __CFG_FOSC$INTIO67 000000  
                         _PIN_MANAGER_IOC 3914                          ??_SendAckMessage 0025  
              __size_of_ADC_GetConversion 0030                          ??_SetChannelMode 002E  
               __size_of_GetCpldFwVersion 0090                               _DacSetValue 33D8  



Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Mar 18 15:12:49 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1,group=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1,group=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1,group=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1,group=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1
   129                           	psect	text110,global,reloc=2,class=CODE,delta=1
   130                           	psect	text111,global,reloc=2,class=CODE,delta=1
   131                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   132                           	psect	text113,global,reloc=2,class=CODE,delta=1
   133                           	psect	text114,global,reloc=2,class=CODE,delta=1,group=1
   134                           	psect	text115,global,reloc=2,class=CODE,delta=1
   135                           	psect	text116,global,reloc=2,class=CODE,delta=1
   136                           	psect	text117,global,reloc=2,class=CODE,delta=1
   137                           	psect	text118,global,reloc=2,class=CODE,delta=1
   138                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   139                           	psect	text119,global,reloc=2,class=CODE,delta=1
   140                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   141                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   142  0000                     
   143                           ; Version 1.45
   144                           ; Generated 16/11/2017 GMT
   145                           ; 
   146                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   147                           ; All rights reserved.
   148                           ; 
   149                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   150                           ; 
   151                           ; Redistribution and use in source and binary forms, with or without modification, are
   152                           ; permitted provided that the following conditions are met:
   153                           ; 
   154                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   155                           ;        conditions and the following disclaimer.
   156                           ; 
   157                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   158                           ;        of conditions and the following disclaimer in the documentation and/or other
   159                           ;        materials provided with the distribution.
   160                           ; 
   161                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   162                           ;        software without specific prior written permission.
   163                           ; 
   164                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   165                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   166                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   167                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   168                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   169                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   170                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   171                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   172                           ; 
   173                           ; 
   174                           ; Code-generator required, PIC18F45K22 Definitions
   175                           ; 
   176                           ; SFR Addresses
   177  0000                     
   178 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   179  0000                     
   180                           	psect	idataCOMRAM
   181  00395A                     __pidataCOMRAM:
   182                           	opt stack 0
   183                           
   184                           ;initializer for _writeAddress
   185  00395A  4000               	dw	16384
   186  00395C  0000               	dw	0
   187                           
   188                           ;initializer for _SynthRxOper
   189  00395E  01                 	db	1
   190                           
   191                           ;initializer for _SynthTxOper
   192  00395F  01                 	db	1
   193                           
   194                           	psect	idataBANK0
   195  00389A                     __pidataBANK0:
   196                           	opt stack 0
   197                           
   198                           ;initializer for _groupsArray
   199  00389A  9C                 	db	low _GroupControlMcu
   200  00389B  34                 	db	high _GroupControlMcu
   201  00389C  AA                 	db	low _GroupStatusAndVersion
   202  00389D  36                 	db	high _GroupStatusAndVersion
   203  00389E  56                 	db	low _GroupAdc
   204  00389F  30                 	db	high _GroupAdc
   205  0038A0  F8                 	db	low _GroupSynthesizers
   206  0038A1  23                 	db	high _GroupSynthesizers
   207  0038A2  E6                 	db	low _GroupFlashMemory
   208  0038A3  30                 	db	high _GroupFlashMemory
   209  0038A4  3A                 	db	low _GroupDAC
   210  0038A5  37                 	db	high _GroupDAC
   211                           
   212                           ;initializer for _readAddress
   213  0038A6  4000               	dw	16384
   214  0038A8  0000               	dw	0
   215                           
   216                           	psect	smallconst
   217  000600                     __psmallconst:
   218                           	opt stack 0
   219  000600  00                 	db	0
   220  000601                     _SYNTH_REGS:
   221                           	opt stack 0
   222  000601  041C               	dw	1052
   223  000603  0001               	dw	1
   224  000605  300B               	dw	12299
   225  000607  0061               	dw	97
   226  000609  193A               	dw	6458
   227  00060B  00C0               	dw	192
   228  00060D  FCC9               	dw	64713
   229  00060F  1110               	dw	4368
   230  000611  0428               	dw	1064
   231  000613  102D               	dw	4141
   232  000615  00E7               	dw	231
   233  000617  1200               	dw	4608
   234  000619  6076               	dw	24694
   235  00061B  3500               	dw	13568
   236  00061D  0025               	dw	37
   237  00061F  0080               	dw	128
   238  000621  8384               	dw	33668
   239  000623  3000               	dw	12288
   240  000625  0003               	dw	3
   241  000627  0000               	dw	0
   242  000629  0012               	dw	18
   243  00062B  0000               	dw	0
   244  00062D  0001               	dw	1
   245  00062F  0C00               	dw	3072
   246  000631  0680               	dw	1664
   247  000633  0020               	dw	32
   248  000635                     __end_of_SYNTH_REGS:
   249                           	opt stack 0
   250  000635                     _SYNTH_ADDRES:
   251                           	opt stack 0
   252  000635  04                 	db	4
   253  000636  08                 	db	8
   254  000637  0C                 	db	12
   255  000638  00                 	db	0
   256  000639  10                 	db	16
   257  00063A  00                 	db	0
   258  00063B  14                 	db	20
   259  00063C  00                 	db	0
   260  00063D  00                 	db	0
   261  00063E  00                 	db	0
   262  00063F  18                 	db	24
   263  000640  00                 	db	0
   264  000641  00                 	db	0
   265  000642                     __end_of_SYNTH_ADDRES:
   266                           	opt stack 0
   267  000642                     _DAC_DEFAULT_INIT_VALUES:
   268                           	opt stack 0
   269  000642  2344               	dw	9028
   270  000644  6344               	dw	25412
   271  000646  A344               	dw	41796
   272  000648  E344               	dw	58180
   273  00064A                     __end_of_DAC_DEFAULT_INIT_VALUES:
   274                           	opt stack 0
   275  00064A                     _channelArr:
   276                           	opt stack 0
   277  00064A  07                 	db	7
   278  00064B  06                 	db	6
   279  00064C  05                 	db	5
   280  00064D  04                 	db	4
   281  00064E  19                 	db	25
   282  00064F  0A                 	db	10
   283  000650  0D                 	db	13
   284  000651                     __end_of_channelArr:
   285                           	opt stack 0
   286  000651                     _DAC_ADDRES:
   287                           	opt stack 0
   288  000651  02                 	db	2
   289  000652  04                 	db	4
   290  000653  06                 	db	6
   291  000654  08                 	db	8
   292  000655                     __end_of_DAC_ADDRES:
   293                           	opt stack 0
   294  000655                     exp@coeff:
   295                           	opt stack 0
   296  000655  00                 	db	0
   297  000656  80                 	db	128
   298  000657  3F                 	db	63
   299  000658  72                 	db	114
   300  000659  31                 	db	49
   301  00065A  3F                 	db	63
   302  00065B  FE                 	db	254
   303  00065C  75                 	db	117
   304  00065D  3E                 	db	62
   305  00065E  58                 	db	88
   306  00065F  63                 	db	99
   307  000660  3D                 	db	61
   308  000661  95                 	db	149
   309  000662  1D                 	db	29
   310  000663  3C                 	db	60
   311  000664  C5                 	db	197
   312  000665  AE                 	db	174
   313  000666  3A                 	db	58
   314  000667  79                 	db	121
   315  000668  21                 	db	33
   316  000669  39                 	db	57
   317  00066A  94                 	db	148
   318  00066B  80                 	db	128
   319  00066C  37                 	db	55
   320  00066D  93                 	db	147
   321  00066E  A7                 	db	167
   322  00066F  35                 	db	53
   323  000670  56                 	db	86
   324  000671  15                 	db	21
   325  000672  34                 	db	52
   326  000673                     __end_ofexp@coeff:
   327                           	opt stack 0
   328  000673                     log@coeff:
   329                           	opt stack 0
   330  000673  00                 	db	0
   331  000674  00                 	db	0
   332  000675  00                 	db	0
   333  000676  00                 	db	0
   334  000677  80                 	db	128
   335  000678  3F                 	db	63
   336  000679  F0                 	db	240
   337  00067A  FF                 	db	255
   338  00067B  BE                 	db	190
   339  00067C  E2                 	db	226
   340  00067D  A9                 	db	169
   341  00067E  3E                 	db	62
   342  00067F  83                 	db	131
   343  000680  76                 	db	118
   344  000681  BE                 	db	190
   345  000682  AE                 	db	174
   346  000683  2B                 	db	43
   347  000684  3E                 	db	62
   348  000685  3C                 	db	60
   349  000686  C3                 	db	195
   350  000687  BD                 	db	189
   351  000688  D2                 	db	210
   352  000689  13                 	db	19
   353  00068A  3D                 	db	61
   354  00068B  78                 	db	120
   355  00068C  D3                 	db	211
   356  00068D  BB                 	db	187
   357  00068E                     __end_oflog@coeff:
   358                           	opt stack 0
   359  00068E                     STR_1:
   360                           
   361                           ; BSR set to: 0
   362  00068E  4D                 	db	77	;'M'
   363  00068F  61                 	db	97	;'a'
   364  000690  72                 	db	114	;'r'
   365  000691  20                 	db	32
   366  000692  31                 	db	49	;'1'
   367  000693  38                 	db	56	;'8'
   368  000694  20                 	db	32
   369  000695  32                 	db	50	;'2'
   370  000696  30                 	db	48	;'0'
   371  000697  31                 	db	49	;'1'
   372  000698  38                 	db	56	;'8'
   373  000699  00                 	db	0
   374  00069A                     STR_2:
   375                           
   376                           ; BSR set to: 0
   377  00069A  31                 	db	49	;'1'
   378  00069B  35                 	db	53	;'5'
   379  00069C  3A                 	db	58	;':'
   380  00069D  31                 	db	49	;'1'
   381  00069E  32                 	db	50	;'2'
   382  00069F  3A                 	db	58	;':'
   383  0006A0  34                 	db	52	;'4'
   384  0006A1  35                 	db	53	;'5'
   385  0006A2  00                 	db	0
   386                           
   387                           ; #config settings
   388  0006A3  00                 	db	0	; dummy byte at the end
   389  0000                     
   390                           	psect	nvCOMRAM
   391  000046                     __pnvCOMRAM:
   392                           	opt stack 0
   393  000046                     _timer0ReloadVal:
   394                           	opt stack 0
   395  000046                     	ds	2
   396                           
   397                           	psect	nvBANK0
   398  0000FD                     __pnvBANK0:
   399                           	opt stack 0
   400  0000FD                     _TMR0_InterruptHandler:
   401                           	opt stack 0
   402  0000FD                     	ds	2
   403  0000FF                     _eusart1TxBufferRemaining:
   404                           	opt stack 0
   405  0000FF                     	ds	1
   406  0000                     _ANSELA	set	3896
   407  0000                     _ANSELE	set	3900
   408  0000                     _ANSELD	set	3899
   409  0000                     _ANSELB	set	3897
   410  0000                     _ANSELC	set	3898
   411  0000                     _ADCON0bits	set	4034
   412  0000                     _ADRESH	set	4036
   413  0000                     _ADRESL	set	4035
   414  0000                     _ADCON2	set	4032
   415  0000                     _ADCON1	set	4033
   416  0000                     _ADCON0	set	4034
   417  0000                     _T0CONbits	set	4053
   418  0000                     _T0CON	set	4053
   419  0000                     _TMR0L	set	4054
   420  0000                     _TMR0H	set	4055
   421  0000                     _EEDATA	set	4008
   422  0000                     _EEADR	set	4009
   423  0000                     _EECON2	set	4007
   424  0000                     _EECON1bits	set	4006
   425  0000                     _TABLAT	set	4085
   426  0000                     _TBLPTRL	set	4086
   427  0000                     _TBLPTRH	set	4087
   428  0000                     _TBLPTRU	set	4088
   429  0000                     _INTCON2bits	set	4081
   430  0000                     _WPUB	set	3937
   431  0000                     _TRISD	set	3989
   432  0000                     _TRISC	set	3988
   433  0000                     _TRISB	set	3987
   434  0000                     _TRISA	set	3986
   435  0000                     _TRISE	set	3990
   436  0000                     _LATC	set	3979
   437  0000                     _LATB	set	3978
   438  0000                     _LATA	set	3977
   439  0000                     _LATD	set	3980
   440  0000                     _LATE	set	3981
   441  0000                     _RCREG1	set	4014
   442  0000                     _RCSTA1bits	set	4011
   443  0000                     _TXREG1	set	4013
   444  0000                     _SPBRGH1	set	4016
   445  0000                     _SPBRG1	set	4015
   446  0000                     _TXSTA1	set	4012
   447  0000                     _RCSTA1	set	4011
   448  0000                     _BAUDCON1	set	4024
   449  0000                     _PIR1bits	set	3998
   450  0000                     _PIE1bits	set	3997
   451  0000                     _PIR2bits	set	4001
   452  0000                     _PIE2bits	set	4000
   453  0000                     _RCONbits	set	4048
   454  0000                     _OSCTUNE	set	3995
   455  0000                     _OSCCON2	set	4050
   456  0000                     _OSCCON	set	4051
   457  0000                     _LATAbits	set	3977
   458  0000                     _LATDbits	set	3980
   459  0000                     _INTCONbits	set	4082
   460  0000                     _IOCB	set	3938
   461  0000                     _LATCbits	set	3979
   462  0000                     _LATBbits	set	3978
   463                           
   464                           	psect	cinit
   465  002998                     __pcinit:
   466                           	opt stack 0
   467  002998                     start_initialization:
   468                           	opt stack 0
   469  002998                     __initialization:
   470                           	opt stack 0
   471                           
   472                           ; Initialize objects allocated to BANK0 (16 bytes)
   473                           ; load TBLPTR registers with __pidataBANK0
   474  002998  0E9A               	movlw	low __pidataBANK0
   475  00299A  6EF6               	movwf	tblptrl,c
   476  00299C  0E38               	movlw	high __pidataBANK0
   477  00299E  6EF7               	movwf	tblptrh,c
   478  0029A0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   479  0029A2  6EF8               	movwf	tblptru,c
   480  0029A4  EE00  F0ED         	lfsr	0,__pdataBANK0
   481  0029A8  EE10 F010          	lfsr	1,16
   482  0029AC                     copy_data0:
   483  0029AC  0009               	tblrd		*+
   484  0029AE  CFF5 FFEE          	movff	tablat,postinc0
   485  0029B2  50E5               	movf	postdec1,w,c
   486  0029B4  50E1               	movf	fsr1l,w,c
   487  0029B6  E1FA               	bnz	copy_data0
   488                           
   489                           ; Initialize objects allocated to COMRAM (6 bytes)
   490                           ; load TBLPTR registers with __pidataCOMRAM
   491  0029B8  0E5A               	movlw	low __pidataCOMRAM
   492  0029BA  6EF6               	movwf	tblptrl,c
   493  0029BC  0E39               	movlw	high __pidataCOMRAM
   494  0029BE  6EF7               	movwf	tblptrh,c
   495  0029C0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   496  0029C2  6EF8               	movwf	tblptru,c
   497  0029C4  EE00  F040         	lfsr	0,__pdataCOMRAM
   498  0029C8  EE10 F006          	lfsr	1,6
   499  0029CC                     copy_data1:
   500  0029CC  0009               	tblrd		*+
   501  0029CE  CFF5 FFEE          	movff	tablat,postinc0
   502  0029D2  50E5               	movf	postdec1,w,c
   503  0029D4  50E1               	movf	fsr1l,w,c
   504  0029D6  E1FA               	bnz	copy_data1
   505                           
   506                           ; Clear objects allocated to BANK1 (194 bytes)
   507  0029D8  EE01  F000         	lfsr	0,__pbssBANK1
   508  0029DC  0EC2               	movlw	194
   509  0029DE                     clear_0:
   510  0029DE  6AEE               	clrf	postinc0,c
   511  0029E0  06E8               	decf	wreg,f,c
   512  0029E2  E1FD               	bnz	clear_0
   513                           
   514                           ; Clear objects allocated to BANK0 (45 bytes)
   515  0029E4  EE00  F0C0         	lfsr	0,__pbssBANK0
   516  0029E8  0E2D               	movlw	45
   517  0029EA                     clear_1:
   518  0029EA  6AEE               	clrf	postinc0,c
   519  0029EC  06E8               	decf	wreg,f,c
   520  0029EE  E1FD               	bnz	clear_1
   521                           
   522                           ; Clear objects allocated to COMRAM (16 bytes)
   523  0029F0  EE00  F030         	lfsr	0,__pbssCOMRAM
   524  0029F4  0E10               	movlw	16
   525  0029F6                     clear_2:
   526  0029F6  6AEE               	clrf	postinc0,c
   527  0029F8  06E8               	decf	wreg,f,c
   528  0029FA  E1FD               	bnz	clear_2
   529  0029FC                     end_of_initialization:
   530                           	opt stack 0
   531  0029FC                     __end_of__initialization:
   532                           	opt stack 0
   533  0029FC  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   534  0029FE  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   535  002A00  0E00               	movlw	low (__Lmediumconst shr (0+16))
   536  002A02  6EF8               	movwf	tblptru,c
   537  002A04  0100               	movlb	0
   538  002A06  EFA2  F015         	goto	_main	;jump to C main() function
   539                           tblptru	equ	0xFF8
   540                           tblptrh	equ	0xFF7
   541                           tblptrl	equ	0xFF6
   542                           tablat	equ	0xFF5
   543                           postinc0	equ	0xFEE
   544                           wreg	equ	0xFE8
   545                           postdec1	equ	0xFE5
   546                           fsr1l	equ	0xFE1
   547                           
   548                           	psect	bssCOMRAM
   549  000030                     __pbssCOMRAM:
   550                           	opt stack 0
   551  000030                     _numOfValidateSamples:
   552                           	opt stack 0
   553  000030                     	ds	4
   554  000034                     TMR0_ISR@CountCallBack:
   555                           	opt stack 0
   556  000034                     	ds	2
   557  000036                     _eusart1RxTail:
   558                           	opt stack 0
   559  000036                     	ds	1
   560  000037                     _eusart1RxHead:
   561                           	opt stack 0
   562  000037                     	ds	1
   563  000038                     _eusart1TxTail:
   564                           	opt stack 0
   565  000038                     	ds	1
   566  000039                     _eusart1TxHead:
   567                           	opt stack 0
   568  000039                     	ds	1
   569  00003A                     _cntRegUpdate:
   570                           	opt stack 0
   571  00003A                     	ds	1
   572  00003B                     _adcSampleMode:
   573                           	opt stack 0
   574  00003B                     	ds	1
   575  00003C                     _numOfReadSamples:
   576                           	opt stack 0
   577  00003C                     	ds	4
   578                           tblptru	equ	0xFF8
   579                           tblptrh	equ	0xFF7
   580                           tblptrl	equ	0xFF6
   581                           tablat	equ	0xFF5
   582                           postinc0	equ	0xFEE
   583                           wreg	equ	0xFE8
   584                           postdec1	equ	0xFE5
   585                           fsr1l	equ	0xFE1
   586                           
   587                           	psect	dataCOMRAM
   588  000040                     __pdataCOMRAM:
   589                           	opt stack 0
   590  000040                     _writeAddress:
   591                           	opt stack 0
   592  000040                     	ds	4
   593  000044                     _SynthRxOper:
   594                           	opt stack 0
   595  000044                     	ds	1
   596  000045                     _SynthTxOper:
   597                           	opt stack 0
   598  000045                     	ds	1
   599                           tblptru	equ	0xFF8
   600                           tblptrh	equ	0xFF7
   601                           tblptrl	equ	0xFF6
   602                           tablat	equ	0xFF5
   603                           postinc0	equ	0xFEE
   604                           wreg	equ	0xFE8
   605                           postdec1	equ	0xFE5
   606                           fsr1l	equ	0xFE1
   607                           
   608                           	psect	bssBANK0
   609  0000C0                     __pbssBANK0:
   610                           	opt stack 0
   611  0000C0                     _mcuRunTimeIn5SecTicks:
   612                           	opt stack 0
   613  0000C0                     	ds	4
   614  0000C4                     _errno:
   615                           	opt stack 0
   616  0000C4                     	ds	2
   617  0000C6                     _sampleCount:
   618                           	opt stack 0
   619  0000C6                     	ds	2
   620  0000C8                     _count:
   621                           	opt stack 0
   622  0000C8                     	ds	2
   623  0000CA                     _isReWriteDone:
   624                           	opt stack 0
   625  0000CA                     	ds	1
   626  0000CB                     _msgCount:
   627                           	opt stack 0
   628  0000CB                     	ds	1
   629  0000CC                     _crcGiven:
   630                           	opt stack 0
   631  0000CC                     	ds	1
   632  0000CD                     _crcCalc:
   633                           	opt stack 0
   634  0000CD                     	ds	1
   635  0000CE                     _data:
   636                           	opt stack 0
   637  0000CE                     	ds	1
   638  0000CF                     _dataSize:
   639                           	opt stack 0
   640  0000CF                     	ds	1
   641  0000D0                     _request:
   642                           	opt stack 0
   643  0000D0                     	ds	1
   644  0000D1                     _group:
   645                           	opt stack 0
   646  0000D1                     	ds	1
   647  0000D2                     _cState:
   648                           	opt stack 0
   649  0000D2                     	ds	1
   650  0000D3                     _eusart1RxCount:
   651                           	opt stack 0
   652  0000D3                     	ds	1
   653  0000D4                     _channel:
   654                           	opt stack 0
   655  0000D4                     	ds	1
   656  0000D5                     _conversionFormat:
   657                           	opt stack 0
   658  0000D5                     	ds	1
   659  0000D6                     _TimerKeepAliveFlag:
   660                           	opt stack 0
   661  0000D6                     	ds	1
   662  0000D7                     _TimerSamplingFlag:
   663                           	opt stack 0
   664  0000D7                     	ds	1
   665  0000D8                     _TimerOneSecFlag:
   666                           	opt stack 0
   667  0000D8                     	ds	1
   668  0000D9                     _rxMsgQueue:
   669                           	opt stack 0
   670  0000D9                     	ds	20
   671                           tblptru	equ	0xFF8
   672                           tblptrh	equ	0xFF7
   673                           tblptrl	equ	0xFF6
   674                           tablat	equ	0xFF5
   675                           postinc0	equ	0xFEE
   676                           wreg	equ	0xFE8
   677                           postdec1	equ	0xFE5
   678                           fsr1l	equ	0xFE1
   679                           
   680                           	psect	dataBANK0
   681  0000ED                     __pdataBANK0:
   682                           	opt stack 0
   683  0000ED                     _groupsArray:
   684                           	opt stack 0
   685  0000ED                     	ds	12
   686  0000F9                     _readAddress:
   687                           	opt stack 0
   688  0000F9                     	ds	4
   689                           tblptru	equ	0xFF8
   690                           tblptrh	equ	0xFF7
   691                           tblptrl	equ	0xFF6
   692                           tablat	equ	0xFF5
   693                           postinc0	equ	0xFEE
   694                           wreg	equ	0xFE8
   695                           postdec1	equ	0xFE5
   696                           fsr1l	equ	0xFE1
   697                           
   698                           	psect	bssBANK1
   699  000100                     __pbssBANK1:
   700                           	opt stack 0
   701  000100                     _eusart1TxBuffer:
   702                           	opt stack 0
   703  000100                     	ds	70
   704  000146                     _eusart1RxBuffer:
   705                           	opt stack 0
   706  000146                     	ds	40
   707  00016E                     _sampleArray:
   708                           	opt stack 0
   709  00016E                     	ds	64
   710  0001AE                     _rxMsgData:
   711                           	opt stack 0
   712  0001AE                     	ds	20
   713                           tblptru	equ	0xFF8
   714                           tblptrh	equ	0xFF7
   715                           tblptrl	equ	0xFF6
   716                           tablat	equ	0xFF5
   717                           postinc0	equ	0xFEE
   718                           wreg	equ	0xFE8
   719                           postdec1	equ	0xFE5
   720                           fsr1l	equ	0xFE1
   721                           
   722                           	psect	cstackBANK1
   723  0001C2                     __pcstackBANK1:
   724                           	opt stack 0
   725  0001C2                     GroupAdc@data:
   726                           	opt stack 0
   727  0001C2                     GroupSynthesizers@data:
   728                           	opt stack 0
   729  0001C2                     GroupFlashMemory@data:
   730                           	opt stack 0
   731  0001C2                     GroupDAC@data:
   732                           	opt stack 0
   733  0001C2                     ReadIntFromEeprom@base:
   734                           	opt stack 0
   735                           
   736                           ; 4 bytes @ 0x0
   737  0001C2                     	ds	2
   738  0001C4                     GroupFlashMemory@request:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0x2
   742  0001C4                     	ds	1
   743  0001C5                     ??_readUartMessage:
   744                           
   745                           ; 1 bytes @ 0x3
   746  0001C5                     	ds	1
   747  0001C6                     _ReadIntFromEeprom$3315:
   748                           	opt stack 0
   749                           
   750                           ; 3 bytes @ 0x4
   751  0001C6                     	ds	3
   752  0001C9                     readUartMessage@idx:
   753                           	opt stack 0
   754  0001C9                     _ReadIntFromEeprom$3316:
   755                           	opt stack 0
   756                           
   757                           ; 3 bytes @ 0x7
   758  0001C9                     	ds	2
   759  0001CB                     readUartMessage@chRec:
   760                           	opt stack 0
   761                           
   762                           ; 1 bytes @ 0x9
   763  0001CB                     	ds	1
   764  0001CC                     ReadIntFromEeprom@address:
   765                           	opt stack 0
   766                           
   767                           ; 1 bytes @ 0xA
   768  0001CC                     	ds	1
   769  0001CD                     ReadIntFromEeprom@retVal:
   770                           	opt stack 0
   771                           
   772                           ; 4 bytes @ 0xB
   773  0001CD                     	ds	4
   774  0001D1                     ReadIntFromEeprom@idx:
   775                           	opt stack 0
   776                           
   777                           ; 1 bytes @ 0xF
   778  0001D1                     	ds	1
   779                           tblptru	equ	0xFF8
   780                           tblptrh	equ	0xFF7
   781                           tblptrl	equ	0xFF6
   782                           tablat	equ	0xFF5
   783                           postinc0	equ	0xFEE
   784                           wreg	equ	0xFE8
   785                           postdec1	equ	0xFE5
   786                           fsr1l	equ	0xFE1
   787                           
   788                           	psect	cstackBANK0
   789  000060                     __pcstackBANK0:
   790                           	opt stack 0
   791  000060                     ??_FlashSampleWrite:
   792  000060                     ??___ftdiv:
   793  000060                     ??_FlashReadUart:
   794  000060                     strtol@sign:
   795                           	opt stack 0
   796  000060                     FlashReadCondition@TxMsg:
   797                           	opt stack 0
   798  000060                     GetMcuFwVersion@TxMsg:
   799                           	opt stack 0
   800  000060                     GetMcuRunTime@TxMsg:
   801                           	opt stack 0
   802  000060                     SynthReadData@TxMsg:
   803                           	opt stack 0
   804  000060                     SWSPI_Synth_send_bits@bitArray:
   805                           	opt stack 0
   806                           
   807                           ; 32 bytes @ 0x0
   808  000060                     	ds	1
   809  000061                     strtol@a:
   810                           	opt stack 0
   811                           
   812                           ; 4 bytes @ 0x1
   813  000061                     	ds	1
   814  000062                     FlashSampleWrite@rotateLeft:
   815                           	opt stack 0
   816                           
   817                           ; 2 bytes @ 0x2
   818  000062                     	ds	1
   819  000063                     ___ftdiv@cntr:
   820                           	opt stack 0
   821                           
   822                           ; 1 bytes @ 0x3
   823  000063                     	ds	1
   824  000064                     ___ftdiv@f3:
   825                           	opt stack 0
   826                           
   827                           ; 3 bytes @ 0x4
   828  000064                     	ds	1
   829  000065                     strtol@c:
   830                           	opt stack 0
   831                           
   832                           ; 1 bytes @ 0x5
   833  000065                     	ds	1
   834  000066                     ?_GetIntFromUartData:
   835                           	opt stack 0
   836  000066                     GetIntFromUartData@data:
   837                           	opt stack 0
   838                           
   839                           ; 2 bytes @ 0x6
   840  000066                     	ds	1
   841  000067                     ___ftdiv@exp:
   842                           	opt stack 0
   843                           
   844                           ; 1 bytes @ 0x7
   845  000067                     	ds	1
   846  000068                     ___ftdiv@sign:
   847                           	opt stack 0
   848                           
   849                           ; 1 bytes @ 0x8
   850  000068                     	ds	1
   851  000069                     ?___ftmul:
   852                           	opt stack 0
   853  000069                     ___ftmul@f1:
   854                           	opt stack 0
   855  000069                     GetMcuFwVersion@compileData:
   856                           	opt stack 0
   857  000069                     GetMcuRunTime@tempRunTime:
   858                           	opt stack 0
   859                           
   860                           ; 4 bytes @ 0x9
   861  000069                     	ds	3
   862  00006C                     ___ftmul@f2:
   863                           	opt stack 0
   864  00006C                     FlashReadUart@TxMsg:
   865                           	opt stack 0
   866                           
   867                           ; 69 bytes @ 0xC
   868  00006C                     	ds	1
   869  00006D                     GetMcuRunTime@idx:
   870                           	opt stack 0
   871                           
   872                           ; 2 bytes @ 0xD
   873  00006D                     	ds	1
   874  00006E                     ??_GetIntFromUartData:
   875                           
   876                           ; 1 bytes @ 0xE
   877  00006E                     	ds	1
   878  00006F                     ??___ftmul:
   879                           
   880                           ; 1 bytes @ 0xF
   881  00006F                     	ds	1
   882  000070                     GetIntFromUartData@dataRegArr:
   883                           	opt stack 0
   884                           
   885                           ; 10 bytes @ 0x10
   886  000070                     	ds	2
   887  000072                     ___ftmul@exp:
   888                           	opt stack 0
   889                           
   890                           ; 1 bytes @ 0x12
   891  000072                     	ds	1
   892  000073                     ___ftmul@f3_as_product:
   893                           	opt stack 0
   894                           
   895                           ; 3 bytes @ 0x13
   896  000073                     	ds	3
   897  000076                     ___ftmul@cntr:
   898                           	opt stack 0
   899                           
   900                           ; 1 bytes @ 0x16
   901  000076                     	ds	1
   902  000077                     ___ftmul@sign:
   903                           	opt stack 0
   904                           
   905                           ; 1 bytes @ 0x17
   906  000077                     	ds	1
   907  000078                     ??_CheckFlashPrecentage:
   908  000078                     ?___ftadd:
   909                           	opt stack 0
   910  000078                     ?___fttol:
   911                           	opt stack 0
   912  000078                     ___ftadd@f1:
   913                           	opt stack 0
   914  000078                     ___fttol@f1:
   915                           	opt stack 0
   916                           
   917                           ; 3 bytes @ 0x18
   918  000078                     	ds	2
   919  00007A                     GetIntFromUartData@num:
   920                           	opt stack 0
   921                           
   922                           ; 1 bytes @ 0x1A
   923  00007A                     	ds	1
   924  00007B                     SynthReadData@indx:
   925                           	opt stack 0
   926  00007B                     GetIntFromUartData@recVal:
   927                           	opt stack 0
   928  00007B                     ___ftadd@f2:
   929                           	opt stack 0
   930                           
   931                           ; 3 bytes @ 0x1B
   932  00007B                     	ds	1
   933  00007C                     ??___fttol:
   934  00007C                     CheckFlashPrecentage@precentage:
   935                           	opt stack 0
   936  00007C                     GetIntFromUartData@retVal:
   937                           	opt stack 0
   938                           
   939                           ; 8 bytes @ 0x1C
   940  00007C                     	ds	2
   941  00007E                     ??___ftadd:
   942                           
   943                           ; 1 bytes @ 0x1E
   944  00007E                     	ds	2
   945  000080                     SWSPI_Synth_send_bits@mask:
   946                           	opt stack 0
   947                           
   948                           ; 4 bytes @ 0x20
   949  000080                     	ds	1
   950  000081                     ___ftadd@sign:
   951                           	opt stack 0
   952  000081                     ___fttol@sign1:
   953                           	opt stack 0
   954                           
   955                           ; 1 bytes @ 0x21
   956  000081                     	ds	1
   957  000082                     ___ftadd@exp2:
   958                           	opt stack 0
   959  000082                     ___fttol@lval:
   960                           	opt stack 0
   961                           
   962                           ; 4 bytes @ 0x22
   963  000082                     	ds	1
   964  000083                     ___ftadd@exp1:
   965                           	opt stack 0
   966                           
   967                           ; 1 bytes @ 0x23
   968  000083                     	ds	1
   969  000084                     ?___ftsub:
   970                           	opt stack 0
   971  000084                     ?_eval_poly:
   972                           	opt stack 0
   973  000084                     SWSPI_Synth_send_bits@count:
   974                           	opt stack 0
   975  000084                     GetIntFromUartData@idxCon:
   976                           	opt stack 0
   977  000084                     ___ftsub@f1:
   978                           	opt stack 0
   979  000084                     eval_poly@x:
   980                           	opt stack 0
   981                           
   982                           ; 3 bytes @ 0x24
   983  000084                     	ds	1
   984  000085                     SWSPI_Synth_send_bits@phrType:
   985                           	opt stack 0
   986                           
   987                           ; 1 bytes @ 0x25
   988  000085                     	ds	1
   989  000086                     GetIntFromUartData@idxData:
   990                           	opt stack 0
   991  000086                     ___fttol@exp1:
   992                           	opt stack 0
   993                           
   994                           ; 1 bytes @ 0x26
   995  000086                     	ds	1
   996  000087                     ?___altoft:
   997                           	opt stack 0
   998  000087                     UpdateTxFreq@data:
   999                           	opt stack 0
  1000  000087                     eval_poly@d:
  1001                           	opt stack 0
  1002  000087                     ___ftsub@f2:
  1003                           	opt stack 0
  1004  000087                     ___altoft@c:
  1005                           	opt stack 0
  1006                           
  1007                           ; 4 bytes @ 0x27
  1008  000087                     	ds	2
  1009  000089                     UpdateTxFreq@regIdx:
  1010                           	opt stack 0
  1011  000089                     eval_poly@n:
  1012                           	opt stack 0
  1013                           
  1014                           ; 2 bytes @ 0x29
  1015  000089                     	ds	1
  1016  00008A                     UpdateTxFreq@retVal:
  1017                           	opt stack 0
  1018                           
  1019                           ; 8 bytes @ 0x2A
  1020  00008A                     	ds	1
  1021  00008B                     ??_eval_poly:
  1022  00008B                     ??___altoft:
  1023                           
  1024                           ; 1 bytes @ 0x2B
  1025  00008B                     	ds	2
  1026  00008D                     eval_poly@res:
  1027                           	opt stack 0
  1028                           
  1029                           ; 3 bytes @ 0x2D
  1030  00008D                     	ds	2
  1031  00008F                     ___altoft@exp:
  1032                           	opt stack 0
  1033                           
  1034                           ; 1 bytes @ 0x2F
  1035  00008F                     	ds	1
  1036  000090                     ?_log:
  1037                           	opt stack 0
  1038  000090                     ?_ldexp:
  1039                           	opt stack 0
  1040  000090                     ___altoft@sign:
  1041                           	opt stack 0
  1042  000090                     ldexp@value:
  1043                           	opt stack 0
  1044  000090                     log@x:
  1045                           	opt stack 0
  1046                           
  1047                           ; 3 bytes @ 0x30
  1048  000090                     	ds	1
  1049  000091                     ?_floor:
  1050                           	opt stack 0
  1051  000091                     floor@x:
  1052                           	opt stack 0
  1053                           
  1054                           ; 3 bytes @ 0x31
  1055  000091                     	ds	2
  1056  000093                     ldexp@newexp:
  1057                           	opt stack 0
  1058  000093                     log@exponent:
  1059                           	opt stack 0
  1060                           
  1061                           ; 2 bytes @ 0x33
  1062  000093                     	ds	1
  1063  000094                     floor@i:
  1064                           	opt stack 0
  1065                           
  1066                           ; 3 bytes @ 0x34
  1067  000094                     	ds	1
  1068  000095                     ??_ldexp:
  1069                           
  1070                           ; 1 bytes @ 0x35
  1071  000095                     	ds	2
  1072  000097                     floor@expon:
  1073                           	opt stack 0
  1074                           
  1075                           ; 2 bytes @ 0x37
  1076  000097                     	ds	2
  1077  000099                     ?_exp:
  1078                           	opt stack 0
  1079  000099                     exp@x:
  1080                           	opt stack 0
  1081                           
  1082                           ; 3 bytes @ 0x39
  1083  000099                     	ds	3
  1084  00009C                     _exp$3319:
  1085                           	opt stack 0
  1086                           
  1087                           ; 3 bytes @ 0x3C
  1088  00009C                     	ds	3
  1089  00009F                     exp@exponent:
  1090                           	opt stack 0
  1091                           
  1092                           ; 2 bytes @ 0x3F
  1093  00009F                     	ds	2
  1094  0000A1                     exp@sign:
  1095                           	opt stack 0
  1096                           
  1097                           ; 1 bytes @ 0x41
  1098  0000A1                     	ds	1
  1099  0000A2                     ?_pow:
  1100                           	opt stack 0
  1101  0000A2                     pow@x:
  1102                           	opt stack 0
  1103                           
  1104                           ; 3 bytes @ 0x42
  1105  0000A2                     	ds	3
  1106  0000A5                     pow@y:
  1107                           	opt stack 0
  1108                           
  1109                           ; 3 bytes @ 0x45
  1110  0000A5                     	ds	3
  1111  0000A8                     _pow$3317:
  1112                           	opt stack 0
  1113                           
  1114                           ; 3 bytes @ 0x48
  1115  0000A8                     	ds	3
  1116  0000AB                     _pow$3318:
  1117                           	opt stack 0
  1118                           
  1119                           ; 3 bytes @ 0x4B
  1120  0000AB                     	ds	3
  1121  0000AE                     pow@sign:
  1122                           	opt stack 0
  1123                           
  1124                           ; 1 bytes @ 0x4E
  1125  0000AE                     	ds	1
  1126  0000AF                     pow@yi:
  1127                           	opt stack 0
  1128                           
  1129                           ; 4 bytes @ 0x4F
  1130  0000AF                     	ds	2
  1131  0000B1                     _FlashReadUart$581:
  1132                           	opt stack 0
  1133                           
  1134                           ; 4 bytes @ 0x51
  1135  0000B1                     	ds	2
  1136  0000B3                     ??_AdcConvert:
  1137  0000B3                     ?_ReadIntFromEeprom:
  1138                           	opt stack 0
  1139  0000B3                     ReadIntFromEeprom@numOfByes:
  1140                           	opt stack 0
  1141                           
  1142                           ; 2 bytes @ 0x53
  1143  0000B3                     	ds	2
  1144  0000B5                     AdcConvert@_adcResult:
  1145                           	opt stack 0
  1146  0000B5                     _FlashReadUart$582:
  1147                           	opt stack 0
  1148                           
  1149                           ; 4 bytes @ 0x55
  1150  0000B5                     	ds	2
  1151  0000B7                     ??_ReadIntFromEeprom:
  1152  0000B7                     AdcConvert@_adcResult_340:
  1153                           	opt stack 0
  1154                           
  1155                           ; 2 bytes @ 0x57
  1156  0000B7                     	ds	2
  1157  0000B9                     FlashReadUart@j:
  1158                           	opt stack 0
  1159  0000B9                     _AdcConvert$3314:
  1160                           	opt stack 0
  1161                           
  1162                           ; 3 bytes @ 0x59
  1163  0000B9                     	ds	1
  1164  0000BA                     ??_DacInit:
  1165                           
  1166                           ; 1 bytes @ 0x5A
  1167  0000BA                     	ds	1
  1168  0000BB                     FlashReadUart@idx:
  1169                           	opt stack 0
  1170                           
  1171                           ; 2 bytes @ 0x5B
  1172  0000BB                     	ds	1
  1173  0000BC                     AdcConvert@adcRes:
  1174                           	opt stack 0
  1175  0000BC                     DacInit@dacInput:
  1176                           	opt stack 0
  1177                           
  1178                           ; 2 bytes @ 0x5C
  1179  0000BC                     	ds	1
  1180  0000BD                     FlashReadUart@offset:
  1181                           	opt stack 0
  1182                           
  1183                           ; 2 bytes @ 0x5D
  1184  0000BD                     	ds	1
  1185  0000BE                     AdcConvert@idx:
  1186                           	opt stack 0
  1187  0000BE                     DacInit@idx:
  1188                           	opt stack 0
  1189                           
  1190                           ; 1 bytes @ 0x5E
  1191  0000BE                     	ds	1
  1192  0000BF                     ??_GroupFlashMemory:
  1193  0000BF                     GroupControlMcu@request:
  1194                           	opt stack 0
  1195  0000BF                     GroupStatusAndVersion@request:
  1196                           	opt stack 0
  1197  0000BF                     GroupAdc@request:
  1198                           	opt stack 0
  1199  0000BF                     GroupSynthesizers@request:
  1200                           	opt stack 0
  1201  0000BF                     GroupDAC@request:
  1202                           	opt stack 0
  1203                           
  1204                           ; 1 bytes @ 0x5F
  1205  0000BF                     	ds	1
  1206                           tblptru	equ	0xFF8
  1207                           tblptrh	equ	0xFF7
  1208                           tblptrl	equ	0xFF6
  1209                           tablat	equ	0xFF5
  1210                           postinc0	equ	0xFEE
  1211                           wreg	equ	0xFE8
  1212                           postdec1	equ	0xFE5
  1213                           fsr1l	equ	0xFE1
  1214                           
  1215                           	psect	cstackCOMRAM
  1216  000001                     __pcstackCOMRAM:
  1217                           	opt stack 0
  1218  000001                     ?___lwmod:
  1219                           	opt stack 0
  1220  000001                     ___lwmod@dividend:
  1221                           	opt stack 0
  1222                           
  1223                           ; 2 bytes @ 0x0
  1224  000001                     	ds	2
  1225  000003                     ___lwmod@divisor:
  1226                           	opt stack 0
  1227                           
  1228                           ; 2 bytes @ 0x2
  1229  000003                     	ds	2
  1230  000005                     ___lwmod@counter:
  1231                           	opt stack 0
  1232                           
  1233                           ; 1 bytes @ 0x4
  1234  000005                     	ds	1
  1235  000006                     ??_INTERRUPT_InterruptManager:
  1236                           
  1237                           ; 1 bytes @ 0x5
  1238  000006                     	ds	18
  1239  000018                     ??_EUSART1_Read:
  1240  000018                     ??_isspace:
  1241  000018                     ??_isdigit:
  1242  000018                     ??_isupper:
  1243  000018                     ??_BlinkErrorLeds:
  1244  000018                     ??_BlinkOkLeds:
  1245  000018                     ??_keepAliveSignalLed:
  1246  000018                     ?_ADC_GetConversion:
  1247                           	opt stack 0
  1248  000018                     ?_abs:
  1249                           	opt stack 0
  1250  000018                     ?___wmul:
  1251                           	opt stack 0
  1252  000018                     ?___ftpack:
  1253                           	opt stack 0
  1254  000018                     ?_frexp:
  1255                           	opt stack 0
  1256  000018                     ?___ftneg:
  1257                           	opt stack 0
  1258  000018                     ?___lldiv:
  1259                           	opt stack 0
  1260  000018                     ?___llmod:
  1261                           	opt stack 0
  1262  000018                     InitAdcApplicationMgr@channel:
  1263                           	opt stack 0
  1264  000018                     SwSpi_Data_Pin@cPinMode:
  1265                           	opt stack 0
  1266  000018                     SwSpi_Clk_Pin@cPinMode:
  1267                           	opt stack 0
  1268  000018                     SwSpi_Set_CE_Pin@cPinMode:
  1269                           	opt stack 0
  1270  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  1271                           	opt stack 0
  1272  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  1273                           	opt stack 0
  1274  000018                     EUSART1_Write@txData:
  1275                           	opt stack 0
  1276  000018                     DATAEE_WriteByte@bData:
  1277                           	opt stack 0
  1278  000018                     DATAEE_ReadByte@bAdd:
  1279                           	opt stack 0
  1280  000018                     toupper@c:
  1281                           	opt stack 0
  1282  000018                     PLLUartInitialize@data:
  1283                           	opt stack 0
  1284  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  1285                           	opt stack 0
  1286  000018                     crc8@dataArray:
  1287                           	opt stack 0
  1288  000018                     Make32bitsArray@array:
  1289                           	opt stack 0
  1290  000018                     ___wmul@multiplier:
  1291                           	opt stack 0
  1292  000018                     abs@a:
  1293                           	opt stack 0
  1294  000018                     memset@p1:
  1295                           	opt stack 0
  1296  000018                     ___ftpack@arg:
  1297                           	opt stack 0
  1298  000018                     ___ftge@ff1:
  1299                           	opt stack 0
  1300  000018                     ___ftneg@f1:
  1301                           	opt stack 0
  1302  000018                     frexp@value:
  1303                           	opt stack 0
  1304  000018                     FLASH_ReadByte@flashAddr:
  1305                           	opt stack 0
  1306  000018                     FLASH_EraseBlock@baseAddr:
  1307                           	opt stack 0
  1308  000018                     make8@data:
  1309                           	opt stack 0
  1310  000018                     ___lldiv@dividend:
  1311                           	opt stack 0
  1312  000018                     ___llmod@dividend:
  1313                           	opt stack 0
  1314                           
  1315                           ; 4 bytes @ 0x17
  1316  000018                     	ds	1
  1317  000019                     EepromRead@address:
  1318                           	opt stack 0
  1319  000019                     SwSpi_Data_Pin@phrType:
  1320                           	opt stack 0
  1321  000019                     SwSpi_Clk_Pin@phrType:
  1322                           	opt stack 0
  1323  000019                     SwSpi_Set_CE_Pin@phrType:
  1324                           	opt stack 0
  1325  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  1326                           	opt stack 0
  1327  000019                     DATAEE_WriteByte@bAdd:
  1328                           	opt stack 0
  1329  000019                     _isdigit$3026:
  1330                           	opt stack 0
  1331  000019                     _isspace$3029:
  1332                           	opt stack 0
  1333  000019                     _isupper$3032:
  1334                           	opt stack 0
  1335  000019                     WriteUartMessage@dataBuf:
  1336                           	opt stack 0
  1337  000019                     EUSART1_Read@readValue:
  1338                           	opt stack 0
  1339                           
  1340                           ; 2 bytes @ 0x18
  1341  000019                     	ds	1
  1342  00001A                     ??_ADC_GetConversion:
  1343  00001A                     ??_abs:
  1344  00001A                     ??_TMR0_Initialize:
  1345  00001A                     ?___lmul:
  1346                           	opt stack 0
  1347  00001A                     SWSPI_DAC_send_bits@data:
  1348                           	opt stack 0
  1349  00001A                     DATAEE_WriteByte@GIEBitValue:
  1350                           	opt stack 0
  1351  00001A                     isdigit@c:
  1352                           	opt stack 0
  1353  00001A                     isspace@c:
  1354                           	opt stack 0
  1355  00001A                     isupper@c:
  1356                           	opt stack 0
  1357  00001A                     crc8@dataSize:
  1358                           	opt stack 0
  1359  00001A                     ___wmul@multiplicand:
  1360                           	opt stack 0
  1361  00001A                     memset@c:
  1362                           	opt stack 0
  1363  00001A                     Make32bitsArray@data:
  1364                           	opt stack 0
  1365  00001A                     ___lmul@multiplier:
  1366                           	opt stack 0
  1367                           
  1368                           ; 4 bytes @ 0x19
  1369  00001A                     	ds	1
  1370  00001B                     ??_isalpha:
  1371  00001B                     BlinkErrorLeds@state:
  1372                           	opt stack 0
  1373  00001B                     BlinkOkLeds@state:
  1374                           	opt stack 0
  1375  00001B                     EepromWrite@data:
  1376                           	opt stack 0
  1377  00001B                     SWSPI_DAC_send_bits@count:
  1378                           	opt stack 0
  1379  00001B                     ___ftpack@exp:
  1380                           	opt stack 0
  1381  00001B                     WriteUartMessage@dataSize:
  1382                           	opt stack 0
  1383  00001B                     frexp@eptr:
  1384                           	opt stack 0
  1385  00001B                     ___ftge@ff2:
  1386                           	opt stack 0
  1387                           
  1388                           ; 3 bytes @ 0x1A
  1389  00001B                     	ds	1
  1390  00001C                     ??_crc8:
  1391  00001C                     EepromWrite@address:
  1392                           	opt stack 0
  1393  00001C                     SWSPI_DAC_send_bits@phrType:
  1394                           	opt stack 0
  1395  00001C                     FLASH_EraseBlock@GIEBitValue:
  1396                           	opt stack 0
  1397  00001C                     ADC_GetConversion@channel:
  1398                           	opt stack 0
  1399  00001C                     make8@dataLocation:
  1400                           	opt stack 0
  1401  00001C                     ___ftpack@sign:
  1402                           	opt stack 0
  1403  00001C                     _isalpha$3023:
  1404                           	opt stack 0
  1405  00001C                     BlinkErrorLeds@idx:
  1406                           	opt stack 0
  1407  00001C                     BlinkOkLeds@idx:
  1408                           	opt stack 0
  1409  00001C                     ___wmul@product:
  1410                           	opt stack 0
  1411  00001C                     memset@n:
  1412                           	opt stack 0
  1413  00001C                     ___lldiv@divisor:
  1414                           	opt stack 0
  1415  00001C                     ___llmod@divisor:
  1416                           	opt stack 0
  1417                           
  1418                           ; 4 bytes @ 0x1B
  1419  00001C                     	ds	1
  1420  00001D                     ??_make8:
  1421  00001D                     ??___ftpack:
  1422  00001D                     ??_frexp:
  1423  00001D                     ??_WriteUartMessage:
  1424  00001D                     isalpha@c:
  1425                           	opt stack 0
  1426  00001D                     crc8@crc:
  1427                           	opt stack 0
  1428  00001D                     FLASH_WriteBlock@writeAddr:
  1429                           	opt stack 0
  1430                           
  1431                           ; 4 bytes @ 0x1C
  1432  00001D                     	ds	1
  1433  00001E                     ??_Make32bitsArray:
  1434  00001E                     ??___ftge:
  1435  00001E                     WriteUartMessage@idx:
  1436                           	opt stack 0
  1437  00001E                     memset@p:
  1438                           	opt stack 0
  1439  00001E                     ___lmul@multiplicand:
  1440                           	opt stack 0
  1441                           
  1442                           ; 4 bytes @ 0x1D
  1443  00001E                     	ds	1
  1444  00001F                     crc8@i:
  1445                           	opt stack 0
  1446                           
  1447                           ; 2 bytes @ 0x1E
  1448  00001F                     	ds	1
  1449  000020                     ?___awtoft:
  1450                           	opt stack 0
  1451  000020                     ?___lltoft:
  1452                           	opt stack 0
  1453  000020                     ?___lwtoft:
  1454                           	opt stack 0
  1455  000020                     ___llmod@counter:
  1456                           	opt stack 0
  1457  000020                     ZeroArray@array:
  1458                           	opt stack 0
  1459  000020                     ZeroBitsArray@array:
  1460                           	opt stack 0
  1461  000020                     Make32bitsArray@idx:
  1462                           	opt stack 0
  1463  000020                     ___awtoft@c:
  1464                           	opt stack 0
  1465  000020                     ___lwtoft@c:
  1466                           	opt stack 0
  1467  000020                     ___lldiv@quotient:
  1468                           	opt stack 0
  1469  000020                     ___lltoft@c:
  1470                           	opt stack 0
  1471                           
  1472                           ; 4 bytes @ 0x1F
  1473  000020                     	ds	1
  1474  000021                     FLASH_WriteBlock@flashWrBufPtr:
  1475                           	opt stack 0
  1476  000021                     StoreIntInEeprom@data:
  1477                           	opt stack 0
  1478                           
  1479                           ; 4 bytes @ 0x20
  1480  000021                     	ds	1
  1481  000022                     ZeroArray@size:
  1482                           	opt stack 0
  1483  000022                     SWSPI_Synth_send_bits@data:
  1484                           	opt stack 0
  1485  000022                     ___lmul@product:
  1486                           	opt stack 0
  1487                           
  1488                           ; 4 bytes @ 0x21
  1489  000022                     	ds	1
  1490  000023                     ??_FLASH_WriteBlock:
  1491  000023                     ___awtoft@sign:
  1492                           	opt stack 0
  1493                           
  1494                           ; 1 bytes @ 0x22
  1495  000023                     	ds	1
  1496  000024                     ??_FlashReadCondition:
  1497  000024                     ??___lltoft:
  1498  000024                     SendAckMessage@inRequest:
  1499                           	opt stack 0
  1500  000024                     ___lldiv@counter:
  1501                           	opt stack 0
  1502  000024                     SynthReadData@data:
  1503                           	opt stack 0
  1504                           
  1505                           ; 2 bytes @ 0x23
  1506  000024                     	ds	1
  1507  000025                     ??_GetMcuRunTime:
  1508  000025                     SendAckMessage@inGroup:
  1509                           	opt stack 0
  1510  000025                     StoreIntInEeprom@address:
  1511                           	opt stack 0
  1512                           
  1513                           ; 1 bytes @ 0x24
  1514  000025                     	ds	1
  1515  000026                     ?_strtol:
  1516                           	opt stack 0
  1517  000026                     StoreIntInEeprom@numOfByes:
  1518                           	opt stack 0
  1519  000026                     strtol@s:
  1520                           	opt stack 0
  1521  000026                     SWSPI_send_word@data:
  1522                           	opt stack 0
  1523  000026                     SendAckMessage@TxMsg:
  1524                           	opt stack 0
  1525                           
  1526                           ; 6 bytes @ 0x25
  1527  000026                     	ds	1
  1528  000027                     FLASH_WriteBlock@blockStartAddr:
  1529                           	opt stack 0
  1530                           
  1531                           ; 4 bytes @ 0x26
  1532  000027                     	ds	1
  1533  000028                     StoreIntInEeprom@val:
  1534                           	opt stack 0
  1535  000028                     ___lltoft@exp:
  1536                           	opt stack 0
  1537  000028                     strtol@endptr:
  1538                           	opt stack 0
  1539                           
  1540                           ; 2 bytes @ 0x27
  1541  000028                     	ds	1
  1542  000029                     ?___ftdiv:
  1543                           	opt stack 0
  1544  000029                     StoreIntInEeprom@idx:
  1545                           	opt stack 0
  1546  000029                     ___ftdiv@f1:
  1547                           	opt stack 0
  1548                           
  1549                           ; 3 bytes @ 0x28
  1550  000029                     	ds	1
  1551  00002A                     SWSPI_send_word@dataSize:
  1552                           	opt stack 0
  1553  00002A                     strtol@base:
  1554                           	opt stack 0
  1555                           
  1556                           ; 2 bytes @ 0x29
  1557  00002A                     	ds	1
  1558  00002B                     SWSPI_send_word@datac:
  1559                           	opt stack 0
  1560  00002B                     FLASH_WriteBlock@GIEBitValue:
  1561                           	opt stack 0
  1562                           
  1563                           ; 1 bytes @ 0x2A
  1564  00002B                     	ds	1
  1565  00002C                     ??_strtol:
  1566  00002C                     ??_testLeds:
  1567  00002C                     FLASH_WriteBlock@i:
  1568                           	opt stack 0
  1569  00002C                     SetAdcOperationMode@data:
  1570                           	opt stack 0
  1571  00002C                     SetConversionResultFormat@data:
  1572                           	opt stack 0
  1573  00002C                     SetChannelMode@data:
  1574                           	opt stack 0
  1575  00002C                     FlashReadUart@numOfSampleToRead:
  1576                           	opt stack 0
  1577  00002C                     DacSetValue@data:
  1578                           	opt stack 0
  1579  00002C                     UpdateRxFreq@data:
  1580                           	opt stack 0
  1581  00002C                     SWSPI_send_word@idx:
  1582                           	opt stack 0
  1583  00002C                     ___ftdiv@f2:
  1584                           	opt stack 0
  1585                           
  1586                           ; 3 bytes @ 0x2B
  1587  00002C                     	ds	1
  1588  00002D                     testLeds@idx:
  1589                           	opt stack 0
  1590  00002D                     FlashSampleWrite@sampleData:
  1591                           	opt stack 0
  1592                           
  1593                           ; 2 bytes @ 0x2C
  1594  00002D                     	ds	1
  1595  00002E                     SWSPI_send_word@phrType:
  1596                           	opt stack 0
  1597                           
  1598                           ; 1 bytes @ 0x2D
  1599  00002E                     	ds	1
  1600  00002F                     FlashSampleWrite@channelNum:
  1601                           	opt stack 0
  1602  00002F                     InitTxSynth@idx:
  1603                           	opt stack 0
  1604  00002F                     InitRxSynth@idx:
  1605                           	opt stack 0
  1606                           
  1607                           ; 1 bytes @ 0x2E
  1608  00002F                     	ds	1
  1609  000030                     tblptru	equ	0xFF8
  1610                           tblptrh	equ	0xFF7
  1611                           tblptrl	equ	0xFF6
  1612                           tablat	equ	0xFF5
  1613                           postinc0	equ	0xFEE
  1614                           wreg	equ	0xFE8
  1615                           postdec1	equ	0xFE5
  1616                           fsr1l	equ	0xFE1
  1617                           
  1618                           ; 1 bytes @ 0x2F
  1619 ;;
  1620 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1621 ;;
  1622 ;; *************** function _main *****************
  1623 ;; Defined at:
  1624 ;;		line 13 in file "main.c"
  1625 ;; Parameters:    Size  Location     Type
  1626 ;;		None
  1627 ;; Auto vars:     Size  Location     Type
  1628 ;;		None
  1629 ;; Return value:  Size  Location     Type
  1630 ;;                  1    wreg      void 
  1631 ;; Registers used:
  1632 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1633 ;; Tracked objects:
  1634 ;;		On entry : 0/0
  1635 ;;		On exit  : 0/0
  1636 ;;		Unchanged: 0/0
  1637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1638 ;;      Params:         0       0       0       0       0       0       0
  1639 ;;      Locals:         0       0       0       0       0       0       0
  1640 ;;      Temps:          0       0       0       0       0       0       0
  1641 ;;      Totals:         0       0       0       0       0       0       0
  1642 ;;Total ram usage:        0 bytes
  1643 ;; Hardware stack levels required when called:   11
  1644 ;; This function calls:
  1645 ;;		_AdcConvert
  1646 ;;		_BlinkErrorLeds
  1647 ;;		_BlinkOkLeds
  1648 ;;		_CheckFlashPrecentage
  1649 ;;		_InitSystemApplicationManagers
  1650 ;;		_SendSystemStartAck
  1651 ;;		_SetMcuRunTime
  1652 ;;		_SetMcuSystem
  1653 ;;		_keepAliveSignalLed
  1654 ;;		_keepAliveSignalUart
  1655 ;;		_readUartMessage
  1656 ;; This function is called by:
  1657 ;;		Startup code after reset
  1658 ;; This function uses a non-reentrant model
  1659 ;;
  1660                           
  1661                           	psect	text0
  1662  002B44                     __ptext0:
  1663                           	opt stack 0
  1664  002B44                     _main:
  1665                           	opt stack 20
  1666                           
  1667                           ;main.c: 16: SetMcuSystem();
  1668                           
  1669                           ;incstack = 0
  1670  002B44  EC9E  F01C         	call	_SetMcuSystem	;wreg free
  1671                           
  1672                           ;main.c: 19: InitSystemApplicationManagers();
  1673  002B48  EC1B  F01C         	call	_InitSystemApplicationManagers	;wreg free
  1674                           
  1675                           ;main.c: 22: SendSystemStartAck();
  1676  002B4C  EC98  F01C         	call	_SendSystemStartAck	;wreg free
  1677                           
  1678                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  1679  002B50  0E03               	movlw	3
  1680  002B52  ECD3  F015         	call	_BlinkOkLeds
  1681  002B56                     
  1682                           ;main.c: 28: {
  1683                           ;main.c: 29: readUartMessage();
  1684  002B56  EC33  F005         	call	_readUartMessage	;wreg free
  1685                           
  1686                           ;main.c: 31: if (TimerOneSecFlag == 1)
  1687  002B5A  0100               	movlb	0	; () banked
  1688  002B5C  05D8               	decf	_TimerOneSecFlag& (0+255),w,b	;volatile
  1689  002B5E  A4D8               	btfss	status,2,c
  1690  002B60  D006               	goto	l1453
  1691                           
  1692                           ; BSR set to: 0
  1693                           ;main.c: 32: {
  1694                           ;main.c: 34: SetMcuRunTime();
  1695  002B62  ECB7  F018         	call	_SetMcuRunTime	;wreg free
  1696                           
  1697                           ;main.c: 35: TimerOneSecFlag = 0;
  1698  002B66  0E00               	movlw	0
  1699  002B68  0100               	movlb	0	; () banked
  1700  002B6A  6FD8               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
  1701                           
  1702                           ;main.c: 36: }
  1703  002B6C  D7F4               	goto	l1452
  1704  002B6E                     l1453:
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;main.c: 37: else if (TimerSamplingFlag == 1)
  1708                           
  1709                           ; BSR set to: 0
  1710  002B6E  05D7               	decf	_TimerSamplingFlag& (0+255),w,b	;volatile
  1711  002B70  A4D8               	btfss	status,2,c
  1712  002B72  D010               	goto	l1455
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;main.c: 38: {
  1716                           ;main.c: 39: keepAliveSignalLed();
  1717  002B74  EC04  F01C         	call	_keepAliveSignalLed	;wreg free
  1718                           
  1719                           ;main.c: 41: if(1 == CheckFlashPrecentage())
  1720  002B78  EC4E  F011         	call	_CheckFlashPrecentage	;wreg free
  1721  002B7C  06E8               	decf	wreg,f,c
  1722  002B7E  A4D8               	btfss	status,2,c
  1723  002B80  D003               	goto	l1456
  1724                           
  1725                           ;main.c: 42: {
  1726                           ;main.c: 43: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  1727  002B82  0E04               	movlw	4
  1728  002B84  EC02  F016         	call	_BlinkErrorLeds
  1729  002B88                     l1456:
  1730                           
  1731                           ;main.c: 44: }
  1732                           ;main.c: 47: AdcConvert();
  1733  002B88  EC15  F008         	call	_AdcConvert	;wreg free
  1734                           
  1735                           ;main.c: 49: TimerSamplingFlag = 0;
  1736  002B8C  0E00               	movlw	0
  1737  002B8E  0100               	movlb	0	; () banked
  1738  002B90  6FD7               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
  1739                           
  1740                           ;main.c: 50: }
  1741  002B92  D7E1               	goto	l1452
  1742  002B94                     l1455:
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;main.c: 51: else if (TimerKeepAliveFlag == 1)
  1746                           
  1747                           ; BSR set to: 0
  1748  002B94  05D6               	decf	_TimerKeepAliveFlag& (0+255),w,b	;volatile
  1749  002B96  A4D8               	btfss	status,2,c
  1750  002B98  D7DE               	goto	l1452
  1751                           
  1752                           ; BSR set to: 0
  1753                           ;main.c: 52: {
  1754                           ;main.c: 53: keepAliveSignalUart();
  1755  002B9A  EC92  F01C         	call	_keepAliveSignalUart	;wreg free
  1756                           
  1757                           ;main.c: 54: TimerKeepAliveFlag = 0;
  1758  002B9E  0E00               	movlw	0
  1759  002BA0  0100               	movlb	0	; () banked
  1760  002BA2  6FD6               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
  1761                           
  1762                           ; BSR set to: 0
  1763                           
  1764                           ; BSR set to: 0
  1765                           
  1766                           ; BSR set to: 0
  1767                           
  1768                           ; BSR set to: 0
  1769  002BA4  D7D8               	goto	l1452
  1770  002BA6                     __end_of_main:
  1771                           	opt stack 0
  1772                           tblptru	equ	0xFF8
  1773                           tblptrh	equ	0xFF7
  1774                           tblptrl	equ	0xFF6
  1775                           tablat	equ	0xFF5
  1776                           postinc0	equ	0xFEE
  1777                           wreg	equ	0xFE8
  1778                           postdec1	equ	0xFE5
  1779                           fsr1l	equ	0xFE1
  1780                           status	equ	0xFD8
  1781                           
  1782 ;; *************** function _readUartMessage *****************
  1783 ;; Defined at:
  1784 ;;		line 28 in file "EusartApp.c"
  1785 ;; Parameters:    Size  Location     Type
  1786 ;;		None
  1787 ;; Auto vars:     Size  Location     Type
  1788 ;;  idx             2    7[BANK1 ] int 
  1789 ;;  chRec           1    9[BANK1 ] unsigned char 
  1790 ;; Return value:  Size  Location     Type
  1791 ;;                  1    wreg      void 
  1792 ;; Registers used:
  1793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1794 ;; Tracked objects:
  1795 ;;		On entry : 0/0
  1796 ;;		On exit  : 0/0
  1797 ;;		Unchanged: 0/0
  1798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1799 ;;      Params:         0       0       0       0       0       0       0
  1800 ;;      Locals:         0       0       3       0       0       0       0
  1801 ;;      Temps:          0       0       4       0       0       0       0
  1802 ;;      Totals:         0       0       7       0       0       0       0
  1803 ;;Total ram usage:        7 bytes
  1804 ;; Hardware stack levels used:    1
  1805 ;; Hardware stack levels required when called:   10
  1806 ;; This function calls:
  1807 ;;		_EUSART1_Read
  1808 ;;		_GroupAdc
  1809 ;;		_GroupControlMcu
  1810 ;;		_GroupDAC
  1811 ;;		_GroupFlashMemory
  1812 ;;		_GroupStatusAndVersion
  1813 ;;		_GroupSynthesizers
  1814 ;;		_InitRxMessageParams
  1815 ;;		_ZeroArray
  1816 ;;		_crc8
  1817 ;; This function is called by:
  1818 ;;		_main
  1819 ;; This function uses a non-reentrant model
  1820 ;;
  1821                           
  1822                           	psect	text1
  1823  000A66                     __ptext1:
  1824                           	opt stack 0
  1825  000A66                     _readUartMessage:
  1826                           	opt stack 20
  1827                           
  1828                           ;EusartApp.c: 31: uint8_t chRec = (0);
  1829                           
  1830                           ; BSR set to: 0
  1831                           ;incstack = 0
  1832  000A66  0E00               	movlw	0
  1833  000A68  0101               	movlb	1	; () banked
  1834  000A6A  6FCB               	movwf	readUartMessage@chRec& (0+255),b
  1835                           
  1836                           ;EusartApp.c: 32: switch(cState)
  1837  000A6C  D0DF               	goto	l190
  1838  000A6E                     
  1839                           ;EusartApp.c: 37: if(eusart1RxCount > (4))
  1840                           
  1841                           ; BSR set to: 1
  1842  000A6E  0E04               	movlw	4
  1843  000A70  0100               	movlb	0	; () banked
  1844  000A72  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1845  000A74  0012               	return	
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;EusartApp.c: 38: {
  1849                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  1850  000A76  0E01               	movlw	1
  1851  000A78  6FD2               	movwf	_cState& (0+255),b
  1852                           
  1853                           ; BSR set to: 0
  1854                           ;EusartApp.c: 40: }
  1855                           ;EusartApp.c: 41: return;
  1856                           
  1857                           ; BSR set to: 0
  1858  000A7A  0012               	return	
  1859  000A7C                     
  1860                           ; BSR set to: 0
  1861                           ;EusartApp.c: 45: InitRxMessageParams();
  1862                           
  1863                           ; BSR set to: 0
  1864  000A7C  ECF3  F01A         	call	_InitRxMessageParams	;wreg free
  1865                           
  1866                           ;EusartApp.c: 46: msgCount = 0;
  1867  000A80  0E00               	movlw	0
  1868  000A82  0100               	movlb	0	; () banked
  1869  000A84  6FCB               	movwf	_msgCount& (0+255),b
  1870                           
  1871                           ; BSR set to: 0
  1872                           ;EusartApp.c: 47: if(eusart1RxCount > 1)
  1873  000A86  0E01               	movlw	1
  1874  000A88  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1875  000A8A  D00E               	goto	l195
  1876                           
  1877                           ; BSR set to: 0
  1878                           ;EusartApp.c: 48: {
  1879                           ;EusartApp.c: 49: chRec = EUSART1_Read();
  1880  000A8C  EC95  F018         	call	_EUSART1_Read	;wreg free
  1881  000A90  0101               	movlb	1	; () banked
  1882  000A92  6FCB               	movwf	readUartMessage@chRec& (0+255),b
  1883                           
  1884                           ; BSR set to: 1
  1885                           ;EusartApp.c: 50: rxMsgQueue[(0)] = chRec;
  1886  000A94  C1CB  F0D9         	movff	readUartMessage@chRec,_rxMsgQueue
  1887                           
  1888                           ; BSR set to: 1
  1889                           ;EusartApp.c: 51: if(chRec == (0x24))
  1890  000A98  0E24               	movlw	36
  1891  000A9A  19CB               	xorwf	readUartMessage@chRec& (0+255),w,b
  1892  000A9C  A4D8               	btfss	status,2,c
  1893  000A9E  0012               	return	
  1894                           
  1895                           ; BSR set to: 1
  1896                           ;EusartApp.c: 52: {
  1897                           ;EusartApp.c: 53: cState = READ_GROUP;
  1898  000AA0  0E02               	movlw	2
  1899  000AA2  0100               	movlb	0	; () banked
  1900  000AA4  6FD2               	movwf	_cState& (0+255),b
  1901                           
  1902                           ; BSR set to: 0
  1903                           ;EusartApp.c: 54: }
  1904                           ;EusartApp.c: 55: }
  1905  000AA6  0012               	return	
  1906  000AA8                     l195:
  1907                           
  1908                           ; BSR set to: 0
  1909                           ;EusartApp.c: 56: else
  1910                           ;EusartApp.c: 57: {
  1911                           ;EusartApp.c: 58: cState = START_RX_MESSAGE_READ;
  1912                           
  1913                           ; BSR set to: 0
  1914  000AA8  0E00               	movlw	0
  1915  000AAA  6FD2               	movwf	_cState& (0+255),b
  1916                           
  1917                           ; BSR set to: 0
  1918                           ;EusartApp.c: 59: }
  1919                           ;EusartApp.c: 61: break;
  1920  000AAC  0012               	return	
  1921  000AAE                     
  1922                           ; BSR set to: 0
  1923                           ;EusartApp.c: 65: if(eusart1RxCount > 1)
  1924                           
  1925                           ; BSR set to: 0
  1926  000AAE  0E01               	movlw	1
  1927  000AB0  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1928  000AB2  0012               	return	
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;EusartApp.c: 66: {
  1932                           ;EusartApp.c: 67: group = EUSART1_Read();
  1933  000AB4  EC95  F018         	call	_EUSART1_Read	;wreg free
  1934  000AB8  0100               	movlb	0	; () banked
  1935  000ABA  6FD1               	movwf	_group& (0+255),b
  1936                           
  1937                           ; BSR set to: 0
  1938                           ;EusartApp.c: 68: rxMsgQueue[(1)] = group;
  1939  000ABC  C0D1  F0DA         	movff	_group,_rxMsgQueue+1
  1940                           
  1941                           ; BSR set to: 0
  1942                           ;EusartApp.c: 69: cState = READ_REQUEST;
  1943  000AC0  0E03               	movlw	3
  1944  000AC2  6FD2               	movwf	_cState& (0+255),b
  1945                           
  1946                           ; BSR set to: 0
  1947                           ;EusartApp.c: 70: }
  1948                           ;EusartApp.c: 71: break;
  1949  000AC4  0012               	return	
  1950  000AC6                     
  1951                           ; BSR set to: 0
  1952                           ;EusartApp.c: 75: if(eusart1RxCount > 1)
  1953                           
  1954                           ; BSR set to: 0
  1955  000AC6  0E01               	movlw	1
  1956  000AC8  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1957  000ACA  0012               	return	
  1958                           
  1959                           ; BSR set to: 0
  1960                           ;EusartApp.c: 76: {
  1961                           ;EusartApp.c: 77: request = EUSART1_Read();
  1962  000ACC  EC95  F018         	call	_EUSART1_Read	;wreg free
  1963  000AD0  0100               	movlb	0	; () banked
  1964  000AD2  6FD0               	movwf	_request& (0+255),b
  1965                           
  1966                           ; BSR set to: 0
  1967                           ;EusartApp.c: 78: rxMsgQueue[(2)] = request;
  1968  000AD4  C0D0  F0DB         	movff	_request,_rxMsgQueue+2
  1969                           
  1970                           ; BSR set to: 0
  1971                           ;EusartApp.c: 79: cState = READ_DATA_SIZE;
  1972  000AD8  0E04               	movlw	4
  1973  000ADA  6FD2               	movwf	_cState& (0+255),b
  1974                           
  1975                           ; BSR set to: 0
  1976                           ;EusartApp.c: 80: }
  1977                           ;EusartApp.c: 81: break;
  1978  000ADC  0012               	return	
  1979  000ADE                     
  1980                           ; BSR set to: 0
  1981                           ;EusartApp.c: 84: if(eusart1RxCount > 1)
  1982                           
  1983                           ; BSR set to: 0
  1984  000ADE  0E01               	movlw	1
  1985  000AE0  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1986  000AE2  0012               	return	
  1987                           
  1988                           ; BSR set to: 0
  1989                           ;EusartApp.c: 85: {
  1990                           ;EusartApp.c: 86: dataSize = EUSART1_Read();
  1991  000AE4  EC95  F018         	call	_EUSART1_Read	;wreg free
  1992  000AE8  0100               	movlb	0	; () banked
  1993  000AEA  6FCF               	movwf	_dataSize& (0+255),b
  1994                           
  1995                           ; BSR set to: 0
  1996                           ;EusartApp.c: 87: rxMsgQueue[(3)] = dataSize;
  1997  000AEC  C0CF  F0DC         	movff	_dataSize,_rxMsgQueue+3
  1998                           
  1999                           ; BSR set to: 0
  2000                           ;EusartApp.c: 88: if(dataSize == 0)
  2001  000AF0  51CF               	movf	_dataSize& (0+255),w,b
  2002  000AF2  A4D8               	btfss	status,2,c
  2003  000AF4  D003               	goto	l205
  2004                           
  2005                           ; BSR set to: 0
  2006                           ;EusartApp.c: 89: {
  2007                           ;EusartApp.c: 90: cState = CHECK_CRC;
  2008  000AF6  0E06               	movlw	6
  2009  000AF8  6FD2               	movwf	_cState& (0+255),b
  2010                           
  2011                           ;EusartApp.c: 91: }
  2012  000AFA  0012               	return	
  2013  000AFC                     l205:
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;EusartApp.c: 92: else
  2017                           ;EusartApp.c: 93: {
  2018                           ;EusartApp.c: 94: cState = READ_DATA;
  2019                           
  2020                           ; BSR set to: 0
  2021  000AFC  0E05               	movlw	5
  2022  000AFE  6FD2               	movwf	_cState& (0+255),b
  2023                           
  2024                           ; BSR set to: 0
  2025                           ;EusartApp.c: 95: }
  2026                           ;EusartApp.c: 97: }
  2027                           ;EusartApp.c: 99: break;
  2028                           
  2029                           ; BSR set to: 0
  2030  000B00  0012               	return	
  2031  000B02                     
  2032                           ; BSR set to: 0
  2033                           ;EusartApp.c: 103: if(eusart1RxCount >= dataSize)
  2034                           
  2035                           ; BSR set to: 0
  2036  000B02  51CF               	movf	_dataSize& (0+255),w,b
  2037  000B04  5DD3               	subwf	_eusart1RxCount& (0+255),w,b	;volatile
  2038  000B06  A0D8               	btfss	status,0,c
  2039  000B08  0012               	return	
  2040                           
  2041                           ; BSR set to: 0
  2042                           ;EusartApp.c: 104: {
  2043                           ;EusartApp.c: 105: ZeroArray(rxMsgData, (0x14));
  2044  000B0A  0EAE               	movlw	low _rxMsgData
  2045  000B0C  6E20               	movwf	ZeroArray@array,c
  2046  000B0E  0E01               	movlw	high _rxMsgData
  2047  000B10  6E21               	movwf	ZeroArray@array+1,c
  2048  000B12  0E00               	movlw	0
  2049  000B14  6E23               	movwf	ZeroArray@size+1,c
  2050  000B16  0E14               	movlw	20
  2051  000B18  6E22               	movwf	ZeroArray@size,c
  2052  000B1A  ECCB  F01B         	call	_ZeroArray	;wreg free
  2053                           
  2054                           ;EusartApp.c: 107: for(int idx = 0; idx < dataSize; idx++)
  2055  000B1E  0E00               	movlw	0
  2056  000B20  0101               	movlb	1	; () banked
  2057  000B22  6FCA               	movwf	(readUartMessage@idx+1)& (0+255),b
  2058  000B24  0E00               	movlw	0
  2059  000B26  6FC9               	movwf	readUartMessage@idx& (0+255),b
  2060  000B28  D022               	goto	l209
  2061  000B2A                     
  2062                           ; BSR set to: 1
  2063                           ;EusartApp.c: 108: {
  2064                           ;EusartApp.c: 109: chRec = EUSART1_Read();
  2065                           
  2066                           ; BSR set to: 1
  2067  000B2A  EC95  F018         	call	_EUSART1_Read	;wreg free
  2068  000B2E  0101               	movlb	1	; () banked
  2069  000B30  6FCB               	movwf	readUartMessage@chRec& (0+255),b
  2070                           
  2071                           ; BSR set to: 1
  2072                           ;EusartApp.c: 110: rxMsgQueue[(0x4) + msgCount++] = chRec;
  2073  000B32  0100               	movlb	0	; () banked
  2074  000B34  51CB               	movf	_msgCount& (0+255),w,b
  2075  000B36  0101               	movlb	1	; () banked
  2076  000B38  6FC5               	movwf	??_readUartMessage& (0+255),b
  2077  000B3A  6BC6               	clrf	(??_readUartMessage+1)& (0+255),b
  2078  000B3C  0E04               	movlw	4
  2079  000B3E  27C5               	addwf	??_readUartMessage& (0+255),f,b
  2080  000B40  0E00               	movlw	0
  2081  000B42  23C6               	addwfc	(??_readUartMessage+1)& (0+255),f,b
  2082  000B44  0ED9               	movlw	low _rxMsgQueue
  2083  000B46  25C5               	addwf	??_readUartMessage& (0+255),w,b
  2084  000B48  6ED9               	movwf	fsr2l,c
  2085  000B4A  0E00               	movlw	high _rxMsgQueue
  2086  000B4C  21C6               	addwfc	(??_readUartMessage+1)& (0+255),w,b
  2087  000B4E  6EDA               	movwf	fsr2h,c
  2088  000B50  C1CB  FFDF         	movff	readUartMessage@chRec,indf2
  2089                           
  2090                           ; BSR set to: 1
  2091  000B54  0100               	movlb	0	; () banked
  2092  000B56  2BCB               	incf	_msgCount& (0+255),f,b
  2093                           
  2094                           ; BSR set to: 0
  2095                           ;EusartApp.c: 111: rxMsgData[idx] = chRec;
  2096  000B58  0EAE               	movlw	low _rxMsgData
  2097  000B5A  0101               	movlb	1	; () banked
  2098  000B5C  25C9               	addwf	readUartMessage@idx& (0+255),w,b
  2099  000B5E  6ED9               	movwf	fsr2l,c
  2100  000B60  0E01               	movlw	high _rxMsgData
  2101  000B62  21CA               	addwfc	(readUartMessage@idx+1)& (0+255),w,b
  2102  000B64  6EDA               	movwf	fsr2h,c
  2103  000B66  C1CB  FFDF         	movff	readUartMessage@chRec,indf2
  2104                           
  2105                           ; BSR set to: 1
  2106  000B6A  4BC9               	infsnz	readUartMessage@idx& (0+255),f,b
  2107  000B6C  2BCA               	incf	(readUartMessage@idx+1)& (0+255),f,b
  2108  000B6E                     l209:
  2109                           
  2110                           ; BSR set to: 1
  2111                           
  2112                           ; BSR set to: 1
  2113  000B6E  0100               	movlb	0	; () banked
  2114  000B70  51CF               	movf	_dataSize& (0+255),w,b
  2115  000B72  0101               	movlb	1	; () banked
  2116  000B74  6FC5               	movwf	??_readUartMessage& (0+255),b
  2117  000B76  6BC6               	clrf	(??_readUartMessage+1)& (0+255),b
  2118  000B78  51C5               	movf	??_readUartMessage& (0+255),w,b
  2119  000B7A  5DC9               	subwf	readUartMessage@idx& (0+255),w,b
  2120  000B7C  51CA               	movf	(readUartMessage@idx+1)& (0+255),w,b
  2121  000B7E  0A80               	xorlw	128
  2122  000B80  6FC7               	movwf	(??_readUartMessage+2)& (0+255),b
  2123  000B82  51C6               	movf	(??_readUartMessage+1)& (0+255),w,b
  2124  000B84  0A80               	xorlw	128
  2125  000B86  59C7               	subwfb	(??_readUartMessage+2)& (0+255),w,b
  2126  000B88  A0D8               	btfss	status,0,c
  2127  000B8A  D7CF               	goto	l210
  2128                           
  2129                           ; BSR set to: 1
  2130                           ;EusartApp.c: 112: }
  2131                           ;EusartApp.c: 114: cState = CHECK_CRC;
  2132                           
  2133                           ; BSR set to: 1
  2134  000B8C  0E06               	movlw	6
  2135  000B8E  0100               	movlb	0	; () banked
  2136  000B90  6FD2               	movwf	_cState& (0+255),b
  2137                           
  2138                           ; BSR set to: 0
  2139                           ;EusartApp.c: 115: }
  2140                           ;EusartApp.c: 116: break;
  2141  000B92  0012               	return	
  2142  000B94                     
  2143                           ; BSR set to: 0
  2144                           ;EusartApp.c: 119: if(eusart1RxCount >= 1)
  2145                           
  2146                           ; BSR set to: 0
  2147  000B94  51D3               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  2148  000B96  B4D8               	btfsc	status,2,c
  2149  000B98  0012               	return	
  2150                           
  2151                           ; BSR set to: 0
  2152                           ;EusartApp.c: 120: {
  2153                           ;EusartApp.c: 121: crcGiven = EUSART1_Read();
  2154  000B9A  EC95  F018         	call	_EUSART1_Read	;wreg free
  2155  000B9E  0100               	movlb	0	; () banked
  2156  000BA0  6FCC               	movwf	_crcGiven& (0+255),b
  2157                           
  2158                           ; BSR set to: 0
  2159                           ;EusartApp.c: 122: crcCalc = crc8(rxMsgQueue, (0x4) + msgCount);
  2160  000BA2  0ED9               	movlw	low _rxMsgQueue
  2161  000BA4  6E18               	movwf	crc8@dataArray,c
  2162  000BA6  0E00               	movlw	high _rxMsgQueue
  2163  000BA8  6E19               	movwf	crc8@dataArray+1,c
  2164  000BAA  0E04               	movlw	4
  2165  000BAC  25CB               	addwf	_msgCount& (0+255),w,b
  2166  000BAE  6E1A               	movwf	crc8@dataSize,c
  2167  000BB0  6A1B               	clrf	crc8@dataSize+1,c
  2168  000BB2  0E00               	movlw	0
  2169  000BB4  221B               	addwfc	crc8@dataSize+1,f,c
  2170  000BB6  ECB8  F017         	call	_crc8	;wreg free
  2171  000BBA  0100               	movlb	0	; () banked
  2172  000BBC  6FCD               	movwf	_crcCalc& (0+255),b
  2173                           
  2174                           ; BSR set to: 0
  2175                           ;EusartApp.c: 124: if(crcGiven == crcCalc)
  2176  000BBE  51CD               	movf	_crcCalc& (0+255),w,b
  2177  000BC0  19CC               	xorwf	_crcGiven& (0+255),w,b
  2178  000BC2  A4D8               	btfss	status,2,c
  2179  000BC4  D003               	goto	l214
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;EusartApp.c: 125: {
  2183                           ;EusartApp.c: 126: cState = JUMP_FUNCTION;
  2184  000BC6  0E07               	movlw	7
  2185  000BC8  6FD2               	movwf	_cState& (0+255),b
  2186                           
  2187                           ;EusartApp.c: 127: }
  2188  000BCA  0012               	return	
  2189  000BCC                     l214:
  2190                           
  2191                           ; BSR set to: 0
  2192                           ;EusartApp.c: 128: else
  2193                           ;EusartApp.c: 129: {
  2194                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  2195                           
  2196                           ; BSR set to: 0
  2197  000BCC  0E00               	movlw	0
  2198  000BCE  6FD2               	movwf	_cState& (0+255),b
  2199                           
  2200                           ; BSR set to: 0
  2201                           ;EusartApp.c: 131: }
  2202                           ;EusartApp.c: 132: }
  2203                           ;EusartApp.c: 133: break;
  2204                           
  2205                           ; BSR set to: 0
  2206  000BD0  0012               	return	
  2207  000BD2                     
  2208                           ; BSR set to: 0
  2209                           ;EusartApp.c: 136: groupsArray[group - 1](request, rxMsgData);
  2210                           
  2211                           ; BSR set to: 0
  2212  000BD2  0EFE               	movlw	254
  2213  000BD4  0101               	movlb	1	; () banked
  2214  000BD6  6FC5               	movwf	??_readUartMessage& (0+255),b
  2215  000BD8  0EFF               	movlw	255
  2216  000BDA  6FC6               	movwf	(??_readUartMessage+1)& (0+255),b
  2217  000BDC  0100               	movlb	0	; () banked
  2218  000BDE  51D1               	movf	_group& (0+255),w,b
  2219  000BE0  0101               	movlb	1	; () banked
  2220  000BE2  6FC7               	movwf	(??_readUartMessage+2)& (0+255),b
  2221  000BE4  6BC8               	clrf	(??_readUartMessage+3)& (0+255),b
  2222  000BE6  90D8               	bcf	status,0,c
  2223  000BE8  37C7               	rlcf	(??_readUartMessage+2)& (0+255),f,b
  2224  000BEA  37C8               	rlcf	(??_readUartMessage+3)& (0+255),f,b
  2225  000BEC  51C5               	movf	??_readUartMessage& (0+255),w,b
  2226  000BEE  27C7               	addwf	(??_readUartMessage+2)& (0+255),f,b
  2227  000BF0  51C6               	movf	(??_readUartMessage+1)& (0+255),w,b
  2228  000BF2  23C8               	addwfc	(??_readUartMessage+3)& (0+255),f,b
  2229  000BF4  0EED               	movlw	low _groupsArray
  2230  000BF6  25C7               	addwf	(??_readUartMessage+2)& (0+255),w,b
  2231  000BF8  6ED9               	movwf	fsr2l,c
  2232  000BFA  0E00               	movlw	high _groupsArray
  2233  000BFC  21C8               	addwfc	(??_readUartMessage+3)& (0+255),w,b
  2234  000BFE  6EDA               	movwf	fsr2h,c
  2235  000C00  D801               	call	u8408
  2236  000C02  D010               	goto	u8409
  2237  000C04                     u8408:
  2238  000C04  0005               	push	
  2239  000C06  6EFA               	movwf	pclath,c
  2240  000C08  50DE               	movf	postinc2,w,c
  2241  000C0A  6EFD               	movwf	tosl,c
  2242  000C0C  50DE               	movf	postinc2,w,c
  2243  000C0E  6EFE               	movwf	tosh,c
  2244  000C10  50F8               	movf	tblptru,w,c
  2245  000C12  6EFF               	movwf	tosu,c
  2246  000C14  50FA               	movf	pclath,w,c
  2247  000C16  0EAE               	movlw	low _rxMsgData
  2248  000C18  6FC2               	movwf	GroupDAC@data& (0+255),b
  2249  000C1A  0E01               	movlw	high _rxMsgData
  2250  000C1C  6FC3               	movwf	(GroupDAC@data+1)& (0+255),b
  2251  000C1E  0100               	movlb	0	; () banked
  2252  000C20  51D0               	movf	_request& (0+255),w,b
  2253  000C22  0012               	return		;indir
  2254  000C24                     u8409:
  2255                           
  2256                           ;EusartApp.c: 137: cState = START_RX_MESSAGE_READ;
  2257  000C24  0E00               	movlw	0
  2258  000C26  0100               	movlb	0	; () banked
  2259  000C28  6FD2               	movwf	_cState& (0+255),b
  2260                           
  2261                           ; BSR set to: 0
  2262                           ;EusartApp.c: 139: }
  2263                           
  2264                           ;EusartApp.c: 138: break;
  2265  000C2A  0012               	return	
  2266  000C2C                     l190:
  2267                           
  2268                           ; BSR set to: 0
  2269  000C2C  0100               	movlb	0	; () banked
  2270  000C2E  51D2               	movf	_cState& (0+255),w,b
  2271                           
  2272                           ; Switch size 1, requested type "space"
  2273                           ; Number of cases is 8, Range of values is 0 to 7
  2274                           ; switch strategies available:
  2275                           ; Name         Instructions Cycles
  2276                           ; simple_byte           25    13 (average)
  2277                           ;	Chosen strategy is simple_byte
  2278  000C30  0A00               	xorlw	0	; case 0
  2279  000C32  B4D8               	btfsc	status,2,c
  2280  000C34  D71C               	goto	l191
  2281  000C36  0A01               	xorlw	1	; case 1
  2282  000C38  B4D8               	btfsc	status,2,c
  2283  000C3A  D720               	goto	l194
  2284  000C3C  0A03               	xorlw	3	; case 2
  2285  000C3E  B4D8               	btfsc	status,2,c
  2286  000C40  D736               	goto	l199
  2287  000C42  0A01               	xorlw	1	; case 3
  2288  000C44  B4D8               	btfsc	status,2,c
  2289  000C46  D73F               	goto	l201
  2290  000C48  0A07               	xorlw	7	; case 4
  2291  000C4A  B4D8               	btfsc	status,2,c
  2292  000C4C  D748               	goto	l203
  2293  000C4E  0A01               	xorlw	1	; case 5
  2294  000C50  B4D8               	btfsc	status,2,c
  2295  000C52  D757               	goto	l207
  2296  000C54  0A03               	xorlw	3	; case 6
  2297  000C56  B4D8               	btfsc	status,2,c
  2298  000C58  D79D               	goto	l212
  2299  000C5A  0A01               	xorlw	1	; case 7
  2300  000C5C  A4D8               	btfss	status,2,c
  2301  000C5E  0012               	return	
  2302  000C60  D7B8               	goto	l216
  2303  000C62                     __end_of_readUartMessage:
  2304                           	opt stack 0
  2305                           tosu	equ	0xFFF
  2306                           tosh	equ	0xFFE
  2307                           tosl	equ	0xFFD
  2308                           pclath	equ	0xFFA
  2309                           tblptru	equ	0xFF8
  2310                           tblptrh	equ	0xFF7
  2311                           tblptrl	equ	0xFF6
  2312                           tablat	equ	0xFF5
  2313                           postinc0	equ	0xFEE
  2314                           wreg	equ	0xFE8
  2315                           postdec1	equ	0xFE5
  2316                           fsr1l	equ	0xFE1
  2317                           indf2	equ	0xFDF
  2318                           postinc2	equ	0xFDE
  2319                           fsr2h	equ	0xFDA
  2320                           fsr2l	equ	0xFD9
  2321                           status	equ	0xFD8
  2322                           
  2323 ;; *************** function _InitRxMessageParams *****************
  2324 ;; Defined at:
  2325 ;;		line 142 in file "EusartApp.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;		None
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;		None
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  1    wreg      void 
  2332 ;; Registers used:
  2333 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2339 ;;      Params:         0       0       0       0       0       0       0
  2340 ;;      Locals:         0       0       0       0       0       0       0
  2341 ;;      Temps:          0       0       0       0       0       0       0
  2342 ;;      Totals:         0       0       0       0       0       0       0
  2343 ;;Total ram usage:        0 bytes
  2344 ;; Hardware stack levels used:    1
  2345 ;; Hardware stack levels required when called:    5
  2346 ;; This function calls:
  2347 ;;		_ZeroArray
  2348 ;; This function is called by:
  2349 ;;		_readUartMessage
  2350 ;; This function uses a non-reentrant model
  2351 ;;
  2352                           
  2353                           	psect	text2
  2354  0035E6                     __ptext2:
  2355                           	opt stack 0
  2356  0035E6                     _InitRxMessageParams:
  2357                           	opt stack 24
  2358                           
  2359                           ;EusartApp.c: 146: dataSize = 0;
  2360                           
  2361                           ;incstack = 0
  2362  0035E6  0E00               	movlw	0
  2363  0035E8  0100               	movlb	0	; () banked
  2364  0035EA  6FCF               	movwf	_dataSize& (0+255),b
  2365                           
  2366                           ;EusartApp.c: 147: crcCalc = 0;
  2367  0035EC  0E00               	movlw	0
  2368  0035EE  6FCD               	movwf	_crcCalc& (0+255),b
  2369                           
  2370                           ;EusartApp.c: 148: crcGiven = 0;
  2371  0035F0  0E00               	movlw	0
  2372  0035F2  6FCC               	movwf	_crcGiven& (0+255),b
  2373                           
  2374                           ;EusartApp.c: 149: msgCount = 0;
  2375  0035F4  0E00               	movlw	0
  2376  0035F6  6FCB               	movwf	_msgCount& (0+255),b
  2377                           
  2378                           ; BSR set to: 0
  2379                           ;EusartApp.c: 150: ZeroArray(rxMsgQueue, (0x14));
  2380  0035F8  0ED9               	movlw	low _rxMsgQueue
  2381  0035FA  6E20               	movwf	ZeroArray@array,c
  2382  0035FC  0E00               	movlw	high _rxMsgQueue
  2383  0035FE  6E21               	movwf	ZeroArray@array+1,c
  2384  003600  0E00               	movlw	0
  2385  003602  6E23               	movwf	ZeroArray@size+1,c
  2386  003604  0E14               	movlw	20
  2387  003606  6E22               	movwf	ZeroArray@size,c
  2388  003608  ECCB  F01B         	call	_ZeroArray
  2389  00360C  0012               	return		;funcret
  2390  00360E                     __end_of_InitRxMessageParams:
  2391                           	opt stack 0
  2392                           tosu	equ	0xFFF
  2393                           tosh	equ	0xFFE
  2394                           tosl	equ	0xFFD
  2395                           pclath	equ	0xFFA
  2396                           tblptru	equ	0xFF8
  2397                           tblptrh	equ	0xFF7
  2398                           tblptrl	equ	0xFF6
  2399                           tablat	equ	0xFF5
  2400                           postinc0	equ	0xFEE
  2401                           wreg	equ	0xFE8
  2402                           postdec1	equ	0xFE5
  2403                           fsr1l	equ	0xFE1
  2404                           indf2	equ	0xFDF
  2405                           postinc2	equ	0xFDE
  2406                           fsr2h	equ	0xFDA
  2407                           fsr2l	equ	0xFD9
  2408                           status	equ	0xFD8
  2409                           
  2410 ;; *************** function _GroupDAC *****************
  2411 ;; Defined at:
  2412 ;;		line 133 in file "MessageFunctions.c"
  2413 ;; Parameters:    Size  Location     Type
  2414 ;;  request         1    wreg     enum E12
  2415 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2416 ;;		 -> rxMsgData(20), 
  2417 ;; Auto vars:     Size  Location     Type
  2418 ;;  request         1   95[BANK0 ] enum E12
  2419 ;; Return value:  Size  Location     Type
  2420 ;;                  1    wreg      void 
  2421 ;; Registers used:
  2422 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2423 ;; Tracked objects:
  2424 ;;		On entry : 0/0
  2425 ;;		On exit  : 0/0
  2426 ;;		Unchanged: 0/0
  2427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2428 ;;      Params:         0       0       2       0       0       0       0
  2429 ;;      Locals:         0       1       0       0       0       0       0
  2430 ;;      Temps:          0       0       0       0       0       0       0
  2431 ;;      Totals:         0       1       2       0       0       0       0
  2432 ;;Total ram usage:        3 bytes
  2433 ;; Hardware stack levels used:    1
  2434 ;; Hardware stack levels required when called:    7
  2435 ;; This function calls:
  2436 ;;		_DacSetValue
  2437 ;; This function is called by:
  2438 ;;		_readUartMessage
  2439 ;; This function uses a non-reentrant model
  2440 ;;
  2441                           
  2442                           	psect	text3
  2443  00373A                     __ptext3:
  2444                           	opt stack 0
  2445  00373A                     _GroupDAC:
  2446                           	opt stack 22
  2447                           
  2448                           ;incstack = 0
  2449                           ;GroupDAC@request stored from wreg
  2450  00373A  0100               	movlb	0	; () banked
  2451  00373C  6FBF               	movwf	GroupDAC@request& (0+255),b
  2452                           
  2453                           ;MessageFunctions.c: 135: switch (request)
  2454  00373E  D007               	goto	l1236
  2455  003740                     
  2456                           ;MessageFunctions.c: 138: DacSetValue(data);
  2457  003740  C1C2  F02C         	movff	GroupDAC@data,DacSetValue@data
  2458  003744  C1C3  F02D         	movff	GroupDAC@data+1,DacSetValue@data+1
  2459  003748  EC80  F01C         	call	_DacSetValue	;wreg free
  2460                           
  2461                           ;MessageFunctions.c: 143: }
  2462                           
  2463                           ;MessageFunctions.c: 142: break;
  2464                           
  2465                           ;MessageFunctions.c: 141: default:
  2466                           
  2467                           ;MessageFunctions.c: 139: break;
  2468  00374C  0012               	return	
  2469  00374E                     l1236:
  2470  00374E  0100               	movlb	0	; () banked
  2471  003750  51BF               	movf	GroupDAC@request& (0+255),w,b
  2472                           
  2473                           ; Switch size 1, requested type "space"
  2474                           ; Number of cases is 1, Range of values is 97 to 97
  2475                           ; switch strategies available:
  2476                           ; Name         Instructions Cycles
  2477                           ; simple_byte            4     3 (average)
  2478                           ;	Chosen strategy is simple_byte
  2479  003752  0A61               	xorlw	97	; case 97
  2480  003754  A4D8               	btfss	status,2,c
  2481  003756  0012               	return	
  2482  003758  D7F3               	goto	l1237
  2483  00375A                     __end_of_GroupDAC:
  2484                           	opt stack 0
  2485                           tosu	equ	0xFFF
  2486                           tosh	equ	0xFFE
  2487                           tosl	equ	0xFFD
  2488                           pclath	equ	0xFFA
  2489                           tblptru	equ	0xFF8
  2490                           tblptrh	equ	0xFF7
  2491                           tblptrl	equ	0xFF6
  2492                           tablat	equ	0xFF5
  2493                           postinc0	equ	0xFEE
  2494                           wreg	equ	0xFE8
  2495                           postdec1	equ	0xFE5
  2496                           fsr1l	equ	0xFE1
  2497                           indf2	equ	0xFDF
  2498                           postinc2	equ	0xFDE
  2499                           fsr2h	equ	0xFDA
  2500                           fsr2l	equ	0xFD9
  2501                           status	equ	0xFD8
  2502                           
  2503 ;; *************** function _GroupFlashMemory *****************
  2504 ;; Defined at:
  2505 ;;		line 112 in file "MessageFunctions.c"
  2506 ;; Parameters:    Size  Location     Type
  2507 ;;  request         1    wreg     enum E12
  2508 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;  request         1    2[BANK1 ] enum E12
  2511 ;; Return value:  Size  Location     Type
  2512 ;;                  1    wreg      void 
  2513 ;; Registers used:
  2514 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2515 ;; Tracked objects:
  2516 ;;		On entry : 0/0
  2517 ;;		On exit  : 0/0
  2518 ;;		Unchanged: 0/0
  2519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2520 ;;      Params:         0       0       2       0       0       0       0
  2521 ;;      Locals:         0       0       1       0       0       0       0
  2522 ;;      Temps:          0       1       0       0       0       0       0
  2523 ;;      Totals:         0       1       3       0       0       0       0
  2524 ;;Total ram usage:        4 bytes
  2525 ;; Hardware stack levels used:    1
  2526 ;; Hardware stack levels required when called:    7
  2527 ;; This function calls:
  2528 ;;		_FlashEreaseMem
  2529 ;;		_FlashReadCondition
  2530 ;;		_FlashReadUart
  2531 ;; This function is called by:
  2532 ;;		_readUartMessage
  2533 ;; This function uses a non-reentrant model
  2534 ;;
  2535                           
  2536                           	psect	text4
  2537  0030E6                     __ptext4:
  2538                           	opt stack 0
  2539  0030E6                     _GroupFlashMemory:
  2540                           	opt stack 22
  2541                           
  2542                           ;incstack = 0
  2543                           ;GroupFlashMemory@request stored from wreg
  2544  0030E6  0101               	movlb	1	; () banked
  2545  0030E8  6FC4               	movwf	GroupFlashMemory@request& (0+255),b
  2546                           
  2547                           ;MessageFunctions.c: 114: switch (request)
  2548  0030EA  D013               	goto	l1227
  2549  0030EC                     
  2550                           ;MessageFunctions.c: 117: FlashEreaseMem();
  2551  0030EC  EC66  F017         	call	_FlashEreaseMem	;wreg free
  2552                           
  2553                           ;MessageFunctions.c: 118: break;
  2554  0030F0  0012               	return	
  2555  0030F2                     
  2556                           ;MessageFunctions.c: 121: FlashReadCondition();
  2557  0030F2  EC6C  F00C         	call	_FlashReadCondition	;wreg free
  2558                           
  2559                           ;MessageFunctions.c: 122: break;
  2560  0030F6  0012               	return	
  2561  0030F8                     
  2562                           ;MessageFunctions.c: 125: FlashReadUart((int)data[0]);
  2563  0030F8  C1C2  FFD9         	movff	GroupFlashMemory@data,fsr2l
  2564  0030FC  C1C3  FFDA         	movff	GroupFlashMemory@data+1,fsr2h
  2565  003100  50DF               	movf	indf2,w,c
  2566  003102  0100               	movlb	0	; () banked
  2567  003104  6FBF               	movwf	??_GroupFlashMemory& (0+255),b
  2568  003106  51BF               	movf	??_GroupFlashMemory& (0+255),w,b
  2569  003108  6E2C               	movwf	FlashReadUart@numOfSampleToRead,c
  2570  00310A  6A2D               	clrf	FlashReadUart@numOfSampleToRead+1,c
  2571  00310C  EC52  F003         	call	_FlashReadUart	;wreg free
  2572                           
  2573                           ;MessageFunctions.c: 130: }
  2574                           
  2575                           ;MessageFunctions.c: 129: break;
  2576                           
  2577                           ;MessageFunctions.c: 128: default:
  2578                           
  2579                           ;MessageFunctions.c: 126: break;
  2580  003110  0012               	return	
  2581  003112                     l1227:
  2582  003112  0101               	movlb	1	; () banked
  2583  003114  51C4               	movf	GroupFlashMemory@request& (0+255),w,b
  2584                           
  2585                           ; Switch size 1, requested type "space"
  2586                           ; Number of cases is 3, Range of values is 81 to 83
  2587                           ; switch strategies available:
  2588                           ; Name         Instructions Cycles
  2589                           ; simple_byte           10     6 (average)
  2590                           ;	Chosen strategy is simple_byte
  2591  003116  0A51               	xorlw	81	; case 81
  2592  003118  B4D8               	btfsc	status,2,c
  2593  00311A  D7E8               	goto	l1228
  2594  00311C  0A03               	xorlw	3	; case 82
  2595  00311E  B4D8               	btfsc	status,2,c
  2596  003120  D7E8               	goto	l1230
  2597  003122  0A01               	xorlw	1	; case 83
  2598  003124  A4D8               	btfss	status,2,c
  2599  003126  0012               	return	
  2600  003128  D7E7               	goto	l1231
  2601  00312A                     __end_of_GroupFlashMemory:
  2602                           	opt stack 0
  2603                           tosu	equ	0xFFF
  2604                           tosh	equ	0xFFE
  2605                           tosl	equ	0xFFD
  2606                           pclath	equ	0xFFA
  2607                           tblptru	equ	0xFF8
  2608                           tblptrh	equ	0xFF7
  2609                           tblptrl	equ	0xFF6
  2610                           tablat	equ	0xFF5
  2611                           postinc0	equ	0xFEE
  2612                           wreg	equ	0xFE8
  2613                           postdec1	equ	0xFE5
  2614                           fsr1l	equ	0xFE1
  2615                           indf2	equ	0xFDF
  2616                           postinc2	equ	0xFDE
  2617                           fsr2h	equ	0xFDA
  2618                           fsr2l	equ	0xFD9
  2619                           status	equ	0xFD8
  2620                           
  2621 ;; *************** function _GroupAdc *****************
  2622 ;; Defined at:
  2623 ;;		line 51 in file "MessageFunctions.c"
  2624 ;; Parameters:    Size  Location     Type
  2625 ;;  request         1    wreg     enum E12
  2626 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2627 ;; Auto vars:     Size  Location     Type
  2628 ;;  request         1   95[BANK0 ] enum E12
  2629 ;; Return value:  Size  Location     Type
  2630 ;;                  1    wreg      void 
  2631 ;; Registers used:
  2632 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2633 ;; Tracked objects:
  2634 ;;		On entry : 0/0
  2635 ;;		On exit  : 0/0
  2636 ;;		Unchanged: 0/0
  2637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2638 ;;      Params:         0       0       2       0       0       0       0
  2639 ;;      Locals:         0       1       0       0       0       0       0
  2640 ;;      Temps:          0       0       0       0       0       0       0
  2641 ;;      Totals:         0       1       2       0       0       0       0
  2642 ;;Total ram usage:        3 bytes
  2643 ;; Hardware stack levels used:    1
  2644 ;; Hardware stack levels required when called:    7
  2645 ;; This function calls:
  2646 ;;		_SetAdcOperationMode
  2647 ;;		_SetChannelMode
  2648 ;;		_SetConversionResultFormat
  2649 ;; This function is called by:
  2650 ;;		_readUartMessage
  2651 ;; This function uses a non-reentrant model
  2652 ;;
  2653                           
  2654                           	psect	text5
  2655  003056                     __ptext5:
  2656                           	opt stack 0
  2657  003056                     _GroupAdc:
  2658                           	opt stack 22
  2659                           
  2660                           ;incstack = 0
  2661                           ;GroupAdc@request stored from wreg
  2662  003056  0100               	movlb	0	; () banked
  2663  003058  6FBF               	movwf	GroupAdc@request& (0+255),b
  2664                           
  2665                           ;MessageFunctions.c: 53: switch (request)
  2666  00305A  D015               	goto	l1204
  2667  00305C                     
  2668                           ;MessageFunctions.c: 56: SetAdcOperationMode(data);
  2669  00305C  C1C2  F02C         	movff	GroupAdc@data,SetAdcOperationMode@data
  2670  003060  C1C3  F02D         	movff	GroupAdc@data+1,SetAdcOperationMode@data+1
  2671  003064  EC8C  F01C         	call	_SetAdcOperationMode	;wreg free
  2672                           
  2673                           ;MessageFunctions.c: 57: break;
  2674  003068  0012               	return	
  2675  00306A                     
  2676                           ;MessageFunctions.c: 60: SetChannelMode(data);
  2677  00306A  C1C2  F02C         	movff	GroupAdc@data,SetChannelMode@data
  2678  00306E  C1C3  F02D         	movff	GroupAdc@data+1,SetChannelMode@data+1
  2679  003072  EC96  F01A         	call	_SetChannelMode	;wreg free
  2680                           
  2681                           ;MessageFunctions.c: 61: break;
  2682  003076  0012               	return	
  2683  003078                     
  2684                           ;MessageFunctions.c: 64: SetConversionResultFormat(data);
  2685  003078  C1C2  F02C         	movff	GroupAdc@data,SetConversionResultFormat@data
  2686  00307C  C1C3  F02D         	movff	GroupAdc@data+1,SetConversionResultFormat@data+1
  2687  003080  EC86  F01C         	call	_SetConversionResultFormat	;wreg free
  2688                           
  2689                           ;MessageFunctions.c: 69: }
  2690                           
  2691                           ;MessageFunctions.c: 68: break;
  2692                           
  2693                           ;MessageFunctions.c: 67: default:
  2694                           
  2695                           ;MessageFunctions.c: 65: break;
  2696  003084  0012               	return	
  2697  003086                     l1204:
  2698  003086  0100               	movlb	0	; () banked
  2699  003088  51BF               	movf	GroupAdc@request& (0+255),w,b
  2700                           
  2701                           ; Switch size 1, requested type "space"
  2702                           ; Number of cases is 3, Range of values is 49 to 51
  2703                           ; switch strategies available:
  2704                           ; Name         Instructions Cycles
  2705                           ; simple_byte           10     6 (average)
  2706                           ;	Chosen strategy is simple_byte
  2707  00308A  0A31               	xorlw	49	; case 49
  2708  00308C  B4D8               	btfsc	status,2,c
  2709  00308E  D7E6               	goto	l1205
  2710  003090  0A03               	xorlw	3	; case 50
  2711  003092  B4D8               	btfsc	status,2,c
  2712  003094  D7EA               	goto	l1207
  2713  003096  0A01               	xorlw	1	; case 51
  2714  003098  A4D8               	btfss	status,2,c
  2715  00309A  0012               	return	
  2716  00309C  D7ED               	goto	l1208
  2717  00309E                     __end_of_GroupAdc:
  2718                           	opt stack 0
  2719                           tosu	equ	0xFFF
  2720                           tosh	equ	0xFFE
  2721                           tosl	equ	0xFFD
  2722                           pclath	equ	0xFFA
  2723                           tblptru	equ	0xFF8
  2724                           tblptrh	equ	0xFF7
  2725                           tblptrl	equ	0xFF6
  2726                           tablat	equ	0xFF5
  2727                           postinc0	equ	0xFEE
  2728                           wreg	equ	0xFE8
  2729                           postdec1	equ	0xFE5
  2730                           fsr1l	equ	0xFE1
  2731                           indf2	equ	0xFDF
  2732                           postinc2	equ	0xFDE
  2733                           fsr2h	equ	0xFDA
  2734                           fsr2l	equ	0xFD9
  2735                           status	equ	0xFD8
  2736                           
  2737 ;; *************** function _GroupStatusAndVersion *****************
  2738 ;; Defined at:
  2739 ;;		line 34 in file "MessageFunctions.c"
  2740 ;; Parameters:    Size  Location     Type
  2741 ;;  request         1    wreg     enum E12
  2742 ;;  data            3    0[BANK1 ] PTR unsigned char 
  2743 ;; Auto vars:     Size  Location     Type
  2744 ;;  request         1   95[BANK0 ] enum E12
  2745 ;; Return value:  Size  Location     Type
  2746 ;;                  1    wreg      void 
  2747 ;; Registers used:
  2748 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2749 ;; Tracked objects:
  2750 ;;		On entry : 0/0
  2751 ;;		On exit  : 0/0
  2752 ;;		Unchanged: 0/0
  2753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2754 ;;      Params:         0       0       2       0       0       0       0
  2755 ;;      Locals:         0       1       0       0       0       0       0
  2756 ;;      Temps:          0       0       0       0       0       0       0
  2757 ;;      Totals:         0       1       2       0       0       0       0
  2758 ;;Total ram usage:        3 bytes
  2759 ;; Hardware stack levels used:    1
  2760 ;; Hardware stack levels required when called:    6
  2761 ;; This function calls:
  2762 ;;		_GetMcuFwVersion
  2763 ;;		_GetMcuRunTime
  2764 ;; This function is called by:
  2765 ;;		_readUartMessage
  2766 ;; This function uses a non-reentrant model
  2767 ;;
  2768                           
  2769                           	psect	text6
  2770  0036AA                     __ptext6:
  2771                           	opt stack 0
  2772  0036AA                     _GroupStatusAndVersion:
  2773                           	opt stack 23
  2774                           
  2775                           ;incstack = 0
  2776                           ;GroupStatusAndVersion@request stored from wreg
  2777  0036AA  0100               	movlb	0	; () banked
  2778  0036AC  6FBF               	movwf	GroupStatusAndVersion@request& (0+255),b
  2779                           
  2780                           ;MessageFunctions.c: 36: switch (request)
  2781  0036AE  D006               	goto	l1196
  2782  0036B0                     
  2783                           ;MessageFunctions.c: 39: GetMcuFwVersion();
  2784  0036B0  EC97  F012         	call	_GetMcuFwVersion	;wreg free
  2785                           
  2786                           ;MessageFunctions.c: 40: break;
  2787  0036B4  0012               	return	
  2788  0036B6                     
  2789                           ;MessageFunctions.c: 43: GetMcuRunTime();
  2790  0036B6  ECE0  F00E         	call	_GetMcuRunTime	;wreg free
  2791                           
  2792                           ;MessageFunctions.c: 48: }
  2793                           
  2794                           ;MessageFunctions.c: 47: break;
  2795                           
  2796                           ;MessageFunctions.c: 46: default:
  2797                           
  2798                           ;MessageFunctions.c: 44: break;
  2799  0036BA  0012               	return	
  2800  0036BC                     l1196:
  2801  0036BC  0100               	movlb	0	; () banked
  2802  0036BE  51BF               	movf	GroupStatusAndVersion@request& (0+255),w,b
  2803                           
  2804                           ; Switch size 1, requested type "space"
  2805                           ; Number of cases is 2, Range of values is 33 to 34
  2806                           ; switch strategies available:
  2807                           ; Name         Instructions Cycles
  2808                           ; simple_byte            7     4 (average)
  2809                           ;	Chosen strategy is simple_byte
  2810  0036C0  0A21               	xorlw	33	; case 33
  2811  0036C2  B4D8               	btfsc	status,2,c
  2812  0036C4  D7F8               	goto	l1199
  2813  0036C6  0A03               	xorlw	3	; case 34
  2814  0036C8  A4D8               	btfss	status,2,c
  2815  0036CA  0012               	return	
  2816  0036CC  D7F1               	goto	l1197
  2817  0036CE                     __end_of_GroupStatusAndVersion:
  2818                           	opt stack 0
  2819                           tosu	equ	0xFFF
  2820                           tosh	equ	0xFFE
  2821                           tosl	equ	0xFFD
  2822                           pclath	equ	0xFFA
  2823                           tblptru	equ	0xFF8
  2824                           tblptrh	equ	0xFF7
  2825                           tblptrl	equ	0xFF6
  2826                           tablat	equ	0xFF5
  2827                           postinc0	equ	0xFEE
  2828                           wreg	equ	0xFE8
  2829                           postdec1	equ	0xFE5
  2830                           fsr1l	equ	0xFE1
  2831                           indf2	equ	0xFDF
  2832                           postinc2	equ	0xFDE
  2833                           fsr2h	equ	0xFDA
  2834                           fsr2l	equ	0xFD9
  2835                           status	equ	0xFD8
  2836                           
  2837 ;; *************** function _GroupControlMcu *****************
  2838 ;; Defined at:
  2839 ;;		line 11 in file "MessageFunctions.c"
  2840 ;; Parameters:    Size  Location     Type
  2841 ;;  request         1    wreg     enum E12
  2842 ;;  data            3    0[BANK1 ] PTR unsigned char 
  2843 ;; Auto vars:     Size  Location     Type
  2844 ;;  request         1   95[BANK0 ] enum E12
  2845 ;; Return value:  Size  Location     Type
  2846 ;;                  1    wreg      void 
  2847 ;; Registers used:
  2848 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2849 ;; Tracked objects:
  2850 ;;		On entry : 0/0
  2851 ;;		On exit  : 0/0
  2852 ;;		Unchanged: 0/0
  2853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2854 ;;      Params:         0       0       2       0       0       0       0
  2855 ;;      Locals:         0       1       0       0       0       0       0
  2856 ;;      Temps:          0       0       0       0       0       0       0
  2857 ;;      Totals:         0       1       2       0       0       0       0
  2858 ;;Total ram usage:        3 bytes
  2859 ;; Hardware stack levels used:    1
  2860 ;; Hardware stack levels required when called:    7
  2861 ;; This function calls:
  2862 ;;		_ResetMcu
  2863 ;;		_testLeds
  2864 ;; This function is called by:
  2865 ;;		_readUartMessage
  2866 ;; This function uses a non-reentrant model
  2867 ;;
  2868                           
  2869                           	psect	text7
  2870  00349C                     __ptext7:
  2871                           	opt stack 0
  2872  00349C                     _GroupControlMcu:
  2873                           	opt stack 22
  2874                           
  2875                           ;incstack = 0
  2876                           ;GroupControlMcu@request stored from wreg
  2877  00349C  0100               	movlb	0	; () banked
  2878  00349E  6FBF               	movwf	GroupControlMcu@request& (0+255),b
  2879                           
  2880                           ;MessageFunctions.c: 13: switch (request)
  2881  0034A0  D006               	goto	l1186
  2882  0034A2                     
  2883                           ;MessageFunctions.c: 16: testLeds();
  2884  0034A2  EC3A  F015         	call	_testLeds	;wreg free
  2885                           
  2886                           ;MessageFunctions.c: 17: break;
  2887  0034A6  0012               	return	
  2888  0034A8                     
  2889                           ;MessageFunctions.c: 20: ResetMcu();
  2890  0034A8  EC64  F01C         	call	_ResetMcu	;wreg free
  2891                           
  2892                           ;MessageFunctions.c: 31: }
  2893                           
  2894                           ;MessageFunctions.c: 30: break;
  2895                           
  2896                           ;MessageFunctions.c: 29: default:
  2897                           
  2898                           ;MessageFunctions.c: 27: break;
  2899                           
  2900                           ;MessageFunctions.c: 26: case CONTROL_PA2_SET:
  2901                           
  2902                           ;MessageFunctions.c: 24: break;
  2903                           
  2904                           ;MessageFunctions.c: 23: case CONTROL_PA1_SET:
  2905                           
  2906                           ;MessageFunctions.c: 21: break;
  2907  0034AC  0012               	return	
  2908  0034AE                     l1186:
  2909  0034AE  0100               	movlb	0	; () banked
  2910  0034B0  51BF               	movf	GroupControlMcu@request& (0+255),w,b
  2911                           
  2912                           ; Switch size 1, requested type "space"
  2913                           ; Number of cases is 4, Range of values is 17 to 20
  2914                           ; switch strategies available:
  2915                           ; Name         Instructions Cycles
  2916                           ; simple_byte           13     7 (average)
  2917                           ;	Chosen strategy is simple_byte
  2918  0034B2  0A11               	xorlw	17	; case 17
  2919  0034B4  B4D8               	btfsc	status,2,c
  2920  0034B6  D7F8               	goto	l1189
  2921  0034B8  0A03               	xorlw	3	; case 18
  2922  0034BA  B4D8               	btfsc	status,2,c
  2923  0034BC  0012               	return	
  2924  0034BE  0A01               	xorlw	1	; case 19
  2925  0034C0  B4D8               	btfsc	status,2,c
  2926  0034C2  0012               	return	
  2927  0034C4  0A07               	xorlw	7	; case 20
  2928  0034C6  A4D8               	btfss	status,2,c
  2929  0034C8  0012               	return	
  2930  0034CA  D7EB               	goto	l1187
  2931  0034CC                     __end_of_GroupControlMcu:
  2932                           	opt stack 0
  2933                           tosu	equ	0xFFF
  2934                           tosh	equ	0xFFE
  2935                           tosl	equ	0xFFD
  2936                           pclath	equ	0xFFA
  2937                           tblptru	equ	0xFF8
  2938                           tblptrh	equ	0xFF7
  2939                           tblptrl	equ	0xFF6
  2940                           tablat	equ	0xFF5
  2941                           postinc0	equ	0xFEE
  2942                           wreg	equ	0xFE8
  2943                           postdec1	equ	0xFE5
  2944                           fsr1l	equ	0xFE1
  2945                           indf2	equ	0xFDF
  2946                           postinc2	equ	0xFDE
  2947                           fsr2h	equ	0xFDA
  2948                           fsr2l	equ	0xFD9
  2949                           status	equ	0xFD8
  2950                           
  2951 ;; *************** function _GroupSynthesizers *****************
  2952 ;; Defined at:
  2953 ;;		line 71 in file "MessageFunctions.c"
  2954 ;; Parameters:    Size  Location     Type
  2955 ;;  request         1    wreg     enum E12
  2956 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2957 ;; Auto vars:     Size  Location     Type
  2958 ;;  request         1   95[BANK0 ] enum E12
  2959 ;; Return value:  Size  Location     Type
  2960 ;;                  1    wreg      void 
  2961 ;; Registers used:
  2962 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2963 ;; Tracked objects:
  2964 ;;		On entry : 0/0
  2965 ;;		On exit  : 0/0
  2966 ;;		Unchanged: 0/0
  2967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2968 ;;      Params:         0       0       2       0       0       0       0
  2969 ;;      Locals:         0       1       0       0       0       0       0
  2970 ;;      Temps:          0       0       0       0       0       0       0
  2971 ;;      Totals:         0       1       2       0       0       0       0
  2972 ;;Total ram usage:        3 bytes
  2973 ;; Hardware stack levels used:    1
  2974 ;; Hardware stack levels required when called:    9
  2975 ;; This function calls:
  2976 ;;		_PLLUartInitialize
  2977 ;;		_SetSynthRxOper
  2978 ;;		_SetSynthTxOper
  2979 ;;		_SynthReadData
  2980 ;;		_UpdateRxFreq
  2981 ;;		_UpdateTxFreq
  2982 ;; This function is called by:
  2983 ;;		_readUartMessage
  2984 ;; This function uses a non-reentrant model
  2985 ;;
  2986                           
  2987                           	psect	text8
  2988  0023F8                     __ptext8:
  2989                           	opt stack 0
  2990  0023F8                     _GroupSynthesizers:
  2991                           	opt stack 20
  2992                           
  2993                           ;incstack = 0
  2994                           ;GroupSynthesizers@request stored from wreg
  2995  0023F8  0100               	movlb	0	; () banked
  2996  0023FA  6FBF               	movwf	GroupSynthesizers@request& (0+255),b
  2997                           
  2998                           ;MessageFunctions.c: 73: switch (request)
  2999  0023FC  D030               	goto	l1213
  3000  0023FE                     
  3001                           ;MessageFunctions.c: 76: PLLUartInitialize(data);
  3002  0023FE  C1C2  F018         	movff	GroupSynthesizers@data,PLLUartInitialize@data
  3003  002402  C1C3  F019         	movff	GroupSynthesizers@data+1,PLLUartInitialize@data+1
  3004  002406  ECB8  F01C         	call	_PLLUartInitialize	;wreg free
  3005                           
  3006                           ;MessageFunctions.c: 77: break;
  3007  00240A  0012               	return	
  3008  00240C                     
  3009                           ;MessageFunctions.c: 80: PLLUartInitialize(data);
  3010  00240C  C1C2  F018         	movff	GroupSynthesizers@data,PLLUartInitialize@data
  3011  002410  C1C3  F019         	movff	GroupSynthesizers@data+1,PLLUartInitialize@data+1
  3012  002414  ECB8  F01C         	call	_PLLUartInitialize	;wreg free
  3013                           
  3014                           ;MessageFunctions.c: 81: break;
  3015  002418  0012               	return	
  3016  00241A                     
  3017                           ;MessageFunctions.c: 84: UpdateTxFreq(data);
  3018  00241A  C1C2  F087         	movff	GroupSynthesizers@data,UpdateTxFreq@data
  3019  00241E  C1C3  F088         	movff	GroupSynthesizers@data+1,UpdateTxFreq@data+1
  3020  002422  EC76  F013         	call	_UpdateTxFreq	;wreg free
  3021                           
  3022                           ;MessageFunctions.c: 85: break;
  3023  002426  0012               	return	
  3024  002428                     
  3025                           ;MessageFunctions.c: 88: UpdateRxFreq(data);
  3026  002428  C1C2  F02C         	movff	GroupSynthesizers@data,UpdateRxFreq@data
  3027  00242C  C1C3  F02D         	movff	GroupSynthesizers@data+1,UpdateRxFreq@data+1
  3028  002430  EC67  F01B         	call	_UpdateRxFreq	;wreg free
  3029                           
  3030                           ;MessageFunctions.c: 89: break;
  3031  002434  0012               	return	
  3032  002436                     
  3033                           ;MessageFunctions.c: 92: SetSynthRxOper();
  3034  002436  EC7E  F01A         	call	_SetSynthRxOper	;wreg free
  3035                           
  3036                           ;MessageFunctions.c: 93: break;
  3037  00243A  0012               	return	
  3038  00243C                     
  3039                           ;MessageFunctions.c: 96: SetSynthTxOper();
  3040  00243C  EC66  F01A         	call	_SetSynthTxOper	;wreg free
  3041                           
  3042                           ;MessageFunctions.c: 97: break;
  3043  002440  0012               	return	
  3044  002442                     
  3045                           ;MessageFunctions.c: 100: SynthReadData(data);
  3046  002442  C1C2  F024         	movff	GroupSynthesizers@data,SynthReadData@data
  3047  002446  C1C3  F025         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3048  00244A  EC05  F015         	call	_SynthReadData	;wreg free
  3049                           
  3050                           ;MessageFunctions.c: 101: break;
  3051  00244E  0012               	return	
  3052  002450                     
  3053                           ;MessageFunctions.c: 104: SynthReadData(data);
  3054  002450  C1C2  F024         	movff	GroupSynthesizers@data,SynthReadData@data
  3055  002454  C1C3  F025         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3056  002458  EC05  F015         	call	_SynthReadData	;wreg free
  3057                           
  3058                           ;MessageFunctions.c: 109: }
  3059                           
  3060                           ;MessageFunctions.c: 108: break;
  3061                           
  3062                           ;MessageFunctions.c: 107: default:
  3063                           
  3064                           ;MessageFunctions.c: 105: break;
  3065  00245C  0012               	return	
  3066  00245E                     l1213:
  3067  00245E  0100               	movlb	0	; () banked
  3068  002460  51BF               	movf	GroupSynthesizers@request& (0+255),w,b
  3069                           
  3070                           ; Switch size 1, requested type "space"
  3071                           ; Number of cases is 8, Range of values is 64 to 71
  3072                           ; switch strategies available:
  3073                           ; Name         Instructions Cycles
  3074                           ; simple_byte           25    13 (average)
  3075                           ;	Chosen strategy is simple_byte
  3076  002462  0A40               	xorlw	64	; case 64
  3077  002464  B4D8               	btfsc	status,2,c
  3078  002466  D7CB               	goto	l1214
  3079  002468  0A01               	xorlw	1	; case 65
  3080  00246A  B4D8               	btfsc	status,2,c
  3081  00246C  D7CF               	goto	l1216
  3082  00246E  0A03               	xorlw	3	; case 66
  3083  002470  B4D8               	btfsc	status,2,c
  3084  002472  D7D3               	goto	l1217
  3085  002474  0A01               	xorlw	1	; case 67
  3086  002476  B4D8               	btfsc	status,2,c
  3087  002478  D7D7               	goto	l1218
  3088  00247A  0A07               	xorlw	7	; case 68
  3089  00247C  B4D8               	btfsc	status,2,c
  3090  00247E  D7DB               	goto	l1219
  3091  002480  0A01               	xorlw	1	; case 69
  3092  002482  B4D8               	btfsc	status,2,c
  3093  002484  D7DB               	goto	l1220
  3094  002486  0A03               	xorlw	3	; case 70
  3095  002488  B4D8               	btfsc	status,2,c
  3096  00248A  D7DB               	goto	l1221
  3097  00248C  0A01               	xorlw	1	; case 71
  3098  00248E  A4D8               	btfss	status,2,c
  3099  002490  0012               	return	
  3100  002492  D7DE               	goto	l1222
  3101  002494                     __end_of_GroupSynthesizers:
  3102                           	opt stack 0
  3103                           tosu	equ	0xFFF
  3104                           tosh	equ	0xFFE
  3105                           tosl	equ	0xFFD
  3106                           pclath	equ	0xFFA
  3107                           tblptru	equ	0xFF8
  3108                           tblptrh	equ	0xFF7
  3109                           tblptrl	equ	0xFF6
  3110                           tablat	equ	0xFF5
  3111                           postinc0	equ	0xFEE
  3112                           wreg	equ	0xFE8
  3113                           postdec1	equ	0xFE5
  3114                           fsr1l	equ	0xFE1
  3115                           indf2	equ	0xFDF
  3116                           postinc2	equ	0xFDE
  3117                           fsr2h	equ	0xFDA
  3118                           fsr2l	equ	0xFD9
  3119                           status	equ	0xFD8
  3120                           
  3121 ;; *************** function _UpdateTxFreq *****************
  3122 ;; Defined at:
  3123 ;;		line 64 in file "SyntApp.c"
  3124 ;; Parameters:    Size  Location     Type
  3125 ;;  data            2   39[BANK0 ] PTR unsigned char 
  3126 ;; Auto vars:     Size  Location     Type
  3127 ;;  retVal          8   42[BANK0 ] struct .
  3128 ;;  regIdx          1   41[BANK0 ] unsigned char 
  3129 ;; Return value:  Size  Location     Type
  3130 ;;                  1    wreg      void 
  3131 ;; Registers used:
  3132 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3133 ;; Tracked objects:
  3134 ;;		On entry : 0/0
  3135 ;;		On exit  : 0/0
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3138 ;;      Params:         0       2       0       0       0       0       0
  3139 ;;      Locals:         0       9       0       0       0       0       0
  3140 ;;      Temps:          0       0       0       0       0       0       0
  3141 ;;      Totals:         0      11       0       0       0       0       0
  3142 ;;Total ram usage:       11 bytes
  3143 ;; Hardware stack levels used:    1
  3144 ;; Hardware stack levels required when called:    7
  3145 ;; This function calls:
  3146 ;;		_GetIntFromUartData
  3147 ;;		_SWSPI_send_word
  3148 ;;		_SendAckMessage
  3149 ;;		_StoreIntInEeprom
  3150 ;; This function is called by:
  3151 ;;		_GroupSynthesizers
  3152 ;; This function uses a non-reentrant model
  3153 ;;
  3154                           
  3155                           	psect	text9
  3156  0026EC                     __ptext9:
  3157                           	opt stack 0
  3158  0026EC                     _UpdateTxFreq:
  3159                           	opt stack 21
  3160                           
  3161                           ;SyntApp.c: 66: uint8_t regIdx = 0;
  3162                           
  3163                           ;incstack = 0
  3164  0026EC  0E00               	movlw	0
  3165  0026EE  0100               	movlb	0	; () banked
  3166  0026F0  6F89               	movwf	UpdateTxFreq@regIdx& (0+255),b
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;SyntApp.c: 67: INT_VAL retVal;
  3170                           ;SyntApp.c: 68: if(cntRegUpdate < 7)
  3171  0026F2  0E07               	movlw	7
  3172  0026F4  603A               	cpfslt	_cntRegUpdate,c
  3173  0026F6  D03A               	goto	l499
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;SyntApp.c: 69: {
  3177                           ;SyntApp.c: 70: retVal = GetIntFromUartData(10, data);
  3178  0026F8  C087  F066         	movff	UpdateTxFreq@data,GetIntFromUartData@data
  3179  0026FC  C088  F067         	movff	UpdateTxFreq@data+1,GetIntFromUartData@data+1
  3180  002700  0E0A               	movlw	10
  3181  002702  ECC7  F009         	call	_GetIntFromUartData
  3182  002706  EE20  F08A         	lfsr	2,UpdateTxFreq@retVal
  3183  00270A  0E07               	movlw	7
  3184  00270C                     u8031:
  3185  00270C  CFEB FFDB          	movff	plusw0,plusw2
  3186  002710  06E8               	decf	wreg,f,c
  3187  002712  E2FC               	bc	u8031
  3188                           
  3189                           ;SyntApp.c: 71: SWSPI_send_word(SYNTH_TX, retVal.num, 3);
  3190  002714  C08A  F026         	movff	UpdateTxFreq@retVal,SWSPI_send_word@data
  3191  002718  C08B  F027         	movff	UpdateTxFreq@retVal+1,SWSPI_send_word@data+1
  3192  00271C  C08C  F028         	movff	UpdateTxFreq@retVal+2,SWSPI_send_word@data+2
  3193  002720  C08D  F029         	movff	UpdateTxFreq@retVal+3,SWSPI_send_word@data+3
  3194  002724  0E03               	movlw	3
  3195  002726  6E2A               	movwf	SWSPI_send_word@dataSize,c
  3196  002728  0E00               	movlw	0
  3197  00272A  EC4A  F012         	call	_SWSPI_send_word
  3198                           
  3199                           ;SyntApp.c: 72: StoreIntInEeprom(retVal.num, (0) | SYNTH_ADDRES[retVal.con], 4);
  3200  00272E  C08A  F021         	movff	UpdateTxFreq@retVal,StoreIntInEeprom@data
  3201  002732  C08B  F022         	movff	UpdateTxFreq@retVal+1,StoreIntInEeprom@data+1
  3202  002736  C08C  F023         	movff	UpdateTxFreq@retVal+2,StoreIntInEeprom@data+2
  3203  00273A  C08D  F024         	movff	UpdateTxFreq@retVal+3,StoreIntInEeprom@data+3
  3204  00273E  0E35               	movlw	low _SYNTH_ADDRES
  3205  002740  0100               	movlb	0	; () banked
  3206  002742  258E               	addwf	(UpdateTxFreq@retVal+4)& (0+255),w,b
  3207  002744  6EF6               	movwf	tblptrl,c
  3208  002746  0E06               	movlw	high _SYNTH_ADDRES
  3209  002748  218F               	addwfc	(UpdateTxFreq@retVal+5)& (0+255),w,b
  3210  00274A  6EF7               	movwf	tblptrh,c
  3211  00274C                     	if	0	;There are less than 3 active tblptr bytes
  3212  00274C                     	endif
  3213  00274C  0008               	tblrd		*
  3214  00274E  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
  3215  002752  0E00               	movlw	0
  3216  002754  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3217  002756  0E04               	movlw	4
  3218  002758  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3219  00275A  EC75  F019         	call	_StoreIntInEeprom	;wreg free
  3220                           
  3221                           ;SyntApp.c: 73: cntRegUpdate ++;
  3222  00275E  2A3A               	incf	_cntRegUpdate,f,c
  3223                           
  3224                           ;SyntApp.c: 74: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_TX_R
      +                          EG);
  3225  002760  0E48               	movlw	72
  3226  002762  6E24               	movwf	SendAckMessage@inRequest,c
  3227  002764  0E04               	movlw	4
  3228  002766  EC8F  F017         	call	_SendAckMessage
  3229                           
  3230                           ;SyntApp.c: 75: }
  3231  00276A  0012               	return	
  3232  00276C                     l499:
  3233                           
  3234                           ;SyntApp.c: 77: else
  3235                           ;SyntApp.c: 78: {
  3236                           ;SyntApp.c: 79: cntRegUpdate = 0;
  3237  00276C  0E00               	movlw	0
  3238  00276E  6E3A               	movwf	_cntRegUpdate,c
  3239                           
  3240                           ;SyntApp.c: 80: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_SET);
  3241  002770  0E42               	movlw	66
  3242  002772  6E24               	movwf	SendAckMessage@inRequest,c
  3243  002774  0E04               	movlw	4
  3244  002776  EC8F  F017         	call	_SendAckMessage
  3245  00277A  0012               	return	
  3246  00277C                     __end_of_UpdateTxFreq:
  3247                           	opt stack 0
  3248                           tosu	equ	0xFFF
  3249                           tosh	equ	0xFFE
  3250                           tosl	equ	0xFFD
  3251                           pclath	equ	0xFFA
  3252                           tblptru	equ	0xFF8
  3253                           tblptrh	equ	0xFF7
  3254                           tblptrl	equ	0xFF6
  3255                           tablat	equ	0xFF5
  3256                           postinc0	equ	0xFEE
  3257                           plusw0	equ	0xFEB
  3258                           wreg	equ	0xFE8
  3259                           postdec1	equ	0xFE5
  3260                           fsr1l	equ	0xFE1
  3261                           indf2	equ	0xFDF
  3262                           postinc2	equ	0xFDE
  3263                           plusw2	equ	0xFDB
  3264                           fsr2h	equ	0xFDA
  3265                           fsr2l	equ	0xFD9
  3266                           status	equ	0xFD8
  3267                           
  3268 ;; *************** function _StoreIntInEeprom *****************
  3269 ;; Defined at:
  3270 ;;		line 109 in file "SystemCommon.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;  data            4   32[COMRAM] unsigned long 
  3273 ;;  address         1   36[COMRAM] unsigned char 
  3274 ;;  numOfByes       2   37[COMRAM] int 
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;  val             1   39[COMRAM] unsigned char 
  3277 ;;  idx             1   40[COMRAM] unsigned char 
  3278 ;; Return value:  Size  Location     Type
  3279 ;;                  1    wreg      void 
  3280 ;; Registers used:
  3281 ;;		wreg, status,2, status,0, cstack
  3282 ;; Tracked objects:
  3283 ;;		On entry : 0/0
  3284 ;;		On exit  : 0/0
  3285 ;;		Unchanged: 0/0
  3286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3287 ;;      Params:         7       0       0       0       0       0       0
  3288 ;;      Locals:         2       0       0       0       0       0       0
  3289 ;;      Temps:          0       0       0       0       0       0       0
  3290 ;;      Totals:         9       0       0       0       0       0       0
  3291 ;;Total ram usage:        9 bytes
  3292 ;; Hardware stack levels used:    1
  3293 ;; Hardware stack levels required when called:    5
  3294 ;; This function calls:
  3295 ;;		_EepromWrite
  3296 ;;		_make8
  3297 ;; This function is called by:
  3298 ;;		_UpdateTxFreq
  3299 ;; This function uses a non-reentrant model
  3300 ;;
  3301                           
  3302                           	psect	text10
  3303  0032EA                     __ptext10:
  3304                           	opt stack 0
  3305  0032EA                     _StoreIntInEeprom:
  3306                           	opt stack 22
  3307                           
  3308                           ;SystemCommon.c: 111: for(uint8_t idx = numOfByes; idx; idx--)
  3309                           
  3310                           ;incstack = 0
  3311  0032EA  C026  F029         	movff	StoreIntInEeprom@numOfByes,StoreIntInEeprom@idx
  3312  0032EE  D015               	goto	l1323
  3313  0032F0                     
  3314                           ;SystemCommon.c: 112: {
  3315                           ;SystemCommon.c: 113: uint8_t val = make8(data, idx - 1);
  3316  0032F0  C021  F018         	movff	StoreIntInEeprom@data,make8@data
  3317  0032F4  C022  F019         	movff	StoreIntInEeprom@data+1,make8@data+1
  3318  0032F8  C023  F01A         	movff	StoreIntInEeprom@data+2,make8@data+2
  3319  0032FC  C024  F01B         	movff	StoreIntInEeprom@data+3,make8@data+3
  3320  003300  0429               	decf	StoreIntInEeprom@idx,w,c
  3321  003302  6E1C               	movwf	make8@dataLocation,c
  3322  003304  EC31  F016         	call	_make8	;wreg free
  3323  003308  6E28               	movwf	StoreIntInEeprom@val,c
  3324                           
  3325                           ;SystemCommon.c: 114: EepromWrite(address - idx, val);
  3326  00330A  C028  F01B         	movff	StoreIntInEeprom@val,EepromWrite@data
  3327  00330E  5029               	movf	StoreIntInEeprom@idx,w,c
  3328  003310  0800               	sublw	0
  3329  003312  2425               	addwf	StoreIntInEeprom@address,w,c
  3330  003314  EC5D  F01C         	call	_EepromWrite
  3331  003318  0629               	decf	StoreIntInEeprom@idx,f,c
  3332  00331A                     l1323:
  3333  00331A  5029               	movf	StoreIntInEeprom@idx,w,c
  3334  00331C  B4D8               	btfsc	status,2,c
  3335  00331E  0012               	return	
  3336  003320  D7E7               	goto	l1324
  3337  003322                     __end_of_StoreIntInEeprom:
  3338                           	opt stack 0
  3339                           tosu	equ	0xFFF
  3340                           tosh	equ	0xFFE
  3341                           tosl	equ	0xFFD
  3342                           pclath	equ	0xFFA
  3343                           tblptru	equ	0xFF8
  3344                           tblptrh	equ	0xFF7
  3345                           tblptrl	equ	0xFF6
  3346                           tablat	equ	0xFF5
  3347                           postinc0	equ	0xFEE
  3348                           plusw0	equ	0xFEB
  3349                           wreg	equ	0xFE8
  3350                           postdec1	equ	0xFE5
  3351                           fsr1l	equ	0xFE1
  3352                           indf2	equ	0xFDF
  3353                           postinc2	equ	0xFDE
  3354                           plusw2	equ	0xFDB
  3355                           fsr2h	equ	0xFDA
  3356                           fsr2l	equ	0xFD9
  3357                           status	equ	0xFD8
  3358                           
  3359 ;; *************** function _EepromWrite *****************
  3360 ;; Defined at:
  3361 ;;		line 220 in file "FlashApp.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;  address         1    wreg     unsigned char 
  3364 ;;  data            1   26[COMRAM] unsigned char 
  3365 ;; Auto vars:     Size  Location     Type
  3366 ;;  address         1   27[COMRAM] unsigned char 
  3367 ;; Return value:  Size  Location     Type
  3368 ;;                  1    wreg      void 
  3369 ;; Registers used:
  3370 ;;		wreg, status,2, cstack
  3371 ;; Tracked objects:
  3372 ;;		On entry : 0/0
  3373 ;;		On exit  : 0/0
  3374 ;;		Unchanged: 0/0
  3375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3376 ;;      Params:         1       0       0       0       0       0       0
  3377 ;;      Locals:         1       0       0       0       0       0       0
  3378 ;;      Temps:          0       0       0       0       0       0       0
  3379 ;;      Totals:         2       0       0       0       0       0       0
  3380 ;;Total ram usage:        2 bytes
  3381 ;; Hardware stack levels used:    1
  3382 ;; Hardware stack levels required when called:    4
  3383 ;; This function calls:
  3384 ;;		_DATAEE_WriteByte
  3385 ;; This function is called by:
  3386 ;;		_StoreIntInEeprom
  3387 ;; This function uses a non-reentrant model
  3388 ;;
  3389                           
  3390                           	psect	text11
  3391  0038BA                     __ptext11:
  3392                           	opt stack 0
  3393  0038BA                     _EepromWrite:
  3394                           	opt stack 22
  3395                           
  3396                           ;incstack = 0
  3397                           ;EepromWrite@address stored from wreg
  3398  0038BA  6E1C               	movwf	EepromWrite@address,c
  3399                           
  3400                           ;FlashApp.c: 222: DATAEE_WriteByte(address, data);
  3401  0038BC  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
  3402  0038C0  501C               	movf	EepromWrite@address,w,c
  3403  0038C2  ECC9  F019         	call	_DATAEE_WriteByte
  3404  0038C6  0012               	return		;funcret
  3405  0038C8                     __end_of_EepromWrite:
  3406                           	opt stack 0
  3407                           tosu	equ	0xFFF
  3408                           tosh	equ	0xFFE
  3409                           tosl	equ	0xFFD
  3410                           pclath	equ	0xFFA
  3411                           tblptru	equ	0xFF8
  3412                           tblptrh	equ	0xFF7
  3413                           tblptrl	equ	0xFF6
  3414                           tablat	equ	0xFF5
  3415                           postinc0	equ	0xFEE
  3416                           plusw0	equ	0xFEB
  3417                           wreg	equ	0xFE8
  3418                           postdec1	equ	0xFE5
  3419                           fsr1l	equ	0xFE1
  3420                           indf2	equ	0xFDF
  3421                           postinc2	equ	0xFDE
  3422                           plusw2	equ	0xFDB
  3423                           fsr2h	equ	0xFDA
  3424                           fsr2l	equ	0xFD9
  3425                           status	equ	0xFD8
  3426                           
  3427 ;; *************** function _DATAEE_WriteByte *****************
  3428 ;; Defined at:
  3429 ;;		line 167 in file "mcc_generated_files/memory.c"
  3430 ;; Parameters:    Size  Location     Type
  3431 ;;  bAdd            1    wreg     unsigned char 
  3432 ;;  bData           1   23[COMRAM] unsigned char 
  3433 ;; Auto vars:     Size  Location     Type
  3434 ;;  bAdd            1   24[COMRAM] unsigned char 
  3435 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
  3436 ;; Return value:  Size  Location     Type
  3437 ;;                  1    wreg      void 
  3438 ;; Registers used:
  3439 ;;		wreg, status,2
  3440 ;; Tracked objects:
  3441 ;;		On entry : 0/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3445 ;;      Params:         1       0       0       0       0       0       0
  3446 ;;      Locals:         2       0       0       0       0       0       0
  3447 ;;      Temps:          0       0       0       0       0       0       0
  3448 ;;      Totals:         3       0       0       0       0       0       0
  3449 ;;Total ram usage:        3 bytes
  3450 ;; Hardware stack levels used:    1
  3451 ;; Hardware stack levels required when called:    3
  3452 ;; This function calls:
  3453 ;;		Nothing
  3454 ;; This function is called by:
  3455 ;;		_EepromWrite
  3456 ;;		_EepromTest
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           	psect	text12
  3461  003392                     __ptext12:
  3462                           	opt stack 0
  3463  003392                     _DATAEE_WriteByte:
  3464                           	opt stack 22
  3465                           
  3466                           ;incstack = 0
  3467                           ;DATAEE_WriteByte@bAdd stored from wreg
  3468  003392  6E19               	movwf	DATAEE_WriteByte@bAdd,c
  3469                           
  3470                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
  3471  003394  0E00               	movlw	0
  3472  003396  BEF2               	btfsc	intcon,7,c	;volatile
  3473  003398  0E01               	movlw	1
  3474  00339A  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
  3475                           
  3476                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
  3477  00339C  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
  3478                           
  3479                           ;memory.c: 172: EEDATA = bData;
  3480  0033A0  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
  3481                           
  3482                           ;memory.c: 173: EECON1bits.EEPGD = 0;
  3483  0033A4  9EA6               	bcf	4006,7,c	;volsfr
  3484                           
  3485                           ;memory.c: 174: EECON1bits.CFGS = 0;
  3486  0033A6  9CA6               	bcf	4006,6,c	;volsfr
  3487                           
  3488                           ;memory.c: 175: EECON1bits.WREN = 1;
  3489  0033A8  84A6               	bsf	4006,2,c	;volsfr
  3490                           
  3491                           ;memory.c: 176: INTCONbits.GIE = 0;
  3492  0033AA  9EF2               	bcf	intcon,7,c	;volatile
  3493                           
  3494                           ;memory.c: 177: EECON2 = 0x55;
  3495  0033AC  0E55               	movlw	85
  3496  0033AE  6EA7               	movwf	4007,c	;volsfr
  3497                           
  3498                           ;memory.c: 178: EECON2 = 0xAA;
  3499  0033B0  0EAA               	movlw	170
  3500  0033B2  6EA7               	movwf	4007,c	;volsfr
  3501                           
  3502                           ;memory.c: 179: EECON1bits.WR = 1;
  3503  0033B4  82A6               	bsf	4006,1,c	;volsfr
  3504  0033B6                     
  3505                           ;memory.c: 182: {
  3506  0033B6  B2A6               	btfsc	4006,1,c	;volsfr
  3507  0033B8  D7FE               	goto	l965
  3508                           
  3509                           ;memory.c: 183: }
  3510                           ;memory.c: 185: EECON1bits.WREN = 0;
  3511  0033BA  94A6               	bcf	4006,2,c	;volsfr
  3512                           
  3513                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
  3514  0033BC  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
  3515  0033BE  D002               	bra	u6655
  3516  0033C0  9EF2               	bcf	intcon,7,c	;volatile
  3517  0033C2  D001               	bra	u6656
  3518  0033C4                     u6655:
  3519  0033C4  8EF2               	bsf	intcon,7,c	;volatile
  3520  0033C6                     u6656:
  3521  0033C6  0012               	return		;funcret
  3522  0033C8                     __end_of_DATAEE_WriteByte:
  3523                           	opt stack 0
  3524                           tosu	equ	0xFFF
  3525                           tosh	equ	0xFFE
  3526                           tosl	equ	0xFFD
  3527                           pclath	equ	0xFFA
  3528                           tblptru	equ	0xFF8
  3529                           tblptrh	equ	0xFF7
  3530                           tblptrl	equ	0xFF6
  3531                           tablat	equ	0xFF5
  3532                           intcon	equ	0xFF2
  3533                           postinc0	equ	0xFEE
  3534                           plusw0	equ	0xFEB
  3535                           wreg	equ	0xFE8
  3536                           postdec1	equ	0xFE5
  3537                           fsr1l	equ	0xFE1
  3538                           indf2	equ	0xFDF
  3539                           postinc2	equ	0xFDE
  3540                           plusw2	equ	0xFDB
  3541                           fsr2h	equ	0xFDA
  3542                           fsr2l	equ	0xFD9
  3543                           status	equ	0xFD8
  3544                           
  3545 ;; *************** function _GetIntFromUartData *****************
  3546 ;; Defined at:
  3547 ;;		line 34 in file "SystemCommon.c"
  3548 ;; Parameters:    Size  Location     Type
  3549 ;;  num             1    wreg     char 
  3550 ;;  data            2    6[BANK0 ] PTR unsigned char 
  3551 ;; Auto vars:     Size  Location     Type
  3552 ;;  num             1   26[BANK0 ] char 
  3553 ;;  idxCon          2   36[BANK0 ] int 
  3554 ;;  dataRegArr     10   16[BANK0 ] unsigned char [10]
  3555 ;;  retVal          8   28[BANK0 ] struct .
  3556 ;;  idxData         1   38[BANK0 ] unsigned char 
  3557 ;;  recVal          1   27[BANK0 ] unsigned char 
  3558 ;; Return value:  Size  Location     Type
  3559 ;;                  8    6[BANK0 ] struct .
  3560 ;; Registers used:
  3561 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3562 ;; Tracked objects:
  3563 ;;		On entry : 0/0
  3564 ;;		On exit  : 0/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3567 ;;      Params:         0       8       0       0       0       0       0
  3568 ;;      Locals:         0      23       0       0       0       0       0
  3569 ;;      Temps:          0       2       0       0       0       0       0
  3570 ;;      Totals:         0      33       0       0       0       0       0
  3571 ;;Total ram usage:       33 bytes
  3572 ;; Hardware stack levels used:    1
  3573 ;; Hardware stack levels required when called:    6
  3574 ;; This function calls:
  3575 ;;		_ZeroArray
  3576 ;;		_strtol
  3577 ;; This function is called by:
  3578 ;;		_UpdateTxFreq
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           	psect	text13
  3583  00138E                     __ptext13:
  3584                           	opt stack 0
  3585  00138E                     _GetIntFromUartData:
  3586                           	opt stack 21
  3587                           
  3588                           ;incstack = 0
  3589                           ;GetIntFromUartData@num stored from wreg
  3590  00138E  0100               	movlb	0	; () banked
  3591  001390  6F7A               	movwf	GetIntFromUartData@num& (0+255),b
  3592                           
  3593                           ;SystemCommon.c: 36: INT_VAL retVal;
  3594                           ;SystemCommon.c: 37: retVal.num = 0;
  3595  001392  0E00               	movlw	0
  3596  001394  0100               	movlb	0	; () banked
  3597  001396  6F7C               	movwf	GetIntFromUartData@retVal& (0+255),b
  3598  001398  0E00               	movlw	0
  3599  00139A  6F7D               	movwf	(GetIntFromUartData@retVal+1)& (0+255),b
  3600  00139C  0E00               	movlw	0
  3601  00139E  6F7E               	movwf	(GetIntFromUartData@retVal+2)& (0+255),b
  3602  0013A0  0E00               	movlw	0
  3603  0013A2  6F7F               	movwf	(GetIntFromUartData@retVal+3)& (0+255),b
  3604                           
  3605                           ;SystemCommon.c: 38: retVal.con = 0;
  3606  0013A4  0E00               	movlw	0
  3607  0013A6  6F80               	movwf	(GetIntFromUartData@retVal+4)& (0+255),b
  3608  0013A8  0E00               	movlw	0
  3609  0013AA  6F81               	movwf	(GetIntFromUartData@retVal+5)& (0+255),b
  3610  0013AC  0E00               	movlw	0
  3611  0013AE  6F82               	movwf	(GetIntFromUartData@retVal+6)& (0+255),b
  3612  0013B0  0E00               	movlw	0
  3613  0013B2  6F83               	movwf	(GetIntFromUartData@retVal+7)& (0+255),b
  3614                           
  3615                           ;SystemCommon.c: 39: uint8_t idxData = 0;
  3616  0013B4  0E00               	movlw	0
  3617  0013B6  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  3618                           
  3619                           ;SystemCommon.c: 40: char recVal = (0);
  3620  0013B8  0E00               	movlw	0
  3621  0013BA  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  3622                           
  3623                           ; BSR set to: 0
  3624                           ;SystemCommon.c: 42: char dataRegArr[0xA];
  3625                           ;SystemCommon.c: 43: ZeroArray(dataRegArr, 0xA);
  3626  0013BC  0E70               	movlw	low GetIntFromUartData@dataRegArr
  3627  0013BE  6E20               	movwf	ZeroArray@array,c
  3628  0013C0  0E00               	movlw	high GetIntFromUartData@dataRegArr
  3629  0013C2  6E21               	movwf	ZeroArray@array+1,c
  3630  0013C4  0E00               	movlw	0
  3631  0013C6  6E23               	movwf	ZeroArray@size+1,c
  3632  0013C8  0E0A               	movlw	10
  3633  0013CA  6E22               	movwf	ZeroArray@size,c
  3634  0013CC  ECCB  F01B         	call	_ZeroArray	;wreg free
  3635                           
  3636                           ;SystemCommon.c: 45: for(idxData = 0; idxData < 0xA; idxData++)
  3637  0013D0  0E00               	movlw	0
  3638  0013D2  0100               	movlb	0	; () banked
  3639  0013D4  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  3640  0013D6                     l7510:
  3641                           
  3642                           ; BSR set to: 0
  3643  0013D6  0E09               	movlw	9
  3644  0013D8  6586               	cpfsgt	GetIntFromUartData@idxData& (0+255),b
  3645  0013DA  D001               	goto	l1297
  3646  0013DC  D01D               	goto	u7570
  3647  0013DE                     l1297:
  3648                           
  3649                           ; BSR set to: 0
  3650                           ;SystemCommon.c: 46: {
  3651                           ;SystemCommon.c: 47: recVal = data[idxData];
  3652                           
  3653                           ; BSR set to: 0
  3654  0013DE  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  3655  0013E0  0D01               	mullw	1
  3656  0013E2  50F3               	movf	prodl,w,c
  3657  0013E4  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  3658  0013E6  6ED9               	movwf	fsr2l,c
  3659  0013E8  50F4               	movf	prodh,w,c
  3660  0013EA  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  3661  0013EC  6EDA               	movwf	fsr2h,c
  3662  0013EE  50DF               	movf	indf2,w,c
  3663  0013F0  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  3664                           
  3665                           ; BSR set to: 0
  3666                           ;SystemCommon.c: 48: if(recVal == 0x10)
  3667  0013F2  0E10               	movlw	16
  3668  0013F4  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  3669  0013F6  A4D8               	btfss	status,2,c
  3670  0013F8  D002               	goto	l1299
  3671                           
  3672                           ; BSR set to: 0
  3673                           ;SystemCommon.c: 49: {
  3674                           ;SystemCommon.c: 50: idxData++;
  3675  0013FA  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  3676                           
  3677                           ;SystemCommon.c: 51: break;
  3678  0013FC  D00D               	goto	u7570
  3679  0013FE                     l1299:
  3680                           
  3681                           ; BSR set to: 0
  3682                           ;SystemCommon.c: 53: else
  3683                           ;SystemCommon.c: 54: {
  3684                           ;SystemCommon.c: 55: dataRegArr[idxData] = recVal + '0';
  3685                           
  3686                           ; BSR set to: 0
  3687  0013FE  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  3688  001400  0D01               	mullw	1
  3689  001402  0E70               	movlw	low GetIntFromUartData@dataRegArr
  3690  001404  24F3               	addwf	prodl,w,c
  3691  001406  6ED9               	movwf	fsr2l,c
  3692  001408  0E00               	movlw	high GetIntFromUartData@dataRegArr
  3693  00140A  20F4               	addwfc	prodh,w,c
  3694  00140C  6EDA               	movwf	fsr2h,c
  3695  00140E  517B               	movf	GetIntFromUartData@recVal& (0+255),w,b
  3696  001410  0F30               	addlw	48
  3697  001412  6EDF               	movwf	indf2,c
  3698                           
  3699                           ; BSR set to: 0
  3700                           
  3701                           ; BSR set to: 0
  3702  001414  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  3703  001416  D7DF               	goto	l7510
  3704  001418                     u7570:
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;SystemCommon.c: 56: }
  3708                           ;SystemCommon.c: 57: }
  3709                           ;SystemCommon.c: 58: retVal.num = strtol(dataRegArr, (0), num);
  3710                           
  3711                           ; BSR set to: 0
  3712  001418  0E70               	movlw	low GetIntFromUartData@dataRegArr
  3713  00141A  6E26               	movwf	strtol@s,c
  3714  00141C  0E00               	movlw	high GetIntFromUartData@dataRegArr
  3715  00141E  6E27               	movwf	strtol@s+1,c
  3716  001420  0E00               	movlw	0
  3717  001422  6E28               	movwf	strtol@endptr,c
  3718  001424  0E00               	movlw	0
  3719  001426  6E29               	movwf	strtol@endptr+1,c
  3720  001428  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  3721  00142A  6E2A               	movwf	strtol@base,c
  3722  00142C  6A2B               	clrf	strtol@base+1,c
  3723  00142E  BE2A               	btfsc	strtol@base,7,c
  3724  001430  062B               	decf	strtol@base+1,f,c
  3725  001432  EC2A  F007         	call	_strtol	;wreg free
  3726  001436  C026  F07C         	movff	?_strtol,GetIntFromUartData@retVal
  3727  00143A  C027  F07D         	movff	?_strtol+1,GetIntFromUartData@retVal+1
  3728  00143E  C028  F07E         	movff	?_strtol+2,GetIntFromUartData@retVal+2
  3729  001442  C029  F07F         	movff	?_strtol+3,GetIntFromUartData@retVal+3
  3730                           
  3731                           ;SystemCommon.c: 60: ZeroArray(dataRegArr, 0xA);
  3732  001446  0E70               	movlw	low GetIntFromUartData@dataRegArr
  3733  001448  6E20               	movwf	ZeroArray@array,c
  3734  00144A  0E00               	movlw	high GetIntFromUartData@dataRegArr
  3735  00144C  6E21               	movwf	ZeroArray@array+1,c
  3736  00144E  0E00               	movlw	0
  3737  001450  6E23               	movwf	ZeroArray@size+1,c
  3738  001452  0E0A               	movlw	10
  3739  001454  6E22               	movwf	ZeroArray@size,c
  3740  001456  ECCB  F01B         	call	_ZeroArray	;wreg free
  3741                           
  3742                           ;SystemCommon.c: 62: for(int idxCon = 0; idxCon < 0xA; idxCon++)
  3743  00145A  0E00               	movlw	0
  3744  00145C  0100               	movlb	0	; () banked
  3745  00145E  6F85               	movwf	(GetIntFromUartData@idxCon+1)& (0+255),b
  3746  001460  0E00               	movlw	0
  3747  001462  6F84               	movwf	GetIntFromUartData@idxCon& (0+255),b
  3748  001464                     l7532:
  3749                           
  3750                           ; BSR set to: 0
  3751  001464  BF85               	btfsc	(GetIntFromUartData@idxCon+1)& (0+255),7,b
  3752  001466  D006               	goto	l1301
  3753  001468  5185               	movf	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  3754  00146A  E12E               	bnz	l7550
  3755  00146C  0E0A               	movlw	10
  3756  00146E  5D84               	subwf	GetIntFromUartData@idxCon& (0+255),w,b
  3757  001470  B0D8               	btfsc	status,0,c
  3758  001472  D02A               	goto	u7600
  3759  001474                     l1301:
  3760                           
  3761                           ; BSR set to: 0
  3762                           ;SystemCommon.c: 63: {
  3763                           ;SystemCommon.c: 64: recVal = data[idxData + idxCon];
  3764                           
  3765                           ; BSR set to: 0
  3766  001474  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  3767  001476  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  3768  001478  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  3769  00147A  0E00               	movlw	0
  3770  00147C  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  3771  00147E  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  3772  001480  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  3773  001482  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  3774  001484  6ED9               	movwf	fsr2l,c
  3775  001486  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  3776  001488  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  3777  00148A  6EDA               	movwf	fsr2h,c
  3778  00148C  50DF               	movf	indf2,w,c
  3779  00148E  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;SystemCommon.c: 65: if(recVal == 0x23)
  3783  001490  0E23               	movlw	35
  3784  001492  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  3785  001494  B4D8               	btfsc	status,2,c
  3786  001496  D018               	goto	u7600
  3787                           
  3788                           ; BSR set to: 0
  3789                           ;SystemCommon.c: 69: else
  3790                           ;SystemCommon.c: 70: {
  3791                           ;SystemCommon.c: 71: dataRegArr[idxCon] = data[idxCon + idxData] + '0';
  3792                           
  3793                           ; BSR set to: 0
  3794                           
  3795                           ; BSR set to: 0
  3796                           ;SystemCommon.c: 68: }
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;SystemCommon.c: 66: {
  3800                           ;SystemCommon.c: 67: break;
  3801  001498  0E70               	movlw	low GetIntFromUartData@dataRegArr
  3802  00149A  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  3803  00149C  6ED9               	movwf	fsr2l,c
  3804  00149E  0E00               	movlw	high GetIntFromUartData@dataRegArr
  3805  0014A0  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  3806  0014A2  6EDA               	movwf	fsr2h,c
  3807  0014A4  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  3808  0014A6  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  3809  0014A8  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  3810  0014AA  0E00               	movlw	0
  3811  0014AC  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  3812  0014AE  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  3813  0014B0  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  3814  0014B2  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  3815  0014B4  6EE1               	movwf	fsr1l,c
  3816  0014B6  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  3817  0014B8  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  3818  0014BA  6EE2               	movwf	fsr1h,c
  3819  0014BC  50E7               	movf	indf1,w,c
  3820  0014BE  0F30               	addlw	48
  3821  0014C0  6EDF               	movwf	indf2,c
  3822                           
  3823                           ; BSR set to: 0
  3824                           
  3825                           ; BSR set to: 0
  3826  0014C2  4B84               	infsnz	GetIntFromUartData@idxCon& (0+255),f,b
  3827  0014C4  2B85               	incf	(GetIntFromUartData@idxCon+1)& (0+255),f,b
  3828  0014C6  D7CE               	goto	l7532
  3829  0014C8                     u7600:
  3830  0014C8                     l7550:
  3831                           
  3832                           ; BSR set to: 0
  3833                           ;SystemCommon.c: 72: }
  3834                           ;SystemCommon.c: 73: }
  3835                           ;SystemCommon.c: 74: retVal.con = strtol(dataRegArr, (0), num);
  3836  0014C8  0E70               	movlw	low GetIntFromUartData@dataRegArr
  3837  0014CA  6E26               	movwf	strtol@s,c
  3838  0014CC  0E00               	movlw	high GetIntFromUartData@dataRegArr
  3839  0014CE  6E27               	movwf	strtol@s+1,c
  3840  0014D0  0E00               	movlw	0
  3841  0014D2  6E28               	movwf	strtol@endptr,c
  3842  0014D4  0E00               	movlw	0
  3843  0014D6  6E29               	movwf	strtol@endptr+1,c
  3844  0014D8  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  3845  0014DA  6E2A               	movwf	strtol@base,c
  3846  0014DC  6A2B               	clrf	strtol@base+1,c
  3847  0014DE  BE2A               	btfsc	strtol@base,7,c
  3848  0014E0  062B               	decf	strtol@base+1,f,c
  3849  0014E2  EC2A  F007         	call	_strtol	;wreg free
  3850  0014E6  C026  F080         	movff	?_strtol,GetIntFromUartData@retVal+4
  3851  0014EA  C027  F081         	movff	?_strtol+1,GetIntFromUartData@retVal+5
  3852  0014EE  C028  F082         	movff	?_strtol+2,GetIntFromUartData@retVal+6
  3853  0014F2  C029  F083         	movff	?_strtol+3,GetIntFromUartData@retVal+7
  3854                           
  3855                           ;SystemCommon.c: 76: return retVal;
  3856  0014F6  EE20  F07C         	lfsr	2,GetIntFromUartData@retVal
  3857  0014FA  EE00  F066         	lfsr	0,?_GetIntFromUartData
  3858  0014FE  0E07               	movlw	7
  3859  001500                     u7611:
  3860  001500  CFDB FFEB          	movff	plusw2,plusw0
  3861  001504  06E8               	decf	wreg,f,c
  3862  001506  E2FC               	bc	u7611
  3863  001508  0012               	return	
  3864  00150A                     __end_of_GetIntFromUartData:
  3865                           	opt stack 0
  3866                           tosu	equ	0xFFF
  3867                           tosh	equ	0xFFE
  3868                           tosl	equ	0xFFD
  3869                           pclath	equ	0xFFA
  3870                           tblptru	equ	0xFF8
  3871                           tblptrh	equ	0xFF7
  3872                           tblptrl	equ	0xFF6
  3873                           tablat	equ	0xFF5
  3874                           prodh	equ	0xFF4
  3875                           prodl	equ	0xFF3
  3876                           intcon	equ	0xFF2
  3877                           postinc0	equ	0xFEE
  3878                           plusw0	equ	0xFEB
  3879                           wreg	equ	0xFE8
  3880                           indf1	equ	0xFE7
  3881                           postdec1	equ	0xFE5
  3882                           fsr1h	equ	0xFE2
  3883                           fsr1l	equ	0xFE1
  3884                           indf2	equ	0xFDF
  3885                           postinc2	equ	0xFDE
  3886                           plusw2	equ	0xFDB
  3887                           fsr2h	equ	0xFDA
  3888                           fsr2l	equ	0xFD9
  3889                           status	equ	0xFD8
  3890                           
  3891 ;; *************** function _strtol *****************
  3892 ;; Defined at:
  3893 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  3894 ;; Parameters:    Size  Location     Type
  3895 ;;  s               2   37[COMRAM] PTR const unsigned char 
  3896 ;;		 -> GetIntFromUartData@dataRegArr(10), 
  3897 ;;  endptr          2   39[COMRAM] PTR PTR unsigned char 
  3898 ;;		 -> NULL(0), 
  3899 ;;  base            2   41[COMRAM] int 
  3900 ;; Auto vars:     Size  Location     Type
  3901 ;;  a               4    1[BANK0 ] long 
  3902 ;;  c               1    5[BANK0 ] unsigned char 
  3903 ;;  sign            1    0[BANK0 ] unsigned char 
  3904 ;; Return value:  Size  Location     Type
  3905 ;;                  4   37[COMRAM] long 
  3906 ;; Registers used:
  3907 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3908 ;; Tracked objects:
  3909 ;;		On entry : 0/0
  3910 ;;		On exit  : 0/0
  3911 ;;		Unchanged: 0/0
  3912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3913 ;;      Params:         6       0       0       0       0       0       0
  3914 ;;      Locals:         0       6       0       0       0       0       0
  3915 ;;      Temps:          4       0       0       0       0       0       0
  3916 ;;      Totals:        10       6       0       0       0       0       0
  3917 ;;Total ram usage:       16 bytes
  3918 ;; Hardware stack levels used:    1
  3919 ;; Hardware stack levels required when called:    5
  3920 ;; This function calls:
  3921 ;;		___lmul
  3922 ;;		_isalpha
  3923 ;;		_isdigit
  3924 ;;		_isspace
  3925 ;;		_toupper
  3926 ;; This function is called by:
  3927 ;;		_GetIntFromUartData
  3928 ;; This function uses a non-reentrant model
  3929 ;;
  3930                           
  3931                           	psect	text14
  3932  000E54                     __ptext14:
  3933                           	opt stack 0
  3934  000E54                     _strtol:
  3935                           	opt stack 21
  3936                           
  3937                           ;incstack = 0
  3938  000E54  C026  FFD9         	movff	strtol@s,fsr2l
  3939  000E58  C027  FFDA         	movff	strtol@s+1,fsr2h
  3940  000E5C  50DF               	movf	indf2,w,c
  3941  000E5E  0100               	movlb	0	; () banked
  3942  000E60  6F65               	movwf	strtol@c& (0+255),b
  3943                           
  3944                           ; BSR set to: 0
  3945  000E62  4A26               	infsnz	strtol@s,f,c
  3946  000E64  2A27               	incf	strtol@s+1,f,c
  3947                           
  3948                           ; BSR set to: 0
  3949  000E66  5165               	movf	strtol@c& (0+255),w,b
  3950  000E68  EC2F  F01B         	call	_isspace
  3951  000E6C  B0D8               	btfsc	status,0,c
  3952  000E6E  D7F2               	goto	_strtol
  3953  000E70  0E00               	movlw	0
  3954  000E72  0100               	movlb	0	; () banked
  3955  000E74  6F61               	movwf	strtol@a& (0+255),b
  3956  000E76  0E00               	movlw	0
  3957  000E78  6F62               	movwf	(strtol@a+1)& (0+255),b
  3958  000E7A  0E00               	movlw	0
  3959  000E7C  6F63               	movwf	(strtol@a+2)& (0+255),b
  3960  000E7E  0E00               	movlw	0
  3961  000E80  6F64               	movwf	(strtol@a+3)& (0+255),b
  3962  000E82  0E00               	movlw	0
  3963  000E84  6F60               	movwf	strtol@sign& (0+255),b
  3964                           
  3965                           ; BSR set to: 0
  3966  000E86  0E2D               	movlw	45
  3967  000E88  1965               	xorwf	strtol@c& (0+255),w,b
  3968  000E8A  A4D8               	btfss	status,2,c
  3969  000E8C  D003               	goto	l2044
  3970                           
  3971                           ; BSR set to: 0
  3972  000E8E  0E01               	movlw	1
  3973  000E90  6F60               	movwf	strtol@sign& (0+255),b
  3974  000E92  D004               	goto	u7180
  3975  000E94                     l2044:
  3976                           
  3977                           ; BSR set to: 0
  3978                           
  3979                           ; BSR set to: 0
  3980  000E94  0E2B               	movlw	43
  3981  000E96  1965               	xorwf	strtol@c& (0+255),w,b
  3982  000E98  A4D8               	btfss	status,2,c
  3983  000E9A  D008               	goto	l2046
  3984  000E9C                     u7180:
  3985                           
  3986                           ; BSR set to: 0
  3987  000E9C  C026  FFD9         	movff	strtol@s,fsr2l
  3988  000EA0  C027  FFDA         	movff	strtol@s+1,fsr2h
  3989  000EA4  50DF               	movf	indf2,w,c
  3990  000EA6  6F65               	movwf	strtol@c& (0+255),b
  3991                           
  3992                           ; BSR set to: 0
  3993  000EA8  4A26               	infsnz	strtol@s,f,c
  3994  000EAA  2A27               	incf	strtol@s+1,f,c
  3995  000EAC                     l2046:
  3996                           
  3997                           ; BSR set to: 0
  3998                           
  3999                           ; BSR set to: 0
  4000                           
  4001                           ; BSR set to: 0
  4002  000EAC  0E30               	movlw	48
  4003  000EAE  1965               	xorwf	strtol@c& (0+255),w,b
  4004  000EB0  A4D8               	btfss	status,2,c
  4005  000EB2  D02E               	goto	l2054
  4006                           
  4007                           ; BSR set to: 0
  4008  000EB4  C026  FFD9         	movff	strtol@s,fsr2l
  4009  000EB8  C027  FFDA         	movff	strtol@s+1,fsr2h
  4010  000EBC  50DF               	movf	indf2,w,c
  4011  000EBE  6F65               	movwf	strtol@c& (0+255),b
  4012                           
  4013                           ; BSR set to: 0
  4014  000EC0  4A26               	infsnz	strtol@s,f,c
  4015  000EC2  2A27               	incf	strtol@s+1,f,c
  4016                           
  4017                           ; BSR set to: 0
  4018  000EC4  502A               	movf	strtol@base,w,c
  4019  000EC6  102B               	iorwf	strtol@base+1,w,c
  4020  000EC8  B4D8               	btfsc	status,2,c
  4021  000ECA  D005               	goto	u7210
  4022                           
  4023                           ; BSR set to: 0
  4024  000ECC  0E10               	movlw	16
  4025  000ECE  182A               	xorwf	strtol@base,w,c
  4026  000ED0  102B               	iorwf	strtol@base+1,w,c
  4027  000ED2  A4D8               	btfss	status,2,c
  4028  000ED4  D015               	goto	l2048
  4029  000ED6                     u7210:
  4030                           
  4031                           ; BSR set to: 0
  4032                           
  4033                           ; BSR set to: 0
  4034  000ED6  0E78               	movlw	120
  4035  000ED8  1965               	xorwf	strtol@c& (0+255),w,b
  4036  000EDA  B4D8               	btfsc	status,2,c
  4037  000EDC  D004               	goto	u7230
  4038                           
  4039                           ; BSR set to: 0
  4040  000EDE  0E58               	movlw	88
  4041  000EE0  1965               	xorwf	strtol@c& (0+255),w,b
  4042  000EE2  A4D8               	btfss	status,2,c
  4043  000EE4  D00D               	goto	l2048
  4044  000EE6                     u7230:
  4045                           
  4046                           ; BSR set to: 0
  4047                           
  4048                           ; BSR set to: 0
  4049  000EE6  0E00               	movlw	0
  4050  000EE8  6E2B               	movwf	strtol@base+1,c
  4051  000EEA  0E10               	movlw	16
  4052  000EEC  6E2A               	movwf	strtol@base,c
  4053                           
  4054                           ; BSR set to: 0
  4055  000EEE  C026  FFD9         	movff	strtol@s,fsr2l
  4056  000EF2  C027  FFDA         	movff	strtol@s+1,fsr2h
  4057  000EF6  50DF               	movf	indf2,w,c
  4058  000EF8  6F65               	movwf	strtol@c& (0+255),b
  4059                           
  4060                           ; BSR set to: 0
  4061  000EFA  4A26               	infsnz	strtol@s,f,c
  4062  000EFC  2A27               	incf	strtol@s+1,f,c
  4063  000EFE  D008               	goto	l2054
  4064  000F00                     l2048:
  4065                           
  4066                           ; BSR set to: 0
  4067                           
  4068                           ; BSR set to: 0
  4069  000F00  502A               	movf	strtol@base,w,c
  4070  000F02  102B               	iorwf	strtol@base+1,w,c
  4071  000F04  A4D8               	btfss	status,2,c
  4072  000F06  D004               	goto	l2054
  4073                           
  4074                           ; BSR set to: 0
  4075  000F08  0E00               	movlw	0
  4076  000F0A  6E2B               	movwf	strtol@base+1,c
  4077  000F0C  0E08               	movlw	8
  4078  000F0E  6E2A               	movwf	strtol@base,c
  4079  000F10                     l2054:
  4080                           
  4081                           ; BSR set to: 0
  4082                           
  4083                           ; BSR set to: 0
  4084                           
  4085                           ; BSR set to: 0
  4086                           
  4087                           ; BSR set to: 0
  4088  000F10  502A               	movf	strtol@base,w,c
  4089  000F12  102B               	iorwf	strtol@base+1,w,c
  4090  000F14  A4D8               	btfss	status,2,c
  4091  000F16  D004               	goto	l2055
  4092                           
  4093                           ; BSR set to: 0
  4094  000F18  0E00               	movlw	0
  4095  000F1A  6E2B               	movwf	strtol@base+1,c
  4096  000F1C  0E0A               	movlw	10
  4097  000F1E  6E2A               	movwf	strtol@base,c
  4098  000F20                     l2055:
  4099                           
  4100                           ; BSR set to: 0
  4101                           
  4102                           ; BSR set to: 0
  4103                           
  4104                           ; BSR set to: 0
  4105  000F20  5165               	movf	strtol@c& (0+255),w,b
  4106  000F22  EC07  F01B         	call	_isalpha
  4107  000F26  A0D8               	btfss	status,0,c
  4108  000F28  D008               	goto	l2057
  4109  000F2A  0100               	movlb	0	; () banked
  4110  000F2C  5165               	movf	strtol@c& (0+255),w,b
  4111  000F2E  EC26  F01C         	call	_toupper
  4112  000F32  0FC9               	addlw	201
  4113  000F34  0100               	movlb	0	; () banked
  4114  000F36  6F65               	movwf	strtol@c& (0+255),b
  4115  000F38  D009               	goto	l2060
  4116  000F3A                     l2057:
  4117                           
  4118                           ; BSR set to: 0
  4119  000F3A  0100               	movlb	0	; () banked
  4120  000F3C  5165               	movf	strtol@c& (0+255),w,b
  4121  000F3E  ECAD  F01B         	call	_isdigit
  4122  000F42  A0D8               	btfss	status,0,c
  4123  000F44  D039               	goto	l2061
  4124  000F46  0E30               	movlw	48
  4125  000F48  0100               	movlb	0	; () banked
  4126  000F4A  5F65               	subwf	strtol@c& (0+255),f,b
  4127  000F4C                     l2060:
  4128                           
  4129                           ; BSR set to: 0
  4130                           
  4131                           ; BSR set to: 0
  4132                           
  4133                           ; BSR set to: 0
  4134  000F4C  5165               	movf	strtol@c& (0+255),w,b
  4135  000F4E  6E2C               	movwf	??_strtol& (0+255),c
  4136  000F50  6A2D               	clrf	(??_strtol+1)& (0+255),c
  4137  000F52  502A               	movf	strtol@base,w,c
  4138  000F54  5C2C               	subwf	??_strtol,w,c
  4139  000F56  502D               	movf	??_strtol+1,w,c
  4140  000F58  0A80               	xorlw	128
  4141  000F5A  6E2E               	movwf	(??_strtol+2)& (0+255),c
  4142  000F5C  502B               	movf	strtol@base+1,w,c
  4143  000F5E  0A80               	xorlw	128
  4144  000F60  582E               	subwfb	(??_strtol+2)& (0+255),w,c
  4145  000F62  B0D8               	btfsc	status,0,c
  4146  000F64  D029               	goto	l2061
  4147                           
  4148                           ; BSR set to: 0
  4149                           
  4150                           ; BSR set to: 0
  4151                           
  4152                           ; BSR set to: 0
  4153  000F66  C02A  F01A         	movff	strtol@base,___lmul@multiplier
  4154  000F6A  C02B  F01B         	movff	strtol@base+1,___lmul@multiplier+1
  4155  000F6E  0E00               	movlw	0
  4156  000F70  BE1B               	btfsc	___lmul@multiplier+1,7,c
  4157  000F72  0EFF               	movlw	-1
  4158  000F74  6E1C               	movwf	___lmul@multiplier+2,c
  4159  000F76  6E1D               	movwf	___lmul@multiplier+3,c
  4160  000F78  C061  F01E         	movff	strtol@a,___lmul@multiplicand
  4161  000F7C  C062  F01F         	movff	strtol@a+1,___lmul@multiplicand+1
  4162  000F80  C063  F020         	movff	strtol@a+2,___lmul@multiplicand+2
  4163  000F84  C064  F021         	movff	strtol@a+3,___lmul@multiplicand+3
  4164  000F88  EC3B  F017         	call	___lmul	;wreg free
  4165  000F8C  0100               	movlb	0	; () banked
  4166  000F8E  5165               	movf	strtol@c& (0+255),w,b
  4167  000F90  241A               	addwf	?___lmul,w,c
  4168  000F92  6F61               	movwf	strtol@a& (0+255),b
  4169  000F94  0E00               	movlw	0
  4170  000F96  201B               	addwfc	?___lmul+1,w,c
  4171  000F98  6F62               	movwf	(strtol@a+1)& (0+255),b
  4172  000F9A  0E00               	movlw	0
  4173  000F9C  201C               	addwfc	?___lmul+2,w,c
  4174  000F9E  6F63               	movwf	(strtol@a+2)& (0+255),b
  4175  000FA0  0E00               	movlw	0
  4176  000FA2  201D               	addwfc	?___lmul+3,w,c
  4177  000FA4  6F64               	movwf	(strtol@a+3)& (0+255),b
  4178                           
  4179                           ; BSR set to: 0
  4180  000FA6  C026  FFD9         	movff	strtol@s,fsr2l
  4181  000FAA  C027  FFDA         	movff	strtol@s+1,fsr2h
  4182  000FAE  50DF               	movf	indf2,w,c
  4183  000FB0  6F65               	movwf	strtol@c& (0+255),b
  4184                           
  4185                           ; BSR set to: 0
  4186  000FB2  4A26               	infsnz	strtol@s,f,c
  4187  000FB4  2A27               	incf	strtol@s+1,f,c
  4188  000FB6  D7B4               	goto	l2055
  4189  000FB8                     l2061:
  4190                           
  4191                           ; BSR set to: 0
  4192  000FB8  5028               	movf	strtol@endptr,w,c
  4193  000FBA  1029               	iorwf	strtol@endptr+1,w,c
  4194  000FBC  B4D8               	btfsc	status,2,c
  4195  000FBE  D00E               	goto	l2063
  4196  000FC0  0EFF               	movlw	255
  4197  000FC2  2426               	addwf	strtol@s,w,c
  4198  000FC4  6E2C               	movwf	??_strtol& (0+255),c
  4199  000FC6  0EFF               	movlw	255
  4200  000FC8  2027               	addwfc	strtol@s+1,w,c
  4201  000FCA  6E2D               	movwf	(??_strtol+1)& (0+255),c
  4202  000FCC  C028  FFD9         	movff	strtol@endptr,fsr2l
  4203  000FD0  C029  FFDA         	movff	strtol@endptr+1,fsr2h
  4204  000FD4  C02C  FFDE         	movff	??_strtol,postinc2
  4205  000FD8  C02D  FFDD         	movff	??_strtol+1,postdec2
  4206  000FDC                     l2063:
  4207  000FDC  0100               	movlb	0	; () banked
  4208  000FDE  5160               	movf	strtol@sign& (0+255),w,b
  4209  000FE0  B4D8               	btfsc	status,2,c
  4210  000FE2  D01A               	goto	l2064
  4211                           
  4212                           ; BSR set to: 0
  4213  000FE4  C061  F02C         	movff	strtol@a,??_strtol
  4214  000FE8  C062  F02D         	movff	strtol@a+1,??_strtol+1
  4215  000FEC  C063  F02E         	movff	strtol@a+2,??_strtol+2
  4216  000FF0  C064  F02F         	movff	strtol@a+3,??_strtol+3
  4217  000FF4  1E2C               	comf	??_strtol,f,c
  4218  000FF6  1E2D               	comf	??_strtol+1,f,c
  4219  000FF8  1E2E               	comf	??_strtol+2,f,c
  4220  000FFA  1E2F               	comf	??_strtol+3,f,c
  4221  000FFC  2A2C               	incf	??_strtol,f,c
  4222  000FFE  0E00               	movlw	0
  4223  001000  222D               	addwfc	??_strtol+1,f,c
  4224  001002  222E               	addwfc	??_strtol+2,f,c
  4225  001004  222F               	addwfc	??_strtol+3,f,c
  4226  001006  C02C  F026         	movff	??_strtol,?_strtol
  4227  00100A  C02D  F027         	movff	??_strtol+1,?_strtol+1
  4228  00100E  C02E  F028         	movff	??_strtol+2,?_strtol+2
  4229  001012  C02F  F029         	movff	??_strtol+3,?_strtol+3
  4230                           
  4231                           ; BSR set to: 0
  4232  001016  0012               	return	
  4233  001018                     l2064:
  4234                           
  4235                           ; BSR set to: 0
  4236  001018  C061  F026         	movff	strtol@a,?_strtol
  4237  00101C  C062  F027         	movff	strtol@a+1,?_strtol+1
  4238  001020  C063  F028         	movff	strtol@a+2,?_strtol+2
  4239  001024  C064  F029         	movff	strtol@a+3,?_strtol+3
  4240                           
  4241                           ; BSR set to: 0
  4242  001028  0012               	return		;funcret
  4243  00102A                     __end_of_strtol:
  4244                           	opt stack 0
  4245                           tosu	equ	0xFFF
  4246                           tosh	equ	0xFFE
  4247                           tosl	equ	0xFFD
  4248                           pclath	equ	0xFFA
  4249                           tblptru	equ	0xFF8
  4250                           tblptrh	equ	0xFF7
  4251                           tblptrl	equ	0xFF6
  4252                           tablat	equ	0xFF5
  4253                           prodh	equ	0xFF4
  4254                           prodl	equ	0xFF3
  4255                           intcon	equ	0xFF2
  4256                           postinc0	equ	0xFEE
  4257                           plusw0	equ	0xFEB
  4258                           wreg	equ	0xFE8
  4259                           indf1	equ	0xFE7
  4260                           postdec1	equ	0xFE5
  4261                           fsr1h	equ	0xFE2
  4262                           fsr1l	equ	0xFE1
  4263                           indf2	equ	0xFDF
  4264                           postinc2	equ	0xFDE
  4265                           postdec2	equ	0xFDD
  4266                           plusw2	equ	0xFDB
  4267                           fsr2h	equ	0xFDA
  4268                           fsr2l	equ	0xFD9
  4269                           status	equ	0xFD8
  4270                           
  4271 ;; *************** function _toupper *****************
  4272 ;; Defined at:
  4273 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  4274 ;; Parameters:    Size  Location     Type
  4275 ;;  c               1    wreg     unsigned char 
  4276 ;; Auto vars:     Size  Location     Type
  4277 ;;  c               1   23[COMRAM] unsigned char 
  4278 ;; Return value:  Size  Location     Type
  4279 ;;                  1    wreg      unsigned char 
  4280 ;; Registers used:
  4281 ;;		wreg, status,2, status,0
  4282 ;; Tracked objects:
  4283 ;;		On entry : 0/0
  4284 ;;		On exit  : 0/0
  4285 ;;		Unchanged: 0/0
  4286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4287 ;;      Params:         0       0       0       0       0       0       0
  4288 ;;      Locals:         1       0       0       0       0       0       0
  4289 ;;      Temps:          0       0       0       0       0       0       0
  4290 ;;      Totals:         1       0       0       0       0       0       0
  4291 ;;Total ram usage:        1 bytes
  4292 ;; Hardware stack levels used:    1
  4293 ;; Hardware stack levels required when called:    3
  4294 ;; This function calls:
  4295 ;;		Nothing
  4296 ;; This function is called by:
  4297 ;;		_strtol
  4298 ;; This function uses a non-reentrant model
  4299 ;;
  4300                           
  4301                           	psect	text15
  4302  00384C                     __ptext15:
  4303                           	opt stack 0
  4304  00384C                     _toupper:
  4305                           	opt stack 22
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;incstack = 0
  4309                           ;toupper@c stored from wreg
  4310  00384C  6E18               	movwf	toupper@c,c
  4311  00384E  0E7B               	movlw	123
  4312  003850  6018               	cpfslt	toupper@c,c
  4313  003852  D004               	goto	l2068
  4314  003854  0E60               	movlw	96
  4315  003856  6418               	cpfsgt	toupper@c,c
  4316  003858  D001               	goto	l2068
  4317  00385A  9A18               	bcf	toupper@c,5,c
  4318  00385C                     l2068:
  4319  00385C  5018               	movf	toupper@c,w,c
  4320  00385E  0012               	return	
  4321  003860                     __end_of_toupper:
  4322                           	opt stack 0
  4323                           tosu	equ	0xFFF
  4324                           tosh	equ	0xFFE
  4325                           tosl	equ	0xFFD
  4326                           pclath	equ	0xFFA
  4327                           tblptru	equ	0xFF8
  4328                           tblptrh	equ	0xFF7
  4329                           tblptrl	equ	0xFF6
  4330                           tablat	equ	0xFF5
  4331                           prodh	equ	0xFF4
  4332                           prodl	equ	0xFF3
  4333                           intcon	equ	0xFF2
  4334                           postinc0	equ	0xFEE
  4335                           plusw0	equ	0xFEB
  4336                           wreg	equ	0xFE8
  4337                           indf1	equ	0xFE7
  4338                           postdec1	equ	0xFE5
  4339                           fsr1h	equ	0xFE2
  4340                           fsr1l	equ	0xFE1
  4341                           indf2	equ	0xFDF
  4342                           postinc2	equ	0xFDE
  4343                           postdec2	equ	0xFDD
  4344                           plusw2	equ	0xFDB
  4345                           fsr2h	equ	0xFDA
  4346                           fsr2l	equ	0xFD9
  4347                           status	equ	0xFD8
  4348                           
  4349 ;; *************** function _isspace *****************
  4350 ;; Defined at:
  4351 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  4352 ;; Parameters:    Size  Location     Type
  4353 ;;  c               1    wreg     unsigned char 
  4354 ;; Auto vars:     Size  Location     Type
  4355 ;;  c               1   25[COMRAM] unsigned char 
  4356 ;; Return value:  Size  Location     Type
  4357 ;;		None               void
  4358 ;; Registers used:
  4359 ;;		wreg, status,2, status,0
  4360 ;; Tracked objects:
  4361 ;;		On entry : 0/0
  4362 ;;		On exit  : 0/0
  4363 ;;		Unchanged: 0/0
  4364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4365 ;;      Params:         0       0       0       0       0       0       0
  4366 ;;      Locals:         2       0       0       0       0       0       0
  4367 ;;      Temps:          1       0       0       0       0       0       0
  4368 ;;      Totals:         3       0       0       0       0       0       0
  4369 ;;Total ram usage:        3 bytes
  4370 ;; Hardware stack levels used:    1
  4371 ;; Hardware stack levels required when called:    3
  4372 ;; This function calls:
  4373 ;;		Nothing
  4374 ;; This function is called by:
  4375 ;;		_strtol
  4376 ;; This function uses a non-reentrant model
  4377 ;;
  4378                           
  4379                           	psect	text16
  4380  00365E                     __ptext16:
  4381                           	opt stack 0
  4382  00365E                     _isspace:
  4383                           	opt stack 22
  4384                           
  4385                           ;incstack = 0
  4386                           ;isspace@c stored from wreg
  4387  00365E  6E1A               	movwf	isspace@c,c
  4388  003660  0E01               	movlw	1
  4389  003662  6E19               	movwf	_isspace$3029,c
  4390  003664  0E20               	movlw	32
  4391  003666  181A               	xorwf	isspace@c,w,c
  4392  003668  B4D8               	btfsc	status,2,c
  4393  00366A  D008               	goto	l2150
  4394  00366C  0E0E               	movlw	14
  4395  00366E  601A               	cpfslt	isspace@c,c
  4396  003670  D003               	goto	u6870
  4397  003672  0E09               	movlw	9
  4398  003674  601A               	cpfslt	isspace@c,c
  4399  003676  D002               	goto	l2150
  4400  003678                     u6870:
  4401  003678  0E00               	movlw	0
  4402  00367A  6E19               	movwf	_isspace$3029,c
  4403  00367C                     l2150:
  4404  00367C  C019  F018         	movff	_isspace$3029,??_isspace
  4405  003680  3018               	rrcf	??_isspace,w,c
  4406  003682  0012               	return	
  4407  003684                     __end_of_isspace:
  4408                           	opt stack 0
  4409                           tosu	equ	0xFFF
  4410                           tosh	equ	0xFFE
  4411                           tosl	equ	0xFFD
  4412                           pclath	equ	0xFFA
  4413                           tblptru	equ	0xFF8
  4414                           tblptrh	equ	0xFF7
  4415                           tblptrl	equ	0xFF6
  4416                           tablat	equ	0xFF5
  4417                           prodh	equ	0xFF4
  4418                           prodl	equ	0xFF3
  4419                           intcon	equ	0xFF2
  4420                           postinc0	equ	0xFEE
  4421                           plusw0	equ	0xFEB
  4422                           wreg	equ	0xFE8
  4423                           indf1	equ	0xFE7
  4424                           postdec1	equ	0xFE5
  4425                           fsr1h	equ	0xFE2
  4426                           fsr1l	equ	0xFE1
  4427                           indf2	equ	0xFDF
  4428                           postinc2	equ	0xFDE
  4429                           postdec2	equ	0xFDD
  4430                           plusw2	equ	0xFDB
  4431                           fsr2h	equ	0xFDA
  4432                           fsr2l	equ	0xFD9
  4433                           status	equ	0xFD8
  4434                           
  4435 ;; *************** function _isdigit *****************
  4436 ;; Defined at:
  4437 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  4438 ;; Parameters:    Size  Location     Type
  4439 ;;  c               1    wreg     unsigned char 
  4440 ;; Auto vars:     Size  Location     Type
  4441 ;;  c               1   25[COMRAM] unsigned char 
  4442 ;; Return value:  Size  Location     Type
  4443 ;;		None               void
  4444 ;; Registers used:
  4445 ;;		wreg, status,2, status,0
  4446 ;; Tracked objects:
  4447 ;;		On entry : 0/0
  4448 ;;		On exit  : 0/0
  4449 ;;		Unchanged: 0/0
  4450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4451 ;;      Params:         0       0       0       0       0       0       0
  4452 ;;      Locals:         2       0       0       0       0       0       0
  4453 ;;      Temps:          1       0       0       0       0       0       0
  4454 ;;      Totals:         3       0       0       0       0       0       0
  4455 ;;Total ram usage:        3 bytes
  4456 ;; Hardware stack levels used:    1
  4457 ;; Hardware stack levels required when called:    3
  4458 ;; This function calls:
  4459 ;;		Nothing
  4460 ;; This function is called by:
  4461 ;;		_strtol
  4462 ;; This function uses a non-reentrant model
  4463 ;;
  4464                           
  4465                           	psect	text17
  4466  00375A                     __ptext17:
  4467                           	opt stack 0
  4468  00375A                     _isdigit:
  4469                           	opt stack 22
  4470                           
  4471                           ;incstack = 0
  4472                           ;isdigit@c stored from wreg
  4473  00375A  6E1A               	movwf	isdigit@c,c
  4474  00375C  0E00               	movlw	0
  4475  00375E  6E19               	movwf	_isdigit$3026,c
  4476  003760  0E3A               	movlw	58
  4477  003762  601A               	cpfslt	isdigit@c,c
  4478  003764  D005               	goto	l2145
  4479  003766  0E2F               	movlw	47
  4480  003768  641A               	cpfsgt	isdigit@c,c
  4481  00376A  D002               	goto	l2145
  4482  00376C  0E01               	movlw	1
  4483  00376E  6E19               	movwf	_isdigit$3026,c
  4484  003770                     l2145:
  4485  003770  C019  F018         	movff	_isdigit$3026,??_isdigit
  4486  003774  3018               	rrcf	??_isdigit,w,c
  4487  003776  0012               	return	
  4488  003778                     __end_of_isdigit:
  4489                           	opt stack 0
  4490                           tosu	equ	0xFFF
  4491                           tosh	equ	0xFFE
  4492                           tosl	equ	0xFFD
  4493                           pclath	equ	0xFFA
  4494                           tblptru	equ	0xFF8
  4495                           tblptrh	equ	0xFF7
  4496                           tblptrl	equ	0xFF6
  4497                           tablat	equ	0xFF5
  4498                           prodh	equ	0xFF4
  4499                           prodl	equ	0xFF3
  4500                           intcon	equ	0xFF2
  4501                           postinc0	equ	0xFEE
  4502                           plusw0	equ	0xFEB
  4503                           wreg	equ	0xFE8
  4504                           indf1	equ	0xFE7
  4505                           postdec1	equ	0xFE5
  4506                           fsr1h	equ	0xFE2
  4507                           fsr1l	equ	0xFE1
  4508                           indf2	equ	0xFDF
  4509                           postinc2	equ	0xFDE
  4510                           postdec2	equ	0xFDD
  4511                           plusw2	equ	0xFDB
  4512                           fsr2h	equ	0xFDA
  4513                           fsr2l	equ	0xFD9
  4514                           status	equ	0xFD8
  4515                           
  4516 ;; *************** function _isalpha *****************
  4517 ;; Defined at:
  4518 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  4519 ;; Parameters:    Size  Location     Type
  4520 ;;  c               1    wreg     unsigned char 
  4521 ;; Auto vars:     Size  Location     Type
  4522 ;;  c               1   28[COMRAM] unsigned char 
  4523 ;; Return value:  Size  Location     Type
  4524 ;;		None               void
  4525 ;; Registers used:
  4526 ;;		wreg, status,2, status,0, cstack
  4527 ;; Tracked objects:
  4528 ;;		On entry : 0/0
  4529 ;;		On exit  : 0/0
  4530 ;;		Unchanged: 0/0
  4531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4532 ;;      Params:         0       0       0       0       0       0       0
  4533 ;;      Locals:         2       0       0       0       0       0       0
  4534 ;;      Temps:          1       0       0       0       0       0       0
  4535 ;;      Totals:         3       0       0       0       0       0       0
  4536 ;;Total ram usage:        3 bytes
  4537 ;; Hardware stack levels used:    1
  4538 ;; Hardware stack levels required when called:    4
  4539 ;; This function calls:
  4540 ;;		_isupper
  4541 ;; This function is called by:
  4542 ;;		_strtol
  4543 ;; This function uses a non-reentrant model
  4544 ;;
  4545                           
  4546                           	psect	text18
  4547  00360E                     __ptext18:
  4548                           	opt stack 0
  4549  00360E                     _isalpha:
  4550                           	opt stack 21
  4551                           
  4552                           ;incstack = 0
  4553                           ;isalpha@c stored from wreg
  4554  00360E  6E1D               	movwf	isalpha@c,c
  4555  003610  0E01               	movlw	1
  4556  003612  6E1C               	movwf	_isalpha$3023,c
  4557  003614  0E7B               	movlw	123
  4558  003616  601D               	cpfslt	isalpha@c,c
  4559  003618  D003               	goto	u6890
  4560  00361A  0E61               	movlw	97
  4561  00361C  601D               	cpfslt	isalpha@c,c
  4562  00361E  D007               	goto	l2140
  4563  003620                     u6890:
  4564  003620  501D               	movf	isalpha@c,w,c
  4565  003622  ECBC  F01B         	call	_isupper
  4566  003626  B0D8               	btfsc	status,0,c
  4567  003628  D002               	goto	l2140
  4568  00362A  0E00               	movlw	0
  4569  00362C  6E1C               	movwf	_isalpha$3023,c
  4570  00362E                     l2140:
  4571  00362E  C01C  F01B         	movff	_isalpha$3023,??_isalpha
  4572  003632  301B               	rrcf	??_isalpha,w,c
  4573  003634  0012               	return	
  4574  003636                     __end_of_isalpha:
  4575                           	opt stack 0
  4576                           tosu	equ	0xFFF
  4577                           tosh	equ	0xFFE
  4578                           tosl	equ	0xFFD
  4579                           pclath	equ	0xFFA
  4580                           tblptru	equ	0xFF8
  4581                           tblptrh	equ	0xFF7
  4582                           tblptrl	equ	0xFF6
  4583                           tablat	equ	0xFF5
  4584                           prodh	equ	0xFF4
  4585                           prodl	equ	0xFF3
  4586                           intcon	equ	0xFF2
  4587                           postinc0	equ	0xFEE
  4588                           plusw0	equ	0xFEB
  4589                           wreg	equ	0xFE8
  4590                           indf1	equ	0xFE7
  4591                           postdec1	equ	0xFE5
  4592                           fsr1h	equ	0xFE2
  4593                           fsr1l	equ	0xFE1
  4594                           indf2	equ	0xFDF
  4595                           postinc2	equ	0xFDE
  4596                           postdec2	equ	0xFDD
  4597                           plusw2	equ	0xFDB
  4598                           fsr2h	equ	0xFDA
  4599                           fsr2l	equ	0xFD9
  4600                           status	equ	0xFD8
  4601                           
  4602 ;; *************** function _isupper *****************
  4603 ;; Defined at:
  4604 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  4605 ;; Parameters:    Size  Location     Type
  4606 ;;  c               1    wreg     unsigned char 
  4607 ;; Auto vars:     Size  Location     Type
  4608 ;;  c               1   25[COMRAM] unsigned char 
  4609 ;; Return value:  Size  Location     Type
  4610 ;;		None               void
  4611 ;; Registers used:
  4612 ;;		wreg, status,2, status,0
  4613 ;; Tracked objects:
  4614 ;;		On entry : 0/0
  4615 ;;		On exit  : 0/0
  4616 ;;		Unchanged: 0/0
  4617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4618 ;;      Params:         0       0       0       0       0       0       0
  4619 ;;      Locals:         2       0       0       0       0       0       0
  4620 ;;      Temps:          1       0       0       0       0       0       0
  4621 ;;      Totals:         3       0       0       0       0       0       0
  4622 ;;Total ram usage:        3 bytes
  4623 ;; Hardware stack levels used:    1
  4624 ;; Hardware stack levels required when called:    3
  4625 ;; This function calls:
  4626 ;;		Nothing
  4627 ;; This function is called by:
  4628 ;;		_isalpha
  4629 ;; This function uses a non-reentrant model
  4630 ;;
  4631                           
  4632                           	psect	text19
  4633  003778                     __ptext19:
  4634                           	opt stack 0
  4635  003778                     _isupper:
  4636                           	opt stack 21
  4637                           
  4638                           ;incstack = 0
  4639                           ;isupper@c stored from wreg
  4640  003778  6E1A               	movwf	isupper@c,c
  4641  00377A  0E00               	movlw	0
  4642  00377C  6E19               	movwf	_isupper$3032,c
  4643  00377E  0E5B               	movlw	91
  4644  003780  601A               	cpfslt	isupper@c,c
  4645  003782  D005               	goto	l2155
  4646  003784  0E40               	movlw	64
  4647  003786  641A               	cpfsgt	isupper@c,c
  4648  003788  D002               	goto	l2155
  4649  00378A  0E01               	movlw	1
  4650  00378C  6E19               	movwf	_isupper$3032,c
  4651  00378E                     l2155:
  4652  00378E  C019  F018         	movff	_isupper$3032,??_isupper
  4653  003792  3018               	rrcf	??_isupper,w,c
  4654  003794  0012               	return	
  4655  003796                     __end_of_isupper:
  4656                           	opt stack 0
  4657                           tosu	equ	0xFFF
  4658                           tosh	equ	0xFFE
  4659                           tosl	equ	0xFFD
  4660                           pclath	equ	0xFFA
  4661                           tblptru	equ	0xFF8
  4662                           tblptrh	equ	0xFF7
  4663                           tblptrl	equ	0xFF6
  4664                           tablat	equ	0xFF5
  4665                           prodh	equ	0xFF4
  4666                           prodl	equ	0xFF3
  4667                           intcon	equ	0xFF2
  4668                           postinc0	equ	0xFEE
  4669                           plusw0	equ	0xFEB
  4670                           wreg	equ	0xFE8
  4671                           indf1	equ	0xFE7
  4672                           postdec1	equ	0xFE5
  4673                           fsr1h	equ	0xFE2
  4674                           fsr1l	equ	0xFE1
  4675                           indf2	equ	0xFDF
  4676                           postinc2	equ	0xFDE
  4677                           postdec2	equ	0xFDD
  4678                           plusw2	equ	0xFDB
  4679                           fsr2h	equ	0xFDA
  4680                           fsr2l	equ	0xFD9
  4681                           status	equ	0xFD8
  4682                           
  4683 ;; *************** function _UpdateRxFreq *****************
  4684 ;; Defined at:
  4685 ;;		line 84 in file "SyntApp.c"
  4686 ;; Parameters:    Size  Location     Type
  4687 ;;  data            2   43[COMRAM] PTR unsigned char 
  4688 ;; Auto vars:     Size  Location     Type
  4689 ;;		None
  4690 ;; Return value:  Size  Location     Type
  4691 ;;                  1    wreg      void 
  4692 ;; Registers used:
  4693 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4694 ;; Tracked objects:
  4695 ;;		On entry : 0/0
  4696 ;;		On exit  : 0/0
  4697 ;;		Unchanged: 0/0
  4698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4699 ;;      Params:         2       0       0       0       0       0       0
  4700 ;;      Locals:         0       0       0       0       0       0       0
  4701 ;;      Temps:          0       0       0       0       0       0       0
  4702 ;;      Totals:         2       0       0       0       0       0       0
  4703 ;;Total ram usage:        2 bytes
  4704 ;; Hardware stack levels used:    1
  4705 ;; Hardware stack levels required when called:    6
  4706 ;; This function calls:
  4707 ;;		_SendAckMessage
  4708 ;; This function is called by:
  4709 ;;		_GroupSynthesizers
  4710 ;; This function uses a non-reentrant model
  4711 ;;
  4712                           
  4713                           	psect	text20
  4714  0036CE                     __ptext20:
  4715                           	opt stack 0
  4716  0036CE                     _UpdateRxFreq:
  4717                           	opt stack 22
  4718                           
  4719                           ;SyntApp.c: 86: if(cntRegUpdate < 7)
  4720                           
  4721                           ;incstack = 0
  4722  0036CE  0E07               	movlw	7
  4723  0036D0  603A               	cpfslt	_cntRegUpdate,c
  4724  0036D2  D007               	goto	l504
  4725                           
  4726                           ;SyntApp.c: 87: {
  4727                           ;SyntApp.c: 91: cntRegUpdate ++;
  4728  0036D4  2A3A               	incf	_cntRegUpdate,f,c
  4729                           
  4730                           ;SyntApp.c: 93: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_RX_R
      +                          EG);
  4731  0036D6  0E49               	movlw	73
  4732  0036D8  6E24               	movwf	SendAckMessage@inRequest,c
  4733  0036DA  0E04               	movlw	4
  4734  0036DC  EC8F  F017         	call	_SendAckMessage
  4735                           
  4736                           ;SyntApp.c: 94: }
  4737  0036E0  0012               	return	
  4738  0036E2                     l504:
  4739                           
  4740                           ;SyntApp.c: 95: else
  4741                           ;SyntApp.c: 96: {
  4742                           ;SyntApp.c: 97: cntRegUpdate = 0;
  4743  0036E2  0E00               	movlw	0
  4744  0036E4  6E3A               	movwf	_cntRegUpdate,c
  4745                           
  4746                           ;SyntApp.c: 98: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_SET);
  4747  0036E6  0E43               	movlw	67
  4748  0036E8  6E24               	movwf	SendAckMessage@inRequest,c
  4749  0036EA  0E04               	movlw	4
  4750  0036EC  EC8F  F017         	call	_SendAckMessage
  4751  0036F0  0012               	return	
  4752  0036F2                     __end_of_UpdateRxFreq:
  4753                           	opt stack 0
  4754                           tosu	equ	0xFFF
  4755                           tosh	equ	0xFFE
  4756                           tosl	equ	0xFFD
  4757                           pclath	equ	0xFFA
  4758                           tblptru	equ	0xFF8
  4759                           tblptrh	equ	0xFF7
  4760                           tblptrl	equ	0xFF6
  4761                           tablat	equ	0xFF5
  4762                           prodh	equ	0xFF4
  4763                           prodl	equ	0xFF3
  4764                           intcon	equ	0xFF2
  4765                           postinc0	equ	0xFEE
  4766                           plusw0	equ	0xFEB
  4767                           wreg	equ	0xFE8
  4768                           indf1	equ	0xFE7
  4769                           postdec1	equ	0xFE5
  4770                           fsr1h	equ	0xFE2
  4771                           fsr1l	equ	0xFE1
  4772                           indf2	equ	0xFDF
  4773                           postinc2	equ	0xFDE
  4774                           postdec2	equ	0xFDD
  4775                           plusw2	equ	0xFDB
  4776                           fsr2h	equ	0xFDA
  4777                           fsr2l	equ	0xFD9
  4778                           status	equ	0xFD8
  4779                           
  4780 ;; *************** function _SynthReadData *****************
  4781 ;; Defined at:
  4782 ;;		line 138 in file "SyntApp.c"
  4783 ;; Parameters:    Size  Location     Type
  4784 ;;  data            2   35[COMRAM] PTR unsigned char 
  4785 ;; Auto vars:     Size  Location     Type
  4786 ;;  TxMsg          27    0[BANK0 ] unsigned char [27]
  4787 ;;  indx            1   27[BANK0 ] unsigned char 
  4788 ;; Return value:  Size  Location     Type
  4789 ;;                  1    wreg      void 
  4790 ;; Registers used:
  4791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4792 ;; Tracked objects:
  4793 ;;		On entry : 0/0
  4794 ;;		On exit  : 0/0
  4795 ;;		Unchanged: 0/0
  4796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4797 ;;      Params:         2       0       0       0       0       0       0
  4798 ;;      Locals:         0      28       0       0       0       0       0
  4799 ;;      Temps:          0       0       0       0       0       0       0
  4800 ;;      Totals:         2      28       0       0       0       0       0
  4801 ;;Total ram usage:       30 bytes
  4802 ;; Hardware stack levels used:    1
  4803 ;; Hardware stack levels required when called:    5
  4804 ;; This function calls:
  4805 ;;		_WriteUartMessage
  4806 ;;		_ZeroArray
  4807 ;;		_crc8
  4808 ;; This function is called by:
  4809 ;;		_GroupSynthesizers
  4810 ;; This function uses a non-reentrant model
  4811 ;;
  4812                           
  4813                           	psect	text21
  4814  002A0A                     __ptext21:
  4815                           	opt stack 0
  4816  002A0A                     _SynthReadData:
  4817                           	opt stack 23
  4818                           
  4819                           ;SyntApp.c: 141: char TxMsg[22 + (0x4) + 1];
  4820                           ;SyntApp.c: 142: ZeroArray(TxMsg, 22 + (0x4) + 1);
  4821                           
  4822                           ;incstack = 0
  4823  002A0A  0E60               	movlw	low SynthReadData@TxMsg
  4824  002A0C  6E20               	movwf	ZeroArray@array,c
  4825  002A0E  0E00               	movlw	high SynthReadData@TxMsg
  4826  002A10  6E21               	movwf	ZeroArray@array+1,c
  4827  002A12  0E00               	movlw	0
  4828  002A14  6E23               	movwf	ZeroArray@size+1,c
  4829  002A16  0E1B               	movlw	27
  4830  002A18  6E22               	movwf	ZeroArray@size,c
  4831  002A1A  ECCB  F01B         	call	_ZeroArray	;wreg free
  4832                           
  4833                           ;SyntApp.c: 145: TxMsg[(0)] = (0x24);
  4834  002A1E  0E24               	movlw	36
  4835  002A20  0100               	movlb	0	; () banked
  4836  002A22  6F60               	movwf	SynthReadData@TxMsg& (0+255),b
  4837                           
  4838                           ; BSR set to: 0
  4839                           ;SyntApp.c: 146: TxMsg[(1)] = SYNTH_MSG;
  4840  002A24  0E04               	movlw	4
  4841  002A26  6F61               	movwf	(SynthReadData@TxMsg+1)& (0+255),b
  4842                           
  4843                           ; BSR set to: 0
  4844                           ;SyntApp.c: 147: TxMsg[(3)] = 22;
  4845  002A28  0E16               	movlw	22
  4846  002A2A  6F63               	movwf	(SynthReadData@TxMsg+3)& (0+255),b
  4847                           
  4848                           ; BSR set to: 0
  4849                           ;SyntApp.c: 149: uint8_t indx = data[0];
  4850  002A2C  C024  FFD9         	movff	SynthReadData@data,fsr2l
  4851  002A30  C025  FFDA         	movff	SynthReadData@data+1,fsr2h
  4852  002A34  50DF               	movf	indf2,w,c
  4853  002A36  6F7B               	movwf	SynthReadData@indx& (0+255),b
  4854                           
  4855                           ; BSR set to: 0
  4856                           ;SyntApp.c: 150: if(indx == 0x0)
  4857  002A38  517B               	movf	SynthReadData@indx& (0+255),w,b
  4858  002A3A  A4D8               	btfss	status,2,c
  4859  002A3C  D002               	goto	l519
  4860                           
  4861                           ; BSR set to: 0
  4862                           ;SyntApp.c: 151: {
  4863                           ;SyntApp.c: 152: TxMsg[(2)] = SYNTH_UP_READ_DATA;
  4864  002A3E  0E46               	movlw	70
  4865  002A40  D001               	goto	L1
  4866  002A42                     l519:
  4867                           
  4868                           ; BSR set to: 0
  4869                           ;SyntApp.c: 155: else
  4870                           ;SyntApp.c: 156: {
  4871                           ;SyntApp.c: 157: TxMsg[(2)] = SYNTH_DOWN_READ_DATA;
  4872                           
  4873                           ; BSR set to: 0
  4874  002A42  0E47               	movlw	71
  4875  002A44                     L1:
  4876  002A44  6F62               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  4877                           
  4878                           ; BSR set to: 0
  4879                           ;SyntApp.c: 159: }
  4880                           ;SyntApp.c: 161: TxMsg[22 + (0x4)] = crc8(TxMsg, 22 + (0x4));
  4881                           
  4882                           ; BSR set to: 0
  4883  002A46  0E60               	movlw	low SynthReadData@TxMsg
  4884  002A48  6E18               	movwf	crc8@dataArray,c
  4885  002A4A  0E00               	movlw	high SynthReadData@TxMsg
  4886  002A4C  6E19               	movwf	crc8@dataArray+1,c
  4887  002A4E  0E00               	movlw	0
  4888  002A50  6E1B               	movwf	crc8@dataSize+1,c
  4889  002A52  0E1A               	movlw	26
  4890  002A54  6E1A               	movwf	crc8@dataSize,c
  4891  002A56  ECB8  F017         	call	_crc8	;wreg free
  4892  002A5A  0100               	movlb	0	; () banked
  4893  002A5C  6F7A               	movwf	(SynthReadData@TxMsg+26)& (0+255),b
  4894                           
  4895                           ; BSR set to: 0
  4896                           ;SyntApp.c: 162: WriteUartMessage(TxMsg, 22 + (0x4) + 1);
  4897  002A5E  0E60               	movlw	low SynthReadData@TxMsg
  4898  002A60  6E19               	movwf	WriteUartMessage@dataBuf,c
  4899  002A62  0E00               	movlw	high SynthReadData@TxMsg
  4900  002A64  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4901  002A66  0E00               	movlw	0
  4902  002A68  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4903  002A6A  0E1B               	movlw	27
  4904  002A6C  6E1B               	movwf	WriteUartMessage@dataSize,c
  4905  002A6E  ECFF  F019         	call	_WriteUartMessage	;wreg free
  4906  002A72  0012               	return		;funcret
  4907  002A74                     __end_of_SynthReadData:
  4908                           	opt stack 0
  4909                           tosu	equ	0xFFF
  4910                           tosh	equ	0xFFE
  4911                           tosl	equ	0xFFD
  4912                           pclath	equ	0xFFA
  4913                           tblptru	equ	0xFF8
  4914                           tblptrh	equ	0xFF7
  4915                           tblptrl	equ	0xFF6
  4916                           tablat	equ	0xFF5
  4917                           prodh	equ	0xFF4
  4918                           prodl	equ	0xFF3
  4919                           intcon	equ	0xFF2
  4920                           postinc0	equ	0xFEE
  4921                           plusw0	equ	0xFEB
  4922                           wreg	equ	0xFE8
  4923                           indf1	equ	0xFE7
  4924                           postdec1	equ	0xFE5
  4925                           fsr1h	equ	0xFE2
  4926                           fsr1l	equ	0xFE1
  4927                           indf2	equ	0xFDF
  4928                           postinc2	equ	0xFDE
  4929                           postdec2	equ	0xFDD
  4930                           plusw2	equ	0xFDB
  4931                           fsr2h	equ	0xFDA
  4932                           fsr2l	equ	0xFD9
  4933                           status	equ	0xFD8
  4934                           
  4935 ;; *************** function _SetSynthTxOper *****************
  4936 ;; Defined at:
  4937 ;;		line 110 in file "SyntApp.c"
  4938 ;; Parameters:    Size  Location     Type
  4939 ;;		None
  4940 ;; Auto vars:     Size  Location     Type
  4941 ;;		None
  4942 ;; Return value:  Size  Location     Type
  4943 ;;                  1    wreg      void 
  4944 ;; Registers used:
  4945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4946 ;; Tracked objects:
  4947 ;;		On entry : 0/0
  4948 ;;		On exit  : 0/0
  4949 ;;		Unchanged: 0/0
  4950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4951 ;;      Params:         0       0       0       0       0       0       0
  4952 ;;      Locals:         0       0       0       0       0       0       0
  4953 ;;      Temps:          0       0       0       0       0       0       0
  4954 ;;      Totals:         0       0       0       0       0       0       0
  4955 ;;Total ram usage:        0 bytes
  4956 ;; Hardware stack levels used:    1
  4957 ;; Hardware stack levels required when called:    8
  4958 ;; This function calls:
  4959 ;;		_InitTxSynth
  4960 ;;		_SendAckMessage
  4961 ;;		_SwSpi_Set_CE_Pin
  4962 ;; This function is called by:
  4963 ;;		_GroupSynthesizers
  4964 ;; This function uses a non-reentrant model
  4965 ;;
  4966                           
  4967                           	psect	text22
  4968  0034CC                     __ptext22:
  4969                           	opt stack 0
  4970  0034CC                     _SetSynthTxOper:
  4971                           	opt stack 20
  4972                           
  4973                           ;SyntApp.c: 112: SynthTxOper = !SynthTxOper;
  4974                           
  4975                           ;incstack = 0
  4976  0034CC  5045               	movf	_SynthTxOper,w,c
  4977  0034CE  A4D8               	btfss	status,2,c
  4978  0034D0  D002               	goto	u8050
  4979  0034D2  0E01               	movlw	1
  4980  0034D4  D001               	goto	u8060
  4981  0034D6                     u8050:
  4982  0034D6  0E00               	movlw	0
  4983  0034D8                     u8060:
  4984  0034D8  6E45               	movwf	_SynthTxOper,c
  4985                           
  4986                           ;SyntApp.c: 113: if(SynthTxOper)
  4987  0034DA  5045               	movf	_SynthTxOper,w,c
  4988  0034DC  B4D8               	btfsc	status,2,c
  4989  0034DE  D003               	goto	l509
  4990                           
  4991                           ;SyntApp.c: 114: {
  4992                           ;SyntApp.c: 115: InitTxSynth();
  4993  0034E0  ECDF  F017         	call	_InitTxSynth	;wreg free
  4994                           
  4995                           ;SyntApp.c: 116: }
  4996  0034E4  D005               	goto	l510
  4997  0034E6                     l509:
  4998                           
  4999                           ;SyntApp.c: 117: else
  5000                           ;SyntApp.c: 118: {
  5001                           ;SyntApp.c: 119: SwSpi_Set_CE_Pin(SYNTH_TX, 0);
  5002  0034E6  0E00               	movlw	0
  5003  0034E8  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  5004  0034EA  0E00               	movlw	0
  5005  0034EC  EC39  F019         	call	_SwSpi_Set_CE_Pin
  5006  0034F0                     l510:
  5007                           
  5008                           ;SyntApp.c: 120: }
  5009                           ;SyntApp.c: 121: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_OPER);
  5010  0034F0  0E45               	movlw	69
  5011  0034F2  6E24               	movwf	SendAckMessage@inRequest,c
  5012  0034F4  0E04               	movlw	4
  5013  0034F6  EC8F  F017         	call	_SendAckMessage
  5014  0034FA  0012               	return		;funcret
  5015  0034FC                     __end_of_SetSynthTxOper:
  5016                           	opt stack 0
  5017                           tosu	equ	0xFFF
  5018                           tosh	equ	0xFFE
  5019                           tosl	equ	0xFFD
  5020                           pclath	equ	0xFFA
  5021                           tblptru	equ	0xFF8
  5022                           tblptrh	equ	0xFF7
  5023                           tblptrl	equ	0xFF6
  5024                           tablat	equ	0xFF5
  5025                           prodh	equ	0xFF4
  5026                           prodl	equ	0xFF3
  5027                           intcon	equ	0xFF2
  5028                           postinc0	equ	0xFEE
  5029                           plusw0	equ	0xFEB
  5030                           wreg	equ	0xFE8
  5031                           indf1	equ	0xFE7
  5032                           postdec1	equ	0xFE5
  5033                           fsr1h	equ	0xFE2
  5034                           fsr1l	equ	0xFE1
  5035                           indf2	equ	0xFDF
  5036                           postinc2	equ	0xFDE
  5037                           postdec2	equ	0xFDD
  5038                           plusw2	equ	0xFDB
  5039                           fsr2h	equ	0xFDA
  5040                           fsr2l	equ	0xFD9
  5041                           status	equ	0xFD8
  5042                           
  5043 ;; *************** function _SetSynthRxOper *****************
  5044 ;; Defined at:
  5045 ;;		line 124 in file "SyntApp.c"
  5046 ;; Parameters:    Size  Location     Type
  5047 ;;		None
  5048 ;; Auto vars:     Size  Location     Type
  5049 ;;		None
  5050 ;; Return value:  Size  Location     Type
  5051 ;;                  1    wreg      void 
  5052 ;; Registers used:
  5053 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5054 ;; Tracked objects:
  5055 ;;		On entry : 0/0
  5056 ;;		On exit  : 0/0
  5057 ;;		Unchanged: 0/0
  5058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5059 ;;      Params:         0       0       0       0       0       0       0
  5060 ;;      Locals:         0       0       0       0       0       0       0
  5061 ;;      Temps:          0       0       0       0       0       0       0
  5062 ;;      Totals:         0       0       0       0       0       0       0
  5063 ;;Total ram usage:        0 bytes
  5064 ;; Hardware stack levels used:    1
  5065 ;; Hardware stack levels required when called:    8
  5066 ;; This function calls:
  5067 ;;		_InitRxSynth
  5068 ;;		_SendAckMessage
  5069 ;;		_SwSpi_Set_CE_Pin
  5070 ;; This function is called by:
  5071 ;;		_GroupSynthesizers
  5072 ;; This function uses a non-reentrant model
  5073 ;;
  5074                           
  5075                           	psect	text23
  5076  0034FC                     __ptext23:
  5077                           	opt stack 0
  5078  0034FC                     _SetSynthRxOper:
  5079                           	opt stack 20
  5080                           
  5081                           ;SyntApp.c: 126: SynthRxOper = !SynthRxOper;
  5082                           
  5083                           ;incstack = 0
  5084  0034FC  5044               	movf	_SynthRxOper,w,c
  5085  0034FE  A4D8               	btfss	status,2,c
  5086  003500  D002               	goto	u8080
  5087  003502  0E01               	movlw	1
  5088  003504  D001               	goto	u8090
  5089  003506                     u8080:
  5090  003506  0E00               	movlw	0
  5091  003508                     u8090:
  5092  003508  6E44               	movwf	_SynthRxOper,c
  5093                           
  5094                           ;SyntApp.c: 127: if(SynthRxOper)
  5095  00350A  5044               	movf	_SynthRxOper,w,c
  5096  00350C  B4D8               	btfsc	status,2,c
  5097  00350E  D003               	goto	l514
  5098                           
  5099                           ;SyntApp.c: 128: {
  5100                           ;SyntApp.c: 129: InitRxSynth();
  5101  003510  EC05  F018         	call	_InitRxSynth	;wreg free
  5102                           
  5103                           ;SyntApp.c: 130: }
  5104  003514  D005               	goto	l515
  5105  003516                     l514:
  5106                           
  5107                           ;SyntApp.c: 131: else
  5108                           ;SyntApp.c: 132: {
  5109                           ;SyntApp.c: 133: SwSpi_Set_CE_Pin(SYNTH_RX, 0);
  5110  003516  0E00               	movlw	0
  5111  003518  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  5112  00351A  0E01               	movlw	1
  5113  00351C  EC39  F019         	call	_SwSpi_Set_CE_Pin
  5114  003520                     l515:
  5115                           
  5116                           ;SyntApp.c: 134: }
  5117                           ;SyntApp.c: 135: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_OPER);
  5118  003520  0E44               	movlw	68
  5119  003522  6E24               	movwf	SendAckMessage@inRequest,c
  5120  003524  0E04               	movlw	4
  5121  003526  EC8F  F017         	call	_SendAckMessage
  5122  00352A  0012               	return		;funcret
  5123  00352C                     __end_of_SetSynthRxOper:
  5124                           	opt stack 0
  5125                           tosu	equ	0xFFF
  5126                           tosh	equ	0xFFE
  5127                           tosl	equ	0xFFD
  5128                           pclath	equ	0xFFA
  5129                           tblptru	equ	0xFF8
  5130                           tblptrh	equ	0xFF7
  5131                           tblptrl	equ	0xFF6
  5132                           tablat	equ	0xFF5
  5133                           prodh	equ	0xFF4
  5134                           prodl	equ	0xFF3
  5135                           intcon	equ	0xFF2
  5136                           postinc0	equ	0xFEE
  5137                           plusw0	equ	0xFEB
  5138                           wreg	equ	0xFE8
  5139                           indf1	equ	0xFE7
  5140                           postdec1	equ	0xFE5
  5141                           fsr1h	equ	0xFE2
  5142                           fsr1l	equ	0xFE1
  5143                           indf2	equ	0xFDF
  5144                           postinc2	equ	0xFDE
  5145                           postdec2	equ	0xFDD
  5146                           plusw2	equ	0xFDB
  5147                           fsr2h	equ	0xFDA
  5148                           fsr2l	equ	0xFD9
  5149                           status	equ	0xFD8
  5150                           
  5151 ;; *************** function _PLLUartInitialize *****************
  5152 ;; Defined at:
  5153 ;;		line 29 in file "SyntApp.c"
  5154 ;; Parameters:    Size  Location     Type
  5155 ;;  data            2   23[COMRAM] PTR unsigned char 
  5156 ;; Auto vars:     Size  Location     Type
  5157 ;;		None
  5158 ;; Return value:  Size  Location     Type
  5159 ;;                  1    wreg      void 
  5160 ;; Registers used:
  5161 ;;		None
  5162 ;; Tracked objects:
  5163 ;;		On entry : 0/0
  5164 ;;		On exit  : 0/0
  5165 ;;		Unchanged: 0/0
  5166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5167 ;;      Params:         2       0       0       0       0       0       0
  5168 ;;      Locals:         0       0       0       0       0       0       0
  5169 ;;      Temps:          0       0       0       0       0       0       0
  5170 ;;      Totals:         2       0       0       0       0       0       0
  5171 ;;Total ram usage:        2 bytes
  5172 ;; Hardware stack levels used:    1
  5173 ;; Hardware stack levels required when called:    3
  5174 ;; This function calls:
  5175 ;;		Nothing
  5176 ;; This function is called by:
  5177 ;;		_GroupSynthesizers
  5178 ;; This function uses a non-reentrant model
  5179 ;;
  5180                           
  5181                           	psect	text24
  5182  003970                     __ptext24:
  5183                           	opt stack 0
  5184  003970                     _PLLUartInitialize:
  5185                           	opt stack 25
  5186                           
  5187                           ;incstack = 0
  5188  003970  0012               	return		;funcret
  5189  003972                     __end_of_PLLUartInitialize:
  5190                           	opt stack 0
  5191                           tosu	equ	0xFFF
  5192                           tosh	equ	0xFFE
  5193                           tosl	equ	0xFFD
  5194                           pclath	equ	0xFFA
  5195                           tblptru	equ	0xFF8
  5196                           tblptrh	equ	0xFF7
  5197                           tblptrl	equ	0xFF6
  5198                           tablat	equ	0xFF5
  5199                           prodh	equ	0xFF4
  5200                           prodl	equ	0xFF3
  5201                           intcon	equ	0xFF2
  5202                           postinc0	equ	0xFEE
  5203                           plusw0	equ	0xFEB
  5204                           wreg	equ	0xFE8
  5205                           indf1	equ	0xFE7
  5206                           postdec1	equ	0xFE5
  5207                           fsr1h	equ	0xFE2
  5208                           fsr1l	equ	0xFE1
  5209                           indf2	equ	0xFDF
  5210                           postinc2	equ	0xFDE
  5211                           postdec2	equ	0xFDD
  5212                           plusw2	equ	0xFDB
  5213                           fsr2h	equ	0xFDA
  5214                           fsr2l	equ	0xFD9
  5215                           status	equ	0xFD8
  5216                           
  5217 ;; *************** function _GetMcuRunTime *****************
  5218 ;; Defined at:
  5219 ;;		line 54 in file "SystemStatus.c"
  5220 ;; Parameters:    Size  Location     Type
  5221 ;;		None
  5222 ;; Auto vars:     Size  Location     Type
  5223 ;;  idx             2   13[BANK0 ] int 
  5224 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  5225 ;;  tempRunTime     4    9[BANK0 ] unsigned long 
  5226 ;; Return value:  Size  Location     Type
  5227 ;;                  1    wreg      void 
  5228 ;; Registers used:
  5229 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5230 ;; Tracked objects:
  5231 ;;		On entry : 0/0
  5232 ;;		On exit  : 0/0
  5233 ;;		Unchanged: 0/0
  5234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5235 ;;      Params:         0       0       0       0       0       0       0
  5236 ;;      Locals:         0      15       0       0       0       0       0
  5237 ;;      Temps:          2       0       0       0       0       0       0
  5238 ;;      Totals:         2      15       0       0       0       0       0
  5239 ;;Total ram usage:       17 bytes
  5240 ;; Hardware stack levels used:    1
  5241 ;; Hardware stack levels required when called:    5
  5242 ;; This function calls:
  5243 ;;		_WriteUartMessage
  5244 ;;		___lldiv
  5245 ;;		___llmod
  5246 ;;		_crc8
  5247 ;; This function is called by:
  5248 ;;		_GroupStatusAndVersion
  5249 ;; This function uses a non-reentrant model
  5250 ;;
  5251                           
  5252                           	psect	text25
  5253  001DC0                     __ptext25:
  5254                           	opt stack 0
  5255  001DC0                     _GetMcuRunTime:
  5256                           	opt stack 23
  5257                           
  5258                           ;SystemStatus.c: 57: char TxMsg[(0x4) + (0x4) + 1];
  5259                           ;SystemStatus.c: 60: TxMsg[(0)] = (0x24);
  5260                           
  5261                           ;incstack = 0
  5262  001DC0  0E24               	movlw	36
  5263  001DC2  0100               	movlb	0	; () banked
  5264  001DC4  6F60               	movwf	GetMcuRunTime@TxMsg& (0+255),b
  5265                           
  5266                           ;SystemStatus.c: 61: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  5267  001DC6  0E02               	movlw	2
  5268  001DC8  6F61               	movwf	(GetMcuRunTime@TxMsg+1)& (0+255),b
  5269                           
  5270                           ;SystemStatus.c: 62: TxMsg[(2)] = STATUS_MCU_RUN_TIME;
  5271  001DCA  0E21               	movlw	33
  5272  001DCC  6F62               	movwf	(GetMcuRunTime@TxMsg+2)& (0+255),b
  5273                           
  5274                           ;SystemStatus.c: 63: TxMsg[(3)] = (0x4);
  5275  001DCE  0E04               	movlw	4
  5276  001DD0  6F63               	movwf	(GetMcuRunTime@TxMsg+3)& (0+255),b
  5277                           
  5278                           ; BSR set to: 0
  5279                           ;SystemStatus.c: 65: uint32_t tempRunTime = mcuRunTimeIn5SecTicks;
  5280  001DD2  C0C0  F069         	movff	_mcuRunTimeIn5SecTicks,GetMcuRunTime@tempRunTime
  5281  001DD6  C0C1  F06A         	movff	_mcuRunTimeIn5SecTicks+1,GetMcuRunTime@tempRunTime+1
  5282  001DDA  C0C2  F06B         	movff	_mcuRunTimeIn5SecTicks+2,GetMcuRunTime@tempRunTime+2
  5283  001DDE  C0C3  F06C         	movff	_mcuRunTimeIn5SecTicks+3,GetMcuRunTime@tempRunTime+3
  5284                           
  5285                           ;SystemStatus.c: 68: for(int idx = 0; idx < (0x4); idx++)
  5286  001DE2  0E00               	movlw	0
  5287  001DE4  6F6E               	movwf	(GetMcuRunTime@idx+1)& (0+255),b
  5288  001DE6  0E00               	movlw	0
  5289  001DE8  6F6D               	movwf	GetMcuRunTime@idx& (0+255),b
  5290  001DEA                     l7932:
  5291                           
  5292                           ; BSR set to: 0
  5293  001DEA  BF6E               	btfsc	(GetMcuRunTime@idx+1)& (0+255),7,b
  5294  001DEC  D006               	goto	l1390
  5295  001DEE  516E               	movf	(GetMcuRunTime@idx+1)& (0+255),w,b
  5296  001DF0  E142               	bnz	l7944
  5297  001DF2  0E04               	movlw	4
  5298  001DF4  5D6D               	subwf	GetMcuRunTime@idx& (0+255),w,b
  5299  001DF6  B0D8               	btfsc	status,0,c
  5300  001DF8  D03E               	goto	u8130
  5301  001DFA                     l1390:
  5302                           
  5303                           ; BSR set to: 0
  5304                           ;SystemStatus.c: 69: {
  5305                           ;SystemStatus.c: 70: TxMsg[(0x4) + idx] = tempRunTime % 10;
  5306                           
  5307                           ; BSR set to: 0
  5308  001DFA  0E04               	movlw	4
  5309  001DFC  256D               	addwf	GetMcuRunTime@idx& (0+255),w,b
  5310  001DFE  6E25               	movwf	??_GetMcuRunTime& (0+255),c
  5311  001E00  0E00               	movlw	0
  5312  001E02  216E               	addwfc	(GetMcuRunTime@idx+1)& (0+255),w,b
  5313  001E04  6E26               	movwf	(??_GetMcuRunTime+1)& (0+255),c
  5314  001E06  0E60               	movlw	low GetMcuRunTime@TxMsg
  5315  001E08  2425               	addwf	??_GetMcuRunTime,w,c
  5316  001E0A  6ED9               	movwf	fsr2l,c
  5317  001E0C  0E00               	movlw	high GetMcuRunTime@TxMsg
  5318  001E0E  2026               	addwfc	??_GetMcuRunTime+1,w,c
  5319  001E10  6EDA               	movwf	fsr2h,c
  5320  001E12  C069  F018         	movff	GetMcuRunTime@tempRunTime,___llmod@dividend
  5321  001E16  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___llmod@dividend+1
  5322  001E1A  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___llmod@dividend+2
  5323  001E1E  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___llmod@dividend+3
  5324  001E22  0E0A               	movlw	10
  5325  001E24  6E1C               	movwf	___llmod@divisor,c
  5326  001E26  0E00               	movlw	0
  5327  001E28  6E1D               	movwf	___llmod@divisor+1,c
  5328  001E2A  0E00               	movlw	0
  5329  001E2C  6E1E               	movwf	___llmod@divisor+2,c
  5330  001E2E  0E00               	movlw	0
  5331  001E30  6E1F               	movwf	___llmod@divisor+3,c
  5332  001E32  EC6F  F015         	call	___llmod	;wreg free
  5333  001E36  5018               	movf	?___llmod,w,c
  5334  001E38  6EDF               	movwf	indf2,c
  5335                           
  5336                           ;SystemStatus.c: 71: tempRunTime /= 10;
  5337  001E3A  C069  F018         	movff	GetMcuRunTime@tempRunTime,___lldiv@dividend
  5338  001E3E  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___lldiv@dividend+1
  5339  001E42  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___lldiv@dividend+2
  5340  001E46  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___lldiv@dividend+3
  5341  001E4A  0E0A               	movlw	10
  5342  001E4C  6E1C               	movwf	___lldiv@divisor,c
  5343  001E4E  0E00               	movlw	0
  5344  001E50  6E1D               	movwf	___lldiv@divisor+1,c
  5345  001E52  0E00               	movlw	0
  5346  001E54  6E1E               	movwf	___lldiv@divisor+2,c
  5347  001E56  0E00               	movlw	0
  5348  001E58  6E1F               	movwf	___lldiv@divisor+3,c
  5349  001E5A  EC4E  F014         	call	___lldiv	;wreg free
  5350  001E5E  C018  F069         	movff	?___lldiv,GetMcuRunTime@tempRunTime
  5351  001E62  C019  F06A         	movff	?___lldiv+1,GetMcuRunTime@tempRunTime+1
  5352  001E66  C01A  F06B         	movff	?___lldiv+2,GetMcuRunTime@tempRunTime+2
  5353  001E6A  C01B  F06C         	movff	?___lldiv+3,GetMcuRunTime@tempRunTime+3
  5354  001E6E  0100               	movlb	0	; () banked
  5355  001E70  4B6D               	infsnz	GetMcuRunTime@idx& (0+255),f,b
  5356  001E72  2B6E               	incf	(GetMcuRunTime@idx+1)& (0+255),f,b
  5357  001E74  D7BA               	goto	l7932
  5358  001E76                     u8130:
  5359  001E76                     l7944:
  5360                           
  5361                           ; BSR set to: 0
  5362                           ;SystemStatus.c: 72: }
  5363                           ;SystemStatus.c: 74: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  5364  001E76  0E60               	movlw	low GetMcuRunTime@TxMsg
  5365  001E78  6E18               	movwf	crc8@dataArray,c
  5366  001E7A  0E00               	movlw	high GetMcuRunTime@TxMsg
  5367  001E7C  6E19               	movwf	crc8@dataArray+1,c
  5368  001E7E  0E00               	movlw	0
  5369  001E80  6E1B               	movwf	crc8@dataSize+1,c
  5370  001E82  0E08               	movlw	8
  5371  001E84  6E1A               	movwf	crc8@dataSize,c
  5372  001E86  ECB8  F017         	call	_crc8	;wreg free
  5373  001E8A  0100               	movlb	0	; () banked
  5374  001E8C  6F68               	movwf	(GetMcuRunTime@TxMsg+8)& (0+255),b
  5375                           
  5376                           ; BSR set to: 0
  5377                           ;SystemStatus.c: 76: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  5378  001E8E  0E60               	movlw	low GetMcuRunTime@TxMsg
  5379  001E90  6E19               	movwf	WriteUartMessage@dataBuf,c
  5380  001E92  0E00               	movlw	high GetMcuRunTime@TxMsg
  5381  001E94  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5382  001E96  0E00               	movlw	0
  5383  001E98  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5384  001E9A  0E09               	movlw	9
  5385  001E9C  6E1B               	movwf	WriteUartMessage@dataSize,c
  5386  001E9E  ECFF  F019         	call	_WriteUartMessage	;wreg free
  5387  001EA2  0012               	return		;funcret
  5388  001EA4                     __end_of_GetMcuRunTime:
  5389                           	opt stack 0
  5390                           tosu	equ	0xFFF
  5391                           tosh	equ	0xFFE
  5392                           tosl	equ	0xFFD
  5393                           pclath	equ	0xFFA
  5394                           tblptru	equ	0xFF8
  5395                           tblptrh	equ	0xFF7
  5396                           tblptrl	equ	0xFF6
  5397                           tablat	equ	0xFF5
  5398                           prodh	equ	0xFF4
  5399                           prodl	equ	0xFF3
  5400                           intcon	equ	0xFF2
  5401                           postinc0	equ	0xFEE
  5402                           plusw0	equ	0xFEB
  5403                           wreg	equ	0xFE8
  5404                           indf1	equ	0xFE7
  5405                           postdec1	equ	0xFE5
  5406                           fsr1h	equ	0xFE2
  5407                           fsr1l	equ	0xFE1
  5408                           indf2	equ	0xFDF
  5409                           postinc2	equ	0xFDE
  5410                           postdec2	equ	0xFDD
  5411                           plusw2	equ	0xFDB
  5412                           fsr2h	equ	0xFDA
  5413                           fsr2l	equ	0xFD9
  5414                           status	equ	0xFD8
  5415                           
  5416 ;; *************** function ___lldiv *****************
  5417 ;; Defined at:
  5418 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  5419 ;; Parameters:    Size  Location     Type
  5420 ;;  dividend        4   23[COMRAM] unsigned long 
  5421 ;;  divisor         4   27[COMRAM] unsigned long 
  5422 ;; Auto vars:     Size  Location     Type
  5423 ;;  quotient        4   31[COMRAM] unsigned long 
  5424 ;;  counter         1   35[COMRAM] unsigned char 
  5425 ;; Return value:  Size  Location     Type
  5426 ;;                  4   23[COMRAM] unsigned long 
  5427 ;; Registers used:
  5428 ;;		wreg, status,2, status,0
  5429 ;; Tracked objects:
  5430 ;;		On entry : 0/0
  5431 ;;		On exit  : 0/0
  5432 ;;		Unchanged: 0/0
  5433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5434 ;;      Params:         8       0       0       0       0       0       0
  5435 ;;      Locals:         5       0       0       0       0       0       0
  5436 ;;      Temps:          0       0       0       0       0       0       0
  5437 ;;      Totals:        13       0       0       0       0       0       0
  5438 ;;Total ram usage:       13 bytes
  5439 ;; Hardware stack levels used:    1
  5440 ;; Hardware stack levels required when called:    3
  5441 ;; This function calls:
  5442 ;;		Nothing
  5443 ;; This function is called by:
  5444 ;;		_GetMcuRunTime
  5445 ;; This function uses a non-reentrant model
  5446 ;;
  5447                           
  5448                           	psect	text26
  5449  00289C                     __ptext26:
  5450                           	opt stack 0
  5451  00289C                     ___lldiv:
  5452                           	opt stack 24
  5453                           
  5454                           ;incstack = 0
  5455  00289C  0E00               	movlw	0
  5456  00289E  6E20               	movwf	___lldiv@quotient,c
  5457  0028A0  0E00               	movlw	0
  5458  0028A2  6E21               	movwf	___lldiv@quotient+1,c
  5459  0028A4  0E00               	movlw	0
  5460  0028A6  6E22               	movwf	___lldiv@quotient+2,c
  5461  0028A8  0E00               	movlw	0
  5462  0028AA  6E23               	movwf	___lldiv@quotient+3,c
  5463  0028AC  501C               	movf	___lldiv@divisor,w,c
  5464  0028AE  101D               	iorwf	___lldiv@divisor+1,w,c
  5465  0028B0  101E               	iorwf	___lldiv@divisor+2,w,c
  5466  0028B2  101F               	iorwf	___lldiv@divisor+3,w,c
  5467  0028B4  B4D8               	btfsc	status,2,c
  5468  0028B6  D02A               	goto	l1821
  5469  0028B8  0E01               	movlw	1
  5470  0028BA  6E24               	movwf	___lldiv@counter,c
  5471  0028BC  D006               	goto	l1816
  5472  0028BE  90D8               	bcf	status,0,c
  5473  0028C0  361C               	rlcf	___lldiv@divisor,f,c
  5474  0028C2  361D               	rlcf	___lldiv@divisor+1,f,c
  5475  0028C4  361E               	rlcf	___lldiv@divisor+2,f,c
  5476  0028C6  361F               	rlcf	___lldiv@divisor+3,f,c
  5477  0028C8  2A24               	incf	___lldiv@counter,f,c
  5478  0028CA                     l1816:
  5479  0028CA  AE1F               	btfss	___lldiv@divisor+3,7,c
  5480  0028CC  D7F8               	goto	l1817
  5481  0028CE                     u7650:
  5482  0028CE  90D8               	bcf	status,0,c
  5483  0028D0  3620               	rlcf	___lldiv@quotient,f,c
  5484  0028D2  3621               	rlcf	___lldiv@quotient+1,f,c
  5485  0028D4  3622               	rlcf	___lldiv@quotient+2,f,c
  5486  0028D6  3623               	rlcf	___lldiv@quotient+3,f,c
  5487  0028D8  501C               	movf	___lldiv@divisor,w,c
  5488  0028DA  5C18               	subwf	___lldiv@dividend,w,c
  5489  0028DC  501D               	movf	___lldiv@divisor+1,w,c
  5490  0028DE  5819               	subwfb	___lldiv@dividend+1,w,c
  5491  0028E0  501E               	movf	___lldiv@divisor+2,w,c
  5492  0028E2  581A               	subwfb	___lldiv@dividend+2,w,c
  5493  0028E4  501F               	movf	___lldiv@divisor+3,w,c
  5494  0028E6  581B               	subwfb	___lldiv@dividend+3,w,c
  5495  0028E8  A0D8               	btfss	status,0,c
  5496  0028EA  D009               	goto	l1820
  5497  0028EC  501C               	movf	___lldiv@divisor,w,c
  5498  0028EE  5E18               	subwf	___lldiv@dividend,f,c
  5499  0028F0  501D               	movf	___lldiv@divisor+1,w,c
  5500  0028F2  5A19               	subwfb	___lldiv@dividend+1,f,c
  5501  0028F4  501E               	movf	___lldiv@divisor+2,w,c
  5502  0028F6  5A1A               	subwfb	___lldiv@dividend+2,f,c
  5503  0028F8  501F               	movf	___lldiv@divisor+3,w,c
  5504  0028FA  5A1B               	subwfb	___lldiv@dividend+3,f,c
  5505  0028FC  8020               	bsf	___lldiv@quotient,0,c
  5506  0028FE                     l1820:
  5507  0028FE  90D8               	bcf	status,0,c
  5508  002900  321F               	rrcf	___lldiv@divisor+3,f,c
  5509  002902  321E               	rrcf	___lldiv@divisor+2,f,c
  5510  002904  321D               	rrcf	___lldiv@divisor+1,f,c
  5511  002906  321C               	rrcf	___lldiv@divisor,f,c
  5512  002908  2E24               	decfsz	___lldiv@counter,f,c
  5513  00290A  D7E1               	goto	u7650
  5514  00290C                     l1821:
  5515  00290C  C020  F018         	movff	___lldiv@quotient,?___lldiv
  5516  002910  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  5517  002914  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  5518  002918  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  5519  00291C  0012               	return		;funcret
  5520  00291E                     __end_of___lldiv:
  5521                           	opt stack 0
  5522                           tosu	equ	0xFFF
  5523                           tosh	equ	0xFFE
  5524                           tosl	equ	0xFFD
  5525                           pclath	equ	0xFFA
  5526                           tblptru	equ	0xFF8
  5527                           tblptrh	equ	0xFF7
  5528                           tblptrl	equ	0xFF6
  5529                           tablat	equ	0xFF5
  5530                           prodh	equ	0xFF4
  5531                           prodl	equ	0xFF3
  5532                           intcon	equ	0xFF2
  5533                           postinc0	equ	0xFEE
  5534                           plusw0	equ	0xFEB
  5535                           wreg	equ	0xFE8
  5536                           indf1	equ	0xFE7
  5537                           postdec1	equ	0xFE5
  5538                           fsr1h	equ	0xFE2
  5539                           fsr1l	equ	0xFE1
  5540                           indf2	equ	0xFDF
  5541                           postinc2	equ	0xFDE
  5542                           postdec2	equ	0xFDD
  5543                           plusw2	equ	0xFDB
  5544                           fsr2h	equ	0xFDA
  5545                           fsr2l	equ	0xFD9
  5546                           status	equ	0xFD8
  5547                           
  5548 ;; *************** function _GetMcuFwVersion *****************
  5549 ;; Defined at:
  5550 ;;		line 14 in file "SystemStatus.c"
  5551 ;; Parameters:    Size  Location     Type
  5552 ;;		None
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  5555 ;;  compileData     4    9[BANK0 ] unsigned long 
  5556 ;; Return value:  Size  Location     Type
  5557 ;;                  1    wreg      void 
  5558 ;; Registers used:
  5559 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5560 ;; Tracked objects:
  5561 ;;		On entry : 0/0
  5562 ;;		On exit  : 0/0
  5563 ;;		Unchanged: 0/0
  5564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5565 ;;      Params:         0       0       0       0       0       0       0
  5566 ;;      Locals:         0      13       0       0       0       0       0
  5567 ;;      Temps:          0       0       0       0       0       0       0
  5568 ;;      Totals:         0      13       0       0       0       0       0
  5569 ;;Total ram usage:       13 bytes
  5570 ;; Hardware stack levels used:    1
  5571 ;; Hardware stack levels required when called:    5
  5572 ;; This function calls:
  5573 ;;		_WriteUartMessage
  5574 ;;		_ZeroArray
  5575 ;;		_crc8
  5576 ;; This function is called by:
  5577 ;;		_GroupStatusAndVersion
  5578 ;; This function uses a non-reentrant model
  5579 ;;
  5580                           
  5581                           	psect	text27
  5582  00252E                     __ptext27:
  5583                           	opt stack 0
  5584  00252E                     _GetMcuFwVersion:
  5585                           	opt stack 23
  5586                           
  5587                           ;SystemStatus.c: 16: uint32_t compileData = 0x0;
  5588                           
  5589                           ;incstack = 0
  5590  00252E  0E00               	movlw	0
  5591  002530  0100               	movlb	0	; () banked
  5592  002532  6F69               	movwf	GetMcuFwVersion@compileData& (0+255),b
  5593  002534  0E00               	movlw	0
  5594  002536  6F6A               	movwf	(GetMcuFwVersion@compileData+1)& (0+255),b
  5595  002538  0E00               	movlw	0
  5596  00253A  6F6B               	movwf	(GetMcuFwVersion@compileData+2)& (0+255),b
  5597  00253C  0E00               	movlw	0
  5598  00253E  6F6C               	movwf	(GetMcuFwVersion@compileData+3)& (0+255),b
  5599                           
  5600                           ; BSR set to: 0
  5601                           ;SystemStatus.c: 19: char TxMsg[(0x4) + (0x4) + 1];
  5602                           ;SystemStatus.c: 20: ZeroArray(TxMsg, (0x4) + (0x4) + 1);
  5603  002540  0E60               	movlw	low GetMcuFwVersion@TxMsg
  5604  002542  6E20               	movwf	ZeroArray@array,c
  5605  002544  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5606  002546  6E21               	movwf	ZeroArray@array+1,c
  5607  002548  0E00               	movlw	0
  5608  00254A  6E23               	movwf	ZeroArray@size+1,c
  5609  00254C  0E09               	movlw	9
  5610  00254E  6E22               	movwf	ZeroArray@size,c
  5611  002550  ECCB  F01B         	call	_ZeroArray	;wreg free
  5612                           
  5613                           ;SystemStatus.c: 23: TxMsg[(0)] = (0x24);
  5614  002554  0E24               	movlw	36
  5615  002556  0100               	movlb	0	; () banked
  5616  002558  6F60               	movwf	GetMcuFwVersion@TxMsg& (0+255),b
  5617                           
  5618                           ; BSR set to: 0
  5619                           ;SystemStatus.c: 24: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  5620  00255A  0E02               	movlw	2
  5621  00255C  6F61               	movwf	(GetMcuFwVersion@TxMsg+1)& (0+255),b
  5622                           
  5623                           ; BSR set to: 0
  5624                           ;SystemStatus.c: 25: TxMsg[(2)] = STATUS_GET_MCU_FW_VERSION;
  5625  00255E  0E22               	movlw	34
  5626  002560  6F62               	movwf	(GetMcuFwVersion@TxMsg+2)& (0+255),b
  5627                           
  5628                           ; BSR set to: 0
  5629                           ;SystemStatus.c: 26: TxMsg[(3)] = (0x4);
  5630  002562  0E04               	movlw	4
  5631  002564  6F63               	movwf	(GetMcuFwVersion@TxMsg+3)& (0+255),b
  5632                           
  5633                           ; BSR set to: 0
  5634                           ;SystemStatus.c: 29: compileData = "Mar 18 2018";
  5635  002566  0E8E               	movlw	low STR_1
  5636  002568  6F69               	movwf	GetMcuFwVersion@compileData& (0+255),b
  5637  00256A  0E06               	movlw	high STR_1
  5638  00256C  6F6A               	movwf	(GetMcuFwVersion@compileData+1)& (0+255),b
  5639  00256E  0E00               	movlw	low (STR_1 shr (0+16))
  5640  002570  6F6B               	movwf	(GetMcuFwVersion@compileData+2)& (0+255),b
  5641  002572  0E00               	movlw	high (STR_1 shr (0+16))
  5642  002574  6F6C               	movwf	(GetMcuFwVersion@compileData+3)& (0+255),b
  5643                           
  5644                           ; BSR set to: 0
  5645                           ;SystemStatus.c: 30: TxMsg[(0x4) + 0] = (compileData & 0xFF00) >> 8;
  5646  002576  C06A  F064         	movff	GetMcuFwVersion@compileData+1,GetMcuFwVersion@TxMsg+4
  5647                           
  5648                           ; BSR set to: 0
  5649                           ;SystemStatus.c: 31: TxMsg[(0x4) + 1] = compileData & 0xFF;
  5650  00257A  C069  F065         	movff	GetMcuFwVersion@compileData,GetMcuFwVersion@TxMsg+5
  5651                           
  5652                           ; BSR set to: 0
  5653                           ;SystemStatus.c: 34: compileData = "15:12:45";
  5654  00257E  0E9A               	movlw	low STR_2
  5655  002580  6F69               	movwf	GetMcuFwVersion@compileData& (0+255),b
  5656  002582  0E06               	movlw	high STR_2
  5657  002584  6F6A               	movwf	(GetMcuFwVersion@compileData+1)& (0+255),b
  5658  002586  0E00               	movlw	low (STR_2 shr (0+16))
  5659  002588  6F6B               	movwf	(GetMcuFwVersion@compileData+2)& (0+255),b
  5660  00258A  0E00               	movlw	high (STR_2 shr (0+16))
  5661  00258C  6F6C               	movwf	(GetMcuFwVersion@compileData+3)& (0+255),b
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;SystemStatus.c: 35: TxMsg[(0x4) + 2] = (compileData & 0xFF00) >> 8;
  5665  00258E  C06A  F066         	movff	GetMcuFwVersion@compileData+1,GetMcuFwVersion@TxMsg+6
  5666                           
  5667                           ; BSR set to: 0
  5668                           ;SystemStatus.c: 36: TxMsg[(0x4) + 3] = compileData & 0xFF;
  5669  002592  C069  F067         	movff	GetMcuFwVersion@compileData,GetMcuFwVersion@TxMsg+7
  5670                           
  5671                           ; BSR set to: 0
  5672                           ;SystemStatus.c: 38: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  5673  002596  0E60               	movlw	low GetMcuFwVersion@TxMsg
  5674  002598  6E18               	movwf	crc8@dataArray,c
  5675  00259A  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5676  00259C  6E19               	movwf	crc8@dataArray+1,c
  5677  00259E  0E00               	movlw	0
  5678  0025A0  6E1B               	movwf	crc8@dataSize+1,c
  5679  0025A2  0E08               	movlw	8
  5680  0025A4  6E1A               	movwf	crc8@dataSize,c
  5681  0025A6  ECB8  F017         	call	_crc8	;wreg free
  5682  0025AA  0100               	movlb	0	; () banked
  5683  0025AC  6F68               	movwf	(GetMcuFwVersion@TxMsg+8)& (0+255),b
  5684                           
  5685                           ; BSR set to: 0
  5686                           ;SystemStatus.c: 40: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  5687  0025AE  0E60               	movlw	low GetMcuFwVersion@TxMsg
  5688  0025B0  6E19               	movwf	WriteUartMessage@dataBuf,c
  5689  0025B2  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5690  0025B4  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5691  0025B6  0E00               	movlw	0
  5692  0025B8  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5693  0025BA  0E09               	movlw	9
  5694  0025BC  6E1B               	movwf	WriteUartMessage@dataSize,c
  5695  0025BE  ECFF  F019         	call	_WriteUartMessage	;wreg free
  5696  0025C2  0012               	return		;funcret
  5697  0025C4                     __end_of_GetMcuFwVersion:
  5698                           	opt stack 0
  5699                           tosu	equ	0xFFF
  5700                           tosh	equ	0xFFE
  5701                           tosl	equ	0xFFD
  5702                           pclath	equ	0xFFA
  5703                           tblptru	equ	0xFF8
  5704                           tblptrh	equ	0xFF7
  5705                           tblptrl	equ	0xFF6
  5706                           tablat	equ	0xFF5
  5707                           prodh	equ	0xFF4
  5708                           prodl	equ	0xFF3
  5709                           intcon	equ	0xFF2
  5710                           postinc0	equ	0xFEE
  5711                           plusw0	equ	0xFEB
  5712                           wreg	equ	0xFE8
  5713                           indf1	equ	0xFE7
  5714                           postdec1	equ	0xFE5
  5715                           fsr1h	equ	0xFE2
  5716                           fsr1l	equ	0xFE1
  5717                           indf2	equ	0xFDF
  5718                           postinc2	equ	0xFDE
  5719                           postdec2	equ	0xFDD
  5720                           plusw2	equ	0xFDB
  5721                           fsr2h	equ	0xFDA
  5722                           fsr2l	equ	0xFD9
  5723                           status	equ	0xFD8
  5724                           
  5725 ;; *************** function _FlashReadUart *****************
  5726 ;; Defined at:
  5727 ;;		line 62 in file "FlashApp.c"
  5728 ;; Parameters:    Size  Location     Type
  5729 ;;  numOfSampleT    2   43[COMRAM] int 
  5730 ;; Auto vars:     Size  Location     Type
  5731 ;;  idx             2   91[BANK0 ] int 
  5732 ;;  TxMsg          69   12[BANK0 ] unsigned char [69]
  5733 ;;  offset          2   93[BANK0 ] int 
  5734 ;;  j               2   89[BANK0 ] int 
  5735 ;; Return value:  Size  Location     Type
  5736 ;;                  1    wreg      void 
  5737 ;; Registers used:
  5738 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5739 ;; Tracked objects:
  5740 ;;		On entry : 0/0
  5741 ;;		On exit  : 0/0
  5742 ;;		Unchanged: 0/0
  5743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5744 ;;      Params:         2       0       0       0       0       0       0
  5745 ;;      Locals:         0      83       0       0       0       0       0
  5746 ;;      Temps:          0      12       0       0       0       0       0
  5747 ;;      Totals:         2      95       0       0       0       0       0
  5748 ;;Total ram usage:       97 bytes
  5749 ;; Hardware stack levels used:    1
  5750 ;; Hardware stack levels required when called:    6
  5751 ;; This function calls:
  5752 ;;		_FLASH_IsWriteDone
  5753 ;;		_FLASH_ReadByte
  5754 ;;		_SendAckMessage
  5755 ;;		_WriteUartMessage
  5756 ;;		_ZeroArray
  5757 ;;		_abs
  5758 ;;		_crc8
  5759 ;; This function is called by:
  5760 ;;		_GroupFlashMemory
  5761 ;; This function uses a non-reentrant model
  5762 ;;
  5763                           
  5764                           	psect	text28
  5765  0006A4                     __ptext28:
  5766                           	opt stack 0
  5767  0006A4                     _FlashReadUart:
  5768                           	opt stack 22
  5769                           
  5770                           ;FlashApp.c: 65: int j=0;
  5771                           
  5772                           ;incstack = 0
  5773  0006A4  0E00               	movlw	0
  5774  0006A6  0100               	movlb	0	; () banked
  5775  0006A8  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  5776  0006AA  0E00               	movlw	0
  5777  0006AC  6FB9               	movwf	FlashReadUart@j& (0+255),b
  5778                           
  5779                           ;FlashApp.c: 66: int offset = 0;
  5780  0006AE  0E00               	movlw	0
  5781  0006B0  6FBE               	movwf	(FlashReadUart@offset+1)& (0+255),b
  5782  0006B2  0E00               	movlw	0
  5783  0006B4  6FBD               	movwf	FlashReadUart@offset& (0+255),b
  5784                           
  5785                           ; BSR set to: 0
  5786                           ;FlashApp.c: 67: char TxMsg[(64) + (0x4) + 1];
  5787                           ;FlashApp.c: 68: ZeroArray(TxMsg, (64) + (0x4) + 1);
  5788  0006B6  0E6C               	movlw	low FlashReadUart@TxMsg
  5789  0006B8  6E20               	movwf	ZeroArray@array,c
  5790  0006BA  0E00               	movlw	high FlashReadUart@TxMsg
  5791  0006BC  6E21               	movwf	ZeroArray@array+1,c
  5792  0006BE  0E00               	movlw	0
  5793  0006C0  6E23               	movwf	ZeroArray@size+1,c
  5794  0006C2  0E45               	movlw	69
  5795  0006C4  6E22               	movwf	ZeroArray@size,c
  5796  0006C6  ECCB  F01B         	call	_ZeroArray	;wreg free
  5797                           
  5798                           ;FlashApp.c: 71: if (FLASH_IsWriteDone() == 0)
  5799  0006CA  EC79  F01C         	call	_FLASH_IsWriteDone	;wreg free
  5800  0006CE  0900               	iorlw	0
  5801  0006D0  B4D8               	btfsc	status,2,c
  5802  0006D2  0012               	return	
  5803                           
  5804                           ;FlashApp.c: 74: }
  5805                           ;FlashApp.c: 76: if (numOfReadSamples)
  5806                           
  5807                           ;FlashApp.c: 72: {
  5808                           ;FlashApp.c: 73: return;
  5809  0006D4  503C               	movf	_numOfReadSamples,w,c
  5810  0006D6  103D               	iorwf	_numOfReadSamples+1,w,c
  5811  0006D8  103E               	iorwf	_numOfReadSamples+2,w,c
  5812  0006DA  103F               	iorwf	_numOfReadSamples+3,w,c
  5813  0006DC  B4D8               	btfsc	status,2,c
  5814  0006DE  D0EE               	goto	l306
  5815                           
  5816                           ;FlashApp.c: 77: {
  5817                           ;FlashApp.c: 78: if (numOfValidateSamples)
  5818  0006E0  5030               	movf	_numOfValidateSamples,w,c
  5819  0006E2  1031               	iorwf	_numOfValidateSamples+1,w,c
  5820  0006E4  1032               	iorwf	_numOfValidateSamples+2,w,c
  5821  0006E6  1033               	iorwf	_numOfValidateSamples+3,w,c
  5822  0006E8  B4D8               	btfsc	status,2,c
  5823  0006EA  D09A               	goto	l307
  5824                           
  5825                           ;FlashApp.c: 79: {
  5826                           ;FlashApp.c: 80: offset = numOfValidateSamples - (numOfValidateSamples > numOfSampleToRe
      +                          ad)? numOfValidateSamples : numOfSampleToRead;
  5827  0006EC  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  5828  0006F0  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  5829  0006F4  0E00               	movlw	0
  5830  0006F6  0100               	movlb	0	; () banked
  5831  0006F8  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5832  0006FA  0EFF               	movlw	255
  5833  0006FC  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  5834  0006FE  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  5835  000700  5030               	movf	_numOfValidateSamples,w,c
  5836  000702  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  5837  000704  5031               	movf	_numOfValidateSamples+1,w,c
  5838  000706  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  5839  000708  5032               	movf	_numOfValidateSamples+2,w,c
  5840  00070A  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  5841  00070C  5033               	movf	_numOfValidateSamples+3,w,c
  5842  00070E  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  5843  000710  B0D8               	btfsc	status,0,c
  5844  000712  D002               	goto	u7810
  5845  000714  0E01               	movlw	1
  5846  000716  D001               	goto	u7820
  5847  000718                     u7810:
  5848  000718  0E00               	movlw	0
  5849  00071A                     u7820:
  5850  00071A  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  5851  00071C  6B65               	clrf	(??_FlashReadUart+5)& (0+255),b
  5852  00071E  6B66               	clrf	(??_FlashReadUart+6)& (0+255),b
  5853  000720  6B67               	clrf	(??_FlashReadUart+7)& (0+255),b
  5854  000722  1F64               	comf	(??_FlashReadUart+4)& (0+255),f,b
  5855  000724  1F65               	comf	(??_FlashReadUart+5)& (0+255),f,b
  5856  000726  1F66               	comf	(??_FlashReadUart+6)& (0+255),f,b
  5857  000728  1F67               	comf	(??_FlashReadUart+7)& (0+255),f,b
  5858  00072A  2B64               	incf	(??_FlashReadUart+4)& (0+255),f,b
  5859  00072C  0E00               	movlw	0
  5860  00072E  2365               	addwfc	(??_FlashReadUart+5)& (0+255),f,b
  5861  000730  2366               	addwfc	(??_FlashReadUart+6)& (0+255),f,b
  5862  000732  2367               	addwfc	(??_FlashReadUart+7)& (0+255),f,b
  5863  000734  5030               	movf	_numOfValidateSamples,w,c
  5864  000736  2564               	addwf	(??_FlashReadUart+4)& (0+255),w,b
  5865  000738  6F68               	movwf	(??_FlashReadUart+8)& (0+255),b
  5866  00073A  5031               	movf	_numOfValidateSamples+1,w,c
  5867  00073C  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  5868  00073E  6F69               	movwf	(??_FlashReadUart+9)& (0+255),b
  5869  000740  5032               	movf	_numOfValidateSamples+2,w,c
  5870  000742  2166               	addwfc	(??_FlashReadUart+6)& (0+255),w,b
  5871  000744  6F6A               	movwf	(??_FlashReadUart+10)& (0+255),b
  5872  000746  5033               	movf	_numOfValidateSamples+3,w,c
  5873  000748  2167               	addwfc	(??_FlashReadUart+7)& (0+255),w,b
  5874  00074A  6F6B               	movwf	(??_FlashReadUart+11)& (0+255),b
  5875  00074C  5168               	movf	(??_FlashReadUart+8)& (0+255),w,b
  5876  00074E  1169               	iorwf	(??_FlashReadUart+9)& (0+255),w,b
  5877  000750  116A               	iorwf	(??_FlashReadUart+10)& (0+255),w,b
  5878  000752  116B               	iorwf	(??_FlashReadUart+11)& (0+255),w,b
  5879  000754  A4D8               	btfss	status,2,c
  5880  000756  D00A               	goto	l309
  5881                           
  5882                           ; BSR set to: 0
  5883  000758  C02C  F0B1         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$581
  5884  00075C  C02D  F0B2         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$581+1
  5885  000760  0E00               	movlw	0
  5886  000762  BFB2               	btfsc	(_FlashReadUart$581+1)& (0+255),7,b
  5887  000764  0EFF               	movlw	-1
  5888  000766  6FB3               	movwf	(_FlashReadUart$581+2)& (0+255),b
  5889  000768  6FB4               	movwf	(_FlashReadUart$581+3)& (0+255),b
  5890  00076A  D008               	goto	l311
  5891  00076C                     l309:
  5892                           
  5893                           ; BSR set to: 0
  5894  00076C  C030  F0B1         	movff	_numOfValidateSamples,_FlashReadUart$581
  5895  000770  C031  F0B2         	movff	_numOfValidateSamples+1,_FlashReadUart$581+1
  5896  000774  C032  F0B3         	movff	_numOfValidateSamples+2,_FlashReadUart$581+2
  5897  000778  C033  F0B4         	movff	_numOfValidateSamples+3,_FlashReadUart$581+3
  5898  00077C                     l311:
  5899                           
  5900                           ; BSR set to: 0
  5901  00077C  C0B1  F0BD         	movff	_FlashReadUart$581,FlashReadUart@offset
  5902  000780  C0B2  F0BE         	movff	_FlashReadUart$581+1,FlashReadUart@offset+1
  5903                           
  5904                           ; BSR set to: 0
  5905                           ;FlashApp.c: 81: if(offset < 0)
  5906  000784  AFBE               	btfss	(FlashReadUart@offset+1)& (0+255),7,b
  5907  000786  D091               	goto	l314
  5908                           
  5909                           ; BSR set to: 0
  5910                           ;FlashApp.c: 82: {
  5911                           ;FlashApp.c: 83: if (abs(offset) > numOfReadSamples)
  5912  000788  C0BD  F018         	movff	FlashReadUart@offset,abs@a
  5913  00078C  C0BE  F019         	movff	FlashReadUart@offset+1,abs@a+1
  5914  000790  EC1B  F01B         	call	_abs	;wreg free
  5915  000794  C018  F060         	movff	?_abs,??_FlashReadUart
  5916  000798  C019  F061         	movff	?_abs+1,??_FlashReadUart+1
  5917  00079C  0E00               	movlw	0
  5918  00079E  0100               	movlb	0	; () banked
  5919  0007A0  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5920  0007A2  0EFF               	movlw	255
  5921  0007A4  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  5922  0007A6  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  5923  0007A8  5160               	movf	??_FlashReadUart& (0+255),w,b
  5924  0007AA  5C3C               	subwf	_numOfReadSamples,w,c
  5925  0007AC  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  5926  0007AE  583D               	subwfb	_numOfReadSamples+1,w,c
  5927  0007B0  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  5928  0007B2  583E               	subwfb	_numOfReadSamples+2,w,c
  5929  0007B4  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  5930  0007B6  583F               	subwfb	_numOfReadSamples+3,w,c
  5931  0007B8  B0D8               	btfsc	status,0,c
  5932  0007BA  D016               	goto	l313
  5933                           
  5934                           ; BSR set to: 0
  5935                           ;FlashApp.c: 84: {
  5936                           ;FlashApp.c: 85: numOfSampleToRead += offset + numOfReadSamples;
  5937  0007BC  503C               	movf	_numOfReadSamples,w,c
  5938  0007BE  25BD               	addwf	FlashReadUart@offset& (0+255),w,b
  5939  0007C0  6F60               	movwf	??_FlashReadUart& (0+255),b
  5940  0007C2  503D               	movf	_numOfReadSamples+1,w,c
  5941  0007C4  21BE               	addwfc	(FlashReadUart@offset+1)& (0+255),w,b
  5942  0007C6  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  5943  0007C8  5160               	movf	??_FlashReadUart& (0+255),w,b
  5944  0007CA  262C               	addwf	FlashReadUart@numOfSampleToRead,f,c
  5945  0007CC  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  5946  0007CE  222D               	addwfc	FlashReadUart@numOfSampleToRead+1,f,c
  5947                           
  5948                           ; BSR set to: 0
  5949                           ;FlashApp.c: 86: offset = numOfReadSamples * (-1);
  5950  0007D0  C03C  F060         	movff	_numOfReadSamples,??_FlashReadUart
  5951  0007D4  C03D  F061         	movff	_numOfReadSamples+1,??_FlashReadUart+1
  5952  0007D8  1F60               	comf	??_FlashReadUart& (0+255),f,b
  5953  0007DA  1F61               	comf	(??_FlashReadUart+1)& (0+255),f,b
  5954  0007DC  4B60               	infsnz	??_FlashReadUart& (0+255),f,b
  5955  0007DE  2B61               	incf	(??_FlashReadUart+1)& (0+255),f,b
  5956  0007E0  C060  F0BD         	movff	??_FlashReadUart,FlashReadUart@offset
  5957  0007E4  C061  F0BE         	movff	??_FlashReadUart+1,FlashReadUart@offset+1
  5958  0007E8                     l313:
  5959                           
  5960                           ; BSR set to: 0
  5961                           ;FlashApp.c: 88: }
  5962                           ;FlashApp.c: 90: readAddress += offset * (64);
  5963  0007E8  C0BD  F060         	movff	FlashReadUart@offset,??_FlashReadUart
  5964  0007EC  C0BE  F061         	movff	FlashReadUart@offset+1,??_FlashReadUart+1
  5965  0007F0  0E06               	movlw	6
  5966  0007F2                     u7865:
  5967  0007F2  90D8               	bcf	status,0,c
  5968  0007F4  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  5969  0007F6  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  5970  0007F8  2EE8               	decfsz	wreg,f,c
  5971  0007FA  D7FB               	goto	u7865
  5972  0007FC  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  5973  000800  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  5974  000804  0E00               	movlw	0
  5975  000806  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  5976  000808  0EFF               	movlw	255
  5977  00080A  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  5978  00080C  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  5979  00080E  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  5980  000810  27F9               	addwf	_readAddress& (0+255),f,b
  5981  000812  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  5982  000814  23FA               	addwfc	(_readAddress+1)& (0+255),f,b
  5983  000816  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  5984  000818  23FB               	addwfc	(_readAddress+2)& (0+255),f,b
  5985  00081A  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  5986  00081C  23FC               	addwfc	(_readAddress+3)& (0+255),f,b
  5987                           
  5988                           ; BSR set to: 0
  5989                           ;FlashApp.c: 91: }
  5990                           ;FlashApp.c: 92: }
  5991  00081E  D045               	goto	l314
  5992  000820                     l307:
  5993                           
  5994                           ;FlashApp.c: 93: else
  5995                           ;FlashApp.c: 94: {
  5996                           ;FlashApp.c: 95: numOfSampleToRead = (numOfReadSamples > numOfSampleToRead)? numOfSample
      +                          ToRead : numOfReadSamples;
  5997                           
  5998                           ; BSR set to: 0
  5999  000820  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  6000  000824  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  6001  000828  0E00               	movlw	0
  6002  00082A  0100               	movlb	0	; () banked
  6003  00082C  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  6004  00082E  0EFF               	movlw	255
  6005  000830  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  6006  000832  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  6007  000834  503C               	movf	_numOfReadSamples,w,c
  6008  000836  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  6009  000838  503D               	movf	_numOfReadSamples+1,w,c
  6010  00083A  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  6011  00083C  503E               	movf	_numOfReadSamples+2,w,c
  6012  00083E  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  6013  000840  503F               	movf	_numOfReadSamples+3,w,c
  6014  000842  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  6015  000844  A0D8               	btfss	status,0,c
  6016  000846  D009               	goto	l316
  6017                           
  6018                           ; BSR set to: 0
  6019  000848  C03C  F0B5         	movff	_numOfReadSamples,_FlashReadUart$582
  6020  00084C  C03D  F0B6         	movff	_numOfReadSamples+1,_FlashReadUart$582+1
  6021  000850  C03E  F0B7         	movff	_numOfReadSamples+2,_FlashReadUart$582+2
  6022  000854  C03F  F0B8         	movff	_numOfReadSamples+3,_FlashReadUart$582+3
  6023  000858  D009               	goto	l318
  6024  00085A                     l316:
  6025                           
  6026                           ; BSR set to: 0
  6027                           
  6028                           ; BSR set to: 0
  6029  00085A  C02C  F0B5         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$582
  6030  00085E  C02D  F0B6         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$582+1
  6031  000862  0E00               	movlw	0
  6032  000864  BFB6               	btfsc	(_FlashReadUart$582+1)& (0+255),7,b
  6033  000866  0EFF               	movlw	-1
  6034  000868  6FB7               	movwf	(_FlashReadUart$582+2)& (0+255),b
  6035  00086A  6FB8               	movwf	(_FlashReadUart$582+3)& (0+255),b
  6036  00086C                     l318:
  6037                           
  6038                           ; BSR set to: 0
  6039                           
  6040                           ; BSR set to: 0
  6041  00086C  C0B5  F02C         	movff	_FlashReadUart$582,FlashReadUart@numOfSampleToRead
  6042  000870  C0B6  F02D         	movff	_FlashReadUart$582+1,FlashReadUart@numOfSampleToRead+1
  6043                           
  6044                           ; BSR set to: 0
  6045                           ;FlashApp.c: 96: readAddress -= numOfSampleToRead * (64);
  6046  000874  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  6047  000878  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  6048  00087C  0E06               	movlw	6
  6049  00087E                     u7885:
  6050  00087E  90D8               	bcf	status,0,c
  6051  000880  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  6052  000882  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  6053  000884  2EE8               	decfsz	wreg,f,c
  6054  000886  D7FB               	goto	u7885
  6055  000888  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  6056  00088C  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  6057  000890  0E00               	movlw	0
  6058  000892  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  6059  000894  0EFF               	movlw	255
  6060  000896  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  6061  000898  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  6062  00089A  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  6063  00089C  5FF9               	subwf	_readAddress& (0+255),f,b
  6064  00089E  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  6065  0008A0  5BFA               	subwfb	(_readAddress+1)& (0+255),f,b
  6066  0008A2  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  6067  0008A4  5BFB               	subwfb	(_readAddress+2)& (0+255),f,b
  6068  0008A6  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  6069  0008A8  5BFC               	subwfb	(_readAddress+3)& (0+255),f,b
  6070  0008AA                     l314:
  6071                           
  6072                           ; BSR set to: 0
  6073                           ;FlashApp.c: 97: }
  6074                           ;FlashApp.c: 99: if (readAddress <= 0x4000)
  6075                           
  6076                           ; BSR set to: 0
  6077  0008AA  51FC               	movf	(_readAddress+3)& (0+255),w,b
  6078  0008AC  11FB               	iorwf	(_readAddress+2)& (0+255),w,b
  6079  0008AE  E13E               	bnz	l7754
  6080  0008B0  05F9               	decf	_readAddress& (0+255),w,b
  6081  0008B2  0E40               	movlw	64
  6082  0008B4  59FA               	subwfb	(_readAddress+1)& (0+255),w,b
  6083  0008B6  B0D8               	btfsc	status,0,c
  6084  0008B8  D039               	goto	l324
  6085  0008BA  D023               	goto	u7920
  6086  0008BC                     l306:
  6087                           
  6088                           ;FlashApp.c: 104: else
  6089                           ;FlashApp.c: 105: {
  6090                           ;FlashApp.c: 106: if ((isReWriteDone) && (readAddress <= writeAddress))
  6091                           
  6092                           ; BSR set to: 0
  6093  0008BC  0100               	movlb	0	; () banked
  6094  0008BE  51CA               	movf	_isReWriteDone& (0+255),w,b
  6095  0008C0  B4D8               	btfsc	status,2,c
  6096  0008C2  D028               	goto	l321
  6097                           
  6098                           ; BSR set to: 0
  6099  0008C4  51F9               	movf	_readAddress& (0+255),w,b
  6100  0008C6  5C40               	subwf	_writeAddress,w,c
  6101  0008C8  51FA               	movf	(_readAddress+1)& (0+255),w,b
  6102  0008CA  5841               	subwfb	_writeAddress+1,w,c
  6103  0008CC  51FB               	movf	(_readAddress+2)& (0+255),w,b
  6104  0008CE  5842               	subwfb	_writeAddress+2,w,c
  6105  0008D0  51FC               	movf	(_readAddress+3)& (0+255),w,b
  6106  0008D2  5843               	subwfb	_writeAddress+3,w,c
  6107  0008D4  A0D8               	btfss	status,0,c
  6108  0008D6  D01E               	goto	l321
  6109                           
  6110                           ; BSR set to: 0
  6111                           ;FlashApp.c: 107: {
  6112                           ;FlashApp.c: 108: readAddress = writeAddress + (64);
  6113  0008D8  0E40               	movlw	64
  6114  0008DA  2440               	addwf	_writeAddress,w,c
  6115  0008DC  6FF9               	movwf	_readAddress& (0+255),b
  6116  0008DE  0E00               	movlw	0
  6117  0008E0  2041               	addwfc	_writeAddress+1,w,c
  6118  0008E2  6FFA               	movwf	(_readAddress+1)& (0+255),b
  6119  0008E4  0E00               	movlw	0
  6120  0008E6  2042               	addwfc	_writeAddress+2,w,c
  6121  0008E8  6FFB               	movwf	(_readAddress+2)& (0+255),b
  6122  0008EA  0E00               	movlw	0
  6123  0008EC  2043               	addwfc	_writeAddress+3,w,c
  6124  0008EE  6FFC               	movwf	(_readAddress+3)& (0+255),b
  6125                           
  6126                           ;FlashApp.c: 109: if (readAddress >= 0x7FF0)
  6127  0008F0  51FC               	movf	(_readAddress+3)& (0+255),w,b
  6128  0008F2  11FB               	iorwf	(_readAddress+2)& (0+255),w,b
  6129  0008F4  E106               	bnz	u7920
  6130  0008F6  0EF0               	movlw	240
  6131  0008F8  5DF9               	subwf	_readAddress& (0+255),w,b
  6132  0008FA  0E7F               	movlw	127
  6133  0008FC  59FA               	subwfb	(_readAddress+1)& (0+255),w,b
  6134  0008FE  A0D8               	btfss	status,0,c
  6135  000900  D015               	goto	l324
  6136  000902                     u7920:
  6137                           
  6138                           ; BSR set to: 0
  6139                           ;FlashApp.c: 110: {
  6140                           ;FlashApp.c: 111: readAddress = 0x4000;
  6141  000902  0E00               	movlw	0
  6142  000904  6FF9               	movwf	_readAddress& (0+255),b
  6143  000906  0E40               	movlw	64
  6144  000908  6FFA               	movwf	(_readAddress+1)& (0+255),b
  6145  00090A  0E00               	movlw	0
  6146  00090C  6FFB               	movwf	(_readAddress+2)& (0+255),b
  6147  00090E  0E00               	movlw	0
  6148  000910  6FFC               	movwf	(_readAddress+3)& (0+255),b
  6149                           
  6150                           ; BSR set to: 0
  6151                           ;FlashApp.c: 112: }
  6152                           ;FlashApp.c: 114: }
  6153  000912  D00C               	goto	l324
  6154  000914                     l321:
  6155                           
  6156                           ; BSR set to: 0
  6157                           ;FlashApp.c: 115: else
  6158                           ;FlashApp.c: 116: {
  6159                           ;FlashApp.c: 117: if(numOfValidateSamples == 0)
  6160                           
  6161                           ; BSR set to: 0
  6162  000914  5030               	movf	_numOfValidateSamples,w,c
  6163  000916  1031               	iorwf	_numOfValidateSamples+1,w,c
  6164  000918  1032               	iorwf	_numOfValidateSamples+2,w,c
  6165  00091A  1033               	iorwf	_numOfValidateSamples+3,w,c
  6166  00091C  A4D8               	btfss	status,2,c
  6167  00091E  D006               	goto	l324
  6168                           
  6169                           ; BSR set to: 0
  6170                           ;FlashApp.c: 118: {
  6171                           ;FlashApp.c: 119: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_NO_SAMPLE_YET
      +                          );
  6172  000920  0E55               	movlw	85
  6173  000922  6E24               	movwf	SendAckMessage@inRequest,c
  6174  000924  0E05               	movlw	5
  6175  000926  EC8F  F017         	call	_SendAckMessage
  6176                           
  6177                           ;FlashApp.c: 120: return;
  6178  00092A  0012               	return	
  6179  00092C                     l324:
  6180  00092C                     l7754:
  6181                           
  6182                           ;FlashApp.c: 121: }
  6183                           ;FlashApp.c: 123: }
  6184                           ;FlashApp.c: 124: }
  6185                           ;FlashApp.c: 127: TxMsg[(0)] = (0x24);
  6186  00092C  0E24               	movlw	36
  6187  00092E  0100               	movlb	0	; () banked
  6188  000930  6F6C               	movwf	FlashReadUart@TxMsg& (0+255),b
  6189                           
  6190                           ;FlashApp.c: 128: TxMsg[(1)] = FLASH_MSG;
  6191  000932  0E05               	movlw	5
  6192  000934  6F6D               	movwf	(FlashReadUart@TxMsg+1)& (0+255),b
  6193                           
  6194                           ;FlashApp.c: 129: TxMsg[(2)] = FLASH_SEND_RAW_DATA;
  6195  000936  0E54               	movlw	84
  6196  000938  6F6E               	movwf	(FlashReadUart@TxMsg+2)& (0+255),b
  6197                           
  6198                           ;FlashApp.c: 130: TxMsg[(3)] = (64);
  6199  00093A  0E40               	movlw	64
  6200  00093C  6F6F               	movwf	(FlashReadUart@TxMsg+3)& (0+255),b
  6201                           
  6202                           ;FlashApp.c: 132: for (j=0; j<numOfSampleToRead; j++)
  6203  00093E  0E00               	movlw	0
  6204  000940  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  6205  000942  0E00               	movlw	0
  6206  000944  6FB9               	movwf	FlashReadUart@j& (0+255),b
  6207  000946  D084               	goto	l325
  6208  000948                     
  6209                           ; BSR set to: 0
  6210                           ;FlashApp.c: 133: {
  6211                           ;FlashApp.c: 135: for(int idx = 0; idx < (64); idx++)
  6212                           
  6213                           ; BSR set to: 0
  6214  000948  0E00               	movlw	0
  6215  00094A  6FBC               	movwf	(FlashReadUart@idx+1)& (0+255),b
  6216  00094C  0E00               	movlw	0
  6217  00094E  6FBB               	movwf	FlashReadUart@idx& (0+255),b
  6218  000950                     l7758:
  6219                           
  6220                           ; BSR set to: 0
  6221  000950  BFBC               	btfsc	(FlashReadUart@idx+1)& (0+255),7,b
  6222  000952  D006               	goto	l327
  6223  000954  51BC               	movf	(FlashReadUart@idx+1)& (0+255),w,b
  6224  000956  E12C               	bnz	l7768
  6225  000958  0E40               	movlw	64
  6226  00095A  5DBB               	subwf	FlashReadUart@idx& (0+255),w,b
  6227  00095C  B0D8               	btfsc	status,0,c
  6228  00095E  D028               	goto	u7950
  6229  000960                     l327:
  6230                           
  6231                           ; BSR set to: 0
  6232                           ;FlashApp.c: 136: {
  6233                           ;FlashApp.c: 137: TxMsg[(0x4) + idx] = FLASH_ReadByte(readAddress + idx);
  6234                           
  6235                           ; BSR set to: 0
  6236  000960  0E04               	movlw	4
  6237  000962  25BB               	addwf	FlashReadUart@idx& (0+255),w,b
  6238  000964  6F60               	movwf	??_FlashReadUart& (0+255),b
  6239  000966  0E00               	movlw	0
  6240  000968  21BC               	addwfc	(FlashReadUart@idx+1)& (0+255),w,b
  6241  00096A  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  6242  00096C  0E6C               	movlw	low FlashReadUart@TxMsg
  6243  00096E  2560               	addwf	??_FlashReadUart& (0+255),w,b
  6244  000970  6ED9               	movwf	fsr2l,c
  6245  000972  0E00               	movlw	high FlashReadUart@TxMsg
  6246  000974  2161               	addwfc	(??_FlashReadUart+1)& (0+255),w,b
  6247  000976  6EDA               	movwf	fsr2h,c
  6248  000978  C0BB  F062         	movff	FlashReadUart@idx,??_FlashReadUart+2
  6249  00097C  C0BC  F063         	movff	FlashReadUart@idx+1,??_FlashReadUart+3
  6250  000980  0E00               	movlw	0
  6251  000982  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  6252  000984  0EFF               	movlw	255
  6253  000986  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  6254  000988  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  6255  00098A  51F9               	movf	_readAddress& (0+255),w,b
  6256  00098C  2562               	addwf	(??_FlashReadUart+2)& (0+255),w,b
  6257  00098E  6E18               	movwf	FLASH_ReadByte@flashAddr,c
  6258  000990  51FA               	movf	(_readAddress+1)& (0+255),w,b
  6259  000992  2163               	addwfc	(??_FlashReadUart+3)& (0+255),w,b
  6260  000994  6E19               	movwf	FLASH_ReadByte@flashAddr+1,c
  6261  000996  51FB               	movf	(_readAddress+2)& (0+255),w,b
  6262  000998  2164               	addwfc	(??_FlashReadUart+4)& (0+255),w,b
  6263  00099A  6E1A               	movwf	FLASH_ReadByte@flashAddr+2,c
  6264  00099C  51FC               	movf	(_readAddress+3)& (0+255),w,b
  6265  00099E  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  6266  0009A0  6E1B               	movwf	FLASH_ReadByte@flashAddr+3,c
  6267  0009A2  EC44  F01C         	call	_FLASH_ReadByte	;wreg free
  6268  0009A6  6EDF               	movwf	indf2,c
  6269  0009A8  0100               	movlb	0	; () banked
  6270  0009AA  4BBB               	infsnz	FlashReadUart@idx& (0+255),f,b
  6271  0009AC  2BBC               	incf	(FlashReadUart@idx+1)& (0+255),f,b
  6272  0009AE  D7D0               	goto	l7758
  6273  0009B0                     u7950:
  6274  0009B0                     l7768:
  6275                           
  6276                           ; BSR set to: 0
  6277                           ;FlashApp.c: 138: }
  6278                           ;FlashApp.c: 140: readAddress += (64);
  6279  0009B0  0E40               	movlw	64
  6280  0009B2  27F9               	addwf	_readAddress& (0+255),f,b
  6281  0009B4  0E00               	movlw	0
  6282  0009B6  23FA               	addwfc	(_readAddress+1)& (0+255),f,b
  6283  0009B8  23FB               	addwfc	(_readAddress+2)& (0+255),f,b
  6284  0009BA  23FC               	addwfc	(_readAddress+3)& (0+255),f,b
  6285                           
  6286                           ;FlashApp.c: 141: if (readAddress >= 0x7FF0)
  6287  0009BC  51FC               	movf	(_readAddress+3)& (0+255),w,b
  6288  0009BE  11FB               	iorwf	(_readAddress+2)& (0+255),w,b
  6289  0009C0  E106               	bnz	u7960
  6290  0009C2  0EF0               	movlw	240
  6291  0009C4  5DF9               	subwf	_readAddress& (0+255),w,b
  6292  0009C6  0E7F               	movlw	127
  6293  0009C8  59FA               	subwfb	(_readAddress+1)& (0+255),w,b
  6294  0009CA  A0D8               	btfss	status,0,c
  6295  0009CC  D008               	goto	l329
  6296  0009CE                     u7960:
  6297                           
  6298                           ; BSR set to: 0
  6299                           ;FlashApp.c: 142: {
  6300                           ;FlashApp.c: 143: readAddress = 0x4000;
  6301  0009CE  0E00               	movlw	0
  6302  0009D0  6FF9               	movwf	_readAddress& (0+255),b
  6303  0009D2  0E40               	movlw	64
  6304  0009D4  6FFA               	movwf	(_readAddress+1)& (0+255),b
  6305  0009D6  0E00               	movlw	0
  6306  0009D8  6FFB               	movwf	(_readAddress+2)& (0+255),b
  6307  0009DA  0E00               	movlw	0
  6308  0009DC  6FFC               	movwf	(_readAddress+3)& (0+255),b
  6309  0009DE                     l329:
  6310                           
  6311                           ; BSR set to: 0
  6312                           ;FlashApp.c: 144: }
  6313                           ;FlashApp.c: 145: TxMsg[(64) + (0x4)] = crc8(TxMsg, (64) + (0x4));
  6314                           
  6315                           ; BSR set to: 0
  6316  0009DE  0E6C               	movlw	low FlashReadUart@TxMsg
  6317  0009E0  6E18               	movwf	crc8@dataArray,c
  6318  0009E2  0E00               	movlw	high FlashReadUart@TxMsg
  6319  0009E4  6E19               	movwf	crc8@dataArray+1,c
  6320  0009E6  0E00               	movlw	0
  6321  0009E8  6E1B               	movwf	crc8@dataSize+1,c
  6322  0009EA  0E44               	movlw	68
  6323  0009EC  6E1A               	movwf	crc8@dataSize,c
  6324  0009EE  ECB8  F017         	call	_crc8	;wreg free
  6325  0009F2  0100               	movlb	0	; () banked
  6326  0009F4  6FB0               	movwf	(FlashReadUart@TxMsg+68)& (0+255),b
  6327                           
  6328                           ; BSR set to: 0
  6329                           ;FlashApp.c: 147: WriteUartMessage(TxMsg, (64) + (0x4) + 1);
  6330  0009F6  0E6C               	movlw	low FlashReadUart@TxMsg
  6331  0009F8  6E19               	movwf	WriteUartMessage@dataBuf,c
  6332  0009FA  0E00               	movlw	high FlashReadUart@TxMsg
  6333  0009FC  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  6334  0009FE  0E00               	movlw	0
  6335  000A00  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  6336  000A02  0E45               	movlw	69
  6337  000A04  6E1B               	movwf	WriteUartMessage@dataSize,c
  6338  000A06  ECFF  F019         	call	_WriteUartMessage	;wreg free
  6339                           
  6340                           ;FlashApp.c: 149: if(numOfValidateSamples)
  6341  000A0A  5030               	movf	_numOfValidateSamples,w,c
  6342  000A0C  1031               	iorwf	_numOfValidateSamples+1,w,c
  6343  000A0E  1032               	iorwf	_numOfValidateSamples+2,w,c
  6344  000A10  1033               	iorwf	_numOfValidateSamples+3,w,c
  6345  000A12  B4D8               	btfsc	status,2,c
  6346  000A14  D01A               	goto	l332
  6347                           
  6348                           ;FlashApp.c: 150: {
  6349                           ;FlashApp.c: 151: if (numOfReadSamples < ((0x4000-0x7FF0)/(64)))
  6350  000A16  043C               	decf	_numOfReadSamples,w,c
  6351  000A18  0EFF               	movlw	255
  6352  000A1A  583D               	subwfb	_numOfReadSamples+1,w,c
  6353  000A1C  0EFF               	movlw	255
  6354  000A1E  583E               	subwfb	_numOfReadSamples+2,w,c
  6355  000A20  0EFF               	movlw	255
  6356  000A22  583F               	subwfb	_numOfReadSamples+3,w,c
  6357  000A24  B0D8               	btfsc	status,0,c
  6358  000A26  D006               	goto	l331
  6359                           
  6360                           ;FlashApp.c: 152: {
  6361                           ;FlashApp.c: 153: numOfReadSamples++;
  6362  000A28  0E01               	movlw	1
  6363  000A2A  263C               	addwf	_numOfReadSamples,f,c
  6364  000A2C  0E00               	movlw	0
  6365  000A2E  223D               	addwfc	_numOfReadSamples+1,f,c
  6366  000A30  223E               	addwfc	_numOfReadSamples+2,f,c
  6367  000A32  223F               	addwfc	_numOfReadSamples+3,f,c
  6368  000A34                     l331:
  6369                           
  6370                           ;FlashApp.c: 154: }
  6371                           ;FlashApp.c: 155: if (numOfValidateSamples > 0)
  6372  000A34  5030               	movf	_numOfValidateSamples,w,c
  6373  000A36  1031               	iorwf	_numOfValidateSamples+1,w,c
  6374  000A38  1032               	iorwf	_numOfValidateSamples+2,w,c
  6375  000A3A  1033               	iorwf	_numOfValidateSamples+3,w,c
  6376  000A3C  B4D8               	btfsc	status,2,c
  6377  000A3E  D005               	goto	l332
  6378                           
  6379                           ;FlashApp.c: 156: {
  6380                           ;FlashApp.c: 157: numOfValidateSamples--;
  6381  000A40  0630               	decf	_numOfValidateSamples,f,c
  6382  000A42  0E00               	movlw	0
  6383  000A44  5A31               	subwfb	_numOfValidateSamples+1,f,c
  6384  000A46  5A32               	subwfb	_numOfValidateSamples+2,f,c
  6385  000A48  5A33               	subwfb	_numOfValidateSamples+3,f,c
  6386  000A4A                     l332:
  6387  000A4A  0100               	movlb	0	; () banked
  6388  000A4C  4BB9               	infsnz	FlashReadUart@j& (0+255),f,b
  6389  000A4E  2BBA               	incf	(FlashReadUart@j+1)& (0+255),f,b
  6390  000A50                     l325:
  6391                           
  6392                           ; BSR set to: 0
  6393                           
  6394                           ; BSR set to: 0
  6395  000A50  502C               	movf	FlashReadUart@numOfSampleToRead,w,c
  6396  000A52  5DB9               	subwf	FlashReadUart@j& (0+255),w,b
  6397  000A54  51BA               	movf	(FlashReadUart@j+1)& (0+255),w,b
  6398  000A56  0A80               	xorlw	128
  6399  000A58  6F60               	movwf	??_FlashReadUart& (0+255),b
  6400  000A5A  502D               	movf	FlashReadUart@numOfSampleToRead+1,w,c
  6401  000A5C  0A80               	xorlw	128
  6402  000A5E  5960               	subwfb	??_FlashReadUart& (0+255),w,b
  6403  000A60  B0D8               	btfsc	status,0,c
  6404  000A62  0012               	return	
  6405  000A64  D771               	goto	l326
  6406  000A66                     __end_of_FlashReadUart:
  6407                           	opt stack 0
  6408                           tosu	equ	0xFFF
  6409                           tosh	equ	0xFFE
  6410                           tosl	equ	0xFFD
  6411                           pclath	equ	0xFFA
  6412                           tblptru	equ	0xFF8
  6413                           tblptrh	equ	0xFF7
  6414                           tblptrl	equ	0xFF6
  6415                           tablat	equ	0xFF5
  6416                           prodh	equ	0xFF4
  6417                           prodl	equ	0xFF3
  6418                           intcon	equ	0xFF2
  6419                           postinc0	equ	0xFEE
  6420                           plusw0	equ	0xFEB
  6421                           wreg	equ	0xFE8
  6422                           indf1	equ	0xFE7
  6423                           postdec1	equ	0xFE5
  6424                           fsr1h	equ	0xFE2
  6425                           fsr1l	equ	0xFE1
  6426                           indf2	equ	0xFDF
  6427                           postinc2	equ	0xFDE
  6428                           postdec2	equ	0xFDD
  6429                           plusw2	equ	0xFDB
  6430                           fsr2h	equ	0xFDA
  6431                           fsr2l	equ	0xFD9
  6432                           status	equ	0xFD8
  6433                           
  6434 ;; *************** function _abs *****************
  6435 ;; Defined at:
  6436 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  6437 ;; Parameters:    Size  Location     Type
  6438 ;;  a               2   23[COMRAM] int 
  6439 ;; Auto vars:     Size  Location     Type
  6440 ;;		None
  6441 ;; Return value:  Size  Location     Type
  6442 ;;                  2   23[COMRAM] int 
  6443 ;; Registers used:
  6444 ;;		wreg, status,2, status,0
  6445 ;; Tracked objects:
  6446 ;;		On entry : 0/0
  6447 ;;		On exit  : 0/0
  6448 ;;		Unchanged: 0/0
  6449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6450 ;;      Params:         2       0       0       0       0       0       0
  6451 ;;      Locals:         0       0       0       0       0       0       0
  6452 ;;      Temps:          2       0       0       0       0       0       0
  6453 ;;      Totals:         4       0       0       0       0       0       0
  6454 ;;Total ram usage:        4 bytes
  6455 ;; Hardware stack levels used:    1
  6456 ;; Hardware stack levels required when called:    3
  6457 ;; This function calls:
  6458 ;;		Nothing
  6459 ;; This function is called by:
  6460 ;;		_FlashReadUart
  6461 ;; This function uses a non-reentrant model
  6462 ;;
  6463                           
  6464                           	psect	text29
  6465  003636                     __ptext29:
  6466                           	opt stack 0
  6467  003636                     _abs:
  6468                           	opt stack 24
  6469                           
  6470                           ;incstack = 0
  6471  003636  AE19               	btfss	abs@a+1,7,c
  6472  003638  D00D               	goto	l1511
  6473  00363A  C018  F01A         	movff	abs@a,??_abs
  6474  00363E  C019  F01B         	movff	abs@a+1,??_abs+1
  6475  003642  1E1A               	comf	??_abs,f,c
  6476  003644  1E1B               	comf	??_abs+1,f,c
  6477  003646  4A1A               	infsnz	??_abs,f,c
  6478  003648  2A1B               	incf	??_abs+1,f,c
  6479  00364A  C01A  F018         	movff	??_abs,?_abs
  6480  00364E  C01B  F019         	movff	??_abs+1,?_abs+1
  6481  003652  0012               	return	
  6482  003654                     l1511:
  6483  003654  C018  F018         	movff	abs@a,?_abs
  6484  003658  C019  F019         	movff	abs@a+1,?_abs+1
  6485  00365C  0012               	return		;funcret
  6486  00365E                     __end_of_abs:
  6487                           	opt stack 0
  6488                           tosu	equ	0xFFF
  6489                           tosh	equ	0xFFE
  6490                           tosl	equ	0xFFD
  6491                           pclath	equ	0xFFA
  6492                           tblptru	equ	0xFF8
  6493                           tblptrh	equ	0xFF7
  6494                           tblptrl	equ	0xFF6
  6495                           tablat	equ	0xFF5
  6496                           prodh	equ	0xFF4
  6497                           prodl	equ	0xFF3
  6498                           intcon	equ	0xFF2
  6499                           postinc0	equ	0xFEE
  6500                           plusw0	equ	0xFEB
  6501                           wreg	equ	0xFE8
  6502                           indf1	equ	0xFE7
  6503                           postdec1	equ	0xFE5
  6504                           fsr1h	equ	0xFE2
  6505                           fsr1l	equ	0xFE1
  6506                           indf2	equ	0xFDF
  6507                           postinc2	equ	0xFDE
  6508                           postdec2	equ	0xFDD
  6509                           plusw2	equ	0xFDB
  6510                           fsr2h	equ	0xFDA
  6511                           fsr2l	equ	0xFD9
  6512                           status	equ	0xFD8
  6513                           
  6514 ;; *************** function _FLASH_ReadByte *****************
  6515 ;; Defined at:
  6516 ;;		line 58 in file "mcc_generated_files/memory.c"
  6517 ;; Parameters:    Size  Location     Type
  6518 ;;  flashAddr       4   23[COMRAM] unsigned long 
  6519 ;; Auto vars:     Size  Location     Type
  6520 ;;		None
  6521 ;; Return value:  Size  Location     Type
  6522 ;;                  1    wreg      unsigned char 
  6523 ;; Registers used:
  6524 ;;		wreg, status,2
  6525 ;; Tracked objects:
  6526 ;;		On entry : 0/0
  6527 ;;		On exit  : 0/0
  6528 ;;		Unchanged: 0/0
  6529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6530 ;;      Params:         4       0       0       0       0       0       0
  6531 ;;      Locals:         0       0       0       0       0       0       0
  6532 ;;      Temps:          0       0       0       0       0       0       0
  6533 ;;      Totals:         4       0       0       0       0       0       0
  6534 ;;Total ram usage:        4 bytes
  6535 ;; Hardware stack levels used:    1
  6536 ;; Hardware stack levels required when called:    3
  6537 ;; This function calls:
  6538 ;;		Nothing
  6539 ;; This function is called by:
  6540 ;;		_FlashReadUart
  6541 ;;		_FlashTest
  6542 ;;		_FLASH_ReadWord
  6543 ;;		_FLASH_WriteByte
  6544 ;; This function uses a non-reentrant model
  6545 ;;
  6546                           
  6547                           	psect	text30
  6548  003888                     __ptext30:
  6549                           	opt stack 0
  6550  003888                     _FLASH_ReadByte:
  6551                           	opt stack 24
  6552                           
  6553                           ;memory.c: 60: TBLPTRU = (uint8_t)((flashAddr & 0x00FF0000) >> 16);
  6554                           
  6555                           ;incstack = 0
  6556  003888  C01A  FFF8         	movff	FLASH_ReadByte@flashAddr+2,tblptru	;volatile
  6557                           
  6558                           ;memory.c: 61: TBLPTRH = (uint8_t)((flashAddr & 0x0000FF00)>> 8);
  6559  00388C  C019  FFF7         	movff	FLASH_ReadByte@flashAddr+1,tblptrh	;volatile
  6560                           
  6561                           ;memory.c: 62: TBLPTRL = (uint8_t)(flashAddr & 0x000000FF);
  6562  003890  C018  FFF6         	movff	FLASH_ReadByte@flashAddr,tblptrl	;volatile
  6563  003894  0008               	tblrd		*	;# 
  6564                           
  6565                           ;memory.c: 66: return (TABLAT);
  6566  003896  50F5               	movf	tablat,w,c	;volatile
  6567  003898  0012               	return	
  6568  00389A                     __end_of_FLASH_ReadByte:
  6569                           	opt stack 0
  6570                           tosu	equ	0xFFF
  6571                           tosh	equ	0xFFE
  6572                           tosl	equ	0xFFD
  6573                           pclath	equ	0xFFA
  6574                           tblptru	equ	0xFF8
  6575                           tblptrh	equ	0xFF7
  6576                           tblptrl	equ	0xFF6
  6577                           tablat	equ	0xFF5
  6578                           prodh	equ	0xFF4
  6579                           prodl	equ	0xFF3
  6580                           intcon	equ	0xFF2
  6581                           postinc0	equ	0xFEE
  6582                           plusw0	equ	0xFEB
  6583                           wreg	equ	0xFE8
  6584                           indf1	equ	0xFE7
  6585                           postdec1	equ	0xFE5
  6586                           fsr1h	equ	0xFE2
  6587                           fsr1l	equ	0xFE1
  6588                           indf2	equ	0xFDF
  6589                           postinc2	equ	0xFDE
  6590                           postdec2	equ	0xFDD
  6591                           plusw2	equ	0xFDB
  6592                           fsr2h	equ	0xFDA
  6593                           fsr2l	equ	0xFD9
  6594                           status	equ	0xFD8
  6595                           
  6596 ;; *************** function _FlashReadCondition *****************
  6597 ;; Defined at:
  6598 ;;		line 178 in file "FlashApp.c"
  6599 ;; Parameters:    Size  Location     Type
  6600 ;;		None
  6601 ;; Auto vars:     Size  Location     Type
  6602 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  6603 ;; Return value:  Size  Location     Type
  6604 ;;                  1    wreg      void 
  6605 ;; Registers used:
  6606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6607 ;; Tracked objects:
  6608 ;;		On entry : 0/0
  6609 ;;		On exit  : 0/0
  6610 ;;		Unchanged: 0/0
  6611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6612 ;;      Params:         0       0       0       0       0       0       0
  6613 ;;      Locals:         0       9       0       0       0       0       0
  6614 ;;      Temps:          4       0       0       0       0       0       0
  6615 ;;      Totals:         4       9       0       0       0       0       0
  6616 ;;Total ram usage:       13 bytes
  6617 ;; Hardware stack levels used:    1
  6618 ;; Hardware stack levels required when called:    5
  6619 ;; This function calls:
  6620 ;;		_WriteUartMessage
  6621 ;;		_ZeroArray
  6622 ;;		_crc8
  6623 ;;		_make8
  6624 ;; This function is called by:
  6625 ;;		_GroupFlashMemory
  6626 ;; This function uses a non-reentrant model
  6627 ;;
  6628                           
  6629                           	psect	text31
  6630  0018D8                     __ptext31:
  6631                           	opt stack 0
  6632  0018D8                     _FlashReadCondition:
  6633                           	opt stack 23
  6634                           
  6635                           ;FlashApp.c: 181: char TxMsg[4 + (0x4) + 1];
  6636                           ;FlashApp.c: 182: ZeroArray(TxMsg, 4 + (0x4) + 1);
  6637                           
  6638                           ;incstack = 0
  6639  0018D8  0E60               	movlw	low FlashReadCondition@TxMsg
  6640  0018DA  6E20               	movwf	ZeroArray@array,c
  6641  0018DC  0E00               	movlw	high FlashReadCondition@TxMsg
  6642  0018DE  6E21               	movwf	ZeroArray@array+1,c
  6643  0018E0  0E00               	movlw	0
  6644  0018E2  6E23               	movwf	ZeroArray@size+1,c
  6645  0018E4  0E09               	movlw	9
  6646  0018E6  6E22               	movwf	ZeroArray@size,c
  6647  0018E8  ECCB  F01B         	call	_ZeroArray	;wreg free
  6648                           
  6649                           ;FlashApp.c: 185: TxMsg[(0)] = (0x24);
  6650  0018EC  0E24               	movlw	36
  6651  0018EE  0100               	movlb	0	; () banked
  6652  0018F0  6F60               	movwf	FlashReadCondition@TxMsg& (0+255),b
  6653                           
  6654                           ; BSR set to: 0
  6655                           ;FlashApp.c: 186: TxMsg[(1)] = FLASH_MSG;
  6656  0018F2  0E05               	movlw	5
  6657  0018F4  6F61               	movwf	(FlashReadCondition@TxMsg+1)& (0+255),b
  6658                           
  6659                           ; BSR set to: 0
  6660                           ;FlashApp.c: 187: TxMsg[(2)] = FLASH_READ_CONDITION;
  6661  0018F6  0E52               	movlw	82
  6662  0018F8  6F62               	movwf	(FlashReadCondition@TxMsg+2)& (0+255),b
  6663                           
  6664                           ; BSR set to: 0
  6665                           ;FlashApp.c: 188: TxMsg[(3)] = 4;
  6666  0018FA  0E04               	movlw	4
  6667  0018FC  6F63               	movwf	(FlashReadCondition@TxMsg+3)& (0+255),b
  6668                           
  6669                           ; BSR set to: 0
  6670                           ;FlashApp.c: 193: TxMsg[(0x4) + 0] = make8(0x7FF0 - 0x4000,1);
  6671  0018FE  0EF0               	movlw	240
  6672  001900  6E18               	movwf	make8@data,c
  6673  001902  0E3F               	movlw	63
  6674  001904  6E19               	movwf	make8@data+1,c
  6675  001906  0E00               	movlw	0
  6676  001908  6E1A               	movwf	make8@data+2,c
  6677  00190A  0E00               	movlw	0
  6678  00190C  6E1B               	movwf	make8@data+3,c
  6679  00190E  0E01               	movlw	1
  6680  001910  6E1C               	movwf	make8@dataLocation,c
  6681  001912  EC31  F016         	call	_make8	;wreg free
  6682  001916  0100               	movlb	0	; () banked
  6683  001918  6F64               	movwf	(FlashReadCondition@TxMsg+4)& (0+255),b
  6684                           
  6685                           ; BSR set to: 0
  6686                           ;FlashApp.c: 194: TxMsg[(0x4) + 1] = make8(0x7FF0 - 0x4000,0);
  6687  00191A  0EF0               	movlw	240
  6688  00191C  6E18               	movwf	make8@data,c
  6689  00191E  0E3F               	movlw	63
  6690  001920  6E19               	movwf	make8@data+1,c
  6691  001922  0E00               	movlw	0
  6692  001924  6E1A               	movwf	make8@data+2,c
  6693  001926  0E00               	movlw	0
  6694  001928  6E1B               	movwf	make8@data+3,c
  6695  00192A  0E00               	movlw	0
  6696  00192C  6E1C               	movwf	make8@dataLocation,c
  6697  00192E  EC31  F016         	call	_make8	;wreg free
  6698  001932  0100               	movlb	0	; () banked
  6699  001934  6F65               	movwf	(FlashReadCondition@TxMsg+5)& (0+255),b
  6700                           
  6701                           ; BSR set to: 0
  6702                           ;FlashApp.c: 197: TxMsg[(0x4) + 2] = make8(0x7FF0 - writeAddress,1);
  6703  001936  C040  F024         	movff	_writeAddress,??_FlashReadCondition
  6704  00193A  C041  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  6705  00193E  C042  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  6706  001942  C043  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  6707  001946  1E24               	comf	??_FlashReadCondition,f,c
  6708  001948  1E25               	comf	??_FlashReadCondition+1,f,c
  6709  00194A  1E26               	comf	??_FlashReadCondition+2,f,c
  6710  00194C  1E27               	comf	??_FlashReadCondition+3,f,c
  6711  00194E  2A24               	incf	??_FlashReadCondition,f,c
  6712  001950  0E00               	movlw	0
  6713  001952  2225               	addwfc	??_FlashReadCondition+1,f,c
  6714  001954  2226               	addwfc	??_FlashReadCondition+2,f,c
  6715  001956  2227               	addwfc	??_FlashReadCondition+3,f,c
  6716  001958  0EF0               	movlw	240
  6717  00195A  2424               	addwf	??_FlashReadCondition,w,c
  6718  00195C  6E18               	movwf	make8@data,c
  6719  00195E  0E7F               	movlw	127
  6720  001960  2025               	addwfc	??_FlashReadCondition+1,w,c
  6721  001962  6E19               	movwf	make8@data+1,c
  6722  001964  0E00               	movlw	0
  6723  001966  2026               	addwfc	??_FlashReadCondition+2,w,c
  6724  001968  6E1A               	movwf	make8@data+2,c
  6725  00196A  0E00               	movlw	0
  6726  00196C  2027               	addwfc	??_FlashReadCondition+3,w,c
  6727  00196E  6E1B               	movwf	make8@data+3,c
  6728  001970  0E01               	movlw	1
  6729  001972  6E1C               	movwf	make8@dataLocation,c
  6730  001974  EC31  F016         	call	_make8	;wreg free
  6731  001978  0100               	movlb	0	; () banked
  6732  00197A  6F66               	movwf	(FlashReadCondition@TxMsg+6)& (0+255),b
  6733                           
  6734                           ; BSR set to: 0
  6735                           ;FlashApp.c: 198: TxMsg[(0x4) + 3] = make8(0x7FF0 - writeAddress,0);
  6736  00197C  C040  F024         	movff	_writeAddress,??_FlashReadCondition
  6737  001980  C041  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  6738  001984  C042  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  6739  001988  C043  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  6740  00198C  1E24               	comf	??_FlashReadCondition,f,c
  6741  00198E  1E25               	comf	??_FlashReadCondition+1,f,c
  6742  001990  1E26               	comf	??_FlashReadCondition+2,f,c
  6743  001992  1E27               	comf	??_FlashReadCondition+3,f,c
  6744  001994  2A24               	incf	??_FlashReadCondition,f,c
  6745  001996  0E00               	movlw	0
  6746  001998  2225               	addwfc	??_FlashReadCondition+1,f,c
  6747  00199A  2226               	addwfc	??_FlashReadCondition+2,f,c
  6748  00199C  2227               	addwfc	??_FlashReadCondition+3,f,c
  6749  00199E  0EF0               	movlw	240
  6750  0019A0  2424               	addwf	??_FlashReadCondition,w,c
  6751  0019A2  6E18               	movwf	make8@data,c
  6752  0019A4  0E7F               	movlw	127
  6753  0019A6  2025               	addwfc	??_FlashReadCondition+1,w,c
  6754  0019A8  6E19               	movwf	make8@data+1,c
  6755  0019AA  0E00               	movlw	0
  6756  0019AC  2026               	addwfc	??_FlashReadCondition+2,w,c
  6757  0019AE  6E1A               	movwf	make8@data+2,c
  6758  0019B0  0E00               	movlw	0
  6759  0019B2  2027               	addwfc	??_FlashReadCondition+3,w,c
  6760  0019B4  6E1B               	movwf	make8@data+3,c
  6761  0019B6  0E00               	movlw	0
  6762  0019B8  6E1C               	movwf	make8@dataLocation,c
  6763  0019BA  EC31  F016         	call	_make8	;wreg free
  6764  0019BE  0100               	movlb	0	; () banked
  6765  0019C0  6F67               	movwf	(FlashReadCondition@TxMsg+7)& (0+255),b
  6766                           
  6767                           ;FlashApp.c: 200: TxMsg[4 + (0x4)] = crc8(TxMsg, 4 + (0x4));
  6768  0019C2  0E60               	movlw	low FlashReadCondition@TxMsg
  6769  0019C4  6E18               	movwf	crc8@dataArray,c
  6770  0019C6  0E00               	movlw	high FlashReadCondition@TxMsg
  6771  0019C8  6E19               	movwf	crc8@dataArray+1,c
  6772  0019CA  0E00               	movlw	0
  6773  0019CC  6E1B               	movwf	crc8@dataSize+1,c
  6774  0019CE  0E08               	movlw	8
  6775  0019D0  6E1A               	movwf	crc8@dataSize,c
  6776  0019D2  ECB8  F017         	call	_crc8	;wreg free
  6777  0019D6  0100               	movlb	0	; () banked
  6778  0019D8  6F68               	movwf	(FlashReadCondition@TxMsg+8)& (0+255),b
  6779                           
  6780                           ; BSR set to: 0
  6781                           ;FlashApp.c: 202: WriteUartMessage(TxMsg, 4 + (0x4) + 1);
  6782  0019DA  0E60               	movlw	low FlashReadCondition@TxMsg
  6783  0019DC  6E19               	movwf	WriteUartMessage@dataBuf,c
  6784  0019DE  0E00               	movlw	high FlashReadCondition@TxMsg
  6785  0019E0  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  6786  0019E2  0E00               	movlw	0
  6787  0019E4  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  6788  0019E6  0E09               	movlw	9
  6789  0019E8  6E1B               	movwf	WriteUartMessage@dataSize,c
  6790  0019EA  ECFF  F019         	call	_WriteUartMessage	;wreg free
  6791  0019EE  0012               	return		;funcret
  6792  0019F0                     __end_of_FlashReadCondition:
  6793                           	opt stack 0
  6794                           tosu	equ	0xFFF
  6795                           tosh	equ	0xFFE
  6796                           tosl	equ	0xFFD
  6797                           pclath	equ	0xFFA
  6798                           tblptru	equ	0xFF8
  6799                           tblptrh	equ	0xFF7
  6800                           tblptrl	equ	0xFF6
  6801                           tablat	equ	0xFF5
  6802                           prodh	equ	0xFF4
  6803                           prodl	equ	0xFF3
  6804                           intcon	equ	0xFF2
  6805                           postinc0	equ	0xFEE
  6806                           plusw0	equ	0xFEB
  6807                           wreg	equ	0xFE8
  6808                           indf1	equ	0xFE7
  6809                           postdec1	equ	0xFE5
  6810                           fsr1h	equ	0xFE2
  6811                           fsr1l	equ	0xFE1
  6812                           indf2	equ	0xFDF
  6813                           postinc2	equ	0xFDE
  6814                           postdec2	equ	0xFDD
  6815                           plusw2	equ	0xFDB
  6816                           fsr2h	equ	0xFDA
  6817                           fsr2l	equ	0xFD9
  6818                           status	equ	0xFD8
  6819                           
  6820 ;; *************** function _FlashEreaseMem *****************
  6821 ;; Defined at:
  6822 ;;		line 168 in file "FlashApp.c"
  6823 ;; Parameters:    Size  Location     Type
  6824 ;;		None
  6825 ;; Auto vars:     Size  Location     Type
  6826 ;;		None
  6827 ;; Return value:  Size  Location     Type
  6828 ;;                  1    wreg      void 
  6829 ;; Registers used:
  6830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6831 ;; Tracked objects:
  6832 ;;		On entry : 0/0
  6833 ;;		On exit  : 0/0
  6834 ;;		Unchanged: 0/0
  6835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6836 ;;      Params:         0       0       0       0       0       0       0
  6837 ;;      Locals:         0       0       0       0       0       0       0
  6838 ;;      Temps:          0       0       0       0       0       0       0
  6839 ;;      Totals:         0       0       0       0       0       0       0
  6840 ;;Total ram usage:        0 bytes
  6841 ;; Hardware stack levels used:    1
  6842 ;; Hardware stack levels required when called:    6
  6843 ;; This function calls:
  6844 ;;		_SendAckMessage
  6845 ;;		_ZeroArray
  6846 ;; This function is called by:
  6847 ;;		_GroupFlashMemory
  6848 ;; This function uses a non-reentrant model
  6849 ;;
  6850                           
  6851                           	psect	text32
  6852  002ECC                     __ptext32:
  6853                           	opt stack 0
  6854  002ECC                     _FlashEreaseMem:
  6855                           	opt stack 22
  6856                           
  6857                           ;FlashApp.c: 170: writeAddress = 0x4000;
  6858                           
  6859                           ;incstack = 0
  6860  002ECC  0E00               	movlw	0
  6861  002ECE  6E40               	movwf	_writeAddress,c
  6862  002ED0  0E40               	movlw	64
  6863  002ED2  6E41               	movwf	_writeAddress+1,c
  6864  002ED4  0E00               	movlw	0
  6865  002ED6  6E42               	movwf	_writeAddress+2,c
  6866  002ED8  0E00               	movlw	0
  6867  002EDA  6E43               	movwf	_writeAddress+3,c
  6868                           
  6869                           ;FlashApp.c: 171: readAddress = 0x4000;
  6870  002EDC  0E00               	movlw	0
  6871  002EDE  0100               	movlb	0	; () banked
  6872  002EE0  6FF9               	movwf	_readAddress& (0+255),b
  6873  002EE2  0E40               	movlw	64
  6874  002EE4  6FFA               	movwf	(_readAddress+1)& (0+255),b
  6875  002EE6  0E00               	movlw	0
  6876  002EE8  6FFB               	movwf	(_readAddress+2)& (0+255),b
  6877  002EEA  0E00               	movlw	0
  6878  002EEC  6FFC               	movwf	(_readAddress+3)& (0+255),b
  6879                           
  6880                           ;FlashApp.c: 172: numOfValidateSamples = 0;
  6881  002EEE  0E00               	movlw	0
  6882  002EF0  6E30               	movwf	_numOfValidateSamples,c
  6883  002EF2  0E00               	movlw	0
  6884  002EF4  6E31               	movwf	_numOfValidateSamples+1,c
  6885  002EF6  0E00               	movlw	0
  6886  002EF8  6E32               	movwf	_numOfValidateSamples+2,c
  6887  002EFA  0E00               	movlw	0
  6888  002EFC  6E33               	movwf	_numOfValidateSamples+3,c
  6889                           
  6890                           ; BSR set to: 0
  6891                           ;FlashApp.c: 173: ZeroArray(sampleArray, (64)/sizeof(adc_result_t));
  6892  002EFE  0E6E               	movlw	low _sampleArray
  6893  002F00  6E20               	movwf	ZeroArray@array,c
  6894  002F02  0E01               	movlw	high _sampleArray
  6895  002F04  6E21               	movwf	ZeroArray@array+1,c
  6896  002F06  0E00               	movlw	0
  6897  002F08  6E23               	movwf	ZeroArray@size+1,c
  6898  002F0A  0E20               	movlw	32
  6899  002F0C  6E22               	movwf	ZeroArray@size,c
  6900  002F0E  ECCB  F01B         	call	_ZeroArray	;wreg free
  6901                           
  6902                           ;FlashApp.c: 174: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_EREASE_MEMORY
      +                          );
  6903  002F12  0E51               	movlw	81
  6904  002F14  6E24               	movwf	SendAckMessage@inRequest,c
  6905  002F16  0E05               	movlw	5
  6906  002F18  EC8F  F017         	call	_SendAckMessage
  6907  002F1C  0012               	return		;funcret
  6908  002F1E                     __end_of_FlashEreaseMem:
  6909                           	opt stack 0
  6910                           tosu	equ	0xFFF
  6911                           tosh	equ	0xFFE
  6912                           tosl	equ	0xFFD
  6913                           pclath	equ	0xFFA
  6914                           tblptru	equ	0xFF8
  6915                           tblptrh	equ	0xFF7
  6916                           tblptrl	equ	0xFF6
  6917                           tablat	equ	0xFF5
  6918                           prodh	equ	0xFF4
  6919                           prodl	equ	0xFF3
  6920                           intcon	equ	0xFF2
  6921                           postinc0	equ	0xFEE
  6922                           plusw0	equ	0xFEB
  6923                           wreg	equ	0xFE8
  6924                           indf1	equ	0xFE7
  6925                           postdec1	equ	0xFE5
  6926                           fsr1h	equ	0xFE2
  6927                           fsr1l	equ	0xFE1
  6928                           indf2	equ	0xFDF
  6929                           postinc2	equ	0xFDE
  6930                           postdec2	equ	0xFDD
  6931                           plusw2	equ	0xFDB
  6932                           fsr2h	equ	0xFDA
  6933                           fsr2l	equ	0xFD9
  6934                           status	equ	0xFD8
  6935                           
  6936 ;; *************** function _DacSetValue *****************
  6937 ;; Defined at:
  6938 ;;		line 42 in file "DacApp.c"
  6939 ;; Parameters:    Size  Location     Type
  6940 ;;  data            2   43[COMRAM] PTR unsigned char 
  6941 ;;		 -> rxMsgData(20), 
  6942 ;; Auto vars:     Size  Location     Type
  6943 ;;		None
  6944 ;; Return value:  Size  Location     Type
  6945 ;;                  1    wreg      void 
  6946 ;; Registers used:
  6947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6948 ;; Tracked objects:
  6949 ;;		On entry : 0/0
  6950 ;;		On exit  : 0/0
  6951 ;;		Unchanged: 0/0
  6952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6953 ;;      Params:         2       0       0       0       0       0       0
  6954 ;;      Locals:         0       0       0       0       0       0       0
  6955 ;;      Temps:          0       0       0       0       0       0       0
  6956 ;;      Totals:         2       0       0       0       0       0       0
  6957 ;;Total ram usage:        2 bytes
  6958 ;; Hardware stack levels used:    1
  6959 ;; Hardware stack levels required when called:    6
  6960 ;; This function calls:
  6961 ;;		_SendAckMessage
  6962 ;; This function is called by:
  6963 ;;		_GroupDAC
  6964 ;; This function uses a non-reentrant model
  6965 ;;
  6966                           
  6967                           	psect	text33
  6968  003900                     __ptext33:
  6969                           	opt stack 0
  6970  003900                     _DacSetValue:
  6971                           	opt stack 22
  6972                           
  6973                           ;DacApp.c: 52: SendAckMessage((MSG_GROUPS)DAC_MSG, (MSG_REQUEST)DAC_SET_VALUE);
  6974                           
  6975                           ;incstack = 0
  6976  003900  0E61               	movlw	97
  6977  003902  6E24               	movwf	SendAckMessage@inRequest,c
  6978  003904  0E06               	movlw	6
  6979  003906  EC8F  F017         	call	_SendAckMessage
  6980  00390A  0012               	return		;funcret
  6981  00390C                     __end_of_DacSetValue:
  6982                           	opt stack 0
  6983                           tosu	equ	0xFFF
  6984                           tosh	equ	0xFFE
  6985                           tosl	equ	0xFFD
  6986                           pclath	equ	0xFFA
  6987                           tblptru	equ	0xFF8
  6988                           tblptrh	equ	0xFF7
  6989                           tblptrl	equ	0xFF6
  6990                           tablat	equ	0xFF5
  6991                           prodh	equ	0xFF4
  6992                           prodl	equ	0xFF3
  6993                           intcon	equ	0xFF2
  6994                           postinc0	equ	0xFEE
  6995                           plusw0	equ	0xFEB
  6996                           wreg	equ	0xFE8
  6997                           indf1	equ	0xFE7
  6998                           postdec1	equ	0xFE5
  6999                           fsr1h	equ	0xFE2
  7000                           fsr1l	equ	0xFE1
  7001                           indf2	equ	0xFDF
  7002                           postinc2	equ	0xFDE
  7003                           postdec2	equ	0xFDD
  7004                           plusw2	equ	0xFDB
  7005                           fsr2h	equ	0xFDA
  7006                           fsr2l	equ	0xFD9
  7007                           status	equ	0xFD8
  7008                           
  7009 ;; *************** function _testLeds *****************
  7010 ;; Defined at:
  7011 ;;		line 43 in file "LedsApp.c"
  7012 ;; Parameters:    Size  Location     Type
  7013 ;;		None
  7014 ;; Auto vars:     Size  Location     Type
  7015 ;;  idx             2   44[COMRAM] int 
  7016 ;; Return value:  Size  Location     Type
  7017 ;;                  1    wreg      void 
  7018 ;; Registers used:
  7019 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7020 ;; Tracked objects:
  7021 ;;		On entry : 0/0
  7022 ;;		On exit  : 0/0
  7023 ;;		Unchanged: 0/0
  7024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7025 ;;      Params:         0       0       0       0       0       0       0
  7026 ;;      Locals:         2       0       0       0       0       0       0
  7027 ;;      Temps:          1       0       0       0       0       0       0
  7028 ;;      Totals:         3       0       0       0       0       0       0
  7029 ;;Total ram usage:        3 bytes
  7030 ;; Hardware stack levels used:    1
  7031 ;; Hardware stack levels required when called:    6
  7032 ;; This function calls:
  7033 ;;		_SendAckMessage
  7034 ;; This function is called by:
  7035 ;;		_GroupControlMcu
  7036 ;; This function uses a non-reentrant model
  7037 ;;
  7038                           
  7039                           	psect	text34
  7040  002A74                     __ptext34:
  7041                           	opt stack 0
  7042  002A74                     _testLeds:
  7043                           	opt stack 22
  7044                           
  7045                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  7046                           
  7047                           ;incstack = 0
  7048  002A74  0E00               	movlw	0
  7049  002A76  6E2E               	movwf	testLeds@idx+1,c
  7050  002A78  0E00               	movlw	0
  7051  002A7A  6E2D               	movwf	testLeds@idx,c
  7052  002A7C                     l7630:
  7053  002A7C  BE2E               	btfsc	testLeds@idx+1,7,c
  7054  002A7E  D006               	goto	l54
  7055  002A80  502E               	movf	testLeds@idx+1,w,c
  7056  002A82  E127               	bnz	l7644
  7057  002A84  0E0A               	movlw	10
  7058  002A86  5C2D               	subwf	testLeds@idx,w,c
  7059  002A88  B0D8               	btfsc	status,0,c
  7060  002A8A  D023               	goto	u7710
  7061  002A8C                     l54:
  7062                           
  7063                           ;LedsApp.c: 47: {
  7064                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  7065  002A8C  808B               	bsf	3979,0,c	;volatile
  7066                           
  7067                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  7068  002A8E  0E82               	movlw	130
  7069  002A90  6E2C               	movwf	??_testLeds& (0+255),c
  7070  002A92  0EDE               	movlw	222
  7071  002A94                     u8567:
  7072  002A94  2EE8               	decfsz	wreg,f,c
  7073  002A96  D7FE               	bra	u8567
  7074  002A98  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7075  002A9A  D7FC               	bra	u8567
  7076                           
  7077                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  7078  002A9C  888A               	bsf	3978,4,c	;volatile
  7079                           
  7080                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  7081  002A9E  0E82               	movlw	130
  7082  002AA0  6E2C               	movwf	??_testLeds& (0+255),c
  7083  002AA2  0EDE               	movlw	222
  7084  002AA4                     u8577:
  7085  002AA4  2EE8               	decfsz	wreg,f,c
  7086  002AA6  D7FE               	bra	u8577
  7087  002AA8  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7088  002AAA  D7FC               	bra	u8577
  7089                           
  7090                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  7091  002AAC  908B               	bcf	3979,0,c	;volatile
  7092                           
  7093                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  7094  002AAE  0E82               	movlw	130
  7095  002AB0  6E2C               	movwf	??_testLeds& (0+255),c
  7096  002AB2  0EDE               	movlw	222
  7097  002AB4                     u8587:
  7098  002AB4  2EE8               	decfsz	wreg,f,c
  7099  002AB6  D7FE               	bra	u8587
  7100  002AB8  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7101  002ABA  D7FC               	bra	u8587
  7102                           
  7103                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  7104  002ABC  988A               	bcf	3978,4,c	;volatile
  7105                           
  7106                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  7107  002ABE  0E82               	movlw	130
  7108  002AC0  6E2C               	movwf	??_testLeds& (0+255),c
  7109  002AC2  0EDE               	movlw	222
  7110  002AC4                     u8597:
  7111  002AC4  2EE8               	decfsz	wreg,f,c
  7112  002AC6  D7FE               	bra	u8597
  7113  002AC8  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7114  002ACA  D7FC               	bra	u8597
  7115  002ACC  4A2D               	infsnz	testLeds@idx,f,c
  7116  002ACE  2A2E               	incf	testLeds@idx+1,f,c
  7117  002AD0  D7D5               	goto	l7630
  7118  002AD2                     u7710:
  7119  002AD2                     l7644:
  7120                           
  7121                           ;LedsApp.c: 57: }
  7122                           ;LedsApp.c: 59: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_TEST_LEDS);
  7123  002AD2  0E14               	movlw	20
  7124  002AD4  6E24               	movwf	SendAckMessage@inRequest,c
  7125  002AD6  0E01               	movlw	1
  7126  002AD8  EC8F  F017         	call	_SendAckMessage
  7127  002ADC  0012               	return	
  7128  002ADE                     __end_of_testLeds:
  7129                           	opt stack 0
  7130                           tosu	equ	0xFFF
  7131                           tosh	equ	0xFFE
  7132                           tosl	equ	0xFFD
  7133                           pclath	equ	0xFFA
  7134                           tblptru	equ	0xFF8
  7135                           tblptrh	equ	0xFF7
  7136                           tblptrl	equ	0xFF6
  7137                           tablat	equ	0xFF5
  7138                           prodh	equ	0xFF4
  7139                           prodl	equ	0xFF3
  7140                           intcon	equ	0xFF2
  7141                           postinc0	equ	0xFEE
  7142                           plusw0	equ	0xFEB
  7143                           wreg	equ	0xFE8
  7144                           indf1	equ	0xFE7
  7145                           postdec1	equ	0xFE5
  7146                           fsr1h	equ	0xFE2
  7147                           fsr1l	equ	0xFE1
  7148                           indf2	equ	0xFDF
  7149                           postinc2	equ	0xFDE
  7150                           postdec2	equ	0xFDD
  7151                           plusw2	equ	0xFDB
  7152                           fsr2h	equ	0xFDA
  7153                           fsr2l	equ	0xFD9
  7154                           status	equ	0xFD8
  7155                           
  7156 ;; *************** function _ResetMcu *****************
  7157 ;; Defined at:
  7158 ;;		line 131 in file "SystemCommon.c"
  7159 ;; Parameters:    Size  Location     Type
  7160 ;;		None
  7161 ;; Auto vars:     Size  Location     Type
  7162 ;;		None
  7163 ;; Return value:  Size  Location     Type
  7164 ;;                  1    wreg      void 
  7165 ;; Registers used:
  7166 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7167 ;; Tracked objects:
  7168 ;;		On entry : 0/0
  7169 ;;		On exit  : 0/0
  7170 ;;		Unchanged: 0/0
  7171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7172 ;;      Params:         0       0       0       0       0       0       0
  7173 ;;      Locals:         0       0       0       0       0       0       0
  7174 ;;      Temps:          0       0       0       0       0       0       0
  7175 ;;      Totals:         0       0       0       0       0       0       0
  7176 ;;Total ram usage:        0 bytes
  7177 ;; Hardware stack levels used:    1
  7178 ;; Hardware stack levels required when called:    6
  7179 ;; This function calls:
  7180 ;;		_SendAckMessage
  7181 ;; This function is called by:
  7182 ;;		_GroupControlMcu
  7183 ;; This function uses a non-reentrant model
  7184 ;;
  7185                           
  7186                           	psect	text35
  7187  0038C8                     __ptext35:
  7188                           	opt stack 0
  7189  0038C8                     _ResetMcu:
  7190                           	opt stack 22
  7191                           
  7192                           ;SystemCommon.c: 134: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET
      +                          _MCU);
  7193                           
  7194                           ;incstack = 0
  7195  0038C8  0E11               	movlw	17
  7196  0038CA  6E24               	movwf	SendAckMessage@inRequest,c
  7197  0038CC  0E01               	movlw	1
  7198  0038CE  EC8F  F017         	call	_SendAckMessage
  7199  0038D2  00FF               	reset		;# 
  7200  0038D4  0012               	return		;funcret
  7201  0038D6                     __end_of_ResetMcu:
  7202                           	opt stack 0
  7203                           tosu	equ	0xFFF
  7204                           tosh	equ	0xFFE
  7205                           tosl	equ	0xFFD
  7206                           pclath	equ	0xFFA
  7207                           tblptru	equ	0xFF8
  7208                           tblptrh	equ	0xFF7
  7209                           tblptrl	equ	0xFF6
  7210                           tablat	equ	0xFF5
  7211                           prodh	equ	0xFF4
  7212                           prodl	equ	0xFF3
  7213                           intcon	equ	0xFF2
  7214                           postinc0	equ	0xFEE
  7215                           plusw0	equ	0xFEB
  7216                           wreg	equ	0xFE8
  7217                           indf1	equ	0xFE7
  7218                           postdec1	equ	0xFE5
  7219                           fsr1h	equ	0xFE2
  7220                           fsr1l	equ	0xFE1
  7221                           indf2	equ	0xFDF
  7222                           postinc2	equ	0xFDE
  7223                           postdec2	equ	0xFDD
  7224                           plusw2	equ	0xFDB
  7225                           fsr2h	equ	0xFDA
  7226                           fsr2l	equ	0xFD9
  7227                           status	equ	0xFD8
  7228                           
  7229 ;; *************** function _SetConversionResultFormat *****************
  7230 ;; Defined at:
  7231 ;;		line 38 in file "AdcApp.c"
  7232 ;; Parameters:    Size  Location     Type
  7233 ;;  data            2   43[COMRAM] PTR unsigned char 
  7234 ;; Auto vars:     Size  Location     Type
  7235 ;;		None
  7236 ;; Return value:  Size  Location     Type
  7237 ;;                  1    wreg      void 
  7238 ;; Registers used:
  7239 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7240 ;; Tracked objects:
  7241 ;;		On entry : 0/0
  7242 ;;		On exit  : 0/0
  7243 ;;		Unchanged: 0/0
  7244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7245 ;;      Params:         2       0       0       0       0       0       0
  7246 ;;      Locals:         0       0       0       0       0       0       0
  7247 ;;      Temps:          0       0       0       0       0       0       0
  7248 ;;      Totals:         2       0       0       0       0       0       0
  7249 ;;Total ram usage:        2 bytes
  7250 ;; Hardware stack levels used:    1
  7251 ;; Hardware stack levels required when called:    6
  7252 ;; This function calls:
  7253 ;;		_SendAckMessage
  7254 ;; This function is called by:
  7255 ;;		_GroupAdc
  7256 ;; This function uses a non-reentrant model
  7257 ;;
  7258                           
  7259                           	psect	text36
  7260  00390C                     __ptext36:
  7261                           	opt stack 0
  7262  00390C                     _SetConversionResultFormat:
  7263                           	opt stack 22
  7264                           
  7265                           ;AdcApp.c: 40: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CONVERSION_MODE);
  7266                           
  7267                           ;incstack = 0
  7268  00390C  0E33               	movlw	51
  7269  00390E  6E24               	movwf	SendAckMessage@inRequest,c
  7270  003910  0E03               	movlw	3
  7271  003912  EC8F  F017         	call	_SendAckMessage
  7272  003916  0012               	return		;funcret
  7273  003918                     __end_of_SetConversionResultFormat:
  7274                           	opt stack 0
  7275                           tosu	equ	0xFFF
  7276                           tosh	equ	0xFFE
  7277                           tosl	equ	0xFFD
  7278                           pclath	equ	0xFFA
  7279                           tblptru	equ	0xFF8
  7280                           tblptrh	equ	0xFF7
  7281                           tblptrl	equ	0xFF6
  7282                           tablat	equ	0xFF5
  7283                           prodh	equ	0xFF4
  7284                           prodl	equ	0xFF3
  7285                           intcon	equ	0xFF2
  7286                           postinc0	equ	0xFEE
  7287                           plusw0	equ	0xFEB
  7288                           wreg	equ	0xFE8
  7289                           indf1	equ	0xFE7
  7290                           postdec1	equ	0xFE5
  7291                           fsr1h	equ	0xFE2
  7292                           fsr1l	equ	0xFE1
  7293                           indf2	equ	0xFDF
  7294                           postinc2	equ	0xFDE
  7295                           postdec2	equ	0xFDD
  7296                           plusw2	equ	0xFDB
  7297                           fsr2h	equ	0xFDA
  7298                           fsr2l	equ	0xFD9
  7299                           status	equ	0xFD8
  7300                           
  7301 ;; *************** function _SetChannelMode *****************
  7302 ;; Defined at:
  7303 ;;		line 43 in file "AdcApp.c"
  7304 ;; Parameters:    Size  Location     Type
  7305 ;;  data            2   43[COMRAM] PTR unsigned char 
  7306 ;; Auto vars:     Size  Location     Type
  7307 ;;		None
  7308 ;; Return value:  Size  Location     Type
  7309 ;;                  1    wreg      void 
  7310 ;; Registers used:
  7311 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7312 ;; Tracked objects:
  7313 ;;		On entry : 0/0
  7314 ;;		On exit  : 0/0
  7315 ;;		Unchanged: 0/0
  7316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7317 ;;      Params:         2       0       0       0       0       0       0
  7318 ;;      Locals:         0       0       0       0       0       0       0
  7319 ;;      Temps:          0       0       0       0       0       0       0
  7320 ;;      Totals:         2       0       0       0       0       0       0
  7321 ;;Total ram usage:        2 bytes
  7322 ;; Hardware stack levels used:    1
  7323 ;; Hardware stack levels required when called:    6
  7324 ;; This function calls:
  7325 ;;		_SendAckMessage
  7326 ;; This function is called by:
  7327 ;;		_GroupAdc
  7328 ;; This function uses a non-reentrant model
  7329 ;;
  7330                           
  7331                           	psect	text37
  7332  00352C                     __ptext37:
  7333                           	opt stack 0
  7334  00352C                     _SetChannelMode:
  7335                           	opt stack 22
  7336                           
  7337                           ;AdcApp.c: 45: adcSampleMode = data[0];
  7338                           
  7339                           ;incstack = 0
  7340  00352C  C02C  FFD9         	movff	SetChannelMode@data,fsr2l
  7341  003530  C02D  FFDA         	movff	SetChannelMode@data+1,fsr2h
  7342  003534  50DF               	movf	indf2,w,c
  7343  003536  6E3B               	movwf	_adcSampleMode,c
  7344                           
  7345                           ;AdcApp.c: 46: if (adcSampleMode == SINGLE_CHANNEL)
  7346  003538  043B               	decf	_adcSampleMode,w,c
  7347  00353A  A4D8               	btfss	status,2,c
  7348  00353C  D009               	goto	l116
  7349                           
  7350                           ;AdcApp.c: 47: {
  7351                           ;AdcApp.c: 48: channel = data[1];
  7352  00353E  EE20 F001          	lfsr	2,1
  7353  003542  502C               	movf	SetChannelMode@data,w,c
  7354  003544  26D9               	addwf	fsr2l,f,c
  7355  003546  502D               	movf	SetChannelMode@data+1,w,c
  7356  003548  22DA               	addwfc	fsr2h,f,c
  7357  00354A  50DF               	movf	indf2,w,c
  7358  00354C  0100               	movlb	0	; () banked
  7359  00354E  6FD4               	movwf	_channel& (0+255),b
  7360  003550                     l116:
  7361                           
  7362                           ;AdcApp.c: 49: }
  7363                           ;AdcApp.c: 50: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CHANNEL_MODE);
  7364                           
  7365                           ; BSR set to: 0
  7366  003550  0E32               	movlw	50
  7367  003552  6E24               	movwf	SendAckMessage@inRequest,c
  7368  003554  0E03               	movlw	3
  7369  003556  EC8F  F017         	call	_SendAckMessage
  7370  00355A  0012               	return		;funcret
  7371  00355C                     __end_of_SetChannelMode:
  7372                           	opt stack 0
  7373                           tosu	equ	0xFFF
  7374                           tosh	equ	0xFFE
  7375                           tosl	equ	0xFFD
  7376                           pclath	equ	0xFFA
  7377                           tblptru	equ	0xFF8
  7378                           tblptrh	equ	0xFF7
  7379                           tblptrl	equ	0xFF6
  7380                           tablat	equ	0xFF5
  7381                           prodh	equ	0xFF4
  7382                           prodl	equ	0xFF3
  7383                           intcon	equ	0xFF2
  7384                           postinc0	equ	0xFEE
  7385                           plusw0	equ	0xFEB
  7386                           wreg	equ	0xFE8
  7387                           indf1	equ	0xFE7
  7388                           postdec1	equ	0xFE5
  7389                           fsr1h	equ	0xFE2
  7390                           fsr1l	equ	0xFE1
  7391                           indf2	equ	0xFDF
  7392                           postinc2	equ	0xFDE
  7393                           postdec2	equ	0xFDD
  7394                           plusw2	equ	0xFDB
  7395                           fsr2h	equ	0xFDA
  7396                           fsr2l	equ	0xFD9
  7397                           status	equ	0xFD8
  7398                           
  7399 ;; *************** function _SetAdcOperationMode *****************
  7400 ;; Defined at:
  7401 ;;		line 33 in file "AdcApp.c"
  7402 ;; Parameters:    Size  Location     Type
  7403 ;;  data            2   43[COMRAM] PTR unsigned char 
  7404 ;; Auto vars:     Size  Location     Type
  7405 ;;		None
  7406 ;; Return value:  Size  Location     Type
  7407 ;;                  1    wreg      void 
  7408 ;; Registers used:
  7409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7410 ;; Tracked objects:
  7411 ;;		On entry : 0/0
  7412 ;;		On exit  : 0/0
  7413 ;;		Unchanged: 0/0
  7414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7415 ;;      Params:         2       0       0       0       0       0       0
  7416 ;;      Locals:         0       0       0       0       0       0       0
  7417 ;;      Temps:          0       0       0       0       0       0       0
  7418 ;;      Totals:         2       0       0       0       0       0       0
  7419 ;;Total ram usage:        2 bytes
  7420 ;; Hardware stack levels used:    1
  7421 ;; Hardware stack levels required when called:    6
  7422 ;; This function calls:
  7423 ;;		_SendAckMessage
  7424 ;; This function is called by:
  7425 ;;		_GroupAdc
  7426 ;; This function uses a non-reentrant model
  7427 ;;
  7428                           
  7429                           	psect	text38
  7430  003918                     __ptext38:
  7431                           	opt stack 0
  7432  003918                     _SetAdcOperationMode:
  7433                           	opt stack 22
  7434                           
  7435                           ;AdcApp.c: 35: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_OPERATION);
  7436                           
  7437                           ;incstack = 0
  7438  003918  0E31               	movlw	49
  7439  00391A  6E24               	movwf	SendAckMessage@inRequest,c
  7440  00391C  0E03               	movlw	3
  7441  00391E  EC8F  F017         	call	_SendAckMessage
  7442  003922  0012               	return		;funcret
  7443  003924                     __end_of_SetAdcOperationMode:
  7444                           	opt stack 0
  7445                           tosu	equ	0xFFF
  7446                           tosh	equ	0xFFE
  7447                           tosl	equ	0xFFD
  7448                           pclath	equ	0xFFA
  7449                           tblptru	equ	0xFF8
  7450                           tblptrh	equ	0xFF7
  7451                           tblptrl	equ	0xFF6
  7452                           tablat	equ	0xFF5
  7453                           prodh	equ	0xFF4
  7454                           prodl	equ	0xFF3
  7455                           intcon	equ	0xFF2
  7456                           postinc0	equ	0xFEE
  7457                           plusw0	equ	0xFEB
  7458                           wreg	equ	0xFE8
  7459                           indf1	equ	0xFE7
  7460                           postdec1	equ	0xFE5
  7461                           fsr1h	equ	0xFE2
  7462                           fsr1l	equ	0xFE1
  7463                           indf2	equ	0xFDF
  7464                           postinc2	equ	0xFDE
  7465                           postdec2	equ	0xFDD
  7466                           plusw2	equ	0xFDB
  7467                           fsr2h	equ	0xFDA
  7468                           fsr2l	equ	0xFD9
  7469                           status	equ	0xFD8
  7470                           
  7471 ;; *************** function _EUSART1_Read *****************
  7472 ;; Defined at:
  7473 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  7474 ;; Parameters:    Size  Location     Type
  7475 ;;		None
  7476 ;; Auto vars:     Size  Location     Type
  7477 ;;  readValue       2   24[COMRAM] unsigned int 
  7478 ;; Return value:  Size  Location     Type
  7479 ;;                  1    wreg      unsigned char 
  7480 ;; Registers used:
  7481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7482 ;; Tracked objects:
  7483 ;;		On entry : 0/0
  7484 ;;		On exit  : 0/0
  7485 ;;		Unchanged: 0/0
  7486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7487 ;;      Params:         0       0       0       0       0       0       0
  7488 ;;      Locals:         2       0       0       0       0       0       0
  7489 ;;      Temps:          1       0       0       0       0       0       0
  7490 ;;      Totals:         3       0       0       0       0       0       0
  7491 ;;Total ram usage:        3 bytes
  7492 ;; Hardware stack levels used:    1
  7493 ;; Hardware stack levels required when called:    3
  7494 ;; This function calls:
  7495 ;;		Nothing
  7496 ;; This function is called by:
  7497 ;;		_readUartMessage
  7498 ;; This function uses a non-reentrant model
  7499 ;;
  7500                           
  7501                           	psect	text39
  7502  00312A                     __ptext39:
  7503                           	opt stack 0
  7504  00312A                     _EUSART1_Read:
  7505                           	opt stack 26
  7506                           
  7507                           ;eusart1.c: 112: uint16_t readValue = 0;
  7508                           
  7509                           ;incstack = 0
  7510  00312A  0E00               	movlw	0
  7511  00312C  6E1A               	movwf	EUSART1_Read@readValue+1,c
  7512  00312E  0E00               	movlw	0
  7513  003130  6E19               	movwf	EUSART1_Read@readValue,c
  7514                           
  7515                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  7516  003132  0100               	movlb	0	; () banked
  7517  003134  51D3               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  7518  003136  A4D8               	btfss	status,2,c
  7519  003138  D002               	goto	l844
  7520                           
  7521                           ; BSR set to: 0
  7522                           ;eusart1.c: 120: {
  7523                           ;eusart1.c: 121: return readValue;
  7524  00313A  5019               	movf	EUSART1_Read@readValue,w,c
  7525                           
  7526                           ; BSR set to: 0
  7527  00313C  0012               	return	
  7528  00313E                     l844:
  7529                           
  7530                           ; BSR set to: 0
  7531                           ;eusart1.c: 122: }
  7532                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  7533                           
  7534                           ; BSR set to: 0
  7535  00313E  5036               	movf	_eusart1RxTail,w,c	;volatile
  7536  003140  0D01               	mullw	1
  7537  003142  0E46               	movlw	low _eusart1RxBuffer
  7538  003144  24F3               	addwf	prodl,w,c
  7539  003146  6ED9               	movwf	fsr2l,c
  7540  003148  0E01               	movlw	high _eusart1RxBuffer
  7541  00314A  20F4               	addwfc	prodh,w,c
  7542  00314C  6EDA               	movwf	fsr2h,c
  7543  00314E  50DF               	movf	indf2,w,c
  7544  003150  6E18               	movwf	??_EUSART1_Read& (0+255),c
  7545  003152  5018               	movf	??_EUSART1_Read,w,c
  7546  003154  6E19               	movwf	EUSART1_Read@readValue,c
  7547  003156  6A1A               	clrf	EUSART1_Read@readValue+1,c
  7548                           
  7549                           ; BSR set to: 0
  7550  003158  2A36               	incf	_eusart1RxTail,f,c	;volatile
  7551                           
  7552                           ; BSR set to: 0
  7553                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  7554  00315A  0E27               	movlw	39
  7555  00315C  6436               	cpfsgt	_eusart1RxTail,c	;volatile
  7556  00315E  D002               	goto	l846
  7557                           
  7558                           ; BSR set to: 0
  7559                           ;eusart1.c: 126: {
  7560                           ;eusart1.c: 127: eusart1RxTail = 0;
  7561  003160  0E00               	movlw	0
  7562  003162  6E36               	movwf	_eusart1RxTail,c	;volatile
  7563  003164                     l846:
  7564                           
  7565                           ; BSR set to: 0
  7566                           ;eusart1.c: 128: }
  7567                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  7568                           
  7569                           ; BSR set to: 0
  7570  003164  9A9D               	bcf	3997,5,c	;volatile
  7571                           
  7572                           ; BSR set to: 0
  7573                           ;eusart1.c: 130: eusart1RxCount--;
  7574  003166  07D3               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  7575                           
  7576                           ; BSR set to: 0
  7577                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  7578  003168  8A9D               	bsf	3997,5,c	;volatile
  7579                           
  7580                           ; BSR set to: 0
  7581                           ;eusart1.c: 133: return readValue;
  7582  00316A  5019               	movf	EUSART1_Read@readValue,w,c
  7583  00316C  0012               	return	
  7584  00316E                     __end_of_EUSART1_Read:
  7585                           	opt stack 0
  7586                           tosu	equ	0xFFF
  7587                           tosh	equ	0xFFE
  7588                           tosl	equ	0xFFD
  7589                           pclath	equ	0xFFA
  7590                           tblptru	equ	0xFF8
  7591                           tblptrh	equ	0xFF7
  7592                           tblptrl	equ	0xFF6
  7593                           tablat	equ	0xFF5
  7594                           prodh	equ	0xFF4
  7595                           prodl	equ	0xFF3
  7596                           intcon	equ	0xFF2
  7597                           postinc0	equ	0xFEE
  7598                           plusw0	equ	0xFEB
  7599                           wreg	equ	0xFE8
  7600                           indf1	equ	0xFE7
  7601                           postdec1	equ	0xFE5
  7602                           fsr1h	equ	0xFE2
  7603                           fsr1l	equ	0xFE1
  7604                           indf2	equ	0xFDF
  7605                           postinc2	equ	0xFDE
  7606                           postdec2	equ	0xFDD
  7607                           plusw2	equ	0xFDB
  7608                           fsr2h	equ	0xFDA
  7609                           fsr2l	equ	0xFD9
  7610                           status	equ	0xFD8
  7611                           
  7612 ;; *************** function _keepAliveSignalUart *****************
  7613 ;; Defined at:
  7614 ;;		line 79 in file "SystemStatus.c"
  7615 ;; Parameters:    Size  Location     Type
  7616 ;;		None
  7617 ;; Auto vars:     Size  Location     Type
  7618 ;;		None
  7619 ;; Return value:  Size  Location     Type
  7620 ;;                  1    wreg      void 
  7621 ;; Registers used:
  7622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7623 ;; Tracked objects:
  7624 ;;		On entry : 0/0
  7625 ;;		On exit  : 0/0
  7626 ;;		Unchanged: 0/0
  7627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7628 ;;      Params:         0       0       0       0       0       0       0
  7629 ;;      Locals:         0       0       0       0       0       0       0
  7630 ;;      Temps:          0       0       0       0       0       0       0
  7631 ;;      Totals:         0       0       0       0       0       0       0
  7632 ;;Total ram usage:        0 bytes
  7633 ;; Hardware stack levels used:    1
  7634 ;; Hardware stack levels required when called:    6
  7635 ;; This function calls:
  7636 ;;		_SendAckMessage
  7637 ;; This function is called by:
  7638 ;;		_main
  7639 ;; This function uses a non-reentrant model
  7640 ;;
  7641                           
  7642                           	psect	text40
  7643  003924                     __ptext40:
  7644                           	opt stack 0
  7645  003924                     _keepAliveSignalUart:
  7646                           	opt stack 24
  7647                           
  7648                           ;SystemStatus.c: 81: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_KEEP_A
      +                          LIVE);
  7649                           
  7650                           ; BSR set to: 0
  7651                           ;incstack = 0
  7652  003924  0E15               	movlw	21
  7653  003926  6E24               	movwf	SendAckMessage@inRequest,c
  7654  003928  0E01               	movlw	1
  7655  00392A  EC8F  F017         	call	_SendAckMessage
  7656  00392E  0012               	return		;funcret
  7657  003930                     __end_of_keepAliveSignalUart:
  7658                           	opt stack 0
  7659                           tosu	equ	0xFFF
  7660                           tosh	equ	0xFFE
  7661                           tosl	equ	0xFFD
  7662                           pclath	equ	0xFFA
  7663                           tblptru	equ	0xFF8
  7664                           tblptrh	equ	0xFF7
  7665                           tblptrl	equ	0xFF6
  7666                           tablat	equ	0xFF5
  7667                           prodh	equ	0xFF4
  7668                           prodl	equ	0xFF3
  7669                           intcon	equ	0xFF2
  7670                           postinc0	equ	0xFEE
  7671                           plusw0	equ	0xFEB
  7672                           wreg	equ	0xFE8
  7673                           indf1	equ	0xFE7
  7674                           postdec1	equ	0xFE5
  7675                           fsr1h	equ	0xFE2
  7676                           fsr1l	equ	0xFE1
  7677                           indf2	equ	0xFDF
  7678                           postinc2	equ	0xFDE
  7679                           postdec2	equ	0xFDD
  7680                           plusw2	equ	0xFDB
  7681                           fsr2h	equ	0xFDA
  7682                           fsr2l	equ	0xFD9
  7683                           status	equ	0xFD8
  7684                           
  7685 ;; *************** function _keepAliveSignalLed *****************
  7686 ;; Defined at:
  7687 ;;		line 35 in file "LedsApp.c"
  7688 ;; Parameters:    Size  Location     Type
  7689 ;;		None
  7690 ;; Auto vars:     Size  Location     Type
  7691 ;;		None
  7692 ;; Return value:  Size  Location     Type
  7693 ;;                  1    wreg      void 
  7694 ;; Registers used:
  7695 ;;		wreg, status,2, status,0
  7696 ;; Tracked objects:
  7697 ;;		On entry : 0/0
  7698 ;;		On exit  : 0/0
  7699 ;;		Unchanged: 0/0
  7700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7701 ;;      Params:         0       0       0       0       0       0       0
  7702 ;;      Locals:         0       0       0       0       0       0       0
  7703 ;;      Temps:          1       0       0       0       0       0       0
  7704 ;;      Totals:         1       0       0       0       0       0       0
  7705 ;;Total ram usage:        1 bytes
  7706 ;; Hardware stack levels used:    1
  7707 ;; Hardware stack levels required when called:    3
  7708 ;; This function calls:
  7709 ;;		Nothing
  7710 ;; This function is called by:
  7711 ;;		_main
  7712 ;; This function uses a non-reentrant model
  7713 ;;
  7714                           
  7715                           	psect	text41
  7716  003808                     __ptext41:
  7717                           	opt stack 0
  7718  003808                     _keepAliveSignalLed:
  7719                           	opt stack 27
  7720                           
  7721                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  7722                           
  7723                           ;incstack = 0
  7724  003808  B08B               	btfsc	3979,0,c	;volatile
  7725  00380A  D003               	goto	u5380
  7726  00380C  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7727  00380E  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  7728  003810  D001               	goto	u5398
  7729  003812                     u5380:
  7730  003812  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7731  003814                     u5398:
  7732  003814  508B               	movf	3979,w,c	;volatile
  7733  003816  1818               	xorwf	??_keepAliveSignalLed,w,c
  7734  003818  0BFE               	andlw	-2
  7735  00381A  1818               	xorwf	??_keepAliveSignalLed,w,c
  7736  00381C  6E8B               	movwf	3979,c	;volatile
  7737  00381E  0012               	return		;funcret
  7738  003820                     __end_of_keepAliveSignalLed:
  7739                           	opt stack 0
  7740                           tosu	equ	0xFFF
  7741                           tosh	equ	0xFFE
  7742                           tosl	equ	0xFFD
  7743                           pclath	equ	0xFFA
  7744                           tblptru	equ	0xFF8
  7745                           tblptrh	equ	0xFF7
  7746                           tblptrl	equ	0xFF6
  7747                           tablat	equ	0xFF5
  7748                           prodh	equ	0xFF4
  7749                           prodl	equ	0xFF3
  7750                           intcon	equ	0xFF2
  7751                           postinc0	equ	0xFEE
  7752                           plusw0	equ	0xFEB
  7753                           wreg	equ	0xFE8
  7754                           indf1	equ	0xFE7
  7755                           postdec1	equ	0xFE5
  7756                           fsr1h	equ	0xFE2
  7757                           fsr1l	equ	0xFE1
  7758                           indf2	equ	0xFDF
  7759                           postinc2	equ	0xFDE
  7760                           postdec2	equ	0xFDD
  7761                           plusw2	equ	0xFDB
  7762                           fsr2h	equ	0xFDA
  7763                           fsr2l	equ	0xFD9
  7764                           status	equ	0xFD8
  7765                           
  7766 ;; *************** function _SetMcuSystem *****************
  7767 ;; Defined at:
  7768 ;;		line 11 in file "SystemSettings.c"
  7769 ;; Parameters:    Size  Location     Type
  7770 ;;		None
  7771 ;; Auto vars:     Size  Location     Type
  7772 ;;		None
  7773 ;; Return value:  Size  Location     Type
  7774 ;;                  1    wreg      void 
  7775 ;; Registers used:
  7776 ;;		wreg, status,2, status,0, cstack
  7777 ;; Tracked objects:
  7778 ;;		On entry : 0/0
  7779 ;;		On exit  : 0/0
  7780 ;;		Unchanged: 0/0
  7781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7782 ;;      Params:         0       0       0       0       0       0       0
  7783 ;;      Locals:         0       0       0       0       0       0       0
  7784 ;;      Temps:          0       0       0       0       0       0       0
  7785 ;;      Totals:         0       0       0       0       0       0       0
  7786 ;;Total ram usage:        0 bytes
  7787 ;; Hardware stack levels used:    1
  7788 ;; Hardware stack levels required when called:    6
  7789 ;; This function calls:
  7790 ;;		_SYSTEM_Initialize
  7791 ;; This function is called by:
  7792 ;;		_main
  7793 ;; This function uses a non-reentrant model
  7794 ;;
  7795                           
  7796                           	psect	text42
  7797  00393C                     __ptext42:
  7798                           	opt stack 0
  7799  00393C                     _SetMcuSystem:
  7800                           	opt stack 24
  7801                           
  7802                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  7803                           
  7804                           ;incstack = 0
  7805  00393C  ECF7  F01B         	call	_SYSTEM_Initialize	;wreg free
  7806                           
  7807                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  7808  003940  8EF2               	bsf	intcon,7,c	;volatile
  7809                           
  7810                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  7811  003942  8CF2               	bsf	intcon,6,c	;volatile
  7812  003944  0012               	return		;funcret
  7813  003946                     __end_of_SetMcuSystem:
  7814                           	opt stack 0
  7815                           tosu	equ	0xFFF
  7816                           tosh	equ	0xFFE
  7817                           tosl	equ	0xFFD
  7818                           pclath	equ	0xFFA
  7819                           tblptru	equ	0xFF8
  7820                           tblptrh	equ	0xFF7
  7821                           tblptrl	equ	0xFF6
  7822                           tablat	equ	0xFF5
  7823                           prodh	equ	0xFF4
  7824                           prodl	equ	0xFF3
  7825                           intcon	equ	0xFF2
  7826                           postinc0	equ	0xFEE
  7827                           plusw0	equ	0xFEB
  7828                           wreg	equ	0xFE8
  7829                           indf1	equ	0xFE7
  7830                           postdec1	equ	0xFE5
  7831                           fsr1h	equ	0xFE2
  7832                           fsr1l	equ	0xFE1
  7833                           indf2	equ	0xFDF
  7834                           postinc2	equ	0xFDE
  7835                           postdec2	equ	0xFDD
  7836                           plusw2	equ	0xFDB
  7837                           fsr2h	equ	0xFDA
  7838                           fsr2l	equ	0xFD9
  7839                           status	equ	0xFD8
  7840                           
  7841 ;; *************** function _SYSTEM_Initialize *****************
  7842 ;; Defined at:
  7843 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7844 ;; Parameters:    Size  Location     Type
  7845 ;;		None
  7846 ;; Auto vars:     Size  Location     Type
  7847 ;;		None
  7848 ;; Return value:  Size  Location     Type
  7849 ;;                  1    wreg      void 
  7850 ;; Registers used:
  7851 ;;		wreg, status,2, status,0, cstack
  7852 ;; Tracked objects:
  7853 ;;		On entry : 0/0
  7854 ;;		On exit  : 0/0
  7855 ;;		Unchanged: 0/0
  7856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7857 ;;      Params:         0       0       0       0       0       0       0
  7858 ;;      Locals:         0       0       0       0       0       0       0
  7859 ;;      Temps:          0       0       0       0       0       0       0
  7860 ;;      Totals:         0       0       0       0       0       0       0
  7861 ;;Total ram usage:        0 bytes
  7862 ;; Hardware stack levels used:    1
  7863 ;; Hardware stack levels required when called:    5
  7864 ;; This function calls:
  7865 ;;		_ADC_Initialize
  7866 ;;		_EUSART1_Initialize
  7867 ;;		_INTERRUPT_Initialize
  7868 ;;		_OSCILLATOR_Initialize
  7869 ;;		_PIN_MANAGER_Initialize
  7870 ;;		_TMR0_Initialize
  7871 ;; This function is called by:
  7872 ;;		_SetMcuSystem
  7873 ;; This function uses a non-reentrant model
  7874 ;;
  7875                           
  7876                           	psect	text43
  7877  0037EE                     __ptext43:
  7878                           	opt stack 0
  7879  0037EE                     _SYSTEM_Initialize:
  7880                           	opt stack 24
  7881                           
  7882                           ;mcc.c: 114: INTERRUPT_Initialize();
  7883                           
  7884                           ;incstack = 0
  7885  0037EE  ECB0  F01C         	call	_INTERRUPT_Initialize	;wreg free
  7886                           
  7887                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  7888  0037F2  EC4F  F018         	call	_PIN_MANAGER_Initialize	;wreg free
  7889                           
  7890                           ;mcc.c: 116: OSCILLATOR_Initialize();
  7891  0037F6  EC6B  F01C         	call	_OSCILLATOR_Initialize	;wreg free
  7892                           
  7893                           ;mcc.c: 117: ADC_Initialize();
  7894  0037FA  EC10  F01C         	call	_ADC_Initialize	;wreg free
  7895                           
  7896                           ;mcc.c: 118: TMR0_Initialize();
  7897  0037FE  EC1A  F01A         	call	_TMR0_Initialize	;wreg free
  7898                           
  7899                           ;mcc.c: 119: EUSART1_Initialize();
  7900  003802  ECE4  F019         	call	_EUSART1_Initialize	;wreg free
  7901  003806  0012               	return		;funcret
  7902  003808                     __end_of_SYSTEM_Initialize:
  7903                           	opt stack 0
  7904                           tosu	equ	0xFFF
  7905                           tosh	equ	0xFFE
  7906                           tosl	equ	0xFFD
  7907                           pclath	equ	0xFFA
  7908                           tblptru	equ	0xFF8
  7909                           tblptrh	equ	0xFF7
  7910                           tblptrl	equ	0xFF6
  7911                           tablat	equ	0xFF5
  7912                           prodh	equ	0xFF4
  7913                           prodl	equ	0xFF3
  7914                           intcon	equ	0xFF2
  7915                           postinc0	equ	0xFEE
  7916                           plusw0	equ	0xFEB
  7917                           wreg	equ	0xFE8
  7918                           indf1	equ	0xFE7
  7919                           postdec1	equ	0xFE5
  7920                           fsr1h	equ	0xFE2
  7921                           fsr1l	equ	0xFE1
  7922                           indf2	equ	0xFDF
  7923                           postinc2	equ	0xFDE
  7924                           postdec2	equ	0xFDD
  7925                           plusw2	equ	0xFDB
  7926                           fsr2h	equ	0xFDA
  7927                           fsr2l	equ	0xFD9
  7928                           status	equ	0xFD8
  7929                           
  7930 ;; *************** function _TMR0_Initialize *****************
  7931 ;; Defined at:
  7932 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  7933 ;; Parameters:    Size  Location     Type
  7934 ;;		None
  7935 ;; Auto vars:     Size  Location     Type
  7936 ;;		None
  7937 ;; Return value:  Size  Location     Type
  7938 ;;                  1    wreg      void 
  7939 ;; Registers used:
  7940 ;;		wreg, status,2, status,0, cstack
  7941 ;; Tracked objects:
  7942 ;;		On entry : 0/0
  7943 ;;		On exit  : 0/0
  7944 ;;		Unchanged: 0/0
  7945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7946 ;;      Params:         0       0       0       0       0       0       0
  7947 ;;      Locals:         0       0       0       0       0       0       0
  7948 ;;      Temps:          2       0       0       0       0       0       0
  7949 ;;      Totals:         2       0       0       0       0       0       0
  7950 ;;Total ram usage:        2 bytes
  7951 ;; Hardware stack levels used:    1
  7952 ;; Hardware stack levels required when called:    4
  7953 ;; This function calls:
  7954 ;;		_TMR0_SetInterruptHandler
  7955 ;; This function is called by:
  7956 ;;		_SYSTEM_Initialize
  7957 ;; This function uses a non-reentrant model
  7958 ;;
  7959                           
  7960                           	psect	text44
  7961  003434                     __ptext44:
  7962                           	opt stack 0
  7963  003434                     _TMR0_Initialize:
  7964                           	opt stack 24
  7965                           
  7966                           ;tmr0.c: 71: TMR0H = 0x3C;
  7967                           
  7968                           ;incstack = 0
  7969  003434  0E3C               	movlw	60
  7970  003436  6ED7               	movwf	4055,c	;volatile
  7971                           
  7972                           ;tmr0.c: 74: TMR0L = 0xAF;
  7973  003438  0EAF               	movlw	175
  7974  00343A  6ED6               	movwf	4054,c	;volatile
  7975                           
  7976                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  7977  00343C  50D6               	movf	4054,w,c	;volatile
  7978  00343E  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  7979  003442  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  7980  003444  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  7981  003448  6A1A               	clrf	??_TMR0_Initialize,c
  7982  00344A  101A               	iorwf	??_TMR0_Initialize,w,c
  7983  00344C  6E46               	movwf	_timer0ReloadVal,c	;volatile
  7984  00344E  501B               	movf	??_TMR0_Initialize+1,w,c
  7985  003450  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  7986                           
  7987                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  7988  003452  94F2               	bcf	intcon,2,c	;volatile
  7989                           
  7990                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  7991  003454  8AF2               	bsf	intcon,5,c	;volatile
  7992                           
  7993                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  7994  003456  0E00               	movlw	0
  7995  003458  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  7996  00345A  0E00               	movlw	0
  7997  00345C  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  7998  00345E  ECA3  F01C         	call	_TMR0_SetInterruptHandler	;wreg free
  7999                           
  8000                           ;tmr0.c: 90: T0CON = 0x90;
  8001  003462  0E90               	movlw	144
  8002  003464  6ED5               	movwf	4053,c	;volatile
  8003  003466  0012               	return		;funcret
  8004  003468                     __end_of_TMR0_Initialize:
  8005                           	opt stack 0
  8006                           tosu	equ	0xFFF
  8007                           tosh	equ	0xFFE
  8008                           tosl	equ	0xFFD
  8009                           pclath	equ	0xFFA
  8010                           tblptru	equ	0xFF8
  8011                           tblptrh	equ	0xFF7
  8012                           tblptrl	equ	0xFF6
  8013                           tablat	equ	0xFF5
  8014                           prodh	equ	0xFF4
  8015                           prodl	equ	0xFF3
  8016                           intcon	equ	0xFF2
  8017                           postinc0	equ	0xFEE
  8018                           plusw0	equ	0xFEB
  8019                           wreg	equ	0xFE8
  8020                           indf1	equ	0xFE7
  8021                           postdec1	equ	0xFE5
  8022                           fsr1h	equ	0xFE2
  8023                           fsr1l	equ	0xFE1
  8024                           indf2	equ	0xFDF
  8025                           postinc2	equ	0xFDE
  8026                           postdec2	equ	0xFDD
  8027                           plusw2	equ	0xFDB
  8028                           fsr2h	equ	0xFDA
  8029                           fsr2l	equ	0xFD9
  8030                           status	equ	0xFD8
  8031                           
  8032 ;; *************** function _TMR0_SetInterruptHandler *****************
  8033 ;; Defined at:
  8034 ;;		line 177 in file "mcc_generated_files/tmr0.c"
  8035 ;; Parameters:    Size  Location     Type
  8036 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  8037 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  8038 ;; Auto vars:     Size  Location     Type
  8039 ;;		None
  8040 ;; Return value:  Size  Location     Type
  8041 ;;                  1    wreg      void 
  8042 ;; Registers used:
  8043 ;;		wreg, status,2, status,0
  8044 ;; Tracked objects:
  8045 ;;		On entry : 0/0
  8046 ;;		On exit  : 0/0
  8047 ;;		Unchanged: 0/0
  8048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8049 ;;      Params:         2       0       0       0       0       0       0
  8050 ;;      Locals:         0       0       0       0       0       0       0
  8051 ;;      Temps:          0       0       0       0       0       0       0
  8052 ;;      Totals:         2       0       0       0       0       0       0
  8053 ;;Total ram usage:        2 bytes
  8054 ;; Hardware stack levels used:    1
  8055 ;; Hardware stack levels required when called:    3
  8056 ;; This function calls:
  8057 ;;		Nothing
  8058 ;; This function is called by:
  8059 ;;		_TMR0_Initialize
  8060 ;; This function uses a non-reentrant model
  8061 ;;
  8062                           
  8063                           	psect	text45
  8064  003946                     __ptext45:
  8065                           	opt stack 0
  8066  003946                     _TMR0_SetInterruptHandler:
  8067                           	opt stack 24
  8068                           
  8069                           ;tmr0.c: 178: TMR0_InterruptHandler = InterruptHandler;
  8070                           
  8071                           ;incstack = 0
  8072  003946  C018  F0FD         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  8073  00394A  C019  F0FE         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  8074  00394E  0012               	return		;funcret
  8075  003950                     __end_of_TMR0_SetInterruptHandler:
  8076                           	opt stack 0
  8077                           tosu	equ	0xFFF
  8078                           tosh	equ	0xFFE
  8079                           tosl	equ	0xFFD
  8080                           pclath	equ	0xFFA
  8081                           tblptru	equ	0xFF8
  8082                           tblptrh	equ	0xFF7
  8083                           tblptrl	equ	0xFF6
  8084                           tablat	equ	0xFF5
  8085                           prodh	equ	0xFF4
  8086                           prodl	equ	0xFF3
  8087                           intcon	equ	0xFF2
  8088                           postinc0	equ	0xFEE
  8089                           plusw0	equ	0xFEB
  8090                           wreg	equ	0xFE8
  8091                           indf1	equ	0xFE7
  8092                           postdec1	equ	0xFE5
  8093                           fsr1h	equ	0xFE2
  8094                           fsr1l	equ	0xFE1
  8095                           indf2	equ	0xFDF
  8096                           postinc2	equ	0xFDE
  8097                           postdec2	equ	0xFDD
  8098                           plusw2	equ	0xFDB
  8099                           fsr2h	equ	0xFDA
  8100                           fsr2l	equ	0xFD9
  8101                           status	equ	0xFD8
  8102                           
  8103 ;; *************** function _PIN_MANAGER_Initialize *****************
  8104 ;; Defined at:
  8105 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  8106 ;; Parameters:    Size  Location     Type
  8107 ;;		None
  8108 ;; Auto vars:     Size  Location     Type
  8109 ;;		None
  8110 ;; Return value:  Size  Location     Type
  8111 ;;                  1    wreg      void 
  8112 ;; Registers used:
  8113 ;;		wreg, status,2
  8114 ;; Tracked objects:
  8115 ;;		On entry : 0/0
  8116 ;;		On exit  : 0/0
  8117 ;;		Unchanged: 0/0
  8118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8119 ;;      Params:         0       0       0       0       0       0       0
  8120 ;;      Locals:         0       0       0       0       0       0       0
  8121 ;;      Temps:          0       0       0       0       0       0       0
  8122 ;;      Totals:         0       0       0       0       0       0       0
  8123 ;;Total ram usage:        0 bytes
  8124 ;; Hardware stack levels used:    1
  8125 ;; Hardware stack levels required when called:    3
  8126 ;; This function calls:
  8127 ;;		Nothing
  8128 ;; This function is called by:
  8129 ;;		_SYSTEM_Initialize
  8130 ;; This function uses a non-reentrant model
  8131 ;;
  8132                           
  8133                           	psect	text46
  8134  00309E                     __ptext46:
  8135                           	opt stack 0
  8136  00309E                     _PIN_MANAGER_Initialize:
  8137                           	opt stack 25
  8138                           
  8139                           ;pin_manager.c: 57: LATE = 0x00;
  8140                           
  8141                           ;incstack = 0
  8142  00309E  0E00               	movlw	0
  8143  0030A0  6E8D               	movwf	3981,c	;volatile
  8144                           
  8145                           ;pin_manager.c: 58: LATD = 0x00;
  8146  0030A2  0E00               	movlw	0
  8147  0030A4  6E8C               	movwf	3980,c	;volatile
  8148                           
  8149                           ;pin_manager.c: 59: LATA = 0x06;
  8150  0030A6  0E06               	movlw	6
  8151  0030A8  6E89               	movwf	3977,c	;volatile
  8152                           
  8153                           ;pin_manager.c: 60: LATB = 0x00;
  8154  0030AA  0E00               	movlw	0
  8155  0030AC  6E8A               	movwf	3978,c	;volatile
  8156                           
  8157                           ;pin_manager.c: 61: LATC = 0x00;
  8158  0030AE  0E00               	movlw	0
  8159  0030B0  6E8B               	movwf	3979,c	;volatile
  8160                           
  8161                           ;pin_manager.c: 66: TRISE = 0x07;
  8162  0030B2  0E07               	movlw	7
  8163  0030B4  6E96               	movwf	3990,c	;volatile
  8164                           
  8165                           ;pin_manager.c: 67: TRISA = 0xE1;
  8166  0030B6  0EE1               	movlw	225
  8167  0030B8  6E92               	movwf	3986,c	;volatile
  8168                           
  8169                           ;pin_manager.c: 68: TRISB = 0xEF;
  8170  0030BA  0EEF               	movlw	239
  8171  0030BC  6E93               	movwf	3987,c	;volatile
  8172                           
  8173                           ;pin_manager.c: 69: TRISC = 0x80;
  8174  0030BE  0E80               	movlw	128
  8175  0030C0  6E94               	movwf	3988,c	;volatile
  8176                           
  8177                           ;pin_manager.c: 70: TRISD = 0xF2;
  8178  0030C2  0EF2               	movlw	242
  8179  0030C4  6E95               	movwf	3989,c	;volatile
  8180                           
  8181                           ;pin_manager.c: 75: ANSELC = 0x34;
  8182  0030C6  0E34               	movlw	52
  8183  0030C8  010F               	movlb	15	; () banked
  8184  0030CA  6F3A               	movwf	58,b	;volatile
  8185                           
  8186                           ;pin_manager.c: 76: ANSELB = 0x32;
  8187  0030CC  0E32               	movlw	50
  8188  0030CE  6F39               	movwf	57,b	;volatile
  8189                           
  8190                           ;pin_manager.c: 77: ANSELD = 0xE4;
  8191  0030D0  0EE4               	movlw	228
  8192  0030D2  6F3B               	movwf	59,b	;volatile
  8193                           
  8194                           ;pin_manager.c: 78: ANSELE = 0x07;
  8195  0030D4  0E07               	movlw	7
  8196  0030D6  6F3C               	movwf	60,b	;volatile
  8197                           
  8198                           ;pin_manager.c: 79: ANSELA = 0x2F;
  8199  0030D8  0E2F               	movlw	47
  8200  0030DA  6F38               	movwf	56,b	;volatile
  8201                           
  8202                           ;pin_manager.c: 84: WPUB = 0xC3;
  8203  0030DC  0EC3               	movlw	195
  8204  0030DE  6E61               	movwf	3937,c	;volatile
  8205                           
  8206                           ; BSR set to: 15
  8207                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  8208  0030E0  9EF1               	bcf	intcon2,7,c	;volatile
  8209                           
  8210                           ; BSR set to: 15
  8211                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  8212  0030E2  86F2               	bsf	intcon,3,c	;volatile
  8213                           
  8214                           ; BSR set to: 15
  8215  0030E4  0012               	return		;funcret
  8216  0030E6                     __end_of_PIN_MANAGER_Initialize:
  8217                           	opt stack 0
  8218                           tosu	equ	0xFFF
  8219                           tosh	equ	0xFFE
  8220                           tosl	equ	0xFFD
  8221                           pclath	equ	0xFFA
  8222                           tblptru	equ	0xFF8
  8223                           tblptrh	equ	0xFF7
  8224                           tblptrl	equ	0xFF6
  8225                           tablat	equ	0xFF5
  8226                           prodh	equ	0xFF4
  8227                           prodl	equ	0xFF3
  8228                           intcon	equ	0xFF2
  8229                           intcon2	equ	0xFF1
  8230                           postinc0	equ	0xFEE
  8231                           plusw0	equ	0xFEB
  8232                           wreg	equ	0xFE8
  8233                           indf1	equ	0xFE7
  8234                           postdec1	equ	0xFE5
  8235                           fsr1h	equ	0xFE2
  8236                           fsr1l	equ	0xFE1
  8237                           indf2	equ	0xFDF
  8238                           postinc2	equ	0xFDE
  8239                           postdec2	equ	0xFDD
  8240                           plusw2	equ	0xFDB
  8241                           fsr2h	equ	0xFDA
  8242                           fsr2l	equ	0xFD9
  8243                           status	equ	0xFD8
  8244                           
  8245 ;; *************** function _OSCILLATOR_Initialize *****************
  8246 ;; Defined at:
  8247 ;;		line 122 in file "mcc_generated_files/mcc.c"
  8248 ;; Parameters:    Size  Location     Type
  8249 ;;		None
  8250 ;; Auto vars:     Size  Location     Type
  8251 ;;		None
  8252 ;; Return value:  Size  Location     Type
  8253 ;;                  1    wreg      void 
  8254 ;; Registers used:
  8255 ;;		wreg, status,2
  8256 ;; Tracked objects:
  8257 ;;		On entry : 0/0
  8258 ;;		On exit  : 0/0
  8259 ;;		Unchanged: 0/0
  8260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8261 ;;      Params:         0       0       0       0       0       0       0
  8262 ;;      Locals:         0       0       0       0       0       0       0
  8263 ;;      Temps:          0       0       0       0       0       0       0
  8264 ;;      Totals:         0       0       0       0       0       0       0
  8265 ;;Total ram usage:        0 bytes
  8266 ;; Hardware stack levels used:    1
  8267 ;; Hardware stack levels required when called:    3
  8268 ;; This function calls:
  8269 ;;		Nothing
  8270 ;; This function is called by:
  8271 ;;		_SYSTEM_Initialize
  8272 ;; This function uses a non-reentrant model
  8273 ;;
  8274                           
  8275                           	psect	text47
  8276  0038D6                     __ptext47:
  8277                           	opt stack 0
  8278  0038D6                     _OSCILLATOR_Initialize:
  8279                           	opt stack 25
  8280                           
  8281                           ;mcc.c: 125: OSCCON = 0x60;
  8282                           
  8283                           ; BSR set to: 15
  8284                           ;incstack = 0
  8285  0038D6  0E60               	movlw	96
  8286  0038D8  6ED3               	movwf	4051,c	;volatile
  8287                           
  8288                           ;mcc.c: 127: OSCCON2 = 0x04;
  8289  0038DA  0E04               	movlw	4
  8290  0038DC  6ED2               	movwf	4050,c	;volatile
  8291                           
  8292                           ;mcc.c: 129: OSCTUNE = 0x80;
  8293  0038DE  0E80               	movlw	128
  8294  0038E0  6E9B               	movwf	3995,c	;volatile
  8295  0038E2  0012               	return		;funcret
  8296  0038E4                     __end_of_OSCILLATOR_Initialize:
  8297                           	opt stack 0
  8298                           tosu	equ	0xFFF
  8299                           tosh	equ	0xFFE
  8300                           tosl	equ	0xFFD
  8301                           pclath	equ	0xFFA
  8302                           tblptru	equ	0xFF8
  8303                           tblptrh	equ	0xFF7
  8304                           tblptrl	equ	0xFF6
  8305                           tablat	equ	0xFF5
  8306                           prodh	equ	0xFF4
  8307                           prodl	equ	0xFF3
  8308                           intcon	equ	0xFF2
  8309                           intcon2	equ	0xFF1
  8310                           postinc0	equ	0xFEE
  8311                           plusw0	equ	0xFEB
  8312                           wreg	equ	0xFE8
  8313                           indf1	equ	0xFE7
  8314                           postdec1	equ	0xFE5
  8315                           fsr1h	equ	0xFE2
  8316                           fsr1l	equ	0xFE1
  8317                           indf2	equ	0xFDF
  8318                           postinc2	equ	0xFDE
  8319                           postdec2	equ	0xFDD
  8320                           plusw2	equ	0xFDB
  8321                           fsr2h	equ	0xFDA
  8322                           fsr2l	equ	0xFD9
  8323                           status	equ	0xFD8
  8324                           
  8325 ;; *************** function _INTERRUPT_Initialize *****************
  8326 ;; Defined at:
  8327 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8328 ;; Parameters:    Size  Location     Type
  8329 ;;		None
  8330 ;; Auto vars:     Size  Location     Type
  8331 ;;		None
  8332 ;; Return value:  Size  Location     Type
  8333 ;;                  1    wreg      void 
  8334 ;; Registers used:
  8335 ;;		None
  8336 ;; Tracked objects:
  8337 ;;		On entry : 0/0
  8338 ;;		On exit  : 0/0
  8339 ;;		Unchanged: 0/0
  8340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8341 ;;      Params:         0       0       0       0       0       0       0
  8342 ;;      Locals:         0       0       0       0       0       0       0
  8343 ;;      Temps:          0       0       0       0       0       0       0
  8344 ;;      Totals:         0       0       0       0       0       0       0
  8345 ;;Total ram usage:        0 bytes
  8346 ;; Hardware stack levels used:    1
  8347 ;; Hardware stack levels required when called:    3
  8348 ;; This function calls:
  8349 ;;		Nothing
  8350 ;; This function is called by:
  8351 ;;		_SYSTEM_Initialize
  8352 ;; This function uses a non-reentrant model
  8353 ;;
  8354                           
  8355                           	psect	text48
  8356  003960                     __ptext48:
  8357                           	opt stack 0
  8358  003960                     _INTERRUPT_Initialize:
  8359                           	opt stack 25
  8360                           
  8361                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  8362                           
  8363                           ;incstack = 0
  8364  003960  9ED0               	bcf	4048,7,c	;volatile
  8365  003962  0012               	return		;funcret
  8366  003964                     __end_of_INTERRUPT_Initialize:
  8367                           	opt stack 0
  8368                           tosu	equ	0xFFF
  8369                           tosh	equ	0xFFE
  8370                           tosl	equ	0xFFD
  8371                           pclath	equ	0xFFA
  8372                           tblptru	equ	0xFF8
  8373                           tblptrh	equ	0xFF7
  8374                           tblptrl	equ	0xFF6
  8375                           tablat	equ	0xFF5
  8376                           prodh	equ	0xFF4
  8377                           prodl	equ	0xFF3
  8378                           intcon	equ	0xFF2
  8379                           intcon2	equ	0xFF1
  8380                           postinc0	equ	0xFEE
  8381                           plusw0	equ	0xFEB
  8382                           wreg	equ	0xFE8
  8383                           indf1	equ	0xFE7
  8384                           postdec1	equ	0xFE5
  8385                           fsr1h	equ	0xFE2
  8386                           fsr1l	equ	0xFE1
  8387                           indf2	equ	0xFDF
  8388                           postinc2	equ	0xFDE
  8389                           postdec2	equ	0xFDD
  8390                           plusw2	equ	0xFDB
  8391                           fsr2h	equ	0xFDA
  8392                           fsr2l	equ	0xFD9
  8393                           status	equ	0xFD8
  8394                           
  8395 ;; *************** function _EUSART1_Initialize *****************
  8396 ;; Defined at:
  8397 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  8398 ;; Parameters:    Size  Location     Type
  8399 ;;		None
  8400 ;; Auto vars:     Size  Location     Type
  8401 ;;		None
  8402 ;; Return value:  Size  Location     Type
  8403 ;;                  1    wreg      void 
  8404 ;; Registers used:
  8405 ;;		wreg, status,2
  8406 ;; Tracked objects:
  8407 ;;		On entry : 0/0
  8408 ;;		On exit  : 0/0
  8409 ;;		Unchanged: 0/0
  8410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8411 ;;      Params:         0       0       0       0       0       0       0
  8412 ;;      Locals:         0       0       0       0       0       0       0
  8413 ;;      Temps:          0       0       0       0       0       0       0
  8414 ;;      Totals:         0       0       0       0       0       0       0
  8415 ;;Total ram usage:        0 bytes
  8416 ;; Hardware stack levels used:    1
  8417 ;; Hardware stack levels required when called:    3
  8418 ;; This function calls:
  8419 ;;		Nothing
  8420 ;; This function is called by:
  8421 ;;		_SYSTEM_Initialize
  8422 ;; This function uses a non-reentrant model
  8423 ;;
  8424                           
  8425                           	psect	text49
  8426  0033C8                     __ptext49:
  8427                           	opt stack 0
  8428  0033C8                     _EUSART1_Initialize:
  8429                           	opt stack 25
  8430                           
  8431                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  8432                           
  8433                           ;incstack = 0
  8434  0033C8  9A9D               	bcf	3997,5,c	;volatile
  8435                           
  8436                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  8437  0033CA  989D               	bcf	3997,4,c	;volatile
  8438                           
  8439                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  8440  0033CC  0E08               	movlw	8
  8441  0033CE  6EB8               	movwf	4024,c	;volatile
  8442                           
  8443                           ;eusart1.c: 85: RCSTA1 = 0x90;
  8444  0033D0  0E90               	movlw	144
  8445  0033D2  6EAB               	movwf	4011,c	;volatile
  8446                           
  8447                           ;eusart1.c: 88: TXSTA1 = 0x24;
  8448  0033D4  0E24               	movlw	36
  8449  0033D6  6EAC               	movwf	4012,c	;volatile
  8450                           
  8451                           ;eusart1.c: 91: SPBRG1 = 0x10;
  8452  0033D8  0E10               	movlw	16
  8453  0033DA  6EAF               	movwf	4015,c	;volatile
  8454                           
  8455                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  8456  0033DC  0E00               	movlw	0
  8457  0033DE  6EB0               	movwf	4016,c	;volatile
  8458                           
  8459                           ;eusart1.c: 98: eusart1TxHead = 0;
  8460  0033E0  0E00               	movlw	0
  8461  0033E2  6E39               	movwf	_eusart1TxHead,c	;volatile
  8462                           
  8463                           ;eusart1.c: 99: eusart1TxTail = 0;
  8464  0033E4  0E00               	movlw	0
  8465  0033E6  6E38               	movwf	_eusart1TxTail,c	;volatile
  8466                           
  8467                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  8468  0033E8  0E46               	movlw	70
  8469  0033EA  0100               	movlb	0	; () banked
  8470  0033EC  6FFF               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  8471                           
  8472                           ;eusart1.c: 102: eusart1RxHead = 0;
  8473  0033EE  0E00               	movlw	0
  8474  0033F0  6E37               	movwf	_eusart1RxHead,c	;volatile
  8475                           
  8476                           ;eusart1.c: 103: eusart1RxTail = 0;
  8477  0033F2  0E00               	movlw	0
  8478  0033F4  6E36               	movwf	_eusart1RxTail,c	;volatile
  8479                           
  8480                           ;eusart1.c: 104: eusart1RxCount = 0;
  8481  0033F6  0E00               	movlw	0
  8482  0033F8  6FD3               	movwf	_eusart1RxCount& (0+255),b	;volatile
  8483                           
  8484                           ; BSR set to: 0
  8485                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  8486  0033FA  8A9D               	bsf	3997,5,c	;volatile
  8487                           
  8488                           ; BSR set to: 0
  8489  0033FC  0012               	return		;funcret
  8490  0033FE                     __end_of_EUSART1_Initialize:
  8491                           	opt stack 0
  8492                           tosu	equ	0xFFF
  8493                           tosh	equ	0xFFE
  8494                           tosl	equ	0xFFD
  8495                           pclath	equ	0xFFA
  8496                           tblptru	equ	0xFF8
  8497                           tblptrh	equ	0xFF7
  8498                           tblptrl	equ	0xFF6
  8499                           tablat	equ	0xFF5
  8500                           prodh	equ	0xFF4
  8501                           prodl	equ	0xFF3
  8502                           intcon	equ	0xFF2
  8503                           intcon2	equ	0xFF1
  8504                           postinc0	equ	0xFEE
  8505                           plusw0	equ	0xFEB
  8506                           wreg	equ	0xFE8
  8507                           indf1	equ	0xFE7
  8508                           postdec1	equ	0xFE5
  8509                           fsr1h	equ	0xFE2
  8510                           fsr1l	equ	0xFE1
  8511                           indf2	equ	0xFDF
  8512                           postinc2	equ	0xFDE
  8513                           postdec2	equ	0xFDD
  8514                           plusw2	equ	0xFDB
  8515                           fsr2h	equ	0xFDA
  8516                           fsr2l	equ	0xFD9
  8517                           status	equ	0xFD8
  8518                           
  8519 ;; *************** function _ADC_Initialize *****************
  8520 ;; Defined at:
  8521 ;;		line 58 in file "mcc_generated_files/adc.c"
  8522 ;; Parameters:    Size  Location     Type
  8523 ;;		None
  8524 ;; Auto vars:     Size  Location     Type
  8525 ;;		None
  8526 ;; Return value:  Size  Location     Type
  8527 ;;                  1    wreg      void 
  8528 ;; Registers used:
  8529 ;;		wreg, status,2
  8530 ;; Tracked objects:
  8531 ;;		On entry : 0/0
  8532 ;;		On exit  : 0/0
  8533 ;;		Unchanged: 0/0
  8534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8535 ;;      Params:         0       0       0       0       0       0       0
  8536 ;;      Locals:         0       0       0       0       0       0       0
  8537 ;;      Temps:          0       0       0       0       0       0       0
  8538 ;;      Totals:         0       0       0       0       0       0       0
  8539 ;;Total ram usage:        0 bytes
  8540 ;; Hardware stack levels used:    1
  8541 ;; Hardware stack levels required when called:    3
  8542 ;; This function calls:
  8543 ;;		Nothing
  8544 ;; This function is called by:
  8545 ;;		_SYSTEM_Initialize
  8546 ;; This function uses a non-reentrant model
  8547 ;;
  8548                           
  8549                           	psect	text50
  8550  003820                     __ptext50:
  8551                           	opt stack 0
  8552  003820                     _ADC_Initialize:
  8553                           	opt stack 25
  8554                           
  8555                           ;adc.c: 63: ADCON0 = 0x05;
  8556                           
  8557                           ; BSR set to: 0
  8558                           ;incstack = 0
  8559  003820  0E05               	movlw	5
  8560  003822  6EC2               	movwf	4034,c	;volatile
  8561                           
  8562                           ;adc.c: 66: ADCON1 = 0x00;
  8563  003824  0E00               	movlw	0
  8564  003826  6EC1               	movwf	4033,c	;volatile
  8565                           
  8566                           ;adc.c: 69: ADCON2 = 0x87;
  8567  003828  0E87               	movlw	135
  8568  00382A  6EC0               	movwf	4032,c	;volatile
  8569                           
  8570                           ;adc.c: 72: ADRESL = 0x00;
  8571  00382C  0E00               	movlw	0
  8572  00382E  6EC3               	movwf	4035,c	;volatile
  8573                           
  8574                           ;adc.c: 75: ADRESH = 0x00;
  8575  003830  0E00               	movlw	0
  8576  003832  6EC4               	movwf	4036,c	;volatile
  8577  003834  0012               	return		;funcret
  8578  003836                     __end_of_ADC_Initialize:
  8579                           	opt stack 0
  8580                           tosu	equ	0xFFF
  8581                           tosh	equ	0xFFE
  8582                           tosl	equ	0xFFD
  8583                           pclath	equ	0xFFA
  8584                           tblptru	equ	0xFF8
  8585                           tblptrh	equ	0xFF7
  8586                           tblptrl	equ	0xFF6
  8587                           tablat	equ	0xFF5
  8588                           prodh	equ	0xFF4
  8589                           prodl	equ	0xFF3
  8590                           intcon	equ	0xFF2
  8591                           intcon2	equ	0xFF1
  8592                           postinc0	equ	0xFEE
  8593                           plusw0	equ	0xFEB
  8594                           wreg	equ	0xFE8
  8595                           indf1	equ	0xFE7
  8596                           postdec1	equ	0xFE5
  8597                           fsr1h	equ	0xFE2
  8598                           fsr1l	equ	0xFE1
  8599                           indf2	equ	0xFDF
  8600                           postinc2	equ	0xFDE
  8601                           postdec2	equ	0xFDD
  8602                           plusw2	equ	0xFDB
  8603                           fsr2h	equ	0xFDA
  8604                           fsr2l	equ	0xFD9
  8605                           status	equ	0xFD8
  8606                           
  8607 ;; *************** function _SetMcuRunTime *****************
  8608 ;; Defined at:
  8609 ;;		line 43 in file "SystemStatus.c"
  8610 ;; Parameters:    Size  Location     Type
  8611 ;;		None
  8612 ;; Auto vars:     Size  Location     Type
  8613 ;;		None
  8614 ;; Return value:  Size  Location     Type
  8615 ;;                  1    wreg      void 
  8616 ;; Registers used:
  8617 ;;		wreg, status,2, status,0, cstack
  8618 ;; Tracked objects:
  8619 ;;		On entry : 0/0
  8620 ;;		On exit  : 0/0
  8621 ;;		Unchanged: 0/0
  8622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8623 ;;      Params:         0       0       0       0       0       0       0
  8624 ;;      Locals:         0       0       0       0       0       0       0
  8625 ;;      Temps:          0       0       0       0       0       0       0
  8626 ;;      Totals:         0       0       0       0       0       0       0
  8627 ;;Total ram usage:        0 bytes
  8628 ;; Hardware stack levels used:    1
  8629 ;; Hardware stack levels required when called:    4
  8630 ;; This function calls:
  8631 ;;		___llmod
  8632 ;; This function is called by:
  8633 ;;		_main
  8634 ;; This function uses a non-reentrant model
  8635 ;;
  8636                           
  8637                           	psect	text51
  8638  00316E                     __ptext51:
  8639                           	opt stack 0
  8640  00316E                     _SetMcuRunTime:
  8641                           	opt stack 26
  8642                           
  8643                           ;SystemStatus.c: 45: mcuRunTimeIn5SecTicks++;
  8644                           
  8645                           ;incstack = 0
  8646  00316E  0E01               	movlw	1
  8647  003170  0100               	movlb	0	; () banked
  8648  003172  27C0               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  8649  003174  0E00               	movlw	0
  8650  003176  23C1               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  8651  003178  23C2               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  8652  00317A  23C3               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  8653                           
  8654                           ; BSR set to: 0
  8655                           ;SystemStatus.c: 46: mcuRunTimeIn5SecTicks %= (17280);
  8656  00317C  C0C0  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  8657  003180  C0C1  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  8658  003184  C0C2  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  8659  003188  C0C3  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  8660  00318C  0E80               	movlw	128
  8661  00318E  6E1C               	movwf	___llmod@divisor,c
  8662  003190  0E43               	movlw	67
  8663  003192  6E1D               	movwf	___llmod@divisor+1,c
  8664  003194  0E00               	movlw	0
  8665  003196  6E1E               	movwf	___llmod@divisor+2,c
  8666  003198  0E00               	movlw	0
  8667  00319A  6E1F               	movwf	___llmod@divisor+3,c
  8668  00319C  EC6F  F015         	call	___llmod	;wreg free
  8669  0031A0  C018  F0C0         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  8670  0031A4  C019  F0C1         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  8671  0031A8  C01A  F0C2         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  8672  0031AC  C01B  F0C3         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  8673  0031B0  0012               	return		;funcret
  8674  0031B2                     __end_of_SetMcuRunTime:
  8675                           	opt stack 0
  8676                           tosu	equ	0xFFF
  8677                           tosh	equ	0xFFE
  8678                           tosl	equ	0xFFD
  8679                           pclath	equ	0xFFA
  8680                           tblptru	equ	0xFF8
  8681                           tblptrh	equ	0xFF7
  8682                           tblptrl	equ	0xFF6
  8683                           tablat	equ	0xFF5
  8684                           prodh	equ	0xFF4
  8685                           prodl	equ	0xFF3
  8686                           intcon	equ	0xFF2
  8687                           intcon2	equ	0xFF1
  8688                           postinc0	equ	0xFEE
  8689                           plusw0	equ	0xFEB
  8690                           wreg	equ	0xFE8
  8691                           indf1	equ	0xFE7
  8692                           postdec1	equ	0xFE5
  8693                           fsr1h	equ	0xFE2
  8694                           fsr1l	equ	0xFE1
  8695                           indf2	equ	0xFDF
  8696                           postinc2	equ	0xFDE
  8697                           postdec2	equ	0xFDD
  8698                           plusw2	equ	0xFDB
  8699                           fsr2h	equ	0xFDA
  8700                           fsr2l	equ	0xFD9
  8701                           status	equ	0xFD8
  8702                           
  8703 ;; *************** function ___llmod *****************
  8704 ;; Defined at:
  8705 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  8706 ;; Parameters:    Size  Location     Type
  8707 ;;  dividend        4   23[COMRAM] unsigned long 
  8708 ;;  divisor         4   27[COMRAM] unsigned long 
  8709 ;; Auto vars:     Size  Location     Type
  8710 ;;  counter         1   31[COMRAM] unsigned char 
  8711 ;; Return value:  Size  Location     Type
  8712 ;;                  4   23[COMRAM] unsigned long 
  8713 ;; Registers used:
  8714 ;;		wreg, status,2, status,0
  8715 ;; Tracked objects:
  8716 ;;		On entry : 0/0
  8717 ;;		On exit  : 0/0
  8718 ;;		Unchanged: 0/0
  8719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8720 ;;      Params:         8       0       0       0       0       0       0
  8721 ;;      Locals:         1       0       0       0       0       0       0
  8722 ;;      Temps:          0       0       0       0       0       0       0
  8723 ;;      Totals:         9       0       0       0       0       0       0
  8724 ;;Total ram usage:        9 bytes
  8725 ;; Hardware stack levels used:    1
  8726 ;; Hardware stack levels required when called:    3
  8727 ;; This function calls:
  8728 ;;		Nothing
  8729 ;; This function is called by:
  8730 ;;		_SetMcuRunTime
  8731 ;;		_GetMcuRunTime
  8732 ;; This function uses a non-reentrant model
  8733 ;;
  8734                           
  8735                           	psect	text52
  8736  002ADE                     __ptext52:
  8737                           	opt stack 0
  8738  002ADE                     ___llmod:
  8739                           	opt stack 24
  8740                           
  8741                           ;incstack = 0
  8742  002ADE  501C               	movf	___llmod@divisor,w,c
  8743  002AE0  101D               	iorwf	___llmod@divisor+1,w,c
  8744  002AE2  101E               	iorwf	___llmod@divisor+2,w,c
  8745  002AE4  101F               	iorwf	___llmod@divisor+3,w,c
  8746  002AE6  B4D8               	btfsc	status,2,c
  8747  002AE8  D024               	goto	l1831
  8748  002AEA  0E01               	movlw	1
  8749  002AEC  6E20               	movwf	___llmod@counter,c
  8750  002AEE  D006               	goto	l1826
  8751  002AF0  90D8               	bcf	status,0,c
  8752  002AF2  361C               	rlcf	___llmod@divisor,f,c
  8753  002AF4  361D               	rlcf	___llmod@divisor+1,f,c
  8754  002AF6  361E               	rlcf	___llmod@divisor+2,f,c
  8755  002AF8  361F               	rlcf	___llmod@divisor+3,f,c
  8756  002AFA  2A20               	incf	___llmod@counter,f,c
  8757  002AFC                     l1826:
  8758  002AFC  AE1F               	btfss	___llmod@divisor+3,7,c
  8759  002AFE  D7F8               	goto	l1827
  8760  002B00                     u7680:
  8761  002B00  501C               	movf	___llmod@divisor,w,c
  8762  002B02  5C18               	subwf	___llmod@dividend,w,c
  8763  002B04  501D               	movf	___llmod@divisor+1,w,c
  8764  002B06  5819               	subwfb	___llmod@dividend+1,w,c
  8765  002B08  501E               	movf	___llmod@divisor+2,w,c
  8766  002B0A  581A               	subwfb	___llmod@dividend+2,w,c
  8767  002B0C  501F               	movf	___llmod@divisor+3,w,c
  8768  002B0E  581B               	subwfb	___llmod@dividend+3,w,c
  8769  002B10  A0D8               	btfss	status,0,c
  8770  002B12  D008               	goto	l1830
  8771  002B14  501C               	movf	___llmod@divisor,w,c
  8772  002B16  5E18               	subwf	___llmod@dividend,f,c
  8773  002B18  501D               	movf	___llmod@divisor+1,w,c
  8774  002B1A  5A19               	subwfb	___llmod@dividend+1,f,c
  8775  002B1C  501E               	movf	___llmod@divisor+2,w,c
  8776  002B1E  5A1A               	subwfb	___llmod@dividend+2,f,c
  8777  002B20  501F               	movf	___llmod@divisor+3,w,c
  8778  002B22  5A1B               	subwfb	___llmod@dividend+3,f,c
  8779  002B24                     l1830:
  8780  002B24  90D8               	bcf	status,0,c
  8781  002B26  321F               	rrcf	___llmod@divisor+3,f,c
  8782  002B28  321E               	rrcf	___llmod@divisor+2,f,c
  8783  002B2A  321D               	rrcf	___llmod@divisor+1,f,c
  8784  002B2C  321C               	rrcf	___llmod@divisor,f,c
  8785  002B2E  2E20               	decfsz	___llmod@counter,f,c
  8786  002B30  D7E7               	goto	u7680
  8787  002B32                     l1831:
  8788  002B32  C018  F018         	movff	___llmod@dividend,?___llmod
  8789  002B36  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
  8790  002B3A  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
  8791  002B3E  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
  8792  002B42  0012               	return		;funcret
  8793  002B44                     __end_of___llmod:
  8794                           	opt stack 0
  8795                           tosu	equ	0xFFF
  8796                           tosh	equ	0xFFE
  8797                           tosl	equ	0xFFD
  8798                           pclath	equ	0xFFA
  8799                           tblptru	equ	0xFF8
  8800                           tblptrh	equ	0xFF7
  8801                           tblptrl	equ	0xFF6
  8802                           tablat	equ	0xFF5
  8803                           prodh	equ	0xFF4
  8804                           prodl	equ	0xFF3
  8805                           intcon	equ	0xFF2
  8806                           intcon2	equ	0xFF1
  8807                           postinc0	equ	0xFEE
  8808                           plusw0	equ	0xFEB
  8809                           wreg	equ	0xFE8
  8810                           indf1	equ	0xFE7
  8811                           postdec1	equ	0xFE5
  8812                           fsr1h	equ	0xFE2
  8813                           fsr1l	equ	0xFE1
  8814                           indf2	equ	0xFDF
  8815                           postinc2	equ	0xFDE
  8816                           postdec2	equ	0xFDD
  8817                           plusw2	equ	0xFDB
  8818                           fsr2h	equ	0xFDA
  8819                           fsr2l	equ	0xFD9
  8820                           status	equ	0xFD8
  8821                           
  8822 ;; *************** function _SendSystemStartAck *****************
  8823 ;; Defined at:
  8824 ;;		line 140 in file "SystemCommon.c"
  8825 ;; Parameters:    Size  Location     Type
  8826 ;;		None
  8827 ;; Auto vars:     Size  Location     Type
  8828 ;;		None
  8829 ;; Return value:  Size  Location     Type
  8830 ;;                  1    wreg      void 
  8831 ;; Registers used:
  8832 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8833 ;; Tracked objects:
  8834 ;;		On entry : 0/0
  8835 ;;		On exit  : 0/0
  8836 ;;		Unchanged: 0/0
  8837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8838 ;;      Params:         0       0       0       0       0       0       0
  8839 ;;      Locals:         0       0       0       0       0       0       0
  8840 ;;      Temps:          0       0       0       0       0       0       0
  8841 ;;      Totals:         0       0       0       0       0       0       0
  8842 ;;Total ram usage:        0 bytes
  8843 ;; Hardware stack levels used:    1
  8844 ;; Hardware stack levels required when called:    6
  8845 ;; This function calls:
  8846 ;;		_SendAckMessage
  8847 ;; This function is called by:
  8848 ;;		_main
  8849 ;; This function uses a non-reentrant model
  8850 ;;
  8851                           
  8852                           	psect	text53
  8853  003930                     __ptext53:
  8854                           	opt stack 0
  8855  003930                     _SendSystemStartAck:
  8856                           	opt stack 24
  8857                           
  8858                           ;SystemCommon.c: 142: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_SYSTE
      +                          M_START);
  8859                           
  8860                           ;incstack = 0
  8861  003930  0E10               	movlw	16
  8862  003932  6E24               	movwf	SendAckMessage@inRequest,c
  8863  003934  0E01               	movlw	1
  8864  003936  EC8F  F017         	call	_SendAckMessage
  8865  00393A  0012               	return		;funcret
  8866  00393C                     __end_of_SendSystemStartAck:
  8867                           	opt stack 0
  8868                           tosu	equ	0xFFF
  8869                           tosh	equ	0xFFE
  8870                           tosl	equ	0xFFD
  8871                           pclath	equ	0xFFA
  8872                           tblptru	equ	0xFF8
  8873                           tblptrh	equ	0xFF7
  8874                           tblptrl	equ	0xFF6
  8875                           tablat	equ	0xFF5
  8876                           prodh	equ	0xFF4
  8877                           prodl	equ	0xFF3
  8878                           intcon	equ	0xFF2
  8879                           intcon2	equ	0xFF1
  8880                           postinc0	equ	0xFEE
  8881                           plusw0	equ	0xFEB
  8882                           wreg	equ	0xFE8
  8883                           indf1	equ	0xFE7
  8884                           postdec1	equ	0xFE5
  8885                           fsr1h	equ	0xFE2
  8886                           fsr1l	equ	0xFE1
  8887                           indf2	equ	0xFDF
  8888                           postinc2	equ	0xFDE
  8889                           postdec2	equ	0xFDD
  8890                           plusw2	equ	0xFDB
  8891                           fsr2h	equ	0xFDA
  8892                           fsr2l	equ	0xFD9
  8893                           status	equ	0xFD8
  8894                           
  8895 ;; *************** function _SendAckMessage *****************
  8896 ;; Defined at:
  8897 ;;		line 171 in file "EusartApp.c"
  8898 ;; Parameters:    Size  Location     Type
  8899 ;;  inGroup         1    wreg     enum E7163
  8900 ;;  inRequest       1   35[COMRAM] enum E7171
  8901 ;; Auto vars:     Size  Location     Type
  8902 ;;  inGroup         1   36[COMRAM] enum E7163
  8903 ;;  TxMsg           6   37[COMRAM] unsigned char [6]
  8904 ;; Return value:  Size  Location     Type
  8905 ;;                  1    wreg      void 
  8906 ;; Registers used:
  8907 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8908 ;; Tracked objects:
  8909 ;;		On entry : 0/0
  8910 ;;		On exit  : 0/0
  8911 ;;		Unchanged: 0/0
  8912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8913 ;;      Params:         1       0       0       0       0       0       0
  8914 ;;      Locals:         7       0       0       0       0       0       0
  8915 ;;      Temps:          0       0       0       0       0       0       0
  8916 ;;      Totals:         8       0       0       0       0       0       0
  8917 ;;Total ram usage:        8 bytes
  8918 ;; Hardware stack levels used:    1
  8919 ;; Hardware stack levels required when called:    5
  8920 ;; This function calls:
  8921 ;;		_WriteUartMessage
  8922 ;;		_ZeroArray
  8923 ;;		_crc8
  8924 ;; This function is called by:
  8925 ;;		_testLeds
  8926 ;;		_SetAdcOperationMode
  8927 ;;		_SetConversionResultFormat
  8928 ;;		_SetChannelMode
  8929 ;;		_FlashReadUart
  8930 ;;		_FlashEreaseMem
  8931 ;;		_DacSetValue
  8932 ;;		_UpdateTxFreq
  8933 ;;		_UpdateRxFreq
  8934 ;;		_SetSynthTxOper
  8935 ;;		_SetSynthRxOper
  8936 ;;		_ResetMcu
  8937 ;;		_SendSystemStartAck
  8938 ;;		_keepAliveSignalUart
  8939 ;; This function uses a non-reentrant model
  8940 ;;
  8941                           
  8942                           	psect	text54
  8943  002F1E                     __ptext54:
  8944                           	opt stack 0
  8945  002F1E                     _SendAckMessage:
  8946                           	opt stack 22
  8947                           
  8948                           ;incstack = 0
  8949                           ;SendAckMessage@inGroup stored from wreg
  8950  002F1E  6E25               	movwf	SendAckMessage@inGroup,c
  8951                           
  8952                           ;EusartApp.c: 174: char TxMsg[(0x5) + 1];
  8953                           ;EusartApp.c: 175: ZeroArray(TxMsg, (0x5) + 1);
  8954  002F20  0E26               	movlw	low SendAckMessage@TxMsg
  8955  002F22  6E20               	movwf	ZeroArray@array,c
  8956  002F24  0E00               	movlw	high SendAckMessage@TxMsg
  8957  002F26  6E21               	movwf	ZeroArray@array+1,c
  8958  002F28  0E00               	movlw	0
  8959  002F2A  6E23               	movwf	ZeroArray@size+1,c
  8960  002F2C  0E06               	movlw	6
  8961  002F2E  6E22               	movwf	ZeroArray@size,c
  8962  002F30  ECCB  F01B         	call	_ZeroArray	;wreg free
  8963                           
  8964                           ;EusartApp.c: 178: TxMsg[(0)] = (0x24);
  8965  002F34  0E24               	movlw	36
  8966  002F36  6E26               	movwf	SendAckMessage@TxMsg,c
  8967                           
  8968                           ;EusartApp.c: 179: TxMsg[(1)] = inGroup;
  8969  002F38  C025  F027         	movff	SendAckMessage@inGroup,SendAckMessage@TxMsg+1
  8970                           
  8971                           ;EusartApp.c: 180: TxMsg[(2)] = inRequest;
  8972  002F3C  C024  F028         	movff	SendAckMessage@inRequest,SendAckMessage@TxMsg+2
  8973                           
  8974                           ;EusartApp.c: 181: TxMsg[(3)] = 0;
  8975  002F40  0E00               	movlw	0
  8976  002F42  6E29               	movwf	SendAckMessage@TxMsg+3,c
  8977                           
  8978                           ;EusartApp.c: 183: TxMsg[(0x5)] = crc8(TxMsg, (0x5));
  8979  002F44  0E26               	movlw	low SendAckMessage@TxMsg
  8980  002F46  6E18               	movwf	crc8@dataArray,c
  8981  002F48  0E00               	movlw	high SendAckMessage@TxMsg
  8982  002F4A  6E19               	movwf	crc8@dataArray+1,c
  8983  002F4C  0E00               	movlw	0
  8984  002F4E  6E1B               	movwf	crc8@dataSize+1,c
  8985  002F50  0E05               	movlw	5
  8986  002F52  6E1A               	movwf	crc8@dataSize,c
  8987  002F54  ECB8  F017         	call	_crc8	;wreg free
  8988  002F58  6E2B               	movwf	SendAckMessage@TxMsg+5,c
  8989                           
  8990                           ;EusartApp.c: 185: WriteUartMessage(TxMsg, (0x5) + 1);
  8991  002F5A  0E26               	movlw	low SendAckMessage@TxMsg
  8992  002F5C  6E19               	movwf	WriteUartMessage@dataBuf,c
  8993  002F5E  0E00               	movlw	high SendAckMessage@TxMsg
  8994  002F60  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  8995  002F62  0E00               	movlw	0
  8996  002F64  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  8997  002F66  0E06               	movlw	6
  8998  002F68  6E1B               	movwf	WriteUartMessage@dataSize,c
  8999  002F6A  ECFF  F019         	call	_WriteUartMessage	;wreg free
  9000  002F6E  0012               	return		;funcret
  9001  002F70                     __end_of_SendAckMessage:
  9002                           	opt stack 0
  9003                           tosu	equ	0xFFF
  9004                           tosh	equ	0xFFE
  9005                           tosl	equ	0xFFD
  9006                           pclath	equ	0xFFA
  9007                           tblptru	equ	0xFF8
  9008                           tblptrh	equ	0xFF7
  9009                           tblptrl	equ	0xFF6
  9010                           tablat	equ	0xFF5
  9011                           prodh	equ	0xFF4
  9012                           prodl	equ	0xFF3
  9013                           intcon	equ	0xFF2
  9014                           intcon2	equ	0xFF1
  9015                           postinc0	equ	0xFEE
  9016                           plusw0	equ	0xFEB
  9017                           wreg	equ	0xFE8
  9018                           indf1	equ	0xFE7
  9019                           postdec1	equ	0xFE5
  9020                           fsr1h	equ	0xFE2
  9021                           fsr1l	equ	0xFE1
  9022                           indf2	equ	0xFDF
  9023                           postinc2	equ	0xFDE
  9024                           postdec2	equ	0xFDD
  9025                           plusw2	equ	0xFDB
  9026                           fsr2h	equ	0xFDA
  9027                           fsr2l	equ	0xFD9
  9028                           status	equ	0xFD8
  9029                           
  9030 ;; *************** function _crc8 *****************
  9031 ;; Defined at:
  9032 ;;		line 13 in file "SystemCommon.c"
  9033 ;; Parameters:    Size  Location     Type
  9034 ;;  dataArray       2   23[COMRAM] PTR unsigned char 
  9035 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(9), SynthReadData@TxMsg(27), FlashReadCondition@TxMsg(9), 
  9036 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
  9037 ;;  dataSize        2   25[COMRAM] int 
  9038 ;; Auto vars:     Size  Location     Type
  9039 ;;  i               2   30[COMRAM] int 
  9040 ;;  crc             2   28[COMRAM] int 
  9041 ;; Return value:  Size  Location     Type
  9042 ;;                  1    wreg      unsigned char 
  9043 ;; Registers used:
  9044 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9045 ;; Tracked objects:
  9046 ;;		On entry : 0/0
  9047 ;;		On exit  : 0/0
  9048 ;;		Unchanged: 0/0
  9049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9050 ;;      Params:         4       0       0       0       0       0       0
  9051 ;;      Locals:         4       0       0       0       0       0       0
  9052 ;;      Temps:          1       0       0       0       0       0       0
  9053 ;;      Totals:         9       0       0       0       0       0       0
  9054 ;;Total ram usage:        9 bytes
  9055 ;; Hardware stack levels used:    1
  9056 ;; Hardware stack levels required when called:    3
  9057 ;; This function calls:
  9058 ;;		Nothing
  9059 ;; This function is called by:
  9060 ;;		_readUartMessage
  9061 ;;		_SendAckMessage
  9062 ;;		_FlashReadUart
  9063 ;;		_FlashReadCondition
  9064 ;;		_SynthReadData
  9065 ;;		_GetMcuFwVersion
  9066 ;;		_GetMcuRunTime
  9067 ;; This function uses a non-reentrant model
  9068 ;;
  9069                           
  9070                           	psect	text55
  9071  002F70                     __ptext55:
  9072                           	opt stack 0
  9073  002F70                     _crc8:
  9074                           	opt stack 26
  9075                           
  9076                           ;SystemCommon.c: 15: int crc = 0;
  9077                           
  9078                           ;incstack = 0
  9079  002F70  0E00               	movlw	0
  9080  002F72  6E1E               	movwf	crc8@crc+1,c
  9081  002F74  0E00               	movlw	0
  9082  002F76  6E1D               	movwf	crc8@crc,c
  9083                           
  9084                           ;SystemCommon.c: 16: for (int i = 0; i < dataSize; i++)
  9085  002F78  0E00               	movlw	0
  9086  002F7A  6E20               	movwf	crc8@i+1,c
  9087  002F7C  0E00               	movlw	0
  9088  002F7E  6E1F               	movwf	crc8@i,c
  9089  002F80  D00E               	goto	l1285
  9090  002F82                     
  9091                           ;SystemCommon.c: 17: {
  9092                           ;SystemCommon.c: 18: crc += dataArray[i];
  9093  002F82  501F               	movf	crc8@i,w,c
  9094  002F84  2418               	addwf	crc8@dataArray,w,c
  9095  002F86  6ED9               	movwf	fsr2l,c
  9096  002F88  5020               	movf	crc8@i+1,w,c
  9097  002F8A  2019               	addwfc	crc8@dataArray+1,w,c
  9098  002F8C  6EDA               	movwf	fsr2h,c
  9099  002F8E  50DF               	movf	indf2,w,c
  9100  002F90  6E1C               	movwf	??_crc8& (0+255),c
  9101  002F92  501C               	movf	??_crc8,w,c
  9102  002F94  261D               	addwf	crc8@crc,f,c
  9103  002F96  0E00               	movlw	0
  9104  002F98  221E               	addwfc	crc8@crc+1,f,c
  9105  002F9A  4A1F               	infsnz	crc8@i,f,c
  9106  002F9C  2A20               	incf	crc8@i+1,f,c
  9107  002F9E                     l1285:
  9108  002F9E  501A               	movf	crc8@dataSize,w,c
  9109  002FA0  5C1F               	subwf	crc8@i,w,c
  9110  002FA2  5020               	movf	crc8@i+1,w,c
  9111  002FA4  0A80               	xorlw	128
  9112  002FA6  6E1C               	movwf	??_crc8& (0+255),c
  9113  002FA8  501B               	movf	crc8@dataSize+1,w,c
  9114  002FAA  0A80               	xorlw	128
  9115  002FAC  581C               	subwfb	??_crc8& (0+255),w,c
  9116  002FAE  A0D8               	btfss	status,0,c
  9117  002FB0  D7E8               	goto	l1286
  9118                           
  9119                           ;SystemCommon.c: 19: }
  9120                           ;SystemCommon.c: 20: crc &= 0xff;
  9121  002FB2  0EFF               	movlw	255
  9122  002FB4  161D               	andwf	crc8@crc,f,c
  9123  002FB6  0E00               	movlw	0
  9124  002FB8  161E               	andwf	crc8@crc+1,f,c
  9125                           
  9126                           ;SystemCommon.c: 21: return crc;
  9127  002FBA  501D               	movf	crc8@crc,w,c
  9128  002FBC  0012               	return	
  9129  002FBE                     __end_of_crc8:
  9130                           	opt stack 0
  9131                           tosu	equ	0xFFF
  9132                           tosh	equ	0xFFE
  9133                           tosl	equ	0xFFD
  9134                           pclath	equ	0xFFA
  9135                           tblptru	equ	0xFF8
  9136                           tblptrh	equ	0xFF7
  9137                           tblptrl	equ	0xFF6
  9138                           tablat	equ	0xFF5
  9139                           prodh	equ	0xFF4
  9140                           prodl	equ	0xFF3
  9141                           intcon	equ	0xFF2
  9142                           intcon2	equ	0xFF1
  9143                           postinc0	equ	0xFEE
  9144                           plusw0	equ	0xFEB
  9145                           wreg	equ	0xFE8
  9146                           indf1	equ	0xFE7
  9147                           postdec1	equ	0xFE5
  9148                           fsr1h	equ	0xFE2
  9149                           fsr1l	equ	0xFE1
  9150                           indf2	equ	0xFDF
  9151                           postinc2	equ	0xFDE
  9152                           postdec2	equ	0xFDD
  9153                           plusw2	equ	0xFDB
  9154                           fsr2h	equ	0xFDA
  9155                           fsr2l	equ	0xFD9
  9156                           status	equ	0xFD8
  9157                           
  9158 ;; *************** function _ZeroArray *****************
  9159 ;; Defined at:
  9160 ;;		line 24 in file "SystemCommon.c"
  9161 ;; Parameters:    Size  Location     Type
  9162 ;;  array           2   31[COMRAM] PTR unsigned char 
  9163 ;;		 -> GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(10), SynthReadData@TxMsg(27), FlashReadCondition@TxMsg(9
      +), 
  9164 ;;		 -> FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), 
  9165 ;;		 -> rxMsgQueue(20), 
  9166 ;;  size            2   33[COMRAM] int 
  9167 ;; Auto vars:     Size  Location     Type
  9168 ;;		None
  9169 ;; Return value:  Size  Location     Type
  9170 ;;                  1    wreg      void 
  9171 ;; Registers used:
  9172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9173 ;; Tracked objects:
  9174 ;;		On entry : 0/0
  9175 ;;		On exit  : 0/0
  9176 ;;		Unchanged: 0/0
  9177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9178 ;;      Params:         4       0       0       0       0       0       0
  9179 ;;      Locals:         0       0       0       0       0       0       0
  9180 ;;      Temps:          0       0       0       0       0       0       0
  9181 ;;      Totals:         4       0       0       0       0       0       0
  9182 ;;Total ram usage:        4 bytes
  9183 ;; Hardware stack levels used:    1
  9184 ;; Hardware stack levels required when called:    4
  9185 ;; This function calls:
  9186 ;;		_memset
  9187 ;; This function is called by:
  9188 ;;		_readUartMessage
  9189 ;;		_InitRxMessageParams
  9190 ;;		_SendAckMessage
  9191 ;;		_FlashReadUart
  9192 ;;		_FlashEreaseMem
  9193 ;;		_FlashReadCondition
  9194 ;;		_SynthReadData
  9195 ;;		_GetIntFromUartData
  9196 ;;		_GetMcuFwVersion
  9197 ;; This function uses a non-reentrant model
  9198 ;;
  9199                           
  9200                           	psect	text56
  9201  003796                     __ptext56:
  9202                           	opt stack 0
  9203  003796                     _ZeroArray:
  9204                           	opt stack 25
  9205                           
  9206                           ;SystemCommon.c: 26: memset(array, 0x0, size);
  9207                           
  9208                           ;incstack = 0
  9209  003796  C020  F018         	movff	ZeroArray@array,memset@p1
  9210  00379A  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
  9211  00379E  0E00               	movlw	0
  9212  0037A0  6E1B               	movwf	memset@c+1,c
  9213  0037A2  0E00               	movlw	0
  9214  0037A4  6E1A               	movwf	memset@c,c
  9215  0037A6  C022  F01C         	movff	ZeroArray@size,memset@n
  9216  0037AA  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
  9217  0037AE  ECDD  F01A         	call	_memset	;wreg free
  9218  0037B2  0012               	return		;funcret
  9219  0037B4                     __end_of_ZeroArray:
  9220                           	opt stack 0
  9221                           tosu	equ	0xFFF
  9222                           tosh	equ	0xFFE
  9223                           tosl	equ	0xFFD
  9224                           pclath	equ	0xFFA
  9225                           tblptru	equ	0xFF8
  9226                           tblptrh	equ	0xFF7
  9227                           tblptrl	equ	0xFF6
  9228                           tablat	equ	0xFF5
  9229                           prodh	equ	0xFF4
  9230                           prodl	equ	0xFF3
  9231                           intcon	equ	0xFF2
  9232                           intcon2	equ	0xFF1
  9233                           postinc0	equ	0xFEE
  9234                           plusw0	equ	0xFEB
  9235                           wreg	equ	0xFE8
  9236                           indf1	equ	0xFE7
  9237                           postdec1	equ	0xFE5
  9238                           fsr1h	equ	0xFE2
  9239                           fsr1l	equ	0xFE1
  9240                           indf2	equ	0xFDF
  9241                           postinc2	equ	0xFDE
  9242                           postdec2	equ	0xFDD
  9243                           plusw2	equ	0xFDB
  9244                           fsr2h	equ	0xFDA
  9245                           fsr2l	equ	0xFD9
  9246                           status	equ	0xFD8
  9247                           
  9248 ;; *************** function _WriteUartMessage *****************
  9249 ;; Defined at:
  9250 ;;		line 158 in file "EusartApp.c"
  9251 ;; Parameters:    Size  Location     Type
  9252 ;;  dataBuf         2   24[COMRAM] PTR unsigned char 
  9253 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(9), SynthReadData@TxMsg(27), FlashReadCondition@TxMsg(9), 
  9254 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), 
  9255 ;;  dataSize        2   26[COMRAM] int 
  9256 ;; Auto vars:     Size  Location     Type
  9257 ;;  idx             2   29[COMRAM] int 
  9258 ;; Return value:  Size  Location     Type
  9259 ;;                  1    wreg      void 
  9260 ;; Registers used:
  9261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9262 ;; Tracked objects:
  9263 ;;		On entry : 0/0
  9264 ;;		On exit  : 0/0
  9265 ;;		Unchanged: 0/0
  9266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9267 ;;      Params:         4       0       0       0       0       0       0
  9268 ;;      Locals:         2       0       0       0       0       0       0
  9269 ;;      Temps:          1       0       0       0       0       0       0
  9270 ;;      Totals:         7       0       0       0       0       0       0
  9271 ;;Total ram usage:        7 bytes
  9272 ;; Hardware stack levels used:    1
  9273 ;; Hardware stack levels required when called:    4
  9274 ;; This function calls:
  9275 ;;		_EUSART1_Write
  9276 ;; This function is called by:
  9277 ;;		_SendAckMessage
  9278 ;;		_FlashReadUart
  9279 ;;		_FlashReadCondition
  9280 ;;		_SynthReadData
  9281 ;;		_GetMcuFwVersion
  9282 ;;		_GetMcuRunTime
  9283 ;; This function uses a non-reentrant model
  9284 ;;
  9285                           
  9286                           	psect	text57
  9287  0033FE                     __ptext57:
  9288                           	opt stack 0
  9289  0033FE                     _WriteUartMessage:
  9290                           	opt stack 22
  9291                           
  9292                           ;EusartApp.c: 160: for(int idx = 0; idx < dataSize; idx++)
  9293                           
  9294                           ;incstack = 0
  9295  0033FE  0E00               	movlw	0
  9296  003400  6E1F               	movwf	WriteUartMessage@idx+1,c
  9297  003402  0E00               	movlw	0
  9298  003404  6E1E               	movwf	WriteUartMessage@idx,c
  9299  003406  D00B               	goto	l222
  9300  003408                     
  9301                           ;EusartApp.c: 161: {
  9302                           ;EusartApp.c: 162: EUSART1_Write(dataBuf[idx]);
  9303  003408  501E               	movf	WriteUartMessage@idx,w,c
  9304  00340A  2419               	addwf	WriteUartMessage@dataBuf,w,c
  9305  00340C  6ED9               	movwf	fsr2l,c
  9306  00340E  501F               	movf	WriteUartMessage@idx+1,w,c
  9307  003410  201A               	addwfc	WriteUartMessage@dataBuf+1,w,c
  9308  003412  6EDA               	movwf	fsr2h,c
  9309  003414  50DF               	movf	indf2,w,c
  9310  003416  EC1B  F019         	call	_EUSART1_Write
  9311  00341A  4A1E               	infsnz	WriteUartMessage@idx,f,c
  9312  00341C  2A1F               	incf	WriteUartMessage@idx+1,f,c
  9313  00341E                     l222:
  9314  00341E  501B               	movf	WriteUartMessage@dataSize,w,c
  9315  003420  5C1E               	subwf	WriteUartMessage@idx,w,c
  9316  003422  501F               	movf	WriteUartMessage@idx+1,w,c
  9317  003424  0A80               	xorlw	128
  9318  003426  6E1D               	movwf	??_WriteUartMessage& (0+255),c
  9319  003428  501C               	movf	WriteUartMessage@dataSize+1,w,c
  9320  00342A  0A80               	xorlw	128
  9321  00342C  581D               	subwfb	??_WriteUartMessage& (0+255),w,c
  9322  00342E  B0D8               	btfsc	status,0,c
  9323  003430  0012               	return	
  9324  003432  D7EA               	goto	l223
  9325  003434                     __end_of_WriteUartMessage:
  9326                           	opt stack 0
  9327                           tosu	equ	0xFFF
  9328                           tosh	equ	0xFFE
  9329                           tosl	equ	0xFFD
  9330                           pclath	equ	0xFFA
  9331                           tblptru	equ	0xFF8
  9332                           tblptrh	equ	0xFF7
  9333                           tblptrl	equ	0xFF6
  9334                           tablat	equ	0xFF5
  9335                           prodh	equ	0xFF4
  9336                           prodl	equ	0xFF3
  9337                           intcon	equ	0xFF2
  9338                           intcon2	equ	0xFF1
  9339                           postinc0	equ	0xFEE
  9340                           plusw0	equ	0xFEB
  9341                           wreg	equ	0xFE8
  9342                           indf1	equ	0xFE7
  9343                           postdec1	equ	0xFE5
  9344                           fsr1h	equ	0xFE2
  9345                           fsr1l	equ	0xFE1
  9346                           indf2	equ	0xFDF
  9347                           postinc2	equ	0xFDE
  9348                           postdec2	equ	0xFDD
  9349                           plusw2	equ	0xFDB
  9350                           fsr2h	equ	0xFDA
  9351                           fsr2l	equ	0xFD9
  9352                           status	equ	0xFD8
  9353                           
  9354 ;; *************** function _EUSART1_Write *****************
  9355 ;; Defined at:
  9356 ;;		line 157 in file "mcc_generated_files/eusart1.c"
  9357 ;; Parameters:    Size  Location     Type
  9358 ;;  txData          1    wreg     unsigned char 
  9359 ;; Auto vars:     Size  Location     Type
  9360 ;;  txData          1   23[COMRAM] unsigned char 
  9361 ;; Return value:  Size  Location     Type
  9362 ;;                  1    wreg      void 
  9363 ;; Registers used:
  9364 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9365 ;; Tracked objects:
  9366 ;;		On entry : 0/0
  9367 ;;		On exit  : 0/0
  9368 ;;		Unchanged: 0/0
  9369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9370 ;;      Params:         0       0       0       0       0       0       0
  9371 ;;      Locals:         1       0       0       0       0       0       0
  9372 ;;      Temps:          0       0       0       0       0       0       0
  9373 ;;      Totals:         1       0       0       0       0       0       0
  9374 ;;Total ram usage:        1 bytes
  9375 ;; Hardware stack levels used:    1
  9376 ;; Hardware stack levels required when called:    3
  9377 ;; This function calls:
  9378 ;;		Nothing
  9379 ;; This function is called by:
  9380 ;;		_WriteUartMessage
  9381 ;; This function uses a non-reentrant model
  9382 ;;
  9383                           
  9384                           	psect	text58
  9385  003236                     __ptext58:
  9386                           	opt stack 0
  9387  003236                     _EUSART1_Write:
  9388                           	opt stack 22
  9389                           
  9390                           ;incstack = 0
  9391                           ;EUSART1_Write@txData stored from wreg
  9392  003236  6E18               	movwf	EUSART1_Write@txData,c
  9393  003238                     
  9394                           ;eusart1.c: 160: {
  9395                           
  9396                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
  9397  003238  0100               	movlb	0	; () banked
  9398  00323A  51FF               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
  9399  00323C  B4D8               	btfsc	status,2,c
  9400  00323E  D7FC               	goto	l6836
  9401                           
  9402                           ; BSR set to: 0
  9403                           ;eusart1.c: 161: }
  9404                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
  9405  003240  B89D               	btfsc	3997,4,c	;volatile
  9406  003242  D003               	goto	l857
  9407                           
  9408                           ; BSR set to: 0
  9409                           ;eusart1.c: 164: {
  9410                           ;eusart1.c: 165: TXREG1 = txData;
  9411  003244  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  9412                           
  9413                           ;eusart1.c: 166: }
  9414  003248  D012               	goto	l858
  9415  00324A                     l857:
  9416                           
  9417                           ; BSR set to: 0
  9418                           ;eusart1.c: 167: else
  9419                           ;eusart1.c: 168: {
  9420                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
  9421  00324A  989D               	bcf	3997,4,c	;volatile
  9422                           
  9423                           ; BSR set to: 0
  9424                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
  9425  00324C  5039               	movf	_eusart1TxHead,w,c	;volatile
  9426  00324E  0D01               	mullw	1
  9427  003250  0E00               	movlw	low _eusart1TxBuffer
  9428  003252  24F3               	addwf	prodl,w,c
  9429  003254  6ED9               	movwf	fsr2l,c
  9430  003256  0E01               	movlw	high _eusart1TxBuffer
  9431  003258  20F4               	addwfc	prodh,w,c
  9432  00325A  6EDA               	movwf	fsr2h,c
  9433  00325C  C018  FFDF         	movff	EUSART1_Write@txData,indf2
  9434                           
  9435                           ; BSR set to: 0
  9436  003260  2A39               	incf	_eusart1TxHead,f,c	;volatile
  9437                           
  9438                           ; BSR set to: 0
  9439                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  9440  003262  0E45               	movlw	69
  9441  003264  6439               	cpfsgt	_eusart1TxHead,c	;volatile
  9442  003266  D002               	goto	l859
  9443                           
  9444                           ; BSR set to: 0
  9445                           ;eusart1.c: 172: {
  9446                           ;eusart1.c: 173: eusart1TxHead = 0;
  9447  003268  0E00               	movlw	0
  9448  00326A  6E39               	movwf	_eusart1TxHead,c	;volatile
  9449  00326C                     l859:
  9450                           
  9451                           ; BSR set to: 0
  9452                           ;eusart1.c: 174: }
  9453                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
  9454                           
  9455                           ; BSR set to: 0
  9456  00326C  07FF               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
  9457  00326E                     l858:
  9458                           
  9459                           ; BSR set to: 0
  9460                           ;eusart1.c: 176: }
  9461                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
  9462                           
  9463                           ; BSR set to: 0
  9464  00326E  889D               	bsf	3997,4,c	;volatile
  9465                           
  9466                           ; BSR set to: 0
  9467  003270  0012               	return		;funcret
  9468  003272                     __end_of_EUSART1_Write:
  9469                           	opt stack 0
  9470                           tosu	equ	0xFFF
  9471                           tosh	equ	0xFFE
  9472                           tosl	equ	0xFFD
  9473                           pclath	equ	0xFFA
  9474                           tblptru	equ	0xFF8
  9475                           tblptrh	equ	0xFF7
  9476                           tblptrl	equ	0xFF6
  9477                           tablat	equ	0xFF5
  9478                           prodh	equ	0xFF4
  9479                           prodl	equ	0xFF3
  9480                           intcon	equ	0xFF2
  9481                           intcon2	equ	0xFF1
  9482                           postinc0	equ	0xFEE
  9483                           plusw0	equ	0xFEB
  9484                           wreg	equ	0xFE8
  9485                           indf1	equ	0xFE7
  9486                           postdec1	equ	0xFE5
  9487                           fsr1h	equ	0xFE2
  9488                           fsr1l	equ	0xFE1
  9489                           indf2	equ	0xFDF
  9490                           postinc2	equ	0xFDE
  9491                           postdec2	equ	0xFDD
  9492                           plusw2	equ	0xFDB
  9493                           fsr2h	equ	0xFDA
  9494                           fsr2l	equ	0xFD9
  9495                           status	equ	0xFD8
  9496                           
  9497 ;; *************** function _InitSystemApplicationManagers *****************
  9498 ;; Defined at:
  9499 ;;		line 33 in file "SystemSettings.c"
  9500 ;; Parameters:    Size  Location     Type
  9501 ;;		None
  9502 ;; Auto vars:     Size  Location     Type
  9503 ;;		None
  9504 ;; Return value:  Size  Location     Type
  9505 ;;                  1    wreg      void 
  9506 ;; Registers used:
  9507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9508 ;; Tracked objects:
  9509 ;;		On entry : 0/0
  9510 ;;		On exit  : 0/0
  9511 ;;		Unchanged: 0/0
  9512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9513 ;;      Params:         0       0       0       0       0       0       0
  9514 ;;      Locals:         0       0       0       0       0       0       0
  9515 ;;      Temps:          0       0       0       0       0       0       0
  9516 ;;      Totals:         0       0       0       0       0       0       0
  9517 ;;Total ram usage:        0 bytes
  9518 ;; Hardware stack levels used:    1
  9519 ;; Hardware stack levels required when called:   10
  9520 ;; This function calls:
  9521 ;;		_ClearMcuRunTime
  9522 ;;		_DacInit
  9523 ;;		_InitAdcApplicationMgr
  9524 ;;		_PLLInitialize
  9525 ;;		_TMR0_StartTimer
  9526 ;; This function is called by:
  9527 ;;		_main
  9528 ;; This function uses a non-reentrant model
  9529 ;;
  9530                           
  9531                           	psect	text59
  9532  003836                     __ptext59:
  9533                           	opt stack 0
  9534  003836                     _InitSystemApplicationManagers:
  9535                           	opt stack 20
  9536                           
  9537                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
  9538                           
  9539                           ; BSR set to: 0
  9540                           ;incstack = 0
  9541  003836  EC55  F01C         	call	_InitAdcApplicationMgr	;wreg free
  9542                           
  9543                           ;SystemSettings.c: 39: TMR0_StartTimer();
  9544  00383A  ECB2  F01C         	call	_TMR0_StartTimer	;wreg free
  9545                           
  9546                           ;SystemSettings.c: 42: PLLInitialize();
  9547  00383E  EC72  F01C         	call	_PLLInitialize	;wreg free
  9548                           
  9549                           ;SystemSettings.c: 45: ClearMcuRunTime();
  9550  003842  EC3A  F01C         	call	_ClearMcuRunTime	;wreg free
  9551                           
  9552                           ;SystemSettings.c: 48: DacInit();
  9553  003846  ECE2  F012         	call	_DacInit	;wreg free
  9554  00384A  0012               	return		;funcret
  9555  00384C                     __end_of_InitSystemApplicationManagers:
  9556                           	opt stack 0
  9557                           tosu	equ	0xFFF
  9558                           tosh	equ	0xFFE
  9559                           tosl	equ	0xFFD
  9560                           pclath	equ	0xFFA
  9561                           tblptru	equ	0xFF8
  9562                           tblptrh	equ	0xFF7
  9563                           tblptrl	equ	0xFF6
  9564                           tablat	equ	0xFF5
  9565                           prodh	equ	0xFF4
  9566                           prodl	equ	0xFF3
  9567                           intcon	equ	0xFF2
  9568                           intcon2	equ	0xFF1
  9569                           postinc0	equ	0xFEE
  9570                           plusw0	equ	0xFEB
  9571                           wreg	equ	0xFE8
  9572                           indf1	equ	0xFE7
  9573                           postdec1	equ	0xFE5
  9574                           fsr1h	equ	0xFE2
  9575                           fsr1l	equ	0xFE1
  9576                           indf2	equ	0xFDF
  9577                           postinc2	equ	0xFDE
  9578                           postdec2	equ	0xFDD
  9579                           plusw2	equ	0xFDB
  9580                           fsr2h	equ	0xFDA
  9581                           fsr2l	equ	0xFD9
  9582                           status	equ	0xFD8
  9583                           
  9584 ;; *************** function _TMR0_StartTimer *****************
  9585 ;; Defined at:
  9586 ;;		line 93 in file "mcc_generated_files/tmr0.c"
  9587 ;; Parameters:    Size  Location     Type
  9588 ;;		None
  9589 ;; Auto vars:     Size  Location     Type
  9590 ;;		None
  9591 ;; Return value:  Size  Location     Type
  9592 ;;                  1    wreg      void 
  9593 ;; Registers used:
  9594 ;;		None
  9595 ;; Tracked objects:
  9596 ;;		On entry : 0/0
  9597 ;;		On exit  : 0/0
  9598 ;;		Unchanged: 0/0
  9599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9600 ;;      Params:         0       0       0       0       0       0       0
  9601 ;;      Locals:         0       0       0       0       0       0       0
  9602 ;;      Temps:          0       0       0       0       0       0       0
  9603 ;;      Totals:         0       0       0       0       0       0       0
  9604 ;;Total ram usage:        0 bytes
  9605 ;; Hardware stack levels used:    1
  9606 ;; Hardware stack levels required when called:    3
  9607 ;; This function calls:
  9608 ;;		Nothing
  9609 ;; This function is called by:
  9610 ;;		_InitSystemApplicationManagers
  9611 ;; This function uses a non-reentrant model
  9612 ;;
  9613                           
  9614                           	psect	text60
  9615  003964                     __ptext60:
  9616                           	opt stack 0
  9617  003964                     _TMR0_StartTimer:
  9618                           	opt stack 26
  9619                           
  9620                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
  9621                           
  9622                           ;incstack = 0
  9623  003964  8ED5               	bsf	4053,7,c	;volatile
  9624  003966  0012               	return		;funcret
  9625  003968                     __end_of_TMR0_StartTimer:
  9626                           	opt stack 0
  9627                           tosu	equ	0xFFF
  9628                           tosh	equ	0xFFE
  9629                           tosl	equ	0xFFD
  9630                           pclath	equ	0xFFA
  9631                           tblptru	equ	0xFF8
  9632                           tblptrh	equ	0xFF7
  9633                           tblptrl	equ	0xFF6
  9634                           tablat	equ	0xFF5
  9635                           prodh	equ	0xFF4
  9636                           prodl	equ	0xFF3
  9637                           intcon	equ	0xFF2
  9638                           intcon2	equ	0xFF1
  9639                           postinc0	equ	0xFEE
  9640                           plusw0	equ	0xFEB
  9641                           wreg	equ	0xFE8
  9642                           indf1	equ	0xFE7
  9643                           postdec1	equ	0xFE5
  9644                           fsr1h	equ	0xFE2
  9645                           fsr1l	equ	0xFE1
  9646                           indf2	equ	0xFDF
  9647                           postinc2	equ	0xFDE
  9648                           postdec2	equ	0xFDD
  9649                           plusw2	equ	0xFDB
  9650                           fsr2h	equ	0xFDA
  9651                           fsr2l	equ	0xFD9
  9652                           status	equ	0xFD8
  9653                           
  9654 ;; *************** function _PLLInitialize *****************
  9655 ;; Defined at:
  9656 ;;		line 19 in file "SyntApp.c"
  9657 ;; Parameters:    Size  Location     Type
  9658 ;;		None
  9659 ;; Auto vars:     Size  Location     Type
  9660 ;;		None
  9661 ;; Return value:  Size  Location     Type
  9662 ;;                  1    wreg      void 
  9663 ;; Registers used:
  9664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9665 ;; Tracked objects:
  9666 ;;		On entry : 0/0
  9667 ;;		On exit  : 0/0
  9668 ;;		Unchanged: 0/0
  9669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9670 ;;      Params:         0       0       0       0       0       0       0
  9671 ;;      Locals:         0       0       0       0       0       0       0
  9672 ;;      Temps:          0       0       0       0       0       0       0
  9673 ;;      Totals:         0       0       0       0       0       0       0
  9674 ;;Total ram usage:        0 bytes
  9675 ;; Hardware stack levels used:    1
  9676 ;; Hardware stack levels required when called:    8
  9677 ;; This function calls:
  9678 ;;		_InitRxSynth
  9679 ;;		_InitTxSynth
  9680 ;; This function is called by:
  9681 ;;		_InitSystemApplicationManagers
  9682 ;; This function uses a non-reentrant model
  9683 ;;
  9684                           
  9685                           	psect	text61
  9686  0038E4                     __ptext61:
  9687                           	opt stack 0
  9688  0038E4                     _PLLInitialize:
  9689                           	opt stack 21
  9690                           
  9691                           ;SyntApp.c: 22: IOCB = 0b10000000;
  9692                           
  9693                           ;incstack = 0
  9694  0038E4  0E80               	movlw	128
  9695  0038E6  6E62               	movwf	3938,c	;volatile
  9696                           
  9697                           ;SyntApp.c: 25: InitTxSynth();
  9698  0038E8  ECDF  F017         	call	_InitTxSynth	;wreg free
  9699                           
  9700                           ;SyntApp.c: 26: InitRxSynth();
  9701  0038EC  EC05  F018         	call	_InitRxSynth	;wreg free
  9702  0038F0  0012               	return		;funcret
  9703  0038F2                     __end_of_PLLInitialize:
  9704                           	opt stack 0
  9705                           tosu	equ	0xFFF
  9706                           tosh	equ	0xFFE
  9707                           tosl	equ	0xFFD
  9708                           pclath	equ	0xFFA
  9709                           tblptru	equ	0xFF8
  9710                           tblptrh	equ	0xFF7
  9711                           tblptrl	equ	0xFF6
  9712                           tablat	equ	0xFF5
  9713                           prodh	equ	0xFF4
  9714                           prodl	equ	0xFF3
  9715                           intcon	equ	0xFF2
  9716                           intcon2	equ	0xFF1
  9717                           postinc0	equ	0xFEE
  9718                           plusw0	equ	0xFEB
  9719                           wreg	equ	0xFE8
  9720                           indf1	equ	0xFE7
  9721                           postdec1	equ	0xFE5
  9722                           fsr1h	equ	0xFE2
  9723                           fsr1l	equ	0xFE1
  9724                           indf2	equ	0xFDF
  9725                           postinc2	equ	0xFDE
  9726                           postdec2	equ	0xFDD
  9727                           plusw2	equ	0xFDB
  9728                           fsr2h	equ	0xFDA
  9729                           fsr2l	equ	0xFD9
  9730                           status	equ	0xFD8
  9731                           
  9732 ;; *************** function _InitTxSynth *****************
  9733 ;; Defined at:
  9734 ;;		line 35 in file "SyntApp.c"
  9735 ;; Parameters:    Size  Location     Type
  9736 ;;		None
  9737 ;; Auto vars:     Size  Location     Type
  9738 ;;  idx             1   46[COMRAM] unsigned char 
  9739 ;; Return value:  Size  Location     Type
  9740 ;;                  1    wreg      void 
  9741 ;; Registers used:
  9742 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9743 ;; Tracked objects:
  9744 ;;		On entry : 0/0
  9745 ;;		On exit  : 0/0
  9746 ;;		Unchanged: 0/0
  9747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9748 ;;      Params:         0       0       0       0       0       0       0
  9749 ;;      Locals:         1       0       0       0       0       0       0
  9750 ;;      Temps:          0       0       0       0       0       0       0
  9751 ;;      Totals:         1       0       0       0       0       0       0
  9752 ;;Total ram usage:        1 bytes
  9753 ;; Hardware stack levels used:    1
  9754 ;; Hardware stack levels required when called:    7
  9755 ;; This function calls:
  9756 ;;		_SWSPI_send_word
  9757 ;;		_SwSpi_Set_CE_Pin
  9758 ;; This function is called by:
  9759 ;;		_PLLInitialize
  9760 ;;		_SetSynthTxOper
  9761 ;; This function uses a non-reentrant model
  9762 ;;
  9763                           
  9764                           	psect	text62
  9765  002FBE                     __ptext62:
  9766                           	opt stack 0
  9767  002FBE                     _InitTxSynth:
  9768                           	opt stack 20
  9769                           
  9770                           ;SyntApp.c: 38: SwSpi_Set_CE_Pin(SYNTH_TX, 1);
  9771                           
  9772                           ;incstack = 0
  9773  002FBE  0E01               	movlw	1
  9774  002FC0  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  9775  002FC2  0E00               	movlw	0
  9776  002FC4  EC39  F019         	call	_SwSpi_Set_CE_Pin
  9777                           
  9778                           ;SyntApp.c: 42: for(uint8_t idx = 0; idx < 13; idx++)
  9779  002FC8  0E00               	movlw	0
  9780  002FCA  6E2F               	movwf	InitTxSynth@idx,c
  9781  002FCC                     l7480:
  9782  002FCC  0E0C               	movlw	12
  9783  002FCE  642F               	cpfsgt	InitTxSynth@idx,c
  9784  002FD0  D001               	goto	l489
  9785  002FD2  0012               	return	
  9786  002FD4                     l489:
  9787                           
  9788                           ;SyntApp.c: 43: {
  9789                           ;SyntApp.c: 44: SWSPI_send_word(SYNTH_TX, SYNTH_REGS[idx],3);
  9790  002FD4  502F               	movf	InitTxSynth@idx,w,c
  9791  002FD6  0D04               	mullw	4
  9792  002FD8  0E01               	movlw	low _SYNTH_REGS
  9793  002FDA  24F3               	addwf	prodl,w,c
  9794  002FDC  6EF6               	movwf	tblptrl,c
  9795  002FDE  0E06               	movlw	high _SYNTH_REGS
  9796  002FE0  20F4               	addwfc	prodh,w,c
  9797  002FE2  6EF7               	movwf	tblptrh,c
  9798  002FE4                     	if	0	;There are less than 3 active tblptr bytes
  9799  002FE4                     	endif
  9800  002FE4  0009               	tblrd		*+
  9801  002FE6  CFF5 F026          	movff	tablat,SWSPI_send_word@data
  9802  002FEA  0009               	tblrd		*+
  9803  002FEC  CFF5 F027          	movff	tablat,SWSPI_send_word@data+1
  9804  002FF0  0009               	tblrd		*+
  9805  002FF2  CFF5 F028          	movff	tablat,SWSPI_send_word@data+2
  9806  002FF6  000A               	tblrd		*-
  9807  002FF8  CFF5 F029          	movff	tablat,SWSPI_send_word@data+3
  9808  002FFC  0E03               	movlw	3
  9809  002FFE  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9810  003000  0E00               	movlw	0
  9811  003002  EC4A  F012         	call	_SWSPI_send_word
  9812  003006  2A2F               	incf	InitTxSynth@idx,f,c
  9813  003008  D7E1               	goto	l7480
  9814  00300A                     __end_of_InitTxSynth:
  9815                           	opt stack 0
  9816                           tosu	equ	0xFFF
  9817                           tosh	equ	0xFFE
  9818                           tosl	equ	0xFFD
  9819                           pclath	equ	0xFFA
  9820                           tblptru	equ	0xFF8
  9821                           tblptrh	equ	0xFF7
  9822                           tblptrl	equ	0xFF6
  9823                           tablat	equ	0xFF5
  9824                           prodh	equ	0xFF4
  9825                           prodl	equ	0xFF3
  9826                           intcon	equ	0xFF2
  9827                           intcon2	equ	0xFF1
  9828                           postinc0	equ	0xFEE
  9829                           plusw0	equ	0xFEB
  9830                           wreg	equ	0xFE8
  9831                           indf1	equ	0xFE7
  9832                           postdec1	equ	0xFE5
  9833                           fsr1h	equ	0xFE2
  9834                           fsr1l	equ	0xFE1
  9835                           indf2	equ	0xFDF
  9836                           postinc2	equ	0xFDE
  9837                           postdec2	equ	0xFDD
  9838                           plusw2	equ	0xFDB
  9839                           fsr2h	equ	0xFDA
  9840                           fsr2l	equ	0xFD9
  9841                           status	equ	0xFD8
  9842                           
  9843 ;; *************** function _InitRxSynth *****************
  9844 ;; Defined at:
  9845 ;;		line 48 in file "SyntApp.c"
  9846 ;; Parameters:    Size  Location     Type
  9847 ;;		None
  9848 ;; Auto vars:     Size  Location     Type
  9849 ;;  idx             1   46[COMRAM] unsigned char 
  9850 ;; Return value:  Size  Location     Type
  9851 ;;                  1    wreg      void 
  9852 ;; Registers used:
  9853 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9854 ;; Tracked objects:
  9855 ;;		On entry : 0/0
  9856 ;;		On exit  : 0/0
  9857 ;;		Unchanged: 0/0
  9858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9859 ;;      Params:         0       0       0       0       0       0       0
  9860 ;;      Locals:         1       0       0       0       0       0       0
  9861 ;;      Temps:          0       0       0       0       0       0       0
  9862 ;;      Totals:         1       0       0       0       0       0       0
  9863 ;;Total ram usage:        1 bytes
  9864 ;; Hardware stack levels used:    1
  9865 ;; Hardware stack levels required when called:    7
  9866 ;; This function calls:
  9867 ;;		_SWSPI_send_word
  9868 ;;		_SwSpi_Set_CE_Pin
  9869 ;; This function is called by:
  9870 ;;		_PLLInitialize
  9871 ;;		_SetSynthRxOper
  9872 ;; This function uses a non-reentrant model
  9873 ;;
  9874                           
  9875                           	psect	text63
  9876  00300A                     __ptext63:
  9877                           	opt stack 0
  9878  00300A                     _InitRxSynth:
  9879                           	opt stack 20
  9880                           
  9881                           ;SyntApp.c: 51: SwSpi_Set_CE_Pin(SYNTH_RX, 1);
  9882                           
  9883                           ;incstack = 0
  9884  00300A  0E01               	movlw	1
  9885  00300C  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  9886  00300E  0E01               	movlw	1
  9887  003010  EC39  F019         	call	_SwSpi_Set_CE_Pin
  9888                           
  9889                           ;SyntApp.c: 54: for(uint8_t idx = 0; idx < 13; idx++)
  9890  003014  0E00               	movlw	0
  9891  003016  6E2F               	movwf	InitRxSynth@idx,c
  9892  003018                     l7494:
  9893  003018  0E0C               	movlw	12
  9894  00301A  642F               	cpfsgt	InitRxSynth@idx,c
  9895  00301C  D001               	goto	l494
  9896  00301E  0012               	return	
  9897  003020                     l494:
  9898                           
  9899                           ;SyntApp.c: 55: {
  9900                           ;SyntApp.c: 56: SWSPI_send_word(SYNTH_RX, SYNTH_REGS[idx],3);
  9901  003020  502F               	movf	InitRxSynth@idx,w,c
  9902  003022  0D04               	mullw	4
  9903  003024  0E01               	movlw	low _SYNTH_REGS
  9904  003026  24F3               	addwf	prodl,w,c
  9905  003028  6EF6               	movwf	tblptrl,c
  9906  00302A  0E06               	movlw	high _SYNTH_REGS
  9907  00302C  20F4               	addwfc	prodh,w,c
  9908  00302E  6EF7               	movwf	tblptrh,c
  9909  003030                     	if	0	;There are less than 3 active tblptr bytes
  9910  003030                     	endif
  9911  003030  0009               	tblrd		*+
  9912  003032  CFF5 F026          	movff	tablat,SWSPI_send_word@data
  9913  003036  0009               	tblrd		*+
  9914  003038  CFF5 F027          	movff	tablat,SWSPI_send_word@data+1
  9915  00303C  0009               	tblrd		*+
  9916  00303E  CFF5 F028          	movff	tablat,SWSPI_send_word@data+2
  9917  003042  000A               	tblrd		*-
  9918  003044  CFF5 F029          	movff	tablat,SWSPI_send_word@data+3
  9919  003048  0E03               	movlw	3
  9920  00304A  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9921  00304C  0E01               	movlw	1
  9922  00304E  EC4A  F012         	call	_SWSPI_send_word
  9923  003052  2A2F               	incf	InitRxSynth@idx,f,c
  9924  003054  D7E1               	goto	l7494
  9925  003056                     __end_of_InitRxSynth:
  9926                           	opt stack 0
  9927                           tosu	equ	0xFFF
  9928                           tosh	equ	0xFFE
  9929                           tosl	equ	0xFFD
  9930                           pclath	equ	0xFFA
  9931                           tblptru	equ	0xFF8
  9932                           tblptrh	equ	0xFF7
  9933                           tblptrl	equ	0xFF6
  9934                           tablat	equ	0xFF5
  9935                           prodh	equ	0xFF4
  9936                           prodl	equ	0xFF3
  9937                           intcon	equ	0xFF2
  9938                           intcon2	equ	0xFF1
  9939                           postinc0	equ	0xFEE
  9940                           plusw0	equ	0xFEB
  9941                           wreg	equ	0xFE8
  9942                           indf1	equ	0xFE7
  9943                           postdec1	equ	0xFE5
  9944                           fsr1h	equ	0xFE2
  9945                           fsr1l	equ	0xFE1
  9946                           indf2	equ	0xFDF
  9947                           postinc2	equ	0xFDE
  9948                           postdec2	equ	0xFDD
  9949                           plusw2	equ	0xFDB
  9950                           fsr2h	equ	0xFDA
  9951                           fsr2l	equ	0xFD9
  9952                           status	equ	0xFD8
  9953                           
  9954 ;; *************** function _SwSpi_Set_CE_Pin *****************
  9955 ;; Defined at:
  9956 ;;		line 201 in file "SwSpiApp.c"
  9957 ;; Parameters:    Size  Location     Type
  9958 ;;  phrType         1    wreg     enum E7559
  9959 ;;  cPinMode        1   23[COMRAM] unsigned char 
  9960 ;; Auto vars:     Size  Location     Type
  9961 ;;  phrType         1   24[COMRAM] enum E7559
  9962 ;; Return value:  Size  Location     Type
  9963 ;;                  1    wreg      void 
  9964 ;; Registers used:
  9965 ;;		wreg, status,2, status,0
  9966 ;; Tracked objects:
  9967 ;;		On entry : 0/0
  9968 ;;		On exit  : 0/0
  9969 ;;		Unchanged: 0/0
  9970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9971 ;;      Params:         1       0       0       0       0       0       0
  9972 ;;      Locals:         1       0       0       0       0       0       0
  9973 ;;      Temps:          0       0       0       0       0       0       0
  9974 ;;      Totals:         2       0       0       0       0       0       0
  9975 ;;Total ram usage:        2 bytes
  9976 ;; Hardware stack levels used:    1
  9977 ;; Hardware stack levels required when called:    3
  9978 ;; This function calls:
  9979 ;;		Nothing
  9980 ;; This function is called by:
  9981 ;;		_InitTxSynth
  9982 ;;		_InitRxSynth
  9983 ;;		_SetSynthTxOper
  9984 ;;		_SetSynthRxOper
  9985 ;; This function uses a non-reentrant model
  9986 ;;
  9987                           
  9988                           	psect	text64
  9989  003272                     __ptext64:
  9990                           	opt stack 0
  9991  003272                     _SwSpi_Set_CE_Pin:
  9992                           	opt stack 24
  9993                           
  9994                           ;incstack = 0
  9995                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
  9996  003272  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
  9997                           
  9998                           ;SwSpiApp.c: 203: switch(phrType)
  9999  003274  D014               	goto	l676
 10000  003276                     
 10001                           ;SwSpiApp.c: 206: if(cPinMode == 1)
 10002  003276  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 10003  003278  A4D8               	btfss	status,2,c
 10004  00327A  D002               	goto	l678
 10005                           
 10006                           ;SwSpiApp.c: 207: {
 10007                           ;SwSpiApp.c: 208: do { LATCbits.LATC1 = 1; } while(0);
 10008  00327C  828B               	bsf	3979,1,c	;volatile
 10009                           
 10010                           ;SwSpiApp.c: 209: }
 10011  00327E  0012               	return	
 10012  003280                     l678:
 10013                           
 10014                           ;SwSpiApp.c: 210: else if(cPinMode == 0)
 10015  003280  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 10016  003282  A4D8               	btfss	status,2,c
 10017  003284  0012               	return	
 10018                           
 10019                           ;SwSpiApp.c: 211: {
 10020                           ;SwSpiApp.c: 212: do { LATCbits.LATC1 = 0; } while(0);
 10021  003286  928B               	bcf	3979,1,c	;volatile
 10022                           
 10023                           ;SwSpiApp.c: 213: }
 10024                           ;SwSpiApp.c: 214: break;
 10025  003288  0012               	return	
 10026  00328A                     
 10027                           ;SwSpiApp.c: 217: if(cPinMode == 1)
 10028  00328A  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 10029  00328C  A4D8               	btfss	status,2,c
 10030  00328E  D002               	goto	l687
 10031                           
 10032                           ;SwSpiApp.c: 218: {
 10033                           ;SwSpiApp.c: 219: do { LATDbits.LATD2 = 1; } while(0);
 10034  003290  848C               	bsf	3980,2,c	;volatile
 10035                           
 10036                           ;SwSpiApp.c: 220: }
 10037  003292  0012               	return	
 10038  003294                     l687:
 10039                           
 10040                           ;SwSpiApp.c: 221: else if(cPinMode == 0)
 10041  003294  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 10042  003296  A4D8               	btfss	status,2,c
 10043  003298  0012               	return	
 10044                           
 10045                           ;SwSpiApp.c: 222: {
 10046                           ;SwSpiApp.c: 223: do { LATCbits.LATC1 = 0; } while(0);
 10047  00329A  928B               	bcf	3979,1,c	;volatile
 10048                           
 10049                           ;SwSpiApp.c: 226: }
 10050                           
 10051                           ;SwSpiApp.c: 224: }
 10052                           ;SwSpiApp.c: 225: break;
 10053  00329C  0012               	return	
 10054  00329E                     l676:
 10055  00329E  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
 10056                           
 10057                           ; Switch size 1, requested type "space"
 10058                           ; Number of cases is 2, Range of values is 0 to 1
 10059                           ; switch strategies available:
 10060                           ; Name         Instructions Cycles
 10061                           ; simple_byte            7     4 (average)
 10062                           ;	Chosen strategy is simple_byte
 10063  0032A0  0A00               	xorlw	0	; case 0
 10064  0032A2  B4D8               	btfsc	status,2,c
 10065  0032A4  D7E8               	goto	l677
 10066  0032A6  0A01               	xorlw	1	; case 1
 10067  0032A8  A4D8               	btfss	status,2,c
 10068  0032AA  0012               	return	
 10069  0032AC  D7EE               	goto	l686
 10070  0032AE                     __end_of_SwSpi_Set_CE_Pin:
 10071                           	opt stack 0
 10072                           tosu	equ	0xFFF
 10073                           tosh	equ	0xFFE
 10074                           tosl	equ	0xFFD
 10075                           pclath	equ	0xFFA
 10076                           tblptru	equ	0xFF8
 10077                           tblptrh	equ	0xFF7
 10078                           tblptrl	equ	0xFF6
 10079                           tablat	equ	0xFF5
 10080                           prodh	equ	0xFF4
 10081                           prodl	equ	0xFF3
 10082                           intcon	equ	0xFF2
 10083                           intcon2	equ	0xFF1
 10084                           postinc0	equ	0xFEE
 10085                           plusw0	equ	0xFEB
 10086                           wreg	equ	0xFE8
 10087                           indf1	equ	0xFE7
 10088                           postdec1	equ	0xFE5
 10089                           fsr1h	equ	0xFE2
 10090                           fsr1l	equ	0xFE1
 10091                           indf2	equ	0xFDF
 10092                           postinc2	equ	0xFDE
 10093                           postdec2	equ	0xFDD
 10094                           plusw2	equ	0xFDB
 10095                           fsr2h	equ	0xFDA
 10096                           fsr2l	equ	0xFD9
 10097                           status	equ	0xFD8
 10098                           
 10099 ;; *************** function _InitAdcApplicationMgr *****************
 10100 ;; Defined at:
 10101 ;;		line 22 in file "AdcApp.c"
 10102 ;; Parameters:    Size  Location     Type
 10103 ;;		None
 10104 ;; Auto vars:     Size  Location     Type
 10105 ;;  channel         1   23[COMRAM] unsigned char 
 10106 ;; Return value:  Size  Location     Type
 10107 ;;                  1    wreg      void 
 10108 ;; Registers used:
 10109 ;;		wreg, status,2
 10110 ;; Tracked objects:
 10111 ;;		On entry : 0/0
 10112 ;;		On exit  : 0/0
 10113 ;;		Unchanged: 0/0
 10114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10115 ;;      Params:         0       0       0       0       0       0       0
 10116 ;;      Locals:         1       0       0       0       0       0       0
 10117 ;;      Temps:          0       0       0       0       0       0       0
 10118 ;;      Totals:         1       0       0       0       0       0       0
 10119 ;;Total ram usage:        1 bytes
 10120 ;; Hardware stack levels used:    1
 10121 ;; Hardware stack levels required when called:    3
 10122 ;; This function calls:
 10123 ;;		Nothing
 10124 ;; This function is called by:
 10125 ;;		_InitSystemApplicationManagers
 10126 ;; This function uses a non-reentrant model
 10127 ;;
 10128                           
 10129                           	psect	text65
 10130  0038AA                     __ptext65:
 10131                           	opt stack 0
 10132  0038AA                     _InitAdcApplicationMgr:
 10133                           	opt stack 26
 10134                           
 10135                           ;AdcApp.c: 24: conversionFormat = CONVERSION_LEFT_FORAMT;
 10136                           
 10137                           ;incstack = 0
 10138  0038AA  0E00               	movlw	0
 10139  0038AC  0100               	movlb	0	; () banked
 10140  0038AE  6FD5               	movwf	_conversionFormat& (0+255),b
 10141                           
 10142                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
 10143  0038B0  0E00               	movlw	0
 10144  0038B2  6E3B               	movwf	_adcSampleMode,c
 10145                           
 10146                           ;AdcApp.c: 26: char channel = 0;
 10147  0038B4  0E00               	movlw	0
 10148  0038B6  6E18               	movwf	InitAdcApplicationMgr@channel,c
 10149                           
 10150                           ; BSR set to: 0
 10151  0038B8  0012               	return		;funcret
 10152  0038BA                     __end_of_InitAdcApplicationMgr:
 10153                           	opt stack 0
 10154                           tosu	equ	0xFFF
 10155                           tosh	equ	0xFFE
 10156                           tosl	equ	0xFFD
 10157                           pclath	equ	0xFFA
 10158                           tblptru	equ	0xFF8
 10159                           tblptrh	equ	0xFF7
 10160                           tblptrl	equ	0xFF6
 10161                           tablat	equ	0xFF5
 10162                           prodh	equ	0xFF4
 10163                           prodl	equ	0xFF3
 10164                           intcon	equ	0xFF2
 10165                           intcon2	equ	0xFF1
 10166                           postinc0	equ	0xFEE
 10167                           plusw0	equ	0xFEB
 10168                           wreg	equ	0xFE8
 10169                           indf1	equ	0xFE7
 10170                           postdec1	equ	0xFE5
 10171                           fsr1h	equ	0xFE2
 10172                           fsr1l	equ	0xFE1
 10173                           indf2	equ	0xFDF
 10174                           postinc2	equ	0xFDE
 10175                           postdec2	equ	0xFDD
 10176                           plusw2	equ	0xFDB
 10177                           fsr2h	equ	0xFDA
 10178                           fsr2l	equ	0xFD9
 10179                           status	equ	0xFD8
 10180                           
 10181 ;; *************** function _DacInit *****************
 10182 ;; Defined at:
 10183 ;;		line 24 in file "DacApp.c"
 10184 ;; Parameters:    Size  Location     Type
 10185 ;;		None
 10186 ;; Auto vars:     Size  Location     Type
 10187 ;;  dacInput        2   92[BANK0 ] unsigned int 
 10188 ;;  idx             1   94[BANK0 ] char 
 10189 ;; Return value:  Size  Location     Type
 10190 ;;                  1    wreg      void 
 10191 ;; Registers used:
 10192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10193 ;; Tracked objects:
 10194 ;;		On entry : 0/0
 10195 ;;		On exit  : 0/0
 10196 ;;		Unchanged: 0/0
 10197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10198 ;;      Params:         0       0       0       0       0       0       0
 10199 ;;      Locals:         0       3       0       0       0       0       0
 10200 ;;      Temps:          0       2       0       0       0       0       0
 10201 ;;      Totals:         0       5       0       0       0       0       0
 10202 ;;Total ram usage:        5 bytes
 10203 ;; Hardware stack levels used:    1
 10204 ;; Hardware stack levels required when called:    9
 10205 ;; This function calls:
 10206 ;;		_ReadIntFromEeprom
 10207 ;;		_SWSPI_send_word
 10208 ;; This function is called by:
 10209 ;;		_InitSystemApplicationManagers
 10210 ;; This function uses a non-reentrant model
 10211 ;;
 10212                           
 10213                           	psect	text66
 10214  0025C4                     __ptext66:
 10215                           	opt stack 0
 10216  0025C4                     _DacInit:
 10217                           	opt stack 20
 10218                           
 10219                           ;DacApp.c: 26: for(int8_t idx = 0; idx < (4); idx++)
 10220                           
 10221                           ; BSR set to: 0
 10222                           ;incstack = 0
 10223  0025C4  0E00               	movlw	0
 10224  0025C6  0100               	movlb	0	; () banked
 10225  0025C8  6FBE               	movwf	DacInit@idx& (0+255),b
 10226  0025CA                     l8004:
 10227                           
 10228                           ; BSR set to: 0
 10229  0025CA  51BE               	movf	DacInit@idx& (0+255),w,b
 10230  0025CC  0A80               	xorlw	128
 10231  0025CE  0F7C               	addlw	-132
 10232  0025D0  B0D8               	btfsc	status,0,c
 10233  0025D2  0012               	return	
 10234                           
 10235                           ; BSR set to: 0
 10236                           ;DacApp.c: 27: {
 10237                           ;DacApp.c: 28: uint16_t dacInput = ReadIntFromEeprom((0x40) | DAC_ADDRES[idx], 2);
 10238                           
 10239                           ; BSR set to: 0
 10240                           
 10241                           ; BSR set to: 0
 10242  0025D4  0E00               	movlw	0
 10243  0025D6  6FB4               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 10244  0025D8  0E02               	movlw	2
 10245  0025DA  6FB3               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 10246  0025DC  51BE               	movf	DacInit@idx& (0+255),w,b
 10247  0025DE  0D01               	mullw	1
 10248  0025E0  0E51               	movlw	low _DAC_ADDRES
 10249  0025E2  24F3               	addwf	prodl,w,c
 10250  0025E4  6EF6               	movwf	tblptrl,c
 10251  0025E6  0E06               	movlw	high _DAC_ADDRES
 10252  0025E8  20F4               	addwfc	prodh,w,c
 10253  0025EA  6EF7               	movwf	tblptrh,c
 10254  0025EC                     	if	0	;There are less than 3 active tblptr bytes
 10255  0025EC                     	endif
 10256  0025EC  0008               	tblrd		*
 10257  0025EE  50F5               	movf	tablat,w,c
 10258  0025F0  0940               	iorlw	64
 10259  0025F2  EC43  F00B         	call	_ReadIntFromEeprom
 10260  0025F6  C0B3  F0BC         	movff	?_ReadIntFromEeprom,DacInit@dacInput
 10261  0025FA  C0B4  F0BD         	movff	?_ReadIntFromEeprom+1,DacInit@dacInput+1
 10262                           
 10263                           ;DacApp.c: 29: if(dacInput == 0xFFFF)
 10264  0025FE  0100               	movlb	0	; () banked
 10265  002600  29BC               	incf	DacInit@dacInput& (0+255),w,b
 10266  002602  E11D               	bnz	l8014
 10267  002604  29BD               	incf	(DacInit@dacInput+1)& (0+255),w,b
 10268  002606  A4D8               	btfss	status,2,c
 10269  002608  D01A               	goto	l417
 10270                           
 10271                           ; BSR set to: 0
 10272                           ;DacApp.c: 30: {
 10273                           ;DacApp.c: 31: SWSPI_send_word(EXT_DAC, DAC_DEFAULT_INIT_VALUES[idx], 1);
 10274  00260A  51BE               	movf	DacInit@idx& (0+255),w,b
 10275  00260C  0D02               	mullw	2
 10276  00260E  0E42               	movlw	low _DAC_DEFAULT_INIT_VALUES
 10277  002610  24F3               	addwf	prodl,w,c
 10278  002612  6EF6               	movwf	tblptrl,c
 10279  002614  0E06               	movlw	high _DAC_DEFAULT_INIT_VALUES
 10280  002616  20F4               	addwfc	prodh,w,c
 10281  002618  6EF7               	movwf	tblptrh,c
 10282  00261A                     	if	0	;There are less than 3 active tblptr bytes
 10283  00261A                     	endif
 10284  00261A  0009               	tblrd		*+
 10285  00261C  CFF5 F0BA          	movff	tablat,??_DacInit
 10286  002620  0009               	tblrd		*+
 10287  002622  CFF5 F0BB          	movff	tablat,??_DacInit+1
 10288  002626  C0BA  F026         	movff	??_DacInit,SWSPI_send_word@data
 10289  00262A  C0BB  F027         	movff	??_DacInit+1,SWSPI_send_word@data+1
 10290  00262E  6A28               	clrf	SWSPI_send_word@data+2,c
 10291  002630  6A29               	clrf	SWSPI_send_word@data+3,c
 10292  002632  0E01               	movlw	1
 10293  002634  6E2A               	movwf	SWSPI_send_word@dataSize,c
 10294  002636  0E02               	movlw	2
 10295  002638  EC4A  F012         	call	_SWSPI_send_word
 10296                           
 10297                           ;DacApp.c: 32: }
 10298  00263C  D00B               	goto	l418
 10299  00263E                     l417:
 10300  00263E                     l8014:
 10301                           
 10302                           ;DacApp.c: 33: else
 10303                           ;DacApp.c: 34: {
 10304                           ;DacApp.c: 35: SWSPI_send_word(EXT_DAC, dacInput, 1);
 10305  00263E  C0BC  F026         	movff	DacInit@dacInput,SWSPI_send_word@data
 10306  002642  C0BD  F027         	movff	DacInit@dacInput+1,SWSPI_send_word@data+1
 10307  002646  6A28               	clrf	SWSPI_send_word@data+2,c
 10308  002648  6A29               	clrf	SWSPI_send_word@data+3,c
 10309  00264A  0E01               	movlw	1
 10310  00264C  6E2A               	movwf	SWSPI_send_word@dataSize,c
 10311  00264E  0E02               	movlw	2
 10312  002650  EC4A  F012         	call	_SWSPI_send_word
 10313  002654                     l418:
 10314  002654  0100               	movlb	0	; () banked
 10315  002656  2BBE               	incf	DacInit@idx& (0+255),f,b
 10316  002658  D7B8               	goto	l8004
 10317  00265A                     __end_of_DacInit:
 10318                           	opt stack 0
 10319                           tosu	equ	0xFFF
 10320                           tosh	equ	0xFFE
 10321                           tosl	equ	0xFFD
 10322                           pclath	equ	0xFFA
 10323                           tblptru	equ	0xFF8
 10324                           tblptrh	equ	0xFF7
 10325                           tblptrl	equ	0xFF6
 10326                           tablat	equ	0xFF5
 10327                           prodh	equ	0xFF4
 10328                           prodl	equ	0xFF3
 10329                           intcon	equ	0xFF2
 10330                           intcon2	equ	0xFF1
 10331                           postinc0	equ	0xFEE
 10332                           plusw0	equ	0xFEB
 10333                           wreg	equ	0xFE8
 10334                           indf1	equ	0xFE7
 10335                           postdec1	equ	0xFE5
 10336                           fsr1h	equ	0xFE2
 10337                           fsr1l	equ	0xFE1
 10338                           indf2	equ	0xFDF
 10339                           postinc2	equ	0xFDE
 10340                           postdec2	equ	0xFDD
 10341                           plusw2	equ	0xFDB
 10342                           fsr2h	equ	0xFDA
 10343                           fsr2l	equ	0xFD9
 10344                           status	equ	0xFD8
 10345                           
 10346 ;; *************** function _SWSPI_send_word *****************
 10347 ;; Defined at:
 10348 ;;		line 17 in file "SwSpiApp.c"
 10349 ;; Parameters:    Size  Location     Type
 10350 ;;  phrType         1    wreg     enum E7559
 10351 ;;  data            4   37[COMRAM] unsigned long 
 10352 ;;  dataSize        1   41[COMRAM] unsigned char 
 10353 ;; Auto vars:     Size  Location     Type
 10354 ;;  phrType         1   45[COMRAM] enum E7559
 10355 ;;  datac           1   42[COMRAM] unsigned char 
 10356 ;;  idx             2   43[COMRAM] int 
 10357 ;; Return value:  Size  Location     Type
 10358 ;;                  1    wreg      void 
 10359 ;; Registers used:
 10360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10361 ;; Tracked objects:
 10362 ;;		On entry : 0/0
 10363 ;;		On exit  : 0/0
 10364 ;;		Unchanged: 0/0
 10365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10366 ;;      Params:         5       0       0       0       0       0       0
 10367 ;;      Locals:         4       0       0       0       0       0       0
 10368 ;;      Temps:          0       0       0       0       0       0       0
 10369 ;;      Totals:         9       0       0       0       0       0       0
 10370 ;;Total ram usage:        9 bytes
 10371 ;; Hardware stack levels used:    1
 10372 ;; Hardware stack levels required when called:    6
 10373 ;; This function calls:
 10374 ;;		_SWSPI_DAC_send_bits
 10375 ;;		_SWSPI_Synth_send_bits
 10376 ;;		_SwSpi_Set_Dac_Sync_Pin
 10377 ;;		_SwSpi_Set_Synth_Le_Pin
 10378 ;;		_make8
 10379 ;; This function is called by:
 10380 ;;		_DacInit
 10381 ;;		_InitTxSynth
 10382 ;;		_InitRxSynth
 10383 ;;		_UpdateTxFreq
 10384 ;; This function uses a non-reentrant model
 10385 ;;
 10386                           
 10387                           	psect	text67
 10388  002494                     __ptext67:
 10389                           	opt stack 0
 10390  002494                     _SWSPI_send_word:
 10391                           	opt stack 21
 10392                           
 10393                           ; BSR set to: 0
 10394                           ;incstack = 0
 10395                           ;SWSPI_send_word@phrType stored from wreg
 10396  002494  6E2E               	movwf	SWSPI_send_word@phrType,c
 10397                           
 10398                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 10399  002496  9EF2               	bcf	intcon,7,c	;volatile
 10400                           
 10401                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 10402  002498  502E               	movf	SWSPI_send_word@phrType,w,c
 10403  00249A  B4D8               	btfsc	status,2,c
 10404  00249C  D003               	goto	u7080
 10405  00249E  042E               	decf	SWSPI_send_word@phrType,w,c
 10406  0024A0  A4D8               	btfss	status,2,c
 10407  0024A2  D016               	goto	l585
 10408  0024A4                     u7080:
 10409                           
 10410                           ;SwSpiApp.c: 24: {
 10411                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 10412  0024A4  0E00               	movlw	0
 10413  0024A6  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 10414  0024A8  502E               	movf	SWSPI_send_word@phrType,w,c
 10415  0024AA  EC57  F019         	call	_SwSpi_Set_Synth_Le_Pin
 10416                           
 10417                           ;SwSpiApp.c: 26: SWSPI_Synth_send_bits(phrType, data);
 10418  0024AE  C026  F022         	movff	SWSPI_send_word@data,SWSPI_Synth_send_bits@data
 10419  0024B2  C027  F023         	movff	SWSPI_send_word@data+1,SWSPI_Synth_send_bits@data+1
 10420  0024B6  C028  F024         	movff	SWSPI_send_word@data+2,SWSPI_Synth_send_bits@data+2
 10421  0024BA  C029  F025         	movff	SWSPI_send_word@data+3,SWSPI_Synth_send_bits@data+3
 10422  0024BE  502E               	movf	SWSPI_send_word@phrType,w,c
 10423  0024C0  ECF1  F010         	call	_SWSPI_Synth_send_bits
 10424                           
 10425                           ;SwSpiApp.c: 27: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 10426  0024C4  0E01               	movlw	1
 10427  0024C6  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 10428  0024C8  502E               	movf	SWSPI_send_word@phrType,w,c
 10429  0024CA  EC57  F019         	call	_SwSpi_Set_Synth_Le_Pin
 10430                           
 10431                           ;SwSpiApp.c: 28: }
 10432  0024CE  D02D               	goto	l589
 10433  0024D0                     l585:
 10434                           
 10435                           ;SwSpiApp.c: 29: else if(phrType == EXT_DAC)
 10436  0024D0  0E02               	movlw	2
 10437  0024D2  182E               	xorwf	SWSPI_send_word@phrType,w,c
 10438  0024D4  A4D8               	btfss	status,2,c
 10439  0024D6  D029               	goto	l589
 10440                           
 10441                           ;SwSpiApp.c: 30: {
 10442                           ;SwSpiApp.c: 31: SwSpi_Set_Dac_Sync_Pin(0);
 10443  0024D8  0E00               	movlw	0
 10444  0024DA  ECE9  F01B         	call	_SwSpi_Set_Dac_Sync_Pin
 10445                           
 10446                           ;SwSpiApp.c: 32: for(int idx = dataSize + 1; idx > 0; idx--)
 10447  0024DE  0E01               	movlw	1
 10448  0024E0  242A               	addwf	SWSPI_send_word@dataSize,w,c
 10449  0024E2  6E2C               	movwf	SWSPI_send_word@idx,c
 10450  0024E4  6A2D               	clrf	SWSPI_send_word@idx+1,c
 10451  0024E6  0E00               	movlw	0
 10452  0024E8  222D               	addwfc	SWSPI_send_word@idx+1,f,c
 10453  0024EA                     l7224:
 10454  0024EA  BE2D               	btfsc	SWSPI_send_word@idx+1,7,c
 10455  0024EC  D01B               	goto	u7110
 10456  0024EE  502D               	movf	SWSPI_send_word@idx+1,w,c
 10457  0024F0  E103               	bnz	l7228
 10458  0024F2  042C               	decf	SWSPI_send_word@idx,w,c
 10459  0024F4  A0D8               	btfss	status,0,c
 10460  0024F6  D016               	goto	u7110
 10461  0024F8                     l7228:
 10462                           
 10463                           ;SwSpiApp.c: 33: {
 10464                           ;SwSpiApp.c: 34: uint8_t datac = make8(data, idx - 1);
 10465  0024F8  C026  F018         	movff	SWSPI_send_word@data,make8@data
 10466  0024FC  C027  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 10467  002500  C028  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 10468  002504  C029  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 10469  002508  042C               	decf	SWSPI_send_word@idx,w,c
 10470  00250A  6E1C               	movwf	make8@dataLocation,c
 10471  00250C  EC31  F016         	call	_make8	;wreg free
 10472  002510  6E2B               	movwf	SWSPI_send_word@datac,c
 10473                           
 10474                           ;SwSpiApp.c: 35: SWSPI_DAC_send_bits(phrType, datac);
 10475  002512  C02B  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 10476  002516  502E               	movf	SWSPI_send_word@phrType,w,c
 10477  002518  ECB9  F016         	call	_SWSPI_DAC_send_bits
 10478  00251C  062C               	decf	SWSPI_send_word@idx,f,c
 10479  00251E  A0D8               	btfss	status,0,c
 10480  002520  062D               	decf	SWSPI_send_word@idx+1,f,c
 10481  002522  D7E3               	goto	l7224
 10482  002524                     u7110:
 10483                           
 10484                           ;SwSpiApp.c: 36: }
 10485                           ;SwSpiApp.c: 37: SwSpi_Set_Dac_Sync_Pin(1);
 10486  002524  0E01               	movlw	1
 10487  002526  ECE9  F01B         	call	_SwSpi_Set_Dac_Sync_Pin
 10488  00252A                     l589:
 10489                           
 10490                           ;SwSpiApp.c: 38: }
 10491                           ;SwSpiApp.c: 40: (INTCONbits.GIE = 1);
 10492  00252A  8EF2               	bsf	intcon,7,c	;volatile
 10493  00252C  0012               	return		;funcret
 10494  00252E                     __end_of_SWSPI_send_word:
 10495                           	opt stack 0
 10496                           tosu	equ	0xFFF
 10497                           tosh	equ	0xFFE
 10498                           tosl	equ	0xFFD
 10499                           pclath	equ	0xFFA
 10500                           tblptru	equ	0xFF8
 10501                           tblptrh	equ	0xFF7
 10502                           tblptrl	equ	0xFF6
 10503                           tablat	equ	0xFF5
 10504                           prodh	equ	0xFF4
 10505                           prodl	equ	0xFF3
 10506                           intcon	equ	0xFF2
 10507                           intcon2	equ	0xFF1
 10508                           postinc0	equ	0xFEE
 10509                           plusw0	equ	0xFEB
 10510                           wreg	equ	0xFE8
 10511                           indf1	equ	0xFE7
 10512                           postdec1	equ	0xFE5
 10513                           fsr1h	equ	0xFE2
 10514                           fsr1l	equ	0xFE1
 10515                           indf2	equ	0xFDF
 10516                           postinc2	equ	0xFDE
 10517                           postdec2	equ	0xFDD
 10518                           plusw2	equ	0xFDB
 10519                           fsr2h	equ	0xFDA
 10520                           fsr2l	equ	0xFD9
 10521                           status	equ	0xFD8
 10522                           
 10523 ;; *************** function _make8 *****************
 10524 ;; Defined at:
 10525 ;;		line 79 in file "SystemCommon.c"
 10526 ;; Parameters:    Size  Location     Type
 10527 ;;  data            4   23[COMRAM] unsigned long 
 10528 ;;  dataLocation    1   27[COMRAM] unsigned char 
 10529 ;; Auto vars:     Size  Location     Type
 10530 ;;		None
 10531 ;; Return value:  Size  Location     Type
 10532 ;;                  1    wreg      unsigned char 
 10533 ;; Registers used:
 10534 ;;		wreg, status,2, status,0
 10535 ;; Tracked objects:
 10536 ;;		On entry : 0/0
 10537 ;;		On exit  : 0/0
 10538 ;;		Unchanged: 0/0
 10539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10540 ;;      Params:         5       0       0       0       0       0       0
 10541 ;;      Locals:         0       0       0       0       0       0       0
 10542 ;;      Temps:          4       0       0       0       0       0       0
 10543 ;;      Totals:         9       0       0       0       0       0       0
 10544 ;;Total ram usage:        9 bytes
 10545 ;; Hardware stack levels used:    1
 10546 ;; Hardware stack levels required when called:    3
 10547 ;; This function calls:
 10548 ;;		Nothing
 10549 ;; This function is called by:
 10550 ;;		_FlashReadCondition
 10551 ;;		_SWSPI_send_word
 10552 ;;		_StoreIntInEeprom
 10553 ;; This function uses a non-reentrant model
 10554 ;;
 10555                           
 10556                           	psect	text68
 10557  002C62                     __ptext68:
 10558                           	opt stack 0
 10559  002C62                     _make8:
 10560                           	opt stack 23
 10561                           
 10562                           ;SystemCommon.c: 81: switch(dataLocation)
 10563                           
 10564                           ;incstack = 0
 10565  002C62  D01F               	goto	l1308
 10566  002C64                     
 10567                           ;SystemCommon.c: 84: return (data & 0x000000ff);
 10568  002C64  5018               	movf	make8@data,w,c
 10569  002C66  0012               	return	
 10570  002C68                     
 10571                           ;SystemCommon.c: 87: return (data & 0x0000ff00) >> 8;
 10572  002C68  5019               	movf	make8@data+1,w,c
 10573  002C6A  0012               	return	
 10574  002C6C                     
 10575                           ;SystemCommon.c: 90: return (data & 0x00ff0000) >> 16;
 10576  002C6C  501A               	movf	make8@data+2,w,c
 10577  002C6E  0012               	return	
 10578  002C70                     
 10579                           ;SystemCommon.c: 93: return (data & 0xff000000) >> 24;
 10580  002C70  0E00               	movlw	0
 10581  002C72  1418               	andwf	make8@data,w,c
 10582  002C74  6E1D               	movwf	??_make8& (0+255),c
 10583  002C76  0E00               	movlw	0
 10584  002C78  1419               	andwf	make8@data+1,w,c
 10585  002C7A  6E1E               	movwf	(??_make8+1)& (0+255),c
 10586  002C7C  0E00               	movlw	0
 10587  002C7E  141A               	andwf	make8@data+2,w,c
 10588  002C80  6E1F               	movwf	(??_make8+2)& (0+255),c
 10589  002C82  0EFF               	movlw	255
 10590  002C84  141B               	andwf	make8@data+3,w,c
 10591  002C86  6E20               	movwf	(??_make8+3)& (0+255),c
 10592  002C88  0E19               	movlw	25
 10593  002C8A  D005               	goto	u6630
 10594  002C8C                     u6635:
 10595  002C8C  90D8               	bcf	status,0,c
 10596  002C8E  3220               	rrcf	??_make8+3,f,c
 10597  002C90  321F               	rrcf	??_make8+2,f,c
 10598  002C92  321E               	rrcf	??_make8+1,f,c
 10599  002C94  321D               	rrcf	??_make8,f,c
 10600  002C96                     u6630:
 10601  002C96  2EE8               	decfsz	wreg,f,c
 10602  002C98  D7F9               	goto	u6635
 10603  002C9A  501D               	movf	??_make8,w,c
 10604  002C9C  0012               	return	
 10605  002C9E                     
 10606                           ;SystemCommon.c: 96: return (0);
 10607  002C9E  0E00               	movlw	0
 10608                           
 10609                           ;SystemCommon.c: 97: }
 10610  002CA0  0012               	return	
 10611  002CA2                     l1308:
 10612  002CA2  501C               	movf	make8@dataLocation,w,c
 10613                           
 10614                           ; Switch size 1, requested type "space"
 10615                           ; Number of cases is 4, Range of values is 0 to 3
 10616                           ; switch strategies available:
 10617                           ; Name         Instructions Cycles
 10618                           ; simple_byte           13     7 (average)
 10619                           ;	Chosen strategy is simple_byte
 10620  002CA4  0A00               	xorlw	0	; case 0
 10621  002CA6  B4D8               	btfsc	status,2,c
 10622  002CA8  D7DD               	goto	l1309
 10623  002CAA  0A01               	xorlw	1	; case 1
 10624  002CAC  B4D8               	btfsc	status,2,c
 10625  002CAE  D7DC               	goto	l1311
 10626  002CB0  0A03               	xorlw	3	; case 2
 10627  002CB2  B4D8               	btfsc	status,2,c
 10628  002CB4  D7DB               	goto	l1312
 10629  002CB6  0A01               	xorlw	1	; case 3
 10630  002CB8  B4D8               	btfsc	status,2,c
 10631  002CBA  D7DA               	goto	l1313
 10632  002CBC  D7F0               	goto	l1314
 10633  002CBE                     __end_of_make8:
 10634                           	opt stack 0
 10635                           tosu	equ	0xFFF
 10636                           tosh	equ	0xFFE
 10637                           tosl	equ	0xFFD
 10638                           pclath	equ	0xFFA
 10639                           tblptru	equ	0xFF8
 10640                           tblptrh	equ	0xFF7
 10641                           tblptrl	equ	0xFF6
 10642                           tablat	equ	0xFF5
 10643                           prodh	equ	0xFF4
 10644                           prodl	equ	0xFF3
 10645                           intcon	equ	0xFF2
 10646                           intcon2	equ	0xFF1
 10647                           postinc0	equ	0xFEE
 10648                           plusw0	equ	0xFEB
 10649                           wreg	equ	0xFE8
 10650                           indf1	equ	0xFE7
 10651                           postdec1	equ	0xFE5
 10652                           fsr1h	equ	0xFE2
 10653                           fsr1l	equ	0xFE1
 10654                           indf2	equ	0xFDF
 10655                           postinc2	equ	0xFDE
 10656                           postdec2	equ	0xFDD
 10657                           plusw2	equ	0xFDB
 10658                           fsr2h	equ	0xFDA
 10659                           fsr2l	equ	0xFD9
 10660                           status	equ	0xFD8
 10661                           
 10662 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 10663 ;; Defined at:
 10664 ;;		line 232 in file "SwSpiApp.c"
 10665 ;; Parameters:    Size  Location     Type
 10666 ;;  phrType         1    wreg     enum E7559
 10667 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10668 ;; Auto vars:     Size  Location     Type
 10669 ;;  phrType         1   24[COMRAM] enum E7559
 10670 ;; Return value:  Size  Location     Type
 10671 ;;                  1    wreg      void 
 10672 ;; Registers used:
 10673 ;;		wreg, status,2, status,0
 10674 ;; Tracked objects:
 10675 ;;		On entry : 0/0
 10676 ;;		On exit  : 0/0
 10677 ;;		Unchanged: 0/0
 10678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10679 ;;      Params:         1       0       0       0       0       0       0
 10680 ;;      Locals:         1       0       0       0       0       0       0
 10681 ;;      Temps:          0       0       0       0       0       0       0
 10682 ;;      Totals:         2       0       0       0       0       0       0
 10683 ;;Total ram usage:        2 bytes
 10684 ;; Hardware stack levels used:    1
 10685 ;; Hardware stack levels required when called:    3
 10686 ;; This function calls:
 10687 ;;		Nothing
 10688 ;; This function is called by:
 10689 ;;		_SWSPI_send_word
 10690 ;; This function uses a non-reentrant model
 10691 ;;
 10692                           
 10693                           	psect	text69
 10694  0032AE                     __ptext69:
 10695                           	opt stack 0
 10696  0032AE                     _SwSpi_Set_Synth_Le_Pin:
 10697                           	opt stack 23
 10698                           
 10699                           ;incstack = 0
 10700                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 10701  0032AE  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 10702                           
 10703                           ;SwSpiApp.c: 234: switch(phrType)
 10704  0032B0  D014               	goto	l697
 10705  0032B2                     
 10706                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 10707  0032B2  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10708  0032B4  A4D8               	btfss	status,2,c
 10709  0032B6  D002               	goto	l699
 10710                           
 10711                           ;SwSpiApp.c: 238: {
 10712                           ;SwSpiApp.c: 239: do { LATCbits.LATC2 = 1; } while(0);
 10713  0032B8  848B               	bsf	3979,2,c	;volatile
 10714                           
 10715                           ;SwSpiApp.c: 240: }
 10716  0032BA  0012               	return	
 10717  0032BC                     l699:
 10718                           
 10719                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 10720  0032BC  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10721  0032BE  A4D8               	btfss	status,2,c
 10722  0032C0  0012               	return	
 10723                           
 10724                           ;SwSpiApp.c: 242: {
 10725                           ;SwSpiApp.c: 243: do { LATCbits.LATC2 = 0; } while(0);
 10726  0032C2  948B               	bcf	3979,2,c	;volatile
 10727                           
 10728                           ;SwSpiApp.c: 244: }
 10729                           ;SwSpiApp.c: 245: break;
 10730  0032C4  0012               	return	
 10731  0032C6                     
 10732                           ;SwSpiApp.c: 248: if(cPinMode == 1)
 10733  0032C6  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10734  0032C8  A4D8               	btfss	status,2,c
 10735  0032CA  D002               	goto	l708
 10736                           
 10737                           ;SwSpiApp.c: 249: {
 10738                           ;SwSpiApp.c: 250: do { LATDbits.LATD3 = 1; } while(0);
 10739  0032CC  868C               	bsf	3980,3,c	;volatile
 10740                           
 10741                           ;SwSpiApp.c: 251: }
 10742  0032CE  0012               	return	
 10743  0032D0                     l708:
 10744                           
 10745                           ;SwSpiApp.c: 252: else if(cPinMode == 0)
 10746  0032D0  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10747  0032D2  A4D8               	btfss	status,2,c
 10748  0032D4  0012               	return	
 10749                           
 10750                           ;SwSpiApp.c: 253: {
 10751                           ;SwSpiApp.c: 254: do { LATDbits.LATD3 = 0; } while(0);
 10752  0032D6  968C               	bcf	3980,3,c	;volatile
 10753                           
 10754                           ;SwSpiApp.c: 257: }
 10755                           
 10756                           ;SwSpiApp.c: 255: }
 10757                           ;SwSpiApp.c: 256: break;
 10758  0032D8  0012               	return	
 10759  0032DA                     l697:
 10760  0032DA  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 10761                           
 10762                           ; Switch size 1, requested type "space"
 10763                           ; Number of cases is 2, Range of values is 0 to 1
 10764                           ; switch strategies available:
 10765                           ; Name         Instructions Cycles
 10766                           ; simple_byte            7     4 (average)
 10767                           ;	Chosen strategy is simple_byte
 10768  0032DC  0A00               	xorlw	0	; case 0
 10769  0032DE  B4D8               	btfsc	status,2,c
 10770  0032E0  D7E8               	goto	l698
 10771  0032E2  0A01               	xorlw	1	; case 1
 10772  0032E4  A4D8               	btfss	status,2,c
 10773  0032E6  0012               	return	
 10774  0032E8  D7EE               	goto	l707
 10775  0032EA                     __end_of_SwSpi_Set_Synth_Le_Pin:
 10776                           	opt stack 0
 10777                           tosu	equ	0xFFF
 10778                           tosh	equ	0xFFE
 10779                           tosl	equ	0xFFD
 10780                           pclath	equ	0xFFA
 10781                           tblptru	equ	0xFF8
 10782                           tblptrh	equ	0xFF7
 10783                           tblptrl	equ	0xFF6
 10784                           tablat	equ	0xFF5
 10785                           prodh	equ	0xFF4
 10786                           prodl	equ	0xFF3
 10787                           intcon	equ	0xFF2
 10788                           intcon2	equ	0xFF1
 10789                           postinc0	equ	0xFEE
 10790                           plusw0	equ	0xFEB
 10791                           wreg	equ	0xFE8
 10792                           indf1	equ	0xFE7
 10793                           postdec1	equ	0xFE5
 10794                           fsr1h	equ	0xFE2
 10795                           fsr1l	equ	0xFE1
 10796                           indf2	equ	0xFDF
 10797                           postinc2	equ	0xFDE
 10798                           postdec2	equ	0xFDD
 10799                           plusw2	equ	0xFDB
 10800                           fsr2h	equ	0xFDA
 10801                           fsr2l	equ	0xFD9
 10802                           status	equ	0xFD8
 10803                           
 10804 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 10805 ;; Defined at:
 10806 ;;		line 260 in file "SwSpiApp.c"
 10807 ;; Parameters:    Size  Location     Type
 10808 ;;  cPinMode        1    wreg     unsigned char 
 10809 ;; Auto vars:     Size  Location     Type
 10810 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10811 ;; Return value:  Size  Location     Type
 10812 ;;                  1    wreg      void 
 10813 ;; Registers used:
 10814 ;;		wreg, status,2, status,0
 10815 ;; Tracked objects:
 10816 ;;		On entry : 0/0
 10817 ;;		On exit  : 0/0
 10818 ;;		Unchanged: 0/0
 10819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10820 ;;      Params:         0       0       0       0       0       0       0
 10821 ;;      Locals:         1       0       0       0       0       0       0
 10822 ;;      Temps:          0       0       0       0       0       0       0
 10823 ;;      Totals:         1       0       0       0       0       0       0
 10824 ;;Total ram usage:        1 bytes
 10825 ;; Hardware stack levels used:    1
 10826 ;; Hardware stack levels required when called:    3
 10827 ;; This function calls:
 10828 ;;		Nothing
 10829 ;; This function is called by:
 10830 ;;		_SWSPI_send_word
 10831 ;; This function uses a non-reentrant model
 10832 ;;
 10833                           
 10834                           	psect	text70
 10835  0037D2                     __ptext70:
 10836                           	opt stack 0
 10837  0037D2                     _SwSpi_Set_Dac_Sync_Pin:
 10838                           	opt stack 23
 10839                           
 10840                           ;incstack = 0
 10841                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 10842  0037D2  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 10843                           
 10844                           ;SwSpiApp.c: 262: switch(cPinMode)
 10845  0037D4  D004               	goto	l718
 10846  0037D6                     
 10847                           ;SwSpiApp.c: 265: do { LATAbits.LATA2 = 0; } while(0);
 10848  0037D6  9489               	bcf	3977,2,c	;volatile
 10849                           
 10850                           ;SwSpiApp.c: 266: break;
 10851  0037D8  0012               	return	
 10852  0037DA                     
 10853                           ;SwSpiApp.c: 269: do { LATAbits.LATA2 = 1; } while(0);
 10854  0037DA  8489               	bsf	3977,2,c	;volatile
 10855                           
 10856                           ;SwSpiApp.c: 271: }
 10857                           
 10858                           ;SwSpiApp.c: 270: break;
 10859  0037DC  0012               	return	
 10860  0037DE                     l718:
 10861  0037DE  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 10862                           
 10863                           ; Switch size 1, requested type "space"
 10864                           ; Number of cases is 2, Range of values is 0 to 1
 10865                           ; switch strategies available:
 10866                           ; Name         Instructions Cycles
 10867                           ; simple_byte            7     4 (average)
 10868                           ;	Chosen strategy is simple_byte
 10869  0037E0  0A00               	xorlw	0	; case 0
 10870  0037E2  B4D8               	btfsc	status,2,c
 10871  0037E4  D7F8               	goto	l719
 10872  0037E6  0A01               	xorlw	1	; case 1
 10873  0037E8  A4D8               	btfss	status,2,c
 10874  0037EA  0012               	return	
 10875  0037EC  D7F6               	goto	l723
 10876  0037EE                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 10877                           	opt stack 0
 10878                           tosu	equ	0xFFF
 10879                           tosh	equ	0xFFE
 10880                           tosl	equ	0xFFD
 10881                           pclath	equ	0xFFA
 10882                           tblptru	equ	0xFF8
 10883                           tblptrh	equ	0xFF7
 10884                           tblptrl	equ	0xFF6
 10885                           tablat	equ	0xFF5
 10886                           prodh	equ	0xFF4
 10887                           prodl	equ	0xFF3
 10888                           intcon	equ	0xFF2
 10889                           intcon2	equ	0xFF1
 10890                           postinc0	equ	0xFEE
 10891                           plusw0	equ	0xFEB
 10892                           wreg	equ	0xFE8
 10893                           indf1	equ	0xFE7
 10894                           postdec1	equ	0xFE5
 10895                           fsr1h	equ	0xFE2
 10896                           fsr1l	equ	0xFE1
 10897                           indf2	equ	0xFDF
 10898                           postinc2	equ	0xFDE
 10899                           postdec2	equ	0xFDD
 10900                           plusw2	equ	0xFDB
 10901                           fsr2h	equ	0xFDA
 10902                           fsr2l	equ	0xFD9
 10903                           status	equ	0xFD8
 10904                           
 10905 ;; *************** function _SWSPI_Synth_send_bits *****************
 10906 ;; Defined at:
 10907 ;;		line 67 in file "SwSpiApp.c"
 10908 ;; Parameters:    Size  Location     Type
 10909 ;;  phrType         1    wreg     enum E7559
 10910 ;;  data            4   33[COMRAM] unsigned long 
 10911 ;; Auto vars:     Size  Location     Type
 10912 ;;  phrType         1   37[BANK0 ] enum E7559
 10913 ;;  bitArray       32    0[BANK0 ] unsigned char [32]
 10914 ;;  mask            4   32[BANK0 ] unsigned long 
 10915 ;;  count           1   36[BANK0 ] unsigned char 
 10916 ;; Return value:  Size  Location     Type
 10917 ;;                  1    wreg      void 
 10918 ;; Registers used:
 10919 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10920 ;; Tracked objects:
 10921 ;;		On entry : 0/0
 10922 ;;		On exit  : 0/0
 10923 ;;		Unchanged: 0/0
 10924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10925 ;;      Params:         4       0       0       0       0       0       0
 10926 ;;      Locals:         0      38       0       0       0       0       0
 10927 ;;      Temps:          0       0       0       0       0       0       0
 10928 ;;      Totals:         4      38       0       0       0       0       0
 10929 ;;Total ram usage:       42 bytes
 10930 ;; Hardware stack levels used:    1
 10931 ;; Hardware stack levels required when called:    5
 10932 ;; This function calls:
 10933 ;;		_Make32bitsArray
 10934 ;;		_SwSpi_Clk_Pin
 10935 ;;		_SwSpi_Data_Pin
 10936 ;;		_ZeroBitsArray
 10937 ;; This function is called by:
 10938 ;;		_SWSPI_send_word
 10939 ;; This function uses a non-reentrant model
 10940 ;;
 10941                           
 10942                           	psect	text71
 10943  0021E2                     __ptext71:
 10944                           	opt stack 0
 10945  0021E2                     _SWSPI_Synth_send_bits:
 10946                           	opt stack 21
 10947                           
 10948                           ;incstack = 0
 10949                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 10950  0021E2  0100               	movlb	0	; () banked
 10951  0021E4  6F85               	movwf	SWSPI_Synth_send_bits@phrType& (0+255),b
 10952                           
 10953                           ;SwSpiApp.c: 69: uint8_t count;
 10954                           ;SwSpiApp.c: 70: uint32_t mask = 0x1;
 10955  0021E6  0E01               	movlw	1
 10956  0021E8  0100               	movlb	0	; () banked
 10957  0021EA  6F80               	movwf	SWSPI_Synth_send_bits@mask& (0+255),b
 10958  0021EC  0E00               	movlw	0
 10959  0021EE  6F81               	movwf	(SWSPI_Synth_send_bits@mask+1)& (0+255),b
 10960  0021F0  0E00               	movlw	0
 10961  0021F2  6F82               	movwf	(SWSPI_Synth_send_bits@mask+2)& (0+255),b
 10962  0021F4  0E00               	movlw	0
 10963  0021F6  6F83               	movwf	(SWSPI_Synth_send_bits@mask+3)& (0+255),b
 10964                           
 10965                           ; BSR set to: 0
 10966                           ;SwSpiApp.c: 72: bool bitArray[32];
 10967                           ;SwSpiApp.c: 73: ZeroBitsArray(bitArray);
 10968  0021F8  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 10969  0021FA  6E20               	movwf	ZeroBitsArray@array,c
 10970  0021FC  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 10971  0021FE  6E21               	movwf	ZeroBitsArray@array+1,c
 10972  002200  ECDA  F01B         	call	_ZeroBitsArray	;wreg free
 10973                           
 10974                           ;SwSpiApp.c: 75: Make32bitsArray(bitArray, data);
 10975  002204  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 10976  002206  6E18               	movwf	Make32bitsArray@array,c
 10977  002208  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 10978  00220A  6E19               	movwf	Make32bitsArray@array+1,c
 10979  00220C  C022  F01A         	movff	SWSPI_Synth_send_bits@data,Make32bitsArray@data
 10980  002210  C023  F01B         	movff	SWSPI_Synth_send_bits@data+1,Make32bitsArray@data+1
 10981  002214  C024  F01C         	movff	SWSPI_Synth_send_bits@data+2,Make32bitsArray@data+2
 10982  002218  C025  F01D         	movff	SWSPI_Synth_send_bits@data+3,Make32bitsArray@data+3
 10983  00221C  EC8D  F016         	call	_Make32bitsArray	;wreg free
 10984                           
 10985                           ;SwSpiApp.c: 77: for (count = 0; count <= 31 ; count++)
 10986  002220  0E00               	movlw	0
 10987  002222  0100               	movlb	0	; () banked
 10988  002224  6F84               	movwf	SWSPI_Synth_send_bits@count& (0+255),b
 10989  002226                     l6922:
 10990                           
 10991                           ; BSR set to: 0
 10992  002226  0E1F               	movlw	31
 10993  002228  6584               	cpfsgt	SWSPI_Synth_send_bits@count& (0+255),b
 10994  00222A  D001               	goto	l603
 10995  00222C  D026               	goto	u6720
 10996  00222E                     l603:
 10997                           
 10998                           ; BSR set to: 0
 10999                           ;SwSpiApp.c: 78: {
 11000                           ;SwSpiApp.c: 80: SwSpi_Clk_Pin(phrType, 0);
 11001                           
 11002                           ; BSR set to: 0
 11003  00222E  0E00               	movlw	0
 11004  002230  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11005  002232  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11006  002234  EC10  F017         	call	_SwSpi_Clk_Pin
 11007                           
 11008                           ;SwSpiApp.c: 82: if (bitArray[count])
 11009  002238  0100               	movlb	0	; () banked
 11010  00223A  5184               	movf	SWSPI_Synth_send_bits@count& (0+255),w,b
 11011  00223C  0D01               	mullw	1
 11012  00223E  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 11013  002240  24F3               	addwf	prodl,w,c
 11014  002242  6ED9               	movwf	fsr2l,c
 11015  002244  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 11016  002246  20F4               	addwfc	prodh,w,c
 11017  002248  6EDA               	movwf	fsr2h,c
 11018  00224A  50DF               	movf	indf2,w,c
 11019  00224C  B4D8               	btfsc	status,2,c
 11020  00224E  D006               	goto	l605
 11021                           
 11022                           ; BSR set to: 0
 11023                           ;SwSpiApp.c: 83: {
 11024                           ;SwSpiApp.c: 84: SwSpi_Data_Pin(phrType, 1);
 11025  002250  0E01               	movlw	1
 11026  002252  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11027  002254  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11028  002256  ECE5  F016         	call	_SwSpi_Data_Pin
 11029                           
 11030                           ;SwSpiApp.c: 85: }
 11031  00225A  D006               	goto	l606
 11032  00225C                     l605:
 11033                           
 11034                           ;SwSpiApp.c: 86: else
 11035                           ;SwSpiApp.c: 87: {
 11036                           ;SwSpiApp.c: 88: SwSpi_Data_Pin(phrType, 0);
 11037  00225C  0E00               	movlw	0
 11038  00225E  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11039  002260  0100               	movlb	0	; () banked
 11040  002262  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11041  002264  ECE5  F016         	call	_SwSpi_Data_Pin
 11042  002268                     l606:
 11043                           
 11044                           ;SwSpiApp.c: 89: }
 11045                           ;SwSpiApp.c: 91: SwSpi_Clk_Pin(phrType, 1);
 11046  002268  0E01               	movlw	1
 11047  00226A  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11048  00226C  0100               	movlb	0	; () banked
 11049  00226E  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11050  002270  EC10  F017         	call	_SwSpi_Clk_Pin
 11051  002274  0100               	movlb	0	; () banked
 11052  002276  2B84               	incf	SWSPI_Synth_send_bits@count& (0+255),f,b
 11053  002278  D7D6               	goto	l6922
 11054  00227A                     u6720:
 11055                           
 11056                           ; BSR set to: 0
 11057                           ;SwSpiApp.c: 92: }
 11058                           ;SwSpiApp.c: 94: _delay((unsigned long)((50)*(8000000/4000000.0)));
 11059                           
 11060                           ; BSR set to: 0
 11061  00227A  0E21               	movlw	33
 11062  00227C                     u8607:
 11063  00227C  2EE8               	decfsz	wreg,f,c
 11064  00227E  D7FE               	bra	u8607
 11065  002280  F000               	nop	
 11066                           
 11067                           ;SwSpiApp.c: 95: SwSpi_Data_Pin(phrType, 0);
 11068  002282  0E00               	movlw	0
 11069  002284  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11070  002286  0100               	movlb	0	; () banked
 11071  002288  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11072  00228A  ECE5  F016         	call	_SwSpi_Data_Pin
 11073                           
 11074                           ;SwSpiApp.c: 96: SwSpi_Clk_Pin(phrType, 0);
 11075  00228E  0E00               	movlw	0
 11076  002290  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11077  002292  0100               	movlb	0	; () banked
 11078  002294  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 11079  002296  EC10  F017         	call	_SwSpi_Clk_Pin
 11080  00229A  0012               	return		;funcret
 11081  00229C                     __end_of_SWSPI_Synth_send_bits:
 11082                           	opt stack 0
 11083                           tosu	equ	0xFFF
 11084                           tosh	equ	0xFFE
 11085                           tosl	equ	0xFFD
 11086                           pclath	equ	0xFFA
 11087                           tblptru	equ	0xFF8
 11088                           tblptrh	equ	0xFF7
 11089                           tblptrl	equ	0xFF6
 11090                           tablat	equ	0xFF5
 11091                           prodh	equ	0xFF4
 11092                           prodl	equ	0xFF3
 11093                           intcon	equ	0xFF2
 11094                           intcon2	equ	0xFF1
 11095                           postinc0	equ	0xFEE
 11096                           plusw0	equ	0xFEB
 11097                           wreg	equ	0xFE8
 11098                           indf1	equ	0xFE7
 11099                           postdec1	equ	0xFE5
 11100                           fsr1h	equ	0xFE2
 11101                           fsr1l	equ	0xFE1
 11102                           indf2	equ	0xFDF
 11103                           postinc2	equ	0xFDE
 11104                           postdec2	equ	0xFDD
 11105                           plusw2	equ	0xFDB
 11106                           fsr2h	equ	0xFDA
 11107                           fsr2l	equ	0xFD9
 11108                           status	equ	0xFD8
 11109                           
 11110 ;; *************** function _ZeroBitsArray *****************
 11111 ;; Defined at:
 11112 ;;		line 29 in file "SystemCommon.c"
 11113 ;; Parameters:    Size  Location     Type
 11114 ;;  array           2   31[COMRAM] PTR unsigned char 
 11115 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 11116 ;; Auto vars:     Size  Location     Type
 11117 ;;		None
 11118 ;; Return value:  Size  Location     Type
 11119 ;;                  1    wreg      void 
 11120 ;; Registers used:
 11121 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11122 ;; Tracked objects:
 11123 ;;		On entry : 0/0
 11124 ;;		On exit  : 0/0
 11125 ;;		Unchanged: 0/0
 11126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11127 ;;      Params:         2       0       0       0       0       0       0
 11128 ;;      Locals:         0       0       0       0       0       0       0
 11129 ;;      Temps:          0       0       0       0       0       0       0
 11130 ;;      Totals:         2       0       0       0       0       0       0
 11131 ;;Total ram usage:        2 bytes
 11132 ;; Hardware stack levels used:    1
 11133 ;; Hardware stack levels required when called:    4
 11134 ;; This function calls:
 11135 ;;		_memset
 11136 ;; This function is called by:
 11137 ;;		_SWSPI_Synth_send_bits
 11138 ;; This function uses a non-reentrant model
 11139 ;;
 11140                           
 11141                           	psect	text72
 11142  0037B4                     __ptext72:
 11143                           	opt stack 0
 11144  0037B4                     _ZeroBitsArray:
 11145                           	opt stack 21
 11146                           
 11147                           ;SystemCommon.c: 31: memset(array, 0x0, 32);
 11148                           
 11149                           ;incstack = 0
 11150  0037B4  C020  F018         	movff	ZeroBitsArray@array,memset@p1
 11151  0037B8  C021  F019         	movff	ZeroBitsArray@array+1,memset@p1+1
 11152  0037BC  0E00               	movlw	0
 11153  0037BE  6E1B               	movwf	memset@c+1,c
 11154  0037C0  0E00               	movlw	0
 11155  0037C2  6E1A               	movwf	memset@c,c
 11156  0037C4  0E00               	movlw	0
 11157  0037C6  6E1D               	movwf	memset@n+1,c
 11158  0037C8  0E20               	movlw	32
 11159  0037CA  6E1C               	movwf	memset@n,c
 11160  0037CC  ECDD  F01A         	call	_memset	;wreg free
 11161  0037D0  0012               	return		;funcret
 11162  0037D2                     __end_of_ZeroBitsArray:
 11163                           	opt stack 0
 11164                           tosu	equ	0xFFF
 11165                           tosh	equ	0xFFE
 11166                           tosl	equ	0xFFD
 11167                           pclath	equ	0xFFA
 11168                           tblptru	equ	0xFF8
 11169                           tblptrh	equ	0xFF7
 11170                           tblptrl	equ	0xFF6
 11171                           tablat	equ	0xFF5
 11172                           prodh	equ	0xFF4
 11173                           prodl	equ	0xFF3
 11174                           intcon	equ	0xFF2
 11175                           intcon2	equ	0xFF1
 11176                           postinc0	equ	0xFEE
 11177                           plusw0	equ	0xFEB
 11178                           wreg	equ	0xFE8
 11179                           indf1	equ	0xFE7
 11180                           postdec1	equ	0xFE5
 11181                           fsr1h	equ	0xFE2
 11182                           fsr1l	equ	0xFE1
 11183                           indf2	equ	0xFDF
 11184                           postinc2	equ	0xFDE
 11185                           postdec2	equ	0xFDD
 11186                           plusw2	equ	0xFDB
 11187                           fsr2h	equ	0xFDA
 11188                           fsr2l	equ	0xFD9
 11189                           status	equ	0xFD8
 11190                           
 11191 ;; *************** function _memset *****************
 11192 ;; Defined at:
 11193 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 11194 ;; Parameters:    Size  Location     Type
 11195 ;;  p1              2   23[COMRAM] PTR void 
 11196 ;;		 -> GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@T
      +xMsg(27), 
 11197 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), 
 11198 ;;		 -> rxMsgData(20), rxMsgQueue(20), 
 11199 ;;  c               2   25[COMRAM] int 
 11200 ;;  n               2   27[COMRAM] unsigned int 
 11201 ;; Auto vars:     Size  Location     Type
 11202 ;;  p               2   29[COMRAM] PTR unsigned char 
 11203 ;;		 -> GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@T
      +xMsg(27), 
 11204 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), 
 11205 ;;		 -> rxMsgData(20), rxMsgQueue(20), 
 11206 ;; Return value:  Size  Location     Type
 11207 ;;                  2   23[COMRAM] PTR void 
 11208 ;; Registers used:
 11209 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11210 ;; Tracked objects:
 11211 ;;		On entry : 0/0
 11212 ;;		On exit  : 0/0
 11213 ;;		Unchanged: 0/0
 11214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11215 ;;      Params:         6       0       0       0       0       0       0
 11216 ;;      Locals:         2       0       0       0       0       0       0
 11217 ;;      Temps:          0       0       0       0       0       0       0
 11218 ;;      Totals:         8       0       0       0       0       0       0
 11219 ;;Total ram usage:        8 bytes
 11220 ;; Hardware stack levels used:    1
 11221 ;; Hardware stack levels required when called:    3
 11222 ;; This function calls:
 11223 ;;		Nothing
 11224 ;; This function is called by:
 11225 ;;		_ZeroArray
 11226 ;;		_ZeroBitsArray
 11227 ;; This function uses a non-reentrant model
 11228 ;;
 11229                           
 11230                           	psect	text73
 11231  0035BA                     __ptext73:
 11232                           	opt stack 0
 11233  0035BA                     _memset:
 11234                           	opt stack 25
 11235                           
 11236                           ;incstack = 0
 11237  0035BA  C018  F01E         	movff	memset@p1,memset@p
 11238  0035BE  C019  F01F         	movff	memset@p1+1,memset@p+1
 11239  0035C2  D008               	goto	l1893
 11240  0035C4                     l6506:
 11241  0035C4  C01E  FFD9         	movff	memset@p,fsr2l
 11242  0035C8  C01F  FFDA         	movff	memset@p+1,fsr2h
 11243  0035CC  C01A  FFDF         	movff	memset@c,indf2
 11244  0035D0  4A1E               	infsnz	memset@p,f,c
 11245  0035D2  2A1F               	incf	memset@p+1,f,c
 11246  0035D4                     l1893:
 11247  0035D4  061C               	decf	memset@n,f,c
 11248  0035D6  A0D8               	btfss	status,0,c
 11249  0035D8  061D               	decf	memset@n+1,f,c
 11250  0035DA  281C               	incf	memset@n,w,c
 11251  0035DC  E1F3               	bnz	l6506
 11252  0035DE  281D               	incf	memset@n+1,w,c
 11253  0035E0  B4D8               	btfsc	status,2,c
 11254  0035E2  0012               	return	
 11255  0035E4  D7EF               	goto	l1894
 11256  0035E6                     __end_of_memset:
 11257                           	opt stack 0
 11258                           tosu	equ	0xFFF
 11259                           tosh	equ	0xFFE
 11260                           tosl	equ	0xFFD
 11261                           pclath	equ	0xFFA
 11262                           tblptru	equ	0xFF8
 11263                           tblptrh	equ	0xFF7
 11264                           tblptrl	equ	0xFF6
 11265                           tablat	equ	0xFF5
 11266                           prodh	equ	0xFF4
 11267                           prodl	equ	0xFF3
 11268                           intcon	equ	0xFF2
 11269                           intcon2	equ	0xFF1
 11270                           postinc0	equ	0xFEE
 11271                           plusw0	equ	0xFEB
 11272                           wreg	equ	0xFE8
 11273                           indf1	equ	0xFE7
 11274                           postdec1	equ	0xFE5
 11275                           fsr1h	equ	0xFE2
 11276                           fsr1l	equ	0xFE1
 11277                           indf2	equ	0xFDF
 11278                           postinc2	equ	0xFDE
 11279                           postdec2	equ	0xFDD
 11280                           plusw2	equ	0xFDB
 11281                           fsr2h	equ	0xFDA
 11282                           fsr2l	equ	0xFD9
 11283                           status	equ	0xFD8
 11284                           
 11285 ;; *************** function _Make32bitsArray *****************
 11286 ;; Defined at:
 11287 ;;		line 100 in file "SystemCommon.c"
 11288 ;; Parameters:    Size  Location     Type
 11289 ;;  array           2   23[COMRAM] PTR unsigned char 
 11290 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 11291 ;;  data            4   25[COMRAM] unsigned long 
 11292 ;; Auto vars:     Size  Location     Type
 11293 ;;  idx             2   31[COMRAM] int 
 11294 ;; Return value:  Size  Location     Type
 11295 ;;                  1    wreg      void 
 11296 ;; Registers used:
 11297 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11298 ;; Tracked objects:
 11299 ;;		On entry : 0/0
 11300 ;;		On exit  : 0/0
 11301 ;;		Unchanged: 0/0
 11302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11303 ;;      Params:         6       0       0       0       0       0       0
 11304 ;;      Locals:         2       0       0       0       0       0       0
 11305 ;;      Temps:          2       0       0       0       0       0       0
 11306 ;;      Totals:        10       0       0       0       0       0       0
 11307 ;;Total ram usage:       10 bytes
 11308 ;; Hardware stack levels used:    1
 11309 ;; Hardware stack levels required when called:    3
 11310 ;; This function calls:
 11311 ;;		Nothing
 11312 ;; This function is called by:
 11313 ;;		_SWSPI_Synth_send_bits
 11314 ;; This function uses a non-reentrant model
 11315 ;;
 11316                           
 11317                           	psect	text74
 11318  002D1A                     __ptext74:
 11319                           	opt stack 0
 11320  002D1A                     _Make32bitsArray:
 11321                           	opt stack 22
 11322                           
 11323                           ;SystemCommon.c: 102: for(int idx = 0; idx <= 32; idx++)
 11324                           
 11325                           ;incstack = 0
 11326  002D1A  0E00               	movlw	0
 11327  002D1C  6E21               	movwf	Make32bitsArray@idx+1,c
 11328  002D1E  0E00               	movlw	0
 11329  002D20  6E20               	movwf	Make32bitsArray@idx,c
 11330  002D22                     l6588:
 11331  002D22  BE21               	btfsc	Make32bitsArray@idx+1,7,c
 11332  002D24  D006               	goto	l1318
 11333  002D26  5021               	movf	Make32bitsArray@idx+1,w,c
 11334  002D28  E123               	bnz	l1320
 11335  002D2A  0E21               	movlw	33
 11336  002D2C  5C20               	subwf	Make32bitsArray@idx,w,c
 11337  002D2E  B0D8               	btfsc	status,0,c
 11338  002D30  0012               	return	
 11339  002D32                     l1318:
 11340                           
 11341                           ;SystemCommon.c: 103: {
 11342                           ;SystemCommon.c: 104: array[32 - idx - 1] = data % 2;
 11343  002D32  0E01               	movlw	1
 11344  002D34  2420               	addwf	Make32bitsArray@idx,w,c
 11345  002D36  6E1E               	movwf	??_Make32bitsArray& (0+255),c
 11346  002D38  0E00               	movlw	0
 11347  002D3A  2021               	addwfc	Make32bitsArray@idx+1,w,c
 11348  002D3C  6E1F               	movwf	(??_Make32bitsArray+1)& (0+255),c
 11349  002D3E  1E1E               	comf	??_Make32bitsArray,f,c
 11350  002D40  1E1F               	comf	??_Make32bitsArray+1,f,c
 11351  002D42  4A1E               	infsnz	??_Make32bitsArray,f,c
 11352  002D44  2A1F               	incf	??_Make32bitsArray+1,f,c
 11353  002D46  0E20               	movlw	32
 11354  002D48  261E               	addwf	??_Make32bitsArray,f,c
 11355  002D4A  0E00               	movlw	0
 11356  002D4C  221F               	addwfc	??_Make32bitsArray+1,f,c
 11357  002D4E  501E               	movf	??_Make32bitsArray,w,c
 11358  002D50  2418               	addwf	Make32bitsArray@array,w,c
 11359  002D52  6ED9               	movwf	fsr2l,c
 11360  002D54  501F               	movf	??_Make32bitsArray+1,w,c
 11361  002D56  2019               	addwfc	Make32bitsArray@array+1,w,c
 11362  002D58  6EDA               	movwf	fsr2h,c
 11363  002D5A  501A               	movf	Make32bitsArray@data,w,c
 11364  002D5C  0B01               	andlw	1
 11365  002D5E  6EDF               	movwf	indf2,c
 11366                           
 11367                           ;SystemCommon.c: 105: data /= 2;
 11368  002D60  90D8               	bcf	status,0,c
 11369  002D62  321D               	rrcf	Make32bitsArray@data+3,f,c
 11370  002D64  321C               	rrcf	Make32bitsArray@data+2,f,c
 11371  002D66  321B               	rrcf	Make32bitsArray@data+1,f,c
 11372  002D68  321A               	rrcf	Make32bitsArray@data,f,c
 11373  002D6A  4A20               	infsnz	Make32bitsArray@idx,f,c
 11374  002D6C  2A21               	incf	Make32bitsArray@idx+1,f,c
 11375  002D6E  D7D9               	goto	l6588
 11376  002D70                     l1320:
 11377  002D70  0012               	return		;funcret
 11378  002D72                     __end_of_Make32bitsArray:
 11379                           	opt stack 0
 11380                           tosu	equ	0xFFF
 11381                           tosh	equ	0xFFE
 11382                           tosl	equ	0xFFD
 11383                           pclath	equ	0xFFA
 11384                           tblptru	equ	0xFF8
 11385                           tblptrh	equ	0xFF7
 11386                           tblptrl	equ	0xFF6
 11387                           tablat	equ	0xFF5
 11388                           prodh	equ	0xFF4
 11389                           prodl	equ	0xFF3
 11390                           intcon	equ	0xFF2
 11391                           intcon2	equ	0xFF1
 11392                           postinc0	equ	0xFEE
 11393                           plusw0	equ	0xFEB
 11394                           wreg	equ	0xFE8
 11395                           indf1	equ	0xFE7
 11396                           postdec1	equ	0xFE5
 11397                           fsr1h	equ	0xFE2
 11398                           fsr1l	equ	0xFE1
 11399                           indf2	equ	0xFDF
 11400                           postinc2	equ	0xFDE
 11401                           postdec2	equ	0xFDD
 11402                           plusw2	equ	0xFDB
 11403                           fsr2h	equ	0xFDA
 11404                           fsr2l	equ	0xFD9
 11405                           status	equ	0xFD8
 11406                           
 11407 ;; *************** function _SWSPI_DAC_send_bits *****************
 11408 ;; Defined at:
 11409 ;;		line 43 in file "SwSpiApp.c"
 11410 ;; Parameters:    Size  Location     Type
 11411 ;;  phrType         1    wreg     enum E7559
 11412 ;;  data            1   25[COMRAM] unsigned char 
 11413 ;; Auto vars:     Size  Location     Type
 11414 ;;  phrType         1   27[COMRAM] enum E7559
 11415 ;;  count           1   26[COMRAM] unsigned char 
 11416 ;; Return value:  Size  Location     Type
 11417 ;;                  1    wreg      void 
 11418 ;; Registers used:
 11419 ;;		wreg, status,2, status,0, cstack
 11420 ;; Tracked objects:
 11421 ;;		On entry : 0/0
 11422 ;;		On exit  : 0/0
 11423 ;;		Unchanged: 0/0
 11424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11425 ;;      Params:         1       0       0       0       0       0       0
 11426 ;;      Locals:         2       0       0       0       0       0       0
 11427 ;;      Temps:          0       0       0       0       0       0       0
 11428 ;;      Totals:         3       0       0       0       0       0       0
 11429 ;;Total ram usage:        3 bytes
 11430 ;; Hardware stack levels used:    1
 11431 ;; Hardware stack levels required when called:    4
 11432 ;; This function calls:
 11433 ;;		_SwSpi_Clk_Pin
 11434 ;;		_SwSpi_Data_Pin
 11435 ;; This function is called by:
 11436 ;;		_SWSPI_send_word
 11437 ;; This function uses a non-reentrant model
 11438 ;;
 11439                           
 11440                           	psect	text75
 11441  002D72                     __ptext75:
 11442                           	opt stack 0
 11443  002D72                     _SWSPI_DAC_send_bits:
 11444                           	opt stack 22
 11445                           
 11446                           ;incstack = 0
 11447                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 11448  002D72  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 11449                           
 11450                           ;SwSpiApp.c: 45: uint8_t count;
 11451                           ;SwSpiApp.c: 46: for (count = 8; count ; count--, data <<= 1)
 11452  002D74  0E08               	movlw	8
 11453  002D76  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 11454  002D78  D01A               	goto	l595
 11455  002D7A                     
 11456                           ;SwSpiApp.c: 47: {
 11457                           ;SwSpiApp.c: 48: SwSpi_Clk_Pin(phrType, 1);
 11458  002D7A  0E01               	movlw	1
 11459  002D7C  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11460  002D7E  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11461  002D80  EC10  F017         	call	_SwSpi_Clk_Pin
 11462                           
 11463                           ;SwSpiApp.c: 50: if (data & 0X80)
 11464  002D84  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 11465  002D86  D006               	goto	l597
 11466                           
 11467                           ;SwSpiApp.c: 51: {
 11468                           ;SwSpiApp.c: 53: SwSpi_Data_Pin(phrType, 1);
 11469  002D88  0E01               	movlw	1
 11470  002D8A  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11471  002D8C  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11472  002D8E  ECE5  F016         	call	_SwSpi_Data_Pin
 11473                           
 11474                           ;SwSpiApp.c: 54: }
 11475  002D92  D005               	goto	l598
 11476  002D94                     l597:
 11477                           
 11478                           ;SwSpiApp.c: 55: else
 11479                           ;SwSpiApp.c: 56: {
 11480                           ;SwSpiApp.c: 57: SwSpi_Data_Pin(phrType, 0);
 11481  002D94  0E00               	movlw	0
 11482  002D96  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11483  002D98  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11484  002D9A  ECE5  F016         	call	_SwSpi_Data_Pin
 11485  002D9E                     l598:
 11486                           
 11487                           ;SwSpiApp.c: 58: }
 11488                           ;SwSpiApp.c: 60: SwSpi_Clk_Pin(phrType, 0);
 11489  002D9E  0E00               	movlw	0
 11490  002DA0  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11491  002DA2  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11492  002DA4  EC10  F017         	call	_SwSpi_Clk_Pin
 11493  002DA8  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 11494  002DAA  90D8               	bcf	status,0,c
 11495  002DAC  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 11496  002DAE                     l595:
 11497  002DAE  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 11498  002DB0  A4D8               	btfss	status,2,c
 11499  002DB2  D7E3               	goto	l596
 11500                           
 11501                           ;SwSpiApp.c: 61: }
 11502                           ;SwSpiApp.c: 63: SwSpi_Data_Pin(phrType, 0);
 11503  002DB4  0E00               	movlw	0
 11504  002DB6  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11505  002DB8  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11506  002DBA  ECE5  F016         	call	_SwSpi_Data_Pin
 11507                           
 11508                           ;SwSpiApp.c: 64: SwSpi_Clk_Pin(phrType, 0);
 11509  002DBE  0E00               	movlw	0
 11510  002DC0  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11511  002DC2  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11512  002DC4  EC10  F017         	call	_SwSpi_Clk_Pin
 11513  002DC8  0012               	return		;funcret
 11514  002DCA                     __end_of_SWSPI_DAC_send_bits:
 11515                           	opt stack 0
 11516                           tosu	equ	0xFFF
 11517                           tosh	equ	0xFFE
 11518                           tosl	equ	0xFFD
 11519                           pclath	equ	0xFFA
 11520                           tblptru	equ	0xFF8
 11521                           tblptrh	equ	0xFF7
 11522                           tblptrl	equ	0xFF6
 11523                           tablat	equ	0xFF5
 11524                           prodh	equ	0xFF4
 11525                           prodl	equ	0xFF3
 11526                           intcon	equ	0xFF2
 11527                           intcon2	equ	0xFF1
 11528                           postinc0	equ	0xFEE
 11529                           plusw0	equ	0xFEB
 11530                           wreg	equ	0xFE8
 11531                           indf1	equ	0xFE7
 11532                           postdec1	equ	0xFE5
 11533                           fsr1h	equ	0xFE2
 11534                           fsr1l	equ	0xFE1
 11535                           indf2	equ	0xFDF
 11536                           postinc2	equ	0xFDE
 11537                           postdec2	equ	0xFDD
 11538                           plusw2	equ	0xFDB
 11539                           fsr2h	equ	0xFDA
 11540                           fsr2l	equ	0xFD9
 11541                           status	equ	0xFD8
 11542                           
 11543 ;; *************** function _SwSpi_Data_Pin *****************
 11544 ;; Defined at:
 11545 ;;		line 103 in file "SwSpiApp.c"
 11546 ;; Parameters:    Size  Location     Type
 11547 ;;  phrType         1    wreg     enum E7559
 11548 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11549 ;; Auto vars:     Size  Location     Type
 11550 ;;  phrType         1   24[COMRAM] enum E7559
 11551 ;; Return value:  Size  Location     Type
 11552 ;;                  1    wreg      void 
 11553 ;; Registers used:
 11554 ;;		wreg, status,2, status,0
 11555 ;; Tracked objects:
 11556 ;;		On entry : 0/0
 11557 ;;		On exit  : 0/0
 11558 ;;		Unchanged: 0/0
 11559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11560 ;;      Params:         1       0       0       0       0       0       0
 11561 ;;      Locals:         1       0       0       0       0       0       0
 11562 ;;      Temps:          0       0       0       0       0       0       0
 11563 ;;      Totals:         2       0       0       0       0       0       0
 11564 ;;Total ram usage:        2 bytes
 11565 ;; Hardware stack levels used:    1
 11566 ;; Hardware stack levels required when called:    3
 11567 ;; This function calls:
 11568 ;;		Nothing
 11569 ;; This function is called by:
 11570 ;;		_SWSPI_DAC_send_bits
 11571 ;;		_SWSPI_Synth_send_bits
 11572 ;; This function uses a non-reentrant model
 11573 ;;
 11574                           
 11575                           	psect	text76
 11576  002DCA                     __ptext76:
 11577                           	opt stack 0
 11578  002DCA                     _SwSpi_Data_Pin:
 11579                           	opt stack 22
 11580                           
 11581                           ;incstack = 0
 11582                           ;SwSpi_Data_Pin@phrType stored from wreg
 11583  002DCA  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 11584                           
 11585                           ;SwSpiApp.c: 105: switch(phrType)
 11586  002DCC  D01E               	goto	l610
 11587  002DCE                     
 11588                           ;SwSpiApp.c: 108: if(cPinMode == 1)
 11589  002DCE  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11590  002DD0  A4D8               	btfss	status,2,c
 11591  002DD2  D002               	goto	l612
 11592                           
 11593                           ;SwSpiApp.c: 109: {
 11594                           ;SwSpiApp.c: 110: do { LATDbits.LATD0 = 1; } while(0);
 11595  002DD4  808C               	bsf	3980,0,c	;volatile
 11596                           
 11597                           ;SwSpiApp.c: 111: }
 11598  002DD6  0012               	return	
 11599  002DD8                     l612:
 11600                           
 11601                           ;SwSpiApp.c: 112: else if (cPinMode == 0)
 11602  002DD8  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11603  002DDA  A4D8               	btfss	status,2,c
 11604  002DDC  0012               	return	
 11605                           
 11606                           ;SwSpiApp.c: 113: {
 11607                           ;SwSpiApp.c: 114: do { LATDbits.LATD0 = 0; } while(0);
 11608  002DDE  908C               	bcf	3980,0,c	;volatile
 11609                           
 11610                           ;SwSpiApp.c: 115: }
 11611                           ;SwSpiApp.c: 116: break;
 11612  002DE0  0012               	return	
 11613  002DE2                     
 11614                           ;SwSpiApp.c: 119: if(cPinMode == 1)
 11615  002DE2  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11616  002DE4  A4D8               	btfss	status,2,c
 11617  002DE6  D002               	goto	l621
 11618                           
 11619                           ;SwSpiApp.c: 120: {
 11620                           ;SwSpiApp.c: 121: do { LATCbits.LATC5 = 1; } while(0);
 11621  002DE8  8A8B               	bsf	3979,5,c	;volatile
 11622                           
 11623                           ;SwSpiApp.c: 122: }
 11624  002DEA  0012               	return	
 11625  002DEC                     l621:
 11626                           
 11627                           ;SwSpiApp.c: 123: else if (cPinMode == 0)
 11628  002DEC  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11629  002DEE  A4D8               	btfss	status,2,c
 11630  002DF0  0012               	return	
 11631                           
 11632                           ;SwSpiApp.c: 124: {
 11633                           ;SwSpiApp.c: 125: do { LATCbits.LATC5 = 0; } while(0);
 11634  002DF2  9A8B               	bcf	3979,5,c	;volatile
 11635                           
 11636                           ;SwSpiApp.c: 126: }
 11637                           ;SwSpiApp.c: 127: break;
 11638  002DF4  0012               	return	
 11639  002DF6                     
 11640                           ;SwSpiApp.c: 130: if(cPinMode == 1)
 11641  002DF6  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11642  002DF8  A4D8               	btfss	status,2,c
 11643  002DFA  D002               	goto	l629
 11644                           
 11645                           ;SwSpiApp.c: 131: {
 11646                           ;SwSpiApp.c: 132: do { LATAbits.LATA4 = 1; } while(0);
 11647  002DFC  8889               	bsf	3977,4,c	;volatile
 11648                           
 11649                           ;SwSpiApp.c: 133: }
 11650  002DFE  0012               	return	
 11651  002E00                     l629:
 11652                           
 11653                           ;SwSpiApp.c: 134: else if (cPinMode == 0)
 11654  002E00  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11655  002E02  A4D8               	btfss	status,2,c
 11656  002E04  0012               	return	
 11657                           
 11658                           ;SwSpiApp.c: 135: {
 11659                           ;SwSpiApp.c: 136: do { LATAbits.LATA4 = 0; } while(0);
 11660  002E06  9889               	bcf	3977,4,c	;volatile
 11661                           
 11662                           ;SwSpiApp.c: 139: }
 11663                           
 11664                           ;SwSpiApp.c: 137: }
 11665                           ;SwSpiApp.c: 138: break;
 11666  002E08  0012               	return	
 11667  002E0A                     l610:
 11668  002E0A  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 11669                           
 11670                           ; Switch size 1, requested type "space"
 11671                           ; Number of cases is 3, Range of values is 0 to 2
 11672                           ; switch strategies available:
 11673                           ; Name         Instructions Cycles
 11674                           ; simple_byte           10     6 (average)
 11675                           ;	Chosen strategy is simple_byte
 11676  002E0C  0A00               	xorlw	0	; case 0
 11677  002E0E  B4D8               	btfsc	status,2,c
 11678  002E10  D7DE               	goto	l611
 11679  002E12  0A01               	xorlw	1	; case 1
 11680  002E14  B4D8               	btfsc	status,2,c
 11681  002E16  D7E5               	goto	l620
 11682  002E18  0A03               	xorlw	3	; case 2
 11683  002E1A  A4D8               	btfss	status,2,c
 11684  002E1C  0012               	return	
 11685  002E1E  D7EB               	goto	l628
 11686  002E20                     __end_of_SwSpi_Data_Pin:
 11687                           	opt stack 0
 11688                           tosu	equ	0xFFF
 11689                           tosh	equ	0xFFE
 11690                           tosl	equ	0xFFD
 11691                           pclath	equ	0xFFA
 11692                           tblptru	equ	0xFF8
 11693                           tblptrh	equ	0xFF7
 11694                           tblptrl	equ	0xFF6
 11695                           tablat	equ	0xFF5
 11696                           prodh	equ	0xFF4
 11697                           prodl	equ	0xFF3
 11698                           intcon	equ	0xFF2
 11699                           intcon2	equ	0xFF1
 11700                           postinc0	equ	0xFEE
 11701                           plusw0	equ	0xFEB
 11702                           wreg	equ	0xFE8
 11703                           indf1	equ	0xFE7
 11704                           postdec1	equ	0xFE5
 11705                           fsr1h	equ	0xFE2
 11706                           fsr1l	equ	0xFE1
 11707                           indf2	equ	0xFDF
 11708                           postinc2	equ	0xFDE
 11709                           postdec2	equ	0xFDD
 11710                           plusw2	equ	0xFDB
 11711                           fsr2h	equ	0xFDA
 11712                           fsr2l	equ	0xFD9
 11713                           status	equ	0xFD8
 11714                           
 11715 ;; *************** function _SwSpi_Clk_Pin *****************
 11716 ;; Defined at:
 11717 ;;		line 142 in file "SwSpiApp.c"
 11718 ;; Parameters:    Size  Location     Type
 11719 ;;  phrType         1    wreg     enum E7559
 11720 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11721 ;; Auto vars:     Size  Location     Type
 11722 ;;  phrType         1   24[COMRAM] enum E7559
 11723 ;; Return value:  Size  Location     Type
 11724 ;;                  1    wreg      void 
 11725 ;; Registers used:
 11726 ;;		wreg, status,2, status,0
 11727 ;; Tracked objects:
 11728 ;;		On entry : 0/0
 11729 ;;		On exit  : 0/0
 11730 ;;		Unchanged: 0/0
 11731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11732 ;;      Params:         1       0       0       0       0       0       0
 11733 ;;      Locals:         1       0       0       0       0       0       0
 11734 ;;      Temps:          0       0       0       0       0       0       0
 11735 ;;      Totals:         2       0       0       0       0       0       0
 11736 ;;Total ram usage:        2 bytes
 11737 ;; Hardware stack levels used:    1
 11738 ;; Hardware stack levels required when called:    3
 11739 ;; This function calls:
 11740 ;;		Nothing
 11741 ;; This function is called by:
 11742 ;;		_SWSPI_DAC_send_bits
 11743 ;;		_SWSPI_Synth_send_bits
 11744 ;;		_SwSpi_Synth_Toggle_Clock
 11745 ;; This function uses a non-reentrant model
 11746 ;;
 11747                           
 11748                           	psect	text77
 11749  002E20                     __ptext77:
 11750                           	opt stack 0
 11751  002E20                     _SwSpi_Clk_Pin:
 11752                           	opt stack 22
 11753                           
 11754                           ;incstack = 0
 11755                           ;SwSpi_Clk_Pin@phrType stored from wreg
 11756  002E20  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 11757                           
 11758                           ;SwSpiApp.c: 144: switch(phrType)
 11759  002E22  D01E               	goto	l639
 11760  002E24                     
 11761                           ;SwSpiApp.c: 147: if(cPinMode == 1)
 11762  002E24  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11763  002E26  A4D8               	btfss	status,2,c
 11764  002E28  D002               	goto	l641
 11765                           
 11766                           ;SwSpiApp.c: 148: {
 11767                           ;SwSpiApp.c: 149: do { LATCbits.LATC3 = 1; } while(0);
 11768  002E2A  868B               	bsf	3979,3,c	;volatile
 11769                           
 11770                           ;SwSpiApp.c: 150: }
 11771  002E2C  0012               	return	
 11772  002E2E                     l641:
 11773                           
 11774                           ;SwSpiApp.c: 151: else if (cPinMode == 0)
 11775  002E2E  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11776  002E30  A4D8               	btfss	status,2,c
 11777  002E32  0012               	return	
 11778                           
 11779                           ;SwSpiApp.c: 152: {
 11780                           ;SwSpiApp.c: 153: do { LATCbits.LATC3 = 0; } while(0);
 11781  002E34  968B               	bcf	3979,3,c	;volatile
 11782                           
 11783                           ;SwSpiApp.c: 154: }
 11784                           ;SwSpiApp.c: 155: break;
 11785  002E36  0012               	return	
 11786  002E38                     
 11787                           ;SwSpiApp.c: 158: if(cPinMode == 1)
 11788  002E38  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11789  002E3A  A4D8               	btfss	status,2,c
 11790  002E3C  D002               	goto	l650
 11791                           
 11792                           ;SwSpiApp.c: 159: {
 11793                           ;SwSpiApp.c: 160: do { LATCbits.LATC4 = 1; } while(0);
 11794  002E3E  888B               	bsf	3979,4,c	;volatile
 11795                           
 11796                           ;SwSpiApp.c: 161: }
 11797  002E40  0012               	return	
 11798  002E42                     l650:
 11799                           
 11800                           ;SwSpiApp.c: 162: else if (cPinMode == 0)
 11801  002E42  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11802  002E44  A4D8               	btfss	status,2,c
 11803  002E46  0012               	return	
 11804                           
 11805                           ;SwSpiApp.c: 163: {
 11806                           ;SwSpiApp.c: 164: do { LATCbits.LATC4 = 0; } while(0);
 11807  002E48  988B               	bcf	3979,4,c	;volatile
 11808                           
 11809                           ;SwSpiApp.c: 165: }
 11810                           ;SwSpiApp.c: 167: break;
 11811  002E4A  0012               	return	
 11812  002E4C                     
 11813                           ;SwSpiApp.c: 170: if(cPinMode == 1)
 11814  002E4C  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11815  002E4E  A4D8               	btfss	status,2,c
 11816  002E50  D002               	goto	l658
 11817                           
 11818                           ;SwSpiApp.c: 171: {
 11819                           ;SwSpiApp.c: 172: do { LATAbits.LATA3 = 1; } while(0);
 11820  002E52  8689               	bsf	3977,3,c	;volatile
 11821                           
 11822                           ;SwSpiApp.c: 173: }
 11823  002E54  0012               	return	
 11824  002E56                     l658:
 11825                           
 11826                           ;SwSpiApp.c: 174: else if (cPinMode == 0)
 11827  002E56  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11828  002E58  A4D8               	btfss	status,2,c
 11829  002E5A  0012               	return	
 11830                           
 11831                           ;SwSpiApp.c: 175: {
 11832                           ;SwSpiApp.c: 176: do { LATAbits.LATA3 = 0; } while(0);
 11833  002E5C  9689               	bcf	3977,3,c	;volatile
 11834                           
 11835                           ;SwSpiApp.c: 179: }
 11836                           
 11837                           ;SwSpiApp.c: 177: }
 11838                           ;SwSpiApp.c: 178: break;
 11839  002E5E  0012               	return	
 11840  002E60                     l639:
 11841  002E60  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 11842                           
 11843                           ; Switch size 1, requested type "space"
 11844                           ; Number of cases is 3, Range of values is 0 to 2
 11845                           ; switch strategies available:
 11846                           ; Name         Instructions Cycles
 11847                           ; simple_byte           10     6 (average)
 11848                           ;	Chosen strategy is simple_byte
 11849  002E62  0A00               	xorlw	0	; case 0
 11850  002E64  B4D8               	btfsc	status,2,c
 11851  002E66  D7DE               	goto	l640
 11852  002E68  0A01               	xorlw	1	; case 1
 11853  002E6A  B4D8               	btfsc	status,2,c
 11854  002E6C  D7E5               	goto	l649
 11855  002E6E  0A03               	xorlw	3	; case 2
 11856  002E70  A4D8               	btfss	status,2,c
 11857  002E72  0012               	return	
 11858  002E74  D7EB               	goto	l657
 11859  002E76                     __end_of_SwSpi_Clk_Pin:
 11860                           	opt stack 0
 11861                           tosu	equ	0xFFF
 11862                           tosh	equ	0xFFE
 11863                           tosl	equ	0xFFD
 11864                           pclath	equ	0xFFA
 11865                           tblptru	equ	0xFF8
 11866                           tblptrh	equ	0xFF7
 11867                           tblptrl	equ	0xFF6
 11868                           tablat	equ	0xFF5
 11869                           prodh	equ	0xFF4
 11870                           prodl	equ	0xFF3
 11871                           intcon	equ	0xFF2
 11872                           intcon2	equ	0xFF1
 11873                           postinc0	equ	0xFEE
 11874                           plusw0	equ	0xFEB
 11875                           wreg	equ	0xFE8
 11876                           indf1	equ	0xFE7
 11877                           postdec1	equ	0xFE5
 11878                           fsr1h	equ	0xFE2
 11879                           fsr1l	equ	0xFE1
 11880                           indf2	equ	0xFDF
 11881                           postinc2	equ	0xFDE
 11882                           postdec2	equ	0xFDD
 11883                           plusw2	equ	0xFDB
 11884                           fsr2h	equ	0xFDA
 11885                           fsr2l	equ	0xFD9
 11886                           status	equ	0xFD8
 11887                           
 11888 ;; *************** function _ReadIntFromEeprom *****************
 11889 ;; Defined at:
 11890 ;;		line 118 in file "SystemCommon.c"
 11891 ;; Parameters:    Size  Location     Type
 11892 ;;  address         1    wreg     unsigned char 
 11893 ;;  numOfByes       2   83[BANK0 ] int 
 11894 ;; Auto vars:     Size  Location     Type
 11895 ;;  address         1   10[BANK1 ] unsigned char 
 11896 ;;  base            4    0[BANK1 ] unsigned long 
 11897 ;;  idx             1   15[BANK1 ] unsigned char 
 11898 ;;  retVal          4   11[BANK1 ] unsigned long 
 11899 ;; Return value:  Size  Location     Type
 11900 ;;                  4   83[BANK0 ] unsigned long 
 11901 ;; Registers used:
 11902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11903 ;; Tracked objects:
 11904 ;;		On entry : 0/0
 11905 ;;		On exit  : 0/0
 11906 ;;		Unchanged: 0/0
 11907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11908 ;;      Params:         0       4       0       0       0       0       0
 11909 ;;      Locals:         0       0      16       0       0       0       0
 11910 ;;      Temps:          0       3       0       0       0       0       0
 11911 ;;      Totals:         0       7      16       0       0       0       0
 11912 ;;Total ram usage:       23 bytes
 11913 ;; Hardware stack levels used:    1
 11914 ;; Hardware stack levels required when called:    8
 11915 ;; This function calls:
 11916 ;;		_EepromRead
 11917 ;;		___awtoft
 11918 ;;		___fttol
 11919 ;;		___lmul
 11920 ;;		_pow
 11921 ;; This function is called by:
 11922 ;;		_DacInit
 11923 ;; This function uses a non-reentrant model
 11924 ;;
 11925                           
 11926                           	psect	text78
 11927  001686                     __ptext78:
 11928                           	opt stack 0
 11929  001686                     _ReadIntFromEeprom:
 11930                           	opt stack 20
 11931                           
 11932                           ;incstack = 0
 11933                           ;ReadIntFromEeprom@address stored from wreg
 11934  001686  0101               	movlb	1	; () banked
 11935  001688  6FCC               	movwf	ReadIntFromEeprom@address& (0+255),b
 11936                           
 11937                           ;SystemCommon.c: 120: uint32_t retVal = 0x00;
 11938  00168A  0E00               	movlw	0
 11939  00168C  0101               	movlb	1	; () banked
 11940  00168E  6FCD               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 11941  001690  0E00               	movlw	0
 11942  001692  6FCE               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 11943  001694  0E00               	movlw	0
 11944  001696  6FCF               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 11945  001698  0E00               	movlw	0
 11946  00169A  6FD0               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 11947                           
 11948                           ; BSR set to: 1
 11949                           ;SystemCommon.c: 121: address -= numOfByes;
 11950  00169C  0100               	movlb	0	; () banked
 11951  00169E  51B3               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 11952  0016A0  0101               	movlb	1	; () banked
 11953  0016A2  5FCC               	subwf	ReadIntFromEeprom@address& (0+255),f,b
 11954                           
 11955                           ; BSR set to: 1
 11956                           ;SystemCommon.c: 123: for(uint8_t idx = 0; idx < numOfByes; idx++)
 11957  0016A4  0E00               	movlw	0
 11958  0016A6  6FD1               	movwf	ReadIntFromEeprom@idx& (0+255),b
 11959  0016A8  D06F               	goto	l1329
 11960  0016AA                     
 11961                           ;SystemCommon.c: 124: {
 11962                           ;SystemCommon.c: 125: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 11963                           
 11964                           ; BSR set to: 1
 11965  0016AA  0101               	movlb	1	; () banked
 11966  0016AC  51D1               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 11967  0016AE  0100               	movlb	0	; () banked
 11968  0016B0  6FB7               	movwf	??_ReadIntFromEeprom& (0+255),b
 11969  0016B2  6BB8               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 11970  0016B4  0E01               	movlw	1
 11971  0016B6  27B7               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 11972  0016B8  0E00               	movlw	0
 11973  0016BA  23B8               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 11974  0016BC  1FB7               	comf	??_ReadIntFromEeprom& (0+255),f,b
 11975  0016BE  1FB8               	comf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 11976  0016C0  4BB7               	infsnz	??_ReadIntFromEeprom& (0+255),f,b
 11977  0016C2  2BB8               	incf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 11978  0016C4  51B3               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 11979  0016C6  27B7               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 11980  0016C8  51B4               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 11981  0016CA  23B8               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 11982  0016CC  90D8               	bcf	status,0,c
 11983  0016CE  37B7               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 11984  0016D0  37B8               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 11985  0016D2  90D8               	bcf	status,0,c
 11986  0016D4  37B7               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 11987  0016D6  37B8               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 11988  0016D8  90D8               	bcf	status,0,c
 11989  0016DA  37B7               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 11990  0016DC  37B8               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 11991  0016DE  C0B7  F020         	movff	??_ReadIntFromEeprom,___awtoft@c
 11992  0016E2  C0B8  F021         	movff	??_ReadIntFromEeprom+1,___awtoft@c+1
 11993  0016E6  EC91  F019         	call	___awtoft	;wreg free
 11994  0016EA  C020  F1C6         	movff	?___awtoft,_ReadIntFromEeprom$3315
 11995  0016EE  C021  F1C7         	movff	?___awtoft+1,_ReadIntFromEeprom$3315+1
 11996  0016F2  C022  F1C8         	movff	?___awtoft+2,_ReadIntFromEeprom$3315+2
 11997                           
 11998                           ;SystemCommon.c: 124: {
 11999                           ;SystemCommon.c: 125: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 12000  0016F6  C1C6  F0A5         	movff	_ReadIntFromEeprom$3315,pow@y
 12001  0016FA  C1C7  F0A6         	movff	_ReadIntFromEeprom$3315+1,pow@y+1
 12002  0016FE  C1C8  F0A7         	movff	_ReadIntFromEeprom$3315+2,pow@y+2
 12003  001702  0E00               	movlw	0
 12004  001704  0100               	movlb	0	; () banked
 12005  001706  6FA2               	movwf	pow@x& (0+255),b
 12006  001708  0E00               	movlw	0
 12007  00170A  6FA3               	movwf	(pow@x+1)& (0+255),b
 12008  00170C  0E40               	movlw	64
 12009  00170E  6FA4               	movwf	(pow@x+2)& (0+255),b
 12010  001710  EC85  F00A         	call	_pow	;wreg free
 12011  001714  C0A2  F1C9         	movff	?_pow,_ReadIntFromEeprom$3316
 12012  001718  C0A3  F1CA         	movff	?_pow+1,_ReadIntFromEeprom$3316+1
 12013  00171C  C0A4  F1CB         	movff	?_pow+2,_ReadIntFromEeprom$3316+2
 12014                           
 12015                           ;SystemCommon.c: 124: {
 12016                           ;SystemCommon.c: 125: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 12017  001720  C1C9  F078         	movff	_ReadIntFromEeprom$3316,___fttol@f1
 12018  001724  C1CA  F079         	movff	_ReadIntFromEeprom$3316+1,___fttol@f1+1
 12019  001728  C1CB  F07A         	movff	_ReadIntFromEeprom$3316+2,___fttol@f1+2
 12020  00172C  EC75  F00D         	call	___fttol	;wreg free
 12021  001730  C078  F1C2         	movff	?___fttol,ReadIntFromEeprom@base
 12022  001734  C079  F1C3         	movff	?___fttol+1,ReadIntFromEeprom@base+1
 12023  001738  C07A  F1C4         	movff	?___fttol+2,ReadIntFromEeprom@base+2
 12024  00173C  C07B  F1C5         	movff	?___fttol+3,ReadIntFromEeprom@base+3
 12025                           
 12026                           ;SystemCommon.c: 126: retVal = retVal | EepromRead(address + idx) * base;
 12027  001740  0101               	movlb	1	; () banked
 12028  001742  51CC               	movf	ReadIntFromEeprom@address& (0+255),w,b
 12029  001744  25D1               	addwf	ReadIntFromEeprom@idx& (0+255),w,b
 12030  001746  ECA8  F01C         	call	_EepromRead
 12031  00174A  0100               	movlb	0	; () banked
 12032  00174C  6FB7               	movwf	??_ReadIntFromEeprom& (0+255),b
 12033  00174E  51B7               	movf	??_ReadIntFromEeprom& (0+255),w,b
 12034  001750  6E1A               	movwf	___lmul@multiplier,c
 12035  001752  6A1B               	clrf	___lmul@multiplier+1,c
 12036  001754  6A1C               	clrf	___lmul@multiplier+2,c
 12037  001756  6A1D               	clrf	___lmul@multiplier+3,c
 12038  001758  C1C2  F01E         	movff	ReadIntFromEeprom@base,___lmul@multiplicand
 12039  00175C  C1C3  F01F         	movff	ReadIntFromEeprom@base+1,___lmul@multiplicand+1
 12040  001760  C1C4  F020         	movff	ReadIntFromEeprom@base+2,___lmul@multiplicand+2
 12041  001764  C1C5  F021         	movff	ReadIntFromEeprom@base+3,___lmul@multiplicand+3
 12042  001768  EC3B  F017         	call	___lmul	;wreg free
 12043  00176C  0101               	movlb	1	; () banked
 12044  00176E  51CD               	movf	ReadIntFromEeprom@retVal& (0+255),w,b
 12045  001770  101A               	iorwf	?___lmul,w,c
 12046  001772  6FCD               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 12047  001774  51CE               	movf	(ReadIntFromEeprom@retVal+1)& (0+255),w,b
 12048  001776  101B               	iorwf	?___lmul+1,w,c
 12049  001778  6FCE               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 12050  00177A  51CF               	movf	(ReadIntFromEeprom@retVal+2)& (0+255),w,b
 12051  00177C  101C               	iorwf	?___lmul+2,w,c
 12052  00177E  6FCF               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 12053  001780  51D0               	movf	(ReadIntFromEeprom@retVal+3)& (0+255),w,b
 12054  001782  101D               	iorwf	?___lmul+3,w,c
 12055  001784  6FD0               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 12056                           
 12057                           ; BSR set to: 1
 12058  001786  2BD1               	incf	ReadIntFromEeprom@idx& (0+255),f,b
 12059  001788                     l1329:
 12060                           
 12061                           ; BSR set to: 1
 12062                           
 12063                           ; BSR set to: 1
 12064  001788  51D1               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 12065  00178A  0100               	movlb	0	; () banked
 12066  00178C  6FB7               	movwf	??_ReadIntFromEeprom& (0+255),b
 12067  00178E  6BB8               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 12068  001790  51B3               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 12069  001792  5DB7               	subwf	??_ReadIntFromEeprom& (0+255),w,b
 12070  001794  51B8               	movf	(??_ReadIntFromEeprom+1)& (0+255),w,b
 12071  001796  0A80               	xorlw	128
 12072  001798  6FB9               	movwf	(??_ReadIntFromEeprom+2)& (0+255),b
 12073  00179A  51B4               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 12074  00179C  0A80               	xorlw	128
 12075  00179E  59B9               	subwfb	(??_ReadIntFromEeprom+2)& (0+255),w,b
 12076  0017A0  A0D8               	btfss	status,0,c
 12077  0017A2  D783               	goto	l1330
 12078                           
 12079                           ; BSR set to: 0
 12080                           ;SystemCommon.c: 127: }
 12081                           ;SystemCommon.c: 128: return retVal;
 12082  0017A4  C1CD  F0B3         	movff	ReadIntFromEeprom@retVal,?_ReadIntFromEeprom
 12083  0017A8  C1CE  F0B4         	movff	ReadIntFromEeprom@retVal+1,?_ReadIntFromEeprom+1
 12084  0017AC  C1CF  F0B5         	movff	ReadIntFromEeprom@retVal+2,?_ReadIntFromEeprom+2
 12085  0017B0  C1D0  F0B6         	movff	ReadIntFromEeprom@retVal+3,?_ReadIntFromEeprom+3
 12086                           
 12087                           ; BSR set to: 0
 12088  0017B4  0012               	return		;funcret
 12089  0017B6                     __end_of_ReadIntFromEeprom:
 12090                           	opt stack 0
 12091                           tosu	equ	0xFFF
 12092                           tosh	equ	0xFFE
 12093                           tosl	equ	0xFFD
 12094                           pclath	equ	0xFFA
 12095                           tblptru	equ	0xFF8
 12096                           tblptrh	equ	0xFF7
 12097                           tblptrl	equ	0xFF6
 12098                           tablat	equ	0xFF5
 12099                           prodh	equ	0xFF4
 12100                           prodl	equ	0xFF3
 12101                           intcon	equ	0xFF2
 12102                           intcon2	equ	0xFF1
 12103                           postinc0	equ	0xFEE
 12104                           plusw0	equ	0xFEB
 12105                           wreg	equ	0xFE8
 12106                           indf1	equ	0xFE7
 12107                           postdec1	equ	0xFE5
 12108                           fsr1h	equ	0xFE2
 12109                           fsr1l	equ	0xFE1
 12110                           indf2	equ	0xFDF
 12111                           postinc2	equ	0xFDE
 12112                           postdec2	equ	0xFDD
 12113                           plusw2	equ	0xFDB
 12114                           fsr2h	equ	0xFDA
 12115                           fsr2l	equ	0xFD9
 12116                           status	equ	0xFD8
 12117                           
 12118 ;; *************** function ___lmul *****************
 12119 ;; Defined at:
 12120 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 12121 ;; Parameters:    Size  Location     Type
 12122 ;;  multiplier      4   25[COMRAM] unsigned long 
 12123 ;;  multiplicand    4   29[COMRAM] unsigned long 
 12124 ;; Auto vars:     Size  Location     Type
 12125 ;;  product         4   33[COMRAM] unsigned long 
 12126 ;; Return value:  Size  Location     Type
 12127 ;;                  4   25[COMRAM] unsigned long 
 12128 ;; Registers used:
 12129 ;;		wreg, status,2, status,0
 12130 ;; Tracked objects:
 12131 ;;		On entry : 0/0
 12132 ;;		On exit  : 0/0
 12133 ;;		Unchanged: 0/0
 12134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12135 ;;      Params:         8       0       0       0       0       0       0
 12136 ;;      Locals:         4       0       0       0       0       0       0
 12137 ;;      Temps:          0       0       0       0       0       0       0
 12138 ;;      Totals:        12       0       0       0       0       0       0
 12139 ;;Total ram usage:       12 bytes
 12140 ;; Hardware stack levels used:    1
 12141 ;; Hardware stack levels required when called:    3
 12142 ;; This function calls:
 12143 ;;		Nothing
 12144 ;; This function is called by:
 12145 ;;		_ReadIntFromEeprom
 12146 ;;		_strtol
 12147 ;; This function uses a non-reentrant model
 12148 ;;
 12149                           
 12150                           	psect	text79
 12151  002E76                     __ptext79:
 12152                           	opt stack 0
 12153  002E76                     ___lmul:
 12154                           	opt stack 22
 12155                           
 12156                           ; BSR set to: 0
 12157                           ;incstack = 0
 12158  002E76  0E00               	movlw	0
 12159  002E78  6E22               	movwf	___lmul@product,c
 12160  002E7A  0E00               	movlw	0
 12161  002E7C  6E23               	movwf	___lmul@product+1,c
 12162  002E7E  0E00               	movlw	0
 12163  002E80  6E24               	movwf	___lmul@product+2,c
 12164  002E82  0E00               	movlw	0
 12165  002E84  6E25               	movwf	___lmul@product+3,c
 12166  002E86  A01A               	btfss	___lmul@multiplier,0,c
 12167  002E88  D008               	goto	l1474
 12168  002E8A  501E               	movf	___lmul@multiplicand,w,c
 12169  002E8C  2622               	addwf	___lmul@product,f,c
 12170  002E8E  501F               	movf	___lmul@multiplicand+1,w,c
 12171  002E90  2223               	addwfc	___lmul@product+1,f,c
 12172  002E92  5020               	movf	___lmul@multiplicand+2,w,c
 12173  002E94  2224               	addwfc	___lmul@product+2,f,c
 12174  002E96  5021               	movf	___lmul@multiplicand+3,w,c
 12175  002E98  2225               	addwfc	___lmul@product+3,f,c
 12176  002E9A                     l1474:
 12177  002E9A  90D8               	bcf	status,0,c
 12178  002E9C  361E               	rlcf	___lmul@multiplicand,f,c
 12179  002E9E  361F               	rlcf	___lmul@multiplicand+1,f,c
 12180  002EA0  3620               	rlcf	___lmul@multiplicand+2,f,c
 12181  002EA2  3621               	rlcf	___lmul@multiplicand+3,f,c
 12182  002EA4  90D8               	bcf	status,0,c
 12183  002EA6  321D               	rrcf	___lmul@multiplier+3,f,c
 12184  002EA8  321C               	rrcf	___lmul@multiplier+2,f,c
 12185  002EAA  321B               	rrcf	___lmul@multiplier+1,f,c
 12186  002EAC  321A               	rrcf	___lmul@multiplier,f,c
 12187  002EAE  501A               	movf	___lmul@multiplier,w,c
 12188  002EB0  101B               	iorwf	___lmul@multiplier+1,w,c
 12189  002EB2  101C               	iorwf	___lmul@multiplier+2,w,c
 12190  002EB4  101D               	iorwf	___lmul@multiplier+3,w,c
 12191  002EB6  A4D8               	btfss	status,2,c
 12192  002EB8  D7E6               	goto	l1473
 12193  002EBA  C022  F01A         	movff	___lmul@product,?___lmul
 12194  002EBE  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 12195  002EC2  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 12196  002EC6  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 12197  002ECA  0012               	return		;funcret
 12198  002ECC                     __end_of___lmul:
 12199                           	opt stack 0
 12200                           tosu	equ	0xFFF
 12201                           tosh	equ	0xFFE
 12202                           tosl	equ	0xFFD
 12203                           pclath	equ	0xFFA
 12204                           tblptru	equ	0xFF8
 12205                           tblptrh	equ	0xFF7
 12206                           tblptrl	equ	0xFF6
 12207                           tablat	equ	0xFF5
 12208                           prodh	equ	0xFF4
 12209                           prodl	equ	0xFF3
 12210                           intcon	equ	0xFF2
 12211                           intcon2	equ	0xFF1
 12212                           postinc0	equ	0xFEE
 12213                           plusw0	equ	0xFEB
 12214                           wreg	equ	0xFE8
 12215                           indf1	equ	0xFE7
 12216                           postdec1	equ	0xFE5
 12217                           fsr1h	equ	0xFE2
 12218                           fsr1l	equ	0xFE1
 12219                           indf2	equ	0xFDF
 12220                           postinc2	equ	0xFDE
 12221                           postdec2	equ	0xFDD
 12222                           plusw2	equ	0xFDB
 12223                           fsr2h	equ	0xFDA
 12224                           fsr2l	equ	0xFD9
 12225                           status	equ	0xFD8
 12226                           
 12227 ;; *************** function _EepromRead *****************
 12228 ;; Defined at:
 12229 ;;		line 215 in file "FlashApp.c"
 12230 ;; Parameters:    Size  Location     Type
 12231 ;;  address         1    wreg     unsigned char 
 12232 ;; Auto vars:     Size  Location     Type
 12233 ;;  address         1   24[COMRAM] unsigned char 
 12234 ;; Return value:  Size  Location     Type
 12235 ;;                  1    wreg      unsigned char 
 12236 ;; Registers used:
 12237 ;;		wreg, status,2, cstack
 12238 ;; Tracked objects:
 12239 ;;		On entry : 0/0
 12240 ;;		On exit  : 0/0
 12241 ;;		Unchanged: 0/0
 12242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12243 ;;      Params:         0       0       0       0       0       0       0
 12244 ;;      Locals:         1       0       0       0       0       0       0
 12245 ;;      Temps:          0       0       0       0       0       0       0
 12246 ;;      Totals:         1       0       0       0       0       0       0
 12247 ;;Total ram usage:        1 bytes
 12248 ;; Hardware stack levels used:    1
 12249 ;; Hardware stack levels required when called:    4
 12250 ;; This function calls:
 12251 ;;		_DATAEE_ReadByte
 12252 ;; This function is called by:
 12253 ;;		_ReadIntFromEeprom
 12254 ;; This function uses a non-reentrant model
 12255 ;;
 12256                           
 12257                           	psect	text80
 12258  003950                     __ptext80:
 12259                           	opt stack 0
 12260  003950                     _EepromRead:
 12261                           	opt stack 23
 12262                           
 12263                           ;incstack = 0
 12264                           ;EepromRead@address stored from wreg
 12265  003950  6E19               	movwf	EepromRead@address,c
 12266                           
 12267                           ;FlashApp.c: 217: return DATAEE_ReadByte(address);
 12268  003952  5019               	movf	EepromRead@address,w,c
 12269  003954  EC30  F01C         	call	_DATAEE_ReadByte
 12270  003958  0012               	return	
 12271  00395A                     __end_of_EepromRead:
 12272                           	opt stack 0
 12273                           tosu	equ	0xFFF
 12274                           tosh	equ	0xFFE
 12275                           tosl	equ	0xFFD
 12276                           pclath	equ	0xFFA
 12277                           tblptru	equ	0xFF8
 12278                           tblptrh	equ	0xFF7
 12279                           tblptrl	equ	0xFF6
 12280                           tablat	equ	0xFF5
 12281                           prodh	equ	0xFF4
 12282                           prodl	equ	0xFF3
 12283                           intcon	equ	0xFF2
 12284                           intcon2	equ	0xFF1
 12285                           postinc0	equ	0xFEE
 12286                           plusw0	equ	0xFEB
 12287                           wreg	equ	0xFE8
 12288                           indf1	equ	0xFE7
 12289                           postdec1	equ	0xFE5
 12290                           fsr1h	equ	0xFE2
 12291                           fsr1l	equ	0xFE1
 12292                           indf2	equ	0xFDF
 12293                           postinc2	equ	0xFDE
 12294                           postdec2	equ	0xFDD
 12295                           plusw2	equ	0xFDB
 12296                           fsr2h	equ	0xFDA
 12297                           fsr2l	equ	0xFD9
 12298                           status	equ	0xFD8
 12299                           
 12300 ;; *************** function _DATAEE_ReadByte *****************
 12301 ;; Defined at:
 12302 ;;		line 194 in file "mcc_generated_files/memory.c"
 12303 ;; Parameters:    Size  Location     Type
 12304 ;;  bAdd            1    wreg     unsigned char 
 12305 ;; Auto vars:     Size  Location     Type
 12306 ;;  bAdd            1   23[COMRAM] unsigned char 
 12307 ;; Return value:  Size  Location     Type
 12308 ;;                  1    wreg      unsigned char 
 12309 ;; Registers used:
 12310 ;;		wreg, status,2
 12311 ;; Tracked objects:
 12312 ;;		On entry : 0/0
 12313 ;;		On exit  : 0/0
 12314 ;;		Unchanged: 0/0
 12315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12316 ;;      Params:         0       0       0       0       0       0       0
 12317 ;;      Locals:         1       0       0       0       0       0       0
 12318 ;;      Temps:          0       0       0       0       0       0       0
 12319 ;;      Totals:         1       0       0       0       0       0       0
 12320 ;;Total ram usage:        1 bytes
 12321 ;; Hardware stack levels used:    1
 12322 ;; Hardware stack levels required when called:    3
 12323 ;; This function calls:
 12324 ;;		Nothing
 12325 ;; This function is called by:
 12326 ;;		_EepromRead
 12327 ;;		_EepromTest
 12328 ;; This function uses a non-reentrant model
 12329 ;;
 12330                           
 12331                           	psect	text81
 12332  003860                     __ptext81:
 12333                           	opt stack 0
 12334  003860                     _DATAEE_ReadByte:
 12335                           	opt stack 23
 12336                           
 12337                           ;incstack = 0
 12338                           ;DATAEE_ReadByte@bAdd stored from wreg
 12339  003860  6E18               	movwf	DATAEE_ReadByte@bAdd,c
 12340                           
 12341                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
 12342  003862  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
 12343                           
 12344                           ;memory.c: 198: EECON1bits.CFGS = 0;
 12345  003866  9CA6               	bcf	4006,6,c	;volsfr
 12346                           
 12347                           ;memory.c: 199: EECON1bits.EEPGD = 0;
 12348  003868  9EA6               	bcf	4006,7,c	;volsfr
 12349                           
 12350                           ;memory.c: 200: EECON1bits.RD = 1;
 12351  00386A  80A6               	bsf	4006,0,c	;volsfr
 12352                           
 12353                           ;memory.c: 201: __nop();
 12354  00386C  F000               	nop	
 12355                           
 12356                           ;memory.c: 202: __nop();
 12357  00386E  F000               	nop	
 12358                           
 12359                           ;memory.c: 204: return (EEDATA);
 12360  003870  50A8               	movf	4008,w,c	;volatile
 12361  003872  0012               	return	
 12362  003874                     __end_of_DATAEE_ReadByte:
 12363                           	opt stack 0
 12364                           tosu	equ	0xFFF
 12365                           tosh	equ	0xFFE
 12366                           tosl	equ	0xFFD
 12367                           pclath	equ	0xFFA
 12368                           tblptru	equ	0xFF8
 12369                           tblptrh	equ	0xFF7
 12370                           tblptrl	equ	0xFF6
 12371                           tablat	equ	0xFF5
 12372                           prodh	equ	0xFF4
 12373                           prodl	equ	0xFF3
 12374                           intcon	equ	0xFF2
 12375                           intcon2	equ	0xFF1
 12376                           postinc0	equ	0xFEE
 12377                           plusw0	equ	0xFEB
 12378                           wreg	equ	0xFE8
 12379                           indf1	equ	0xFE7
 12380                           postdec1	equ	0xFE5
 12381                           fsr1h	equ	0xFE2
 12382                           fsr1l	equ	0xFE1
 12383                           indf2	equ	0xFDF
 12384                           postinc2	equ	0xFDE
 12385                           postdec2	equ	0xFDD
 12386                           plusw2	equ	0xFDB
 12387                           fsr2h	equ	0xFDA
 12388                           fsr2l	equ	0xFD9
 12389                           status	equ	0xFD8
 12390                           
 12391 ;; *************** function _ClearMcuRunTime *****************
 12392 ;; Defined at:
 12393 ;;		line 49 in file "SystemStatus.c"
 12394 ;; Parameters:    Size  Location     Type
 12395 ;;		None
 12396 ;; Auto vars:     Size  Location     Type
 12397 ;;		None
 12398 ;; Return value:  Size  Location     Type
 12399 ;;                  1    wreg      void 
 12400 ;; Registers used:
 12401 ;;		wreg, status,2
 12402 ;; Tracked objects:
 12403 ;;		On entry : 0/0
 12404 ;;		On exit  : 0/0
 12405 ;;		Unchanged: 0/0
 12406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12407 ;;      Params:         0       0       0       0       0       0       0
 12408 ;;      Locals:         0       0       0       0       0       0       0
 12409 ;;      Temps:          0       0       0       0       0       0       0
 12410 ;;      Totals:         0       0       0       0       0       0       0
 12411 ;;Total ram usage:        0 bytes
 12412 ;; Hardware stack levels used:    1
 12413 ;; Hardware stack levels required when called:    3
 12414 ;; This function calls:
 12415 ;;		Nothing
 12416 ;; This function is called by:
 12417 ;;		_InitSystemApplicationManagers
 12418 ;; This function uses a non-reentrant model
 12419 ;;
 12420                           
 12421                           	psect	text82
 12422  003874                     __ptext82:
 12423                           	opt stack 0
 12424  003874                     _ClearMcuRunTime:
 12425                           	opt stack 26
 12426                           
 12427                           ;SystemStatus.c: 51: mcuRunTimeIn5SecTicks = 0;
 12428                           
 12429                           ;incstack = 0
 12430  003874  0E00               	movlw	0
 12431  003876  0100               	movlb	0	; () banked
 12432  003878  6FC0               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 12433  00387A  0E00               	movlw	0
 12434  00387C  6FC1               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 12435  00387E  0E00               	movlw	0
 12436  003880  6FC2               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 12437  003882  0E00               	movlw	0
 12438  003884  6FC3               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 12439                           
 12440                           ; BSR set to: 0
 12441  003886  0012               	return		;funcret
 12442  003888                     __end_of_ClearMcuRunTime:
 12443                           	opt stack 0
 12444                           tosu	equ	0xFFF
 12445                           tosh	equ	0xFFE
 12446                           tosl	equ	0xFFD
 12447                           pclath	equ	0xFFA
 12448                           tblptru	equ	0xFF8
 12449                           tblptrh	equ	0xFF7
 12450                           tblptrl	equ	0xFF6
 12451                           tablat	equ	0xFF5
 12452                           prodh	equ	0xFF4
 12453                           prodl	equ	0xFF3
 12454                           intcon	equ	0xFF2
 12455                           intcon2	equ	0xFF1
 12456                           postinc0	equ	0xFEE
 12457                           plusw0	equ	0xFEB
 12458                           wreg	equ	0xFE8
 12459                           indf1	equ	0xFE7
 12460                           postdec1	equ	0xFE5
 12461                           fsr1h	equ	0xFE2
 12462                           fsr1l	equ	0xFE1
 12463                           indf2	equ	0xFDF
 12464                           postinc2	equ	0xFDE
 12465                           postdec2	equ	0xFDD
 12466                           plusw2	equ	0xFDB
 12467                           fsr2h	equ	0xFDA
 12468                           fsr2l	equ	0xFD9
 12469                           status	equ	0xFD8
 12470                           
 12471 ;; *************** function _CheckFlashPrecentage *****************
 12472 ;; Defined at:
 12473 ;;		line 205 in file "FlashApp.c"
 12474 ;; Parameters:    Size  Location     Type
 12475 ;;		None
 12476 ;; Auto vars:     Size  Location     Type
 12477 ;;  precentage      3   28[BANK0 ] void 
 12478 ;; Return value:  Size  Location     Type
 12479 ;;                  1    wreg      unsigned char 
 12480 ;; Registers used:
 12481 ;;		wreg, status,2, status,0, cstack
 12482 ;; Tracked objects:
 12483 ;;		On entry : 0/0
 12484 ;;		On exit  : 0/0
 12485 ;;		Unchanged: 0/0
 12486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12487 ;;      Params:         0       0       0       0       0       0       0
 12488 ;;      Locals:         0       3       0       0       0       0       0
 12489 ;;      Temps:          0       4       0       0       0       0       0
 12490 ;;      Totals:         0       7       0       0       0       0       0
 12491 ;;Total ram usage:        7 bytes
 12492 ;; Hardware stack levels used:    1
 12493 ;; Hardware stack levels required when called:    5
 12494 ;; This function calls:
 12495 ;;		___ftdiv
 12496 ;;		___ftge
 12497 ;;		___ftmul
 12498 ;;		___lltoft
 12499 ;; This function is called by:
 12500 ;;		_main
 12501 ;; This function uses a non-reentrant model
 12502 ;;
 12503                           
 12504                           	psect	text83
 12505  00229C                     __ptext83:
 12506                           	opt stack 0
 12507  00229C                     _CheckFlashPrecentage:
 12508                           	opt stack 25
 12509                           
 12510                           ;FlashApp.c: 207: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
 12511                           
 12512                           ; BSR set to: 0
 12513                           ;incstack = 0
 12514  00229C  0EE0               	movlw	224
 12515  00229E  6E2C               	movwf	___ftdiv@f2,c
 12516  0022A0  0EFF               	movlw	255
 12517  0022A2  6E2D               	movwf	___ftdiv@f2+1,c
 12518  0022A4  0E46               	movlw	70
 12519  0022A6  6E2E               	movwf	___ftdiv@f2+2,c
 12520  0022A8  C040  F078         	movff	_writeAddress,??_CheckFlashPrecentage
 12521  0022AC  C041  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
 12522  0022B0  C042  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
 12523  0022B4  C043  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
 12524  0022B8  0100               	movlb	0	; () banked
 12525  0022BA  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
 12526  0022BC  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
 12527  0022BE  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
 12528  0022C0  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
 12529  0022C2  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
 12530  0022C4  0E00               	movlw	0
 12531  0022C6  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
 12532  0022C8  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
 12533  0022CA  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
 12534  0022CC  0EF0               	movlw	240
 12535  0022CE  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
 12536  0022D0  6E20               	movwf	___lltoft@c,c
 12537  0022D2  0E7F               	movlw	127
 12538  0022D4  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
 12539  0022D6  6E21               	movwf	___lltoft@c+1,c
 12540  0022D8  0E00               	movlw	0
 12541  0022DA  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
 12542  0022DC  6E22               	movwf	___lltoft@c+2,c
 12543  0022DE  0E00               	movlw	0
 12544  0022E0  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
 12545  0022E2  6E23               	movwf	___lltoft@c+3,c
 12546  0022E4  EC5F  F016         	call	___lltoft	;wreg free
 12547  0022E8  C020  F029         	movff	?___lltoft,___ftdiv@f1
 12548  0022EC  C021  F02A         	movff	?___lltoft+1,___ftdiv@f1+1
 12549  0022F0  C022  F02B         	movff	?___lltoft+2,___ftdiv@f1+2
 12550  0022F4  EC6C  F00E         	call	___ftdiv	;wreg free
 12551  0022F8  C029  F069         	movff	?___ftdiv,___ftmul@f1
 12552  0022FC  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 12553  002300  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 12554  002304  0E00               	movlw	0
 12555  002306  0100               	movlb	0	; () banked
 12556  002308  6F6C               	movwf	___ftmul@f2& (0+255),b
 12557  00230A  0EC8               	movlw	200
 12558  00230C  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12559  00230E  0E42               	movlw	66
 12560  002310  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12561  002312  ECF1  F00D         	call	___ftmul	;wreg free
 12562  002316  C069  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
 12563  00231A  C06A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
 12564  00231E  C06B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
 12565                           
 12566                           ;FlashApp.c: 208: return (precentage > 75) ? 1 : 0;
 12567  002322  0E00               	movlw	0
 12568  002324  6E18               	movwf	___ftge@ff1,c
 12569  002326  0E96               	movlw	150
 12570  002328  6E19               	movwf	___ftge@ff1+1,c
 12571  00232A  0E42               	movlw	66
 12572  00232C  6E1A               	movwf	___ftge@ff1+2,c
 12573  00232E  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
 12574  002332  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
 12575  002336  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
 12576  00233A  EC06  F014         	call	___ftge	;wreg free
 12577  00233E  B0D8               	btfsc	status,0,c
 12578  002340  D002               	goto	u8410
 12579  002342  0E01               	movlw	1
 12580  002344  0012               	return	
 12581  002346                     u8410:
 12582  002346  0E00               	movlw	0
 12583  002348  0012               	return	
 12584  00234A                     __end_of_CheckFlashPrecentage:
 12585                           	opt stack 0
 12586                           tosu	equ	0xFFF
 12587                           tosh	equ	0xFFE
 12588                           tosl	equ	0xFFD
 12589                           pclath	equ	0xFFA
 12590                           tblptru	equ	0xFF8
 12591                           tblptrh	equ	0xFF7
 12592                           tblptrl	equ	0xFF6
 12593                           tablat	equ	0xFF5
 12594                           prodh	equ	0xFF4
 12595                           prodl	equ	0xFF3
 12596                           intcon	equ	0xFF2
 12597                           intcon2	equ	0xFF1
 12598                           postinc0	equ	0xFEE
 12599                           plusw0	equ	0xFEB
 12600                           wreg	equ	0xFE8
 12601                           indf1	equ	0xFE7
 12602                           postdec1	equ	0xFE5
 12603                           fsr1h	equ	0xFE2
 12604                           fsr1l	equ	0xFE1
 12605                           indf2	equ	0xFDF
 12606                           postinc2	equ	0xFDE
 12607                           postdec2	equ	0xFDD
 12608                           plusw2	equ	0xFDB
 12609                           fsr2h	equ	0xFDA
 12610                           fsr2l	equ	0xFD9
 12611                           status	equ	0xFD8
 12612                           
 12613 ;; *************** function _BlinkOkLeds *****************
 12614 ;; Defined at:
 12615 ;;		line 24 in file "LedsApp.c"
 12616 ;; Parameters:    Size  Location     Type
 12617 ;;  state           1    wreg     enum E7575
 12618 ;; Auto vars:     Size  Location     Type
 12619 ;;  state           1   26[COMRAM] enum E7575
 12620 ;;  idx             2   27[COMRAM] int 
 12621 ;; Return value:  Size  Location     Type
 12622 ;;                  1    wreg      void 
 12623 ;; Registers used:
 12624 ;;		wreg, status,2, status,0
 12625 ;; Tracked objects:
 12626 ;;		On entry : 0/0
 12627 ;;		On exit  : 0/0
 12628 ;;		Unchanged: 0/0
 12629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12630 ;;      Params:         0       0       0       0       0       0       0
 12631 ;;      Locals:         3       0       0       0       0       0       0
 12632 ;;      Temps:          3       0       0       0       0       0       0
 12633 ;;      Totals:         6       0       0       0       0       0       0
 12634 ;;Total ram usage:        6 bytes
 12635 ;; Hardware stack levels used:    1
 12636 ;; Hardware stack levels required when called:    3
 12637 ;; This function calls:
 12638 ;;		Nothing
 12639 ;; This function is called by:
 12640 ;;		_main
 12641 ;; This function uses a non-reentrant model
 12642 ;;
 12643                           
 12644                           	psect	text84
 12645  002BA6                     __ptext84:
 12646                           	opt stack 0
 12647  002BA6                     _BlinkOkLeds:
 12648                           	opt stack 27
 12649                           
 12650                           ;incstack = 0
 12651                           ;BlinkOkLeds@state stored from wreg
 12652  002BA6  6E1B               	movwf	BlinkOkLeds@state,c
 12653                           
 12654                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 12655  002BA8  0E00               	movlw	0
 12656  002BAA  6E1D               	movwf	BlinkOkLeds@idx+1,c
 12657  002BAC  0E00               	movlw	0
 12658  002BAE  6E1C               	movwf	BlinkOkLeds@idx,c
 12659  002BB0                     l6118:
 12660  002BB0  501B               	movf	BlinkOkLeds@state,w,c
 12661  002BB2  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 12662  002BB4  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 12663  002BB6  5018               	movf	??_BlinkOkLeds,w,c
 12664  002BB8  5C1C               	subwf	BlinkOkLeds@idx,w,c
 12665  002BBA  501D               	movf	BlinkOkLeds@idx+1,w,c
 12666  002BBC  0A80               	xorlw	128
 12667  002BBE  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 12668  002BC0  5019               	movf	??_BlinkOkLeds+1,w,c
 12669  002BC2  0A80               	xorlw	128
 12670  002BC4  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 12671  002BC6  B0D8               	btfsc	status,0,c
 12672  002BC8  0012               	return	
 12673                           
 12674                           ;LedsApp.c: 27: {
 12675                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 12676  002BCA  908B               	bcf	3979,0,c	;volatile
 12677                           
 12678                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 12679  002BCC  0E02               	movlw	2
 12680  002BCE  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 12681  002BD0  0E04               	movlw	4
 12682  002BD2  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 12683  002BD4  0EBA               	movlw	186
 12684  002BD6                     u8617:
 12685  002BD6  2EE8               	decfsz	wreg,f,c
 12686  002BD8  D7FE               	bra	u8617
 12687  002BDA  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 12688  002BDC  D7FC               	bra	u8617
 12689  002BDE  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 12690  002BE0  D7FA               	bra	u8617
 12691  002BE2  D000               	nop2	
 12692                           
 12693                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 12694  002BE4  808B               	bsf	3979,0,c	;volatile
 12695                           
 12696                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 12697  002BE6  0E02               	movlw	2
 12698  002BE8  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 12699  002BEA  0E04               	movlw	4
 12700  002BEC  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 12701  002BEE  0EBA               	movlw	186
 12702  002BF0                     u8627:
 12703  002BF0  2EE8               	decfsz	wreg,f,c
 12704  002BF2  D7FE               	bra	u8627
 12705  002BF4  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 12706  002BF6  D7FC               	bra	u8627
 12707  002BF8  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 12708  002BFA  D7FA               	bra	u8627
 12709  002BFC  D000               	nop2	
 12710  002BFE  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 12711  002C00  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 12712  002C02  D7D6               	goto	l6118
 12713  002C04                     __end_of_BlinkOkLeds:
 12714                           	opt stack 0
 12715                           tosu	equ	0xFFF
 12716                           tosh	equ	0xFFE
 12717                           tosl	equ	0xFFD
 12718                           pclath	equ	0xFFA
 12719                           tblptru	equ	0xFF8
 12720                           tblptrh	equ	0xFF7
 12721                           tblptrl	equ	0xFF6
 12722                           tablat	equ	0xFF5
 12723                           prodh	equ	0xFF4
 12724                           prodl	equ	0xFF3
 12725                           intcon	equ	0xFF2
 12726                           intcon2	equ	0xFF1
 12727                           postinc0	equ	0xFEE
 12728                           plusw0	equ	0xFEB
 12729                           wreg	equ	0xFE8
 12730                           indf1	equ	0xFE7
 12731                           postdec1	equ	0xFE5
 12732                           fsr1h	equ	0xFE2
 12733                           fsr1l	equ	0xFE1
 12734                           indf2	equ	0xFDF
 12735                           postinc2	equ	0xFDE
 12736                           postdec2	equ	0xFDD
 12737                           plusw2	equ	0xFDB
 12738                           fsr2h	equ	0xFDA
 12739                           fsr2l	equ	0xFD9
 12740                           status	equ	0xFD8
 12741                           
 12742 ;; *************** function _BlinkErrorLeds *****************
 12743 ;; Defined at:
 12744 ;;		line 13 in file "LedsApp.c"
 12745 ;; Parameters:    Size  Location     Type
 12746 ;;  state           1    wreg     enum E7578
 12747 ;; Auto vars:     Size  Location     Type
 12748 ;;  state           1   26[COMRAM] enum E7578
 12749 ;;  idx             2   27[COMRAM] int 
 12750 ;; Return value:  Size  Location     Type
 12751 ;;                  1    wreg      void 
 12752 ;; Registers used:
 12753 ;;		wreg, status,2, status,0
 12754 ;; Tracked objects:
 12755 ;;		On entry : 0/0
 12756 ;;		On exit  : 0/0
 12757 ;;		Unchanged: 0/0
 12758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12759 ;;      Params:         0       0       0       0       0       0       0
 12760 ;;      Locals:         3       0       0       0       0       0       0
 12761 ;;      Temps:          3       0       0       0       0       0       0
 12762 ;;      Totals:         6       0       0       0       0       0       0
 12763 ;;Total ram usage:        6 bytes
 12764 ;; Hardware stack levels used:    1
 12765 ;; Hardware stack levels required when called:    3
 12766 ;; This function calls:
 12767 ;;		Nothing
 12768 ;; This function is called by:
 12769 ;;		_main
 12770 ;; This function uses a non-reentrant model
 12771 ;;
 12772                           
 12773                           	psect	text85
 12774  002C04                     __ptext85:
 12775                           	opt stack 0
 12776  002C04                     _BlinkErrorLeds:
 12777                           	opt stack 27
 12778                           
 12779                           ;incstack = 0
 12780                           ;BlinkErrorLeds@state stored from wreg
 12781  002C04  6E1B               	movwf	BlinkErrorLeds@state,c
 12782                           
 12783                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
 12784  002C06  0E00               	movlw	0
 12785  002C08  6E1D               	movwf	BlinkErrorLeds@idx+1,c
 12786  002C0A  0E00               	movlw	0
 12787  002C0C  6E1C               	movwf	BlinkErrorLeds@idx,c
 12788  002C0E                     l6106:
 12789  002C0E  501B               	movf	BlinkErrorLeds@state,w,c
 12790  002C10  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 12791  002C12  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
 12792  002C14  5018               	movf	??_BlinkErrorLeds,w,c
 12793  002C16  5C1C               	subwf	BlinkErrorLeds@idx,w,c
 12794  002C18  501D               	movf	BlinkErrorLeds@idx+1,w,c
 12795  002C1A  0A80               	xorlw	128
 12796  002C1C  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
 12797  002C1E  5019               	movf	??_BlinkErrorLeds+1,w,c
 12798  002C20  0A80               	xorlw	128
 12799  002C22  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
 12800  002C24  B0D8               	btfsc	status,0,c
 12801  002C26  0012               	return	
 12802                           
 12803                           ;LedsApp.c: 16: {
 12804                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
 12805  002C28  988A               	bcf	3978,4,c	;volatile
 12806                           
 12807                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
 12808  002C2A  0E02               	movlw	2
 12809  002C2C  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 12810  002C2E  0E04               	movlw	4
 12811  002C30  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 12812  002C32  0EBA               	movlw	186
 12813  002C34                     u8637:
 12814  002C34  2EE8               	decfsz	wreg,f,c
 12815  002C36  D7FE               	bra	u8637
 12816  002C38  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 12817  002C3A  D7FC               	bra	u8637
 12818  002C3C  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 12819  002C3E  D7FA               	bra	u8637
 12820  002C40  D000               	nop2	
 12821                           
 12822                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
 12823  002C42  888A               	bsf	3978,4,c	;volatile
 12824                           
 12825                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
 12826  002C44  0E02               	movlw	2
 12827  002C46  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 12828  002C48  0E04               	movlw	4
 12829  002C4A  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 12830  002C4C  0EBA               	movlw	186
 12831  002C4E                     u8647:
 12832  002C4E  2EE8               	decfsz	wreg,f,c
 12833  002C50  D7FE               	bra	u8647
 12834  002C52  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 12835  002C54  D7FC               	bra	u8647
 12836  002C56  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 12837  002C58  D7FA               	bra	u8647
 12838  002C5A  D000               	nop2	
 12839  002C5C  4A1C               	infsnz	BlinkErrorLeds@idx,f,c
 12840  002C5E  2A1D               	incf	BlinkErrorLeds@idx+1,f,c
 12841  002C60  D7D6               	goto	l6106
 12842  002C62                     __end_of_BlinkErrorLeds:
 12843                           	opt stack 0
 12844                           tosu	equ	0xFFF
 12845                           tosh	equ	0xFFE
 12846                           tosl	equ	0xFFD
 12847                           pclath	equ	0xFFA
 12848                           tblptru	equ	0xFF8
 12849                           tblptrh	equ	0xFF7
 12850                           tblptrl	equ	0xFF6
 12851                           tablat	equ	0xFF5
 12852                           prodh	equ	0xFF4
 12853                           prodl	equ	0xFF3
 12854                           intcon	equ	0xFF2
 12855                           intcon2	equ	0xFF1
 12856                           postinc0	equ	0xFEE
 12857                           plusw0	equ	0xFEB
 12858                           wreg	equ	0xFE8
 12859                           indf1	equ	0xFE7
 12860                           postdec1	equ	0xFE5
 12861                           fsr1h	equ	0xFE2
 12862                           fsr1l	equ	0xFE1
 12863                           indf2	equ	0xFDF
 12864                           postinc2	equ	0xFDE
 12865                           postdec2	equ	0xFDD
 12866                           plusw2	equ	0xFDB
 12867                           fsr2h	equ	0xFDA
 12868                           fsr2l	equ	0xFD9
 12869                           status	equ	0xFD8
 12870                           
 12871 ;; *************** function _AdcConvert *****************
 12872 ;; Defined at:
 12873 ;;		line 56 in file "AdcApp.c"
 12874 ;; Parameters:    Size  Location     Type
 12875 ;;		None
 12876 ;; Auto vars:     Size  Location     Type
 12877 ;;  _adcResult      2   85[BANK0 ] unsigned int 
 12878 ;;  idx             1   94[BANK0 ] unsigned char 
 12879 ;;  _adcResult      2   87[BANK0 ] unsigned int 
 12880 ;;  adcRes          2   92[BANK0 ] unsigned int 
 12881 ;; Return value:  Size  Location     Type
 12882 ;;                  1    wreg      void 
 12883 ;; Registers used:
 12884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12885 ;; Tracked objects:
 12886 ;;		On entry : 0/0
 12887 ;;		On exit  : 0/0
 12888 ;;		Unchanged: 0/0
 12889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12890 ;;      Params:         0       0       0       0       0       0       0
 12891 ;;      Locals:         0      10       0       0       0       0       0
 12892 ;;      Temps:          0       2       0       0       0       0       0
 12893 ;;      Totals:         0      12       0       0       0       0       0
 12894 ;;Total ram usage:       12 bytes
 12895 ;; Hardware stack levels used:    1
 12896 ;; Hardware stack levels required when called:    8
 12897 ;; This function calls:
 12898 ;;		_ADC_GetConversion
 12899 ;;		_FlashSampleWrite
 12900 ;;		___ftdiv
 12901 ;;		___ftmul
 12902 ;;		___fttol
 12903 ;;		___lwtoft
 12904 ;;		_pow
 12905 ;; This function is called by:
 12906 ;;		_main
 12907 ;; This function uses a non-reentrant model
 12908 ;;
 12909                           
 12910                           	psect	text86
 12911  00102A                     __ptext86:
 12912                           	opt stack 0
 12913  00102A                     _AdcConvert:
 12914                           	opt stack 22
 12915                           
 12916                           ;AdcApp.c: 61: uint16_t adcRes = 0;
 12917                           
 12918                           ;incstack = 0
 12919  00102A  0E00               	movlw	0
 12920  00102C  0100               	movlb	0	; () banked
 12921  00102E  6FBD               	movwf	(AdcConvert@adcRes+1)& (0+255),b
 12922  001030  0E00               	movlw	0
 12923  001032  6FBC               	movwf	AdcConvert@adcRes& (0+255),b
 12924                           
 12925                           ;AdcApp.c: 63: if (adcSampleMode == CIRCULAR)
 12926  001034  503B               	movf	_adcSampleMode,w,c
 12927  001036  A4D8               	btfss	status,2,c
 12928  001038  D073               	goto	l120
 12929                           
 12930                           ; BSR set to: 0
 12931                           ;AdcApp.c: 64: {
 12932                           ;AdcApp.c: 65: for(uint8_t idx = 0; idx < (7); idx++)
 12933  00103A  0E00               	movlw	0
 12934  00103C  6FBE               	movwf	AdcConvert@idx& (0+255),b
 12935  00103E                     l8108:
 12936                           
 12937                           ; BSR set to: 0
 12938  00103E  0E06               	movlw	6
 12939  001040  65BE               	cpfsgt	AdcConvert@idx& (0+255),b
 12940  001042  D001               	goto	l121
 12941  001044  0012               	return	
 12942  001046                     l121:
 12943                           
 12944                           ; BSR set to: 0
 12945                           ;AdcApp.c: 66: {
 12946                           ;AdcApp.c: 67: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
 12947                           
 12948                           ; BSR set to: 0
 12949  001046  51BE               	movf	AdcConvert@idx& (0+255),w,b
 12950  001048  0D01               	mullw	1
 12951  00104A  0E4A               	movlw	low _channelArr
 12952  00104C  24F3               	addwf	prodl,w,c
 12953  00104E  6EF6               	movwf	tblptrl,c
 12954  001050  0E06               	movlw	high _channelArr
 12955  001052  20F4               	addwfc	prodh,w,c
 12956  001054  6EF7               	movwf	tblptrh,c
 12957  001056                     	if	0	;There are less than 3 active tblptr bytes
 12958  001056                     	endif
 12959  001056  0008               	tblrd		*
 12960  001058  50F5               	movf	tablat,w,c
 12961  00105A  ECAE  F01A         	call	_ADC_GetConversion
 12962  00105E  C018  F0B5         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
 12963  001062  C019  F0B6         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
 12964                           
 12965                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12966  001066  0E00               	movlw	0
 12967  001068  0100               	movlb	0	; () banked
 12968  00106A  6FA5               	movwf	pow@y& (0+255),b
 12969  00106C  0E20               	movlw	32
 12970  00106E  6FA6               	movwf	(pow@y+1)& (0+255),b
 12971  001070  0E41               	movlw	65
 12972  001072  6FA7               	movwf	(pow@y+2)& (0+255),b
 12973  001074  0E00               	movlw	0
 12974  001076  6FA2               	movwf	pow@x& (0+255),b
 12975  001078  0E00               	movlw	0
 12976  00107A  6FA3               	movwf	(pow@x+1)& (0+255),b
 12977  00107C  0E40               	movlw	64
 12978  00107E  6FA4               	movwf	(pow@x+2)& (0+255),b
 12979  001080  EC85  F00A         	call	_pow	;wreg free
 12980  001084  C0A2  F0B9         	movff	?_pow,_AdcConvert$3314
 12981  001088  C0A3  F0BA         	movff	?_pow+1,_AdcConvert$3314+1
 12982  00108C  C0A4  F0BB         	movff	?_pow+2,_AdcConvert$3314+2
 12983                           
 12984                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12985  001090  0EC0               	movlw	192
 12986  001092  0100               	movlb	0	; () banked
 12987  001094  6F6C               	movwf	___ftmul@f2& (0+255),b
 12988  001096  0E50               	movlw	80
 12989  001098  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12990  00109A  0E45               	movlw	69
 12991  00109C  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12992  00109E  C0B9  F02C         	movff	_AdcConvert$3314,___ftdiv@f2
 12993  0010A2  C0BA  F02D         	movff	_AdcConvert$3314+1,___ftdiv@f2+1
 12994  0010A6  C0BB  F02E         	movff	_AdcConvert$3314+2,___ftdiv@f2+2
 12995  0010AA  C0B5  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
 12996  0010AE  C0B6  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
 12997  0010B2  EC8B  F01B         	call	___lwtoft	;wreg free
 12998  0010B6  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 12999  0010BA  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 13000  0010BE  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 13001  0010C2  EC6C  F00E         	call	___ftdiv	;wreg free
 13002  0010C6  C029  F069         	movff	?___ftdiv,___ftmul@f1
 13003  0010CA  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 13004  0010CE  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 13005  0010D2  ECF1  F00D         	call	___ftmul	;wreg free
 13006  0010D6  C069  F078         	movff	?___ftmul,___fttol@f1
 13007  0010DA  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 13008  0010DE  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 13009  0010E2  EC75  F00D         	call	___fttol	;wreg free
 13010  0010E6  C078  F0BC         	movff	?___fttol,AdcConvert@adcRes
 13011  0010EA  C079  F0BD         	movff	?___fttol+1,AdcConvert@adcRes+1
 13012                           
 13013                           ;AdcApp.c: 69: FlashSampleWrite(adcRes, idx + 1);
 13014  0010EE  C0BC  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 13015  0010F2  C0BD  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 13016  0010F6  0100               	movlb	0	; () banked
 13017  0010F8  29BE               	incf	AdcConvert@idx& (0+255),w,b
 13018  0010FA  6E2F               	movwf	FlashSampleWrite@channelNum,c
 13019  0010FC  ECF8  F00C         	call	_FlashSampleWrite	;wreg free
 13020                           
 13021                           ;AdcApp.c: 70: _delay((unsigned long)((250)*(8000000/4000.0)));
 13022  001100  0E03               	movlw	3
 13023  001102  0100               	movlb	0	; () banked
 13024  001104  6FB4               	movwf	(??_AdcConvert+1)& (0+255),b
 13025  001106  0E8A               	movlw	138
 13026  001108  6FB3               	movwf	??_AdcConvert& (0+255),b
 13027  00110A  0E55               	movlw	85
 13028  00110C                     u8657:
 13029  00110C  2EE8               	decfsz	wreg,f,c
 13030  00110E  D7FE               	bra	u8657
 13031  001110  2FB3               	decfsz	??_AdcConvert& (0+255),f,b
 13032  001112  D7FC               	bra	u8657
 13033  001114  2FB4               	decfsz	(??_AdcConvert+1)& (0+255),f,b
 13034  001116  D7FA               	bra	u8657
 13035  001118  D000               	nop2	
 13036  00111A  0100               	movlb	0	; () banked
 13037  00111C  2BBE               	incf	AdcConvert@idx& (0+255),f,b
 13038  00111E  D78F               	goto	l8108
 13039  001120                     l120:
 13040                           
 13041                           ; BSR set to: 0
 13042                           ;AdcApp.c: 73: else if (adcSampleMode == SINGLE_CHANNEL)
 13043                           
 13044                           ; BSR set to: 0
 13045  001120  043B               	decf	_adcSampleMode,w,c
 13046  001122  A4D8               	btfss	status,2,c
 13047  001124  0012               	return	
 13048                           
 13049                           ; BSR set to: 0
 13050                           ;AdcApp.c: 74: {
 13051                           ;AdcApp.c: 75: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
 13052  001126  51D4               	movf	_channel& (0+255),w,b
 13053  001128  0D01               	mullw	1
 13054  00112A  0E4A               	movlw	low _channelArr
 13055  00112C  24F3               	addwf	prodl,w,c
 13056  00112E  6EF6               	movwf	tblptrl,c
 13057  001130  0E06               	movlw	high _channelArr
 13058  001132  20F4               	addwfc	prodh,w,c
 13059  001134  6EF7               	movwf	tblptrh,c
 13060  001136                     	if	0	;There are less than 3 active tblptr bytes
 13061  001136                     	endif
 13062  001136  0008               	tblrd		*
 13063  001138  50F5               	movf	tablat,w,c
 13064  00113A  ECAE  F01A         	call	_ADC_GetConversion
 13065  00113E  C018  F0B7         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_340
 13066  001142  C019  F0B8         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_340+1
 13067                           
 13068                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 13069  001146  0E00               	movlw	0
 13070  001148  0100               	movlb	0	; () banked
 13071  00114A  6FA5               	movwf	pow@y& (0+255),b
 13072  00114C  0E20               	movlw	32
 13073  00114E  6FA6               	movwf	(pow@y+1)& (0+255),b
 13074  001150  0E41               	movlw	65
 13075  001152  6FA7               	movwf	(pow@y+2)& (0+255),b
 13076  001154  0E00               	movlw	0
 13077  001156  6FA2               	movwf	pow@x& (0+255),b
 13078  001158  0E00               	movlw	0
 13079  00115A  6FA3               	movwf	(pow@x+1)& (0+255),b
 13080  00115C  0E40               	movlw	64
 13081  00115E  6FA4               	movwf	(pow@x+2)& (0+255),b
 13082  001160  EC85  F00A         	call	_pow	;wreg free
 13083  001164  C0A2  F0B9         	movff	?_pow,_AdcConvert$3314
 13084  001168  C0A3  F0BA         	movff	?_pow+1,_AdcConvert$3314+1
 13085  00116C  C0A4  F0BB         	movff	?_pow+2,_AdcConvert$3314+2
 13086                           
 13087                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 13088  001170  0EC0               	movlw	192
 13089  001172  0100               	movlb	0	; () banked
 13090  001174  6F6C               	movwf	___ftmul@f2& (0+255),b
 13091  001176  0E50               	movlw	80
 13092  001178  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 13093  00117A  0E45               	movlw	69
 13094  00117C  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 13095  00117E  C0B9  F02C         	movff	_AdcConvert$3314,___ftdiv@f2
 13096  001182  C0BA  F02D         	movff	_AdcConvert$3314+1,___ftdiv@f2+1
 13097  001186  C0BB  F02E         	movff	_AdcConvert$3314+2,___ftdiv@f2+2
 13098  00118A  C0B7  F020         	movff	AdcConvert@_adcResult_340,___lwtoft@c
 13099  00118E  C0B8  F021         	movff	AdcConvert@_adcResult_340+1,___lwtoft@c+1
 13100  001192  EC8B  F01B         	call	___lwtoft	;wreg free
 13101  001196  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 13102  00119A  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 13103  00119E  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 13104  0011A2  EC6C  F00E         	call	___ftdiv	;wreg free
 13105  0011A6  C029  F069         	movff	?___ftdiv,___ftmul@f1
 13106  0011AA  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 13107  0011AE  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 13108  0011B2  ECF1  F00D         	call	___ftmul	;wreg free
 13109  0011B6  C069  F078         	movff	?___ftmul,___fttol@f1
 13110  0011BA  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 13111  0011BE  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 13112  0011C2  EC75  F00D         	call	___fttol	;wreg free
 13113  0011C6  C078  F0BC         	movff	?___fttol,AdcConvert@adcRes
 13114  0011CA  C079  F0BD         	movff	?___fttol+1,AdcConvert@adcRes+1
 13115                           
 13116                           ;AdcApp.c: 77: FlashSampleWrite(adcRes, 1);
 13117  0011CE  C0BC  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 13118  0011D2  C0BD  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 13119  0011D6  0E01               	movlw	1
 13120  0011D8  6E2F               	movwf	FlashSampleWrite@channelNum,c
 13121  0011DA  ECF8  F00C         	call	_FlashSampleWrite	;wreg free
 13122  0011DE  0012               	return	
 13123  0011E0                     __end_of_AdcConvert:
 13124                           	opt stack 0
 13125                           tosu	equ	0xFFF
 13126                           tosh	equ	0xFFE
 13127                           tosl	equ	0xFFD
 13128                           pclath	equ	0xFFA
 13129                           tblptru	equ	0xFF8
 13130                           tblptrh	equ	0xFF7
 13131                           tblptrl	equ	0xFF6
 13132                           tablat	equ	0xFF5
 13133                           prodh	equ	0xFF4
 13134                           prodl	equ	0xFF3
 13135                           intcon	equ	0xFF2
 13136                           intcon2	equ	0xFF1
 13137                           postinc0	equ	0xFEE
 13138                           plusw0	equ	0xFEB
 13139                           wreg	equ	0xFE8
 13140                           indf1	equ	0xFE7
 13141                           postdec1	equ	0xFE5
 13142                           fsr1h	equ	0xFE2
 13143                           fsr1l	equ	0xFE1
 13144                           indf2	equ	0xFDF
 13145                           postinc2	equ	0xFDE
 13146                           postdec2	equ	0xFDD
 13147                           plusw2	equ	0xFDB
 13148                           fsr2h	equ	0xFDA
 13149                           fsr2l	equ	0xFD9
 13150                           status	equ	0xFD8
 13151                           
 13152 ;; *************** function _pow *****************
 13153 ;; Defined at:
 13154 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 13155 ;; Parameters:    Size  Location     Type
 13156 ;;  x               3   66[BANK0 ] void 
 13157 ;;  y               3   69[BANK0 ] void 
 13158 ;; Auto vars:     Size  Location     Type
 13159 ;;  yi              4   79[BANK0 ] unsigned long 
 13160 ;;  sign            1   78[BANK0 ] unsigned char 
 13161 ;; Return value:  Size  Location     Type
 13162 ;;                  3   66[BANK0 ] unsigned char 
 13163 ;; Registers used:
 13164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13165 ;; Tracked objects:
 13166 ;;		On entry : 0/0
 13167 ;;		On exit  : 0/0
 13168 ;;		Unchanged: 0/0
 13169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13170 ;;      Params:         0       6       0       0       0       0       0
 13171 ;;      Locals:         0      11       0       0       0       0       0
 13172 ;;      Temps:          0       0       0       0       0       0       0
 13173 ;;      Totals:         0      17       0       0       0       0       0
 13174 ;;Total ram usage:       17 bytes
 13175 ;; Hardware stack levels used:    1
 13176 ;; Hardware stack levels required when called:    7
 13177 ;; This function calls:
 13178 ;;		___ftge
 13179 ;;		___ftmul
 13180 ;;		___ftneg
 13181 ;;		___fttol
 13182 ;;		___lltoft
 13183 ;;		_exp
 13184 ;;		_log
 13185 ;; This function is called by:
 13186 ;;		_AdcConvert
 13187 ;;		_ReadIntFromEeprom
 13188 ;; This function uses a non-reentrant model
 13189 ;;
 13190                           
 13191                           	psect	text87
 13192  00150A                     __ptext87:
 13193                           	opt stack 0
 13194  00150A                     _pow:
 13195                           	opt stack 20
 13196                           
 13197                           ;incstack = 0
 13198  00150A  0E00               	movlw	0
 13199  00150C  0100               	movlb	0	; () banked
 13200  00150E  6FAE               	movwf	pow@sign& (0+255),b
 13201                           
 13202                           ; BSR set to: 0
 13203  001510  51A2               	movf	pow@x& (0+255),w,b
 13204  001512  11A3               	iorwf	(pow@x+1)& (0+255),w,b
 13205  001514  11A4               	iorwf	(pow@x+2)& (0+255),w,b
 13206  001516  A4D8               	btfss	status,2,c
 13207  001518  D01D               	goto	l1905
 13208                           
 13209                           ; BSR set to: 0
 13210  00151A  0E00               	movlw	0
 13211  00151C  6E18               	movwf	___ftge@ff1,c
 13212  00151E  0E00               	movlw	0
 13213  001520  6E19               	movwf	___ftge@ff1+1,c
 13214  001522  0E00               	movlw	0
 13215  001524  6E1A               	movwf	___ftge@ff1+2,c
 13216  001526  C0A5  F01B         	movff	pow@y,___ftge@ff2
 13217  00152A  C0A6  F01C         	movff	pow@y+1,___ftge@ff2+1
 13218  00152E  C0A7  F01D         	movff	pow@y+2,___ftge@ff2+2
 13219  001532  EC06  F014         	call	___ftge	;wreg free
 13220  001536  A0D8               	btfss	status,0,c
 13221  001538  D005               	goto	l1906
 13222  00153A  0E00               	movlw	0
 13223  00153C  0100               	movlb	0	; () banked
 13224  00153E  6FC5               	movwf	(_errno+1)& (0+255),b
 13225  001540  0E21               	movlw	33
 13226  001542  6FC4               	movwf	_errno& (0+255),b
 13227  001544                     l1906:
 13228  001544  0E00               	movlw	0
 13229  001546  0100               	movlb	0	; () banked
 13230  001548  6FA2               	movwf	?_pow& (0+255),b
 13231  00154A  0E00               	movlw	0
 13232  00154C  6FA3               	movwf	(?_pow+1)& (0+255),b
 13233  00154E  0E00               	movlw	0
 13234  001550  6FA4               	movwf	(?_pow+2)& (0+255),b
 13235                           
 13236                           ; BSR set to: 0
 13237  001552  0012               	return	
 13238  001554                     l1905:
 13239                           
 13240                           ; BSR set to: 0
 13241                           
 13242                           ; BSR set to: 0
 13243  001554  51A5               	movf	pow@y& (0+255),w,b
 13244  001556  11A6               	iorwf	(pow@y+1)& (0+255),w,b
 13245  001558  11A7               	iorwf	(pow@y+2)& (0+255),w,b
 13246  00155A  A4D8               	btfss	status,2,c
 13247  00155C  D007               	goto	l1908
 13248                           
 13249                           ; BSR set to: 0
 13250  00155E  0E00               	movlw	0
 13251  001560  6FA2               	movwf	?_pow& (0+255),b
 13252  001562  0E80               	movlw	128
 13253  001564  6FA3               	movwf	(?_pow+1)& (0+255),b
 13254  001566  0E3F               	movlw	63
 13255  001568  6FA4               	movwf	(?_pow+2)& (0+255),b
 13256                           
 13257                           ; BSR set to: 0
 13258  00156A  0012               	return	
 13259  00156C                     l1908:
 13260                           
 13261                           ; BSR set to: 0
 13262                           
 13263                           ; BSR set to: 0
 13264  00156C  AFA4               	btfss	(pow@x+2)& (0+255),7,b
 13265  00156E  D041               	goto	l1909
 13266                           
 13267                           ; BSR set to: 0
 13268  001570  C0A5  F078         	movff	pow@y,___fttol@f1
 13269  001574  C0A6  F079         	movff	pow@y+1,___fttol@f1+1
 13270  001578  C0A7  F07A         	movff	pow@y+2,___fttol@f1+2
 13271  00157C  EC75  F00D         	call	___fttol	;wreg free
 13272  001580  C078  F0AF         	movff	?___fttol,pow@yi
 13273  001584  C079  F0B0         	movff	?___fttol+1,pow@yi+1
 13274  001588  C07A  F0B1         	movff	?___fttol+2,pow@yi+2
 13275  00158C  C07B  F0B2         	movff	?___fttol+3,pow@yi+3
 13276  001590  C0AF  F020         	movff	pow@yi,___lltoft@c
 13277  001594  C0B0  F021         	movff	pow@yi+1,___lltoft@c+1
 13278  001598  C0B1  F022         	movff	pow@yi+2,___lltoft@c+2
 13279  00159C  C0B2  F023         	movff	pow@yi+3,___lltoft@c+3
 13280  0015A0  EC5F  F016         	call	___lltoft	;wreg free
 13281  0015A4  0100               	movlb	0	; () banked
 13282  0015A6  51A5               	movf	pow@y& (0+255),w,b
 13283  0015A8  1820               	xorwf	?___lltoft,w,c
 13284  0015AA  E107               	bnz	u7460
 13285  0015AC  51A6               	movf	(pow@y+1)& (0+255),w,b
 13286  0015AE  1821               	xorwf	?___lltoft+1,w,c
 13287  0015B0  E104               	bnz	u7460
 13288  0015B2  51A7               	movf	(pow@y+2)& (0+255),w,b
 13289  0015B4  1822               	xorwf	?___lltoft+2,w,c
 13290  0015B6  B4D8               	btfsc	status,2,c
 13291  0015B8  D00B               	goto	l1910
 13292  0015BA                     u7460:
 13293                           
 13294                           ; BSR set to: 0
 13295  0015BA  0E00               	movlw	0
 13296  0015BC  6FC5               	movwf	(_errno+1)& (0+255),b
 13297  0015BE  0E21               	movlw	33
 13298  0015C0  6FC4               	movwf	_errno& (0+255),b
 13299  0015C2  0E00               	movlw	0
 13300  0015C4  6FA2               	movwf	?_pow& (0+255),b
 13301  0015C6  0E00               	movlw	0
 13302  0015C8  6FA3               	movwf	(?_pow+1)& (0+255),b
 13303  0015CA  0E00               	movlw	0
 13304  0015CC  6FA4               	movwf	(?_pow+2)& (0+255),b
 13305                           
 13306                           ; BSR set to: 0
 13307  0015CE  0012               	return	
 13308  0015D0                     l1910:
 13309                           
 13310                           ; BSR set to: 0
 13311                           
 13312                           ; BSR set to: 0
 13313  0015D0  51AF               	movf	pow@yi& (0+255),w,b
 13314  0015D2  0B01               	andlw	1
 13315  0015D4  6FAE               	movwf	pow@sign& (0+255),b
 13316                           
 13317                           ; BSR set to: 0
 13318  0015D6  C0A2  F018         	movff	pow@x,___ftneg@f1
 13319  0015DA  C0A3  F019         	movff	pow@x+1,___ftneg@f1+1
 13320  0015DE  C0A4  F01A         	movff	pow@x+2,___ftneg@f1+2
 13321  0015E2  EC79  F01B         	call	___ftneg	;wreg free
 13322  0015E6  C018  F0A2         	movff	?___ftneg,pow@x
 13323  0015EA  C019  F0A3         	movff	?___ftneg+1,pow@x+1
 13324  0015EE  C01A  F0A4         	movff	?___ftneg+2,pow@x+2
 13325  0015F2                     l1909:
 13326  0015F2  C0A2  F090         	movff	pow@x,log@x
 13327  0015F6  C0A3  F091         	movff	pow@x+1,log@x+1
 13328  0015FA  C0A4  F092         	movff	pow@x+2,log@x+2
 13329  0015FE  ECDB  F00B         	call	_log	;wreg free
 13330  001602  C090  F0A8         	movff	?_log,_pow$3317
 13331  001606  C091  F0A9         	movff	?_log+1,_pow$3317+1
 13332  00160A  C092  F0AA         	movff	?_log+2,_pow$3317+2
 13333  00160E  C0A8  F069         	movff	_pow$3317,___ftmul@f1
 13334  001612  C0A9  F06A         	movff	_pow$3317+1,___ftmul@f1+1
 13335  001616  C0AA  F06B         	movff	_pow$3317+2,___ftmul@f1+2
 13336  00161A  C0A5  F06C         	movff	pow@y,___ftmul@f2
 13337  00161E  C0A6  F06D         	movff	pow@y+1,___ftmul@f2+1
 13338  001622  C0A7  F06E         	movff	pow@y+2,___ftmul@f2+2
 13339  001626  ECF1  F00D         	call	___ftmul	;wreg free
 13340  00162A  C069  F0AB         	movff	?___ftmul,_pow$3318
 13341  00162E  C06A  F0AC         	movff	?___ftmul+1,_pow$3318+1
 13342  001632  C06B  F0AD         	movff	?___ftmul+2,_pow$3318+2
 13343  001636  C0AB  F099         	movff	_pow$3318,exp@x
 13344  00163A  C0AC  F09A         	movff	_pow$3318+1,exp@x+1
 13345  00163E  C0AD  F09B         	movff	_pow$3318+2,exp@x+2
 13346  001642  EC31  F006         	call	_exp	;wreg free
 13347  001646  C099  F0A2         	movff	?_exp,pow@x
 13348  00164A  C09A  F0A3         	movff	?_exp+1,pow@x+1
 13349  00164E  C09B  F0A4         	movff	?_exp+2,pow@x+2
 13350  001652  0100               	movlb	0	; () banked
 13351  001654  51AE               	movf	pow@sign& (0+255),w,b
 13352  001656  B4D8               	btfsc	status,2,c
 13353  001658  D00F               	goto	l1911
 13354                           
 13355                           ; BSR set to: 0
 13356  00165A  C0A2  F018         	movff	pow@x,___ftneg@f1
 13357  00165E  C0A3  F019         	movff	pow@x+1,___ftneg@f1+1
 13358  001662  C0A4  F01A         	movff	pow@x+2,___ftneg@f1+2
 13359  001666  EC79  F01B         	call	___ftneg	;wreg free
 13360  00166A  C018  F0A2         	movff	?___ftneg,?_pow
 13361  00166E  C019  F0A3         	movff	?___ftneg+1,?_pow+1
 13362  001672  C01A  F0A4         	movff	?___ftneg+2,?_pow+2
 13363  001676  0012               	return	
 13364  001678                     l1911:
 13365                           
 13366                           ; BSR set to: 0
 13367  001678  C0A2  F0A2         	movff	pow@x,?_pow
 13368  00167C  C0A3  F0A3         	movff	pow@x+1,?_pow+1
 13369  001680  C0A4  F0A4         	movff	pow@x+2,?_pow+2
 13370  001684  0012               	return		;funcret
 13371  001686                     __end_of_pow:
 13372                           	opt stack 0
 13373                           tosu	equ	0xFFF
 13374                           tosh	equ	0xFFE
 13375                           tosl	equ	0xFFD
 13376                           pclath	equ	0xFFA
 13377                           tblptru	equ	0xFF8
 13378                           tblptrh	equ	0xFF7
 13379                           tblptrl	equ	0xFF6
 13380                           tablat	equ	0xFF5
 13381                           prodh	equ	0xFF4
 13382                           prodl	equ	0xFF3
 13383                           intcon	equ	0xFF2
 13384                           intcon2	equ	0xFF1
 13385                           postinc0	equ	0xFEE
 13386                           plusw0	equ	0xFEB
 13387                           wreg	equ	0xFE8
 13388                           indf1	equ	0xFE7
 13389                           postdec1	equ	0xFE5
 13390                           fsr1h	equ	0xFE2
 13391                           fsr1l	equ	0xFE1
 13392                           indf2	equ	0xFDF
 13393                           postinc2	equ	0xFDE
 13394                           postdec2	equ	0xFDD
 13395                           plusw2	equ	0xFDB
 13396                           fsr2h	equ	0xFDA
 13397                           fsr2l	equ	0xFD9
 13398                           status	equ	0xFD8
 13399                           
 13400 ;; *************** function _log *****************
 13401 ;; Defined at:
 13402 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 13403 ;; Parameters:    Size  Location     Type
 13404 ;;  x               3   48[BANK0 ] unsigned char 
 13405 ;; Auto vars:     Size  Location     Type
 13406 ;;  exponent        2   51[BANK0 ] int 
 13407 ;; Return value:  Size  Location     Type
 13408 ;;                  3   48[BANK0 ] int 
 13409 ;; Registers used:
 13410 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13411 ;; Tracked objects:
 13412 ;;		On entry : 0/0
 13413 ;;		On exit  : 0/0
 13414 ;;		Unchanged: 0/0
 13415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13416 ;;      Params:         0       3       0       0       0       0       0
 13417 ;;      Locals:         0       2       0       0       0       0       0
 13418 ;;      Temps:          0       0       0       0       0       0       0
 13419 ;;      Totals:         0       5       0       0       0       0       0
 13420 ;;Total ram usage:        5 bytes
 13421 ;; Hardware stack levels used:    1
 13422 ;; Hardware stack levels required when called:    6
 13423 ;; This function calls:
 13424 ;;		___awtoft
 13425 ;;		___ftadd
 13426 ;;		___ftmul
 13427 ;;		_eval_poly
 13428 ;;		_frexp
 13429 ;; This function is called by:
 13430 ;;		_pow
 13431 ;; This function uses a non-reentrant model
 13432 ;;
 13433                           
 13434                           	psect	text88
 13435  0017B6                     __ptext88:
 13436                           	opt stack 0
 13437  0017B6                     _log:
 13438                           	opt stack 20
 13439                           
 13440                           ;incstack = 0
 13441  0017B6  0100               	movlb	0	; () banked
 13442  0017B8  AF92               	btfss	(log@x+2)& (0+255),7,b
 13443  0017BA  D00B               	goto	l2167
 13444                           
 13445                           ; BSR set to: 0
 13446  0017BC  0E00               	movlw	0
 13447  0017BE  6FC5               	movwf	(_errno+1)& (0+255),b
 13448  0017C0  0E21               	movlw	33
 13449  0017C2  6FC4               	movwf	_errno& (0+255),b
 13450  0017C4  0E00               	movlw	0
 13451  0017C6  6F90               	movwf	?_log& (0+255),b
 13452  0017C8  0E00               	movlw	0
 13453  0017CA  6F91               	movwf	(?_log+1)& (0+255),b
 13454  0017CC  0E00               	movlw	0
 13455  0017CE  6F92               	movwf	(?_log+2)& (0+255),b
 13456                           
 13457                           ; BSR set to: 0
 13458  0017D0  0012               	return	
 13459  0017D2                     l2167:
 13460                           
 13461                           ; BSR set to: 0
 13462                           
 13463                           ; BSR set to: 0
 13464  0017D2  5190               	movf	log@x& (0+255),w,b
 13465  0017D4  1191               	iorwf	(log@x+1)& (0+255),w,b
 13466  0017D6  1192               	iorwf	(log@x+2)& (0+255),w,b
 13467  0017D8  A4D8               	btfss	status,2,c
 13468  0017DA  D00B               	goto	l2169
 13469                           
 13470                           ; BSR set to: 0
 13471  0017DC  0E00               	movlw	0
 13472  0017DE  6FC5               	movwf	(_errno+1)& (0+255),b
 13473  0017E0  0E22               	movlw	34
 13474  0017E2  6FC4               	movwf	_errno& (0+255),b
 13475  0017E4  0E00               	movlw	0
 13476  0017E6  6F90               	movwf	?_log& (0+255),b
 13477  0017E8  0E00               	movlw	0
 13478  0017EA  6F91               	movwf	(?_log+1)& (0+255),b
 13479  0017EC  0E00               	movlw	0
 13480  0017EE  6F92               	movwf	(?_log+2)& (0+255),b
 13481                           
 13482                           ; BSR set to: 0
 13483  0017F0  0012               	return	
 13484  0017F2                     l2169:
 13485                           
 13486                           ; BSR set to: 0
 13487                           
 13488                           ; BSR set to: 0
 13489  0017F2  0E00               	movlw	0
 13490  0017F4  6F6C               	movwf	___ftmul@f2& (0+255),b
 13491  0017F6  0E00               	movlw	0
 13492  0017F8  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 13493  0017FA  0E40               	movlw	64
 13494  0017FC  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 13495  0017FE  0E93               	movlw	low log@exponent
 13496  001800  6E1B               	movwf	frexp@eptr,c
 13497  001802  0E00               	movlw	high log@exponent
 13498  001804  6E1C               	movwf	frexp@eptr+1,c
 13499  001806  C090  F018         	movff	log@x,frexp@value
 13500  00180A  C091  F019         	movff	log@x+1,frexp@value+1
 13501  00180E  C092  F01A         	movff	log@x+2,frexp@value+2
 13502  001812  ECBE  F013         	call	_frexp	;wreg free
 13503  001816  C018  F069         	movff	?_frexp,___ftmul@f1
 13504  00181A  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
 13505  00181E  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
 13506  001822  ECF1  F00D         	call	___ftmul	;wreg free
 13507  001826  C069  F078         	movff	?___ftmul,___ftadd@f1
 13508  00182A  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 13509  00182E  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 13510  001832  0E00               	movlw	0
 13511  001834  0100               	movlb	0	; () banked
 13512  001836  6F7B               	movwf	___ftadd@f2& (0+255),b
 13513  001838  0E80               	movlw	128
 13514  00183A  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 13515  00183C  0EBF               	movlw	191
 13516  00183E  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 13517  001840  ECF0  F008         	call	___ftadd	;wreg free
 13518  001844  C078  F090         	movff	?___ftadd,log@x
 13519  001848  C079  F091         	movff	?___ftadd+1,log@x+1
 13520  00184C  C07A  F092         	movff	?___ftadd+2,log@x+2
 13521  001850  0100               	movlb	0	; () banked
 13522  001852  0793               	decf	log@exponent& (0+255),f,b
 13523  001854  A0D8               	btfss	status,0,c
 13524  001856  0794               	decf	(log@exponent+1)& (0+255),f,b
 13525                           
 13526                           ; BSR set to: 0
 13527  001858  C090  F084         	movff	log@x,eval_poly@x
 13528  00185C  C091  F085         	movff	log@x+1,eval_poly@x+1
 13529  001860  C092  F086         	movff	log@x+2,eval_poly@x+2
 13530  001864  0E73               	movlw	low log@coeff
 13531  001866  6F87               	movwf	eval_poly@d& (0+255),b
 13532  001868  0E06               	movlw	high log@coeff
 13533  00186A  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 13534  00186C  0E00               	movlw	0
 13535  00186E  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 13536  001870  0E08               	movlw	8
 13537  001872  6F89               	movwf	eval_poly@n& (0+255),b
 13538  001874  ECC3  F00F         	call	_eval_poly	;wreg free
 13539  001878  C084  F090         	movff	?_eval_poly,log@x
 13540  00187C  C085  F091         	movff	?_eval_poly+1,log@x+1
 13541  001880  C086  F092         	movff	?_eval_poly+2,log@x+2
 13542  001884  0E72               	movlw	114
 13543  001886  0100               	movlb	0	; () banked
 13544  001888  6F6C               	movwf	___ftmul@f2& (0+255),b
 13545  00188A  0E31               	movlw	49
 13546  00188C  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 13547  00188E  0E3F               	movlw	63
 13548  001890  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 13549  001892  C093  F020         	movff	log@exponent,___awtoft@c
 13550  001896  C094  F021         	movff	log@exponent+1,___awtoft@c+1
 13551  00189A  EC91  F019         	call	___awtoft	;wreg free
 13552  00189E  C020  F069         	movff	?___awtoft,___ftmul@f1
 13553  0018A2  C021  F06A         	movff	?___awtoft+1,___ftmul@f1+1
 13554  0018A6  C022  F06B         	movff	?___awtoft+2,___ftmul@f1+2
 13555  0018AA  ECF1  F00D         	call	___ftmul	;wreg free
 13556  0018AE  C069  F078         	movff	?___ftmul,___ftadd@f1
 13557  0018B2  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 13558  0018B6  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 13559  0018BA  C090  F07B         	movff	log@x,___ftadd@f2
 13560  0018BE  C091  F07C         	movff	log@x+1,___ftadd@f2+1
 13561  0018C2  C092  F07D         	movff	log@x+2,___ftadd@f2+2
 13562  0018C6  ECF0  F008         	call	___ftadd	;wreg free
 13563  0018CA  C078  F090         	movff	?___ftadd,?_log
 13564  0018CE  C079  F091         	movff	?___ftadd+1,?_log+1
 13565  0018D2  C07A  F092         	movff	?___ftadd+2,?_log+2
 13566  0018D6  0012               	return	
 13567  0018D8                     __end_of_log:
 13568                           	opt stack 0
 13569                           tosu	equ	0xFFF
 13570                           tosh	equ	0xFFE
 13571                           tosl	equ	0xFFD
 13572                           pclath	equ	0xFFA
 13573                           tblptru	equ	0xFF8
 13574                           tblptrh	equ	0xFF7
 13575                           tblptrl	equ	0xFF6
 13576                           tablat	equ	0xFF5
 13577                           prodh	equ	0xFF4
 13578                           prodl	equ	0xFF3
 13579                           intcon	equ	0xFF2
 13580                           intcon2	equ	0xFF1
 13581                           postinc0	equ	0xFEE
 13582                           plusw0	equ	0xFEB
 13583                           wreg	equ	0xFE8
 13584                           indf1	equ	0xFE7
 13585                           postdec1	equ	0xFE5
 13586                           fsr1h	equ	0xFE2
 13587                           fsr1l	equ	0xFE1
 13588                           indf2	equ	0xFDF
 13589                           postinc2	equ	0xFDE
 13590                           postdec2	equ	0xFDD
 13591                           plusw2	equ	0xFDB
 13592                           fsr2h	equ	0xFDA
 13593                           fsr2l	equ	0xFD9
 13594                           status	equ	0xFD8
 13595                           
 13596 ;; *************** function _exp *****************
 13597 ;; Defined at:
 13598 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 13599 ;; Parameters:    Size  Location     Type
 13600 ;;  x               3   57[BANK0 ] int 
 13601 ;; Auto vars:     Size  Location     Type
 13602 ;;  exponent        2   63[BANK0 ] int 
 13603 ;;  sign            1   65[BANK0 ] unsigned char 
 13604 ;; Return value:  Size  Location     Type
 13605 ;;                  3   57[BANK0 ] unsigned char 
 13606 ;; Registers used:
 13607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13608 ;; Tracked objects:
 13609 ;;		On entry : 0/0
 13610 ;;		On exit  : 0/0
 13611 ;;		Unchanged: 0/0
 13612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13613 ;;      Params:         0       3       0       0       0       0       0
 13614 ;;      Locals:         0       6       0       0       0       0       0
 13615 ;;      Temps:          0       0       0       0       0       0       0
 13616 ;;      Totals:         0       9       0       0       0       0       0
 13617 ;;Total ram usage:        9 bytes
 13618 ;; Hardware stack levels used:    1
 13619 ;; Hardware stack levels required when called:    6
 13620 ;; This function calls:
 13621 ;;		___awtoft
 13622 ;;		___ftdiv
 13623 ;;		___ftge
 13624 ;;		___ftmul
 13625 ;;		___ftneg
 13626 ;;		___ftsub
 13627 ;;		___fttol
 13628 ;;		_eval_poly
 13629 ;;		_floor
 13630 ;;		_ldexp
 13631 ;; This function is called by:
 13632 ;;		_pow
 13633 ;; This function uses a non-reentrant model
 13634 ;;
 13635                           
 13636                           	psect	text89
 13637  000C62                     __ptext89:
 13638                           	opt stack 0
 13639  000C62                     _exp:
 13640                           	opt stack 20
 13641                           
 13642                           ;incstack = 0
 13643  000C62  0100               	movlb	0	; () banked
 13644  000C64  5199               	movf	exp@x& (0+255),w,b
 13645  000C66  119A               	iorwf	(exp@x+1)& (0+255),w,b
 13646  000C68  119B               	iorwf	(exp@x+2)& (0+255),w,b
 13647  000C6A  A4D8               	btfss	status,2,c
 13648  000C6C  D007               	goto	l2103
 13649                           
 13650                           ; BSR set to: 0
 13651  000C6E  0E00               	movlw	0
 13652  000C70  6F99               	movwf	?_exp& (0+255),b
 13653  000C72  0E80               	movlw	128
 13654  000C74  6F9A               	movwf	(?_exp+1)& (0+255),b
 13655  000C76  0E3F               	movlw	63
 13656  000C78  6F9B               	movwf	(?_exp+2)& (0+255),b
 13657                           
 13658                           ; BSR set to: 0
 13659  000C7A  0012               	return	
 13660  000C7C                     l2103:
 13661                           
 13662                           ; BSR set to: 0
 13663                           
 13664                           ; BSR set to: 0
 13665  000C7C  0E72               	movlw	114
 13666  000C7E  6E18               	movwf	___ftge@ff1,c
 13667  000C80  0E31               	movlw	49
 13668  000C82  6E19               	movwf	___ftge@ff1+1,c
 13669  000C84  0E44               	movlw	68
 13670  000C86  6E1A               	movwf	___ftge@ff1+2,c
 13671  000C88  C099  F01B         	movff	exp@x,___ftge@ff2
 13672  000C8C  C09A  F01C         	movff	exp@x+1,___ftge@ff2+1
 13673  000C90  C09B  F01D         	movff	exp@x+2,___ftge@ff2+2
 13674  000C94  EC06  F014         	call	___ftge	;wreg free
 13675  000C98  B0D8               	btfsc	status,0,c
 13676  000C9A  D00C               	goto	l2105
 13677  000C9C  0E00               	movlw	0
 13678  000C9E  0100               	movlb	0	; () banked
 13679  000CA0  6FC5               	movwf	(_errno+1)& (0+255),b
 13680  000CA2  0E22               	movlw	34
 13681  000CA4  6FC4               	movwf	_errno& (0+255),b
 13682  000CA6  0EFF               	movlw	255
 13683  000CA8  6F99               	movwf	?_exp& (0+255),b
 13684  000CAA  0E7F               	movlw	127
 13685  000CAC  6F9A               	movwf	(?_exp+1)& (0+255),b
 13686  000CAE  0E7F               	movlw	127
 13687  000CB0  6F9B               	movwf	(?_exp+2)& (0+255),b
 13688                           
 13689                           ; BSR set to: 0
 13690  000CB2  0012               	return	
 13691  000CB4                     l2105:
 13692                           
 13693                           ; BSR set to: 0
 13694  000CB4  C099  F018         	movff	exp@x,___ftge@ff1
 13695  000CB8  C09A  F019         	movff	exp@x+1,___ftge@ff1+1
 13696  000CBC  C09B  F01A         	movff	exp@x+2,___ftge@ff1+2
 13697  000CC0  0E49               	movlw	73
 13698  000CC2  6E1B               	movwf	___ftge@ff2,c
 13699  000CC4  0E3A               	movlw	58
 13700  000CC6  6E1C               	movwf	___ftge@ff2+1,c
 13701  000CC8  0EC4               	movlw	196
 13702  000CCA  6E1D               	movwf	___ftge@ff2+2,c
 13703  000CCC  EC06  F014         	call	___ftge	;wreg free
 13704  000CD0  B0D8               	btfsc	status,0,c
 13705  000CD2  D00C               	goto	l2106
 13706  000CD4  0E00               	movlw	0
 13707  000CD6  0100               	movlb	0	; () banked
 13708  000CD8  6FC5               	movwf	(_errno+1)& (0+255),b
 13709  000CDA  0E22               	movlw	34
 13710  000CDC  6FC4               	movwf	_errno& (0+255),b
 13711  000CDE  0E00               	movlw	0
 13712  000CE0  6F99               	movwf	?_exp& (0+255),b
 13713  000CE2  0E00               	movlw	0
 13714  000CE4  6F9A               	movwf	(?_exp+1)& (0+255),b
 13715  000CE6  0E00               	movlw	0
 13716  000CE8  6F9B               	movwf	(?_exp+2)& (0+255),b
 13717                           
 13718                           ; BSR set to: 0
 13719  000CEA  0012               	return	
 13720  000CEC                     l2106:
 13721                           
 13722                           ; BSR set to: 0
 13723  000CEC  0100               	movlb	0	; () banked
 13724  000CEE  AF9B               	btfss	(exp@x+2)& (0+255),7,b
 13725  000CF0  D002               	goto	u7370
 13726  000CF2  0E01               	movlw	1
 13727  000CF4  D001               	goto	u7380
 13728  000CF6                     u7370:
 13729  000CF6  0E00               	movlw	0
 13730  000CF8                     u7380:
 13731  000CF8  6FA1               	movwf	exp@sign& (0+255),b
 13732                           
 13733                           ; BSR set to: 0
 13734  000CFA  51A1               	movf	exp@sign& (0+255),w,b
 13735  000CFC  B4D8               	btfsc	status,2,c
 13736  000CFE  D00E               	goto	l2107
 13737                           
 13738                           ; BSR set to: 0
 13739  000D00  C099  F018         	movff	exp@x,___ftneg@f1
 13740  000D04  C09A  F019         	movff	exp@x+1,___ftneg@f1+1
 13741  000D08  C09B  F01A         	movff	exp@x+2,___ftneg@f1+2
 13742  000D0C  EC79  F01B         	call	___ftneg	;wreg free
 13743  000D10  C018  F099         	movff	?___ftneg,exp@x
 13744  000D14  C019  F09A         	movff	?___ftneg+1,exp@x+1
 13745  000D18  C01A  F09B         	movff	?___ftneg+2,exp@x+2
 13746  000D1C                     l2107:
 13747  000D1C  C099  F069         	movff	exp@x,___ftmul@f1
 13748  000D20  C09A  F06A         	movff	exp@x+1,___ftmul@f1+1
 13749  000D24  C09B  F06B         	movff	exp@x+2,___ftmul@f1+2
 13750  000D28  0EAA               	movlw	170
 13751  000D2A  0100               	movlb	0	; () banked
 13752  000D2C  6F6C               	movwf	___ftmul@f2& (0+255),b
 13753  000D2E  0EB8               	movlw	184
 13754  000D30  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 13755  000D32  0E3F               	movlw	63
 13756  000D34  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 13757  000D36  ECF1  F00D         	call	___ftmul	;wreg free
 13758  000D3A  C069  F099         	movff	?___ftmul,exp@x
 13759  000D3E  C06A  F09A         	movff	?___ftmul+1,exp@x+1
 13760  000D42  C06B  F09B         	movff	?___ftmul+2,exp@x+2
 13761  000D46  C099  F091         	movff	exp@x,floor@x
 13762  000D4A  C09A  F092         	movff	exp@x+1,floor@x+1
 13763  000D4E  C09B  F093         	movff	exp@x+2,floor@x+2
 13764  000D52  EC52  F00F         	call	_floor	;wreg free
 13765  000D56  C091  F09C         	movff	?_floor,_exp$3319
 13766  000D5A  C092  F09D         	movff	?_floor+1,_exp$3319+1
 13767  000D5E  C093  F09E         	movff	?_floor+2,_exp$3319+2
 13768  000D62  C09C  F078         	movff	_exp$3319,___fttol@f1
 13769  000D66  C09D  F079         	movff	_exp$3319+1,___fttol@f1+1
 13770  000D6A  C09E  F07A         	movff	_exp$3319+2,___fttol@f1+2
 13771  000D6E  EC75  F00D         	call	___fttol	;wreg free
 13772  000D72  C078  F09F         	movff	?___fttol,exp@exponent
 13773  000D76  C079  F0A0         	movff	?___fttol+1,exp@exponent+1
 13774  000D7A  C099  F084         	movff	exp@x,___ftsub@f1
 13775  000D7E  C09A  F085         	movff	exp@x+1,___ftsub@f1+1
 13776  000D82  C09B  F086         	movff	exp@x+2,___ftsub@f1+2
 13777  000D86  C09F  F020         	movff	exp@exponent,___awtoft@c
 13778  000D8A  C0A0  F021         	movff	exp@exponent+1,___awtoft@c+1
 13779  000D8E  EC91  F019         	call	___awtoft	;wreg free
 13780  000D92  C020  F087         	movff	?___awtoft,___ftsub@f2
 13781  000D96  C021  F088         	movff	?___awtoft+1,___ftsub@f2+1
 13782  000D9A  C022  F089         	movff	?___awtoft+2,___ftsub@f2+2
 13783  000D9E  ECD9  F018         	call	___ftsub	;wreg free
 13784  000DA2  C084  F099         	movff	?___ftsub,exp@x
 13785  000DA6  C085  F09A         	movff	?___ftsub+1,exp@x+1
 13786  000DAA  C086  F09B         	movff	?___ftsub+2,exp@x+2
 13787  000DAE  C099  F084         	movff	exp@x,eval_poly@x
 13788  000DB2  C09A  F085         	movff	exp@x+1,eval_poly@x+1
 13789  000DB6  C09B  F086         	movff	exp@x+2,eval_poly@x+2
 13790  000DBA  0E55               	movlw	low exp@coeff
 13791  000DBC  0100               	movlb	0	; () banked
 13792  000DBE  6F87               	movwf	eval_poly@d& (0+255),b
 13793  000DC0  0E06               	movlw	high exp@coeff
 13794  000DC2  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 13795  000DC4  0E00               	movlw	0
 13796  000DC6  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 13797  000DC8  0E09               	movlw	9
 13798  000DCA  6F89               	movwf	eval_poly@n& (0+255),b
 13799  000DCC  ECC3  F00F         	call	_eval_poly	;wreg free
 13800  000DD0  C084  F090         	movff	?_eval_poly,ldexp@value
 13801  000DD4  C085  F091         	movff	?_eval_poly+1,ldexp@value+1
 13802  000DD8  C086  F092         	movff	?_eval_poly+2,ldexp@value+2
 13803  000DDC  C09F  F093         	movff	exp@exponent,ldexp@newexp
 13804  000DE0  C0A0  F094         	movff	exp@exponent+1,ldexp@newexp+1
 13805  000DE4  EC30  F010         	call	_ldexp	;wreg free
 13806  000DE8  C090  F099         	movff	?_ldexp,exp@x
 13807  000DEC  C091  F09A         	movff	?_ldexp+1,exp@x+1
 13808  000DF0  C092  F09B         	movff	?_ldexp+2,exp@x+2
 13809  000DF4  0100               	movlb	0	; () banked
 13810  000DF6  51A1               	movf	exp@sign& (0+255),w,b
 13811  000DF8  B4D8               	btfsc	status,2,c
 13812  000DFA  D025               	goto	l2108
 13813                           
 13814                           ; BSR set to: 0
 13815  000DFC  2999               	incf	exp@x& (0+255),w,b
 13816  000DFE  E10E               	bnz	l7402
 13817  000E00  0E7F               	movlw	127
 13818  000E02  199A               	xorwf	(exp@x+1)& (0+255),w,b
 13819  000E04  E10B               	bnz	l7402
 13820  000E06  0E7F               	movlw	127
 13821  000E08  199B               	xorwf	(exp@x+2)& (0+255),w,b
 13822  000E0A  A4D8               	btfss	status,2,c
 13823  000E0C  D007               	goto	l2109
 13824                           
 13825                           ; BSR set to: 0
 13826  000E0E  0E00               	movlw	0
 13827  000E10  6F99               	movwf	?_exp& (0+255),b
 13828  000E12  0E00               	movlw	0
 13829  000E14  6F9A               	movwf	(?_exp+1)& (0+255),b
 13830  000E16  0E00               	movlw	0
 13831  000E18  6F9B               	movwf	(?_exp+2)& (0+255),b
 13832                           
 13833                           ; BSR set to: 0
 13834  000E1A  0012               	return	
 13835  000E1C                     l2109:
 13836  000E1C                     l7402:
 13837                           
 13838                           ; BSR set to: 0
 13839  000E1C  0E00               	movlw	0
 13840  000E1E  6E29               	movwf	___ftdiv@f1,c
 13841  000E20  0E80               	movlw	128
 13842  000E22  6E2A               	movwf	___ftdiv@f1+1,c
 13843  000E24  0E3F               	movlw	63
 13844  000E26  6E2B               	movwf	___ftdiv@f1+2,c
 13845  000E28  C099  F02C         	movff	exp@x,___ftdiv@f2
 13846  000E2C  C09A  F02D         	movff	exp@x+1,___ftdiv@f2+1
 13847  000E30  C09B  F02E         	movff	exp@x+2,___ftdiv@f2+2
 13848  000E34  EC6C  F00E         	call	___ftdiv	;wreg free
 13849  000E38  C029  F099         	movff	?___ftdiv,?_exp
 13850  000E3C  C02A  F09A         	movff	?___ftdiv+1,?_exp+1
 13851  000E40  C02B  F09B         	movff	?___ftdiv+2,?_exp+2
 13852  000E44  0012               	return	
 13853  000E46                     l2108:
 13854                           
 13855                           ; BSR set to: 0
 13856  000E46  C099  F099         	movff	exp@x,?_exp
 13857  000E4A  C09A  F09A         	movff	exp@x+1,?_exp+1
 13858  000E4E  C09B  F09B         	movff	exp@x+2,?_exp+2
 13859  000E52  0012               	return		;funcret
 13860  000E54                     __end_of_exp:
 13861                           	opt stack 0
 13862                           tosu	equ	0xFFF
 13863                           tosh	equ	0xFFE
 13864                           tosl	equ	0xFFD
 13865                           pclath	equ	0xFFA
 13866                           tblptru	equ	0xFF8
 13867                           tblptrh	equ	0xFF7
 13868                           tblptrl	equ	0xFF6
 13869                           tablat	equ	0xFF5
 13870                           prodh	equ	0xFF4
 13871                           prodl	equ	0xFF3
 13872                           intcon	equ	0xFF2
 13873                           intcon2	equ	0xFF1
 13874                           postinc0	equ	0xFEE
 13875                           plusw0	equ	0xFEB
 13876                           wreg	equ	0xFE8
 13877                           indf1	equ	0xFE7
 13878                           postdec1	equ	0xFE5
 13879                           fsr1h	equ	0xFE2
 13880                           fsr1l	equ	0xFE1
 13881                           indf2	equ	0xFDF
 13882                           postinc2	equ	0xFDE
 13883                           postdec2	equ	0xFDD
 13884                           plusw2	equ	0xFDB
 13885                           fsr2h	equ	0xFDA
 13886                           fsr2l	equ	0xFD9
 13887                           status	equ	0xFD8
 13888                           
 13889 ;; *************** function _ldexp *****************
 13890 ;; Defined at:
 13891 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 13892 ;; Parameters:    Size  Location     Type
 13893 ;;  value           3   48[BANK0 ] unsigned char 
 13894 ;;  newexp          2   51[BANK0 ] int 
 13895 ;; Auto vars:     Size  Location     Type
 13896 ;;		None
 13897 ;; Return value:  Size  Location     Type
 13898 ;;                  3   48[BANK0 ] int 
 13899 ;; Registers used:
 13900 ;;		wreg, status,2, status,0
 13901 ;; Tracked objects:
 13902 ;;		On entry : 0/0
 13903 ;;		On exit  : 0/0
 13904 ;;		Unchanged: 0/0
 13905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13906 ;;      Params:         0       5       0       0       0       0       0
 13907 ;;      Locals:         0       0       0       0       0       0       0
 13908 ;;      Temps:          0       2       0       0       0       0       0
 13909 ;;      Totals:         0       7       0       0       0       0       0
 13910 ;;Total ram usage:        7 bytes
 13911 ;; Hardware stack levels used:    1
 13912 ;; Hardware stack levels required when called:    3
 13913 ;; This function calls:
 13914 ;;		Nothing
 13915 ;; This function is called by:
 13916 ;;		_exp
 13917 ;; This function uses a non-reentrant model
 13918 ;;
 13919                           
 13920                           	psect	text90
 13921  002060                     __ptext90:
 13922                           	opt stack 0
 13923  002060                     _ldexp:
 13924                           	opt stack 22
 13925                           
 13926                           ;incstack = 0
 13927  002060  0100               	movlb	0	; () banked
 13928  002062  5190               	movf	ldexp@value& (0+255),w,b
 13929  002064  1191               	iorwf	(ldexp@value+1)& (0+255),w,b
 13930  002066  1192               	iorwf	(ldexp@value+2)& (0+255),w,b
 13931  002068  A4D8               	btfss	status,2,c
 13932  00206A  D007               	goto	l2127
 13933                           
 13934                           ; BSR set to: 0
 13935  00206C  0E00               	movlw	0
 13936  00206E  6F90               	movwf	?_ldexp& (0+255),b
 13937  002070  0E00               	movlw	0
 13938  002072  6F91               	movwf	(?_ldexp+1)& (0+255),b
 13939  002074  0E00               	movlw	0
 13940  002076  6F92               	movwf	(?_ldexp+2)& (0+255),b
 13941                           
 13942                           ; BSR set to: 0
 13943  002078  0012               	return	
 13944  00207A                     l2127:
 13945                           
 13946                           ; BSR set to: 0
 13947                           
 13948                           ; BSR set to: 0
 13949  00207A  5192               	movf	(ldexp@value+2)& (0+255),w,b
 13950  00207C  0B7F               	andlw	127
 13951  00207E  6F95               	movwf	??_ldexp& (0+255),b
 13952  002080  6B96               	clrf	(??_ldexp+1)& (0+255),b
 13953  002082  90D8               	bcf	status,0,c
 13954  002084  3795               	rlcf	??_ldexp& (0+255),f,b
 13955  002086  3796               	rlcf	(??_ldexp+1)& (0+255),f,b
 13956  002088  5195               	movf	??_ldexp& (0+255),w,b
 13957  00208A  2793               	addwf	ldexp@newexp& (0+255),f,b
 13958  00208C  5196               	movf	(??_ldexp+1)& (0+255),w,b
 13959  00208E  2394               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 13960  002090  AF91               	btfss	(ldexp@value+1)& (0+255),7,b
 13961  002092  D003               	goto	u7010
 13962  002094  6B95               	clrf	??_ldexp& (0+255),b
 13963  002096  2B95               	incf	??_ldexp& (0+255),f,b
 13964  002098  D002               	goto	u7018
 13965  00209A                     u7010:
 13966  00209A  0100               	movlb	0	; () banked
 13967  00209C  6B95               	clrf	??_ldexp& (0+255),b
 13968  00209E                     u7018:
 13969  00209E  5195               	movf	??_ldexp& (0+255),w,b
 13970  0020A0  2793               	addwf	ldexp@newexp& (0+255),f,b
 13971  0020A2  0E00               	movlw	0
 13972  0020A4  2394               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 13973  0020A6  AF94               	btfss	(ldexp@newexp+1)& (0+255),7,b
 13974  0020A8  D00B               	goto	l2129
 13975                           
 13976                           ; BSR set to: 0
 13977  0020AA  0E00               	movlw	0
 13978  0020AC  6FC5               	movwf	(_errno+1)& (0+255),b
 13979  0020AE  0E22               	movlw	34
 13980  0020B0  6FC4               	movwf	_errno& (0+255),b
 13981  0020B2  0E00               	movlw	0
 13982  0020B4  6F90               	movwf	?_ldexp& (0+255),b
 13983  0020B6  0E00               	movlw	0
 13984  0020B8  6F91               	movwf	(?_ldexp+1)& (0+255),b
 13985  0020BA  0E00               	movlw	0
 13986  0020BC                     L2:
 13987  0020BC  6F92               	movwf	(?_ldexp+2)& (0+255),b
 13988                           
 13989                           ; BSR set to: 0
 13990  0020BE  0012               	return	
 13991  0020C0                     l2129:
 13992                           
 13993                           ; BSR set to: 0
 13994                           
 13995                           ; BSR set to: 0
 13996  0020C0  BF94               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 13997  0020C2  D015               	goto	l2131
 13998  0020C4  0594               	decf	(ldexp@newexp+1)& (0+255),w,b
 13999  0020C6  A0D8               	btfss	status,0,c
 14000  0020C8  D012               	goto	l2131
 14001                           
 14002                           ; BSR set to: 0
 14003  0020CA  0E00               	movlw	0
 14004  0020CC  6FC5               	movwf	(_errno+1)& (0+255),b
 14005  0020CE  0E22               	movlw	34
 14006  0020D0  6FC4               	movwf	_errno& (0+255),b
 14007                           
 14008                           ; BSR set to: 0
 14009  0020D2  AF92               	btfss	(ldexp@value+2)& (0+255),7,b
 14010  0020D4  D006               	goto	l2132
 14011                           
 14012                           ; BSR set to: 0
 14013  0020D6  0EFF               	movlw	255
 14014  0020D8  6F90               	movwf	?_ldexp& (0+255),b
 14015  0020DA  0E7F               	movlw	127
 14016  0020DC  6F91               	movwf	(?_ldexp+1)& (0+255),b
 14017  0020DE  0EFF               	movlw	255
 14018  0020E0  D7ED               	goto	L2
 14019  0020E2                     l2132:
 14020                           
 14021                           ; BSR set to: 0
 14022                           
 14023                           ; BSR set to: 0
 14024  0020E2  0EFF               	movlw	255
 14025  0020E4  6F90               	movwf	?_ldexp& (0+255),b
 14026  0020E6  0E7F               	movlw	127
 14027  0020E8  6F91               	movwf	(?_ldexp+1)& (0+255),b
 14028  0020EA  0E7F               	movlw	127
 14029  0020EC  D7E7               	goto	L2
 14030  0020EE                     l2131:
 14031                           
 14032                           ; BSR set to: 0
 14033                           
 14034                           ; BSR set to: 0
 14035  0020EE  3594               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 14036  0020F0  3194               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 14037  0020F2  6F96               	movwf	(??_ldexp+1)& (0+255),b
 14038  0020F4  3193               	rrcf	ldexp@newexp& (0+255),w,b
 14039  0020F6  6F95               	movwf	??_ldexp& (0+255),b
 14040  0020F8  5192               	movf	(ldexp@value+2)& (0+255),w,b
 14041  0020FA  1995               	xorwf	??_ldexp& (0+255),w,b
 14042  0020FC  0B80               	andlw	-128
 14043  0020FE  1995               	xorwf	??_ldexp& (0+255),w,b
 14044  002100  6F92               	movwf	(ldexp@value+2)& (0+255),b
 14045  002102  C093  F095         	movff	ldexp@newexp,??_ldexp
 14046  002106  0E01               	movlw	1
 14047  002108  1795               	andwf	??_ldexp& (0+255),f,b
 14048  00210A  3395               	rrcf	??_ldexp& (0+255),f,b
 14049  00210C  3395               	rrcf	??_ldexp& (0+255),f,b
 14050  00210E  5191               	movf	(ldexp@value+1)& (0+255),w,b
 14051  002110  1995               	xorwf	??_ldexp& (0+255),w,b
 14052  002112  0B7F               	andlw	-129
 14053  002114  1995               	xorwf	??_ldexp& (0+255),w,b
 14054  002116  6F91               	movwf	(ldexp@value+1)& (0+255),b
 14055                           
 14056                           ; BSR set to: 0
 14057                           
 14058                           ; BSR set to: 0
 14059                           
 14060                           ; BSR set to: 0
 14061  002118  C090  F090         	movff	ldexp@value,?_ldexp
 14062  00211C  C091  F091         	movff	ldexp@value+1,?_ldexp+1
 14063  002120  C092  F092         	movff	ldexp@value+2,?_ldexp+2
 14064  002124  0012               	return	
 14065  002126                     __end_of_ldexp:
 14066                           	opt stack 0
 14067                           tosu	equ	0xFFF
 14068                           tosh	equ	0xFFE
 14069                           tosl	equ	0xFFD
 14070                           pclath	equ	0xFFA
 14071                           tblptru	equ	0xFF8
 14072                           tblptrh	equ	0xFF7
 14073                           tblptrl	equ	0xFF6
 14074                           tablat	equ	0xFF5
 14075                           prodh	equ	0xFF4
 14076                           prodl	equ	0xFF3
 14077                           intcon	equ	0xFF2
 14078                           intcon2	equ	0xFF1
 14079                           postinc0	equ	0xFEE
 14080                           plusw0	equ	0xFEB
 14081                           wreg	equ	0xFE8
 14082                           indf1	equ	0xFE7
 14083                           postdec1	equ	0xFE5
 14084                           fsr1h	equ	0xFE2
 14085                           fsr1l	equ	0xFE1
 14086                           indf2	equ	0xFDF
 14087                           postinc2	equ	0xFDE
 14088                           postdec2	equ	0xFDD
 14089                           plusw2	equ	0xFDB
 14090                           fsr2h	equ	0xFDA
 14091                           fsr2l	equ	0xFD9
 14092                           status	equ	0xFD8
 14093                           
 14094 ;; *************** function _floor *****************
 14095 ;; Defined at:
 14096 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 14097 ;; Parameters:    Size  Location     Type
 14098 ;;  x               3   49[BANK0 ] int 
 14099 ;; Auto vars:     Size  Location     Type
 14100 ;;  i               3   52[BANK0 ] int 
 14101 ;;  expon           2   55[BANK0 ] int 
 14102 ;; Return value:  Size  Location     Type
 14103 ;;                  3   49[BANK0 ] int 
 14104 ;; Registers used:
 14105 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14106 ;; Tracked objects:
 14107 ;;		On entry : 0/0
 14108 ;;		On exit  : 0/0
 14109 ;;		Unchanged: 0/0
 14110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14111 ;;      Params:         0       3       0       0       0       0       0
 14112 ;;      Locals:         0       5       0       0       0       0       0
 14113 ;;      Temps:          0       0       0       0       0       0       0
 14114 ;;      Totals:         0       8       0       0       0       0       0
 14115 ;;Total ram usage:        8 bytes
 14116 ;; Hardware stack levels used:    1
 14117 ;; Hardware stack levels required when called:    5
 14118 ;; This function calls:
 14119 ;;		___altoft
 14120 ;;		___ftadd
 14121 ;;		___ftge
 14122 ;;		___fttol
 14123 ;;		_frexp
 14124 ;; This function is called by:
 14125 ;;		_exp
 14126 ;; This function uses a non-reentrant model
 14127 ;;
 14128                           
 14129                           	psect	text91
 14130  001EA4                     __ptext91:
 14131                           	opt stack 0
 14132  001EA4                     _floor:
 14133                           	opt stack 20
 14134                           
 14135                           ; BSR set to: 0
 14136                           ;incstack = 0
 14137  001EA4  C091  F018         	movff	floor@x,frexp@value
 14138  001EA8  C092  F019         	movff	floor@x+1,frexp@value+1
 14139  001EAC  C093  F01A         	movff	floor@x+2,frexp@value+2
 14140  001EB0  0E97               	movlw	low floor@expon
 14141  001EB2  6E1B               	movwf	frexp@eptr,c
 14142  001EB4  0E00               	movlw	high floor@expon
 14143  001EB6  6E1C               	movwf	frexp@eptr+1,c
 14144  001EB8  ECBE  F013         	call	_frexp	;wreg free
 14145  001EBC  0100               	movlb	0	; () banked
 14146  001EBE  AF98               	btfss	(floor@expon+1)& (0+255),7,b
 14147  001EC0  D010               	goto	l2114
 14148                           
 14149                           ; BSR set to: 0
 14150  001EC2  AF93               	btfss	(floor@x+2)& (0+255),7,b
 14151  001EC4  D007               	goto	l2115
 14152                           
 14153                           ; BSR set to: 0
 14154  001EC6  0E00               	movlw	0
 14155  001EC8  6F91               	movwf	?_floor& (0+255),b
 14156  001ECA  0E80               	movlw	128
 14157  001ECC  6F92               	movwf	(?_floor+1)& (0+255),b
 14158  001ECE  0EBF               	movlw	191
 14159  001ED0  6F93               	movwf	(?_floor+2)& (0+255),b
 14160                           
 14161                           ; BSR set to: 0
 14162  001ED2  0012               	return	
 14163  001ED4                     l2115:
 14164                           
 14165                           ; BSR set to: 0
 14166                           
 14167                           ; BSR set to: 0
 14168  001ED4  0E00               	movlw	0
 14169  001ED6  6F91               	movwf	?_floor& (0+255),b
 14170  001ED8  0E00               	movlw	0
 14171  001EDA  6F92               	movwf	(?_floor+1)& (0+255),b
 14172  001EDC  0E00               	movlw	0
 14173  001EDE  6F93               	movwf	(?_floor+2)& (0+255),b
 14174                           
 14175                           ; BSR set to: 0
 14176  001EE0  0012               	return	
 14177  001EE2                     l2114:
 14178                           
 14179                           ; BSR set to: 0
 14180                           
 14181                           ; BSR set to: 0
 14182  001EE2  5198               	movf	(floor@expon+1)& (0+255),w,b
 14183  001EE4  E104               	bnz	u6970
 14184  001EE6  0E15               	movlw	21
 14185  001EE8  5D97               	subwf	floor@expon& (0+255),w,b
 14186  001EEA  A0D8               	btfss	status,0,c
 14187  001EEC  D007               	goto	l2117
 14188  001EEE                     u6970:
 14189                           
 14190                           ; BSR set to: 0
 14191  001EEE  C091  F091         	movff	floor@x,?_floor
 14192  001EF2  C092  F092         	movff	floor@x+1,?_floor+1
 14193  001EF6  C093  F093         	movff	floor@x+2,?_floor+2
 14194  001EFA  0012               	return	
 14195  001EFC                     l2117:
 14196                           
 14197                           ; BSR set to: 0
 14198                           
 14199                           ; BSR set to: 0
 14200  001EFC  C091  F078         	movff	floor@x,___fttol@f1
 14201  001F00  C092  F079         	movff	floor@x+1,___fttol@f1+1
 14202  001F04  C093  F07A         	movff	floor@x+2,___fttol@f1+2
 14203  001F08  EC75  F00D         	call	___fttol	;wreg free
 14204  001F0C  C078  F087         	movff	?___fttol,___altoft@c
 14205  001F10  C079  F088         	movff	?___fttol+1,___altoft@c+1
 14206  001F14  C07A  F089         	movff	?___fttol+2,___altoft@c+2
 14207  001F18  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
 14208  001F1C  EC8F  F014         	call	___altoft	;wreg free
 14209  001F20  C087  F094         	movff	?___altoft,floor@i
 14210  001F24  C088  F095         	movff	?___altoft+1,floor@i+1
 14211  001F28  C089  F096         	movff	?___altoft+2,floor@i+2
 14212  001F2C  C091  F018         	movff	floor@x,___ftge@ff1
 14213  001F30  C092  F019         	movff	floor@x+1,___ftge@ff1+1
 14214  001F34  C093  F01A         	movff	floor@x+2,___ftge@ff1+2
 14215  001F38  C094  F01B         	movff	floor@i,___ftge@ff2
 14216  001F3C  C095  F01C         	movff	floor@i+1,___ftge@ff2+1
 14217  001F40  C096  F01D         	movff	floor@i+2,___ftge@ff2+2
 14218  001F44  EC06  F014         	call	___ftge	;wreg free
 14219  001F48  B0D8               	btfsc	status,0,c
 14220  001F4A  D016               	goto	l2118
 14221  001F4C  C094  F078         	movff	floor@i,___ftadd@f1
 14222  001F50  C095  F079         	movff	floor@i+1,___ftadd@f1+1
 14223  001F54  C096  F07A         	movff	floor@i+2,___ftadd@f1+2
 14224  001F58  0E00               	movlw	0
 14225  001F5A  0100               	movlb	0	; () banked
 14226  001F5C  6F7B               	movwf	___ftadd@f2& (0+255),b
 14227  001F5E  0E80               	movlw	128
 14228  001F60  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 14229  001F62  0EBF               	movlw	191
 14230  001F64  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 14231  001F66  ECF0  F008         	call	___ftadd	;wreg free
 14232  001F6A  C078  F091         	movff	?___ftadd,?_floor
 14233  001F6E  C079  F092         	movff	?___ftadd+1,?_floor+1
 14234  001F72  C07A  F093         	movff	?___ftadd+2,?_floor+2
 14235  001F76  0012               	return	
 14236  001F78                     l2118:
 14237  001F78  C094  F091         	movff	floor@i,?_floor
 14238  001F7C  C095  F092         	movff	floor@i+1,?_floor+1
 14239  001F80  C096  F093         	movff	floor@i+2,?_floor+2
 14240  001F84  0012               	return		;funcret
 14241  001F86                     __end_of_floor:
 14242                           	opt stack 0
 14243                           tosu	equ	0xFFF
 14244                           tosh	equ	0xFFE
 14245                           tosl	equ	0xFFD
 14246                           pclath	equ	0xFFA
 14247                           tblptru	equ	0xFF8
 14248                           tblptrh	equ	0xFF7
 14249                           tblptrl	equ	0xFF6
 14250                           tablat	equ	0xFF5
 14251                           prodh	equ	0xFF4
 14252                           prodl	equ	0xFF3
 14253                           intcon	equ	0xFF2
 14254                           intcon2	equ	0xFF1
 14255                           postinc0	equ	0xFEE
 14256                           plusw0	equ	0xFEB
 14257                           wreg	equ	0xFE8
 14258                           indf1	equ	0xFE7
 14259                           postdec1	equ	0xFE5
 14260                           fsr1h	equ	0xFE2
 14261                           fsr1l	equ	0xFE1
 14262                           indf2	equ	0xFDF
 14263                           postinc2	equ	0xFDE
 14264                           postdec2	equ	0xFDD
 14265                           plusw2	equ	0xFDB
 14266                           fsr2h	equ	0xFDA
 14267                           fsr2l	equ	0xFD9
 14268                           status	equ	0xFD8
 14269                           
 14270 ;; *************** function _frexp *****************
 14271 ;; Defined at:
 14272 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 14273 ;; Parameters:    Size  Location     Type
 14274 ;;  value           3   23[COMRAM] int 
 14275 ;;  eptr            2   26[COMRAM] PTR int 
 14276 ;;		 -> log@exponent(2), floor@expon(2), 
 14277 ;; Auto vars:     Size  Location     Type
 14278 ;;		None
 14279 ;; Return value:  Size  Location     Type
 14280 ;;                  3   23[COMRAM] PTR int 
 14281 ;; Registers used:
 14282 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14283 ;; Tracked objects:
 14284 ;;		On entry : 0/0
 14285 ;;		On exit  : 0/0
 14286 ;;		Unchanged: 0/0
 14287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14288 ;;      Params:         5       0       0       0       0       0       0
 14289 ;;      Locals:         0       0       0       0       0       0       0
 14290 ;;      Temps:          2       0       0       0       0       0       0
 14291 ;;      Totals:         7       0       0       0       0       0       0
 14292 ;;Total ram usage:        7 bytes
 14293 ;; Hardware stack levels used:    1
 14294 ;; Hardware stack levels required when called:    3
 14295 ;; This function calls:
 14296 ;;		Nothing
 14297 ;; This function is called by:
 14298 ;;		_floor
 14299 ;;		_log
 14300 ;; This function uses a non-reentrant model
 14301 ;;
 14302                           
 14303                           	psect	text92
 14304  00277C                     __ptext92:
 14305                           	opt stack 0
 14306  00277C                     _frexp:
 14307                           	opt stack 22
 14308                           
 14309                           ;incstack = 0
 14310  00277C  5018               	movf	frexp@value,w,c
 14311  00277E  1019               	iorwf	frexp@value+1,w,c
 14312  002780  101A               	iorwf	frexp@value+2,w,c
 14313  002782  A4D8               	btfss	status,2,c
 14314  002784  D00F               	goto	l2123
 14315  002786  C01B  FFD9         	movff	frexp@eptr,fsr2l
 14316  00278A  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 14317  00278E  0E00               	movlw	0
 14318  002790  6EDE               	movwf	postinc2,c
 14319  002792  0E00               	movlw	0
 14320  002794  6EDD               	movwf	postdec2,c
 14321  002796  0E00               	movlw	0
 14322  002798  6E18               	movwf	?_frexp,c
 14323  00279A  0E00               	movlw	0
 14324  00279C  6E19               	movwf	?_frexp+1,c
 14325  00279E  0E00               	movlw	0
 14326  0027A0  6E1A               	movwf	?_frexp+2,c
 14327  0027A2  0012               	return	
 14328  0027A4                     l2123:
 14329  0027A4  501A               	movf	frexp@value+2,w,c
 14330  0027A6  0B7F               	andlw	127
 14331  0027A8  6E1D               	movwf	??_frexp& (0+255),c
 14332  0027AA  6A1E               	clrf	(??_frexp+1)& (0+255),c
 14333  0027AC  90D8               	bcf	status,0,c
 14334  0027AE  361D               	rlcf	??_frexp,f,c
 14335  0027B0  361E               	rlcf	??_frexp+1,f,c
 14336  0027B2  C01B  FFD9         	movff	frexp@eptr,fsr2l
 14337  0027B6  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 14338  0027BA  C01D  FFDE         	movff	??_frexp,postinc2
 14339  0027BE  C01E  FFDD         	movff	??_frexp+1,postdec2
 14340  0027C2  AE19               	btfss	frexp@value+1,7,c
 14341  0027C4  D003               	goto	u6570
 14342  0027C6  6A1D               	clrf	??_frexp& (0+255),c
 14343  0027C8  2A1D               	incf	??_frexp& (0+255),f,c
 14344  0027CA  D001               	goto	u6578
 14345  0027CC                     u6570:
 14346  0027CC  6A1D               	clrf	??_frexp& (0+255),c
 14347  0027CE                     u6578:
 14348  0027CE  501D               	movf	??_frexp,w,c
 14349  0027D0  C01B  FFD9         	movff	frexp@eptr,fsr2l
 14350  0027D4  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 14351  0027D8  12DE               	iorwf	postinc2,f,c
 14352  0027DA  0E00               	movlw	0
 14353  0027DC  12DD               	iorwf	postdec2,f,c
 14354  0027DE  C01B  FFD9         	movff	frexp@eptr,fsr2l
 14355  0027E2  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 14356  0027E6  0E82               	movlw	130
 14357  0027E8  26DE               	addwf	postinc2,f,c
 14358  0027EA  0EFF               	movlw	255
 14359  0027EC  22DD               	addwfc	postdec2,f,c
 14360  0027EE  801A               	bsf	frexp@value+2,0,c
 14361  0027F0  821A               	bsf	frexp@value+2,1,c
 14362  0027F2  841A               	bsf	frexp@value+2,2,c
 14363  0027F4  861A               	bsf	frexp@value+2,3,c
 14364  0027F6  881A               	bsf	frexp@value+2,4,c
 14365  0027F8  8A1A               	bsf	frexp@value+2,5,c
 14366  0027FA  9C1A               	bcf	frexp@value+2,6,c
 14367  0027FC  9E19               	bcf	frexp@value+1,7,c
 14368  0027FE  C018  F018         	movff	frexp@value,?_frexp
 14369  002802  C019  F019         	movff	frexp@value+1,?_frexp+1
 14370  002806  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 14371  00280A  0012               	return	
 14372  00280C                     __end_of_frexp:
 14373                           	opt stack 0
 14374                           tosu	equ	0xFFF
 14375                           tosh	equ	0xFFE
 14376                           tosl	equ	0xFFD
 14377                           pclath	equ	0xFFA
 14378                           tblptru	equ	0xFF8
 14379                           tblptrh	equ	0xFF7
 14380                           tblptrl	equ	0xFF6
 14381                           tablat	equ	0xFF5
 14382                           prodh	equ	0xFF4
 14383                           prodl	equ	0xFF3
 14384                           intcon	equ	0xFF2
 14385                           intcon2	equ	0xFF1
 14386                           postinc0	equ	0xFEE
 14387                           plusw0	equ	0xFEB
 14388                           wreg	equ	0xFE8
 14389                           indf1	equ	0xFE7
 14390                           postdec1	equ	0xFE5
 14391                           fsr1h	equ	0xFE2
 14392                           fsr1l	equ	0xFE1
 14393                           indf2	equ	0xFDF
 14394                           postinc2	equ	0xFDE
 14395                           postdec2	equ	0xFDD
 14396                           plusw2	equ	0xFDB
 14397                           fsr2h	equ	0xFDA
 14398                           fsr2l	equ	0xFD9
 14399                           status	equ	0xFD8
 14400                           
 14401 ;; *************** function ___fttol *****************
 14402 ;; Defined at:
 14403 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 14404 ;; Parameters:    Size  Location     Type
 14405 ;;  f1              3   24[BANK0 ] float 
 14406 ;; Auto vars:     Size  Location     Type
 14407 ;;  lval            4   34[BANK0 ] unsigned long 
 14408 ;;  exp1            1   38[BANK0 ] unsigned char 
 14409 ;;  sign1           1   33[BANK0 ] unsigned char 
 14410 ;; Return value:  Size  Location     Type
 14411 ;;                  4   24[BANK0 ] long 
 14412 ;; Registers used:
 14413 ;;		wreg, status,2, status,0
 14414 ;; Tracked objects:
 14415 ;;		On entry : 0/0
 14416 ;;		On exit  : 0/0
 14417 ;;		Unchanged: 0/0
 14418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14419 ;;      Params:         0       4       0       0       0       0       0
 14420 ;;      Locals:         0       6       0       0       0       0       0
 14421 ;;      Temps:          0       5       0       0       0       0       0
 14422 ;;      Totals:         0      15       0       0       0       0       0
 14423 ;;Total ram usage:       15 bytes
 14424 ;; Hardware stack levels used:    1
 14425 ;; Hardware stack levels required when called:    3
 14426 ;; This function calls:
 14427 ;;		Nothing
 14428 ;; This function is called by:
 14429 ;;		_AdcConvert
 14430 ;;		_ReadIntFromEeprom
 14431 ;;		_pow
 14432 ;;		_exp
 14433 ;;		_floor
 14434 ;; This function uses a non-reentrant model
 14435 ;;
 14436                           
 14437                           	psect	text93
 14438  001AEA                     __ptext93:
 14439                           	opt stack 0
 14440  001AEA                     ___fttol:
 14441                           	opt stack 21
 14442                           
 14443                           ;incstack = 0
 14444  001AEA  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 14445  001AEE  0100               	movlb	0	; () banked
 14446  001AF0  6B7D               	clrf	(??___fttol+1)& (0+255),b
 14447  001AF2  6B7E               	clrf	(??___fttol+2)& (0+255),b
 14448  001AF4  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 14449  001AF6  377C               	rlcf	??___fttol& (0+255),f,b
 14450  001AF8  E301               	bnc	u6481
 14451  001AFA  817D               	bsf	(??___fttol+1)& (0+255),0,b
 14452  001AFC                     u6481:
 14453  001AFC  517C               	movf	??___fttol& (0+255),w,b
 14454  001AFE  6F86               	movwf	___fttol@exp1& (0+255),b
 14455  001B00  5186               	movf	___fttol@exp1& (0+255),w,b
 14456  001B02  A4D8               	btfss	status,2,c
 14457  001B04  D009               	goto	l1780
 14458                           
 14459                           ; BSR set to: 0
 14460  001B06  0E00               	movlw	0
 14461  001B08  6F78               	movwf	?___fttol& (0+255),b
 14462  001B0A  0E00               	movlw	0
 14463  001B0C  6F79               	movwf	(?___fttol+1)& (0+255),b
 14464  001B0E  0E00               	movlw	0
 14465  001B10  6F7A               	movwf	(?___fttol+2)& (0+255),b
 14466  001B12  0E00               	movlw	0
 14467  001B14  6F7B               	movwf	(?___fttol+3)& (0+255),b
 14468                           
 14469                           ; BSR set to: 0
 14470  001B16  0012               	return	
 14471  001B18                     l1780:
 14472                           
 14473                           ; BSR set to: 0
 14474                           
 14475                           ; BSR set to: 0
 14476  001B18  0E17               	movlw	23
 14477  001B1A  6F7C               	movwf	??___fttol& (0+255),b
 14478  001B1C  C078  F07D         	movff	___fttol@f1,??___fttol+1
 14479  001B20  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 14480  001B24  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 14481  001B28  297C               	incf	??___fttol& (0+255),w,b
 14482  001B2A  6F80               	movwf	(??___fttol+4)& (0+255),b
 14483  001B2C  D004               	goto	u6500
 14484  001B2E                     u6505:
 14485  001B2E  90D8               	bcf	status,0,c
 14486  001B30  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 14487  001B32  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 14488  001B34  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 14489  001B36                     u6500:
 14490  001B36  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 14491  001B38  D7FA               	goto	u6505
 14492  001B3A  0100               	movlb	0	; () banked
 14493  001B3C  517D               	movf	(??___fttol+1)& (0+255),w,b
 14494  001B3E  6F81               	movwf	___fttol@sign1& (0+255),b
 14495                           
 14496                           ; BSR set to: 0
 14497  001B40  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 14498                           
 14499                           ; BSR set to: 0
 14500  001B42  0EFF               	movlw	255
 14501  001B44  1778               	andwf	___fttol@f1& (0+255),f,b
 14502  001B46  0EFF               	movlw	255
 14503  001B48  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 14504  001B4A  0E00               	movlw	0
 14505  001B4C  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 14506                           
 14507                           ; BSR set to: 0
 14508  001B4E  5178               	movf	___fttol@f1& (0+255),w,b
 14509  001B50  6F82               	movwf	___fttol@lval& (0+255),b
 14510  001B52  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 14511  001B54  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 14512  001B56  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 14513  001B58  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 14514  001B5A  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 14515                           
 14516                           ; BSR set to: 0
 14517  001B5C  0E8E               	movlw	142
 14518  001B5E  5F86               	subwf	___fttol@exp1& (0+255),f,b
 14519                           
 14520                           ; BSR set to: 0
 14521  001B60  AF86               	btfss	___fttol@exp1& (0+255),7,b
 14522  001B62  D016               	goto	l1782
 14523                           
 14524                           ; BSR set to: 0
 14525  001B64  5186               	movf	___fttol@exp1& (0+255),w,b
 14526  001B66  0A80               	xorlw	128
 14527  001B68  0F8F               	addlw	143
 14528  001B6A  B0D8               	btfsc	status,0,c
 14529  001B6C  D009               	goto	l1783
 14530                           
 14531                           ; BSR set to: 0
 14532  001B6E  0E00               	movlw	0
 14533  001B70  6F78               	movwf	?___fttol& (0+255),b
 14534  001B72  0E00               	movlw	0
 14535  001B74  6F79               	movwf	(?___fttol+1)& (0+255),b
 14536  001B76  0E00               	movlw	0
 14537  001B78  6F7A               	movwf	(?___fttol+2)& (0+255),b
 14538  001B7A  0E00               	movlw	0
 14539  001B7C  6F7B               	movwf	(?___fttol+3)& (0+255),b
 14540                           
 14541                           ; BSR set to: 0
 14542  001B7E  0012               	return	
 14543  001B80                     l1783:
 14544                           
 14545                           ; BSR set to: 0
 14546                           
 14547                           ; BSR set to: 0
 14548                           
 14549                           ; BSR set to: 0
 14550  001B80  90D8               	bcf	status,0,c
 14551  001B82  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 14552  001B84  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 14553  001B86  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 14554  001B88  3382               	rrcf	___fttol@lval& (0+255),f,b
 14555                           
 14556                           ; BSR set to: 0
 14557  001B8A  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 14558  001B8C  D7F9               	goto	l1783
 14559                           
 14560                           ; BSR set to: 0
 14561  001B8E  D015               	goto	u6540
 14562  001B90                     l1782:
 14563                           
 14564                           ; BSR set to: 0
 14565                           
 14566                           ; BSR set to: 0
 14567  001B90  0E17               	movlw	23
 14568  001B92  6586               	cpfsgt	___fttol@exp1& (0+255),b
 14569  001B94  D00F               	goto	l1788
 14570                           
 14571                           ; BSR set to: 0
 14572  001B96  0E00               	movlw	0
 14573  001B98  6F78               	movwf	?___fttol& (0+255),b
 14574  001B9A  0E00               	movlw	0
 14575  001B9C  6F79               	movwf	(?___fttol+1)& (0+255),b
 14576  001B9E  0E00               	movlw	0
 14577  001BA0  6F7A               	movwf	(?___fttol+2)& (0+255),b
 14578  001BA2  0E00               	movlw	0
 14579  001BA4  6F7B               	movwf	(?___fttol+3)& (0+255),b
 14580                           
 14581                           ; BSR set to: 0
 14582  001BA6  0012               	return	
 14583  001BA8                     
 14584                           ; BSR set to: 0
 14585                           
 14586                           ; BSR set to: 0
 14587  001BA8  90D8               	bcf	status,0,c
 14588  001BAA  3782               	rlcf	___fttol@lval& (0+255),f,b
 14589  001BAC  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 14590  001BAE  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 14591  001BB0  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 14592  001BB2  0786               	decf	___fttol@exp1& (0+255),f,b
 14593  001BB4                     l1788:
 14594                           
 14595                           ; BSR set to: 0
 14596                           
 14597                           ; BSR set to: 0
 14598  001BB4  5186               	movf	___fttol@exp1& (0+255),w,b
 14599  001BB6  A4D8               	btfss	status,2,c
 14600  001BB8  D7F7               	goto	l1789
 14601  001BBA                     u6540:
 14602                           
 14603                           ; BSR set to: 0
 14604                           
 14605                           ; BSR set to: 0
 14606                           
 14607                           ; BSR set to: 0
 14608  001BBA  5181               	movf	___fttol@sign1& (0+255),w,b
 14609  001BBC  B4D8               	btfsc	status,2,c
 14610  001BBE  D008               	goto	l1791
 14611                           
 14612                           ; BSR set to: 0
 14613  001BC0  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 14614  001BC2  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 14615  001BC4  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 14616  001BC6  6D82               	negf	___fttol@lval& (0+255),b
 14617  001BC8  0E00               	movlw	0
 14618  001BCA  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 14619  001BCC  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 14620  001BCE  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 14621  001BD0                     l1791:
 14622                           
 14623                           ; BSR set to: 0
 14624                           
 14625                           ; BSR set to: 0
 14626  001BD0  C082  F078         	movff	___fttol@lval,?___fttol
 14627  001BD4  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 14628  001BD8  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 14629  001BDC  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 14630  001BE0  0012               	return	
 14631  001BE2                     __end_of___fttol:
 14632                           	opt stack 0
 14633                           tosu	equ	0xFFF
 14634                           tosh	equ	0xFFE
 14635                           tosl	equ	0xFFD
 14636                           pclath	equ	0xFFA
 14637                           tblptru	equ	0xFF8
 14638                           tblptrh	equ	0xFF7
 14639                           tblptrl	equ	0xFF6
 14640                           tablat	equ	0xFF5
 14641                           prodh	equ	0xFF4
 14642                           prodl	equ	0xFF3
 14643                           intcon	equ	0xFF2
 14644                           intcon2	equ	0xFF1
 14645                           postinc0	equ	0xFEE
 14646                           plusw0	equ	0xFEB
 14647                           wreg	equ	0xFE8
 14648                           indf1	equ	0xFE7
 14649                           postdec1	equ	0xFE5
 14650                           fsr1h	equ	0xFE2
 14651                           fsr1l	equ	0xFE1
 14652                           indf2	equ	0xFDF
 14653                           postinc2	equ	0xFDE
 14654                           postdec2	equ	0xFDD
 14655                           plusw2	equ	0xFDB
 14656                           fsr2h	equ	0xFDA
 14657                           fsr2l	equ	0xFD9
 14658                           status	equ	0xFD8
 14659                           
 14660 ;; *************** function ___ftge *****************
 14661 ;; Defined at:
 14662 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 14663 ;; Parameters:    Size  Location     Type
 14664 ;;  ff1             3   23[COMRAM] float 
 14665 ;;  ff2             3   26[COMRAM] float 
 14666 ;; Auto vars:     Size  Location     Type
 14667 ;;		None
 14668 ;; Return value:  Size  Location     Type
 14669 ;;		None               void
 14670 ;; Registers used:
 14671 ;;		wreg, status,2, status,0
 14672 ;; Tracked objects:
 14673 ;;		On entry : 0/0
 14674 ;;		On exit  : 0/0
 14675 ;;		Unchanged: 0/0
 14676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14677 ;;      Params:         6       0       0       0       0       0       0
 14678 ;;      Locals:         0       0       0       0       0       0       0
 14679 ;;      Temps:          3       0       0       0       0       0       0
 14680 ;;      Totals:         9       0       0       0       0       0       0
 14681 ;;Total ram usage:        9 bytes
 14682 ;; Hardware stack levels used:    1
 14683 ;; Hardware stack levels required when called:    3
 14684 ;; This function calls:
 14685 ;;		Nothing
 14686 ;; This function is called by:
 14687 ;;		_CheckFlashPrecentage
 14688 ;;		_pow
 14689 ;;		_exp
 14690 ;;		_floor
 14691 ;; This function uses a non-reentrant model
 14692 ;;
 14693                           
 14694                           	psect	text94
 14695  00280C                     __ptext94:
 14696                           	opt stack 0
 14697  00280C                     ___ftge:
 14698                           	opt stack 21
 14699                           
 14700                           ; BSR set to: 0
 14701                           ;incstack = 0
 14702  00280C  AE1A               	btfss	___ftge@ff1+2,7,c
 14703  00280E  D016               	goto	l1752
 14704  002810  C018  F01E         	movff	___ftge@ff1,??___ftge
 14705  002814  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 14706  002818  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 14707  00281C  1E1E               	comf	??___ftge,f,c
 14708  00281E  1E1F               	comf	??___ftge+1,f,c
 14709  002820  1E20               	comf	??___ftge+2,f,c
 14710  002822  2A1E               	incf	??___ftge,f,c
 14711  002824  0E00               	movlw	0
 14712  002826  221F               	addwfc	??___ftge+1,f,c
 14713  002828  2220               	addwfc	??___ftge+2,f,c
 14714  00282A  0E00               	movlw	0
 14715  00282C  241E               	addwf	??___ftge,w,c
 14716  00282E  6E18               	movwf	___ftge@ff1,c
 14717  002830  0E00               	movlw	0
 14718  002832  201F               	addwfc	??___ftge+1,w,c
 14719  002834  6E19               	movwf	___ftge@ff1+1,c
 14720  002836  0E80               	movlw	128
 14721  002838  2020               	addwfc	??___ftge+2,w,c
 14722  00283A  6E1A               	movwf	___ftge@ff1+2,c
 14723  00283C                     l1752:
 14724  00283C  AE1D               	btfss	___ftge@ff2+2,7,c
 14725  00283E  D016               	goto	l1753
 14726  002840  C01B  F01E         	movff	___ftge@ff2,??___ftge
 14727  002844  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 14728  002848  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 14729  00284C  1E1E               	comf	??___ftge,f,c
 14730  00284E  1E1F               	comf	??___ftge+1,f,c
 14731  002850  1E20               	comf	??___ftge+2,f,c
 14732  002852  2A1E               	incf	??___ftge,f,c
 14733  002854  0E00               	movlw	0
 14734  002856  221F               	addwfc	??___ftge+1,f,c
 14735  002858  2220               	addwfc	??___ftge+2,f,c
 14736  00285A  0E00               	movlw	0
 14737  00285C  241E               	addwf	??___ftge,w,c
 14738  00285E  6E1B               	movwf	___ftge@ff2,c
 14739  002860  0E00               	movlw	0
 14740  002862  201F               	addwfc	??___ftge+1,w,c
 14741  002864  6E1C               	movwf	___ftge@ff2+1,c
 14742  002866  0E80               	movlw	128
 14743  002868  2020               	addwfc	??___ftge+2,w,c
 14744  00286A  6E1D               	movwf	___ftge@ff2+2,c
 14745  00286C                     l1753:
 14746  00286C  0E00               	movlw	0
 14747  00286E  1A18               	xorwf	___ftge@ff1,f,c
 14748  002870  0E00               	movlw	0
 14749  002872  1A19               	xorwf	___ftge@ff1+1,f,c
 14750  002874  0E80               	movlw	128
 14751  002876  1A1A               	xorwf	___ftge@ff1+2,f,c
 14752  002878  0E00               	movlw	0
 14753  00287A  1A1B               	xorwf	___ftge@ff2,f,c
 14754  00287C  0E00               	movlw	0
 14755  00287E  1A1C               	xorwf	___ftge@ff2+1,f,c
 14756  002880  0E80               	movlw	128
 14757  002882  1A1D               	xorwf	___ftge@ff2+2,f,c
 14758  002884  501B               	movf	___ftge@ff2,w,c
 14759  002886  5C18               	subwf	___ftge@ff1,w,c
 14760  002888  501C               	movf	___ftge@ff2+1,w,c
 14761  00288A  5819               	subwfb	___ftge@ff1+1,w,c
 14762  00288C  501D               	movf	___ftge@ff2+2,w,c
 14763  00288E  581A               	subwfb	___ftge@ff1+2,w,c
 14764  002890  B0D8               	btfsc	status,0,c
 14765  002892  D002               	goto	l6500
 14766  002894  90D8               	bcf	status,0,c
 14767  002896  0012               	return	
 14768  002898                     l6500:
 14769  002898  80D8               	bsf	status,0,c
 14770  00289A  0012               	return	
 14771  00289C                     __end_of___ftge:
 14772                           	opt stack 0
 14773                           tosu	equ	0xFFF
 14774                           tosh	equ	0xFFE
 14775                           tosl	equ	0xFFD
 14776                           pclath	equ	0xFFA
 14777                           tblptru	equ	0xFF8
 14778                           tblptrh	equ	0xFF7
 14779                           tblptrl	equ	0xFF6
 14780                           tablat	equ	0xFF5
 14781                           prodh	equ	0xFF4
 14782                           prodl	equ	0xFF3
 14783                           intcon	equ	0xFF2
 14784                           intcon2	equ	0xFF1
 14785                           postinc0	equ	0xFEE
 14786                           plusw0	equ	0xFEB
 14787                           wreg	equ	0xFE8
 14788                           indf1	equ	0xFE7
 14789                           postdec1	equ	0xFE5
 14790                           fsr1h	equ	0xFE2
 14791                           fsr1l	equ	0xFE1
 14792                           indf2	equ	0xFDF
 14793                           postinc2	equ	0xFDE
 14794                           postdec2	equ	0xFDD
 14795                           plusw2	equ	0xFDB
 14796                           fsr2h	equ	0xFDA
 14797                           fsr2l	equ	0xFD9
 14798                           status	equ	0xFD8
 14799                           
 14800 ;; *************** function ___altoft *****************
 14801 ;; Defined at:
 14802 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 14803 ;; Parameters:    Size  Location     Type
 14804 ;;  c               4   39[BANK0 ] long 
 14805 ;; Auto vars:     Size  Location     Type
 14806 ;;  sign            1   48[BANK0 ] unsigned char 
 14807 ;;  exp             1   47[BANK0 ] unsigned char 
 14808 ;; Return value:  Size  Location     Type
 14809 ;;                  3   39[BANK0 ] float 
 14810 ;; Registers used:
 14811 ;;		wreg, status,2, status,0, cstack
 14812 ;; Tracked objects:
 14813 ;;		On entry : 0/0
 14814 ;;		On exit  : 0/0
 14815 ;;		Unchanged: 0/0
 14816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14817 ;;      Params:         0       4       0       0       0       0       0
 14818 ;;      Locals:         0       2       0       0       0       0       0
 14819 ;;      Temps:          0       4       0       0       0       0       0
 14820 ;;      Totals:         0      10       0       0       0       0       0
 14821 ;;Total ram usage:       10 bytes
 14822 ;; Hardware stack levels used:    1
 14823 ;; Hardware stack levels required when called:    4
 14824 ;; This function calls:
 14825 ;;		___ftpack
 14826 ;; This function is called by:
 14827 ;;		_floor
 14828 ;; This function uses a non-reentrant model
 14829 ;;
 14830                           
 14831                           	psect	text95
 14832  00291E                     __ptext95:
 14833                           	opt stack 0
 14834  00291E                     ___altoft:
 14835                           	opt stack 20
 14836                           
 14837                           ;incstack = 0
 14838  00291E  0E00               	movlw	0
 14839  002920  0100               	movlb	0	; () banked
 14840  002922  6F90               	movwf	___altoft@sign& (0+255),b
 14841  002924  0E8E               	movlw	142
 14842  002926  6F8F               	movwf	___altoft@exp& (0+255),b
 14843                           
 14844                           ; BSR set to: 0
 14845  002928  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
 14846  00292A  D011               	goto	l1550
 14847                           
 14848                           ; BSR set to: 0
 14849  00292C  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
 14850  00292E  1F89               	comf	(___altoft@c+2)& (0+255),f,b
 14851  002930  1F88               	comf	(___altoft@c+1)& (0+255),f,b
 14852  002932  6D87               	negf	___altoft@c& (0+255),b
 14853  002934  0E00               	movlw	0
 14854  002936  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
 14855  002938  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
 14856  00293A  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
 14857                           
 14858                           ; BSR set to: 0
 14859  00293C  0E01               	movlw	1
 14860  00293E  6F90               	movwf	___altoft@sign& (0+255),b
 14861                           
 14862                           ; BSR set to: 0
 14863  002940  D006               	goto	l1550
 14864  002942                     
 14865                           ; BSR set to: 0
 14866                           
 14867                           ; BSR set to: 0
 14868  002942  90D8               	bcf	status,0,c
 14869  002944  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
 14870  002946  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
 14871  002948  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
 14872  00294A  3387               	rrcf	___altoft@c& (0+255),f,b
 14873  00294C  2B8F               	incf	___altoft@exp& (0+255),f,b
 14874  00294E                     l1550:
 14875                           
 14876                           ; BSR set to: 0
 14877                           
 14878                           ; BSR set to: 0
 14879  00294E  0E00               	movlw	0
 14880  002950  1587               	andwf	___altoft@c& (0+255),w,b
 14881  002952  6F8B               	movwf	??___altoft& (0+255),b
 14882  002954  0E00               	movlw	0
 14883  002956  1588               	andwf	(___altoft@c+1)& (0+255),w,b
 14884  002958  6F8C               	movwf	(??___altoft+1)& (0+255),b
 14885  00295A  0E00               	movlw	0
 14886  00295C  1589               	andwf	(___altoft@c+2)& (0+255),w,b
 14887  00295E  6F8D               	movwf	(??___altoft+2)& (0+255),b
 14888  002960  0EFF               	movlw	255
 14889  002962  158A               	andwf	(___altoft@c+3)& (0+255),w,b
 14890  002964  6F8E               	movwf	(??___altoft+3)& (0+255),b
 14891  002966  518B               	movf	??___altoft& (0+255),w,b
 14892  002968  118C               	iorwf	(??___altoft+1)& (0+255),w,b
 14893  00296A  118D               	iorwf	(??___altoft+2)& (0+255),w,b
 14894  00296C  118E               	iorwf	(??___altoft+3)& (0+255),w,b
 14895  00296E  A4D8               	btfss	status,2,c
 14896  002970  D7E8               	goto	l1551
 14897                           
 14898                           ; BSR set to: 0
 14899                           
 14900                           ; BSR set to: 0
 14901  002972  C087  F018         	movff	___altoft@c,___ftpack@arg
 14902  002976  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
 14903  00297A  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 14904  00297E  C08F  F01B         	movff	___altoft@exp,___ftpack@exp
 14905  002982  C090  F01C         	movff	___altoft@sign,___ftpack@sign
 14906  002986  ECA5  F011         	call	___ftpack	;wreg free
 14907  00298A  C018  F087         	movff	?___ftpack,?___altoft
 14908  00298E  C019  F088         	movff	?___ftpack+1,?___altoft+1
 14909  002992  C01A  F089         	movff	?___ftpack+2,?___altoft+2
 14910  002996  0012               	return	
 14911  002998                     __end_of___altoft:
 14912                           	opt stack 0
 14913                           tosu	equ	0xFFF
 14914                           tosh	equ	0xFFE
 14915                           tosl	equ	0xFFD
 14916                           pclath	equ	0xFFA
 14917                           tblptru	equ	0xFF8
 14918                           tblptrh	equ	0xFF7
 14919                           tblptrl	equ	0xFF6
 14920                           tablat	equ	0xFF5
 14921                           prodh	equ	0xFF4
 14922                           prodl	equ	0xFF3
 14923                           intcon	equ	0xFF2
 14924                           intcon2	equ	0xFF1
 14925                           postinc0	equ	0xFEE
 14926                           plusw0	equ	0xFEB
 14927                           wreg	equ	0xFE8
 14928                           indf1	equ	0xFE7
 14929                           postdec1	equ	0xFE5
 14930                           fsr1h	equ	0xFE2
 14931                           fsr1l	equ	0xFE1
 14932                           indf2	equ	0xFDF
 14933                           postinc2	equ	0xFDE
 14934                           postdec2	equ	0xFDD
 14935                           plusw2	equ	0xFDB
 14936                           fsr2h	equ	0xFDA
 14937                           fsr2l	equ	0xFD9
 14938                           status	equ	0xFD8
 14939                           
 14940 ;; *************** function _eval_poly *****************
 14941 ;; Defined at:
 14942 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 14943 ;; Parameters:    Size  Location     Type
 14944 ;;  x               3   36[BANK0 ] float 
 14945 ;;  d               2   39[BANK0 ] PTR const 
 14946 ;;		 -> log@coeff(27), exp@coeff(30), 
 14947 ;;  n               2   41[BANK0 ] int 
 14948 ;; Auto vars:     Size  Location     Type
 14949 ;;  res             3   45[BANK0 ] int 
 14950 ;; Return value:  Size  Location     Type
 14951 ;;                  3   36[BANK0 ] int 
 14952 ;; Registers used:
 14953 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14954 ;; Tracked objects:
 14955 ;;		On entry : 0/0
 14956 ;;		On exit  : 0/0
 14957 ;;		Unchanged: 0/0
 14958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14959 ;;      Params:         0       7       0       0       0       0       0
 14960 ;;      Locals:         0       3       0       0       0       0       0
 14961 ;;      Temps:          0       2       0       0       0       0       0
 14962 ;;      Totals:         0      12       0       0       0       0       0
 14963 ;;Total ram usage:       12 bytes
 14964 ;; Hardware stack levels used:    1
 14965 ;; Hardware stack levels required when called:    5
 14966 ;; This function calls:
 14967 ;;		___ftadd
 14968 ;;		___ftmul
 14969 ;;		___wmul
 14970 ;; This function is called by:
 14971 ;;		_exp
 14972 ;;		_log
 14973 ;; This function uses a non-reentrant model
 14974 ;;
 14975                           
 14976                           	psect	text96
 14977  001F86                     __ptext96:
 14978                           	opt stack 0
 14979  001F86                     _eval_poly:
 14980                           	opt stack 20
 14981                           
 14982                           ;incstack = 0
 14983  001F86  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 14984  001F8A  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 14985  001F8E  0E00               	movlw	0
 14986  001F90  6E1B               	movwf	___wmul@multiplicand+1,c
 14987  001F92  0E03               	movlw	3
 14988  001F94  6E1A               	movwf	___wmul@multiplicand,c
 14989  001F96  EC42  F01B         	call	___wmul	;wreg free
 14990  001F9A  C087  F08B         	movff	eval_poly@d,??_eval_poly
 14991  001F9E  C088  F08C         	movff	eval_poly@d+1,??_eval_poly+1
 14992  001FA2  5018               	movf	?___wmul,w,c
 14993  001FA4  0100               	movlb	0	; () banked
 14994  001FA6  278B               	addwf	??_eval_poly& (0+255),f,b
 14995  001FA8  5019               	movf	?___wmul+1,w,c
 14996  001FAA  238C               	addwfc	(??_eval_poly+1)& (0+255),f,b
 14997  001FAC  C08B  FFF6         	movff	??_eval_poly,tblptrl
 14998  001FB0  C08C  FFF7         	movff	??_eval_poly+1,tblptrh
 14999  001FB4                     	if	0	;tblptru may be non-zero
 15000  001FB4                     	endif
 15001  001FB4                     	if	0	;tblptru may be non-zero
 15002  001FB4                     	endif
 15003  001FB4  0009               	tblrd		*+
 15004  001FB6  CFF5 F08D          	movff	tablat,eval_poly@res
 15005  001FBA  0009               	tblrd		*+
 15006  001FBC  CFF5 F08E          	movff	tablat,eval_poly@res+1
 15007  001FC0  000A               	tblrd		*-
 15008  001FC2  CFF5 F08F          	movff	tablat,eval_poly@res+2
 15009  001FC6  D040               	goto	l2175
 15010  001FC8                     
 15011                           ; BSR set to: 0
 15012                           
 15013                           ; BSR set to: 0
 15014  001FC8  C08D  F06C         	movff	eval_poly@res,___ftmul@f2
 15015  001FCC  C08E  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
 15016  001FD0  C08F  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
 15017  001FD4  C084  F069         	movff	eval_poly@x,___ftmul@f1
 15018  001FD8  C085  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
 15019  001FDC  C086  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
 15020  001FE0  ECF1  F00D         	call	___ftmul	;wreg free
 15021  001FE4  C069  F078         	movff	?___ftmul,___ftadd@f1
 15022  001FE8  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 15023  001FEC  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 15024  001FF0  0E00               	movlw	0
 15025  001FF2  6E1B               	movwf	___wmul@multiplicand+1,c
 15026  001FF4  0E03               	movlw	3
 15027  001FF6  6E1A               	movwf	___wmul@multiplicand,c
 15028  001FF8  0100               	movlb	0	; () banked
 15029  001FFA  0789               	decf	eval_poly@n& (0+255),f,b
 15030  001FFC  A0D8               	btfss	status,0,c
 15031  001FFE  078A               	decf	(eval_poly@n+1)& (0+255),f,b
 15032  002000  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 15033  002004  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 15034  002008  EC42  F01B         	call	___wmul	;wreg free
 15035  00200C  C087  F08B         	movff	eval_poly@d,??_eval_poly
 15036  002010  C088  F08C         	movff	eval_poly@d+1,??_eval_poly+1
 15037  002014  5018               	movf	?___wmul,w,c
 15038  002016  0100               	movlb	0	; () banked
 15039  002018  278B               	addwf	??_eval_poly& (0+255),f,b
 15040  00201A  5019               	movf	?___wmul+1,w,c
 15041  00201C  238C               	addwfc	(??_eval_poly+1)& (0+255),f,b
 15042  00201E  C08B  FFF6         	movff	??_eval_poly,tblptrl
 15043  002022  C08C  FFF7         	movff	??_eval_poly+1,tblptrh
 15044  002026                     	if	0	;tblptru may be non-zero
 15045  002026                     	endif
 15046  002026                     	if	0	;tblptru may be non-zero
 15047  002026                     	endif
 15048  002026  0009               	tblrd		*+
 15049  002028  CFF5 F07B          	movff	tablat,___ftadd@f2
 15050  00202C  0009               	tblrd		*+
 15051  00202E  CFF5 F07C          	movff	tablat,___ftadd@f2+1
 15052  002032  000A               	tblrd		*-
 15053  002034  CFF5 F07D          	movff	tablat,___ftadd@f2+2
 15054  002038  ECF0  F008         	call	___ftadd	;wreg free
 15055  00203C  C078  F08D         	movff	?___ftadd,eval_poly@res
 15056  002040  C079  F08E         	movff	?___ftadd+1,eval_poly@res+1
 15057  002044  C07A  F08F         	movff	?___ftadd+2,eval_poly@res+2
 15058  002048                     l2175:
 15059  002048  0100               	movlb	0	; () banked
 15060  00204A  5189               	movf	eval_poly@n& (0+255),w,b
 15061  00204C  118A               	iorwf	(eval_poly@n+1)& (0+255),w,b
 15062  00204E  A4D8               	btfss	status,2,c
 15063  002050  D7BB               	goto	l2176
 15064                           
 15065                           ; BSR set to: 0
 15066  002052  C08D  F084         	movff	eval_poly@res,?_eval_poly
 15067  002056  C08E  F085         	movff	eval_poly@res+1,?_eval_poly+1
 15068  00205A  C08F  F086         	movff	eval_poly@res+2,?_eval_poly+2
 15069                           
 15070                           ; BSR set to: 0
 15071  00205E  0012               	return		;funcret
 15072  002060                     __end_of_eval_poly:
 15073                           	opt stack 0
 15074                           tosu	equ	0xFFF
 15075                           tosh	equ	0xFFE
 15076                           tosl	equ	0xFFD
 15077                           pclath	equ	0xFFA
 15078                           tblptru	equ	0xFF8
 15079                           tblptrh	equ	0xFF7
 15080                           tblptrl	equ	0xFF6
 15081                           tablat	equ	0xFF5
 15082                           prodh	equ	0xFF4
 15083                           prodl	equ	0xFF3
 15084                           intcon	equ	0xFF2
 15085                           intcon2	equ	0xFF1
 15086                           postinc0	equ	0xFEE
 15087                           plusw0	equ	0xFEB
 15088                           wreg	equ	0xFE8
 15089                           indf1	equ	0xFE7
 15090                           postdec1	equ	0xFE5
 15091                           fsr1h	equ	0xFE2
 15092                           fsr1l	equ	0xFE1
 15093                           indf2	equ	0xFDF
 15094                           postinc2	equ	0xFDE
 15095                           postdec2	equ	0xFDD
 15096                           plusw2	equ	0xFDB
 15097                           fsr2h	equ	0xFDA
 15098                           fsr2l	equ	0xFD9
 15099                           status	equ	0xFD8
 15100                           
 15101 ;; *************** function ___wmul *****************
 15102 ;; Defined at:
 15103 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 15104 ;; Parameters:    Size  Location     Type
 15105 ;;  multiplier      2   23[COMRAM] unsigned int 
 15106 ;;  multiplicand    2   25[COMRAM] unsigned int 
 15107 ;; Auto vars:     Size  Location     Type
 15108 ;;  product         2   27[COMRAM] unsigned int 
 15109 ;; Return value:  Size  Location     Type
 15110 ;;                  2   23[COMRAM] unsigned int 
 15111 ;; Registers used:
 15112 ;;		wreg, status,2, status,0, prodl, prodh
 15113 ;; Tracked objects:
 15114 ;;		On entry : 0/0
 15115 ;;		On exit  : 0/0
 15116 ;;		Unchanged: 0/0
 15117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15118 ;;      Params:         4       0       0       0       0       0       0
 15119 ;;      Locals:         2       0       0       0       0       0       0
 15120 ;;      Temps:          0       0       0       0       0       0       0
 15121 ;;      Totals:         6       0       0       0       0       0       0
 15122 ;;Total ram usage:        6 bytes
 15123 ;; Hardware stack levels used:    1
 15124 ;; Hardware stack levels required when called:    3
 15125 ;; This function calls:
 15126 ;;		Nothing
 15127 ;; This function is called by:
 15128 ;;		_eval_poly
 15129 ;; This function uses a non-reentrant model
 15130 ;;
 15131                           
 15132                           	psect	text97
 15133  003684                     __ptext97:
 15134                           	opt stack 0
 15135  003684                     ___wmul:
 15136                           	opt stack 21
 15137                           
 15138                           ; BSR set to: 0
 15139                           ;incstack = 0
 15140  003684  5018               	movf	___wmul@multiplier,w,c
 15141  003686  021A               	mulwf	___wmul@multiplicand,c
 15142  003688  CFF3 F01C          	movff	prodl,___wmul@product
 15143  00368C  CFF4 F01D          	movff	prodh,___wmul@product+1
 15144  003690  5018               	movf	___wmul@multiplier,w,c
 15145  003692  021B               	mulwf	___wmul@multiplicand+1,c
 15146  003694  50F3               	movf	prodl,w,c
 15147  003696  261D               	addwf	___wmul@product+1,f,c
 15148  003698  5019               	movf	___wmul@multiplier+1,w,c
 15149  00369A  021A               	mulwf	___wmul@multiplicand,c
 15150  00369C  50F3               	movf	prodl,w,c
 15151  00369E  261D               	addwf	___wmul@product+1,f,c
 15152  0036A0  C01C  F018         	movff	___wmul@product,?___wmul
 15153  0036A4  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 15154  0036A8  0012               	return	
 15155  0036AA                     __end_of___wmul:
 15156                           	opt stack 0
 15157                           tosu	equ	0xFFF
 15158                           tosh	equ	0xFFE
 15159                           tosl	equ	0xFFD
 15160                           pclath	equ	0xFFA
 15161                           tblptru	equ	0xFF8
 15162                           tblptrh	equ	0xFF7
 15163                           tblptrl	equ	0xFF6
 15164                           tablat	equ	0xFF5
 15165                           prodh	equ	0xFF4
 15166                           prodl	equ	0xFF3
 15167                           intcon	equ	0xFF2
 15168                           intcon2	equ	0xFF1
 15169                           postinc0	equ	0xFEE
 15170                           plusw0	equ	0xFEB
 15171                           wreg	equ	0xFE8
 15172                           indf1	equ	0xFE7
 15173                           postdec1	equ	0xFE5
 15174                           fsr1h	equ	0xFE2
 15175                           fsr1l	equ	0xFE1
 15176                           indf2	equ	0xFDF
 15177                           postinc2	equ	0xFDE
 15178                           postdec2	equ	0xFDD
 15179                           plusw2	equ	0xFDB
 15180                           fsr2h	equ	0xFDA
 15181                           fsr2l	equ	0xFD9
 15182                           status	equ	0xFD8
 15183                           
 15184 ;; *************** function ___ftmul *****************
 15185 ;; Defined at:
 15186 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 15187 ;; Parameters:    Size  Location     Type
 15188 ;;  f1              3    9[BANK0 ] float 
 15189 ;;  f2              3   12[BANK0 ] float 
 15190 ;; Auto vars:     Size  Location     Type
 15191 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 15192 ;;  sign            1   23[BANK0 ] unsigned char 
 15193 ;;  cntr            1   22[BANK0 ] unsigned char 
 15194 ;;  exp             1   18[BANK0 ] unsigned char 
 15195 ;; Return value:  Size  Location     Type
 15196 ;;                  3    9[BANK0 ] float 
 15197 ;; Registers used:
 15198 ;;		wreg, status,2, status,0, cstack
 15199 ;; Tracked objects:
 15200 ;;		On entry : 0/0
 15201 ;;		On exit  : 0/0
 15202 ;;		Unchanged: 0/0
 15203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15204 ;;      Params:         0       6       0       0       0       0       0
 15205 ;;      Locals:         0       6       0       0       0       0       0
 15206 ;;      Temps:          0       3       0       0       0       0       0
 15207 ;;      Totals:         0      15       0       0       0       0       0
 15208 ;;Total ram usage:       15 bytes
 15209 ;; Hardware stack levels used:    1
 15210 ;; Hardware stack levels required when called:    4
 15211 ;; This function calls:
 15212 ;;		___ftpack
 15213 ;; This function is called by:
 15214 ;;		_AdcConvert
 15215 ;;		_CheckFlashPrecentage
 15216 ;;		_pow
 15217 ;;		_exp
 15218 ;;		_log
 15219 ;;		_eval_poly
 15220 ;; This function uses a non-reentrant model
 15221 ;;
 15222                           
 15223                           	psect	text98
 15224  001BE2                     __ptext98:
 15225                           	opt stack 0
 15226  001BE2                     ___ftmul:
 15227                           	opt stack 20
 15228                           
 15229                           ;incstack = 0
 15230  001BE2  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
 15231  001BE6  0100               	movlb	0	; () banked
 15232  001BE8  6B70               	clrf	(??___ftmul+1)& (0+255),b
 15233  001BEA  6B71               	clrf	(??___ftmul+2)& (0+255),b
 15234  001BEC  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 15235  001BEE  376F               	rlcf	??___ftmul& (0+255),f,b
 15236  001BF0  E301               	bnc	u6391
 15237  001BF2  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 15238  001BF4                     u6391:
 15239  001BF4  516F               	movf	??___ftmul& (0+255),w,b
 15240  001BF6  6F72               	movwf	___ftmul@exp& (0+255),b
 15241  001BF8  5172               	movf	___ftmul@exp& (0+255),w,b
 15242  001BFA  A4D8               	btfss	status,2,c
 15243  001BFC  D007               	goto	l1759
 15244                           
 15245                           ; BSR set to: 0
 15246  001BFE  0E00               	movlw	0
 15247  001C00  6F69               	movwf	?___ftmul& (0+255),b
 15248  001C02  0E00               	movlw	0
 15249  001C04  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 15250  001C06  0E00               	movlw	0
 15251  001C08  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 15252                           
 15253                           ; BSR set to: 0
 15254  001C0A  0012               	return	
 15255  001C0C                     l1759:
 15256                           
 15257                           ; BSR set to: 0
 15258                           
 15259                           ; BSR set to: 0
 15260  001C0C  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
 15261  001C10  6B70               	clrf	(??___ftmul+1)& (0+255),b
 15262  001C12  6B71               	clrf	(??___ftmul+2)& (0+255),b
 15263  001C14  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 15264  001C16  376F               	rlcf	??___ftmul& (0+255),f,b
 15265  001C18  E301               	bnc	u6411
 15266  001C1A  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 15267  001C1C                     u6411:
 15268  001C1C  516F               	movf	??___ftmul& (0+255),w,b
 15269  001C1E  6F77               	movwf	___ftmul@sign& (0+255),b
 15270  001C20  5177               	movf	___ftmul@sign& (0+255),w,b
 15271  001C22  A4D8               	btfss	status,2,c
 15272  001C24  D007               	goto	l1761
 15273                           
 15274                           ; BSR set to: 0
 15275  001C26  0E00               	movlw	0
 15276  001C28  6F69               	movwf	?___ftmul& (0+255),b
 15277  001C2A  0E00               	movlw	0
 15278  001C2C  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 15279  001C2E  0E00               	movlw	0
 15280  001C30  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 15281                           
 15282                           ; BSR set to: 0
 15283  001C32  0012               	return	
 15284  001C34                     l1761:
 15285                           
 15286                           ; BSR set to: 0
 15287                           
 15288                           ; BSR set to: 0
 15289  001C34  5177               	movf	___ftmul@sign& (0+255),w,b
 15290  001C36  0F7B               	addlw	123
 15291  001C38  2772               	addwf	___ftmul@exp& (0+255),f,b
 15292                           
 15293                           ; BSR set to: 0
 15294  001C3A  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
 15295  001C3E  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 15296  001C40  1B77               	xorwf	___ftmul@sign& (0+255),f,b
 15297  001C42  0E80               	movlw	128
 15298  001C44  1777               	andwf	___ftmul@sign& (0+255),f,b
 15299                           
 15300                           ; BSR set to: 0
 15301  001C46  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 15302                           
 15303                           ; BSR set to: 0
 15304  001C48  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 15305                           
 15306                           ; BSR set to: 0
 15307  001C4A  0EFF               	movlw	255
 15308  001C4C  176C               	andwf	___ftmul@f2& (0+255),f,b
 15309  001C4E  0EFF               	movlw	255
 15310  001C50  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 15311  001C52  0E00               	movlw	0
 15312  001C54  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 15313                           
 15314                           ; BSR set to: 0
 15315  001C56  0E00               	movlw	0
 15316  001C58  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
 15317  001C5A  0E00               	movlw	0
 15318  001C5C  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 15319  001C5E  0E00               	movlw	0
 15320  001C60  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 15321                           
 15322                           ; BSR set to: 0
 15323  001C62  0E07               	movlw	7
 15324  001C64  6F76               	movwf	___ftmul@cntr& (0+255),b
 15325  001C66                     
 15326                           ; BSR set to: 0
 15327                           
 15328                           ; BSR set to: 0
 15329  001C66  A169               	btfss	___ftmul@f1& (0+255),0,b
 15330  001C68  D006               	goto	l1763
 15331                           
 15332                           ; BSR set to: 0
 15333  001C6A  516C               	movf	___ftmul@f2& (0+255),w,b
 15334  001C6C  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 15335  001C6E  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 15336  001C70  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 15337  001C72  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 15338  001C74  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 15339  001C76                     l1763:
 15340                           
 15341                           ; BSR set to: 0
 15342                           
 15343                           ; BSR set to: 0
 15344  001C76  90D8               	bcf	status,0,c
 15345  001C78  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 15346  001C7A  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 15347  001C7C  3369               	rrcf	___ftmul@f1& (0+255),f,b
 15348  001C7E  90D8               	bcf	status,0,c
 15349  001C80  376C               	rlcf	___ftmul@f2& (0+255),f,b
 15350  001C82  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 15351  001C84  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 15352                           
 15353                           ; BSR set to: 0
 15354  001C86  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 15355  001C88  D7EE               	goto	l1762
 15356                           
 15357                           ; BSR set to: 0
 15358                           
 15359                           ; BSR set to: 0
 15360  001C8A  0E09               	movlw	9
 15361  001C8C  6F76               	movwf	___ftmul@cntr& (0+255),b
 15362  001C8E                     
 15363                           ; BSR set to: 0
 15364                           
 15365                           ; BSR set to: 0
 15366  001C8E  A169               	btfss	___ftmul@f1& (0+255),0,b
 15367  001C90  D006               	goto	l1766
 15368                           
 15369                           ; BSR set to: 0
 15370  001C92  516C               	movf	___ftmul@f2& (0+255),w,b
 15371  001C94  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 15372  001C96  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 15373  001C98  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 15374  001C9A  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 15375  001C9C  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 15376  001C9E                     l1766:
 15377                           
 15378                           ; BSR set to: 0
 15379                           
 15380                           ; BSR set to: 0
 15381  001C9E  90D8               	bcf	status,0,c
 15382  001CA0  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 15383  001CA2  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 15384  001CA4  3369               	rrcf	___ftmul@f1& (0+255),f,b
 15385  001CA6  90D8               	bcf	status,0,c
 15386  001CA8  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 15387  001CAA  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 15388  001CAC  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 15389                           
 15390                           ; BSR set to: 0
 15391  001CAE  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 15392  001CB0  D7EE               	goto	l1765
 15393                           
 15394                           ; BSR set to: 0
 15395                           
 15396                           ; BSR set to: 0
 15397  001CB2  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 15398  001CB6  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 15399  001CBA  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 15400  001CBE  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
 15401  001CC2  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
 15402  001CC6  ECA5  F011         	call	___ftpack	;wreg free
 15403  001CCA  C018  F069         	movff	?___ftpack,?___ftmul
 15404  001CCE  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
 15405  001CD2  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
 15406  001CD6  0012               	return	
 15407  001CD8                     __end_of___ftmul:
 15408                           	opt stack 0
 15409                           tosu	equ	0xFFF
 15410                           tosh	equ	0xFFE
 15411                           tosl	equ	0xFFD
 15412                           pclath	equ	0xFFA
 15413                           tblptru	equ	0xFF8
 15414                           tblptrh	equ	0xFF7
 15415                           tblptrl	equ	0xFF6
 15416                           tablat	equ	0xFF5
 15417                           prodh	equ	0xFF4
 15418                           prodl	equ	0xFF3
 15419                           intcon	equ	0xFF2
 15420                           intcon2	equ	0xFF1
 15421                           postinc0	equ	0xFEE
 15422                           plusw0	equ	0xFEB
 15423                           wreg	equ	0xFE8
 15424                           indf1	equ	0xFE7
 15425                           postdec1	equ	0xFE5
 15426                           fsr1h	equ	0xFE2
 15427                           fsr1l	equ	0xFE1
 15428                           indf2	equ	0xFDF
 15429                           postinc2	equ	0xFDE
 15430                           postdec2	equ	0xFDD
 15431                           plusw2	equ	0xFDB
 15432                           fsr2h	equ	0xFDA
 15433                           fsr2l	equ	0xFD9
 15434                           status	equ	0xFD8
 15435                           
 15436 ;; *************** function ___ftsub *****************
 15437 ;; Defined at:
 15438 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 15439 ;; Parameters:    Size  Location     Type
 15440 ;;  f1              3   36[BANK0 ] float 
 15441 ;;  f2              3   39[BANK0 ] float 
 15442 ;; Auto vars:     Size  Location     Type
 15443 ;;		None
 15444 ;; Return value:  Size  Location     Type
 15445 ;;                  3   36[BANK0 ] float 
 15446 ;; Registers used:
 15447 ;;		wreg, status,2, status,0, cstack
 15448 ;; Tracked objects:
 15449 ;;		On entry : 0/0
 15450 ;;		On exit  : 0/0
 15451 ;;		Unchanged: 0/0
 15452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15453 ;;      Params:         0       6       0       0       0       0       0
 15454 ;;      Locals:         0       0       0       0       0       0       0
 15455 ;;      Temps:          0       0       0       0       0       0       0
 15456 ;;      Totals:         0       6       0       0       0       0       0
 15457 ;;Total ram usage:        6 bytes
 15458 ;; Hardware stack levels used:    1
 15459 ;; Hardware stack levels required when called:    5
 15460 ;; This function calls:
 15461 ;;		___ftadd
 15462 ;; This function is called by:
 15463 ;;		_exp
 15464 ;; This function uses a non-reentrant model
 15465 ;;
 15466                           
 15467                           	psect	text99
 15468  0031B2                     __ptext99:
 15469                           	opt stack 0
 15470  0031B2                     ___ftsub:
 15471                           	opt stack 20
 15472                           
 15473                           ;incstack = 0
 15474  0031B2  0100               	movlb	0	; () banked
 15475  0031B4  5187               	movf	___ftsub@f2& (0+255),w,b
 15476  0031B6  1188               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 15477  0031B8  1189               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 15478  0031BA  B4D8               	btfsc	status,2,c
 15479  0031BC  D006               	goto	l1776
 15480                           
 15481                           ; BSR set to: 0
 15482  0031BE  0E00               	movlw	0
 15483  0031C0  1B87               	xorwf	___ftsub@f2& (0+255),f,b
 15484  0031C2  0E00               	movlw	0
 15485  0031C4  1B88               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 15486  0031C6  0E80               	movlw	128
 15487  0031C8  1B89               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 15488  0031CA                     l1776:
 15489                           
 15490                           ; BSR set to: 0
 15491                           
 15492                           ; BSR set to: 0
 15493  0031CA  C084  F078         	movff	___ftsub@f1,___ftadd@f1
 15494  0031CE  C085  F079         	movff	___ftsub@f1+1,___ftadd@f1+1
 15495  0031D2  C086  F07A         	movff	___ftsub@f1+2,___ftadd@f1+2
 15496  0031D6  C087  F07B         	movff	___ftsub@f2,___ftadd@f2
 15497  0031DA  C088  F07C         	movff	___ftsub@f2+1,___ftadd@f2+1
 15498  0031DE  C089  F07D         	movff	___ftsub@f2+2,___ftadd@f2+2
 15499  0031E2  ECF0  F008         	call	___ftadd	;wreg free
 15500  0031E6  C078  F084         	movff	?___ftadd,?___ftsub
 15501  0031EA  C079  F085         	movff	?___ftadd+1,?___ftsub+1
 15502  0031EE  C07A  F086         	movff	?___ftadd+2,?___ftsub+2
 15503  0031F2  0012               	return	
 15504  0031F4                     __end_of___ftsub:
 15505                           	opt stack 0
 15506                           tosu	equ	0xFFF
 15507                           tosh	equ	0xFFE
 15508                           tosl	equ	0xFFD
 15509                           pclath	equ	0xFFA
 15510                           tblptru	equ	0xFF8
 15511                           tblptrh	equ	0xFF7
 15512                           tblptrl	equ	0xFF6
 15513                           tablat	equ	0xFF5
 15514                           prodh	equ	0xFF4
 15515                           prodl	equ	0xFF3
 15516                           intcon	equ	0xFF2
 15517                           intcon2	equ	0xFF1
 15518                           postinc0	equ	0xFEE
 15519                           plusw0	equ	0xFEB
 15520                           wreg	equ	0xFE8
 15521                           indf1	equ	0xFE7
 15522                           postdec1	equ	0xFE5
 15523                           fsr1h	equ	0xFE2
 15524                           fsr1l	equ	0xFE1
 15525                           indf2	equ	0xFDF
 15526                           postinc2	equ	0xFDE
 15527                           postdec2	equ	0xFDD
 15528                           plusw2	equ	0xFDB
 15529                           fsr2h	equ	0xFDA
 15530                           fsr2l	equ	0xFD9
 15531                           status	equ	0xFD8
 15532                           
 15533 ;; *************** function ___ftadd *****************
 15534 ;; Defined at:
 15535 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 15536 ;; Parameters:    Size  Location     Type
 15537 ;;  f1              3   24[BANK0 ] float 
 15538 ;;  f2              3   27[BANK0 ] float 
 15539 ;; Auto vars:     Size  Location     Type
 15540 ;;  exp1            1   35[BANK0 ] unsigned char 
 15541 ;;  exp2            1   34[BANK0 ] unsigned char 
 15542 ;;  sign            1   33[BANK0 ] unsigned char 
 15543 ;; Return value:  Size  Location     Type
 15544 ;;                  3   24[BANK0 ] float 
 15545 ;; Registers used:
 15546 ;;		wreg, status,2, status,0, cstack
 15547 ;; Tracked objects:
 15548 ;;		On entry : 0/0
 15549 ;;		On exit  : 0/0
 15550 ;;		Unchanged: 0/0
 15551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15552 ;;      Params:         0       6       0       0       0       0       0
 15553 ;;      Locals:         0       3       0       0       0       0       0
 15554 ;;      Temps:          0       3       0       0       0       0       0
 15555 ;;      Totals:         0      12       0       0       0       0       0
 15556 ;;Total ram usage:       12 bytes
 15557 ;; Hardware stack levels used:    1
 15558 ;; Hardware stack levels required when called:    4
 15559 ;; This function calls:
 15560 ;;		___ftpack
 15561 ;; This function is called by:
 15562 ;;		___ftsub
 15563 ;;		_floor
 15564 ;;		_log
 15565 ;;		_eval_poly
 15566 ;; This function uses a non-reentrant model
 15567 ;;
 15568                           
 15569                           	psect	text100
 15570  0011E0                     __ptext100:
 15571                           	opt stack 0
 15572  0011E0                     ___ftadd:
 15573                           	opt stack 20
 15574                           
 15575                           ;incstack = 0
 15576  0011E0  C07A  F07E         	movff	___ftadd@f1+2,??___ftadd
 15577  0011E4  0100               	movlb	0	; () banked
 15578  0011E6  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 15579  0011E8  6B80               	clrf	(??___ftadd+2)& (0+255),b
 15580  0011EA  3579               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 15581  0011EC  377E               	rlcf	??___ftadd& (0+255),f,b
 15582  0011EE  E301               	bnc	u6181
 15583  0011F0  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 15584  0011F2                     u6181:
 15585  0011F2  517E               	movf	??___ftadd& (0+255),w,b
 15586  0011F4  6F83               	movwf	___ftadd@exp1& (0+255),b
 15587  0011F6  C07D  F07E         	movff	___ftadd@f2+2,??___ftadd
 15588  0011FA  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 15589  0011FC  6B80               	clrf	(??___ftadd+2)& (0+255),b
 15590  0011FE  357C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 15591  001200  377E               	rlcf	??___ftadd& (0+255),f,b
 15592  001202  E301               	bnc	u6191
 15593  001204  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 15594  001206                     u6191:
 15595  001206  517E               	movf	??___ftadd& (0+255),w,b
 15596  001208  6F82               	movwf	___ftadd@exp2& (0+255),b
 15597                           
 15598                           ; BSR set to: 0
 15599  00120A  5183               	movf	___ftadd@exp1& (0+255),w,b
 15600  00120C  B4D8               	btfsc	status,2,c
 15601  00120E  D00B               	goto	u6220
 15602                           
 15603                           ; BSR set to: 0
 15604  001210  5182               	movf	___ftadd@exp2& (0+255),w,b
 15605  001212  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 15606  001214  B0D8               	btfsc	status,0,c
 15607  001216  D00E               	goto	l1711
 15608                           
 15609                           ; BSR set to: 0
 15610  001218  5183               	movf	___ftadd@exp1& (0+255),w,b
 15611  00121A  0800               	sublw	0
 15612  00121C  2582               	addwf	___ftadd@exp2& (0+255),w,b
 15613  00121E  6F7E               	movwf	??___ftadd& (0+255),b
 15614  001220  0E18               	movlw	24
 15615  001222  657E               	cpfsgt	??___ftadd& (0+255),b
 15616  001224  D007               	goto	l1711
 15617  001226                     u6220:
 15618                           
 15619                           ; BSR set to: 0
 15620  001226  C07B  F078         	movff	___ftadd@f2,?___ftadd
 15621  00122A  C07C  F079         	movff	___ftadd@f2+1,?___ftadd+1
 15622  00122E  C07D  F07A         	movff	___ftadd@f2+2,?___ftadd+2
 15623  001232  0012               	return	
 15624  001234                     l1711:
 15625                           
 15626                           ; BSR set to: 0
 15627                           
 15628                           ; BSR set to: 0
 15629  001234  5182               	movf	___ftadd@exp2& (0+255),w,b
 15630  001236  B4D8               	btfsc	status,2,c
 15631  001238  D00B               	goto	u6250
 15632                           
 15633                           ; BSR set to: 0
 15634  00123A  5183               	movf	___ftadd@exp1& (0+255),w,b
 15635  00123C  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 15636  00123E  B0D8               	btfsc	status,0,c
 15637  001240  D00E               	goto	l1715
 15638                           
 15639                           ; BSR set to: 0
 15640  001242  5182               	movf	___ftadd@exp2& (0+255),w,b
 15641  001244  0800               	sublw	0
 15642  001246  2583               	addwf	___ftadd@exp1& (0+255),w,b
 15643  001248  6F7E               	movwf	??___ftadd& (0+255),b
 15644  00124A  0E18               	movlw	24
 15645  00124C  657E               	cpfsgt	??___ftadd& (0+255),b
 15646  00124E  D007               	goto	l1715
 15647  001250                     u6250:
 15648                           
 15649                           ; BSR set to: 0
 15650  001250  C078  F078         	movff	___ftadd@f1,?___ftadd
 15651  001254  C079  F079         	movff	___ftadd@f1+1,?___ftadd+1
 15652  001258  C07A  F07A         	movff	___ftadd@f1+2,?___ftadd+2
 15653  00125C  0012               	return	
 15654  00125E                     l1715:
 15655                           
 15656                           ; BSR set to: 0
 15657                           
 15658                           ; BSR set to: 0
 15659  00125E  0E06               	movlw	6
 15660  001260  6F81               	movwf	___ftadd@sign& (0+255),b
 15661                           
 15662                           ; BSR set to: 0
 15663  001262  BF7A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 15664                           
 15665                           ; BSR set to: 0
 15666  001264  8F81               	bsf	___ftadd@sign& (0+255),7,b
 15667                           
 15668                           ; BSR set to: 0
 15669                           
 15670                           ; BSR set to: 0
 15671  001266  BF7D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 15672                           
 15673                           ; BSR set to: 0
 15674  001268  8D81               	bsf	___ftadd@sign& (0+255),6,b
 15675                           
 15676                           ; BSR set to: 0
 15677  00126A  8F79               	bsf	(___ftadd@f1+1)& (0+255),7,b
 15678                           
 15679                           ; BSR set to: 0
 15680  00126C  0EFF               	movlw	255
 15681  00126E  1778               	andwf	___ftadd@f1& (0+255),f,b
 15682  001270  0EFF               	movlw	255
 15683  001272  1779               	andwf	(___ftadd@f1+1)& (0+255),f,b
 15684  001274  0E00               	movlw	0
 15685  001276  177A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 15686  001278  8F7C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 15687                           
 15688                           ; BSR set to: 0
 15689  00127A  0EFF               	movlw	255
 15690  00127C  177B               	andwf	___ftadd@f2& (0+255),f,b
 15691  00127E  0EFF               	movlw	255
 15692  001280  177C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 15693  001282  0E00               	movlw	0
 15694  001284  177D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 15695                           
 15696                           ; BSR set to: 0
 15697  001286  5182               	movf	___ftadd@exp2& (0+255),w,b
 15698  001288  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 15699  00128A  B0D8               	btfsc	status,0,c
 15700  00128C  D01B               	goto	l1720
 15701  00128E                     u6280:
 15702                           
 15703                           ; BSR set to: 0
 15704                           
 15705                           ; BSR set to: 0
 15706  00128E  90D8               	bcf	status,0,c
 15707  001290  377B               	rlcf	___ftadd@f2& (0+255),f,b
 15708  001292  377C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 15709  001294  377D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 15710  001296  0782               	decf	___ftadd@exp2& (0+255),f,b
 15711                           
 15712                           ; BSR set to: 0
 15713  001298  5183               	movf	___ftadd@exp1& (0+255),w,b
 15714  00129A  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 15715  00129C  B4D8               	btfsc	status,2,c
 15716  00129E  D00D               	goto	l1725
 15717                           
 15718                           ; BSR set to: 0
 15719  0012A0  0781               	decf	___ftadd@sign& (0+255),f,b
 15720  0012A2  C081  F07E         	movff	___ftadd@sign,??___ftadd
 15721  0012A6  0E07               	movlw	7
 15722  0012A8  177E               	andwf	??___ftadd& (0+255),f,b
 15723  0012AA  B4D8               	btfsc	status,2,c
 15724  0012AC  D006               	goto	l1725
 15725  0012AE  D7EF               	goto	u6280
 15726  0012B0                     
 15727                           ; BSR set to: 0
 15728                           
 15729                           ; BSR set to: 0
 15730  0012B0  90D8               	bcf	status,0,c
 15731  0012B2  337A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 15732  0012B4  3379               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 15733  0012B6  3378               	rrcf	___ftadd@f1& (0+255),f,b
 15734  0012B8  2B83               	incf	___ftadd@exp1& (0+255),f,b
 15735  0012BA                     l1725:
 15736                           
 15737                           ; BSR set to: 0
 15738                           
 15739                           ; BSR set to: 0
 15740  0012BA  5182               	movf	___ftadd@exp2& (0+255),w,b
 15741  0012BC  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 15742  0012BE  B4D8               	btfsc	status,2,c
 15743  0012C0  D01F               	goto	u6350
 15744  0012C2  D7F6               	goto	l1726
 15745  0012C4                     l1720:
 15746                           
 15747                           ; BSR set to: 0
 15748                           
 15749                           ; BSR set to: 0
 15750  0012C4  5183               	movf	___ftadd@exp1& (0+255),w,b
 15751  0012C6  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 15752  0012C8  B0D8               	btfsc	status,0,c
 15753  0012CA  D01A               	goto	u6350
 15754  0012CC                     u6320:
 15755                           
 15756                           ; BSR set to: 0
 15757                           
 15758                           ; BSR set to: 0
 15759  0012CC  90D8               	bcf	status,0,c
 15760  0012CE  3778               	rlcf	___ftadd@f1& (0+255),f,b
 15761  0012D0  3779               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 15762  0012D2  377A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 15763  0012D4  0783               	decf	___ftadd@exp1& (0+255),f,b
 15764                           
 15765                           ; BSR set to: 0
 15766  0012D6  5183               	movf	___ftadd@exp1& (0+255),w,b
 15767  0012D8  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 15768  0012DA  B4D8               	btfsc	status,2,c
 15769  0012DC  D00D               	goto	l1734
 15770                           
 15771                           ; BSR set to: 0
 15772  0012DE  0781               	decf	___ftadd@sign& (0+255),f,b
 15773  0012E0  C081  F07E         	movff	___ftadd@sign,??___ftadd
 15774  0012E4  0E07               	movlw	7
 15775  0012E6  177E               	andwf	??___ftadd& (0+255),f,b
 15776  0012E8  B4D8               	btfsc	status,2,c
 15777  0012EA  D006               	goto	l1734
 15778  0012EC  D7EF               	goto	u6320
 15779  0012EE                     
 15780                           ; BSR set to: 0
 15781                           
 15782                           ; BSR set to: 0
 15783  0012EE  90D8               	bcf	status,0,c
 15784  0012F0  337D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 15785  0012F2  337C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 15786  0012F4  337B               	rrcf	___ftadd@f2& (0+255),f,b
 15787  0012F6  2B82               	incf	___ftadd@exp2& (0+255),f,b
 15788  0012F8                     l1734:
 15789                           
 15790                           ; BSR set to: 0
 15791                           
 15792                           ; BSR set to: 0
 15793  0012F8  5182               	movf	___ftadd@exp2& (0+255),w,b
 15794  0012FA  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 15795  0012FC  A4D8               	btfss	status,2,c
 15796  0012FE  D7F7               	goto	l1735
 15797  001300                     u6350:
 15798                           
 15799                           ; BSR set to: 0
 15800                           
 15801                           ; BSR set to: 0
 15802                           
 15803                           ; BSR set to: 0
 15804  001300  AF81               	btfss	___ftadd@sign& (0+255),7,b
 15805  001302  D00C               	goto	l1737
 15806                           
 15807                           ; BSR set to: 0
 15808  001304  0EFF               	movlw	255
 15809  001306  1B78               	xorwf	___ftadd@f1& (0+255),f,b
 15810  001308  0EFF               	movlw	255
 15811  00130A  1B79               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 15812  00130C  0EFF               	movlw	255
 15813  00130E  1B7A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 15814  001310  0E01               	movlw	1
 15815  001312  2778               	addwf	___ftadd@f1& (0+255),f,b
 15816  001314  0E00               	movlw	0
 15817  001316  2379               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 15818  001318  0E00               	movlw	0
 15819  00131A  237A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 15820  00131C                     l1737:
 15821                           
 15822                           ; BSR set to: 0
 15823  00131C  AD81               	btfss	___ftadd@sign& (0+255),6,b
 15824  00131E  D00C               	goto	l1738
 15825                           
 15826                           ; BSR set to: 0
 15827  001320  0EFF               	movlw	255
 15828  001322  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 15829  001324  0EFF               	movlw	255
 15830  001326  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 15831  001328  0EFF               	movlw	255
 15832  00132A  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 15833  00132C  0E01               	movlw	1
 15834  00132E  277B               	addwf	___ftadd@f2& (0+255),f,b
 15835  001330  0E00               	movlw	0
 15836  001332  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 15837  001334  0E00               	movlw	0
 15838  001336  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 15839  001338                     l1738:
 15840                           
 15841                           ; BSR set to: 0
 15842                           
 15843                           ; BSR set to: 0
 15844  001338  0E00               	movlw	0
 15845  00133A  6F81               	movwf	___ftadd@sign& (0+255),b
 15846                           
 15847                           ; BSR set to: 0
 15848  00133C  5178               	movf	___ftadd@f1& (0+255),w,b
 15849  00133E  277B               	addwf	___ftadd@f2& (0+255),f,b
 15850  001340  5179               	movf	(___ftadd@f1+1)& (0+255),w,b
 15851  001342  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 15852  001344  517A               	movf	(___ftadd@f1+2)& (0+255),w,b
 15853  001346  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 15854                           
 15855                           ; BSR set to: 0
 15856  001348  AF7D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 15857  00134A  D00E               	goto	l1739
 15858                           
 15859                           ; BSR set to: 0
 15860  00134C  0EFF               	movlw	255
 15861  00134E  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 15862  001350  0EFF               	movlw	255
 15863  001352  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 15864  001354  0EFF               	movlw	255
 15865  001356  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 15866  001358  0E01               	movlw	1
 15867  00135A  277B               	addwf	___ftadd@f2& (0+255),f,b
 15868  00135C  0E00               	movlw	0
 15869  00135E  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 15870  001360  0E00               	movlw	0
 15871  001362  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 15872                           
 15873                           ; BSR set to: 0
 15874  001364  0E01               	movlw	1
 15875  001366  6F81               	movwf	___ftadd@sign& (0+255),b
 15876  001368                     l1739:
 15877                           
 15878                           ; BSR set to: 0
 15879                           
 15880                           ; BSR set to: 0
 15881  001368  C07B  F018         	movff	___ftadd@f2,___ftpack@arg
 15882  00136C  C07C  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 15883  001370  C07D  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 15884  001374  C083  F01B         	movff	___ftadd@exp1,___ftpack@exp
 15885  001378  C081  F01C         	movff	___ftadd@sign,___ftpack@sign
 15886  00137C  ECA5  F011         	call	___ftpack	;wreg free
 15887  001380  C018  F078         	movff	?___ftpack,?___ftadd
 15888  001384  C019  F079         	movff	?___ftpack+1,?___ftadd+1
 15889  001388  C01A  F07A         	movff	?___ftpack+2,?___ftadd+2
 15890  00138C  0012               	return	
 15891  00138E                     __end_of___ftadd:
 15892                           	opt stack 0
 15893                           tosu	equ	0xFFF
 15894                           tosh	equ	0xFFE
 15895                           tosl	equ	0xFFD
 15896                           pclath	equ	0xFFA
 15897                           tblptru	equ	0xFF8
 15898                           tblptrh	equ	0xFF7
 15899                           tblptrl	equ	0xFF6
 15900                           tablat	equ	0xFF5
 15901                           prodh	equ	0xFF4
 15902                           prodl	equ	0xFF3
 15903                           intcon	equ	0xFF2
 15904                           intcon2	equ	0xFF1
 15905                           postinc0	equ	0xFEE
 15906                           plusw0	equ	0xFEB
 15907                           wreg	equ	0xFE8
 15908                           indf1	equ	0xFE7
 15909                           postdec1	equ	0xFE5
 15910                           fsr1h	equ	0xFE2
 15911                           fsr1l	equ	0xFE1
 15912                           indf2	equ	0xFDF
 15913                           postinc2	equ	0xFDE
 15914                           postdec2	equ	0xFDD
 15915                           plusw2	equ	0xFDB
 15916                           fsr2h	equ	0xFDA
 15917                           fsr2l	equ	0xFD9
 15918                           status	equ	0xFD8
 15919                           
 15920 ;; *************** function ___ftneg *****************
 15921 ;; Defined at:
 15922 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 15923 ;; Parameters:    Size  Location     Type
 15924 ;;  f1              3   23[COMRAM] float 
 15925 ;; Auto vars:     Size  Location     Type
 15926 ;;		None
 15927 ;; Return value:  Size  Location     Type
 15928 ;;                  3   23[COMRAM] float 
 15929 ;; Registers used:
 15930 ;;		wreg, status,2, status,0
 15931 ;; Tracked objects:
 15932 ;;		On entry : 0/0
 15933 ;;		On exit  : 0/0
 15934 ;;		Unchanged: 0/0
 15935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15936 ;;      Params:         3       0       0       0       0       0       0
 15937 ;;      Locals:         0       0       0       0       0       0       0
 15938 ;;      Temps:          0       0       0       0       0       0       0
 15939 ;;      Totals:         3       0       0       0       0       0       0
 15940 ;;Total ram usage:        3 bytes
 15941 ;; Hardware stack levels used:    1
 15942 ;; Hardware stack levels required when called:    3
 15943 ;; This function calls:
 15944 ;;		Nothing
 15945 ;; This function is called by:
 15946 ;;		_pow
 15947 ;;		_exp
 15948 ;; This function uses a non-reentrant model
 15949 ;;
 15950                           
 15951                           	psect	text101
 15952  0036F2                     __ptext101:
 15953                           	opt stack 0
 15954  0036F2                     ___ftneg:
 15955                           	opt stack 22
 15956                           
 15957                           ;incstack = 0
 15958  0036F2  5018               	movf	___ftneg@f1,w,c
 15959  0036F4  1019               	iorwf	___ftneg@f1+1,w,c
 15960  0036F6  101A               	iorwf	___ftneg@f1+2,w,c
 15961  0036F8  B4D8               	btfsc	status,2,c
 15962  0036FA  D006               	goto	l1770
 15963  0036FC  0E00               	movlw	0
 15964  0036FE  1A18               	xorwf	___ftneg@f1,f,c
 15965  003700  0E00               	movlw	0
 15966  003702  1A19               	xorwf	___ftneg@f1+1,f,c
 15967  003704  0E80               	movlw	128
 15968  003706  1A1A               	xorwf	___ftneg@f1+2,f,c
 15969  003708                     l1770:
 15970  003708  C018  F018         	movff	___ftneg@f1,?___ftneg
 15971  00370C  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 15972  003710  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 15973  003714  0012               	return		;funcret
 15974  003716                     __end_of___ftneg:
 15975                           	opt stack 0
 15976                           tosu	equ	0xFFF
 15977                           tosh	equ	0xFFE
 15978                           tosl	equ	0xFFD
 15979                           pclath	equ	0xFFA
 15980                           tblptru	equ	0xFF8
 15981                           tblptrh	equ	0xFF7
 15982                           tblptrl	equ	0xFF6
 15983                           tablat	equ	0xFF5
 15984                           prodh	equ	0xFF4
 15985                           prodl	equ	0xFF3
 15986                           intcon	equ	0xFF2
 15987                           intcon2	equ	0xFF1
 15988                           postinc0	equ	0xFEE
 15989                           plusw0	equ	0xFEB
 15990                           wreg	equ	0xFE8
 15991                           indf1	equ	0xFE7
 15992                           postdec1	equ	0xFE5
 15993                           fsr1h	equ	0xFE2
 15994                           fsr1l	equ	0xFE1
 15995                           indf2	equ	0xFDF
 15996                           postinc2	equ	0xFDE
 15997                           postdec2	equ	0xFDD
 15998                           plusw2	equ	0xFDB
 15999                           fsr2h	equ	0xFDA
 16000                           fsr2l	equ	0xFD9
 16001                           status	equ	0xFD8
 16002                           
 16003 ;; *************** function ___ftdiv *****************
 16004 ;; Defined at:
 16005 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 16006 ;; Parameters:    Size  Location     Type
 16007 ;;  f1              3   40[COMRAM] float 
 16008 ;;  f2              3   43[COMRAM] float 
 16009 ;; Auto vars:     Size  Location     Type
 16010 ;;  f3              3    4[BANK0 ] float 
 16011 ;;  sign            1    8[BANK0 ] unsigned char 
 16012 ;;  exp             1    7[BANK0 ] unsigned char 
 16013 ;;  cntr            1    3[BANK0 ] unsigned char 
 16014 ;; Return value:  Size  Location     Type
 16015 ;;                  3   40[COMRAM] float 
 16016 ;; Registers used:
 16017 ;;		wreg, status,2, status,0, cstack
 16018 ;; Tracked objects:
 16019 ;;		On entry : 0/0
 16020 ;;		On exit  : 0/0
 16021 ;;		Unchanged: 0/0
 16022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16023 ;;      Params:         6       0       0       0       0       0       0
 16024 ;;      Locals:         0       6       0       0       0       0       0
 16025 ;;      Temps:          0       3       0       0       0       0       0
 16026 ;;      Totals:         6       9       0       0       0       0       0
 16027 ;;Total ram usage:       15 bytes
 16028 ;; Hardware stack levels used:    1
 16029 ;; Hardware stack levels required when called:    4
 16030 ;; This function calls:
 16031 ;;		___ftpack
 16032 ;; This function is called by:
 16033 ;;		_AdcConvert
 16034 ;;		_CheckFlashPrecentage
 16035 ;;		_exp
 16036 ;; This function uses a non-reentrant model
 16037 ;;
 16038                           
 16039                           	psect	text102
 16040  001CD8                     __ptext102:
 16041                           	opt stack 0
 16042  001CD8                     ___ftdiv:
 16043                           	opt stack 21
 16044                           
 16045                           ;incstack = 0
 16046  001CD8  C02B  F060         	movff	___ftdiv@f1+2,??___ftdiv
 16047  001CDC  0100               	movlb	0	; () banked
 16048  001CDE  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 16049  001CE0  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 16050  001CE2  342A               	rlcf	___ftdiv@f1+1,w,c
 16051  001CE4  3760               	rlcf	??___ftdiv& (0+255),f,b
 16052  001CE6  E301               	bnc	u6771
 16053  001CE8  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 16054  001CEA                     u6771:
 16055  001CEA  5160               	movf	??___ftdiv& (0+255),w,b
 16056  001CEC  6F67               	movwf	___ftdiv@exp& (0+255),b
 16057  001CEE  5167               	movf	___ftdiv@exp& (0+255),w,b
 16058  001CF0  A4D8               	btfss	status,2,c
 16059  001CF2  D007               	goto	l1744
 16060                           
 16061                           ; BSR set to: 0
 16062  001CF4  0E00               	movlw	0
 16063  001CF6  6E29               	movwf	?___ftdiv,c
 16064  001CF8  0E00               	movlw	0
 16065  001CFA  6E2A               	movwf	?___ftdiv+1,c
 16066  001CFC  0E00               	movlw	0
 16067  001CFE  6E2B               	movwf	?___ftdiv+2,c
 16068                           
 16069                           ; BSR set to: 0
 16070  001D00  0012               	return	
 16071  001D02                     l1744:
 16072                           
 16073                           ; BSR set to: 0
 16074                           
 16075                           ; BSR set to: 0
 16076  001D02  C02E  F060         	movff	___ftdiv@f2+2,??___ftdiv
 16077  001D06  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 16078  001D08  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 16079  001D0A  342D               	rlcf	___ftdiv@f2+1,w,c
 16080  001D0C  3760               	rlcf	??___ftdiv& (0+255),f,b
 16081  001D0E  E301               	bnc	u6791
 16082  001D10  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 16083  001D12                     u6791:
 16084  001D12  5160               	movf	??___ftdiv& (0+255),w,b
 16085  001D14  6F68               	movwf	___ftdiv@sign& (0+255),b
 16086  001D16  5168               	movf	___ftdiv@sign& (0+255),w,b
 16087  001D18  A4D8               	btfss	status,2,c
 16088  001D1A  D007               	goto	l1746
 16089                           
 16090                           ; BSR set to: 0
 16091  001D1C  0E00               	movlw	0
 16092  001D1E  6E29               	movwf	?___ftdiv,c
 16093  001D20  0E00               	movlw	0
 16094  001D22  6E2A               	movwf	?___ftdiv+1,c
 16095  001D24  0E00               	movlw	0
 16096  001D26  6E2B               	movwf	?___ftdiv+2,c
 16097                           
 16098                           ; BSR set to: 0
 16099  001D28  0012               	return	
 16100  001D2A                     l1746:
 16101                           
 16102                           ; BSR set to: 0
 16103                           
 16104                           ; BSR set to: 0
 16105  001D2A  0E00               	movlw	0
 16106  001D2C  6F64               	movwf	___ftdiv@f3& (0+255),b
 16107  001D2E  0E00               	movlw	0
 16108  001D30  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 16109  001D32  0E00               	movlw	0
 16110  001D34  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 16111                           
 16112                           ; BSR set to: 0
 16113  001D36  5168               	movf	___ftdiv@sign& (0+255),w,b
 16114  001D38  0F89               	addlw	137
 16115  001D3A  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 16116                           
 16117                           ; BSR set to: 0
 16118  001D3C  C02B  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 16119                           
 16120                           ; BSR set to: 0
 16121  001D40  502E               	movf	___ftdiv@f2+2,w,c
 16122  001D42  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 16123                           
 16124                           ; BSR set to: 0
 16125  001D44  0E80               	movlw	128
 16126  001D46  1768               	andwf	___ftdiv@sign& (0+255),f,b
 16127                           
 16128                           ; BSR set to: 0
 16129  001D48  8E2A               	bsf	___ftdiv@f1+1,7,c
 16130                           
 16131                           ; BSR set to: 0
 16132  001D4A  0EFF               	movlw	255
 16133  001D4C  1629               	andwf	___ftdiv@f1,f,c
 16134  001D4E  0EFF               	movlw	255
 16135  001D50  162A               	andwf	___ftdiv@f1+1,f,c
 16136  001D52  0E00               	movlw	0
 16137  001D54  162B               	andwf	___ftdiv@f1+2,f,c
 16138                           
 16139                           ; BSR set to: 0
 16140  001D56  8E2D               	bsf	___ftdiv@f2+1,7,c
 16141                           
 16142                           ; BSR set to: 0
 16143  001D58  0EFF               	movlw	255
 16144  001D5A  162C               	andwf	___ftdiv@f2,f,c
 16145  001D5C  0EFF               	movlw	255
 16146  001D5E  162D               	andwf	___ftdiv@f2+1,f,c
 16147  001D60  0E00               	movlw	0
 16148  001D62  162E               	andwf	___ftdiv@f2+2,f,c
 16149                           
 16150                           ; BSR set to: 0
 16151  001D64  0E18               	movlw	24
 16152  001D66  6F63               	movwf	___ftdiv@cntr& (0+255),b
 16153  001D68                     
 16154                           ; BSR set to: 0
 16155                           
 16156                           ; BSR set to: 0
 16157  001D68  90D8               	bcf	status,0,c
 16158  001D6A  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 16159  001D6C  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 16160  001D6E  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 16161                           
 16162                           ; BSR set to: 0
 16163  001D70  502C               	movf	___ftdiv@f2,w,c
 16164  001D72  5C29               	subwf	___ftdiv@f1,w,c
 16165  001D74  502D               	movf	___ftdiv@f2+1,w,c
 16166  001D76  582A               	subwfb	___ftdiv@f1+1,w,c
 16167  001D78  502E               	movf	___ftdiv@f2+2,w,c
 16168  001D7A  582B               	subwfb	___ftdiv@f1+2,w,c
 16169  001D7C  A0D8               	btfss	status,0,c
 16170  001D7E  D007               	goto	l1748
 16171                           
 16172                           ; BSR set to: 0
 16173  001D80  502C               	movf	___ftdiv@f2,w,c
 16174  001D82  5E29               	subwf	___ftdiv@f1,f,c
 16175  001D84  502D               	movf	___ftdiv@f2+1,w,c
 16176  001D86  5A2A               	subwfb	___ftdiv@f1+1,f,c
 16177  001D88  502E               	movf	___ftdiv@f2+2,w,c
 16178  001D8A  5A2B               	subwfb	___ftdiv@f1+2,f,c
 16179                           
 16180                           ; BSR set to: 0
 16181  001D8C  8164               	bsf	___ftdiv@f3& (0+255),0,b
 16182  001D8E                     l1748:
 16183                           
 16184                           ; BSR set to: 0
 16185  001D8E  90D8               	bcf	status,0,c
 16186  001D90  3629               	rlcf	___ftdiv@f1,f,c
 16187  001D92  362A               	rlcf	___ftdiv@f1+1,f,c
 16188  001D94  362B               	rlcf	___ftdiv@f1+2,f,c
 16189                           
 16190                           ; BSR set to: 0
 16191  001D96  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 16192  001D98  D7E7               	goto	l1747
 16193                           
 16194                           ; BSR set to: 0
 16195                           
 16196                           ; BSR set to: 0
 16197  001D9A  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 16198  001D9E  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 16199  001DA2  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 16200  001DA6  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 16201  001DAA  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 16202  001DAE  ECA5  F011         	call	___ftpack	;wreg free
 16203  001DB2  C018  F029         	movff	?___ftpack,?___ftdiv
 16204  001DB6  C019  F02A         	movff	?___ftpack+1,?___ftdiv+1
 16205  001DBA  C01A  F02B         	movff	?___ftpack+2,?___ftdiv+2
 16206  001DBE  0012               	return	
 16207  001DC0                     __end_of___ftdiv:
 16208                           	opt stack 0
 16209                           tosu	equ	0xFFF
 16210                           tosh	equ	0xFFE
 16211                           tosl	equ	0xFFD
 16212                           pclath	equ	0xFFA
 16213                           tblptru	equ	0xFF8
 16214                           tblptrh	equ	0xFF7
 16215                           tblptrl	equ	0xFF6
 16216                           tablat	equ	0xFF5
 16217                           prodh	equ	0xFF4
 16218                           prodl	equ	0xFF3
 16219                           intcon	equ	0xFF2
 16220                           intcon2	equ	0xFF1
 16221                           postinc0	equ	0xFEE
 16222                           plusw0	equ	0xFEB
 16223                           wreg	equ	0xFE8
 16224                           indf1	equ	0xFE7
 16225                           postdec1	equ	0xFE5
 16226                           fsr1h	equ	0xFE2
 16227                           fsr1l	equ	0xFE1
 16228                           indf2	equ	0xFDF
 16229                           postinc2	equ	0xFDE
 16230                           postdec2	equ	0xFDD
 16231                           plusw2	equ	0xFDB
 16232                           fsr2h	equ	0xFDA
 16233                           fsr2l	equ	0xFD9
 16234                           status	equ	0xFD8
 16235                           
 16236 ;; *************** function ___awtoft *****************
 16237 ;; Defined at:
 16238 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 16239 ;; Parameters:    Size  Location     Type
 16240 ;;  c               2   31[COMRAM] int 
 16241 ;; Auto vars:     Size  Location     Type
 16242 ;;  sign            1   34[COMRAM] unsigned char 
 16243 ;; Return value:  Size  Location     Type
 16244 ;;                  3   31[COMRAM] float 
 16245 ;; Registers used:
 16246 ;;		wreg, status,2, status,0, cstack
 16247 ;; Tracked objects:
 16248 ;;		On entry : 0/0
 16249 ;;		On exit  : 0/0
 16250 ;;		Unchanged: 0/0
 16251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16252 ;;      Params:         3       0       0       0       0       0       0
 16253 ;;      Locals:         1       0       0       0       0       0       0
 16254 ;;      Temps:          0       0       0       0       0       0       0
 16255 ;;      Totals:         4       0       0       0       0       0       0
 16256 ;;Total ram usage:        4 bytes
 16257 ;; Hardware stack levels used:    1
 16258 ;; Hardware stack levels required when called:    4
 16259 ;; This function calls:
 16260 ;;		___ftpack
 16261 ;; This function is called by:
 16262 ;;		_ReadIntFromEeprom
 16263 ;;		_exp
 16264 ;;		_log
 16265 ;; This function uses a non-reentrant model
 16266 ;;
 16267                           
 16268                           	psect	text103
 16269  003322                     __ptext103:
 16270                           	opt stack 0
 16271  003322                     ___awtoft:
 16272                           	opt stack 21
 16273                           
 16274                           ;incstack = 0
 16275  003322  0E00               	movlw	0
 16276  003324  6E23               	movwf	___awtoft@sign,c
 16277  003326  AE21               	btfss	___awtoft@c+1,7,c
 16278  003328  D006               	goto	l1661
 16279  00332A  6C20               	negf	___awtoft@c,c
 16280  00332C  1E21               	comf	___awtoft@c+1,f,c
 16281  00332E  B0D8               	btfsc	status,0,c
 16282  003330  2A21               	incf	___awtoft@c+1,f,c
 16283  003332  0E01               	movlw	1
 16284  003334  6E23               	movwf	___awtoft@sign,c
 16285  003336                     l1661:
 16286  003336  C020  F018         	movff	___awtoft@c,___ftpack@arg
 16287  00333A  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 16288  00333E  6A1A               	clrf	___ftpack@arg+2,c
 16289  003340  0E8E               	movlw	142
 16290  003342  6E1B               	movwf	___ftpack@exp,c
 16291  003344  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 16292  003348  ECA5  F011         	call	___ftpack	;wreg free
 16293  00334C  C018  F020         	movff	?___ftpack,?___awtoft
 16294  003350  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 16295  003354  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 16296  003358  0012               	return	
 16297  00335A                     __end_of___awtoft:
 16298                           	opt stack 0
 16299                           tosu	equ	0xFFF
 16300                           tosh	equ	0xFFE
 16301                           tosl	equ	0xFFD
 16302                           pclath	equ	0xFFA
 16303                           tblptru	equ	0xFF8
 16304                           tblptrh	equ	0xFF7
 16305                           tblptrl	equ	0xFF6
 16306                           tablat	equ	0xFF5
 16307                           prodh	equ	0xFF4
 16308                           prodl	equ	0xFF3
 16309                           intcon	equ	0xFF2
 16310                           intcon2	equ	0xFF1
 16311                           postinc0	equ	0xFEE
 16312                           plusw0	equ	0xFEB
 16313                           wreg	equ	0xFE8
 16314                           indf1	equ	0xFE7
 16315                           postdec1	equ	0xFE5
 16316                           fsr1h	equ	0xFE2
 16317                           fsr1l	equ	0xFE1
 16318                           indf2	equ	0xFDF
 16319                           postinc2	equ	0xFDE
 16320                           postdec2	equ	0xFDD
 16321                           plusw2	equ	0xFDB
 16322                           fsr2h	equ	0xFDA
 16323                           fsr2l	equ	0xFD9
 16324                           status	equ	0xFD8
 16325                           
 16326 ;; *************** function ___lltoft *****************
 16327 ;; Defined at:
 16328 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 16329 ;; Parameters:    Size  Location     Type
 16330 ;;  c               4   31[COMRAM] unsigned long 
 16331 ;; Auto vars:     Size  Location     Type
 16332 ;;  exp             1   39[COMRAM] unsigned char 
 16333 ;; Return value:  Size  Location     Type
 16334 ;;                  3   31[COMRAM] float 
 16335 ;; Registers used:
 16336 ;;		wreg, status,2, status,0, cstack
 16337 ;; Tracked objects:
 16338 ;;		On entry : 0/0
 16339 ;;		On exit  : 0/0
 16340 ;;		Unchanged: 0/0
 16341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16342 ;;      Params:         4       0       0       0       0       0       0
 16343 ;;      Locals:         1       0       0       0       0       0       0
 16344 ;;      Temps:          4       0       0       0       0       0       0
 16345 ;;      Totals:         9       0       0       0       0       0       0
 16346 ;;Total ram usage:        9 bytes
 16347 ;; Hardware stack levels used:    1
 16348 ;; Hardware stack levels required when called:    4
 16349 ;; This function calls:
 16350 ;;		___ftpack
 16351 ;; This function is called by:
 16352 ;;		_CheckFlashPrecentage
 16353 ;;		_pow
 16354 ;; This function uses a non-reentrant model
 16355 ;;
 16356                           
 16357                           	psect	text104
 16358  002CBE                     __ptext104:
 16359                           	opt stack 0
 16360  002CBE                     ___lltoft:
 16361                           	opt stack 22
 16362                           
 16363                           ;incstack = 0
 16364  002CBE  0E8E               	movlw	142
 16365  002CC0  6E28               	movwf	___lltoft@exp,c
 16366  002CC2  D006               	goto	l1837
 16367  002CC4  90D8               	bcf	status,0,c
 16368  002CC6  3223               	rrcf	___lltoft@c+3,f,c
 16369  002CC8  3222               	rrcf	___lltoft@c+2,f,c
 16370  002CCA  3221               	rrcf	___lltoft@c+1,f,c
 16371  002CCC  3220               	rrcf	___lltoft@c,f,c
 16372  002CCE  2A28               	incf	___lltoft@exp,f,c
 16373  002CD0                     l1837:
 16374  002CD0  0E00               	movlw	0
 16375  002CD2  1420               	andwf	___lltoft@c,w,c
 16376  002CD4  6E24               	movwf	??___lltoft& (0+255),c
 16377  002CD6  0E00               	movlw	0
 16378  002CD8  1421               	andwf	___lltoft@c+1,w,c
 16379  002CDA  6E25               	movwf	(??___lltoft+1)& (0+255),c
 16380  002CDC  0E00               	movlw	0
 16381  002CDE  1422               	andwf	___lltoft@c+2,w,c
 16382  002CE0  6E26               	movwf	(??___lltoft+2)& (0+255),c
 16383  002CE2  0EFF               	movlw	255
 16384  002CE4  1423               	andwf	___lltoft@c+3,w,c
 16385  002CE6  6E27               	movwf	(??___lltoft+3)& (0+255),c
 16386  002CE8  5024               	movf	??___lltoft,w,c
 16387  002CEA  1025               	iorwf	??___lltoft+1,w,c
 16388  002CEC  1026               	iorwf	??___lltoft+2,w,c
 16389  002CEE  1027               	iorwf	??___lltoft+3,w,c
 16390  002CF0  A4D8               	btfss	status,2,c
 16391  002CF2  D7E8               	goto	l1838
 16392  002CF4  C020  F018         	movff	___lltoft@c,___ftpack@arg
 16393  002CF8  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 16394  002CFC  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 16395  002D00  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 16396  002D04  0E00               	movlw	0
 16397  002D06  6E1C               	movwf	___ftpack@sign,c
 16398  002D08  ECA5  F011         	call	___ftpack	;wreg free
 16399  002D0C  C018  F020         	movff	?___ftpack,?___lltoft
 16400  002D10  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 16401  002D14  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 16402  002D18  0012               	return	
 16403  002D1A                     __end_of___lltoft:
 16404                           	opt stack 0
 16405                           tosu	equ	0xFFF
 16406                           tosh	equ	0xFFE
 16407                           tosl	equ	0xFFD
 16408                           pclath	equ	0xFFA
 16409                           tblptru	equ	0xFF8
 16410                           tblptrh	equ	0xFF7
 16411                           tblptrl	equ	0xFF6
 16412                           tablat	equ	0xFF5
 16413                           prodh	equ	0xFF4
 16414                           prodl	equ	0xFF3
 16415                           intcon	equ	0xFF2
 16416                           intcon2	equ	0xFF1
 16417                           postinc0	equ	0xFEE
 16418                           plusw0	equ	0xFEB
 16419                           wreg	equ	0xFE8
 16420                           indf1	equ	0xFE7
 16421                           postdec1	equ	0xFE5
 16422                           fsr1h	equ	0xFE2
 16423                           fsr1l	equ	0xFE1
 16424                           indf2	equ	0xFDF
 16425                           postinc2	equ	0xFDE
 16426                           postdec2	equ	0xFDD
 16427                           plusw2	equ	0xFDB
 16428                           fsr2h	equ	0xFDA
 16429                           fsr2l	equ	0xFD9
 16430                           status	equ	0xFD8
 16431                           
 16432 ;; *************** function ___lwtoft *****************
 16433 ;; Defined at:
 16434 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 16435 ;; Parameters:    Size  Location     Type
 16436 ;;  c               2   31[COMRAM] unsigned int 
 16437 ;; Auto vars:     Size  Location     Type
 16438 ;;		None
 16439 ;; Return value:  Size  Location     Type
 16440 ;;                  3   31[COMRAM] float 
 16441 ;; Registers used:
 16442 ;;		wreg, status,2, status,0, cstack
 16443 ;; Tracked objects:
 16444 ;;		On entry : 0/0
 16445 ;;		On exit  : 0/0
 16446 ;;		Unchanged: 0/0
 16447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16448 ;;      Params:         3       0       0       0       0       0       0
 16449 ;;      Locals:         0       0       0       0       0       0       0
 16450 ;;      Temps:          0       0       0       0       0       0       0
 16451 ;;      Totals:         3       0       0       0       0       0       0
 16452 ;;Total ram usage:        3 bytes
 16453 ;; Hardware stack levels used:    1
 16454 ;; Hardware stack levels required when called:    4
 16455 ;; This function calls:
 16456 ;;		___ftpack
 16457 ;; This function is called by:
 16458 ;;		_AdcConvert
 16459 ;; This function uses a non-reentrant model
 16460 ;;
 16461                           
 16462                           	psect	text105
 16463  003716                     __ptext105:
 16464                           	opt stack 0
 16465  003716                     ___lwtoft:
 16466                           	opt stack 25
 16467                           
 16468                           ;incstack = 0
 16469  003716  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 16470  00371A  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 16471  00371E  6A1A               	clrf	___ftpack@arg+2,c
 16472  003720  0E8E               	movlw	142
 16473  003722  6E1B               	movwf	___ftpack@exp,c
 16474  003724  0E00               	movlw	0
 16475  003726  6E1C               	movwf	___ftpack@sign,c
 16476  003728  ECA5  F011         	call	___ftpack	;wreg free
 16477  00372C  C018  F020         	movff	?___ftpack,?___lwtoft
 16478  003730  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 16479  003734  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 16480  003738  0012               	return	
 16481  00373A                     __end_of___lwtoft:
 16482                           	opt stack 0
 16483                           tosu	equ	0xFFF
 16484                           tosh	equ	0xFFE
 16485                           tosl	equ	0xFFD
 16486                           pclath	equ	0xFFA
 16487                           tblptru	equ	0xFF8
 16488                           tblptrh	equ	0xFF7
 16489                           tblptrl	equ	0xFF6
 16490                           tablat	equ	0xFF5
 16491                           prodh	equ	0xFF4
 16492                           prodl	equ	0xFF3
 16493                           intcon	equ	0xFF2
 16494                           intcon2	equ	0xFF1
 16495                           postinc0	equ	0xFEE
 16496                           plusw0	equ	0xFEB
 16497                           wreg	equ	0xFE8
 16498                           indf1	equ	0xFE7
 16499                           postdec1	equ	0xFE5
 16500                           fsr1h	equ	0xFE2
 16501                           fsr1l	equ	0xFE1
 16502                           indf2	equ	0xFDF
 16503                           postinc2	equ	0xFDE
 16504                           postdec2	equ	0xFDD
 16505                           plusw2	equ	0xFDB
 16506                           fsr2h	equ	0xFDA
 16507                           fsr2l	equ	0xFD9
 16508                           status	equ	0xFD8
 16509                           
 16510 ;; *************** function ___ftpack *****************
 16511 ;; Defined at:
 16512 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 16513 ;; Parameters:    Size  Location     Type
 16514 ;;  arg             3   23[COMRAM] unsigned um
 16515 ;;  exp             1   26[COMRAM] unsigned char 
 16516 ;;  sign            1   27[COMRAM] unsigned char 
 16517 ;; Auto vars:     Size  Location     Type
 16518 ;;		None
 16519 ;; Return value:  Size  Location     Type
 16520 ;;                  3   23[COMRAM] float 
 16521 ;; Registers used:
 16522 ;;		wreg, status,2, status,0
 16523 ;; Tracked objects:
 16524 ;;		On entry : 0/0
 16525 ;;		On exit  : 0/0
 16526 ;;		Unchanged: 0/0
 16527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16528 ;;      Params:         5       0       0       0       0       0       0
 16529 ;;      Locals:         0       0       0       0       0       0       0
 16530 ;;      Temps:          3       0       0       0       0       0       0
 16531 ;;      Totals:         8       0       0       0       0       0       0
 16532 ;;Total ram usage:        8 bytes
 16533 ;; Hardware stack levels used:    1
 16534 ;; Hardware stack levels required when called:    3
 16535 ;; This function calls:
 16536 ;;		Nothing
 16537 ;; This function is called by:
 16538 ;;		___altoft
 16539 ;;		___awtoft
 16540 ;;		___ftadd
 16541 ;;		___ftdiv
 16542 ;;		___ftmul
 16543 ;;		___lltoft
 16544 ;;		___lwtoft
 16545 ;; This function uses a non-reentrant model
 16546 ;;
 16547                           
 16548                           	psect	text106
 16549  00234A                     __ptext106:
 16550                           	opt stack 0
 16551  00234A                     ___ftpack:
 16552                           	opt stack 20
 16553                           
 16554                           ;incstack = 0
 16555  00234A  501B               	movf	___ftpack@exp,w,c
 16556  00234C  B4D8               	btfsc	status,2,c
 16557  00234E  D005               	goto	u5950
 16558  002350  5018               	movf	___ftpack@arg,w,c
 16559  002352  1019               	iorwf	___ftpack@arg+1,w,c
 16560  002354  101A               	iorwf	___ftpack@arg+2,w,c
 16561  002356  A4D8               	btfss	status,2,c
 16562  002358  D00C               	goto	l1680
 16563  00235A                     u5950:
 16564  00235A  0E00               	movlw	0
 16565  00235C  6E18               	movwf	?___ftpack,c
 16566  00235E  0E00               	movlw	0
 16567  002360  6E19               	movwf	?___ftpack+1,c
 16568  002362  0E00               	movlw	0
 16569  002364  6E1A               	movwf	?___ftpack+2,c
 16570  002366  0012               	return	
 16571  002368  2A1B               	incf	___ftpack@exp,f,c
 16572  00236A  90D8               	bcf	status,0,c
 16573  00236C  321A               	rrcf	___ftpack@arg+2,f,c
 16574  00236E  3219               	rrcf	___ftpack@arg+1,f,c
 16575  002370  3218               	rrcf	___ftpack@arg,f,c
 16576  002372                     l1680:
 16577  002372  0E00               	movlw	0
 16578  002374  1418               	andwf	___ftpack@arg,w,c
 16579  002376  6E1D               	movwf	??___ftpack& (0+255),c
 16580  002378  0E00               	movlw	0
 16581  00237A  1419               	andwf	___ftpack@arg+1,w,c
 16582  00237C  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 16583  00237E  0EFE               	movlw	254
 16584  002380  141A               	andwf	___ftpack@arg+2,w,c
 16585  002382  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 16586  002384  501D               	movf	??___ftpack,w,c
 16587  002386  101E               	iorwf	??___ftpack+1,w,c
 16588  002388  101F               	iorwf	??___ftpack+2,w,c
 16589  00238A  B4D8               	btfsc	status,2,c
 16590  00238C  D00C               	goto	l1683
 16591  00238E  D7EC               	goto	l1681
 16592  002390  2A1B               	incf	___ftpack@exp,f,c
 16593  002392  0E01               	movlw	1
 16594  002394  2618               	addwf	___ftpack@arg,f,c
 16595  002396  0E00               	movlw	0
 16596  002398  2219               	addwfc	___ftpack@arg+1,f,c
 16597  00239A  0E00               	movlw	0
 16598  00239C  221A               	addwfc	___ftpack@arg+2,f,c
 16599  00239E  90D8               	bcf	status,0,c
 16600  0023A0  321A               	rrcf	___ftpack@arg+2,f,c
 16601  0023A2  3219               	rrcf	___ftpack@arg+1,f,c
 16602  0023A4  3218               	rrcf	___ftpack@arg,f,c
 16603  0023A6                     l1683:
 16604  0023A6  0E00               	movlw	0
 16605  0023A8  1418               	andwf	___ftpack@arg,w,c
 16606  0023AA  6E1D               	movwf	??___ftpack& (0+255),c
 16607  0023AC  0E00               	movlw	0
 16608  0023AE  1419               	andwf	___ftpack@arg+1,w,c
 16609  0023B0  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 16610  0023B2  0EFF               	movlw	255
 16611  0023B4  141A               	andwf	___ftpack@arg+2,w,c
 16612  0023B6  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 16613  0023B8  501D               	movf	??___ftpack,w,c
 16614  0023BA  101E               	iorwf	??___ftpack+1,w,c
 16615  0023BC  101F               	iorwf	??___ftpack+2,w,c
 16616  0023BE  B4D8               	btfsc	status,2,c
 16617  0023C0  D006               	goto	l1686
 16618  0023C2  D7E6               	goto	l1684
 16619  0023C4  061B               	decf	___ftpack@exp,f,c
 16620  0023C6  90D8               	bcf	status,0,c
 16621  0023C8  3618               	rlcf	___ftpack@arg,f,c
 16622  0023CA  3619               	rlcf	___ftpack@arg+1,f,c
 16623  0023CC  361A               	rlcf	___ftpack@arg+2,f,c
 16624  0023CE                     l1686:
 16625  0023CE  BE19               	btfsc	___ftpack@arg+1,7,c
 16626  0023D0  D003               	goto	u5990
 16627  0023D2  0E02               	movlw	2
 16628  0023D4  601B               	cpfslt	___ftpack@exp,c
 16629  0023D6  D7F6               	goto	l1687
 16630  0023D8                     u5990:
 16631  0023D8  A01B               	btfss	___ftpack@exp,0,c
 16632  0023DA  9E19               	bcf	___ftpack@arg+1,7,c
 16633  0023DC  90D8               	bcf	status,0,c
 16634  0023DE  321B               	rrcf	___ftpack@exp,f,c
 16635  0023E0  501B               	movf	___ftpack@exp,w,c
 16636  0023E2  121A               	iorwf	___ftpack@arg+2,f,c
 16637  0023E4  501C               	movf	___ftpack@sign,w,c
 16638  0023E6  A4D8               	btfss	status,2,c
 16639  0023E8  8E1A               	bsf	___ftpack@arg+2,7,c
 16640  0023EA  C018  F018         	movff	___ftpack@arg,?___ftpack
 16641  0023EE  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 16642  0023F2  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 16643  0023F6  0012               	return	
 16644  0023F8                     __end_of___ftpack:
 16645                           	opt stack 0
 16646                           tosu	equ	0xFFF
 16647                           tosh	equ	0xFFE
 16648                           tosl	equ	0xFFD
 16649                           pclath	equ	0xFFA
 16650                           tblptru	equ	0xFF8
 16651                           tblptrh	equ	0xFF7
 16652                           tblptrl	equ	0xFF6
 16653                           tablat	equ	0xFF5
 16654                           prodh	equ	0xFF4
 16655                           prodl	equ	0xFF3
 16656                           intcon	equ	0xFF2
 16657                           intcon2	equ	0xFF1
 16658                           postinc0	equ	0xFEE
 16659                           plusw0	equ	0xFEB
 16660                           wreg	equ	0xFE8
 16661                           indf1	equ	0xFE7
 16662                           postdec1	equ	0xFE5
 16663                           fsr1h	equ	0xFE2
 16664                           fsr1l	equ	0xFE1
 16665                           indf2	equ	0xFDF
 16666                           postinc2	equ	0xFDE
 16667                           postdec2	equ	0xFDD
 16668                           plusw2	equ	0xFDB
 16669                           fsr2h	equ	0xFDA
 16670                           fsr2l	equ	0xFD9
 16671                           status	equ	0xFD8
 16672                           
 16673 ;; *************** function _FlashSampleWrite *****************
 16674 ;; Defined at:
 16675 ;;		line 29 in file "FlashApp.c"
 16676 ;; Parameters:    Size  Location     Type
 16677 ;;  sampleData      2   44[COMRAM] unsigned int 
 16678 ;;  channelNum      1   46[COMRAM] unsigned char 
 16679 ;; Auto vars:     Size  Location     Type
 16680 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 16681 ;; Return value:  Size  Location     Type
 16682 ;;                  1    wreg      void 
 16683 ;; Registers used:
 16684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16685 ;; Tracked objects:
 16686 ;;		On entry : 0/0
 16687 ;;		On exit  : 0/0
 16688 ;;		Unchanged: 0/0
 16689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16690 ;;      Params:         3       0       0       0       0       0       0
 16691 ;;      Locals:         0       2       0       0       0       0       0
 16692 ;;      Temps:          0       2       0       0       0       0       0
 16693 ;;      Totals:         3       4       0       0       0       0       0
 16694 ;;Total ram usage:        7 bytes
 16695 ;; Hardware stack levels used:    1
 16696 ;; Hardware stack levels required when called:    5
 16697 ;; This function calls:
 16698 ;;		_FLASH_IsWriteDone
 16699 ;;		_FLASH_WriteBlock
 16700 ;; This function is called by:
 16701 ;;		_AdcConvert
 16702 ;; This function uses a non-reentrant model
 16703 ;;
 16704                           
 16705                           	psect	text107
 16706  0019F0                     __ptext107:
 16707                           	opt stack 0
 16708  0019F0                     _FlashSampleWrite:
 16709                           	opt stack 24
 16710                           
 16711                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 16712                           
 16713                           ;incstack = 0
 16714  0019F0  502F               	movf	FlashSampleWrite@channelNum,w,c
 16715  0019F2  0100               	movlb	0	; () banked
 16716  0019F4  6F60               	movwf	??_FlashSampleWrite& (0+255),b
 16717  0019F6  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
 16718  0019F8  0E0C               	movlw	12
 16719  0019FA                     u8145:
 16720  0019FA  90D8               	bcf	status,0,c
 16721  0019FC  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 16722  0019FE  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 16723  001A00  2EE8               	decfsz	wreg,f,c
 16724  001A02  D7FB               	goto	u8145
 16725  001A04  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 16726  001A08  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 16727                           
 16728                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 16729  001A0C  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 16730  001A0E  122D               	iorwf	FlashSampleWrite@sampleData,f,c
 16731  001A10  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 16732  001A12  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
 16733                           
 16734                           ; BSR set to: 0
 16735                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 16736  001A14  90D8               	bcf	status,0,c
 16737  001A16  35C6               	rlcf	_sampleCount& (0+255),w,b
 16738  001A18  6ED9               	movwf	fsr2l,c
 16739  001A1A  35C7               	rlcf	(_sampleCount+1)& (0+255),w,b
 16740  001A1C  6EDA               	movwf	fsr2h,c
 16741  001A1E  0E6E               	movlw	low _sampleArray
 16742  001A20  26D9               	addwf	fsr2l,f,c
 16743  001A22  0E01               	movlw	high _sampleArray
 16744  001A24  22DA               	addwfc	fsr2h,f,c
 16745  001A26  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 16746  001A2A  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 16747                           
 16748                           ; BSR set to: 0
 16749                           ;FlashApp.c: 35: sampleCount ++;
 16750  001A2E  4BC6               	infsnz	_sampleCount& (0+255),f,b
 16751  001A30  2BC7               	incf	(_sampleCount+1)& (0+255),f,b
 16752                           
 16753                           ; BSR set to: 0
 16754                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 16755  001A32  C0C6  F060         	movff	_sampleCount,??_FlashSampleWrite
 16756  001A36  C0C7  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
 16757  001A3A  90D8               	bcf	status,0,c
 16758  001A3C  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 16759  001A3E  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 16760  001A40  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 16761  001A42  E104               	bnz	u8150
 16762  001A44  0E40               	movlw	64
 16763  001A46  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
 16764  001A48  A0D8               	btfss	status,0,c
 16765  001A4A  0012               	return	
 16766  001A4C                     u8150:
 16767                           
 16768                           ; BSR set to: 0
 16769  001A4C  EC79  F01C         	call	_FLASH_IsWriteDone	;wreg free
 16770  001A50  0900               	iorlw	0
 16771  001A52  B4D8               	btfsc	status,2,c
 16772  001A54  0012               	return	
 16773                           
 16774                           ;FlashApp.c: 38: {
 16775                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 16776  001A56  C040  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 16777  001A5A  C041  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 16778  001A5E  C042  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 16779  001A62  C043  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 16780  001A66  0E6E               	movlw	low _sampleArray
 16781  001A68  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 16782  001A6A  0E01               	movlw	high _sampleArray
 16783  001A6C  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 16784  001A6E  EC93  F010         	call	_FLASH_WriteBlock	;wreg free
 16785                           
 16786                           ;FlashApp.c: 40: writeAddress += (64);
 16787  001A72  0E40               	movlw	64
 16788  001A74  2640               	addwf	_writeAddress,f,c
 16789  001A76  0E00               	movlw	0
 16790  001A78  2241               	addwfc	_writeAddress+1,f,c
 16791  001A7A  2242               	addwfc	_writeAddress+2,f,c
 16792  001A7C  2243               	addwfc	_writeAddress+3,f,c
 16793                           
 16794                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 16795  001A7E  5043               	movf	_writeAddress+3,w,c
 16796  001A80  1042               	iorwf	_writeAddress+2,w,c
 16797  001A82  E106               	bnz	u8170
 16798  001A84  0EF0               	movlw	240
 16799  001A86  5C40               	subwf	_writeAddress,w,c
 16800  001A88  0E7F               	movlw	127
 16801  001A8A  5841               	subwfb	_writeAddress+1,w,c
 16802  001A8C  A0D8               	btfss	status,0,c
 16803  001A8E  D018               	goto	l299
 16804  001A90                     u8170:
 16805                           
 16806                           ;FlashApp.c: 42: {
 16807                           ;FlashApp.c: 43: writeAddress = 0x4000;
 16808  001A90  0E00               	movlw	0
 16809  001A92  6E40               	movwf	_writeAddress,c
 16810  001A94  0E40               	movlw	64
 16811  001A96  6E41               	movwf	_writeAddress+1,c
 16812  001A98  0E00               	movlw	0
 16813  001A9A  6E42               	movwf	_writeAddress+2,c
 16814  001A9C  0E00               	movlw	0
 16815  001A9E  6E43               	movwf	_writeAddress+3,c
 16816                           
 16817                           ;FlashApp.c: 44: isReWriteDone = 1;
 16818  001AA0  0E01               	movlw	1
 16819  001AA2  0100               	movlb	0	; () banked
 16820  001AA4  6FCA               	movwf	_isReWriteDone& (0+255),b
 16821                           
 16822                           ; BSR set to: 0
 16823                           ;FlashApp.c: 45: if (readAddress == 0x4000)
 16824  001AA6  0E40               	movlw	64
 16825  001AA8  19FA               	xorwf	(_readAddress+1)& (0+255),w,b
 16826  001AAA  11F9               	iorwf	_readAddress& (0+255),w,b
 16827  001AAC  11FB               	iorwf	(_readAddress+2)& (0+255),w,b
 16828  001AAE  11FC               	iorwf	(_readAddress+3)& (0+255),w,b
 16829  001AB0  A4D8               	btfss	status,2,c
 16830  001AB2  D006               	goto	l299
 16831                           
 16832                           ; BSR set to: 0
 16833                           ;FlashApp.c: 46: {
 16834                           ;FlashApp.c: 47: readAddress += (64);
 16835  001AB4  0E40               	movlw	64
 16836  001AB6  27F9               	addwf	_readAddress& (0+255),f,b
 16837  001AB8  0E00               	movlw	0
 16838  001ABA  23FA               	addwfc	(_readAddress+1)& (0+255),f,b
 16839  001ABC  23FB               	addwfc	(_readAddress+2)& (0+255),f,b
 16840  001ABE  23FC               	addwfc	(_readAddress+3)& (0+255),f,b
 16841  001AC0                     l299:
 16842                           
 16843                           ;FlashApp.c: 48: }
 16844                           ;FlashApp.c: 49: }
 16845                           ;FlashApp.c: 51: if (numOfValidateSamples < ((0x4000-0x7FF0)/(64)))
 16846                           
 16847                           ; BSR set to: 0
 16848  001AC0  0430               	decf	_numOfValidateSamples,w,c
 16849  001AC2  0EFF               	movlw	255
 16850  001AC4  5831               	subwfb	_numOfValidateSamples+1,w,c
 16851  001AC6  0EFF               	movlw	255
 16852  001AC8  5832               	subwfb	_numOfValidateSamples+2,w,c
 16853  001ACA  0EFF               	movlw	255
 16854  001ACC  5833               	subwfb	_numOfValidateSamples+3,w,c
 16855  001ACE  B0D8               	btfsc	status,0,c
 16856  001AD0  D006               	goto	l300
 16857                           
 16858                           ;FlashApp.c: 52: {
 16859                           ;FlashApp.c: 53: numOfValidateSamples++;
 16860  001AD2  0E01               	movlw	1
 16861  001AD4  2630               	addwf	_numOfValidateSamples,f,c
 16862  001AD6  0E00               	movlw	0
 16863  001AD8  2231               	addwfc	_numOfValidateSamples+1,f,c
 16864  001ADA  2232               	addwfc	_numOfValidateSamples+2,f,c
 16865  001ADC  2233               	addwfc	_numOfValidateSamples+3,f,c
 16866  001ADE                     l300:
 16867                           
 16868                           ;FlashApp.c: 54: }
 16869                           ;FlashApp.c: 55: sampleCount = 0;
 16870  001ADE  0E00               	movlw	0
 16871  001AE0  0100               	movlb	0	; () banked
 16872  001AE2  6FC7               	movwf	(_sampleCount+1)& (0+255),b
 16873  001AE4  0E00               	movlw	0
 16874  001AE6  6FC6               	movwf	_sampleCount& (0+255),b
 16875  001AE8  0012               	return	
 16876  001AEA                     __end_of_FlashSampleWrite:
 16877                           	opt stack 0
 16878                           tosu	equ	0xFFF
 16879                           tosh	equ	0xFFE
 16880                           tosl	equ	0xFFD
 16881                           pclath	equ	0xFFA
 16882                           tblptru	equ	0xFF8
 16883                           tblptrh	equ	0xFF7
 16884                           tblptrl	equ	0xFF6
 16885                           tablat	equ	0xFF5
 16886                           prodh	equ	0xFF4
 16887                           prodl	equ	0xFF3
 16888                           intcon	equ	0xFF2
 16889                           intcon2	equ	0xFF1
 16890                           postinc0	equ	0xFEE
 16891                           plusw0	equ	0xFEB
 16892                           wreg	equ	0xFE8
 16893                           indf1	equ	0xFE7
 16894                           postdec1	equ	0xFE5
 16895                           fsr1h	equ	0xFE2
 16896                           fsr1l	equ	0xFE1
 16897                           indf2	equ	0xFDF
 16898                           postinc2	equ	0xFDE
 16899                           postdec2	equ	0xFDD
 16900                           plusw2	equ	0xFDB
 16901                           fsr2h	equ	0xFDA
 16902                           fsr2l	equ	0xFD9
 16903                           status	equ	0xFD8
 16904                           
 16905 ;; *************** function _FLASH_WriteBlock *****************
 16906 ;; Defined at:
 16907 ;;		line 93 in file "mcc_generated_files/memory.c"
 16908 ;; Parameters:    Size  Location     Type
 16909 ;;  writeAddr       4   28[COMRAM] unsigned long 
 16910 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 16911 ;;		 -> FlashTest@buff(128), sampleArray(64), 
 16912 ;; Auto vars:     Size  Location     Type
 16913 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 16914 ;;  i               1   43[COMRAM] unsigned char 
 16915 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 16916 ;; Return value:  Size  Location     Type
 16917 ;;                  1    wreg      char 
 16918 ;; Registers used:
 16919 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16920 ;; Tracked objects:
 16921 ;;		On entry : 0/0
 16922 ;;		On exit  : 0/0
 16923 ;;		Unchanged: 0/0
 16924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16925 ;;      Params:         6       0       0       0       0       0       0
 16926 ;;      Locals:         6       0       0       0       0       0       0
 16927 ;;      Temps:          4       0       0       0       0       0       0
 16928 ;;      Totals:        16       0       0       0       0       0       0
 16929 ;;Total ram usage:       16 bytes
 16930 ;; Hardware stack levels used:    1
 16931 ;; Hardware stack levels required when called:    4
 16932 ;; This function calls:
 16933 ;;		_FLASH_EraseBlock
 16934 ;; This function is called by:
 16935 ;;		_FlashSampleWrite
 16936 ;;		_FlashTest
 16937 ;;		_FLASH_WriteByte
 16938 ;; This function uses a non-reentrant model
 16939 ;;
 16940                           
 16941                           	psect	text108
 16942  002126                     __ptext108:
 16943                           	opt stack 0
 16944  002126                     _FLASH_WriteBlock:
 16945                           	opt stack 24
 16946                           
 16947                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 16948                           
 16949                           ;incstack = 0
 16950  002126  0EC0               	movlw	192
 16951  002128  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 16952  00212A  0E7F               	movlw	127
 16953  00212C  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 16954  00212E  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 16955  002132  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 16956  002136  5023               	movf	??_FLASH_WriteBlock,w,c
 16957  002138  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 16958  00213A  5024               	movf	??_FLASH_WriteBlock+1,w,c
 16959  00213C  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 16960  00213E  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 16961  002142  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 16962  002146  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 16963  002148  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 16964                           
 16965                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 16966  00214A  0E00               	movlw	0
 16967  00214C  BEF2               	btfsc	intcon,7,c	;volatile
 16968  00214E  0E01               	movlw	1
 16969  002150  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 16970                           
 16971                           ;memory.c: 97: uint8_t i;
 16972                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 16973  002152  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 16974  002154  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 16975  002156  E144               	bnz	l954
 16976  002158  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 16977  00215A  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 16978  00215C  E141               	bnz	l954
 16979  00215E  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 16980  002160  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 16981  002162  E13E               	bnz	l954
 16982  002164  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 16983  002166  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 16984  002168  A4D8               	btfss	status,2,c
 16985  00216A  0012               	return	
 16986                           
 16987                           ;memory.c: 103: }
 16988                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 16989                           
 16990                           ;memory.c: 101: {
 16991                           ;memory.c: 102: return -1;
 16992                           ;	Return value of _FLASH_WriteBlock is never used
 16993  00216C  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 16994  002170  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 16995  002174  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 16996  002178  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 16997  00217C  EC34  F01A         	call	_FLASH_EraseBlock	;wreg free
 16998                           
 16999                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 17000  002180  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 17001                           
 17002                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 17003  002184  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 17004                           
 17005                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 17006  002188  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 17007                           
 17008                           ;memory.c: 114: for (i=0; i<(64); i++)
 17009  00218C  0E00               	movlw	0
 17010  00218E  6E2C               	movwf	FLASH_WriteBlock@i,c
 17011  002190                     l7678:
 17012  002190  0E3F               	movlw	63
 17013  002192  642C               	cpfsgt	FLASH_WriteBlock@i,c
 17014  002194  D001               	goto	l955
 17015  002196  D013               	goto	u7760
 17016  002198                     l955:
 17017                           
 17018                           ;memory.c: 115: {
 17019                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 17020  002198  502C               	movf	FLASH_WriteBlock@i,w,c
 17021  00219A  0D01               	mullw	1
 17022  00219C  50F3               	movf	prodl,w,c
 17023  00219E  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 17024  0021A0  6ED9               	movwf	fsr2l,c
 17025  0021A2  50F4               	movf	prodh,w,c
 17026  0021A4  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 17027  0021A6  6EDA               	movwf	fsr2h,c
 17028  0021A8  50DF               	movf	indf2,w,c
 17029  0021AA  6EF5               	movwf	tablat,c	;volatile
 17030                           
 17031                           ;memory.c: 118: if (i == ((64)-1))
 17032  0021AC  0E3F               	movlw	63
 17033  0021AE  182C               	xorwf	FLASH_WriteBlock@i,w,c
 17034  0021B0  A4D8               	btfss	status,2,c
 17035  0021B2  D002               	goto	l957
 17036  0021B4  000C               	tblwt		*	;# 
 17037                           
 17038                           ;memory.c: 121: }
 17039  0021B6  D001               	goto	l958
 17040  0021B8                     l957:
 17041  0021B8  000D               	tblwt		*+	;# 
 17042  0021BA                     l958:
 17043  0021BA  2A2C               	incf	FLASH_WriteBlock@i,f,c
 17044  0021BC  D7E9               	goto	l7678
 17045  0021BE                     u7760:
 17046                           
 17047                           ;memory.c: 125: }
 17048                           ;memory.c: 126: }
 17049                           ;memory.c: 128: PIR2bits.EEIF = 1;
 17050  0021BE  88A1               	bsf	4001,4,c	;volatile
 17051                           
 17052                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 17053  0021C0  8EA6               	bsf	4006,7,c	;volsfr
 17054                           
 17055                           ;memory.c: 130: EECON1bits.CFGS = 0;
 17056  0021C2  9CA6               	bcf	4006,6,c	;volsfr
 17057                           
 17058                           ;memory.c: 131: EECON1bits.WREN = 1;
 17059  0021C4  84A6               	bsf	4006,2,c	;volsfr
 17060                           
 17061                           ;memory.c: 132: INTCONbits.GIE = 0;
 17062  0021C6  9EF2               	bcf	intcon,7,c	;volatile
 17063                           
 17064                           ;memory.c: 133: EECON2 = 0x55;
 17065  0021C8  0E55               	movlw	85
 17066  0021CA  6EA7               	movwf	4007,c	;volsfr
 17067                           
 17068                           ;memory.c: 134: EECON2 = 0xAA;
 17069  0021CC  0EAA               	movlw	170
 17070  0021CE  6EA7               	movwf	4007,c	;volsfr
 17071                           
 17072                           ;memory.c: 135: EECON1bits.WR = 1;
 17073  0021D0  82A6               	bsf	4006,1,c	;volsfr
 17074                           
 17075                           ;memory.c: 137: EECON1bits.WREN = 0;
 17076  0021D2  94A6               	bcf	4006,2,c	;volsfr
 17077                           
 17078                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 17079  0021D4  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 17080  0021D6  D002               	bra	u7775
 17081  0021D8  9EF2               	bcf	intcon,7,c	;volatile
 17082  0021DA  D001               	bra	u7776
 17083  0021DC                     u7775:
 17084  0021DC  8EF2               	bsf	intcon,7,c	;volatile
 17085  0021DE                     u7776:
 17086  0021DE  0012               	return	
 17087  0021E0                     l954:
 17088  0021E0  0012               	return		;funcret
 17089  0021E2                     __end_of_FLASH_WriteBlock:
 17090                           	opt stack 0
 17091                           tosu	equ	0xFFF
 17092                           tosh	equ	0xFFE
 17093                           tosl	equ	0xFFD
 17094                           pclath	equ	0xFFA
 17095                           tblptru	equ	0xFF8
 17096                           tblptrh	equ	0xFF7
 17097                           tblptrl	equ	0xFF6
 17098                           tablat	equ	0xFF5
 17099                           prodh	equ	0xFF4
 17100                           prodl	equ	0xFF3
 17101                           intcon	equ	0xFF2
 17102                           intcon2	equ	0xFF1
 17103                           postinc0	equ	0xFEE
 17104                           plusw0	equ	0xFEB
 17105                           wreg	equ	0xFE8
 17106                           indf1	equ	0xFE7
 17107                           postdec1	equ	0xFE5
 17108                           fsr1h	equ	0xFE2
 17109                           fsr1l	equ	0xFE1
 17110                           indf2	equ	0xFDF
 17111                           postinc2	equ	0xFDE
 17112                           postdec2	equ	0xFDD
 17113                           plusw2	equ	0xFDB
 17114                           fsr2h	equ	0xFDA
 17115                           fsr2l	equ	0xFD9
 17116                           status	equ	0xFD8
 17117                           
 17118 ;; *************** function _FLASH_EraseBlock *****************
 17119 ;; Defined at:
 17120 ;;		line 144 in file "mcc_generated_files/memory.c"
 17121 ;; Parameters:    Size  Location     Type
 17122 ;;  baseAddr        4   23[COMRAM] unsigned long 
 17123 ;; Auto vars:     Size  Location     Type
 17124 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 17125 ;; Return value:  Size  Location     Type
 17126 ;;                  1    wreg      void 
 17127 ;; Registers used:
 17128 ;;		wreg, status,2
 17129 ;; Tracked objects:
 17130 ;;		On entry : 0/0
 17131 ;;		On exit  : 0/0
 17132 ;;		Unchanged: 0/0
 17133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17134 ;;      Params:         4       0       0       0       0       0       0
 17135 ;;      Locals:         1       0       0       0       0       0       0
 17136 ;;      Temps:          0       0       0       0       0       0       0
 17137 ;;      Totals:         5       0       0       0       0       0       0
 17138 ;;Total ram usage:        5 bytes
 17139 ;; Hardware stack levels used:    1
 17140 ;; Hardware stack levels required when called:    3
 17141 ;; This function calls:
 17142 ;;		Nothing
 17143 ;; This function is called by:
 17144 ;;		_FLASH_WriteBlock
 17145 ;; This function uses a non-reentrant model
 17146 ;;
 17147                           
 17148                           	psect	text109
 17149  003468                     __ptext109:
 17150                           	opt stack 0
 17151  003468                     _FLASH_EraseBlock:
 17152                           	opt stack 24
 17153                           
 17154                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 17155                           
 17156                           ;incstack = 0
 17157  003468  0E00               	movlw	0
 17158  00346A  BEF2               	btfsc	intcon,7,c	;volatile
 17159  00346C  0E01               	movlw	1
 17160  00346E  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 17161                           
 17162                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 17163  003470  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 17164                           
 17165                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 17166  003474  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 17167                           
 17168                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 17169  003478  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 17170                           
 17171                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 17172  00347C  8EA6               	bsf	4006,7,c	;volsfr
 17173                           
 17174                           ;memory.c: 153: EECON1bits.CFGS = 0;
 17175  00347E  9CA6               	bcf	4006,6,c	;volsfr
 17176                           
 17177                           ;memory.c: 154: EECON1bits.WREN = 1;
 17178  003480  84A6               	bsf	4006,2,c	;volsfr
 17179                           
 17180                           ;memory.c: 155: EECON1bits.FREE = 1;
 17181  003482  88A6               	bsf	4006,4,c	;volsfr
 17182                           
 17183                           ;memory.c: 156: INTCONbits.GIE = 0;
 17184  003484  9EF2               	bcf	intcon,7,c	;volatile
 17185                           
 17186                           ;memory.c: 157: EECON2 = 0x55;
 17187  003486  0E55               	movlw	85
 17188  003488  6EA7               	movwf	4007,c	;volsfr
 17189                           
 17190                           ;memory.c: 158: EECON2 = 0xAA;
 17191  00348A  0EAA               	movlw	170
 17192  00348C  6EA7               	movwf	4007,c	;volsfr
 17193                           
 17194                           ;memory.c: 159: EECON1bits.WR = 1;
 17195  00348E  82A6               	bsf	4006,1,c	;volsfr
 17196                           
 17197                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 17198  003490  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 17199  003492  D002               	bra	u7635
 17200  003494  9EF2               	bcf	intcon,7,c	;volatile
 17201  003496  D001               	bra	u7636
 17202  003498                     u7635:
 17203  003498  8EF2               	bsf	intcon,7,c	;volatile
 17204  00349A                     u7636:
 17205  00349A  0012               	return		;funcret
 17206  00349C                     __end_of_FLASH_EraseBlock:
 17207                           	opt stack 0
 17208                           tosu	equ	0xFFF
 17209                           tosh	equ	0xFFE
 17210                           tosl	equ	0xFFD
 17211                           pclath	equ	0xFFA
 17212                           tblptru	equ	0xFF8
 17213                           tblptrh	equ	0xFF7
 17214                           tblptrl	equ	0xFF6
 17215                           tablat	equ	0xFF5
 17216                           prodh	equ	0xFF4
 17217                           prodl	equ	0xFF3
 17218                           intcon	equ	0xFF2
 17219                           intcon2	equ	0xFF1
 17220                           postinc0	equ	0xFEE
 17221                           plusw0	equ	0xFEB
 17222                           wreg	equ	0xFE8
 17223                           indf1	equ	0xFE7
 17224                           postdec1	equ	0xFE5
 17225                           fsr1h	equ	0xFE2
 17226                           fsr1l	equ	0xFE1
 17227                           indf2	equ	0xFDF
 17228                           postinc2	equ	0xFDE
 17229                           postdec2	equ	0xFDD
 17230                           plusw2	equ	0xFDB
 17231                           fsr2h	equ	0xFDA
 17232                           fsr2l	equ	0xFD9
 17233                           status	equ	0xFD8
 17234                           
 17235 ;; *************** function _FLASH_IsWriteDone *****************
 17236 ;; Defined at:
 17237 ;;		line 189 in file "mcc_generated_files/memory.c"
 17238 ;; Parameters:    Size  Location     Type
 17239 ;;		None
 17240 ;; Auto vars:     Size  Location     Type
 17241 ;;		None
 17242 ;; Return value:  Size  Location     Type
 17243 ;;                  1    wreg      unsigned char 
 17244 ;; Registers used:
 17245 ;;		wreg
 17246 ;; Tracked objects:
 17247 ;;		On entry : 0/0
 17248 ;;		On exit  : 0/0
 17249 ;;		Unchanged: 0/0
 17250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17251 ;;      Params:         0       0       0       0       0       0       0
 17252 ;;      Locals:         0       0       0       0       0       0       0
 17253 ;;      Temps:          0       0       0       0       0       0       0
 17254 ;;      Totals:         0       0       0       0       0       0       0
 17255 ;;Total ram usage:        0 bytes
 17256 ;; Hardware stack levels used:    1
 17257 ;; Hardware stack levels required when called:    3
 17258 ;; This function calls:
 17259 ;;		Nothing
 17260 ;; This function is called by:
 17261 ;;		_FlashSampleWrite
 17262 ;;		_FlashReadUart
 17263 ;; This function uses a non-reentrant model
 17264 ;;
 17265                           
 17266                           	psect	text110
 17267  0038F2                     __ptext110:
 17268                           	opt stack 0
 17269  0038F2                     _FLASH_IsWriteDone:
 17270                           	opt stack 24
 17271                           
 17272                           ;memory.c: 191: return (EECON1bits.WR == 0);
 17273                           
 17274                           ;incstack = 0
 17275  0038F2  A2A6               	btfss	4006,1,c	;volsfr
 17276  0038F4  D001               	goto	u7481
 17277  0038F6  D002               	goto	u7480
 17278  0038F8                     u7481:
 17279  0038F8  0E01               	movlw	1
 17280  0038FA  0012               	return	
 17281  0038FC                     u7480:
 17282  0038FC  0E00               	movlw	0
 17283  0038FE  0012               	return	
 17284  003900                     __end_of_FLASH_IsWriteDone:
 17285                           	opt stack 0
 17286                           tosu	equ	0xFFF
 17287                           tosh	equ	0xFFE
 17288                           tosl	equ	0xFFD
 17289                           pclath	equ	0xFFA
 17290                           tblptru	equ	0xFF8
 17291                           tblptrh	equ	0xFF7
 17292                           tblptrl	equ	0xFF6
 17293                           tablat	equ	0xFF5
 17294                           prodh	equ	0xFF4
 17295                           prodl	equ	0xFF3
 17296                           intcon	equ	0xFF2
 17297                           intcon2	equ	0xFF1
 17298                           postinc0	equ	0xFEE
 17299                           plusw0	equ	0xFEB
 17300                           wreg	equ	0xFE8
 17301                           indf1	equ	0xFE7
 17302                           postdec1	equ	0xFE5
 17303                           fsr1h	equ	0xFE2
 17304                           fsr1l	equ	0xFE1
 17305                           indf2	equ	0xFDF
 17306                           postinc2	equ	0xFDE
 17307                           postdec2	equ	0xFDD
 17308                           plusw2	equ	0xFDB
 17309                           fsr2h	equ	0xFDA
 17310                           fsr2l	equ	0xFD9
 17311                           status	equ	0xFD8
 17312                           
 17313 ;; *************** function _ADC_GetConversion *****************
 17314 ;; Defined at:
 17315 ;;		line 106 in file "mcc_generated_files/adc.c"
 17316 ;; Parameters:    Size  Location     Type
 17317 ;;  channel         1    wreg     enum E6975
 17318 ;; Auto vars:     Size  Location     Type
 17319 ;;  channel         1   27[COMRAM] enum E6975
 17320 ;; Return value:  Size  Location     Type
 17321 ;;                  2   23[COMRAM] unsigned int 
 17322 ;; Registers used:
 17323 ;;		wreg, status,2, status,0
 17324 ;; Tracked objects:
 17325 ;;		On entry : 0/0
 17326 ;;		On exit  : 0/0
 17327 ;;		Unchanged: 0/0
 17328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17329 ;;      Params:         2       0       0       0       0       0       0
 17330 ;;      Locals:         1       0       0       0       0       0       0
 17331 ;;      Temps:          2       0       0       0       0       0       0
 17332 ;;      Totals:         5       0       0       0       0       0       0
 17333 ;;Total ram usage:        5 bytes
 17334 ;; Hardware stack levels used:    1
 17335 ;; Hardware stack levels required when called:    3
 17336 ;; This function calls:
 17337 ;;		Nothing
 17338 ;; This function is called by:
 17339 ;;		_AdcConvert
 17340 ;; This function uses a non-reentrant model
 17341 ;;
 17342                           
 17343                           	psect	text111
 17344  00355C                     __ptext111:
 17345                           	opt stack 0
 17346  00355C                     _ADC_GetConversion:
 17347                           	opt stack 26
 17348                           
 17349                           ;incstack = 0
 17350                           ;ADC_GetConversion@channel stored from wreg
 17351  00355C  6E1C               	movwf	ADC_GetConversion@channel,c
 17352                           
 17353                           ;adc.c: 109: ADCON0bits.CHS = channel;
 17354  00355E  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 17355  003562  461A               	rlncf	??_ADC_GetConversion,f,c
 17356  003564  461A               	rlncf	??_ADC_GetConversion,f,c
 17357  003566  50C2               	movf	4034,w,c	;volatile
 17358  003568  181A               	xorwf	??_ADC_GetConversion,w,c
 17359  00356A  0B83               	andlw	-125
 17360  00356C  181A               	xorwf	??_ADC_GetConversion,w,c
 17361  00356E  6EC2               	movwf	4034,c	;volatile
 17362                           
 17363                           ;adc.c: 112: ADCON0bits.ADON = 1;
 17364  003570  80C2               	bsf	4034,0,c	;volatile
 17365                           
 17366                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 17367  003572  82C2               	bsf	4034,1,c	;volatile
 17368  003574                     
 17369                           ;adc.c: 119: {
 17370  003574  B2C2               	btfsc	4034,1,c	;volatile
 17371  003576  D7FE               	goto	l1067
 17372                           
 17373                           ;adc.c: 120: }
 17374                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 17375  003578  50C4               	movf	4036,w,c	;volatile
 17376  00357A  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 17377  00357C  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 17378  00357E  50C3               	movf	4035,w,c	;volatile
 17379  003580  241A               	addwf	??_ADC_GetConversion,w,c
 17380  003582  6E18               	movwf	?_ADC_GetConversion,c
 17381  003584  0E00               	movlw	0
 17382  003586  201B               	addwfc	??_ADC_GetConversion+1,w,c
 17383  003588  6E19               	movwf	?_ADC_GetConversion+1,c
 17384  00358A  0012               	return	
 17385  00358C                     __end_of_ADC_GetConversion:
 17386                           	opt stack 0
 17387                           tosu	equ	0xFFF
 17388                           tosh	equ	0xFFE
 17389                           tosl	equ	0xFFD
 17390                           pclath	equ	0xFFA
 17391                           tblptru	equ	0xFF8
 17392                           tblptrh	equ	0xFF7
 17393                           tblptrl	equ	0xFF6
 17394                           tablat	equ	0xFF5
 17395                           prodh	equ	0xFF4
 17396                           prodl	equ	0xFF3
 17397                           intcon	equ	0xFF2
 17398                           intcon2	equ	0xFF1
 17399                           postinc0	equ	0xFEE
 17400                           plusw0	equ	0xFEB
 17401                           wreg	equ	0xFE8
 17402                           indf1	equ	0xFE7
 17403                           postdec1	equ	0xFE5
 17404                           fsr1h	equ	0xFE2
 17405                           fsr1l	equ	0xFE1
 17406                           indf2	equ	0xFDF
 17407                           postinc2	equ	0xFDE
 17408                           postdec2	equ	0xFDD
 17409                           plusw2	equ	0xFDB
 17410                           fsr2h	equ	0xFDA
 17411                           fsr2l	equ	0xFD9
 17412                           status	equ	0xFD8
 17413                           
 17414 ;; *************** function _INTERRUPT_InterruptManager *****************
 17415 ;; Defined at:
 17416 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 17417 ;; Parameters:    Size  Location     Type
 17418 ;;		None
 17419 ;; Auto vars:     Size  Location     Type
 17420 ;;		None
 17421 ;; Return value:  Size  Location     Type
 17422 ;;                  1    wreg      void 
 17423 ;; Registers used:
 17424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17425 ;; Tracked objects:
 17426 ;;		On entry : 0/0
 17427 ;;		On exit  : 0/0
 17428 ;;		Unchanged: 0/0
 17429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17430 ;;      Params:         0       0       0       0       0       0       0
 17431 ;;      Locals:         0       0       0       0       0       0       0
 17432 ;;      Temps:         18       0       0       0       0       0       0
 17433 ;;      Totals:        18       0       0       0       0       0       0
 17434 ;;Total ram usage:       18 bytes
 17435 ;; Hardware stack levels used:    1
 17436 ;; Hardware stack levels required when called:    2
 17437 ;; This function calls:
 17438 ;;		_EUSART1_Receive_ISR
 17439 ;;		_EUSART1_Transmit_ISR
 17440 ;;		_MEMORY_ISR
 17441 ;;		_PIN_MANAGER_IOC
 17442 ;;		_TMR0_ISR
 17443 ;; This function is called by:
 17444 ;;		Interrupt level 2
 17445 ;; This function uses a non-reentrant model
 17446 ;;
 17447                           
 17448                           	psect	intcode
 17449  000008                     __pintcode:
 17450                           	opt stack 0
 17451  000008                     _INTERRUPT_InterruptManager:
 17452                           	opt stack 20
 17453                           
 17454                           ;incstack = 0
 17455  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 17456  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 17457  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 17458  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 17459  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 17460  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 17461  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 17462  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 17463  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 17464  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 17465  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 17466  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 17467  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 17468  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 17469  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 17470  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 17471  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 17472  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 17473  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 17474                           
 17475                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 17476  000052  B6F2               	btfsc	intcon,3,c	;volatile
 17477  000054  A0F2               	btfss	intcon,0,c	;volatile
 17478  000056  D003               	goto	i2l792
 17479                           
 17480                           ;interrupt_manager.c: 61: {
 17481                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 17482  000058  ECB4  F01C         	call	_PIN_MANAGER_IOC	;wreg free
 17483                           
 17484                           ;interrupt_manager.c: 63: }
 17485  00005C  D019               	goto	i2l801
 17486  00005E                     i2l792:
 17487                           
 17488                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 17489  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 17490  000060  A4F2               	btfss	intcon,2,c	;volatile
 17491  000062  D003               	goto	i2l794
 17492                           
 17493                           ;interrupt_manager.c: 65: {
 17494                           ;interrupt_manager.c: 66: TMR0_ISR();
 17495  000064  EC2D  F013         	call	_TMR0_ISR	;wreg free
 17496                           
 17497                           ;interrupt_manager.c: 67: }
 17498  000068  D013               	goto	i2l801
 17499  00006A                     i2l794:
 17500                           
 17501                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 17502  00006A  ACF2               	btfss	intcon,6,c	;volatile
 17503  00006C  D011               	goto	i2l801
 17504                           
 17505                           ;interrupt_manager.c: 69: {
 17506                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 17507  00006E  B8A0               	btfsc	4000,4,c	;volatile
 17508  000070  A8A1               	btfss	4001,4,c	;volatile
 17509  000072  D003               	goto	i2l797
 17510                           
 17511                           ;interrupt_manager.c: 71: {
 17512                           ;interrupt_manager.c: 72: MEMORY_ISR();
 17513  000074  ECB6  F01C         	call	_MEMORY_ISR	;wreg free
 17514                           
 17515                           ;interrupt_manager.c: 73: }
 17516  000078  D00B               	goto	i2l801
 17517  00007A                     i2l797:
 17518                           
 17519                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 17520  00007A  B89D               	btfsc	3997,4,c	;volatile
 17521  00007C  A89E               	btfss	3998,4,c	;volatile
 17522  00007E  D003               	goto	i2l799
 17523                           
 17524                           ;interrupt_manager.c: 75: {
 17525                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 17526  000080  ECAD  F019         	call	_EUSART1_Transmit_ISR	;wreg free
 17527                           
 17528                           ;interrupt_manager.c: 77: }
 17529  000084  D005               	goto	i2l801
 17530  000086                     i2l799:
 17531                           
 17532                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 17533  000086  BA9D               	btfsc	3997,5,c	;volatile
 17534  000088  AA9E               	btfss	3998,5,c	;volatile
 17535  00008A  D002               	goto	i2l801
 17536                           
 17537                           ;interrupt_manager.c: 79: {
 17538                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 17539  00008C  ECC6  F01A         	call	_EUSART1_Receive_ISR	;wreg free
 17540  000090                     i2l801:
 17541                           
 17542                           ;interrupt_manager.c: 87: else
 17543                           ;interrupt_manager.c: 88: {
 17544                           
 17545                           ;interrupt_manager.c: 85: }
 17546                           ;interrupt_manager.c: 86: }
 17547                           
 17548                           ;interrupt_manager.c: 82: else
 17549                           ;interrupt_manager.c: 83: {
 17550  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 17551  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 17552  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 17553  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 17554  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 17555  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 17556  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 17557  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 17558  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 17559  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 17560  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 17561  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 17562  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 17563  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 17564  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 17565  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 17566  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 17567  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 17568  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 17569  0000DA  0011               	retfie		f
 17570  0000DC                     __end_of_INTERRUPT_InterruptManager:
 17571                           	opt stack 0
 17572                           tosu	equ	0xFFF
 17573                           tosh	equ	0xFFE
 17574                           tosl	equ	0xFFD
 17575                           pclatu	equ	0xFFB
 17576                           pclath	equ	0xFFA
 17577                           tblptru	equ	0xFF8
 17578                           tblptrh	equ	0xFF7
 17579                           tblptrl	equ	0xFF6
 17580                           tablat	equ	0xFF5
 17581                           prodh	equ	0xFF4
 17582                           prodl	equ	0xFF3
 17583                           intcon	equ	0xFF2
 17584                           intcon2	equ	0xFF1
 17585                           postinc0	equ	0xFEE
 17586                           plusw0	equ	0xFEB
 17587                           fsr0h	equ	0xFEA
 17588                           fsr0l	equ	0xFE9
 17589                           wreg	equ	0xFE8
 17590                           indf1	equ	0xFE7
 17591                           postdec1	equ	0xFE5
 17592                           fsr1h	equ	0xFE2
 17593                           fsr1l	equ	0xFE1
 17594                           indf2	equ	0xFDF
 17595                           postinc2	equ	0xFDE
 17596                           postdec2	equ	0xFDD
 17597                           plusw2	equ	0xFDB
 17598                           fsr2h	equ	0xFDA
 17599                           fsr2l	equ	0xFD9
 17600                           status	equ	0xFD8
 17601                           
 17602 ;; *************** function _TMR0_ISR *****************
 17603 ;; Defined at:
 17604 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 17605 ;; Parameters:    Size  Location     Type
 17606 ;;		None
 17607 ;; Auto vars:     Size  Location     Type
 17608 ;;		None
 17609 ;; Return value:  Size  Location     Type
 17610 ;;                  1    wreg      void 
 17611 ;; Registers used:
 17612 ;;		wreg, status,2, status,0, cstack
 17613 ;; Tracked objects:
 17614 ;;		On entry : 0/0
 17615 ;;		On exit  : 0/0
 17616 ;;		Unchanged: 0/0
 17617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17618 ;;      Params:         0       0       0       0       0       0       0
 17619 ;;      Locals:         0       0       0       0       0       0       0
 17620 ;;      Temps:          0       0       0       0       0       0       0
 17621 ;;      Totals:         0       0       0       0       0       0       0
 17622 ;;Total ram usage:        0 bytes
 17623 ;; Hardware stack levels used:    1
 17624 ;; Hardware stack levels required when called:    1
 17625 ;; This function calls:
 17626 ;;		___lwmod
 17627 ;; This function is called by:
 17628 ;;		_INTERRUPT_InterruptManager
 17629 ;; This function uses a non-reentrant model
 17630 ;;
 17631                           
 17632                           	psect	text113
 17633  00265A                     __ptext113:
 17634                           	opt stack 0
 17635  00265A                     _TMR0_ISR:
 17636                           	opt stack 20
 17637                           
 17638                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 17639                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 17640                           
 17641                           ;incstack = 0
 17642  00265A  94F2               	bcf	intcon,2,c	;volatile
 17643                           
 17644                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 17645  00265C  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 17646  00265E  6ED7               	movwf	4055,c	;volatile
 17647                           
 17648                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 17649  002660  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 17650                           
 17651                           ;tmr0.c: 146: CountCallBack ++;
 17652  002664  4A34               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 17653  002666  2A35               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 17654                           
 17655                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 17656  002668  C034  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 17657  00266C  C035  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 17658  002670  0E00               	movlw	0
 17659  002672  6E04               	movwf	___lwmod@divisor+1,c
 17660  002674  0E14               	movlw	20
 17661  002676  6E03               	movwf	___lwmod@divisor,c
 17662  002678  ECFA  F018         	call	___lwmod	;wreg free
 17663  00267C  5001               	movf	?___lwmod,w,c
 17664  00267E  1002               	iorwf	?___lwmod+1,w,c
 17665  002680  A4D8               	btfss	status,2,c
 17666  002682  D003               	goto	i2l1023
 17667                           
 17668                           ;tmr0.c: 148: {
 17669                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 17670  002684  0E01               	movlw	1
 17671  002686  0100               	movlb	0	; () banked
 17672  002688  6FD8               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
 17673  00268A                     i2l1023:
 17674                           
 17675                           ;tmr0.c: 150: }
 17676                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 17677                           
 17678                           ; BSR set to: 0
 17679  00268A  C034  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 17680  00268E  C035  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 17681  002692  0E00               	movlw	0
 17682  002694  6E04               	movwf	___lwmod@divisor+1,c
 17683  002696  0E32               	movlw	50
 17684  002698  6E03               	movwf	___lwmod@divisor,c
 17685  00269A  ECFA  F018         	call	___lwmod	;wreg free
 17686  00269E  5001               	movf	?___lwmod,w,c
 17687  0026A0  1002               	iorwf	?___lwmod+1,w,c
 17688  0026A2  A4D8               	btfss	status,2,c
 17689  0026A4  D003               	goto	i2l1024
 17690                           
 17691                           ;tmr0.c: 153: {
 17692                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 17693  0026A6  0E01               	movlw	1
 17694  0026A8  0100               	movlb	0	; () banked
 17695  0026AA  6FD7               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
 17696  0026AC                     i2l1024:
 17697                           
 17698                           ;tmr0.c: 155: }
 17699                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 17700                           
 17701                           ; BSR set to: 0
 17702  0026AC  C034  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 17703  0026B0  C035  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 17704  0026B4  0E01               	movlw	1
 17705  0026B6  6E04               	movwf	___lwmod@divisor+1,c
 17706  0026B8  0E2C               	movlw	44
 17707  0026BA  6E03               	movwf	___lwmod@divisor,c
 17708  0026BC  ECFA  F018         	call	___lwmod	;wreg free
 17709  0026C0  5001               	movf	?___lwmod,w,c
 17710  0026C2  1002               	iorwf	?___lwmod+1,w,c
 17711  0026C4  A4D8               	btfss	status,2,c
 17712  0026C6  D003               	goto	i2l1025
 17713                           
 17714                           ;tmr0.c: 157: {
 17715                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 17716  0026C8  0E01               	movlw	1
 17717  0026CA  0100               	movlb	0	; () banked
 17718  0026CC  6FD6               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
 17719  0026CE                     i2l1025:
 17720                           
 17721                           ;tmr0.c: 159: }
 17722                           ;tmr0.c: 161: CountCallBack %= 300;
 17723                           
 17724                           ; BSR set to: 0
 17725  0026CE  C034  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 17726  0026D2  C035  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 17727  0026D6  0E01               	movlw	1
 17728  0026D8  6E04               	movwf	___lwmod@divisor+1,c
 17729  0026DA  0E2C               	movlw	44
 17730  0026DC  6E03               	movwf	___lwmod@divisor,c
 17731  0026DE  ECFA  F018         	call	___lwmod	;wreg free
 17732  0026E2  C001  F034         	movff	?___lwmod,TMR0_ISR@CountCallBack	;volatile
 17733  0026E6  C002  F035         	movff	?___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 17734  0026EA  0012               	return		;funcret
 17735  0026EC                     __end_of_TMR0_ISR:
 17736                           	opt stack 0
 17737                           tosu	equ	0xFFF
 17738                           tosh	equ	0xFFE
 17739                           tosl	equ	0xFFD
 17740                           pclatu	equ	0xFFB
 17741                           pclath	equ	0xFFA
 17742                           tblptru	equ	0xFF8
 17743                           tblptrh	equ	0xFF7
 17744                           tblptrl	equ	0xFF6
 17745                           tablat	equ	0xFF5
 17746                           prodh	equ	0xFF4
 17747                           prodl	equ	0xFF3
 17748                           intcon	equ	0xFF2
 17749                           intcon2	equ	0xFF1
 17750                           postinc0	equ	0xFEE
 17751                           plusw0	equ	0xFEB
 17752                           fsr0h	equ	0xFEA
 17753                           fsr0l	equ	0xFE9
 17754                           wreg	equ	0xFE8
 17755                           indf1	equ	0xFE7
 17756                           postdec1	equ	0xFE5
 17757                           fsr1h	equ	0xFE2
 17758                           fsr1l	equ	0xFE1
 17759                           indf2	equ	0xFDF
 17760                           postinc2	equ	0xFDE
 17761                           postdec2	equ	0xFDD
 17762                           plusw2	equ	0xFDB
 17763                           fsr2h	equ	0xFDA
 17764                           fsr2l	equ	0xFD9
 17765                           status	equ	0xFD8
 17766                           
 17767 ;; *************** function ___lwmod *****************
 17768 ;; Defined at:
 17769 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 17770 ;; Parameters:    Size  Location     Type
 17771 ;;  dividend        2    0[COMRAM] unsigned int 
 17772 ;;  divisor         2    2[COMRAM] unsigned int 
 17773 ;; Auto vars:     Size  Location     Type
 17774 ;;  counter         1    4[COMRAM] unsigned char 
 17775 ;; Return value:  Size  Location     Type
 17776 ;;                  2    0[COMRAM] unsigned int 
 17777 ;; Registers used:
 17778 ;;		wreg, status,2, status,0
 17779 ;; Tracked objects:
 17780 ;;		On entry : 0/0
 17781 ;;		On exit  : 0/0
 17782 ;;		Unchanged: 0/0
 17783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17784 ;;      Params:         4       0       0       0       0       0       0
 17785 ;;      Locals:         1       0       0       0       0       0       0
 17786 ;;      Temps:          0       0       0       0       0       0       0
 17787 ;;      Totals:         5       0       0       0       0       0       0
 17788 ;;Total ram usage:        5 bytes
 17789 ;; Hardware stack levels used:    1
 17790 ;; This function calls:
 17791 ;;		Nothing
 17792 ;; This function is called by:
 17793 ;;		_TMR0_ISR
 17794 ;; This function uses a non-reentrant model
 17795 ;;
 17796                           
 17797                           	psect	text114
 17798  0031F4                     __ptext114:
 17799                           	opt stack 0
 17800  0031F4                     ___lwmod:
 17801                           	opt stack 20
 17802                           
 17803                           ;incstack = 0
 17804  0031F4  5003               	movf	___lwmod@divisor,w,c
 17805  0031F6  1004               	iorwf	___lwmod@divisor+1,w,c
 17806  0031F8  B4D8               	btfsc	status,2,c
 17807  0031FA  D018               	goto	i2l1884
 17808  0031FC  0E01               	movlw	1
 17809  0031FE  6E05               	movwf	___lwmod@counter,c
 17810  003200  D004               	goto	i2l1879
 17811  003202  90D8               	bcf	status,0,c
 17812  003204  3603               	rlcf	___lwmod@divisor,f,c
 17813  003206  3604               	rlcf	___lwmod@divisor+1,f,c
 17814  003208  2A05               	incf	___lwmod@counter,f,c
 17815  00320A                     i2l1879:
 17816  00320A  AE04               	btfss	___lwmod@divisor+1,7,c
 17817  00320C  D7FA               	goto	i2l1880
 17818  00320E                     i2u532_40:
 17819  00320E  5003               	movf	___lwmod@divisor,w,c
 17820  003210  5C01               	subwf	___lwmod@dividend,w,c
 17821  003212  5004               	movf	___lwmod@divisor+1,w,c
 17822  003214  5802               	subwfb	___lwmod@dividend+1,w,c
 17823  003216  A0D8               	btfss	status,0,c
 17824  003218  D004               	goto	i2l1883
 17825  00321A  5003               	movf	___lwmod@divisor,w,c
 17826  00321C  5E01               	subwf	___lwmod@dividend,f,c
 17827  00321E  5004               	movf	___lwmod@divisor+1,w,c
 17828  003220  5A02               	subwfb	___lwmod@dividend+1,f,c
 17829  003222                     i2l1883:
 17830  003222  90D8               	bcf	status,0,c
 17831  003224  3204               	rrcf	___lwmod@divisor+1,f,c
 17832  003226  3203               	rrcf	___lwmod@divisor,f,c
 17833  003228  2E05               	decfsz	___lwmod@counter,f,c
 17834  00322A  D7F1               	goto	i2u532_40
 17835  00322C                     i2l1884:
 17836  00322C  C001  F001         	movff	___lwmod@dividend,?___lwmod
 17837  003230  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 17838  003234  0012               	return		;funcret
 17839  003236                     __end_of___lwmod:
 17840                           	opt stack 0
 17841                           tosu	equ	0xFFF
 17842                           tosh	equ	0xFFE
 17843                           tosl	equ	0xFFD
 17844                           pclatu	equ	0xFFB
 17845                           pclath	equ	0xFFA
 17846                           tblptru	equ	0xFF8
 17847                           tblptrh	equ	0xFF7
 17848                           tblptrl	equ	0xFF6
 17849                           tablat	equ	0xFF5
 17850                           prodh	equ	0xFF4
 17851                           prodl	equ	0xFF3
 17852                           intcon	equ	0xFF2
 17853                           intcon2	equ	0xFF1
 17854                           postinc0	equ	0xFEE
 17855                           plusw0	equ	0xFEB
 17856                           fsr0h	equ	0xFEA
 17857                           fsr0l	equ	0xFE9
 17858                           wreg	equ	0xFE8
 17859                           indf1	equ	0xFE7
 17860                           postdec1	equ	0xFE5
 17861                           fsr1h	equ	0xFE2
 17862                           fsr1l	equ	0xFE1
 17863                           indf2	equ	0xFDF
 17864                           postinc2	equ	0xFDE
 17865                           postdec2	equ	0xFDD
 17866                           plusw2	equ	0xFDB
 17867                           fsr2h	equ	0xFDA
 17868                           fsr2l	equ	0xFD9
 17869                           status	equ	0xFD8
 17870                           
 17871 ;; *************** function _PIN_MANAGER_IOC *****************
 17872 ;; Defined at:
 17873 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 17874 ;; Parameters:    Size  Location     Type
 17875 ;;		None
 17876 ;; Auto vars:     Size  Location     Type
 17877 ;;		None
 17878 ;; Return value:  Size  Location     Type
 17879 ;;                  1    wreg      void 
 17880 ;; Registers used:
 17881 ;;		None
 17882 ;; Tracked objects:
 17883 ;;		On entry : 0/0
 17884 ;;		On exit  : 0/0
 17885 ;;		Unchanged: 0/0
 17886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17887 ;;      Params:         0       0       0       0       0       0       0
 17888 ;;      Locals:         0       0       0       0       0       0       0
 17889 ;;      Temps:          0       0       0       0       0       0       0
 17890 ;;      Totals:         0       0       0       0       0       0       0
 17891 ;;Total ram usage:        0 bytes
 17892 ;; Hardware stack levels used:    1
 17893 ;; This function calls:
 17894 ;;		Nothing
 17895 ;; This function is called by:
 17896 ;;		_INTERRUPT_InterruptManager
 17897 ;; This function uses a non-reentrant model
 17898 ;;
 17899                           
 17900                           	psect	text115
 17901  003968                     __ptext115:
 17902                           	opt stack 0
 17903  003968                     _PIN_MANAGER_IOC:
 17904                           	opt stack 21
 17905                           
 17906                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 17907                           
 17908                           ;incstack = 0
 17909  003968  90F2               	bcf	intcon,0,c	;volatile
 17910  00396A  0012               	return		;funcret
 17911  00396C                     __end_of_PIN_MANAGER_IOC:
 17912                           	opt stack 0
 17913                           tosu	equ	0xFFF
 17914                           tosh	equ	0xFFE
 17915                           tosl	equ	0xFFD
 17916                           pclatu	equ	0xFFB
 17917                           pclath	equ	0xFFA
 17918                           tblptru	equ	0xFF8
 17919                           tblptrh	equ	0xFF7
 17920                           tblptrl	equ	0xFF6
 17921                           tablat	equ	0xFF5
 17922                           prodh	equ	0xFF4
 17923                           prodl	equ	0xFF3
 17924                           intcon	equ	0xFF2
 17925                           intcon2	equ	0xFF1
 17926                           postinc0	equ	0xFEE
 17927                           plusw0	equ	0xFEB
 17928                           fsr0h	equ	0xFEA
 17929                           fsr0l	equ	0xFE9
 17930                           wreg	equ	0xFE8
 17931                           indf1	equ	0xFE7
 17932                           postdec1	equ	0xFE5
 17933                           fsr1h	equ	0xFE2
 17934                           fsr1l	equ	0xFE1
 17935                           indf2	equ	0xFDF
 17936                           postinc2	equ	0xFDE
 17937                           postdec2	equ	0xFDD
 17938                           plusw2	equ	0xFDB
 17939                           fsr2h	equ	0xFDA
 17940                           fsr2l	equ	0xFD9
 17941                           status	equ	0xFD8
 17942                           
 17943 ;; *************** function _MEMORY_ISR *****************
 17944 ;; Defined at:
 17945 ;;		line 206 in file "mcc_generated_files/memory.c"
 17946 ;; Parameters:    Size  Location     Type
 17947 ;;		None
 17948 ;; Auto vars:     Size  Location     Type
 17949 ;;		None
 17950 ;; Return value:  Size  Location     Type
 17951 ;;                  1    wreg      void 
 17952 ;; Registers used:
 17953 ;;		None
 17954 ;; Tracked objects:
 17955 ;;		On entry : 0/0
 17956 ;;		On exit  : 0/0
 17957 ;;		Unchanged: 0/0
 17958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17959 ;;      Params:         0       0       0       0       0       0       0
 17960 ;;      Locals:         0       0       0       0       0       0       0
 17961 ;;      Temps:          0       0       0       0       0       0       0
 17962 ;;      Totals:         0       0       0       0       0       0       0
 17963 ;;Total ram usage:        0 bytes
 17964 ;; Hardware stack levels used:    1
 17965 ;; This function calls:
 17966 ;;		Nothing
 17967 ;; This function is called by:
 17968 ;;		_INTERRUPT_InterruptManager
 17969 ;; This function uses a non-reentrant model
 17970 ;;
 17971                           
 17972                           	psect	text116
 17973  00396C                     __ptext116:
 17974                           	opt stack 0
 17975  00396C                     _MEMORY_ISR:
 17976                           	opt stack 21
 17977                           
 17978                           ;memory.c: 209: PIR2bits.EEIF = 0;
 17979                           
 17980                           ;incstack = 0
 17981  00396C  98A1               	bcf	4001,4,c	;volatile
 17982  00396E  0012               	return		;funcret
 17983  003970                     __end_of_MEMORY_ISR:
 17984                           	opt stack 0
 17985                           tosu	equ	0xFFF
 17986                           tosh	equ	0xFFE
 17987                           tosl	equ	0xFFD
 17988                           pclatu	equ	0xFFB
 17989                           pclath	equ	0xFFA
 17990                           tblptru	equ	0xFF8
 17991                           tblptrh	equ	0xFF7
 17992                           tblptrl	equ	0xFF6
 17993                           tablat	equ	0xFF5
 17994                           prodh	equ	0xFF4
 17995                           prodl	equ	0xFF3
 17996                           intcon	equ	0xFF2
 17997                           intcon2	equ	0xFF1
 17998                           postinc0	equ	0xFEE
 17999                           plusw0	equ	0xFEB
 18000                           fsr0h	equ	0xFEA
 18001                           fsr0l	equ	0xFE9
 18002                           wreg	equ	0xFE8
 18003                           indf1	equ	0xFE7
 18004                           postdec1	equ	0xFE5
 18005                           fsr1h	equ	0xFE2
 18006                           fsr1l	equ	0xFE1
 18007                           indf2	equ	0xFDF
 18008                           postinc2	equ	0xFDE
 18009                           postdec2	equ	0xFDD
 18010                           plusw2	equ	0xFDB
 18011                           fsr2h	equ	0xFDA
 18012                           fsr2l	equ	0xFD9
 18013                           status	equ	0xFD8
 18014                           
 18015 ;; *************** function _EUSART1_Transmit_ISR *****************
 18016 ;; Defined at:
 18017 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 18018 ;; Parameters:    Size  Location     Type
 18019 ;;		None
 18020 ;; Auto vars:     Size  Location     Type
 18021 ;;		None
 18022 ;; Return value:  Size  Location     Type
 18023 ;;                  1    wreg      void 
 18024 ;; Registers used:
 18025 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18026 ;; Tracked objects:
 18027 ;;		On entry : 0/0
 18028 ;;		On exit  : 0/0
 18029 ;;		Unchanged: 0/0
 18030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18031 ;;      Params:         0       0       0       0       0       0       0
 18032 ;;      Locals:         0       0       0       0       0       0       0
 18033 ;;      Temps:          0       0       0       0       0       0       0
 18034 ;;      Totals:         0       0       0       0       0       0       0
 18035 ;;Total ram usage:        0 bytes
 18036 ;; Hardware stack levels used:    1
 18037 ;; This function calls:
 18038 ;;		Nothing
 18039 ;; This function is called by:
 18040 ;;		_INTERRUPT_InterruptManager
 18041 ;; This function uses a non-reentrant model
 18042 ;;
 18043                           
 18044                           	psect	text117
 18045  00335A                     __ptext117:
 18046                           	opt stack 0
 18047  00335A                     _EUSART1_Transmit_ISR:
 18048                           	opt stack 21
 18049                           
 18050                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 18051                           
 18052                           ;incstack = 0
 18053  00335A  0E46               	movlw	70
 18054  00335C  0100               	movlb	0	; () banked
 18055  00335E  61FF               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 18056  003360  D012               	goto	i2l863
 18057                           
 18058                           ; BSR set to: 0
 18059                           ;eusart1.c: 186: {
 18060                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 18061  003362  5038               	movf	_eusart1TxTail,w,c	;volatile
 18062  003364  0D01               	mullw	1
 18063  003366  0E00               	movlw	low _eusart1TxBuffer
 18064  003368  24F3               	addwf	prodl,w,c
 18065  00336A  6ED9               	movwf	fsr2l,c
 18066  00336C  0E01               	movlw	high _eusart1TxBuffer
 18067  00336E  20F4               	addwfc	prodh,w,c
 18068  003370  6EDA               	movwf	fsr2h,c
 18069  003372  50DF               	movf	indf2,w,c
 18070  003374  6EAD               	movwf	4013,c	;volatile
 18071                           
 18072                           ; BSR set to: 0
 18073  003376  2A38               	incf	_eusart1TxTail,f,c	;volatile
 18074                           
 18075                           ; BSR set to: 0
 18076                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 18077  003378  0E45               	movlw	69
 18078  00337A  6438               	cpfsgt	_eusart1TxTail,c	;volatile
 18079  00337C  D002               	goto	i2l864
 18080                           
 18081                           ; BSR set to: 0
 18082                           ;eusart1.c: 189: {
 18083                           ;eusart1.c: 190: eusart1TxTail = 0;
 18084  00337E  0E00               	movlw	0
 18085  003380  6E38               	movwf	_eusart1TxTail,c	;volatile
 18086  003382                     i2l864:
 18087                           
 18088                           ; BSR set to: 0
 18089                           ;eusart1.c: 191: }
 18090                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 18091                           
 18092                           ; BSR set to: 0
 18093  003382  2BFF               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 18094                           
 18095                           ;eusart1.c: 193: }
 18096  003384  0012               	return	
 18097  003386                     i2l863:
 18098                           
 18099                           ; BSR set to: 0
 18100                           ;eusart1.c: 194: else
 18101                           ;eusart1.c: 195: {
 18102                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 18103  003386  989D               	bcf	3997,4,c	;volatile
 18104                           
 18105                           ; BSR set to: 0
 18106                           ;eusart1.c: 197: eusart1TxTail = 0;
 18107  003388  0E00               	movlw	0
 18108  00338A  6E38               	movwf	_eusart1TxTail,c	;volatile
 18109                           
 18110                           ;eusart1.c: 198: eusart1TxHead = 0;
 18111  00338C  0E00               	movlw	0
 18112  00338E  6E39               	movwf	_eusart1TxHead,c	;volatile
 18113  003390  0012               	return	
 18114  003392                     __end_of_EUSART1_Transmit_ISR:
 18115                           	opt stack 0
 18116                           tosu	equ	0xFFF
 18117                           tosh	equ	0xFFE
 18118                           tosl	equ	0xFFD
 18119                           pclatu	equ	0xFFB
 18120                           pclath	equ	0xFFA
 18121                           tblptru	equ	0xFF8
 18122                           tblptrh	equ	0xFF7
 18123                           tblptrl	equ	0xFF6
 18124                           tablat	equ	0xFF5
 18125                           prodh	equ	0xFF4
 18126                           prodl	equ	0xFF3
 18127                           intcon	equ	0xFF2
 18128                           intcon2	equ	0xFF1
 18129                           postinc0	equ	0xFEE
 18130                           plusw0	equ	0xFEB
 18131                           fsr0h	equ	0xFEA
 18132                           fsr0l	equ	0xFE9
 18133                           wreg	equ	0xFE8
 18134                           indf1	equ	0xFE7
 18135                           postdec1	equ	0xFE5
 18136                           fsr1h	equ	0xFE2
 18137                           fsr1l	equ	0xFE1
 18138                           indf2	equ	0xFDF
 18139                           postinc2	equ	0xFDE
 18140                           postdec2	equ	0xFDD
 18141                           plusw2	equ	0xFDB
 18142                           fsr2h	equ	0xFDA
 18143                           fsr2l	equ	0xFD9
 18144                           status	equ	0xFD8
 18145                           
 18146 ;; *************** function _EUSART1_Receive_ISR *****************
 18147 ;; Defined at:
 18148 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 18149 ;; Parameters:    Size  Location     Type
 18150 ;;		None
 18151 ;; Auto vars:     Size  Location     Type
 18152 ;;		None
 18153 ;; Return value:  Size  Location     Type
 18154 ;;                  1    wreg      void 
 18155 ;; Registers used:
 18156 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18157 ;; Tracked objects:
 18158 ;;		On entry : 0/0
 18159 ;;		On exit  : 0/0
 18160 ;;		Unchanged: 0/0
 18161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18162 ;;      Params:         0       0       0       0       0       0       0
 18163 ;;      Locals:         0       0       0       0       0       0       0
 18164 ;;      Temps:          0       0       0       0       0       0       0
 18165 ;;      Totals:         0       0       0       0       0       0       0
 18166 ;;Total ram usage:        0 bytes
 18167 ;; Hardware stack levels used:    1
 18168 ;; This function calls:
 18169 ;;		Nothing
 18170 ;; This function is called by:
 18171 ;;		_INTERRUPT_InterruptManager
 18172 ;; This function uses a non-reentrant model
 18173 ;;
 18174                           
 18175                           	psect	text118
 18176  00358C                     __ptext118:
 18177                           	opt stack 0
 18178  00358C                     _EUSART1_Receive_ISR:
 18179                           	opt stack 21
 18180                           
 18181                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 18182                           
 18183                           ; BSR set to: 0
 18184                           ;incstack = 0
 18185  00358C  A2AB               	btfss	4011,1,c	;volatile
 18186  00358E  D002               	goto	i2l869
 18187                           
 18188                           ;eusart1.c: 206: {
 18189                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 18190  003590  98AB               	bcf	4011,4,c	;volatile
 18191                           
 18192                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 18193  003592  88AB               	bsf	4011,4,c	;volatile
 18194  003594                     i2l869:
 18195                           
 18196                           ;eusart1.c: 210: }
 18197                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 18198  003594  5037               	movf	_eusart1RxHead,w,c	;volatile
 18199  003596  0D01               	mullw	1
 18200  003598  0E46               	movlw	low _eusart1RxBuffer
 18201  00359A  24F3               	addwf	prodl,w,c
 18202  00359C  6ED9               	movwf	fsr2l,c
 18203  00359E  0E01               	movlw	high _eusart1RxBuffer
 18204  0035A0  20F4               	addwfc	prodh,w,c
 18205  0035A2  6EDA               	movwf	fsr2h,c
 18206  0035A4  CFAE FFDF          	movff	4014,indf2	;volatile
 18207  0035A8  2A37               	incf	_eusart1RxHead,f,c	;volatile
 18208                           
 18209                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 18210  0035AA  0E27               	movlw	39
 18211  0035AC  6437               	cpfsgt	_eusart1RxHead,c	;volatile
 18212  0035AE  D002               	goto	i2l870
 18213                           
 18214                           ;eusart1.c: 217: {
 18215                           ;eusart1.c: 218: eusart1RxHead = 0;
 18216  0035B0  0E00               	movlw	0
 18217  0035B2  6E37               	movwf	_eusart1RxHead,c	;volatile
 18218  0035B4                     i2l870:
 18219                           
 18220                           ;eusart1.c: 219: }
 18221                           ;eusart1.c: 220: eusart1RxCount++;
 18222  0035B4  0100               	movlb	0	; () banked
 18223  0035B6  2BD3               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 18224                           
 18225                           ; BSR set to: 0
 18226  0035B8  0012               	return		;funcret
 18227  0035BA                     __end_of_EUSART1_Receive_ISR:
 18228                           	opt stack 0
 18229                           tosu	equ	0xFFF
 18230                           tosh	equ	0xFFE
 18231                           tosl	equ	0xFFD
 18232                           pclatu	equ	0xFFB
 18233                           pclath	equ	0xFFA
 18234                           tblptru	equ	0xFF8
 18235                           tblptrh	equ	0xFF7
 18236                           tblptrl	equ	0xFF6
 18237                           tablat	equ	0xFF5
 18238                           prodh	equ	0xFF4
 18239                           prodl	equ	0xFF3
 18240                           intcon	equ	0xFF2
 18241                           intcon2	equ	0xFF1
 18242                           postinc0	equ	0xFEE
 18243                           plusw0	equ	0xFEB
 18244                           fsr0h	equ	0xFEA
 18245                           fsr0l	equ	0xFE9
 18246                           wreg	equ	0xFE8
 18247                           indf1	equ	0xFE7
 18248                           postdec1	equ	0xFE5
 18249                           fsr1h	equ	0xFE2
 18250                           fsr1l	equ	0xFE1
 18251                           indf2	equ	0xFDF
 18252                           postinc2	equ	0xFDE
 18253                           postdec2	equ	0xFDD
 18254                           plusw2	equ	0xFDB
 18255                           fsr2h	equ	0xFDA
 18256                           fsr2l	equ	0xFD9
 18257                           status	equ	0xFD8
 18258                           tosu	equ	0xFFF
 18259                           tosh	equ	0xFFE
 18260                           tosl	equ	0xFFD
 18261                           pclatu	equ	0xFFB
 18262                           pclath	equ	0xFFA
 18263                           tblptru	equ	0xFF8
 18264                           tblptrh	equ	0xFF7
 18265                           tblptrl	equ	0xFF6
 18266                           tablat	equ	0xFF5
 18267                           prodh	equ	0xFF4
 18268                           prodl	equ	0xFF3
 18269                           intcon	equ	0xFF2
 18270                           intcon2	equ	0xFF1
 18271                           postinc0	equ	0xFEE
 18272                           plusw0	equ	0xFEB
 18273                           fsr0h	equ	0xFEA
 18274                           fsr0l	equ	0xFE9
 18275                           wreg	equ	0xFE8
 18276                           indf1	equ	0xFE7
 18277                           postdec1	equ	0xFE5
 18278                           fsr1h	equ	0xFE2
 18279                           fsr1l	equ	0xFE1
 18280                           indf2	equ	0xFDF
 18281                           postinc2	equ	0xFDE
 18282                           postdec2	equ	0xFDD
 18283                           plusw2	equ	0xFDB
 18284                           fsr2h	equ	0xFDA
 18285                           fsr2l	equ	0xFD9
 18286                           status	equ	0xFD8
 18287                           
 18288                           	psect	text119
 18289  000000                     __ptext119:
 18290                           	opt stack 0
 18291                           tosu	equ	0xFFF
 18292                           tosh	equ	0xFFE
 18293                           tosl	equ	0xFFD
 18294                           pclatu	equ	0xFFB
 18295                           pclath	equ	0xFFA
 18296                           tblptru	equ	0xFF8
 18297                           tblptrh	equ	0xFF7
 18298                           tblptrl	equ	0xFF6
 18299                           tablat	equ	0xFF5
 18300                           prodh	equ	0xFF4
 18301                           prodl	equ	0xFF3
 18302                           intcon	equ	0xFF2
 18303                           intcon2	equ	0xFF1
 18304                           postinc0	equ	0xFEE
 18305                           plusw0	equ	0xFEB
 18306                           fsr0h	equ	0xFEA
 18307                           fsr0l	equ	0xFE9
 18308                           wreg	equ	0xFE8
 18309                           indf1	equ	0xFE7
 18310                           postdec1	equ	0xFE5
 18311                           fsr1h	equ	0xFE2
 18312                           fsr1l	equ	0xFE1
 18313                           indf2	equ	0xFDF
 18314                           postinc2	equ	0xFDE
 18315                           postdec2	equ	0xFDD
 18316                           plusw2	equ	0xFDB
 18317                           fsr2h	equ	0xFDA
 18318                           fsr2l	equ	0xFD9
 18319                           status	equ	0xFD8
 18320                           
 18321                           	psect	rparam
 18322  0000                     tosu	equ	0xFFF
 18323                           tosh	equ	0xFFE
 18324                           tosl	equ	0xFFD
 18325                           pclatu	equ	0xFFB
 18326                           pclath	equ	0xFFA
 18327                           tblptru	equ	0xFF8
 18328                           tblptrh	equ	0xFF7
 18329                           tblptrl	equ	0xFF6
 18330                           tablat	equ	0xFF5
 18331                           prodh	equ	0xFF4
 18332                           prodl	equ	0xFF3
 18333                           intcon	equ	0xFF2
 18334                           intcon2	equ	0xFF1
 18335                           postinc0	equ	0xFEE
 18336                           plusw0	equ	0xFEB
 18337                           fsr0h	equ	0xFEA
 18338                           fsr0l	equ	0xFE9
 18339                           wreg	equ	0xFE8
 18340                           indf1	equ	0xFE7
 18341                           postdec1	equ	0xFE5
 18342                           fsr1h	equ	0xFE2
 18343                           fsr1l	equ	0xFE1
 18344                           indf2	equ	0xFDF
 18345                           postinc2	equ	0xFDE
 18346                           postdec2	equ	0xFDD
 18347                           plusw2	equ	0xFDB
 18348                           fsr2h	equ	0xFDA
 18349                           fsr2l	equ	0xFD9
 18350                           status	equ	0xFD8
 18351                           
 18352                           	psect	temp
 18353  000048                     btemp:
 18354                           	opt stack 0
 18355  000048                     	ds	1
 18356  0000                     int$flags	set	btemp
 18357  0000                     wtemp6	set	btemp+1
 18358                           tosu	equ	0xFFF
 18359                           tosh	equ	0xFFE
 18360                           tosl	equ	0xFFD
 18361                           pclatu	equ	0xFFB
 18362                           pclath	equ	0xFFA
 18363                           tblptru	equ	0xFF8
 18364                           tblptrh	equ	0xFF7
 18365                           tblptrl	equ	0xFF6
 18366                           tablat	equ	0xFF5
 18367                           prodh	equ	0xFF4
 18368                           prodl	equ	0xFF3
 18369                           intcon	equ	0xFF2
 18370                           intcon2	equ	0xFF1
 18371                           postinc0	equ	0xFEE
 18372                           plusw0	equ	0xFEB
 18373                           fsr0h	equ	0xFEA
 18374                           fsr0l	equ	0xFE9
 18375                           wreg	equ	0xFE8
 18376                           indf1	equ	0xFE7
 18377                           postdec1	equ	0xFE5
 18378                           fsr1h	equ	0xFE2
 18379                           fsr1l	equ	0xFE1
 18380                           indf2	equ	0xFDF
 18381                           postinc2	equ	0xFDE
 18382                           postdec2	equ	0xFDD
 18383                           plusw2	equ	0xFDB
 18384                           fsr2h	equ	0xFDA
 18385                           fsr2l	equ	0xFD9
 18386                           status	equ	0xFD8


Data Sizes:
    Strings     21
    Constant    141
    Data        22
    BSS         255
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     47      71
    BANK0           160     96     160
    BANK1           256     16     210
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    DacSetValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    UpdateRxFreq@data	PTR unsigned char  size(2) Largest target is 0

    PLLUartInitialize@data	PTR unsigned char  size(2) Largest target is 0

    SetConversionResultFormat@data	PTR unsigned char  size(2) Largest target is 0

    SetAdcOperationMode@data	PTR unsigned char  size(2) Largest target is 0

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 10
		 -> GetIntFromUartData@dataRegArr(BANK0[10]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[9]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK0[27]), 
		 -> FlashReadCondition@TxMsg(BANK0[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK0[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[9]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK0[27]), 
		 -> FlashReadCondition@TxMsg(BANK0[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK0[20]), 

    Make32bitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 0

    ZeroBitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[9]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK0[27]), 
		 -> FlashReadCondition@TxMsg(BANK0[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK0[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[9]), GetIntFromUartData@dataRegArr(BANK0[10]), SynthReadData@TxMsg(BANK0[27]), FlashReadCondition@TxMsg(BANK0[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK0[20]), 

    crc8@dataArray	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[9]), SynthReadData@TxMsg(BANK0[27]), FlashReadCondition@TxMsg(BANK0[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK0[20]), 

    GroupDAC@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 128
		 -> FlashTest@buff(BANK0[128]), sampleArray(BANK1[64]), 

    SynthReadData@data	PTR unsigned char  size(2) Largest target is 0

    UpdateTxFreq@data	PTR unsigned char  size(2) Largest target is 0

    WriteUartMessage@dataBuf	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[9]), SynthReadData@TxMsg(BANK0[27]), FlashReadCondition@TxMsg(BANK0[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), 

    SetChannelMode@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _StoreIntInEeprom->_make8
    _EepromWrite->_DATAEE_WriteByte
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _UpdateRxFreq->_SendAckMessage
    _SynthReadData->_ZeroArray
    _SetSynthTxOper->_InitTxSynth
    _SetSynthRxOper->_InitRxSynth
    _GetMcuRunTime->___lldiv
    _GetMcuFwVersion->_ZeroArray
    _FlashReadUart->_SendAckMessage
    _FlashReadCondition->_ZeroArray
    _FlashEreaseMem->_SendAckMessage
    _DacSetValue->_SendAckMessage
    _testLeds->_SendAckMessage
    _ResetMcu->_SendAckMessage
    _SetConversionResultFormat->_SendAckMessage
    _SetChannelMode->_SendAckMessage
    _SetAdcOperationMode->_SendAckMessage
    _keepAliveSignalUart->_SendAckMessage
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendSystemStartAck->_SendAckMessage
    _SendAckMessage->_ZeroArray
    _ZeroArray->_memset
    _WriteUartMessage->_EUSART1_Write
    _PLLInitialize->_InitRxSynth
    _PLLInitialize->_InitTxSynth
    _InitTxSynth->_SWSPI_send_word
    _InitRxSynth->_SWSPI_send_word
    _DacInit->_SWSPI_send_word
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _SWSPI_Synth_send_bits->_Make32bitsArray
    _SWSPI_Synth_send_bits->_ZeroBitsArray
    _ZeroBitsArray->_memset
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    ___lmul->_EepromRead
    _EepromRead->_DATAEE_ReadByte
    _CheckFlashPrecentage->___ftdiv
    _AdcConvert->_FlashSampleWrite
    _exp->___ftdiv
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _readUartMessage->_GroupAdc
    _readUartMessage->_GroupControlMcu
    _readUartMessage->_GroupDAC
    _readUartMessage->_GroupFlashMemory
    _readUartMessage->_GroupStatusAndVersion
    _readUartMessage->_GroupSynthesizers
    _UpdateTxFreq->_GetIntFromUartData
    _GetIntFromUartData->_strtol
    _GroupFlashMemory->_FlashReadUart
    _InitSystemApplicationManagers->_DacInit
    _DacInit->_ReadIntFromEeprom
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _ReadIntFromEeprom->_pow
    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _readUartMessage->_GroupFlashMemory
    _DacInit->_ReadIntFromEeprom

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  408308
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
                 _SendSystemStartAck
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                _keepAliveSignalUart
                    _readUartMessage
 ---------------------------------------------------------------------------------
 (1) _readUartMessage                                      7     7      0  160105
                                              3 BANK1      7     7      0
                       _EUSART1_Read
                           _GroupAdc *
                    _GroupControlMcu *
                           _GroupDAC *
                   _GroupFlashMemory *
              _GroupStatusAndVersion *
                  _GroupSynthesizers *
                _InitRxMessageParams
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    2539
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupSynthesizers                                    3     1      2   70217
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                  _PLLUartInitialize
                     _SetSynthRxOper
                     _SetSynthTxOper
                      _SynthReadData
                       _UpdateRxFreq
                       _UpdateTxFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateTxFreq                                        11     9      2   24020
                                             39 BANK0     11     9      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _StoreIntInEeprom                                     9     2      7    2159
                                             32 COMRAM     9     2      7
                        _EepromWrite
                              _make8
 ---------------------------------------------------------------------------------
 (5) _EepromWrite                                          2     1      1     428
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_WriteByte                                     3     2      1     276
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  33    25      8    6301
                                              6 BANK0     33    25      8
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2723
                                             37 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _UpdateRxFreq                                         2     0      2    7089
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SynthReadData                                       30    28      2    5779
                                             35 COMRAM     2     0      2
                                              0 BANK0     28    28      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _SetSynthTxOper                                       0     0      0   16466
                        _InitTxSynth
                     _SendAckMessage
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (3) _SetSynthRxOper                                       0     0      0   16466
                        _InitRxSynth
                     _SendAckMessage
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (3) _PLLUartInitialize                                    2     0      2     180
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _GroupStatusAndVersion                                4     1      3    9947
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                    _GetMcuFwVersion
                      _GetMcuRunTime
 ---------------------------------------------------------------------------------
 (3) _GetMcuRunTime                                       17    17      0    4138
                                             36 COMRAM     2     2      0
                                              0 BANK0     15    15      0
                   _WriteUartMessage
                            ___lldiv
                            ___llmod
                               _crc8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _GetMcuFwVersion                                     13    13      0    5778
                                              0 BANK0     13    13      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _GroupFlashMemory                                     4     2      2   30398
                                             95 BANK0      1     1      0
                                              0 BANK1      3     1      2
                     _FlashEreaseMem
                 _FlashReadCondition
                      _FlashReadUart
 ---------------------------------------------------------------------------------
 (3) _FlashReadUart                                       97    95      2   13918
                                             43 COMRAM     2     0      2
                                              0 BANK0     95    95      0
                  _FLASH_IsWriteDone
                     _FLASH_ReadByte
                     _SendAckMessage
                   _WriteUartMessage
                          _ZeroArray
                                _abs
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     183
                                             23 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _FLASH_ReadByte                                       4     0      4     543
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _FlashReadCondition                                  13    13      0    6880
                                             35 COMRAM     4     4      0
                                              0 BANK0      9     9      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _FlashEreaseMem                                       0     0      0    9538
                     _SendAckMessage
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupDAC                                             3     1      2    7216
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                        _DacSetValue
 ---------------------------------------------------------------------------------
 (3) _DacSetValue                                          2     0      2    7089
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupControlMcu                                      4     1      3   14097
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                           _ResetMcu
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0    7067
                                             43 COMRAM     3     3      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetMcu                                             0     0      0    6999
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupAdc                                             3     1      2   21453
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                _SetAdcOperationMode
                     _SetChannelMode
          _SetConversionResultFormat
 ---------------------------------------------------------------------------------
 (3) _SetConversionResultFormat                            2     0      2    7089
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetChannelMode                                       2     0      2    7151
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetAdcOperationMode                                  2     0      2    7089
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalUart                                  0     0      0    6999
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     592
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     592
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendSystemStartAck                                   0     0      0    6999
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _SendAckMessage                                       8     7      1    6999
                                             35 COMRAM     8     7      1
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _crc8                                                 9     5      4    1430
                                             23 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ZeroArray                                            4     0      4    2539
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _WriteUartMessage                                     7     3      4    1272
                                             24 COMRAM     7     3      4
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0  117702
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        0     0      0   17904
                        _InitRxSynth
                        _InitTxSynth
 ---------------------------------------------------------------------------------
 (4) _InitTxSynth                                          1     1      0    8952
                                             46 COMRAM     1     1      0
                    _SWSPI_send_word
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (4) _InitRxSynth                                          1     1      0    8952
                                             46 COMRAM     1     1      0
                    _SWSPI_send_word
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_CE_Pin                                     2     1      1     515
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                1     1      0       1
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              5     5      0   99797
                                             90 BANK0      5     5      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
 ---------------------------------------------------------------------------------
 (4) _SWSPI_send_word                                      9     4      5    8338
                                             37 COMRAM     9     4      5
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5    1235
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SWSPI_Synth_send_bits                               42    38      4    3353
                                             33 COMRAM     4     0      4
                                              0 BANK0     38    38      0
                    _Make32bitsArray
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
                      _ZeroBitsArray
 ---------------------------------------------------------------------------------
 (6) _ZeroBitsArray                                        2     0      2     798
                                             31 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     677
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (6) _Make32bitsArray                                     10     4      6     344
                                             23 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) _SWSPI_DAC_send_bits                                  3     2      1    2041
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Data_Pin                                       2     1      1     757
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Clk_Pin                                        2     1      1     937
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _ReadIntFromEeprom                                   23    19      4   91264
                                             83 BANK0      7     3      4
                                              0 BANK1     16    16      0
                         _EepromRead
                           ___awtoft
                            ___fttol
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     636
                                             25 COMRAM    12     4      8
                         _EepromRead (ARG)
 ---------------------------------------------------------------------------------
 (4) _EepromRead                                           1     1      0      62
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_ReadByte                                      1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   14121
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _BlinkErrorLeds                                       6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          12    12      0  101512
                                             83 BANK0     12    12      0
                  _ADC_GetConversion
                   _FlashSampleWrite
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (4) _pow                                                 17    11      6   85693
                                             66 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (5) _log                                                  5     2      3   27302
                                             48 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (5) _exp                                                  9     6      3   46354
                                             57 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (6) _ldexp                                                7     2      5     539
                                             48 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (6) _floor                                                8     5      3   11854
                                             49 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             15    11      4     911
                                             24 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6    1098
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (7) ___altoft                                            10     6      4    3367
                                             39 BANK0     10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (6) _eval_poly                                           12     5      7   12115
                                             36 BANK0     12     5      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     702
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftneg                                              3     0      3     335
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awtoft                                             4     1      3    3476
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1631
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6    1172
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                          18    18      0     767
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR0_ISR                                            0     0      0     767
                            ___lwmod
 ---------------------------------------------------------------------------------
 (11) ___lwmod                                             5     1      4     767
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (10) _PIN_MANAGER_IOC                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _MEMORY_ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
           _ZeroBitsArray
             _memset
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
       _InitRxSynth
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SwSpi_Set_CE_Pin
       _InitTxSynth
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SendSystemStartAck
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _keepAliveSignalUart
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _readUartMessage
     _EUSART1_Read
     _GroupAdc *
       _SetAdcOperationMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetChannelMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetConversionResultFormat
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupControlMcu *
       _ResetMcu
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _testLeds
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupDAC *
       _DacSetValue
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupFlashMemory *
       _FlashEreaseMem
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _ZeroArray
           _memset
       _FlashReadCondition
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _FlashReadUart
         _FLASH_IsWriteDone
         _FLASH_ReadByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _abs
         _crc8
     _GroupStatusAndVersion *
       _GetMcuFwVersion
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _GetMcuRunTime
         _WriteUartMessage
           _EUSART1_Write
         ___lldiv
         ___llmod
         _crc8
     _GroupSynthesizers *
       _PLLUartInitialize
       _SetSynthRxOper
         _InitRxSynth
           _SWSPI_send_word
             _SWSPI_DAC_send_bits
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SWSPI_Synth_send_bits
               _Make32bitsArray
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
               _ZeroBitsArray
                 _memset
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
             _make8
           _SwSpi_Set_CE_Pin
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _SwSpi_Set_CE_Pin
       _SetSynthTxOper
         _InitTxSynth
           _SWSPI_send_word
             _SWSPI_DAC_send_bits
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SWSPI_Synth_send_bits
               _Make32bitsArray
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
               _ZeroBitsArray
                 _memset
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
             _make8
           _SwSpi_Set_CE_Pin
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _SwSpi_Set_CE_Pin
       _SynthReadData
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _UpdateRxFreq
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _UpdateTxFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _ZeroArray *
       _memset
     _crc8 *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     10      D2       6       82.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     60      A0       4      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2F      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B9       9        0.0%
DATA                 0      0     1B9      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Mar 18 15:12:49 2018

             __size_of_SendSystemStartAck 000C                         ??_GetMcuFwVersion 0024  
              __end_of_keepAliveSignalLed 3820                              ___altoft@exp 008F  
                _eusart1TxBufferRemaining 00FF                        readUartMessage@idx 01C9  
                GetIntFromUartData@idxCon 0084                           _GroupControlMcu 349C  
             __end_of_keepAliveSignalUart 3930                             ___altoft@sign 0090  
              __size_of_FLASH_IsWriteDone 000E                                        l54 2A8C  
                GetIntFromUartData@recVal 007B                  GetIntFromUartData@retVal 007C  
                     __end_of_BlinkOkLeds 2C04                           _SWSPI_send_word 2494  
                     ___wmul@multiplicand 001A                           _timer0ReloadVal 0046  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
                            ___ftadd@exp1 0083                              ___ftadd@exp2 0082  
                            ___ftadd@sign 0081                               ?_MEMORY_ISR 0001  
                                     l120 1120                                       l121 1046  
                                     l201 0AC6                                       l210 0B2A  
                                     l203 0ADE                                       l300 1ADE  
                                     l116 3550                                       l212 0B94  
                                     l205 0AFC                                       l222 341E  
                                     l214 0BCC                                       l223 3408  
                                     l311 077C                                       l207 0B02  
                                     l216 0BD2                                       l321 0914  
                                     l313 07E8                                       l209 0B6E  
                                     l306 08BC                                       l314 08AA  
                                     l331 0A34                                       l307 0820  
                                     l332 0A4A                                       l324 092C  
                                     l316 085A                                       l325 0A50  
                                     l309 076C                                       l326 0948  
                                     l318 086C                                       l510 34F0  
                                     l190 0C2C                                       l327 0960  
                                     l191 0A6E                                       l504 36E2  
                                     l417 263E                                       l329 09DE  
                                     l610 2E0A                                       l418 2654  
                                     l514 3516                                       l194 0A7C  
                                     l611 2DCE                                       l603 222E  
                                     l515 3520                                       l195 0AA8  
                                     l620 2DE2                                       l612 2DD8  
                                     l621 2DEC                                       l605 225C  
                                     l509 34E6                                       l606 2268  
                                     l519 2A42                                       l199 0AAE  
                                     l640 2E24                                       l641 2E2E  
                                     l650 2E42                                       l299 1AC0  
                                     l723 37DA                                       l707 32C6  
                                     l628 2DF6                                       l708 32D0  
                                     l629 2E00                                       l718 37DE  
                                     l494 3020                                       l639 2E60  
                                     l719 37D6                                       l657 2E4C  
                                     l649 2E38                                       l585 24D0  
                                     l489 2FD4                                       l658 2E56  
                                     l595 2DAE                                       l499 276C  
                                     l596 2D7A                                       l676 329E  
                                     l844 313E                                       l597 2D94  
                                     l589 252A                                       l677 3276  
                                     l598 2D9E                                       l686 328A  
                                     l678 3280                                       l846 3164  
                                     l687 3294                                       l697 32DA  
                                     l857 324A                                       l954 21E0  
                                     l698 32B2                                       l858 326E  
                                     l955 2198                                       l699 32BC  
                                     l859 326C                                       l957 21B8  
                                     l965 33B6                                       l958 21BA  
                            __CFG_CPB$OFF 000000                              __CFG_CPD$OFF 000000  
                    readUartMessage@chRec 01CB                         ??_Make32bitsArray 001E  
                              _SYNTH_REGS 0601                                       _abs 3636  
                                     _exp 0C62                                       _log 17B6  
                                     _pow 150A                                       prod 000FF3  
                                     tosl 000FFD                                       wreg 000FE8  
                   ??_SetAdcOperationMode 002E            ?_InitSystemApplicationManagers 0001  
                            __CFG_LVP$OFF 000000                __end_of_FlashReadCondition 19F0  
                            ___ftdiv@cntr 0063                              ___ftdiv@sign 0068  
                          ?_ZeroBitsArray 0020                                      ?_abs 0018  
                                    l1220 243C                                      l1204 3086  
                                    l1301 1474                                      l1213 245E  
                                    l1221 2442                                      l1205 305C  
                                    l1222 2450                                      l1214 23FE  
                                    l1230 30F2                                      l2103 0C7C  
                                    l1311 2C68                                      l1207 306A  
                                    l1231 30F8                                      l1320 2D70  
                                    l1312 2C6C                                      l1216 240C  
                                    l1208 3078                                      l2105 0CB4  
                                    l1313 2C70                                      l1217 241A  
                                    l2114 1EE2                                      l2106 0CEC  
                                    l1330 16AA                                      l1314 2C9E  
                                    l1218 2428                                      l1067 3574  
                                    l2123 27A4                                      l2115 1ED4  
                                    l2131 20EE                                      l2107 0D1C  
                                    l1323 331A                                      l1219 2436  
                                    l1227 3112                                      l2132 20E2  
                                    l2108 0E46                                      l1308 2CA2  
                                    l2140 362E                                      l2060 0F4C  
                                    l2044 0E94                                      l1324 32F0  
                                    l1228 30EC                                      l1236 374E  
                                    l2117 1EFC                                      l2109 0E1C  
                                    l1309 2C64                                      l2061 0FB8  
                                    l1237 3740                                      l2118 1F78  
                                    l1318 2D32                                      l2150 367C  
                                    l2054 0F10                                      l2046 0EAC  
                                    l2127 207A                                      l1511 3654  
                                    l2063 0FDC                                      l2055 0F20  
                                    l2064 1018                                      l2048 0F00  
                                    l2129 20C0                                      l1329 1788  
                                    l2145 3770                                      l2057 0F3A  
                                    l1186 34AE                                      l2155 378E  
                                    l1187 34A2                                      l2068 385C  
                                    l1196 36BC                                      l1452 2B56  
                                    l1285 2F9E                                      l1189 34A8  
                                    l1197 36B0                                      l1453 2B6E  
                                    l1550 294E                                      l1286 2F82  
                                    l1390 1DFA                                      l1711 1234  
                                    l2175 2048                                      l1551 2942  
                                    l2167 17D2                                      l1199 36B6  
                                    l1455 2B94                                      l1720 12C4  
                                    l2176 1FC8                                      l1456 2B88  
                                    l2169 17F2                                      l1473 2E86  
                                    l1297 13DE                                      l1474 2E9A  
                                    l1715 125E                                      l1299 13FE  
                                    l1820 28FE                                      l1661 3336  
                                    l1725 12BA                                      l1821 290C  
                                    l1734 12F8                                      l1726 12B0  
                                    l1910 15D0                                      l1830 2B24  
                                    l1735 12EE                                      l1911 1678  
                                    l1831 2B32                                      l1680 2372  
                                    l1744 1D02                                      l1752 283C  
                                    l1816 28CA                                      l1681 2368  
                                    l1737 131C                                      l1761 1C34  
                                    l1753 286C                                      l1905 1554  
                                    l1817 28BE                                      l1746 1D2A  
                                    l1770 3708                                      l1738 1338  
                                    l1762 1C66                                      l1906 1544  
                                    l1826 2AFC                                      l1683 23A6  
                                    l1747 1D68                                      l1739 1368  
                                    l1763 1C76                                      l1827 2AF0  
                                    l1684 2390                                      l1748 1D8E  
                                    l1780 1B18                                      l1908 156C  
                                    l1837 2CD0                                      l1765 1C8E  
                                    l1909 15F2                                      l1686 23CE  
                                    l1838 2CC4                                      l1766 1C9E  
                                    l1782 1B90                                      l1687 23C4  
                                    l1759 1C0C                                      l1791 1BD0  
                                    l1783 1B80                                      l1776 31CA  
                                    l6106 2C0E                                      l1788 1BB4  
                                    l1789 1BA8                                      l1893 35D4  
                                    l6118 2BB0                                      l1894 35C4  
                                    l6500 2898                                      l8004 25CA  
                                    l8014 263E                                      l7224 24EA  
                                    l7402 0E1C                                      l6506 35C4  
                                    l8108 103E                                      l7228 24F8  
                                    ?_exp 0099                                      ?_log 0090  
                                    l7510 13D6                                      l7532 1464  
                                    l7630 2A7C                                      l7550 14C8  
                                    l7480 2FCC                                      l6922 2226  
                                    l6588 2D22                                      l6836 3238  
                                    l7644 2AD2                                      l7494 3018  
                                    l7754 092C                                      l7932 1DEA  
                                    l7678 2190                                      l7758 0950  
                                    l7768 09B0                                      l7944 1E76  
                                    ?_pow 00A2                                      STR_1 068E  
                                    STR_2 069A                        EepromWrite@address 001C  
                                    _IOCB 000F62                                      _LATA 000F89  
                                    _LATB 000F8A                                      _LATC 000F8B  
                                    _LATD 000F8C                                      _LATE 000F8D  
                                    u7010 209A                                      u6220 1226  
                                    u7110 2524                                      u6320 12CC  
                                    u6250 1250                                      u7018 209E  
                                    u7210 0ED6                                      u6411 1C1C  
                                    u6500 1B36                                      u5380 3812  
                                    u6181 11F2                                      u6350 1300  
                                    u7230 0EE6                                      u6191 1206  
                                    u8031 270C                                      u6280 128E  
                                    u7080 24A4                                      u6505 1B2E  
                                    u8130 1E76                                      u8050 34D6  
                                    u6540 1BBA                                      u8060 34D8  
                                    u7180 0E9C                                      u8150 1A4C  
                                    u6630 2C96                                      u5398 3814  
                                    u6391 1BF4                                      u6720 227A  
                                    u8080 3506                                      u7600 14C8  
                                    u8145 19FA                                      u6481 1AFC  
                                    u8170 1A90                                      u6570 27CC  
                                    u7370 0CF6                                      u8410 2346  
                                    u8090 3508                                      u6635 2C8C  
                                    u7611 1500                                      u7380 0CF8  
                                    u7460 15BA                                      u5950 235A  
                                    u7710 2AD2                                      u6655 33C4  
                                    u7480 38FC                                      u6656 33C6  
                                    u8408 0C04                                      u7481 38F8  
                                    u8409 0C24                                      u6578 27CE  
                                    u7810 0718                                      u7650 28CE  
                                    u7570 1418                                      u7635 3498  
                                    u6771 1CEA                                      u7636 349A  
                                    u7820 071A                                      u5990 23D8  
                                    u6870 3678                                      u6791 1D12  
                                    u8607 227C                                      u7760 21BE  
                                    u7680 2B00                                      u7920 0902  
                                    u8617 2BD6                                      u6970 1EEE  
                                    u6890 3620                                      u8627 2BF0  
                                    u8637 2C34                                      u7950 09B0  
                                    u7775 21DC                                      u8647 2C4E  
                                    u8567 2A94                                      u7776 21DE  
                                    u7960 09CE                                      u8657 110C  
                                    u8577 2AA4                                      u7865 07F2  
                                    u8587 2AB4                                      u8597 2AC4  
                                    u7885 087E                  ??_SwSpi_Set_Synth_Le_Pin 0019  
                                    _WPUB 000F61                             _EUSART1_Write 3236  
                                    abs@a 0018                                      _crc8 2F70  
                 ??_InitAdcApplicationMgr 0018                                      _data 00CE  
                                    _main 2B44                              ___ftpack@arg 0018  
                           ?_EUSART1_Read 0001                              ___ftpack@exp 001B  
                         _TMR0_StartTimer 3964                           __end_of_DacInit 265A  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf1 000FE7                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 0048                             __CFG_BORV$190 000000  
                                    exp@x 0099                                      log@x 0090  
                       ?_FLASH_WriteBlock 001D                          ?_ClearMcuRunTime 0001  
                                    pow@x 00A2                                      pow@y 00A5  
                                    prodh 000FF4                                      prodl 000FF3  
               GroupStatusAndVersion@data 01C2             __size_of_CheckFlashPrecentage 00AE  
                                    start 00DC                             __CFG_IESO$OFF 000000  
                     __end_of_EepromWrite 38C8                        ??_FLASH_WriteBlock 0023  
                           _adcSampleMode 003B                              ___ftmul@cntr 0076  
                            ___param_bank 000000                              ___ftmul@sign 0077  
                          _BlinkErrorLeds 2C04                             ??_InitRxSynth 002F  
                           ??_InitTxSynth 002F                              ___fttol@exp1 0086  
                                   ??_abs 001A                 __size_of_DATAEE_WriteByte 0036  
                                   ??_exp 002F                                     ??_log 002F  
                            ___fttol@lval 0082                                     ??_pow 002F  
                 __end_of_TMR0_Initialize 3468                    _ReadIntFromEeprom$3315 01C6  
                  _ReadIntFromEeprom$3316 01C9            __size_of_OSCILLATOR_Initialize 000E  
           __end_of_OSCILLATOR_Initialize 38E4                                     ?_crc8 0018  
              SWSPI_DAC_send_bits@phrType 001C                            _SetSynthRxOper 34FC  
                                   ?_main 0001                            _SetSynthTxOper 34CC  
                                   _EEADR 000FA9                           __end_of___ftadd 138E  
         __size_of_SwSpi_Set_Dac_Sync_Pin 001C                           __end_of___ftdiv 1DC0  
                         __end_of___ftneg 3716                           __end_of___lldiv 291E  
                              _EepromRead 3950                           __end_of___ftmul 1CD8  
                                   _T0CON 000FD5                           __end_of___llmod 2B44  
                         __end_of___ftsub 31F4                           __end_of___fttol 1BE2  
                            _SYNTH_ADDRES 0635                            __CFG_DEBUG$OFF 000000  
                         __end_of___lwmod 3236                       StoreIntInEeprom@idx 0029  
                                   i2l801 0090                                     i2l870 35B4  
                                   i2l863 3386                                     i2l864 3382  
                                   i2l792 005E                                     i2l794 006A  
                                   i2l869 3594                                     i2l797 007A  
                                   i2l799 0086                       StoreIntInEeprom@val 0028  
                                   _TMR0H 000FD7                                     _TMR0L 000FD6  
                                   _TRISA 000F92                                     _TRISB 000F93  
                                   _TRISC 000F94                                     _TRISD 000F95  
                                   _TRISE 000F96                       _SWSPI_DAC_send_bits 2D72  
       __size_of_TMR0_SetInterruptHandler 000A                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                __end_of_GetIntFromUartData 150A  
                           __CFG_WRT2$OFF 000000                       ___lmul@multiplicand 001E  
               ?_TMR0_SetInterruptHandler 0018                             __CFG_WRT3$OFF 000000  
                            ___lltoft@exp 0028                      _EUSART1_Transmit_ISR 335A  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                         ?_WriteUartMessage 0019  
                        __end_of_TMR0_ISR 26EC                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                         DacSetValue@data 002C                           _DATAEE_ReadByte 3860  
                          __CFG_EBTRB$OFF 000000                             ___awtoft@sign 0023  
                 __end_of_PIN_MANAGER_IOC 396C                                     crc8@i 001F  
                                   _make8 2C62            __size_of_SWSPI_Synth_send_bits 00BA  
                   __end_of_GetMcuRunTime 1EA4                                     _count 00C8  
                                   _floor 1EA4                                     _ldexp 2060  
                                   _frexp 277C                                     _errno 00C4  
           __end_of_SWSPI_Synth_send_bits 229C                           __end_of_isalpha 3636  
                         __end_of_isdigit 3778                                     _group 00D1  
                      ??_WriteUartMessage 001D                        __CFG_MCLRE$EXTMCLR 000000  
                           ___ftpack@sign 001C                   ??_GroupStatusAndVersion 0030  
                         __end_of_isspace 3684                            ?_EUSART1_Write 0001  
                             ?_AdcConvert 0001                            __CFG_BOREN$OFF 000000  
                         __end_of_isupper 3796                                     pclath 000FFA  
                                   tablat 000FF5                                     pow@yi 00AF  
                          ??_EUSART1_Read 0018                                     plusw0 000FEB  
                                   plusw2 000FDB                                     status 000FD8  
                                   wtemp6 0049                      ReadIntFromEeprom@idx 01D1  
                          __CFG_HFOFST$ON 000000                           __end_of_toupper 3860  
          SwSpi_Set_Synth_Le_Pin@cPinMode 0018                   __end_of_GroupControlMcu 34CC  
                     __size_of_MEMORY_ISR 0004                            __CFG_PBADEN$ON 000000  
      __size_of_SetConversionResultFormat 000C                               exp@exponent 009F  
          CheckFlashPrecentage@precentage 007C                      ?_SWSPI_DAC_send_bits 001A  
                  __end_of_BlinkErrorLeds 2C62                               ldexp@newexp 0093  
                 __end_of_SWSPI_send_word 252E                               _BlinkOkLeds 2BA6  
                 WriteUartMessage@dataBuf 0019                           __initialization 2998  
                             log@exponent 0093                              __end_of_crc8 2FBE  
              __end_of_EUSART1_Initialize 33FE                              __end_of_main 2BA6  
                  __end_of_SetSynthRxOper 352C                   FLASH_ReadByte@flashAddr 0018  
                  __end_of_SetSynthTxOper 34FC               ?_INTERRUPT_InterruptManager 0001  
                        __end_of_GroupDAC 375A                    __size_of_SynthReadData 006A  
                         _readUartMessage 0A66                          __end_of_GroupAdc 309E  
                                  ??_crc8 001C                                    ??_main 0030  
                           ___fttol@sign1 0081                         ?_SwSpi_Set_CE_Pin 0018  
                      _TimerKeepAliveFlag 00D6                             __activetblptr 000002  
                 __size_of_FLASH_ReadByte 0012                          __end_of_ResetMcu 38D6  
                     __end_of_InitRxSynth 3056                       __end_of_InitTxSynth 300A  
                            _writeAddress 0040                        ??_SwSpi_Set_CE_Pin 0019  
                   ?_EUSART1_Transmit_ISR 0001                           ??_ZeroBitsArray 0022  
                 __end_of_TMR0_StartTimer 3968                                    ?_make8 0018  
                                  _ADCON0 000FC2                                    _ADCON1 000FC1  
                                  _ADCON2 000FC0                                    ?_floor 0091  
               FLASH_WriteBlock@writeAddr 001D                                    ?_ldexp 0090  
                                  ?_frexp 0018                          __end_of___altoft 2998  
                        ___llmod@dividend 0018                                    _ADRESH 000FC4  
                                  _ADRESL 000FC3                                    _EEDATA 000FA8  
                               ??_DacInit 00BA                                    _EECON2 000FA7  
                        __end_of___awtoft 335A                                    _ANSELA 000F38  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                                  _ANSELD 000F3B                                    _ANSELE 000F3C  
                        __end_of___ftpack 23F8                          __end_of___lltoft 2D1A  
                       _FlashReadUart$581 00B1                         _FlashReadUart$582 00B5  
                       ?_FlashSampleWrite 002D                                    i2l1023 268A  
                                  i2l1024 26AC                                    i2l1025 26CE  
                          __CFG_WDTEN$OFF 000000                      StoreIntInEeprom@data 0021  
                                  i2l1880 3202                                    i2l1883 3222  
                                  i2l1884 322C                                    i2l1879 320A  
                                  _TABLAT 000FF5                               _EepromWrite 38BA  
                                  _RCREG1 000FAE                          __end_of___lwtoft 373A  
                 __size_of_FlashEreaseMem 0052                 __size_of_FLASH_EraseBlock 0034  
                                  _RCSTA1 000FAB                         SynthReadData@data 0024  
         __size_of_SwSpi_Set_Synth_Le_Pin 003C                                    _OSCCON 000FD3  
                       SynthReadData@indx 007B                                    _SPBRG1 000FAF  
                  _SwSpi_Set_Dac_Sync_Pin 37D2                   __size_of_SwSpi_Data_Pin 0056  
                GroupSynthesizers@request 00BF                        ??_FlashSampleWrite 0060  
                                  _TXREG1 000FAD                                    _TXSTA1 000FAC  
                   ??_SWSPI_DAC_send_bits 001B                  __end_of_GroupFlashMemory 312A  
                         ?_BlinkErrorLeds 0001                            __CFG_PWRTEN$ON 000000  
                          __CFG_XINST$OFF 000000                                    _cState 00D2  
                                  ___ftge 280C                                    ___lmul 2E76  
               SWSPI_Synth_send_bits@data 0022                                    ___wmul 3684  
                               ??___ftadd 007E                 SWSPI_Synth_send_bits@mask 0080  
                               ??___ftdiv 0060                                 ??___ftneg 001B  
                               ??___lldiv 0020                                 ??___ftmul 006F  
                   __end_of_PLLInitialize 38F2                                 ??___llmod 0020  
                               ??___ftsub 002F                                 ??___fttol 007C  
                               ??___lwmod 0005            SwSpi_Set_Dac_Sync_Pin@cPinMode 0018  
                         ?_SetSynthRxOper 0001                           ?_SetSynthTxOper 0001  
                        ?_TMR0_Initialize 0001                                    _memset 35BA  
                      __end_of_DAC_ADDRES 0655                                    clear_0 29DE  
                                  clear_1 29EA                                    clear_2 29F6  
                     __size_of_AdcConvert 01B6                   __end_of_DATAEE_ReadByte 3874  
                             ?_EepromRead 0001                                    _strtol 0E54  
                                  floor@i 0094                     __end_of_SwSpi_Clk_Pin 2E76  
                                  floor@x 0091                     ___ftmul@f3_as_product 0073  
                SWSPI_DAC_send_bits@count 001B                FlashSampleWrite@channelNum 002F  
                            __pdataCOMRAM 0040                                 ??_isalpha 001B  
                               ??_isdigit 0018                     __end_of_FlashReadUart 0A66  
                        __end_of_testLeds 2ADE                             ?_SetMcuSystem 0001  
                            __mediumconst 0000                                 ??_isspace 0018  
                                  tblptrh 000FF7                                 ??_isupper 0018  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                ADC_GetConversion@channel 001C                           ??_EUSART1_Write 0018  
TMR0_SetInterruptHandler@InterruptHandler 0018              __size_of_InitRxMessageParams 0028  
                        ?_PIN_MANAGER_IOC 0001                     ReadIntFromEeprom@base 01C2  
                         _eusart1RxBuffer 0146                                 ??_toupper 0018  
                      __size_of_ZeroArray 001E             __size_of_INTERRUPT_Initialize 0004  
                           _SynthReadData 2A0A                           _eusart1TxBuffer 0100  
                         _GetMcuFwVersion 252E                          __end_ofexp@coeff 0673  
                       _SYSTEM_Initialize 37EE                          __end_oflog@coeff 068E  
                              __accesstop 0060                   __end_of__initialization 29FC  
                              ___altoft@c 0087                             ZeroArray@size 0022  
                              ___ftadd@f1 0078                                ___ftadd@f2 007B  
                              ___ftge@ff1 0018                                ___ftge@ff2 001B  
                      ?_SYSTEM_Initialize 0001                              eval_poly@res 008D  
                           ___rparam_used 000001                                ___ftdiv@f1 0029  
                              ___ftdiv@f2 002C                                ___ftdiv@f3 0064  
                        ?_GroupControlMcu 01C2              GroupStatusAndVersion@request 00BF  
                              ___ftneg@f1 0018                                ___awtoft@c 0020  
                 __end_of_readUartMessage 0C62                  WriteUartMessage@dataSize 001B  
                              ___ftmul@f1 0069                                ___ftmul@f2 006C  
                        ?_SWSPI_send_word 0026                              ?_DacSetValue 002C  
                              ___ftsub@f1 0084                                ___ftsub@f2 0087  
                              ___fttol@f1 0078                           _Make32bitsArray 2D1A  
                          __pcstackCOMRAM 0001                              __pidataBANK0 389A  
                     ??_SYSTEM_Initialize 001C                                 ?_TMR0_ISR 0001  
                              ___lltoft@c 0020                             __end_of_make8 2CBE  
                             _InitRxSynth 300A                          _DATAEE_WriteByte 3392  
                           __end_of_floor 1F86                             __end_of_ldexp 2126  
                           __end_of_frexp 280C                               _InitTxSynth 2FBE  
                  _SwSpi_Set_Synth_Le_Pin 32AE                      GroupFlashMemory@data 01C2  
                              ___lwtoft@c 0020           __end_of_DAC_DEFAULT_INIT_VALUES 064A  
                    __end_of_EUSART1_Read 316E                              ??_MEMORY_ISR 0001  
               __size_of_StoreIntInEeprom 0038                    __size_of_SetMcuRunTime 0044  
                  ??_EUSART1_Transmit_ISR 0001                            ??_SetMcuSystem 001C  
                      ZeroBitsArray@array 0020                     TMR0_ISR@CountCallBack 0034  
           SwSpi_Set_Synth_Le_Pin@phrType 0019                   GroupFlashMemory@request 01C4  
                      _keepAliveSignalLed 3808                         make8@dataLocation 001C  
             __end_of_EUSART1_Receive_ISR 35BA               FLASH_WriteBlock@GIEBitValue 002B  
                            GroupDAC@data 01C2                                   ??_make8 001D  
                                 ??_floor 002F                          ?_TMR0_StartTimer 0001  
                                 ??_ldexp 0095                                   ??_frexp 001D  
                         _AdcConvert$3314 00B9                 __end_of_SYSTEM_Initialize 3808  
                          ?_SynthReadData 0024                             _eusart1RxHead 0037  
                    GetMcuFwVersion@TxMsg 0060                             _eusart1TxHead 0039  
                           _eusart1RxTail 0036                                __pbssBANK0 00C0  
                              __pbssBANK1 0100                             _eusart1TxTail 0038  
                     ?_keepAliveSignalLed 0001                        __size_of_eval_poly 00DA  
                         __CFG_PLLCFG$OFF 000000                                _channelArr 064A  
                               ?_GroupDAC 01C2                                __pnvCOMRAM 0046  
                               ?_GroupAdc 01C2            __size_of_InitAdcApplicationMgr 0010  
              __end_of_SendSystemStartAck 393C             __end_of_InitAdcApplicationMgr 38BA  
                     __size_of_EepromRead 000A                        __end_of_MEMORY_ISR 3970  
                               ?_ResetMcu 0001                        _FlashReadCondition 18D8  
         ??_InitSystemApplicationManagers 0030                        __CFG_CCP2MX$PORTC1 000000  
                                 ?___ftge 0018                            FlashReadUart@j 00B9  
        __end_of_TMR0_SetInterruptHandler 3950                                   ?___lmul 001A  
                                 ?___wmul 0018                                ??_TMR0_ISR 0006  
                      __CFG_CCP3MX$PORTB5 000000                        SetChannelMode@data 002C  
                    ??_keepAliveSignalLed 0018                         __end_of_ZeroArray 37B4  
                               ?___altoft 0087                                   ?_memset 0018  
                       _ReadIntFromEeprom 1686                            ___lmul@product 0022  
                     ?_FlashReadCondition 0001                                 ?___awtoft 0020  
                               ?___ftpack 0018                              GroupAdc@data 01C2  
                        FlashReadUart@idx 00BB                                 ?___lltoft 0020  
               __size_of_FLASH_WriteBlock 00BC                   __size_of_ADC_Initialize 0016  
             __end_of_SetAdcOperationMode 3924                FlashSampleWrite@sampleData 002D  
                          _FLASH_ReadByte 3888                                 ?___lwtoft 0020  
            __end_of_CheckFlashPrecentage 234A                        ?_ReadIntFromEeprom 00B3  
                                 ?_strtol 0026                          ?_DATAEE_ReadByte 0001  
              GetMcuFwVersion@compileData 0069              __size_of_keepAliveSignalUart 000C  
                      SynthReadData@TxMsg 0060                   __end_of_GetMcuFwVersion 25C4  
                                 _OSCCON2 000FD2                                   _TBLPTRH 000FF7  
                                 _TBLPTRL 000FF6                                   _TBLPTRU 000FF8  
                                 _OSCTUNE 000F9B                                   _SPBRGH1 000FB0  
                     ??_ReadIntFromEeprom 00B7                                   _DacInit 25C4  
                   GetIntFromUartData@num 007A                          GetMcuRunTime@idx 006D  
                            ??_AdcConvert 00B3                      ??_FlashReadCondition 0024  
                          _FlashEreaseMem 2ECC                          _FLASH_EraseBlock 3468  
          __size_of_GroupStatusAndVersion 0024                            _SwSpi_Data_Pin 2DCA  
                    DATAEE_WriteByte@bAdd 0019             __end_of_GroupStatusAndVersion 36CE  
                 __end_of_Make32bitsArray 2D72                                ??_GroupDAC 0030  
                              ??_GroupAdc 0030                             _SetMcuRunTime 316E  
                      _GetIntFromUartData 138E                        FlashReadUart@TxMsg 006C  
                   GroupSynthesizers@data 01C2                                   __Hparam 0000  
                              ??_ResetMcu 002C                 __size_of_WriteUartMessage 0036  
                            ?_BlinkOkLeds 0001                                   __Lparam 0000  
                            _cntRegUpdate 003A                          UpdateRxFreq@data 002C  
                   SendAckMessage@inGroup 0025                          ?_readUartMessage 0001  
                  GroupControlMcu@request 00BF                                 ?_testLeds 0001  
               __end_of_ReadIntFromEeprom 17B6                       ?_GetIntFromUartData 0066  
                         __size_of___ftge 0090                           __size_of___lmul 0056  
                                 ___ftadd 11E0                                   ___ftdiv 1CD8  
                                 ___ftneg 36F2                                   ___lldiv 289C  
                         __size_of___wmul 0026                                   ___ftmul 1BE2  
                                 ___llmod 2ADE                                   ___ftsub 31B2  
                                 ___fttol 1AEA                FlashSampleWrite@rotateLeft 0062  
                            crc8@dataSize 001A                  __size_of_ClearMcuRunTime 0014  
                                 ___lwmod 31F4                      AdcConvert@_adcResult 00B5  
                            __psmallconst 0600                                ??___altoft 008B  
                  __end_of_FLASH_ReadByte 389A                           __CFG_STVREN$OFF 000000  
              SWSPI_Synth_send_bits@count 0084                     _mcuRunTimeIn5SecTicks 00C0  
                                 _crcCalc 00CD                                   _channel 00D4  
                                 __pcinit 2998                                ??___awtoft 0023  
                              ??___ftpack 001D                         __end_of_eval_poly 2060  
                         __size_of_memset 002C                                   __ramtop 0600  
                 __size_of_SendAckMessage 0052                                ??___lltoft 0024  
                 __size_of_SetChannelMode 0030                                   __ptext0 2B44  
                                 __ptext1 0A66                                   __ptext2 35E6  
                                 __ptext3 373A                                   __ptext4 30E6  
                                 __ptext5 3056                                   __ptext6 36AA  
                                 __ptext7 349C                                   __ptext8 23F8  
                                 __ptext9 26EC                                   crc8@crc 001D  
                      __end_of_AdcConvert 11E0                                ??___lwtoft 0023  
                               _T0CONbits 000FD5                         BlinkErrorLeds@idx 001C  
                         __size_of_strtol 01D6                     _OSCILLATOR_Initialize 38D6  
                            __size_of_abs 0028                                   _isalpha 360E  
                            __size_of_exp 01F2                              __size_of_log 0122  
                                 _isdigit 375A                              __size_of_pow 017C  
                      _EUSART1_Initialize 33C8                  ??_PIN_MANAGER_Initialize 0018  
                                 _isspace 365E                 StoreIntInEeprom@numOfByes 0026  
                                 _isupper 3778                          UpdateTxFreq@data 0087  
                                 _request 00D0                           GroupDAC@request 00BF  
                         ??_SynthReadData 0026                      ??_GetIntFromUartData 006E  
                  __end_of_FlashEreaseMem 2F1E                __size_of_SYSTEM_Initialize 001A  
                 ?_SwSpi_Set_Dac_Sync_Pin 0001                    __end_of_SwSpi_Data_Pin 2E20  
                 StoreIntInEeprom@address 0025                                   _toupper 384C  
                    end_of_initialization 29FC                             ?_UpdateRxFreq 002C  
                                 exp@sign 00A1                             ?_UpdateTxFreq 0087  
                     ?_EUSART1_Initialize 0001                          ??_BlinkErrorLeds 0018  
                            ?_EepromWrite 001B                     _SWSPI_Synth_send_bits 21E2  
               __size_of_SwSpi_Set_CE_Pin 003C                            ?_SetMcuRunTime 0001  
                                 memset@c 001A                                   memset@n 001C  
                                 memset@p 001E                             __Lmediumconst 0000  
                         ___lldiv@divisor 001C                      __end_of_SetMcuSystem 3946  
                                 pow@sign 00AE                           ___lldiv@counter 0024  
                        ??_SetSynthRxOper 0030                         ?_GroupFlashMemory 01C2  
                        AdcConvert@adcRes 00BC                          ??_SetSynthTxOper 0030  
                      __end_of_SYNTH_REGS 0635                                ??_testLeds 002C  
                    SWSPI_send_word@datac 002B                                _rxMsgQueue 00D9  
                                 postdec1 000FE5                                   postdec2 000FDD  
                      ??_GroupFlashMemory 00BF                                   postinc0 000FEE  
                                 postinc2 000FDE                     __size_of_EUSART1_Read 0044  
                     _InitRxMessageParams 35E6                               testLeds@idx 002D  
                    __size_of_DacSetValue 000C                 __size_of_FlashSampleWrite 00FA  
                  __size_of_GetMcuRunTime 00E4                      ??_EUSART1_Initialize 0018  
   __end_of_InitSystemApplicationManagers 384C    __size_of_InitSystemApplicationManagers 0016  
           _InitSystemApplicationManagers 3836                           ?_FLASH_ReadByte 0018  
                                 strtol@a 0061                                   strtol@c 0065  
                                 strtol@s 0026                  _TMR0_SetInterruptHandler 3946  
                            ??_EepromRead 0019                          _StoreIntInEeprom 32EA  
                        ?_GetMcuFwVersion 0001                            ZeroArray@array 0020  
          __end_of_SwSpi_Set_Dac_Sync_Pin 37EE                              strtol@endptr 0028  
           FLASH_WriteBlock@flashWrBufPtr 0021                        GetMcuRunTime@TxMsg 0060  
                    ?_InitRxMessageParams 0001                           ?_FlashEreaseMem 0001  
                     EUSART1_Write@txData 0018                           ?_SwSpi_Data_Pin 0018  
                   __end_of_ZeroBitsArray 37D2                            ??_UpdateRxFreq 002E  
                          ??_UpdateTxFreq 0030                  __end_of_DATAEE_WriteByte 33C8  
             __end_of_SWSPI_DAC_send_bits 2DCA                  FLASH_EraseBlock@baseAddr 0018  
                        ?_Make32bitsArray 0018                               ___ftdiv@exp 0067  
                            _EUSART1_Read 312A                      _CheckFlashPrecentage 229C  
                       FLASH_WriteBlock@i 002C                        __end_of_EepromRead 395A  
                             ___ftmul@exp 0072                   ?_SwSpi_Set_Synth_Le_Pin 0018  
                   PLLUartInitialize@data 0018                __size_of_ReadIntFromEeprom 0130  
              ?_SetConversionResultFormat 002C              __end_of_INTERRUPT_Initialize 3964  
                            ?_InitRxSynth 0001                              ?_InitTxSynth 0001  
                          __end_of___ftge 289C              InitAdcApplicationMgr@channel 0018  
                          __end_of___lmul 2ECC                            __end_of___wmul 36AA  
                     GroupControlMcu@data 01C2                             __pidataCOMRAM 395A  
                       __size_of_TMR0_ISR 0092                            _ADC_Initialize 3820  
                        _FLASH_WriteBlock 2126                    ?_OSCILLATOR_Initialize 0001  
                          __end_of_memset 35E6                                floor@expon 0097  
                       ??_ClearMcuRunTime 0018                            __end_of_strtol 102A  
                     start_initialization 2998                                eval_poly@d 0087  
                              eval_poly@n 0089                                eval_poly@x 0084  
                             _SynthRxOper 0044                          BlinkOkLeds@state 001B  
                __size_of_TMR0_Initialize 0034                                ldexp@value 0090  
                             _SynthTxOper 0045           __size_of_PIN_MANAGER_Initialize 0048  
                             __end_of_abs 365E                     ??_InitRxMessageParams 0024  
                             __end_of_exp 0E54                               __end_of_log 18D8  
                             __end_of_pow 1686                  AdcConvert@_adcResult_340 00B7  
                           _GetMcuRunTime 1DC0                    ?_SWSPI_Synth_send_bits 0022  
                         ??_SetMcuRunTime 0021                     __end_of_EUSART1_Write 3272  
                  __size_of_PLLInitialize 000E                                frexp@value 0018  
                         ___llmod@divisor 001C                     ?_CheckFlashPrecentage 0001  
                         ___llmod@counter 0020                       DATAEE_ReadByte@bAdd 0018  
                __size_of_PIN_MANAGER_IOC 0004                    __size_of_SwSpi_Clk_Pin 0056  
                     SendAckMessage@TxMsg 0026            __end_of_SwSpi_Set_Synth_Le_Pin 32EA  
                     _keepAliveSignalUart 3924                         __size_of_GroupDAC 0020  
                        _WriteUartMessage 33FE                         __size_of_GroupAdc 0048  
                  __size_of_FlashReadUart 03C2                                  ??___ftge 001E  
                                ??___lmul 0022                   SendAckMessage@inRequest 0024  
                                ??___wmul 001C                 GetIntFromUartData@idxData 0086  
                       __size_of_ResetMcu 000E                      __size_of_BlinkOkLeds 005E  
                 SetAdcOperationMode@data 002C                    __end_of_ADC_Initialize 3836  
       __end_of_SetConversionResultFormat 3918                               __pdataBANK0 00ED  
                 SWSPI_DAC_send_bits@data 001A                                  ??_memset 001E  
                __size_of_GroupControlMcu 0030               FLASH_EraseBlock@GIEBitValue 001C  
                          _SendAckMessage 2F1E                            _SetChannelMode 352C  
                __end_of_FLASH_EraseBlock 349C                        _SendSystemStartAck 3930  
                __size_of_SWSPI_send_word 009A                                  ??_strtol 002C  
                          _eusart1RxCount 00D3                         __size_of___altoft 007A  
                               _ZeroArray 3796                           DacInit@dacInput 00BC  
                       __size_of___awtoft 0038                         __size_of___ftpack 00AE  
                    ?_keepAliveSignalUart 0001                         __size_of___lltoft 005C  
                             __pbssCOMRAM 0030                         __size_of___lwtoft 0024  
           __size_of_EUSART1_Transmit_ISR 0038                             __pcstackBANK0 0060  
                           __pcstackBANK1 01C2                              _isalpha$3023 001C  
                     ?_SendSystemStartAck 0001                              _isdigit$3026 0019  
                          ?_GetMcuRunTime 0001                            BlinkOkLeds@idx 001C  
                                ?_DacInit 0001                     __size_of_SetMcuSystem 000A  
                        _SwSpi_Set_CE_Pin 3272              __size_of_EUSART1_Receive_ISR 002E  
           SWSPI_Synth_send_bits@bitArray 0060                   _DAC_DEFAULT_INIT_VALUES 0642  
                    __size_of_EepromWrite 000E                     _TMR0_InterruptHandler 00FD  
                               __pnvBANK0 00FD                  __size_of_TMR0_StartTimer 0004  
                  _PIN_MANAGER_Initialize 309E                      ??_SendSystemStartAck 002C  
                   _InitAdcApplicationMgr 38AA                                 __pintcode 0008  
                  __end_of_SendAckMessage 2F70                                 __ptext100 11E0  
                               __ptext101 36F2                                 __ptext110 38F2  
                               __ptext102 1CD8                                 __ptext111 355C  
                               __ptext103 3322                                 __ptext104 2CBE  
                               __ptext113 265A                                 __ptext105 3716  
                               __ptext114 31F4                                 __ptext106 234A  
                               __ptext115 3968                                 __ptext107 19F0  
                               __ptext116 396C                                 __ptext108 2126  
                               __ptext117 335A                                 __ptext109 3468  
                                ?___ftadd 0078                                 __ptext118 358C  
                               __ptext119 0000                                  ?___ftdiv 0029  
                  __end_of_SetChannelMode 355C                                  ?___ftneg 0018  
                                ?___lldiv 0018                                  ?___ftmul 0069  
                                ?___llmod 0018                                  ?___ftsub 0084  
                                ?___fttol 0078                          _FlashSampleWrite 19F0  
                                ?___lwmod 0001                           ?_ADC_Initialize 0001  
                    __end_of_UpdateRxFreq 36F2                         __size_of_testLeds 006A  
                           _PLLInitialize 38E4             SetConversionResultFormat@data 002C  
                    __end_of_UpdateTxFreq 277C               __size_of_keepAliveSignalLed 0018  
            ??_INTERRUPT_InterruptManager 0006                          __CFG_PRICLKEN$ON 000000  
                              ?_ZeroArray 0020                               __smallconst 0600  
                   ??_keepAliveSignalUart 002C                                  _BAUDCON1 000FB8  
                           _SwSpi_Clk_Pin 2E20                                  ?_isalpha 0001  
                                ?_isdigit 0001                                 _eval_poly 1F86  
                     BlinkErrorLeds@state 001B                           _TimerOneSecFlag 00D8  
                                ?_isspace 0001                              _SetMcuSystem 393C  
                                ?_isupper 0001                             _FlashReadUart 06A4  
                       _PLLUartInitialize 3970              __size_of_SetAdcOperationMode 000C  
                          __size_of_make8 005C                            __size_of_floor 00E2  
                          __size_of_ldexp 00C6                            __size_of_frexp 0090  
                      ?_PLLUartInitialize 0018                  __size_of_DATAEE_ReadByte 0014  
                                ?_toupper 0001                          _conversionFormat 00D5  
                    _INTERRUPT_Initialize 3960            FLASH_WriteBlock@blockStartAddr 0027  
             __size_of_FlashReadCondition 0118                         ??_TMR0_Initialize 001A  
                  ??_CheckFlashPrecentage 0078                            ___wmul@product 001C  
                                _LATAbits 000F89                                  _LATBbits 000F8A  
                                _LATCbits 000F8B                                  _LATDbits 000F8C  
                __end_of_StoreIntInEeprom 3322                       ??_PLLUartInitialize 001A  
          FlashReadUart@numOfSampleToRead 002C                                  _PIE1bits 000F9D  
                                _PIE2bits 000FA0                     _GroupStatusAndVersion 36AA  
                       _GroupSynthesizers 23F8       __size_of_INTERRUPT_InterruptManager 00D4  
              ??_TMR0_SetInterruptHandler 001A                      Make32bitsArray@array 0018  
                                _PIR1bits 000F9E                          ??_FLASH_ReadByte 001C  
                                _PIR2bits 000FA1                                 _rxMsgData 01AE  
                                i2u532_40 320E                       SWSPI_send_word@data 0026  
                      ?_GroupSynthesizers 01C2                                  _RCONbits 000FD0  
                        __CFG_WDTPS$16384 000000                        UpdateTxFreq@regIdx 0089  
                               make8@data 0018                                  _TMR0_ISR 265A  
                         ?_SendAckMessage 0024                        UpdateTxFreq@retVal 008A  
                         ?_SetChannelMode 002C                            ?_PLLInitialize 0001  
                       ??_PIN_MANAGER_IOC 0001                      __size_of_InitRxSynth 004C  
                     ??_GroupSynthesizers 0030                    GetIntFromUartData@data 0066  
                 SWSPI_send_word@dataSize 002A                                _ADCON0bits 000FC2  
                    __size_of_InitTxSynth 004C                  __size_of_readUartMessage 01FC  
                       ___wmul@multiplier 0018                            ?_SwSpi_Clk_Pin 0018  
                        ??_FlashEreaseMem 002C                 __end_of_PLLUartInitialize 3972  
                      __end_of_channelArr 0651                          ??_SwSpi_Data_Pin 0019  
               __size_of_GroupFlashMemory 0044                                ?_eval_poly 0084  
                          ?_FlashReadUart 002C                         ??_GroupControlMcu 0030  
                         ??_GetMcuRunTime 0025                     DATAEE_WriteByte@bData 0018  
                            _isspace$3029 0019                         ??_SWSPI_send_word 002B  
                              DacInit@idx 00BE                                _DAC_ADDRES 0651  
             __size_of_GetIntFromUartData 017C                         ___lmul@multiplier 001A  
                 FlashReadCondition@TxMsg 0060                               _INTCON2bits 000FF1  
                   __end_of_SynthReadData 2A74                                 copy_data0 29AC  
                               copy_data1 29CC                     ?_INTERRUPT_Initialize 0001  
                        __size_of_DacInit 0096                         ?_DATAEE_WriteByte 0018  
               __end_of_GroupSynthesizers 2494                     EUSART1_Read@readValue 0019  
                __end_of_FLASH_WriteBlock 21E2                                  _GroupDAC 373A  
                      ??_DATAEE_WriteByte 0019                                  _GroupAdc 3056  
                               frexp@eptr 001B                                _EECON1bits 000FA6  
                                __Hrparam 0000                    ?_InitAdcApplicationMgr 0001  
                                _ResetMcu 38C8                             ??_DacSetValue 002E  
                             _readAddress 00F9                                  __Lrparam 0000  
                       _ADC_GetConversion 355C                       FlashReadUart@offset 00BD  
                         _ClearMcuRunTime 3874                         __CFG_P2BMX$PORTD2 000000  
             ??_SetConversionResultFormat 002E                   ??_OSCILLATOR_Initialize 0018  
                      ?_ADC_GetConversion 0018                         ??_TMR0_StartTimer 0018  
                        __size_of___ftadd 01AE                          __size_of___ftdiv 00E8  
                    _numOfValidateSamples 0030                          __size_of___ftneg 0024  
                        __size_of___lldiv 0082                                  ___altoft 291E  
                        __size_of___ftmul 00F6                          __size_of___llmod 0066  
                        __size_of___ftsub 0042                          __size_of___fttol 00F8  
             __size_of_EUSART1_Initialize 0036                          __size_of___lwmod 0042  
                         GroupAdc@request 00BF                                  ___awtoft 3322  
                           crc8@dataArray 0018                                  ___ftpack 234A  
                        _numOfReadSamples 003C                                  ___lltoft 2CBE  
                       _FLASH_IsWriteDone 38F2                       WriteUartMessage@idx 001E  
                                ___lwtoft 3716                               ??_ZeroArray 0024  
                GetMcuRunTime@tempRunTime 0069                       ??_ADC_GetConversion 001A  
                                _exp$3319 009C                              _isupper$3032 0019  
                      ?_FLASH_IsWriteDone 0001                                  _dataSize 00CF  
                   SwSpi_Clk_Pin@cPinMode 0018                  __end_of_WriteUartMessage 3434  
                        __size_of_isalpha 0028                                  _crcGiven 00CC  
                        __size_of_isdigit 001E                   ??_SWSPI_Synth_send_bits 0026  
                  SwSpi_Data_Pin@cPinMode 0018                          __size_of_isspace 0026  
                                __ptext10 32EA                                  __ptext11 38BA  
                                __ptext20 36CE                                  __ptext12 3392  
                                __ptext21 2A0A                                  __ptext13 138E  
                                __ptext30 3888                                  __ptext22 34CC  
                                __ptext14 0E54                                  __ptext31 18D8  
                                __ptext23 34FC                                  __ptext15 384C  
                                __ptext40 3924                                  __ptext32 2ECC  
                                __ptext24 3970                                  __ptext16 365E  
                                __ptext41 3808                                  __ptext33 3900  
                                __ptext25 1DC0                                  __ptext17 375A  
                                __ptext50 3820                                  __ptext42 393C  
                                __ptext34 2A74                                  __ptext26 289C  
                                __ptext18 360E                                  __ptext51 316E  
                                __ptext43 37EE                                  __ptext35 38C8  
                                __ptext27 252E                                  __ptext19 3778  
                                __ptext60 3964                                  __ptext52 2ADE  
                                __ptext44 3434                                  __ptext36 390C  
                                __ptext28 06A4                                  __ptext61 38E4  
                                __ptext53 3930                                  __ptext45 3946  
                                __ptext37 352C                                  __ptext29 3636  
                                __ptext70 37D2                                  __ptext62 2FBE  
                                __ptext54 2F1E                                  __ptext46 309E  
                                __ptext38 3918                                  __ptext71 21E2  
                                __ptext63 300A                                  __ptext55 2F70  
                                __ptext47 38D6                                  __ptext39 312A  
                                __ptext80 3950                                  __ptext72 37B4  
                                __ptext64 3272                                  __ptext56 3796  
                                __ptext48 3960                                  __ptext81 3860  
                                __ptext73 35BA                                  __ptext65 38AA  
                                __ptext57 33FE                                  __ptext49 33C8  
                                __ptext90 2060                                  __ptext82 3874  
                                __ptext74 2D1A                                  __ptext66 25C4  
                                __ptext58 3236                                  __ptext91 1EA4  
                                __ptext83 229C                                  __ptext75 2D72  
                                __ptext67 2494                                  __ptext59 3836  
                                __ptext92 277C                                  __ptext84 2BA6  
                                __ptext76 2DCA                                  __ptext68 2C62  
                                __ptext93 1AEA                                  __ptext85 2C04  
                                __ptext77 2E20                                  __ptext69 32AE  
                                __ptext94 280C                                  __ptext86 102A  
                                __ptext78 1686                                  __ptext95 291E  
                                __ptext87 150A                                  __ptext79 2E76  
                                __ptext96 1F86                                  __ptext88 17B6  
                                __ptext97 3684                                  __ptext89 0C62  
                                __ptext98 1BE2                                  __ptext99 31B2  
                        __size_of_isupper 001E              SWSPI_Synth_send_bits@phrType 0085  
                SwSpi_Set_CE_Pin@cPinMode 0018                                  _pow$3317 00A8  
                                _pow$3318 00AB                       ??_FLASH_IsWriteDone 0018  
             DATAEE_WriteByte@GIEBitValue 001A                          __size_of_toupper 0014  
                __size_of_GetMcuFwVersion 0096                             __size_of_crc8 004E  
                           __size_of_main 0062                    ?_GroupStatusAndVersion 01C2  
                    __end_of_SYNTH_ADDRES 0642                                  _msgCount 00CB  
            _TMR0_DefaultInterruptHandler 000000                         ??_DATAEE_ReadByte 0018  
               __end_of_ADC_GetConversion 358C              __size_of_SWSPI_DAC_send_bits 0058  
                   __size_of_UpdateRxFreq 0024                       Make32bitsArray@data 001A  
                   __size_of_UpdateTxFreq 0090                        SWSPI_send_word@idx 002C  
                             _groupsArray 00ED                           ??_PLLInitialize 0030  
                                _testLeds 2A74                   __size_of_BlinkErrorLeds 005E  
                                int$flags 0048                  __size_of_Make32bitsArray 0058  
                              strtol@base 002A                                strtol@sign 0060  
               __end_of_FLASH_IsWriteDone 3900        __end_of_INTERRUPT_InterruptManager 00DC  
              _INTERRUPT_InterruptManager 0008                    __size_of_ZeroBitsArray 001E  
                         EepromWrite@data 001B                           ??_SwSpi_Clk_Pin 0019  
                     __end_of_DacSetValue 390C                       _EUSART1_Receive_ISR 358C  
                __end_of_SwSpi_Set_CE_Pin 32AE                         ?_FLASH_EraseBlock 0018  
             __end_of_InitRxMessageParams 360E                                  exp@coeff 0655  
                 __size_of_SetSynthRxOper 0030                                _MEMORY_ISR 396C  
                         ??_FlashReadUart 0060                                  log@coeff 0673  
                 __size_of_SetSynthTxOper 0030                __size_of_PLLUartInitialize 0002  
                  SWSPI_send_word@phrType 002E                        ??_FLASH_EraseBlock 001C  
                              _INTCONbits 000FF2                               ??_eval_poly 008B  
                             _sampleArray 016E                               _sampleCount 00C6  
                                isalpha@c 001D                                  isdigit@c 001A  
                  ??_INTERRUPT_Initialize 0018                                  memset@p1 0018  
                       ??_readUartMessage 01C5                 _SetConversionResultFormat 390C  
                __end_of_FlashSampleWrite 1AEA                                  intlevel2 0000  
                            _UpdateRxFreq 36CE                              _UpdateTxFreq 26EC  
                    ?_EUSART1_Receive_ISR 0001                     __end_of_SetMcuRunTime 31B2  
                        ___lwmod@dividend 0001                __size_of_GroupSynthesizers 009C  
                                isspace@c 001A                          ___lldiv@dividend 0018  
                 ?_PIN_MANAGER_Initialize 0001                   __end_of_ClearMcuRunTime 3888  
                              _RCSTA1bits 000FAB                                  isupper@c 001A  
                ReadIntFromEeprom@address 01CC              __end_of_EUSART1_Transmit_ISR 3392  
                           ??_BlinkOkLeds 0018                          ??_ADC_Initialize 0018  
                      Make32bitsArray@idx 0020                         _TimerSamplingFlag 00D7  
                           AdcConvert@idx 00BE                       _SetAdcOperationMode 3918  
                           _isReWriteDone 00CA                      SwSpi_Clk_Pin@phrType 0019  
                          InitRxSynth@idx 002F                     SwSpi_Data_Pin@phrType 0019  
                 SwSpi_Set_CE_Pin@phrType 0019                    __size_of_EUSART1_Write 003C  
                ??_SwSpi_Set_Dac_Sync_Pin 0018                         EepromRead@address 0019  
                        ___lldiv@quotient 0020                          _GroupFlashMemory 30E6  
                         ___lwmod@divisor 0003                           _TMR0_Initialize 3434  
                         ___lwmod@counter 0005                                  toupper@c 0018  
              ReadIntFromEeprom@numOfByes 00B3                         __CFG_T3CMX$PORTC0 000000  
                    ?_SetAdcOperationMode 002C                   ReadIntFromEeprom@retVal 01CD  
                          InitTxSynth@idx 002F                             ??_EepromWrite 001C  
                           _ZeroBitsArray 37B4                                _AdcConvert 102A  
                   ??_EUSART1_Receive_ISR 0001            __end_of_PIN_MANAGER_Initialize 30E6  
            GetIntFromUartData@dataRegArr 0070                         __CFG_FOSC$INTIO67 000000  
                         _PIN_MANAGER_IOC 3968                         ?_StoreIntInEeprom 0021  
                        ??_SendAckMessage 0025                __size_of_ADC_GetConversion 0030  
                        ??_SetChannelMode 002E                        ??_StoreIntInEeprom 0028  
                             _DacSetValue 3900  



Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 12 18:20:23 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1,group=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1,group=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1
   129                           	psect	text110,global,reloc=2,class=CODE,delta=1
   130                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   131                           	psect	text112,global,reloc=2,class=CODE,delta=1
   132                           	psect	text113,global,reloc=2,class=CODE,delta=1,group=1
   133                           	psect	text114,global,reloc=2,class=CODE,delta=1
   134                           	psect	text115,global,reloc=2,class=CODE,delta=1
   135                           	psect	text116,global,reloc=2,class=CODE,delta=1
   136                           	psect	text117,global,reloc=2,class=CODE,delta=1
   137                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   138                           	psect	text118,global,reloc=2,class=CODE,delta=1
   139                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   140                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   141  0000                     
   142                           ; Version 1.45
   143                           ; Generated 16/11/2017 GMT
   144                           ; 
   145                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   146                           ; All rights reserved.
   147                           ; 
   148                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   149                           ; 
   150                           ; Redistribution and use in source and binary forms, with or without modification, are
   151                           ; permitted provided that the following conditions are met:
   152                           ; 
   153                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   154                           ;        conditions and the following disclaimer.
   155                           ; 
   156                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   157                           ;        of conditions and the following disclaimer in the documentation and/or other
   158                           ;        materials provided with the distribution.
   159                           ; 
   160                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   161                           ;        software without specific prior written permission.
   162                           ; 
   163                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   164                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   165                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   166                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   167                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   168                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   169                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   170                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   171                           ; 
   172                           ; 
   173                           ; Code-generator required, PIC18F45K22 Definitions
   174                           ; 
   175                           ; SFR Addresses
   176  0000                     
   177 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   178  0000                     
   179                           	psect	idataCOMRAM
   180  0037B2                     __pidataCOMRAM:
   181                           	opt stack 0
   182                           
   183                           ;initializer for _writeAddress
   184  0037B2  4000               	dw	16384
   185  0037B4  0000               	dw	0
   186                           
   187                           	psect	idataBANK0
   188  003700                     __pidataBANK0:
   189                           	opt stack 0
   190                           
   191                           ;initializer for _groupsArray
   192  003700  02                 	db	low _GroupControlMcu
   193  003701  31                 	db	high _GroupControlMcu
   194  003702  F0                 	db	low _GroupStatusAndVersion
   195  003703  2A                 	db	high _GroupStatusAndVersion
   196  003704  E0                 	db	low _GroupAdc
   197  003705  2E                 	db	high _GroupAdc
   198  003706  DC                 	db	low _GroupSynthesizers
   199  003707  29                 	db	high _GroupSynthesizers
   200  003708  70                 	db	low _GroupFlashMemory
   201  003709  2F                 	db	high _GroupFlashMemory
   202  00370A  A0                 	db	low _GroupDAC
   203  00370B  35                 	db	high _GroupDAC
   204                           
   205                           ;initializer for _readAddress
   206  00370C  4000               	dw	16384
   207  00370E  0000               	dw	0
   208                           
   209                           	psect	smallconst
   210  000600                     __psmallconst:
   211                           	opt stack 0
   212  000600  00                 	db	0
   213  000601                     _SYNTH_REGS:
   214                           	opt stack 0
   215  000601  041C               	dw	1052
   216  000603  0001               	dw	1
   217  000605  300B               	dw	12299
   218  000607  0061               	dw	97
   219  000609  193A               	dw	6458
   220  00060B  00C0               	dw	192
   221  00060D  FCC9               	dw	64713
   222  00060F  1110               	dw	4368
   223  000611  0428               	dw	1064
   224  000613  102D               	dw	4141
   225  000615  00E7               	dw	231
   226  000617  1200               	dw	4608
   227  000619  6076               	dw	24694
   228  00061B  3500               	dw	13568
   229  00061D  0025               	dw	37
   230  00061F  0080               	dw	128
   231  000621  8384               	dw	33668
   232  000623  3000               	dw	12288
   233  000625  0003               	dw	3
   234  000627  0000               	dw	0
   235  000629  0012               	dw	18
   236  00062B  0000               	dw	0
   237  00062D  0001               	dw	1
   238  00062F  0000               	dw	0
   239  000631  0640               	dw	1600
   240  000633  0020               	dw	32
   241  000635                     __end_of_SYNTH_REGS:
   242                           	opt stack 0
   243  000635                     _channelArr:
   244                           	opt stack 0
   245  000635  07                 	db	7
   246  000636  06                 	db	6
   247  000637  05                 	db	5
   248  000638  04                 	db	4
   249  000639  19                 	db	25
   250  00063A  0A                 	db	10
   251  00063B  0D                 	db	13
   252  00063C                     __end_of_channelArr:
   253                           	opt stack 0
   254  00063C                     _DAC_ADDRES:
   255                           	opt stack 0
   256  00063C  00                 	db	0
   257  00063D  02                 	db	2
   258  00063E  04                 	db	4
   259  00063F  08                 	db	8
   260  000640                     __end_of_DAC_ADDRES:
   261                           	opt stack 0
   262  000640                     exp@coeff:
   263                           	opt stack 0
   264  000640  00                 	db	0
   265  000641  80                 	db	128
   266  000642  3F                 	db	63
   267  000643  72                 	db	114
   268  000644  31                 	db	49
   269  000645  3F                 	db	63
   270  000646  FE                 	db	254
   271  000647  75                 	db	117
   272  000648  3E                 	db	62
   273  000649  58                 	db	88
   274  00064A  63                 	db	99
   275  00064B  3D                 	db	61
   276  00064C  95                 	db	149
   277  00064D  1D                 	db	29
   278  00064E  3C                 	db	60
   279  00064F  C5                 	db	197
   280  000650  AE                 	db	174
   281  000651  3A                 	db	58
   282  000652  79                 	db	121
   283  000653  21                 	db	33
   284  000654  39                 	db	57
   285  000655  94                 	db	148
   286  000656  80                 	db	128
   287  000657  37                 	db	55
   288  000658  93                 	db	147
   289  000659  A7                 	db	167
   290  00065A  35                 	db	53
   291  00065B  56                 	db	86
   292  00065C  15                 	db	21
   293  00065D  34                 	db	52
   294  00065E                     __end_ofexp@coeff:
   295                           	opt stack 0
   296  00065E                     log@coeff:
   297                           	opt stack 0
   298  00065E  00                 	db	0
   299  00065F  00                 	db	0
   300  000660  00                 	db	0
   301  000661  00                 	db	0
   302  000662  80                 	db	128
   303  000663  3F                 	db	63
   304  000664  F0                 	db	240
   305  000665  FF                 	db	255
   306  000666  BE                 	db	190
   307  000667  E2                 	db	226
   308  000668  A9                 	db	169
   309  000669  3E                 	db	62
   310  00066A  83                 	db	131
   311  00066B  76                 	db	118
   312  00066C  BE                 	db	190
   313  00066D  AE                 	db	174
   314  00066E  2B                 	db	43
   315  00066F  3E                 	db	62
   316  000670  3C                 	db	60
   317  000671  C3                 	db	195
   318  000672  BD                 	db	189
   319  000673  D2                 	db	210
   320  000674  13                 	db	19
   321  000675  3D                 	db	61
   322  000676  78                 	db	120
   323  000677  D3                 	db	211
   324  000678  BB                 	db	187
   325  000679                     __end_oflog@coeff:
   326                           	opt stack 0
   327  000679  00                 	db	0	; dummy byte at the end
   328  0000                     
   329                           	psect	nvCOMRAM
   330  000046                     __pnvCOMRAM:
   331                           	opt stack 0
   332  000046                     _timer0ReloadVal:
   333                           	opt stack 0
   334  000046                     	ds	2
   335                           
   336                           	psect	nvBANK0
   337  0000FD                     __pnvBANK0:
   338                           	opt stack 0
   339  0000FD                     _TMR0_InterruptHandler:
   340                           	opt stack 0
   341  0000FD                     	ds	2
   342  0000FF                     _eusart1TxBufferRemaining:
   343                           	opt stack 0
   344  0000FF                     	ds	1
   345  0000                     _ANSELA	set	3896
   346  0000                     _ANSELE	set	3900
   347  0000                     _ANSELD	set	3899
   348  0000                     _ANSELB	set	3897
   349  0000                     _ANSELC	set	3898
   350  0000                     _ADCON0bits	set	4034
   351  0000                     _ADRESH	set	4036
   352  0000                     _ADRESL	set	4035
   353  0000                     _ADCON2	set	4032
   354  0000                     _ADCON1	set	4033
   355  0000                     _ADCON0	set	4034
   356  0000                     _T0CONbits	set	4053
   357  0000                     _T0CON	set	4053
   358  0000                     _TMR0L	set	4054
   359  0000                     _TMR0H	set	4055
   360  0000                     _EEDATA	set	4008
   361  0000                     _EEADR	set	4009
   362  0000                     _EECON2	set	4007
   363  0000                     _EECON1bits	set	4006
   364  0000                     _TABLAT	set	4085
   365  0000                     _TBLPTRL	set	4086
   366  0000                     _TBLPTRH	set	4087
   367  0000                     _TBLPTRU	set	4088
   368  0000                     _INTCON2bits	set	4081
   369  0000                     _WPUB	set	3937
   370  0000                     _TRISD	set	3989
   371  0000                     _TRISC	set	3988
   372  0000                     _TRISB	set	3987
   373  0000                     _TRISA	set	3986
   374  0000                     _TRISE	set	3990
   375  0000                     _LATC	set	3979
   376  0000                     _LATB	set	3978
   377  0000                     _LATA	set	3977
   378  0000                     _LATD	set	3980
   379  0000                     _LATE	set	3981
   380  0000                     _RCREG1	set	4014
   381  0000                     _RCSTA1bits	set	4011
   382  0000                     _TXREG1	set	4013
   383  0000                     _SPBRGH1	set	4016
   384  0000                     _SPBRG1	set	4015
   385  0000                     _TXSTA1	set	4012
   386  0000                     _RCSTA1	set	4011
   387  0000                     _BAUDCON1	set	4024
   388  0000                     _PIR1bits	set	3998
   389  0000                     _PIE1bits	set	3997
   390  0000                     _PIR2bits	set	4001
   391  0000                     _PIE2bits	set	4000
   392  0000                     _RCONbits	set	4048
   393  0000                     _OSCTUNE	set	3995
   394  0000                     _OSCCON2	set	4050
   395  0000                     _OSCCON	set	4051
   396  0000                     _LATAbits	set	3977
   397  0000                     _LATDbits	set	3980
   398  0000                     _INTCONbits	set	4082
   399  0000                     _IOCB	set	3938
   400  0000                     _LATCbits	set	3979
   401  0000                     _LATBbits	set	3978
   402                           
   403                           ; #config settings
   404  0000                     
   405                           	psect	cinit
   406  0026AC                     __pcinit:
   407                           	opt stack 0
   408  0026AC                     start_initialization:
   409                           	opt stack 0
   410  0026AC                     __initialization:
   411                           	opt stack 0
   412                           
   413                           ; Initialize objects allocated to BANK0 (16 bytes)
   414                           ; load TBLPTR registers with __pidataBANK0
   415  0026AC  0E00               	movlw	low __pidataBANK0
   416  0026AE  6EF6               	movwf	tblptrl,c
   417  0026B0  0E37               	movlw	high __pidataBANK0
   418  0026B2  6EF7               	movwf	tblptrh,c
   419  0026B4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   420  0026B6  6EF8               	movwf	tblptru,c
   421  0026B8  EE00  F0ED         	lfsr	0,__pdataBANK0
   422  0026BC  EE10 F010          	lfsr	1,16
   423  0026C0                     copy_data0:
   424  0026C0  0009               	tblrd		*+
   425  0026C2  CFF5 FFEE          	movff	tablat,postinc0
   426  0026C6  50E5               	movf	postdec1,w,c
   427  0026C8  50E1               	movf	fsr1l,w,c
   428  0026CA  E1FA               	bnz	copy_data0
   429                           
   430                           ; Initialize objects allocated to COMRAM (4 bytes)
   431                           ; load TBLPTR registers with __pidataCOMRAM
   432  0026CC  0EB2               	movlw	low __pidataCOMRAM
   433  0026CE  6EF6               	movwf	tblptrl,c
   434  0026D0  0E37               	movlw	high __pidataCOMRAM
   435  0026D2  6EF7               	movwf	tblptrh,c
   436  0026D4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   437  0026D6  6EF8               	movwf	tblptru,c
   438  0026D8  EE00  F042         	lfsr	0,__pdataCOMRAM
   439  0026DC  EE10 F004          	lfsr	1,4
   440  0026E0                     copy_data1:
   441  0026E0  0009               	tblrd		*+
   442  0026E2  CFF5 FFEE          	movff	tablat,postinc0
   443  0026E6  50E5               	movf	postdec1,w,c
   444  0026E8  50E1               	movf	fsr1l,w,c
   445  0026EA  E1FA               	bnz	copy_data1
   446                           
   447                           ; Clear objects allocated to BANK1 (194 bytes)
   448  0026EC  EE01  F000         	lfsr	0,__pbssBANK1
   449  0026F0  0EC2               	movlw	194
   450  0026F2                     clear_0:
   451  0026F2  6AEE               	clrf	postinc0,c
   452  0026F4  06E8               	decf	wreg,f,c
   453  0026F6  E1FD               	bnz	clear_0
   454                           
   455                           ; Clear objects allocated to BANK0 (44 bytes)
   456  0026F8  EE00  F0C1         	lfsr	0,__pbssBANK0
   457  0026FC  0E2C               	movlw	44
   458  0026FE                     clear_1:
   459  0026FE  6AEE               	clrf	postinc0,c
   460  002700  06E8               	decf	wreg,f,c
   461  002702  E1FD               	bnz	clear_1
   462                           
   463                           ; Clear objects allocated to COMRAM (17 bytes)
   464  002704  EE00  F031         	lfsr	0,__pbssCOMRAM
   465  002708  0E11               	movlw	17
   466  00270A                     clear_2:
   467  00270A  6AEE               	clrf	postinc0,c
   468  00270C  06E8               	decf	wreg,f,c
   469  00270E  E1FD               	bnz	clear_2
   470  002710                     end_of_initialization:
   471                           	opt stack 0
   472  002710                     __end_of__initialization:
   473                           	opt stack 0
   474  002710  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   475  002712  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   476  002714  0E00               	movlw	low (__Lmediumconst shr (0+16))
   477  002716  6EF8               	movwf	tblptru,c
   478  002718  0100               	movlb	0
   479  00271A  EF30  F014         	goto	_main	;jump to C main() function
   480                           tblptru	equ	0xFF8
   481                           tblptrh	equ	0xFF7
   482                           tblptrl	equ	0xFF6
   483                           tablat	equ	0xFF5
   484                           postinc0	equ	0xFEE
   485                           wreg	equ	0xFE8
   486                           postdec1	equ	0xFE5
   487                           fsr1l	equ	0xFE1
   488                           
   489                           	psect	bssCOMRAM
   490  000031                     __pbssCOMRAM:
   491                           	opt stack 0
   492  000031                     _numOfValidateSamples:
   493                           	opt stack 0
   494  000031                     	ds	4
   495  000035                     TMR0_ISR@CountCallBack:
   496                           	opt stack 0
   497  000035                     	ds	2
   498  000037                     _eusart1RxTail:
   499                           	opt stack 0
   500  000037                     	ds	1
   501  000038                     _eusart1RxHead:
   502                           	opt stack 0
   503  000038                     	ds	1
   504  000039                     _eusart1TxTail:
   505                           	opt stack 0
   506  000039                     	ds	1
   507  00003A                     _eusart1TxHead:
   508                           	opt stack 0
   509  00003A                     	ds	1
   510  00003B                     _cntRegUpdate:
   511                           	opt stack 0
   512  00003B                     	ds	1
   513  00003C                     _isReWriteDone:
   514                           	opt stack 0
   515  00003C                     	ds	1
   516  00003D                     _adcSampleMode:
   517                           	opt stack 0
   518  00003D                     	ds	1
   519  00003E                     _numOfReadSamples:
   520                           	opt stack 0
   521  00003E                     	ds	4
   522                           tblptru	equ	0xFF8
   523                           tblptrh	equ	0xFF7
   524                           tblptrl	equ	0xFF6
   525                           tablat	equ	0xFF5
   526                           postinc0	equ	0xFEE
   527                           wreg	equ	0xFE8
   528                           postdec1	equ	0xFE5
   529                           fsr1l	equ	0xFE1
   530                           
   531                           	psect	dataCOMRAM
   532  000042                     __pdataCOMRAM:
   533                           	opt stack 0
   534  000042                     _writeAddress:
   535                           	opt stack 0
   536  000042                     	ds	4
   537                           tblptru	equ	0xFF8
   538                           tblptrh	equ	0xFF7
   539                           tblptrl	equ	0xFF6
   540                           tablat	equ	0xFF5
   541                           postinc0	equ	0xFEE
   542                           wreg	equ	0xFE8
   543                           postdec1	equ	0xFE5
   544                           fsr1l	equ	0xFE1
   545                           
   546                           	psect	bssBANK0
   547  0000C1                     __pbssBANK0:
   548                           	opt stack 0
   549  0000C1                     _mcuRunTimeIn5SecTicks:
   550                           	opt stack 0
   551  0000C1                     	ds	4
   552  0000C5                     _errno:
   553                           	opt stack 0
   554  0000C5                     	ds	2
   555  0000C7                     _sampleCount:
   556                           	opt stack 0
   557  0000C7                     	ds	2
   558  0000C9                     _count:
   559                           	opt stack 0
   560  0000C9                     	ds	2
   561  0000CB                     _msgCount:
   562                           	opt stack 0
   563  0000CB                     	ds	1
   564  0000CC                     _crcGiven:
   565                           	opt stack 0
   566  0000CC                     	ds	1
   567  0000CD                     _crcCalc:
   568                           	opt stack 0
   569  0000CD                     	ds	1
   570  0000CE                     _data:
   571                           	opt stack 0
   572  0000CE                     	ds	1
   573  0000CF                     _dataSize:
   574                           	opt stack 0
   575  0000CF                     	ds	1
   576  0000D0                     _request:
   577                           	opt stack 0
   578  0000D0                     	ds	1
   579  0000D1                     _group:
   580                           	opt stack 0
   581  0000D1                     	ds	1
   582  0000D2                     _cState:
   583                           	opt stack 0
   584  0000D2                     	ds	1
   585  0000D3                     _eusart1RxCount:
   586                           	opt stack 0
   587  0000D3                     	ds	1
   588  0000D4                     _channel:
   589                           	opt stack 0
   590  0000D4                     	ds	1
   591  0000D5                     _conversionFormat:
   592                           	opt stack 0
   593  0000D5                     	ds	1
   594  0000D6                     _TimerKeepAliveFlag:
   595                           	opt stack 0
   596  0000D6                     	ds	1
   597  0000D7                     _TimerSamplingFlag:
   598                           	opt stack 0
   599  0000D7                     	ds	1
   600  0000D8                     _TimerOneSecFlag:
   601                           	opt stack 0
   602  0000D8                     	ds	1
   603  0000D9                     _rxMsgQueue:
   604                           	opt stack 0
   605  0000D9                     	ds	20
   606                           tblptru	equ	0xFF8
   607                           tblptrh	equ	0xFF7
   608                           tblptrl	equ	0xFF6
   609                           tablat	equ	0xFF5
   610                           postinc0	equ	0xFEE
   611                           wreg	equ	0xFE8
   612                           postdec1	equ	0xFE5
   613                           fsr1l	equ	0xFE1
   614                           
   615                           	psect	dataBANK0
   616  0000ED                     __pdataBANK0:
   617                           	opt stack 0
   618  0000ED                     _groupsArray:
   619                           	opt stack 0
   620  0000ED                     	ds	12
   621  0000F9                     _readAddress:
   622                           	opt stack 0
   623  0000F9                     	ds	4
   624                           tblptru	equ	0xFF8
   625                           tblptrh	equ	0xFF7
   626                           tblptrl	equ	0xFF6
   627                           tablat	equ	0xFF5
   628                           postinc0	equ	0xFEE
   629                           wreg	equ	0xFE8
   630                           postdec1	equ	0xFE5
   631                           fsr1l	equ	0xFE1
   632                           
   633                           	psect	bssBANK1
   634  000100                     __pbssBANK1:
   635                           	opt stack 0
   636  000100                     _eusart1TxBuffer:
   637                           	opt stack 0
   638  000100                     	ds	70
   639  000146                     _eusart1RxBuffer:
   640                           	opt stack 0
   641  000146                     	ds	40
   642  00016E                     _sampleArray:
   643                           	opt stack 0
   644  00016E                     	ds	64
   645  0001AE                     _rxMsgData:
   646                           	opt stack 0
   647  0001AE                     	ds	20
   648                           tblptru	equ	0xFF8
   649                           tblptrh	equ	0xFF7
   650                           tblptrl	equ	0xFF6
   651                           tablat	equ	0xFF5
   652                           postinc0	equ	0xFEE
   653                           wreg	equ	0xFE8
   654                           postdec1	equ	0xFE5
   655                           fsr1l	equ	0xFE1
   656                           
   657                           	psect	cstackBANK1
   658  0001C2                     __pcstackBANK1:
   659                           	opt stack 0
   660  0001C2                     GroupStatusAndVersion@data:
   661                           	opt stack 0
   662  0001C2                     GroupAdc@data:
   663                           	opt stack 0
   664  0001C2                     GroupSynthesizers@data:
   665                           	opt stack 0
   666  0001C2                     GroupFlashMemory@data:
   667                           	opt stack 0
   668  0001C2                     GroupDAC@data:
   669                           	opt stack 0
   670  0001C2                     
   671                           ; 3 bytes @ 0x0
   672  0001C2                     	ds	2
   673  0001C4                     ??_readUartMessage:
   674                           
   675                           ; 1 bytes @ 0x2
   676  0001C4                     	ds	4
   677  0001C8                     readUartMessage@idx:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x6
   681  0001C8                     	ds	2
   682  0001CA                     readUartMessage@chRec:
   683                           	opt stack 0
   684                           
   685                           ; 1 bytes @ 0x8
   686  0001CA                     	ds	1
   687                           tblptru	equ	0xFF8
   688                           tblptrh	equ	0xFF7
   689                           tblptrl	equ	0xFF6
   690                           tablat	equ	0xFF5
   691                           postinc0	equ	0xFEE
   692                           wreg	equ	0xFE8
   693                           postdec1	equ	0xFE5
   694                           fsr1l	equ	0xFE1
   695                           
   696                           	psect	cstackBANK0
   697  000060                     __pcstackBANK0:
   698                           	opt stack 0
   699  000060                     ??_FlashSampleWrite:
   700  000060                     ??___ftdiv:
   701  000060                     ??_FlashReadUart:
   702  000060                     strtol@sign:
   703                           	opt stack 0
   704  000060                     GetMcuRunTime@TxMsg:
   705                           	opt stack 0
   706  000060                     SWSPI_Synth_send_bits@bitArray:
   707                           	opt stack 0
   708                           
   709                           ; 32 bytes @ 0x0
   710  000060                     	ds	1
   711  000061                     strtol@a:
   712                           	opt stack 0
   713                           
   714                           ; 4 bytes @ 0x1
   715  000061                     	ds	1
   716  000062                     FlashSampleWrite@rotateLeft:
   717                           	opt stack 0
   718                           
   719                           ; 2 bytes @ 0x2
   720  000062                     	ds	1
   721  000063                     ___ftdiv@cntr:
   722                           	opt stack 0
   723                           
   724                           ; 1 bytes @ 0x3
   725  000063                     	ds	1
   726  000064                     ___ftdiv@f3:
   727                           	opt stack 0
   728                           
   729                           ; 3 bytes @ 0x4
   730  000064                     	ds	1
   731  000065                     strtol@c:
   732                           	opt stack 0
   733                           
   734                           ; 1 bytes @ 0x5
   735  000065                     	ds	1
   736  000066                     ?_GetIntFromUartData:
   737                           	opt stack 0
   738  000066                     GetIntFromUartData@data:
   739                           	opt stack 0
   740                           
   741                           ; 2 bytes @ 0x6
   742  000066                     	ds	1
   743  000067                     ___ftdiv@exp:
   744                           	opt stack 0
   745                           
   746                           ; 1 bytes @ 0x7
   747  000067                     	ds	1
   748  000068                     ___ftdiv@sign:
   749                           	opt stack 0
   750                           
   751                           ; 1 bytes @ 0x8
   752  000068                     	ds	1
   753  000069                     ?___ftmul:
   754                           	opt stack 0
   755  000069                     ___ftmul@f1:
   756                           	opt stack 0
   757  000069                     GetMcuRunTime@tempRunTime:
   758                           	opt stack 0
   759                           
   760                           ; 4 bytes @ 0x9
   761  000069                     	ds	1
   762  00006A                     GetIntFromUartData@dataRegArr:
   763                           	opt stack 0
   764                           
   765                           ; 9 bytes @ 0xA
   766  00006A                     	ds	2
   767  00006C                     ___ftmul@f2:
   768                           	opt stack 0
   769  00006C                     FlashReadUart@TxMsg:
   770                           	opt stack 0
   771                           
   772                           ; 69 bytes @ 0xC
   773  00006C                     	ds	1
   774  00006D                     GetMcuRunTime@idx:
   775                           	opt stack 0
   776                           
   777                           ; 2 bytes @ 0xD
   778  00006D                     	ds	2
   779  00006F                     ??___ftmul:
   780                           
   781                           ; 1 bytes @ 0xF
   782  00006F                     	ds	3
   783  000072                     ___ftmul@exp:
   784                           	opt stack 0
   785                           
   786                           ; 1 bytes @ 0x12
   787  000072                     	ds	1
   788  000073                     GetIntFromUartData@num:
   789                           	opt stack 0
   790  000073                     ___ftmul@f3_as_product:
   791                           	opt stack 0
   792                           
   793                           ; 3 bytes @ 0x13
   794  000073                     	ds	1
   795  000074                     GetIntFromUartData@retVal:
   796                           	opt stack 0
   797                           
   798                           ; 4 bytes @ 0x14
   799  000074                     	ds	2
   800  000076                     ___ftmul@cntr:
   801                           	opt stack 0
   802                           
   803                           ; 1 bytes @ 0x16
   804  000076                     	ds	1
   805  000077                     ___ftmul@sign:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x17
   809  000077                     	ds	1
   810  000078                     ??_CheckFlashPrecentage:
   811  000078                     ?___ftadd:
   812                           	opt stack 0
   813  000078                     ?___fttol:
   814                           	opt stack 0
   815  000078                     GetIntFromUartData@c:
   816                           	opt stack 0
   817  000078                     ___ftadd@f1:
   818                           	opt stack 0
   819  000078                     ___fttol@f1:
   820                           	opt stack 0
   821                           
   822                           ; 3 bytes @ 0x18
   823  000078                     	ds	1
   824  000079                     GetIntFromUartData@idx:
   825                           	opt stack 0
   826                           
   827                           ; 2 bytes @ 0x19
   828  000079                     	ds	2
   829  00007B                     ___ftadd@f2:
   830                           	opt stack 0
   831                           
   832                           ; 3 bytes @ 0x1B
   833  00007B                     	ds	1
   834  00007C                     ??___fttol:
   835  00007C                     CheckFlashPrecentage@precentage:
   836                           	opt stack 0
   837                           
   838                           ; 3 bytes @ 0x1C
   839  00007C                     	ds	2
   840  00007E                     ??___ftadd:
   841                           
   842                           ; 1 bytes @ 0x1E
   843  00007E                     	ds	2
   844  000080                     SWSPI_Synth_send_bits@mask:
   845                           	opt stack 0
   846                           
   847                           ; 4 bytes @ 0x20
   848  000080                     	ds	1
   849  000081                     ___ftadd@sign:
   850                           	opt stack 0
   851  000081                     ___fttol@sign1:
   852                           	opt stack 0
   853                           
   854                           ; 1 bytes @ 0x21
   855  000081                     	ds	1
   856  000082                     ___ftadd@exp2:
   857                           	opt stack 0
   858  000082                     ___fttol@lval:
   859                           	opt stack 0
   860                           
   861                           ; 4 bytes @ 0x22
   862  000082                     	ds	1
   863  000083                     ___ftadd@exp1:
   864                           	opt stack 0
   865                           
   866                           ; 1 bytes @ 0x23
   867  000083                     	ds	1
   868  000084                     ?___ftsub:
   869                           	opt stack 0
   870  000084                     ?_eval_poly:
   871                           	opt stack 0
   872  000084                     SWSPI_Synth_send_bits@count:
   873                           	opt stack 0
   874  000084                     ___ftsub@f1:
   875                           	opt stack 0
   876  000084                     eval_poly@x:
   877                           	opt stack 0
   878                           
   879                           ; 3 bytes @ 0x24
   880  000084                     	ds	1
   881  000085                     SWSPI_Synth_send_bits@phrType:
   882                           	opt stack 0
   883                           
   884                           ; 1 bytes @ 0x25
   885  000085                     	ds	1
   886  000086                     ??_DacSetValue:
   887  000086                     ___fttol@exp1:
   888                           	opt stack 0
   889  000086                     UpdateTxFreq@regData:
   890                           	opt stack 0
   891  000086                     UpdateRxFreq@regData:
   892                           	opt stack 0
   893                           
   894                           ; 4 bytes @ 0x26
   895  000086                     	ds	1
   896  000087                     ?___altoft:
   897                           	opt stack 0
   898  000087                     eval_poly@d:
   899                           	opt stack 0
   900  000087                     ___ftsub@f2:
   901                           	opt stack 0
   902  000087                     ___altoft@c:
   903                           	opt stack 0
   904                           
   905                           ; 4 bytes @ 0x27
   906  000087                     	ds	2
   907  000089                     DacSetValue@dacIndex:
   908                           	opt stack 0
   909  000089                     eval_poly@n:
   910                           	opt stack 0
   911                           
   912                           ; 2 bytes @ 0x29
   913  000089                     	ds	1
   914  00008A                     DacSetValue@regData:
   915                           	opt stack 0
   916                           
   917                           ; 2 bytes @ 0x2A
   918  00008A                     	ds	1
   919  00008B                     ??___altoft:
   920  00008B                     eval_poly@res:
   921                           	opt stack 0
   922                           
   923                           ; 3 bytes @ 0x2B
   924  00008B                     	ds	3
   925  00008E                     ?_log:
   926                           	opt stack 0
   927  00008E                     ?_ldexp:
   928                           	opt stack 0
   929  00008E                     ldexp@value:
   930                           	opt stack 0
   931  00008E                     log@x:
   932                           	opt stack 0
   933                           
   934                           ; 3 bytes @ 0x2E
   935  00008E                     	ds	1
   936  00008F                     ?_floor:
   937                           	opt stack 0
   938  00008F                     floor@x:
   939                           	opt stack 0
   940                           
   941                           ; 3 bytes @ 0x2F
   942  00008F                     	ds	2
   943  000091                     ldexp@newexp:
   944                           	opt stack 0
   945  000091                     log@exponent:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x31
   949  000091                     	ds	1
   950  000092                     floor@i:
   951                           	opt stack 0
   952                           
   953                           ; 3 bytes @ 0x32
   954  000092                     	ds	1
   955  000093                     ??_ldexp:
   956                           
   957                           ; 1 bytes @ 0x33
   958  000093                     	ds	2
   959  000095                     floor@expon:
   960                           	opt stack 0
   961                           
   962                           ; 2 bytes @ 0x35
   963  000095                     	ds	2
   964  000097                     ?_exp:
   965                           	opt stack 0
   966  000097                     exp@x:
   967                           	opt stack 0
   968                           
   969                           ; 3 bytes @ 0x37
   970  000097                     	ds	3
   971  00009A                     _exp$3249:
   972                           	opt stack 0
   973                           
   974                           ; 3 bytes @ 0x3A
   975  00009A                     	ds	3
   976  00009D                     exp@exponent:
   977                           	opt stack 0
   978                           
   979                           ; 2 bytes @ 0x3D
   980  00009D                     	ds	2
   981  00009F                     exp@sign:
   982                           	opt stack 0
   983                           
   984                           ; 1 bytes @ 0x3F
   985  00009F                     	ds	1
   986  0000A0                     ?_pow:
   987                           	opt stack 0
   988  0000A0                     pow@x:
   989                           	opt stack 0
   990                           
   991                           ; 3 bytes @ 0x40
   992  0000A0                     	ds	3
   993  0000A3                     pow@y:
   994                           	opt stack 0
   995                           
   996                           ; 3 bytes @ 0x43
   997  0000A3                     	ds	3
   998  0000A6                     _pow$3247:
   999                           	opt stack 0
  1000                           
  1001                           ; 3 bytes @ 0x46
  1002  0000A6                     	ds	3
  1003  0000A9                     _pow$3248:
  1004                           	opt stack 0
  1005                           
  1006                           ; 3 bytes @ 0x49
  1007  0000A9                     	ds	3
  1008  0000AC                     pow@sign:
  1009                           	opt stack 0
  1010                           
  1011                           ; 1 bytes @ 0x4C
  1012  0000AC                     	ds	1
  1013  0000AD                     pow@yi:
  1014                           	opt stack 0
  1015                           
  1016                           ; 4 bytes @ 0x4D
  1017  0000AD                     	ds	4
  1018  0000B1                     ??_AdcConvert:
  1019  0000B1                     _FlashReadUart$565:
  1020                           	opt stack 0
  1021                           
  1022                           ; 4 bytes @ 0x51
  1023  0000B1                     	ds	2
  1024  0000B3                     AdcConvert@_adcResult:
  1025                           	opt stack 0
  1026                           
  1027                           ; 2 bytes @ 0x53
  1028  0000B3                     	ds	2
  1029  0000B5                     AdcConvert@_adcResult_332:
  1030                           	opt stack 0
  1031  0000B5                     _FlashReadUart$566:
  1032                           	opt stack 0
  1033                           
  1034                           ; 4 bytes @ 0x55
  1035  0000B5                     	ds	2
  1036  0000B7                     _AdcConvert$3246:
  1037                           	opt stack 0
  1038                           
  1039                           ; 3 bytes @ 0x57
  1040  0000B7                     	ds	2
  1041  0000B9                     FlashReadUart@j:
  1042                           	opt stack 0
  1043                           
  1044                           ; 2 bytes @ 0x59
  1045  0000B9                     	ds	1
  1046  0000BA                     AdcConvert@adcRes:
  1047                           	opt stack 0
  1048                           
  1049                           ; 2 bytes @ 0x5A
  1050  0000BA                     	ds	1
  1051  0000BB                     FlashReadUart@idx:
  1052                           	opt stack 0
  1053                           
  1054                           ; 2 bytes @ 0x5B
  1055  0000BB                     	ds	1
  1056  0000BC                     AdcConvert@idx:
  1057                           	opt stack 0
  1058                           
  1059                           ; 1 bytes @ 0x5C
  1060  0000BC                     	ds	1
  1061  0000BD                     FlashReadUart@offset:
  1062                           	opt stack 0
  1063                           
  1064                           ; 2 bytes @ 0x5D
  1065  0000BD                     	ds	2
  1066  0000BF                     ??_GroupFlashMemory:
  1067  0000BF                     GroupControlMcu@request:
  1068                           	opt stack 0
  1069  0000BF                     GroupStatusAndVersion@request:
  1070                           	opt stack 0
  1071  0000BF                     GroupAdc@request:
  1072                           	opt stack 0
  1073  0000BF                     GroupSynthesizers@request:
  1074                           	opt stack 0
  1075  0000BF                     GroupDAC@request:
  1076                           	opt stack 0
  1077                           
  1078                           ; 1 bytes @ 0x5F
  1079  0000BF                     	ds	1
  1080  0000C0                     GroupFlashMemory@request:
  1081                           	opt stack 0
  1082                           
  1083                           ; 1 bytes @ 0x60
  1084  0000C0                     	ds	1
  1085                           tblptru	equ	0xFF8
  1086                           tblptrh	equ	0xFF7
  1087                           tblptrl	equ	0xFF6
  1088                           tablat	equ	0xFF5
  1089                           postinc0	equ	0xFEE
  1090                           wreg	equ	0xFE8
  1091                           postdec1	equ	0xFE5
  1092                           fsr1l	equ	0xFE1
  1093                           
  1094                           	psect	cstackCOMRAM
  1095  000001                     __pcstackCOMRAM:
  1096                           	opt stack 0
  1097  000001                     ?___lwmod:
  1098                           	opt stack 0
  1099  000001                     ___lwmod@dividend:
  1100                           	opt stack 0
  1101                           
  1102                           ; 2 bytes @ 0x0
  1103  000001                     	ds	2
  1104  000003                     ___lwmod@divisor:
  1105                           	opt stack 0
  1106                           
  1107                           ; 2 bytes @ 0x2
  1108  000003                     	ds	2
  1109  000005                     ___lwmod@counter:
  1110                           	opt stack 0
  1111                           
  1112                           ; 1 bytes @ 0x4
  1113  000005                     	ds	1
  1114  000006                     ??_INTERRUPT_InterruptManager:
  1115                           
  1116                           ; 1 bytes @ 0x5
  1117  000006                     	ds	18
  1118  000018                     ??_EUSART1_Read:
  1119  000018                     ??_isspace:
  1120  000018                     ??_isdigit:
  1121  000018                     ??_isupper:
  1122  000018                     ??_BlinkErrorLeds:
  1123  000018                     ??_BlinkOkLeds:
  1124  000018                     ??_keepAliveSignalLed:
  1125  000018                     ?_ADC_GetConversion:
  1126                           	opt stack 0
  1127  000018                     ?_abs:
  1128                           	opt stack 0
  1129  000018                     ?___wmul:
  1130                           	opt stack 0
  1131  000018                     ?___ftpack:
  1132                           	opt stack 0
  1133  000018                     ?_frexp:
  1134                           	opt stack 0
  1135  000018                     ?___ftneg:
  1136                           	opt stack 0
  1137  000018                     ?___lmul:
  1138                           	opt stack 0
  1139  000018                     ?___lldiv:
  1140                           	opt stack 0
  1141  000018                     ?___llmod:
  1142                           	opt stack 0
  1143  000018                     InitAdcApplicationMgr@channel:
  1144                           	opt stack 0
  1145  000018                     SwSpi_Data_Pin@cPinMode:
  1146                           	opt stack 0
  1147  000018                     SwSpi_Clk_Pin@cPinMode:
  1148                           	opt stack 0
  1149  000018                     SwSpi_Set_CE_Pin@cPinMode:
  1150                           	opt stack 0
  1151  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  1152                           	opt stack 0
  1153  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  1154                           	opt stack 0
  1155  000018                     EUSART1_Write@txData:
  1156                           	opt stack 0
  1157  000018                     DATAEE_WriteByte@bData:
  1158                           	opt stack 0
  1159  000018                     DATAEE_ReadByte@bAdd:
  1160                           	opt stack 0
  1161  000018                     toupper@c:
  1162                           	opt stack 0
  1163  000018                     PLLUartInitialize@data:
  1164                           	opt stack 0
  1165  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  1166                           	opt stack 0
  1167  000018                     crc8@dataArray:
  1168                           	opt stack 0
  1169  000018                     Make32bitsArray@array:
  1170                           	opt stack 0
  1171  000018                     ___wmul@multiplier:
  1172                           	opt stack 0
  1173  000018                     abs@a:
  1174                           	opt stack 0
  1175  000018                     memset@p1:
  1176                           	opt stack 0
  1177  000018                     ___ftpack@arg:
  1178                           	opt stack 0
  1179  000018                     ___ftge@ff1:
  1180                           	opt stack 0
  1181  000018                     ___ftneg@f1:
  1182                           	opt stack 0
  1183  000018                     frexp@value:
  1184                           	opt stack 0
  1185  000018                     FLASH_ReadByte@flashAddr:
  1186                           	opt stack 0
  1187  000018                     FLASH_EraseBlock@baseAddr:
  1188                           	opt stack 0
  1189  000018                     make8@data:
  1190                           	opt stack 0
  1191  000018                     ___lmul@multiplier:
  1192                           	opt stack 0
  1193  000018                     ___lldiv@dividend:
  1194                           	opt stack 0
  1195  000018                     ___llmod@dividend:
  1196                           	opt stack 0
  1197                           
  1198                           ; 4 bytes @ 0x17
  1199  000018                     	ds	1
  1200  000019                     EepromRead@address:
  1201                           	opt stack 0
  1202  000019                     SwSpi_Data_Pin@phrType:
  1203                           	opt stack 0
  1204  000019                     SwSpi_Clk_Pin@phrType:
  1205                           	opt stack 0
  1206  000019                     SwSpi_Set_CE_Pin@phrType:
  1207                           	opt stack 0
  1208  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  1209                           	opt stack 0
  1210  000019                     DATAEE_WriteByte@bAdd:
  1211                           	opt stack 0
  1212  000019                     _isdigit$2966:
  1213                           	opt stack 0
  1214  000019                     _isspace$2969:
  1215                           	opt stack 0
  1216  000019                     _isupper$2972:
  1217                           	opt stack 0
  1218  000019                     WriteUartMessage@dataBuf:
  1219                           	opt stack 0
  1220  000019                     EUSART1_Read@readValue:
  1221                           	opt stack 0
  1222                           
  1223                           ; 2 bytes @ 0x18
  1224  000019                     	ds	1
  1225  00001A                     ??_ADC_GetConversion:
  1226  00001A                     ??_abs:
  1227  00001A                     ??_TMR0_Initialize:
  1228  00001A                     ?_ReadIntFromEeprom:
  1229                           	opt stack 0
  1230  00001A                     SWSPI_DAC_send_bits@data:
  1231                           	opt stack 0
  1232  00001A                     DATAEE_WriteByte@GIEBitValue:
  1233                           	opt stack 0
  1234  00001A                     isdigit@c:
  1235                           	opt stack 0
  1236  00001A                     isspace@c:
  1237                           	opt stack 0
  1238  00001A                     isupper@c:
  1239                           	opt stack 0
  1240  00001A                     crc8@dataSize:
  1241                           	opt stack 0
  1242  00001A                     ReadIntFromEeprom@numOfByes:
  1243                           	opt stack 0
  1244  00001A                     ___wmul@multiplicand:
  1245                           	opt stack 0
  1246  00001A                     memset@c:
  1247                           	opt stack 0
  1248  00001A                     Make32bitsArray@data:
  1249                           	opt stack 0
  1250                           
  1251                           ; 4 bytes @ 0x19
  1252  00001A                     	ds	1
  1253  00001B                     ??_isalpha:
  1254  00001B                     BlinkErrorLeds@state:
  1255                           	opt stack 0
  1256  00001B                     BlinkOkLeds@state:
  1257                           	opt stack 0
  1258  00001B                     EepromWrite@data:
  1259                           	opt stack 0
  1260  00001B                     SWSPI_DAC_send_bits@count:
  1261                           	opt stack 0
  1262  00001B                     ___ftpack@exp:
  1263                           	opt stack 0
  1264  00001B                     WriteUartMessage@dataSize:
  1265                           	opt stack 0
  1266  00001B                     frexp@eptr:
  1267                           	opt stack 0
  1268  00001B                     ___ftge@ff2:
  1269                           	opt stack 0
  1270                           
  1271                           ; 3 bytes @ 0x1A
  1272  00001B                     	ds	1
  1273  00001C                     ??_crc8:
  1274  00001C                     EepromWrite@address:
  1275                           	opt stack 0
  1276  00001C                     SWSPI_DAC_send_bits@phrType:
  1277                           	opt stack 0
  1278  00001C                     FLASH_EraseBlock@GIEBitValue:
  1279                           	opt stack 0
  1280  00001C                     ADC_GetConversion@channel:
  1281                           	opt stack 0
  1282  00001C                     make8@dataLocation:
  1283                           	opt stack 0
  1284  00001C                     ___ftpack@sign:
  1285                           	opt stack 0
  1286  00001C                     _isalpha$2963:
  1287                           	opt stack 0
  1288  00001C                     BlinkErrorLeds@idx:
  1289                           	opt stack 0
  1290  00001C                     BlinkOkLeds@idx:
  1291                           	opt stack 0
  1292  00001C                     ___wmul@product:
  1293                           	opt stack 0
  1294  00001C                     memset@n:
  1295                           	opt stack 0
  1296  00001C                     ___lmul@multiplicand:
  1297                           	opt stack 0
  1298  00001C                     ___lldiv@divisor:
  1299                           	opt stack 0
  1300  00001C                     ___llmod@divisor:
  1301                           	opt stack 0
  1302                           
  1303                           ; 4 bytes @ 0x1B
  1304  00001C                     	ds	1
  1305  00001D                     ??_make8:
  1306  00001D                     ??___ftpack:
  1307  00001D                     ??_frexp:
  1308  00001D                     ??_WriteUartMessage:
  1309  00001D                     isalpha@c:
  1310                           	opt stack 0
  1311  00001D                     crc8@crc:
  1312                           	opt stack 0
  1313  00001D                     FLASH_WriteBlock@writeAddr:
  1314                           	opt stack 0
  1315                           
  1316                           ; 4 bytes @ 0x1C
  1317  00001D                     	ds	1
  1318  00001E                     ??_ReadIntFromEeprom:
  1319  00001E                     ??_Make32bitsArray:
  1320  00001E                     ??___ftge:
  1321  00001E                     WriteUartMessage@idx:
  1322                           	opt stack 0
  1323  00001E                     memset@p:
  1324                           	opt stack 0
  1325                           
  1326                           ; 2 bytes @ 0x1D
  1327  00001E                     	ds	1
  1328  00001F                     crc8@i:
  1329                           	opt stack 0
  1330                           
  1331                           ; 2 bytes @ 0x1E
  1332  00001F                     	ds	1
  1333  000020                     ?___awtoft:
  1334                           	opt stack 0
  1335  000020                     ?___lltoft:
  1336                           	opt stack 0
  1337  000020                     ?___lwtoft:
  1338                           	opt stack 0
  1339  000020                     ___llmod@counter:
  1340                           	opt stack 0
  1341  000020                     ZeroArray@array:
  1342                           	opt stack 0
  1343  000020                     ZeroBitsArray@array:
  1344                           	opt stack 0
  1345  000020                     Make32bitsArray@idx:
  1346                           	opt stack 0
  1347  000020                     ___awtoft@c:
  1348                           	opt stack 0
  1349  000020                     ___lwtoft@c:
  1350                           	opt stack 0
  1351  000020                     ___lmul@product:
  1352                           	opt stack 0
  1353  000020                     ___lldiv@quotient:
  1354                           	opt stack 0
  1355  000020                     ___lltoft@c:
  1356                           	opt stack 0
  1357                           
  1358                           ; 4 bytes @ 0x1F
  1359  000020                     	ds	1
  1360  000021                     FLASH_WriteBlock@flashWrBufPtr:
  1361                           	opt stack 0
  1362  000021                     StoreIntInEeprom@data:
  1363                           	opt stack 0
  1364                           
  1365                           ; 4 bytes @ 0x20
  1366  000021                     	ds	1
  1367  000022                     ZeroArray@size:
  1368                           	opt stack 0
  1369  000022                     SWSPI_Synth_send_bits@data:
  1370                           	opt stack 0
  1371  000022                     ReadIntFromEeprom@retVal:
  1372                           	opt stack 0
  1373                           
  1374                           ; 4 bytes @ 0x21
  1375  000022                     	ds	1
  1376  000023                     ??_FLASH_WriteBlock:
  1377  000023                     ___awtoft@sign:
  1378                           	opt stack 0
  1379                           
  1380                           ; 1 bytes @ 0x22
  1381  000023                     	ds	1
  1382  000024                     ??_GetMcuFwVersion:
  1383  000024                     ??_GetCpldFwVersion:
  1384  000024                     ??_FlashReadCondition:
  1385  000024                     ??___lltoft:
  1386  000024                     ?_strtol:
  1387                           	opt stack 0
  1388  000024                     SendAckMessage@inRequest:
  1389                           	opt stack 0
  1390  000024                     ___lldiv@counter:
  1391                           	opt stack 0
  1392  000024                     strtol@s:
  1393                           	opt stack 0
  1394                           
  1395                           ; 2 bytes @ 0x23
  1396  000024                     	ds	1
  1397  000025                     ??_GetMcuRunTime:
  1398  000025                     SendAckMessage@inGroup:
  1399                           	opt stack 0
  1400  000025                     StoreIntInEeprom@address:
  1401                           	opt stack 0
  1402                           
  1403                           ; 1 bytes @ 0x24
  1404  000025                     	ds	1
  1405  000026                     ReadIntFromEeprom@address:
  1406                           	opt stack 0
  1407  000026                     StoreIntInEeprom@numOfByes:
  1408                           	opt stack 0
  1409  000026                     strtol@endptr:
  1410                           	opt stack 0
  1411  000026                     SWSPI_send_word@data:
  1412                           	opt stack 0
  1413  000026                     SendAckMessage@TxMsg:
  1414                           	opt stack 0
  1415  000026                     GetMcuFwVersion@TxMsg:
  1416                           	opt stack 0
  1417  000026                     GetCpldFwVersion@TxMsg:
  1418                           	opt stack 0
  1419                           
  1420                           ; 9 bytes @ 0x25
  1421  000026                     	ds	1
  1422  000027                     FLASH_WriteBlock@blockStartAddr:
  1423                           	opt stack 0
  1424                           
  1425                           ; 4 bytes @ 0x26
  1426  000027                     	ds	1
  1427  000028                     StoreIntInEeprom@val:
  1428                           	opt stack 0
  1429  000028                     ___lltoft@exp:
  1430                           	opt stack 0
  1431  000028                     strtol@base:
  1432                           	opt stack 0
  1433  000028                     FlashReadCondition@TxMsg:
  1434                           	opt stack 0
  1435                           
  1436                           ; 9 bytes @ 0x27
  1437  000028                     	ds	1
  1438  000029                     ?___ftdiv:
  1439                           	opt stack 0
  1440  000029                     StoreIntInEeprom@idx:
  1441                           	opt stack 0
  1442  000029                     ___ftdiv@f1:
  1443                           	opt stack 0
  1444                           
  1445                           ; 3 bytes @ 0x28
  1446  000029                     	ds	1
  1447  00002A                     ??_strtol:
  1448  00002A                     SWSPI_send_word@dataSize:
  1449                           	opt stack 0
  1450                           
  1451                           ; 1 bytes @ 0x29
  1452  00002A                     	ds	1
  1453  00002B                     SWSPI_send_word@datac:
  1454                           	opt stack 0
  1455  00002B                     FLASH_WriteBlock@GIEBitValue:
  1456                           	opt stack 0
  1457                           
  1458                           ; 1 bytes @ 0x2A
  1459  00002B                     	ds	1
  1460  00002C                     ??_testLeds:
  1461  00002C                     FLASH_WriteBlock@i:
  1462                           	opt stack 0
  1463  00002C                     SetAdcOperationMode@data:
  1464                           	opt stack 0
  1465  00002C                     SetConversionResultFormat@data:
  1466                           	opt stack 0
  1467  00002C                     SetChannelMode@data:
  1468                           	opt stack 0
  1469  00002C                     FlashReadUart@numOfSampleToRead:
  1470                           	opt stack 0
  1471  00002C                     SWSPI_send_word@idx:
  1472                           	opt stack 0
  1473  00002C                     SetMcuFwVersion@data:
  1474                           	opt stack 0
  1475  00002C                     SetCpldFwVersion@data:
  1476                           	opt stack 0
  1477  00002C                     ___ftdiv@f2:
  1478                           	opt stack 0
  1479                           
  1480                           ; 3 bytes @ 0x2B
  1481  00002C                     	ds	1
  1482  00002D                     testLeds@idx:
  1483                           	opt stack 0
  1484  00002D                     FlashSampleWrite@sampleData:
  1485                           	opt stack 0
  1486                           
  1487                           ; 2 bytes @ 0x2C
  1488  00002D                     	ds	1
  1489  00002E                     SWSPI_send_word@phrType:
  1490                           	opt stack 0
  1491  00002E                     SetMcuFwVersion@idx:
  1492                           	opt stack 0
  1493  00002E                     SetCpldFwVersion@idx:
  1494                           	opt stack 0
  1495                           
  1496                           ; 2 bytes @ 0x2D
  1497  00002E                     	ds	1
  1498  00002F                     ??_eval_poly:
  1499  00002F                     FlashSampleWrite@channelNum:
  1500                           	opt stack 0
  1501  00002F                     PLLInitialize@idx:
  1502                           	opt stack 0
  1503  00002F                     GetMcuFwVersion@idx:
  1504                           	opt stack 0
  1505  00002F                     ___altoft@exp:
  1506                           	opt stack 0
  1507  00002F                     DacInit@test:
  1508                           	opt stack 0
  1509  00002F                     DacSetValue@data:
  1510                           	opt stack 0
  1511  00002F                     UpdateTxFreq@data:
  1512                           	opt stack 0
  1513  00002F                     UpdateRxFreq@data:
  1514                           	opt stack 0
  1515  00002F                     GetCpldFwVersion@idx:
  1516                           	opt stack 0
  1517                           
  1518                           ; 2 bytes @ 0x2E
  1519  00002F                     	ds	1
  1520  000030                     ___altoft@sign:
  1521                           	opt stack 0
  1522                           
  1523                           ; 1 bytes @ 0x2F
  1524  000030                     	ds	1
  1525  000031                     tblptru	equ	0xFF8
  1526                           tblptrh	equ	0xFF7
  1527                           tblptrl	equ	0xFF6
  1528                           tablat	equ	0xFF5
  1529                           postinc0	equ	0xFEE
  1530                           wreg	equ	0xFE8
  1531                           postdec1	equ	0xFE5
  1532                           fsr1l	equ	0xFE1
  1533                           
  1534                           ; 1 bytes @ 0x30
  1535 ;;
  1536 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1537 ;;
  1538 ;; *************** function _main *****************
  1539 ;; Defined at:
  1540 ;;		line 13 in file "main.c"
  1541 ;; Parameters:    Size  Location     Type
  1542 ;;		None
  1543 ;; Auto vars:     Size  Location     Type
  1544 ;;		None
  1545 ;; Return value:  Size  Location     Type
  1546 ;;                  1    wreg      void 
  1547 ;; Registers used:
  1548 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1549 ;; Tracked objects:
  1550 ;;		On entry : 0/0
  1551 ;;		On exit  : 0/0
  1552 ;;		Unchanged: 0/0
  1553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1554 ;;      Params:         0       0       0       0       0       0       0
  1555 ;;      Locals:         0       0       0       0       0       0       0
  1556 ;;      Temps:          0       0       0       0       0       0       0
  1557 ;;      Totals:         0       0       0       0       0       0       0
  1558 ;;Total ram usage:        0 bytes
  1559 ;; Hardware stack levels required when called:   10
  1560 ;; This function calls:
  1561 ;;		_AdcConvert
  1562 ;;		_BlinkErrorLeds
  1563 ;;		_BlinkOkLeds
  1564 ;;		_CheckFlashPrecentage
  1565 ;;		_InitSystemApplicationManagers
  1566 ;;		_SendSystemStartAck
  1567 ;;		_SetMcuRunTime
  1568 ;;		_SetMcuSystem
  1569 ;;		_keepAliveSignalLed
  1570 ;;		_keepAliveSignalUart
  1571 ;;		_readUartMessage
  1572 ;; This function is called by:
  1573 ;;		Startup code after reset
  1574 ;; This function uses a non-reentrant model
  1575 ;;
  1576                           
  1577                           	psect	text0
  1578  002860                     __ptext0:
  1579                           	opt stack 0
  1580  002860                     _main:
  1581                           	opt stack 21
  1582                           
  1583                           ;main.c: 16: SetMcuSystem();
  1584                           
  1585                           ;incstack = 0
  1586  002860  ECCA  F01B         	call	_SetMcuSystem	;wreg free
  1587                           
  1588                           ;main.c: 19: InitSystemApplicationManagers();
  1589  002864  EC4E  F01B         	call	_InitSystemApplicationManagers	;wreg free
  1590                           
  1591                           ;main.c: 22: SendSystemStartAck();
  1592  002868  ECC4  F01B         	call	_SendSystemStartAck	;wreg free
  1593                           
  1594                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  1595  00286C  0E03               	movlw	3
  1596  00286E  EC90  F014         	call	_BlinkOkLeds
  1597  002872                     
  1598                           ;main.c: 28: {
  1599                           ;main.c: 29: readUartMessage();
  1600  002872  EC1E  F005         	call	_readUartMessage	;wreg free
  1601                           
  1602                           ;main.c: 31: if (TimerOneSecFlag == 1)
  1603  002876  0100               	movlb	0	; () banked
  1604  002878  05D8               	decf	_TimerOneSecFlag& (0+255),w,b	;volatile
  1605  00287A  A4D8               	btfss	status,2,c
  1606  00287C  D006               	goto	l1386
  1607                           
  1608                           ; BSR set to: 0
  1609                           ;main.c: 32: {
  1610                           ;main.c: 34: SetMcuRunTime();
  1611  00287E  ECFC  F017         	call	_SetMcuRunTime	;wreg free
  1612                           
  1613                           ;main.c: 35: TimerOneSecFlag = 0;
  1614  002882  0E00               	movlw	0
  1615  002884  0100               	movlb	0	; () banked
  1616  002886  6FD8               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
  1617                           
  1618                           ;main.c: 36: }
  1619  002888  D7F4               	goto	l1385
  1620  00288A                     l1386:
  1621                           
  1622                           ; BSR set to: 0
  1623                           ;main.c: 37: else if (TimerSamplingFlag == 1)
  1624                           
  1625                           ; BSR set to: 0
  1626  00288A  05D7               	decf	_TimerSamplingFlag& (0+255),w,b	;volatile
  1627  00288C  A4D8               	btfss	status,2,c
  1628  00288E  D010               	goto	l1388
  1629                           
  1630                           ; BSR set to: 0
  1631                           ;main.c: 38: {
  1632                           ;main.c: 39: keepAliveSignalLed();
  1633  002890  EC37  F01B         	call	_keepAliveSignalLed	;wreg free
  1634                           
  1635                           ;main.c: 41: if(1 == CheckFlashPrecentage())
  1636  002894  EC3B  F010         	call	_CheckFlashPrecentage	;wreg free
  1637  002898  06E8               	decf	wreg,f,c
  1638  00289A  A4D8               	btfss	status,2,c
  1639  00289C  D003               	goto	l1389
  1640                           
  1641                           ;main.c: 42: {
  1642                           ;main.c: 43: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  1643  00289E  0E04               	movlw	4
  1644  0028A0  ECBF  F014         	call	_BlinkErrorLeds
  1645  0028A4                     l1389:
  1646                           
  1647                           ;main.c: 44: }
  1648                           ;main.c: 47: AdcConvert();
  1649  0028A4  EC00  F008         	call	_AdcConvert	;wreg free
  1650                           
  1651                           ;main.c: 49: TimerSamplingFlag = 0;
  1652  0028A8  0E00               	movlw	0
  1653  0028AA  0100               	movlb	0	; () banked
  1654  0028AC  6FD7               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
  1655                           
  1656                           ;main.c: 50: }
  1657  0028AE  D7E1               	goto	l1385
  1658  0028B0                     l1388:
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;main.c: 51: else if (TimerKeepAliveFlag == 1)
  1662                           
  1663                           ; BSR set to: 0
  1664  0028B0  05D6               	decf	_TimerKeepAliveFlag& (0+255),w,b	;volatile
  1665  0028B2  A4D8               	btfss	status,2,c
  1666  0028B4  D7DE               	goto	l1385
  1667                           
  1668                           ; BSR set to: 0
  1669                           ;main.c: 52: {
  1670                           ;main.c: 53: keepAliveSignalUart();
  1671  0028B6  ECBE  F01B         	call	_keepAliveSignalUart	;wreg free
  1672                           
  1673                           ;main.c: 54: TimerKeepAliveFlag = 0;
  1674  0028BA  0E00               	movlw	0
  1675  0028BC  0100               	movlb	0	; () banked
  1676  0028BE  6FD6               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
  1677                           
  1678                           ; BSR set to: 0
  1679                           
  1680                           ; BSR set to: 0
  1681                           
  1682                           ; BSR set to: 0
  1683                           
  1684                           ; BSR set to: 0
  1685  0028C0  D7D8               	goto	l1385
  1686  0028C2                     __end_of_main:
  1687                           	opt stack 0
  1688                           tblptru	equ	0xFF8
  1689                           tblptrh	equ	0xFF7
  1690                           tblptrl	equ	0xFF6
  1691                           tablat	equ	0xFF5
  1692                           postinc0	equ	0xFEE
  1693                           wreg	equ	0xFE8
  1694                           postdec1	equ	0xFE5
  1695                           fsr1l	equ	0xFE1
  1696                           status	equ	0xFD8
  1697                           
  1698 ;; *************** function _readUartMessage *****************
  1699 ;; Defined at:
  1700 ;;		line 28 in file "EusartApp.c"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;		None
  1703 ;; Auto vars:     Size  Location     Type
  1704 ;;  idx             2    6[BANK1 ] int 
  1705 ;;  chRec           1    8[BANK1 ] unsigned char 
  1706 ;; Return value:  Size  Location     Type
  1707 ;;                  1    wreg      void 
  1708 ;; Registers used:
  1709 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1710 ;; Tracked objects:
  1711 ;;		On entry : 0/0
  1712 ;;		On exit  : 0/0
  1713 ;;		Unchanged: 0/0
  1714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1715 ;;      Params:         0       0       0       0       0       0       0
  1716 ;;      Locals:         0       0       3       0       0       0       0
  1717 ;;      Temps:          0       0       4       0       0       0       0
  1718 ;;      Totals:         0       0       7       0       0       0       0
  1719 ;;Total ram usage:        7 bytes
  1720 ;; Hardware stack levels used:    1
  1721 ;; Hardware stack levels required when called:    9
  1722 ;; This function calls:
  1723 ;;		_EUSART1_Read
  1724 ;;		_GroupAdc
  1725 ;;		_GroupControlMcu
  1726 ;;		_GroupDAC
  1727 ;;		_GroupFlashMemory
  1728 ;;		_GroupStatusAndVersion
  1729 ;;		_GroupSynthesizers
  1730 ;;		_InitRxMessageParams
  1731 ;;		_ZeroArray
  1732 ;;		_crc8
  1733 ;; This function is called by:
  1734 ;;		_main
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           	psect	text1
  1739  000A3C                     __ptext1:
  1740                           	opt stack 0
  1741  000A3C                     _readUartMessage:
  1742                           	opt stack 21
  1743                           
  1744                           ;EusartApp.c: 31: uint8_t chRec = (0);
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;incstack = 0
  1748  000A3C  0E00               	movlw	0
  1749  000A3E  0101               	movlb	1	; () banked
  1750  000A40  6FCA               	movwf	readUartMessage@chRec& (0+255),b
  1751                           
  1752                           ;EusartApp.c: 32: switch(cState)
  1753  000A42  D0DF               	goto	l178
  1754  000A44                     
  1755                           ;EusartApp.c: 37: if(eusart1RxCount > (4))
  1756                           
  1757                           ; BSR set to: 1
  1758  000A44  0E04               	movlw	4
  1759  000A46  0100               	movlb	0	; () banked
  1760  000A48  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1761  000A4A  0012               	return	
  1762                           
  1763                           ; BSR set to: 0
  1764                           ;EusartApp.c: 38: {
  1765                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  1766  000A4C  0E01               	movlw	1
  1767  000A4E  6FD2               	movwf	_cState& (0+255),b
  1768                           
  1769                           ; BSR set to: 0
  1770                           ;EusartApp.c: 40: }
  1771                           ;EusartApp.c: 41: return;
  1772                           
  1773                           ; BSR set to: 0
  1774  000A50  0012               	return	
  1775  000A52                     
  1776                           ; BSR set to: 0
  1777                           ;EusartApp.c: 45: InitRxMessageParams();
  1778                           
  1779                           ; BSR set to: 0
  1780  000A52  EC4A  F01A         	call	_InitRxMessageParams	;wreg free
  1781                           
  1782                           ;EusartApp.c: 46: msgCount = 0;
  1783  000A56  0E00               	movlw	0
  1784  000A58  0100               	movlb	0	; () banked
  1785  000A5A  6FCB               	movwf	_msgCount& (0+255),b
  1786                           
  1787                           ; BSR set to: 0
  1788                           ;EusartApp.c: 47: if(eusart1RxCount > 1)
  1789  000A5C  0E01               	movlw	1
  1790  000A5E  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1791  000A60  D00E               	goto	l183
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;EusartApp.c: 48: {
  1795                           ;EusartApp.c: 49: chRec = EUSART1_Read();
  1796  000A62  ECDA  F017         	call	_EUSART1_Read	;wreg free
  1797  000A66  0101               	movlb	1	; () banked
  1798  000A68  6FCA               	movwf	readUartMessage@chRec& (0+255),b
  1799                           
  1800                           ; BSR set to: 1
  1801                           ;EusartApp.c: 50: rxMsgQueue[(0)] = chRec;
  1802  000A6A  C1CA  F0D9         	movff	readUartMessage@chRec,_rxMsgQueue
  1803                           
  1804                           ; BSR set to: 1
  1805                           ;EusartApp.c: 51: if(chRec == (0x24))
  1806  000A6E  0E24               	movlw	36
  1807  000A70  19CA               	xorwf	readUartMessage@chRec& (0+255),w,b
  1808  000A72  A4D8               	btfss	status,2,c
  1809  000A74  0012               	return	
  1810                           
  1811                           ; BSR set to: 1
  1812                           ;EusartApp.c: 52: {
  1813                           ;EusartApp.c: 53: cState = READ_GROUP;
  1814  000A76  0E02               	movlw	2
  1815  000A78  0100               	movlb	0	; () banked
  1816  000A7A  6FD2               	movwf	_cState& (0+255),b
  1817                           
  1818                           ; BSR set to: 0
  1819                           ;EusartApp.c: 54: }
  1820                           ;EusartApp.c: 55: }
  1821  000A7C  0012               	return	
  1822  000A7E                     l183:
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;EusartApp.c: 56: else
  1826                           ;EusartApp.c: 57: {
  1827                           ;EusartApp.c: 58: cState = START_RX_MESSAGE_READ;
  1828                           
  1829                           ; BSR set to: 0
  1830  000A7E  0E00               	movlw	0
  1831  000A80  6FD2               	movwf	_cState& (0+255),b
  1832                           
  1833                           ; BSR set to: 0
  1834                           ;EusartApp.c: 59: }
  1835                           ;EusartApp.c: 61: break;
  1836  000A82  0012               	return	
  1837  000A84                     
  1838                           ; BSR set to: 0
  1839                           ;EusartApp.c: 65: if(eusart1RxCount > 1)
  1840                           
  1841                           ; BSR set to: 0
  1842  000A84  0E01               	movlw	1
  1843  000A86  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1844  000A88  0012               	return	
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;EusartApp.c: 66: {
  1848                           ;EusartApp.c: 67: group = EUSART1_Read();
  1849  000A8A  ECDA  F017         	call	_EUSART1_Read	;wreg free
  1850  000A8E  0100               	movlb	0	; () banked
  1851  000A90  6FD1               	movwf	_group& (0+255),b
  1852                           
  1853                           ; BSR set to: 0
  1854                           ;EusartApp.c: 68: rxMsgQueue[(1)] = group;
  1855  000A92  C0D1  F0DA         	movff	_group,_rxMsgQueue+1
  1856                           
  1857                           ; BSR set to: 0
  1858                           ;EusartApp.c: 69: cState = READ_REQUEST;
  1859  000A96  0E03               	movlw	3
  1860  000A98  6FD2               	movwf	_cState& (0+255),b
  1861                           
  1862                           ; BSR set to: 0
  1863                           ;EusartApp.c: 70: }
  1864                           ;EusartApp.c: 71: break;
  1865  000A9A  0012               	return	
  1866  000A9C                     
  1867                           ; BSR set to: 0
  1868                           ;EusartApp.c: 75: if(eusart1RxCount > 1)
  1869                           
  1870                           ; BSR set to: 0
  1871  000A9C  0E01               	movlw	1
  1872  000A9E  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1873  000AA0  0012               	return	
  1874                           
  1875                           ; BSR set to: 0
  1876                           ;EusartApp.c: 76: {
  1877                           ;EusartApp.c: 77: request = EUSART1_Read();
  1878  000AA2  ECDA  F017         	call	_EUSART1_Read	;wreg free
  1879  000AA6  0100               	movlb	0	; () banked
  1880  000AA8  6FD0               	movwf	_request& (0+255),b
  1881                           
  1882                           ; BSR set to: 0
  1883                           ;EusartApp.c: 78: rxMsgQueue[(2)] = request;
  1884  000AAA  C0D0  F0DB         	movff	_request,_rxMsgQueue+2
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;EusartApp.c: 79: cState = READ_DATA_SIZE;
  1888  000AAE  0E04               	movlw	4
  1889  000AB0  6FD2               	movwf	_cState& (0+255),b
  1890                           
  1891                           ; BSR set to: 0
  1892                           ;EusartApp.c: 80: }
  1893                           ;EusartApp.c: 81: break;
  1894  000AB2  0012               	return	
  1895  000AB4                     
  1896                           ; BSR set to: 0
  1897                           ;EusartApp.c: 84: if(eusart1RxCount > 1)
  1898                           
  1899                           ; BSR set to: 0
  1900  000AB4  0E01               	movlw	1
  1901  000AB6  65D3               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1902  000AB8  0012               	return	
  1903                           
  1904                           ; BSR set to: 0
  1905                           ;EusartApp.c: 85: {
  1906                           ;EusartApp.c: 86: dataSize = EUSART1_Read();
  1907  000ABA  ECDA  F017         	call	_EUSART1_Read	;wreg free
  1908  000ABE  0100               	movlb	0	; () banked
  1909  000AC0  6FCF               	movwf	_dataSize& (0+255),b
  1910                           
  1911                           ; BSR set to: 0
  1912                           ;EusartApp.c: 87: rxMsgQueue[(3)] = dataSize;
  1913  000AC2  C0CF  F0DC         	movff	_dataSize,_rxMsgQueue+3
  1914                           
  1915                           ; BSR set to: 0
  1916                           ;EusartApp.c: 88: if(dataSize == 0)
  1917  000AC6  51CF               	movf	_dataSize& (0+255),w,b
  1918  000AC8  A4D8               	btfss	status,2,c
  1919  000ACA  D003               	goto	l193
  1920                           
  1921                           ; BSR set to: 0
  1922                           ;EusartApp.c: 89: {
  1923                           ;EusartApp.c: 90: cState = CHECK_CRC;
  1924  000ACC  0E06               	movlw	6
  1925  000ACE  6FD2               	movwf	_cState& (0+255),b
  1926                           
  1927                           ;EusartApp.c: 91: }
  1928  000AD0  0012               	return	
  1929  000AD2                     l193:
  1930                           
  1931                           ; BSR set to: 0
  1932                           ;EusartApp.c: 92: else
  1933                           ;EusartApp.c: 93: {
  1934                           ;EusartApp.c: 94: cState = READ_DATA;
  1935                           
  1936                           ; BSR set to: 0
  1937  000AD2  0E05               	movlw	5
  1938  000AD4  6FD2               	movwf	_cState& (0+255),b
  1939                           
  1940                           ; BSR set to: 0
  1941                           ;EusartApp.c: 95: }
  1942                           ;EusartApp.c: 97: }
  1943                           ;EusartApp.c: 99: break;
  1944                           
  1945                           ; BSR set to: 0
  1946  000AD6  0012               	return	
  1947  000AD8                     
  1948                           ; BSR set to: 0
  1949                           ;EusartApp.c: 103: if(eusart1RxCount >= dataSize)
  1950                           
  1951                           ; BSR set to: 0
  1952  000AD8  51CF               	movf	_dataSize& (0+255),w,b
  1953  000ADA  5DD3               	subwf	_eusart1RxCount& (0+255),w,b	;volatile
  1954  000ADC  A0D8               	btfss	status,0,c
  1955  000ADE  0012               	return	
  1956                           
  1957                           ; BSR set to: 0
  1958                           ;EusartApp.c: 104: {
  1959                           ;EusartApp.c: 105: ZeroArray(rxMsgData, (0x14));
  1960  000AE0  0EAE               	movlw	low _rxMsgData
  1961  000AE2  6E20               	movwf	ZeroArray@array,c
  1962  000AE4  0E01               	movlw	high _rxMsgData
  1963  000AE6  6E21               	movwf	ZeroArray@array+1,c
  1964  000AE8  0E00               	movlw	0
  1965  000AEA  6E23               	movwf	ZeroArray@size+1,c
  1966  000AEC  0E14               	movlw	20
  1967  000AEE  6E22               	movwf	ZeroArray@size,c
  1968  000AF0  ECFE  F01A         	call	_ZeroArray	;wreg free
  1969                           
  1970                           ;EusartApp.c: 107: for(int idx = 0; idx < dataSize; idx++)
  1971  000AF4  0E00               	movlw	0
  1972  000AF6  0101               	movlb	1	; () banked
  1973  000AF8  6FC9               	movwf	(readUartMessage@idx+1)& (0+255),b
  1974  000AFA  0E00               	movlw	0
  1975  000AFC  6FC8               	movwf	readUartMessage@idx& (0+255),b
  1976  000AFE  D022               	goto	l197
  1977  000B00                     
  1978                           ; BSR set to: 1
  1979                           ;EusartApp.c: 108: {
  1980                           ;EusartApp.c: 109: chRec = EUSART1_Read();
  1981                           
  1982                           ; BSR set to: 1
  1983  000B00  ECDA  F017         	call	_EUSART1_Read	;wreg free
  1984  000B04  0101               	movlb	1	; () banked
  1985  000B06  6FCA               	movwf	readUartMessage@chRec& (0+255),b
  1986                           
  1987                           ; BSR set to: 1
  1988                           ;EusartApp.c: 110: rxMsgQueue[(0x4) + msgCount++] = chRec;
  1989  000B08  0100               	movlb	0	; () banked
  1990  000B0A  51CB               	movf	_msgCount& (0+255),w,b
  1991  000B0C  0101               	movlb	1	; () banked
  1992  000B0E  6FC4               	movwf	??_readUartMessage& (0+255),b
  1993  000B10  6BC5               	clrf	(??_readUartMessage+1)& (0+255),b
  1994  000B12  0E04               	movlw	4
  1995  000B14  27C4               	addwf	??_readUartMessage& (0+255),f,b
  1996  000B16  0E00               	movlw	0
  1997  000B18  23C5               	addwfc	(??_readUartMessage+1)& (0+255),f,b
  1998  000B1A  0ED9               	movlw	low _rxMsgQueue
  1999  000B1C  25C4               	addwf	??_readUartMessage& (0+255),w,b
  2000  000B1E  6ED9               	movwf	fsr2l,c
  2001  000B20  0E00               	movlw	high _rxMsgQueue
  2002  000B22  21C5               	addwfc	(??_readUartMessage+1)& (0+255),w,b
  2003  000B24  6EDA               	movwf	fsr2h,c
  2004  000B26  C1CA  FFDF         	movff	readUartMessage@chRec,indf2
  2005                           
  2006                           ; BSR set to: 1
  2007  000B2A  0100               	movlb	0	; () banked
  2008  000B2C  2BCB               	incf	_msgCount& (0+255),f,b
  2009                           
  2010                           ; BSR set to: 0
  2011                           ;EusartApp.c: 111: rxMsgData[idx] = chRec;
  2012  000B2E  0EAE               	movlw	low _rxMsgData
  2013  000B30  0101               	movlb	1	; () banked
  2014  000B32  25C8               	addwf	readUartMessage@idx& (0+255),w,b
  2015  000B34  6ED9               	movwf	fsr2l,c
  2016  000B36  0E01               	movlw	high _rxMsgData
  2017  000B38  21C9               	addwfc	(readUartMessage@idx+1)& (0+255),w,b
  2018  000B3A  6EDA               	movwf	fsr2h,c
  2019  000B3C  C1CA  FFDF         	movff	readUartMessage@chRec,indf2
  2020                           
  2021                           ; BSR set to: 1
  2022  000B40  4BC8               	infsnz	readUartMessage@idx& (0+255),f,b
  2023  000B42  2BC9               	incf	(readUartMessage@idx+1)& (0+255),f,b
  2024  000B44                     l197:
  2025                           
  2026                           ; BSR set to: 1
  2027                           
  2028                           ; BSR set to: 1
  2029  000B44  0100               	movlb	0	; () banked
  2030  000B46  51CF               	movf	_dataSize& (0+255),w,b
  2031  000B48  0101               	movlb	1	; () banked
  2032  000B4A  6FC4               	movwf	??_readUartMessage& (0+255),b
  2033  000B4C  6BC5               	clrf	(??_readUartMessage+1)& (0+255),b
  2034  000B4E  51C4               	movf	??_readUartMessage& (0+255),w,b
  2035  000B50  5DC8               	subwf	readUartMessage@idx& (0+255),w,b
  2036  000B52  51C9               	movf	(readUartMessage@idx+1)& (0+255),w,b
  2037  000B54  0A80               	xorlw	128
  2038  000B56  6FC6               	movwf	(??_readUartMessage+2)& (0+255),b
  2039  000B58  51C5               	movf	(??_readUartMessage+1)& (0+255),w,b
  2040  000B5A  0A80               	xorlw	128
  2041  000B5C  59C6               	subwfb	(??_readUartMessage+2)& (0+255),w,b
  2042  000B5E  A0D8               	btfss	status,0,c
  2043  000B60  D7CF               	goto	l198
  2044                           
  2045                           ; BSR set to: 1
  2046                           ;EusartApp.c: 112: }
  2047                           ;EusartApp.c: 114: cState = CHECK_CRC;
  2048                           
  2049                           ; BSR set to: 1
  2050  000B62  0E06               	movlw	6
  2051  000B64  0100               	movlb	0	; () banked
  2052  000B66  6FD2               	movwf	_cState& (0+255),b
  2053                           
  2054                           ; BSR set to: 0
  2055                           ;EusartApp.c: 115: }
  2056                           ;EusartApp.c: 116: break;
  2057  000B68  0012               	return	
  2058  000B6A                     
  2059                           ; BSR set to: 0
  2060                           ;EusartApp.c: 119: if(eusart1RxCount >= 1)
  2061                           
  2062                           ; BSR set to: 0
  2063  000B6A  51D3               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  2064  000B6C  B4D8               	btfsc	status,2,c
  2065  000B6E  0012               	return	
  2066                           
  2067                           ; BSR set to: 0
  2068                           ;EusartApp.c: 120: {
  2069                           ;EusartApp.c: 121: crcGiven = EUSART1_Read();
  2070  000B70  ECDA  F017         	call	_EUSART1_Read	;wreg free
  2071  000B74  0100               	movlb	0	; () banked
  2072  000B76  6FCC               	movwf	_crcGiven& (0+255),b
  2073                           
  2074                           ; BSR set to: 0
  2075                           ;EusartApp.c: 122: crcCalc = crc8(rxMsgQueue, (0x4) + msgCount);
  2076  000B78  0ED9               	movlw	low _rxMsgQueue
  2077  000B7A  6E18               	movwf	crc8@dataArray,c
  2078  000B7C  0E00               	movlw	high _rxMsgQueue
  2079  000B7E  6E19               	movwf	crc8@dataArray+1,c
  2080  000B80  0E04               	movlw	4
  2081  000B82  25CB               	addwf	_msgCount& (0+255),w,b
  2082  000B84  6E1A               	movwf	crc8@dataSize,c
  2083  000B86  6A1B               	clrf	crc8@dataSize+1,c
  2084  000B88  0E00               	movlw	0
  2085  000B8A  221B               	addwfc	crc8@dataSize+1,f,c
  2086  000B8C  EC49  F017         	call	_crc8	;wreg free
  2087  000B90  0100               	movlb	0	; () banked
  2088  000B92  6FCD               	movwf	_crcCalc& (0+255),b
  2089                           
  2090                           ; BSR set to: 0
  2091                           ;EusartApp.c: 124: if(crcGiven == crcCalc)
  2092  000B94  51CD               	movf	_crcCalc& (0+255),w,b
  2093  000B96  19CC               	xorwf	_crcGiven& (0+255),w,b
  2094  000B98  A4D8               	btfss	status,2,c
  2095  000B9A  D003               	goto	l202
  2096                           
  2097                           ; BSR set to: 0
  2098                           ;EusartApp.c: 125: {
  2099                           ;EusartApp.c: 126: cState = JUMP_FUNCTION;
  2100  000B9C  0E07               	movlw	7
  2101  000B9E  6FD2               	movwf	_cState& (0+255),b
  2102                           
  2103                           ;EusartApp.c: 127: }
  2104  000BA0  0012               	return	
  2105  000BA2                     l202:
  2106                           
  2107                           ; BSR set to: 0
  2108                           ;EusartApp.c: 128: else
  2109                           ;EusartApp.c: 129: {
  2110                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  2111                           
  2112                           ; BSR set to: 0
  2113  000BA2  0E00               	movlw	0
  2114  000BA4  6FD2               	movwf	_cState& (0+255),b
  2115                           
  2116                           ; BSR set to: 0
  2117                           ;EusartApp.c: 131: }
  2118                           ;EusartApp.c: 132: }
  2119                           ;EusartApp.c: 133: break;
  2120                           
  2121                           ; BSR set to: 0
  2122  000BA6  0012               	return	
  2123  000BA8                     
  2124                           ; BSR set to: 0
  2125                           ;EusartApp.c: 136: groupsArray[group - 1](request, rxMsgData);
  2126                           
  2127                           ; BSR set to: 0
  2128  000BA8  0EFE               	movlw	254
  2129  000BAA  0101               	movlb	1	; () banked
  2130  000BAC  6FC4               	movwf	??_readUartMessage& (0+255),b
  2131  000BAE  0EFF               	movlw	255
  2132  000BB0  6FC5               	movwf	(??_readUartMessage+1)& (0+255),b
  2133  000BB2  0100               	movlb	0	; () banked
  2134  000BB4  51D1               	movf	_group& (0+255),w,b
  2135  000BB6  0101               	movlb	1	; () banked
  2136  000BB8  6FC6               	movwf	(??_readUartMessage+2)& (0+255),b
  2137  000BBA  6BC7               	clrf	(??_readUartMessage+3)& (0+255),b
  2138  000BBC  90D8               	bcf	status,0,c
  2139  000BBE  37C6               	rlcf	(??_readUartMessage+2)& (0+255),f,b
  2140  000BC0  37C7               	rlcf	(??_readUartMessage+3)& (0+255),f,b
  2141  000BC2  51C4               	movf	??_readUartMessage& (0+255),w,b
  2142  000BC4  27C6               	addwf	(??_readUartMessage+2)& (0+255),f,b
  2143  000BC6  51C5               	movf	(??_readUartMessage+1)& (0+255),w,b
  2144  000BC8  23C7               	addwfc	(??_readUartMessage+3)& (0+255),f,b
  2145  000BCA  0EED               	movlw	low _groupsArray
  2146  000BCC  25C6               	addwf	(??_readUartMessage+2)& (0+255),w,b
  2147  000BCE  6ED9               	movwf	fsr2l,c
  2148  000BD0  0E00               	movlw	high _groupsArray
  2149  000BD2  21C7               	addwfc	(??_readUartMessage+3)& (0+255),w,b
  2150  000BD4  6EDA               	movwf	fsr2h,c
  2151  000BD6  D801               	call	u7938
  2152  000BD8  D010               	goto	u7939
  2153  000BDA                     u7938:
  2154  000BDA  0005               	push	
  2155  000BDC  6EFA               	movwf	pclath,c
  2156  000BDE  50DE               	movf	postinc2,w,c
  2157  000BE0  6EFD               	movwf	tosl,c
  2158  000BE2  50DE               	movf	postinc2,w,c
  2159  000BE4  6EFE               	movwf	tosh,c
  2160  000BE6  50F8               	movf	tblptru,w,c
  2161  000BE8  6EFF               	movwf	tosu,c
  2162  000BEA  50FA               	movf	pclath,w,c
  2163  000BEC  0EAE               	movlw	low _rxMsgData
  2164  000BEE  6FC2               	movwf	GroupDAC@data& (0+255),b
  2165  000BF0  0E01               	movlw	high _rxMsgData
  2166  000BF2  6FC3               	movwf	(GroupDAC@data+1)& (0+255),b
  2167  000BF4  0100               	movlb	0	; () banked
  2168  000BF6  51D0               	movf	_request& (0+255),w,b
  2169  000BF8  0012               	return		;indir
  2170  000BFA                     u7939:
  2171                           
  2172                           ;EusartApp.c: 137: cState = START_RX_MESSAGE_READ;
  2173  000BFA  0E00               	movlw	0
  2174  000BFC  0100               	movlb	0	; () banked
  2175  000BFE  6FD2               	movwf	_cState& (0+255),b
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;EusartApp.c: 139: }
  2179                           
  2180                           ;EusartApp.c: 138: break;
  2181  000C00  0012               	return	
  2182  000C02                     l178:
  2183                           
  2184                           ; BSR set to: 0
  2185  000C02  0100               	movlb	0	; () banked
  2186  000C04  51D2               	movf	_cState& (0+255),w,b
  2187                           
  2188                           ; Switch size 1, requested type "space"
  2189                           ; Number of cases is 8, Range of values is 0 to 7
  2190                           ; switch strategies available:
  2191                           ; Name         Instructions Cycles
  2192                           ; simple_byte           25    13 (average)
  2193                           ;	Chosen strategy is simple_byte
  2194  000C06  0A00               	xorlw	0	; case 0
  2195  000C08  B4D8               	btfsc	status,2,c
  2196  000C0A  D71C               	goto	l179
  2197  000C0C  0A01               	xorlw	1	; case 1
  2198  000C0E  B4D8               	btfsc	status,2,c
  2199  000C10  D720               	goto	l182
  2200  000C12  0A03               	xorlw	3	; case 2
  2201  000C14  B4D8               	btfsc	status,2,c
  2202  000C16  D736               	goto	l187
  2203  000C18  0A01               	xorlw	1	; case 3
  2204  000C1A  B4D8               	btfsc	status,2,c
  2205  000C1C  D73F               	goto	l189
  2206  000C1E  0A07               	xorlw	7	; case 4
  2207  000C20  B4D8               	btfsc	status,2,c
  2208  000C22  D748               	goto	l191
  2209  000C24  0A01               	xorlw	1	; case 5
  2210  000C26  B4D8               	btfsc	status,2,c
  2211  000C28  D757               	goto	l195
  2212  000C2A  0A03               	xorlw	3	; case 6
  2213  000C2C  B4D8               	btfsc	status,2,c
  2214  000C2E  D79D               	goto	l200
  2215  000C30  0A01               	xorlw	1	; case 7
  2216  000C32  A4D8               	btfss	status,2,c
  2217  000C34  0012               	return	
  2218  000C36  D7B8               	goto	l204
  2219  000C38                     __end_of_readUartMessage:
  2220                           	opt stack 0
  2221                           tosu	equ	0xFFF
  2222                           tosh	equ	0xFFE
  2223                           tosl	equ	0xFFD
  2224                           pclath	equ	0xFFA
  2225                           tblptru	equ	0xFF8
  2226                           tblptrh	equ	0xFF7
  2227                           tblptrl	equ	0xFF6
  2228                           tablat	equ	0xFF5
  2229                           postinc0	equ	0xFEE
  2230                           wreg	equ	0xFE8
  2231                           postdec1	equ	0xFE5
  2232                           fsr1l	equ	0xFE1
  2233                           indf2	equ	0xFDF
  2234                           postinc2	equ	0xFDE
  2235                           fsr2h	equ	0xFDA
  2236                           fsr2l	equ	0xFD9
  2237                           status	equ	0xFD8
  2238                           
  2239 ;; *************** function _InitRxMessageParams *****************
  2240 ;; Defined at:
  2241 ;;		line 142 in file "EusartApp.c"
  2242 ;; Parameters:    Size  Location     Type
  2243 ;;		None
  2244 ;; Auto vars:     Size  Location     Type
  2245 ;;		None
  2246 ;; Return value:  Size  Location     Type
  2247 ;;                  1    wreg      void 
  2248 ;; Registers used:
  2249 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2250 ;; Tracked objects:
  2251 ;;		On entry : 0/0
  2252 ;;		On exit  : 0/0
  2253 ;;		Unchanged: 0/0
  2254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2255 ;;      Params:         0       0       0       0       0       0       0
  2256 ;;      Locals:         0       0       0       0       0       0       0
  2257 ;;      Temps:          0       0       0       0       0       0       0
  2258 ;;      Totals:         0       0       0       0       0       0       0
  2259 ;;Total ram usage:        0 bytes
  2260 ;; Hardware stack levels used:    1
  2261 ;; Hardware stack levels required when called:    5
  2262 ;; This function calls:
  2263 ;;		_ZeroArray
  2264 ;; This function is called by:
  2265 ;;		_readUartMessage
  2266 ;; This function uses a non-reentrant model
  2267 ;;
  2268                           
  2269                           	psect	text2
  2270  003494                     __ptext2:
  2271                           	opt stack 0
  2272  003494                     _InitRxMessageParams:
  2273                           	opt stack 24
  2274                           
  2275                           ;EusartApp.c: 146: dataSize = 0;
  2276                           
  2277                           ;incstack = 0
  2278  003494  0E00               	movlw	0
  2279  003496  0100               	movlb	0	; () banked
  2280  003498  6FCF               	movwf	_dataSize& (0+255),b
  2281                           
  2282                           ;EusartApp.c: 147: crcCalc = 0;
  2283  00349A  0E00               	movlw	0
  2284  00349C  6FCD               	movwf	_crcCalc& (0+255),b
  2285                           
  2286                           ;EusartApp.c: 148: crcGiven = 0;
  2287  00349E  0E00               	movlw	0
  2288  0034A0  6FCC               	movwf	_crcGiven& (0+255),b
  2289                           
  2290                           ;EusartApp.c: 149: msgCount = 0;
  2291  0034A2  0E00               	movlw	0
  2292  0034A4  6FCB               	movwf	_msgCount& (0+255),b
  2293                           
  2294                           ; BSR set to: 0
  2295                           ;EusartApp.c: 150: ZeroArray(rxMsgQueue, (0x14));
  2296  0034A6  0ED9               	movlw	low _rxMsgQueue
  2297  0034A8  6E20               	movwf	ZeroArray@array,c
  2298  0034AA  0E00               	movlw	high _rxMsgQueue
  2299  0034AC  6E21               	movwf	ZeroArray@array+1,c
  2300  0034AE  0E00               	movlw	0
  2301  0034B0  6E23               	movwf	ZeroArray@size+1,c
  2302  0034B2  0E14               	movlw	20
  2303  0034B4  6E22               	movwf	ZeroArray@size,c
  2304  0034B6  ECFE  F01A         	call	_ZeroArray
  2305  0034BA  0012               	return		;funcret
  2306  0034BC                     __end_of_InitRxMessageParams:
  2307                           	opt stack 0
  2308                           tosu	equ	0xFFF
  2309                           tosh	equ	0xFFE
  2310                           tosl	equ	0xFFD
  2311                           pclath	equ	0xFFA
  2312                           tblptru	equ	0xFF8
  2313                           tblptrh	equ	0xFF7
  2314                           tblptrl	equ	0xFF6
  2315                           tablat	equ	0xFF5
  2316                           postinc0	equ	0xFEE
  2317                           wreg	equ	0xFE8
  2318                           postdec1	equ	0xFE5
  2319                           fsr1l	equ	0xFE1
  2320                           indf2	equ	0xFDF
  2321                           postinc2	equ	0xFDE
  2322                           fsr2h	equ	0xFDA
  2323                           fsr2l	equ	0xFD9
  2324                           status	equ	0xFD8
  2325                           
  2326 ;; *************** function _GroupDAC *****************
  2327 ;; Defined at:
  2328 ;;		line 133 in file "MessageFunctions.c"
  2329 ;; Parameters:    Size  Location     Type
  2330 ;;  request         1    wreg     enum E12
  2331 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2332 ;;		 -> rxMsgData(20), 
  2333 ;; Auto vars:     Size  Location     Type
  2334 ;;  request         1   95[BANK0 ] enum E12
  2335 ;; Return value:  Size  Location     Type
  2336 ;;                  1    wreg      void 
  2337 ;; Registers used:
  2338 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2339 ;; Tracked objects:
  2340 ;;		On entry : 0/0
  2341 ;;		On exit  : 0/0
  2342 ;;		Unchanged: 0/0
  2343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2344 ;;      Params:         0       0       2       0       0       0       0
  2345 ;;      Locals:         0       1       0       0       0       0       0
  2346 ;;      Temps:          0       0       0       0       0       0       0
  2347 ;;      Totals:         0       1       2       0       0       0       0
  2348 ;;Total ram usage:        3 bytes
  2349 ;; Hardware stack levels used:    1
  2350 ;; Hardware stack levels required when called:    8
  2351 ;; This function calls:
  2352 ;;		_DacSetValue
  2353 ;; This function is called by:
  2354 ;;		_readUartMessage
  2355 ;; This function uses a non-reentrant model
  2356 ;;
  2357                           
  2358                           	psect	text3
  2359  0035A0                     __ptext3:
  2360                           	opt stack 0
  2361  0035A0                     _GroupDAC:
  2362                           	opt stack 21
  2363                           
  2364                           ;incstack = 0
  2365                           ;GroupDAC@request stored from wreg
  2366  0035A0  0100               	movlb	0	; () banked
  2367  0035A2  6FBF               	movwf	GroupDAC@request& (0+255),b
  2368                           
  2369                           ;MessageFunctions.c: 135: switch (request)
  2370  0035A4  D007               	goto	l1163
  2371  0035A6                     
  2372                           ;MessageFunctions.c: 138: DacSetValue(data);
  2373  0035A6  C1C2  F02F         	movff	GroupDAC@data,DacSetValue@data
  2374  0035AA  C1C3  F030         	movff	GroupDAC@data+1,DacSetValue@data+1
  2375  0035AE  EC8F  F013         	call	_DacSetValue	;wreg free
  2376                           
  2377                           ;MessageFunctions.c: 143: }
  2378                           
  2379                           ;MessageFunctions.c: 142: break;
  2380                           
  2381                           ;MessageFunctions.c: 141: default:
  2382                           
  2383                           ;MessageFunctions.c: 139: break;
  2384  0035B2  0012               	return	
  2385  0035B4                     l1163:
  2386  0035B4  0100               	movlb	0	; () banked
  2387  0035B6  51BF               	movf	GroupDAC@request& (0+255),w,b
  2388                           
  2389                           ; Switch size 1, requested type "space"
  2390                           ; Number of cases is 1, Range of values is 97 to 97
  2391                           ; switch strategies available:
  2392                           ; Name         Instructions Cycles
  2393                           ; simple_byte            4     3 (average)
  2394                           ;	Chosen strategy is simple_byte
  2395  0035B8  0A61               	xorlw	97	; case 97
  2396  0035BA  A4D8               	btfss	status,2,c
  2397  0035BC  0012               	return	
  2398  0035BE  D7F3               	goto	l1164
  2399  0035C0                     __end_of_GroupDAC:
  2400                           	opt stack 0
  2401                           tosu	equ	0xFFF
  2402                           tosh	equ	0xFFE
  2403                           tosl	equ	0xFFD
  2404                           pclath	equ	0xFFA
  2405                           tblptru	equ	0xFF8
  2406                           tblptrh	equ	0xFF7
  2407                           tblptrl	equ	0xFF6
  2408                           tablat	equ	0xFF5
  2409                           postinc0	equ	0xFEE
  2410                           wreg	equ	0xFE8
  2411                           postdec1	equ	0xFE5
  2412                           fsr1l	equ	0xFE1
  2413                           indf2	equ	0xFDF
  2414                           postinc2	equ	0xFDE
  2415                           fsr2h	equ	0xFDA
  2416                           fsr2l	equ	0xFD9
  2417                           status	equ	0xFD8
  2418                           
  2419 ;; *************** function _GroupFlashMemory *****************
  2420 ;; Defined at:
  2421 ;;		line 112 in file "MessageFunctions.c"
  2422 ;; Parameters:    Size  Location     Type
  2423 ;;  request         1    wreg     enum E12
  2424 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;  request         1   96[BANK0 ] enum E12
  2427 ;; Return value:  Size  Location     Type
  2428 ;;                  1    wreg      void 
  2429 ;; Registers used:
  2430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2431 ;; Tracked objects:
  2432 ;;		On entry : 0/0
  2433 ;;		On exit  : 0/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2436 ;;      Params:         0       0       2       0       0       0       0
  2437 ;;      Locals:         0       1       0       0       0       0       0
  2438 ;;      Temps:          0       1       0       0       0       0       0
  2439 ;;      Totals:         0       2       2       0       0       0       0
  2440 ;;Total ram usage:        4 bytes
  2441 ;; Hardware stack levels used:    1
  2442 ;; Hardware stack levels required when called:    7
  2443 ;; This function calls:
  2444 ;;		_FlashEreaseMem
  2445 ;;		_FlashReadCondition
  2446 ;;		_FlashReadUart
  2447 ;; This function is called by:
  2448 ;;		_readUartMessage
  2449 ;; This function uses a non-reentrant model
  2450 ;;
  2451                           
  2452                           	psect	text4
  2453  002F70                     __ptext4:
  2454                           	opt stack 0
  2455  002F70                     _GroupFlashMemory:
  2456                           	opt stack 22
  2457                           
  2458                           ;incstack = 0
  2459                           ;GroupFlashMemory@request stored from wreg
  2460  002F70  0100               	movlb	0	; () banked
  2461  002F72  6FC0               	movwf	GroupFlashMemory@request& (0+255),b
  2462                           
  2463                           ;MessageFunctions.c: 114: switch (request)
  2464  002F74  D013               	goto	l1154
  2465  002F76                     
  2466                           ;MessageFunctions.c: 117: FlashEreaseMem();
  2467  002F76  ECCF  F016         	call	_FlashEreaseMem	;wreg free
  2468                           
  2469                           ;MessageFunctions.c: 118: break;
  2470  002F7A  0012               	return	
  2471  002F7C                     
  2472                           ;MessageFunctions.c: 121: FlashReadCondition();
  2473  002F7C  EC01  F00B         	call	_FlashReadCondition	;wreg free
  2474                           
  2475                           ;MessageFunctions.c: 122: break;
  2476  002F80  0012               	return	
  2477  002F82                     
  2478                           ;MessageFunctions.c: 125: FlashReadUart((int)data[0]);
  2479  002F82  C1C2  FFD9         	movff	GroupFlashMemory@data,fsr2l
  2480  002F86  C1C3  FFDA         	movff	GroupFlashMemory@data+1,fsr2h
  2481  002F8A  50DF               	movf	indf2,w,c
  2482  002F8C  0100               	movlb	0	; () banked
  2483  002F8E  6FBF               	movwf	??_GroupFlashMemory& (0+255),b
  2484  002F90  51BF               	movf	??_GroupFlashMemory& (0+255),w,b
  2485  002F92  6E2C               	movwf	FlashReadUart@numOfSampleToRead,c
  2486  002F94  6A2D               	clrf	FlashReadUart@numOfSampleToRead+1,c
  2487  002F96  EC3D  F003         	call	_FlashReadUart	;wreg free
  2488                           
  2489                           ;MessageFunctions.c: 130: }
  2490                           
  2491                           ;MessageFunctions.c: 129: break;
  2492                           
  2493                           ;MessageFunctions.c: 128: default:
  2494                           
  2495                           ;MessageFunctions.c: 126: break;
  2496  002F9A  0012               	return	
  2497  002F9C                     l1154:
  2498  002F9C  0100               	movlb	0	; () banked
  2499  002F9E  51C0               	movf	GroupFlashMemory@request& (0+255),w,b
  2500                           
  2501                           ; Switch size 1, requested type "space"
  2502                           ; Number of cases is 3, Range of values is 81 to 83
  2503                           ; switch strategies available:
  2504                           ; Name         Instructions Cycles
  2505                           ; simple_byte           10     6 (average)
  2506                           ;	Chosen strategy is simple_byte
  2507  002FA0  0A51               	xorlw	81	; case 81
  2508  002FA2  B4D8               	btfsc	status,2,c
  2509  002FA4  D7E8               	goto	l1155
  2510  002FA6  0A03               	xorlw	3	; case 82
  2511  002FA8  B4D8               	btfsc	status,2,c
  2512  002FAA  D7E8               	goto	l1157
  2513  002FAC  0A01               	xorlw	1	; case 83
  2514  002FAE  A4D8               	btfss	status,2,c
  2515  002FB0  0012               	return	
  2516  002FB2  D7E7               	goto	l1158
  2517  002FB4                     __end_of_GroupFlashMemory:
  2518                           	opt stack 0
  2519                           tosu	equ	0xFFF
  2520                           tosh	equ	0xFFE
  2521                           tosl	equ	0xFFD
  2522                           pclath	equ	0xFFA
  2523                           tblptru	equ	0xFF8
  2524                           tblptrh	equ	0xFF7
  2525                           tblptrl	equ	0xFF6
  2526                           tablat	equ	0xFF5
  2527                           postinc0	equ	0xFEE
  2528                           wreg	equ	0xFE8
  2529                           postdec1	equ	0xFE5
  2530                           fsr1l	equ	0xFE1
  2531                           indf2	equ	0xFDF
  2532                           postinc2	equ	0xFDE
  2533                           fsr2h	equ	0xFDA
  2534                           fsr2l	equ	0xFD9
  2535                           status	equ	0xFD8
  2536                           
  2537 ;; *************** function _GroupAdc *****************
  2538 ;; Defined at:
  2539 ;;		line 67 in file "MessageFunctions.c"
  2540 ;; Parameters:    Size  Location     Type
  2541 ;;  request         1    wreg     enum E12
  2542 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;  request         1   95[BANK0 ] enum E12
  2545 ;; Return value:  Size  Location     Type
  2546 ;;                  1    wreg      void 
  2547 ;; Registers used:
  2548 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2549 ;; Tracked objects:
  2550 ;;		On entry : 0/0
  2551 ;;		On exit  : 0/0
  2552 ;;		Unchanged: 0/0
  2553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2554 ;;      Params:         0       0       2       0       0       0       0
  2555 ;;      Locals:         0       1       0       0       0       0       0
  2556 ;;      Temps:          0       0       0       0       0       0       0
  2557 ;;      Totals:         0       1       2       0       0       0       0
  2558 ;;Total ram usage:        3 bytes
  2559 ;; Hardware stack levels used:    1
  2560 ;; Hardware stack levels required when called:    7
  2561 ;; This function calls:
  2562 ;;		_SetAdcOperationMode
  2563 ;;		_SetChannelMode
  2564 ;;		_SetConversionResultFormat
  2565 ;; This function is called by:
  2566 ;;		_readUartMessage
  2567 ;; This function uses a non-reentrant model
  2568 ;;
  2569                           
  2570                           	psect	text5
  2571  002EE0                     __ptext5:
  2572                           	opt stack 0
  2573  002EE0                     _GroupAdc:
  2574                           	opt stack 22
  2575                           
  2576                           ;incstack = 0
  2577                           ;GroupAdc@request stored from wreg
  2578  002EE0  0100               	movlb	0	; () banked
  2579  002EE2  6FBF               	movwf	GroupAdc@request& (0+255),b
  2580                           
  2581                           ;MessageFunctions.c: 69: switch (request)
  2582  002EE4  D015               	goto	l1135
  2583  002EE6                     
  2584                           ;MessageFunctions.c: 72: SetAdcOperationMode(data);
  2585  002EE6  C1C2  F02C         	movff	GroupAdc@data,SetAdcOperationMode@data
  2586  002EEA  C1C3  F02D         	movff	GroupAdc@data+1,SetAdcOperationMode@data+1
  2587  002EEE  ECB8  F01B         	call	_SetAdcOperationMode	;wreg free
  2588                           
  2589                           ;MessageFunctions.c: 73: break;
  2590  002EF2  0012               	return	
  2591  002EF4                     
  2592                           ;MessageFunctions.c: 76: SetChannelMode(data);
  2593  002EF4  C1C2  F02C         	movff	GroupAdc@data,SetChannelMode@data
  2594  002EF8  C1C3  F02D         	movff	GroupAdc@data+1,SetChannelMode@data+1
  2595  002EFC  ECED  F019         	call	_SetChannelMode	;wreg free
  2596                           
  2597                           ;MessageFunctions.c: 77: break;
  2598  002F00  0012               	return	
  2599  002F02                     
  2600                           ;MessageFunctions.c: 80: SetConversionResultFormat(data);
  2601  002F02  C1C2  F02C         	movff	GroupAdc@data,SetConversionResultFormat@data
  2602  002F06  C1C3  F02D         	movff	GroupAdc@data+1,SetConversionResultFormat@data+1
  2603  002F0A  ECB2  F01B         	call	_SetConversionResultFormat	;wreg free
  2604                           
  2605                           ;MessageFunctions.c: 85: }
  2606                           
  2607                           ;MessageFunctions.c: 84: break;
  2608                           
  2609                           ;MessageFunctions.c: 83: default:
  2610                           
  2611                           ;MessageFunctions.c: 81: break;
  2612  002F0E  0012               	return	
  2613  002F10                     l1135:
  2614  002F10  0100               	movlb	0	; () banked
  2615  002F12  51BF               	movf	GroupAdc@request& (0+255),w,b
  2616                           
  2617                           ; Switch size 1, requested type "space"
  2618                           ; Number of cases is 3, Range of values is 49 to 51
  2619                           ; switch strategies available:
  2620                           ; Name         Instructions Cycles
  2621                           ; simple_byte           10     6 (average)
  2622                           ;	Chosen strategy is simple_byte
  2623  002F14  0A31               	xorlw	49	; case 49
  2624  002F16  B4D8               	btfsc	status,2,c
  2625  002F18  D7E6               	goto	l1136
  2626  002F1A  0A03               	xorlw	3	; case 50
  2627  002F1C  B4D8               	btfsc	status,2,c
  2628  002F1E  D7EA               	goto	l1138
  2629  002F20  0A01               	xorlw	1	; case 51
  2630  002F22  A4D8               	btfss	status,2,c
  2631  002F24  0012               	return	
  2632  002F26  D7ED               	goto	l1139
  2633  002F28                     __end_of_GroupAdc:
  2634                           	opt stack 0
  2635                           tosu	equ	0xFFF
  2636                           tosh	equ	0xFFE
  2637                           tosl	equ	0xFFD
  2638                           pclath	equ	0xFFA
  2639                           tblptru	equ	0xFF8
  2640                           tblptrh	equ	0xFF7
  2641                           tblptrl	equ	0xFF6
  2642                           tablat	equ	0xFF5
  2643                           postinc0	equ	0xFEE
  2644                           wreg	equ	0xFE8
  2645                           postdec1	equ	0xFE5
  2646                           fsr1l	equ	0xFE1
  2647                           indf2	equ	0xFDF
  2648                           postinc2	equ	0xFDE
  2649                           fsr2h	equ	0xFDA
  2650                           fsr2l	equ	0xFD9
  2651                           status	equ	0xFD8
  2652                           
  2653 ;; *************** function _GroupStatusAndVersion *****************
  2654 ;; Defined at:
  2655 ;;		line 38 in file "MessageFunctions.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;  request         1    wreg     enum E12
  2658 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2659 ;; Auto vars:     Size  Location     Type
  2660 ;;  request         1   95[BANK0 ] enum E12
  2661 ;; Return value:  Size  Location     Type
  2662 ;;                  1    wreg      void 
  2663 ;; Registers used:
  2664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2665 ;; Tracked objects:
  2666 ;;		On entry : 0/0
  2667 ;;		On exit  : 0/0
  2668 ;;		Unchanged: 0/0
  2669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2670 ;;      Params:         0       0       2       0       0       0       0
  2671 ;;      Locals:         0       1       0       0       0       0       0
  2672 ;;      Temps:          0       0       0       0       0       0       0
  2673 ;;      Totals:         0       1       2       0       0       0       0
  2674 ;;Total ram usage:        3 bytes
  2675 ;; Hardware stack levels used:    1
  2676 ;; Hardware stack levels required when called:    7
  2677 ;; This function calls:
  2678 ;;		_GetCpldFwVersion
  2679 ;;		_GetMcuFwVersion
  2680 ;;		_GetMcuRunTime
  2681 ;;		_SetCpldFwVersion
  2682 ;;		_SetMcuFwVersion
  2683 ;; This function is called by:
  2684 ;;		_readUartMessage
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           	psect	text6
  2689  002AF0                     __ptext6:
  2690                           	opt stack 0
  2691  002AF0                     _GroupStatusAndVersion:
  2692                           	opt stack 22
  2693                           
  2694                           ;incstack = 0
  2695                           ;GroupStatusAndVersion@request stored from wreg
  2696  002AF0  0100               	movlb	0	; () banked
  2697  002AF2  6FBF               	movwf	GroupStatusAndVersion@request& (0+255),b
  2698                           
  2699                           ;MessageFunctions.c: 40: switch (request)
  2700  002AF4  D017               	goto	l1124
  2701  002AF6                     
  2702                           ;MessageFunctions.c: 43: GetMcuFwVersion();
  2703  002AF6  EC98  F012         	call	_GetMcuFwVersion	;wreg free
  2704                           
  2705                           ;MessageFunctions.c: 44: break;
  2706  002AFA  0012               	return	
  2707  002AFC                     
  2708                           ;MessageFunctions.c: 47: SetMcuFwVersion(data);
  2709  002AFC  C1C2  F02C         	movff	GroupStatusAndVersion@data,SetMcuFwVersion@data
  2710  002B00  C1C3  F02D         	movff	GroupStatusAndVersion@data+1,SetMcuFwVersion@data+1
  2711  002B04  EC4D  F019         	call	_SetMcuFwVersion	;wreg free
  2712                           
  2713                           ;MessageFunctions.c: 48: break;
  2714  002B08  0012               	return	
  2715  002B0A                     
  2716                           ;MessageFunctions.c: 51: GetCpldFwVersion();
  2717  002B0A  EC7F  F011         	call	_GetCpldFwVersion	;wreg free
  2718                           
  2719                           ;MessageFunctions.c: 52: break;
  2720  002B0E  0012               	return	
  2721  002B10                     
  2722                           ;MessageFunctions.c: 55: SetCpldFwVersion(data);
  2723  002B10  C1C2  F02C         	movff	GroupStatusAndVersion@data,SetCpldFwVersion@data
  2724  002B14  C1C3  F02D         	movff	GroupStatusAndVersion@data+1,SetCpldFwVersion@data+1
  2725  002B18  EC1E  F018         	call	_SetCpldFwVersion	;wreg free
  2726                           
  2727                           ;MessageFunctions.c: 56: break;
  2728  002B1C  0012               	return	
  2729  002B1E                     
  2730                           ;MessageFunctions.c: 59: GetMcuRunTime();
  2731  002B1E  EC6F  F00D         	call	_GetMcuRunTime	;wreg free
  2732                           
  2733                           ;MessageFunctions.c: 64: }
  2734                           
  2735                           ;MessageFunctions.c: 63: break;
  2736                           
  2737                           ;MessageFunctions.c: 62: default:
  2738                           
  2739                           ;MessageFunctions.c: 60: break;
  2740  002B22  0012               	return	
  2741  002B24                     l1124:
  2742  002B24  0100               	movlb	0	; () banked
  2743  002B26  51BF               	movf	GroupStatusAndVersion@request& (0+255),w,b
  2744                           
  2745                           ; Switch size 1, requested type "space"
  2746                           ; Number of cases is 5, Range of values is 33 to 37
  2747                           ; switch strategies available:
  2748                           ; Name         Instructions Cycles
  2749                           ; simple_byte           16     9 (average)
  2750                           ;	Chosen strategy is simple_byte
  2751  002B28  0A21               	xorlw	33	; case 33
  2752  002B2A  B4D8               	btfsc	status,2,c
  2753  002B2C  D7F8               	goto	l1130
  2754  002B2E  0A03               	xorlw	3	; case 34
  2755  002B30  B4D8               	btfsc	status,2,c
  2756  002B32  D7E1               	goto	l1125
  2757  002B34  0A01               	xorlw	1	; case 35
  2758  002B36  B4D8               	btfsc	status,2,c
  2759  002B38  D7E8               	goto	l1128
  2760  002B3A  0A07               	xorlw	7	; case 36
  2761  002B3C  B4D8               	btfsc	status,2,c
  2762  002B3E  D7DE               	goto	l1127
  2763  002B40  0A01               	xorlw	1	; case 37
  2764  002B42  A4D8               	btfss	status,2,c
  2765  002B44  0012               	return	
  2766  002B46  D7E4               	goto	l1129
  2767  002B48                     __end_of_GroupStatusAndVersion:
  2768                           	opt stack 0
  2769                           tosu	equ	0xFFF
  2770                           tosh	equ	0xFFE
  2771                           tosl	equ	0xFFD
  2772                           pclath	equ	0xFFA
  2773                           tblptru	equ	0xFF8
  2774                           tblptrh	equ	0xFF7
  2775                           tblptrl	equ	0xFF6
  2776                           tablat	equ	0xFF5
  2777                           postinc0	equ	0xFEE
  2778                           wreg	equ	0xFE8
  2779                           postdec1	equ	0xFE5
  2780                           fsr1l	equ	0xFE1
  2781                           indf2	equ	0xFDF
  2782                           postinc2	equ	0xFDE
  2783                           fsr2h	equ	0xFDA
  2784                           fsr2l	equ	0xFD9
  2785                           status	equ	0xFD8
  2786                           
  2787 ;; *************** function _GroupControlMcu *****************
  2788 ;; Defined at:
  2789 ;;		line 11 in file "MessageFunctions.c"
  2790 ;; Parameters:    Size  Location     Type
  2791 ;;  request         1    wreg     enum E12
  2792 ;;  data            3    0[BANK1 ] PTR unsigned char 
  2793 ;; Auto vars:     Size  Location     Type
  2794 ;;  request         1   95[BANK0 ] enum E12
  2795 ;; Return value:  Size  Location     Type
  2796 ;;                  1    wreg      void 
  2797 ;; Registers used:
  2798 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2799 ;; Tracked objects:
  2800 ;;		On entry : 0/0
  2801 ;;		On exit  : 0/0
  2802 ;;		Unchanged: 0/0
  2803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2804 ;;      Params:         0       0       2       0       0       0       0
  2805 ;;      Locals:         0       1       0       0       0       0       0
  2806 ;;      Temps:          0       0       0       0       0       0       0
  2807 ;;      Totals:         0       1       2       0       0       0       0
  2808 ;;Total ram usage:        3 bytes
  2809 ;; Hardware stack levels used:    1
  2810 ;; Hardware stack levels required when called:    7
  2811 ;; This function calls:
  2812 ;;		_ResetCpld
  2813 ;;		_ResetMcu
  2814 ;;		_testLeds
  2815 ;; This function is called by:
  2816 ;;		_readUartMessage
  2817 ;; This function uses a non-reentrant model
  2818 ;;
  2819                           
  2820                           	psect	text7
  2821  003102                     __ptext7:
  2822                           	opt stack 0
  2823  003102                     _GroupControlMcu:
  2824                           	opt stack 22
  2825                           
  2826                           ;incstack = 0
  2827                           ;GroupControlMcu@request stored from wreg
  2828  003102  0100               	movlb	0	; () banked
  2829  003104  6FBF               	movwf	GroupControlMcu@request& (0+255),b
  2830                           
  2831                           ;MessageFunctions.c: 13: switch (request)
  2832  003106  D009               	goto	l1113
  2833  003108                     
  2834                           ;MessageFunctions.c: 16: testLeds();
  2835  003108  ECC8  F013         	call	_testLeds	;wreg free
  2836                           
  2837                           ;MessageFunctions.c: 17: break;
  2838  00310C  0012               	return	
  2839  00310E                     
  2840                           ;MessageFunctions.c: 20: ResetMcu();
  2841  00310E  EC97  F01B         	call	_ResetMcu	;wreg free
  2842                           
  2843                           ;MessageFunctions.c: 21: break;
  2844  003112  0012               	return	
  2845  003114                     
  2846                           ;MessageFunctions.c: 24: ResetCpld();
  2847  003114  ECAC  F01B         	call	_ResetCpld	;wreg free
  2848                           
  2849                           ;MessageFunctions.c: 35: }
  2850                           
  2851                           ;MessageFunctions.c: 34: break;
  2852                           
  2853                           ;MessageFunctions.c: 33: default:
  2854                           
  2855                           ;MessageFunctions.c: 31: break;
  2856                           
  2857                           ;MessageFunctions.c: 30: case CONTROL_PA2_SET:
  2858                           
  2859                           ;MessageFunctions.c: 28: break;
  2860                           
  2861                           ;MessageFunctions.c: 27: case CONTROL_PA1_SET:
  2862                           
  2863                           ;MessageFunctions.c: 25: break;
  2864  003118  0012               	return	
  2865  00311A                     l1113:
  2866  00311A  0100               	movlb	0	; () banked
  2867  00311C  51BF               	movf	GroupControlMcu@request& (0+255),w,b
  2868                           
  2869                           ; Switch size 1, requested type "space"
  2870                           ; Number of cases is 5, Range of values is 17 to 21
  2871                           ; switch strategies available:
  2872                           ; Name         Instructions Cycles
  2873                           ; simple_byte           16     9 (average)
  2874                           ;	Chosen strategy is simple_byte
  2875  00311E  0A11               	xorlw	17	; case 17
  2876  003120  B4D8               	btfsc	status,2,c
  2877  003122  D7F5               	goto	l1116
  2878  003124  0A03               	xorlw	3	; case 18
  2879  003126  B4D8               	btfsc	status,2,c
  2880  003128  D7F5               	goto	l1117
  2881  00312A  0A01               	xorlw	1	; case 19
  2882  00312C  B4D8               	btfsc	status,2,c
  2883  00312E  0012               	return	
  2884  003130  0A07               	xorlw	7	; case 20
  2885  003132  B4D8               	btfsc	status,2,c
  2886  003134  0012               	return	
  2887  003136  0A01               	xorlw	1	; case 21
  2888  003138  A4D8               	btfss	status,2,c
  2889  00313A  0012               	return	
  2890  00313C  D7E5               	goto	l1114
  2891  00313E                     __end_of_GroupControlMcu:
  2892                           	opt stack 0
  2893                           tosu	equ	0xFFF
  2894                           tosh	equ	0xFFE
  2895                           tosl	equ	0xFFD
  2896                           pclath	equ	0xFFA
  2897                           tblptru	equ	0xFF8
  2898                           tblptrh	equ	0xFF7
  2899                           tblptrl	equ	0xFF6
  2900                           tablat	equ	0xFF5
  2901                           postinc0	equ	0xFEE
  2902                           wreg	equ	0xFE8
  2903                           postdec1	equ	0xFE5
  2904                           fsr1l	equ	0xFE1
  2905                           indf2	equ	0xFDF
  2906                           postinc2	equ	0xFDE
  2907                           fsr2h	equ	0xFDA
  2908                           fsr2l	equ	0xFD9
  2909                           status	equ	0xFD8
  2910                           
  2911 ;; *************** function _GroupSynthesizers *****************
  2912 ;; Defined at:
  2913 ;;		line 87 in file "MessageFunctions.c"
  2914 ;; Parameters:    Size  Location     Type
  2915 ;;  request         1    wreg     enum E12
  2916 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2917 ;; Auto vars:     Size  Location     Type
  2918 ;;  request         1   95[BANK0 ] enum E12
  2919 ;; Return value:  Size  Location     Type
  2920 ;;                  1    wreg      void 
  2921 ;; Registers used:
  2922 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2923 ;; Tracked objects:
  2924 ;;		On entry : 0/0
  2925 ;;		On exit  : 0/0
  2926 ;;		Unchanged: 0/0
  2927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2928 ;;      Params:         0       0       2       0       0       0       0
  2929 ;;      Locals:         0       1       0       0       0       0       0
  2930 ;;      Temps:          0       0       0       0       0       0       0
  2931 ;;      Totals:         0       1       2       0       0       0       0
  2932 ;;Total ram usage:        3 bytes
  2933 ;; Hardware stack levels used:    1
  2934 ;; Hardware stack levels required when called:    8
  2935 ;; This function calls:
  2936 ;;		_PLLUartInitialize
  2937 ;;		_UpdateRxFreq
  2938 ;;		_UpdateTxFreq
  2939 ;; This function is called by:
  2940 ;;		_readUartMessage
  2941 ;; This function uses a non-reentrant model
  2942 ;;
  2943                           
  2944                           	psect	text8
  2945  0029DC                     __ptext8:
  2946                           	opt stack 0
  2947  0029DC                     _GroupSynthesizers:
  2948                           	opt stack 21
  2949                           
  2950                           ;incstack = 0
  2951                           ;GroupSynthesizers@request stored from wreg
  2952  0029DC  0100               	movlb	0	; () banked
  2953  0029DE  6FBF               	movwf	GroupSynthesizers@request& (0+255),b
  2954                           
  2955                           ;MessageFunctions.c: 89: switch (request)
  2956  0029E0  D01C               	goto	l1144
  2957  0029E2                     
  2958                           ;MessageFunctions.c: 92: PLLUartInitialize(data);
  2959  0029E2  C1C2  F018         	movff	GroupSynthesizers@data,PLLUartInitialize@data
  2960  0029E6  C1C3  F019         	movff	GroupSynthesizers@data+1,PLLUartInitialize@data+1
  2961  0029EA  ECE3  F01B         	call	_PLLUartInitialize	;wreg free
  2962                           
  2963                           ;MessageFunctions.c: 93: break;
  2964  0029EE  0012               	return	
  2965  0029F0                     
  2966                           ;MessageFunctions.c: 96: PLLUartInitialize(data);
  2967  0029F0  C1C2  F018         	movff	GroupSynthesizers@data,PLLUartInitialize@data
  2968  0029F4  C1C3  F019         	movff	GroupSynthesizers@data+1,PLLUartInitialize@data+1
  2969  0029F8  ECE3  F01B         	call	_PLLUartInitialize	;wreg free
  2970                           
  2971                           ;MessageFunctions.c: 97: break;
  2972  0029FC  0012               	return	
  2973  0029FE                     
  2974                           ;MessageFunctions.c: 100: UpdateTxFreq(data);
  2975  0029FE  C1C2  F02F         	movff	GroupSynthesizers@data,UpdateTxFreq@data
  2976  002A02  C1C3  F030         	movff	GroupSynthesizers@data+1,UpdateTxFreq@data+1
  2977  002A06  EC7D  F016         	call	_UpdateTxFreq	;wreg free
  2978                           
  2979                           ;MessageFunctions.c: 101: break;
  2980  002A0A  0012               	return	
  2981  002A0C                     
  2982                           ;MessageFunctions.c: 104: UpdateRxFreq(data);
  2983  002A0C  C1C2  F02F         	movff	GroupSynthesizers@data,UpdateRxFreq@data
  2984  002A10  C1C3  F030         	movff	GroupSynthesizers@data+1,UpdateRxFreq@data+1
  2985  002A14  ECA6  F016         	call	_UpdateRxFreq	;wreg free
  2986                           
  2987                           ;MessageFunctions.c: 109: }
  2988                           
  2989                           ;MessageFunctions.c: 108: break;
  2990                           
  2991                           ;MessageFunctions.c: 107: default:
  2992                           
  2993                           ;MessageFunctions.c: 105: break;
  2994  002A18  0012               	return	
  2995  002A1A                     l1144:
  2996  002A1A  0100               	movlb	0	; () banked
  2997  002A1C  51BF               	movf	GroupSynthesizers@request& (0+255),w,b
  2998                           
  2999                           ; Switch size 1, requested type "space"
  3000                           ; Number of cases is 4, Range of values is 64 to 67
  3001                           ; switch strategies available:
  3002                           ; Name         Instructions Cycles
  3003                           ; simple_byte           13     7 (average)
  3004                           ;	Chosen strategy is simple_byte
  3005  002A1E  0A40               	xorlw	64	; case 64
  3006  002A20  B4D8               	btfsc	status,2,c
  3007  002A22  D7DF               	goto	l1145
  3008  002A24  0A01               	xorlw	1	; case 65
  3009  002A26  B4D8               	btfsc	status,2,c
  3010  002A28  D7E3               	goto	l1147
  3011  002A2A  0A03               	xorlw	3	; case 66
  3012  002A2C  B4D8               	btfsc	status,2,c
  3013  002A2E  D7E7               	goto	l1148
  3014  002A30  0A01               	xorlw	1	; case 67
  3015  002A32  A4D8               	btfss	status,2,c
  3016  002A34  0012               	return	
  3017  002A36  D7EA               	goto	l1149
  3018  002A38                     __end_of_GroupSynthesizers:
  3019                           	opt stack 0
  3020                           tosu	equ	0xFFF
  3021                           tosh	equ	0xFFE
  3022                           tosl	equ	0xFFD
  3023                           pclath	equ	0xFFA
  3024                           tblptru	equ	0xFF8
  3025                           tblptrh	equ	0xFF7
  3026                           tblptrl	equ	0xFF6
  3027                           tablat	equ	0xFF5
  3028                           postinc0	equ	0xFEE
  3029                           wreg	equ	0xFE8
  3030                           postdec1	equ	0xFE5
  3031                           fsr1l	equ	0xFE1
  3032                           indf2	equ	0xFDF
  3033                           postinc2	equ	0xFDE
  3034                           fsr2h	equ	0xFDA
  3035                           fsr2l	equ	0xFD9
  3036                           status	equ	0xFD8
  3037                           
  3038 ;; *************** function _UpdateTxFreq *****************
  3039 ;; Defined at:
  3040 ;;		line 51 in file "SyntApp.c"
  3041 ;; Parameters:    Size  Location     Type
  3042 ;;  data            2   46[COMRAM] PTR unsigned char 
  3043 ;; Auto vars:     Size  Location     Type
  3044 ;;  regData         4   38[BANK0 ] unsigned long 
  3045 ;; Return value:  Size  Location     Type
  3046 ;;                  1    wreg      void 
  3047 ;; Registers used:
  3048 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3049 ;; Tracked objects:
  3050 ;;		On entry : 0/0
  3051 ;;		On exit  : 0/0
  3052 ;;		Unchanged: 0/0
  3053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3054 ;;      Params:         2       0       0       0       0       0       0
  3055 ;;      Locals:         0       4       0       0       0       0       0
  3056 ;;      Temps:          0       0       0       0       0       0       0
  3057 ;;      Totals:         2       4       0       0       0       0       0
  3058 ;;Total ram usage:        6 bytes
  3059 ;; Hardware stack levels used:    1
  3060 ;; Hardware stack levels required when called:    7
  3061 ;; This function calls:
  3062 ;;		_GetIntFromUartData
  3063 ;;		_SWSPI_send_word
  3064 ;;		_SendAckMessage
  3065 ;; This function is called by:
  3066 ;;		_GroupSynthesizers
  3067 ;; This function uses a non-reentrant model
  3068 ;;
  3069                           
  3070                           	psect	text9
  3071  002CFA                     __ptext9:
  3072                           	opt stack 0
  3073  002CFA                     _UpdateTxFreq:
  3074                           	opt stack 21
  3075                           
  3076                           ;SyntApp.c: 53: if(cntRegUpdate < 7)
  3077                           
  3078                           ;incstack = 0
  3079  002CFA  0E07               	movlw	7
  3080  002CFC  603B               	cpfslt	_cntRegUpdate,c
  3081  002CFE  D01E               	goto	l451
  3082                           
  3083                           ;SyntApp.c: 54: {
  3084                           ;SyntApp.c: 55: uint32_t regData = GetIntFromUartData(10, data);
  3085  002D00  C02F  F066         	movff	UpdateTxFreq@data,GetIntFromUartData@data
  3086  002D04  C030  F067         	movff	UpdateTxFreq@data+1,GetIntFromUartData@data+1
  3087  002D08  0E0A               	movlw	10
  3088  002D0A  EC20  F00F         	call	_GetIntFromUartData
  3089  002D0E  C066  F086         	movff	?_GetIntFromUartData,UpdateTxFreq@regData
  3090  002D12  C067  F087         	movff	?_GetIntFromUartData+1,UpdateTxFreq@regData+1
  3091  002D16  C068  F088         	movff	?_GetIntFromUartData+2,UpdateTxFreq@regData+2
  3092  002D1A  C069  F089         	movff	?_GetIntFromUartData+3,UpdateTxFreq@regData+3
  3093                           
  3094                           ;SyntApp.c: 56: SWSPI_send_word(SYNTH_TX, regData, 3);
  3095  002D1E  C086  F026         	movff	UpdateTxFreq@regData,SWSPI_send_word@data
  3096  002D22  C087  F027         	movff	UpdateTxFreq@regData+1,SWSPI_send_word@data+1
  3097  002D26  C088  F028         	movff	UpdateTxFreq@regData+2,SWSPI_send_word@data+2
  3098  002D2A  C089  F029         	movff	UpdateTxFreq@regData+3,SWSPI_send_word@data+3
  3099  002D2E  0E03               	movlw	3
  3100  002D30  6E2A               	movwf	SWSPI_send_word@dataSize,c
  3101  002D32  0E00               	movlw	0
  3102  002D34  ECE9  F010         	call	_SWSPI_send_word
  3103                           
  3104                           ;SyntApp.c: 57: cntRegUpdate ++;
  3105  002D38  2A3B               	incf	_cntRegUpdate,f,c
  3106                           
  3107                           ;SyntApp.c: 58: }
  3108  002D3A  0012               	return	
  3109  002D3C                     l451:
  3110                           
  3111                           ;SyntApp.c: 60: else
  3112                           ;SyntApp.c: 61: {
  3113                           ;SyntApp.c: 62: cntRegUpdate = 0;
  3114  002D3C  0E00               	movlw	0
  3115  002D3E  6E3B               	movwf	_cntRegUpdate,c
  3116                           
  3117                           ;SyntApp.c: 63: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_SET);
  3118  002D40  0E42               	movlw	66
  3119  002D42  6E24               	movwf	SendAckMessage@inRequest,c
  3120  002D44  0E04               	movlw	4
  3121  002D46  ECF8  F016         	call	_SendAckMessage
  3122  002D4A  0012               	return	
  3123  002D4C                     __end_of_UpdateTxFreq:
  3124                           	opt stack 0
  3125                           tosu	equ	0xFFF
  3126                           tosh	equ	0xFFE
  3127                           tosl	equ	0xFFD
  3128                           pclath	equ	0xFFA
  3129                           tblptru	equ	0xFF8
  3130                           tblptrh	equ	0xFF7
  3131                           tblptrl	equ	0xFF6
  3132                           tablat	equ	0xFF5
  3133                           postinc0	equ	0xFEE
  3134                           wreg	equ	0xFE8
  3135                           postdec1	equ	0xFE5
  3136                           fsr1l	equ	0xFE1
  3137                           indf2	equ	0xFDF
  3138                           postinc2	equ	0xFDE
  3139                           fsr2h	equ	0xFDA
  3140                           fsr2l	equ	0xFD9
  3141                           status	equ	0xFD8
  3142                           
  3143 ;; *************** function _UpdateRxFreq *****************
  3144 ;; Defined at:
  3145 ;;		line 68 in file "SyntApp.c"
  3146 ;; Parameters:    Size  Location     Type
  3147 ;;  data            2   46[COMRAM] PTR unsigned char 
  3148 ;; Auto vars:     Size  Location     Type
  3149 ;;  regData         4   38[BANK0 ] unsigned long 
  3150 ;; Return value:  Size  Location     Type
  3151 ;;                  1    wreg      void 
  3152 ;; Registers used:
  3153 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3154 ;; Tracked objects:
  3155 ;;		On entry : 0/0
  3156 ;;		On exit  : 0/0
  3157 ;;		Unchanged: 0/0
  3158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3159 ;;      Params:         2       0       0       0       0       0       0
  3160 ;;      Locals:         0       4       0       0       0       0       0
  3161 ;;      Temps:          0       0       0       0       0       0       0
  3162 ;;      Totals:         2       4       0       0       0       0       0
  3163 ;;Total ram usage:        6 bytes
  3164 ;; Hardware stack levels used:    1
  3165 ;; Hardware stack levels required when called:    7
  3166 ;; This function calls:
  3167 ;;		_GetIntFromUartData
  3168 ;;		_SWSPI_send_word
  3169 ;;		_SendAckMessage
  3170 ;; This function is called by:
  3171 ;;		_GroupSynthesizers
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           	psect	text10
  3176  002D4C                     __ptext10:
  3177                           	opt stack 0
  3178  002D4C                     _UpdateRxFreq:
  3179                           	opt stack 21
  3180                           
  3181                           ;SyntApp.c: 70: if(cntRegUpdate < 7)
  3182                           
  3183                           ;incstack = 0
  3184  002D4C  0E07               	movlw	7
  3185  002D4E  603B               	cpfslt	_cntRegUpdate,c
  3186  002D50  D01E               	goto	l456
  3187                           
  3188                           ;SyntApp.c: 71: {
  3189                           ;SyntApp.c: 72: uint32_t regData = GetIntFromUartData(10, data);
  3190  002D52  C02F  F066         	movff	UpdateRxFreq@data,GetIntFromUartData@data
  3191  002D56  C030  F067         	movff	UpdateRxFreq@data+1,GetIntFromUartData@data+1
  3192  002D5A  0E0A               	movlw	10
  3193  002D5C  EC20  F00F         	call	_GetIntFromUartData
  3194  002D60  C066  F086         	movff	?_GetIntFromUartData,UpdateRxFreq@regData
  3195  002D64  C067  F087         	movff	?_GetIntFromUartData+1,UpdateRxFreq@regData+1
  3196  002D68  C068  F088         	movff	?_GetIntFromUartData+2,UpdateRxFreq@regData+2
  3197  002D6C  C069  F089         	movff	?_GetIntFromUartData+3,UpdateRxFreq@regData+3
  3198                           
  3199                           ;SyntApp.c: 73: SWSPI_send_word(SYNTH_RX, regData, 3);
  3200  002D70  C086  F026         	movff	UpdateRxFreq@regData,SWSPI_send_word@data
  3201  002D74  C087  F027         	movff	UpdateRxFreq@regData+1,SWSPI_send_word@data+1
  3202  002D78  C088  F028         	movff	UpdateRxFreq@regData+2,SWSPI_send_word@data+2
  3203  002D7C  C089  F029         	movff	UpdateRxFreq@regData+3,SWSPI_send_word@data+3
  3204  002D80  0E03               	movlw	3
  3205  002D82  6E2A               	movwf	SWSPI_send_word@dataSize,c
  3206  002D84  0E01               	movlw	1
  3207  002D86  ECE9  F010         	call	_SWSPI_send_word
  3208                           
  3209                           ;SyntApp.c: 74: cntRegUpdate ++;
  3210  002D8A  2A3B               	incf	_cntRegUpdate,f,c
  3211                           
  3212                           ;SyntApp.c: 75: }
  3213  002D8C  0012               	return	
  3214  002D8E                     l456:
  3215                           
  3216                           ;SyntApp.c: 77: else
  3217                           ;SyntApp.c: 78: {
  3218                           ;SyntApp.c: 79: cntRegUpdate = 0;
  3219  002D8E  0E00               	movlw	0
  3220  002D90  6E3B               	movwf	_cntRegUpdate,c
  3221                           
  3222                           ;SyntApp.c: 80: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_SET);
  3223  002D92  0E43               	movlw	67
  3224  002D94  6E24               	movwf	SendAckMessage@inRequest,c
  3225  002D96  0E04               	movlw	4
  3226  002D98  ECF8  F016         	call	_SendAckMessage
  3227  002D9C  0012               	return	
  3228  002D9E                     __end_of_UpdateRxFreq:
  3229                           	opt stack 0
  3230                           tosu	equ	0xFFF
  3231                           tosh	equ	0xFFE
  3232                           tosl	equ	0xFFD
  3233                           pclath	equ	0xFFA
  3234                           tblptru	equ	0xFF8
  3235                           tblptrh	equ	0xFF7
  3236                           tblptrl	equ	0xFF6
  3237                           tablat	equ	0xFF5
  3238                           postinc0	equ	0xFEE
  3239                           wreg	equ	0xFE8
  3240                           postdec1	equ	0xFE5
  3241                           fsr1l	equ	0xFE1
  3242                           indf2	equ	0xFDF
  3243                           postinc2	equ	0xFDE
  3244                           fsr2h	equ	0xFDA
  3245                           fsr2l	equ	0xFD9
  3246                           status	equ	0xFD8
  3247                           
  3248 ;; *************** function _PLLUartInitialize *****************
  3249 ;; Defined at:
  3250 ;;		line 42 in file "SyntApp.c"
  3251 ;; Parameters:    Size  Location     Type
  3252 ;;  data            2   23[COMRAM] PTR unsigned char 
  3253 ;; Auto vars:     Size  Location     Type
  3254 ;;		None
  3255 ;; Return value:  Size  Location     Type
  3256 ;;                  1    wreg      void 
  3257 ;; Registers used:
  3258 ;;		None
  3259 ;; Tracked objects:
  3260 ;;		On entry : 0/0
  3261 ;;		On exit  : 0/0
  3262 ;;		Unchanged: 0/0
  3263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3264 ;;      Params:         2       0       0       0       0       0       0
  3265 ;;      Locals:         0       0       0       0       0       0       0
  3266 ;;      Temps:          0       0       0       0       0       0       0
  3267 ;;      Totals:         2       0       0       0       0       0       0
  3268 ;;Total ram usage:        2 bytes
  3269 ;; Hardware stack levels used:    1
  3270 ;; Hardware stack levels required when called:    3
  3271 ;; This function calls:
  3272 ;;		Nothing
  3273 ;; This function is called by:
  3274 ;;		_GroupSynthesizers
  3275 ;; This function uses a non-reentrant model
  3276 ;;
  3277                           
  3278                           	psect	text11
  3279  0037C6                     __ptext11:
  3280                           	opt stack 0
  3281  0037C6                     _PLLUartInitialize:
  3282                           	opt stack 25
  3283                           
  3284                           ;incstack = 0
  3285  0037C6  0012               	return		;funcret
  3286  0037C8                     __end_of_PLLUartInitialize:
  3287                           	opt stack 0
  3288                           tosu	equ	0xFFF
  3289                           tosh	equ	0xFFE
  3290                           tosl	equ	0xFFD
  3291                           pclath	equ	0xFFA
  3292                           tblptru	equ	0xFF8
  3293                           tblptrh	equ	0xFF7
  3294                           tblptrl	equ	0xFF6
  3295                           tablat	equ	0xFF5
  3296                           postinc0	equ	0xFEE
  3297                           wreg	equ	0xFE8
  3298                           postdec1	equ	0xFE5
  3299                           fsr1l	equ	0xFE1
  3300                           indf2	equ	0xFDF
  3301                           postinc2	equ	0xFDE
  3302                           fsr2h	equ	0xFDA
  3303                           fsr2l	equ	0xFD9
  3304                           status	equ	0xFD8
  3305                           
  3306 ;; *************** function _SetMcuFwVersion *****************
  3307 ;; Defined at:
  3308 ;;		line 15 in file "SystemStatus.c"
  3309 ;; Parameters:    Size  Location     Type
  3310 ;;  data            2   43[COMRAM] PTR unsigned char 
  3311 ;; Auto vars:     Size  Location     Type
  3312 ;;  idx             1   45[COMRAM] unsigned char 
  3313 ;; Return value:  Size  Location     Type
  3314 ;;                  1    wreg      void 
  3315 ;; Registers used:
  3316 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3317 ;; Tracked objects:
  3318 ;;		On entry : 0/0
  3319 ;;		On exit  : 0/0
  3320 ;;		Unchanged: 0/0
  3321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3322 ;;      Params:         2       0       0       0       0       0       0
  3323 ;;      Locals:         1       0       0       0       0       0       0
  3324 ;;      Temps:          0       0       0       0       0       0       0
  3325 ;;      Totals:         3       0       0       0       0       0       0
  3326 ;;Total ram usage:        3 bytes
  3327 ;; Hardware stack levels used:    1
  3328 ;; Hardware stack levels required when called:    6
  3329 ;; This function calls:
  3330 ;;		_EepromWrite
  3331 ;;		_SendAckMessage
  3332 ;; This function is called by:
  3333 ;;		_GroupStatusAndVersion
  3334 ;; This function uses a non-reentrant model
  3335 ;;
  3336                           
  3337                           	psect	text12
  3338  00329A                     __ptext12:
  3339                           	opt stack 0
  3340  00329A                     _SetMcuFwVersion:
  3341                           	opt stack 22
  3342                           
  3343                           ;SystemStatus.c: 17: for(uint8_t idx = 0; idx < (0x4); idx++)
  3344                           
  3345                           ;incstack = 0
  3346  00329A  0E00               	movlw	0
  3347  00329C  6E2E               	movwf	SetMcuFwVersion@idx,c
  3348  00329E                     l7435:
  3349  00329E  0E03               	movlw	3
  3350  0032A0  642E               	cpfsgt	SetMcuFwVersion@idx,c
  3351  0032A2  D001               	goto	l1301
  3352  0032A4  D00F               	goto	u7440
  3353  0032A6                     l1301:
  3354                           
  3355                           ;SystemStatus.c: 18: {
  3356                           ;SystemStatus.c: 19: EepromWrite(idx, data[idx]);
  3357  0032A6  502E               	movf	SetMcuFwVersion@idx,w,c
  3358  0032A8  0D01               	mullw	1
  3359  0032AA  50F3               	movf	prodl,w,c
  3360  0032AC  242C               	addwf	SetMcuFwVersion@data,w,c
  3361  0032AE  6ED9               	movwf	fsr2l,c
  3362  0032B0  50F4               	movf	prodh,w,c
  3363  0032B2  202D               	addwfc	SetMcuFwVersion@data+1,w,c
  3364  0032B4  6EDA               	movwf	fsr2h,c
  3365  0032B6  50DF               	movf	indf2,w,c
  3366  0032B8  6E1B               	movwf	EepromWrite@data,c
  3367  0032BA  502E               	movf	SetMcuFwVersion@idx,w,c
  3368  0032BC  EC90  F01B         	call	_EepromWrite
  3369  0032C0  2A2E               	incf	SetMcuFwVersion@idx,f,c
  3370  0032C2  D7ED               	goto	l7435
  3371  0032C4                     u7440:
  3372                           
  3373                           ;SystemStatus.c: 20: }
  3374                           ;SystemStatus.c: 23: SendAckMessage((MSG_GROUPS)MCU_STATUS_VERSION_MSG, (MSG_REQUEST)STA
      +                          TUS_SET_MCU_FW_VERSION);
  3375  0032C4  0E24               	movlw	36
  3376  0032C6  6E24               	movwf	SendAckMessage@inRequest,c
  3377  0032C8  0E02               	movlw	2
  3378  0032CA  ECF8  F016         	call	_SendAckMessage
  3379  0032CE  0012               	return		;funcret
  3380  0032D0                     __end_of_SetMcuFwVersion:
  3381                           	opt stack 0
  3382                           tosu	equ	0xFFF
  3383                           tosh	equ	0xFFE
  3384                           tosl	equ	0xFFD
  3385                           pclath	equ	0xFFA
  3386                           tblptru	equ	0xFF8
  3387                           tblptrh	equ	0xFF7
  3388                           tblptrl	equ	0xFF6
  3389                           tablat	equ	0xFF5
  3390                           prodh	equ	0xFF4
  3391                           prodl	equ	0xFF3
  3392                           postinc0	equ	0xFEE
  3393                           wreg	equ	0xFE8
  3394                           postdec1	equ	0xFE5
  3395                           fsr1l	equ	0xFE1
  3396                           indf2	equ	0xFDF
  3397                           postinc2	equ	0xFDE
  3398                           fsr2h	equ	0xFDA
  3399                           fsr2l	equ	0xFD9
  3400                           status	equ	0xFD8
  3401                           
  3402 ;; *************** function _SetCpldFwVersion *****************
  3403 ;; Defined at:
  3404 ;;		line 49 in file "SystemStatus.c"
  3405 ;; Parameters:    Size  Location     Type
  3406 ;;  data            2   43[COMRAM] PTR unsigned char 
  3407 ;; Auto vars:     Size  Location     Type
  3408 ;;  idx             2   45[COMRAM] int 
  3409 ;; Return value:  Size  Location     Type
  3410 ;;                  1    wreg      void 
  3411 ;; Registers used:
  3412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3413 ;; Tracked objects:
  3414 ;;		On entry : 0/0
  3415 ;;		On exit  : 0/0
  3416 ;;		Unchanged: 0/0
  3417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3418 ;;      Params:         2       0       0       0       0       0       0
  3419 ;;      Locals:         2       0       0       0       0       0       0
  3420 ;;      Temps:          0       0       0       0       0       0       0
  3421 ;;      Totals:         4       0       0       0       0       0       0
  3422 ;;Total ram usage:        4 bytes
  3423 ;; Hardware stack levels used:    1
  3424 ;; Hardware stack levels required when called:    6
  3425 ;; This function calls:
  3426 ;;		_EepromWrite
  3427 ;;		_SendAckMessage
  3428 ;; This function is called by:
  3429 ;;		_GroupStatusAndVersion
  3430 ;; This function uses a non-reentrant model
  3431 ;;
  3432                           
  3433                           	psect	text13
  3434  00303C                     __ptext13:
  3435                           	opt stack 0
  3436  00303C                     _SetCpldFwVersion:
  3437                           	opt stack 22
  3438                           
  3439                           ;SystemStatus.c: 51: for(int idx = 0; idx < (0x4); idx++)
  3440                           
  3441                           ;incstack = 0
  3442  00303C  0E00               	movlw	0
  3443  00303E  6E2F               	movwf	SetCpldFwVersion@idx+1,c
  3444  003040  0E00               	movlw	0
  3445  003042  6E2E               	movwf	SetCpldFwVersion@idx,c
  3446  003044                     l7475:
  3447  003044  BE2F               	btfsc	SetCpldFwVersion@idx+1,7,c
  3448  003046  D006               	goto	l1311
  3449  003048  502F               	movf	SetCpldFwVersion@idx+1,w,c
  3450  00304A  E113               	bnz	l7485
  3451  00304C  0E04               	movlw	4
  3452  00304E  5C2E               	subwf	SetCpldFwVersion@idx,w,c
  3453  003050  B0D8               	btfsc	status,0,c
  3454  003052  D00F               	goto	u7480
  3455  003054                     l1311:
  3456                           
  3457                           ;SystemStatus.c: 52: {
  3458                           ;SystemStatus.c: 53: EepromWrite((0x4) + idx, data[idx]);
  3459  003054  502E               	movf	SetCpldFwVersion@idx,w,c
  3460  003056  242C               	addwf	SetCpldFwVersion@data,w,c
  3461  003058  6ED9               	movwf	fsr2l,c
  3462  00305A  502F               	movf	SetCpldFwVersion@idx+1,w,c
  3463  00305C  202D               	addwfc	SetCpldFwVersion@data+1,w,c
  3464  00305E  6EDA               	movwf	fsr2h,c
  3465  003060  50DF               	movf	indf2,w,c
  3466  003062  6E1B               	movwf	EepromWrite@data,c
  3467  003064  502E               	movf	SetCpldFwVersion@idx,w,c
  3468  003066  0F04               	addlw	4
  3469  003068  EC90  F01B         	call	_EepromWrite
  3470  00306C  4A2E               	infsnz	SetCpldFwVersion@idx,f,c
  3471  00306E  2A2F               	incf	SetCpldFwVersion@idx+1,f,c
  3472  003070  D7E9               	goto	l7475
  3473  003072                     u7480:
  3474  003072                     l7485:
  3475                           
  3476                           ;SystemStatus.c: 54: }
  3477                           ;SystemStatus.c: 55: SendAckMessage((MSG_GROUPS)MCU_STATUS_VERSION_MSG, (MSG_REQUEST)STA
      +                          TUS_SET_CPLD_FW_VERSION);
  3478  003072  0E25               	movlw	37
  3479  003074  6E24               	movwf	SendAckMessage@inRequest,c
  3480  003076  0E02               	movlw	2
  3481  003078  ECF8  F016         	call	_SendAckMessage
  3482  00307C  0012               	return		;funcret
  3483  00307E                     __end_of_SetCpldFwVersion:
  3484                           	opt stack 0
  3485                           tosu	equ	0xFFF
  3486                           tosh	equ	0xFFE
  3487                           tosl	equ	0xFFD
  3488                           pclath	equ	0xFFA
  3489                           tblptru	equ	0xFF8
  3490                           tblptrh	equ	0xFF7
  3491                           tblptrl	equ	0xFF6
  3492                           tablat	equ	0xFF5
  3493                           prodh	equ	0xFF4
  3494                           prodl	equ	0xFF3
  3495                           postinc0	equ	0xFEE
  3496                           wreg	equ	0xFE8
  3497                           postdec1	equ	0xFE5
  3498                           fsr1l	equ	0xFE1
  3499                           indf2	equ	0xFDF
  3500                           postinc2	equ	0xFDE
  3501                           fsr2h	equ	0xFDA
  3502                           fsr2l	equ	0xFD9
  3503                           status	equ	0xFD8
  3504                           
  3505 ;; *************** function _GetMcuRunTime *****************
  3506 ;; Defined at:
  3507 ;;		line 92 in file "SystemStatus.c"
  3508 ;; Parameters:    Size  Location     Type
  3509 ;;		None
  3510 ;; Auto vars:     Size  Location     Type
  3511 ;;  idx             2   13[BANK0 ] int 
  3512 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  3513 ;;  tempRunTime     4    9[BANK0 ] unsigned long 
  3514 ;; Return value:  Size  Location     Type
  3515 ;;                  1    wreg      void 
  3516 ;; Registers used:
  3517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3518 ;; Tracked objects:
  3519 ;;		On entry : 0/0
  3520 ;;		On exit  : 0/0
  3521 ;;		Unchanged: 0/0
  3522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3523 ;;      Params:         0       0       0       0       0       0       0
  3524 ;;      Locals:         0      15       0       0       0       0       0
  3525 ;;      Temps:          2       0       0       0       0       0       0
  3526 ;;      Totals:         2      15       0       0       0       0       0
  3527 ;;Total ram usage:       17 bytes
  3528 ;; Hardware stack levels used:    1
  3529 ;; Hardware stack levels required when called:    5
  3530 ;; This function calls:
  3531 ;;		_WriteUartMessage
  3532 ;;		___lldiv
  3533 ;;		___llmod
  3534 ;;		_crc8
  3535 ;; This function is called by:
  3536 ;;		_GroupStatusAndVersion
  3537 ;; This function uses a non-reentrant model
  3538 ;;
  3539                           
  3540                           	psect	text14
  3541  001ADE                     __ptext14:
  3542                           	opt stack 0
  3543  001ADE                     _GetMcuRunTime:
  3544                           	opt stack 23
  3545                           
  3546                           ;SystemStatus.c: 95: char TxMsg[(0x4) + (0x4) + 1];
  3547                           ;SystemStatus.c: 98: TxMsg[(0)] = (0x24);
  3548                           
  3549                           ;incstack = 0
  3550  001ADE  0E24               	movlw	36
  3551  001AE0  0100               	movlb	0	; () banked
  3552  001AE2  6F60               	movwf	GetMcuRunTime@TxMsg& (0+255),b
  3553                           
  3554                           ;SystemStatus.c: 99: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  3555  001AE4  0E02               	movlw	2
  3556  001AE6  6F61               	movwf	(GetMcuRunTime@TxMsg+1)& (0+255),b
  3557                           
  3558                           ;SystemStatus.c: 100: TxMsg[(2)] = STATUS_MCU_RUN_TIME;
  3559  001AE8  0E21               	movlw	33
  3560  001AEA  6F62               	movwf	(GetMcuRunTime@TxMsg+2)& (0+255),b
  3561                           
  3562                           ;SystemStatus.c: 101: TxMsg[(3)] = (0x4);
  3563  001AEC  0E04               	movlw	4
  3564  001AEE  6F63               	movwf	(GetMcuRunTime@TxMsg+3)& (0+255),b
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;SystemStatus.c: 103: uint32_t tempRunTime = mcuRunTimeIn5SecTicks;
  3568  001AF0  C0C1  F069         	movff	_mcuRunTimeIn5SecTicks,GetMcuRunTime@tempRunTime
  3569  001AF4  C0C2  F06A         	movff	_mcuRunTimeIn5SecTicks+1,GetMcuRunTime@tempRunTime+1
  3570  001AF8  C0C3  F06B         	movff	_mcuRunTimeIn5SecTicks+2,GetMcuRunTime@tempRunTime+2
  3571  001AFC  C0C4  F06C         	movff	_mcuRunTimeIn5SecTicks+3,GetMcuRunTime@tempRunTime+3
  3572                           
  3573                           ;SystemStatus.c: 106: for(int idx = 0; idx < (0x4); idx++)
  3574  001B00  0E00               	movlw	0
  3575  001B02  6F6E               	movwf	(GetMcuRunTime@idx+1)& (0+255),b
  3576  001B04  0E00               	movlw	0
  3577  001B06  6F6D               	movwf	GetMcuRunTime@idx& (0+255),b
  3578  001B08                     l7491:
  3579                           
  3580                           ; BSR set to: 0
  3581  001B08  BF6E               	btfsc	(GetMcuRunTime@idx+1)& (0+255),7,b
  3582  001B0A  D006               	goto	l1327
  3583  001B0C  516E               	movf	(GetMcuRunTime@idx+1)& (0+255),w,b
  3584  001B0E  E142               	bnz	l7503
  3585  001B10  0E04               	movlw	4
  3586  001B12  5D6D               	subwf	GetMcuRunTime@idx& (0+255),w,b
  3587  001B14  B0D8               	btfsc	status,0,c
  3588  001B16  D03E               	goto	u7500
  3589  001B18                     l1327:
  3590                           
  3591                           ; BSR set to: 0
  3592                           ;SystemStatus.c: 107: {
  3593                           ;SystemStatus.c: 108: TxMsg[(0x4) + idx] = tempRunTime % 10;
  3594                           
  3595                           ; BSR set to: 0
  3596  001B18  0E04               	movlw	4
  3597  001B1A  256D               	addwf	GetMcuRunTime@idx& (0+255),w,b
  3598  001B1C  6E25               	movwf	??_GetMcuRunTime& (0+255),c
  3599  001B1E  0E00               	movlw	0
  3600  001B20  216E               	addwfc	(GetMcuRunTime@idx+1)& (0+255),w,b
  3601  001B22  6E26               	movwf	(??_GetMcuRunTime+1)& (0+255),c
  3602  001B24  0E60               	movlw	low GetMcuRunTime@TxMsg
  3603  001B26  2425               	addwf	??_GetMcuRunTime,w,c
  3604  001B28  6ED9               	movwf	fsr2l,c
  3605  001B2A  0E00               	movlw	high GetMcuRunTime@TxMsg
  3606  001B2C  2026               	addwfc	??_GetMcuRunTime+1,w,c
  3607  001B2E  6EDA               	movwf	fsr2h,c
  3608  001B30  C069  F018         	movff	GetMcuRunTime@tempRunTime,___llmod@dividend
  3609  001B34  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___llmod@dividend+1
  3610  001B38  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___llmod@dividend+2
  3611  001B3C  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___llmod@dividend+3
  3612  001B40  0E0A               	movlw	10
  3613  001B42  6E1C               	movwf	___llmod@divisor,c
  3614  001B44  0E00               	movlw	0
  3615  001B46  6E1D               	movwf	___llmod@divisor+1,c
  3616  001B48  0E00               	movlw	0
  3617  001B4A  6E1E               	movwf	___llmod@divisor+2,c
  3618  001B4C  0E00               	movlw	0
  3619  001B4E  6E1F               	movwf	___llmod@divisor+3,c
  3620  001B50  ECFD  F013         	call	___llmod	;wreg free
  3621  001B54  5018               	movf	?___llmod,w,c
  3622  001B56  6EDF               	movwf	indf2,c
  3623                           
  3624                           ;SystemStatus.c: 109: tempRunTime /= 10;
  3625  001B58  C069  F018         	movff	GetMcuRunTime@tempRunTime,___lldiv@dividend
  3626  001B5C  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___lldiv@dividend+1
  3627  001B60  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___lldiv@dividend+2
  3628  001B64  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___lldiv@dividend+3
  3629  001B68  0E0A               	movlw	10
  3630  001B6A  6E1C               	movwf	___lldiv@divisor,c
  3631  001B6C  0E00               	movlw	0
  3632  001B6E  6E1D               	movwf	___lldiv@divisor+1,c
  3633  001B70  0E00               	movlw	0
  3634  001B72  6E1E               	movwf	___lldiv@divisor+2,c
  3635  001B74  0E00               	movlw	0
  3636  001B76  6E1F               	movwf	___lldiv@divisor+3,c
  3637  001B78  EC57  F012         	call	___lldiv	;wreg free
  3638  001B7C  C018  F069         	movff	?___lldiv,GetMcuRunTime@tempRunTime
  3639  001B80  C019  F06A         	movff	?___lldiv+1,GetMcuRunTime@tempRunTime+1
  3640  001B84  C01A  F06B         	movff	?___lldiv+2,GetMcuRunTime@tempRunTime+2
  3641  001B88  C01B  F06C         	movff	?___lldiv+3,GetMcuRunTime@tempRunTime+3
  3642  001B8C  0100               	movlb	0	; () banked
  3643  001B8E  4B6D               	infsnz	GetMcuRunTime@idx& (0+255),f,b
  3644  001B90  2B6E               	incf	(GetMcuRunTime@idx+1)& (0+255),f,b
  3645  001B92  D7BA               	goto	l7491
  3646  001B94                     u7500:
  3647  001B94                     l7503:
  3648                           
  3649                           ; BSR set to: 0
  3650                           ;SystemStatus.c: 110: }
  3651                           ;SystemStatus.c: 112: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  3652  001B94  0E60               	movlw	low GetMcuRunTime@TxMsg
  3653  001B96  6E18               	movwf	crc8@dataArray,c
  3654  001B98  0E00               	movlw	high GetMcuRunTime@TxMsg
  3655  001B9A  6E19               	movwf	crc8@dataArray+1,c
  3656  001B9C  0E00               	movlw	0
  3657  001B9E  6E1B               	movwf	crc8@dataSize+1,c
  3658  001BA0  0E08               	movlw	8
  3659  001BA2  6E1A               	movwf	crc8@dataSize,c
  3660  001BA4  EC49  F017         	call	_crc8	;wreg free
  3661  001BA8  0100               	movlb	0	; () banked
  3662  001BAA  6F68               	movwf	(GetMcuRunTime@TxMsg+8)& (0+255),b
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;SystemStatus.c: 114: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  3666  001BAC  0E60               	movlw	low GetMcuRunTime@TxMsg
  3667  001BAE  6E19               	movwf	WriteUartMessage@dataBuf,c
  3668  001BB0  0E00               	movlw	high GetMcuRunTime@TxMsg
  3669  001BB2  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  3670  001BB4  0E00               	movlw	0
  3671  001BB6  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  3672  001BB8  0E09               	movlw	9
  3673  001BBA  6E1B               	movwf	WriteUartMessage@dataSize,c
  3674  001BBC  EC9E  F019         	call	_WriteUartMessage	;wreg free
  3675  001BC0  0012               	return		;funcret
  3676  001BC2                     __end_of_GetMcuRunTime:
  3677                           	opt stack 0
  3678                           tosu	equ	0xFFF
  3679                           tosh	equ	0xFFE
  3680                           tosl	equ	0xFFD
  3681                           pclath	equ	0xFFA
  3682                           tblptru	equ	0xFF8
  3683                           tblptrh	equ	0xFF7
  3684                           tblptrl	equ	0xFF6
  3685                           tablat	equ	0xFF5
  3686                           prodh	equ	0xFF4
  3687                           prodl	equ	0xFF3
  3688                           postinc0	equ	0xFEE
  3689                           wreg	equ	0xFE8
  3690                           postdec1	equ	0xFE5
  3691                           fsr1l	equ	0xFE1
  3692                           indf2	equ	0xFDF
  3693                           postinc2	equ	0xFDE
  3694                           fsr2h	equ	0xFDA
  3695                           fsr2l	equ	0xFD9
  3696                           status	equ	0xFD8
  3697                           
  3698 ;; *************** function ___lldiv *****************
  3699 ;; Defined at:
  3700 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  3701 ;; Parameters:    Size  Location     Type
  3702 ;;  dividend        4   23[COMRAM] unsigned long 
  3703 ;;  divisor         4   27[COMRAM] unsigned long 
  3704 ;; Auto vars:     Size  Location     Type
  3705 ;;  quotient        4   31[COMRAM] unsigned long 
  3706 ;;  counter         1   35[COMRAM] unsigned char 
  3707 ;; Return value:  Size  Location     Type
  3708 ;;                  4   23[COMRAM] unsigned long 
  3709 ;; Registers used:
  3710 ;;		wreg, status,2, status,0
  3711 ;; Tracked objects:
  3712 ;;		On entry : 0/0
  3713 ;;		On exit  : 0/0
  3714 ;;		Unchanged: 0/0
  3715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3716 ;;      Params:         8       0       0       0       0       0       0
  3717 ;;      Locals:         5       0       0       0       0       0       0
  3718 ;;      Temps:          0       0       0       0       0       0       0
  3719 ;;      Totals:        13       0       0       0       0       0       0
  3720 ;;Total ram usage:       13 bytes
  3721 ;; Hardware stack levels used:    1
  3722 ;; Hardware stack levels required when called:    3
  3723 ;; This function calls:
  3724 ;;		Nothing
  3725 ;; This function is called by:
  3726 ;;		_GetMcuRunTime
  3727 ;; This function uses a non-reentrant model
  3728 ;;
  3729                           
  3730                           	psect	text15
  3731  0024AE                     __ptext15:
  3732                           	opt stack 0
  3733  0024AE                     ___lldiv:
  3734                           	opt stack 24
  3735                           
  3736                           ;incstack = 0
  3737  0024AE  0E00               	movlw	0
  3738  0024B0  6E20               	movwf	___lldiv@quotient,c
  3739  0024B2  0E00               	movlw	0
  3740  0024B4  6E21               	movwf	___lldiv@quotient+1,c
  3741  0024B6  0E00               	movlw	0
  3742  0024B8  6E22               	movwf	___lldiv@quotient+2,c
  3743  0024BA  0E00               	movlw	0
  3744  0024BC  6E23               	movwf	___lldiv@quotient+3,c
  3745  0024BE  501C               	movf	___lldiv@divisor,w,c
  3746  0024C0  101D               	iorwf	___lldiv@divisor+1,w,c
  3747  0024C2  101E               	iorwf	___lldiv@divisor+2,w,c
  3748  0024C4  101F               	iorwf	___lldiv@divisor+3,w,c
  3749  0024C6  B4D8               	btfsc	status,2,c
  3750  0024C8  D02A               	goto	l1754
  3751  0024CA  0E01               	movlw	1
  3752  0024CC  6E24               	movwf	___lldiv@counter,c
  3753  0024CE  D006               	goto	l1749
  3754  0024D0  90D8               	bcf	status,0,c
  3755  0024D2  361C               	rlcf	___lldiv@divisor,f,c
  3756  0024D4  361D               	rlcf	___lldiv@divisor+1,f,c
  3757  0024D6  361E               	rlcf	___lldiv@divisor+2,f,c
  3758  0024D8  361F               	rlcf	___lldiv@divisor+3,f,c
  3759  0024DA  2A24               	incf	___lldiv@counter,f,c
  3760  0024DC                     l1749:
  3761  0024DC  AE1F               	btfss	___lldiv@divisor+3,7,c
  3762  0024DE  D7F8               	goto	l1750
  3763  0024E0                     u6960:
  3764  0024E0  90D8               	bcf	status,0,c
  3765  0024E2  3620               	rlcf	___lldiv@quotient,f,c
  3766  0024E4  3621               	rlcf	___lldiv@quotient+1,f,c
  3767  0024E6  3622               	rlcf	___lldiv@quotient+2,f,c
  3768  0024E8  3623               	rlcf	___lldiv@quotient+3,f,c
  3769  0024EA  501C               	movf	___lldiv@divisor,w,c
  3770  0024EC  5C18               	subwf	___lldiv@dividend,w,c
  3771  0024EE  501D               	movf	___lldiv@divisor+1,w,c
  3772  0024F0  5819               	subwfb	___lldiv@dividend+1,w,c
  3773  0024F2  501E               	movf	___lldiv@divisor+2,w,c
  3774  0024F4  581A               	subwfb	___lldiv@dividend+2,w,c
  3775  0024F6  501F               	movf	___lldiv@divisor+3,w,c
  3776  0024F8  581B               	subwfb	___lldiv@dividend+3,w,c
  3777  0024FA  A0D8               	btfss	status,0,c
  3778  0024FC  D009               	goto	l1753
  3779  0024FE  501C               	movf	___lldiv@divisor,w,c
  3780  002500  5E18               	subwf	___lldiv@dividend,f,c
  3781  002502  501D               	movf	___lldiv@divisor+1,w,c
  3782  002504  5A19               	subwfb	___lldiv@dividend+1,f,c
  3783  002506  501E               	movf	___lldiv@divisor+2,w,c
  3784  002508  5A1A               	subwfb	___lldiv@dividend+2,f,c
  3785  00250A  501F               	movf	___lldiv@divisor+3,w,c
  3786  00250C  5A1B               	subwfb	___lldiv@dividend+3,f,c
  3787  00250E  8020               	bsf	___lldiv@quotient,0,c
  3788  002510                     l1753:
  3789  002510  90D8               	bcf	status,0,c
  3790  002512  321F               	rrcf	___lldiv@divisor+3,f,c
  3791  002514  321E               	rrcf	___lldiv@divisor+2,f,c
  3792  002516  321D               	rrcf	___lldiv@divisor+1,f,c
  3793  002518  321C               	rrcf	___lldiv@divisor,f,c
  3794  00251A  2E24               	decfsz	___lldiv@counter,f,c
  3795  00251C  D7E1               	goto	u6960
  3796  00251E                     l1754:
  3797  00251E  C020  F018         	movff	___lldiv@quotient,?___lldiv
  3798  002522  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  3799  002526  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  3800  00252A  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  3801  00252E  0012               	return		;funcret
  3802  002530                     __end_of___lldiv:
  3803                           	opt stack 0
  3804                           tosu	equ	0xFFF
  3805                           tosh	equ	0xFFE
  3806                           tosl	equ	0xFFD
  3807                           pclath	equ	0xFFA
  3808                           tblptru	equ	0xFF8
  3809                           tblptrh	equ	0xFF7
  3810                           tblptrl	equ	0xFF6
  3811                           tablat	equ	0xFF5
  3812                           prodh	equ	0xFF4
  3813                           prodl	equ	0xFF3
  3814                           postinc0	equ	0xFEE
  3815                           wreg	equ	0xFE8
  3816                           postdec1	equ	0xFE5
  3817                           fsr1l	equ	0xFE1
  3818                           indf2	equ	0xFDF
  3819                           postinc2	equ	0xFDE
  3820                           fsr2h	equ	0xFDA
  3821                           fsr2l	equ	0xFD9
  3822                           status	equ	0xFD8
  3823                           
  3824 ;; *************** function _GetMcuFwVersion *****************
  3825 ;; Defined at:
  3826 ;;		line 26 in file "SystemStatus.c"
  3827 ;; Parameters:    Size  Location     Type
  3828 ;;		None
  3829 ;; Auto vars:     Size  Location     Type
  3830 ;;  idx             1   46[COMRAM] unsigned char 
  3831 ;;  TxMsg           9   37[COMRAM] unsigned char [9]
  3832 ;; Return value:  Size  Location     Type
  3833 ;;                  1    wreg      void 
  3834 ;; Registers used:
  3835 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3836 ;; Tracked objects:
  3837 ;;		On entry : 0/0
  3838 ;;		On exit  : 0/0
  3839 ;;		Unchanged: 0/0
  3840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3841 ;;      Params:         0       0       0       0       0       0       0
  3842 ;;      Locals:        10       0       0       0       0       0       0
  3843 ;;      Temps:          2       0       0       0       0       0       0
  3844 ;;      Totals:        12       0       0       0       0       0       0
  3845 ;;Total ram usage:       12 bytes
  3846 ;; Hardware stack levels used:    1
  3847 ;; Hardware stack levels required when called:    5
  3848 ;; This function calls:
  3849 ;;		_EepromRead
  3850 ;;		_WriteUartMessage
  3851 ;;		_ZeroArray
  3852 ;;		_crc8
  3853 ;; This function is called by:
  3854 ;;		_GroupStatusAndVersion
  3855 ;; This function uses a non-reentrant model
  3856 ;;
  3857                           
  3858                           	psect	text16
  3859  002530                     __ptext16:
  3860                           	opt stack 0
  3861  002530                     _GetMcuFwVersion:
  3862                           	opt stack 23
  3863                           
  3864                           ;SystemStatus.c: 29: char TxMsg[(0x4) + (0x4) + 1];
  3865                           ;SystemStatus.c: 30: ZeroArray(TxMsg, (0x4) + (0x4) + 1);
  3866                           
  3867                           ;incstack = 0
  3868  002530  0E26               	movlw	low GetMcuFwVersion@TxMsg
  3869  002532  6E20               	movwf	ZeroArray@array,c
  3870  002534  0E00               	movlw	high GetMcuFwVersion@TxMsg
  3871  002536  6E21               	movwf	ZeroArray@array+1,c
  3872  002538  0E00               	movlw	0
  3873  00253A  6E23               	movwf	ZeroArray@size+1,c
  3874  00253C  0E09               	movlw	9
  3875  00253E  6E22               	movwf	ZeroArray@size,c
  3876  002540  ECFE  F01A         	call	_ZeroArray	;wreg free
  3877                           
  3878                           ;SystemStatus.c: 33: TxMsg[(0)] = (0x24);
  3879  002544  0E24               	movlw	36
  3880  002546  6E26               	movwf	GetMcuFwVersion@TxMsg,c
  3881                           
  3882                           ;SystemStatus.c: 34: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  3883  002548  0E02               	movlw	2
  3884  00254A  6E27               	movwf	GetMcuFwVersion@TxMsg+1,c
  3885                           
  3886                           ;SystemStatus.c: 35: TxMsg[(2)] = STATUS_GET_MCU_FW_VERSION;
  3887  00254C  0E22               	movlw	34
  3888  00254E  6E28               	movwf	GetMcuFwVersion@TxMsg+2,c
  3889                           
  3890                           ;SystemStatus.c: 36: TxMsg[(3)] = (0x4);
  3891  002550  0E04               	movlw	4
  3892  002552  6E29               	movwf	GetMcuFwVersion@TxMsg+3,c
  3893                           
  3894                           ;SystemStatus.c: 39: for(uint8_t idx = 0; idx < (0x4); idx++)
  3895  002554  0E00               	movlw	0
  3896  002556  6E2F               	movwf	GetMcuFwVersion@idx,c
  3897  002558                     l7419:
  3898  002558  0E03               	movlw	3
  3899  00255A  642F               	cpfsgt	GetMcuFwVersion@idx,c
  3900  00255C  D001               	goto	l1306
  3901  00255E  D013               	goto	u7420
  3902  002560                     l1306:
  3903                           
  3904                           ;SystemStatus.c: 40: {
  3905                           ;SystemStatus.c: 41: TxMsg[(0x4) + idx] = EepromRead(idx);
  3906  002560  502F               	movf	GetMcuFwVersion@idx,w,c
  3907  002562  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  3908  002564  6A25               	clrf	(??_GetMcuFwVersion+1)& (0+255),c
  3909  002566  0E04               	movlw	4
  3910  002568  2624               	addwf	??_GetMcuFwVersion,f,c
  3911  00256A  0E00               	movlw	0
  3912  00256C  2225               	addwfc	??_GetMcuFwVersion+1,f,c
  3913  00256E  0E26               	movlw	low GetMcuFwVersion@TxMsg
  3914  002570  2424               	addwf	??_GetMcuFwVersion,w,c
  3915  002572  6ED9               	movwf	fsr2l,c
  3916  002574  0E00               	movlw	high GetMcuFwVersion@TxMsg
  3917  002576  2025               	addwfc	??_GetMcuFwVersion+1,w,c
  3918  002578  6EDA               	movwf	fsr2h,c
  3919  00257A  502F               	movf	GetMcuFwVersion@idx,w,c
  3920  00257C  ECD4  F01B         	call	_EepromRead
  3921  002580  6EDF               	movwf	indf2,c
  3922  002582  2A2F               	incf	GetMcuFwVersion@idx,f,c
  3923  002584  D7E9               	goto	l7419
  3924  002586                     u7420:
  3925                           
  3926                           ;SystemStatus.c: 42: }
  3927                           ;SystemStatus.c: 44: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  3928  002586  0E26               	movlw	low GetMcuFwVersion@TxMsg
  3929  002588  6E18               	movwf	crc8@dataArray,c
  3930  00258A  0E00               	movlw	high GetMcuFwVersion@TxMsg
  3931  00258C  6E19               	movwf	crc8@dataArray+1,c
  3932  00258E  0E00               	movlw	0
  3933  002590  6E1B               	movwf	crc8@dataSize+1,c
  3934  002592  0E08               	movlw	8
  3935  002594  6E1A               	movwf	crc8@dataSize,c
  3936  002596  EC49  F017         	call	_crc8	;wreg free
  3937  00259A  6E2E               	movwf	GetMcuFwVersion@TxMsg+8,c
  3938                           
  3939                           ;SystemStatus.c: 46: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  3940  00259C  0E26               	movlw	low GetMcuFwVersion@TxMsg
  3941  00259E  6E19               	movwf	WriteUartMessage@dataBuf,c
  3942  0025A0  0E00               	movlw	high GetMcuFwVersion@TxMsg
  3943  0025A2  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  3944  0025A4  0E00               	movlw	0
  3945  0025A6  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  3946  0025A8  0E09               	movlw	9
  3947  0025AA  6E1B               	movwf	WriteUartMessage@dataSize,c
  3948  0025AC  EC9E  F019         	call	_WriteUartMessage	;wreg free
  3949  0025B0  0012               	return		;funcret
  3950  0025B2                     __end_of_GetMcuFwVersion:
  3951                           	opt stack 0
  3952                           tosu	equ	0xFFF
  3953                           tosh	equ	0xFFE
  3954                           tosl	equ	0xFFD
  3955                           pclath	equ	0xFFA
  3956                           tblptru	equ	0xFF8
  3957                           tblptrh	equ	0xFF7
  3958                           tblptrl	equ	0xFF6
  3959                           tablat	equ	0xFF5
  3960                           prodh	equ	0xFF4
  3961                           prodl	equ	0xFF3
  3962                           postinc0	equ	0xFEE
  3963                           wreg	equ	0xFE8
  3964                           postdec1	equ	0xFE5
  3965                           fsr1l	equ	0xFE1
  3966                           indf2	equ	0xFDF
  3967                           postinc2	equ	0xFDE
  3968                           fsr2h	equ	0xFDA
  3969                           fsr2l	equ	0xFD9
  3970                           status	equ	0xFD8
  3971                           
  3972 ;; *************** function _GetCpldFwVersion *****************
  3973 ;; Defined at:
  3974 ;;		line 58 in file "SystemStatus.c"
  3975 ;; Parameters:    Size  Location     Type
  3976 ;;		None
  3977 ;; Auto vars:     Size  Location     Type
  3978 ;;  idx             2   46[COMRAM] int 
  3979 ;;  TxMsg           9   37[COMRAM] unsigned char [9]
  3980 ;; Return value:  Size  Location     Type
  3981 ;;                  1    wreg      void 
  3982 ;; Registers used:
  3983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3989 ;;      Params:         0       0       0       0       0       0       0
  3990 ;;      Locals:        11       0       0       0       0       0       0
  3991 ;;      Temps:          2       0       0       0       0       0       0
  3992 ;;      Totals:        13       0       0       0       0       0       0
  3993 ;;Total ram usage:       13 bytes
  3994 ;; Hardware stack levels used:    1
  3995 ;; Hardware stack levels required when called:    5
  3996 ;; This function calls:
  3997 ;;		_EepromRead
  3998 ;;		_WriteUartMessage
  3999 ;;		_ZeroArray
  4000 ;;		_crc8
  4001 ;; This function is called by:
  4002 ;;		_GroupStatusAndVersion
  4003 ;; This function uses a non-reentrant model
  4004 ;;
  4005                           
  4006                           	psect	text17
  4007  0022FE                     __ptext17:
  4008                           	opt stack 0
  4009  0022FE                     _GetCpldFwVersion:
  4010                           	opt stack 23
  4011                           
  4012                           ;SystemStatus.c: 61: char TxMsg[(0x4) + (0x4) + 1];
  4013                           ;SystemStatus.c: 62: ZeroArray(TxMsg, (0x4) + (0x4) + 1);
  4014                           
  4015                           ;incstack = 0
  4016  0022FE  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4017  002300  6E20               	movwf	ZeroArray@array,c
  4018  002302  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4019  002304  6E21               	movwf	ZeroArray@array+1,c
  4020  002306  0E00               	movlw	0
  4021  002308  6E23               	movwf	ZeroArray@size+1,c
  4022  00230A  0E09               	movlw	9
  4023  00230C  6E22               	movwf	ZeroArray@size,c
  4024  00230E  ECFE  F01A         	call	_ZeroArray	;wreg free
  4025                           
  4026                           ;SystemStatus.c: 65: TxMsg[(0)] = (0x24);
  4027  002312  0E24               	movlw	36
  4028  002314  6E26               	movwf	GetCpldFwVersion@TxMsg,c
  4029                           
  4030                           ;SystemStatus.c: 66: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4031  002316  0E02               	movlw	2
  4032  002318  6E27               	movwf	GetCpldFwVersion@TxMsg+1,c
  4033                           
  4034                           ;SystemStatus.c: 67: TxMsg[(2)] = STATUS_GET_CPLD_FW_VERSION;
  4035  00231A  0E23               	movlw	35
  4036  00231C  6E28               	movwf	GetCpldFwVersion@TxMsg+2,c
  4037                           
  4038                           ;SystemStatus.c: 68: TxMsg[(3)] = (0x4);
  4039  00231E  0E04               	movlw	4
  4040  002320  6E29               	movwf	GetCpldFwVersion@TxMsg+3,c
  4041                           
  4042                           ;SystemStatus.c: 71: for(int idx = 0; idx < (0x4); idx++)
  4043  002322  0E00               	movlw	0
  4044  002324  6E30               	movwf	GetCpldFwVersion@idx+1,c
  4045  002326  0E00               	movlw	0
  4046  002328  6E2F               	movwf	GetCpldFwVersion@idx,c
  4047  00232A                     l7459:
  4048  00232A  BE30               	btfsc	GetCpldFwVersion@idx+1,7,c
  4049  00232C  D006               	goto	l1316
  4050  00232E  5030               	movf	GetCpldFwVersion@idx+1,w,c
  4051  002330  E118               	bnz	l7469
  4052  002332  0E04               	movlw	4
  4053  002334  5C2F               	subwf	GetCpldFwVersion@idx,w,c
  4054  002336  B0D8               	btfsc	status,0,c
  4055  002338  D014               	goto	u7460
  4056  00233A                     l1316:
  4057                           
  4058                           ;SystemStatus.c: 72: {
  4059                           ;SystemStatus.c: 73: TxMsg[(0x4) + idx] = EepromRead((0x4) + idx);
  4060  00233A  0E04               	movlw	4
  4061  00233C  242F               	addwf	GetCpldFwVersion@idx,w,c
  4062  00233E  6E24               	movwf	??_GetCpldFwVersion& (0+255),c
  4063  002340  0E00               	movlw	0
  4064  002342  2030               	addwfc	GetCpldFwVersion@idx+1,w,c
  4065  002344  6E25               	movwf	(??_GetCpldFwVersion+1)& (0+255),c
  4066  002346  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4067  002348  2424               	addwf	??_GetCpldFwVersion,w,c
  4068  00234A  6ED9               	movwf	fsr2l,c
  4069  00234C  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4070  00234E  2025               	addwfc	??_GetCpldFwVersion+1,w,c
  4071  002350  6EDA               	movwf	fsr2h,c
  4072  002352  502F               	movf	GetCpldFwVersion@idx,w,c
  4073  002354  0F04               	addlw	4
  4074  002356  ECD4  F01B         	call	_EepromRead
  4075  00235A  6EDF               	movwf	indf2,c
  4076  00235C  4A2F               	infsnz	GetCpldFwVersion@idx,f,c
  4077  00235E  2A30               	incf	GetCpldFwVersion@idx+1,f,c
  4078  002360  D7E4               	goto	l7459
  4079  002362                     u7460:
  4080  002362                     l7469:
  4081                           
  4082                           ;SystemStatus.c: 74: }
  4083                           ;SystemStatus.c: 76: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4084  002362  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4085  002364  6E18               	movwf	crc8@dataArray,c
  4086  002366  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4087  002368  6E19               	movwf	crc8@dataArray+1,c
  4088  00236A  0E00               	movlw	0
  4089  00236C  6E1B               	movwf	crc8@dataSize+1,c
  4090  00236E  0E08               	movlw	8
  4091  002370  6E1A               	movwf	crc8@dataSize,c
  4092  002372  EC49  F017         	call	_crc8	;wreg free
  4093  002376  6E2E               	movwf	GetCpldFwVersion@TxMsg+8,c
  4094                           
  4095                           ;SystemStatus.c: 78: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4096  002378  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4097  00237A  6E19               	movwf	WriteUartMessage@dataBuf,c
  4098  00237C  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4099  00237E  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4100  002380  0E00               	movlw	0
  4101  002382  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4102  002384  0E09               	movlw	9
  4103  002386  6E1B               	movwf	WriteUartMessage@dataSize,c
  4104  002388  EC9E  F019         	call	_WriteUartMessage	;wreg free
  4105  00238C  0012               	return		;funcret
  4106  00238E                     __end_of_GetCpldFwVersion:
  4107                           	opt stack 0
  4108                           tosu	equ	0xFFF
  4109                           tosh	equ	0xFFE
  4110                           tosl	equ	0xFFD
  4111                           pclath	equ	0xFFA
  4112                           tblptru	equ	0xFF8
  4113                           tblptrh	equ	0xFF7
  4114                           tblptrl	equ	0xFF6
  4115                           tablat	equ	0xFF5
  4116                           prodh	equ	0xFF4
  4117                           prodl	equ	0xFF3
  4118                           postinc0	equ	0xFEE
  4119                           wreg	equ	0xFE8
  4120                           postdec1	equ	0xFE5
  4121                           fsr1l	equ	0xFE1
  4122                           indf2	equ	0xFDF
  4123                           postinc2	equ	0xFDE
  4124                           fsr2h	equ	0xFDA
  4125                           fsr2l	equ	0xFD9
  4126                           status	equ	0xFD8
  4127                           
  4128 ;; *************** function _FlashReadUart *****************
  4129 ;; Defined at:
  4130 ;;		line 62 in file "FlashApp.c"
  4131 ;; Parameters:    Size  Location     Type
  4132 ;;  numOfSampleT    2   43[COMRAM] int 
  4133 ;; Auto vars:     Size  Location     Type
  4134 ;;  idx             2   91[BANK0 ] int 
  4135 ;;  TxMsg          69   12[BANK0 ] unsigned char [69]
  4136 ;;  offset          2   93[BANK0 ] int 
  4137 ;;  j               2   89[BANK0 ] int 
  4138 ;; Return value:  Size  Location     Type
  4139 ;;                  1    wreg      void 
  4140 ;; Registers used:
  4141 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4142 ;; Tracked objects:
  4143 ;;		On entry : 0/0
  4144 ;;		On exit  : 0/0
  4145 ;;		Unchanged: 0/0
  4146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4147 ;;      Params:         2       0       0       0       0       0       0
  4148 ;;      Locals:         0      83       0       0       0       0       0
  4149 ;;      Temps:          0      12       0       0       0       0       0
  4150 ;;      Totals:         2      95       0       0       0       0       0
  4151 ;;Total ram usage:       97 bytes
  4152 ;; Hardware stack levels used:    1
  4153 ;; Hardware stack levels required when called:    6
  4154 ;; This function calls:
  4155 ;;		_FLASH_IsWriteDone
  4156 ;;		_FLASH_ReadByte
  4157 ;;		_SendAckMessage
  4158 ;;		_WriteUartMessage
  4159 ;;		_ZeroArray
  4160 ;;		_abs
  4161 ;;		_crc8
  4162 ;; This function is called by:
  4163 ;;		_GroupFlashMemory
  4164 ;; This function uses a non-reentrant model
  4165 ;;
  4166                           
  4167                           	psect	text18
  4168  00067A                     __ptext18:
  4169                           	opt stack 0
  4170  00067A                     _FlashReadUart:
  4171                           	opt stack 22
  4172                           
  4173                           ;FlashApp.c: 65: int j=0;
  4174                           
  4175                           ;incstack = 0
  4176  00067A  0E00               	movlw	0
  4177  00067C  0100               	movlb	0	; () banked
  4178  00067E  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  4179  000680  0E00               	movlw	0
  4180  000682  6FB9               	movwf	FlashReadUart@j& (0+255),b
  4181                           
  4182                           ;FlashApp.c: 66: int offset = 0;
  4183  000684  0E00               	movlw	0
  4184  000686  6FBE               	movwf	(FlashReadUart@offset+1)& (0+255),b
  4185  000688  0E00               	movlw	0
  4186  00068A  6FBD               	movwf	FlashReadUart@offset& (0+255),b
  4187                           
  4188                           ; BSR set to: 0
  4189                           ;FlashApp.c: 67: char TxMsg[(64) + (0x4) + 1];
  4190                           ;FlashApp.c: 68: ZeroArray(TxMsg, (64) + (0x4) + 1);
  4191  00068C  0E6C               	movlw	low FlashReadUart@TxMsg
  4192  00068E  6E20               	movwf	ZeroArray@array,c
  4193  000690  0E00               	movlw	high FlashReadUart@TxMsg
  4194  000692  6E21               	movwf	ZeroArray@array+1,c
  4195  000694  0E00               	movlw	0
  4196  000696  6E23               	movwf	ZeroArray@size+1,c
  4197  000698  0E45               	movlw	69
  4198  00069A  6E22               	movwf	ZeroArray@size,c
  4199  00069C  ECFE  F01A         	call	_ZeroArray	;wreg free
  4200                           
  4201                           ;FlashApp.c: 71: if (FLASH_IsWriteDone() == 0)
  4202  0006A0  ECA5  F01B         	call	_FLASH_IsWriteDone	;wreg free
  4203  0006A4  0900               	iorlw	0
  4204  0006A6  B4D8               	btfsc	status,2,c
  4205  0006A8  0012               	return	
  4206                           
  4207                           ;FlashApp.c: 74: }
  4208                           ;FlashApp.c: 76: if (numOfReadSamples)
  4209                           
  4210                           ;FlashApp.c: 72: {
  4211                           ;FlashApp.c: 73: return;
  4212  0006AA  503E               	movf	_numOfReadSamples,w,c
  4213  0006AC  103F               	iorwf	_numOfReadSamples+1,w,c
  4214  0006AE  1040               	iorwf	_numOfReadSamples+2,w,c
  4215  0006B0  1041               	iorwf	_numOfReadSamples+3,w,c
  4216  0006B2  B4D8               	btfsc	status,2,c
  4217  0006B4  D0EE               	goto	l290
  4218                           
  4219                           ;FlashApp.c: 77: {
  4220                           ;FlashApp.c: 78: if (numOfValidateSamples)
  4221  0006B6  5031               	movf	_numOfValidateSamples,w,c
  4222  0006B8  1032               	iorwf	_numOfValidateSamples+1,w,c
  4223  0006BA  1033               	iorwf	_numOfValidateSamples+2,w,c
  4224  0006BC  1034               	iorwf	_numOfValidateSamples+3,w,c
  4225  0006BE  B4D8               	btfsc	status,2,c
  4226  0006C0  D09A               	goto	l291
  4227                           
  4228                           ;FlashApp.c: 79: {
  4229                           ;FlashApp.c: 80: offset = numOfValidateSamples - (numOfValidateSamples > numOfSampleToRe
      +                          ad)? numOfValidateSamples : numOfSampleToRead;
  4230  0006C2  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4231  0006C6  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4232  0006CA  0E00               	movlw	0
  4233  0006CC  0100               	movlb	0	; () banked
  4234  0006CE  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4235  0006D0  0EFF               	movlw	255
  4236  0006D2  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  4237  0006D4  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  4238  0006D6  5031               	movf	_numOfValidateSamples,w,c
  4239  0006D8  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  4240  0006DA  5032               	movf	_numOfValidateSamples+1,w,c
  4241  0006DC  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  4242  0006DE  5033               	movf	_numOfValidateSamples+2,w,c
  4243  0006E0  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  4244  0006E2  5034               	movf	_numOfValidateSamples+3,w,c
  4245  0006E4  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  4246  0006E6  B0D8               	btfsc	status,0,c
  4247  0006E8  D002               	goto	u7170
  4248  0006EA  0E01               	movlw	1
  4249  0006EC  D001               	goto	u7180
  4250  0006EE                     u7170:
  4251  0006EE  0E00               	movlw	0
  4252  0006F0                     u7180:
  4253  0006F0  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4254  0006F2  6B65               	clrf	(??_FlashReadUart+5)& (0+255),b
  4255  0006F4  6B66               	clrf	(??_FlashReadUart+6)& (0+255),b
  4256  0006F6  6B67               	clrf	(??_FlashReadUart+7)& (0+255),b
  4257  0006F8  1F64               	comf	(??_FlashReadUart+4)& (0+255),f,b
  4258  0006FA  1F65               	comf	(??_FlashReadUart+5)& (0+255),f,b
  4259  0006FC  1F66               	comf	(??_FlashReadUart+6)& (0+255),f,b
  4260  0006FE  1F67               	comf	(??_FlashReadUart+7)& (0+255),f,b
  4261  000700  2B64               	incf	(??_FlashReadUart+4)& (0+255),f,b
  4262  000702  0E00               	movlw	0
  4263  000704  2365               	addwfc	(??_FlashReadUart+5)& (0+255),f,b
  4264  000706  2366               	addwfc	(??_FlashReadUart+6)& (0+255),f,b
  4265  000708  2367               	addwfc	(??_FlashReadUart+7)& (0+255),f,b
  4266  00070A  5031               	movf	_numOfValidateSamples,w,c
  4267  00070C  2564               	addwf	(??_FlashReadUart+4)& (0+255),w,b
  4268  00070E  6F68               	movwf	(??_FlashReadUart+8)& (0+255),b
  4269  000710  5032               	movf	_numOfValidateSamples+1,w,c
  4270  000712  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  4271  000714  6F69               	movwf	(??_FlashReadUart+9)& (0+255),b
  4272  000716  5033               	movf	_numOfValidateSamples+2,w,c
  4273  000718  2166               	addwfc	(??_FlashReadUart+6)& (0+255),w,b
  4274  00071A  6F6A               	movwf	(??_FlashReadUart+10)& (0+255),b
  4275  00071C  5034               	movf	_numOfValidateSamples+3,w,c
  4276  00071E  2167               	addwfc	(??_FlashReadUart+7)& (0+255),w,b
  4277  000720  6F6B               	movwf	(??_FlashReadUart+11)& (0+255),b
  4278  000722  5168               	movf	(??_FlashReadUart+8)& (0+255),w,b
  4279  000724  1169               	iorwf	(??_FlashReadUart+9)& (0+255),w,b
  4280  000726  116A               	iorwf	(??_FlashReadUart+10)& (0+255),w,b
  4281  000728  116B               	iorwf	(??_FlashReadUart+11)& (0+255),w,b
  4282  00072A  A4D8               	btfss	status,2,c
  4283  00072C  D00A               	goto	l293
  4284                           
  4285                           ; BSR set to: 0
  4286  00072E  C02C  F0B1         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$565
  4287  000732  C02D  F0B2         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$565+1
  4288  000736  0E00               	movlw	0
  4289  000738  BFB2               	btfsc	(_FlashReadUart$565+1)& (0+255),7,b
  4290  00073A  0EFF               	movlw	-1
  4291  00073C  6FB3               	movwf	(_FlashReadUart$565+2)& (0+255),b
  4292  00073E  6FB4               	movwf	(_FlashReadUart$565+3)& (0+255),b
  4293  000740  D008               	goto	l295
  4294  000742                     l293:
  4295                           
  4296                           ; BSR set to: 0
  4297  000742  C031  F0B1         	movff	_numOfValidateSamples,_FlashReadUart$565
  4298  000746  C032  F0B2         	movff	_numOfValidateSamples+1,_FlashReadUart$565+1
  4299  00074A  C033  F0B3         	movff	_numOfValidateSamples+2,_FlashReadUart$565+2
  4300  00074E  C034  F0B4         	movff	_numOfValidateSamples+3,_FlashReadUart$565+3
  4301  000752                     l295:
  4302                           
  4303                           ; BSR set to: 0
  4304  000752  C0B1  F0BD         	movff	_FlashReadUart$565,FlashReadUart@offset
  4305  000756  C0B2  F0BE         	movff	_FlashReadUart$565+1,FlashReadUart@offset+1
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;FlashApp.c: 81: if(offset < 0)
  4309  00075A  AFBE               	btfss	(FlashReadUart@offset+1)& (0+255),7,b
  4310  00075C  D091               	goto	l298
  4311                           
  4312                           ; BSR set to: 0
  4313                           ;FlashApp.c: 82: {
  4314                           ;FlashApp.c: 83: if (abs(offset) > numOfReadSamples)
  4315  00075E  C0BD  F018         	movff	FlashReadUart@offset,abs@a
  4316  000762  C0BE  F019         	movff	FlashReadUart@offset+1,abs@a+1
  4317  000766  EC5E  F01A         	call	_abs	;wreg free
  4318  00076A  C018  F060         	movff	?_abs,??_FlashReadUart
  4319  00076E  C019  F061         	movff	?_abs+1,??_FlashReadUart+1
  4320  000772  0E00               	movlw	0
  4321  000774  0100               	movlb	0	; () banked
  4322  000776  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4323  000778  0EFF               	movlw	255
  4324  00077A  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  4325  00077C  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  4326  00077E  5160               	movf	??_FlashReadUart& (0+255),w,b
  4327  000780  5C3E               	subwf	_numOfReadSamples,w,c
  4328  000782  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  4329  000784  583F               	subwfb	_numOfReadSamples+1,w,c
  4330  000786  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  4331  000788  5840               	subwfb	_numOfReadSamples+2,w,c
  4332  00078A  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  4333  00078C  5841               	subwfb	_numOfReadSamples+3,w,c
  4334  00078E  B0D8               	btfsc	status,0,c
  4335  000790  D016               	goto	l297
  4336                           
  4337                           ; BSR set to: 0
  4338                           ;FlashApp.c: 84: {
  4339                           ;FlashApp.c: 85: numOfSampleToRead += offset + numOfReadSamples;
  4340  000792  503E               	movf	_numOfReadSamples,w,c
  4341  000794  25BD               	addwf	FlashReadUart@offset& (0+255),w,b
  4342  000796  6F60               	movwf	??_FlashReadUart& (0+255),b
  4343  000798  503F               	movf	_numOfReadSamples+1,w,c
  4344  00079A  21BE               	addwfc	(FlashReadUart@offset+1)& (0+255),w,b
  4345  00079C  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  4346  00079E  5160               	movf	??_FlashReadUart& (0+255),w,b
  4347  0007A0  262C               	addwf	FlashReadUart@numOfSampleToRead,f,c
  4348  0007A2  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  4349  0007A4  222D               	addwfc	FlashReadUart@numOfSampleToRead+1,f,c
  4350                           
  4351                           ; BSR set to: 0
  4352                           ;FlashApp.c: 86: offset = numOfReadSamples * (-1);
  4353  0007A6  C03E  F060         	movff	_numOfReadSamples,??_FlashReadUart
  4354  0007AA  C03F  F061         	movff	_numOfReadSamples+1,??_FlashReadUart+1
  4355  0007AE  1F60               	comf	??_FlashReadUart& (0+255),f,b
  4356  0007B0  1F61               	comf	(??_FlashReadUart+1)& (0+255),f,b
  4357  0007B2  4B60               	infsnz	??_FlashReadUart& (0+255),f,b
  4358  0007B4  2B61               	incf	(??_FlashReadUart+1)& (0+255),f,b
  4359  0007B6  C060  F0BD         	movff	??_FlashReadUart,FlashReadUart@offset
  4360  0007BA  C061  F0BE         	movff	??_FlashReadUart+1,FlashReadUart@offset+1
  4361  0007BE                     l297:
  4362                           
  4363                           ; BSR set to: 0
  4364                           ;FlashApp.c: 88: }
  4365                           ;FlashApp.c: 90: readAddress += offset * (64);
  4366  0007BE  C0BD  F060         	movff	FlashReadUart@offset,??_FlashReadUart
  4367  0007C2  C0BE  F061         	movff	FlashReadUart@offset+1,??_FlashReadUart+1
  4368  0007C6  0E06               	movlw	6
  4369  0007C8                     u7225:
  4370  0007C8  90D8               	bcf	status,0,c
  4371  0007CA  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  4372  0007CC  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  4373  0007CE  2EE8               	decfsz	wreg,f,c
  4374  0007D0  D7FB               	goto	u7225
  4375  0007D2  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  4376  0007D6  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  4377  0007DA  0E00               	movlw	0
  4378  0007DC  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4379  0007DE  0EFF               	movlw	255
  4380  0007E0  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4381  0007E2  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  4382  0007E4  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  4383  0007E6  27F9               	addwf	_readAddress& (0+255),f,b
  4384  0007E8  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  4385  0007EA  23FA               	addwfc	(_readAddress+1)& (0+255),f,b
  4386  0007EC  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  4387  0007EE  23FB               	addwfc	(_readAddress+2)& (0+255),f,b
  4388  0007F0  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  4389  0007F2  23FC               	addwfc	(_readAddress+3)& (0+255),f,b
  4390                           
  4391                           ; BSR set to: 0
  4392                           ;FlashApp.c: 91: }
  4393                           ;FlashApp.c: 92: }
  4394  0007F4  D045               	goto	l298
  4395  0007F6                     l291:
  4396                           
  4397                           ;FlashApp.c: 93: else
  4398                           ;FlashApp.c: 94: {
  4399                           ;FlashApp.c: 95: numOfSampleToRead = (numOfReadSamples > numOfSampleToRead)? numOfSample
      +                          ToRead : numOfReadSamples;
  4400                           
  4401                           ; BSR set to: 0
  4402  0007F6  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4403  0007FA  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4404  0007FE  0E00               	movlw	0
  4405  000800  0100               	movlb	0	; () banked
  4406  000802  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4407  000804  0EFF               	movlw	255
  4408  000806  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  4409  000808  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  4410  00080A  503E               	movf	_numOfReadSamples,w,c
  4411  00080C  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  4412  00080E  503F               	movf	_numOfReadSamples+1,w,c
  4413  000810  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  4414  000812  5040               	movf	_numOfReadSamples+2,w,c
  4415  000814  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  4416  000816  5041               	movf	_numOfReadSamples+3,w,c
  4417  000818  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  4418  00081A  A0D8               	btfss	status,0,c
  4419  00081C  D009               	goto	l300
  4420                           
  4421                           ; BSR set to: 0
  4422  00081E  C03E  F0B5         	movff	_numOfReadSamples,_FlashReadUart$566
  4423  000822  C03F  F0B6         	movff	_numOfReadSamples+1,_FlashReadUart$566+1
  4424  000826  C040  F0B7         	movff	_numOfReadSamples+2,_FlashReadUart$566+2
  4425  00082A  C041  F0B8         	movff	_numOfReadSamples+3,_FlashReadUart$566+3
  4426  00082E  D009               	goto	l302
  4427  000830                     l300:
  4428                           
  4429                           ; BSR set to: 0
  4430                           
  4431                           ; BSR set to: 0
  4432  000830  C02C  F0B5         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$566
  4433  000834  C02D  F0B6         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$566+1
  4434  000838  0E00               	movlw	0
  4435  00083A  BFB6               	btfsc	(_FlashReadUart$566+1)& (0+255),7,b
  4436  00083C  0EFF               	movlw	-1
  4437  00083E  6FB7               	movwf	(_FlashReadUart$566+2)& (0+255),b
  4438  000840  6FB8               	movwf	(_FlashReadUart$566+3)& (0+255),b
  4439  000842                     l302:
  4440                           
  4441                           ; BSR set to: 0
  4442                           
  4443                           ; BSR set to: 0
  4444  000842  C0B5  F02C         	movff	_FlashReadUart$566,FlashReadUart@numOfSampleToRead
  4445  000846  C0B6  F02D         	movff	_FlashReadUart$566+1,FlashReadUart@numOfSampleToRead+1
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;FlashApp.c: 96: readAddress -= numOfSampleToRead * (64);
  4449  00084A  C02C  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4450  00084E  C02D  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4451  000852  0E06               	movlw	6
  4452  000854                     u7245:
  4453  000854  90D8               	bcf	status,0,c
  4454  000856  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  4455  000858  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  4456  00085A  2EE8               	decfsz	wreg,f,c
  4457  00085C  D7FB               	goto	u7245
  4458  00085E  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  4459  000862  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  4460  000866  0E00               	movlw	0
  4461  000868  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4462  00086A  0EFF               	movlw	255
  4463  00086C  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4464  00086E  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  4465  000870  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  4466  000872  5FF9               	subwf	_readAddress& (0+255),f,b
  4467  000874  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  4468  000876  5BFA               	subwfb	(_readAddress+1)& (0+255),f,b
  4469  000878  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  4470  00087A  5BFB               	subwfb	(_readAddress+2)& (0+255),f,b
  4471  00087C  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  4472  00087E  5BFC               	subwfb	(_readAddress+3)& (0+255),f,b
  4473  000880                     l298:
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;FlashApp.c: 97: }
  4477                           ;FlashApp.c: 99: if (readAddress <= 0x4000)
  4478                           
  4479                           ; BSR set to: 0
  4480  000880  51FC               	movf	(_readAddress+3)& (0+255),w,b
  4481  000882  11FB               	iorwf	(_readAddress+2)& (0+255),w,b
  4482  000884  E13E               	bnz	l7301
  4483  000886  05F9               	decf	_readAddress& (0+255),w,b
  4484  000888  0E40               	movlw	64
  4485  00088A  59FA               	subwfb	(_readAddress+1)& (0+255),w,b
  4486  00088C  B0D8               	btfsc	status,0,c
  4487  00088E  D039               	goto	l308
  4488  000890  D023               	goto	u7280
  4489  000892                     l290:
  4490                           
  4491                           ;FlashApp.c: 104: else
  4492                           ;FlashApp.c: 105: {
  4493                           ;FlashApp.c: 106: if ((isReWriteDone) && (readAddress <= writeAddress))
  4494                           
  4495                           ; BSR set to: 0
  4496  000892  503C               	movf	_isReWriteDone,w,c
  4497  000894  B4D8               	btfsc	status,2,c
  4498  000896  D029               	goto	l305
  4499  000898  0100               	movlb	0	; () banked
  4500  00089A  51F9               	movf	_readAddress& (0+255),w,b
  4501  00089C  5C42               	subwf	_writeAddress,w,c
  4502  00089E  51FA               	movf	(_readAddress+1)& (0+255),w,b
  4503  0008A0  5843               	subwfb	_writeAddress+1,w,c
  4504  0008A2  51FB               	movf	(_readAddress+2)& (0+255),w,b
  4505  0008A4  5844               	subwfb	_writeAddress+2,w,c
  4506  0008A6  51FC               	movf	(_readAddress+3)& (0+255),w,b
  4507  0008A8  5845               	subwfb	_writeAddress+3,w,c
  4508  0008AA  A0D8               	btfss	status,0,c
  4509  0008AC  D01E               	goto	l305
  4510                           
  4511                           ; BSR set to: 0
  4512                           ;FlashApp.c: 107: {
  4513                           ;FlashApp.c: 108: readAddress = writeAddress + (64);
  4514  0008AE  0E40               	movlw	64
  4515  0008B0  2442               	addwf	_writeAddress,w,c
  4516  0008B2  6FF9               	movwf	_readAddress& (0+255),b
  4517  0008B4  0E00               	movlw	0
  4518  0008B6  2043               	addwfc	_writeAddress+1,w,c
  4519  0008B8  6FFA               	movwf	(_readAddress+1)& (0+255),b
  4520  0008BA  0E00               	movlw	0
  4521  0008BC  2044               	addwfc	_writeAddress+2,w,c
  4522  0008BE  6FFB               	movwf	(_readAddress+2)& (0+255),b
  4523  0008C0  0E00               	movlw	0
  4524  0008C2  2045               	addwfc	_writeAddress+3,w,c
  4525  0008C4  6FFC               	movwf	(_readAddress+3)& (0+255),b
  4526                           
  4527                           ;FlashApp.c: 109: if (readAddress >= 0x7FF0)
  4528  0008C6  51FC               	movf	(_readAddress+3)& (0+255),w,b
  4529  0008C8  11FB               	iorwf	(_readAddress+2)& (0+255),w,b
  4530  0008CA  E106               	bnz	u7280
  4531  0008CC  0EF0               	movlw	240
  4532  0008CE  5DF9               	subwf	_readAddress& (0+255),w,b
  4533  0008D0  0E7F               	movlw	127
  4534  0008D2  59FA               	subwfb	(_readAddress+1)& (0+255),w,b
  4535  0008D4  A0D8               	btfss	status,0,c
  4536  0008D6  D015               	goto	l308
  4537  0008D8                     u7280:
  4538                           
  4539                           ; BSR set to: 0
  4540                           ;FlashApp.c: 110: {
  4541                           ;FlashApp.c: 111: readAddress = 0x4000;
  4542  0008D8  0E00               	movlw	0
  4543  0008DA  6FF9               	movwf	_readAddress& (0+255),b
  4544  0008DC  0E40               	movlw	64
  4545  0008DE  6FFA               	movwf	(_readAddress+1)& (0+255),b
  4546  0008E0  0E00               	movlw	0
  4547  0008E2  6FFB               	movwf	(_readAddress+2)& (0+255),b
  4548  0008E4  0E00               	movlw	0
  4549  0008E6  6FFC               	movwf	(_readAddress+3)& (0+255),b
  4550                           
  4551                           ; BSR set to: 0
  4552                           ;FlashApp.c: 112: }
  4553                           ;FlashApp.c: 114: }
  4554  0008E8  D00C               	goto	l308
  4555  0008EA                     l305:
  4556                           
  4557                           ;FlashApp.c: 115: else
  4558                           ;FlashApp.c: 116: {
  4559                           ;FlashApp.c: 117: if(numOfValidateSamples == 0)
  4560                           
  4561                           ; BSR set to: 0
  4562  0008EA  5031               	movf	_numOfValidateSamples,w,c
  4563  0008EC  1032               	iorwf	_numOfValidateSamples+1,w,c
  4564  0008EE  1033               	iorwf	_numOfValidateSamples+2,w,c
  4565  0008F0  1034               	iorwf	_numOfValidateSamples+3,w,c
  4566  0008F2  A4D8               	btfss	status,2,c
  4567  0008F4  D006               	goto	l308
  4568                           
  4569                           ;FlashApp.c: 118: {
  4570                           ;FlashApp.c: 119: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_NO_SAMPLE_YET
      +                          );
  4571  0008F6  0E55               	movlw	85
  4572  0008F8  6E24               	movwf	SendAckMessage@inRequest,c
  4573  0008FA  0E05               	movlw	5
  4574  0008FC  ECF8  F016         	call	_SendAckMessage
  4575                           
  4576                           ;FlashApp.c: 120: return;
  4577  000900  0012               	return	
  4578  000902                     l308:
  4579  000902                     l7301:
  4580                           
  4581                           ;FlashApp.c: 121: }
  4582                           ;FlashApp.c: 123: }
  4583                           ;FlashApp.c: 124: }
  4584                           ;FlashApp.c: 127: TxMsg[(0)] = (0x24);
  4585  000902  0E24               	movlw	36
  4586  000904  0100               	movlb	0	; () banked
  4587  000906  6F6C               	movwf	FlashReadUart@TxMsg& (0+255),b
  4588                           
  4589                           ;FlashApp.c: 128: TxMsg[(1)] = FLASH_MSG;
  4590  000908  0E05               	movlw	5
  4591  00090A  6F6D               	movwf	(FlashReadUart@TxMsg+1)& (0+255),b
  4592                           
  4593                           ;FlashApp.c: 129: TxMsg[(2)] = FLASH_SEND_RAW_DATA;
  4594  00090C  0E54               	movlw	84
  4595  00090E  6F6E               	movwf	(FlashReadUart@TxMsg+2)& (0+255),b
  4596                           
  4597                           ;FlashApp.c: 130: TxMsg[(3)] = (64);
  4598  000910  0E40               	movlw	64
  4599  000912  6F6F               	movwf	(FlashReadUart@TxMsg+3)& (0+255),b
  4600                           
  4601                           ;FlashApp.c: 132: for (j=0; j<numOfSampleToRead; j++)
  4602  000914  0E00               	movlw	0
  4603  000916  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  4604  000918  0E00               	movlw	0
  4605  00091A  6FB9               	movwf	FlashReadUart@j& (0+255),b
  4606  00091C  D084               	goto	l309
  4607  00091E                     
  4608                           ; BSR set to: 0
  4609                           ;FlashApp.c: 133: {
  4610                           ;FlashApp.c: 135: for(int idx = 0; idx < (64); idx++)
  4611                           
  4612                           ; BSR set to: 0
  4613  00091E  0E00               	movlw	0
  4614  000920  6FBC               	movwf	(FlashReadUart@idx+1)& (0+255),b
  4615  000922  0E00               	movlw	0
  4616  000924  6FBB               	movwf	FlashReadUart@idx& (0+255),b
  4617  000926                     l7305:
  4618                           
  4619                           ; BSR set to: 0
  4620  000926  BFBC               	btfsc	(FlashReadUart@idx+1)& (0+255),7,b
  4621  000928  D006               	goto	l311
  4622  00092A  51BC               	movf	(FlashReadUart@idx+1)& (0+255),w,b
  4623  00092C  E12C               	bnz	l7315
  4624  00092E  0E40               	movlw	64
  4625  000930  5DBB               	subwf	FlashReadUart@idx& (0+255),w,b
  4626  000932  B0D8               	btfsc	status,0,c
  4627  000934  D028               	goto	u7310
  4628  000936                     l311:
  4629                           
  4630                           ; BSR set to: 0
  4631                           ;FlashApp.c: 136: {
  4632                           ;FlashApp.c: 137: TxMsg[(0x4) + idx] = FLASH_ReadByte(readAddress + idx);
  4633                           
  4634                           ; BSR set to: 0
  4635  000936  0E04               	movlw	4
  4636  000938  25BB               	addwf	FlashReadUart@idx& (0+255),w,b
  4637  00093A  6F60               	movwf	??_FlashReadUart& (0+255),b
  4638  00093C  0E00               	movlw	0
  4639  00093E  21BC               	addwfc	(FlashReadUart@idx+1)& (0+255),w,b
  4640  000940  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  4641  000942  0E6C               	movlw	low FlashReadUart@TxMsg
  4642  000944  2560               	addwf	??_FlashReadUart& (0+255),w,b
  4643  000946  6ED9               	movwf	fsr2l,c
  4644  000948  0E00               	movlw	high FlashReadUart@TxMsg
  4645  00094A  2161               	addwfc	(??_FlashReadUart+1)& (0+255),w,b
  4646  00094C  6EDA               	movwf	fsr2h,c
  4647  00094E  C0BB  F062         	movff	FlashReadUart@idx,??_FlashReadUart+2
  4648  000952  C0BC  F063         	movff	FlashReadUart@idx+1,??_FlashReadUart+3
  4649  000956  0E00               	movlw	0
  4650  000958  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4651  00095A  0EFF               	movlw	255
  4652  00095C  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4653  00095E  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  4654  000960  51F9               	movf	_readAddress& (0+255),w,b
  4655  000962  2562               	addwf	(??_FlashReadUart+2)& (0+255),w,b
  4656  000964  6E18               	movwf	FLASH_ReadByte@flashAddr,c
  4657  000966  51FA               	movf	(_readAddress+1)& (0+255),w,b
  4658  000968  2163               	addwfc	(??_FlashReadUart+3)& (0+255),w,b
  4659  00096A  6E19               	movwf	FLASH_ReadByte@flashAddr+1,c
  4660  00096C  51FB               	movf	(_readAddress+2)& (0+255),w,b
  4661  00096E  2164               	addwfc	(??_FlashReadUart+4)& (0+255),w,b
  4662  000970  6E1A               	movwf	FLASH_ReadByte@flashAddr+2,c
  4663  000972  51FC               	movf	(_readAddress+3)& (0+255),w,b
  4664  000974  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  4665  000976  6E1B               	movwf	FLASH_ReadByte@flashAddr+3,c
  4666  000978  EC77  F01B         	call	_FLASH_ReadByte	;wreg free
  4667  00097C  6EDF               	movwf	indf2,c
  4668  00097E  0100               	movlb	0	; () banked
  4669  000980  4BBB               	infsnz	FlashReadUart@idx& (0+255),f,b
  4670  000982  2BBC               	incf	(FlashReadUart@idx+1)& (0+255),f,b
  4671  000984  D7D0               	goto	l7305
  4672  000986                     u7310:
  4673  000986                     l7315:
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;FlashApp.c: 138: }
  4677                           ;FlashApp.c: 140: readAddress += (64);
  4678  000986  0E40               	movlw	64
  4679  000988  27F9               	addwf	_readAddress& (0+255),f,b
  4680  00098A  0E00               	movlw	0
  4681  00098C  23FA               	addwfc	(_readAddress+1)& (0+255),f,b
  4682  00098E  23FB               	addwfc	(_readAddress+2)& (0+255),f,b
  4683  000990  23FC               	addwfc	(_readAddress+3)& (0+255),f,b
  4684                           
  4685                           ;FlashApp.c: 141: if (readAddress >= 0x7FF0)
  4686  000992  51FC               	movf	(_readAddress+3)& (0+255),w,b
  4687  000994  11FB               	iorwf	(_readAddress+2)& (0+255),w,b
  4688  000996  E106               	bnz	u7320
  4689  000998  0EF0               	movlw	240
  4690  00099A  5DF9               	subwf	_readAddress& (0+255),w,b
  4691  00099C  0E7F               	movlw	127
  4692  00099E  59FA               	subwfb	(_readAddress+1)& (0+255),w,b
  4693  0009A0  A0D8               	btfss	status,0,c
  4694  0009A2  D008               	goto	l313
  4695  0009A4                     u7320:
  4696                           
  4697                           ; BSR set to: 0
  4698                           ;FlashApp.c: 142: {
  4699                           ;FlashApp.c: 143: readAddress = 0x4000;
  4700  0009A4  0E00               	movlw	0
  4701  0009A6  6FF9               	movwf	_readAddress& (0+255),b
  4702  0009A8  0E40               	movlw	64
  4703  0009AA  6FFA               	movwf	(_readAddress+1)& (0+255),b
  4704  0009AC  0E00               	movlw	0
  4705  0009AE  6FFB               	movwf	(_readAddress+2)& (0+255),b
  4706  0009B0  0E00               	movlw	0
  4707  0009B2  6FFC               	movwf	(_readAddress+3)& (0+255),b
  4708  0009B4                     l313:
  4709                           
  4710                           ; BSR set to: 0
  4711                           ;FlashApp.c: 144: }
  4712                           ;FlashApp.c: 145: TxMsg[(64) + (0x4)] = crc8(TxMsg, (64) + (0x4));
  4713                           
  4714                           ; BSR set to: 0
  4715  0009B4  0E6C               	movlw	low FlashReadUart@TxMsg
  4716  0009B6  6E18               	movwf	crc8@dataArray,c
  4717  0009B8  0E00               	movlw	high FlashReadUart@TxMsg
  4718  0009BA  6E19               	movwf	crc8@dataArray+1,c
  4719  0009BC  0E00               	movlw	0
  4720  0009BE  6E1B               	movwf	crc8@dataSize+1,c
  4721  0009C0  0E44               	movlw	68
  4722  0009C2  6E1A               	movwf	crc8@dataSize,c
  4723  0009C4  EC49  F017         	call	_crc8	;wreg free
  4724  0009C8  0100               	movlb	0	; () banked
  4725  0009CA  6FB0               	movwf	(FlashReadUart@TxMsg+68)& (0+255),b
  4726                           
  4727                           ; BSR set to: 0
  4728                           ;FlashApp.c: 147: WriteUartMessage(TxMsg, (64) + (0x4) + 1);
  4729  0009CC  0E6C               	movlw	low FlashReadUart@TxMsg
  4730  0009CE  6E19               	movwf	WriteUartMessage@dataBuf,c
  4731  0009D0  0E00               	movlw	high FlashReadUart@TxMsg
  4732  0009D2  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4733  0009D4  0E00               	movlw	0
  4734  0009D6  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4735  0009D8  0E45               	movlw	69
  4736  0009DA  6E1B               	movwf	WriteUartMessage@dataSize,c
  4737  0009DC  EC9E  F019         	call	_WriteUartMessage	;wreg free
  4738                           
  4739                           ;FlashApp.c: 149: if(numOfValidateSamples)
  4740  0009E0  5031               	movf	_numOfValidateSamples,w,c
  4741  0009E2  1032               	iorwf	_numOfValidateSamples+1,w,c
  4742  0009E4  1033               	iorwf	_numOfValidateSamples+2,w,c
  4743  0009E6  1034               	iorwf	_numOfValidateSamples+3,w,c
  4744  0009E8  B4D8               	btfsc	status,2,c
  4745  0009EA  D01A               	goto	l316
  4746                           
  4747                           ;FlashApp.c: 150: {
  4748                           ;FlashApp.c: 151: if (numOfReadSamples < ((0x4000-0x7FF0)/(64)))
  4749  0009EC  043E               	decf	_numOfReadSamples,w,c
  4750  0009EE  0EFF               	movlw	255
  4751  0009F0  583F               	subwfb	_numOfReadSamples+1,w,c
  4752  0009F2  0EFF               	movlw	255
  4753  0009F4  5840               	subwfb	_numOfReadSamples+2,w,c
  4754  0009F6  0EFF               	movlw	255
  4755  0009F8  5841               	subwfb	_numOfReadSamples+3,w,c
  4756  0009FA  B0D8               	btfsc	status,0,c
  4757  0009FC  D006               	goto	l315
  4758                           
  4759                           ;FlashApp.c: 152: {
  4760                           ;FlashApp.c: 153: numOfReadSamples++;
  4761  0009FE  0E01               	movlw	1
  4762  000A00  263E               	addwf	_numOfReadSamples,f,c
  4763  000A02  0E00               	movlw	0
  4764  000A04  223F               	addwfc	_numOfReadSamples+1,f,c
  4765  000A06  2240               	addwfc	_numOfReadSamples+2,f,c
  4766  000A08  2241               	addwfc	_numOfReadSamples+3,f,c
  4767  000A0A                     l315:
  4768                           
  4769                           ;FlashApp.c: 154: }
  4770                           ;FlashApp.c: 155: if (numOfValidateSamples > 0)
  4771  000A0A  5031               	movf	_numOfValidateSamples,w,c
  4772  000A0C  1032               	iorwf	_numOfValidateSamples+1,w,c
  4773  000A0E  1033               	iorwf	_numOfValidateSamples+2,w,c
  4774  000A10  1034               	iorwf	_numOfValidateSamples+3,w,c
  4775  000A12  B4D8               	btfsc	status,2,c
  4776  000A14  D005               	goto	l316
  4777                           
  4778                           ;FlashApp.c: 156: {
  4779                           ;FlashApp.c: 157: numOfValidateSamples--;
  4780  000A16  0631               	decf	_numOfValidateSamples,f,c
  4781  000A18  0E00               	movlw	0
  4782  000A1A  5A32               	subwfb	_numOfValidateSamples+1,f,c
  4783  000A1C  5A33               	subwfb	_numOfValidateSamples+2,f,c
  4784  000A1E  5A34               	subwfb	_numOfValidateSamples+3,f,c
  4785  000A20                     l316:
  4786  000A20  0100               	movlb	0	; () banked
  4787  000A22  4BB9               	infsnz	FlashReadUart@j& (0+255),f,b
  4788  000A24  2BBA               	incf	(FlashReadUart@j+1)& (0+255),f,b
  4789  000A26                     l309:
  4790                           
  4791                           ; BSR set to: 0
  4792                           
  4793                           ; BSR set to: 0
  4794  000A26  502C               	movf	FlashReadUart@numOfSampleToRead,w,c
  4795  000A28  5DB9               	subwf	FlashReadUart@j& (0+255),w,b
  4796  000A2A  51BA               	movf	(FlashReadUart@j+1)& (0+255),w,b
  4797  000A2C  0A80               	xorlw	128
  4798  000A2E  6F60               	movwf	??_FlashReadUart& (0+255),b
  4799  000A30  502D               	movf	FlashReadUart@numOfSampleToRead+1,w,c
  4800  000A32  0A80               	xorlw	128
  4801  000A34  5960               	subwfb	??_FlashReadUart& (0+255),w,b
  4802  000A36  B0D8               	btfsc	status,0,c
  4803  000A38  0012               	return	
  4804  000A3A  D771               	goto	l310
  4805  000A3C                     __end_of_FlashReadUart:
  4806                           	opt stack 0
  4807                           tosu	equ	0xFFF
  4808                           tosh	equ	0xFFE
  4809                           tosl	equ	0xFFD
  4810                           pclath	equ	0xFFA
  4811                           tblptru	equ	0xFF8
  4812                           tblptrh	equ	0xFF7
  4813                           tblptrl	equ	0xFF6
  4814                           tablat	equ	0xFF5
  4815                           prodh	equ	0xFF4
  4816                           prodl	equ	0xFF3
  4817                           postinc0	equ	0xFEE
  4818                           wreg	equ	0xFE8
  4819                           postdec1	equ	0xFE5
  4820                           fsr1l	equ	0xFE1
  4821                           indf2	equ	0xFDF
  4822                           postinc2	equ	0xFDE
  4823                           fsr2h	equ	0xFDA
  4824                           fsr2l	equ	0xFD9
  4825                           status	equ	0xFD8
  4826                           
  4827 ;; *************** function _abs *****************
  4828 ;; Defined at:
  4829 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  4830 ;; Parameters:    Size  Location     Type
  4831 ;;  a               2   23[COMRAM] int 
  4832 ;; Auto vars:     Size  Location     Type
  4833 ;;		None
  4834 ;; Return value:  Size  Location     Type
  4835 ;;                  2   23[COMRAM] int 
  4836 ;; Registers used:
  4837 ;;		wreg, status,2, status,0
  4838 ;; Tracked objects:
  4839 ;;		On entry : 0/0
  4840 ;;		On exit  : 0/0
  4841 ;;		Unchanged: 0/0
  4842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4843 ;;      Params:         2       0       0       0       0       0       0
  4844 ;;      Locals:         0       0       0       0       0       0       0
  4845 ;;      Temps:          2       0       0       0       0       0       0
  4846 ;;      Totals:         4       0       0       0       0       0       0
  4847 ;;Total ram usage:        4 bytes
  4848 ;; Hardware stack levels used:    1
  4849 ;; Hardware stack levels required when called:    3
  4850 ;; This function calls:
  4851 ;;		Nothing
  4852 ;; This function is called by:
  4853 ;;		_FlashReadUart
  4854 ;; This function uses a non-reentrant model
  4855 ;;
  4856                           
  4857                           	psect	text19
  4858  0034BC                     __ptext19:
  4859                           	opt stack 0
  4860  0034BC                     _abs:
  4861                           	opt stack 24
  4862                           
  4863                           ;incstack = 0
  4864  0034BC  AE19               	btfss	abs@a+1,7,c
  4865  0034BE  D00D               	goto	l1444
  4866  0034C0  C018  F01A         	movff	abs@a,??_abs
  4867  0034C4  C019  F01B         	movff	abs@a+1,??_abs+1
  4868  0034C8  1E1A               	comf	??_abs,f,c
  4869  0034CA  1E1B               	comf	??_abs+1,f,c
  4870  0034CC  4A1A               	infsnz	??_abs,f,c
  4871  0034CE  2A1B               	incf	??_abs+1,f,c
  4872  0034D0  C01A  F018         	movff	??_abs,?_abs
  4873  0034D4  C01B  F019         	movff	??_abs+1,?_abs+1
  4874  0034D8  0012               	return	
  4875  0034DA                     l1444:
  4876  0034DA  C018  F018         	movff	abs@a,?_abs
  4877  0034DE  C019  F019         	movff	abs@a+1,?_abs+1
  4878  0034E2  0012               	return		;funcret
  4879  0034E4                     __end_of_abs:
  4880                           	opt stack 0
  4881                           tosu	equ	0xFFF
  4882                           tosh	equ	0xFFE
  4883                           tosl	equ	0xFFD
  4884                           pclath	equ	0xFFA
  4885                           tblptru	equ	0xFF8
  4886                           tblptrh	equ	0xFF7
  4887                           tblptrl	equ	0xFF6
  4888                           tablat	equ	0xFF5
  4889                           prodh	equ	0xFF4
  4890                           prodl	equ	0xFF3
  4891                           postinc0	equ	0xFEE
  4892                           wreg	equ	0xFE8
  4893                           postdec1	equ	0xFE5
  4894                           fsr1l	equ	0xFE1
  4895                           indf2	equ	0xFDF
  4896                           postinc2	equ	0xFDE
  4897                           fsr2h	equ	0xFDA
  4898                           fsr2l	equ	0xFD9
  4899                           status	equ	0xFD8
  4900                           
  4901 ;; *************** function _FLASH_ReadByte *****************
  4902 ;; Defined at:
  4903 ;;		line 58 in file "mcc_generated_files/memory.c"
  4904 ;; Parameters:    Size  Location     Type
  4905 ;;  flashAddr       4   23[COMRAM] unsigned long 
  4906 ;; Auto vars:     Size  Location     Type
  4907 ;;		None
  4908 ;; Return value:  Size  Location     Type
  4909 ;;                  1    wreg      unsigned char 
  4910 ;; Registers used:
  4911 ;;		wreg, status,2
  4912 ;; Tracked objects:
  4913 ;;		On entry : 0/0
  4914 ;;		On exit  : 0/0
  4915 ;;		Unchanged: 0/0
  4916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4917 ;;      Params:         4       0       0       0       0       0       0
  4918 ;;      Locals:         0       0       0       0       0       0       0
  4919 ;;      Temps:          0       0       0       0       0       0       0
  4920 ;;      Totals:         4       0       0       0       0       0       0
  4921 ;;Total ram usage:        4 bytes
  4922 ;; Hardware stack levels used:    1
  4923 ;; Hardware stack levels required when called:    3
  4924 ;; This function calls:
  4925 ;;		Nothing
  4926 ;; This function is called by:
  4927 ;;		_FlashReadUart
  4928 ;;		_FlashTest
  4929 ;;		_FLASH_ReadWord
  4930 ;;		_FLASH_WriteByte
  4931 ;; This function uses a non-reentrant model
  4932 ;;
  4933                           
  4934                           	psect	text20
  4935  0036EE                     __ptext20:
  4936                           	opt stack 0
  4937  0036EE                     _FLASH_ReadByte:
  4938                           	opt stack 24
  4939                           
  4940                           ;memory.c: 60: TBLPTRU = (uint8_t)((flashAddr & 0x00FF0000) >> 16);
  4941                           
  4942                           ;incstack = 0
  4943  0036EE  C01A  FFF8         	movff	FLASH_ReadByte@flashAddr+2,tblptru	;volatile
  4944                           
  4945                           ;memory.c: 61: TBLPTRH = (uint8_t)((flashAddr & 0x0000FF00)>> 8);
  4946  0036F2  C019  FFF7         	movff	FLASH_ReadByte@flashAddr+1,tblptrh	;volatile
  4947                           
  4948                           ;memory.c: 62: TBLPTRL = (uint8_t)(flashAddr & 0x000000FF);
  4949  0036F6  C018  FFF6         	movff	FLASH_ReadByte@flashAddr,tblptrl	;volatile
  4950  0036FA  0008               	tblrd		*	;# 
  4951                           
  4952                           ;memory.c: 66: return (TABLAT);
  4953  0036FC  50F5               	movf	tablat,w,c	;volatile
  4954  0036FE  0012               	return	
  4955  003700                     __end_of_FLASH_ReadByte:
  4956                           	opt stack 0
  4957                           tosu	equ	0xFFF
  4958                           tosh	equ	0xFFE
  4959                           tosl	equ	0xFFD
  4960                           pclath	equ	0xFFA
  4961                           tblptru	equ	0xFF8
  4962                           tblptrh	equ	0xFF7
  4963                           tblptrl	equ	0xFF6
  4964                           tablat	equ	0xFF5
  4965                           prodh	equ	0xFF4
  4966                           prodl	equ	0xFF3
  4967                           postinc0	equ	0xFEE
  4968                           wreg	equ	0xFE8
  4969                           postdec1	equ	0xFE5
  4970                           fsr1l	equ	0xFE1
  4971                           indf2	equ	0xFDF
  4972                           postinc2	equ	0xFDE
  4973                           fsr2h	equ	0xFDA
  4974                           fsr2l	equ	0xFD9
  4975                           status	equ	0xFD8
  4976                           
  4977 ;; *************** function _FlashReadCondition *****************
  4978 ;; Defined at:
  4979 ;;		line 178 in file "FlashApp.c"
  4980 ;; Parameters:    Size  Location     Type
  4981 ;;		None
  4982 ;; Auto vars:     Size  Location     Type
  4983 ;;  TxMsg           9   39[COMRAM] unsigned char [9]
  4984 ;; Return value:  Size  Location     Type
  4985 ;;                  1    wreg      void 
  4986 ;; Registers used:
  4987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4988 ;; Tracked objects:
  4989 ;;		On entry : 0/0
  4990 ;;		On exit  : 0/0
  4991 ;;		Unchanged: 0/0
  4992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4993 ;;      Params:         0       0       0       0       0       0       0
  4994 ;;      Locals:         9       0       0       0       0       0       0
  4995 ;;      Temps:          4       0       0       0       0       0       0
  4996 ;;      Totals:        13       0       0       0       0       0       0
  4997 ;;Total ram usage:       13 bytes
  4998 ;; Hardware stack levels used:    1
  4999 ;; Hardware stack levels required when called:    5
  5000 ;; This function calls:
  5001 ;;		_WriteUartMessage
  5002 ;;		_ZeroArray
  5003 ;;		_crc8
  5004 ;;		_make8
  5005 ;; This function is called by:
  5006 ;;		_GroupFlashMemory
  5007 ;; This function uses a non-reentrant model
  5008 ;;
  5009                           
  5010                           	psect	text21
  5011  001602                     __ptext21:
  5012                           	opt stack 0
  5013  001602                     _FlashReadCondition:
  5014                           	opt stack 23
  5015                           
  5016                           ;FlashApp.c: 181: char TxMsg[4 + (0x4) + 1];
  5017                           ;FlashApp.c: 182: ZeroArray(TxMsg, 4 + (0x4) + 1);
  5018                           
  5019                           ;incstack = 0
  5020  001602  0E28               	movlw	low FlashReadCondition@TxMsg
  5021  001604  6E20               	movwf	ZeroArray@array,c
  5022  001606  0E00               	movlw	high FlashReadCondition@TxMsg
  5023  001608  6E21               	movwf	ZeroArray@array+1,c
  5024  00160A  0E00               	movlw	0
  5025  00160C  6E23               	movwf	ZeroArray@size+1,c
  5026  00160E  0E09               	movlw	9
  5027  001610  6E22               	movwf	ZeroArray@size,c
  5028  001612  ECFE  F01A         	call	_ZeroArray	;wreg free
  5029                           
  5030                           ;FlashApp.c: 185: TxMsg[(0)] = (0x24);
  5031  001616  0E24               	movlw	36
  5032  001618  6E28               	movwf	FlashReadCondition@TxMsg,c
  5033                           
  5034                           ;FlashApp.c: 186: TxMsg[(1)] = FLASH_MSG;
  5035  00161A  0E05               	movlw	5
  5036  00161C  6E29               	movwf	FlashReadCondition@TxMsg+1,c
  5037                           
  5038                           ;FlashApp.c: 187: TxMsg[(2)] = FLASH_READ_CONDITION;
  5039  00161E  0E52               	movlw	82
  5040  001620  6E2A               	movwf	FlashReadCondition@TxMsg+2,c
  5041                           
  5042                           ;FlashApp.c: 188: TxMsg[(3)] = 4;
  5043  001622  0E04               	movlw	4
  5044  001624  6E2B               	movwf	FlashReadCondition@TxMsg+3,c
  5045                           
  5046                           ;FlashApp.c: 193: TxMsg[(0x4) + 0] = make8(0x7FF0 - 0x4000,1);
  5047  001626  0EF0               	movlw	240
  5048  001628  6E18               	movwf	make8@data,c
  5049  00162A  0E3F               	movlw	63
  5050  00162C  6E19               	movwf	make8@data+1,c
  5051  00162E  0E00               	movlw	0
  5052  001630  6E1A               	movwf	make8@data+2,c
  5053  001632  0E00               	movlw	0
  5054  001634  6E1B               	movwf	make8@data+3,c
  5055  001636  0E01               	movlw	1
  5056  001638  6E1C               	movwf	make8@dataLocation,c
  5057  00163A  EC1C  F015         	call	_make8	;wreg free
  5058  00163E  6E2C               	movwf	FlashReadCondition@TxMsg+4,c
  5059                           
  5060                           ;FlashApp.c: 194: TxMsg[(0x4) + 1] = make8(0x7FF0 - 0x4000,0);
  5061  001640  0EF0               	movlw	240
  5062  001642  6E18               	movwf	make8@data,c
  5063  001644  0E3F               	movlw	63
  5064  001646  6E19               	movwf	make8@data+1,c
  5065  001648  0E00               	movlw	0
  5066  00164A  6E1A               	movwf	make8@data+2,c
  5067  00164C  0E00               	movlw	0
  5068  00164E  6E1B               	movwf	make8@data+3,c
  5069  001650  0E00               	movlw	0
  5070  001652  6E1C               	movwf	make8@dataLocation,c
  5071  001654  EC1C  F015         	call	_make8	;wreg free
  5072  001658  6E2D               	movwf	FlashReadCondition@TxMsg+5,c
  5073                           
  5074                           ;FlashApp.c: 197: TxMsg[(0x4) + 2] = make8(0x7FF0 - writeAddress,1);
  5075  00165A  C042  F024         	movff	_writeAddress,??_FlashReadCondition
  5076  00165E  C043  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5077  001662  C044  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5078  001666  C045  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5079  00166A  1E24               	comf	??_FlashReadCondition,f,c
  5080  00166C  1E25               	comf	??_FlashReadCondition+1,f,c
  5081  00166E  1E26               	comf	??_FlashReadCondition+2,f,c
  5082  001670  1E27               	comf	??_FlashReadCondition+3,f,c
  5083  001672  2A24               	incf	??_FlashReadCondition,f,c
  5084  001674  0E00               	movlw	0
  5085  001676  2225               	addwfc	??_FlashReadCondition+1,f,c
  5086  001678  2226               	addwfc	??_FlashReadCondition+2,f,c
  5087  00167A  2227               	addwfc	??_FlashReadCondition+3,f,c
  5088  00167C  0EF0               	movlw	240
  5089  00167E  2424               	addwf	??_FlashReadCondition,w,c
  5090  001680  6E18               	movwf	make8@data,c
  5091  001682  0E7F               	movlw	127
  5092  001684  2025               	addwfc	??_FlashReadCondition+1,w,c
  5093  001686  6E19               	movwf	make8@data+1,c
  5094  001688  0E00               	movlw	0
  5095  00168A  2026               	addwfc	??_FlashReadCondition+2,w,c
  5096  00168C  6E1A               	movwf	make8@data+2,c
  5097  00168E  0E00               	movlw	0
  5098  001690  2027               	addwfc	??_FlashReadCondition+3,w,c
  5099  001692  6E1B               	movwf	make8@data+3,c
  5100  001694  0E01               	movlw	1
  5101  001696  6E1C               	movwf	make8@dataLocation,c
  5102  001698  EC1C  F015         	call	_make8	;wreg free
  5103  00169C  6E2E               	movwf	FlashReadCondition@TxMsg+6,c
  5104                           
  5105                           ;FlashApp.c: 198: TxMsg[(0x4) + 3] = make8(0x7FF0 - writeAddress,0);
  5106  00169E  C042  F024         	movff	_writeAddress,??_FlashReadCondition
  5107  0016A2  C043  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5108  0016A6  C044  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5109  0016AA  C045  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5110  0016AE  1E24               	comf	??_FlashReadCondition,f,c
  5111  0016B0  1E25               	comf	??_FlashReadCondition+1,f,c
  5112  0016B2  1E26               	comf	??_FlashReadCondition+2,f,c
  5113  0016B4  1E27               	comf	??_FlashReadCondition+3,f,c
  5114  0016B6  2A24               	incf	??_FlashReadCondition,f,c
  5115  0016B8  0E00               	movlw	0
  5116  0016BA  2225               	addwfc	??_FlashReadCondition+1,f,c
  5117  0016BC  2226               	addwfc	??_FlashReadCondition+2,f,c
  5118  0016BE  2227               	addwfc	??_FlashReadCondition+3,f,c
  5119  0016C0  0EF0               	movlw	240
  5120  0016C2  2424               	addwf	??_FlashReadCondition,w,c
  5121  0016C4  6E18               	movwf	make8@data,c
  5122  0016C6  0E7F               	movlw	127
  5123  0016C8  2025               	addwfc	??_FlashReadCondition+1,w,c
  5124  0016CA  6E19               	movwf	make8@data+1,c
  5125  0016CC  0E00               	movlw	0
  5126  0016CE  2026               	addwfc	??_FlashReadCondition+2,w,c
  5127  0016D0  6E1A               	movwf	make8@data+2,c
  5128  0016D2  0E00               	movlw	0
  5129  0016D4  2027               	addwfc	??_FlashReadCondition+3,w,c
  5130  0016D6  6E1B               	movwf	make8@data+3,c
  5131  0016D8  0E00               	movlw	0
  5132  0016DA  6E1C               	movwf	make8@dataLocation,c
  5133  0016DC  EC1C  F015         	call	_make8	;wreg free
  5134  0016E0  6E2F               	movwf	FlashReadCondition@TxMsg+7,c
  5135                           
  5136                           ;FlashApp.c: 200: TxMsg[4 + (0x4)] = crc8(TxMsg, 4 + (0x4));
  5137  0016E2  0E28               	movlw	low FlashReadCondition@TxMsg
  5138  0016E4  6E18               	movwf	crc8@dataArray,c
  5139  0016E6  0E00               	movlw	high FlashReadCondition@TxMsg
  5140  0016E8  6E19               	movwf	crc8@dataArray+1,c
  5141  0016EA  0E00               	movlw	0
  5142  0016EC  6E1B               	movwf	crc8@dataSize+1,c
  5143  0016EE  0E08               	movlw	8
  5144  0016F0  6E1A               	movwf	crc8@dataSize,c
  5145  0016F2  EC49  F017         	call	_crc8	;wreg free
  5146  0016F6  6E30               	movwf	FlashReadCondition@TxMsg+8,c
  5147                           
  5148                           ;FlashApp.c: 202: WriteUartMessage(TxMsg, 4 + (0x4) + 1);
  5149  0016F8  0E28               	movlw	low FlashReadCondition@TxMsg
  5150  0016FA  6E19               	movwf	WriteUartMessage@dataBuf,c
  5151  0016FC  0E00               	movlw	high FlashReadCondition@TxMsg
  5152  0016FE  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5153  001700  0E00               	movlw	0
  5154  001702  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5155  001704  0E09               	movlw	9
  5156  001706  6E1B               	movwf	WriteUartMessage@dataSize,c
  5157  001708  EC9E  F019         	call	_WriteUartMessage	;wreg free
  5158  00170C  0012               	return		;funcret
  5159  00170E                     __end_of_FlashReadCondition:
  5160                           	opt stack 0
  5161                           tosu	equ	0xFFF
  5162                           tosh	equ	0xFFE
  5163                           tosl	equ	0xFFD
  5164                           pclath	equ	0xFFA
  5165                           tblptru	equ	0xFF8
  5166                           tblptrh	equ	0xFF7
  5167                           tblptrl	equ	0xFF6
  5168                           tablat	equ	0xFF5
  5169                           prodh	equ	0xFF4
  5170                           prodl	equ	0xFF3
  5171                           postinc0	equ	0xFEE
  5172                           wreg	equ	0xFE8
  5173                           postdec1	equ	0xFE5
  5174                           fsr1l	equ	0xFE1
  5175                           indf2	equ	0xFDF
  5176                           postinc2	equ	0xFDE
  5177                           fsr2h	equ	0xFDA
  5178                           fsr2l	equ	0xFD9
  5179                           status	equ	0xFD8
  5180                           
  5181 ;; *************** function _FlashEreaseMem *****************
  5182 ;; Defined at:
  5183 ;;		line 168 in file "FlashApp.c"
  5184 ;; Parameters:    Size  Location     Type
  5185 ;;		None
  5186 ;; Auto vars:     Size  Location     Type
  5187 ;;		None
  5188 ;; Return value:  Size  Location     Type
  5189 ;;                  1    wreg      void 
  5190 ;; Registers used:
  5191 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5192 ;; Tracked objects:
  5193 ;;		On entry : 0/0
  5194 ;;		On exit  : 0/0
  5195 ;;		Unchanged: 0/0
  5196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5197 ;;      Params:         0       0       0       0       0       0       0
  5198 ;;      Locals:         0       0       0       0       0       0       0
  5199 ;;      Temps:          0       0       0       0       0       0       0
  5200 ;;      Totals:         0       0       0       0       0       0       0
  5201 ;;Total ram usage:        0 bytes
  5202 ;; Hardware stack levels used:    1
  5203 ;; Hardware stack levels required when called:    6
  5204 ;; This function calls:
  5205 ;;		_SendAckMessage
  5206 ;;		_ZeroArray
  5207 ;; This function is called by:
  5208 ;;		_GroupFlashMemory
  5209 ;; This function uses a non-reentrant model
  5210 ;;
  5211                           
  5212                           	psect	text22
  5213  002D9E                     __ptext22:
  5214                           	opt stack 0
  5215  002D9E                     _FlashEreaseMem:
  5216                           	opt stack 22
  5217                           
  5218                           ;FlashApp.c: 170: writeAddress = 0x4000;
  5219                           
  5220                           ;incstack = 0
  5221  002D9E  0E00               	movlw	0
  5222  002DA0  6E42               	movwf	_writeAddress,c
  5223  002DA2  0E40               	movlw	64
  5224  002DA4  6E43               	movwf	_writeAddress+1,c
  5225  002DA6  0E00               	movlw	0
  5226  002DA8  6E44               	movwf	_writeAddress+2,c
  5227  002DAA  0E00               	movlw	0
  5228  002DAC  6E45               	movwf	_writeAddress+3,c
  5229                           
  5230                           ;FlashApp.c: 171: readAddress = 0x4000;
  5231  002DAE  0E00               	movlw	0
  5232  002DB0  0100               	movlb	0	; () banked
  5233  002DB2  6FF9               	movwf	_readAddress& (0+255),b
  5234  002DB4  0E40               	movlw	64
  5235  002DB6  6FFA               	movwf	(_readAddress+1)& (0+255),b
  5236  002DB8  0E00               	movlw	0
  5237  002DBA  6FFB               	movwf	(_readAddress+2)& (0+255),b
  5238  002DBC  0E00               	movlw	0
  5239  002DBE  6FFC               	movwf	(_readAddress+3)& (0+255),b
  5240                           
  5241                           ;FlashApp.c: 172: numOfValidateSamples = 0;
  5242  002DC0  0E00               	movlw	0
  5243  002DC2  6E31               	movwf	_numOfValidateSamples,c
  5244  002DC4  0E00               	movlw	0
  5245  002DC6  6E32               	movwf	_numOfValidateSamples+1,c
  5246  002DC8  0E00               	movlw	0
  5247  002DCA  6E33               	movwf	_numOfValidateSamples+2,c
  5248  002DCC  0E00               	movlw	0
  5249  002DCE  6E34               	movwf	_numOfValidateSamples+3,c
  5250                           
  5251                           ; BSR set to: 0
  5252                           ;FlashApp.c: 173: ZeroArray(sampleArray, (64)/sizeof(adc_result_t));
  5253  002DD0  0E6E               	movlw	low _sampleArray
  5254  002DD2  6E20               	movwf	ZeroArray@array,c
  5255  002DD4  0E01               	movlw	high _sampleArray
  5256  002DD6  6E21               	movwf	ZeroArray@array+1,c
  5257  002DD8  0E00               	movlw	0
  5258  002DDA  6E23               	movwf	ZeroArray@size+1,c
  5259  002DDC  0E20               	movlw	32
  5260  002DDE  6E22               	movwf	ZeroArray@size,c
  5261  002DE0  ECFE  F01A         	call	_ZeroArray	;wreg free
  5262                           
  5263                           ;FlashApp.c: 174: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_EREASE_MEMORY
      +                          );
  5264  002DE4  0E51               	movlw	81
  5265  002DE6  6E24               	movwf	SendAckMessage@inRequest,c
  5266  002DE8  0E05               	movlw	5
  5267  002DEA  ECF8  F016         	call	_SendAckMessage
  5268  002DEE  0012               	return		;funcret
  5269  002DF0                     __end_of_FlashEreaseMem:
  5270                           	opt stack 0
  5271                           tosu	equ	0xFFF
  5272                           tosh	equ	0xFFE
  5273                           tosl	equ	0xFFD
  5274                           pclath	equ	0xFFA
  5275                           tblptru	equ	0xFF8
  5276                           tblptrh	equ	0xFF7
  5277                           tblptrl	equ	0xFF6
  5278                           tablat	equ	0xFF5
  5279                           prodh	equ	0xFF4
  5280                           prodl	equ	0xFF3
  5281                           postinc0	equ	0xFEE
  5282                           wreg	equ	0xFE8
  5283                           postdec1	equ	0xFE5
  5284                           fsr1l	equ	0xFE1
  5285                           indf2	equ	0xFDF
  5286                           postinc2	equ	0xFDE
  5287                           fsr2h	equ	0xFDA
  5288                           fsr2l	equ	0xFD9
  5289                           status	equ	0xFD8
  5290                           
  5291 ;; *************** function _DacSetValue *****************
  5292 ;; Defined at:
  5293 ;;		line 38 in file "DacApp.c"
  5294 ;; Parameters:    Size  Location     Type
  5295 ;;  data            2   46[COMRAM] PTR unsigned char 
  5296 ;;		 -> rxMsgData(20), 
  5297 ;; Auto vars:     Size  Location     Type
  5298 ;;  regData         2   42[BANK0 ] unsigned int 
  5299 ;;  dacIndex        1   41[BANK0 ] char 
  5300 ;; Return value:  Size  Location     Type
  5301 ;;                  1    wreg      void 
  5302 ;; Registers used:
  5303 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5304 ;; Tracked objects:
  5305 ;;		On entry : 0/0
  5306 ;;		On exit  : 0/0
  5307 ;;		Unchanged: 0/0
  5308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5309 ;;      Params:         2       0       0       0       0       0       0
  5310 ;;      Locals:         0       3       0       0       0       0       0
  5311 ;;      Temps:          0       3       0       0       0       0       0
  5312 ;;      Totals:         2       6       0       0       0       0       0
  5313 ;;Total ram usage:        8 bytes
  5314 ;; Hardware stack levels used:    1
  5315 ;; Hardware stack levels required when called:    7
  5316 ;; This function calls:
  5317 ;;		_GetIntFromUartData
  5318 ;;		_SWSPI_send_word
  5319 ;;		_SendAckMessage
  5320 ;;		_StoreIntInEeprom
  5321 ;; This function is called by:
  5322 ;;		_GroupDAC
  5323 ;; This function uses a non-reentrant model
  5324 ;;
  5325                           
  5326                           	psect	text23
  5327  00271E                     __ptext23:
  5328                           	opt stack 0
  5329  00271E                     _DacSetValue:
  5330                           	opt stack 21
  5331                           
  5332                           ;DacApp.c: 40: uint16_t regData = GetIntFromUartData(16, data);
  5333                           
  5334                           ;incstack = 0
  5335  00271E  C02F  F066         	movff	DacSetValue@data,GetIntFromUartData@data
  5336  002722  C030  F067         	movff	DacSetValue@data+1,GetIntFromUartData@data+1
  5337  002726  0E10               	movlw	16
  5338  002728  EC20  F00F         	call	_GetIntFromUartData
  5339  00272C  C066  F08A         	movff	?_GetIntFromUartData,DacSetValue@regData
  5340  002730  C067  F08B         	movff	?_GetIntFromUartData+1,DacSetValue@regData+1
  5341                           
  5342                           ;DacApp.c: 41: SWSPI_send_word(EXT_DAC, regData, 1);
  5343  002734  C08A  F026         	movff	DacSetValue@regData,SWSPI_send_word@data
  5344  002738  C08B  F027         	movff	DacSetValue@regData+1,SWSPI_send_word@data+1
  5345  00273C  6A28               	clrf	SWSPI_send_word@data+2,c
  5346  00273E  6A29               	clrf	SWSPI_send_word@data+3,c
  5347  002740  0E01               	movlw	1
  5348  002742  6E2A               	movwf	SWSPI_send_word@dataSize,c
  5349  002744  0E02               	movlw	2
  5350  002746  ECE9  F010         	call	_SWSPI_send_word
  5351                           
  5352                           ;DacApp.c: 44: int8_t dacIndex = (regData >> 14);
  5353  00274A  C08A  F086         	movff	DacSetValue@regData,??_DacSetValue
  5354  00274E  C08B  F087         	movff	DacSetValue@regData+1,??_DacSetValue+1
  5355  002752  0E0E               	movlw	14
  5356  002754  0100               	movlb	0	; () banked
  5357  002756  6F88               	movwf	(??_DacSetValue+2)& (0+255),b
  5358  002758                     u7385:
  5359  002758  90D8               	bcf	status,0,c
  5360  00275A  3387               	rrcf	(??_DacSetValue+1)& (0+255),f,b
  5361  00275C  3386               	rrcf	??_DacSetValue& (0+255),f,b
  5362  00275E  2F88               	decfsz	(??_DacSetValue+2)& (0+255),f,b
  5363  002760  D7FB               	goto	u7385
  5364  002762  5186               	movf	??_DacSetValue& (0+255),w,b
  5365  002764  6F89               	movwf	DacSetValue@dacIndex& (0+255),b
  5366                           
  5367                           ; BSR set to: 0
  5368                           ;DacApp.c: 45: StoreIntInEeprom(regData, (0x10) + dacIndex, 2);
  5369  002766  C08A  F021         	movff	DacSetValue@regData,StoreIntInEeprom@data
  5370  00276A  C08B  F022         	movff	DacSetValue@regData+1,StoreIntInEeprom@data+1
  5371  00276E  6A23               	clrf	StoreIntInEeprom@data+2,c
  5372  002770  6A24               	clrf	StoreIntInEeprom@data+3,c
  5373  002772  5189               	movf	DacSetValue@dacIndex& (0+255),w,b
  5374  002774  0F10               	addlw	16
  5375  002776  6E25               	movwf	StoreIntInEeprom@address,c
  5376  002778  0E00               	movlw	0
  5377  00277A  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  5378  00277C  0E02               	movlw	2
  5379  00277E  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  5380  002780  ECF9  F018         	call	_StoreIntInEeprom	;wreg free
  5381                           
  5382                           ;DacApp.c: 48: SendAckMessage((MSG_GROUPS)DAC_MSG, (MSG_REQUEST)DAC_SET_VALUE);
  5383  002784  0E61               	movlw	97
  5384  002786  6E24               	movwf	SendAckMessage@inRequest,c
  5385  002788  0E06               	movlw	6
  5386  00278A  ECF8  F016         	call	_SendAckMessage
  5387  00278E  0012               	return		;funcret
  5388  002790                     __end_of_DacSetValue:
  5389                           	opt stack 0
  5390                           tosu	equ	0xFFF
  5391                           tosh	equ	0xFFE
  5392                           tosl	equ	0xFFD
  5393                           pclath	equ	0xFFA
  5394                           tblptru	equ	0xFF8
  5395                           tblptrh	equ	0xFF7
  5396                           tblptrl	equ	0xFF6
  5397                           tablat	equ	0xFF5
  5398                           prodh	equ	0xFF4
  5399                           prodl	equ	0xFF3
  5400                           postinc0	equ	0xFEE
  5401                           wreg	equ	0xFE8
  5402                           postdec1	equ	0xFE5
  5403                           fsr1l	equ	0xFE1
  5404                           indf2	equ	0xFDF
  5405                           postinc2	equ	0xFDE
  5406                           fsr2h	equ	0xFDA
  5407                           fsr2l	equ	0xFD9
  5408                           status	equ	0xFD8
  5409                           
  5410 ;; *************** function _StoreIntInEeprom *****************
  5411 ;; Defined at:
  5412 ;;		line 88 in file "SystemCommon.c"
  5413 ;; Parameters:    Size  Location     Type
  5414 ;;  data            4   32[COMRAM] unsigned long 
  5415 ;;  address         1   36[COMRAM] unsigned char 
  5416 ;;  numOfByes       2   37[COMRAM] int 
  5417 ;; Auto vars:     Size  Location     Type
  5418 ;;  val             1   39[COMRAM] unsigned char 
  5419 ;;  idx             1   40[COMRAM] unsigned char 
  5420 ;; Return value:  Size  Location     Type
  5421 ;;                  1    wreg      void 
  5422 ;; Registers used:
  5423 ;;		wreg, status,2, status,0, cstack
  5424 ;; Tracked objects:
  5425 ;;		On entry : 0/0
  5426 ;;		On exit  : 0/0
  5427 ;;		Unchanged: 0/0
  5428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5429 ;;      Params:         7       0       0       0       0       0       0
  5430 ;;      Locals:         2       0       0       0       0       0       0
  5431 ;;      Temps:          0       0       0       0       0       0       0
  5432 ;;      Totals:         9       0       0       0       0       0       0
  5433 ;;Total ram usage:        9 bytes
  5434 ;; Hardware stack levels used:    1
  5435 ;; Hardware stack levels required when called:    5
  5436 ;; This function calls:
  5437 ;;		_EepromWrite
  5438 ;;		_make8
  5439 ;; This function is called by:
  5440 ;;		_DacSetValue
  5441 ;; This function uses a non-reentrant model
  5442 ;;
  5443                           
  5444                           	psect	text24
  5445  0031F2                     __ptext24:
  5446                           	opt stack 0
  5447  0031F2                     _StoreIntInEeprom:
  5448                           	opt stack 22
  5449                           
  5450                           ;SystemCommon.c: 90: for(uint8_t idx = numOfByes; idx; idx--)
  5451                           
  5452                           ;incstack = 0
  5453  0031F2  C026  F029         	movff	StoreIntInEeprom@numOfByes,StoreIntInEeprom@idx
  5454  0031F6  D015               	goto	l1240
  5455  0031F8                     
  5456                           ;SystemCommon.c: 91: {
  5457                           ;SystemCommon.c: 92: uint8_t val = make8(data, idx - 1);
  5458  0031F8  C021  F018         	movff	StoreIntInEeprom@data,make8@data
  5459  0031FC  C022  F019         	movff	StoreIntInEeprom@data+1,make8@data+1
  5460  003200  C023  F01A         	movff	StoreIntInEeprom@data+2,make8@data+2
  5461  003204  C024  F01B         	movff	StoreIntInEeprom@data+3,make8@data+3
  5462  003208  0429               	decf	StoreIntInEeprom@idx,w,c
  5463  00320A  6E1C               	movwf	make8@dataLocation,c
  5464  00320C  EC1C  F015         	call	_make8	;wreg free
  5465  003210  6E28               	movwf	StoreIntInEeprom@val,c
  5466                           
  5467                           ;SystemCommon.c: 93: EepromWrite(address - idx, val);
  5468  003212  C028  F01B         	movff	StoreIntInEeprom@val,EepromWrite@data
  5469  003216  5029               	movf	StoreIntInEeprom@idx,w,c
  5470  003218  0800               	sublw	0
  5471  00321A  2425               	addwf	StoreIntInEeprom@address,w,c
  5472  00321C  EC90  F01B         	call	_EepromWrite
  5473  003220  0629               	decf	StoreIntInEeprom@idx,f,c
  5474  003222                     l1240:
  5475  003222  5029               	movf	StoreIntInEeprom@idx,w,c
  5476  003224  B4D8               	btfsc	status,2,c
  5477  003226  0012               	return	
  5478  003228  D7E7               	goto	l1241
  5479  00322A                     __end_of_StoreIntInEeprom:
  5480                           	opt stack 0
  5481                           tosu	equ	0xFFF
  5482                           tosh	equ	0xFFE
  5483                           tosl	equ	0xFFD
  5484                           pclath	equ	0xFFA
  5485                           tblptru	equ	0xFF8
  5486                           tblptrh	equ	0xFF7
  5487                           tblptrl	equ	0xFF6
  5488                           tablat	equ	0xFF5
  5489                           prodh	equ	0xFF4
  5490                           prodl	equ	0xFF3
  5491                           postinc0	equ	0xFEE
  5492                           wreg	equ	0xFE8
  5493                           postdec1	equ	0xFE5
  5494                           fsr1l	equ	0xFE1
  5495                           indf2	equ	0xFDF
  5496                           postinc2	equ	0xFDE
  5497                           fsr2h	equ	0xFDA
  5498                           fsr2l	equ	0xFD9
  5499                           status	equ	0xFD8
  5500                           
  5501 ;; *************** function _EepromWrite *****************
  5502 ;; Defined at:
  5503 ;;		line 220 in file "FlashApp.c"
  5504 ;; Parameters:    Size  Location     Type
  5505 ;;  address         1    wreg     unsigned char 
  5506 ;;  data            1   26[COMRAM] unsigned char 
  5507 ;; Auto vars:     Size  Location     Type
  5508 ;;  address         1   27[COMRAM] unsigned char 
  5509 ;; Return value:  Size  Location     Type
  5510 ;;                  1    wreg      void 
  5511 ;; Registers used:
  5512 ;;		wreg, status,2, cstack
  5513 ;; Tracked objects:
  5514 ;;		On entry : 0/0
  5515 ;;		On exit  : 0/0
  5516 ;;		Unchanged: 0/0
  5517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5518 ;;      Params:         1       0       0       0       0       0       0
  5519 ;;      Locals:         1       0       0       0       0       0       0
  5520 ;;      Temps:          0       0       0       0       0       0       0
  5521 ;;      Totals:         2       0       0       0       0       0       0
  5522 ;;Total ram usage:        2 bytes
  5523 ;; Hardware stack levels used:    1
  5524 ;; Hardware stack levels required when called:    4
  5525 ;; This function calls:
  5526 ;;		_DATAEE_WriteByte
  5527 ;; This function is called by:
  5528 ;;		_StoreIntInEeprom
  5529 ;;		_SetMcuFwVersion
  5530 ;;		_SetCpldFwVersion
  5531 ;; This function uses a non-reentrant model
  5532 ;;
  5533                           
  5534                           	psect	text25
  5535  003720                     __ptext25:
  5536                           	opt stack 0
  5537  003720                     _EepromWrite:
  5538                           	opt stack 23
  5539                           
  5540                           ;incstack = 0
  5541                           ;EepromWrite@address stored from wreg
  5542  003720  6E1C               	movwf	EepromWrite@address,c
  5543                           
  5544                           ;FlashApp.c: 222: DATAEE_WriteByte(address, data);
  5545  003722  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
  5546  003726  501C               	movf	EepromWrite@address,w,c
  5547  003728  EC68  F019         	call	_DATAEE_WriteByte
  5548  00372C  0012               	return		;funcret
  5549  00372E                     __end_of_EepromWrite:
  5550                           	opt stack 0
  5551                           tosu	equ	0xFFF
  5552                           tosh	equ	0xFFE
  5553                           tosl	equ	0xFFD
  5554                           pclath	equ	0xFFA
  5555                           tblptru	equ	0xFF8
  5556                           tblptrh	equ	0xFF7
  5557                           tblptrl	equ	0xFF6
  5558                           tablat	equ	0xFF5
  5559                           prodh	equ	0xFF4
  5560                           prodl	equ	0xFF3
  5561                           postinc0	equ	0xFEE
  5562                           wreg	equ	0xFE8
  5563                           postdec1	equ	0xFE5
  5564                           fsr1l	equ	0xFE1
  5565                           indf2	equ	0xFDF
  5566                           postinc2	equ	0xFDE
  5567                           fsr2h	equ	0xFDA
  5568                           fsr2l	equ	0xFD9
  5569                           status	equ	0xFD8
  5570                           
  5571 ;; *************** function _DATAEE_WriteByte *****************
  5572 ;; Defined at:
  5573 ;;		line 167 in file "mcc_generated_files/memory.c"
  5574 ;; Parameters:    Size  Location     Type
  5575 ;;  bAdd            1    wreg     unsigned char 
  5576 ;;  bData           1   23[COMRAM] unsigned char 
  5577 ;; Auto vars:     Size  Location     Type
  5578 ;;  bAdd            1   24[COMRAM] unsigned char 
  5579 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
  5580 ;; Return value:  Size  Location     Type
  5581 ;;                  1    wreg      void 
  5582 ;; Registers used:
  5583 ;;		wreg, status,2
  5584 ;; Tracked objects:
  5585 ;;		On entry : 0/0
  5586 ;;		On exit  : 0/0
  5587 ;;		Unchanged: 0/0
  5588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5589 ;;      Params:         1       0       0       0       0       0       0
  5590 ;;      Locals:         2       0       0       0       0       0       0
  5591 ;;      Temps:          0       0       0       0       0       0       0
  5592 ;;      Totals:         3       0       0       0       0       0       0
  5593 ;;Total ram usage:        3 bytes
  5594 ;; Hardware stack levels used:    1
  5595 ;; Hardware stack levels required when called:    3
  5596 ;; This function calls:
  5597 ;;		Nothing
  5598 ;; This function is called by:
  5599 ;;		_EepromWrite
  5600 ;;		_EepromTest
  5601 ;; This function uses a non-reentrant model
  5602 ;;
  5603                           
  5604                           	psect	text26
  5605  0032D0                     __ptext26:
  5606                           	opt stack 0
  5607  0032D0                     _DATAEE_WriteByte:
  5608                           	opt stack 23
  5609                           
  5610                           ;incstack = 0
  5611                           ;DATAEE_WriteByte@bAdd stored from wreg
  5612  0032D0  6E19               	movwf	DATAEE_WriteByte@bAdd,c
  5613                           
  5614                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
  5615  0032D2  0E00               	movlw	0
  5616  0032D4  BEF2               	btfsc	intcon,7,c	;volatile
  5617  0032D6  0E01               	movlw	1
  5618  0032D8  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
  5619                           
  5620                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
  5621  0032DA  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
  5622                           
  5623                           ;memory.c: 172: EEDATA = bData;
  5624  0032DE  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
  5625                           
  5626                           ;memory.c: 173: EECON1bits.EEPGD = 0;
  5627  0032E2  9EA6               	bcf	4006,7,c	;volsfr
  5628                           
  5629                           ;memory.c: 174: EECON1bits.CFGS = 0;
  5630  0032E4  9CA6               	bcf	4006,6,c	;volsfr
  5631                           
  5632                           ;memory.c: 175: EECON1bits.WREN = 1;
  5633  0032E6  84A6               	bsf	4006,2,c	;volsfr
  5634                           
  5635                           ;memory.c: 176: INTCONbits.GIE = 0;
  5636  0032E8  9EF2               	bcf	intcon,7,c	;volatile
  5637                           
  5638                           ;memory.c: 177: EECON2 = 0x55;
  5639  0032EA  0E55               	movlw	85
  5640  0032EC  6EA7               	movwf	4007,c	;volsfr
  5641                           
  5642                           ;memory.c: 178: EECON2 = 0xAA;
  5643  0032EE  0EAA               	movlw	170
  5644  0032F0  6EA7               	movwf	4007,c	;volsfr
  5645                           
  5646                           ;memory.c: 179: EECON1bits.WR = 1;
  5647  0032F2  82A6               	bsf	4006,1,c	;volsfr
  5648  0032F4                     
  5649                           ;memory.c: 182: {
  5650  0032F4  B2A6               	btfsc	4006,1,c	;volsfr
  5651  0032F6  D7FE               	goto	l898
  5652                           
  5653                           ;memory.c: 183: }
  5654                           ;memory.c: 185: EECON1bits.WREN = 0;
  5655  0032F8  94A6               	bcf	4006,2,c	;volsfr
  5656                           
  5657                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
  5658  0032FA  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
  5659  0032FC  D002               	bra	u5845
  5660  0032FE  9EF2               	bcf	intcon,7,c	;volatile
  5661  003300  D001               	bra	u5846
  5662  003302                     u5845:
  5663  003302  8EF2               	bsf	intcon,7,c	;volatile
  5664  003304                     u5846:
  5665  003304  0012               	return		;funcret
  5666  003306                     __end_of_DATAEE_WriteByte:
  5667                           	opt stack 0
  5668                           tosu	equ	0xFFF
  5669                           tosh	equ	0xFFE
  5670                           tosl	equ	0xFFD
  5671                           pclath	equ	0xFFA
  5672                           tblptru	equ	0xFF8
  5673                           tblptrh	equ	0xFF7
  5674                           tblptrl	equ	0xFF6
  5675                           tablat	equ	0xFF5
  5676                           prodh	equ	0xFF4
  5677                           prodl	equ	0xFF3
  5678                           intcon	equ	0xFF2
  5679                           postinc0	equ	0xFEE
  5680                           wreg	equ	0xFE8
  5681                           postdec1	equ	0xFE5
  5682                           fsr1l	equ	0xFE1
  5683                           indf2	equ	0xFDF
  5684                           postinc2	equ	0xFDE
  5685                           fsr2h	equ	0xFDA
  5686                           fsr2l	equ	0xFD9
  5687                           status	equ	0xFD8
  5688                           
  5689 ;; *************** function _GetIntFromUartData *****************
  5690 ;; Defined at:
  5691 ;;		line 34 in file "SystemCommon.c"
  5692 ;; Parameters:    Size  Location     Type
  5693 ;;  num             1    wreg     char 
  5694 ;;  data            2    6[BANK0 ] PTR unsigned char 
  5695 ;;		 -> rxMsgData(20), 
  5696 ;; Auto vars:     Size  Location     Type
  5697 ;;  num             1   19[BANK0 ] char 
  5698 ;;  c               1   24[BANK0 ] unsigned char 
  5699 ;;  idx             2   25[BANK0 ] int 
  5700 ;;  dataRegArr      9   10[BANK0 ] unsigned char [9]
  5701 ;;  retVal          4   20[BANK0 ] unsigned long 
  5702 ;; Return value:  Size  Location     Type
  5703 ;;                  4    6[BANK0 ] unsigned long 
  5704 ;; Registers used:
  5705 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5706 ;; Tracked objects:
  5707 ;;		On entry : 0/0
  5708 ;;		On exit  : 0/0
  5709 ;;		Unchanged: 0/0
  5710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5711 ;;      Params:         0       4       0       0       0       0       0
  5712 ;;      Locals:         0      17       0       0       0       0       0
  5713 ;;      Temps:          0       0       0       0       0       0       0
  5714 ;;      Totals:         0      21       0       0       0       0       0
  5715 ;;Total ram usage:       21 bytes
  5716 ;; Hardware stack levels used:    1
  5717 ;; Hardware stack levels required when called:    6
  5718 ;; This function calls:
  5719 ;;		_ZeroArray
  5720 ;;		_strtol
  5721 ;; This function is called by:
  5722 ;;		_DacSetValue
  5723 ;;		_UpdateTxFreq
  5724 ;;		_UpdateRxFreq
  5725 ;; This function uses a non-reentrant model
  5726 ;;
  5727                           
  5728                           	psect	text27
  5729  001E40                     __ptext27:
  5730                           	opt stack 0
  5731  001E40                     _GetIntFromUartData:
  5732                           	opt stack 21
  5733                           
  5734                           ;incstack = 0
  5735                           ;GetIntFromUartData@num stored from wreg
  5736  001E40  0100               	movlb	0	; () banked
  5737  001E42  6F73               	movwf	GetIntFromUartData@num& (0+255),b
  5738                           
  5739                           ;SystemCommon.c: 36: uint32_t retVal = 0;
  5740  001E44  0E00               	movlw	0
  5741  001E46  0100               	movlb	0	; () banked
  5742  001E48  6F74               	movwf	GetIntFromUartData@retVal& (0+255),b
  5743  001E4A  0E00               	movlw	0
  5744  001E4C  6F75               	movwf	(GetIntFromUartData@retVal+1)& (0+255),b
  5745  001E4E  0E00               	movlw	0
  5746  001E50  6F76               	movwf	(GetIntFromUartData@retVal+2)& (0+255),b
  5747  001E52  0E00               	movlw	0
  5748  001E54  6F77               	movwf	(GetIntFromUartData@retVal+3)& (0+255),b
  5749                           
  5750                           ; BSR set to: 0
  5751                           ;SystemCommon.c: 37: char dataRegArr[9];
  5752                           ;SystemCommon.c: 38: ZeroArray(dataRegArr, 9);
  5753  001E56  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  5754  001E58  6E20               	movwf	ZeroArray@array,c
  5755  001E5A  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5756  001E5C  6E21               	movwf	ZeroArray@array+1,c
  5757  001E5E  0E00               	movlw	0
  5758  001E60  6E23               	movwf	ZeroArray@size+1,c
  5759  001E62  0E09               	movlw	9
  5760  001E64  6E22               	movwf	ZeroArray@size,c
  5761  001E66  ECFE  F01A         	call	_ZeroArray	;wreg free
  5762                           
  5763                           ;SystemCommon.c: 40: for(int idx = 0; idx < 9; idx++)
  5764  001E6A  0E00               	movlw	0
  5765  001E6C  0100               	movlb	0	; () banked
  5766  001E6E  6F7A               	movwf	(GetIntFromUartData@idx+1)& (0+255),b
  5767  001E70  0E00               	movlw	0
  5768  001E72  6F79               	movwf	GetIntFromUartData@idx& (0+255),b
  5769  001E74                     l6983:
  5770                           
  5771                           ; BSR set to: 0
  5772  001E74  BF7A               	btfsc	(GetIntFromUartData@idx+1)& (0+255),7,b
  5773  001E76  D006               	goto	l1218
  5774  001E78  517A               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5775  001E7A  E122               	bnz	l7001
  5776  001E7C  0E09               	movlw	9
  5777  001E7E  5D79               	subwf	GetIntFromUartData@idx& (0+255),w,b
  5778  001E80  B0D8               	btfsc	status,0,c
  5779  001E82  D01E               	goto	u6850
  5780  001E84                     l1218:
  5781                           
  5782                           ; BSR set to: 0
  5783                           ;SystemCommon.c: 41: {
  5784                           ;SystemCommon.c: 42: char c = data[idx];
  5785                           
  5786                           ; BSR set to: 0
  5787  001E84  5179               	movf	GetIntFromUartData@idx& (0+255),w,b
  5788  001E86  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  5789  001E88  6ED9               	movwf	fsr2l,c
  5790  001E8A  517A               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5791  001E8C  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  5792  001E8E  6EDA               	movwf	fsr2h,c
  5793  001E90  50DF               	movf	indf2,w,c
  5794  001E92  6F78               	movwf	GetIntFromUartData@c& (0+255),b
  5795                           
  5796                           ; BSR set to: 0
  5797                           ;SystemCommon.c: 43: if(c == 0x10)
  5798  001E94  0E10               	movlw	16
  5799  001E96  1978               	xorwf	GetIntFromUartData@c& (0+255),w,b
  5800  001E98  B4D8               	btfsc	status,2,c
  5801  001E9A  D012               	goto	u6850
  5802                           
  5803                           ; BSR set to: 0
  5804                           ;SystemCommon.c: 47: else
  5805                           ;SystemCommon.c: 48: {
  5806                           ;SystemCommon.c: 49: dataRegArr[idx] = data[idx] + '0';
  5807                           
  5808                           ; BSR set to: 0
  5809                           
  5810                           ; BSR set to: 0
  5811                           ;SystemCommon.c: 46: }
  5812                           
  5813                           ; BSR set to: 0
  5814                           ;SystemCommon.c: 44: {
  5815                           ;SystemCommon.c: 45: break;
  5816  001E9C  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  5817  001E9E  2579               	addwf	GetIntFromUartData@idx& (0+255),w,b
  5818  001EA0  6ED9               	movwf	fsr2l,c
  5819  001EA2  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5820  001EA4  217A               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  5821  001EA6  6EDA               	movwf	fsr2h,c
  5822  001EA8  5179               	movf	GetIntFromUartData@idx& (0+255),w,b
  5823  001EAA  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  5824  001EAC  6EE1               	movwf	fsr1l,c
  5825  001EAE  517A               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5826  001EB0  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  5827  001EB2  6EE2               	movwf	fsr1h,c
  5828  001EB4  50E7               	movf	indf1,w,c
  5829  001EB6  0F30               	addlw	48
  5830  001EB8  6EDF               	movwf	indf2,c
  5831                           
  5832                           ; BSR set to: 0
  5833                           
  5834                           ; BSR set to: 0
  5835  001EBA  4B79               	infsnz	GetIntFromUartData@idx& (0+255),f,b
  5836  001EBC  2B7A               	incf	(GetIntFromUartData@idx+1)& (0+255),f,b
  5837  001EBE  D7DA               	goto	l6983
  5838  001EC0                     u6850:
  5839  001EC0                     l7001:
  5840                           
  5841                           ; BSR set to: 0
  5842                           ;SystemCommon.c: 50: }
  5843                           ;SystemCommon.c: 52: }
  5844                           ;SystemCommon.c: 53: retVal = strtol(dataRegArr, (0), num);
  5845  001EC0  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  5846  001EC2  6E24               	movwf	strtol@s,c
  5847  001EC4  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5848  001EC6  6E25               	movwf	strtol@s+1,c
  5849  001EC8  0E00               	movlw	0
  5850  001ECA  6E26               	movwf	strtol@endptr,c
  5851  001ECC  0E00               	movlw	0
  5852  001ECE  6E27               	movwf	strtol@endptr+1,c
  5853  001ED0  5173               	movf	GetIntFromUartData@num& (0+255),w,b
  5854  001ED2  6E28               	movwf	strtol@base,c
  5855  001ED4  6A29               	clrf	strtol@base+1,c
  5856  001ED6  BE28               	btfsc	strtol@base,7,c
  5857  001ED8  0629               	decf	strtol@base+1,f,c
  5858  001EDA  EC15  F007         	call	_strtol	;wreg free
  5859  001EDE  C024  F074         	movff	?_strtol,GetIntFromUartData@retVal
  5860  001EE2  C025  F075         	movff	?_strtol+1,GetIntFromUartData@retVal+1
  5861  001EE6  C026  F076         	movff	?_strtol+2,GetIntFromUartData@retVal+2
  5862  001EEA  C027  F077         	movff	?_strtol+3,GetIntFromUartData@retVal+3
  5863                           
  5864                           ;SystemCommon.c: 55: return retVal;
  5865  001EEE  C074  F066         	movff	GetIntFromUartData@retVal,?_GetIntFromUartData
  5866  001EF2  C075  F067         	movff	GetIntFromUartData@retVal+1,?_GetIntFromUartData+1
  5867  001EF6  C076  F068         	movff	GetIntFromUartData@retVal+2,?_GetIntFromUartData+2
  5868  001EFA  C077  F069         	movff	GetIntFromUartData@retVal+3,?_GetIntFromUartData+3
  5869  001EFE  0012               	return	
  5870  001F00                     __end_of_GetIntFromUartData:
  5871                           	opt stack 0
  5872                           tosu	equ	0xFFF
  5873                           tosh	equ	0xFFE
  5874                           tosl	equ	0xFFD
  5875                           pclath	equ	0xFFA
  5876                           tblptru	equ	0xFF8
  5877                           tblptrh	equ	0xFF7
  5878                           tblptrl	equ	0xFF6
  5879                           tablat	equ	0xFF5
  5880                           prodh	equ	0xFF4
  5881                           prodl	equ	0xFF3
  5882                           intcon	equ	0xFF2
  5883                           postinc0	equ	0xFEE
  5884                           wreg	equ	0xFE8
  5885                           indf1	equ	0xFE7
  5886                           postdec1	equ	0xFE5
  5887                           fsr1h	equ	0xFE2
  5888                           fsr1l	equ	0xFE1
  5889                           indf2	equ	0xFDF
  5890                           postinc2	equ	0xFDE
  5891                           fsr2h	equ	0xFDA
  5892                           fsr2l	equ	0xFD9
  5893                           status	equ	0xFD8
  5894                           
  5895 ;; *************** function _strtol *****************
  5896 ;; Defined at:
  5897 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  5898 ;; Parameters:    Size  Location     Type
  5899 ;;  s               2   35[COMRAM] PTR const unsigned char 
  5900 ;;		 -> GetIntFromUartData@dataRegArr(9), 
  5901 ;;  endptr          2   37[COMRAM] PTR PTR unsigned char 
  5902 ;;		 -> NULL(0), 
  5903 ;;  base            2   39[COMRAM] int 
  5904 ;; Auto vars:     Size  Location     Type
  5905 ;;  a               4    1[BANK0 ] long 
  5906 ;;  c               1    5[BANK0 ] unsigned char 
  5907 ;;  sign            1    0[BANK0 ] unsigned char 
  5908 ;; Return value:  Size  Location     Type
  5909 ;;                  4   35[COMRAM] long 
  5910 ;; Registers used:
  5911 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5912 ;; Tracked objects:
  5913 ;;		On entry : 0/0
  5914 ;;		On exit  : 0/0
  5915 ;;		Unchanged: 0/0
  5916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5917 ;;      Params:         6       0       0       0       0       0       0
  5918 ;;      Locals:         0       6       0       0       0       0       0
  5919 ;;      Temps:          4       0       0       0       0       0       0
  5920 ;;      Totals:        10       6       0       0       0       0       0
  5921 ;;Total ram usage:       16 bytes
  5922 ;; Hardware stack levels used:    1
  5923 ;; Hardware stack levels required when called:    5
  5924 ;; This function calls:
  5925 ;;		___lmul
  5926 ;;		_isalpha
  5927 ;;		_isdigit
  5928 ;;		_isspace
  5929 ;;		_toupper
  5930 ;; This function is called by:
  5931 ;;		_GetIntFromUartData
  5932 ;; This function uses a non-reentrant model
  5933 ;;
  5934                           
  5935                           	psect	text28
  5936  000E2A                     __ptext28:
  5937                           	opt stack 0
  5938  000E2A                     _strtol:
  5939                           	opt stack 21
  5940                           
  5941                           ;incstack = 0
  5942  000E2A  C024  FFD9         	movff	strtol@s,fsr2l
  5943  000E2E  C025  FFDA         	movff	strtol@s+1,fsr2h
  5944  000E32  50DF               	movf	indf2,w,c
  5945  000E34  0100               	movlb	0	; () banked
  5946  000E36  6F65               	movwf	strtol@c& (0+255),b
  5947                           
  5948                           ; BSR set to: 0
  5949  000E38  4A24               	infsnz	strtol@s,f,c
  5950  000E3A  2A25               	incf	strtol@s+1,f,c
  5951                           
  5952                           ; BSR set to: 0
  5953  000E3C  5165               	movf	strtol@c& (0+255),w,b
  5954  000E3E  EC86  F01A         	call	_isspace
  5955  000E42  B0D8               	btfsc	status,0,c
  5956  000E44  D7F2               	goto	_strtol
  5957  000E46  0E00               	movlw	0
  5958  000E48  0100               	movlb	0	; () banked
  5959  000E4A  6F61               	movwf	strtol@a& (0+255),b
  5960  000E4C  0E00               	movlw	0
  5961  000E4E  6F62               	movwf	(strtol@a+1)& (0+255),b
  5962  000E50  0E00               	movlw	0
  5963  000E52  6F63               	movwf	(strtol@a+2)& (0+255),b
  5964  000E54  0E00               	movlw	0
  5965  000E56  6F64               	movwf	(strtol@a+3)& (0+255),b
  5966  000E58  0E00               	movlw	0
  5967  000E5A  6F60               	movwf	strtol@sign& (0+255),b
  5968                           
  5969                           ; BSR set to: 0
  5970  000E5C  0E2D               	movlw	45
  5971  000E5E  1965               	xorwf	strtol@c& (0+255),w,b
  5972  000E60  A4D8               	btfss	status,2,c
  5973  000E62  D003               	goto	l1977
  5974                           
  5975                           ; BSR set to: 0
  5976  000E64  0E01               	movlw	1
  5977  000E66  6F60               	movwf	strtol@sign& (0+255),b
  5978  000E68  D004               	goto	u6330
  5979  000E6A                     l1977:
  5980                           
  5981                           ; BSR set to: 0
  5982                           
  5983                           ; BSR set to: 0
  5984  000E6A  0E2B               	movlw	43
  5985  000E6C  1965               	xorwf	strtol@c& (0+255),w,b
  5986  000E6E  A4D8               	btfss	status,2,c
  5987  000E70  D008               	goto	l1979
  5988  000E72                     u6330:
  5989                           
  5990                           ; BSR set to: 0
  5991  000E72  C024  FFD9         	movff	strtol@s,fsr2l
  5992  000E76  C025  FFDA         	movff	strtol@s+1,fsr2h
  5993  000E7A  50DF               	movf	indf2,w,c
  5994  000E7C  6F65               	movwf	strtol@c& (0+255),b
  5995                           
  5996                           ; BSR set to: 0
  5997  000E7E  4A24               	infsnz	strtol@s,f,c
  5998  000E80  2A25               	incf	strtol@s+1,f,c
  5999  000E82                     l1979:
  6000                           
  6001                           ; BSR set to: 0
  6002                           
  6003                           ; BSR set to: 0
  6004                           
  6005                           ; BSR set to: 0
  6006  000E82  0E30               	movlw	48
  6007  000E84  1965               	xorwf	strtol@c& (0+255),w,b
  6008  000E86  A4D8               	btfss	status,2,c
  6009  000E88  D02E               	goto	l1987
  6010                           
  6011                           ; BSR set to: 0
  6012  000E8A  C024  FFD9         	movff	strtol@s,fsr2l
  6013  000E8E  C025  FFDA         	movff	strtol@s+1,fsr2h
  6014  000E92  50DF               	movf	indf2,w,c
  6015  000E94  6F65               	movwf	strtol@c& (0+255),b
  6016                           
  6017                           ; BSR set to: 0
  6018  000E96  4A24               	infsnz	strtol@s,f,c
  6019  000E98  2A25               	incf	strtol@s+1,f,c
  6020                           
  6021                           ; BSR set to: 0
  6022  000E9A  5028               	movf	strtol@base,w,c
  6023  000E9C  1029               	iorwf	strtol@base+1,w,c
  6024  000E9E  B4D8               	btfsc	status,2,c
  6025  000EA0  D005               	goto	u6360
  6026                           
  6027                           ; BSR set to: 0
  6028  000EA2  0E10               	movlw	16
  6029  000EA4  1828               	xorwf	strtol@base,w,c
  6030  000EA6  1029               	iorwf	strtol@base+1,w,c
  6031  000EA8  A4D8               	btfss	status,2,c
  6032  000EAA  D015               	goto	l1981
  6033  000EAC                     u6360:
  6034                           
  6035                           ; BSR set to: 0
  6036                           
  6037                           ; BSR set to: 0
  6038  000EAC  0E78               	movlw	120
  6039  000EAE  1965               	xorwf	strtol@c& (0+255),w,b
  6040  000EB0  B4D8               	btfsc	status,2,c
  6041  000EB2  D004               	goto	u6380
  6042                           
  6043                           ; BSR set to: 0
  6044  000EB4  0E58               	movlw	88
  6045  000EB6  1965               	xorwf	strtol@c& (0+255),w,b
  6046  000EB8  A4D8               	btfss	status,2,c
  6047  000EBA  D00D               	goto	l1981
  6048  000EBC                     u6380:
  6049                           
  6050                           ; BSR set to: 0
  6051                           
  6052                           ; BSR set to: 0
  6053  000EBC  0E00               	movlw	0
  6054  000EBE  6E29               	movwf	strtol@base+1,c
  6055  000EC0  0E10               	movlw	16
  6056  000EC2  6E28               	movwf	strtol@base,c
  6057                           
  6058                           ; BSR set to: 0
  6059  000EC4  C024  FFD9         	movff	strtol@s,fsr2l
  6060  000EC8  C025  FFDA         	movff	strtol@s+1,fsr2h
  6061  000ECC  50DF               	movf	indf2,w,c
  6062  000ECE  6F65               	movwf	strtol@c& (0+255),b
  6063                           
  6064                           ; BSR set to: 0
  6065  000ED0  4A24               	infsnz	strtol@s,f,c
  6066  000ED2  2A25               	incf	strtol@s+1,f,c
  6067  000ED4  D008               	goto	l1987
  6068  000ED6                     l1981:
  6069                           
  6070                           ; BSR set to: 0
  6071                           
  6072                           ; BSR set to: 0
  6073  000ED6  5028               	movf	strtol@base,w,c
  6074  000ED8  1029               	iorwf	strtol@base+1,w,c
  6075  000EDA  A4D8               	btfss	status,2,c
  6076  000EDC  D004               	goto	l1987
  6077                           
  6078                           ; BSR set to: 0
  6079  000EDE  0E00               	movlw	0
  6080  000EE0  6E29               	movwf	strtol@base+1,c
  6081  000EE2  0E08               	movlw	8
  6082  000EE4  6E28               	movwf	strtol@base,c
  6083  000EE6                     l1987:
  6084                           
  6085                           ; BSR set to: 0
  6086                           
  6087                           ; BSR set to: 0
  6088                           
  6089                           ; BSR set to: 0
  6090                           
  6091                           ; BSR set to: 0
  6092  000EE6  5028               	movf	strtol@base,w,c
  6093  000EE8  1029               	iorwf	strtol@base+1,w,c
  6094  000EEA  A4D8               	btfss	status,2,c
  6095  000EEC  D004               	goto	l1988
  6096                           
  6097                           ; BSR set to: 0
  6098  000EEE  0E00               	movlw	0
  6099  000EF0  6E29               	movwf	strtol@base+1,c
  6100  000EF2  0E0A               	movlw	10
  6101  000EF4  6E28               	movwf	strtol@base,c
  6102  000EF6                     l1988:
  6103                           
  6104                           ; BSR set to: 0
  6105                           
  6106                           ; BSR set to: 0
  6107                           
  6108                           ; BSR set to: 0
  6109  000EF6  5165               	movf	strtol@c& (0+255),w,b
  6110  000EF8  EC72  F01A         	call	_isalpha
  6111  000EFC  A0D8               	btfss	status,0,c
  6112  000EFE  D008               	goto	l1990
  6113  000F00  0100               	movlb	0	; () banked
  6114  000F02  5165               	movf	strtol@c& (0+255),w,b
  6115  000F04  EC59  F01B         	call	_toupper
  6116  000F08  0FC9               	addlw	201
  6117  000F0A  0100               	movlb	0	; () banked
  6118  000F0C  6F65               	movwf	strtol@c& (0+255),b
  6119  000F0E  D009               	goto	l1993
  6120  000F10                     l1990:
  6121                           
  6122                           ; BSR set to: 0
  6123  000F10  0100               	movlb	0	; () banked
  6124  000F12  5165               	movf	strtol@c& (0+255),w,b
  6125  000F14  ECE0  F01A         	call	_isdigit
  6126  000F18  A0D8               	btfss	status,0,c
  6127  000F1A  D039               	goto	l1994
  6128  000F1C  0E30               	movlw	48
  6129  000F1E  0100               	movlb	0	; () banked
  6130  000F20  5F65               	subwf	strtol@c& (0+255),f,b
  6131  000F22                     l1993:
  6132                           
  6133                           ; BSR set to: 0
  6134                           
  6135                           ; BSR set to: 0
  6136                           
  6137                           ; BSR set to: 0
  6138  000F22  5165               	movf	strtol@c& (0+255),w,b
  6139  000F24  6E2A               	movwf	??_strtol& (0+255),c
  6140  000F26  6A2B               	clrf	(??_strtol+1)& (0+255),c
  6141  000F28  5028               	movf	strtol@base,w,c
  6142  000F2A  5C2A               	subwf	??_strtol,w,c
  6143  000F2C  502B               	movf	??_strtol+1,w,c
  6144  000F2E  0A80               	xorlw	128
  6145  000F30  6E2C               	movwf	(??_strtol+2)& (0+255),c
  6146  000F32  5029               	movf	strtol@base+1,w,c
  6147  000F34  0A80               	xorlw	128
  6148  000F36  582C               	subwfb	(??_strtol+2)& (0+255),w,c
  6149  000F38  B0D8               	btfsc	status,0,c
  6150  000F3A  D029               	goto	l1994
  6151                           
  6152                           ; BSR set to: 0
  6153                           
  6154                           ; BSR set to: 0
  6155                           
  6156                           ; BSR set to: 0
  6157  000F3C  C028  F018         	movff	strtol@base,___lmul@multiplier
  6158  000F40  C029  F019         	movff	strtol@base+1,___lmul@multiplier+1
  6159  000F44  0E00               	movlw	0
  6160  000F46  BE19               	btfsc	___lmul@multiplier+1,7,c
  6161  000F48  0EFF               	movlw	-1
  6162  000F4A  6E1A               	movwf	___lmul@multiplier+2,c
  6163  000F4C  6E1B               	movwf	___lmul@multiplier+3,c
  6164  000F4E  C061  F01C         	movff	strtol@a,___lmul@multiplicand
  6165  000F52  C062  F01D         	movff	strtol@a+1,___lmul@multiplicand+1
  6166  000F56  C063  F01E         	movff	strtol@a+2,___lmul@multiplicand+2
  6167  000F5A  C064  F01F         	movff	strtol@a+3,___lmul@multiplicand+3
  6168  000F5E  ECFC  F015         	call	___lmul	;wreg free
  6169  000F62  0100               	movlb	0	; () banked
  6170  000F64  5165               	movf	strtol@c& (0+255),w,b
  6171  000F66  2418               	addwf	?___lmul,w,c
  6172  000F68  6F61               	movwf	strtol@a& (0+255),b
  6173  000F6A  0E00               	movlw	0
  6174  000F6C  2019               	addwfc	?___lmul+1,w,c
  6175  000F6E  6F62               	movwf	(strtol@a+1)& (0+255),b
  6176  000F70  0E00               	movlw	0
  6177  000F72  201A               	addwfc	?___lmul+2,w,c
  6178  000F74  6F63               	movwf	(strtol@a+2)& (0+255),b
  6179  000F76  0E00               	movlw	0
  6180  000F78  201B               	addwfc	?___lmul+3,w,c
  6181  000F7A  6F64               	movwf	(strtol@a+3)& (0+255),b
  6182                           
  6183                           ; BSR set to: 0
  6184  000F7C  C024  FFD9         	movff	strtol@s,fsr2l
  6185  000F80  C025  FFDA         	movff	strtol@s+1,fsr2h
  6186  000F84  50DF               	movf	indf2,w,c
  6187  000F86  6F65               	movwf	strtol@c& (0+255),b
  6188                           
  6189                           ; BSR set to: 0
  6190  000F88  4A24               	infsnz	strtol@s,f,c
  6191  000F8A  2A25               	incf	strtol@s+1,f,c
  6192  000F8C  D7B4               	goto	l1988
  6193  000F8E                     l1994:
  6194                           
  6195                           ; BSR set to: 0
  6196  000F8E  5026               	movf	strtol@endptr,w,c
  6197  000F90  1027               	iorwf	strtol@endptr+1,w,c
  6198  000F92  B4D8               	btfsc	status,2,c
  6199  000F94  D00E               	goto	l1996
  6200  000F96  0EFF               	movlw	255
  6201  000F98  2424               	addwf	strtol@s,w,c
  6202  000F9A  6E2A               	movwf	??_strtol& (0+255),c
  6203  000F9C  0EFF               	movlw	255
  6204  000F9E  2025               	addwfc	strtol@s+1,w,c
  6205  000FA0  6E2B               	movwf	(??_strtol+1)& (0+255),c
  6206  000FA2  C026  FFD9         	movff	strtol@endptr,fsr2l
  6207  000FA6  C027  FFDA         	movff	strtol@endptr+1,fsr2h
  6208  000FAA  C02A  FFDE         	movff	??_strtol,postinc2
  6209  000FAE  C02B  FFDD         	movff	??_strtol+1,postdec2
  6210  000FB2                     l1996:
  6211  000FB2  0100               	movlb	0	; () banked
  6212  000FB4  5160               	movf	strtol@sign& (0+255),w,b
  6213  000FB6  B4D8               	btfsc	status,2,c
  6214  000FB8  D01A               	goto	l1997
  6215                           
  6216                           ; BSR set to: 0
  6217  000FBA  C061  F02A         	movff	strtol@a,??_strtol
  6218  000FBE  C062  F02B         	movff	strtol@a+1,??_strtol+1
  6219  000FC2  C063  F02C         	movff	strtol@a+2,??_strtol+2
  6220  000FC6  C064  F02D         	movff	strtol@a+3,??_strtol+3
  6221  000FCA  1E2A               	comf	??_strtol,f,c
  6222  000FCC  1E2B               	comf	??_strtol+1,f,c
  6223  000FCE  1E2C               	comf	??_strtol+2,f,c
  6224  000FD0  1E2D               	comf	??_strtol+3,f,c
  6225  000FD2  2A2A               	incf	??_strtol,f,c
  6226  000FD4  0E00               	movlw	0
  6227  000FD6  222B               	addwfc	??_strtol+1,f,c
  6228  000FD8  222C               	addwfc	??_strtol+2,f,c
  6229  000FDA  222D               	addwfc	??_strtol+3,f,c
  6230  000FDC  C02A  F024         	movff	??_strtol,?_strtol
  6231  000FE0  C02B  F025         	movff	??_strtol+1,?_strtol+1
  6232  000FE4  C02C  F026         	movff	??_strtol+2,?_strtol+2
  6233  000FE8  C02D  F027         	movff	??_strtol+3,?_strtol+3
  6234                           
  6235                           ; BSR set to: 0
  6236  000FEC  0012               	return	
  6237  000FEE                     l1997:
  6238                           
  6239                           ; BSR set to: 0
  6240  000FEE  C061  F024         	movff	strtol@a,?_strtol
  6241  000FF2  C062  F025         	movff	strtol@a+1,?_strtol+1
  6242  000FF6  C063  F026         	movff	strtol@a+2,?_strtol+2
  6243  000FFA  C064  F027         	movff	strtol@a+3,?_strtol+3
  6244                           
  6245                           ; BSR set to: 0
  6246  000FFE  0012               	return		;funcret
  6247  001000                     __end_of_strtol:
  6248                           	opt stack 0
  6249                           tosu	equ	0xFFF
  6250                           tosh	equ	0xFFE
  6251                           tosl	equ	0xFFD
  6252                           pclath	equ	0xFFA
  6253                           tblptru	equ	0xFF8
  6254                           tblptrh	equ	0xFF7
  6255                           tblptrl	equ	0xFF6
  6256                           tablat	equ	0xFF5
  6257                           prodh	equ	0xFF4
  6258                           prodl	equ	0xFF3
  6259                           intcon	equ	0xFF2
  6260                           postinc0	equ	0xFEE
  6261                           wreg	equ	0xFE8
  6262                           indf1	equ	0xFE7
  6263                           postdec1	equ	0xFE5
  6264                           fsr1h	equ	0xFE2
  6265                           fsr1l	equ	0xFE1
  6266                           indf2	equ	0xFDF
  6267                           postinc2	equ	0xFDE
  6268                           postdec2	equ	0xFDD
  6269                           fsr2h	equ	0xFDA
  6270                           fsr2l	equ	0xFD9
  6271                           status	equ	0xFD8
  6272                           
  6273 ;; *************** function _toupper *****************
  6274 ;; Defined at:
  6275 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  6276 ;; Parameters:    Size  Location     Type
  6277 ;;  c               1    wreg     unsigned char 
  6278 ;; Auto vars:     Size  Location     Type
  6279 ;;  c               1   23[COMRAM] unsigned char 
  6280 ;; Return value:  Size  Location     Type
  6281 ;;                  1    wreg      unsigned char 
  6282 ;; Registers used:
  6283 ;;		wreg, status,2, status,0
  6284 ;; Tracked objects:
  6285 ;;		On entry : 0/0
  6286 ;;		On exit  : 0/0
  6287 ;;		Unchanged: 0/0
  6288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6289 ;;      Params:         0       0       0       0       0       0       0
  6290 ;;      Locals:         1       0       0       0       0       0       0
  6291 ;;      Temps:          0       0       0       0       0       0       0
  6292 ;;      Totals:         1       0       0       0       0       0       0
  6293 ;;Total ram usage:        1 bytes
  6294 ;; Hardware stack levels used:    1
  6295 ;; Hardware stack levels required when called:    3
  6296 ;; This function calls:
  6297 ;;		Nothing
  6298 ;; This function is called by:
  6299 ;;		_strtol
  6300 ;; This function uses a non-reentrant model
  6301 ;;
  6302                           
  6303                           	psect	text29
  6304  0036B2                     __ptext29:
  6305                           	opt stack 0
  6306  0036B2                     _toupper:
  6307                           	opt stack 22
  6308                           
  6309                           ; BSR set to: 0
  6310                           ;incstack = 0
  6311                           ;toupper@c stored from wreg
  6312  0036B2  6E18               	movwf	toupper@c,c
  6313  0036B4  0E7B               	movlw	123
  6314  0036B6  6018               	cpfslt	toupper@c,c
  6315  0036B8  D004               	goto	l2001
  6316  0036BA  0E60               	movlw	96
  6317  0036BC  6418               	cpfsgt	toupper@c,c
  6318  0036BE  D001               	goto	l2001
  6319  0036C0  9A18               	bcf	toupper@c,5,c
  6320  0036C2                     l2001:
  6321  0036C2  5018               	movf	toupper@c,w,c
  6322  0036C4  0012               	return	
  6323  0036C6                     __end_of_toupper:
  6324                           	opt stack 0
  6325                           tosu	equ	0xFFF
  6326                           tosh	equ	0xFFE
  6327                           tosl	equ	0xFFD
  6328                           pclath	equ	0xFFA
  6329                           tblptru	equ	0xFF8
  6330                           tblptrh	equ	0xFF7
  6331                           tblptrl	equ	0xFF6
  6332                           tablat	equ	0xFF5
  6333                           prodh	equ	0xFF4
  6334                           prodl	equ	0xFF3
  6335                           intcon	equ	0xFF2
  6336                           postinc0	equ	0xFEE
  6337                           wreg	equ	0xFE8
  6338                           indf1	equ	0xFE7
  6339                           postdec1	equ	0xFE5
  6340                           fsr1h	equ	0xFE2
  6341                           fsr1l	equ	0xFE1
  6342                           indf2	equ	0xFDF
  6343                           postinc2	equ	0xFDE
  6344                           postdec2	equ	0xFDD
  6345                           fsr2h	equ	0xFDA
  6346                           fsr2l	equ	0xFD9
  6347                           status	equ	0xFD8
  6348                           
  6349 ;; *************** function _isspace *****************
  6350 ;; Defined at:
  6351 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  6352 ;; Parameters:    Size  Location     Type
  6353 ;;  c               1    wreg     unsigned char 
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;  c               1   25[COMRAM] unsigned char 
  6356 ;; Return value:  Size  Location     Type
  6357 ;;		None               void
  6358 ;; Registers used:
  6359 ;;		wreg, status,2, status,0
  6360 ;; Tracked objects:
  6361 ;;		On entry : 0/0
  6362 ;;		On exit  : 0/0
  6363 ;;		Unchanged: 0/0
  6364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6365 ;;      Params:         0       0       0       0       0       0       0
  6366 ;;      Locals:         2       0       0       0       0       0       0
  6367 ;;      Temps:          1       0       0       0       0       0       0
  6368 ;;      Totals:         3       0       0       0       0       0       0
  6369 ;;Total ram usage:        3 bytes
  6370 ;; Hardware stack levels used:    1
  6371 ;; Hardware stack levels required when called:    3
  6372 ;; This function calls:
  6373 ;;		Nothing
  6374 ;; This function is called by:
  6375 ;;		_strtol
  6376 ;; This function uses a non-reentrant model
  6377 ;;
  6378                           
  6379                           	psect	text30
  6380  00350C                     __ptext30:
  6381                           	opt stack 0
  6382  00350C                     _isspace:
  6383                           	opt stack 22
  6384                           
  6385                           ;incstack = 0
  6386                           ;isspace@c stored from wreg
  6387  00350C  6E1A               	movwf	isspace@c,c
  6388  00350E  0E01               	movlw	1
  6389  003510  6E19               	movwf	_isspace$2969,c
  6390  003512  0E20               	movlw	32
  6391  003514  181A               	xorwf	isspace@c,w,c
  6392  003516  B4D8               	btfsc	status,2,c
  6393  003518  D008               	goto	l2083
  6394  00351A  0E0E               	movlw	14
  6395  00351C  601A               	cpfslt	isspace@c,c
  6396  00351E  D003               	goto	u6110
  6397  003520  0E09               	movlw	9
  6398  003522  601A               	cpfslt	isspace@c,c
  6399  003524  D002               	goto	l2083
  6400  003526                     u6110:
  6401  003526  0E00               	movlw	0
  6402  003528  6E19               	movwf	_isspace$2969,c
  6403  00352A                     l2083:
  6404  00352A  C019  F018         	movff	_isspace$2969,??_isspace
  6405  00352E  3018               	rrcf	??_isspace,w,c
  6406  003530  0012               	return	
  6407  003532                     __end_of_isspace:
  6408                           	opt stack 0
  6409                           tosu	equ	0xFFF
  6410                           tosh	equ	0xFFE
  6411                           tosl	equ	0xFFD
  6412                           pclath	equ	0xFFA
  6413                           tblptru	equ	0xFF8
  6414                           tblptrh	equ	0xFF7
  6415                           tblptrl	equ	0xFF6
  6416                           tablat	equ	0xFF5
  6417                           prodh	equ	0xFF4
  6418                           prodl	equ	0xFF3
  6419                           intcon	equ	0xFF2
  6420                           postinc0	equ	0xFEE
  6421                           wreg	equ	0xFE8
  6422                           indf1	equ	0xFE7
  6423                           postdec1	equ	0xFE5
  6424                           fsr1h	equ	0xFE2
  6425                           fsr1l	equ	0xFE1
  6426                           indf2	equ	0xFDF
  6427                           postinc2	equ	0xFDE
  6428                           postdec2	equ	0xFDD
  6429                           fsr2h	equ	0xFDA
  6430                           fsr2l	equ	0xFD9
  6431                           status	equ	0xFD8
  6432                           
  6433 ;; *************** function _isdigit *****************
  6434 ;; Defined at:
  6435 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  6436 ;; Parameters:    Size  Location     Type
  6437 ;;  c               1    wreg     unsigned char 
  6438 ;; Auto vars:     Size  Location     Type
  6439 ;;  c               1   25[COMRAM] unsigned char 
  6440 ;; Return value:  Size  Location     Type
  6441 ;;		None               void
  6442 ;; Registers used:
  6443 ;;		wreg, status,2, status,0
  6444 ;; Tracked objects:
  6445 ;;		On entry : 0/0
  6446 ;;		On exit  : 0/0
  6447 ;;		Unchanged: 0/0
  6448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6449 ;;      Params:         0       0       0       0       0       0       0
  6450 ;;      Locals:         2       0       0       0       0       0       0
  6451 ;;      Temps:          1       0       0       0       0       0       0
  6452 ;;      Totals:         3       0       0       0       0       0       0
  6453 ;;Total ram usage:        3 bytes
  6454 ;; Hardware stack levels used:    1
  6455 ;; Hardware stack levels required when called:    3
  6456 ;; This function calls:
  6457 ;;		Nothing
  6458 ;; This function is called by:
  6459 ;;		_strtol
  6460 ;; This function uses a non-reentrant model
  6461 ;;
  6462                           
  6463                           	psect	text31
  6464  0035C0                     __ptext31:
  6465                           	opt stack 0
  6466  0035C0                     _isdigit:
  6467                           	opt stack 22
  6468                           
  6469                           ;incstack = 0
  6470                           ;isdigit@c stored from wreg
  6471  0035C0  6E1A               	movwf	isdigit@c,c
  6472  0035C2  0E00               	movlw	0
  6473  0035C4  6E19               	movwf	_isdigit$2966,c
  6474  0035C6  0E3A               	movlw	58
  6475  0035C8  601A               	cpfslt	isdigit@c,c
  6476  0035CA  D005               	goto	l2078
  6477  0035CC  0E2F               	movlw	47
  6478  0035CE  641A               	cpfsgt	isdigit@c,c
  6479  0035D0  D002               	goto	l2078
  6480  0035D2  0E01               	movlw	1
  6481  0035D4  6E19               	movwf	_isdigit$2966,c
  6482  0035D6                     l2078:
  6483  0035D6  C019  F018         	movff	_isdigit$2966,??_isdigit
  6484  0035DA  3018               	rrcf	??_isdigit,w,c
  6485  0035DC  0012               	return	
  6486  0035DE                     __end_of_isdigit:
  6487                           	opt stack 0
  6488                           tosu	equ	0xFFF
  6489                           tosh	equ	0xFFE
  6490                           tosl	equ	0xFFD
  6491                           pclath	equ	0xFFA
  6492                           tblptru	equ	0xFF8
  6493                           tblptrh	equ	0xFF7
  6494                           tblptrl	equ	0xFF6
  6495                           tablat	equ	0xFF5
  6496                           prodh	equ	0xFF4
  6497                           prodl	equ	0xFF3
  6498                           intcon	equ	0xFF2
  6499                           postinc0	equ	0xFEE
  6500                           wreg	equ	0xFE8
  6501                           indf1	equ	0xFE7
  6502                           postdec1	equ	0xFE5
  6503                           fsr1h	equ	0xFE2
  6504                           fsr1l	equ	0xFE1
  6505                           indf2	equ	0xFDF
  6506                           postinc2	equ	0xFDE
  6507                           postdec2	equ	0xFDD
  6508                           fsr2h	equ	0xFDA
  6509                           fsr2l	equ	0xFD9
  6510                           status	equ	0xFD8
  6511                           
  6512 ;; *************** function _isalpha *****************
  6513 ;; Defined at:
  6514 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  6515 ;; Parameters:    Size  Location     Type
  6516 ;;  c               1    wreg     unsigned char 
  6517 ;; Auto vars:     Size  Location     Type
  6518 ;;  c               1   28[COMRAM] unsigned char 
  6519 ;; Return value:  Size  Location     Type
  6520 ;;		None               void
  6521 ;; Registers used:
  6522 ;;		wreg, status,2, status,0, cstack
  6523 ;; Tracked objects:
  6524 ;;		On entry : 0/0
  6525 ;;		On exit  : 0/0
  6526 ;;		Unchanged: 0/0
  6527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6528 ;;      Params:         0       0       0       0       0       0       0
  6529 ;;      Locals:         2       0       0       0       0       0       0
  6530 ;;      Temps:          1       0       0       0       0       0       0
  6531 ;;      Totals:         3       0       0       0       0       0       0
  6532 ;;Total ram usage:        3 bytes
  6533 ;; Hardware stack levels used:    1
  6534 ;; Hardware stack levels required when called:    4
  6535 ;; This function calls:
  6536 ;;		_isupper
  6537 ;; This function is called by:
  6538 ;;		_strtol
  6539 ;; This function uses a non-reentrant model
  6540 ;;
  6541                           
  6542                           	psect	text32
  6543  0034E4                     __ptext32:
  6544                           	opt stack 0
  6545  0034E4                     _isalpha:
  6546                           	opt stack 21
  6547                           
  6548                           ;incstack = 0
  6549                           ;isalpha@c stored from wreg
  6550  0034E4  6E1D               	movwf	isalpha@c,c
  6551  0034E6  0E01               	movlw	1
  6552  0034E8  6E1C               	movwf	_isalpha$2963,c
  6553  0034EA  0E7B               	movlw	123
  6554  0034EC  601D               	cpfslt	isalpha@c,c
  6555  0034EE  D003               	goto	u6130
  6556  0034F0  0E61               	movlw	97
  6557  0034F2  601D               	cpfslt	isalpha@c,c
  6558  0034F4  D007               	goto	l2073
  6559  0034F6                     u6130:
  6560  0034F6  501D               	movf	isalpha@c,w,c
  6561  0034F8  ECEF  F01A         	call	_isupper
  6562  0034FC  B0D8               	btfsc	status,0,c
  6563  0034FE  D002               	goto	l2073
  6564  003500  0E00               	movlw	0
  6565  003502  6E1C               	movwf	_isalpha$2963,c
  6566  003504                     l2073:
  6567  003504  C01C  F01B         	movff	_isalpha$2963,??_isalpha
  6568  003508  301B               	rrcf	??_isalpha,w,c
  6569  00350A  0012               	return	
  6570  00350C                     __end_of_isalpha:
  6571                           	opt stack 0
  6572                           tosu	equ	0xFFF
  6573                           tosh	equ	0xFFE
  6574                           tosl	equ	0xFFD
  6575                           pclath	equ	0xFFA
  6576                           tblptru	equ	0xFF8
  6577                           tblptrh	equ	0xFF7
  6578                           tblptrl	equ	0xFF6
  6579                           tablat	equ	0xFF5
  6580                           prodh	equ	0xFF4
  6581                           prodl	equ	0xFF3
  6582                           intcon	equ	0xFF2
  6583                           postinc0	equ	0xFEE
  6584                           wreg	equ	0xFE8
  6585                           indf1	equ	0xFE7
  6586                           postdec1	equ	0xFE5
  6587                           fsr1h	equ	0xFE2
  6588                           fsr1l	equ	0xFE1
  6589                           indf2	equ	0xFDF
  6590                           postinc2	equ	0xFDE
  6591                           postdec2	equ	0xFDD
  6592                           fsr2h	equ	0xFDA
  6593                           fsr2l	equ	0xFD9
  6594                           status	equ	0xFD8
  6595                           
  6596 ;; *************** function _isupper *****************
  6597 ;; Defined at:
  6598 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  6599 ;; Parameters:    Size  Location     Type
  6600 ;;  c               1    wreg     unsigned char 
  6601 ;; Auto vars:     Size  Location     Type
  6602 ;;  c               1   25[COMRAM] unsigned char 
  6603 ;; Return value:  Size  Location     Type
  6604 ;;		None               void
  6605 ;; Registers used:
  6606 ;;		wreg, status,2, status,0
  6607 ;; Tracked objects:
  6608 ;;		On entry : 0/0
  6609 ;;		On exit  : 0/0
  6610 ;;		Unchanged: 0/0
  6611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6612 ;;      Params:         0       0       0       0       0       0       0
  6613 ;;      Locals:         2       0       0       0       0       0       0
  6614 ;;      Temps:          1       0       0       0       0       0       0
  6615 ;;      Totals:         3       0       0       0       0       0       0
  6616 ;;Total ram usage:        3 bytes
  6617 ;; Hardware stack levels used:    1
  6618 ;; Hardware stack levels required when called:    3
  6619 ;; This function calls:
  6620 ;;		Nothing
  6621 ;; This function is called by:
  6622 ;;		_isalpha
  6623 ;; This function uses a non-reentrant model
  6624 ;;
  6625                           
  6626                           	psect	text33
  6627  0035DE                     __ptext33:
  6628                           	opt stack 0
  6629  0035DE                     _isupper:
  6630                           	opt stack 21
  6631                           
  6632                           ;incstack = 0
  6633                           ;isupper@c stored from wreg
  6634  0035DE  6E1A               	movwf	isupper@c,c
  6635  0035E0  0E00               	movlw	0
  6636  0035E2  6E19               	movwf	_isupper$2972,c
  6637  0035E4  0E5B               	movlw	91
  6638  0035E6  601A               	cpfslt	isupper@c,c
  6639  0035E8  D005               	goto	l2088
  6640  0035EA  0E40               	movlw	64
  6641  0035EC  641A               	cpfsgt	isupper@c,c
  6642  0035EE  D002               	goto	l2088
  6643  0035F0  0E01               	movlw	1
  6644  0035F2  6E19               	movwf	_isupper$2972,c
  6645  0035F4                     l2088:
  6646  0035F4  C019  F018         	movff	_isupper$2972,??_isupper
  6647  0035F8  3018               	rrcf	??_isupper,w,c
  6648  0035FA  0012               	return	
  6649  0035FC                     __end_of_isupper:
  6650                           	opt stack 0
  6651                           tosu	equ	0xFFF
  6652                           tosh	equ	0xFFE
  6653                           tosl	equ	0xFFD
  6654                           pclath	equ	0xFFA
  6655                           tblptru	equ	0xFF8
  6656                           tblptrh	equ	0xFF7
  6657                           tblptrl	equ	0xFF6
  6658                           tablat	equ	0xFF5
  6659                           prodh	equ	0xFF4
  6660                           prodl	equ	0xFF3
  6661                           intcon	equ	0xFF2
  6662                           postinc0	equ	0xFEE
  6663                           wreg	equ	0xFE8
  6664                           indf1	equ	0xFE7
  6665                           postdec1	equ	0xFE5
  6666                           fsr1h	equ	0xFE2
  6667                           fsr1l	equ	0xFE1
  6668                           indf2	equ	0xFDF
  6669                           postinc2	equ	0xFDE
  6670                           postdec2	equ	0xFDD
  6671                           fsr2h	equ	0xFDA
  6672                           fsr2l	equ	0xFD9
  6673                           status	equ	0xFD8
  6674                           
  6675 ;; *************** function ___lmul *****************
  6676 ;; Defined at:
  6677 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  6678 ;; Parameters:    Size  Location     Type
  6679 ;;  multiplier      4   23[COMRAM] unsigned long 
  6680 ;;  multiplicand    4   27[COMRAM] unsigned long 
  6681 ;; Auto vars:     Size  Location     Type
  6682 ;;  product         4   31[COMRAM] unsigned long 
  6683 ;; Return value:  Size  Location     Type
  6684 ;;                  4   23[COMRAM] unsigned long 
  6685 ;; Registers used:
  6686 ;;		wreg, status,2, status,0
  6687 ;; Tracked objects:
  6688 ;;		On entry : 0/0
  6689 ;;		On exit  : 0/0
  6690 ;;		Unchanged: 0/0
  6691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6692 ;;      Params:         8       0       0       0       0       0       0
  6693 ;;      Locals:         4       0       0       0       0       0       0
  6694 ;;      Temps:          0       0       0       0       0       0       0
  6695 ;;      Totals:        12       0       0       0       0       0       0
  6696 ;;Total ram usage:       12 bytes
  6697 ;; Hardware stack levels used:    1
  6698 ;; Hardware stack levels required when called:    3
  6699 ;; This function calls:
  6700 ;;		Nothing
  6701 ;; This function is called by:
  6702 ;;		_strtol
  6703 ;; This function uses a non-reentrant model
  6704 ;;
  6705                           
  6706                           	psect	text34
  6707  002BF8                     __ptext34:
  6708                           	opt stack 0
  6709  002BF8                     ___lmul:
  6710                           	opt stack 22
  6711                           
  6712                           ;incstack = 0
  6713  002BF8  0E00               	movlw	0
  6714  002BFA  6E20               	movwf	___lmul@product,c
  6715  002BFC  0E00               	movlw	0
  6716  002BFE  6E21               	movwf	___lmul@product+1,c
  6717  002C00  0E00               	movlw	0
  6718  002C02  6E22               	movwf	___lmul@product+2,c
  6719  002C04  0E00               	movlw	0
  6720  002C06  6E23               	movwf	___lmul@product+3,c
  6721  002C08  A018               	btfss	___lmul@multiplier,0,c
  6722  002C0A  D008               	goto	l1407
  6723  002C0C  501C               	movf	___lmul@multiplicand,w,c
  6724  002C0E  2620               	addwf	___lmul@product,f,c
  6725  002C10  501D               	movf	___lmul@multiplicand+1,w,c
  6726  002C12  2221               	addwfc	___lmul@product+1,f,c
  6727  002C14  501E               	movf	___lmul@multiplicand+2,w,c
  6728  002C16  2222               	addwfc	___lmul@product+2,f,c
  6729  002C18  501F               	movf	___lmul@multiplicand+3,w,c
  6730  002C1A  2223               	addwfc	___lmul@product+3,f,c
  6731  002C1C                     l1407:
  6732  002C1C  90D8               	bcf	status,0,c
  6733  002C1E  361C               	rlcf	___lmul@multiplicand,f,c
  6734  002C20  361D               	rlcf	___lmul@multiplicand+1,f,c
  6735  002C22  361E               	rlcf	___lmul@multiplicand+2,f,c
  6736  002C24  361F               	rlcf	___lmul@multiplicand+3,f,c
  6737  002C26  90D8               	bcf	status,0,c
  6738  002C28  321B               	rrcf	___lmul@multiplier+3,f,c
  6739  002C2A  321A               	rrcf	___lmul@multiplier+2,f,c
  6740  002C2C  3219               	rrcf	___lmul@multiplier+1,f,c
  6741  002C2E  3218               	rrcf	___lmul@multiplier,f,c
  6742  002C30  5018               	movf	___lmul@multiplier,w,c
  6743  002C32  1019               	iorwf	___lmul@multiplier+1,w,c
  6744  002C34  101A               	iorwf	___lmul@multiplier+2,w,c
  6745  002C36  101B               	iorwf	___lmul@multiplier+3,w,c
  6746  002C38  A4D8               	btfss	status,2,c
  6747  002C3A  D7E6               	goto	l1406
  6748  002C3C  C020  F018         	movff	___lmul@product,?___lmul
  6749  002C40  C021  F019         	movff	___lmul@product+1,?___lmul+1
  6750  002C44  C022  F01A         	movff	___lmul@product+2,?___lmul+2
  6751  002C48  C023  F01B         	movff	___lmul@product+3,?___lmul+3
  6752  002C4C  0012               	return		;funcret
  6753  002C4E                     __end_of___lmul:
  6754                           	opt stack 0
  6755                           tosu	equ	0xFFF
  6756                           tosh	equ	0xFFE
  6757                           tosl	equ	0xFFD
  6758                           pclath	equ	0xFFA
  6759                           tblptru	equ	0xFF8
  6760                           tblptrh	equ	0xFF7
  6761                           tblptrl	equ	0xFF6
  6762                           tablat	equ	0xFF5
  6763                           prodh	equ	0xFF4
  6764                           prodl	equ	0xFF3
  6765                           intcon	equ	0xFF2
  6766                           postinc0	equ	0xFEE
  6767                           wreg	equ	0xFE8
  6768                           indf1	equ	0xFE7
  6769                           postdec1	equ	0xFE5
  6770                           fsr1h	equ	0xFE2
  6771                           fsr1l	equ	0xFE1
  6772                           indf2	equ	0xFDF
  6773                           postinc2	equ	0xFDE
  6774                           postdec2	equ	0xFDD
  6775                           fsr2h	equ	0xFDA
  6776                           fsr2l	equ	0xFD9
  6777                           status	equ	0xFD8
  6778                           
  6779 ;; *************** function _testLeds *****************
  6780 ;; Defined at:
  6781 ;;		line 43 in file "LedsApp.c"
  6782 ;; Parameters:    Size  Location     Type
  6783 ;;		None
  6784 ;; Auto vars:     Size  Location     Type
  6785 ;;  idx             2   44[COMRAM] int 
  6786 ;; Return value:  Size  Location     Type
  6787 ;;                  1    wreg      void 
  6788 ;; Registers used:
  6789 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6790 ;; Tracked objects:
  6791 ;;		On entry : 0/0
  6792 ;;		On exit  : 0/0
  6793 ;;		Unchanged: 0/0
  6794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6795 ;;      Params:         0       0       0       0       0       0       0
  6796 ;;      Locals:         2       0       0       0       0       0       0
  6797 ;;      Temps:          1       0       0       0       0       0       0
  6798 ;;      Totals:         3       0       0       0       0       0       0
  6799 ;;Total ram usage:        3 bytes
  6800 ;; Hardware stack levels used:    1
  6801 ;; Hardware stack levels required when called:    6
  6802 ;; This function calls:
  6803 ;;		_SendAckMessage
  6804 ;; This function is called by:
  6805 ;;		_GroupControlMcu
  6806 ;; This function uses a non-reentrant model
  6807 ;;
  6808                           
  6809                           	psect	text35
  6810  002790                     __ptext35:
  6811                           	opt stack 0
  6812  002790                     _testLeds:
  6813                           	opt stack 22
  6814                           
  6815                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  6816                           
  6817                           ;incstack = 0
  6818  002790  0E00               	movlw	0
  6819  002792  6E2E               	movwf	testLeds@idx+1,c
  6820  002794  0E00               	movlw	0
  6821  002796  6E2D               	movwf	testLeds@idx,c
  6822  002798                     l7177:
  6823  002798  BE2E               	btfsc	testLeds@idx+1,7,c
  6824  00279A  D006               	goto	l50
  6825  00279C  502E               	movf	testLeds@idx+1,w,c
  6826  00279E  E127               	bnz	l7191
  6827  0027A0  0E0A               	movlw	10
  6828  0027A2  5C2D               	subwf	testLeds@idx,w,c
  6829  0027A4  B0D8               	btfsc	status,0,c
  6830  0027A6  D023               	goto	u7070
  6831  0027A8                     l50:
  6832                           
  6833                           ;LedsApp.c: 47: {
  6834                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  6835  0027A8  808B               	bsf	3979,0,c	;volatile
  6836                           
  6837                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  6838  0027AA  0E82               	movlw	130
  6839  0027AC  6E2C               	movwf	??_testLeds& (0+255),c
  6840  0027AE  0EDE               	movlw	222
  6841  0027B0                     u8097:
  6842  0027B0  2EE8               	decfsz	wreg,f,c
  6843  0027B2  D7FE               	bra	u8097
  6844  0027B4  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6845  0027B6  D7FC               	bra	u8097
  6846                           
  6847                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  6848  0027B8  888A               	bsf	3978,4,c	;volatile
  6849                           
  6850                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  6851  0027BA  0E82               	movlw	130
  6852  0027BC  6E2C               	movwf	??_testLeds& (0+255),c
  6853  0027BE  0EDE               	movlw	222
  6854  0027C0                     u8107:
  6855  0027C0  2EE8               	decfsz	wreg,f,c
  6856  0027C2  D7FE               	bra	u8107
  6857  0027C4  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6858  0027C6  D7FC               	bra	u8107
  6859                           
  6860                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  6861  0027C8  908B               	bcf	3979,0,c	;volatile
  6862                           
  6863                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  6864  0027CA  0E82               	movlw	130
  6865  0027CC  6E2C               	movwf	??_testLeds& (0+255),c
  6866  0027CE  0EDE               	movlw	222
  6867  0027D0                     u8117:
  6868  0027D0  2EE8               	decfsz	wreg,f,c
  6869  0027D2  D7FE               	bra	u8117
  6870  0027D4  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6871  0027D6  D7FC               	bra	u8117
  6872                           
  6873                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  6874  0027D8  988A               	bcf	3978,4,c	;volatile
  6875                           
  6876                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  6877  0027DA  0E82               	movlw	130
  6878  0027DC  6E2C               	movwf	??_testLeds& (0+255),c
  6879  0027DE  0EDE               	movlw	222
  6880  0027E0                     u8127:
  6881  0027E0  2EE8               	decfsz	wreg,f,c
  6882  0027E2  D7FE               	bra	u8127
  6883  0027E4  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6884  0027E6  D7FC               	bra	u8127
  6885  0027E8  4A2D               	infsnz	testLeds@idx,f,c
  6886  0027EA  2A2E               	incf	testLeds@idx+1,f,c
  6887  0027EC  D7D5               	goto	l7177
  6888  0027EE                     u7070:
  6889  0027EE                     l7191:
  6890                           
  6891                           ;LedsApp.c: 57: }
  6892                           ;LedsApp.c: 59: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_TEST_LEDS);
  6893  0027EE  0E15               	movlw	21
  6894  0027F0  6E24               	movwf	SendAckMessage@inRequest,c
  6895  0027F2  0E01               	movlw	1
  6896  0027F4  ECF8  F016         	call	_SendAckMessage
  6897  0027F8  0012               	return	
  6898  0027FA                     __end_of_testLeds:
  6899                           	opt stack 0
  6900                           tosu	equ	0xFFF
  6901                           tosh	equ	0xFFE
  6902                           tosl	equ	0xFFD
  6903                           pclath	equ	0xFFA
  6904                           tblptru	equ	0xFF8
  6905                           tblptrh	equ	0xFF7
  6906                           tblptrl	equ	0xFF6
  6907                           tablat	equ	0xFF5
  6908                           prodh	equ	0xFF4
  6909                           prodl	equ	0xFF3
  6910                           intcon	equ	0xFF2
  6911                           postinc0	equ	0xFEE
  6912                           wreg	equ	0xFE8
  6913                           indf1	equ	0xFE7
  6914                           postdec1	equ	0xFE5
  6915                           fsr1h	equ	0xFE2
  6916                           fsr1l	equ	0xFE1
  6917                           indf2	equ	0xFDF
  6918                           postinc2	equ	0xFDE
  6919                           postdec2	equ	0xFDD
  6920                           fsr2h	equ	0xFDA
  6921                           fsr2l	equ	0xFD9
  6922                           status	equ	0xFD8
  6923                           
  6924 ;; *************** function _ResetMcu *****************
  6925 ;; Defined at:
  6926 ;;		line 114 in file "SystemCommon.c"
  6927 ;; Parameters:    Size  Location     Type
  6928 ;;		None
  6929 ;; Auto vars:     Size  Location     Type
  6930 ;;		None
  6931 ;; Return value:  Size  Location     Type
  6932 ;;                  1    wreg      void 
  6933 ;; Registers used:
  6934 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6935 ;; Tracked objects:
  6936 ;;		On entry : 0/0
  6937 ;;		On exit  : 0/0
  6938 ;;		Unchanged: 0/0
  6939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6940 ;;      Params:         0       0       0       0       0       0       0
  6941 ;;      Locals:         0       0       0       0       0       0       0
  6942 ;;      Temps:          0       0       0       0       0       0       0
  6943 ;;      Totals:         0       0       0       0       0       0       0
  6944 ;;Total ram usage:        0 bytes
  6945 ;; Hardware stack levels used:    1
  6946 ;; Hardware stack levels required when called:    6
  6947 ;; This function calls:
  6948 ;;		_SendAckMessage
  6949 ;; This function is called by:
  6950 ;;		_GroupControlMcu
  6951 ;; This function uses a non-reentrant model
  6952 ;;
  6953                           
  6954                           	psect	text36
  6955  00372E                     __ptext36:
  6956                           	opt stack 0
  6957  00372E                     _ResetMcu:
  6958                           	opt stack 22
  6959                           
  6960                           ;SystemCommon.c: 117: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET
      +                          _MCU);
  6961                           
  6962                           ;incstack = 0
  6963  00372E  0E11               	movlw	17
  6964  003730  6E24               	movwf	SendAckMessage@inRequest,c
  6965  003732  0E01               	movlw	1
  6966  003734  ECF8  F016         	call	_SendAckMessage
  6967  003738  00FF               	reset		;# 
  6968  00373A  0012               	return		;funcret
  6969  00373C                     __end_of_ResetMcu:
  6970                           	opt stack 0
  6971                           tosu	equ	0xFFF
  6972                           tosh	equ	0xFFE
  6973                           tosl	equ	0xFFD
  6974                           pclath	equ	0xFFA
  6975                           tblptru	equ	0xFF8
  6976                           tblptrh	equ	0xFF7
  6977                           tblptrl	equ	0xFF6
  6978                           tablat	equ	0xFF5
  6979                           prodh	equ	0xFF4
  6980                           prodl	equ	0xFF3
  6981                           intcon	equ	0xFF2
  6982                           postinc0	equ	0xFEE
  6983                           wreg	equ	0xFE8
  6984                           indf1	equ	0xFE7
  6985                           postdec1	equ	0xFE5
  6986                           fsr1h	equ	0xFE2
  6987                           fsr1l	equ	0xFE1
  6988                           indf2	equ	0xFDF
  6989                           postinc2	equ	0xFDE
  6990                           postdec2	equ	0xFDD
  6991                           fsr2h	equ	0xFDA
  6992                           fsr2l	equ	0xFD9
  6993                           status	equ	0xFD8
  6994                           
  6995 ;; *************** function _ResetCpld *****************
  6996 ;; Defined at:
  6997 ;;		line 123 in file "SystemCommon.c"
  6998 ;; Parameters:    Size  Location     Type
  6999 ;;		None
  7000 ;; Auto vars:     Size  Location     Type
  7001 ;;		None
  7002 ;; Return value:  Size  Location     Type
  7003 ;;                  1    wreg      void 
  7004 ;; Registers used:
  7005 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7006 ;; Tracked objects:
  7007 ;;		On entry : 0/0
  7008 ;;		On exit  : 0/0
  7009 ;;		Unchanged: 0/0
  7010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7011 ;;      Params:         0       0       0       0       0       0       0
  7012 ;;      Locals:         0       0       0       0       0       0       0
  7013 ;;      Temps:          0       0       0       0       0       0       0
  7014 ;;      Totals:         0       0       0       0       0       0       0
  7015 ;;Total ram usage:        0 bytes
  7016 ;; Hardware stack levels used:    1
  7017 ;; Hardware stack levels required when called:    6
  7018 ;; This function calls:
  7019 ;;		_SendAckMessage
  7020 ;; This function is called by:
  7021 ;;		_GroupControlMcu
  7022 ;; This function uses a non-reentrant model
  7023 ;;
  7024                           
  7025                           	psect	text37
  7026  003758                     __ptext37:
  7027                           	opt stack 0
  7028  003758                     _ResetCpld:
  7029                           	opt stack 22
  7030                           
  7031                           ;SystemCommon.c: 126: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET
      +                          _CPLD);
  7032                           
  7033                           ;incstack = 0
  7034  003758  0E12               	movlw	18
  7035  00375A  6E24               	movwf	SendAckMessage@inRequest,c
  7036  00375C  0E01               	movlw	1
  7037  00375E  ECF8  F016         	call	_SendAckMessage
  7038  003762  0012               	return		;funcret
  7039  003764                     __end_of_ResetCpld:
  7040                           	opt stack 0
  7041                           tosu	equ	0xFFF
  7042                           tosh	equ	0xFFE
  7043                           tosl	equ	0xFFD
  7044                           pclath	equ	0xFFA
  7045                           tblptru	equ	0xFF8
  7046                           tblptrh	equ	0xFF7
  7047                           tblptrl	equ	0xFF6
  7048                           tablat	equ	0xFF5
  7049                           prodh	equ	0xFF4
  7050                           prodl	equ	0xFF3
  7051                           intcon	equ	0xFF2
  7052                           postinc0	equ	0xFEE
  7053                           wreg	equ	0xFE8
  7054                           indf1	equ	0xFE7
  7055                           postdec1	equ	0xFE5
  7056                           fsr1h	equ	0xFE2
  7057                           fsr1l	equ	0xFE1
  7058                           indf2	equ	0xFDF
  7059                           postinc2	equ	0xFDE
  7060                           postdec2	equ	0xFDD
  7061                           fsr2h	equ	0xFDA
  7062                           fsr2l	equ	0xFD9
  7063                           status	equ	0xFD8
  7064                           
  7065 ;; *************** function _SetConversionResultFormat *****************
  7066 ;; Defined at:
  7067 ;;		line 38 in file "AdcApp.c"
  7068 ;; Parameters:    Size  Location     Type
  7069 ;;  data            2   43[COMRAM] PTR unsigned char 
  7070 ;; Auto vars:     Size  Location     Type
  7071 ;;		None
  7072 ;; Return value:  Size  Location     Type
  7073 ;;                  1    wreg      void 
  7074 ;; Registers used:
  7075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7076 ;; Tracked objects:
  7077 ;;		On entry : 0/0
  7078 ;;		On exit  : 0/0
  7079 ;;		Unchanged: 0/0
  7080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7081 ;;      Params:         2       0       0       0       0       0       0
  7082 ;;      Locals:         0       0       0       0       0       0       0
  7083 ;;      Temps:          0       0       0       0       0       0       0
  7084 ;;      Totals:         2       0       0       0       0       0       0
  7085 ;;Total ram usage:        2 bytes
  7086 ;; Hardware stack levels used:    1
  7087 ;; Hardware stack levels required when called:    6
  7088 ;; This function calls:
  7089 ;;		_SendAckMessage
  7090 ;; This function is called by:
  7091 ;;		_GroupAdc
  7092 ;; This function uses a non-reentrant model
  7093 ;;
  7094                           
  7095                           	psect	text38
  7096  003764                     __ptext38:
  7097                           	opt stack 0
  7098  003764                     _SetConversionResultFormat:
  7099                           	opt stack 22
  7100                           
  7101                           ;AdcApp.c: 40: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CONVERSION_MODE);
  7102                           
  7103                           ;incstack = 0
  7104  003764  0E33               	movlw	51
  7105  003766  6E24               	movwf	SendAckMessage@inRequest,c
  7106  003768  0E03               	movlw	3
  7107  00376A  ECF8  F016         	call	_SendAckMessage
  7108  00376E  0012               	return		;funcret
  7109  003770                     __end_of_SetConversionResultFormat:
  7110                           	opt stack 0
  7111                           tosu	equ	0xFFF
  7112                           tosh	equ	0xFFE
  7113                           tosl	equ	0xFFD
  7114                           pclath	equ	0xFFA
  7115                           tblptru	equ	0xFF8
  7116                           tblptrh	equ	0xFF7
  7117                           tblptrl	equ	0xFF6
  7118                           tablat	equ	0xFF5
  7119                           prodh	equ	0xFF4
  7120                           prodl	equ	0xFF3
  7121                           intcon	equ	0xFF2
  7122                           postinc0	equ	0xFEE
  7123                           wreg	equ	0xFE8
  7124                           indf1	equ	0xFE7
  7125                           postdec1	equ	0xFE5
  7126                           fsr1h	equ	0xFE2
  7127                           fsr1l	equ	0xFE1
  7128                           indf2	equ	0xFDF
  7129                           postinc2	equ	0xFDE
  7130                           postdec2	equ	0xFDD
  7131                           fsr2h	equ	0xFDA
  7132                           fsr2l	equ	0xFD9
  7133                           status	equ	0xFD8
  7134                           
  7135 ;; *************** function _SetChannelMode *****************
  7136 ;; Defined at:
  7137 ;;		line 43 in file "AdcApp.c"
  7138 ;; Parameters:    Size  Location     Type
  7139 ;;  data            2   43[COMRAM] PTR unsigned char 
  7140 ;; Auto vars:     Size  Location     Type
  7141 ;;		None
  7142 ;; Return value:  Size  Location     Type
  7143 ;;                  1    wreg      void 
  7144 ;; Registers used:
  7145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7146 ;; Tracked objects:
  7147 ;;		On entry : 0/0
  7148 ;;		On exit  : 0/0
  7149 ;;		Unchanged: 0/0
  7150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7151 ;;      Params:         2       0       0       0       0       0       0
  7152 ;;      Locals:         0       0       0       0       0       0       0
  7153 ;;      Temps:          0       0       0       0       0       0       0
  7154 ;;      Totals:         2       0       0       0       0       0       0
  7155 ;;Total ram usage:        2 bytes
  7156 ;; Hardware stack levels used:    1
  7157 ;; Hardware stack levels required when called:    6
  7158 ;; This function calls:
  7159 ;;		_SendAckMessage
  7160 ;; This function is called by:
  7161 ;;		_GroupAdc
  7162 ;; This function uses a non-reentrant model
  7163 ;;
  7164                           
  7165                           	psect	text39
  7166  0033DA                     __ptext39:
  7167                           	opt stack 0
  7168  0033DA                     _SetChannelMode:
  7169                           	opt stack 22
  7170                           
  7171                           ;AdcApp.c: 45: adcSampleMode = data[0];
  7172                           
  7173                           ;incstack = 0
  7174  0033DA  C02C  FFD9         	movff	SetChannelMode@data,fsr2l
  7175  0033DE  C02D  FFDA         	movff	SetChannelMode@data+1,fsr2h
  7176  0033E2  50DF               	movf	indf2,w,c
  7177  0033E4  6E3D               	movwf	_adcSampleMode,c
  7178                           
  7179                           ;AdcApp.c: 46: if (adcSampleMode == SINGLE_CHANNEL)
  7180  0033E6  043D               	decf	_adcSampleMode,w,c
  7181  0033E8  A4D8               	btfss	status,2,c
  7182  0033EA  D009               	goto	l108
  7183                           
  7184                           ;AdcApp.c: 47: {
  7185                           ;AdcApp.c: 48: channel = data[1];
  7186  0033EC  EE20 F001          	lfsr	2,1
  7187  0033F0  502C               	movf	SetChannelMode@data,w,c
  7188  0033F2  26D9               	addwf	fsr2l,f,c
  7189  0033F4  502D               	movf	SetChannelMode@data+1,w,c
  7190  0033F6  22DA               	addwfc	fsr2h,f,c
  7191  0033F8  50DF               	movf	indf2,w,c
  7192  0033FA  0100               	movlb	0	; () banked
  7193  0033FC  6FD4               	movwf	_channel& (0+255),b
  7194  0033FE                     l108:
  7195                           
  7196                           ;AdcApp.c: 49: }
  7197                           ;AdcApp.c: 50: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CHANNEL_MODE);
  7198                           
  7199                           ; BSR set to: 0
  7200  0033FE  0E32               	movlw	50
  7201  003400  6E24               	movwf	SendAckMessage@inRequest,c
  7202  003402  0E03               	movlw	3
  7203  003404  ECF8  F016         	call	_SendAckMessage
  7204  003408  0012               	return		;funcret
  7205  00340A                     __end_of_SetChannelMode:
  7206                           	opt stack 0
  7207                           tosu	equ	0xFFF
  7208                           tosh	equ	0xFFE
  7209                           tosl	equ	0xFFD
  7210                           pclath	equ	0xFFA
  7211                           tblptru	equ	0xFF8
  7212                           tblptrh	equ	0xFF7
  7213                           tblptrl	equ	0xFF6
  7214                           tablat	equ	0xFF5
  7215                           prodh	equ	0xFF4
  7216                           prodl	equ	0xFF3
  7217                           intcon	equ	0xFF2
  7218                           postinc0	equ	0xFEE
  7219                           wreg	equ	0xFE8
  7220                           indf1	equ	0xFE7
  7221                           postdec1	equ	0xFE5
  7222                           fsr1h	equ	0xFE2
  7223                           fsr1l	equ	0xFE1
  7224                           indf2	equ	0xFDF
  7225                           postinc2	equ	0xFDE
  7226                           postdec2	equ	0xFDD
  7227                           fsr2h	equ	0xFDA
  7228                           fsr2l	equ	0xFD9
  7229                           status	equ	0xFD8
  7230                           
  7231 ;; *************** function _SetAdcOperationMode *****************
  7232 ;; Defined at:
  7233 ;;		line 33 in file "AdcApp.c"
  7234 ;; Parameters:    Size  Location     Type
  7235 ;;  data            2   43[COMRAM] PTR unsigned char 
  7236 ;; Auto vars:     Size  Location     Type
  7237 ;;		None
  7238 ;; Return value:  Size  Location     Type
  7239 ;;                  1    wreg      void 
  7240 ;; Registers used:
  7241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7242 ;; Tracked objects:
  7243 ;;		On entry : 0/0
  7244 ;;		On exit  : 0/0
  7245 ;;		Unchanged: 0/0
  7246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7247 ;;      Params:         2       0       0       0       0       0       0
  7248 ;;      Locals:         0       0       0       0       0       0       0
  7249 ;;      Temps:          0       0       0       0       0       0       0
  7250 ;;      Totals:         2       0       0       0       0       0       0
  7251 ;;Total ram usage:        2 bytes
  7252 ;; Hardware stack levels used:    1
  7253 ;; Hardware stack levels required when called:    6
  7254 ;; This function calls:
  7255 ;;		_SendAckMessage
  7256 ;; This function is called by:
  7257 ;;		_GroupAdc
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261                           	psect	text40
  7262  003770                     __ptext40:
  7263                           	opt stack 0
  7264  003770                     _SetAdcOperationMode:
  7265                           	opt stack 22
  7266                           
  7267                           ;AdcApp.c: 35: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_OPERATION);
  7268                           
  7269                           ;incstack = 0
  7270  003770  0E31               	movlw	49
  7271  003772  6E24               	movwf	SendAckMessage@inRequest,c
  7272  003774  0E03               	movlw	3
  7273  003776  ECF8  F016         	call	_SendAckMessage
  7274  00377A  0012               	return		;funcret
  7275  00377C                     __end_of_SetAdcOperationMode:
  7276                           	opt stack 0
  7277                           tosu	equ	0xFFF
  7278                           tosh	equ	0xFFE
  7279                           tosl	equ	0xFFD
  7280                           pclath	equ	0xFFA
  7281                           tblptru	equ	0xFF8
  7282                           tblptrh	equ	0xFF7
  7283                           tblptrl	equ	0xFF6
  7284                           tablat	equ	0xFF5
  7285                           prodh	equ	0xFF4
  7286                           prodl	equ	0xFF3
  7287                           intcon	equ	0xFF2
  7288                           postinc0	equ	0xFEE
  7289                           wreg	equ	0xFE8
  7290                           indf1	equ	0xFE7
  7291                           postdec1	equ	0xFE5
  7292                           fsr1h	equ	0xFE2
  7293                           fsr1l	equ	0xFE1
  7294                           indf2	equ	0xFDF
  7295                           postinc2	equ	0xFDE
  7296                           postdec2	equ	0xFDD
  7297                           fsr2h	equ	0xFDA
  7298                           fsr2l	equ	0xFD9
  7299                           status	equ	0xFD8
  7300                           
  7301 ;; *************** function _EUSART1_Read *****************
  7302 ;; Defined at:
  7303 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  7304 ;; Parameters:    Size  Location     Type
  7305 ;;		None
  7306 ;; Auto vars:     Size  Location     Type
  7307 ;;  readValue       2   24[COMRAM] unsigned int 
  7308 ;; Return value:  Size  Location     Type
  7309 ;;                  1    wreg      unsigned char 
  7310 ;; Registers used:
  7311 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7312 ;; Tracked objects:
  7313 ;;		On entry : 0/0
  7314 ;;		On exit  : 0/0
  7315 ;;		Unchanged: 0/0
  7316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7317 ;;      Params:         0       0       0       0       0       0       0
  7318 ;;      Locals:         2       0       0       0       0       0       0
  7319 ;;      Temps:          1       0       0       0       0       0       0
  7320 ;;      Totals:         3       0       0       0       0       0       0
  7321 ;;Total ram usage:        3 bytes
  7322 ;; Hardware stack levels used:    1
  7323 ;; Hardware stack levels required when called:    3
  7324 ;; This function calls:
  7325 ;;		Nothing
  7326 ;; This function is called by:
  7327 ;;		_readUartMessage
  7328 ;; This function uses a non-reentrant model
  7329 ;;
  7330                           
  7331                           	psect	text41
  7332  002FB4                     __ptext41:
  7333                           	opt stack 0
  7334  002FB4                     _EUSART1_Read:
  7335                           	opt stack 26
  7336                           
  7337                           ;eusart1.c: 112: uint16_t readValue = 0;
  7338                           
  7339                           ;incstack = 0
  7340  002FB4  0E00               	movlw	0
  7341  002FB6  6E1A               	movwf	EUSART1_Read@readValue+1,c
  7342  002FB8  0E00               	movlw	0
  7343  002FBA  6E19               	movwf	EUSART1_Read@readValue,c
  7344                           
  7345                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  7346  002FBC  0100               	movlb	0	; () banked
  7347  002FBE  51D3               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  7348  002FC0  A4D8               	btfss	status,2,c
  7349  002FC2  D002               	goto	l777
  7350                           
  7351                           ; BSR set to: 0
  7352                           ;eusart1.c: 120: {
  7353                           ;eusart1.c: 121: return readValue;
  7354  002FC4  5019               	movf	EUSART1_Read@readValue,w,c
  7355                           
  7356                           ; BSR set to: 0
  7357  002FC6  0012               	return	
  7358  002FC8                     l777:
  7359                           
  7360                           ; BSR set to: 0
  7361                           ;eusart1.c: 122: }
  7362                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  7363                           
  7364                           ; BSR set to: 0
  7365  002FC8  5037               	movf	_eusart1RxTail,w,c	;volatile
  7366  002FCA  0D01               	mullw	1
  7367  002FCC  0E46               	movlw	low _eusart1RxBuffer
  7368  002FCE  24F3               	addwf	prodl,w,c
  7369  002FD0  6ED9               	movwf	fsr2l,c
  7370  002FD2  0E01               	movlw	high _eusart1RxBuffer
  7371  002FD4  20F4               	addwfc	prodh,w,c
  7372  002FD6  6EDA               	movwf	fsr2h,c
  7373  002FD8  50DF               	movf	indf2,w,c
  7374  002FDA  6E18               	movwf	??_EUSART1_Read& (0+255),c
  7375  002FDC  5018               	movf	??_EUSART1_Read,w,c
  7376  002FDE  6E19               	movwf	EUSART1_Read@readValue,c
  7377  002FE0  6A1A               	clrf	EUSART1_Read@readValue+1,c
  7378                           
  7379                           ; BSR set to: 0
  7380  002FE2  2A37               	incf	_eusart1RxTail,f,c	;volatile
  7381                           
  7382                           ; BSR set to: 0
  7383                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  7384  002FE4  0E27               	movlw	39
  7385  002FE6  6437               	cpfsgt	_eusart1RxTail,c	;volatile
  7386  002FE8  D002               	goto	l779
  7387                           
  7388                           ; BSR set to: 0
  7389                           ;eusart1.c: 126: {
  7390                           ;eusart1.c: 127: eusart1RxTail = 0;
  7391  002FEA  0E00               	movlw	0
  7392  002FEC  6E37               	movwf	_eusart1RxTail,c	;volatile
  7393  002FEE                     l779:
  7394                           
  7395                           ; BSR set to: 0
  7396                           ;eusart1.c: 128: }
  7397                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  7398                           
  7399                           ; BSR set to: 0
  7400  002FEE  9A9D               	bcf	3997,5,c	;volatile
  7401                           
  7402                           ; BSR set to: 0
  7403                           ;eusart1.c: 130: eusart1RxCount--;
  7404  002FF0  07D3               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  7405                           
  7406                           ; BSR set to: 0
  7407                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  7408  002FF2  8A9D               	bsf	3997,5,c	;volatile
  7409                           
  7410                           ; BSR set to: 0
  7411                           ;eusart1.c: 133: return readValue;
  7412  002FF4  5019               	movf	EUSART1_Read@readValue,w,c
  7413  002FF6  0012               	return	
  7414  002FF8                     __end_of_EUSART1_Read:
  7415                           	opt stack 0
  7416                           tosu	equ	0xFFF
  7417                           tosh	equ	0xFFE
  7418                           tosl	equ	0xFFD
  7419                           pclath	equ	0xFFA
  7420                           tblptru	equ	0xFF8
  7421                           tblptrh	equ	0xFF7
  7422                           tblptrl	equ	0xFF6
  7423                           tablat	equ	0xFF5
  7424                           prodh	equ	0xFF4
  7425                           prodl	equ	0xFF3
  7426                           intcon	equ	0xFF2
  7427                           postinc0	equ	0xFEE
  7428                           wreg	equ	0xFE8
  7429                           indf1	equ	0xFE7
  7430                           postdec1	equ	0xFE5
  7431                           fsr1h	equ	0xFE2
  7432                           fsr1l	equ	0xFE1
  7433                           indf2	equ	0xFDF
  7434                           postinc2	equ	0xFDE
  7435                           postdec2	equ	0xFDD
  7436                           fsr2h	equ	0xFDA
  7437                           fsr2l	equ	0xFD9
  7438                           status	equ	0xFD8
  7439                           
  7440 ;; *************** function _keepAliveSignalUart *****************
  7441 ;; Defined at:
  7442 ;;		line 117 in file "SystemStatus.c"
  7443 ;; Parameters:    Size  Location     Type
  7444 ;;		None
  7445 ;; Auto vars:     Size  Location     Type
  7446 ;;		None
  7447 ;; Return value:  Size  Location     Type
  7448 ;;                  1    wreg      void 
  7449 ;; Registers used:
  7450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7451 ;; Tracked objects:
  7452 ;;		On entry : 0/0
  7453 ;;		On exit  : 0/0
  7454 ;;		Unchanged: 0/0
  7455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7456 ;;      Params:         0       0       0       0       0       0       0
  7457 ;;      Locals:         0       0       0       0       0       0       0
  7458 ;;      Temps:          0       0       0       0       0       0       0
  7459 ;;      Totals:         0       0       0       0       0       0       0
  7460 ;;Total ram usage:        0 bytes
  7461 ;; Hardware stack levels used:    1
  7462 ;; Hardware stack levels required when called:    6
  7463 ;; This function calls:
  7464 ;;		_SendAckMessage
  7465 ;; This function is called by:
  7466 ;;		_main
  7467 ;; This function uses a non-reentrant model
  7468 ;;
  7469                           
  7470                           	psect	text42
  7471  00377C                     __ptext42:
  7472                           	opt stack 0
  7473  00377C                     _keepAliveSignalUart:
  7474                           	opt stack 24
  7475                           
  7476                           ;SystemStatus.c: 119: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_KEEP_
      +                          ALIVE);
  7477                           
  7478                           ; BSR set to: 0
  7479                           ;incstack = 0
  7480  00377C  0E16               	movlw	22
  7481  00377E  6E24               	movwf	SendAckMessage@inRequest,c
  7482  003780  0E01               	movlw	1
  7483  003782  ECF8  F016         	call	_SendAckMessage
  7484  003786  0012               	return		;funcret
  7485  003788                     __end_of_keepAliveSignalUart:
  7486                           	opt stack 0
  7487                           tosu	equ	0xFFF
  7488                           tosh	equ	0xFFE
  7489                           tosl	equ	0xFFD
  7490                           pclath	equ	0xFFA
  7491                           tblptru	equ	0xFF8
  7492                           tblptrh	equ	0xFF7
  7493                           tblptrl	equ	0xFF6
  7494                           tablat	equ	0xFF5
  7495                           prodh	equ	0xFF4
  7496                           prodl	equ	0xFF3
  7497                           intcon	equ	0xFF2
  7498                           postinc0	equ	0xFEE
  7499                           wreg	equ	0xFE8
  7500                           indf1	equ	0xFE7
  7501                           postdec1	equ	0xFE5
  7502                           fsr1h	equ	0xFE2
  7503                           fsr1l	equ	0xFE1
  7504                           indf2	equ	0xFDF
  7505                           postinc2	equ	0xFDE
  7506                           postdec2	equ	0xFDD
  7507                           fsr2h	equ	0xFDA
  7508                           fsr2l	equ	0xFD9
  7509                           status	equ	0xFD8
  7510                           
  7511 ;; *************** function _keepAliveSignalLed *****************
  7512 ;; Defined at:
  7513 ;;		line 35 in file "LedsApp.c"
  7514 ;; Parameters:    Size  Location     Type
  7515 ;;		None
  7516 ;; Auto vars:     Size  Location     Type
  7517 ;;		None
  7518 ;; Return value:  Size  Location     Type
  7519 ;;                  1    wreg      void 
  7520 ;; Registers used:
  7521 ;;		wreg, status,2, status,0
  7522 ;; Tracked objects:
  7523 ;;		On entry : 0/0
  7524 ;;		On exit  : 0/0
  7525 ;;		Unchanged: 0/0
  7526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7527 ;;      Params:         0       0       0       0       0       0       0
  7528 ;;      Locals:         0       0       0       0       0       0       0
  7529 ;;      Temps:          1       0       0       0       0       0       0
  7530 ;;      Totals:         1       0       0       0       0       0       0
  7531 ;;Total ram usage:        1 bytes
  7532 ;; Hardware stack levels used:    1
  7533 ;; Hardware stack levels required when called:    3
  7534 ;; This function calls:
  7535 ;;		Nothing
  7536 ;; This function is called by:
  7537 ;;		_main
  7538 ;; This function uses a non-reentrant model
  7539 ;;
  7540                           
  7541                           	psect	text43
  7542  00366E                     __ptext43:
  7543                           	opt stack 0
  7544  00366E                     _keepAliveSignalLed:
  7545                           	opt stack 27
  7546                           
  7547                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  7548                           
  7549                           ;incstack = 0
  7550  00366E  B08B               	btfsc	3979,0,c	;volatile
  7551  003670  D003               	goto	u5220
  7552  003672  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7553  003674  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  7554  003676  D001               	goto	u5238
  7555  003678                     u5220:
  7556  003678  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7557  00367A                     u5238:
  7558  00367A  508B               	movf	3979,w,c	;volatile
  7559  00367C  1818               	xorwf	??_keepAliveSignalLed,w,c
  7560  00367E  0BFE               	andlw	-2
  7561  003680  1818               	xorwf	??_keepAliveSignalLed,w,c
  7562  003682  6E8B               	movwf	3979,c	;volatile
  7563  003684  0012               	return		;funcret
  7564  003686                     __end_of_keepAliveSignalLed:
  7565                           	opt stack 0
  7566                           tosu	equ	0xFFF
  7567                           tosh	equ	0xFFE
  7568                           tosl	equ	0xFFD
  7569                           pclath	equ	0xFFA
  7570                           tblptru	equ	0xFF8
  7571                           tblptrh	equ	0xFF7
  7572                           tblptrl	equ	0xFF6
  7573                           tablat	equ	0xFF5
  7574                           prodh	equ	0xFF4
  7575                           prodl	equ	0xFF3
  7576                           intcon	equ	0xFF2
  7577                           postinc0	equ	0xFEE
  7578                           wreg	equ	0xFE8
  7579                           indf1	equ	0xFE7
  7580                           postdec1	equ	0xFE5
  7581                           fsr1h	equ	0xFE2
  7582                           fsr1l	equ	0xFE1
  7583                           indf2	equ	0xFDF
  7584                           postinc2	equ	0xFDE
  7585                           postdec2	equ	0xFDD
  7586                           fsr2h	equ	0xFDA
  7587                           fsr2l	equ	0xFD9
  7588                           status	equ	0xFD8
  7589                           
  7590 ;; *************** function _SetMcuSystem *****************
  7591 ;; Defined at:
  7592 ;;		line 11 in file "SystemSettings.c"
  7593 ;; Parameters:    Size  Location     Type
  7594 ;;		None
  7595 ;; Auto vars:     Size  Location     Type
  7596 ;;		None
  7597 ;; Return value:  Size  Location     Type
  7598 ;;                  1    wreg      void 
  7599 ;; Registers used:
  7600 ;;		wreg, status,2, status,0, cstack
  7601 ;; Tracked objects:
  7602 ;;		On entry : 0/0
  7603 ;;		On exit  : 0/0
  7604 ;;		Unchanged: 0/0
  7605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7606 ;;      Params:         0       0       0       0       0       0       0
  7607 ;;      Locals:         0       0       0       0       0       0       0
  7608 ;;      Temps:          0       0       0       0       0       0       0
  7609 ;;      Totals:         0       0       0       0       0       0       0
  7610 ;;Total ram usage:        0 bytes
  7611 ;; Hardware stack levels used:    1
  7612 ;; Hardware stack levels required when called:    6
  7613 ;; This function calls:
  7614 ;;		_SYSTEM_Initialize
  7615 ;; This function is called by:
  7616 ;;		_main
  7617 ;; This function uses a non-reentrant model
  7618 ;;
  7619                           
  7620                           	psect	text44
  7621  003794                     __ptext44:
  7622                           	opt stack 0
  7623  003794                     _SetMcuSystem:
  7624                           	opt stack 24
  7625                           
  7626                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  7627                           
  7628                           ;incstack = 0
  7629  003794  EC2A  F01B         	call	_SYSTEM_Initialize	;wreg free
  7630                           
  7631                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  7632  003798  8EF2               	bsf	intcon,7,c	;volatile
  7633                           
  7634                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  7635  00379A  8CF2               	bsf	intcon,6,c	;volatile
  7636  00379C  0012               	return		;funcret
  7637  00379E                     __end_of_SetMcuSystem:
  7638                           	opt stack 0
  7639                           tosu	equ	0xFFF
  7640                           tosh	equ	0xFFE
  7641                           tosl	equ	0xFFD
  7642                           pclath	equ	0xFFA
  7643                           tblptru	equ	0xFF8
  7644                           tblptrh	equ	0xFF7
  7645                           tblptrl	equ	0xFF6
  7646                           tablat	equ	0xFF5
  7647                           prodh	equ	0xFF4
  7648                           prodl	equ	0xFF3
  7649                           intcon	equ	0xFF2
  7650                           postinc0	equ	0xFEE
  7651                           wreg	equ	0xFE8
  7652                           indf1	equ	0xFE7
  7653                           postdec1	equ	0xFE5
  7654                           fsr1h	equ	0xFE2
  7655                           fsr1l	equ	0xFE1
  7656                           indf2	equ	0xFDF
  7657                           postinc2	equ	0xFDE
  7658                           postdec2	equ	0xFDD
  7659                           fsr2h	equ	0xFDA
  7660                           fsr2l	equ	0xFD9
  7661                           status	equ	0xFD8
  7662                           
  7663 ;; *************** function _SYSTEM_Initialize *****************
  7664 ;; Defined at:
  7665 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7666 ;; Parameters:    Size  Location     Type
  7667 ;;		None
  7668 ;; Auto vars:     Size  Location     Type
  7669 ;;		None
  7670 ;; Return value:  Size  Location     Type
  7671 ;;                  1    wreg      void 
  7672 ;; Registers used:
  7673 ;;		wreg, status,2, status,0, cstack
  7674 ;; Tracked objects:
  7675 ;;		On entry : 0/0
  7676 ;;		On exit  : 0/0
  7677 ;;		Unchanged: 0/0
  7678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7679 ;;      Params:         0       0       0       0       0       0       0
  7680 ;;      Locals:         0       0       0       0       0       0       0
  7681 ;;      Temps:          0       0       0       0       0       0       0
  7682 ;;      Totals:         0       0       0       0       0       0       0
  7683 ;;Total ram usage:        0 bytes
  7684 ;; Hardware stack levels used:    1
  7685 ;; Hardware stack levels required when called:    5
  7686 ;; This function calls:
  7687 ;;		_ADC_Initialize
  7688 ;;		_EUSART1_Initialize
  7689 ;;		_INTERRUPT_Initialize
  7690 ;;		_OSCILLATOR_Initialize
  7691 ;;		_PIN_MANAGER_Initialize
  7692 ;;		_TMR0_Initialize
  7693 ;; This function is called by:
  7694 ;;		_SetMcuSystem
  7695 ;; This function uses a non-reentrant model
  7696 ;;
  7697                           
  7698                           	psect	text45
  7699  003654                     __ptext45:
  7700                           	opt stack 0
  7701  003654                     _SYSTEM_Initialize:
  7702                           	opt stack 24
  7703                           
  7704                           ;mcc.c: 114: INTERRUPT_Initialize();
  7705                           
  7706                           ;incstack = 0
  7707  003654  ECDB  F01B         	call	_INTERRUPT_Initialize	;wreg free
  7708                           
  7709                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  7710  003658  EC94  F017         	call	_PIN_MANAGER_Initialize	;wreg free
  7711                           
  7712                           ;mcc.c: 116: OSCILLATOR_Initialize();
  7713  00365C  EC9E  F01B         	call	_OSCILLATOR_Initialize	;wreg free
  7714                           
  7715                           ;mcc.c: 117: ADC_Initialize();
  7716  003660  EC43  F01B         	call	_ADC_Initialize	;wreg free
  7717                           
  7718                           ;mcc.c: 118: TMR0_Initialize();
  7719  003664  ECB9  F019         	call	_TMR0_Initialize	;wreg free
  7720                           
  7721                           ;mcc.c: 119: EUSART1_Initialize();
  7722  003668  EC83  F019         	call	_EUSART1_Initialize	;wreg free
  7723  00366C  0012               	return		;funcret
  7724  00366E                     __end_of_SYSTEM_Initialize:
  7725                           	opt stack 0
  7726                           tosu	equ	0xFFF
  7727                           tosh	equ	0xFFE
  7728                           tosl	equ	0xFFD
  7729                           pclath	equ	0xFFA
  7730                           tblptru	equ	0xFF8
  7731                           tblptrh	equ	0xFF7
  7732                           tblptrl	equ	0xFF6
  7733                           tablat	equ	0xFF5
  7734                           prodh	equ	0xFF4
  7735                           prodl	equ	0xFF3
  7736                           intcon	equ	0xFF2
  7737                           postinc0	equ	0xFEE
  7738                           wreg	equ	0xFE8
  7739                           indf1	equ	0xFE7
  7740                           postdec1	equ	0xFE5
  7741                           fsr1h	equ	0xFE2
  7742                           fsr1l	equ	0xFE1
  7743                           indf2	equ	0xFDF
  7744                           postinc2	equ	0xFDE
  7745                           postdec2	equ	0xFDD
  7746                           fsr2h	equ	0xFDA
  7747                           fsr2l	equ	0xFD9
  7748                           status	equ	0xFD8
  7749                           
  7750 ;; *************** function _TMR0_Initialize *****************
  7751 ;; Defined at:
  7752 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  7753 ;; Parameters:    Size  Location     Type
  7754 ;;		None
  7755 ;; Auto vars:     Size  Location     Type
  7756 ;;		None
  7757 ;; Return value:  Size  Location     Type
  7758 ;;                  1    wreg      void 
  7759 ;; Registers used:
  7760 ;;		wreg, status,2, status,0, cstack
  7761 ;; Tracked objects:
  7762 ;;		On entry : 0/0
  7763 ;;		On exit  : 0/0
  7764 ;;		Unchanged: 0/0
  7765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7766 ;;      Params:         0       0       0       0       0       0       0
  7767 ;;      Locals:         0       0       0       0       0       0       0
  7768 ;;      Temps:          2       0       0       0       0       0       0
  7769 ;;      Totals:         2       0       0       0       0       0       0
  7770 ;;Total ram usage:        2 bytes
  7771 ;; Hardware stack levels used:    1
  7772 ;; Hardware stack levels required when called:    4
  7773 ;; This function calls:
  7774 ;;		_TMR0_SetInterruptHandler
  7775 ;; This function is called by:
  7776 ;;		_SYSTEM_Initialize
  7777 ;; This function uses a non-reentrant model
  7778 ;;
  7779                           
  7780                           	psect	text46
  7781  003372                     __ptext46:
  7782                           	opt stack 0
  7783  003372                     _TMR0_Initialize:
  7784                           	opt stack 24
  7785                           
  7786                           ;tmr0.c: 71: TMR0H = 0x3C;
  7787                           
  7788                           ;incstack = 0
  7789  003372  0E3C               	movlw	60
  7790  003374  6ED7               	movwf	4055,c	;volatile
  7791                           
  7792                           ;tmr0.c: 74: TMR0L = 0xAF;
  7793  003376  0EAF               	movlw	175
  7794  003378  6ED6               	movwf	4054,c	;volatile
  7795                           
  7796                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  7797  00337A  50D6               	movf	4054,w,c	;volatile
  7798  00337C  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  7799  003380  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  7800  003382  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  7801  003386  6A1A               	clrf	??_TMR0_Initialize,c
  7802  003388  101A               	iorwf	??_TMR0_Initialize,w,c
  7803  00338A  6E46               	movwf	_timer0ReloadVal,c	;volatile
  7804  00338C  501B               	movf	??_TMR0_Initialize+1,w,c
  7805  00338E  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  7806                           
  7807                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  7808  003390  94F2               	bcf	intcon,2,c	;volatile
  7809                           
  7810                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  7811  003392  8AF2               	bsf	intcon,5,c	;volatile
  7812                           
  7813                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  7814  003394  0E00               	movlw	0
  7815  003396  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  7816  003398  0E00               	movlw	0
  7817  00339A  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  7818  00339C  ECCF  F01B         	call	_TMR0_SetInterruptHandler	;wreg free
  7819                           
  7820                           ;tmr0.c: 90: T0CON = 0x90;
  7821  0033A0  0E90               	movlw	144
  7822  0033A2  6ED5               	movwf	4053,c	;volatile
  7823  0033A4  0012               	return		;funcret
  7824  0033A6                     __end_of_TMR0_Initialize:
  7825                           	opt stack 0
  7826                           tosu	equ	0xFFF
  7827                           tosh	equ	0xFFE
  7828                           tosl	equ	0xFFD
  7829                           pclath	equ	0xFFA
  7830                           tblptru	equ	0xFF8
  7831                           tblptrh	equ	0xFF7
  7832                           tblptrl	equ	0xFF6
  7833                           tablat	equ	0xFF5
  7834                           prodh	equ	0xFF4
  7835                           prodl	equ	0xFF3
  7836                           intcon	equ	0xFF2
  7837                           postinc0	equ	0xFEE
  7838                           wreg	equ	0xFE8
  7839                           indf1	equ	0xFE7
  7840                           postdec1	equ	0xFE5
  7841                           fsr1h	equ	0xFE2
  7842                           fsr1l	equ	0xFE1
  7843                           indf2	equ	0xFDF
  7844                           postinc2	equ	0xFDE
  7845                           postdec2	equ	0xFDD
  7846                           fsr2h	equ	0xFDA
  7847                           fsr2l	equ	0xFD9
  7848                           status	equ	0xFD8
  7849                           
  7850 ;; *************** function _TMR0_SetInterruptHandler *****************
  7851 ;; Defined at:
  7852 ;;		line 177 in file "mcc_generated_files/tmr0.c"
  7853 ;; Parameters:    Size  Location     Type
  7854 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  7855 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  7856 ;; Auto vars:     Size  Location     Type
  7857 ;;		None
  7858 ;; Return value:  Size  Location     Type
  7859 ;;                  1    wreg      void 
  7860 ;; Registers used:
  7861 ;;		wreg, status,2, status,0
  7862 ;; Tracked objects:
  7863 ;;		On entry : 0/0
  7864 ;;		On exit  : 0/0
  7865 ;;		Unchanged: 0/0
  7866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7867 ;;      Params:         2       0       0       0       0       0       0
  7868 ;;      Locals:         0       0       0       0       0       0       0
  7869 ;;      Temps:          0       0       0       0       0       0       0
  7870 ;;      Totals:         2       0       0       0       0       0       0
  7871 ;;Total ram usage:        2 bytes
  7872 ;; Hardware stack levels used:    1
  7873 ;; Hardware stack levels required when called:    3
  7874 ;; This function calls:
  7875 ;;		Nothing
  7876 ;; This function is called by:
  7877 ;;		_TMR0_Initialize
  7878 ;; This function uses a non-reentrant model
  7879 ;;
  7880                           
  7881                           	psect	text47
  7882  00379E                     __ptext47:
  7883                           	opt stack 0
  7884  00379E                     _TMR0_SetInterruptHandler:
  7885                           	opt stack 24
  7886                           
  7887                           ;tmr0.c: 178: TMR0_InterruptHandler = InterruptHandler;
  7888                           
  7889                           ;incstack = 0
  7890  00379E  C018  F0FD         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  7891  0037A2  C019  F0FE         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  7892  0037A6  0012               	return		;funcret
  7893  0037A8                     __end_of_TMR0_SetInterruptHandler:
  7894                           	opt stack 0
  7895                           tosu	equ	0xFFF
  7896                           tosh	equ	0xFFE
  7897                           tosl	equ	0xFFD
  7898                           pclath	equ	0xFFA
  7899                           tblptru	equ	0xFF8
  7900                           tblptrh	equ	0xFF7
  7901                           tblptrl	equ	0xFF6
  7902                           tablat	equ	0xFF5
  7903                           prodh	equ	0xFF4
  7904                           prodl	equ	0xFF3
  7905                           intcon	equ	0xFF2
  7906                           postinc0	equ	0xFEE
  7907                           wreg	equ	0xFE8
  7908                           indf1	equ	0xFE7
  7909                           postdec1	equ	0xFE5
  7910                           fsr1h	equ	0xFE2
  7911                           fsr1l	equ	0xFE1
  7912                           indf2	equ	0xFDF
  7913                           postinc2	equ	0xFDE
  7914                           postdec2	equ	0xFDD
  7915                           fsr2h	equ	0xFDA
  7916                           fsr2l	equ	0xFD9
  7917                           status	equ	0xFD8
  7918                           
  7919 ;; *************** function _PIN_MANAGER_Initialize *****************
  7920 ;; Defined at:
  7921 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  7922 ;; Parameters:    Size  Location     Type
  7923 ;;		None
  7924 ;; Auto vars:     Size  Location     Type
  7925 ;;		None
  7926 ;; Return value:  Size  Location     Type
  7927 ;;                  1    wreg      void 
  7928 ;; Registers used:
  7929 ;;		wreg, status,2
  7930 ;; Tracked objects:
  7931 ;;		On entry : 0/0
  7932 ;;		On exit  : 0/0
  7933 ;;		Unchanged: 0/0
  7934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7935 ;;      Params:         0       0       0       0       0       0       0
  7936 ;;      Locals:         0       0       0       0       0       0       0
  7937 ;;      Temps:          0       0       0       0       0       0       0
  7938 ;;      Totals:         0       0       0       0       0       0       0
  7939 ;;Total ram usage:        0 bytes
  7940 ;; Hardware stack levels used:    1
  7941 ;; Hardware stack levels required when called:    3
  7942 ;; This function calls:
  7943 ;;		Nothing
  7944 ;; This function is called by:
  7945 ;;		_SYSTEM_Initialize
  7946 ;; This function uses a non-reentrant model
  7947 ;;
  7948                           
  7949                           	psect	text48
  7950  002F28                     __ptext48:
  7951                           	opt stack 0
  7952  002F28                     _PIN_MANAGER_Initialize:
  7953                           	opt stack 25
  7954                           
  7955                           ;pin_manager.c: 57: LATE = 0x00;
  7956                           
  7957                           ;incstack = 0
  7958  002F28  0E00               	movlw	0
  7959  002F2A  6E8D               	movwf	3981,c	;volatile
  7960                           
  7961                           ;pin_manager.c: 58: LATD = 0x00;
  7962  002F2C  0E00               	movlw	0
  7963  002F2E  6E8C               	movwf	3980,c	;volatile
  7964                           
  7965                           ;pin_manager.c: 59: LATA = 0x06;
  7966  002F30  0E06               	movlw	6
  7967  002F32  6E89               	movwf	3977,c	;volatile
  7968                           
  7969                           ;pin_manager.c: 60: LATB = 0x00;
  7970  002F34  0E00               	movlw	0
  7971  002F36  6E8A               	movwf	3978,c	;volatile
  7972                           
  7973                           ;pin_manager.c: 61: LATC = 0x00;
  7974  002F38  0E00               	movlw	0
  7975  002F3A  6E8B               	movwf	3979,c	;volatile
  7976                           
  7977                           ;pin_manager.c: 66: TRISE = 0x07;
  7978  002F3C  0E07               	movlw	7
  7979  002F3E  6E96               	movwf	3990,c	;volatile
  7980                           
  7981                           ;pin_manager.c: 67: TRISA = 0xE1;
  7982  002F40  0EE1               	movlw	225
  7983  002F42  6E92               	movwf	3986,c	;volatile
  7984                           
  7985                           ;pin_manager.c: 68: TRISB = 0xEF;
  7986  002F44  0EEF               	movlw	239
  7987  002F46  6E93               	movwf	3987,c	;volatile
  7988                           
  7989                           ;pin_manager.c: 69: TRISC = 0x80;
  7990  002F48  0E80               	movlw	128
  7991  002F4A  6E94               	movwf	3988,c	;volatile
  7992                           
  7993                           ;pin_manager.c: 70: TRISD = 0xF2;
  7994  002F4C  0EF2               	movlw	242
  7995  002F4E  6E95               	movwf	3989,c	;volatile
  7996                           
  7997                           ;pin_manager.c: 75: ANSELC = 0x34;
  7998  002F50  0E34               	movlw	52
  7999  002F52  010F               	movlb	15	; () banked
  8000  002F54  6F3A               	movwf	58,b	;volatile
  8001                           
  8002                           ;pin_manager.c: 76: ANSELB = 0x32;
  8003  002F56  0E32               	movlw	50
  8004  002F58  6F39               	movwf	57,b	;volatile
  8005                           
  8006                           ;pin_manager.c: 77: ANSELD = 0xE4;
  8007  002F5A  0EE4               	movlw	228
  8008  002F5C  6F3B               	movwf	59,b	;volatile
  8009                           
  8010                           ;pin_manager.c: 78: ANSELE = 0x07;
  8011  002F5E  0E07               	movlw	7
  8012  002F60  6F3C               	movwf	60,b	;volatile
  8013                           
  8014                           ;pin_manager.c: 79: ANSELA = 0x2F;
  8015  002F62  0E2F               	movlw	47
  8016  002F64  6F38               	movwf	56,b	;volatile
  8017                           
  8018                           ;pin_manager.c: 84: WPUB = 0xC3;
  8019  002F66  0EC3               	movlw	195
  8020  002F68  6E61               	movwf	3937,c	;volatile
  8021                           
  8022                           ; BSR set to: 15
  8023                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  8024  002F6A  9EF1               	bcf	intcon2,7,c	;volatile
  8025                           
  8026                           ; BSR set to: 15
  8027                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  8028  002F6C  86F2               	bsf	intcon,3,c	;volatile
  8029                           
  8030                           ; BSR set to: 15
  8031  002F6E  0012               	return		;funcret
  8032  002F70                     __end_of_PIN_MANAGER_Initialize:
  8033                           	opt stack 0
  8034                           tosu	equ	0xFFF
  8035                           tosh	equ	0xFFE
  8036                           tosl	equ	0xFFD
  8037                           pclath	equ	0xFFA
  8038                           tblptru	equ	0xFF8
  8039                           tblptrh	equ	0xFF7
  8040                           tblptrl	equ	0xFF6
  8041                           tablat	equ	0xFF5
  8042                           prodh	equ	0xFF4
  8043                           prodl	equ	0xFF3
  8044                           intcon	equ	0xFF2
  8045                           intcon2	equ	0xFF1
  8046                           postinc0	equ	0xFEE
  8047                           wreg	equ	0xFE8
  8048                           indf1	equ	0xFE7
  8049                           postdec1	equ	0xFE5
  8050                           fsr1h	equ	0xFE2
  8051                           fsr1l	equ	0xFE1
  8052                           indf2	equ	0xFDF
  8053                           postinc2	equ	0xFDE
  8054                           postdec2	equ	0xFDD
  8055                           fsr2h	equ	0xFDA
  8056                           fsr2l	equ	0xFD9
  8057                           status	equ	0xFD8
  8058                           
  8059 ;; *************** function _OSCILLATOR_Initialize *****************
  8060 ;; Defined at:
  8061 ;;		line 122 in file "mcc_generated_files/mcc.c"
  8062 ;; Parameters:    Size  Location     Type
  8063 ;;		None
  8064 ;; Auto vars:     Size  Location     Type
  8065 ;;		None
  8066 ;; Return value:  Size  Location     Type
  8067 ;;                  1    wreg      void 
  8068 ;; Registers used:
  8069 ;;		wreg, status,2
  8070 ;; Tracked objects:
  8071 ;;		On entry : 0/0
  8072 ;;		On exit  : 0/0
  8073 ;;		Unchanged: 0/0
  8074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8075 ;;      Params:         0       0       0       0       0       0       0
  8076 ;;      Locals:         0       0       0       0       0       0       0
  8077 ;;      Temps:          0       0       0       0       0       0       0
  8078 ;;      Totals:         0       0       0       0       0       0       0
  8079 ;;Total ram usage:        0 bytes
  8080 ;; Hardware stack levels used:    1
  8081 ;; Hardware stack levels required when called:    3
  8082 ;; This function calls:
  8083 ;;		Nothing
  8084 ;; This function is called by:
  8085 ;;		_SYSTEM_Initialize
  8086 ;; This function uses a non-reentrant model
  8087 ;;
  8088                           
  8089                           	psect	text49
  8090  00373C                     __ptext49:
  8091                           	opt stack 0
  8092  00373C                     _OSCILLATOR_Initialize:
  8093                           	opt stack 25
  8094                           
  8095                           ;mcc.c: 125: OSCCON = 0x60;
  8096                           
  8097                           ; BSR set to: 15
  8098                           ;incstack = 0
  8099  00373C  0E60               	movlw	96
  8100  00373E  6ED3               	movwf	4051,c	;volatile
  8101                           
  8102                           ;mcc.c: 127: OSCCON2 = 0x04;
  8103  003740  0E04               	movlw	4
  8104  003742  6ED2               	movwf	4050,c	;volatile
  8105                           
  8106                           ;mcc.c: 129: OSCTUNE = 0x80;
  8107  003744  0E80               	movlw	128
  8108  003746  6E9B               	movwf	3995,c	;volatile
  8109  003748  0012               	return		;funcret
  8110  00374A                     __end_of_OSCILLATOR_Initialize:
  8111                           	opt stack 0
  8112                           tosu	equ	0xFFF
  8113                           tosh	equ	0xFFE
  8114                           tosl	equ	0xFFD
  8115                           pclath	equ	0xFFA
  8116                           tblptru	equ	0xFF8
  8117                           tblptrh	equ	0xFF7
  8118                           tblptrl	equ	0xFF6
  8119                           tablat	equ	0xFF5
  8120                           prodh	equ	0xFF4
  8121                           prodl	equ	0xFF3
  8122                           intcon	equ	0xFF2
  8123                           intcon2	equ	0xFF1
  8124                           postinc0	equ	0xFEE
  8125                           wreg	equ	0xFE8
  8126                           indf1	equ	0xFE7
  8127                           postdec1	equ	0xFE5
  8128                           fsr1h	equ	0xFE2
  8129                           fsr1l	equ	0xFE1
  8130                           indf2	equ	0xFDF
  8131                           postinc2	equ	0xFDE
  8132                           postdec2	equ	0xFDD
  8133                           fsr2h	equ	0xFDA
  8134                           fsr2l	equ	0xFD9
  8135                           status	equ	0xFD8
  8136                           
  8137 ;; *************** function _INTERRUPT_Initialize *****************
  8138 ;; Defined at:
  8139 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8140 ;; Parameters:    Size  Location     Type
  8141 ;;		None
  8142 ;; Auto vars:     Size  Location     Type
  8143 ;;		None
  8144 ;; Return value:  Size  Location     Type
  8145 ;;                  1    wreg      void 
  8146 ;; Registers used:
  8147 ;;		None
  8148 ;; Tracked objects:
  8149 ;;		On entry : 0/0
  8150 ;;		On exit  : 0/0
  8151 ;;		Unchanged: 0/0
  8152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8153 ;;      Params:         0       0       0       0       0       0       0
  8154 ;;      Locals:         0       0       0       0       0       0       0
  8155 ;;      Temps:          0       0       0       0       0       0       0
  8156 ;;      Totals:         0       0       0       0       0       0       0
  8157 ;;Total ram usage:        0 bytes
  8158 ;; Hardware stack levels used:    1
  8159 ;; Hardware stack levels required when called:    3
  8160 ;; This function calls:
  8161 ;;		Nothing
  8162 ;; This function is called by:
  8163 ;;		_SYSTEM_Initialize
  8164 ;; This function uses a non-reentrant model
  8165 ;;
  8166                           
  8167                           	psect	text50
  8168  0037B6                     __ptext50:
  8169                           	opt stack 0
  8170  0037B6                     _INTERRUPT_Initialize:
  8171                           	opt stack 25
  8172                           
  8173                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  8174                           
  8175                           ;incstack = 0
  8176  0037B6  9ED0               	bcf	4048,7,c	;volatile
  8177  0037B8  0012               	return		;funcret
  8178  0037BA                     __end_of_INTERRUPT_Initialize:
  8179                           	opt stack 0
  8180                           tosu	equ	0xFFF
  8181                           tosh	equ	0xFFE
  8182                           tosl	equ	0xFFD
  8183                           pclath	equ	0xFFA
  8184                           tblptru	equ	0xFF8
  8185                           tblptrh	equ	0xFF7
  8186                           tblptrl	equ	0xFF6
  8187                           tablat	equ	0xFF5
  8188                           prodh	equ	0xFF4
  8189                           prodl	equ	0xFF3
  8190                           intcon	equ	0xFF2
  8191                           intcon2	equ	0xFF1
  8192                           postinc0	equ	0xFEE
  8193                           wreg	equ	0xFE8
  8194                           indf1	equ	0xFE7
  8195                           postdec1	equ	0xFE5
  8196                           fsr1h	equ	0xFE2
  8197                           fsr1l	equ	0xFE1
  8198                           indf2	equ	0xFDF
  8199                           postinc2	equ	0xFDE
  8200                           postdec2	equ	0xFDD
  8201                           fsr2h	equ	0xFDA
  8202                           fsr2l	equ	0xFD9
  8203                           status	equ	0xFD8
  8204                           
  8205 ;; *************** function _EUSART1_Initialize *****************
  8206 ;; Defined at:
  8207 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  8208 ;; Parameters:    Size  Location     Type
  8209 ;;		None
  8210 ;; Auto vars:     Size  Location     Type
  8211 ;;		None
  8212 ;; Return value:  Size  Location     Type
  8213 ;;                  1    wreg      void 
  8214 ;; Registers used:
  8215 ;;		wreg, status,2
  8216 ;; Tracked objects:
  8217 ;;		On entry : 0/0
  8218 ;;		On exit  : 0/0
  8219 ;;		Unchanged: 0/0
  8220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8221 ;;      Params:         0       0       0       0       0       0       0
  8222 ;;      Locals:         0       0       0       0       0       0       0
  8223 ;;      Temps:          0       0       0       0       0       0       0
  8224 ;;      Totals:         0       0       0       0       0       0       0
  8225 ;;Total ram usage:        0 bytes
  8226 ;; Hardware stack levels used:    1
  8227 ;; Hardware stack levels required when called:    3
  8228 ;; This function calls:
  8229 ;;		Nothing
  8230 ;; This function is called by:
  8231 ;;		_SYSTEM_Initialize
  8232 ;; This function uses a non-reentrant model
  8233 ;;
  8234                           
  8235                           	psect	text51
  8236  003306                     __ptext51:
  8237                           	opt stack 0
  8238  003306                     _EUSART1_Initialize:
  8239                           	opt stack 25
  8240                           
  8241                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  8242                           
  8243                           ;incstack = 0
  8244  003306  9A9D               	bcf	3997,5,c	;volatile
  8245                           
  8246                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  8247  003308  989D               	bcf	3997,4,c	;volatile
  8248                           
  8249                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  8250  00330A  0E08               	movlw	8
  8251  00330C  6EB8               	movwf	4024,c	;volatile
  8252                           
  8253                           ;eusart1.c: 85: RCSTA1 = 0x90;
  8254  00330E  0E90               	movlw	144
  8255  003310  6EAB               	movwf	4011,c	;volatile
  8256                           
  8257                           ;eusart1.c: 88: TXSTA1 = 0x24;
  8258  003312  0E24               	movlw	36
  8259  003314  6EAC               	movwf	4012,c	;volatile
  8260                           
  8261                           ;eusart1.c: 91: SPBRG1 = 0x10;
  8262  003316  0E10               	movlw	16
  8263  003318  6EAF               	movwf	4015,c	;volatile
  8264                           
  8265                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  8266  00331A  0E00               	movlw	0
  8267  00331C  6EB0               	movwf	4016,c	;volatile
  8268                           
  8269                           ;eusart1.c: 98: eusart1TxHead = 0;
  8270  00331E  0E00               	movlw	0
  8271  003320  6E3A               	movwf	_eusart1TxHead,c	;volatile
  8272                           
  8273                           ;eusart1.c: 99: eusart1TxTail = 0;
  8274  003322  0E00               	movlw	0
  8275  003324  6E39               	movwf	_eusart1TxTail,c	;volatile
  8276                           
  8277                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  8278  003326  0E46               	movlw	70
  8279  003328  0100               	movlb	0	; () banked
  8280  00332A  6FFF               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  8281                           
  8282                           ;eusart1.c: 102: eusart1RxHead = 0;
  8283  00332C  0E00               	movlw	0
  8284  00332E  6E38               	movwf	_eusart1RxHead,c	;volatile
  8285                           
  8286                           ;eusart1.c: 103: eusart1RxTail = 0;
  8287  003330  0E00               	movlw	0
  8288  003332  6E37               	movwf	_eusart1RxTail,c	;volatile
  8289                           
  8290                           ;eusart1.c: 104: eusart1RxCount = 0;
  8291  003334  0E00               	movlw	0
  8292  003336  6FD3               	movwf	_eusart1RxCount& (0+255),b	;volatile
  8293                           
  8294                           ; BSR set to: 0
  8295                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  8296  003338  8A9D               	bsf	3997,5,c	;volatile
  8297                           
  8298                           ; BSR set to: 0
  8299  00333A  0012               	return		;funcret
  8300  00333C                     __end_of_EUSART1_Initialize:
  8301                           	opt stack 0
  8302                           tosu	equ	0xFFF
  8303                           tosh	equ	0xFFE
  8304                           tosl	equ	0xFFD
  8305                           pclath	equ	0xFFA
  8306                           tblptru	equ	0xFF8
  8307                           tblptrh	equ	0xFF7
  8308                           tblptrl	equ	0xFF6
  8309                           tablat	equ	0xFF5
  8310                           prodh	equ	0xFF4
  8311                           prodl	equ	0xFF3
  8312                           intcon	equ	0xFF2
  8313                           intcon2	equ	0xFF1
  8314                           postinc0	equ	0xFEE
  8315                           wreg	equ	0xFE8
  8316                           indf1	equ	0xFE7
  8317                           postdec1	equ	0xFE5
  8318                           fsr1h	equ	0xFE2
  8319                           fsr1l	equ	0xFE1
  8320                           indf2	equ	0xFDF
  8321                           postinc2	equ	0xFDE
  8322                           postdec2	equ	0xFDD
  8323                           fsr2h	equ	0xFDA
  8324                           fsr2l	equ	0xFD9
  8325                           status	equ	0xFD8
  8326                           
  8327 ;; *************** function _ADC_Initialize *****************
  8328 ;; Defined at:
  8329 ;;		line 58 in file "mcc_generated_files/adc.c"
  8330 ;; Parameters:    Size  Location     Type
  8331 ;;		None
  8332 ;; Auto vars:     Size  Location     Type
  8333 ;;		None
  8334 ;; Return value:  Size  Location     Type
  8335 ;;                  1    wreg      void 
  8336 ;; Registers used:
  8337 ;;		wreg, status,2
  8338 ;; Tracked objects:
  8339 ;;		On entry : 0/0
  8340 ;;		On exit  : 0/0
  8341 ;;		Unchanged: 0/0
  8342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8343 ;;      Params:         0       0       0       0       0       0       0
  8344 ;;      Locals:         0       0       0       0       0       0       0
  8345 ;;      Temps:          0       0       0       0       0       0       0
  8346 ;;      Totals:         0       0       0       0       0       0       0
  8347 ;;Total ram usage:        0 bytes
  8348 ;; Hardware stack levels used:    1
  8349 ;; Hardware stack levels required when called:    3
  8350 ;; This function calls:
  8351 ;;		Nothing
  8352 ;; This function is called by:
  8353 ;;		_SYSTEM_Initialize
  8354 ;; This function uses a non-reentrant model
  8355 ;;
  8356                           
  8357                           	psect	text52
  8358  003686                     __ptext52:
  8359                           	opt stack 0
  8360  003686                     _ADC_Initialize:
  8361                           	opt stack 25
  8362                           
  8363                           ;adc.c: 63: ADCON0 = 0x05;
  8364                           
  8365                           ; BSR set to: 0
  8366                           ;incstack = 0
  8367  003686  0E05               	movlw	5
  8368  003688  6EC2               	movwf	4034,c	;volatile
  8369                           
  8370                           ;adc.c: 66: ADCON1 = 0x00;
  8371  00368A  0E00               	movlw	0
  8372  00368C  6EC1               	movwf	4033,c	;volatile
  8373                           
  8374                           ;adc.c: 69: ADCON2 = 0x87;
  8375  00368E  0E87               	movlw	135
  8376  003690  6EC0               	movwf	4032,c	;volatile
  8377                           
  8378                           ;adc.c: 72: ADRESL = 0x00;
  8379  003692  0E00               	movlw	0
  8380  003694  6EC3               	movwf	4035,c	;volatile
  8381                           
  8382                           ;adc.c: 75: ADRESH = 0x00;
  8383  003696  0E00               	movlw	0
  8384  003698  6EC4               	movwf	4036,c	;volatile
  8385  00369A  0012               	return		;funcret
  8386  00369C                     __end_of_ADC_Initialize:
  8387                           	opt stack 0
  8388                           tosu	equ	0xFFF
  8389                           tosh	equ	0xFFE
  8390                           tosl	equ	0xFFD
  8391                           pclath	equ	0xFFA
  8392                           tblptru	equ	0xFF8
  8393                           tblptrh	equ	0xFF7
  8394                           tblptrl	equ	0xFF6
  8395                           tablat	equ	0xFF5
  8396                           prodh	equ	0xFF4
  8397                           prodl	equ	0xFF3
  8398                           intcon	equ	0xFF2
  8399                           intcon2	equ	0xFF1
  8400                           postinc0	equ	0xFEE
  8401                           wreg	equ	0xFE8
  8402                           indf1	equ	0xFE7
  8403                           postdec1	equ	0xFE5
  8404                           fsr1h	equ	0xFE2
  8405                           fsr1l	equ	0xFE1
  8406                           indf2	equ	0xFDF
  8407                           postinc2	equ	0xFDE
  8408                           postdec2	equ	0xFDD
  8409                           fsr2h	equ	0xFDA
  8410                           fsr2l	equ	0xFD9
  8411                           status	equ	0xFD8
  8412                           
  8413 ;; *************** function _SetMcuRunTime *****************
  8414 ;; Defined at:
  8415 ;;		line 81 in file "SystemStatus.c"
  8416 ;; Parameters:    Size  Location     Type
  8417 ;;		None
  8418 ;; Auto vars:     Size  Location     Type
  8419 ;;		None
  8420 ;; Return value:  Size  Location     Type
  8421 ;;                  1    wreg      void 
  8422 ;; Registers used:
  8423 ;;		wreg, status,2, status,0, cstack
  8424 ;; Tracked objects:
  8425 ;;		On entry : 0/0
  8426 ;;		On exit  : 0/0
  8427 ;;		Unchanged: 0/0
  8428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8429 ;;      Params:         0       0       0       0       0       0       0
  8430 ;;      Locals:         0       0       0       0       0       0       0
  8431 ;;      Temps:          0       0       0       0       0       0       0
  8432 ;;      Totals:         0       0       0       0       0       0       0
  8433 ;;Total ram usage:        0 bytes
  8434 ;; Hardware stack levels used:    1
  8435 ;; Hardware stack levels required when called:    4
  8436 ;; This function calls:
  8437 ;;		___llmod
  8438 ;; This function is called by:
  8439 ;;		_main
  8440 ;; This function uses a non-reentrant model
  8441 ;;
  8442                           
  8443                           	psect	text53
  8444  002FF8                     __ptext53:
  8445                           	opt stack 0
  8446  002FF8                     _SetMcuRunTime:
  8447                           	opt stack 26
  8448                           
  8449                           ;SystemStatus.c: 83: mcuRunTimeIn5SecTicks++;
  8450                           
  8451                           ;incstack = 0
  8452  002FF8  0E01               	movlw	1
  8453  002FFA  0100               	movlb	0	; () banked
  8454  002FFC  27C1               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  8455  002FFE  0E00               	movlw	0
  8456  003000  23C2               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  8457  003002  23C3               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  8458  003004  23C4               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  8459                           
  8460                           ; BSR set to: 0
  8461                           ;SystemStatus.c: 84: mcuRunTimeIn5SecTicks %= (17280);
  8462  003006  C0C1  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  8463  00300A  C0C2  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  8464  00300E  C0C3  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  8465  003012  C0C4  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  8466  003016  0E80               	movlw	128
  8467  003018  6E1C               	movwf	___llmod@divisor,c
  8468  00301A  0E43               	movlw	67
  8469  00301C  6E1D               	movwf	___llmod@divisor+1,c
  8470  00301E  0E00               	movlw	0
  8471  003020  6E1E               	movwf	___llmod@divisor+2,c
  8472  003022  0E00               	movlw	0
  8473  003024  6E1F               	movwf	___llmod@divisor+3,c
  8474  003026  ECFD  F013         	call	___llmod	;wreg free
  8475  00302A  C018  F0C1         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  8476  00302E  C019  F0C2         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  8477  003032  C01A  F0C3         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  8478  003036  C01B  F0C4         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  8479  00303A  0012               	return		;funcret
  8480  00303C                     __end_of_SetMcuRunTime:
  8481                           	opt stack 0
  8482                           tosu	equ	0xFFF
  8483                           tosh	equ	0xFFE
  8484                           tosl	equ	0xFFD
  8485                           pclath	equ	0xFFA
  8486                           tblptru	equ	0xFF8
  8487                           tblptrh	equ	0xFF7
  8488                           tblptrl	equ	0xFF6
  8489                           tablat	equ	0xFF5
  8490                           prodh	equ	0xFF4
  8491                           prodl	equ	0xFF3
  8492                           intcon	equ	0xFF2
  8493                           intcon2	equ	0xFF1
  8494                           postinc0	equ	0xFEE
  8495                           wreg	equ	0xFE8
  8496                           indf1	equ	0xFE7
  8497                           postdec1	equ	0xFE5
  8498                           fsr1h	equ	0xFE2
  8499                           fsr1l	equ	0xFE1
  8500                           indf2	equ	0xFDF
  8501                           postinc2	equ	0xFDE
  8502                           postdec2	equ	0xFDD
  8503                           fsr2h	equ	0xFDA
  8504                           fsr2l	equ	0xFD9
  8505                           status	equ	0xFD8
  8506                           
  8507 ;; *************** function ___llmod *****************
  8508 ;; Defined at:
  8509 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  8510 ;; Parameters:    Size  Location     Type
  8511 ;;  dividend        4   23[COMRAM] unsigned long 
  8512 ;;  divisor         4   27[COMRAM] unsigned long 
  8513 ;; Auto vars:     Size  Location     Type
  8514 ;;  counter         1   31[COMRAM] unsigned char 
  8515 ;; Return value:  Size  Location     Type
  8516 ;;                  4   23[COMRAM] unsigned long 
  8517 ;; Registers used:
  8518 ;;		wreg, status,2, status,0
  8519 ;; Tracked objects:
  8520 ;;		On entry : 0/0
  8521 ;;		On exit  : 0/0
  8522 ;;		Unchanged: 0/0
  8523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8524 ;;      Params:         8       0       0       0       0       0       0
  8525 ;;      Locals:         1       0       0       0       0       0       0
  8526 ;;      Temps:          0       0       0       0       0       0       0
  8527 ;;      Totals:         9       0       0       0       0       0       0
  8528 ;;Total ram usage:        9 bytes
  8529 ;; Hardware stack levels used:    1
  8530 ;; Hardware stack levels required when called:    3
  8531 ;; This function calls:
  8532 ;;		Nothing
  8533 ;; This function is called by:
  8534 ;;		_SetMcuRunTime
  8535 ;;		_GetMcuRunTime
  8536 ;; This function uses a non-reentrant model
  8537 ;;
  8538                           
  8539                           	psect	text54
  8540  0027FA                     __ptext54:
  8541                           	opt stack 0
  8542  0027FA                     ___llmod:
  8543                           	opt stack 24
  8544                           
  8545                           ;incstack = 0
  8546  0027FA  501C               	movf	___llmod@divisor,w,c
  8547  0027FC  101D               	iorwf	___llmod@divisor+1,w,c
  8548  0027FE  101E               	iorwf	___llmod@divisor+2,w,c
  8549  002800  101F               	iorwf	___llmod@divisor+3,w,c
  8550  002802  B4D8               	btfsc	status,2,c
  8551  002804  D024               	goto	l1764
  8552  002806  0E01               	movlw	1
  8553  002808  6E20               	movwf	___llmod@counter,c
  8554  00280A  D006               	goto	l1759
  8555  00280C  90D8               	bcf	status,0,c
  8556  00280E  361C               	rlcf	___llmod@divisor,f,c
  8557  002810  361D               	rlcf	___llmod@divisor+1,f,c
  8558  002812  361E               	rlcf	___llmod@divisor+2,f,c
  8559  002814  361F               	rlcf	___llmod@divisor+3,f,c
  8560  002816  2A20               	incf	___llmod@counter,f,c
  8561  002818                     l1759:
  8562  002818  AE1F               	btfss	___llmod@divisor+3,7,c
  8563  00281A  D7F8               	goto	l1760
  8564  00281C                     u6990:
  8565  00281C  501C               	movf	___llmod@divisor,w,c
  8566  00281E  5C18               	subwf	___llmod@dividend,w,c
  8567  002820  501D               	movf	___llmod@divisor+1,w,c
  8568  002822  5819               	subwfb	___llmod@dividend+1,w,c
  8569  002824  501E               	movf	___llmod@divisor+2,w,c
  8570  002826  581A               	subwfb	___llmod@dividend+2,w,c
  8571  002828  501F               	movf	___llmod@divisor+3,w,c
  8572  00282A  581B               	subwfb	___llmod@dividend+3,w,c
  8573  00282C  A0D8               	btfss	status,0,c
  8574  00282E  D008               	goto	l1763
  8575  002830  501C               	movf	___llmod@divisor,w,c
  8576  002832  5E18               	subwf	___llmod@dividend,f,c
  8577  002834  501D               	movf	___llmod@divisor+1,w,c
  8578  002836  5A19               	subwfb	___llmod@dividend+1,f,c
  8579  002838  501E               	movf	___llmod@divisor+2,w,c
  8580  00283A  5A1A               	subwfb	___llmod@dividend+2,f,c
  8581  00283C  501F               	movf	___llmod@divisor+3,w,c
  8582  00283E  5A1B               	subwfb	___llmod@dividend+3,f,c
  8583  002840                     l1763:
  8584  002840  90D8               	bcf	status,0,c
  8585  002842  321F               	rrcf	___llmod@divisor+3,f,c
  8586  002844  321E               	rrcf	___llmod@divisor+2,f,c
  8587  002846  321D               	rrcf	___llmod@divisor+1,f,c
  8588  002848  321C               	rrcf	___llmod@divisor,f,c
  8589  00284A  2E20               	decfsz	___llmod@counter,f,c
  8590  00284C  D7E7               	goto	u6990
  8591  00284E                     l1764:
  8592  00284E  C018  F018         	movff	___llmod@dividend,?___llmod
  8593  002852  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
  8594  002856  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
  8595  00285A  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
  8596  00285E  0012               	return		;funcret
  8597  002860                     __end_of___llmod:
  8598                           	opt stack 0
  8599                           tosu	equ	0xFFF
  8600                           tosh	equ	0xFFE
  8601                           tosl	equ	0xFFD
  8602                           pclath	equ	0xFFA
  8603                           tblptru	equ	0xFF8
  8604                           tblptrh	equ	0xFF7
  8605                           tblptrl	equ	0xFF6
  8606                           tablat	equ	0xFF5
  8607                           prodh	equ	0xFF4
  8608                           prodl	equ	0xFF3
  8609                           intcon	equ	0xFF2
  8610                           intcon2	equ	0xFF1
  8611                           postinc0	equ	0xFEE
  8612                           wreg	equ	0xFE8
  8613                           indf1	equ	0xFE7
  8614                           postdec1	equ	0xFE5
  8615                           fsr1h	equ	0xFE2
  8616                           fsr1l	equ	0xFE1
  8617                           indf2	equ	0xFDF
  8618                           postinc2	equ	0xFDE
  8619                           postdec2	equ	0xFDD
  8620                           fsr2h	equ	0xFDA
  8621                           fsr2l	equ	0xFD9
  8622                           status	equ	0xFD8
  8623                           
  8624 ;; *************** function _SendSystemStartAck *****************
  8625 ;; Defined at:
  8626 ;;		line 132 in file "SystemCommon.c"
  8627 ;; Parameters:    Size  Location     Type
  8628 ;;		None
  8629 ;; Auto vars:     Size  Location     Type
  8630 ;;		None
  8631 ;; Return value:  Size  Location     Type
  8632 ;;                  1    wreg      void 
  8633 ;; Registers used:
  8634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8635 ;; Tracked objects:
  8636 ;;		On entry : 0/0
  8637 ;;		On exit  : 0/0
  8638 ;;		Unchanged: 0/0
  8639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8640 ;;      Params:         0       0       0       0       0       0       0
  8641 ;;      Locals:         0       0       0       0       0       0       0
  8642 ;;      Temps:          0       0       0       0       0       0       0
  8643 ;;      Totals:         0       0       0       0       0       0       0
  8644 ;;Total ram usage:        0 bytes
  8645 ;; Hardware stack levels used:    1
  8646 ;; Hardware stack levels required when called:    6
  8647 ;; This function calls:
  8648 ;;		_SendAckMessage
  8649 ;; This function is called by:
  8650 ;;		_main
  8651 ;; This function uses a non-reentrant model
  8652 ;;
  8653                           
  8654                           	psect	text55
  8655  003788                     __ptext55:
  8656                           	opt stack 0
  8657  003788                     _SendSystemStartAck:
  8658                           	opt stack 24
  8659                           
  8660                           ;SystemCommon.c: 134: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_SYSTE
      +                          M_START);
  8661                           
  8662                           ;incstack = 0
  8663  003788  0E10               	movlw	16
  8664  00378A  6E24               	movwf	SendAckMessage@inRequest,c
  8665  00378C  0E01               	movlw	1
  8666  00378E  ECF8  F016         	call	_SendAckMessage
  8667  003792  0012               	return		;funcret
  8668  003794                     __end_of_SendSystemStartAck:
  8669                           	opt stack 0
  8670                           tosu	equ	0xFFF
  8671                           tosh	equ	0xFFE
  8672                           tosl	equ	0xFFD
  8673                           pclath	equ	0xFFA
  8674                           tblptru	equ	0xFF8
  8675                           tblptrh	equ	0xFF7
  8676                           tblptrl	equ	0xFF6
  8677                           tablat	equ	0xFF5
  8678                           prodh	equ	0xFF4
  8679                           prodl	equ	0xFF3
  8680                           intcon	equ	0xFF2
  8681                           intcon2	equ	0xFF1
  8682                           postinc0	equ	0xFEE
  8683                           wreg	equ	0xFE8
  8684                           indf1	equ	0xFE7
  8685                           postdec1	equ	0xFE5
  8686                           fsr1h	equ	0xFE2
  8687                           fsr1l	equ	0xFE1
  8688                           indf2	equ	0xFDF
  8689                           postinc2	equ	0xFDE
  8690                           postdec2	equ	0xFDD
  8691                           fsr2h	equ	0xFDA
  8692                           fsr2l	equ	0xFD9
  8693                           status	equ	0xFD8
  8694                           
  8695 ;; *************** function _SendAckMessage *****************
  8696 ;; Defined at:
  8697 ;;		line 171 in file "EusartApp.c"
  8698 ;; Parameters:    Size  Location     Type
  8699 ;;  inGroup         1    wreg     enum E7163
  8700 ;;  inRequest       1   35[COMRAM] enum E7171
  8701 ;; Auto vars:     Size  Location     Type
  8702 ;;  inGroup         1   36[COMRAM] enum E7163
  8703 ;;  TxMsg           6   37[COMRAM] unsigned char [6]
  8704 ;; Return value:  Size  Location     Type
  8705 ;;                  1    wreg      void 
  8706 ;; Registers used:
  8707 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8708 ;; Tracked objects:
  8709 ;;		On entry : 0/0
  8710 ;;		On exit  : 0/0
  8711 ;;		Unchanged: 0/0
  8712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8713 ;;      Params:         1       0       0       0       0       0       0
  8714 ;;      Locals:         7       0       0       0       0       0       0
  8715 ;;      Temps:          0       0       0       0       0       0       0
  8716 ;;      Totals:         8       0       0       0       0       0       0
  8717 ;;Total ram usage:        8 bytes
  8718 ;; Hardware stack levels used:    1
  8719 ;; Hardware stack levels required when called:    5
  8720 ;; This function calls:
  8721 ;;		_WriteUartMessage
  8722 ;;		_ZeroArray
  8723 ;;		_crc8
  8724 ;; This function is called by:
  8725 ;;		_testLeds
  8726 ;;		_SetAdcOperationMode
  8727 ;;		_SetConversionResultFormat
  8728 ;;		_SetChannelMode
  8729 ;;		_FlashReadUart
  8730 ;;		_FlashEreaseMem
  8731 ;;		_DacSetValue
  8732 ;;		_UpdateTxFreq
  8733 ;;		_UpdateRxFreq
  8734 ;;		_ResetMcu
  8735 ;;		_ResetCpld
  8736 ;;		_SendSystemStartAck
  8737 ;;		_SetMcuFwVersion
  8738 ;;		_SetCpldFwVersion
  8739 ;;		_keepAliveSignalUart
  8740 ;; This function uses a non-reentrant model
  8741 ;;
  8742                           
  8743                           	psect	text56
  8744  002DF0                     __ptext56:
  8745                           	opt stack 0
  8746  002DF0                     _SendAckMessage:
  8747                           	opt stack 22
  8748                           
  8749                           ;incstack = 0
  8750                           ;SendAckMessage@inGroup stored from wreg
  8751  002DF0  6E25               	movwf	SendAckMessage@inGroup,c
  8752                           
  8753                           ;EusartApp.c: 174: char TxMsg[(0x5) + 1];
  8754                           ;EusartApp.c: 175: ZeroArray(TxMsg, (0x5) + 1);
  8755  002DF2  0E26               	movlw	low SendAckMessage@TxMsg
  8756  002DF4  6E20               	movwf	ZeroArray@array,c
  8757  002DF6  0E00               	movlw	high SendAckMessage@TxMsg
  8758  002DF8  6E21               	movwf	ZeroArray@array+1,c
  8759  002DFA  0E00               	movlw	0
  8760  002DFC  6E23               	movwf	ZeroArray@size+1,c
  8761  002DFE  0E06               	movlw	6
  8762  002E00  6E22               	movwf	ZeroArray@size,c
  8763  002E02  ECFE  F01A         	call	_ZeroArray	;wreg free
  8764                           
  8765                           ;EusartApp.c: 178: TxMsg[(0)] = (0x24);
  8766  002E06  0E24               	movlw	36
  8767  002E08  6E26               	movwf	SendAckMessage@TxMsg,c
  8768                           
  8769                           ;EusartApp.c: 179: TxMsg[(1)] = inGroup;
  8770  002E0A  C025  F027         	movff	SendAckMessage@inGroup,SendAckMessage@TxMsg+1
  8771                           
  8772                           ;EusartApp.c: 180: TxMsg[(2)] = inRequest;
  8773  002E0E  C024  F028         	movff	SendAckMessage@inRequest,SendAckMessage@TxMsg+2
  8774                           
  8775                           ;EusartApp.c: 181: TxMsg[(3)] = 0;
  8776  002E12  0E00               	movlw	0
  8777  002E14  6E29               	movwf	SendAckMessage@TxMsg+3,c
  8778                           
  8779                           ;EusartApp.c: 183: TxMsg[(0x5)] = crc8(TxMsg, (0x5));
  8780  002E16  0E26               	movlw	low SendAckMessage@TxMsg
  8781  002E18  6E18               	movwf	crc8@dataArray,c
  8782  002E1A  0E00               	movlw	high SendAckMessage@TxMsg
  8783  002E1C  6E19               	movwf	crc8@dataArray+1,c
  8784  002E1E  0E00               	movlw	0
  8785  002E20  6E1B               	movwf	crc8@dataSize+1,c
  8786  002E22  0E05               	movlw	5
  8787  002E24  6E1A               	movwf	crc8@dataSize,c
  8788  002E26  EC49  F017         	call	_crc8	;wreg free
  8789  002E2A  6E2B               	movwf	SendAckMessage@TxMsg+5,c
  8790                           
  8791                           ;EusartApp.c: 185: WriteUartMessage(TxMsg, (0x5) + 1);
  8792  002E2C  0E26               	movlw	low SendAckMessage@TxMsg
  8793  002E2E  6E19               	movwf	WriteUartMessage@dataBuf,c
  8794  002E30  0E00               	movlw	high SendAckMessage@TxMsg
  8795  002E32  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  8796  002E34  0E00               	movlw	0
  8797  002E36  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  8798  002E38  0E06               	movlw	6
  8799  002E3A  6E1B               	movwf	WriteUartMessage@dataSize,c
  8800  002E3C  EC9E  F019         	call	_WriteUartMessage	;wreg free
  8801  002E40  0012               	return		;funcret
  8802  002E42                     __end_of_SendAckMessage:
  8803                           	opt stack 0
  8804                           tosu	equ	0xFFF
  8805                           tosh	equ	0xFFE
  8806                           tosl	equ	0xFFD
  8807                           pclath	equ	0xFFA
  8808                           tblptru	equ	0xFF8
  8809                           tblptrh	equ	0xFF7
  8810                           tblptrl	equ	0xFF6
  8811                           tablat	equ	0xFF5
  8812                           prodh	equ	0xFF4
  8813                           prodl	equ	0xFF3
  8814                           intcon	equ	0xFF2
  8815                           intcon2	equ	0xFF1
  8816                           postinc0	equ	0xFEE
  8817                           wreg	equ	0xFE8
  8818                           indf1	equ	0xFE7
  8819                           postdec1	equ	0xFE5
  8820                           fsr1h	equ	0xFE2
  8821                           fsr1l	equ	0xFE1
  8822                           indf2	equ	0xFDF
  8823                           postinc2	equ	0xFDE
  8824                           postdec2	equ	0xFDD
  8825                           fsr2h	equ	0xFDA
  8826                           fsr2l	equ	0xFD9
  8827                           status	equ	0xFD8
  8828                           
  8829 ;; *************** function _crc8 *****************
  8830 ;; Defined at:
  8831 ;;		line 13 in file "SystemCommon.c"
  8832 ;; Parameters:    Size  Location     Type
  8833 ;;  dataArray       2   23[COMRAM] PTR unsigned char 
  8834 ;;		 -> GetMcuRunTime@TxMsg(9), GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), FlashReadCondition@TxMsg(9), 
  8835 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
  8836 ;;  dataSize        2   25[COMRAM] int 
  8837 ;; Auto vars:     Size  Location     Type
  8838 ;;  i               2   30[COMRAM] int 
  8839 ;;  crc             2   28[COMRAM] int 
  8840 ;; Return value:  Size  Location     Type
  8841 ;;                  1    wreg      unsigned char 
  8842 ;; Registers used:
  8843 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8844 ;; Tracked objects:
  8845 ;;		On entry : 0/0
  8846 ;;		On exit  : 0/0
  8847 ;;		Unchanged: 0/0
  8848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8849 ;;      Params:         4       0       0       0       0       0       0
  8850 ;;      Locals:         4       0       0       0       0       0       0
  8851 ;;      Temps:          1       0       0       0       0       0       0
  8852 ;;      Totals:         9       0       0       0       0       0       0
  8853 ;;Total ram usage:        9 bytes
  8854 ;; Hardware stack levels used:    1
  8855 ;; Hardware stack levels required when called:    3
  8856 ;; This function calls:
  8857 ;;		Nothing
  8858 ;; This function is called by:
  8859 ;;		_readUartMessage
  8860 ;;		_SendAckMessage
  8861 ;;		_FlashReadUart
  8862 ;;		_FlashReadCondition
  8863 ;;		_GetMcuFwVersion
  8864 ;;		_GetCpldFwVersion
  8865 ;;		_GetMcuRunTime
  8866 ;; This function uses a non-reentrant model
  8867 ;;
  8868                           
  8869                           	psect	text57
  8870  002E92                     __ptext57:
  8871                           	opt stack 0
  8872  002E92                     _crc8:
  8873                           	opt stack 26
  8874                           
  8875                           ;SystemCommon.c: 15: int crc = 0;
  8876                           
  8877                           ;incstack = 0
  8878  002E92  0E00               	movlw	0
  8879  002E94  6E1E               	movwf	crc8@crc+1,c
  8880  002E96  0E00               	movlw	0
  8881  002E98  6E1D               	movwf	crc8@crc,c
  8882                           
  8883                           ;SystemCommon.c: 16: for (int i = 0; i < dataSize; i++)
  8884  002E9A  0E00               	movlw	0
  8885  002E9C  6E20               	movwf	crc8@i+1,c
  8886  002E9E  0E00               	movlw	0
  8887  002EA0  6E1F               	movwf	crc8@i,c
  8888  002EA2  D00E               	goto	l1206
  8889  002EA4                     
  8890                           ;SystemCommon.c: 17: {
  8891                           ;SystemCommon.c: 18: crc += dataArray[i];
  8892  002EA4  501F               	movf	crc8@i,w,c
  8893  002EA6  2418               	addwf	crc8@dataArray,w,c
  8894  002EA8  6ED9               	movwf	fsr2l,c
  8895  002EAA  5020               	movf	crc8@i+1,w,c
  8896  002EAC  2019               	addwfc	crc8@dataArray+1,w,c
  8897  002EAE  6EDA               	movwf	fsr2h,c
  8898  002EB0  50DF               	movf	indf2,w,c
  8899  002EB2  6E1C               	movwf	??_crc8& (0+255),c
  8900  002EB4  501C               	movf	??_crc8,w,c
  8901  002EB6  261D               	addwf	crc8@crc,f,c
  8902  002EB8  0E00               	movlw	0
  8903  002EBA  221E               	addwfc	crc8@crc+1,f,c
  8904  002EBC  4A1F               	infsnz	crc8@i,f,c
  8905  002EBE  2A20               	incf	crc8@i+1,f,c
  8906  002EC0                     l1206:
  8907  002EC0  501A               	movf	crc8@dataSize,w,c
  8908  002EC2  5C1F               	subwf	crc8@i,w,c
  8909  002EC4  5020               	movf	crc8@i+1,w,c
  8910  002EC6  0A80               	xorlw	128
  8911  002EC8  6E1C               	movwf	??_crc8& (0+255),c
  8912  002ECA  501B               	movf	crc8@dataSize+1,w,c
  8913  002ECC  0A80               	xorlw	128
  8914  002ECE  581C               	subwfb	??_crc8& (0+255),w,c
  8915  002ED0  A0D8               	btfss	status,0,c
  8916  002ED2  D7E8               	goto	l1207
  8917                           
  8918                           ;SystemCommon.c: 19: }
  8919                           ;SystemCommon.c: 20: crc &= 0xff;
  8920  002ED4  0EFF               	movlw	255
  8921  002ED6  161D               	andwf	crc8@crc,f,c
  8922  002ED8  0E00               	movlw	0
  8923  002EDA  161E               	andwf	crc8@crc+1,f,c
  8924                           
  8925                           ;SystemCommon.c: 21: return crc;
  8926  002EDC  501D               	movf	crc8@crc,w,c
  8927  002EDE  0012               	return	
  8928  002EE0                     __end_of_crc8:
  8929                           	opt stack 0
  8930                           tosu	equ	0xFFF
  8931                           tosh	equ	0xFFE
  8932                           tosl	equ	0xFFD
  8933                           pclath	equ	0xFFA
  8934                           tblptru	equ	0xFF8
  8935                           tblptrh	equ	0xFF7
  8936                           tblptrl	equ	0xFF6
  8937                           tablat	equ	0xFF5
  8938                           prodh	equ	0xFF4
  8939                           prodl	equ	0xFF3
  8940                           intcon	equ	0xFF2
  8941                           intcon2	equ	0xFF1
  8942                           postinc0	equ	0xFEE
  8943                           wreg	equ	0xFE8
  8944                           indf1	equ	0xFE7
  8945                           postdec1	equ	0xFE5
  8946                           fsr1h	equ	0xFE2
  8947                           fsr1l	equ	0xFE1
  8948                           indf2	equ	0xFDF
  8949                           postinc2	equ	0xFDE
  8950                           postdec2	equ	0xFDD
  8951                           fsr2h	equ	0xFDA
  8952                           fsr2l	equ	0xFD9
  8953                           status	equ	0xFD8
  8954                           
  8955 ;; *************** function _ZeroArray *****************
  8956 ;; Defined at:
  8957 ;;		line 24 in file "SystemCommon.c"
  8958 ;; Parameters:    Size  Location     Type
  8959 ;;  array           2   31[COMRAM] PTR unsigned char 
  8960 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(9), FlashReadCondition@TxMsg(
      +9), 
  8961 ;;		 -> FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), 
  8962 ;;		 -> rxMsgQueue(20), 
  8963 ;;  size            2   33[COMRAM] int 
  8964 ;; Auto vars:     Size  Location     Type
  8965 ;;		None
  8966 ;; Return value:  Size  Location     Type
  8967 ;;                  1    wreg      void 
  8968 ;; Registers used:
  8969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8970 ;; Tracked objects:
  8971 ;;		On entry : 0/0
  8972 ;;		On exit  : 0/0
  8973 ;;		Unchanged: 0/0
  8974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8975 ;;      Params:         4       0       0       0       0       0       0
  8976 ;;      Locals:         0       0       0       0       0       0       0
  8977 ;;      Temps:          0       0       0       0       0       0       0
  8978 ;;      Totals:         4       0       0       0       0       0       0
  8979 ;;Total ram usage:        4 bytes
  8980 ;; Hardware stack levels used:    1
  8981 ;; Hardware stack levels required when called:    4
  8982 ;; This function calls:
  8983 ;;		_memset
  8984 ;; This function is called by:
  8985 ;;		_readUartMessage
  8986 ;;		_InitRxMessageParams
  8987 ;;		_SendAckMessage
  8988 ;;		_FlashReadUart
  8989 ;;		_FlashEreaseMem
  8990 ;;		_FlashReadCondition
  8991 ;;		_GetIntFromUartData
  8992 ;;		_GetMcuFwVersion
  8993 ;;		_GetCpldFwVersion
  8994 ;; This function uses a non-reentrant model
  8995 ;;
  8996                           
  8997                           	psect	text58
  8998  0035FC                     __ptext58:
  8999                           	opt stack 0
  9000  0035FC                     _ZeroArray:
  9001                           	opt stack 25
  9002                           
  9003                           ;SystemCommon.c: 26: memset(array, 0x0, size);
  9004                           
  9005                           ;incstack = 0
  9006  0035FC  C020  F018         	movff	ZeroArray@array,memset@p1
  9007  003600  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
  9008  003604  0E00               	movlw	0
  9009  003606  6E1B               	movwf	memset@c+1,c
  9010  003608  0E00               	movlw	0
  9011  00360A  6E1A               	movwf	memset@c,c
  9012  00360C  C022  F01C         	movff	ZeroArray@size,memset@n
  9013  003610  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
  9014  003614  EC34  F01A         	call	_memset	;wreg free
  9015  003618  0012               	return		;funcret
  9016  00361A                     __end_of_ZeroArray:
  9017                           	opt stack 0
  9018                           tosu	equ	0xFFF
  9019                           tosh	equ	0xFFE
  9020                           tosl	equ	0xFFD
  9021                           pclath	equ	0xFFA
  9022                           tblptru	equ	0xFF8
  9023                           tblptrh	equ	0xFF7
  9024                           tblptrl	equ	0xFF6
  9025                           tablat	equ	0xFF5
  9026                           prodh	equ	0xFF4
  9027                           prodl	equ	0xFF3
  9028                           intcon	equ	0xFF2
  9029                           intcon2	equ	0xFF1
  9030                           postinc0	equ	0xFEE
  9031                           wreg	equ	0xFE8
  9032                           indf1	equ	0xFE7
  9033                           postdec1	equ	0xFE5
  9034                           fsr1h	equ	0xFE2
  9035                           fsr1l	equ	0xFE1
  9036                           indf2	equ	0xFDF
  9037                           postinc2	equ	0xFDE
  9038                           postdec2	equ	0xFDD
  9039                           fsr2h	equ	0xFDA
  9040                           fsr2l	equ	0xFD9
  9041                           status	equ	0xFD8
  9042                           
  9043 ;; *************** function _WriteUartMessage *****************
  9044 ;; Defined at:
  9045 ;;		line 158 in file "EusartApp.c"
  9046 ;; Parameters:    Size  Location     Type
  9047 ;;  dataBuf         2   24[COMRAM] PTR unsigned char 
  9048 ;;		 -> GetMcuRunTime@TxMsg(9), GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), FlashReadCondition@TxMsg(9), 
  9049 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), 
  9050 ;;  dataSize        2   26[COMRAM] int 
  9051 ;; Auto vars:     Size  Location     Type
  9052 ;;  idx             2   29[COMRAM] int 
  9053 ;; Return value:  Size  Location     Type
  9054 ;;                  1    wreg      void 
  9055 ;; Registers used:
  9056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9057 ;; Tracked objects:
  9058 ;;		On entry : 0/0
  9059 ;;		On exit  : 0/0
  9060 ;;		Unchanged: 0/0
  9061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9062 ;;      Params:         4       0       0       0       0       0       0
  9063 ;;      Locals:         2       0       0       0       0       0       0
  9064 ;;      Temps:          1       0       0       0       0       0       0
  9065 ;;      Totals:         7       0       0       0       0       0       0
  9066 ;;Total ram usage:        7 bytes
  9067 ;; Hardware stack levels used:    1
  9068 ;; Hardware stack levels required when called:    4
  9069 ;; This function calls:
  9070 ;;		_EUSART1_Write
  9071 ;; This function is called by:
  9072 ;;		_SendAckMessage
  9073 ;;		_FlashReadUart
  9074 ;;		_FlashReadCondition
  9075 ;;		_GetMcuFwVersion
  9076 ;;		_GetCpldFwVersion
  9077 ;;		_GetMcuRunTime
  9078 ;; This function uses a non-reentrant model
  9079 ;;
  9080                           
  9081                           	psect	text59
  9082  00333C                     __ptext59:
  9083                           	opt stack 0
  9084  00333C                     _WriteUartMessage:
  9085                           	opt stack 22
  9086                           
  9087                           ;EusartApp.c: 160: for(int idx = 0; idx < dataSize; idx++)
  9088                           
  9089                           ;incstack = 0
  9090  00333C  0E00               	movlw	0
  9091  00333E  6E1F               	movwf	WriteUartMessage@idx+1,c
  9092  003340  0E00               	movlw	0
  9093  003342  6E1E               	movwf	WriteUartMessage@idx,c
  9094  003344  D00B               	goto	l210
  9095  003346                     
  9096                           ;EusartApp.c: 161: {
  9097                           ;EusartApp.c: 162: EUSART1_Write(dataBuf[idx]);
  9098  003346  501E               	movf	WriteUartMessage@idx,w,c
  9099  003348  2419               	addwf	WriteUartMessage@dataBuf,w,c
  9100  00334A  6ED9               	movwf	fsr2l,c
  9101  00334C  501F               	movf	WriteUartMessage@idx+1,w,c
  9102  00334E  201A               	addwfc	WriteUartMessage@dataBuf+1,w,c
  9103  003350  6EDA               	movwf	fsr2h,c
  9104  003352  50DF               	movf	indf2,w,c
  9105  003354  EC9F  F018         	call	_EUSART1_Write
  9106  003358  4A1E               	infsnz	WriteUartMessage@idx,f,c
  9107  00335A  2A1F               	incf	WriteUartMessage@idx+1,f,c
  9108  00335C                     l210:
  9109  00335C  501B               	movf	WriteUartMessage@dataSize,w,c
  9110  00335E  5C1E               	subwf	WriteUartMessage@idx,w,c
  9111  003360  501F               	movf	WriteUartMessage@idx+1,w,c
  9112  003362  0A80               	xorlw	128
  9113  003364  6E1D               	movwf	??_WriteUartMessage& (0+255),c
  9114  003366  501C               	movf	WriteUartMessage@dataSize+1,w,c
  9115  003368  0A80               	xorlw	128
  9116  00336A  581D               	subwfb	??_WriteUartMessage& (0+255),w,c
  9117  00336C  B0D8               	btfsc	status,0,c
  9118  00336E  0012               	return	
  9119  003370  D7EA               	goto	l211
  9120  003372                     __end_of_WriteUartMessage:
  9121                           	opt stack 0
  9122                           tosu	equ	0xFFF
  9123                           tosh	equ	0xFFE
  9124                           tosl	equ	0xFFD
  9125                           pclath	equ	0xFFA
  9126                           tblptru	equ	0xFF8
  9127                           tblptrh	equ	0xFF7
  9128                           tblptrl	equ	0xFF6
  9129                           tablat	equ	0xFF5
  9130                           prodh	equ	0xFF4
  9131                           prodl	equ	0xFF3
  9132                           intcon	equ	0xFF2
  9133                           intcon2	equ	0xFF1
  9134                           postinc0	equ	0xFEE
  9135                           wreg	equ	0xFE8
  9136                           indf1	equ	0xFE7
  9137                           postdec1	equ	0xFE5
  9138                           fsr1h	equ	0xFE2
  9139                           fsr1l	equ	0xFE1
  9140                           indf2	equ	0xFDF
  9141                           postinc2	equ	0xFDE
  9142                           postdec2	equ	0xFDD
  9143                           fsr2h	equ	0xFDA
  9144                           fsr2l	equ	0xFD9
  9145                           status	equ	0xFD8
  9146                           
  9147 ;; *************** function _EUSART1_Write *****************
  9148 ;; Defined at:
  9149 ;;		line 157 in file "mcc_generated_files/eusart1.c"
  9150 ;; Parameters:    Size  Location     Type
  9151 ;;  txData          1    wreg     unsigned char 
  9152 ;; Auto vars:     Size  Location     Type
  9153 ;;  txData          1   23[COMRAM] unsigned char 
  9154 ;; Return value:  Size  Location     Type
  9155 ;;                  1    wreg      void 
  9156 ;; Registers used:
  9157 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9158 ;; Tracked objects:
  9159 ;;		On entry : 0/0
  9160 ;;		On exit  : 0/0
  9161 ;;		Unchanged: 0/0
  9162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9163 ;;      Params:         0       0       0       0       0       0       0
  9164 ;;      Locals:         1       0       0       0       0       0       0
  9165 ;;      Temps:          0       0       0       0       0       0       0
  9166 ;;      Totals:         1       0       0       0       0       0       0
  9167 ;;Total ram usage:        1 bytes
  9168 ;; Hardware stack levels used:    1
  9169 ;; Hardware stack levels required when called:    3
  9170 ;; This function calls:
  9171 ;;		Nothing
  9172 ;; This function is called by:
  9173 ;;		_WriteUartMessage
  9174 ;; This function uses a non-reentrant model
  9175 ;;
  9176                           
  9177                           	psect	text60
  9178  00313E                     __ptext60:
  9179                           	opt stack 0
  9180  00313E                     _EUSART1_Write:
  9181                           	opt stack 22
  9182                           
  9183                           ;incstack = 0
  9184                           ;EUSART1_Write@txData stored from wreg
  9185  00313E  6E18               	movwf	EUSART1_Write@txData,c
  9186  003140                     
  9187                           ;eusart1.c: 160: {
  9188                           
  9189                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
  9190  003140  0100               	movlb	0	; () banked
  9191  003142  51FF               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
  9192  003144  B4D8               	btfsc	status,2,c
  9193  003146  D7FC               	goto	l6381
  9194                           
  9195                           ; BSR set to: 0
  9196                           ;eusart1.c: 161: }
  9197                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
  9198  003148  B89D               	btfsc	3997,4,c	;volatile
  9199  00314A  D003               	goto	l790
  9200                           
  9201                           ; BSR set to: 0
  9202                           ;eusart1.c: 164: {
  9203                           ;eusart1.c: 165: TXREG1 = txData;
  9204  00314C  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  9205                           
  9206                           ;eusart1.c: 166: }
  9207  003150  D012               	goto	l791
  9208  003152                     l790:
  9209                           
  9210                           ; BSR set to: 0
  9211                           ;eusart1.c: 167: else
  9212                           ;eusart1.c: 168: {
  9213                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
  9214  003152  989D               	bcf	3997,4,c	;volatile
  9215                           
  9216                           ; BSR set to: 0
  9217                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
  9218  003154  503A               	movf	_eusart1TxHead,w,c	;volatile
  9219  003156  0D01               	mullw	1
  9220  003158  0E00               	movlw	low _eusart1TxBuffer
  9221  00315A  24F3               	addwf	prodl,w,c
  9222  00315C  6ED9               	movwf	fsr2l,c
  9223  00315E  0E01               	movlw	high _eusart1TxBuffer
  9224  003160  20F4               	addwfc	prodh,w,c
  9225  003162  6EDA               	movwf	fsr2h,c
  9226  003164  C018  FFDF         	movff	EUSART1_Write@txData,indf2
  9227                           
  9228                           ; BSR set to: 0
  9229  003168  2A3A               	incf	_eusart1TxHead,f,c	;volatile
  9230                           
  9231                           ; BSR set to: 0
  9232                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  9233  00316A  0E45               	movlw	69
  9234  00316C  643A               	cpfsgt	_eusart1TxHead,c	;volatile
  9235  00316E  D002               	goto	l792
  9236                           
  9237                           ; BSR set to: 0
  9238                           ;eusart1.c: 172: {
  9239                           ;eusart1.c: 173: eusart1TxHead = 0;
  9240  003170  0E00               	movlw	0
  9241  003172  6E3A               	movwf	_eusart1TxHead,c	;volatile
  9242  003174                     l792:
  9243                           
  9244                           ; BSR set to: 0
  9245                           ;eusart1.c: 174: }
  9246                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
  9247                           
  9248                           ; BSR set to: 0
  9249  003174  07FF               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
  9250  003176                     l791:
  9251                           
  9252                           ; BSR set to: 0
  9253                           ;eusart1.c: 176: }
  9254                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
  9255                           
  9256                           ; BSR set to: 0
  9257  003176  889D               	bsf	3997,4,c	;volatile
  9258                           
  9259                           ; BSR set to: 0
  9260  003178  0012               	return		;funcret
  9261  00317A                     __end_of_EUSART1_Write:
  9262                           	opt stack 0
  9263                           tosu	equ	0xFFF
  9264                           tosh	equ	0xFFE
  9265                           tosl	equ	0xFFD
  9266                           pclath	equ	0xFFA
  9267                           tblptru	equ	0xFF8
  9268                           tblptrh	equ	0xFF7
  9269                           tblptrl	equ	0xFF6
  9270                           tablat	equ	0xFF5
  9271                           prodh	equ	0xFF4
  9272                           prodl	equ	0xFF3
  9273                           intcon	equ	0xFF2
  9274                           intcon2	equ	0xFF1
  9275                           postinc0	equ	0xFEE
  9276                           wreg	equ	0xFE8
  9277                           indf1	equ	0xFE7
  9278                           postdec1	equ	0xFE5
  9279                           fsr1h	equ	0xFE2
  9280                           fsr1l	equ	0xFE1
  9281                           indf2	equ	0xFDF
  9282                           postinc2	equ	0xFDE
  9283                           postdec2	equ	0xFDD
  9284                           fsr2h	equ	0xFDA
  9285                           fsr2l	equ	0xFD9
  9286                           status	equ	0xFD8
  9287                           
  9288 ;; *************** function _InitSystemApplicationManagers *****************
  9289 ;; Defined at:
  9290 ;;		line 33 in file "SystemSettings.c"
  9291 ;; Parameters:    Size  Location     Type
  9292 ;;		None
  9293 ;; Auto vars:     Size  Location     Type
  9294 ;;		None
  9295 ;; Return value:  Size  Location     Type
  9296 ;;                  1    wreg      void 
  9297 ;; Registers used:
  9298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9299 ;; Tracked objects:
  9300 ;;		On entry : 0/0
  9301 ;;		On exit  : 0/0
  9302 ;;		Unchanged: 0/0
  9303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9304 ;;      Params:         0       0       0       0       0       0       0
  9305 ;;      Locals:         0       0       0       0       0       0       0
  9306 ;;      Temps:          0       0       0       0       0       0       0
  9307 ;;      Totals:         0       0       0       0       0       0       0
  9308 ;;Total ram usage:        0 bytes
  9309 ;; Hardware stack levels used:    1
  9310 ;; Hardware stack levels required when called:    8
  9311 ;; This function calls:
  9312 ;;		_ClearMcuRunTime
  9313 ;;		_DacInit
  9314 ;;		_InitAdcApplicationMgr
  9315 ;;		_PLLInitialize
  9316 ;;		_TMR0_StartTimer
  9317 ;; This function is called by:
  9318 ;;		_main
  9319 ;; This function uses a non-reentrant model
  9320 ;;
  9321                           
  9322                           	psect	text61
  9323  00369C                     __ptext61:
  9324                           	opt stack 0
  9325  00369C                     _InitSystemApplicationManagers:
  9326                           	opt stack 22
  9327                           
  9328                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
  9329                           
  9330                           ; BSR set to: 0
  9331                           ;incstack = 0
  9332  00369C  EC88  F01B         	call	_InitAdcApplicationMgr	;wreg free
  9333                           
  9334                           ;SystemSettings.c: 39: TMR0_StartTimer();
  9335  0036A0  ECDD  F01B         	call	_TMR0_StartTimer	;wreg free
  9336                           
  9337                           ;SystemSettings.c: 42: PLLInitialize();
  9338  0036A4  EC21  F017         	call	_PLLInitialize	;wreg free
  9339                           
  9340                           ;SystemSettings.c: 45: ClearMcuRunTime();
  9341  0036A8  EC6D  F01B         	call	_ClearMcuRunTime	;wreg free
  9342                           
  9343                           ;SystemSettings.c: 48: DacInit();
  9344  0036AC  ECD9  F012         	call	_DacInit	;wreg free
  9345  0036B0  0012               	return		;funcret
  9346  0036B2                     __end_of_InitSystemApplicationManagers:
  9347                           	opt stack 0
  9348                           tosu	equ	0xFFF
  9349                           tosh	equ	0xFFE
  9350                           tosl	equ	0xFFD
  9351                           pclath	equ	0xFFA
  9352                           tblptru	equ	0xFF8
  9353                           tblptrh	equ	0xFF7
  9354                           tblptrl	equ	0xFF6
  9355                           tablat	equ	0xFF5
  9356                           prodh	equ	0xFF4
  9357                           prodl	equ	0xFF3
  9358                           intcon	equ	0xFF2
  9359                           intcon2	equ	0xFF1
  9360                           postinc0	equ	0xFEE
  9361                           wreg	equ	0xFE8
  9362                           indf1	equ	0xFE7
  9363                           postdec1	equ	0xFE5
  9364                           fsr1h	equ	0xFE2
  9365                           fsr1l	equ	0xFE1
  9366                           indf2	equ	0xFDF
  9367                           postinc2	equ	0xFDE
  9368                           postdec2	equ	0xFDD
  9369                           fsr2h	equ	0xFDA
  9370                           fsr2l	equ	0xFD9
  9371                           status	equ	0xFD8
  9372                           
  9373 ;; *************** function _TMR0_StartTimer *****************
  9374 ;; Defined at:
  9375 ;;		line 93 in file "mcc_generated_files/tmr0.c"
  9376 ;; Parameters:    Size  Location     Type
  9377 ;;		None
  9378 ;; Auto vars:     Size  Location     Type
  9379 ;;		None
  9380 ;; Return value:  Size  Location     Type
  9381 ;;                  1    wreg      void 
  9382 ;; Registers used:
  9383 ;;		None
  9384 ;; Tracked objects:
  9385 ;;		On entry : 0/0
  9386 ;;		On exit  : 0/0
  9387 ;;		Unchanged: 0/0
  9388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9389 ;;      Params:         0       0       0       0       0       0       0
  9390 ;;      Locals:         0       0       0       0       0       0       0
  9391 ;;      Temps:          0       0       0       0       0       0       0
  9392 ;;      Totals:         0       0       0       0       0       0       0
  9393 ;;Total ram usage:        0 bytes
  9394 ;; Hardware stack levels used:    1
  9395 ;; Hardware stack levels required when called:    3
  9396 ;; This function calls:
  9397 ;;		Nothing
  9398 ;; This function is called by:
  9399 ;;		_InitSystemApplicationManagers
  9400 ;; This function uses a non-reentrant model
  9401 ;;
  9402                           
  9403                           	psect	text62
  9404  0037BA                     __ptext62:
  9405                           	opt stack 0
  9406  0037BA                     _TMR0_StartTimer:
  9407                           	opt stack 26
  9408                           
  9409                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
  9410                           
  9411                           ;incstack = 0
  9412  0037BA  8ED5               	bsf	4053,7,c	;volatile
  9413  0037BC  0012               	return		;funcret
  9414  0037BE                     __end_of_TMR0_StartTimer:
  9415                           	opt stack 0
  9416                           tosu	equ	0xFFF
  9417                           tosh	equ	0xFFE
  9418                           tosl	equ	0xFFD
  9419                           pclath	equ	0xFFA
  9420                           tblptru	equ	0xFF8
  9421                           tblptrh	equ	0xFF7
  9422                           tblptrl	equ	0xFF6
  9423                           tablat	equ	0xFF5
  9424                           prodh	equ	0xFF4
  9425                           prodl	equ	0xFF3
  9426                           intcon	equ	0xFF2
  9427                           intcon2	equ	0xFF1
  9428                           postinc0	equ	0xFEE
  9429                           wreg	equ	0xFE8
  9430                           indf1	equ	0xFE7
  9431                           postdec1	equ	0xFE5
  9432                           fsr1h	equ	0xFE2
  9433                           fsr1l	equ	0xFE1
  9434                           indf2	equ	0xFDF
  9435                           postinc2	equ	0xFDE
  9436                           postdec2	equ	0xFDD
  9437                           fsr2h	equ	0xFDA
  9438                           fsr2l	equ	0xFD9
  9439                           status	equ	0xFD8
  9440                           
  9441 ;; *************** function _PLLInitialize *****************
  9442 ;; Defined at:
  9443 ;;		line 18 in file "SyntApp.c"
  9444 ;; Parameters:    Size  Location     Type
  9445 ;;		None
  9446 ;; Auto vars:     Size  Location     Type
  9447 ;;  idx             1   46[COMRAM] unsigned char 
  9448 ;; Return value:  Size  Location     Type
  9449 ;;                  1    wreg      void 
  9450 ;; Registers used:
  9451 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9452 ;; Tracked objects:
  9453 ;;		On entry : 0/0
  9454 ;;		On exit  : 0/0
  9455 ;;		Unchanged: 0/0
  9456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9457 ;;      Params:         0       0       0       0       0       0       0
  9458 ;;      Locals:         1       0       0       0       0       0       0
  9459 ;;      Temps:          0       0       0       0       0       0       0
  9460 ;;      Totals:         1       0       0       0       0       0       0
  9461 ;;Total ram usage:        1 bytes
  9462 ;; Hardware stack levels used:    1
  9463 ;; Hardware stack levels required when called:    7
  9464 ;; This function calls:
  9465 ;;		_SWSPI_send_word
  9466 ;;		_SwSpi_Set_CE_Pin
  9467 ;; This function is called by:
  9468 ;;		_InitSystemApplicationManagers
  9469 ;; This function uses a non-reentrant model
  9470 ;;
  9471                           
  9472                           	psect	text63
  9473  002E42                     __ptext63:
  9474                           	opt stack 0
  9475  002E42                     _PLLInitialize:
  9476                           	opt stack 22
  9477                           
  9478                           ;SyntApp.c: 25: IOCB = 0b10000000;
  9479                           
  9480                           ;incstack = 0
  9481  002E42  0E80               	movlw	128
  9482  002E44  6E62               	movwf	3938,c	;volatile
  9483                           
  9484                           ;SyntApp.c: 28: SwSpi_Set_CE_Pin(SYNTH_TX, 1);
  9485  002E46  0E01               	movlw	1
  9486  002E48  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  9487  002E4A  0E00               	movlw	0
  9488  002E4C  ECBD  F018         	call	_SwSpi_Set_CE_Pin
  9489                           
  9490                           ;SyntApp.c: 31: for(uint8_t idx = 0; idx < 13; idx++)
  9491  002E50  0E00               	movlw	0
  9492  002E52  6E2F               	movwf	PLLInitialize@idx,c
  9493  002E54                     l7693:
  9494  002E54  0E0C               	movlw	12
  9495  002E56  642F               	cpfsgt	PLLInitialize@idx,c
  9496  002E58  D001               	goto	l443
  9497  002E5A  0012               	return	
  9498  002E5C                     l443:
  9499                           
  9500                           ;SyntApp.c: 32: {
  9501                           ;SyntApp.c: 33: SWSPI_send_word(SYNTH_TX, SYNTH_REGS[idx],3);
  9502  002E5C  502F               	movf	PLLInitialize@idx,w,c
  9503  002E5E  0D04               	mullw	4
  9504  002E60  0E01               	movlw	low _SYNTH_REGS
  9505  002E62  24F3               	addwf	prodl,w,c
  9506  002E64  6EF6               	movwf	tblptrl,c
  9507  002E66  0E06               	movlw	high _SYNTH_REGS
  9508  002E68  20F4               	addwfc	prodh,w,c
  9509  002E6A  6EF7               	movwf	tblptrh,c
  9510  002E6C                     	if	0	;There are less than 3 active tblptr bytes
  9511  002E6C                     	endif
  9512  002E6C  0009               	tblrd		*+
  9513  002E6E  CFF5 F026          	movff	tablat,SWSPI_send_word@data
  9514  002E72  0009               	tblrd		*+
  9515  002E74  CFF5 F027          	movff	tablat,SWSPI_send_word@data+1
  9516  002E78  0009               	tblrd		*+
  9517  002E7A  CFF5 F028          	movff	tablat,SWSPI_send_word@data+2
  9518  002E7E  000A               	tblrd		*-
  9519  002E80  CFF5 F029          	movff	tablat,SWSPI_send_word@data+3
  9520  002E84  0E03               	movlw	3
  9521  002E86  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9522  002E88  0E00               	movlw	0
  9523  002E8A  ECE9  F010         	call	_SWSPI_send_word
  9524  002E8E  2A2F               	incf	PLLInitialize@idx,f,c
  9525  002E90  D7E1               	goto	l7693
  9526  002E92                     __end_of_PLLInitialize:
  9527                           	opt stack 0
  9528                           tosu	equ	0xFFF
  9529                           tosh	equ	0xFFE
  9530                           tosl	equ	0xFFD
  9531                           pclath	equ	0xFFA
  9532                           tblptru	equ	0xFF8
  9533                           tblptrh	equ	0xFF7
  9534                           tblptrl	equ	0xFF6
  9535                           tablat	equ	0xFF5
  9536                           prodh	equ	0xFF4
  9537                           prodl	equ	0xFF3
  9538                           intcon	equ	0xFF2
  9539                           intcon2	equ	0xFF1
  9540                           postinc0	equ	0xFEE
  9541                           wreg	equ	0xFE8
  9542                           indf1	equ	0xFE7
  9543                           postdec1	equ	0xFE5
  9544                           fsr1h	equ	0xFE2
  9545                           fsr1l	equ	0xFE1
  9546                           indf2	equ	0xFDF
  9547                           postinc2	equ	0xFDE
  9548                           postdec2	equ	0xFDD
  9549                           fsr2h	equ	0xFDA
  9550                           fsr2l	equ	0xFD9
  9551                           status	equ	0xFD8
  9552                           
  9553 ;; *************** function _SwSpi_Set_CE_Pin *****************
  9554 ;; Defined at:
  9555 ;;		line 201 in file "SwSpiApp.c"
  9556 ;; Parameters:    Size  Location     Type
  9557 ;;  phrType         1    wreg     enum E7548
  9558 ;;  cPinMode        1   23[COMRAM] unsigned char 
  9559 ;; Auto vars:     Size  Location     Type
  9560 ;;  phrType         1   24[COMRAM] enum E7548
  9561 ;; Return value:  Size  Location     Type
  9562 ;;                  1    wreg      void 
  9563 ;; Registers used:
  9564 ;;		wreg, status,2, status,0
  9565 ;; Tracked objects:
  9566 ;;		On entry : 0/0
  9567 ;;		On exit  : 0/0
  9568 ;;		Unchanged: 0/0
  9569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9570 ;;      Params:         1       0       0       0       0       0       0
  9571 ;;      Locals:         1       0       0       0       0       0       0
  9572 ;;      Temps:          0       0       0       0       0       0       0
  9573 ;;      Totals:         2       0       0       0       0       0       0
  9574 ;;Total ram usage:        2 bytes
  9575 ;; Hardware stack levels used:    1
  9576 ;; Hardware stack levels required when called:    3
  9577 ;; This function calls:
  9578 ;;		Nothing
  9579 ;; This function is called by:
  9580 ;;		_PLLInitialize
  9581 ;; This function uses a non-reentrant model
  9582 ;;
  9583                           
  9584                           	psect	text64
  9585  00317A                     __ptext64:
  9586                           	opt stack 0
  9587  00317A                     _SwSpi_Set_CE_Pin:
  9588                           	opt stack 25
  9589                           
  9590                           ;incstack = 0
  9591                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
  9592  00317A  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
  9593                           
  9594                           ;SwSpiApp.c: 203: switch(phrType)
  9595  00317C  D014               	goto	l609
  9596  00317E                     
  9597                           ;SwSpiApp.c: 206: if(cPinMode == 1)
  9598  00317E  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9599  003180  A4D8               	btfss	status,2,c
  9600  003182  D002               	goto	l611
  9601                           
  9602                           ;SwSpiApp.c: 207: {
  9603                           ;SwSpiApp.c: 208: do { LATCbits.LATC1 = 1; } while(0);
  9604  003184  828B               	bsf	3979,1,c	;volatile
  9605                           
  9606                           ;SwSpiApp.c: 209: }
  9607  003186  0012               	return	
  9608  003188                     l611:
  9609                           
  9610                           ;SwSpiApp.c: 210: else if(cPinMode == 0)
  9611  003188  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9612  00318A  A4D8               	btfss	status,2,c
  9613  00318C  0012               	return	
  9614                           
  9615                           ;SwSpiApp.c: 211: {
  9616                           ;SwSpiApp.c: 212: do { LATCbits.LATC1 = 0; } while(0);
  9617  00318E  928B               	bcf	3979,1,c	;volatile
  9618                           
  9619                           ;SwSpiApp.c: 213: }
  9620                           ;SwSpiApp.c: 214: break;
  9621  003190  0012               	return	
  9622  003192                     
  9623                           ;SwSpiApp.c: 217: if(cPinMode == 1)
  9624  003192  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9625  003194  A4D8               	btfss	status,2,c
  9626  003196  D002               	goto	l620
  9627                           
  9628                           ;SwSpiApp.c: 218: {
  9629                           ;SwSpiApp.c: 219: do { LATDbits.LATD2 = 1; } while(0);
  9630  003198  848C               	bsf	3980,2,c	;volatile
  9631                           
  9632                           ;SwSpiApp.c: 220: }
  9633  00319A  0012               	return	
  9634  00319C                     l620:
  9635                           
  9636                           ;SwSpiApp.c: 221: else if(cPinMode == 0)
  9637  00319C  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9638  00319E  A4D8               	btfss	status,2,c
  9639  0031A0  0012               	return	
  9640                           
  9641                           ;SwSpiApp.c: 222: {
  9642                           ;SwSpiApp.c: 223: do { LATCbits.LATC1 = 0; } while(0);
  9643  0031A2  928B               	bcf	3979,1,c	;volatile
  9644                           
  9645                           ;SwSpiApp.c: 226: }
  9646                           
  9647                           ;SwSpiApp.c: 224: }
  9648                           ;SwSpiApp.c: 225: break;
  9649  0031A4  0012               	return	
  9650  0031A6                     l609:
  9651  0031A6  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
  9652                           
  9653                           ; Switch size 1, requested type "space"
  9654                           ; Number of cases is 2, Range of values is 0 to 1
  9655                           ; switch strategies available:
  9656                           ; Name         Instructions Cycles
  9657                           ; simple_byte            7     4 (average)
  9658                           ;	Chosen strategy is simple_byte
  9659  0031A8  0A00               	xorlw	0	; case 0
  9660  0031AA  B4D8               	btfsc	status,2,c
  9661  0031AC  D7E8               	goto	l610
  9662  0031AE  0A01               	xorlw	1	; case 1
  9663  0031B0  A4D8               	btfss	status,2,c
  9664  0031B2  0012               	return	
  9665  0031B4  D7EE               	goto	l619
  9666  0031B6                     __end_of_SwSpi_Set_CE_Pin:
  9667                           	opt stack 0
  9668                           tosu	equ	0xFFF
  9669                           tosh	equ	0xFFE
  9670                           tosl	equ	0xFFD
  9671                           pclath	equ	0xFFA
  9672                           tblptru	equ	0xFF8
  9673                           tblptrh	equ	0xFF7
  9674                           tblptrl	equ	0xFF6
  9675                           tablat	equ	0xFF5
  9676                           prodh	equ	0xFF4
  9677                           prodl	equ	0xFF3
  9678                           intcon	equ	0xFF2
  9679                           intcon2	equ	0xFF1
  9680                           postinc0	equ	0xFEE
  9681                           wreg	equ	0xFE8
  9682                           indf1	equ	0xFE7
  9683                           postdec1	equ	0xFE5
  9684                           fsr1h	equ	0xFE2
  9685                           fsr1l	equ	0xFE1
  9686                           indf2	equ	0xFDF
  9687                           postinc2	equ	0xFDE
  9688                           postdec2	equ	0xFDD
  9689                           fsr2h	equ	0xFDA
  9690                           fsr2l	equ	0xFD9
  9691                           status	equ	0xFD8
  9692                           
  9693 ;; *************** function _InitAdcApplicationMgr *****************
  9694 ;; Defined at:
  9695 ;;		line 22 in file "AdcApp.c"
  9696 ;; Parameters:    Size  Location     Type
  9697 ;;		None
  9698 ;; Auto vars:     Size  Location     Type
  9699 ;;  channel         1   23[COMRAM] unsigned char 
  9700 ;; Return value:  Size  Location     Type
  9701 ;;                  1    wreg      void 
  9702 ;; Registers used:
  9703 ;;		wreg, status,2
  9704 ;; Tracked objects:
  9705 ;;		On entry : 0/0
  9706 ;;		On exit  : 0/0
  9707 ;;		Unchanged: 0/0
  9708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9709 ;;      Params:         0       0       0       0       0       0       0
  9710 ;;      Locals:         1       0       0       0       0       0       0
  9711 ;;      Temps:          0       0       0       0       0       0       0
  9712 ;;      Totals:         1       0       0       0       0       0       0
  9713 ;;Total ram usage:        1 bytes
  9714 ;; Hardware stack levels used:    1
  9715 ;; Hardware stack levels required when called:    3
  9716 ;; This function calls:
  9717 ;;		Nothing
  9718 ;; This function is called by:
  9719 ;;		_InitSystemApplicationManagers
  9720 ;; This function uses a non-reentrant model
  9721 ;;
  9722                           
  9723                           	psect	text65
  9724  003710                     __ptext65:
  9725                           	opt stack 0
  9726  003710                     _InitAdcApplicationMgr:
  9727                           	opt stack 26
  9728                           
  9729                           ;AdcApp.c: 24: conversionFormat = CONVERSION_LEFT_FORAMT;
  9730                           
  9731                           ;incstack = 0
  9732  003710  0E00               	movlw	0
  9733  003712  0100               	movlb	0	; () banked
  9734  003714  6FD5               	movwf	_conversionFormat& (0+255),b
  9735                           
  9736                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
  9737  003716  0E00               	movlw	0
  9738  003718  6E3D               	movwf	_adcSampleMode,c
  9739                           
  9740                           ;AdcApp.c: 26: char channel = 0;
  9741  00371A  0E00               	movlw	0
  9742  00371C  6E18               	movwf	InitAdcApplicationMgr@channel,c
  9743                           
  9744                           ; BSR set to: 0
  9745  00371E  0012               	return		;funcret
  9746  003720                     __end_of_InitAdcApplicationMgr:
  9747                           	opt stack 0
  9748                           tosu	equ	0xFFF
  9749                           tosh	equ	0xFFE
  9750                           tosl	equ	0xFFD
  9751                           pclath	equ	0xFFA
  9752                           tblptru	equ	0xFF8
  9753                           tblptrh	equ	0xFF7
  9754                           tblptrl	equ	0xFF6
  9755                           tablat	equ	0xFF5
  9756                           prodh	equ	0xFF4
  9757                           prodl	equ	0xFF3
  9758                           intcon	equ	0xFF2
  9759                           intcon2	equ	0xFF1
  9760                           postinc0	equ	0xFEE
  9761                           wreg	equ	0xFE8
  9762                           indf1	equ	0xFE7
  9763                           postdec1	equ	0xFE5
  9764                           fsr1h	equ	0xFE2
  9765                           fsr1l	equ	0xFE1
  9766                           indf2	equ	0xFDF
  9767                           postinc2	equ	0xFDE
  9768                           postdec2	equ	0xFDD
  9769                           fsr2h	equ	0xFDA
  9770                           fsr2l	equ	0xFD9
  9771                           status	equ	0xFD8
  9772                           
  9773 ;; *************** function _DacInit *****************
  9774 ;; Defined at:
  9775 ;;		line 24 in file "DacApp.c"
  9776 ;; Parameters:    Size  Location     Type
  9777 ;;		None
  9778 ;; Auto vars:     Size  Location     Type
  9779 ;;  test            2   46[COMRAM] unsigned int 
  9780 ;; Return value:  Size  Location     Type
  9781 ;;                  1    wreg      void 
  9782 ;; Registers used:
  9783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9784 ;; Tracked objects:
  9785 ;;		On entry : 0/0
  9786 ;;		On exit  : 0/0
  9787 ;;		Unchanged: 0/0
  9788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9789 ;;      Params:         0       0       0       0       0       0       0
  9790 ;;      Locals:         2       0       0       0       0       0       0
  9791 ;;      Temps:          0       0       0       0       0       0       0
  9792 ;;      Totals:         2       0       0       0       0       0       0
  9793 ;;Total ram usage:        2 bytes
  9794 ;; Hardware stack levels used:    1
  9795 ;; Hardware stack levels required when called:    7
  9796 ;; This function calls:
  9797 ;;		_ReadIntFromEeprom
  9798 ;;		_SWSPI_send_word
  9799 ;; This function is called by:
  9800 ;;		_InitSystemApplicationManagers
  9801 ;; This function uses a non-reentrant model
  9802 ;;
  9803                           
  9804                           	psect	text66
  9805  0025B2                     __ptext66:
  9806                           	opt stack 0
  9807  0025B2                     _DacInit:
  9808                           	opt stack 22
  9809                           
  9810                           ;DacApp.c: 27: uint16_t test = ReadIntFromEeprom((0), 2);
  9811                           
  9812                           ; BSR set to: 0
  9813                           ;incstack = 0
  9814  0025B2  0E00               	movlw	0
  9815  0025B4  6E1B               	movwf	ReadIntFromEeprom@numOfByes+1,c
  9816  0025B6  0E02               	movlw	2
  9817  0025B8  6E1A               	movwf	ReadIntFromEeprom@numOfByes,c
  9818  0025BA  0E00               	movlw	0
  9819  0025BC  EC61  F014         	call	_ReadIntFromEeprom
  9820  0025C0  C01A  F02F         	movff	?_ReadIntFromEeprom,DacInit@test
  9821  0025C4  C01B  F030         	movff	?_ReadIntFromEeprom+1,DacInit@test+1
  9822                           
  9823                           ;DacApp.c: 30: SWSPI_send_word(EXT_DAC, (0x2344), 1);
  9824  0025C8  0E44               	movlw	68
  9825  0025CA  6E26               	movwf	SWSPI_send_word@data,c
  9826  0025CC  0E23               	movlw	35
  9827  0025CE  6E27               	movwf	SWSPI_send_word@data+1,c
  9828  0025D0  0E00               	movlw	0
  9829  0025D2  6E28               	movwf	SWSPI_send_word@data+2,c
  9830  0025D4  0E00               	movlw	0
  9831  0025D6  6E29               	movwf	SWSPI_send_word@data+3,c
  9832  0025D8  0E01               	movlw	1
  9833  0025DA  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9834  0025DC  0E02               	movlw	2
  9835  0025DE  ECE9  F010         	call	_SWSPI_send_word
  9836                           
  9837                           ;DacApp.c: 31: SWSPI_send_word(EXT_DAC, (0x6344), 1);
  9838  0025E2  0E44               	movlw	68
  9839  0025E4  6E26               	movwf	SWSPI_send_word@data,c
  9840  0025E6  0E63               	movlw	99
  9841  0025E8  6E27               	movwf	SWSPI_send_word@data+1,c
  9842  0025EA  0E00               	movlw	0
  9843  0025EC  6E28               	movwf	SWSPI_send_word@data+2,c
  9844  0025EE  0E00               	movlw	0
  9845  0025F0  6E29               	movwf	SWSPI_send_word@data+3,c
  9846  0025F2  0E01               	movlw	1
  9847  0025F4  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9848  0025F6  0E02               	movlw	2
  9849  0025F8  ECE9  F010         	call	_SWSPI_send_word
  9850                           
  9851                           ;DacApp.c: 32: SWSPI_send_word(EXT_DAC, (0xA344), 1);
  9852  0025FC  0E44               	movlw	68
  9853  0025FE  6E26               	movwf	SWSPI_send_word@data,c
  9854  002600  0EA3               	movlw	163
  9855  002602  6E27               	movwf	SWSPI_send_word@data+1,c
  9856  002604  0E00               	movlw	0
  9857  002606  6E28               	movwf	SWSPI_send_word@data+2,c
  9858  002608  0E00               	movlw	0
  9859  00260A  6E29               	movwf	SWSPI_send_word@data+3,c
  9860  00260C  0E01               	movlw	1
  9861  00260E  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9862  002610  0E02               	movlw	2
  9863  002612  ECE9  F010         	call	_SWSPI_send_word
  9864                           
  9865                           ;DacApp.c: 33: SWSPI_send_word(EXT_DAC, (0xE344), 1);
  9866  002616  0E44               	movlw	68
  9867  002618  6E26               	movwf	SWSPI_send_word@data,c
  9868  00261A  0EE3               	movlw	227
  9869  00261C  6E27               	movwf	SWSPI_send_word@data+1,c
  9870  00261E  0E00               	movlw	0
  9871  002620  6E28               	movwf	SWSPI_send_word@data+2,c
  9872  002622  0E00               	movlw	0
  9873  002624  6E29               	movwf	SWSPI_send_word@data+3,c
  9874  002626  0E01               	movlw	1
  9875  002628  6E2A               	movwf	SWSPI_send_word@dataSize,c
  9876  00262A  0E02               	movlw	2
  9877  00262C  ECE9  F010         	call	_SWSPI_send_word
  9878  002630  0012               	return		;funcret
  9879  002632                     __end_of_DacInit:
  9880                           	opt stack 0
  9881                           tosu	equ	0xFFF
  9882                           tosh	equ	0xFFE
  9883                           tosl	equ	0xFFD
  9884                           pclath	equ	0xFFA
  9885                           tblptru	equ	0xFF8
  9886                           tblptrh	equ	0xFF7
  9887                           tblptrl	equ	0xFF6
  9888                           tablat	equ	0xFF5
  9889                           prodh	equ	0xFF4
  9890                           prodl	equ	0xFF3
  9891                           intcon	equ	0xFF2
  9892                           intcon2	equ	0xFF1
  9893                           postinc0	equ	0xFEE
  9894                           wreg	equ	0xFE8
  9895                           indf1	equ	0xFE7
  9896                           postdec1	equ	0xFE5
  9897                           fsr1h	equ	0xFE2
  9898                           fsr1l	equ	0xFE1
  9899                           indf2	equ	0xFDF
  9900                           postinc2	equ	0xFDE
  9901                           postdec2	equ	0xFDD
  9902                           fsr2h	equ	0xFDA
  9903                           fsr2l	equ	0xFD9
  9904                           status	equ	0xFD8
  9905                           
  9906 ;; *************** function _SWSPI_send_word *****************
  9907 ;; Defined at:
  9908 ;;		line 17 in file "SwSpiApp.c"
  9909 ;; Parameters:    Size  Location     Type
  9910 ;;  phrType         1    wreg     enum E7548
  9911 ;;  data            4   37[COMRAM] unsigned long 
  9912 ;;  dataSize        1   41[COMRAM] unsigned char 
  9913 ;; Auto vars:     Size  Location     Type
  9914 ;;  phrType         1   45[COMRAM] enum E7548
  9915 ;;  datac           1   42[COMRAM] unsigned char 
  9916 ;;  idx             2   43[COMRAM] int 
  9917 ;; Return value:  Size  Location     Type
  9918 ;;                  1    wreg      void 
  9919 ;; Registers used:
  9920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9921 ;; Tracked objects:
  9922 ;;		On entry : 0/0
  9923 ;;		On exit  : 0/0
  9924 ;;		Unchanged: 0/0
  9925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9926 ;;      Params:         5       0       0       0       0       0       0
  9927 ;;      Locals:         4       0       0       0       0       0       0
  9928 ;;      Temps:          0       0       0       0       0       0       0
  9929 ;;      Totals:         9       0       0       0       0       0       0
  9930 ;;Total ram usage:        9 bytes
  9931 ;; Hardware stack levels used:    1
  9932 ;; Hardware stack levels required when called:    6
  9933 ;; This function calls:
  9934 ;;		_SWSPI_DAC_send_bits
  9935 ;;		_SWSPI_Synth_send_bits
  9936 ;;		_SwSpi_Set_Dac_Sync_Pin
  9937 ;;		_SwSpi_Set_Synth_Le_Pin
  9938 ;;		_make8
  9939 ;; This function is called by:
  9940 ;;		_DacInit
  9941 ;;		_DacSetValue
  9942 ;;		_PLLInitialize
  9943 ;;		_UpdateTxFreq
  9944 ;;		_UpdateRxFreq
  9945 ;; This function uses a non-reentrant model
  9946 ;;
  9947                           
  9948                           	psect	text67
  9949  0021D2                     __ptext67:
  9950                           	opt stack 0
  9951  0021D2                     _SWSPI_send_word:
  9952                           	opt stack 21
  9953                           
  9954                           ;incstack = 0
  9955                           ;SWSPI_send_word@phrType stored from wreg
  9956  0021D2  6E2E               	movwf	SWSPI_send_word@phrType,c
  9957                           
  9958                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
  9959  0021D4  9EF2               	bcf	intcon,7,c	;volatile
  9960                           
  9961                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
  9962  0021D6  502E               	movf	SWSPI_send_word@phrType,w,c
  9963  0021D8  B4D8               	btfsc	status,2,c
  9964  0021DA  D003               	goto	u6790
  9965  0021DC  042E               	decf	SWSPI_send_word@phrType,w,c
  9966  0021DE  A4D8               	btfss	status,2,c
  9967  0021E0  D016               	goto	l518
  9968  0021E2                     u6790:
  9969                           
  9970                           ;SwSpiApp.c: 24: {
  9971                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
  9972  0021E2  0E00               	movlw	0
  9973  0021E4  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
  9974  0021E6  502E               	movf	SWSPI_send_word@phrType,w,c
  9975  0021E8  ECDB  F018         	call	_SwSpi_Set_Synth_Le_Pin
  9976                           
  9977                           ;SwSpiApp.c: 26: SWSPI_Synth_send_bits(phrType, data);
  9978  0021EC  C026  F022         	movff	SWSPI_send_word@data,SWSPI_Synth_send_bits@data
  9979  0021F0  C027  F023         	movff	SWSPI_send_word@data+1,SWSPI_Synth_send_bits@data+1
  9980  0021F4  C028  F024         	movff	SWSPI_send_word@data+2,SWSPI_Synth_send_bits@data+2
  9981  0021F8  C029  F025         	movff	SWSPI_send_word@data+3,SWSPI_Synth_send_bits@data+3
  9982  0021FC  502E               	movf	SWSPI_send_word@phrType,w,c
  9983  0021FE  ECDE  F00F         	call	_SWSPI_Synth_send_bits
  9984                           
  9985                           ;SwSpiApp.c: 27: SwSpi_Set_Synth_Le_Pin(phrType, 1);
  9986  002202  0E01               	movlw	1
  9987  002204  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
  9988  002206  502E               	movf	SWSPI_send_word@phrType,w,c
  9989  002208  ECDB  F018         	call	_SwSpi_Set_Synth_Le_Pin
  9990                           
  9991                           ;SwSpiApp.c: 28: }
  9992  00220C  D02D               	goto	l522
  9993  00220E                     l518:
  9994                           
  9995                           ;SwSpiApp.c: 29: else if(phrType == EXT_DAC)
  9996  00220E  0E02               	movlw	2
  9997  002210  182E               	xorwf	SWSPI_send_word@phrType,w,c
  9998  002212  A4D8               	btfss	status,2,c
  9999  002214  D029               	goto	l522
 10000                           
 10001                           ;SwSpiApp.c: 30: {
 10002                           ;SwSpiApp.c: 31: SwSpi_Set_Dac_Sync_Pin(0);
 10003  002216  0E00               	movlw	0
 10004  002218  EC1C  F01B         	call	_SwSpi_Set_Dac_Sync_Pin
 10005                           
 10006                           ;SwSpiApp.c: 32: for(int idx = dataSize + 1; idx > 0; idx--)
 10007  00221C  0E01               	movlw	1
 10008  00221E  242A               	addwf	SWSPI_send_word@dataSize,w,c
 10009  002220  6E2C               	movwf	SWSPI_send_word@idx,c
 10010  002222  6A2D               	clrf	SWSPI_send_word@idx+1,c
 10011  002224  0E00               	movlw	0
 10012  002226  222D               	addwfc	SWSPI_send_word@idx+1,f,c
 10013  002228                     l6963:
 10014  002228  BE2D               	btfsc	SWSPI_send_word@idx+1,7,c
 10015  00222A  D01B               	goto	u6820
 10016  00222C  502D               	movf	SWSPI_send_word@idx+1,w,c
 10017  00222E  E103               	bnz	l6967
 10018  002230  042C               	decf	SWSPI_send_word@idx,w,c
 10019  002232  A0D8               	btfss	status,0,c
 10020  002234  D016               	goto	u6820
 10021  002236                     l6967:
 10022                           
 10023                           ;SwSpiApp.c: 33: {
 10024                           ;SwSpiApp.c: 34: uint8_t datac = make8(data, idx - 1);
 10025  002236  C026  F018         	movff	SWSPI_send_word@data,make8@data
 10026  00223A  C027  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 10027  00223E  C028  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 10028  002242  C029  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 10029  002246  042C               	decf	SWSPI_send_word@idx,w,c
 10030  002248  6E1C               	movwf	make8@dataLocation,c
 10031  00224A  EC1C  F015         	call	_make8	;wreg free
 10032  00224E  6E2B               	movwf	SWSPI_send_word@datac,c
 10033                           
 10034                           ;SwSpiApp.c: 35: SWSPI_DAC_send_bits(phrType, datac);
 10035  002250  C02B  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 10036  002254  502E               	movf	SWSPI_send_word@phrType,w,c
 10037  002256  ECD0  F015         	call	_SWSPI_DAC_send_bits
 10038  00225A  062C               	decf	SWSPI_send_word@idx,f,c
 10039  00225C  A0D8               	btfss	status,0,c
 10040  00225E  062D               	decf	SWSPI_send_word@idx+1,f,c
 10041  002260  D7E3               	goto	l6963
 10042  002262                     u6820:
 10043                           
 10044                           ;SwSpiApp.c: 36: }
 10045                           ;SwSpiApp.c: 37: SwSpi_Set_Dac_Sync_Pin(1);
 10046  002262  0E01               	movlw	1
 10047  002264  EC1C  F01B         	call	_SwSpi_Set_Dac_Sync_Pin
 10048  002268                     l522:
 10049                           
 10050                           ;SwSpiApp.c: 38: }
 10051                           ;SwSpiApp.c: 40: (INTCONbits.GIE = 1);
 10052  002268  8EF2               	bsf	intcon,7,c	;volatile
 10053  00226A  0012               	return		;funcret
 10054  00226C                     __end_of_SWSPI_send_word:
 10055                           	opt stack 0
 10056                           tosu	equ	0xFFF
 10057                           tosh	equ	0xFFE
 10058                           tosl	equ	0xFFD
 10059                           pclath	equ	0xFFA
 10060                           tblptru	equ	0xFF8
 10061                           tblptrh	equ	0xFF7
 10062                           tblptrl	equ	0xFF6
 10063                           tablat	equ	0xFF5
 10064                           prodh	equ	0xFF4
 10065                           prodl	equ	0xFF3
 10066                           intcon	equ	0xFF2
 10067                           intcon2	equ	0xFF1
 10068                           postinc0	equ	0xFEE
 10069                           wreg	equ	0xFE8
 10070                           indf1	equ	0xFE7
 10071                           postdec1	equ	0xFE5
 10072                           fsr1h	equ	0xFE2
 10073                           fsr1l	equ	0xFE1
 10074                           indf2	equ	0xFDF
 10075                           postinc2	equ	0xFDE
 10076                           postdec2	equ	0xFDD
 10077                           fsr2h	equ	0xFDA
 10078                           fsr2l	equ	0xFD9
 10079                           status	equ	0xFD8
 10080                           
 10081 ;; *************** function _make8 *****************
 10082 ;; Defined at:
 10083 ;;		line 58 in file "SystemCommon.c"
 10084 ;; Parameters:    Size  Location     Type
 10085 ;;  data            4   23[COMRAM] unsigned long 
 10086 ;;  dataLocation    1   27[COMRAM] unsigned char 
 10087 ;; Auto vars:     Size  Location     Type
 10088 ;;		None
 10089 ;; Return value:  Size  Location     Type
 10090 ;;                  1    wreg      unsigned char 
 10091 ;; Registers used:
 10092 ;;		wreg, status,2, status,0
 10093 ;; Tracked objects:
 10094 ;;		On entry : 0/0
 10095 ;;		On exit  : 0/0
 10096 ;;		Unchanged: 0/0
 10097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10098 ;;      Params:         5       0       0       0       0       0       0
 10099 ;;      Locals:         0       0       0       0       0       0       0
 10100 ;;      Temps:          4       0       0       0       0       0       0
 10101 ;;      Totals:         9       0       0       0       0       0       0
 10102 ;;Total ram usage:        9 bytes
 10103 ;; Hardware stack levels used:    1
 10104 ;; Hardware stack levels required when called:    3
 10105 ;; This function calls:
 10106 ;;		Nothing
 10107 ;; This function is called by:
 10108 ;;		_FlashReadCondition
 10109 ;;		_SWSPI_send_word
 10110 ;;		_StoreIntInEeprom
 10111 ;; This function uses a non-reentrant model
 10112 ;;
 10113                           
 10114                           	psect	text68
 10115  002A38                     __ptext68:
 10116                           	opt stack 0
 10117  002A38                     _make8:
 10118                           	opt stack 23
 10119                           
 10120                           ;SystemCommon.c: 60: switch(dataLocation)
 10121                           
 10122                           ;incstack = 0
 10123  002A38  D01F               	goto	l1225
 10124  002A3A                     
 10125                           ;SystemCommon.c: 63: return (data & 0x000000ff);
 10126  002A3A  5018               	movf	make8@data,w,c
 10127  002A3C  0012               	return	
 10128  002A3E                     
 10129                           ;SystemCommon.c: 66: return (data & 0x0000ff00) >> 8;
 10130  002A3E  5019               	movf	make8@data+1,w,c
 10131  002A40  0012               	return	
 10132  002A42                     
 10133                           ;SystemCommon.c: 69: return (data & 0x00ff0000) >> 16;
 10134  002A42  501A               	movf	make8@data+2,w,c
 10135  002A44  0012               	return	
 10136  002A46                     
 10137                           ;SystemCommon.c: 72: return (data & 0xff000000) >> 24;
 10138  002A46  0E00               	movlw	0
 10139  002A48  1418               	andwf	make8@data,w,c
 10140  002A4A  6E1D               	movwf	??_make8& (0+255),c
 10141  002A4C  0E00               	movlw	0
 10142  002A4E  1419               	andwf	make8@data+1,w,c
 10143  002A50  6E1E               	movwf	(??_make8+1)& (0+255),c
 10144  002A52  0E00               	movlw	0
 10145  002A54  141A               	andwf	make8@data+2,w,c
 10146  002A56  6E1F               	movwf	(??_make8+2)& (0+255),c
 10147  002A58  0EFF               	movlw	255
 10148  002A5A  141B               	andwf	make8@data+3,w,c
 10149  002A5C  6E20               	movwf	(??_make8+3)& (0+255),c
 10150  002A5E  0E19               	movlw	25
 10151  002A60  D005               	goto	u6210
 10152  002A62                     u6215:
 10153  002A62  90D8               	bcf	status,0,c
 10154  002A64  3220               	rrcf	??_make8+3,f,c
 10155  002A66  321F               	rrcf	??_make8+2,f,c
 10156  002A68  321E               	rrcf	??_make8+1,f,c
 10157  002A6A  321D               	rrcf	??_make8,f,c
 10158  002A6C                     u6210:
 10159  002A6C  2EE8               	decfsz	wreg,f,c
 10160  002A6E  D7F9               	goto	u6215
 10161  002A70  501D               	movf	??_make8,w,c
 10162  002A72  0012               	return	
 10163  002A74                     
 10164                           ;SystemCommon.c: 75: return (0);
 10165  002A74  0E00               	movlw	0
 10166                           
 10167                           ;SystemCommon.c: 76: }
 10168  002A76  0012               	return	
 10169  002A78                     l1225:
 10170  002A78  501C               	movf	make8@dataLocation,w,c
 10171                           
 10172                           ; Switch size 1, requested type "space"
 10173                           ; Number of cases is 4, Range of values is 0 to 3
 10174                           ; switch strategies available:
 10175                           ; Name         Instructions Cycles
 10176                           ; simple_byte           13     7 (average)
 10177                           ;	Chosen strategy is simple_byte
 10178  002A7A  0A00               	xorlw	0	; case 0
 10179  002A7C  B4D8               	btfsc	status,2,c
 10180  002A7E  D7DD               	goto	l1226
 10181  002A80  0A01               	xorlw	1	; case 1
 10182  002A82  B4D8               	btfsc	status,2,c
 10183  002A84  D7DC               	goto	l1228
 10184  002A86  0A03               	xorlw	3	; case 2
 10185  002A88  B4D8               	btfsc	status,2,c
 10186  002A8A  D7DB               	goto	l1229
 10187  002A8C  0A01               	xorlw	1	; case 3
 10188  002A8E  B4D8               	btfsc	status,2,c
 10189  002A90  D7DA               	goto	l1230
 10190  002A92  D7F0               	goto	l1231
 10191  002A94                     __end_of_make8:
 10192                           	opt stack 0
 10193                           tosu	equ	0xFFF
 10194                           tosh	equ	0xFFE
 10195                           tosl	equ	0xFFD
 10196                           pclath	equ	0xFFA
 10197                           tblptru	equ	0xFF8
 10198                           tblptrh	equ	0xFF7
 10199                           tblptrl	equ	0xFF6
 10200                           tablat	equ	0xFF5
 10201                           prodh	equ	0xFF4
 10202                           prodl	equ	0xFF3
 10203                           intcon	equ	0xFF2
 10204                           intcon2	equ	0xFF1
 10205                           postinc0	equ	0xFEE
 10206                           wreg	equ	0xFE8
 10207                           indf1	equ	0xFE7
 10208                           postdec1	equ	0xFE5
 10209                           fsr1h	equ	0xFE2
 10210                           fsr1l	equ	0xFE1
 10211                           indf2	equ	0xFDF
 10212                           postinc2	equ	0xFDE
 10213                           postdec2	equ	0xFDD
 10214                           fsr2h	equ	0xFDA
 10215                           fsr2l	equ	0xFD9
 10216                           status	equ	0xFD8
 10217                           
 10218 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 10219 ;; Defined at:
 10220 ;;		line 232 in file "SwSpiApp.c"
 10221 ;; Parameters:    Size  Location     Type
 10222 ;;  phrType         1    wreg     enum E7548
 10223 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10224 ;; Auto vars:     Size  Location     Type
 10225 ;;  phrType         1   24[COMRAM] enum E7548
 10226 ;; Return value:  Size  Location     Type
 10227 ;;                  1    wreg      void 
 10228 ;; Registers used:
 10229 ;;		wreg, status,2, status,0
 10230 ;; Tracked objects:
 10231 ;;		On entry : 0/0
 10232 ;;		On exit  : 0/0
 10233 ;;		Unchanged: 0/0
 10234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10235 ;;      Params:         1       0       0       0       0       0       0
 10236 ;;      Locals:         1       0       0       0       0       0       0
 10237 ;;      Temps:          0       0       0       0       0       0       0
 10238 ;;      Totals:         2       0       0       0       0       0       0
 10239 ;;Total ram usage:        2 bytes
 10240 ;; Hardware stack levels used:    1
 10241 ;; Hardware stack levels required when called:    3
 10242 ;; This function calls:
 10243 ;;		Nothing
 10244 ;; This function is called by:
 10245 ;;		_SWSPI_send_word
 10246 ;; This function uses a non-reentrant model
 10247 ;;
 10248                           
 10249                           	psect	text69
 10250  0031B6                     __ptext69:
 10251                           	opt stack 0
 10252  0031B6                     _SwSpi_Set_Synth_Le_Pin:
 10253                           	opt stack 23
 10254                           
 10255                           ;incstack = 0
 10256                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 10257  0031B6  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 10258                           
 10259                           ;SwSpiApp.c: 234: switch(phrType)
 10260  0031B8  D014               	goto	l630
 10261  0031BA                     
 10262                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 10263  0031BA  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10264  0031BC  A4D8               	btfss	status,2,c
 10265  0031BE  D002               	goto	l632
 10266                           
 10267                           ;SwSpiApp.c: 238: {
 10268                           ;SwSpiApp.c: 239: do { LATCbits.LATC2 = 1; } while(0);
 10269  0031C0  848B               	bsf	3979,2,c	;volatile
 10270                           
 10271                           ;SwSpiApp.c: 240: }
 10272  0031C2  0012               	return	
 10273  0031C4                     l632:
 10274                           
 10275                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 10276  0031C4  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10277  0031C6  A4D8               	btfss	status,2,c
 10278  0031C8  0012               	return	
 10279                           
 10280                           ;SwSpiApp.c: 242: {
 10281                           ;SwSpiApp.c: 243: do { LATCbits.LATC2 = 0; } while(0);
 10282  0031CA  948B               	bcf	3979,2,c	;volatile
 10283                           
 10284                           ;SwSpiApp.c: 244: }
 10285                           ;SwSpiApp.c: 245: break;
 10286  0031CC  0012               	return	
 10287  0031CE                     
 10288                           ;SwSpiApp.c: 248: if(cPinMode == 1)
 10289  0031CE  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10290  0031D0  A4D8               	btfss	status,2,c
 10291  0031D2  D002               	goto	l641
 10292                           
 10293                           ;SwSpiApp.c: 249: {
 10294                           ;SwSpiApp.c: 250: do { LATDbits.LATD3 = 1; } while(0);
 10295  0031D4  868C               	bsf	3980,3,c	;volatile
 10296                           
 10297                           ;SwSpiApp.c: 251: }
 10298  0031D6  0012               	return	
 10299  0031D8                     l641:
 10300                           
 10301                           ;SwSpiApp.c: 252: else if(cPinMode == 0)
 10302  0031D8  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10303  0031DA  A4D8               	btfss	status,2,c
 10304  0031DC  0012               	return	
 10305                           
 10306                           ;SwSpiApp.c: 253: {
 10307                           ;SwSpiApp.c: 254: do { LATDbits.LATD3 = 0; } while(0);
 10308  0031DE  968C               	bcf	3980,3,c	;volatile
 10309                           
 10310                           ;SwSpiApp.c: 257: }
 10311                           
 10312                           ;SwSpiApp.c: 255: }
 10313                           ;SwSpiApp.c: 256: break;
 10314  0031E0  0012               	return	
 10315  0031E2                     l630:
 10316  0031E2  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 10317                           
 10318                           ; Switch size 1, requested type "space"
 10319                           ; Number of cases is 2, Range of values is 0 to 1
 10320                           ; switch strategies available:
 10321                           ; Name         Instructions Cycles
 10322                           ; simple_byte            7     4 (average)
 10323                           ;	Chosen strategy is simple_byte
 10324  0031E4  0A00               	xorlw	0	; case 0
 10325  0031E6  B4D8               	btfsc	status,2,c
 10326  0031E8  D7E8               	goto	l631
 10327  0031EA  0A01               	xorlw	1	; case 1
 10328  0031EC  A4D8               	btfss	status,2,c
 10329  0031EE  0012               	return	
 10330  0031F0  D7EE               	goto	l640
 10331  0031F2                     __end_of_SwSpi_Set_Synth_Le_Pin:
 10332                           	opt stack 0
 10333                           tosu	equ	0xFFF
 10334                           tosh	equ	0xFFE
 10335                           tosl	equ	0xFFD
 10336                           pclath	equ	0xFFA
 10337                           tblptru	equ	0xFF8
 10338                           tblptrh	equ	0xFF7
 10339                           tblptrl	equ	0xFF6
 10340                           tablat	equ	0xFF5
 10341                           prodh	equ	0xFF4
 10342                           prodl	equ	0xFF3
 10343                           intcon	equ	0xFF2
 10344                           intcon2	equ	0xFF1
 10345                           postinc0	equ	0xFEE
 10346                           wreg	equ	0xFE8
 10347                           indf1	equ	0xFE7
 10348                           postdec1	equ	0xFE5
 10349                           fsr1h	equ	0xFE2
 10350                           fsr1l	equ	0xFE1
 10351                           indf2	equ	0xFDF
 10352                           postinc2	equ	0xFDE
 10353                           postdec2	equ	0xFDD
 10354                           fsr2h	equ	0xFDA
 10355                           fsr2l	equ	0xFD9
 10356                           status	equ	0xFD8
 10357                           
 10358 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 10359 ;; Defined at:
 10360 ;;		line 260 in file "SwSpiApp.c"
 10361 ;; Parameters:    Size  Location     Type
 10362 ;;  cPinMode        1    wreg     unsigned char 
 10363 ;; Auto vars:     Size  Location     Type
 10364 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10365 ;; Return value:  Size  Location     Type
 10366 ;;                  1    wreg      void 
 10367 ;; Registers used:
 10368 ;;		wreg, status,2, status,0
 10369 ;; Tracked objects:
 10370 ;;		On entry : 0/0
 10371 ;;		On exit  : 0/0
 10372 ;;		Unchanged: 0/0
 10373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10374 ;;      Params:         0       0       0       0       0       0       0
 10375 ;;      Locals:         1       0       0       0       0       0       0
 10376 ;;      Temps:          0       0       0       0       0       0       0
 10377 ;;      Totals:         1       0       0       0       0       0       0
 10378 ;;Total ram usage:        1 bytes
 10379 ;; Hardware stack levels used:    1
 10380 ;; Hardware stack levels required when called:    3
 10381 ;; This function calls:
 10382 ;;		Nothing
 10383 ;; This function is called by:
 10384 ;;		_SWSPI_send_word
 10385 ;; This function uses a non-reentrant model
 10386 ;;
 10387                           
 10388                           	psect	text70
 10389  003638                     __ptext70:
 10390                           	opt stack 0
 10391  003638                     _SwSpi_Set_Dac_Sync_Pin:
 10392                           	opt stack 23
 10393                           
 10394                           ;incstack = 0
 10395                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 10396  003638  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 10397                           
 10398                           ;SwSpiApp.c: 262: switch(cPinMode)
 10399  00363A  D004               	goto	l651
 10400  00363C                     
 10401                           ;SwSpiApp.c: 265: do { LATAbits.LATA2 = 0; } while(0);
 10402  00363C  9489               	bcf	3977,2,c	;volatile
 10403                           
 10404                           ;SwSpiApp.c: 266: break;
 10405  00363E  0012               	return	
 10406  003640                     
 10407                           ;SwSpiApp.c: 269: do { LATAbits.LATA2 = 1; } while(0);
 10408  003640  8489               	bsf	3977,2,c	;volatile
 10409                           
 10410                           ;SwSpiApp.c: 271: }
 10411                           
 10412                           ;SwSpiApp.c: 270: break;
 10413  003642  0012               	return	
 10414  003644                     l651:
 10415  003644  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 10416                           
 10417                           ; Switch size 1, requested type "space"
 10418                           ; Number of cases is 2, Range of values is 0 to 1
 10419                           ; switch strategies available:
 10420                           ; Name         Instructions Cycles
 10421                           ; simple_byte            7     4 (average)
 10422                           ;	Chosen strategy is simple_byte
 10423  003646  0A00               	xorlw	0	; case 0
 10424  003648  B4D8               	btfsc	status,2,c
 10425  00364A  D7F8               	goto	l652
 10426  00364C  0A01               	xorlw	1	; case 1
 10427  00364E  A4D8               	btfss	status,2,c
 10428  003650  0012               	return	
 10429  003652  D7F6               	goto	l656
 10430  003654                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 10431                           	opt stack 0
 10432                           tosu	equ	0xFFF
 10433                           tosh	equ	0xFFE
 10434                           tosl	equ	0xFFD
 10435                           pclath	equ	0xFFA
 10436                           tblptru	equ	0xFF8
 10437                           tblptrh	equ	0xFF7
 10438                           tblptrl	equ	0xFF6
 10439                           tablat	equ	0xFF5
 10440                           prodh	equ	0xFF4
 10441                           prodl	equ	0xFF3
 10442                           intcon	equ	0xFF2
 10443                           intcon2	equ	0xFF1
 10444                           postinc0	equ	0xFEE
 10445                           wreg	equ	0xFE8
 10446                           indf1	equ	0xFE7
 10447                           postdec1	equ	0xFE5
 10448                           fsr1h	equ	0xFE2
 10449                           fsr1l	equ	0xFE1
 10450                           indf2	equ	0xFDF
 10451                           postinc2	equ	0xFDE
 10452                           postdec2	equ	0xFDD
 10453                           fsr2h	equ	0xFDA
 10454                           fsr2l	equ	0xFD9
 10455                           status	equ	0xFD8
 10456                           
 10457 ;; *************** function _SWSPI_Synth_send_bits *****************
 10458 ;; Defined at:
 10459 ;;		line 67 in file "SwSpiApp.c"
 10460 ;; Parameters:    Size  Location     Type
 10461 ;;  phrType         1    wreg     enum E7548
 10462 ;;  data            4   33[COMRAM] unsigned long 
 10463 ;; Auto vars:     Size  Location     Type
 10464 ;;  phrType         1   37[BANK0 ] enum E7548
 10465 ;;  bitArray       32    0[BANK0 ] unsigned char [32]
 10466 ;;  mask            4   32[BANK0 ] unsigned long 
 10467 ;;  count           1   36[BANK0 ] unsigned char 
 10468 ;; Return value:  Size  Location     Type
 10469 ;;                  1    wreg      void 
 10470 ;; Registers used:
 10471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10472 ;; Tracked objects:
 10473 ;;		On entry : 0/0
 10474 ;;		On exit  : 0/0
 10475 ;;		Unchanged: 0/0
 10476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10477 ;;      Params:         4       0       0       0       0       0       0
 10478 ;;      Locals:         0      38       0       0       0       0       0
 10479 ;;      Temps:          0       0       0       0       0       0       0
 10480 ;;      Totals:         4      38       0       0       0       0       0
 10481 ;;Total ram usage:       42 bytes
 10482 ;; Hardware stack levels used:    1
 10483 ;; Hardware stack levels required when called:    5
 10484 ;; This function calls:
 10485 ;;		_Make32bitsArray
 10486 ;;		_SwSpi_Clk_Pin
 10487 ;;		_SwSpi_Data_Pin
 10488 ;;		_ZeroBitsArray
 10489 ;; This function is called by:
 10490 ;;		_SWSPI_send_word
 10491 ;; This function uses a non-reentrant model
 10492 ;;
 10493                           
 10494                           	psect	text71
 10495  001FBC                     __ptext71:
 10496                           	opt stack 0
 10497  001FBC                     _SWSPI_Synth_send_bits:
 10498                           	opt stack 21
 10499                           
 10500                           ;incstack = 0
 10501                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 10502  001FBC  0100               	movlb	0	; () banked
 10503  001FBE  6F85               	movwf	SWSPI_Synth_send_bits@phrType& (0+255),b
 10504                           
 10505                           ;SwSpiApp.c: 69: uint8_t count;
 10506                           ;SwSpiApp.c: 70: uint32_t mask = 0x1;
 10507  001FC0  0E01               	movlw	1
 10508  001FC2  0100               	movlb	0	; () banked
 10509  001FC4  6F80               	movwf	SWSPI_Synth_send_bits@mask& (0+255),b
 10510  001FC6  0E00               	movlw	0
 10511  001FC8  6F81               	movwf	(SWSPI_Synth_send_bits@mask+1)& (0+255),b
 10512  001FCA  0E00               	movlw	0
 10513  001FCC  6F82               	movwf	(SWSPI_Synth_send_bits@mask+2)& (0+255),b
 10514  001FCE  0E00               	movlw	0
 10515  001FD0  6F83               	movwf	(SWSPI_Synth_send_bits@mask+3)& (0+255),b
 10516                           
 10517                           ; BSR set to: 0
 10518                           ;SwSpiApp.c: 72: bool bitArray[32];
 10519                           ;SwSpiApp.c: 73: ZeroBitsArray(bitArray);
 10520  001FD2  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 10521  001FD4  6E20               	movwf	ZeroBitsArray@array,c
 10522  001FD6  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 10523  001FD8  6E21               	movwf	ZeroBitsArray@array+1,c
 10524  001FDA  EC0D  F01B         	call	_ZeroBitsArray	;wreg free
 10525                           
 10526                           ;SwSpiApp.c: 75: Make32bitsArray(bitArray, data);
 10527  001FDE  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 10528  001FE0  6E18               	movwf	Make32bitsArray@array,c
 10529  001FE2  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 10530  001FE4  6E19               	movwf	Make32bitsArray@array+1,c
 10531  001FE6  C022  F01A         	movff	SWSPI_Synth_send_bits@data,Make32bitsArray@data
 10532  001FEA  C023  F01B         	movff	SWSPI_Synth_send_bits@data+1,Make32bitsArray@data+1
 10533  001FEE  C024  F01C         	movff	SWSPI_Synth_send_bits@data+2,Make32bitsArray@data+2
 10534  001FF2  C025  F01D         	movff	SWSPI_Synth_send_bits@data+3,Make32bitsArray@data+3
 10535  001FF6  ECA4  F015         	call	_Make32bitsArray	;wreg free
 10536                           
 10537                           ;SwSpiApp.c: 77: for (count = 0; count <= 31 ; count++)
 10538  001FFA  0E00               	movlw	0
 10539  001FFC  0100               	movlb	0	; () banked
 10540  001FFE  6F84               	movwf	SWSPI_Synth_send_bits@count& (0+255),b
 10541  002000                     l6657:
 10542                           
 10543                           ; BSR set to: 0
 10544  002000  0E1F               	movlw	31
 10545  002002  6584               	cpfsgt	SWSPI_Synth_send_bits@count& (0+255),b
 10546  002004  D001               	goto	l536
 10547  002006  D026               	goto	u6280
 10548  002008                     l536:
 10549                           
 10550                           ; BSR set to: 0
 10551                           ;SwSpiApp.c: 78: {
 10552                           ;SwSpiApp.c: 80: SwSpi_Clk_Pin(phrType, 0);
 10553                           
 10554                           ; BSR set to: 0
 10555  002008  0E00               	movlw	0
 10556  00200A  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10557  00200C  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10558  00200E  EC52  F016         	call	_SwSpi_Clk_Pin
 10559                           
 10560                           ;SwSpiApp.c: 82: if (bitArray[count])
 10561  002012  0100               	movlb	0	; () banked
 10562  002014  5184               	movf	SWSPI_Synth_send_bits@count& (0+255),w,b
 10563  002016  0D01               	mullw	1
 10564  002018  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 10565  00201A  24F3               	addwf	prodl,w,c
 10566  00201C  6ED9               	movwf	fsr2l,c
 10567  00201E  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 10568  002020  20F4               	addwfc	prodh,w,c
 10569  002022  6EDA               	movwf	fsr2h,c
 10570  002024  50DF               	movf	indf2,w,c
 10571  002026  B4D8               	btfsc	status,2,c
 10572  002028  D006               	goto	l538
 10573                           
 10574                           ; BSR set to: 0
 10575                           ;SwSpiApp.c: 83: {
 10576                           ;SwSpiApp.c: 84: SwSpi_Data_Pin(phrType, 1);
 10577  00202A  0E01               	movlw	1
 10578  00202C  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 10579  00202E  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10580  002030  EC27  F016         	call	_SwSpi_Data_Pin
 10581                           
 10582                           ;SwSpiApp.c: 85: }
 10583  002034  D006               	goto	l539
 10584  002036                     l538:
 10585                           
 10586                           ;SwSpiApp.c: 86: else
 10587                           ;SwSpiApp.c: 87: {
 10588                           ;SwSpiApp.c: 88: SwSpi_Data_Pin(phrType, 0);
 10589  002036  0E00               	movlw	0
 10590  002038  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 10591  00203A  0100               	movlb	0	; () banked
 10592  00203C  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10593  00203E  EC27  F016         	call	_SwSpi_Data_Pin
 10594  002042                     l539:
 10595                           
 10596                           ;SwSpiApp.c: 89: }
 10597                           ;SwSpiApp.c: 91: SwSpi_Clk_Pin(phrType, 1);
 10598  002042  0E01               	movlw	1
 10599  002044  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10600  002046  0100               	movlb	0	; () banked
 10601  002048  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10602  00204A  EC52  F016         	call	_SwSpi_Clk_Pin
 10603  00204E  0100               	movlb	0	; () banked
 10604  002050  2B84               	incf	SWSPI_Synth_send_bits@count& (0+255),f,b
 10605  002052  D7D6               	goto	l6657
 10606  002054                     u6280:
 10607                           
 10608                           ; BSR set to: 0
 10609                           ;SwSpiApp.c: 92: }
 10610                           ;SwSpiApp.c: 94: _delay((unsigned long)((50)*(8000000/4000000.0)));
 10611                           
 10612                           ; BSR set to: 0
 10613  002054  0E21               	movlw	33
 10614  002056                     u8137:
 10615  002056  2EE8               	decfsz	wreg,f,c
 10616  002058  D7FE               	bra	u8137
 10617  00205A  F000               	nop	
 10618                           
 10619                           ;SwSpiApp.c: 95: SwSpi_Data_Pin(phrType, 0);
 10620  00205C  0E00               	movlw	0
 10621  00205E  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 10622  002060  0100               	movlb	0	; () banked
 10623  002062  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10624  002064  EC27  F016         	call	_SwSpi_Data_Pin
 10625                           
 10626                           ;SwSpiApp.c: 96: SwSpi_Clk_Pin(phrType, 0);
 10627  002068  0E00               	movlw	0
 10628  00206A  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10629  00206C  0100               	movlb	0	; () banked
 10630  00206E  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 10631  002070  EC52  F016         	call	_SwSpi_Clk_Pin
 10632  002074  0012               	return		;funcret
 10633  002076                     __end_of_SWSPI_Synth_send_bits:
 10634                           	opt stack 0
 10635                           tosu	equ	0xFFF
 10636                           tosh	equ	0xFFE
 10637                           tosl	equ	0xFFD
 10638                           pclath	equ	0xFFA
 10639                           tblptru	equ	0xFF8
 10640                           tblptrh	equ	0xFF7
 10641                           tblptrl	equ	0xFF6
 10642                           tablat	equ	0xFF5
 10643                           prodh	equ	0xFF4
 10644                           prodl	equ	0xFF3
 10645                           intcon	equ	0xFF2
 10646                           intcon2	equ	0xFF1
 10647                           postinc0	equ	0xFEE
 10648                           wreg	equ	0xFE8
 10649                           indf1	equ	0xFE7
 10650                           postdec1	equ	0xFE5
 10651                           fsr1h	equ	0xFE2
 10652                           fsr1l	equ	0xFE1
 10653                           indf2	equ	0xFDF
 10654                           postinc2	equ	0xFDE
 10655                           postdec2	equ	0xFDD
 10656                           fsr2h	equ	0xFDA
 10657                           fsr2l	equ	0xFD9
 10658                           status	equ	0xFD8
 10659                           
 10660 ;; *************** function _ZeroBitsArray *****************
 10661 ;; Defined at:
 10662 ;;		line 29 in file "SystemCommon.c"
 10663 ;; Parameters:    Size  Location     Type
 10664 ;;  array           2   31[COMRAM] PTR unsigned char 
 10665 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 10666 ;; Auto vars:     Size  Location     Type
 10667 ;;		None
 10668 ;; Return value:  Size  Location     Type
 10669 ;;                  1    wreg      void 
 10670 ;; Registers used:
 10671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10672 ;; Tracked objects:
 10673 ;;		On entry : 0/0
 10674 ;;		On exit  : 0/0
 10675 ;;		Unchanged: 0/0
 10676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10677 ;;      Params:         2       0       0       0       0       0       0
 10678 ;;      Locals:         0       0       0       0       0       0       0
 10679 ;;      Temps:          0       0       0       0       0       0       0
 10680 ;;      Totals:         2       0       0       0       0       0       0
 10681 ;;Total ram usage:        2 bytes
 10682 ;; Hardware stack levels used:    1
 10683 ;; Hardware stack levels required when called:    4
 10684 ;; This function calls:
 10685 ;;		_memset
 10686 ;; This function is called by:
 10687 ;;		_SWSPI_Synth_send_bits
 10688 ;; This function uses a non-reentrant model
 10689 ;;
 10690                           
 10691                           	psect	text72
 10692  00361A                     __ptext72:
 10693                           	opt stack 0
 10694  00361A                     _ZeroBitsArray:
 10695                           	opt stack 21
 10696                           
 10697                           ;SystemCommon.c: 31: memset(array, 0x0, 32);
 10698                           
 10699                           ;incstack = 0
 10700  00361A  C020  F018         	movff	ZeroBitsArray@array,memset@p1
 10701  00361E  C021  F019         	movff	ZeroBitsArray@array+1,memset@p1+1
 10702  003622  0E00               	movlw	0
 10703  003624  6E1B               	movwf	memset@c+1,c
 10704  003626  0E00               	movlw	0
 10705  003628  6E1A               	movwf	memset@c,c
 10706  00362A  0E00               	movlw	0
 10707  00362C  6E1D               	movwf	memset@n+1,c
 10708  00362E  0E20               	movlw	32
 10709  003630  6E1C               	movwf	memset@n,c
 10710  003632  EC34  F01A         	call	_memset	;wreg free
 10711  003636  0012               	return		;funcret
 10712  003638                     __end_of_ZeroBitsArray:
 10713                           	opt stack 0
 10714                           tosu	equ	0xFFF
 10715                           tosh	equ	0xFFE
 10716                           tosl	equ	0xFFD
 10717                           pclath	equ	0xFFA
 10718                           tblptru	equ	0xFF8
 10719                           tblptrh	equ	0xFF7
 10720                           tblptrl	equ	0xFF6
 10721                           tablat	equ	0xFF5
 10722                           prodh	equ	0xFF4
 10723                           prodl	equ	0xFF3
 10724                           intcon	equ	0xFF2
 10725                           intcon2	equ	0xFF1
 10726                           postinc0	equ	0xFEE
 10727                           wreg	equ	0xFE8
 10728                           indf1	equ	0xFE7
 10729                           postdec1	equ	0xFE5
 10730                           fsr1h	equ	0xFE2
 10731                           fsr1l	equ	0xFE1
 10732                           indf2	equ	0xFDF
 10733                           postinc2	equ	0xFDE
 10734                           postdec2	equ	0xFDD
 10735                           fsr2h	equ	0xFDA
 10736                           fsr2l	equ	0xFD9
 10737                           status	equ	0xFD8
 10738                           
 10739 ;; *************** function _memset *****************
 10740 ;; Defined at:
 10741 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 10742 ;; Parameters:    Size  Location     Type
 10743 ;;  p1              2   23[COMRAM] PTR void 
 10744 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(9), SWSPI_Synth_send_bits@bit
      +Array(32), 
 10745 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), 
 10746 ;;		 -> rxMsgData(20), rxMsgQueue(20), 
 10747 ;;  c               2   25[COMRAM] int 
 10748 ;;  n               2   27[COMRAM] unsigned int 
 10749 ;; Auto vars:     Size  Location     Type
 10750 ;;  p               2   29[COMRAM] PTR unsigned char 
 10751 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(9), SWSPI_Synth_send_bits@bit
      +Array(32), 
 10752 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), 
 10753 ;;		 -> rxMsgData(20), rxMsgQueue(20), 
 10754 ;; Return value:  Size  Location     Type
 10755 ;;                  2   23[COMRAM] PTR void 
 10756 ;; Registers used:
 10757 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10758 ;; Tracked objects:
 10759 ;;		On entry : 0/0
 10760 ;;		On exit  : 0/0
 10761 ;;		Unchanged: 0/0
 10762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10763 ;;      Params:         6       0       0       0       0       0       0
 10764 ;;      Locals:         2       0       0       0       0       0       0
 10765 ;;      Temps:          0       0       0       0       0       0       0
 10766 ;;      Totals:         8       0       0       0       0       0       0
 10767 ;;Total ram usage:        8 bytes
 10768 ;; Hardware stack levels used:    1
 10769 ;; Hardware stack levels required when called:    3
 10770 ;; This function calls:
 10771 ;;		Nothing
 10772 ;; This function is called by:
 10773 ;;		_ZeroArray
 10774 ;;		_ZeroBitsArray
 10775 ;; This function uses a non-reentrant model
 10776 ;;
 10777                           
 10778                           	psect	text73
 10779  003468                     __ptext73:
 10780                           	opt stack 0
 10781  003468                     _memset:
 10782                           	opt stack 25
 10783                           
 10784                           ;incstack = 0
 10785  003468  C018  F01E         	movff	memset@p1,memset@p
 10786  00346C  C019  F01F         	movff	memset@p1+1,memset@p+1
 10787  003470  D008               	goto	l1826
 10788  003472                     l6363:
 10789  003472  C01E  FFD9         	movff	memset@p,fsr2l
 10790  003476  C01F  FFDA         	movff	memset@p+1,fsr2h
 10791  00347A  C01A  FFDF         	movff	memset@c,indf2
 10792  00347E  4A1E               	infsnz	memset@p,f,c
 10793  003480  2A1F               	incf	memset@p+1,f,c
 10794  003482                     l1826:
 10795  003482  061C               	decf	memset@n,f,c
 10796  003484  A0D8               	btfss	status,0,c
 10797  003486  061D               	decf	memset@n+1,f,c
 10798  003488  281C               	incf	memset@n,w,c
 10799  00348A  E1F3               	bnz	l6363
 10800  00348C  281D               	incf	memset@n+1,w,c
 10801  00348E  B4D8               	btfsc	status,2,c
 10802  003490  0012               	return	
 10803  003492  D7EF               	goto	l1827
 10804  003494                     __end_of_memset:
 10805                           	opt stack 0
 10806                           tosu	equ	0xFFF
 10807                           tosh	equ	0xFFE
 10808                           tosl	equ	0xFFD
 10809                           pclath	equ	0xFFA
 10810                           tblptru	equ	0xFF8
 10811                           tblptrh	equ	0xFF7
 10812                           tblptrl	equ	0xFF6
 10813                           tablat	equ	0xFF5
 10814                           prodh	equ	0xFF4
 10815                           prodl	equ	0xFF3
 10816                           intcon	equ	0xFF2
 10817                           intcon2	equ	0xFF1
 10818                           postinc0	equ	0xFEE
 10819                           wreg	equ	0xFE8
 10820                           indf1	equ	0xFE7
 10821                           postdec1	equ	0xFE5
 10822                           fsr1h	equ	0xFE2
 10823                           fsr1l	equ	0xFE1
 10824                           indf2	equ	0xFDF
 10825                           postinc2	equ	0xFDE
 10826                           postdec2	equ	0xFDD
 10827                           fsr2h	equ	0xFDA
 10828                           fsr2l	equ	0xFD9
 10829                           status	equ	0xFD8
 10830                           
 10831 ;; *************** function _Make32bitsArray *****************
 10832 ;; Defined at:
 10833 ;;		line 79 in file "SystemCommon.c"
 10834 ;; Parameters:    Size  Location     Type
 10835 ;;  array           2   23[COMRAM] PTR unsigned char 
 10836 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 10837 ;;  data            4   25[COMRAM] unsigned long 
 10838 ;; Auto vars:     Size  Location     Type
 10839 ;;  idx             2   31[COMRAM] int 
 10840 ;; Return value:  Size  Location     Type
 10841 ;;                  1    wreg      void 
 10842 ;; Registers used:
 10843 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10844 ;; Tracked objects:
 10845 ;;		On entry : 0/0
 10846 ;;		On exit  : 0/0
 10847 ;;		Unchanged: 0/0
 10848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10849 ;;      Params:         6       0       0       0       0       0       0
 10850 ;;      Locals:         2       0       0       0       0       0       0
 10851 ;;      Temps:          2       0       0       0       0       0       0
 10852 ;;      Totals:        10       0       0       0       0       0       0
 10853 ;;Total ram usage:       10 bytes
 10854 ;; Hardware stack levels used:    1
 10855 ;; Hardware stack levels required when called:    3
 10856 ;; This function calls:
 10857 ;;		Nothing
 10858 ;; This function is called by:
 10859 ;;		_SWSPI_Synth_send_bits
 10860 ;; This function uses a non-reentrant model
 10861 ;;
 10862                           
 10863                           	psect	text74
 10864  002B48                     __ptext74:
 10865                           	opt stack 0
 10866  002B48                     _Make32bitsArray:
 10867                           	opt stack 22
 10868                           
 10869                           ;SystemCommon.c: 81: for(int idx = 0; idx <= 32; idx++)
 10870                           
 10871                           ;incstack = 0
 10872  002B48  0E00               	movlw	0
 10873  002B4A  6E21               	movwf	Make32bitsArray@idx+1,c
 10874  002B4C  0E00               	movlw	0
 10875  002B4E  6E20               	movwf	Make32bitsArray@idx,c
 10876  002B50                     l6459:
 10877  002B50  BE21               	btfsc	Make32bitsArray@idx+1,7,c
 10878  002B52  D006               	goto	l1235
 10879  002B54  5021               	movf	Make32bitsArray@idx+1,w,c
 10880  002B56  E123               	bnz	l1237
 10881  002B58  0E21               	movlw	33
 10882  002B5A  5C20               	subwf	Make32bitsArray@idx,w,c
 10883  002B5C  B0D8               	btfsc	status,0,c
 10884  002B5E  0012               	return	
 10885  002B60                     l1235:
 10886                           
 10887                           ;SystemCommon.c: 82: {
 10888                           ;SystemCommon.c: 83: array[32 - idx - 1] = data % 2;
 10889  002B60  0E01               	movlw	1
 10890  002B62  2420               	addwf	Make32bitsArray@idx,w,c
 10891  002B64  6E1E               	movwf	??_Make32bitsArray& (0+255),c
 10892  002B66  0E00               	movlw	0
 10893  002B68  2021               	addwfc	Make32bitsArray@idx+1,w,c
 10894  002B6A  6E1F               	movwf	(??_Make32bitsArray+1)& (0+255),c
 10895  002B6C  1E1E               	comf	??_Make32bitsArray,f,c
 10896  002B6E  1E1F               	comf	??_Make32bitsArray+1,f,c
 10897  002B70  4A1E               	infsnz	??_Make32bitsArray,f,c
 10898  002B72  2A1F               	incf	??_Make32bitsArray+1,f,c
 10899  002B74  0E20               	movlw	32
 10900  002B76  261E               	addwf	??_Make32bitsArray,f,c
 10901  002B78  0E00               	movlw	0
 10902  002B7A  221F               	addwfc	??_Make32bitsArray+1,f,c
 10903  002B7C  501E               	movf	??_Make32bitsArray,w,c
 10904  002B7E  2418               	addwf	Make32bitsArray@array,w,c
 10905  002B80  6ED9               	movwf	fsr2l,c
 10906  002B82  501F               	movf	??_Make32bitsArray+1,w,c
 10907  002B84  2019               	addwfc	Make32bitsArray@array+1,w,c
 10908  002B86  6EDA               	movwf	fsr2h,c
 10909  002B88  501A               	movf	Make32bitsArray@data,w,c
 10910  002B8A  0B01               	andlw	1
 10911  002B8C  6EDF               	movwf	indf2,c
 10912                           
 10913                           ;SystemCommon.c: 84: data /= 2;
 10914  002B8E  90D8               	bcf	status,0,c
 10915  002B90  321D               	rrcf	Make32bitsArray@data+3,f,c
 10916  002B92  321C               	rrcf	Make32bitsArray@data+2,f,c
 10917  002B94  321B               	rrcf	Make32bitsArray@data+1,f,c
 10918  002B96  321A               	rrcf	Make32bitsArray@data,f,c
 10919  002B98  4A20               	infsnz	Make32bitsArray@idx,f,c
 10920  002B9A  2A21               	incf	Make32bitsArray@idx+1,f,c
 10921  002B9C  D7D9               	goto	l6459
 10922  002B9E                     l1237:
 10923  002B9E  0012               	return		;funcret
 10924  002BA0                     __end_of_Make32bitsArray:
 10925                           	opt stack 0
 10926                           tosu	equ	0xFFF
 10927                           tosh	equ	0xFFE
 10928                           tosl	equ	0xFFD
 10929                           pclath	equ	0xFFA
 10930                           tblptru	equ	0xFF8
 10931                           tblptrh	equ	0xFF7
 10932                           tblptrl	equ	0xFF6
 10933                           tablat	equ	0xFF5
 10934                           prodh	equ	0xFF4
 10935                           prodl	equ	0xFF3
 10936                           intcon	equ	0xFF2
 10937                           intcon2	equ	0xFF1
 10938                           postinc0	equ	0xFEE
 10939                           wreg	equ	0xFE8
 10940                           indf1	equ	0xFE7
 10941                           postdec1	equ	0xFE5
 10942                           fsr1h	equ	0xFE2
 10943                           fsr1l	equ	0xFE1
 10944                           indf2	equ	0xFDF
 10945                           postinc2	equ	0xFDE
 10946                           postdec2	equ	0xFDD
 10947                           fsr2h	equ	0xFDA
 10948                           fsr2l	equ	0xFD9
 10949                           status	equ	0xFD8
 10950                           
 10951 ;; *************** function _SWSPI_DAC_send_bits *****************
 10952 ;; Defined at:
 10953 ;;		line 43 in file "SwSpiApp.c"
 10954 ;; Parameters:    Size  Location     Type
 10955 ;;  phrType         1    wreg     enum E7548
 10956 ;;  data            1   25[COMRAM] unsigned char 
 10957 ;; Auto vars:     Size  Location     Type
 10958 ;;  phrType         1   27[COMRAM] enum E7548
 10959 ;;  count           1   26[COMRAM] unsigned char 
 10960 ;; Return value:  Size  Location     Type
 10961 ;;                  1    wreg      void 
 10962 ;; Registers used:
 10963 ;;		wreg, status,2, status,0, cstack
 10964 ;; Tracked objects:
 10965 ;;		On entry : 0/0
 10966 ;;		On exit  : 0/0
 10967 ;;		Unchanged: 0/0
 10968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10969 ;;      Params:         1       0       0       0       0       0       0
 10970 ;;      Locals:         2       0       0       0       0       0       0
 10971 ;;      Temps:          0       0       0       0       0       0       0
 10972 ;;      Totals:         3       0       0       0       0       0       0
 10973 ;;Total ram usage:        3 bytes
 10974 ;; Hardware stack levels used:    1
 10975 ;; Hardware stack levels required when called:    4
 10976 ;; This function calls:
 10977 ;;		_SwSpi_Clk_Pin
 10978 ;;		_SwSpi_Data_Pin
 10979 ;; This function is called by:
 10980 ;;		_SWSPI_send_word
 10981 ;; This function uses a non-reentrant model
 10982 ;;
 10983                           
 10984                           	psect	text75
 10985  002BA0                     __ptext75:
 10986                           	opt stack 0
 10987  002BA0                     _SWSPI_DAC_send_bits:
 10988                           	opt stack 22
 10989                           
 10990                           ;incstack = 0
 10991                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 10992  002BA0  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 10993                           
 10994                           ;SwSpiApp.c: 45: uint8_t count;
 10995                           ;SwSpiApp.c: 46: for (count = 8; count ; count--, data <<= 1)
 10996  002BA2  0E08               	movlw	8
 10997  002BA4  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 10998  002BA6  D01A               	goto	l528
 10999  002BA8                     
 11000                           ;SwSpiApp.c: 47: {
 11001                           ;SwSpiApp.c: 48: SwSpi_Clk_Pin(phrType, 1);
 11002  002BA8  0E01               	movlw	1
 11003  002BAA  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11004  002BAC  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11005  002BAE  EC52  F016         	call	_SwSpi_Clk_Pin
 11006                           
 11007                           ;SwSpiApp.c: 50: if (data & 0X80)
 11008  002BB2  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 11009  002BB4  D006               	goto	l530
 11010                           
 11011                           ;SwSpiApp.c: 51: {
 11012                           ;SwSpiApp.c: 53: SwSpi_Data_Pin(phrType, 1);
 11013  002BB6  0E01               	movlw	1
 11014  002BB8  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11015  002BBA  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11016  002BBC  EC27  F016         	call	_SwSpi_Data_Pin
 11017                           
 11018                           ;SwSpiApp.c: 54: }
 11019  002BC0  D005               	goto	l531
 11020  002BC2                     l530:
 11021                           
 11022                           ;SwSpiApp.c: 55: else
 11023                           ;SwSpiApp.c: 56: {
 11024                           ;SwSpiApp.c: 57: SwSpi_Data_Pin(phrType, 0);
 11025  002BC2  0E00               	movlw	0
 11026  002BC4  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11027  002BC6  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11028  002BC8  EC27  F016         	call	_SwSpi_Data_Pin
 11029  002BCC                     l531:
 11030                           
 11031                           ;SwSpiApp.c: 58: }
 11032                           ;SwSpiApp.c: 60: SwSpi_Clk_Pin(phrType, 0);
 11033  002BCC  0E00               	movlw	0
 11034  002BCE  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11035  002BD0  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11036  002BD2  EC52  F016         	call	_SwSpi_Clk_Pin
 11037  002BD6  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 11038  002BD8  90D8               	bcf	status,0,c
 11039  002BDA  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 11040  002BDC                     l528:
 11041  002BDC  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 11042  002BDE  A4D8               	btfss	status,2,c
 11043  002BE0  D7E3               	goto	l529
 11044                           
 11045                           ;SwSpiApp.c: 61: }
 11046                           ;SwSpiApp.c: 63: SwSpi_Data_Pin(phrType, 0);
 11047  002BE2  0E00               	movlw	0
 11048  002BE4  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 11049  002BE6  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11050  002BE8  EC27  F016         	call	_SwSpi_Data_Pin
 11051                           
 11052                           ;SwSpiApp.c: 64: SwSpi_Clk_Pin(phrType, 0);
 11053  002BEC  0E00               	movlw	0
 11054  002BEE  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 11055  002BF0  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 11056  002BF2  EC52  F016         	call	_SwSpi_Clk_Pin
 11057  002BF6  0012               	return		;funcret
 11058  002BF8                     __end_of_SWSPI_DAC_send_bits:
 11059                           	opt stack 0
 11060                           tosu	equ	0xFFF
 11061                           tosh	equ	0xFFE
 11062                           tosl	equ	0xFFD
 11063                           pclath	equ	0xFFA
 11064                           tblptru	equ	0xFF8
 11065                           tblptrh	equ	0xFF7
 11066                           tblptrl	equ	0xFF6
 11067                           tablat	equ	0xFF5
 11068                           prodh	equ	0xFF4
 11069                           prodl	equ	0xFF3
 11070                           intcon	equ	0xFF2
 11071                           intcon2	equ	0xFF1
 11072                           postinc0	equ	0xFEE
 11073                           wreg	equ	0xFE8
 11074                           indf1	equ	0xFE7
 11075                           postdec1	equ	0xFE5
 11076                           fsr1h	equ	0xFE2
 11077                           fsr1l	equ	0xFE1
 11078                           indf2	equ	0xFDF
 11079                           postinc2	equ	0xFDE
 11080                           postdec2	equ	0xFDD
 11081                           fsr2h	equ	0xFDA
 11082                           fsr2l	equ	0xFD9
 11083                           status	equ	0xFD8
 11084                           
 11085 ;; *************** function _SwSpi_Data_Pin *****************
 11086 ;; Defined at:
 11087 ;;		line 103 in file "SwSpiApp.c"
 11088 ;; Parameters:    Size  Location     Type
 11089 ;;  phrType         1    wreg     enum E7548
 11090 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11091 ;; Auto vars:     Size  Location     Type
 11092 ;;  phrType         1   24[COMRAM] enum E7548
 11093 ;; Return value:  Size  Location     Type
 11094 ;;                  1    wreg      void 
 11095 ;; Registers used:
 11096 ;;		wreg, status,2, status,0
 11097 ;; Tracked objects:
 11098 ;;		On entry : 0/0
 11099 ;;		On exit  : 0/0
 11100 ;;		Unchanged: 0/0
 11101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11102 ;;      Params:         1       0       0       0       0       0       0
 11103 ;;      Locals:         1       0       0       0       0       0       0
 11104 ;;      Temps:          0       0       0       0       0       0       0
 11105 ;;      Totals:         2       0       0       0       0       0       0
 11106 ;;Total ram usage:        2 bytes
 11107 ;; Hardware stack levels used:    1
 11108 ;; Hardware stack levels required when called:    3
 11109 ;; This function calls:
 11110 ;;		Nothing
 11111 ;; This function is called by:
 11112 ;;		_SWSPI_DAC_send_bits
 11113 ;;		_SWSPI_Synth_send_bits
 11114 ;; This function uses a non-reentrant model
 11115 ;;
 11116                           
 11117                           	psect	text76
 11118  002C4E                     __ptext76:
 11119                           	opt stack 0
 11120  002C4E                     _SwSpi_Data_Pin:
 11121                           	opt stack 22
 11122                           
 11123                           ;incstack = 0
 11124                           ;SwSpi_Data_Pin@phrType stored from wreg
 11125  002C4E  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 11126                           
 11127                           ;SwSpiApp.c: 105: switch(phrType)
 11128  002C50  D01E               	goto	l543
 11129  002C52                     
 11130                           ;SwSpiApp.c: 108: if(cPinMode == 1)
 11131  002C52  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11132  002C54  A4D8               	btfss	status,2,c
 11133  002C56  D002               	goto	l545
 11134                           
 11135                           ;SwSpiApp.c: 109: {
 11136                           ;SwSpiApp.c: 110: do { LATDbits.LATD0 = 1; } while(0);
 11137  002C58  808C               	bsf	3980,0,c	;volatile
 11138                           
 11139                           ;SwSpiApp.c: 111: }
 11140  002C5A  0012               	return	
 11141  002C5C                     l545:
 11142                           
 11143                           ;SwSpiApp.c: 112: else if (cPinMode == 0)
 11144  002C5C  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11145  002C5E  A4D8               	btfss	status,2,c
 11146  002C60  0012               	return	
 11147                           
 11148                           ;SwSpiApp.c: 113: {
 11149                           ;SwSpiApp.c: 114: do { LATDbits.LATD0 = 0; } while(0);
 11150  002C62  908C               	bcf	3980,0,c	;volatile
 11151                           
 11152                           ;SwSpiApp.c: 115: }
 11153                           ;SwSpiApp.c: 116: break;
 11154  002C64  0012               	return	
 11155  002C66                     
 11156                           ;SwSpiApp.c: 119: if(cPinMode == 1)
 11157  002C66  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11158  002C68  A4D8               	btfss	status,2,c
 11159  002C6A  D002               	goto	l554
 11160                           
 11161                           ;SwSpiApp.c: 120: {
 11162                           ;SwSpiApp.c: 121: do { LATCbits.LATC5 = 1; } while(0);
 11163  002C6C  8A8B               	bsf	3979,5,c	;volatile
 11164                           
 11165                           ;SwSpiApp.c: 122: }
 11166  002C6E  0012               	return	
 11167  002C70                     l554:
 11168                           
 11169                           ;SwSpiApp.c: 123: else if (cPinMode == 0)
 11170  002C70  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11171  002C72  A4D8               	btfss	status,2,c
 11172  002C74  0012               	return	
 11173                           
 11174                           ;SwSpiApp.c: 124: {
 11175                           ;SwSpiApp.c: 125: do { LATCbits.LATC5 = 0; } while(0);
 11176  002C76  9A8B               	bcf	3979,5,c	;volatile
 11177                           
 11178                           ;SwSpiApp.c: 126: }
 11179                           ;SwSpiApp.c: 127: break;
 11180  002C78  0012               	return	
 11181  002C7A                     
 11182                           ;SwSpiApp.c: 130: if(cPinMode == 1)
 11183  002C7A  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11184  002C7C  A4D8               	btfss	status,2,c
 11185  002C7E  D002               	goto	l562
 11186                           
 11187                           ;SwSpiApp.c: 131: {
 11188                           ;SwSpiApp.c: 132: do { LATAbits.LATA4 = 1; } while(0);
 11189  002C80  8889               	bsf	3977,4,c	;volatile
 11190                           
 11191                           ;SwSpiApp.c: 133: }
 11192  002C82  0012               	return	
 11193  002C84                     l562:
 11194                           
 11195                           ;SwSpiApp.c: 134: else if (cPinMode == 0)
 11196  002C84  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11197  002C86  A4D8               	btfss	status,2,c
 11198  002C88  0012               	return	
 11199                           
 11200                           ;SwSpiApp.c: 135: {
 11201                           ;SwSpiApp.c: 136: do { LATAbits.LATA4 = 0; } while(0);
 11202  002C8A  9889               	bcf	3977,4,c	;volatile
 11203                           
 11204                           ;SwSpiApp.c: 139: }
 11205                           
 11206                           ;SwSpiApp.c: 137: }
 11207                           ;SwSpiApp.c: 138: break;
 11208  002C8C  0012               	return	
 11209  002C8E                     l543:
 11210  002C8E  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 11211                           
 11212                           ; Switch size 1, requested type "space"
 11213                           ; Number of cases is 3, Range of values is 0 to 2
 11214                           ; switch strategies available:
 11215                           ; Name         Instructions Cycles
 11216                           ; simple_byte           10     6 (average)
 11217                           ;	Chosen strategy is simple_byte
 11218  002C90  0A00               	xorlw	0	; case 0
 11219  002C92  B4D8               	btfsc	status,2,c
 11220  002C94  D7DE               	goto	l544
 11221  002C96  0A01               	xorlw	1	; case 1
 11222  002C98  B4D8               	btfsc	status,2,c
 11223  002C9A  D7E5               	goto	l553
 11224  002C9C  0A03               	xorlw	3	; case 2
 11225  002C9E  A4D8               	btfss	status,2,c
 11226  002CA0  0012               	return	
 11227  002CA2  D7EB               	goto	l561
 11228  002CA4                     __end_of_SwSpi_Data_Pin:
 11229                           	opt stack 0
 11230                           tosu	equ	0xFFF
 11231                           tosh	equ	0xFFE
 11232                           tosl	equ	0xFFD
 11233                           pclath	equ	0xFFA
 11234                           tblptru	equ	0xFF8
 11235                           tblptrh	equ	0xFF7
 11236                           tblptrl	equ	0xFF6
 11237                           tablat	equ	0xFF5
 11238                           prodh	equ	0xFF4
 11239                           prodl	equ	0xFF3
 11240                           intcon	equ	0xFF2
 11241                           intcon2	equ	0xFF1
 11242                           postinc0	equ	0xFEE
 11243                           wreg	equ	0xFE8
 11244                           indf1	equ	0xFE7
 11245                           postdec1	equ	0xFE5
 11246                           fsr1h	equ	0xFE2
 11247                           fsr1l	equ	0xFE1
 11248                           indf2	equ	0xFDF
 11249                           postinc2	equ	0xFDE
 11250                           postdec2	equ	0xFDD
 11251                           fsr2h	equ	0xFDA
 11252                           fsr2l	equ	0xFD9
 11253                           status	equ	0xFD8
 11254                           
 11255 ;; *************** function _SwSpi_Clk_Pin *****************
 11256 ;; Defined at:
 11257 ;;		line 142 in file "SwSpiApp.c"
 11258 ;; Parameters:    Size  Location     Type
 11259 ;;  phrType         1    wreg     enum E7548
 11260 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11261 ;; Auto vars:     Size  Location     Type
 11262 ;;  phrType         1   24[COMRAM] enum E7548
 11263 ;; Return value:  Size  Location     Type
 11264 ;;                  1    wreg      void 
 11265 ;; Registers used:
 11266 ;;		wreg, status,2, status,0
 11267 ;; Tracked objects:
 11268 ;;		On entry : 0/0
 11269 ;;		On exit  : 0/0
 11270 ;;		Unchanged: 0/0
 11271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11272 ;;      Params:         1       0       0       0       0       0       0
 11273 ;;      Locals:         1       0       0       0       0       0       0
 11274 ;;      Temps:          0       0       0       0       0       0       0
 11275 ;;      Totals:         2       0       0       0       0       0       0
 11276 ;;Total ram usage:        2 bytes
 11277 ;; Hardware stack levels used:    1
 11278 ;; Hardware stack levels required when called:    3
 11279 ;; This function calls:
 11280 ;;		Nothing
 11281 ;; This function is called by:
 11282 ;;		_SWSPI_DAC_send_bits
 11283 ;;		_SWSPI_Synth_send_bits
 11284 ;;		_SwSpi_Synth_Toggle_Clock
 11285 ;; This function uses a non-reentrant model
 11286 ;;
 11287                           
 11288                           	psect	text77
 11289  002CA4                     __ptext77:
 11290                           	opt stack 0
 11291  002CA4                     _SwSpi_Clk_Pin:
 11292                           	opt stack 22
 11293                           
 11294                           ;incstack = 0
 11295                           ;SwSpi_Clk_Pin@phrType stored from wreg
 11296  002CA4  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 11297                           
 11298                           ;SwSpiApp.c: 144: switch(phrType)
 11299  002CA6  D01E               	goto	l572
 11300  002CA8                     
 11301                           ;SwSpiApp.c: 147: if(cPinMode == 1)
 11302  002CA8  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11303  002CAA  A4D8               	btfss	status,2,c
 11304  002CAC  D002               	goto	l574
 11305                           
 11306                           ;SwSpiApp.c: 148: {
 11307                           ;SwSpiApp.c: 149: do { LATCbits.LATC3 = 1; } while(0);
 11308  002CAE  868B               	bsf	3979,3,c	;volatile
 11309                           
 11310                           ;SwSpiApp.c: 150: }
 11311  002CB0  0012               	return	
 11312  002CB2                     l574:
 11313                           
 11314                           ;SwSpiApp.c: 151: else if (cPinMode == 0)
 11315  002CB2  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11316  002CB4  A4D8               	btfss	status,2,c
 11317  002CB6  0012               	return	
 11318                           
 11319                           ;SwSpiApp.c: 152: {
 11320                           ;SwSpiApp.c: 153: do { LATCbits.LATC3 = 0; } while(0);
 11321  002CB8  968B               	bcf	3979,3,c	;volatile
 11322                           
 11323                           ;SwSpiApp.c: 154: }
 11324                           ;SwSpiApp.c: 155: break;
 11325  002CBA  0012               	return	
 11326  002CBC                     
 11327                           ;SwSpiApp.c: 158: if(cPinMode == 1)
 11328  002CBC  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11329  002CBE  A4D8               	btfss	status,2,c
 11330  002CC0  D002               	goto	l583
 11331                           
 11332                           ;SwSpiApp.c: 159: {
 11333                           ;SwSpiApp.c: 160: do { LATCbits.LATC4 = 1; } while(0);
 11334  002CC2  888B               	bsf	3979,4,c	;volatile
 11335                           
 11336                           ;SwSpiApp.c: 161: }
 11337  002CC4  0012               	return	
 11338  002CC6                     l583:
 11339                           
 11340                           ;SwSpiApp.c: 162: else if (cPinMode == 0)
 11341  002CC6  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11342  002CC8  A4D8               	btfss	status,2,c
 11343  002CCA  0012               	return	
 11344                           
 11345                           ;SwSpiApp.c: 163: {
 11346                           ;SwSpiApp.c: 164: do { LATCbits.LATC4 = 0; } while(0);
 11347  002CCC  988B               	bcf	3979,4,c	;volatile
 11348                           
 11349                           ;SwSpiApp.c: 165: }
 11350                           ;SwSpiApp.c: 167: break;
 11351  002CCE  0012               	return	
 11352  002CD0                     
 11353                           ;SwSpiApp.c: 170: if(cPinMode == 1)
 11354  002CD0  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 11355  002CD2  A4D8               	btfss	status,2,c
 11356  002CD4  D002               	goto	l591
 11357                           
 11358                           ;SwSpiApp.c: 171: {
 11359                           ;SwSpiApp.c: 172: do { LATAbits.LATA3 = 1; } while(0);
 11360  002CD6  8689               	bsf	3977,3,c	;volatile
 11361                           
 11362                           ;SwSpiApp.c: 173: }
 11363  002CD8  0012               	return	
 11364  002CDA                     l591:
 11365                           
 11366                           ;SwSpiApp.c: 174: else if (cPinMode == 0)
 11367  002CDA  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 11368  002CDC  A4D8               	btfss	status,2,c
 11369  002CDE  0012               	return	
 11370                           
 11371                           ;SwSpiApp.c: 175: {
 11372                           ;SwSpiApp.c: 176: do { LATAbits.LATA3 = 0; } while(0);
 11373  002CE0  9689               	bcf	3977,3,c	;volatile
 11374                           
 11375                           ;SwSpiApp.c: 179: }
 11376                           
 11377                           ;SwSpiApp.c: 177: }
 11378                           ;SwSpiApp.c: 178: break;
 11379  002CE2  0012               	return	
 11380  002CE4                     l572:
 11381  002CE4  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 11382                           
 11383                           ; Switch size 1, requested type "space"
 11384                           ; Number of cases is 3, Range of values is 0 to 2
 11385                           ; switch strategies available:
 11386                           ; Name         Instructions Cycles
 11387                           ; simple_byte           10     6 (average)
 11388                           ;	Chosen strategy is simple_byte
 11389  002CE6  0A00               	xorlw	0	; case 0
 11390  002CE8  B4D8               	btfsc	status,2,c
 11391  002CEA  D7DE               	goto	l573
 11392  002CEC  0A01               	xorlw	1	; case 1
 11393  002CEE  B4D8               	btfsc	status,2,c
 11394  002CF0  D7E5               	goto	l582
 11395  002CF2  0A03               	xorlw	3	; case 2
 11396  002CF4  A4D8               	btfss	status,2,c
 11397  002CF6  0012               	return	
 11398  002CF8  D7EB               	goto	l590
 11399  002CFA                     __end_of_SwSpi_Clk_Pin:
 11400                           	opt stack 0
 11401                           tosu	equ	0xFFF
 11402                           tosh	equ	0xFFE
 11403                           tosl	equ	0xFFD
 11404                           pclath	equ	0xFFA
 11405                           tblptru	equ	0xFF8
 11406                           tblptrh	equ	0xFF7
 11407                           tblptrl	equ	0xFF6
 11408                           tablat	equ	0xFF5
 11409                           prodh	equ	0xFF4
 11410                           prodl	equ	0xFF3
 11411                           intcon	equ	0xFF2
 11412                           intcon2	equ	0xFF1
 11413                           postinc0	equ	0xFEE
 11414                           wreg	equ	0xFE8
 11415                           indf1	equ	0xFE7
 11416                           postdec1	equ	0xFE5
 11417                           fsr1h	equ	0xFE2
 11418                           fsr1l	equ	0xFE1
 11419                           indf2	equ	0xFDF
 11420                           postinc2	equ	0xFDE
 11421                           postdec2	equ	0xFDD
 11422                           fsr2h	equ	0xFDA
 11423                           fsr2l	equ	0xFD9
 11424                           status	equ	0xFD8
 11425                           
 11426 ;; *************** function _ReadIntFromEeprom *****************
 11427 ;; Defined at:
 11428 ;;		line 97 in file "SystemCommon.c"
 11429 ;; Parameters:    Size  Location     Type
 11430 ;;  address         1    wreg     unsigned char 
 11431 ;;  numOfByes       2   25[COMRAM] int 
 11432 ;; Auto vars:     Size  Location     Type
 11433 ;;  address         1   37[COMRAM] unsigned char 
 11434 ;;  retVal          4   33[COMRAM] unsigned long 
 11435 ;; Return value:  Size  Location     Type
 11436 ;;                  4   25[COMRAM] unsigned long 
 11437 ;; Registers used:
 11438 ;;		wreg, status,2, status,0, cstack
 11439 ;; Tracked objects:
 11440 ;;		On entry : 0/0
 11441 ;;		On exit  : 0/0
 11442 ;;		Unchanged: 0/0
 11443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11444 ;;      Params:         4       0       0       0       0       0       0
 11445 ;;      Locals:         5       0       0       0       0       0       0
 11446 ;;      Temps:          4       0       0       0       0       0       0
 11447 ;;      Totals:        13       0       0       0       0       0       0
 11448 ;;Total ram usage:       13 bytes
 11449 ;; Hardware stack levels used:    1
 11450 ;; Hardware stack levels required when called:    5
 11451 ;; This function calls:
 11452 ;;		_EepromRead
 11453 ;; This function is called by:
 11454 ;;		_DacInit
 11455 ;; This function uses a non-reentrant model
 11456 ;;
 11457                           
 11458                           	psect	text78
 11459  0028C2                     __ptext78:
 11460                           	opt stack 0
 11461  0028C2                     _ReadIntFromEeprom:
 11462                           	opt stack 23
 11463                           
 11464                           ;incstack = 0
 11465                           ;ReadIntFromEeprom@address stored from wreg
 11466  0028C2  6E26               	movwf	ReadIntFromEeprom@address,c
 11467                           
 11468                           ;SystemCommon.c: 99: uint32_t retVal = 0x00;
 11469  0028C4  0E00               	movlw	0
 11470  0028C6  6E22               	movwf	ReadIntFromEeprom@retVal,c
 11471  0028C8  0E00               	movlw	0
 11472  0028CA  6E23               	movwf	ReadIntFromEeprom@retVal+1,c
 11473  0028CC  0E00               	movlw	0
 11474  0028CE  6E24               	movwf	ReadIntFromEeprom@retVal+2,c
 11475  0028D0  0E00               	movlw	0
 11476  0028D2  6E25               	movwf	ReadIntFromEeprom@retVal+3,c
 11477                           
 11478                           ;SystemCommon.c: 101: if(numOfByes == 2)
 11479  0028D4  0E02               	movlw	2
 11480  0028D6  181A               	xorwf	ReadIntFromEeprom@numOfByes,w,c
 11481  0028D8  101B               	iorwf	ReadIntFromEeprom@numOfByes+1,w,c
 11482  0028DA  A4D8               	btfss	status,2,c
 11483  0028DC  D018               	goto	l1246
 11484                           
 11485                           ;SystemCommon.c: 102: {
 11486                           ;SystemCommon.c: 103: retVal = (EepromRead(address + 0) << 8) | (EepromRead(address + 1)
      +                          );
 11487  0028DE  5026               	movf	ReadIntFromEeprom@address,w,c
 11488  0028E0  ECD4  F01B         	call	_EepromRead
 11489  0028E4  6E1E               	movwf	??_ReadIntFromEeprom& (0+255),c
 11490  0028E6  501E               	movf	??_ReadIntFromEeprom,w,c
 11491  0028E8  6E20               	movwf	(??_ReadIntFromEeprom+2)& (0+255),c
 11492  0028EA  6A1F               	clrf	(??_ReadIntFromEeprom+1)& (0+255),c
 11493  0028EC  2826               	incf	ReadIntFromEeprom@address,w,c
 11494  0028EE  ECD4  F01B         	call	_EepromRead
 11495  0028F2  6E21               	movwf	(??_ReadIntFromEeprom+3)& (0+255),c
 11496  0028F4  5021               	movf	??_ReadIntFromEeprom+3,w,c
 11497  0028F6  121F               	iorwf	??_ReadIntFromEeprom+1,f,c
 11498  0028F8  0E00               	movlw	0
 11499  0028FA  1220               	iorwf	??_ReadIntFromEeprom+2,f,c
 11500  0028FC  C01F  F022         	movff	??_ReadIntFromEeprom+1,ReadIntFromEeprom@retVal
 11501  002900  C020  F023         	movff	??_ReadIntFromEeprom+2,ReadIntFromEeprom@retVal+1
 11502  002904  0E00               	movlw	0
 11503  002906  BE23               	btfsc	ReadIntFromEeprom@retVal+1,7,c
 11504  002908  0EFF               	movlw	-1
 11505  00290A  6E24               	movwf	ReadIntFromEeprom@retVal+2,c
 11506  00290C  6E25               	movwf	ReadIntFromEeprom@retVal+3,c
 11507  00290E                     l1246:
 11508                           
 11509                           ;SystemCommon.c: 108: }
 11510                           ;SystemCommon.c: 111: return retVal;
 11511                           
 11512                           ;SystemCommon.c: 106: {
 11513  00290E  C022  F01A         	movff	ReadIntFromEeprom@retVal,?_ReadIntFromEeprom
 11514  002912  C023  F01B         	movff	ReadIntFromEeprom@retVal+1,?_ReadIntFromEeprom+1
 11515  002916  C024  F01C         	movff	ReadIntFromEeprom@retVal+2,?_ReadIntFromEeprom+2
 11516  00291A  C025  F01D         	movff	ReadIntFromEeprom@retVal+3,?_ReadIntFromEeprom+3
 11517  00291E  0012               	return		;funcret
 11518  002920                     __end_of_ReadIntFromEeprom:
 11519                           	opt stack 0
 11520                           tosu	equ	0xFFF
 11521                           tosh	equ	0xFFE
 11522                           tosl	equ	0xFFD
 11523                           pclath	equ	0xFFA
 11524                           tblptru	equ	0xFF8
 11525                           tblptrh	equ	0xFF7
 11526                           tblptrl	equ	0xFF6
 11527                           tablat	equ	0xFF5
 11528                           prodh	equ	0xFF4
 11529                           prodl	equ	0xFF3
 11530                           intcon	equ	0xFF2
 11531                           intcon2	equ	0xFF1
 11532                           postinc0	equ	0xFEE
 11533                           wreg	equ	0xFE8
 11534                           indf1	equ	0xFE7
 11535                           postdec1	equ	0xFE5
 11536                           fsr1h	equ	0xFE2
 11537                           fsr1l	equ	0xFE1
 11538                           indf2	equ	0xFDF
 11539                           postinc2	equ	0xFDE
 11540                           postdec2	equ	0xFDD
 11541                           fsr2h	equ	0xFDA
 11542                           fsr2l	equ	0xFD9
 11543                           status	equ	0xFD8
 11544                           
 11545 ;; *************** function _EepromRead *****************
 11546 ;; Defined at:
 11547 ;;		line 215 in file "FlashApp.c"
 11548 ;; Parameters:    Size  Location     Type
 11549 ;;  address         1    wreg     unsigned char 
 11550 ;; Auto vars:     Size  Location     Type
 11551 ;;  address         1   24[COMRAM] unsigned char 
 11552 ;; Return value:  Size  Location     Type
 11553 ;;                  1    wreg      unsigned char 
 11554 ;; Registers used:
 11555 ;;		wreg, status,2, cstack
 11556 ;; Tracked objects:
 11557 ;;		On entry : 0/0
 11558 ;;		On exit  : 0/0
 11559 ;;		Unchanged: 0/0
 11560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11561 ;;      Params:         0       0       0       0       0       0       0
 11562 ;;      Locals:         1       0       0       0       0       0       0
 11563 ;;      Temps:          0       0       0       0       0       0       0
 11564 ;;      Totals:         1       0       0       0       0       0       0
 11565 ;;Total ram usage:        1 bytes
 11566 ;; Hardware stack levels used:    1
 11567 ;; Hardware stack levels required when called:    4
 11568 ;; This function calls:
 11569 ;;		_DATAEE_ReadByte
 11570 ;; This function is called by:
 11571 ;;		_ReadIntFromEeprom
 11572 ;;		_GetMcuFwVersion
 11573 ;;		_GetCpldFwVersion
 11574 ;; This function uses a non-reentrant model
 11575 ;;
 11576                           
 11577                           	psect	text79
 11578  0037A8                     __ptext79:
 11579                           	opt stack 0
 11580  0037A8                     _EepromRead:
 11581                           	opt stack 23
 11582                           
 11583                           ;incstack = 0
 11584                           ;EepromRead@address stored from wreg
 11585  0037A8  6E19               	movwf	EepromRead@address,c
 11586                           
 11587                           ;FlashApp.c: 217: return DATAEE_ReadByte(address);
 11588  0037AA  5019               	movf	EepromRead@address,w,c
 11589  0037AC  EC63  F01B         	call	_DATAEE_ReadByte
 11590  0037B0  0012               	return	
 11591  0037B2                     __end_of_EepromRead:
 11592                           	opt stack 0
 11593                           tosu	equ	0xFFF
 11594                           tosh	equ	0xFFE
 11595                           tosl	equ	0xFFD
 11596                           pclath	equ	0xFFA
 11597                           tblptru	equ	0xFF8
 11598                           tblptrh	equ	0xFF7
 11599                           tblptrl	equ	0xFF6
 11600                           tablat	equ	0xFF5
 11601                           prodh	equ	0xFF4
 11602                           prodl	equ	0xFF3
 11603                           intcon	equ	0xFF2
 11604                           intcon2	equ	0xFF1
 11605                           postinc0	equ	0xFEE
 11606                           wreg	equ	0xFE8
 11607                           indf1	equ	0xFE7
 11608                           postdec1	equ	0xFE5
 11609                           fsr1h	equ	0xFE2
 11610                           fsr1l	equ	0xFE1
 11611                           indf2	equ	0xFDF
 11612                           postinc2	equ	0xFDE
 11613                           postdec2	equ	0xFDD
 11614                           fsr2h	equ	0xFDA
 11615                           fsr2l	equ	0xFD9
 11616                           status	equ	0xFD8
 11617                           
 11618 ;; *************** function _DATAEE_ReadByte *****************
 11619 ;; Defined at:
 11620 ;;		line 194 in file "mcc_generated_files/memory.c"
 11621 ;; Parameters:    Size  Location     Type
 11622 ;;  bAdd            1    wreg     unsigned char 
 11623 ;; Auto vars:     Size  Location     Type
 11624 ;;  bAdd            1   23[COMRAM] unsigned char 
 11625 ;; Return value:  Size  Location     Type
 11626 ;;                  1    wreg      unsigned char 
 11627 ;; Registers used:
 11628 ;;		wreg, status,2
 11629 ;; Tracked objects:
 11630 ;;		On entry : 0/0
 11631 ;;		On exit  : 0/0
 11632 ;;		Unchanged: 0/0
 11633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11634 ;;      Params:         0       0       0       0       0       0       0
 11635 ;;      Locals:         1       0       0       0       0       0       0
 11636 ;;      Temps:          0       0       0       0       0       0       0
 11637 ;;      Totals:         1       0       0       0       0       0       0
 11638 ;;Total ram usage:        1 bytes
 11639 ;; Hardware stack levels used:    1
 11640 ;; Hardware stack levels required when called:    3
 11641 ;; This function calls:
 11642 ;;		Nothing
 11643 ;; This function is called by:
 11644 ;;		_EepromRead
 11645 ;;		_EepromTest
 11646 ;; This function uses a non-reentrant model
 11647 ;;
 11648                           
 11649                           	psect	text80
 11650  0036C6                     __ptext80:
 11651                           	opt stack 0
 11652  0036C6                     _DATAEE_ReadByte:
 11653                           	opt stack 23
 11654                           
 11655                           ;incstack = 0
 11656                           ;DATAEE_ReadByte@bAdd stored from wreg
 11657  0036C6  6E18               	movwf	DATAEE_ReadByte@bAdd,c
 11658                           
 11659                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
 11660  0036C8  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
 11661                           
 11662                           ;memory.c: 198: EECON1bits.CFGS = 0;
 11663  0036CC  9CA6               	bcf	4006,6,c	;volsfr
 11664                           
 11665                           ;memory.c: 199: EECON1bits.EEPGD = 0;
 11666  0036CE  9EA6               	bcf	4006,7,c	;volsfr
 11667                           
 11668                           ;memory.c: 200: EECON1bits.RD = 1;
 11669  0036D0  80A6               	bsf	4006,0,c	;volsfr
 11670                           
 11671                           ;memory.c: 201: __nop();
 11672  0036D2  F000               	nop	
 11673                           
 11674                           ;memory.c: 202: __nop();
 11675  0036D4  F000               	nop	
 11676                           
 11677                           ;memory.c: 204: return (EEDATA);
 11678  0036D6  50A8               	movf	4008,w,c	;volatile
 11679  0036D8  0012               	return	
 11680  0036DA                     __end_of_DATAEE_ReadByte:
 11681                           	opt stack 0
 11682                           tosu	equ	0xFFF
 11683                           tosh	equ	0xFFE
 11684                           tosl	equ	0xFFD
 11685                           pclath	equ	0xFFA
 11686                           tblptru	equ	0xFF8
 11687                           tblptrh	equ	0xFF7
 11688                           tblptrl	equ	0xFF6
 11689                           tablat	equ	0xFF5
 11690                           prodh	equ	0xFF4
 11691                           prodl	equ	0xFF3
 11692                           intcon	equ	0xFF2
 11693                           intcon2	equ	0xFF1
 11694                           postinc0	equ	0xFEE
 11695                           wreg	equ	0xFE8
 11696                           indf1	equ	0xFE7
 11697                           postdec1	equ	0xFE5
 11698                           fsr1h	equ	0xFE2
 11699                           fsr1l	equ	0xFE1
 11700                           indf2	equ	0xFDF
 11701                           postinc2	equ	0xFDE
 11702                           postdec2	equ	0xFDD
 11703                           fsr2h	equ	0xFDA
 11704                           fsr2l	equ	0xFD9
 11705                           status	equ	0xFD8
 11706                           
 11707 ;; *************** function _ClearMcuRunTime *****************
 11708 ;; Defined at:
 11709 ;;		line 87 in file "SystemStatus.c"
 11710 ;; Parameters:    Size  Location     Type
 11711 ;;		None
 11712 ;; Auto vars:     Size  Location     Type
 11713 ;;		None
 11714 ;; Return value:  Size  Location     Type
 11715 ;;                  1    wreg      void 
 11716 ;; Registers used:
 11717 ;;		wreg, status,2
 11718 ;; Tracked objects:
 11719 ;;		On entry : 0/0
 11720 ;;		On exit  : 0/0
 11721 ;;		Unchanged: 0/0
 11722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11723 ;;      Params:         0       0       0       0       0       0       0
 11724 ;;      Locals:         0       0       0       0       0       0       0
 11725 ;;      Temps:          0       0       0       0       0       0       0
 11726 ;;      Totals:         0       0       0       0       0       0       0
 11727 ;;Total ram usage:        0 bytes
 11728 ;; Hardware stack levels used:    1
 11729 ;; Hardware stack levels required when called:    3
 11730 ;; This function calls:
 11731 ;;		Nothing
 11732 ;; This function is called by:
 11733 ;;		_InitSystemApplicationManagers
 11734 ;; This function uses a non-reentrant model
 11735 ;;
 11736                           
 11737                           	psect	text81
 11738  0036DA                     __ptext81:
 11739                           	opt stack 0
 11740  0036DA                     _ClearMcuRunTime:
 11741                           	opt stack 26
 11742                           
 11743                           ;SystemStatus.c: 89: mcuRunTimeIn5SecTicks = 0;
 11744                           
 11745                           ;incstack = 0
 11746  0036DA  0E00               	movlw	0
 11747  0036DC  0100               	movlb	0	; () banked
 11748  0036DE  6FC1               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 11749  0036E0  0E00               	movlw	0
 11750  0036E2  6FC2               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 11751  0036E4  0E00               	movlw	0
 11752  0036E6  6FC3               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 11753  0036E8  0E00               	movlw	0
 11754  0036EA  6FC4               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 11755                           
 11756                           ; BSR set to: 0
 11757  0036EC  0012               	return		;funcret
 11758  0036EE                     __end_of_ClearMcuRunTime:
 11759                           	opt stack 0
 11760                           tosu	equ	0xFFF
 11761                           tosh	equ	0xFFE
 11762                           tosl	equ	0xFFD
 11763                           pclath	equ	0xFFA
 11764                           tblptru	equ	0xFF8
 11765                           tblptrh	equ	0xFF7
 11766                           tblptrl	equ	0xFF6
 11767                           tablat	equ	0xFF5
 11768                           prodh	equ	0xFF4
 11769                           prodl	equ	0xFF3
 11770                           intcon	equ	0xFF2
 11771                           intcon2	equ	0xFF1
 11772                           postinc0	equ	0xFEE
 11773                           wreg	equ	0xFE8
 11774                           indf1	equ	0xFE7
 11775                           postdec1	equ	0xFE5
 11776                           fsr1h	equ	0xFE2
 11777                           fsr1l	equ	0xFE1
 11778                           indf2	equ	0xFDF
 11779                           postinc2	equ	0xFDE
 11780                           postdec2	equ	0xFDD
 11781                           fsr2h	equ	0xFDA
 11782                           fsr2l	equ	0xFD9
 11783                           status	equ	0xFD8
 11784                           
 11785 ;; *************** function _CheckFlashPrecentage *****************
 11786 ;; Defined at:
 11787 ;;		line 205 in file "FlashApp.c"
 11788 ;; Parameters:    Size  Location     Type
 11789 ;;		None
 11790 ;; Auto vars:     Size  Location     Type
 11791 ;;  precentage      3   28[BANK0 ] void 
 11792 ;; Return value:  Size  Location     Type
 11793 ;;                  1    wreg      unsigned char 
 11794 ;; Registers used:
 11795 ;;		wreg, status,2, status,0, cstack
 11796 ;; Tracked objects:
 11797 ;;		On entry : 0/0
 11798 ;;		On exit  : 0/0
 11799 ;;		Unchanged: 0/0
 11800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11801 ;;      Params:         0       0       0       0       0       0       0
 11802 ;;      Locals:         0       3       0       0       0       0       0
 11803 ;;      Temps:          0       4       0       0       0       0       0
 11804 ;;      Totals:         0       7       0       0       0       0       0
 11805 ;;Total ram usage:        7 bytes
 11806 ;; Hardware stack levels used:    1
 11807 ;; Hardware stack levels required when called:    5
 11808 ;; This function calls:
 11809 ;;		___ftdiv
 11810 ;;		___ftge
 11811 ;;		___ftmul
 11812 ;;		___lltoft
 11813 ;; This function is called by:
 11814 ;;		_main
 11815 ;; This function uses a non-reentrant model
 11816 ;;
 11817                           
 11818                           	psect	text82
 11819  002076                     __ptext82:
 11820                           	opt stack 0
 11821  002076                     _CheckFlashPrecentage:
 11822                           	opt stack 25
 11823                           
 11824                           ;FlashApp.c: 207: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
 11825                           
 11826                           ; BSR set to: 0
 11827                           ;incstack = 0
 11828  002076  0EE0               	movlw	224
 11829  002078  6E2C               	movwf	___ftdiv@f2,c
 11830  00207A  0EFF               	movlw	255
 11831  00207C  6E2D               	movwf	___ftdiv@f2+1,c
 11832  00207E  0E46               	movlw	70
 11833  002080  6E2E               	movwf	___ftdiv@f2+2,c
 11834  002082  C042  F078         	movff	_writeAddress,??_CheckFlashPrecentage
 11835  002086  C043  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
 11836  00208A  C044  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
 11837  00208E  C045  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
 11838  002092  0100               	movlb	0	; () banked
 11839  002094  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
 11840  002096  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
 11841  002098  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
 11842  00209A  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
 11843  00209C  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
 11844  00209E  0E00               	movlw	0
 11845  0020A0  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
 11846  0020A2  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
 11847  0020A4  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
 11848  0020A6  0EF0               	movlw	240
 11849  0020A8  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
 11850  0020AA  6E20               	movwf	___lltoft@c,c
 11851  0020AC  0E7F               	movlw	127
 11852  0020AE  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
 11853  0020B0  6E21               	movwf	___lltoft@c+1,c
 11854  0020B2  0E00               	movlw	0
 11855  0020B4  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
 11856  0020B6  6E22               	movwf	___lltoft@c+2,c
 11857  0020B8  0E00               	movlw	0
 11858  0020BA  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
 11859  0020BC  6E23               	movwf	___lltoft@c+3,c
 11860  0020BE  EC4A  F015         	call	___lltoft	;wreg free
 11861  0020C2  C020  F029         	movff	?___lltoft,___ftdiv@f1
 11862  0020C6  C021  F02A         	movff	?___lltoft+1,___ftdiv@f1+1
 11863  0020CA  C022  F02B         	movff	?___lltoft+2,___ftdiv@f1+2
 11864  0020CE  ECFB  F00C         	call	___ftdiv	;wreg free
 11865  0020D2  C029  F069         	movff	?___ftdiv,___ftmul@f1
 11866  0020D6  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 11867  0020DA  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 11868  0020DE  0E00               	movlw	0
 11869  0020E0  0100               	movlb	0	; () banked
 11870  0020E2  6F6C               	movwf	___ftmul@f2& (0+255),b
 11871  0020E4  0EC8               	movlw	200
 11872  0020E6  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 11873  0020E8  0E42               	movlw	66
 11874  0020EA  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 11875  0020EC  EC80  F00C         	call	___ftmul	;wreg free
 11876  0020F0  C069  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
 11877  0020F4  C06A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
 11878  0020F8  C06B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
 11879                           
 11880                           ;FlashApp.c: 208: return (precentage > 75) ? 1 : 0;
 11881  0020FC  0E00               	movlw	0
 11882  0020FE  6E18               	movwf	___ftge@ff1,c
 11883  002100  0E96               	movlw	150
 11884  002102  6E19               	movwf	___ftge@ff1+1,c
 11885  002104  0E42               	movlw	66
 11886  002106  6E1A               	movwf	___ftge@ff1+2,c
 11887  002108  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
 11888  00210C  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
 11889  002110  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
 11890  002114  EC0F  F012         	call	___ftge	;wreg free
 11891  002118  B0D8               	btfsc	status,0,c
 11892  00211A  D002               	goto	u7940
 11893  00211C  0E01               	movlw	1
 11894  00211E  0012               	return	
 11895  002120                     u7940:
 11896  002120  0E00               	movlw	0
 11897  002122  0012               	return	
 11898  002124                     __end_of_CheckFlashPrecentage:
 11899                           	opt stack 0
 11900                           tosu	equ	0xFFF
 11901                           tosh	equ	0xFFE
 11902                           tosl	equ	0xFFD
 11903                           pclath	equ	0xFFA
 11904                           tblptru	equ	0xFF8
 11905                           tblptrh	equ	0xFF7
 11906                           tblptrl	equ	0xFF6
 11907                           tablat	equ	0xFF5
 11908                           prodh	equ	0xFF4
 11909                           prodl	equ	0xFF3
 11910                           intcon	equ	0xFF2
 11911                           intcon2	equ	0xFF1
 11912                           postinc0	equ	0xFEE
 11913                           wreg	equ	0xFE8
 11914                           indf1	equ	0xFE7
 11915                           postdec1	equ	0xFE5
 11916                           fsr1h	equ	0xFE2
 11917                           fsr1l	equ	0xFE1
 11918                           indf2	equ	0xFDF
 11919                           postinc2	equ	0xFDE
 11920                           postdec2	equ	0xFDD
 11921                           fsr2h	equ	0xFDA
 11922                           fsr2l	equ	0xFD9
 11923                           status	equ	0xFD8
 11924                           
 11925 ;; *************** function _BlinkOkLeds *****************
 11926 ;; Defined at:
 11927 ;;		line 24 in file "LedsApp.c"
 11928 ;; Parameters:    Size  Location     Type
 11929 ;;  state           1    wreg     enum E7564
 11930 ;; Auto vars:     Size  Location     Type
 11931 ;;  state           1   26[COMRAM] enum E7564
 11932 ;;  idx             2   27[COMRAM] int 
 11933 ;; Return value:  Size  Location     Type
 11934 ;;                  1    wreg      void 
 11935 ;; Registers used:
 11936 ;;		wreg, status,2, status,0
 11937 ;; Tracked objects:
 11938 ;;		On entry : 0/0
 11939 ;;		On exit  : 0/0
 11940 ;;		Unchanged: 0/0
 11941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11942 ;;      Params:         0       0       0       0       0       0       0
 11943 ;;      Locals:         3       0       0       0       0       0       0
 11944 ;;      Temps:          3       0       0       0       0       0       0
 11945 ;;      Totals:         6       0       0       0       0       0       0
 11946 ;;Total ram usage:        6 bytes
 11947 ;; Hardware stack levels used:    1
 11948 ;; Hardware stack levels required when called:    3
 11949 ;; This function calls:
 11950 ;;		Nothing
 11951 ;; This function is called by:
 11952 ;;		_main
 11953 ;; This function uses a non-reentrant model
 11954 ;;
 11955                           
 11956                           	psect	text83
 11957  002920                     __ptext83:
 11958                           	opt stack 0
 11959  002920                     _BlinkOkLeds:
 11960                           	opt stack 27
 11961                           
 11962                           ;incstack = 0
 11963                           ;BlinkOkLeds@state stored from wreg
 11964  002920  6E1B               	movwf	BlinkOkLeds@state,c
 11965                           
 11966                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 11967  002922  0E00               	movlw	0
 11968  002924  6E1D               	movwf	BlinkOkLeds@idx+1,c
 11969  002926  0E00               	movlw	0
 11970  002928  6E1C               	movwf	BlinkOkLeds@idx,c
 11971  00292A                     l5979:
 11972  00292A  501B               	movf	BlinkOkLeds@state,w,c
 11973  00292C  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 11974  00292E  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 11975  002930  5018               	movf	??_BlinkOkLeds,w,c
 11976  002932  5C1C               	subwf	BlinkOkLeds@idx,w,c
 11977  002934  501D               	movf	BlinkOkLeds@idx+1,w,c
 11978  002936  0A80               	xorlw	128
 11979  002938  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 11980  00293A  5019               	movf	??_BlinkOkLeds+1,w,c
 11981  00293C  0A80               	xorlw	128
 11982  00293E  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 11983  002940  B0D8               	btfsc	status,0,c
 11984  002942  0012               	return	
 11985                           
 11986                           ;LedsApp.c: 27: {
 11987                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 11988  002944  908B               	bcf	3979,0,c	;volatile
 11989                           
 11990                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 11991  002946  0E02               	movlw	2
 11992  002948  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 11993  00294A  0E04               	movlw	4
 11994  00294C  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 11995  00294E  0EBA               	movlw	186
 11996  002950                     u8147:
 11997  002950  2EE8               	decfsz	wreg,f,c
 11998  002952  D7FE               	bra	u8147
 11999  002954  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 12000  002956  D7FC               	bra	u8147
 12001  002958  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 12002  00295A  D7FA               	bra	u8147
 12003  00295C  D000               	nop2	
 12004                           
 12005                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 12006  00295E  808B               	bsf	3979,0,c	;volatile
 12007                           
 12008                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 12009  002960  0E02               	movlw	2
 12010  002962  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 12011  002964  0E04               	movlw	4
 12012  002966  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 12013  002968  0EBA               	movlw	186
 12014  00296A                     u8157:
 12015  00296A  2EE8               	decfsz	wreg,f,c
 12016  00296C  D7FE               	bra	u8157
 12017  00296E  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 12018  002970  D7FC               	bra	u8157
 12019  002972  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 12020  002974  D7FA               	bra	u8157
 12021  002976  D000               	nop2	
 12022  002978  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 12023  00297A  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 12024  00297C  D7D6               	goto	l5979
 12025  00297E                     __end_of_BlinkOkLeds:
 12026                           	opt stack 0
 12027                           tosu	equ	0xFFF
 12028                           tosh	equ	0xFFE
 12029                           tosl	equ	0xFFD
 12030                           pclath	equ	0xFFA
 12031                           tblptru	equ	0xFF8
 12032                           tblptrh	equ	0xFF7
 12033                           tblptrl	equ	0xFF6
 12034                           tablat	equ	0xFF5
 12035                           prodh	equ	0xFF4
 12036                           prodl	equ	0xFF3
 12037                           intcon	equ	0xFF2
 12038                           intcon2	equ	0xFF1
 12039                           postinc0	equ	0xFEE
 12040                           wreg	equ	0xFE8
 12041                           indf1	equ	0xFE7
 12042                           postdec1	equ	0xFE5
 12043                           fsr1h	equ	0xFE2
 12044                           fsr1l	equ	0xFE1
 12045                           indf2	equ	0xFDF
 12046                           postinc2	equ	0xFDE
 12047                           postdec2	equ	0xFDD
 12048                           fsr2h	equ	0xFDA
 12049                           fsr2l	equ	0xFD9
 12050                           status	equ	0xFD8
 12051                           
 12052 ;; *************** function _BlinkErrorLeds *****************
 12053 ;; Defined at:
 12054 ;;		line 13 in file "LedsApp.c"
 12055 ;; Parameters:    Size  Location     Type
 12056 ;;  state           1    wreg     enum E7567
 12057 ;; Auto vars:     Size  Location     Type
 12058 ;;  state           1   26[COMRAM] enum E7567
 12059 ;;  idx             2   27[COMRAM] int 
 12060 ;; Return value:  Size  Location     Type
 12061 ;;                  1    wreg      void 
 12062 ;; Registers used:
 12063 ;;		wreg, status,2, status,0
 12064 ;; Tracked objects:
 12065 ;;		On entry : 0/0
 12066 ;;		On exit  : 0/0
 12067 ;;		Unchanged: 0/0
 12068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12069 ;;      Params:         0       0       0       0       0       0       0
 12070 ;;      Locals:         3       0       0       0       0       0       0
 12071 ;;      Temps:          3       0       0       0       0       0       0
 12072 ;;      Totals:         6       0       0       0       0       0       0
 12073 ;;Total ram usage:        6 bytes
 12074 ;; Hardware stack levels used:    1
 12075 ;; Hardware stack levels required when called:    3
 12076 ;; This function calls:
 12077 ;;		Nothing
 12078 ;; This function is called by:
 12079 ;;		_main
 12080 ;; This function uses a non-reentrant model
 12081 ;;
 12082                           
 12083                           	psect	text84
 12084  00297E                     __ptext84:
 12085                           	opt stack 0
 12086  00297E                     _BlinkErrorLeds:
 12087                           	opt stack 27
 12088                           
 12089                           ;incstack = 0
 12090                           ;BlinkErrorLeds@state stored from wreg
 12091  00297E  6E1B               	movwf	BlinkErrorLeds@state,c
 12092                           
 12093                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
 12094  002980  0E00               	movlw	0
 12095  002982  6E1D               	movwf	BlinkErrorLeds@idx+1,c
 12096  002984  0E00               	movlw	0
 12097  002986  6E1C               	movwf	BlinkErrorLeds@idx,c
 12098  002988                     l5967:
 12099  002988  501B               	movf	BlinkErrorLeds@state,w,c
 12100  00298A  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 12101  00298C  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
 12102  00298E  5018               	movf	??_BlinkErrorLeds,w,c
 12103  002990  5C1C               	subwf	BlinkErrorLeds@idx,w,c
 12104  002992  501D               	movf	BlinkErrorLeds@idx+1,w,c
 12105  002994  0A80               	xorlw	128
 12106  002996  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
 12107  002998  5019               	movf	??_BlinkErrorLeds+1,w,c
 12108  00299A  0A80               	xorlw	128
 12109  00299C  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
 12110  00299E  B0D8               	btfsc	status,0,c
 12111  0029A0  0012               	return	
 12112                           
 12113                           ;LedsApp.c: 16: {
 12114                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
 12115  0029A2  988A               	bcf	3978,4,c	;volatile
 12116                           
 12117                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
 12118  0029A4  0E02               	movlw	2
 12119  0029A6  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 12120  0029A8  0E04               	movlw	4
 12121  0029AA  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 12122  0029AC  0EBA               	movlw	186
 12123  0029AE                     u8167:
 12124  0029AE  2EE8               	decfsz	wreg,f,c
 12125  0029B0  D7FE               	bra	u8167
 12126  0029B2  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 12127  0029B4  D7FC               	bra	u8167
 12128  0029B6  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 12129  0029B8  D7FA               	bra	u8167
 12130  0029BA  D000               	nop2	
 12131                           
 12132                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
 12133  0029BC  888A               	bsf	3978,4,c	;volatile
 12134                           
 12135                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
 12136  0029BE  0E02               	movlw	2
 12137  0029C0  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 12138  0029C2  0E04               	movlw	4
 12139  0029C4  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 12140  0029C6  0EBA               	movlw	186
 12141  0029C8                     u8177:
 12142  0029C8  2EE8               	decfsz	wreg,f,c
 12143  0029CA  D7FE               	bra	u8177
 12144  0029CC  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 12145  0029CE  D7FC               	bra	u8177
 12146  0029D0  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 12147  0029D2  D7FA               	bra	u8177
 12148  0029D4  D000               	nop2	
 12149  0029D6  4A1C               	infsnz	BlinkErrorLeds@idx,f,c
 12150  0029D8  2A1D               	incf	BlinkErrorLeds@idx+1,f,c
 12151  0029DA  D7D6               	goto	l5967
 12152  0029DC                     __end_of_BlinkErrorLeds:
 12153                           	opt stack 0
 12154                           tosu	equ	0xFFF
 12155                           tosh	equ	0xFFE
 12156                           tosl	equ	0xFFD
 12157                           pclath	equ	0xFFA
 12158                           tblptru	equ	0xFF8
 12159                           tblptrh	equ	0xFF7
 12160                           tblptrl	equ	0xFF6
 12161                           tablat	equ	0xFF5
 12162                           prodh	equ	0xFF4
 12163                           prodl	equ	0xFF3
 12164                           intcon	equ	0xFF2
 12165                           intcon2	equ	0xFF1
 12166                           postinc0	equ	0xFEE
 12167                           wreg	equ	0xFE8
 12168                           indf1	equ	0xFE7
 12169                           postdec1	equ	0xFE5
 12170                           fsr1h	equ	0xFE2
 12171                           fsr1l	equ	0xFE1
 12172                           indf2	equ	0xFDF
 12173                           postinc2	equ	0xFDE
 12174                           postdec2	equ	0xFDD
 12175                           fsr2h	equ	0xFDA
 12176                           fsr2l	equ	0xFD9
 12177                           status	equ	0xFD8
 12178                           
 12179 ;; *************** function _AdcConvert *****************
 12180 ;; Defined at:
 12181 ;;		line 56 in file "AdcApp.c"
 12182 ;; Parameters:    Size  Location     Type
 12183 ;;		None
 12184 ;; Auto vars:     Size  Location     Type
 12185 ;;  _adcResult      2   83[BANK0 ] unsigned int 
 12186 ;;  idx             1   92[BANK0 ] unsigned char 
 12187 ;;  _adcResult      2   85[BANK0 ] unsigned int 
 12188 ;;  adcRes          2   90[BANK0 ] unsigned int 
 12189 ;; Return value:  Size  Location     Type
 12190 ;;                  1    wreg      void 
 12191 ;; Registers used:
 12192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12193 ;; Tracked objects:
 12194 ;;		On entry : 0/0
 12195 ;;		On exit  : 0/0
 12196 ;;		Unchanged: 0/0
 12197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12198 ;;      Params:         0       0       0       0       0       0       0
 12199 ;;      Locals:         0      10       0       0       0       0       0
 12200 ;;      Temps:          0       2       0       0       0       0       0
 12201 ;;      Totals:         0      12       0       0       0       0       0
 12202 ;;Total ram usage:       12 bytes
 12203 ;; Hardware stack levels used:    1
 12204 ;; Hardware stack levels required when called:    8
 12205 ;; This function calls:
 12206 ;;		_ADC_GetConversion
 12207 ;;		_FlashSampleWrite
 12208 ;;		___ftdiv
 12209 ;;		___ftmul
 12210 ;;		___fttol
 12211 ;;		___lwtoft
 12212 ;;		_pow
 12213 ;; This function is called by:
 12214 ;;		_main
 12215 ;; This function uses a non-reentrant model
 12216 ;;
 12217                           
 12218                           	psect	text85
 12219  001000                     __ptext85:
 12220                           	opt stack 0
 12221  001000                     _AdcConvert:
 12222                           	opt stack 22
 12223                           
 12224                           ;AdcApp.c: 61: uint16_t adcRes = 0;
 12225                           
 12226                           ;incstack = 0
 12227  001000  0E00               	movlw	0
 12228  001002  0100               	movlb	0	; () banked
 12229  001004  6FBB               	movwf	(AdcConvert@adcRes+1)& (0+255),b
 12230  001006  0E00               	movlw	0
 12231  001008  6FBA               	movwf	AdcConvert@adcRes& (0+255),b
 12232                           
 12233                           ;AdcApp.c: 63: if (adcSampleMode == CIRCULAR)
 12234  00100A  503D               	movf	_adcSampleMode,w,c
 12235  00100C  A4D8               	btfss	status,2,c
 12236  00100E  D073               	goto	l112
 12237                           
 12238                           ; BSR set to: 0
 12239                           ;AdcApp.c: 64: {
 12240                           ;AdcApp.c: 65: for(uint8_t idx = 0; idx < (7); idx++)
 12241  001010  0E00               	movlw	0
 12242  001012  6FBC               	movwf	AdcConvert@idx& (0+255),b
 12243  001014                     l7785:
 12244                           
 12245                           ; BSR set to: 0
 12246  001014  0E06               	movlw	6
 12247  001016  65BC               	cpfsgt	AdcConvert@idx& (0+255),b
 12248  001018  D001               	goto	l113
 12249  00101A  0012               	return	
 12250  00101C                     l113:
 12251                           
 12252                           ; BSR set to: 0
 12253                           ;AdcApp.c: 66: {
 12254                           ;AdcApp.c: 67: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
 12255                           
 12256                           ; BSR set to: 0
 12257  00101C  51BC               	movf	AdcConvert@idx& (0+255),w,b
 12258  00101E  0D01               	mullw	1
 12259  001020  0E35               	movlw	low _channelArr
 12260  001022  24F3               	addwf	prodl,w,c
 12261  001024  6EF6               	movwf	tblptrl,c
 12262  001026  0E06               	movlw	high _channelArr
 12263  001028  20F4               	addwfc	prodh,w,c
 12264  00102A  6EF7               	movwf	tblptrh,c
 12265  00102C                     	if	0	;There are less than 3 active tblptr bytes
 12266  00102C                     	endif
 12267  00102C  0008               	tblrd		*
 12268  00102E  50F5               	movf	tablat,w,c
 12269  001030  EC05  F01A         	call	_ADC_GetConversion
 12270  001034  C018  F0B3         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
 12271  001038  C019  F0B4         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
 12272                           
 12273                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12274  00103C  0E00               	movlw	0
 12275  00103E  0100               	movlb	0	; () banked
 12276  001040  6FA3               	movwf	pow@y& (0+255),b
 12277  001042  0E20               	movlw	32
 12278  001044  6FA4               	movwf	(pow@y+1)& (0+255),b
 12279  001046  0E41               	movlw	65
 12280  001048  6FA5               	movwf	(pow@y+2)& (0+255),b
 12281  00104A  0E00               	movlw	0
 12282  00104C  6FA0               	movwf	pow@x& (0+255),b
 12283  00104E  0E00               	movlw	0
 12284  001050  6FA1               	movwf	(pow@x+1)& (0+255),b
 12285  001052  0E40               	movlw	64
 12286  001054  6FA2               	movwf	(pow@x+2)& (0+255),b
 12287  001056  ECB2  F009         	call	_pow	;wreg free
 12288  00105A  C0A0  F0B7         	movff	?_pow,_AdcConvert$3246
 12289  00105E  C0A1  F0B8         	movff	?_pow+1,_AdcConvert$3246+1
 12290  001062  C0A2  F0B9         	movff	?_pow+2,_AdcConvert$3246+2
 12291                           
 12292                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12293  001066  0EC0               	movlw	192
 12294  001068  0100               	movlb	0	; () banked
 12295  00106A  6F6C               	movwf	___ftmul@f2& (0+255),b
 12296  00106C  0E50               	movlw	80
 12297  00106E  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12298  001070  0E45               	movlw	69
 12299  001072  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12300  001074  C0B7  F02C         	movff	_AdcConvert$3246,___ftdiv@f2
 12301  001078  C0B8  F02D         	movff	_AdcConvert$3246+1,___ftdiv@f2+1
 12302  00107C  C0B9  F02E         	movff	_AdcConvert$3246+2,___ftdiv@f2+2
 12303  001080  C0B3  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
 12304  001084  C0B4  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
 12305  001088  ECBE  F01A         	call	___lwtoft	;wreg free
 12306  00108C  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 12307  001090  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 12308  001094  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 12309  001098  ECFB  F00C         	call	___ftdiv	;wreg free
 12310  00109C  C029  F069         	movff	?___ftdiv,___ftmul@f1
 12311  0010A0  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 12312  0010A4  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 12313  0010A8  EC80  F00C         	call	___ftmul	;wreg free
 12314  0010AC  C069  F078         	movff	?___ftmul,___fttol@f1
 12315  0010B0  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 12316  0010B4  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 12317  0010B8  EC04  F00C         	call	___fttol	;wreg free
 12318  0010BC  C078  F0BA         	movff	?___fttol,AdcConvert@adcRes
 12319  0010C0  C079  F0BB         	movff	?___fttol+1,AdcConvert@adcRes+1
 12320                           
 12321                           ;AdcApp.c: 69: FlashSampleWrite(adcRes, idx + 1);
 12322  0010C4  C0BA  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 12323  0010C8  C0BB  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 12324  0010CC  0100               	movlb	0	; () banked
 12325  0010CE  29BC               	incf	AdcConvert@idx& (0+255),w,b
 12326  0010D0  6E2F               	movwf	FlashSampleWrite@channelNum,c
 12327  0010D2  EC87  F00B         	call	_FlashSampleWrite	;wreg free
 12328                           
 12329                           ;AdcApp.c: 70: _delay((unsigned long)((250)*(8000000/4000.0)));
 12330  0010D6  0E03               	movlw	3
 12331  0010D8  0100               	movlb	0	; () banked
 12332  0010DA  6FB2               	movwf	(??_AdcConvert+1)& (0+255),b
 12333  0010DC  0E8A               	movlw	138
 12334  0010DE  6FB1               	movwf	??_AdcConvert& (0+255),b
 12335  0010E0  0E55               	movlw	85
 12336  0010E2                     u8187:
 12337  0010E2  2EE8               	decfsz	wreg,f,c
 12338  0010E4  D7FE               	bra	u8187
 12339  0010E6  2FB1               	decfsz	??_AdcConvert& (0+255),f,b
 12340  0010E8  D7FC               	bra	u8187
 12341  0010EA  2FB2               	decfsz	(??_AdcConvert+1)& (0+255),f,b
 12342  0010EC  D7FA               	bra	u8187
 12343  0010EE  D000               	nop2	
 12344  0010F0  0100               	movlb	0	; () banked
 12345  0010F2  2BBC               	incf	AdcConvert@idx& (0+255),f,b
 12346  0010F4  D78F               	goto	l7785
 12347  0010F6                     l112:
 12348                           
 12349                           ; BSR set to: 0
 12350                           ;AdcApp.c: 73: else if (adcSampleMode == SINGLE_CHANNEL)
 12351                           
 12352                           ; BSR set to: 0
 12353  0010F6  043D               	decf	_adcSampleMode,w,c
 12354  0010F8  A4D8               	btfss	status,2,c
 12355  0010FA  0012               	return	
 12356                           
 12357                           ; BSR set to: 0
 12358                           ;AdcApp.c: 74: {
 12359                           ;AdcApp.c: 75: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
 12360  0010FC  51D4               	movf	_channel& (0+255),w,b
 12361  0010FE  0D01               	mullw	1
 12362  001100  0E35               	movlw	low _channelArr
 12363  001102  24F3               	addwf	prodl,w,c
 12364  001104  6EF6               	movwf	tblptrl,c
 12365  001106  0E06               	movlw	high _channelArr
 12366  001108  20F4               	addwfc	prodh,w,c
 12367  00110A  6EF7               	movwf	tblptrh,c
 12368  00110C                     	if	0	;There are less than 3 active tblptr bytes
 12369  00110C                     	endif
 12370  00110C  0008               	tblrd		*
 12371  00110E  50F5               	movf	tablat,w,c
 12372  001110  EC05  F01A         	call	_ADC_GetConversion
 12373  001114  C018  F0B5         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_332
 12374  001118  C019  F0B6         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_332+1
 12375                           
 12376                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12377  00111C  0E00               	movlw	0
 12378  00111E  0100               	movlb	0	; () banked
 12379  001120  6FA3               	movwf	pow@y& (0+255),b
 12380  001122  0E20               	movlw	32
 12381  001124  6FA4               	movwf	(pow@y+1)& (0+255),b
 12382  001126  0E41               	movlw	65
 12383  001128  6FA5               	movwf	(pow@y+2)& (0+255),b
 12384  00112A  0E00               	movlw	0
 12385  00112C  6FA0               	movwf	pow@x& (0+255),b
 12386  00112E  0E00               	movlw	0
 12387  001130  6FA1               	movwf	(pow@x+1)& (0+255),b
 12388  001132  0E40               	movlw	64
 12389  001134  6FA2               	movwf	(pow@x+2)& (0+255),b
 12390  001136  ECB2  F009         	call	_pow	;wreg free
 12391  00113A  C0A0  F0B7         	movff	?_pow,_AdcConvert$3246
 12392  00113E  C0A1  F0B8         	movff	?_pow+1,_AdcConvert$3246+1
 12393  001142  C0A2  F0B9         	movff	?_pow+2,_AdcConvert$3246+2
 12394                           
 12395                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12396  001146  0EC0               	movlw	192
 12397  001148  0100               	movlb	0	; () banked
 12398  00114A  6F6C               	movwf	___ftmul@f2& (0+255),b
 12399  00114C  0E50               	movlw	80
 12400  00114E  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12401  001150  0E45               	movlw	69
 12402  001152  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12403  001154  C0B7  F02C         	movff	_AdcConvert$3246,___ftdiv@f2
 12404  001158  C0B8  F02D         	movff	_AdcConvert$3246+1,___ftdiv@f2+1
 12405  00115C  C0B9  F02E         	movff	_AdcConvert$3246+2,___ftdiv@f2+2
 12406  001160  C0B5  F020         	movff	AdcConvert@_adcResult_332,___lwtoft@c
 12407  001164  C0B6  F021         	movff	AdcConvert@_adcResult_332+1,___lwtoft@c+1
 12408  001168  ECBE  F01A         	call	___lwtoft	;wreg free
 12409  00116C  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 12410  001170  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 12411  001174  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 12412  001178  ECFB  F00C         	call	___ftdiv	;wreg free
 12413  00117C  C029  F069         	movff	?___ftdiv,___ftmul@f1
 12414  001180  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 12415  001184  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 12416  001188  EC80  F00C         	call	___ftmul	;wreg free
 12417  00118C  C069  F078         	movff	?___ftmul,___fttol@f1
 12418  001190  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 12419  001194  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 12420  001198  EC04  F00C         	call	___fttol	;wreg free
 12421  00119C  C078  F0BA         	movff	?___fttol,AdcConvert@adcRes
 12422  0011A0  C079  F0BB         	movff	?___fttol+1,AdcConvert@adcRes+1
 12423                           
 12424                           ;AdcApp.c: 77: FlashSampleWrite(adcRes, 1);
 12425  0011A4  C0BA  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 12426  0011A8  C0BB  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 12427  0011AC  0E01               	movlw	1
 12428  0011AE  6E2F               	movwf	FlashSampleWrite@channelNum,c
 12429  0011B0  EC87  F00B         	call	_FlashSampleWrite	;wreg free
 12430  0011B4  0012               	return	
 12431  0011B6                     __end_of_AdcConvert:
 12432                           	opt stack 0
 12433                           tosu	equ	0xFFF
 12434                           tosh	equ	0xFFE
 12435                           tosl	equ	0xFFD
 12436                           pclath	equ	0xFFA
 12437                           tblptru	equ	0xFF8
 12438                           tblptrh	equ	0xFF7
 12439                           tblptrl	equ	0xFF6
 12440                           tablat	equ	0xFF5
 12441                           prodh	equ	0xFF4
 12442                           prodl	equ	0xFF3
 12443                           intcon	equ	0xFF2
 12444                           intcon2	equ	0xFF1
 12445                           postinc0	equ	0xFEE
 12446                           wreg	equ	0xFE8
 12447                           indf1	equ	0xFE7
 12448                           postdec1	equ	0xFE5
 12449                           fsr1h	equ	0xFE2
 12450                           fsr1l	equ	0xFE1
 12451                           indf2	equ	0xFDF
 12452                           postinc2	equ	0xFDE
 12453                           postdec2	equ	0xFDD
 12454                           fsr2h	equ	0xFDA
 12455                           fsr2l	equ	0xFD9
 12456                           status	equ	0xFD8
 12457                           
 12458 ;; *************** function _pow *****************
 12459 ;; Defined at:
 12460 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 12461 ;; Parameters:    Size  Location     Type
 12462 ;;  x               3   64[BANK0 ] void 
 12463 ;;  y               3   67[BANK0 ] void 
 12464 ;; Auto vars:     Size  Location     Type
 12465 ;;  yi              4   77[BANK0 ] unsigned long 
 12466 ;;  sign            1   76[BANK0 ] unsigned char 
 12467 ;; Return value:  Size  Location     Type
 12468 ;;                  3   64[BANK0 ] unsigned char 
 12469 ;; Registers used:
 12470 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12471 ;; Tracked objects:
 12472 ;;		On entry : 0/0
 12473 ;;		On exit  : 0/0
 12474 ;;		Unchanged: 0/0
 12475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12476 ;;      Params:         0       6       0       0       0       0       0
 12477 ;;      Locals:         0      11       0       0       0       0       0
 12478 ;;      Temps:          0       0       0       0       0       0       0
 12479 ;;      Totals:         0      17       0       0       0       0       0
 12480 ;;Total ram usage:       17 bytes
 12481 ;; Hardware stack levels used:    1
 12482 ;; Hardware stack levels required when called:    7
 12483 ;; This function calls:
 12484 ;;		___ftge
 12485 ;;		___ftmul
 12486 ;;		___ftneg
 12487 ;;		___fttol
 12488 ;;		___lltoft
 12489 ;;		_exp
 12490 ;;		_log
 12491 ;; This function is called by:
 12492 ;;		_AdcConvert
 12493 ;; This function uses a non-reentrant model
 12494 ;;
 12495                           
 12496                           	psect	text86
 12497  001364                     __ptext86:
 12498                           	opt stack 0
 12499  001364                     _pow:
 12500                           	opt stack 22
 12501                           
 12502                           ;incstack = 0
 12503  001364  0E00               	movlw	0
 12504  001366  0100               	movlb	0	; () banked
 12505  001368  6FAC               	movwf	pow@sign& (0+255),b
 12506                           
 12507                           ; BSR set to: 0
 12508  00136A  51A0               	movf	pow@x& (0+255),w,b
 12509  00136C  11A1               	iorwf	(pow@x+1)& (0+255),w,b
 12510  00136E  11A2               	iorwf	(pow@x+2)& (0+255),w,b
 12511  001370  A4D8               	btfss	status,2,c
 12512  001372  D01D               	goto	l1838
 12513                           
 12514                           ; BSR set to: 0
 12515  001374  0E00               	movlw	0
 12516  001376  6E18               	movwf	___ftge@ff1,c
 12517  001378  0E00               	movlw	0
 12518  00137A  6E19               	movwf	___ftge@ff1+1,c
 12519  00137C  0E00               	movlw	0
 12520  00137E  6E1A               	movwf	___ftge@ff1+2,c
 12521  001380  C0A3  F01B         	movff	pow@y,___ftge@ff2
 12522  001384  C0A4  F01C         	movff	pow@y+1,___ftge@ff2+1
 12523  001388  C0A5  F01D         	movff	pow@y+2,___ftge@ff2+2
 12524  00138C  EC0F  F012         	call	___ftge	;wreg free
 12525  001390  A0D8               	btfss	status,0,c
 12526  001392  D005               	goto	l1839
 12527  001394  0E00               	movlw	0
 12528  001396  0100               	movlb	0	; () banked
 12529  001398  6FC6               	movwf	(_errno+1)& (0+255),b
 12530  00139A  0E21               	movlw	33
 12531  00139C  6FC5               	movwf	_errno& (0+255),b
 12532  00139E                     l1839:
 12533  00139E  0E00               	movlw	0
 12534  0013A0  0100               	movlb	0	; () banked
 12535  0013A2  6FA0               	movwf	?_pow& (0+255),b
 12536  0013A4  0E00               	movlw	0
 12537  0013A6  6FA1               	movwf	(?_pow+1)& (0+255),b
 12538  0013A8  0E00               	movlw	0
 12539  0013AA  6FA2               	movwf	(?_pow+2)& (0+255),b
 12540                           
 12541                           ; BSR set to: 0
 12542  0013AC  0012               	return	
 12543  0013AE                     l1838:
 12544                           
 12545                           ; BSR set to: 0
 12546                           
 12547                           ; BSR set to: 0
 12548  0013AE  51A3               	movf	pow@y& (0+255),w,b
 12549  0013B0  11A4               	iorwf	(pow@y+1)& (0+255),w,b
 12550  0013B2  11A5               	iorwf	(pow@y+2)& (0+255),w,b
 12551  0013B4  A4D8               	btfss	status,2,c
 12552  0013B6  D007               	goto	l1841
 12553                           
 12554                           ; BSR set to: 0
 12555  0013B8  0E00               	movlw	0
 12556  0013BA  6FA0               	movwf	?_pow& (0+255),b
 12557  0013BC  0E80               	movlw	128
 12558  0013BE  6FA1               	movwf	(?_pow+1)& (0+255),b
 12559  0013C0  0E3F               	movlw	63
 12560  0013C2  6FA2               	movwf	(?_pow+2)& (0+255),b
 12561                           
 12562                           ; BSR set to: 0
 12563  0013C4  0012               	return	
 12564  0013C6                     l1841:
 12565                           
 12566                           ; BSR set to: 0
 12567                           
 12568                           ; BSR set to: 0
 12569  0013C6  AFA2               	btfss	(pow@x+2)& (0+255),7,b
 12570  0013C8  D041               	goto	l1842
 12571                           
 12572                           ; BSR set to: 0
 12573  0013CA  C0A3  F078         	movff	pow@y,___fttol@f1
 12574  0013CE  C0A4  F079         	movff	pow@y+1,___fttol@f1+1
 12575  0013D2  C0A5  F07A         	movff	pow@y+2,___fttol@f1+2
 12576  0013D6  EC04  F00C         	call	___fttol	;wreg free
 12577  0013DA  C078  F0AD         	movff	?___fttol,pow@yi
 12578  0013DE  C079  F0AE         	movff	?___fttol+1,pow@yi+1
 12579  0013E2  C07A  F0AF         	movff	?___fttol+2,pow@yi+2
 12580  0013E6  C07B  F0B0         	movff	?___fttol+3,pow@yi+3
 12581  0013EA  C0AD  F020         	movff	pow@yi,___lltoft@c
 12582  0013EE  C0AE  F021         	movff	pow@yi+1,___lltoft@c+1
 12583  0013F2  C0AF  F022         	movff	pow@yi+2,___lltoft@c+2
 12584  0013F6  C0B0  F023         	movff	pow@yi+3,___lltoft@c+3
 12585  0013FA  EC4A  F015         	call	___lltoft	;wreg free
 12586  0013FE  0100               	movlb	0	; () banked
 12587  001400  51A3               	movf	pow@y& (0+255),w,b
 12588  001402  1820               	xorwf	?___lltoft,w,c
 12589  001404  E107               	bnz	u7660
 12590  001406  51A4               	movf	(pow@y+1)& (0+255),w,b
 12591  001408  1821               	xorwf	?___lltoft+1,w,c
 12592  00140A  E104               	bnz	u7660
 12593  00140C  51A5               	movf	(pow@y+2)& (0+255),w,b
 12594  00140E  1822               	xorwf	?___lltoft+2,w,c
 12595  001410  B4D8               	btfsc	status,2,c
 12596  001412  D00B               	goto	l1843
 12597  001414                     u7660:
 12598                           
 12599                           ; BSR set to: 0
 12600  001414  0E00               	movlw	0
 12601  001416  6FC6               	movwf	(_errno+1)& (0+255),b
 12602  001418  0E21               	movlw	33
 12603  00141A  6FC5               	movwf	_errno& (0+255),b
 12604  00141C  0E00               	movlw	0
 12605  00141E  6FA0               	movwf	?_pow& (0+255),b
 12606  001420  0E00               	movlw	0
 12607  001422  6FA1               	movwf	(?_pow+1)& (0+255),b
 12608  001424  0E00               	movlw	0
 12609  001426  6FA2               	movwf	(?_pow+2)& (0+255),b
 12610                           
 12611                           ; BSR set to: 0
 12612  001428  0012               	return	
 12613  00142A                     l1843:
 12614                           
 12615                           ; BSR set to: 0
 12616                           
 12617                           ; BSR set to: 0
 12618  00142A  51AD               	movf	pow@yi& (0+255),w,b
 12619  00142C  0B01               	andlw	1
 12620  00142E  6FAC               	movwf	pow@sign& (0+255),b
 12621                           
 12622                           ; BSR set to: 0
 12623  001430  C0A0  F018         	movff	pow@x,___ftneg@f1
 12624  001434  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 12625  001438  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 12626  00143C  ECAC  F01A         	call	___ftneg	;wreg free
 12627  001440  C018  F0A0         	movff	?___ftneg,pow@x
 12628  001444  C019  F0A1         	movff	?___ftneg+1,pow@x+1
 12629  001448  C01A  F0A2         	movff	?___ftneg+2,pow@x+2
 12630  00144C                     l1842:
 12631  00144C  C0A0  F08E         	movff	pow@x,log@x
 12632  001450  C0A1  F08F         	movff	pow@x+1,log@x+1
 12633  001454  C0A2  F090         	movff	pow@x+2,log@x+2
 12634  001458  EC70  F00A         	call	_log	;wreg free
 12635  00145C  C08E  F0A6         	movff	?_log,_pow$3247
 12636  001460  C08F  F0A7         	movff	?_log+1,_pow$3247+1
 12637  001464  C090  F0A8         	movff	?_log+2,_pow$3247+2
 12638  001468  C0A6  F069         	movff	_pow$3247,___ftmul@f1
 12639  00146C  C0A7  F06A         	movff	_pow$3247+1,___ftmul@f1+1
 12640  001470  C0A8  F06B         	movff	_pow$3247+2,___ftmul@f1+2
 12641  001474  C0A3  F06C         	movff	pow@y,___ftmul@f2
 12642  001478  C0A4  F06D         	movff	pow@y+1,___ftmul@f2+1
 12643  00147C  C0A5  F06E         	movff	pow@y+2,___ftmul@f2+2
 12644  001480  EC80  F00C         	call	___ftmul	;wreg free
 12645  001484  C069  F0A9         	movff	?___ftmul,_pow$3248
 12646  001488  C06A  F0AA         	movff	?___ftmul+1,_pow$3248+1
 12647  00148C  C06B  F0AB         	movff	?___ftmul+2,_pow$3248+2
 12648  001490  C0A9  F097         	movff	_pow$3248,exp@x
 12649  001494  C0AA  F098         	movff	_pow$3248+1,exp@x+1
 12650  001498  C0AB  F099         	movff	_pow$3248+2,exp@x+2
 12651  00149C  EC1C  F006         	call	_exp	;wreg free
 12652  0014A0  C097  F0A0         	movff	?_exp,pow@x
 12653  0014A4  C098  F0A1         	movff	?_exp+1,pow@x+1
 12654  0014A8  C099  F0A2         	movff	?_exp+2,pow@x+2
 12655  0014AC  0100               	movlb	0	; () banked
 12656  0014AE  51AC               	movf	pow@sign& (0+255),w,b
 12657  0014B0  B4D8               	btfsc	status,2,c
 12658  0014B2  D00F               	goto	l1844
 12659                           
 12660                           ; BSR set to: 0
 12661  0014B4  C0A0  F018         	movff	pow@x,___ftneg@f1
 12662  0014B8  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 12663  0014BC  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 12664  0014C0  ECAC  F01A         	call	___ftneg	;wreg free
 12665  0014C4  C018  F0A0         	movff	?___ftneg,?_pow
 12666  0014C8  C019  F0A1         	movff	?___ftneg+1,?_pow+1
 12667  0014CC  C01A  F0A2         	movff	?___ftneg+2,?_pow+2
 12668  0014D0  0012               	return	
 12669  0014D2                     l1844:
 12670                           
 12671                           ; BSR set to: 0
 12672  0014D2  C0A0  F0A0         	movff	pow@x,?_pow
 12673  0014D6  C0A1  F0A1         	movff	pow@x+1,?_pow+1
 12674  0014DA  C0A2  F0A2         	movff	pow@x+2,?_pow+2
 12675  0014DE  0012               	return		;funcret
 12676  0014E0                     __end_of_pow:
 12677                           	opt stack 0
 12678                           tosu	equ	0xFFF
 12679                           tosh	equ	0xFFE
 12680                           tosl	equ	0xFFD
 12681                           pclath	equ	0xFFA
 12682                           tblptru	equ	0xFF8
 12683                           tblptrh	equ	0xFF7
 12684                           tblptrl	equ	0xFF6
 12685                           tablat	equ	0xFF5
 12686                           prodh	equ	0xFF4
 12687                           prodl	equ	0xFF3
 12688                           intcon	equ	0xFF2
 12689                           intcon2	equ	0xFF1
 12690                           postinc0	equ	0xFEE
 12691                           wreg	equ	0xFE8
 12692                           indf1	equ	0xFE7
 12693                           postdec1	equ	0xFE5
 12694                           fsr1h	equ	0xFE2
 12695                           fsr1l	equ	0xFE1
 12696                           indf2	equ	0xFDF
 12697                           postinc2	equ	0xFDE
 12698                           postdec2	equ	0xFDD
 12699                           fsr2h	equ	0xFDA
 12700                           fsr2l	equ	0xFD9
 12701                           status	equ	0xFD8
 12702                           
 12703 ;; *************** function _log *****************
 12704 ;; Defined at:
 12705 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 12706 ;; Parameters:    Size  Location     Type
 12707 ;;  x               3   46[BANK0 ] unsigned char 
 12708 ;; Auto vars:     Size  Location     Type
 12709 ;;  exponent        2   49[BANK0 ] int 
 12710 ;; Return value:  Size  Location     Type
 12711 ;;                  3   46[BANK0 ] int 
 12712 ;; Registers used:
 12713 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12714 ;; Tracked objects:
 12715 ;;		On entry : 0/0
 12716 ;;		On exit  : 0/0
 12717 ;;		Unchanged: 0/0
 12718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12719 ;;      Params:         0       3       0       0       0       0       0
 12720 ;;      Locals:         0       2       0       0       0       0       0
 12721 ;;      Temps:          0       0       0       0       0       0       0
 12722 ;;      Totals:         0       5       0       0       0       0       0
 12723 ;;Total ram usage:        5 bytes
 12724 ;; Hardware stack levels used:    1
 12725 ;; Hardware stack levels required when called:    6
 12726 ;; This function calls:
 12727 ;;		___awtoft
 12728 ;;		___ftadd
 12729 ;;		___ftmul
 12730 ;;		_eval_poly
 12731 ;;		_frexp
 12732 ;; This function is called by:
 12733 ;;		_pow
 12734 ;; This function uses a non-reentrant model
 12735 ;;
 12736                           
 12737                           	psect	text87
 12738  0014E0                     __ptext87:
 12739                           	opt stack 0
 12740  0014E0                     _log:
 12741                           	opt stack 22
 12742                           
 12743                           ;incstack = 0
 12744  0014E0  0100               	movlb	0	; () banked
 12745  0014E2  AF90               	btfss	(log@x+2)& (0+255),7,b
 12746  0014E4  D00B               	goto	l2100
 12747                           
 12748                           ; BSR set to: 0
 12749  0014E6  0E00               	movlw	0
 12750  0014E8  6FC6               	movwf	(_errno+1)& (0+255),b
 12751  0014EA  0E21               	movlw	33
 12752  0014EC  6FC5               	movwf	_errno& (0+255),b
 12753  0014EE  0E00               	movlw	0
 12754  0014F0  6F8E               	movwf	?_log& (0+255),b
 12755  0014F2  0E00               	movlw	0
 12756  0014F4  6F8F               	movwf	(?_log+1)& (0+255),b
 12757  0014F6  0E00               	movlw	0
 12758  0014F8  6F90               	movwf	(?_log+2)& (0+255),b
 12759                           
 12760                           ; BSR set to: 0
 12761  0014FA  0012               	return	
 12762  0014FC                     l2100:
 12763                           
 12764                           ; BSR set to: 0
 12765                           
 12766                           ; BSR set to: 0
 12767  0014FC  518E               	movf	log@x& (0+255),w,b
 12768  0014FE  118F               	iorwf	(log@x+1)& (0+255),w,b
 12769  001500  1190               	iorwf	(log@x+2)& (0+255),w,b
 12770  001502  A4D8               	btfss	status,2,c
 12771  001504  D00B               	goto	l2102
 12772                           
 12773                           ; BSR set to: 0
 12774  001506  0E00               	movlw	0
 12775  001508  6FC6               	movwf	(_errno+1)& (0+255),b
 12776  00150A  0E22               	movlw	34
 12777  00150C  6FC5               	movwf	_errno& (0+255),b
 12778  00150E  0E00               	movlw	0
 12779  001510  6F8E               	movwf	?_log& (0+255),b
 12780  001512  0E00               	movlw	0
 12781  001514  6F8F               	movwf	(?_log+1)& (0+255),b
 12782  001516  0E00               	movlw	0
 12783  001518  6F90               	movwf	(?_log+2)& (0+255),b
 12784                           
 12785                           ; BSR set to: 0
 12786  00151A  0012               	return	
 12787  00151C                     l2102:
 12788                           
 12789                           ; BSR set to: 0
 12790                           
 12791                           ; BSR set to: 0
 12792  00151C  0E00               	movlw	0
 12793  00151E  6F6C               	movwf	___ftmul@f2& (0+255),b
 12794  001520  0E00               	movlw	0
 12795  001522  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12796  001524  0E40               	movlw	64
 12797  001526  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12798  001528  0E91               	movlw	low log@exponent
 12799  00152A  6E1B               	movwf	frexp@eptr,c
 12800  00152C  0E00               	movlw	high log@exponent
 12801  00152E  6E1C               	movwf	frexp@eptr+1,c
 12802  001530  C08E  F018         	movff	log@x,frexp@value
 12803  001534  C08F  F019         	movff	log@x+1,frexp@value+1
 12804  001538  C090  F01A         	movff	log@x+2,frexp@value+2
 12805  00153C  ECC7  F011         	call	_frexp	;wreg free
 12806  001540  C018  F069         	movff	?_frexp,___ftmul@f1
 12807  001544  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
 12808  001548  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
 12809  00154C  EC80  F00C         	call	___ftmul	;wreg free
 12810  001550  C069  F078         	movff	?___ftmul,___ftadd@f1
 12811  001554  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 12812  001558  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 12813  00155C  0E00               	movlw	0
 12814  00155E  0100               	movlb	0	; () banked
 12815  001560  6F7B               	movwf	___ftadd@f2& (0+255),b
 12816  001562  0E80               	movlw	128
 12817  001564  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 12818  001566  0EBF               	movlw	191
 12819  001568  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 12820  00156A  ECDB  F008         	call	___ftadd	;wreg free
 12821  00156E  C078  F08E         	movff	?___ftadd,log@x
 12822  001572  C079  F08F         	movff	?___ftadd+1,log@x+1
 12823  001576  C07A  F090         	movff	?___ftadd+2,log@x+2
 12824  00157A  0100               	movlb	0	; () banked
 12825  00157C  0791               	decf	log@exponent& (0+255),f,b
 12826  00157E  A0D8               	btfss	status,0,c
 12827  001580  0792               	decf	(log@exponent+1)& (0+255),f,b
 12828                           
 12829                           ; BSR set to: 0
 12830  001582  C08E  F084         	movff	log@x,eval_poly@x
 12831  001586  C08F  F085         	movff	log@x+1,eval_poly@x+1
 12832  00158A  C090  F086         	movff	log@x+2,eval_poly@x+2
 12833  00158E  0E5E               	movlw	low log@coeff
 12834  001590  6F87               	movwf	eval_poly@d& (0+255),b
 12835  001592  0E06               	movlw	high log@coeff
 12836  001594  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 12837  001596  0E00               	movlw	0
 12838  001598  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 12839  00159A  0E08               	movlw	8
 12840  00159C  6F89               	movwf	eval_poly@n& (0+255),b
 12841  00159E  EC52  F00E         	call	_eval_poly	;wreg free
 12842  0015A2  C084  F08E         	movff	?_eval_poly,log@x
 12843  0015A6  C085  F08F         	movff	?_eval_poly+1,log@x+1
 12844  0015AA  C086  F090         	movff	?_eval_poly+2,log@x+2
 12845  0015AE  0E72               	movlw	114
 12846  0015B0  0100               	movlb	0	; () banked
 12847  0015B2  6F6C               	movwf	___ftmul@f2& (0+255),b
 12848  0015B4  0E31               	movlw	49
 12849  0015B6  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12850  0015B8  0E3F               	movlw	63
 12851  0015BA  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12852  0015BC  C091  F020         	movff	log@exponent,___awtoft@c
 12853  0015C0  C092  F021         	movff	log@exponent+1,___awtoft@c+1
 12854  0015C4  EC15  F019         	call	___awtoft	;wreg free
 12855  0015C8  C020  F069         	movff	?___awtoft,___ftmul@f1
 12856  0015CC  C021  F06A         	movff	?___awtoft+1,___ftmul@f1+1
 12857  0015D0  C022  F06B         	movff	?___awtoft+2,___ftmul@f1+2
 12858  0015D4  EC80  F00C         	call	___ftmul	;wreg free
 12859  0015D8  C069  F078         	movff	?___ftmul,___ftadd@f1
 12860  0015DC  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 12861  0015E0  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 12862  0015E4  C08E  F07B         	movff	log@x,___ftadd@f2
 12863  0015E8  C08F  F07C         	movff	log@x+1,___ftadd@f2+1
 12864  0015EC  C090  F07D         	movff	log@x+2,___ftadd@f2+2
 12865  0015F0  ECDB  F008         	call	___ftadd	;wreg free
 12866  0015F4  C078  F08E         	movff	?___ftadd,?_log
 12867  0015F8  C079  F08F         	movff	?___ftadd+1,?_log+1
 12868  0015FC  C07A  F090         	movff	?___ftadd+2,?_log+2
 12869  001600  0012               	return	
 12870  001602                     __end_of_log:
 12871                           	opt stack 0
 12872                           tosu	equ	0xFFF
 12873                           tosh	equ	0xFFE
 12874                           tosl	equ	0xFFD
 12875                           pclath	equ	0xFFA
 12876                           tblptru	equ	0xFF8
 12877                           tblptrh	equ	0xFF7
 12878                           tblptrl	equ	0xFF6
 12879                           tablat	equ	0xFF5
 12880                           prodh	equ	0xFF4
 12881                           prodl	equ	0xFF3
 12882                           intcon	equ	0xFF2
 12883                           intcon2	equ	0xFF1
 12884                           postinc0	equ	0xFEE
 12885                           wreg	equ	0xFE8
 12886                           indf1	equ	0xFE7
 12887                           postdec1	equ	0xFE5
 12888                           fsr1h	equ	0xFE2
 12889                           fsr1l	equ	0xFE1
 12890                           indf2	equ	0xFDF
 12891                           postinc2	equ	0xFDE
 12892                           postdec2	equ	0xFDD
 12893                           fsr2h	equ	0xFDA
 12894                           fsr2l	equ	0xFD9
 12895                           status	equ	0xFD8
 12896                           
 12897 ;; *************** function _exp *****************
 12898 ;; Defined at:
 12899 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 12900 ;; Parameters:    Size  Location     Type
 12901 ;;  x               3   55[BANK0 ] int 
 12902 ;; Auto vars:     Size  Location     Type
 12903 ;;  exponent        2   61[BANK0 ] int 
 12904 ;;  sign            1   63[BANK0 ] unsigned char 
 12905 ;; Return value:  Size  Location     Type
 12906 ;;                  3   55[BANK0 ] unsigned char 
 12907 ;; Registers used:
 12908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12909 ;; Tracked objects:
 12910 ;;		On entry : 0/0
 12911 ;;		On exit  : 0/0
 12912 ;;		Unchanged: 0/0
 12913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12914 ;;      Params:         0       3       0       0       0       0       0
 12915 ;;      Locals:         0       6       0       0       0       0       0
 12916 ;;      Temps:          0       0       0       0       0       0       0
 12917 ;;      Totals:         0       9       0       0       0       0       0
 12918 ;;Total ram usage:        9 bytes
 12919 ;; Hardware stack levels used:    1
 12920 ;; Hardware stack levels required when called:    6
 12921 ;; This function calls:
 12922 ;;		___awtoft
 12923 ;;		___ftdiv
 12924 ;;		___ftge
 12925 ;;		___ftmul
 12926 ;;		___ftneg
 12927 ;;		___ftsub
 12928 ;;		___fttol
 12929 ;;		_eval_poly
 12930 ;;		_floor
 12931 ;;		_ldexp
 12932 ;; This function is called by:
 12933 ;;		_pow
 12934 ;; This function uses a non-reentrant model
 12935 ;;
 12936                           
 12937                           	psect	text88
 12938  000C38                     __ptext88:
 12939                           	opt stack 0
 12940  000C38                     _exp:
 12941                           	opt stack 22
 12942                           
 12943                           ;incstack = 0
 12944  000C38  0100               	movlb	0	; () banked
 12945  000C3A  5197               	movf	exp@x& (0+255),w,b
 12946  000C3C  1198               	iorwf	(exp@x+1)& (0+255),w,b
 12947  000C3E  1199               	iorwf	(exp@x+2)& (0+255),w,b
 12948  000C40  A4D8               	btfss	status,2,c
 12949  000C42  D007               	goto	l2036
 12950                           
 12951                           ; BSR set to: 0
 12952  000C44  0E00               	movlw	0
 12953  000C46  6F97               	movwf	?_exp& (0+255),b
 12954  000C48  0E80               	movlw	128
 12955  000C4A  6F98               	movwf	(?_exp+1)& (0+255),b
 12956  000C4C  0E3F               	movlw	63
 12957  000C4E  6F99               	movwf	(?_exp+2)& (0+255),b
 12958                           
 12959                           ; BSR set to: 0
 12960  000C50  0012               	return	
 12961  000C52                     l2036:
 12962                           
 12963                           ; BSR set to: 0
 12964                           
 12965                           ; BSR set to: 0
 12966  000C52  0E72               	movlw	114
 12967  000C54  6E18               	movwf	___ftge@ff1,c
 12968  000C56  0E31               	movlw	49
 12969  000C58  6E19               	movwf	___ftge@ff1+1,c
 12970  000C5A  0E44               	movlw	68
 12971  000C5C  6E1A               	movwf	___ftge@ff1+2,c
 12972  000C5E  C097  F01B         	movff	exp@x,___ftge@ff2
 12973  000C62  C098  F01C         	movff	exp@x+1,___ftge@ff2+1
 12974  000C66  C099  F01D         	movff	exp@x+2,___ftge@ff2+2
 12975  000C6A  EC0F  F012         	call	___ftge	;wreg free
 12976  000C6E  B0D8               	btfsc	status,0,c
 12977  000C70  D00C               	goto	l2038
 12978  000C72  0E00               	movlw	0
 12979  000C74  0100               	movlb	0	; () banked
 12980  000C76  6FC6               	movwf	(_errno+1)& (0+255),b
 12981  000C78  0E22               	movlw	34
 12982  000C7A  6FC5               	movwf	_errno& (0+255),b
 12983  000C7C  0EFF               	movlw	255
 12984  000C7E  6F97               	movwf	?_exp& (0+255),b
 12985  000C80  0E7F               	movlw	127
 12986  000C82  6F98               	movwf	(?_exp+1)& (0+255),b
 12987  000C84  0E7F               	movlw	127
 12988  000C86  6F99               	movwf	(?_exp+2)& (0+255),b
 12989                           
 12990                           ; BSR set to: 0
 12991  000C88  0012               	return	
 12992  000C8A                     l2038:
 12993                           
 12994                           ; BSR set to: 0
 12995  000C8A  C097  F018         	movff	exp@x,___ftge@ff1
 12996  000C8E  C098  F019         	movff	exp@x+1,___ftge@ff1+1
 12997  000C92  C099  F01A         	movff	exp@x+2,___ftge@ff1+2
 12998  000C96  0E49               	movlw	73
 12999  000C98  6E1B               	movwf	___ftge@ff2,c
 13000  000C9A  0E3A               	movlw	58
 13001  000C9C  6E1C               	movwf	___ftge@ff2+1,c
 13002  000C9E  0EC4               	movlw	196
 13003  000CA0  6E1D               	movwf	___ftge@ff2+2,c
 13004  000CA2  EC0F  F012         	call	___ftge	;wreg free
 13005  000CA6  B0D8               	btfsc	status,0,c
 13006  000CA8  D00C               	goto	l2039
 13007  000CAA  0E00               	movlw	0
 13008  000CAC  0100               	movlb	0	; () banked
 13009  000CAE  6FC6               	movwf	(_errno+1)& (0+255),b
 13010  000CB0  0E22               	movlw	34
 13011  000CB2  6FC5               	movwf	_errno& (0+255),b
 13012  000CB4  0E00               	movlw	0
 13013  000CB6  6F97               	movwf	?_exp& (0+255),b
 13014  000CB8  0E00               	movlw	0
 13015  000CBA  6F98               	movwf	(?_exp+1)& (0+255),b
 13016  000CBC  0E00               	movlw	0
 13017  000CBE  6F99               	movwf	(?_exp+2)& (0+255),b
 13018                           
 13019                           ; BSR set to: 0
 13020  000CC0  0012               	return	
 13021  000CC2                     l2039:
 13022                           
 13023                           ; BSR set to: 0
 13024  000CC2  0100               	movlb	0	; () banked
 13025  000CC4  AF99               	btfss	(exp@x+2)& (0+255),7,b
 13026  000CC6  D002               	goto	u7570
 13027  000CC8  0E01               	movlw	1
 13028  000CCA  D001               	goto	u7580
 13029  000CCC                     u7570:
 13030  000CCC  0E00               	movlw	0
 13031  000CCE                     u7580:
 13032  000CCE  6F9F               	movwf	exp@sign& (0+255),b
 13033                           
 13034                           ; BSR set to: 0
 13035  000CD0  519F               	movf	exp@sign& (0+255),w,b
 13036  000CD2  B4D8               	btfsc	status,2,c
 13037  000CD4  D00E               	goto	l2040
 13038                           
 13039                           ; BSR set to: 0
 13040  000CD6  C097  F018         	movff	exp@x,___ftneg@f1
 13041  000CDA  C098  F019         	movff	exp@x+1,___ftneg@f1+1
 13042  000CDE  C099  F01A         	movff	exp@x+2,___ftneg@f1+2
 13043  000CE2  ECAC  F01A         	call	___ftneg	;wreg free
 13044  000CE6  C018  F097         	movff	?___ftneg,exp@x
 13045  000CEA  C019  F098         	movff	?___ftneg+1,exp@x+1
 13046  000CEE  C01A  F099         	movff	?___ftneg+2,exp@x+2
 13047  000CF2                     l2040:
 13048  000CF2  C097  F069         	movff	exp@x,___ftmul@f1
 13049  000CF6  C098  F06A         	movff	exp@x+1,___ftmul@f1+1
 13050  000CFA  C099  F06B         	movff	exp@x+2,___ftmul@f1+2
 13051  000CFE  0EAA               	movlw	170
 13052  000D00  0100               	movlb	0	; () banked
 13053  000D02  6F6C               	movwf	___ftmul@f2& (0+255),b
 13054  000D04  0EB8               	movlw	184
 13055  000D06  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 13056  000D08  0E3F               	movlw	63
 13057  000D0A  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 13058  000D0C  EC80  F00C         	call	___ftmul	;wreg free
 13059  000D10  C069  F097         	movff	?___ftmul,exp@x
 13060  000D14  C06A  F098         	movff	?___ftmul+1,exp@x+1
 13061  000D18  C06B  F099         	movff	?___ftmul+2,exp@x+2
 13062  000D1C  C097  F08F         	movff	exp@x,floor@x
 13063  000D20  C098  F090         	movff	exp@x+1,floor@x+1
 13064  000D24  C099  F091         	movff	exp@x+2,floor@x+2
 13065  000D28  ECE1  F00D         	call	_floor	;wreg free
 13066  000D2C  C08F  F09A         	movff	?_floor,_exp$3249
 13067  000D30  C090  F09B         	movff	?_floor+1,_exp$3249+1
 13068  000D34  C091  F09C         	movff	?_floor+2,_exp$3249+2
 13069  000D38  C09A  F078         	movff	_exp$3249,___fttol@f1
 13070  000D3C  C09B  F079         	movff	_exp$3249+1,___fttol@f1+1
 13071  000D40  C09C  F07A         	movff	_exp$3249+2,___fttol@f1+2
 13072  000D44  EC04  F00C         	call	___fttol	;wreg free
 13073  000D48  C078  F09D         	movff	?___fttol,exp@exponent
 13074  000D4C  C079  F09E         	movff	?___fttol+1,exp@exponent+1
 13075  000D50  C097  F084         	movff	exp@x,___ftsub@f1
 13076  000D54  C098  F085         	movff	exp@x+1,___ftsub@f1+1
 13077  000D58  C099  F086         	movff	exp@x+2,___ftsub@f1+2
 13078  000D5C  C09D  F020         	movff	exp@exponent,___awtoft@c
 13079  000D60  C09E  F021         	movff	exp@exponent+1,___awtoft@c+1
 13080  000D64  EC15  F019         	call	___awtoft	;wreg free
 13081  000D68  C020  F087         	movff	?___awtoft,___ftsub@f2
 13082  000D6C  C021  F088         	movff	?___awtoft+1,___ftsub@f2+1
 13083  000D70  C022  F089         	movff	?___awtoft+2,___ftsub@f2+2
 13084  000D74  EC3F  F018         	call	___ftsub	;wreg free
 13085  000D78  C084  F097         	movff	?___ftsub,exp@x
 13086  000D7C  C085  F098         	movff	?___ftsub+1,exp@x+1
 13087  000D80  C086  F099         	movff	?___ftsub+2,exp@x+2
 13088  000D84  C097  F084         	movff	exp@x,eval_poly@x
 13089  000D88  C098  F085         	movff	exp@x+1,eval_poly@x+1
 13090  000D8C  C099  F086         	movff	exp@x+2,eval_poly@x+2
 13091  000D90  0E40               	movlw	low exp@coeff
 13092  000D92  0100               	movlb	0	; () banked
 13093  000D94  6F87               	movwf	eval_poly@d& (0+255),b
 13094  000D96  0E06               	movlw	high exp@coeff
 13095  000D98  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 13096  000D9A  0E00               	movlw	0
 13097  000D9C  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 13098  000D9E  0E09               	movlw	9
 13099  000DA0  6F89               	movwf	eval_poly@n& (0+255),b
 13100  000DA2  EC52  F00E         	call	_eval_poly	;wreg free
 13101  000DA6  C084  F08E         	movff	?_eval_poly,ldexp@value
 13102  000DAA  C085  F08F         	movff	?_eval_poly+1,ldexp@value+1
 13103  000DAE  C086  F090         	movff	?_eval_poly+2,ldexp@value+2
 13104  000DB2  C09D  F091         	movff	exp@exponent,ldexp@newexp
 13105  000DB6  C09E  F092         	movff	exp@exponent+1,ldexp@newexp+1
 13106  000DBA  ECBD  F00E         	call	_ldexp	;wreg free
 13107  000DBE  C08E  F097         	movff	?_ldexp,exp@x
 13108  000DC2  C08F  F098         	movff	?_ldexp+1,exp@x+1
 13109  000DC6  C090  F099         	movff	?_ldexp+2,exp@x+2
 13110  000DCA  0100               	movlb	0	; () banked
 13111  000DCC  519F               	movf	exp@sign& (0+255),w,b
 13112  000DCE  B4D8               	btfsc	status,2,c
 13113  000DD0  D025               	goto	l2041
 13114                           
 13115                           ; BSR set to: 0
 13116  000DD2  2997               	incf	exp@x& (0+255),w,b
 13117  000DD4  E10E               	bnz	l7579
 13118  000DD6  0E7F               	movlw	127
 13119  000DD8  1998               	xorwf	(exp@x+1)& (0+255),w,b
 13120  000DDA  E10B               	bnz	l7579
 13121  000DDC  0E7F               	movlw	127
 13122  000DDE  1999               	xorwf	(exp@x+2)& (0+255),w,b
 13123  000DE0  A4D8               	btfss	status,2,c
 13124  000DE2  D007               	goto	l2042
 13125                           
 13126                           ; BSR set to: 0
 13127  000DE4  0E00               	movlw	0
 13128  000DE6  6F97               	movwf	?_exp& (0+255),b
 13129  000DE8  0E00               	movlw	0
 13130  000DEA  6F98               	movwf	(?_exp+1)& (0+255),b
 13131  000DEC  0E00               	movlw	0
 13132  000DEE  6F99               	movwf	(?_exp+2)& (0+255),b
 13133                           
 13134                           ; BSR set to: 0
 13135  000DF0  0012               	return	
 13136  000DF2                     l2042:
 13137  000DF2                     l7579:
 13138                           
 13139                           ; BSR set to: 0
 13140  000DF2  0E00               	movlw	0
 13141  000DF4  6E29               	movwf	___ftdiv@f1,c
 13142  000DF6  0E80               	movlw	128
 13143  000DF8  6E2A               	movwf	___ftdiv@f1+1,c
 13144  000DFA  0E3F               	movlw	63
 13145  000DFC  6E2B               	movwf	___ftdiv@f1+2,c
 13146  000DFE  C097  F02C         	movff	exp@x,___ftdiv@f2
 13147  000E02  C098  F02D         	movff	exp@x+1,___ftdiv@f2+1
 13148  000E06  C099  F02E         	movff	exp@x+2,___ftdiv@f2+2
 13149  000E0A  ECFB  F00C         	call	___ftdiv	;wreg free
 13150  000E0E  C029  F097         	movff	?___ftdiv,?_exp
 13151  000E12  C02A  F098         	movff	?___ftdiv+1,?_exp+1
 13152  000E16  C02B  F099         	movff	?___ftdiv+2,?_exp+2
 13153  000E1A  0012               	return	
 13154  000E1C                     l2041:
 13155                           
 13156                           ; BSR set to: 0
 13157  000E1C  C097  F097         	movff	exp@x,?_exp
 13158  000E20  C098  F098         	movff	exp@x+1,?_exp+1
 13159  000E24  C099  F099         	movff	exp@x+2,?_exp+2
 13160  000E28  0012               	return		;funcret
 13161  000E2A                     __end_of_exp:
 13162                           	opt stack 0
 13163                           tosu	equ	0xFFF
 13164                           tosh	equ	0xFFE
 13165                           tosl	equ	0xFFD
 13166                           pclath	equ	0xFFA
 13167                           tblptru	equ	0xFF8
 13168                           tblptrh	equ	0xFF7
 13169                           tblptrl	equ	0xFF6
 13170                           tablat	equ	0xFF5
 13171                           prodh	equ	0xFF4
 13172                           prodl	equ	0xFF3
 13173                           intcon	equ	0xFF2
 13174                           intcon2	equ	0xFF1
 13175                           postinc0	equ	0xFEE
 13176                           wreg	equ	0xFE8
 13177                           indf1	equ	0xFE7
 13178                           postdec1	equ	0xFE5
 13179                           fsr1h	equ	0xFE2
 13180                           fsr1l	equ	0xFE1
 13181                           indf2	equ	0xFDF
 13182                           postinc2	equ	0xFDE
 13183                           postdec2	equ	0xFDD
 13184                           fsr2h	equ	0xFDA
 13185                           fsr2l	equ	0xFD9
 13186                           status	equ	0xFD8
 13187                           
 13188 ;; *************** function _ldexp *****************
 13189 ;; Defined at:
 13190 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 13191 ;; Parameters:    Size  Location     Type
 13192 ;;  value           3   46[BANK0 ] unsigned char 
 13193 ;;  newexp          2   49[BANK0 ] int 
 13194 ;; Auto vars:     Size  Location     Type
 13195 ;;		None
 13196 ;; Return value:  Size  Location     Type
 13197 ;;                  3   46[BANK0 ] int 
 13198 ;; Registers used:
 13199 ;;		wreg, status,2, status,0
 13200 ;; Tracked objects:
 13201 ;;		On entry : 0/0
 13202 ;;		On exit  : 0/0
 13203 ;;		Unchanged: 0/0
 13204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13205 ;;      Params:         0       5       0       0       0       0       0
 13206 ;;      Locals:         0       0       0       0       0       0       0
 13207 ;;      Temps:          0       2       0       0       0       0       0
 13208 ;;      Totals:         0       7       0       0       0       0       0
 13209 ;;Total ram usage:        7 bytes
 13210 ;; Hardware stack levels used:    1
 13211 ;; Hardware stack levels required when called:    3
 13212 ;; This function calls:
 13213 ;;		Nothing
 13214 ;; This function is called by:
 13215 ;;		_exp
 13216 ;; This function uses a non-reentrant model
 13217 ;;
 13218                           
 13219                           	psect	text89
 13220  001D7A                     __ptext89:
 13221                           	opt stack 0
 13222  001D7A                     _ldexp:
 13223                           	opt stack 24
 13224                           
 13225                           ;incstack = 0
 13226  001D7A  0100               	movlb	0	; () banked
 13227  001D7C  518E               	movf	ldexp@value& (0+255),w,b
 13228  001D7E  118F               	iorwf	(ldexp@value+1)& (0+255),w,b
 13229  001D80  1190               	iorwf	(ldexp@value+2)& (0+255),w,b
 13230  001D82  A4D8               	btfss	status,2,c
 13231  001D84  D007               	goto	l2060
 13232                           
 13233                           ; BSR set to: 0
 13234  001D86  0E00               	movlw	0
 13235  001D88  6F8E               	movwf	?_ldexp& (0+255),b
 13236  001D8A  0E00               	movlw	0
 13237  001D8C  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 13238  001D8E  0E00               	movlw	0
 13239  001D90  6F90               	movwf	(?_ldexp+2)& (0+255),b
 13240                           
 13241                           ; BSR set to: 0
 13242  001D92  0012               	return	
 13243  001D94                     l2060:
 13244                           
 13245                           ; BSR set to: 0
 13246                           
 13247                           ; BSR set to: 0
 13248  001D94  5190               	movf	(ldexp@value+2)& (0+255),w,b
 13249  001D96  0B7F               	andlw	127
 13250  001D98  6F93               	movwf	??_ldexp& (0+255),b
 13251  001D9A  6B94               	clrf	(??_ldexp+1)& (0+255),b
 13252  001D9C  90D8               	bcf	status,0,c
 13253  001D9E  3793               	rlcf	??_ldexp& (0+255),f,b
 13254  001DA0  3794               	rlcf	(??_ldexp+1)& (0+255),f,b
 13255  001DA2  5193               	movf	??_ldexp& (0+255),w,b
 13256  001DA4  2791               	addwf	ldexp@newexp& (0+255),f,b
 13257  001DA6  5194               	movf	(??_ldexp+1)& (0+255),w,b
 13258  001DA8  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 13259  001DAA  AF8F               	btfss	(ldexp@value+1)& (0+255),7,b
 13260  001DAC  D003               	goto	u4340
 13261  001DAE  6B93               	clrf	??_ldexp& (0+255),b
 13262  001DB0  2B93               	incf	??_ldexp& (0+255),f,b
 13263  001DB2  D002               	goto	u4348
 13264  001DB4                     u4340:
 13265  001DB4  0100               	movlb	0	; () banked
 13266  001DB6  6B93               	clrf	??_ldexp& (0+255),b
 13267  001DB8                     u4348:
 13268  001DB8  5193               	movf	??_ldexp& (0+255),w,b
 13269  001DBA  2791               	addwf	ldexp@newexp& (0+255),f,b
 13270  001DBC  0E00               	movlw	0
 13271  001DBE  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 13272  001DC0  AF92               	btfss	(ldexp@newexp+1)& (0+255),7,b
 13273  001DC2  D00B               	goto	l2062
 13274                           
 13275                           ; BSR set to: 0
 13276  001DC4  0E00               	movlw	0
 13277  001DC6  6FC6               	movwf	(_errno+1)& (0+255),b
 13278  001DC8  0E22               	movlw	34
 13279  001DCA  6FC5               	movwf	_errno& (0+255),b
 13280  001DCC  0E00               	movlw	0
 13281  001DCE  6F8E               	movwf	?_ldexp& (0+255),b
 13282  001DD0  0E00               	movlw	0
 13283  001DD2  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 13284  001DD4  0E00               	movlw	0
 13285  001DD6                     L1:
 13286  001DD6  6F90               	movwf	(?_ldexp+2)& (0+255),b
 13287                           
 13288                           ; BSR set to: 0
 13289  001DD8  0012               	return	
 13290  001DDA                     l2062:
 13291                           
 13292                           ; BSR set to: 0
 13293                           
 13294                           ; BSR set to: 0
 13295  001DDA  BF92               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 13296  001DDC  D015               	goto	l2064
 13297  001DDE  0592               	decf	(ldexp@newexp+1)& (0+255),w,b
 13298  001DE0  A0D8               	btfss	status,0,c
 13299  001DE2  D012               	goto	l2064
 13300                           
 13301                           ; BSR set to: 0
 13302  001DE4  0E00               	movlw	0
 13303  001DE6  6FC6               	movwf	(_errno+1)& (0+255),b
 13304  001DE8  0E22               	movlw	34
 13305  001DEA  6FC5               	movwf	_errno& (0+255),b
 13306                           
 13307                           ; BSR set to: 0
 13308  001DEC  AF90               	btfss	(ldexp@value+2)& (0+255),7,b
 13309  001DEE  D006               	goto	l2065
 13310                           
 13311                           ; BSR set to: 0
 13312  001DF0  0EFF               	movlw	255
 13313  001DF2  6F8E               	movwf	?_ldexp& (0+255),b
 13314  001DF4  0E7F               	movlw	127
 13315  001DF6  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 13316  001DF8  0EFF               	movlw	255
 13317  001DFA  D7ED               	goto	L1
 13318  001DFC                     l2065:
 13319                           
 13320                           ; BSR set to: 0
 13321                           
 13322                           ; BSR set to: 0
 13323  001DFC  0EFF               	movlw	255
 13324  001DFE  6F8E               	movwf	?_ldexp& (0+255),b
 13325  001E00  0E7F               	movlw	127
 13326  001E02  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 13327  001E04  0E7F               	movlw	127
 13328  001E06  D7E7               	goto	L1
 13329  001E08                     l2064:
 13330                           
 13331                           ; BSR set to: 0
 13332                           
 13333                           ; BSR set to: 0
 13334  001E08  3592               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 13335  001E0A  3192               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 13336  001E0C  6F94               	movwf	(??_ldexp+1)& (0+255),b
 13337  001E0E  3191               	rrcf	ldexp@newexp& (0+255),w,b
 13338  001E10  6F93               	movwf	??_ldexp& (0+255),b
 13339  001E12  5190               	movf	(ldexp@value+2)& (0+255),w,b
 13340  001E14  1993               	xorwf	??_ldexp& (0+255),w,b
 13341  001E16  0B80               	andlw	-128
 13342  001E18  1993               	xorwf	??_ldexp& (0+255),w,b
 13343  001E1A  6F90               	movwf	(ldexp@value+2)& (0+255),b
 13344  001E1C  C091  F093         	movff	ldexp@newexp,??_ldexp
 13345  001E20  0E01               	movlw	1
 13346  001E22  1793               	andwf	??_ldexp& (0+255),f,b
 13347  001E24  3393               	rrcf	??_ldexp& (0+255),f,b
 13348  001E26  3393               	rrcf	??_ldexp& (0+255),f,b
 13349  001E28  518F               	movf	(ldexp@value+1)& (0+255),w,b
 13350  001E2A  1993               	xorwf	??_ldexp& (0+255),w,b
 13351  001E2C  0B7F               	andlw	-129
 13352  001E2E  1993               	xorwf	??_ldexp& (0+255),w,b
 13353  001E30  6F8F               	movwf	(ldexp@value+1)& (0+255),b
 13354                           
 13355                           ; BSR set to: 0
 13356                           
 13357                           ; BSR set to: 0
 13358                           
 13359                           ; BSR set to: 0
 13360  001E32  C08E  F08E         	movff	ldexp@value,?_ldexp
 13361  001E36  C08F  F08F         	movff	ldexp@value+1,?_ldexp+1
 13362  001E3A  C090  F090         	movff	ldexp@value+2,?_ldexp+2
 13363  001E3E  0012               	return	
 13364  001E40                     __end_of_ldexp:
 13365                           	opt stack 0
 13366                           tosu	equ	0xFFF
 13367                           tosh	equ	0xFFE
 13368                           tosl	equ	0xFFD
 13369                           pclath	equ	0xFFA
 13370                           tblptru	equ	0xFF8
 13371                           tblptrh	equ	0xFF7
 13372                           tblptrl	equ	0xFF6
 13373                           tablat	equ	0xFF5
 13374                           prodh	equ	0xFF4
 13375                           prodl	equ	0xFF3
 13376                           intcon	equ	0xFF2
 13377                           intcon2	equ	0xFF1
 13378                           postinc0	equ	0xFEE
 13379                           wreg	equ	0xFE8
 13380                           indf1	equ	0xFE7
 13381                           postdec1	equ	0xFE5
 13382                           fsr1h	equ	0xFE2
 13383                           fsr1l	equ	0xFE1
 13384                           indf2	equ	0xFDF
 13385                           postinc2	equ	0xFDE
 13386                           postdec2	equ	0xFDD
 13387                           fsr2h	equ	0xFDA
 13388                           fsr2l	equ	0xFD9
 13389                           status	equ	0xFD8
 13390                           
 13391 ;; *************** function _floor *****************
 13392 ;; Defined at:
 13393 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 13394 ;; Parameters:    Size  Location     Type
 13395 ;;  x               3   47[BANK0 ] int 
 13396 ;; Auto vars:     Size  Location     Type
 13397 ;;  i               3   50[BANK0 ] int 
 13398 ;;  expon           2   53[BANK0 ] int 
 13399 ;; Return value:  Size  Location     Type
 13400 ;;                  3   47[BANK0 ] int 
 13401 ;; Registers used:
 13402 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13403 ;; Tracked objects:
 13404 ;;		On entry : 0/0
 13405 ;;		On exit  : 0/0
 13406 ;;		Unchanged: 0/0
 13407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13408 ;;      Params:         0       3       0       0       0       0       0
 13409 ;;      Locals:         0       5       0       0       0       0       0
 13410 ;;      Temps:          0       0       0       0       0       0       0
 13411 ;;      Totals:         0       8       0       0       0       0       0
 13412 ;;Total ram usage:        8 bytes
 13413 ;; Hardware stack levels used:    1
 13414 ;; Hardware stack levels required when called:    5
 13415 ;; This function calls:
 13416 ;;		___altoft
 13417 ;;		___ftadd
 13418 ;;		___ftge
 13419 ;;		___fttol
 13420 ;;		_frexp
 13421 ;; This function is called by:
 13422 ;;		_exp
 13423 ;; This function uses a non-reentrant model
 13424 ;;
 13425                           
 13426                           	psect	text90
 13427  001BC2                     __ptext90:
 13428                           	opt stack 0
 13429  001BC2                     _floor:
 13430                           	opt stack 22
 13431                           
 13432                           ; BSR set to: 0
 13433                           ;incstack = 0
 13434  001BC2  C08F  F018         	movff	floor@x,frexp@value
 13435  001BC6  C090  F019         	movff	floor@x+1,frexp@value+1
 13436  001BCA  C091  F01A         	movff	floor@x+2,frexp@value+2
 13437  001BCE  0E95               	movlw	low floor@expon
 13438  001BD0  6E1B               	movwf	frexp@eptr,c
 13439  001BD2  0E00               	movlw	high floor@expon
 13440  001BD4  6E1C               	movwf	frexp@eptr+1,c
 13441  001BD6  ECC7  F011         	call	_frexp	;wreg free
 13442  001BDA  0100               	movlb	0	; () banked
 13443  001BDC  AF96               	btfss	(floor@expon+1)& (0+255),7,b
 13444  001BDE  D010               	goto	l2047
 13445                           
 13446                           ; BSR set to: 0
 13447  001BE0  AF91               	btfss	(floor@x+2)& (0+255),7,b
 13448  001BE2  D007               	goto	l2048
 13449                           
 13450                           ; BSR set to: 0
 13451  001BE4  0E00               	movlw	0
 13452  001BE6  6F8F               	movwf	?_floor& (0+255),b
 13453  001BE8  0E80               	movlw	128
 13454  001BEA  6F90               	movwf	(?_floor+1)& (0+255),b
 13455  001BEC  0EBF               	movlw	191
 13456  001BEE  6F91               	movwf	(?_floor+2)& (0+255),b
 13457                           
 13458                           ; BSR set to: 0
 13459  001BF0  0012               	return	
 13460  001BF2                     l2048:
 13461                           
 13462                           ; BSR set to: 0
 13463                           
 13464                           ; BSR set to: 0
 13465  001BF2  0E00               	movlw	0
 13466  001BF4  6F8F               	movwf	?_floor& (0+255),b
 13467  001BF6  0E00               	movlw	0
 13468  001BF8  6F90               	movwf	(?_floor+1)& (0+255),b
 13469  001BFA  0E00               	movlw	0
 13470  001BFC  6F91               	movwf	(?_floor+2)& (0+255),b
 13471                           
 13472                           ; BSR set to: 0
 13473  001BFE  0012               	return	
 13474  001C00                     l2047:
 13475                           
 13476                           ; BSR set to: 0
 13477                           
 13478                           ; BSR set to: 0
 13479  001C00  5196               	movf	(floor@expon+1)& (0+255),w,b
 13480  001C02  E104               	bnz	u7030
 13481  001C04  0E15               	movlw	21
 13482  001C06  5D95               	subwf	floor@expon& (0+255),w,b
 13483  001C08  A0D8               	btfss	status,0,c
 13484  001C0A  D007               	goto	l2050
 13485  001C0C                     u7030:
 13486                           
 13487                           ; BSR set to: 0
 13488  001C0C  C08F  F08F         	movff	floor@x,?_floor
 13489  001C10  C090  F090         	movff	floor@x+1,?_floor+1
 13490  001C14  C091  F091         	movff	floor@x+2,?_floor+2
 13491  001C18  0012               	return	
 13492  001C1A                     l2050:
 13493                           
 13494                           ; BSR set to: 0
 13495                           
 13496                           ; BSR set to: 0
 13497  001C1A  C08F  F078         	movff	floor@x,___fttol@f1
 13498  001C1E  C090  F079         	movff	floor@x+1,___fttol@f1+1
 13499  001C22  C091  F07A         	movff	floor@x+2,___fttol@f1+2
 13500  001C26  EC04  F00C         	call	___fttol	;wreg free
 13501  001C2A  C078  F087         	movff	?___fttol,___altoft@c
 13502  001C2E  C079  F088         	movff	?___fttol+1,___altoft@c+1
 13503  001C32  C07A  F089         	movff	?___fttol+2,___altoft@c+2
 13504  001C36  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
 13505  001C3A  EC19  F013         	call	___altoft	;wreg free
 13506  001C3E  C087  F092         	movff	?___altoft,floor@i
 13507  001C42  C088  F093         	movff	?___altoft+1,floor@i+1
 13508  001C46  C089  F094         	movff	?___altoft+2,floor@i+2
 13509  001C4A  C08F  F018         	movff	floor@x,___ftge@ff1
 13510  001C4E  C090  F019         	movff	floor@x+1,___ftge@ff1+1
 13511  001C52  C091  F01A         	movff	floor@x+2,___ftge@ff1+2
 13512  001C56  C092  F01B         	movff	floor@i,___ftge@ff2
 13513  001C5A  C093  F01C         	movff	floor@i+1,___ftge@ff2+1
 13514  001C5E  C094  F01D         	movff	floor@i+2,___ftge@ff2+2
 13515  001C62  EC0F  F012         	call	___ftge	;wreg free
 13516  001C66  B0D8               	btfsc	status,0,c
 13517  001C68  D016               	goto	l2051
 13518  001C6A  C092  F078         	movff	floor@i,___ftadd@f1
 13519  001C6E  C093  F079         	movff	floor@i+1,___ftadd@f1+1
 13520  001C72  C094  F07A         	movff	floor@i+2,___ftadd@f1+2
 13521  001C76  0E00               	movlw	0
 13522  001C78  0100               	movlb	0	; () banked
 13523  001C7A  6F7B               	movwf	___ftadd@f2& (0+255),b
 13524  001C7C  0E80               	movlw	128
 13525  001C7E  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 13526  001C80  0EBF               	movlw	191
 13527  001C82  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 13528  001C84  ECDB  F008         	call	___ftadd	;wreg free
 13529  001C88  C078  F08F         	movff	?___ftadd,?_floor
 13530  001C8C  C079  F090         	movff	?___ftadd+1,?_floor+1
 13531  001C90  C07A  F091         	movff	?___ftadd+2,?_floor+2
 13532  001C94  0012               	return	
 13533  001C96                     l2051:
 13534  001C96  C092  F08F         	movff	floor@i,?_floor
 13535  001C9A  C093  F090         	movff	floor@i+1,?_floor+1
 13536  001C9E  C094  F091         	movff	floor@i+2,?_floor+2
 13537  001CA2  0012               	return		;funcret
 13538  001CA4                     __end_of_floor:
 13539                           	opt stack 0
 13540                           tosu	equ	0xFFF
 13541                           tosh	equ	0xFFE
 13542                           tosl	equ	0xFFD
 13543                           pclath	equ	0xFFA
 13544                           tblptru	equ	0xFF8
 13545                           tblptrh	equ	0xFF7
 13546                           tblptrl	equ	0xFF6
 13547                           tablat	equ	0xFF5
 13548                           prodh	equ	0xFF4
 13549                           prodl	equ	0xFF3
 13550                           intcon	equ	0xFF2
 13551                           intcon2	equ	0xFF1
 13552                           postinc0	equ	0xFEE
 13553                           wreg	equ	0xFE8
 13554                           indf1	equ	0xFE7
 13555                           postdec1	equ	0xFE5
 13556                           fsr1h	equ	0xFE2
 13557                           fsr1l	equ	0xFE1
 13558                           indf2	equ	0xFDF
 13559                           postinc2	equ	0xFDE
 13560                           postdec2	equ	0xFDD
 13561                           fsr2h	equ	0xFDA
 13562                           fsr2l	equ	0xFD9
 13563                           status	equ	0xFD8
 13564                           
 13565 ;; *************** function _frexp *****************
 13566 ;; Defined at:
 13567 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 13568 ;; Parameters:    Size  Location     Type
 13569 ;;  value           3   23[COMRAM] int 
 13570 ;;  eptr            2   26[COMRAM] PTR int 
 13571 ;;		 -> log@exponent(2), floor@expon(2), 
 13572 ;; Auto vars:     Size  Location     Type
 13573 ;;		None
 13574 ;; Return value:  Size  Location     Type
 13575 ;;                  3   23[COMRAM] PTR int 
 13576 ;; Registers used:
 13577 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13578 ;; Tracked objects:
 13579 ;;		On entry : 0/0
 13580 ;;		On exit  : 0/0
 13581 ;;		Unchanged: 0/0
 13582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13583 ;;      Params:         5       0       0       0       0       0       0
 13584 ;;      Locals:         0       0       0       0       0       0       0
 13585 ;;      Temps:          2       0       0       0       0       0       0
 13586 ;;      Totals:         7       0       0       0       0       0       0
 13587 ;;Total ram usage:        7 bytes
 13588 ;; Hardware stack levels used:    1
 13589 ;; Hardware stack levels required when called:    3
 13590 ;; This function calls:
 13591 ;;		Nothing
 13592 ;; This function is called by:
 13593 ;;		_floor
 13594 ;;		_log
 13595 ;; This function uses a non-reentrant model
 13596 ;;
 13597                           
 13598                           	psect	text91
 13599  00238E                     __ptext91:
 13600                           	opt stack 0
 13601  00238E                     _frexp:
 13602                           	opt stack 24
 13603                           
 13604                           ;incstack = 0
 13605  00238E  5018               	movf	frexp@value,w,c
 13606  002390  1019               	iorwf	frexp@value+1,w,c
 13607  002392  101A               	iorwf	frexp@value+2,w,c
 13608  002394  A4D8               	btfss	status,2,c
 13609  002396  D00F               	goto	l2056
 13610  002398  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13611  00239C  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13612  0023A0  0E00               	movlw	0
 13613  0023A2  6EDE               	movwf	postinc2,c
 13614  0023A4  0E00               	movlw	0
 13615  0023A6  6EDD               	movwf	postdec2,c
 13616  0023A8  0E00               	movlw	0
 13617  0023AA  6E18               	movwf	?_frexp,c
 13618  0023AC  0E00               	movlw	0
 13619  0023AE  6E19               	movwf	?_frexp+1,c
 13620  0023B0  0E00               	movlw	0
 13621  0023B2  6E1A               	movwf	?_frexp+2,c
 13622  0023B4  0012               	return	
 13623  0023B6                     l2056:
 13624  0023B6  501A               	movf	frexp@value+2,w,c
 13625  0023B8  0B7F               	andlw	127
 13626  0023BA  6E1D               	movwf	??_frexp& (0+255),c
 13627  0023BC  6A1E               	clrf	(??_frexp+1)& (0+255),c
 13628  0023BE  90D8               	bcf	status,0,c
 13629  0023C0  361D               	rlcf	??_frexp,f,c
 13630  0023C2  361E               	rlcf	??_frexp+1,f,c
 13631  0023C4  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13632  0023C8  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13633  0023CC  C01D  FFDE         	movff	??_frexp,postinc2
 13634  0023D0  C01E  FFDD         	movff	??_frexp+1,postdec2
 13635  0023D4  AE19               	btfss	frexp@value+1,7,c
 13636  0023D6  D003               	goto	u4000
 13637  0023D8  6A1D               	clrf	??_frexp& (0+255),c
 13638  0023DA  2A1D               	incf	??_frexp& (0+255),f,c
 13639  0023DC  D001               	goto	u4008
 13640  0023DE                     u4000:
 13641  0023DE  6A1D               	clrf	??_frexp& (0+255),c
 13642  0023E0                     u4008:
 13643  0023E0  501D               	movf	??_frexp,w,c
 13644  0023E2  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13645  0023E6  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13646  0023EA  12DE               	iorwf	postinc2,f,c
 13647  0023EC  0E00               	movlw	0
 13648  0023EE  12DD               	iorwf	postdec2,f,c
 13649  0023F0  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13650  0023F4  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13651  0023F8  0E82               	movlw	130
 13652  0023FA  26DE               	addwf	postinc2,f,c
 13653  0023FC  0EFF               	movlw	255
 13654  0023FE  22DD               	addwfc	postdec2,f,c
 13655  002400  801A               	bsf	frexp@value+2,0,c
 13656  002402  821A               	bsf	frexp@value+2,1,c
 13657  002404  841A               	bsf	frexp@value+2,2,c
 13658  002406  861A               	bsf	frexp@value+2,3,c
 13659  002408  881A               	bsf	frexp@value+2,4,c
 13660  00240A  8A1A               	bsf	frexp@value+2,5,c
 13661  00240C  9C1A               	bcf	frexp@value+2,6,c
 13662  00240E  9E19               	bcf	frexp@value+1,7,c
 13663  002410  C018  F018         	movff	frexp@value,?_frexp
 13664  002414  C019  F019         	movff	frexp@value+1,?_frexp+1
 13665  002418  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 13666  00241C  0012               	return	
 13667  00241E                     __end_of_frexp:
 13668                           	opt stack 0
 13669                           tosu	equ	0xFFF
 13670                           tosh	equ	0xFFE
 13671                           tosl	equ	0xFFD
 13672                           pclath	equ	0xFFA
 13673                           tblptru	equ	0xFF8
 13674                           tblptrh	equ	0xFF7
 13675                           tblptrl	equ	0xFF6
 13676                           tablat	equ	0xFF5
 13677                           prodh	equ	0xFF4
 13678                           prodl	equ	0xFF3
 13679                           intcon	equ	0xFF2
 13680                           intcon2	equ	0xFF1
 13681                           postinc0	equ	0xFEE
 13682                           wreg	equ	0xFE8
 13683                           indf1	equ	0xFE7
 13684                           postdec1	equ	0xFE5
 13685                           fsr1h	equ	0xFE2
 13686                           fsr1l	equ	0xFE1
 13687                           indf2	equ	0xFDF
 13688                           postinc2	equ	0xFDE
 13689                           postdec2	equ	0xFDD
 13690                           fsr2h	equ	0xFDA
 13691                           fsr2l	equ	0xFD9
 13692                           status	equ	0xFD8
 13693                           
 13694 ;; *************** function ___fttol *****************
 13695 ;; Defined at:
 13696 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 13697 ;; Parameters:    Size  Location     Type
 13698 ;;  f1              3   24[BANK0 ] float 
 13699 ;; Auto vars:     Size  Location     Type
 13700 ;;  lval            4   34[BANK0 ] unsigned long 
 13701 ;;  exp1            1   38[BANK0 ] unsigned char 
 13702 ;;  sign1           1   33[BANK0 ] unsigned char 
 13703 ;; Return value:  Size  Location     Type
 13704 ;;                  4   24[BANK0 ] long 
 13705 ;; Registers used:
 13706 ;;		wreg, status,2, status,0
 13707 ;; Tracked objects:
 13708 ;;		On entry : 0/0
 13709 ;;		On exit  : 0/0
 13710 ;;		Unchanged: 0/0
 13711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13712 ;;      Params:         0       4       0       0       0       0       0
 13713 ;;      Locals:         0       6       0       0       0       0       0
 13714 ;;      Temps:          0       5       0       0       0       0       0
 13715 ;;      Totals:         0      15       0       0       0       0       0
 13716 ;;Total ram usage:       15 bytes
 13717 ;; Hardware stack levels used:    1
 13718 ;; Hardware stack levels required when called:    3
 13719 ;; This function calls:
 13720 ;;		Nothing
 13721 ;; This function is called by:
 13722 ;;		_AdcConvert
 13723 ;;		_pow
 13724 ;;		_exp
 13725 ;;		_floor
 13726 ;; This function uses a non-reentrant model
 13727 ;;
 13728                           
 13729                           	psect	text92
 13730  001808                     __ptext92:
 13731                           	opt stack 0
 13732  001808                     ___fttol:
 13733                           	opt stack 23
 13734                           
 13735                           ;incstack = 0
 13736  001808  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 13737  00180C  0100               	movlb	0	; () banked
 13738  00180E  6B7D               	clrf	(??___fttol+1)& (0+255),b
 13739  001810  6B7E               	clrf	(??___fttol+2)& (0+255),b
 13740  001812  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 13741  001814  377C               	rlcf	??___fttol& (0+255),f,b
 13742  001816  E301               	bnc	u3911
 13743  001818  817D               	bsf	(??___fttol+1)& (0+255),0,b
 13744  00181A                     u3911:
 13745  00181A  517C               	movf	??___fttol& (0+255),w,b
 13746  00181C  6F86               	movwf	___fttol@exp1& (0+255),b
 13747  00181E  5186               	movf	___fttol@exp1& (0+255),w,b
 13748  001820  A4D8               	btfss	status,2,c
 13749  001822  D009               	goto	l1713
 13750                           
 13751                           ; BSR set to: 0
 13752  001824  0E00               	movlw	0
 13753  001826  6F78               	movwf	?___fttol& (0+255),b
 13754  001828  0E00               	movlw	0
 13755  00182A  6F79               	movwf	(?___fttol+1)& (0+255),b
 13756  00182C  0E00               	movlw	0
 13757  00182E  6F7A               	movwf	(?___fttol+2)& (0+255),b
 13758  001830  0E00               	movlw	0
 13759  001832  6F7B               	movwf	(?___fttol+3)& (0+255),b
 13760                           
 13761                           ; BSR set to: 0
 13762  001834  0012               	return	
 13763  001836                     l1713:
 13764                           
 13765                           ; BSR set to: 0
 13766                           
 13767                           ; BSR set to: 0
 13768  001836  0E17               	movlw	23
 13769  001838  6F7C               	movwf	??___fttol& (0+255),b
 13770  00183A  C078  F07D         	movff	___fttol@f1,??___fttol+1
 13771  00183E  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 13772  001842  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 13773  001846  297C               	incf	??___fttol& (0+255),w,b
 13774  001848  6F80               	movwf	(??___fttol+4)& (0+255),b
 13775  00184A  D004               	goto	u3930
 13776  00184C                     u3935:
 13777  00184C  90D8               	bcf	status,0,c
 13778  00184E  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 13779  001850  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 13780  001852  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 13781  001854                     u3930:
 13782  001854  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 13783  001856  D7FA               	goto	u3935
 13784  001858  0100               	movlb	0	; () banked
 13785  00185A  517D               	movf	(??___fttol+1)& (0+255),w,b
 13786  00185C  6F81               	movwf	___fttol@sign1& (0+255),b
 13787                           
 13788                           ; BSR set to: 0
 13789  00185E  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 13790                           
 13791                           ; BSR set to: 0
 13792  001860  0EFF               	movlw	255
 13793  001862  1778               	andwf	___fttol@f1& (0+255),f,b
 13794  001864  0EFF               	movlw	255
 13795  001866  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 13796  001868  0E00               	movlw	0
 13797  00186A  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 13798                           
 13799                           ; BSR set to: 0
 13800  00186C  5178               	movf	___fttol@f1& (0+255),w,b
 13801  00186E  6F82               	movwf	___fttol@lval& (0+255),b
 13802  001870  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 13803  001872  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 13804  001874  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 13805  001876  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 13806  001878  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 13807                           
 13808                           ; BSR set to: 0
 13809  00187A  0E8E               	movlw	142
 13810  00187C  5F86               	subwf	___fttol@exp1& (0+255),f,b
 13811                           
 13812                           ; BSR set to: 0
 13813  00187E  AF86               	btfss	___fttol@exp1& (0+255),7,b
 13814  001880  D016               	goto	l1715
 13815                           
 13816                           ; BSR set to: 0
 13817  001882  5186               	movf	___fttol@exp1& (0+255),w,b
 13818  001884  0A80               	xorlw	128
 13819  001886  0F8F               	addlw	143
 13820  001888  B0D8               	btfsc	status,0,c
 13821  00188A  D009               	goto	l1716
 13822                           
 13823                           ; BSR set to: 0
 13824  00188C  0E00               	movlw	0
 13825  00188E  6F78               	movwf	?___fttol& (0+255),b
 13826  001890  0E00               	movlw	0
 13827  001892  6F79               	movwf	(?___fttol+1)& (0+255),b
 13828  001894  0E00               	movlw	0
 13829  001896  6F7A               	movwf	(?___fttol+2)& (0+255),b
 13830  001898  0E00               	movlw	0
 13831  00189A  6F7B               	movwf	(?___fttol+3)& (0+255),b
 13832                           
 13833                           ; BSR set to: 0
 13834  00189C  0012               	return	
 13835  00189E                     l1716:
 13836                           
 13837                           ; BSR set to: 0
 13838                           
 13839                           ; BSR set to: 0
 13840                           
 13841                           ; BSR set to: 0
 13842  00189E  90D8               	bcf	status,0,c
 13843  0018A0  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 13844  0018A2  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 13845  0018A4  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 13846  0018A6  3382               	rrcf	___fttol@lval& (0+255),f,b
 13847                           
 13848                           ; BSR set to: 0
 13849  0018A8  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 13850  0018AA  D7F9               	goto	l1716
 13851                           
 13852                           ; BSR set to: 0
 13853  0018AC  D015               	goto	u3970
 13854  0018AE                     l1715:
 13855                           
 13856                           ; BSR set to: 0
 13857                           
 13858                           ; BSR set to: 0
 13859  0018AE  0E17               	movlw	23
 13860  0018B0  6586               	cpfsgt	___fttol@exp1& (0+255),b
 13861  0018B2  D00F               	goto	l1721
 13862                           
 13863                           ; BSR set to: 0
 13864  0018B4  0E00               	movlw	0
 13865  0018B6  6F78               	movwf	?___fttol& (0+255),b
 13866  0018B8  0E00               	movlw	0
 13867  0018BA  6F79               	movwf	(?___fttol+1)& (0+255),b
 13868  0018BC  0E00               	movlw	0
 13869  0018BE  6F7A               	movwf	(?___fttol+2)& (0+255),b
 13870  0018C0  0E00               	movlw	0
 13871  0018C2  6F7B               	movwf	(?___fttol+3)& (0+255),b
 13872                           
 13873                           ; BSR set to: 0
 13874  0018C4  0012               	return	
 13875  0018C6                     
 13876                           ; BSR set to: 0
 13877                           
 13878                           ; BSR set to: 0
 13879  0018C6  90D8               	bcf	status,0,c
 13880  0018C8  3782               	rlcf	___fttol@lval& (0+255),f,b
 13881  0018CA  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 13882  0018CC  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 13883  0018CE  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 13884  0018D0  0786               	decf	___fttol@exp1& (0+255),f,b
 13885  0018D2                     l1721:
 13886                           
 13887                           ; BSR set to: 0
 13888                           
 13889                           ; BSR set to: 0
 13890  0018D2  5186               	movf	___fttol@exp1& (0+255),w,b
 13891  0018D4  A4D8               	btfss	status,2,c
 13892  0018D6  D7F7               	goto	l1722
 13893  0018D8                     u3970:
 13894                           
 13895                           ; BSR set to: 0
 13896                           
 13897                           ; BSR set to: 0
 13898                           
 13899                           ; BSR set to: 0
 13900  0018D8  5181               	movf	___fttol@sign1& (0+255),w,b
 13901  0018DA  B4D8               	btfsc	status,2,c
 13902  0018DC  D008               	goto	l1724
 13903                           
 13904                           ; BSR set to: 0
 13905  0018DE  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 13906  0018E0  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 13907  0018E2  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 13908  0018E4  6D82               	negf	___fttol@lval& (0+255),b
 13909  0018E6  0E00               	movlw	0
 13910  0018E8  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 13911  0018EA  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 13912  0018EC  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 13913  0018EE                     l1724:
 13914                           
 13915                           ; BSR set to: 0
 13916                           
 13917                           ; BSR set to: 0
 13918  0018EE  C082  F078         	movff	___fttol@lval,?___fttol
 13919  0018F2  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 13920  0018F6  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 13921  0018FA  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 13922  0018FE  0012               	return	
 13923  001900                     __end_of___fttol:
 13924                           	opt stack 0
 13925                           tosu	equ	0xFFF
 13926                           tosh	equ	0xFFE
 13927                           tosl	equ	0xFFD
 13928                           pclath	equ	0xFFA
 13929                           tblptru	equ	0xFF8
 13930                           tblptrh	equ	0xFF7
 13931                           tblptrl	equ	0xFF6
 13932                           tablat	equ	0xFF5
 13933                           prodh	equ	0xFF4
 13934                           prodl	equ	0xFF3
 13935                           intcon	equ	0xFF2
 13936                           intcon2	equ	0xFF1
 13937                           postinc0	equ	0xFEE
 13938                           wreg	equ	0xFE8
 13939                           indf1	equ	0xFE7
 13940                           postdec1	equ	0xFE5
 13941                           fsr1h	equ	0xFE2
 13942                           fsr1l	equ	0xFE1
 13943                           indf2	equ	0xFDF
 13944                           postinc2	equ	0xFDE
 13945                           postdec2	equ	0xFDD
 13946                           fsr2h	equ	0xFDA
 13947                           fsr2l	equ	0xFD9
 13948                           status	equ	0xFD8
 13949                           
 13950 ;; *************** function ___ftge *****************
 13951 ;; Defined at:
 13952 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 13953 ;; Parameters:    Size  Location     Type
 13954 ;;  ff1             3   23[COMRAM] float 
 13955 ;;  ff2             3   26[COMRAM] float 
 13956 ;; Auto vars:     Size  Location     Type
 13957 ;;		None
 13958 ;; Return value:  Size  Location     Type
 13959 ;;		None               void
 13960 ;; Registers used:
 13961 ;;		wreg, status,2, status,0
 13962 ;; Tracked objects:
 13963 ;;		On entry : 0/0
 13964 ;;		On exit  : 0/0
 13965 ;;		Unchanged: 0/0
 13966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13967 ;;      Params:         6       0       0       0       0       0       0
 13968 ;;      Locals:         0       0       0       0       0       0       0
 13969 ;;      Temps:          3       0       0       0       0       0       0
 13970 ;;      Totals:         9       0       0       0       0       0       0
 13971 ;;Total ram usage:        9 bytes
 13972 ;; Hardware stack levels used:    1
 13973 ;; Hardware stack levels required when called:    3
 13974 ;; This function calls:
 13975 ;;		Nothing
 13976 ;; This function is called by:
 13977 ;;		_CheckFlashPrecentage
 13978 ;;		_pow
 13979 ;;		_exp
 13980 ;;		_floor
 13981 ;; This function uses a non-reentrant model
 13982 ;;
 13983                           
 13984                           	psect	text93
 13985  00241E                     __ptext93:
 13986                           	opt stack 0
 13987  00241E                     ___ftge:
 13988                           	opt stack 26
 13989                           
 13990                           ; BSR set to: 0
 13991                           ;incstack = 0
 13992  00241E  AE1A               	btfss	___ftge@ff1+2,7,c
 13993  002420  D016               	goto	l1685
 13994  002422  C018  F01E         	movff	___ftge@ff1,??___ftge
 13995  002426  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 13996  00242A  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 13997  00242E  1E1E               	comf	??___ftge,f,c
 13998  002430  1E1F               	comf	??___ftge+1,f,c
 13999  002432  1E20               	comf	??___ftge+2,f,c
 14000  002434  2A1E               	incf	??___ftge,f,c
 14001  002436  0E00               	movlw	0
 14002  002438  221F               	addwfc	??___ftge+1,f,c
 14003  00243A  2220               	addwfc	??___ftge+2,f,c
 14004  00243C  0E00               	movlw	0
 14005  00243E  241E               	addwf	??___ftge,w,c
 14006  002440  6E18               	movwf	___ftge@ff1,c
 14007  002442  0E00               	movlw	0
 14008  002444  201F               	addwfc	??___ftge+1,w,c
 14009  002446  6E19               	movwf	___ftge@ff1+1,c
 14010  002448  0E80               	movlw	128
 14011  00244A  2020               	addwfc	??___ftge+2,w,c
 14012  00244C  6E1A               	movwf	___ftge@ff1+2,c
 14013  00244E                     l1685:
 14014  00244E  AE1D               	btfss	___ftge@ff2+2,7,c
 14015  002450  D016               	goto	l1686
 14016  002452  C01B  F01E         	movff	___ftge@ff2,??___ftge
 14017  002456  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 14018  00245A  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 14019  00245E  1E1E               	comf	??___ftge,f,c
 14020  002460  1E1F               	comf	??___ftge+1,f,c
 14021  002462  1E20               	comf	??___ftge+2,f,c
 14022  002464  2A1E               	incf	??___ftge,f,c
 14023  002466  0E00               	movlw	0
 14024  002468  221F               	addwfc	??___ftge+1,f,c
 14025  00246A  2220               	addwfc	??___ftge+2,f,c
 14026  00246C  0E00               	movlw	0
 14027  00246E  241E               	addwf	??___ftge,w,c
 14028  002470  6E1B               	movwf	___ftge@ff2,c
 14029  002472  0E00               	movlw	0
 14030  002474  201F               	addwfc	??___ftge+1,w,c
 14031  002476  6E1C               	movwf	___ftge@ff2+1,c
 14032  002478  0E80               	movlw	128
 14033  00247A  2020               	addwfc	??___ftge+2,w,c
 14034  00247C  6E1D               	movwf	___ftge@ff2+2,c
 14035  00247E                     l1686:
 14036  00247E  0E00               	movlw	0
 14037  002480  1A18               	xorwf	___ftge@ff1,f,c
 14038  002482  0E00               	movlw	0
 14039  002484  1A19               	xorwf	___ftge@ff1+1,f,c
 14040  002486  0E80               	movlw	128
 14041  002488  1A1A               	xorwf	___ftge@ff1+2,f,c
 14042  00248A  0E00               	movlw	0
 14043  00248C  1A1B               	xorwf	___ftge@ff2,f,c
 14044  00248E  0E00               	movlw	0
 14045  002490  1A1C               	xorwf	___ftge@ff2+1,f,c
 14046  002492  0E80               	movlw	128
 14047  002494  1A1D               	xorwf	___ftge@ff2+2,f,c
 14048  002496  501B               	movf	___ftge@ff2,w,c
 14049  002498  5C18               	subwf	___ftge@ff1,w,c
 14050  00249A  501C               	movf	___ftge@ff2+1,w,c
 14051  00249C  5819               	subwfb	___ftge@ff1+1,w,c
 14052  00249E  501D               	movf	___ftge@ff2+2,w,c
 14053  0024A0  581A               	subwfb	___ftge@ff1+2,w,c
 14054  0024A2  B0D8               	btfsc	status,0,c
 14055  0024A4  D002               	goto	l4321
 14056  0024A6  90D8               	bcf	status,0,c
 14057  0024A8  0012               	return	
 14058  0024AA                     l4321:
 14059  0024AA  80D8               	bsf	status,0,c
 14060  0024AC  0012               	return	
 14061  0024AE                     __end_of___ftge:
 14062                           	opt stack 0
 14063                           tosu	equ	0xFFF
 14064                           tosh	equ	0xFFE
 14065                           tosl	equ	0xFFD
 14066                           pclath	equ	0xFFA
 14067                           tblptru	equ	0xFF8
 14068                           tblptrh	equ	0xFF7
 14069                           tblptrl	equ	0xFF6
 14070                           tablat	equ	0xFF5
 14071                           prodh	equ	0xFF4
 14072                           prodl	equ	0xFF3
 14073                           intcon	equ	0xFF2
 14074                           intcon2	equ	0xFF1
 14075                           postinc0	equ	0xFEE
 14076                           wreg	equ	0xFE8
 14077                           indf1	equ	0xFE7
 14078                           postdec1	equ	0xFE5
 14079                           fsr1h	equ	0xFE2
 14080                           fsr1l	equ	0xFE1
 14081                           indf2	equ	0xFDF
 14082                           postinc2	equ	0xFDE
 14083                           postdec2	equ	0xFDD
 14084                           fsr2h	equ	0xFDA
 14085                           fsr2l	equ	0xFD9
 14086                           status	equ	0xFD8
 14087                           
 14088 ;; *************** function ___altoft *****************
 14089 ;; Defined at:
 14090 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 14091 ;; Parameters:    Size  Location     Type
 14092 ;;  c               4   39[BANK0 ] long 
 14093 ;; Auto vars:     Size  Location     Type
 14094 ;;  sign            1   47[COMRAM] unsigned char 
 14095 ;;  exp             1   46[COMRAM] unsigned char 
 14096 ;; Return value:  Size  Location     Type
 14097 ;;                  3   39[BANK0 ] float 
 14098 ;; Registers used:
 14099 ;;		wreg, status,2, status,0, cstack
 14100 ;; Tracked objects:
 14101 ;;		On entry : 0/0
 14102 ;;		On exit  : 0/0
 14103 ;;		Unchanged: 0/0
 14104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14105 ;;      Params:         0       4       0       0       0       0       0
 14106 ;;      Locals:         2       0       0       0       0       0       0
 14107 ;;      Temps:          0       4       0       0       0       0       0
 14108 ;;      Totals:         2       8       0       0       0       0       0
 14109 ;;Total ram usage:       10 bytes
 14110 ;; Hardware stack levels used:    1
 14111 ;; Hardware stack levels required when called:    4
 14112 ;; This function calls:
 14113 ;;		___ftpack
 14114 ;; This function is called by:
 14115 ;;		_floor
 14116 ;; This function uses a non-reentrant model
 14117 ;;
 14118                           
 14119                           	psect	text94
 14120  002632                     __ptext94:
 14121                           	opt stack 0
 14122  002632                     ___altoft:
 14123                           	opt stack 22
 14124                           
 14125                           ;incstack = 0
 14126  002632  0E00               	movlw	0
 14127  002634  6E30               	movwf	___altoft@sign,c
 14128  002636  0E8E               	movlw	142
 14129  002638  6E2F               	movwf	___altoft@exp,c
 14130  00263A  0100               	movlb	0	; () banked
 14131  00263C  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
 14132  00263E  D011               	goto	l1483
 14133                           
 14134                           ; BSR set to: 0
 14135  002640  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
 14136  002642  1F89               	comf	(___altoft@c+2)& (0+255),f,b
 14137  002644  1F88               	comf	(___altoft@c+1)& (0+255),f,b
 14138  002646  6D87               	negf	___altoft@c& (0+255),b
 14139  002648  0E00               	movlw	0
 14140  00264A  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
 14141  00264C  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
 14142  00264E  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
 14143                           
 14144                           ; BSR set to: 0
 14145  002650  0E01               	movlw	1
 14146  002652  6E30               	movwf	___altoft@sign,c
 14147                           
 14148                           ; BSR set to: 0
 14149  002654  D006               	goto	l1483
 14150  002656                     
 14151                           ; BSR set to: 0
 14152                           
 14153                           ; BSR set to: 0
 14154  002656  90D8               	bcf	status,0,c
 14155  002658  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
 14156  00265A  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
 14157  00265C  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
 14158  00265E  3387               	rrcf	___altoft@c& (0+255),f,b
 14159  002660  2A2F               	incf	___altoft@exp,f,c
 14160  002662                     l1483:
 14161                           
 14162                           ; BSR set to: 0
 14163                           
 14164                           ; BSR set to: 0
 14165  002662  0E00               	movlw	0
 14166  002664  1587               	andwf	___altoft@c& (0+255),w,b
 14167  002666  6F8B               	movwf	??___altoft& (0+255),b
 14168  002668  0E00               	movlw	0
 14169  00266A  1588               	andwf	(___altoft@c+1)& (0+255),w,b
 14170  00266C  6F8C               	movwf	(??___altoft+1)& (0+255),b
 14171  00266E  0E00               	movlw	0
 14172  002670  1589               	andwf	(___altoft@c+2)& (0+255),w,b
 14173  002672  6F8D               	movwf	(??___altoft+2)& (0+255),b
 14174  002674  0EFF               	movlw	255
 14175  002676  158A               	andwf	(___altoft@c+3)& (0+255),w,b
 14176  002678  6F8E               	movwf	(??___altoft+3)& (0+255),b
 14177  00267A  518B               	movf	??___altoft& (0+255),w,b
 14178  00267C  118C               	iorwf	(??___altoft+1)& (0+255),w,b
 14179  00267E  118D               	iorwf	(??___altoft+2)& (0+255),w,b
 14180  002680  118E               	iorwf	(??___altoft+3)& (0+255),w,b
 14181  002682  A4D8               	btfss	status,2,c
 14182  002684  D7E8               	goto	l1484
 14183                           
 14184                           ; BSR set to: 0
 14185                           
 14186                           ; BSR set to: 0
 14187  002686  C087  F018         	movff	___altoft@c,___ftpack@arg
 14188  00268A  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
 14189  00268E  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 14190  002692  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 14191  002696  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 14192  00269A  EC92  F010         	call	___ftpack	;wreg free
 14193  00269E  C018  F087         	movff	?___ftpack,?___altoft
 14194  0026A2  C019  F088         	movff	?___ftpack+1,?___altoft+1
 14195  0026A6  C01A  F089         	movff	?___ftpack+2,?___altoft+2
 14196  0026AA  0012               	return	
 14197  0026AC                     __end_of___altoft:
 14198                           	opt stack 0
 14199                           tosu	equ	0xFFF
 14200                           tosh	equ	0xFFE
 14201                           tosl	equ	0xFFD
 14202                           pclath	equ	0xFFA
 14203                           tblptru	equ	0xFF8
 14204                           tblptrh	equ	0xFF7
 14205                           tblptrl	equ	0xFF6
 14206                           tablat	equ	0xFF5
 14207                           prodh	equ	0xFF4
 14208                           prodl	equ	0xFF3
 14209                           intcon	equ	0xFF2
 14210                           intcon2	equ	0xFF1
 14211                           postinc0	equ	0xFEE
 14212                           wreg	equ	0xFE8
 14213                           indf1	equ	0xFE7
 14214                           postdec1	equ	0xFE5
 14215                           fsr1h	equ	0xFE2
 14216                           fsr1l	equ	0xFE1
 14217                           indf2	equ	0xFDF
 14218                           postinc2	equ	0xFDE
 14219                           postdec2	equ	0xFDD
 14220                           fsr2h	equ	0xFDA
 14221                           fsr2l	equ	0xFD9
 14222                           status	equ	0xFD8
 14223                           
 14224 ;; *************** function _eval_poly *****************
 14225 ;; Defined at:
 14226 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 14227 ;; Parameters:    Size  Location     Type
 14228 ;;  x               3   36[BANK0 ] float 
 14229 ;;  d               2   39[BANK0 ] PTR const 
 14230 ;;		 -> log@coeff(27), exp@coeff(30), 
 14231 ;;  n               2   41[BANK0 ] int 
 14232 ;; Auto vars:     Size  Location     Type
 14233 ;;  res             3   43[BANK0 ] int 
 14234 ;; Return value:  Size  Location     Type
 14235 ;;                  3   36[BANK0 ] int 
 14236 ;; Registers used:
 14237 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14238 ;; Tracked objects:
 14239 ;;		On entry : 0/0
 14240 ;;		On exit  : 0/0
 14241 ;;		Unchanged: 0/0
 14242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14243 ;;      Params:         0       7       0       0       0       0       0
 14244 ;;      Locals:         0       3       0       0       0       0       0
 14245 ;;      Temps:          2       0       0       0       0       0       0
 14246 ;;      Totals:         2      10       0       0       0       0       0
 14247 ;;Total ram usage:       12 bytes
 14248 ;; Hardware stack levels used:    1
 14249 ;; Hardware stack levels required when called:    5
 14250 ;; This function calls:
 14251 ;;		___ftadd
 14252 ;;		___ftmul
 14253 ;;		___wmul
 14254 ;; This function is called by:
 14255 ;;		_exp
 14256 ;;		_log
 14257 ;; This function uses a non-reentrant model
 14258 ;;
 14259                           
 14260                           	psect	text95
 14261  001CA4                     __ptext95:
 14262                           	opt stack 0
 14263  001CA4                     _eval_poly:
 14264                           	opt stack 22
 14265                           
 14266                           ;incstack = 0
 14267  001CA4  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 14268  001CA8  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 14269  001CAC  0E00               	movlw	0
 14270  001CAE  6E1B               	movwf	___wmul@multiplicand+1,c
 14271  001CB0  0E03               	movlw	3
 14272  001CB2  6E1A               	movwf	___wmul@multiplicand,c
 14273  001CB4  EC99  F01A         	call	___wmul	;wreg free
 14274  001CB8  C087  F02F         	movff	eval_poly@d,??_eval_poly
 14275  001CBC  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 14276  001CC0  5018               	movf	?___wmul,w,c
 14277  001CC2  262F               	addwf	??_eval_poly,f,c
 14278  001CC4  5019               	movf	?___wmul+1,w,c
 14279  001CC6  2230               	addwfc	??_eval_poly+1,f,c
 14280  001CC8  C02F  FFF6         	movff	??_eval_poly,tblptrl
 14281  001CCC  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 14282  001CD0                     	if	0	;tblptru may be non-zero
 14283  001CD0                     	endif
 14284  001CD0                     	if	0	;tblptru may be non-zero
 14285  001CD0                     	endif
 14286  001CD0  0009               	tblrd		*+
 14287  001CD2  CFF5 F08B          	movff	tablat,eval_poly@res
 14288  001CD6  0009               	tblrd		*+
 14289  001CD8  CFF5 F08C          	movff	tablat,eval_poly@res+1
 14290  001CDC  000A               	tblrd		*-
 14291  001CDE  CFF5 F08D          	movff	tablat,eval_poly@res+2
 14292  001CE2  D03F               	goto	l2108
 14293  001CE4  C08B  F06C         	movff	eval_poly@res,___ftmul@f2
 14294  001CE8  C08C  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
 14295  001CEC  C08D  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
 14296  001CF0  C084  F069         	movff	eval_poly@x,___ftmul@f1
 14297  001CF4  C085  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
 14298  001CF8  C086  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
 14299  001CFC  EC80  F00C         	call	___ftmul	;wreg free
 14300  001D00  C069  F078         	movff	?___ftmul,___ftadd@f1
 14301  001D04  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 14302  001D08  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 14303  001D0C  0E00               	movlw	0
 14304  001D0E  6E1B               	movwf	___wmul@multiplicand+1,c
 14305  001D10  0E03               	movlw	3
 14306  001D12  6E1A               	movwf	___wmul@multiplicand,c
 14307  001D14  0100               	movlb	0	; () banked
 14308  001D16  0789               	decf	eval_poly@n& (0+255),f,b
 14309  001D18  A0D8               	btfss	status,0,c
 14310  001D1A  078A               	decf	(eval_poly@n+1)& (0+255),f,b
 14311  001D1C  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 14312  001D20  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 14313  001D24  EC99  F01A         	call	___wmul	;wreg free
 14314  001D28  C087  F02F         	movff	eval_poly@d,??_eval_poly
 14315  001D2C  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 14316  001D30  5018               	movf	?___wmul,w,c
 14317  001D32  262F               	addwf	??_eval_poly,f,c
 14318  001D34  5019               	movf	?___wmul+1,w,c
 14319  001D36  2230               	addwfc	??_eval_poly+1,f,c
 14320  001D38  C02F  FFF6         	movff	??_eval_poly,tblptrl
 14321  001D3C  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 14322  001D40                     	if	0	;tblptru may be non-zero
 14323  001D40                     	endif
 14324  001D40                     	if	0	;tblptru may be non-zero
 14325  001D40                     	endif
 14326  001D40  0009               	tblrd		*+
 14327  001D42  CFF5 F07B          	movff	tablat,___ftadd@f2
 14328  001D46  0009               	tblrd		*+
 14329  001D48  CFF5 F07C          	movff	tablat,___ftadd@f2+1
 14330  001D4C  000A               	tblrd		*-
 14331  001D4E  CFF5 F07D          	movff	tablat,___ftadd@f2+2
 14332  001D52  ECDB  F008         	call	___ftadd	;wreg free
 14333  001D56  C078  F08B         	movff	?___ftadd,eval_poly@res
 14334  001D5A  C079  F08C         	movff	?___ftadd+1,eval_poly@res+1
 14335  001D5E  C07A  F08D         	movff	?___ftadd+2,eval_poly@res+2
 14336  001D62                     l2108:
 14337  001D62  0100               	movlb	0	; () banked
 14338  001D64  5189               	movf	eval_poly@n& (0+255),w,b
 14339  001D66  118A               	iorwf	(eval_poly@n+1)& (0+255),w,b
 14340  001D68  A4D8               	btfss	status,2,c
 14341  001D6A  D7BC               	goto	l2109
 14342                           
 14343                           ; BSR set to: 0
 14344  001D6C  C08B  F084         	movff	eval_poly@res,?_eval_poly
 14345  001D70  C08C  F085         	movff	eval_poly@res+1,?_eval_poly+1
 14346  001D74  C08D  F086         	movff	eval_poly@res+2,?_eval_poly+2
 14347                           
 14348                           ; BSR set to: 0
 14349  001D78  0012               	return		;funcret
 14350  001D7A                     __end_of_eval_poly:
 14351                           	opt stack 0
 14352                           tosu	equ	0xFFF
 14353                           tosh	equ	0xFFE
 14354                           tosl	equ	0xFFD
 14355                           pclath	equ	0xFFA
 14356                           tblptru	equ	0xFF8
 14357                           tblptrh	equ	0xFF7
 14358                           tblptrl	equ	0xFF6
 14359                           tablat	equ	0xFF5
 14360                           prodh	equ	0xFF4
 14361                           prodl	equ	0xFF3
 14362                           intcon	equ	0xFF2
 14363                           intcon2	equ	0xFF1
 14364                           postinc0	equ	0xFEE
 14365                           wreg	equ	0xFE8
 14366                           indf1	equ	0xFE7
 14367                           postdec1	equ	0xFE5
 14368                           fsr1h	equ	0xFE2
 14369                           fsr1l	equ	0xFE1
 14370                           indf2	equ	0xFDF
 14371                           postinc2	equ	0xFDE
 14372                           postdec2	equ	0xFDD
 14373                           fsr2h	equ	0xFDA
 14374                           fsr2l	equ	0xFD9
 14375                           status	equ	0xFD8
 14376                           
 14377 ;; *************** function ___wmul *****************
 14378 ;; Defined at:
 14379 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 14380 ;; Parameters:    Size  Location     Type
 14381 ;;  multiplier      2   23[COMRAM] unsigned int 
 14382 ;;  multiplicand    2   25[COMRAM] unsigned int 
 14383 ;; Auto vars:     Size  Location     Type
 14384 ;;  product         2   27[COMRAM] unsigned int 
 14385 ;; Return value:  Size  Location     Type
 14386 ;;                  2   23[COMRAM] unsigned int 
 14387 ;; Registers used:
 14388 ;;		wreg, status,2, status,0, prodl, prodh
 14389 ;; Tracked objects:
 14390 ;;		On entry : 0/0
 14391 ;;		On exit  : 0/0
 14392 ;;		Unchanged: 0/0
 14393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14394 ;;      Params:         4       0       0       0       0       0       0
 14395 ;;      Locals:         2       0       0       0       0       0       0
 14396 ;;      Temps:          0       0       0       0       0       0       0
 14397 ;;      Totals:         6       0       0       0       0       0       0
 14398 ;;Total ram usage:        6 bytes
 14399 ;; Hardware stack levels used:    1
 14400 ;; Hardware stack levels required when called:    3
 14401 ;; This function calls:
 14402 ;;		Nothing
 14403 ;; This function is called by:
 14404 ;;		_eval_poly
 14405 ;; This function uses a non-reentrant model
 14406 ;;
 14407                           
 14408                           	psect	text96
 14409  003532                     __ptext96:
 14410                           	opt stack 0
 14411  003532                     ___wmul:
 14412                           	opt stack 23
 14413                           
 14414                           ; BSR set to: 0
 14415                           ;incstack = 0
 14416  003532  5018               	movf	___wmul@multiplier,w,c
 14417  003534  021A               	mulwf	___wmul@multiplicand,c
 14418  003536  CFF3 F01C          	movff	prodl,___wmul@product
 14419  00353A  CFF4 F01D          	movff	prodh,___wmul@product+1
 14420  00353E  5018               	movf	___wmul@multiplier,w,c
 14421  003540  021B               	mulwf	___wmul@multiplicand+1,c
 14422  003542  50F3               	movf	prodl,w,c
 14423  003544  261D               	addwf	___wmul@product+1,f,c
 14424  003546  5019               	movf	___wmul@multiplier+1,w,c
 14425  003548  021A               	mulwf	___wmul@multiplicand,c
 14426  00354A  50F3               	movf	prodl,w,c
 14427  00354C  261D               	addwf	___wmul@product+1,f,c
 14428  00354E  C01C  F018         	movff	___wmul@product,?___wmul
 14429  003552  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 14430  003556  0012               	return	
 14431  003558                     __end_of___wmul:
 14432                           	opt stack 0
 14433                           tosu	equ	0xFFF
 14434                           tosh	equ	0xFFE
 14435                           tosl	equ	0xFFD
 14436                           pclath	equ	0xFFA
 14437                           tblptru	equ	0xFF8
 14438                           tblptrh	equ	0xFF7
 14439                           tblptrl	equ	0xFF6
 14440                           tablat	equ	0xFF5
 14441                           prodh	equ	0xFF4
 14442                           prodl	equ	0xFF3
 14443                           intcon	equ	0xFF2
 14444                           intcon2	equ	0xFF1
 14445                           postinc0	equ	0xFEE
 14446                           wreg	equ	0xFE8
 14447                           indf1	equ	0xFE7
 14448                           postdec1	equ	0xFE5
 14449                           fsr1h	equ	0xFE2
 14450                           fsr1l	equ	0xFE1
 14451                           indf2	equ	0xFDF
 14452                           postinc2	equ	0xFDE
 14453                           postdec2	equ	0xFDD
 14454                           fsr2h	equ	0xFDA
 14455                           fsr2l	equ	0xFD9
 14456                           status	equ	0xFD8
 14457                           
 14458 ;; *************** function ___ftmul *****************
 14459 ;; Defined at:
 14460 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 14461 ;; Parameters:    Size  Location     Type
 14462 ;;  f1              3    9[BANK0 ] float 
 14463 ;;  f2              3   12[BANK0 ] float 
 14464 ;; Auto vars:     Size  Location     Type
 14465 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 14466 ;;  sign            1   23[BANK0 ] unsigned char 
 14467 ;;  cntr            1   22[BANK0 ] unsigned char 
 14468 ;;  exp             1   18[BANK0 ] unsigned char 
 14469 ;; Return value:  Size  Location     Type
 14470 ;;                  3    9[BANK0 ] float 
 14471 ;; Registers used:
 14472 ;;		wreg, status,2, status,0, cstack
 14473 ;; Tracked objects:
 14474 ;;		On entry : 0/0
 14475 ;;		On exit  : 0/0
 14476 ;;		Unchanged: 0/0
 14477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14478 ;;      Params:         0       6       0       0       0       0       0
 14479 ;;      Locals:         0       6       0       0       0       0       0
 14480 ;;      Temps:          0       3       0       0       0       0       0
 14481 ;;      Totals:         0      15       0       0       0       0       0
 14482 ;;Total ram usage:       15 bytes
 14483 ;; Hardware stack levels used:    1
 14484 ;; Hardware stack levels required when called:    4
 14485 ;; This function calls:
 14486 ;;		___ftpack
 14487 ;; This function is called by:
 14488 ;;		_AdcConvert
 14489 ;;		_CheckFlashPrecentage
 14490 ;;		_pow
 14491 ;;		_exp
 14492 ;;		_log
 14493 ;;		_eval_poly
 14494 ;; This function uses a non-reentrant model
 14495 ;;
 14496                           
 14497                           	psect	text97
 14498  001900                     __ptext97:
 14499                           	opt stack 0
 14500  001900                     ___ftmul:
 14501                           	opt stack 25
 14502                           
 14503                           ;incstack = 0
 14504  001900  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
 14505  001904  0100               	movlb	0	; () banked
 14506  001906  6B70               	clrf	(??___ftmul+1)& (0+255),b
 14507  001908  6B71               	clrf	(??___ftmul+2)& (0+255),b
 14508  00190A  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 14509  00190C  376F               	rlcf	??___ftmul& (0+255),f,b
 14510  00190E  E301               	bnc	u6691
 14511  001910  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 14512  001912                     u6691:
 14513  001912  516F               	movf	??___ftmul& (0+255),w,b
 14514  001914  6F72               	movwf	___ftmul@exp& (0+255),b
 14515  001916  5172               	movf	___ftmul@exp& (0+255),w,b
 14516  001918  A4D8               	btfss	status,2,c
 14517  00191A  D007               	goto	l1692
 14518                           
 14519                           ; BSR set to: 0
 14520  00191C  0E00               	movlw	0
 14521  00191E  6F69               	movwf	?___ftmul& (0+255),b
 14522  001920  0E00               	movlw	0
 14523  001922  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 14524  001924  0E00               	movlw	0
 14525  001926  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 14526                           
 14527                           ; BSR set to: 0
 14528  001928  0012               	return	
 14529  00192A                     l1692:
 14530                           
 14531                           ; BSR set to: 0
 14532                           
 14533                           ; BSR set to: 0
 14534  00192A  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
 14535  00192E  6B70               	clrf	(??___ftmul+1)& (0+255),b
 14536  001930  6B71               	clrf	(??___ftmul+2)& (0+255),b
 14537  001932  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 14538  001934  376F               	rlcf	??___ftmul& (0+255),f,b
 14539  001936  E301               	bnc	u6711
 14540  001938  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 14541  00193A                     u6711:
 14542  00193A  516F               	movf	??___ftmul& (0+255),w,b
 14543  00193C  6F77               	movwf	___ftmul@sign& (0+255),b
 14544  00193E  5177               	movf	___ftmul@sign& (0+255),w,b
 14545  001940  A4D8               	btfss	status,2,c
 14546  001942  D007               	goto	l1694
 14547                           
 14548                           ; BSR set to: 0
 14549  001944  0E00               	movlw	0
 14550  001946  6F69               	movwf	?___ftmul& (0+255),b
 14551  001948  0E00               	movlw	0
 14552  00194A  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 14553  00194C  0E00               	movlw	0
 14554  00194E  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 14555                           
 14556                           ; BSR set to: 0
 14557  001950  0012               	return	
 14558  001952                     l1694:
 14559                           
 14560                           ; BSR set to: 0
 14561                           
 14562                           ; BSR set to: 0
 14563  001952  5177               	movf	___ftmul@sign& (0+255),w,b
 14564  001954  0F7B               	addlw	123
 14565  001956  2772               	addwf	___ftmul@exp& (0+255),f,b
 14566                           
 14567                           ; BSR set to: 0
 14568  001958  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
 14569  00195C  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 14570  00195E  1B77               	xorwf	___ftmul@sign& (0+255),f,b
 14571  001960  0E80               	movlw	128
 14572  001962  1777               	andwf	___ftmul@sign& (0+255),f,b
 14573                           
 14574                           ; BSR set to: 0
 14575  001964  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 14576                           
 14577                           ; BSR set to: 0
 14578  001966  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 14579                           
 14580                           ; BSR set to: 0
 14581  001968  0EFF               	movlw	255
 14582  00196A  176C               	andwf	___ftmul@f2& (0+255),f,b
 14583  00196C  0EFF               	movlw	255
 14584  00196E  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 14585  001970  0E00               	movlw	0
 14586  001972  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 14587                           
 14588                           ; BSR set to: 0
 14589  001974  0E00               	movlw	0
 14590  001976  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
 14591  001978  0E00               	movlw	0
 14592  00197A  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 14593  00197C  0E00               	movlw	0
 14594  00197E  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 14595                           
 14596                           ; BSR set to: 0
 14597  001980  0E07               	movlw	7
 14598  001982  6F76               	movwf	___ftmul@cntr& (0+255),b
 14599  001984                     
 14600                           ; BSR set to: 0
 14601                           
 14602                           ; BSR set to: 0
 14603  001984  A169               	btfss	___ftmul@f1& (0+255),0,b
 14604  001986  D006               	goto	l1696
 14605                           
 14606                           ; BSR set to: 0
 14607  001988  516C               	movf	___ftmul@f2& (0+255),w,b
 14608  00198A  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 14609  00198C  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 14610  00198E  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 14611  001990  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 14612  001992  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 14613  001994                     l1696:
 14614                           
 14615                           ; BSR set to: 0
 14616                           
 14617                           ; BSR set to: 0
 14618  001994  90D8               	bcf	status,0,c
 14619  001996  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 14620  001998  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 14621  00199A  3369               	rrcf	___ftmul@f1& (0+255),f,b
 14622  00199C  90D8               	bcf	status,0,c
 14623  00199E  376C               	rlcf	___ftmul@f2& (0+255),f,b
 14624  0019A0  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 14625  0019A2  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 14626                           
 14627                           ; BSR set to: 0
 14628  0019A4  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 14629  0019A6  D7EE               	goto	l1695
 14630                           
 14631                           ; BSR set to: 0
 14632                           
 14633                           ; BSR set to: 0
 14634  0019A8  0E09               	movlw	9
 14635  0019AA  6F76               	movwf	___ftmul@cntr& (0+255),b
 14636  0019AC                     
 14637                           ; BSR set to: 0
 14638                           
 14639                           ; BSR set to: 0
 14640  0019AC  A169               	btfss	___ftmul@f1& (0+255),0,b
 14641  0019AE  D006               	goto	l1699
 14642                           
 14643                           ; BSR set to: 0
 14644  0019B0  516C               	movf	___ftmul@f2& (0+255),w,b
 14645  0019B2  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 14646  0019B4  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 14647  0019B6  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 14648  0019B8  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 14649  0019BA  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 14650  0019BC                     l1699:
 14651                           
 14652                           ; BSR set to: 0
 14653                           
 14654                           ; BSR set to: 0
 14655  0019BC  90D8               	bcf	status,0,c
 14656  0019BE  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 14657  0019C0  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 14658  0019C2  3369               	rrcf	___ftmul@f1& (0+255),f,b
 14659  0019C4  90D8               	bcf	status,0,c
 14660  0019C6  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 14661  0019C8  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 14662  0019CA  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 14663                           
 14664                           ; BSR set to: 0
 14665  0019CC  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 14666  0019CE  D7EE               	goto	l1698
 14667                           
 14668                           ; BSR set to: 0
 14669                           
 14670                           ; BSR set to: 0
 14671  0019D0  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 14672  0019D4  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 14673  0019D8  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 14674  0019DC  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
 14675  0019E0  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
 14676  0019E4  EC92  F010         	call	___ftpack	;wreg free
 14677  0019E8  C018  F069         	movff	?___ftpack,?___ftmul
 14678  0019EC  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
 14679  0019F0  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
 14680  0019F4  0012               	return	
 14681  0019F6                     __end_of___ftmul:
 14682                           	opt stack 0
 14683                           tosu	equ	0xFFF
 14684                           tosh	equ	0xFFE
 14685                           tosl	equ	0xFFD
 14686                           pclath	equ	0xFFA
 14687                           tblptru	equ	0xFF8
 14688                           tblptrh	equ	0xFF7
 14689                           tblptrl	equ	0xFF6
 14690                           tablat	equ	0xFF5
 14691                           prodh	equ	0xFF4
 14692                           prodl	equ	0xFF3
 14693                           intcon	equ	0xFF2
 14694                           intcon2	equ	0xFF1
 14695                           postinc0	equ	0xFEE
 14696                           wreg	equ	0xFE8
 14697                           indf1	equ	0xFE7
 14698                           postdec1	equ	0xFE5
 14699                           fsr1h	equ	0xFE2
 14700                           fsr1l	equ	0xFE1
 14701                           indf2	equ	0xFDF
 14702                           postinc2	equ	0xFDE
 14703                           postdec2	equ	0xFDD
 14704                           fsr2h	equ	0xFDA
 14705                           fsr2l	equ	0xFD9
 14706                           status	equ	0xFD8
 14707                           
 14708 ;; *************** function ___ftsub *****************
 14709 ;; Defined at:
 14710 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 14711 ;; Parameters:    Size  Location     Type
 14712 ;;  f1              3   36[BANK0 ] float 
 14713 ;;  f2              3   39[BANK0 ] float 
 14714 ;; Auto vars:     Size  Location     Type
 14715 ;;		None
 14716 ;; Return value:  Size  Location     Type
 14717 ;;                  3   36[BANK0 ] float 
 14718 ;; Registers used:
 14719 ;;		wreg, status,2, status,0, cstack
 14720 ;; Tracked objects:
 14721 ;;		On entry : 0/0
 14722 ;;		On exit  : 0/0
 14723 ;;		Unchanged: 0/0
 14724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14725 ;;      Params:         0       6       0       0       0       0       0
 14726 ;;      Locals:         0       0       0       0       0       0       0
 14727 ;;      Temps:          0       0       0       0       0       0       0
 14728 ;;      Totals:         0       6       0       0       0       0       0
 14729 ;;Total ram usage:        6 bytes
 14730 ;; Hardware stack levels used:    1
 14731 ;; Hardware stack levels required when called:    5
 14732 ;; This function calls:
 14733 ;;		___ftadd
 14734 ;; This function is called by:
 14735 ;;		_exp
 14736 ;; This function uses a non-reentrant model
 14737 ;;
 14738                           
 14739                           	psect	text98
 14740  00307E                     __ptext98:
 14741                           	opt stack 0
 14742  00307E                     ___ftsub:
 14743                           	opt stack 22
 14744                           
 14745                           ;incstack = 0
 14746  00307E  0100               	movlb	0	; () banked
 14747  003080  5187               	movf	___ftsub@f2& (0+255),w,b
 14748  003082  1188               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 14749  003084  1189               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 14750  003086  B4D8               	btfsc	status,2,c
 14751  003088  D006               	goto	l1709
 14752                           
 14753                           ; BSR set to: 0
 14754  00308A  0E00               	movlw	0
 14755  00308C  1B87               	xorwf	___ftsub@f2& (0+255),f,b
 14756  00308E  0E00               	movlw	0
 14757  003090  1B88               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 14758  003092  0E80               	movlw	128
 14759  003094  1B89               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 14760  003096                     l1709:
 14761                           
 14762                           ; BSR set to: 0
 14763                           
 14764                           ; BSR set to: 0
 14765  003096  C084  F078         	movff	___ftsub@f1,___ftadd@f1
 14766  00309A  C085  F079         	movff	___ftsub@f1+1,___ftadd@f1+1
 14767  00309E  C086  F07A         	movff	___ftsub@f1+2,___ftadd@f1+2
 14768  0030A2  C087  F07B         	movff	___ftsub@f2,___ftadd@f2
 14769  0030A6  C088  F07C         	movff	___ftsub@f2+1,___ftadd@f2+1
 14770  0030AA  C089  F07D         	movff	___ftsub@f2+2,___ftadd@f2+2
 14771  0030AE  ECDB  F008         	call	___ftadd	;wreg free
 14772  0030B2  C078  F084         	movff	?___ftadd,?___ftsub
 14773  0030B6  C079  F085         	movff	?___ftadd+1,?___ftsub+1
 14774  0030BA  C07A  F086         	movff	?___ftadd+2,?___ftsub+2
 14775  0030BE  0012               	return	
 14776  0030C0                     __end_of___ftsub:
 14777                           	opt stack 0
 14778                           tosu	equ	0xFFF
 14779                           tosh	equ	0xFFE
 14780                           tosl	equ	0xFFD
 14781                           pclath	equ	0xFFA
 14782                           tblptru	equ	0xFF8
 14783                           tblptrh	equ	0xFF7
 14784                           tblptrl	equ	0xFF6
 14785                           tablat	equ	0xFF5
 14786                           prodh	equ	0xFF4
 14787                           prodl	equ	0xFF3
 14788                           intcon	equ	0xFF2
 14789                           intcon2	equ	0xFF1
 14790                           postinc0	equ	0xFEE
 14791                           wreg	equ	0xFE8
 14792                           indf1	equ	0xFE7
 14793                           postdec1	equ	0xFE5
 14794                           fsr1h	equ	0xFE2
 14795                           fsr1l	equ	0xFE1
 14796                           indf2	equ	0xFDF
 14797                           postinc2	equ	0xFDE
 14798                           postdec2	equ	0xFDD
 14799                           fsr2h	equ	0xFDA
 14800                           fsr2l	equ	0xFD9
 14801                           status	equ	0xFD8
 14802                           
 14803 ;; *************** function ___ftadd *****************
 14804 ;; Defined at:
 14805 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 14806 ;; Parameters:    Size  Location     Type
 14807 ;;  f1              3   24[BANK0 ] float 
 14808 ;;  f2              3   27[BANK0 ] float 
 14809 ;; Auto vars:     Size  Location     Type
 14810 ;;  exp1            1   35[BANK0 ] unsigned char 
 14811 ;;  exp2            1   34[BANK0 ] unsigned char 
 14812 ;;  sign            1   33[BANK0 ] unsigned char 
 14813 ;; Return value:  Size  Location     Type
 14814 ;;                  3   24[BANK0 ] float 
 14815 ;; Registers used:
 14816 ;;		wreg, status,2, status,0, cstack
 14817 ;; Tracked objects:
 14818 ;;		On entry : 0/0
 14819 ;;		On exit  : 0/0
 14820 ;;		Unchanged: 0/0
 14821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14822 ;;      Params:         0       6       0       0       0       0       0
 14823 ;;      Locals:         0       3       0       0       0       0       0
 14824 ;;      Temps:          0       3       0       0       0       0       0
 14825 ;;      Totals:         0      12       0       0       0       0       0
 14826 ;;Total ram usage:       12 bytes
 14827 ;; Hardware stack levels used:    1
 14828 ;; Hardware stack levels required when called:    4
 14829 ;; This function calls:
 14830 ;;		___ftpack
 14831 ;; This function is called by:
 14832 ;;		___ftsub
 14833 ;;		_floor
 14834 ;;		_log
 14835 ;;		_eval_poly
 14836 ;; This function uses a non-reentrant model
 14837 ;;
 14838                           
 14839                           	psect	text99
 14840  0011B6                     __ptext99:
 14841                           	opt stack 0
 14842  0011B6                     ___ftadd:
 14843                           	opt stack 22
 14844                           
 14845                           ;incstack = 0
 14846  0011B6  C07A  F07E         	movff	___ftadd@f1+2,??___ftadd
 14847  0011BA  0100               	movlb	0	; () banked
 14848  0011BC  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 14849  0011BE  6B80               	clrf	(??___ftadd+2)& (0+255),b
 14850  0011C0  3579               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 14851  0011C2  377E               	rlcf	??___ftadd& (0+255),f,b
 14852  0011C4  E301               	bnc	u6481
 14853  0011C6  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 14854  0011C8                     u6481:
 14855  0011C8  517E               	movf	??___ftadd& (0+255),w,b
 14856  0011CA  6F83               	movwf	___ftadd@exp1& (0+255),b
 14857  0011CC  C07D  F07E         	movff	___ftadd@f2+2,??___ftadd
 14858  0011D0  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 14859  0011D2  6B80               	clrf	(??___ftadd+2)& (0+255),b
 14860  0011D4  357C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 14861  0011D6  377E               	rlcf	??___ftadd& (0+255),f,b
 14862  0011D8  E301               	bnc	u6491
 14863  0011DA  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 14864  0011DC                     u6491:
 14865  0011DC  517E               	movf	??___ftadd& (0+255),w,b
 14866  0011DE  6F82               	movwf	___ftadd@exp2& (0+255),b
 14867                           
 14868                           ; BSR set to: 0
 14869  0011E0  5183               	movf	___ftadd@exp1& (0+255),w,b
 14870  0011E2  B4D8               	btfsc	status,2,c
 14871  0011E4  D00B               	goto	u6520
 14872                           
 14873                           ; BSR set to: 0
 14874  0011E6  5182               	movf	___ftadd@exp2& (0+255),w,b
 14875  0011E8  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 14876  0011EA  B0D8               	btfsc	status,0,c
 14877  0011EC  D00E               	goto	l1644
 14878                           
 14879                           ; BSR set to: 0
 14880  0011EE  5183               	movf	___ftadd@exp1& (0+255),w,b
 14881  0011F0  0800               	sublw	0
 14882  0011F2  2582               	addwf	___ftadd@exp2& (0+255),w,b
 14883  0011F4  6F7E               	movwf	??___ftadd& (0+255),b
 14884  0011F6  0E18               	movlw	24
 14885  0011F8  657E               	cpfsgt	??___ftadd& (0+255),b
 14886  0011FA  D007               	goto	l1644
 14887  0011FC                     u6520:
 14888                           
 14889                           ; BSR set to: 0
 14890  0011FC  C07B  F078         	movff	___ftadd@f2,?___ftadd
 14891  001200  C07C  F079         	movff	___ftadd@f2+1,?___ftadd+1
 14892  001204  C07D  F07A         	movff	___ftadd@f2+2,?___ftadd+2
 14893  001208  0012               	return	
 14894  00120A                     l1644:
 14895                           
 14896                           ; BSR set to: 0
 14897                           
 14898                           ; BSR set to: 0
 14899  00120A  5182               	movf	___ftadd@exp2& (0+255),w,b
 14900  00120C  B4D8               	btfsc	status,2,c
 14901  00120E  D00B               	goto	u6550
 14902                           
 14903                           ; BSR set to: 0
 14904  001210  5183               	movf	___ftadd@exp1& (0+255),w,b
 14905  001212  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 14906  001214  B0D8               	btfsc	status,0,c
 14907  001216  D00E               	goto	l1648
 14908                           
 14909                           ; BSR set to: 0
 14910  001218  5182               	movf	___ftadd@exp2& (0+255),w,b
 14911  00121A  0800               	sublw	0
 14912  00121C  2583               	addwf	___ftadd@exp1& (0+255),w,b
 14913  00121E  6F7E               	movwf	??___ftadd& (0+255),b
 14914  001220  0E18               	movlw	24
 14915  001222  657E               	cpfsgt	??___ftadd& (0+255),b
 14916  001224  D007               	goto	l1648
 14917  001226                     u6550:
 14918                           
 14919                           ; BSR set to: 0
 14920  001226  C078  F078         	movff	___ftadd@f1,?___ftadd
 14921  00122A  C079  F079         	movff	___ftadd@f1+1,?___ftadd+1
 14922  00122E  C07A  F07A         	movff	___ftadd@f1+2,?___ftadd+2
 14923  001232  0012               	return	
 14924  001234                     l1648:
 14925                           
 14926                           ; BSR set to: 0
 14927                           
 14928                           ; BSR set to: 0
 14929  001234  0E06               	movlw	6
 14930  001236  6F81               	movwf	___ftadd@sign& (0+255),b
 14931                           
 14932                           ; BSR set to: 0
 14933  001238  BF7A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 14934                           
 14935                           ; BSR set to: 0
 14936  00123A  8F81               	bsf	___ftadd@sign& (0+255),7,b
 14937                           
 14938                           ; BSR set to: 0
 14939                           
 14940                           ; BSR set to: 0
 14941  00123C  BF7D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 14942                           
 14943                           ; BSR set to: 0
 14944  00123E  8D81               	bsf	___ftadd@sign& (0+255),6,b
 14945                           
 14946                           ; BSR set to: 0
 14947  001240  8F79               	bsf	(___ftadd@f1+1)& (0+255),7,b
 14948                           
 14949                           ; BSR set to: 0
 14950  001242  0EFF               	movlw	255
 14951  001244  1778               	andwf	___ftadd@f1& (0+255),f,b
 14952  001246  0EFF               	movlw	255
 14953  001248  1779               	andwf	(___ftadd@f1+1)& (0+255),f,b
 14954  00124A  0E00               	movlw	0
 14955  00124C  177A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 14956  00124E  8F7C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 14957                           
 14958                           ; BSR set to: 0
 14959  001250  0EFF               	movlw	255
 14960  001252  177B               	andwf	___ftadd@f2& (0+255),f,b
 14961  001254  0EFF               	movlw	255
 14962  001256  177C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 14963  001258  0E00               	movlw	0
 14964  00125A  177D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 14965                           
 14966                           ; BSR set to: 0
 14967  00125C  5182               	movf	___ftadd@exp2& (0+255),w,b
 14968  00125E  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 14969  001260  B0D8               	btfsc	status,0,c
 14970  001262  D01B               	goto	l1653
 14971  001264                     u6580:
 14972                           
 14973                           ; BSR set to: 0
 14974                           
 14975                           ; BSR set to: 0
 14976  001264  90D8               	bcf	status,0,c
 14977  001266  377B               	rlcf	___ftadd@f2& (0+255),f,b
 14978  001268  377C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 14979  00126A  377D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 14980  00126C  0782               	decf	___ftadd@exp2& (0+255),f,b
 14981                           
 14982                           ; BSR set to: 0
 14983  00126E  5183               	movf	___ftadd@exp1& (0+255),w,b
 14984  001270  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 14985  001272  B4D8               	btfsc	status,2,c
 14986  001274  D00D               	goto	l1658
 14987                           
 14988                           ; BSR set to: 0
 14989  001276  0781               	decf	___ftadd@sign& (0+255),f,b
 14990  001278  C081  F07E         	movff	___ftadd@sign,??___ftadd
 14991  00127C  0E07               	movlw	7
 14992  00127E  177E               	andwf	??___ftadd& (0+255),f,b
 14993  001280  B4D8               	btfsc	status,2,c
 14994  001282  D006               	goto	l1658
 14995  001284  D7EF               	goto	u6580
 14996  001286                     
 14997                           ; BSR set to: 0
 14998                           
 14999                           ; BSR set to: 0
 15000  001286  90D8               	bcf	status,0,c
 15001  001288  337A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 15002  00128A  3379               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 15003  00128C  3378               	rrcf	___ftadd@f1& (0+255),f,b
 15004  00128E  2B83               	incf	___ftadd@exp1& (0+255),f,b
 15005  001290                     l1658:
 15006                           
 15007                           ; BSR set to: 0
 15008                           
 15009                           ; BSR set to: 0
 15010  001290  5182               	movf	___ftadd@exp2& (0+255),w,b
 15011  001292  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 15012  001294  B4D8               	btfsc	status,2,c
 15013  001296  D01F               	goto	u6650
 15014  001298  D7F6               	goto	l1659
 15015  00129A                     l1653:
 15016                           
 15017                           ; BSR set to: 0
 15018                           
 15019                           ; BSR set to: 0
 15020  00129A  5183               	movf	___ftadd@exp1& (0+255),w,b
 15021  00129C  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 15022  00129E  B0D8               	btfsc	status,0,c
 15023  0012A0  D01A               	goto	u6650
 15024  0012A2                     u6620:
 15025                           
 15026                           ; BSR set to: 0
 15027                           
 15028                           ; BSR set to: 0
 15029  0012A2  90D8               	bcf	status,0,c
 15030  0012A4  3778               	rlcf	___ftadd@f1& (0+255),f,b
 15031  0012A6  3779               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 15032  0012A8  377A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 15033  0012AA  0783               	decf	___ftadd@exp1& (0+255),f,b
 15034                           
 15035                           ; BSR set to: 0
 15036  0012AC  5183               	movf	___ftadd@exp1& (0+255),w,b
 15037  0012AE  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 15038  0012B0  B4D8               	btfsc	status,2,c
 15039  0012B2  D00D               	goto	l1667
 15040                           
 15041                           ; BSR set to: 0
 15042  0012B4  0781               	decf	___ftadd@sign& (0+255),f,b
 15043  0012B6  C081  F07E         	movff	___ftadd@sign,??___ftadd
 15044  0012BA  0E07               	movlw	7
 15045  0012BC  177E               	andwf	??___ftadd& (0+255),f,b
 15046  0012BE  B4D8               	btfsc	status,2,c
 15047  0012C0  D006               	goto	l1667
 15048  0012C2  D7EF               	goto	u6620
 15049  0012C4                     
 15050                           ; BSR set to: 0
 15051                           
 15052                           ; BSR set to: 0
 15053  0012C4  90D8               	bcf	status,0,c
 15054  0012C6  337D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 15055  0012C8  337C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 15056  0012CA  337B               	rrcf	___ftadd@f2& (0+255),f,b
 15057  0012CC  2B82               	incf	___ftadd@exp2& (0+255),f,b
 15058  0012CE                     l1667:
 15059                           
 15060                           ; BSR set to: 0
 15061                           
 15062                           ; BSR set to: 0
 15063  0012CE  5182               	movf	___ftadd@exp2& (0+255),w,b
 15064  0012D0  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 15065  0012D2  A4D8               	btfss	status,2,c
 15066  0012D4  D7F7               	goto	l1668
 15067  0012D6                     u6650:
 15068                           
 15069                           ; BSR set to: 0
 15070                           
 15071                           ; BSR set to: 0
 15072                           
 15073                           ; BSR set to: 0
 15074  0012D6  AF81               	btfss	___ftadd@sign& (0+255),7,b
 15075  0012D8  D00C               	goto	l1670
 15076                           
 15077                           ; BSR set to: 0
 15078  0012DA  0EFF               	movlw	255
 15079  0012DC  1B78               	xorwf	___ftadd@f1& (0+255),f,b
 15080  0012DE  0EFF               	movlw	255
 15081  0012E0  1B79               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 15082  0012E2  0EFF               	movlw	255
 15083  0012E4  1B7A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 15084  0012E6  0E01               	movlw	1
 15085  0012E8  2778               	addwf	___ftadd@f1& (0+255),f,b
 15086  0012EA  0E00               	movlw	0
 15087  0012EC  2379               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 15088  0012EE  0E00               	movlw	0
 15089  0012F0  237A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 15090  0012F2                     l1670:
 15091                           
 15092                           ; BSR set to: 0
 15093  0012F2  AD81               	btfss	___ftadd@sign& (0+255),6,b
 15094  0012F4  D00C               	goto	l1671
 15095                           
 15096                           ; BSR set to: 0
 15097  0012F6  0EFF               	movlw	255
 15098  0012F8  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 15099  0012FA  0EFF               	movlw	255
 15100  0012FC  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 15101  0012FE  0EFF               	movlw	255
 15102  001300  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 15103  001302  0E01               	movlw	1
 15104  001304  277B               	addwf	___ftadd@f2& (0+255),f,b
 15105  001306  0E00               	movlw	0
 15106  001308  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 15107  00130A  0E00               	movlw	0
 15108  00130C  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 15109  00130E                     l1671:
 15110                           
 15111                           ; BSR set to: 0
 15112                           
 15113                           ; BSR set to: 0
 15114  00130E  0E00               	movlw	0
 15115  001310  6F81               	movwf	___ftadd@sign& (0+255),b
 15116                           
 15117                           ; BSR set to: 0
 15118  001312  5178               	movf	___ftadd@f1& (0+255),w,b
 15119  001314  277B               	addwf	___ftadd@f2& (0+255),f,b
 15120  001316  5179               	movf	(___ftadd@f1+1)& (0+255),w,b
 15121  001318  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 15122  00131A  517A               	movf	(___ftadd@f1+2)& (0+255),w,b
 15123  00131C  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 15124                           
 15125                           ; BSR set to: 0
 15126  00131E  AF7D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 15127  001320  D00E               	goto	l1672
 15128                           
 15129                           ; BSR set to: 0
 15130  001322  0EFF               	movlw	255
 15131  001324  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 15132  001326  0EFF               	movlw	255
 15133  001328  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 15134  00132A  0EFF               	movlw	255
 15135  00132C  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 15136  00132E  0E01               	movlw	1
 15137  001330  277B               	addwf	___ftadd@f2& (0+255),f,b
 15138  001332  0E00               	movlw	0
 15139  001334  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 15140  001336  0E00               	movlw	0
 15141  001338  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 15142                           
 15143                           ; BSR set to: 0
 15144  00133A  0E01               	movlw	1
 15145  00133C  6F81               	movwf	___ftadd@sign& (0+255),b
 15146  00133E                     l1672:
 15147                           
 15148                           ; BSR set to: 0
 15149                           
 15150                           ; BSR set to: 0
 15151  00133E  C07B  F018         	movff	___ftadd@f2,___ftpack@arg
 15152  001342  C07C  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 15153  001346  C07D  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 15154  00134A  C083  F01B         	movff	___ftadd@exp1,___ftpack@exp
 15155  00134E  C081  F01C         	movff	___ftadd@sign,___ftpack@sign
 15156  001352  EC92  F010         	call	___ftpack	;wreg free
 15157  001356  C018  F078         	movff	?___ftpack,?___ftadd
 15158  00135A  C019  F079         	movff	?___ftpack+1,?___ftadd+1
 15159  00135E  C01A  F07A         	movff	?___ftpack+2,?___ftadd+2
 15160  001362  0012               	return	
 15161  001364                     __end_of___ftadd:
 15162                           	opt stack 0
 15163                           tosu	equ	0xFFF
 15164                           tosh	equ	0xFFE
 15165                           tosl	equ	0xFFD
 15166                           pclath	equ	0xFFA
 15167                           tblptru	equ	0xFF8
 15168                           tblptrh	equ	0xFF7
 15169                           tblptrl	equ	0xFF6
 15170                           tablat	equ	0xFF5
 15171                           prodh	equ	0xFF4
 15172                           prodl	equ	0xFF3
 15173                           intcon	equ	0xFF2
 15174                           intcon2	equ	0xFF1
 15175                           postinc0	equ	0xFEE
 15176                           wreg	equ	0xFE8
 15177                           indf1	equ	0xFE7
 15178                           postdec1	equ	0xFE5
 15179                           fsr1h	equ	0xFE2
 15180                           fsr1l	equ	0xFE1
 15181                           indf2	equ	0xFDF
 15182                           postinc2	equ	0xFDE
 15183                           postdec2	equ	0xFDD
 15184                           fsr2h	equ	0xFDA
 15185                           fsr2l	equ	0xFD9
 15186                           status	equ	0xFD8
 15187                           
 15188 ;; *************** function ___ftneg *****************
 15189 ;; Defined at:
 15190 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 15191 ;; Parameters:    Size  Location     Type
 15192 ;;  f1              3   23[COMRAM] float 
 15193 ;; Auto vars:     Size  Location     Type
 15194 ;;		None
 15195 ;; Return value:  Size  Location     Type
 15196 ;;                  3   23[COMRAM] float 
 15197 ;; Registers used:
 15198 ;;		wreg, status,2, status,0
 15199 ;; Tracked objects:
 15200 ;;		On entry : 0/0
 15201 ;;		On exit  : 0/0
 15202 ;;		Unchanged: 0/0
 15203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15204 ;;      Params:         3       0       0       0       0       0       0
 15205 ;;      Locals:         0       0       0       0       0       0       0
 15206 ;;      Temps:          0       0       0       0       0       0       0
 15207 ;;      Totals:         3       0       0       0       0       0       0
 15208 ;;Total ram usage:        3 bytes
 15209 ;; Hardware stack levels used:    1
 15210 ;; Hardware stack levels required when called:    3
 15211 ;; This function calls:
 15212 ;;		Nothing
 15213 ;; This function is called by:
 15214 ;;		_pow
 15215 ;;		_exp
 15216 ;; This function uses a non-reentrant model
 15217 ;;
 15218                           
 15219                           	psect	text100
 15220  003558                     __ptext100:
 15221                           	opt stack 0
 15222  003558                     ___ftneg:
 15223                           	opt stack 24
 15224                           
 15225                           ;incstack = 0
 15226  003558  5018               	movf	___ftneg@f1,w,c
 15227  00355A  1019               	iorwf	___ftneg@f1+1,w,c
 15228  00355C  101A               	iorwf	___ftneg@f1+2,w,c
 15229  00355E  B4D8               	btfsc	status,2,c
 15230  003560  D006               	goto	l1703
 15231  003562  0E00               	movlw	0
 15232  003564  1A18               	xorwf	___ftneg@f1,f,c
 15233  003566  0E00               	movlw	0
 15234  003568  1A19               	xorwf	___ftneg@f1+1,f,c
 15235  00356A  0E80               	movlw	128
 15236  00356C  1A1A               	xorwf	___ftneg@f1+2,f,c
 15237  00356E                     l1703:
 15238  00356E  C018  F018         	movff	___ftneg@f1,?___ftneg
 15239  003572  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 15240  003576  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 15241  00357A  0012               	return		;funcret
 15242  00357C                     __end_of___ftneg:
 15243                           	opt stack 0
 15244                           tosu	equ	0xFFF
 15245                           tosh	equ	0xFFE
 15246                           tosl	equ	0xFFD
 15247                           pclath	equ	0xFFA
 15248                           tblptru	equ	0xFF8
 15249                           tblptrh	equ	0xFF7
 15250                           tblptrl	equ	0xFF6
 15251                           tablat	equ	0xFF5
 15252                           prodh	equ	0xFF4
 15253                           prodl	equ	0xFF3
 15254                           intcon	equ	0xFF2
 15255                           intcon2	equ	0xFF1
 15256                           postinc0	equ	0xFEE
 15257                           wreg	equ	0xFE8
 15258                           indf1	equ	0xFE7
 15259                           postdec1	equ	0xFE5
 15260                           fsr1h	equ	0xFE2
 15261                           fsr1l	equ	0xFE1
 15262                           indf2	equ	0xFDF
 15263                           postinc2	equ	0xFDE
 15264                           postdec2	equ	0xFDD
 15265                           fsr2h	equ	0xFDA
 15266                           fsr2l	equ	0xFD9
 15267                           status	equ	0xFD8
 15268                           
 15269 ;; *************** function ___ftdiv *****************
 15270 ;; Defined at:
 15271 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 15272 ;; Parameters:    Size  Location     Type
 15273 ;;  f1              3   40[COMRAM] float 
 15274 ;;  f2              3   43[COMRAM] float 
 15275 ;; Auto vars:     Size  Location     Type
 15276 ;;  f3              3    4[BANK0 ] float 
 15277 ;;  sign            1    8[BANK0 ] unsigned char 
 15278 ;;  exp             1    7[BANK0 ] unsigned char 
 15279 ;;  cntr            1    3[BANK0 ] unsigned char 
 15280 ;; Return value:  Size  Location     Type
 15281 ;;                  3   40[COMRAM] float 
 15282 ;; Registers used:
 15283 ;;		wreg, status,2, status,0, cstack
 15284 ;; Tracked objects:
 15285 ;;		On entry : 0/0
 15286 ;;		On exit  : 0/0
 15287 ;;		Unchanged: 0/0
 15288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15289 ;;      Params:         6       0       0       0       0       0       0
 15290 ;;      Locals:         0       6       0       0       0       0       0
 15291 ;;      Temps:          0       3       0       0       0       0       0
 15292 ;;      Totals:         6       9       0       0       0       0       0
 15293 ;;Total ram usage:       15 bytes
 15294 ;; Hardware stack levels used:    1
 15295 ;; Hardware stack levels required when called:    4
 15296 ;; This function calls:
 15297 ;;		___ftpack
 15298 ;; This function is called by:
 15299 ;;		_AdcConvert
 15300 ;;		_CheckFlashPrecentage
 15301 ;;		_exp
 15302 ;; This function uses a non-reentrant model
 15303 ;;
 15304                           
 15305                           	psect	text101
 15306  0019F6                     __ptext101:
 15307                           	opt stack 0
 15308  0019F6                     ___ftdiv:
 15309                           	opt stack 25
 15310                           
 15311                           ;incstack = 0
 15312  0019F6  C02B  F060         	movff	___ftdiv@f1+2,??___ftdiv
 15313  0019FA  0100               	movlb	0	; () banked
 15314  0019FC  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 15315  0019FE  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 15316  001A00  342A               	rlcf	___ftdiv@f1+1,w,c
 15317  001A02  3760               	rlcf	??___ftdiv& (0+255),f,b
 15318  001A04  E301               	bnc	u6881
 15319  001A06  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 15320  001A08                     u6881:
 15321  001A08  5160               	movf	??___ftdiv& (0+255),w,b
 15322  001A0A  6F67               	movwf	___ftdiv@exp& (0+255),b
 15323  001A0C  5167               	movf	___ftdiv@exp& (0+255),w,b
 15324  001A0E  A4D8               	btfss	status,2,c
 15325  001A10  D007               	goto	l1677
 15326                           
 15327                           ; BSR set to: 0
 15328  001A12  0E00               	movlw	0
 15329  001A14  6E29               	movwf	?___ftdiv,c
 15330  001A16  0E00               	movlw	0
 15331  001A18  6E2A               	movwf	?___ftdiv+1,c
 15332  001A1A  0E00               	movlw	0
 15333  001A1C  6E2B               	movwf	?___ftdiv+2,c
 15334                           
 15335                           ; BSR set to: 0
 15336  001A1E  0012               	return	
 15337  001A20                     l1677:
 15338                           
 15339                           ; BSR set to: 0
 15340                           
 15341                           ; BSR set to: 0
 15342  001A20  C02E  F060         	movff	___ftdiv@f2+2,??___ftdiv
 15343  001A24  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 15344  001A26  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 15345  001A28  342D               	rlcf	___ftdiv@f2+1,w,c
 15346  001A2A  3760               	rlcf	??___ftdiv& (0+255),f,b
 15347  001A2C  E301               	bnc	u6901
 15348  001A2E  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 15349  001A30                     u6901:
 15350  001A30  5160               	movf	??___ftdiv& (0+255),w,b
 15351  001A32  6F68               	movwf	___ftdiv@sign& (0+255),b
 15352  001A34  5168               	movf	___ftdiv@sign& (0+255),w,b
 15353  001A36  A4D8               	btfss	status,2,c
 15354  001A38  D007               	goto	l1679
 15355                           
 15356                           ; BSR set to: 0
 15357  001A3A  0E00               	movlw	0
 15358  001A3C  6E29               	movwf	?___ftdiv,c
 15359  001A3E  0E00               	movlw	0
 15360  001A40  6E2A               	movwf	?___ftdiv+1,c
 15361  001A42  0E00               	movlw	0
 15362  001A44  6E2B               	movwf	?___ftdiv+2,c
 15363                           
 15364                           ; BSR set to: 0
 15365  001A46  0012               	return	
 15366  001A48                     l1679:
 15367                           
 15368                           ; BSR set to: 0
 15369                           
 15370                           ; BSR set to: 0
 15371  001A48  0E00               	movlw	0
 15372  001A4A  6F64               	movwf	___ftdiv@f3& (0+255),b
 15373  001A4C  0E00               	movlw	0
 15374  001A4E  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 15375  001A50  0E00               	movlw	0
 15376  001A52  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 15377                           
 15378                           ; BSR set to: 0
 15379  001A54  5168               	movf	___ftdiv@sign& (0+255),w,b
 15380  001A56  0F89               	addlw	137
 15381  001A58  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 15382                           
 15383                           ; BSR set to: 0
 15384  001A5A  C02B  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 15385                           
 15386                           ; BSR set to: 0
 15387  001A5E  502E               	movf	___ftdiv@f2+2,w,c
 15388  001A60  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 15389                           
 15390                           ; BSR set to: 0
 15391  001A62  0E80               	movlw	128
 15392  001A64  1768               	andwf	___ftdiv@sign& (0+255),f,b
 15393                           
 15394                           ; BSR set to: 0
 15395  001A66  8E2A               	bsf	___ftdiv@f1+1,7,c
 15396                           
 15397                           ; BSR set to: 0
 15398  001A68  0EFF               	movlw	255
 15399  001A6A  1629               	andwf	___ftdiv@f1,f,c
 15400  001A6C  0EFF               	movlw	255
 15401  001A6E  162A               	andwf	___ftdiv@f1+1,f,c
 15402  001A70  0E00               	movlw	0
 15403  001A72  162B               	andwf	___ftdiv@f1+2,f,c
 15404                           
 15405                           ; BSR set to: 0
 15406  001A74  8E2D               	bsf	___ftdiv@f2+1,7,c
 15407                           
 15408                           ; BSR set to: 0
 15409  001A76  0EFF               	movlw	255
 15410  001A78  162C               	andwf	___ftdiv@f2,f,c
 15411  001A7A  0EFF               	movlw	255
 15412  001A7C  162D               	andwf	___ftdiv@f2+1,f,c
 15413  001A7E  0E00               	movlw	0
 15414  001A80  162E               	andwf	___ftdiv@f2+2,f,c
 15415                           
 15416                           ; BSR set to: 0
 15417  001A82  0E18               	movlw	24
 15418  001A84  6F63               	movwf	___ftdiv@cntr& (0+255),b
 15419  001A86                     
 15420                           ; BSR set to: 0
 15421                           
 15422                           ; BSR set to: 0
 15423  001A86  90D8               	bcf	status,0,c
 15424  001A88  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 15425  001A8A  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 15426  001A8C  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 15427                           
 15428                           ; BSR set to: 0
 15429  001A8E  502C               	movf	___ftdiv@f2,w,c
 15430  001A90  5C29               	subwf	___ftdiv@f1,w,c
 15431  001A92  502D               	movf	___ftdiv@f2+1,w,c
 15432  001A94  582A               	subwfb	___ftdiv@f1+1,w,c
 15433  001A96  502E               	movf	___ftdiv@f2+2,w,c
 15434  001A98  582B               	subwfb	___ftdiv@f1+2,w,c
 15435  001A9A  A0D8               	btfss	status,0,c
 15436  001A9C  D007               	goto	l1681
 15437                           
 15438                           ; BSR set to: 0
 15439  001A9E  502C               	movf	___ftdiv@f2,w,c
 15440  001AA0  5E29               	subwf	___ftdiv@f1,f,c
 15441  001AA2  502D               	movf	___ftdiv@f2+1,w,c
 15442  001AA4  5A2A               	subwfb	___ftdiv@f1+1,f,c
 15443  001AA6  502E               	movf	___ftdiv@f2+2,w,c
 15444  001AA8  5A2B               	subwfb	___ftdiv@f1+2,f,c
 15445                           
 15446                           ; BSR set to: 0
 15447  001AAA  8164               	bsf	___ftdiv@f3& (0+255),0,b
 15448  001AAC                     l1681:
 15449                           
 15450                           ; BSR set to: 0
 15451  001AAC  90D8               	bcf	status,0,c
 15452  001AAE  3629               	rlcf	___ftdiv@f1,f,c
 15453  001AB0  362A               	rlcf	___ftdiv@f1+1,f,c
 15454  001AB2  362B               	rlcf	___ftdiv@f1+2,f,c
 15455                           
 15456                           ; BSR set to: 0
 15457  001AB4  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 15458  001AB6  D7E7               	goto	l1680
 15459                           
 15460                           ; BSR set to: 0
 15461                           
 15462                           ; BSR set to: 0
 15463  001AB8  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 15464  001ABC  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 15465  001AC0  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 15466  001AC4  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 15467  001AC8  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 15468  001ACC  EC92  F010         	call	___ftpack	;wreg free
 15469  001AD0  C018  F029         	movff	?___ftpack,?___ftdiv
 15470  001AD4  C019  F02A         	movff	?___ftpack+1,?___ftdiv+1
 15471  001AD8  C01A  F02B         	movff	?___ftpack+2,?___ftdiv+2
 15472  001ADC  0012               	return	
 15473  001ADE                     __end_of___ftdiv:
 15474                           	opt stack 0
 15475                           tosu	equ	0xFFF
 15476                           tosh	equ	0xFFE
 15477                           tosl	equ	0xFFD
 15478                           pclath	equ	0xFFA
 15479                           tblptru	equ	0xFF8
 15480                           tblptrh	equ	0xFF7
 15481                           tblptrl	equ	0xFF6
 15482                           tablat	equ	0xFF5
 15483                           prodh	equ	0xFF4
 15484                           prodl	equ	0xFF3
 15485                           intcon	equ	0xFF2
 15486                           intcon2	equ	0xFF1
 15487                           postinc0	equ	0xFEE
 15488                           wreg	equ	0xFE8
 15489                           indf1	equ	0xFE7
 15490                           postdec1	equ	0xFE5
 15491                           fsr1h	equ	0xFE2
 15492                           fsr1l	equ	0xFE1
 15493                           indf2	equ	0xFDF
 15494                           postinc2	equ	0xFDE
 15495                           postdec2	equ	0xFDD
 15496                           fsr2h	equ	0xFDA
 15497                           fsr2l	equ	0xFD9
 15498                           status	equ	0xFD8
 15499                           
 15500 ;; *************** function ___awtoft *****************
 15501 ;; Defined at:
 15502 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 15503 ;; Parameters:    Size  Location     Type
 15504 ;;  c               2   31[COMRAM] int 
 15505 ;; Auto vars:     Size  Location     Type
 15506 ;;  sign            1   34[COMRAM] unsigned char 
 15507 ;; Return value:  Size  Location     Type
 15508 ;;                  3   31[COMRAM] float 
 15509 ;; Registers used:
 15510 ;;		wreg, status,2, status,0, cstack
 15511 ;; Tracked objects:
 15512 ;;		On entry : 0/0
 15513 ;;		On exit  : 0/0
 15514 ;;		Unchanged: 0/0
 15515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15516 ;;      Params:         3       0       0       0       0       0       0
 15517 ;;      Locals:         1       0       0       0       0       0       0
 15518 ;;      Temps:          0       0       0       0       0       0       0
 15519 ;;      Totals:         4       0       0       0       0       0       0
 15520 ;;Total ram usage:        4 bytes
 15521 ;; Hardware stack levels used:    1
 15522 ;; Hardware stack levels required when called:    4
 15523 ;; This function calls:
 15524 ;;		___ftpack
 15525 ;; This function is called by:
 15526 ;;		_exp
 15527 ;;		_log
 15528 ;; This function uses a non-reentrant model
 15529 ;;
 15530                           
 15531                           	psect	text102
 15532  00322A                     __ptext102:
 15533                           	opt stack 0
 15534  00322A                     ___awtoft:
 15535                           	opt stack 23
 15536                           
 15537                           ;incstack = 0
 15538  00322A  0E00               	movlw	0
 15539  00322C  6E23               	movwf	___awtoft@sign,c
 15540  00322E  AE21               	btfss	___awtoft@c+1,7,c
 15541  003230  D006               	goto	l1594
 15542  003232  6C20               	negf	___awtoft@c,c
 15543  003234  1E21               	comf	___awtoft@c+1,f,c
 15544  003236  B0D8               	btfsc	status,0,c
 15545  003238  2A21               	incf	___awtoft@c+1,f,c
 15546  00323A  0E01               	movlw	1
 15547  00323C  6E23               	movwf	___awtoft@sign,c
 15548  00323E                     l1594:
 15549  00323E  C020  F018         	movff	___awtoft@c,___ftpack@arg
 15550  003242  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 15551  003246  6A1A               	clrf	___ftpack@arg+2,c
 15552  003248  0E8E               	movlw	142
 15553  00324A  6E1B               	movwf	___ftpack@exp,c
 15554  00324C  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 15555  003250  EC92  F010         	call	___ftpack	;wreg free
 15556  003254  C018  F020         	movff	?___ftpack,?___awtoft
 15557  003258  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 15558  00325C  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 15559  003260  0012               	return	
 15560  003262                     __end_of___awtoft:
 15561                           	opt stack 0
 15562                           tosu	equ	0xFFF
 15563                           tosh	equ	0xFFE
 15564                           tosl	equ	0xFFD
 15565                           pclath	equ	0xFFA
 15566                           tblptru	equ	0xFF8
 15567                           tblptrh	equ	0xFF7
 15568                           tblptrl	equ	0xFF6
 15569                           tablat	equ	0xFF5
 15570                           prodh	equ	0xFF4
 15571                           prodl	equ	0xFF3
 15572                           intcon	equ	0xFF2
 15573                           intcon2	equ	0xFF1
 15574                           postinc0	equ	0xFEE
 15575                           wreg	equ	0xFE8
 15576                           indf1	equ	0xFE7
 15577                           postdec1	equ	0xFE5
 15578                           fsr1h	equ	0xFE2
 15579                           fsr1l	equ	0xFE1
 15580                           indf2	equ	0xFDF
 15581                           postinc2	equ	0xFDE
 15582                           postdec2	equ	0xFDD
 15583                           fsr2h	equ	0xFDA
 15584                           fsr2l	equ	0xFD9
 15585                           status	equ	0xFD8
 15586                           
 15587 ;; *************** function ___lltoft *****************
 15588 ;; Defined at:
 15589 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 15590 ;; Parameters:    Size  Location     Type
 15591 ;;  c               4   31[COMRAM] unsigned long 
 15592 ;; Auto vars:     Size  Location     Type
 15593 ;;  exp             1   39[COMRAM] unsigned char 
 15594 ;; Return value:  Size  Location     Type
 15595 ;;                  3   31[COMRAM] float 
 15596 ;; Registers used:
 15597 ;;		wreg, status,2, status,0, cstack
 15598 ;; Tracked objects:
 15599 ;;		On entry : 0/0
 15600 ;;		On exit  : 0/0
 15601 ;;		Unchanged: 0/0
 15602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15603 ;;      Params:         4       0       0       0       0       0       0
 15604 ;;      Locals:         1       0       0       0       0       0       0
 15605 ;;      Temps:          4       0       0       0       0       0       0
 15606 ;;      Totals:         9       0       0       0       0       0       0
 15607 ;;Total ram usage:        9 bytes
 15608 ;; Hardware stack levels used:    1
 15609 ;; Hardware stack levels required when called:    4
 15610 ;; This function calls:
 15611 ;;		___ftpack
 15612 ;; This function is called by:
 15613 ;;		_CheckFlashPrecentage
 15614 ;;		_pow
 15615 ;; This function uses a non-reentrant model
 15616 ;;
 15617                           
 15618                           	psect	text103
 15619  002A94                     __ptext103:
 15620                           	opt stack 0
 15621  002A94                     ___lltoft:
 15622                           	opt stack 25
 15623                           
 15624                           ;incstack = 0
 15625  002A94  0E8E               	movlw	142
 15626  002A96  6E28               	movwf	___lltoft@exp,c
 15627  002A98  D006               	goto	l1770
 15628  002A9A  90D8               	bcf	status,0,c
 15629  002A9C  3223               	rrcf	___lltoft@c+3,f,c
 15630  002A9E  3222               	rrcf	___lltoft@c+2,f,c
 15631  002AA0  3221               	rrcf	___lltoft@c+1,f,c
 15632  002AA2  3220               	rrcf	___lltoft@c,f,c
 15633  002AA4  2A28               	incf	___lltoft@exp,f,c
 15634  002AA6                     l1770:
 15635  002AA6  0E00               	movlw	0
 15636  002AA8  1420               	andwf	___lltoft@c,w,c
 15637  002AAA  6E24               	movwf	??___lltoft& (0+255),c
 15638  002AAC  0E00               	movlw	0
 15639  002AAE  1421               	andwf	___lltoft@c+1,w,c
 15640  002AB0  6E25               	movwf	(??___lltoft+1)& (0+255),c
 15641  002AB2  0E00               	movlw	0
 15642  002AB4  1422               	andwf	___lltoft@c+2,w,c
 15643  002AB6  6E26               	movwf	(??___lltoft+2)& (0+255),c
 15644  002AB8  0EFF               	movlw	255
 15645  002ABA  1423               	andwf	___lltoft@c+3,w,c
 15646  002ABC  6E27               	movwf	(??___lltoft+3)& (0+255),c
 15647  002ABE  5024               	movf	??___lltoft,w,c
 15648  002AC0  1025               	iorwf	??___lltoft+1,w,c
 15649  002AC2  1026               	iorwf	??___lltoft+2,w,c
 15650  002AC4  1027               	iorwf	??___lltoft+3,w,c
 15651  002AC6  A4D8               	btfss	status,2,c
 15652  002AC8  D7E8               	goto	l1771
 15653  002ACA  C020  F018         	movff	___lltoft@c,___ftpack@arg
 15654  002ACE  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 15655  002AD2  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 15656  002AD6  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 15657  002ADA  0E00               	movlw	0
 15658  002ADC  6E1C               	movwf	___ftpack@sign,c
 15659  002ADE  EC92  F010         	call	___ftpack	;wreg free
 15660  002AE2  C018  F020         	movff	?___ftpack,?___lltoft
 15661  002AE6  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 15662  002AEA  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 15663  002AEE  0012               	return	
 15664  002AF0                     __end_of___lltoft:
 15665                           	opt stack 0
 15666                           tosu	equ	0xFFF
 15667                           tosh	equ	0xFFE
 15668                           tosl	equ	0xFFD
 15669                           pclath	equ	0xFFA
 15670                           tblptru	equ	0xFF8
 15671                           tblptrh	equ	0xFF7
 15672                           tblptrl	equ	0xFF6
 15673                           tablat	equ	0xFF5
 15674                           prodh	equ	0xFF4
 15675                           prodl	equ	0xFF3
 15676                           intcon	equ	0xFF2
 15677                           intcon2	equ	0xFF1
 15678                           postinc0	equ	0xFEE
 15679                           wreg	equ	0xFE8
 15680                           indf1	equ	0xFE7
 15681                           postdec1	equ	0xFE5
 15682                           fsr1h	equ	0xFE2
 15683                           fsr1l	equ	0xFE1
 15684                           indf2	equ	0xFDF
 15685                           postinc2	equ	0xFDE
 15686                           postdec2	equ	0xFDD
 15687                           fsr2h	equ	0xFDA
 15688                           fsr2l	equ	0xFD9
 15689                           status	equ	0xFD8
 15690                           
 15691 ;; *************** function ___lwtoft *****************
 15692 ;; Defined at:
 15693 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 15694 ;; Parameters:    Size  Location     Type
 15695 ;;  c               2   31[COMRAM] unsigned int 
 15696 ;; Auto vars:     Size  Location     Type
 15697 ;;		None
 15698 ;; Return value:  Size  Location     Type
 15699 ;;                  3   31[COMRAM] float 
 15700 ;; Registers used:
 15701 ;;		wreg, status,2, status,0, cstack
 15702 ;; Tracked objects:
 15703 ;;		On entry : 0/0
 15704 ;;		On exit  : 0/0
 15705 ;;		Unchanged: 0/0
 15706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15707 ;;      Params:         3       0       0       0       0       0       0
 15708 ;;      Locals:         0       0       0       0       0       0       0
 15709 ;;      Temps:          0       0       0       0       0       0       0
 15710 ;;      Totals:         3       0       0       0       0       0       0
 15711 ;;Total ram usage:        3 bytes
 15712 ;; Hardware stack levels used:    1
 15713 ;; Hardware stack levels required when called:    4
 15714 ;; This function calls:
 15715 ;;		___ftpack
 15716 ;; This function is called by:
 15717 ;;		_AdcConvert
 15718 ;; This function uses a non-reentrant model
 15719 ;;
 15720                           
 15721                           	psect	text104
 15722  00357C                     __ptext104:
 15723                           	opt stack 0
 15724  00357C                     ___lwtoft:
 15725                           	opt stack 25
 15726                           
 15727                           ;incstack = 0
 15728  00357C  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 15729  003580  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 15730  003584  6A1A               	clrf	___ftpack@arg+2,c
 15731  003586  0E8E               	movlw	142
 15732  003588  6E1B               	movwf	___ftpack@exp,c
 15733  00358A  0E00               	movlw	0
 15734  00358C  6E1C               	movwf	___ftpack@sign,c
 15735  00358E  EC92  F010         	call	___ftpack	;wreg free
 15736  003592  C018  F020         	movff	?___ftpack,?___lwtoft
 15737  003596  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 15738  00359A  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 15739  00359E  0012               	return	
 15740  0035A0                     __end_of___lwtoft:
 15741                           	opt stack 0
 15742                           tosu	equ	0xFFF
 15743                           tosh	equ	0xFFE
 15744                           tosl	equ	0xFFD
 15745                           pclath	equ	0xFFA
 15746                           tblptru	equ	0xFF8
 15747                           tblptrh	equ	0xFF7
 15748                           tblptrl	equ	0xFF6
 15749                           tablat	equ	0xFF5
 15750                           prodh	equ	0xFF4
 15751                           prodl	equ	0xFF3
 15752                           intcon	equ	0xFF2
 15753                           intcon2	equ	0xFF1
 15754                           postinc0	equ	0xFEE
 15755                           wreg	equ	0xFE8
 15756                           indf1	equ	0xFE7
 15757                           postdec1	equ	0xFE5
 15758                           fsr1h	equ	0xFE2
 15759                           fsr1l	equ	0xFE1
 15760                           indf2	equ	0xFDF
 15761                           postinc2	equ	0xFDE
 15762                           postdec2	equ	0xFDD
 15763                           fsr2h	equ	0xFDA
 15764                           fsr2l	equ	0xFD9
 15765                           status	equ	0xFD8
 15766                           
 15767 ;; *************** function ___ftpack *****************
 15768 ;; Defined at:
 15769 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 15770 ;; Parameters:    Size  Location     Type
 15771 ;;  arg             3   23[COMRAM] unsigned um
 15772 ;;  exp             1   26[COMRAM] unsigned char 
 15773 ;;  sign            1   27[COMRAM] unsigned char 
 15774 ;; Auto vars:     Size  Location     Type
 15775 ;;		None
 15776 ;; Return value:  Size  Location     Type
 15777 ;;                  3   23[COMRAM] float 
 15778 ;; Registers used:
 15779 ;;		wreg, status,2, status,0
 15780 ;; Tracked objects:
 15781 ;;		On entry : 0/0
 15782 ;;		On exit  : 0/0
 15783 ;;		Unchanged: 0/0
 15784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15785 ;;      Params:         5       0       0       0       0       0       0
 15786 ;;      Locals:         0       0       0       0       0       0       0
 15787 ;;      Temps:          3       0       0       0       0       0       0
 15788 ;;      Totals:         8       0       0       0       0       0       0
 15789 ;;Total ram usage:        8 bytes
 15790 ;; Hardware stack levels used:    1
 15791 ;; Hardware stack levels required when called:    3
 15792 ;; This function calls:
 15793 ;;		Nothing
 15794 ;; This function is called by:
 15795 ;;		___altoft
 15796 ;;		___awtoft
 15797 ;;		___ftadd
 15798 ;;		___ftdiv
 15799 ;;		___ftmul
 15800 ;;		___lltoft
 15801 ;;		___lwtoft
 15802 ;; This function uses a non-reentrant model
 15803 ;;
 15804                           
 15805                           	psect	text105
 15806  002124                     __ptext105:
 15807                           	opt stack 0
 15808  002124                     ___ftpack:
 15809                           	opt stack 25
 15810                           
 15811                           ;incstack = 0
 15812  002124  501B               	movf	___ftpack@exp,w,c
 15813  002126  B4D8               	btfsc	status,2,c
 15814  002128  D005               	goto	u6020
 15815  00212A  5018               	movf	___ftpack@arg,w,c
 15816  00212C  1019               	iorwf	___ftpack@arg+1,w,c
 15817  00212E  101A               	iorwf	___ftpack@arg+2,w,c
 15818  002130  A4D8               	btfss	status,2,c
 15819  002132  D00C               	goto	l1613
 15820  002134                     u6020:
 15821  002134  0E00               	movlw	0
 15822  002136  6E18               	movwf	?___ftpack,c
 15823  002138  0E00               	movlw	0
 15824  00213A  6E19               	movwf	?___ftpack+1,c
 15825  00213C  0E00               	movlw	0
 15826  00213E  6E1A               	movwf	?___ftpack+2,c
 15827  002140  0012               	return	
 15828  002142  2A1B               	incf	___ftpack@exp,f,c
 15829  002144  90D8               	bcf	status,0,c
 15830  002146  321A               	rrcf	___ftpack@arg+2,f,c
 15831  002148  3219               	rrcf	___ftpack@arg+1,f,c
 15832  00214A  3218               	rrcf	___ftpack@arg,f,c
 15833  00214C                     l1613:
 15834  00214C  0E00               	movlw	0
 15835  00214E  1418               	andwf	___ftpack@arg,w,c
 15836  002150  6E1D               	movwf	??___ftpack& (0+255),c
 15837  002152  0E00               	movlw	0
 15838  002154  1419               	andwf	___ftpack@arg+1,w,c
 15839  002156  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 15840  002158  0EFE               	movlw	254
 15841  00215A  141A               	andwf	___ftpack@arg+2,w,c
 15842  00215C  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 15843  00215E  501D               	movf	??___ftpack,w,c
 15844  002160  101E               	iorwf	??___ftpack+1,w,c
 15845  002162  101F               	iorwf	??___ftpack+2,w,c
 15846  002164  B4D8               	btfsc	status,2,c
 15847  002166  D00C               	goto	l1616
 15848  002168  D7EC               	goto	l1614
 15849  00216A  2A1B               	incf	___ftpack@exp,f,c
 15850  00216C  0E01               	movlw	1
 15851  00216E  2618               	addwf	___ftpack@arg,f,c
 15852  002170  0E00               	movlw	0
 15853  002172  2219               	addwfc	___ftpack@arg+1,f,c
 15854  002174  0E00               	movlw	0
 15855  002176  221A               	addwfc	___ftpack@arg+2,f,c
 15856  002178  90D8               	bcf	status,0,c
 15857  00217A  321A               	rrcf	___ftpack@arg+2,f,c
 15858  00217C  3219               	rrcf	___ftpack@arg+1,f,c
 15859  00217E  3218               	rrcf	___ftpack@arg,f,c
 15860  002180                     l1616:
 15861  002180  0E00               	movlw	0
 15862  002182  1418               	andwf	___ftpack@arg,w,c
 15863  002184  6E1D               	movwf	??___ftpack& (0+255),c
 15864  002186  0E00               	movlw	0
 15865  002188  1419               	andwf	___ftpack@arg+1,w,c
 15866  00218A  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 15867  00218C  0EFF               	movlw	255
 15868  00218E  141A               	andwf	___ftpack@arg+2,w,c
 15869  002190  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 15870  002192  501D               	movf	??___ftpack,w,c
 15871  002194  101E               	iorwf	??___ftpack+1,w,c
 15872  002196  101F               	iorwf	??___ftpack+2,w,c
 15873  002198  B4D8               	btfsc	status,2,c
 15874  00219A  D006               	goto	l1619
 15875  00219C  D7E6               	goto	l1617
 15876  00219E  061B               	decf	___ftpack@exp,f,c
 15877  0021A0  90D8               	bcf	status,0,c
 15878  0021A2  3618               	rlcf	___ftpack@arg,f,c
 15879  0021A4  3619               	rlcf	___ftpack@arg+1,f,c
 15880  0021A6  361A               	rlcf	___ftpack@arg+2,f,c
 15881  0021A8                     l1619:
 15882  0021A8  BE19               	btfsc	___ftpack@arg+1,7,c
 15883  0021AA  D003               	goto	u6060
 15884  0021AC  0E02               	movlw	2
 15885  0021AE  601B               	cpfslt	___ftpack@exp,c
 15886  0021B0  D7F6               	goto	l1620
 15887  0021B2                     u6060:
 15888  0021B2  A01B               	btfss	___ftpack@exp,0,c
 15889  0021B4  9E19               	bcf	___ftpack@arg+1,7,c
 15890  0021B6  90D8               	bcf	status,0,c
 15891  0021B8  321B               	rrcf	___ftpack@exp,f,c
 15892  0021BA  501B               	movf	___ftpack@exp,w,c
 15893  0021BC  121A               	iorwf	___ftpack@arg+2,f,c
 15894  0021BE  501C               	movf	___ftpack@sign,w,c
 15895  0021C0  A4D8               	btfss	status,2,c
 15896  0021C2  8E1A               	bsf	___ftpack@arg+2,7,c
 15897  0021C4  C018  F018         	movff	___ftpack@arg,?___ftpack
 15898  0021C8  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 15899  0021CC  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 15900  0021D0  0012               	return	
 15901  0021D2                     __end_of___ftpack:
 15902                           	opt stack 0
 15903                           tosu	equ	0xFFF
 15904                           tosh	equ	0xFFE
 15905                           tosl	equ	0xFFD
 15906                           pclath	equ	0xFFA
 15907                           tblptru	equ	0xFF8
 15908                           tblptrh	equ	0xFF7
 15909                           tblptrl	equ	0xFF6
 15910                           tablat	equ	0xFF5
 15911                           prodh	equ	0xFF4
 15912                           prodl	equ	0xFF3
 15913                           intcon	equ	0xFF2
 15914                           intcon2	equ	0xFF1
 15915                           postinc0	equ	0xFEE
 15916                           wreg	equ	0xFE8
 15917                           indf1	equ	0xFE7
 15918                           postdec1	equ	0xFE5
 15919                           fsr1h	equ	0xFE2
 15920                           fsr1l	equ	0xFE1
 15921                           indf2	equ	0xFDF
 15922                           postinc2	equ	0xFDE
 15923                           postdec2	equ	0xFDD
 15924                           fsr2h	equ	0xFDA
 15925                           fsr2l	equ	0xFD9
 15926                           status	equ	0xFD8
 15927                           
 15928 ;; *************** function _FlashSampleWrite *****************
 15929 ;; Defined at:
 15930 ;;		line 29 in file "FlashApp.c"
 15931 ;; Parameters:    Size  Location     Type
 15932 ;;  sampleData      2   44[COMRAM] unsigned int 
 15933 ;;  channelNum      1   46[COMRAM] unsigned char 
 15934 ;; Auto vars:     Size  Location     Type
 15935 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 15936 ;; Return value:  Size  Location     Type
 15937 ;;                  1    wreg      void 
 15938 ;; Registers used:
 15939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15940 ;; Tracked objects:
 15941 ;;		On entry : 0/0
 15942 ;;		On exit  : 0/0
 15943 ;;		Unchanged: 0/0
 15944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15945 ;;      Params:         3       0       0       0       0       0       0
 15946 ;;      Locals:         0       2       0       0       0       0       0
 15947 ;;      Temps:          0       2       0       0       0       0       0
 15948 ;;      Totals:         3       4       0       0       0       0       0
 15949 ;;Total ram usage:        7 bytes
 15950 ;; Hardware stack levels used:    1
 15951 ;; Hardware stack levels required when called:    5
 15952 ;; This function calls:
 15953 ;;		_FLASH_IsWriteDone
 15954 ;;		_FLASH_WriteBlock
 15955 ;; This function is called by:
 15956 ;;		_AdcConvert
 15957 ;; This function uses a non-reentrant model
 15958 ;;
 15959                           
 15960                           	psect	text106
 15961  00170E                     __ptext106:
 15962                           	opt stack 0
 15963  00170E                     _FlashSampleWrite:
 15964                           	opt stack 24
 15965                           
 15966                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 15967                           
 15968                           ;incstack = 0
 15969  00170E  502F               	movf	FlashSampleWrite@channelNum,w,c
 15970  001710  0100               	movlb	0	; () banked
 15971  001712  6F60               	movwf	??_FlashSampleWrite& (0+255),b
 15972  001714  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
 15973  001716  0E0C               	movlw	12
 15974  001718                     u7685:
 15975  001718  90D8               	bcf	status,0,c
 15976  00171A  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 15977  00171C  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 15978  00171E  2EE8               	decfsz	wreg,f,c
 15979  001720  D7FB               	goto	u7685
 15980  001722  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 15981  001726  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 15982                           
 15983                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 15984  00172A  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 15985  00172C  122D               	iorwf	FlashSampleWrite@sampleData,f,c
 15986  00172E  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 15987  001730  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
 15988                           
 15989                           ; BSR set to: 0
 15990                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 15991  001732  90D8               	bcf	status,0,c
 15992  001734  35C7               	rlcf	_sampleCount& (0+255),w,b
 15993  001736  6ED9               	movwf	fsr2l,c
 15994  001738  35C8               	rlcf	(_sampleCount+1)& (0+255),w,b
 15995  00173A  6EDA               	movwf	fsr2h,c
 15996  00173C  0E6E               	movlw	low _sampleArray
 15997  00173E  26D9               	addwf	fsr2l,f,c
 15998  001740  0E01               	movlw	high _sampleArray
 15999  001742  22DA               	addwfc	fsr2h,f,c
 16000  001744  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 16001  001748  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 16002                           
 16003                           ; BSR set to: 0
 16004                           ;FlashApp.c: 35: sampleCount ++;
 16005  00174C  4BC7               	infsnz	_sampleCount& (0+255),f,b
 16006  00174E  2BC8               	incf	(_sampleCount+1)& (0+255),f,b
 16007                           
 16008                           ; BSR set to: 0
 16009                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 16010  001750  C0C7  F060         	movff	_sampleCount,??_FlashSampleWrite
 16011  001754  C0C8  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
 16012  001758  90D8               	bcf	status,0,c
 16013  00175A  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 16014  00175C  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 16015  00175E  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 16016  001760  E104               	bnz	u7690
 16017  001762  0E40               	movlw	64
 16018  001764  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
 16019  001766  A0D8               	btfss	status,0,c
 16020  001768  0012               	return	
 16021  00176A                     u7690:
 16022                           
 16023                           ; BSR set to: 0
 16024  00176A  ECA5  F01B         	call	_FLASH_IsWriteDone	;wreg free
 16025  00176E  0900               	iorlw	0
 16026  001770  B4D8               	btfsc	status,2,c
 16027  001772  0012               	return	
 16028                           
 16029                           ;FlashApp.c: 38: {
 16030                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 16031  001774  C042  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 16032  001778  C043  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 16033  00177C  C044  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 16034  001780  C045  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 16035  001784  0E6E               	movlw	low _sampleArray
 16036  001786  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 16037  001788  0E01               	movlw	high _sampleArray
 16038  00178A  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 16039  00178C  EC80  F00F         	call	_FLASH_WriteBlock	;wreg free
 16040                           
 16041                           ;FlashApp.c: 40: writeAddress += (64);
 16042  001790  0E40               	movlw	64
 16043  001792  2642               	addwf	_writeAddress,f,c
 16044  001794  0E00               	movlw	0
 16045  001796  2243               	addwfc	_writeAddress+1,f,c
 16046  001798  2244               	addwfc	_writeAddress+2,f,c
 16047  00179A  2245               	addwfc	_writeAddress+3,f,c
 16048                           
 16049                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 16050  00179C  5045               	movf	_writeAddress+3,w,c
 16051  00179E  1044               	iorwf	_writeAddress+2,w,c
 16052  0017A0  E106               	bnz	u7710
 16053  0017A2  0EF0               	movlw	240
 16054  0017A4  5C42               	subwf	_writeAddress,w,c
 16055  0017A6  0E7F               	movlw	127
 16056  0017A8  5843               	subwfb	_writeAddress+1,w,c
 16057  0017AA  A0D8               	btfss	status,0,c
 16058  0017AC  D018               	goto	l283
 16059  0017AE                     u7710:
 16060                           
 16061                           ;FlashApp.c: 42: {
 16062                           ;FlashApp.c: 43: writeAddress = 0x4000;
 16063  0017AE  0E00               	movlw	0
 16064  0017B0  6E42               	movwf	_writeAddress,c
 16065  0017B2  0E40               	movlw	64
 16066  0017B4  6E43               	movwf	_writeAddress+1,c
 16067  0017B6  0E00               	movlw	0
 16068  0017B8  6E44               	movwf	_writeAddress+2,c
 16069  0017BA  0E00               	movlw	0
 16070  0017BC  6E45               	movwf	_writeAddress+3,c
 16071                           
 16072                           ;FlashApp.c: 44: isReWriteDone = 1;
 16073  0017BE  0E01               	movlw	1
 16074  0017C0  6E3C               	movwf	_isReWriteDone,c
 16075                           
 16076                           ;FlashApp.c: 45: if (readAddress == 0x4000)
 16077  0017C2  0E40               	movlw	64
 16078  0017C4  0100               	movlb	0	; () banked
 16079  0017C6  19FA               	xorwf	(_readAddress+1)& (0+255),w,b
 16080  0017C8  11F9               	iorwf	_readAddress& (0+255),w,b
 16081  0017CA  11FB               	iorwf	(_readAddress+2)& (0+255),w,b
 16082  0017CC  11FC               	iorwf	(_readAddress+3)& (0+255),w,b
 16083  0017CE  A4D8               	btfss	status,2,c
 16084  0017D0  D006               	goto	l283
 16085                           
 16086                           ; BSR set to: 0
 16087                           ;FlashApp.c: 46: {
 16088                           ;FlashApp.c: 47: readAddress += (64);
 16089  0017D2  0E40               	movlw	64
 16090  0017D4  27F9               	addwf	_readAddress& (0+255),f,b
 16091  0017D6  0E00               	movlw	0
 16092  0017D8  23FA               	addwfc	(_readAddress+1)& (0+255),f,b
 16093  0017DA  23FB               	addwfc	(_readAddress+2)& (0+255),f,b
 16094  0017DC  23FC               	addwfc	(_readAddress+3)& (0+255),f,b
 16095  0017DE                     l283:
 16096                           
 16097                           ;FlashApp.c: 48: }
 16098                           ;FlashApp.c: 49: }
 16099                           ;FlashApp.c: 51: if (numOfValidateSamples < ((0x4000-0x7FF0)/(64)))
 16100                           
 16101                           ; BSR set to: 0
 16102  0017DE  0431               	decf	_numOfValidateSamples,w,c
 16103  0017E0  0EFF               	movlw	255
 16104  0017E2  5832               	subwfb	_numOfValidateSamples+1,w,c
 16105  0017E4  0EFF               	movlw	255
 16106  0017E6  5833               	subwfb	_numOfValidateSamples+2,w,c
 16107  0017E8  0EFF               	movlw	255
 16108  0017EA  5834               	subwfb	_numOfValidateSamples+3,w,c
 16109  0017EC  B0D8               	btfsc	status,0,c
 16110  0017EE  D006               	goto	l284
 16111                           
 16112                           ;FlashApp.c: 52: {
 16113                           ;FlashApp.c: 53: numOfValidateSamples++;
 16114  0017F0  0E01               	movlw	1
 16115  0017F2  2631               	addwf	_numOfValidateSamples,f,c
 16116  0017F4  0E00               	movlw	0
 16117  0017F6  2232               	addwfc	_numOfValidateSamples+1,f,c
 16118  0017F8  2233               	addwfc	_numOfValidateSamples+2,f,c
 16119  0017FA  2234               	addwfc	_numOfValidateSamples+3,f,c
 16120  0017FC                     l284:
 16121                           
 16122                           ;FlashApp.c: 54: }
 16123                           ;FlashApp.c: 55: sampleCount = 0;
 16124  0017FC  0E00               	movlw	0
 16125  0017FE  0100               	movlb	0	; () banked
 16126  001800  6FC8               	movwf	(_sampleCount+1)& (0+255),b
 16127  001802  0E00               	movlw	0
 16128  001804  6FC7               	movwf	_sampleCount& (0+255),b
 16129  001806  0012               	return	
 16130  001808                     __end_of_FlashSampleWrite:
 16131                           	opt stack 0
 16132                           tosu	equ	0xFFF
 16133                           tosh	equ	0xFFE
 16134                           tosl	equ	0xFFD
 16135                           pclath	equ	0xFFA
 16136                           tblptru	equ	0xFF8
 16137                           tblptrh	equ	0xFF7
 16138                           tblptrl	equ	0xFF6
 16139                           tablat	equ	0xFF5
 16140                           prodh	equ	0xFF4
 16141                           prodl	equ	0xFF3
 16142                           intcon	equ	0xFF2
 16143                           intcon2	equ	0xFF1
 16144                           postinc0	equ	0xFEE
 16145                           wreg	equ	0xFE8
 16146                           indf1	equ	0xFE7
 16147                           postdec1	equ	0xFE5
 16148                           fsr1h	equ	0xFE2
 16149                           fsr1l	equ	0xFE1
 16150                           indf2	equ	0xFDF
 16151                           postinc2	equ	0xFDE
 16152                           postdec2	equ	0xFDD
 16153                           fsr2h	equ	0xFDA
 16154                           fsr2l	equ	0xFD9
 16155                           status	equ	0xFD8
 16156                           
 16157 ;; *************** function _FLASH_WriteBlock *****************
 16158 ;; Defined at:
 16159 ;;		line 93 in file "mcc_generated_files/memory.c"
 16160 ;; Parameters:    Size  Location     Type
 16161 ;;  writeAddr       4   28[COMRAM] unsigned long 
 16162 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 16163 ;;		 -> FlashTest@buff(128), sampleArray(64), 
 16164 ;; Auto vars:     Size  Location     Type
 16165 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 16166 ;;  i               1   43[COMRAM] unsigned char 
 16167 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 16168 ;; Return value:  Size  Location     Type
 16169 ;;                  1    wreg      char 
 16170 ;; Registers used:
 16171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16172 ;; Tracked objects:
 16173 ;;		On entry : 0/0
 16174 ;;		On exit  : 0/0
 16175 ;;		Unchanged: 0/0
 16176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16177 ;;      Params:         6       0       0       0       0       0       0
 16178 ;;      Locals:         6       0       0       0       0       0       0
 16179 ;;      Temps:          4       0       0       0       0       0       0
 16180 ;;      Totals:        16       0       0       0       0       0       0
 16181 ;;Total ram usage:       16 bytes
 16182 ;; Hardware stack levels used:    1
 16183 ;; Hardware stack levels required when called:    4
 16184 ;; This function calls:
 16185 ;;		_FLASH_EraseBlock
 16186 ;; This function is called by:
 16187 ;;		_FlashSampleWrite
 16188 ;;		_FlashTest
 16189 ;;		_FLASH_WriteByte
 16190 ;; This function uses a non-reentrant model
 16191 ;;
 16192                           
 16193                           	psect	text107
 16194  001F00                     __ptext107:
 16195                           	opt stack 0
 16196  001F00                     _FLASH_WriteBlock:
 16197                           	opt stack 24
 16198                           
 16199                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 16200                           
 16201                           ;incstack = 0
 16202  001F00  0EC0               	movlw	192
 16203  001F02  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 16204  001F04  0E7F               	movlw	127
 16205  001F06  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 16206  001F08  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 16207  001F0C  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 16208  001F10  5023               	movf	??_FLASH_WriteBlock,w,c
 16209  001F12  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 16210  001F14  5024               	movf	??_FLASH_WriteBlock+1,w,c
 16211  001F16  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 16212  001F18  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 16213  001F1C  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 16214  001F20  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 16215  001F22  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 16216                           
 16217                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 16218  001F24  0E00               	movlw	0
 16219  001F26  BEF2               	btfsc	intcon,7,c	;volatile
 16220  001F28  0E01               	movlw	1
 16221  001F2A  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 16222                           
 16223                           ;memory.c: 97: uint8_t i;
 16224                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 16225  001F2C  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 16226  001F2E  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 16227  001F30  E144               	bnz	l887
 16228  001F32  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 16229  001F34  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 16230  001F36  E141               	bnz	l887
 16231  001F38  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 16232  001F3A  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 16233  001F3C  E13E               	bnz	l887
 16234  001F3E  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 16235  001F40  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 16236  001F42  A4D8               	btfss	status,2,c
 16237  001F44  0012               	return	
 16238                           
 16239                           ;memory.c: 103: }
 16240                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 16241                           
 16242                           ;memory.c: 101: {
 16243                           ;memory.c: 102: return -1;
 16244                           ;	Return value of _FLASH_WriteBlock is never used
 16245  001F46  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 16246  001F4A  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 16247  001F4E  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 16248  001F52  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 16249  001F56  ECD3  F019         	call	_FLASH_EraseBlock	;wreg free
 16250                           
 16251                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 16252  001F5A  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 16253                           
 16254                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 16255  001F5E  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 16256                           
 16257                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 16258  001F62  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 16259                           
 16260                           ;memory.c: 114: for (i=0; i<(64); i++)
 16261  001F66  0E00               	movlw	0
 16262  001F68  6E2C               	movwf	FLASH_WriteBlock@i,c
 16263  001F6A                     l7225:
 16264  001F6A  0E3F               	movlw	63
 16265  001F6C  642C               	cpfsgt	FLASH_WriteBlock@i,c
 16266  001F6E  D001               	goto	l888
 16267  001F70  D013               	goto	u7120
 16268  001F72                     l888:
 16269                           
 16270                           ;memory.c: 115: {
 16271                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 16272  001F72  502C               	movf	FLASH_WriteBlock@i,w,c
 16273  001F74  0D01               	mullw	1
 16274  001F76  50F3               	movf	prodl,w,c
 16275  001F78  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 16276  001F7A  6ED9               	movwf	fsr2l,c
 16277  001F7C  50F4               	movf	prodh,w,c
 16278  001F7E  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 16279  001F80  6EDA               	movwf	fsr2h,c
 16280  001F82  50DF               	movf	indf2,w,c
 16281  001F84  6EF5               	movwf	tablat,c	;volatile
 16282                           
 16283                           ;memory.c: 118: if (i == ((64)-1))
 16284  001F86  0E3F               	movlw	63
 16285  001F88  182C               	xorwf	FLASH_WriteBlock@i,w,c
 16286  001F8A  A4D8               	btfss	status,2,c
 16287  001F8C  D002               	goto	l890
 16288  001F8E  000C               	tblwt		*	;# 
 16289                           
 16290                           ;memory.c: 121: }
 16291  001F90  D001               	goto	l891
 16292  001F92                     l890:
 16293  001F92  000D               	tblwt		*+	;# 
 16294  001F94                     l891:
 16295  001F94  2A2C               	incf	FLASH_WriteBlock@i,f,c
 16296  001F96  D7E9               	goto	l7225
 16297  001F98                     u7120:
 16298                           
 16299                           ;memory.c: 125: }
 16300                           ;memory.c: 126: }
 16301                           ;memory.c: 128: PIR2bits.EEIF = 1;
 16302  001F98  88A1               	bsf	4001,4,c	;volatile
 16303                           
 16304                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 16305  001F9A  8EA6               	bsf	4006,7,c	;volsfr
 16306                           
 16307                           ;memory.c: 130: EECON1bits.CFGS = 0;
 16308  001F9C  9CA6               	bcf	4006,6,c	;volsfr
 16309                           
 16310                           ;memory.c: 131: EECON1bits.WREN = 1;
 16311  001F9E  84A6               	bsf	4006,2,c	;volsfr
 16312                           
 16313                           ;memory.c: 132: INTCONbits.GIE = 0;
 16314  001FA0  9EF2               	bcf	intcon,7,c	;volatile
 16315                           
 16316                           ;memory.c: 133: EECON2 = 0x55;
 16317  001FA2  0E55               	movlw	85
 16318  001FA4  6EA7               	movwf	4007,c	;volsfr
 16319                           
 16320                           ;memory.c: 134: EECON2 = 0xAA;
 16321  001FA6  0EAA               	movlw	170
 16322  001FA8  6EA7               	movwf	4007,c	;volsfr
 16323                           
 16324                           ;memory.c: 135: EECON1bits.WR = 1;
 16325  001FAA  82A6               	bsf	4006,1,c	;volsfr
 16326                           
 16327                           ;memory.c: 137: EECON1bits.WREN = 0;
 16328  001FAC  94A6               	bcf	4006,2,c	;volsfr
 16329                           
 16330                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 16331  001FAE  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 16332  001FB0  D002               	bra	u7135
 16333  001FB2  9EF2               	bcf	intcon,7,c	;volatile
 16334  001FB4  D001               	bra	u7136
 16335  001FB6                     u7135:
 16336  001FB6  8EF2               	bsf	intcon,7,c	;volatile
 16337  001FB8                     u7136:
 16338  001FB8  0012               	return	
 16339  001FBA                     l887:
 16340  001FBA  0012               	return		;funcret
 16341  001FBC                     __end_of_FLASH_WriteBlock:
 16342                           	opt stack 0
 16343                           tosu	equ	0xFFF
 16344                           tosh	equ	0xFFE
 16345                           tosl	equ	0xFFD
 16346                           pclath	equ	0xFFA
 16347                           tblptru	equ	0xFF8
 16348                           tblptrh	equ	0xFF7
 16349                           tblptrl	equ	0xFF6
 16350                           tablat	equ	0xFF5
 16351                           prodh	equ	0xFF4
 16352                           prodl	equ	0xFF3
 16353                           intcon	equ	0xFF2
 16354                           intcon2	equ	0xFF1
 16355                           postinc0	equ	0xFEE
 16356                           wreg	equ	0xFE8
 16357                           indf1	equ	0xFE7
 16358                           postdec1	equ	0xFE5
 16359                           fsr1h	equ	0xFE2
 16360                           fsr1l	equ	0xFE1
 16361                           indf2	equ	0xFDF
 16362                           postinc2	equ	0xFDE
 16363                           postdec2	equ	0xFDD
 16364                           fsr2h	equ	0xFDA
 16365                           fsr2l	equ	0xFD9
 16366                           status	equ	0xFD8
 16367                           
 16368 ;; *************** function _FLASH_EraseBlock *****************
 16369 ;; Defined at:
 16370 ;;		line 144 in file "mcc_generated_files/memory.c"
 16371 ;; Parameters:    Size  Location     Type
 16372 ;;  baseAddr        4   23[COMRAM] unsigned long 
 16373 ;; Auto vars:     Size  Location     Type
 16374 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 16375 ;; Return value:  Size  Location     Type
 16376 ;;                  1    wreg      void 
 16377 ;; Registers used:
 16378 ;;		wreg, status,2
 16379 ;; Tracked objects:
 16380 ;;		On entry : 0/0
 16381 ;;		On exit  : 0/0
 16382 ;;		Unchanged: 0/0
 16383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16384 ;;      Params:         4       0       0       0       0       0       0
 16385 ;;      Locals:         1       0       0       0       0       0       0
 16386 ;;      Temps:          0       0       0       0       0       0       0
 16387 ;;      Totals:         5       0       0       0       0       0       0
 16388 ;;Total ram usage:        5 bytes
 16389 ;; Hardware stack levels used:    1
 16390 ;; Hardware stack levels required when called:    3
 16391 ;; This function calls:
 16392 ;;		Nothing
 16393 ;; This function is called by:
 16394 ;;		_FLASH_WriteBlock
 16395 ;; This function uses a non-reentrant model
 16396 ;;
 16397                           
 16398                           	psect	text108
 16399  0033A6                     __ptext108:
 16400                           	opt stack 0
 16401  0033A6                     _FLASH_EraseBlock:
 16402                           	opt stack 24
 16403                           
 16404                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 16405                           
 16406                           ;incstack = 0
 16407  0033A6  0E00               	movlw	0
 16408  0033A8  BEF2               	btfsc	intcon,7,c	;volatile
 16409  0033AA  0E01               	movlw	1
 16410  0033AC  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 16411                           
 16412                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 16413  0033AE  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 16414                           
 16415                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 16416  0033B2  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 16417                           
 16418                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 16419  0033B6  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 16420                           
 16421                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 16422  0033BA  8EA6               	bsf	4006,7,c	;volsfr
 16423                           
 16424                           ;memory.c: 153: EECON1bits.CFGS = 0;
 16425  0033BC  9CA6               	bcf	4006,6,c	;volsfr
 16426                           
 16427                           ;memory.c: 154: EECON1bits.WREN = 1;
 16428  0033BE  84A6               	bsf	4006,2,c	;volsfr
 16429                           
 16430                           ;memory.c: 155: EECON1bits.FREE = 1;
 16431  0033C0  88A6               	bsf	4006,4,c	;volsfr
 16432                           
 16433                           ;memory.c: 156: INTCONbits.GIE = 0;
 16434  0033C2  9EF2               	bcf	intcon,7,c	;volatile
 16435                           
 16436                           ;memory.c: 157: EECON2 = 0x55;
 16437  0033C4  0E55               	movlw	85
 16438  0033C6  6EA7               	movwf	4007,c	;volsfr
 16439                           
 16440                           ;memory.c: 158: EECON2 = 0xAA;
 16441  0033C8  0EAA               	movlw	170
 16442  0033CA  6EA7               	movwf	4007,c	;volsfr
 16443                           
 16444                           ;memory.c: 159: EECON1bits.WR = 1;
 16445  0033CC  82A6               	bsf	4006,1,c	;volsfr
 16446                           
 16447                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 16448  0033CE  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 16449  0033D0  D002               	bra	u6875
 16450  0033D2  9EF2               	bcf	intcon,7,c	;volatile
 16451  0033D4  D001               	bra	u6876
 16452  0033D6                     u6875:
 16453  0033D6  8EF2               	bsf	intcon,7,c	;volatile
 16454  0033D8                     u6876:
 16455  0033D8  0012               	return		;funcret
 16456  0033DA                     __end_of_FLASH_EraseBlock:
 16457                           	opt stack 0
 16458                           tosu	equ	0xFFF
 16459                           tosh	equ	0xFFE
 16460                           tosl	equ	0xFFD
 16461                           pclath	equ	0xFFA
 16462                           tblptru	equ	0xFF8
 16463                           tblptrh	equ	0xFF7
 16464                           tblptrl	equ	0xFF6
 16465                           tablat	equ	0xFF5
 16466                           prodh	equ	0xFF4
 16467                           prodl	equ	0xFF3
 16468                           intcon	equ	0xFF2
 16469                           intcon2	equ	0xFF1
 16470                           postinc0	equ	0xFEE
 16471                           wreg	equ	0xFE8
 16472                           indf1	equ	0xFE7
 16473                           postdec1	equ	0xFE5
 16474                           fsr1h	equ	0xFE2
 16475                           fsr1l	equ	0xFE1
 16476                           indf2	equ	0xFDF
 16477                           postinc2	equ	0xFDE
 16478                           postdec2	equ	0xFDD
 16479                           fsr2h	equ	0xFDA
 16480                           fsr2l	equ	0xFD9
 16481                           status	equ	0xFD8
 16482                           
 16483 ;; *************** function _FLASH_IsWriteDone *****************
 16484 ;; Defined at:
 16485 ;;		line 189 in file "mcc_generated_files/memory.c"
 16486 ;; Parameters:    Size  Location     Type
 16487 ;;		None
 16488 ;; Auto vars:     Size  Location     Type
 16489 ;;		None
 16490 ;; Return value:  Size  Location     Type
 16491 ;;                  1    wreg      unsigned char 
 16492 ;; Registers used:
 16493 ;;		wreg
 16494 ;; Tracked objects:
 16495 ;;		On entry : 0/0
 16496 ;;		On exit  : 0/0
 16497 ;;		Unchanged: 0/0
 16498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16499 ;;      Params:         0       0       0       0       0       0       0
 16500 ;;      Locals:         0       0       0       0       0       0       0
 16501 ;;      Temps:          0       0       0       0       0       0       0
 16502 ;;      Totals:         0       0       0       0       0       0       0
 16503 ;;Total ram usage:        0 bytes
 16504 ;; Hardware stack levels used:    1
 16505 ;; Hardware stack levels required when called:    3
 16506 ;; This function calls:
 16507 ;;		Nothing
 16508 ;; This function is called by:
 16509 ;;		_FlashSampleWrite
 16510 ;;		_FlashReadUart
 16511 ;; This function uses a non-reentrant model
 16512 ;;
 16513                           
 16514                           	psect	text109
 16515  00374A                     __ptext109:
 16516                           	opt stack 0
 16517  00374A                     _FLASH_IsWriteDone:
 16518                           	opt stack 24
 16519                           
 16520                           ;memory.c: 191: return (EECON1bits.WR == 0);
 16521                           
 16522                           ;incstack = 0
 16523  00374A  A2A6               	btfss	4006,1,c	;volsfr
 16524  00374C  D001               	goto	u6751
 16525  00374E  D002               	goto	u6750
 16526  003750                     u6751:
 16527  003750  0E01               	movlw	1
 16528  003752  0012               	return	
 16529  003754                     u6750:
 16530  003754  0E00               	movlw	0
 16531  003756  0012               	return	
 16532  003758                     __end_of_FLASH_IsWriteDone:
 16533                           	opt stack 0
 16534                           tosu	equ	0xFFF
 16535                           tosh	equ	0xFFE
 16536                           tosl	equ	0xFFD
 16537                           pclath	equ	0xFFA
 16538                           tblptru	equ	0xFF8
 16539                           tblptrh	equ	0xFF7
 16540                           tblptrl	equ	0xFF6
 16541                           tablat	equ	0xFF5
 16542                           prodh	equ	0xFF4
 16543                           prodl	equ	0xFF3
 16544                           intcon	equ	0xFF2
 16545                           intcon2	equ	0xFF1
 16546                           postinc0	equ	0xFEE
 16547                           wreg	equ	0xFE8
 16548                           indf1	equ	0xFE7
 16549                           postdec1	equ	0xFE5
 16550                           fsr1h	equ	0xFE2
 16551                           fsr1l	equ	0xFE1
 16552                           indf2	equ	0xFDF
 16553                           postinc2	equ	0xFDE
 16554                           postdec2	equ	0xFDD
 16555                           fsr2h	equ	0xFDA
 16556                           fsr2l	equ	0xFD9
 16557                           status	equ	0xFD8
 16558                           
 16559 ;; *************** function _ADC_GetConversion *****************
 16560 ;; Defined at:
 16561 ;;		line 106 in file "mcc_generated_files/adc.c"
 16562 ;; Parameters:    Size  Location     Type
 16563 ;;  channel         1    wreg     enum E6975
 16564 ;; Auto vars:     Size  Location     Type
 16565 ;;  channel         1   27[COMRAM] enum E6975
 16566 ;; Return value:  Size  Location     Type
 16567 ;;                  2   23[COMRAM] unsigned int 
 16568 ;; Registers used:
 16569 ;;		wreg, status,2, status,0
 16570 ;; Tracked objects:
 16571 ;;		On entry : 0/0
 16572 ;;		On exit  : 0/0
 16573 ;;		Unchanged: 0/0
 16574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16575 ;;      Params:         2       0       0       0       0       0       0
 16576 ;;      Locals:         1       0       0       0       0       0       0
 16577 ;;      Temps:          2       0       0       0       0       0       0
 16578 ;;      Totals:         5       0       0       0       0       0       0
 16579 ;;Total ram usage:        5 bytes
 16580 ;; Hardware stack levels used:    1
 16581 ;; Hardware stack levels required when called:    3
 16582 ;; This function calls:
 16583 ;;		Nothing
 16584 ;; This function is called by:
 16585 ;;		_AdcConvert
 16586 ;; This function uses a non-reentrant model
 16587 ;;
 16588                           
 16589                           	psect	text110
 16590  00340A                     __ptext110:
 16591                           	opt stack 0
 16592  00340A                     _ADC_GetConversion:
 16593                           	opt stack 26
 16594                           
 16595                           ;incstack = 0
 16596                           ;ADC_GetConversion@channel stored from wreg
 16597  00340A  6E1C               	movwf	ADC_GetConversion@channel,c
 16598                           
 16599                           ;adc.c: 109: ADCON0bits.CHS = channel;
 16600  00340C  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 16601  003410  461A               	rlncf	??_ADC_GetConversion,f,c
 16602  003412  461A               	rlncf	??_ADC_GetConversion,f,c
 16603  003414  50C2               	movf	4034,w,c	;volatile
 16604  003416  181A               	xorwf	??_ADC_GetConversion,w,c
 16605  003418  0B83               	andlw	-125
 16606  00341A  181A               	xorwf	??_ADC_GetConversion,w,c
 16607  00341C  6EC2               	movwf	4034,c	;volatile
 16608                           
 16609                           ;adc.c: 112: ADCON0bits.ADON = 1;
 16610  00341E  80C2               	bsf	4034,0,c	;volatile
 16611                           
 16612                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 16613  003420  82C2               	bsf	4034,1,c	;volatile
 16614  003422                     
 16615                           ;adc.c: 119: {
 16616  003422  B2C2               	btfsc	4034,1,c	;volatile
 16617  003424  D7FE               	goto	l1000
 16618                           
 16619                           ;adc.c: 120: }
 16620                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 16621  003426  50C4               	movf	4036,w,c	;volatile
 16622  003428  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 16623  00342A  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 16624  00342C  50C3               	movf	4035,w,c	;volatile
 16625  00342E  241A               	addwf	??_ADC_GetConversion,w,c
 16626  003430  6E18               	movwf	?_ADC_GetConversion,c
 16627  003432  0E00               	movlw	0
 16628  003434  201B               	addwfc	??_ADC_GetConversion+1,w,c
 16629  003436  6E19               	movwf	?_ADC_GetConversion+1,c
 16630  003438  0012               	return	
 16631  00343A                     __end_of_ADC_GetConversion:
 16632                           	opt stack 0
 16633                           tosu	equ	0xFFF
 16634                           tosh	equ	0xFFE
 16635                           tosl	equ	0xFFD
 16636                           pclath	equ	0xFFA
 16637                           tblptru	equ	0xFF8
 16638                           tblptrh	equ	0xFF7
 16639                           tblptrl	equ	0xFF6
 16640                           tablat	equ	0xFF5
 16641                           prodh	equ	0xFF4
 16642                           prodl	equ	0xFF3
 16643                           intcon	equ	0xFF2
 16644                           intcon2	equ	0xFF1
 16645                           postinc0	equ	0xFEE
 16646                           wreg	equ	0xFE8
 16647                           indf1	equ	0xFE7
 16648                           postdec1	equ	0xFE5
 16649                           fsr1h	equ	0xFE2
 16650                           fsr1l	equ	0xFE1
 16651                           indf2	equ	0xFDF
 16652                           postinc2	equ	0xFDE
 16653                           postdec2	equ	0xFDD
 16654                           fsr2h	equ	0xFDA
 16655                           fsr2l	equ	0xFD9
 16656                           status	equ	0xFD8
 16657                           
 16658 ;; *************** function _INTERRUPT_InterruptManager *****************
 16659 ;; Defined at:
 16660 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 16661 ;; Parameters:    Size  Location     Type
 16662 ;;		None
 16663 ;; Auto vars:     Size  Location     Type
 16664 ;;		None
 16665 ;; Return value:  Size  Location     Type
 16666 ;;                  1    wreg      void 
 16667 ;; Registers used:
 16668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16669 ;; Tracked objects:
 16670 ;;		On entry : 0/0
 16671 ;;		On exit  : 0/0
 16672 ;;		Unchanged: 0/0
 16673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16674 ;;      Params:         0       0       0       0       0       0       0
 16675 ;;      Locals:         0       0       0       0       0       0       0
 16676 ;;      Temps:         18       0       0       0       0       0       0
 16677 ;;      Totals:        18       0       0       0       0       0       0
 16678 ;;Total ram usage:       18 bytes
 16679 ;; Hardware stack levels used:    1
 16680 ;; Hardware stack levels required when called:    2
 16681 ;; This function calls:
 16682 ;;		_EUSART1_Receive_ISR
 16683 ;;		_EUSART1_Transmit_ISR
 16684 ;;		_MEMORY_ISR
 16685 ;;		_PIN_MANAGER_IOC
 16686 ;;		_TMR0_ISR
 16687 ;; This function is called by:
 16688 ;;		Interrupt level 2
 16689 ;; This function uses a non-reentrant model
 16690 ;;
 16691                           
 16692                           	psect	intcode
 16693  000008                     __pintcode:
 16694                           	opt stack 0
 16695  000008                     _INTERRUPT_InterruptManager:
 16696                           	opt stack 21
 16697                           
 16698                           ;incstack = 0
 16699  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16700  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 16701  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 16702  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 16703  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 16704  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 16705  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 16706  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 16707  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 16708  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 16709  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 16710  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 16711  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 16712  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 16713  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 16714  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 16715  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 16716  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 16717  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 16718                           
 16719                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 16720  000052  B6F2               	btfsc	intcon,3,c	;volatile
 16721  000054  A0F2               	btfss	intcon,0,c	;volatile
 16722  000056  D003               	goto	i2l725
 16723                           
 16724                           ;interrupt_manager.c: 61: {
 16725                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 16726  000058  ECDF  F01B         	call	_PIN_MANAGER_IOC	;wreg free
 16727                           
 16728                           ;interrupt_manager.c: 63: }
 16729  00005C  D019               	goto	i2l734
 16730  00005E                     i2l725:
 16731                           
 16732                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 16733  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 16734  000060  A4F2               	btfss	intcon,2,c	;volatile
 16735  000062  D003               	goto	i2l727
 16736                           
 16737                           ;interrupt_manager.c: 65: {
 16738                           ;interrupt_manager.c: 66: TMR0_ISR();
 16739  000064  EC36  F011         	call	_TMR0_ISR	;wreg free
 16740                           
 16741                           ;interrupt_manager.c: 67: }
 16742  000068  D013               	goto	i2l734
 16743  00006A                     i2l727:
 16744                           
 16745                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 16746  00006A  ACF2               	btfss	intcon,6,c	;volatile
 16747  00006C  D011               	goto	i2l734
 16748                           
 16749                           ;interrupt_manager.c: 69: {
 16750                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 16751  00006E  B8A0               	btfsc	4000,4,c	;volatile
 16752  000070  A8A1               	btfss	4001,4,c	;volatile
 16753  000072  D003               	goto	i2l730
 16754                           
 16755                           ;interrupt_manager.c: 71: {
 16756                           ;interrupt_manager.c: 72: MEMORY_ISR();
 16757  000074  ECE1  F01B         	call	_MEMORY_ISR	;wreg free
 16758                           
 16759                           ;interrupt_manager.c: 73: }
 16760  000078  D00B               	goto	i2l734
 16761  00007A                     i2l730:
 16762                           
 16763                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 16764  00007A  B89D               	btfsc	3997,4,c	;volatile
 16765  00007C  A89E               	btfss	3998,4,c	;volatile
 16766  00007E  D003               	goto	i2l732
 16767                           
 16768                           ;interrupt_manager.c: 75: {
 16769                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 16770  000080  EC31  F019         	call	_EUSART1_Transmit_ISR	;wreg free
 16771                           
 16772                           ;interrupt_manager.c: 77: }
 16773  000084  D005               	goto	i2l734
 16774  000086                     i2l732:
 16775                           
 16776                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 16777  000086  BA9D               	btfsc	3997,5,c	;volatile
 16778  000088  AA9E               	btfss	3998,5,c	;volatile
 16779  00008A  D002               	goto	i2l734
 16780                           
 16781                           ;interrupt_manager.c: 79: {
 16782                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 16783  00008C  EC1D  F01A         	call	_EUSART1_Receive_ISR	;wreg free
 16784  000090                     i2l734:
 16785                           
 16786                           ;interrupt_manager.c: 87: else
 16787                           ;interrupt_manager.c: 88: {
 16788                           
 16789                           ;interrupt_manager.c: 85: }
 16790                           ;interrupt_manager.c: 86: }
 16791                           
 16792                           ;interrupt_manager.c: 82: else
 16793                           ;interrupt_manager.c: 83: {
 16794  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 16795  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 16796  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 16797  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 16798  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 16799  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 16800  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 16801  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 16802  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 16803  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 16804  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 16805  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 16806  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 16807  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 16808  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 16809  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 16810  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 16811  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 16812  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16813  0000DA  0011               	retfie		f
 16814  0000DC                     __end_of_INTERRUPT_InterruptManager:
 16815                           	opt stack 0
 16816                           tosu	equ	0xFFF
 16817                           tosh	equ	0xFFE
 16818                           tosl	equ	0xFFD
 16819                           pclatu	equ	0xFFB
 16820                           pclath	equ	0xFFA
 16821                           tblptru	equ	0xFF8
 16822                           tblptrh	equ	0xFF7
 16823                           tblptrl	equ	0xFF6
 16824                           tablat	equ	0xFF5
 16825                           prodh	equ	0xFF4
 16826                           prodl	equ	0xFF3
 16827                           intcon	equ	0xFF2
 16828                           intcon2	equ	0xFF1
 16829                           postinc0	equ	0xFEE
 16830                           fsr0h	equ	0xFEA
 16831                           fsr0l	equ	0xFE9
 16832                           wreg	equ	0xFE8
 16833                           indf1	equ	0xFE7
 16834                           postdec1	equ	0xFE5
 16835                           fsr1h	equ	0xFE2
 16836                           fsr1l	equ	0xFE1
 16837                           indf2	equ	0xFDF
 16838                           postinc2	equ	0xFDE
 16839                           postdec2	equ	0xFDD
 16840                           fsr2h	equ	0xFDA
 16841                           fsr2l	equ	0xFD9
 16842                           status	equ	0xFD8
 16843                           
 16844 ;; *************** function _TMR0_ISR *****************
 16845 ;; Defined at:
 16846 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 16847 ;; Parameters:    Size  Location     Type
 16848 ;;		None
 16849 ;; Auto vars:     Size  Location     Type
 16850 ;;		None
 16851 ;; Return value:  Size  Location     Type
 16852 ;;                  1    wreg      void 
 16853 ;; Registers used:
 16854 ;;		wreg, status,2, status,0, cstack
 16855 ;; Tracked objects:
 16856 ;;		On entry : 0/0
 16857 ;;		On exit  : 0/0
 16858 ;;		Unchanged: 0/0
 16859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16860 ;;      Params:         0       0       0       0       0       0       0
 16861 ;;      Locals:         0       0       0       0       0       0       0
 16862 ;;      Temps:          0       0       0       0       0       0       0
 16863 ;;      Totals:         0       0       0       0       0       0       0
 16864 ;;Total ram usage:        0 bytes
 16865 ;; Hardware stack levels used:    1
 16866 ;; Hardware stack levels required when called:    1
 16867 ;; This function calls:
 16868 ;;		___lwmod
 16869 ;; This function is called by:
 16870 ;;		_INTERRUPT_InterruptManager
 16871 ;; This function uses a non-reentrant model
 16872 ;;
 16873                           
 16874                           	psect	text112
 16875  00226C                     __ptext112:
 16876                           	opt stack 0
 16877  00226C                     _TMR0_ISR:
 16878                           	opt stack 21
 16879                           
 16880                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 16881                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 16882                           
 16883                           ;incstack = 0
 16884  00226C  94F2               	bcf	intcon,2,c	;volatile
 16885                           
 16886                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 16887  00226E  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 16888  002270  6ED7               	movwf	4055,c	;volatile
 16889                           
 16890                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 16891  002272  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 16892                           
 16893                           ;tmr0.c: 146: CountCallBack ++;
 16894  002276  4A35               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 16895  002278  2A36               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 16896                           
 16897                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 16898  00227A  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16899  00227E  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16900  002282  0E00               	movlw	0
 16901  002284  6E04               	movwf	___lwmod@divisor+1,c
 16902  002286  0E14               	movlw	20
 16903  002288  6E03               	movwf	___lwmod@divisor,c
 16904  00228A  EC60  F018         	call	___lwmod	;wreg free
 16905  00228E  5001               	movf	?___lwmod,w,c
 16906  002290  1002               	iorwf	?___lwmod+1,w,c
 16907  002292  A4D8               	btfss	status,2,c
 16908  002294  D003               	goto	i2l956
 16909                           
 16910                           ;tmr0.c: 148: {
 16911                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 16912  002296  0E01               	movlw	1
 16913  002298  0100               	movlb	0	; () banked
 16914  00229A  6FD8               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
 16915  00229C                     i2l956:
 16916                           
 16917                           ;tmr0.c: 150: }
 16918                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 16919                           
 16920                           ; BSR set to: 0
 16921  00229C  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16922  0022A0  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16923  0022A4  0E00               	movlw	0
 16924  0022A6  6E04               	movwf	___lwmod@divisor+1,c
 16925  0022A8  0E32               	movlw	50
 16926  0022AA  6E03               	movwf	___lwmod@divisor,c
 16927  0022AC  EC60  F018         	call	___lwmod	;wreg free
 16928  0022B0  5001               	movf	?___lwmod,w,c
 16929  0022B2  1002               	iorwf	?___lwmod+1,w,c
 16930  0022B4  A4D8               	btfss	status,2,c
 16931  0022B6  D003               	goto	i2l957
 16932                           
 16933                           ;tmr0.c: 153: {
 16934                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 16935  0022B8  0E01               	movlw	1
 16936  0022BA  0100               	movlb	0	; () banked
 16937  0022BC  6FD7               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
 16938  0022BE                     i2l957:
 16939                           
 16940                           ;tmr0.c: 155: }
 16941                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 16942                           
 16943                           ; BSR set to: 0
 16944  0022BE  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16945  0022C2  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16946  0022C6  0E01               	movlw	1
 16947  0022C8  6E04               	movwf	___lwmod@divisor+1,c
 16948  0022CA  0E2C               	movlw	44
 16949  0022CC  6E03               	movwf	___lwmod@divisor,c
 16950  0022CE  EC60  F018         	call	___lwmod	;wreg free
 16951  0022D2  5001               	movf	?___lwmod,w,c
 16952  0022D4  1002               	iorwf	?___lwmod+1,w,c
 16953  0022D6  A4D8               	btfss	status,2,c
 16954  0022D8  D003               	goto	i2l958
 16955                           
 16956                           ;tmr0.c: 157: {
 16957                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 16958  0022DA  0E01               	movlw	1
 16959  0022DC  0100               	movlb	0	; () banked
 16960  0022DE  6FD6               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
 16961  0022E0                     i2l958:
 16962                           
 16963                           ;tmr0.c: 159: }
 16964                           ;tmr0.c: 161: CountCallBack %= 300;
 16965                           
 16966                           ; BSR set to: 0
 16967  0022E0  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16968  0022E4  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16969  0022E8  0E01               	movlw	1
 16970  0022EA  6E04               	movwf	___lwmod@divisor+1,c
 16971  0022EC  0E2C               	movlw	44
 16972  0022EE  6E03               	movwf	___lwmod@divisor,c
 16973  0022F0  EC60  F018         	call	___lwmod	;wreg free
 16974  0022F4  C001  F035         	movff	?___lwmod,TMR0_ISR@CountCallBack	;volatile
 16975  0022F8  C002  F036         	movff	?___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 16976  0022FC  0012               	return		;funcret
 16977  0022FE                     __end_of_TMR0_ISR:
 16978                           	opt stack 0
 16979                           tosu	equ	0xFFF
 16980                           tosh	equ	0xFFE
 16981                           tosl	equ	0xFFD
 16982                           pclatu	equ	0xFFB
 16983                           pclath	equ	0xFFA
 16984                           tblptru	equ	0xFF8
 16985                           tblptrh	equ	0xFF7
 16986                           tblptrl	equ	0xFF6
 16987                           tablat	equ	0xFF5
 16988                           prodh	equ	0xFF4
 16989                           prodl	equ	0xFF3
 16990                           intcon	equ	0xFF2
 16991                           intcon2	equ	0xFF1
 16992                           postinc0	equ	0xFEE
 16993                           fsr0h	equ	0xFEA
 16994                           fsr0l	equ	0xFE9
 16995                           wreg	equ	0xFE8
 16996                           indf1	equ	0xFE7
 16997                           postdec1	equ	0xFE5
 16998                           fsr1h	equ	0xFE2
 16999                           fsr1l	equ	0xFE1
 17000                           indf2	equ	0xFDF
 17001                           postinc2	equ	0xFDE
 17002                           postdec2	equ	0xFDD
 17003                           fsr2h	equ	0xFDA
 17004                           fsr2l	equ	0xFD9
 17005                           status	equ	0xFD8
 17006                           
 17007 ;; *************** function ___lwmod *****************
 17008 ;; Defined at:
 17009 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 17010 ;; Parameters:    Size  Location     Type
 17011 ;;  dividend        2    0[COMRAM] unsigned int 
 17012 ;;  divisor         2    2[COMRAM] unsigned int 
 17013 ;; Auto vars:     Size  Location     Type
 17014 ;;  counter         1    4[COMRAM] unsigned char 
 17015 ;; Return value:  Size  Location     Type
 17016 ;;                  2    0[COMRAM] unsigned int 
 17017 ;; Registers used:
 17018 ;;		wreg, status,2, status,0
 17019 ;; Tracked objects:
 17020 ;;		On entry : 0/0
 17021 ;;		On exit  : 0/0
 17022 ;;		Unchanged: 0/0
 17023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17024 ;;      Params:         4       0       0       0       0       0       0
 17025 ;;      Locals:         1       0       0       0       0       0       0
 17026 ;;      Temps:          0       0       0       0       0       0       0
 17027 ;;      Totals:         5       0       0       0       0       0       0
 17028 ;;Total ram usage:        5 bytes
 17029 ;; Hardware stack levels used:    1
 17030 ;; This function calls:
 17031 ;;		Nothing
 17032 ;; This function is called by:
 17033 ;;		_TMR0_ISR
 17034 ;; This function uses a non-reentrant model
 17035 ;;
 17036                           
 17037                           	psect	text113
 17038  0030C0                     __ptext113:
 17039                           	opt stack 0
 17040  0030C0                     ___lwmod:
 17041                           	opt stack 21
 17042                           
 17043                           ;incstack = 0
 17044  0030C0  5003               	movf	___lwmod@divisor,w,c
 17045  0030C2  1004               	iorwf	___lwmod@divisor+1,w,c
 17046  0030C4  B4D8               	btfsc	status,2,c
 17047  0030C6  D018               	goto	i2l1817
 17048  0030C8  0E01               	movlw	1
 17049  0030CA  6E05               	movwf	___lwmod@counter,c
 17050  0030CC  D004               	goto	i2l1812
 17051  0030CE  90D8               	bcf	status,0,c
 17052  0030D0  3603               	rlcf	___lwmod@divisor,f,c
 17053  0030D2  3604               	rlcf	___lwmod@divisor+1,f,c
 17054  0030D4  2A05               	incf	___lwmod@counter,f,c
 17055  0030D6                     i2l1812:
 17056  0030D6  AE04               	btfss	___lwmod@divisor+1,7,c
 17057  0030D8  D7FA               	goto	i2l1813
 17058  0030DA                     i2u516_40:
 17059  0030DA  5003               	movf	___lwmod@divisor,w,c
 17060  0030DC  5C01               	subwf	___lwmod@dividend,w,c
 17061  0030DE  5004               	movf	___lwmod@divisor+1,w,c
 17062  0030E0  5802               	subwfb	___lwmod@dividend+1,w,c
 17063  0030E2  A0D8               	btfss	status,0,c
 17064  0030E4  D004               	goto	i2l1816
 17065  0030E6  5003               	movf	___lwmod@divisor,w,c
 17066  0030E8  5E01               	subwf	___lwmod@dividend,f,c
 17067  0030EA  5004               	movf	___lwmod@divisor+1,w,c
 17068  0030EC  5A02               	subwfb	___lwmod@dividend+1,f,c
 17069  0030EE                     i2l1816:
 17070  0030EE  90D8               	bcf	status,0,c
 17071  0030F0  3204               	rrcf	___lwmod@divisor+1,f,c
 17072  0030F2  3203               	rrcf	___lwmod@divisor,f,c
 17073  0030F4  2E05               	decfsz	___lwmod@counter,f,c
 17074  0030F6  D7F1               	goto	i2u516_40
 17075  0030F8                     i2l1817:
 17076  0030F8  C001  F001         	movff	___lwmod@dividend,?___lwmod
 17077  0030FC  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 17078  003100  0012               	return		;funcret
 17079  003102                     __end_of___lwmod:
 17080                           	opt stack 0
 17081                           tosu	equ	0xFFF
 17082                           tosh	equ	0xFFE
 17083                           tosl	equ	0xFFD
 17084                           pclatu	equ	0xFFB
 17085                           pclath	equ	0xFFA
 17086                           tblptru	equ	0xFF8
 17087                           tblptrh	equ	0xFF7
 17088                           tblptrl	equ	0xFF6
 17089                           tablat	equ	0xFF5
 17090                           prodh	equ	0xFF4
 17091                           prodl	equ	0xFF3
 17092                           intcon	equ	0xFF2
 17093                           intcon2	equ	0xFF1
 17094                           postinc0	equ	0xFEE
 17095                           fsr0h	equ	0xFEA
 17096                           fsr0l	equ	0xFE9
 17097                           wreg	equ	0xFE8
 17098                           indf1	equ	0xFE7
 17099                           postdec1	equ	0xFE5
 17100                           fsr1h	equ	0xFE2
 17101                           fsr1l	equ	0xFE1
 17102                           indf2	equ	0xFDF
 17103                           postinc2	equ	0xFDE
 17104                           postdec2	equ	0xFDD
 17105                           fsr2h	equ	0xFDA
 17106                           fsr2l	equ	0xFD9
 17107                           status	equ	0xFD8
 17108                           
 17109 ;; *************** function _PIN_MANAGER_IOC *****************
 17110 ;; Defined at:
 17111 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 17112 ;; Parameters:    Size  Location     Type
 17113 ;;		None
 17114 ;; Auto vars:     Size  Location     Type
 17115 ;;		None
 17116 ;; Return value:  Size  Location     Type
 17117 ;;                  1    wreg      void 
 17118 ;; Registers used:
 17119 ;;		None
 17120 ;; Tracked objects:
 17121 ;;		On entry : 0/0
 17122 ;;		On exit  : 0/0
 17123 ;;		Unchanged: 0/0
 17124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17125 ;;      Params:         0       0       0       0       0       0       0
 17126 ;;      Locals:         0       0       0       0       0       0       0
 17127 ;;      Temps:          0       0       0       0       0       0       0
 17128 ;;      Totals:         0       0       0       0       0       0       0
 17129 ;;Total ram usage:        0 bytes
 17130 ;; Hardware stack levels used:    1
 17131 ;; This function calls:
 17132 ;;		Nothing
 17133 ;; This function is called by:
 17134 ;;		_INTERRUPT_InterruptManager
 17135 ;; This function uses a non-reentrant model
 17136 ;;
 17137                           
 17138                           	psect	text114
 17139  0037BE                     __ptext114:
 17140                           	opt stack 0
 17141  0037BE                     _PIN_MANAGER_IOC:
 17142                           	opt stack 22
 17143                           
 17144                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 17145                           
 17146                           ;incstack = 0
 17147  0037BE  90F2               	bcf	intcon,0,c	;volatile
 17148  0037C0  0012               	return		;funcret
 17149  0037C2                     __end_of_PIN_MANAGER_IOC:
 17150                           	opt stack 0
 17151                           tosu	equ	0xFFF
 17152                           tosh	equ	0xFFE
 17153                           tosl	equ	0xFFD
 17154                           pclatu	equ	0xFFB
 17155                           pclath	equ	0xFFA
 17156                           tblptru	equ	0xFF8
 17157                           tblptrh	equ	0xFF7
 17158                           tblptrl	equ	0xFF6
 17159                           tablat	equ	0xFF5
 17160                           prodh	equ	0xFF4
 17161                           prodl	equ	0xFF3
 17162                           intcon	equ	0xFF2
 17163                           intcon2	equ	0xFF1
 17164                           postinc0	equ	0xFEE
 17165                           fsr0h	equ	0xFEA
 17166                           fsr0l	equ	0xFE9
 17167                           wreg	equ	0xFE8
 17168                           indf1	equ	0xFE7
 17169                           postdec1	equ	0xFE5
 17170                           fsr1h	equ	0xFE2
 17171                           fsr1l	equ	0xFE1
 17172                           indf2	equ	0xFDF
 17173                           postinc2	equ	0xFDE
 17174                           postdec2	equ	0xFDD
 17175                           fsr2h	equ	0xFDA
 17176                           fsr2l	equ	0xFD9
 17177                           status	equ	0xFD8
 17178                           
 17179 ;; *************** function _MEMORY_ISR *****************
 17180 ;; Defined at:
 17181 ;;		line 206 in file "mcc_generated_files/memory.c"
 17182 ;; Parameters:    Size  Location     Type
 17183 ;;		None
 17184 ;; Auto vars:     Size  Location     Type
 17185 ;;		None
 17186 ;; Return value:  Size  Location     Type
 17187 ;;                  1    wreg      void 
 17188 ;; Registers used:
 17189 ;;		None
 17190 ;; Tracked objects:
 17191 ;;		On entry : 0/0
 17192 ;;		On exit  : 0/0
 17193 ;;		Unchanged: 0/0
 17194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17195 ;;      Params:         0       0       0       0       0       0       0
 17196 ;;      Locals:         0       0       0       0       0       0       0
 17197 ;;      Temps:          0       0       0       0       0       0       0
 17198 ;;      Totals:         0       0       0       0       0       0       0
 17199 ;;Total ram usage:        0 bytes
 17200 ;; Hardware stack levels used:    1
 17201 ;; This function calls:
 17202 ;;		Nothing
 17203 ;; This function is called by:
 17204 ;;		_INTERRUPT_InterruptManager
 17205 ;; This function uses a non-reentrant model
 17206 ;;
 17207                           
 17208                           	psect	text115
 17209  0037C2                     __ptext115:
 17210                           	opt stack 0
 17211  0037C2                     _MEMORY_ISR:
 17212                           	opt stack 22
 17213                           
 17214                           ;memory.c: 209: PIR2bits.EEIF = 0;
 17215                           
 17216                           ;incstack = 0
 17217  0037C2  98A1               	bcf	4001,4,c	;volatile
 17218  0037C4  0012               	return		;funcret
 17219  0037C6                     __end_of_MEMORY_ISR:
 17220                           	opt stack 0
 17221                           tosu	equ	0xFFF
 17222                           tosh	equ	0xFFE
 17223                           tosl	equ	0xFFD
 17224                           pclatu	equ	0xFFB
 17225                           pclath	equ	0xFFA
 17226                           tblptru	equ	0xFF8
 17227                           tblptrh	equ	0xFF7
 17228                           tblptrl	equ	0xFF6
 17229                           tablat	equ	0xFF5
 17230                           prodh	equ	0xFF4
 17231                           prodl	equ	0xFF3
 17232                           intcon	equ	0xFF2
 17233                           intcon2	equ	0xFF1
 17234                           postinc0	equ	0xFEE
 17235                           fsr0h	equ	0xFEA
 17236                           fsr0l	equ	0xFE9
 17237                           wreg	equ	0xFE8
 17238                           indf1	equ	0xFE7
 17239                           postdec1	equ	0xFE5
 17240                           fsr1h	equ	0xFE2
 17241                           fsr1l	equ	0xFE1
 17242                           indf2	equ	0xFDF
 17243                           postinc2	equ	0xFDE
 17244                           postdec2	equ	0xFDD
 17245                           fsr2h	equ	0xFDA
 17246                           fsr2l	equ	0xFD9
 17247                           status	equ	0xFD8
 17248                           
 17249 ;; *************** function _EUSART1_Transmit_ISR *****************
 17250 ;; Defined at:
 17251 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 17252 ;; Parameters:    Size  Location     Type
 17253 ;;		None
 17254 ;; Auto vars:     Size  Location     Type
 17255 ;;		None
 17256 ;; Return value:  Size  Location     Type
 17257 ;;                  1    wreg      void 
 17258 ;; Registers used:
 17259 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17260 ;; Tracked objects:
 17261 ;;		On entry : 0/0
 17262 ;;		On exit  : 0/0
 17263 ;;		Unchanged: 0/0
 17264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17265 ;;      Params:         0       0       0       0       0       0       0
 17266 ;;      Locals:         0       0       0       0       0       0       0
 17267 ;;      Temps:          0       0       0       0       0       0       0
 17268 ;;      Totals:         0       0       0       0       0       0       0
 17269 ;;Total ram usage:        0 bytes
 17270 ;; Hardware stack levels used:    1
 17271 ;; This function calls:
 17272 ;;		Nothing
 17273 ;; This function is called by:
 17274 ;;		_INTERRUPT_InterruptManager
 17275 ;; This function uses a non-reentrant model
 17276 ;;
 17277                           
 17278                           	psect	text116
 17279  003262                     __ptext116:
 17280                           	opt stack 0
 17281  003262                     _EUSART1_Transmit_ISR:
 17282                           	opt stack 22
 17283                           
 17284                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 17285                           
 17286                           ;incstack = 0
 17287  003262  0E46               	movlw	70
 17288  003264  0100               	movlb	0	; () banked
 17289  003266  61FF               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 17290  003268  D012               	goto	i2l796
 17291                           
 17292                           ; BSR set to: 0
 17293                           ;eusart1.c: 186: {
 17294                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 17295  00326A  5039               	movf	_eusart1TxTail,w,c	;volatile
 17296  00326C  0D01               	mullw	1
 17297  00326E  0E00               	movlw	low _eusart1TxBuffer
 17298  003270  24F3               	addwf	prodl,w,c
 17299  003272  6ED9               	movwf	fsr2l,c
 17300  003274  0E01               	movlw	high _eusart1TxBuffer
 17301  003276  20F4               	addwfc	prodh,w,c
 17302  003278  6EDA               	movwf	fsr2h,c
 17303  00327A  50DF               	movf	indf2,w,c
 17304  00327C  6EAD               	movwf	4013,c	;volatile
 17305                           
 17306                           ; BSR set to: 0
 17307  00327E  2A39               	incf	_eusart1TxTail,f,c	;volatile
 17308                           
 17309                           ; BSR set to: 0
 17310                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 17311  003280  0E45               	movlw	69
 17312  003282  6439               	cpfsgt	_eusart1TxTail,c	;volatile
 17313  003284  D002               	goto	i2l797
 17314                           
 17315                           ; BSR set to: 0
 17316                           ;eusart1.c: 189: {
 17317                           ;eusart1.c: 190: eusart1TxTail = 0;
 17318  003286  0E00               	movlw	0
 17319  003288  6E39               	movwf	_eusart1TxTail,c	;volatile
 17320  00328A                     i2l797:
 17321                           
 17322                           ; BSR set to: 0
 17323                           ;eusart1.c: 191: }
 17324                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 17325                           
 17326                           ; BSR set to: 0
 17327  00328A  2BFF               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 17328                           
 17329                           ;eusart1.c: 193: }
 17330  00328C  0012               	return	
 17331  00328E                     i2l796:
 17332                           
 17333                           ; BSR set to: 0
 17334                           ;eusart1.c: 194: else
 17335                           ;eusart1.c: 195: {
 17336                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 17337  00328E  989D               	bcf	3997,4,c	;volatile
 17338                           
 17339                           ; BSR set to: 0
 17340                           ;eusart1.c: 197: eusart1TxTail = 0;
 17341  003290  0E00               	movlw	0
 17342  003292  6E39               	movwf	_eusart1TxTail,c	;volatile
 17343                           
 17344                           ;eusart1.c: 198: eusart1TxHead = 0;
 17345  003294  0E00               	movlw	0
 17346  003296  6E3A               	movwf	_eusart1TxHead,c	;volatile
 17347  003298  0012               	return	
 17348  00329A                     __end_of_EUSART1_Transmit_ISR:
 17349                           	opt stack 0
 17350                           tosu	equ	0xFFF
 17351                           tosh	equ	0xFFE
 17352                           tosl	equ	0xFFD
 17353                           pclatu	equ	0xFFB
 17354                           pclath	equ	0xFFA
 17355                           tblptru	equ	0xFF8
 17356                           tblptrh	equ	0xFF7
 17357                           tblptrl	equ	0xFF6
 17358                           tablat	equ	0xFF5
 17359                           prodh	equ	0xFF4
 17360                           prodl	equ	0xFF3
 17361                           intcon	equ	0xFF2
 17362                           intcon2	equ	0xFF1
 17363                           postinc0	equ	0xFEE
 17364                           fsr0h	equ	0xFEA
 17365                           fsr0l	equ	0xFE9
 17366                           wreg	equ	0xFE8
 17367                           indf1	equ	0xFE7
 17368                           postdec1	equ	0xFE5
 17369                           fsr1h	equ	0xFE2
 17370                           fsr1l	equ	0xFE1
 17371                           indf2	equ	0xFDF
 17372                           postinc2	equ	0xFDE
 17373                           postdec2	equ	0xFDD
 17374                           fsr2h	equ	0xFDA
 17375                           fsr2l	equ	0xFD9
 17376                           status	equ	0xFD8
 17377                           
 17378 ;; *************** function _EUSART1_Receive_ISR *****************
 17379 ;; Defined at:
 17380 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 17381 ;; Parameters:    Size  Location     Type
 17382 ;;		None
 17383 ;; Auto vars:     Size  Location     Type
 17384 ;;		None
 17385 ;; Return value:  Size  Location     Type
 17386 ;;                  1    wreg      void 
 17387 ;; Registers used:
 17388 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17389 ;; Tracked objects:
 17390 ;;		On entry : 0/0
 17391 ;;		On exit  : 0/0
 17392 ;;		Unchanged: 0/0
 17393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17394 ;;      Params:         0       0       0       0       0       0       0
 17395 ;;      Locals:         0       0       0       0       0       0       0
 17396 ;;      Temps:          0       0       0       0       0       0       0
 17397 ;;      Totals:         0       0       0       0       0       0       0
 17398 ;;Total ram usage:        0 bytes
 17399 ;; Hardware stack levels used:    1
 17400 ;; This function calls:
 17401 ;;		Nothing
 17402 ;; This function is called by:
 17403 ;;		_INTERRUPT_InterruptManager
 17404 ;; This function uses a non-reentrant model
 17405 ;;
 17406                           
 17407                           	psect	text117
 17408  00343A                     __ptext117:
 17409                           	opt stack 0
 17410  00343A                     _EUSART1_Receive_ISR:
 17411                           	opt stack 22
 17412                           
 17413                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 17414                           
 17415                           ; BSR set to: 0
 17416                           ;incstack = 0
 17417  00343A  A2AB               	btfss	4011,1,c	;volatile
 17418  00343C  D002               	goto	i2l802
 17419                           
 17420                           ;eusart1.c: 206: {
 17421                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 17422  00343E  98AB               	bcf	4011,4,c	;volatile
 17423                           
 17424                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 17425  003440  88AB               	bsf	4011,4,c	;volatile
 17426  003442                     i2l802:
 17427                           
 17428                           ;eusart1.c: 210: }
 17429                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 17430  003442  5038               	movf	_eusart1RxHead,w,c	;volatile
 17431  003444  0D01               	mullw	1
 17432  003446  0E46               	movlw	low _eusart1RxBuffer
 17433  003448  24F3               	addwf	prodl,w,c
 17434  00344A  6ED9               	movwf	fsr2l,c
 17435  00344C  0E01               	movlw	high _eusart1RxBuffer
 17436  00344E  20F4               	addwfc	prodh,w,c
 17437  003450  6EDA               	movwf	fsr2h,c
 17438  003452  CFAE FFDF          	movff	4014,indf2	;volatile
 17439  003456  2A38               	incf	_eusart1RxHead,f,c	;volatile
 17440                           
 17441                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 17442  003458  0E27               	movlw	39
 17443  00345A  6438               	cpfsgt	_eusart1RxHead,c	;volatile
 17444  00345C  D002               	goto	i2l803
 17445                           
 17446                           ;eusart1.c: 217: {
 17447                           ;eusart1.c: 218: eusart1RxHead = 0;
 17448  00345E  0E00               	movlw	0
 17449  003460  6E38               	movwf	_eusart1RxHead,c	;volatile
 17450  003462                     i2l803:
 17451                           
 17452                           ;eusart1.c: 219: }
 17453                           ;eusart1.c: 220: eusart1RxCount++;
 17454  003462  0100               	movlb	0	; () banked
 17455  003464  2BD3               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 17456                           
 17457                           ; BSR set to: 0
 17458  003466  0012               	return		;funcret
 17459  003468                     __end_of_EUSART1_Receive_ISR:
 17460                           	opt stack 0
 17461                           tosu	equ	0xFFF
 17462                           tosh	equ	0xFFE
 17463                           tosl	equ	0xFFD
 17464                           pclatu	equ	0xFFB
 17465                           pclath	equ	0xFFA
 17466                           tblptru	equ	0xFF8
 17467                           tblptrh	equ	0xFF7
 17468                           tblptrl	equ	0xFF6
 17469                           tablat	equ	0xFF5
 17470                           prodh	equ	0xFF4
 17471                           prodl	equ	0xFF3
 17472                           intcon	equ	0xFF2
 17473                           intcon2	equ	0xFF1
 17474                           postinc0	equ	0xFEE
 17475                           fsr0h	equ	0xFEA
 17476                           fsr0l	equ	0xFE9
 17477                           wreg	equ	0xFE8
 17478                           indf1	equ	0xFE7
 17479                           postdec1	equ	0xFE5
 17480                           fsr1h	equ	0xFE2
 17481                           fsr1l	equ	0xFE1
 17482                           indf2	equ	0xFDF
 17483                           postinc2	equ	0xFDE
 17484                           postdec2	equ	0xFDD
 17485                           fsr2h	equ	0xFDA
 17486                           fsr2l	equ	0xFD9
 17487                           status	equ	0xFD8
 17488                           tosu	equ	0xFFF
 17489                           tosh	equ	0xFFE
 17490                           tosl	equ	0xFFD
 17491                           pclatu	equ	0xFFB
 17492                           pclath	equ	0xFFA
 17493                           tblptru	equ	0xFF8
 17494                           tblptrh	equ	0xFF7
 17495                           tblptrl	equ	0xFF6
 17496                           tablat	equ	0xFF5
 17497                           prodh	equ	0xFF4
 17498                           prodl	equ	0xFF3
 17499                           intcon	equ	0xFF2
 17500                           intcon2	equ	0xFF1
 17501                           postinc0	equ	0xFEE
 17502                           fsr0h	equ	0xFEA
 17503                           fsr0l	equ	0xFE9
 17504                           wreg	equ	0xFE8
 17505                           indf1	equ	0xFE7
 17506                           postdec1	equ	0xFE5
 17507                           fsr1h	equ	0xFE2
 17508                           fsr1l	equ	0xFE1
 17509                           indf2	equ	0xFDF
 17510                           postinc2	equ	0xFDE
 17511                           postdec2	equ	0xFDD
 17512                           fsr2h	equ	0xFDA
 17513                           fsr2l	equ	0xFD9
 17514                           status	equ	0xFD8
 17515                           
 17516                           	psect	text118
 17517  000000                     __ptext118:
 17518                           	opt stack 0
 17519                           tosu	equ	0xFFF
 17520                           tosh	equ	0xFFE
 17521                           tosl	equ	0xFFD
 17522                           pclatu	equ	0xFFB
 17523                           pclath	equ	0xFFA
 17524                           tblptru	equ	0xFF8
 17525                           tblptrh	equ	0xFF7
 17526                           tblptrl	equ	0xFF6
 17527                           tablat	equ	0xFF5
 17528                           prodh	equ	0xFF4
 17529                           prodl	equ	0xFF3
 17530                           intcon	equ	0xFF2
 17531                           intcon2	equ	0xFF1
 17532                           postinc0	equ	0xFEE
 17533                           fsr0h	equ	0xFEA
 17534                           fsr0l	equ	0xFE9
 17535                           wreg	equ	0xFE8
 17536                           indf1	equ	0xFE7
 17537                           postdec1	equ	0xFE5
 17538                           fsr1h	equ	0xFE2
 17539                           fsr1l	equ	0xFE1
 17540                           indf2	equ	0xFDF
 17541                           postinc2	equ	0xFDE
 17542                           postdec2	equ	0xFDD
 17543                           fsr2h	equ	0xFDA
 17544                           fsr2l	equ	0xFD9
 17545                           status	equ	0xFD8
 17546                           
 17547                           	psect	rparam
 17548  0000                     tosu	equ	0xFFF
 17549                           tosh	equ	0xFFE
 17550                           tosl	equ	0xFFD
 17551                           pclatu	equ	0xFFB
 17552                           pclath	equ	0xFFA
 17553                           tblptru	equ	0xFF8
 17554                           tblptrh	equ	0xFF7
 17555                           tblptrl	equ	0xFF6
 17556                           tablat	equ	0xFF5
 17557                           prodh	equ	0xFF4
 17558                           prodl	equ	0xFF3
 17559                           intcon	equ	0xFF2
 17560                           intcon2	equ	0xFF1
 17561                           postinc0	equ	0xFEE
 17562                           fsr0h	equ	0xFEA
 17563                           fsr0l	equ	0xFE9
 17564                           wreg	equ	0xFE8
 17565                           indf1	equ	0xFE7
 17566                           postdec1	equ	0xFE5
 17567                           fsr1h	equ	0xFE2
 17568                           fsr1l	equ	0xFE1
 17569                           indf2	equ	0xFDF
 17570                           postinc2	equ	0xFDE
 17571                           postdec2	equ	0xFDD
 17572                           fsr2h	equ	0xFDA
 17573                           fsr2l	equ	0xFD9
 17574                           status	equ	0xFD8
 17575                           
 17576                           	psect	temp
 17577  000048                     btemp:
 17578                           	opt stack 0
 17579  000048                     	ds	1
 17580  0000                     int$flags	set	btemp
 17581  0000                     wtemp6	set	btemp+1
 17582                           tosu	equ	0xFFF
 17583                           tosh	equ	0xFFE
 17584                           tosl	equ	0xFFD
 17585                           pclatu	equ	0xFFB
 17586                           pclath	equ	0xFFA
 17587                           tblptru	equ	0xFF8
 17588                           tblptrh	equ	0xFF7
 17589                           tblptrl	equ	0xFF6
 17590                           tablat	equ	0xFF5
 17591                           prodh	equ	0xFF4
 17592                           prodl	equ	0xFF3
 17593                           intcon	equ	0xFF2
 17594                           intcon2	equ	0xFF1
 17595                           postinc0	equ	0xFEE
 17596                           fsr0h	equ	0xFEA
 17597                           fsr0l	equ	0xFE9
 17598                           wreg	equ	0xFE8
 17599                           indf1	equ	0xFE7
 17600                           postdec1	equ	0xFE5
 17601                           fsr1h	equ	0xFE2
 17602                           fsr1l	equ	0xFE1
 17603                           indf2	equ	0xFDF
 17604                           postinc2	equ	0xFDE
 17605                           postdec2	equ	0xFDD
 17606                           fsr2h	equ	0xFDA
 17607                           fsr2l	equ	0xFD9
 17608                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    120
    Data        20
    BSS         255
    Persistent  5
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160     97     160
    BANK1           256      9     203
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    PLLUartInitialize@data	PTR unsigned char  size(2) Largest target is 0

    SetConversionResultFormat@data	PTR unsigned char  size(2) Largest target is 0

    SetAdcOperationMode@data	PTR unsigned char  size(2) Largest target is 0

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 9
		 -> GetIntFromUartData@dataRegArr(BANK0[9]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[9]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK0[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[9]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK0[20]), 

    SetCpldFwVersion@data	PTR unsigned char  size(2) Largest target is 0

    SetMcuFwVersion@data	PTR unsigned char  size(2) Largest target is 0

    Make32bitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    ZeroBitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[9]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK0[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[9]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK0[20]), 

    crc8@dataArray	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK0[20]), 

    GroupDAC@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 128
		 -> FlashTest@buff(BANK0[128]), sampleArray(BANK1[64]), 

    UpdateRxFreq@data	PTR unsigned char  size(2) Largest target is 0

    UpdateTxFreq@data	PTR unsigned char  size(2) Largest target is 0

    DacSetValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    WriteUartMessage@dataBuf	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), 

    SetChannelMode@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _GroupSynthesizers->_UpdateRxFreq
    _GroupSynthesizers->_UpdateTxFreq
    _UpdateTxFreq->_SWSPI_send_word
    _UpdateRxFreq->_SWSPI_send_word
    _GroupStatusAndVersion->_GetCpldFwVersion
    _SetMcuFwVersion->_SendAckMessage
    _SetCpldFwVersion->_SendAckMessage
    _GetMcuRunTime->___lldiv
    _GetMcuFwVersion->_ZeroArray
    _GetCpldFwVersion->_ZeroArray
    _GroupFlashMemory->_FlashReadCondition
    _FlashReadUart->_SendAckMessage
    _FlashReadCondition->_ZeroArray
    _FlashEreaseMem->_SendAckMessage
    _GroupDAC->_DacSetValue
    _DacSetValue->_SWSPI_send_word
    _StoreIntInEeprom->_make8
    _EepromWrite->_DATAEE_WriteByte
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _testLeds->_SendAckMessage
    _ResetMcu->_SendAckMessage
    _ResetCpld->_SendAckMessage
    _SetConversionResultFormat->_SendAckMessage
    _SetChannelMode->_SendAckMessage
    _SetAdcOperationMode->_SendAckMessage
    _keepAliveSignalUart->_SendAckMessage
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendSystemStartAck->_SendAckMessage
    _SendAckMessage->_ZeroArray
    _ZeroArray->_memset
    _WriteUartMessage->_EUSART1_Write
    _InitSystemApplicationManagers->_DacInit
    _PLLInitialize->_SWSPI_send_word
    _DacInit->_SWSPI_send_word
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _SWSPI_Synth_send_bits->_Make32bitsArray
    _SWSPI_Synth_send_bits->_ZeroBitsArray
    _ZeroBitsArray->_memset
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    _ReadIntFromEeprom->_EepromRead
    _EepromRead->_DATAEE_ReadByte
    _CheckFlashPrecentage->___ftdiv
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _readUartMessage->_GroupFlashMemory
    _GroupFlashMemory->_FlashReadUart
    _GetIntFromUartData->_strtol
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_readUartMessage
    _readUartMessage->_GroupAdc
    _readUartMessage->_GroupControlMcu
    _readUartMessage->_GroupDAC
    _readUartMessage->_GroupFlashMemory
    _readUartMessage->_GroupStatusAndVersion
    _readUartMessage->_GroupSynthesizers

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  318582
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
                 _SendSystemStartAck
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                _keepAliveSignalUart
                    _readUartMessage
 ---------------------------------------------------------------------------------
 (1) _readUartMessage                                      7     7      0  173396
                                              2 BANK1      7     7      0
                       _EUSART1_Read
                           _GroupAdc *
                    _GroupControlMcu *
                           _GroupDAC *
                   _GroupFlashMemory *
              _GroupStatusAndVersion *
                  _GroupSynthesizers *
                _InitRxMessageParams
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    2359
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupSynthesizers                                    3     1      2   42559
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                  _PLLUartInitialize
                       _UpdateRxFreq
                       _UpdateTxFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateTxFreq                                         6     4      2   21112
                                             46 COMRAM     2     0      2
                                             38 BANK0      4     4      0
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _UpdateRxFreq                                         6     4      2   21112
                                             46 COMRAM     2     0      2
                                             38 BANK0      4     4      0
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _PLLUartInitialize                                    2     0      2     180
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _GroupStatusAndVersion                                3     1      2   30499
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                   _GetCpldFwVersion
                    _GetMcuFwVersion
                      _GetMcuRunTime
                   _SetCpldFwVersion
                    _SetMcuFwVersion
 ---------------------------------------------------------------------------------
 (3) _SetMcuFwVersion                                      3     1      2    7588
                                             43 COMRAM     3     1      2
                        _EepromWrite
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetCpldFwVersion                                     4     2      2    7588
                                             43 COMRAM     4     2      2
                        _EepromWrite
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _GetMcuRunTime                                       17    17      0    4138
                                             36 COMRAM     2     2      0
                                              0 BANK0     15    15      0
                   _WriteUartMessage
                            ___lldiv
                            ___llmod
                               _crc8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _GetMcuFwVersion                                     12    12      0    5546
                                             35 COMRAM    12    12      0
                         _EepromRead
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _GetCpldFwVersion                                    13    13      0    5546
                                             35 COMRAM    13    13      0
                         _EepromRead
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _GroupFlashMemory                                     4     2      2   29318
                                             95 BANK0      2     2      0
                                              0 BANK1      2     0      2
                     _FlashEreaseMem
                 _FlashReadCondition
                      _FlashReadUart
 ---------------------------------------------------------------------------------
 (3) _FlashReadUart                                       97    95      2   13468
                                             43 COMRAM     2     0      2
                                              0 BANK0     95    95      0
                  _FLASH_IsWriteDone
                     _FLASH_ReadByte
                     _SendAckMessage
                   _WriteUartMessage
                          _ZeroArray
                                _abs
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     183
                                             23 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _FLASH_ReadByte                                       4     0      4     543
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _FlashReadCondition                                  13    13      0    6700
                                             35 COMRAM    13    13      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _FlashEreaseMem                                       0     0      0    9088
                     _SendAckMessage
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupDAC                                             3     1      2   23674
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                        _DacSetValue
 ---------------------------------------------------------------------------------
 (3) _DacSetValue                                          8     6      2   23547
                                             46 COMRAM     2     0      2
                                             38 BANK0      6     6      0
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _StoreIntInEeprom                                     9     2      7    2339
                                             32 COMRAM     9     2      7
                        _EepromWrite
                              _make8
 ---------------------------------------------------------------------------------
 (4) _EepromWrite                                          2     1      1     608
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     3     2      1     276
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  21    17      4    5350
                                              6 BANK0     21    17      4
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2273
                                             35 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     456
                                             23 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _GroupControlMcu                                      4     1      3   20286
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                          _ResetCpld
                           _ResetMcu
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0    6797
                                             43 COMRAM     3     3      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetMcu                                             0     0      0    6729
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetCpld                                            0     0      0    6729
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupAdc                                             3     1      2   20643
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                _SetAdcOperationMode
                     _SetChannelMode
          _SetConversionResultFormat
 ---------------------------------------------------------------------------------
 (3) _SetConversionResultFormat                            2     0      2    6819
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetChannelMode                                       2     0      2    6881
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetAdcOperationMode                                  2     0      2    6819
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalUart                                  0     0      0    6729
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     592
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     592
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendSystemStartAck                                   0     0      0    6729
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _SendAckMessage                                       8     7      1    6729
                                             35 COMRAM     8     7      1
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _crc8                                                 9     5      4    1430
                                             23 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ZeroArray                                            4     0      4    2359
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _WriteUartMessage                                     7     3      4    1272
                                             24 COMRAM     7     3      4
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0   18358
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        1     1      0    9163
                                             46 COMRAM     1     1      0
                    _SWSPI_send_word
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (3) _SwSpi_Set_CE_Pin                                     2     1      1     186
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                1     1      0       1
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              2     2      0    9194
                                             46 COMRAM     2     2      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
 ---------------------------------------------------------------------------------
 (4) _SWSPI_send_word                                      9     4      5    8878
                                             37 COMRAM     9     4      5
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5    1235
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SWSPI_Synth_send_bits                               42    38      4    3353
                                             33 COMRAM     4     0      4
                                              0 BANK0     38    38      0
                    _Make32bitsArray
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
                      _ZeroBitsArray
 ---------------------------------------------------------------------------------
 (6) _ZeroBitsArray                                        2     0      2     798
                                             31 COMRAM     2     0      2
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     677
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (6) _Make32bitsArray                                     10     4      6     344
                                             23 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (5) _SWSPI_DAC_send_bits                                  3     2      1    2041
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Data_Pin                                       2     1      1     757
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Clk_Pin                                        2     1      1     937
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (3) _ReadIntFromEeprom                                   13     9      4     313
                                             25 COMRAM    13     9      4
                         _EepromRead
 ---------------------------------------------------------------------------------
 (4) _EepromRead                                           1     1      0      62
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_ReadByte                                      1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   13919
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _BlinkErrorLeds                                       6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          12    12      0   98581
                                             81 BANK0     12    12      0
                  _ADC_GetConversion
                   _FlashSampleWrite
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   83041
                                             64 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   26919
                                             46 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   44808
                                             55 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     400
                                             46 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   11219
                                             47 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     528
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     632
                                             24 BANK0     15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     896
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    3367
                                             46 COMRAM     2     2      0
                                             39 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   11976
                                             46 COMRAM     2     2      0
                                             36 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     563
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     273
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3386
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1631
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6    1172
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          18    18      0     767
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0     767
                            ___lwmod
 ---------------------------------------------------------------------------------
 (10) ___lwmod                                             5     1      4     767
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _MEMORY_ISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
           _ZeroBitsArray
             _memset
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
           _ZeroBitsArray
             _memset
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SendSystemStartAck
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _keepAliveSignalUart
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _readUartMessage
     _EUSART1_Read
     _GroupAdc *
       _SetAdcOperationMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetChannelMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetConversionResultFormat
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupControlMcu *
       _ResetCpld
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _ResetMcu
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _testLeds
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupDAC *
       _DacSetValue
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _GroupFlashMemory *
       _FlashEreaseMem
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _ZeroArray
           _memset
       _FlashReadCondition
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _FlashReadUart
         _FLASH_IsWriteDone
         _FLASH_ReadByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _abs
         _crc8
     _GroupStatusAndVersion *
       _GetCpldFwVersion
         _EepromRead
           _DATAEE_ReadByte
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _GetMcuFwVersion
         _EepromRead
           _DATAEE_ReadByte
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _GetMcuRunTime
         _WriteUartMessage
           _EUSART1_Write
         ___lldiv
         ___llmod
         _crc8
       _SetCpldFwVersion
         _EepromWrite
           _DATAEE_WriteByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetMcuFwVersion
         _EepromWrite
           _DATAEE_WriteByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupSynthesizers *
       _PLLUartInitialize
       _UpdateRxFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _UpdateTxFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _ZeroBitsArray
               _memset
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _ZeroArray *
       _memset
     _crc8 *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      9      CB       6       79.3%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     61      A0       4      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B2       9        0.0%
DATA                 0      0     1B2      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 12 18:20:23 2018

             __size_of_SendSystemStartAck 000C                         ??_GetMcuFwVersion 0024  
              __end_of_keepAliveSignalLed 3686                              ___altoft@exp 002F  
                _eusart1TxBufferRemaining 00FF                        readUartMessage@idx 01C8  
                         _GroupControlMcu 3102               __end_of_keepAliveSignalUart 3788  
                           ___altoft@sign 0030                __size_of_FLASH_IsWriteDone 000E  
                                      l50 27A8                  GetIntFromUartData@retVal 0074  
                     __end_of_BlinkOkLeds 297E                           _SWSPI_send_word 21D2  
                     ___wmul@multiplicand 001A                           _timer0ReloadVal 0046  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
                            ___ftadd@exp1 0083                              ___ftadd@exp2 0082  
                            ___ftadd@sign 0081                               ?_MEMORY_ISR 0001  
                                     l112 10F6                                       l200 0B6A  
                                     l113 101C                                       l210 335C  
                                     l202 0BA2                                       l211 3346  
                                     l108 33FE                                       l300 0830  
                                     l204 0BA8                                       l310 091E  
                                     l302 0842                                       l311 0936  
                                     l313 09B4                                       l305 08EA  
                                     l315 0A0A                                       l316 0A20  
                                     l308 0902                                       l309 0A26  
                                     l182 0A52                                       l191 0AB4  
                                     l183 0A7E                                       l193 0AD2  
                                     l530 2BC2                                       l522 2268  
                                     l610 317E                                       l290 0892  
                                     l178 0C02                                       l283 17DE  
                                     l531 2BCC                                       l611 3188  
                                     l443 2E5C                                       l291 07F6  
                                     l451 2D3C                                       l195 0AD8  
                                     l187 0A84                                       l179 0A44  
                                     l284 17FC                                       l620 319C  
                                     l293 0742                                       l197 0B44  
                                     l189 0A9C                                       l630 31E2  
                                     l518 220E                                       l198 0B00  
                                     l543 2C8E                                       l631 31BA  
                                     l295 0752                                       l544 2C52  
                                     l528 2BDC                                       l536 2008  
                                     l640 31CE                                       l632 31C4  
                                     l456 2D8E                                       l561 2C7A  
                                     l553 2C66                                       l545 2C5C  
                                     l529 2BA8                                       l641 31D8  
                                     l609 31A6                                       l297 07BE  
                                     l562 2C84                                       l554 2C70  
                                     l538 2036                                       l298 0880  
                                     l539 2042                                       l651 3644  
                                     l619 3192                                       l572 2CE4  
                                     l652 363C                                       l573 2CA8  
                                     l590 2CD0                                       l582 2CBC  
                                     l574 2CB2                                       l591 2CDA  
                                     l583 2CC6                                       l656 3640  
                                     l790 3152                                       l791 3176  
                                     l792 3174                                       l777 2FC8  
                                     l890 1F92                                       l891 1F94  
                                     l779 2FEE                                       l887 1FBA  
                                     l888 1F72                                       l898 32F4  
                            __CFG_CPB$OFF 000000                              __CFG_CPD$OFF 000000  
                    readUartMessage@chRec 01CA                         ??_Make32bitsArray 001E  
                              _SYNTH_REGS 0601                          PLLInitialize@idx 002F  
                                     _abs 34BC                                       _exp 0C38  
                                     _log 14E0                                       _pow 1364  
                                     prod 000FF3                                       tosl 000FFD  
                                     wreg 000FE8                     ??_SetAdcOperationMode 002E  
          ?_InitSystemApplicationManagers 0001                              __CFG_LVP$OFF 000000  
              __end_of_FlashReadCondition 170E                              ___ftdiv@cntr 0063  
                            ___ftdiv@sign 0068                            ?_ZeroBitsArray 0020  
                                    l1000 3422                                      l2001 36C2  
                                    l1113 311A                                      l1114 3108  
                                    l1130 2B1E                                      ?_abs 0018  
                                    l2100 14FC                                      l1116 310E  
                                    l1124 2B24                                      l1301 32A6  
                                    l1117 3114                                      l1125 2AF6  
                                    l2102 151C                                      l1230 2A46  
                                    l1206 2EC0                                      l1231 2A74  
                                    l1207 2EA4                                      l1311 3054  
                                    l1127 2AFC                                      l1135 2F10  
                                    l2040 0CF2                                      l1240 3222  
                                    l1144 2A1A                                      l1128 2B0A  
                                    l1136 2EE6                                      l2041 0E1C  
                                    l1225 2A78                                      l1241 31F8  
                                    l1145 29E2                                      l1129 2B10  
                                    l2050 1C1A                                      l2042 0DF2  
                                    l1226 2A3A                                      l1218 1E84  
                                    l1306 2560                                      l1138 2EF4  
                                    l1154 2F9C                                      l2051 1C96  
                                    l1235 2B60                                      l1147 29F0  
                                    l1139 2F02                                      l1155 2F76  
                                    l1163 35B4                                      l2108 1D62  
                                    l2060 1D94                                      l2036 0C52  
                                    l1228 2A3E                                      l1316 233A  
                                    l1148 29FE                                      l1164 35A6  
                                    l2109 1CE4                                      l1237 2B9E  
                                    l1229 2A42                                      l1149 2A0C  
                                    l1157 2F7C                                      l2062 1DDA  
                                    l2038 0C8A                                      l1246 290E  
                                    l1406 2C08                                      l1158 2F82  
                                    l2047 1C00                                      l2039 0CC2  
                                    l1407 2C1C                                      l1327 1B18  
                                    l2056 23B6                                      l2048 1BF2  
                                    l2064 1E08                                      l2065 1DFC  
                                    l2073 3504                                      l2083 352A  
                                    l1620 219E                                      l1444 34DA  
                                    l1613 214C                                      l1614 2142  
                                    l2078 35D6                                      l1703 356E  
                                    l1616 2180                                      l2088 35F4  
                                    l1617 216A                                      l1721 18D2  
                                    l1713 1836                                      l1385 2872  
                                    l1722 18C6                                      l1386 288A  
                                    l1619 21A8                                      l1483 2662  
                                    l1715 18AE                                      l1644 120A  
                                    l1484 2656                                      l1724 18EE  
                                    l1716 189E                                      l1388 28B0  
                                    l1653 129A                                      l1709 3096  
                                    l1389 28A4                                      l1670 12F2  
                                    l1750 24D0                                      l1671 130E  
                                    l1680 1A86                                      l1672 133E  
                                    l1648 1234                                      l1760 280C  
                                    l1681 1AAC                                      l4321 24AA  
                                    l1841 13C6                                      l1753 2510  
                                    l1770 2AA6                                      l1594 323E  
                                    l1658 1290                                      l1842 144C  
                                    l1826 3482                                      l1754 251E  
                                    l1771 2A9A                                      l1667 12CE  
                                    l1659 1286                                      l1843 142A  
                                    l1827 3472                                      l1763 2840  
                                    l1668 12C4                                      l1692 192A  
                                    l1844 14D2                                      l1764 284E  
                                    l1677 1A20                                      l1685 244E  
                                    l1749 24DC                                      l1694 1952  
                                    l1686 247E                                      l1838 13AE  
                                    l1679 1A48                                      l1695 1984  
                                    l1839 139E                                      l1759 2818  
                                    l1696 1994                                      l7001 1EC0  
                                    l1698 19AC                                      l1699 19BC  
                                    l1981 0ED6                                      l1990 0F10  
                                    l1993 0F22                                      l1977 0E6A  
                                    l1994 0F8E                                      l1987 0EE6  
                                    l1979 0E82                                      l1996 0FB2  
                                    l1988 0EF6                                      l1997 0FEE  
                                    l7301 0902                                      l7225 1F6A  
                                    l7305 0926                                      l6363 3472  
                                    l7315 0986                                      ?_exp 0097  
                                    l6381 3140                                      ?_log 008E  
                                    l7191 27EE                                      l7503 1B94  
                                    l7177 2798                                      l6459 2B50  
                                    l7419 2558                                      l7435 329E  
                                    l6657 2000                                      l7459 232A  
                                    l7491 1B08                                      l7475 3044  
                                    l7469 2362                                      l7485 3072  
                                    l5967 2988                                      l7579 0DF2  
                                    l5979 292A                                      l6963 2228  
                                    l7693 2E54                                      l6967 2236  
                                    l6983 1E74                                      l7785 1014  
                                    ?_pow 00A0                        EepromWrite@address 001C  
                                    _IOCB 000F62                                      _LATA 000F89  
                                    _LATB 000F8A                                      _LATC 000F8B  
                                    u4000 23DE                                      _LATD 000F8C  
                                    _LATE 000F8D                                      u4008 23E0  
                                    u6020 2134                                      u4340 1DB4  
                                    u5220 3678                                      u6110 3526  
                                    u6210 2A6C                                      u6130 34F6  
                                    u6060 21B2                                      u4348 1DB8  
                                    u7030 1C0C                                      u5238 367A  
                                    u3911 181A                                      u6215 2A62  
                                    u7120 1F98                                      u3930 1854  
                                    u6330 0E72                                      u7070 27EE  
                                    u7310 0986                                      u7135 1FB6  
                                    u3935 184C                                      u7136 1FB8  
                                    u6520 11FC                                      u6280 2054  
                                    u6360 0EAC                                      u7320 09A4  
                                    u7225 07C8                                      u3970 18D8  
                                    u7170 06EE                                      u8107 27C0  
                                    u6620 12A2                                      u6380 0EBC  
                                    u7180 06F0                                      u7420 2586  
                                    u7500 1B94                                      u8117 27D0  
                                    u7245 0854                                      u6550 1226  
                                    u6711 193A                                      u8127 27E0  
                                    u7280 08D8                                      u7440 32C4  
                                    u6481 11C8                                      u8137 2056  
                                    u6650 12D6                                      u6491 11DC  
                                    u8147 2950                                      u6580 1264  
                                    u6820 2262                                      u7460 2362  
                                    u6901 1A30                                      u8157 296A  
                                    u5845 3302                                      u6750 3754  
                                    u7710 17AE                                      u5846 3304  
                                    u6751 3750                                      u8167 29AE  
                                    u7480 3072                                      u8177 29C8  
                                    u8097 27B0                                      u7385 2758  
                                    u7570 0CCC                                      u6850 1EC0  
                                    u6691 1912                                      u8187 10E2  
                                    u7580 0CCE                                      u7660 1414  
                                    u6790 21E2                                      u6960 24E0  
                                    u6881 1A08                                      u7690 176A  
                                    u6875 33D6                                      u6876 33D8  
                                    u7940 2120                                      u7685 1718  
                                    u6990 281C                                      u7938 0BDA  
                                    u7939 0BFA                  ??_SwSpi_Set_Synth_Le_Pin 0019  
                                    _WPUB 000F61                             _EUSART1_Write 313E  
                                    abs@a 0018                                      _crc8 2E92  
                 ??_InitAdcApplicationMgr 0018                                      _data 00CE  
                                    _main 2860                              ___ftpack@arg 0018  
                           ?_EUSART1_Read 0001                              ___ftpack@exp 001B  
                         _TMR0_StartTimer 37BA                           __end_of_DacInit 2632  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf1 000FE7                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 0048                             __CFG_BORV$190 000000  
                                    exp@x 0097                                      log@x 008E  
                       ?_FLASH_WriteBlock 001D                          ?_ClearMcuRunTime 0001  
                                    pow@x 00A0                                      pow@y 00A3  
                                    prodh 000FF4                                      prodl 000FF3  
               GroupStatusAndVersion@data 01C2             __size_of_CheckFlashPrecentage 00AE  
                                    start 00DC                             __CFG_IESO$OFF 000000  
                     __end_of_EepromWrite 372E                        ??_FLASH_WriteBlock 0023  
                           _adcSampleMode 003D                              ___ftmul@cntr 0076  
                            ___param_bank 000000                              ___ftmul@sign 0077  
                          _BlinkErrorLeds 297E                              ___fttol@exp1 0086  
                                   ??_abs 001A                 __size_of_DATAEE_WriteByte 0036  
                                   ??_exp 0031                                     ??_log 0031  
                            ___fttol@lval 0082                                     ??_pow 0031  
                 __end_of_TMR0_Initialize 33A6            __size_of_OSCILLATOR_Initialize 000E  
           __end_of_OSCILLATOR_Initialize 374A                                     ?_crc8 0018  
              SWSPI_DAC_send_bits@phrType 001C                                     ?_main 0001  
                                   _EEADR 000FA9                           __end_of___ftadd 1364  
         __size_of_SwSpi_Set_Dac_Sync_Pin 001C                           __end_of___ftdiv 1ADE  
                         __end_of___ftneg 357C                           __end_of___lldiv 2530  
                              _EepromRead 37A8                           __end_of___ftmul 19F6  
                                   _T0CON 000FD5                           __end_of___llmod 2860  
                         __end_of___ftsub 30C0                           __end_of___fttol 1900  
                          __CFG_DEBUG$OFF 000000                           __end_of___lwmod 3102  
                     StoreIntInEeprom@idx 0029                                     i2l802 3442  
                                   i2l730 007A                                     i2l803 3462  
                                   i2l732 0086                                     i2l725 005E  
                                   i2l734 0090                                     i2l727 006A  
                                   i2l796 328E                                     i2l956 229C  
                                   i2l797 328A                                     i2l957 22BE  
                                   i2l958 22E0                       StoreIntInEeprom@val 0028  
                                   _TMR0H 000FD7                                     _TMR0L 000FD6  
                                   _TRISA 000F92                                     _TRISB 000F93  
                                   _TRISC 000F94                                     _TRISD 000F95  
                                   _TRISE 000F96                       _SWSPI_DAC_send_bits 2BA0  
       __size_of_TMR0_SetInterruptHandler 000A                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                __end_of_GetIntFromUartData 1F00  
                           __CFG_WRT2$OFF 000000                       ___lmul@multiplicand 001C  
               ?_TMR0_SetInterruptHandler 0018                             __CFG_WRT3$OFF 000000  
                            ___lltoft@exp 0028                      _EUSART1_Transmit_ISR 3262  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                         ?_WriteUartMessage 0019  
                        __end_of_TMR0_ISR 22FE                             __CFG_WRTB$OFF 000000  
                __size_of_SetMcuFwVersion 0036                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                           DacSetValue@data 002F  
                         _DATAEE_ReadByte 36C6                            __CFG_EBTRB$OFF 000000  
                           ___awtoft@sign 0023                   __end_of_PIN_MANAGER_IOC 37C2  
                                   crc8@i 001F                                     _make8 2A38  
          __size_of_SWSPI_Synth_send_bits 00BA                     __end_of_GetMcuRunTime 1BC2  
                                   _count 00C9                                     _floor 1BC2  
                                   _ldexp 1D7A                                     _frexp 238E  
                                   _errno 00C5             __end_of_SWSPI_Synth_send_bits 2076  
                         __end_of_isalpha 350C                           __end_of_isdigit 35DE  
                                   _group 00D1                        ??_WriteUartMessage 001D  
                      __CFG_MCLRE$EXTMCLR 000000                             ___ftpack@sign 001C  
                 ??_GroupStatusAndVersion 0031                           __end_of_isspace 3532  
                          ?_EUSART1_Write 0001                               ?_AdcConvert 0001  
                          __CFG_BOREN$OFF 000000                           __end_of_isupper 35FC  
                                   pclath 000FFA                                     tablat 000FF5  
                                   pow@yi 00AD                            ??_EUSART1_Read 0018  
                                   status 000FD8                                     wtemp6 0049  
                          __CFG_HFOFST$ON 000000                           __end_of_toupper 36C6  
          SwSpi_Set_Synth_Le_Pin@cPinMode 0018                   __end_of_GroupControlMcu 313E  
                     __size_of_MEMORY_ISR 0004                            __CFG_PBADEN$ON 000000  
      __size_of_SetConversionResultFormat 000C                               exp@exponent 009D  
          CheckFlashPrecentage@precentage 007C                      ?_SWSPI_DAC_send_bits 001A  
                  __end_of_BlinkErrorLeds 29DC                               ldexp@newexp 0091  
                 __end_of_SWSPI_send_word 226C                               _BlinkOkLeds 2920  
                 WriteUartMessage@dataBuf 0019                           __initialization 26AC  
                             log@exponent 0091                              __end_of_crc8 2EE0  
              __end_of_EUSART1_Initialize 333C                              __end_of_main 28C2  
                 FLASH_ReadByte@flashAddr 0018               ?_INTERRUPT_InterruptManager 0001  
                        __end_of_GroupDAC 35C0                           _readUartMessage 0A3C  
                        __end_of_GroupAdc 2F28                                    ??_crc8 001C  
                                  ??_main 0031                             ___fttol@sign1 0081  
                       ?_SwSpi_Set_CE_Pin 0018                        _TimerKeepAliveFlag 00D6  
                           __activetblptr 000002                   __size_of_FLASH_ReadByte 0012  
                        __end_of_ResetMcu 373C                       SetMcuFwVersion@data 002C  
                            _writeAddress 0042                        ??_SwSpi_Set_CE_Pin 0019  
                   ?_EUSART1_Transmit_ISR 0001                           ??_ZeroBitsArray 0022  
                 __end_of_TMR0_StartTimer 37BE                                    ?_make8 0018  
                                  _ADCON0 000FC2                                    _ADCON1 000FC1  
                                  _ADCON2 000FC0                                    ?_floor 008F  
               FLASH_WriteBlock@writeAddr 001D                                    ?_ldexp 008E  
                                  ?_frexp 0018                          __end_of___altoft 26AC  
                        ___llmod@dividend 0018                                    _ADRESH 000FC4  
                                  _ADRESL 000FC3                                    _EEDATA 000FA8  
                               ??_DacInit 002F                                    _EECON2 000FA7  
                        __end_of___awtoft 3262                                    _ANSELA 000F38  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                                  _ANSELD 000F3B                                    _ANSELE 000F3C  
                        __end_of___ftpack 21D2                          __end_of___lltoft 2AF0  
                       _FlashReadUart$565 00B1                         _FlashReadUart$566 00B5  
                       ?_FlashSampleWrite 002D                                    i2l1812 30D6  
                                  i2l1813 30CE                            __CFG_WDTEN$OFF 000000  
                                  i2l1816 30EE                                    i2l1817 30F8  
                    StoreIntInEeprom@data 0021                                    _TABLAT 000FF5  
                             _EepromWrite 3720                                    _RCREG1 000FAE  
                        __end_of___lwtoft 35A0                   __size_of_FlashEreaseMem 0052  
               __size_of_FLASH_EraseBlock 0034                                    _RCSTA1 000FAB  
         __size_of_SwSpi_Set_Synth_Le_Pin 003C                                    _OSCCON 000FD3  
                                  _SPBRG1 000FAF                    _SwSpi_Set_Dac_Sync_Pin 3638  
                 __size_of_SwSpi_Data_Pin 0056                  GroupSynthesizers@request 00BF  
                      ??_FlashSampleWrite 0060                                    _TXREG1 000FAD  
                                  _TXSTA1 000FAC                     ??_SWSPI_DAC_send_bits 001B  
                __end_of_GroupFlashMemory 2FB4                           ?_BlinkErrorLeds 0001  
                          __CFG_PWRTEN$ON 000000                          _GetCpldFwVersion 22FE  
                          __CFG_XINST$OFF 000000                         ?_SetCpldFwVersion 002C  
                                  _cState 00D2                                    ___ftge 241E  
                                  ___lmul 2BF8                 SWSPI_Synth_send_bits@data 0022  
                                  ___wmul 3532                       UpdateRxFreq@regData 0086  
                               ??___ftadd 007E                 SWSPI_Synth_send_bits@mask 0080  
                               ??___ftdiv 0060                                 ??___ftneg 001B  
                               ??___lldiv 0020                                 ??___ftmul 006F  
                   __end_of_PLLInitialize 2E92                                 ??___llmod 0020  
                               ??___ftsub 002F                                 ??___fttol 007C  
                      ??_SetCpldFwVersion 002E                                 ??___lwmod 0005  
          SwSpi_Set_Dac_Sync_Pin@cPinMode 0018                        __size_of_ResetCpld 000C  
                        ?_TMR0_Initialize 0001                                    _memset 3468  
                      __end_of_DAC_ADDRES 0640                                    clear_0 26F2  
                                  clear_1 26FE                                    clear_2 270A  
                     __size_of_AdcConvert 01B6                   __end_of_DATAEE_ReadByte 36DA  
                             ?_EepromRead 0001                                    _strtol 0E2A  
                                  floor@i 0092                     __end_of_SwSpi_Clk_Pin 2CFA  
                                  floor@x 008F                     ___ftmul@f3_as_product 0073  
                SWSPI_DAC_send_bits@count 001B                FlashSampleWrite@channelNum 002F  
                            __pdataCOMRAM 0042                                 ??_isalpha 001B  
                               ??_isdigit 0018                     __end_of_FlashReadUart 0A3C  
                        __end_of_testLeds 27FA                             ?_SetMcuSystem 0001  
                            __mediumconst 0000                                 ??_isspace 0018  
                                  tblptrh 000FF7                                 ??_isupper 0018  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                ADC_GetConversion@channel 001C                           ??_EUSART1_Write 0018  
TMR0_SetInterruptHandler@InterruptHandler 0018              __size_of_InitRxMessageParams 0028  
                        ?_PIN_MANAGER_IOC 0001                           _eusart1RxBuffer 0146  
                               ??_toupper 0018                        __size_of_ZeroArray 001E  
           __size_of_INTERRUPT_Initialize 0004                           _eusart1TxBuffer 0100  
                         _GetMcuFwVersion 2530                          __end_ofexp@coeff 065E  
                       _SYSTEM_Initialize 3654                          __end_oflog@coeff 0679  
                              __accesstop 0060                   __end_of__initialization 2710  
                              ___altoft@c 0087                             ZeroArray@size 0022  
                       ??_SetMcuFwVersion 002E                                ___ftadd@f1 0078  
                              ___ftadd@f2 007B                                ___ftge@ff1 0018  
                              ___ftge@ff2 001B                        ?_SYSTEM_Initialize 0001  
                            eval_poly@res 008B                             ___rparam_used 000001  
                              ___ftdiv@f1 0029                                ___ftdiv@f2 002C  
                              ___ftdiv@f3 0064                          ?_GroupControlMcu 01C2  
            GroupStatusAndVersion@request 00BF                                ___ftneg@f1 0018  
                              ___awtoft@c 0020                   __end_of_readUartMessage 0C38  
                WriteUartMessage@dataSize 001B                                ___ftmul@f1 0069  
                              ___ftmul@f2 006C                          ?_SWSPI_send_word 0026  
                            ?_DacSetValue 002F                                ___ftsub@f1 0084  
                              ___ftsub@f2 0087                                ___fttol@f1 0078  
                         _Make32bitsArray 2B48                            __pcstackCOMRAM 0001  
                            __pidataBANK0 3700                       ??_SYSTEM_Initialize 001C  
                               ?_TMR0_ISR 0001                                ___lltoft@c 0020  
                           __end_of_make8 2A94                          _DATAEE_WriteByte 32D0  
                           __end_of_floor 1CA4                             __end_of_ldexp 1E40  
                           __end_of_frexp 241E                    _SwSpi_Set_Synth_Le_Pin 31B6  
                    GroupFlashMemory@data 01C2                                ___lwtoft@c 0020  
                    __end_of_EUSART1_Read 2FF8                              ??_MEMORY_ISR 0001  
               __size_of_StoreIntInEeprom 0038                    __size_of_SetMcuRunTime 0044  
                  ??_EUSART1_Transmit_ISR 0001                            ??_SetMcuSystem 001C  
                      ZeroBitsArray@array 0020                     TMR0_ISR@CountCallBack 0035  
           SwSpi_Set_Synth_Le_Pin@phrType 0019                   GroupFlashMemory@request 00C0  
                      _keepAliveSignalLed 366E                         make8@dataLocation 001C  
             __end_of_EUSART1_Receive_ISR 3468               FLASH_WriteBlock@GIEBitValue 002B  
                            GroupDAC@data 01C2                                   ??_make8 001D  
                                 ??_floor 0031                          ?_TMR0_StartTimer 0001  
                                 ??_ldexp 0093                                   ??_frexp 001D  
                         _AdcConvert$3246 00B7                 __end_of_SYSTEM_Initialize 366E  
                           _eusart1RxHead 0038                      GetMcuFwVersion@TxMsg 0026  
                           _eusart1TxHead 003A                             _eusart1RxTail 0037  
                              __pbssBANK0 00C1                                __pbssBANK1 0100  
                           _eusart1TxTail 0039                       ?_keepAliveSignalLed 0001  
                      __size_of_eval_poly 00D6                         __end_of_ResetCpld 3764  
                         __CFG_PLLCFG$OFF 000000                                _channelArr 0635  
                               ?_GroupDAC 01C2                                __pnvCOMRAM 0046  
                               ?_GroupAdc 01C2            __size_of_InitAdcApplicationMgr 0010  
              __end_of_SendSystemStartAck 3794             __end_of_InitAdcApplicationMgr 3720  
                     __size_of_EepromRead 000A                        __end_of_MEMORY_ISR 37C6  
                               ?_ResetMcu 0001                        _FlashReadCondition 1602  
         ??_InitSystemApplicationManagers 0031                        __CFG_CCP2MX$PORTC1 000000  
                                 ?___ftge 0018                            FlashReadUart@j 00B9  
        __end_of_TMR0_SetInterruptHandler 37A8                                   ?___lmul 0018  
                                 ?___wmul 0018                                ??_TMR0_ISR 0006  
                      __CFG_CCP3MX$PORTB5 000000                        SetChannelMode@data 002C  
                    ??_keepAliveSignalLed 0018                         __end_of_ZeroArray 361A  
                               ?___altoft 0087                                   ?_memset 0018  
                       _ReadIntFromEeprom 28C2                            ___lmul@product 0020  
                     ?_FlashReadCondition 0001                                 ?___awtoft 0020  
                               ?___ftpack 0018                              GroupAdc@data 01C2  
                        FlashReadUart@idx 00BB                                 ?___lltoft 0020  
               __size_of_FLASH_WriteBlock 00BC                   __size_of_ADC_Initialize 0016  
             __end_of_SetAdcOperationMode 377C                FlashSampleWrite@sampleData 002D  
                          _FLASH_ReadByte 36EE                                 ?___lwtoft 0020  
            __end_of_CheckFlashPrecentage 2124                        ?_ReadIntFromEeprom 001A  
                                 ?_strtol 0024                          ?_DATAEE_ReadByte 0001  
            __size_of_keepAliveSignalUart 000C                   __end_of_GetMcuFwVersion 25B2  
                                 _OSCCON2 000FD2                                   _TBLPTRH 000FF7  
                                 _TBLPTRL 000FF6                                   _TBLPTRU 000FF8  
                                 _OSCTUNE 000F9B                                   _SPBRGH1 000FB0  
                     ??_ReadIntFromEeprom 001E                                   _DacInit 25B2  
                   GetIntFromUartData@idx 0079                     GetIntFromUartData@num 0073  
                        GetMcuRunTime@idx 006D                              ??_AdcConvert 00B1  
                    ??_FlashReadCondition 0024                            _FlashEreaseMem 2D9E  
                        _FLASH_EraseBlock 33A6            __size_of_GroupStatusAndVersion 0058  
                          _SwSpi_Data_Pin 2C4E                      DATAEE_WriteByte@bAdd 0019  
           __end_of_GroupStatusAndVersion 2B48                   __end_of_Make32bitsArray 2BA0  
                              ??_GroupDAC 0031                                ??_GroupAdc 0031  
                           _SetMcuRunTime 2FF8                        _GetIntFromUartData 1E40  
                      FlashReadUart@TxMsg 006C                     GroupSynthesizers@data 01C2  
                                 __Hparam 0000                                ??_ResetMcu 002C  
               __size_of_WriteUartMessage 0036                              ?_BlinkOkLeds 0001  
                                 __Lparam 0000                              _cntRegUpdate 003B  
                        UpdateRxFreq@data 002F                     SendAckMessage@inGroup 0025  
                        ?_readUartMessage 0001                    GroupControlMcu@request 00BF  
                               ?_testLeds 0001                 __end_of_ReadIntFromEeprom 2920  
                     ?_GetIntFromUartData 0066                           __size_of___ftge 0090  
                         __size_of___lmul 0056                                   ___ftadd 11B6  
                                 ___ftdiv 19F6                                   ___ftneg 3558  
                                 ___lldiv 24AE                           __size_of___wmul 0026  
                                 ___ftmul 1900                                   ___llmod 27FA  
                                 ___ftsub 307E                                   ___fttol 1808  
              FlashSampleWrite@rotateLeft 0062                              crc8@dataSize 001A  
                __size_of_ClearMcuRunTime 0014                                   ___lwmod 30C0  
                    AdcConvert@_adcResult 00B3                              __psmallconst 0600  
                              ??___altoft 008B                    __end_of_FLASH_ReadByte 3700  
                         __CFG_STVREN$OFF 000000                SWSPI_Synth_send_bits@count 0084  
                   _mcuRunTimeIn5SecTicks 00C1                                   _crcCalc 00CD  
                                 _channel 00D4                                   __pcinit 26AC  
                              ??___awtoft 0023                                ??___ftpack 001D  
                       __end_of_eval_poly 1D7A                           __size_of_memset 002C  
                                 __ramtop 0600                   __size_of_SendAckMessage 0052  
                              ??___lltoft 0024                   __size_of_SetChannelMode 0030  
                                 __ptext0 2860                                   __ptext1 0A3C  
                                 __ptext2 3494                                   __ptext3 35A0  
                                 __ptext4 2F70                                   __ptext5 2EE0  
                                 __ptext6 2AF0                                   __ptext7 3102  
                                 __ptext8 29DC                                   __ptext9 2CFA  
                                 crc8@crc 001D                        __end_of_AdcConvert 11B6  
                              ??___lwtoft 0023                                 _T0CONbits 000FD5  
                       BlinkErrorLeds@idx 001C                           __size_of_strtol 01D6  
                   _OSCILLATOR_Initialize 373C                              __size_of_abs 0028  
                                 _isalpha 34E4                              __size_of_exp 01F2  
                            __size_of_log 0122                                   _isdigit 35C0  
                            __size_of_pow 017C                        _EUSART1_Initialize 3306  
                ??_PIN_MANAGER_Initialize 0018                                   _isspace 350C  
               StoreIntInEeprom@numOfByes 0026                  __end_of_GetCpldFwVersion 238E  
                                 _isupper 35DE                          UpdateTxFreq@data 002F  
                                 _request 00D0                           GroupDAC@request 00BF  
                    ??_GetIntFromUartData 002E                    __end_of_FlashEreaseMem 2DF0  
              __size_of_SYSTEM_Initialize 001A                   ?_SwSpi_Set_Dac_Sync_Pin 0001  
                  __end_of_SwSpi_Data_Pin 2CA4                   StoreIntInEeprom@address 0025  
                                 _toupper 36B2                      end_of_initialization 2710  
                     GetCpldFwVersion@idx 002F                             ?_UpdateRxFreq 002F  
                                 exp@sign 009F                             ?_UpdateTxFreq 002F  
                     ?_EUSART1_Initialize 0001                          ??_BlinkErrorLeds 0018  
                            ?_EepromWrite 001B                       SetCpldFwVersion@idx 002E  
                   _SWSPI_Synth_send_bits 1FBC                 __size_of_SwSpi_Set_CE_Pin 003C  
                          ?_SetMcuRunTime 0001                                   memset@c 001A  
                                 memset@n 001C                                   memset@p 001E  
                           __Lmediumconst 0000                           ___lldiv@divisor 001C  
                    __end_of_SetMcuSystem 379E                                   pow@sign 00AC  
                         ___lldiv@counter 0024                         ?_GroupFlashMemory 01C2  
                        AdcConvert@adcRes 00BA                        __end_of_SYNTH_REGS 0635  
                              ??_testLeds 002C                      SWSPI_send_word@datac 002B  
                              _rxMsgQueue 00D9                                   postdec1 000FE5  
                                 postdec2 000FDD                        ??_GroupFlashMemory 00BF  
                                 postinc0 000FEE                                   postinc2 000FDE  
                   __size_of_EUSART1_Read 0044                       _InitRxMessageParams 3494  
                             testLeds@idx 002D                      __size_of_DacSetValue 0072  
               __size_of_FlashSampleWrite 00FA                    __size_of_GetMcuRunTime 00E4  
                     UpdateTxFreq@regData 0086                      ??_EUSART1_Initialize 0018  
   __end_of_InitSystemApplicationManagers 36B2    __size_of_InitSystemApplicationManagers 0016  
           _InitSystemApplicationManagers 369C                           ?_FLASH_ReadByte 0018  
                                 strtol@a 0061                                   strtol@c 0065  
                                 strtol@s 0024                  _TMR0_SetInterruptHandler 379E  
                            ??_EepromRead 0019                          _StoreIntInEeprom 31F2  
                         _SetMcuFwVersion 329A                          ?_GetMcuFwVersion 0001  
               __size_of_SetCpldFwVersion 0042                            ZeroArray@array 0020  
          __end_of_SwSpi_Set_Dac_Sync_Pin 3654                              strtol@endptr 0026  
           FLASH_WriteBlock@flashWrBufPtr 0021                        GetMcuRunTime@TxMsg 0060  
                    ?_InitRxMessageParams 0001                           ?_FlashEreaseMem 0001  
                     EUSART1_Write@txData 0018                           ?_SwSpi_Data_Pin 0018  
                   __end_of_ZeroBitsArray 3638                            ??_UpdateRxFreq 0031  
                          ??_UpdateTxFreq 0031                  __end_of_DATAEE_WriteByte 3306  
             __end_of_SWSPI_DAC_send_bits 2BF8                  FLASH_EraseBlock@baseAddr 0018  
                        ?_Make32bitsArray 0018                               ___ftdiv@exp 0067  
                            _EUSART1_Read 2FB4                      _CheckFlashPrecentage 2076  
                       FLASH_WriteBlock@i 002C                        __end_of_EepromRead 37B2  
                             ___ftmul@exp 0072                   ?_SwSpi_Set_Synth_Le_Pin 0018  
                   PLLUartInitialize@data 0018                __size_of_ReadIntFromEeprom 005E  
              ?_SetConversionResultFormat 002C              __end_of_INTERRUPT_Initialize 37BA  
                             DacInit@test 002F                            __end_of___ftge 24AE  
            InitAdcApplicationMgr@channel 0018                            __end_of___lmul 2C4E  
                          __end_of___wmul 3558                       GroupControlMcu@data 01C2  
                           __pidataCOMRAM 37B2                         __size_of_TMR0_ISR 0092  
                          _ADC_Initialize 3686                          _FLASH_WriteBlock 1F00  
                  ?_OSCILLATOR_Initialize 0001                            __end_of_memset 3494  
                              floor@expon 0095                         ??_ClearMcuRunTime 0018  
                          __end_of_strtol 1000                       start_initialization 26AC  
                              eval_poly@d 0087                                eval_poly@n 0089  
                              eval_poly@x 0084                          BlinkOkLeds@state 001B  
                __size_of_TMR0_Initialize 0034                                ldexp@value 008E  
         __size_of_PIN_MANAGER_Initialize 0048                               __end_of_abs 34E4  
                   ??_InitRxMessageParams 0024                               __end_of_exp 0E2A  
                             __end_of_log 1602                               __end_of_pow 14E0  
                AdcConvert@_adcResult_332 00B5                             _GetMcuRunTime 1ADE  
                  ?_SWSPI_Synth_send_bits 0022                           ??_SetMcuRunTime 0021  
                   __end_of_EUSART1_Write 317A                        GetMcuFwVersion@idx 002F  
                      SetMcuFwVersion@idx 002E                    __size_of_PLLInitialize 0050  
                              frexp@value 0018                           ___llmod@divisor 001C  
                   ?_CheckFlashPrecentage 0001                           ___llmod@counter 0020  
                     DATAEE_ReadByte@bAdd 0018                  __size_of_PIN_MANAGER_IOC 0004  
                               _ResetCpld 3758                    __size_of_SwSpi_Clk_Pin 0056  
                     SendAckMessage@TxMsg 0026            __end_of_SwSpi_Set_Synth_Le_Pin 31F2  
                     _keepAliveSignalUart 377C                         __size_of_GroupDAC 0020  
                        _WriteUartMessage 333C                         __size_of_GroupAdc 0048  
                  __size_of_FlashReadUart 03C2                                  ??___ftge 001E  
                                ??___lmul 0020                   SendAckMessage@inRequest 0024  
                                ??___wmul 001C                         __size_of_ResetMcu 000E  
                    __size_of_BlinkOkLeds 005E                   SetAdcOperationMode@data 002C  
                  __end_of_ADC_Initialize 369C         __end_of_SetConversionResultFormat 3770  
                             __pdataBANK0 00ED                   SWSPI_DAC_send_bits@data 001A  
                 __end_of_SetMcuFwVersion 32D0                                  ??_memset 001E  
                __size_of_GroupControlMcu 003C               FLASH_EraseBlock@GIEBitValue 001C  
                          _SendAckMessage 2DF0                            _SetChannelMode 33DA  
                __end_of_FLASH_EraseBlock 33DA                        _SendSystemStartAck 3788  
                __size_of_SWSPI_send_word 009A                                  ??_strtol 002A  
                          _eusart1RxCount 00D3                         __size_of___altoft 007A  
                               _ZeroArray 35FC                         __size_of___awtoft 0038  
                       __size_of___ftpack 00AE                      ?_keepAliveSignalUart 0001  
                       __size_of___lltoft 005C                               __pbssCOMRAM 0031  
                       __size_of___lwtoft 0024             __size_of_EUSART1_Transmit_ISR 0038  
                           __pcstackBANK0 0060                             __pcstackBANK1 01C2  
                     ?_SendSystemStartAck 0001                              _isalpha$2963 001C  
                            _isdigit$2966 0019                            ?_GetMcuRunTime 0001  
                     DacSetValue@dacIndex 0089                            BlinkOkLeds@idx 001C  
                                ?_DacInit 0001                     __size_of_SetMcuSystem 000A  
                        _SwSpi_Set_CE_Pin 317A              __size_of_EUSART1_Receive_ISR 002E  
           SWSPI_Synth_send_bits@bitArray 0060                      __size_of_EepromWrite 000E  
                   _TMR0_InterruptHandler 00FD                                 __pnvBANK0 00FD  
                __size_of_TMR0_StartTimer 0004                                ?_ResetCpld 0001  
                  _PIN_MANAGER_Initialize 2F28                      ??_SendSystemStartAck 002C  
                   _InitAdcApplicationMgr 3710                                 __pintcode 0008  
                  __end_of_SendAckMessage 2E42                                 __ptext100 3558  
                               __ptext101 19F6                                 __ptext110 340A  
                               __ptext102 322A                                 __ptext103 2A94  
                               __ptext112 226C                                 __ptext104 357C  
                               __ptext113 30C0                                 __ptext105 2124  
                               __ptext114 37BE                                 __ptext106 170E  
                               __ptext115 37C2                                 __ptext107 1F00  
                               __ptext116 3262                                 __ptext108 33A6  
                               __ptext117 343A                                 __ptext109 374A  
                                ?___ftadd 0078                                 __ptext118 0000  
                                ?___ftdiv 0029                    __end_of_SetChannelMode 340A  
                                ?___ftneg 0018                                  ?___lldiv 0018  
                                ?___ftmul 0069                                  ?___llmod 0018  
                                ?___ftsub 0084                                  ?___fttol 0078  
                        _FlashSampleWrite 170E                                  ?___lwmod 0001  
                         ?_ADC_Initialize 0001                      __end_of_UpdateRxFreq 2D9E  
                       __size_of_testLeds 006A                             _PLLInitialize 2E42  
           SetConversionResultFormat@data 002C                      __end_of_UpdateTxFreq 2D4C  
             __size_of_keepAliveSignalLed 0018              ??_INTERRUPT_InterruptManager 0006  
                        __CFG_PRICLKEN$ON 000000                                ?_ZeroArray 0020  
                             __smallconst 0600                     ??_keepAliveSignalUart 002C  
                                _BAUDCON1 000FB8                             _SwSpi_Clk_Pin 2CA4  
                                ?_isalpha 0001                                  ?_isdigit 0001  
                               _eval_poly 1CA4                       BlinkErrorLeds@state 001B  
                         _TimerOneSecFlag 00D8                                  ?_isspace 0001  
                        _SetCpldFwVersion 303C                              _SetMcuSystem 3794  
                                ?_isupper 0001                             _FlashReadUart 067A  
                       _PLLUartInitialize 37C6                         ?_GetCpldFwVersion 0001  
            __size_of_SetAdcOperationMode 000C                            __size_of_make8 005C  
                          __size_of_floor 00E2                            __size_of_ldexp 00C6  
                          __size_of_frexp 0090                        ?_PLLUartInitialize 0018  
                __size_of_DATAEE_ReadByte 0014                                  ?_toupper 0001  
                        _conversionFormat 00D5                        ??_GetCpldFwVersion 0024  
                    _INTERRUPT_Initialize 37B6            FLASH_WriteBlock@blockStartAddr 0027  
             __size_of_FlashReadCondition 010C                         ??_TMR0_Initialize 001A  
                  ??_CheckFlashPrecentage 0078                            ___wmul@product 001C  
                                _LATAbits 000F89                                  _LATBbits 000F8A  
                                _LATCbits 000F8B                                  _LATDbits 000F8C  
                __end_of_StoreIntInEeprom 322A                       ??_PLLUartInitialize 001A  
          FlashReadUart@numOfSampleToRead 002C                                  _PIE1bits 000F9D  
                                _PIE2bits 000FA0                     _GroupStatusAndVersion 2AF0  
                       _GroupSynthesizers 29DC       __size_of_INTERRUPT_InterruptManager 00D4  
              ??_TMR0_SetInterruptHandler 001A                      Make32bitsArray@array 0018  
                                _PIR1bits 000F9E                          ??_FLASH_ReadByte 001C  
                                _PIR2bits 000FA1                                 _rxMsgData 01AE  
                                i2u516_40 30DA                       SWSPI_send_word@data 0026  
                      ?_GroupSynthesizers 01C2                                  _RCONbits 000FD0  
                        __CFG_WDTPS$16384 000000                                 make8@data 0018  
                                _TMR0_ISR 226C                           ?_SendAckMessage 0024  
                         ?_SetChannelMode 002C                            ?_PLLInitialize 0001  
                       ??_PIN_MANAGER_IOC 0001                          ?_SetMcuFwVersion 002C  
                     ??_GroupSynthesizers 0031                    GetIntFromUartData@data 0066  
                 SWSPI_send_word@dataSize 002A                                _ADCON0bits 000FC2  
                __size_of_readUartMessage 01FC                         ___wmul@multiplier 0018  
                          ?_SwSpi_Clk_Pin 0018                          ??_FlashEreaseMem 002C  
               __end_of_PLLUartInitialize 37C8                        __end_of_channelArr 063C  
                        ??_SwSpi_Data_Pin 0019                 __size_of_GroupFlashMemory 0044  
                              ?_eval_poly 0084                            ?_FlashReadUart 002C  
                       ??_GroupControlMcu 0031                           ??_GetMcuRunTime 0025  
                   DATAEE_WriteByte@bData 0018                              _isspace$2969 0019  
                       ??_SWSPI_send_word 002B                     GetCpldFwVersion@TxMsg 0026  
                              _DAC_ADDRES 063C               __size_of_GetIntFromUartData 00C0  
                       ___lmul@multiplier 0018                   FlashReadCondition@TxMsg 0028  
                             _INTCON2bits 000FF1                                 copy_data0 26C0  
                               copy_data1 26E0                     ?_INTERRUPT_Initialize 0001  
                        __size_of_DacInit 0080                         ?_DATAEE_WriteByte 0018  
               __end_of_GroupSynthesizers 2A38                     EUSART1_Read@readValue 0019  
                __end_of_FLASH_WriteBlock 1FBC                                  _GroupDAC 35A0  
                      ??_DATAEE_WriteByte 0019                                  _GroupAdc 2EE0  
                               frexp@eptr 001B                                _EECON1bits 000FA6  
                             ??_ResetCpld 002C                                  __Hrparam 0000  
                  ?_InitAdcApplicationMgr 0001                                  _ResetMcu 372E  
                           ??_DacSetValue 0086                               _readAddress 00F9  
                                __Lrparam 0000                         _ADC_GetConversion 340A  
                     FlashReadUart@offset 00BD                           _ClearMcuRunTime 36DA  
                       __CFG_P2BMX$PORTD2 000000               ??_SetConversionResultFormat 002E  
                 ??_OSCILLATOR_Initialize 0018                        ?_ADC_GetConversion 0018  
                       ??_TMR0_StartTimer 0018                          __size_of___ftadd 01AE  
                        __size_of___ftdiv 00E8                      _numOfValidateSamples 0031  
                        __size_of___ftneg 0024                          __size_of___lldiv 0082  
                                ___altoft 2632                          __size_of___ftmul 00F6  
                        __size_of___llmod 0066                          __size_of___ftsub 0042  
                        __size_of___fttol 00F8               __size_of_EUSART1_Initialize 0036  
                        __size_of___lwmod 0042                           GroupAdc@request 00BF  
                                ___awtoft 322A                             crc8@dataArray 0018  
                                ___ftpack 2124                          _numOfReadSamples 003E  
                                ___lltoft 2A94                         _FLASH_IsWriteDone 374A  
                     WriteUartMessage@idx 001E                                  ___lwtoft 357C  
                             ??_ZeroArray 0024                  GetMcuRunTime@tempRunTime 0069  
                     ??_ADC_GetConversion 001A                                  _exp$3249 009A  
                            _isupper$2972 0019                        ?_FLASH_IsWriteDone 0001  
                                _dataSize 00CF                     SwSpi_Clk_Pin@cPinMode 0018  
                __end_of_WriteUartMessage 3372                          __size_of_isalpha 0028  
                                _crcGiven 00CC                          __size_of_isdigit 001E  
                 ??_SWSPI_Synth_send_bits 0026                    SwSpi_Data_Pin@cPinMode 0018  
                        __size_of_isspace 0026                        DacSetValue@regData 008A  
                                __ptext10 2D4C                                  __ptext11 37C6  
                                __ptext20 36EE                                  __ptext12 329A  
                                __ptext21 1602                                  __ptext13 303C  
                                __ptext30 350C                                  __ptext22 2D9E  
                                __ptext14 1ADE                                  __ptext31 35C0  
                                __ptext23 271E                                  __ptext15 24AE  
                                __ptext40 3770                                  __ptext32 34E4  
                                __ptext24 31F2                                  __ptext16 2530  
                                __ptext41 2FB4                                  __ptext33 35DE  
                                __ptext25 3720                                  __ptext17 22FE  
                                __ptext50 37B6                                  __ptext42 377C  
                                __ptext34 2BF8                                  __ptext26 32D0  
                                __ptext18 067A                                  __ptext51 3306  
                                __ptext43 366E                                  __ptext35 2790  
                                __ptext27 1E40                                  __ptext19 34BC  
                                __ptext60 313E                                  __ptext52 3686  
                                __ptext44 3794                                  __ptext36 372E  
                                __ptext28 0E2A                                  __ptext61 369C  
                                __ptext53 2FF8                                  __ptext45 3654  
                                __ptext37 3758                                  __ptext29 36B2  
                                __ptext70 3638                                  __ptext62 37BA  
                                __ptext54 27FA                                  __ptext46 3372  
                                __ptext38 3764                                  __ptext71 1FBC  
                                __ptext63 2E42                                  __ptext55 3788  
                                __ptext47 379E                                  __ptext39 33DA  
                                __ptext80 36C6                                  __ptext72 361A  
                                __ptext64 317A                                  __ptext56 2DF0  
                                __ptext48 2F28                                  __ptext81 36DA  
                                __ptext73 3468                                  __ptext65 3710  
                                __ptext57 2E92                                  __ptext49 373C  
                                __ptext90 1BC2                                  __ptext82 2076  
                                __ptext74 2B48                                  __ptext66 25B2  
                                __ptext58 35FC                                  __ptext91 238E  
                                __ptext83 2920                                  __ptext75 2BA0  
                                __ptext67 21D2                                  __ptext59 333C  
                                __ptext92 1808                                  __ptext84 297E  
                                __ptext76 2C4E                                  __ptext68 2A38  
                                __ptext93 241E                                  __ptext85 1000  
                                __ptext77 2CA4                                  __ptext69 31B6  
                                __ptext94 2632                                  __ptext86 1364  
                                __ptext78 28C2                                  __ptext95 1CA4  
                                __ptext87 14E0                                  __ptext79 37A8  
                                __ptext96 3532                                  __ptext88 0C38  
                                __ptext97 1900                                  __ptext89 1D7A  
                                __ptext98 307E                                  __ptext99 11B6  
                        __size_of_isupper 001E              SWSPI_Synth_send_bits@phrType 0085  
                SwSpi_Set_CE_Pin@cPinMode 0018                                  _pow$3247 00A6  
                                _pow$3248 00A9                       ??_FLASH_IsWriteDone 0018  
                     GetIntFromUartData@c 0078               DATAEE_WriteByte@GIEBitValue 001A  
                        __size_of_toupper 0014                  __size_of_GetMcuFwVersion 0082  
                           __size_of_crc8 004E                             __size_of_main 0062  
                  ?_GroupStatusAndVersion 01C2                                  _msgCount 00CB  
            _TMR0_DefaultInterruptHandler 000000                         ??_DATAEE_ReadByte 0018  
               __end_of_ADC_GetConversion 343A              __size_of_SWSPI_DAC_send_bits 0058  
                   __size_of_UpdateRxFreq 0052                       Make32bitsArray@data 001A  
                   __size_of_UpdateTxFreq 0052                        SWSPI_send_word@idx 002C  
                             _groupsArray 00ED                           ??_PLLInitialize 002F  
                                _testLeds 2790                   __size_of_BlinkErrorLeds 005E  
                                int$flags 0048                  __size_of_Make32bitsArray 0058  
                              strtol@base 0028                                strtol@sign 0060  
               __end_of_FLASH_IsWriteDone 3758        __end_of_INTERRUPT_InterruptManager 00DC  
              _INTERRUPT_InterruptManager 0008                    __size_of_ZeroBitsArray 001E  
                         EepromWrite@data 001B                           ??_SwSpi_Clk_Pin 0019  
                     __end_of_DacSetValue 2790                       _EUSART1_Receive_ISR 343A  
                __end_of_SwSpi_Set_CE_Pin 31B6                         ?_FLASH_EraseBlock 0018  
             __end_of_InitRxMessageParams 34BC                                  exp@coeff 0640  
                              _MEMORY_ISR 37C2                           ??_FlashReadUart 0060  
                                log@coeff 065E                __size_of_PLLUartInitialize 0002  
                  SWSPI_send_word@phrType 002E                      SetCpldFwVersion@data 002C  
                      ??_FLASH_EraseBlock 001C                                _INTCONbits 000FF2  
                             ??_eval_poly 002F                               _sampleArray 016E  
                             _sampleCount 00C7                                  isalpha@c 001D  
                                isdigit@c 001A                    ??_INTERRUPT_Initialize 0018  
                                memset@p1 0018                         ??_readUartMessage 01C4  
               _SetConversionResultFormat 3764                  __end_of_FlashSampleWrite 1808  
                                intlevel2 0000                              _UpdateRxFreq 2D4C  
                            _UpdateTxFreq 2CFA                      ?_EUSART1_Receive_ISR 0001  
                   __end_of_SetMcuRunTime 303C                          ___lwmod@dividend 0001  
              __size_of_GroupSynthesizers 005C                                  isspace@c 001A  
                        ___lldiv@dividend 0018                   ?_PIN_MANAGER_Initialize 0001  
                 __end_of_ClearMcuRunTime 36EE                                _RCSTA1bits 000FAB  
                                isupper@c 001A                  ReadIntFromEeprom@address 0026  
            __end_of_EUSART1_Transmit_ISR 329A                             ??_BlinkOkLeds 0018  
                        ??_ADC_Initialize 0018                  __end_of_SetCpldFwVersion 307E  
                      Make32bitsArray@idx 0020                         _TimerSamplingFlag 00D7  
                           AdcConvert@idx 00BC                       _SetAdcOperationMode 3770  
                           _isReWriteDone 003C                      SwSpi_Clk_Pin@phrType 0019  
                   SwSpi_Data_Pin@phrType 0019                   SwSpi_Set_CE_Pin@phrType 0019  
                  __size_of_EUSART1_Write 003C                  ??_SwSpi_Set_Dac_Sync_Pin 0018  
                       EepromRead@address 0019                          ___lldiv@quotient 0020  
                        _GroupFlashMemory 2F70                           ___lwmod@divisor 0003  
                         _TMR0_Initialize 3372                           ___lwmod@counter 0005  
                                toupper@c 0018                ReadIntFromEeprom@numOfByes 001A  
                       __CFG_T3CMX$PORTC0 000000                      ?_SetAdcOperationMode 002C  
                 ReadIntFromEeprom@retVal 0022                             ??_EepromWrite 001C  
                           _ZeroBitsArray 361A                                _AdcConvert 1000  
                   ??_EUSART1_Receive_ISR 0001            __end_of_PIN_MANAGER_Initialize 2F70  
            GetIntFromUartData@dataRegArr 006A                         __CFG_FOSC$INTIO67 000000  
                         _PIN_MANAGER_IOC 37BE                         ?_StoreIntInEeprom 0021  
                        ??_SendAckMessage 0025                __size_of_ADC_GetConversion 0030  
                        ??_SetChannelMode 002E                 __size_of_GetCpldFwVersion 0090  
                      ??_StoreIntInEeprom 0028                               _DacSetValue 271E  

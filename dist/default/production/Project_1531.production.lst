

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Feb 28 11:15:24 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1,group=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1,group=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1,group=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1
   129                           	psect	text110,global,reloc=2,class=CODE,delta=1,group=1
   130                           	psect	text111,global,reloc=2,class=CODE,delta=1
   131                           	psect	text112,global,reloc=2,class=CODE,delta=1
   132                           	psect	text113,global,reloc=2,class=CODE,delta=1
   133                           	psect	text114,global,reloc=2,class=CODE,delta=1
   134                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   135                           	psect	text115,global,reloc=2,class=CODE,delta=1
   136                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   137                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   138  0000                     
   139                           ; Version 1.45
   140                           ; Generated 16/11/2017 GMT
   141                           ; 
   142                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   143                           ; All rights reserved.
   144                           ; 
   145                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   146                           ; 
   147                           ; Redistribution and use in source and binary forms, with or without modification, are
   148                           ; permitted provided that the following conditions are met:
   149                           ; 
   150                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   151                           ;        conditions and the following disclaimer.
   152                           ; 
   153                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   154                           ;        of conditions and the following disclaimer in the documentation and/or other
   155                           ;        materials provided with the distribution.
   156                           ; 
   157                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   158                           ;        software without specific prior written permission.
   159                           ; 
   160                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   161                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   162                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   163                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   164                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   165                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   166                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   167                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   168                           ; 
   169                           ; 
   170                           ; Code-generator required, PIC18F45K22 Definitions
   171                           ; 
   172                           ; SFR Addresses
   173  0000                     
   174 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   175  0000                     
   176                           	psect	idataCOMRAM
   177  00372A                     __pidataCOMRAM:
   178                           	opt stack 0
   179                           
   180                           ;initializer for _writeAddress
   181  00372A  4000               	dw	16384
   182  00372C  0000               	dw	0
   183                           
   184                           	psect	idataBANK0
   185  00367A                     __pidataBANK0:
   186                           	opt stack 0
   187                           
   188                           ;initializer for _groupsArray
   189  00367A  72                 	db	low _GroupControlMcu
   190  00367B  30                 	db	high _GroupControlMcu
   191  00367C  40                 	db	low _GroupStatusAndVersion
   192  00367D  2B                 	db	high _GroupStatusAndVersion
   193  00367E  8E                 	db	low _GroupAdc
   194  00367F  2D                 	db	high _GroupAdc
   195  003680  D2                 	db	low _GroupSynthesizers
   196  003681  29                 	db	high _GroupSynthesizers
   197  003682  1E                 	db	low _GroupFlashMemory
   198  003683  2E                 	db	high _GroupFlashMemory
   199  003684  FE                 	db	low _GroupDAC
   200  003685  34                 	db	high _GroupDAC
   201                           
   202                           ;initializer for _readAddress
   203  003686  4000               	dw	16384
   204  003688  0000               	dw	0
   205                           
   206                           	psect	smallconst
   207  000600                     __psmallconst:
   208                           	opt stack 0
   209  000600  00                 	db	0
   210  000601                     _PLL_INIT_REGISTERS:
   211                           	opt stack 0
   212  000601  041C               	dw	1052
   213  000603  0001               	dw	1
   214  000605  300B               	dw	12299
   215  000607  0061               	dw	97
   216  000609  323A               	dw	12858
   217  00060B  00C0               	dw	192
   218  00060D  BCC9               	dw	48329
   219  00060F  2221               	dw	8737
   220  000611  0428               	dw	1064
   221  000613  102D               	dw	4141
   222  000615  00E7               	dw	231
   223  000617  1200               	dw	4608
   224  000619  6076               	dw	24694
   225  00061B  3505               	dw	13573
   226  00061D  0025               	dw	37
   227  00061F  0080               	dw	128
   228  000621  9B84               	dw	39812
   229  000623  3400               	dw	13312
   230  000625  0003               	dw	3
   231  000627  0000               	dw	0
   232  000629  0012               	dw	18
   233  00062B  0000               	dw	0
   234  00062D  0001               	dw	1
   235  00062F  0600               	dw	1536
   236  000631  0340               	dw	832
   237  000633  0020               	dw	32
   238  000635                     __end_of_PLL_INIT_REGISTERS:
   239                           	opt stack 0
   240  000635                     _channelArr:
   241                           	opt stack 0
   242  000635  07                 	db	7
   243  000636  06                 	db	6
   244  000637  05                 	db	5
   245  000638  04                 	db	4
   246  000639  19                 	db	25
   247  00063A  0A                 	db	10
   248  00063B  0D                 	db	13
   249  00063C                     __end_of_channelArr:
   250                           	opt stack 0
   251  00063C                     exp@coeff:
   252                           	opt stack 0
   253  00063C  00                 	db	0
   254  00063D  80                 	db	128
   255  00063E  3F                 	db	63
   256  00063F  72                 	db	114
   257  000640  31                 	db	49
   258  000641  3F                 	db	63
   259  000642  FE                 	db	254
   260  000643  75                 	db	117
   261  000644  3E                 	db	62
   262  000645  58                 	db	88
   263  000646  63                 	db	99
   264  000647  3D                 	db	61
   265  000648  95                 	db	149
   266  000649  1D                 	db	29
   267  00064A  3C                 	db	60
   268  00064B  C5                 	db	197
   269  00064C  AE                 	db	174
   270  00064D  3A                 	db	58
   271  00064E  79                 	db	121
   272  00064F  21                 	db	33
   273  000650  39                 	db	57
   274  000651  94                 	db	148
   275  000652  80                 	db	128
   276  000653  37                 	db	55
   277  000654  93                 	db	147
   278  000655  A7                 	db	167
   279  000656  35                 	db	53
   280  000657  56                 	db	86
   281  000658  15                 	db	21
   282  000659  34                 	db	52
   283  00065A                     __end_ofexp@coeff:
   284                           	opt stack 0
   285  00065A                     log@coeff:
   286                           	opt stack 0
   287  00065A  00                 	db	0
   288  00065B  00                 	db	0
   289  00065C  00                 	db	0
   290  00065D  00                 	db	0
   291  00065E  80                 	db	128
   292  00065F  3F                 	db	63
   293  000660  F0                 	db	240
   294  000661  FF                 	db	255
   295  000662  BE                 	db	190
   296  000663  E2                 	db	226
   297  000664  A9                 	db	169
   298  000665  3E                 	db	62
   299  000666  83                 	db	131
   300  000667  76                 	db	118
   301  000668  BE                 	db	190
   302  000669  AE                 	db	174
   303  00066A  2B                 	db	43
   304  00066B  3E                 	db	62
   305  00066C  3C                 	db	60
   306  00066D  C3                 	db	195
   307  00066E  BD                 	db	189
   308  00066F  D2                 	db	210
   309  000670  13                 	db	19
   310  000671  3D                 	db	61
   311  000672  78                 	db	120
   312  000673  D3                 	db	211
   313  000674  BB                 	db	187
   314  000675                     __end_oflog@coeff:
   315                           	opt stack 0
   316  000675  00                 	db	0	; dummy byte at the end
   317  0000                     
   318                           	psect	nvCOMRAM
   319  000046                     __pnvCOMRAM:
   320                           	opt stack 0
   321  000046                     _timer0ReloadVal:
   322                           	opt stack 0
   323  000046                     	ds	2
   324                           
   325                           	psect	nvBANK0
   326  0000FB                     __pnvBANK0:
   327                           	opt stack 0
   328  0000FB                     _TMR0_InterruptHandler:
   329                           	opt stack 0
   330  0000FB                     	ds	2
   331  0000FD                     _cnt:
   332                           	opt stack 0
   333  0000FD                     	ds	2
   334  0000FF                     _eusart1TxBufferRemaining:
   335                           	opt stack 0
   336  0000FF                     	ds	1
   337  0000                     _ANSELE	set	3900
   338  0000                     _ANSELB	set	3897
   339  0000                     _ANSELC	set	3898
   340  0000                     _ANSELD	set	3899
   341  0000                     _ANSELA	set	3896
   342  0000                     _ADCON0bits	set	4034
   343  0000                     _ADRESH	set	4036
   344  0000                     _ADRESL	set	4035
   345  0000                     _ADCON2	set	4032
   346  0000                     _ADCON1	set	4033
   347  0000                     _ADCON0	set	4034
   348  0000                     _T0CONbits	set	4053
   349  0000                     _T0CON	set	4053
   350  0000                     _TMR0L	set	4054
   351  0000                     _TMR0H	set	4055
   352  0000                     _EEDATA	set	4008
   353  0000                     _EEADR	set	4009
   354  0000                     _EECON2	set	4007
   355  0000                     _EECON1bits	set	4006
   356  0000                     _TABLAT	set	4085
   357  0000                     _TBLPTRL	set	4086
   358  0000                     _TBLPTRH	set	4087
   359  0000                     _TBLPTRU	set	4088
   360  0000                     _INTCON2bits	set	4081
   361  0000                     _WPUB	set	3937
   362  0000                     _TRISC	set	3988
   363  0000                     _TRISB	set	3987
   364  0000                     _TRISE	set	3990
   365  0000                     _LATC	set	3979
   366  0000                     _LATB	set	3978
   367  0000                     _LATE	set	3981
   368  0000                     _RCREG1	set	4014
   369  0000                     _RCSTA1bits	set	4011
   370  0000                     _TXREG1	set	4013
   371  0000                     _SPBRGH1	set	4016
   372  0000                     _SPBRG1	set	4015
   373  0000                     _TXSTA1	set	4012
   374  0000                     _RCSTA1	set	4011
   375  0000                     _BAUDCON1	set	4024
   376  0000                     _PIR1bits	set	3998
   377  0000                     _PIE1bits	set	3997
   378  0000                     _PIR2bits	set	4001
   379  0000                     _PIE2bits	set	4000
   380  0000                     _RCONbits	set	4048
   381  0000                     _OSCTUNE	set	3995
   382  0000                     _OSCCON2	set	4050
   383  0000                     _OSCCON	set	4051
   384  0000                     _LATAbits	set	3977
   385  0000                     _LATDbits	set	3980
   386  0000                     _INTCONbits	set	4082
   387  0000                     _IOCB	set	3938
   388  0000                     _PORTD	set	3971
   389  0000                     _LATD	set	3980
   390  0000                     _TRISD	set	3989
   391  0000                     _LATA	set	3977
   392  0000                     _TRISA	set	3986
   393  0000                     _LATCbits	set	3979
   394  0000                     _LATBbits	set	3978
   395                           
   396                           ; #config settings
   397  0000                     
   398                           	psect	cinit
   399  002772                     __pcinit:
   400                           	opt stack 0
   401  002772                     start_initialization:
   402                           	opt stack 0
   403  002772                     __initialization:
   404                           	opt stack 0
   405                           
   406                           ; Initialize objects allocated to BANK0 (16 bytes)
   407                           ; load TBLPTR registers with __pidataBANK0
   408  002772  0E7A               	movlw	low __pidataBANK0
   409  002774  6EF6               	movwf	tblptrl,c
   410  002776  0E36               	movlw	high __pidataBANK0
   411  002778  6EF7               	movwf	tblptrh,c
   412  00277A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   413  00277C  6EF8               	movwf	tblptru,c
   414  00277E  EE00  F0EB         	lfsr	0,__pdataBANK0
   415  002782  EE10 F010          	lfsr	1,16
   416  002786                     copy_data0:
   417  002786  0009               	tblrd		*+
   418  002788  CFF5 FFEE          	movff	tablat,postinc0
   419  00278C  50E5               	movf	postdec1,w,c
   420  00278E  50E1               	movf	fsr1l,w,c
   421  002790  E1FA               	bnz	copy_data0
   422                           
   423                           ; Initialize objects allocated to COMRAM (4 bytes)
   424                           ; load TBLPTR registers with __pidataCOMRAM
   425  002792  0E2A               	movlw	low __pidataCOMRAM
   426  002794  6EF6               	movwf	tblptrl,c
   427  002796  0E37               	movlw	high __pidataCOMRAM
   428  002798  6EF7               	movwf	tblptrh,c
   429  00279A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   430  00279C  6EF8               	movwf	tblptru,c
   431  00279E  EE00  F042         	lfsr	0,__pdataCOMRAM
   432  0027A2  EE10 F004          	lfsr	1,4
   433  0027A6                     copy_data1:
   434  0027A6  0009               	tblrd		*+
   435  0027A8  CFF5 FFEE          	movff	tablat,postinc0
   436  0027AC  50E5               	movf	postdec1,w,c
   437  0027AE  50E1               	movf	fsr1l,w,c
   438  0027B0  E1FA               	bnz	copy_data1
   439                           
   440                           ; Clear objects allocated to BANK1 (194 bytes)
   441  0027B2  EE01  F000         	lfsr	0,__pbssBANK1
   442  0027B6  0EC2               	movlw	194
   443  0027B8                     clear_0:
   444  0027B8  6AEE               	clrf	postinc0,c
   445  0027BA  06E8               	decf	wreg,f,c
   446  0027BC  E1FD               	bnz	clear_0
   447                           
   448                           ; Clear objects allocated to BANK0 (43 bytes)
   449  0027BE  EE00  F0C0         	lfsr	0,__pbssBANK0
   450  0027C2  0E2B               	movlw	43
   451  0027C4                     clear_1:
   452  0027C4  6AEE               	clrf	postinc0,c
   453  0027C6  06E8               	decf	wreg,f,c
   454  0027C8  E1FD               	bnz	clear_1
   455                           
   456                           ; Clear objects allocated to COMRAM (17 bytes)
   457  0027CA  EE00  F031         	lfsr	0,__pbssCOMRAM
   458  0027CE  0E11               	movlw	17
   459  0027D0                     clear_2:
   460  0027D0  6AEE               	clrf	postinc0,c
   461  0027D2  06E8               	decf	wreg,f,c
   462  0027D4  E1FD               	bnz	clear_2
   463  0027D6                     end_of_initialization:
   464                           	opt stack 0
   465  0027D6                     __end_of__initialization:
   466                           	opt stack 0
   467  0027D6  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   468  0027D8  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   469  0027DA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   470  0027DC  6EF8               	movwf	tblptru,c
   471  0027DE  0100               	movlb	0
   472  0027E0  EF5A  F014         	goto	_main	;jump to C main() function
   473                           tblptru	equ	0xFF8
   474                           tblptrh	equ	0xFF7
   475                           tblptrl	equ	0xFF6
   476                           tablat	equ	0xFF5
   477                           postinc0	equ	0xFEE
   478                           wreg	equ	0xFE8
   479                           postdec1	equ	0xFE5
   480                           fsr1l	equ	0xFE1
   481                           
   482                           	psect	bssCOMRAM
   483  000031                     __pbssCOMRAM:
   484                           	opt stack 0
   485  000031                     _numOfValidateSamples:
   486                           	opt stack 0
   487  000031                     	ds	4
   488  000035                     TMR0_ISR@CountCallBack:
   489                           	opt stack 0
   490  000035                     	ds	2
   491  000037                     _eusart1RxTail:
   492                           	opt stack 0
   493  000037                     	ds	1
   494  000038                     _eusart1RxHead:
   495                           	opt stack 0
   496  000038                     	ds	1
   497  000039                     _eusart1TxTail:
   498                           	opt stack 0
   499  000039                     	ds	1
   500  00003A                     _eusart1TxHead:
   501                           	opt stack 0
   502  00003A                     	ds	1
   503  00003B                     _isReWriteDone:
   504                           	opt stack 0
   505  00003B                     	ds	1
   506  00003C                     _adcSampleMode:
   507                           	opt stack 0
   508  00003C                     	ds	1
   509  00003D                     _conversionFormat:
   510                           	opt stack 0
   511  00003D                     	ds	1
   512  00003E                     _numOfReadSamples:
   513                           	opt stack 0
   514  00003E                     	ds	4
   515                           tblptru	equ	0xFF8
   516                           tblptrh	equ	0xFF7
   517                           tblptrl	equ	0xFF6
   518                           tablat	equ	0xFF5
   519                           postinc0	equ	0xFEE
   520                           wreg	equ	0xFE8
   521                           postdec1	equ	0xFE5
   522                           fsr1l	equ	0xFE1
   523                           
   524                           	psect	dataCOMRAM
   525  000042                     __pdataCOMRAM:
   526                           	opt stack 0
   527  000042                     _writeAddress:
   528                           	opt stack 0
   529  000042                     	ds	4
   530                           tblptru	equ	0xFF8
   531                           tblptrh	equ	0xFF7
   532                           tblptrl	equ	0xFF6
   533                           tablat	equ	0xFF5
   534                           postinc0	equ	0xFEE
   535                           wreg	equ	0xFE8
   536                           postdec1	equ	0xFE5
   537                           fsr1l	equ	0xFE1
   538                           
   539                           	psect	bssBANK0
   540  0000C0                     __pbssBANK0:
   541                           	opt stack 0
   542  0000C0                     _mcuRunTimeIn5SecTicks:
   543                           	opt stack 0
   544  0000C0                     	ds	4
   545  0000C4                     _errno:
   546                           	opt stack 0
   547  0000C4                     	ds	2
   548  0000C6                     _sampleCount:
   549                           	opt stack 0
   550  0000C6                     	ds	2
   551  0000C8                     _count:
   552                           	opt stack 0
   553  0000C8                     	ds	2
   554  0000CA                     _msgCount:
   555                           	opt stack 0
   556  0000CA                     	ds	1
   557  0000CB                     _crcGiven:
   558                           	opt stack 0
   559  0000CB                     	ds	1
   560  0000CC                     _crcCalc:
   561                           	opt stack 0
   562  0000CC                     	ds	1
   563  0000CD                     _data:
   564                           	opt stack 0
   565  0000CD                     	ds	1
   566  0000CE                     _dataSize:
   567                           	opt stack 0
   568  0000CE                     	ds	1
   569  0000CF                     _request:
   570                           	opt stack 0
   571  0000CF                     	ds	1
   572  0000D0                     _group:
   573                           	opt stack 0
   574  0000D0                     	ds	1
   575  0000D1                     _cState:
   576                           	opt stack 0
   577  0000D1                     	ds	1
   578  0000D2                     _eusart1RxCount:
   579                           	opt stack 0
   580  0000D2                     	ds	1
   581  0000D3                     _channel:
   582                           	opt stack 0
   583  0000D3                     	ds	1
   584  0000D4                     _TimerKeepAliveFlag:
   585                           	opt stack 0
   586  0000D4                     	ds	1
   587  0000D5                     _TimerSamplingFlag:
   588                           	opt stack 0
   589  0000D5                     	ds	1
   590  0000D6                     _TimerOneSecFlag:
   591                           	opt stack 0
   592  0000D6                     	ds	1
   593  0000D7                     _rxMsgQueue:
   594                           	opt stack 0
   595  0000D7                     	ds	20
   596                           tblptru	equ	0xFF8
   597                           tblptrh	equ	0xFF7
   598                           tblptrl	equ	0xFF6
   599                           tablat	equ	0xFF5
   600                           postinc0	equ	0xFEE
   601                           wreg	equ	0xFE8
   602                           postdec1	equ	0xFE5
   603                           fsr1l	equ	0xFE1
   604                           
   605                           	psect	dataBANK0
   606  0000EB                     __pdataBANK0:
   607                           	opt stack 0
   608  0000EB                     _groupsArray:
   609                           	opt stack 0
   610  0000EB                     	ds	12
   611  0000F7                     _readAddress:
   612                           	opt stack 0
   613  0000F7                     	ds	4
   614                           tblptru	equ	0xFF8
   615                           tblptrh	equ	0xFF7
   616                           tblptrl	equ	0xFF6
   617                           tablat	equ	0xFF5
   618                           postinc0	equ	0xFEE
   619                           wreg	equ	0xFE8
   620                           postdec1	equ	0xFE5
   621                           fsr1l	equ	0xFE1
   622                           
   623                           	psect	bssBANK1
   624  000100                     __pbssBANK1:
   625                           	opt stack 0
   626  000100                     _eusart1TxBuffer:
   627                           	opt stack 0
   628  000100                     	ds	70
   629  000146                     _eusart1RxBuffer:
   630                           	opt stack 0
   631  000146                     	ds	40
   632  00016E                     _sampleArray:
   633                           	opt stack 0
   634  00016E                     	ds	64
   635  0001AE                     _rxMsgData:
   636                           	opt stack 0
   637  0001AE                     	ds	20
   638                           tblptru	equ	0xFF8
   639                           tblptrh	equ	0xFF7
   640                           tblptrl	equ	0xFF6
   641                           tablat	equ	0xFF5
   642                           postinc0	equ	0xFEE
   643                           wreg	equ	0xFE8
   644                           postdec1	equ	0xFE5
   645                           fsr1l	equ	0xFE1
   646                           
   647                           	psect	cstackBANK1
   648  0001C2                     __pcstackBANK1:
   649                           	opt stack 0
   650  0001C2                     GroupStatusAndVersion@data:
   651                           	opt stack 0
   652  0001C2                     GroupAdc@data:
   653                           	opt stack 0
   654  0001C2                     GroupSynthesizers@data:
   655                           	opt stack 0
   656  0001C2                     GroupFlashMemory@data:
   657                           	opt stack 0
   658  0001C2                     GroupDAC@data:
   659                           	opt stack 0
   660  0001C2                     
   661                           ; 3 bytes @ 0x0
   662  0001C2                     	ds	2
   663  0001C4                     GroupFlashMemory@request:
   664                           	opt stack 0
   665                           
   666                           ; 1 bytes @ 0x2
   667  0001C4                     	ds	1
   668  0001C5                     ??_readUartMessage:
   669                           
   670                           ; 1 bytes @ 0x3
   671  0001C5                     	ds	4
   672  0001C9                     readUartMessage@idx:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0x7
   676  0001C9                     	ds	2
   677  0001CB                     readUartMessage@chRec:
   678                           	opt stack 0
   679                           
   680                           ; 1 bytes @ 0x9
   681  0001CB                     	ds	1
   682                           tblptru	equ	0xFF8
   683                           tblptrh	equ	0xFF7
   684                           tblptrl	equ	0xFF6
   685                           tablat	equ	0xFF5
   686                           postinc0	equ	0xFEE
   687                           wreg	equ	0xFE8
   688                           postdec1	equ	0xFE5
   689                           fsr1l	equ	0xFE1
   690                           
   691                           	psect	cstackBANK0
   692  000060                     __pcstackBANK0:
   693                           	opt stack 0
   694  000060                     ??_FlashSampleWrite:
   695  000060                     ??___ftdiv:
   696  000060                     ??_FlashReadUart:
   697  000060                     strtol@sign:
   698                           	opt stack 0
   699  000060                     UpdateRxFreq@send:
   700                           	opt stack 0
   701  000060                     GetMcuRunTime@TxMsg:
   702                           	opt stack 0
   703                           
   704                           ; 9 bytes @ 0x0
   705  000060                     	ds	1
   706  000061                     strtol@a:
   707                           	opt stack 0
   708                           
   709                           ; 4 bytes @ 0x1
   710  000061                     	ds	1
   711  000062                     FlashSampleWrite@rotateLeft:
   712                           	opt stack 0
   713                           
   714                           ; 2 bytes @ 0x2
   715  000062                     	ds	1
   716  000063                     ___ftdiv@cntr:
   717                           	opt stack 0
   718                           
   719                           ; 1 bytes @ 0x3
   720  000063                     	ds	1
   721  000064                     ___ftdiv@f3:
   722                           	opt stack 0
   723                           
   724                           ; 3 bytes @ 0x4
   725  000064                     	ds	1
   726  000065                     strtol@c:
   727                           	opt stack 0
   728                           
   729                           ; 1 bytes @ 0x5
   730  000065                     	ds	1
   731  000066                     ?_GetIntFromUartData:
   732                           	opt stack 0
   733  000066                     GetIntFromUartData@data:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x6
   737  000066                     	ds	1
   738  000067                     ___ftdiv@exp:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0x7
   742  000067                     	ds	1
   743  000068                     ___ftdiv@sign:
   744                           	opt stack 0
   745                           
   746                           ; 1 bytes @ 0x8
   747  000068                     	ds	1
   748  000069                     ?___ftmul:
   749                           	opt stack 0
   750  000069                     ___ftmul@f1:
   751                           	opt stack 0
   752  000069                     GetMcuRunTime@tempRunTime:
   753                           	opt stack 0
   754                           
   755                           ; 4 bytes @ 0x9
   756  000069                     	ds	1
   757  00006A                     GetIntFromUartData@dataRegArr:
   758                           	opt stack 0
   759                           
   760                           ; 8 bytes @ 0xA
   761  00006A                     	ds	2
   762  00006C                     ___ftmul@f2:
   763                           	opt stack 0
   764  00006C                     FlashReadUart@TxMsg:
   765                           	opt stack 0
   766                           
   767                           ; 69 bytes @ 0xC
   768  00006C                     	ds	1
   769  00006D                     GetMcuRunTime@idx:
   770                           	opt stack 0
   771                           
   772                           ; 2 bytes @ 0xD
   773  00006D                     	ds	2
   774  00006F                     ??___ftmul:
   775                           
   776                           ; 1 bytes @ 0xF
   777  00006F                     	ds	3
   778  000072                     GetIntFromUartData@c:
   779                           	opt stack 0
   780  000072                     ___ftmul@exp:
   781                           	opt stack 0
   782                           
   783                           ; 1 bytes @ 0x12
   784  000072                     	ds	1
   785  000073                     GetIntFromUartData@idx:
   786                           	opt stack 0
   787  000073                     ___ftmul@f3_as_product:
   788                           	opt stack 0
   789                           
   790                           ; 3 bytes @ 0x13
   791  000073                     	ds	2
   792  000075                     DacSetValue@regData:
   793                           	opt stack 0
   794  000075                     UpdateTxFreq@regData:
   795                           	opt stack 0
   796                           
   797                           ; 4 bytes @ 0x15
   798  000075                     	ds	1
   799  000076                     ___ftmul@cntr:
   800                           	opt stack 0
   801                           
   802                           ; 1 bytes @ 0x16
   803  000076                     	ds	1
   804  000077                     ___ftmul@sign:
   805                           	opt stack 0
   806                           
   807                           ; 1 bytes @ 0x17
   808  000077                     	ds	1
   809  000078                     ??_CheckFlashPrecentage:
   810  000078                     ?___ftadd:
   811                           	opt stack 0
   812  000078                     ?___fttol:
   813                           	opt stack 0
   814  000078                     ___ftadd@f1:
   815                           	opt stack 0
   816  000078                     ___fttol@f1:
   817                           	opt stack 0
   818                           
   819                           ; 3 bytes @ 0x18
   820  000078                     	ds	3
   821  00007B                     ___ftadd@f2:
   822                           	opt stack 0
   823                           
   824                           ; 3 bytes @ 0x1B
   825  00007B                     	ds	1
   826  00007C                     ??___fttol:
   827  00007C                     CheckFlashPrecentage@precentage:
   828                           	opt stack 0
   829                           
   830                           ; 3 bytes @ 0x1C
   831  00007C                     	ds	2
   832  00007E                     ??___ftadd:
   833                           
   834                           ; 1 bytes @ 0x1E
   835  00007E                     	ds	3
   836  000081                     ___ftadd@sign:
   837                           	opt stack 0
   838  000081                     ___fttol@sign1:
   839                           	opt stack 0
   840                           
   841                           ; 1 bytes @ 0x21
   842  000081                     	ds	1
   843  000082                     ___ftadd@exp2:
   844                           	opt stack 0
   845  000082                     ___fttol@lval:
   846                           	opt stack 0
   847                           
   848                           ; 4 bytes @ 0x22
   849  000082                     	ds	1
   850  000083                     ___ftadd@exp1:
   851                           	opt stack 0
   852                           
   853                           ; 1 bytes @ 0x23
   854  000083                     	ds	1
   855  000084                     ?___ftsub:
   856                           	opt stack 0
   857  000084                     ?_eval_poly:
   858                           	opt stack 0
   859  000084                     ___ftsub@f1:
   860                           	opt stack 0
   861  000084                     eval_poly@x:
   862                           	opt stack 0
   863                           
   864                           ; 3 bytes @ 0x24
   865  000084                     	ds	2
   866  000086                     ___fttol@exp1:
   867                           	opt stack 0
   868                           
   869                           ; 1 bytes @ 0x26
   870  000086                     	ds	1
   871  000087                     ?___altoft:
   872                           	opt stack 0
   873  000087                     eval_poly@d:
   874                           	opt stack 0
   875  000087                     ___ftsub@f2:
   876                           	opt stack 0
   877  000087                     ___altoft@c:
   878                           	opt stack 0
   879                           
   880                           ; 4 bytes @ 0x27
   881  000087                     	ds	2
   882  000089                     eval_poly@n:
   883                           	opt stack 0
   884                           
   885                           ; 2 bytes @ 0x29
   886  000089                     	ds	2
   887  00008B                     ??___altoft:
   888  00008B                     eval_poly@res:
   889                           	opt stack 0
   890                           
   891                           ; 3 bytes @ 0x2B
   892  00008B                     	ds	3
   893  00008E                     ?_log:
   894                           	opt stack 0
   895  00008E                     ?_ldexp:
   896                           	opt stack 0
   897  00008E                     ldexp@value:
   898                           	opt stack 0
   899  00008E                     log@x:
   900                           	opt stack 0
   901                           
   902                           ; 3 bytes @ 0x2E
   903  00008E                     	ds	1
   904  00008F                     ?_floor:
   905                           	opt stack 0
   906  00008F                     floor@x:
   907                           	opt stack 0
   908                           
   909                           ; 3 bytes @ 0x2F
   910  00008F                     	ds	2
   911  000091                     ldexp@newexp:
   912                           	opt stack 0
   913  000091                     log@exponent:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0x31
   917  000091                     	ds	1
   918  000092                     floor@i:
   919                           	opt stack 0
   920                           
   921                           ; 3 bytes @ 0x32
   922  000092                     	ds	1
   923  000093                     ??_ldexp:
   924                           
   925                           ; 1 bytes @ 0x33
   926  000093                     	ds	2
   927  000095                     floor@expon:
   928                           	opt stack 0
   929                           
   930                           ; 2 bytes @ 0x35
   931  000095                     	ds	2
   932  000097                     ?_exp:
   933                           	opt stack 0
   934  000097                     exp@x:
   935                           	opt stack 0
   936                           
   937                           ; 3 bytes @ 0x37
   938  000097                     	ds	3
   939  00009A                     _exp$3248:
   940                           	opt stack 0
   941                           
   942                           ; 3 bytes @ 0x3A
   943  00009A                     	ds	3
   944  00009D                     exp@exponent:
   945                           	opt stack 0
   946                           
   947                           ; 2 bytes @ 0x3D
   948  00009D                     	ds	2
   949  00009F                     exp@sign:
   950                           	opt stack 0
   951                           
   952                           ; 1 bytes @ 0x3F
   953  00009F                     	ds	1
   954  0000A0                     ?_pow:
   955                           	opt stack 0
   956  0000A0                     pow@x:
   957                           	opt stack 0
   958                           
   959                           ; 3 bytes @ 0x40
   960  0000A0                     	ds	3
   961  0000A3                     pow@y:
   962                           	opt stack 0
   963                           
   964                           ; 3 bytes @ 0x43
   965  0000A3                     	ds	3
   966  0000A6                     _pow$3246:
   967                           	opt stack 0
   968                           
   969                           ; 3 bytes @ 0x46
   970  0000A6                     	ds	3
   971  0000A9                     _pow$3247:
   972                           	opt stack 0
   973                           
   974                           ; 3 bytes @ 0x49
   975  0000A9                     	ds	3
   976  0000AC                     pow@sign:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0x4C
   980  0000AC                     	ds	1
   981  0000AD                     pow@yi:
   982                           	opt stack 0
   983                           
   984                           ; 4 bytes @ 0x4D
   985  0000AD                     	ds	4
   986  0000B1                     ??_AdcConvert:
   987  0000B1                     _FlashReadUart$557:
   988                           	opt stack 0
   989                           
   990                           ; 4 bytes @ 0x51
   991  0000B1                     	ds	2
   992  0000B3                     AdcConvert@_adcResult:
   993                           	opt stack 0
   994                           
   995                           ; 2 bytes @ 0x53
   996  0000B3                     	ds	2
   997  0000B5                     AdcConvert@_adcResult_328:
   998                           	opt stack 0
   999  0000B5                     _FlashReadUart$558:
  1000                           	opt stack 0
  1001                           
  1002                           ; 4 bytes @ 0x55
  1003  0000B5                     	ds	2
  1004  0000B7                     _AdcConvert$3245:
  1005                           	opt stack 0
  1006                           
  1007                           ; 3 bytes @ 0x57
  1008  0000B7                     	ds	2
  1009  0000B9                     FlashReadUart@j:
  1010                           	opt stack 0
  1011                           
  1012                           ; 2 bytes @ 0x59
  1013  0000B9                     	ds	1
  1014  0000BA                     AdcConvert@adcRes:
  1015                           	opt stack 0
  1016                           
  1017                           ; 2 bytes @ 0x5A
  1018  0000BA                     	ds	1
  1019  0000BB                     FlashReadUart@idx:
  1020                           	opt stack 0
  1021                           
  1022                           ; 2 bytes @ 0x5B
  1023  0000BB                     	ds	1
  1024  0000BC                     AdcConvert@idx:
  1025                           	opt stack 0
  1026                           
  1027                           ; 1 bytes @ 0x5C
  1028  0000BC                     	ds	1
  1029  0000BD                     FlashReadUart@offset:
  1030                           	opt stack 0
  1031                           
  1032                           ; 2 bytes @ 0x5D
  1033  0000BD                     	ds	2
  1034  0000BF                     ??_GroupFlashMemory:
  1035  0000BF                     GroupControlMcu@request:
  1036                           	opt stack 0
  1037  0000BF                     GroupStatusAndVersion@request:
  1038                           	opt stack 0
  1039  0000BF                     GroupAdc@request:
  1040                           	opt stack 0
  1041  0000BF                     GroupSynthesizers@request:
  1042                           	opt stack 0
  1043  0000BF                     GroupDAC@request:
  1044                           	opt stack 0
  1045                           
  1046                           ; 1 bytes @ 0x5F
  1047  0000BF                     	ds	1
  1048                           tblptru	equ	0xFF8
  1049                           tblptrh	equ	0xFF7
  1050                           tblptrl	equ	0xFF6
  1051                           tablat	equ	0xFF5
  1052                           postinc0	equ	0xFEE
  1053                           wreg	equ	0xFE8
  1054                           postdec1	equ	0xFE5
  1055                           fsr1l	equ	0xFE1
  1056                           
  1057                           	psect	cstackCOMRAM
  1058  000001                     __pcstackCOMRAM:
  1059                           	opt stack 0
  1060  000001                     ?___lwmod:
  1061                           	opt stack 0
  1062  000001                     ___lwmod@dividend:
  1063                           	opt stack 0
  1064                           
  1065                           ; 2 bytes @ 0x0
  1066  000001                     	ds	2
  1067  000003                     ___lwmod@divisor:
  1068                           	opt stack 0
  1069                           
  1070                           ; 2 bytes @ 0x2
  1071  000003                     	ds	2
  1072  000005                     ___lwmod@counter:
  1073                           	opt stack 0
  1074                           
  1075                           ; 1 bytes @ 0x4
  1076  000005                     	ds	1
  1077  000006                     ??_INTERRUPT_InterruptManager:
  1078                           
  1079                           ; 1 bytes @ 0x5
  1080  000006                     	ds	18
  1081  000018                     ??_EUSART1_Read:
  1082  000018                     ??_isspace:
  1083  000018                     ??_isdigit:
  1084  000018                     ??_isupper:
  1085  000018                     ??_BlinkErrorLeds:
  1086  000018                     ??_BlinkOkLeds:
  1087  000018                     ??_keepAliveSignalLed:
  1088  000018                     ?_ADC_GetConversion:
  1089                           	opt stack 0
  1090  000018                     ?_abs:
  1091                           	opt stack 0
  1092  000018                     ?___wmul:
  1093                           	opt stack 0
  1094  000018                     ?___ftpack:
  1095                           	opt stack 0
  1096  000018                     ?_frexp:
  1097                           	opt stack 0
  1098  000018                     ?___ftneg:
  1099                           	opt stack 0
  1100  000018                     ?___lmul:
  1101                           	opt stack 0
  1102  000018                     ?___lldiv:
  1103                           	opt stack 0
  1104  000018                     ?___llmod:
  1105                           	opt stack 0
  1106  000018                     InitAdcApplicationMgr@channel:
  1107                           	opt stack 0
  1108  000018                     SwSpi_Data_Pin@cPinMode:
  1109                           	opt stack 0
  1110  000018                     SwSpi_Clk_Pin@cPinMode:
  1111                           	opt stack 0
  1112  000018                     SwSpi_Set_CE_Pin@cPinMode:
  1113                           	opt stack 0
  1114  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  1115                           	opt stack 0
  1116  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  1117                           	opt stack 0
  1118  000018                     SwSpi_Set_Dac_Ldac_Pin@cPinMode:
  1119                           	opt stack 0
  1120  000018                     EUSART1_Write@txData:
  1121                           	opt stack 0
  1122  000018                     DATAEE_WriteByte@bData:
  1123                           	opt stack 0
  1124  000018                     DATAEE_ReadByte@bAdd:
  1125                           	opt stack 0
  1126  000018                     toupper@c:
  1127                           	opt stack 0
  1128  000018                     PLLUartInitialize@data:
  1129                           	opt stack 0
  1130  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  1131                           	opt stack 0
  1132  000018                     crc8@dataArray:
  1133                           	opt stack 0
  1134  000018                     ___wmul@multiplier:
  1135                           	opt stack 0
  1136  000018                     abs@a:
  1137                           	opt stack 0
  1138  000018                     memset@p1:
  1139                           	opt stack 0
  1140  000018                     ___ftpack@arg:
  1141                           	opt stack 0
  1142  000018                     ___ftge@ff1:
  1143                           	opt stack 0
  1144  000018                     ___ftneg@f1:
  1145                           	opt stack 0
  1146  000018                     frexp@value:
  1147                           	opt stack 0
  1148  000018                     FLASH_ReadByte@flashAddr:
  1149                           	opt stack 0
  1150  000018                     FLASH_EraseBlock@baseAddr:
  1151                           	opt stack 0
  1152  000018                     make8@data:
  1153                           	opt stack 0
  1154  000018                     ___lmul@multiplier:
  1155                           	opt stack 0
  1156  000018                     ___lldiv@dividend:
  1157                           	opt stack 0
  1158  000018                     ___llmod@dividend:
  1159                           	opt stack 0
  1160                           
  1161                           ; 4 bytes @ 0x17
  1162  000018                     	ds	1
  1163  000019                     EepromRead@address:
  1164                           	opt stack 0
  1165  000019                     SwSpi_Data_Pin@phrType:
  1166                           	opt stack 0
  1167  000019                     SwSpi_Clk_Pin@phrType:
  1168                           	opt stack 0
  1169  000019                     SwSpi_Set_CE_Pin@phrType:
  1170                           	opt stack 0
  1171  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  1172                           	opt stack 0
  1173  000019                     DATAEE_WriteByte@bAdd:
  1174                           	opt stack 0
  1175  000019                     _isdigit$2960:
  1176                           	opt stack 0
  1177  000019                     _isspace$2963:
  1178                           	opt stack 0
  1179  000019                     _isupper$2966:
  1180                           	opt stack 0
  1181  000019                     WriteUartMessage@dataBuf:
  1182                           	opt stack 0
  1183  000019                     EUSART1_Read@readValue:
  1184                           	opt stack 0
  1185                           
  1186                           ; 2 bytes @ 0x18
  1187  000019                     	ds	1
  1188  00001A                     ??_ADC_GetConversion:
  1189  00001A                     ??_abs:
  1190  00001A                     ??_TMR0_Initialize:
  1191  00001A                     SwSpi_Set_Clock@phrType:
  1192                           	opt stack 0
  1193  00001A                     DATAEE_WriteByte@GIEBitValue:
  1194                           	opt stack 0
  1195  00001A                     isdigit@c:
  1196                           	opt stack 0
  1197  00001A                     isspace@c:
  1198                           	opt stack 0
  1199  00001A                     isupper@c:
  1200                           	opt stack 0
  1201  00001A                     crc8@dataSize:
  1202                           	opt stack 0
  1203  00001A                     ___wmul@multiplicand:
  1204                           	opt stack 0
  1205  00001A                     memset@c:
  1206                           	opt stack 0
  1207                           
  1208                           ; 2 bytes @ 0x19
  1209  00001A                     	ds	1
  1210  00001B                     ??_isalpha:
  1211  00001B                     BlinkErrorLeds@state:
  1212                           	opt stack 0
  1213  00001B                     BlinkOkLeds@state:
  1214                           	opt stack 0
  1215  00001B                     EepromWrite@data:
  1216                           	opt stack 0
  1217  00001B                     SWSPI_send_bits@data:
  1218                           	opt stack 0
  1219  00001B                     ___ftpack@exp:
  1220                           	opt stack 0
  1221  00001B                     WriteUartMessage@dataSize:
  1222                           	opt stack 0
  1223  00001B                     frexp@eptr:
  1224                           	opt stack 0
  1225  00001B                     ___ftge@ff2:
  1226                           	opt stack 0
  1227                           
  1228                           ; 3 bytes @ 0x1A
  1229  00001B                     	ds	1
  1230  00001C                     ??_crc8:
  1231  00001C                     EepromWrite@address:
  1232                           	opt stack 0
  1233  00001C                     SWSPI_send_bits@count:
  1234                           	opt stack 0
  1235  00001C                     FLASH_EraseBlock@GIEBitValue:
  1236                           	opt stack 0
  1237  00001C                     ADC_GetConversion@channel:
  1238                           	opt stack 0
  1239  00001C                     make8@dataLocation:
  1240                           	opt stack 0
  1241  00001C                     ___ftpack@sign:
  1242                           	opt stack 0
  1243  00001C                     _isalpha$2957:
  1244                           	opt stack 0
  1245  00001C                     BlinkErrorLeds@idx:
  1246                           	opt stack 0
  1247  00001C                     BlinkOkLeds@idx:
  1248                           	opt stack 0
  1249  00001C                     ___wmul@product:
  1250                           	opt stack 0
  1251  00001C                     memset@n:
  1252                           	opt stack 0
  1253  00001C                     ___lmul@multiplicand:
  1254                           	opt stack 0
  1255  00001C                     ___lldiv@divisor:
  1256                           	opt stack 0
  1257  00001C                     ___llmod@divisor:
  1258                           	opt stack 0
  1259                           
  1260                           ; 4 bytes @ 0x1B
  1261  00001C                     	ds	1
  1262  00001D                     ??_make8:
  1263  00001D                     ??___ftpack:
  1264  00001D                     ??_frexp:
  1265  00001D                     ??_WriteUartMessage:
  1266  00001D                     SWSPI_send_bits@phrType:
  1267                           	opt stack 0
  1268  00001D                     isalpha@c:
  1269                           	opt stack 0
  1270  00001D                     crc8@crc:
  1271                           	opt stack 0
  1272  00001D                     FLASH_WriteBlock@writeAddr:
  1273                           	opt stack 0
  1274                           
  1275                           ; 4 bytes @ 0x1C
  1276  00001D                     	ds	1
  1277  00001E                     ??___ftge:
  1278  00001E                     WriteUartMessage@idx:
  1279                           	opt stack 0
  1280  00001E                     memset@p:
  1281                           	opt stack 0
  1282                           
  1283                           ; 2 bytes @ 0x1D
  1284  00001E                     	ds	1
  1285  00001F                     crc8@i:
  1286                           	opt stack 0
  1287                           
  1288                           ; 2 bytes @ 0x1E
  1289  00001F                     	ds	1
  1290  000020                     ?___awtoft:
  1291                           	opt stack 0
  1292  000020                     ?___lltoft:
  1293                           	opt stack 0
  1294  000020                     ?___lwtoft:
  1295                           	opt stack 0
  1296  000020                     ___llmod@counter:
  1297                           	opt stack 0
  1298  000020                     ZeroArray@array:
  1299                           	opt stack 0
  1300  000020                     ___awtoft@c:
  1301                           	opt stack 0
  1302  000020                     ___lwtoft@c:
  1303                           	opt stack 0
  1304  000020                     ___lmul@product:
  1305                           	opt stack 0
  1306  000020                     ___lldiv@quotient:
  1307                           	opt stack 0
  1308  000020                     ___lltoft@c:
  1309                           	opt stack 0
  1310                           
  1311                           ; 4 bytes @ 0x1F
  1312  000020                     	ds	1
  1313  000021                     FLASH_WriteBlock@flashWrBufPtr:
  1314                           	opt stack 0
  1315  000021                     SWSPI_send_word@data:
  1316                           	opt stack 0
  1317                           
  1318                           ; 4 bytes @ 0x20
  1319  000021                     	ds	1
  1320  000022                     ZeroArray@size:
  1321                           	opt stack 0
  1322                           
  1323                           ; 2 bytes @ 0x21
  1324  000022                     	ds	1
  1325  000023                     ??_FLASH_WriteBlock:
  1326  000023                     ___awtoft@sign:
  1327                           	opt stack 0
  1328                           
  1329                           ; 1 bytes @ 0x22
  1330  000023                     	ds	1
  1331  000024                     ??_GetMcuFwVersion:
  1332  000024                     ??_GetCpldFwVersion:
  1333  000024                     ??_FlashReadCondition:
  1334  000024                     ??___lltoft:
  1335  000024                     ?_strtol:
  1336                           	opt stack 0
  1337  000024                     SendAckMessage@inRequest:
  1338                           	opt stack 0
  1339  000024                     ___lldiv@counter:
  1340                           	opt stack 0
  1341  000024                     FlashReadUart@numOfSampleToRead:
  1342                           	opt stack 0
  1343  000024                     strtol@s:
  1344                           	opt stack 0
  1345                           
  1346                           ; 2 bytes @ 0x23
  1347  000024                     	ds	1
  1348  000025                     ??_GetMcuRunTime:
  1349  000025                     SendAckMessage@inGroup:
  1350                           	opt stack 0
  1351  000025                     SWSPI_send_word@dataSize:
  1352                           	opt stack 0
  1353                           
  1354                           ; 1 bytes @ 0x24
  1355  000025                     	ds	1
  1356  000026                     SWSPI_send_word@datac:
  1357                           	opt stack 0
  1358  000026                     strtol@endptr:
  1359                           	opt stack 0
  1360  000026                     SendAckMessage@TxMsg:
  1361                           	opt stack 0
  1362  000026                     GetMcuFwVersion@TxMsg:
  1363                           	opt stack 0
  1364  000026                     GetCpldFwVersion@TxMsg:
  1365                           	opt stack 0
  1366                           
  1367                           ; 9 bytes @ 0x25
  1368  000026                     	ds	1
  1369  000027                     SWSPI_send_word@idx:
  1370                           	opt stack 0
  1371  000027                     FLASH_WriteBlock@blockStartAddr:
  1372                           	opt stack 0
  1373                           
  1374                           ; 4 bytes @ 0x26
  1375  000027                     	ds	1
  1376  000028                     ___lltoft@exp:
  1377                           	opt stack 0
  1378  000028                     strtol@base:
  1379                           	opt stack 0
  1380  000028                     FlashReadCondition@TxMsg:
  1381                           	opt stack 0
  1382                           
  1383                           ; 9 bytes @ 0x27
  1384  000028                     	ds	1
  1385  000029                     ?___ftdiv:
  1386                           	opt stack 0
  1387  000029                     SWSPI_send_word@phrType:
  1388                           	opt stack 0
  1389  000029                     ___ftdiv@f1:
  1390                           	opt stack 0
  1391                           
  1392                           ; 3 bytes @ 0x28
  1393  000029                     	ds	1
  1394  00002A                     ??_strtol:
  1395  00002A                     ??_PLLInitialize:
  1396                           
  1397                           ; 1 bytes @ 0x29
  1398  00002A                     	ds	1
  1399  00002B                     FLASH_WriteBlock@GIEBitValue:
  1400                           	opt stack 0
  1401                           
  1402                           ; 1 bytes @ 0x2A
  1403  00002B                     	ds	1
  1404  00002C                     ??_testLeds:
  1405  00002C                     FLASH_WriteBlock@i:
  1406                           	opt stack 0
  1407  00002C                     SetAdcOperationMode@data:
  1408                           	opt stack 0
  1409  00002C                     SetConversionResultFormat@data:
  1410                           	opt stack 0
  1411  00002C                     SetChannelMode@data:
  1412                           	opt stack 0
  1413  00002C                     PLLInitialize@idx:
  1414                           	opt stack 0
  1415  00002C                     UpdateRxFreq@data:
  1416                           	opt stack 0
  1417  00002C                     SetMcuFwVersion@data:
  1418                           	opt stack 0
  1419  00002C                     SetCpldFwVersion@data:
  1420                           	opt stack 0
  1421  00002C                     ___ftdiv@f2:
  1422                           	opt stack 0
  1423                           
  1424                           ; 3 bytes @ 0x2B
  1425  00002C                     	ds	1
  1426  00002D                     testLeds@idx:
  1427                           	opt stack 0
  1428  00002D                     FlashSampleWrite@sampleData:
  1429                           	opt stack 0
  1430                           
  1431                           ; 2 bytes @ 0x2C
  1432  00002D                     	ds	1
  1433  00002E                     SetMcuFwVersion@idx:
  1434                           	opt stack 0
  1435  00002E                     DacSetValue@data:
  1436                           	opt stack 0
  1437  00002E                     PLLInitialize@idx_797:
  1438                           	opt stack 0
  1439  00002E                     UpdateTxFreq@data:
  1440                           	opt stack 0
  1441  00002E                     SetCpldFwVersion@idx:
  1442                           	opt stack 0
  1443                           
  1444                           ; 2 bytes @ 0x2D
  1445  00002E                     	ds	1
  1446  00002F                     ??_eval_poly:
  1447  00002F                     FlashSampleWrite@channelNum:
  1448                           	opt stack 0
  1449  00002F                     GetMcuFwVersion@idx:
  1450                           	opt stack 0
  1451  00002F                     ___altoft@exp:
  1452                           	opt stack 0
  1453  00002F                     GetCpldFwVersion@idx:
  1454                           	opt stack 0
  1455                           
  1456                           ; 2 bytes @ 0x2E
  1457  00002F                     	ds	1
  1458  000030                     ___altoft@sign:
  1459                           	opt stack 0
  1460                           
  1461                           ; 1 bytes @ 0x2F
  1462  000030                     	ds	1
  1463  000031                     tblptru	equ	0xFF8
  1464                           tblptrh	equ	0xFF7
  1465                           tblptrl	equ	0xFF6
  1466                           tablat	equ	0xFF5
  1467                           postinc0	equ	0xFEE
  1468                           wreg	equ	0xFE8
  1469                           postdec1	equ	0xFE5
  1470                           fsr1l	equ	0xFE1
  1471                           
  1472                           ; 1 bytes @ 0x30
  1473 ;;
  1474 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1475 ;;
  1476 ;; *************** function _main *****************
  1477 ;; Defined at:
  1478 ;;		line 13 in file "main.c"
  1479 ;; Parameters:    Size  Location     Type
  1480 ;;		None
  1481 ;; Auto vars:     Size  Location     Type
  1482 ;;		None
  1483 ;; Return value:  Size  Location     Type
  1484 ;;                  1    wreg      void 
  1485 ;; Registers used:
  1486 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1487 ;; Tracked objects:
  1488 ;;		On entry : 0/0
  1489 ;;		On exit  : 0/0
  1490 ;;		Unchanged: 0/0
  1491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1492 ;;      Params:         0       0       0       0       0       0       0
  1493 ;;      Locals:         0       0       0       0       0       0       0
  1494 ;;      Temps:          0       0       0       0       0       0       0
  1495 ;;      Totals:         0       0       0       0       0       0       0
  1496 ;;Total ram usage:        0 bytes
  1497 ;; Hardware stack levels required when called:   10
  1498 ;; This function calls:
  1499 ;;		_AdcConvert
  1500 ;;		_BlinkErrorLeds
  1501 ;;		_BlinkOkLeds
  1502 ;;		_CheckFlashPrecentage
  1503 ;;		_InitSystemApplicationManagers
  1504 ;;		_SendSystemStartAck
  1505 ;;		_SetMcuRunTime
  1506 ;;		_SetMcuSystem
  1507 ;;		_keepAliveSignalLed
  1508 ;;		_keepAliveSignalUart
  1509 ;;		_readUartMessage
  1510 ;; This function is called by:
  1511 ;;		Startup code after reset
  1512 ;; This function uses a non-reentrant model
  1513 ;;
  1514                           
  1515                           	psect	text0
  1516  0028B4                     __ptext0:
  1517                           	opt stack 0
  1518  0028B4                     _main:
  1519                           	opt stack 21
  1520                           
  1521                           ;main.c: 16: SetMcuSystem();
  1522                           
  1523                           ;incstack = 0
  1524  0028B4  EC8B  F01B         	call	_SetMcuSystem	;wreg free
  1525                           
  1526                           ;main.c: 19: InitSystemApplicationManagers();
  1527  0028B8  EC0B  F01B         	call	_InitSystemApplicationManagers	;wreg free
  1528                           
  1529                           ;main.c: 22: SendSystemStartAck();
  1530  0028BC  EC80  F01B         	call	_SendSystemStartAck	;wreg free
  1531                           
  1532                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  1533  0028C0  0E03               	movlw	3
  1534  0028C2  EC8B  F014         	call	_BlinkOkLeds
  1535  0028C6                     
  1536                           ;main.c: 28: {
  1537                           ;main.c: 29: readUartMessage();
  1538  0028C6  EC2B  F006         	call	_readUartMessage	;wreg free
  1539                           
  1540                           ;main.c: 31: if (TimerOneSecFlag == 1)
  1541  0028CA  0100               	movlb	0	; () banked
  1542  0028CC  05D6               	decf	_TimerOneSecFlag& (0+255),w,b	;volatile
  1543  0028CE  A4D8               	btfss	status,2,c
  1544  0028D0  D006               	goto	l1395
  1545                           
  1546                           ; BSR set to: 0
  1547                           ;main.c: 32: {
  1548                           ;main.c: 34: SetMcuRunTime();
  1549  0028D2  EC53  F017         	call	_SetMcuRunTime	;wreg free
  1550                           
  1551                           ;main.c: 35: TimerOneSecFlag = 0;
  1552  0028D6  0E00               	movlw	0
  1553  0028D8  0100               	movlb	0	; () banked
  1554  0028DA  6FD6               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
  1555                           
  1556                           ;main.c: 36: }
  1557  0028DC  D7F4               	goto	l1394
  1558  0028DE                     l1395:
  1559                           
  1560                           ; BSR set to: 0
  1561                           ;main.c: 37: else if (TimerSamplingFlag == 1)
  1562                           
  1563                           ; BSR set to: 0
  1564  0028DE  05D5               	decf	_TimerSamplingFlag& (0+255),w,b	;volatile
  1565  0028E0  A4D8               	btfss	status,2,c
  1566  0028E2  D010               	goto	l1397
  1567                           
  1568                           ; BSR set to: 0
  1569                           ;main.c: 38: {
  1570                           ;main.c: 39: keepAliveSignalLed();
  1571  0028E4  ECF4  F01A         	call	_keepAliveSignalLed	;wreg free
  1572                           
  1573                           ;main.c: 41: if(1 == CheckFlashPrecentage())
  1574  0028E8  EC8B  F010         	call	_CheckFlashPrecentage	;wreg free
  1575  0028EC  06E8               	decf	wreg,f,c
  1576  0028EE  A4D8               	btfss	status,2,c
  1577  0028F0  D003               	goto	l1398
  1578                           
  1579                           ;main.c: 42: {
  1580                           ;main.c: 43: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  1581  0028F2  0E04               	movlw	4
  1582  0028F4  ECBA  F014         	call	_BlinkErrorLeds
  1583  0028F8                     l1398:
  1584                           
  1585                           ;main.c: 44: }
  1586                           ;main.c: 47: AdcConvert();
  1587  0028F8  EC0D  F009         	call	_AdcConvert	;wreg free
  1588                           
  1589                           ;main.c: 49: TimerSamplingFlag = 0;
  1590  0028FC  0E00               	movlw	0
  1591  0028FE  0100               	movlb	0	; () banked
  1592  002900  6FD5               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
  1593                           
  1594                           ;main.c: 50: }
  1595  002902  D7E1               	goto	l1394
  1596  002904                     l1397:
  1597                           
  1598                           ; BSR set to: 0
  1599                           ;main.c: 51: else if (TimerKeepAliveFlag == 1)
  1600                           
  1601                           ; BSR set to: 0
  1602  002904  05D4               	decf	_TimerKeepAliveFlag& (0+255),w,b	;volatile
  1603  002906  A4D8               	btfss	status,2,c
  1604  002908  D7DE               	goto	l1394
  1605                           
  1606                           ; BSR set to: 0
  1607                           ;main.c: 52: {
  1608                           ;main.c: 53: keepAliveSignalUart();
  1609  00290A  EC7A  F01B         	call	_keepAliveSignalUart	;wreg free
  1610                           
  1611                           ;main.c: 54: TimerKeepAliveFlag = 0;
  1612  00290E  0E00               	movlw	0
  1613  002910  0100               	movlb	0	; () banked
  1614  002912  6FD4               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
  1615                           
  1616                           ; BSR set to: 0
  1617                           
  1618                           ; BSR set to: 0
  1619                           
  1620                           ; BSR set to: 0
  1621                           
  1622                           ; BSR set to: 0
  1623  002914  D7D8               	goto	l1394
  1624  002916                     __end_of_main:
  1625                           	opt stack 0
  1626                           tblptru	equ	0xFF8
  1627                           tblptrh	equ	0xFF7
  1628                           tblptrl	equ	0xFF6
  1629                           tablat	equ	0xFF5
  1630                           postinc0	equ	0xFEE
  1631                           wreg	equ	0xFE8
  1632                           postdec1	equ	0xFE5
  1633                           fsr1l	equ	0xFE1
  1634                           status	equ	0xFD8
  1635                           
  1636 ;; *************** function _readUartMessage *****************
  1637 ;; Defined at:
  1638 ;;		line 28 in file "EusartApp.c"
  1639 ;; Parameters:    Size  Location     Type
  1640 ;;		None
  1641 ;; Auto vars:     Size  Location     Type
  1642 ;;  idx             2    7[BANK1 ] int 
  1643 ;;  chRec           1    9[BANK1 ] unsigned char 
  1644 ;; Return value:  Size  Location     Type
  1645 ;;                  1    wreg      void 
  1646 ;; Registers used:
  1647 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  1648 ;; Tracked objects:
  1649 ;;		On entry : 0/0
  1650 ;;		On exit  : 0/0
  1651 ;;		Unchanged: 0/0
  1652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1653 ;;      Params:         0       0       0       0       0       0       0
  1654 ;;      Locals:         0       0       3       0       0       0       0
  1655 ;;      Temps:          0       0       4       0       0       0       0
  1656 ;;      Totals:         0       0       7       0       0       0       0
  1657 ;;Total ram usage:        7 bytes
  1658 ;; Hardware stack levels used:    1
  1659 ;; Hardware stack levels required when called:    9
  1660 ;; This function calls:
  1661 ;;		_EUSART1_Read
  1662 ;;		_GroupAdc
  1663 ;;		_GroupControlMcu
  1664 ;;		_GroupDAC
  1665 ;;		_GroupFlashMemory
  1666 ;;		_GroupStatusAndVersion
  1667 ;;		_GroupSynthesizers
  1668 ;;		_InitRxMessageParams
  1669 ;;		_ZeroArray
  1670 ;;		_crc8
  1671 ;; This function is called by:
  1672 ;;		_main
  1673 ;; This function uses a non-reentrant model
  1674 ;;
  1675                           
  1676                           	psect	text1
  1677  000C56                     __ptext1:
  1678                           	opt stack 0
  1679  000C56                     _readUartMessage:
  1680                           	opt stack 21
  1681                           
  1682                           ;EusartApp.c: 31: uint8_t chRec = (0);
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;incstack = 0
  1686  000C56  0E00               	movlw	0
  1687  000C58  0101               	movlb	1	; () banked
  1688  000C5A  6FCB               	movwf	readUartMessage@chRec& (0+255),b
  1689                           
  1690                           ;EusartApp.c: 32: switch(cState)
  1691  000C5C  D0DF               	goto	l172
  1692  000C5E                     
  1693                           ;EusartApp.c: 37: if(eusart1RxCount > (4))
  1694                           
  1695                           ; BSR set to: 1
  1696  000C5E  0E04               	movlw	4
  1697  000C60  0100               	movlb	0	; () banked
  1698  000C62  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1699  000C64  0012               	return	
  1700                           
  1701                           ; BSR set to: 0
  1702                           ;EusartApp.c: 38: {
  1703                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  1704  000C66  0E01               	movlw	1
  1705  000C68  6FD1               	movwf	_cState& (0+255),b
  1706                           
  1707                           ; BSR set to: 0
  1708                           ;EusartApp.c: 40: }
  1709                           ;EusartApp.c: 41: return;
  1710                           
  1711                           ; BSR set to: 0
  1712  000C6A  0012               	return	
  1713  000C6C                     
  1714                           ; BSR set to: 0
  1715                           ;EusartApp.c: 45: InitRxMessageParams();
  1716                           
  1717                           ; BSR set to: 0
  1718  000C6C  ECE6  F019         	call	_InitRxMessageParams	;wreg free
  1719                           
  1720                           ;EusartApp.c: 46: msgCount = 0;
  1721  000C70  0E00               	movlw	0
  1722  000C72  0100               	movlb	0	; () banked
  1723  000C74  6FCA               	movwf	_msgCount& (0+255),b
  1724                           
  1725                           ; BSR set to: 0
  1726                           ;EusartApp.c: 47: if(eusart1RxCount > 1)
  1727  000C76  0E01               	movlw	1
  1728  000C78  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1729  000C7A  D00E               	goto	l177
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;EusartApp.c: 48: {
  1733                           ;EusartApp.c: 49: chRec = EUSART1_Read();
  1734  000C7C  EC31  F017         	call	_EUSART1_Read	;wreg free
  1735  000C80  0101               	movlb	1	; () banked
  1736  000C82  6FCB               	movwf	readUartMessage@chRec& (0+255),b
  1737                           
  1738                           ; BSR set to: 1
  1739                           ;EusartApp.c: 50: rxMsgQueue[(0)] = chRec;
  1740  000C84  C1CB  F0D7         	movff	readUartMessage@chRec,_rxMsgQueue
  1741                           
  1742                           ; BSR set to: 1
  1743                           ;EusartApp.c: 51: if(chRec == (0x24))
  1744  000C88  0E24               	movlw	36
  1745  000C8A  19CB               	xorwf	readUartMessage@chRec& (0+255),w,b
  1746  000C8C  A4D8               	btfss	status,2,c
  1747  000C8E  0012               	return	
  1748                           
  1749                           ; BSR set to: 1
  1750                           ;EusartApp.c: 52: {
  1751                           ;EusartApp.c: 53: cState = READ_GROUP;
  1752  000C90  0E02               	movlw	2
  1753  000C92  0100               	movlb	0	; () banked
  1754  000C94  6FD1               	movwf	_cState& (0+255),b
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;EusartApp.c: 54: }
  1758                           ;EusartApp.c: 55: }
  1759  000C96  0012               	return	
  1760  000C98                     l177:
  1761                           
  1762                           ; BSR set to: 0
  1763                           ;EusartApp.c: 56: else
  1764                           ;EusartApp.c: 57: {
  1765                           ;EusartApp.c: 58: cState = START_RX_MESSAGE_READ;
  1766                           
  1767                           ; BSR set to: 0
  1768  000C98  0E00               	movlw	0
  1769  000C9A  6FD1               	movwf	_cState& (0+255),b
  1770                           
  1771                           ; BSR set to: 0
  1772                           ;EusartApp.c: 59: }
  1773                           ;EusartApp.c: 61: break;
  1774  000C9C  0012               	return	
  1775  000C9E                     
  1776                           ; BSR set to: 0
  1777                           ;EusartApp.c: 65: if(eusart1RxCount > 1)
  1778                           
  1779                           ; BSR set to: 0
  1780  000C9E  0E01               	movlw	1
  1781  000CA0  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1782  000CA2  0012               	return	
  1783                           
  1784                           ; BSR set to: 0
  1785                           ;EusartApp.c: 66: {
  1786                           ;EusartApp.c: 67: group = EUSART1_Read();
  1787  000CA4  EC31  F017         	call	_EUSART1_Read	;wreg free
  1788  000CA8  0100               	movlb	0	; () banked
  1789  000CAA  6FD0               	movwf	_group& (0+255),b
  1790                           
  1791                           ; BSR set to: 0
  1792                           ;EusartApp.c: 68: rxMsgQueue[(1)] = group;
  1793  000CAC  C0D0  F0D8         	movff	_group,_rxMsgQueue+1
  1794                           
  1795                           ; BSR set to: 0
  1796                           ;EusartApp.c: 69: cState = READ_REQUEST;
  1797  000CB0  0E03               	movlw	3
  1798  000CB2  6FD1               	movwf	_cState& (0+255),b
  1799                           
  1800                           ; BSR set to: 0
  1801                           ;EusartApp.c: 70: }
  1802                           ;EusartApp.c: 71: break;
  1803  000CB4  0012               	return	
  1804  000CB6                     
  1805                           ; BSR set to: 0
  1806                           ;EusartApp.c: 75: if(eusart1RxCount > 1)
  1807                           
  1808                           ; BSR set to: 0
  1809  000CB6  0E01               	movlw	1
  1810  000CB8  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1811  000CBA  0012               	return	
  1812                           
  1813                           ; BSR set to: 0
  1814                           ;EusartApp.c: 76: {
  1815                           ;EusartApp.c: 77: request = EUSART1_Read();
  1816  000CBC  EC31  F017         	call	_EUSART1_Read	;wreg free
  1817  000CC0  0100               	movlb	0	; () banked
  1818  000CC2  6FCF               	movwf	_request& (0+255),b
  1819                           
  1820                           ; BSR set to: 0
  1821                           ;EusartApp.c: 78: rxMsgQueue[(2)] = request;
  1822  000CC4  C0CF  F0D9         	movff	_request,_rxMsgQueue+2
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;EusartApp.c: 79: cState = READ_DATA_SIZE;
  1826  000CC8  0E04               	movlw	4
  1827  000CCA  6FD1               	movwf	_cState& (0+255),b
  1828                           
  1829                           ; BSR set to: 0
  1830                           ;EusartApp.c: 80: }
  1831                           ;EusartApp.c: 81: break;
  1832  000CCC  0012               	return	
  1833  000CCE                     
  1834                           ; BSR set to: 0
  1835                           ;EusartApp.c: 84: if(eusart1RxCount > 1)
  1836                           
  1837                           ; BSR set to: 0
  1838  000CCE  0E01               	movlw	1
  1839  000CD0  65D2               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  1840  000CD2  0012               	return	
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;EusartApp.c: 85: {
  1844                           ;EusartApp.c: 86: dataSize = EUSART1_Read();
  1845  000CD4  EC31  F017         	call	_EUSART1_Read	;wreg free
  1846  000CD8  0100               	movlb	0	; () banked
  1847  000CDA  6FCE               	movwf	_dataSize& (0+255),b
  1848                           
  1849                           ; BSR set to: 0
  1850                           ;EusartApp.c: 87: rxMsgQueue[(3)] = dataSize;
  1851  000CDC  C0CE  F0DA         	movff	_dataSize,_rxMsgQueue+3
  1852                           
  1853                           ; BSR set to: 0
  1854                           ;EusartApp.c: 88: if(dataSize == 0)
  1855  000CE0  51CE               	movf	_dataSize& (0+255),w,b
  1856  000CE2  A4D8               	btfss	status,2,c
  1857  000CE4  D003               	goto	l187
  1858                           
  1859                           ; BSR set to: 0
  1860                           ;EusartApp.c: 89: {
  1861                           ;EusartApp.c: 90: cState = CHECK_CRC;
  1862  000CE6  0E06               	movlw	6
  1863  000CE8  6FD1               	movwf	_cState& (0+255),b
  1864                           
  1865                           ;EusartApp.c: 91: }
  1866  000CEA  0012               	return	
  1867  000CEC                     l187:
  1868                           
  1869                           ; BSR set to: 0
  1870                           ;EusartApp.c: 92: else
  1871                           ;EusartApp.c: 93: {
  1872                           ;EusartApp.c: 94: cState = READ_DATA;
  1873                           
  1874                           ; BSR set to: 0
  1875  000CEC  0E05               	movlw	5
  1876  000CEE  6FD1               	movwf	_cState& (0+255),b
  1877                           
  1878                           ; BSR set to: 0
  1879                           ;EusartApp.c: 95: }
  1880                           ;EusartApp.c: 97: }
  1881                           ;EusartApp.c: 99: break;
  1882                           
  1883                           ; BSR set to: 0
  1884  000CF0  0012               	return	
  1885  000CF2                     
  1886                           ; BSR set to: 0
  1887                           ;EusartApp.c: 103: if(eusart1RxCount >= dataSize)
  1888                           
  1889                           ; BSR set to: 0
  1890  000CF2  51CE               	movf	_dataSize& (0+255),w,b
  1891  000CF4  5DD2               	subwf	_eusart1RxCount& (0+255),w,b	;volatile
  1892  000CF6  A0D8               	btfss	status,0,c
  1893  000CF8  0012               	return	
  1894                           
  1895                           ; BSR set to: 0
  1896                           ;EusartApp.c: 104: {
  1897                           ;EusartApp.c: 105: ZeroArray(rxMsgData, (0x14));
  1898  000CFA  0EAE               	movlw	low _rxMsgData
  1899  000CFC  6E20               	movwf	ZeroArray@array,c
  1900  000CFE  0E01               	movlw	high _rxMsgData
  1901  000D00  6E21               	movwf	ZeroArray@array+1,c
  1902  000D02  0E00               	movlw	0
  1903  000D04  6E23               	movwf	ZeroArray@size+1,c
  1904  000D06  0E14               	movlw	20
  1905  000D08  6E22               	movwf	ZeroArray@size,c
  1906  000D0A  ECBC  F01A         	call	_ZeroArray	;wreg free
  1907                           
  1908                           ;EusartApp.c: 107: for(int idx = 0; idx < dataSize; idx++)
  1909  000D0E  0E00               	movlw	0
  1910  000D10  0101               	movlb	1	; () banked
  1911  000D12  6FCA               	movwf	(readUartMessage@idx+1)& (0+255),b
  1912  000D14  0E00               	movlw	0
  1913  000D16  6FC9               	movwf	readUartMessage@idx& (0+255),b
  1914  000D18  D022               	goto	l191
  1915  000D1A                     
  1916                           ; BSR set to: 1
  1917                           ;EusartApp.c: 108: {
  1918                           ;EusartApp.c: 109: chRec = EUSART1_Read();
  1919                           
  1920                           ; BSR set to: 1
  1921  000D1A  EC31  F017         	call	_EUSART1_Read	;wreg free
  1922  000D1E  0101               	movlb	1	; () banked
  1923  000D20  6FCB               	movwf	readUartMessage@chRec& (0+255),b
  1924                           
  1925                           ; BSR set to: 1
  1926                           ;EusartApp.c: 110: rxMsgQueue[(0x4) + msgCount++] = chRec;
  1927  000D22  0100               	movlb	0	; () banked
  1928  000D24  51CA               	movf	_msgCount& (0+255),w,b
  1929  000D26  0101               	movlb	1	; () banked
  1930  000D28  6FC5               	movwf	??_readUartMessage& (0+255),b
  1931  000D2A  6BC6               	clrf	(??_readUartMessage+1)& (0+255),b
  1932  000D2C  0E04               	movlw	4
  1933  000D2E  27C5               	addwf	??_readUartMessage& (0+255),f,b
  1934  000D30  0E00               	movlw	0
  1935  000D32  23C6               	addwfc	(??_readUartMessage+1)& (0+255),f,b
  1936  000D34  0ED7               	movlw	low _rxMsgQueue
  1937  000D36  25C5               	addwf	??_readUartMessage& (0+255),w,b
  1938  000D38  6ED9               	movwf	fsr2l,c
  1939  000D3A  0E00               	movlw	high _rxMsgQueue
  1940  000D3C  21C6               	addwfc	(??_readUartMessage+1)& (0+255),w,b
  1941  000D3E  6EDA               	movwf	fsr2h,c
  1942  000D40  C1CB  FFDF         	movff	readUartMessage@chRec,indf2
  1943                           
  1944                           ; BSR set to: 1
  1945  000D44  0100               	movlb	0	; () banked
  1946  000D46  2BCA               	incf	_msgCount& (0+255),f,b
  1947                           
  1948                           ; BSR set to: 0
  1949                           ;EusartApp.c: 111: rxMsgData[idx] = chRec;
  1950  000D48  0EAE               	movlw	low _rxMsgData
  1951  000D4A  0101               	movlb	1	; () banked
  1952  000D4C  25C9               	addwf	readUartMessage@idx& (0+255),w,b
  1953  000D4E  6ED9               	movwf	fsr2l,c
  1954  000D50  0E01               	movlw	high _rxMsgData
  1955  000D52  21CA               	addwfc	(readUartMessage@idx+1)& (0+255),w,b
  1956  000D54  6EDA               	movwf	fsr2h,c
  1957  000D56  C1CB  FFDF         	movff	readUartMessage@chRec,indf2
  1958                           
  1959                           ; BSR set to: 1
  1960  000D5A  4BC9               	infsnz	readUartMessage@idx& (0+255),f,b
  1961  000D5C  2BCA               	incf	(readUartMessage@idx+1)& (0+255),f,b
  1962  000D5E                     l191:
  1963                           
  1964                           ; BSR set to: 1
  1965                           
  1966                           ; BSR set to: 1
  1967  000D5E  0100               	movlb	0	; () banked
  1968  000D60  51CE               	movf	_dataSize& (0+255),w,b
  1969  000D62  0101               	movlb	1	; () banked
  1970  000D64  6FC5               	movwf	??_readUartMessage& (0+255),b
  1971  000D66  6BC6               	clrf	(??_readUartMessage+1)& (0+255),b
  1972  000D68  51C5               	movf	??_readUartMessage& (0+255),w,b
  1973  000D6A  5DC9               	subwf	readUartMessage@idx& (0+255),w,b
  1974  000D6C  51CA               	movf	(readUartMessage@idx+1)& (0+255),w,b
  1975  000D6E  0A80               	xorlw	128
  1976  000D70  6FC7               	movwf	(??_readUartMessage+2)& (0+255),b
  1977  000D72  51C6               	movf	(??_readUartMessage+1)& (0+255),w,b
  1978  000D74  0A80               	xorlw	128
  1979  000D76  59C7               	subwfb	(??_readUartMessage+2)& (0+255),w,b
  1980  000D78  A0D8               	btfss	status,0,c
  1981  000D7A  D7CF               	goto	l192
  1982                           
  1983                           ; BSR set to: 1
  1984                           ;EusartApp.c: 112: }
  1985                           ;EusartApp.c: 114: cState = CHECK_CRC;
  1986                           
  1987                           ; BSR set to: 1
  1988  000D7C  0E06               	movlw	6
  1989  000D7E  0100               	movlb	0	; () banked
  1990  000D80  6FD1               	movwf	_cState& (0+255),b
  1991                           
  1992                           ; BSR set to: 0
  1993                           ;EusartApp.c: 115: }
  1994                           ;EusartApp.c: 116: break;
  1995  000D82  0012               	return	
  1996  000D84                     
  1997                           ; BSR set to: 0
  1998                           ;EusartApp.c: 119: if(eusart1RxCount >= 1)
  1999                           
  2000                           ; BSR set to: 0
  2001  000D84  51D2               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  2002  000D86  B4D8               	btfsc	status,2,c
  2003  000D88  0012               	return	
  2004                           
  2005                           ; BSR set to: 0
  2006                           ;EusartApp.c: 120: {
  2007                           ;EusartApp.c: 121: crcGiven = EUSART1_Read();
  2008  000D8A  EC31  F017         	call	_EUSART1_Read	;wreg free
  2009  000D8E  0100               	movlb	0	; () banked
  2010  000D90  6FCB               	movwf	_crcGiven& (0+255),b
  2011                           
  2012                           ; BSR set to: 0
  2013                           ;EusartApp.c: 122: crcCalc = crc8(rxMsgQueue, (0x4) + msgCount);
  2014  000D92  0ED7               	movlw	low _rxMsgQueue
  2015  000D94  6E18               	movwf	crc8@dataArray,c
  2016  000D96  0E00               	movlw	high _rxMsgQueue
  2017  000D98  6E19               	movwf	crc8@dataArray+1,c
  2018  000D9A  0E04               	movlw	4
  2019  000D9C  25CA               	addwf	_msgCount& (0+255),w,b
  2020  000D9E  6E1A               	movwf	crc8@dataSize,c
  2021  000DA0  6A1B               	clrf	crc8@dataSize+1,c
  2022  000DA2  0E00               	movlw	0
  2023  000DA4  221B               	addwfc	crc8@dataSize+1,f,c
  2024  000DA6  ECA0  F016         	call	_crc8	;wreg free
  2025  000DAA  0100               	movlb	0	; () banked
  2026  000DAC  6FCC               	movwf	_crcCalc& (0+255),b
  2027                           
  2028                           ; BSR set to: 0
  2029                           ;EusartApp.c: 124: if(crcGiven == crcCalc)
  2030  000DAE  51CC               	movf	_crcCalc& (0+255),w,b
  2031  000DB0  19CB               	xorwf	_crcGiven& (0+255),w,b
  2032  000DB2  A4D8               	btfss	status,2,c
  2033  000DB4  D003               	goto	l196
  2034                           
  2035                           ; BSR set to: 0
  2036                           ;EusartApp.c: 125: {
  2037                           ;EusartApp.c: 126: cState = JUMP_FUNCTION;
  2038  000DB6  0E07               	movlw	7
  2039  000DB8  6FD1               	movwf	_cState& (0+255),b
  2040                           
  2041                           ;EusartApp.c: 127: }
  2042  000DBA  0012               	return	
  2043  000DBC                     l196:
  2044                           
  2045                           ; BSR set to: 0
  2046                           ;EusartApp.c: 128: else
  2047                           ;EusartApp.c: 129: {
  2048                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  2049                           
  2050                           ; BSR set to: 0
  2051  000DBC  0E00               	movlw	0
  2052  000DBE  6FD1               	movwf	_cState& (0+255),b
  2053                           
  2054                           ; BSR set to: 0
  2055                           ;EusartApp.c: 131: }
  2056                           ;EusartApp.c: 132: }
  2057                           ;EusartApp.c: 133: break;
  2058                           
  2059                           ; BSR set to: 0
  2060  000DC0  0012               	return	
  2061  000DC2                     
  2062                           ; BSR set to: 0
  2063                           ;EusartApp.c: 136: groupsArray[group - 1](request, rxMsgData);
  2064                           
  2065                           ; BSR set to: 0
  2066  000DC2  0EFE               	movlw	254
  2067  000DC4  0101               	movlb	1	; () banked
  2068  000DC6  6FC5               	movwf	??_readUartMessage& (0+255),b
  2069  000DC8  0EFF               	movlw	255
  2070  000DCA  6FC6               	movwf	(??_readUartMessage+1)& (0+255),b
  2071  000DCC  0100               	movlb	0	; () banked
  2072  000DCE  51D0               	movf	_group& (0+255),w,b
  2073  000DD0  0101               	movlb	1	; () banked
  2074  000DD2  6FC7               	movwf	(??_readUartMessage+2)& (0+255),b
  2075  000DD4  6BC8               	clrf	(??_readUartMessage+3)& (0+255),b
  2076  000DD6  90D8               	bcf	status,0,c
  2077  000DD8  37C7               	rlcf	(??_readUartMessage+2)& (0+255),f,b
  2078  000DDA  37C8               	rlcf	(??_readUartMessage+3)& (0+255),f,b
  2079  000DDC  51C5               	movf	??_readUartMessage& (0+255),w,b
  2080  000DDE  27C7               	addwf	(??_readUartMessage+2)& (0+255),f,b
  2081  000DE0  51C6               	movf	(??_readUartMessage+1)& (0+255),w,b
  2082  000DE2  23C8               	addwfc	(??_readUartMessage+3)& (0+255),f,b
  2083  000DE4  0EEB               	movlw	low _groupsArray
  2084  000DE6  25C7               	addwf	(??_readUartMessage+2)& (0+255),w,b
  2085  000DE8  6ED9               	movwf	fsr2l,c
  2086  000DEA  0E00               	movlw	high _groupsArray
  2087  000DEC  21C8               	addwfc	(??_readUartMessage+3)& (0+255),w,b
  2088  000DEE  6EDA               	movwf	fsr2h,c
  2089  000DF0  D801               	call	u7738
  2090  000DF2  D010               	goto	u7739
  2091  000DF4                     u7738:
  2092  000DF4  0005               	push	
  2093  000DF6  6EFA               	movwf	pclath,c
  2094  000DF8  50DE               	movf	postinc2,w,c
  2095  000DFA  6EFD               	movwf	tosl,c
  2096  000DFC  50DE               	movf	postinc2,w,c
  2097  000DFE  6EFE               	movwf	tosh,c
  2098  000E00  50F8               	movf	tblptru,w,c
  2099  000E02  6EFF               	movwf	tosu,c
  2100  000E04  50FA               	movf	pclath,w,c
  2101  000E06  0EAE               	movlw	low _rxMsgData
  2102  000E08  6FC2               	movwf	GroupDAC@data& (0+255),b
  2103  000E0A  0E01               	movlw	high _rxMsgData
  2104  000E0C  6FC3               	movwf	(GroupDAC@data+1)& (0+255),b
  2105  000E0E  0100               	movlb	0	; () banked
  2106  000E10  51CF               	movf	_request& (0+255),w,b
  2107  000E12  0012               	return		;indir
  2108  000E14                     u7739:
  2109                           
  2110                           ;EusartApp.c: 137: cState = START_RX_MESSAGE_READ;
  2111  000E14  0E00               	movlw	0
  2112  000E16  0100               	movlb	0	; () banked
  2113  000E18  6FD1               	movwf	_cState& (0+255),b
  2114                           
  2115                           ; BSR set to: 0
  2116                           ;EusartApp.c: 139: }
  2117                           
  2118                           ;EusartApp.c: 138: break;
  2119  000E1A  0012               	return	
  2120  000E1C                     l172:
  2121                           
  2122                           ; BSR set to: 0
  2123  000E1C  0100               	movlb	0	; () banked
  2124  000E1E  51D1               	movf	_cState& (0+255),w,b
  2125                           
  2126                           ; Switch size 1, requested type "space"
  2127                           ; Number of cases is 8, Range of values is 0 to 7
  2128                           ; switch strategies available:
  2129                           ; Name         Instructions Cycles
  2130                           ; simple_byte           25    13 (average)
  2131                           ;	Chosen strategy is simple_byte
  2132  000E20  0A00               	xorlw	0	; case 0
  2133  000E22  B4D8               	btfsc	status,2,c
  2134  000E24  D71C               	goto	l173
  2135  000E26  0A01               	xorlw	1	; case 1
  2136  000E28  B4D8               	btfsc	status,2,c
  2137  000E2A  D720               	goto	l176
  2138  000E2C  0A03               	xorlw	3	; case 2
  2139  000E2E  B4D8               	btfsc	status,2,c
  2140  000E30  D736               	goto	l181
  2141  000E32  0A01               	xorlw	1	; case 3
  2142  000E34  B4D8               	btfsc	status,2,c
  2143  000E36  D73F               	goto	l183
  2144  000E38  0A07               	xorlw	7	; case 4
  2145  000E3A  B4D8               	btfsc	status,2,c
  2146  000E3C  D748               	goto	l185
  2147  000E3E  0A01               	xorlw	1	; case 5
  2148  000E40  B4D8               	btfsc	status,2,c
  2149  000E42  D757               	goto	l189
  2150  000E44  0A03               	xorlw	3	; case 6
  2151  000E46  B4D8               	btfsc	status,2,c
  2152  000E48  D79D               	goto	l194
  2153  000E4A  0A01               	xorlw	1	; case 7
  2154  000E4C  A4D8               	btfss	status,2,c
  2155  000E4E  0012               	return	
  2156  000E50  D7B8               	goto	l198
  2157  000E52                     __end_of_readUartMessage:
  2158                           	opt stack 0
  2159                           tosu	equ	0xFFF
  2160                           tosh	equ	0xFFE
  2161                           tosl	equ	0xFFD
  2162                           pclath	equ	0xFFA
  2163                           tblptru	equ	0xFF8
  2164                           tblptrh	equ	0xFF7
  2165                           tblptrl	equ	0xFF6
  2166                           tablat	equ	0xFF5
  2167                           postinc0	equ	0xFEE
  2168                           wreg	equ	0xFE8
  2169                           postdec1	equ	0xFE5
  2170                           fsr1l	equ	0xFE1
  2171                           indf2	equ	0xFDF
  2172                           postinc2	equ	0xFDE
  2173                           fsr2h	equ	0xFDA
  2174                           fsr2l	equ	0xFD9
  2175                           status	equ	0xFD8
  2176                           
  2177 ;; *************** function _InitRxMessageParams *****************
  2178 ;; Defined at:
  2179 ;;		line 142 in file "EusartApp.c"
  2180 ;; Parameters:    Size  Location     Type
  2181 ;;		None
  2182 ;; Auto vars:     Size  Location     Type
  2183 ;;		None
  2184 ;; Return value:  Size  Location     Type
  2185 ;;                  1    wreg      void 
  2186 ;; Registers used:
  2187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2188 ;; Tracked objects:
  2189 ;;		On entry : 0/0
  2190 ;;		On exit  : 0/0
  2191 ;;		Unchanged: 0/0
  2192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2193 ;;      Params:         0       0       0       0       0       0       0
  2194 ;;      Locals:         0       0       0       0       0       0       0
  2195 ;;      Temps:          0       0       0       0       0       0       0
  2196 ;;      Totals:         0       0       0       0       0       0       0
  2197 ;;Total ram usage:        0 bytes
  2198 ;; Hardware stack levels used:    1
  2199 ;; Hardware stack levels required when called:    5
  2200 ;; This function calls:
  2201 ;;		_ZeroArray
  2202 ;; This function is called by:
  2203 ;;		_readUartMessage
  2204 ;; This function uses a non-reentrant model
  2205 ;;
  2206                           
  2207                           	psect	text2
  2208  0033CC                     __ptext2:
  2209                           	opt stack 0
  2210  0033CC                     _InitRxMessageParams:
  2211                           	opt stack 24
  2212                           
  2213                           ;EusartApp.c: 146: dataSize = 0;
  2214                           
  2215                           ;incstack = 0
  2216  0033CC  0E00               	movlw	0
  2217  0033CE  0100               	movlb	0	; () banked
  2218  0033D0  6FCE               	movwf	_dataSize& (0+255),b
  2219                           
  2220                           ;EusartApp.c: 147: crcCalc = 0;
  2221  0033D2  0E00               	movlw	0
  2222  0033D4  6FCC               	movwf	_crcCalc& (0+255),b
  2223                           
  2224                           ;EusartApp.c: 148: crcGiven = 0;
  2225  0033D6  0E00               	movlw	0
  2226  0033D8  6FCB               	movwf	_crcGiven& (0+255),b
  2227                           
  2228                           ;EusartApp.c: 149: msgCount = 0;
  2229  0033DA  0E00               	movlw	0
  2230  0033DC  6FCA               	movwf	_msgCount& (0+255),b
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;EusartApp.c: 150: ZeroArray(rxMsgQueue, (0x14));
  2234  0033DE  0ED7               	movlw	low _rxMsgQueue
  2235  0033E0  6E20               	movwf	ZeroArray@array,c
  2236  0033E2  0E00               	movlw	high _rxMsgQueue
  2237  0033E4  6E21               	movwf	ZeroArray@array+1,c
  2238  0033E6  0E00               	movlw	0
  2239  0033E8  6E23               	movwf	ZeroArray@size+1,c
  2240  0033EA  0E14               	movlw	20
  2241  0033EC  6E22               	movwf	ZeroArray@size,c
  2242  0033EE  ECBC  F01A         	call	_ZeroArray
  2243  0033F2  0012               	return		;funcret
  2244  0033F4                     __end_of_InitRxMessageParams:
  2245                           	opt stack 0
  2246                           tosu	equ	0xFFF
  2247                           tosh	equ	0xFFE
  2248                           tosl	equ	0xFFD
  2249                           pclath	equ	0xFFA
  2250                           tblptru	equ	0xFF8
  2251                           tblptrh	equ	0xFF7
  2252                           tblptrl	equ	0xFF6
  2253                           tablat	equ	0xFF5
  2254                           postinc0	equ	0xFEE
  2255                           wreg	equ	0xFE8
  2256                           postdec1	equ	0xFE5
  2257                           fsr1l	equ	0xFE1
  2258                           indf2	equ	0xFDF
  2259                           postinc2	equ	0xFDE
  2260                           fsr2h	equ	0xFDA
  2261                           fsr2l	equ	0xFD9
  2262                           status	equ	0xFD8
  2263                           
  2264 ;; *************** function _GroupDAC *****************
  2265 ;; Defined at:
  2266 ;;		line 133 in file "MessageFunctions.c"
  2267 ;; Parameters:    Size  Location     Type
  2268 ;;  request         1    wreg     enum E12
  2269 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2270 ;;		 -> rxMsgData(20), 
  2271 ;; Auto vars:     Size  Location     Type
  2272 ;;  request         1   95[BANK0 ] enum E12
  2273 ;; Return value:  Size  Location     Type
  2274 ;;                  1    wreg      void 
  2275 ;; Registers used:
  2276 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2277 ;; Tracked objects:
  2278 ;;		On entry : 0/0
  2279 ;;		On exit  : 0/0
  2280 ;;		Unchanged: 0/0
  2281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2282 ;;      Params:         0       0       2       0       0       0       0
  2283 ;;      Locals:         0       1       0       0       0       0       0
  2284 ;;      Temps:          0       0       0       0       0       0       0
  2285 ;;      Totals:         0       1       2       0       0       0       0
  2286 ;;Total ram usage:        3 bytes
  2287 ;; Hardware stack levels used:    1
  2288 ;; Hardware stack levels required when called:    8
  2289 ;; This function calls:
  2290 ;;		_DacSetValue
  2291 ;; This function is called by:
  2292 ;;		_readUartMessage
  2293 ;; This function uses a non-reentrant model
  2294 ;;
  2295                           
  2296                           	psect	text3
  2297  0034FE                     __ptext3:
  2298                           	opt stack 0
  2299  0034FE                     _GroupDAC:
  2300                           	opt stack 21
  2301                           
  2302                           ;incstack = 0
  2303                           ;GroupDAC@request stored from wreg
  2304  0034FE  0100               	movlb	0	; () banked
  2305  003500  6FBF               	movwf	GroupDAC@request& (0+255),b
  2306                           
  2307                           ;MessageFunctions.c: 135: switch (request)
  2308  003502  D007               	goto	l1196
  2309  003504                     
  2310                           ;MessageFunctions.c: 138: DacSetValue(data);
  2311  003504  C1C2  F02E         	movff	GroupDAC@data,DacSetValue@data
  2312  003508  C1C3  F02F         	movff	GroupDAC@data+1,DacSetValue@data+1
  2313  00350C  ECB7  F017         	call	_DacSetValue	;wreg free
  2314                           
  2315                           ;MessageFunctions.c: 143: }
  2316                           
  2317                           ;MessageFunctions.c: 142: break;
  2318                           
  2319                           ;MessageFunctions.c: 141: default:
  2320                           
  2321                           ;MessageFunctions.c: 139: break;
  2322  003510  0012               	return	
  2323  003512                     l1196:
  2324  003512  0100               	movlb	0	; () banked
  2325  003514  51BF               	movf	GroupDAC@request& (0+255),w,b
  2326                           
  2327                           ; Switch size 1, requested type "space"
  2328                           ; Number of cases is 1, Range of values is 97 to 97
  2329                           ; switch strategies available:
  2330                           ; Name         Instructions Cycles
  2331                           ; simple_byte            4     3 (average)
  2332                           ;	Chosen strategy is simple_byte
  2333  003516  0A61               	xorlw	97	; case 97
  2334  003518  A4D8               	btfss	status,2,c
  2335  00351A  0012               	return	
  2336  00351C  D7F3               	goto	l1197
  2337  00351E                     __end_of_GroupDAC:
  2338                           	opt stack 0
  2339                           tosu	equ	0xFFF
  2340                           tosh	equ	0xFFE
  2341                           tosl	equ	0xFFD
  2342                           pclath	equ	0xFFA
  2343                           tblptru	equ	0xFF8
  2344                           tblptrh	equ	0xFF7
  2345                           tblptrl	equ	0xFF6
  2346                           tablat	equ	0xFF5
  2347                           postinc0	equ	0xFEE
  2348                           wreg	equ	0xFE8
  2349                           postdec1	equ	0xFE5
  2350                           fsr1l	equ	0xFE1
  2351                           indf2	equ	0xFDF
  2352                           postinc2	equ	0xFDE
  2353                           fsr2h	equ	0xFDA
  2354                           fsr2l	equ	0xFD9
  2355                           status	equ	0xFD8
  2356                           
  2357 ;; *************** function _GroupFlashMemory *****************
  2358 ;; Defined at:
  2359 ;;		line 112 in file "MessageFunctions.c"
  2360 ;; Parameters:    Size  Location     Type
  2361 ;;  request         1    wreg     enum E12
  2362 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2363 ;; Auto vars:     Size  Location     Type
  2364 ;;  request         1    2[BANK1 ] enum E12
  2365 ;; Return value:  Size  Location     Type
  2366 ;;                  1    wreg      void 
  2367 ;; Registers used:
  2368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2369 ;; Tracked objects:
  2370 ;;		On entry : 0/0
  2371 ;;		On exit  : 0/0
  2372 ;;		Unchanged: 0/0
  2373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2374 ;;      Params:         0       0       2       0       0       0       0
  2375 ;;      Locals:         0       0       1       0       0       0       0
  2376 ;;      Temps:          0       1       0       0       0       0       0
  2377 ;;      Totals:         0       1       3       0       0       0       0
  2378 ;;Total ram usage:        4 bytes
  2379 ;; Hardware stack levels used:    1
  2380 ;; Hardware stack levels required when called:    7
  2381 ;; This function calls:
  2382 ;;		_FlashEreaseMem
  2383 ;;		_FlashReadCondition
  2384 ;;		_FlashReadUart
  2385 ;; This function is called by:
  2386 ;;		_readUartMessage
  2387 ;; This function uses a non-reentrant model
  2388 ;;
  2389                           
  2390                           	psect	text4
  2391  002E1E                     __ptext4:
  2392                           	opt stack 0
  2393  002E1E                     _GroupFlashMemory:
  2394                           	opt stack 22
  2395                           
  2396                           ;incstack = 0
  2397                           ;GroupFlashMemory@request stored from wreg
  2398  002E1E  0101               	movlb	1	; () banked
  2399  002E20  6FC4               	movwf	GroupFlashMemory@request& (0+255),b
  2400                           
  2401                           ;MessageFunctions.c: 114: switch (request)
  2402  002E22  D013               	goto	l1187
  2403  002E24                     
  2404                           ;MessageFunctions.c: 117: FlashEreaseMem();
  2405  002E24  EC4E  F016         	call	_FlashEreaseMem	;wreg free
  2406                           
  2407                           ;MessageFunctions.c: 118: break;
  2408  002E28  0012               	return	
  2409  002E2A                     
  2410                           ;MessageFunctions.c: 121: FlashReadCondition();
  2411  002E2A  EC0E  F00C         	call	_FlashReadCondition	;wreg free
  2412                           
  2413                           ;MessageFunctions.c: 122: break;
  2414  002E2E  0012               	return	
  2415  002E30                     
  2416                           ;MessageFunctions.c: 125: FlashReadUart((int)data[0]);
  2417  002E30  C1C2  FFD9         	movff	GroupFlashMemory@data,fsr2l
  2418  002E34  C1C3  FFDA         	movff	GroupFlashMemory@data+1,fsr2h
  2419  002E38  50DF               	movf	indf2,w,c
  2420  002E3A  0100               	movlb	0	; () banked
  2421  002E3C  6FBF               	movwf	??_GroupFlashMemory& (0+255),b
  2422  002E3E  51BF               	movf	??_GroupFlashMemory& (0+255),w,b
  2423  002E40  6E24               	movwf	FlashReadUart@numOfSampleToRead,c
  2424  002E42  6A25               	clrf	FlashReadUart@numOfSampleToRead+1,c
  2425  002E44  EC3B  F003         	call	_FlashReadUart	;wreg free
  2426                           
  2427                           ;MessageFunctions.c: 130: }
  2428                           
  2429                           ;MessageFunctions.c: 129: break;
  2430                           
  2431                           ;MessageFunctions.c: 128: default:
  2432                           
  2433                           ;MessageFunctions.c: 126: break;
  2434  002E48  0012               	return	
  2435  002E4A                     l1187:
  2436  002E4A  0101               	movlb	1	; () banked
  2437  002E4C  51C4               	movf	GroupFlashMemory@request& (0+255),w,b
  2438                           
  2439                           ; Switch size 1, requested type "space"
  2440                           ; Number of cases is 3, Range of values is 81 to 83
  2441                           ; switch strategies available:
  2442                           ; Name         Instructions Cycles
  2443                           ; simple_byte           10     6 (average)
  2444                           ;	Chosen strategy is simple_byte
  2445  002E4E  0A51               	xorlw	81	; case 81
  2446  002E50  B4D8               	btfsc	status,2,c
  2447  002E52  D7E8               	goto	l1188
  2448  002E54  0A03               	xorlw	3	; case 82
  2449  002E56  B4D8               	btfsc	status,2,c
  2450  002E58  D7E8               	goto	l1190
  2451  002E5A  0A01               	xorlw	1	; case 83
  2452  002E5C  A4D8               	btfss	status,2,c
  2453  002E5E  0012               	return	
  2454  002E60  D7E7               	goto	l1191
  2455  002E62                     __end_of_GroupFlashMemory:
  2456                           	opt stack 0
  2457                           tosu	equ	0xFFF
  2458                           tosh	equ	0xFFE
  2459                           tosl	equ	0xFFD
  2460                           pclath	equ	0xFFA
  2461                           tblptru	equ	0xFF8
  2462                           tblptrh	equ	0xFF7
  2463                           tblptrl	equ	0xFF6
  2464                           tablat	equ	0xFF5
  2465                           postinc0	equ	0xFEE
  2466                           wreg	equ	0xFE8
  2467                           postdec1	equ	0xFE5
  2468                           fsr1l	equ	0xFE1
  2469                           indf2	equ	0xFDF
  2470                           postinc2	equ	0xFDE
  2471                           fsr2h	equ	0xFDA
  2472                           fsr2l	equ	0xFD9
  2473                           status	equ	0xFD8
  2474                           
  2475 ;; *************** function _GroupAdc *****************
  2476 ;; Defined at:
  2477 ;;		line 67 in file "MessageFunctions.c"
  2478 ;; Parameters:    Size  Location     Type
  2479 ;;  request         1    wreg     enum E12
  2480 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2481 ;; Auto vars:     Size  Location     Type
  2482 ;;  request         1   95[BANK0 ] enum E12
  2483 ;; Return value:  Size  Location     Type
  2484 ;;                  1    wreg      void 
  2485 ;; Registers used:
  2486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2487 ;; Tracked objects:
  2488 ;;		On entry : 0/0
  2489 ;;		On exit  : 0/0
  2490 ;;		Unchanged: 0/0
  2491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2492 ;;      Params:         0       0       2       0       0       0       0
  2493 ;;      Locals:         0       1       0       0       0       0       0
  2494 ;;      Temps:          0       0       0       0       0       0       0
  2495 ;;      Totals:         0       1       2       0       0       0       0
  2496 ;;Total ram usage:        3 bytes
  2497 ;; Hardware stack levels used:    1
  2498 ;; Hardware stack levels required when called:    7
  2499 ;; This function calls:
  2500 ;;		_SetAdcOperationMode
  2501 ;;		_SetChannelMode
  2502 ;;		_SetConversionResultFormat
  2503 ;; This function is called by:
  2504 ;;		_readUartMessage
  2505 ;; This function uses a non-reentrant model
  2506 ;;
  2507                           
  2508                           	psect	text5
  2509  002D8E                     __ptext5:
  2510                           	opt stack 0
  2511  002D8E                     _GroupAdc:
  2512                           	opt stack 22
  2513                           
  2514                           ;incstack = 0
  2515                           ;GroupAdc@request stored from wreg
  2516  002D8E  0100               	movlb	0	; () banked
  2517  002D90  6FBF               	movwf	GroupAdc@request& (0+255),b
  2518                           
  2519                           ;MessageFunctions.c: 69: switch (request)
  2520  002D92  D015               	goto	l1168
  2521  002D94                     
  2522                           ;MessageFunctions.c: 72: SetAdcOperationMode(data);
  2523  002D94  C1C2  F02C         	movff	GroupAdc@data,SetAdcOperationMode@data
  2524  002D98  C1C3  F02D         	movff	GroupAdc@data+1,SetAdcOperationMode@data+1
  2525  002D9C  EC74  F01B         	call	_SetAdcOperationMode	;wreg free
  2526                           
  2527                           ;MessageFunctions.c: 73: break;
  2528  002DA0  0012               	return	
  2529  002DA2                     
  2530                           ;MessageFunctions.c: 76: SetChannelMode(data);
  2531  002DA2  C1C2  F02C         	movff	GroupAdc@data,SetChannelMode@data
  2532  002DA6  C1C3  F02D         	movff	GroupAdc@data+1,SetChannelMode@data+1
  2533  002DAA  EC89  F019         	call	_SetChannelMode	;wreg free
  2534                           
  2535                           ;MessageFunctions.c: 77: break;
  2536  002DAE  0012               	return	
  2537  002DB0                     
  2538                           ;MessageFunctions.c: 80: SetConversionResultFormat(data);
  2539  002DB0  C1C2  F02C         	movff	GroupAdc@data,SetConversionResultFormat@data
  2540  002DB4  C1C3  F02D         	movff	GroupAdc@data+1,SetConversionResultFormat@data+1
  2541  002DB8  EC6E  F01B         	call	_SetConversionResultFormat	;wreg free
  2542                           
  2543                           ;MessageFunctions.c: 85: }
  2544                           
  2545                           ;MessageFunctions.c: 84: break;
  2546                           
  2547                           ;MessageFunctions.c: 83: default:
  2548                           
  2549                           ;MessageFunctions.c: 81: break;
  2550  002DBC  0012               	return	
  2551  002DBE                     l1168:
  2552  002DBE  0100               	movlb	0	; () banked
  2553  002DC0  51BF               	movf	GroupAdc@request& (0+255),w,b
  2554                           
  2555                           ; Switch size 1, requested type "space"
  2556                           ; Number of cases is 3, Range of values is 49 to 51
  2557                           ; switch strategies available:
  2558                           ; Name         Instructions Cycles
  2559                           ; simple_byte           10     6 (average)
  2560                           ;	Chosen strategy is simple_byte
  2561  002DC2  0A31               	xorlw	49	; case 49
  2562  002DC4  B4D8               	btfsc	status,2,c
  2563  002DC6  D7E6               	goto	l1169
  2564  002DC8  0A03               	xorlw	3	; case 50
  2565  002DCA  B4D8               	btfsc	status,2,c
  2566  002DCC  D7EA               	goto	l1171
  2567  002DCE  0A01               	xorlw	1	; case 51
  2568  002DD0  A4D8               	btfss	status,2,c
  2569  002DD2  0012               	return	
  2570  002DD4  D7ED               	goto	l1172
  2571  002DD6                     __end_of_GroupAdc:
  2572                           	opt stack 0
  2573                           tosu	equ	0xFFF
  2574                           tosh	equ	0xFFE
  2575                           tosl	equ	0xFFD
  2576                           pclath	equ	0xFFA
  2577                           tblptru	equ	0xFF8
  2578                           tblptrh	equ	0xFF7
  2579                           tblptrl	equ	0xFF6
  2580                           tablat	equ	0xFF5
  2581                           postinc0	equ	0xFEE
  2582                           wreg	equ	0xFE8
  2583                           postdec1	equ	0xFE5
  2584                           fsr1l	equ	0xFE1
  2585                           indf2	equ	0xFDF
  2586                           postinc2	equ	0xFDE
  2587                           fsr2h	equ	0xFDA
  2588                           fsr2l	equ	0xFD9
  2589                           status	equ	0xFD8
  2590                           
  2591 ;; *************** function _GroupStatusAndVersion *****************
  2592 ;; Defined at:
  2593 ;;		line 38 in file "MessageFunctions.c"
  2594 ;; Parameters:    Size  Location     Type
  2595 ;;  request         1    wreg     enum E12
  2596 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2597 ;; Auto vars:     Size  Location     Type
  2598 ;;  request         1   95[BANK0 ] enum E12
  2599 ;; Return value:  Size  Location     Type
  2600 ;;                  1    wreg      void 
  2601 ;; Registers used:
  2602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2603 ;; Tracked objects:
  2604 ;;		On entry : 0/0
  2605 ;;		On exit  : 0/0
  2606 ;;		Unchanged: 0/0
  2607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2608 ;;      Params:         0       0       2       0       0       0       0
  2609 ;;      Locals:         0       1       0       0       0       0       0
  2610 ;;      Temps:          0       0       0       0       0       0       0
  2611 ;;      Totals:         0       1       2       0       0       0       0
  2612 ;;Total ram usage:        3 bytes
  2613 ;; Hardware stack levels used:    1
  2614 ;; Hardware stack levels required when called:    7
  2615 ;; This function calls:
  2616 ;;		_GetCpldFwVersion
  2617 ;;		_GetMcuFwVersion
  2618 ;;		_GetMcuRunTime
  2619 ;;		_SetCpldFwVersion
  2620 ;;		_SetMcuFwVersion
  2621 ;; This function is called by:
  2622 ;;		_readUartMessage
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626                           	psect	text6
  2627  002B40                     __ptext6:
  2628                           	opt stack 0
  2629  002B40                     _GroupStatusAndVersion:
  2630                           	opt stack 22
  2631                           
  2632                           ;incstack = 0
  2633                           ;GroupStatusAndVersion@request stored from wreg
  2634  002B40  0100               	movlb	0	; () banked
  2635  002B42  6FBF               	movwf	GroupStatusAndVersion@request& (0+255),b
  2636                           
  2637                           ;MessageFunctions.c: 40: switch (request)
  2638  002B44  D017               	goto	l1157
  2639  002B46                     
  2640                           ;MessageFunctions.c: 43: GetMcuFwVersion();
  2641  002B46  EC3B  F013         	call	_GetMcuFwVersion	;wreg free
  2642                           
  2643                           ;MessageFunctions.c: 44: break;
  2644  002B4A  0012               	return	
  2645  002B4C                     
  2646                           ;MessageFunctions.c: 47: SetMcuFwVersion(data);
  2647  002B4C  C1C2  F02C         	movff	GroupStatusAndVersion@data,SetMcuFwVersion@data
  2648  002B50  C1C3  F02D         	movff	GroupStatusAndVersion@data+1,SetMcuFwVersion@data+1
  2649  002B54  ECE9  F018         	call	_SetMcuFwVersion	;wreg free
  2650                           
  2651                           ;MessageFunctions.c: 48: break;
  2652  002B58  0012               	return	
  2653  002B5A                     
  2654                           ;MessageFunctions.c: 51: GetCpldFwVersion();
  2655  002B5A  EC22  F012         	call	_GetCpldFwVersion	;wreg free
  2656                           
  2657                           ;MessageFunctions.c: 52: break;
  2658  002B5E  0012               	return	
  2659  002B60                     
  2660                           ;MessageFunctions.c: 55: SetCpldFwVersion(data);
  2661  002B60  C1C2  F02C         	movff	GroupStatusAndVersion@data,SetCpldFwVersion@data
  2662  002B64  C1C3  F02D         	movff	GroupStatusAndVersion@data+1,SetCpldFwVersion@data+1
  2663  002B68  EC96  F017         	call	_SetCpldFwVersion	;wreg free
  2664                           
  2665                           ;MessageFunctions.c: 56: break;
  2666  002B6C  0012               	return	
  2667  002B6E                     
  2668                           ;MessageFunctions.c: 59: GetMcuRunTime();
  2669  002B6E  EC7C  F00E         	call	_GetMcuRunTime	;wreg free
  2670                           
  2671                           ;MessageFunctions.c: 64: }
  2672                           
  2673                           ;MessageFunctions.c: 63: break;
  2674                           
  2675                           ;MessageFunctions.c: 62: default:
  2676                           
  2677                           ;MessageFunctions.c: 60: break;
  2678  002B72  0012               	return	
  2679  002B74                     l1157:
  2680  002B74  0100               	movlb	0	; () banked
  2681  002B76  51BF               	movf	GroupStatusAndVersion@request& (0+255),w,b
  2682                           
  2683                           ; Switch size 1, requested type "space"
  2684                           ; Number of cases is 5, Range of values is 33 to 37
  2685                           ; switch strategies available:
  2686                           ; Name         Instructions Cycles
  2687                           ; simple_byte           16     9 (average)
  2688                           ;	Chosen strategy is simple_byte
  2689  002B78  0A21               	xorlw	33	; case 33
  2690  002B7A  B4D8               	btfsc	status,2,c
  2691  002B7C  D7F8               	goto	l1163
  2692  002B7E  0A03               	xorlw	3	; case 34
  2693  002B80  B4D8               	btfsc	status,2,c
  2694  002B82  D7E1               	goto	l1158
  2695  002B84  0A01               	xorlw	1	; case 35
  2696  002B86  B4D8               	btfsc	status,2,c
  2697  002B88  D7E8               	goto	l1161
  2698  002B8A  0A07               	xorlw	7	; case 36
  2699  002B8C  B4D8               	btfsc	status,2,c
  2700  002B8E  D7DE               	goto	l1160
  2701  002B90  0A01               	xorlw	1	; case 37
  2702  002B92  A4D8               	btfss	status,2,c
  2703  002B94  0012               	return	
  2704  002B96  D7E4               	goto	l1162
  2705  002B98                     __end_of_GroupStatusAndVersion:
  2706                           	opt stack 0
  2707                           tosu	equ	0xFFF
  2708                           tosh	equ	0xFFE
  2709                           tosl	equ	0xFFD
  2710                           pclath	equ	0xFFA
  2711                           tblptru	equ	0xFF8
  2712                           tblptrh	equ	0xFF7
  2713                           tblptrl	equ	0xFF6
  2714                           tablat	equ	0xFF5
  2715                           postinc0	equ	0xFEE
  2716                           wreg	equ	0xFE8
  2717                           postdec1	equ	0xFE5
  2718                           fsr1l	equ	0xFE1
  2719                           indf2	equ	0xFDF
  2720                           postinc2	equ	0xFDE
  2721                           fsr2h	equ	0xFDA
  2722                           fsr2l	equ	0xFD9
  2723                           status	equ	0xFD8
  2724                           
  2725 ;; *************** function _GroupControlMcu *****************
  2726 ;; Defined at:
  2727 ;;		line 11 in file "MessageFunctions.c"
  2728 ;; Parameters:    Size  Location     Type
  2729 ;;  request         1    wreg     enum E12
  2730 ;;  data            3    0[BANK1 ] PTR unsigned char 
  2731 ;; Auto vars:     Size  Location     Type
  2732 ;;  request         1   95[BANK0 ] enum E12
  2733 ;; Return value:  Size  Location     Type
  2734 ;;                  1    wreg      void 
  2735 ;; Registers used:
  2736 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2737 ;; Tracked objects:
  2738 ;;		On entry : 0/0
  2739 ;;		On exit  : 0/0
  2740 ;;		Unchanged: 0/0
  2741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2742 ;;      Params:         0       0       2       0       0       0       0
  2743 ;;      Locals:         0       1       0       0       0       0       0
  2744 ;;      Temps:          0       0       0       0       0       0       0
  2745 ;;      Totals:         0       1       2       0       0       0       0
  2746 ;;Total ram usage:        3 bytes
  2747 ;; Hardware stack levels used:    1
  2748 ;; Hardware stack levels required when called:    7
  2749 ;; This function calls:
  2750 ;;		_ResetCpld
  2751 ;;		_ResetMcu
  2752 ;;		_testLeds
  2753 ;; This function is called by:
  2754 ;;		_readUartMessage
  2755 ;; This function uses a non-reentrant model
  2756 ;;
  2757                           
  2758                           	psect	text7
  2759  003072                     __ptext7:
  2760                           	opt stack 0
  2761  003072                     _GroupControlMcu:
  2762                           	opt stack 22
  2763                           
  2764                           ;incstack = 0
  2765                           ;GroupControlMcu@request stored from wreg
  2766  003072  0100               	movlb	0	; () banked
  2767  003074  6FBF               	movwf	GroupControlMcu@request& (0+255),b
  2768                           
  2769                           ;MessageFunctions.c: 13: switch (request)
  2770  003076  D009               	goto	l1146
  2771  003078                     
  2772                           ;MessageFunctions.c: 16: testLeds();
  2773  003078  ECF2  F013         	call	_testLeds	;wreg free
  2774                           
  2775                           ;MessageFunctions.c: 17: break;
  2776  00307C  0012               	return	
  2777  00307E                     
  2778                           ;MessageFunctions.c: 20: ResetMcu();
  2779  00307E  EC4C  F01B         	call	_ResetMcu	;wreg free
  2780                           
  2781                           ;MessageFunctions.c: 21: break;
  2782  003082  0012               	return	
  2783  003084                     
  2784                           ;MessageFunctions.c: 24: ResetCpld();
  2785  003084  EC68  F01B         	call	_ResetCpld	;wreg free
  2786                           
  2787                           ;MessageFunctions.c: 35: }
  2788                           
  2789                           ;MessageFunctions.c: 34: break;
  2790                           
  2791                           ;MessageFunctions.c: 33: default:
  2792                           
  2793                           ;MessageFunctions.c: 31: break;
  2794                           
  2795                           ;MessageFunctions.c: 30: case CONTROL_PA2_SET:
  2796                           
  2797                           ;MessageFunctions.c: 28: break;
  2798                           
  2799                           ;MessageFunctions.c: 27: case CONTROL_PA1_SET:
  2800                           
  2801                           ;MessageFunctions.c: 25: break;
  2802  003088  0012               	return	
  2803  00308A                     l1146:
  2804  00308A  0100               	movlb	0	; () banked
  2805  00308C  51BF               	movf	GroupControlMcu@request& (0+255),w,b
  2806                           
  2807                           ; Switch size 1, requested type "space"
  2808                           ; Number of cases is 5, Range of values is 17 to 21
  2809                           ; switch strategies available:
  2810                           ; Name         Instructions Cycles
  2811                           ; simple_byte           16     9 (average)
  2812                           ;	Chosen strategy is simple_byte
  2813  00308E  0A11               	xorlw	17	; case 17
  2814  003090  B4D8               	btfsc	status,2,c
  2815  003092  D7F5               	goto	l1149
  2816  003094  0A03               	xorlw	3	; case 18
  2817  003096  B4D8               	btfsc	status,2,c
  2818  003098  D7F5               	goto	l1150
  2819  00309A  0A01               	xorlw	1	; case 19
  2820  00309C  B4D8               	btfsc	status,2,c
  2821  00309E  0012               	return	
  2822  0030A0  0A07               	xorlw	7	; case 20
  2823  0030A2  B4D8               	btfsc	status,2,c
  2824  0030A4  0012               	return	
  2825  0030A6  0A01               	xorlw	1	; case 21
  2826  0030A8  A4D8               	btfss	status,2,c
  2827  0030AA  0012               	return	
  2828  0030AC  D7E5               	goto	l1147
  2829  0030AE                     __end_of_GroupControlMcu:
  2830                           	opt stack 0
  2831                           tosu	equ	0xFFF
  2832                           tosh	equ	0xFFE
  2833                           tosl	equ	0xFFD
  2834                           pclath	equ	0xFFA
  2835                           tblptru	equ	0xFF8
  2836                           tblptrh	equ	0xFF7
  2837                           tblptrl	equ	0xFF6
  2838                           tablat	equ	0xFF5
  2839                           postinc0	equ	0xFEE
  2840                           wreg	equ	0xFE8
  2841                           postdec1	equ	0xFE5
  2842                           fsr1l	equ	0xFE1
  2843                           indf2	equ	0xFDF
  2844                           postinc2	equ	0xFDE
  2845                           fsr2h	equ	0xFDA
  2846                           fsr2l	equ	0xFD9
  2847                           status	equ	0xFD8
  2848                           
  2849 ;; *************** function _GroupSynthesizers *****************
  2850 ;; Defined at:
  2851 ;;		line 87 in file "MessageFunctions.c"
  2852 ;; Parameters:    Size  Location     Type
  2853 ;;  request         1    wreg     enum E12
  2854 ;;  data            2    0[BANK1 ] PTR unsigned char 
  2855 ;; Auto vars:     Size  Location     Type
  2856 ;;  request         1   95[BANK0 ] enum E12
  2857 ;; Return value:  Size  Location     Type
  2858 ;;                  1    wreg      void 
  2859 ;; Registers used:
  2860 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2861 ;; Tracked objects:
  2862 ;;		On entry : 0/0
  2863 ;;		On exit  : 0/0
  2864 ;;		Unchanged: 0/0
  2865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2866 ;;      Params:         0       0       2       0       0       0       0
  2867 ;;      Locals:         0       1       0       0       0       0       0
  2868 ;;      Temps:          0       0       0       0       0       0       0
  2869 ;;      Totals:         0       1       2       0       0       0       0
  2870 ;;Total ram usage:        3 bytes
  2871 ;; Hardware stack levels used:    1
  2872 ;; Hardware stack levels required when called:    8
  2873 ;; This function calls:
  2874 ;;		_PLLUartInitialize
  2875 ;;		_UpdateRxFreq
  2876 ;;		_UpdateTxFreq
  2877 ;; This function is called by:
  2878 ;;		_readUartMessage
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881                           
  2882                           	psect	text8
  2883  0029D2                     __ptext8:
  2884                           	opt stack 0
  2885  0029D2                     _GroupSynthesizers:
  2886                           	opt stack 21
  2887                           
  2888                           ;incstack = 0
  2889                           ;GroupSynthesizers@request stored from wreg
  2890  0029D2  0100               	movlb	0	; () banked
  2891  0029D4  6FBF               	movwf	GroupSynthesizers@request& (0+255),b
  2892                           
  2893                           ;MessageFunctions.c: 89: switch (request)
  2894  0029D6  D01C               	goto	l1177
  2895  0029D8                     
  2896                           ;MessageFunctions.c: 92: PLLUartInitialize(data);
  2897  0029D8  C1C2  F018         	movff	GroupSynthesizers@data,PLLUartInitialize@data
  2898  0029DC  C1C3  F019         	movff	GroupSynthesizers@data+1,PLLUartInitialize@data+1
  2899  0029E0  EC9F  F01B         	call	_PLLUartInitialize	;wreg free
  2900                           
  2901                           ;MessageFunctions.c: 93: break;
  2902  0029E4  0012               	return	
  2903  0029E6                     
  2904                           ;MessageFunctions.c: 96: PLLUartInitialize(data);
  2905  0029E6  C1C2  F018         	movff	GroupSynthesizers@data,PLLUartInitialize@data
  2906  0029EA  C1C3  F019         	movff	GroupSynthesizers@data+1,PLLUartInitialize@data+1
  2907  0029EE  EC9F  F01B         	call	_PLLUartInitialize	;wreg free
  2908                           
  2909                           ;MessageFunctions.c: 97: break;
  2910  0029F2  0012               	return	
  2911  0029F4                     
  2912                           ;MessageFunctions.c: 100: UpdateTxFreq(data);
  2913  0029F4  C1C2  F02E         	movff	GroupSynthesizers@data,UpdateTxFreq@data
  2914  0029F8  C1C3  F02F         	movff	GroupSynthesizers@data+1,UpdateTxFreq@data+1
  2915  0029FC  EC75  F017         	call	_UpdateTxFreq	;wreg free
  2916                           
  2917                           ;MessageFunctions.c: 101: break;
  2918  002A00  0012               	return	
  2919  002A02                     
  2920                           ;MessageFunctions.c: 104: UpdateRxFreq(data);
  2921  002A02  C1C2  F02C         	movff	GroupSynthesizers@data,UpdateRxFreq@data
  2922  002A06  C1C3  F02D         	movff	GroupSynthesizers@data+1,UpdateRxFreq@data+1
  2923  002A0A  EC8F  F01A         	call	_UpdateRxFreq	;wreg free
  2924                           
  2925                           ;MessageFunctions.c: 109: }
  2926                           
  2927                           ;MessageFunctions.c: 108: break;
  2928                           
  2929                           ;MessageFunctions.c: 107: default:
  2930                           
  2931                           ;MessageFunctions.c: 105: break;
  2932  002A0E  0012               	return	
  2933  002A10                     l1177:
  2934  002A10  0100               	movlb	0	; () banked
  2935  002A12  51BF               	movf	GroupSynthesizers@request& (0+255),w,b
  2936                           
  2937                           ; Switch size 1, requested type "space"
  2938                           ; Number of cases is 4, Range of values is 64 to 67
  2939                           ; switch strategies available:
  2940                           ; Name         Instructions Cycles
  2941                           ; simple_byte           13     7 (average)
  2942                           ;	Chosen strategy is simple_byte
  2943  002A14  0A40               	xorlw	64	; case 64
  2944  002A16  B4D8               	btfsc	status,2,c
  2945  002A18  D7DF               	goto	l1178
  2946  002A1A  0A01               	xorlw	1	; case 65
  2947  002A1C  B4D8               	btfsc	status,2,c
  2948  002A1E  D7E3               	goto	l1180
  2949  002A20  0A03               	xorlw	3	; case 66
  2950  002A22  B4D8               	btfsc	status,2,c
  2951  002A24  D7E7               	goto	l1181
  2952  002A26  0A01               	xorlw	1	; case 67
  2953  002A28  A4D8               	btfss	status,2,c
  2954  002A2A  0012               	return	
  2955  002A2C  D7EA               	goto	l1182
  2956  002A2E                     __end_of_GroupSynthesizers:
  2957                           	opt stack 0
  2958                           tosu	equ	0xFFF
  2959                           tosh	equ	0xFFE
  2960                           tosl	equ	0xFFD
  2961                           pclath	equ	0xFFA
  2962                           tblptru	equ	0xFF8
  2963                           tblptrh	equ	0xFF7
  2964                           tblptrl	equ	0xFF6
  2965                           tablat	equ	0xFF5
  2966                           postinc0	equ	0xFEE
  2967                           wreg	equ	0xFE8
  2968                           postdec1	equ	0xFE5
  2969                           fsr1l	equ	0xFE1
  2970                           indf2	equ	0xFDF
  2971                           postinc2	equ	0xFDE
  2972                           fsr2h	equ	0xFDA
  2973                           fsr2l	equ	0xFD9
  2974                           status	equ	0xFD8
  2975                           
  2976 ;; *************** function _UpdateTxFreq *****************
  2977 ;; Defined at:
  2978 ;;		line 60 in file "SyntApp.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;  data            2   45[COMRAM] PTR unsigned char 
  2981 ;; Auto vars:     Size  Location     Type
  2982 ;;  regData         4   21[BANK0 ] unsigned long 
  2983 ;; Return value:  Size  Location     Type
  2984 ;;                  1    wreg      void 
  2985 ;; Registers used:
  2986 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2987 ;; Tracked objects:
  2988 ;;		On entry : 0/0
  2989 ;;		On exit  : 0/0
  2990 ;;		Unchanged: 0/0
  2991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2992 ;;      Params:         2       0       0       0       0       0       0
  2993 ;;      Locals:         0       4       0       0       0       0       0
  2994 ;;      Temps:          0       0       0       0       0       0       0
  2995 ;;      Totals:         2       4       0       0       0       0       0
  2996 ;;Total ram usage:        6 bytes
  2997 ;; Hardware stack levels used:    1
  2998 ;; Hardware stack levels required when called:    7
  2999 ;; This function calls:
  3000 ;;		_GetIntFromUartData
  3001 ;;		_SWSPI_send_word
  3002 ;;		_SendAckMessage
  3003 ;; This function is called by:
  3004 ;;		_GroupSynthesizers
  3005 ;; This function uses a non-reentrant model
  3006 ;;
  3007                           
  3008                           	psect	text9
  3009  002EEA                     __ptext9:
  3010                           	opt stack 0
  3011  002EEA                     _UpdateTxFreq:
  3012                           	opt stack 21
  3013                           
  3014                           ;SyntApp.c: 62: uint32_t regData = GetIntFromUartData(data);
  3015                           
  3016                           ;incstack = 0
  3017  002EEA  C02E  F066         	movff	UpdateTxFreq@data,GetIntFromUartData@data
  3018  002EEE  C02F  F067         	movff	UpdateTxFreq@data+1,GetIntFromUartData@data+1
  3019  002EF2  EC8C  F011         	call	_GetIntFromUartData	;wreg free
  3020  002EF6  C066  F075         	movff	?_GetIntFromUartData,UpdateTxFreq@regData
  3021  002EFA  C067  F076         	movff	?_GetIntFromUartData+1,UpdateTxFreq@regData+1
  3022  002EFE  C068  F077         	movff	?_GetIntFromUartData+2,UpdateTxFreq@regData+2
  3023  002F02  C069  F078         	movff	?_GetIntFromUartData+3,UpdateTxFreq@regData+3
  3024                           
  3025                           ;SyntApp.c: 63: SWSPI_send_word(SYNTH_TX, regData, 3);
  3026  002F06  C075  F021         	movff	UpdateTxFreq@regData,SWSPI_send_word@data
  3027  002F0A  C076  F022         	movff	UpdateTxFreq@regData+1,SWSPI_send_word@data+1
  3028  002F0E  C077  F023         	movff	UpdateTxFreq@regData+2,SWSPI_send_word@data+2
  3029  002F12  C078  F024         	movff	UpdateTxFreq@regData+3,SWSPI_send_word@data+3
  3030  002F16  0E03               	movlw	3
  3031  002F18  6E25               	movwf	SWSPI_send_word@dataSize,c
  3032  002F1A  0E00               	movlw	0
  3033  002F1C  EC39  F011         	call	_SWSPI_send_word
  3034                           
  3035                           ;SyntApp.c: 67: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_SET);
  3036  002F20  0E42               	movlw	66
  3037  002F22  6E24               	movwf	SendAckMessage@inRequest,c
  3038  002F24  0E04               	movlw	4
  3039  002F26  EC77  F016         	call	_SendAckMessage
  3040  002F2A  0012               	return		;funcret
  3041  002F2C                     __end_of_UpdateTxFreq:
  3042                           	opt stack 0
  3043                           tosu	equ	0xFFF
  3044                           tosh	equ	0xFFE
  3045                           tosl	equ	0xFFD
  3046                           pclath	equ	0xFFA
  3047                           tblptru	equ	0xFF8
  3048                           tblptrh	equ	0xFF7
  3049                           tblptrl	equ	0xFF6
  3050                           tablat	equ	0xFF5
  3051                           postinc0	equ	0xFEE
  3052                           wreg	equ	0xFE8
  3053                           postdec1	equ	0xFE5
  3054                           fsr1l	equ	0xFE1
  3055                           indf2	equ	0xFDF
  3056                           postinc2	equ	0xFDE
  3057                           fsr2h	equ	0xFDA
  3058                           fsr2l	equ	0xFD9
  3059                           status	equ	0xFD8
  3060                           
  3061 ;; *************** function _UpdateRxFreq *****************
  3062 ;; Defined at:
  3063 ;;		line 75 in file "SyntApp.c"
  3064 ;; Parameters:    Size  Location     Type
  3065 ;;  data            2   43[COMRAM] PTR unsigned char 
  3066 ;; Auto vars:     Size  Location     Type
  3067 ;;  send            4    0[BANK0 ] unsigned long 
  3068 ;; Return value:  Size  Location     Type
  3069 ;;                  1    wreg      void 
  3070 ;; Registers used:
  3071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3072 ;; Tracked objects:
  3073 ;;		On entry : 0/0
  3074 ;;		On exit  : 0/0
  3075 ;;		Unchanged: 0/0
  3076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3077 ;;      Params:         2       0       0       0       0       0       0
  3078 ;;      Locals:         0       4       0       0       0       0       0
  3079 ;;      Temps:          0       0       0       0       0       0       0
  3080 ;;      Totals:         2       4       0       0       0       0       0
  3081 ;;Total ram usage:        6 bytes
  3082 ;; Hardware stack levels used:    1
  3083 ;; Hardware stack levels required when called:    6
  3084 ;; This function calls:
  3085 ;;		_SendAckMessage
  3086 ;; This function is called by:
  3087 ;;		_GroupSynthesizers
  3088 ;; This function uses a non-reentrant model
  3089 ;;
  3090                           
  3091                           	psect	text10
  3092  00351E                     __ptext10:
  3093                           	opt stack 0
  3094  00351E                     _UpdateRxFreq:
  3095                           	opt stack 22
  3096                           
  3097                           ;SyntApp.c: 77: uint32_t send = 0x87654321;
  3098                           
  3099                           ;incstack = 0
  3100  00351E  0E21               	movlw	33
  3101  003520  0100               	movlb	0	; () banked
  3102  003522  6F60               	movwf	UpdateRxFreq@send& (0+255),b
  3103  003524  0E43               	movlw	67
  3104  003526  6F61               	movwf	(UpdateRxFreq@send+1)& (0+255),b
  3105  003528  0E65               	movlw	101
  3106  00352A  6F62               	movwf	(UpdateRxFreq@send+2)& (0+255),b
  3107  00352C  0E87               	movlw	135
  3108  00352E  6F63               	movwf	(UpdateRxFreq@send+3)& (0+255),b
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;SyntApp.c: 80: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_SET);
  3112  003530  0E43               	movlw	67
  3113  003532  6E24               	movwf	SendAckMessage@inRequest,c
  3114  003534  0E04               	movlw	4
  3115  003536  EC77  F016         	call	_SendAckMessage
  3116  00353A  0012               	return		;funcret
  3117  00353C                     __end_of_UpdateRxFreq:
  3118                           	opt stack 0
  3119                           tosu	equ	0xFFF
  3120                           tosh	equ	0xFFE
  3121                           tosl	equ	0xFFD
  3122                           pclath	equ	0xFFA
  3123                           tblptru	equ	0xFF8
  3124                           tblptrh	equ	0xFF7
  3125                           tblptrl	equ	0xFF6
  3126                           tablat	equ	0xFF5
  3127                           postinc0	equ	0xFEE
  3128                           wreg	equ	0xFE8
  3129                           postdec1	equ	0xFE5
  3130                           fsr1l	equ	0xFE1
  3131                           indf2	equ	0xFDF
  3132                           postinc2	equ	0xFDE
  3133                           fsr2h	equ	0xFDA
  3134                           fsr2l	equ	0xFD9
  3135                           status	equ	0xFD8
  3136                           
  3137 ;; *************** function _PLLUartInitialize *****************
  3138 ;; Defined at:
  3139 ;;		line 51 in file "SyntApp.c"
  3140 ;; Parameters:    Size  Location     Type
  3141 ;;  data            2   23[COMRAM] PTR unsigned char 
  3142 ;; Auto vars:     Size  Location     Type
  3143 ;;		None
  3144 ;; Return value:  Size  Location     Type
  3145 ;;                  1    wreg      void 
  3146 ;; Registers used:
  3147 ;;		None
  3148 ;; Tracked objects:
  3149 ;;		On entry : 0/0
  3150 ;;		On exit  : 0/0
  3151 ;;		Unchanged: 0/0
  3152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3153 ;;      Params:         2       0       0       0       0       0       0
  3154 ;;      Locals:         0       0       0       0       0       0       0
  3155 ;;      Temps:          0       0       0       0       0       0       0
  3156 ;;      Totals:         2       0       0       0       0       0       0
  3157 ;;Total ram usage:        2 bytes
  3158 ;; Hardware stack levels used:    1
  3159 ;; Hardware stack levels required when called:    3
  3160 ;; This function calls:
  3161 ;;		Nothing
  3162 ;; This function is called by:
  3163 ;;		_GroupSynthesizers
  3164 ;; This function uses a non-reentrant model
  3165 ;;
  3166                           
  3167                           	psect	text11
  3168  00373E                     __ptext11:
  3169                           	opt stack 0
  3170  00373E                     _PLLUartInitialize:
  3171                           	opt stack 25
  3172                           
  3173                           ;incstack = 0
  3174  00373E  0012               	return		;funcret
  3175  003740                     __end_of_PLLUartInitialize:
  3176                           	opt stack 0
  3177                           tosu	equ	0xFFF
  3178                           tosh	equ	0xFFE
  3179                           tosl	equ	0xFFD
  3180                           pclath	equ	0xFFA
  3181                           tblptru	equ	0xFF8
  3182                           tblptrh	equ	0xFF7
  3183                           tblptrl	equ	0xFF6
  3184                           tablat	equ	0xFF5
  3185                           postinc0	equ	0xFEE
  3186                           wreg	equ	0xFE8
  3187                           postdec1	equ	0xFE5
  3188                           fsr1l	equ	0xFE1
  3189                           indf2	equ	0xFDF
  3190                           postinc2	equ	0xFDE
  3191                           fsr2h	equ	0xFDA
  3192                           fsr2l	equ	0xFD9
  3193                           status	equ	0xFD8
  3194                           
  3195 ;; *************** function _SetMcuFwVersion *****************
  3196 ;; Defined at:
  3197 ;;		line 15 in file "SystemStatus.c"
  3198 ;; Parameters:    Size  Location     Type
  3199 ;;  data            2   43[COMRAM] PTR unsigned char 
  3200 ;; Auto vars:     Size  Location     Type
  3201 ;;  idx             1   45[COMRAM] unsigned char 
  3202 ;; Return value:  Size  Location     Type
  3203 ;;                  1    wreg      void 
  3204 ;; Registers used:
  3205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3206 ;; Tracked objects:
  3207 ;;		On entry : 0/0
  3208 ;;		On exit  : 0/0
  3209 ;;		Unchanged: 0/0
  3210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3211 ;;      Params:         2       0       0       0       0       0       0
  3212 ;;      Locals:         1       0       0       0       0       0       0
  3213 ;;      Temps:          0       0       0       0       0       0       0
  3214 ;;      Totals:         3       0       0       0       0       0       0
  3215 ;;Total ram usage:        3 bytes
  3216 ;; Hardware stack levels used:    1
  3217 ;; Hardware stack levels required when called:    6
  3218 ;; This function calls:
  3219 ;;		_EepromWrite
  3220 ;;		_SendAckMessage
  3221 ;; This function is called by:
  3222 ;;		_GroupStatusAndVersion
  3223 ;; This function uses a non-reentrant model
  3224 ;;
  3225                           
  3226                           	psect	text12
  3227  0031D2                     __ptext12:
  3228                           	opt stack 0
  3229  0031D2                     _SetMcuFwVersion:
  3230                           	opt stack 22
  3231                           
  3232                           ;SystemStatus.c: 17: for(uint8_t idx = 0; idx < (0x4); idx++)
  3233                           
  3234                           ;incstack = 0
  3235  0031D2  0E00               	movlw	0
  3236  0031D4  6E2E               	movwf	SetMcuFwVersion@idx,c
  3237  0031D6                     l7360:
  3238  0031D6  0E03               	movlw	3
  3239  0031D8  642E               	cpfsgt	SetMcuFwVersion@idx,c
  3240  0031DA  D001               	goto	l1312
  3241  0031DC  D00F               	goto	u7220
  3242  0031DE                     l1312:
  3243                           
  3244                           ;SystemStatus.c: 18: {
  3245                           ;SystemStatus.c: 19: EepromWrite(idx, data[idx]);
  3246  0031DE  502E               	movf	SetMcuFwVersion@idx,w,c
  3247  0031E0  0D01               	mullw	1
  3248  0031E2  50F3               	movf	prodl,w,c
  3249  0031E4  242C               	addwf	SetMcuFwVersion@data,w,c
  3250  0031E6  6ED9               	movwf	fsr2l,c
  3251  0031E8  50F4               	movf	prodh,w,c
  3252  0031EA  202D               	addwfc	SetMcuFwVersion@data+1,w,c
  3253  0031EC  6EDA               	movwf	fsr2h,c
  3254  0031EE  50DF               	movf	indf2,w,c
  3255  0031F0  6E1B               	movwf	EepromWrite@data,c
  3256  0031F2  502E               	movf	SetMcuFwVersion@idx,w,c
  3257  0031F4  EC45  F01B         	call	_EepromWrite
  3258  0031F8  2A2E               	incf	SetMcuFwVersion@idx,f,c
  3259  0031FA  D7ED               	goto	l7360
  3260  0031FC                     u7220:
  3261                           
  3262                           ;SystemStatus.c: 20: }
  3263                           ;SystemStatus.c: 23: SendAckMessage((MSG_GROUPS)MCU_STATUS_VERSION_MSG, (MSG_REQUEST)STA
      +                          TUS_SET_MCU_FW_VERSION);
  3264  0031FC  0E24               	movlw	36
  3265  0031FE  6E24               	movwf	SendAckMessage@inRequest,c
  3266  003200  0E02               	movlw	2
  3267  003202  EC77  F016         	call	_SendAckMessage
  3268  003206  0012               	return		;funcret
  3269  003208                     __end_of_SetMcuFwVersion:
  3270                           	opt stack 0
  3271                           tosu	equ	0xFFF
  3272                           tosh	equ	0xFFE
  3273                           tosl	equ	0xFFD
  3274                           pclath	equ	0xFFA
  3275                           tblptru	equ	0xFF8
  3276                           tblptrh	equ	0xFF7
  3277                           tblptrl	equ	0xFF6
  3278                           tablat	equ	0xFF5
  3279                           prodh	equ	0xFF4
  3280                           prodl	equ	0xFF3
  3281                           postinc0	equ	0xFEE
  3282                           wreg	equ	0xFE8
  3283                           postdec1	equ	0xFE5
  3284                           fsr1l	equ	0xFE1
  3285                           indf2	equ	0xFDF
  3286                           postinc2	equ	0xFDE
  3287                           fsr2h	equ	0xFDA
  3288                           fsr2l	equ	0xFD9
  3289                           status	equ	0xFD8
  3290                           
  3291 ;; *************** function _SetCpldFwVersion *****************
  3292 ;; Defined at:
  3293 ;;		line 49 in file "SystemStatus.c"
  3294 ;; Parameters:    Size  Location     Type
  3295 ;;  data            2   43[COMRAM] PTR unsigned char 
  3296 ;; Auto vars:     Size  Location     Type
  3297 ;;  idx             2   45[COMRAM] int 
  3298 ;; Return value:  Size  Location     Type
  3299 ;;                  1    wreg      void 
  3300 ;; Registers used:
  3301 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3302 ;; Tracked objects:
  3303 ;;		On entry : 0/0
  3304 ;;		On exit  : 0/0
  3305 ;;		Unchanged: 0/0
  3306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3307 ;;      Params:         2       0       0       0       0       0       0
  3308 ;;      Locals:         2       0       0       0       0       0       0
  3309 ;;      Temps:          0       0       0       0       0       0       0
  3310 ;;      Totals:         4       0       0       0       0       0       0
  3311 ;;Total ram usage:        4 bytes
  3312 ;; Hardware stack levels used:    1
  3313 ;; Hardware stack levels required when called:    6
  3314 ;; This function calls:
  3315 ;;		_EepromWrite
  3316 ;;		_SendAckMessage
  3317 ;; This function is called by:
  3318 ;;		_GroupStatusAndVersion
  3319 ;; This function uses a non-reentrant model
  3320 ;;
  3321                           
  3322                           	psect	text13
  3323  002F2C                     __ptext13:
  3324                           	opt stack 0
  3325  002F2C                     _SetCpldFwVersion:
  3326                           	opt stack 22
  3327                           
  3328                           ;SystemStatus.c: 51: for(int idx = 0; idx < (0x4); idx++)
  3329                           
  3330                           ;incstack = 0
  3331  002F2C  0E00               	movlw	0
  3332  002F2E  6E2F               	movwf	SetCpldFwVersion@idx+1,c
  3333  002F30  0E00               	movlw	0
  3334  002F32  6E2E               	movwf	SetCpldFwVersion@idx,c
  3335  002F34                     l7400:
  3336  002F34  BE2F               	btfsc	SetCpldFwVersion@idx+1,7,c
  3337  002F36  D006               	goto	l1322
  3338  002F38  502F               	movf	SetCpldFwVersion@idx+1,w,c
  3339  002F3A  E113               	bnz	l7410
  3340  002F3C  0E04               	movlw	4
  3341  002F3E  5C2E               	subwf	SetCpldFwVersion@idx,w,c
  3342  002F40  B0D8               	btfsc	status,0,c
  3343  002F42  D00F               	goto	u7260
  3344  002F44                     l1322:
  3345                           
  3346                           ;SystemStatus.c: 52: {
  3347                           ;SystemStatus.c: 53: EepromWrite((0x4) + idx, data[idx]);
  3348  002F44  502E               	movf	SetCpldFwVersion@idx,w,c
  3349  002F46  242C               	addwf	SetCpldFwVersion@data,w,c
  3350  002F48  6ED9               	movwf	fsr2l,c
  3351  002F4A  502F               	movf	SetCpldFwVersion@idx+1,w,c
  3352  002F4C  202D               	addwfc	SetCpldFwVersion@data+1,w,c
  3353  002F4E  6EDA               	movwf	fsr2h,c
  3354  002F50  50DF               	movf	indf2,w,c
  3355  002F52  6E1B               	movwf	EepromWrite@data,c
  3356  002F54  502E               	movf	SetCpldFwVersion@idx,w,c
  3357  002F56  0F04               	addlw	4
  3358  002F58  EC45  F01B         	call	_EepromWrite
  3359  002F5C  4A2E               	infsnz	SetCpldFwVersion@idx,f,c
  3360  002F5E  2A2F               	incf	SetCpldFwVersion@idx+1,f,c
  3361  002F60  D7E9               	goto	l7400
  3362  002F62                     u7260:
  3363  002F62                     l7410:
  3364                           
  3365                           ;SystemStatus.c: 54: }
  3366                           ;SystemStatus.c: 55: SendAckMessage((MSG_GROUPS)MCU_STATUS_VERSION_MSG, (MSG_REQUEST)STA
      +                          TUS_SET_CPLD_FW_VERSION);
  3367  002F62  0E25               	movlw	37
  3368  002F64  6E24               	movwf	SendAckMessage@inRequest,c
  3369  002F66  0E02               	movlw	2
  3370  002F68  EC77  F016         	call	_SendAckMessage
  3371  002F6C  0012               	return		;funcret
  3372  002F6E                     __end_of_SetCpldFwVersion:
  3373                           	opt stack 0
  3374                           tosu	equ	0xFFF
  3375                           tosh	equ	0xFFE
  3376                           tosl	equ	0xFFD
  3377                           pclath	equ	0xFFA
  3378                           tblptru	equ	0xFF8
  3379                           tblptrh	equ	0xFF7
  3380                           tblptrl	equ	0xFF6
  3381                           tablat	equ	0xFF5
  3382                           prodh	equ	0xFF4
  3383                           prodl	equ	0xFF3
  3384                           postinc0	equ	0xFEE
  3385                           wreg	equ	0xFE8
  3386                           postdec1	equ	0xFE5
  3387                           fsr1l	equ	0xFE1
  3388                           indf2	equ	0xFDF
  3389                           postinc2	equ	0xFDE
  3390                           fsr2h	equ	0xFDA
  3391                           fsr2l	equ	0xFD9
  3392                           status	equ	0xFD8
  3393                           
  3394 ;; *************** function _EepromWrite *****************
  3395 ;; Defined at:
  3396 ;;		line 216 in file "FlashApp.c"
  3397 ;; Parameters:    Size  Location     Type
  3398 ;;  address         1    wreg     unsigned char 
  3399 ;;  data            1   26[COMRAM] unsigned char 
  3400 ;; Auto vars:     Size  Location     Type
  3401 ;;  address         1   27[COMRAM] unsigned char 
  3402 ;; Return value:  Size  Location     Type
  3403 ;;                  1    wreg      void 
  3404 ;; Registers used:
  3405 ;;		wreg, status,2, cstack
  3406 ;; Tracked objects:
  3407 ;;		On entry : 0/0
  3408 ;;		On exit  : 0/0
  3409 ;;		Unchanged: 0/0
  3410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3411 ;;      Params:         1       0       0       0       0       0       0
  3412 ;;      Locals:         1       0       0       0       0       0       0
  3413 ;;      Temps:          0       0       0       0       0       0       0
  3414 ;;      Totals:         2       0       0       0       0       0       0
  3415 ;;Total ram usage:        2 bytes
  3416 ;; Hardware stack levels used:    1
  3417 ;; Hardware stack levels required when called:    4
  3418 ;; This function calls:
  3419 ;;		_DATAEE_WriteByte
  3420 ;; This function is called by:
  3421 ;;		_SetMcuFwVersion
  3422 ;;		_SetCpldFwVersion
  3423 ;; This function uses a non-reentrant model
  3424 ;;
  3425                           
  3426                           	psect	text14
  3427  00368A                     __ptext14:
  3428                           	opt stack 0
  3429  00368A                     _EepromWrite:
  3430                           	opt stack 23
  3431                           
  3432                           ;incstack = 0
  3433                           ;EepromWrite@address stored from wreg
  3434  00368A  6E1C               	movwf	EepromWrite@address,c
  3435                           
  3436                           ;FlashApp.c: 218: DATAEE_WriteByte(address, data);
  3437  00368C  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
  3438  003690  501C               	movf	EepromWrite@address,w,c
  3439  003692  EC04  F019         	call	_DATAEE_WriteByte
  3440  003696  0012               	return		;funcret
  3441  003698                     __end_of_EepromWrite:
  3442                           	opt stack 0
  3443                           tosu	equ	0xFFF
  3444                           tosh	equ	0xFFE
  3445                           tosl	equ	0xFFD
  3446                           pclath	equ	0xFFA
  3447                           tblptru	equ	0xFF8
  3448                           tblptrh	equ	0xFF7
  3449                           tblptrl	equ	0xFF6
  3450                           tablat	equ	0xFF5
  3451                           prodh	equ	0xFF4
  3452                           prodl	equ	0xFF3
  3453                           postinc0	equ	0xFEE
  3454                           wreg	equ	0xFE8
  3455                           postdec1	equ	0xFE5
  3456                           fsr1l	equ	0xFE1
  3457                           indf2	equ	0xFDF
  3458                           postinc2	equ	0xFDE
  3459                           fsr2h	equ	0xFDA
  3460                           fsr2l	equ	0xFD9
  3461                           status	equ	0xFD8
  3462                           
  3463 ;; *************** function _DATAEE_WriteByte *****************
  3464 ;; Defined at:
  3465 ;;		line 167 in file "mcc_generated_files/memory.c"
  3466 ;; Parameters:    Size  Location     Type
  3467 ;;  bAdd            1    wreg     unsigned char 
  3468 ;;  bData           1   23[COMRAM] unsigned char 
  3469 ;; Auto vars:     Size  Location     Type
  3470 ;;  bAdd            1   24[COMRAM] unsigned char 
  3471 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
  3472 ;; Return value:  Size  Location     Type
  3473 ;;                  1    wreg      void 
  3474 ;; Registers used:
  3475 ;;		wreg, status,2
  3476 ;; Tracked objects:
  3477 ;;		On entry : 0/0
  3478 ;;		On exit  : 0/0
  3479 ;;		Unchanged: 0/0
  3480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3481 ;;      Params:         1       0       0       0       0       0       0
  3482 ;;      Locals:         2       0       0       0       0       0       0
  3483 ;;      Temps:          0       0       0       0       0       0       0
  3484 ;;      Totals:         3       0       0       0       0       0       0
  3485 ;;Total ram usage:        3 bytes
  3486 ;; Hardware stack levels used:    1
  3487 ;; Hardware stack levels required when called:    3
  3488 ;; This function calls:
  3489 ;;		Nothing
  3490 ;; This function is called by:
  3491 ;;		_EepromWrite
  3492 ;;		_EepromTest
  3493 ;; This function uses a non-reentrant model
  3494 ;;
  3495                           
  3496                           	psect	text15
  3497  003208                     __ptext15:
  3498                           	opt stack 0
  3499  003208                     _DATAEE_WriteByte:
  3500                           	opt stack 23
  3501                           
  3502                           ;incstack = 0
  3503                           ;DATAEE_WriteByte@bAdd stored from wreg
  3504  003208  6E19               	movwf	DATAEE_WriteByte@bAdd,c
  3505                           
  3506                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
  3507  00320A  0E00               	movlw	0
  3508  00320C  BEF2               	btfsc	intcon,7,c	;volatile
  3509  00320E  0E01               	movlw	1
  3510  003210  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
  3511                           
  3512                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
  3513  003212  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
  3514                           
  3515                           ;memory.c: 172: EEDATA = bData;
  3516  003216  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
  3517                           
  3518                           ;memory.c: 173: EECON1bits.EEPGD = 0;
  3519  00321A  9EA6               	bcf	4006,7,c	;volsfr
  3520                           
  3521                           ;memory.c: 174: EECON1bits.CFGS = 0;
  3522  00321C  9CA6               	bcf	4006,6,c	;volsfr
  3523                           
  3524                           ;memory.c: 175: EECON1bits.WREN = 1;
  3525  00321E  84A6               	bsf	4006,2,c	;volsfr
  3526                           
  3527                           ;memory.c: 176: INTCONbits.GIE = 0;
  3528  003220  9EF2               	bcf	intcon,7,c	;volatile
  3529                           
  3530                           ;memory.c: 177: EECON2 = 0x55;
  3531  003222  0E55               	movlw	85
  3532  003224  6EA7               	movwf	4007,c	;volsfr
  3533                           
  3534                           ;memory.c: 178: EECON2 = 0xAA;
  3535  003226  0EAA               	movlw	170
  3536  003228  6EA7               	movwf	4007,c	;volsfr
  3537                           
  3538                           ;memory.c: 179: EECON1bits.WR = 1;
  3539  00322A  82A6               	bsf	4006,1,c	;volsfr
  3540  00322C                     
  3541                           ;memory.c: 182: {
  3542  00322C  B2A6               	btfsc	4006,1,c	;volsfr
  3543  00322E  D7FE               	goto	l935
  3544                           
  3545                           ;memory.c: 183: }
  3546                           ;memory.c: 185: EECON1bits.WREN = 0;
  3547  003230  94A6               	bcf	4006,2,c	;volsfr
  3548                           
  3549                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
  3550  003232  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
  3551  003234  D002               	bra	u6045
  3552  003236  9EF2               	bcf	intcon,7,c	;volatile
  3553  003238  D001               	bra	u6046
  3554  00323A                     u6045:
  3555  00323A  8EF2               	bsf	intcon,7,c	;volatile
  3556  00323C                     u6046:
  3557  00323C  0012               	return		;funcret
  3558  00323E                     __end_of_DATAEE_WriteByte:
  3559                           	opt stack 0
  3560                           tosu	equ	0xFFF
  3561                           tosh	equ	0xFFE
  3562                           tosl	equ	0xFFD
  3563                           pclath	equ	0xFFA
  3564                           tblptru	equ	0xFF8
  3565                           tblptrh	equ	0xFF7
  3566                           tblptrl	equ	0xFF6
  3567                           tablat	equ	0xFF5
  3568                           prodh	equ	0xFF4
  3569                           prodl	equ	0xFF3
  3570                           intcon	equ	0xFF2
  3571                           postinc0	equ	0xFEE
  3572                           wreg	equ	0xFE8
  3573                           postdec1	equ	0xFE5
  3574                           fsr1l	equ	0xFE1
  3575                           indf2	equ	0xFDF
  3576                           postinc2	equ	0xFDE
  3577                           fsr2h	equ	0xFDA
  3578                           fsr2l	equ	0xFD9
  3579                           status	equ	0xFD8
  3580                           
  3581 ;; *************** function _GetMcuRunTime *****************
  3582 ;; Defined at:
  3583 ;;		line 92 in file "SystemStatus.c"
  3584 ;; Parameters:    Size  Location     Type
  3585 ;;		None
  3586 ;; Auto vars:     Size  Location     Type
  3587 ;;  idx             2   13[BANK0 ] int 
  3588 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  3589 ;;  tempRunTime     4    9[BANK0 ] unsigned long 
  3590 ;; Return value:  Size  Location     Type
  3591 ;;                  1    wreg      void 
  3592 ;; Registers used:
  3593 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3594 ;; Tracked objects:
  3595 ;;		On entry : 0/0
  3596 ;;		On exit  : 0/0
  3597 ;;		Unchanged: 0/0
  3598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3599 ;;      Params:         0       0       0       0       0       0       0
  3600 ;;      Locals:         0      15       0       0       0       0       0
  3601 ;;      Temps:          2       0       0       0       0       0       0
  3602 ;;      Totals:         2      15       0       0       0       0       0
  3603 ;;Total ram usage:       17 bytes
  3604 ;; Hardware stack levels used:    1
  3605 ;; Hardware stack levels required when called:    5
  3606 ;; This function calls:
  3607 ;;		_WriteUartMessage
  3608 ;;		___lldiv
  3609 ;;		___llmod
  3610 ;;		_crc8
  3611 ;; This function is called by:
  3612 ;;		_GroupStatusAndVersion
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615                           
  3616                           	psect	text16
  3617  001CF8                     __ptext16:
  3618                           	opt stack 0
  3619  001CF8                     _GetMcuRunTime:
  3620                           	opt stack 23
  3621                           
  3622                           ;SystemStatus.c: 95: char TxMsg[(0x4) + (0x4) + 1];
  3623                           ;SystemStatus.c: 98: TxMsg[(0)] = (0x24);
  3624                           
  3625                           ;incstack = 0
  3626  001CF8  0E24               	movlw	36
  3627  001CFA  0100               	movlb	0	; () banked
  3628  001CFC  6F60               	movwf	GetMcuRunTime@TxMsg& (0+255),b
  3629                           
  3630                           ;SystemStatus.c: 99: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  3631  001CFE  0E02               	movlw	2
  3632  001D00  6F61               	movwf	(GetMcuRunTime@TxMsg+1)& (0+255),b
  3633                           
  3634                           ;SystemStatus.c: 100: TxMsg[(2)] = STATUS_MCU_RUN_TIME;
  3635  001D02  0E21               	movlw	33
  3636  001D04  6F62               	movwf	(GetMcuRunTime@TxMsg+2)& (0+255),b
  3637                           
  3638                           ;SystemStatus.c: 101: TxMsg[(3)] = (0x4);
  3639  001D06  0E04               	movlw	4
  3640  001D08  6F63               	movwf	(GetMcuRunTime@TxMsg+3)& (0+255),b
  3641                           
  3642                           ; BSR set to: 0
  3643                           ;SystemStatus.c: 103: uint32_t tempRunTime = mcuRunTimeIn5SecTicks;
  3644  001D0A  C0C0  F069         	movff	_mcuRunTimeIn5SecTicks,GetMcuRunTime@tempRunTime
  3645  001D0E  C0C1  F06A         	movff	_mcuRunTimeIn5SecTicks+1,GetMcuRunTime@tempRunTime+1
  3646  001D12  C0C2  F06B         	movff	_mcuRunTimeIn5SecTicks+2,GetMcuRunTime@tempRunTime+2
  3647  001D16  C0C3  F06C         	movff	_mcuRunTimeIn5SecTicks+3,GetMcuRunTime@tempRunTime+3
  3648                           
  3649                           ;SystemStatus.c: 106: for(int idx = 0; idx < (0x4); idx++)
  3650  001D1A  0E00               	movlw	0
  3651  001D1C  6F6E               	movwf	(GetMcuRunTime@idx+1)& (0+255),b
  3652  001D1E  0E00               	movlw	0
  3653  001D20  6F6D               	movwf	GetMcuRunTime@idx& (0+255),b
  3654  001D22                     l7416:
  3655                           
  3656                           ; BSR set to: 0
  3657  001D22  BF6E               	btfsc	(GetMcuRunTime@idx+1)& (0+255),7,b
  3658  001D24  D006               	goto	l1338
  3659  001D26  516E               	movf	(GetMcuRunTime@idx+1)& (0+255),w,b
  3660  001D28  E142               	bnz	l7428
  3661  001D2A  0E04               	movlw	4
  3662  001D2C  5D6D               	subwf	GetMcuRunTime@idx& (0+255),w,b
  3663  001D2E  B0D8               	btfsc	status,0,c
  3664  001D30  D03E               	goto	u7280
  3665  001D32                     l1338:
  3666                           
  3667                           ; BSR set to: 0
  3668                           ;SystemStatus.c: 107: {
  3669                           ;SystemStatus.c: 108: TxMsg[(0x4) + idx] = tempRunTime % 10;
  3670                           
  3671                           ; BSR set to: 0
  3672  001D32  0E04               	movlw	4
  3673  001D34  256D               	addwf	GetMcuRunTime@idx& (0+255),w,b
  3674  001D36  6E25               	movwf	??_GetMcuRunTime& (0+255),c
  3675  001D38  0E00               	movlw	0
  3676  001D3A  216E               	addwfc	(GetMcuRunTime@idx+1)& (0+255),w,b
  3677  001D3C  6E26               	movwf	(??_GetMcuRunTime+1)& (0+255),c
  3678  001D3E  0E60               	movlw	low GetMcuRunTime@TxMsg
  3679  001D40  2425               	addwf	??_GetMcuRunTime,w,c
  3680  001D42  6ED9               	movwf	fsr2l,c
  3681  001D44  0E00               	movlw	high GetMcuRunTime@TxMsg
  3682  001D46  2026               	addwfc	??_GetMcuRunTime+1,w,c
  3683  001D48  6EDA               	movwf	fsr2h,c
  3684  001D4A  C069  F018         	movff	GetMcuRunTime@tempRunTime,___llmod@dividend
  3685  001D4E  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___llmod@dividend+1
  3686  001D52  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___llmod@dividend+2
  3687  001D56  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___llmod@dividend+3
  3688  001D5A  0E0A               	movlw	10
  3689  001D5C  6E1C               	movwf	___llmod@divisor,c
  3690  001D5E  0E00               	movlw	0
  3691  001D60  6E1D               	movwf	___llmod@divisor+1,c
  3692  001D62  0E00               	movlw	0
  3693  001D64  6E1E               	movwf	___llmod@divisor+2,c
  3694  001D66  0E00               	movlw	0
  3695  001D68  6E1F               	movwf	___llmod@divisor+3,c
  3696  001D6A  EC27  F014         	call	___llmod	;wreg free
  3697  001D6E  5018               	movf	?___llmod,w,c
  3698  001D70  6EDF               	movwf	indf2,c
  3699                           
  3700                           ;SystemStatus.c: 109: tempRunTime /= 10;
  3701  001D72  C069  F018         	movff	GetMcuRunTime@tempRunTime,___lldiv@dividend
  3702  001D76  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___lldiv@dividend+1
  3703  001D7A  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___lldiv@dividend+2
  3704  001D7E  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___lldiv@dividend+3
  3705  001D82  0E0A               	movlw	10
  3706  001D84  6E1C               	movwf	___lldiv@divisor,c
  3707  001D86  0E00               	movlw	0
  3708  001D88  6E1D               	movwf	___lldiv@divisor+1,c
  3709  001D8A  0E00               	movlw	0
  3710  001D8C  6E1E               	movwf	___lldiv@divisor+2,c
  3711  001D8E  0E00               	movlw	0
  3712  001D90  6E1F               	movwf	___lldiv@divisor+3,c
  3713  001D92  ECFA  F012         	call	___lldiv	;wreg free
  3714  001D96  C018  F069         	movff	?___lldiv,GetMcuRunTime@tempRunTime
  3715  001D9A  C019  F06A         	movff	?___lldiv+1,GetMcuRunTime@tempRunTime+1
  3716  001D9E  C01A  F06B         	movff	?___lldiv+2,GetMcuRunTime@tempRunTime+2
  3717  001DA2  C01B  F06C         	movff	?___lldiv+3,GetMcuRunTime@tempRunTime+3
  3718  001DA6  0100               	movlb	0	; () banked
  3719  001DA8  4B6D               	infsnz	GetMcuRunTime@idx& (0+255),f,b
  3720  001DAA  2B6E               	incf	(GetMcuRunTime@idx+1)& (0+255),f,b
  3721  001DAC  D7BA               	goto	l7416
  3722  001DAE                     u7280:
  3723  001DAE                     l7428:
  3724                           
  3725                           ; BSR set to: 0
  3726                           ;SystemStatus.c: 110: }
  3727                           ;SystemStatus.c: 112: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  3728  001DAE  0E60               	movlw	low GetMcuRunTime@TxMsg
  3729  001DB0  6E18               	movwf	crc8@dataArray,c
  3730  001DB2  0E00               	movlw	high GetMcuRunTime@TxMsg
  3731  001DB4  6E19               	movwf	crc8@dataArray+1,c
  3732  001DB6  0E00               	movlw	0
  3733  001DB8  6E1B               	movwf	crc8@dataSize+1,c
  3734  001DBA  0E08               	movlw	8
  3735  001DBC  6E1A               	movwf	crc8@dataSize,c
  3736  001DBE  ECA0  F016         	call	_crc8	;wreg free
  3737  001DC2  0100               	movlb	0	; () banked
  3738  001DC4  6F68               	movwf	(GetMcuRunTime@TxMsg+8)& (0+255),b
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;SystemStatus.c: 114: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  3742  001DC6  0E60               	movlw	low GetMcuRunTime@TxMsg
  3743  001DC8  6E19               	movwf	WriteUartMessage@dataBuf,c
  3744  001DCA  0E00               	movlw	high GetMcuRunTime@TxMsg
  3745  001DCC  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  3746  001DCE  0E00               	movlw	0
  3747  001DD0  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  3748  001DD2  0E09               	movlw	9
  3749  001DD4  6E1B               	movwf	WriteUartMessage@dataSize,c
  3750  001DD6  EC3A  F019         	call	_WriteUartMessage	;wreg free
  3751  001DDA  0012               	return		;funcret
  3752  001DDC                     __end_of_GetMcuRunTime:
  3753                           	opt stack 0
  3754                           tosu	equ	0xFFF
  3755                           tosh	equ	0xFFE
  3756                           tosl	equ	0xFFD
  3757                           pclath	equ	0xFFA
  3758                           tblptru	equ	0xFF8
  3759                           tblptrh	equ	0xFF7
  3760                           tblptrl	equ	0xFF6
  3761                           tablat	equ	0xFF5
  3762                           prodh	equ	0xFF4
  3763                           prodl	equ	0xFF3
  3764                           intcon	equ	0xFF2
  3765                           postinc0	equ	0xFEE
  3766                           wreg	equ	0xFE8
  3767                           postdec1	equ	0xFE5
  3768                           fsr1l	equ	0xFE1
  3769                           indf2	equ	0xFDF
  3770                           postinc2	equ	0xFDE
  3771                           fsr2h	equ	0xFDA
  3772                           fsr2l	equ	0xFD9
  3773                           status	equ	0xFD8
  3774                           
  3775 ;; *************** function ___lldiv *****************
  3776 ;; Defined at:
  3777 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  3778 ;; Parameters:    Size  Location     Type
  3779 ;;  dividend        4   23[COMRAM] unsigned long 
  3780 ;;  divisor         4   27[COMRAM] unsigned long 
  3781 ;; Auto vars:     Size  Location     Type
  3782 ;;  quotient        4   31[COMRAM] unsigned long 
  3783 ;;  counter         1   35[COMRAM] unsigned char 
  3784 ;; Return value:  Size  Location     Type
  3785 ;;                  4   23[COMRAM] unsigned long 
  3786 ;; Registers used:
  3787 ;;		wreg, status,2, status,0
  3788 ;; Tracked objects:
  3789 ;;		On entry : 0/0
  3790 ;;		On exit  : 0/0
  3791 ;;		Unchanged: 0/0
  3792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3793 ;;      Params:         8       0       0       0       0       0       0
  3794 ;;      Locals:         5       0       0       0       0       0       0
  3795 ;;      Temps:          0       0       0       0       0       0       0
  3796 ;;      Totals:        13       0       0       0       0       0       0
  3797 ;;Total ram usage:       13 bytes
  3798 ;; Hardware stack levels used:    1
  3799 ;; Hardware stack levels required when called:    3
  3800 ;; This function calls:
  3801 ;;		Nothing
  3802 ;; This function is called by:
  3803 ;;		_GetMcuRunTime
  3804 ;; This function uses a non-reentrant model
  3805 ;;
  3806                           
  3807                           	psect	text17
  3808  0025F4                     __ptext17:
  3809                           	opt stack 0
  3810  0025F4                     ___lldiv:
  3811                           	opt stack 24
  3812                           
  3813                           ;incstack = 0
  3814  0025F4  0E00               	movlw	0
  3815  0025F6  6E20               	movwf	___lldiv@quotient,c
  3816  0025F8  0E00               	movlw	0
  3817  0025FA  6E21               	movwf	___lldiv@quotient+1,c
  3818  0025FC  0E00               	movlw	0
  3819  0025FE  6E22               	movwf	___lldiv@quotient+2,c
  3820  002600  0E00               	movlw	0
  3821  002602  6E23               	movwf	___lldiv@quotient+3,c
  3822  002604  501C               	movf	___lldiv@divisor,w,c
  3823  002606  101D               	iorwf	___lldiv@divisor+1,w,c
  3824  002608  101E               	iorwf	___lldiv@divisor+2,w,c
  3825  00260A  101F               	iorwf	___lldiv@divisor+3,w,c
  3826  00260C  B4D8               	btfsc	status,2,c
  3827  00260E  D02A               	goto	l1763
  3828  002610  0E01               	movlw	1
  3829  002612  6E24               	movwf	___lldiv@counter,c
  3830  002614  D006               	goto	l1758
  3831  002616  90D8               	bcf	status,0,c
  3832  002618  361C               	rlcf	___lldiv@divisor,f,c
  3833  00261A  361D               	rlcf	___lldiv@divisor+1,f,c
  3834  00261C  361E               	rlcf	___lldiv@divisor+2,f,c
  3835  00261E  361F               	rlcf	___lldiv@divisor+3,f,c
  3836  002620  2A24               	incf	___lldiv@counter,f,c
  3837  002622                     l1758:
  3838  002622  AE1F               	btfss	___lldiv@divisor+3,7,c
  3839  002624  D7F8               	goto	l1759
  3840  002626                     u6780:
  3841  002626  90D8               	bcf	status,0,c
  3842  002628  3620               	rlcf	___lldiv@quotient,f,c
  3843  00262A  3621               	rlcf	___lldiv@quotient+1,f,c
  3844  00262C  3622               	rlcf	___lldiv@quotient+2,f,c
  3845  00262E  3623               	rlcf	___lldiv@quotient+3,f,c
  3846  002630  501C               	movf	___lldiv@divisor,w,c
  3847  002632  5C18               	subwf	___lldiv@dividend,w,c
  3848  002634  501D               	movf	___lldiv@divisor+1,w,c
  3849  002636  5819               	subwfb	___lldiv@dividend+1,w,c
  3850  002638  501E               	movf	___lldiv@divisor+2,w,c
  3851  00263A  581A               	subwfb	___lldiv@dividend+2,w,c
  3852  00263C  501F               	movf	___lldiv@divisor+3,w,c
  3853  00263E  581B               	subwfb	___lldiv@dividend+3,w,c
  3854  002640  A0D8               	btfss	status,0,c
  3855  002642  D009               	goto	l1762
  3856  002644  501C               	movf	___lldiv@divisor,w,c
  3857  002646  5E18               	subwf	___lldiv@dividend,f,c
  3858  002648  501D               	movf	___lldiv@divisor+1,w,c
  3859  00264A  5A19               	subwfb	___lldiv@dividend+1,f,c
  3860  00264C  501E               	movf	___lldiv@divisor+2,w,c
  3861  00264E  5A1A               	subwfb	___lldiv@dividend+2,f,c
  3862  002650  501F               	movf	___lldiv@divisor+3,w,c
  3863  002652  5A1B               	subwfb	___lldiv@dividend+3,f,c
  3864  002654  8020               	bsf	___lldiv@quotient,0,c
  3865  002656                     l1762:
  3866  002656  90D8               	bcf	status,0,c
  3867  002658  321F               	rrcf	___lldiv@divisor+3,f,c
  3868  00265A  321E               	rrcf	___lldiv@divisor+2,f,c
  3869  00265C  321D               	rrcf	___lldiv@divisor+1,f,c
  3870  00265E  321C               	rrcf	___lldiv@divisor,f,c
  3871  002660  2E24               	decfsz	___lldiv@counter,f,c
  3872  002662  D7E1               	goto	u6780
  3873  002664                     l1763:
  3874  002664  C020  F018         	movff	___lldiv@quotient,?___lldiv
  3875  002668  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  3876  00266C  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  3877  002670  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  3878  002674  0012               	return		;funcret
  3879  002676                     __end_of___lldiv:
  3880                           	opt stack 0
  3881                           tosu	equ	0xFFF
  3882                           tosh	equ	0xFFE
  3883                           tosl	equ	0xFFD
  3884                           pclath	equ	0xFFA
  3885                           tblptru	equ	0xFF8
  3886                           tblptrh	equ	0xFF7
  3887                           tblptrl	equ	0xFF6
  3888                           tablat	equ	0xFF5
  3889                           prodh	equ	0xFF4
  3890                           prodl	equ	0xFF3
  3891                           intcon	equ	0xFF2
  3892                           postinc0	equ	0xFEE
  3893                           wreg	equ	0xFE8
  3894                           postdec1	equ	0xFE5
  3895                           fsr1l	equ	0xFE1
  3896                           indf2	equ	0xFDF
  3897                           postinc2	equ	0xFDE
  3898                           fsr2h	equ	0xFDA
  3899                           fsr2l	equ	0xFD9
  3900                           status	equ	0xFD8
  3901                           
  3902 ;; *************** function _GetMcuFwVersion *****************
  3903 ;; Defined at:
  3904 ;;		line 26 in file "SystemStatus.c"
  3905 ;; Parameters:    Size  Location     Type
  3906 ;;		None
  3907 ;; Auto vars:     Size  Location     Type
  3908 ;;  idx             1   46[COMRAM] unsigned char 
  3909 ;;  TxMsg           9   37[COMRAM] unsigned char [9]
  3910 ;; Return value:  Size  Location     Type
  3911 ;;                  1    wreg      void 
  3912 ;; Registers used:
  3913 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3914 ;; Tracked objects:
  3915 ;;		On entry : 0/0
  3916 ;;		On exit  : 0/0
  3917 ;;		Unchanged: 0/0
  3918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3919 ;;      Params:         0       0       0       0       0       0       0
  3920 ;;      Locals:        10       0       0       0       0       0       0
  3921 ;;      Temps:          2       0       0       0       0       0       0
  3922 ;;      Totals:        12       0       0       0       0       0       0
  3923 ;;Total ram usage:       12 bytes
  3924 ;; Hardware stack levels used:    1
  3925 ;; Hardware stack levels required when called:    5
  3926 ;; This function calls:
  3927 ;;		_EepromRead
  3928 ;;		_WriteUartMessage
  3929 ;;		_ZeroArray
  3930 ;;		_crc8
  3931 ;; This function is called by:
  3932 ;;		_GroupStatusAndVersion
  3933 ;; This function uses a non-reentrant model
  3934 ;;
  3935                           
  3936                           	psect	text18
  3937  002676                     __ptext18:
  3938                           	opt stack 0
  3939  002676                     _GetMcuFwVersion:
  3940                           	opt stack 23
  3941                           
  3942                           ;SystemStatus.c: 29: char TxMsg[(0x4) + (0x4) + 1];
  3943                           ;SystemStatus.c: 30: ZeroArray(TxMsg, (0x4) + (0x4) + 1);
  3944                           
  3945                           ;incstack = 0
  3946  002676  0E26               	movlw	low GetMcuFwVersion@TxMsg
  3947  002678  6E20               	movwf	ZeroArray@array,c
  3948  00267A  0E00               	movlw	high GetMcuFwVersion@TxMsg
  3949  00267C  6E21               	movwf	ZeroArray@array+1,c
  3950  00267E  0E00               	movlw	0
  3951  002680  6E23               	movwf	ZeroArray@size+1,c
  3952  002682  0E09               	movlw	9
  3953  002684  6E22               	movwf	ZeroArray@size,c
  3954  002686  ECBC  F01A         	call	_ZeroArray	;wreg free
  3955                           
  3956                           ;SystemStatus.c: 33: TxMsg[(0)] = (0x24);
  3957  00268A  0E24               	movlw	36
  3958  00268C  6E26               	movwf	GetMcuFwVersion@TxMsg,c
  3959                           
  3960                           ;SystemStatus.c: 34: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  3961  00268E  0E02               	movlw	2
  3962  002690  6E27               	movwf	GetMcuFwVersion@TxMsg+1,c
  3963                           
  3964                           ;SystemStatus.c: 35: TxMsg[(2)] = STATUS_GET_MCU_FW_VERSION;
  3965  002692  0E22               	movlw	34
  3966  002694  6E28               	movwf	GetMcuFwVersion@TxMsg+2,c
  3967                           
  3968                           ;SystemStatus.c: 36: TxMsg[(3)] = (0x4);
  3969  002696  0E04               	movlw	4
  3970  002698  6E29               	movwf	GetMcuFwVersion@TxMsg+3,c
  3971                           
  3972                           ;SystemStatus.c: 39: for(uint8_t idx = 0; idx < (0x4); idx++)
  3973  00269A  0E00               	movlw	0
  3974  00269C  6E2F               	movwf	GetMcuFwVersion@idx,c
  3975  00269E                     l7344:
  3976  00269E  0E03               	movlw	3
  3977  0026A0  642F               	cpfsgt	GetMcuFwVersion@idx,c
  3978  0026A2  D001               	goto	l1317
  3979  0026A4  D013               	goto	u7200
  3980  0026A6                     l1317:
  3981                           
  3982                           ;SystemStatus.c: 40: {
  3983                           ;SystemStatus.c: 41: TxMsg[(0x4) + idx] = EepromRead(idx);
  3984  0026A6  502F               	movf	GetMcuFwVersion@idx,w,c
  3985  0026A8  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  3986  0026AA  6A25               	clrf	(??_GetMcuFwVersion+1)& (0+255),c
  3987  0026AC  0E04               	movlw	4
  3988  0026AE  2624               	addwf	??_GetMcuFwVersion,f,c
  3989  0026B0  0E00               	movlw	0
  3990  0026B2  2225               	addwfc	??_GetMcuFwVersion+1,f,c
  3991  0026B4  0E26               	movlw	low GetMcuFwVersion@TxMsg
  3992  0026B6  2424               	addwf	??_GetMcuFwVersion,w,c
  3993  0026B8  6ED9               	movwf	fsr2l,c
  3994  0026BA  0E00               	movlw	high GetMcuFwVersion@TxMsg
  3995  0026BC  2025               	addwfc	??_GetMcuFwVersion+1,w,c
  3996  0026BE  6EDA               	movwf	fsr2h,c
  3997  0026C0  502F               	movf	GetMcuFwVersion@idx,w,c
  3998  0026C2  EC86  F01B         	call	_EepromRead
  3999  0026C6  6EDF               	movwf	indf2,c
  4000  0026C8  2A2F               	incf	GetMcuFwVersion@idx,f,c
  4001  0026CA  D7E9               	goto	l7344
  4002  0026CC                     u7200:
  4003                           
  4004                           ;SystemStatus.c: 42: }
  4005                           ;SystemStatus.c: 44: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4006  0026CC  0E26               	movlw	low GetMcuFwVersion@TxMsg
  4007  0026CE  6E18               	movwf	crc8@dataArray,c
  4008  0026D0  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4009  0026D2  6E19               	movwf	crc8@dataArray+1,c
  4010  0026D4  0E00               	movlw	0
  4011  0026D6  6E1B               	movwf	crc8@dataSize+1,c
  4012  0026D8  0E08               	movlw	8
  4013  0026DA  6E1A               	movwf	crc8@dataSize,c
  4014  0026DC  ECA0  F016         	call	_crc8	;wreg free
  4015  0026E0  6E2E               	movwf	GetMcuFwVersion@TxMsg+8,c
  4016                           
  4017                           ;SystemStatus.c: 46: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4018  0026E2  0E26               	movlw	low GetMcuFwVersion@TxMsg
  4019  0026E4  6E19               	movwf	WriteUartMessage@dataBuf,c
  4020  0026E6  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4021  0026E8  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4022  0026EA  0E00               	movlw	0
  4023  0026EC  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4024  0026EE  0E09               	movlw	9
  4025  0026F0  6E1B               	movwf	WriteUartMessage@dataSize,c
  4026  0026F2  EC3A  F019         	call	_WriteUartMessage	;wreg free
  4027  0026F6  0012               	return		;funcret
  4028  0026F8                     __end_of_GetMcuFwVersion:
  4029                           	opt stack 0
  4030                           tosu	equ	0xFFF
  4031                           tosh	equ	0xFFE
  4032                           tosl	equ	0xFFD
  4033                           pclath	equ	0xFFA
  4034                           tblptru	equ	0xFF8
  4035                           tblptrh	equ	0xFF7
  4036                           tblptrl	equ	0xFF6
  4037                           tablat	equ	0xFF5
  4038                           prodh	equ	0xFF4
  4039                           prodl	equ	0xFF3
  4040                           intcon	equ	0xFF2
  4041                           postinc0	equ	0xFEE
  4042                           wreg	equ	0xFE8
  4043                           postdec1	equ	0xFE5
  4044                           fsr1l	equ	0xFE1
  4045                           indf2	equ	0xFDF
  4046                           postinc2	equ	0xFDE
  4047                           fsr2h	equ	0xFDA
  4048                           fsr2l	equ	0xFD9
  4049                           status	equ	0xFD8
  4050                           
  4051 ;; *************** function _GetCpldFwVersion *****************
  4052 ;; Defined at:
  4053 ;;		line 58 in file "SystemStatus.c"
  4054 ;; Parameters:    Size  Location     Type
  4055 ;;		None
  4056 ;; Auto vars:     Size  Location     Type
  4057 ;;  idx             2   46[COMRAM] int 
  4058 ;;  TxMsg           9   37[COMRAM] unsigned char [9]
  4059 ;; Return value:  Size  Location     Type
  4060 ;;                  1    wreg      void 
  4061 ;; Registers used:
  4062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4063 ;; Tracked objects:
  4064 ;;		On entry : 0/0
  4065 ;;		On exit  : 0/0
  4066 ;;		Unchanged: 0/0
  4067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4068 ;;      Params:         0       0       0       0       0       0       0
  4069 ;;      Locals:        11       0       0       0       0       0       0
  4070 ;;      Temps:          2       0       0       0       0       0       0
  4071 ;;      Totals:        13       0       0       0       0       0       0
  4072 ;;Total ram usage:       13 bytes
  4073 ;; Hardware stack levels used:    1
  4074 ;; Hardware stack levels required when called:    5
  4075 ;; This function calls:
  4076 ;;		_EepromRead
  4077 ;;		_WriteUartMessage
  4078 ;;		_ZeroArray
  4079 ;;		_crc8
  4080 ;; This function is called by:
  4081 ;;		_GroupStatusAndVersion
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           	psect	text19
  4086  002444                     __ptext19:
  4087                           	opt stack 0
  4088  002444                     _GetCpldFwVersion:
  4089                           	opt stack 23
  4090                           
  4091                           ;SystemStatus.c: 61: char TxMsg[(0x4) + (0x4) + 1];
  4092                           ;SystemStatus.c: 62: ZeroArray(TxMsg, (0x4) + (0x4) + 1);
  4093                           
  4094                           ;incstack = 0
  4095  002444  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4096  002446  6E20               	movwf	ZeroArray@array,c
  4097  002448  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4098  00244A  6E21               	movwf	ZeroArray@array+1,c
  4099  00244C  0E00               	movlw	0
  4100  00244E  6E23               	movwf	ZeroArray@size+1,c
  4101  002450  0E09               	movlw	9
  4102  002452  6E22               	movwf	ZeroArray@size,c
  4103  002454  ECBC  F01A         	call	_ZeroArray	;wreg free
  4104                           
  4105                           ;SystemStatus.c: 65: TxMsg[(0)] = (0x24);
  4106  002458  0E24               	movlw	36
  4107  00245A  6E26               	movwf	GetCpldFwVersion@TxMsg,c
  4108                           
  4109                           ;SystemStatus.c: 66: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4110  00245C  0E02               	movlw	2
  4111  00245E  6E27               	movwf	GetCpldFwVersion@TxMsg+1,c
  4112                           
  4113                           ;SystemStatus.c: 67: TxMsg[(2)] = STATUS_GET_CPLD_FW_VERSION;
  4114  002460  0E23               	movlw	35
  4115  002462  6E28               	movwf	GetCpldFwVersion@TxMsg+2,c
  4116                           
  4117                           ;SystemStatus.c: 68: TxMsg[(3)] = (0x4);
  4118  002464  0E04               	movlw	4
  4119  002466  6E29               	movwf	GetCpldFwVersion@TxMsg+3,c
  4120                           
  4121                           ;SystemStatus.c: 71: for(int idx = 0; idx < (0x4); idx++)
  4122  002468  0E00               	movlw	0
  4123  00246A  6E30               	movwf	GetCpldFwVersion@idx+1,c
  4124  00246C  0E00               	movlw	0
  4125  00246E  6E2F               	movwf	GetCpldFwVersion@idx,c
  4126  002470                     l7384:
  4127  002470  BE30               	btfsc	GetCpldFwVersion@idx+1,7,c
  4128  002472  D006               	goto	l1327
  4129  002474  5030               	movf	GetCpldFwVersion@idx+1,w,c
  4130  002476  E118               	bnz	l7394
  4131  002478  0E04               	movlw	4
  4132  00247A  5C2F               	subwf	GetCpldFwVersion@idx,w,c
  4133  00247C  B0D8               	btfsc	status,0,c
  4134  00247E  D014               	goto	u7240
  4135  002480                     l1327:
  4136                           
  4137                           ;SystemStatus.c: 72: {
  4138                           ;SystemStatus.c: 73: TxMsg[(0x4) + idx] = EepromRead((0x4) + idx);
  4139  002480  0E04               	movlw	4
  4140  002482  242F               	addwf	GetCpldFwVersion@idx,w,c
  4141  002484  6E24               	movwf	??_GetCpldFwVersion& (0+255),c
  4142  002486  0E00               	movlw	0
  4143  002488  2030               	addwfc	GetCpldFwVersion@idx+1,w,c
  4144  00248A  6E25               	movwf	(??_GetCpldFwVersion+1)& (0+255),c
  4145  00248C  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4146  00248E  2424               	addwf	??_GetCpldFwVersion,w,c
  4147  002490  6ED9               	movwf	fsr2l,c
  4148  002492  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4149  002494  2025               	addwfc	??_GetCpldFwVersion+1,w,c
  4150  002496  6EDA               	movwf	fsr2h,c
  4151  002498  502F               	movf	GetCpldFwVersion@idx,w,c
  4152  00249A  0F04               	addlw	4
  4153  00249C  EC86  F01B         	call	_EepromRead
  4154  0024A0  6EDF               	movwf	indf2,c
  4155  0024A2  4A2F               	infsnz	GetCpldFwVersion@idx,f,c
  4156  0024A4  2A30               	incf	GetCpldFwVersion@idx+1,f,c
  4157  0024A6  D7E4               	goto	l7384
  4158  0024A8                     u7240:
  4159  0024A8                     l7394:
  4160                           
  4161                           ;SystemStatus.c: 74: }
  4162                           ;SystemStatus.c: 76: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4163  0024A8  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4164  0024AA  6E18               	movwf	crc8@dataArray,c
  4165  0024AC  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4166  0024AE  6E19               	movwf	crc8@dataArray+1,c
  4167  0024B0  0E00               	movlw	0
  4168  0024B2  6E1B               	movwf	crc8@dataSize+1,c
  4169  0024B4  0E08               	movlw	8
  4170  0024B6  6E1A               	movwf	crc8@dataSize,c
  4171  0024B8  ECA0  F016         	call	_crc8	;wreg free
  4172  0024BC  6E2E               	movwf	GetCpldFwVersion@TxMsg+8,c
  4173                           
  4174                           ;SystemStatus.c: 78: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4175  0024BE  0E26               	movlw	low GetCpldFwVersion@TxMsg
  4176  0024C0  6E19               	movwf	WriteUartMessage@dataBuf,c
  4177  0024C2  0E00               	movlw	high GetCpldFwVersion@TxMsg
  4178  0024C4  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4179  0024C6  0E00               	movlw	0
  4180  0024C8  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4181  0024CA  0E09               	movlw	9
  4182  0024CC  6E1B               	movwf	WriteUartMessage@dataSize,c
  4183  0024CE  EC3A  F019         	call	_WriteUartMessage	;wreg free
  4184  0024D2  0012               	return		;funcret
  4185  0024D4                     __end_of_GetCpldFwVersion:
  4186                           	opt stack 0
  4187                           tosu	equ	0xFFF
  4188                           tosh	equ	0xFFE
  4189                           tosl	equ	0xFFD
  4190                           pclath	equ	0xFFA
  4191                           tblptru	equ	0xFF8
  4192                           tblptrh	equ	0xFF7
  4193                           tblptrl	equ	0xFF6
  4194                           tablat	equ	0xFF5
  4195                           prodh	equ	0xFF4
  4196                           prodl	equ	0xFF3
  4197                           intcon	equ	0xFF2
  4198                           postinc0	equ	0xFEE
  4199                           wreg	equ	0xFE8
  4200                           postdec1	equ	0xFE5
  4201                           fsr1l	equ	0xFE1
  4202                           indf2	equ	0xFDF
  4203                           postinc2	equ	0xFDE
  4204                           fsr2h	equ	0xFDA
  4205                           fsr2l	equ	0xFD9
  4206                           status	equ	0xFD8
  4207                           
  4208 ;; *************** function _EepromRead *****************
  4209 ;; Defined at:
  4210 ;;		line 211 in file "FlashApp.c"
  4211 ;; Parameters:    Size  Location     Type
  4212 ;;  address         1    wreg     unsigned char 
  4213 ;; Auto vars:     Size  Location     Type
  4214 ;;  address         1   24[COMRAM] unsigned char 
  4215 ;; Return value:  Size  Location     Type
  4216 ;;                  1    wreg      unsigned char 
  4217 ;; Registers used:
  4218 ;;		wreg, status,2, cstack
  4219 ;; Tracked objects:
  4220 ;;		On entry : 0/0
  4221 ;;		On exit  : 0/0
  4222 ;;		Unchanged: 0/0
  4223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4224 ;;      Params:         0       0       0       0       0       0       0
  4225 ;;      Locals:         1       0       0       0       0       0       0
  4226 ;;      Temps:          0       0       0       0       0       0       0
  4227 ;;      Totals:         1       0       0       0       0       0       0
  4228 ;;Total ram usage:        1 bytes
  4229 ;; Hardware stack levels used:    1
  4230 ;; Hardware stack levels required when called:    4
  4231 ;; This function calls:
  4232 ;;		_DATAEE_ReadByte
  4233 ;; This function is called by:
  4234 ;;		_GetMcuFwVersion
  4235 ;;		_GetCpldFwVersion
  4236 ;; This function uses a non-reentrant model
  4237 ;;
  4238                           
  4239                           	psect	text20
  4240  00370C                     __ptext20:
  4241                           	opt stack 0
  4242  00370C                     _EepromRead:
  4243                           	opt stack 23
  4244                           
  4245                           ;incstack = 0
  4246                           ;EepromRead@address stored from wreg
  4247  00370C  6E19               	movwf	EepromRead@address,c
  4248                           
  4249                           ;FlashApp.c: 213: return DATAEE_ReadByte(address);
  4250  00370E  5019               	movf	EepromRead@address,w,c
  4251  003710  EC16  F01B         	call	_DATAEE_ReadByte
  4252  003714  0012               	return	
  4253  003716                     __end_of_EepromRead:
  4254                           	opt stack 0
  4255                           tosu	equ	0xFFF
  4256                           tosh	equ	0xFFE
  4257                           tosl	equ	0xFFD
  4258                           pclath	equ	0xFFA
  4259                           tblptru	equ	0xFF8
  4260                           tblptrh	equ	0xFF7
  4261                           tblptrl	equ	0xFF6
  4262                           tablat	equ	0xFF5
  4263                           prodh	equ	0xFF4
  4264                           prodl	equ	0xFF3
  4265                           intcon	equ	0xFF2
  4266                           postinc0	equ	0xFEE
  4267                           wreg	equ	0xFE8
  4268                           postdec1	equ	0xFE5
  4269                           fsr1l	equ	0xFE1
  4270                           indf2	equ	0xFDF
  4271                           postinc2	equ	0xFDE
  4272                           fsr2h	equ	0xFDA
  4273                           fsr2l	equ	0xFD9
  4274                           status	equ	0xFD8
  4275                           
  4276 ;; *************** function _DATAEE_ReadByte *****************
  4277 ;; Defined at:
  4278 ;;		line 194 in file "mcc_generated_files/memory.c"
  4279 ;; Parameters:    Size  Location     Type
  4280 ;;  bAdd            1    wreg     unsigned char 
  4281 ;; Auto vars:     Size  Location     Type
  4282 ;;  bAdd            1   23[COMRAM] unsigned char 
  4283 ;; Return value:  Size  Location     Type
  4284 ;;                  1    wreg      unsigned char 
  4285 ;; Registers used:
  4286 ;;		wreg, status,2
  4287 ;; Tracked objects:
  4288 ;;		On entry : 0/0
  4289 ;;		On exit  : 0/0
  4290 ;;		Unchanged: 0/0
  4291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4292 ;;      Params:         0       0       0       0       0       0       0
  4293 ;;      Locals:         1       0       0       0       0       0       0
  4294 ;;      Temps:          0       0       0       0       0       0       0
  4295 ;;      Totals:         1       0       0       0       0       0       0
  4296 ;;Total ram usage:        1 bytes
  4297 ;; Hardware stack levels used:    1
  4298 ;; Hardware stack levels required when called:    3
  4299 ;; This function calls:
  4300 ;;		Nothing
  4301 ;; This function is called by:
  4302 ;;		_EepromRead
  4303 ;;		_EepromTest
  4304 ;; This function uses a non-reentrant model
  4305 ;;
  4306                           
  4307                           	psect	text21
  4308  00362C                     __ptext21:
  4309                           	opt stack 0
  4310  00362C                     _DATAEE_ReadByte:
  4311                           	opt stack 23
  4312                           
  4313                           ;incstack = 0
  4314                           ;DATAEE_ReadByte@bAdd stored from wreg
  4315  00362C  6E18               	movwf	DATAEE_ReadByte@bAdd,c
  4316                           
  4317                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
  4318  00362E  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
  4319                           
  4320                           ;memory.c: 198: EECON1bits.CFGS = 0;
  4321  003632  9CA6               	bcf	4006,6,c	;volsfr
  4322                           
  4323                           ;memory.c: 199: EECON1bits.EEPGD = 0;
  4324  003634  9EA6               	bcf	4006,7,c	;volsfr
  4325                           
  4326                           ;memory.c: 200: EECON1bits.RD = 1;
  4327  003636  80A6               	bsf	4006,0,c	;volsfr
  4328                           
  4329                           ;memory.c: 201: __nop();
  4330  003638  F000               	nop	
  4331                           
  4332                           ;memory.c: 202: __nop();
  4333  00363A  F000               	nop	
  4334                           
  4335                           ;memory.c: 204: return (EEDATA);
  4336  00363C  50A8               	movf	4008,w,c	;volatile
  4337  00363E  0012               	return	
  4338  003640                     __end_of_DATAEE_ReadByte:
  4339                           	opt stack 0
  4340                           tosu	equ	0xFFF
  4341                           tosh	equ	0xFFE
  4342                           tosl	equ	0xFFD
  4343                           pclath	equ	0xFFA
  4344                           tblptru	equ	0xFF8
  4345                           tblptrh	equ	0xFF7
  4346                           tblptrl	equ	0xFF6
  4347                           tablat	equ	0xFF5
  4348                           prodh	equ	0xFF4
  4349                           prodl	equ	0xFF3
  4350                           intcon	equ	0xFF2
  4351                           postinc0	equ	0xFEE
  4352                           wreg	equ	0xFE8
  4353                           postdec1	equ	0xFE5
  4354                           fsr1l	equ	0xFE1
  4355                           indf2	equ	0xFDF
  4356                           postinc2	equ	0xFDE
  4357                           fsr2h	equ	0xFDA
  4358                           fsr2l	equ	0xFD9
  4359                           status	equ	0xFD8
  4360                           
  4361 ;; *************** function _FlashReadUart *****************
  4362 ;; Defined at:
  4363 ;;		line 62 in file "FlashApp.c"
  4364 ;; Parameters:    Size  Location     Type
  4365 ;;  numOfSampleT    2   35[COMRAM] int 
  4366 ;; Auto vars:     Size  Location     Type
  4367 ;;  idx             2   91[BANK0 ] int 
  4368 ;;  TxMsg          69   12[BANK0 ] unsigned char [69]
  4369 ;;  offset          2   93[BANK0 ] int 
  4370 ;;  j               2   89[BANK0 ] int 
  4371 ;; Return value:  Size  Location     Type
  4372 ;;                  1    wreg      void 
  4373 ;; Registers used:
  4374 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4375 ;; Tracked objects:
  4376 ;;		On entry : 0/0
  4377 ;;		On exit  : 0/0
  4378 ;;		Unchanged: 0/0
  4379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4380 ;;      Params:         2       0       0       0       0       0       0
  4381 ;;      Locals:         0      83       0       0       0       0       0
  4382 ;;      Temps:          0      12       0       0       0       0       0
  4383 ;;      Totals:         2      95       0       0       0       0       0
  4384 ;;Total ram usage:       97 bytes
  4385 ;; Hardware stack levels used:    1
  4386 ;; Hardware stack levels required when called:    5
  4387 ;; This function calls:
  4388 ;;		_FLASH_IsWriteDone
  4389 ;;		_FLASH_ReadByte
  4390 ;;		_WriteUartMessage
  4391 ;;		_ZeroArray
  4392 ;;		_abs
  4393 ;;		_crc8
  4394 ;; This function is called by:
  4395 ;;		_GroupFlashMemory
  4396 ;; This function uses a non-reentrant model
  4397 ;;
  4398                           
  4399                           	psect	text22
  4400  000676                     __ptext22:
  4401                           	opt stack 0
  4402  000676                     _FlashReadUart:
  4403                           	opt stack 23
  4404                           
  4405                           ;FlashApp.c: 65: int j=0;
  4406                           
  4407                           ;incstack = 0
  4408  000676  0E00               	movlw	0
  4409  000678  0100               	movlb	0	; () banked
  4410  00067A  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  4411  00067C  0E00               	movlw	0
  4412  00067E  6FB9               	movwf	FlashReadUart@j& (0+255),b
  4413                           
  4414                           ;FlashApp.c: 66: int offset = 0;
  4415  000680  0E00               	movlw	0
  4416  000682  6FBE               	movwf	(FlashReadUart@offset+1)& (0+255),b
  4417  000684  0E00               	movlw	0
  4418  000686  6FBD               	movwf	FlashReadUart@offset& (0+255),b
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;FlashApp.c: 67: char TxMsg[(64) + (0x4) + 1];
  4422                           ;FlashApp.c: 68: ZeroArray(TxMsg, (64) + (0x4) + 1);
  4423  000688  0E6C               	movlw	low FlashReadUart@TxMsg
  4424  00068A  6E20               	movwf	ZeroArray@array,c
  4425  00068C  0E00               	movlw	high FlashReadUart@TxMsg
  4426  00068E  6E21               	movwf	ZeroArray@array+1,c
  4427  000690  0E00               	movlw	0
  4428  000692  6E23               	movwf	ZeroArray@size+1,c
  4429  000694  0E45               	movlw	69
  4430  000696  6E22               	movwf	ZeroArray@size,c
  4431  000698  ECBC  F01A         	call	_ZeroArray	;wreg free
  4432                           
  4433                           ;FlashApp.c: 71: if (FLASH_IsWriteDone() == 0)
  4434  00069C  EC61  F01B         	call	_FLASH_IsWriteDone	;wreg free
  4435  0006A0  0900               	iorlw	0
  4436  0006A2  B4D8               	btfsc	status,2,c
  4437  0006A4  0012               	return	
  4438                           
  4439                           ;FlashApp.c: 74: }
  4440                           ;FlashApp.c: 76: if (numOfReadSamples)
  4441                           
  4442                           ;FlashApp.c: 72: {
  4443                           ;FlashApp.c: 73: return;
  4444  0006A6  503E               	movf	_numOfReadSamples,w,c
  4445  0006A8  103F               	iorwf	_numOfReadSamples+1,w,c
  4446  0006AA  1040               	iorwf	_numOfReadSamples+2,w,c
  4447  0006AC  1041               	iorwf	_numOfReadSamples+3,w,c
  4448  0006AE  B4D8               	btfsc	status,2,c
  4449  0006B0  D0EE               	goto	l282
  4450                           
  4451                           ;FlashApp.c: 77: {
  4452                           ;FlashApp.c: 78: if (numOfValidateSamples)
  4453  0006B2  5031               	movf	_numOfValidateSamples,w,c
  4454  0006B4  1032               	iorwf	_numOfValidateSamples+1,w,c
  4455  0006B6  1033               	iorwf	_numOfValidateSamples+2,w,c
  4456  0006B8  1034               	iorwf	_numOfValidateSamples+3,w,c
  4457  0006BA  B4D8               	btfsc	status,2,c
  4458  0006BC  D09A               	goto	l283
  4459                           
  4460                           ;FlashApp.c: 79: {
  4461                           ;FlashApp.c: 80: offset = numOfValidateSamples - (numOfValidateSamples > numOfSampleToRe
      +                          ad)? numOfValidateSamples : numOfSampleToRead;
  4462  0006BE  C024  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4463  0006C2  C025  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4464  0006C6  0E00               	movlw	0
  4465  0006C8  0100               	movlb	0	; () banked
  4466  0006CA  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4467  0006CC  0EFF               	movlw	255
  4468  0006CE  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  4469  0006D0  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  4470  0006D2  5031               	movf	_numOfValidateSamples,w,c
  4471  0006D4  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  4472  0006D6  5032               	movf	_numOfValidateSamples+1,w,c
  4473  0006D8  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  4474  0006DA  5033               	movf	_numOfValidateSamples+2,w,c
  4475  0006DC  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  4476  0006DE  5034               	movf	_numOfValidateSamples+3,w,c
  4477  0006E0  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  4478  0006E2  B0D8               	btfsc	status,0,c
  4479  0006E4  D002               	goto	u6990
  4480  0006E6  0E01               	movlw	1
  4481  0006E8  D001               	goto	u7000
  4482  0006EA                     u6990:
  4483  0006EA  0E00               	movlw	0
  4484  0006EC                     u7000:
  4485  0006EC  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4486  0006EE  6B65               	clrf	(??_FlashReadUart+5)& (0+255),b
  4487  0006F0  6B66               	clrf	(??_FlashReadUart+6)& (0+255),b
  4488  0006F2  6B67               	clrf	(??_FlashReadUart+7)& (0+255),b
  4489  0006F4  1F64               	comf	(??_FlashReadUart+4)& (0+255),f,b
  4490  0006F6  1F65               	comf	(??_FlashReadUart+5)& (0+255),f,b
  4491  0006F8  1F66               	comf	(??_FlashReadUart+6)& (0+255),f,b
  4492  0006FA  1F67               	comf	(??_FlashReadUart+7)& (0+255),f,b
  4493  0006FC  2B64               	incf	(??_FlashReadUart+4)& (0+255),f,b
  4494  0006FE  0E00               	movlw	0
  4495  000700  2365               	addwfc	(??_FlashReadUart+5)& (0+255),f,b
  4496  000702  2366               	addwfc	(??_FlashReadUart+6)& (0+255),f,b
  4497  000704  2367               	addwfc	(??_FlashReadUart+7)& (0+255),f,b
  4498  000706  5031               	movf	_numOfValidateSamples,w,c
  4499  000708  2564               	addwf	(??_FlashReadUart+4)& (0+255),w,b
  4500  00070A  6F68               	movwf	(??_FlashReadUart+8)& (0+255),b
  4501  00070C  5032               	movf	_numOfValidateSamples+1,w,c
  4502  00070E  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  4503  000710  6F69               	movwf	(??_FlashReadUart+9)& (0+255),b
  4504  000712  5033               	movf	_numOfValidateSamples+2,w,c
  4505  000714  2166               	addwfc	(??_FlashReadUart+6)& (0+255),w,b
  4506  000716  6F6A               	movwf	(??_FlashReadUart+10)& (0+255),b
  4507  000718  5034               	movf	_numOfValidateSamples+3,w,c
  4508  00071A  2167               	addwfc	(??_FlashReadUart+7)& (0+255),w,b
  4509  00071C  6F6B               	movwf	(??_FlashReadUart+11)& (0+255),b
  4510  00071E  5168               	movf	(??_FlashReadUart+8)& (0+255),w,b
  4511  000720  1169               	iorwf	(??_FlashReadUart+9)& (0+255),w,b
  4512  000722  116A               	iorwf	(??_FlashReadUart+10)& (0+255),w,b
  4513  000724  116B               	iorwf	(??_FlashReadUart+11)& (0+255),w,b
  4514  000726  A4D8               	btfss	status,2,c
  4515  000728  D00A               	goto	l285
  4516                           
  4517                           ; BSR set to: 0
  4518  00072A  C024  F0B1         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$557
  4519  00072E  C025  F0B2         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$557+1
  4520  000732  0E00               	movlw	0
  4521  000734  BFB2               	btfsc	(_FlashReadUart$557+1)& (0+255),7,b
  4522  000736  0EFF               	movlw	-1
  4523  000738  6FB3               	movwf	(_FlashReadUart$557+2)& (0+255),b
  4524  00073A  6FB4               	movwf	(_FlashReadUart$557+3)& (0+255),b
  4525  00073C  D008               	goto	l287
  4526  00073E                     l285:
  4527                           
  4528                           ; BSR set to: 0
  4529  00073E  C031  F0B1         	movff	_numOfValidateSamples,_FlashReadUart$557
  4530  000742  C032  F0B2         	movff	_numOfValidateSamples+1,_FlashReadUart$557+1
  4531  000746  C033  F0B3         	movff	_numOfValidateSamples+2,_FlashReadUart$557+2
  4532  00074A  C034  F0B4         	movff	_numOfValidateSamples+3,_FlashReadUart$557+3
  4533  00074E                     l287:
  4534                           
  4535                           ; BSR set to: 0
  4536  00074E  C0B1  F0BD         	movff	_FlashReadUart$557,FlashReadUart@offset
  4537  000752  C0B2  F0BE         	movff	_FlashReadUart$557+1,FlashReadUart@offset+1
  4538                           
  4539                           ; BSR set to: 0
  4540                           ;FlashApp.c: 81: if(offset < 0)
  4541  000756  AFBE               	btfss	(FlashReadUart@offset+1)& (0+255),7,b
  4542  000758  D091               	goto	l290
  4543                           
  4544                           ; BSR set to: 0
  4545                           ;FlashApp.c: 82: {
  4546                           ;FlashApp.c: 83: if (abs(offset) > numOfReadSamples)
  4547  00075A  C0BD  F018         	movff	FlashReadUart@offset,abs@a
  4548  00075E  C0BE  F019         	movff	FlashReadUart@offset+1,abs@a+1
  4549  000762  ECFA  F019         	call	_abs	;wreg free
  4550  000766  C018  F060         	movff	?_abs,??_FlashReadUart
  4551  00076A  C019  F061         	movff	?_abs+1,??_FlashReadUart+1
  4552  00076E  0E00               	movlw	0
  4553  000770  0100               	movlb	0	; () banked
  4554  000772  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4555  000774  0EFF               	movlw	255
  4556  000776  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  4557  000778  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  4558  00077A  5160               	movf	??_FlashReadUart& (0+255),w,b
  4559  00077C  5C3E               	subwf	_numOfReadSamples,w,c
  4560  00077E  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  4561  000780  583F               	subwfb	_numOfReadSamples+1,w,c
  4562  000782  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  4563  000784  5840               	subwfb	_numOfReadSamples+2,w,c
  4564  000786  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  4565  000788  5841               	subwfb	_numOfReadSamples+3,w,c
  4566  00078A  B0D8               	btfsc	status,0,c
  4567  00078C  D016               	goto	l289
  4568                           
  4569                           ; BSR set to: 0
  4570                           ;FlashApp.c: 84: {
  4571                           ;FlashApp.c: 85: numOfSampleToRead += offset + numOfReadSamples;
  4572  00078E  503E               	movf	_numOfReadSamples,w,c
  4573  000790  25BD               	addwf	FlashReadUart@offset& (0+255),w,b
  4574  000792  6F60               	movwf	??_FlashReadUart& (0+255),b
  4575  000794  503F               	movf	_numOfReadSamples+1,w,c
  4576  000796  21BE               	addwfc	(FlashReadUart@offset+1)& (0+255),w,b
  4577  000798  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  4578  00079A  5160               	movf	??_FlashReadUart& (0+255),w,b
  4579  00079C  2624               	addwf	FlashReadUart@numOfSampleToRead,f,c
  4580  00079E  5161               	movf	(??_FlashReadUart+1)& (0+255),w,b
  4581  0007A0  2225               	addwfc	FlashReadUart@numOfSampleToRead+1,f,c
  4582                           
  4583                           ; BSR set to: 0
  4584                           ;FlashApp.c: 86: offset = numOfReadSamples * (-1);
  4585  0007A2  C03E  F060         	movff	_numOfReadSamples,??_FlashReadUart
  4586  0007A6  C03F  F061         	movff	_numOfReadSamples+1,??_FlashReadUart+1
  4587  0007AA  1F60               	comf	??_FlashReadUart& (0+255),f,b
  4588  0007AC  1F61               	comf	(??_FlashReadUart+1)& (0+255),f,b
  4589  0007AE  4B60               	infsnz	??_FlashReadUart& (0+255),f,b
  4590  0007B0  2B61               	incf	(??_FlashReadUart+1)& (0+255),f,b
  4591  0007B2  C060  F0BD         	movff	??_FlashReadUart,FlashReadUart@offset
  4592  0007B6  C061  F0BE         	movff	??_FlashReadUart+1,FlashReadUart@offset+1
  4593  0007BA                     l289:
  4594                           
  4595                           ; BSR set to: 0
  4596                           ;FlashApp.c: 88: }
  4597                           ;FlashApp.c: 90: readAddress += offset * (64);
  4598  0007BA  C0BD  F060         	movff	FlashReadUart@offset,??_FlashReadUart
  4599  0007BE  C0BE  F061         	movff	FlashReadUart@offset+1,??_FlashReadUart+1
  4600  0007C2  0E06               	movlw	6
  4601  0007C4                     u7045:
  4602  0007C4  90D8               	bcf	status,0,c
  4603  0007C6  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  4604  0007C8  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  4605  0007CA  2EE8               	decfsz	wreg,f,c
  4606  0007CC  D7FB               	goto	u7045
  4607  0007CE  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  4608  0007D2  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  4609  0007D6  0E00               	movlw	0
  4610  0007D8  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4611  0007DA  0EFF               	movlw	255
  4612  0007DC  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4613  0007DE  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  4614  0007E0  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  4615  0007E2  27F7               	addwf	_readAddress& (0+255),f,b
  4616  0007E4  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  4617  0007E6  23F8               	addwfc	(_readAddress+1)& (0+255),f,b
  4618  0007E8  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  4619  0007EA  23F9               	addwfc	(_readAddress+2)& (0+255),f,b
  4620  0007EC  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  4621  0007EE  23FA               	addwfc	(_readAddress+3)& (0+255),f,b
  4622                           
  4623                           ; BSR set to: 0
  4624                           ;FlashApp.c: 91: }
  4625                           ;FlashApp.c: 92: }
  4626  0007F0  D045               	goto	l290
  4627  0007F2                     l283:
  4628                           
  4629                           ;FlashApp.c: 93: else
  4630                           ;FlashApp.c: 94: {
  4631                           ;FlashApp.c: 95: numOfSampleToRead = (numOfReadSamples > numOfSampleToRead)? numOfSample
      +                          ToRead : numOfReadSamples;
  4632                           
  4633                           ; BSR set to: 0
  4634  0007F2  C024  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4635  0007F6  C025  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4636  0007FA  0E00               	movlw	0
  4637  0007FC  0100               	movlb	0	; () banked
  4638  0007FE  BF61               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  4639  000800  0EFF               	movlw	255
  4640  000802  6F62               	movwf	(??_FlashReadUart+2)& (0+255),b
  4641  000804  6F63               	movwf	(??_FlashReadUart+3)& (0+255),b
  4642  000806  503E               	movf	_numOfReadSamples,w,c
  4643  000808  5D60               	subwf	??_FlashReadUart& (0+255),w,b
  4644  00080A  503F               	movf	_numOfReadSamples+1,w,c
  4645  00080C  5961               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  4646  00080E  5040               	movf	_numOfReadSamples+2,w,c
  4647  000810  5962               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  4648  000812  5041               	movf	_numOfReadSamples+3,w,c
  4649  000814  5963               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  4650  000816  A0D8               	btfss	status,0,c
  4651  000818  D009               	goto	l292
  4652                           
  4653                           ; BSR set to: 0
  4654  00081A  C03E  F0B5         	movff	_numOfReadSamples,_FlashReadUart$558
  4655  00081E  C03F  F0B6         	movff	_numOfReadSamples+1,_FlashReadUart$558+1
  4656  000822  C040  F0B7         	movff	_numOfReadSamples+2,_FlashReadUart$558+2
  4657  000826  C041  F0B8         	movff	_numOfReadSamples+3,_FlashReadUart$558+3
  4658  00082A  D009               	goto	l294
  4659  00082C                     l292:
  4660                           
  4661                           ; BSR set to: 0
  4662                           
  4663                           ; BSR set to: 0
  4664  00082C  C024  F0B5         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$558
  4665  000830  C025  F0B6         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$558+1
  4666  000834  0E00               	movlw	0
  4667  000836  BFB6               	btfsc	(_FlashReadUart$558+1)& (0+255),7,b
  4668  000838  0EFF               	movlw	-1
  4669  00083A  6FB7               	movwf	(_FlashReadUart$558+2)& (0+255),b
  4670  00083C  6FB8               	movwf	(_FlashReadUart$558+3)& (0+255),b
  4671  00083E                     l294:
  4672                           
  4673                           ; BSR set to: 0
  4674                           
  4675                           ; BSR set to: 0
  4676  00083E  C0B5  F024         	movff	_FlashReadUart$558,FlashReadUart@numOfSampleToRead
  4677  000842  C0B6  F025         	movff	_FlashReadUart$558+1,FlashReadUart@numOfSampleToRead+1
  4678                           
  4679                           ; BSR set to: 0
  4680                           ;FlashApp.c: 96: readAddress -= numOfSampleToRead * (64);
  4681  000846  C024  F060         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  4682  00084A  C025  F061         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  4683  00084E  0E06               	movlw	6
  4684  000850                     u7065:
  4685  000850  90D8               	bcf	status,0,c
  4686  000852  3760               	rlcf	??_FlashReadUart& (0+255),f,b
  4687  000854  3761               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  4688  000856  2EE8               	decfsz	wreg,f,c
  4689  000858  D7FB               	goto	u7065
  4690  00085A  C060  F062         	movff	??_FlashReadUart,??_FlashReadUart+2
  4691  00085E  C061  F063         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  4692  000862  0E00               	movlw	0
  4693  000864  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4694  000866  0EFF               	movlw	255
  4695  000868  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4696  00086A  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  4697  00086C  5162               	movf	(??_FlashReadUart+2)& (0+255),w,b
  4698  00086E  5FF7               	subwf	_readAddress& (0+255),f,b
  4699  000870  5163               	movf	(??_FlashReadUart+3)& (0+255),w,b
  4700  000872  5BF8               	subwfb	(_readAddress+1)& (0+255),f,b
  4701  000874  5164               	movf	(??_FlashReadUart+4)& (0+255),w,b
  4702  000876  5BF9               	subwfb	(_readAddress+2)& (0+255),f,b
  4703  000878  5165               	movf	(??_FlashReadUart+5)& (0+255),w,b
  4704  00087A  5BFA               	subwfb	(_readAddress+3)& (0+255),f,b
  4705  00087C                     l290:
  4706                           
  4707                           ; BSR set to: 0
  4708                           ;FlashApp.c: 97: }
  4709                           ;FlashApp.c: 99: if (readAddress <= 0x4000)
  4710                           
  4711                           ; BSR set to: 0
  4712  00087C  51FA               	movf	(_readAddress+3)& (0+255),w,b
  4713  00087E  11F9               	iorwf	(_readAddress+2)& (0+255),w,b
  4714  000880  E138               	bnz	l7252
  4715  000882  05F7               	decf	_readAddress& (0+255),w,b
  4716  000884  0E40               	movlw	64
  4717  000886  59F8               	subwfb	(_readAddress+1)& (0+255),w,b
  4718  000888  B0D8               	btfsc	status,0,c
  4719  00088A  D033               	goto	l300
  4720  00088C  D023               	goto	u7100
  4721  00088E                     l282:
  4722                           
  4723                           ;FlashApp.c: 104: else
  4724                           ;FlashApp.c: 105: {
  4725                           ;FlashApp.c: 106: if ((isReWriteDone) && (readAddress <= writeAddress))
  4726                           
  4727                           ; BSR set to: 0
  4728  00088E  503B               	movf	_isReWriteDone,w,c
  4729  000890  B4D8               	btfsc	status,2,c
  4730  000892  D029               	goto	l297
  4731  000894  0100               	movlb	0	; () banked
  4732  000896  51F7               	movf	_readAddress& (0+255),w,b
  4733  000898  5C42               	subwf	_writeAddress,w,c
  4734  00089A  51F8               	movf	(_readAddress+1)& (0+255),w,b
  4735  00089C  5843               	subwfb	_writeAddress+1,w,c
  4736  00089E  51F9               	movf	(_readAddress+2)& (0+255),w,b
  4737  0008A0  5844               	subwfb	_writeAddress+2,w,c
  4738  0008A2  51FA               	movf	(_readAddress+3)& (0+255),w,b
  4739  0008A4  5845               	subwfb	_writeAddress+3,w,c
  4740  0008A6  A0D8               	btfss	status,0,c
  4741  0008A8  D01E               	goto	l297
  4742                           
  4743                           ; BSR set to: 0
  4744                           ;FlashApp.c: 107: {
  4745                           ;FlashApp.c: 108: readAddress = writeAddress + (64);
  4746  0008AA  0E40               	movlw	64
  4747  0008AC  2442               	addwf	_writeAddress,w,c
  4748  0008AE  6FF7               	movwf	_readAddress& (0+255),b
  4749  0008B0  0E00               	movlw	0
  4750  0008B2  2043               	addwfc	_writeAddress+1,w,c
  4751  0008B4  6FF8               	movwf	(_readAddress+1)& (0+255),b
  4752  0008B6  0E00               	movlw	0
  4753  0008B8  2044               	addwfc	_writeAddress+2,w,c
  4754  0008BA  6FF9               	movwf	(_readAddress+2)& (0+255),b
  4755  0008BC  0E00               	movlw	0
  4756  0008BE  2045               	addwfc	_writeAddress+3,w,c
  4757  0008C0  6FFA               	movwf	(_readAddress+3)& (0+255),b
  4758                           
  4759                           ;FlashApp.c: 109: if (readAddress >= 0x7FF0)
  4760  0008C2  51FA               	movf	(_readAddress+3)& (0+255),w,b
  4761  0008C4  11F9               	iorwf	(_readAddress+2)& (0+255),w,b
  4762  0008C6  E106               	bnz	u7100
  4763  0008C8  0EF0               	movlw	240
  4764  0008CA  5DF7               	subwf	_readAddress& (0+255),w,b
  4765  0008CC  0E7F               	movlw	127
  4766  0008CE  59F8               	subwfb	(_readAddress+1)& (0+255),w,b
  4767  0008D0  A0D8               	btfss	status,0,c
  4768  0008D2  D00F               	goto	l300
  4769  0008D4                     u7100:
  4770                           
  4771                           ; BSR set to: 0
  4772                           ;FlashApp.c: 110: {
  4773                           ;FlashApp.c: 111: readAddress = 0x4000;
  4774  0008D4  0E00               	movlw	0
  4775  0008D6  6FF7               	movwf	_readAddress& (0+255),b
  4776  0008D8  0E40               	movlw	64
  4777  0008DA  6FF8               	movwf	(_readAddress+1)& (0+255),b
  4778  0008DC  0E00               	movlw	0
  4779  0008DE  6FF9               	movwf	(_readAddress+2)& (0+255),b
  4780  0008E0  0E00               	movlw	0
  4781  0008E2  6FFA               	movwf	(_readAddress+3)& (0+255),b
  4782                           
  4783                           ; BSR set to: 0
  4784                           ;FlashApp.c: 112: }
  4785                           ;FlashApp.c: 114: }
  4786  0008E4  D006               	goto	l300
  4787  0008E6                     l297:
  4788                           
  4789                           ;FlashApp.c: 115: else
  4790                           ;FlashApp.c: 116: {
  4791                           ;FlashApp.c: 117: if(numOfValidateSamples == 0)
  4792                           
  4793                           ; BSR set to: 0
  4794  0008E6  5031               	movf	_numOfValidateSamples,w,c
  4795  0008E8  1032               	iorwf	_numOfValidateSamples+1,w,c
  4796  0008EA  1033               	iorwf	_numOfValidateSamples+2,w,c
  4797  0008EC  1034               	iorwf	_numOfValidateSamples+3,w,c
  4798  0008EE  B4D8               	btfsc	status,2,c
  4799  0008F0  0012               	return	
  4800  0008F2                     l300:
  4801  0008F2                     l7252:
  4802                           
  4803                           ;FlashApp.c: 119: }
  4804                           ;FlashApp.c: 120: }
  4805                           ;FlashApp.c: 123: TxMsg[(0)] = (0x24);
  4806  0008F2  0E24               	movlw	36
  4807  0008F4  0100               	movlb	0	; () banked
  4808  0008F6  6F6C               	movwf	FlashReadUart@TxMsg& (0+255),b
  4809                           
  4810                           ;FlashApp.c: 124: TxMsg[(1)] = FLASH_MSG;
  4811  0008F8  0E05               	movlw	5
  4812  0008FA  6F6D               	movwf	(FlashReadUart@TxMsg+1)& (0+255),b
  4813                           
  4814                           ;FlashApp.c: 125: TxMsg[(2)] = FLASH_SEND_RAW_DATA;
  4815  0008FC  0E54               	movlw	84
  4816  0008FE  6F6E               	movwf	(FlashReadUart@TxMsg+2)& (0+255),b
  4817                           
  4818                           ;FlashApp.c: 126: TxMsg[(3)] = (64);
  4819  000900  0E40               	movlw	64
  4820  000902  6F6F               	movwf	(FlashReadUart@TxMsg+3)& (0+255),b
  4821                           
  4822                           ;FlashApp.c: 128: for (j=0; j<numOfSampleToRead; j++)
  4823  000904  0E00               	movlw	0
  4824  000906  6FBA               	movwf	(FlashReadUart@j+1)& (0+255),b
  4825  000908  0E00               	movlw	0
  4826  00090A  6FB9               	movwf	FlashReadUart@j& (0+255),b
  4827  00090C  D084               	goto	l301
  4828  00090E                     
  4829                           ; BSR set to: 0
  4830                           ;FlashApp.c: 129: {
  4831                           ;FlashApp.c: 131: for(int idx = 0; idx < (64); idx++)
  4832                           
  4833                           ; BSR set to: 0
  4834  00090E  0E00               	movlw	0
  4835  000910  6FBC               	movwf	(FlashReadUart@idx+1)& (0+255),b
  4836  000912  0E00               	movlw	0
  4837  000914  6FBB               	movwf	FlashReadUart@idx& (0+255),b
  4838  000916                     l7256:
  4839                           
  4840                           ; BSR set to: 0
  4841  000916  BFBC               	btfsc	(FlashReadUart@idx+1)& (0+255),7,b
  4842  000918  D006               	goto	l303
  4843  00091A  51BC               	movf	(FlashReadUart@idx+1)& (0+255),w,b
  4844  00091C  E12C               	bnz	l7266
  4845  00091E  0E40               	movlw	64
  4846  000920  5DBB               	subwf	FlashReadUart@idx& (0+255),w,b
  4847  000922  B0D8               	btfsc	status,0,c
  4848  000924  D028               	goto	u7130
  4849  000926                     l303:
  4850                           
  4851                           ; BSR set to: 0
  4852                           ;FlashApp.c: 132: {
  4853                           ;FlashApp.c: 133: TxMsg[(0x4) + idx] = FLASH_ReadByte(readAddress + idx);
  4854                           
  4855                           ; BSR set to: 0
  4856  000926  0E04               	movlw	4
  4857  000928  25BB               	addwf	FlashReadUart@idx& (0+255),w,b
  4858  00092A  6F60               	movwf	??_FlashReadUart& (0+255),b
  4859  00092C  0E00               	movlw	0
  4860  00092E  21BC               	addwfc	(FlashReadUart@idx+1)& (0+255),w,b
  4861  000930  6F61               	movwf	(??_FlashReadUart+1)& (0+255),b
  4862  000932  0E6C               	movlw	low FlashReadUart@TxMsg
  4863  000934  2560               	addwf	??_FlashReadUart& (0+255),w,b
  4864  000936  6ED9               	movwf	fsr2l,c
  4865  000938  0E00               	movlw	high FlashReadUart@TxMsg
  4866  00093A  2161               	addwfc	(??_FlashReadUart+1)& (0+255),w,b
  4867  00093C  6EDA               	movwf	fsr2h,c
  4868  00093E  C0BB  F062         	movff	FlashReadUart@idx,??_FlashReadUart+2
  4869  000942  C0BC  F063         	movff	FlashReadUart@idx+1,??_FlashReadUart+3
  4870  000946  0E00               	movlw	0
  4871  000948  BF63               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  4872  00094A  0EFF               	movlw	255
  4873  00094C  6F64               	movwf	(??_FlashReadUart+4)& (0+255),b
  4874  00094E  6F65               	movwf	(??_FlashReadUart+5)& (0+255),b
  4875  000950  51F7               	movf	_readAddress& (0+255),w,b
  4876  000952  2562               	addwf	(??_FlashReadUart+2)& (0+255),w,b
  4877  000954  6E18               	movwf	FLASH_ReadByte@flashAddr,c
  4878  000956  51F8               	movf	(_readAddress+1)& (0+255),w,b
  4879  000958  2163               	addwfc	(??_FlashReadUart+3)& (0+255),w,b
  4880  00095A  6E19               	movwf	FLASH_ReadByte@flashAddr+1,c
  4881  00095C  51F9               	movf	(_readAddress+2)& (0+255),w,b
  4882  00095E  2164               	addwfc	(??_FlashReadUart+4)& (0+255),w,b
  4883  000960  6E1A               	movwf	FLASH_ReadByte@flashAddr+2,c
  4884  000962  51FA               	movf	(_readAddress+3)& (0+255),w,b
  4885  000964  2165               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  4886  000966  6E1B               	movwf	FLASH_ReadByte@flashAddr+3,c
  4887  000968  EC34  F01B         	call	_FLASH_ReadByte	;wreg free
  4888  00096C  6EDF               	movwf	indf2,c
  4889  00096E  0100               	movlb	0	; () banked
  4890  000970  4BBB               	infsnz	FlashReadUart@idx& (0+255),f,b
  4891  000972  2BBC               	incf	(FlashReadUart@idx+1)& (0+255),f,b
  4892  000974  D7D0               	goto	l7256
  4893  000976                     u7130:
  4894  000976                     l7266:
  4895                           
  4896                           ; BSR set to: 0
  4897                           ;FlashApp.c: 134: }
  4898                           ;FlashApp.c: 136: readAddress += (64);
  4899  000976  0E40               	movlw	64
  4900  000978  27F7               	addwf	_readAddress& (0+255),f,b
  4901  00097A  0E00               	movlw	0
  4902  00097C  23F8               	addwfc	(_readAddress+1)& (0+255),f,b
  4903  00097E  23F9               	addwfc	(_readAddress+2)& (0+255),f,b
  4904  000980  23FA               	addwfc	(_readAddress+3)& (0+255),f,b
  4905                           
  4906                           ;FlashApp.c: 137: if (readAddress >= 0x7FF0)
  4907  000982  51FA               	movf	(_readAddress+3)& (0+255),w,b
  4908  000984  11F9               	iorwf	(_readAddress+2)& (0+255),w,b
  4909  000986  E106               	bnz	u7140
  4910  000988  0EF0               	movlw	240
  4911  00098A  5DF7               	subwf	_readAddress& (0+255),w,b
  4912  00098C  0E7F               	movlw	127
  4913  00098E  59F8               	subwfb	(_readAddress+1)& (0+255),w,b
  4914  000990  A0D8               	btfss	status,0,c
  4915  000992  D008               	goto	l305
  4916  000994                     u7140:
  4917                           
  4918                           ; BSR set to: 0
  4919                           ;FlashApp.c: 138: {
  4920                           ;FlashApp.c: 139: readAddress = 0x4000;
  4921  000994  0E00               	movlw	0
  4922  000996  6FF7               	movwf	_readAddress& (0+255),b
  4923  000998  0E40               	movlw	64
  4924  00099A  6FF8               	movwf	(_readAddress+1)& (0+255),b
  4925  00099C  0E00               	movlw	0
  4926  00099E  6FF9               	movwf	(_readAddress+2)& (0+255),b
  4927  0009A0  0E00               	movlw	0
  4928  0009A2  6FFA               	movwf	(_readAddress+3)& (0+255),b
  4929  0009A4                     l305:
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;FlashApp.c: 140: }
  4933                           ;FlashApp.c: 141: TxMsg[(64) + (0x4)] = crc8(TxMsg, (64) + (0x4));
  4934                           
  4935                           ; BSR set to: 0
  4936  0009A4  0E6C               	movlw	low FlashReadUart@TxMsg
  4937  0009A6  6E18               	movwf	crc8@dataArray,c
  4938  0009A8  0E00               	movlw	high FlashReadUart@TxMsg
  4939  0009AA  6E19               	movwf	crc8@dataArray+1,c
  4940  0009AC  0E00               	movlw	0
  4941  0009AE  6E1B               	movwf	crc8@dataSize+1,c
  4942  0009B0  0E44               	movlw	68
  4943  0009B2  6E1A               	movwf	crc8@dataSize,c
  4944  0009B4  ECA0  F016         	call	_crc8	;wreg free
  4945  0009B8  0100               	movlb	0	; () banked
  4946  0009BA  6FB0               	movwf	(FlashReadUart@TxMsg+68)& (0+255),b
  4947                           
  4948                           ; BSR set to: 0
  4949                           ;FlashApp.c: 143: WriteUartMessage(TxMsg, (64) + (0x4) + 1);
  4950  0009BC  0E6C               	movlw	low FlashReadUart@TxMsg
  4951  0009BE  6E19               	movwf	WriteUartMessage@dataBuf,c
  4952  0009C0  0E00               	movlw	high FlashReadUart@TxMsg
  4953  0009C2  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4954  0009C4  0E00               	movlw	0
  4955  0009C6  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4956  0009C8  0E45               	movlw	69
  4957  0009CA  6E1B               	movwf	WriteUartMessage@dataSize,c
  4958  0009CC  EC3A  F019         	call	_WriteUartMessage	;wreg free
  4959                           
  4960                           ;FlashApp.c: 145: if(numOfValidateSamples)
  4961  0009D0  5031               	movf	_numOfValidateSamples,w,c
  4962  0009D2  1032               	iorwf	_numOfValidateSamples+1,w,c
  4963  0009D4  1033               	iorwf	_numOfValidateSamples+2,w,c
  4964  0009D6  1034               	iorwf	_numOfValidateSamples+3,w,c
  4965  0009D8  B4D8               	btfsc	status,2,c
  4966  0009DA  D01A               	goto	l308
  4967                           
  4968                           ;FlashApp.c: 146: {
  4969                           ;FlashApp.c: 147: if (numOfReadSamples < ((0x4000-0x7FF0)/(64)))
  4970  0009DC  043E               	decf	_numOfReadSamples,w,c
  4971  0009DE  0EFF               	movlw	255
  4972  0009E0  583F               	subwfb	_numOfReadSamples+1,w,c
  4973  0009E2  0EFF               	movlw	255
  4974  0009E4  5840               	subwfb	_numOfReadSamples+2,w,c
  4975  0009E6  0EFF               	movlw	255
  4976  0009E8  5841               	subwfb	_numOfReadSamples+3,w,c
  4977  0009EA  B0D8               	btfsc	status,0,c
  4978  0009EC  D006               	goto	l307
  4979                           
  4980                           ;FlashApp.c: 148: {
  4981                           ;FlashApp.c: 149: numOfReadSamples++;
  4982  0009EE  0E01               	movlw	1
  4983  0009F0  263E               	addwf	_numOfReadSamples,f,c
  4984  0009F2  0E00               	movlw	0
  4985  0009F4  223F               	addwfc	_numOfReadSamples+1,f,c
  4986  0009F6  2240               	addwfc	_numOfReadSamples+2,f,c
  4987  0009F8  2241               	addwfc	_numOfReadSamples+3,f,c
  4988  0009FA                     l307:
  4989                           
  4990                           ;FlashApp.c: 150: }
  4991                           ;FlashApp.c: 151: if (numOfValidateSamples > 0)
  4992  0009FA  5031               	movf	_numOfValidateSamples,w,c
  4993  0009FC  1032               	iorwf	_numOfValidateSamples+1,w,c
  4994  0009FE  1033               	iorwf	_numOfValidateSamples+2,w,c
  4995  000A00  1034               	iorwf	_numOfValidateSamples+3,w,c
  4996  000A02  B4D8               	btfsc	status,2,c
  4997  000A04  D005               	goto	l308
  4998                           
  4999                           ;FlashApp.c: 152: {
  5000                           ;FlashApp.c: 153: numOfValidateSamples--;
  5001  000A06  0631               	decf	_numOfValidateSamples,f,c
  5002  000A08  0E00               	movlw	0
  5003  000A0A  5A32               	subwfb	_numOfValidateSamples+1,f,c
  5004  000A0C  5A33               	subwfb	_numOfValidateSamples+2,f,c
  5005  000A0E  5A34               	subwfb	_numOfValidateSamples+3,f,c
  5006  000A10                     l308:
  5007  000A10  0100               	movlb	0	; () banked
  5008  000A12  4BB9               	infsnz	FlashReadUart@j& (0+255),f,b
  5009  000A14  2BBA               	incf	(FlashReadUart@j+1)& (0+255),f,b
  5010  000A16                     l301:
  5011                           
  5012                           ; BSR set to: 0
  5013                           
  5014                           ; BSR set to: 0
  5015  000A16  5024               	movf	FlashReadUart@numOfSampleToRead,w,c
  5016  000A18  5DB9               	subwf	FlashReadUart@j& (0+255),w,b
  5017  000A1A  51BA               	movf	(FlashReadUart@j+1)& (0+255),w,b
  5018  000A1C  0A80               	xorlw	128
  5019  000A1E  6F60               	movwf	??_FlashReadUart& (0+255),b
  5020  000A20  5025               	movf	FlashReadUart@numOfSampleToRead+1,w,c
  5021  000A22  0A80               	xorlw	128
  5022  000A24  5960               	subwfb	??_FlashReadUart& (0+255),w,b
  5023  000A26  B0D8               	btfsc	status,0,c
  5024  000A28  0012               	return	
  5025  000A2A  D771               	goto	l302
  5026  000A2C                     __end_of_FlashReadUart:
  5027                           	opt stack 0
  5028                           tosu	equ	0xFFF
  5029                           tosh	equ	0xFFE
  5030                           tosl	equ	0xFFD
  5031                           pclath	equ	0xFFA
  5032                           tblptru	equ	0xFF8
  5033                           tblptrh	equ	0xFF7
  5034                           tblptrl	equ	0xFF6
  5035                           tablat	equ	0xFF5
  5036                           prodh	equ	0xFF4
  5037                           prodl	equ	0xFF3
  5038                           intcon	equ	0xFF2
  5039                           postinc0	equ	0xFEE
  5040                           wreg	equ	0xFE8
  5041                           postdec1	equ	0xFE5
  5042                           fsr1l	equ	0xFE1
  5043                           indf2	equ	0xFDF
  5044                           postinc2	equ	0xFDE
  5045                           fsr2h	equ	0xFDA
  5046                           fsr2l	equ	0xFD9
  5047                           status	equ	0xFD8
  5048                           
  5049 ;; *************** function _abs *****************
  5050 ;; Defined at:
  5051 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  5052 ;; Parameters:    Size  Location     Type
  5053 ;;  a               2   23[COMRAM] int 
  5054 ;; Auto vars:     Size  Location     Type
  5055 ;;		None
  5056 ;; Return value:  Size  Location     Type
  5057 ;;                  2   23[COMRAM] int 
  5058 ;; Registers used:
  5059 ;;		wreg, status,2, status,0
  5060 ;; Tracked objects:
  5061 ;;		On entry : 0/0
  5062 ;;		On exit  : 0/0
  5063 ;;		Unchanged: 0/0
  5064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5065 ;;      Params:         2       0       0       0       0       0       0
  5066 ;;      Locals:         0       0       0       0       0       0       0
  5067 ;;      Temps:          2       0       0       0       0       0       0
  5068 ;;      Totals:         4       0       0       0       0       0       0
  5069 ;;Total ram usage:        4 bytes
  5070 ;; Hardware stack levels used:    1
  5071 ;; Hardware stack levels required when called:    3
  5072 ;; This function calls:
  5073 ;;		Nothing
  5074 ;; This function is called by:
  5075 ;;		_FlashReadUart
  5076 ;; This function uses a non-reentrant model
  5077 ;;
  5078                           
  5079                           	psect	text23
  5080  0033F4                     __ptext23:
  5081                           	opt stack 0
  5082  0033F4                     _abs:
  5083                           	opt stack 24
  5084                           
  5085                           ;incstack = 0
  5086  0033F4  AE19               	btfss	abs@a+1,7,c
  5087  0033F6  D00D               	goto	l1453
  5088  0033F8  C018  F01A         	movff	abs@a,??_abs
  5089  0033FC  C019  F01B         	movff	abs@a+1,??_abs+1
  5090  003400  1E1A               	comf	??_abs,f,c
  5091  003402  1E1B               	comf	??_abs+1,f,c
  5092  003404  4A1A               	infsnz	??_abs,f,c
  5093  003406  2A1B               	incf	??_abs+1,f,c
  5094  003408  C01A  F018         	movff	??_abs,?_abs
  5095  00340C  C01B  F019         	movff	??_abs+1,?_abs+1
  5096  003410  0012               	return	
  5097  003412                     l1453:
  5098  003412  C018  F018         	movff	abs@a,?_abs
  5099  003416  C019  F019         	movff	abs@a+1,?_abs+1
  5100  00341A  0012               	return		;funcret
  5101  00341C                     __end_of_abs:
  5102                           	opt stack 0
  5103                           tosu	equ	0xFFF
  5104                           tosh	equ	0xFFE
  5105                           tosl	equ	0xFFD
  5106                           pclath	equ	0xFFA
  5107                           tblptru	equ	0xFF8
  5108                           tblptrh	equ	0xFF7
  5109                           tblptrl	equ	0xFF6
  5110                           tablat	equ	0xFF5
  5111                           prodh	equ	0xFF4
  5112                           prodl	equ	0xFF3
  5113                           intcon	equ	0xFF2
  5114                           postinc0	equ	0xFEE
  5115                           wreg	equ	0xFE8
  5116                           postdec1	equ	0xFE5
  5117                           fsr1l	equ	0xFE1
  5118                           indf2	equ	0xFDF
  5119                           postinc2	equ	0xFDE
  5120                           fsr2h	equ	0xFDA
  5121                           fsr2l	equ	0xFD9
  5122                           status	equ	0xFD8
  5123                           
  5124 ;; *************** function _FLASH_ReadByte *****************
  5125 ;; Defined at:
  5126 ;;		line 58 in file "mcc_generated_files/memory.c"
  5127 ;; Parameters:    Size  Location     Type
  5128 ;;  flashAddr       4   23[COMRAM] unsigned long 
  5129 ;; Auto vars:     Size  Location     Type
  5130 ;;		None
  5131 ;; Return value:  Size  Location     Type
  5132 ;;                  1    wreg      unsigned char 
  5133 ;; Registers used:
  5134 ;;		wreg, status,2
  5135 ;; Tracked objects:
  5136 ;;		On entry : 0/0
  5137 ;;		On exit  : 0/0
  5138 ;;		Unchanged: 0/0
  5139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5140 ;;      Params:         4       0       0       0       0       0       0
  5141 ;;      Locals:         0       0       0       0       0       0       0
  5142 ;;      Temps:          0       0       0       0       0       0       0
  5143 ;;      Totals:         4       0       0       0       0       0       0
  5144 ;;Total ram usage:        4 bytes
  5145 ;; Hardware stack levels used:    1
  5146 ;; Hardware stack levels required when called:    3
  5147 ;; This function calls:
  5148 ;;		Nothing
  5149 ;; This function is called by:
  5150 ;;		_FlashReadUart
  5151 ;;		_FlashTest
  5152 ;;		_FLASH_ReadWord
  5153 ;;		_FLASH_WriteByte
  5154 ;; This function uses a non-reentrant model
  5155 ;;
  5156                           
  5157                           	psect	text24
  5158  003668                     __ptext24:
  5159                           	opt stack 0
  5160  003668                     _FLASH_ReadByte:
  5161                           	opt stack 24
  5162                           
  5163                           ;memory.c: 60: TBLPTRU = (uint8_t)((flashAddr & 0x00FF0000) >> 16);
  5164                           
  5165                           ;incstack = 0
  5166  003668  C01A  FFF8         	movff	FLASH_ReadByte@flashAddr+2,tblptru	;volatile
  5167                           
  5168                           ;memory.c: 61: TBLPTRH = (uint8_t)((flashAddr & 0x0000FF00)>> 8);
  5169  00366C  C019  FFF7         	movff	FLASH_ReadByte@flashAddr+1,tblptrh	;volatile
  5170                           
  5171                           ;memory.c: 62: TBLPTRL = (uint8_t)(flashAddr & 0x000000FF);
  5172  003670  C018  FFF6         	movff	FLASH_ReadByte@flashAddr,tblptrl	;volatile
  5173  003674  0008               	tblrd		*	;# 
  5174                           
  5175                           ;memory.c: 66: return (TABLAT);
  5176  003676  50F5               	movf	tablat,w,c	;volatile
  5177  003678  0012               	return	
  5178  00367A                     __end_of_FLASH_ReadByte:
  5179                           	opt stack 0
  5180                           tosu	equ	0xFFF
  5181                           tosh	equ	0xFFE
  5182                           tosl	equ	0xFFD
  5183                           pclath	equ	0xFFA
  5184                           tblptru	equ	0xFF8
  5185                           tblptrh	equ	0xFF7
  5186                           tblptrl	equ	0xFF6
  5187                           tablat	equ	0xFF5
  5188                           prodh	equ	0xFF4
  5189                           prodl	equ	0xFF3
  5190                           intcon	equ	0xFF2
  5191                           postinc0	equ	0xFEE
  5192                           wreg	equ	0xFE8
  5193                           postdec1	equ	0xFE5
  5194                           fsr1l	equ	0xFE1
  5195                           indf2	equ	0xFDF
  5196                           postinc2	equ	0xFDE
  5197                           fsr2h	equ	0xFDA
  5198                           fsr2l	equ	0xFD9
  5199                           status	equ	0xFD8
  5200                           
  5201 ;; *************** function _FlashReadCondition *****************
  5202 ;; Defined at:
  5203 ;;		line 174 in file "FlashApp.c"
  5204 ;; Parameters:    Size  Location     Type
  5205 ;;		None
  5206 ;; Auto vars:     Size  Location     Type
  5207 ;;  TxMsg           9   39[COMRAM] unsigned char [9]
  5208 ;; Return value:  Size  Location     Type
  5209 ;;                  1    wreg      void 
  5210 ;; Registers used:
  5211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5212 ;; Tracked objects:
  5213 ;;		On entry : 0/0
  5214 ;;		On exit  : 0/0
  5215 ;;		Unchanged: 0/0
  5216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5217 ;;      Params:         0       0       0       0       0       0       0
  5218 ;;      Locals:         9       0       0       0       0       0       0
  5219 ;;      Temps:          4       0       0       0       0       0       0
  5220 ;;      Totals:        13       0       0       0       0       0       0
  5221 ;;Total ram usage:       13 bytes
  5222 ;; Hardware stack levels used:    1
  5223 ;; Hardware stack levels required when called:    5
  5224 ;; This function calls:
  5225 ;;		_WriteUartMessage
  5226 ;;		_ZeroArray
  5227 ;;		_crc8
  5228 ;;		_make8
  5229 ;; This function is called by:
  5230 ;;		_GroupFlashMemory
  5231 ;; This function uses a non-reentrant model
  5232 ;;
  5233                           
  5234                           	psect	text25
  5235  00181C                     __ptext25:
  5236                           	opt stack 0
  5237  00181C                     _FlashReadCondition:
  5238                           	opt stack 23
  5239                           
  5240                           ;FlashApp.c: 177: char TxMsg[4 + (0x4) + 1];
  5241                           ;FlashApp.c: 178: ZeroArray(TxMsg, 4 + (0x4) + 1);
  5242                           
  5243                           ;incstack = 0
  5244  00181C  0E28               	movlw	low FlashReadCondition@TxMsg
  5245  00181E  6E20               	movwf	ZeroArray@array,c
  5246  001820  0E00               	movlw	high FlashReadCondition@TxMsg
  5247  001822  6E21               	movwf	ZeroArray@array+1,c
  5248  001824  0E00               	movlw	0
  5249  001826  6E23               	movwf	ZeroArray@size+1,c
  5250  001828  0E09               	movlw	9
  5251  00182A  6E22               	movwf	ZeroArray@size,c
  5252  00182C  ECBC  F01A         	call	_ZeroArray	;wreg free
  5253                           
  5254                           ;FlashApp.c: 181: TxMsg[(0)] = (0x24);
  5255  001830  0E24               	movlw	36
  5256  001832  6E28               	movwf	FlashReadCondition@TxMsg,c
  5257                           
  5258                           ;FlashApp.c: 182: TxMsg[(1)] = FLASH_MSG;
  5259  001834  0E05               	movlw	5
  5260  001836  6E29               	movwf	FlashReadCondition@TxMsg+1,c
  5261                           
  5262                           ;FlashApp.c: 183: TxMsg[(2)] = FLASH_READ_CONDITION;
  5263  001838  0E52               	movlw	82
  5264  00183A  6E2A               	movwf	FlashReadCondition@TxMsg+2,c
  5265                           
  5266                           ;FlashApp.c: 184: TxMsg[(3)] = 4;
  5267  00183C  0E04               	movlw	4
  5268  00183E  6E2B               	movwf	FlashReadCondition@TxMsg+3,c
  5269                           
  5270                           ;FlashApp.c: 189: TxMsg[(0x4) + 0] = make8(0x7FF0 - 0x4000,1);
  5271  001840  0EF0               	movlw	240
  5272  001842  6E18               	movwf	make8@data,c
  5273  001844  0E3F               	movlw	63
  5274  001846  6E19               	movwf	make8@data+1,c
  5275  001848  0E00               	movlw	0
  5276  00184A  6E1A               	movwf	make8@data+2,c
  5277  00184C  0E00               	movlw	0
  5278  00184E  6E1B               	movwf	make8@data+3,c
  5279  001850  0E01               	movlw	1
  5280  001852  6E1C               	movwf	make8@dataLocation,c
  5281  001854  EC17  F015         	call	_make8	;wreg free
  5282  001858  6E2C               	movwf	FlashReadCondition@TxMsg+4,c
  5283                           
  5284                           ;FlashApp.c: 190: TxMsg[(0x4) + 1] = make8(0x7FF0 - 0x4000,0);
  5285  00185A  0EF0               	movlw	240
  5286  00185C  6E18               	movwf	make8@data,c
  5287  00185E  0E3F               	movlw	63
  5288  001860  6E19               	movwf	make8@data+1,c
  5289  001862  0E00               	movlw	0
  5290  001864  6E1A               	movwf	make8@data+2,c
  5291  001866  0E00               	movlw	0
  5292  001868  6E1B               	movwf	make8@data+3,c
  5293  00186A  0E00               	movlw	0
  5294  00186C  6E1C               	movwf	make8@dataLocation,c
  5295  00186E  EC17  F015         	call	_make8	;wreg free
  5296  001872  6E2D               	movwf	FlashReadCondition@TxMsg+5,c
  5297                           
  5298                           ;FlashApp.c: 193: TxMsg[(0x4) + 2] = make8(0x7FF0 - writeAddress,1);
  5299  001874  C042  F024         	movff	_writeAddress,??_FlashReadCondition
  5300  001878  C043  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5301  00187C  C044  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5302  001880  C045  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5303  001884  1E24               	comf	??_FlashReadCondition,f,c
  5304  001886  1E25               	comf	??_FlashReadCondition+1,f,c
  5305  001888  1E26               	comf	??_FlashReadCondition+2,f,c
  5306  00188A  1E27               	comf	??_FlashReadCondition+3,f,c
  5307  00188C  2A24               	incf	??_FlashReadCondition,f,c
  5308  00188E  0E00               	movlw	0
  5309  001890  2225               	addwfc	??_FlashReadCondition+1,f,c
  5310  001892  2226               	addwfc	??_FlashReadCondition+2,f,c
  5311  001894  2227               	addwfc	??_FlashReadCondition+3,f,c
  5312  001896  0EF0               	movlw	240
  5313  001898  2424               	addwf	??_FlashReadCondition,w,c
  5314  00189A  6E18               	movwf	make8@data,c
  5315  00189C  0E7F               	movlw	127
  5316  00189E  2025               	addwfc	??_FlashReadCondition+1,w,c
  5317  0018A0  6E19               	movwf	make8@data+1,c
  5318  0018A2  0E00               	movlw	0
  5319  0018A4  2026               	addwfc	??_FlashReadCondition+2,w,c
  5320  0018A6  6E1A               	movwf	make8@data+2,c
  5321  0018A8  0E00               	movlw	0
  5322  0018AA  2027               	addwfc	??_FlashReadCondition+3,w,c
  5323  0018AC  6E1B               	movwf	make8@data+3,c
  5324  0018AE  0E01               	movlw	1
  5325  0018B0  6E1C               	movwf	make8@dataLocation,c
  5326  0018B2  EC17  F015         	call	_make8	;wreg free
  5327  0018B6  6E2E               	movwf	FlashReadCondition@TxMsg+6,c
  5328                           
  5329                           ;FlashApp.c: 194: TxMsg[(0x4) + 3] = make8(0x7FF0 - writeAddress,0);
  5330  0018B8  C042  F024         	movff	_writeAddress,??_FlashReadCondition
  5331  0018BC  C043  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5332  0018C0  C044  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5333  0018C4  C045  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5334  0018C8  1E24               	comf	??_FlashReadCondition,f,c
  5335  0018CA  1E25               	comf	??_FlashReadCondition+1,f,c
  5336  0018CC  1E26               	comf	??_FlashReadCondition+2,f,c
  5337  0018CE  1E27               	comf	??_FlashReadCondition+3,f,c
  5338  0018D0  2A24               	incf	??_FlashReadCondition,f,c
  5339  0018D2  0E00               	movlw	0
  5340  0018D4  2225               	addwfc	??_FlashReadCondition+1,f,c
  5341  0018D6  2226               	addwfc	??_FlashReadCondition+2,f,c
  5342  0018D8  2227               	addwfc	??_FlashReadCondition+3,f,c
  5343  0018DA  0EF0               	movlw	240
  5344  0018DC  2424               	addwf	??_FlashReadCondition,w,c
  5345  0018DE  6E18               	movwf	make8@data,c
  5346  0018E0  0E7F               	movlw	127
  5347  0018E2  2025               	addwfc	??_FlashReadCondition+1,w,c
  5348  0018E4  6E19               	movwf	make8@data+1,c
  5349  0018E6  0E00               	movlw	0
  5350  0018E8  2026               	addwfc	??_FlashReadCondition+2,w,c
  5351  0018EA  6E1A               	movwf	make8@data+2,c
  5352  0018EC  0E00               	movlw	0
  5353  0018EE  2027               	addwfc	??_FlashReadCondition+3,w,c
  5354  0018F0  6E1B               	movwf	make8@data+3,c
  5355  0018F2  0E00               	movlw	0
  5356  0018F4  6E1C               	movwf	make8@dataLocation,c
  5357  0018F6  EC17  F015         	call	_make8	;wreg free
  5358  0018FA  6E2F               	movwf	FlashReadCondition@TxMsg+7,c
  5359                           
  5360                           ;FlashApp.c: 196: TxMsg[4 + (0x4)] = crc8(TxMsg, 4 + (0x4));
  5361  0018FC  0E28               	movlw	low FlashReadCondition@TxMsg
  5362  0018FE  6E18               	movwf	crc8@dataArray,c
  5363  001900  0E00               	movlw	high FlashReadCondition@TxMsg
  5364  001902  6E19               	movwf	crc8@dataArray+1,c
  5365  001904  0E00               	movlw	0
  5366  001906  6E1B               	movwf	crc8@dataSize+1,c
  5367  001908  0E08               	movlw	8
  5368  00190A  6E1A               	movwf	crc8@dataSize,c
  5369  00190C  ECA0  F016         	call	_crc8	;wreg free
  5370  001910  6E30               	movwf	FlashReadCondition@TxMsg+8,c
  5371                           
  5372                           ;FlashApp.c: 198: WriteUartMessage(TxMsg, 4 + (0x4) + 1);
  5373  001912  0E28               	movlw	low FlashReadCondition@TxMsg
  5374  001914  6E19               	movwf	WriteUartMessage@dataBuf,c
  5375  001916  0E00               	movlw	high FlashReadCondition@TxMsg
  5376  001918  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5377  00191A  0E00               	movlw	0
  5378  00191C  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5379  00191E  0E09               	movlw	9
  5380  001920  6E1B               	movwf	WriteUartMessage@dataSize,c
  5381  001922  EC3A  F019         	call	_WriteUartMessage	;wreg free
  5382  001926  0012               	return		;funcret
  5383  001928                     __end_of_FlashReadCondition:
  5384                           	opt stack 0
  5385                           tosu	equ	0xFFF
  5386                           tosh	equ	0xFFE
  5387                           tosl	equ	0xFFD
  5388                           pclath	equ	0xFFA
  5389                           tblptru	equ	0xFF8
  5390                           tblptrh	equ	0xFF7
  5391                           tblptrl	equ	0xFF6
  5392                           tablat	equ	0xFF5
  5393                           prodh	equ	0xFF4
  5394                           prodl	equ	0xFF3
  5395                           intcon	equ	0xFF2
  5396                           postinc0	equ	0xFEE
  5397                           wreg	equ	0xFE8
  5398                           postdec1	equ	0xFE5
  5399                           fsr1l	equ	0xFE1
  5400                           indf2	equ	0xFDF
  5401                           postinc2	equ	0xFDE
  5402                           fsr2h	equ	0xFDA
  5403                           fsr2l	equ	0xFD9
  5404                           status	equ	0xFD8
  5405                           
  5406 ;; *************** function _FlashEreaseMem *****************
  5407 ;; Defined at:
  5408 ;;		line 164 in file "FlashApp.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;		None
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;		None
  5413 ;; Return value:  Size  Location     Type
  5414 ;;                  1    wreg      void 
  5415 ;; Registers used:
  5416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5417 ;; Tracked objects:
  5418 ;;		On entry : 0/0
  5419 ;;		On exit  : 0/0
  5420 ;;		Unchanged: 0/0
  5421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5422 ;;      Params:         0       0       0       0       0       0       0
  5423 ;;      Locals:         0       0       0       0       0       0       0
  5424 ;;      Temps:          0       0       0       0       0       0       0
  5425 ;;      Totals:         0       0       0       0       0       0       0
  5426 ;;Total ram usage:        0 bytes
  5427 ;; Hardware stack levels used:    1
  5428 ;; Hardware stack levels required when called:    6
  5429 ;; This function calls:
  5430 ;;		_SendAckMessage
  5431 ;;		_ZeroArray
  5432 ;; This function is called by:
  5433 ;;		_GroupFlashMemory
  5434 ;; This function uses a non-reentrant model
  5435 ;;
  5436                           
  5437                           	psect	text26
  5438  002C9C                     __ptext26:
  5439                           	opt stack 0
  5440  002C9C                     _FlashEreaseMem:
  5441                           	opt stack 22
  5442                           
  5443                           ;FlashApp.c: 166: writeAddress = 0x4000;
  5444                           
  5445                           ;incstack = 0
  5446  002C9C  0E00               	movlw	0
  5447  002C9E  6E42               	movwf	_writeAddress,c
  5448  002CA0  0E40               	movlw	64
  5449  002CA2  6E43               	movwf	_writeAddress+1,c
  5450  002CA4  0E00               	movlw	0
  5451  002CA6  6E44               	movwf	_writeAddress+2,c
  5452  002CA8  0E00               	movlw	0
  5453  002CAA  6E45               	movwf	_writeAddress+3,c
  5454                           
  5455                           ;FlashApp.c: 167: readAddress = 0x4000;
  5456  002CAC  0E00               	movlw	0
  5457  002CAE  0100               	movlb	0	; () banked
  5458  002CB0  6FF7               	movwf	_readAddress& (0+255),b
  5459  002CB2  0E40               	movlw	64
  5460  002CB4  6FF8               	movwf	(_readAddress+1)& (0+255),b
  5461  002CB6  0E00               	movlw	0
  5462  002CB8  6FF9               	movwf	(_readAddress+2)& (0+255),b
  5463  002CBA  0E00               	movlw	0
  5464  002CBC  6FFA               	movwf	(_readAddress+3)& (0+255),b
  5465                           
  5466                           ;FlashApp.c: 168: numOfValidateSamples = 0;
  5467  002CBE  0E00               	movlw	0
  5468  002CC0  6E31               	movwf	_numOfValidateSamples,c
  5469  002CC2  0E00               	movlw	0
  5470  002CC4  6E32               	movwf	_numOfValidateSamples+1,c
  5471  002CC6  0E00               	movlw	0
  5472  002CC8  6E33               	movwf	_numOfValidateSamples+2,c
  5473  002CCA  0E00               	movlw	0
  5474  002CCC  6E34               	movwf	_numOfValidateSamples+3,c
  5475                           
  5476                           ; BSR set to: 0
  5477                           ;FlashApp.c: 169: ZeroArray(sampleArray, (64)/sizeof(adc_result_t));
  5478  002CCE  0E6E               	movlw	low _sampleArray
  5479  002CD0  6E20               	movwf	ZeroArray@array,c
  5480  002CD2  0E01               	movlw	high _sampleArray
  5481  002CD4  6E21               	movwf	ZeroArray@array+1,c
  5482  002CD6  0E00               	movlw	0
  5483  002CD8  6E23               	movwf	ZeroArray@size+1,c
  5484  002CDA  0E20               	movlw	32
  5485  002CDC  6E22               	movwf	ZeroArray@size,c
  5486  002CDE  ECBC  F01A         	call	_ZeroArray	;wreg free
  5487                           
  5488                           ;FlashApp.c: 170: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_EREASE_MEMORY
      +                          );
  5489  002CE2  0E51               	movlw	81
  5490  002CE4  6E24               	movwf	SendAckMessage@inRequest,c
  5491  002CE6  0E05               	movlw	5
  5492  002CE8  EC77  F016         	call	_SendAckMessage
  5493  002CEC  0012               	return		;funcret
  5494  002CEE                     __end_of_FlashEreaseMem:
  5495                           	opt stack 0
  5496                           tosu	equ	0xFFF
  5497                           tosh	equ	0xFFE
  5498                           tosl	equ	0xFFD
  5499                           pclath	equ	0xFFA
  5500                           tblptru	equ	0xFF8
  5501                           tblptrh	equ	0xFF7
  5502                           tblptrl	equ	0xFF6
  5503                           tablat	equ	0xFF5
  5504                           prodh	equ	0xFF4
  5505                           prodl	equ	0xFF3
  5506                           intcon	equ	0xFF2
  5507                           postinc0	equ	0xFEE
  5508                           wreg	equ	0xFE8
  5509                           postdec1	equ	0xFE5
  5510                           fsr1l	equ	0xFE1
  5511                           indf2	equ	0xFDF
  5512                           postinc2	equ	0xFDE
  5513                           fsr2h	equ	0xFDA
  5514                           fsr2l	equ	0xFD9
  5515                           status	equ	0xFD8
  5516                           
  5517 ;; *************** function _DacSetValue *****************
  5518 ;; Defined at:
  5519 ;;		line 26 in file "DacApp.c"
  5520 ;; Parameters:    Size  Location     Type
  5521 ;;  data            2   45[COMRAM] PTR unsigned char 
  5522 ;;		 -> rxMsgData(20), 
  5523 ;; Auto vars:     Size  Location     Type
  5524 ;;  regData         4   21[BANK0 ] unsigned long 
  5525 ;; Return value:  Size  Location     Type
  5526 ;;                  1    wreg      void 
  5527 ;; Registers used:
  5528 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5529 ;; Tracked objects:
  5530 ;;		On entry : 0/0
  5531 ;;		On exit  : 0/0
  5532 ;;		Unchanged: 0/0
  5533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5534 ;;      Params:         2       0       0       0       0       0       0
  5535 ;;      Locals:         0       4       0       0       0       0       0
  5536 ;;      Temps:          0       0       0       0       0       0       0
  5537 ;;      Totals:         2       4       0       0       0       0       0
  5538 ;;Total ram usage:        6 bytes
  5539 ;; Hardware stack levels used:    1
  5540 ;; Hardware stack levels required when called:    7
  5541 ;; This function calls:
  5542 ;;		_GetIntFromUartData
  5543 ;;		_SWSPI_send_word
  5544 ;;		_SendAckMessage
  5545 ;; This function is called by:
  5546 ;;		_GroupDAC
  5547 ;; This function uses a non-reentrant model
  5548 ;;
  5549                           
  5550                           	psect	text27
  5551  002F6E                     __ptext27:
  5552                           	opt stack 0
  5553  002F6E                     _DacSetValue:
  5554                           	opt stack 21
  5555                           
  5556                           ;DacApp.c: 28: uint32_t regData = GetIntFromUartData(data);
  5557                           
  5558                           ;incstack = 0
  5559  002F6E  C02E  F066         	movff	DacSetValue@data,GetIntFromUartData@data
  5560  002F72  C02F  F067         	movff	DacSetValue@data+1,GetIntFromUartData@data+1
  5561  002F76  EC8C  F011         	call	_GetIntFromUartData	;wreg free
  5562  002F7A  C066  F075         	movff	?_GetIntFromUartData,DacSetValue@regData
  5563  002F7E  C067  F076         	movff	?_GetIntFromUartData+1,DacSetValue@regData+1
  5564  002F82  C068  F077         	movff	?_GetIntFromUartData+2,DacSetValue@regData+2
  5565  002F86  C069  F078         	movff	?_GetIntFromUartData+3,DacSetValue@regData+3
  5566                           
  5567                           ;DacApp.c: 29: SWSPI_send_word(EXT_DAC, regData, 3);
  5568  002F8A  C075  F021         	movff	DacSetValue@regData,SWSPI_send_word@data
  5569  002F8E  C076  F022         	movff	DacSetValue@regData+1,SWSPI_send_word@data+1
  5570  002F92  C077  F023         	movff	DacSetValue@regData+2,SWSPI_send_word@data+2
  5571  002F96  C078  F024         	movff	DacSetValue@regData+3,SWSPI_send_word@data+3
  5572  002F9A  0E03               	movlw	3
  5573  002F9C  6E25               	movwf	SWSPI_send_word@dataSize,c
  5574  002F9E  0E02               	movlw	2
  5575  002FA0  EC39  F011         	call	_SWSPI_send_word
  5576                           
  5577                           ;DacApp.c: 31: SendAckMessage((MSG_GROUPS)DAC_MSG, (MSG_REQUEST)DAC_SET_VALUE);
  5578  002FA4  0E61               	movlw	97
  5579  002FA6  6E24               	movwf	SendAckMessage@inRequest,c
  5580  002FA8  0E06               	movlw	6
  5581  002FAA  EC77  F016         	call	_SendAckMessage
  5582  002FAE  0012               	return		;funcret
  5583  002FB0                     __end_of_DacSetValue:
  5584                           	opt stack 0
  5585                           tosu	equ	0xFFF
  5586                           tosh	equ	0xFFE
  5587                           tosl	equ	0xFFD
  5588                           pclath	equ	0xFFA
  5589                           tblptru	equ	0xFF8
  5590                           tblptrh	equ	0xFF7
  5591                           tblptrl	equ	0xFF6
  5592                           tablat	equ	0xFF5
  5593                           prodh	equ	0xFF4
  5594                           prodl	equ	0xFF3
  5595                           intcon	equ	0xFF2
  5596                           postinc0	equ	0xFEE
  5597                           wreg	equ	0xFE8
  5598                           postdec1	equ	0xFE5
  5599                           fsr1l	equ	0xFE1
  5600                           indf2	equ	0xFDF
  5601                           postinc2	equ	0xFDE
  5602                           fsr2h	equ	0xFDA
  5603                           fsr2l	equ	0xFD9
  5604                           status	equ	0xFD8
  5605                           
  5606 ;; *************** function _GetIntFromUartData *****************
  5607 ;; Defined at:
  5608 ;;		line 40 in file "SystemCommon.c"
  5609 ;; Parameters:    Size  Location     Type
  5610 ;;  data            2    6[BANK0 ] PTR unsigned char 
  5611 ;;		 -> rxMsgData(20), 
  5612 ;; Auto vars:     Size  Location     Type
  5613 ;;  c               1   18[BANK0 ] unsigned char 
  5614 ;;  idx             2   19[BANK0 ] int 
  5615 ;;  dataRegArr      8   10[BANK0 ] unsigned char [8]
  5616 ;; Return value:  Size  Location     Type
  5617 ;;                  4    6[BANK0 ] unsigned long 
  5618 ;; Registers used:
  5619 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5620 ;; Tracked objects:
  5621 ;;		On entry : 0/0
  5622 ;;		On exit  : 0/0
  5623 ;;		Unchanged: 0/0
  5624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5625 ;;      Params:         0       4       0       0       0       0       0
  5626 ;;      Locals:         0      11       0       0       0       0       0
  5627 ;;      Temps:          0       0       0       0       0       0       0
  5628 ;;      Totals:         0      15       0       0       0       0       0
  5629 ;;Total ram usage:       15 bytes
  5630 ;; Hardware stack levels used:    1
  5631 ;; Hardware stack levels required when called:    6
  5632 ;; This function calls:
  5633 ;;		_ZeroArray
  5634 ;;		_strtol
  5635 ;; This function is called by:
  5636 ;;		_DacSetValue
  5637 ;;		_UpdateTxFreq
  5638 ;; This function uses a non-reentrant model
  5639 ;;
  5640                           
  5641                           	psect	text28
  5642  002318                     __ptext28:
  5643                           	opt stack 0
  5644  002318                     _GetIntFromUartData:
  5645                           	opt stack 21
  5646                           
  5647                           ;SystemCommon.c: 42: char dataRegArr[8];
  5648                           ;SystemCommon.c: 43: ZeroArray(dataRegArr, 8);
  5649                           
  5650                           ;incstack = 0
  5651  002318  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  5652  00231A  6E20               	movwf	ZeroArray@array,c
  5653  00231C  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5654  00231E  6E21               	movwf	ZeroArray@array+1,c
  5655  002320  0E00               	movlw	0
  5656  002322  6E23               	movwf	ZeroArray@size+1,c
  5657  002324  0E08               	movlw	8
  5658  002326  6E22               	movwf	ZeroArray@size,c
  5659  002328  ECBC  F01A         	call	_ZeroArray	;wreg free
  5660                           
  5661                           ;SystemCommon.c: 45: for(int idx = 0; idx < 8; idx++)
  5662  00232C  0E00               	movlw	0
  5663  00232E  0100               	movlb	0	; () banked
  5664  002330  6F74               	movwf	(GetIntFromUartData@idx+1)& (0+255),b
  5665  002332  0E00               	movlw	0
  5666  002334  6F73               	movwf	GetIntFromUartData@idx& (0+255),b
  5667  002336                     l6910:
  5668                           
  5669                           ; BSR set to: 0
  5670  002336  BF74               	btfsc	(GetIntFromUartData@idx+1)& (0+255),7,b
  5671  002338  D006               	goto	l1248
  5672  00233A  5174               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5673  00233C  E123               	bnz	l6928
  5674  00233E  0E08               	movlw	8
  5675  002340  5D73               	subwf	GetIntFromUartData@idx& (0+255),w,b
  5676  002342  B0D8               	btfsc	status,0,c
  5677  002344  D01F               	goto	u6600
  5678  002346                     l1248:
  5679                           
  5680                           ; BSR set to: 0
  5681                           ;SystemCommon.c: 46: {
  5682                           ;SystemCommon.c: 47: char c = data[idx] + '0';
  5683                           
  5684                           ; BSR set to: 0
  5685  002346  5173               	movf	GetIntFromUartData@idx& (0+255),w,b
  5686  002348  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  5687  00234A  6ED9               	movwf	fsr2l,c
  5688  00234C  5174               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5689  00234E  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  5690  002350  6EDA               	movwf	fsr2h,c
  5691  002352  50DF               	movf	indf2,w,c
  5692  002354  0F30               	addlw	48
  5693  002356  6F72               	movwf	GetIntFromUartData@c& (0+255),b
  5694                           
  5695                           ; BSR set to: 0
  5696                           ;SystemCommon.c: 48: if(c == 0x40)
  5697  002358  0E40               	movlw	64
  5698  00235A  1972               	xorwf	GetIntFromUartData@c& (0+255),w,b
  5699  00235C  B4D8               	btfsc	status,2,c
  5700  00235E  D012               	goto	u6600
  5701                           
  5702                           ; BSR set to: 0
  5703                           ;SystemCommon.c: 52: else
  5704                           ;SystemCommon.c: 53: {
  5705                           ;SystemCommon.c: 54: dataRegArr[idx] = data[idx] + '0';
  5706                           
  5707                           ; BSR set to: 0
  5708                           
  5709                           ; BSR set to: 0
  5710                           ;SystemCommon.c: 51: }
  5711                           
  5712                           ; BSR set to: 0
  5713                           ;SystemCommon.c: 49: {
  5714                           ;SystemCommon.c: 50: break;
  5715  002360  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  5716  002362  2573               	addwf	GetIntFromUartData@idx& (0+255),w,b
  5717  002364  6ED9               	movwf	fsr2l,c
  5718  002366  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5719  002368  2174               	addwfc	(GetIntFromUartData@idx+1)& (0+255),w,b
  5720  00236A  6EDA               	movwf	fsr2h,c
  5721  00236C  5173               	movf	GetIntFromUartData@idx& (0+255),w,b
  5722  00236E  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  5723  002370  6EE1               	movwf	fsr1l,c
  5724  002372  5174               	movf	(GetIntFromUartData@idx+1)& (0+255),w,b
  5725  002374  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  5726  002376  6EE2               	movwf	fsr1h,c
  5727  002378  50E7               	movf	indf1,w,c
  5728  00237A  0F30               	addlw	48
  5729  00237C  6EDF               	movwf	indf2,c
  5730                           
  5731                           ; BSR set to: 0
  5732                           
  5733                           ; BSR set to: 0
  5734  00237E  4B73               	infsnz	GetIntFromUartData@idx& (0+255),f,b
  5735  002380  2B74               	incf	(GetIntFromUartData@idx+1)& (0+255),f,b
  5736  002382  D7D9               	goto	l6910
  5737  002384                     u6600:
  5738  002384                     l6928:
  5739                           
  5740                           ; BSR set to: 0
  5741                           ;SystemCommon.c: 55: }
  5742                           ;SystemCommon.c: 57: }
  5743                           ;SystemCommon.c: 59: return strtol(dataRegArr, (0), 16);
  5744  002384  0E6A               	movlw	low GetIntFromUartData@dataRegArr
  5745  002386  6E24               	movwf	strtol@s,c
  5746  002388  0E00               	movlw	high GetIntFromUartData@dataRegArr
  5747  00238A  6E25               	movwf	strtol@s+1,c
  5748  00238C  0E00               	movlw	0
  5749  00238E  6E26               	movwf	strtol@endptr,c
  5750  002390  0E00               	movlw	0
  5751  002392  6E27               	movwf	strtol@endptr+1,c
  5752  002394  0E00               	movlw	0
  5753  002396  6E29               	movwf	strtol@base+1,c
  5754  002398  0E10               	movlw	16
  5755  00239A  6E28               	movwf	strtol@base,c
  5756  00239C  EC22  F008         	call	_strtol	;wreg free
  5757  0023A0  C024  F066         	movff	?_strtol,?_GetIntFromUartData
  5758  0023A4  C025  F067         	movff	?_strtol+1,?_GetIntFromUartData+1
  5759  0023A8  C026  F068         	movff	?_strtol+2,?_GetIntFromUartData+2
  5760  0023AC  C027  F069         	movff	?_strtol+3,?_GetIntFromUartData+3
  5761  0023B0  0012               	return	
  5762  0023B2                     __end_of_GetIntFromUartData:
  5763                           	opt stack 0
  5764                           tosu	equ	0xFFF
  5765                           tosh	equ	0xFFE
  5766                           tosl	equ	0xFFD
  5767                           pclath	equ	0xFFA
  5768                           tblptru	equ	0xFF8
  5769                           tblptrh	equ	0xFF7
  5770                           tblptrl	equ	0xFF6
  5771                           tablat	equ	0xFF5
  5772                           prodh	equ	0xFF4
  5773                           prodl	equ	0xFF3
  5774                           intcon	equ	0xFF2
  5775                           postinc0	equ	0xFEE
  5776                           wreg	equ	0xFE8
  5777                           indf1	equ	0xFE7
  5778                           postdec1	equ	0xFE5
  5779                           fsr1h	equ	0xFE2
  5780                           fsr1l	equ	0xFE1
  5781                           indf2	equ	0xFDF
  5782                           postinc2	equ	0xFDE
  5783                           fsr2h	equ	0xFDA
  5784                           fsr2l	equ	0xFD9
  5785                           status	equ	0xFD8
  5786                           
  5787 ;; *************** function _strtol *****************
  5788 ;; Defined at:
  5789 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  5790 ;; Parameters:    Size  Location     Type
  5791 ;;  s               2   35[COMRAM] PTR const unsigned char 
  5792 ;;		 -> GetIntFromUartData@dataRegArr(8), 
  5793 ;;  endptr          2   37[COMRAM] PTR PTR unsigned char 
  5794 ;;		 -> NULL(0), 
  5795 ;;  base            2   39[COMRAM] int 
  5796 ;; Auto vars:     Size  Location     Type
  5797 ;;  a               4    1[BANK0 ] long 
  5798 ;;  c               1    5[BANK0 ] unsigned char 
  5799 ;;  sign            1    0[BANK0 ] unsigned char 
  5800 ;; Return value:  Size  Location     Type
  5801 ;;                  4   35[COMRAM] long 
  5802 ;; Registers used:
  5803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5804 ;; Tracked objects:
  5805 ;;		On entry : 0/0
  5806 ;;		On exit  : 0/0
  5807 ;;		Unchanged: 0/0
  5808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5809 ;;      Params:         6       0       0       0       0       0       0
  5810 ;;      Locals:         0       6       0       0       0       0       0
  5811 ;;      Temps:          4       0       0       0       0       0       0
  5812 ;;      Totals:        10       6       0       0       0       0       0
  5813 ;;Total ram usage:       16 bytes
  5814 ;; Hardware stack levels used:    1
  5815 ;; Hardware stack levels required when called:    5
  5816 ;; This function calls:
  5817 ;;		___lmul
  5818 ;;		_isalpha
  5819 ;;		_isdigit
  5820 ;;		_isspace
  5821 ;;		_toupper
  5822 ;; This function is called by:
  5823 ;;		_GetIntFromUartData
  5824 ;; This function uses a non-reentrant model
  5825 ;;
  5826                           
  5827                           	psect	text29
  5828  001044                     __ptext29:
  5829                           	opt stack 0
  5830  001044                     _strtol:
  5831                           	opt stack 21
  5832                           
  5833                           ;incstack = 0
  5834  001044  C024  FFD9         	movff	strtol@s,fsr2l
  5835  001048  C025  FFDA         	movff	strtol@s+1,fsr2h
  5836  00104C  50DF               	movf	indf2,w,c
  5837  00104E  0100               	movlb	0	; () banked
  5838  001050  6F65               	movwf	strtol@c& (0+255),b
  5839                           
  5840                           ; BSR set to: 0
  5841  001052  4A24               	infsnz	strtol@s,f,c
  5842  001054  2A25               	incf	strtol@s+1,f,c
  5843                           
  5844                           ; BSR set to: 0
  5845  001056  5165               	movf	strtol@c& (0+255),w,b
  5846  001058  EC22  F01A         	call	_isspace
  5847  00105C  B0D8               	btfsc	status,0,c
  5848  00105E  D7F2               	goto	_strtol
  5849  001060  0E00               	movlw	0
  5850  001062  0100               	movlb	0	; () banked
  5851  001064  6F61               	movwf	strtol@a& (0+255),b
  5852  001066  0E00               	movlw	0
  5853  001068  6F62               	movwf	(strtol@a+1)& (0+255),b
  5854  00106A  0E00               	movlw	0
  5855  00106C  6F63               	movwf	(strtol@a+2)& (0+255),b
  5856  00106E  0E00               	movlw	0
  5857  001070  6F64               	movwf	(strtol@a+3)& (0+255),b
  5858  001072  0E00               	movlw	0
  5859  001074  6F60               	movwf	strtol@sign& (0+255),b
  5860                           
  5861                           ; BSR set to: 0
  5862  001076  0E2D               	movlw	45
  5863  001078  1965               	xorwf	strtol@c& (0+255),w,b
  5864  00107A  A4D8               	btfss	status,2,c
  5865  00107C  D003               	goto	l1986
  5866                           
  5867                           ; BSR set to: 0
  5868  00107E  0E01               	movlw	1
  5869  001080  6F60               	movwf	strtol@sign& (0+255),b
  5870  001082  D004               	goto	u6130
  5871  001084                     l1986:
  5872                           
  5873                           ; BSR set to: 0
  5874                           
  5875                           ; BSR set to: 0
  5876  001084  0E2B               	movlw	43
  5877  001086  1965               	xorwf	strtol@c& (0+255),w,b
  5878  001088  A4D8               	btfss	status,2,c
  5879  00108A  D008               	goto	l1988
  5880  00108C                     u6130:
  5881                           
  5882                           ; BSR set to: 0
  5883  00108C  C024  FFD9         	movff	strtol@s,fsr2l
  5884  001090  C025  FFDA         	movff	strtol@s+1,fsr2h
  5885  001094  50DF               	movf	indf2,w,c
  5886  001096  6F65               	movwf	strtol@c& (0+255),b
  5887                           
  5888                           ; BSR set to: 0
  5889  001098  4A24               	infsnz	strtol@s,f,c
  5890  00109A  2A25               	incf	strtol@s+1,f,c
  5891  00109C                     l1988:
  5892                           
  5893                           ; BSR set to: 0
  5894                           
  5895                           ; BSR set to: 0
  5896                           
  5897                           ; BSR set to: 0
  5898  00109C  0E30               	movlw	48
  5899  00109E  1965               	xorwf	strtol@c& (0+255),w,b
  5900  0010A0  A4D8               	btfss	status,2,c
  5901  0010A2  D02E               	goto	l1996
  5902                           
  5903                           ; BSR set to: 0
  5904  0010A4  C024  FFD9         	movff	strtol@s,fsr2l
  5905  0010A8  C025  FFDA         	movff	strtol@s+1,fsr2h
  5906  0010AC  50DF               	movf	indf2,w,c
  5907  0010AE  6F65               	movwf	strtol@c& (0+255),b
  5908                           
  5909                           ; BSR set to: 0
  5910  0010B0  4A24               	infsnz	strtol@s,f,c
  5911  0010B2  2A25               	incf	strtol@s+1,f,c
  5912                           
  5913                           ; BSR set to: 0
  5914  0010B4  5028               	movf	strtol@base,w,c
  5915  0010B6  1029               	iorwf	strtol@base+1,w,c
  5916  0010B8  B4D8               	btfsc	status,2,c
  5917  0010BA  D005               	goto	u6160
  5918                           
  5919                           ; BSR set to: 0
  5920  0010BC  0E10               	movlw	16
  5921  0010BE  1828               	xorwf	strtol@base,w,c
  5922  0010C0  1029               	iorwf	strtol@base+1,w,c
  5923  0010C2  A4D8               	btfss	status,2,c
  5924  0010C4  D015               	goto	l1990
  5925  0010C6                     u6160:
  5926                           
  5927                           ; BSR set to: 0
  5928                           
  5929                           ; BSR set to: 0
  5930  0010C6  0E78               	movlw	120
  5931  0010C8  1965               	xorwf	strtol@c& (0+255),w,b
  5932  0010CA  B4D8               	btfsc	status,2,c
  5933  0010CC  D004               	goto	u6180
  5934                           
  5935                           ; BSR set to: 0
  5936  0010CE  0E58               	movlw	88
  5937  0010D0  1965               	xorwf	strtol@c& (0+255),w,b
  5938  0010D2  A4D8               	btfss	status,2,c
  5939  0010D4  D00D               	goto	l1990
  5940  0010D6                     u6180:
  5941                           
  5942                           ; BSR set to: 0
  5943                           
  5944                           ; BSR set to: 0
  5945  0010D6  0E00               	movlw	0
  5946  0010D8  6E29               	movwf	strtol@base+1,c
  5947  0010DA  0E10               	movlw	16
  5948  0010DC  6E28               	movwf	strtol@base,c
  5949                           
  5950                           ; BSR set to: 0
  5951  0010DE  C024  FFD9         	movff	strtol@s,fsr2l
  5952  0010E2  C025  FFDA         	movff	strtol@s+1,fsr2h
  5953  0010E6  50DF               	movf	indf2,w,c
  5954  0010E8  6F65               	movwf	strtol@c& (0+255),b
  5955                           
  5956                           ; BSR set to: 0
  5957  0010EA  4A24               	infsnz	strtol@s,f,c
  5958  0010EC  2A25               	incf	strtol@s+1,f,c
  5959  0010EE  D008               	goto	l1996
  5960  0010F0                     l1990:
  5961                           
  5962                           ; BSR set to: 0
  5963                           
  5964                           ; BSR set to: 0
  5965  0010F0  5028               	movf	strtol@base,w,c
  5966  0010F2  1029               	iorwf	strtol@base+1,w,c
  5967  0010F4  A4D8               	btfss	status,2,c
  5968  0010F6  D004               	goto	l1996
  5969                           
  5970                           ; BSR set to: 0
  5971  0010F8  0E00               	movlw	0
  5972  0010FA  6E29               	movwf	strtol@base+1,c
  5973  0010FC  0E08               	movlw	8
  5974  0010FE  6E28               	movwf	strtol@base,c
  5975  001100                     l1996:
  5976                           
  5977                           ; BSR set to: 0
  5978                           
  5979                           ; BSR set to: 0
  5980                           
  5981                           ; BSR set to: 0
  5982                           
  5983                           ; BSR set to: 0
  5984  001100  5028               	movf	strtol@base,w,c
  5985  001102  1029               	iorwf	strtol@base+1,w,c
  5986  001104  A4D8               	btfss	status,2,c
  5987  001106  D004               	goto	l1997
  5988                           
  5989                           ; BSR set to: 0
  5990  001108  0E00               	movlw	0
  5991  00110A  6E29               	movwf	strtol@base+1,c
  5992  00110C  0E0A               	movlw	10
  5993  00110E  6E28               	movwf	strtol@base,c
  5994  001110                     l1997:
  5995                           
  5996                           ; BSR set to: 0
  5997                           
  5998                           ; BSR set to: 0
  5999                           
  6000                           ; BSR set to: 0
  6001  001110  5165               	movf	strtol@c& (0+255),w,b
  6002  001112  EC0E  F01A         	call	_isalpha
  6003  001116  A0D8               	btfss	status,0,c
  6004  001118  D008               	goto	l1999
  6005  00111A  0100               	movlb	0	; () banked
  6006  00111C  5165               	movf	strtol@c& (0+255),w,b
  6007  00111E  EC20  F01B         	call	_toupper
  6008  001122  0FC9               	addlw	201
  6009  001124  0100               	movlb	0	; () banked
  6010  001126  6F65               	movwf	strtol@c& (0+255),b
  6011  001128  D009               	goto	l2002
  6012  00112A                     l1999:
  6013                           
  6014                           ; BSR set to: 0
  6015  00112A  0100               	movlb	0	; () banked
  6016  00112C  5165               	movf	strtol@c& (0+255),w,b
  6017  00112E  EC9E  F01A         	call	_isdigit
  6018  001132  A0D8               	btfss	status,0,c
  6019  001134  D039               	goto	l2003
  6020  001136  0E30               	movlw	48
  6021  001138  0100               	movlb	0	; () banked
  6022  00113A  5F65               	subwf	strtol@c& (0+255),f,b
  6023  00113C                     l2002:
  6024                           
  6025                           ; BSR set to: 0
  6026                           
  6027                           ; BSR set to: 0
  6028                           
  6029                           ; BSR set to: 0
  6030  00113C  5165               	movf	strtol@c& (0+255),w,b
  6031  00113E  6E2A               	movwf	??_strtol& (0+255),c
  6032  001140  6A2B               	clrf	(??_strtol+1)& (0+255),c
  6033  001142  5028               	movf	strtol@base,w,c
  6034  001144  5C2A               	subwf	??_strtol,w,c
  6035  001146  502B               	movf	??_strtol+1,w,c
  6036  001148  0A80               	xorlw	128
  6037  00114A  6E2C               	movwf	(??_strtol+2)& (0+255),c
  6038  00114C  5029               	movf	strtol@base+1,w,c
  6039  00114E  0A80               	xorlw	128
  6040  001150  582C               	subwfb	(??_strtol+2)& (0+255),w,c
  6041  001152  B0D8               	btfsc	status,0,c
  6042  001154  D029               	goto	l2003
  6043                           
  6044                           ; BSR set to: 0
  6045                           
  6046                           ; BSR set to: 0
  6047                           
  6048                           ; BSR set to: 0
  6049  001156  C028  F018         	movff	strtol@base,___lmul@multiplier
  6050  00115A  C029  F019         	movff	strtol@base+1,___lmul@multiplier+1
  6051  00115E  0E00               	movlw	0
  6052  001160  BE19               	btfsc	___lmul@multiplier+1,7,c
  6053  001162  0EFF               	movlw	-1
  6054  001164  6E1A               	movwf	___lmul@multiplier+2,c
  6055  001166  6E1B               	movwf	___lmul@multiplier+3,c
  6056  001168  C061  F01C         	movff	strtol@a,___lmul@multiplicand
  6057  00116C  C062  F01D         	movff	strtol@a+1,___lmul@multiplicand+1
  6058  001170  C063  F01E         	movff	strtol@a+2,___lmul@multiplicand+2
  6059  001174  C064  F01F         	movff	strtol@a+3,___lmul@multiplicand+3
  6060  001178  ECF8  F015         	call	___lmul	;wreg free
  6061  00117C  0100               	movlb	0	; () banked
  6062  00117E  5165               	movf	strtol@c& (0+255),w,b
  6063  001180  2418               	addwf	?___lmul,w,c
  6064  001182  6F61               	movwf	strtol@a& (0+255),b
  6065  001184  0E00               	movlw	0
  6066  001186  2019               	addwfc	?___lmul+1,w,c
  6067  001188  6F62               	movwf	(strtol@a+1)& (0+255),b
  6068  00118A  0E00               	movlw	0
  6069  00118C  201A               	addwfc	?___lmul+2,w,c
  6070  00118E  6F63               	movwf	(strtol@a+2)& (0+255),b
  6071  001190  0E00               	movlw	0
  6072  001192  201B               	addwfc	?___lmul+3,w,c
  6073  001194  6F64               	movwf	(strtol@a+3)& (0+255),b
  6074                           
  6075                           ; BSR set to: 0
  6076  001196  C024  FFD9         	movff	strtol@s,fsr2l
  6077  00119A  C025  FFDA         	movff	strtol@s+1,fsr2h
  6078  00119E  50DF               	movf	indf2,w,c
  6079  0011A0  6F65               	movwf	strtol@c& (0+255),b
  6080                           
  6081                           ; BSR set to: 0
  6082  0011A2  4A24               	infsnz	strtol@s,f,c
  6083  0011A4  2A25               	incf	strtol@s+1,f,c
  6084  0011A6  D7B4               	goto	l1997
  6085  0011A8                     l2003:
  6086                           
  6087                           ; BSR set to: 0
  6088  0011A8  5026               	movf	strtol@endptr,w,c
  6089  0011AA  1027               	iorwf	strtol@endptr+1,w,c
  6090  0011AC  B4D8               	btfsc	status,2,c
  6091  0011AE  D00E               	goto	l2005
  6092  0011B0  0EFF               	movlw	255
  6093  0011B2  2424               	addwf	strtol@s,w,c
  6094  0011B4  6E2A               	movwf	??_strtol& (0+255),c
  6095  0011B6  0EFF               	movlw	255
  6096  0011B8  2025               	addwfc	strtol@s+1,w,c
  6097  0011BA  6E2B               	movwf	(??_strtol+1)& (0+255),c
  6098  0011BC  C026  FFD9         	movff	strtol@endptr,fsr2l
  6099  0011C0  C027  FFDA         	movff	strtol@endptr+1,fsr2h
  6100  0011C4  C02A  FFDE         	movff	??_strtol,postinc2
  6101  0011C8  C02B  FFDD         	movff	??_strtol+1,postdec2
  6102  0011CC                     l2005:
  6103  0011CC  0100               	movlb	0	; () banked
  6104  0011CE  5160               	movf	strtol@sign& (0+255),w,b
  6105  0011D0  B4D8               	btfsc	status,2,c
  6106  0011D2  D01A               	goto	l2006
  6107                           
  6108                           ; BSR set to: 0
  6109  0011D4  C061  F02A         	movff	strtol@a,??_strtol
  6110  0011D8  C062  F02B         	movff	strtol@a+1,??_strtol+1
  6111  0011DC  C063  F02C         	movff	strtol@a+2,??_strtol+2
  6112  0011E0  C064  F02D         	movff	strtol@a+3,??_strtol+3
  6113  0011E4  1E2A               	comf	??_strtol,f,c
  6114  0011E6  1E2B               	comf	??_strtol+1,f,c
  6115  0011E8  1E2C               	comf	??_strtol+2,f,c
  6116  0011EA  1E2D               	comf	??_strtol+3,f,c
  6117  0011EC  2A2A               	incf	??_strtol,f,c
  6118  0011EE  0E00               	movlw	0
  6119  0011F0  222B               	addwfc	??_strtol+1,f,c
  6120  0011F2  222C               	addwfc	??_strtol+2,f,c
  6121  0011F4  222D               	addwfc	??_strtol+3,f,c
  6122  0011F6  C02A  F024         	movff	??_strtol,?_strtol
  6123  0011FA  C02B  F025         	movff	??_strtol+1,?_strtol+1
  6124  0011FE  C02C  F026         	movff	??_strtol+2,?_strtol+2
  6125  001202  C02D  F027         	movff	??_strtol+3,?_strtol+3
  6126                           
  6127                           ; BSR set to: 0
  6128  001206  0012               	return	
  6129  001208                     l2006:
  6130                           
  6131                           ; BSR set to: 0
  6132  001208  C061  F024         	movff	strtol@a,?_strtol
  6133  00120C  C062  F025         	movff	strtol@a+1,?_strtol+1
  6134  001210  C063  F026         	movff	strtol@a+2,?_strtol+2
  6135  001214  C064  F027         	movff	strtol@a+3,?_strtol+3
  6136                           
  6137                           ; BSR set to: 0
  6138  001218  0012               	return		;funcret
  6139  00121A                     __end_of_strtol:
  6140                           	opt stack 0
  6141                           tosu	equ	0xFFF
  6142                           tosh	equ	0xFFE
  6143                           tosl	equ	0xFFD
  6144                           pclath	equ	0xFFA
  6145                           tblptru	equ	0xFF8
  6146                           tblptrh	equ	0xFF7
  6147                           tblptrl	equ	0xFF6
  6148                           tablat	equ	0xFF5
  6149                           prodh	equ	0xFF4
  6150                           prodl	equ	0xFF3
  6151                           intcon	equ	0xFF2
  6152                           postinc0	equ	0xFEE
  6153                           wreg	equ	0xFE8
  6154                           indf1	equ	0xFE7
  6155                           postdec1	equ	0xFE5
  6156                           fsr1h	equ	0xFE2
  6157                           fsr1l	equ	0xFE1
  6158                           indf2	equ	0xFDF
  6159                           postinc2	equ	0xFDE
  6160                           postdec2	equ	0xFDD
  6161                           fsr2h	equ	0xFDA
  6162                           fsr2l	equ	0xFD9
  6163                           status	equ	0xFD8
  6164                           
  6165 ;; *************** function _toupper *****************
  6166 ;; Defined at:
  6167 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  6168 ;; Parameters:    Size  Location     Type
  6169 ;;  c               1    wreg     unsigned char 
  6170 ;; Auto vars:     Size  Location     Type
  6171 ;;  c               1   23[COMRAM] unsigned char 
  6172 ;; Return value:  Size  Location     Type
  6173 ;;                  1    wreg      unsigned char 
  6174 ;; Registers used:
  6175 ;;		wreg, status,2, status,0
  6176 ;; Tracked objects:
  6177 ;;		On entry : 0/0
  6178 ;;		On exit  : 0/0
  6179 ;;		Unchanged: 0/0
  6180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6181 ;;      Params:         0       0       0       0       0       0       0
  6182 ;;      Locals:         1       0       0       0       0       0       0
  6183 ;;      Temps:          0       0       0       0       0       0       0
  6184 ;;      Totals:         1       0       0       0       0       0       0
  6185 ;;Total ram usage:        1 bytes
  6186 ;; Hardware stack levels used:    1
  6187 ;; Hardware stack levels required when called:    3
  6188 ;; This function calls:
  6189 ;;		Nothing
  6190 ;; This function is called by:
  6191 ;;		_strtol
  6192 ;; This function uses a non-reentrant model
  6193 ;;
  6194                           
  6195                           	psect	text30
  6196  003640                     __ptext30:
  6197                           	opt stack 0
  6198  003640                     _toupper:
  6199                           	opt stack 22
  6200                           
  6201                           ; BSR set to: 0
  6202                           ;incstack = 0
  6203                           ;toupper@c stored from wreg
  6204  003640  6E18               	movwf	toupper@c,c
  6205  003642  0E7B               	movlw	123
  6206  003644  6018               	cpfslt	toupper@c,c
  6207  003646  D004               	goto	l2010
  6208  003648  0E60               	movlw	96
  6209  00364A  6418               	cpfsgt	toupper@c,c
  6210  00364C  D001               	goto	l2010
  6211  00364E  9A18               	bcf	toupper@c,5,c
  6212  003650                     l2010:
  6213  003650  5018               	movf	toupper@c,w,c
  6214  003652  0012               	return	
  6215  003654                     __end_of_toupper:
  6216                           	opt stack 0
  6217                           tosu	equ	0xFFF
  6218                           tosh	equ	0xFFE
  6219                           tosl	equ	0xFFD
  6220                           pclath	equ	0xFFA
  6221                           tblptru	equ	0xFF8
  6222                           tblptrh	equ	0xFF7
  6223                           tblptrl	equ	0xFF6
  6224                           tablat	equ	0xFF5
  6225                           prodh	equ	0xFF4
  6226                           prodl	equ	0xFF3
  6227                           intcon	equ	0xFF2
  6228                           postinc0	equ	0xFEE
  6229                           wreg	equ	0xFE8
  6230                           indf1	equ	0xFE7
  6231                           postdec1	equ	0xFE5
  6232                           fsr1h	equ	0xFE2
  6233                           fsr1l	equ	0xFE1
  6234                           indf2	equ	0xFDF
  6235                           postinc2	equ	0xFDE
  6236                           postdec2	equ	0xFDD
  6237                           fsr2h	equ	0xFDA
  6238                           fsr2l	equ	0xFD9
  6239                           status	equ	0xFD8
  6240                           
  6241 ;; *************** function _isspace *****************
  6242 ;; Defined at:
  6243 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  6244 ;; Parameters:    Size  Location     Type
  6245 ;;  c               1    wreg     unsigned char 
  6246 ;; Auto vars:     Size  Location     Type
  6247 ;;  c               1   25[COMRAM] unsigned char 
  6248 ;; Return value:  Size  Location     Type
  6249 ;;		None               void
  6250 ;; Registers used:
  6251 ;;		wreg, status,2, status,0
  6252 ;; Tracked objects:
  6253 ;;		On entry : 0/0
  6254 ;;		On exit  : 0/0
  6255 ;;		Unchanged: 0/0
  6256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6257 ;;      Params:         0       0       0       0       0       0       0
  6258 ;;      Locals:         2       0       0       0       0       0       0
  6259 ;;      Temps:          1       0       0       0       0       0       0
  6260 ;;      Totals:         3       0       0       0       0       0       0
  6261 ;;Total ram usage:        3 bytes
  6262 ;; Hardware stack levels used:    1
  6263 ;; Hardware stack levels required when called:    3
  6264 ;; This function calls:
  6265 ;;		Nothing
  6266 ;; This function is called by:
  6267 ;;		_strtol
  6268 ;; This function uses a non-reentrant model
  6269 ;;
  6270                           
  6271                           	psect	text31
  6272  003444                     __ptext31:
  6273                           	opt stack 0
  6274  003444                     _isspace:
  6275                           	opt stack 22
  6276                           
  6277                           ;incstack = 0
  6278                           ;isspace@c stored from wreg
  6279  003444  6E1A               	movwf	isspace@c,c
  6280  003446  0E01               	movlw	1
  6281  003448  6E19               	movwf	_isspace$2963,c
  6282  00344A  0E20               	movlw	32
  6283  00344C  181A               	xorwf	isspace@c,w,c
  6284  00344E  B4D8               	btfsc	status,2,c
  6285  003450  D008               	goto	l2092
  6286  003452  0E0E               	movlw	14
  6287  003454  601A               	cpfslt	isspace@c,c
  6288  003456  D003               	goto	u5920
  6289  003458  0E09               	movlw	9
  6290  00345A  601A               	cpfslt	isspace@c,c
  6291  00345C  D002               	goto	l2092
  6292  00345E                     u5920:
  6293  00345E  0E00               	movlw	0
  6294  003460  6E19               	movwf	_isspace$2963,c
  6295  003462                     l2092:
  6296  003462  C019  F018         	movff	_isspace$2963,??_isspace
  6297  003466  3018               	rrcf	??_isspace,w,c
  6298  003468  0012               	return	
  6299  00346A                     __end_of_isspace:
  6300                           	opt stack 0
  6301                           tosu	equ	0xFFF
  6302                           tosh	equ	0xFFE
  6303                           tosl	equ	0xFFD
  6304                           pclath	equ	0xFFA
  6305                           tblptru	equ	0xFF8
  6306                           tblptrh	equ	0xFF7
  6307                           tblptrl	equ	0xFF6
  6308                           tablat	equ	0xFF5
  6309                           prodh	equ	0xFF4
  6310                           prodl	equ	0xFF3
  6311                           intcon	equ	0xFF2
  6312                           postinc0	equ	0xFEE
  6313                           wreg	equ	0xFE8
  6314                           indf1	equ	0xFE7
  6315                           postdec1	equ	0xFE5
  6316                           fsr1h	equ	0xFE2
  6317                           fsr1l	equ	0xFE1
  6318                           indf2	equ	0xFDF
  6319                           postinc2	equ	0xFDE
  6320                           postdec2	equ	0xFDD
  6321                           fsr2h	equ	0xFDA
  6322                           fsr2l	equ	0xFD9
  6323                           status	equ	0xFD8
  6324                           
  6325 ;; *************** function _isdigit *****************
  6326 ;; Defined at:
  6327 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  6328 ;; Parameters:    Size  Location     Type
  6329 ;;  c               1    wreg     unsigned char 
  6330 ;; Auto vars:     Size  Location     Type
  6331 ;;  c               1   25[COMRAM] unsigned char 
  6332 ;; Return value:  Size  Location     Type
  6333 ;;		None               void
  6334 ;; Registers used:
  6335 ;;		wreg, status,2, status,0
  6336 ;; Tracked objects:
  6337 ;;		On entry : 0/0
  6338 ;;		On exit  : 0/0
  6339 ;;		Unchanged: 0/0
  6340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6341 ;;      Params:         0       0       0       0       0       0       0
  6342 ;;      Locals:         2       0       0       0       0       0       0
  6343 ;;      Temps:          1       0       0       0       0       0       0
  6344 ;;      Totals:         3       0       0       0       0       0       0
  6345 ;;Total ram usage:        3 bytes
  6346 ;; Hardware stack levels used:    1
  6347 ;; Hardware stack levels required when called:    3
  6348 ;; This function calls:
  6349 ;;		Nothing
  6350 ;; This function is called by:
  6351 ;;		_strtol
  6352 ;; This function uses a non-reentrant model
  6353 ;;
  6354                           
  6355                           	psect	text32
  6356  00353C                     __ptext32:
  6357                           	opt stack 0
  6358  00353C                     _isdigit:
  6359                           	opt stack 22
  6360                           
  6361                           ;incstack = 0
  6362                           ;isdigit@c stored from wreg
  6363  00353C  6E1A               	movwf	isdigit@c,c
  6364  00353E  0E00               	movlw	0
  6365  003540  6E19               	movwf	_isdigit$2960,c
  6366  003542  0E3A               	movlw	58
  6367  003544  601A               	cpfslt	isdigit@c,c
  6368  003546  D005               	goto	l2087
  6369  003548  0E2F               	movlw	47
  6370  00354A  641A               	cpfsgt	isdigit@c,c
  6371  00354C  D002               	goto	l2087
  6372  00354E  0E01               	movlw	1
  6373  003550  6E19               	movwf	_isdigit$2960,c
  6374  003552                     l2087:
  6375  003552  C019  F018         	movff	_isdigit$2960,??_isdigit
  6376  003556  3018               	rrcf	??_isdigit,w,c
  6377  003558  0012               	return	
  6378  00355A                     __end_of_isdigit:
  6379                           	opt stack 0
  6380                           tosu	equ	0xFFF
  6381                           tosh	equ	0xFFE
  6382                           tosl	equ	0xFFD
  6383                           pclath	equ	0xFFA
  6384                           tblptru	equ	0xFF8
  6385                           tblptrh	equ	0xFF7
  6386                           tblptrl	equ	0xFF6
  6387                           tablat	equ	0xFF5
  6388                           prodh	equ	0xFF4
  6389                           prodl	equ	0xFF3
  6390                           intcon	equ	0xFF2
  6391                           postinc0	equ	0xFEE
  6392                           wreg	equ	0xFE8
  6393                           indf1	equ	0xFE7
  6394                           postdec1	equ	0xFE5
  6395                           fsr1h	equ	0xFE2
  6396                           fsr1l	equ	0xFE1
  6397                           indf2	equ	0xFDF
  6398                           postinc2	equ	0xFDE
  6399                           postdec2	equ	0xFDD
  6400                           fsr2h	equ	0xFDA
  6401                           fsr2l	equ	0xFD9
  6402                           status	equ	0xFD8
  6403                           
  6404 ;; *************** function _isalpha *****************
  6405 ;; Defined at:
  6406 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  6407 ;; Parameters:    Size  Location     Type
  6408 ;;  c               1    wreg     unsigned char 
  6409 ;; Auto vars:     Size  Location     Type
  6410 ;;  c               1   28[COMRAM] unsigned char 
  6411 ;; Return value:  Size  Location     Type
  6412 ;;		None               void
  6413 ;; Registers used:
  6414 ;;		wreg, status,2, status,0, cstack
  6415 ;; Tracked objects:
  6416 ;;		On entry : 0/0
  6417 ;;		On exit  : 0/0
  6418 ;;		Unchanged: 0/0
  6419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6420 ;;      Params:         0       0       0       0       0       0       0
  6421 ;;      Locals:         2       0       0       0       0       0       0
  6422 ;;      Temps:          1       0       0       0       0       0       0
  6423 ;;      Totals:         3       0       0       0       0       0       0
  6424 ;;Total ram usage:        3 bytes
  6425 ;; Hardware stack levels used:    1
  6426 ;; Hardware stack levels required when called:    4
  6427 ;; This function calls:
  6428 ;;		_isupper
  6429 ;; This function is called by:
  6430 ;;		_strtol
  6431 ;; This function uses a non-reentrant model
  6432 ;;
  6433                           
  6434                           	psect	text33
  6435  00341C                     __ptext33:
  6436                           	opt stack 0
  6437  00341C                     _isalpha:
  6438                           	opt stack 21
  6439                           
  6440                           ;incstack = 0
  6441                           ;isalpha@c stored from wreg
  6442  00341C  6E1D               	movwf	isalpha@c,c
  6443  00341E  0E01               	movlw	1
  6444  003420  6E1C               	movwf	_isalpha$2957,c
  6445  003422  0E7B               	movlw	123
  6446  003424  601D               	cpfslt	isalpha@c,c
  6447  003426  D003               	goto	u5940
  6448  003428  0E61               	movlw	97
  6449  00342A  601D               	cpfslt	isalpha@c,c
  6450  00342C  D007               	goto	l2082
  6451  00342E                     u5940:
  6452  00342E  501D               	movf	isalpha@c,w,c
  6453  003430  ECAD  F01A         	call	_isupper
  6454  003434  B0D8               	btfsc	status,0,c
  6455  003436  D002               	goto	l2082
  6456  003438  0E00               	movlw	0
  6457  00343A  6E1C               	movwf	_isalpha$2957,c
  6458  00343C                     l2082:
  6459  00343C  C01C  F01B         	movff	_isalpha$2957,??_isalpha
  6460  003440  301B               	rrcf	??_isalpha,w,c
  6461  003442  0012               	return	
  6462  003444                     __end_of_isalpha:
  6463                           	opt stack 0
  6464                           tosu	equ	0xFFF
  6465                           tosh	equ	0xFFE
  6466                           tosl	equ	0xFFD
  6467                           pclath	equ	0xFFA
  6468                           tblptru	equ	0xFF8
  6469                           tblptrh	equ	0xFF7
  6470                           tblptrl	equ	0xFF6
  6471                           tablat	equ	0xFF5
  6472                           prodh	equ	0xFF4
  6473                           prodl	equ	0xFF3
  6474                           intcon	equ	0xFF2
  6475                           postinc0	equ	0xFEE
  6476                           wreg	equ	0xFE8
  6477                           indf1	equ	0xFE7
  6478                           postdec1	equ	0xFE5
  6479                           fsr1h	equ	0xFE2
  6480                           fsr1l	equ	0xFE1
  6481                           indf2	equ	0xFDF
  6482                           postinc2	equ	0xFDE
  6483                           postdec2	equ	0xFDD
  6484                           fsr2h	equ	0xFDA
  6485                           fsr2l	equ	0xFD9
  6486                           status	equ	0xFD8
  6487                           
  6488 ;; *************** function _isupper *****************
  6489 ;; Defined at:
  6490 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  6491 ;; Parameters:    Size  Location     Type
  6492 ;;  c               1    wreg     unsigned char 
  6493 ;; Auto vars:     Size  Location     Type
  6494 ;;  c               1   25[COMRAM] unsigned char 
  6495 ;; Return value:  Size  Location     Type
  6496 ;;		None               void
  6497 ;; Registers used:
  6498 ;;		wreg, status,2, status,0
  6499 ;; Tracked objects:
  6500 ;;		On entry : 0/0
  6501 ;;		On exit  : 0/0
  6502 ;;		Unchanged: 0/0
  6503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6504 ;;      Params:         0       0       0       0       0       0       0
  6505 ;;      Locals:         2       0       0       0       0       0       0
  6506 ;;      Temps:          1       0       0       0       0       0       0
  6507 ;;      Totals:         3       0       0       0       0       0       0
  6508 ;;Total ram usage:        3 bytes
  6509 ;; Hardware stack levels used:    1
  6510 ;; Hardware stack levels required when called:    3
  6511 ;; This function calls:
  6512 ;;		Nothing
  6513 ;; This function is called by:
  6514 ;;		_isalpha
  6515 ;; This function uses a non-reentrant model
  6516 ;;
  6517                           
  6518                           	psect	text34
  6519  00355A                     __ptext34:
  6520                           	opt stack 0
  6521  00355A                     _isupper:
  6522                           	opt stack 21
  6523                           
  6524                           ;incstack = 0
  6525                           ;isupper@c stored from wreg
  6526  00355A  6E1A               	movwf	isupper@c,c
  6527  00355C  0E00               	movlw	0
  6528  00355E  6E19               	movwf	_isupper$2966,c
  6529  003560  0E5B               	movlw	91
  6530  003562  601A               	cpfslt	isupper@c,c
  6531  003564  D005               	goto	l2097
  6532  003566  0E40               	movlw	64
  6533  003568  641A               	cpfsgt	isupper@c,c
  6534  00356A  D002               	goto	l2097
  6535  00356C  0E01               	movlw	1
  6536  00356E  6E19               	movwf	_isupper$2966,c
  6537  003570                     l2097:
  6538  003570  C019  F018         	movff	_isupper$2966,??_isupper
  6539  003574  3018               	rrcf	??_isupper,w,c
  6540  003576  0012               	return	
  6541  003578                     __end_of_isupper:
  6542                           	opt stack 0
  6543                           tosu	equ	0xFFF
  6544                           tosh	equ	0xFFE
  6545                           tosl	equ	0xFFD
  6546                           pclath	equ	0xFFA
  6547                           tblptru	equ	0xFF8
  6548                           tblptrh	equ	0xFF7
  6549                           tblptrl	equ	0xFF6
  6550                           tablat	equ	0xFF5
  6551                           prodh	equ	0xFF4
  6552                           prodl	equ	0xFF3
  6553                           intcon	equ	0xFF2
  6554                           postinc0	equ	0xFEE
  6555                           wreg	equ	0xFE8
  6556                           indf1	equ	0xFE7
  6557                           postdec1	equ	0xFE5
  6558                           fsr1h	equ	0xFE2
  6559                           fsr1l	equ	0xFE1
  6560                           indf2	equ	0xFDF
  6561                           postinc2	equ	0xFDE
  6562                           postdec2	equ	0xFDD
  6563                           fsr2h	equ	0xFDA
  6564                           fsr2l	equ	0xFD9
  6565                           status	equ	0xFD8
  6566                           
  6567 ;; *************** function ___lmul *****************
  6568 ;; Defined at:
  6569 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
  6570 ;; Parameters:    Size  Location     Type
  6571 ;;  multiplier      4   23[COMRAM] unsigned long 
  6572 ;;  multiplicand    4   27[COMRAM] unsigned long 
  6573 ;; Auto vars:     Size  Location     Type
  6574 ;;  product         4   31[COMRAM] unsigned long 
  6575 ;; Return value:  Size  Location     Type
  6576 ;;                  4   23[COMRAM] unsigned long 
  6577 ;; Registers used:
  6578 ;;		wreg, status,2, status,0
  6579 ;; Tracked objects:
  6580 ;;		On entry : 0/0
  6581 ;;		On exit  : 0/0
  6582 ;;		Unchanged: 0/0
  6583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6584 ;;      Params:         8       0       0       0       0       0       0
  6585 ;;      Locals:         4       0       0       0       0       0       0
  6586 ;;      Temps:          0       0       0       0       0       0       0
  6587 ;;      Totals:        12       0       0       0       0       0       0
  6588 ;;Total ram usage:       12 bytes
  6589 ;; Hardware stack levels used:    1
  6590 ;; Hardware stack levels required when called:    3
  6591 ;; This function calls:
  6592 ;;		Nothing
  6593 ;; This function is called by:
  6594 ;;		_strtol
  6595 ;; This function uses a non-reentrant model
  6596 ;;
  6597                           
  6598                           	psect	text35
  6599  002BF0                     __ptext35:
  6600                           	opt stack 0
  6601  002BF0                     ___lmul:
  6602                           	opt stack 22
  6603                           
  6604                           ;incstack = 0
  6605  002BF0  0E00               	movlw	0
  6606  002BF2  6E20               	movwf	___lmul@product,c
  6607  002BF4  0E00               	movlw	0
  6608  002BF6  6E21               	movwf	___lmul@product+1,c
  6609  002BF8  0E00               	movlw	0
  6610  002BFA  6E22               	movwf	___lmul@product+2,c
  6611  002BFC  0E00               	movlw	0
  6612  002BFE  6E23               	movwf	___lmul@product+3,c
  6613  002C00  A018               	btfss	___lmul@multiplier,0,c
  6614  002C02  D008               	goto	l1416
  6615  002C04  501C               	movf	___lmul@multiplicand,w,c
  6616  002C06  2620               	addwf	___lmul@product,f,c
  6617  002C08  501D               	movf	___lmul@multiplicand+1,w,c
  6618  002C0A  2221               	addwfc	___lmul@product+1,f,c
  6619  002C0C  501E               	movf	___lmul@multiplicand+2,w,c
  6620  002C0E  2222               	addwfc	___lmul@product+2,f,c
  6621  002C10  501F               	movf	___lmul@multiplicand+3,w,c
  6622  002C12  2223               	addwfc	___lmul@product+3,f,c
  6623  002C14                     l1416:
  6624  002C14  90D8               	bcf	status,0,c
  6625  002C16  361C               	rlcf	___lmul@multiplicand,f,c
  6626  002C18  361D               	rlcf	___lmul@multiplicand+1,f,c
  6627  002C1A  361E               	rlcf	___lmul@multiplicand+2,f,c
  6628  002C1C  361F               	rlcf	___lmul@multiplicand+3,f,c
  6629  002C1E  90D8               	bcf	status,0,c
  6630  002C20  321B               	rrcf	___lmul@multiplier+3,f,c
  6631  002C22  321A               	rrcf	___lmul@multiplier+2,f,c
  6632  002C24  3219               	rrcf	___lmul@multiplier+1,f,c
  6633  002C26  3218               	rrcf	___lmul@multiplier,f,c
  6634  002C28  5018               	movf	___lmul@multiplier,w,c
  6635  002C2A  1019               	iorwf	___lmul@multiplier+1,w,c
  6636  002C2C  101A               	iorwf	___lmul@multiplier+2,w,c
  6637  002C2E  101B               	iorwf	___lmul@multiplier+3,w,c
  6638  002C30  A4D8               	btfss	status,2,c
  6639  002C32  D7E6               	goto	l1415
  6640  002C34  C020  F018         	movff	___lmul@product,?___lmul
  6641  002C38  C021  F019         	movff	___lmul@product+1,?___lmul+1
  6642  002C3C  C022  F01A         	movff	___lmul@product+2,?___lmul+2
  6643  002C40  C023  F01B         	movff	___lmul@product+3,?___lmul+3
  6644  002C44  0012               	return		;funcret
  6645  002C46                     __end_of___lmul:
  6646                           	opt stack 0
  6647                           tosu	equ	0xFFF
  6648                           tosh	equ	0xFFE
  6649                           tosl	equ	0xFFD
  6650                           pclath	equ	0xFFA
  6651                           tblptru	equ	0xFF8
  6652                           tblptrh	equ	0xFF7
  6653                           tblptrl	equ	0xFF6
  6654                           tablat	equ	0xFF5
  6655                           prodh	equ	0xFF4
  6656                           prodl	equ	0xFF3
  6657                           intcon	equ	0xFF2
  6658                           postinc0	equ	0xFEE
  6659                           wreg	equ	0xFE8
  6660                           indf1	equ	0xFE7
  6661                           postdec1	equ	0xFE5
  6662                           fsr1h	equ	0xFE2
  6663                           fsr1l	equ	0xFE1
  6664                           indf2	equ	0xFDF
  6665                           postinc2	equ	0xFDE
  6666                           postdec2	equ	0xFDD
  6667                           fsr2h	equ	0xFDA
  6668                           fsr2l	equ	0xFD9
  6669                           status	equ	0xFD8
  6670                           
  6671 ;; *************** function _testLeds *****************
  6672 ;; Defined at:
  6673 ;;		line 43 in file "LedsApp.c"
  6674 ;; Parameters:    Size  Location     Type
  6675 ;;		None
  6676 ;; Auto vars:     Size  Location     Type
  6677 ;;  idx             2   44[COMRAM] int 
  6678 ;; Return value:  Size  Location     Type
  6679 ;;                  1    wreg      void 
  6680 ;; Registers used:
  6681 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6682 ;; Tracked objects:
  6683 ;;		On entry : 0/0
  6684 ;;		On exit  : 0/0
  6685 ;;		Unchanged: 0/0
  6686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6687 ;;      Params:         0       0       0       0       0       0       0
  6688 ;;      Locals:         2       0       0       0       0       0       0
  6689 ;;      Temps:          1       0       0       0       0       0       0
  6690 ;;      Totals:         3       0       0       0       0       0       0
  6691 ;;Total ram usage:        3 bytes
  6692 ;; Hardware stack levels used:    1
  6693 ;; Hardware stack levels required when called:    6
  6694 ;; This function calls:
  6695 ;;		_SendAckMessage
  6696 ;; This function is called by:
  6697 ;;		_GroupControlMcu
  6698 ;; This function uses a non-reentrant model
  6699 ;;
  6700                           
  6701                           	psect	text36
  6702  0027E4                     __ptext36:
  6703                           	opt stack 0
  6704  0027E4                     _testLeds:
  6705                           	opt stack 22
  6706                           
  6707                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  6708                           
  6709                           ;incstack = 0
  6710  0027E4  0E00               	movlw	0
  6711  0027E6  6E2E               	movwf	testLeds@idx+1,c
  6712  0027E8  0E00               	movlw	0
  6713  0027EA  6E2D               	movwf	testLeds@idx,c
  6714  0027EC                     l7130:
  6715  0027EC  BE2E               	btfsc	testLeds@idx+1,7,c
  6716  0027EE  D006               	goto	l48
  6717  0027F0  502E               	movf	testLeds@idx+1,w,c
  6718  0027F2  E127               	bnz	l7144
  6719  0027F4  0E0A               	movlw	10
  6720  0027F6  5C2D               	subwf	testLeds@idx,w,c
  6721  0027F8  B0D8               	btfsc	status,0,c
  6722  0027FA  D023               	goto	u6890
  6723  0027FC                     l48:
  6724                           
  6725                           ;LedsApp.c: 47: {
  6726                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  6727  0027FC  808B               	bsf	3979,0,c	;volatile
  6728                           
  6729                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  6730  0027FE  0E82               	movlw	130
  6731  002800  6E2C               	movwf	??_testLeds& (0+255),c
  6732  002802  0EDE               	movlw	222
  6733  002804                     u7897:
  6734  002804  2EE8               	decfsz	wreg,f,c
  6735  002806  D7FE               	bra	u7897
  6736  002808  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6737  00280A  D7FC               	bra	u7897
  6738                           
  6739                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  6740  00280C  888A               	bsf	3978,4,c	;volatile
  6741                           
  6742                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  6743  00280E  0E82               	movlw	130
  6744  002810  6E2C               	movwf	??_testLeds& (0+255),c
  6745  002812  0EDE               	movlw	222
  6746  002814                     u7907:
  6747  002814  2EE8               	decfsz	wreg,f,c
  6748  002816  D7FE               	bra	u7907
  6749  002818  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6750  00281A  D7FC               	bra	u7907
  6751                           
  6752                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  6753  00281C  908B               	bcf	3979,0,c	;volatile
  6754                           
  6755                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  6756  00281E  0E82               	movlw	130
  6757  002820  6E2C               	movwf	??_testLeds& (0+255),c
  6758  002822  0EDE               	movlw	222
  6759  002824                     u7917:
  6760  002824  2EE8               	decfsz	wreg,f,c
  6761  002826  D7FE               	bra	u7917
  6762  002828  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6763  00282A  D7FC               	bra	u7917
  6764                           
  6765                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  6766  00282C  988A               	bcf	3978,4,c	;volatile
  6767                           
  6768                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  6769  00282E  0E82               	movlw	130
  6770  002830  6E2C               	movwf	??_testLeds& (0+255),c
  6771  002832  0EDE               	movlw	222
  6772  002834                     u7927:
  6773  002834  2EE8               	decfsz	wreg,f,c
  6774  002836  D7FE               	bra	u7927
  6775  002838  2E2C               	decfsz	??_testLeds& (0+255),f,c
  6776  00283A  D7FC               	bra	u7927
  6777  00283C  4A2D               	infsnz	testLeds@idx,f,c
  6778  00283E  2A2E               	incf	testLeds@idx+1,f,c
  6779  002840  D7D5               	goto	l7130
  6780  002842                     u6890:
  6781  002842                     l7144:
  6782                           
  6783                           ;LedsApp.c: 57: }
  6784                           ;LedsApp.c: 59: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_TEST_LEDS);
  6785  002842  0E15               	movlw	21
  6786  002844  6E24               	movwf	SendAckMessage@inRequest,c
  6787  002846  0E01               	movlw	1
  6788  002848  EC77  F016         	call	_SendAckMessage
  6789  00284C  0012               	return	
  6790  00284E                     __end_of_testLeds:
  6791                           	opt stack 0
  6792                           tosu	equ	0xFFF
  6793                           tosh	equ	0xFFE
  6794                           tosl	equ	0xFFD
  6795                           pclath	equ	0xFFA
  6796                           tblptru	equ	0xFF8
  6797                           tblptrh	equ	0xFF7
  6798                           tblptrl	equ	0xFF6
  6799                           tablat	equ	0xFF5
  6800                           prodh	equ	0xFF4
  6801                           prodl	equ	0xFF3
  6802                           intcon	equ	0xFF2
  6803                           postinc0	equ	0xFEE
  6804                           wreg	equ	0xFE8
  6805                           indf1	equ	0xFE7
  6806                           postdec1	equ	0xFE5
  6807                           fsr1h	equ	0xFE2
  6808                           fsr1l	equ	0xFE1
  6809                           indf2	equ	0xFDF
  6810                           postinc2	equ	0xFDE
  6811                           postdec2	equ	0xFDD
  6812                           fsr2h	equ	0xFDA
  6813                           fsr2l	equ	0xFD9
  6814                           status	equ	0xFD8
  6815                           
  6816 ;; *************** function _ResetMcu *****************
  6817 ;; Defined at:
  6818 ;;		line 85 in file "SystemCommon.c"
  6819 ;; Parameters:    Size  Location     Type
  6820 ;;		None
  6821 ;; Auto vars:     Size  Location     Type
  6822 ;;		None
  6823 ;; Return value:  Size  Location     Type
  6824 ;;                  1    wreg      void 
  6825 ;; Registers used:
  6826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6827 ;; Tracked objects:
  6828 ;;		On entry : 0/0
  6829 ;;		On exit  : 0/0
  6830 ;;		Unchanged: 0/0
  6831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6832 ;;      Params:         0       0       0       0       0       0       0
  6833 ;;      Locals:         0       0       0       0       0       0       0
  6834 ;;      Temps:          0       0       0       0       0       0       0
  6835 ;;      Totals:         0       0       0       0       0       0       0
  6836 ;;Total ram usage:        0 bytes
  6837 ;; Hardware stack levels used:    1
  6838 ;; Hardware stack levels required when called:    6
  6839 ;; This function calls:
  6840 ;;		_SendAckMessage
  6841 ;; This function is called by:
  6842 ;;		_GroupControlMcu
  6843 ;; This function uses a non-reentrant model
  6844 ;;
  6845                           
  6846                           	psect	text37
  6847  003698                     __ptext37:
  6848                           	opt stack 0
  6849  003698                     _ResetMcu:
  6850                           	opt stack 22
  6851                           
  6852                           ;SystemCommon.c: 88: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET_
      +                          MCU);
  6853                           
  6854                           ;incstack = 0
  6855  003698  0E11               	movlw	17
  6856  00369A  6E24               	movwf	SendAckMessage@inRequest,c
  6857  00369C  0E01               	movlw	1
  6858  00369E  EC77  F016         	call	_SendAckMessage
  6859  0036A2  00FF               	reset		;# 
  6860  0036A4  0012               	return		;funcret
  6861  0036A6                     __end_of_ResetMcu:
  6862                           	opt stack 0
  6863                           tosu	equ	0xFFF
  6864                           tosh	equ	0xFFE
  6865                           tosl	equ	0xFFD
  6866                           pclath	equ	0xFFA
  6867                           tblptru	equ	0xFF8
  6868                           tblptrh	equ	0xFF7
  6869                           tblptrl	equ	0xFF6
  6870                           tablat	equ	0xFF5
  6871                           prodh	equ	0xFF4
  6872                           prodl	equ	0xFF3
  6873                           intcon	equ	0xFF2
  6874                           postinc0	equ	0xFEE
  6875                           wreg	equ	0xFE8
  6876                           indf1	equ	0xFE7
  6877                           postdec1	equ	0xFE5
  6878                           fsr1h	equ	0xFE2
  6879                           fsr1l	equ	0xFE1
  6880                           indf2	equ	0xFDF
  6881                           postinc2	equ	0xFDE
  6882                           postdec2	equ	0xFDD
  6883                           fsr2h	equ	0xFDA
  6884                           fsr2l	equ	0xFD9
  6885                           status	equ	0xFD8
  6886                           
  6887 ;; *************** function _ResetCpld *****************
  6888 ;; Defined at:
  6889 ;;		line 94 in file "SystemCommon.c"
  6890 ;; Parameters:    Size  Location     Type
  6891 ;;		None
  6892 ;; Auto vars:     Size  Location     Type
  6893 ;;		None
  6894 ;; Return value:  Size  Location     Type
  6895 ;;                  1    wreg      void 
  6896 ;; Registers used:
  6897 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6898 ;; Tracked objects:
  6899 ;;		On entry : 0/0
  6900 ;;		On exit  : 0/0
  6901 ;;		Unchanged: 0/0
  6902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6903 ;;      Params:         0       0       0       0       0       0       0
  6904 ;;      Locals:         0       0       0       0       0       0       0
  6905 ;;      Temps:          0       0       0       0       0       0       0
  6906 ;;      Totals:         0       0       0       0       0       0       0
  6907 ;;Total ram usage:        0 bytes
  6908 ;; Hardware stack levels used:    1
  6909 ;; Hardware stack levels required when called:    6
  6910 ;; This function calls:
  6911 ;;		_SendAckMessage
  6912 ;; This function is called by:
  6913 ;;		_GroupControlMcu
  6914 ;; This function uses a non-reentrant model
  6915 ;;
  6916                           
  6917                           	psect	text38
  6918  0036D0                     __ptext38:
  6919                           	opt stack 0
  6920  0036D0                     _ResetCpld:
  6921                           	opt stack 22
  6922                           
  6923                           ;SystemCommon.c: 97: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET_
      +                          CPLD);
  6924                           
  6925                           ;incstack = 0
  6926  0036D0  0E12               	movlw	18
  6927  0036D2  6E24               	movwf	SendAckMessage@inRequest,c
  6928  0036D4  0E01               	movlw	1
  6929  0036D6  EC77  F016         	call	_SendAckMessage
  6930  0036DA  0012               	return		;funcret
  6931  0036DC                     __end_of_ResetCpld:
  6932                           	opt stack 0
  6933                           tosu	equ	0xFFF
  6934                           tosh	equ	0xFFE
  6935                           tosl	equ	0xFFD
  6936                           pclath	equ	0xFFA
  6937                           tblptru	equ	0xFF8
  6938                           tblptrh	equ	0xFF7
  6939                           tblptrl	equ	0xFF6
  6940                           tablat	equ	0xFF5
  6941                           prodh	equ	0xFF4
  6942                           prodl	equ	0xFF3
  6943                           intcon	equ	0xFF2
  6944                           postinc0	equ	0xFEE
  6945                           wreg	equ	0xFE8
  6946                           indf1	equ	0xFE7
  6947                           postdec1	equ	0xFE5
  6948                           fsr1h	equ	0xFE2
  6949                           fsr1l	equ	0xFE1
  6950                           indf2	equ	0xFDF
  6951                           postinc2	equ	0xFDE
  6952                           postdec2	equ	0xFDD
  6953                           fsr2h	equ	0xFDA
  6954                           fsr2l	equ	0xFD9
  6955                           status	equ	0xFD8
  6956                           
  6957 ;; *************** function _SetConversionResultFormat *****************
  6958 ;; Defined at:
  6959 ;;		line 38 in file "AdcApp.c"
  6960 ;; Parameters:    Size  Location     Type
  6961 ;;  data            2   43[COMRAM] PTR unsigned char 
  6962 ;; Auto vars:     Size  Location     Type
  6963 ;;		None
  6964 ;; Return value:  Size  Location     Type
  6965 ;;                  1    wreg      void 
  6966 ;; Registers used:
  6967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6968 ;; Tracked objects:
  6969 ;;		On entry : 0/0
  6970 ;;		On exit  : 0/0
  6971 ;;		Unchanged: 0/0
  6972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6973 ;;      Params:         2       0       0       0       0       0       0
  6974 ;;      Locals:         0       0       0       0       0       0       0
  6975 ;;      Temps:          0       0       0       0       0       0       0
  6976 ;;      Totals:         2       0       0       0       0       0       0
  6977 ;;Total ram usage:        2 bytes
  6978 ;; Hardware stack levels used:    1
  6979 ;; Hardware stack levels required when called:    6
  6980 ;; This function calls:
  6981 ;;		_SendAckMessage
  6982 ;; This function is called by:
  6983 ;;		_GroupAdc
  6984 ;; This function uses a non-reentrant model
  6985 ;;
  6986                           
  6987                           	psect	text39
  6988  0036DC                     __ptext39:
  6989                           	opt stack 0
  6990  0036DC                     _SetConversionResultFormat:
  6991                           	opt stack 22
  6992                           
  6993                           ;AdcApp.c: 40: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CONVERSION_MODE);
  6994                           
  6995                           ;incstack = 0
  6996  0036DC  0E33               	movlw	51
  6997  0036DE  6E24               	movwf	SendAckMessage@inRequest,c
  6998  0036E0  0E03               	movlw	3
  6999  0036E2  EC77  F016         	call	_SendAckMessage
  7000  0036E6  0012               	return		;funcret
  7001  0036E8                     __end_of_SetConversionResultFormat:
  7002                           	opt stack 0
  7003                           tosu	equ	0xFFF
  7004                           tosh	equ	0xFFE
  7005                           tosl	equ	0xFFD
  7006                           pclath	equ	0xFFA
  7007                           tblptru	equ	0xFF8
  7008                           tblptrh	equ	0xFF7
  7009                           tblptrl	equ	0xFF6
  7010                           tablat	equ	0xFF5
  7011                           prodh	equ	0xFF4
  7012                           prodl	equ	0xFF3
  7013                           intcon	equ	0xFF2
  7014                           postinc0	equ	0xFEE
  7015                           wreg	equ	0xFE8
  7016                           indf1	equ	0xFE7
  7017                           postdec1	equ	0xFE5
  7018                           fsr1h	equ	0xFE2
  7019                           fsr1l	equ	0xFE1
  7020                           indf2	equ	0xFDF
  7021                           postinc2	equ	0xFDE
  7022                           postdec2	equ	0xFDD
  7023                           fsr2h	equ	0xFDA
  7024                           fsr2l	equ	0xFD9
  7025                           status	equ	0xFD8
  7026                           
  7027 ;; *************** function _SetChannelMode *****************
  7028 ;; Defined at:
  7029 ;;		line 43 in file "AdcApp.c"
  7030 ;; Parameters:    Size  Location     Type
  7031 ;;  data            2   43[COMRAM] PTR unsigned char 
  7032 ;; Auto vars:     Size  Location     Type
  7033 ;;		None
  7034 ;; Return value:  Size  Location     Type
  7035 ;;                  1    wreg      void 
  7036 ;; Registers used:
  7037 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7038 ;; Tracked objects:
  7039 ;;		On entry : 0/0
  7040 ;;		On exit  : 0/0
  7041 ;;		Unchanged: 0/0
  7042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7043 ;;      Params:         2       0       0       0       0       0       0
  7044 ;;      Locals:         0       0       0       0       0       0       0
  7045 ;;      Temps:          0       0       0       0       0       0       0
  7046 ;;      Totals:         2       0       0       0       0       0       0
  7047 ;;Total ram usage:        2 bytes
  7048 ;; Hardware stack levels used:    1
  7049 ;; Hardware stack levels required when called:    6
  7050 ;; This function calls:
  7051 ;;		_SendAckMessage
  7052 ;; This function is called by:
  7053 ;;		_GroupAdc
  7054 ;; This function uses a non-reentrant model
  7055 ;;
  7056                           
  7057                           	psect	text40
  7058  003312                     __ptext40:
  7059                           	opt stack 0
  7060  003312                     _SetChannelMode:
  7061                           	opt stack 22
  7062                           
  7063                           ;AdcApp.c: 45: adcSampleMode = data[0];
  7064                           
  7065                           ;incstack = 0
  7066  003312  C02C  FFD9         	movff	SetChannelMode@data,fsr2l
  7067  003316  C02D  FFDA         	movff	SetChannelMode@data+1,fsr2h
  7068  00331A  50DF               	movf	indf2,w,c
  7069  00331C  6E3C               	movwf	_adcSampleMode,c
  7070                           
  7071                           ;AdcApp.c: 46: if (adcSampleMode == SINGLE_CHANNEL)
  7072  00331E  043C               	decf	_adcSampleMode,w,c
  7073  003320  A4D8               	btfss	status,2,c
  7074  003322  D009               	goto	l104
  7075                           
  7076                           ;AdcApp.c: 47: {
  7077                           ;AdcApp.c: 48: channel = data[1];
  7078  003324  EE20 F001          	lfsr	2,1
  7079  003328  502C               	movf	SetChannelMode@data,w,c
  7080  00332A  26D9               	addwf	fsr2l,f,c
  7081  00332C  502D               	movf	SetChannelMode@data+1,w,c
  7082  00332E  22DA               	addwfc	fsr2h,f,c
  7083  003330  50DF               	movf	indf2,w,c
  7084  003332  0100               	movlb	0	; () banked
  7085  003334  6FD3               	movwf	_channel& (0+255),b
  7086  003336                     l104:
  7087                           
  7088                           ;AdcApp.c: 49: }
  7089                           ;AdcApp.c: 50: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CHANNEL_MODE);
  7090                           
  7091                           ; BSR set to: 0
  7092  003336  0E32               	movlw	50
  7093  003338  6E24               	movwf	SendAckMessage@inRequest,c
  7094  00333A  0E03               	movlw	3
  7095  00333C  EC77  F016         	call	_SendAckMessage
  7096  003340  0012               	return		;funcret
  7097  003342                     __end_of_SetChannelMode:
  7098                           	opt stack 0
  7099                           tosu	equ	0xFFF
  7100                           tosh	equ	0xFFE
  7101                           tosl	equ	0xFFD
  7102                           pclath	equ	0xFFA
  7103                           tblptru	equ	0xFF8
  7104                           tblptrh	equ	0xFF7
  7105                           tblptrl	equ	0xFF6
  7106                           tablat	equ	0xFF5
  7107                           prodh	equ	0xFF4
  7108                           prodl	equ	0xFF3
  7109                           intcon	equ	0xFF2
  7110                           postinc0	equ	0xFEE
  7111                           wreg	equ	0xFE8
  7112                           indf1	equ	0xFE7
  7113                           postdec1	equ	0xFE5
  7114                           fsr1h	equ	0xFE2
  7115                           fsr1l	equ	0xFE1
  7116                           indf2	equ	0xFDF
  7117                           postinc2	equ	0xFDE
  7118                           postdec2	equ	0xFDD
  7119                           fsr2h	equ	0xFDA
  7120                           fsr2l	equ	0xFD9
  7121                           status	equ	0xFD8
  7122                           
  7123 ;; *************** function _SetAdcOperationMode *****************
  7124 ;; Defined at:
  7125 ;;		line 33 in file "AdcApp.c"
  7126 ;; Parameters:    Size  Location     Type
  7127 ;;  data            2   43[COMRAM] PTR unsigned char 
  7128 ;; Auto vars:     Size  Location     Type
  7129 ;;		None
  7130 ;; Return value:  Size  Location     Type
  7131 ;;                  1    wreg      void 
  7132 ;; Registers used:
  7133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7134 ;; Tracked objects:
  7135 ;;		On entry : 0/0
  7136 ;;		On exit  : 0/0
  7137 ;;		Unchanged: 0/0
  7138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7139 ;;      Params:         2       0       0       0       0       0       0
  7140 ;;      Locals:         0       0       0       0       0       0       0
  7141 ;;      Temps:          0       0       0       0       0       0       0
  7142 ;;      Totals:         2       0       0       0       0       0       0
  7143 ;;Total ram usage:        2 bytes
  7144 ;; Hardware stack levels used:    1
  7145 ;; Hardware stack levels required when called:    6
  7146 ;; This function calls:
  7147 ;;		_SendAckMessage
  7148 ;; This function is called by:
  7149 ;;		_GroupAdc
  7150 ;; This function uses a non-reentrant model
  7151 ;;
  7152                           
  7153                           	psect	text41
  7154  0036E8                     __ptext41:
  7155                           	opt stack 0
  7156  0036E8                     _SetAdcOperationMode:
  7157                           	opt stack 22
  7158                           
  7159                           ;AdcApp.c: 35: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_OPERATION);
  7160                           
  7161                           ;incstack = 0
  7162  0036E8  0E31               	movlw	49
  7163  0036EA  6E24               	movwf	SendAckMessage@inRequest,c
  7164  0036EC  0E03               	movlw	3
  7165  0036EE  EC77  F016         	call	_SendAckMessage
  7166  0036F2  0012               	return		;funcret
  7167  0036F4                     __end_of_SetAdcOperationMode:
  7168                           	opt stack 0
  7169                           tosu	equ	0xFFF
  7170                           tosh	equ	0xFFE
  7171                           tosl	equ	0xFFD
  7172                           pclath	equ	0xFFA
  7173                           tblptru	equ	0xFF8
  7174                           tblptrh	equ	0xFF7
  7175                           tblptrl	equ	0xFF6
  7176                           tablat	equ	0xFF5
  7177                           prodh	equ	0xFF4
  7178                           prodl	equ	0xFF3
  7179                           intcon	equ	0xFF2
  7180                           postinc0	equ	0xFEE
  7181                           wreg	equ	0xFE8
  7182                           indf1	equ	0xFE7
  7183                           postdec1	equ	0xFE5
  7184                           fsr1h	equ	0xFE2
  7185                           fsr1l	equ	0xFE1
  7186                           indf2	equ	0xFDF
  7187                           postinc2	equ	0xFDE
  7188                           postdec2	equ	0xFDD
  7189                           fsr2h	equ	0xFDA
  7190                           fsr2l	equ	0xFD9
  7191                           status	equ	0xFD8
  7192                           
  7193 ;; *************** function _EUSART1_Read *****************
  7194 ;; Defined at:
  7195 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  7196 ;; Parameters:    Size  Location     Type
  7197 ;;		None
  7198 ;; Auto vars:     Size  Location     Type
  7199 ;;  readValue       2   24[COMRAM] unsigned int 
  7200 ;; Return value:  Size  Location     Type
  7201 ;;                  1    wreg      unsigned char 
  7202 ;; Registers used:
  7203 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7204 ;; Tracked objects:
  7205 ;;		On entry : 0/0
  7206 ;;		On exit  : 0/0
  7207 ;;		Unchanged: 0/0
  7208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7209 ;;      Params:         0       0       0       0       0       0       0
  7210 ;;      Locals:         2       0       0       0       0       0       0
  7211 ;;      Temps:          1       0       0       0       0       0       0
  7212 ;;      Totals:         3       0       0       0       0       0       0
  7213 ;;Total ram usage:        3 bytes
  7214 ;; Hardware stack levels used:    1
  7215 ;; Hardware stack levels required when called:    3
  7216 ;; This function calls:
  7217 ;;		Nothing
  7218 ;; This function is called by:
  7219 ;;		_readUartMessage
  7220 ;; This function uses a non-reentrant model
  7221 ;;
  7222                           
  7223                           	psect	text42
  7224  002E62                     __ptext42:
  7225                           	opt stack 0
  7226  002E62                     _EUSART1_Read:
  7227                           	opt stack 26
  7228                           
  7229                           ;eusart1.c: 112: uint16_t readValue = 0;
  7230                           
  7231                           ;incstack = 0
  7232  002E62  0E00               	movlw	0
  7233  002E64  6E1A               	movwf	EUSART1_Read@readValue+1,c
  7234  002E66  0E00               	movlw	0
  7235  002E68  6E19               	movwf	EUSART1_Read@readValue,c
  7236                           
  7237                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  7238  002E6A  0100               	movlb	0	; () banked
  7239  002E6C  51D2               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  7240  002E6E  A4D8               	btfss	status,2,c
  7241  002E70  D002               	goto	l814
  7242                           
  7243                           ; BSR set to: 0
  7244                           ;eusart1.c: 120: {
  7245                           ;eusart1.c: 121: return readValue;
  7246  002E72  5019               	movf	EUSART1_Read@readValue,w,c
  7247                           
  7248                           ; BSR set to: 0
  7249  002E74  0012               	return	
  7250  002E76                     l814:
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;eusart1.c: 122: }
  7254                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  7255                           
  7256                           ; BSR set to: 0
  7257  002E76  5037               	movf	_eusart1RxTail,w,c	;volatile
  7258  002E78  0D01               	mullw	1
  7259  002E7A  0E46               	movlw	low _eusart1RxBuffer
  7260  002E7C  24F3               	addwf	prodl,w,c
  7261  002E7E  6ED9               	movwf	fsr2l,c
  7262  002E80  0E01               	movlw	high _eusart1RxBuffer
  7263  002E82  20F4               	addwfc	prodh,w,c
  7264  002E84  6EDA               	movwf	fsr2h,c
  7265  002E86  50DF               	movf	indf2,w,c
  7266  002E88  6E18               	movwf	??_EUSART1_Read& (0+255),c
  7267  002E8A  5018               	movf	??_EUSART1_Read,w,c
  7268  002E8C  6E19               	movwf	EUSART1_Read@readValue,c
  7269  002E8E  6A1A               	clrf	EUSART1_Read@readValue+1,c
  7270                           
  7271                           ; BSR set to: 0
  7272  002E90  2A37               	incf	_eusart1RxTail,f,c	;volatile
  7273                           
  7274                           ; BSR set to: 0
  7275                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  7276  002E92  0E27               	movlw	39
  7277  002E94  6437               	cpfsgt	_eusart1RxTail,c	;volatile
  7278  002E96  D002               	goto	l816
  7279                           
  7280                           ; BSR set to: 0
  7281                           ;eusart1.c: 126: {
  7282                           ;eusart1.c: 127: eusart1RxTail = 0;
  7283  002E98  0E00               	movlw	0
  7284  002E9A  6E37               	movwf	_eusart1RxTail,c	;volatile
  7285  002E9C                     l816:
  7286                           
  7287                           ; BSR set to: 0
  7288                           ;eusart1.c: 128: }
  7289                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  7290                           
  7291                           ; BSR set to: 0
  7292  002E9C  9A9D               	bcf	3997,5,c	;volatile
  7293                           
  7294                           ; BSR set to: 0
  7295                           ;eusart1.c: 130: eusart1RxCount--;
  7296  002E9E  07D2               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  7297                           
  7298                           ; BSR set to: 0
  7299                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  7300  002EA0  8A9D               	bsf	3997,5,c	;volatile
  7301                           
  7302                           ; BSR set to: 0
  7303                           ;eusart1.c: 133: return readValue;
  7304  002EA2  5019               	movf	EUSART1_Read@readValue,w,c
  7305  002EA4  0012               	return	
  7306  002EA6                     __end_of_EUSART1_Read:
  7307                           	opt stack 0
  7308                           tosu	equ	0xFFF
  7309                           tosh	equ	0xFFE
  7310                           tosl	equ	0xFFD
  7311                           pclath	equ	0xFFA
  7312                           tblptru	equ	0xFF8
  7313                           tblptrh	equ	0xFF7
  7314                           tblptrl	equ	0xFF6
  7315                           tablat	equ	0xFF5
  7316                           prodh	equ	0xFF4
  7317                           prodl	equ	0xFF3
  7318                           intcon	equ	0xFF2
  7319                           postinc0	equ	0xFEE
  7320                           wreg	equ	0xFE8
  7321                           indf1	equ	0xFE7
  7322                           postdec1	equ	0xFE5
  7323                           fsr1h	equ	0xFE2
  7324                           fsr1l	equ	0xFE1
  7325                           indf2	equ	0xFDF
  7326                           postinc2	equ	0xFDE
  7327                           postdec2	equ	0xFDD
  7328                           fsr2h	equ	0xFDA
  7329                           fsr2l	equ	0xFD9
  7330                           status	equ	0xFD8
  7331                           
  7332 ;; *************** function _keepAliveSignalUart *****************
  7333 ;; Defined at:
  7334 ;;		line 117 in file "SystemStatus.c"
  7335 ;; Parameters:    Size  Location     Type
  7336 ;;		None
  7337 ;; Auto vars:     Size  Location     Type
  7338 ;;		None
  7339 ;; Return value:  Size  Location     Type
  7340 ;;                  1    wreg      void 
  7341 ;; Registers used:
  7342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7343 ;; Tracked objects:
  7344 ;;		On entry : 0/0
  7345 ;;		On exit  : 0/0
  7346 ;;		Unchanged: 0/0
  7347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7348 ;;      Params:         0       0       0       0       0       0       0
  7349 ;;      Locals:         0       0       0       0       0       0       0
  7350 ;;      Temps:          0       0       0       0       0       0       0
  7351 ;;      Totals:         0       0       0       0       0       0       0
  7352 ;;Total ram usage:        0 bytes
  7353 ;; Hardware stack levels used:    1
  7354 ;; Hardware stack levels required when called:    6
  7355 ;; This function calls:
  7356 ;;		_SendAckMessage
  7357 ;; This function is called by:
  7358 ;;		_main
  7359 ;; This function uses a non-reentrant model
  7360 ;;
  7361                           
  7362                           	psect	text43
  7363  0036F4                     __ptext43:
  7364                           	opt stack 0
  7365  0036F4                     _keepAliveSignalUart:
  7366                           	opt stack 24
  7367                           
  7368                           ;SystemStatus.c: 119: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_KEEP_
      +                          ALIVE);
  7369                           
  7370                           ; BSR set to: 0
  7371                           ;incstack = 0
  7372  0036F4  0E16               	movlw	22
  7373  0036F6  6E24               	movwf	SendAckMessage@inRequest,c
  7374  0036F8  0E01               	movlw	1
  7375  0036FA  EC77  F016         	call	_SendAckMessage
  7376  0036FE  0012               	return		;funcret
  7377  003700                     __end_of_keepAliveSignalUart:
  7378                           	opt stack 0
  7379                           tosu	equ	0xFFF
  7380                           tosh	equ	0xFFE
  7381                           tosl	equ	0xFFD
  7382                           pclath	equ	0xFFA
  7383                           tblptru	equ	0xFF8
  7384                           tblptrh	equ	0xFF7
  7385                           tblptrl	equ	0xFF6
  7386                           tablat	equ	0xFF5
  7387                           prodh	equ	0xFF4
  7388                           prodl	equ	0xFF3
  7389                           intcon	equ	0xFF2
  7390                           postinc0	equ	0xFEE
  7391                           wreg	equ	0xFE8
  7392                           indf1	equ	0xFE7
  7393                           postdec1	equ	0xFE5
  7394                           fsr1h	equ	0xFE2
  7395                           fsr1l	equ	0xFE1
  7396                           indf2	equ	0xFDF
  7397                           postinc2	equ	0xFDE
  7398                           postdec2	equ	0xFDD
  7399                           fsr2h	equ	0xFDA
  7400                           fsr2l	equ	0xFD9
  7401                           status	equ	0xFD8
  7402                           
  7403 ;; *************** function _keepAliveSignalLed *****************
  7404 ;; Defined at:
  7405 ;;		line 35 in file "LedsApp.c"
  7406 ;; Parameters:    Size  Location     Type
  7407 ;;		None
  7408 ;; Auto vars:     Size  Location     Type
  7409 ;;		None
  7410 ;; Return value:  Size  Location     Type
  7411 ;;                  1    wreg      void 
  7412 ;; Registers used:
  7413 ;;		wreg, status,2, status,0
  7414 ;; Tracked objects:
  7415 ;;		On entry : 0/0
  7416 ;;		On exit  : 0/0
  7417 ;;		Unchanged: 0/0
  7418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7419 ;;      Params:         0       0       0       0       0       0       0
  7420 ;;      Locals:         0       0       0       0       0       0       0
  7421 ;;      Temps:          1       0       0       0       0       0       0
  7422 ;;      Totals:         1       0       0       0       0       0       0
  7423 ;;Total ram usage:        1 bytes
  7424 ;; Hardware stack levels used:    1
  7425 ;; Hardware stack levels required when called:    3
  7426 ;; This function calls:
  7427 ;;		Nothing
  7428 ;; This function is called by:
  7429 ;;		_main
  7430 ;; This function uses a non-reentrant model
  7431 ;;
  7432                           
  7433                           	psect	text44
  7434  0035E8                     __ptext44:
  7435                           	opt stack 0
  7436  0035E8                     _keepAliveSignalLed:
  7437                           	opt stack 27
  7438                           
  7439                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  7440                           
  7441                           ;incstack = 0
  7442  0035E8  B08B               	btfsc	3979,0,c	;volatile
  7443  0035EA  D003               	goto	u5090
  7444  0035EC  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7445  0035EE  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  7446  0035F0  D001               	goto	u5108
  7447  0035F2                     u5090:
  7448  0035F2  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  7449  0035F4                     u5108:
  7450  0035F4  508B               	movf	3979,w,c	;volatile
  7451  0035F6  1818               	xorwf	??_keepAliveSignalLed,w,c
  7452  0035F8  0BFE               	andlw	-2
  7453  0035FA  1818               	xorwf	??_keepAliveSignalLed,w,c
  7454  0035FC  6E8B               	movwf	3979,c	;volatile
  7455  0035FE  0012               	return		;funcret
  7456  003600                     __end_of_keepAliveSignalLed:
  7457                           	opt stack 0
  7458                           tosu	equ	0xFFF
  7459                           tosh	equ	0xFFE
  7460                           tosl	equ	0xFFD
  7461                           pclath	equ	0xFFA
  7462                           tblptru	equ	0xFF8
  7463                           tblptrh	equ	0xFF7
  7464                           tblptrl	equ	0xFF6
  7465                           tablat	equ	0xFF5
  7466                           prodh	equ	0xFF4
  7467                           prodl	equ	0xFF3
  7468                           intcon	equ	0xFF2
  7469                           postinc0	equ	0xFEE
  7470                           wreg	equ	0xFE8
  7471                           indf1	equ	0xFE7
  7472                           postdec1	equ	0xFE5
  7473                           fsr1h	equ	0xFE2
  7474                           fsr1l	equ	0xFE1
  7475                           indf2	equ	0xFDF
  7476                           postinc2	equ	0xFDE
  7477                           postdec2	equ	0xFDD
  7478                           fsr2h	equ	0xFDA
  7479                           fsr2l	equ	0xFD9
  7480                           status	equ	0xFD8
  7481                           
  7482 ;; *************** function _SetMcuSystem *****************
  7483 ;; Defined at:
  7484 ;;		line 11 in file "SystemSettings.c"
  7485 ;; Parameters:    Size  Location     Type
  7486 ;;		None
  7487 ;; Auto vars:     Size  Location     Type
  7488 ;;		None
  7489 ;; Return value:  Size  Location     Type
  7490 ;;                  1    wreg      void 
  7491 ;; Registers used:
  7492 ;;		wreg, status,2, status,0, cstack
  7493 ;; Tracked objects:
  7494 ;;		On entry : 0/0
  7495 ;;		On exit  : 0/0
  7496 ;;		Unchanged: 0/0
  7497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7498 ;;      Params:         0       0       0       0       0       0       0
  7499 ;;      Locals:         0       0       0       0       0       0       0
  7500 ;;      Temps:          0       0       0       0       0       0       0
  7501 ;;      Totals:         0       0       0       0       0       0       0
  7502 ;;Total ram usage:        0 bytes
  7503 ;; Hardware stack levels used:    1
  7504 ;; Hardware stack levels required when called:    6
  7505 ;; This function calls:
  7506 ;;		_SYSTEM_Initialize
  7507 ;; This function is called by:
  7508 ;;		_main
  7509 ;; This function uses a non-reentrant model
  7510 ;;
  7511                           
  7512                           	psect	text45
  7513  003716                     __ptext45:
  7514                           	opt stack 0
  7515  003716                     _SetMcuSystem:
  7516                           	opt stack 24
  7517                           
  7518                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  7519                           
  7520                           ;incstack = 0
  7521  003716  ECE7  F01A         	call	_SYSTEM_Initialize	;wreg free
  7522                           
  7523                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  7524  00371A  8EF2               	bsf	intcon,7,c	;volatile
  7525                           
  7526                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  7527  00371C  8CF2               	bsf	intcon,6,c	;volatile
  7528  00371E  0012               	return		;funcret
  7529  003720                     __end_of_SetMcuSystem:
  7530                           	opt stack 0
  7531                           tosu	equ	0xFFF
  7532                           tosh	equ	0xFFE
  7533                           tosl	equ	0xFFD
  7534                           pclath	equ	0xFFA
  7535                           tblptru	equ	0xFF8
  7536                           tblptrh	equ	0xFF7
  7537                           tblptrl	equ	0xFF6
  7538                           tablat	equ	0xFF5
  7539                           prodh	equ	0xFF4
  7540                           prodl	equ	0xFF3
  7541                           intcon	equ	0xFF2
  7542                           postinc0	equ	0xFEE
  7543                           wreg	equ	0xFE8
  7544                           indf1	equ	0xFE7
  7545                           postdec1	equ	0xFE5
  7546                           fsr1h	equ	0xFE2
  7547                           fsr1l	equ	0xFE1
  7548                           indf2	equ	0xFDF
  7549                           postinc2	equ	0xFDE
  7550                           postdec2	equ	0xFDD
  7551                           fsr2h	equ	0xFDA
  7552                           fsr2l	equ	0xFD9
  7553                           status	equ	0xFD8
  7554                           
  7555 ;; *************** function _SYSTEM_Initialize *****************
  7556 ;; Defined at:
  7557 ;;		line 112 in file "mcc_generated_files/mcc.c"
  7558 ;; Parameters:    Size  Location     Type
  7559 ;;		None
  7560 ;; Auto vars:     Size  Location     Type
  7561 ;;		None
  7562 ;; Return value:  Size  Location     Type
  7563 ;;                  1    wreg      void 
  7564 ;; Registers used:
  7565 ;;		wreg, status,2, status,0, cstack
  7566 ;; Tracked objects:
  7567 ;;		On entry : 0/0
  7568 ;;		On exit  : 0/0
  7569 ;;		Unchanged: 0/0
  7570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7571 ;;      Params:         0       0       0       0       0       0       0
  7572 ;;      Locals:         0       0       0       0       0       0       0
  7573 ;;      Temps:          0       0       0       0       0       0       0
  7574 ;;      Totals:         0       0       0       0       0       0       0
  7575 ;;Total ram usage:        0 bytes
  7576 ;; Hardware stack levels used:    1
  7577 ;; Hardware stack levels required when called:    5
  7578 ;; This function calls:
  7579 ;;		_ADC_Initialize
  7580 ;;		_EUSART1_Initialize
  7581 ;;		_INTERRUPT_Initialize
  7582 ;;		_OSCILLATOR_Initialize
  7583 ;;		_PIN_MANAGER_Initialize
  7584 ;;		_TMR0_Initialize
  7585 ;; This function is called by:
  7586 ;;		_SetMcuSystem
  7587 ;; This function uses a non-reentrant model
  7588 ;;
  7589                           
  7590                           	psect	text46
  7591  0035CE                     __ptext46:
  7592                           	opt stack 0
  7593  0035CE                     _SYSTEM_Initialize:
  7594                           	opt stack 24
  7595                           
  7596                           ;mcc.c: 114: INTERRUPT_Initialize();
  7597                           
  7598                           ;incstack = 0
  7599  0035CE  EC97  F01B         	call	_INTERRUPT_Initialize	;wreg free
  7600                           
  7601                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  7602  0035D2  ECEB  F016         	call	_PIN_MANAGER_Initialize	;wreg free
  7603                           
  7604                           ;mcc.c: 116: OSCILLATOR_Initialize();
  7605  0035D6  EC53  F01B         	call	_OSCILLATOR_Initialize	;wreg free
  7606                           
  7607                           ;mcc.c: 117: ADC_Initialize();
  7608  0035DA  EC00  F01B         	call	_ADC_Initialize	;wreg free
  7609                           
  7610                           ;mcc.c: 118: TMR0_Initialize();
  7611  0035DE  EC55  F019         	call	_TMR0_Initialize	;wreg free
  7612                           
  7613                           ;mcc.c: 119: EUSART1_Initialize();
  7614  0035E2  EC1F  F019         	call	_EUSART1_Initialize	;wreg free
  7615  0035E6  0012               	return		;funcret
  7616  0035E8                     __end_of_SYSTEM_Initialize:
  7617                           	opt stack 0
  7618                           tosu	equ	0xFFF
  7619                           tosh	equ	0xFFE
  7620                           tosl	equ	0xFFD
  7621                           pclath	equ	0xFFA
  7622                           tblptru	equ	0xFF8
  7623                           tblptrh	equ	0xFF7
  7624                           tblptrl	equ	0xFF6
  7625                           tablat	equ	0xFF5
  7626                           prodh	equ	0xFF4
  7627                           prodl	equ	0xFF3
  7628                           intcon	equ	0xFF2
  7629                           postinc0	equ	0xFEE
  7630                           wreg	equ	0xFE8
  7631                           indf1	equ	0xFE7
  7632                           postdec1	equ	0xFE5
  7633                           fsr1h	equ	0xFE2
  7634                           fsr1l	equ	0xFE1
  7635                           indf2	equ	0xFDF
  7636                           postinc2	equ	0xFDE
  7637                           postdec2	equ	0xFDD
  7638                           fsr2h	equ	0xFDA
  7639                           fsr2l	equ	0xFD9
  7640                           status	equ	0xFD8
  7641                           
  7642 ;; *************** function _TMR0_Initialize *****************
  7643 ;; Defined at:
  7644 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  7645 ;; Parameters:    Size  Location     Type
  7646 ;;		None
  7647 ;; Auto vars:     Size  Location     Type
  7648 ;;		None
  7649 ;; Return value:  Size  Location     Type
  7650 ;;                  1    wreg      void 
  7651 ;; Registers used:
  7652 ;;		wreg, status,2, status,0, cstack
  7653 ;; Tracked objects:
  7654 ;;		On entry : 0/0
  7655 ;;		On exit  : 0/0
  7656 ;;		Unchanged: 0/0
  7657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7658 ;;      Params:         0       0       0       0       0       0       0
  7659 ;;      Locals:         0       0       0       0       0       0       0
  7660 ;;      Temps:          2       0       0       0       0       0       0
  7661 ;;      Totals:         2       0       0       0       0       0       0
  7662 ;;Total ram usage:        2 bytes
  7663 ;; Hardware stack levels used:    1
  7664 ;; Hardware stack levels required when called:    4
  7665 ;; This function calls:
  7666 ;;		_TMR0_SetInterruptHandler
  7667 ;; This function is called by:
  7668 ;;		_SYSTEM_Initialize
  7669 ;; This function uses a non-reentrant model
  7670 ;;
  7671                           
  7672                           	psect	text47
  7673  0032AA                     __ptext47:
  7674                           	opt stack 0
  7675  0032AA                     _TMR0_Initialize:
  7676                           	opt stack 24
  7677                           
  7678                           ;tmr0.c: 71: TMR0H = 0x3C;
  7679                           
  7680                           ;incstack = 0
  7681  0032AA  0E3C               	movlw	60
  7682  0032AC  6ED7               	movwf	4055,c	;volatile
  7683                           
  7684                           ;tmr0.c: 74: TMR0L = 0xAF;
  7685  0032AE  0EAF               	movlw	175
  7686  0032B0  6ED6               	movwf	4054,c	;volatile
  7687                           
  7688                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  7689  0032B2  50D6               	movf	4054,w,c	;volatile
  7690  0032B4  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  7691  0032B8  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  7692  0032BA  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  7693  0032BE  6A1A               	clrf	??_TMR0_Initialize,c
  7694  0032C0  101A               	iorwf	??_TMR0_Initialize,w,c
  7695  0032C2  6E46               	movwf	_timer0ReloadVal,c	;volatile
  7696  0032C4  501B               	movf	??_TMR0_Initialize+1,w,c
  7697  0032C6  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  7698                           
  7699                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  7700  0032C8  94F2               	bcf	intcon,2,c	;volatile
  7701                           
  7702                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  7703  0032CA  8AF2               	bsf	intcon,5,c	;volatile
  7704                           
  7705                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  7706  0032CC  0E00               	movlw	0
  7707  0032CE  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  7708  0032D0  0E00               	movlw	0
  7709  0032D2  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  7710  0032D4  EC90  F01B         	call	_TMR0_SetInterruptHandler	;wreg free
  7711                           
  7712                           ;tmr0.c: 90: T0CON = 0x90;
  7713  0032D8  0E90               	movlw	144
  7714  0032DA  6ED5               	movwf	4053,c	;volatile
  7715  0032DC  0012               	return		;funcret
  7716  0032DE                     __end_of_TMR0_Initialize:
  7717                           	opt stack 0
  7718                           tosu	equ	0xFFF
  7719                           tosh	equ	0xFFE
  7720                           tosl	equ	0xFFD
  7721                           pclath	equ	0xFFA
  7722                           tblptru	equ	0xFF8
  7723                           tblptrh	equ	0xFF7
  7724                           tblptrl	equ	0xFF6
  7725                           tablat	equ	0xFF5
  7726                           prodh	equ	0xFF4
  7727                           prodl	equ	0xFF3
  7728                           intcon	equ	0xFF2
  7729                           postinc0	equ	0xFEE
  7730                           wreg	equ	0xFE8
  7731                           indf1	equ	0xFE7
  7732                           postdec1	equ	0xFE5
  7733                           fsr1h	equ	0xFE2
  7734                           fsr1l	equ	0xFE1
  7735                           indf2	equ	0xFDF
  7736                           postinc2	equ	0xFDE
  7737                           postdec2	equ	0xFDD
  7738                           fsr2h	equ	0xFDA
  7739                           fsr2l	equ	0xFD9
  7740                           status	equ	0xFD8
  7741                           
  7742 ;; *************** function _TMR0_SetInterruptHandler *****************
  7743 ;; Defined at:
  7744 ;;		line 177 in file "mcc_generated_files/tmr0.c"
  7745 ;; Parameters:    Size  Location     Type
  7746 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  7747 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  7748 ;; Auto vars:     Size  Location     Type
  7749 ;;		None
  7750 ;; Return value:  Size  Location     Type
  7751 ;;                  1    wreg      void 
  7752 ;; Registers used:
  7753 ;;		wreg, status,2, status,0
  7754 ;; Tracked objects:
  7755 ;;		On entry : 0/0
  7756 ;;		On exit  : 0/0
  7757 ;;		Unchanged: 0/0
  7758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7759 ;;      Params:         2       0       0       0       0       0       0
  7760 ;;      Locals:         0       0       0       0       0       0       0
  7761 ;;      Temps:          0       0       0       0       0       0       0
  7762 ;;      Totals:         2       0       0       0       0       0       0
  7763 ;;Total ram usage:        2 bytes
  7764 ;; Hardware stack levels used:    1
  7765 ;; Hardware stack levels required when called:    3
  7766 ;; This function calls:
  7767 ;;		Nothing
  7768 ;; This function is called by:
  7769 ;;		_TMR0_Initialize
  7770 ;; This function uses a non-reentrant model
  7771 ;;
  7772                           
  7773                           	psect	text48
  7774  003720                     __ptext48:
  7775                           	opt stack 0
  7776  003720                     _TMR0_SetInterruptHandler:
  7777                           	opt stack 24
  7778                           
  7779                           ;tmr0.c: 178: TMR0_InterruptHandler = InterruptHandler;
  7780                           
  7781                           ;incstack = 0
  7782  003720  C018  F0FB         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  7783  003724  C019  F0FC         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  7784  003728  0012               	return		;funcret
  7785  00372A                     __end_of_TMR0_SetInterruptHandler:
  7786                           	opt stack 0
  7787                           tosu	equ	0xFFF
  7788                           tosh	equ	0xFFE
  7789                           tosl	equ	0xFFD
  7790                           pclath	equ	0xFFA
  7791                           tblptru	equ	0xFF8
  7792                           tblptrh	equ	0xFF7
  7793                           tblptrl	equ	0xFF6
  7794                           tablat	equ	0xFF5
  7795                           prodh	equ	0xFF4
  7796                           prodl	equ	0xFF3
  7797                           intcon	equ	0xFF2
  7798                           postinc0	equ	0xFEE
  7799                           wreg	equ	0xFE8
  7800                           indf1	equ	0xFE7
  7801                           postdec1	equ	0xFE5
  7802                           fsr1h	equ	0xFE2
  7803                           fsr1l	equ	0xFE1
  7804                           indf2	equ	0xFDF
  7805                           postinc2	equ	0xFDE
  7806                           postdec2	equ	0xFDD
  7807                           fsr2h	equ	0xFDA
  7808                           fsr2l	equ	0xFD9
  7809                           status	equ	0xFD8
  7810                           
  7811 ;; *************** function _PIN_MANAGER_Initialize *****************
  7812 ;; Defined at:
  7813 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  7814 ;; Parameters:    Size  Location     Type
  7815 ;;		None
  7816 ;; Auto vars:     Size  Location     Type
  7817 ;;		None
  7818 ;; Return value:  Size  Location     Type
  7819 ;;                  1    wreg      void 
  7820 ;; Registers used:
  7821 ;;		wreg, status,2
  7822 ;; Tracked objects:
  7823 ;;		On entry : 0/0
  7824 ;;		On exit  : 0/0
  7825 ;;		Unchanged: 0/0
  7826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7827 ;;      Params:         0       0       0       0       0       0       0
  7828 ;;      Locals:         0       0       0       0       0       0       0
  7829 ;;      Temps:          0       0       0       0       0       0       0
  7830 ;;      Totals:         0       0       0       0       0       0       0
  7831 ;;Total ram usage:        0 bytes
  7832 ;; Hardware stack levels used:    1
  7833 ;; Hardware stack levels required when called:    3
  7834 ;; This function calls:
  7835 ;;		Nothing
  7836 ;; This function is called by:
  7837 ;;		_SYSTEM_Initialize
  7838 ;; This function uses a non-reentrant model
  7839 ;;
  7840                           
  7841                           	psect	text49
  7842  002DD6                     __ptext49:
  7843                           	opt stack 0
  7844  002DD6                     _PIN_MANAGER_Initialize:
  7845                           	opt stack 25
  7846                           
  7847                           ;pin_manager.c: 57: LATE = 0x00;
  7848                           
  7849                           ;incstack = 0
  7850  002DD6  0E00               	movlw	0
  7851  002DD8  6E8D               	movwf	3981,c	;volatile
  7852                           
  7853                           ;pin_manager.c: 58: LATD = 0x00;
  7854  002DDA  0E00               	movlw	0
  7855  002DDC  6E8C               	movwf	3980,c	;volatile
  7856                           
  7857                           ;pin_manager.c: 59: LATA = 0x06;
  7858  002DDE  0E06               	movlw	6
  7859  002DE0  6E89               	movwf	3977,c	;volatile
  7860                           
  7861                           ;pin_manager.c: 60: LATB = 0x00;
  7862  002DE2  0E00               	movlw	0
  7863  002DE4  6E8A               	movwf	3978,c	;volatile
  7864                           
  7865                           ;pin_manager.c: 61: LATC = 0x00;
  7866  002DE6  0E00               	movlw	0
  7867  002DE8  6E8B               	movwf	3979,c	;volatile
  7868                           
  7869                           ;pin_manager.c: 66: TRISE = 0x07;
  7870  002DEA  0E07               	movlw	7
  7871  002DEC  6E96               	movwf	3990,c	;volatile
  7872                           
  7873                           ;pin_manager.c: 67: TRISA = 0xE1;
  7874  002DEE  0EE1               	movlw	225
  7875  002DF0  6E92               	movwf	3986,c	;volatile
  7876                           
  7877                           ;pin_manager.c: 68: TRISB = 0xEF;
  7878  002DF2  0EEF               	movlw	239
  7879  002DF4  6E93               	movwf	3987,c	;volatile
  7880                           
  7881                           ;pin_manager.c: 69: TRISC = 0x80;
  7882  002DF6  0E80               	movlw	128
  7883  002DF8  6E94               	movwf	3988,c	;volatile
  7884                           
  7885                           ;pin_manager.c: 70: TRISD = 0xF2;
  7886  002DFA  0EF2               	movlw	242
  7887  002DFC  6E95               	movwf	3989,c	;volatile
  7888                           
  7889                           ;pin_manager.c: 75: ANSELC = 0x30;
  7890  002DFE  0E30               	movlw	48
  7891  002E00  010F               	movlb	15	; () banked
  7892  002E02  6F3A               	movwf	58,b	;volatile
  7893                           
  7894                           ;pin_manager.c: 76: ANSELB = 0x33;
  7895  002E04  0E33               	movlw	51
  7896  002E06  6F39               	movwf	57,b	;volatile
  7897                           
  7898                           ;pin_manager.c: 77: ANSELD = 0xE4;
  7899  002E08  0EE4               	movlw	228
  7900  002E0A  6F3B               	movwf	59,b	;volatile
  7901                           
  7902                           ;pin_manager.c: 78: ANSELE = 0x07;
  7903  002E0C  0E07               	movlw	7
  7904  002E0E  6F3C               	movwf	60,b	;volatile
  7905                           
  7906                           ;pin_manager.c: 79: ANSELA = 0x2F;
  7907  002E10  0E2F               	movlw	47
  7908  002E12  6F38               	movwf	56,b	;volatile
  7909                           
  7910                           ;pin_manager.c: 84: WPUB = 0xC2;
  7911  002E14  0EC2               	movlw	194
  7912  002E16  6E61               	movwf	3937,c	;volatile
  7913                           
  7914                           ; BSR set to: 15
  7915                           ;pin_manager.c: 85: INTCON2bits.nRBPU = 0;
  7916  002E18  9EF1               	bcf	intcon2,7,c	;volatile
  7917                           
  7918                           ; BSR set to: 15
  7919                           ;pin_manager.c: 92: INTCONbits.RBIE = 1;
  7920  002E1A  86F2               	bsf	intcon,3,c	;volatile
  7921                           
  7922                           ; BSR set to: 15
  7923  002E1C  0012               	return		;funcret
  7924  002E1E                     __end_of_PIN_MANAGER_Initialize:
  7925                           	opt stack 0
  7926                           tosu	equ	0xFFF
  7927                           tosh	equ	0xFFE
  7928                           tosl	equ	0xFFD
  7929                           pclath	equ	0xFFA
  7930                           tblptru	equ	0xFF8
  7931                           tblptrh	equ	0xFF7
  7932                           tblptrl	equ	0xFF6
  7933                           tablat	equ	0xFF5
  7934                           prodh	equ	0xFF4
  7935                           prodl	equ	0xFF3
  7936                           intcon	equ	0xFF2
  7937                           intcon2	equ	0xFF1
  7938                           postinc0	equ	0xFEE
  7939                           wreg	equ	0xFE8
  7940                           indf1	equ	0xFE7
  7941                           postdec1	equ	0xFE5
  7942                           fsr1h	equ	0xFE2
  7943                           fsr1l	equ	0xFE1
  7944                           indf2	equ	0xFDF
  7945                           postinc2	equ	0xFDE
  7946                           postdec2	equ	0xFDD
  7947                           fsr2h	equ	0xFDA
  7948                           fsr2l	equ	0xFD9
  7949                           status	equ	0xFD8
  7950                           
  7951 ;; *************** function _OSCILLATOR_Initialize *****************
  7952 ;; Defined at:
  7953 ;;		line 122 in file "mcc_generated_files/mcc.c"
  7954 ;; Parameters:    Size  Location     Type
  7955 ;;		None
  7956 ;; Auto vars:     Size  Location     Type
  7957 ;;		None
  7958 ;; Return value:  Size  Location     Type
  7959 ;;                  1    wreg      void 
  7960 ;; Registers used:
  7961 ;;		wreg, status,2
  7962 ;; Tracked objects:
  7963 ;;		On entry : 0/0
  7964 ;;		On exit  : 0/0
  7965 ;;		Unchanged: 0/0
  7966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7967 ;;      Params:         0       0       0       0       0       0       0
  7968 ;;      Locals:         0       0       0       0       0       0       0
  7969 ;;      Temps:          0       0       0       0       0       0       0
  7970 ;;      Totals:         0       0       0       0       0       0       0
  7971 ;;Total ram usage:        0 bytes
  7972 ;; Hardware stack levels used:    1
  7973 ;; Hardware stack levels required when called:    3
  7974 ;; This function calls:
  7975 ;;		Nothing
  7976 ;; This function is called by:
  7977 ;;		_SYSTEM_Initialize
  7978 ;; This function uses a non-reentrant model
  7979 ;;
  7980                           
  7981                           	psect	text50
  7982  0036A6                     __ptext50:
  7983                           	opt stack 0
  7984  0036A6                     _OSCILLATOR_Initialize:
  7985                           	opt stack 25
  7986                           
  7987                           ;mcc.c: 125: OSCCON = 0x60;
  7988                           
  7989                           ; BSR set to: 15
  7990                           ;incstack = 0
  7991  0036A6  0E60               	movlw	96
  7992  0036A8  6ED3               	movwf	4051,c	;volatile
  7993                           
  7994                           ;mcc.c: 127: OSCCON2 = 0x04;
  7995  0036AA  0E04               	movlw	4
  7996  0036AC  6ED2               	movwf	4050,c	;volatile
  7997                           
  7998                           ;mcc.c: 129: OSCTUNE = 0x00;
  7999  0036AE  0E00               	movlw	0
  8000  0036B0  6E9B               	movwf	3995,c	;volatile
  8001  0036B2  0012               	return		;funcret
  8002  0036B4                     __end_of_OSCILLATOR_Initialize:
  8003                           	opt stack 0
  8004                           tosu	equ	0xFFF
  8005                           tosh	equ	0xFFE
  8006                           tosl	equ	0xFFD
  8007                           pclath	equ	0xFFA
  8008                           tblptru	equ	0xFF8
  8009                           tblptrh	equ	0xFF7
  8010                           tblptrl	equ	0xFF6
  8011                           tablat	equ	0xFF5
  8012                           prodh	equ	0xFF4
  8013                           prodl	equ	0xFF3
  8014                           intcon	equ	0xFF2
  8015                           intcon2	equ	0xFF1
  8016                           postinc0	equ	0xFEE
  8017                           wreg	equ	0xFE8
  8018                           indf1	equ	0xFE7
  8019                           postdec1	equ	0xFE5
  8020                           fsr1h	equ	0xFE2
  8021                           fsr1l	equ	0xFE1
  8022                           indf2	equ	0xFDF
  8023                           postinc2	equ	0xFDE
  8024                           postdec2	equ	0xFDD
  8025                           fsr2h	equ	0xFDA
  8026                           fsr2l	equ	0xFD9
  8027                           status	equ	0xFD8
  8028                           
  8029 ;; *************** function _INTERRUPT_Initialize *****************
  8030 ;; Defined at:
  8031 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  8032 ;; Parameters:    Size  Location     Type
  8033 ;;		None
  8034 ;; Auto vars:     Size  Location     Type
  8035 ;;		None
  8036 ;; Return value:  Size  Location     Type
  8037 ;;                  1    wreg      void 
  8038 ;; Registers used:
  8039 ;;		None
  8040 ;; Tracked objects:
  8041 ;;		On entry : 0/0
  8042 ;;		On exit  : 0/0
  8043 ;;		Unchanged: 0/0
  8044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8045 ;;      Params:         0       0       0       0       0       0       0
  8046 ;;      Locals:         0       0       0       0       0       0       0
  8047 ;;      Temps:          0       0       0       0       0       0       0
  8048 ;;      Totals:         0       0       0       0       0       0       0
  8049 ;;Total ram usage:        0 bytes
  8050 ;; Hardware stack levels used:    1
  8051 ;; Hardware stack levels required when called:    3
  8052 ;; This function calls:
  8053 ;;		Nothing
  8054 ;; This function is called by:
  8055 ;;		_SYSTEM_Initialize
  8056 ;; This function uses a non-reentrant model
  8057 ;;
  8058                           
  8059                           	psect	text51
  8060  00372E                     __ptext51:
  8061                           	opt stack 0
  8062  00372E                     _INTERRUPT_Initialize:
  8063                           	opt stack 25
  8064                           
  8065                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  8066                           
  8067                           ;incstack = 0
  8068  00372E  9ED0               	bcf	4048,7,c	;volatile
  8069  003730  0012               	return		;funcret
  8070  003732                     __end_of_INTERRUPT_Initialize:
  8071                           	opt stack 0
  8072                           tosu	equ	0xFFF
  8073                           tosh	equ	0xFFE
  8074                           tosl	equ	0xFFD
  8075                           pclath	equ	0xFFA
  8076                           tblptru	equ	0xFF8
  8077                           tblptrh	equ	0xFF7
  8078                           tblptrl	equ	0xFF6
  8079                           tablat	equ	0xFF5
  8080                           prodh	equ	0xFF4
  8081                           prodl	equ	0xFF3
  8082                           intcon	equ	0xFF2
  8083                           intcon2	equ	0xFF1
  8084                           postinc0	equ	0xFEE
  8085                           wreg	equ	0xFE8
  8086                           indf1	equ	0xFE7
  8087                           postdec1	equ	0xFE5
  8088                           fsr1h	equ	0xFE2
  8089                           fsr1l	equ	0xFE1
  8090                           indf2	equ	0xFDF
  8091                           postinc2	equ	0xFDE
  8092                           postdec2	equ	0xFDD
  8093                           fsr2h	equ	0xFDA
  8094                           fsr2l	equ	0xFD9
  8095                           status	equ	0xFD8
  8096                           
  8097 ;; *************** function _EUSART1_Initialize *****************
  8098 ;; Defined at:
  8099 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  8100 ;; Parameters:    Size  Location     Type
  8101 ;;		None
  8102 ;; Auto vars:     Size  Location     Type
  8103 ;;		None
  8104 ;; Return value:  Size  Location     Type
  8105 ;;                  1    wreg      void 
  8106 ;; Registers used:
  8107 ;;		wreg, status,2
  8108 ;; Tracked objects:
  8109 ;;		On entry : 0/0
  8110 ;;		On exit  : 0/0
  8111 ;;		Unchanged: 0/0
  8112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8113 ;;      Params:         0       0       0       0       0       0       0
  8114 ;;      Locals:         0       0       0       0       0       0       0
  8115 ;;      Temps:          0       0       0       0       0       0       0
  8116 ;;      Totals:         0       0       0       0       0       0       0
  8117 ;;Total ram usage:        0 bytes
  8118 ;; Hardware stack levels used:    1
  8119 ;; Hardware stack levels required when called:    3
  8120 ;; This function calls:
  8121 ;;		Nothing
  8122 ;; This function is called by:
  8123 ;;		_SYSTEM_Initialize
  8124 ;; This function uses a non-reentrant model
  8125 ;;
  8126                           
  8127                           	psect	text52
  8128  00323E                     __ptext52:
  8129                           	opt stack 0
  8130  00323E                     _EUSART1_Initialize:
  8131                           	opt stack 25
  8132                           
  8133                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  8134                           
  8135                           ;incstack = 0
  8136  00323E  9A9D               	bcf	3997,5,c	;volatile
  8137                           
  8138                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  8139  003240  989D               	bcf	3997,4,c	;volatile
  8140                           
  8141                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  8142  003242  0E08               	movlw	8
  8143  003244  6EB8               	movwf	4024,c	;volatile
  8144                           
  8145                           ;eusart1.c: 85: RCSTA1 = 0x90;
  8146  003246  0E90               	movlw	144
  8147  003248  6EAB               	movwf	4011,c	;volatile
  8148                           
  8149                           ;eusart1.c: 88: TXSTA1 = 0x24;
  8150  00324A  0E24               	movlw	36
  8151  00324C  6EAC               	movwf	4012,c	;volatile
  8152                           
  8153                           ;eusart1.c: 91: SPBRG1 = 0x10;
  8154  00324E  0E10               	movlw	16
  8155  003250  6EAF               	movwf	4015,c	;volatile
  8156                           
  8157                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  8158  003252  0E00               	movlw	0
  8159  003254  6EB0               	movwf	4016,c	;volatile
  8160                           
  8161                           ;eusart1.c: 98: eusart1TxHead = 0;
  8162  003256  0E00               	movlw	0
  8163  003258  6E3A               	movwf	_eusart1TxHead,c	;volatile
  8164                           
  8165                           ;eusart1.c: 99: eusart1TxTail = 0;
  8166  00325A  0E00               	movlw	0
  8167  00325C  6E39               	movwf	_eusart1TxTail,c	;volatile
  8168                           
  8169                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  8170  00325E  0E46               	movlw	70
  8171  003260  0100               	movlb	0	; () banked
  8172  003262  6FFF               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  8173                           
  8174                           ;eusart1.c: 102: eusart1RxHead = 0;
  8175  003264  0E00               	movlw	0
  8176  003266  6E38               	movwf	_eusart1RxHead,c	;volatile
  8177                           
  8178                           ;eusart1.c: 103: eusart1RxTail = 0;
  8179  003268  0E00               	movlw	0
  8180  00326A  6E37               	movwf	_eusart1RxTail,c	;volatile
  8181                           
  8182                           ;eusart1.c: 104: eusart1RxCount = 0;
  8183  00326C  0E00               	movlw	0
  8184  00326E  6FD2               	movwf	_eusart1RxCount& (0+255),b	;volatile
  8185                           
  8186                           ; BSR set to: 0
  8187                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  8188  003270  8A9D               	bsf	3997,5,c	;volatile
  8189                           
  8190                           ; BSR set to: 0
  8191  003272  0012               	return		;funcret
  8192  003274                     __end_of_EUSART1_Initialize:
  8193                           	opt stack 0
  8194                           tosu	equ	0xFFF
  8195                           tosh	equ	0xFFE
  8196                           tosl	equ	0xFFD
  8197                           pclath	equ	0xFFA
  8198                           tblptru	equ	0xFF8
  8199                           tblptrh	equ	0xFF7
  8200                           tblptrl	equ	0xFF6
  8201                           tablat	equ	0xFF5
  8202                           prodh	equ	0xFF4
  8203                           prodl	equ	0xFF3
  8204                           intcon	equ	0xFF2
  8205                           intcon2	equ	0xFF1
  8206                           postinc0	equ	0xFEE
  8207                           wreg	equ	0xFE8
  8208                           indf1	equ	0xFE7
  8209                           postdec1	equ	0xFE5
  8210                           fsr1h	equ	0xFE2
  8211                           fsr1l	equ	0xFE1
  8212                           indf2	equ	0xFDF
  8213                           postinc2	equ	0xFDE
  8214                           postdec2	equ	0xFDD
  8215                           fsr2h	equ	0xFDA
  8216                           fsr2l	equ	0xFD9
  8217                           status	equ	0xFD8
  8218                           
  8219 ;; *************** function _ADC_Initialize *****************
  8220 ;; Defined at:
  8221 ;;		line 58 in file "mcc_generated_files/adc.c"
  8222 ;; Parameters:    Size  Location     Type
  8223 ;;		None
  8224 ;; Auto vars:     Size  Location     Type
  8225 ;;		None
  8226 ;; Return value:  Size  Location     Type
  8227 ;;                  1    wreg      void 
  8228 ;; Registers used:
  8229 ;;		wreg, status,2
  8230 ;; Tracked objects:
  8231 ;;		On entry : 0/0
  8232 ;;		On exit  : 0/0
  8233 ;;		Unchanged: 0/0
  8234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8235 ;;      Params:         0       0       0       0       0       0       0
  8236 ;;      Locals:         0       0       0       0       0       0       0
  8237 ;;      Temps:          0       0       0       0       0       0       0
  8238 ;;      Totals:         0       0       0       0       0       0       0
  8239 ;;Total ram usage:        0 bytes
  8240 ;; Hardware stack levels used:    1
  8241 ;; Hardware stack levels required when called:    3
  8242 ;; This function calls:
  8243 ;;		Nothing
  8244 ;; This function is called by:
  8245 ;;		_SYSTEM_Initialize
  8246 ;; This function uses a non-reentrant model
  8247 ;;
  8248                           
  8249                           	psect	text53
  8250  003600                     __ptext53:
  8251                           	opt stack 0
  8252  003600                     _ADC_Initialize:
  8253                           	opt stack 25
  8254                           
  8255                           ;adc.c: 63: ADCON0 = 0x05;
  8256                           
  8257                           ; BSR set to: 0
  8258                           ;incstack = 0
  8259  003600  0E05               	movlw	5
  8260  003602  6EC2               	movwf	4034,c	;volatile
  8261                           
  8262                           ;adc.c: 66: ADCON1 = 0x00;
  8263  003604  0E00               	movlw	0
  8264  003606  6EC1               	movwf	4033,c	;volatile
  8265                           
  8266                           ;adc.c: 69: ADCON2 = 0x87;
  8267  003608  0E87               	movlw	135
  8268  00360A  6EC0               	movwf	4032,c	;volatile
  8269                           
  8270                           ;adc.c: 72: ADRESL = 0x00;
  8271  00360C  0E00               	movlw	0
  8272  00360E  6EC3               	movwf	4035,c	;volatile
  8273                           
  8274                           ;adc.c: 75: ADRESH = 0x00;
  8275  003610  0E00               	movlw	0
  8276  003612  6EC4               	movwf	4036,c	;volatile
  8277  003614  0012               	return		;funcret
  8278  003616                     __end_of_ADC_Initialize:
  8279                           	opt stack 0
  8280                           tosu	equ	0xFFF
  8281                           tosh	equ	0xFFE
  8282                           tosl	equ	0xFFD
  8283                           pclath	equ	0xFFA
  8284                           tblptru	equ	0xFF8
  8285                           tblptrh	equ	0xFF7
  8286                           tblptrl	equ	0xFF6
  8287                           tablat	equ	0xFF5
  8288                           prodh	equ	0xFF4
  8289                           prodl	equ	0xFF3
  8290                           intcon	equ	0xFF2
  8291                           intcon2	equ	0xFF1
  8292                           postinc0	equ	0xFEE
  8293                           wreg	equ	0xFE8
  8294                           indf1	equ	0xFE7
  8295                           postdec1	equ	0xFE5
  8296                           fsr1h	equ	0xFE2
  8297                           fsr1l	equ	0xFE1
  8298                           indf2	equ	0xFDF
  8299                           postinc2	equ	0xFDE
  8300                           postdec2	equ	0xFDD
  8301                           fsr2h	equ	0xFDA
  8302                           fsr2l	equ	0xFD9
  8303                           status	equ	0xFD8
  8304                           
  8305 ;; *************** function _SetMcuRunTime *****************
  8306 ;; Defined at:
  8307 ;;		line 81 in file "SystemStatus.c"
  8308 ;; Parameters:    Size  Location     Type
  8309 ;;		None
  8310 ;; Auto vars:     Size  Location     Type
  8311 ;;		None
  8312 ;; Return value:  Size  Location     Type
  8313 ;;                  1    wreg      void 
  8314 ;; Registers used:
  8315 ;;		wreg, status,2, status,0, cstack
  8316 ;; Tracked objects:
  8317 ;;		On entry : 0/0
  8318 ;;		On exit  : 0/0
  8319 ;;		Unchanged: 0/0
  8320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8321 ;;      Params:         0       0       0       0       0       0       0
  8322 ;;      Locals:         0       0       0       0       0       0       0
  8323 ;;      Temps:          0       0       0       0       0       0       0
  8324 ;;      Totals:         0       0       0       0       0       0       0
  8325 ;;Total ram usage:        0 bytes
  8326 ;; Hardware stack levels used:    1
  8327 ;; Hardware stack levels required when called:    4
  8328 ;; This function calls:
  8329 ;;		___llmod
  8330 ;; This function is called by:
  8331 ;;		_main
  8332 ;; This function uses a non-reentrant model
  8333 ;;
  8334                           
  8335                           	psect	text54
  8336  002EA6                     __ptext54:
  8337                           	opt stack 0
  8338  002EA6                     _SetMcuRunTime:
  8339                           	opt stack 26
  8340                           
  8341                           ;SystemStatus.c: 83: mcuRunTimeIn5SecTicks++;
  8342                           
  8343                           ;incstack = 0
  8344  002EA6  0E01               	movlw	1
  8345  002EA8  0100               	movlb	0	; () banked
  8346  002EAA  27C0               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  8347  002EAC  0E00               	movlw	0
  8348  002EAE  23C1               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  8349  002EB0  23C2               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  8350  002EB2  23C3               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  8351                           
  8352                           ; BSR set to: 0
  8353                           ;SystemStatus.c: 84: mcuRunTimeIn5SecTicks %= (17280);
  8354  002EB4  C0C0  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  8355  002EB8  C0C1  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  8356  002EBC  C0C2  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  8357  002EC0  C0C3  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  8358  002EC4  0E80               	movlw	128
  8359  002EC6  6E1C               	movwf	___llmod@divisor,c
  8360  002EC8  0E43               	movlw	67
  8361  002ECA  6E1D               	movwf	___llmod@divisor+1,c
  8362  002ECC  0E00               	movlw	0
  8363  002ECE  6E1E               	movwf	___llmod@divisor+2,c
  8364  002ED0  0E00               	movlw	0
  8365  002ED2  6E1F               	movwf	___llmod@divisor+3,c
  8366  002ED4  EC27  F014         	call	___llmod	;wreg free
  8367  002ED8  C018  F0C0         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  8368  002EDC  C019  F0C1         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  8369  002EE0  C01A  F0C2         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  8370  002EE4  C01B  F0C3         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  8371  002EE8  0012               	return		;funcret
  8372  002EEA                     __end_of_SetMcuRunTime:
  8373                           	opt stack 0
  8374                           tosu	equ	0xFFF
  8375                           tosh	equ	0xFFE
  8376                           tosl	equ	0xFFD
  8377                           pclath	equ	0xFFA
  8378                           tblptru	equ	0xFF8
  8379                           tblptrh	equ	0xFF7
  8380                           tblptrl	equ	0xFF6
  8381                           tablat	equ	0xFF5
  8382                           prodh	equ	0xFF4
  8383                           prodl	equ	0xFF3
  8384                           intcon	equ	0xFF2
  8385                           intcon2	equ	0xFF1
  8386                           postinc0	equ	0xFEE
  8387                           wreg	equ	0xFE8
  8388                           indf1	equ	0xFE7
  8389                           postdec1	equ	0xFE5
  8390                           fsr1h	equ	0xFE2
  8391                           fsr1l	equ	0xFE1
  8392                           indf2	equ	0xFDF
  8393                           postinc2	equ	0xFDE
  8394                           postdec2	equ	0xFDD
  8395                           fsr2h	equ	0xFDA
  8396                           fsr2l	equ	0xFD9
  8397                           status	equ	0xFD8
  8398                           
  8399 ;; *************** function ___llmod *****************
  8400 ;; Defined at:
  8401 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  8402 ;; Parameters:    Size  Location     Type
  8403 ;;  dividend        4   23[COMRAM] unsigned long 
  8404 ;;  divisor         4   27[COMRAM] unsigned long 
  8405 ;; Auto vars:     Size  Location     Type
  8406 ;;  counter         1   31[COMRAM] unsigned char 
  8407 ;; Return value:  Size  Location     Type
  8408 ;;                  4   23[COMRAM] unsigned long 
  8409 ;; Registers used:
  8410 ;;		wreg, status,2, status,0
  8411 ;; Tracked objects:
  8412 ;;		On entry : 0/0
  8413 ;;		On exit  : 0/0
  8414 ;;		Unchanged: 0/0
  8415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8416 ;;      Params:         8       0       0       0       0       0       0
  8417 ;;      Locals:         1       0       0       0       0       0       0
  8418 ;;      Temps:          0       0       0       0       0       0       0
  8419 ;;      Totals:         9       0       0       0       0       0       0
  8420 ;;Total ram usage:        9 bytes
  8421 ;; Hardware stack levels used:    1
  8422 ;; Hardware stack levels required when called:    3
  8423 ;; This function calls:
  8424 ;;		Nothing
  8425 ;; This function is called by:
  8426 ;;		_SetMcuRunTime
  8427 ;;		_GetMcuRunTime
  8428 ;; This function uses a non-reentrant model
  8429 ;;
  8430                           
  8431                           	psect	text55
  8432  00284E                     __ptext55:
  8433                           	opt stack 0
  8434  00284E                     ___llmod:
  8435                           	opt stack 24
  8436                           
  8437                           ;incstack = 0
  8438  00284E  501C               	movf	___llmod@divisor,w,c
  8439  002850  101D               	iorwf	___llmod@divisor+1,w,c
  8440  002852  101E               	iorwf	___llmod@divisor+2,w,c
  8441  002854  101F               	iorwf	___llmod@divisor+3,w,c
  8442  002856  B4D8               	btfsc	status,2,c
  8443  002858  D024               	goto	l1773
  8444  00285A  0E01               	movlw	1
  8445  00285C  6E20               	movwf	___llmod@counter,c
  8446  00285E  D006               	goto	l1768
  8447  002860  90D8               	bcf	status,0,c
  8448  002862  361C               	rlcf	___llmod@divisor,f,c
  8449  002864  361D               	rlcf	___llmod@divisor+1,f,c
  8450  002866  361E               	rlcf	___llmod@divisor+2,f,c
  8451  002868  361F               	rlcf	___llmod@divisor+3,f,c
  8452  00286A  2A20               	incf	___llmod@counter,f,c
  8453  00286C                     l1768:
  8454  00286C  AE1F               	btfss	___llmod@divisor+3,7,c
  8455  00286E  D7F8               	goto	l1769
  8456  002870                     u6810:
  8457  002870  501C               	movf	___llmod@divisor,w,c
  8458  002872  5C18               	subwf	___llmod@dividend,w,c
  8459  002874  501D               	movf	___llmod@divisor+1,w,c
  8460  002876  5819               	subwfb	___llmod@dividend+1,w,c
  8461  002878  501E               	movf	___llmod@divisor+2,w,c
  8462  00287A  581A               	subwfb	___llmod@dividend+2,w,c
  8463  00287C  501F               	movf	___llmod@divisor+3,w,c
  8464  00287E  581B               	subwfb	___llmod@dividend+3,w,c
  8465  002880  A0D8               	btfss	status,0,c
  8466  002882  D008               	goto	l1772
  8467  002884  501C               	movf	___llmod@divisor,w,c
  8468  002886  5E18               	subwf	___llmod@dividend,f,c
  8469  002888  501D               	movf	___llmod@divisor+1,w,c
  8470  00288A  5A19               	subwfb	___llmod@dividend+1,f,c
  8471  00288C  501E               	movf	___llmod@divisor+2,w,c
  8472  00288E  5A1A               	subwfb	___llmod@dividend+2,f,c
  8473  002890  501F               	movf	___llmod@divisor+3,w,c
  8474  002892  5A1B               	subwfb	___llmod@dividend+3,f,c
  8475  002894                     l1772:
  8476  002894  90D8               	bcf	status,0,c
  8477  002896  321F               	rrcf	___llmod@divisor+3,f,c
  8478  002898  321E               	rrcf	___llmod@divisor+2,f,c
  8479  00289A  321D               	rrcf	___llmod@divisor+1,f,c
  8480  00289C  321C               	rrcf	___llmod@divisor,f,c
  8481  00289E  2E20               	decfsz	___llmod@counter,f,c
  8482  0028A0  D7E7               	goto	u6810
  8483  0028A2                     l1773:
  8484  0028A2  C018  F018         	movff	___llmod@dividend,?___llmod
  8485  0028A6  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
  8486  0028AA  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
  8487  0028AE  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
  8488  0028B2  0012               	return		;funcret
  8489  0028B4                     __end_of___llmod:
  8490                           	opt stack 0
  8491                           tosu	equ	0xFFF
  8492                           tosh	equ	0xFFE
  8493                           tosl	equ	0xFFD
  8494                           pclath	equ	0xFFA
  8495                           tblptru	equ	0xFF8
  8496                           tblptrh	equ	0xFF7
  8497                           tblptrl	equ	0xFF6
  8498                           tablat	equ	0xFF5
  8499                           prodh	equ	0xFF4
  8500                           prodl	equ	0xFF3
  8501                           intcon	equ	0xFF2
  8502                           intcon2	equ	0xFF1
  8503                           postinc0	equ	0xFEE
  8504                           wreg	equ	0xFE8
  8505                           indf1	equ	0xFE7
  8506                           postdec1	equ	0xFE5
  8507                           fsr1h	equ	0xFE2
  8508                           fsr1l	equ	0xFE1
  8509                           indf2	equ	0xFDF
  8510                           postinc2	equ	0xFDE
  8511                           postdec2	equ	0xFDD
  8512                           fsr2h	equ	0xFDA
  8513                           fsr2l	equ	0xFD9
  8514                           status	equ	0xFD8
  8515                           
  8516 ;; *************** function _SendSystemStartAck *****************
  8517 ;; Defined at:
  8518 ;;		line 103 in file "SystemCommon.c"
  8519 ;; Parameters:    Size  Location     Type
  8520 ;;		None
  8521 ;; Auto vars:     Size  Location     Type
  8522 ;;		None
  8523 ;; Return value:  Size  Location     Type
  8524 ;;                  1    wreg      void 
  8525 ;; Registers used:
  8526 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8527 ;; Tracked objects:
  8528 ;;		On entry : 0/0
  8529 ;;		On exit  : 0/0
  8530 ;;		Unchanged: 0/0
  8531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8532 ;;      Params:         0       0       0       0       0       0       0
  8533 ;;      Locals:         0       0       0       0       0       0       0
  8534 ;;      Temps:          0       0       0       0       0       0       0
  8535 ;;      Totals:         0       0       0       0       0       0       0
  8536 ;;Total ram usage:        0 bytes
  8537 ;; Hardware stack levels used:    1
  8538 ;; Hardware stack levels required when called:    6
  8539 ;; This function calls:
  8540 ;;		_SendAckMessage
  8541 ;; This function is called by:
  8542 ;;		_main
  8543 ;; This function uses a non-reentrant model
  8544 ;;
  8545                           
  8546                           	psect	text56
  8547  003700                     __ptext56:
  8548                           	opt stack 0
  8549  003700                     _SendSystemStartAck:
  8550                           	opt stack 24
  8551                           
  8552                           ;SystemCommon.c: 105: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_SYSTE
      +                          M_START);
  8553                           
  8554                           ;incstack = 0
  8555  003700  0E10               	movlw	16
  8556  003702  6E24               	movwf	SendAckMessage@inRequest,c
  8557  003704  0E01               	movlw	1
  8558  003706  EC77  F016         	call	_SendAckMessage
  8559  00370A  0012               	return		;funcret
  8560  00370C                     __end_of_SendSystemStartAck:
  8561                           	opt stack 0
  8562                           tosu	equ	0xFFF
  8563                           tosh	equ	0xFFE
  8564                           tosl	equ	0xFFD
  8565                           pclath	equ	0xFFA
  8566                           tblptru	equ	0xFF8
  8567                           tblptrh	equ	0xFF7
  8568                           tblptrl	equ	0xFF6
  8569                           tablat	equ	0xFF5
  8570                           prodh	equ	0xFF4
  8571                           prodl	equ	0xFF3
  8572                           intcon	equ	0xFF2
  8573                           intcon2	equ	0xFF1
  8574                           postinc0	equ	0xFEE
  8575                           wreg	equ	0xFE8
  8576                           indf1	equ	0xFE7
  8577                           postdec1	equ	0xFE5
  8578                           fsr1h	equ	0xFE2
  8579                           fsr1l	equ	0xFE1
  8580                           indf2	equ	0xFDF
  8581                           postinc2	equ	0xFDE
  8582                           postdec2	equ	0xFDD
  8583                           fsr2h	equ	0xFDA
  8584                           fsr2l	equ	0xFD9
  8585                           status	equ	0xFD8
  8586                           
  8587 ;; *************** function _SendAckMessage *****************
  8588 ;; Defined at:
  8589 ;;		line 171 in file "EusartApp.c"
  8590 ;; Parameters:    Size  Location     Type
  8591 ;;  inGroup         1    wreg     enum E7163
  8592 ;;  inRequest       1   35[COMRAM] enum E7171
  8593 ;; Auto vars:     Size  Location     Type
  8594 ;;  inGroup         1   36[COMRAM] enum E7163
  8595 ;;  TxMsg           6   37[COMRAM] unsigned char [6]
  8596 ;; Return value:  Size  Location     Type
  8597 ;;                  1    wreg      void 
  8598 ;; Registers used:
  8599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8600 ;; Tracked objects:
  8601 ;;		On entry : 0/0
  8602 ;;		On exit  : 0/0
  8603 ;;		Unchanged: 0/0
  8604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8605 ;;      Params:         1       0       0       0       0       0       0
  8606 ;;      Locals:         7       0       0       0       0       0       0
  8607 ;;      Temps:          0       0       0       0       0       0       0
  8608 ;;      Totals:         8       0       0       0       0       0       0
  8609 ;;Total ram usage:        8 bytes
  8610 ;; Hardware stack levels used:    1
  8611 ;; Hardware stack levels required when called:    5
  8612 ;; This function calls:
  8613 ;;		_WriteUartMessage
  8614 ;;		_ZeroArray
  8615 ;;		_crc8
  8616 ;; This function is called by:
  8617 ;;		_testLeds
  8618 ;;		_SetAdcOperationMode
  8619 ;;		_SetConversionResultFormat
  8620 ;;		_SetChannelMode
  8621 ;;		_FlashEreaseMem
  8622 ;;		_DacSetValue
  8623 ;;		_UpdateTxFreq
  8624 ;;		_UpdateRxFreq
  8625 ;;		_ResetMcu
  8626 ;;		_ResetCpld
  8627 ;;		_SendSystemStartAck
  8628 ;;		_SetMcuFwVersion
  8629 ;;		_SetCpldFwVersion
  8630 ;;		_keepAliveSignalUart
  8631 ;; This function uses a non-reentrant model
  8632 ;;
  8633                           
  8634                           	psect	text57
  8635  002CEE                     __ptext57:
  8636                           	opt stack 0
  8637  002CEE                     _SendAckMessage:
  8638                           	opt stack 22
  8639                           
  8640                           ;incstack = 0
  8641                           ;SendAckMessage@inGroup stored from wreg
  8642  002CEE  6E25               	movwf	SendAckMessage@inGroup,c
  8643                           
  8644                           ;EusartApp.c: 174: char TxMsg[(0x5) + 1];
  8645                           ;EusartApp.c: 175: ZeroArray(TxMsg, (0x5) + 1);
  8646  002CF0  0E26               	movlw	low SendAckMessage@TxMsg
  8647  002CF2  6E20               	movwf	ZeroArray@array,c
  8648  002CF4  0E00               	movlw	high SendAckMessage@TxMsg
  8649  002CF6  6E21               	movwf	ZeroArray@array+1,c
  8650  002CF8  0E00               	movlw	0
  8651  002CFA  6E23               	movwf	ZeroArray@size+1,c
  8652  002CFC  0E06               	movlw	6
  8653  002CFE  6E22               	movwf	ZeroArray@size,c
  8654  002D00  ECBC  F01A         	call	_ZeroArray	;wreg free
  8655                           
  8656                           ;EusartApp.c: 178: TxMsg[(0)] = (0x24);
  8657  002D04  0E24               	movlw	36
  8658  002D06  6E26               	movwf	SendAckMessage@TxMsg,c
  8659                           
  8660                           ;EusartApp.c: 179: TxMsg[(1)] = inGroup;
  8661  002D08  C025  F027         	movff	SendAckMessage@inGroup,SendAckMessage@TxMsg+1
  8662                           
  8663                           ;EusartApp.c: 180: TxMsg[(2)] = inRequest;
  8664  002D0C  C024  F028         	movff	SendAckMessage@inRequest,SendAckMessage@TxMsg+2
  8665                           
  8666                           ;EusartApp.c: 181: TxMsg[(3)] = 0;
  8667  002D10  0E00               	movlw	0
  8668  002D12  6E29               	movwf	SendAckMessage@TxMsg+3,c
  8669                           
  8670                           ;EusartApp.c: 183: TxMsg[(0x5)] = crc8(TxMsg, (0x5));
  8671  002D14  0E26               	movlw	low SendAckMessage@TxMsg
  8672  002D16  6E18               	movwf	crc8@dataArray,c
  8673  002D18  0E00               	movlw	high SendAckMessage@TxMsg
  8674  002D1A  6E19               	movwf	crc8@dataArray+1,c
  8675  002D1C  0E00               	movlw	0
  8676  002D1E  6E1B               	movwf	crc8@dataSize+1,c
  8677  002D20  0E05               	movlw	5
  8678  002D22  6E1A               	movwf	crc8@dataSize,c
  8679  002D24  ECA0  F016         	call	_crc8	;wreg free
  8680  002D28  6E2B               	movwf	SendAckMessage@TxMsg+5,c
  8681                           
  8682                           ;EusartApp.c: 185: WriteUartMessage(TxMsg, (0x5) + 1);
  8683  002D2A  0E26               	movlw	low SendAckMessage@TxMsg
  8684  002D2C  6E19               	movwf	WriteUartMessage@dataBuf,c
  8685  002D2E  0E00               	movlw	high SendAckMessage@TxMsg
  8686  002D30  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  8687  002D32  0E00               	movlw	0
  8688  002D34  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  8689  002D36  0E06               	movlw	6
  8690  002D38  6E1B               	movwf	WriteUartMessage@dataSize,c
  8691  002D3A  EC3A  F019         	call	_WriteUartMessage	;wreg free
  8692  002D3E  0012               	return		;funcret
  8693  002D40                     __end_of_SendAckMessage:
  8694                           	opt stack 0
  8695                           tosu	equ	0xFFF
  8696                           tosh	equ	0xFFE
  8697                           tosl	equ	0xFFD
  8698                           pclath	equ	0xFFA
  8699                           tblptru	equ	0xFF8
  8700                           tblptrh	equ	0xFF7
  8701                           tblptrl	equ	0xFF6
  8702                           tablat	equ	0xFF5
  8703                           prodh	equ	0xFF4
  8704                           prodl	equ	0xFF3
  8705                           intcon	equ	0xFF2
  8706                           intcon2	equ	0xFF1
  8707                           postinc0	equ	0xFEE
  8708                           wreg	equ	0xFE8
  8709                           indf1	equ	0xFE7
  8710                           postdec1	equ	0xFE5
  8711                           fsr1h	equ	0xFE2
  8712                           fsr1l	equ	0xFE1
  8713                           indf2	equ	0xFDF
  8714                           postinc2	equ	0xFDE
  8715                           postdec2	equ	0xFDD
  8716                           fsr2h	equ	0xFDA
  8717                           fsr2l	equ	0xFD9
  8718                           status	equ	0xFD8
  8719                           
  8720 ;; *************** function _crc8 *****************
  8721 ;; Defined at:
  8722 ;;		line 13 in file "SystemCommon.c"
  8723 ;; Parameters:    Size  Location     Type
  8724 ;;  dataArray       2   23[COMRAM] PTR unsigned char 
  8725 ;;		 -> GetMcuRunTime@TxMsg(9), GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), FlashReadCondition@TxMsg(9), 
  8726 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
  8727 ;;  dataSize        2   25[COMRAM] int 
  8728 ;; Auto vars:     Size  Location     Type
  8729 ;;  i               2   30[COMRAM] int 
  8730 ;;  crc             2   28[COMRAM] int 
  8731 ;; Return value:  Size  Location     Type
  8732 ;;                  1    wreg      unsigned char 
  8733 ;; Registers used:
  8734 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8735 ;; Tracked objects:
  8736 ;;		On entry : 0/0
  8737 ;;		On exit  : 0/0
  8738 ;;		Unchanged: 0/0
  8739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8740 ;;      Params:         4       0       0       0       0       0       0
  8741 ;;      Locals:         4       0       0       0       0       0       0
  8742 ;;      Temps:          1       0       0       0       0       0       0
  8743 ;;      Totals:         9       0       0       0       0       0       0
  8744 ;;Total ram usage:        9 bytes
  8745 ;; Hardware stack levels used:    1
  8746 ;; Hardware stack levels required when called:    3
  8747 ;; This function calls:
  8748 ;;		Nothing
  8749 ;; This function is called by:
  8750 ;;		_readUartMessage
  8751 ;;		_SendAckMessage
  8752 ;;		_FlashReadUart
  8753 ;;		_FlashReadCondition
  8754 ;;		_GetMcuFwVersion
  8755 ;;		_GetCpldFwVersion
  8756 ;;		_GetMcuRunTime
  8757 ;; This function uses a non-reentrant model
  8758 ;;
  8759                           
  8760                           	psect	text58
  8761  002D40                     __ptext58:
  8762                           	opt stack 0
  8763  002D40                     _crc8:
  8764                           	opt stack 26
  8765                           
  8766                           ;SystemCommon.c: 15: int crc = 0;
  8767                           
  8768                           ;incstack = 0
  8769  002D40  0E00               	movlw	0
  8770  002D42  6E1E               	movwf	crc8@crc+1,c
  8771  002D44  0E00               	movlw	0
  8772  002D46  6E1D               	movwf	crc8@crc,c
  8773                           
  8774                           ;SystemCommon.c: 16: for (int i = 0; i < dataSize; i++)
  8775  002D48  0E00               	movlw	0
  8776  002D4A  6E20               	movwf	crc8@i+1,c
  8777  002D4C  0E00               	movlw	0
  8778  002D4E  6E1F               	movwf	crc8@i,c
  8779  002D50  D00E               	goto	l1233
  8780  002D52                     
  8781                           ;SystemCommon.c: 17: {
  8782                           ;SystemCommon.c: 18: crc += dataArray[i];
  8783  002D52  501F               	movf	crc8@i,w,c
  8784  002D54  2418               	addwf	crc8@dataArray,w,c
  8785  002D56  6ED9               	movwf	fsr2l,c
  8786  002D58  5020               	movf	crc8@i+1,w,c
  8787  002D5A  2019               	addwfc	crc8@dataArray+1,w,c
  8788  002D5C  6EDA               	movwf	fsr2h,c
  8789  002D5E  50DF               	movf	indf2,w,c
  8790  002D60  6E1C               	movwf	??_crc8& (0+255),c
  8791  002D62  501C               	movf	??_crc8,w,c
  8792  002D64  261D               	addwf	crc8@crc,f,c
  8793  002D66  0E00               	movlw	0
  8794  002D68  221E               	addwfc	crc8@crc+1,f,c
  8795  002D6A  4A1F               	infsnz	crc8@i,f,c
  8796  002D6C  2A20               	incf	crc8@i+1,f,c
  8797  002D6E                     l1233:
  8798  002D6E  501A               	movf	crc8@dataSize,w,c
  8799  002D70  5C1F               	subwf	crc8@i,w,c
  8800  002D72  5020               	movf	crc8@i+1,w,c
  8801  002D74  0A80               	xorlw	128
  8802  002D76  6E1C               	movwf	??_crc8& (0+255),c
  8803  002D78  501B               	movf	crc8@dataSize+1,w,c
  8804  002D7A  0A80               	xorlw	128
  8805  002D7C  581C               	subwfb	??_crc8& (0+255),w,c
  8806  002D7E  A0D8               	btfss	status,0,c
  8807  002D80  D7E8               	goto	l1234
  8808                           
  8809                           ;SystemCommon.c: 19: }
  8810                           ;SystemCommon.c: 20: crc &= 0xff;
  8811  002D82  0EFF               	movlw	255
  8812  002D84  161D               	andwf	crc8@crc,f,c
  8813  002D86  0E00               	movlw	0
  8814  002D88  161E               	andwf	crc8@crc+1,f,c
  8815                           
  8816                           ;SystemCommon.c: 21: return crc;
  8817  002D8A  501D               	movf	crc8@crc,w,c
  8818  002D8C  0012               	return	
  8819  002D8E                     __end_of_crc8:
  8820                           	opt stack 0
  8821                           tosu	equ	0xFFF
  8822                           tosh	equ	0xFFE
  8823                           tosl	equ	0xFFD
  8824                           pclath	equ	0xFFA
  8825                           tblptru	equ	0xFF8
  8826                           tblptrh	equ	0xFF7
  8827                           tblptrl	equ	0xFF6
  8828                           tablat	equ	0xFF5
  8829                           prodh	equ	0xFF4
  8830                           prodl	equ	0xFF3
  8831                           intcon	equ	0xFF2
  8832                           intcon2	equ	0xFF1
  8833                           postinc0	equ	0xFEE
  8834                           wreg	equ	0xFE8
  8835                           indf1	equ	0xFE7
  8836                           postdec1	equ	0xFE5
  8837                           fsr1h	equ	0xFE2
  8838                           fsr1l	equ	0xFE1
  8839                           indf2	equ	0xFDF
  8840                           postinc2	equ	0xFDE
  8841                           postdec2	equ	0xFDD
  8842                           fsr2h	equ	0xFDA
  8843                           fsr2l	equ	0xFD9
  8844                           status	equ	0xFD8
  8845                           
  8846 ;; *************** function _ZeroArray *****************
  8847 ;; Defined at:
  8848 ;;		line 24 in file "SystemCommon.c"
  8849 ;; Parameters:    Size  Location     Type
  8850 ;;  array           2   31[COMRAM] PTR unsigned char 
  8851 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(8), FlashReadCondition@TxMsg(
      +9), 
  8852 ;;		 -> FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), 
  8853 ;;		 -> rxMsgQueue(20), 
  8854 ;;  size            2   33[COMRAM] int 
  8855 ;; Auto vars:     Size  Location     Type
  8856 ;;		None
  8857 ;; Return value:  Size  Location     Type
  8858 ;;                  1    wreg      void 
  8859 ;; Registers used:
  8860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8861 ;; Tracked objects:
  8862 ;;		On entry : 0/0
  8863 ;;		On exit  : 0/0
  8864 ;;		Unchanged: 0/0
  8865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8866 ;;      Params:         4       0       0       0       0       0       0
  8867 ;;      Locals:         0       0       0       0       0       0       0
  8868 ;;      Temps:          0       0       0       0       0       0       0
  8869 ;;      Totals:         4       0       0       0       0       0       0
  8870 ;;Total ram usage:        4 bytes
  8871 ;; Hardware stack levels used:    1
  8872 ;; Hardware stack levels required when called:    4
  8873 ;; This function calls:
  8874 ;;		_memset
  8875 ;; This function is called by:
  8876 ;;		_readUartMessage
  8877 ;;		_InitRxMessageParams
  8878 ;;		_SendAckMessage
  8879 ;;		_FlashReadUart
  8880 ;;		_FlashEreaseMem
  8881 ;;		_FlashReadCondition
  8882 ;;		_GetIntFromUartData
  8883 ;;		_GetMcuFwVersion
  8884 ;;		_GetCpldFwVersion
  8885 ;; This function uses a non-reentrant model
  8886 ;;
  8887                           
  8888                           	psect	text59
  8889  003578                     __ptext59:
  8890                           	opt stack 0
  8891  003578                     _ZeroArray:
  8892                           	opt stack 25
  8893                           
  8894                           ;SystemCommon.c: 26: memset(array, 0x0, size);
  8895                           
  8896                           ;incstack = 0
  8897  003578  C020  F018         	movff	ZeroArray@array,memset@p1
  8898  00357C  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
  8899  003580  0E00               	movlw	0
  8900  003582  6E1B               	movwf	memset@c+1,c
  8901  003584  0E00               	movlw	0
  8902  003586  6E1A               	movwf	memset@c,c
  8903  003588  C022  F01C         	movff	ZeroArray@size,memset@n
  8904  00358C  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
  8905  003590  ECD0  F019         	call	_memset	;wreg free
  8906  003594  0012               	return		;funcret
  8907  003596                     __end_of_ZeroArray:
  8908                           	opt stack 0
  8909                           tosu	equ	0xFFF
  8910                           tosh	equ	0xFFE
  8911                           tosl	equ	0xFFD
  8912                           pclath	equ	0xFFA
  8913                           tblptru	equ	0xFF8
  8914                           tblptrh	equ	0xFF7
  8915                           tblptrl	equ	0xFF6
  8916                           tablat	equ	0xFF5
  8917                           prodh	equ	0xFF4
  8918                           prodl	equ	0xFF3
  8919                           intcon	equ	0xFF2
  8920                           intcon2	equ	0xFF1
  8921                           postinc0	equ	0xFEE
  8922                           wreg	equ	0xFE8
  8923                           indf1	equ	0xFE7
  8924                           postdec1	equ	0xFE5
  8925                           fsr1h	equ	0xFE2
  8926                           fsr1l	equ	0xFE1
  8927                           indf2	equ	0xFDF
  8928                           postinc2	equ	0xFDE
  8929                           postdec2	equ	0xFDD
  8930                           fsr2h	equ	0xFDA
  8931                           fsr2l	equ	0xFD9
  8932                           status	equ	0xFD8
  8933                           
  8934 ;; *************** function _memset *****************
  8935 ;; Defined at:
  8936 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  8937 ;; Parameters:    Size  Location     Type
  8938 ;;  p1              2   23[COMRAM] PTR void 
  8939 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(8), FlashReadCondition@TxMsg(
      +9), 
  8940 ;;		 -> FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), 
  8941 ;;		 -> rxMsgQueue(20), 
  8942 ;;  c               2   25[COMRAM] int 
  8943 ;;  n               2   27[COMRAM] unsigned int 
  8944 ;; Auto vars:     Size  Location     Type
  8945 ;;  p               2   29[COMRAM] PTR unsigned char 
  8946 ;;		 -> GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), GetIntFromUartData@dataRegArr(8), FlashReadCondition@TxMsg(
      +9), 
  8947 ;;		 -> FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), 
  8948 ;;		 -> rxMsgQueue(20), 
  8949 ;; Return value:  Size  Location     Type
  8950 ;;                  2   23[COMRAM] PTR void 
  8951 ;; Registers used:
  8952 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8953 ;; Tracked objects:
  8954 ;;		On entry : 0/0
  8955 ;;		On exit  : 0/0
  8956 ;;		Unchanged: 0/0
  8957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8958 ;;      Params:         6       0       0       0       0       0       0
  8959 ;;      Locals:         2       0       0       0       0       0       0
  8960 ;;      Temps:          0       0       0       0       0       0       0
  8961 ;;      Totals:         8       0       0       0       0       0       0
  8962 ;;Total ram usage:        8 bytes
  8963 ;; Hardware stack levels used:    1
  8964 ;; Hardware stack levels required when called:    3
  8965 ;; This function calls:
  8966 ;;		Nothing
  8967 ;; This function is called by:
  8968 ;;		_ZeroArray
  8969 ;; This function uses a non-reentrant model
  8970 ;;
  8971                           
  8972                           	psect	text60
  8973  0033A0                     __ptext60:
  8974                           	opt stack 0
  8975  0033A0                     _memset:
  8976                           	opt stack 25
  8977                           
  8978                           ;incstack = 0
  8979  0033A0  C018  F01E         	movff	memset@p1,memset@p
  8980  0033A4  C019  F01F         	movff	memset@p1+1,memset@p+1
  8981  0033A8  D008               	goto	l1835
  8982  0033AA                     l6432:
  8983  0033AA  C01E  FFD9         	movff	memset@p,fsr2l
  8984  0033AE  C01F  FFDA         	movff	memset@p+1,fsr2h
  8985  0033B2  C01A  FFDF         	movff	memset@c,indf2
  8986  0033B6  4A1E               	infsnz	memset@p,f,c
  8987  0033B8  2A1F               	incf	memset@p+1,f,c
  8988  0033BA                     l1835:
  8989  0033BA  061C               	decf	memset@n,f,c
  8990  0033BC  A0D8               	btfss	status,0,c
  8991  0033BE  061D               	decf	memset@n+1,f,c
  8992  0033C0  281C               	incf	memset@n,w,c
  8993  0033C2  E1F3               	bnz	l6432
  8994  0033C4  281D               	incf	memset@n+1,w,c
  8995  0033C6  B4D8               	btfsc	status,2,c
  8996  0033C8  0012               	return	
  8997  0033CA  D7EF               	goto	l1836
  8998  0033CC                     __end_of_memset:
  8999                           	opt stack 0
  9000                           tosu	equ	0xFFF
  9001                           tosh	equ	0xFFE
  9002                           tosl	equ	0xFFD
  9003                           pclath	equ	0xFFA
  9004                           tblptru	equ	0xFF8
  9005                           tblptrh	equ	0xFF7
  9006                           tblptrl	equ	0xFF6
  9007                           tablat	equ	0xFF5
  9008                           prodh	equ	0xFF4
  9009                           prodl	equ	0xFF3
  9010                           intcon	equ	0xFF2
  9011                           intcon2	equ	0xFF1
  9012                           postinc0	equ	0xFEE
  9013                           wreg	equ	0xFE8
  9014                           indf1	equ	0xFE7
  9015                           postdec1	equ	0xFE5
  9016                           fsr1h	equ	0xFE2
  9017                           fsr1l	equ	0xFE1
  9018                           indf2	equ	0xFDF
  9019                           postinc2	equ	0xFDE
  9020                           postdec2	equ	0xFDD
  9021                           fsr2h	equ	0xFDA
  9022                           fsr2l	equ	0xFD9
  9023                           status	equ	0xFD8
  9024                           
  9025 ;; *************** function _WriteUartMessage *****************
  9026 ;; Defined at:
  9027 ;;		line 158 in file "EusartApp.c"
  9028 ;; Parameters:    Size  Location     Type
  9029 ;;  dataBuf         2   24[COMRAM] PTR unsigned char 
  9030 ;;		 -> GetMcuRunTime@TxMsg(9), GetCpldFwVersion@TxMsg(9), GetMcuFwVersion@TxMsg(9), FlashReadCondition@TxMsg(9), 
  9031 ;;		 -> FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), 
  9032 ;;  dataSize        2   26[COMRAM] int 
  9033 ;; Auto vars:     Size  Location     Type
  9034 ;;  idx             2   29[COMRAM] int 
  9035 ;; Return value:  Size  Location     Type
  9036 ;;                  1    wreg      void 
  9037 ;; Registers used:
  9038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9039 ;; Tracked objects:
  9040 ;;		On entry : 0/0
  9041 ;;		On exit  : 0/0
  9042 ;;		Unchanged: 0/0
  9043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9044 ;;      Params:         4       0       0       0       0       0       0
  9045 ;;      Locals:         2       0       0       0       0       0       0
  9046 ;;      Temps:          1       0       0       0       0       0       0
  9047 ;;      Totals:         7       0       0       0       0       0       0
  9048 ;;Total ram usage:        7 bytes
  9049 ;; Hardware stack levels used:    1
  9050 ;; Hardware stack levels required when called:    4
  9051 ;; This function calls:
  9052 ;;		_EUSART1_Write
  9053 ;; This function is called by:
  9054 ;;		_SendAckMessage
  9055 ;;		_FlashReadUart
  9056 ;;		_FlashReadCondition
  9057 ;;		_GetMcuFwVersion
  9058 ;;		_GetCpldFwVersion
  9059 ;;		_GetMcuRunTime
  9060 ;; This function uses a non-reentrant model
  9061 ;;
  9062                           
  9063                           	psect	text61
  9064  003274                     __ptext61:
  9065                           	opt stack 0
  9066  003274                     _WriteUartMessage:
  9067                           	opt stack 22
  9068                           
  9069                           ;EusartApp.c: 160: for(int idx = 0; idx < dataSize; idx++)
  9070                           
  9071                           ;incstack = 0
  9072  003274  0E00               	movlw	0
  9073  003276  6E1F               	movwf	WriteUartMessage@idx+1,c
  9074  003278  0E00               	movlw	0
  9075  00327A  6E1E               	movwf	WriteUartMessage@idx,c
  9076  00327C  D00B               	goto	l204
  9077  00327E                     
  9078                           ;EusartApp.c: 161: {
  9079                           ;EusartApp.c: 162: EUSART1_Write(dataBuf[idx]);
  9080  00327E  501E               	movf	WriteUartMessage@idx,w,c
  9081  003280  2419               	addwf	WriteUartMessage@dataBuf,w,c
  9082  003282  6ED9               	movwf	fsr2l,c
  9083  003284  501F               	movf	WriteUartMessage@idx+1,w,c
  9084  003286  201A               	addwfc	WriteUartMessage@dataBuf+1,w,c
  9085  003288  6EDA               	movwf	fsr2h,c
  9086  00328A  50DF               	movf	indf2,w,c
  9087  00328C  EC57  F018         	call	_EUSART1_Write
  9088  003290  4A1E               	infsnz	WriteUartMessage@idx,f,c
  9089  003292  2A1F               	incf	WriteUartMessage@idx+1,f,c
  9090  003294                     l204:
  9091  003294  501B               	movf	WriteUartMessage@dataSize,w,c
  9092  003296  5C1E               	subwf	WriteUartMessage@idx,w,c
  9093  003298  501F               	movf	WriteUartMessage@idx+1,w,c
  9094  00329A  0A80               	xorlw	128
  9095  00329C  6E1D               	movwf	??_WriteUartMessage& (0+255),c
  9096  00329E  501C               	movf	WriteUartMessage@dataSize+1,w,c
  9097  0032A0  0A80               	xorlw	128
  9098  0032A2  581D               	subwfb	??_WriteUartMessage& (0+255),w,c
  9099  0032A4  B0D8               	btfsc	status,0,c
  9100  0032A6  0012               	return	
  9101  0032A8  D7EA               	goto	l205
  9102  0032AA                     __end_of_WriteUartMessage:
  9103                           	opt stack 0
  9104                           tosu	equ	0xFFF
  9105                           tosh	equ	0xFFE
  9106                           tosl	equ	0xFFD
  9107                           pclath	equ	0xFFA
  9108                           tblptru	equ	0xFF8
  9109                           tblptrh	equ	0xFF7
  9110                           tblptrl	equ	0xFF6
  9111                           tablat	equ	0xFF5
  9112                           prodh	equ	0xFF4
  9113                           prodl	equ	0xFF3
  9114                           intcon	equ	0xFF2
  9115                           intcon2	equ	0xFF1
  9116                           postinc0	equ	0xFEE
  9117                           wreg	equ	0xFE8
  9118                           indf1	equ	0xFE7
  9119                           postdec1	equ	0xFE5
  9120                           fsr1h	equ	0xFE2
  9121                           fsr1l	equ	0xFE1
  9122                           indf2	equ	0xFDF
  9123                           postinc2	equ	0xFDE
  9124                           postdec2	equ	0xFDD
  9125                           fsr2h	equ	0xFDA
  9126                           fsr2l	equ	0xFD9
  9127                           status	equ	0xFD8
  9128                           
  9129 ;; *************** function _EUSART1_Write *****************
  9130 ;; Defined at:
  9131 ;;		line 157 in file "mcc_generated_files/eusart1.c"
  9132 ;; Parameters:    Size  Location     Type
  9133 ;;  txData          1    wreg     unsigned char 
  9134 ;; Auto vars:     Size  Location     Type
  9135 ;;  txData          1   23[COMRAM] unsigned char 
  9136 ;; Return value:  Size  Location     Type
  9137 ;;                  1    wreg      void 
  9138 ;; Registers used:
  9139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9140 ;; Tracked objects:
  9141 ;;		On entry : 0/0
  9142 ;;		On exit  : 0/0
  9143 ;;		Unchanged: 0/0
  9144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9145 ;;      Params:         0       0       0       0       0       0       0
  9146 ;;      Locals:         1       0       0       0       0       0       0
  9147 ;;      Temps:          0       0       0       0       0       0       0
  9148 ;;      Totals:         1       0       0       0       0       0       0
  9149 ;;Total ram usage:        1 bytes
  9150 ;; Hardware stack levels used:    1
  9151 ;; Hardware stack levels required when called:    3
  9152 ;; This function calls:
  9153 ;;		Nothing
  9154 ;; This function is called by:
  9155 ;;		_WriteUartMessage
  9156 ;; This function uses a non-reentrant model
  9157 ;;
  9158                           
  9159                           	psect	text62
  9160  0030AE                     __ptext62:
  9161                           	opt stack 0
  9162  0030AE                     _EUSART1_Write:
  9163                           	opt stack 22
  9164                           
  9165                           ;incstack = 0
  9166                           ;EUSART1_Write@txData stored from wreg
  9167  0030AE  6E18               	movwf	EUSART1_Write@txData,c
  9168  0030B0                     
  9169                           ;eusart1.c: 160: {
  9170                           
  9171                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
  9172  0030B0  0100               	movlb	0	; () banked
  9173  0030B2  51FF               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
  9174  0030B4  B4D8               	btfsc	status,2,c
  9175  0030B6  D7FC               	goto	l6380
  9176                           
  9177                           ; BSR set to: 0
  9178                           ;eusart1.c: 161: }
  9179                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
  9180  0030B8  B89D               	btfsc	3997,4,c	;volatile
  9181  0030BA  D003               	goto	l827
  9182                           
  9183                           ; BSR set to: 0
  9184                           ;eusart1.c: 164: {
  9185                           ;eusart1.c: 165: TXREG1 = txData;
  9186  0030BC  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
  9187                           
  9188                           ;eusart1.c: 166: }
  9189  0030C0  D012               	goto	l828
  9190  0030C2                     l827:
  9191                           
  9192                           ; BSR set to: 0
  9193                           ;eusart1.c: 167: else
  9194                           ;eusart1.c: 168: {
  9195                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
  9196  0030C2  989D               	bcf	3997,4,c	;volatile
  9197                           
  9198                           ; BSR set to: 0
  9199                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
  9200  0030C4  503A               	movf	_eusart1TxHead,w,c	;volatile
  9201  0030C6  0D01               	mullw	1
  9202  0030C8  0E00               	movlw	low _eusart1TxBuffer
  9203  0030CA  24F3               	addwf	prodl,w,c
  9204  0030CC  6ED9               	movwf	fsr2l,c
  9205  0030CE  0E01               	movlw	high _eusart1TxBuffer
  9206  0030D0  20F4               	addwfc	prodh,w,c
  9207  0030D2  6EDA               	movwf	fsr2h,c
  9208  0030D4  C018  FFDF         	movff	EUSART1_Write@txData,indf2
  9209                           
  9210                           ; BSR set to: 0
  9211  0030D8  2A3A               	incf	_eusart1TxHead,f,c	;volatile
  9212                           
  9213                           ; BSR set to: 0
  9214                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
  9215  0030DA  0E45               	movlw	69
  9216  0030DC  643A               	cpfsgt	_eusart1TxHead,c	;volatile
  9217  0030DE  D002               	goto	l829
  9218                           
  9219                           ; BSR set to: 0
  9220                           ;eusart1.c: 172: {
  9221                           ;eusart1.c: 173: eusart1TxHead = 0;
  9222  0030E0  0E00               	movlw	0
  9223  0030E2  6E3A               	movwf	_eusart1TxHead,c	;volatile
  9224  0030E4                     l829:
  9225                           
  9226                           ; BSR set to: 0
  9227                           ;eusart1.c: 174: }
  9228                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
  9229                           
  9230                           ; BSR set to: 0
  9231  0030E4  07FF               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
  9232  0030E6                     l828:
  9233                           
  9234                           ; BSR set to: 0
  9235                           ;eusart1.c: 176: }
  9236                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
  9237                           
  9238                           ; BSR set to: 0
  9239  0030E6  889D               	bsf	3997,4,c	;volatile
  9240                           
  9241                           ; BSR set to: 0
  9242  0030E8  0012               	return		;funcret
  9243  0030EA                     __end_of_EUSART1_Write:
  9244                           	opt stack 0
  9245                           tosu	equ	0xFFF
  9246                           tosh	equ	0xFFE
  9247                           tosl	equ	0xFFD
  9248                           pclath	equ	0xFFA
  9249                           tblptru	equ	0xFF8
  9250                           tblptrh	equ	0xFF7
  9251                           tblptrl	equ	0xFF6
  9252                           tablat	equ	0xFF5
  9253                           prodh	equ	0xFF4
  9254                           prodl	equ	0xFF3
  9255                           intcon	equ	0xFF2
  9256                           intcon2	equ	0xFF1
  9257                           postinc0	equ	0xFEE
  9258                           wreg	equ	0xFE8
  9259                           indf1	equ	0xFE7
  9260                           postdec1	equ	0xFE5
  9261                           fsr1h	equ	0xFE2
  9262                           fsr1l	equ	0xFE1
  9263                           indf2	equ	0xFDF
  9264                           postinc2	equ	0xFDE
  9265                           postdec2	equ	0xFDD
  9266                           fsr2h	equ	0xFDA
  9267                           fsr2l	equ	0xFD9
  9268                           status	equ	0xFD8
  9269                           
  9270 ;; *************** function _InitSystemApplicationManagers *****************
  9271 ;; Defined at:
  9272 ;;		line 33 in file "SystemSettings.c"
  9273 ;; Parameters:    Size  Location     Type
  9274 ;;		None
  9275 ;; Auto vars:     Size  Location     Type
  9276 ;;		None
  9277 ;; Return value:  Size  Location     Type
  9278 ;;                  1    wreg      void 
  9279 ;; Registers used:
  9280 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9281 ;; Tracked objects:
  9282 ;;		On entry : 0/0
  9283 ;;		On exit  : 0/0
  9284 ;;		Unchanged: 0/0
  9285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9286 ;;      Params:         0       0       0       0       0       0       0
  9287 ;;      Locals:         0       0       0       0       0       0       0
  9288 ;;      Temps:          0       0       0       0       0       0       0
  9289 ;;      Totals:         0       0       0       0       0       0       0
  9290 ;;Total ram usage:        0 bytes
  9291 ;; Hardware stack levels used:    1
  9292 ;; Hardware stack levels required when called:    8
  9293 ;; This function calls:
  9294 ;;		_ClearMcuRunTime
  9295 ;;		_InitAdcApplicationMgr
  9296 ;;		_InitSevenSegment
  9297 ;;		_PLLInitialize
  9298 ;;		_TMR0_StartTimer
  9299 ;; This function is called by:
  9300 ;;		_main
  9301 ;; This function uses a non-reentrant model
  9302 ;;
  9303                           
  9304                           	psect	text63
  9305  003616                     __ptext63:
  9306                           	opt stack 0
  9307  003616                     _InitSystemApplicationManagers:
  9308                           	opt stack 22
  9309                           
  9310                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
  9311                           
  9312                           ; BSR set to: 0
  9313                           ;incstack = 0
  9314  003616  EC5A  F01B         	call	_InitAdcApplicationMgr	;wreg free
  9315                           
  9316                           ;SystemSettings.c: 39: TMR0_StartTimer();
  9317  00361A  EC99  F01B         	call	_TMR0_StartTimer	;wreg free
  9318                           
  9319                           ;SystemSettings.c: 42: InitSevenSegment();
  9320  00361E  EC35  F01A         	call	_InitSevenSegment	;wreg free
  9321                           
  9322                           ;SystemSettings.c: 45: PLLInitialize();
  9323  003622  EC16  F005         	call	_PLLInitialize	;wreg free
  9324                           
  9325                           ;SystemSettings.c: 48: ClearMcuRunTime();
  9326  003626  EC2A  F01B         	call	_ClearMcuRunTime	;wreg free
  9327  00362A  0012               	return		;funcret
  9328  00362C                     __end_of_InitSystemApplicationManagers:
  9329                           	opt stack 0
  9330                           tosu	equ	0xFFF
  9331                           tosh	equ	0xFFE
  9332                           tosl	equ	0xFFD
  9333                           pclath	equ	0xFFA
  9334                           tblptru	equ	0xFF8
  9335                           tblptrh	equ	0xFF7
  9336                           tblptrl	equ	0xFF6
  9337                           tablat	equ	0xFF5
  9338                           prodh	equ	0xFF4
  9339                           prodl	equ	0xFF3
  9340                           intcon	equ	0xFF2
  9341                           intcon2	equ	0xFF1
  9342                           postinc0	equ	0xFEE
  9343                           wreg	equ	0xFE8
  9344                           indf1	equ	0xFE7
  9345                           postdec1	equ	0xFE5
  9346                           fsr1h	equ	0xFE2
  9347                           fsr1l	equ	0xFE1
  9348                           indf2	equ	0xFDF
  9349                           postinc2	equ	0xFDE
  9350                           postdec2	equ	0xFDD
  9351                           fsr2h	equ	0xFDA
  9352                           fsr2l	equ	0xFD9
  9353                           status	equ	0xFD8
  9354                           
  9355 ;; *************** function _TMR0_StartTimer *****************
  9356 ;; Defined at:
  9357 ;;		line 93 in file "mcc_generated_files/tmr0.c"
  9358 ;; Parameters:    Size  Location     Type
  9359 ;;		None
  9360 ;; Auto vars:     Size  Location     Type
  9361 ;;		None
  9362 ;; Return value:  Size  Location     Type
  9363 ;;                  1    wreg      void 
  9364 ;; Registers used:
  9365 ;;		None
  9366 ;; Tracked objects:
  9367 ;;		On entry : 0/0
  9368 ;;		On exit  : 0/0
  9369 ;;		Unchanged: 0/0
  9370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9371 ;;      Params:         0       0       0       0       0       0       0
  9372 ;;      Locals:         0       0       0       0       0       0       0
  9373 ;;      Temps:          0       0       0       0       0       0       0
  9374 ;;      Totals:         0       0       0       0       0       0       0
  9375 ;;Total ram usage:        0 bytes
  9376 ;; Hardware stack levels used:    1
  9377 ;; Hardware stack levels required when called:    3
  9378 ;; This function calls:
  9379 ;;		Nothing
  9380 ;; This function is called by:
  9381 ;;		_InitSystemApplicationManagers
  9382 ;; This function uses a non-reentrant model
  9383 ;;
  9384                           
  9385                           	psect	text64
  9386  003732                     __ptext64:
  9387                           	opt stack 0
  9388  003732                     _TMR0_StartTimer:
  9389                           	opt stack 26
  9390                           
  9391                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
  9392                           
  9393                           ;incstack = 0
  9394  003732  8ED5               	bsf	4053,7,c	;volatile
  9395  003734  0012               	return		;funcret
  9396  003736                     __end_of_TMR0_StartTimer:
  9397                           	opt stack 0
  9398                           tosu	equ	0xFFF
  9399                           tosh	equ	0xFFE
  9400                           tosl	equ	0xFFD
  9401                           pclath	equ	0xFFA
  9402                           tblptru	equ	0xFF8
  9403                           tblptrh	equ	0xFF7
  9404                           tblptrl	equ	0xFF6
  9405                           tablat	equ	0xFF5
  9406                           prodh	equ	0xFF4
  9407                           prodl	equ	0xFF3
  9408                           intcon	equ	0xFF2
  9409                           intcon2	equ	0xFF1
  9410                           postinc0	equ	0xFEE
  9411                           wreg	equ	0xFE8
  9412                           indf1	equ	0xFE7
  9413                           postdec1	equ	0xFE5
  9414                           fsr1h	equ	0xFE2
  9415                           fsr1l	equ	0xFE1
  9416                           indf2	equ	0xFDF
  9417                           postinc2	equ	0xFDE
  9418                           postdec2	equ	0xFDD
  9419                           fsr2h	equ	0xFDA
  9420                           fsr2l	equ	0xFD9
  9421                           status	equ	0xFD8
  9422                           
  9423 ;; *************** function _PLLInitialize *****************
  9424 ;; Defined at:
  9425 ;;		line 14 in file "SyntApp.c"
  9426 ;; Parameters:    Size  Location     Type
  9427 ;;		None
  9428 ;; Auto vars:     Size  Location     Type
  9429 ;;  idx             2   45[COMRAM] int 
  9430 ;;  idx             2   43[COMRAM] int 
  9431 ;; Return value:  Size  Location     Type
  9432 ;;                  1    wreg      void 
  9433 ;; Registers used:
  9434 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9435 ;; Tracked objects:
  9436 ;;		On entry : 0/0
  9437 ;;		On exit  : 0/0
  9438 ;;		Unchanged: 0/0
  9439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9440 ;;      Params:         0       0       0       0       0       0       0
  9441 ;;      Locals:         4       0       0       0       0       0       0
  9442 ;;      Temps:          2       0       0       0       0       0       0
  9443 ;;      Totals:         6       0       0       0       0       0       0
  9444 ;;Total ram usage:        6 bytes
  9445 ;; Hardware stack levels used:    1
  9446 ;; Hardware stack levels required when called:    7
  9447 ;; This function calls:
  9448 ;;		_SWSPI_send_word
  9449 ;;		_SwSpi_Set_CE_Pin
  9450 ;; This function is called by:
  9451 ;;		_InitSystemApplicationManagers
  9452 ;; This function uses a non-reentrant model
  9453 ;;
  9454                           
  9455                           	psect	text65
  9456  000A2C                     __ptext65:
  9457                           	opt stack 0
  9458  000A2C                     _PLLInitialize:
  9459                           	opt stack 22
  9460                           
  9461                           ;SyntApp.c: 17: IOCB = 0b10000000;
  9462                           
  9463                           ;incstack = 0
  9464  000A2C  0E80               	movlw	128
  9465  000A2E  6E62               	movwf	3938,c	;volatile
  9466                           
  9467                           ;SyntApp.c: 20: SwSpi_Set_CE_Pin(SYNTH_TX, 1);
  9468  000A30  0E01               	movlw	1
  9469  000A32  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  9470  000A34  0E00               	movlw	0
  9471  000A36  EC75  F018         	call	_SwSpi_Set_CE_Pin
  9472                           
  9473                           ;SyntApp.c: 24: for(int idx = 0; idx < 13; idx++)
  9474  000A3A  0E00               	movlw	0
  9475  000A3C  6E2D               	movwf	PLLInitialize@idx+1,c
  9476  000A3E  0E00               	movlw	0
  9477  000A40  6E2C               	movwf	PLLInitialize@idx,c
  9478  000A42                     l7608:
  9479  000A42  BE2D               	btfsc	PLLInitialize@idx+1,7,c
  9480  000A44  D006               	goto	l483
  9481  000A46  502D               	movf	PLLInitialize@idx+1,w,c
  9482  000A48  E128               	bnz	l7618
  9483  000A4A  0E0D               	movlw	13
  9484  000A4C  5C2C               	subwf	PLLInitialize@idx,w,c
  9485  000A4E  B0D8               	btfsc	status,0,c
  9486  000A50  D024               	goto	u7550
  9487  000A52                     l483:
  9488                           
  9489                           ;SyntApp.c: 25: {
  9490                           ;SyntApp.c: 26: SWSPI_send_word(SYNTH_TX, PLL_INIT_REGISTERS[idx], 3);
  9491  000A52  C02C  F02A         	movff	PLLInitialize@idx,??_PLLInitialize
  9492  000A56  C02D  F02B         	movff	PLLInitialize@idx+1,??_PLLInitialize+1
  9493  000A5A  90D8               	bcf	status,0,c
  9494  000A5C  362A               	rlcf	??_PLLInitialize,f,c
  9495  000A5E  362B               	rlcf	??_PLLInitialize+1,f,c
  9496  000A60  90D8               	bcf	status,0,c
  9497  000A62  362A               	rlcf	??_PLLInitialize,f,c
  9498  000A64  362B               	rlcf	??_PLLInitialize+1,f,c
  9499  000A66  0E01               	movlw	low _PLL_INIT_REGISTERS
  9500  000A68  242A               	addwf	??_PLLInitialize,w,c
  9501  000A6A  6EF6               	movwf	tblptrl,c
  9502  000A6C  0E06               	movlw	high _PLL_INIT_REGISTERS
  9503  000A6E  202B               	addwfc	??_PLLInitialize+1,w,c
  9504  000A70  6EF7               	movwf	tblptrh,c
  9505  000A72                     	if	0	;There are less than 3 active tblptr bytes
  9506  000A72                     	endif
  9507  000A72  0009               	tblrd		*+
  9508  000A74  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9509  000A78  0009               	tblrd		*+
  9510  000A7A  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9511  000A7E  0009               	tblrd		*+
  9512  000A80  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9513  000A84  000A               	tblrd		*-
  9514  000A86  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9515  000A8A  0E03               	movlw	3
  9516  000A8C  6E25               	movwf	SWSPI_send_word@dataSize,c
  9517  000A8E  0E00               	movlw	0
  9518  000A90  EC39  F011         	call	_SWSPI_send_word
  9519  000A94  4A2C               	infsnz	PLLInitialize@idx,f,c
  9520  000A96  2A2D               	incf	PLLInitialize@idx+1,f,c
  9521  000A98  D7D4               	goto	l7608
  9522  000A9A                     u7550:
  9523  000A9A                     l7618:
  9524                           
  9525                           ;SyntApp.c: 27: }
  9526                           ;SyntApp.c: 30: SWSPI_send_word(SYNTH_TX, PLL_INIT_REGISTERS[4], 3);
  9527  000A9A  0E11               	movlw	low (_PLL_INIT_REGISTERS+16)
  9528  000A9C  6EF6               	movwf	tblptrl,c
  9529  000A9E  0E06               	movlw	high (_PLL_INIT_REGISTERS+16)
  9530  000AA0  6EF7               	movwf	tblptrh,c
  9531  000AA2                     	if	0	;tblptru may be non-zero
  9532  000AA2                     	endif
  9533  000AA2                     	if	0	;tblptru may be non-zero
  9534  000AA2                     	endif
  9535  000AA2  0009               	tblrd		*+
  9536  000AA4  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9537  000AA8  0009               	tblrd		*+
  9538  000AAA  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9539  000AAE  0009               	tblrd		*+
  9540  000AB0  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9541  000AB4  000A               	tblrd		*-
  9542  000AB6  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9543  000ABA  0E03               	movlw	3
  9544  000ABC  6E25               	movwf	SWSPI_send_word@dataSize,c
  9545  000ABE  0E00               	movlw	0
  9546  000AC0  EC39  F011         	call	_SWSPI_send_word
  9547                           
  9548                           ;SyntApp.c: 31: SWSPI_send_word(SYNTH_TX, PLL_INIT_REGISTERS[2], 3);
  9549  000AC4  0E09               	movlw	low (_PLL_INIT_REGISTERS+8)
  9550  000AC6  6EF6               	movwf	tblptrl,c
  9551  000AC8  0E06               	movlw	high (_PLL_INIT_REGISTERS+8)
  9552  000ACA  6EF7               	movwf	tblptrh,c
  9553  000ACC                     	if	0	;tblptru may be non-zero
  9554  000ACC                     	endif
  9555  000ACC                     	if	0	;tblptru may be non-zero
  9556  000ACC                     	endif
  9557  000ACC  0009               	tblrd		*+
  9558  000ACE  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9559  000AD2  0009               	tblrd		*+
  9560  000AD4  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9561  000AD8  0009               	tblrd		*+
  9562  000ADA  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9563  000ADE  000A               	tblrd		*-
  9564  000AE0  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9565  000AE4  0E03               	movlw	3
  9566  000AE6  6E25               	movwf	SWSPI_send_word@dataSize,c
  9567  000AE8  0E00               	movlw	0
  9568  000AEA  EC39  F011         	call	_SWSPI_send_word
  9569                           
  9570                           ;SyntApp.c: 32: SWSPI_send_word(SYNTH_TX, PLL_INIT_REGISTERS[1], 3);
  9571  000AEE  0E05               	movlw	low (_PLL_INIT_REGISTERS+4)
  9572  000AF0  6EF6               	movwf	tblptrl,c
  9573  000AF2  0E06               	movlw	high (_PLL_INIT_REGISTERS+4)
  9574  000AF4  6EF7               	movwf	tblptrh,c
  9575  000AF6                     	if	0	;tblptru may be non-zero
  9576  000AF6                     	endif
  9577  000AF6                     	if	0	;tblptru may be non-zero
  9578  000AF6                     	endif
  9579  000AF6  0009               	tblrd		*+
  9580  000AF8  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9581  000AFC  0009               	tblrd		*+
  9582  000AFE  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9583  000B02  0009               	tblrd		*+
  9584  000B04  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9585  000B08  000A               	tblrd		*-
  9586  000B0A  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9587  000B0E  0E03               	movlw	3
  9588  000B10  6E25               	movwf	SWSPI_send_word@dataSize,c
  9589  000B12  0E00               	movlw	0
  9590  000B14  EC39  F011         	call	_SWSPI_send_word
  9591                           
  9592                           ;SyntApp.c: 33: SWSPI_send_word(SYNTH_TX, PLL_INIT_REGISTERS[0], 3);
  9593  000B18  0E01               	movlw	low _PLL_INIT_REGISTERS
  9594  000B1A  6EF6               	movwf	tblptrl,c
  9595  000B1C                     	if	1	;There is more than 1 active tblptr byte
  9596  000B1C  0E06               	movlw	high _PLL_INIT_REGISTERS
  9597  000B1E  6EF7               	movwf	tblptrh,c
  9598  000B20                     	endif
  9599  000B20                     	if	0	;There are less than 3 active tblptr bytes
  9600  000B20                     	endif
  9601  000B20  0009               	tblrd		*+
  9602  000B22  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9603  000B26  0009               	tblrd		*+
  9604  000B28  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9605  000B2C  0009               	tblrd		*+
  9606  000B2E  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9607  000B32  000A               	tblrd		*-
  9608  000B34  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9609  000B38  0E03               	movlw	3
  9610  000B3A  6E25               	movwf	SWSPI_send_word@dataSize,c
  9611  000B3C  0E00               	movlw	0
  9612  000B3E  EC39  F011         	call	_SWSPI_send_word
  9613                           
  9614                           ;SyntApp.c: 36: SwSpi_Set_CE_Pin(SYNTH_RX, 1);
  9615  000B42  0E01               	movlw	1
  9616  000B44  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  9617  000B46  0E01               	movlw	1
  9618  000B48  EC75  F018         	call	_SwSpi_Set_CE_Pin
  9619                           
  9620                           ;SyntApp.c: 39: for(int idx = 0; idx < 13; idx++)
  9621  000B4C  0E00               	movlw	0
  9622  000B4E  6E2F               	movwf	PLLInitialize@idx_797+1,c
  9623  000B50  0E00               	movlw	0
  9624  000B52  6E2E               	movwf	PLLInitialize@idx_797,c
  9625  000B54                     l7624:
  9626  000B54  BE2F               	btfsc	PLLInitialize@idx_797+1,7,c
  9627  000B56  D006               	goto	l485
  9628  000B58  502F               	movf	PLLInitialize@idx_797+1,w,c
  9629  000B5A  E128               	bnz	l7634
  9630  000B5C  0E0D               	movlw	13
  9631  000B5E  5C2E               	subwf	PLLInitialize@idx_797,w,c
  9632  000B60  B0D8               	btfsc	status,0,c
  9633  000B62  D024               	goto	u7570
  9634  000B64                     l485:
  9635                           
  9636                           ;SyntApp.c: 40: {
  9637                           ;SyntApp.c: 41: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[idx], 3);
  9638  000B64  C02E  F02A         	movff	PLLInitialize@idx_797,??_PLLInitialize
  9639  000B68  C02F  F02B         	movff	PLLInitialize@idx_797+1,??_PLLInitialize+1
  9640  000B6C  90D8               	bcf	status,0,c
  9641  000B6E  362A               	rlcf	??_PLLInitialize,f,c
  9642  000B70  362B               	rlcf	??_PLLInitialize+1,f,c
  9643  000B72  90D8               	bcf	status,0,c
  9644  000B74  362A               	rlcf	??_PLLInitialize,f,c
  9645  000B76  362B               	rlcf	??_PLLInitialize+1,f,c
  9646  000B78  0E01               	movlw	low _PLL_INIT_REGISTERS
  9647  000B7A  242A               	addwf	??_PLLInitialize,w,c
  9648  000B7C  6EF6               	movwf	tblptrl,c
  9649  000B7E  0E06               	movlw	high _PLL_INIT_REGISTERS
  9650  000B80  202B               	addwfc	??_PLLInitialize+1,w,c
  9651  000B82  6EF7               	movwf	tblptrh,c
  9652  000B84                     	if	0	;There are less than 3 active tblptr bytes
  9653  000B84                     	endif
  9654  000B84  0009               	tblrd		*+
  9655  000B86  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9656  000B8A  0009               	tblrd		*+
  9657  000B8C  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9658  000B90  0009               	tblrd		*+
  9659  000B92  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9660  000B96  000A               	tblrd		*-
  9661  000B98  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9662  000B9C  0E03               	movlw	3
  9663  000B9E  6E25               	movwf	SWSPI_send_word@dataSize,c
  9664  000BA0  0E01               	movlw	1
  9665  000BA2  EC39  F011         	call	_SWSPI_send_word
  9666  000BA6  4A2E               	infsnz	PLLInitialize@idx_797,f,c
  9667  000BA8  2A2F               	incf	PLLInitialize@idx_797+1,f,c
  9668  000BAA  D7D4               	goto	l7624
  9669  000BAC                     u7570:
  9670  000BAC                     l7634:
  9671                           
  9672                           ;SyntApp.c: 42: }
  9673                           ;SyntApp.c: 45: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[4], 3);
  9674  000BAC  0E11               	movlw	low (_PLL_INIT_REGISTERS+16)
  9675  000BAE  6EF6               	movwf	tblptrl,c
  9676  000BB0  0E06               	movlw	high (_PLL_INIT_REGISTERS+16)
  9677  000BB2  6EF7               	movwf	tblptrh,c
  9678  000BB4                     	if	0	;tblptru may be non-zero
  9679  000BB4                     	endif
  9680  000BB4                     	if	0	;tblptru may be non-zero
  9681  000BB4                     	endif
  9682  000BB4  0009               	tblrd		*+
  9683  000BB6  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9684  000BBA  0009               	tblrd		*+
  9685  000BBC  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9686  000BC0  0009               	tblrd		*+
  9687  000BC2  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9688  000BC6  000A               	tblrd		*-
  9689  000BC8  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9690  000BCC  0E03               	movlw	3
  9691  000BCE  6E25               	movwf	SWSPI_send_word@dataSize,c
  9692  000BD0  0E01               	movlw	1
  9693  000BD2  EC39  F011         	call	_SWSPI_send_word
  9694                           
  9695                           ;SyntApp.c: 46: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[2], 3);
  9696  000BD6  0E09               	movlw	low (_PLL_INIT_REGISTERS+8)
  9697  000BD8  6EF6               	movwf	tblptrl,c
  9698  000BDA  0E06               	movlw	high (_PLL_INIT_REGISTERS+8)
  9699  000BDC  6EF7               	movwf	tblptrh,c
  9700  000BDE                     	if	0	;tblptru may be non-zero
  9701  000BDE                     	endif
  9702  000BDE                     	if	0	;tblptru may be non-zero
  9703  000BDE                     	endif
  9704  000BDE  0009               	tblrd		*+
  9705  000BE0  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9706  000BE4  0009               	tblrd		*+
  9707  000BE6  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9708  000BEA  0009               	tblrd		*+
  9709  000BEC  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9710  000BF0  000A               	tblrd		*-
  9711  000BF2  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9712  000BF6  0E03               	movlw	3
  9713  000BF8  6E25               	movwf	SWSPI_send_word@dataSize,c
  9714  000BFA  0E01               	movlw	1
  9715  000BFC  EC39  F011         	call	_SWSPI_send_word
  9716                           
  9717                           ;SyntApp.c: 47: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[1], 3);
  9718  000C00  0E05               	movlw	low (_PLL_INIT_REGISTERS+4)
  9719  000C02  6EF6               	movwf	tblptrl,c
  9720  000C04  0E06               	movlw	high (_PLL_INIT_REGISTERS+4)
  9721  000C06  6EF7               	movwf	tblptrh,c
  9722  000C08                     	if	0	;tblptru may be non-zero
  9723  000C08                     	endif
  9724  000C08                     	if	0	;tblptru may be non-zero
  9725  000C08                     	endif
  9726  000C08  0009               	tblrd		*+
  9727  000C0A  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9728  000C0E  0009               	tblrd		*+
  9729  000C10  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9730  000C14  0009               	tblrd		*+
  9731  000C16  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9732  000C1A  000A               	tblrd		*-
  9733  000C1C  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9734  000C20  0E03               	movlw	3
  9735  000C22  6E25               	movwf	SWSPI_send_word@dataSize,c
  9736  000C24  0E01               	movlw	1
  9737  000C26  EC39  F011         	call	_SWSPI_send_word
  9738                           
  9739                           ;SyntApp.c: 48: SWSPI_send_word(SYNTH_RX, PLL_INIT_REGISTERS[0], 3);
  9740  000C2A  0E01               	movlw	low _PLL_INIT_REGISTERS
  9741  000C2C  6EF6               	movwf	tblptrl,c
  9742  000C2E                     	if	1	;There is more than 1 active tblptr byte
  9743  000C2E  0E06               	movlw	high _PLL_INIT_REGISTERS
  9744  000C30  6EF7               	movwf	tblptrh,c
  9745  000C32                     	endif
  9746  000C32                     	if	0	;There are less than 3 active tblptr bytes
  9747  000C32                     	endif
  9748  000C32  0009               	tblrd		*+
  9749  000C34  CFF5 F021          	movff	tablat,SWSPI_send_word@data
  9750  000C38  0009               	tblrd		*+
  9751  000C3A  CFF5 F022          	movff	tablat,SWSPI_send_word@data+1
  9752  000C3E  0009               	tblrd		*+
  9753  000C40  CFF5 F023          	movff	tablat,SWSPI_send_word@data+2
  9754  000C44  000A               	tblrd		*-
  9755  000C46  CFF5 F024          	movff	tablat,SWSPI_send_word@data+3
  9756  000C4A  0E03               	movlw	3
  9757  000C4C  6E25               	movwf	SWSPI_send_word@dataSize,c
  9758  000C4E  0E01               	movlw	1
  9759  000C50  EC39  F011         	call	_SWSPI_send_word
  9760  000C54  0012               	return		;funcret
  9761  000C56                     __end_of_PLLInitialize:
  9762                           	opt stack 0
  9763                           tosu	equ	0xFFF
  9764                           tosh	equ	0xFFE
  9765                           tosl	equ	0xFFD
  9766                           pclath	equ	0xFFA
  9767                           tblptru	equ	0xFF8
  9768                           tblptrh	equ	0xFF7
  9769                           tblptrl	equ	0xFF6
  9770                           tablat	equ	0xFF5
  9771                           prodh	equ	0xFF4
  9772                           prodl	equ	0xFF3
  9773                           intcon	equ	0xFF2
  9774                           intcon2	equ	0xFF1
  9775                           postinc0	equ	0xFEE
  9776                           wreg	equ	0xFE8
  9777                           indf1	equ	0xFE7
  9778                           postdec1	equ	0xFE5
  9779                           fsr1h	equ	0xFE2
  9780                           fsr1l	equ	0xFE1
  9781                           indf2	equ	0xFDF
  9782                           postinc2	equ	0xFDE
  9783                           postdec2	equ	0xFDD
  9784                           fsr2h	equ	0xFDA
  9785                           fsr2l	equ	0xFD9
  9786                           status	equ	0xFD8
  9787                           
  9788 ;; *************** function _SwSpi_Set_CE_Pin *****************
  9789 ;; Defined at:
  9790 ;;		line 171 in file "SwSpiApp.c"
  9791 ;; Parameters:    Size  Location     Type
  9792 ;;  phrType         1    wreg     enum E7534
  9793 ;;  cPinMode        1   23[COMRAM] unsigned char 
  9794 ;; Auto vars:     Size  Location     Type
  9795 ;;  phrType         1   24[COMRAM] enum E7534
  9796 ;; Return value:  Size  Location     Type
  9797 ;;                  1    wreg      void 
  9798 ;; Registers used:
  9799 ;;		wreg, status,2, status,0
  9800 ;; Tracked objects:
  9801 ;;		On entry : 0/0
  9802 ;;		On exit  : 0/0
  9803 ;;		Unchanged: 0/0
  9804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9805 ;;      Params:         1       0       0       0       0       0       0
  9806 ;;      Locals:         1       0       0       0       0       0       0
  9807 ;;      Temps:          0       0       0       0       0       0       0
  9808 ;;      Totals:         2       0       0       0       0       0       0
  9809 ;;Total ram usage:        2 bytes
  9810 ;; Hardware stack levels used:    1
  9811 ;; Hardware stack levels required when called:    3
  9812 ;; This function calls:
  9813 ;;		Nothing
  9814 ;; This function is called by:
  9815 ;;		_PLLInitialize
  9816 ;; This function uses a non-reentrant model
  9817 ;;
  9818                           
  9819                           	psect	text66
  9820  0030EA                     __ptext66:
  9821                           	opt stack 0
  9822  0030EA                     _SwSpi_Set_CE_Pin:
  9823                           	opt stack 25
  9824                           
  9825                           ;incstack = 0
  9826                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
  9827  0030EA  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
  9828                           
  9829                           ;SwSpiApp.c: 173: switch(phrType)
  9830  0030EC  D014               	goto	l635
  9831  0030EE                     
  9832                           ;SwSpiApp.c: 176: if(cPinMode == 1)
  9833  0030EE  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9834  0030F0  A4D8               	btfss	status,2,c
  9835  0030F2  D002               	goto	l637
  9836                           
  9837                           ;SwSpiApp.c: 177: {
  9838                           ;SwSpiApp.c: 178: do { LATCbits.LATC1 = 1; } while(0);
  9839  0030F4  828B               	bsf	3979,1,c	;volatile
  9840                           
  9841                           ;SwSpiApp.c: 179: }
  9842  0030F6  0012               	return	
  9843  0030F8                     l637:
  9844                           
  9845                           ;SwSpiApp.c: 180: else if(cPinMode == 0)
  9846  0030F8  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9847  0030FA  A4D8               	btfss	status,2,c
  9848  0030FC  0012               	return	
  9849                           
  9850                           ;SwSpiApp.c: 181: {
  9851                           ;SwSpiApp.c: 182: do { LATCbits.LATC1 = 0; } while(0);
  9852  0030FE  928B               	bcf	3979,1,c	;volatile
  9853                           
  9854                           ;SwSpiApp.c: 183: }
  9855                           ;SwSpiApp.c: 184: break;
  9856  003100  0012               	return	
  9857  003102                     
  9858                           ;SwSpiApp.c: 187: if(cPinMode == 1)
  9859  003102  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9860  003104  A4D8               	btfss	status,2,c
  9861  003106  D002               	goto	l646
  9862                           
  9863                           ;SwSpiApp.c: 188: {
  9864                           ;SwSpiApp.c: 189: do { LATDbits.LATD2 = 1; } while(0);
  9865  003108  848C               	bsf	3980,2,c	;volatile
  9866                           
  9867                           ;SwSpiApp.c: 190: }
  9868  00310A  0012               	return	
  9869  00310C                     l646:
  9870                           
  9871                           ;SwSpiApp.c: 191: else if(cPinMode == 0)
  9872  00310C  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
  9873  00310E  A4D8               	btfss	status,2,c
  9874  003110  0012               	return	
  9875                           
  9876                           ;SwSpiApp.c: 192: {
  9877                           ;SwSpiApp.c: 193: do { LATCbits.LATC1 = 0; } while(0);
  9878  003112  928B               	bcf	3979,1,c	;volatile
  9879                           
  9880                           ;SwSpiApp.c: 196: }
  9881                           
  9882                           ;SwSpiApp.c: 194: }
  9883                           ;SwSpiApp.c: 195: break;
  9884  003114  0012               	return	
  9885  003116                     l635:
  9886  003116  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
  9887                           
  9888                           ; Switch size 1, requested type "space"
  9889                           ; Number of cases is 2, Range of values is 0 to 1
  9890                           ; switch strategies available:
  9891                           ; Name         Instructions Cycles
  9892                           ; simple_byte            7     4 (average)
  9893                           ;	Chosen strategy is simple_byte
  9894  003118  0A00               	xorlw	0	; case 0
  9895  00311A  B4D8               	btfsc	status,2,c
  9896  00311C  D7E8               	goto	l636
  9897  00311E  0A01               	xorlw	1	; case 1
  9898  003120  A4D8               	btfss	status,2,c
  9899  003122  0012               	return	
  9900  003124  D7EE               	goto	l645
  9901  003126                     __end_of_SwSpi_Set_CE_Pin:
  9902                           	opt stack 0
  9903                           tosu	equ	0xFFF
  9904                           tosh	equ	0xFFE
  9905                           tosl	equ	0xFFD
  9906                           pclath	equ	0xFFA
  9907                           tblptru	equ	0xFF8
  9908                           tblptrh	equ	0xFF7
  9909                           tblptrl	equ	0xFF6
  9910                           tablat	equ	0xFF5
  9911                           prodh	equ	0xFF4
  9912                           prodl	equ	0xFF3
  9913                           intcon	equ	0xFF2
  9914                           intcon2	equ	0xFF1
  9915                           postinc0	equ	0xFEE
  9916                           wreg	equ	0xFE8
  9917                           indf1	equ	0xFE7
  9918                           postdec1	equ	0xFE5
  9919                           fsr1h	equ	0xFE2
  9920                           fsr1l	equ	0xFE1
  9921                           indf2	equ	0xFDF
  9922                           postinc2	equ	0xFDE
  9923                           postdec2	equ	0xFDD
  9924                           fsr2h	equ	0xFDA
  9925                           fsr2l	equ	0xFD9
  9926                           status	equ	0xFD8
  9927                           
  9928 ;; *************** function _SWSPI_send_word *****************
  9929 ;; Defined at:
  9930 ;;		line 17 in file "SwSpiApp.c"
  9931 ;; Parameters:    Size  Location     Type
  9932 ;;  phrType         1    wreg     enum E7534
  9933 ;;  data            4   32[COMRAM] unsigned long 
  9934 ;;  dataSize        1   36[COMRAM] unsigned char 
  9935 ;; Auto vars:     Size  Location     Type
  9936 ;;  phrType         1   40[COMRAM] enum E7534
  9937 ;;  datac           1   37[COMRAM] unsigned char 
  9938 ;;  idx             2   38[COMRAM] int 
  9939 ;; Return value:  Size  Location     Type
  9940 ;;                  1    wreg      void 
  9941 ;; Registers used:
  9942 ;;		wreg, status,2, status,0, cstack
  9943 ;; Tracked objects:
  9944 ;;		On entry : 0/0
  9945 ;;		On exit  : 0/0
  9946 ;;		Unchanged: 0/0
  9947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9948 ;;      Params:         5       0       0       0       0       0       0
  9949 ;;      Locals:         4       0       0       0       0       0       0
  9950 ;;      Temps:          0       0       0       0       0       0       0
  9951 ;;      Totals:         9       0       0       0       0       0       0
  9952 ;;Total ram usage:        9 bytes
  9953 ;; Hardware stack levels used:    1
  9954 ;; Hardware stack levels required when called:    6
  9955 ;; This function calls:
  9956 ;;		_SWSPI_send_bits
  9957 ;;		_SwSpi_Set_Dac_Ldac_Pin
  9958 ;;		_SwSpi_Set_Dac_Sync_Pin
  9959 ;;		_SwSpi_Set_Synth_Le_Pin
  9960 ;;		_make8
  9961 ;; This function is called by:
  9962 ;;		_DacSetValue
  9963 ;;		_PLLInitialize
  9964 ;;		_UpdateTxFreq
  9965 ;; This function uses a non-reentrant model
  9966 ;;
  9967                           
  9968                           	psect	text67
  9969  002272                     __ptext67:
  9970                           	opt stack 0
  9971  002272                     _SWSPI_send_word:
  9972                           	opt stack 21
  9973                           
  9974                           ;incstack = 0
  9975                           ;SWSPI_send_word@phrType stored from wreg
  9976  002272  6E29               	movwf	SWSPI_send_word@phrType,c
  9977                           
  9978                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
  9979  002274  9EF2               	bcf	intcon,7,c	;volatile
  9980                           
  9981                           ;SwSpiApp.c: 21: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
  9982  002276  5029               	movf	SWSPI_send_word@phrType,w,c
  9983  002278  B4D8               	btfsc	status,2,c
  9984  00227A  D003               	goto	u6620
  9985  00227C  0429               	decf	SWSPI_send_word@phrType,w,c
  9986  00227E  A4D8               	btfss	status,2,c
  9987  002280  D006               	goto	l552
  9988  002282                     u6620:
  9989                           
  9990                           ;SwSpiApp.c: 22: {
  9991                           ;SwSpiApp.c: 23: SwSpi_Set_Synth_Le_Pin(phrType, 0);
  9992  002282  0E00               	movlw	0
  9993  002284  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
  9994  002286  5029               	movf	SWSPI_send_word@phrType,w,c
  9995  002288  EC93  F018         	call	_SwSpi_Set_Synth_Le_Pin
  9996                           
  9997                           ;SwSpiApp.c: 24: }
  9998  00228C  D007               	goto	l556
  9999  00228E                     l552:
 10000                           
 10001                           ;SwSpiApp.c: 25: else if(phrType == EXT_DAC)
 10002  00228E  0E02               	movlw	2
 10003  002290  1829               	xorwf	SWSPI_send_word@phrType,w,c
 10004  002292  A4D8               	btfss	status,2,c
 10005  002294  D003               	goto	l556
 10006                           
 10007                           ;SwSpiApp.c: 26: {
 10008                           ;SwSpiApp.c: 27: SwSpi_Set_Dac_Sync_Pin(0);
 10009  002296  0E00               	movlw	0
 10010  002298  ECCB  F01A         	call	_SwSpi_Set_Dac_Sync_Pin
 10011  00229C                     l556:
 10012                           
 10013                           ;SwSpiApp.c: 28: }
 10014                           ;SwSpiApp.c: 30: for(int idx = dataSize + 1; idx > 0; idx--)
 10015  00229C  0E01               	movlw	1
 10016  00229E  2425               	addwf	SWSPI_send_word@dataSize,w,c
 10017  0022A0  6E27               	movwf	SWSPI_send_word@idx,c
 10018  0022A2  6A28               	clrf	SWSPI_send_word@idx+1,c
 10019  0022A4  0E00               	movlw	0
 10020  0022A6  2228               	addwfc	SWSPI_send_word@idx+1,f,c
 10021  0022A8                     l6946:
 10022  0022A8  BE28               	btfsc	SWSPI_send_word@idx+1,7,c
 10023  0022AA  D01B               	goto	u6650
 10024  0022AC  5028               	movf	SWSPI_send_word@idx+1,w,c
 10025  0022AE  E103               	bnz	l6950
 10026  0022B0  0427               	decf	SWSPI_send_word@idx,w,c
 10027  0022B2  A0D8               	btfss	status,0,c
 10028  0022B4  D016               	goto	u6650
 10029  0022B6                     l6950:
 10030                           
 10031                           ;SwSpiApp.c: 31: {
 10032                           ;SwSpiApp.c: 32: uint8_t datac = make8(data, idx - 1);
 10033  0022B6  C021  F018         	movff	SWSPI_send_word@data,make8@data
 10034  0022BA  C022  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 10035  0022BE  C023  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 10036  0022C2  C024  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 10037  0022C6  0427               	decf	SWSPI_send_word@idx,w,c
 10038  0022C8  6E1C               	movwf	make8@dataLocation,c
 10039  0022CA  EC17  F015         	call	_make8	;wreg free
 10040  0022CE  6E26               	movwf	SWSPI_send_word@datac,c
 10041                           
 10042                           ;SwSpiApp.c: 33: SWSPI_send_bits(phrType, datac);
 10043  0022D0  C026  F01B         	movff	SWSPI_send_word@datac,SWSPI_send_bits@data
 10044  0022D4  5029               	movf	SWSPI_send_word@phrType,w,c
 10045  0022D6  EC73  F015         	call	_SWSPI_send_bits
 10046  0022DA  0627               	decf	SWSPI_send_word@idx,f,c
 10047  0022DC  A0D8               	btfss	status,0,c
 10048  0022DE  0628               	decf	SWSPI_send_word@idx+1,f,c
 10049  0022E0  D7E3               	goto	l6946
 10050  0022E2                     u6650:
 10051                           
 10052                           ;SwSpiApp.c: 34: }
 10053                           ;SwSpiApp.c: 36: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 10054  0022E2  5029               	movf	SWSPI_send_word@phrType,w,c
 10055  0022E4  B4D8               	btfsc	status,2,c
 10056  0022E6  D003               	goto	u6670
 10057  0022E8  0429               	decf	SWSPI_send_word@phrType,w,c
 10058  0022EA  A4D8               	btfss	status,2,c
 10059  0022EC  D006               	goto	l559
 10060  0022EE                     u6670:
 10061                           
 10062                           ;SwSpiApp.c: 37: {
 10063                           ;SwSpiApp.c: 38: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 10064  0022EE  0E01               	movlw	1
 10065  0022F0  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 10066  0022F2  5029               	movf	SWSPI_send_word@phrType,w,c
 10067  0022F4  EC93  F018         	call	_SwSpi_Set_Synth_Le_Pin
 10068                           
 10069                           ;SwSpiApp.c: 39: }
 10070  0022F8  D00D               	goto	l563
 10071  0022FA                     l559:
 10072                           
 10073                           ;SwSpiApp.c: 40: else if(phrType == EXT_DAC)
 10074  0022FA  0E02               	movlw	2
 10075  0022FC  1829               	xorwf	SWSPI_send_word@phrType,w,c
 10076  0022FE  A4D8               	btfss	status,2,c
 10077  002300  D009               	goto	l563
 10078                           
 10079                           ;SwSpiApp.c: 41: {
 10080                           ;SwSpiApp.c: 42: SwSpi_Set_Dac_Sync_Pin(1);
 10081  002302  0E01               	movlw	1
 10082  002304  ECCB  F01A         	call	_SwSpi_Set_Dac_Sync_Pin
 10083                           
 10084                           ;SwSpiApp.c: 45: SwSpi_Set_Dac_Ldac_Pin(0);
 10085  002308  0E00               	movlw	0
 10086  00230A  ECD9  F01A         	call	_SwSpi_Set_Dac_Ldac_Pin
 10087                           
 10088                           ;SwSpiApp.c: 46: SwSpi_Set_Dac_Ldac_Pin(1);
 10089  00230E  0E01               	movlw	1
 10090  002310  ECD9  F01A         	call	_SwSpi_Set_Dac_Ldac_Pin
 10091  002314                     l563:
 10092                           
 10093                           ;SwSpiApp.c: 47: }
 10094                           ;SwSpiApp.c: 49: (INTCONbits.GIE = 1);
 10095  002314  8EF2               	bsf	intcon,7,c	;volatile
 10096  002316  0012               	return		;funcret
 10097  002318                     __end_of_SWSPI_send_word:
 10098                           	opt stack 0
 10099                           tosu	equ	0xFFF
 10100                           tosh	equ	0xFFE
 10101                           tosl	equ	0xFFD
 10102                           pclath	equ	0xFFA
 10103                           tblptru	equ	0xFF8
 10104                           tblptrh	equ	0xFF7
 10105                           tblptrl	equ	0xFF6
 10106                           tablat	equ	0xFF5
 10107                           prodh	equ	0xFF4
 10108                           prodl	equ	0xFF3
 10109                           intcon	equ	0xFF2
 10110                           intcon2	equ	0xFF1
 10111                           postinc0	equ	0xFEE
 10112                           wreg	equ	0xFE8
 10113                           indf1	equ	0xFE7
 10114                           postdec1	equ	0xFE5
 10115                           fsr1h	equ	0xFE2
 10116                           fsr1l	equ	0xFE1
 10117                           indf2	equ	0xFDF
 10118                           postinc2	equ	0xFDE
 10119                           postdec2	equ	0xFDD
 10120                           fsr2h	equ	0xFDA
 10121                           fsr2l	equ	0xFD9
 10122                           status	equ	0xFD8
 10123                           
 10124 ;; *************** function _make8 *****************
 10125 ;; Defined at:
 10126 ;;		line 62 in file "SystemCommon.c"
 10127 ;; Parameters:    Size  Location     Type
 10128 ;;  data            4   23[COMRAM] unsigned long 
 10129 ;;  dataLocation    1   27[COMRAM] unsigned char 
 10130 ;; Auto vars:     Size  Location     Type
 10131 ;;		None
 10132 ;; Return value:  Size  Location     Type
 10133 ;;                  1    wreg      unsigned char 
 10134 ;; Registers used:
 10135 ;;		wreg, status,2, status,0
 10136 ;; Tracked objects:
 10137 ;;		On entry : 0/0
 10138 ;;		On exit  : 0/0
 10139 ;;		Unchanged: 0/0
 10140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10141 ;;      Params:         5       0       0       0       0       0       0
 10142 ;;      Locals:         0       0       0       0       0       0       0
 10143 ;;      Temps:          4       0       0       0       0       0       0
 10144 ;;      Totals:         9       0       0       0       0       0       0
 10145 ;;Total ram usage:        9 bytes
 10146 ;; Hardware stack levels used:    1
 10147 ;; Hardware stack levels required when called:    3
 10148 ;; This function calls:
 10149 ;;		Nothing
 10150 ;; This function is called by:
 10151 ;;		_FlashReadCondition
 10152 ;;		_SWSPI_send_word
 10153 ;; This function uses a non-reentrant model
 10154 ;;
 10155                           
 10156                           	psect	text68
 10157  002A2E                     __ptext68:
 10158                           	opt stack 0
 10159  002A2E                     _make8:
 10160                           	opt stack 23
 10161                           
 10162                           ;SystemCommon.c: 64: switch(dataLocation)
 10163                           
 10164                           ;incstack = 0
 10165  002A2E  D01F               	goto	l1255
 10166  002A30                     
 10167                           ;SystemCommon.c: 67: return (data & 0x000000ff);
 10168  002A30  5018               	movf	make8@data,w,c
 10169  002A32  0012               	return	
 10170  002A34                     
 10171                           ;SystemCommon.c: 70: return (data & 0x0000ff00) >> 8;
 10172  002A34  5019               	movf	make8@data+1,w,c
 10173  002A36  0012               	return	
 10174  002A38                     
 10175                           ;SystemCommon.c: 73: return (data & 0x00ff0000) >> 16;
 10176  002A38  501A               	movf	make8@data+2,w,c
 10177  002A3A  0012               	return	
 10178  002A3C                     
 10179                           ;SystemCommon.c: 76: return (data & 0xff000000) >> 24;
 10180  002A3C  0E00               	movlw	0
 10181  002A3E  1418               	andwf	make8@data,w,c
 10182  002A40  6E1D               	movwf	??_make8& (0+255),c
 10183  002A42  0E00               	movlw	0
 10184  002A44  1419               	andwf	make8@data+1,w,c
 10185  002A46  6E1E               	movwf	(??_make8+1)& (0+255),c
 10186  002A48  0E00               	movlw	0
 10187  002A4A  141A               	andwf	make8@data+2,w,c
 10188  002A4C  6E1F               	movwf	(??_make8+2)& (0+255),c
 10189  002A4E  0EFF               	movlw	255
 10190  002A50  141B               	andwf	make8@data+3,w,c
 10191  002A52  6E20               	movwf	(??_make8+3)& (0+255),c
 10192  002A54  0E19               	movlw	25
 10193  002A56  D005               	goto	u6020
 10194  002A58                     u6025:
 10195  002A58  90D8               	bcf	status,0,c
 10196  002A5A  3220               	rrcf	??_make8+3,f,c
 10197  002A5C  321F               	rrcf	??_make8+2,f,c
 10198  002A5E  321E               	rrcf	??_make8+1,f,c
 10199  002A60  321D               	rrcf	??_make8,f,c
 10200  002A62                     u6020:
 10201  002A62  2EE8               	decfsz	wreg,f,c
 10202  002A64  D7F9               	goto	u6025
 10203  002A66  501D               	movf	??_make8,w,c
 10204  002A68  0012               	return	
 10205  002A6A                     
 10206                           ;SystemCommon.c: 79: return (0);
 10207  002A6A  0E00               	movlw	0
 10208                           
 10209                           ;SystemCommon.c: 80: }
 10210  002A6C  0012               	return	
 10211  002A6E                     l1255:
 10212  002A6E  501C               	movf	make8@dataLocation,w,c
 10213                           
 10214                           ; Switch size 1, requested type "space"
 10215                           ; Number of cases is 4, Range of values is 0 to 3
 10216                           ; switch strategies available:
 10217                           ; Name         Instructions Cycles
 10218                           ; simple_byte           13     7 (average)
 10219                           ;	Chosen strategy is simple_byte
 10220  002A70  0A00               	xorlw	0	; case 0
 10221  002A72  B4D8               	btfsc	status,2,c
 10222  002A74  D7DD               	goto	l1256
 10223  002A76  0A01               	xorlw	1	; case 1
 10224  002A78  B4D8               	btfsc	status,2,c
 10225  002A7A  D7DC               	goto	l1258
 10226  002A7C  0A03               	xorlw	3	; case 2
 10227  002A7E  B4D8               	btfsc	status,2,c
 10228  002A80  D7DB               	goto	l1259
 10229  002A82  0A01               	xorlw	1	; case 3
 10230  002A84  B4D8               	btfsc	status,2,c
 10231  002A86  D7DA               	goto	l1260
 10232  002A88  D7F0               	goto	l1261
 10233  002A8A                     __end_of_make8:
 10234                           	opt stack 0
 10235                           tosu	equ	0xFFF
 10236                           tosh	equ	0xFFE
 10237                           tosl	equ	0xFFD
 10238                           pclath	equ	0xFFA
 10239                           tblptru	equ	0xFF8
 10240                           tblptrh	equ	0xFF7
 10241                           tblptrl	equ	0xFF6
 10242                           tablat	equ	0xFF5
 10243                           prodh	equ	0xFF4
 10244                           prodl	equ	0xFF3
 10245                           intcon	equ	0xFF2
 10246                           intcon2	equ	0xFF1
 10247                           postinc0	equ	0xFEE
 10248                           wreg	equ	0xFE8
 10249                           indf1	equ	0xFE7
 10250                           postdec1	equ	0xFE5
 10251                           fsr1h	equ	0xFE2
 10252                           fsr1l	equ	0xFE1
 10253                           indf2	equ	0xFDF
 10254                           postinc2	equ	0xFDE
 10255                           postdec2	equ	0xFDD
 10256                           fsr2h	equ	0xFDA
 10257                           fsr2l	equ	0xFD9
 10258                           status	equ	0xFD8
 10259                           
 10260 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 10261 ;; Defined at:
 10262 ;;		line 202 in file "SwSpiApp.c"
 10263 ;; Parameters:    Size  Location     Type
 10264 ;;  phrType         1    wreg     enum E7534
 10265 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10266 ;; Auto vars:     Size  Location     Type
 10267 ;;  phrType         1   24[COMRAM] enum E7534
 10268 ;; Return value:  Size  Location     Type
 10269 ;;                  1    wreg      void 
 10270 ;; Registers used:
 10271 ;;		wreg, status,2, status,0
 10272 ;; Tracked objects:
 10273 ;;		On entry : 0/0
 10274 ;;		On exit  : 0/0
 10275 ;;		Unchanged: 0/0
 10276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10277 ;;      Params:         1       0       0       0       0       0       0
 10278 ;;      Locals:         1       0       0       0       0       0       0
 10279 ;;      Temps:          0       0       0       0       0       0       0
 10280 ;;      Totals:         2       0       0       0       0       0       0
 10281 ;;Total ram usage:        2 bytes
 10282 ;; Hardware stack levels used:    1
 10283 ;; Hardware stack levels required when called:    3
 10284 ;; This function calls:
 10285 ;;		Nothing
 10286 ;; This function is called by:
 10287 ;;		_SWSPI_send_word
 10288 ;; This function uses a non-reentrant model
 10289 ;;
 10290                           
 10291                           	psect	text69
 10292  003126                     __ptext69:
 10293                           	opt stack 0
 10294  003126                     _SwSpi_Set_Synth_Le_Pin:
 10295                           	opt stack 23
 10296                           
 10297                           ;incstack = 0
 10298                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 10299  003126  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 10300                           
 10301                           ;SwSpiApp.c: 204: switch(phrType)
 10302  003128  D014               	goto	l656
 10303  00312A                     
 10304                           ;SwSpiApp.c: 207: if(cPinMode == 1)
 10305  00312A  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10306  00312C  A4D8               	btfss	status,2,c
 10307  00312E  D002               	goto	l658
 10308                           
 10309                           ;SwSpiApp.c: 208: {
 10310                           ;SwSpiApp.c: 209: do { LATCbits.LATC2 = 1; } while(0);
 10311  003130  848B               	bsf	3979,2,c	;volatile
 10312                           
 10313                           ;SwSpiApp.c: 210: }
 10314  003132  0012               	return	
 10315  003134                     l658:
 10316                           
 10317                           ;SwSpiApp.c: 211: else if(cPinMode == 0)
 10318  003134  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10319  003136  A4D8               	btfss	status,2,c
 10320  003138  0012               	return	
 10321                           
 10322                           ;SwSpiApp.c: 212: {
 10323                           ;SwSpiApp.c: 213: do { LATCbits.LATC2 = 0; } while(0);
 10324  00313A  948B               	bcf	3979,2,c	;volatile
 10325                           
 10326                           ;SwSpiApp.c: 214: }
 10327                           ;SwSpiApp.c: 215: break;
 10328  00313C  0012               	return	
 10329  00313E                     
 10330                           ;SwSpiApp.c: 218: if(cPinMode == 1)
 10331  00313E  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10332  003140  A4D8               	btfss	status,2,c
 10333  003142  D002               	goto	l667
 10334                           
 10335                           ;SwSpiApp.c: 219: {
 10336                           ;SwSpiApp.c: 220: do { LATDbits.LATD3 = 1; } while(0);
 10337  003144  868C               	bsf	3980,3,c	;volatile
 10338                           
 10339                           ;SwSpiApp.c: 221: }
 10340  003146  0012               	return	
 10341  003148                     l667:
 10342                           
 10343                           ;SwSpiApp.c: 222: else if(cPinMode == 0)
 10344  003148  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 10345  00314A  A4D8               	btfss	status,2,c
 10346  00314C  0012               	return	
 10347                           
 10348                           ;SwSpiApp.c: 223: {
 10349                           ;SwSpiApp.c: 224: do { LATDbits.LATD3 = 0; } while(0);
 10350  00314E  968C               	bcf	3980,3,c	;volatile
 10351                           
 10352                           ;SwSpiApp.c: 227: }
 10353                           
 10354                           ;SwSpiApp.c: 225: }
 10355                           ;SwSpiApp.c: 226: break;
 10356  003150  0012               	return	
 10357  003152                     l656:
 10358  003152  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 10359                           
 10360                           ; Switch size 1, requested type "space"
 10361                           ; Number of cases is 2, Range of values is 0 to 1
 10362                           ; switch strategies available:
 10363                           ; Name         Instructions Cycles
 10364                           ; simple_byte            7     4 (average)
 10365                           ;	Chosen strategy is simple_byte
 10366  003154  0A00               	xorlw	0	; case 0
 10367  003156  B4D8               	btfsc	status,2,c
 10368  003158  D7E8               	goto	l657
 10369  00315A  0A01               	xorlw	1	; case 1
 10370  00315C  A4D8               	btfss	status,2,c
 10371  00315E  0012               	return	
 10372  003160  D7EE               	goto	l666
 10373  003162                     __end_of_SwSpi_Set_Synth_Le_Pin:
 10374                           	opt stack 0
 10375                           tosu	equ	0xFFF
 10376                           tosh	equ	0xFFE
 10377                           tosl	equ	0xFFD
 10378                           pclath	equ	0xFFA
 10379                           tblptru	equ	0xFF8
 10380                           tblptrh	equ	0xFF7
 10381                           tblptrl	equ	0xFF6
 10382                           tablat	equ	0xFF5
 10383                           prodh	equ	0xFF4
 10384                           prodl	equ	0xFF3
 10385                           intcon	equ	0xFF2
 10386                           intcon2	equ	0xFF1
 10387                           postinc0	equ	0xFEE
 10388                           wreg	equ	0xFE8
 10389                           indf1	equ	0xFE7
 10390                           postdec1	equ	0xFE5
 10391                           fsr1h	equ	0xFE2
 10392                           fsr1l	equ	0xFE1
 10393                           indf2	equ	0xFDF
 10394                           postinc2	equ	0xFDE
 10395                           postdec2	equ	0xFDD
 10396                           fsr2h	equ	0xFDA
 10397                           fsr2l	equ	0xFD9
 10398                           status	equ	0xFD8
 10399                           
 10400 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 10401 ;; Defined at:
 10402 ;;		line 230 in file "SwSpiApp.c"
 10403 ;; Parameters:    Size  Location     Type
 10404 ;;  cPinMode        1    wreg     unsigned char 
 10405 ;; Auto vars:     Size  Location     Type
 10406 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10407 ;; Return value:  Size  Location     Type
 10408 ;;                  1    wreg      void 
 10409 ;; Registers used:
 10410 ;;		wreg, status,2, status,0
 10411 ;; Tracked objects:
 10412 ;;		On entry : 0/0
 10413 ;;		On exit  : 0/0
 10414 ;;		Unchanged: 0/0
 10415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10416 ;;      Params:         0       0       0       0       0       0       0
 10417 ;;      Locals:         1       0       0       0       0       0       0
 10418 ;;      Temps:          0       0       0       0       0       0       0
 10419 ;;      Totals:         1       0       0       0       0       0       0
 10420 ;;Total ram usage:        1 bytes
 10421 ;; Hardware stack levels used:    1
 10422 ;; Hardware stack levels required when called:    3
 10423 ;; This function calls:
 10424 ;;		Nothing
 10425 ;; This function is called by:
 10426 ;;		_SWSPI_send_word
 10427 ;; This function uses a non-reentrant model
 10428 ;;
 10429                           
 10430                           	psect	text70
 10431  003596                     __ptext70:
 10432                           	opt stack 0
 10433  003596                     _SwSpi_Set_Dac_Sync_Pin:
 10434                           	opt stack 23
 10435                           
 10436                           ;incstack = 0
 10437                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 10438  003596  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 10439                           
 10440                           ;SwSpiApp.c: 232: switch(cPinMode)
 10441  003598  D004               	goto	l677
 10442  00359A                     
 10443                           ;SwSpiApp.c: 235: do { LATAbits.LATA2 = 0; } while(0);
 10444  00359A  9489               	bcf	3977,2,c	;volatile
 10445                           
 10446                           ;SwSpiApp.c: 236: break;
 10447  00359C  0012               	return	
 10448  00359E                     
 10449                           ;SwSpiApp.c: 239: do { LATAbits.LATA2 = 1; } while(0);
 10450  00359E  8489               	bsf	3977,2,c	;volatile
 10451                           
 10452                           ;SwSpiApp.c: 241: }
 10453                           
 10454                           ;SwSpiApp.c: 240: break;
 10455  0035A0  0012               	return	
 10456  0035A2                     l677:
 10457  0035A2  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 10458                           
 10459                           ; Switch size 1, requested type "space"
 10460                           ; Number of cases is 2, Range of values is 0 to 1
 10461                           ; switch strategies available:
 10462                           ; Name         Instructions Cycles
 10463                           ; simple_byte            7     4 (average)
 10464                           ;	Chosen strategy is simple_byte
 10465  0035A4  0A00               	xorlw	0	; case 0
 10466  0035A6  B4D8               	btfsc	status,2,c
 10467  0035A8  D7F8               	goto	l678
 10468  0035AA  0A01               	xorlw	1	; case 1
 10469  0035AC  A4D8               	btfss	status,2,c
 10470  0035AE  0012               	return	
 10471  0035B0  D7F6               	goto	l682
 10472  0035B2                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 10473                           	opt stack 0
 10474                           tosu	equ	0xFFF
 10475                           tosh	equ	0xFFE
 10476                           tosl	equ	0xFFD
 10477                           pclath	equ	0xFFA
 10478                           tblptru	equ	0xFF8
 10479                           tblptrh	equ	0xFF7
 10480                           tblptrl	equ	0xFF6
 10481                           tablat	equ	0xFF5
 10482                           prodh	equ	0xFF4
 10483                           prodl	equ	0xFF3
 10484                           intcon	equ	0xFF2
 10485                           intcon2	equ	0xFF1
 10486                           postinc0	equ	0xFEE
 10487                           wreg	equ	0xFE8
 10488                           indf1	equ	0xFE7
 10489                           postdec1	equ	0xFE5
 10490                           fsr1h	equ	0xFE2
 10491                           fsr1l	equ	0xFE1
 10492                           indf2	equ	0xFDF
 10493                           postinc2	equ	0xFDE
 10494                           postdec2	equ	0xFDD
 10495                           fsr2h	equ	0xFDA
 10496                           fsr2l	equ	0xFD9
 10497                           status	equ	0xFD8
 10498                           
 10499 ;; *************** function _SwSpi_Set_Dac_Ldac_Pin *****************
 10500 ;; Defined at:
 10501 ;;		line 244 in file "SwSpiApp.c"
 10502 ;; Parameters:    Size  Location     Type
 10503 ;;  cPinMode        1    wreg     unsigned char 
 10504 ;; Auto vars:     Size  Location     Type
 10505 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10506 ;; Return value:  Size  Location     Type
 10507 ;;                  1    wreg      void 
 10508 ;; Registers used:
 10509 ;;		wreg, status,2, status,0
 10510 ;; Tracked objects:
 10511 ;;		On entry : 0/0
 10512 ;;		On exit  : 0/0
 10513 ;;		Unchanged: 0/0
 10514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10515 ;;      Params:         0       0       0       0       0       0       0
 10516 ;;      Locals:         1       0       0       0       0       0       0
 10517 ;;      Temps:          0       0       0       0       0       0       0
 10518 ;;      Totals:         1       0       0       0       0       0       0
 10519 ;;Total ram usage:        1 bytes
 10520 ;; Hardware stack levels used:    1
 10521 ;; Hardware stack levels required when called:    3
 10522 ;; This function calls:
 10523 ;;		Nothing
 10524 ;; This function is called by:
 10525 ;;		_SWSPI_send_word
 10526 ;; This function uses a non-reentrant model
 10527 ;;
 10528                           
 10529                           	psect	text71
 10530  0035B2                     __ptext71:
 10531                           	opt stack 0
 10532  0035B2                     _SwSpi_Set_Dac_Ldac_Pin:
 10533                           	opt stack 23
 10534                           
 10535                           ;incstack = 0
 10536                           ;SwSpi_Set_Dac_Ldac_Pin@cPinMode stored from wreg
 10537  0035B2  6E18               	movwf	SwSpi_Set_Dac_Ldac_Pin@cPinMode,c
 10538                           
 10539                           ;SwSpiApp.c: 246: switch(cPinMode)
 10540  0035B4  D004               	goto	l688
 10541  0035B6                     
 10542                           ;SwSpiApp.c: 249: do { LATAbits.LATA1 = 0; } while(0);
 10543  0035B6  9289               	bcf	3977,1,c	;volatile
 10544                           
 10545                           ;SwSpiApp.c: 250: break;
 10546  0035B8  0012               	return	
 10547  0035BA                     
 10548                           ;SwSpiApp.c: 253: do { LATAbits.LATA1 = 1; } while(0);
 10549  0035BA  8289               	bsf	3977,1,c	;volatile
 10550                           
 10551                           ;SwSpiApp.c: 255: }
 10552                           
 10553                           ;SwSpiApp.c: 254: break;
 10554  0035BC  0012               	return	
 10555  0035BE                     l688:
 10556  0035BE  5018               	movf	SwSpi_Set_Dac_Ldac_Pin@cPinMode,w,c
 10557                           
 10558                           ; Switch size 1, requested type "space"
 10559                           ; Number of cases is 2, Range of values is 0 to 1
 10560                           ; switch strategies available:
 10561                           ; Name         Instructions Cycles
 10562                           ; simple_byte            7     4 (average)
 10563                           ;	Chosen strategy is simple_byte
 10564  0035C0  0A00               	xorlw	0	; case 0
 10565  0035C2  B4D8               	btfsc	status,2,c
 10566  0035C4  D7F8               	goto	l689
 10567  0035C6  0A01               	xorlw	1	; case 1
 10568  0035C8  A4D8               	btfss	status,2,c
 10569  0035CA  0012               	return	
 10570  0035CC  D7F6               	goto	l693
 10571  0035CE                     __end_of_SwSpi_Set_Dac_Ldac_Pin:
 10572                           	opt stack 0
 10573                           tosu	equ	0xFFF
 10574                           tosh	equ	0xFFE
 10575                           tosl	equ	0xFFD
 10576                           pclath	equ	0xFFA
 10577                           tblptru	equ	0xFF8
 10578                           tblptrh	equ	0xFF7
 10579                           tblptrl	equ	0xFF6
 10580                           tablat	equ	0xFF5
 10581                           prodh	equ	0xFF4
 10582                           prodl	equ	0xFF3
 10583                           intcon	equ	0xFF2
 10584                           intcon2	equ	0xFF1
 10585                           postinc0	equ	0xFEE
 10586                           wreg	equ	0xFE8
 10587                           indf1	equ	0xFE7
 10588                           postdec1	equ	0xFE5
 10589                           fsr1h	equ	0xFE2
 10590                           fsr1l	equ	0xFE1
 10591                           indf2	equ	0xFDF
 10592                           postinc2	equ	0xFDE
 10593                           postdec2	equ	0xFDD
 10594                           fsr2h	equ	0xFDA
 10595                           fsr2l	equ	0xFD9
 10596                           status	equ	0xFD8
 10597                           
 10598 ;; *************** function _SWSPI_send_bits *****************
 10599 ;; Defined at:
 10600 ;;		line 52 in file "SwSpiApp.c"
 10601 ;; Parameters:    Size  Location     Type
 10602 ;;  phrType         1    wreg     enum E7534
 10603 ;;  data            1   26[COMRAM] unsigned char 
 10604 ;; Auto vars:     Size  Location     Type
 10605 ;;  phrType         1   28[COMRAM] enum E7534
 10606 ;;  count           1   27[COMRAM] unsigned char 
 10607 ;; Return value:  Size  Location     Type
 10608 ;;                  1    wreg      void 
 10609 ;; Registers used:
 10610 ;;		wreg, status,2, status,0, cstack
 10611 ;; Tracked objects:
 10612 ;;		On entry : 0/0
 10613 ;;		On exit  : 0/0
 10614 ;;		Unchanged: 0/0
 10615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10616 ;;      Params:         1       0       0       0       0       0       0
 10617 ;;      Locals:         2       0       0       0       0       0       0
 10618 ;;      Temps:          0       0       0       0       0       0       0
 10619 ;;      Totals:         3       0       0       0       0       0       0
 10620 ;;Total ram usage:        3 bytes
 10621 ;; Hardware stack levels used:    1
 10622 ;; Hardware stack levels required when called:    5
 10623 ;; This function calls:
 10624 ;;		_SwSpi_Clk_Pin
 10625 ;;		_SwSpi_Data_Pin
 10626 ;;		_SwSpi_Set_Clock
 10627 ;; This function is called by:
 10628 ;;		_SWSPI_send_word
 10629 ;; This function uses a non-reentrant model
 10630 ;;
 10631                           
 10632                           	psect	text72
 10633  002AE6                     __ptext72:
 10634                           	opt stack 0
 10635  002AE6                     _SWSPI_send_bits:
 10636                           	opt stack 21
 10637                           
 10638                           ;incstack = 0
 10639                           ;SWSPI_send_bits@phrType stored from wreg
 10640  002AE6  6E1D               	movwf	SWSPI_send_bits@phrType,c
 10641                           
 10642                           ;SwSpiApp.c: 54: uint8_t count;
 10643                           ;SwSpiApp.c: 55: for (count = 8; count ; count--, data <<= 1)
 10644  002AE8  0E08               	movlw	8
 10645  002AEA  6E1C               	movwf	SWSPI_send_bits@count,c
 10646  002AEC  D01B               	goto	l567
 10647  002AEE                     l568:
 10648                           
 10649                           ;SwSpiApp.c: 56: {
 10650                           ;SwSpiApp.c: 57: if (data & 0X80)
 10651  002AEE  AE1B               	btfss	SWSPI_send_bits@data,7,c
 10652  002AF0  D006               	goto	l569
 10653                           
 10654                           ;SwSpiApp.c: 58: {
 10655                           ;SwSpiApp.c: 59: SwSpi_Data_Pin(phrType, 1);
 10656  002AF2  0E01               	movlw	1
 10657  002AF4  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 10658  002AF6  501D               	movf	SWSPI_send_bits@phrType,w,c
 10659  002AF8  EC23  F016         	call	_SwSpi_Data_Pin
 10660                           
 10661                           ;SwSpiApp.c: 60: }
 10662  002AFC  D005               	goto	l570
 10663  002AFE                     l569:
 10664                           
 10665                           ;SwSpiApp.c: 61: else
 10666                           ;SwSpiApp.c: 62: {
 10667                           ;SwSpiApp.c: 63: SwSpi_Data_Pin(phrType, 0);
 10668  002AFE  0E00               	movlw	0
 10669  002B00  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 10670  002B02  501D               	movf	SWSPI_send_bits@phrType,w,c
 10671  002B04  EC23  F016         	call	_SwSpi_Data_Pin
 10672  002B08                     l570:
 10673                           
 10674                           ;SwSpiApp.c: 64: }
 10675                           ;SwSpiApp.c: 66: _delay((unsigned long)((10)*(8000000/4000000.0)));
 10676  002B08  0E06               	movlw	6
 10677  002B0A                     u7937:
 10678  002B0A  2EE8               	decfsz	wreg,f,c
 10679  002B0C  D7FE               	bra	u7937
 10680  002B0E  D000               	nop2	
 10681                           
 10682                           ;SwSpiApp.c: 67: SwSpi_Set_Clock(phrType);
 10683  002B10  501D               	movf	SWSPI_send_bits@phrType,w,c
 10684  002B12  ECCC  F015         	call	_SwSpi_Set_Clock
 10685                           
 10686                           ;SwSpiApp.c: 68: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10687  002B16  0E10               	movlw	16
 10688  002B18                     u7947:
 10689  002B18  2EE8               	decfsz	wreg,f,c
 10690  002B1A  D7FE               	bra	u7947
 10691  002B1C  D000               	nop2	
 10692  002B1E  061C               	decf	SWSPI_send_bits@count,f,c
 10693  002B20  90D8               	bcf	status,0,c
 10694  002B22  361B               	rlcf	SWSPI_send_bits@data,f,c
 10695  002B24                     l567:
 10696  002B24  501C               	movf	SWSPI_send_bits@count,w,c
 10697  002B26  A4D8               	btfss	status,2,c
 10698  002B28  D7E2               	goto	l568
 10699                           
 10700                           ;SwSpiApp.c: 69: }
 10701                           ;SwSpiApp.c: 70: SwSpi_Data_Pin(phrType, 0);
 10702  002B2A  0E00               	movlw	0
 10703  002B2C  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 10704  002B2E  501D               	movf	SWSPI_send_bits@phrType,w,c
 10705  002B30  EC23  F016         	call	_SwSpi_Data_Pin
 10706                           
 10707                           ;SwSpiApp.c: 71: SwSpi_Clk_Pin(phrType, 0);
 10708  002B34  0E00               	movlw	0
 10709  002B36  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10710  002B38  501D               	movf	SWSPI_send_bits@phrType,w,c
 10711  002B3A  EC1A  F018         	call	_SwSpi_Clk_Pin
 10712  002B3E  0012               	return		;funcret
 10713  002B40                     __end_of_SWSPI_send_bits:
 10714                           	opt stack 0
 10715                           tosu	equ	0xFFF
 10716                           tosh	equ	0xFFE
 10717                           tosl	equ	0xFFD
 10718                           pclath	equ	0xFFA
 10719                           tblptru	equ	0xFF8
 10720                           tblptrh	equ	0xFF7
 10721                           tblptrl	equ	0xFF6
 10722                           tablat	equ	0xFF5
 10723                           prodh	equ	0xFF4
 10724                           prodl	equ	0xFF3
 10725                           intcon	equ	0xFF2
 10726                           intcon2	equ	0xFF1
 10727                           postinc0	equ	0xFEE
 10728                           wreg	equ	0xFE8
 10729                           indf1	equ	0xFE7
 10730                           postdec1	equ	0xFE5
 10731                           fsr1h	equ	0xFE2
 10732                           fsr1l	equ	0xFE1
 10733                           indf2	equ	0xFDF
 10734                           postinc2	equ	0xFDE
 10735                           postdec2	equ	0xFDD
 10736                           fsr2h	equ	0xFDA
 10737                           fsr2l	equ	0xFD9
 10738                           status	equ	0xFD8
 10739                           
 10740 ;; *************** function _SwSpi_Set_Clock *****************
 10741 ;; Defined at:
 10742 ;;		line 149 in file "SwSpiApp.c"
 10743 ;; Parameters:    Size  Location     Type
 10744 ;;  phrType         1    wreg     enum E7534
 10745 ;; Auto vars:     Size  Location     Type
 10746 ;;  phrType         1   25[COMRAM] enum E7534
 10747 ;; Return value:  Size  Location     Type
 10748 ;;                  1    wreg      void 
 10749 ;; Registers used:
 10750 ;;		wreg, status,2, status,0, cstack
 10751 ;; Tracked objects:
 10752 ;;		On entry : 0/0
 10753 ;;		On exit  : 0/0
 10754 ;;		Unchanged: 0/0
 10755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10756 ;;      Params:         0       0       0       0       0       0       0
 10757 ;;      Locals:         1       0       0       0       0       0       0
 10758 ;;      Temps:          0       0       0       0       0       0       0
 10759 ;;      Totals:         1       0       0       0       0       0       0
 10760 ;;Total ram usage:        1 bytes
 10761 ;; Hardware stack levels used:    1
 10762 ;; Hardware stack levels required when called:    4
 10763 ;; This function calls:
 10764 ;;		_SwSpi_Clk_Pin
 10765 ;; This function is called by:
 10766 ;;		_SWSPI_send_bits
 10767 ;; This function uses a non-reentrant model
 10768 ;;
 10769                           
 10770                           	psect	text73
 10771  002B98                     __ptext73:
 10772                           	opt stack 0
 10773  002B98                     _SwSpi_Set_Clock:
 10774                           	opt stack 21
 10775                           
 10776                           ;incstack = 0
 10777                           ;SwSpi_Set_Clock@phrType stored from wreg
 10778  002B98  6E1A               	movwf	SwSpi_Set_Clock@phrType,c
 10779                           
 10780                           ;SwSpiApp.c: 151: SwSpi_Clk_Pin(phrType, 1);
 10781  002B9A  0E01               	movlw	1
 10782  002B9C  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10783  002B9E  501A               	movf	SwSpi_Set_Clock@phrType,w,c
 10784  002BA0  EC1A  F018         	call	_SwSpi_Clk_Pin
 10785                           
 10786                           ;SwSpiApp.c: 153: switch(phrType)
 10787  002BA4  D014               	goto	l626
 10788  002BA6                     
 10789                           ;SwSpiApp.c: 156: _delay((unsigned long)((500)*(8000000/4000000.0)));
 10790  002BA6  0EC8               	movlw	200
 10791  002BA8                     u7957:
 10792  002BA8  D000               	nop2	
 10793  002BAA  2EE8               	decfsz	wreg,f,c
 10794  002BAC  D7FD               	bra	u7957
 10795                           
 10796                           ;SwSpiApp.c: 157: break;
 10797  002BAE  D01A               	goto	l628
 10798  002BB0                     
 10799                           ;SwSpiApp.c: 159: _delay((unsigned long)((500)*(8000000/4000000.0)));
 10800  002BB0  0EC8               	movlw	200
 10801  002BB2                     u7967:
 10802  002BB2  D000               	nop2	
 10803  002BB4  2EE8               	decfsz	wreg,f,c
 10804  002BB6  D7FD               	bra	u7967
 10805                           
 10806                           ;SwSpiApp.c: 160: break;
 10807  002BB8  D015               	goto	l628
 10808  002BBA                     
 10809                           ;SwSpiApp.c: 162: _delay((unsigned long)((500)*(8000000/4000000.0)));
 10810  002BBA  0EC8               	movlw	200
 10811  002BBC                     u7977:
 10812  002BBC  D000               	nop2	
 10813  002BBE  2EE8               	decfsz	wreg,f,c
 10814  002BC0  D7FD               	bra	u7977
 10815                           
 10816                           ;SwSpiApp.c: 163: break;
 10817  002BC2  D010               	goto	l628
 10818  002BC4                     
 10819                           ;SwSpiApp.c: 165: _delay((unsigned long)((500)*(8000000/4000000.0)));
 10820  002BC4  0EC8               	movlw	200
 10821  002BC6                     u7987:
 10822  002BC6  D000               	nop2	
 10823  002BC8  2EE8               	decfsz	wreg,f,c
 10824  002BCA  D7FD               	bra	u7987
 10825                           
 10826                           ;SwSpiApp.c: 166: }
 10827  002BCC  D00B               	goto	l628
 10828  002BCE                     l626:
 10829  002BCE  501A               	movf	SwSpi_Set_Clock@phrType,w,c
 10830                           
 10831                           ; Switch size 1, requested type "space"
 10832                           ; Number of cases is 3, Range of values is 0 to 2
 10833                           ; switch strategies available:
 10834                           ; Name         Instructions Cycles
 10835                           ; simple_byte           10     6 (average)
 10836                           ;	Chosen strategy is simple_byte
 10837  002BD0  0A00               	xorlw	0	; case 0
 10838  002BD2  B4D8               	btfsc	status,2,c
 10839  002BD4  D7E8               	goto	l627
 10840  002BD6  0A01               	xorlw	1	; case 1
 10841  002BD8  B4D8               	btfsc	status,2,c
 10842  002BDA  D7EA               	goto	l629
 10843  002BDC  0A03               	xorlw	3	; case 2
 10844  002BDE  B4D8               	btfsc	status,2,c
 10845  002BE0  D7EC               	goto	l630
 10846  002BE2  D7F0               	goto	l631
 10847  002BE4                     l628:
 10848                           
 10849                           ;SwSpiApp.c: 168: SwSpi_Clk_Pin(phrType, 0);
 10850  002BE4  0E00               	movlw	0
 10851  002BE6  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 10852  002BE8  501A               	movf	SwSpi_Set_Clock@phrType,w,c
 10853  002BEA  EC1A  F018         	call	_SwSpi_Clk_Pin
 10854  002BEE  0012               	return		;funcret
 10855  002BF0                     __end_of_SwSpi_Set_Clock:
 10856                           	opt stack 0
 10857                           tosu	equ	0xFFF
 10858                           tosh	equ	0xFFE
 10859                           tosl	equ	0xFFD
 10860                           pclath	equ	0xFFA
 10861                           tblptru	equ	0xFF8
 10862                           tblptrh	equ	0xFF7
 10863                           tblptrl	equ	0xFF6
 10864                           tablat	equ	0xFF5
 10865                           prodh	equ	0xFF4
 10866                           prodl	equ	0xFF3
 10867                           intcon	equ	0xFF2
 10868                           intcon2	equ	0xFF1
 10869                           postinc0	equ	0xFEE
 10870                           wreg	equ	0xFE8
 10871                           indf1	equ	0xFE7
 10872                           postdec1	equ	0xFE5
 10873                           fsr1h	equ	0xFE2
 10874                           fsr1l	equ	0xFE1
 10875                           indf2	equ	0xFDF
 10876                           postinc2	equ	0xFDE
 10877                           postdec2	equ	0xFDD
 10878                           fsr2h	equ	0xFDA
 10879                           fsr2l	equ	0xFD9
 10880                           status	equ	0xFD8
 10881                           
 10882 ;; *************** function _SwSpi_Clk_Pin *****************
 10883 ;; Defined at:
 10884 ;;		line 117 in file "SwSpiApp.c"
 10885 ;; Parameters:    Size  Location     Type
 10886 ;;  phrType         1    wreg     enum E7534
 10887 ;;  cPinMode        1   23[COMRAM] unsigned char 
 10888 ;; Auto vars:     Size  Location     Type
 10889 ;;  phrType         1   24[COMRAM] enum E7534
 10890 ;; Return value:  Size  Location     Type
 10891 ;;                  1    wreg      void 
 10892 ;; Registers used:
 10893 ;;		wreg, status,2, status,0
 10894 ;; Tracked objects:
 10895 ;;		On entry : 0/0
 10896 ;;		On exit  : 0/0
 10897 ;;		Unchanged: 0/0
 10898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10899 ;;      Params:         1       0       0       0       0       0       0
 10900 ;;      Locals:         1       0       0       0       0       0       0
 10901 ;;      Temps:          0       0       0       0       0       0       0
 10902 ;;      Totals:         2       0       0       0       0       0       0
 10903 ;;Total ram usage:        2 bytes
 10904 ;; Hardware stack levels used:    1
 10905 ;; Hardware stack levels required when called:    3
 10906 ;; This function calls:
 10907 ;;		Nothing
 10908 ;; This function is called by:
 10909 ;;		_SWSPI_send_bits
 10910 ;;		_SwSpi_Set_Clock
 10911 ;; This function uses a non-reentrant model
 10912 ;;
 10913                           
 10914                           	psect	text74
 10915  003034                     __ptext74:
 10916                           	opt stack 0
 10917  003034                     _SwSpi_Clk_Pin:
 10918                           	opt stack 21
 10919                           
 10920                           ;incstack = 0
 10921                           ;SwSpi_Clk_Pin@phrType stored from wreg
 10922  003034  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 10923                           
 10924                           ;SwSpiApp.c: 119: switch(phrType)
 10925  003036  D014               	goto	l604
 10926  003038                     
 10927                           ;SwSpiApp.c: 122: if(cPinMode == 1)
 10928  003038  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 10929  00303A  A4D8               	btfss	status,2,c
 10930  00303C  D002               	goto	l606
 10931                           
 10932                           ;SwSpiApp.c: 123: {
 10933                           ;SwSpiApp.c: 124: do { LATCbits.LATC3 = 1; } while(0);
 10934  00303E  868B               	bsf	3979,3,c	;volatile
 10935                           
 10936                           ;SwSpiApp.c: 125: }
 10937  003040  0012               	return	
 10938  003042                     l606:
 10939                           
 10940                           ;SwSpiApp.c: 126: else if (cPinMode == 0)
 10941  003042  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 10942  003044  A4D8               	btfss	status,2,c
 10943  003046  0012               	return	
 10944                           
 10945                           ;SwSpiApp.c: 127: {
 10946                           ;SwSpiApp.c: 128: do { LATCbits.LATC3 = 0; } while(0);
 10947  003048  968B               	bcf	3979,3,c	;volatile
 10948                           
 10949                           ;SwSpiApp.c: 129: }
 10950                           ;SwSpiApp.c: 130: break;
 10951  00304A  0012               	return	
 10952  00304C                     
 10953                           ;SwSpiApp.c: 133: if(cPinMode == 1)
 10954  00304C  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 10955  00304E  A4D8               	btfss	status,2,c
 10956  003050  D002               	goto	l615
 10957                           
 10958                           ;SwSpiApp.c: 134: {
 10959                           ;SwSpiApp.c: 135: do { LATCbits.LATC4 = 1; } while(0);
 10960  003052  888B               	bsf	3979,4,c	;volatile
 10961                           
 10962                           ;SwSpiApp.c: 136: }
 10963  003054  0012               	return	
 10964  003056                     l615:
 10965                           
 10966                           ;SwSpiApp.c: 137: else if (cPinMode == 0)
 10967  003056  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 10968  003058  A4D8               	btfss	status,2,c
 10969  00305A  0012               	return	
 10970                           
 10971                           ;SwSpiApp.c: 138: {
 10972                           ;SwSpiApp.c: 139: do { LATCbits.LATC4 = 0; } while(0);
 10973  00305C  988B               	bcf	3979,4,c	;volatile
 10974                           
 10975                           ;SwSpiApp.c: 146: }
 10976                           
 10977                           ;SwSpiApp.c: 145: break;
 10978                           
 10979                           ;SwSpiApp.c: 144: case EXT_DAC:
 10980                           
 10981                           ;SwSpiApp.c: 140: }
 10982                           ;SwSpiApp.c: 142: break;
 10983  00305E  0012               	return	
 10984  003060                     l604:
 10985  003060  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 10986                           
 10987                           ; Switch size 1, requested type "space"
 10988                           ; Number of cases is 3, Range of values is 0 to 2
 10989                           ; switch strategies available:
 10990                           ; Name         Instructions Cycles
 10991                           ; simple_byte           10     6 (average)
 10992                           ;	Chosen strategy is simple_byte
 10993  003062  0A00               	xorlw	0	; case 0
 10994  003064  B4D8               	btfsc	status,2,c
 10995  003066  D7E8               	goto	l605
 10996  003068  0A01               	xorlw	1	; case 1
 10997  00306A  B4D8               	btfsc	status,2,c
 10998  00306C  D7EF               	goto	l614
 10999  00306E  0A03               	xorlw	3	; case 2
 11000  003070  0012               	return	
 11001  003072                     __end_of_SwSpi_Clk_Pin:
 11002                           	opt stack 0
 11003                           tosu	equ	0xFFF
 11004                           tosh	equ	0xFFE
 11005                           tosl	equ	0xFFD
 11006                           pclath	equ	0xFFA
 11007                           tblptru	equ	0xFF8
 11008                           tblptrh	equ	0xFF7
 11009                           tblptrl	equ	0xFF6
 11010                           tablat	equ	0xFF5
 11011                           prodh	equ	0xFF4
 11012                           prodl	equ	0xFF3
 11013                           intcon	equ	0xFF2
 11014                           intcon2	equ	0xFF1
 11015                           postinc0	equ	0xFEE
 11016                           wreg	equ	0xFE8
 11017                           indf1	equ	0xFE7
 11018                           postdec1	equ	0xFE5
 11019                           fsr1h	equ	0xFE2
 11020                           fsr1l	equ	0xFE1
 11021                           indf2	equ	0xFDF
 11022                           postinc2	equ	0xFDE
 11023                           postdec2	equ	0xFDD
 11024                           fsr2h	equ	0xFDA
 11025                           fsr2l	equ	0xFD9
 11026                           status	equ	0xFD8
 11027                           
 11028 ;; *************** function _SwSpi_Data_Pin *****************
 11029 ;; Defined at:
 11030 ;;		line 78 in file "SwSpiApp.c"
 11031 ;; Parameters:    Size  Location     Type
 11032 ;;  phrType         1    wreg     enum E7534
 11033 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11034 ;; Auto vars:     Size  Location     Type
 11035 ;;  phrType         1   24[COMRAM] enum E7534
 11036 ;; Return value:  Size  Location     Type
 11037 ;;                  1    wreg      void 
 11038 ;; Registers used:
 11039 ;;		wreg, status,2, status,0
 11040 ;; Tracked objects:
 11041 ;;		On entry : 0/0
 11042 ;;		On exit  : 0/0
 11043 ;;		Unchanged: 0/0
 11044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11045 ;;      Params:         1       0       0       0       0       0       0
 11046 ;;      Locals:         1       0       0       0       0       0       0
 11047 ;;      Temps:          0       0       0       0       0       0       0
 11048 ;;      Totals:         2       0       0       0       0       0       0
 11049 ;;Total ram usage:        2 bytes
 11050 ;; Hardware stack levels used:    1
 11051 ;; Hardware stack levels required when called:    3
 11052 ;; This function calls:
 11053 ;;		Nothing
 11054 ;; This function is called by:
 11055 ;;		_SWSPI_send_bits
 11056 ;; This function uses a non-reentrant model
 11057 ;;
 11058                           
 11059                           	psect	text75
 11060  002C46                     __ptext75:
 11061                           	opt stack 0
 11062  002C46                     _SwSpi_Data_Pin:
 11063                           	opt stack 22
 11064                           
 11065                           ;incstack = 0
 11066                           ;SwSpi_Data_Pin@phrType stored from wreg
 11067  002C46  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 11068                           
 11069                           ;SwSpiApp.c: 80: switch(phrType)
 11070  002C48  D01E               	goto	l575
 11071  002C4A                     
 11072                           ;SwSpiApp.c: 83: if(cPinMode == 1)
 11073  002C4A  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11074  002C4C  A4D8               	btfss	status,2,c
 11075  002C4E  D002               	goto	l577
 11076                           
 11077                           ;SwSpiApp.c: 84: {
 11078                           ;SwSpiApp.c: 85: do { LATDbits.LATD0 = 1; } while(0);
 11079  002C50  808C               	bsf	3980,0,c	;volatile
 11080                           
 11081                           ;SwSpiApp.c: 86: }
 11082  002C52  0012               	return	
 11083  002C54                     l577:
 11084                           
 11085                           ;SwSpiApp.c: 87: else if (cPinMode == 0)
 11086  002C54  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11087  002C56  A4D8               	btfss	status,2,c
 11088  002C58  0012               	return	
 11089                           
 11090                           ;SwSpiApp.c: 88: {
 11091                           ;SwSpiApp.c: 89: do { LATDbits.LATD0 = 0; } while(0);
 11092  002C5A  908C               	bcf	3980,0,c	;volatile
 11093                           
 11094                           ;SwSpiApp.c: 90: }
 11095                           ;SwSpiApp.c: 91: break;
 11096  002C5C  0012               	return	
 11097  002C5E                     
 11098                           ;SwSpiApp.c: 94: if(cPinMode == 1)
 11099  002C5E  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11100  002C60  A4D8               	btfss	status,2,c
 11101  002C62  D002               	goto	l586
 11102                           
 11103                           ;SwSpiApp.c: 95: {
 11104                           ;SwSpiApp.c: 96: do { LATCbits.LATC5 = 1; } while(0);
 11105  002C64  8A8B               	bsf	3979,5,c	;volatile
 11106                           
 11107                           ;SwSpiApp.c: 97: }
 11108  002C66  0012               	return	
 11109  002C68                     l586:
 11110                           
 11111                           ;SwSpiApp.c: 98: else if (cPinMode == 0)
 11112  002C68  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11113  002C6A  A4D8               	btfss	status,2,c
 11114  002C6C  0012               	return	
 11115                           
 11116                           ;SwSpiApp.c: 99: {
 11117                           ;SwSpiApp.c: 100: do { LATCbits.LATC5 = 0; } while(0);
 11118  002C6E  9A8B               	bcf	3979,5,c	;volatile
 11119                           
 11120                           ;SwSpiApp.c: 101: }
 11121                           ;SwSpiApp.c: 102: break;
 11122  002C70  0012               	return	
 11123  002C72                     
 11124                           ;SwSpiApp.c: 105: if(cPinMode == 1)
 11125  002C72  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 11126  002C74  A4D8               	btfss	status,2,c
 11127  002C76  D002               	goto	l594
 11128                           
 11129                           ;SwSpiApp.c: 106: {
 11130                           ;SwSpiApp.c: 107: do { LATAbits.LATA4 = 1; } while(0);
 11131  002C78  8889               	bsf	3977,4,c	;volatile
 11132                           
 11133                           ;SwSpiApp.c: 108: }
 11134  002C7A  0012               	return	
 11135  002C7C                     l594:
 11136                           
 11137                           ;SwSpiApp.c: 109: else if (cPinMode == 0)
 11138  002C7C  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 11139  002C7E  A4D8               	btfss	status,2,c
 11140  002C80  0012               	return	
 11141                           
 11142                           ;SwSpiApp.c: 110: {
 11143                           ;SwSpiApp.c: 111: do { LATAbits.LATA4 = 0; } while(0);
 11144  002C82  9889               	bcf	3977,4,c	;volatile
 11145                           
 11146                           ;SwSpiApp.c: 114: }
 11147                           
 11148                           ;SwSpiApp.c: 112: }
 11149                           ;SwSpiApp.c: 113: break;
 11150  002C84  0012               	return	
 11151  002C86                     l575:
 11152  002C86  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 11153                           
 11154                           ; Switch size 1, requested type "space"
 11155                           ; Number of cases is 3, Range of values is 0 to 2
 11156                           ; switch strategies available:
 11157                           ; Name         Instructions Cycles
 11158                           ; simple_byte           10     6 (average)
 11159                           ;	Chosen strategy is simple_byte
 11160  002C88  0A00               	xorlw	0	; case 0
 11161  002C8A  B4D8               	btfsc	status,2,c
 11162  002C8C  D7DE               	goto	l576
 11163  002C8E  0A01               	xorlw	1	; case 1
 11164  002C90  B4D8               	btfsc	status,2,c
 11165  002C92  D7E5               	goto	l585
 11166  002C94  0A03               	xorlw	3	; case 2
 11167  002C96  A4D8               	btfss	status,2,c
 11168  002C98  0012               	return	
 11169  002C9A  D7EB               	goto	l593
 11170  002C9C                     __end_of_SwSpi_Data_Pin:
 11171                           	opt stack 0
 11172                           tosu	equ	0xFFF
 11173                           tosh	equ	0xFFE
 11174                           tosl	equ	0xFFD
 11175                           pclath	equ	0xFFA
 11176                           tblptru	equ	0xFF8
 11177                           tblptrh	equ	0xFF7
 11178                           tblptrl	equ	0xFF6
 11179                           tablat	equ	0xFF5
 11180                           prodh	equ	0xFF4
 11181                           prodl	equ	0xFF3
 11182                           intcon	equ	0xFF2
 11183                           intcon2	equ	0xFF1
 11184                           postinc0	equ	0xFEE
 11185                           wreg	equ	0xFE8
 11186                           indf1	equ	0xFE7
 11187                           postdec1	equ	0xFE5
 11188                           fsr1h	equ	0xFE2
 11189                           fsr1l	equ	0xFE1
 11190                           indf2	equ	0xFDF
 11191                           postinc2	equ	0xFDE
 11192                           postdec2	equ	0xFDD
 11193                           fsr2h	equ	0xFDA
 11194                           fsr2l	equ	0xFD9
 11195                           status	equ	0xFD8
 11196                           
 11197 ;; *************** function _InitSevenSegment *****************
 11198 ;; Defined at:
 11199 ;;		line 14 in file "SevenSegmentApp.c"
 11200 ;; Parameters:    Size  Location     Type
 11201 ;;		None
 11202 ;; Auto vars:     Size  Location     Type
 11203 ;;		None
 11204 ;; Return value:  Size  Location     Type
 11205 ;;                  1    wreg      void 
 11206 ;; Registers used:
 11207 ;;		wreg, status,2
 11208 ;; Tracked objects:
 11209 ;;		On entry : 0/0
 11210 ;;		On exit  : 0/0
 11211 ;;		Unchanged: 0/0
 11212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11213 ;;      Params:         0       0       0       0       0       0       0
 11214 ;;      Locals:         0       0       0       0       0       0       0
 11215 ;;      Temps:          0       0       0       0       0       0       0
 11216 ;;      Totals:         0       0       0       0       0       0       0
 11217 ;;Total ram usage:        0 bytes
 11218 ;; Hardware stack levels used:    1
 11219 ;; Hardware stack levels required when called:    3
 11220 ;; This function calls:
 11221 ;;		Nothing
 11222 ;; This function is called by:
 11223 ;;		_InitSystemApplicationManagers
 11224 ;; This function uses a non-reentrant model
 11225 ;;
 11226                           
 11227                           	psect	text76
 11228  00346A                     __ptext76:
 11229                           	opt stack 0
 11230  00346A                     _InitSevenSegment:
 11231                           	opt stack 26
 11232                           
 11233                           ;SevenSegmentApp.c: 16: ANSELA = 0;
 11234                           
 11235                           ;incstack = 0
 11236  00346A  0E00               	movlw	0
 11237  00346C  010F               	movlb	15	; () banked
 11238  00346E  6F38               	movwf	56,b	;volatile
 11239                           
 11240                           ;SevenSegmentApp.c: 17: ANSELD = 0;
 11241  003470  0E00               	movlw	0
 11242  003472  6F3B               	movwf	59,b	;volatile
 11243                           
 11244                           ;SevenSegmentApp.c: 19: TRISA = 0;
 11245  003474  0E00               	movlw	0
 11246  003476  6E92               	movwf	3986,c	;volatile
 11247                           
 11248                           ;SevenSegmentApp.c: 20: LATA = 0;
 11249  003478  0E00               	movlw	0
 11250  00347A  6E89               	movwf	3977,c	;volatile
 11251                           
 11252                           ;SevenSegmentApp.c: 21: TRISD = 0;
 11253  00347C  0E00               	movlw	0
 11254  00347E  6E95               	movwf	3989,c	;volatile
 11255                           
 11256                           ;SevenSegmentApp.c: 22: LATD = 0;
 11257  003480  0E00               	movlw	0
 11258  003482  6E8C               	movwf	3980,c	;volatile
 11259                           
 11260                           ;SevenSegmentApp.c: 24: cnt = 1;
 11261  003484  0E00               	movlw	0
 11262  003486  0100               	movlb	0	; () banked
 11263  003488  6FFE               	movwf	(_cnt+1)& (0+255),b
 11264  00348A  0E01               	movlw	1
 11265  00348C  6FFD               	movwf	_cnt& (0+255),b
 11266                           
 11267                           ; BSR set to: 0
 11268  00348E  0012               	return		;funcret
 11269  003490                     __end_of_InitSevenSegment:
 11270                           	opt stack 0
 11271                           tosu	equ	0xFFF
 11272                           tosh	equ	0xFFE
 11273                           tosl	equ	0xFFD
 11274                           pclath	equ	0xFFA
 11275                           tblptru	equ	0xFF8
 11276                           tblptrh	equ	0xFF7
 11277                           tblptrl	equ	0xFF6
 11278                           tablat	equ	0xFF5
 11279                           prodh	equ	0xFF4
 11280                           prodl	equ	0xFF3
 11281                           intcon	equ	0xFF2
 11282                           intcon2	equ	0xFF1
 11283                           postinc0	equ	0xFEE
 11284                           wreg	equ	0xFE8
 11285                           indf1	equ	0xFE7
 11286                           postdec1	equ	0xFE5
 11287                           fsr1h	equ	0xFE2
 11288                           fsr1l	equ	0xFE1
 11289                           indf2	equ	0xFDF
 11290                           postinc2	equ	0xFDE
 11291                           postdec2	equ	0xFDD
 11292                           fsr2h	equ	0xFDA
 11293                           fsr2l	equ	0xFD9
 11294                           status	equ	0xFD8
 11295                           
 11296 ;; *************** function _InitAdcApplicationMgr *****************
 11297 ;; Defined at:
 11298 ;;		line 22 in file "AdcApp.c"
 11299 ;; Parameters:    Size  Location     Type
 11300 ;;		None
 11301 ;; Auto vars:     Size  Location     Type
 11302 ;;  channel         1   23[COMRAM] unsigned char 
 11303 ;; Return value:  Size  Location     Type
 11304 ;;                  1    wreg      void 
 11305 ;; Registers used:
 11306 ;;		wreg, status,2
 11307 ;; Tracked objects:
 11308 ;;		On entry : 0/0
 11309 ;;		On exit  : 0/0
 11310 ;;		Unchanged: 0/0
 11311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11312 ;;      Params:         0       0       0       0       0       0       0
 11313 ;;      Locals:         1       0       0       0       0       0       0
 11314 ;;      Temps:          0       0       0       0       0       0       0
 11315 ;;      Totals:         1       0       0       0       0       0       0
 11316 ;;Total ram usage:        1 bytes
 11317 ;; Hardware stack levels used:    1
 11318 ;; Hardware stack levels required when called:    3
 11319 ;; This function calls:
 11320 ;;		Nothing
 11321 ;; This function is called by:
 11322 ;;		_InitSystemApplicationManagers
 11323 ;; This function uses a non-reentrant model
 11324 ;;
 11325                           
 11326                           	psect	text77
 11327  0036B4                     __ptext77:
 11328                           	opt stack 0
 11329  0036B4                     _InitAdcApplicationMgr:
 11330                           	opt stack 26
 11331                           
 11332                           ;AdcApp.c: 24: conversionFormat = CONVERSION_LEFT_FORAMT;
 11333                           
 11334                           ; BSR set to: 0
 11335                           ;incstack = 0
 11336  0036B4  0E00               	movlw	0
 11337  0036B6  6E3D               	movwf	_conversionFormat,c
 11338                           
 11339                           ;AdcApp.c: 25: adcSampleMode = CIRCULAR;
 11340  0036B8  0E00               	movlw	0
 11341  0036BA  6E3C               	movwf	_adcSampleMode,c
 11342                           
 11343                           ;AdcApp.c: 26: char channel = 0;
 11344  0036BC  0E00               	movlw	0
 11345  0036BE  6E18               	movwf	InitAdcApplicationMgr@channel,c
 11346  0036C0  0012               	return		;funcret
 11347  0036C2                     __end_of_InitAdcApplicationMgr:
 11348                           	opt stack 0
 11349                           tosu	equ	0xFFF
 11350                           tosh	equ	0xFFE
 11351                           tosl	equ	0xFFD
 11352                           pclath	equ	0xFFA
 11353                           tblptru	equ	0xFF8
 11354                           tblptrh	equ	0xFF7
 11355                           tblptrl	equ	0xFF6
 11356                           tablat	equ	0xFF5
 11357                           prodh	equ	0xFF4
 11358                           prodl	equ	0xFF3
 11359                           intcon	equ	0xFF2
 11360                           intcon2	equ	0xFF1
 11361                           postinc0	equ	0xFEE
 11362                           wreg	equ	0xFE8
 11363                           indf1	equ	0xFE7
 11364                           postdec1	equ	0xFE5
 11365                           fsr1h	equ	0xFE2
 11366                           fsr1l	equ	0xFE1
 11367                           indf2	equ	0xFDF
 11368                           postinc2	equ	0xFDE
 11369                           postdec2	equ	0xFDD
 11370                           fsr2h	equ	0xFDA
 11371                           fsr2l	equ	0xFD9
 11372                           status	equ	0xFD8
 11373                           
 11374 ;; *************** function _ClearMcuRunTime *****************
 11375 ;; Defined at:
 11376 ;;		line 87 in file "SystemStatus.c"
 11377 ;; Parameters:    Size  Location     Type
 11378 ;;		None
 11379 ;; Auto vars:     Size  Location     Type
 11380 ;;		None
 11381 ;; Return value:  Size  Location     Type
 11382 ;;                  1    wreg      void 
 11383 ;; Registers used:
 11384 ;;		wreg, status,2
 11385 ;; Tracked objects:
 11386 ;;		On entry : 0/0
 11387 ;;		On exit  : 0/0
 11388 ;;		Unchanged: 0/0
 11389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11390 ;;      Params:         0       0       0       0       0       0       0
 11391 ;;      Locals:         0       0       0       0       0       0       0
 11392 ;;      Temps:          0       0       0       0       0       0       0
 11393 ;;      Totals:         0       0       0       0       0       0       0
 11394 ;;Total ram usage:        0 bytes
 11395 ;; Hardware stack levels used:    1
 11396 ;; Hardware stack levels required when called:    3
 11397 ;; This function calls:
 11398 ;;		Nothing
 11399 ;; This function is called by:
 11400 ;;		_InitSystemApplicationManagers
 11401 ;; This function uses a non-reentrant model
 11402 ;;
 11403                           
 11404                           	psect	text78
 11405  003654                     __ptext78:
 11406                           	opt stack 0
 11407  003654                     _ClearMcuRunTime:
 11408                           	opt stack 26
 11409                           
 11410                           ;SystemStatus.c: 89: mcuRunTimeIn5SecTicks = 0;
 11411                           
 11412                           ;incstack = 0
 11413  003654  0E00               	movlw	0
 11414  003656  0100               	movlb	0	; () banked
 11415  003658  6FC0               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 11416  00365A  0E00               	movlw	0
 11417  00365C  6FC1               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 11418  00365E  0E00               	movlw	0
 11419  003660  6FC2               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 11420  003662  0E00               	movlw	0
 11421  003664  6FC3               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 11422                           
 11423                           ; BSR set to: 0
 11424  003666  0012               	return		;funcret
 11425  003668                     __end_of_ClearMcuRunTime:
 11426                           	opt stack 0
 11427                           tosu	equ	0xFFF
 11428                           tosh	equ	0xFFE
 11429                           tosl	equ	0xFFD
 11430                           pclath	equ	0xFFA
 11431                           tblptru	equ	0xFF8
 11432                           tblptrh	equ	0xFF7
 11433                           tblptrl	equ	0xFF6
 11434                           tablat	equ	0xFF5
 11435                           prodh	equ	0xFF4
 11436                           prodl	equ	0xFF3
 11437                           intcon	equ	0xFF2
 11438                           intcon2	equ	0xFF1
 11439                           postinc0	equ	0xFEE
 11440                           wreg	equ	0xFE8
 11441                           indf1	equ	0xFE7
 11442                           postdec1	equ	0xFE5
 11443                           fsr1h	equ	0xFE2
 11444                           fsr1l	equ	0xFE1
 11445                           indf2	equ	0xFDF
 11446                           postinc2	equ	0xFDE
 11447                           postdec2	equ	0xFDD
 11448                           fsr2h	equ	0xFDA
 11449                           fsr2l	equ	0xFD9
 11450                           status	equ	0xFD8
 11451                           
 11452 ;; *************** function _CheckFlashPrecentage *****************
 11453 ;; Defined at:
 11454 ;;		line 201 in file "FlashApp.c"
 11455 ;; Parameters:    Size  Location     Type
 11456 ;;		None
 11457 ;; Auto vars:     Size  Location     Type
 11458 ;;  precentage      3   28[BANK0 ] void 
 11459 ;; Return value:  Size  Location     Type
 11460 ;;                  1    wreg      unsigned char 
 11461 ;; Registers used:
 11462 ;;		wreg, status,2, status,0, cstack
 11463 ;; Tracked objects:
 11464 ;;		On entry : 0/0
 11465 ;;		On exit  : 0/0
 11466 ;;		Unchanged: 0/0
 11467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11468 ;;      Params:         0       0       0       0       0       0       0
 11469 ;;      Locals:         0       3       0       0       0       0       0
 11470 ;;      Temps:          0       4       0       0       0       0       0
 11471 ;;      Totals:         0       7       0       0       0       0       0
 11472 ;;Total ram usage:        7 bytes
 11473 ;; Hardware stack levels used:    1
 11474 ;; Hardware stack levels required when called:    5
 11475 ;; This function calls:
 11476 ;;		___ftdiv
 11477 ;;		___ftge
 11478 ;;		___ftmul
 11479 ;;		___lltoft
 11480 ;; This function is called by:
 11481 ;;		_main
 11482 ;; This function uses a non-reentrant model
 11483 ;;
 11484                           
 11485                           	psect	text79
 11486  002116                     __ptext79:
 11487                           	opt stack 0
 11488  002116                     _CheckFlashPrecentage:
 11489                           	opt stack 25
 11490                           
 11491                           ;FlashApp.c: 203: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
 11492                           
 11493                           ; BSR set to: 0
 11494                           ;incstack = 0
 11495  002116  0EE0               	movlw	224
 11496  002118  6E2C               	movwf	___ftdiv@f2,c
 11497  00211A  0EFF               	movlw	255
 11498  00211C  6E2D               	movwf	___ftdiv@f2+1,c
 11499  00211E  0E46               	movlw	70
 11500  002120  6E2E               	movwf	___ftdiv@f2+2,c
 11501  002122  C042  F078         	movff	_writeAddress,??_CheckFlashPrecentage
 11502  002126  C043  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
 11503  00212A  C044  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
 11504  00212E  C045  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
 11505  002132  0100               	movlb	0	; () banked
 11506  002134  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
 11507  002136  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
 11508  002138  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
 11509  00213A  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
 11510  00213C  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
 11511  00213E  0E00               	movlw	0
 11512  002140  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
 11513  002142  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
 11514  002144  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
 11515  002146  0EF0               	movlw	240
 11516  002148  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
 11517  00214A  6E20               	movwf	___lltoft@c,c
 11518  00214C  0E7F               	movlw	127
 11519  00214E  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
 11520  002150  6E21               	movwf	___lltoft@c+1,c
 11521  002152  0E00               	movlw	0
 11522  002154  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
 11523  002156  6E22               	movwf	___lltoft@c+2,c
 11524  002158  0E00               	movlw	0
 11525  00215A  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
 11526  00215C  6E23               	movwf	___lltoft@c+3,c
 11527  00215E  EC45  F015         	call	___lltoft	;wreg free
 11528  002162  C020  F029         	movff	?___lltoft,___ftdiv@f1
 11529  002166  C021  F02A         	movff	?___lltoft+1,___ftdiv@f1+1
 11530  00216A  C022  F02B         	movff	?___lltoft+2,___ftdiv@f1+2
 11531  00216E  EC08  F00E         	call	___ftdiv	;wreg free
 11532  002172  C029  F069         	movff	?___ftdiv,___ftmul@f1
 11533  002176  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 11534  00217A  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 11535  00217E  0E00               	movlw	0
 11536  002180  0100               	movlb	0	; () banked
 11537  002182  6F6C               	movwf	___ftmul@f2& (0+255),b
 11538  002184  0EC8               	movlw	200
 11539  002186  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 11540  002188  0E42               	movlw	66
 11541  00218A  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 11542  00218C  EC8D  F00D         	call	___ftmul	;wreg free
 11543  002190  C069  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
 11544  002194  C06A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
 11545  002198  C06B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
 11546                           
 11547                           ;FlashApp.c: 204: return (precentage > 75) ? 1 : 0;
 11548  00219C  0E00               	movlw	0
 11549  00219E  6E18               	movwf	___ftge@ff1,c
 11550  0021A0  0E96               	movlw	150
 11551  0021A2  6E19               	movwf	___ftge@ff1+1,c
 11552  0021A4  0E42               	movlw	66
 11553  0021A6  6E1A               	movwf	___ftge@ff1+2,c
 11554  0021A8  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
 11555  0021AC  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
 11556  0021B0  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
 11557  0021B4  ECB2  F012         	call	___ftge	;wreg free
 11558  0021B8  B0D8               	btfsc	status,0,c
 11559  0021BA  D002               	goto	u7740
 11560  0021BC  0E01               	movlw	1
 11561  0021BE  0012               	return	
 11562  0021C0                     u7740:
 11563  0021C0  0E00               	movlw	0
 11564  0021C2  0012               	return	
 11565  0021C4                     __end_of_CheckFlashPrecentage:
 11566                           	opt stack 0
 11567                           tosu	equ	0xFFF
 11568                           tosh	equ	0xFFE
 11569                           tosl	equ	0xFFD
 11570                           pclath	equ	0xFFA
 11571                           tblptru	equ	0xFF8
 11572                           tblptrh	equ	0xFF7
 11573                           tblptrl	equ	0xFF6
 11574                           tablat	equ	0xFF5
 11575                           prodh	equ	0xFF4
 11576                           prodl	equ	0xFF3
 11577                           intcon	equ	0xFF2
 11578                           intcon2	equ	0xFF1
 11579                           postinc0	equ	0xFEE
 11580                           wreg	equ	0xFE8
 11581                           indf1	equ	0xFE7
 11582                           postdec1	equ	0xFE5
 11583                           fsr1h	equ	0xFE2
 11584                           fsr1l	equ	0xFE1
 11585                           indf2	equ	0xFDF
 11586                           postinc2	equ	0xFDE
 11587                           postdec2	equ	0xFDD
 11588                           fsr2h	equ	0xFDA
 11589                           fsr2l	equ	0xFD9
 11590                           status	equ	0xFD8
 11591                           
 11592 ;; *************** function _BlinkOkLeds *****************
 11593 ;; Defined at:
 11594 ;;		line 24 in file "LedsApp.c"
 11595 ;; Parameters:    Size  Location     Type
 11596 ;;  state           1    wreg     enum E7549
 11597 ;; Auto vars:     Size  Location     Type
 11598 ;;  state           1   26[COMRAM] enum E7549
 11599 ;;  idx             2   27[COMRAM] int 
 11600 ;; Return value:  Size  Location     Type
 11601 ;;                  1    wreg      void 
 11602 ;; Registers used:
 11603 ;;		wreg, status,2, status,0
 11604 ;; Tracked objects:
 11605 ;;		On entry : 0/0
 11606 ;;		On exit  : 0/0
 11607 ;;		Unchanged: 0/0
 11608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11609 ;;      Params:         0       0       0       0       0       0       0
 11610 ;;      Locals:         3       0       0       0       0       0       0
 11611 ;;      Temps:          3       0       0       0       0       0       0
 11612 ;;      Totals:         6       0       0       0       0       0       0
 11613 ;;Total ram usage:        6 bytes
 11614 ;; Hardware stack levels used:    1
 11615 ;; Hardware stack levels required when called:    3
 11616 ;; This function calls:
 11617 ;;		Nothing
 11618 ;; This function is called by:
 11619 ;;		_main
 11620 ;; This function uses a non-reentrant model
 11621 ;;
 11622                           
 11623                           	psect	text80
 11624  002916                     __ptext80:
 11625                           	opt stack 0
 11626  002916                     _BlinkOkLeds:
 11627                           	opt stack 27
 11628                           
 11629                           ;incstack = 0
 11630                           ;BlinkOkLeds@state stored from wreg
 11631  002916  6E1B               	movwf	BlinkOkLeds@state,c
 11632                           
 11633                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 11634  002918  0E00               	movlw	0
 11635  00291A  6E1D               	movwf	BlinkOkLeds@idx+1,c
 11636  00291C  0E00               	movlw	0
 11637  00291E  6E1C               	movwf	BlinkOkLeds@idx,c
 11638  002920                     l5926:
 11639  002920  501B               	movf	BlinkOkLeds@state,w,c
 11640  002922  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 11641  002924  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 11642  002926  5018               	movf	??_BlinkOkLeds,w,c
 11643  002928  5C1C               	subwf	BlinkOkLeds@idx,w,c
 11644  00292A  501D               	movf	BlinkOkLeds@idx+1,w,c
 11645  00292C  0A80               	xorlw	128
 11646  00292E  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 11647  002930  5019               	movf	??_BlinkOkLeds+1,w,c
 11648  002932  0A80               	xorlw	128
 11649  002934  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 11650  002936  B0D8               	btfsc	status,0,c
 11651  002938  0012               	return	
 11652                           
 11653                           ;LedsApp.c: 27: {
 11654                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 11655  00293A  908B               	bcf	3979,0,c	;volatile
 11656                           
 11657                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 11658  00293C  0E02               	movlw	2
 11659  00293E  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 11660  002940  0E04               	movlw	4
 11661  002942  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 11662  002944  0EBA               	movlw	186
 11663  002946                     u7997:
 11664  002946  2EE8               	decfsz	wreg,f,c
 11665  002948  D7FE               	bra	u7997
 11666  00294A  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 11667  00294C  D7FC               	bra	u7997
 11668  00294E  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 11669  002950  D7FA               	bra	u7997
 11670  002952  D000               	nop2	
 11671                           
 11672                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 11673  002954  808B               	bsf	3979,0,c	;volatile
 11674                           
 11675                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 11676  002956  0E02               	movlw	2
 11677  002958  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 11678  00295A  0E04               	movlw	4
 11679  00295C  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 11680  00295E  0EBA               	movlw	186
 11681  002960                     u8007:
 11682  002960  2EE8               	decfsz	wreg,f,c
 11683  002962  D7FE               	bra	u8007
 11684  002964  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 11685  002966  D7FC               	bra	u8007
 11686  002968  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 11687  00296A  D7FA               	bra	u8007
 11688  00296C  D000               	nop2	
 11689  00296E  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 11690  002970  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 11691  002972  D7D6               	goto	l5926
 11692  002974                     __end_of_BlinkOkLeds:
 11693                           	opt stack 0
 11694                           tosu	equ	0xFFF
 11695                           tosh	equ	0xFFE
 11696                           tosl	equ	0xFFD
 11697                           pclath	equ	0xFFA
 11698                           tblptru	equ	0xFF8
 11699                           tblptrh	equ	0xFF7
 11700                           tblptrl	equ	0xFF6
 11701                           tablat	equ	0xFF5
 11702                           prodh	equ	0xFF4
 11703                           prodl	equ	0xFF3
 11704                           intcon	equ	0xFF2
 11705                           intcon2	equ	0xFF1
 11706                           postinc0	equ	0xFEE
 11707                           wreg	equ	0xFE8
 11708                           indf1	equ	0xFE7
 11709                           postdec1	equ	0xFE5
 11710                           fsr1h	equ	0xFE2
 11711                           fsr1l	equ	0xFE1
 11712                           indf2	equ	0xFDF
 11713                           postinc2	equ	0xFDE
 11714                           postdec2	equ	0xFDD
 11715                           fsr2h	equ	0xFDA
 11716                           fsr2l	equ	0xFD9
 11717                           status	equ	0xFD8
 11718                           
 11719 ;; *************** function _BlinkErrorLeds *****************
 11720 ;; Defined at:
 11721 ;;		line 13 in file "LedsApp.c"
 11722 ;; Parameters:    Size  Location     Type
 11723 ;;  state           1    wreg     enum E7552
 11724 ;; Auto vars:     Size  Location     Type
 11725 ;;  state           1   26[COMRAM] enum E7552
 11726 ;;  idx             2   27[COMRAM] int 
 11727 ;; Return value:  Size  Location     Type
 11728 ;;                  1    wreg      void 
 11729 ;; Registers used:
 11730 ;;		wreg, status,2, status,0
 11731 ;; Tracked objects:
 11732 ;;		On entry : 0/0
 11733 ;;		On exit  : 0/0
 11734 ;;		Unchanged: 0/0
 11735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11736 ;;      Params:         0       0       0       0       0       0       0
 11737 ;;      Locals:         3       0       0       0       0       0       0
 11738 ;;      Temps:          3       0       0       0       0       0       0
 11739 ;;      Totals:         6       0       0       0       0       0       0
 11740 ;;Total ram usage:        6 bytes
 11741 ;; Hardware stack levels used:    1
 11742 ;; Hardware stack levels required when called:    3
 11743 ;; This function calls:
 11744 ;;		Nothing
 11745 ;; This function is called by:
 11746 ;;		_main
 11747 ;; This function uses a non-reentrant model
 11748 ;;
 11749                           
 11750                           	psect	text81
 11751  002974                     __ptext81:
 11752                           	opt stack 0
 11753  002974                     _BlinkErrorLeds:
 11754                           	opt stack 27
 11755                           
 11756                           ;incstack = 0
 11757                           ;BlinkErrorLeds@state stored from wreg
 11758  002974  6E1B               	movwf	BlinkErrorLeds@state,c
 11759                           
 11760                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
 11761  002976  0E00               	movlw	0
 11762  002978  6E1D               	movwf	BlinkErrorLeds@idx+1,c
 11763  00297A  0E00               	movlw	0
 11764  00297C  6E1C               	movwf	BlinkErrorLeds@idx,c
 11765  00297E                     l5914:
 11766  00297E  501B               	movf	BlinkErrorLeds@state,w,c
 11767  002980  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 11768  002982  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
 11769  002984  5018               	movf	??_BlinkErrorLeds,w,c
 11770  002986  5C1C               	subwf	BlinkErrorLeds@idx,w,c
 11771  002988  501D               	movf	BlinkErrorLeds@idx+1,w,c
 11772  00298A  0A80               	xorlw	128
 11773  00298C  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
 11774  00298E  5019               	movf	??_BlinkErrorLeds+1,w,c
 11775  002990  0A80               	xorlw	128
 11776  002992  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
 11777  002994  B0D8               	btfsc	status,0,c
 11778  002996  0012               	return	
 11779                           
 11780                           ;LedsApp.c: 16: {
 11781                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
 11782  002998  988A               	bcf	3978,4,c	;volatile
 11783                           
 11784                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
 11785  00299A  0E02               	movlw	2
 11786  00299C  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 11787  00299E  0E04               	movlw	4
 11788  0029A0  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 11789  0029A2  0EBA               	movlw	186
 11790  0029A4                     u8017:
 11791  0029A4  2EE8               	decfsz	wreg,f,c
 11792  0029A6  D7FE               	bra	u8017
 11793  0029A8  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 11794  0029AA  D7FC               	bra	u8017
 11795  0029AC  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 11796  0029AE  D7FA               	bra	u8017
 11797  0029B0  D000               	nop2	
 11798                           
 11799                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
 11800  0029B2  888A               	bsf	3978,4,c	;volatile
 11801                           
 11802                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
 11803  0029B4  0E02               	movlw	2
 11804  0029B6  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
 11805  0029B8  0E04               	movlw	4
 11806  0029BA  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
 11807  0029BC  0EBA               	movlw	186
 11808  0029BE                     u8027:
 11809  0029BE  2EE8               	decfsz	wreg,f,c
 11810  0029C0  D7FE               	bra	u8027
 11811  0029C2  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
 11812  0029C4  D7FC               	bra	u8027
 11813  0029C6  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
 11814  0029C8  D7FA               	bra	u8027
 11815  0029CA  D000               	nop2	
 11816  0029CC  4A1C               	infsnz	BlinkErrorLeds@idx,f,c
 11817  0029CE  2A1D               	incf	BlinkErrorLeds@idx+1,f,c
 11818  0029D0  D7D6               	goto	l5914
 11819  0029D2                     __end_of_BlinkErrorLeds:
 11820                           	opt stack 0
 11821                           tosu	equ	0xFFF
 11822                           tosh	equ	0xFFE
 11823                           tosl	equ	0xFFD
 11824                           pclath	equ	0xFFA
 11825                           tblptru	equ	0xFF8
 11826                           tblptrh	equ	0xFF7
 11827                           tblptrl	equ	0xFF6
 11828                           tablat	equ	0xFF5
 11829                           prodh	equ	0xFF4
 11830                           prodl	equ	0xFF3
 11831                           intcon	equ	0xFF2
 11832                           intcon2	equ	0xFF1
 11833                           postinc0	equ	0xFEE
 11834                           wreg	equ	0xFE8
 11835                           indf1	equ	0xFE7
 11836                           postdec1	equ	0xFE5
 11837                           fsr1h	equ	0xFE2
 11838                           fsr1l	equ	0xFE1
 11839                           indf2	equ	0xFDF
 11840                           postinc2	equ	0xFDE
 11841                           postdec2	equ	0xFDD
 11842                           fsr2h	equ	0xFDA
 11843                           fsr2l	equ	0xFD9
 11844                           status	equ	0xFD8
 11845                           
 11846 ;; *************** function _AdcConvert *****************
 11847 ;; Defined at:
 11848 ;;		line 56 in file "AdcApp.c"
 11849 ;; Parameters:    Size  Location     Type
 11850 ;;		None
 11851 ;; Auto vars:     Size  Location     Type
 11852 ;;  _adcResult      2   83[BANK0 ] unsigned int 
 11853 ;;  idx             1   92[BANK0 ] unsigned char 
 11854 ;;  _adcResult      2   85[BANK0 ] unsigned int 
 11855 ;;  adcRes          2   90[BANK0 ] unsigned int 
 11856 ;; Return value:  Size  Location     Type
 11857 ;;                  1    wreg      void 
 11858 ;; Registers used:
 11859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11860 ;; Tracked objects:
 11861 ;;		On entry : 0/0
 11862 ;;		On exit  : 0/0
 11863 ;;		Unchanged: 0/0
 11864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11865 ;;      Params:         0       0       0       0       0       0       0
 11866 ;;      Locals:         0      10       0       0       0       0       0
 11867 ;;      Temps:          0       2       0       0       0       0       0
 11868 ;;      Totals:         0      12       0       0       0       0       0
 11869 ;;Total ram usage:       12 bytes
 11870 ;; Hardware stack levels used:    1
 11871 ;; Hardware stack levels required when called:    8
 11872 ;; This function calls:
 11873 ;;		_ADC_GetConversion
 11874 ;;		_FlashSampleWrite
 11875 ;;		___ftdiv
 11876 ;;		___ftmul
 11877 ;;		___fttol
 11878 ;;		___lwtoft
 11879 ;;		_pow
 11880 ;; This function is called by:
 11881 ;;		_main
 11882 ;; This function uses a non-reentrant model
 11883 ;;
 11884                           
 11885                           	psect	text82
 11886  00121A                     __ptext82:
 11887                           	opt stack 0
 11888  00121A                     _AdcConvert:
 11889                           	opt stack 22
 11890                           
 11891                           ;AdcApp.c: 61: uint16_t adcRes = 0;
 11892                           
 11893                           ;incstack = 0
 11894  00121A  0E00               	movlw	0
 11895  00121C  0100               	movlb	0	; () banked
 11896  00121E  6FBB               	movwf	(AdcConvert@adcRes+1)& (0+255),b
 11897  001220  0E00               	movlw	0
 11898  001222  6FBA               	movwf	AdcConvert@adcRes& (0+255),b
 11899                           
 11900                           ;AdcApp.c: 63: if (adcSampleMode == CIRCULAR)
 11901  001224  503C               	movf	_adcSampleMode,w,c
 11902  001226  A4D8               	btfss	status,2,c
 11903  001228  D073               	goto	l108
 11904                           
 11905                           ; BSR set to: 0
 11906                           ;AdcApp.c: 64: {
 11907                           ;AdcApp.c: 65: for(uint8_t idx = 0; idx < (7); idx++)
 11908  00122A  0E00               	movlw	0
 11909  00122C  6FBC               	movwf	AdcConvert@idx& (0+255),b
 11910  00122E                     l7718:
 11911                           
 11912                           ; BSR set to: 0
 11913  00122E  0E06               	movlw	6
 11914  001230  65BC               	cpfsgt	AdcConvert@idx& (0+255),b
 11915  001232  D001               	goto	l109
 11916  001234  0012               	return	
 11917  001236                     l109:
 11918                           
 11919                           ; BSR set to: 0
 11920                           ;AdcApp.c: 66: {
 11921                           ;AdcApp.c: 67: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
 11922                           
 11923                           ; BSR set to: 0
 11924  001236  51BC               	movf	AdcConvert@idx& (0+255),w,b
 11925  001238  0D01               	mullw	1
 11926  00123A  0E35               	movlw	low _channelArr
 11927  00123C  24F3               	addwf	prodl,w,c
 11928  00123E  6EF6               	movwf	tblptrl,c
 11929  001240  0E06               	movlw	high _channelArr
 11930  001242  20F4               	addwfc	prodh,w,c
 11931  001244  6EF7               	movwf	tblptrh,c
 11932  001246                     	if	0	;There are less than 3 active tblptr bytes
 11933  001246                     	endif
 11934  001246  0008               	tblrd		*
 11935  001248  50F5               	movf	tablat,w,c
 11936  00124A  ECA1  F019         	call	_ADC_GetConversion
 11937  00124E  C018  F0B3         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
 11938  001252  C019  F0B4         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
 11939                           
 11940                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 11941  001256  0E00               	movlw	0
 11942  001258  0100               	movlb	0	; () banked
 11943  00125A  6FA3               	movwf	pow@y& (0+255),b
 11944  00125C  0E20               	movlw	32
 11945  00125E  6FA4               	movwf	(pow@y+1)& (0+255),b
 11946  001260  0E41               	movlw	65
 11947  001262  6FA5               	movwf	(pow@y+2)& (0+255),b
 11948  001264  0E00               	movlw	0
 11949  001266  6FA0               	movwf	pow@x& (0+255),b
 11950  001268  0E00               	movlw	0
 11951  00126A  6FA1               	movwf	(pow@x+1)& (0+255),b
 11952  00126C  0E40               	movlw	64
 11953  00126E  6FA2               	movwf	(pow@x+2)& (0+255),b
 11954  001270  ECBF  F00A         	call	_pow	;wreg free
 11955  001274  C0A0  F0B7         	movff	?_pow,_AdcConvert$3245
 11956  001278  C0A1  F0B8         	movff	?_pow+1,_AdcConvert$3245+1
 11957  00127C  C0A2  F0B9         	movff	?_pow+2,_AdcConvert$3245+2
 11958                           
 11959                           ;AdcApp.c: 68: adcRes = (_adcResult/pow(2,(10)))*(3340);
 11960  001280  0EC0               	movlw	192
 11961  001282  0100               	movlb	0	; () banked
 11962  001284  6F6C               	movwf	___ftmul@f2& (0+255),b
 11963  001286  0E50               	movlw	80
 11964  001288  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 11965  00128A  0E45               	movlw	69
 11966  00128C  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 11967  00128E  C0B7  F02C         	movff	_AdcConvert$3245,___ftdiv@f2
 11968  001292  C0B8  F02D         	movff	_AdcConvert$3245+1,___ftdiv@f2+1
 11969  001296  C0B9  F02E         	movff	_AdcConvert$3245+2,___ftdiv@f2+2
 11970  00129A  C0B3  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
 11971  00129E  C0B4  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
 11972  0012A2  EC6D  F01A         	call	___lwtoft	;wreg free
 11973  0012A6  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 11974  0012AA  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 11975  0012AE  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 11976  0012B2  EC08  F00E         	call	___ftdiv	;wreg free
 11977  0012B6  C029  F069         	movff	?___ftdiv,___ftmul@f1
 11978  0012BA  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 11979  0012BE  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 11980  0012C2  EC8D  F00D         	call	___ftmul	;wreg free
 11981  0012C6  C069  F078         	movff	?___ftmul,___fttol@f1
 11982  0012CA  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 11983  0012CE  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 11984  0012D2  EC11  F00D         	call	___fttol	;wreg free
 11985  0012D6  C078  F0BA         	movff	?___fttol,AdcConvert@adcRes
 11986  0012DA  C079  F0BB         	movff	?___fttol+1,AdcConvert@adcRes+1
 11987                           
 11988                           ;AdcApp.c: 69: FlashSampleWrite(adcRes, idx + 1);
 11989  0012DE  C0BA  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 11990  0012E2  C0BB  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 11991  0012E6  0100               	movlb	0	; () banked
 11992  0012E8  29BC               	incf	AdcConvert@idx& (0+255),w,b
 11993  0012EA  6E2F               	movwf	FlashSampleWrite@channelNum,c
 11994  0012EC  EC94  F00C         	call	_FlashSampleWrite	;wreg free
 11995                           
 11996                           ;AdcApp.c: 70: _delay((unsigned long)((250)*(8000000/4000.0)));
 11997  0012F0  0E03               	movlw	3
 11998  0012F2  0100               	movlb	0	; () banked
 11999  0012F4  6FB2               	movwf	(??_AdcConvert+1)& (0+255),b
 12000  0012F6  0E8A               	movlw	138
 12001  0012F8  6FB1               	movwf	??_AdcConvert& (0+255),b
 12002  0012FA  0E55               	movlw	85
 12003  0012FC                     u8037:
 12004  0012FC  2EE8               	decfsz	wreg,f,c
 12005  0012FE  D7FE               	bra	u8037
 12006  001300  2FB1               	decfsz	??_AdcConvert& (0+255),f,b
 12007  001302  D7FC               	bra	u8037
 12008  001304  2FB2               	decfsz	(??_AdcConvert+1)& (0+255),f,b
 12009  001306  D7FA               	bra	u8037
 12010  001308  D000               	nop2	
 12011  00130A  0100               	movlb	0	; () banked
 12012  00130C  2BBC               	incf	AdcConvert@idx& (0+255),f,b
 12013  00130E  D78F               	goto	l7718
 12014  001310                     l108:
 12015                           
 12016                           ; BSR set to: 0
 12017                           ;AdcApp.c: 73: else if (adcSampleMode == SINGLE_CHANNEL)
 12018                           
 12019                           ; BSR set to: 0
 12020  001310  043C               	decf	_adcSampleMode,w,c
 12021  001312  A4D8               	btfss	status,2,c
 12022  001314  0012               	return	
 12023                           
 12024                           ; BSR set to: 0
 12025                           ;AdcApp.c: 74: {
 12026                           ;AdcApp.c: 75: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
 12027  001316  51D3               	movf	_channel& (0+255),w,b
 12028  001318  0D01               	mullw	1
 12029  00131A  0E35               	movlw	low _channelArr
 12030  00131C  24F3               	addwf	prodl,w,c
 12031  00131E  6EF6               	movwf	tblptrl,c
 12032  001320  0E06               	movlw	high _channelArr
 12033  001322  20F4               	addwfc	prodh,w,c
 12034  001324  6EF7               	movwf	tblptrh,c
 12035  001326                     	if	0	;There are less than 3 active tblptr bytes
 12036  001326                     	endif
 12037  001326  0008               	tblrd		*
 12038  001328  50F5               	movf	tablat,w,c
 12039  00132A  ECA1  F019         	call	_ADC_GetConversion
 12040  00132E  C018  F0B5         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_328
 12041  001332  C019  F0B6         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_328+1
 12042                           
 12043                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12044  001336  0E00               	movlw	0
 12045  001338  0100               	movlb	0	; () banked
 12046  00133A  6FA3               	movwf	pow@y& (0+255),b
 12047  00133C  0E20               	movlw	32
 12048  00133E  6FA4               	movwf	(pow@y+1)& (0+255),b
 12049  001340  0E41               	movlw	65
 12050  001342  6FA5               	movwf	(pow@y+2)& (0+255),b
 12051  001344  0E00               	movlw	0
 12052  001346  6FA0               	movwf	pow@x& (0+255),b
 12053  001348  0E00               	movlw	0
 12054  00134A  6FA1               	movwf	(pow@x+1)& (0+255),b
 12055  00134C  0E40               	movlw	64
 12056  00134E  6FA2               	movwf	(pow@x+2)& (0+255),b
 12057  001350  ECBF  F00A         	call	_pow	;wreg free
 12058  001354  C0A0  F0B7         	movff	?_pow,_AdcConvert$3245
 12059  001358  C0A1  F0B8         	movff	?_pow+1,_AdcConvert$3245+1
 12060  00135C  C0A2  F0B9         	movff	?_pow+2,_AdcConvert$3245+2
 12061                           
 12062                           ;AdcApp.c: 76: adcRes = (_adcResult/pow(2,(10)))*(3340);
 12063  001360  0EC0               	movlw	192
 12064  001362  0100               	movlb	0	; () banked
 12065  001364  6F6C               	movwf	___ftmul@f2& (0+255),b
 12066  001366  0E50               	movlw	80
 12067  001368  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12068  00136A  0E45               	movlw	69
 12069  00136C  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12070  00136E  C0B7  F02C         	movff	_AdcConvert$3245,___ftdiv@f2
 12071  001372  C0B8  F02D         	movff	_AdcConvert$3245+1,___ftdiv@f2+1
 12072  001376  C0B9  F02E         	movff	_AdcConvert$3245+2,___ftdiv@f2+2
 12073  00137A  C0B5  F020         	movff	AdcConvert@_adcResult_328,___lwtoft@c
 12074  00137E  C0B6  F021         	movff	AdcConvert@_adcResult_328+1,___lwtoft@c+1
 12075  001382  EC6D  F01A         	call	___lwtoft	;wreg free
 12076  001386  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 12077  00138A  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 12078  00138E  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 12079  001392  EC08  F00E         	call	___ftdiv	;wreg free
 12080  001396  C029  F069         	movff	?___ftdiv,___ftmul@f1
 12081  00139A  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 12082  00139E  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 12083  0013A2  EC8D  F00D         	call	___ftmul	;wreg free
 12084  0013A6  C069  F078         	movff	?___ftmul,___fttol@f1
 12085  0013AA  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 12086  0013AE  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 12087  0013B2  EC11  F00D         	call	___fttol	;wreg free
 12088  0013B6  C078  F0BA         	movff	?___fttol,AdcConvert@adcRes
 12089  0013BA  C079  F0BB         	movff	?___fttol+1,AdcConvert@adcRes+1
 12090                           
 12091                           ;AdcApp.c: 77: FlashSampleWrite(adcRes, 1);
 12092  0013BE  C0BA  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 12093  0013C2  C0BB  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 12094  0013C6  0E01               	movlw	1
 12095  0013C8  6E2F               	movwf	FlashSampleWrite@channelNum,c
 12096  0013CA  EC94  F00C         	call	_FlashSampleWrite	;wreg free
 12097  0013CE  0012               	return	
 12098  0013D0                     __end_of_AdcConvert:
 12099                           	opt stack 0
 12100                           tosu	equ	0xFFF
 12101                           tosh	equ	0xFFE
 12102                           tosl	equ	0xFFD
 12103                           pclath	equ	0xFFA
 12104                           tblptru	equ	0xFF8
 12105                           tblptrh	equ	0xFF7
 12106                           tblptrl	equ	0xFF6
 12107                           tablat	equ	0xFF5
 12108                           prodh	equ	0xFF4
 12109                           prodl	equ	0xFF3
 12110                           intcon	equ	0xFF2
 12111                           intcon2	equ	0xFF1
 12112                           postinc0	equ	0xFEE
 12113                           wreg	equ	0xFE8
 12114                           indf1	equ	0xFE7
 12115                           postdec1	equ	0xFE5
 12116                           fsr1h	equ	0xFE2
 12117                           fsr1l	equ	0xFE1
 12118                           indf2	equ	0xFDF
 12119                           postinc2	equ	0xFDE
 12120                           postdec2	equ	0xFDD
 12121                           fsr2h	equ	0xFDA
 12122                           fsr2l	equ	0xFD9
 12123                           status	equ	0xFD8
 12124                           
 12125 ;; *************** function _pow *****************
 12126 ;; Defined at:
 12127 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 12128 ;; Parameters:    Size  Location     Type
 12129 ;;  x               3   64[BANK0 ] void 
 12130 ;;  y               3   67[BANK0 ] void 
 12131 ;; Auto vars:     Size  Location     Type
 12132 ;;  yi              4   77[BANK0 ] unsigned long 
 12133 ;;  sign            1   76[BANK0 ] unsigned char 
 12134 ;; Return value:  Size  Location     Type
 12135 ;;                  3   64[BANK0 ] unsigned char 
 12136 ;; Registers used:
 12137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12138 ;; Tracked objects:
 12139 ;;		On entry : 0/0
 12140 ;;		On exit  : 0/0
 12141 ;;		Unchanged: 0/0
 12142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12143 ;;      Params:         0       6       0       0       0       0       0
 12144 ;;      Locals:         0      11       0       0       0       0       0
 12145 ;;      Temps:          0       0       0       0       0       0       0
 12146 ;;      Totals:         0      17       0       0       0       0       0
 12147 ;;Total ram usage:       17 bytes
 12148 ;; Hardware stack levels used:    1
 12149 ;; Hardware stack levels required when called:    7
 12150 ;; This function calls:
 12151 ;;		___ftge
 12152 ;;		___ftmul
 12153 ;;		___ftneg
 12154 ;;		___fttol
 12155 ;;		___lltoft
 12156 ;;		_exp
 12157 ;;		_log
 12158 ;; This function is called by:
 12159 ;;		_AdcConvert
 12160 ;; This function uses a non-reentrant model
 12161 ;;
 12162                           
 12163                           	psect	text83
 12164  00157E                     __ptext83:
 12165                           	opt stack 0
 12166  00157E                     _pow:
 12167                           	opt stack 22
 12168                           
 12169                           ;incstack = 0
 12170  00157E  0E00               	movlw	0
 12171  001580  0100               	movlb	0	; () banked
 12172  001582  6FAC               	movwf	pow@sign& (0+255),b
 12173                           
 12174                           ; BSR set to: 0
 12175  001584  51A0               	movf	pow@x& (0+255),w,b
 12176  001586  11A1               	iorwf	(pow@x+1)& (0+255),w,b
 12177  001588  11A2               	iorwf	(pow@x+2)& (0+255),w,b
 12178  00158A  A4D8               	btfss	status,2,c
 12179  00158C  D01D               	goto	l1847
 12180                           
 12181                           ; BSR set to: 0
 12182  00158E  0E00               	movlw	0
 12183  001590  6E18               	movwf	___ftge@ff1,c
 12184  001592  0E00               	movlw	0
 12185  001594  6E19               	movwf	___ftge@ff1+1,c
 12186  001596  0E00               	movlw	0
 12187  001598  6E1A               	movwf	___ftge@ff1+2,c
 12188  00159A  C0A3  F01B         	movff	pow@y,___ftge@ff2
 12189  00159E  C0A4  F01C         	movff	pow@y+1,___ftge@ff2+1
 12190  0015A2  C0A5  F01D         	movff	pow@y+2,___ftge@ff2+2
 12191  0015A6  ECB2  F012         	call	___ftge	;wreg free
 12192  0015AA  A0D8               	btfss	status,0,c
 12193  0015AC  D005               	goto	l1848
 12194  0015AE  0E00               	movlw	0
 12195  0015B0  0100               	movlb	0	; () banked
 12196  0015B2  6FC5               	movwf	(_errno+1)& (0+255),b
 12197  0015B4  0E21               	movlw	33
 12198  0015B6  6FC4               	movwf	_errno& (0+255),b
 12199  0015B8                     l1848:
 12200  0015B8  0E00               	movlw	0
 12201  0015BA  0100               	movlb	0	; () banked
 12202  0015BC  6FA0               	movwf	?_pow& (0+255),b
 12203  0015BE  0E00               	movlw	0
 12204  0015C0  6FA1               	movwf	(?_pow+1)& (0+255),b
 12205  0015C2  0E00               	movlw	0
 12206  0015C4  6FA2               	movwf	(?_pow+2)& (0+255),b
 12207                           
 12208                           ; BSR set to: 0
 12209  0015C6  0012               	return	
 12210  0015C8                     l1847:
 12211                           
 12212                           ; BSR set to: 0
 12213                           
 12214                           ; BSR set to: 0
 12215  0015C8  51A3               	movf	pow@y& (0+255),w,b
 12216  0015CA  11A4               	iorwf	(pow@y+1)& (0+255),w,b
 12217  0015CC  11A5               	iorwf	(pow@y+2)& (0+255),w,b
 12218  0015CE  A4D8               	btfss	status,2,c
 12219  0015D0  D007               	goto	l1850
 12220                           
 12221                           ; BSR set to: 0
 12222  0015D2  0E00               	movlw	0
 12223  0015D4  6FA0               	movwf	?_pow& (0+255),b
 12224  0015D6  0E80               	movlw	128
 12225  0015D8  6FA1               	movwf	(?_pow+1)& (0+255),b
 12226  0015DA  0E3F               	movlw	63
 12227  0015DC  6FA2               	movwf	(?_pow+2)& (0+255),b
 12228                           
 12229                           ; BSR set to: 0
 12230  0015DE  0012               	return	
 12231  0015E0                     l1850:
 12232                           
 12233                           ; BSR set to: 0
 12234                           
 12235                           ; BSR set to: 0
 12236  0015E0  AFA2               	btfss	(pow@x+2)& (0+255),7,b
 12237  0015E2  D041               	goto	l1851
 12238                           
 12239                           ; BSR set to: 0
 12240  0015E4  C0A3  F078         	movff	pow@y,___fttol@f1
 12241  0015E8  C0A4  F079         	movff	pow@y+1,___fttol@f1+1
 12242  0015EC  C0A5  F07A         	movff	pow@y+2,___fttol@f1+2
 12243  0015F0  EC11  F00D         	call	___fttol	;wreg free
 12244  0015F4  C078  F0AD         	movff	?___fttol,pow@yi
 12245  0015F8  C079  F0AE         	movff	?___fttol+1,pow@yi+1
 12246  0015FC  C07A  F0AF         	movff	?___fttol+2,pow@yi+2
 12247  001600  C07B  F0B0         	movff	?___fttol+3,pow@yi+3
 12248  001604  C0AD  F020         	movff	pow@yi,___lltoft@c
 12249  001608  C0AE  F021         	movff	pow@yi+1,___lltoft@c+1
 12250  00160C  C0AF  F022         	movff	pow@yi+2,___lltoft@c+2
 12251  001610  C0B0  F023         	movff	pow@yi+3,___lltoft@c+3
 12252  001614  EC45  F015         	call	___lltoft	;wreg free
 12253  001618  0100               	movlb	0	; () banked
 12254  00161A  51A3               	movf	pow@y& (0+255),w,b
 12255  00161C  1820               	xorwf	?___lltoft,w,c
 12256  00161E  E107               	bnz	u7440
 12257  001620  51A4               	movf	(pow@y+1)& (0+255),w,b
 12258  001622  1821               	xorwf	?___lltoft+1,w,c
 12259  001624  E104               	bnz	u7440
 12260  001626  51A5               	movf	(pow@y+2)& (0+255),w,b
 12261  001628  1822               	xorwf	?___lltoft+2,w,c
 12262  00162A  B4D8               	btfsc	status,2,c
 12263  00162C  D00B               	goto	l1852
 12264  00162E                     u7440:
 12265                           
 12266                           ; BSR set to: 0
 12267  00162E  0E00               	movlw	0
 12268  001630  6FC5               	movwf	(_errno+1)& (0+255),b
 12269  001632  0E21               	movlw	33
 12270  001634  6FC4               	movwf	_errno& (0+255),b
 12271  001636  0E00               	movlw	0
 12272  001638  6FA0               	movwf	?_pow& (0+255),b
 12273  00163A  0E00               	movlw	0
 12274  00163C  6FA1               	movwf	(?_pow+1)& (0+255),b
 12275  00163E  0E00               	movlw	0
 12276  001640  6FA2               	movwf	(?_pow+2)& (0+255),b
 12277                           
 12278                           ; BSR set to: 0
 12279  001642  0012               	return	
 12280  001644                     l1852:
 12281                           
 12282                           ; BSR set to: 0
 12283                           
 12284                           ; BSR set to: 0
 12285  001644  51AD               	movf	pow@yi& (0+255),w,b
 12286  001646  0B01               	andlw	1
 12287  001648  6FAC               	movwf	pow@sign& (0+255),b
 12288                           
 12289                           ; BSR set to: 0
 12290  00164A  C0A0  F018         	movff	pow@x,___ftneg@f1
 12291  00164E  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 12292  001652  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 12293  001656  EC5B  F01A         	call	___ftneg	;wreg free
 12294  00165A  C018  F0A0         	movff	?___ftneg,pow@x
 12295  00165E  C019  F0A1         	movff	?___ftneg+1,pow@x+1
 12296  001662  C01A  F0A2         	movff	?___ftneg+2,pow@x+2
 12297  001666                     l1851:
 12298  001666  C0A0  F08E         	movff	pow@x,log@x
 12299  00166A  C0A1  F08F         	movff	pow@x+1,log@x+1
 12300  00166E  C0A2  F090         	movff	pow@x+2,log@x+2
 12301  001672  EC7D  F00B         	call	_log	;wreg free
 12302  001676  C08E  F0A6         	movff	?_log,_pow$3246
 12303  00167A  C08F  F0A7         	movff	?_log+1,_pow$3246+1
 12304  00167E  C090  F0A8         	movff	?_log+2,_pow$3246+2
 12305  001682  C0A6  F069         	movff	_pow$3246,___ftmul@f1
 12306  001686  C0A7  F06A         	movff	_pow$3246+1,___ftmul@f1+1
 12307  00168A  C0A8  F06B         	movff	_pow$3246+2,___ftmul@f1+2
 12308  00168E  C0A3  F06C         	movff	pow@y,___ftmul@f2
 12309  001692  C0A4  F06D         	movff	pow@y+1,___ftmul@f2+1
 12310  001696  C0A5  F06E         	movff	pow@y+2,___ftmul@f2+2
 12311  00169A  EC8D  F00D         	call	___ftmul	;wreg free
 12312  00169E  C069  F0A9         	movff	?___ftmul,_pow$3247
 12313  0016A2  C06A  F0AA         	movff	?___ftmul+1,_pow$3247+1
 12314  0016A6  C06B  F0AB         	movff	?___ftmul+2,_pow$3247+2
 12315  0016AA  C0A9  F097         	movff	_pow$3247,exp@x
 12316  0016AE  C0AA  F098         	movff	_pow$3247+1,exp@x+1
 12317  0016B2  C0AB  F099         	movff	_pow$3247+2,exp@x+2
 12318  0016B6  EC29  F007         	call	_exp	;wreg free
 12319  0016BA  C097  F0A0         	movff	?_exp,pow@x
 12320  0016BE  C098  F0A1         	movff	?_exp+1,pow@x+1
 12321  0016C2  C099  F0A2         	movff	?_exp+2,pow@x+2
 12322  0016C6  0100               	movlb	0	; () banked
 12323  0016C8  51AC               	movf	pow@sign& (0+255),w,b
 12324  0016CA  B4D8               	btfsc	status,2,c
 12325  0016CC  D00F               	goto	l1853
 12326                           
 12327                           ; BSR set to: 0
 12328  0016CE  C0A0  F018         	movff	pow@x,___ftneg@f1
 12329  0016D2  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 12330  0016D6  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 12331  0016DA  EC5B  F01A         	call	___ftneg	;wreg free
 12332  0016DE  C018  F0A0         	movff	?___ftneg,?_pow
 12333  0016E2  C019  F0A1         	movff	?___ftneg+1,?_pow+1
 12334  0016E6  C01A  F0A2         	movff	?___ftneg+2,?_pow+2
 12335  0016EA  0012               	return	
 12336  0016EC                     l1853:
 12337                           
 12338                           ; BSR set to: 0
 12339  0016EC  C0A0  F0A0         	movff	pow@x,?_pow
 12340  0016F0  C0A1  F0A1         	movff	pow@x+1,?_pow+1
 12341  0016F4  C0A2  F0A2         	movff	pow@x+2,?_pow+2
 12342  0016F8  0012               	return		;funcret
 12343  0016FA                     __end_of_pow:
 12344                           	opt stack 0
 12345                           tosu	equ	0xFFF
 12346                           tosh	equ	0xFFE
 12347                           tosl	equ	0xFFD
 12348                           pclath	equ	0xFFA
 12349                           tblptru	equ	0xFF8
 12350                           tblptrh	equ	0xFF7
 12351                           tblptrl	equ	0xFF6
 12352                           tablat	equ	0xFF5
 12353                           prodh	equ	0xFF4
 12354                           prodl	equ	0xFF3
 12355                           intcon	equ	0xFF2
 12356                           intcon2	equ	0xFF1
 12357                           postinc0	equ	0xFEE
 12358                           wreg	equ	0xFE8
 12359                           indf1	equ	0xFE7
 12360                           postdec1	equ	0xFE5
 12361                           fsr1h	equ	0xFE2
 12362                           fsr1l	equ	0xFE1
 12363                           indf2	equ	0xFDF
 12364                           postinc2	equ	0xFDE
 12365                           postdec2	equ	0xFDD
 12366                           fsr2h	equ	0xFDA
 12367                           fsr2l	equ	0xFD9
 12368                           status	equ	0xFD8
 12369                           
 12370 ;; *************** function _log *****************
 12371 ;; Defined at:
 12372 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 12373 ;; Parameters:    Size  Location     Type
 12374 ;;  x               3   46[BANK0 ] unsigned char 
 12375 ;; Auto vars:     Size  Location     Type
 12376 ;;  exponent        2   49[BANK0 ] int 
 12377 ;; Return value:  Size  Location     Type
 12378 ;;                  3   46[BANK0 ] int 
 12379 ;; Registers used:
 12380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12381 ;; Tracked objects:
 12382 ;;		On entry : 0/0
 12383 ;;		On exit  : 0/0
 12384 ;;		Unchanged: 0/0
 12385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12386 ;;      Params:         0       3       0       0       0       0       0
 12387 ;;      Locals:         0       2       0       0       0       0       0
 12388 ;;      Temps:          0       0       0       0       0       0       0
 12389 ;;      Totals:         0       5       0       0       0       0       0
 12390 ;;Total ram usage:        5 bytes
 12391 ;; Hardware stack levels used:    1
 12392 ;; Hardware stack levels required when called:    6
 12393 ;; This function calls:
 12394 ;;		___awtoft
 12395 ;;		___ftadd
 12396 ;;		___ftmul
 12397 ;;		_eval_poly
 12398 ;;		_frexp
 12399 ;; This function is called by:
 12400 ;;		_pow
 12401 ;; This function uses a non-reentrant model
 12402 ;;
 12403                           
 12404                           	psect	text84
 12405  0016FA                     __ptext84:
 12406                           	opt stack 0
 12407  0016FA                     _log:
 12408                           	opt stack 22
 12409                           
 12410                           ;incstack = 0
 12411  0016FA  0100               	movlb	0	; () banked
 12412  0016FC  AF90               	btfss	(log@x+2)& (0+255),7,b
 12413  0016FE  D00B               	goto	l2109
 12414                           
 12415                           ; BSR set to: 0
 12416  001700  0E00               	movlw	0
 12417  001702  6FC5               	movwf	(_errno+1)& (0+255),b
 12418  001704  0E21               	movlw	33
 12419  001706  6FC4               	movwf	_errno& (0+255),b
 12420  001708  0E00               	movlw	0
 12421  00170A  6F8E               	movwf	?_log& (0+255),b
 12422  00170C  0E00               	movlw	0
 12423  00170E  6F8F               	movwf	(?_log+1)& (0+255),b
 12424  001710  0E00               	movlw	0
 12425  001712  6F90               	movwf	(?_log+2)& (0+255),b
 12426                           
 12427                           ; BSR set to: 0
 12428  001714  0012               	return	
 12429  001716                     l2109:
 12430                           
 12431                           ; BSR set to: 0
 12432                           
 12433                           ; BSR set to: 0
 12434  001716  518E               	movf	log@x& (0+255),w,b
 12435  001718  118F               	iorwf	(log@x+1)& (0+255),w,b
 12436  00171A  1190               	iorwf	(log@x+2)& (0+255),w,b
 12437  00171C  A4D8               	btfss	status,2,c
 12438  00171E  D00B               	goto	l2111
 12439                           
 12440                           ; BSR set to: 0
 12441  001720  0E00               	movlw	0
 12442  001722  6FC5               	movwf	(_errno+1)& (0+255),b
 12443  001724  0E22               	movlw	34
 12444  001726  6FC4               	movwf	_errno& (0+255),b
 12445  001728  0E00               	movlw	0
 12446  00172A  6F8E               	movwf	?_log& (0+255),b
 12447  00172C  0E00               	movlw	0
 12448  00172E  6F8F               	movwf	(?_log+1)& (0+255),b
 12449  001730  0E00               	movlw	0
 12450  001732  6F90               	movwf	(?_log+2)& (0+255),b
 12451                           
 12452                           ; BSR set to: 0
 12453  001734  0012               	return	
 12454  001736                     l2111:
 12455                           
 12456                           ; BSR set to: 0
 12457                           
 12458                           ; BSR set to: 0
 12459  001736  0E00               	movlw	0
 12460  001738  6F6C               	movwf	___ftmul@f2& (0+255),b
 12461  00173A  0E00               	movlw	0
 12462  00173C  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12463  00173E  0E40               	movlw	64
 12464  001740  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12465  001742  0E91               	movlw	low log@exponent
 12466  001744  6E1B               	movwf	frexp@eptr,c
 12467  001746  0E00               	movlw	high log@exponent
 12468  001748  6E1C               	movwf	frexp@eptr+1,c
 12469  00174A  C08E  F018         	movff	log@x,frexp@value
 12470  00174E  C08F  F019         	movff	log@x+1,frexp@value+1
 12471  001752  C090  F01A         	movff	log@x+2,frexp@value+2
 12472  001756  EC6A  F012         	call	_frexp	;wreg free
 12473  00175A  C018  F069         	movff	?_frexp,___ftmul@f1
 12474  00175E  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
 12475  001762  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
 12476  001766  EC8D  F00D         	call	___ftmul	;wreg free
 12477  00176A  C069  F078         	movff	?___ftmul,___ftadd@f1
 12478  00176E  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 12479  001772  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 12480  001776  0E00               	movlw	0
 12481  001778  0100               	movlb	0	; () banked
 12482  00177A  6F7B               	movwf	___ftadd@f2& (0+255),b
 12483  00177C  0E80               	movlw	128
 12484  00177E  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 12485  001780  0EBF               	movlw	191
 12486  001782  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 12487  001784  ECE8  F009         	call	___ftadd	;wreg free
 12488  001788  C078  F08E         	movff	?___ftadd,log@x
 12489  00178C  C079  F08F         	movff	?___ftadd+1,log@x+1
 12490  001790  C07A  F090         	movff	?___ftadd+2,log@x+2
 12491  001794  0100               	movlb	0	; () banked
 12492  001796  0791               	decf	log@exponent& (0+255),f,b
 12493  001798  A0D8               	btfss	status,0,c
 12494  00179A  0792               	decf	(log@exponent+1)& (0+255),f,b
 12495                           
 12496                           ; BSR set to: 0
 12497  00179C  C08E  F084         	movff	log@x,eval_poly@x
 12498  0017A0  C08F  F085         	movff	log@x+1,eval_poly@x+1
 12499  0017A4  C090  F086         	movff	log@x+2,eval_poly@x+2
 12500  0017A8  0E5A               	movlw	low log@coeff
 12501  0017AA  6F87               	movwf	eval_poly@d& (0+255),b
 12502  0017AC  0E06               	movlw	high log@coeff
 12503  0017AE  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 12504  0017B0  0E00               	movlw	0
 12505  0017B2  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 12506  0017B4  0E08               	movlw	8
 12507  0017B6  6F89               	movwf	eval_poly@n& (0+255),b
 12508  0017B8  EC5F  F00F         	call	_eval_poly	;wreg free
 12509  0017BC  C084  F08E         	movff	?_eval_poly,log@x
 12510  0017C0  C085  F08F         	movff	?_eval_poly+1,log@x+1
 12511  0017C4  C086  F090         	movff	?_eval_poly+2,log@x+2
 12512  0017C8  0E72               	movlw	114
 12513  0017CA  0100               	movlb	0	; () banked
 12514  0017CC  6F6C               	movwf	___ftmul@f2& (0+255),b
 12515  0017CE  0E31               	movlw	49
 12516  0017D0  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12517  0017D2  0E3F               	movlw	63
 12518  0017D4  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12519  0017D6  C091  F020         	movff	log@exponent,___awtoft@c
 12520  0017DA  C092  F021         	movff	log@exponent+1,___awtoft@c+1
 12521  0017DE  ECB1  F018         	call	___awtoft	;wreg free
 12522  0017E2  C020  F069         	movff	?___awtoft,___ftmul@f1
 12523  0017E6  C021  F06A         	movff	?___awtoft+1,___ftmul@f1+1
 12524  0017EA  C022  F06B         	movff	?___awtoft+2,___ftmul@f1+2
 12525  0017EE  EC8D  F00D         	call	___ftmul	;wreg free
 12526  0017F2  C069  F078         	movff	?___ftmul,___ftadd@f1
 12527  0017F6  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 12528  0017FA  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 12529  0017FE  C08E  F07B         	movff	log@x,___ftadd@f2
 12530  001802  C08F  F07C         	movff	log@x+1,___ftadd@f2+1
 12531  001806  C090  F07D         	movff	log@x+2,___ftadd@f2+2
 12532  00180A  ECE8  F009         	call	___ftadd	;wreg free
 12533  00180E  C078  F08E         	movff	?___ftadd,?_log
 12534  001812  C079  F08F         	movff	?___ftadd+1,?_log+1
 12535  001816  C07A  F090         	movff	?___ftadd+2,?_log+2
 12536  00181A  0012               	return	
 12537  00181C                     __end_of_log:
 12538                           	opt stack 0
 12539                           tosu	equ	0xFFF
 12540                           tosh	equ	0xFFE
 12541                           tosl	equ	0xFFD
 12542                           pclath	equ	0xFFA
 12543                           tblptru	equ	0xFF8
 12544                           tblptrh	equ	0xFF7
 12545                           tblptrl	equ	0xFF6
 12546                           tablat	equ	0xFF5
 12547                           prodh	equ	0xFF4
 12548                           prodl	equ	0xFF3
 12549                           intcon	equ	0xFF2
 12550                           intcon2	equ	0xFF1
 12551                           postinc0	equ	0xFEE
 12552                           wreg	equ	0xFE8
 12553                           indf1	equ	0xFE7
 12554                           postdec1	equ	0xFE5
 12555                           fsr1h	equ	0xFE2
 12556                           fsr1l	equ	0xFE1
 12557                           indf2	equ	0xFDF
 12558                           postinc2	equ	0xFDE
 12559                           postdec2	equ	0xFDD
 12560                           fsr2h	equ	0xFDA
 12561                           fsr2l	equ	0xFD9
 12562                           status	equ	0xFD8
 12563                           
 12564 ;; *************** function _exp *****************
 12565 ;; Defined at:
 12566 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 12567 ;; Parameters:    Size  Location     Type
 12568 ;;  x               3   55[BANK0 ] int 
 12569 ;; Auto vars:     Size  Location     Type
 12570 ;;  exponent        2   61[BANK0 ] int 
 12571 ;;  sign            1   63[BANK0 ] unsigned char 
 12572 ;; Return value:  Size  Location     Type
 12573 ;;                  3   55[BANK0 ] unsigned char 
 12574 ;; Registers used:
 12575 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12576 ;; Tracked objects:
 12577 ;;		On entry : 0/0
 12578 ;;		On exit  : 0/0
 12579 ;;		Unchanged: 0/0
 12580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12581 ;;      Params:         0       3       0       0       0       0       0
 12582 ;;      Locals:         0       6       0       0       0       0       0
 12583 ;;      Temps:          0       0       0       0       0       0       0
 12584 ;;      Totals:         0       9       0       0       0       0       0
 12585 ;;Total ram usage:        9 bytes
 12586 ;; Hardware stack levels used:    1
 12587 ;; Hardware stack levels required when called:    6
 12588 ;; This function calls:
 12589 ;;		___awtoft
 12590 ;;		___ftdiv
 12591 ;;		___ftge
 12592 ;;		___ftmul
 12593 ;;		___ftneg
 12594 ;;		___ftsub
 12595 ;;		___fttol
 12596 ;;		_eval_poly
 12597 ;;		_floor
 12598 ;;		_ldexp
 12599 ;; This function is called by:
 12600 ;;		_pow
 12601 ;; This function uses a non-reentrant model
 12602 ;;
 12603                           
 12604                           	psect	text85
 12605  000E52                     __ptext85:
 12606                           	opt stack 0
 12607  000E52                     _exp:
 12608                           	opt stack 22
 12609                           
 12610                           ;incstack = 0
 12611  000E52  0100               	movlb	0	; () banked
 12612  000E54  5197               	movf	exp@x& (0+255),w,b
 12613  000E56  1198               	iorwf	(exp@x+1)& (0+255),w,b
 12614  000E58  1199               	iorwf	(exp@x+2)& (0+255),w,b
 12615  000E5A  A4D8               	btfss	status,2,c
 12616  000E5C  D007               	goto	l2045
 12617                           
 12618                           ; BSR set to: 0
 12619  000E5E  0E00               	movlw	0
 12620  000E60  6F97               	movwf	?_exp& (0+255),b
 12621  000E62  0E80               	movlw	128
 12622  000E64  6F98               	movwf	(?_exp+1)& (0+255),b
 12623  000E66  0E3F               	movlw	63
 12624  000E68  6F99               	movwf	(?_exp+2)& (0+255),b
 12625                           
 12626                           ; BSR set to: 0
 12627  000E6A  0012               	return	
 12628  000E6C                     l2045:
 12629                           
 12630                           ; BSR set to: 0
 12631                           
 12632                           ; BSR set to: 0
 12633  000E6C  0E72               	movlw	114
 12634  000E6E  6E18               	movwf	___ftge@ff1,c
 12635  000E70  0E31               	movlw	49
 12636  000E72  6E19               	movwf	___ftge@ff1+1,c
 12637  000E74  0E44               	movlw	68
 12638  000E76  6E1A               	movwf	___ftge@ff1+2,c
 12639  000E78  C097  F01B         	movff	exp@x,___ftge@ff2
 12640  000E7C  C098  F01C         	movff	exp@x+1,___ftge@ff2+1
 12641  000E80  C099  F01D         	movff	exp@x+2,___ftge@ff2+2
 12642  000E84  ECB2  F012         	call	___ftge	;wreg free
 12643  000E88  B0D8               	btfsc	status,0,c
 12644  000E8A  D00C               	goto	l2047
 12645  000E8C  0E00               	movlw	0
 12646  000E8E  0100               	movlb	0	; () banked
 12647  000E90  6FC5               	movwf	(_errno+1)& (0+255),b
 12648  000E92  0E22               	movlw	34
 12649  000E94  6FC4               	movwf	_errno& (0+255),b
 12650  000E96  0EFF               	movlw	255
 12651  000E98  6F97               	movwf	?_exp& (0+255),b
 12652  000E9A  0E7F               	movlw	127
 12653  000E9C  6F98               	movwf	(?_exp+1)& (0+255),b
 12654  000E9E  0E7F               	movlw	127
 12655  000EA0  6F99               	movwf	(?_exp+2)& (0+255),b
 12656                           
 12657                           ; BSR set to: 0
 12658  000EA2  0012               	return	
 12659  000EA4                     l2047:
 12660                           
 12661                           ; BSR set to: 0
 12662  000EA4  C097  F018         	movff	exp@x,___ftge@ff1
 12663  000EA8  C098  F019         	movff	exp@x+1,___ftge@ff1+1
 12664  000EAC  C099  F01A         	movff	exp@x+2,___ftge@ff1+2
 12665  000EB0  0E49               	movlw	73
 12666  000EB2  6E1B               	movwf	___ftge@ff2,c
 12667  000EB4  0E3A               	movlw	58
 12668  000EB6  6E1C               	movwf	___ftge@ff2+1,c
 12669  000EB8  0EC4               	movlw	196
 12670  000EBA  6E1D               	movwf	___ftge@ff2+2,c
 12671  000EBC  ECB2  F012         	call	___ftge	;wreg free
 12672  000EC0  B0D8               	btfsc	status,0,c
 12673  000EC2  D00C               	goto	l2048
 12674  000EC4  0E00               	movlw	0
 12675  000EC6  0100               	movlb	0	; () banked
 12676  000EC8  6FC5               	movwf	(_errno+1)& (0+255),b
 12677  000ECA  0E22               	movlw	34
 12678  000ECC  6FC4               	movwf	_errno& (0+255),b
 12679  000ECE  0E00               	movlw	0
 12680  000ED0  6F97               	movwf	?_exp& (0+255),b
 12681  000ED2  0E00               	movlw	0
 12682  000ED4  6F98               	movwf	(?_exp+1)& (0+255),b
 12683  000ED6  0E00               	movlw	0
 12684  000ED8  6F99               	movwf	(?_exp+2)& (0+255),b
 12685                           
 12686                           ; BSR set to: 0
 12687  000EDA  0012               	return	
 12688  000EDC                     l2048:
 12689                           
 12690                           ; BSR set to: 0
 12691  000EDC  0100               	movlb	0	; () banked
 12692  000EDE  AF99               	btfss	(exp@x+2)& (0+255),7,b
 12693  000EE0  D002               	goto	u7350
 12694  000EE2  0E01               	movlw	1
 12695  000EE4  D001               	goto	u7360
 12696  000EE6                     u7350:
 12697  000EE6  0E00               	movlw	0
 12698  000EE8                     u7360:
 12699  000EE8  6F9F               	movwf	exp@sign& (0+255),b
 12700                           
 12701                           ; BSR set to: 0
 12702  000EEA  519F               	movf	exp@sign& (0+255),w,b
 12703  000EEC  B4D8               	btfsc	status,2,c
 12704  000EEE  D00E               	goto	l2049
 12705                           
 12706                           ; BSR set to: 0
 12707  000EF0  C097  F018         	movff	exp@x,___ftneg@f1
 12708  000EF4  C098  F019         	movff	exp@x+1,___ftneg@f1+1
 12709  000EF8  C099  F01A         	movff	exp@x+2,___ftneg@f1+2
 12710  000EFC  EC5B  F01A         	call	___ftneg	;wreg free
 12711  000F00  C018  F097         	movff	?___ftneg,exp@x
 12712  000F04  C019  F098         	movff	?___ftneg+1,exp@x+1
 12713  000F08  C01A  F099         	movff	?___ftneg+2,exp@x+2
 12714  000F0C                     l2049:
 12715  000F0C  C097  F069         	movff	exp@x,___ftmul@f1
 12716  000F10  C098  F06A         	movff	exp@x+1,___ftmul@f1+1
 12717  000F14  C099  F06B         	movff	exp@x+2,___ftmul@f1+2
 12718  000F18  0EAA               	movlw	170
 12719  000F1A  0100               	movlb	0	; () banked
 12720  000F1C  6F6C               	movwf	___ftmul@f2& (0+255),b
 12721  000F1E  0EB8               	movlw	184
 12722  000F20  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 12723  000F22  0E3F               	movlw	63
 12724  000F24  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 12725  000F26  EC8D  F00D         	call	___ftmul	;wreg free
 12726  000F2A  C069  F097         	movff	?___ftmul,exp@x
 12727  000F2E  C06A  F098         	movff	?___ftmul+1,exp@x+1
 12728  000F32  C06B  F099         	movff	?___ftmul+2,exp@x+2
 12729  000F36  C097  F08F         	movff	exp@x,floor@x
 12730  000F3A  C098  F090         	movff	exp@x+1,floor@x+1
 12731  000F3E  C099  F091         	movff	exp@x+2,floor@x+2
 12732  000F42  ECEE  F00E         	call	_floor	;wreg free
 12733  000F46  C08F  F09A         	movff	?_floor,_exp$3248
 12734  000F4A  C090  F09B         	movff	?_floor+1,_exp$3248+1
 12735  000F4E  C091  F09C         	movff	?_floor+2,_exp$3248+2
 12736  000F52  C09A  F078         	movff	_exp$3248,___fttol@f1
 12737  000F56  C09B  F079         	movff	_exp$3248+1,___fttol@f1+1
 12738  000F5A  C09C  F07A         	movff	_exp$3248+2,___fttol@f1+2
 12739  000F5E  EC11  F00D         	call	___fttol	;wreg free
 12740  000F62  C078  F09D         	movff	?___fttol,exp@exponent
 12741  000F66  C079  F09E         	movff	?___fttol+1,exp@exponent+1
 12742  000F6A  C097  F084         	movff	exp@x,___ftsub@f1
 12743  000F6E  C098  F085         	movff	exp@x+1,___ftsub@f1+1
 12744  000F72  C099  F086         	movff	exp@x+2,___ftsub@f1+2
 12745  000F76  C09D  F020         	movff	exp@exponent,___awtoft@c
 12746  000F7A  C09E  F021         	movff	exp@exponent+1,___awtoft@c+1
 12747  000F7E  ECB1  F018         	call	___awtoft	;wreg free
 12748  000F82  C020  F087         	movff	?___awtoft,___ftsub@f2
 12749  000F86  C021  F088         	movff	?___awtoft+1,___ftsub@f2+1
 12750  000F8A  C022  F089         	movff	?___awtoft+2,___ftsub@f2+2
 12751  000F8E  ECD8  F017         	call	___ftsub	;wreg free
 12752  000F92  C084  F097         	movff	?___ftsub,exp@x
 12753  000F96  C085  F098         	movff	?___ftsub+1,exp@x+1
 12754  000F9A  C086  F099         	movff	?___ftsub+2,exp@x+2
 12755  000F9E  C097  F084         	movff	exp@x,eval_poly@x
 12756  000FA2  C098  F085         	movff	exp@x+1,eval_poly@x+1
 12757  000FA6  C099  F086         	movff	exp@x+2,eval_poly@x+2
 12758  000FAA  0E3C               	movlw	low exp@coeff
 12759  000FAC  0100               	movlb	0	; () banked
 12760  000FAE  6F87               	movwf	eval_poly@d& (0+255),b
 12761  000FB0  0E06               	movlw	high exp@coeff
 12762  000FB2  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 12763  000FB4  0E00               	movlw	0
 12764  000FB6  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 12765  000FB8  0E09               	movlw	9
 12766  000FBA  6F89               	movwf	eval_poly@n& (0+255),b
 12767  000FBC  EC5F  F00F         	call	_eval_poly	;wreg free
 12768  000FC0  C084  F08E         	movff	?_eval_poly,ldexp@value
 12769  000FC4  C085  F08F         	movff	?_eval_poly+1,ldexp@value+1
 12770  000FC8  C086  F090         	movff	?_eval_poly+2,ldexp@value+2
 12771  000FCC  C09D  F091         	movff	exp@exponent,ldexp@newexp
 12772  000FD0  C09E  F092         	movff	exp@exponent+1,ldexp@newexp+1
 12773  000FD4  ECCA  F00F         	call	_ldexp	;wreg free
 12774  000FD8  C08E  F097         	movff	?_ldexp,exp@x
 12775  000FDC  C08F  F098         	movff	?_ldexp+1,exp@x+1
 12776  000FE0  C090  F099         	movff	?_ldexp+2,exp@x+2
 12777  000FE4  0100               	movlb	0	; () banked
 12778  000FE6  519F               	movf	exp@sign& (0+255),w,b
 12779  000FE8  B4D8               	btfsc	status,2,c
 12780  000FEA  D025               	goto	l2050
 12781                           
 12782                           ; BSR set to: 0
 12783  000FEC  2997               	incf	exp@x& (0+255),w,b
 12784  000FEE  E10E               	bnz	l7504
 12785  000FF0  0E7F               	movlw	127
 12786  000FF2  1998               	xorwf	(exp@x+1)& (0+255),w,b
 12787  000FF4  E10B               	bnz	l7504
 12788  000FF6  0E7F               	movlw	127
 12789  000FF8  1999               	xorwf	(exp@x+2)& (0+255),w,b
 12790  000FFA  A4D8               	btfss	status,2,c
 12791  000FFC  D007               	goto	l2051
 12792                           
 12793                           ; BSR set to: 0
 12794  000FFE  0E00               	movlw	0
 12795  001000  6F97               	movwf	?_exp& (0+255),b
 12796  001002  0E00               	movlw	0
 12797  001004  6F98               	movwf	(?_exp+1)& (0+255),b
 12798  001006  0E00               	movlw	0
 12799  001008  6F99               	movwf	(?_exp+2)& (0+255),b
 12800                           
 12801                           ; BSR set to: 0
 12802  00100A  0012               	return	
 12803  00100C                     l2051:
 12804  00100C                     l7504:
 12805                           
 12806                           ; BSR set to: 0
 12807  00100C  0E00               	movlw	0
 12808  00100E  6E29               	movwf	___ftdiv@f1,c
 12809  001010  0E80               	movlw	128
 12810  001012  6E2A               	movwf	___ftdiv@f1+1,c
 12811  001014  0E3F               	movlw	63
 12812  001016  6E2B               	movwf	___ftdiv@f1+2,c
 12813  001018  C097  F02C         	movff	exp@x,___ftdiv@f2
 12814  00101C  C098  F02D         	movff	exp@x+1,___ftdiv@f2+1
 12815  001020  C099  F02E         	movff	exp@x+2,___ftdiv@f2+2
 12816  001024  EC08  F00E         	call	___ftdiv	;wreg free
 12817  001028  C029  F097         	movff	?___ftdiv,?_exp
 12818  00102C  C02A  F098         	movff	?___ftdiv+1,?_exp+1
 12819  001030  C02B  F099         	movff	?___ftdiv+2,?_exp+2
 12820  001034  0012               	return	
 12821  001036                     l2050:
 12822                           
 12823                           ; BSR set to: 0
 12824  001036  C097  F097         	movff	exp@x,?_exp
 12825  00103A  C098  F098         	movff	exp@x+1,?_exp+1
 12826  00103E  C099  F099         	movff	exp@x+2,?_exp+2
 12827  001042  0012               	return		;funcret
 12828  001044                     __end_of_exp:
 12829                           	opt stack 0
 12830                           tosu	equ	0xFFF
 12831                           tosh	equ	0xFFE
 12832                           tosl	equ	0xFFD
 12833                           pclath	equ	0xFFA
 12834                           tblptru	equ	0xFF8
 12835                           tblptrh	equ	0xFF7
 12836                           tblptrl	equ	0xFF6
 12837                           tablat	equ	0xFF5
 12838                           prodh	equ	0xFF4
 12839                           prodl	equ	0xFF3
 12840                           intcon	equ	0xFF2
 12841                           intcon2	equ	0xFF1
 12842                           postinc0	equ	0xFEE
 12843                           wreg	equ	0xFE8
 12844                           indf1	equ	0xFE7
 12845                           postdec1	equ	0xFE5
 12846                           fsr1h	equ	0xFE2
 12847                           fsr1l	equ	0xFE1
 12848                           indf2	equ	0xFDF
 12849                           postinc2	equ	0xFDE
 12850                           postdec2	equ	0xFDD
 12851                           fsr2h	equ	0xFDA
 12852                           fsr2l	equ	0xFD9
 12853                           status	equ	0xFD8
 12854                           
 12855 ;; *************** function _ldexp *****************
 12856 ;; Defined at:
 12857 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 12858 ;; Parameters:    Size  Location     Type
 12859 ;;  value           3   46[BANK0 ] unsigned char 
 12860 ;;  newexp          2   49[BANK0 ] int 
 12861 ;; Auto vars:     Size  Location     Type
 12862 ;;		None
 12863 ;; Return value:  Size  Location     Type
 12864 ;;                  3   46[BANK0 ] int 
 12865 ;; Registers used:
 12866 ;;		wreg, status,2, status,0
 12867 ;; Tracked objects:
 12868 ;;		On entry : 0/0
 12869 ;;		On exit  : 0/0
 12870 ;;		Unchanged: 0/0
 12871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12872 ;;      Params:         0       5       0       0       0       0       0
 12873 ;;      Locals:         0       0       0       0       0       0       0
 12874 ;;      Temps:          0       2       0       0       0       0       0
 12875 ;;      Totals:         0       7       0       0       0       0       0
 12876 ;;Total ram usage:        7 bytes
 12877 ;; Hardware stack levels used:    1
 12878 ;; Hardware stack levels required when called:    3
 12879 ;; This function calls:
 12880 ;;		Nothing
 12881 ;; This function is called by:
 12882 ;;		_exp
 12883 ;; This function uses a non-reentrant model
 12884 ;;
 12885                           
 12886                           	psect	text86
 12887  001F94                     __ptext86:
 12888                           	opt stack 0
 12889  001F94                     _ldexp:
 12890                           	opt stack 24
 12891                           
 12892                           ;incstack = 0
 12893  001F94  0100               	movlb	0	; () banked
 12894  001F96  518E               	movf	ldexp@value& (0+255),w,b
 12895  001F98  118F               	iorwf	(ldexp@value+1)& (0+255),w,b
 12896  001F9A  1190               	iorwf	(ldexp@value+2)& (0+255),w,b
 12897  001F9C  A4D8               	btfss	status,2,c
 12898  001F9E  D007               	goto	l2069
 12899                           
 12900                           ; BSR set to: 0
 12901  001FA0  0E00               	movlw	0
 12902  001FA2  6F8E               	movwf	?_ldexp& (0+255),b
 12903  001FA4  0E00               	movlw	0
 12904  001FA6  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 12905  001FA8  0E00               	movlw	0
 12906  001FAA  6F90               	movwf	(?_ldexp+2)& (0+255),b
 12907                           
 12908                           ; BSR set to: 0
 12909  001FAC  0012               	return	
 12910  001FAE                     l2069:
 12911                           
 12912                           ; BSR set to: 0
 12913                           
 12914                           ; BSR set to: 0
 12915  001FAE  5190               	movf	(ldexp@value+2)& (0+255),w,b
 12916  001FB0  0B7F               	andlw	127
 12917  001FB2  6F93               	movwf	??_ldexp& (0+255),b
 12918  001FB4  6B94               	clrf	(??_ldexp+1)& (0+255),b
 12919  001FB6  90D8               	bcf	status,0,c
 12920  001FB8  3793               	rlcf	??_ldexp& (0+255),f,b
 12921  001FBA  3794               	rlcf	(??_ldexp+1)& (0+255),f,b
 12922  001FBC  5193               	movf	??_ldexp& (0+255),w,b
 12923  001FBE  2791               	addwf	ldexp@newexp& (0+255),f,b
 12924  001FC0  5194               	movf	(??_ldexp+1)& (0+255),w,b
 12925  001FC2  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 12926  001FC4  AF8F               	btfss	(ldexp@value+1)& (0+255),7,b
 12927  001FC6  D003               	goto	u4230
 12928  001FC8  6B93               	clrf	??_ldexp& (0+255),b
 12929  001FCA  2B93               	incf	??_ldexp& (0+255),f,b
 12930  001FCC  D002               	goto	u4238
 12931  001FCE                     u4230:
 12932  001FCE  0100               	movlb	0	; () banked
 12933  001FD0  6B93               	clrf	??_ldexp& (0+255),b
 12934  001FD2                     u4238:
 12935  001FD2  5193               	movf	??_ldexp& (0+255),w,b
 12936  001FD4  2791               	addwf	ldexp@newexp& (0+255),f,b
 12937  001FD6  0E00               	movlw	0
 12938  001FD8  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 12939  001FDA  AF92               	btfss	(ldexp@newexp+1)& (0+255),7,b
 12940  001FDC  D00B               	goto	l2071
 12941                           
 12942                           ; BSR set to: 0
 12943  001FDE  0E00               	movlw	0
 12944  001FE0  6FC5               	movwf	(_errno+1)& (0+255),b
 12945  001FE2  0E22               	movlw	34
 12946  001FE4  6FC4               	movwf	_errno& (0+255),b
 12947  001FE6  0E00               	movlw	0
 12948  001FE8  6F8E               	movwf	?_ldexp& (0+255),b
 12949  001FEA  0E00               	movlw	0
 12950  001FEC  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 12951  001FEE  0E00               	movlw	0
 12952  001FF0                     L1:
 12953  001FF0  6F90               	movwf	(?_ldexp+2)& (0+255),b
 12954                           
 12955                           ; BSR set to: 0
 12956  001FF2  0012               	return	
 12957  001FF4                     l2071:
 12958                           
 12959                           ; BSR set to: 0
 12960                           
 12961                           ; BSR set to: 0
 12962  001FF4  BF92               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 12963  001FF6  D015               	goto	l2073
 12964  001FF8  0592               	decf	(ldexp@newexp+1)& (0+255),w,b
 12965  001FFA  A0D8               	btfss	status,0,c
 12966  001FFC  D012               	goto	l2073
 12967                           
 12968                           ; BSR set to: 0
 12969  001FFE  0E00               	movlw	0
 12970  002000  6FC5               	movwf	(_errno+1)& (0+255),b
 12971  002002  0E22               	movlw	34
 12972  002004  6FC4               	movwf	_errno& (0+255),b
 12973                           
 12974                           ; BSR set to: 0
 12975  002006  AF90               	btfss	(ldexp@value+2)& (0+255),7,b
 12976  002008  D006               	goto	l2074
 12977                           
 12978                           ; BSR set to: 0
 12979  00200A  0EFF               	movlw	255
 12980  00200C  6F8E               	movwf	?_ldexp& (0+255),b
 12981  00200E  0E7F               	movlw	127
 12982  002010  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 12983  002012  0EFF               	movlw	255
 12984  002014  D7ED               	goto	L1
 12985  002016                     l2074:
 12986                           
 12987                           ; BSR set to: 0
 12988                           
 12989                           ; BSR set to: 0
 12990  002016  0EFF               	movlw	255
 12991  002018  6F8E               	movwf	?_ldexp& (0+255),b
 12992  00201A  0E7F               	movlw	127
 12993  00201C  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 12994  00201E  0E7F               	movlw	127
 12995  002020  D7E7               	goto	L1
 12996  002022                     l2073:
 12997                           
 12998                           ; BSR set to: 0
 12999                           
 13000                           ; BSR set to: 0
 13001  002022  3592               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 13002  002024  3192               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 13003  002026  6F94               	movwf	(??_ldexp+1)& (0+255),b
 13004  002028  3191               	rrcf	ldexp@newexp& (0+255),w,b
 13005  00202A  6F93               	movwf	??_ldexp& (0+255),b
 13006  00202C  5190               	movf	(ldexp@value+2)& (0+255),w,b
 13007  00202E  1993               	xorwf	??_ldexp& (0+255),w,b
 13008  002030  0B80               	andlw	-128
 13009  002032  1993               	xorwf	??_ldexp& (0+255),w,b
 13010  002034  6F90               	movwf	(ldexp@value+2)& (0+255),b
 13011  002036  C091  F093         	movff	ldexp@newexp,??_ldexp
 13012  00203A  0E01               	movlw	1
 13013  00203C  1793               	andwf	??_ldexp& (0+255),f,b
 13014  00203E  3393               	rrcf	??_ldexp& (0+255),f,b
 13015  002040  3393               	rrcf	??_ldexp& (0+255),f,b
 13016  002042  518F               	movf	(ldexp@value+1)& (0+255),w,b
 13017  002044  1993               	xorwf	??_ldexp& (0+255),w,b
 13018  002046  0B7F               	andlw	-129
 13019  002048  1993               	xorwf	??_ldexp& (0+255),w,b
 13020  00204A  6F8F               	movwf	(ldexp@value+1)& (0+255),b
 13021                           
 13022                           ; BSR set to: 0
 13023                           
 13024                           ; BSR set to: 0
 13025                           
 13026                           ; BSR set to: 0
 13027  00204C  C08E  F08E         	movff	ldexp@value,?_ldexp
 13028  002050  C08F  F08F         	movff	ldexp@value+1,?_ldexp+1
 13029  002054  C090  F090         	movff	ldexp@value+2,?_ldexp+2
 13030  002058  0012               	return	
 13031  00205A                     __end_of_ldexp:
 13032                           	opt stack 0
 13033                           tosu	equ	0xFFF
 13034                           tosh	equ	0xFFE
 13035                           tosl	equ	0xFFD
 13036                           pclath	equ	0xFFA
 13037                           tblptru	equ	0xFF8
 13038                           tblptrh	equ	0xFF7
 13039                           tblptrl	equ	0xFF6
 13040                           tablat	equ	0xFF5
 13041                           prodh	equ	0xFF4
 13042                           prodl	equ	0xFF3
 13043                           intcon	equ	0xFF2
 13044                           intcon2	equ	0xFF1
 13045                           postinc0	equ	0xFEE
 13046                           wreg	equ	0xFE8
 13047                           indf1	equ	0xFE7
 13048                           postdec1	equ	0xFE5
 13049                           fsr1h	equ	0xFE2
 13050                           fsr1l	equ	0xFE1
 13051                           indf2	equ	0xFDF
 13052                           postinc2	equ	0xFDE
 13053                           postdec2	equ	0xFDD
 13054                           fsr2h	equ	0xFDA
 13055                           fsr2l	equ	0xFD9
 13056                           status	equ	0xFD8
 13057                           
 13058 ;; *************** function _floor *****************
 13059 ;; Defined at:
 13060 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 13061 ;; Parameters:    Size  Location     Type
 13062 ;;  x               3   47[BANK0 ] int 
 13063 ;; Auto vars:     Size  Location     Type
 13064 ;;  i               3   50[BANK0 ] int 
 13065 ;;  expon           2   53[BANK0 ] int 
 13066 ;; Return value:  Size  Location     Type
 13067 ;;                  3   47[BANK0 ] int 
 13068 ;; Registers used:
 13069 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13070 ;; Tracked objects:
 13071 ;;		On entry : 0/0
 13072 ;;		On exit  : 0/0
 13073 ;;		Unchanged: 0/0
 13074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13075 ;;      Params:         0       3       0       0       0       0       0
 13076 ;;      Locals:         0       5       0       0       0       0       0
 13077 ;;      Temps:          0       0       0       0       0       0       0
 13078 ;;      Totals:         0       8       0       0       0       0       0
 13079 ;;Total ram usage:        8 bytes
 13080 ;; Hardware stack levels used:    1
 13081 ;; Hardware stack levels required when called:    5
 13082 ;; This function calls:
 13083 ;;		___altoft
 13084 ;;		___ftadd
 13085 ;;		___ftge
 13086 ;;		___fttol
 13087 ;;		_frexp
 13088 ;; This function is called by:
 13089 ;;		_exp
 13090 ;; This function uses a non-reentrant model
 13091 ;;
 13092                           
 13093                           	psect	text87
 13094  001DDC                     __ptext87:
 13095                           	opt stack 0
 13096  001DDC                     _floor:
 13097                           	opt stack 22
 13098                           
 13099                           ; BSR set to: 0
 13100                           ;incstack = 0
 13101  001DDC  C08F  F018         	movff	floor@x,frexp@value
 13102  001DE0  C090  F019         	movff	floor@x+1,frexp@value+1
 13103  001DE4  C091  F01A         	movff	floor@x+2,frexp@value+2
 13104  001DE8  0E95               	movlw	low floor@expon
 13105  001DEA  6E1B               	movwf	frexp@eptr,c
 13106  001DEC  0E00               	movlw	high floor@expon
 13107  001DEE  6E1C               	movwf	frexp@eptr+1,c
 13108  001DF0  EC6A  F012         	call	_frexp	;wreg free
 13109  001DF4  0100               	movlb	0	; () banked
 13110  001DF6  AF96               	btfss	(floor@expon+1)& (0+255),7,b
 13111  001DF8  D010               	goto	l2056
 13112                           
 13113                           ; BSR set to: 0
 13114  001DFA  AF91               	btfss	(floor@x+2)& (0+255),7,b
 13115  001DFC  D007               	goto	l2057
 13116                           
 13117                           ; BSR set to: 0
 13118  001DFE  0E00               	movlw	0
 13119  001E00  6F8F               	movwf	?_floor& (0+255),b
 13120  001E02  0E80               	movlw	128
 13121  001E04  6F90               	movwf	(?_floor+1)& (0+255),b
 13122  001E06  0EBF               	movlw	191
 13123  001E08  6F91               	movwf	(?_floor+2)& (0+255),b
 13124                           
 13125                           ; BSR set to: 0
 13126  001E0A  0012               	return	
 13127  001E0C                     l2057:
 13128                           
 13129                           ; BSR set to: 0
 13130                           
 13131                           ; BSR set to: 0
 13132  001E0C  0E00               	movlw	0
 13133  001E0E  6F8F               	movwf	?_floor& (0+255),b
 13134  001E10  0E00               	movlw	0
 13135  001E12  6F90               	movwf	(?_floor+1)& (0+255),b
 13136  001E14  0E00               	movlw	0
 13137  001E16  6F91               	movwf	(?_floor+2)& (0+255),b
 13138                           
 13139                           ; BSR set to: 0
 13140  001E18  0012               	return	
 13141  001E1A                     l2056:
 13142                           
 13143                           ; BSR set to: 0
 13144                           
 13145                           ; BSR set to: 0
 13146  001E1A  5196               	movf	(floor@expon+1)& (0+255),w,b
 13147  001E1C  E104               	bnz	u6850
 13148  001E1E  0E15               	movlw	21
 13149  001E20  5D95               	subwf	floor@expon& (0+255),w,b
 13150  001E22  A0D8               	btfss	status,0,c
 13151  001E24  D007               	goto	l2059
 13152  001E26                     u6850:
 13153                           
 13154                           ; BSR set to: 0
 13155  001E26  C08F  F08F         	movff	floor@x,?_floor
 13156  001E2A  C090  F090         	movff	floor@x+1,?_floor+1
 13157  001E2E  C091  F091         	movff	floor@x+2,?_floor+2
 13158  001E32  0012               	return	
 13159  001E34                     l2059:
 13160                           
 13161                           ; BSR set to: 0
 13162                           
 13163                           ; BSR set to: 0
 13164  001E34  C08F  F078         	movff	floor@x,___fttol@f1
 13165  001E38  C090  F079         	movff	floor@x+1,___fttol@f1+1
 13166  001E3C  C091  F07A         	movff	floor@x+2,___fttol@f1+2
 13167  001E40  EC11  F00D         	call	___fttol	;wreg free
 13168  001E44  C078  F087         	movff	?___fttol,___altoft@c
 13169  001E48  C079  F088         	movff	?___fttol+1,___altoft@c+1
 13170  001E4C  C07A  F089         	movff	?___fttol+2,___altoft@c+2
 13171  001E50  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
 13172  001E54  EC7C  F013         	call	___altoft	;wreg free
 13173  001E58  C087  F092         	movff	?___altoft,floor@i
 13174  001E5C  C088  F093         	movff	?___altoft+1,floor@i+1
 13175  001E60  C089  F094         	movff	?___altoft+2,floor@i+2
 13176  001E64  C08F  F018         	movff	floor@x,___ftge@ff1
 13177  001E68  C090  F019         	movff	floor@x+1,___ftge@ff1+1
 13178  001E6C  C091  F01A         	movff	floor@x+2,___ftge@ff1+2
 13179  001E70  C092  F01B         	movff	floor@i,___ftge@ff2
 13180  001E74  C093  F01C         	movff	floor@i+1,___ftge@ff2+1
 13181  001E78  C094  F01D         	movff	floor@i+2,___ftge@ff2+2
 13182  001E7C  ECB2  F012         	call	___ftge	;wreg free
 13183  001E80  B0D8               	btfsc	status,0,c
 13184  001E82  D016               	goto	l2060
 13185  001E84  C092  F078         	movff	floor@i,___ftadd@f1
 13186  001E88  C093  F079         	movff	floor@i+1,___ftadd@f1+1
 13187  001E8C  C094  F07A         	movff	floor@i+2,___ftadd@f1+2
 13188  001E90  0E00               	movlw	0
 13189  001E92  0100               	movlb	0	; () banked
 13190  001E94  6F7B               	movwf	___ftadd@f2& (0+255),b
 13191  001E96  0E80               	movlw	128
 13192  001E98  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 13193  001E9A  0EBF               	movlw	191
 13194  001E9C  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 13195  001E9E  ECE8  F009         	call	___ftadd	;wreg free
 13196  001EA2  C078  F08F         	movff	?___ftadd,?_floor
 13197  001EA6  C079  F090         	movff	?___ftadd+1,?_floor+1
 13198  001EAA  C07A  F091         	movff	?___ftadd+2,?_floor+2
 13199  001EAE  0012               	return	
 13200  001EB0                     l2060:
 13201  001EB0  C092  F08F         	movff	floor@i,?_floor
 13202  001EB4  C093  F090         	movff	floor@i+1,?_floor+1
 13203  001EB8  C094  F091         	movff	floor@i+2,?_floor+2
 13204  001EBC  0012               	return		;funcret
 13205  001EBE                     __end_of_floor:
 13206                           	opt stack 0
 13207                           tosu	equ	0xFFF
 13208                           tosh	equ	0xFFE
 13209                           tosl	equ	0xFFD
 13210                           pclath	equ	0xFFA
 13211                           tblptru	equ	0xFF8
 13212                           tblptrh	equ	0xFF7
 13213                           tblptrl	equ	0xFF6
 13214                           tablat	equ	0xFF5
 13215                           prodh	equ	0xFF4
 13216                           prodl	equ	0xFF3
 13217                           intcon	equ	0xFF2
 13218                           intcon2	equ	0xFF1
 13219                           postinc0	equ	0xFEE
 13220                           wreg	equ	0xFE8
 13221                           indf1	equ	0xFE7
 13222                           postdec1	equ	0xFE5
 13223                           fsr1h	equ	0xFE2
 13224                           fsr1l	equ	0xFE1
 13225                           indf2	equ	0xFDF
 13226                           postinc2	equ	0xFDE
 13227                           postdec2	equ	0xFDD
 13228                           fsr2h	equ	0xFDA
 13229                           fsr2l	equ	0xFD9
 13230                           status	equ	0xFD8
 13231                           
 13232 ;; *************** function _frexp *****************
 13233 ;; Defined at:
 13234 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 13235 ;; Parameters:    Size  Location     Type
 13236 ;;  value           3   23[COMRAM] int 
 13237 ;;  eptr            2   26[COMRAM] PTR int 
 13238 ;;		 -> log@exponent(2), floor@expon(2), 
 13239 ;; Auto vars:     Size  Location     Type
 13240 ;;		None
 13241 ;; Return value:  Size  Location     Type
 13242 ;;                  3   23[COMRAM] PTR int 
 13243 ;; Registers used:
 13244 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13245 ;; Tracked objects:
 13246 ;;		On entry : 0/0
 13247 ;;		On exit  : 0/0
 13248 ;;		Unchanged: 0/0
 13249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13250 ;;      Params:         5       0       0       0       0       0       0
 13251 ;;      Locals:         0       0       0       0       0       0       0
 13252 ;;      Temps:          2       0       0       0       0       0       0
 13253 ;;      Totals:         7       0       0       0       0       0       0
 13254 ;;Total ram usage:        7 bytes
 13255 ;; Hardware stack levels used:    1
 13256 ;; Hardware stack levels required when called:    3
 13257 ;; This function calls:
 13258 ;;		Nothing
 13259 ;; This function is called by:
 13260 ;;		_floor
 13261 ;;		_log
 13262 ;; This function uses a non-reentrant model
 13263 ;;
 13264                           
 13265                           	psect	text88
 13266  0024D4                     __ptext88:
 13267                           	opt stack 0
 13268  0024D4                     _frexp:
 13269                           	opt stack 24
 13270                           
 13271                           ;incstack = 0
 13272  0024D4  5018               	movf	frexp@value,w,c
 13273  0024D6  1019               	iorwf	frexp@value+1,w,c
 13274  0024D8  101A               	iorwf	frexp@value+2,w,c
 13275  0024DA  A4D8               	btfss	status,2,c
 13276  0024DC  D00F               	goto	l2065
 13277  0024DE  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13278  0024E2  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13279  0024E6  0E00               	movlw	0
 13280  0024E8  6EDE               	movwf	postinc2,c
 13281  0024EA  0E00               	movlw	0
 13282  0024EC  6EDD               	movwf	postdec2,c
 13283  0024EE  0E00               	movlw	0
 13284  0024F0  6E18               	movwf	?_frexp,c
 13285  0024F2  0E00               	movlw	0
 13286  0024F4  6E19               	movwf	?_frexp+1,c
 13287  0024F6  0E00               	movlw	0
 13288  0024F8  6E1A               	movwf	?_frexp+2,c
 13289  0024FA  0012               	return	
 13290  0024FC                     l2065:
 13291  0024FC  501A               	movf	frexp@value+2,w,c
 13292  0024FE  0B7F               	andlw	127
 13293  002500  6E1D               	movwf	??_frexp& (0+255),c
 13294  002502  6A1E               	clrf	(??_frexp+1)& (0+255),c
 13295  002504  90D8               	bcf	status,0,c
 13296  002506  361D               	rlcf	??_frexp,f,c
 13297  002508  361E               	rlcf	??_frexp+1,f,c
 13298  00250A  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13299  00250E  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13300  002512  C01D  FFDE         	movff	??_frexp,postinc2
 13301  002516  C01E  FFDD         	movff	??_frexp+1,postdec2
 13302  00251A  AE19               	btfss	frexp@value+1,7,c
 13303  00251C  D003               	goto	u3870
 13304  00251E  6A1D               	clrf	??_frexp& (0+255),c
 13305  002520  2A1D               	incf	??_frexp& (0+255),f,c
 13306  002522  D001               	goto	u3878
 13307  002524                     u3870:
 13308  002524  6A1D               	clrf	??_frexp& (0+255),c
 13309  002526                     u3878:
 13310  002526  501D               	movf	??_frexp,w,c
 13311  002528  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13312  00252C  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13313  002530  12DE               	iorwf	postinc2,f,c
 13314  002532  0E00               	movlw	0
 13315  002534  12DD               	iorwf	postdec2,f,c
 13316  002536  C01B  FFD9         	movff	frexp@eptr,fsr2l
 13317  00253A  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 13318  00253E  0E82               	movlw	130
 13319  002540  26DE               	addwf	postinc2,f,c
 13320  002542  0EFF               	movlw	255
 13321  002544  22DD               	addwfc	postdec2,f,c
 13322  002546  801A               	bsf	frexp@value+2,0,c
 13323  002548  821A               	bsf	frexp@value+2,1,c
 13324  00254A  841A               	bsf	frexp@value+2,2,c
 13325  00254C  861A               	bsf	frexp@value+2,3,c
 13326  00254E  881A               	bsf	frexp@value+2,4,c
 13327  002550  8A1A               	bsf	frexp@value+2,5,c
 13328  002552  9C1A               	bcf	frexp@value+2,6,c
 13329  002554  9E19               	bcf	frexp@value+1,7,c
 13330  002556  C018  F018         	movff	frexp@value,?_frexp
 13331  00255A  C019  F019         	movff	frexp@value+1,?_frexp+1
 13332  00255E  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 13333  002562  0012               	return	
 13334  002564                     __end_of_frexp:
 13335                           	opt stack 0
 13336                           tosu	equ	0xFFF
 13337                           tosh	equ	0xFFE
 13338                           tosl	equ	0xFFD
 13339                           pclath	equ	0xFFA
 13340                           tblptru	equ	0xFF8
 13341                           tblptrh	equ	0xFF7
 13342                           tblptrl	equ	0xFF6
 13343                           tablat	equ	0xFF5
 13344                           prodh	equ	0xFF4
 13345                           prodl	equ	0xFF3
 13346                           intcon	equ	0xFF2
 13347                           intcon2	equ	0xFF1
 13348                           postinc0	equ	0xFEE
 13349                           wreg	equ	0xFE8
 13350                           indf1	equ	0xFE7
 13351                           postdec1	equ	0xFE5
 13352                           fsr1h	equ	0xFE2
 13353                           fsr1l	equ	0xFE1
 13354                           indf2	equ	0xFDF
 13355                           postinc2	equ	0xFDE
 13356                           postdec2	equ	0xFDD
 13357                           fsr2h	equ	0xFDA
 13358                           fsr2l	equ	0xFD9
 13359                           status	equ	0xFD8
 13360                           
 13361 ;; *************** function ___fttol *****************
 13362 ;; Defined at:
 13363 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 13364 ;; Parameters:    Size  Location     Type
 13365 ;;  f1              3   24[BANK0 ] float 
 13366 ;; Auto vars:     Size  Location     Type
 13367 ;;  lval            4   34[BANK0 ] unsigned long 
 13368 ;;  exp1            1   38[BANK0 ] unsigned char 
 13369 ;;  sign1           1   33[BANK0 ] unsigned char 
 13370 ;; Return value:  Size  Location     Type
 13371 ;;                  4   24[BANK0 ] long 
 13372 ;; Registers used:
 13373 ;;		wreg, status,2, status,0
 13374 ;; Tracked objects:
 13375 ;;		On entry : 0/0
 13376 ;;		On exit  : 0/0
 13377 ;;		Unchanged: 0/0
 13378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13379 ;;      Params:         0       4       0       0       0       0       0
 13380 ;;      Locals:         0       6       0       0       0       0       0
 13381 ;;      Temps:          0       5       0       0       0       0       0
 13382 ;;      Totals:         0      15       0       0       0       0       0
 13383 ;;Total ram usage:       15 bytes
 13384 ;; Hardware stack levels used:    1
 13385 ;; Hardware stack levels required when called:    3
 13386 ;; This function calls:
 13387 ;;		Nothing
 13388 ;; This function is called by:
 13389 ;;		_AdcConvert
 13390 ;;		_pow
 13391 ;;		_exp
 13392 ;;		_floor
 13393 ;; This function uses a non-reentrant model
 13394 ;;
 13395                           
 13396                           	psect	text89
 13397  001A22                     __ptext89:
 13398                           	opt stack 0
 13399  001A22                     ___fttol:
 13400                           	opt stack 23
 13401                           
 13402                           ;incstack = 0
 13403  001A22  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 13404  001A26  0100               	movlb	0	; () banked
 13405  001A28  6B7D               	clrf	(??___fttol+1)& (0+255),b
 13406  001A2A  6B7E               	clrf	(??___fttol+2)& (0+255),b
 13407  001A2C  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 13408  001A2E  377C               	rlcf	??___fttol& (0+255),f,b
 13409  001A30  E301               	bnc	u3781
 13410  001A32  817D               	bsf	(??___fttol+1)& (0+255),0,b
 13411  001A34                     u3781:
 13412  001A34  517C               	movf	??___fttol& (0+255),w,b
 13413  001A36  6F86               	movwf	___fttol@exp1& (0+255),b
 13414  001A38  5186               	movf	___fttol@exp1& (0+255),w,b
 13415  001A3A  A4D8               	btfss	status,2,c
 13416  001A3C  D009               	goto	l1722
 13417                           
 13418                           ; BSR set to: 0
 13419  001A3E  0E00               	movlw	0
 13420  001A40  6F78               	movwf	?___fttol& (0+255),b
 13421  001A42  0E00               	movlw	0
 13422  001A44  6F79               	movwf	(?___fttol+1)& (0+255),b
 13423  001A46  0E00               	movlw	0
 13424  001A48  6F7A               	movwf	(?___fttol+2)& (0+255),b
 13425  001A4A  0E00               	movlw	0
 13426  001A4C  6F7B               	movwf	(?___fttol+3)& (0+255),b
 13427                           
 13428                           ; BSR set to: 0
 13429  001A4E  0012               	return	
 13430  001A50                     l1722:
 13431                           
 13432                           ; BSR set to: 0
 13433                           
 13434                           ; BSR set to: 0
 13435  001A50  0E17               	movlw	23
 13436  001A52  6F7C               	movwf	??___fttol& (0+255),b
 13437  001A54  C078  F07D         	movff	___fttol@f1,??___fttol+1
 13438  001A58  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 13439  001A5C  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 13440  001A60  297C               	incf	??___fttol& (0+255),w,b
 13441  001A62  6F80               	movwf	(??___fttol+4)& (0+255),b
 13442  001A64  D004               	goto	u3800
 13443  001A66                     u3805:
 13444  001A66  90D8               	bcf	status,0,c
 13445  001A68  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 13446  001A6A  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 13447  001A6C  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 13448  001A6E                     u3800:
 13449  001A6E  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 13450  001A70  D7FA               	goto	u3805
 13451  001A72  0100               	movlb	0	; () banked
 13452  001A74  517D               	movf	(??___fttol+1)& (0+255),w,b
 13453  001A76  6F81               	movwf	___fttol@sign1& (0+255),b
 13454                           
 13455                           ; BSR set to: 0
 13456  001A78  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 13457                           
 13458                           ; BSR set to: 0
 13459  001A7A  0EFF               	movlw	255
 13460  001A7C  1778               	andwf	___fttol@f1& (0+255),f,b
 13461  001A7E  0EFF               	movlw	255
 13462  001A80  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 13463  001A82  0E00               	movlw	0
 13464  001A84  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 13465                           
 13466                           ; BSR set to: 0
 13467  001A86  5178               	movf	___fttol@f1& (0+255),w,b
 13468  001A88  6F82               	movwf	___fttol@lval& (0+255),b
 13469  001A8A  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 13470  001A8C  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 13471  001A8E  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 13472  001A90  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 13473  001A92  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 13474                           
 13475                           ; BSR set to: 0
 13476  001A94  0E8E               	movlw	142
 13477  001A96  5F86               	subwf	___fttol@exp1& (0+255),f,b
 13478                           
 13479                           ; BSR set to: 0
 13480  001A98  AF86               	btfss	___fttol@exp1& (0+255),7,b
 13481  001A9A  D016               	goto	l1724
 13482                           
 13483                           ; BSR set to: 0
 13484  001A9C  5186               	movf	___fttol@exp1& (0+255),w,b
 13485  001A9E  0A80               	xorlw	128
 13486  001AA0  0F8F               	addlw	143
 13487  001AA2  B0D8               	btfsc	status,0,c
 13488  001AA4  D009               	goto	l1725
 13489                           
 13490                           ; BSR set to: 0
 13491  001AA6  0E00               	movlw	0
 13492  001AA8  6F78               	movwf	?___fttol& (0+255),b
 13493  001AAA  0E00               	movlw	0
 13494  001AAC  6F79               	movwf	(?___fttol+1)& (0+255),b
 13495  001AAE  0E00               	movlw	0
 13496  001AB0  6F7A               	movwf	(?___fttol+2)& (0+255),b
 13497  001AB2  0E00               	movlw	0
 13498  001AB4  6F7B               	movwf	(?___fttol+3)& (0+255),b
 13499                           
 13500                           ; BSR set to: 0
 13501  001AB6  0012               	return	
 13502  001AB8                     l1725:
 13503                           
 13504                           ; BSR set to: 0
 13505                           
 13506                           ; BSR set to: 0
 13507                           
 13508                           ; BSR set to: 0
 13509  001AB8  90D8               	bcf	status,0,c
 13510  001ABA  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 13511  001ABC  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 13512  001ABE  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 13513  001AC0  3382               	rrcf	___fttol@lval& (0+255),f,b
 13514                           
 13515                           ; BSR set to: 0
 13516  001AC2  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 13517  001AC4  D7F9               	goto	l1725
 13518                           
 13519                           ; BSR set to: 0
 13520  001AC6  D015               	goto	u3840
 13521  001AC8                     l1724:
 13522                           
 13523                           ; BSR set to: 0
 13524                           
 13525                           ; BSR set to: 0
 13526  001AC8  0E17               	movlw	23
 13527  001ACA  6586               	cpfsgt	___fttol@exp1& (0+255),b
 13528  001ACC  D00F               	goto	l1730
 13529                           
 13530                           ; BSR set to: 0
 13531  001ACE  0E00               	movlw	0
 13532  001AD0  6F78               	movwf	?___fttol& (0+255),b
 13533  001AD2  0E00               	movlw	0
 13534  001AD4  6F79               	movwf	(?___fttol+1)& (0+255),b
 13535  001AD6  0E00               	movlw	0
 13536  001AD8  6F7A               	movwf	(?___fttol+2)& (0+255),b
 13537  001ADA  0E00               	movlw	0
 13538  001ADC  6F7B               	movwf	(?___fttol+3)& (0+255),b
 13539                           
 13540                           ; BSR set to: 0
 13541  001ADE  0012               	return	
 13542  001AE0                     
 13543                           ; BSR set to: 0
 13544                           
 13545                           ; BSR set to: 0
 13546  001AE0  90D8               	bcf	status,0,c
 13547  001AE2  3782               	rlcf	___fttol@lval& (0+255),f,b
 13548  001AE4  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 13549  001AE6  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 13550  001AE8  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 13551  001AEA  0786               	decf	___fttol@exp1& (0+255),f,b
 13552  001AEC                     l1730:
 13553                           
 13554                           ; BSR set to: 0
 13555                           
 13556                           ; BSR set to: 0
 13557  001AEC  5186               	movf	___fttol@exp1& (0+255),w,b
 13558  001AEE  A4D8               	btfss	status,2,c
 13559  001AF0  D7F7               	goto	l1731
 13560  001AF2                     u3840:
 13561                           
 13562                           ; BSR set to: 0
 13563                           
 13564                           ; BSR set to: 0
 13565                           
 13566                           ; BSR set to: 0
 13567  001AF2  5181               	movf	___fttol@sign1& (0+255),w,b
 13568  001AF4  B4D8               	btfsc	status,2,c
 13569  001AF6  D008               	goto	l1733
 13570                           
 13571                           ; BSR set to: 0
 13572  001AF8  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 13573  001AFA  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 13574  001AFC  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 13575  001AFE  6D82               	negf	___fttol@lval& (0+255),b
 13576  001B00  0E00               	movlw	0
 13577  001B02  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 13578  001B04  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 13579  001B06  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 13580  001B08                     l1733:
 13581                           
 13582                           ; BSR set to: 0
 13583                           
 13584                           ; BSR set to: 0
 13585  001B08  C082  F078         	movff	___fttol@lval,?___fttol
 13586  001B0C  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 13587  001B10  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 13588  001B14  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 13589  001B18  0012               	return	
 13590  001B1A                     __end_of___fttol:
 13591                           	opt stack 0
 13592                           tosu	equ	0xFFF
 13593                           tosh	equ	0xFFE
 13594                           tosl	equ	0xFFD
 13595                           pclath	equ	0xFFA
 13596                           tblptru	equ	0xFF8
 13597                           tblptrh	equ	0xFF7
 13598                           tblptrl	equ	0xFF6
 13599                           tablat	equ	0xFF5
 13600                           prodh	equ	0xFF4
 13601                           prodl	equ	0xFF3
 13602                           intcon	equ	0xFF2
 13603                           intcon2	equ	0xFF1
 13604                           postinc0	equ	0xFEE
 13605                           wreg	equ	0xFE8
 13606                           indf1	equ	0xFE7
 13607                           postdec1	equ	0xFE5
 13608                           fsr1h	equ	0xFE2
 13609                           fsr1l	equ	0xFE1
 13610                           indf2	equ	0xFDF
 13611                           postinc2	equ	0xFDE
 13612                           postdec2	equ	0xFDD
 13613                           fsr2h	equ	0xFDA
 13614                           fsr2l	equ	0xFD9
 13615                           status	equ	0xFD8
 13616                           
 13617 ;; *************** function ___ftge *****************
 13618 ;; Defined at:
 13619 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 13620 ;; Parameters:    Size  Location     Type
 13621 ;;  ff1             3   23[COMRAM] float 
 13622 ;;  ff2             3   26[COMRAM] float 
 13623 ;; Auto vars:     Size  Location     Type
 13624 ;;		None
 13625 ;; Return value:  Size  Location     Type
 13626 ;;		None               void
 13627 ;; Registers used:
 13628 ;;		wreg, status,2, status,0
 13629 ;; Tracked objects:
 13630 ;;		On entry : 0/0
 13631 ;;		On exit  : 0/0
 13632 ;;		Unchanged: 0/0
 13633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13634 ;;      Params:         6       0       0       0       0       0       0
 13635 ;;      Locals:         0       0       0       0       0       0       0
 13636 ;;      Temps:          3       0       0       0       0       0       0
 13637 ;;      Totals:         9       0       0       0       0       0       0
 13638 ;;Total ram usage:        9 bytes
 13639 ;; Hardware stack levels used:    1
 13640 ;; Hardware stack levels required when called:    3
 13641 ;; This function calls:
 13642 ;;		Nothing
 13643 ;; This function is called by:
 13644 ;;		_CheckFlashPrecentage
 13645 ;;		_pow
 13646 ;;		_exp
 13647 ;;		_floor
 13648 ;; This function uses a non-reentrant model
 13649 ;;
 13650                           
 13651                           	psect	text90
 13652  002564                     __ptext90:
 13653                           	opt stack 0
 13654  002564                     ___ftge:
 13655                           	opt stack 26
 13656                           
 13657                           ; BSR set to: 0
 13658                           ;incstack = 0
 13659  002564  AE1A               	btfss	___ftge@ff1+2,7,c
 13660  002566  D016               	goto	l1694
 13661  002568  C018  F01E         	movff	___ftge@ff1,??___ftge
 13662  00256C  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 13663  002570  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 13664  002574  1E1E               	comf	??___ftge,f,c
 13665  002576  1E1F               	comf	??___ftge+1,f,c
 13666  002578  1E20               	comf	??___ftge+2,f,c
 13667  00257A  2A1E               	incf	??___ftge,f,c
 13668  00257C  0E00               	movlw	0
 13669  00257E  221F               	addwfc	??___ftge+1,f,c
 13670  002580  2220               	addwfc	??___ftge+2,f,c
 13671  002582  0E00               	movlw	0
 13672  002584  241E               	addwf	??___ftge,w,c
 13673  002586  6E18               	movwf	___ftge@ff1,c
 13674  002588  0E00               	movlw	0
 13675  00258A  201F               	addwfc	??___ftge+1,w,c
 13676  00258C  6E19               	movwf	___ftge@ff1+1,c
 13677  00258E  0E80               	movlw	128
 13678  002590  2020               	addwfc	??___ftge+2,w,c
 13679  002592  6E1A               	movwf	___ftge@ff1+2,c
 13680  002594                     l1694:
 13681  002594  AE1D               	btfss	___ftge@ff2+2,7,c
 13682  002596  D016               	goto	l1695
 13683  002598  C01B  F01E         	movff	___ftge@ff2,??___ftge
 13684  00259C  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 13685  0025A0  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 13686  0025A4  1E1E               	comf	??___ftge,f,c
 13687  0025A6  1E1F               	comf	??___ftge+1,f,c
 13688  0025A8  1E20               	comf	??___ftge+2,f,c
 13689  0025AA  2A1E               	incf	??___ftge,f,c
 13690  0025AC  0E00               	movlw	0
 13691  0025AE  221F               	addwfc	??___ftge+1,f,c
 13692  0025B0  2220               	addwfc	??___ftge+2,f,c
 13693  0025B2  0E00               	movlw	0
 13694  0025B4  241E               	addwf	??___ftge,w,c
 13695  0025B6  6E1B               	movwf	___ftge@ff2,c
 13696  0025B8  0E00               	movlw	0
 13697  0025BA  201F               	addwfc	??___ftge+1,w,c
 13698  0025BC  6E1C               	movwf	___ftge@ff2+1,c
 13699  0025BE  0E80               	movlw	128
 13700  0025C0  2020               	addwfc	??___ftge+2,w,c
 13701  0025C2  6E1D               	movwf	___ftge@ff2+2,c
 13702  0025C4                     l1695:
 13703  0025C4  0E00               	movlw	0
 13704  0025C6  1A18               	xorwf	___ftge@ff1,f,c
 13705  0025C8  0E00               	movlw	0
 13706  0025CA  1A19               	xorwf	___ftge@ff1+1,f,c
 13707  0025CC  0E80               	movlw	128
 13708  0025CE  1A1A               	xorwf	___ftge@ff1+2,f,c
 13709  0025D0  0E00               	movlw	0
 13710  0025D2  1A1B               	xorwf	___ftge@ff2,f,c
 13711  0025D4  0E00               	movlw	0
 13712  0025D6  1A1C               	xorwf	___ftge@ff2+1,f,c
 13713  0025D8  0E80               	movlw	128
 13714  0025DA  1A1D               	xorwf	___ftge@ff2+2,f,c
 13715  0025DC  501B               	movf	___ftge@ff2,w,c
 13716  0025DE  5C18               	subwf	___ftge@ff1,w,c
 13717  0025E0  501C               	movf	___ftge@ff2+1,w,c
 13718  0025E2  5819               	subwfb	___ftge@ff1+1,w,c
 13719  0025E4  501D               	movf	___ftge@ff2+2,w,c
 13720  0025E6  581A               	subwfb	___ftge@ff1+2,w,c
 13721  0025E8  B0D8               	btfsc	status,0,c
 13722  0025EA  D002               	goto	l4326
 13723  0025EC  90D8               	bcf	status,0,c
 13724  0025EE  0012               	return	
 13725  0025F0                     l4326:
 13726  0025F0  80D8               	bsf	status,0,c
 13727  0025F2  0012               	return	
 13728  0025F4                     __end_of___ftge:
 13729                           	opt stack 0
 13730                           tosu	equ	0xFFF
 13731                           tosh	equ	0xFFE
 13732                           tosl	equ	0xFFD
 13733                           pclath	equ	0xFFA
 13734                           tblptru	equ	0xFF8
 13735                           tblptrh	equ	0xFF7
 13736                           tblptrl	equ	0xFF6
 13737                           tablat	equ	0xFF5
 13738                           prodh	equ	0xFF4
 13739                           prodl	equ	0xFF3
 13740                           intcon	equ	0xFF2
 13741                           intcon2	equ	0xFF1
 13742                           postinc0	equ	0xFEE
 13743                           wreg	equ	0xFE8
 13744                           indf1	equ	0xFE7
 13745                           postdec1	equ	0xFE5
 13746                           fsr1h	equ	0xFE2
 13747                           fsr1l	equ	0xFE1
 13748                           indf2	equ	0xFDF
 13749                           postinc2	equ	0xFDE
 13750                           postdec2	equ	0xFDD
 13751                           fsr2h	equ	0xFDA
 13752                           fsr2l	equ	0xFD9
 13753                           status	equ	0xFD8
 13754                           
 13755 ;; *************** function ___altoft *****************
 13756 ;; Defined at:
 13757 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 13758 ;; Parameters:    Size  Location     Type
 13759 ;;  c               4   39[BANK0 ] long 
 13760 ;; Auto vars:     Size  Location     Type
 13761 ;;  sign            1   47[COMRAM] unsigned char 
 13762 ;;  exp             1   46[COMRAM] unsigned char 
 13763 ;; Return value:  Size  Location     Type
 13764 ;;                  3   39[BANK0 ] float 
 13765 ;; Registers used:
 13766 ;;		wreg, status,2, status,0, cstack
 13767 ;; Tracked objects:
 13768 ;;		On entry : 0/0
 13769 ;;		On exit  : 0/0
 13770 ;;		Unchanged: 0/0
 13771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13772 ;;      Params:         0       4       0       0       0       0       0
 13773 ;;      Locals:         2       0       0       0       0       0       0
 13774 ;;      Temps:          0       4       0       0       0       0       0
 13775 ;;      Totals:         2       8       0       0       0       0       0
 13776 ;;Total ram usage:       10 bytes
 13777 ;; Hardware stack levels used:    1
 13778 ;; Hardware stack levels required when called:    4
 13779 ;; This function calls:
 13780 ;;		___ftpack
 13781 ;; This function is called by:
 13782 ;;		_floor
 13783 ;; This function uses a non-reentrant model
 13784 ;;
 13785                           
 13786                           	psect	text91
 13787  0026F8                     __ptext91:
 13788                           	opt stack 0
 13789  0026F8                     ___altoft:
 13790                           	opt stack 22
 13791                           
 13792                           ;incstack = 0
 13793  0026F8  0E00               	movlw	0
 13794  0026FA  6E30               	movwf	___altoft@sign,c
 13795  0026FC  0E8E               	movlw	142
 13796  0026FE  6E2F               	movwf	___altoft@exp,c
 13797  002700  0100               	movlb	0	; () banked
 13798  002702  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
 13799  002704  D011               	goto	l1492
 13800                           
 13801                           ; BSR set to: 0
 13802  002706  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
 13803  002708  1F89               	comf	(___altoft@c+2)& (0+255),f,b
 13804  00270A  1F88               	comf	(___altoft@c+1)& (0+255),f,b
 13805  00270C  6D87               	negf	___altoft@c& (0+255),b
 13806  00270E  0E00               	movlw	0
 13807  002710  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
 13808  002712  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
 13809  002714  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
 13810                           
 13811                           ; BSR set to: 0
 13812  002716  0E01               	movlw	1
 13813  002718  6E30               	movwf	___altoft@sign,c
 13814                           
 13815                           ; BSR set to: 0
 13816  00271A  D006               	goto	l1492
 13817  00271C                     
 13818                           ; BSR set to: 0
 13819                           
 13820                           ; BSR set to: 0
 13821  00271C  90D8               	bcf	status,0,c
 13822  00271E  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
 13823  002720  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
 13824  002722  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
 13825  002724  3387               	rrcf	___altoft@c& (0+255),f,b
 13826  002726  2A2F               	incf	___altoft@exp,f,c
 13827  002728                     l1492:
 13828                           
 13829                           ; BSR set to: 0
 13830                           
 13831                           ; BSR set to: 0
 13832  002728  0E00               	movlw	0
 13833  00272A  1587               	andwf	___altoft@c& (0+255),w,b
 13834  00272C  6F8B               	movwf	??___altoft& (0+255),b
 13835  00272E  0E00               	movlw	0
 13836  002730  1588               	andwf	(___altoft@c+1)& (0+255),w,b
 13837  002732  6F8C               	movwf	(??___altoft+1)& (0+255),b
 13838  002734  0E00               	movlw	0
 13839  002736  1589               	andwf	(___altoft@c+2)& (0+255),w,b
 13840  002738  6F8D               	movwf	(??___altoft+2)& (0+255),b
 13841  00273A  0EFF               	movlw	255
 13842  00273C  158A               	andwf	(___altoft@c+3)& (0+255),w,b
 13843  00273E  6F8E               	movwf	(??___altoft+3)& (0+255),b
 13844  002740  518B               	movf	??___altoft& (0+255),w,b
 13845  002742  118C               	iorwf	(??___altoft+1)& (0+255),w,b
 13846  002744  118D               	iorwf	(??___altoft+2)& (0+255),w,b
 13847  002746  118E               	iorwf	(??___altoft+3)& (0+255),w,b
 13848  002748  A4D8               	btfss	status,2,c
 13849  00274A  D7E8               	goto	l1493
 13850                           
 13851                           ; BSR set to: 0
 13852                           
 13853                           ; BSR set to: 0
 13854  00274C  C087  F018         	movff	___altoft@c,___ftpack@arg
 13855  002750  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
 13856  002754  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 13857  002758  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 13858  00275C  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 13859  002760  ECE2  F010         	call	___ftpack	;wreg free
 13860  002764  C018  F087         	movff	?___ftpack,?___altoft
 13861  002768  C019  F088         	movff	?___ftpack+1,?___altoft+1
 13862  00276C  C01A  F089         	movff	?___ftpack+2,?___altoft+2
 13863  002770  0012               	return	
 13864  002772                     __end_of___altoft:
 13865                           	opt stack 0
 13866                           tosu	equ	0xFFF
 13867                           tosh	equ	0xFFE
 13868                           tosl	equ	0xFFD
 13869                           pclath	equ	0xFFA
 13870                           tblptru	equ	0xFF8
 13871                           tblptrh	equ	0xFF7
 13872                           tblptrl	equ	0xFF6
 13873                           tablat	equ	0xFF5
 13874                           prodh	equ	0xFF4
 13875                           prodl	equ	0xFF3
 13876                           intcon	equ	0xFF2
 13877                           intcon2	equ	0xFF1
 13878                           postinc0	equ	0xFEE
 13879                           wreg	equ	0xFE8
 13880                           indf1	equ	0xFE7
 13881                           postdec1	equ	0xFE5
 13882                           fsr1h	equ	0xFE2
 13883                           fsr1l	equ	0xFE1
 13884                           indf2	equ	0xFDF
 13885                           postinc2	equ	0xFDE
 13886                           postdec2	equ	0xFDD
 13887                           fsr2h	equ	0xFDA
 13888                           fsr2l	equ	0xFD9
 13889                           status	equ	0xFD8
 13890                           
 13891 ;; *************** function _eval_poly *****************
 13892 ;; Defined at:
 13893 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 13894 ;; Parameters:    Size  Location     Type
 13895 ;;  x               3   36[BANK0 ] float 
 13896 ;;  d               2   39[BANK0 ] PTR const 
 13897 ;;		 -> log@coeff(27), exp@coeff(30), 
 13898 ;;  n               2   41[BANK0 ] int 
 13899 ;; Auto vars:     Size  Location     Type
 13900 ;;  res             3   43[BANK0 ] int 
 13901 ;; Return value:  Size  Location     Type
 13902 ;;                  3   36[BANK0 ] int 
 13903 ;; Registers used:
 13904 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13905 ;; Tracked objects:
 13906 ;;		On entry : 0/0
 13907 ;;		On exit  : 0/0
 13908 ;;		Unchanged: 0/0
 13909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13910 ;;      Params:         0       7       0       0       0       0       0
 13911 ;;      Locals:         0       3       0       0       0       0       0
 13912 ;;      Temps:          2       0       0       0       0       0       0
 13913 ;;      Totals:         2      10       0       0       0       0       0
 13914 ;;Total ram usage:       12 bytes
 13915 ;; Hardware stack levels used:    1
 13916 ;; Hardware stack levels required when called:    5
 13917 ;; This function calls:
 13918 ;;		___ftadd
 13919 ;;		___ftmul
 13920 ;;		___wmul
 13921 ;; This function is called by:
 13922 ;;		_exp
 13923 ;;		_log
 13924 ;; This function uses a non-reentrant model
 13925 ;;
 13926                           
 13927                           	psect	text92
 13928  001EBE                     __ptext92:
 13929                           	opt stack 0
 13930  001EBE                     _eval_poly:
 13931                           	opt stack 22
 13932                           
 13933                           ;incstack = 0
 13934  001EBE  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 13935  001EC2  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 13936  001EC6  0E00               	movlw	0
 13937  001EC8  6E1B               	movwf	___wmul@multiplicand+1,c
 13938  001ECA  0E03               	movlw	3
 13939  001ECC  6E1A               	movwf	___wmul@multiplicand,c
 13940  001ECE  EC48  F01A         	call	___wmul	;wreg free
 13941  001ED2  C087  F02F         	movff	eval_poly@d,??_eval_poly
 13942  001ED6  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 13943  001EDA  5018               	movf	?___wmul,w,c
 13944  001EDC  262F               	addwf	??_eval_poly,f,c
 13945  001EDE  5019               	movf	?___wmul+1,w,c
 13946  001EE0  2230               	addwfc	??_eval_poly+1,f,c
 13947  001EE2  C02F  FFF6         	movff	??_eval_poly,tblptrl
 13948  001EE6  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 13949  001EEA                     	if	0	;tblptru may be non-zero
 13950  001EEA                     	endif
 13951  001EEA                     	if	0	;tblptru may be non-zero
 13952  001EEA                     	endif
 13953  001EEA  0009               	tblrd		*+
 13954  001EEC  CFF5 F08B          	movff	tablat,eval_poly@res
 13955  001EF0  0009               	tblrd		*+
 13956  001EF2  CFF5 F08C          	movff	tablat,eval_poly@res+1
 13957  001EF6  000A               	tblrd		*-
 13958  001EF8  CFF5 F08D          	movff	tablat,eval_poly@res+2
 13959  001EFC  D03F               	goto	l2117
 13960  001EFE  C08B  F06C         	movff	eval_poly@res,___ftmul@f2
 13961  001F02  C08C  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
 13962  001F06  C08D  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
 13963  001F0A  C084  F069         	movff	eval_poly@x,___ftmul@f1
 13964  001F0E  C085  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
 13965  001F12  C086  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
 13966  001F16  EC8D  F00D         	call	___ftmul	;wreg free
 13967  001F1A  C069  F078         	movff	?___ftmul,___ftadd@f1
 13968  001F1E  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 13969  001F22  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 13970  001F26  0E00               	movlw	0
 13971  001F28  6E1B               	movwf	___wmul@multiplicand+1,c
 13972  001F2A  0E03               	movlw	3
 13973  001F2C  6E1A               	movwf	___wmul@multiplicand,c
 13974  001F2E  0100               	movlb	0	; () banked
 13975  001F30  0789               	decf	eval_poly@n& (0+255),f,b
 13976  001F32  A0D8               	btfss	status,0,c
 13977  001F34  078A               	decf	(eval_poly@n+1)& (0+255),f,b
 13978  001F36  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 13979  001F3A  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 13980  001F3E  EC48  F01A         	call	___wmul	;wreg free
 13981  001F42  C087  F02F         	movff	eval_poly@d,??_eval_poly
 13982  001F46  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 13983  001F4A  5018               	movf	?___wmul,w,c
 13984  001F4C  262F               	addwf	??_eval_poly,f,c
 13985  001F4E  5019               	movf	?___wmul+1,w,c
 13986  001F50  2230               	addwfc	??_eval_poly+1,f,c
 13987  001F52  C02F  FFF6         	movff	??_eval_poly,tblptrl
 13988  001F56  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 13989  001F5A                     	if	0	;tblptru may be non-zero
 13990  001F5A                     	endif
 13991  001F5A                     	if	0	;tblptru may be non-zero
 13992  001F5A                     	endif
 13993  001F5A  0009               	tblrd		*+
 13994  001F5C  CFF5 F07B          	movff	tablat,___ftadd@f2
 13995  001F60  0009               	tblrd		*+
 13996  001F62  CFF5 F07C          	movff	tablat,___ftadd@f2+1
 13997  001F66  000A               	tblrd		*-
 13998  001F68  CFF5 F07D          	movff	tablat,___ftadd@f2+2
 13999  001F6C  ECE8  F009         	call	___ftadd	;wreg free
 14000  001F70  C078  F08B         	movff	?___ftadd,eval_poly@res
 14001  001F74  C079  F08C         	movff	?___ftadd+1,eval_poly@res+1
 14002  001F78  C07A  F08D         	movff	?___ftadd+2,eval_poly@res+2
 14003  001F7C                     l2117:
 14004  001F7C  0100               	movlb	0	; () banked
 14005  001F7E  5189               	movf	eval_poly@n& (0+255),w,b
 14006  001F80  118A               	iorwf	(eval_poly@n+1)& (0+255),w,b
 14007  001F82  A4D8               	btfss	status,2,c
 14008  001F84  D7BC               	goto	l2118
 14009                           
 14010                           ; BSR set to: 0
 14011  001F86  C08B  F084         	movff	eval_poly@res,?_eval_poly
 14012  001F8A  C08C  F085         	movff	eval_poly@res+1,?_eval_poly+1
 14013  001F8E  C08D  F086         	movff	eval_poly@res+2,?_eval_poly+2
 14014                           
 14015                           ; BSR set to: 0
 14016  001F92  0012               	return		;funcret
 14017  001F94                     __end_of_eval_poly:
 14018                           	opt stack 0
 14019                           tosu	equ	0xFFF
 14020                           tosh	equ	0xFFE
 14021                           tosl	equ	0xFFD
 14022                           pclath	equ	0xFFA
 14023                           tblptru	equ	0xFF8
 14024                           tblptrh	equ	0xFF7
 14025                           tblptrl	equ	0xFF6
 14026                           tablat	equ	0xFF5
 14027                           prodh	equ	0xFF4
 14028                           prodl	equ	0xFF3
 14029                           intcon	equ	0xFF2
 14030                           intcon2	equ	0xFF1
 14031                           postinc0	equ	0xFEE
 14032                           wreg	equ	0xFE8
 14033                           indf1	equ	0xFE7
 14034                           postdec1	equ	0xFE5
 14035                           fsr1h	equ	0xFE2
 14036                           fsr1l	equ	0xFE1
 14037                           indf2	equ	0xFDF
 14038                           postinc2	equ	0xFDE
 14039                           postdec2	equ	0xFDD
 14040                           fsr2h	equ	0xFDA
 14041                           fsr2l	equ	0xFD9
 14042                           status	equ	0xFD8
 14043                           
 14044 ;; *************** function ___wmul *****************
 14045 ;; Defined at:
 14046 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 14047 ;; Parameters:    Size  Location     Type
 14048 ;;  multiplier      2   23[COMRAM] unsigned int 
 14049 ;;  multiplicand    2   25[COMRAM] unsigned int 
 14050 ;; Auto vars:     Size  Location     Type
 14051 ;;  product         2   27[COMRAM] unsigned int 
 14052 ;; Return value:  Size  Location     Type
 14053 ;;                  2   23[COMRAM] unsigned int 
 14054 ;; Registers used:
 14055 ;;		wreg, status,2, status,0, prodl, prodh
 14056 ;; Tracked objects:
 14057 ;;		On entry : 0/0
 14058 ;;		On exit  : 0/0
 14059 ;;		Unchanged: 0/0
 14060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14061 ;;      Params:         4       0       0       0       0       0       0
 14062 ;;      Locals:         2       0       0       0       0       0       0
 14063 ;;      Temps:          0       0       0       0       0       0       0
 14064 ;;      Totals:         6       0       0       0       0       0       0
 14065 ;;Total ram usage:        6 bytes
 14066 ;; Hardware stack levels used:    1
 14067 ;; Hardware stack levels required when called:    3
 14068 ;; This function calls:
 14069 ;;		Nothing
 14070 ;; This function is called by:
 14071 ;;		_eval_poly
 14072 ;; This function uses a non-reentrant model
 14073 ;;
 14074                           
 14075                           	psect	text93
 14076  003490                     __ptext93:
 14077                           	opt stack 0
 14078  003490                     ___wmul:
 14079                           	opt stack 23
 14080                           
 14081                           ; BSR set to: 0
 14082                           ;incstack = 0
 14083  003490  5018               	movf	___wmul@multiplier,w,c
 14084  003492  021A               	mulwf	___wmul@multiplicand,c
 14085  003494  CFF3 F01C          	movff	prodl,___wmul@product
 14086  003498  CFF4 F01D          	movff	prodh,___wmul@product+1
 14087  00349C  5018               	movf	___wmul@multiplier,w,c
 14088  00349E  021B               	mulwf	___wmul@multiplicand+1,c
 14089  0034A0  50F3               	movf	prodl,w,c
 14090  0034A2  261D               	addwf	___wmul@product+1,f,c
 14091  0034A4  5019               	movf	___wmul@multiplier+1,w,c
 14092  0034A6  021A               	mulwf	___wmul@multiplicand,c
 14093  0034A8  50F3               	movf	prodl,w,c
 14094  0034AA  261D               	addwf	___wmul@product+1,f,c
 14095  0034AC  C01C  F018         	movff	___wmul@product,?___wmul
 14096  0034B0  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 14097  0034B4  0012               	return	
 14098  0034B6                     __end_of___wmul:
 14099                           	opt stack 0
 14100                           tosu	equ	0xFFF
 14101                           tosh	equ	0xFFE
 14102                           tosl	equ	0xFFD
 14103                           pclath	equ	0xFFA
 14104                           tblptru	equ	0xFF8
 14105                           tblptrh	equ	0xFF7
 14106                           tblptrl	equ	0xFF6
 14107                           tablat	equ	0xFF5
 14108                           prodh	equ	0xFF4
 14109                           prodl	equ	0xFF3
 14110                           intcon	equ	0xFF2
 14111                           intcon2	equ	0xFF1
 14112                           postinc0	equ	0xFEE
 14113                           wreg	equ	0xFE8
 14114                           indf1	equ	0xFE7
 14115                           postdec1	equ	0xFE5
 14116                           fsr1h	equ	0xFE2
 14117                           fsr1l	equ	0xFE1
 14118                           indf2	equ	0xFDF
 14119                           postinc2	equ	0xFDE
 14120                           postdec2	equ	0xFDD
 14121                           fsr2h	equ	0xFDA
 14122                           fsr2l	equ	0xFD9
 14123                           status	equ	0xFD8
 14124                           
 14125 ;; *************** function ___ftmul *****************
 14126 ;; Defined at:
 14127 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 14128 ;; Parameters:    Size  Location     Type
 14129 ;;  f1              3    9[BANK0 ] float 
 14130 ;;  f2              3   12[BANK0 ] float 
 14131 ;; Auto vars:     Size  Location     Type
 14132 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 14133 ;;  sign            1   23[BANK0 ] unsigned char 
 14134 ;;  cntr            1   22[BANK0 ] unsigned char 
 14135 ;;  exp             1   18[BANK0 ] unsigned char 
 14136 ;; Return value:  Size  Location     Type
 14137 ;;                  3    9[BANK0 ] float 
 14138 ;; Registers used:
 14139 ;;		wreg, status,2, status,0, cstack
 14140 ;; Tracked objects:
 14141 ;;		On entry : 0/0
 14142 ;;		On exit  : 0/0
 14143 ;;		Unchanged: 0/0
 14144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14145 ;;      Params:         0       6       0       0       0       0       0
 14146 ;;      Locals:         0       6       0       0       0       0       0
 14147 ;;      Temps:          0       3       0       0       0       0       0
 14148 ;;      Totals:         0      15       0       0       0       0       0
 14149 ;;Total ram usage:       15 bytes
 14150 ;; Hardware stack levels used:    1
 14151 ;; Hardware stack levels required when called:    4
 14152 ;; This function calls:
 14153 ;;		___ftpack
 14154 ;; This function is called by:
 14155 ;;		_AdcConvert
 14156 ;;		_CheckFlashPrecentage
 14157 ;;		_pow
 14158 ;;		_exp
 14159 ;;		_log
 14160 ;;		_eval_poly
 14161 ;; This function uses a non-reentrant model
 14162 ;;
 14163                           
 14164                           	psect	text94
 14165  001B1A                     __ptext94:
 14166                           	opt stack 0
 14167  001B1A                     ___ftmul:
 14168                           	opt stack 25
 14169                           
 14170                           ;incstack = 0
 14171  001B1A  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
 14172  001B1E  0100               	movlb	0	; () banked
 14173  001B20  6B70               	clrf	(??___ftmul+1)& (0+255),b
 14174  001B22  6B71               	clrf	(??___ftmul+2)& (0+255),b
 14175  001B24  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 14176  001B26  376F               	rlcf	??___ftmul& (0+255),f,b
 14177  001B28  E301               	bnc	u6491
 14178  001B2A  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 14179  001B2C                     u6491:
 14180  001B2C  516F               	movf	??___ftmul& (0+255),w,b
 14181  001B2E  6F72               	movwf	___ftmul@exp& (0+255),b
 14182  001B30  5172               	movf	___ftmul@exp& (0+255),w,b
 14183  001B32  A4D8               	btfss	status,2,c
 14184  001B34  D007               	goto	l1701
 14185                           
 14186                           ; BSR set to: 0
 14187  001B36  0E00               	movlw	0
 14188  001B38  6F69               	movwf	?___ftmul& (0+255),b
 14189  001B3A  0E00               	movlw	0
 14190  001B3C  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 14191  001B3E  0E00               	movlw	0
 14192  001B40  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 14193                           
 14194                           ; BSR set to: 0
 14195  001B42  0012               	return	
 14196  001B44                     l1701:
 14197                           
 14198                           ; BSR set to: 0
 14199                           
 14200                           ; BSR set to: 0
 14201  001B44  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
 14202  001B48  6B70               	clrf	(??___ftmul+1)& (0+255),b
 14203  001B4A  6B71               	clrf	(??___ftmul+2)& (0+255),b
 14204  001B4C  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 14205  001B4E  376F               	rlcf	??___ftmul& (0+255),f,b
 14206  001B50  E301               	bnc	u6511
 14207  001B52  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 14208  001B54                     u6511:
 14209  001B54  516F               	movf	??___ftmul& (0+255),w,b
 14210  001B56  6F77               	movwf	___ftmul@sign& (0+255),b
 14211  001B58  5177               	movf	___ftmul@sign& (0+255),w,b
 14212  001B5A  A4D8               	btfss	status,2,c
 14213  001B5C  D007               	goto	l1703
 14214                           
 14215                           ; BSR set to: 0
 14216  001B5E  0E00               	movlw	0
 14217  001B60  6F69               	movwf	?___ftmul& (0+255),b
 14218  001B62  0E00               	movlw	0
 14219  001B64  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 14220  001B66  0E00               	movlw	0
 14221  001B68  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 14222                           
 14223                           ; BSR set to: 0
 14224  001B6A  0012               	return	
 14225  001B6C                     l1703:
 14226                           
 14227                           ; BSR set to: 0
 14228                           
 14229                           ; BSR set to: 0
 14230  001B6C  5177               	movf	___ftmul@sign& (0+255),w,b
 14231  001B6E  0F7B               	addlw	123
 14232  001B70  2772               	addwf	___ftmul@exp& (0+255),f,b
 14233                           
 14234                           ; BSR set to: 0
 14235  001B72  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
 14236  001B76  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 14237  001B78  1B77               	xorwf	___ftmul@sign& (0+255),f,b
 14238  001B7A  0E80               	movlw	128
 14239  001B7C  1777               	andwf	___ftmul@sign& (0+255),f,b
 14240                           
 14241                           ; BSR set to: 0
 14242  001B7E  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 14243                           
 14244                           ; BSR set to: 0
 14245  001B80  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 14246                           
 14247                           ; BSR set to: 0
 14248  001B82  0EFF               	movlw	255
 14249  001B84  176C               	andwf	___ftmul@f2& (0+255),f,b
 14250  001B86  0EFF               	movlw	255
 14251  001B88  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 14252  001B8A  0E00               	movlw	0
 14253  001B8C  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 14254                           
 14255                           ; BSR set to: 0
 14256  001B8E  0E00               	movlw	0
 14257  001B90  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
 14258  001B92  0E00               	movlw	0
 14259  001B94  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 14260  001B96  0E00               	movlw	0
 14261  001B98  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 14262                           
 14263                           ; BSR set to: 0
 14264  001B9A  0E07               	movlw	7
 14265  001B9C  6F76               	movwf	___ftmul@cntr& (0+255),b
 14266  001B9E                     
 14267                           ; BSR set to: 0
 14268                           
 14269                           ; BSR set to: 0
 14270  001B9E  A169               	btfss	___ftmul@f1& (0+255),0,b
 14271  001BA0  D006               	goto	l1705
 14272                           
 14273                           ; BSR set to: 0
 14274  001BA2  516C               	movf	___ftmul@f2& (0+255),w,b
 14275  001BA4  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 14276  001BA6  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 14277  001BA8  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 14278  001BAA  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 14279  001BAC  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 14280  001BAE                     l1705:
 14281                           
 14282                           ; BSR set to: 0
 14283                           
 14284                           ; BSR set to: 0
 14285  001BAE  90D8               	bcf	status,0,c
 14286  001BB0  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 14287  001BB2  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 14288  001BB4  3369               	rrcf	___ftmul@f1& (0+255),f,b
 14289  001BB6  90D8               	bcf	status,0,c
 14290  001BB8  376C               	rlcf	___ftmul@f2& (0+255),f,b
 14291  001BBA  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 14292  001BBC  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 14293                           
 14294                           ; BSR set to: 0
 14295  001BBE  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 14296  001BC0  D7EE               	goto	l1704
 14297                           
 14298                           ; BSR set to: 0
 14299                           
 14300                           ; BSR set to: 0
 14301  001BC2  0E09               	movlw	9
 14302  001BC4  6F76               	movwf	___ftmul@cntr& (0+255),b
 14303  001BC6                     
 14304                           ; BSR set to: 0
 14305                           
 14306                           ; BSR set to: 0
 14307  001BC6  A169               	btfss	___ftmul@f1& (0+255),0,b
 14308  001BC8  D006               	goto	l1708
 14309                           
 14310                           ; BSR set to: 0
 14311  001BCA  516C               	movf	___ftmul@f2& (0+255),w,b
 14312  001BCC  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 14313  001BCE  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 14314  001BD0  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 14315  001BD2  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 14316  001BD4  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 14317  001BD6                     l1708:
 14318                           
 14319                           ; BSR set to: 0
 14320                           
 14321                           ; BSR set to: 0
 14322  001BD6  90D8               	bcf	status,0,c
 14323  001BD8  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 14324  001BDA  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 14325  001BDC  3369               	rrcf	___ftmul@f1& (0+255),f,b
 14326  001BDE  90D8               	bcf	status,0,c
 14327  001BE0  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 14328  001BE2  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 14329  001BE4  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 14330                           
 14331                           ; BSR set to: 0
 14332  001BE6  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 14333  001BE8  D7EE               	goto	l1707
 14334                           
 14335                           ; BSR set to: 0
 14336                           
 14337                           ; BSR set to: 0
 14338  001BEA  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 14339  001BEE  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 14340  001BF2  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 14341  001BF6  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
 14342  001BFA  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
 14343  001BFE  ECE2  F010         	call	___ftpack	;wreg free
 14344  001C02  C018  F069         	movff	?___ftpack,?___ftmul
 14345  001C06  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
 14346  001C0A  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
 14347  001C0E  0012               	return	
 14348  001C10                     __end_of___ftmul:
 14349                           	opt stack 0
 14350                           tosu	equ	0xFFF
 14351                           tosh	equ	0xFFE
 14352                           tosl	equ	0xFFD
 14353                           pclath	equ	0xFFA
 14354                           tblptru	equ	0xFF8
 14355                           tblptrh	equ	0xFF7
 14356                           tblptrl	equ	0xFF6
 14357                           tablat	equ	0xFF5
 14358                           prodh	equ	0xFF4
 14359                           prodl	equ	0xFF3
 14360                           intcon	equ	0xFF2
 14361                           intcon2	equ	0xFF1
 14362                           postinc0	equ	0xFEE
 14363                           wreg	equ	0xFE8
 14364                           indf1	equ	0xFE7
 14365                           postdec1	equ	0xFE5
 14366                           fsr1h	equ	0xFE2
 14367                           fsr1l	equ	0xFE1
 14368                           indf2	equ	0xFDF
 14369                           postinc2	equ	0xFDE
 14370                           postdec2	equ	0xFDD
 14371                           fsr2h	equ	0xFDA
 14372                           fsr2l	equ	0xFD9
 14373                           status	equ	0xFD8
 14374                           
 14375 ;; *************** function ___ftsub *****************
 14376 ;; Defined at:
 14377 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 14378 ;; Parameters:    Size  Location     Type
 14379 ;;  f1              3   36[BANK0 ] float 
 14380 ;;  f2              3   39[BANK0 ] float 
 14381 ;; Auto vars:     Size  Location     Type
 14382 ;;		None
 14383 ;; Return value:  Size  Location     Type
 14384 ;;                  3   36[BANK0 ] float 
 14385 ;; Registers used:
 14386 ;;		wreg, status,2, status,0, cstack
 14387 ;; Tracked objects:
 14388 ;;		On entry : 0/0
 14389 ;;		On exit  : 0/0
 14390 ;;		Unchanged: 0/0
 14391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14392 ;;      Params:         0       6       0       0       0       0       0
 14393 ;;      Locals:         0       0       0       0       0       0       0
 14394 ;;      Temps:          0       0       0       0       0       0       0
 14395 ;;      Totals:         0       6       0       0       0       0       0
 14396 ;;Total ram usage:        6 bytes
 14397 ;; Hardware stack levels used:    1
 14398 ;; Hardware stack levels required when called:    5
 14399 ;; This function calls:
 14400 ;;		___ftadd
 14401 ;; This function is called by:
 14402 ;;		_exp
 14403 ;; This function uses a non-reentrant model
 14404 ;;
 14405                           
 14406                           	psect	text95
 14407  002FB0                     __ptext95:
 14408                           	opt stack 0
 14409  002FB0                     ___ftsub:
 14410                           	opt stack 22
 14411                           
 14412                           ;incstack = 0
 14413  002FB0  0100               	movlb	0	; () banked
 14414  002FB2  5187               	movf	___ftsub@f2& (0+255),w,b
 14415  002FB4  1188               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 14416  002FB6  1189               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 14417  002FB8  B4D8               	btfsc	status,2,c
 14418  002FBA  D006               	goto	l1718
 14419                           
 14420                           ; BSR set to: 0
 14421  002FBC  0E00               	movlw	0
 14422  002FBE  1B87               	xorwf	___ftsub@f2& (0+255),f,b
 14423  002FC0  0E00               	movlw	0
 14424  002FC2  1B88               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 14425  002FC4  0E80               	movlw	128
 14426  002FC6  1B89               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 14427  002FC8                     l1718:
 14428                           
 14429                           ; BSR set to: 0
 14430                           
 14431                           ; BSR set to: 0
 14432  002FC8  C084  F078         	movff	___ftsub@f1,___ftadd@f1
 14433  002FCC  C085  F079         	movff	___ftsub@f1+1,___ftadd@f1+1
 14434  002FD0  C086  F07A         	movff	___ftsub@f1+2,___ftadd@f1+2
 14435  002FD4  C087  F07B         	movff	___ftsub@f2,___ftadd@f2
 14436  002FD8  C088  F07C         	movff	___ftsub@f2+1,___ftadd@f2+1
 14437  002FDC  C089  F07D         	movff	___ftsub@f2+2,___ftadd@f2+2
 14438  002FE0  ECE8  F009         	call	___ftadd	;wreg free
 14439  002FE4  C078  F084         	movff	?___ftadd,?___ftsub
 14440  002FE8  C079  F085         	movff	?___ftadd+1,?___ftsub+1
 14441  002FEC  C07A  F086         	movff	?___ftadd+2,?___ftsub+2
 14442  002FF0  0012               	return	
 14443  002FF2                     __end_of___ftsub:
 14444                           	opt stack 0
 14445                           tosu	equ	0xFFF
 14446                           tosh	equ	0xFFE
 14447                           tosl	equ	0xFFD
 14448                           pclath	equ	0xFFA
 14449                           tblptru	equ	0xFF8
 14450                           tblptrh	equ	0xFF7
 14451                           tblptrl	equ	0xFF6
 14452                           tablat	equ	0xFF5
 14453                           prodh	equ	0xFF4
 14454                           prodl	equ	0xFF3
 14455                           intcon	equ	0xFF2
 14456                           intcon2	equ	0xFF1
 14457                           postinc0	equ	0xFEE
 14458                           wreg	equ	0xFE8
 14459                           indf1	equ	0xFE7
 14460                           postdec1	equ	0xFE5
 14461                           fsr1h	equ	0xFE2
 14462                           fsr1l	equ	0xFE1
 14463                           indf2	equ	0xFDF
 14464                           postinc2	equ	0xFDE
 14465                           postdec2	equ	0xFDD
 14466                           fsr2h	equ	0xFDA
 14467                           fsr2l	equ	0xFD9
 14468                           status	equ	0xFD8
 14469                           
 14470 ;; *************** function ___ftadd *****************
 14471 ;; Defined at:
 14472 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 14473 ;; Parameters:    Size  Location     Type
 14474 ;;  f1              3   24[BANK0 ] float 
 14475 ;;  f2              3   27[BANK0 ] float 
 14476 ;; Auto vars:     Size  Location     Type
 14477 ;;  exp1            1   35[BANK0 ] unsigned char 
 14478 ;;  exp2            1   34[BANK0 ] unsigned char 
 14479 ;;  sign            1   33[BANK0 ] unsigned char 
 14480 ;; Return value:  Size  Location     Type
 14481 ;;                  3   24[BANK0 ] float 
 14482 ;; Registers used:
 14483 ;;		wreg, status,2, status,0, cstack
 14484 ;; Tracked objects:
 14485 ;;		On entry : 0/0
 14486 ;;		On exit  : 0/0
 14487 ;;		Unchanged: 0/0
 14488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14489 ;;      Params:         0       6       0       0       0       0       0
 14490 ;;      Locals:         0       3       0       0       0       0       0
 14491 ;;      Temps:          0       3       0       0       0       0       0
 14492 ;;      Totals:         0      12       0       0       0       0       0
 14493 ;;Total ram usage:       12 bytes
 14494 ;; Hardware stack levels used:    1
 14495 ;; Hardware stack levels required when called:    4
 14496 ;; This function calls:
 14497 ;;		___ftpack
 14498 ;; This function is called by:
 14499 ;;		___ftsub
 14500 ;;		_floor
 14501 ;;		_log
 14502 ;;		_eval_poly
 14503 ;; This function uses a non-reentrant model
 14504 ;;
 14505                           
 14506                           	psect	text96
 14507  0013D0                     __ptext96:
 14508                           	opt stack 0
 14509  0013D0                     ___ftadd:
 14510                           	opt stack 22
 14511                           
 14512                           ;incstack = 0
 14513  0013D0  C07A  F07E         	movff	___ftadd@f1+2,??___ftadd
 14514  0013D4  0100               	movlb	0	; () banked
 14515  0013D6  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 14516  0013D8  6B80               	clrf	(??___ftadd+2)& (0+255),b
 14517  0013DA  3579               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 14518  0013DC  377E               	rlcf	??___ftadd& (0+255),f,b
 14519  0013DE  E301               	bnc	u6281
 14520  0013E0  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 14521  0013E2                     u6281:
 14522  0013E2  517E               	movf	??___ftadd& (0+255),w,b
 14523  0013E4  6F83               	movwf	___ftadd@exp1& (0+255),b
 14524  0013E6  C07D  F07E         	movff	___ftadd@f2+2,??___ftadd
 14525  0013EA  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 14526  0013EC  6B80               	clrf	(??___ftadd+2)& (0+255),b
 14527  0013EE  357C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 14528  0013F0  377E               	rlcf	??___ftadd& (0+255),f,b
 14529  0013F2  E301               	bnc	u6291
 14530  0013F4  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 14531  0013F6                     u6291:
 14532  0013F6  517E               	movf	??___ftadd& (0+255),w,b
 14533  0013F8  6F82               	movwf	___ftadd@exp2& (0+255),b
 14534                           
 14535                           ; BSR set to: 0
 14536  0013FA  5183               	movf	___ftadd@exp1& (0+255),w,b
 14537  0013FC  B4D8               	btfsc	status,2,c
 14538  0013FE  D00B               	goto	u6320
 14539                           
 14540                           ; BSR set to: 0
 14541  001400  5182               	movf	___ftadd@exp2& (0+255),w,b
 14542  001402  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 14543  001404  B0D8               	btfsc	status,0,c
 14544  001406  D00E               	goto	l1653
 14545                           
 14546                           ; BSR set to: 0
 14547  001408  5183               	movf	___ftadd@exp1& (0+255),w,b
 14548  00140A  0800               	sublw	0
 14549  00140C  2582               	addwf	___ftadd@exp2& (0+255),w,b
 14550  00140E  6F7E               	movwf	??___ftadd& (0+255),b
 14551  001410  0E18               	movlw	24
 14552  001412  657E               	cpfsgt	??___ftadd& (0+255),b
 14553  001414  D007               	goto	l1653
 14554  001416                     u6320:
 14555                           
 14556                           ; BSR set to: 0
 14557  001416  C07B  F078         	movff	___ftadd@f2,?___ftadd
 14558  00141A  C07C  F079         	movff	___ftadd@f2+1,?___ftadd+1
 14559  00141E  C07D  F07A         	movff	___ftadd@f2+2,?___ftadd+2
 14560  001422  0012               	return	
 14561  001424                     l1653:
 14562                           
 14563                           ; BSR set to: 0
 14564                           
 14565                           ; BSR set to: 0
 14566  001424  5182               	movf	___ftadd@exp2& (0+255),w,b
 14567  001426  B4D8               	btfsc	status,2,c
 14568  001428  D00B               	goto	u6350
 14569                           
 14570                           ; BSR set to: 0
 14571  00142A  5183               	movf	___ftadd@exp1& (0+255),w,b
 14572  00142C  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 14573  00142E  B0D8               	btfsc	status,0,c
 14574  001430  D00E               	goto	l1657
 14575                           
 14576                           ; BSR set to: 0
 14577  001432  5182               	movf	___ftadd@exp2& (0+255),w,b
 14578  001434  0800               	sublw	0
 14579  001436  2583               	addwf	___ftadd@exp1& (0+255),w,b
 14580  001438  6F7E               	movwf	??___ftadd& (0+255),b
 14581  00143A  0E18               	movlw	24
 14582  00143C  657E               	cpfsgt	??___ftadd& (0+255),b
 14583  00143E  D007               	goto	l1657
 14584  001440                     u6350:
 14585                           
 14586                           ; BSR set to: 0
 14587  001440  C078  F078         	movff	___ftadd@f1,?___ftadd
 14588  001444  C079  F079         	movff	___ftadd@f1+1,?___ftadd+1
 14589  001448  C07A  F07A         	movff	___ftadd@f1+2,?___ftadd+2
 14590  00144C  0012               	return	
 14591  00144E                     l1657:
 14592                           
 14593                           ; BSR set to: 0
 14594                           
 14595                           ; BSR set to: 0
 14596  00144E  0E06               	movlw	6
 14597  001450  6F81               	movwf	___ftadd@sign& (0+255),b
 14598                           
 14599                           ; BSR set to: 0
 14600  001452  BF7A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 14601                           
 14602                           ; BSR set to: 0
 14603  001454  8F81               	bsf	___ftadd@sign& (0+255),7,b
 14604                           
 14605                           ; BSR set to: 0
 14606                           
 14607                           ; BSR set to: 0
 14608  001456  BF7D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 14609                           
 14610                           ; BSR set to: 0
 14611  001458  8D81               	bsf	___ftadd@sign& (0+255),6,b
 14612                           
 14613                           ; BSR set to: 0
 14614  00145A  8F79               	bsf	(___ftadd@f1+1)& (0+255),7,b
 14615                           
 14616                           ; BSR set to: 0
 14617  00145C  0EFF               	movlw	255
 14618  00145E  1778               	andwf	___ftadd@f1& (0+255),f,b
 14619  001460  0EFF               	movlw	255
 14620  001462  1779               	andwf	(___ftadd@f1+1)& (0+255),f,b
 14621  001464  0E00               	movlw	0
 14622  001466  177A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 14623  001468  8F7C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 14624                           
 14625                           ; BSR set to: 0
 14626  00146A  0EFF               	movlw	255
 14627  00146C  177B               	andwf	___ftadd@f2& (0+255),f,b
 14628  00146E  0EFF               	movlw	255
 14629  001470  177C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 14630  001472  0E00               	movlw	0
 14631  001474  177D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 14632                           
 14633                           ; BSR set to: 0
 14634  001476  5182               	movf	___ftadd@exp2& (0+255),w,b
 14635  001478  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 14636  00147A  B0D8               	btfsc	status,0,c
 14637  00147C  D01B               	goto	l1662
 14638  00147E                     u6380:
 14639                           
 14640                           ; BSR set to: 0
 14641                           
 14642                           ; BSR set to: 0
 14643  00147E  90D8               	bcf	status,0,c
 14644  001480  377B               	rlcf	___ftadd@f2& (0+255),f,b
 14645  001482  377C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 14646  001484  377D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 14647  001486  0782               	decf	___ftadd@exp2& (0+255),f,b
 14648                           
 14649                           ; BSR set to: 0
 14650  001488  5183               	movf	___ftadd@exp1& (0+255),w,b
 14651  00148A  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 14652  00148C  B4D8               	btfsc	status,2,c
 14653  00148E  D00D               	goto	l1667
 14654                           
 14655                           ; BSR set to: 0
 14656  001490  0781               	decf	___ftadd@sign& (0+255),f,b
 14657  001492  C081  F07E         	movff	___ftadd@sign,??___ftadd
 14658  001496  0E07               	movlw	7
 14659  001498  177E               	andwf	??___ftadd& (0+255),f,b
 14660  00149A  B4D8               	btfsc	status,2,c
 14661  00149C  D006               	goto	l1667
 14662  00149E  D7EF               	goto	u6380
 14663  0014A0                     
 14664                           ; BSR set to: 0
 14665                           
 14666                           ; BSR set to: 0
 14667  0014A0  90D8               	bcf	status,0,c
 14668  0014A2  337A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 14669  0014A4  3379               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 14670  0014A6  3378               	rrcf	___ftadd@f1& (0+255),f,b
 14671  0014A8  2B83               	incf	___ftadd@exp1& (0+255),f,b
 14672  0014AA                     l1667:
 14673                           
 14674                           ; BSR set to: 0
 14675                           
 14676                           ; BSR set to: 0
 14677  0014AA  5182               	movf	___ftadd@exp2& (0+255),w,b
 14678  0014AC  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 14679  0014AE  B4D8               	btfsc	status,2,c
 14680  0014B0  D01F               	goto	u6450
 14681  0014B2  D7F6               	goto	l1668
 14682  0014B4                     l1662:
 14683                           
 14684                           ; BSR set to: 0
 14685                           
 14686                           ; BSR set to: 0
 14687  0014B4  5183               	movf	___ftadd@exp1& (0+255),w,b
 14688  0014B6  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 14689  0014B8  B0D8               	btfsc	status,0,c
 14690  0014BA  D01A               	goto	u6450
 14691  0014BC                     u6420:
 14692                           
 14693                           ; BSR set to: 0
 14694                           
 14695                           ; BSR set to: 0
 14696  0014BC  90D8               	bcf	status,0,c
 14697  0014BE  3778               	rlcf	___ftadd@f1& (0+255),f,b
 14698  0014C0  3779               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 14699  0014C2  377A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 14700  0014C4  0783               	decf	___ftadd@exp1& (0+255),f,b
 14701                           
 14702                           ; BSR set to: 0
 14703  0014C6  5183               	movf	___ftadd@exp1& (0+255),w,b
 14704  0014C8  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 14705  0014CA  B4D8               	btfsc	status,2,c
 14706  0014CC  D00D               	goto	l1676
 14707                           
 14708                           ; BSR set to: 0
 14709  0014CE  0781               	decf	___ftadd@sign& (0+255),f,b
 14710  0014D0  C081  F07E         	movff	___ftadd@sign,??___ftadd
 14711  0014D4  0E07               	movlw	7
 14712  0014D6  177E               	andwf	??___ftadd& (0+255),f,b
 14713  0014D8  B4D8               	btfsc	status,2,c
 14714  0014DA  D006               	goto	l1676
 14715  0014DC  D7EF               	goto	u6420
 14716  0014DE                     
 14717                           ; BSR set to: 0
 14718                           
 14719                           ; BSR set to: 0
 14720  0014DE  90D8               	bcf	status,0,c
 14721  0014E0  337D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 14722  0014E2  337C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 14723  0014E4  337B               	rrcf	___ftadd@f2& (0+255),f,b
 14724  0014E6  2B82               	incf	___ftadd@exp2& (0+255),f,b
 14725  0014E8                     l1676:
 14726                           
 14727                           ; BSR set to: 0
 14728                           
 14729                           ; BSR set to: 0
 14730  0014E8  5182               	movf	___ftadd@exp2& (0+255),w,b
 14731  0014EA  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 14732  0014EC  A4D8               	btfss	status,2,c
 14733  0014EE  D7F7               	goto	l1677
 14734  0014F0                     u6450:
 14735                           
 14736                           ; BSR set to: 0
 14737                           
 14738                           ; BSR set to: 0
 14739                           
 14740                           ; BSR set to: 0
 14741  0014F0  AF81               	btfss	___ftadd@sign& (0+255),7,b
 14742  0014F2  D00C               	goto	l1679
 14743                           
 14744                           ; BSR set to: 0
 14745  0014F4  0EFF               	movlw	255
 14746  0014F6  1B78               	xorwf	___ftadd@f1& (0+255),f,b
 14747  0014F8  0EFF               	movlw	255
 14748  0014FA  1B79               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 14749  0014FC  0EFF               	movlw	255
 14750  0014FE  1B7A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 14751  001500  0E01               	movlw	1
 14752  001502  2778               	addwf	___ftadd@f1& (0+255),f,b
 14753  001504  0E00               	movlw	0
 14754  001506  2379               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 14755  001508  0E00               	movlw	0
 14756  00150A  237A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 14757  00150C                     l1679:
 14758                           
 14759                           ; BSR set to: 0
 14760  00150C  AD81               	btfss	___ftadd@sign& (0+255),6,b
 14761  00150E  D00C               	goto	l1680
 14762                           
 14763                           ; BSR set to: 0
 14764  001510  0EFF               	movlw	255
 14765  001512  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 14766  001514  0EFF               	movlw	255
 14767  001516  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 14768  001518  0EFF               	movlw	255
 14769  00151A  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 14770  00151C  0E01               	movlw	1
 14771  00151E  277B               	addwf	___ftadd@f2& (0+255),f,b
 14772  001520  0E00               	movlw	0
 14773  001522  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14774  001524  0E00               	movlw	0
 14775  001526  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14776  001528                     l1680:
 14777                           
 14778                           ; BSR set to: 0
 14779                           
 14780                           ; BSR set to: 0
 14781  001528  0E00               	movlw	0
 14782  00152A  6F81               	movwf	___ftadd@sign& (0+255),b
 14783                           
 14784                           ; BSR set to: 0
 14785  00152C  5178               	movf	___ftadd@f1& (0+255),w,b
 14786  00152E  277B               	addwf	___ftadd@f2& (0+255),f,b
 14787  001530  5179               	movf	(___ftadd@f1+1)& (0+255),w,b
 14788  001532  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14789  001534  517A               	movf	(___ftadd@f1+2)& (0+255),w,b
 14790  001536  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14791                           
 14792                           ; BSR set to: 0
 14793  001538  AF7D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 14794  00153A  D00E               	goto	l1681
 14795                           
 14796                           ; BSR set to: 0
 14797  00153C  0EFF               	movlw	255
 14798  00153E  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 14799  001540  0EFF               	movlw	255
 14800  001542  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 14801  001544  0EFF               	movlw	255
 14802  001546  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 14803  001548  0E01               	movlw	1
 14804  00154A  277B               	addwf	___ftadd@f2& (0+255),f,b
 14805  00154C  0E00               	movlw	0
 14806  00154E  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 14807  001550  0E00               	movlw	0
 14808  001552  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 14809                           
 14810                           ; BSR set to: 0
 14811  001554  0E01               	movlw	1
 14812  001556  6F81               	movwf	___ftadd@sign& (0+255),b
 14813  001558                     l1681:
 14814                           
 14815                           ; BSR set to: 0
 14816                           
 14817                           ; BSR set to: 0
 14818  001558  C07B  F018         	movff	___ftadd@f2,___ftpack@arg
 14819  00155C  C07C  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 14820  001560  C07D  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 14821  001564  C083  F01B         	movff	___ftadd@exp1,___ftpack@exp
 14822  001568  C081  F01C         	movff	___ftadd@sign,___ftpack@sign
 14823  00156C  ECE2  F010         	call	___ftpack	;wreg free
 14824  001570  C018  F078         	movff	?___ftpack,?___ftadd
 14825  001574  C019  F079         	movff	?___ftpack+1,?___ftadd+1
 14826  001578  C01A  F07A         	movff	?___ftpack+2,?___ftadd+2
 14827  00157C  0012               	return	
 14828  00157E                     __end_of___ftadd:
 14829                           	opt stack 0
 14830                           tosu	equ	0xFFF
 14831                           tosh	equ	0xFFE
 14832                           tosl	equ	0xFFD
 14833                           pclath	equ	0xFFA
 14834                           tblptru	equ	0xFF8
 14835                           tblptrh	equ	0xFF7
 14836                           tblptrl	equ	0xFF6
 14837                           tablat	equ	0xFF5
 14838                           prodh	equ	0xFF4
 14839                           prodl	equ	0xFF3
 14840                           intcon	equ	0xFF2
 14841                           intcon2	equ	0xFF1
 14842                           postinc0	equ	0xFEE
 14843                           wreg	equ	0xFE8
 14844                           indf1	equ	0xFE7
 14845                           postdec1	equ	0xFE5
 14846                           fsr1h	equ	0xFE2
 14847                           fsr1l	equ	0xFE1
 14848                           indf2	equ	0xFDF
 14849                           postinc2	equ	0xFDE
 14850                           postdec2	equ	0xFDD
 14851                           fsr2h	equ	0xFDA
 14852                           fsr2l	equ	0xFD9
 14853                           status	equ	0xFD8
 14854                           
 14855 ;; *************** function ___ftneg *****************
 14856 ;; Defined at:
 14857 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 14858 ;; Parameters:    Size  Location     Type
 14859 ;;  f1              3   23[COMRAM] float 
 14860 ;; Auto vars:     Size  Location     Type
 14861 ;;		None
 14862 ;; Return value:  Size  Location     Type
 14863 ;;                  3   23[COMRAM] float 
 14864 ;; Registers used:
 14865 ;;		wreg, status,2, status,0
 14866 ;; Tracked objects:
 14867 ;;		On entry : 0/0
 14868 ;;		On exit  : 0/0
 14869 ;;		Unchanged: 0/0
 14870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14871 ;;      Params:         3       0       0       0       0       0       0
 14872 ;;      Locals:         0       0       0       0       0       0       0
 14873 ;;      Temps:          0       0       0       0       0       0       0
 14874 ;;      Totals:         3       0       0       0       0       0       0
 14875 ;;Total ram usage:        3 bytes
 14876 ;; Hardware stack levels used:    1
 14877 ;; Hardware stack levels required when called:    3
 14878 ;; This function calls:
 14879 ;;		Nothing
 14880 ;; This function is called by:
 14881 ;;		_pow
 14882 ;;		_exp
 14883 ;; This function uses a non-reentrant model
 14884 ;;
 14885                           
 14886                           	psect	text97
 14887  0034B6                     __ptext97:
 14888                           	opt stack 0
 14889  0034B6                     ___ftneg:
 14890                           	opt stack 24
 14891                           
 14892                           ;incstack = 0
 14893  0034B6  5018               	movf	___ftneg@f1,w,c
 14894  0034B8  1019               	iorwf	___ftneg@f1+1,w,c
 14895  0034BA  101A               	iorwf	___ftneg@f1+2,w,c
 14896  0034BC  B4D8               	btfsc	status,2,c
 14897  0034BE  D006               	goto	l1712
 14898  0034C0  0E00               	movlw	0
 14899  0034C2  1A18               	xorwf	___ftneg@f1,f,c
 14900  0034C4  0E00               	movlw	0
 14901  0034C6  1A19               	xorwf	___ftneg@f1+1,f,c
 14902  0034C8  0E80               	movlw	128
 14903  0034CA  1A1A               	xorwf	___ftneg@f1+2,f,c
 14904  0034CC                     l1712:
 14905  0034CC  C018  F018         	movff	___ftneg@f1,?___ftneg
 14906  0034D0  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 14907  0034D4  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 14908  0034D8  0012               	return		;funcret
 14909  0034DA                     __end_of___ftneg:
 14910                           	opt stack 0
 14911                           tosu	equ	0xFFF
 14912                           tosh	equ	0xFFE
 14913                           tosl	equ	0xFFD
 14914                           pclath	equ	0xFFA
 14915                           tblptru	equ	0xFF8
 14916                           tblptrh	equ	0xFF7
 14917                           tblptrl	equ	0xFF6
 14918                           tablat	equ	0xFF5
 14919                           prodh	equ	0xFF4
 14920                           prodl	equ	0xFF3
 14921                           intcon	equ	0xFF2
 14922                           intcon2	equ	0xFF1
 14923                           postinc0	equ	0xFEE
 14924                           wreg	equ	0xFE8
 14925                           indf1	equ	0xFE7
 14926                           postdec1	equ	0xFE5
 14927                           fsr1h	equ	0xFE2
 14928                           fsr1l	equ	0xFE1
 14929                           indf2	equ	0xFDF
 14930                           postinc2	equ	0xFDE
 14931                           postdec2	equ	0xFDD
 14932                           fsr2h	equ	0xFDA
 14933                           fsr2l	equ	0xFD9
 14934                           status	equ	0xFD8
 14935                           
 14936 ;; *************** function ___ftdiv *****************
 14937 ;; Defined at:
 14938 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 14939 ;; Parameters:    Size  Location     Type
 14940 ;;  f1              3   40[COMRAM] float 
 14941 ;;  f2              3   43[COMRAM] float 
 14942 ;; Auto vars:     Size  Location     Type
 14943 ;;  f3              3    4[BANK0 ] float 
 14944 ;;  sign            1    8[BANK0 ] unsigned char 
 14945 ;;  exp             1    7[BANK0 ] unsigned char 
 14946 ;;  cntr            1    3[BANK0 ] unsigned char 
 14947 ;; Return value:  Size  Location     Type
 14948 ;;                  3   40[COMRAM] float 
 14949 ;; Registers used:
 14950 ;;		wreg, status,2, status,0, cstack
 14951 ;; Tracked objects:
 14952 ;;		On entry : 0/0
 14953 ;;		On exit  : 0/0
 14954 ;;		Unchanged: 0/0
 14955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14956 ;;      Params:         6       0       0       0       0       0       0
 14957 ;;      Locals:         0       6       0       0       0       0       0
 14958 ;;      Temps:          0       3       0       0       0       0       0
 14959 ;;      Totals:         6       9       0       0       0       0       0
 14960 ;;Total ram usage:       15 bytes
 14961 ;; Hardware stack levels used:    1
 14962 ;; Hardware stack levels required when called:    4
 14963 ;; This function calls:
 14964 ;;		___ftpack
 14965 ;; This function is called by:
 14966 ;;		_AdcConvert
 14967 ;;		_CheckFlashPrecentage
 14968 ;;		_exp
 14969 ;; This function uses a non-reentrant model
 14970 ;;
 14971                           
 14972                           	psect	text98
 14973  001C10                     __ptext98:
 14974                           	opt stack 0
 14975  001C10                     ___ftdiv:
 14976                           	opt stack 25
 14977                           
 14978                           ;incstack = 0
 14979  001C10  C02B  F060         	movff	___ftdiv@f1+2,??___ftdiv
 14980  001C14  0100               	movlb	0	; () banked
 14981  001C16  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 14982  001C18  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 14983  001C1A  342A               	rlcf	___ftdiv@f1+1,w,c
 14984  001C1C  3760               	rlcf	??___ftdiv& (0+255),f,b
 14985  001C1E  E301               	bnc	u6701
 14986  001C20  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 14987  001C22                     u6701:
 14988  001C22  5160               	movf	??___ftdiv& (0+255),w,b
 14989  001C24  6F67               	movwf	___ftdiv@exp& (0+255),b
 14990  001C26  5167               	movf	___ftdiv@exp& (0+255),w,b
 14991  001C28  A4D8               	btfss	status,2,c
 14992  001C2A  D007               	goto	l1686
 14993                           
 14994                           ; BSR set to: 0
 14995  001C2C  0E00               	movlw	0
 14996  001C2E  6E29               	movwf	?___ftdiv,c
 14997  001C30  0E00               	movlw	0
 14998  001C32  6E2A               	movwf	?___ftdiv+1,c
 14999  001C34  0E00               	movlw	0
 15000  001C36  6E2B               	movwf	?___ftdiv+2,c
 15001                           
 15002                           ; BSR set to: 0
 15003  001C38  0012               	return	
 15004  001C3A                     l1686:
 15005                           
 15006                           ; BSR set to: 0
 15007                           
 15008                           ; BSR set to: 0
 15009  001C3A  C02E  F060         	movff	___ftdiv@f2+2,??___ftdiv
 15010  001C3E  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 15011  001C40  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 15012  001C42  342D               	rlcf	___ftdiv@f2+1,w,c
 15013  001C44  3760               	rlcf	??___ftdiv& (0+255),f,b
 15014  001C46  E301               	bnc	u6721
 15015  001C48  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 15016  001C4A                     u6721:
 15017  001C4A  5160               	movf	??___ftdiv& (0+255),w,b
 15018  001C4C  6F68               	movwf	___ftdiv@sign& (0+255),b
 15019  001C4E  5168               	movf	___ftdiv@sign& (0+255),w,b
 15020  001C50  A4D8               	btfss	status,2,c
 15021  001C52  D007               	goto	l1688
 15022                           
 15023                           ; BSR set to: 0
 15024  001C54  0E00               	movlw	0
 15025  001C56  6E29               	movwf	?___ftdiv,c
 15026  001C58  0E00               	movlw	0
 15027  001C5A  6E2A               	movwf	?___ftdiv+1,c
 15028  001C5C  0E00               	movlw	0
 15029  001C5E  6E2B               	movwf	?___ftdiv+2,c
 15030                           
 15031                           ; BSR set to: 0
 15032  001C60  0012               	return	
 15033  001C62                     l1688:
 15034                           
 15035                           ; BSR set to: 0
 15036                           
 15037                           ; BSR set to: 0
 15038  001C62  0E00               	movlw	0
 15039  001C64  6F64               	movwf	___ftdiv@f3& (0+255),b
 15040  001C66  0E00               	movlw	0
 15041  001C68  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 15042  001C6A  0E00               	movlw	0
 15043  001C6C  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 15044                           
 15045                           ; BSR set to: 0
 15046  001C6E  5168               	movf	___ftdiv@sign& (0+255),w,b
 15047  001C70  0F89               	addlw	137
 15048  001C72  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 15049                           
 15050                           ; BSR set to: 0
 15051  001C74  C02B  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 15052                           
 15053                           ; BSR set to: 0
 15054  001C78  502E               	movf	___ftdiv@f2+2,w,c
 15055  001C7A  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 15056                           
 15057                           ; BSR set to: 0
 15058  001C7C  0E80               	movlw	128
 15059  001C7E  1768               	andwf	___ftdiv@sign& (0+255),f,b
 15060                           
 15061                           ; BSR set to: 0
 15062  001C80  8E2A               	bsf	___ftdiv@f1+1,7,c
 15063                           
 15064                           ; BSR set to: 0
 15065  001C82  0EFF               	movlw	255
 15066  001C84  1629               	andwf	___ftdiv@f1,f,c
 15067  001C86  0EFF               	movlw	255
 15068  001C88  162A               	andwf	___ftdiv@f1+1,f,c
 15069  001C8A  0E00               	movlw	0
 15070  001C8C  162B               	andwf	___ftdiv@f1+2,f,c
 15071                           
 15072                           ; BSR set to: 0
 15073  001C8E  8E2D               	bsf	___ftdiv@f2+1,7,c
 15074                           
 15075                           ; BSR set to: 0
 15076  001C90  0EFF               	movlw	255
 15077  001C92  162C               	andwf	___ftdiv@f2,f,c
 15078  001C94  0EFF               	movlw	255
 15079  001C96  162D               	andwf	___ftdiv@f2+1,f,c
 15080  001C98  0E00               	movlw	0
 15081  001C9A  162E               	andwf	___ftdiv@f2+2,f,c
 15082                           
 15083                           ; BSR set to: 0
 15084  001C9C  0E18               	movlw	24
 15085  001C9E  6F63               	movwf	___ftdiv@cntr& (0+255),b
 15086  001CA0                     
 15087                           ; BSR set to: 0
 15088                           
 15089                           ; BSR set to: 0
 15090  001CA0  90D8               	bcf	status,0,c
 15091  001CA2  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 15092  001CA4  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 15093  001CA6  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 15094                           
 15095                           ; BSR set to: 0
 15096  001CA8  502C               	movf	___ftdiv@f2,w,c
 15097  001CAA  5C29               	subwf	___ftdiv@f1,w,c
 15098  001CAC  502D               	movf	___ftdiv@f2+1,w,c
 15099  001CAE  582A               	subwfb	___ftdiv@f1+1,w,c
 15100  001CB0  502E               	movf	___ftdiv@f2+2,w,c
 15101  001CB2  582B               	subwfb	___ftdiv@f1+2,w,c
 15102  001CB4  A0D8               	btfss	status,0,c
 15103  001CB6  D007               	goto	l1690
 15104                           
 15105                           ; BSR set to: 0
 15106  001CB8  502C               	movf	___ftdiv@f2,w,c
 15107  001CBA  5E29               	subwf	___ftdiv@f1,f,c
 15108  001CBC  502D               	movf	___ftdiv@f2+1,w,c
 15109  001CBE  5A2A               	subwfb	___ftdiv@f1+1,f,c
 15110  001CC0  502E               	movf	___ftdiv@f2+2,w,c
 15111  001CC2  5A2B               	subwfb	___ftdiv@f1+2,f,c
 15112                           
 15113                           ; BSR set to: 0
 15114  001CC4  8164               	bsf	___ftdiv@f3& (0+255),0,b
 15115  001CC6                     l1690:
 15116                           
 15117                           ; BSR set to: 0
 15118  001CC6  90D8               	bcf	status,0,c
 15119  001CC8  3629               	rlcf	___ftdiv@f1,f,c
 15120  001CCA  362A               	rlcf	___ftdiv@f1+1,f,c
 15121  001CCC  362B               	rlcf	___ftdiv@f1+2,f,c
 15122                           
 15123                           ; BSR set to: 0
 15124  001CCE  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 15125  001CD0  D7E7               	goto	l1689
 15126                           
 15127                           ; BSR set to: 0
 15128                           
 15129                           ; BSR set to: 0
 15130  001CD2  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 15131  001CD6  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 15132  001CDA  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 15133  001CDE  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 15134  001CE2  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 15135  001CE6  ECE2  F010         	call	___ftpack	;wreg free
 15136  001CEA  C018  F029         	movff	?___ftpack,?___ftdiv
 15137  001CEE  C019  F02A         	movff	?___ftpack+1,?___ftdiv+1
 15138  001CF2  C01A  F02B         	movff	?___ftpack+2,?___ftdiv+2
 15139  001CF6  0012               	return	
 15140  001CF8                     __end_of___ftdiv:
 15141                           	opt stack 0
 15142                           tosu	equ	0xFFF
 15143                           tosh	equ	0xFFE
 15144                           tosl	equ	0xFFD
 15145                           pclath	equ	0xFFA
 15146                           tblptru	equ	0xFF8
 15147                           tblptrh	equ	0xFF7
 15148                           tblptrl	equ	0xFF6
 15149                           tablat	equ	0xFF5
 15150                           prodh	equ	0xFF4
 15151                           prodl	equ	0xFF3
 15152                           intcon	equ	0xFF2
 15153                           intcon2	equ	0xFF1
 15154                           postinc0	equ	0xFEE
 15155                           wreg	equ	0xFE8
 15156                           indf1	equ	0xFE7
 15157                           postdec1	equ	0xFE5
 15158                           fsr1h	equ	0xFE2
 15159                           fsr1l	equ	0xFE1
 15160                           indf2	equ	0xFDF
 15161                           postinc2	equ	0xFDE
 15162                           postdec2	equ	0xFDD
 15163                           fsr2h	equ	0xFDA
 15164                           fsr2l	equ	0xFD9
 15165                           status	equ	0xFD8
 15166                           
 15167 ;; *************** function ___awtoft *****************
 15168 ;; Defined at:
 15169 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 15170 ;; Parameters:    Size  Location     Type
 15171 ;;  c               2   31[COMRAM] int 
 15172 ;; Auto vars:     Size  Location     Type
 15173 ;;  sign            1   34[COMRAM] unsigned char 
 15174 ;; Return value:  Size  Location     Type
 15175 ;;                  3   31[COMRAM] float 
 15176 ;; Registers used:
 15177 ;;		wreg, status,2, status,0, cstack
 15178 ;; Tracked objects:
 15179 ;;		On entry : 0/0
 15180 ;;		On exit  : 0/0
 15181 ;;		Unchanged: 0/0
 15182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15183 ;;      Params:         3       0       0       0       0       0       0
 15184 ;;      Locals:         1       0       0       0       0       0       0
 15185 ;;      Temps:          0       0       0       0       0       0       0
 15186 ;;      Totals:         4       0       0       0       0       0       0
 15187 ;;Total ram usage:        4 bytes
 15188 ;; Hardware stack levels used:    1
 15189 ;; Hardware stack levels required when called:    4
 15190 ;; This function calls:
 15191 ;;		___ftpack
 15192 ;; This function is called by:
 15193 ;;		_exp
 15194 ;;		_log
 15195 ;; This function uses a non-reentrant model
 15196 ;;
 15197                           
 15198                           	psect	text99
 15199  003162                     __ptext99:
 15200                           	opt stack 0
 15201  003162                     ___awtoft:
 15202                           	opt stack 23
 15203                           
 15204                           ;incstack = 0
 15205  003162  0E00               	movlw	0
 15206  003164  6E23               	movwf	___awtoft@sign,c
 15207  003166  AE21               	btfss	___awtoft@c+1,7,c
 15208  003168  D006               	goto	l1603
 15209  00316A  6C20               	negf	___awtoft@c,c
 15210  00316C  1E21               	comf	___awtoft@c+1,f,c
 15211  00316E  B0D8               	btfsc	status,0,c
 15212  003170  2A21               	incf	___awtoft@c+1,f,c
 15213  003172  0E01               	movlw	1
 15214  003174  6E23               	movwf	___awtoft@sign,c
 15215  003176                     l1603:
 15216  003176  C020  F018         	movff	___awtoft@c,___ftpack@arg
 15217  00317A  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 15218  00317E  6A1A               	clrf	___ftpack@arg+2,c
 15219  003180  0E8E               	movlw	142
 15220  003182  6E1B               	movwf	___ftpack@exp,c
 15221  003184  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 15222  003188  ECE2  F010         	call	___ftpack	;wreg free
 15223  00318C  C018  F020         	movff	?___ftpack,?___awtoft
 15224  003190  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 15225  003194  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 15226  003198  0012               	return	
 15227  00319A                     __end_of___awtoft:
 15228                           	opt stack 0
 15229                           tosu	equ	0xFFF
 15230                           tosh	equ	0xFFE
 15231                           tosl	equ	0xFFD
 15232                           pclath	equ	0xFFA
 15233                           tblptru	equ	0xFF8
 15234                           tblptrh	equ	0xFF7
 15235                           tblptrl	equ	0xFF6
 15236                           tablat	equ	0xFF5
 15237                           prodh	equ	0xFF4
 15238                           prodl	equ	0xFF3
 15239                           intcon	equ	0xFF2
 15240                           intcon2	equ	0xFF1
 15241                           postinc0	equ	0xFEE
 15242                           wreg	equ	0xFE8
 15243                           indf1	equ	0xFE7
 15244                           postdec1	equ	0xFE5
 15245                           fsr1h	equ	0xFE2
 15246                           fsr1l	equ	0xFE1
 15247                           indf2	equ	0xFDF
 15248                           postinc2	equ	0xFDE
 15249                           postdec2	equ	0xFDD
 15250                           fsr2h	equ	0xFDA
 15251                           fsr2l	equ	0xFD9
 15252                           status	equ	0xFD8
 15253                           
 15254 ;; *************** function ___lltoft *****************
 15255 ;; Defined at:
 15256 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 15257 ;; Parameters:    Size  Location     Type
 15258 ;;  c               4   31[COMRAM] unsigned long 
 15259 ;; Auto vars:     Size  Location     Type
 15260 ;;  exp             1   39[COMRAM] unsigned char 
 15261 ;; Return value:  Size  Location     Type
 15262 ;;                  3   31[COMRAM] float 
 15263 ;; Registers used:
 15264 ;;		wreg, status,2, status,0, cstack
 15265 ;; Tracked objects:
 15266 ;;		On entry : 0/0
 15267 ;;		On exit  : 0/0
 15268 ;;		Unchanged: 0/0
 15269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15270 ;;      Params:         4       0       0       0       0       0       0
 15271 ;;      Locals:         1       0       0       0       0       0       0
 15272 ;;      Temps:          4       0       0       0       0       0       0
 15273 ;;      Totals:         9       0       0       0       0       0       0
 15274 ;;Total ram usage:        9 bytes
 15275 ;; Hardware stack levels used:    1
 15276 ;; Hardware stack levels required when called:    4
 15277 ;; This function calls:
 15278 ;;		___ftpack
 15279 ;; This function is called by:
 15280 ;;		_CheckFlashPrecentage
 15281 ;;		_pow
 15282 ;; This function uses a non-reentrant model
 15283 ;;
 15284                           
 15285                           	psect	text100
 15286  002A8A                     __ptext100:
 15287                           	opt stack 0
 15288  002A8A                     ___lltoft:
 15289                           	opt stack 25
 15290                           
 15291                           ;incstack = 0
 15292  002A8A  0E8E               	movlw	142
 15293  002A8C  6E28               	movwf	___lltoft@exp,c
 15294  002A8E  D006               	goto	l1779
 15295  002A90  90D8               	bcf	status,0,c
 15296  002A92  3223               	rrcf	___lltoft@c+3,f,c
 15297  002A94  3222               	rrcf	___lltoft@c+2,f,c
 15298  002A96  3221               	rrcf	___lltoft@c+1,f,c
 15299  002A98  3220               	rrcf	___lltoft@c,f,c
 15300  002A9A  2A28               	incf	___lltoft@exp,f,c
 15301  002A9C                     l1779:
 15302  002A9C  0E00               	movlw	0
 15303  002A9E  1420               	andwf	___lltoft@c,w,c
 15304  002AA0  6E24               	movwf	??___lltoft& (0+255),c
 15305  002AA2  0E00               	movlw	0
 15306  002AA4  1421               	andwf	___lltoft@c+1,w,c
 15307  002AA6  6E25               	movwf	(??___lltoft+1)& (0+255),c
 15308  002AA8  0E00               	movlw	0
 15309  002AAA  1422               	andwf	___lltoft@c+2,w,c
 15310  002AAC  6E26               	movwf	(??___lltoft+2)& (0+255),c
 15311  002AAE  0EFF               	movlw	255
 15312  002AB0  1423               	andwf	___lltoft@c+3,w,c
 15313  002AB2  6E27               	movwf	(??___lltoft+3)& (0+255),c
 15314  002AB4  5024               	movf	??___lltoft,w,c
 15315  002AB6  1025               	iorwf	??___lltoft+1,w,c
 15316  002AB8  1026               	iorwf	??___lltoft+2,w,c
 15317  002ABA  1027               	iorwf	??___lltoft+3,w,c
 15318  002ABC  A4D8               	btfss	status,2,c
 15319  002ABE  D7E8               	goto	l1780
 15320  002AC0  C020  F018         	movff	___lltoft@c,___ftpack@arg
 15321  002AC4  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 15322  002AC8  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 15323  002ACC  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 15324  002AD0  0E00               	movlw	0
 15325  002AD2  6E1C               	movwf	___ftpack@sign,c
 15326  002AD4  ECE2  F010         	call	___ftpack	;wreg free
 15327  002AD8  C018  F020         	movff	?___ftpack,?___lltoft
 15328  002ADC  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 15329  002AE0  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 15330  002AE4  0012               	return	
 15331  002AE6                     __end_of___lltoft:
 15332                           	opt stack 0
 15333                           tosu	equ	0xFFF
 15334                           tosh	equ	0xFFE
 15335                           tosl	equ	0xFFD
 15336                           pclath	equ	0xFFA
 15337                           tblptru	equ	0xFF8
 15338                           tblptrh	equ	0xFF7
 15339                           tblptrl	equ	0xFF6
 15340                           tablat	equ	0xFF5
 15341                           prodh	equ	0xFF4
 15342                           prodl	equ	0xFF3
 15343                           intcon	equ	0xFF2
 15344                           intcon2	equ	0xFF1
 15345                           postinc0	equ	0xFEE
 15346                           wreg	equ	0xFE8
 15347                           indf1	equ	0xFE7
 15348                           postdec1	equ	0xFE5
 15349                           fsr1h	equ	0xFE2
 15350                           fsr1l	equ	0xFE1
 15351                           indf2	equ	0xFDF
 15352                           postinc2	equ	0xFDE
 15353                           postdec2	equ	0xFDD
 15354                           fsr2h	equ	0xFDA
 15355                           fsr2l	equ	0xFD9
 15356                           status	equ	0xFD8
 15357                           
 15358 ;; *************** function ___lwtoft *****************
 15359 ;; Defined at:
 15360 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 15361 ;; Parameters:    Size  Location     Type
 15362 ;;  c               2   31[COMRAM] unsigned int 
 15363 ;; Auto vars:     Size  Location     Type
 15364 ;;		None
 15365 ;; Return value:  Size  Location     Type
 15366 ;;                  3   31[COMRAM] float 
 15367 ;; Registers used:
 15368 ;;		wreg, status,2, status,0, cstack
 15369 ;; Tracked objects:
 15370 ;;		On entry : 0/0
 15371 ;;		On exit  : 0/0
 15372 ;;		Unchanged: 0/0
 15373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15374 ;;      Params:         3       0       0       0       0       0       0
 15375 ;;      Locals:         0       0       0       0       0       0       0
 15376 ;;      Temps:          0       0       0       0       0       0       0
 15377 ;;      Totals:         3       0       0       0       0       0       0
 15378 ;;Total ram usage:        3 bytes
 15379 ;; Hardware stack levels used:    1
 15380 ;; Hardware stack levels required when called:    4
 15381 ;; This function calls:
 15382 ;;		___ftpack
 15383 ;; This function is called by:
 15384 ;;		_AdcConvert
 15385 ;; This function uses a non-reentrant model
 15386 ;;
 15387                           
 15388                           	psect	text101
 15389  0034DA                     __ptext101:
 15390                           	opt stack 0
 15391  0034DA                     ___lwtoft:
 15392                           	opt stack 25
 15393                           
 15394                           ;incstack = 0
 15395  0034DA  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 15396  0034DE  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 15397  0034E2  6A1A               	clrf	___ftpack@arg+2,c
 15398  0034E4  0E8E               	movlw	142
 15399  0034E6  6E1B               	movwf	___ftpack@exp,c
 15400  0034E8  0E00               	movlw	0
 15401  0034EA  6E1C               	movwf	___ftpack@sign,c
 15402  0034EC  ECE2  F010         	call	___ftpack	;wreg free
 15403  0034F0  C018  F020         	movff	?___ftpack,?___lwtoft
 15404  0034F4  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 15405  0034F8  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 15406  0034FC  0012               	return	
 15407  0034FE                     __end_of___lwtoft:
 15408                           	opt stack 0
 15409                           tosu	equ	0xFFF
 15410                           tosh	equ	0xFFE
 15411                           tosl	equ	0xFFD
 15412                           pclath	equ	0xFFA
 15413                           tblptru	equ	0xFF8
 15414                           tblptrh	equ	0xFF7
 15415                           tblptrl	equ	0xFF6
 15416                           tablat	equ	0xFF5
 15417                           prodh	equ	0xFF4
 15418                           prodl	equ	0xFF3
 15419                           intcon	equ	0xFF2
 15420                           intcon2	equ	0xFF1
 15421                           postinc0	equ	0xFEE
 15422                           wreg	equ	0xFE8
 15423                           indf1	equ	0xFE7
 15424                           postdec1	equ	0xFE5
 15425                           fsr1h	equ	0xFE2
 15426                           fsr1l	equ	0xFE1
 15427                           indf2	equ	0xFDF
 15428                           postinc2	equ	0xFDE
 15429                           postdec2	equ	0xFDD
 15430                           fsr2h	equ	0xFDA
 15431                           fsr2l	equ	0xFD9
 15432                           status	equ	0xFD8
 15433                           
 15434 ;; *************** function ___ftpack *****************
 15435 ;; Defined at:
 15436 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 15437 ;; Parameters:    Size  Location     Type
 15438 ;;  arg             3   23[COMRAM] unsigned um
 15439 ;;  exp             1   26[COMRAM] unsigned char 
 15440 ;;  sign            1   27[COMRAM] unsigned char 
 15441 ;; Auto vars:     Size  Location     Type
 15442 ;;		None
 15443 ;; Return value:  Size  Location     Type
 15444 ;;                  3   23[COMRAM] float 
 15445 ;; Registers used:
 15446 ;;		wreg, status,2, status,0
 15447 ;; Tracked objects:
 15448 ;;		On entry : 0/0
 15449 ;;		On exit  : 0/0
 15450 ;;		Unchanged: 0/0
 15451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15452 ;;      Params:         5       0       0       0       0       0       0
 15453 ;;      Locals:         0       0       0       0       0       0       0
 15454 ;;      Temps:          3       0       0       0       0       0       0
 15455 ;;      Totals:         8       0       0       0       0       0       0
 15456 ;;Total ram usage:        8 bytes
 15457 ;; Hardware stack levels used:    1
 15458 ;; Hardware stack levels required when called:    3
 15459 ;; This function calls:
 15460 ;;		Nothing
 15461 ;; This function is called by:
 15462 ;;		___altoft
 15463 ;;		___awtoft
 15464 ;;		___ftadd
 15465 ;;		___ftdiv
 15466 ;;		___ftmul
 15467 ;;		___lltoft
 15468 ;;		___lwtoft
 15469 ;; This function uses a non-reentrant model
 15470 ;;
 15471                           
 15472                           	psect	text102
 15473  0021C4                     __ptext102:
 15474                           	opt stack 0
 15475  0021C4                     ___ftpack:
 15476                           	opt stack 25
 15477                           
 15478                           ;incstack = 0
 15479  0021C4  501B               	movf	___ftpack@exp,w,c
 15480  0021C6  B4D8               	btfsc	status,2,c
 15481  0021C8  D005               	goto	u5830
 15482  0021CA  5018               	movf	___ftpack@arg,w,c
 15483  0021CC  1019               	iorwf	___ftpack@arg+1,w,c
 15484  0021CE  101A               	iorwf	___ftpack@arg+2,w,c
 15485  0021D0  A4D8               	btfss	status,2,c
 15486  0021D2  D00C               	goto	l1622
 15487  0021D4                     u5830:
 15488  0021D4  0E00               	movlw	0
 15489  0021D6  6E18               	movwf	?___ftpack,c
 15490  0021D8  0E00               	movlw	0
 15491  0021DA  6E19               	movwf	?___ftpack+1,c
 15492  0021DC  0E00               	movlw	0
 15493  0021DE  6E1A               	movwf	?___ftpack+2,c
 15494  0021E0  0012               	return	
 15495  0021E2  2A1B               	incf	___ftpack@exp,f,c
 15496  0021E4  90D8               	bcf	status,0,c
 15497  0021E6  321A               	rrcf	___ftpack@arg+2,f,c
 15498  0021E8  3219               	rrcf	___ftpack@arg+1,f,c
 15499  0021EA  3218               	rrcf	___ftpack@arg,f,c
 15500  0021EC                     l1622:
 15501  0021EC  0E00               	movlw	0
 15502  0021EE  1418               	andwf	___ftpack@arg,w,c
 15503  0021F0  6E1D               	movwf	??___ftpack& (0+255),c
 15504  0021F2  0E00               	movlw	0
 15505  0021F4  1419               	andwf	___ftpack@arg+1,w,c
 15506  0021F6  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 15507  0021F8  0EFE               	movlw	254
 15508  0021FA  141A               	andwf	___ftpack@arg+2,w,c
 15509  0021FC  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 15510  0021FE  501D               	movf	??___ftpack,w,c
 15511  002200  101E               	iorwf	??___ftpack+1,w,c
 15512  002202  101F               	iorwf	??___ftpack+2,w,c
 15513  002204  B4D8               	btfsc	status,2,c
 15514  002206  D00C               	goto	l1625
 15515  002208  D7EC               	goto	l1623
 15516  00220A  2A1B               	incf	___ftpack@exp,f,c
 15517  00220C  0E01               	movlw	1
 15518  00220E  2618               	addwf	___ftpack@arg,f,c
 15519  002210  0E00               	movlw	0
 15520  002212  2219               	addwfc	___ftpack@arg+1,f,c
 15521  002214  0E00               	movlw	0
 15522  002216  221A               	addwfc	___ftpack@arg+2,f,c
 15523  002218  90D8               	bcf	status,0,c
 15524  00221A  321A               	rrcf	___ftpack@arg+2,f,c
 15525  00221C  3219               	rrcf	___ftpack@arg+1,f,c
 15526  00221E  3218               	rrcf	___ftpack@arg,f,c
 15527  002220                     l1625:
 15528  002220  0E00               	movlw	0
 15529  002222  1418               	andwf	___ftpack@arg,w,c
 15530  002224  6E1D               	movwf	??___ftpack& (0+255),c
 15531  002226  0E00               	movlw	0
 15532  002228  1419               	andwf	___ftpack@arg+1,w,c
 15533  00222A  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 15534  00222C  0EFF               	movlw	255
 15535  00222E  141A               	andwf	___ftpack@arg+2,w,c
 15536  002230  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 15537  002232  501D               	movf	??___ftpack,w,c
 15538  002234  101E               	iorwf	??___ftpack+1,w,c
 15539  002236  101F               	iorwf	??___ftpack+2,w,c
 15540  002238  B4D8               	btfsc	status,2,c
 15541  00223A  D006               	goto	l1628
 15542  00223C  D7E6               	goto	l1626
 15543  00223E  061B               	decf	___ftpack@exp,f,c
 15544  002240  90D8               	bcf	status,0,c
 15545  002242  3618               	rlcf	___ftpack@arg,f,c
 15546  002244  3619               	rlcf	___ftpack@arg+1,f,c
 15547  002246  361A               	rlcf	___ftpack@arg+2,f,c
 15548  002248                     l1628:
 15549  002248  BE19               	btfsc	___ftpack@arg+1,7,c
 15550  00224A  D003               	goto	u5870
 15551  00224C  0E02               	movlw	2
 15552  00224E  601B               	cpfslt	___ftpack@exp,c
 15553  002250  D7F6               	goto	l1629
 15554  002252                     u5870:
 15555  002252  A01B               	btfss	___ftpack@exp,0,c
 15556  002254  9E19               	bcf	___ftpack@arg+1,7,c
 15557  002256  90D8               	bcf	status,0,c
 15558  002258  321B               	rrcf	___ftpack@exp,f,c
 15559  00225A  501B               	movf	___ftpack@exp,w,c
 15560  00225C  121A               	iorwf	___ftpack@arg+2,f,c
 15561  00225E  501C               	movf	___ftpack@sign,w,c
 15562  002260  A4D8               	btfss	status,2,c
 15563  002262  8E1A               	bsf	___ftpack@arg+2,7,c
 15564  002264  C018  F018         	movff	___ftpack@arg,?___ftpack
 15565  002268  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 15566  00226C  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 15567  002270  0012               	return	
 15568  002272                     __end_of___ftpack:
 15569                           	opt stack 0
 15570                           tosu	equ	0xFFF
 15571                           tosh	equ	0xFFE
 15572                           tosl	equ	0xFFD
 15573                           pclath	equ	0xFFA
 15574                           tblptru	equ	0xFF8
 15575                           tblptrh	equ	0xFF7
 15576                           tblptrl	equ	0xFF6
 15577                           tablat	equ	0xFF5
 15578                           prodh	equ	0xFF4
 15579                           prodl	equ	0xFF3
 15580                           intcon	equ	0xFF2
 15581                           intcon2	equ	0xFF1
 15582                           postinc0	equ	0xFEE
 15583                           wreg	equ	0xFE8
 15584                           indf1	equ	0xFE7
 15585                           postdec1	equ	0xFE5
 15586                           fsr1h	equ	0xFE2
 15587                           fsr1l	equ	0xFE1
 15588                           indf2	equ	0xFDF
 15589                           postinc2	equ	0xFDE
 15590                           postdec2	equ	0xFDD
 15591                           fsr2h	equ	0xFDA
 15592                           fsr2l	equ	0xFD9
 15593                           status	equ	0xFD8
 15594                           
 15595 ;; *************** function _FlashSampleWrite *****************
 15596 ;; Defined at:
 15597 ;;		line 29 in file "FlashApp.c"
 15598 ;; Parameters:    Size  Location     Type
 15599 ;;  sampleData      2   44[COMRAM] unsigned int 
 15600 ;;  channelNum      1   46[COMRAM] unsigned char 
 15601 ;; Auto vars:     Size  Location     Type
 15602 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 15603 ;; Return value:  Size  Location     Type
 15604 ;;                  1    wreg      void 
 15605 ;; Registers used:
 15606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15607 ;; Tracked objects:
 15608 ;;		On entry : 0/0
 15609 ;;		On exit  : 0/0
 15610 ;;		Unchanged: 0/0
 15611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15612 ;;      Params:         3       0       0       0       0       0       0
 15613 ;;      Locals:         0       2       0       0       0       0       0
 15614 ;;      Temps:          0       2       0       0       0       0       0
 15615 ;;      Totals:         3       4       0       0       0       0       0
 15616 ;;Total ram usage:        7 bytes
 15617 ;; Hardware stack levels used:    1
 15618 ;; Hardware stack levels required when called:    5
 15619 ;; This function calls:
 15620 ;;		_FLASH_IsWriteDone
 15621 ;;		_FLASH_WriteBlock
 15622 ;; This function is called by:
 15623 ;;		_AdcConvert
 15624 ;; This function uses a non-reentrant model
 15625 ;;
 15626                           
 15627                           	psect	text103
 15628  001928                     __ptext103:
 15629                           	opt stack 0
 15630  001928                     _FlashSampleWrite:
 15631                           	opt stack 24
 15632                           
 15633                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 15634                           
 15635                           ;incstack = 0
 15636  001928  502F               	movf	FlashSampleWrite@channelNum,w,c
 15637  00192A  0100               	movlb	0	; () banked
 15638  00192C  6F60               	movwf	??_FlashSampleWrite& (0+255),b
 15639  00192E  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
 15640  001930  0E0C               	movlw	12
 15641  001932                     u7465:
 15642  001932  90D8               	bcf	status,0,c
 15643  001934  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 15644  001936  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 15645  001938  2EE8               	decfsz	wreg,f,c
 15646  00193A  D7FB               	goto	u7465
 15647  00193C  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 15648  001940  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 15649                           
 15650                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 15651  001944  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 15652  001946  122D               	iorwf	FlashSampleWrite@sampleData,f,c
 15653  001948  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 15654  00194A  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
 15655                           
 15656                           ; BSR set to: 0
 15657                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 15658  00194C  90D8               	bcf	status,0,c
 15659  00194E  35C6               	rlcf	_sampleCount& (0+255),w,b
 15660  001950  6ED9               	movwf	fsr2l,c
 15661  001952  35C7               	rlcf	(_sampleCount+1)& (0+255),w,b
 15662  001954  6EDA               	movwf	fsr2h,c
 15663  001956  0E6E               	movlw	low _sampleArray
 15664  001958  26D9               	addwf	fsr2l,f,c
 15665  00195A  0E01               	movlw	high _sampleArray
 15666  00195C  22DA               	addwfc	fsr2h,f,c
 15667  00195E  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 15668  001962  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 15669                           
 15670                           ; BSR set to: 0
 15671                           ;FlashApp.c: 35: sampleCount ++;
 15672  001966  4BC6               	infsnz	_sampleCount& (0+255),f,b
 15673  001968  2BC7               	incf	(_sampleCount+1)& (0+255),f,b
 15674                           
 15675                           ; BSR set to: 0
 15676                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 15677  00196A  C0C6  F060         	movff	_sampleCount,??_FlashSampleWrite
 15678  00196E  C0C7  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
 15679  001972  90D8               	bcf	status,0,c
 15680  001974  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 15681  001976  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 15682  001978  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 15683  00197A  E104               	bnz	u7470
 15684  00197C  0E40               	movlw	64
 15685  00197E  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
 15686  001980  A0D8               	btfss	status,0,c
 15687  001982  0012               	return	
 15688  001984                     u7470:
 15689                           
 15690                           ; BSR set to: 0
 15691  001984  EC61  F01B         	call	_FLASH_IsWriteDone	;wreg free
 15692  001988  0900               	iorlw	0
 15693  00198A  B4D8               	btfsc	status,2,c
 15694  00198C  0012               	return	
 15695                           
 15696                           ;FlashApp.c: 38: {
 15697                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 15698  00198E  C042  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 15699  001992  C043  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 15700  001996  C044  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 15701  00199A  C045  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 15702  00199E  0E6E               	movlw	low _sampleArray
 15703  0019A0  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 15704  0019A2  0E01               	movlw	high _sampleArray
 15705  0019A4  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 15706  0019A6  EC2D  F010         	call	_FLASH_WriteBlock	;wreg free
 15707                           
 15708                           ;FlashApp.c: 40: writeAddress += (64);
 15709  0019AA  0E40               	movlw	64
 15710  0019AC  2642               	addwf	_writeAddress,f,c
 15711  0019AE  0E00               	movlw	0
 15712  0019B0  2243               	addwfc	_writeAddress+1,f,c
 15713  0019B2  2244               	addwfc	_writeAddress+2,f,c
 15714  0019B4  2245               	addwfc	_writeAddress+3,f,c
 15715                           
 15716                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 15717  0019B6  5045               	movf	_writeAddress+3,w,c
 15718  0019B8  1044               	iorwf	_writeAddress+2,w,c
 15719  0019BA  E106               	bnz	u7490
 15720  0019BC  0EF0               	movlw	240
 15721  0019BE  5C42               	subwf	_writeAddress,w,c
 15722  0019C0  0E7F               	movlw	127
 15723  0019C2  5843               	subwfb	_writeAddress+1,w,c
 15724  0019C4  A0D8               	btfss	status,0,c
 15725  0019C6  D018               	goto	l275
 15726  0019C8                     u7490:
 15727                           
 15728                           ;FlashApp.c: 42: {
 15729                           ;FlashApp.c: 43: writeAddress = 0x4000;
 15730  0019C8  0E00               	movlw	0
 15731  0019CA  6E42               	movwf	_writeAddress,c
 15732  0019CC  0E40               	movlw	64
 15733  0019CE  6E43               	movwf	_writeAddress+1,c
 15734  0019D0  0E00               	movlw	0
 15735  0019D2  6E44               	movwf	_writeAddress+2,c
 15736  0019D4  0E00               	movlw	0
 15737  0019D6  6E45               	movwf	_writeAddress+3,c
 15738                           
 15739                           ;FlashApp.c: 44: isReWriteDone = 1;
 15740  0019D8  0E01               	movlw	1
 15741  0019DA  6E3B               	movwf	_isReWriteDone,c
 15742                           
 15743                           ;FlashApp.c: 45: if (readAddress == 0x4000)
 15744  0019DC  0E40               	movlw	64
 15745  0019DE  0100               	movlb	0	; () banked
 15746  0019E0  19F8               	xorwf	(_readAddress+1)& (0+255),w,b
 15747  0019E2  11F7               	iorwf	_readAddress& (0+255),w,b
 15748  0019E4  11F9               	iorwf	(_readAddress+2)& (0+255),w,b
 15749  0019E6  11FA               	iorwf	(_readAddress+3)& (0+255),w,b
 15750  0019E8  A4D8               	btfss	status,2,c
 15751  0019EA  D006               	goto	l275
 15752                           
 15753                           ; BSR set to: 0
 15754                           ;FlashApp.c: 46: {
 15755                           ;FlashApp.c: 47: readAddress += (64);
 15756  0019EC  0E40               	movlw	64
 15757  0019EE  27F7               	addwf	_readAddress& (0+255),f,b
 15758  0019F0  0E00               	movlw	0
 15759  0019F2  23F8               	addwfc	(_readAddress+1)& (0+255),f,b
 15760  0019F4  23F9               	addwfc	(_readAddress+2)& (0+255),f,b
 15761  0019F6  23FA               	addwfc	(_readAddress+3)& (0+255),f,b
 15762  0019F8                     l275:
 15763                           
 15764                           ;FlashApp.c: 48: }
 15765                           ;FlashApp.c: 49: }
 15766                           ;FlashApp.c: 51: if (numOfValidateSamples < ((0x4000-0x7FF0)/(64)))
 15767                           
 15768                           ; BSR set to: 0
 15769  0019F8  0431               	decf	_numOfValidateSamples,w,c
 15770  0019FA  0EFF               	movlw	255
 15771  0019FC  5832               	subwfb	_numOfValidateSamples+1,w,c
 15772  0019FE  0EFF               	movlw	255
 15773  001A00  5833               	subwfb	_numOfValidateSamples+2,w,c
 15774  001A02  0EFF               	movlw	255
 15775  001A04  5834               	subwfb	_numOfValidateSamples+3,w,c
 15776  001A06  B0D8               	btfsc	status,0,c
 15777  001A08  D006               	goto	l276
 15778                           
 15779                           ;FlashApp.c: 52: {
 15780                           ;FlashApp.c: 53: numOfValidateSamples++;
 15781  001A0A  0E01               	movlw	1
 15782  001A0C  2631               	addwf	_numOfValidateSamples,f,c
 15783  001A0E  0E00               	movlw	0
 15784  001A10  2232               	addwfc	_numOfValidateSamples+1,f,c
 15785  001A12  2233               	addwfc	_numOfValidateSamples+2,f,c
 15786  001A14  2234               	addwfc	_numOfValidateSamples+3,f,c
 15787  001A16                     l276:
 15788                           
 15789                           ;FlashApp.c: 54: }
 15790                           ;FlashApp.c: 55: sampleCount = 0;
 15791  001A16  0E00               	movlw	0
 15792  001A18  0100               	movlb	0	; () banked
 15793  001A1A  6FC7               	movwf	(_sampleCount+1)& (0+255),b
 15794  001A1C  0E00               	movlw	0
 15795  001A1E  6FC6               	movwf	_sampleCount& (0+255),b
 15796  001A20  0012               	return	
 15797  001A22                     __end_of_FlashSampleWrite:
 15798                           	opt stack 0
 15799                           tosu	equ	0xFFF
 15800                           tosh	equ	0xFFE
 15801                           tosl	equ	0xFFD
 15802                           pclath	equ	0xFFA
 15803                           tblptru	equ	0xFF8
 15804                           tblptrh	equ	0xFF7
 15805                           tblptrl	equ	0xFF6
 15806                           tablat	equ	0xFF5
 15807                           prodh	equ	0xFF4
 15808                           prodl	equ	0xFF3
 15809                           intcon	equ	0xFF2
 15810                           intcon2	equ	0xFF1
 15811                           postinc0	equ	0xFEE
 15812                           wreg	equ	0xFE8
 15813                           indf1	equ	0xFE7
 15814                           postdec1	equ	0xFE5
 15815                           fsr1h	equ	0xFE2
 15816                           fsr1l	equ	0xFE1
 15817                           indf2	equ	0xFDF
 15818                           postinc2	equ	0xFDE
 15819                           postdec2	equ	0xFDD
 15820                           fsr2h	equ	0xFDA
 15821                           fsr2l	equ	0xFD9
 15822                           status	equ	0xFD8
 15823                           
 15824 ;; *************** function _FLASH_WriteBlock *****************
 15825 ;; Defined at:
 15826 ;;		line 93 in file "mcc_generated_files/memory.c"
 15827 ;; Parameters:    Size  Location     Type
 15828 ;;  writeAddr       4   28[COMRAM] unsigned long 
 15829 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 15830 ;;		 -> FlashTest@buff(128), sampleArray(64), 
 15831 ;; Auto vars:     Size  Location     Type
 15832 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 15833 ;;  i               1   43[COMRAM] unsigned char 
 15834 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 15835 ;; Return value:  Size  Location     Type
 15836 ;;                  1    wreg      char 
 15837 ;; Registers used:
 15838 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15839 ;; Tracked objects:
 15840 ;;		On entry : 0/0
 15841 ;;		On exit  : 0/0
 15842 ;;		Unchanged: 0/0
 15843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15844 ;;      Params:         6       0       0       0       0       0       0
 15845 ;;      Locals:         6       0       0       0       0       0       0
 15846 ;;      Temps:          4       0       0       0       0       0       0
 15847 ;;      Totals:        16       0       0       0       0       0       0
 15848 ;;Total ram usage:       16 bytes
 15849 ;; Hardware stack levels used:    1
 15850 ;; Hardware stack levels required when called:    4
 15851 ;; This function calls:
 15852 ;;		_FLASH_EraseBlock
 15853 ;; This function is called by:
 15854 ;;		_FlashSampleWrite
 15855 ;;		_FlashTest
 15856 ;;		_FLASH_WriteByte
 15857 ;; This function uses a non-reentrant model
 15858 ;;
 15859                           
 15860                           	psect	text104
 15861  00205A                     __ptext104:
 15862                           	opt stack 0
 15863  00205A                     _FLASH_WriteBlock:
 15864                           	opt stack 24
 15865                           
 15866                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 15867                           
 15868                           ;incstack = 0
 15869  00205A  0EC0               	movlw	192
 15870  00205C  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 15871  00205E  0E7F               	movlw	127
 15872  002060  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 15873  002062  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 15874  002066  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 15875  00206A  5023               	movf	??_FLASH_WriteBlock,w,c
 15876  00206C  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 15877  00206E  5024               	movf	??_FLASH_WriteBlock+1,w,c
 15878  002070  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 15879  002072  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 15880  002076  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 15881  00207A  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 15882  00207C  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 15883                           
 15884                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 15885  00207E  0E00               	movlw	0
 15886  002080  BEF2               	btfsc	intcon,7,c	;volatile
 15887  002082  0E01               	movlw	1
 15888  002084  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 15889                           
 15890                           ;memory.c: 97: uint8_t i;
 15891                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 15892  002086  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 15893  002088  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 15894  00208A  E144               	bnz	l924
 15895  00208C  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 15896  00208E  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 15897  002090  E141               	bnz	l924
 15898  002092  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 15899  002094  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 15900  002096  E13E               	bnz	l924
 15901  002098  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 15902  00209A  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 15903  00209C  A4D8               	btfss	status,2,c
 15904  00209E  0012               	return	
 15905                           
 15906                           ;memory.c: 103: }
 15907                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 15908                           
 15909                           ;memory.c: 101: {
 15910                           ;memory.c: 102: return -1;
 15911                           ;	Return value of _FLASH_WriteBlock is never used
 15912  0020A0  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 15913  0020A4  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 15914  0020A8  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 15915  0020AC  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 15916  0020B0  EC6F  F019         	call	_FLASH_EraseBlock	;wreg free
 15917                           
 15918                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 15919  0020B4  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 15920                           
 15921                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 15922  0020B8  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 15923                           
 15924                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 15925  0020BC  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 15926                           
 15927                           ;memory.c: 114: for (i=0; i<(64); i++)
 15928  0020C0  0E00               	movlw	0
 15929  0020C2  6E2C               	movwf	FLASH_WriteBlock@i,c
 15930  0020C4                     l7178:
 15931  0020C4  0E3F               	movlw	63
 15932  0020C6  642C               	cpfsgt	FLASH_WriteBlock@i,c
 15933  0020C8  D001               	goto	l925
 15934  0020CA  D013               	goto	u6940
 15935  0020CC                     l925:
 15936                           
 15937                           ;memory.c: 115: {
 15938                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 15939  0020CC  502C               	movf	FLASH_WriteBlock@i,w,c
 15940  0020CE  0D01               	mullw	1
 15941  0020D0  50F3               	movf	prodl,w,c
 15942  0020D2  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 15943  0020D4  6ED9               	movwf	fsr2l,c
 15944  0020D6  50F4               	movf	prodh,w,c
 15945  0020D8  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 15946  0020DA  6EDA               	movwf	fsr2h,c
 15947  0020DC  50DF               	movf	indf2,w,c
 15948  0020DE  6EF5               	movwf	tablat,c	;volatile
 15949                           
 15950                           ;memory.c: 118: if (i == ((64)-1))
 15951  0020E0  0E3F               	movlw	63
 15952  0020E2  182C               	xorwf	FLASH_WriteBlock@i,w,c
 15953  0020E4  A4D8               	btfss	status,2,c
 15954  0020E6  D002               	goto	l927
 15955  0020E8  000C               	tblwt		*	;# 
 15956                           
 15957                           ;memory.c: 121: }
 15958  0020EA  D001               	goto	l928
 15959  0020EC                     l927:
 15960  0020EC  000D               	tblwt		*+	;# 
 15961  0020EE                     l928:
 15962  0020EE  2A2C               	incf	FLASH_WriteBlock@i,f,c
 15963  0020F0  D7E9               	goto	l7178
 15964  0020F2                     u6940:
 15965                           
 15966                           ;memory.c: 125: }
 15967                           ;memory.c: 126: }
 15968                           ;memory.c: 128: PIR2bits.EEIF = 1;
 15969  0020F2  88A1               	bsf	4001,4,c	;volatile
 15970                           
 15971                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 15972  0020F4  8EA6               	bsf	4006,7,c	;volsfr
 15973                           
 15974                           ;memory.c: 130: EECON1bits.CFGS = 0;
 15975  0020F6  9CA6               	bcf	4006,6,c	;volsfr
 15976                           
 15977                           ;memory.c: 131: EECON1bits.WREN = 1;
 15978  0020F8  84A6               	bsf	4006,2,c	;volsfr
 15979                           
 15980                           ;memory.c: 132: INTCONbits.GIE = 0;
 15981  0020FA  9EF2               	bcf	intcon,7,c	;volatile
 15982                           
 15983                           ;memory.c: 133: EECON2 = 0x55;
 15984  0020FC  0E55               	movlw	85
 15985  0020FE  6EA7               	movwf	4007,c	;volsfr
 15986                           
 15987                           ;memory.c: 134: EECON2 = 0xAA;
 15988  002100  0EAA               	movlw	170
 15989  002102  6EA7               	movwf	4007,c	;volsfr
 15990                           
 15991                           ;memory.c: 135: EECON1bits.WR = 1;
 15992  002104  82A6               	bsf	4006,1,c	;volsfr
 15993                           
 15994                           ;memory.c: 137: EECON1bits.WREN = 0;
 15995  002106  94A6               	bcf	4006,2,c	;volsfr
 15996                           
 15997                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 15998  002108  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 15999  00210A  D002               	bra	u6955
 16000  00210C  9EF2               	bcf	intcon,7,c	;volatile
 16001  00210E  D001               	bra	u6956
 16002  002110                     u6955:
 16003  002110  8EF2               	bsf	intcon,7,c	;volatile
 16004  002112                     u6956:
 16005  002112  0012               	return	
 16006  002114                     l924:
 16007  002114  0012               	return		;funcret
 16008  002116                     __end_of_FLASH_WriteBlock:
 16009                           	opt stack 0
 16010                           tosu	equ	0xFFF
 16011                           tosh	equ	0xFFE
 16012                           tosl	equ	0xFFD
 16013                           pclath	equ	0xFFA
 16014                           tblptru	equ	0xFF8
 16015                           tblptrh	equ	0xFF7
 16016                           tblptrl	equ	0xFF6
 16017                           tablat	equ	0xFF5
 16018                           prodh	equ	0xFF4
 16019                           prodl	equ	0xFF3
 16020                           intcon	equ	0xFF2
 16021                           intcon2	equ	0xFF1
 16022                           postinc0	equ	0xFEE
 16023                           wreg	equ	0xFE8
 16024                           indf1	equ	0xFE7
 16025                           postdec1	equ	0xFE5
 16026                           fsr1h	equ	0xFE2
 16027                           fsr1l	equ	0xFE1
 16028                           indf2	equ	0xFDF
 16029                           postinc2	equ	0xFDE
 16030                           postdec2	equ	0xFDD
 16031                           fsr2h	equ	0xFDA
 16032                           fsr2l	equ	0xFD9
 16033                           status	equ	0xFD8
 16034                           
 16035 ;; *************** function _FLASH_EraseBlock *****************
 16036 ;; Defined at:
 16037 ;;		line 144 in file "mcc_generated_files/memory.c"
 16038 ;; Parameters:    Size  Location     Type
 16039 ;;  baseAddr        4   23[COMRAM] unsigned long 
 16040 ;; Auto vars:     Size  Location     Type
 16041 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 16042 ;; Return value:  Size  Location     Type
 16043 ;;                  1    wreg      void 
 16044 ;; Registers used:
 16045 ;;		wreg, status,2
 16046 ;; Tracked objects:
 16047 ;;		On entry : 0/0
 16048 ;;		On exit  : 0/0
 16049 ;;		Unchanged: 0/0
 16050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16051 ;;      Params:         4       0       0       0       0       0       0
 16052 ;;      Locals:         1       0       0       0       0       0       0
 16053 ;;      Temps:          0       0       0       0       0       0       0
 16054 ;;      Totals:         5       0       0       0       0       0       0
 16055 ;;Total ram usage:        5 bytes
 16056 ;; Hardware stack levels used:    1
 16057 ;; Hardware stack levels required when called:    3
 16058 ;; This function calls:
 16059 ;;		Nothing
 16060 ;; This function is called by:
 16061 ;;		_FLASH_WriteBlock
 16062 ;; This function uses a non-reentrant model
 16063 ;;
 16064                           
 16065                           	psect	text105
 16066  0032DE                     __ptext105:
 16067                           	opt stack 0
 16068  0032DE                     _FLASH_EraseBlock:
 16069                           	opt stack 24
 16070                           
 16071                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 16072                           
 16073                           ;incstack = 0
 16074  0032DE  0E00               	movlw	0
 16075  0032E0  BEF2               	btfsc	intcon,7,c	;volatile
 16076  0032E2  0E01               	movlw	1
 16077  0032E4  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 16078                           
 16079                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 16080  0032E6  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 16081                           
 16082                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 16083  0032EA  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 16084                           
 16085                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 16086  0032EE  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 16087                           
 16088                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 16089  0032F2  8EA6               	bsf	4006,7,c	;volsfr
 16090                           
 16091                           ;memory.c: 153: EECON1bits.CFGS = 0;
 16092  0032F4  9CA6               	bcf	4006,6,c	;volsfr
 16093                           
 16094                           ;memory.c: 154: EECON1bits.WREN = 1;
 16095  0032F6  84A6               	bsf	4006,2,c	;volsfr
 16096                           
 16097                           ;memory.c: 155: EECON1bits.FREE = 1;
 16098  0032F8  88A6               	bsf	4006,4,c	;volsfr
 16099                           
 16100                           ;memory.c: 156: INTCONbits.GIE = 0;
 16101  0032FA  9EF2               	bcf	intcon,7,c	;volatile
 16102                           
 16103                           ;memory.c: 157: EECON2 = 0x55;
 16104  0032FC  0E55               	movlw	85
 16105  0032FE  6EA7               	movwf	4007,c	;volsfr
 16106                           
 16107                           ;memory.c: 158: EECON2 = 0xAA;
 16108  003300  0EAA               	movlw	170
 16109  003302  6EA7               	movwf	4007,c	;volsfr
 16110                           
 16111                           ;memory.c: 159: EECON1bits.WR = 1;
 16112  003304  82A6               	bsf	4006,1,c	;volsfr
 16113                           
 16114                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 16115  003306  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 16116  003308  D002               	bra	u6695
 16117  00330A  9EF2               	bcf	intcon,7,c	;volatile
 16118  00330C  D001               	bra	u6696
 16119  00330E                     u6695:
 16120  00330E  8EF2               	bsf	intcon,7,c	;volatile
 16121  003310                     u6696:
 16122  003310  0012               	return		;funcret
 16123  003312                     __end_of_FLASH_EraseBlock:
 16124                           	opt stack 0
 16125                           tosu	equ	0xFFF
 16126                           tosh	equ	0xFFE
 16127                           tosl	equ	0xFFD
 16128                           pclath	equ	0xFFA
 16129                           tblptru	equ	0xFF8
 16130                           tblptrh	equ	0xFF7
 16131                           tblptrl	equ	0xFF6
 16132                           tablat	equ	0xFF5
 16133                           prodh	equ	0xFF4
 16134                           prodl	equ	0xFF3
 16135                           intcon	equ	0xFF2
 16136                           intcon2	equ	0xFF1
 16137                           postinc0	equ	0xFEE
 16138                           wreg	equ	0xFE8
 16139                           indf1	equ	0xFE7
 16140                           postdec1	equ	0xFE5
 16141                           fsr1h	equ	0xFE2
 16142                           fsr1l	equ	0xFE1
 16143                           indf2	equ	0xFDF
 16144                           postinc2	equ	0xFDE
 16145                           postdec2	equ	0xFDD
 16146                           fsr2h	equ	0xFDA
 16147                           fsr2l	equ	0xFD9
 16148                           status	equ	0xFD8
 16149                           
 16150 ;; *************** function _FLASH_IsWriteDone *****************
 16151 ;; Defined at:
 16152 ;;		line 189 in file "mcc_generated_files/memory.c"
 16153 ;; Parameters:    Size  Location     Type
 16154 ;;		None
 16155 ;; Auto vars:     Size  Location     Type
 16156 ;;		None
 16157 ;; Return value:  Size  Location     Type
 16158 ;;                  1    wreg      unsigned char 
 16159 ;; Registers used:
 16160 ;;		wreg
 16161 ;; Tracked objects:
 16162 ;;		On entry : 0/0
 16163 ;;		On exit  : 0/0
 16164 ;;		Unchanged: 0/0
 16165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16166 ;;      Params:         0       0       0       0       0       0       0
 16167 ;;      Locals:         0       0       0       0       0       0       0
 16168 ;;      Temps:          0       0       0       0       0       0       0
 16169 ;;      Totals:         0       0       0       0       0       0       0
 16170 ;;Total ram usage:        0 bytes
 16171 ;; Hardware stack levels used:    1
 16172 ;; Hardware stack levels required when called:    3
 16173 ;; This function calls:
 16174 ;;		Nothing
 16175 ;; This function is called by:
 16176 ;;		_FlashSampleWrite
 16177 ;;		_FlashReadUart
 16178 ;; This function uses a non-reentrant model
 16179 ;;
 16180                           
 16181                           	psect	text106
 16182  0036C2                     __ptext106:
 16183                           	opt stack 0
 16184  0036C2                     _FLASH_IsWriteDone:
 16185                           	opt stack 24
 16186                           
 16187                           ;memory.c: 191: return (EECON1bits.WR == 0);
 16188                           
 16189                           ;incstack = 0
 16190  0036C2  A2A6               	btfss	4006,1,c	;volsfr
 16191  0036C4  D001               	goto	u6551
 16192  0036C6  D002               	goto	u6550
 16193  0036C8                     u6551:
 16194  0036C8  0E01               	movlw	1
 16195  0036CA  0012               	return	
 16196  0036CC                     u6550:
 16197  0036CC  0E00               	movlw	0
 16198  0036CE  0012               	return	
 16199  0036D0                     __end_of_FLASH_IsWriteDone:
 16200                           	opt stack 0
 16201                           tosu	equ	0xFFF
 16202                           tosh	equ	0xFFE
 16203                           tosl	equ	0xFFD
 16204                           pclath	equ	0xFFA
 16205                           tblptru	equ	0xFF8
 16206                           tblptrh	equ	0xFF7
 16207                           tblptrl	equ	0xFF6
 16208                           tablat	equ	0xFF5
 16209                           prodh	equ	0xFF4
 16210                           prodl	equ	0xFF3
 16211                           intcon	equ	0xFF2
 16212                           intcon2	equ	0xFF1
 16213                           postinc0	equ	0xFEE
 16214                           wreg	equ	0xFE8
 16215                           indf1	equ	0xFE7
 16216                           postdec1	equ	0xFE5
 16217                           fsr1h	equ	0xFE2
 16218                           fsr1l	equ	0xFE1
 16219                           indf2	equ	0xFDF
 16220                           postinc2	equ	0xFDE
 16221                           postdec2	equ	0xFDD
 16222                           fsr2h	equ	0xFDA
 16223                           fsr2l	equ	0xFD9
 16224                           status	equ	0xFD8
 16225                           
 16226 ;; *************** function _ADC_GetConversion *****************
 16227 ;; Defined at:
 16228 ;;		line 106 in file "mcc_generated_files/adc.c"
 16229 ;; Parameters:    Size  Location     Type
 16230 ;;  channel         1    wreg     enum E6975
 16231 ;; Auto vars:     Size  Location     Type
 16232 ;;  channel         1   27[COMRAM] enum E6975
 16233 ;; Return value:  Size  Location     Type
 16234 ;;                  2   23[COMRAM] unsigned int 
 16235 ;; Registers used:
 16236 ;;		wreg, status,2, status,0
 16237 ;; Tracked objects:
 16238 ;;		On entry : 0/0
 16239 ;;		On exit  : 0/0
 16240 ;;		Unchanged: 0/0
 16241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16242 ;;      Params:         2       0       0       0       0       0       0
 16243 ;;      Locals:         1       0       0       0       0       0       0
 16244 ;;      Temps:          2       0       0       0       0       0       0
 16245 ;;      Totals:         5       0       0       0       0       0       0
 16246 ;;Total ram usage:        5 bytes
 16247 ;; Hardware stack levels used:    1
 16248 ;; Hardware stack levels required when called:    3
 16249 ;; This function calls:
 16250 ;;		Nothing
 16251 ;; This function is called by:
 16252 ;;		_AdcConvert
 16253 ;; This function uses a non-reentrant model
 16254 ;;
 16255                           
 16256                           	psect	text107
 16257  003342                     __ptext107:
 16258                           	opt stack 0
 16259  003342                     _ADC_GetConversion:
 16260                           	opt stack 26
 16261                           
 16262                           ;incstack = 0
 16263                           ;ADC_GetConversion@channel stored from wreg
 16264  003342  6E1C               	movwf	ADC_GetConversion@channel,c
 16265                           
 16266                           ;adc.c: 109: ADCON0bits.CHS = channel;
 16267  003344  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 16268  003348  461A               	rlncf	??_ADC_GetConversion,f,c
 16269  00334A  461A               	rlncf	??_ADC_GetConversion,f,c
 16270  00334C  50C2               	movf	4034,w,c	;volatile
 16271  00334E  181A               	xorwf	??_ADC_GetConversion,w,c
 16272  003350  0B83               	andlw	-125
 16273  003352  181A               	xorwf	??_ADC_GetConversion,w,c
 16274  003354  6EC2               	movwf	4034,c	;volatile
 16275                           
 16276                           ;adc.c: 112: ADCON0bits.ADON = 1;
 16277  003356  80C2               	bsf	4034,0,c	;volatile
 16278                           
 16279                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 16280  003358  82C2               	bsf	4034,1,c	;volatile
 16281  00335A                     
 16282                           ;adc.c: 119: {
 16283  00335A  B2C2               	btfsc	4034,1,c	;volatile
 16284  00335C  D7FE               	goto	l1037
 16285                           
 16286                           ;adc.c: 120: }
 16287                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 16288  00335E  50C4               	movf	4036,w,c	;volatile
 16289  003360  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 16290  003362  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 16291  003364  50C3               	movf	4035,w,c	;volatile
 16292  003366  241A               	addwf	??_ADC_GetConversion,w,c
 16293  003368  6E18               	movwf	?_ADC_GetConversion,c
 16294  00336A  0E00               	movlw	0
 16295  00336C  201B               	addwfc	??_ADC_GetConversion+1,w,c
 16296  00336E  6E19               	movwf	?_ADC_GetConversion+1,c
 16297  003370  0012               	return	
 16298  003372                     __end_of_ADC_GetConversion:
 16299                           	opt stack 0
 16300                           tosu	equ	0xFFF
 16301                           tosh	equ	0xFFE
 16302                           tosl	equ	0xFFD
 16303                           pclath	equ	0xFFA
 16304                           tblptru	equ	0xFF8
 16305                           tblptrh	equ	0xFF7
 16306                           tblptrl	equ	0xFF6
 16307                           tablat	equ	0xFF5
 16308                           prodh	equ	0xFF4
 16309                           prodl	equ	0xFF3
 16310                           intcon	equ	0xFF2
 16311                           intcon2	equ	0xFF1
 16312                           postinc0	equ	0xFEE
 16313                           wreg	equ	0xFE8
 16314                           indf1	equ	0xFE7
 16315                           postdec1	equ	0xFE5
 16316                           fsr1h	equ	0xFE2
 16317                           fsr1l	equ	0xFE1
 16318                           indf2	equ	0xFDF
 16319                           postinc2	equ	0xFDE
 16320                           postdec2	equ	0xFDD
 16321                           fsr2h	equ	0xFDA
 16322                           fsr2l	equ	0xFD9
 16323                           status	equ	0xFD8
 16324                           
 16325 ;; *************** function _INTERRUPT_InterruptManager *****************
 16326 ;; Defined at:
 16327 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 16328 ;; Parameters:    Size  Location     Type
 16329 ;;		None
 16330 ;; Auto vars:     Size  Location     Type
 16331 ;;		None
 16332 ;; Return value:  Size  Location     Type
 16333 ;;                  1    wreg      void 
 16334 ;; Registers used:
 16335 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16336 ;; Tracked objects:
 16337 ;;		On entry : 0/0
 16338 ;;		On exit  : 0/0
 16339 ;;		Unchanged: 0/0
 16340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16341 ;;      Params:         0       0       0       0       0       0       0
 16342 ;;      Locals:         0       0       0       0       0       0       0
 16343 ;;      Temps:         18       0       0       0       0       0       0
 16344 ;;      Totals:        18       0       0       0       0       0       0
 16345 ;;Total ram usage:       18 bytes
 16346 ;; Hardware stack levels used:    1
 16347 ;; Hardware stack levels required when called:    2
 16348 ;; This function calls:
 16349 ;;		_EUSART1_Receive_ISR
 16350 ;;		_EUSART1_Transmit_ISR
 16351 ;;		_MEMORY_ISR
 16352 ;;		_PIN_MANAGER_IOC
 16353 ;;		_TMR0_ISR
 16354 ;; This function is called by:
 16355 ;;		Interrupt level 2
 16356 ;; This function uses a non-reentrant model
 16357 ;;
 16358                           
 16359                           	psect	intcode
 16360  000008                     __pintcode:
 16361                           	opt stack 0
 16362  000008                     _INTERRUPT_InterruptManager:
 16363                           	opt stack 21
 16364                           
 16365                           ;incstack = 0
 16366  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 16367  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 16368  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 16369  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 16370  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 16371  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 16372  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 16373  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 16374  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 16375  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 16376  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 16377  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 16378  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 16379  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 16380  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 16381  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 16382  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 16383  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 16384  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 16385                           
 16386                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 16387  000052  B6F2               	btfsc	intcon,3,c	;volatile
 16388  000054  A0F2               	btfss	intcon,0,c	;volatile
 16389  000056  D003               	goto	i2l762
 16390                           
 16391                           ;interrupt_manager.c: 61: {
 16392                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 16393  000058  EC9B  F01B         	call	_PIN_MANAGER_IOC	;wreg free
 16394                           
 16395                           ;interrupt_manager.c: 63: }
 16396  00005C  D019               	goto	i2l771
 16397  00005E                     i2l762:
 16398                           
 16399                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 16400  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 16401  000060  A4F2               	btfss	intcon,2,c	;volatile
 16402  000062  D003               	goto	i2l764
 16403                           
 16404                           ;interrupt_manager.c: 65: {
 16405                           ;interrupt_manager.c: 66: TMR0_ISR();
 16406  000064  ECD9  F011         	call	_TMR0_ISR	;wreg free
 16407                           
 16408                           ;interrupt_manager.c: 67: }
 16409  000068  D013               	goto	i2l771
 16410  00006A                     i2l764:
 16411                           
 16412                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 16413  00006A  ACF2               	btfss	intcon,6,c	;volatile
 16414  00006C  D011               	goto	i2l771
 16415                           
 16416                           ;interrupt_manager.c: 69: {
 16417                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 16418  00006E  B8A0               	btfsc	4000,4,c	;volatile
 16419  000070  A8A1               	btfss	4001,4,c	;volatile
 16420  000072  D003               	goto	i2l767
 16421                           
 16422                           ;interrupt_manager.c: 71: {
 16423                           ;interrupt_manager.c: 72: MEMORY_ISR();
 16424  000074  EC9D  F01B         	call	_MEMORY_ISR	;wreg free
 16425                           
 16426                           ;interrupt_manager.c: 73: }
 16427  000078  D00B               	goto	i2l771
 16428  00007A                     i2l767:
 16429                           
 16430                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 16431  00007A  B89D               	btfsc	3997,4,c	;volatile
 16432  00007C  A89E               	btfss	3998,4,c	;volatile
 16433  00007E  D003               	goto	i2l769
 16434                           
 16435                           ;interrupt_manager.c: 75: {
 16436                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 16437  000080  ECCD  F018         	call	_EUSART1_Transmit_ISR	;wreg free
 16438                           
 16439                           ;interrupt_manager.c: 77: }
 16440  000084  D005               	goto	i2l771
 16441  000086                     i2l769:
 16442                           
 16443                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 16444  000086  BA9D               	btfsc	3997,5,c	;volatile
 16445  000088  AA9E               	btfss	3998,5,c	;volatile
 16446  00008A  D002               	goto	i2l771
 16447                           
 16448                           ;interrupt_manager.c: 79: {
 16449                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 16450  00008C  ECB9  F019         	call	_EUSART1_Receive_ISR	;wreg free
 16451  000090                     i2l771:
 16452                           
 16453                           ;interrupt_manager.c: 87: else
 16454                           ;interrupt_manager.c: 88: {
 16455                           
 16456                           ;interrupt_manager.c: 85: }
 16457                           ;interrupt_manager.c: 86: }
 16458                           
 16459                           ;interrupt_manager.c: 82: else
 16460                           ;interrupt_manager.c: 83: {
 16461  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 16462  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 16463  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 16464  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 16465  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 16466  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 16467  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 16468  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 16469  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 16470  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 16471  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 16472  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 16473  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 16474  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 16475  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 16476  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 16477  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 16478  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 16479  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 16480  0000DA  0011               	retfie		f
 16481  0000DC                     __end_of_INTERRUPT_InterruptManager:
 16482                           	opt stack 0
 16483                           tosu	equ	0xFFF
 16484                           tosh	equ	0xFFE
 16485                           tosl	equ	0xFFD
 16486                           pclatu	equ	0xFFB
 16487                           pclath	equ	0xFFA
 16488                           tblptru	equ	0xFF8
 16489                           tblptrh	equ	0xFF7
 16490                           tblptrl	equ	0xFF6
 16491                           tablat	equ	0xFF5
 16492                           prodh	equ	0xFF4
 16493                           prodl	equ	0xFF3
 16494                           intcon	equ	0xFF2
 16495                           intcon2	equ	0xFF1
 16496                           postinc0	equ	0xFEE
 16497                           fsr0h	equ	0xFEA
 16498                           fsr0l	equ	0xFE9
 16499                           wreg	equ	0xFE8
 16500                           indf1	equ	0xFE7
 16501                           postdec1	equ	0xFE5
 16502                           fsr1h	equ	0xFE2
 16503                           fsr1l	equ	0xFE1
 16504                           indf2	equ	0xFDF
 16505                           postinc2	equ	0xFDE
 16506                           postdec2	equ	0xFDD
 16507                           fsr2h	equ	0xFDA
 16508                           fsr2l	equ	0xFD9
 16509                           status	equ	0xFD8
 16510                           
 16511 ;; *************** function _TMR0_ISR *****************
 16512 ;; Defined at:
 16513 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 16514 ;; Parameters:    Size  Location     Type
 16515 ;;		None
 16516 ;; Auto vars:     Size  Location     Type
 16517 ;;		None
 16518 ;; Return value:  Size  Location     Type
 16519 ;;                  1    wreg      void 
 16520 ;; Registers used:
 16521 ;;		wreg, status,2, status,0, cstack
 16522 ;; Tracked objects:
 16523 ;;		On entry : 0/0
 16524 ;;		On exit  : 0/0
 16525 ;;		Unchanged: 0/0
 16526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16527 ;;      Params:         0       0       0       0       0       0       0
 16528 ;;      Locals:         0       0       0       0       0       0       0
 16529 ;;      Temps:          0       0       0       0       0       0       0
 16530 ;;      Totals:         0       0       0       0       0       0       0
 16531 ;;Total ram usage:        0 bytes
 16532 ;; Hardware stack levels used:    1
 16533 ;; Hardware stack levels required when called:    1
 16534 ;; This function calls:
 16535 ;;		___lwmod
 16536 ;; This function is called by:
 16537 ;;		_INTERRUPT_InterruptManager
 16538 ;; This function uses a non-reentrant model
 16539 ;;
 16540                           
 16541                           	psect	text109
 16542  0023B2                     __ptext109:
 16543                           	opt stack 0
 16544  0023B2                     _TMR0_ISR:
 16545                           	opt stack 21
 16546                           
 16547                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 16548                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 16549                           
 16550                           ;incstack = 0
 16551  0023B2  94F2               	bcf	intcon,2,c	;volatile
 16552                           
 16553                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 16554  0023B4  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 16555  0023B6  6ED7               	movwf	4055,c	;volatile
 16556                           
 16557                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 16558  0023B8  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 16559                           
 16560                           ;tmr0.c: 146: CountCallBack ++;
 16561  0023BC  4A35               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 16562  0023BE  2A36               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 16563                           
 16564                           ;tmr0.c: 147: if ((CountCallBack % 20) == 0)
 16565  0023C0  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16566  0023C4  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16567  0023C8  0E00               	movlw	0
 16568  0023CA  6E04               	movwf	___lwmod@divisor+1,c
 16569  0023CC  0E14               	movlw	20
 16570  0023CE  6E03               	movwf	___lwmod@divisor,c
 16571  0023D0  ECF9  F017         	call	___lwmod	;wreg free
 16572  0023D4  5001               	movf	?___lwmod,w,c
 16573  0023D6  1002               	iorwf	?___lwmod+1,w,c
 16574  0023D8  A4D8               	btfss	status,2,c
 16575  0023DA  D003               	goto	i2l993
 16576                           
 16577                           ;tmr0.c: 148: {
 16578                           ;tmr0.c: 149: TimerOneSecFlag = 1;
 16579  0023DC  0E01               	movlw	1
 16580  0023DE  0100               	movlb	0	; () banked
 16581  0023E0  6FD6               	movwf	_TimerOneSecFlag& (0+255),b	;volatile
 16582  0023E2                     i2l993:
 16583                           
 16584                           ;tmr0.c: 150: }
 16585                           ;tmr0.c: 152: if ((CountCallBack % 50) == 0)
 16586                           
 16587                           ; BSR set to: 0
 16588  0023E2  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16589  0023E6  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16590  0023EA  0E00               	movlw	0
 16591  0023EC  6E04               	movwf	___lwmod@divisor+1,c
 16592  0023EE  0E32               	movlw	50
 16593  0023F0  6E03               	movwf	___lwmod@divisor,c
 16594  0023F2  ECF9  F017         	call	___lwmod	;wreg free
 16595  0023F6  5001               	movf	?___lwmod,w,c
 16596  0023F8  1002               	iorwf	?___lwmod+1,w,c
 16597  0023FA  A4D8               	btfss	status,2,c
 16598  0023FC  D003               	goto	i2l994
 16599                           
 16600                           ;tmr0.c: 153: {
 16601                           ;tmr0.c: 154: TimerSamplingFlag = 1;
 16602  0023FE  0E01               	movlw	1
 16603  002400  0100               	movlb	0	; () banked
 16604  002402  6FD5               	movwf	_TimerSamplingFlag& (0+255),b	;volatile
 16605  002404                     i2l994:
 16606                           
 16607                           ;tmr0.c: 155: }
 16608                           ;tmr0.c: 156: if ((CountCallBack % 300) == 0)
 16609                           
 16610                           ; BSR set to: 0
 16611  002404  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16612  002408  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16613  00240C  0E01               	movlw	1
 16614  00240E  6E04               	movwf	___lwmod@divisor+1,c
 16615  002410  0E2C               	movlw	44
 16616  002412  6E03               	movwf	___lwmod@divisor,c
 16617  002414  ECF9  F017         	call	___lwmod	;wreg free
 16618  002418  5001               	movf	?___lwmod,w,c
 16619  00241A  1002               	iorwf	?___lwmod+1,w,c
 16620  00241C  A4D8               	btfss	status,2,c
 16621  00241E  D003               	goto	i2l995
 16622                           
 16623                           ;tmr0.c: 157: {
 16624                           ;tmr0.c: 158: TimerKeepAliveFlag = 1;
 16625  002420  0E01               	movlw	1
 16626  002422  0100               	movlb	0	; () banked
 16627  002424  6FD4               	movwf	_TimerKeepAliveFlag& (0+255),b	;volatile
 16628  002426                     i2l995:
 16629                           
 16630                           ;tmr0.c: 159: }
 16631                           ;tmr0.c: 161: CountCallBack %= 300;
 16632                           
 16633                           ; BSR set to: 0
 16634  002426  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 16635  00242A  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 16636  00242E  0E01               	movlw	1
 16637  002430  6E04               	movwf	___lwmod@divisor+1,c
 16638  002432  0E2C               	movlw	44
 16639  002434  6E03               	movwf	___lwmod@divisor,c
 16640  002436  ECF9  F017         	call	___lwmod	;wreg free
 16641  00243A  C001  F035         	movff	?___lwmod,TMR0_ISR@CountCallBack	;volatile
 16642  00243E  C002  F036         	movff	?___lwmod+1,TMR0_ISR@CountCallBack+1	;volatile
 16643  002442  0012               	return		;funcret
 16644  002444                     __end_of_TMR0_ISR:
 16645                           	opt stack 0
 16646                           tosu	equ	0xFFF
 16647                           tosh	equ	0xFFE
 16648                           tosl	equ	0xFFD
 16649                           pclatu	equ	0xFFB
 16650                           pclath	equ	0xFFA
 16651                           tblptru	equ	0xFF8
 16652                           tblptrh	equ	0xFF7
 16653                           tblptrl	equ	0xFF6
 16654                           tablat	equ	0xFF5
 16655                           prodh	equ	0xFF4
 16656                           prodl	equ	0xFF3
 16657                           intcon	equ	0xFF2
 16658                           intcon2	equ	0xFF1
 16659                           postinc0	equ	0xFEE
 16660                           fsr0h	equ	0xFEA
 16661                           fsr0l	equ	0xFE9
 16662                           wreg	equ	0xFE8
 16663                           indf1	equ	0xFE7
 16664                           postdec1	equ	0xFE5
 16665                           fsr1h	equ	0xFE2
 16666                           fsr1l	equ	0xFE1
 16667                           indf2	equ	0xFDF
 16668                           postinc2	equ	0xFDE
 16669                           postdec2	equ	0xFDD
 16670                           fsr2h	equ	0xFDA
 16671                           fsr2l	equ	0xFD9
 16672                           status	equ	0xFD8
 16673                           
 16674 ;; *************** function ___lwmod *****************
 16675 ;; Defined at:
 16676 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 16677 ;; Parameters:    Size  Location     Type
 16678 ;;  dividend        2    0[COMRAM] unsigned int 
 16679 ;;  divisor         2    2[COMRAM] unsigned int 
 16680 ;; Auto vars:     Size  Location     Type
 16681 ;;  counter         1    4[COMRAM] unsigned char 
 16682 ;; Return value:  Size  Location     Type
 16683 ;;                  2    0[COMRAM] unsigned int 
 16684 ;; Registers used:
 16685 ;;		wreg, status,2, status,0
 16686 ;; Tracked objects:
 16687 ;;		On entry : 0/0
 16688 ;;		On exit  : 0/0
 16689 ;;		Unchanged: 0/0
 16690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16691 ;;      Params:         4       0       0       0       0       0       0
 16692 ;;      Locals:         1       0       0       0       0       0       0
 16693 ;;      Temps:          0       0       0       0       0       0       0
 16694 ;;      Totals:         5       0       0       0       0       0       0
 16695 ;;Total ram usage:        5 bytes
 16696 ;; Hardware stack levels used:    1
 16697 ;; This function calls:
 16698 ;;		Nothing
 16699 ;; This function is called by:
 16700 ;;		_TMR0_ISR
 16701 ;;		_segmentCounter
 16702 ;; This function uses a non-reentrant model
 16703 ;;
 16704                           
 16705                           	psect	text110
 16706  002FF2                     __ptext110:
 16707                           	opt stack 0
 16708  002FF2                     ___lwmod:
 16709                           	opt stack 21
 16710                           
 16711                           ;incstack = 0
 16712  002FF2  5003               	movf	___lwmod@divisor,w,c
 16713  002FF4  1004               	iorwf	___lwmod@divisor+1,w,c
 16714  002FF6  B4D8               	btfsc	status,2,c
 16715  002FF8  D018               	goto	i2l1826
 16716  002FFA  0E01               	movlw	1
 16717  002FFC  6E05               	movwf	___lwmod@counter,c
 16718  002FFE  D004               	goto	i2l1821
 16719  003000  90D8               	bcf	status,0,c
 16720  003002  3603               	rlcf	___lwmod@divisor,f,c
 16721  003004  3604               	rlcf	___lwmod@divisor+1,f,c
 16722  003006  2A05               	incf	___lwmod@counter,f,c
 16723  003008                     i2l1821:
 16724  003008  AE04               	btfss	___lwmod@divisor+1,7,c
 16725  00300A  D7FA               	goto	i2l1822
 16726  00300C                     i2u503_40:
 16727  00300C  5003               	movf	___lwmod@divisor,w,c
 16728  00300E  5C01               	subwf	___lwmod@dividend,w,c
 16729  003010  5004               	movf	___lwmod@divisor+1,w,c
 16730  003012  5802               	subwfb	___lwmod@dividend+1,w,c
 16731  003014  A0D8               	btfss	status,0,c
 16732  003016  D004               	goto	i2l1825
 16733  003018  5003               	movf	___lwmod@divisor,w,c
 16734  00301A  5E01               	subwf	___lwmod@dividend,f,c
 16735  00301C  5004               	movf	___lwmod@divisor+1,w,c
 16736  00301E  5A02               	subwfb	___lwmod@dividend+1,f,c
 16737  003020                     i2l1825:
 16738  003020  90D8               	bcf	status,0,c
 16739  003022  3204               	rrcf	___lwmod@divisor+1,f,c
 16740  003024  3203               	rrcf	___lwmod@divisor,f,c
 16741  003026  2E05               	decfsz	___lwmod@counter,f,c
 16742  003028  D7F1               	goto	i2u503_40
 16743  00302A                     i2l1826:
 16744  00302A  C001  F001         	movff	___lwmod@dividend,?___lwmod
 16745  00302E  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 16746  003032  0012               	return		;funcret
 16747  003034                     __end_of___lwmod:
 16748                           	opt stack 0
 16749                           tosu	equ	0xFFF
 16750                           tosh	equ	0xFFE
 16751                           tosl	equ	0xFFD
 16752                           pclatu	equ	0xFFB
 16753                           pclath	equ	0xFFA
 16754                           tblptru	equ	0xFF8
 16755                           tblptrh	equ	0xFF7
 16756                           tblptrl	equ	0xFF6
 16757                           tablat	equ	0xFF5
 16758                           prodh	equ	0xFF4
 16759                           prodl	equ	0xFF3
 16760                           intcon	equ	0xFF2
 16761                           intcon2	equ	0xFF1
 16762                           postinc0	equ	0xFEE
 16763                           fsr0h	equ	0xFEA
 16764                           fsr0l	equ	0xFE9
 16765                           wreg	equ	0xFE8
 16766                           indf1	equ	0xFE7
 16767                           postdec1	equ	0xFE5
 16768                           fsr1h	equ	0xFE2
 16769                           fsr1l	equ	0xFE1
 16770                           indf2	equ	0xFDF
 16771                           postinc2	equ	0xFDE
 16772                           postdec2	equ	0xFDD
 16773                           fsr2h	equ	0xFDA
 16774                           fsr2l	equ	0xFD9
 16775                           status	equ	0xFD8
 16776                           
 16777 ;; *************** function _PIN_MANAGER_IOC *****************
 16778 ;; Defined at:
 16779 ;;		line 96 in file "mcc_generated_files/pin_manager.c"
 16780 ;; Parameters:    Size  Location     Type
 16781 ;;		None
 16782 ;; Auto vars:     Size  Location     Type
 16783 ;;		None
 16784 ;; Return value:  Size  Location     Type
 16785 ;;                  1    wreg      void 
 16786 ;; Registers used:
 16787 ;;		None
 16788 ;; Tracked objects:
 16789 ;;		On entry : 0/0
 16790 ;;		On exit  : 0/0
 16791 ;;		Unchanged: 0/0
 16792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16793 ;;      Params:         0       0       0       0       0       0       0
 16794 ;;      Locals:         0       0       0       0       0       0       0
 16795 ;;      Temps:          0       0       0       0       0       0       0
 16796 ;;      Totals:         0       0       0       0       0       0       0
 16797 ;;Total ram usage:        0 bytes
 16798 ;; Hardware stack levels used:    1
 16799 ;; This function calls:
 16800 ;;		Nothing
 16801 ;; This function is called by:
 16802 ;;		_INTERRUPT_InterruptManager
 16803 ;; This function uses a non-reentrant model
 16804 ;;
 16805                           
 16806                           	psect	text111
 16807  003736                     __ptext111:
 16808                           	opt stack 0
 16809  003736                     _PIN_MANAGER_IOC:
 16810                           	opt stack 22
 16811                           
 16812                           ;pin_manager.c: 100: INTCONbits.RBIF = 0;
 16813                           
 16814                           ;incstack = 0
 16815  003736  90F2               	bcf	intcon,0,c	;volatile
 16816  003738  0012               	return		;funcret
 16817  00373A                     __end_of_PIN_MANAGER_IOC:
 16818                           	opt stack 0
 16819                           tosu	equ	0xFFF
 16820                           tosh	equ	0xFFE
 16821                           tosl	equ	0xFFD
 16822                           pclatu	equ	0xFFB
 16823                           pclath	equ	0xFFA
 16824                           tblptru	equ	0xFF8
 16825                           tblptrh	equ	0xFF7
 16826                           tblptrl	equ	0xFF6
 16827                           tablat	equ	0xFF5
 16828                           prodh	equ	0xFF4
 16829                           prodl	equ	0xFF3
 16830                           intcon	equ	0xFF2
 16831                           intcon2	equ	0xFF1
 16832                           postinc0	equ	0xFEE
 16833                           fsr0h	equ	0xFEA
 16834                           fsr0l	equ	0xFE9
 16835                           wreg	equ	0xFE8
 16836                           indf1	equ	0xFE7
 16837                           postdec1	equ	0xFE5
 16838                           fsr1h	equ	0xFE2
 16839                           fsr1l	equ	0xFE1
 16840                           indf2	equ	0xFDF
 16841                           postinc2	equ	0xFDE
 16842                           postdec2	equ	0xFDD
 16843                           fsr2h	equ	0xFDA
 16844                           fsr2l	equ	0xFD9
 16845                           status	equ	0xFD8
 16846                           
 16847 ;; *************** function _MEMORY_ISR *****************
 16848 ;; Defined at:
 16849 ;;		line 206 in file "mcc_generated_files/memory.c"
 16850 ;; Parameters:    Size  Location     Type
 16851 ;;		None
 16852 ;; Auto vars:     Size  Location     Type
 16853 ;;		None
 16854 ;; Return value:  Size  Location     Type
 16855 ;;                  1    wreg      void 
 16856 ;; Registers used:
 16857 ;;		None
 16858 ;; Tracked objects:
 16859 ;;		On entry : 0/0
 16860 ;;		On exit  : 0/0
 16861 ;;		Unchanged: 0/0
 16862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16863 ;;      Params:         0       0       0       0       0       0       0
 16864 ;;      Locals:         0       0       0       0       0       0       0
 16865 ;;      Temps:          0       0       0       0       0       0       0
 16866 ;;      Totals:         0       0       0       0       0       0       0
 16867 ;;Total ram usage:        0 bytes
 16868 ;; Hardware stack levels used:    1
 16869 ;; This function calls:
 16870 ;;		Nothing
 16871 ;; This function is called by:
 16872 ;;		_INTERRUPT_InterruptManager
 16873 ;; This function uses a non-reentrant model
 16874 ;;
 16875                           
 16876                           	psect	text112
 16877  00373A                     __ptext112:
 16878                           	opt stack 0
 16879  00373A                     _MEMORY_ISR:
 16880                           	opt stack 22
 16881                           
 16882                           ;memory.c: 209: PIR2bits.EEIF = 0;
 16883                           
 16884                           ;incstack = 0
 16885  00373A  98A1               	bcf	4001,4,c	;volatile
 16886  00373C  0012               	return		;funcret
 16887  00373E                     __end_of_MEMORY_ISR:
 16888                           	opt stack 0
 16889                           tosu	equ	0xFFF
 16890                           tosh	equ	0xFFE
 16891                           tosl	equ	0xFFD
 16892                           pclatu	equ	0xFFB
 16893                           pclath	equ	0xFFA
 16894                           tblptru	equ	0xFF8
 16895                           tblptrh	equ	0xFF7
 16896                           tblptrl	equ	0xFF6
 16897                           tablat	equ	0xFF5
 16898                           prodh	equ	0xFF4
 16899                           prodl	equ	0xFF3
 16900                           intcon	equ	0xFF2
 16901                           intcon2	equ	0xFF1
 16902                           postinc0	equ	0xFEE
 16903                           fsr0h	equ	0xFEA
 16904                           fsr0l	equ	0xFE9
 16905                           wreg	equ	0xFE8
 16906                           indf1	equ	0xFE7
 16907                           postdec1	equ	0xFE5
 16908                           fsr1h	equ	0xFE2
 16909                           fsr1l	equ	0xFE1
 16910                           indf2	equ	0xFDF
 16911                           postinc2	equ	0xFDE
 16912                           postdec2	equ	0xFDD
 16913                           fsr2h	equ	0xFDA
 16914                           fsr2l	equ	0xFD9
 16915                           status	equ	0xFD8
 16916                           
 16917 ;; *************** function _EUSART1_Transmit_ISR *****************
 16918 ;; Defined at:
 16919 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 16920 ;; Parameters:    Size  Location     Type
 16921 ;;		None
 16922 ;; Auto vars:     Size  Location     Type
 16923 ;;		None
 16924 ;; Return value:  Size  Location     Type
 16925 ;;                  1    wreg      void 
 16926 ;; Registers used:
 16927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16928 ;; Tracked objects:
 16929 ;;		On entry : 0/0
 16930 ;;		On exit  : 0/0
 16931 ;;		Unchanged: 0/0
 16932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16933 ;;      Params:         0       0       0       0       0       0       0
 16934 ;;      Locals:         0       0       0       0       0       0       0
 16935 ;;      Temps:          0       0       0       0       0       0       0
 16936 ;;      Totals:         0       0       0       0       0       0       0
 16937 ;;Total ram usage:        0 bytes
 16938 ;; Hardware stack levels used:    1
 16939 ;; This function calls:
 16940 ;;		Nothing
 16941 ;; This function is called by:
 16942 ;;		_INTERRUPT_InterruptManager
 16943 ;; This function uses a non-reentrant model
 16944 ;;
 16945                           
 16946                           	psect	text113
 16947  00319A                     __ptext113:
 16948                           	opt stack 0
 16949  00319A                     _EUSART1_Transmit_ISR:
 16950                           	opt stack 22
 16951                           
 16952                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 16953                           
 16954                           ;incstack = 0
 16955  00319A  0E46               	movlw	70
 16956  00319C  0100               	movlb	0	; () banked
 16957  00319E  61FF               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 16958  0031A0  D012               	goto	i2l833
 16959                           
 16960                           ; BSR set to: 0
 16961                           ;eusart1.c: 186: {
 16962                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 16963  0031A2  5039               	movf	_eusart1TxTail,w,c	;volatile
 16964  0031A4  0D01               	mullw	1
 16965  0031A6  0E00               	movlw	low _eusart1TxBuffer
 16966  0031A8  24F3               	addwf	prodl,w,c
 16967  0031AA  6ED9               	movwf	fsr2l,c
 16968  0031AC  0E01               	movlw	high _eusart1TxBuffer
 16969  0031AE  20F4               	addwfc	prodh,w,c
 16970  0031B0  6EDA               	movwf	fsr2h,c
 16971  0031B2  50DF               	movf	indf2,w,c
 16972  0031B4  6EAD               	movwf	4013,c	;volatile
 16973                           
 16974                           ; BSR set to: 0
 16975  0031B6  2A39               	incf	_eusart1TxTail,f,c	;volatile
 16976                           
 16977                           ; BSR set to: 0
 16978                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 16979  0031B8  0E45               	movlw	69
 16980  0031BA  6439               	cpfsgt	_eusart1TxTail,c	;volatile
 16981  0031BC  D002               	goto	i2l834
 16982                           
 16983                           ; BSR set to: 0
 16984                           ;eusart1.c: 189: {
 16985                           ;eusart1.c: 190: eusart1TxTail = 0;
 16986  0031BE  0E00               	movlw	0
 16987  0031C0  6E39               	movwf	_eusart1TxTail,c	;volatile
 16988  0031C2                     i2l834:
 16989                           
 16990                           ; BSR set to: 0
 16991                           ;eusart1.c: 191: }
 16992                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 16993                           
 16994                           ; BSR set to: 0
 16995  0031C2  2BFF               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 16996                           
 16997                           ;eusart1.c: 193: }
 16998  0031C4  0012               	return	
 16999  0031C6                     i2l833:
 17000                           
 17001                           ; BSR set to: 0
 17002                           ;eusart1.c: 194: else
 17003                           ;eusart1.c: 195: {
 17004                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 17005  0031C6  989D               	bcf	3997,4,c	;volatile
 17006                           
 17007                           ; BSR set to: 0
 17008                           ;eusart1.c: 197: eusart1TxTail = 0;
 17009  0031C8  0E00               	movlw	0
 17010  0031CA  6E39               	movwf	_eusart1TxTail,c	;volatile
 17011                           
 17012                           ;eusart1.c: 198: eusart1TxHead = 0;
 17013  0031CC  0E00               	movlw	0
 17014  0031CE  6E3A               	movwf	_eusart1TxHead,c	;volatile
 17015  0031D0  0012               	return	
 17016  0031D2                     __end_of_EUSART1_Transmit_ISR:
 17017                           	opt stack 0
 17018                           tosu	equ	0xFFF
 17019                           tosh	equ	0xFFE
 17020                           tosl	equ	0xFFD
 17021                           pclatu	equ	0xFFB
 17022                           pclath	equ	0xFFA
 17023                           tblptru	equ	0xFF8
 17024                           tblptrh	equ	0xFF7
 17025                           tblptrl	equ	0xFF6
 17026                           tablat	equ	0xFF5
 17027                           prodh	equ	0xFF4
 17028                           prodl	equ	0xFF3
 17029                           intcon	equ	0xFF2
 17030                           intcon2	equ	0xFF1
 17031                           postinc0	equ	0xFEE
 17032                           fsr0h	equ	0xFEA
 17033                           fsr0l	equ	0xFE9
 17034                           wreg	equ	0xFE8
 17035                           indf1	equ	0xFE7
 17036                           postdec1	equ	0xFE5
 17037                           fsr1h	equ	0xFE2
 17038                           fsr1l	equ	0xFE1
 17039                           indf2	equ	0xFDF
 17040                           postinc2	equ	0xFDE
 17041                           postdec2	equ	0xFDD
 17042                           fsr2h	equ	0xFDA
 17043                           fsr2l	equ	0xFD9
 17044                           status	equ	0xFD8
 17045                           
 17046 ;; *************** function _EUSART1_Receive_ISR *****************
 17047 ;; Defined at:
 17048 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 17049 ;; Parameters:    Size  Location     Type
 17050 ;;		None
 17051 ;; Auto vars:     Size  Location     Type
 17052 ;;		None
 17053 ;; Return value:  Size  Location     Type
 17054 ;;                  1    wreg      void 
 17055 ;; Registers used:
 17056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17057 ;; Tracked objects:
 17058 ;;		On entry : 0/0
 17059 ;;		On exit  : 0/0
 17060 ;;		Unchanged: 0/0
 17061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17062 ;;      Params:         0       0       0       0       0       0       0
 17063 ;;      Locals:         0       0       0       0       0       0       0
 17064 ;;      Temps:          0       0       0       0       0       0       0
 17065 ;;      Totals:         0       0       0       0       0       0       0
 17066 ;;Total ram usage:        0 bytes
 17067 ;; Hardware stack levels used:    1
 17068 ;; This function calls:
 17069 ;;		Nothing
 17070 ;; This function is called by:
 17071 ;;		_INTERRUPT_InterruptManager
 17072 ;; This function uses a non-reentrant model
 17073 ;;
 17074                           
 17075                           	psect	text114
 17076  003372                     __ptext114:
 17077                           	opt stack 0
 17078  003372                     _EUSART1_Receive_ISR:
 17079                           	opt stack 22
 17080                           
 17081                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 17082                           
 17083                           ; BSR set to: 0
 17084                           ;incstack = 0
 17085  003372  A2AB               	btfss	4011,1,c	;volatile
 17086  003374  D002               	goto	i2l839
 17087                           
 17088                           ;eusart1.c: 206: {
 17089                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 17090  003376  98AB               	bcf	4011,4,c	;volatile
 17091                           
 17092                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 17093  003378  88AB               	bsf	4011,4,c	;volatile
 17094  00337A                     i2l839:
 17095                           
 17096                           ;eusart1.c: 210: }
 17097                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 17098  00337A  5038               	movf	_eusart1RxHead,w,c	;volatile
 17099  00337C  0D01               	mullw	1
 17100  00337E  0E46               	movlw	low _eusart1RxBuffer
 17101  003380  24F3               	addwf	prodl,w,c
 17102  003382  6ED9               	movwf	fsr2l,c
 17103  003384  0E01               	movlw	high _eusart1RxBuffer
 17104  003386  20F4               	addwfc	prodh,w,c
 17105  003388  6EDA               	movwf	fsr2h,c
 17106  00338A  CFAE FFDF          	movff	4014,indf2	;volatile
 17107  00338E  2A38               	incf	_eusart1RxHead,f,c	;volatile
 17108                           
 17109                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 17110  003390  0E27               	movlw	39
 17111  003392  6438               	cpfsgt	_eusart1RxHead,c	;volatile
 17112  003394  D002               	goto	i2l840
 17113                           
 17114                           ;eusart1.c: 217: {
 17115                           ;eusart1.c: 218: eusart1RxHead = 0;
 17116  003396  0E00               	movlw	0
 17117  003398  6E38               	movwf	_eusart1RxHead,c	;volatile
 17118  00339A                     i2l840:
 17119                           
 17120                           ;eusart1.c: 219: }
 17121                           ;eusart1.c: 220: eusart1RxCount++;
 17122  00339A  0100               	movlb	0	; () banked
 17123  00339C  2BD2               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 17124                           
 17125                           ; BSR set to: 0
 17126  00339E  0012               	return		;funcret
 17127  0033A0                     __end_of_EUSART1_Receive_ISR:
 17128                           	opt stack 0
 17129                           tosu	equ	0xFFF
 17130                           tosh	equ	0xFFE
 17131                           tosl	equ	0xFFD
 17132                           pclatu	equ	0xFFB
 17133                           pclath	equ	0xFFA
 17134                           tblptru	equ	0xFF8
 17135                           tblptrh	equ	0xFF7
 17136                           tblptrl	equ	0xFF6
 17137                           tablat	equ	0xFF5
 17138                           prodh	equ	0xFF4
 17139                           prodl	equ	0xFF3
 17140                           intcon	equ	0xFF2
 17141                           intcon2	equ	0xFF1
 17142                           postinc0	equ	0xFEE
 17143                           fsr0h	equ	0xFEA
 17144                           fsr0l	equ	0xFE9
 17145                           wreg	equ	0xFE8
 17146                           indf1	equ	0xFE7
 17147                           postdec1	equ	0xFE5
 17148                           fsr1h	equ	0xFE2
 17149                           fsr1l	equ	0xFE1
 17150                           indf2	equ	0xFDF
 17151                           postinc2	equ	0xFDE
 17152                           postdec2	equ	0xFDD
 17153                           fsr2h	equ	0xFDA
 17154                           fsr2l	equ	0xFD9
 17155                           status	equ	0xFD8
 17156                           tosu	equ	0xFFF
 17157                           tosh	equ	0xFFE
 17158                           tosl	equ	0xFFD
 17159                           pclatu	equ	0xFFB
 17160                           pclath	equ	0xFFA
 17161                           tblptru	equ	0xFF8
 17162                           tblptrh	equ	0xFF7
 17163                           tblptrl	equ	0xFF6
 17164                           tablat	equ	0xFF5
 17165                           prodh	equ	0xFF4
 17166                           prodl	equ	0xFF3
 17167                           intcon	equ	0xFF2
 17168                           intcon2	equ	0xFF1
 17169                           postinc0	equ	0xFEE
 17170                           fsr0h	equ	0xFEA
 17171                           fsr0l	equ	0xFE9
 17172                           wreg	equ	0xFE8
 17173                           indf1	equ	0xFE7
 17174                           postdec1	equ	0xFE5
 17175                           fsr1h	equ	0xFE2
 17176                           fsr1l	equ	0xFE1
 17177                           indf2	equ	0xFDF
 17178                           postinc2	equ	0xFDE
 17179                           postdec2	equ	0xFDD
 17180                           fsr2h	equ	0xFDA
 17181                           fsr2l	equ	0xFD9
 17182                           status	equ	0xFD8
 17183                           
 17184                           	psect	text115
 17185  000000                     __ptext115:
 17186                           	opt stack 0
 17187                           tosu	equ	0xFFF
 17188                           tosh	equ	0xFFE
 17189                           tosl	equ	0xFFD
 17190                           pclatu	equ	0xFFB
 17191                           pclath	equ	0xFFA
 17192                           tblptru	equ	0xFF8
 17193                           tblptrh	equ	0xFF7
 17194                           tblptrl	equ	0xFF6
 17195                           tablat	equ	0xFF5
 17196                           prodh	equ	0xFF4
 17197                           prodl	equ	0xFF3
 17198                           intcon	equ	0xFF2
 17199                           intcon2	equ	0xFF1
 17200                           postinc0	equ	0xFEE
 17201                           fsr0h	equ	0xFEA
 17202                           fsr0l	equ	0xFE9
 17203                           wreg	equ	0xFE8
 17204                           indf1	equ	0xFE7
 17205                           postdec1	equ	0xFE5
 17206                           fsr1h	equ	0xFE2
 17207                           fsr1l	equ	0xFE1
 17208                           indf2	equ	0xFDF
 17209                           postinc2	equ	0xFDE
 17210                           postdec2	equ	0xFDD
 17211                           fsr2h	equ	0xFDA
 17212                           fsr2l	equ	0xFD9
 17213                           status	equ	0xFD8
 17214                           
 17215                           	psect	rparam
 17216  0000                     tosu	equ	0xFFF
 17217                           tosh	equ	0xFFE
 17218                           tosl	equ	0xFFD
 17219                           pclatu	equ	0xFFB
 17220                           pclath	equ	0xFFA
 17221                           tblptru	equ	0xFF8
 17222                           tblptrh	equ	0xFF7
 17223                           tblptrl	equ	0xFF6
 17224                           tablat	equ	0xFF5
 17225                           prodh	equ	0xFF4
 17226                           prodl	equ	0xFF3
 17227                           intcon	equ	0xFF2
 17228                           intcon2	equ	0xFF1
 17229                           postinc0	equ	0xFEE
 17230                           fsr0h	equ	0xFEA
 17231                           fsr0l	equ	0xFE9
 17232                           wreg	equ	0xFE8
 17233                           indf1	equ	0xFE7
 17234                           postdec1	equ	0xFE5
 17235                           fsr1h	equ	0xFE2
 17236                           fsr1l	equ	0xFE1
 17237                           indf2	equ	0xFDF
 17238                           postinc2	equ	0xFDE
 17239                           postdec2	equ	0xFDD
 17240                           fsr2h	equ	0xFDA
 17241                           fsr2l	equ	0xFD9
 17242                           status	equ	0xFD8
 17243                           
 17244                           	psect	temp
 17245  000048                     btemp:
 17246                           	opt stack 0
 17247  000048                     	ds	1
 17248  0000                     int$flags	set	btemp
 17249  0000                     wtemp6	set	btemp+1
 17250                           tosu	equ	0xFFF
 17251                           tosh	equ	0xFFE
 17252                           tosl	equ	0xFFD
 17253                           pclatu	equ	0xFFB
 17254                           pclath	equ	0xFFA
 17255                           tblptru	equ	0xFF8
 17256                           tblptrh	equ	0xFF7
 17257                           tblptrl	equ	0xFF6
 17258                           tablat	equ	0xFF5
 17259                           prodh	equ	0xFF4
 17260                           prodl	equ	0xFF3
 17261                           intcon	equ	0xFF2
 17262                           intcon2	equ	0xFF1
 17263                           postinc0	equ	0xFEE
 17264                           fsr0h	equ	0xFEA
 17265                           fsr0l	equ	0xFE9
 17266                           wreg	equ	0xFE8
 17267                           indf1	equ	0xFE7
 17268                           postdec1	equ	0xFE5
 17269                           fsr1h	equ	0xFE2
 17270                           fsr1l	equ	0xFE1
 17271                           indf2	equ	0xFDF
 17272                           postinc2	equ	0xFDE
 17273                           postdec2	equ	0xFDD
 17274                           fsr2h	equ	0xFDA
 17275                           fsr2l	equ	0xFD9
 17276                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    116
    Data        20
    BSS         254
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160     96     160
    BANK1           256     10     204
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    UpdateRxFreq@data	PTR unsigned char  size(2) Largest target is 0

    PLLUartInitialize@data	PTR unsigned char  size(2) Largest target is 0

    SetConversionResultFormat@data	PTR unsigned char  size(2) Largest target is 0

    SetAdcOperationMode@data	PTR unsigned char  size(2) Largest target is 0

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 8
		 -> GetIntFromUartData@dataRegArr(BANK0[8]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[8]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK0[20]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[8]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK0[20]), 

    SetCpldFwVersion@data	PTR unsigned char  size(2) Largest target is 0

    SetMcuFwVersion@data	PTR unsigned char  size(2) Largest target is 0

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[8]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK0[20]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), GetIntFromUartData@dataRegArr(BANK0[8]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), 
		 -> rxMsgQueue(BANK0[20]), 

    crc8@dataArray	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK0[20]), 

    GroupDAC@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 128
		 -> FlashTest@buff(BANK0[128]), sampleArray(BANK1[64]), 

    UpdateTxFreq@data	PTR unsigned char  size(2) Largest target is 0

    DacSetValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    WriteUartMessage@dataBuf	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetCpldFwVersion@TxMsg(COMRAM[9]), GetMcuFwVersion@TxMsg(COMRAM[9]), FlashReadCondition@TxMsg(COMRAM[9]), 
		 -> FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), 

    SetChannelMode@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _UpdateRxFreq->_SendAckMessage
    _GroupStatusAndVersion->_GetCpldFwVersion
    _SetMcuFwVersion->_SendAckMessage
    _SetCpldFwVersion->_SendAckMessage
    _EepromWrite->_DATAEE_WriteByte
    _GetMcuRunTime->___lldiv
    _GetMcuFwVersion->_ZeroArray
    _GetCpldFwVersion->_ZeroArray
    _EepromRead->_DATAEE_ReadByte
    _GroupFlashMemory->_FlashReadCondition
    _FlashReadUart->_ZeroArray
    _FlashReadCondition->_ZeroArray
    _FlashEreaseMem->_SendAckMessage
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _testLeds->_SendAckMessage
    _ResetMcu->_SendAckMessage
    _ResetCpld->_SendAckMessage
    _SetConversionResultFormat->_SendAckMessage
    _SetChannelMode->_SendAckMessage
    _SetAdcOperationMode->_SendAckMessage
    _keepAliveSignalUart->_SendAckMessage
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendSystemStartAck->_SendAckMessage
    _SendAckMessage->_ZeroArray
    _ZeroArray->_memset
    _WriteUartMessage->_EUSART1_Write
    _InitSystemApplicationManagers->_PLLInitialize
    _PLLInitialize->_SWSPI_send_word
    _SWSPI_send_word->_make8
    _SWSPI_send_bits->_SwSpi_Set_Clock
    _SwSpi_Set_Clock->_SwSpi_Clk_Pin
    _CheckFlashPrecentage->___ftdiv
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _readUartMessage->_GroupAdc
    _readUartMessage->_GroupControlMcu
    _readUartMessage->_GroupDAC
    _readUartMessage->_GroupFlashMemory
    _readUartMessage->_GroupStatusAndVersion
    _readUartMessage->_GroupSynthesizers
    _UpdateTxFreq->_GetIntFromUartData
    _GroupFlashMemory->_FlashReadUart
    _DacSetValue->_GetIntFromUartData
    _GetIntFromUartData->_strtol
    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_readUartMessage
    _readUartMessage->_GroupFlashMemory

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  268825
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
                 _SendSystemStartAck
                      _SetMcuRunTime
                       _SetMcuSystem
                 _keepAliveSignalLed
                _keepAliveSignalUart
                    _readUartMessage
 ---------------------------------------------------------------------------------
 (1) _readUartMessage                                      7     7      0  136424
                                              3 BANK1      7     7      0
                       _EUSART1_Read
                           _GroupAdc *
                    _GroupControlMcu *
                           _GroupDAC *
                   _GroupFlashMemory *
              _GroupStatusAndVersion *
                  _GroupSynthesizers *
                _InitRxMessageParams
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    2089
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupSynthesizers                                    3     1      2   24075
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                  _PLLUartInitialize
                       _UpdateRxFreq
                       _UpdateTxFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateTxFreq                                         6     4      2   17278
                                             45 COMRAM     2     0      2
                                             21 BANK0      4     4      0
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _UpdateRxFreq                                         6     4      2    6462
                                             43 COMRAM     2     0      2
                                              0 BANK0      4     4      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _PLLUartInitialize                                    2     0      2     180
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _GroupStatusAndVersion                                3     1      2   29059
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                   _GetCpldFwVersion
                    _GetMcuFwVersion
                      _GetMcuRunTime
                   _SetCpldFwVersion
                    _SetMcuFwVersion
 ---------------------------------------------------------------------------------
 (3) _SetMcuFwVersion                                      3     1      2    7138
                                             43 COMRAM     3     1      2
                        _EepromWrite
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetCpldFwVersion                                     4     2      2    7138
                                             43 COMRAM     4     2      2
                        _EepromWrite
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _EepromWrite                                          2     1      1     518
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     3     2      1     276
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) _GetMcuRunTime                                       17    17      0    4138
                                             36 COMRAM     2     2      0
                                              0 BANK0     15    15      0
                   _WriteUartMessage
                            ___lldiv
                            ___llmod
                               _crc8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _GetMcuFwVersion                                     12    12      0    5276
                                             35 COMRAM    12    12      0
                         _EepromRead
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _GetCpldFwVersion                                    13    13      0    5276
                                             35 COMRAM    13    13      0
                         _EepromRead
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _EepromRead                                           1     1      0      62
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_ReadByte                                      1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _GroupFlashMemory                                     4     2      2   21239
                                             95 BANK0      1     1      0
                                              0 BANK1      3     1      2
                     _FlashEreaseMem
                 _FlashReadCondition
                      _FlashReadUart
 ---------------------------------------------------------------------------------
 (3) _FlashReadUart                                       97    95      2    6469
                                             35 COMRAM     2     0      2
                                              0 BANK0     95    95      0
                  _FLASH_IsWriteDone
                     _FLASH_ReadByte
                   _WriteUartMessage
                          _ZeroArray
                                _abs
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     183
                                             23 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _FLASH_ReadByte                                       4     0      4     543
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _FlashReadCondition                                  13    13      0    6250
                                             35 COMRAM    13    13      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _FlashEreaseMem                                       0     0      0    8458
                     _SendAckMessage
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupDAC                                             3     1      2   17405
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                        _DacSetValue
 ---------------------------------------------------------------------------------
 (3) _DacSetValue                                          6     4      2   17278
                                             45 COMRAM     2     0      2
                                             21 BANK0      4     4      0
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  15    11      4    4922
                                              6 BANK0     15    11      4
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2273
                                             35 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     456
                                             23 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) _GroupControlMcu                                      4     1      3   19206
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                          _ResetCpld
                           _ResetMcu
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0    6437
                                             43 COMRAM     3     3      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetMcu                                             0     0      0    6369
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetCpld                                            0     0      0    6369
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupAdc                                             3     1      2   19563
                                             95 BANK0      1     1      0
                                              0 BANK1      2     0      2
                _SetAdcOperationMode
                     _SetChannelMode
          _SetConversionResultFormat
 ---------------------------------------------------------------------------------
 (3) _SetConversionResultFormat                            2     0      2    6459
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetChannelMode                                       2     0      2    6521
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _SetAdcOperationMode                                  2     0      2    6459
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalUart                                  0     0      0    6369
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0      98
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0      98
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     592
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     592
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendSystemStartAck                                   0     0      0    6369
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _SendAckMessage                                       8     7      1    6369
                                             35 COMRAM     8     7      1
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _crc8                                                 9     5      4    1430
                                             23 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ZeroArray                                            4     0      4    2089
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     407
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _WriteUartMessage                                     7     3      4    1272
                                             24 COMRAM     7     3      4
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0    6293
                    _ClearMcuRunTime
              _InitAdcApplicationMgr
                   _InitSevenSegment
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        6     6      0    6292
                                             41 COMRAM     6     6      0
                    _SWSPI_send_word
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (3) _SwSpi_Set_CE_Pin                                     2     1      1     262
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _SWSPI_send_word                                      9     4      5    5832
                                             32 COMRAM     9     4      5
                    _SWSPI_send_bits
             _SwSpi_Set_Dac_Ldac_Pin
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5    1055
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Dac_Ldac_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SWSPI_send_bits                                      3     2      1    1746
                                             26 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
                    _SwSpi_Set_Clock
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Set_Clock                                      1     1      0     518
                                             25 COMRAM     1     1      0
                      _SwSpi_Clk_Pin
 ---------------------------------------------------------------------------------
 (7) _SwSpi_Clk_Pin                                        2     1      1     425
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Data_Pin                                       2     1      1     487
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitSevenSegment                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                1     1      0       1
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   13919
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _BlinkErrorLeds                                       6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          12    12      0   98581
                                             81 BANK0     12    12      0
                  _ADC_GetConversion
                   _FlashSampleWrite
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (2) _pow                                                 17    11      6   83041
                                             64 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  5     2      3   26919
                                             46 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                  9     6      3   44808
                                             55 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                7     2      5     400
                                             46 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                                8     5      3   11219
                                             47 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                7     2      5     528
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     632
                                             24 BANK0     15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     896
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (5) ___altoft                                            10     6      4    3367
                                             46 COMRAM     2     2      0
                                             39 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           12     5      7   11976
                                             46 COMRAM     2     2      0
                                             36 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     563
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     273
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    3386
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1631
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6    1172
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                          18    18      0     919
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (9) _TMR0_ISR                                             0     0      0     919
                            ___lwmod
 ---------------------------------------------------------------------------------
 (10) ___lwmod                                             5     1      4     919
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _MEMORY_ISR                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART1_Receive_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _InitAdcApplicationMgr
     _InitSevenSegment
     _PLLInitialize
       _SWSPI_send_word
         _SWSPI_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
           _SwSpi_Set_Clock
             _SwSpi_Clk_Pin
         _SwSpi_Set_Dac_Ldac_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SendSystemStartAck
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _keepAliveSignalLed
   _keepAliveSignalUart
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _readUartMessage
     _EUSART1_Read
     _GroupAdc *
       _SetAdcOperationMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetChannelMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetConversionResultFormat
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupControlMcu *
       _ResetCpld
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _ResetMcu
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _testLeds
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupDAC *
       _DacSetValue
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _SwSpi_Set_Clock
               _SwSpi_Clk_Pin
           _SwSpi_Set_Dac_Ldac_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupFlashMemory *
       _FlashEreaseMem
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _ZeroArray
           _memset
       _FlashReadCondition
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _FlashReadUart
         _FLASH_IsWriteDone
         _FLASH_ReadByte
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _abs
         _crc8
     _GroupStatusAndVersion *
       _GetCpldFwVersion
         _EepromRead
           _DATAEE_ReadByte
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _GetMcuFwVersion
         _EepromRead
           _DATAEE_ReadByte
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
       _GetMcuRunTime
         _WriteUartMessage
           _EUSART1_Write
         ___lldiv
         ___llmod
         _crc8
       _SetCpldFwVersion
         _EepromWrite
           _DATAEE_WriteByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _SetMcuFwVersion
         _EepromWrite
           _DATAEE_WriteByte
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupSynthesizers *
       _PLLUartInitialize
       _UpdateRxFreq
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _UpdateTxFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
             _SwSpi_Set_Clock
               _SwSpi_Clk_Pin
           _SwSpi_Set_Dac_Ldac_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _ZeroArray *
       _memset
     _crc8 *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      A      CC       6       79.7%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     60      A0       4      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B3       9        0.0%
DATA                 0      0     1B3      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Feb 28 11:15:24 2018

             __size_of_SendSystemStartAck 000C                         ??_GetMcuFwVersion 0024  
              __end_of_keepAliveSignalLed 3600                              ___altoft@exp 002F  
                _eusart1TxBufferRemaining 00FF                        readUartMessage@idx 01C9  
                         _GroupControlMcu 3072               __end_of_keepAliveSignalUart 3700  
                           ___altoft@sign 0030                __size_of_FLASH_IsWriteDone 000E  
                                      l48 27FC                           _SWSPI_send_bits 2AE6  
                     __end_of_BlinkOkLeds 2974                           _SWSPI_send_word 2272  
                     ___wmul@multiplicand 001A                           _timer0ReloadVal 0046  
                            __CFG_CP0$OFF 000000                              __CFG_CP1$OFF 000000  
                            __CFG_CP2$OFF 000000                              __CFG_CP3$OFF 000000  
                            ___ftadd@exp1 0083                              ___ftadd@exp2 0082  
                             __CFG_LVP$ON 000000                              ___ftadd@sign 0081  
                             ?_MEMORY_ISR 0001                                       l104 3336  
                                     l108 1310                                       l204 3294  
                                     l300 08F2                                       l109 1236  
                                     l205 327E                                       l301 0A16  
                                     l302 090E                                       l303 0926  
                                     l305 09A4                                       l307 09FA  
                                     l308 0A10                                       l172 0E1C  
                                     l181 0C9E                                       l173 0C5E  
                                     l191 0D5E                                       l183 0CB6  
                                     l192 0D1A                                       l176 0C6C  
                                     l185 0CCE                                       l177 0C98  
                                     l282 088E                                       l290 087C  
                                     l194 0D84                                       l275 19F8  
                                     l283 07F2                                       l187 0CEC  
                                     l276 1A16                                       l604 3060  
                                     l292 082C                                       l196 0DBC  
                                     l605 3038                                       l285 073E  
                                     l189 0CF2                                       l614 304C  
                                     l606 3042                                       l630 2BBA  
                                     l294 083E                                       l198 0DC2  
                                     l615 3056                                       l631 2BC4  
                                     l287 074E                                       l552 228E  
                                     l297 08E6                                       l289 07BA  
                                     l626 2BCE                                       l570 2B08  
                                     l627 2BA6                                       l563 2314  
                                     l635 3116                                       l483 0A52  
                                     l628 2BE4                                       l556 229C  
                                     l636 30EE                                       l629 2BB0  
                                     l645 3102                                       l637 30F8  
                                     l485 0B64                                       l646 310C  
                                     l814 2E76                                       l575 2C86  
                                     l567 2B24                                       l559 22FA  
                                     l576 2C4A                                       l568 2AEE  
                                     l656 3152                                       l816 2E9C  
                                     l593 2C72                                       l585 2C5E  
                                     l577 2C54                                       l569 2AFE  
                                     l657 312A                                       l594 2C7C  
                                     l586 2C68                                       l682 359E  
                                     l666 313E                                       l658 3134  
                                     l667 3148                                       l827 30C2  
                                     l924 2114                                       l828 30E6  
                                     l925 20CC                                       l693 35BA  
                                     l677 35A2                                       l829 30E4  
                                     l678 359A                                       l927 20EC  
                                     l935 322C                                       l928 20EE  
                                     l688 35BE                                       l689 35B6  
                            __CFG_CPB$OFF 000000                              __CFG_CPD$OFF 000000  
                    readUartMessage@chRec 01CB                          PLLInitialize@idx 002C  
                                     _abs 33F4                                       _cnt 00FD  
                                     _exp 0E52                                       _log 16FA  
                                     _pow 157E                                       prod 000FF3  
                                     tosl 000FFD                                       wreg 000FE8  
                   ??_SetAdcOperationMode 002E            ?_InitSystemApplicationManagers 0001  
              __end_of_FlashReadCondition 1928                              ___ftdiv@cntr 0063  
                            ___ftdiv@sign 0068                                      l2010 3650  
                                    l2002 113C                                      l2003 11A8  
                                    ?_abs 0018                                      l1037 335A  
                                    l2005 11CC                                      l2006 1208  
                                    l1150 3084                                      l2111 1736  
                                    l1312 31DE                                      l1160 2B4C  
                                    l1233 2D6E                                      l1161 2B5A  
                                    l2050 1036                                      l1234 2D52  
                                    l1322 2F44                                      l1146 308A  
                                    l1162 2B60                                      l2051 100C  
                                    l1147 3078                                      l1163 2B6E  
                                    l1171 2DA2                                      l2060 1EB0  
                                    l1260 2A3C                                      l1180 29E6  
                                    l1172 2DB0                                      l2117 1F7C  
                                    l2045 0E6C                                      l2109 1716  
                                    l1261 2A6A                                      l1317 26A6  
                                    l1181 29F4                                      l1149 307E  
                                    l1157 2B74                                      l2118 1EFE  
                                    l1182 2A02                                      l1158 2B46  
                                    l1190 2E2A                                      l2071 1FF4  
                                    l2047 0EA4                                      l1255 2A6E  
                                    l1415 2C00                                      l1327 2480  
                                    l1191 2E30                                      l2056 1E1A  
                                    l2048 0EDC                                      l1256 2A30  
                                    l1416 2C14                                      l1248 2346  
                                    l1168 2DBE                                      l2065 24FC  
                                    l2057 1E0C                                      l2073 2022  
                                    l2049 0F0C                                      l1177 2A10  
                                    l1169 2D94                                      l2074 2016  
                                    l1258 2A34                                      l2082 343C  
                                    l1338 1D32                                      l1178 29D8  
                                    l1603 3176                                      l2059 1E34  
                                    l1259 2A38                                      l1187 2E4A  
                                    l2092 3462                                      l1188 2E24  
                                    l1196 3512                                      l1701 1B44  
                                    l2069 1FAE                                      l1453 3412  
                                    l1197 3504                                      l1622 21EC  
                                    l1623 21E2                                      l1703 1B6C  
                                    l2087 3552                                      l1712 34CC  
                                    l1704 1B9E                                      l1625 2220  
                                    l1705 1BAE                                      l2097 3570  
                                    l1626 220A                                      l1730 1AEC  
                                    l1722 1A50                                      l1394 28C6  
                                    l1707 1BC6                                      l1731 1AE0  
                                    l1395 28DE                                      l1628 2248  
                                    l1708 1BD6                                      l1492 2728  
                                    l1724 1AC8                                      l1629 223E  
                                    l1653 1424                                      l1493 271C  
                                    l1733 1B08                                      l1725 1AB8  
                                    l1397 2904                                      l1662 14B4  
                                    l1718 2FC8                                      l1398 28F8  
                                    l1680 1528                                      l1681 1558  
                                    l1657 144E                                      l1690 1CC6  
                                    l1850 15E0                                      l1762 2656  
                                    l1667 14AA                                      l1851 1666  
                                    l1835 33BA                                      l1763 2664  
                                    l1780 2A90                                      l1676 14E8  
                                    l1668 14A0                                      l1852 1644  
                                    l1836 33AA                                      l1772 2894  
                                    l1677 14DE                                      l1853 16EC  
                                    l1773 28A2                                      l1686 1C3A  
                                    l4326 25F0                                      l1694 2594  
                                    l1758 2622                                      l1679 150C  
                                    l1695 25C4                                      l1847 15C8  
                                    l1759 2616                                      l1688 1C62  
                                    l1848 15B8                                      l1768 286C  
                                    l1689 1CA0                                      l1769 2860  
                                    l1779 2A9C                                      l1990 10F0  
                                    l7130 27EC                                      l1986 1084  
                                    l1996 1100                                      l1988 109C  
                                    l1997 1110                                      l1999 112A  
                                    l6432 33AA                                      l7144 2842  
                                    l7400 2F34                                      l7410 2F62  
                                    l6380 30B0                                      l7252 08F2  
                                    ?_exp 0097                                      ?_log 008E  
                                    l7504 100C                                      l7256 0916  
                                    l7344 269E                                      l7416 1D22  
                                    l7360 31D6                                      l7178 20C4  
                                    l5914 297E                                      l7266 0976  
                                    l7428 1DAE                                      l5926 2920  
         __size_of_SwSpi_Set_Dac_Ldac_Pin 001C                                      l6910 2336  
                                    l7624 0B54                                      l7608 0A42  
                                    l7384 2470                                      l7634 0BAC  
                                    l7618 0A9A                                      l7394 24A8  
                                    l7718 122E                                      l6950 22B6  
                                    l6928 2384                                      l6946 22A8  
                                    ?_pow 00A0                        EepromWrite@address 001C  
                                    _IOCB 000F62                                      _LATA 000F89  
                                    _LATB 000F8A                                      _LATC 000F8B  
                                    _LATD 000F8C                                      _LATE 000F8D  
                                    u4230 1FCE                                      u6020 2A62  
                                    u5108 35F4                                      u4238 1FD2  
                                    u3800 1A6E                                      u7000 06EC  
                                    u6025 2A58                                      u5090 35F2  
                                    u6130 108C                                      u7100 08D4  
                                    u3805 1A66                                      u6045 323A  
                                    u6046 323C                                      u6320 1416  
                                    u3840 1AF2                                      u6160 10C6  
                                    u7200 26CC                                      u7130 0976  
                                    u6420 14BC                                      u6180 10D6  
                                    u7140 0994                                      u7220 31FC  
                                    u3781 1A34                                      u7045 07C4  
                                    u6350 1440                                      u3870 2524  
                                    u6511 1B54                                      u8007 2960  
                                    u6600 2384                                      u7240 24A8  
                                    u6281 13E2                                      u8017 29A4  
                                    u7065 0850                                      u6450 14F0  
                                    u6291 13F6                                      u8027 29BE  
                                    u6380 147E                                      u6620 2282  
                                    u7260 2F62                                      u6701 1C22  
                                    u8037 12FC                                      u6550 36CC  
                                    u5830 21D4                                      u3878 2526  
                                    u7350 0EE6                                      u6551 36C8  
                                    u7360 0EE8                                      u7440 162E  
                                    u5920 345E                                      u7280 1DAE  
                                    u6721 1C4A                                      u6650 22E2  
                                    u6810 2870                                      u6491 1B2C  
                                    u5940 342E                                      u7470 1984  
                                    u5870 2252                                      u6670 22EE  
                                    u7550 0A9A                                      u7465 1932  
                                    u7490 19C8                                      u6850 1E26  
                                    u7570 0BAC                                      u6940 20F2  
                                    u7740 21C0                                      u6780 2626  
                                    u6695 330E                                      u6696 3310  
                                    u6890 2842                                      u7738 0DF4  
                                    u6955 2110                                      u7907 2814  
                                    u7739 0E14                                      u6956 2112  
                                    u7917 2824                                      u6990 06EA  
                                    u7927 2834                                      u7937 2B0A  
                                    u7947 2B18                                      u7957 2BA8  
                                    u7967 2BB2                                      u7977 2BBC  
                                    u7897 2804                                      u7987 2BC6  
                                    u7997 2946                  ??_SwSpi_Set_Synth_Le_Pin 0019  
                                    _WPUB 000F61                             _EUSART1_Write 30AE  
                                    abs@a 0018                                      _crc8 2D40  
                 ??_InitAdcApplicationMgr 0018                                      _data 00CD  
                                    _main 28B4                              ___ftpack@arg 0018  
                           ?_EUSART1_Read 0001                              ___ftpack@exp 001B  
                         _TMR0_StartTimer 3732                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      fsr2h 000FDA  
                                    fsr0l 000FE9                                      indf1 000FE7  
                                    indf2 000FDF                                      fsr1l 000FE1  
                                    fsr2l 000FD9                                      btemp 0048  
                           __CFG_BORV$190 000000                                      exp@x 0097  
                                    log@x 008E                         ?_FLASH_WriteBlock 001D  
                        ?_ClearMcuRunTime 0001                                      pow@x 00A0  
                                    pow@y 00A3                                      prodh 000FF4  
                                    prodl 000FF3                 GroupStatusAndVersion@data 01C2  
           __size_of_CheckFlashPrecentage 00AE                                      start 00DC  
                           __CFG_IESO$OFF 000000                       __end_of_EepromWrite 3698  
                      ??_FLASH_WriteBlock 0023                             _adcSampleMode 003C  
                            ___ftmul@cntr 0076                              ___param_bank 000000  
                            ___ftmul@sign 0077                            _BlinkErrorLeds 2974  
                            ___fttol@exp1 0086                                     ??_abs 001A  
               __size_of_DATAEE_WriteByte 0036                                     ??_exp 0031  
                                   ??_log 0031                              ___fttol@lval 0082  
                                   ??_pow 0031                   __end_of_TMR0_Initialize 32DE  
          __size_of_OSCILLATOR_Initialize 000E             __end_of_OSCILLATOR_Initialize 36B4  
                        ?_SwSpi_Set_Clock 0001                                     ?_crc8 0018  
                                   ?_main 0001                                     _EEADR 000FA9  
                         __end_of___ftadd 157E           __size_of_SwSpi_Set_Dac_Sync_Pin 001C  
                         __end_of___ftdiv 1CF8                           __end_of___ftneg 34DA  
                         __end_of___lldiv 2676                                _EepromRead 370C  
                         __end_of___ftmul 1C10                                     _T0CON 000FD5  
                         __end_of___llmod 28B4                           __end_of___ftsub 2FF2  
                         __end_of___fttol 1B1A                            __CFG_DEBUG$OFF 000000  
                         __end_of___lwmod 3034                                     i2l840 339A  
                                   i2l833 31C6                                     i2l834 31C2  
                                   i2l762 005E                                     i2l771 0090  
                                   i2l764 006A                                     i2l839 337A  
                                   i2l767 007A                                     i2l769 0086  
                                   i2l993 23E2                                     i2l994 2404  
                                   i2l995 2426                                     _TMR0H 000FD7  
                                   _TMR0L 000FD6                                     _PORTD 000F83  
                                   _TRISA 000F92                                     _TRISB 000F93  
                                   _TRISC 000F94                                     _TRISD 000F95  
                                   _TRISE 000F96         __size_of_TMR0_SetInterruptHandler 000A  
                           __CFG_WRT0$OFF 000000                             __CFG_WRT1$OFF 000000  
              __end_of_GetIntFromUartData 23B2                             __CFG_WRT2$OFF 000000  
                     ___lmul@multiplicand 001C                 ?_TMR0_SetInterruptHandler 0018  
                           __CFG_WRT3$OFF 000000                              ___lltoft@exp 0028  
                    _EUSART1_Transmit_ISR 319A                            __CFG_EBTR0$OFF 000000  
                          __CFG_FCMEN$OFF 000000                            __CFG_EBTR1$OFF 000000  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                       ?_WriteUartMessage 0019                          __end_of_TMR0_ISR 2444  
                           __CFG_WRTB$OFF 000000                  __size_of_SetMcuFwVersion 0036  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                         DacSetValue@data 002E                           _DATAEE_ReadByte 362C  
                          __CFG_EBTRB$OFF 000000                             ___awtoft@sign 0023  
                 __end_of_PIN_MANAGER_IOC 373A                                     crc8@i 001F  
                                   _make8 2A2E                     __end_of_GetMcuRunTime 1DDC  
                                   _count 00C8                                     _floor 1DDC  
                                   _ldexp 1F94                                     _frexp 24D4  
                                   _errno 00C4                           __end_of_isalpha 3444  
                         __end_of_isdigit 355A                                     _group 00D0  
                      ??_WriteUartMessage 001D                        __CFG_MCLRE$EXTMCLR 000000  
                           ___ftpack@sign 001C                   ??_GroupStatusAndVersion 0031  
                         __end_of_isspace 346A                            ?_EUSART1_Write 0001  
                             ?_AdcConvert 0001                           __end_of_isupper 3578  
                                   pclath 000FFA                                     tablat 000FF5  
                                   pow@yi 00AD                            ??_EUSART1_Read 0018  
                                   status 000FD8                                     wtemp6 0049  
                          __CFG_HFOFST$ON 000000                           __end_of_toupper 3654  
          SwSpi_Set_Synth_Le_Pin@cPinMode 0018                   __end_of_GroupControlMcu 30AE  
                     __size_of_MEMORY_ISR 0004                            __CFG_PBADEN$ON 000000  
      __size_of_SetConversionResultFormat 000C                               exp@exponent 009D  
          CheckFlashPrecentage@precentage 007C                    __end_of_BlinkErrorLeds 29D2  
                 __end_of_SWSPI_send_bits 2B40                               ldexp@newexp 0091  
                 __end_of_SWSPI_send_word 2318                               _BlinkOkLeds 2916  
                 WriteUartMessage@dataBuf 0019                           __initialization 2772  
                             log@exponent 0091                              __end_of_crc8 2D8E  
              __end_of_EUSART1_Initialize 3274                              __end_of_main 2916  
                  _SwSpi_Set_Dac_Ldac_Pin 35B2                   FLASH_ReadByte@flashAddr 0018  
             ?_INTERRUPT_InterruptManager 0001                          __end_of_GroupDAC 351E  
                         _readUartMessage 0C56                          __end_of_GroupAdc 2DD6  
                                  ??_crc8 001C                                    ??_main 0031  
                           ___fttol@sign1 0081                         ?_SwSpi_Set_CE_Pin 0018  
                      _TimerKeepAliveFlag 00D4                             __activetblptr 000002  
                 __size_of_FLASH_ReadByte 0012                          __end_of_ResetMcu 36A6  
                     SetMcuFwVersion@data 002C                    SWSPI_send_bits@phrType 001D  
                            _writeAddress 0042                        ??_SwSpi_Set_CE_Pin 0019  
                   ?_EUSART1_Transmit_ISR 0001                   __end_of_TMR0_StartTimer 3736  
                                  ?_make8 0018                                    _ADCON0 000FC2  
                                  _ADCON1 000FC1                                    _ADCON2 000FC0  
                                  ?_floor 008F                 FLASH_WriteBlock@writeAddr 001D  
                                  ?_ldexp 008E                                    ?_frexp 0018  
                        __end_of___altoft 2772                          ___llmod@dividend 0018  
                                  _ADRESH 000FC4                                    _ADRESL 000FC3  
                                  _EEDATA 000FA8                                    _EECON2 000FA7  
                        __end_of___awtoft 319A                                    _ANSELA 000F38  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                                  _ANSELD 000F3B                                    _ANSELE 000F3C  
                        __end_of___ftpack 2272                          __end_of___lltoft 2AE6  
                       _FlashReadUart$557 00B1                         _FlashReadUart$558 00B5  
                       ?_FlashSampleWrite 002D                                    i2l1821 3008  
                                  i2l1822 3000                            __CFG_WDTEN$OFF 000000  
                                  i2l1825 3020                                    i2l1826 302A  
                                  _TABLAT 000FF5                               _EepromWrite 368A  
                                  _RCREG1 000FAE                          __end_of___lwtoft 34FE  
                 __size_of_FlashEreaseMem 0052                 __size_of_FLASH_EraseBlock 0034  
                                  _RCSTA1 000FAB           __size_of_SwSpi_Set_Synth_Le_Pin 003C  
                                  _OSCCON 000FD3                                    _SPBRG1 000FAF  
                  _SwSpi_Set_Dac_Sync_Pin 3596                   __size_of_SwSpi_Data_Pin 0056  
                  SwSpi_Set_Clock@phrType 001A                  GroupSynthesizers@request 00BF  
                      ??_FlashSampleWrite 0060                                    _TXREG1 000FAD  
                                  _TXSTA1 000FAC                  __end_of_GroupFlashMemory 2E62  
                         ?_BlinkErrorLeds 0001                          _GetCpldFwVersion 2444  
                          __CFG_XINST$OFF 000000                         ?_SetCpldFwVersion 002C  
                                  _cState 00D1                                    ___ftge 2564  
                                  ___lmul 2BF0                                    ___wmul 3490  
                               ??___ftadd 007E                            __CFG_STVREN$ON 000000  
                               ??___ftdiv 0060                                 ??___ftneg 001B  
                       ?_InitSevenSegment 0001                                 ??___lldiv 0020  
                               ??___ftmul 006F                     __end_of_PLLInitialize 0C56  
                               ??___llmod 0020                                 ??___ftsub 002F  
                               ??___fttol 007C                        ??_SetCpldFwVersion 002E  
                               ??___lwmod 0005            SwSpi_Set_Dac_Sync_Pin@cPinMode 0018  
                      __size_of_ResetCpld 000C                          ?_TMR0_Initialize 0001  
                                  _memset 33A0                                    clear_0 27B8  
                                  clear_1 27C4                                    clear_2 27D0  
                      ??_InitSevenSegment 0018                       __size_of_AdcConvert 01B6  
                 __end_of_DATAEE_ReadByte 3640                               ?_EepromRead 0001  
                                  _strtol 1044                                    floor@i 0092  
                   __end_of_SwSpi_Clk_Pin 3072                                    floor@x 008F  
                   ___ftmul@f3_as_product 0073                FlashSampleWrite@channelNum 002F  
                            __pdataCOMRAM 0042                                 ??_isalpha 001B  
                               ??_isdigit 0018                     __end_of_FlashReadUart 0A2C  
                        __end_of_testLeds 284E                             ?_SetMcuSystem 0001  
                            __mediumconst 0000                                 ??_isspace 0018  
                                  tblptrh 000FF7                                 ??_isupper 0018  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                ADC_GetConversion@channel 001C                           ??_EUSART1_Write 0018  
TMR0_SetInterruptHandler@InterruptHandler 0018              __size_of_InitRxMessageParams 0028  
                        ?_PIN_MANAGER_IOC 0001                           _eusart1RxBuffer 0146  
                               ??_toupper 0018                        __size_of_ZeroArray 001E  
           __size_of_INTERRUPT_Initialize 0004                           _eusart1TxBuffer 0100  
                         _GetMcuFwVersion 2676                          __end_ofexp@coeff 065A  
                       _SYSTEM_Initialize 35CE                          __end_oflog@coeff 0675  
                              __accesstop 0060                   __end_of__initialization 27D6  
                              ___altoft@c 0087                             ZeroArray@size 0022  
                       ??_SetMcuFwVersion 002E                                ___ftadd@f1 0078  
                              ___ftadd@f2 007B                                ___ftge@ff1 0018  
                              ___ftge@ff2 001B                        ?_SYSTEM_Initialize 0001  
                            eval_poly@res 008B                             ___rparam_used 000001  
                              ___ftdiv@f1 0029                                ___ftdiv@f2 002C  
                              ___ftdiv@f3 0064                          ?_GroupControlMcu 01C2  
            GroupStatusAndVersion@request 00BF                                ___ftneg@f1 0018  
                              ___awtoft@c 0020                          ?_SWSPI_send_bits 001B  
                 __end_of_readUartMessage 0E52                  WriteUartMessage@dataSize 001B  
                              ___ftmul@f1 0069                                ___ftmul@f2 006C  
                        ?_SWSPI_send_word 0021                              ?_DacSetValue 002E  
                              ___ftsub@f1 0084                                ___ftsub@f2 0087  
                              ___fttol@f1 0078                            __pcstackCOMRAM 0001  
                            __pidataBANK0 367A                       ??_SYSTEM_Initialize 001C  
                               ?_TMR0_ISR 0001                                ___lltoft@c 0020  
                           __end_of_make8 2A8A                          _DATAEE_WriteByte 3208  
                           __end_of_floor 1EBE                             __end_of_ldexp 205A  
                           __end_of_frexp 2564                    _SwSpi_Set_Synth_Le_Pin 3126  
                    GroupFlashMemory@data 01C2                                ___lwtoft@c 0020  
                    __end_of_EUSART1_Read 2EA6                              ??_MEMORY_ISR 0001  
                    SWSPI_send_bits@count 001C                    __size_of_SetMcuRunTime 0044  
                  ??_EUSART1_Transmit_ISR 0001                            ??_SetMcuSystem 001C  
                   TMR0_ISR@CountCallBack 0035             SwSpi_Set_Synth_Le_Pin@phrType 0019  
                 GroupFlashMemory@request 01C4                        _keepAliveSignalLed 35E8  
                       make8@dataLocation 001C               __end_of_EUSART1_Receive_ISR 33A0  
             FLASH_WriteBlock@GIEBitValue 002B                              GroupDAC@data 01C2  
                                 ??_make8 001D                                   ??_floor 0031  
                        ?_TMR0_StartTimer 0001                                   ??_ldexp 0093  
                                 ??_frexp 001D                           _AdcConvert$3245 00B7  
               __end_of_SYSTEM_Initialize 35E8                             _eusart1RxHead 0038  
                    GetMcuFwVersion@TxMsg 0026                             _eusart1TxHead 003A  
                           _eusart1RxTail 0037                                __pbssBANK0 00C0  
                              __pbssBANK1 0100                             _eusart1TxTail 0039  
                     ?_keepAliveSignalLed 0001                        __size_of_eval_poly 00D6  
                       __end_of_ResetCpld 36DC                           __CFG_PLLCFG$OFF 000000  
                              _channelArr 0635                                 ?_GroupDAC 01C2  
                              __pnvCOMRAM 0046                                 ?_GroupAdc 01C2  
          __size_of_InitAdcApplicationMgr 000E                __end_of_SendSystemStartAck 370C  
           __end_of_InitAdcApplicationMgr 36C2                       __size_of_EepromRead 000A  
                      __end_of_MEMORY_ISR 373E                                 ?_ResetMcu 0001  
                      _FlashReadCondition 181C           ??_InitSystemApplicationManagers 0030  
                      __CFG_CCP2MX$PORTC1 000000                                   ?___ftge 0018  
                          FlashReadUart@j 00B9          __end_of_TMR0_SetInterruptHandler 372A  
                                 ?___lmul 0018                                   ?___wmul 0018  
                              ??_TMR0_ISR 0006                        __CFG_CCP3MX$PORTB5 000000  
                      SetChannelMode@data 002C                      ??_keepAliveSignalLed 0018  
                       __end_of_ZeroArray 3596                                 ?___altoft 0087  
                                 ?_memset 0018                            ___lmul@product 0020  
                     ?_FlashReadCondition 0001                                 ?___awtoft 0020  
                               ?___ftpack 0018                              GroupAdc@data 01C2  
                        FlashReadUart@idx 00BB                                 ?___lltoft 0020  
               __size_of_FLASH_WriteBlock 00BC                   __size_of_ADC_Initialize 0016  
             __end_of_SetAdcOperationMode 36F4                FlashSampleWrite@sampleData 002D  
                          _FLASH_ReadByte 3668                                 ?___lwtoft 0020  
            __end_of_CheckFlashPrecentage 21C4                                   ?_strtol 0024  
                        ?_DATAEE_ReadByte 0001              __size_of_keepAliveSignalUart 000C  
                 __end_of_GetMcuFwVersion 26F8                                   _OSCCON2 000FD2  
                                 _TBLPTRH 000FF7                                   _TBLPTRL 000FF6  
                                 _TBLPTRU 000FF8                                   _OSCTUNE 000F9B  
                                 _SPBRGH1 000FB0                     GetIntFromUartData@idx 0073  
                        GetMcuRunTime@idx 006D                              ??_AdcConvert 00B1  
                    ??_FlashReadCondition 0024                            _FlashEreaseMem 2C9C  
                        _FLASH_EraseBlock 32DE            __size_of_GroupStatusAndVersion 0058  
                          _SwSpi_Data_Pin 2C46                      DATAEE_WriteByte@bAdd 0019  
           __end_of_GroupStatusAndVersion 2B98                                ??_GroupDAC 0031  
                              ??_GroupAdc 0031                             _SetMcuRunTime 2EA6  
                      _GetIntFromUartData 2318                           __CFG_PWRTEN$OFF 000000  
                      FlashReadUart@TxMsg 006C                     GroupSynthesizers@data 01C2  
                                 __Hparam 0000                   ?_SwSpi_Set_Dac_Ldac_Pin 0001  
                              ??_ResetMcu 002C                 __size_of_WriteUartMessage 0036  
                            ?_BlinkOkLeds 0001                                   __Lparam 0000  
                        UpdateRxFreq@data 002C                     SendAckMessage@inGroup 0025  
                        ?_readUartMessage 0001                          UpdateRxFreq@send 0060  
                  GroupControlMcu@request 00BF                                 ?_testLeds 0001  
                    PLLInitialize@idx_797 002E                       ?_GetIntFromUartData 0066  
                         __size_of___ftge 0090                           __size_of___lmul 0056  
                                 ___ftadd 13D0                                   ___ftdiv 1C10  
                                 ___ftneg 34B6                                   ___lldiv 25F4  
                         __size_of___wmul 0026                                   ___ftmul 1B1A  
                                 ___llmod 284E                                   ___ftsub 2FB0  
                                 ___fttol 1A22                FlashSampleWrite@rotateLeft 0062  
                            crc8@dataSize 001A                  __size_of_ClearMcuRunTime 0014  
                                 ___lwmod 2FF2                      AdcConvert@_adcResult 00B3  
                            __psmallconst 0600                                ??___altoft 008B  
                  __end_of_FLASH_ReadByte 367A                     _mcuRunTimeIn5SecTicks 00C0  
                                 _crcCalc 00CC                                   _channel 00D3  
                                 __pcinit 2772                                ??___awtoft 0023  
                              ??___ftpack 001D                         __end_of_eval_poly 1F94  
                         __size_of_memset 002C                                   __ramtop 0600  
                 __size_of_SendAckMessage 0052                                ??___lltoft 0024  
                 __size_of_SetChannelMode 0030                                   __ptext0 28B4  
                                 __ptext1 0C56                                   __ptext2 33CC  
                                 __ptext3 34FE                                   __ptext4 2E1E  
                                 __ptext5 2D8E                                   __ptext6 2B40  
                                 __ptext7 3072                                   __ptext8 29D2  
                                 __ptext9 2EEA                                   crc8@crc 001D  
                      __end_of_AdcConvert 13D0                                ??___lwtoft 0023  
                               _T0CONbits 000FD5                         BlinkErrorLeds@idx 001C  
                         __size_of_strtol 01D6                     _OSCILLATOR_Initialize 36A6  
                            __size_of_abs 0028                                   _isalpha 341C  
                            __size_of_exp 01F2                              __size_of_log 0122  
                                 _isdigit 353C                              __size_of_pow 017C  
                      _EUSART1_Initialize 323E                  ??_PIN_MANAGER_Initialize 0018  
                                 _isspace 3444                  __end_of_GetCpldFwVersion 24D4  
                                 _isupper 355A                          UpdateTxFreq@data 002E  
                                 _request 00CF                           GroupDAC@request 00BF  
                __size_of_SwSpi_Set_Clock 0058                      ??_GetIntFromUartData 002E  
                  __end_of_FlashEreaseMem 2CEE                __size_of_SYSTEM_Initialize 001A  
                 ?_SwSpi_Set_Dac_Sync_Pin 0001                    __end_of_SwSpi_Data_Pin 2C9C  
                                 _toupper 3640                      end_of_initialization 27D6  
                     GetCpldFwVersion@idx 002F                             ?_UpdateRxFreq 002C  
                                 exp@sign 009F                             ?_UpdateTxFreq 002E  
                     ?_EUSART1_Initialize 0001                          ??_BlinkErrorLeds 0018  
                            ?_EepromWrite 001B                       SetCpldFwVersion@idx 002E  
               __size_of_SwSpi_Set_CE_Pin 003C                            ?_SetMcuRunTime 0001  
                                 memset@c 001A                                   memset@n 001C  
                                 memset@p 001E                             __Lmediumconst 0000  
          __end_of_SwSpi_Set_Dac_Ldac_Pin 35CE                           ___lldiv@divisor 001C  
                    __end_of_SetMcuSystem 3720                                   pow@sign 00AC  
                         ___lldiv@counter 0024                         ?_GroupFlashMemory 01C2  
                        AdcConvert@adcRes 00BA                                ??_testLeds 002C  
                    SWSPI_send_word@datac 0026                                _rxMsgQueue 00D7  
                                 postdec1 000FE5                                   postdec2 000FDD  
                      ??_GroupFlashMemory 00BF                __end_of_PLL_INIT_REGISTERS 0635  
                                 postinc0 000FEE                                   postinc2 000FDE  
                   __size_of_EUSART1_Read 0044                       _InitRxMessageParams 33CC  
                             testLeds@idx 002D                      __size_of_DacSetValue 0042  
               __size_of_FlashSampleWrite 00FA                    __size_of_GetMcuRunTime 00E4  
                     UpdateTxFreq@regData 0075                      ??_EUSART1_Initialize 0018  
   __end_of_InitSystemApplicationManagers 362C    __size_of_InitSystemApplicationManagers 0016  
           _InitSystemApplicationManagers 3616                           ?_FLASH_ReadByte 0018  
                                 strtol@a 0061                                   strtol@c 0065  
                                 strtol@s 0024                  _TMR0_SetInterruptHandler 3720  
                            ??_EepromRead 0019                           _SetMcuFwVersion 31D2  
                        ?_GetMcuFwVersion 0001                 __size_of_SetCpldFwVersion 0042  
                          ZeroArray@array 0020            __end_of_SwSpi_Set_Dac_Sync_Pin 35B2  
                            strtol@endptr 0026             FLASH_WriteBlock@flashWrBufPtr 0021  
               __size_of_InitSevenSegment 0026                        GetMcuRunTime@TxMsg 0060  
                    ?_InitRxMessageParams 0001                           ?_FlashEreaseMem 0001  
                     EUSART1_Write@txData 0018                           ?_SwSpi_Data_Pin 0018  
                          ??_UpdateRxFreq 002E                            ??_UpdateTxFreq 0030  
                __end_of_DATAEE_WriteByte 323E                  FLASH_EraseBlock@baseAddr 0018  
                             ___ftdiv@exp 0067                              _EUSART1_Read 2E62  
                    _CheckFlashPrecentage 2116                         FLASH_WriteBlock@i 002C  
                      __end_of_EepromRead 3716                               ___ftmul@exp 0072  
                 ?_SwSpi_Set_Synth_Le_Pin 0018                     PLLUartInitialize@data 0018  
              ?_SetConversionResultFormat 002C              __end_of_INTERRUPT_Initialize 3732  
                          __end_of___ftge 25F4              InitAdcApplicationMgr@channel 0018  
                          __end_of___lmul 2C46                            __end_of___wmul 34B6  
                     GroupControlMcu@data 01C2                             __pidataCOMRAM 372A  
                       __size_of_TMR0_ISR 0092                            _ADC_Initialize 3600  
                        _FLASH_WriteBlock 205A                    ?_OSCILLATOR_Initialize 0001  
                          __end_of_memset 33CC                                floor@expon 0095  
                       ??_ClearMcuRunTime 0018                            __end_of_strtol 121A  
                     start_initialization 2772                                eval_poly@d 0087  
                              eval_poly@n 0089                                eval_poly@x 0084  
                        BlinkOkLeds@state 001B                  __size_of_TMR0_Initialize 0034  
                              ldexp@value 008E           __size_of_PIN_MANAGER_Initialize 0048  
                             __end_of_abs 341C                     ??_InitRxMessageParams 0024  
                             __end_of_exp 1044                               __end_of_log 181C  
                             __end_of_pow 16FA                  AdcConvert@_adcResult_328 00B5  
                           _GetMcuRunTime 1CF8                           ??_SetMcuRunTime 0021  
                   __end_of_EUSART1_Write 30EA                        GetMcuFwVersion@idx 002F  
                      SetMcuFwVersion@idx 002E                    __size_of_PLLInitialize 022A  
                              frexp@value 0018                         ??_SwSpi_Set_Clock 001A  
                         ___llmod@divisor 001C                     ?_CheckFlashPrecentage 0001  
                         ___llmod@counter 0020                       DATAEE_ReadByte@bAdd 0018  
                __size_of_PIN_MANAGER_IOC 0004                                 _ResetCpld 36D0  
                  __size_of_SwSpi_Clk_Pin 003E                       SendAckMessage@TxMsg 0026  
          __end_of_SwSpi_Set_Synth_Le_Pin 3162                       _keepAliveSignalUart 36F4  
                       __size_of_GroupDAC 0020                          _WriteUartMessage 3274  
                       __size_of_GroupAdc 0048                    __size_of_FlashReadUart 03B6  
                                ??___ftge 001E                                  ??___lmul 0020  
                 SendAckMessage@inRequest 0024                                  ??___wmul 001C  
                       __size_of_ResetMcu 000E                      __size_of_BlinkOkLeds 005E  
                 SetAdcOperationMode@data 002C                    __end_of_ADC_Initialize 3616  
       __end_of_SetConversionResultFormat 36E8                               __pdataBANK0 00EB  
                 __end_of_SetMcuFwVersion 3208                                  ??_memset 001E  
                __size_of_GroupControlMcu 003C               FLASH_EraseBlock@GIEBitValue 001C  
                          _SendAckMessage 2CEE                            _SetChannelMode 3312  
                __end_of_FLASH_EraseBlock 3312                  __size_of_SWSPI_send_bits 005A  
                      _SendSystemStartAck 3700                  __size_of_SWSPI_send_word 00A6  
                                ??_strtol 002A                            _eusart1RxCount 00D2  
                       __size_of___altoft 007A                                 _ZeroArray 3578  
                       __size_of___awtoft 0038                         __size_of___ftpack 00AE  
                    ?_keepAliveSignalUart 0001                         __size_of___lltoft 005C  
                             __pbssCOMRAM 0031                         __size_of___lwtoft 0024  
           __size_of_EUSART1_Transmit_ISR 0038                             __pcstackBANK0 0060  
                           __pcstackBANK1 01C2                       ?_SendSystemStartAck 0001  
                            _isalpha$2957 001C                              _isdigit$2960 0019  
                          ?_GetMcuRunTime 0001                            BlinkOkLeds@idx 001C  
                     SWSPI_send_bits@data 001B                     __size_of_SetMcuSystem 000A  
                        _SwSpi_Set_CE_Pin 30EA              __size_of_EUSART1_Receive_ISR 002E  
                    __size_of_EepromWrite 000E                     _TMR0_InterruptHandler 00FB  
                               __pnvBANK0 00FB                  __size_of_TMR0_StartTimer 0004  
                              ?_ResetCpld 0001                    _PIN_MANAGER_Initialize 2DD6  
                    ??_SendSystemStartAck 002C                     _InitAdcApplicationMgr 36B4  
                               __pintcode 0008                    __end_of_SendAckMessage 2D40  
                               __ptext100 2A8A                                 __ptext101 34DA  
                               __ptext110 2FF2                                 __ptext102 21C4  
                               __ptext111 3736                                 __ptext103 1928  
                               __ptext112 373A                                 __ptext104 205A  
                               __ptext113 319A                                 __ptext105 32DE  
                               __ptext114 3372                                 __ptext106 36C2  
                               __ptext115 0000                                 __ptext107 3342  
                               __ptext109 23B2                                  ?___ftadd 0078  
                                ?___ftdiv 0029                    __end_of_SetChannelMode 3342  
                                ?___ftneg 0018                                  ?___lldiv 0018  
                                ?___ftmul 0069                                  ?___llmod 0018  
                                ?___ftsub 0084                                  ?___fttol 0078  
                        _FlashSampleWrite 1928                                  ?___lwmod 0001  
                         ?_ADC_Initialize 0001                      __end_of_UpdateRxFreq 353C  
                       __size_of_testLeds 006A                             _PLLInitialize 0A2C  
           SetConversionResultFormat@data 002C                      __end_of_UpdateTxFreq 2F2C  
             __size_of_keepAliveSignalLed 0018              ??_INTERRUPT_InterruptManager 0006  
                        __CFG_PRICLKEN$ON 000000                                ?_ZeroArray 0020  
                             __smallconst 0600                     ??_keepAliveSignalUart 002C  
                                _BAUDCON1 000FB8                             _SwSpi_Clk_Pin 3034  
                                ?_isalpha 0001                                  ?_isdigit 0001  
                               _eval_poly 1EBE                       BlinkErrorLeds@state 001B  
                         _TimerOneSecFlag 00D6                                  ?_isspace 0001  
                        _SetCpldFwVersion 2F2C                              _SetMcuSystem 3716  
                                ?_isupper 0001                             _FlashReadUart 0676  
                       _PLLUartInitialize 373E                         ?_GetCpldFwVersion 0001  
                        _InitSevenSegment 346A              __size_of_SetAdcOperationMode 000C  
                          __size_of_make8 005C                            __size_of_floor 00E2  
                          __size_of_ldexp 00C6                            __size_of_frexp 0090  
                      ?_PLLUartInitialize 0018                  __size_of_DATAEE_ReadByte 0014  
                                ?_toupper 0001                          _conversionFormat 003D  
                      ??_GetCpldFwVersion 0024                      _INTERRUPT_Initialize 372E  
          FLASH_WriteBlock@blockStartAddr 0027               __size_of_FlashReadCondition 010C  
                       ??_TMR0_Initialize 001A                    ??_CheckFlashPrecentage 0078  
                          ___wmul@product 001C                                  _LATAbits 000F89  
                                _LATBbits 000F8A                                  _LATCbits 000F8B  
                                _LATDbits 000F8C                       ??_PLLUartInitialize 001A  
          FlashReadUart@numOfSampleToRead 0024                                  _PIE1bits 000F9D  
                                _PIE2bits 000FA0                     _GroupStatusAndVersion 2B40  
                       _GroupSynthesizers 29D2       __size_of_INTERRUPT_InterruptManager 00D4  
          SwSpi_Set_Dac_Ldac_Pin@cPinMode 0018                ??_TMR0_SetInterruptHandler 001A  
                                i2u503_40 300C                                  _PIR1bits 000F9E  
                        ??_FLASH_ReadByte 001C                                  _PIR2bits 000FA1  
                               _rxMsgData 01AE                       SWSPI_send_word@data 0021  
                      ?_GroupSynthesizers 01C2                                  _RCONbits 000FD0  
                        __CFG_WDTPS$32768 000000                                 make8@data 0018  
                                _TMR0_ISR 23B2                           ?_SendAckMessage 0024  
                         ?_SetChannelMode 002C                            ?_PLLInitialize 0001  
                       ??_PIN_MANAGER_IOC 0001                          ?_SetMcuFwVersion 002C  
                     ??_GroupSynthesizers 0031                    GetIntFromUartData@data 0066  
                 SWSPI_send_word@dataSize 0025                                _ADCON0bits 000FC2  
                __size_of_readUartMessage 01FC                         ___wmul@multiplier 0018  
                          ?_SwSpi_Clk_Pin 0018                          ??_FlashEreaseMem 002C  
               __end_of_PLLUartInitialize 3740                        __end_of_channelArr 063C  
                        ??_SwSpi_Data_Pin 0019                 __size_of_GroupFlashMemory 0044  
                              ?_eval_poly 0084                            ?_FlashReadUart 0024  
                       ??_GroupControlMcu 0031                        _PLL_INIT_REGISTERS 0601  
                         ??_GetMcuRunTime 0025                     DATAEE_WriteByte@bData 0018  
                       ??_SWSPI_send_bits 001C                              _isspace$2963 0019  
                       ??_SWSPI_send_word 0026                     GetCpldFwVersion@TxMsg 0026  
             __size_of_GetIntFromUartData 009A                         ___lmul@multiplier 0018  
                 FlashReadCondition@TxMsg 0028                               _INTCON2bits 000FF1  
                               copy_data0 2786                                 copy_data1 27A6  
                   ?_INTERRUPT_Initialize 0001                         ?_DATAEE_WriteByte 0018  
               __end_of_GroupSynthesizers 2A2E                     EUSART1_Read@readValue 0019  
                __end_of_FLASH_WriteBlock 2116                                  _GroupDAC 34FE  
                      ??_DATAEE_WriteByte 0019                                  _GroupAdc 2D8E  
                               frexp@eptr 001B                                _EECON1bits 000FA6  
                             ??_ResetCpld 002C                                  __Hrparam 0000  
                  ?_InitAdcApplicationMgr 0001                                  _ResetMcu 3698  
                           ??_DacSetValue 0030                               _readAddress 00F7  
                                __Lrparam 0000                         _ADC_GetConversion 3342  
                     FlashReadUart@offset 00BD                        __CFG_BOREN$SBORDIS 000000  
                         _ClearMcuRunTime 3654                         __CFG_P2BMX$PORTD2 000000  
             ??_SetConversionResultFormat 002E                   ??_OSCILLATOR_Initialize 0018  
                      ?_ADC_GetConversion 0018                         ??_TMR0_StartTimer 0018  
                        __size_of___ftadd 01AE                          __size_of___ftdiv 00E8  
                    _numOfValidateSamples 0031                          __size_of___ftneg 0024  
                        __size_of___lldiv 0082                                  ___altoft 26F8  
                        __size_of___ftmul 00F6                          __size_of___llmod 0066  
                        __size_of___ftsub 0042                          __size_of___fttol 00F8  
             __size_of_EUSART1_Initialize 0036                          __size_of___lwmod 0042  
                         GroupAdc@request 00BF                                  ___awtoft 3162  
                           crc8@dataArray 0018                                  ___ftpack 21C4  
                        _numOfReadSamples 003E                                  ___lltoft 2A8A  
                       _FLASH_IsWriteDone 36C2                       WriteUartMessage@idx 001E  
                                ___lwtoft 34DA                               ??_ZeroArray 0024  
                GetMcuRunTime@tempRunTime 0069                       ??_ADC_GetConversion 001A  
                                _exp$3248 009A                              _isupper$2966 0019  
                      ?_FLASH_IsWriteDone 0001                                  _dataSize 00CE  
                   SwSpi_Clk_Pin@cPinMode 0018                  __end_of_WriteUartMessage 32AA  
                        __size_of_isalpha 0028                                  _crcGiven 00CB  
                        __size_of_isdigit 001E                           _SwSpi_Set_Clock 2B98  
                  SwSpi_Data_Pin@cPinMode 0018                          __size_of_isspace 0026  
                      DacSetValue@regData 0075                                  __ptext10 351E  
                                __ptext11 373E                                  __ptext20 370C  
                                __ptext12 31D2                                  __ptext21 362C  
                                __ptext13 2F2C                                  __ptext30 3640  
                                __ptext22 0676                                  __ptext14 368A  
                                __ptext31 3444                                  __ptext23 33F4  
                                __ptext15 3208                                  __ptext40 3312  
                                __ptext32 353C                                  __ptext24 3668  
                                __ptext16 1CF8                                  __ptext41 36E8  
                                __ptext33 341C                                  __ptext25 181C  
                                __ptext17 25F4                                  __ptext50 36A6  
                                __ptext42 2E62                                  __ptext34 355A  
                                __ptext26 2C9C                                  __ptext18 2676  
                                __ptext51 372E                                  __ptext43 36F4  
                                __ptext35 2BF0                                  __ptext27 2F6E  
                                __ptext19 2444                                  __ptext60 33A0  
                                __ptext52 323E                                  __ptext44 35E8  
                                __ptext36 27E4                                  __ptext28 2318  
                                __ptext61 3274                                  __ptext53 3600  
                                __ptext45 3716                                  __ptext37 3698  
                                __ptext29 1044                                  __ptext70 3596  
                                __ptext62 30AE                                  __ptext54 2EA6  
                                __ptext46 35CE                                  __ptext38 36D0  
                                __ptext71 35B2                                  __ptext63 3616  
                                __ptext55 284E                                  __ptext47 32AA  
                                __ptext39 36DC                                  __ptext80 2916  
                                __ptext72 2AE6                                  __ptext64 3732  
                                __ptext56 3700                                  __ptext48 3720  
                                __ptext81 2974                                  __ptext73 2B98  
                                __ptext65 0A2C                                  __ptext57 2CEE  
                                __ptext49 2DD6                                  __ptext90 2564  
                                __ptext82 121A                                  __ptext74 3034  
                                __ptext66 30EA                                  __ptext58 2D40  
                                __ptext91 26F8                                  __ptext83 157E  
                                __ptext75 2C46                                  __ptext67 2272  
                                __ptext59 3578                                  __ptext92 1EBE  
                                __ptext84 16FA                                  __ptext76 346A  
                                __ptext68 2A2E                                  __ptext93 3490  
                                __ptext85 0E52                                  __ptext77 36B4  
                                __ptext69 3126                                  __ptext94 1B1A  
                                __ptext86 1F94                                  __ptext78 3654  
                                __ptext95 2FB0                                  __ptext87 1DDC  
                                __ptext79 2116                                  __ptext96 13D0  
                                __ptext88 24D4                                  __ptext97 34B6  
                                __ptext89 1A22                                  __ptext98 1C10  
                                __ptext99 3162                          __size_of_isupper 001E  
                SwSpi_Set_CE_Pin@cPinMode 0018                                  _pow$3246 00A6  
                                _pow$3247 00A9                       ??_FLASH_IsWriteDone 0018  
                     GetIntFromUartData@c 0072               DATAEE_WriteByte@GIEBitValue 001A  
                        __size_of_toupper 0014                  __size_of_GetMcuFwVersion 0082  
                           __size_of_crc8 004E                             __size_of_main 0062  
                  ?_GroupStatusAndVersion 01C2                                  _msgCount 00CA  
            _TMR0_DefaultInterruptHandler 000000                         ??_DATAEE_ReadByte 0018  
               __end_of_ADC_GetConversion 3372                     __size_of_UpdateRxFreq 001E  
                   __size_of_UpdateTxFreq 0042                        SWSPI_send_word@idx 0027  
                             _groupsArray 00EB                           ??_PLLInitialize 002A  
                                _testLeds 27E4                   __size_of_BlinkErrorLeds 005E  
                                int$flags 0048                                strtol@base 0028  
                              strtol@sign 0060                 __end_of_FLASH_IsWriteDone 36D0  
      __end_of_INTERRUPT_InterruptManager 00DC                _INTERRUPT_InterruptManager 0008  
                         EepromWrite@data 001B                           ??_SwSpi_Clk_Pin 0019  
                     __end_of_DacSetValue 2FB0                       _EUSART1_Receive_ISR 3372  
                __end_of_SwSpi_Set_CE_Pin 3126                         ?_FLASH_EraseBlock 0018  
             __end_of_InitRxMessageParams 33F4                                  exp@coeff 063C  
                              _MEMORY_ISR 373A                           ??_FlashReadUart 0060  
                                log@coeff 065A                __size_of_PLLUartInitialize 0002  
                  SWSPI_send_word@phrType 0029                      SetCpldFwVersion@data 002C  
                      ??_FLASH_EraseBlock 001C                                _INTCONbits 000FF2  
                             ??_eval_poly 002F                               _sampleArray 016E  
                             _sampleCount 00C6                                  isalpha@c 001D  
                                isdigit@c 001A                    ??_INTERRUPT_Initialize 0018  
                                memset@p1 0018                         ??_readUartMessage 01C5  
               _SetConversionResultFormat 36DC                  ??_SwSpi_Set_Dac_Ldac_Pin 0018  
                __end_of_FlashSampleWrite 1A22                                  intlevel2 0000  
                            _UpdateRxFreq 351E                              _UpdateTxFreq 2EEA  
                    ?_EUSART1_Receive_ISR 0001                     __end_of_SetMcuRunTime 2EEA  
                        ___lwmod@dividend 0001                __size_of_GroupSynthesizers 005C  
                                isspace@c 001A                          ___lldiv@dividend 0018  
                 ?_PIN_MANAGER_Initialize 0001                   __end_of_ClearMcuRunTime 3668  
                              _RCSTA1bits 000FAB                                  isupper@c 001A  
            __end_of_EUSART1_Transmit_ISR 31D2                             ??_BlinkOkLeds 0018  
                        ??_ADC_Initialize 0018                  __end_of_SetCpldFwVersion 2F6E  
                       _TimerSamplingFlag 00D5                             AdcConvert@idx 00BC  
                __end_of_InitSevenSegment 3490                       _SetAdcOperationMode 36E8  
                           _isReWriteDone 003B                      SwSpi_Clk_Pin@phrType 0019  
                   SwSpi_Data_Pin@phrType 0019                   __end_of_SwSpi_Set_Clock 2BF0  
                 SwSpi_Set_CE_Pin@phrType 0019                    __size_of_EUSART1_Write 003C  
                ??_SwSpi_Set_Dac_Sync_Pin 0018                         EepromRead@address 0019  
                        ___lldiv@quotient 0020                          _GroupFlashMemory 2E1E  
                         ___lwmod@divisor 0003                           _TMR0_Initialize 32AA  
                         ___lwmod@counter 0005                                  toupper@c 0018  
                       __CFG_T3CMX$PORTC0 000000                      ?_SetAdcOperationMode 002C  
                           ??_EepromWrite 001C                                _AdcConvert 121A  
                   ??_EUSART1_Receive_ISR 0001            __end_of_PIN_MANAGER_Initialize 2E1E  
            GetIntFromUartData@dataRegArr 006A                         __CFG_FOSC$INTIO67 000000  
                         _PIN_MANAGER_IOC 3736                          ??_SendAckMessage 0025  
              __size_of_ADC_GetConversion 0030                          ??_SetChannelMode 002E  
               __size_of_GetCpldFwVersion 0090                               _DacSetValue 2F6E  

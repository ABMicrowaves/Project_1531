

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Mar 27 17:01:21 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	text82,global,reloc=2,class=CODE,delta=1
   103                           	psect	text83,global,reloc=2,class=CODE,delta=1
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	text85,global,reloc=2,class=CODE,delta=1,group=1
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text102,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text103,global,reloc=2,class=CODE,delta=1,group=1
   124                           	psect	text104,global,reloc=2,class=CODE,delta=1,group=1
   125                           	psect	text105,global,reloc=2,class=CODE,delta=1
   126                           	psect	text106,global,reloc=2,class=CODE,delta=1
   127                           	psect	text107,global,reloc=2,class=CODE,delta=1
   128                           	psect	text108,global,reloc=2,class=CODE,delta=1
   129                           	psect	text109,global,reloc=2,class=CODE,delta=1
   130                           	psect	text110,global,reloc=2,class=CODE,delta=1
   131                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   132                           	psect	text112,global,reloc=2,class=CODE,delta=1
   133                           	psect	text113,global,reloc=2,class=CODE,delta=1,group=1
   134                           	psect	text114,global,reloc=2,class=CODE,delta=1
   135                           	psect	text115,global,reloc=2,class=CODE,delta=1
   136                           	psect	text116,global,reloc=2,class=CODE,delta=1
   137                           	psect	text117,global,reloc=2,class=CODE,delta=1
   138                           	psect	text118,global,reloc=2,class=CODE,delta=1
   139                           	psect	text119,global,reloc=2,class=CODE,delta=1
   140                           	psect	text120,global,reloc=2,class=CODE,delta=1
   141                           	psect	text121,global,reloc=2,class=CODE,delta=1
   142                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   143                           	psect	text122,global,reloc=2,class=CODE,delta=1
   144                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   145                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   146  0000                     
   147                           ; Version 1.45
   148                           ; Generated 16/11/2017 GMT
   149                           ; 
   150                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   151                           ; All rights reserved.
   152                           ; 
   153                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   154                           ; 
   155                           ; Redistribution and use in source and binary forms, with or without modification, are
   156                           ; permitted provided that the following conditions are met:
   157                           ; 
   158                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   159                           ;        conditions and the following disclaimer.
   160                           ; 
   161                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   162                           ;        of conditions and the following disclaimer in the documentation and/or other
   163                           ;        materials provided with the distribution.
   164                           ; 
   165                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   166                           ;        software without specific prior written permission.
   167                           ; 
   168                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   169                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   170                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   171                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   172                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   173                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   174                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   175                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   176                           ; 
   177                           ; 
   178                           ; Code-generator required, PIC18F45K22 Definitions
   179                           ; 
   180                           ; SFR Addresses
   181  0000                     
   182 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   183  0000                     
   184                           	psect	idataCOMRAM
   185  0043DA                     __pidataCOMRAM:
   186                           	opt stack 0
   187                           
   188                           ;initializer for _writeAddress
   189  0043DA  4580               	dw	17792
   190  0043DC  0000               	dw	0
   191                           
   192                           ;initializer for _synthLdTxCnt
   193  0043DE  02                 	db	2
   194                           
   195                           ;initializer for _synthLdRxCnt
   196  0043DF  02                 	db	2
   197                           
   198                           ;initializer for _SynthRxOper
   199  0043E0  01                 	db	1
   200                           
   201                           ;initializer for _SynthTxOper
   202  0043E1  01                 	db	1
   203                           
   204                           	psect	idataBANK1
   205  004338                     __pidataBANK1:
   206                           	opt stack 0
   207                           
   208                           ;initializer for _groupsArray
   209  004338  A4                 	db	low _GroupControlMcu
   210  004339  3F                 	db	high _GroupControlMcu
   211  00433A  2A                 	db	low _GroupStatusAndVersion
   212  00433B  41                 	db	high _GroupStatusAndVersion
   213  00433C  DA                 	db	low _GroupAdc
   214  00433D  41                 	db	high _GroupAdc
   215  00433E  6C                 	db	low _GroupSynthesizers
   216  00433F  32                 	db	high _GroupSynthesizers
   217  004340  84                 	db	low _GroupFlashMemory
   218  004341  3D                 	db	high _GroupFlashMemory
   219  004342  08                 	db	low _GroupDAC
   220  004343  3F                 	db	high _GroupDAC
   221                           
   222                           ;initializer for _readAddress
   223  004344  4580               	dw	17792
   224  004346  0000               	dw	0
   225                           
   226                           	psect	smallconst
   227  000600                     __psmallconst:
   228                           	opt stack 0
   229  000600  00                 	db	0
   230  000601                     _SYNTH_REGS:
   231                           	opt stack 0
   232  000601  041C               	dw	1052
   233  000603  0001               	dw	1
   234  000605  300B               	dw	12299
   235  000607  0061               	dw	97
   236  000609  193A               	dw	6458
   237  00060B  00C0               	dw	192
   238  00060D  FCC9               	dw	64713
   239  00060F  1110               	dw	4368
   240  000611  0428               	dw	1064
   241  000613  102D               	dw	4141
   242  000615  00E7               	dw	231
   243  000617  1200               	dw	4608
   244  000619  6076               	dw	24694
   245  00061B  3500               	dw	13568
   246  00061D  0025               	dw	37
   247  00061F  0080               	dw	128
   248  000621  BF84               	dw	49028
   249  000623  0800               	dw	2048
   250  000625  0003               	dw	3
   251  000627  0000               	dw	0
   252  000629  0012               	dw	18
   253  00062B  0000               	dw	0
   254  00062D  0001               	dw	1
   255  00062F  0C00               	dw	3072
   256  000631  0680               	dw	1664
   257  000633  0020               	dw	32
   258  000635  00                 	db	0
   259  000636  00                 	db	0
   260  000637  00                 	db	0
   261  000638  00                 	db	0
   262  000639                     __end_of_SYNTH_REGS:
   263                           	opt stack 0
   264  000639                     _SYNTH_ADDRES:
   265                           	opt stack 0
   266  000639  04                 	db	4
   267  00063A  08                 	db	8
   268  00063B  0C                 	db	12
   269  00063C  00                 	db	0
   270  00063D  10                 	db	16
   271  00063E  00                 	db	0
   272  00063F  14                 	db	20
   273  000640  00                 	db	0
   274  000641  00                 	db	0
   275  000642  00                 	db	0
   276  000643  18                 	db	24
   277  000644  1C                 	db	28
   278  000645  00                 	db	0
   279  000646  00                 	db	0
   280  000647                     __end_of_SYNTH_ADDRES:
   281                           	opt stack 0
   282  000647                     _channelArr:
   283                           	opt stack 0
   284  000647  04                 	db	4
   285  000648  05                 	db	5
   286  000649  06                 	db	6
   287  00064A  07                 	db	7
   288  00064B  08                 	db	8
   289  00064C  09                 	db	9
   290  00064D  0A                 	db	10
   291  00064E  0D                 	db	13
   292  00064F  19                 	db	25
   293  000650                     __end_of_channelArr:
   294                           	opt stack 0
   295  000650                     _DAC_DEFAULT_INIT_VALUES:
   296                           	opt stack 0
   297  000650  2344               	dw	9028
   298  000652  6344               	dw	25412
   299  000654  A344               	dw	41796
   300  000656  E344               	dw	58180
   301  000658                     __end_of_DAC_DEFAULT_INIT_VALUES:
   302                           	opt stack 0
   303  000658                     _DAC_ADDRES:
   304                           	opt stack 0
   305  000658  02                 	db	2
   306  000659  04                 	db	4
   307  00065A  06                 	db	6
   308  00065B  08                 	db	8
   309  00065C                     __end_of_DAC_ADDRES:
   310                           	opt stack 0
   311  00065C                     exp@coeff:
   312                           	opt stack 0
   313  00065C  00                 	db	0
   314  00065D  80                 	db	128
   315  00065E  3F                 	db	63
   316  00065F  72                 	db	114
   317  000660  31                 	db	49
   318  000661  3F                 	db	63
   319  000662  FE                 	db	254
   320  000663  75                 	db	117
   321  000664  3E                 	db	62
   322  000665  58                 	db	88
   323  000666  63                 	db	99
   324  000667  3D                 	db	61
   325  000668  95                 	db	149
   326  000669  1D                 	db	29
   327  00066A  3C                 	db	60
   328  00066B  C5                 	db	197
   329  00066C  AE                 	db	174
   330  00066D  3A                 	db	58
   331  00066E  79                 	db	121
   332  00066F  21                 	db	33
   333  000670  39                 	db	57
   334  000671  94                 	db	148
   335  000672  80                 	db	128
   336  000673  37                 	db	55
   337  000674  93                 	db	147
   338  000675  A7                 	db	167
   339  000676  35                 	db	53
   340  000677  56                 	db	86
   341  000678  15                 	db	21
   342  000679  34                 	db	52
   343  00067A                     __end_ofexp@coeff:
   344                           	opt stack 0
   345  00067A                     log@coeff:
   346                           	opt stack 0
   347  00067A  00                 	db	0
   348  00067B  00                 	db	0
   349  00067C  00                 	db	0
   350  00067D  00                 	db	0
   351  00067E  80                 	db	128
   352  00067F  3F                 	db	63
   353  000680  F0                 	db	240
   354  000681  FF                 	db	255
   355  000682  BE                 	db	190
   356  000683  E2                 	db	226
   357  000684  A9                 	db	169
   358  000685  3E                 	db	62
   359  000686  83                 	db	131
   360  000687  76                 	db	118
   361  000688  BE                 	db	190
   362  000689  AE                 	db	174
   363  00068A  2B                 	db	43
   364  00068B  3E                 	db	62
   365  00068C  3C                 	db	60
   366  00068D  C3                 	db	195
   367  00068E  BD                 	db	189
   368  00068F  D2                 	db	210
   369  000690  13                 	db	19
   370  000691  3D                 	db	61
   371  000692  78                 	db	120
   372  000693  D3                 	db	211
   373  000694  BB                 	db	187
   374  000695                     __end_oflog@coeff:
   375                           	opt stack 0
   376  000695                     STR_1:
   377                           
   378                           ; BSR set to: 0
   379  000695  4D                 	db	77	;'M'
   380  000696  61                 	db	97	;'a'
   381  000697  72                 	db	114	;'r'
   382  000698  20                 	db	32
   383  000699  32                 	db	50	;'2'
   384  00069A  37                 	db	55	;'7'
   385  00069B  20                 	db	32
   386  00069C  32                 	db	50	;'2'
   387  00069D  30                 	db	48	;'0'
   388  00069E  31                 	db	49	;'1'
   389  00069F  38                 	db	56	;'8'
   390  0006A0  00                 	db	0
   391  0006A1                     STR_18:
   392                           
   393                           ; BSR set to: 0
   394  0006A1  31                 	db	49	;'1'
   395  0006A2  37                 	db	55	;'7'
   396  0006A3  3A                 	db	58	;':'
   397  0006A4  30                 	db	48	;'0'
   398  0006A5  31                 	db	49	;'1'
   399  0006A6  3A                 	db	58	;':'
   400  0006A7  31                 	db	49	;'1'
   401  0006A8  36                 	db	54	;'6'
   402  0006A9  00                 	db	0
   403  0000                     
   404                           ; #config settings
   405  0006AA  00                 	db	0	; dummy byte at the end
   406  0000                     
   407                           	psect	nvCOMRAM
   408  000046                     __pnvCOMRAM:
   409                           	opt stack 0
   410  000046                     _timer0ReloadVal:
   411                           	opt stack 0
   412  000046                     	ds	2
   413                           
   414                           	psect	nvBANK1
   415  0001CC                     __pnvBANK1:
   416                           	opt stack 0
   417  0001CC                     _TMR0_InterruptHandler:
   418                           	opt stack 0
   419  0001CC                     	ds	2
   420  0001CE                     _IOCB5_InterruptHandler:
   421                           	opt stack 0
   422  0001CE                     	ds	2
   423  0001D0                     _IOCB4_InterruptHandler:
   424                           	opt stack 0
   425  0001D0                     	ds	2
   426  0001D2                     _eusart1TxBufferRemaining:
   427                           	opt stack 0
   428  0001D2                     	ds	1
   429  0000                     _ANSELA	set	3896
   430  0000                     _ANSELE	set	3900
   431  0000                     _ANSELD	set	3899
   432  0000                     _ANSELB	set	3897
   433  0000                     _ANSELC	set	3898
   434  0000                     _ADCON0bits	set	4034
   435  0000                     _ADRESH	set	4036
   436  0000                     _ADRESL	set	4035
   437  0000                     _ADCON2	set	4032
   438  0000                     _ADCON1	set	4033
   439  0000                     _ADCON0	set	4034
   440  0000                     _T0CONbits	set	4053
   441  0000                     _T0CON	set	4053
   442  0000                     _TMR0L	set	4054
   443  0000                     _TMR0H	set	4055
   444  0000                     _EEDATA	set	4008
   445  0000                     _EEADR	set	4009
   446  0000                     _EECON2	set	4007
   447  0000                     _EECON1bits	set	4006
   448  0000                     _TABLAT	set	4085
   449  0000                     _TBLPTRL	set	4086
   450  0000                     _TBLPTRH	set	4087
   451  0000                     _TBLPTRU	set	4088
   452  0000                     _IOCBbits	set	3938
   453  0000                     _INTCON2bits	set	4081
   454  0000                     _WPUB	set	3937
   455  0000                     _TRISD	set	3989
   456  0000                     _TRISC	set	3988
   457  0000                     _TRISB	set	3987
   458  0000                     _TRISA	set	3986
   459  0000                     _TRISE	set	3990
   460  0000                     _LATC	set	3979
   461  0000                     _LATB	set	3978
   462  0000                     _LATA	set	3977
   463  0000                     _LATD	set	3980
   464  0000                     _LATE	set	3981
   465  0000                     _RCREG1	set	4014
   466  0000                     _RCSTA1bits	set	4011
   467  0000                     _TXREG1	set	4013
   468  0000                     _SPBRGH1	set	4016
   469  0000                     _SPBRG1	set	4015
   470  0000                     _TXSTA1	set	4012
   471  0000                     _RCSTA1	set	4011
   472  0000                     _BAUDCON1	set	4024
   473  0000                     _PIR1bits	set	3998
   474  0000                     _PIE1bits	set	3997
   475  0000                     _PIR2bits	set	4001
   476  0000                     _PIE2bits	set	4000
   477  0000                     _RCONbits	set	4048
   478  0000                     _OSCTUNE	set	3995
   479  0000                     _OSCCON2	set	4050
   480  0000                     _OSCCON	set	4051
   481  0000                     _LATAbits	set	3977
   482  0000                     _LATDbits	set	3980
   483  0000                     _INTCONbits	set	4082
   484  0000                     _PORTDbits	set	3971
   485  0000                     _LATCbits	set	3979
   486  0000                     _LATBbits	set	3978
   487                           
   488                           	psect	cinit
   489  00337A                     __pcinit:
   490                           	opt stack 0
   491  00337A                     start_initialization:
   492                           	opt stack 0
   493  00337A                     __initialization:
   494                           	opt stack 0
   495                           
   496                           ; Initialize objects allocated to BANK1 (16 bytes)
   497                           ; load TBLPTR registers with __pidataBANK1
   498  00337A  0E38               	movlw	low __pidataBANK1
   499  00337C  6EF6               	movwf	tblptrl,c
   500  00337E  0E43               	movlw	high __pidataBANK1
   501  003380  6EF7               	movwf	tblptrh,c
   502  003382  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   503  003384  6EF8               	movwf	tblptru,c
   504  003386  EE01  F0BC         	lfsr	0,__pdataBANK1
   505  00338A  EE10 F010          	lfsr	1,16
   506  00338E                     copy_data0:
   507  00338E  0009               	tblrd		*+
   508  003390  CFF5 FFEE          	movff	tablat,postinc0
   509  003394  50E5               	movf	postdec1,w,c
   510  003396  50E1               	movf	fsr1l,w,c
   511  003398  E1FA               	bnz	copy_data0
   512                           
   513                           ; Initialize objects allocated to COMRAM (8 bytes)
   514                           ; load TBLPTR registers with __pidataCOMRAM
   515  00339A  0EDA               	movlw	low __pidataCOMRAM
   516  00339C  6EF6               	movwf	tblptrl,c
   517  00339E  0E43               	movlw	high __pidataCOMRAM
   518  0033A0  6EF7               	movwf	tblptrh,c
   519  0033A2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   520  0033A4  6EF8               	movwf	tblptru,c
   521  0033A6  EE00  F03E         	lfsr	0,__pdataCOMRAM
   522  0033AA  EE10 F008          	lfsr	1,8
   523  0033AE                     copy_data1:
   524  0033AE  0009               	tblrd		*+
   525  0033B0  CFF5 FFEE          	movff	tablat,postinc0
   526  0033B4  50E5               	movf	postdec1,w,c
   527  0033B6  50E1               	movf	fsr1l,w,c
   528  0033B8  E1FA               	bnz	copy_data1
   529                           
   530                           ; Clear objects allocated to BANK2 (70 bytes)
   531  0033BA  EE02  F000         	lfsr	0,__pbssBANK2
   532  0033BE  0E46               	movlw	70
   533  0033C0                     clear_0:
   534  0033C0  6AEE               	clrf	postinc0,c
   535  0033C2  06E8               	decf	wreg,f,c
   536  0033C4  E1FD               	bnz	clear_0
   537                           
   538                           ; Clear objects allocated to BANK1 (188 bytes)
   539  0033C6  EE01  F000         	lfsr	0,__pbssBANK1
   540  0033CA  0EBC               	movlw	188
   541  0033CC                     clear_1:
   542  0033CC  6AEE               	clrf	postinc0,c
   543  0033CE  06E8               	decf	wreg,f,c
   544  0033D0  E1FD               	bnz	clear_1
   545                           
   546                           ; Clear objects allocated to BANK0 (11 bytes)
   547  0033D2  EE00  F0F0         	lfsr	0,__pbssBANK0
   548  0033D6  0E0B               	movlw	11
   549  0033D8                     clear_2:
   550  0033D8  6AEE               	clrf	postinc0,c
   551  0033DA  06E8               	decf	wreg,f,c
   552  0033DC  E1FD               	bnz	clear_2
   553                           
   554                           ; Clear objects allocated to COMRAM (13 bytes)
   555  0033DE  EE00  F031         	lfsr	0,__pbssCOMRAM
   556  0033E2  0E0D               	movlw	13
   557  0033E4                     clear_3:
   558  0033E4  6AEE               	clrf	postinc0,c
   559  0033E6  06E8               	decf	wreg,f,c
   560  0033E8  E1FD               	bnz	clear_3
   561  0033EA                     end_of_initialization:
   562                           	opt stack 0
   563  0033EA                     __end_of__initialization:
   564                           	opt stack 0
   565  0033EA  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   566  0033EC  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   567  0033EE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   568  0033F0  6EF8               	movwf	tblptru,c
   569  0033F2  0100               	movlb	0
   570  0033F4  EF77  F01A         	goto	_main	;jump to C main() function
   571                           tblptru	equ	0xFF8
   572                           tblptrh	equ	0xFF7
   573                           tblptrl	equ	0xFF6
   574                           tablat	equ	0xFF5
   575                           postinc0	equ	0xFEE
   576                           wreg	equ	0xFE8
   577                           postdec1	equ	0xFE5
   578                           fsr1l	equ	0xFE1
   579                           
   580                           	psect	bssCOMRAM
   581  000031                     __pbssCOMRAM:
   582                           	opt stack 0
   583  000031                     TMR0_ISR@CountCallBack:
   584                           	opt stack 0
   585  000031                     	ds	2
   586  000033                     _eusart1RxTail:
   587                           	opt stack 0
   588  000033                     	ds	1
   589  000034                     _eusart1RxHead:
   590                           	opt stack 0
   591  000034                     	ds	1
   592  000035                     _eusart1TxTail:
   593                           	opt stack 0
   594  000035                     	ds	1
   595  000036                     _eusart1TxHead:
   596                           	opt stack 0
   597  000036                     	ds	1
   598  000037                     _synthLdTxArrayCnt:
   599                           	opt stack 0
   600  000037                     	ds	1
   601  000038                     _synthLdRxArrayCnt:
   602                           	opt stack 0
   603  000038                     	ds	1
   604  000039                     _cntRegUpdateRx:
   605                           	opt stack 0
   606  000039                     	ds	1
   607  00003A                     _cntRegUpdateTx:
   608                           	opt stack 0
   609  00003A                     	ds	1
   610  00003B                     _crcGiven:
   611                           	opt stack 0
   612  00003B                     	ds	1
   613  00003C                     _crcCalc:
   614                           	opt stack 0
   615  00003C                     	ds	1
   616  00003D                     _adcSampleMode:
   617                           	opt stack 0
   618  00003D                     	ds	1
   619                           tblptru	equ	0xFF8
   620                           tblptrh	equ	0xFF7
   621                           tblptrl	equ	0xFF6
   622                           tablat	equ	0xFF5
   623                           postinc0	equ	0xFEE
   624                           wreg	equ	0xFE8
   625                           postdec1	equ	0xFE5
   626                           fsr1l	equ	0xFE1
   627                           
   628                           	psect	dataCOMRAM
   629  00003E                     __pdataCOMRAM:
   630                           	opt stack 0
   631  00003E                     _writeAddress:
   632                           	opt stack 0
   633  00003E                     	ds	4
   634  000042                     _synthLdTxCnt:
   635                           	opt stack 0
   636  000042                     	ds	1
   637  000043                     _synthLdRxCnt:
   638                           	opt stack 0
   639  000043                     	ds	1
   640  000044                     _SynthRxOper:
   641                           	opt stack 0
   642  000044                     	ds	1
   643  000045                     _SynthTxOper:
   644                           	opt stack 0
   645  000045                     	ds	1
   646                           tblptru	equ	0xFF8
   647                           tblptrh	equ	0xFF7
   648                           tblptrl	equ	0xFF6
   649                           tablat	equ	0xFF5
   650                           postinc0	equ	0xFEE
   651                           wreg	equ	0xFE8
   652                           postdec1	equ	0xFE5
   653                           fsr1l	equ	0xFE1
   654                           
   655                           	psect	bssBANK0
   656  0000F0                     __pbssBANK0:
   657                           	opt stack 0
   658  0000F0                     _msgCount:
   659                           	opt stack 0
   660  0000F0                     	ds	1
   661  0000F1                     _dataSize:
   662                           	opt stack 0
   663  0000F1                     	ds	1
   664  0000F2                     _request:
   665                           	opt stack 0
   666  0000F2                     	ds	1
   667  0000F3                     _group:
   668                           	opt stack 0
   669  0000F3                     	ds	1
   670  0000F4                     _cState:
   671                           	opt stack 0
   672  0000F4                     	ds	1
   673  0000F5                     _eusart1RxCount:
   674                           	opt stack 0
   675  0000F5                     	ds	1
   676  0000F6                     _channel:
   677                           	opt stack 0
   678  0000F6                     	ds	1
   679  0000F7                     _Timer0_OneSec:
   680                           	opt stack 0
   681  0000F7                     	ds	1
   682  0000F8                     _Timer0_KeepAlive:
   683                           	opt stack 0
   684  0000F8                     	ds	1
   685  0000F9                     _Timer0_Sampling:
   686                           	opt stack 0
   687  0000F9                     	ds	1
   688  0000FA                     _Timer0_SynthLd:
   689                           	opt stack 0
   690  0000FA                     	ds	1
   691                           tblptru	equ	0xFF8
   692                           tblptrh	equ	0xFF7
   693                           tblptrl	equ	0xFF6
   694                           tablat	equ	0xFF5
   695                           postinc0	equ	0xFEE
   696                           wreg	equ	0xFE8
   697                           postdec1	equ	0xFE5
   698                           fsr1l	equ	0xFE1
   699                           
   700                           	psect	bssBANK1
   701  000100                     __pbssBANK1:
   702                           	opt stack 0
   703  000100                     _eusart1RxBuffer:
   704                           	opt stack 0
   705  000100                     	ds	40
   706  000128                     _mcuRunTimeIn5SecTicks:
   707                           	opt stack 0
   708  000128                     	ds	4
   709  00012C                     _numOfReadSamples:
   710                           	opt stack 0
   711  00012C                     	ds	4
   712  000130                     _numOfValidateSamples:
   713                           	opt stack 0
   714  000130                     	ds	4
   715  000134                     _errno:
   716                           	opt stack 0
   717  000134                     	ds	2
   718  000136                     _sampleCount:
   719                           	opt stack 0
   720  000136                     	ds	2
   721  000138                     _count:
   722                           	opt stack 0
   723  000138                     	ds	2
   724  00013A                     _isReWriteDone:
   725                           	opt stack 0
   726  00013A                     	ds	1
   727  00013B                     _data:
   728                           	opt stack 0
   729  00013B                     	ds	1
   730  00013C                     _sampleArray:
   731                           	opt stack 0
   732  00013C                     	ds	64
   733  00017C                     _rxMsgData:
   734                           	opt stack 0
   735  00017C                     	ds	20
   736  000190                     _rxMsgQueue:
   737                           	opt stack 0
   738  000190                     	ds	20
   739  0001A4                     _synthLdTxArray:
   740                           	opt stack 0
   741  0001A4                     	ds	12
   742  0001B0                     _synthLdRxArray:
   743                           	opt stack 0
   744  0001B0                     	ds	12
   745                           tblptru	equ	0xFF8
   746                           tblptrh	equ	0xFF7
   747                           tblptrl	equ	0xFF6
   748                           tablat	equ	0xFF5
   749                           postinc0	equ	0xFEE
   750                           wreg	equ	0xFE8
   751                           postdec1	equ	0xFE5
   752                           fsr1l	equ	0xFE1
   753                           
   754                           	psect	dataBANK1
   755  0001BC                     __pdataBANK1:
   756                           	opt stack 0
   757  0001BC                     _groupsArray:
   758                           	opt stack 0
   759  0001BC                     	ds	12
   760  0001C8                     _readAddress:
   761                           	opt stack 0
   762  0001C8                     	ds	4
   763                           tblptru	equ	0xFF8
   764                           tblptrh	equ	0xFF7
   765                           tblptrl	equ	0xFF6
   766                           tablat	equ	0xFF5
   767                           postinc0	equ	0xFEE
   768                           wreg	equ	0xFE8
   769                           postdec1	equ	0xFE5
   770                           fsr1l	equ	0xFE1
   771                           
   772                           	psect	bssBANK2
   773  000200                     __pbssBANK2:
   774                           	opt stack 0
   775  000200                     _eusart1TxBuffer:
   776                           	opt stack 0
   777  000200                     	ds	70
   778                           tblptru	equ	0xFF8
   779                           tblptrh	equ	0xFF7
   780                           tblptrl	equ	0xFF6
   781                           tablat	equ	0xFF5
   782                           postinc0	equ	0xFEE
   783                           wreg	equ	0xFE8
   784                           postdec1	equ	0xFE5
   785                           fsr1l	equ	0xFE1
   786                           
   787                           	psect	cstackBANK2
   788  000246                     __pcstackBANK2:
   789                           	opt stack 0
   790  000246                     SynthReadData@TxMsg:
   791                           	opt stack 0
   792                           
   793                           ; 29 bytes @ 0x0
   794  000246                     	ds	29
   795  000263                     SynthReadData@data_987:
   796                           	opt stack 0
   797                           
   798                           ; 1 bytes @ 0x1D
   799  000263                     	ds	1
   800  000264                     _SynthReadData$988:
   801                           	opt stack 0
   802                           
   803                           ; 2 bytes @ 0x1E
   804  000264                     	ds	2
   805  000266                     SynthReadData@eepromDataArray:
   806                           	opt stack 0
   807                           
   808                           ; 20 bytes @ 0x20
   809  000266                     	ds	20
   810  00027A                     SynthReadData@cType:
   811                           	opt stack 0
   812                           
   813                           ; 1 bytes @ 0x34
   814  00027A                     	ds	1
   815  00027B                     SynthReadData@regNum:
   816                           	opt stack 0
   817                           
   818                           ; 1 bytes @ 0x35
   819  00027B                     	ds	1
   820  00027C                     SynthReadData@byteNum:
   821                           	opt stack 0
   822                           
   823                           ; 1 bytes @ 0x36
   824  00027C                     	ds	1
   825                           tblptru	equ	0xFF8
   826                           tblptrh	equ	0xFF7
   827                           tblptrl	equ	0xFF6
   828                           tablat	equ	0xFF5
   829                           postinc0	equ	0xFEE
   830                           wreg	equ	0xFE8
   831                           postdec1	equ	0xFE5
   832                           fsr1l	equ	0xFE1
   833                           
   834                           	psect	cstackBANK0
   835  000060                     __pcstackBANK0:
   836                           	opt stack 0
   837  000060                     ??_FlashSampleWrite:
   838  000060                     ??___ftdiv:
   839  000060                     strtol@sign:
   840                           	opt stack 0
   841  000060                     GetMcuFwVersion@compileData:
   842                           	opt stack 0
   843  000060                     GetMcuRunTime@TxMsg:
   844                           	opt stack 0
   845  000060                     SWSPI_Synth_send_bits@bitArray:
   846                           	opt stack 0
   847                           
   848                           ; 32 bytes @ 0x0
   849  000060                     	ds	1
   850  000061                     strtol@a:
   851                           	opt stack 0
   852                           
   853                           ; 4 bytes @ 0x1
   854  000061                     	ds	1
   855  000062                     FlashSampleWrite@rotateLeft:
   856                           	opt stack 0
   857                           
   858                           ; 2 bytes @ 0x2
   859  000062                     	ds	1
   860  000063                     ___ftdiv@cntr:
   861                           	opt stack 0
   862                           
   863                           ; 1 bytes @ 0x3
   864  000063                     	ds	1
   865  000064                     ___ftdiv@f3:
   866                           	opt stack 0
   867  000064                     GetMcuFwVersion@TxMsg:
   868                           	opt stack 0
   869                           
   870                           ; 18 bytes @ 0x4
   871  000064                     	ds	1
   872  000065                     strtol@c:
   873                           	opt stack 0
   874                           
   875                           ; 1 bytes @ 0x5
   876  000065                     	ds	1
   877  000066                     ?_GetIntFromUartData:
   878                           	opt stack 0
   879  000066                     GetIntFromUartData@data:
   880                           	opt stack 0
   881                           
   882                           ; 2 bytes @ 0x6
   883  000066                     	ds	1
   884  000067                     ___ftdiv@exp:
   885                           	opt stack 0
   886                           
   887                           ; 1 bytes @ 0x7
   888  000067                     	ds	1
   889  000068                     ___ftdiv@sign:
   890                           	opt stack 0
   891                           
   892                           ; 1 bytes @ 0x8
   893  000068                     	ds	1
   894  000069                     ?___ftmul:
   895                           	opt stack 0
   896  000069                     ___ftmul@f1:
   897                           	opt stack 0
   898  000069                     GetMcuRunTime@tempRunTime:
   899                           	opt stack 0
   900                           
   901                           ; 4 bytes @ 0x9
   902  000069                     	ds	3
   903  00006C                     ___ftmul@f2:
   904                           	opt stack 0
   905                           
   906                           ; 3 bytes @ 0xC
   907  00006C                     	ds	1
   908  00006D                     GetMcuRunTime@idx:
   909                           	opt stack 0
   910                           
   911                           ; 2 bytes @ 0xD
   912  00006D                     	ds	1
   913  00006E                     ??_GetIntFromUartData:
   914                           
   915                           ; 1 bytes @ 0xE
   916  00006E                     	ds	1
   917  00006F                     ??___ftmul:
   918                           
   919                           ; 1 bytes @ 0xF
   920  00006F                     	ds	1
   921  000070                     GetIntFromUartData@dataRegArr:
   922                           	opt stack 0
   923                           
   924                           ; 10 bytes @ 0x10
   925  000070                     	ds	2
   926  000072                     ___ftmul@exp:
   927                           	opt stack 0
   928                           
   929                           ; 1 bytes @ 0x12
   930  000072                     	ds	1
   931  000073                     ___ftmul@f3_as_product:
   932                           	opt stack 0
   933                           
   934                           ; 3 bytes @ 0x13
   935  000073                     	ds	3
   936  000076                     ___ftmul@cntr:
   937                           	opt stack 0
   938  000076                     _GetMcuFwVersion$2698:
   939                           	opt stack 0
   940                           
   941                           ; 2 bytes @ 0x16
   942  000076                     	ds	1
   943  000077                     ___ftmul@sign:
   944                           	opt stack 0
   945                           
   946                           ; 1 bytes @ 0x17
   947  000077                     	ds	1
   948  000078                     ??_CheckFlashPrecentage:
   949  000078                     ?___ftadd:
   950                           	opt stack 0
   951  000078                     ?___fttol:
   952                           	opt stack 0
   953  000078                     _GetMcuFwVersion$2702:
   954                           	opt stack 0
   955  000078                     ___ftadd@f1:
   956                           	opt stack 0
   957  000078                     ___fttol@f1:
   958                           	opt stack 0
   959                           
   960                           ; 3 bytes @ 0x18
   961  000078                     	ds	2
   962  00007A                     GetIntFromUartData@num:
   963                           	opt stack 0
   964                           
   965                           ; 1 bytes @ 0x1A
   966  00007A                     	ds	1
   967  00007B                     GetIntFromUartData@recVal:
   968                           	opt stack 0
   969  00007B                     ___ftadd@f2:
   970                           	opt stack 0
   971                           
   972                           ; 3 bytes @ 0x1B
   973  00007B                     	ds	1
   974  00007C                     ??___fttol:
   975  00007C                     CheckFlashPrecentage@precentage:
   976                           	opt stack 0
   977  00007C                     GetIntFromUartData@retVal:
   978                           	opt stack 0
   979                           
   980                           ; 8 bytes @ 0x1C
   981  00007C                     	ds	2
   982  00007E                     ??___ftadd:
   983                           
   984                           ; 1 bytes @ 0x1E
   985  00007E                     	ds	2
   986  000080                     SWSPI_Synth_send_bits@mask:
   987                           	opt stack 0
   988                           
   989                           ; 4 bytes @ 0x20
   990  000080                     	ds	1
   991  000081                     ___ftadd@sign:
   992                           	opt stack 0
   993  000081                     ___fttol@sign1:
   994                           	opt stack 0
   995                           
   996                           ; 1 bytes @ 0x21
   997  000081                     	ds	1
   998  000082                     ___ftadd@exp2:
   999                           	opt stack 0
  1000  000082                     ___fttol@lval:
  1001                           	opt stack 0
  1002                           
  1003                           ; 4 bytes @ 0x22
  1004  000082                     	ds	1
  1005  000083                     ___ftadd@exp1:
  1006                           	opt stack 0
  1007                           
  1008                           ; 1 bytes @ 0x23
  1009  000083                     	ds	1
  1010  000084                     ?___ftsub:
  1011                           	opt stack 0
  1012  000084                     ?_eval_poly:
  1013                           	opt stack 0
  1014  000084                     SWSPI_Synth_send_bits@count:
  1015                           	opt stack 0
  1016  000084                     GetIntFromUartData@idxCon:
  1017                           	opt stack 0
  1018  000084                     ___ftsub@f1:
  1019                           	opt stack 0
  1020  000084                     eval_poly@x:
  1021                           	opt stack 0
  1022                           
  1023                           ; 3 bytes @ 0x24
  1024  000084                     	ds	1
  1025  000085                     SWSPI_Synth_send_bits@phrType:
  1026                           	opt stack 0
  1027                           
  1028                           ; 1 bytes @ 0x25
  1029  000085                     	ds	1
  1030  000086                     SWSPI_send_word@datac:
  1031                           	opt stack 0
  1032  000086                     GetIntFromUartData@idxData:
  1033                           	opt stack 0
  1034  000086                     ___fttol@exp1:
  1035                           	opt stack 0
  1036                           
  1037                           ; 1 bytes @ 0x26
  1038  000086                     	ds	1
  1039  000087                     ?___altoft:
  1040                           	opt stack 0
  1041  000087                     FlashReadUart@data:
  1042                           	opt stack 0
  1043  000087                     SWSPI_send_word@idx:
  1044                           	opt stack 0
  1045  000087                     eval_poly@d:
  1046                           	opt stack 0
  1047  000087                     ___ftsub@f2:
  1048                           	opt stack 0
  1049  000087                     ___altoft@c:
  1050                           	opt stack 0
  1051                           
  1052                           ; 4 bytes @ 0x27
  1053  000087                     	ds	2
  1054  000089                     ??_FlashReadUart:
  1055  000089                     SWSPI_send_word@phrType:
  1056                           	opt stack 0
  1057  000089                     eval_poly@n:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x29
  1061  000089                     	ds	1
  1062  00008A                     DacSetValue@data:
  1063                           	opt stack 0
  1064  00008A                     UpdateSynthFreq@data:
  1065                           	opt stack 0
  1066                           
  1067                           ; 2 bytes @ 0x2A
  1068  00008A                     	ds	1
  1069  00008B                     ??___altoft:
  1070  00008B                     eval_poly@res:
  1071                           	opt stack 0
  1072                           
  1073                           ; 3 bytes @ 0x2B
  1074  00008B                     	ds	1
  1075  00008C                     ??_DacSetValue:
  1076  00008C                     UpdateSynthFreq@cType:
  1077                           	opt stack 0
  1078                           
  1079                           ; 1 bytes @ 0x2C
  1080  00008C                     	ds	1
  1081  00008D                     UpdateSynthFreq@retVal:
  1082                           	opt stack 0
  1083                           
  1084                           ; 8 bytes @ 0x2D
  1085  00008D                     	ds	1
  1086  00008E                     ?_log:
  1087                           	opt stack 0
  1088  00008E                     ?_ldexp:
  1089                           	opt stack 0
  1090  00008E                     ldexp@value:
  1091                           	opt stack 0
  1092  00008E                     log@x:
  1093                           	opt stack 0
  1094                           
  1095                           ; 3 bytes @ 0x2E
  1096  00008E                     	ds	1
  1097  00008F                     ?_floor:
  1098                           	opt stack 0
  1099  00008F                     floor@x:
  1100                           	opt stack 0
  1101  00008F                     FlashReadUart@TxMsg:
  1102                           	opt stack 0
  1103                           
  1104                           ; 69 bytes @ 0x2F
  1105  00008F                     	ds	1
  1106  000090                     DacSetValue@dacIndex:
  1107                           	opt stack 0
  1108                           
  1109                           ; 1 bytes @ 0x30
  1110  000090                     	ds	1
  1111  000091                     ldexp@newexp:
  1112                           	opt stack 0
  1113  000091                     log@exponent:
  1114                           	opt stack 0
  1115  000091                     DacSetValue@retVal:
  1116                           	opt stack 0
  1117                           
  1118                           ; 8 bytes @ 0x31
  1119  000091                     	ds	1
  1120  000092                     floor@i:
  1121                           	opt stack 0
  1122                           
  1123                           ; 3 bytes @ 0x32
  1124  000092                     	ds	1
  1125  000093                     ??_ldexp:
  1126                           
  1127                           ; 1 bytes @ 0x33
  1128  000093                     	ds	2
  1129  000095                     floor@expon:
  1130                           	opt stack 0
  1131                           
  1132                           ; 2 bytes @ 0x35
  1133  000095                     	ds	2
  1134  000097                     ?_exp:
  1135                           	opt stack 0
  1136  000097                     exp@x:
  1137                           	opt stack 0
  1138                           
  1139                           ; 3 bytes @ 0x37
  1140  000097                     	ds	3
  1141  00009A                     _exp$3604:
  1142                           	opt stack 0
  1143                           
  1144                           ; 3 bytes @ 0x3A
  1145  00009A                     	ds	3
  1146  00009D                     exp@exponent:
  1147                           	opt stack 0
  1148                           
  1149                           ; 2 bytes @ 0x3D
  1150  00009D                     	ds	2
  1151  00009F                     exp@sign:
  1152                           	opt stack 0
  1153                           
  1154                           ; 1 bytes @ 0x3F
  1155  00009F                     	ds	1
  1156  0000A0                     ?_pow:
  1157                           	opt stack 0
  1158  0000A0                     pow@x:
  1159                           	opt stack 0
  1160                           
  1161                           ; 3 bytes @ 0x40
  1162  0000A0                     	ds	3
  1163  0000A3                     pow@y:
  1164                           	opt stack 0
  1165                           
  1166                           ; 3 bytes @ 0x43
  1167  0000A3                     	ds	3
  1168  0000A6                     _pow$3602:
  1169                           	opt stack 0
  1170                           
  1171                           ; 3 bytes @ 0x46
  1172  0000A6                     	ds	3
  1173  0000A9                     _pow$3603:
  1174                           	opt stack 0
  1175                           
  1176                           ; 3 bytes @ 0x49
  1177  0000A9                     	ds	3
  1178  0000AC                     pow@sign:
  1179                           	opt stack 0
  1180                           
  1181                           ; 1 bytes @ 0x4C
  1182  0000AC                     	ds	1
  1183  0000AD                     pow@yi:
  1184                           	opt stack 0
  1185                           
  1186                           ; 4 bytes @ 0x4D
  1187  0000AD                     	ds	4
  1188  0000B1                     ??_AdcConvert:
  1189  0000B1                     ?_ReadIntFromEeprom:
  1190                           	opt stack 0
  1191  0000B1                     ReadIntFromEeprom@numOfByes:
  1192                           	opt stack 0
  1193                           
  1194                           ; 2 bytes @ 0x51
  1195  0000B1                     	ds	2
  1196  0000B3                     AdcConvert@_adcResult:
  1197                           	opt stack 0
  1198                           
  1199                           ; 2 bytes @ 0x53
  1200  0000B3                     	ds	2
  1201  0000B5                     ??_ReadIntFromEeprom:
  1202  0000B5                     AdcConvert@_adcResult_350:
  1203                           	opt stack 0
  1204                           
  1205                           ; 2 bytes @ 0x55
  1206  0000B5                     	ds	2
  1207  0000B7                     AdcConvert@ldRxSate:
  1208                           	opt stack 0
  1209                           
  1210                           ; 2 bytes @ 0x57
  1211  0000B7                     	ds	1
  1212  0000B8                     ReadIntFromEeprom@base:
  1213                           	opt stack 0
  1214                           
  1215                           ; 4 bytes @ 0x58
  1216  0000B8                     	ds	1
  1217  0000B9                     AdcConvert@ldTxSate:
  1218                           	opt stack 0
  1219                           
  1220                           ; 2 bytes @ 0x59
  1221  0000B9                     	ds	2
  1222  0000BB                     AdcConvert@adcRes:
  1223                           	opt stack 0
  1224                           
  1225                           ; 2 bytes @ 0x5B
  1226  0000BB                     	ds	1
  1227  0000BC                     _ReadIntFromEeprom$3600:
  1228                           	opt stack 0
  1229                           
  1230                           ; 3 bytes @ 0x5C
  1231  0000BC                     	ds	1
  1232  0000BD                     _AdcConvert$3599:
  1233                           	opt stack 0
  1234                           
  1235                           ; 3 bytes @ 0x5D
  1236  0000BD                     	ds	2
  1237  0000BF                     _ReadIntFromEeprom$3601:
  1238                           	opt stack 0
  1239                           
  1240                           ; 3 bytes @ 0x5F
  1241  0000BF                     	ds	1
  1242  0000C0                     AdcConvert@idx:
  1243                           	opt stack 0
  1244                           
  1245                           ; 1 bytes @ 0x60
  1246  0000C0                     	ds	2
  1247  0000C2                     ReadIntFromEeprom@address:
  1248                           	opt stack 0
  1249                           
  1250                           ; 1 bytes @ 0x62
  1251  0000C2                     	ds	1
  1252  0000C3                     ReadIntFromEeprom@retVal:
  1253                           	opt stack 0
  1254                           
  1255                           ; 4 bytes @ 0x63
  1256  0000C3                     	ds	4
  1257  0000C7                     ReadIntFromEeprom@idx:
  1258                           	opt stack 0
  1259                           
  1260                           ; 1 bytes @ 0x67
  1261  0000C7                     	ds	1
  1262  0000C8                     ??_DacInit:
  1263  0000C8                     DacReadValue@data:
  1264                           	opt stack 0
  1265  0000C8                     SynthReadData@data:
  1266                           	opt stack 0
  1267  0000C8                     InitSynth@EepromVal:
  1268                           	opt stack 0
  1269                           
  1270                           ; 4 bytes @ 0x68
  1271  0000C8                     	ds	2
  1272  0000CA                     ??_DacReadValue:
  1273  0000CA                     DacInit@dacInput:
  1274                           	opt stack 0
  1275                           
  1276                           ; 2 bytes @ 0x6A
  1277  0000CA                     	ds	2
  1278  0000CC                     DacInit@idx:
  1279                           	opt stack 0
  1280  0000CC                     DacReadValue@regNum:
  1281                           	opt stack 0
  1282  0000CC                     InitSynth@cType:
  1283                           	opt stack 0
  1284                           
  1285                           ; 1 bytes @ 0x6C
  1286  0000CC                     	ds	1
  1287  0000CD                     DacReadValue@byteNum:
  1288                           	opt stack 0
  1289  0000CD                     InitSynth@idx:
  1290                           	opt stack 0
  1291                           
  1292                           ; 1 bytes @ 0x6D
  1293  0000CD                     	ds	1
  1294  0000CE                     InitSynth@regNum:
  1295                           	opt stack 0
  1296  0000CE                     DacReadValue@readVal:
  1297                           	opt stack 0
  1298                           
  1299                           ; 2 bytes @ 0x6E
  1300  0000CE                     	ds	1
  1301  0000CF                     SetSynthOper@cType:
  1302                           	opt stack 0
  1303                           
  1304                           ; 1 bytes @ 0x6F
  1305  0000CF                     	ds	1
  1306  0000D0                     DacReadValue@dacIndex:
  1307                           	opt stack 0
  1308                           
  1309                           ; 1 bytes @ 0x70
  1310  0000D0                     	ds	1
  1311  0000D1                     DacReadValue@TxMsg:
  1312                           	opt stack 0
  1313                           
  1314                           ; 7 bytes @ 0x71
  1315  0000D1                     	ds	3
  1316  0000D4                     FlashReadUart@val:
  1317                           	opt stack 0
  1318                           
  1319                           ; 8 bytes @ 0x74
  1320  0000D4                     	ds	4
  1321  0000D8                     DacReadValue@byteIdx:
  1322                           	opt stack 0
  1323                           
  1324                           ; 2 bytes @ 0x78
  1325  0000D8                     	ds	4
  1326  0000DC                     _FlashReadUart$609:
  1327                           	opt stack 0
  1328                           
  1329                           ; 4 bytes @ 0x7C
  1330  0000DC                     	ds	4
  1331  0000E0                     FlashReadUart@j:
  1332                           	opt stack 0
  1333                           
  1334                           ; 2 bytes @ 0x80
  1335  0000E0                     	ds	2
  1336  0000E2                     FlashReadUart@numOfSampleToRead:
  1337                           	opt stack 0
  1338                           
  1339                           ; 2 bytes @ 0x82
  1340  0000E2                     	ds	2
  1341  0000E4                     FlashReadUart@idx:
  1342                           	opt stack 0
  1343                           
  1344                           ; 2 bytes @ 0x84
  1345  0000E4                     	ds	2
  1346  0000E6                     GroupAdc@data:
  1347                           	opt stack 0
  1348  0000E6                     GroupSynthesizers@data:
  1349                           	opt stack 0
  1350  0000E6                     GroupFlashMemory@data:
  1351                           	opt stack 0
  1352  0000E6                     GroupDAC@data:
  1353                           	opt stack 0
  1354  0000E6                     
  1355                           ; 3 bytes @ 0x86
  1356  0000E6                     	ds	2
  1357  0000E8                     GroupAdc@request:
  1358                           	opt stack 0
  1359  0000E8                     GroupSynthesizers@request:
  1360                           	opt stack 0
  1361  0000E8                     GroupFlashMemory@request:
  1362                           	opt stack 0
  1363  0000E8                     GroupDAC@request:
  1364                           	opt stack 0
  1365                           
  1366                           ; 1 bytes @ 0x88
  1367  0000E8                     	ds	1
  1368  0000E9                     ??_readUartMessage:
  1369  0000E9                     GroupControlMcu@request:
  1370                           	opt stack 0
  1371  0000E9                     GroupStatusAndVersion@request:
  1372                           	opt stack 0
  1373                           
  1374                           ; 1 bytes @ 0x89
  1375  0000E9                     	ds	4
  1376  0000ED                     readUartMessage@idx:
  1377                           	opt stack 0
  1378                           
  1379                           ; 2 bytes @ 0x8D
  1380  0000ED                     	ds	2
  1381  0000EF                     readUartMessage@chRec:
  1382                           	opt stack 0
  1383                           
  1384                           ; 1 bytes @ 0x8F
  1385  0000EF                     	ds	1
  1386                           tblptru	equ	0xFF8
  1387                           tblptrh	equ	0xFF7
  1388                           tblptrl	equ	0xFF6
  1389                           tablat	equ	0xFF5
  1390                           postinc0	equ	0xFEE
  1391                           wreg	equ	0xFE8
  1392                           postdec1	equ	0xFE5
  1393                           fsr1l	equ	0xFE1
  1394                           
  1395                           	psect	cstackCOMRAM
  1396  000001                     __pcstackCOMRAM:
  1397                           	opt stack 0
  1398  000001                     ?___lwmod:
  1399                           	opt stack 0
  1400  000001                     ___lwmod@dividend:
  1401                           	opt stack 0
  1402                           
  1403                           ; 2 bytes @ 0x0
  1404  000001                     	ds	2
  1405  000003                     ___lwmod@divisor:
  1406                           	opt stack 0
  1407                           
  1408                           ; 2 bytes @ 0x2
  1409  000003                     	ds	2
  1410  000005                     ___lwmod@counter:
  1411                           	opt stack 0
  1412                           
  1413                           ; 1 bytes @ 0x4
  1414  000005                     	ds	1
  1415  000006                     ??_INTERRUPT_InterruptManager:
  1416                           
  1417                           ; 1 bytes @ 0x5
  1418  000006                     	ds	18
  1419  000018                     ??_EUSART1_Read:
  1420  000018                     ??_isspace:
  1421  000018                     ??_isdigit:
  1422  000018                     ??_isupper:
  1423  000018                     ??_BlinkErrorLeds:
  1424  000018                     ??_BlinkOkLeds:
  1425  000018                     ??_keepAliveSignalLed:
  1426  000018                     ?_ADC_GetConversion:
  1427                           	opt stack 0
  1428  000018                     ?_GetUint16FromBitArray:
  1429                           	opt stack 0
  1430  000018                     ?___wmul:
  1431                           	opt stack 0
  1432  000018                     ?___awmod:
  1433                           	opt stack 0
  1434  000018                     ?___ftpack:
  1435                           	opt stack 0
  1436  000018                     ?_frexp:
  1437                           	opt stack 0
  1438  000018                     ?___ftneg:
  1439                           	opt stack 0
  1440  000018                     ?___lldiv:
  1441                           	opt stack 0
  1442  000018                     ?___llmod:
  1443                           	opt stack 0
  1444  000018                     SwSpi_Data_Pin@cPinMode:
  1445                           	opt stack 0
  1446  000018                     SwSpi_Clk_Pin@cPinMode:
  1447                           	opt stack 0
  1448  000018                     SwSpi_Set_CE_Pin@cPinMode:
  1449                           	opt stack 0
  1450  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  1451                           	opt stack 0
  1452  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  1453                           	opt stack 0
  1454  000018                     EUSART1_Write@txData:
  1455                           	opt stack 0
  1456  000018                     DATAEE_WriteByte@bData:
  1457                           	opt stack 0
  1458  000018                     DATAEE_ReadByte@bAdd:
  1459                           	opt stack 0
  1460  000018                     toupper@c:
  1461                           	opt stack 0
  1462  000018                     IOCB4_SetInterruptHandler@InterruptHandler:
  1463                           	opt stack 0
  1464  000018                     IOCB5_SetInterruptHandler@InterruptHandler:
  1465                           	opt stack 0
  1466  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  1467                           	opt stack 0
  1468  000018                     crc8@dataArray:
  1469                           	opt stack 0
  1470  000018                     GetUint16FromBitArray@bitarray:
  1471                           	opt stack 0
  1472  000018                     Make32bitsArray@array:
  1473                           	opt stack 0
  1474  000018                     ___wmul@multiplier:
  1475                           	opt stack 0
  1476  000018                     ___awmod@dividend:
  1477                           	opt stack 0
  1478  000018                     memset@p1:
  1479                           	opt stack 0
  1480  000018                     ___ftpack@arg:
  1481                           	opt stack 0
  1482  000018                     ___ftge@ff1:
  1483                           	opt stack 0
  1484  000018                     ___ftneg@f1:
  1485                           	opt stack 0
  1486  000018                     frexp@value:
  1487                           	opt stack 0
  1488  000018                     FLASH_ReadByte@flashAddr:
  1489                           	opt stack 0
  1490  000018                     FLASH_EraseBlock@baseAddr:
  1491                           	opt stack 0
  1492  000018                     make8@data:
  1493                           	opt stack 0
  1494  000018                     ___lldiv@dividend:
  1495                           	opt stack 0
  1496  000018                     ___llmod@dividend:
  1497                           	opt stack 0
  1498                           
  1499                           ; 4 bytes @ 0x17
  1500  000018                     	ds	1
  1501  000019                     EepromRead@address:
  1502                           	opt stack 0
  1503  000019                     SwSpi_Data_Pin@phrType:
  1504                           	opt stack 0
  1505  000019                     SwSpi_Clk_Pin@phrType:
  1506                           	opt stack 0
  1507  000019                     SwSpi_Set_CE_Pin@phrType:
  1508                           	opt stack 0
  1509  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  1510                           	opt stack 0
  1511  000019                     DATAEE_WriteByte@bAdd:
  1512                           	opt stack 0
  1513  000019                     _isdigit$3329:
  1514                           	opt stack 0
  1515  000019                     _isspace$3332:
  1516                           	opt stack 0
  1517  000019                     _isupper$3335:
  1518                           	opt stack 0
  1519  000019                     WriteUartMessage@dataBuf:
  1520                           	opt stack 0
  1521  000019                     EUSART1_Read@readValue:
  1522                           	opt stack 0
  1523                           
  1524                           ; 2 bytes @ 0x18
  1525  000019                     	ds	1
  1526  00001A                     ??_ADC_GetConversion:
  1527  00001A                     ??_TMR0_Initialize:
  1528  00001A                     ?___lmul:
  1529                           	opt stack 0
  1530  00001A                     SWSPI_DAC_send_bits@data:
  1531                           	opt stack 0
  1532  00001A                     DATAEE_WriteByte@GIEBitValue:
  1533                           	opt stack 0
  1534  00001A                     isdigit@c:
  1535                           	opt stack 0
  1536  00001A                     isspace@c:
  1537                           	opt stack 0
  1538  00001A                     isupper@c:
  1539                           	opt stack 0
  1540  00001A                     crc8@dataSize:
  1541                           	opt stack 0
  1542  00001A                     GetUint16FromBitArray@numOfBits:
  1543                           	opt stack 0
  1544  00001A                     ___wmul@multiplicand:
  1545                           	opt stack 0
  1546  00001A                     ___awmod@divisor:
  1547                           	opt stack 0
  1548  00001A                     memset@c:
  1549                           	opt stack 0
  1550  00001A                     Make32bitsArray@data:
  1551                           	opt stack 0
  1552  00001A                     ___lmul@multiplier:
  1553                           	opt stack 0
  1554                           
  1555                           ; 4 bytes @ 0x19
  1556  00001A                     	ds	1
  1557  00001B                     ??_isalpha:
  1558  00001B                     BlinkErrorLeds@state:
  1559                           	opt stack 0
  1560  00001B                     BlinkOkLeds@state:
  1561                           	opt stack 0
  1562  00001B                     EepromWrite@data:
  1563                           	opt stack 0
  1564  00001B                     SWSPI_DAC_send_bits@count:
  1565                           	opt stack 0
  1566  00001B                     ___ftpack@exp:
  1567                           	opt stack 0
  1568  00001B                     WriteUartMessage@dataSize:
  1569                           	opt stack 0
  1570  00001B                     frexp@eptr:
  1571                           	opt stack 0
  1572  00001B                     ___ftge@ff2:
  1573                           	opt stack 0
  1574                           
  1575                           ; 3 bytes @ 0x1A
  1576  00001B                     	ds	1
  1577  00001C                     ??_GetUint16FromBitArray:
  1578  00001C                     ??_crc8:
  1579  00001C                     EepromWrite@address:
  1580                           	opt stack 0
  1581  00001C                     SWSPI_DAC_send_bits@phrType:
  1582                           	opt stack 0
  1583  00001C                     FLASH_EraseBlock@GIEBitValue:
  1584                           	opt stack 0
  1585  00001C                     ADC_GetConversion@channel:
  1586                           	opt stack 0
  1587  00001C                     make8@dataLocation:
  1588                           	opt stack 0
  1589  00001C                     ___awmod@counter:
  1590                           	opt stack 0
  1591  00001C                     ___ftpack@sign:
  1592                           	opt stack 0
  1593  00001C                     _isalpha$3326:
  1594                           	opt stack 0
  1595  00001C                     BlinkErrorLeds@idx:
  1596                           	opt stack 0
  1597  00001C                     BlinkOkLeds@idx:
  1598                           	opt stack 0
  1599  00001C                     ___wmul@product:
  1600                           	opt stack 0
  1601  00001C                     memset@n:
  1602                           	opt stack 0
  1603  00001C                     ___lldiv@divisor:
  1604                           	opt stack 0
  1605  00001C                     ___llmod@divisor:
  1606                           	opt stack 0
  1607                           
  1608                           ; 4 bytes @ 0x1B
  1609  00001C                     	ds	1
  1610  00001D                     ??_make8:
  1611  00001D                     ??___ftpack:
  1612  00001D                     ??_frexp:
  1613  00001D                     ??_WriteUartMessage:
  1614  00001D                     ___awmod@sign:
  1615                           	opt stack 0
  1616  00001D                     isalpha@c:
  1617                           	opt stack 0
  1618  00001D                     crc8@crc:
  1619                           	opt stack 0
  1620  00001D                     FLASH_WriteBlock@writeAddr:
  1621                           	opt stack 0
  1622                           
  1623                           ; 4 bytes @ 0x1C
  1624  00001D                     	ds	1
  1625  00001E                     ??_Make32bitsArray:
  1626  00001E                     ??___ftge:
  1627  00001E                     WriteUartMessage@idx:
  1628                           	opt stack 0
  1629  00001E                     memset@p:
  1630                           	opt stack 0
  1631  00001E                     ___lmul@multiplicand:
  1632                           	opt stack 0
  1633                           
  1634                           ; 4 bytes @ 0x1D
  1635  00001E                     	ds	1
  1636  00001F                     crc8@i:
  1637                           	opt stack 0
  1638  00001F                     GetUint16FromBitArray@res:
  1639                           	opt stack 0
  1640                           
  1641                           ; 2 bytes @ 0x1E
  1642  00001F                     	ds	1
  1643  000020                     ?___awtoft:
  1644                           	opt stack 0
  1645  000020                     ?___lltoft:
  1646                           	opt stack 0
  1647  000020                     ?___lwtoft:
  1648                           	opt stack 0
  1649  000020                     ___llmod@counter:
  1650                           	opt stack 0
  1651  000020                     ZeroArray@array:
  1652                           	opt stack 0
  1653  000020                     FillArray@array:
  1654                           	opt stack 0
  1655  000020                     Make32bitsArray@idx:
  1656                           	opt stack 0
  1657  000020                     ___awtoft@c:
  1658                           	opt stack 0
  1659  000020                     ___lwtoft@c:
  1660                           	opt stack 0
  1661  000020                     ___lldiv@quotient:
  1662                           	opt stack 0
  1663  000020                     ___lltoft@c:
  1664                           	opt stack 0
  1665                           
  1666                           ; 4 bytes @ 0x1F
  1667  000020                     	ds	1
  1668  000021                     FLASH_WriteBlock@flashWrBufPtr:
  1669                           	opt stack 0
  1670  000021                     GetUint16FromBitArray@i:
  1671                           	opt stack 0
  1672  000021                     StoreIntInEeprom@data:
  1673                           	opt stack 0
  1674                           
  1675                           ; 4 bytes @ 0x20
  1676  000021                     	ds	1
  1677  000022                     ZeroArray@size:
  1678                           	opt stack 0
  1679  000022                     FillArray@size:
  1680                           	opt stack 0
  1681  000022                     ___lmul@product:
  1682                           	opt stack 0
  1683                           
  1684                           ; 4 bytes @ 0x21
  1685  000022                     	ds	1
  1686  000023                     ??_FLASH_WriteBlock:
  1687  000023                     ___awtoft@sign:
  1688                           	opt stack 0
  1689                           
  1690                           ; 1 bytes @ 0x22
  1691  000023                     	ds	1
  1692  000024                     ??_GetMcuFwVersion:
  1693  000024                     ??_FlashReadCondition:
  1694  000024                     ??___lltoft:
  1695  000024                     SendAckMessage@inRequest:
  1696                           	opt stack 0
  1697  000024                     FillArray@value:
  1698                           	opt stack 0
  1699  000024                     ___lldiv@counter:
  1700                           	opt stack 0
  1701                           
  1702                           ; 1 bytes @ 0x23
  1703  000024                     	ds	1
  1704  000025                     ??_GetMcuRunTime:
  1705  000025                     SendAckMessage@inGroup:
  1706                           	opt stack 0
  1707  000025                     StoreIntInEeprom@address:
  1708                           	opt stack 0
  1709  000025                     SWSPI_Synth_send_bits@data:
  1710                           	opt stack 0
  1711                           
  1712                           ; 4 bytes @ 0x24
  1713  000025                     	ds	1
  1714  000026                     ?_strtol:
  1715                           	opt stack 0
  1716  000026                     StoreIntInEeprom@numOfByes:
  1717                           	opt stack 0
  1718  000026                     strtol@s:
  1719                           	opt stack 0
  1720  000026                     SendAckMessage@TxMsg:
  1721                           	opt stack 0
  1722                           
  1723                           ; 6 bytes @ 0x25
  1724  000026                     	ds	1
  1725  000027                     FLASH_WriteBlock@blockStartAddr:
  1726                           	opt stack 0
  1727                           
  1728                           ; 4 bytes @ 0x26
  1729  000027                     	ds	1
  1730  000028                     StoreIntInEeprom@val:
  1731                           	opt stack 0
  1732  000028                     ___lltoft@exp:
  1733                           	opt stack 0
  1734  000028                     strtol@endptr:
  1735                           	opt stack 0
  1736  000028                     FlashReadCondition@TxMsg:
  1737                           	opt stack 0
  1738                           
  1739                           ; 9 bytes @ 0x27
  1740  000028                     	ds	1
  1741  000029                     ?___ftdiv:
  1742                           	opt stack 0
  1743  000029                     StoreIntInEeprom@idx:
  1744                           	opt stack 0
  1745  000029                     ___ftdiv@f1:
  1746                           	opt stack 0
  1747  000029                     SWSPI_send_word@data:
  1748                           	opt stack 0
  1749                           
  1750                           ; 4 bytes @ 0x28
  1751  000029                     	ds	1
  1752  00002A                     strtol@base:
  1753                           	opt stack 0
  1754                           
  1755                           ; 2 bytes @ 0x29
  1756  00002A                     	ds	1
  1757  00002B                     FLASH_WriteBlock@GIEBitValue:
  1758                           	opt stack 0
  1759                           
  1760                           ; 1 bytes @ 0x2A
  1761  00002B                     	ds	1
  1762  00002C                     ??_strtol:
  1763  00002C                     ??_testLeds:
  1764  00002C                     FLASH_WriteBlock@i:
  1765                           	opt stack 0
  1766  00002C                     SetChannelMode@data:
  1767                           	opt stack 0
  1768  00002C                     ___ftdiv@f2:
  1769                           	opt stack 0
  1770                           
  1771                           ; 3 bytes @ 0x2B
  1772  00002C                     	ds	1
  1773  00002D                     SWSPI_send_word@dataSize:
  1774                           	opt stack 0
  1775  00002D                     testLeds@idx:
  1776                           	opt stack 0
  1777  00002D                     FlashSampleWrite@sampleData:
  1778                           	opt stack 0
  1779                           
  1780                           ; 2 bytes @ 0x2C
  1781  00002D                     	ds	1
  1782  00002E                     
  1783                           ; 1 bytes @ 0x2D
  1784  00002E                     	ds	1
  1785  00002F                     ??_eval_poly:
  1786  00002F                     FlashSampleWrite@channelNum:
  1787                           	opt stack 0
  1788  00002F                     ___altoft@exp:
  1789                           	opt stack 0
  1790                           
  1791                           ; 1 bytes @ 0x2E
  1792  00002F                     	ds	1
  1793  000030                     ___altoft@sign:
  1794                           	opt stack 0
  1795                           
  1796                           ; 1 bytes @ 0x2F
  1797  000030                     	ds	1
  1798  000031                     tblptru	equ	0xFF8
  1799                           tblptrh	equ	0xFF7
  1800                           tblptrl	equ	0xFF6
  1801                           tablat	equ	0xFF5
  1802                           postinc0	equ	0xFEE
  1803                           wreg	equ	0xFE8
  1804                           postdec1	equ	0xFE5
  1805                           fsr1l	equ	0xFE1
  1806                           
  1807                           ; 1 bytes @ 0x30
  1808 ;;
  1809 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1810 ;;
  1811 ;; *************** function _main *****************
  1812 ;; Defined at:
  1813 ;;		line 13 in file "main.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;		None
  1816 ;; Auto vars:     Size  Location     Type
  1817 ;;		None
  1818 ;; Return value:  Size  Location     Type
  1819 ;;                  1    wreg      void 
  1820 ;; Registers used:
  1821 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1822 ;; Tracked objects:
  1823 ;;		On entry : 0/0
  1824 ;;		On exit  : 0/0
  1825 ;;		Unchanged: 0/0
  1826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1827 ;;      Params:         0       0       0       0       0       0       0
  1828 ;;      Locals:         0       0       0       0       0       0       0
  1829 ;;      Temps:          0       0       0       0       0       0       0
  1830 ;;      Totals:         0       0       0       0       0       0       0
  1831 ;;Total ram usage:        0 bytes
  1832 ;; Hardware stack levels required when called:   14
  1833 ;; This function calls:
  1834 ;;		_AdcConvert
  1835 ;;		_BlinkErrorLeds
  1836 ;;		_BlinkOkLeds
  1837 ;;		_CheckFlashPrecentage
  1838 ;;		_InitSystemApplicationManagers
  1839 ;;		_SendSystemStartAck
  1840 ;;		_SetMcuRunTime
  1841 ;;		_SetMcuSystem
  1842 ;;		_SynthLdDetect
  1843 ;;		_keepAliveSignalLed
  1844 ;;		_keepAliveSignalUart
  1845 ;;		_readUartMessage
  1846 ;; This function is called by:
  1847 ;;		Startup code after reset
  1848 ;; This function uses a non-reentrant model
  1849 ;;
  1850                           
  1851                           	psect	text0
  1852  0034EE                     __ptext0:
  1853                           	opt stack 0
  1854  0034EE                     _main:
  1855                           	opt stack 17
  1856                           
  1857                           ;main.c: 16: SetMcuSystem();
  1858                           
  1859                           ;incstack = 0
  1860  0034EE  ECD4  F021         	call	_SetMcuSystem	;wreg free
  1861                           
  1862                           ;main.c: 19: InitSystemApplicationManagers();
  1863  0034F2  EC6A  F021         	call	_InitSystemApplicationManagers	;wreg free
  1864                           
  1865                           ;main.c: 22: SendSystemStartAck();
  1866  0034F6  ECCE  F021         	call	_SendSystemStartAck	;wreg free
  1867                           
  1868                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  1869  0034FA  0E03               	movlw	3
  1870  0034FC  ECE6  F01B         	call	_BlinkOkLeds
  1871  003500                     
  1872                           ;main.c: 28: {
  1873                           ;main.c: 29: readUartMessage();
  1874  003500  ECE6  F00A         	call	_readUartMessage	;wreg free
  1875                           
  1876                           ;main.c: 31: if (Timer0_OneSec == 1)
  1877  003504  0100               	movlb	0	; () banked
  1878  003506  05F7               	decf	_Timer0_OneSec& (0+255),w,b	;volatile
  1879  003508  A4D8               	btfss	status,2,c
  1880  00350A  D006               	goto	l1586
  1881                           
  1882                           ; BSR set to: 0
  1883                           ;main.c: 32: {
  1884                           ;main.c: 33: SetMcuRunTime();
  1885  00350C  ECE5  F01D         	call	_SetMcuRunTime	;wreg free
  1886                           
  1887                           ;main.c: 34: Timer0_OneSec = 0;
  1888  003510  0E00               	movlw	0
  1889  003512  0100               	movlb	0	; () banked
  1890  003514  6FF7               	movwf	_Timer0_OneSec& (0+255),b	;volatile
  1891                           
  1892                           ;main.c: 35: }
  1893  003516  D7F4               	goto	l1585
  1894  003518                     l1586:
  1895                           
  1896                           ; BSR set to: 0
  1897                           ;main.c: 36: else if (Timer0_Sampling == 1)
  1898                           
  1899                           ; BSR set to: 0
  1900  003518  05F9               	decf	_Timer0_Sampling& (0+255),w,b	;volatile
  1901  00351A  A4D8               	btfss	status,2,c
  1902  00351C  D010               	goto	l1588
  1903                           
  1904                           ; BSR set to: 0
  1905                           ;main.c: 37: {
  1906                           ;main.c: 38: keepAliveSignalLed();
  1907  00351E  EC53  F021         	call	_keepAliveSignalLed	;wreg free
  1908                           
  1909                           ;main.c: 40: if(1 == CheckFlashPrecentage())
  1910  003522  ECFE  F016         	call	_CheckFlashPrecentage	;wreg free
  1911  003526  06E8               	decf	wreg,f,c
  1912  003528  A4D8               	btfss	status,2,c
  1913  00352A  D003               	goto	l1589
  1914                           
  1915                           ;main.c: 41: {
  1916                           ;main.c: 42: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  1917  00352C  0E02               	movlw	2
  1918  00352E  ECB7  F01B         	call	_BlinkErrorLeds
  1919  003532                     l1589:
  1920                           
  1921                           ;main.c: 43: }
  1922                           ;main.c: 46: AdcConvert();
  1923  003532  ECE1  F007         	call	_AdcConvert	;wreg free
  1924                           
  1925                           ;main.c: 47: Timer0_Sampling = 0;
  1926  003536  0E00               	movlw	0
  1927  003538  0100               	movlb	0	; () banked
  1928  00353A  6FF9               	movwf	_Timer0_Sampling& (0+255),b	;volatile
  1929                           
  1930                           ;main.c: 48: }
  1931  00353C  D7E1               	goto	l1585
  1932  00353E                     l1588:
  1933                           
  1934                           ; BSR set to: 0
  1935                           ;main.c: 49: else if (Timer0_KeepAlive == 1)
  1936                           
  1937                           ; BSR set to: 0
  1938  00353E  05F8               	decf	_Timer0_KeepAlive& (0+255),w,b	;volatile
  1939  003540  A4D8               	btfss	status,2,c
  1940  003542  D006               	goto	l1591
  1941                           
  1942                           ; BSR set to: 0
  1943                           ;main.c: 50: {
  1944                           ;main.c: 51: keepAliveSignalUart();
  1945  003544  ECC8  F021         	call	_keepAliveSignalUart	;wreg free
  1946                           
  1947                           ;main.c: 52: Timer0_KeepAlive = 0;
  1948  003548  0E00               	movlw	0
  1949  00354A  0100               	movlb	0	; () banked
  1950  00354C  6FF8               	movwf	_Timer0_KeepAlive& (0+255),b	;volatile
  1951                           
  1952                           ;main.c: 53: }
  1953  00354E  D7D8               	goto	l1585
  1954  003550                     l1591:
  1955                           
  1956                           ; BSR set to: 0
  1957                           ;main.c: 54: else if (Timer0_SynthLd == 1)
  1958                           
  1959                           ; BSR set to: 0
  1960  003550  05FA               	decf	_Timer0_SynthLd& (0+255),w,b	;volatile
  1961  003552  A4D8               	btfss	status,2,c
  1962  003554  D7D5               	goto	l1585
  1963                           
  1964                           ; BSR set to: 0
  1965                           ;main.c: 55: {
  1966                           ;main.c: 56: SynthLdDetect();
  1967  003556  EC00  F015         	call	_SynthLdDetect	;wreg free
  1968                           
  1969                           ;main.c: 57: Timer0_SynthLd = 0;
  1970  00355A  0E00               	movlw	0
  1971  00355C  0100               	movlb	0	; () banked
  1972  00355E  6FFA               	movwf	_Timer0_SynthLd& (0+255),b	;volatile
  1973                           
  1974                           ; BSR set to: 0
  1975                           
  1976                           ; BSR set to: 0
  1977                           
  1978                           ; BSR set to: 0
  1979                           
  1980                           ; BSR set to: 0
  1981                           
  1982                           ; BSR set to: 0
  1983  003560  D7CF               	goto	l1585
  1984  003562                     __end_of_main:
  1985                           	opt stack 0
  1986                           tblptru	equ	0xFF8
  1987                           tblptrh	equ	0xFF7
  1988                           tblptrl	equ	0xFF6
  1989                           tablat	equ	0xFF5
  1990                           postinc0	equ	0xFEE
  1991                           wreg	equ	0xFE8
  1992                           postdec1	equ	0xFE5
  1993                           fsr1l	equ	0xFE1
  1994                           status	equ	0xFD8
  1995                           
  1996 ;; *************** function _readUartMessage *****************
  1997 ;; Defined at:
  1998 ;;		line 28 in file "EusartApp.c"
  1999 ;; Parameters:    Size  Location     Type
  2000 ;;		None
  2001 ;; Auto vars:     Size  Location     Type
  2002 ;;  idx             2  141[BANK0 ] int 
  2003 ;;  chRec           1  143[BANK0 ] unsigned char 
  2004 ;; Return value:  Size  Location     Type
  2005 ;;                  1    wreg      void 
  2006 ;; Registers used:
  2007 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2008 ;; Tracked objects:
  2009 ;;		On entry : 0/0
  2010 ;;		On exit  : 0/0
  2011 ;;		Unchanged: 0/0
  2012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2013 ;;      Params:         0       0       0       0       0       0       0
  2014 ;;      Locals:         0       3       0       0       0       0       0
  2015 ;;      Temps:          0       4       0       0       0       0       0
  2016 ;;      Totals:         0       7       0       0       0       0       0
  2017 ;;Total ram usage:        7 bytes
  2018 ;; Hardware stack levels used:    1
  2019 ;; Hardware stack levels required when called:   13
  2020 ;; This function calls:
  2021 ;;		_EUSART1_Read
  2022 ;;		_GroupAdc
  2023 ;;		_GroupControlMcu
  2024 ;;		_GroupDAC
  2025 ;;		_GroupFlashMemory
  2026 ;;		_GroupStatusAndVersion
  2027 ;;		_GroupSynthesizers
  2028 ;;		_InitRxMessageParams
  2029 ;;		_ZeroArray
  2030 ;;		_crc8
  2031 ;; This function is called by:
  2032 ;;		_main
  2033 ;; This function uses a non-reentrant model
  2034 ;;
  2035                           
  2036                           	psect	text1
  2037  0015CC                     __ptext1:
  2038                           	opt stack 0
  2039  0015CC                     _readUartMessage:
  2040                           	opt stack 17
  2041                           
  2042                           ;EusartApp.c: 31: uint8_t chRec = (0);
  2043                           
  2044                           ; BSR set to: 0
  2045                           ;incstack = 0
  2046  0015CC  0E00               	movlw	0
  2047  0015CE  0100               	movlb	0	; () banked
  2048  0015D0  6FEF               	movwf	readUartMessage@chRec& (0+255),b
  2049                           
  2050                           ;EusartApp.c: 32: switch(cState)
  2051  0015D2  D0D3               	goto	l202
  2052  0015D4                     
  2053                           ; BSR set to: 0
  2054                           ;EusartApp.c: 37: if(eusart1RxCount > (4))
  2055                           
  2056                           ; BSR set to: 0
  2057  0015D4  0E04               	movlw	4
  2058  0015D6  65F5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2059  0015D8  0012               	return	
  2060                           
  2061                           ; BSR set to: 0
  2062                           ;EusartApp.c: 38: {
  2063                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  2064  0015DA  0E01               	movlw	1
  2065  0015DC  6FF4               	movwf	_cState& (0+255),b
  2066                           
  2067                           ; BSR set to: 0
  2068                           ;EusartApp.c: 40: }
  2069                           ;EusartApp.c: 41: return;
  2070                           
  2071                           ; BSR set to: 0
  2072  0015DE  0012               	return	
  2073  0015E0                     
  2074                           ; BSR set to: 0
  2075                           ;EusartApp.c: 45: InitRxMessageParams();
  2076                           
  2077                           ; BSR set to: 0
  2078  0015E0  EC47  F020         	call	_InitRxMessageParams	;wreg free
  2079                           
  2080                           ;EusartApp.c: 46: msgCount = 0;
  2081  0015E4  0E00               	movlw	0
  2082  0015E6  0100               	movlb	0	; () banked
  2083  0015E8  6FF0               	movwf	_msgCount& (0+255),b
  2084                           
  2085                           ; BSR set to: 0
  2086                           ;EusartApp.c: 47: if(eusart1RxCount > 1)
  2087  0015EA  0E01               	movlw	1
  2088  0015EC  65F5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2089  0015EE  D00D               	goto	l207
  2090                           
  2091                           ; BSR set to: 0
  2092                           ;EusartApp.c: 48: {
  2093                           ;EusartApp.c: 49: chRec = EUSART1_Read();
  2094  0015F0  ECC3  F01D         	call	_EUSART1_Read	;wreg free
  2095  0015F4  0100               	movlb	0	; () banked
  2096  0015F6  6FEF               	movwf	readUartMessage@chRec& (0+255),b
  2097                           
  2098                           ; BSR set to: 0
  2099                           ;EusartApp.c: 50: rxMsgQueue[(0)] = chRec;
  2100  0015F8  C0EF  F190         	movff	readUartMessage@chRec,_rxMsgQueue
  2101                           
  2102                           ; BSR set to: 0
  2103                           ;EusartApp.c: 51: if(chRec == (0x24))
  2104  0015FC  0E24               	movlw	36
  2105  0015FE  19EF               	xorwf	readUartMessage@chRec& (0+255),w,b
  2106  001600  A4D8               	btfss	status,2,c
  2107  001602  0012               	return	
  2108                           
  2109                           ; BSR set to: 0
  2110                           ;EusartApp.c: 52: {
  2111                           ;EusartApp.c: 53: cState = READ_GROUP;
  2112  001604  0E02               	movlw	2
  2113  001606  6FF4               	movwf	_cState& (0+255),b
  2114                           
  2115                           ; BSR set to: 0
  2116                           ;EusartApp.c: 54: }
  2117                           ;EusartApp.c: 55: }
  2118  001608  0012               	return	
  2119  00160A                     l207:
  2120                           
  2121                           ; BSR set to: 0
  2122                           ;EusartApp.c: 56: else
  2123                           ;EusartApp.c: 57: {
  2124                           ;EusartApp.c: 58: cState = START_RX_MESSAGE_READ;
  2125                           
  2126                           ; BSR set to: 0
  2127  00160A  0E00               	movlw	0
  2128  00160C  6FF4               	movwf	_cState& (0+255),b
  2129                           
  2130                           ; BSR set to: 0
  2131                           ;EusartApp.c: 59: }
  2132                           ;EusartApp.c: 61: break;
  2133  00160E  0012               	return	
  2134  001610                     
  2135                           ; BSR set to: 0
  2136                           ;EusartApp.c: 65: if(eusart1RxCount > 1)
  2137                           
  2138                           ; BSR set to: 0
  2139  001610  0E01               	movlw	1
  2140  001612  65F5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2141  001614  0012               	return	
  2142                           
  2143                           ; BSR set to: 0
  2144                           ;EusartApp.c: 66: {
  2145                           ;EusartApp.c: 67: group = EUSART1_Read();
  2146  001616  ECC3  F01D         	call	_EUSART1_Read	;wreg free
  2147  00161A  0100               	movlb	0	; () banked
  2148  00161C  6FF3               	movwf	_group& (0+255),b
  2149                           
  2150                           ; BSR set to: 0
  2151                           ;EusartApp.c: 68: rxMsgQueue[(1)] = group;
  2152  00161E  C0F3  F191         	movff	_group,_rxMsgQueue+1
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;EusartApp.c: 69: cState = READ_REQUEST;
  2156  001622  0E03               	movlw	3
  2157  001624  6FF4               	movwf	_cState& (0+255),b
  2158                           
  2159                           ; BSR set to: 0
  2160                           ;EusartApp.c: 70: }
  2161                           ;EusartApp.c: 71: break;
  2162  001626  0012               	return	
  2163  001628                     
  2164                           ; BSR set to: 0
  2165                           ;EusartApp.c: 75: if(eusart1RxCount > 1)
  2166                           
  2167                           ; BSR set to: 0
  2168  001628  0E01               	movlw	1
  2169  00162A  65F5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2170  00162C  0012               	return	
  2171                           
  2172                           ; BSR set to: 0
  2173                           ;EusartApp.c: 76: {
  2174                           ;EusartApp.c: 77: request = EUSART1_Read();
  2175  00162E  ECC3  F01D         	call	_EUSART1_Read	;wreg free
  2176  001632  0100               	movlb	0	; () banked
  2177  001634  6FF2               	movwf	_request& (0+255),b
  2178                           
  2179                           ; BSR set to: 0
  2180                           ;EusartApp.c: 78: rxMsgQueue[(2)] = request;
  2181  001636  C0F2  F192         	movff	_request,_rxMsgQueue+2
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;EusartApp.c: 79: cState = READ_DATA_SIZE;
  2185  00163A  0E04               	movlw	4
  2186  00163C  6FF4               	movwf	_cState& (0+255),b
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;EusartApp.c: 80: }
  2190                           ;EusartApp.c: 81: break;
  2191  00163E  0012               	return	
  2192  001640                     
  2193                           ; BSR set to: 0
  2194                           ;EusartApp.c: 84: if(eusart1RxCount > 1)
  2195                           
  2196                           ; BSR set to: 0
  2197  001640  0E01               	movlw	1
  2198  001642  65F5               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2199  001644  0012               	return	
  2200                           
  2201                           ; BSR set to: 0
  2202                           ;EusartApp.c: 85: {
  2203                           ;EusartApp.c: 86: dataSize = EUSART1_Read();
  2204  001646  ECC3  F01D         	call	_EUSART1_Read	;wreg free
  2205  00164A  0100               	movlb	0	; () banked
  2206  00164C  6FF1               	movwf	_dataSize& (0+255),b
  2207                           
  2208                           ; BSR set to: 0
  2209                           ;EusartApp.c: 87: rxMsgQueue[(3)] = dataSize;
  2210  00164E  C0F1  F193         	movff	_dataSize,_rxMsgQueue+3
  2211                           
  2212                           ; BSR set to: 0
  2213                           ;EusartApp.c: 88: if(dataSize == 0)
  2214  001652  51F1               	movf	_dataSize& (0+255),w,b
  2215  001654  A4D8               	btfss	status,2,c
  2216  001656  D003               	goto	l217
  2217                           
  2218                           ; BSR set to: 0
  2219                           ;EusartApp.c: 89: {
  2220                           ;EusartApp.c: 90: cState = CHECK_CRC;
  2221  001658  0E06               	movlw	6
  2222  00165A  6FF4               	movwf	_cState& (0+255),b
  2223                           
  2224                           ;EusartApp.c: 91: }
  2225  00165C  0012               	return	
  2226  00165E                     l217:
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;EusartApp.c: 92: else
  2230                           ;EusartApp.c: 93: {
  2231                           ;EusartApp.c: 94: cState = READ_DATA;
  2232                           
  2233                           ; BSR set to: 0
  2234  00165E  0E05               	movlw	5
  2235  001660  6FF4               	movwf	_cState& (0+255),b
  2236                           
  2237                           ; BSR set to: 0
  2238                           ;EusartApp.c: 95: }
  2239                           ;EusartApp.c: 97: }
  2240                           ;EusartApp.c: 99: break;
  2241                           
  2242                           ; BSR set to: 0
  2243  001662  0012               	return	
  2244  001664                     
  2245                           ; BSR set to: 0
  2246                           ;EusartApp.c: 103: if(eusart1RxCount >= dataSize)
  2247                           
  2248                           ; BSR set to: 0
  2249  001664  51F1               	movf	_dataSize& (0+255),w,b
  2250  001666  5DF5               	subwf	_eusart1RxCount& (0+255),w,b	;volatile
  2251  001668  A0D8               	btfss	status,0,c
  2252  00166A  0012               	return	
  2253                           
  2254                           ; BSR set to: 0
  2255                           ;EusartApp.c: 104: {
  2256                           ;EusartApp.c: 105: ZeroArray(rxMsgData, (0x14));
  2257  00166C  0E7C               	movlw	low _rxMsgData
  2258  00166E  6E20               	movwf	ZeroArray@array,c
  2259  001670  0E01               	movlw	high _rxMsgData
  2260  001672  6E21               	movwf	ZeroArray@array+1,c
  2261  001674  0E00               	movlw	0
  2262  001676  6E23               	movwf	ZeroArray@size+1,c
  2263  001678  0E14               	movlw	20
  2264  00167A  6E22               	movwf	ZeroArray@size,c
  2265  00167C  EC1B  F021         	call	_ZeroArray	;wreg free
  2266                           
  2267                           ;EusartApp.c: 107: for(int idx = 0; idx < dataSize; idx++)
  2268  001680  0E00               	movlw	0
  2269  001682  0100               	movlb	0	; () banked
  2270  001684  6FEE               	movwf	(readUartMessage@idx+1)& (0+255),b
  2271  001686  0E00               	movlw	0
  2272  001688  6FED               	movwf	readUartMessage@idx& (0+255),b
  2273  00168A  D01E               	goto	l221
  2274  00168C                     
  2275                           ; BSR set to: 0
  2276                           ;EusartApp.c: 108: {
  2277                           ;EusartApp.c: 109: chRec = EUSART1_Read();
  2278                           
  2279                           ; BSR set to: 0
  2280  00168C  ECC3  F01D         	call	_EUSART1_Read	;wreg free
  2281  001690  0100               	movlb	0	; () banked
  2282  001692  6FEF               	movwf	readUartMessage@chRec& (0+255),b
  2283                           
  2284                           ; BSR set to: 0
  2285                           ;EusartApp.c: 110: rxMsgQueue[(0x4) + msgCount++] = chRec;
  2286  001694  51F0               	movf	_msgCount& (0+255),w,b
  2287  001696  6FE9               	movwf	??_readUartMessage& (0+255),b
  2288  001698  6BEA               	clrf	(??_readUartMessage+1)& (0+255),b
  2289  00169A  0E04               	movlw	4
  2290  00169C  27E9               	addwf	??_readUartMessage& (0+255),f,b
  2291  00169E  0E00               	movlw	0
  2292  0016A0  23EA               	addwfc	(??_readUartMessage+1)& (0+255),f,b
  2293  0016A2  0E90               	movlw	low _rxMsgQueue
  2294  0016A4  25E9               	addwf	??_readUartMessage& (0+255),w,b
  2295  0016A6  6ED9               	movwf	fsr2l,c
  2296  0016A8  0E01               	movlw	high _rxMsgQueue
  2297  0016AA  21EA               	addwfc	(??_readUartMessage+1)& (0+255),w,b
  2298  0016AC  6EDA               	movwf	fsr2h,c
  2299  0016AE  C0EF  FFDF         	movff	readUartMessage@chRec,indf2
  2300                           
  2301                           ; BSR set to: 0
  2302  0016B2  2BF0               	incf	_msgCount& (0+255),f,b
  2303                           
  2304                           ; BSR set to: 0
  2305                           ;EusartApp.c: 111: rxMsgData[idx] = chRec;
  2306  0016B4  0E7C               	movlw	low _rxMsgData
  2307  0016B6  25ED               	addwf	readUartMessage@idx& (0+255),w,b
  2308  0016B8  6ED9               	movwf	fsr2l,c
  2309  0016BA  0E01               	movlw	high _rxMsgData
  2310  0016BC  21EE               	addwfc	(readUartMessage@idx+1)& (0+255),w,b
  2311  0016BE  6EDA               	movwf	fsr2h,c
  2312  0016C0  C0EF  FFDF         	movff	readUartMessage@chRec,indf2
  2313                           
  2314                           ; BSR set to: 0
  2315  0016C4  4BED               	infsnz	readUartMessage@idx& (0+255),f,b
  2316  0016C6  2BEE               	incf	(readUartMessage@idx+1)& (0+255),f,b
  2317  0016C8                     l221:
  2318                           
  2319                           ; BSR set to: 0
  2320                           
  2321                           ; BSR set to: 0
  2322  0016C8  51F1               	movf	_dataSize& (0+255),w,b
  2323  0016CA  6FE9               	movwf	??_readUartMessage& (0+255),b
  2324  0016CC  6BEA               	clrf	(??_readUartMessage+1)& (0+255),b
  2325  0016CE  51E9               	movf	??_readUartMessage& (0+255),w,b
  2326  0016D0  5DED               	subwf	readUartMessage@idx& (0+255),w,b
  2327  0016D2  51EE               	movf	(readUartMessage@idx+1)& (0+255),w,b
  2328  0016D4  0A80               	xorlw	128
  2329  0016D6  6FEB               	movwf	(??_readUartMessage+2)& (0+255),b
  2330  0016D8  51EA               	movf	(??_readUartMessage+1)& (0+255),w,b
  2331  0016DA  0A80               	xorlw	128
  2332  0016DC  59EB               	subwfb	(??_readUartMessage+2)& (0+255),w,b
  2333  0016DE  A0D8               	btfss	status,0,c
  2334  0016E0  D7D5               	goto	l222
  2335                           
  2336                           ; BSR set to: 0
  2337                           ;EusartApp.c: 112: }
  2338                           ;EusartApp.c: 114: cState = CHECK_CRC;
  2339                           
  2340                           ; BSR set to: 0
  2341  0016E2  0E06               	movlw	6
  2342  0016E4  6FF4               	movwf	_cState& (0+255),b
  2343                           
  2344                           ; BSR set to: 0
  2345                           ;EusartApp.c: 115: }
  2346                           ;EusartApp.c: 116: break;
  2347  0016E6  0012               	return	
  2348  0016E8                     
  2349                           ; BSR set to: 0
  2350                           ;EusartApp.c: 119: if(eusart1RxCount >= 1)
  2351                           
  2352                           ; BSR set to: 0
  2353  0016E8  51F5               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  2354  0016EA  B4D8               	btfsc	status,2,c
  2355  0016EC  0012               	return	
  2356                           
  2357                           ; BSR set to: 0
  2358                           ;EusartApp.c: 120: {
  2359                           ;EusartApp.c: 121: crcGiven = EUSART1_Read();
  2360  0016EE  ECC3  F01D         	call	_EUSART1_Read	;wreg free
  2361  0016F2  6E3B               	movwf	_crcGiven,c
  2362                           
  2363                           ;EusartApp.c: 122: crcCalc = crc8(rxMsgQueue, (0x4) + msgCount);
  2364  0016F4  0E90               	movlw	low _rxMsgQueue
  2365  0016F6  6E18               	movwf	crc8@dataArray,c
  2366  0016F8  0E01               	movlw	high _rxMsgQueue
  2367  0016FA  6E19               	movwf	crc8@dataArray+1,c
  2368  0016FC  0E04               	movlw	4
  2369  0016FE  0100               	movlb	0	; () banked
  2370  001700  25F0               	addwf	_msgCount& (0+255),w,b
  2371  001702  6E1A               	movwf	crc8@dataSize,c
  2372  001704  6A1B               	clrf	crc8@dataSize+1,c
  2373  001706  0E00               	movlw	0
  2374  001708  221B               	addwfc	crc8@dataSize+1,f,c
  2375  00170A  EC9C  F01D         	call	_crc8	;wreg free
  2376  00170E  6E3C               	movwf	_crcCalc,c
  2377                           
  2378                           ;EusartApp.c: 124: if(crcGiven == crcCalc)
  2379  001710  503C               	movf	_crcCalc,w,c
  2380  001712  183B               	xorwf	_crcGiven,w,c
  2381  001714  A4D8               	btfss	status,2,c
  2382  001716  D004               	goto	l226
  2383                           
  2384                           ;EusartApp.c: 125: {
  2385                           ;EusartApp.c: 126: cState = JUMP_FUNCTION;
  2386  001718  0E07               	movlw	7
  2387  00171A  0100               	movlb	0	; () banked
  2388  00171C  6FF4               	movwf	_cState& (0+255),b
  2389                           
  2390                           ;EusartApp.c: 127: }
  2391  00171E  0012               	return	
  2392  001720                     l226:
  2393                           
  2394                           ;EusartApp.c: 128: else
  2395                           ;EusartApp.c: 129: {
  2396                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  2397                           
  2398                           ; BSR set to: 0
  2399  001720  0E00               	movlw	0
  2400  001722  0100               	movlb	0	; () banked
  2401  001724  6FF4               	movwf	_cState& (0+255),b
  2402                           
  2403                           ; BSR set to: 0
  2404                           ;EusartApp.c: 131: }
  2405                           ;EusartApp.c: 132: }
  2406                           ;EusartApp.c: 133: break;
  2407                           
  2408                           ; BSR set to: 0
  2409  001726  0012               	return	
  2410  001728                     
  2411                           ; BSR set to: 0
  2412                           ;EusartApp.c: 136: groupsArray[group - 1](request, rxMsgData);
  2413                           
  2414                           ; BSR set to: 0
  2415  001728  0EFE               	movlw	254
  2416  00172A  6FE9               	movwf	??_readUartMessage& (0+255),b
  2417  00172C  0EFF               	movlw	255
  2418  00172E  6FEA               	movwf	(??_readUartMessage+1)& (0+255),b
  2419  001730  51F3               	movf	_group& (0+255),w,b
  2420  001732  6FEB               	movwf	(??_readUartMessage+2)& (0+255),b
  2421  001734  6BEC               	clrf	(??_readUartMessage+3)& (0+255),b
  2422  001736  90D8               	bcf	status,0,c
  2423  001738  37EB               	rlcf	(??_readUartMessage+2)& (0+255),f,b
  2424  00173A  37EC               	rlcf	(??_readUartMessage+3)& (0+255),f,b
  2425  00173C  51E9               	movf	??_readUartMessage& (0+255),w,b
  2426  00173E  27EB               	addwf	(??_readUartMessage+2)& (0+255),f,b
  2427  001740  51EA               	movf	(??_readUartMessage+1)& (0+255),w,b
  2428  001742  23EC               	addwfc	(??_readUartMessage+3)& (0+255),f,b
  2429  001744  0EBC               	movlw	low _groupsArray
  2430  001746  25EB               	addwf	(??_readUartMessage+2)& (0+255),w,b
  2431  001748  6ED9               	movwf	fsr2l,c
  2432  00174A  0E01               	movlw	high _groupsArray
  2433  00174C  21EC               	addwfc	(??_readUartMessage+3)& (0+255),w,b
  2434  00174E  6EDA               	movwf	fsr2h,c
  2435  001750  D801               	call	u8908
  2436  001752  D00F               	goto	u8909
  2437  001754                     u8908:
  2438  001754  0005               	push	
  2439  001756  6EFA               	movwf	pclath,c
  2440  001758  50DE               	movf	postinc2,w,c
  2441  00175A  6EFD               	movwf	tosl,c
  2442  00175C  50DE               	movf	postinc2,w,c
  2443  00175E  6EFE               	movwf	tosh,c
  2444  001760  50F8               	movf	tblptru,w,c
  2445  001762  6EFF               	movwf	tosu,c
  2446  001764  50FA               	movf	pclath,w,c
  2447  001766  0E7C               	movlw	low _rxMsgData
  2448  001768  6FE6               	movwf	GroupDAC@data& (0+255),b
  2449  00176A  0E01               	movlw	high _rxMsgData
  2450  00176C  6FE7               	movwf	(GroupDAC@data+1)& (0+255),b
  2451  00176E  51F2               	movf	_request& (0+255),w,b
  2452  001770  0012               	return		;indir
  2453  001772                     u8909:
  2454                           
  2455                           ;EusartApp.c: 137: cState = START_RX_MESSAGE_READ;
  2456  001772  0E00               	movlw	0
  2457  001774  0100               	movlb	0	; () banked
  2458  001776  6FF4               	movwf	_cState& (0+255),b
  2459                           
  2460                           ; BSR set to: 0
  2461                           ;EusartApp.c: 139: }
  2462                           
  2463                           ;EusartApp.c: 138: break;
  2464  001778  0012               	return	
  2465  00177A                     l202:
  2466                           
  2467                           ; BSR set to: 0
  2468                           
  2469                           ; BSR set to: 0
  2470  00177A  51F4               	movf	_cState& (0+255),w,b
  2471                           
  2472                           ; Switch size 1, requested type "space"
  2473                           ; Number of cases is 8, Range of values is 0 to 7
  2474                           ; switch strategies available:
  2475                           ; Name         Instructions Cycles
  2476                           ; simple_byte           25    13 (average)
  2477                           ;	Chosen strategy is simple_byte
  2478  00177C  0A00               	xorlw	0	; case 0
  2479  00177E  B4D8               	btfsc	status,2,c
  2480  001780  D729               	goto	l203
  2481  001782  0A01               	xorlw	1	; case 1
  2482  001784  B4D8               	btfsc	status,2,c
  2483  001786  D72C               	goto	l206
  2484  001788  0A03               	xorlw	3	; case 2
  2485  00178A  B4D8               	btfsc	status,2,c
  2486  00178C  D741               	goto	l211
  2487  00178E  0A01               	xorlw	1	; case 3
  2488  001790  B4D8               	btfsc	status,2,c
  2489  001792  D74A               	goto	l213
  2490  001794  0A07               	xorlw	7	; case 4
  2491  001796  B4D8               	btfsc	status,2,c
  2492  001798  D753               	goto	l215
  2493  00179A  0A01               	xorlw	1	; case 5
  2494  00179C  B4D8               	btfsc	status,2,c
  2495  00179E  D762               	goto	l219
  2496  0017A0  0A03               	xorlw	3	; case 6
  2497  0017A2  B4D8               	btfsc	status,2,c
  2498  0017A4  D7A1               	goto	l224
  2499  0017A6  0A01               	xorlw	1	; case 7
  2500  0017A8  A4D8               	btfss	status,2,c
  2501  0017AA  0012               	return	
  2502  0017AC  D7BD               	goto	l228
  2503  0017AE                     __end_of_readUartMessage:
  2504                           	opt stack 0
  2505                           tosu	equ	0xFFF
  2506                           tosh	equ	0xFFE
  2507                           tosl	equ	0xFFD
  2508                           pclath	equ	0xFFA
  2509                           tblptru	equ	0xFF8
  2510                           tblptrh	equ	0xFF7
  2511                           tblptrl	equ	0xFF6
  2512                           tablat	equ	0xFF5
  2513                           postinc0	equ	0xFEE
  2514                           wreg	equ	0xFE8
  2515                           postdec1	equ	0xFE5
  2516                           fsr1l	equ	0xFE1
  2517                           indf2	equ	0xFDF
  2518                           postinc2	equ	0xFDE
  2519                           fsr2h	equ	0xFDA
  2520                           fsr2l	equ	0xFD9
  2521                           status	equ	0xFD8
  2522                           
  2523 ;; *************** function _InitRxMessageParams *****************
  2524 ;; Defined at:
  2525 ;;		line 142 in file "EusartApp.c"
  2526 ;; Parameters:    Size  Location     Type
  2527 ;;		None
  2528 ;; Auto vars:     Size  Location     Type
  2529 ;;		None
  2530 ;; Return value:  Size  Location     Type
  2531 ;;                  1    wreg      void 
  2532 ;; Registers used:
  2533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2534 ;; Tracked objects:
  2535 ;;		On entry : 0/0
  2536 ;;		On exit  : 0/0
  2537 ;;		Unchanged: 0/0
  2538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2539 ;;      Params:         0       0       0       0       0       0       0
  2540 ;;      Locals:         0       0       0       0       0       0       0
  2541 ;;      Temps:          0       0       0       0       0       0       0
  2542 ;;      Totals:         0       0       0       0       0       0       0
  2543 ;;Total ram usage:        0 bytes
  2544 ;; Hardware stack levels used:    1
  2545 ;; Hardware stack levels required when called:    6
  2546 ;; This function calls:
  2547 ;;		_ZeroArray
  2548 ;; This function is called by:
  2549 ;;		_readUartMessage
  2550 ;; This function uses a non-reentrant model
  2551 ;;
  2552                           
  2553                           	psect	text2
  2554  00408E                     __ptext2:
  2555                           	opt stack 0
  2556  00408E                     _InitRxMessageParams:
  2557                           	opt stack 23
  2558                           
  2559                           ;EusartApp.c: 146: dataSize = 0;
  2560                           
  2561                           ; BSR set to: 0
  2562                           ;incstack = 0
  2563  00408E  0E00               	movlw	0
  2564  004090  0100               	movlb	0	; () banked
  2565  004092  6FF1               	movwf	_dataSize& (0+255),b
  2566                           
  2567                           ;EusartApp.c: 147: crcCalc = 0;
  2568  004094  0E00               	movlw	0
  2569  004096  6E3C               	movwf	_crcCalc,c
  2570                           
  2571                           ;EusartApp.c: 148: crcGiven = 0;
  2572  004098  0E00               	movlw	0
  2573  00409A  6E3B               	movwf	_crcGiven,c
  2574                           
  2575                           ;EusartApp.c: 149: msgCount = 0;
  2576  00409C  0E00               	movlw	0
  2577  00409E  6FF0               	movwf	_msgCount& (0+255),b
  2578                           
  2579                           ; BSR set to: 0
  2580                           ;EusartApp.c: 150: ZeroArray(rxMsgQueue, (0x14));
  2581  0040A0  0E90               	movlw	low _rxMsgQueue
  2582  0040A2  6E20               	movwf	ZeroArray@array,c
  2583  0040A4  0E01               	movlw	high _rxMsgQueue
  2584  0040A6  6E21               	movwf	ZeroArray@array+1,c
  2585  0040A8  0E00               	movlw	0
  2586  0040AA  6E23               	movwf	ZeroArray@size+1,c
  2587  0040AC  0E14               	movlw	20
  2588  0040AE  6E22               	movwf	ZeroArray@size,c
  2589  0040B0  EC1B  F021         	call	_ZeroArray
  2590  0040B4  0012               	return		;funcret
  2591  0040B6                     __end_of_InitRxMessageParams:
  2592                           	opt stack 0
  2593                           tosu	equ	0xFFF
  2594                           tosh	equ	0xFFE
  2595                           tosl	equ	0xFFD
  2596                           pclath	equ	0xFFA
  2597                           tblptru	equ	0xFF8
  2598                           tblptrh	equ	0xFF7
  2599                           tblptrl	equ	0xFF6
  2600                           tablat	equ	0xFF5
  2601                           postinc0	equ	0xFEE
  2602                           wreg	equ	0xFE8
  2603                           postdec1	equ	0xFE5
  2604                           fsr1l	equ	0xFE1
  2605                           indf2	equ	0xFDF
  2606                           postinc2	equ	0xFDE
  2607                           fsr2h	equ	0xFDA
  2608                           fsr2l	equ	0xFD9
  2609                           status	equ	0xFD8
  2610                           
  2611 ;; *************** function _GroupDAC *****************
  2612 ;; Defined at:
  2613 ;;		line 125 in file "MessageFunctions.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;  request         1    wreg     enum E12
  2616 ;;  data            2  134[BANK0 ] PTR unsigned char 
  2617 ;;		 -> rxMsgData(20), 
  2618 ;; Auto vars:     Size  Location     Type
  2619 ;;  request         1  136[BANK0 ] enum E12
  2620 ;; Return value:  Size  Location     Type
  2621 ;;                  1    wreg      void 
  2622 ;; Registers used:
  2623 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2624 ;; Tracked objects:
  2625 ;;		On entry : 0/0
  2626 ;;		On exit  : 0/0
  2627 ;;		Unchanged: 0/0
  2628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2629 ;;      Params:         0       2       0       0       0       0       0
  2630 ;;      Locals:         0       1       0       0       0       0       0
  2631 ;;      Temps:          0       0       0       0       0       0       0
  2632 ;;      Totals:         0       3       0       0       0       0       0
  2633 ;;Total ram usage:        3 bytes
  2634 ;; Hardware stack levels used:    1
  2635 ;; Hardware stack levels required when called:   11
  2636 ;; This function calls:
  2637 ;;		_DacReadValue
  2638 ;;		_DacSetValue
  2639 ;; This function is called by:
  2640 ;;		_readUartMessage
  2641 ;; This function uses a non-reentrant model
  2642 ;;
  2643                           
  2644                           	psect	text3
  2645  003F08                     __ptext3:
  2646                           	opt stack 0
  2647  003F08                     _GroupDAC:
  2648                           	opt stack 18
  2649                           
  2650                           ;incstack = 0
  2651                           ;GroupDAC@request stored from wreg
  2652  003F08  0100               	movlb	0	; () banked
  2653  003F0A  6FE8               	movwf	GroupDAC@request& (0+255),b
  2654                           
  2655                           ;MessageFunctions.c: 127: switch (request)
  2656  003F0C  D00E               	goto	l1333
  2657  003F0E                     
  2658                           ;MessageFunctions.c: 130: DacSetValue(data);
  2659  003F0E  C0E6  F08A         	movff	GroupDAC@data,DacSetValue@data
  2660  003F12  C0E7  F08B         	movff	GroupDAC@data+1,DacSetValue@data+1
  2661  003F16  EC57  F018         	call	_DacSetValue	;wreg free
  2662                           
  2663                           ;MessageFunctions.c: 131: break;
  2664  003F1A  0012               	return	
  2665  003F1C                     
  2666                           ;MessageFunctions.c: 134: DacReadValue(data);
  2667  003F1C  C0E6  F0C8         	movff	GroupDAC@data,DacReadValue@data
  2668  003F20  C0E7  F0C9         	movff	GroupDAC@data+1,DacReadValue@data+1
  2669  003F24  ECAB  F013         	call	_DacReadValue	;wreg free
  2670                           
  2671                           ;MessageFunctions.c: 139: }
  2672                           
  2673                           ;MessageFunctions.c: 138: break;
  2674                           
  2675                           ;MessageFunctions.c: 137: default:
  2676                           
  2677                           ;MessageFunctions.c: 135: break;
  2678  003F28  0012               	return	
  2679  003F2A                     l1333:
  2680  003F2A  0100               	movlb	0	; () banked
  2681  003F2C  51E8               	movf	GroupDAC@request& (0+255),w,b
  2682                           
  2683                           ; Switch size 1, requested type "space"
  2684                           ; Number of cases is 2, Range of values is 97 to 98
  2685                           ; switch strategies available:
  2686                           ; Name         Instructions Cycles
  2687                           ; simple_byte            7     4 (average)
  2688                           ;	Chosen strategy is simple_byte
  2689  003F2E  0A61               	xorlw	97	; case 97
  2690  003F30  B4D8               	btfsc	status,2,c
  2691  003F32  D7ED               	goto	l1334
  2692  003F34  0A03               	xorlw	3	; case 98
  2693  003F36  A4D8               	btfss	status,2,c
  2694  003F38  0012               	return	
  2695  003F3A  D7F0               	goto	l1336
  2696  003F3C                     __end_of_GroupDAC:
  2697                           	opt stack 0
  2698                           tosu	equ	0xFFF
  2699                           tosh	equ	0xFFE
  2700                           tosl	equ	0xFFD
  2701                           pclath	equ	0xFFA
  2702                           tblptru	equ	0xFF8
  2703                           tblptrh	equ	0xFF7
  2704                           tblptrl	equ	0xFF6
  2705                           tablat	equ	0xFF5
  2706                           postinc0	equ	0xFEE
  2707                           wreg	equ	0xFE8
  2708                           postdec1	equ	0xFE5
  2709                           fsr1l	equ	0xFE1
  2710                           indf2	equ	0xFDF
  2711                           postinc2	equ	0xFDE
  2712                           fsr2h	equ	0xFDA
  2713                           fsr2l	equ	0xFD9
  2714                           status	equ	0xFD8
  2715                           
  2716 ;; *************** function _GroupFlashMemory *****************
  2717 ;; Defined at:
  2718 ;;		line 104 in file "MessageFunctions.c"
  2719 ;; Parameters:    Size  Location     Type
  2720 ;;  request         1    wreg     enum E12
  2721 ;;  data            2  134[BANK0 ] PTR unsigned char 
  2722 ;; Auto vars:     Size  Location     Type
  2723 ;;  request         1  136[BANK0 ] enum E12
  2724 ;; Return value:  Size  Location     Type
  2725 ;;                  1    wreg      void 
  2726 ;; Registers used:
  2727 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2728 ;; Tracked objects:
  2729 ;;		On entry : 0/0
  2730 ;;		On exit  : 0/0
  2731 ;;		Unchanged: 0/0
  2732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2733 ;;      Params:         0       2       0       0       0       0       0
  2734 ;;      Locals:         0       1       0       0       0       0       0
  2735 ;;      Temps:          0       0       0       0       0       0       0
  2736 ;;      Totals:         0       3       0       0       0       0       0
  2737 ;;Total ram usage:        3 bytes
  2738 ;; Hardware stack levels used:    1
  2739 ;; Hardware stack levels required when called:    9
  2740 ;; This function calls:
  2741 ;;		_FlashEreaseMem
  2742 ;;		_FlashReadCondition
  2743 ;;		_FlashReadUart
  2744 ;; This function is called by:
  2745 ;;		_readUartMessage
  2746 ;; This function uses a non-reentrant model
  2747 ;;
  2748                           
  2749                           	psect	text4
  2750  003D84                     __ptext4:
  2751                           	opt stack 0
  2752  003D84                     _GroupFlashMemory:
  2753                           	opt stack 20
  2754                           
  2755                           ;incstack = 0
  2756                           ;GroupFlashMemory@request stored from wreg
  2757  003D84  0100               	movlb	0	; () banked
  2758  003D86  6FE8               	movwf	GroupFlashMemory@request& (0+255),b
  2759                           
  2760                           ;MessageFunctions.c: 106: switch (request)
  2761  003D88  D00D               	goto	l1324
  2762  003D8A                     
  2763                           ;MessageFunctions.c: 109: FlashEreaseMem();
  2764  003D8A  EC4A  F01D         	call	_FlashEreaseMem	;wreg free
  2765                           
  2766                           ;MessageFunctions.c: 110: break;
  2767  003D8E  0012               	return	
  2768  003D90                     
  2769                           ;MessageFunctions.c: 113: FlashReadCondition();
  2770  003D90  ECC6  F010         	call	_FlashReadCondition	;wreg free
  2771                           
  2772                           ;MessageFunctions.c: 114: break;
  2773  003D94  0012               	return	
  2774  003D96                     
  2775                           ;MessageFunctions.c: 117: FlashReadUart(data);
  2776  003D96  C0E6  F087         	movff	GroupFlashMemory@data,FlashReadUart@data
  2777  003D9A  C0E7  F088         	movff	GroupFlashMemory@data+1,FlashReadUart@data+1
  2778  003D9E  ECEF  F008         	call	_FlashReadUart	;wreg free
  2779                           
  2780                           ;MessageFunctions.c: 122: }
  2781                           
  2782                           ;MessageFunctions.c: 121: break;
  2783                           
  2784                           ;MessageFunctions.c: 120: default:
  2785                           
  2786                           ;MessageFunctions.c: 118: break;
  2787  003DA2  0012               	return	
  2788  003DA4                     l1324:
  2789  003DA4  0100               	movlb	0	; () banked
  2790  003DA6  51E8               	movf	GroupFlashMemory@request& (0+255),w,b
  2791                           
  2792                           ; Switch size 1, requested type "space"
  2793                           ; Number of cases is 3, Range of values is 81 to 83
  2794                           ; switch strategies available:
  2795                           ; Name         Instructions Cycles
  2796                           ; simple_byte           10     6 (average)
  2797                           ;	Chosen strategy is simple_byte
  2798  003DA8  0A51               	xorlw	81	; case 81
  2799  003DAA  B4D8               	btfsc	status,2,c
  2800  003DAC  D7EE               	goto	l1325
  2801  003DAE  0A03               	xorlw	3	; case 82
  2802  003DB0  B4D8               	btfsc	status,2,c
  2803  003DB2  D7EE               	goto	l1327
  2804  003DB4  0A01               	xorlw	1	; case 83
  2805  003DB6  A4D8               	btfss	status,2,c
  2806  003DB8  0012               	return	
  2807  003DBA  D7ED               	goto	l1328
  2808  003DBC                     __end_of_GroupFlashMemory:
  2809                           	opt stack 0
  2810                           tosu	equ	0xFFF
  2811                           tosh	equ	0xFFE
  2812                           tosl	equ	0xFFD
  2813                           pclath	equ	0xFFA
  2814                           tblptru	equ	0xFF8
  2815                           tblptrh	equ	0xFF7
  2816                           tblptrl	equ	0xFF6
  2817                           tablat	equ	0xFF5
  2818                           postinc0	equ	0xFEE
  2819                           wreg	equ	0xFE8
  2820                           postdec1	equ	0xFE5
  2821                           fsr1l	equ	0xFE1
  2822                           indf2	equ	0xFDF
  2823                           postinc2	equ	0xFDE
  2824                           fsr2h	equ	0xFDA
  2825                           fsr2l	equ	0xFD9
  2826                           status	equ	0xFD8
  2827                           
  2828 ;; *************** function _GroupAdc *****************
  2829 ;; Defined at:
  2830 ;;		line 51 in file "MessageFunctions.c"
  2831 ;; Parameters:    Size  Location     Type
  2832 ;;  request         1    wreg     enum E12
  2833 ;;  data            2  134[BANK0 ] PTR unsigned char 
  2834 ;; Auto vars:     Size  Location     Type
  2835 ;;  request         1  136[BANK0 ] enum E12
  2836 ;; Return value:  Size  Location     Type
  2837 ;;                  1    wreg      void 
  2838 ;; Registers used:
  2839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2840 ;; Tracked objects:
  2841 ;;		On entry : 0/0
  2842 ;;		On exit  : 0/0
  2843 ;;		Unchanged: 0/0
  2844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2845 ;;      Params:         0       2       0       0       0       0       0
  2846 ;;      Locals:         0       1       0       0       0       0       0
  2847 ;;      Temps:          0       0       0       0       0       0       0
  2848 ;;      Totals:         0       3       0       0       0       0       0
  2849 ;;Total ram usage:        3 bytes
  2850 ;; Hardware stack levels used:    1
  2851 ;; Hardware stack levels required when called:    8
  2852 ;; This function calls:
  2853 ;;		_SetChannelMode
  2854 ;; This function is called by:
  2855 ;;		_readUartMessage
  2856 ;; This function uses a non-reentrant model
  2857 ;;
  2858                           
  2859                           	psect	text5
  2860  0041DA                     __ptext5:
  2861                           	opt stack 0
  2862  0041DA                     _GroupAdc:
  2863                           	opt stack 21
  2864                           
  2865                           ;incstack = 0
  2866                           ;GroupAdc@request stored from wreg
  2867  0041DA  0100               	movlb	0	; () banked
  2868  0041DC  6FE8               	movwf	GroupAdc@request& (0+255),b
  2869                           
  2870                           ;MessageFunctions.c: 53: switch (request)
  2871  0041DE  D007               	goto	l1303
  2872  0041E0                     
  2873                           ;MessageFunctions.c: 56: SetChannelMode(data);
  2874  0041E0  C0E6  F02C         	movff	GroupAdc@data,SetChannelMode@data
  2875  0041E4  C0E7  F02D         	movff	GroupAdc@data+1,SetChannelMode@data+1
  2876  0041E8  ECEA  F01F         	call	_SetChannelMode	;wreg free
  2877                           
  2878                           ;MessageFunctions.c: 61: }
  2879                           
  2880                           ;MessageFunctions.c: 60: break;
  2881                           
  2882                           ;MessageFunctions.c: 59: default:
  2883                           
  2884                           ;MessageFunctions.c: 57: break;
  2885  0041EC  0012               	return	
  2886  0041EE                     l1303:
  2887  0041EE  0100               	movlb	0	; () banked
  2888  0041F0  51E8               	movf	GroupAdc@request& (0+255),w,b
  2889                           
  2890                           ; Switch size 1, requested type "space"
  2891                           ; Number of cases is 1, Range of values is 50 to 50
  2892                           ; switch strategies available:
  2893                           ; Name         Instructions Cycles
  2894                           ; simple_byte            4     3 (average)
  2895                           ;	Chosen strategy is simple_byte
  2896  0041F2  0A32               	xorlw	50	; case 50
  2897  0041F4  A4D8               	btfss	status,2,c
  2898  0041F6  0012               	return	
  2899  0041F8  D7F3               	goto	l1304
  2900  0041FA                     __end_of_GroupAdc:
  2901                           	opt stack 0
  2902                           tosu	equ	0xFFF
  2903                           tosh	equ	0xFFE
  2904                           tosl	equ	0xFFD
  2905                           pclath	equ	0xFFA
  2906                           tblptru	equ	0xFF8
  2907                           tblptrh	equ	0xFF7
  2908                           tblptrl	equ	0xFF6
  2909                           tablat	equ	0xFF5
  2910                           postinc0	equ	0xFEE
  2911                           wreg	equ	0xFE8
  2912                           postdec1	equ	0xFE5
  2913                           fsr1l	equ	0xFE1
  2914                           indf2	equ	0xFDF
  2915                           postinc2	equ	0xFDE
  2916                           fsr2h	equ	0xFDA
  2917                           fsr2l	equ	0xFD9
  2918                           status	equ	0xFD8
  2919                           
  2920 ;; *************** function _GroupStatusAndVersion *****************
  2921 ;; Defined at:
  2922 ;;		line 34 in file "MessageFunctions.c"
  2923 ;; Parameters:    Size  Location     Type
  2924 ;;  request         1    wreg     enum E12
  2925 ;;  data            3  134[BANK0 ] PTR unsigned char 
  2926 ;; Auto vars:     Size  Location     Type
  2927 ;;  request         1  137[BANK0 ] enum E12
  2928 ;; Return value:  Size  Location     Type
  2929 ;;                  1    wreg      void 
  2930 ;; Registers used:
  2931 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2932 ;; Tracked objects:
  2933 ;;		On entry : 0/0
  2934 ;;		On exit  : 0/0
  2935 ;;		Unchanged: 0/0
  2936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2937 ;;      Params:         0       2       0       0       0       0       0
  2938 ;;      Locals:         0       1       0       0       0       0       0
  2939 ;;      Temps:          0       0       0       0       0       0       0
  2940 ;;      Totals:         0       3       0       0       0       0       0
  2941 ;;Total ram usage:        3 bytes
  2942 ;; Hardware stack levels used:    1
  2943 ;; Hardware stack levels required when called:    7
  2944 ;; This function calls:
  2945 ;;		_GetMcuFwVersion
  2946 ;;		_GetMcuRunTime
  2947 ;; This function is called by:
  2948 ;;		_readUartMessage
  2949 ;; This function uses a non-reentrant model
  2950 ;;
  2951                           
  2952                           	psect	text6
  2953  00412A                     __ptext6:
  2954                           	opt stack 0
  2955  00412A                     _GroupStatusAndVersion:
  2956                           	opt stack 22
  2957                           
  2958                           ;incstack = 0
  2959                           ;GroupStatusAndVersion@request stored from wreg
  2960  00412A  0100               	movlb	0	; () banked
  2961  00412C  6FE9               	movwf	GroupStatusAndVersion@request& (0+255),b
  2962                           
  2963                           ;MessageFunctions.c: 36: switch (request)
  2964  00412E  D006               	goto	l1295
  2965  004130                     
  2966                           ;MessageFunctions.c: 39: GetMcuFwVersion();
  2967  004130  EC56  F003         	call	_GetMcuFwVersion	;wreg free
  2968                           
  2969                           ;MessageFunctions.c: 40: break;
  2970  004134  0012               	return	
  2971  004136                     
  2972                           ;MessageFunctions.c: 43: GetMcuRunTime();
  2973  004136  EC39  F013         	call	_GetMcuRunTime	;wreg free
  2974                           
  2975                           ;MessageFunctions.c: 48: }
  2976                           
  2977                           ;MessageFunctions.c: 47: break;
  2978                           
  2979                           ;MessageFunctions.c: 46: default:
  2980                           
  2981                           ;MessageFunctions.c: 44: break;
  2982  00413A  0012               	return	
  2983  00413C                     l1295:
  2984  00413C  0100               	movlb	0	; () banked
  2985  00413E  51E9               	movf	GroupStatusAndVersion@request& (0+255),w,b
  2986                           
  2987                           ; Switch size 1, requested type "space"
  2988                           ; Number of cases is 2, Range of values is 33 to 34
  2989                           ; switch strategies available:
  2990                           ; Name         Instructions Cycles
  2991                           ; simple_byte            7     4 (average)
  2992                           ;	Chosen strategy is simple_byte
  2993  004140  0A21               	xorlw	33	; case 33
  2994  004142  B4D8               	btfsc	status,2,c
  2995  004144  D7F8               	goto	l1298
  2996  004146  0A03               	xorlw	3	; case 34
  2997  004148  A4D8               	btfss	status,2,c
  2998  00414A  0012               	return	
  2999  00414C  D7F1               	goto	l1296
  3000  00414E                     __end_of_GroupStatusAndVersion:
  3001                           	opt stack 0
  3002                           tosu	equ	0xFFF
  3003                           tosh	equ	0xFFE
  3004                           tosl	equ	0xFFD
  3005                           pclath	equ	0xFFA
  3006                           tblptru	equ	0xFF8
  3007                           tblptrh	equ	0xFF7
  3008                           tblptrl	equ	0xFF6
  3009                           tablat	equ	0xFF5
  3010                           postinc0	equ	0xFEE
  3011                           wreg	equ	0xFE8
  3012                           postdec1	equ	0xFE5
  3013                           fsr1l	equ	0xFE1
  3014                           indf2	equ	0xFDF
  3015                           postinc2	equ	0xFDE
  3016                           fsr2h	equ	0xFDA
  3017                           fsr2l	equ	0xFD9
  3018                           status	equ	0xFD8
  3019                           
  3020 ;; *************** function _GroupControlMcu *****************
  3021 ;; Defined at:
  3022 ;;		line 11 in file "MessageFunctions.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;  request         1    wreg     enum E12
  3025 ;;  data            3  134[BANK0 ] PTR unsigned char 
  3026 ;; Auto vars:     Size  Location     Type
  3027 ;;  request         1  137[BANK0 ] enum E12
  3028 ;; Return value:  Size  Location     Type
  3029 ;;                  1    wreg      void 
  3030 ;; Registers used:
  3031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3032 ;; Tracked objects:
  3033 ;;		On entry : 0/0
  3034 ;;		On exit  : 0/0
  3035 ;;		Unchanged: 0/0
  3036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3037 ;;      Params:         0       2       0       0       0       0       0
  3038 ;;      Locals:         0       1       0       0       0       0       0
  3039 ;;      Temps:          0       0       0       0       0       0       0
  3040 ;;      Totals:         0       3       0       0       0       0       0
  3041 ;;Total ram usage:        3 bytes
  3042 ;; Hardware stack levels used:    1
  3043 ;; Hardware stack levels required when called:    8
  3044 ;; This function calls:
  3045 ;;		_ResetMcu
  3046 ;;		_testLeds
  3047 ;; This function is called by:
  3048 ;;		_readUartMessage
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           	psect	text7
  3053  003FA4                     __ptext7:
  3054                           	opt stack 0
  3055  003FA4                     _GroupControlMcu:
  3056                           	opt stack 21
  3057                           
  3058                           ;incstack = 0
  3059                           ;GroupControlMcu@request stored from wreg
  3060  003FA4  0100               	movlb	0	; () banked
  3061  003FA6  6FE9               	movwf	GroupControlMcu@request& (0+255),b
  3062                           
  3063                           ;MessageFunctions.c: 13: switch (request)
  3064  003FA8  D006               	goto	l1285
  3065  003FAA                     
  3066                           ;MessageFunctions.c: 16: testLeds();
  3067  003FAA  ECE9  F01A         	call	_testLeds	;wreg free
  3068                           
  3069                           ;MessageFunctions.c: 17: break;
  3070  003FAE  0012               	return	
  3071  003FB0                     
  3072                           ;MessageFunctions.c: 20: ResetMcu();
  3073  003FB0  ECAC  F021         	call	_ResetMcu	;wreg free
  3074                           
  3075                           ;MessageFunctions.c: 31: }
  3076                           
  3077                           ;MessageFunctions.c: 30: break;
  3078                           
  3079                           ;MessageFunctions.c: 29: default:
  3080                           
  3081                           ;MessageFunctions.c: 27: break;
  3082                           
  3083                           ;MessageFunctions.c: 26: case CONTROL_PA2_SET:
  3084                           
  3085                           ;MessageFunctions.c: 24: break;
  3086                           
  3087                           ;MessageFunctions.c: 23: case CONTROL_PA1_SET:
  3088                           
  3089                           ;MessageFunctions.c: 21: break;
  3090  003FB4  0012               	return	
  3091  003FB6                     l1285:
  3092  003FB6  0100               	movlb	0	; () banked
  3093  003FB8  51E9               	movf	GroupControlMcu@request& (0+255),w,b
  3094                           
  3095                           ; Switch size 1, requested type "space"
  3096                           ; Number of cases is 4, Range of values is 17 to 20
  3097                           ; switch strategies available:
  3098                           ; Name         Instructions Cycles
  3099                           ; simple_byte           13     7 (average)
  3100                           ;	Chosen strategy is simple_byte
  3101  003FBA  0A11               	xorlw	17	; case 17
  3102  003FBC  B4D8               	btfsc	status,2,c
  3103  003FBE  D7F8               	goto	l1288
  3104  003FC0  0A03               	xorlw	3	; case 18
  3105  003FC2  B4D8               	btfsc	status,2,c
  3106  003FC4  0012               	return	
  3107  003FC6  0A01               	xorlw	1	; case 19
  3108  003FC8  B4D8               	btfsc	status,2,c
  3109  003FCA  0012               	return	
  3110  003FCC  0A07               	xorlw	7	; case 20
  3111  003FCE  A4D8               	btfss	status,2,c
  3112  003FD0  0012               	return	
  3113  003FD2  D7EB               	goto	l1286
  3114  003FD4                     __end_of_GroupControlMcu:
  3115                           	opt stack 0
  3116                           tosu	equ	0xFFF
  3117                           tosh	equ	0xFFE
  3118                           tosl	equ	0xFFD
  3119                           pclath	equ	0xFFA
  3120                           tblptru	equ	0xFF8
  3121                           tblptrh	equ	0xFF7
  3122                           tblptrl	equ	0xFF6
  3123                           tablat	equ	0xFF5
  3124                           postinc0	equ	0xFEE
  3125                           wreg	equ	0xFE8
  3126                           postdec1	equ	0xFE5
  3127                           fsr1l	equ	0xFE1
  3128                           indf2	equ	0xFDF
  3129                           postinc2	equ	0xFDE
  3130                           fsr2h	equ	0xFDA
  3131                           fsr2l	equ	0xFD9
  3132                           status	equ	0xFD8
  3133                           
  3134 ;; *************** function _GroupSynthesizers *****************
  3135 ;; Defined at:
  3136 ;;		line 63 in file "MessageFunctions.c"
  3137 ;; Parameters:    Size  Location     Type
  3138 ;;  request         1    wreg     enum E12
  3139 ;;  data            2  134[BANK0 ] PTR unsigned char 
  3140 ;; Auto vars:     Size  Location     Type
  3141 ;;  request         1  136[BANK0 ] enum E12
  3142 ;; Return value:  Size  Location     Type
  3143 ;;                  1    wreg      void 
  3144 ;; Registers used:
  3145 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3146 ;; Tracked objects:
  3147 ;;		On entry : 0/0
  3148 ;;		On exit  : 0/0
  3149 ;;		Unchanged: 0/0
  3150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3151 ;;      Params:         0       2       0       0       0       0       0
  3152 ;;      Locals:         0       1       0       0       0       0       0
  3153 ;;      Temps:          0       0       0       0       0       0       0
  3154 ;;      Totals:         0       3       0       0       0       0       0
  3155 ;;Total ram usage:        3 bytes
  3156 ;; Hardware stack levels used:    1
  3157 ;; Hardware stack levels required when called:   12
  3158 ;; This function calls:
  3159 ;;		_SetSynthOper
  3160 ;;		_SynthReadData
  3161 ;;		_UpdateSynthFreq
  3162 ;; This function is called by:
  3163 ;;		_readUartMessage
  3164 ;; This function uses a non-reentrant model
  3165 ;;
  3166                           
  3167                           	psect	text8
  3168  00326C                     __ptext8:
  3169                           	opt stack 0
  3170  00326C                     _GroupSynthesizers:
  3171                           	opt stack 17
  3172                           
  3173                           ;incstack = 0
  3174                           ;GroupSynthesizers@request stored from wreg
  3175  00326C  0100               	movlb	0	; () banked
  3176  00326E  6FE8               	movwf	GroupSynthesizers@request& (0+255),b
  3177                           
  3178                           ;MessageFunctions.c: 65: switch (request)
  3179  003270  D028               	goto	l1310
  3180  003272                     
  3181                           ;MessageFunctions.c: 76: UpdateSynthFreq(SYNTH_TX, data);
  3182  003272  C0E6  F08A         	movff	GroupSynthesizers@data,UpdateSynthFreq@data
  3183  003276  C0E7  F08B         	movff	GroupSynthesizers@data+1,UpdateSynthFreq@data+1
  3184  00327A  0E00               	movlw	0
  3185  00327C  EC3F  F010         	call	_UpdateSynthFreq
  3186                           
  3187                           ;MessageFunctions.c: 77: break;
  3188  003280  0012               	return	
  3189  003282                     
  3190                           ;MessageFunctions.c: 80: UpdateSynthFreq(SYNTH_RX, data);
  3191  003282  C0E6  F08A         	movff	GroupSynthesizers@data,UpdateSynthFreq@data
  3192  003286  C0E7  F08B         	movff	GroupSynthesizers@data+1,UpdateSynthFreq@data+1
  3193  00328A  0E01               	movlw	1
  3194  00328C  EC3F  F010         	call	_UpdateSynthFreq
  3195                           
  3196                           ;MessageFunctions.c: 81: break;
  3197  003290  0012               	return	
  3198  003292                     
  3199                           ;MessageFunctions.c: 84: SetSynthOper(SYNTH_RX);
  3200  003292  0E01               	movlw	1
  3201  003294  ECFC  F019         	call	_SetSynthOper
  3202                           
  3203                           ;MessageFunctions.c: 85: break;
  3204  003298  0012               	return	
  3205  00329A                     
  3206                           ;MessageFunctions.c: 88: SetSynthOper(SYNTH_TX);
  3207  00329A  0E00               	movlw	0
  3208  00329C  ECFC  F019         	call	_SetSynthOper
  3209                           
  3210                           ;MessageFunctions.c: 89: break;
  3211  0032A0  0012               	return	
  3212  0032A2                     
  3213                           ;MessageFunctions.c: 92: SynthReadData(SYNTH_RX, data);
  3214  0032A2  C0E6  F0C8         	movff	GroupSynthesizers@data,SynthReadData@data
  3215  0032A6  C0E7  F0C9         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3216  0032AA  0E01               	movlw	1
  3217  0032AC  EC4E  F005         	call	_SynthReadData
  3218                           
  3219                           ;MessageFunctions.c: 93: break;
  3220  0032B0  0012               	return	
  3221  0032B2                     
  3222                           ;MessageFunctions.c: 96: SynthReadData(SYNTH_TX, data);
  3223  0032B2  C0E6  F0C8         	movff	GroupSynthesizers@data,SynthReadData@data
  3224  0032B6  C0E7  F0C9         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3225  0032BA  0E00               	movlw	0
  3226  0032BC  EC4E  F005         	call	_SynthReadData
  3227                           
  3228                           ;MessageFunctions.c: 101: }
  3229                           
  3230                           ;MessageFunctions.c: 100: break;
  3231                           
  3232                           ;MessageFunctions.c: 99: default:
  3233                           
  3234                           ;MessageFunctions.c: 97: break;
  3235  0032C0  0012               	return	
  3236  0032C2                     l1310:
  3237  0032C2  0100               	movlb	0	; () banked
  3238  0032C4  51E8               	movf	GroupSynthesizers@request& (0+255),w,b
  3239                           
  3240                           ; Switch size 1, requested type "space"
  3241                           ; Number of cases is 8, Range of values is 64 to 71
  3242                           ; switch strategies available:
  3243                           ; Name         Instructions Cycles
  3244                           ; simple_byte           25    13 (average)
  3245                           ;	Chosen strategy is simple_byte
  3246  0032C6  0A40               	xorlw	64	; case 64
  3247  0032C8  B4D8               	btfsc	status,2,c
  3248  0032CA  0012               	return	
  3249  0032CC  0A01               	xorlw	1	; case 65
  3250  0032CE  B4D8               	btfsc	status,2,c
  3251  0032D0  0012               	return	
  3252  0032D2  0A03               	xorlw	3	; case 66
  3253  0032D4  B4D8               	btfsc	status,2,c
  3254  0032D6  D7CD               	goto	l1314
  3255  0032D8  0A01               	xorlw	1	; case 67
  3256  0032DA  B4D8               	btfsc	status,2,c
  3257  0032DC  D7D2               	goto	l1315
  3258  0032DE  0A07               	xorlw	7	; case 68
  3259  0032E0  B4D8               	btfsc	status,2,c
  3260  0032E2  D7D7               	goto	l1316
  3261  0032E4  0A01               	xorlw	1	; case 69
  3262  0032E6  B4D8               	btfsc	status,2,c
  3263  0032E8  D7D8               	goto	l1317
  3264  0032EA  0A03               	xorlw	3	; case 70
  3265  0032EC  B4D8               	btfsc	status,2,c
  3266  0032EE  D7D9               	goto	l1318
  3267  0032F0  0A01               	xorlw	1	; case 71
  3268  0032F2  A4D8               	btfss	status,2,c
  3269  0032F4  0012               	return	
  3270  0032F6  D7DD               	goto	l1319
  3271  0032F8                     __end_of_GroupSynthesizers:
  3272                           	opt stack 0
  3273                           tosu	equ	0xFFF
  3274                           tosh	equ	0xFFE
  3275                           tosl	equ	0xFFD
  3276                           pclath	equ	0xFFA
  3277                           tblptru	equ	0xFF8
  3278                           tblptrh	equ	0xFF7
  3279                           tblptrl	equ	0xFF6
  3280                           tablat	equ	0xFF5
  3281                           postinc0	equ	0xFEE
  3282                           wreg	equ	0xFE8
  3283                           postdec1	equ	0xFE5
  3284                           fsr1l	equ	0xFE1
  3285                           indf2	equ	0xFDF
  3286                           postinc2	equ	0xFDE
  3287                           fsr2h	equ	0xFDA
  3288                           fsr2l	equ	0xFD9
  3289                           status	equ	0xFD8
  3290                           
  3291 ;; *************** function _UpdateSynthFreq *****************
  3292 ;; Defined at:
  3293 ;;		line 89 in file "SyntApp.c"
  3294 ;; Parameters:    Size  Location     Type
  3295 ;;  cType           1    wreg     enum E1
  3296 ;;  data            2   42[BANK0 ] PTR unsigned char 
  3297 ;; Auto vars:     Size  Location     Type
  3298 ;;  cType           1   44[BANK0 ] enum E1
  3299 ;;  retVal          8   45[BANK0 ] struct .
  3300 ;; Return value:  Size  Location     Type
  3301 ;;                  1    wreg      void 
  3302 ;; Registers used:
  3303 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3304 ;; Tracked objects:
  3305 ;;		On entry : 0/0
  3306 ;;		On exit  : 0/0
  3307 ;;		Unchanged: 0/0
  3308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3309 ;;      Params:         0       2       0       0       0       0       0
  3310 ;;      Locals:         0       9       0       0       0       0       0
  3311 ;;      Temps:          0       0       0       0       0       0       0
  3312 ;;      Totals:         0      11       0       0       0       0       0
  3313 ;;Total ram usage:       11 bytes
  3314 ;; Hardware stack levels used:    1
  3315 ;; Hardware stack levels required when called:    8
  3316 ;; This function calls:
  3317 ;;		_GetIntFromUartData
  3318 ;;		_SWSPI_send_word
  3319 ;;		_SendAckMessage
  3320 ;;		_StoreIntInEeprom
  3321 ;; This function is called by:
  3322 ;;		_GroupSynthesizers
  3323 ;; This function uses a non-reentrant model
  3324 ;;
  3325                           
  3326                           	psect	text9
  3327  00207E                     __ptext9:
  3328                           	opt stack 0
  3329  00207E                     _UpdateSynthFreq:
  3330                           	opt stack 20
  3331                           
  3332                           ;incstack = 0
  3333                           ;UpdateSynthFreq@cType stored from wreg
  3334  00207E  0100               	movlb	0	; () banked
  3335  002080  6F8C               	movwf	UpdateSynthFreq@cType& (0+255),b
  3336                           
  3337                           ;SyntApp.c: 91: INT_VAL retVal;
  3338                           ;SyntApp.c: 93: retVal = GetIntFromUartData(10, data);
  3339  002082  C08A  F066         	movff	UpdateSynthFreq@data,GetIntFromUartData@data
  3340  002086  C08B  F067         	movff	UpdateSynthFreq@data+1,GetIntFromUartData@data+1
  3341  00208A  0E0A               	movlw	10
  3342  00208C  EC59  F00E         	call	_GetIntFromUartData
  3343  002090  EE20  F08D         	lfsr	2,UpdateSynthFreq@retVal
  3344  002094  0E07               	movlw	7
  3345  002096                     u8421:
  3346  002096  CFEB FFDB          	movff	plusw0,plusw2
  3347  00209A  06E8               	decf	wreg,f,c
  3348  00209C  E2FC               	bc	u8421
  3349                           
  3350                           ;SyntApp.c: 95: if(cType == SYNTH_TX)
  3351  00209E  0100               	movlb	0	; () banked
  3352  0020A0  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3353  0020A2  A4D8               	btfss	status,2,c
  3354  0020A4  D037               	goto	l523
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;SyntApp.c: 96: {
  3358                           ;SyntApp.c: 97: if(cntRegUpdateTx < 0x9)
  3359  0020A6  0E09               	movlw	9
  3360  0020A8  603A               	cpfslt	_cntRegUpdateTx,c
  3361  0020AA  D02C               	goto	l524
  3362                           
  3363                           ; BSR set to: 0
  3364                           ;SyntApp.c: 98: {
  3365                           ;SyntApp.c: 99: SWSPI_send_word(cType, retVal.num, 3);
  3366  0020AC  C08D  F029         	movff	UpdateSynthFreq@retVal,SWSPI_send_word@data
  3367  0020B0  C08E  F02A         	movff	UpdateSynthFreq@retVal+1,SWSPI_send_word@data+1
  3368  0020B4  C08F  F02B         	movff	UpdateSynthFreq@retVal+2,SWSPI_send_word@data+2
  3369  0020B8  C090  F02C         	movff	UpdateSynthFreq@retVal+3,SWSPI_send_word@data+3
  3370  0020BC  0E03               	movlw	3
  3371  0020BE  6E2D               	movwf	SWSPI_send_word@dataSize,c
  3372  0020C0  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3373  0020C2  EC02  F018         	call	_SWSPI_send_word
  3374                           
  3375                           ;SyntApp.c: 100: StoreIntInEeprom(retVal.num, (0) | SYNTH_ADDRES[retVal.con], 4);
  3376  0020C6  C08D  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3377  0020CA  C08E  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3378  0020CE  C08F  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3379  0020D2  C090  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3380  0020D6  0E39               	movlw	low _SYNTH_ADDRES
  3381  0020D8  0100               	movlb	0	; () banked
  3382  0020DA  2591               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3383  0020DC  6EF6               	movwf	tblptrl,c
  3384  0020DE  0E06               	movlw	high _SYNTH_ADDRES
  3385  0020E0  2192               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3386  0020E2  6EF7               	movwf	tblptrh,c
  3387  0020E4                     	if	0	;There are less than 3 active tblptr bytes
  3388  0020E4                     	endif
  3389  0020E4  0008               	tblrd		*
  3390  0020E6  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
  3391  0020EA  0E00               	movlw	0
  3392  0020EC  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3393  0020EE  0E04               	movlw	4
  3394  0020F0  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3395  0020F2  ECFA  F01E         	call	_StoreIntInEeprom	;wreg free
  3396                           
  3397                           ;SyntApp.c: 101: cntRegUpdateTx ++;
  3398  0020F6  2A3A               	incf	_cntRegUpdateTx,f,c
  3399                           
  3400                           ;SyntApp.c: 102: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_TX_
      +                          REG);
  3401  0020F8  0E48               	movlw	72
  3402  0020FA  6E24               	movwf	SendAckMessage@inRequest,c
  3403  0020FC  0E04               	movlw	4
  3404  0020FE  EC73  F01D         	call	_SendAckMessage
  3405                           
  3406                           ;SyntApp.c: 103: }
  3407  002102  0012               	return	
  3408  002104                     l524:
  3409                           
  3410                           ;SyntApp.c: 104: else
  3411                           ;SyntApp.c: 105: {
  3412                           ;SyntApp.c: 106: cntRegUpdateTx = 0;
  3413  002104  0E00               	movlw	0
  3414  002106  6E3A               	movwf	_cntRegUpdateTx,c
  3415                           
  3416                           ;SyntApp.c: 107: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_SET);
  3417  002108  0E42               	movlw	66
  3418  00210A  6E24               	movwf	SendAckMessage@inRequest,c
  3419  00210C  0E04               	movlw	4
  3420  00210E  EC73  F01D         	call	_SendAckMessage
  3421                           
  3422                           ;SyntApp.c: 108: }
  3423                           ;SyntApp.c: 109: }
  3424  002112  0012               	return	
  3425  002114                     l523:
  3426                           
  3427                           ;SyntApp.c: 110: else if(cType == SYNTH_RX)
  3428  002114  0100               	movlb	0	; () banked
  3429  002116  058C               	decf	UpdateSynthFreq@cType& (0+255),w,b
  3430  002118  A4D8               	btfss	status,2,c
  3431  00211A  0012               	return	
  3432                           
  3433                           ; BSR set to: 0
  3434                           ;SyntApp.c: 111: {
  3435                           ;SyntApp.c: 112: if(cntRegUpdateRx < 0x9)
  3436  00211C  0E09               	movlw	9
  3437  00211E  6039               	cpfslt	_cntRegUpdateRx,c
  3438  002120  D02D               	goto	l528
  3439                           
  3440                           ; BSR set to: 0
  3441                           ;SyntApp.c: 113: {
  3442                           ;SyntApp.c: 114: SWSPI_send_word(cType, retVal.num, 3);
  3443  002122  C08D  F029         	movff	UpdateSynthFreq@retVal,SWSPI_send_word@data
  3444  002126  C08E  F02A         	movff	UpdateSynthFreq@retVal+1,SWSPI_send_word@data+1
  3445  00212A  C08F  F02B         	movff	UpdateSynthFreq@retVal+2,SWSPI_send_word@data+2
  3446  00212E  C090  F02C         	movff	UpdateSynthFreq@retVal+3,SWSPI_send_word@data+3
  3447  002132  0E03               	movlw	3
  3448  002134  6E2D               	movwf	SWSPI_send_word@dataSize,c
  3449  002136  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3450  002138  EC02  F018         	call	_SWSPI_send_word
  3451                           
  3452                           ;SyntApp.c: 115: StoreIntInEeprom(retVal.num, (0x20) | SYNTH_ADDRES[retVal.con], 4);
  3453  00213C  C08D  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3454  002140  C08E  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3455  002144  C08F  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3456  002148  C090  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3457  00214C  0E39               	movlw	low _SYNTH_ADDRES
  3458  00214E  0100               	movlb	0	; () banked
  3459  002150  2591               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3460  002152  6EF6               	movwf	tblptrl,c
  3461  002154  0E06               	movlw	high _SYNTH_ADDRES
  3462  002156  2192               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3463  002158  6EF7               	movwf	tblptrh,c
  3464  00215A                     	if	0	;There are less than 3 active tblptr bytes
  3465  00215A                     	endif
  3466  00215A  0008               	tblrd		*
  3467  00215C  50F5               	movf	tablat,w,c
  3468  00215E  0920               	iorlw	32
  3469  002160  6E25               	movwf	StoreIntInEeprom@address,c
  3470  002162  0E00               	movlw	0
  3471  002164  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3472  002166  0E04               	movlw	4
  3473  002168  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3474  00216A  ECFA  F01E         	call	_StoreIntInEeprom	;wreg free
  3475                           
  3476                           ;SyntApp.c: 116: cntRegUpdateRx ++;
  3477  00216E  2A39               	incf	_cntRegUpdateRx,f,c
  3478                           
  3479                           ;SyntApp.c: 117: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_RX_
      +                          REG);
  3480  002170  0E49               	movlw	73
  3481  002172  6E24               	movwf	SendAckMessage@inRequest,c
  3482  002174  0E04               	movlw	4
  3483  002176  EC73  F01D         	call	_SendAckMessage
  3484                           
  3485                           ;SyntApp.c: 118: }
  3486  00217A  0012               	return	
  3487  00217C                     l528:
  3488                           
  3489                           ;SyntApp.c: 119: else
  3490                           ;SyntApp.c: 120: {
  3491                           ;SyntApp.c: 121: cntRegUpdateRx = 0;
  3492  00217C  0E00               	movlw	0
  3493  00217E  6E39               	movwf	_cntRegUpdateRx,c
  3494                           
  3495                           ;SyntApp.c: 122: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_SET);
  3496  002180  0E43               	movlw	67
  3497  002182  6E24               	movwf	SendAckMessage@inRequest,c
  3498  002184  0E04               	movlw	4
  3499  002186  EC73  F01D         	call	_SendAckMessage
  3500  00218A  0012               	return	
  3501  00218C                     __end_of_UpdateSynthFreq:
  3502                           	opt stack 0
  3503                           tosu	equ	0xFFF
  3504                           tosh	equ	0xFFE
  3505                           tosl	equ	0xFFD
  3506                           pclath	equ	0xFFA
  3507                           tblptru	equ	0xFF8
  3508                           tblptrh	equ	0xFF7
  3509                           tblptrl	equ	0xFF6
  3510                           tablat	equ	0xFF5
  3511                           postinc0	equ	0xFEE
  3512                           plusw0	equ	0xFEB
  3513                           wreg	equ	0xFE8
  3514                           postdec1	equ	0xFE5
  3515                           fsr1l	equ	0xFE1
  3516                           indf2	equ	0xFDF
  3517                           postinc2	equ	0xFDE
  3518                           plusw2	equ	0xFDB
  3519                           fsr2h	equ	0xFDA
  3520                           fsr2l	equ	0xFD9
  3521                           status	equ	0xFD8
  3522                           
  3523 ;; *************** function _SynthReadData *****************
  3524 ;; Defined at:
  3525 ;;		line 161 in file "SyntApp.c"
  3526 ;; Parameters:    Size  Location     Type
  3527 ;;  cType           1    wreg     enum E1
  3528 ;;  data            2  104[BANK0 ] PTR unsigned char 
  3529 ;; Auto vars:     Size  Location     Type
  3530 ;;  cType           1   52[BANK2 ] enum E1
  3531 ;;  data            1   29[BANK2 ] unsigned char 
  3532 ;;  TxMsg          29    0[BANK2 ] unsigned char [29]
  3533 ;;  eepromDataAr   20   32[BANK2 ] unsigned long [5]
  3534 ;;  byteNum         1   54[BANK2 ] unsigned char 
  3535 ;;  regNum          1   53[BANK2 ] unsigned char 
  3536 ;; Return value:  Size  Location     Type
  3537 ;;                  1    wreg      void 
  3538 ;; Registers used:
  3539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3540 ;; Tracked objects:
  3541 ;;		On entry : 0/0
  3542 ;;		On exit  : 0/0
  3543 ;;		Unchanged: 0/0
  3544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3545 ;;      Params:         0       2       0       0       0       0       0
  3546 ;;      Locals:         0       0       0      55       0       0       0
  3547 ;;      Temps:          0       0       0       0       0       0       0
  3548 ;;      Totals:         0       2       0      55       0       0       0
  3549 ;;Total ram usage:       57 bytes
  3550 ;; Hardware stack levels used:    1
  3551 ;; Hardware stack levels required when called:   10
  3552 ;; This function calls:
  3553 ;;		_ReadIntFromEeprom
  3554 ;;		_WriteUartMessage
  3555 ;;		_ZeroArray
  3556 ;;		_crc8
  3557 ;;		_make8
  3558 ;; This function is called by:
  3559 ;;		_GroupSynthesizers
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563                           	psect	text10
  3564  000A9C                     __ptext10:
  3565                           	opt stack 0
  3566  000A9C                     _SynthReadData:
  3567                           	opt stack 18
  3568                           
  3569                           ;incstack = 0
  3570                           ;SynthReadData@cType stored from wreg
  3571  000A9C  0102               	movlb	2	; () banked
  3572  000A9E  6F7A               	movwf	SynthReadData@cType& (0+255),b
  3573                           
  3574                           ;SyntApp.c: 163: uint32_t eepromDataArray[5];
  3575                           ;SyntApp.c: 164: ZeroArray(eepromDataArray, sizeof(eepromDataArray));
  3576  000AA0  0E66               	movlw	low SynthReadData@eepromDataArray
  3577  000AA2  6E20               	movwf	ZeroArray@array,c
  3578  000AA4  0E02               	movlw	high SynthReadData@eepromDataArray
  3579  000AA6  6E21               	movwf	ZeroArray@array+1,c
  3580  000AA8  0E00               	movlw	0
  3581  000AAA  6E23               	movwf	ZeroArray@size+1,c
  3582  000AAC  0E14               	movlw	20
  3583  000AAE  6E22               	movwf	ZeroArray@size,c
  3584  000AB0  EC1B  F021         	call	_ZeroArray	;wreg free
  3585                           
  3586                           ;SyntApp.c: 165: uint8_t regNum = 0, byteNum = 0;
  3587  000AB4  0E00               	movlw	0
  3588  000AB6  0102               	movlb	2	; () banked
  3589  000AB8  6F7B               	movwf	SynthReadData@regNum& (0+255),b
  3590                           
  3591                           ; BSR set to: 2
  3592  000ABA  0E00               	movlw	0
  3593  000ABC  6F7C               	movwf	SynthReadData@byteNum& (0+255),b
  3594                           
  3595                           ;SyntApp.c: 166: char TxMsg[5 * 5 + 2 + 1 + 1];
  3596                           ;SyntApp.c: 167: ZeroArray(TxMsg, 5 * 5 + 2 + 1 + 1);
  3597  000ABE  0E46               	movlw	low SynthReadData@TxMsg
  3598  000AC0  6E20               	movwf	ZeroArray@array,c
  3599  000AC2  0E02               	movlw	high SynthReadData@TxMsg
  3600  000AC4  6E21               	movwf	ZeroArray@array+1,c
  3601  000AC6  0E00               	movlw	0
  3602  000AC8  6E23               	movwf	ZeroArray@size+1,c
  3603  000ACA  0E1D               	movlw	29
  3604  000ACC  6E22               	movwf	ZeroArray@size,c
  3605  000ACE  EC1B  F021         	call	_ZeroArray	;wreg free
  3606                           
  3607                           ;SyntApp.c: 170: TxMsg[(0)] = (0x24);
  3608  000AD2  0E24               	movlw	36
  3609  000AD4  0102               	movlb	2	; () banked
  3610  000AD6  6F46               	movwf	SynthReadData@TxMsg& (0+255),b
  3611                           
  3612                           ; BSR set to: 2
  3613                           ;SyntApp.c: 171: TxMsg[(1)] = SYNTH_MSG;
  3614  000AD8  0E04               	movlw	4
  3615  000ADA  6F47               	movwf	(SynthReadData@TxMsg+1)& (0+255),b
  3616                           
  3617                           ; BSR set to: 2
  3618                           ;SyntApp.c: 172: TxMsg[(3)] = 5 * 5 + 2 - (0x4);
  3619  000ADC  0E17               	movlw	23
  3620  000ADE  6F49               	movwf	(SynthReadData@TxMsg+3)& (0+255),b
  3621                           
  3622                           ; BSR set to: 2
  3623                           ;SyntApp.c: 174: if(cType == SYNTH_TX)
  3624  000AE0  517A               	movf	SynthReadData@cType& (0+255),w,b
  3625  000AE2  A4D8               	btfss	status,2,c
  3626  000AE4  D064               	goto	l543
  3627                           
  3628                           ; BSR set to: 2
  3629                           ;SyntApp.c: 175: {
  3630                           ;SyntApp.c: 176: TxMsg[(2)] = SYNTH_DOWN_READ_DATA;
  3631  000AE6  0E47               	movlw	71
  3632  000AE8  6F48               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  3633                           
  3634                           ; BSR set to: 2
  3635                           ;SyntApp.c: 177: eepromDataArray[0] = ReadIntFromEeprom((0) | SYNTH_ADDRES[0], 4);
  3636  000AEA  0E00               	movlw	0
  3637  000AEC  0100               	movlb	0	; () banked
  3638  000AEE  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3639  000AF0  0E04               	movlw	4
  3640  000AF2  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3641  000AF4  0E39               	movlw	low _SYNTH_ADDRES
  3642  000AF6  6EF6               	movwf	tblptrl,c
  3643  000AF8                     	if	1	;There is more than 1 active tblptr byte
  3644  000AF8  0E06               	movlw	high _SYNTH_ADDRES
  3645  000AFA  6EF7               	movwf	tblptrh,c
  3646  000AFC                     	endif
  3647  000AFC                     	if	0	;There are less than 3 active tblptr bytes
  3648  000AFC                     	endif
  3649  000AFC  0008               	tblrd		*
  3650  000AFE  50F5               	movf	tablat,w,c
  3651  000B00  ECAC  F00F         	call	_ReadIntFromEeprom
  3652  000B04  C0B1  F266         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray
  3653  000B08  C0B2  F267         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+1
  3654  000B0C  C0B3  F268         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+2
  3655  000B10  C0B4  F269         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+3
  3656                           
  3657                           ;SyntApp.c: 178: eepromDataArray[1] = ReadIntFromEeprom((0) | SYNTH_ADDRES[1], 4);
  3658  000B14  0E00               	movlw	0
  3659  000B16  0100               	movlb	0	; () banked
  3660  000B18  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3661  000B1A  0E04               	movlw	4
  3662  000B1C  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3663  000B1E  0E3A               	movlw	low (_SYNTH_ADDRES+1)
  3664  000B20  6EF6               	movwf	tblptrl,c
  3665  000B22  0E06               	movlw	high (_SYNTH_ADDRES+1)
  3666  000B24  6EF7               	movwf	tblptrh,c
  3667  000B26                     	if	0	;tblptru may be non-zero
  3668  000B26                     	endif
  3669  000B26                     	if	0	;tblptru may be non-zero
  3670  000B26                     	endif
  3671  000B26  0008               	tblrd		*
  3672  000B28  50F5               	movf	tablat,w,c
  3673  000B2A  ECAC  F00F         	call	_ReadIntFromEeprom
  3674  000B2E  C0B1  F26A         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+4
  3675  000B32  C0B2  F26B         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+5
  3676  000B36  C0B3  F26C         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+6
  3677  000B3A  C0B4  F26D         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+7
  3678                           
  3679                           ;SyntApp.c: 179: eepromDataArray[2] = ReadIntFromEeprom((0) | SYNTH_ADDRES[2], 4);
  3680  000B3E  0E00               	movlw	0
  3681  000B40  0100               	movlb	0	; () banked
  3682  000B42  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3683  000B44  0E04               	movlw	4
  3684  000B46  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3685  000B48  0E3B               	movlw	low (_SYNTH_ADDRES+2)
  3686  000B4A  6EF6               	movwf	tblptrl,c
  3687  000B4C  0E06               	movlw	high (_SYNTH_ADDRES+2)
  3688  000B4E  6EF7               	movwf	tblptrh,c
  3689  000B50                     	if	0	;tblptru may be non-zero
  3690  000B50                     	endif
  3691  000B50                     	if	0	;tblptru may be non-zero
  3692  000B50                     	endif
  3693  000B50  0008               	tblrd		*
  3694  000B52  50F5               	movf	tablat,w,c
  3695  000B54  ECAC  F00F         	call	_ReadIntFromEeprom
  3696  000B58  C0B1  F26E         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+8
  3697  000B5C  C0B2  F26F         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+9
  3698  000B60  C0B3  F270         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+10
  3699  000B64  C0B4  F271         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+11
  3700                           
  3701                           ;SyntApp.c: 180: eepromDataArray[3] = ReadIntFromEeprom((0) | SYNTH_ADDRES[4], 4);
  3702  000B68  0E00               	movlw	0
  3703  000B6A  0100               	movlb	0	; () banked
  3704  000B6C  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3705  000B6E  0E04               	movlw	4
  3706  000B70  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3707  000B72  0E3D               	movlw	low (_SYNTH_ADDRES+4)
  3708  000B74  6EF6               	movwf	tblptrl,c
  3709  000B76  0E06               	movlw	high (_SYNTH_ADDRES+4)
  3710  000B78  6EF7               	movwf	tblptrh,c
  3711  000B7A                     	if	0	;tblptru may be non-zero
  3712  000B7A                     	endif
  3713  000B7A                     	if	0	;tblptru may be non-zero
  3714  000B7A                     	endif
  3715  000B7A  0008               	tblrd		*
  3716  000B7C  50F5               	movf	tablat,w,c
  3717  000B7E  ECAC  F00F         	call	_ReadIntFromEeprom
  3718  000B82  C0B1  F272         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+12
  3719  000B86  C0B2  F273         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+13
  3720  000B8A  C0B3  F274         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+14
  3721  000B8E  C0B4  F275         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+15
  3722                           
  3723                           ;SyntApp.c: 181: eepromDataArray[4] = ReadIntFromEeprom((0) | SYNTH_ADDRES[0xb], 4);
  3724  000B92  0E00               	movlw	0
  3725  000B94  0100               	movlb	0	; () banked
  3726  000B96  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3727  000B98  0E04               	movlw	4
  3728  000B9A  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3729  000B9C  0E44               	movlw	low (_SYNTH_ADDRES+11)
  3730  000B9E  6EF6               	movwf	tblptrl,c
  3731  000BA0  0E06               	movlw	high (_SYNTH_ADDRES+11)
  3732  000BA2  6EF7               	movwf	tblptrh,c
  3733  000BA4                     	if	0	;tblptru may be non-zero
  3734  000BA4                     	endif
  3735  000BA4                     	if	0	;tblptru may be non-zero
  3736  000BA4                     	endif
  3737  000BA4  0008               	tblrd		*
  3738  000BA6  50F5               	movf	tablat,w,c
  3739  000BA8  ECAC  F00F         	call	_ReadIntFromEeprom
  3740  000BAC  D06C               	goto	L2
  3741  000BAE                     l543:
  3742                           
  3743                           ;SyntApp.c: 183: else if (cType == SYNTH_RX)
  3744  000BAE  0102               	movlb	2	; () banked
  3745  000BB0  057A               	decf	SynthReadData@cType& (0+255),w,b
  3746  000BB2  A4D8               	btfss	status,2,c
  3747  000BB4  D070               	goto	l545
  3748                           
  3749                           ; BSR set to: 2
  3750                           ;SyntApp.c: 184: {
  3751                           ;SyntApp.c: 185: TxMsg[(2)] = SYNTH_UP_READ_DATA;
  3752  000BB6  0E46               	movlw	70
  3753  000BB8  6F48               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  3754                           
  3755                           ; BSR set to: 2
  3756                           ;SyntApp.c: 186: eepromDataArray[0] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[0], 4);
  3757  000BBA  0E00               	movlw	0
  3758  000BBC  0100               	movlb	0	; () banked
  3759  000BBE  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3760  000BC0  0E04               	movlw	4
  3761  000BC2  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3762  000BC4  0E39               	movlw	low _SYNTH_ADDRES
  3763  000BC6  6EF6               	movwf	tblptrl,c
  3764  000BC8                     	if	1	;There is more than 1 active tblptr byte
  3765  000BC8  0E06               	movlw	high _SYNTH_ADDRES
  3766  000BCA  6EF7               	movwf	tblptrh,c
  3767  000BCC                     	endif
  3768  000BCC                     	if	0	;There are less than 3 active tblptr bytes
  3769  000BCC                     	endif
  3770  000BCC  0008               	tblrd		*
  3771  000BCE  50F5               	movf	tablat,w,c
  3772  000BD0  0920               	iorlw	32
  3773  000BD2  ECAC  F00F         	call	_ReadIntFromEeprom
  3774  000BD6  C0B1  F266         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray
  3775  000BDA  C0B2  F267         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+1
  3776  000BDE  C0B3  F268         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+2
  3777  000BE2  C0B4  F269         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+3
  3778                           
  3779                           ;SyntApp.c: 187: eepromDataArray[1] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[1], 4);
  3780  000BE6  0E00               	movlw	0
  3781  000BE8  0100               	movlb	0	; () banked
  3782  000BEA  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3783  000BEC  0E04               	movlw	4
  3784  000BEE  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3785  000BF0  0E3A               	movlw	low (_SYNTH_ADDRES+1)
  3786  000BF2  6EF6               	movwf	tblptrl,c
  3787  000BF4  0E06               	movlw	high (_SYNTH_ADDRES+1)
  3788  000BF6  6EF7               	movwf	tblptrh,c
  3789  000BF8                     	if	0	;tblptru may be non-zero
  3790  000BF8                     	endif
  3791  000BF8                     	if	0	;tblptru may be non-zero
  3792  000BF8                     	endif
  3793  000BF8  0008               	tblrd		*
  3794  000BFA  50F5               	movf	tablat,w,c
  3795  000BFC  0920               	iorlw	32
  3796  000BFE  ECAC  F00F         	call	_ReadIntFromEeprom
  3797  000C02  C0B1  F26A         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+4
  3798  000C06  C0B2  F26B         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+5
  3799  000C0A  C0B3  F26C         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+6
  3800  000C0E  C0B4  F26D         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+7
  3801                           
  3802                           ;SyntApp.c: 188: eepromDataArray[2] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[2], 4);
  3803  000C12  0E00               	movlw	0
  3804  000C14  0100               	movlb	0	; () banked
  3805  000C16  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3806  000C18  0E04               	movlw	4
  3807  000C1A  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3808  000C1C  0E3B               	movlw	low (_SYNTH_ADDRES+2)
  3809  000C1E  6EF6               	movwf	tblptrl,c
  3810  000C20  0E06               	movlw	high (_SYNTH_ADDRES+2)
  3811  000C22  6EF7               	movwf	tblptrh,c
  3812  000C24                     	if	0	;tblptru may be non-zero
  3813  000C24                     	endif
  3814  000C24                     	if	0	;tblptru may be non-zero
  3815  000C24                     	endif
  3816  000C24  0008               	tblrd		*
  3817  000C26  50F5               	movf	tablat,w,c
  3818  000C28  0920               	iorlw	32
  3819  000C2A  ECAC  F00F         	call	_ReadIntFromEeprom
  3820  000C2E  C0B1  F26E         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+8
  3821  000C32  C0B2  F26F         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+9
  3822  000C36  C0B3  F270         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+10
  3823  000C3A  C0B4  F271         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+11
  3824                           
  3825                           ;SyntApp.c: 189: eepromDataArray[3] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[4], 4);
  3826  000C3E  0E00               	movlw	0
  3827  000C40  0100               	movlb	0	; () banked
  3828  000C42  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3829  000C44  0E04               	movlw	4
  3830  000C46  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3831  000C48  0E3D               	movlw	low (_SYNTH_ADDRES+4)
  3832  000C4A  6EF6               	movwf	tblptrl,c
  3833  000C4C  0E06               	movlw	high (_SYNTH_ADDRES+4)
  3834  000C4E  6EF7               	movwf	tblptrh,c
  3835  000C50                     	if	0	;tblptru may be non-zero
  3836  000C50                     	endif
  3837  000C50                     	if	0	;tblptru may be non-zero
  3838  000C50                     	endif
  3839  000C50  0008               	tblrd		*
  3840  000C52  50F5               	movf	tablat,w,c
  3841  000C54  0920               	iorlw	32
  3842  000C56  ECAC  F00F         	call	_ReadIntFromEeprom
  3843  000C5A  C0B1  F272         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+12
  3844  000C5E  C0B2  F273         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+13
  3845  000C62  C0B3  F274         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+14
  3846  000C66  C0B4  F275         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+15
  3847                           
  3848                           ;SyntApp.c: 190: eepromDataArray[4] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[0xb], 4);
  3849  000C6A  0E00               	movlw	0
  3850  000C6C  0100               	movlb	0	; () banked
  3851  000C6E  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3852  000C70  0E04               	movlw	4
  3853  000C72  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3854  000C74  0E44               	movlw	low (_SYNTH_ADDRES+11)
  3855  000C76  6EF6               	movwf	tblptrl,c
  3856  000C78  0E06               	movlw	high (_SYNTH_ADDRES+11)
  3857  000C7A  6EF7               	movwf	tblptrh,c
  3858  000C7C                     	if	0	;tblptru may be non-zero
  3859  000C7C                     	endif
  3860  000C7C                     	if	0	;tblptru may be non-zero
  3861  000C7C                     	endif
  3862  000C7C  0008               	tblrd		*
  3863  000C7E  50F5               	movf	tablat,w,c
  3864  000C80  0920               	iorlw	32
  3865  000C82  ECAC  F00F         	call	_ReadIntFromEeprom
  3866  000C86                     L2:
  3867  000C86  C0B1  F276         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+16
  3868  000C8A  C0B2  F277         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+17
  3869  000C8E  C0B3  F278         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+18
  3870  000C92  C0B4  F279         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+19
  3871  000C96                     l545:
  3872                           
  3873                           ;SyntApp.c: 191: }
  3874                           ;SyntApp.c: 193: for(regNum = 0; regNum < 5; regNum++)
  3875  000C96  0E00               	movlw	0
  3876  000C98  0102               	movlb	2	; () banked
  3877  000C9A  6F7B               	movwf	SynthReadData@regNum& (0+255),b
  3878  000C9C                     l8467:
  3879                           
  3880                           ; BSR set to: 2
  3881  000C9C  0E04               	movlw	4
  3882  000C9E  657B               	cpfsgt	SynthReadData@regNum& (0+255),b
  3883  000CA0  D001               	goto	l546
  3884  000CA2  D032               	goto	u8600
  3885  000CA4                     l546:
  3886                           
  3887                           ; BSR set to: 2
  3888                           ;SyntApp.c: 194: {
  3889                           ;SyntApp.c: 195: for(byteNum = 0; byteNum < (5); byteNum++)
  3890                           
  3891                           ; BSR set to: 2
  3892  000CA4  0E00               	movlw	0
  3893  000CA6  6F7C               	movwf	SynthReadData@byteNum& (0+255),b
  3894  000CA8                     l8473:
  3895                           
  3896                           ; BSR set to: 2
  3897  000CA8  0E04               	movlw	4
  3898  000CAA  657C               	cpfsgt	SynthReadData@byteNum& (0+255),b
  3899  000CAC  D001               	goto	l548
  3900  000CAE  D02A               	goto	u8590
  3901  000CB0                     l548:
  3902                           
  3903                           ; BSR set to: 2
  3904                           ;SyntApp.c: 196: {
  3905                           ;SyntApp.c: 197: uint8_t data = make8(eepromDataArray[regNum], byteNum);
  3906                           
  3907                           ; BSR set to: 2
  3908  000CB0  517B               	movf	SynthReadData@regNum& (0+255),w,b
  3909  000CB2  0D04               	mullw	4
  3910  000CB4  0E66               	movlw	low SynthReadData@eepromDataArray
  3911  000CB6  24F3               	addwf	prodl,w,c
  3912  000CB8  6ED9               	movwf	fsr2l,c
  3913  000CBA  0E02               	movlw	high SynthReadData@eepromDataArray
  3914  000CBC  20F4               	addwfc	prodh,w,c
  3915  000CBE  6EDA               	movwf	fsr2h,c
  3916  000CC0  CFDE F018          	movff	postinc2,make8@data
  3917  000CC4  CFDE F019          	movff	postinc2,make8@data+1
  3918  000CC8  CFDE F01A          	movff	postinc2,make8@data+2
  3919  000CCC  CFDE F01B          	movff	postinc2,make8@data+3
  3920  000CD0  C27C  F01C         	movff	SynthReadData@byteNum,make8@dataLocation
  3921  000CD4  EC15  F01C         	call	_make8	;wreg free
  3922  000CD8  0102               	movlb	2	; () banked
  3923  000CDA  6F63               	movwf	SynthReadData@data_987& (0+255),b
  3924                           
  3925                           ; BSR set to: 2
  3926                           ;SyntApp.c: 198: TxMsg[(0x4) + (5)*regNum + byteNum] = data;
  3927  000CDC  517B               	movf	SynthReadData@regNum& (0+255),w,b
  3928  000CDE  0D05               	mullw	5
  3929  000CE0  517C               	movf	SynthReadData@byteNum& (0+255),w,b
  3930  000CE2  26F3               	addwf	prodl,f,c
  3931  000CE4  0E00               	movlw	0
  3932  000CE6  22F4               	addwfc	prodh,f,c
  3933  000CE8  0E04               	movlw	4
  3934  000CEA  26F3               	addwf	prodl,f,c
  3935  000CEC  0E00               	movlw	0
  3936  000CEE  22F4               	addwfc	prodh,f,c
  3937  000CF0  0E46               	movlw	low SynthReadData@TxMsg
  3938  000CF2  24F3               	addwf	prodl,w,c
  3939  000CF4  6ED9               	movwf	fsr2l,c
  3940  000CF6  0E02               	movlw	high SynthReadData@TxMsg
  3941  000CF8  20F4               	addwfc	prodh,w,c
  3942  000CFA  6EDA               	movwf	fsr2h,c
  3943  000CFC  C263  FFDF         	movff	SynthReadData@data_987,indf2
  3944                           
  3945                           ; BSR set to: 2
  3946  000D00  2B7C               	incf	SynthReadData@byteNum& (0+255),f,b
  3947  000D02  D7D2               	goto	l8473
  3948  000D04                     u8590:
  3949                           
  3950                           ; BSR set to: 2
  3951                           
  3952                           ; BSR set to: 2
  3953  000D04  2B7B               	incf	SynthReadData@regNum& (0+255),f,b
  3954  000D06  D7CA               	goto	l8467
  3955  000D08                     u8600:
  3956                           
  3957                           ; BSR set to: 2
  3958                           ;SyntApp.c: 199: }
  3959                           ;SyntApp.c: 200: }
  3960                           ;SyntApp.c: 202: TxMsg[5 * 5 + 2] = cType == SYNTH_TX ? SynthTxOper : SynthRxOper;
  3961                           
  3962                           ; BSR set to: 2
  3963  000D08  517A               	movf	SynthReadData@cType& (0+255),w,b
  3964  000D0A  B4D8               	btfsc	status,2,c
  3965  000D0C  D003               	goto	l551
  3966                           
  3967                           ; BSR set to: 2
  3968  000D0E  C044  F264         	movff	_SynthRxOper,_SynthReadData$988
  3969  000D12  D002               	goto	L1
  3970  000D14                     l551:
  3971                           
  3972                           ; BSR set to: 2
  3973  000D14  C045  F264         	movff	_SynthTxOper,_SynthReadData$988
  3974  000D18                     L1:
  3975  000D18  6B65               	clrf	(_SynthReadData$988+1)& (0+255),b
  3976                           
  3977                           ; BSR set to: 2
  3978  000D1A  C264  F261         	movff	_SynthReadData$988,SynthReadData@TxMsg+27
  3979                           
  3980                           ; BSR set to: 2
  3981                           ;SyntApp.c: 203: TxMsg[5 * 5 + 2 + 1] = crc8(TxMsg, 5 * 5 + 2 + 1);
  3982  000D1E  0E46               	movlw	low SynthReadData@TxMsg
  3983  000D20  6E18               	movwf	crc8@dataArray,c
  3984  000D22  0E02               	movlw	high SynthReadData@TxMsg
  3985  000D24  6E19               	movwf	crc8@dataArray+1,c
  3986  000D26  0E00               	movlw	0
  3987  000D28  6E1B               	movwf	crc8@dataSize+1,c
  3988  000D2A  0E1C               	movlw	28
  3989  000D2C  6E1A               	movwf	crc8@dataSize,c
  3990  000D2E  EC9C  F01D         	call	_crc8	;wreg free
  3991  000D32  0102               	movlb	2	; () banked
  3992  000D34  6F62               	movwf	(SynthReadData@TxMsg+28)& (0+255),b
  3993                           
  3994                           ; BSR set to: 2
  3995                           ;SyntApp.c: 204: WriteUartMessage(TxMsg, 5 * 5 + 2 + 1 + 1);
  3996  000D36  0E46               	movlw	low SynthReadData@TxMsg
  3997  000D38  6E19               	movwf	WriteUartMessage@dataBuf,c
  3998  000D3A  0E02               	movlw	high SynthReadData@TxMsg
  3999  000D3C  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4000  000D3E  0E00               	movlw	0
  4001  000D40  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4002  000D42  0E1D               	movlw	29
  4003  000D44  6E1B               	movwf	WriteUartMessage@dataSize,c
  4004  000D46  EC4E  F01F         	call	_WriteUartMessage	;wreg free
  4005  000D4A  0012               	return		;funcret
  4006  000D4C                     __end_of_SynthReadData:
  4007                           	opt stack 0
  4008                           tosu	equ	0xFFF
  4009                           tosh	equ	0xFFE
  4010                           tosl	equ	0xFFD
  4011                           pclath	equ	0xFFA
  4012                           tblptru	equ	0xFF8
  4013                           tblptrh	equ	0xFF7
  4014                           tblptrl	equ	0xFF6
  4015                           tablat	equ	0xFF5
  4016                           prodh	equ	0xFF4
  4017                           prodl	equ	0xFF3
  4018                           postinc0	equ	0xFEE
  4019                           plusw0	equ	0xFEB
  4020                           wreg	equ	0xFE8
  4021                           postdec1	equ	0xFE5
  4022                           fsr1l	equ	0xFE1
  4023                           indf2	equ	0xFDF
  4024                           postinc2	equ	0xFDE
  4025                           plusw2	equ	0xFDB
  4026                           fsr2h	equ	0xFDA
  4027                           fsr2l	equ	0xFD9
  4028                           status	equ	0xFD8
  4029                           
  4030 ;; *************** function _SetSynthOper *****************
  4031 ;; Defined at:
  4032 ;;		line 130 in file "SyntApp.c"
  4033 ;; Parameters:    Size  Location     Type
  4034 ;;  cType           1    wreg     enum E1
  4035 ;; Auto vars:     Size  Location     Type
  4036 ;;  cType           1  111[BANK0 ] enum E1
  4037 ;; Return value:  Size  Location     Type
  4038 ;;                  1    wreg      void 
  4039 ;; Registers used:
  4040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4041 ;; Tracked objects:
  4042 ;;		On entry : 0/0
  4043 ;;		On exit  : 0/0
  4044 ;;		Unchanged: 0/0
  4045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4046 ;;      Params:         0       0       0       0       0       0       0
  4047 ;;      Locals:         0       1       0       0       0       0       0
  4048 ;;      Temps:          0       0       0       0       0       0       0
  4049 ;;      Totals:         0       1       0       0       0       0       0
  4050 ;;Total ram usage:        1 bytes
  4051 ;; Hardware stack levels used:    1
  4052 ;; Hardware stack levels required when called:   11
  4053 ;; This function calls:
  4054 ;;		_InitSynth
  4055 ;;		_SendAckMessage
  4056 ;;		_SwSpi_Set_CE_Pin
  4057 ;; This function is called by:
  4058 ;;		_GroupSynthesizers
  4059 ;; This function uses a non-reentrant model
  4060 ;;
  4061                           
  4062                           	psect	text11
  4063  0033F8                     __ptext11:
  4064                           	opt stack 0
  4065  0033F8                     _SetSynthOper:
  4066                           	opt stack 17
  4067                           
  4068                           ;incstack = 0
  4069                           ;SetSynthOper@cType stored from wreg
  4070  0033F8  0100               	movlb	0	; () banked
  4071  0033FA  6FCF               	movwf	SetSynthOper@cType& (0+255),b
  4072                           
  4073                           ;SyntApp.c: 132: if(cType == SYNTH_TX)
  4074  0033FC  0100               	movlb	0	; () banked
  4075  0033FE  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4076  003400  A4D8               	btfss	status,2,c
  4077  003402  D01A               	goto	l533
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;SyntApp.c: 133: {
  4081                           ;SyntApp.c: 134: SynthTxOper = !SynthTxOper;
  4082  003404  5045               	movf	_SynthTxOper,w,c
  4083  003406  A4D8               	btfss	status,2,c
  4084  003408  D002               	goto	u8480
  4085  00340A  0E01               	movlw	1
  4086  00340C  D001               	goto	u8490
  4087  00340E                     u8480:
  4088  00340E  0E00               	movlw	0
  4089  003410                     u8490:
  4090  003410  6E45               	movwf	_SynthTxOper,c
  4091                           
  4092                           ;SyntApp.c: 135: if(SynthTxOper)
  4093  003412  5045               	movf	_SynthTxOper,w,c
  4094  003414  B4D8               	btfsc	status,2,c
  4095  003416  D004               	goto	l534
  4096                           
  4097                           ; BSR set to: 0
  4098                           ;SyntApp.c: 136: {
  4099                           ;SyntApp.c: 137: InitSynth(cType);
  4100  003418  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4101  00341A  ECA6  F006         	call	_InitSynth
  4102                           
  4103                           ;SyntApp.c: 138: }
  4104  00341E  D006               	goto	l535
  4105  003420                     l534:
  4106                           
  4107                           ;SyntApp.c: 139: else
  4108                           ;SyntApp.c: 140: {
  4109                           ;SyntApp.c: 141: SwSpi_Set_CE_Pin(cType, 0);
  4110  003420  0E00               	movlw	0
  4111  003422  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  4112  003424  0100               	movlb	0	; () banked
  4113  003426  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4114  003428  EC86  F01E         	call	_SwSpi_Set_CE_Pin
  4115  00342C                     l535:
  4116                           
  4117                           ;SyntApp.c: 142: }
  4118                           ;SyntApp.c: 143: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_OPER);
  4119  00342C  0E45               	movlw	69
  4120  00342E  6E24               	movwf	SendAckMessage@inRequest,c
  4121  003430  0E04               	movlw	4
  4122  003432  EC73  F01D         	call	_SendAckMessage
  4123                           
  4124                           ;SyntApp.c: 144: }
  4125  003436  0012               	return	
  4126  003438                     l533:
  4127                           
  4128                           ;SyntApp.c: 145: else if (cType == SYNTH_RX)
  4129  003438  0100               	movlb	0	; () banked
  4130  00343A  05CF               	decf	SetSynthOper@cType& (0+255),w,b
  4131  00343C  A4D8               	btfss	status,2,c
  4132  00343E  0012               	return	
  4133                           
  4134                           ; BSR set to: 0
  4135                           ;SyntApp.c: 146: {
  4136                           ;SyntApp.c: 147: SynthRxOper = !SynthRxOper;
  4137  003440  5044               	movf	_SynthRxOper,w,c
  4138  003442  A4D8               	btfss	status,2,c
  4139  003444  D002               	goto	u8520
  4140  003446  0E01               	movlw	1
  4141  003448  D001               	goto	u8530
  4142  00344A                     u8520:
  4143  00344A  0E00               	movlw	0
  4144  00344C                     u8530:
  4145  00344C  6E44               	movwf	_SynthRxOper,c
  4146                           
  4147                           ;SyntApp.c: 148: if(SynthRxOper)
  4148  00344E  5044               	movf	_SynthRxOper,w,c
  4149  003450  B4D8               	btfsc	status,2,c
  4150  003452  D004               	goto	l538
  4151                           
  4152                           ; BSR set to: 0
  4153                           ;SyntApp.c: 149: {
  4154                           ;SyntApp.c: 150: InitSynth(cType);
  4155  003454  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4156  003456  ECA6  F006         	call	_InitSynth
  4157                           
  4158                           ;SyntApp.c: 151: }
  4159  00345A  D006               	goto	l539
  4160  00345C                     l538:
  4161                           
  4162                           ;SyntApp.c: 152: else
  4163                           ;SyntApp.c: 153: {
  4164                           ;SyntApp.c: 154: SwSpi_Set_CE_Pin(cType, 0);
  4165  00345C  0E00               	movlw	0
  4166  00345E  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  4167  003460  0100               	movlb	0	; () banked
  4168  003462  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4169  003464  EC86  F01E         	call	_SwSpi_Set_CE_Pin
  4170  003468                     l539:
  4171                           
  4172                           ;SyntApp.c: 155: }
  4173                           ;SyntApp.c: 156: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_OPER);
  4174  003468  0E44               	movlw	68
  4175  00346A  6E24               	movwf	SendAckMessage@inRequest,c
  4176  00346C  0E04               	movlw	4
  4177  00346E  EC73  F01D         	call	_SendAckMessage
  4178  003472  0012               	return	
  4179  003474                     __end_of_SetSynthOper:
  4180                           	opt stack 0
  4181                           tosu	equ	0xFFF
  4182                           tosh	equ	0xFFE
  4183                           tosl	equ	0xFFD
  4184                           pclath	equ	0xFFA
  4185                           tblptru	equ	0xFF8
  4186                           tblptrh	equ	0xFF7
  4187                           tblptrl	equ	0xFF6
  4188                           tablat	equ	0xFF5
  4189                           prodh	equ	0xFF4
  4190                           prodl	equ	0xFF3
  4191                           postinc0	equ	0xFEE
  4192                           plusw0	equ	0xFEB
  4193                           wreg	equ	0xFE8
  4194                           postdec1	equ	0xFE5
  4195                           fsr1l	equ	0xFE1
  4196                           indf2	equ	0xFDF
  4197                           postinc2	equ	0xFDE
  4198                           plusw2	equ	0xFDB
  4199                           fsr2h	equ	0xFDA
  4200                           fsr2l	equ	0xFD9
  4201                           status	equ	0xFD8
  4202                           
  4203 ;; *************** function _GetMcuRunTime *****************
  4204 ;; Defined at:
  4205 ;;		line 68 in file "SystemStatus.c"
  4206 ;; Parameters:    Size  Location     Type
  4207 ;;		None
  4208 ;; Auto vars:     Size  Location     Type
  4209 ;;  idx             2   13[BANK0 ] int 
  4210 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  4211 ;;  tempRunTime     4    9[BANK0 ] unsigned long 
  4212 ;; Return value:  Size  Location     Type
  4213 ;;                  1    wreg      void 
  4214 ;; Registers used:
  4215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 0/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4221 ;;      Params:         0       0       0       0       0       0       0
  4222 ;;      Locals:         0      15       0       0       0       0       0
  4223 ;;      Temps:          2       0       0       0       0       0       0
  4224 ;;      Totals:         2      15       0       0       0       0       0
  4225 ;;Total ram usage:       17 bytes
  4226 ;; Hardware stack levels used:    1
  4227 ;; Hardware stack levels required when called:    6
  4228 ;; This function calls:
  4229 ;;		_WriteUartMessage
  4230 ;;		___lldiv
  4231 ;;		___llmod
  4232 ;;		_crc8
  4233 ;; This function is called by:
  4234 ;;		_GroupStatusAndVersion
  4235 ;; This function uses a non-reentrant model
  4236 ;;
  4237                           
  4238                           	psect	text12
  4239  002672                     __ptext12:
  4240                           	opt stack 0
  4241  002672                     _GetMcuRunTime:
  4242                           	opt stack 22
  4243                           
  4244                           ;SystemStatus.c: 71: char TxMsg[(0x4) + (0x4) + 1];
  4245                           ;SystemStatus.c: 74: TxMsg[(0)] = (0x24);
  4246                           
  4247                           ;incstack = 0
  4248  002672  0E24               	movlw	36
  4249  002674  0100               	movlb	0	; () banked
  4250  002676  6F60               	movwf	GetMcuRunTime@TxMsg& (0+255),b
  4251                           
  4252                           ;SystemStatus.c: 75: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4253  002678  0E02               	movlw	2
  4254  00267A  6F61               	movwf	(GetMcuRunTime@TxMsg+1)& (0+255),b
  4255                           
  4256                           ;SystemStatus.c: 76: TxMsg[(2)] = STATUS_MCU_RUN_TIME;
  4257  00267C  0E21               	movlw	33
  4258  00267E  6F62               	movwf	(GetMcuRunTime@TxMsg+2)& (0+255),b
  4259                           
  4260                           ;SystemStatus.c: 77: TxMsg[(3)] = (0x4);
  4261  002680  0E04               	movlw	4
  4262  002682  6F63               	movwf	(GetMcuRunTime@TxMsg+3)& (0+255),b
  4263                           
  4264                           ; BSR set to: 0
  4265                           ;SystemStatus.c: 79: uint32_t tempRunTime = mcuRunTimeIn5SecTicks;
  4266  002684  C128  F069         	movff	_mcuRunTimeIn5SecTicks,GetMcuRunTime@tempRunTime
  4267  002688  C129  F06A         	movff	_mcuRunTimeIn5SecTicks+1,GetMcuRunTime@tempRunTime+1
  4268  00268C  C12A  F06B         	movff	_mcuRunTimeIn5SecTicks+2,GetMcuRunTime@tempRunTime+2
  4269  002690  C12B  F06C         	movff	_mcuRunTimeIn5SecTicks+3,GetMcuRunTime@tempRunTime+3
  4270                           
  4271                           ;SystemStatus.c: 82: for(int idx = 0; idx < (0x4); idx++)
  4272  002694  0E00               	movlw	0
  4273  002696  6F6E               	movwf	(GetMcuRunTime@idx+1)& (0+255),b
  4274  002698  0E00               	movlw	0
  4275  00269A  6F6D               	movwf	GetMcuRunTime@idx& (0+255),b
  4276  00269C                     l8555:
  4277                           
  4278                           ; BSR set to: 0
  4279  00269C  BF6E               	btfsc	(GetMcuRunTime@idx+1)& (0+255),7,b
  4280  00269E  D006               	goto	l1515
  4281  0026A0  516E               	movf	(GetMcuRunTime@idx+1)& (0+255),w,b
  4282  0026A2  E142               	bnz	l8567
  4283  0026A4  0E04               	movlw	4
  4284  0026A6  5D6D               	subwf	GetMcuRunTime@idx& (0+255),w,b
  4285  0026A8  B0D8               	btfsc	status,0,c
  4286  0026AA  D03E               	goto	u8650
  4287  0026AC                     l1515:
  4288                           
  4289                           ; BSR set to: 0
  4290                           ;SystemStatus.c: 83: {
  4291                           ;SystemStatus.c: 84: TxMsg[(0x4) + idx] = tempRunTime % 10;
  4292                           
  4293                           ; BSR set to: 0
  4294  0026AC  0E04               	movlw	4
  4295  0026AE  256D               	addwf	GetMcuRunTime@idx& (0+255),w,b
  4296  0026B0  6E25               	movwf	??_GetMcuRunTime& (0+255),c
  4297  0026B2  0E00               	movlw	0
  4298  0026B4  216E               	addwfc	(GetMcuRunTime@idx+1)& (0+255),w,b
  4299  0026B6  6E26               	movwf	(??_GetMcuRunTime+1)& (0+255),c
  4300  0026B8  0E60               	movlw	low GetMcuRunTime@TxMsg
  4301  0026BA  2425               	addwf	??_GetMcuRunTime,w,c
  4302  0026BC  6ED9               	movwf	fsr2l,c
  4303  0026BE  0E00               	movlw	high GetMcuRunTime@TxMsg
  4304  0026C0  2026               	addwfc	??_GetMcuRunTime+1,w,c
  4305  0026C2  6EDA               	movwf	fsr2h,c
  4306  0026C4  C069  F018         	movff	GetMcuRunTime@tempRunTime,___llmod@dividend
  4307  0026C8  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___llmod@dividend+1
  4308  0026CC  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___llmod@dividend+2
  4309  0026D0  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___llmod@dividend+3
  4310  0026D4  0E0A               	movlw	10
  4311  0026D6  6E1C               	movwf	___llmod@divisor,c
  4312  0026D8  0E00               	movlw	0
  4313  0026DA  6E1D               	movwf	___llmod@divisor+1,c
  4314  0026DC  0E00               	movlw	0
  4315  0026DE  6E1E               	movwf	___llmod@divisor+2,c
  4316  0026E0  0E00               	movlw	0
  4317  0026E2  6E1F               	movwf	___llmod@divisor+3,c
  4318  0026E4  EC52  F01B         	call	___llmod	;wreg free
  4319  0026E8  5018               	movf	?___llmod,w,c
  4320  0026EA  6EDF               	movwf	indf2,c
  4321                           
  4322                           ;SystemStatus.c: 85: tempRunTime /= 10;
  4323  0026EC  C069  F018         	movff	GetMcuRunTime@tempRunTime,___lldiv@dividend
  4324  0026F0  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___lldiv@dividend+1
  4325  0026F4  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___lldiv@dividend+2
  4326  0026F8  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___lldiv@dividend+3
  4327  0026FC  0E0A               	movlw	10
  4328  0026FE  6E1C               	movwf	___lldiv@divisor,c
  4329  002700  0E00               	movlw	0
  4330  002702  6E1D               	movwf	___lldiv@divisor+1,c
  4331  002704  0E00               	movlw	0
  4332  002706  6E1E               	movwf	___lldiv@divisor+2,c
  4333  002708  0E00               	movlw	0
  4334  00270A  6E1F               	movwf	___lldiv@divisor+3,c
  4335  00270C  EC7C  F019         	call	___lldiv	;wreg free
  4336  002710  C018  F069         	movff	?___lldiv,GetMcuRunTime@tempRunTime
  4337  002714  C019  F06A         	movff	?___lldiv+1,GetMcuRunTime@tempRunTime+1
  4338  002718  C01A  F06B         	movff	?___lldiv+2,GetMcuRunTime@tempRunTime+2
  4339  00271C  C01B  F06C         	movff	?___lldiv+3,GetMcuRunTime@tempRunTime+3
  4340  002720  0100               	movlb	0	; () banked
  4341  002722  4B6D               	infsnz	GetMcuRunTime@idx& (0+255),f,b
  4342  002724  2B6E               	incf	(GetMcuRunTime@idx+1)& (0+255),f,b
  4343  002726  D7BA               	goto	l8555
  4344  002728                     u8650:
  4345  002728                     l8567:
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;SystemStatus.c: 86: }
  4349                           ;SystemStatus.c: 88: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4350  002728  0E60               	movlw	low GetMcuRunTime@TxMsg
  4351  00272A  6E18               	movwf	crc8@dataArray,c
  4352  00272C  0E00               	movlw	high GetMcuRunTime@TxMsg
  4353  00272E  6E19               	movwf	crc8@dataArray+1,c
  4354  002730  0E00               	movlw	0
  4355  002732  6E1B               	movwf	crc8@dataSize+1,c
  4356  002734  0E08               	movlw	8
  4357  002736  6E1A               	movwf	crc8@dataSize,c
  4358  002738  EC9C  F01D         	call	_crc8	;wreg free
  4359  00273C  0100               	movlb	0	; () banked
  4360  00273E  6F68               	movwf	(GetMcuRunTime@TxMsg+8)& (0+255),b
  4361                           
  4362                           ; BSR set to: 0
  4363                           ;SystemStatus.c: 90: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4364  002740  0E60               	movlw	low GetMcuRunTime@TxMsg
  4365  002742  6E19               	movwf	WriteUartMessage@dataBuf,c
  4366  002744  0E00               	movlw	high GetMcuRunTime@TxMsg
  4367  002746  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4368  002748  0E00               	movlw	0
  4369  00274A  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4370  00274C  0E09               	movlw	9
  4371  00274E  6E1B               	movwf	WriteUartMessage@dataSize,c
  4372  002750  EC4E  F01F         	call	_WriteUartMessage	;wreg free
  4373  002754  0012               	return		;funcret
  4374  002756                     __end_of_GetMcuRunTime:
  4375                           	opt stack 0
  4376                           tosu	equ	0xFFF
  4377                           tosh	equ	0xFFE
  4378                           tosl	equ	0xFFD
  4379                           pclath	equ	0xFFA
  4380                           tblptru	equ	0xFF8
  4381                           tblptrh	equ	0xFF7
  4382                           tblptrl	equ	0xFF6
  4383                           tablat	equ	0xFF5
  4384                           prodh	equ	0xFF4
  4385                           prodl	equ	0xFF3
  4386                           postinc0	equ	0xFEE
  4387                           plusw0	equ	0xFEB
  4388                           wreg	equ	0xFE8
  4389                           postdec1	equ	0xFE5
  4390                           fsr1l	equ	0xFE1
  4391                           indf2	equ	0xFDF
  4392                           postinc2	equ	0xFDE
  4393                           plusw2	equ	0xFDB
  4394                           fsr2h	equ	0xFDA
  4395                           fsr2l	equ	0xFD9
  4396                           status	equ	0xFD8
  4397                           
  4398 ;; *************** function ___lldiv *****************
  4399 ;; Defined at:
  4400 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4401 ;; Parameters:    Size  Location     Type
  4402 ;;  dividend        4   23[COMRAM] unsigned long 
  4403 ;;  divisor         4   27[COMRAM] unsigned long 
  4404 ;; Auto vars:     Size  Location     Type
  4405 ;;  quotient        4   31[COMRAM] unsigned long 
  4406 ;;  counter         1   35[COMRAM] unsigned char 
  4407 ;; Return value:  Size  Location     Type
  4408 ;;                  4   23[COMRAM] unsigned long 
  4409 ;; Registers used:
  4410 ;;		wreg, status,2, status,0
  4411 ;; Tracked objects:
  4412 ;;		On entry : 0/0
  4413 ;;		On exit  : 0/0
  4414 ;;		Unchanged: 0/0
  4415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4416 ;;      Params:         8       0       0       0       0       0       0
  4417 ;;      Locals:         5       0       0       0       0       0       0
  4418 ;;      Temps:          0       0       0       0       0       0       0
  4419 ;;      Totals:        13       0       0       0       0       0       0
  4420 ;;Total ram usage:       13 bytes
  4421 ;; Hardware stack levels used:    1
  4422 ;; Hardware stack levels required when called:    4
  4423 ;; This function calls:
  4424 ;;		Nothing
  4425 ;; This function is called by:
  4426 ;;		_GetMcuRunTime
  4427 ;; This function uses a non-reentrant model
  4428 ;;
  4429                           
  4430                           	psect	text13
  4431  0032F8                     __ptext13:
  4432                           	opt stack 0
  4433  0032F8                     ___lldiv:
  4434                           	opt stack 23
  4435                           
  4436                           ;incstack = 0
  4437  0032F8  0E00               	movlw	0
  4438  0032FA  6E20               	movwf	___lldiv@quotient,c
  4439  0032FC  0E00               	movlw	0
  4440  0032FE  6E21               	movwf	___lldiv@quotient+1,c
  4441  003300  0E00               	movlw	0
  4442  003302  6E22               	movwf	___lldiv@quotient+2,c
  4443  003304  0E00               	movlw	0
  4444  003306  6E23               	movwf	___lldiv@quotient+3,c
  4445  003308  501C               	movf	___lldiv@divisor,w,c
  4446  00330A  101D               	iorwf	___lldiv@divisor+1,w,c
  4447  00330C  101E               	iorwf	___lldiv@divisor+2,w,c
  4448  00330E  101F               	iorwf	___lldiv@divisor+3,w,c
  4449  003310  B4D8               	btfsc	status,2,c
  4450  003312  D02A               	goto	l1952
  4451  003314  0E01               	movlw	1
  4452  003316  6E24               	movwf	___lldiv@counter,c
  4453  003318  D006               	goto	l1947
  4454  00331A  90D8               	bcf	status,0,c
  4455  00331C  361C               	rlcf	___lldiv@divisor,f,c
  4456  00331E  361D               	rlcf	___lldiv@divisor+1,f,c
  4457  003320  361E               	rlcf	___lldiv@divisor+2,f,c
  4458  003322  361F               	rlcf	___lldiv@divisor+3,f,c
  4459  003324  2A24               	incf	___lldiv@counter,f,c
  4460  003326                     l1947:
  4461  003326  AE1F               	btfss	___lldiv@divisor+3,7,c
  4462  003328  D7F8               	goto	l1948
  4463  00332A                     u8170:
  4464  00332A  90D8               	bcf	status,0,c
  4465  00332C  3620               	rlcf	___lldiv@quotient,f,c
  4466  00332E  3621               	rlcf	___lldiv@quotient+1,f,c
  4467  003330  3622               	rlcf	___lldiv@quotient+2,f,c
  4468  003332  3623               	rlcf	___lldiv@quotient+3,f,c
  4469  003334  501C               	movf	___lldiv@divisor,w,c
  4470  003336  5C18               	subwf	___lldiv@dividend,w,c
  4471  003338  501D               	movf	___lldiv@divisor+1,w,c
  4472  00333A  5819               	subwfb	___lldiv@dividend+1,w,c
  4473  00333C  501E               	movf	___lldiv@divisor+2,w,c
  4474  00333E  581A               	subwfb	___lldiv@dividend+2,w,c
  4475  003340  501F               	movf	___lldiv@divisor+3,w,c
  4476  003342  581B               	subwfb	___lldiv@dividend+3,w,c
  4477  003344  A0D8               	btfss	status,0,c
  4478  003346  D009               	goto	l1951
  4479  003348  501C               	movf	___lldiv@divisor,w,c
  4480  00334A  5E18               	subwf	___lldiv@dividend,f,c
  4481  00334C  501D               	movf	___lldiv@divisor+1,w,c
  4482  00334E  5A19               	subwfb	___lldiv@dividend+1,f,c
  4483  003350  501E               	movf	___lldiv@divisor+2,w,c
  4484  003352  5A1A               	subwfb	___lldiv@dividend+2,f,c
  4485  003354  501F               	movf	___lldiv@divisor+3,w,c
  4486  003356  5A1B               	subwfb	___lldiv@dividend+3,f,c
  4487  003358  8020               	bsf	___lldiv@quotient,0,c
  4488  00335A                     l1951:
  4489  00335A  90D8               	bcf	status,0,c
  4490  00335C  321F               	rrcf	___lldiv@divisor+3,f,c
  4491  00335E  321E               	rrcf	___lldiv@divisor+2,f,c
  4492  003360  321D               	rrcf	___lldiv@divisor+1,f,c
  4493  003362  321C               	rrcf	___lldiv@divisor,f,c
  4494  003364  2E24               	decfsz	___lldiv@counter,f,c
  4495  003366  D7E1               	goto	u8170
  4496  003368                     l1952:
  4497  003368  C020  F018         	movff	___lldiv@quotient,?___lldiv
  4498  00336C  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  4499  003370  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  4500  003374  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  4501  003378  0012               	return		;funcret
  4502  00337A                     __end_of___lldiv:
  4503                           	opt stack 0
  4504                           tosu	equ	0xFFF
  4505                           tosh	equ	0xFFE
  4506                           tosl	equ	0xFFD
  4507                           pclath	equ	0xFFA
  4508                           tblptru	equ	0xFF8
  4509                           tblptrh	equ	0xFF7
  4510                           tblptrl	equ	0xFF6
  4511                           tablat	equ	0xFF5
  4512                           prodh	equ	0xFF4
  4513                           prodl	equ	0xFF3
  4514                           postinc0	equ	0xFEE
  4515                           plusw0	equ	0xFEB
  4516                           wreg	equ	0xFE8
  4517                           postdec1	equ	0xFE5
  4518                           fsr1l	equ	0xFE1
  4519                           indf2	equ	0xFDF
  4520                           postinc2	equ	0xFDE
  4521                           plusw2	equ	0xFDB
  4522                           fsr2h	equ	0xFDA
  4523                           fsr2l	equ	0xFD9
  4524                           status	equ	0xFD8
  4525                           
  4526 ;; *************** function _GetMcuFwVersion *****************
  4527 ;; Defined at:
  4528 ;;		line 14 in file "SystemStatus.c"
  4529 ;; Parameters:    Size  Location     Type
  4530 ;;		None
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;  TxMsg          18    4[BANK0 ] unsigned char [18]
  4533 ;;  compileData     4    0[BANK0 ] unsigned long 
  4534 ;; Return value:  Size  Location     Type
  4535 ;;                  1    wreg      void 
  4536 ;; Registers used:
  4537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4538 ;; Tracked objects:
  4539 ;;		On entry : 0/0
  4540 ;;		On exit  : 0/0
  4541 ;;		Unchanged: 0/0
  4542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4543 ;;      Params:         0       0       0       0       0       0       0
  4544 ;;      Locals:         0      26       0       0       0       0       0
  4545 ;;      Temps:          7       0       0       0       0       0       0
  4546 ;;      Totals:         7      26       0       0       0       0       0
  4547 ;;Total ram usage:       33 bytes
  4548 ;; Hardware stack levels used:    1
  4549 ;; Hardware stack levels required when called:    6
  4550 ;; This function calls:
  4551 ;;		_WriteUartMessage
  4552 ;;		_ZeroArray
  4553 ;;		___wmul
  4554 ;;		_crc8
  4555 ;; This function is called by:
  4556 ;;		_GroupStatusAndVersion
  4557 ;; This function uses a non-reentrant model
  4558 ;;
  4559                           
  4560                           	psect	text14
  4561  0006AC                     __ptext14:
  4562                           	opt stack 0
  4563  0006AC                     _GetMcuFwVersion:
  4564                           	opt stack 22
  4565                           
  4566                           ;SystemStatus.c: 16: uint32_t compileData = 0x0;
  4567                           
  4568                           ;incstack = 0
  4569  0006AC  0E00               	movlw	0
  4570  0006AE  0100               	movlb	0	; () banked
  4571  0006B0  6F60               	movwf	GetMcuFwVersion@compileData& (0+255),b
  4572  0006B2  0E00               	movlw	0
  4573  0006B4  6F61               	movwf	(GetMcuFwVersion@compileData+1)& (0+255),b
  4574  0006B6  0E00               	movlw	0
  4575  0006B8  6F62               	movwf	(GetMcuFwVersion@compileData+2)& (0+255),b
  4576  0006BA  0E00               	movlw	0
  4577  0006BC  6F63               	movwf	(GetMcuFwVersion@compileData+3)& (0+255),b
  4578                           
  4579                           ; BSR set to: 0
  4580                           ;SystemStatus.c: 19: char TxMsg[(13) + (0x4) + 1];
  4581                           ;SystemStatus.c: 20: ZeroArray(TxMsg, (13) + (0x4) + 1);
  4582  0006BE  0E64               	movlw	low GetMcuFwVersion@TxMsg
  4583  0006C0  6E20               	movwf	ZeroArray@array,c
  4584  0006C2  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4585  0006C4  6E21               	movwf	ZeroArray@array+1,c
  4586  0006C6  0E00               	movlw	0
  4587  0006C8  6E23               	movwf	ZeroArray@size+1,c
  4588  0006CA  0E12               	movlw	18
  4589  0006CC  6E22               	movwf	ZeroArray@size,c
  4590  0006CE  EC1B  F021         	call	_ZeroArray	;wreg free
  4591                           
  4592                           ;SystemStatus.c: 23: TxMsg[(0)] = (0x24);
  4593  0006D2  0E24               	movlw	36
  4594  0006D4  0100               	movlb	0	; () banked
  4595  0006D6  6F64               	movwf	GetMcuFwVersion@TxMsg& (0+255),b
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;SystemStatus.c: 24: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4599  0006D8  0E02               	movlw	2
  4600  0006DA  6F65               	movwf	(GetMcuFwVersion@TxMsg+1)& (0+255),b
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;SystemStatus.c: 25: TxMsg[(2)] = STATUS_GET_MCU_FW_VERSION;
  4604  0006DC  0E22               	movlw	34
  4605  0006DE  6F66               	movwf	(GetMcuFwVersion@TxMsg+2)& (0+255),b
  4606                           
  4607                           ; BSR set to: 0
  4608                           ;SystemStatus.c: 26: TxMsg[(3)] = (13);
  4609  0006E0  0E0D               	movlw	13
  4610  0006E2  6F67               	movwf	(GetMcuFwVersion@TxMsg+3)& (0+255),b
  4611                           
  4612                           ; BSR set to: 0
  4613                           ;SystemStatus.c: 29: TxMsg[(0x4) + 0] = (( ("Mar 27 2018"[ 7] - '0') * 1000 + ("Mar 27 2
      +                          018"[ 8] - '0') * 100 + ("Mar 27 2018"[ 9] - '0') * 10 + ("Mar 27 2018"[10] - '0') ) & 0
      +                          xFF00) >> 8;
  4614  0006E4  0ED0               	movlw	208
  4615  0006E6  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4616  0006E8  0EFF               	movlw	255
  4617  0006EA  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4618  0006EC  0E9C               	movlw	low (STR_1+7)
  4619  0006EE  6EF6               	movwf	tblptrl,c
  4620  0006F0  0E06               	movlw	high (STR_1+7)
  4621  0006F2  6EF7               	movwf	tblptrh,c
  4622  0006F4                     	if	0	;tblptru may be non-zero
  4623  0006F4                     	endif
  4624  0006F4                     	if	0	;tblptru may be non-zero
  4625  0006F4                     	endif
  4626  0006F4  0008               	tblrd		*
  4627  0006F6  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4628  0006FA  0ED0               	movlw	208
  4629  0006FC  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4630  0006FE  6E18               	movwf	___wmul@multiplier,c
  4631  000700  6A19               	clrf	___wmul@multiplier+1,c
  4632  000702  0EFF               	movlw	255
  4633  000704  2219               	addwfc	___wmul@multiplier+1,f,c
  4634  000706  0E03               	movlw	3
  4635  000708  6E1B               	movwf	___wmul@multiplicand+1,c
  4636  00070A  0EE8               	movlw	232
  4637  00070C  6E1A               	movwf	___wmul@multiplicand,c
  4638  00070E  EC82  F020         	call	___wmul	;wreg free
  4639  000712  0E9F               	movlw	low (STR_1+10)
  4640  000714  6EF6               	movwf	tblptrl,c
  4641  000716  0E06               	movlw	high (STR_1+10)
  4642  000718  6EF7               	movwf	tblptrh,c
  4643  00071A                     	if	0	;tblptru may be non-zero
  4644  00071A                     	endif
  4645  00071A                     	if	0	;tblptru may be non-zero
  4646  00071A                     	endif
  4647  00071A  0008               	tblrd		*
  4648  00071C  50F5               	movf	tablat,w,c
  4649  00071E  6E27               	movwf	(??_GetMcuFwVersion+3)& (0+255),c
  4650  000720  6A28               	clrf	(??_GetMcuFwVersion+4)& (0+255),c
  4651  000722  5018               	movf	?___wmul,w,c
  4652  000724  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4653  000726  5019               	movf	?___wmul+1,w,c
  4654  000728  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4655  00072A  0E9D               	movlw	low (STR_1+8)
  4656  00072C  6EF6               	movwf	tblptrl,c
  4657  00072E  0E06               	movlw	high (STR_1+8)
  4658  000730  6EF7               	movwf	tblptrh,c
  4659  000732                     	if	0	;tblptru may be non-zero
  4660  000732                     	endif
  4661  000732                     	if	0	;tblptru may be non-zero
  4662  000732                     	endif
  4663  000732  0008               	tblrd		*
  4664  000734  CFF5 F029          	movff	tablat,??_GetMcuFwVersion+5
  4665  000738  0ED0               	movlw	208
  4666  00073A  2429               	addwf	??_GetMcuFwVersion+5,w,c
  4667  00073C  6E18               	movwf	___wmul@multiplier,c
  4668  00073E  6A19               	clrf	___wmul@multiplier+1,c
  4669  000740  0EFF               	movlw	255
  4670  000742  2219               	addwfc	___wmul@multiplier+1,f,c
  4671  000744  0E00               	movlw	0
  4672  000746  6E1B               	movwf	___wmul@multiplicand+1,c
  4673  000748  0E64               	movlw	100
  4674  00074A  6E1A               	movwf	___wmul@multiplicand,c
  4675  00074C  EC82  F020         	call	___wmul	;wreg free
  4676  000750  5018               	movf	?___wmul,w,c
  4677  000752  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4678  000754  5019               	movf	?___wmul+1,w,c
  4679  000756  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4680  000758  0E9E               	movlw	low (STR_1+9)
  4681  00075A  6EF6               	movwf	tblptrl,c
  4682  00075C  0E06               	movlw	high (STR_1+9)
  4683  00075E  6EF7               	movwf	tblptrh,c
  4684  000760                     	if	0	;tblptru may be non-zero
  4685  000760                     	endif
  4686  000760                     	if	0	;tblptru may be non-zero
  4687  000760                     	endif
  4688  000760  0008               	tblrd		*
  4689  000762  CFF5 F02A          	movff	tablat,??_GetMcuFwVersion+6
  4690  000766  0ED0               	movlw	208
  4691  000768  242A               	addwf	??_GetMcuFwVersion+6,w,c
  4692  00076A  6E18               	movwf	___wmul@multiplier,c
  4693  00076C  6A19               	clrf	___wmul@multiplier+1,c
  4694  00076E  0EFF               	movlw	255
  4695  000770  2219               	addwfc	___wmul@multiplier+1,f,c
  4696  000772  0E00               	movlw	0
  4697  000774  6E1B               	movwf	___wmul@multiplicand+1,c
  4698  000776  0E0A               	movlw	10
  4699  000778  6E1A               	movwf	___wmul@multiplicand,c
  4700  00077A  EC82  F020         	call	___wmul	;wreg free
  4701  00077E  5018               	movf	?___wmul,w,c
  4702  000780  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4703  000782  5019               	movf	?___wmul+1,w,c
  4704  000784  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4705  000786  5024               	movf	??_GetMcuFwVersion,w,c
  4706  000788  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4707  00078A  5025               	movf	??_GetMcuFwVersion+1,w,c
  4708  00078C  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4709  00078E  C028  F027         	movff	??_GetMcuFwVersion+4,??_GetMcuFwVersion+3
  4710  000792  6A28               	clrf	??_GetMcuFwVersion+4,c
  4711  000794  5027               	movf	??_GetMcuFwVersion+3,w,c
  4712  000796  0100               	movlb	0	; () banked
  4713  000798  6F68               	movwf	(GetMcuFwVersion@TxMsg+4)& (0+255),b
  4714                           
  4715                           ; BSR set to: 0
  4716                           ;SystemStatus.c: 30: TxMsg[(0x4) + 1] = ( ("Mar 27 2018"[ 7] - '0') * 1000 + ("Mar 27 20
      +                          18"[ 8] - '0') * 100 + ("Mar 27 2018"[ 9] - '0') * 10 + ("Mar 27 2018"[10] - '0') ) & 0x
      +                          FF;
  4717  00079A  0E9F               	movlw	low (STR_1+10)
  4718  00079C  6EF6               	movwf	tblptrl,c
  4719  00079E  0E06               	movlw	high (STR_1+10)
  4720  0007A0  6EF7               	movwf	tblptrh,c
  4721  0007A2                     	if	0	;tblptru may be non-zero
  4722  0007A2                     	endif
  4723  0007A2                     	if	0	;tblptru may be non-zero
  4724  0007A2                     	endif
  4725  0007A2  0008               	tblrd		*
  4726  0007A4  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4727  0007A8  0E9E               	movlw	low (STR_1+9)
  4728  0007AA  6EF6               	movwf	tblptrl,c
  4729  0007AC  0E06               	movlw	high (STR_1+9)
  4730  0007AE  6EF7               	movwf	tblptrh,c
  4731  0007B0                     	if	0	;tblptru may be non-zero
  4732  0007B0                     	endif
  4733  0007B0                     	if	0	;tblptru may be non-zero
  4734  0007B0                     	endif
  4735  0007B0  0008               	tblrd		*
  4736  0007B2  50F5               	movf	tablat,w,c
  4737  0007B4  0FD0               	addlw	208
  4738  0007B6  0D0A               	mullw	10
  4739  0007B8  CFF3 F025          	movff	prodl,??_GetMcuFwVersion+1
  4740  0007BC  0E9D               	movlw	low (STR_1+8)
  4741  0007BE  6EF6               	movwf	tblptrl,c
  4742  0007C0  0E06               	movlw	high (STR_1+8)
  4743  0007C2  6EF7               	movwf	tblptrh,c
  4744  0007C4                     	if	0	;tblptru may be non-zero
  4745  0007C4                     	endif
  4746  0007C4                     	if	0	;tblptru may be non-zero
  4747  0007C4                     	endif
  4748  0007C4  0008               	tblrd		*
  4749  0007C6  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4750  0007CA  0ED0               	movlw	208
  4751  0007CC  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4752  0007CE  6E18               	movwf	___wmul@multiplier,c
  4753  0007D0  6A19               	clrf	___wmul@multiplier+1,c
  4754  0007D2  0EFF               	movlw	255
  4755  0007D4  2219               	addwfc	___wmul@multiplier+1,f,c
  4756  0007D6  0E00               	movlw	0
  4757  0007D8  6E1B               	movwf	___wmul@multiplicand+1,c
  4758  0007DA  0E64               	movlw	100
  4759  0007DC  6E1A               	movwf	___wmul@multiplicand,c
  4760  0007DE  EC82  F020         	call	___wmul	;wreg free
  4761  0007E2  0E9C               	movlw	low (STR_1+7)
  4762  0007E4  6EF6               	movwf	tblptrl,c
  4763  0007E6  0E06               	movlw	high (STR_1+7)
  4764  0007E8  6EF7               	movwf	tblptrh,c
  4765  0007EA                     	if	0	;tblptru may be non-zero
  4766  0007EA                     	endif
  4767  0007EA                     	if	0	;tblptru may be non-zero
  4768  0007EA                     	endif
  4769  0007EA  0008               	tblrd		*
  4770  0007EC  50F5               	movf	tablat,w,c
  4771  0007EE  0FD0               	addlw	208
  4772  0007F0  0DE8               	mullw	232
  4773  0007F2  50F3               	movf	prodl,w,c
  4774  0007F4  2418               	addwf	?___wmul,w,c
  4775  0007F6  2425               	addwf	??_GetMcuFwVersion+1,w,c
  4776  0007F8  2424               	addwf	??_GetMcuFwVersion,w,c
  4777  0007FA  0FD0               	addlw	208
  4778  0007FC  0100               	movlb	0	; () banked
  4779  0007FE  6F69               	movwf	(GetMcuFwVersion@TxMsg+5)& (0+255),b
  4780                           
  4781                           ; BSR set to: 0
  4782                           ;SystemStatus.c: 33: TxMsg[(0x4) + 2] = "Mar 27 2018"[0];
  4783  000800  0E95               	movlw	low STR_1
  4784  000802  6EF6               	movwf	tblptrl,c
  4785  000804                     	if	1	;There is more than 1 active tblptr byte
  4786  000804  0E06               	movlw	high STR_1
  4787  000806  6EF7               	movwf	tblptrh,c
  4788  000808                     	endif
  4789  000808                     	if	0	;There are less than 3 active tblptr bytes
  4790  000808                     	endif
  4791  000808  0008               	tblrd		*
  4792  00080A  CFF5 F06A          	movff	tablat,GetMcuFwVersion@TxMsg+6
  4793                           
  4794                           ; BSR set to: 0
  4795                           ;SystemStatus.c: 34: TxMsg[(0x4) + 3] = "Mar 27 2018"[1];
  4796  00080E  0E96               	movlw	low (STR_1+1)
  4797  000810  6EF6               	movwf	tblptrl,c
  4798  000812  0E06               	movlw	high (STR_1+1)
  4799  000814  6EF7               	movwf	tblptrh,c
  4800  000816                     	if	0	;tblptru may be non-zero
  4801  000816                     	endif
  4802  000816                     	if	0	;tblptru may be non-zero
  4803  000816                     	endif
  4804  000816  0008               	tblrd		*
  4805  000818  CFF5 F06B          	movff	tablat,GetMcuFwVersion@TxMsg+7
  4806                           
  4807                           ; BSR set to: 0
  4808                           ;SystemStatus.c: 35: TxMsg[(0x4) + 4] = "Mar 27 2018"[2];
  4809  00081C  0E97               	movlw	low (STR_1+2)
  4810  00081E  6EF6               	movwf	tblptrl,c
  4811  000820  0E06               	movlw	high (STR_1+2)
  4812  000822  6EF7               	movwf	tblptrh,c
  4813  000824                     	if	0	;tblptru may be non-zero
  4814  000824                     	endif
  4815  000824                     	if	0	;tblptru may be non-zero
  4816  000824                     	endif
  4817  000824  0008               	tblrd		*
  4818  000826  CFF5 F06C          	movff	tablat,GetMcuFwVersion@TxMsg+8
  4819                           
  4820                           ; BSR set to: 0
  4821                           ;SystemStatus.c: 38: TxMsg[(0x4) + 5] = (( (("Mar 27 2018"[4] >= '0') ? ("Mar 27 2018"[4
      +                          ] - '0') * 10 : 0) + ("Mar 27 2018"[5] - '0') ) & 0xFF00) >> 8;
  4822  00082A  0E99               	movlw	low (STR_1+4)
  4823  00082C  6EF6               	movwf	tblptrl,c
  4824  00082E  0E06               	movlw	high (STR_1+4)
  4825  000830  6EF7               	movwf	tblptrh,c
  4826  000832                     	if	0	;tblptru may be non-zero
  4827  000832                     	endif
  4828  000832                     	if	0	;tblptru may be non-zero
  4829  000832                     	endif
  4830  000832  0E30               	movlw	48
  4831  000834  0008               	tblrd		*
  4832  000836  60F5               	cpfslt	tablat,c
  4833  000838  D005               	goto	l1499
  4834                           
  4835                           ; BSR set to: 0
  4836  00083A  0E00               	movlw	0
  4837  00083C  6F77               	movwf	(_GetMcuFwVersion$2698+1)& (0+255),b
  4838  00083E  0E00               	movlw	0
  4839  000840  6F76               	movwf	_GetMcuFwVersion$2698& (0+255),b
  4840  000842  D017               	goto	l1501
  4841  000844                     l1499:
  4842                           
  4843                           ; BSR set to: 0
  4844                           
  4845                           ; BSR set to: 0
  4846  000844  0E99               	movlw	low (STR_1+4)
  4847  000846  6EF6               	movwf	tblptrl,c
  4848  000848  0E06               	movlw	high (STR_1+4)
  4849  00084A  6EF7               	movwf	tblptrh,c
  4850  00084C                     	if	0	;tblptru may be non-zero
  4851  00084C                     	endif
  4852  00084C                     	if	0	;tblptru may be non-zero
  4853  00084C                     	endif
  4854  00084C  0008               	tblrd		*
  4855  00084E  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4856  000852  0ED0               	movlw	208
  4857  000854  2424               	addwf	??_GetMcuFwVersion,w,c
  4858  000856  6E18               	movwf	___wmul@multiplier,c
  4859  000858  6A19               	clrf	___wmul@multiplier+1,c
  4860  00085A  0EFF               	movlw	255
  4861  00085C  2219               	addwfc	___wmul@multiplier+1,f,c
  4862  00085E  0E00               	movlw	0
  4863  000860  6E1B               	movwf	___wmul@multiplicand+1,c
  4864  000862  0E0A               	movlw	10
  4865  000864  6E1A               	movwf	___wmul@multiplicand,c
  4866  000866  EC82  F020         	call	___wmul	;wreg free
  4867  00086A  C018  F076         	movff	?___wmul,_GetMcuFwVersion$2698
  4868  00086E  C019  F077         	movff	?___wmul+1,_GetMcuFwVersion$2698+1
  4869  000872                     l1501:
  4870  000872  0ED0               	movlw	208
  4871  000874  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4872  000876  0EFF               	movlw	255
  4873  000878  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4874  00087A  0E9A               	movlw	low (STR_1+5)
  4875  00087C  6EF6               	movwf	tblptrl,c
  4876  00087E  0E06               	movlw	high (STR_1+5)
  4877  000880  6EF7               	movwf	tblptrh,c
  4878  000882                     	if	0	;tblptru may be non-zero
  4879  000882                     	endif
  4880  000882                     	if	0	;tblptru may be non-zero
  4881  000882                     	endif
  4882  000882  0008               	tblrd		*
  4883  000884  50F5               	movf	tablat,w,c
  4884  000886  0100               	movlb	0	; () banked
  4885  000888  2576               	addwf	_GetMcuFwVersion$2698& (0+255),w,b
  4886  00088A  6E26               	movwf	(??_GetMcuFwVersion+2)& (0+255),c
  4887  00088C  0E00               	movlw	0
  4888  00088E  2177               	addwfc	(_GetMcuFwVersion$2698+1)& (0+255),w,b
  4889  000890  6E27               	movwf	(??_GetMcuFwVersion+3)& (0+255),c
  4890  000892  5024               	movf	??_GetMcuFwVersion,w,c
  4891  000894  2626               	addwf	??_GetMcuFwVersion+2,f,c
  4892  000896  5025               	movf	??_GetMcuFwVersion+1,w,c
  4893  000898  2227               	addwfc	??_GetMcuFwVersion+3,f,c
  4894  00089A  C027  F026         	movff	??_GetMcuFwVersion+3,??_GetMcuFwVersion+2
  4895  00089E  6A27               	clrf	??_GetMcuFwVersion+3,c
  4896  0008A0  5026               	movf	??_GetMcuFwVersion+2,w,c
  4897  0008A2  6F6D               	movwf	(GetMcuFwVersion@TxMsg+9)& (0+255),b
  4898                           
  4899                           ; BSR set to: 0
  4900                           ;SystemStatus.c: 39: TxMsg[(0x4) + 6] = ( (("Mar 27 2018"[4] >= '0') ? ("Mar 27 2018"[4]
      +                           - '0') * 10 : 0) + ("Mar 27 2018"[5] - '0') ) & 0xFF;
  4901  0008A4  0E99               	movlw	low (STR_1+4)
  4902  0008A6  6EF6               	movwf	tblptrl,c
  4903  0008A8  0E06               	movlw	high (STR_1+4)
  4904  0008AA  6EF7               	movwf	tblptrh,c
  4905  0008AC                     	if	0	;tblptru may be non-zero
  4906  0008AC                     	endif
  4907  0008AC                     	if	0	;tblptru may be non-zero
  4908  0008AC                     	endif
  4909  0008AC  0E30               	movlw	48
  4910  0008AE  0008               	tblrd		*
  4911  0008B0  60F5               	cpfslt	tablat,c
  4912  0008B2  D005               	goto	l1503
  4913                           
  4914                           ; BSR set to: 0
  4915  0008B4  0E00               	movlw	0
  4916  0008B6  6F79               	movwf	(_GetMcuFwVersion$2702+1)& (0+255),b
  4917  0008B8  0E00               	movlw	0
  4918  0008BA  6F78               	movwf	_GetMcuFwVersion$2702& (0+255),b
  4919  0008BC  D017               	goto	l1505
  4920  0008BE                     l1503:
  4921                           
  4922                           ; BSR set to: 0
  4923                           
  4924                           ; BSR set to: 0
  4925  0008BE  0E99               	movlw	low (STR_1+4)
  4926  0008C0  6EF6               	movwf	tblptrl,c
  4927  0008C2  0E06               	movlw	high (STR_1+4)
  4928  0008C4  6EF7               	movwf	tblptrh,c
  4929  0008C6                     	if	0	;tblptru may be non-zero
  4930  0008C6                     	endif
  4931  0008C6                     	if	0	;tblptru may be non-zero
  4932  0008C6                     	endif
  4933  0008C6  0008               	tblrd		*
  4934  0008C8  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4935  0008CC  0ED0               	movlw	208
  4936  0008CE  2424               	addwf	??_GetMcuFwVersion,w,c
  4937  0008D0  6E18               	movwf	___wmul@multiplier,c
  4938  0008D2  6A19               	clrf	___wmul@multiplier+1,c
  4939  0008D4  0EFF               	movlw	255
  4940  0008D6  2219               	addwfc	___wmul@multiplier+1,f,c
  4941  0008D8  0E00               	movlw	0
  4942  0008DA  6E1B               	movwf	___wmul@multiplicand+1,c
  4943  0008DC  0E0A               	movlw	10
  4944  0008DE  6E1A               	movwf	___wmul@multiplicand,c
  4945  0008E0  EC82  F020         	call	___wmul	;wreg free
  4946  0008E4  C018  F078         	movff	?___wmul,_GetMcuFwVersion$2702
  4947  0008E8  C019  F079         	movff	?___wmul+1,_GetMcuFwVersion$2702+1
  4948  0008EC                     l1505:
  4949  0008EC  0E9A               	movlw	low (STR_1+5)
  4950  0008EE  6EF6               	movwf	tblptrl,c
  4951  0008F0  0E06               	movlw	high (STR_1+5)
  4952  0008F2  6EF7               	movwf	tblptrh,c
  4953  0008F4                     	if	0	;tblptru may be non-zero
  4954  0008F4                     	endif
  4955  0008F4                     	if	0	;tblptru may be non-zero
  4956  0008F4                     	endif
  4957  0008F4  0008               	tblrd		*
  4958  0008F6  50F5               	movf	tablat,w,c
  4959  0008F8  0100               	movlb	0	; () banked
  4960  0008FA  2578               	addwf	_GetMcuFwVersion$2702& (0+255),w,b
  4961  0008FC  0FD0               	addlw	208
  4962  0008FE  6F6E               	movwf	(GetMcuFwVersion@TxMsg+10)& (0+255),b
  4963                           
  4964                           ; BSR set to: 0
  4965                           ;SystemStatus.c: 42: TxMsg[(0x4) + 7] = ((("17:01:16"[0] - '0') * 10 + "17:01:16"[1] - '
      +                          0') & 0xFF00) >> 8;
  4966  000900  0ED0               	movlw	208
  4967  000902  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4968  000904  0EFF               	movlw	255
  4969  000906  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4970  000908  0EA1               	movlw	low STR_18
  4971  00090A  6EF6               	movwf	tblptrl,c
  4972  00090C                     	if	1	;There is more than 1 active tblptr byte
  4973  00090C  0E06               	movlw	high STR_18
  4974  00090E  6EF7               	movwf	tblptrh,c
  4975  000910                     	endif
  4976  000910                     	if	0	;There are less than 3 active tblptr bytes
  4977  000910                     	endif
  4978  000910  0008               	tblrd		*
  4979  000912  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4980  000916  0ED0               	movlw	208
  4981  000918  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4982  00091A  6E18               	movwf	___wmul@multiplier,c
  4983  00091C  6A19               	clrf	___wmul@multiplier+1,c
  4984  00091E  0EFF               	movlw	255
  4985  000920  2219               	addwfc	___wmul@multiplier+1,f,c
  4986  000922  0E00               	movlw	0
  4987  000924  6E1B               	movwf	___wmul@multiplicand+1,c
  4988  000926  0E0A               	movlw	10
  4989  000928  6E1A               	movwf	___wmul@multiplicand,c
  4990  00092A  EC82  F020         	call	___wmul	;wreg free
  4991  00092E  0EA2               	movlw	low (STR_18+1)
  4992  000930  6EF6               	movwf	tblptrl,c
  4993  000932  0E06               	movlw	high (STR_18+1)
  4994  000934  6EF7               	movwf	tblptrh,c
  4995  000936                     	if	0	;tblptru may be non-zero
  4996  000936                     	endif
  4997  000936                     	if	0	;tblptru may be non-zero
  4998  000936                     	endif
  4999  000936  0008               	tblrd		*
  5000  000938  50F5               	movf	tablat,w,c
  5001  00093A  2618               	addwf	?___wmul,f,c
  5002  00093C  0E00               	movlw	0
  5003  00093E  2219               	addwfc	?___wmul+1,f,c
  5004  000940  5024               	movf	??_GetMcuFwVersion,w,c
  5005  000942  2618               	addwf	?___wmul,f,c
  5006  000944  5025               	movf	??_GetMcuFwVersion+1,w,c
  5007  000946  2219               	addwfc	?___wmul+1,f,c
  5008  000948  C019  F018         	movff	?___wmul+1,?___wmul
  5009  00094C  6A19               	clrf	?___wmul+1,c
  5010  00094E  5018               	movf	?___wmul,w,c
  5011  000950  0100               	movlb	0	; () banked
  5012  000952  6F6F               	movwf	(GetMcuFwVersion@TxMsg+11)& (0+255),b
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;SystemStatus.c: 43: TxMsg[(0x4) + 8] = (("17:01:16"[0] - '0') * 10 + "17:01:16"[1] - '0
      +                          ') & 0xFF;
  5016  000954  0EA2               	movlw	low (STR_18+1)
  5017  000956  6EF6               	movwf	tblptrl,c
  5018  000958  0E06               	movlw	high (STR_18+1)
  5019  00095A  6EF7               	movwf	tblptrh,c
  5020  00095C                     	if	0	;tblptru may be non-zero
  5021  00095C                     	endif
  5022  00095C                     	if	0	;tblptru may be non-zero
  5023  00095C                     	endif
  5024  00095C  0008               	tblrd		*
  5025  00095E  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  5026  000962  0EA1               	movlw	low STR_18
  5027  000964  6EF6               	movwf	tblptrl,c
  5028  000966                     	if	1	;There is more than 1 active tblptr byte
  5029  000966  0E06               	movlw	high STR_18
  5030  000968  6EF7               	movwf	tblptrh,c
  5031  00096A                     	endif
  5032  00096A                     	if	0	;There are less than 3 active tblptr bytes
  5033  00096A                     	endif
  5034  00096A  0008               	tblrd		*
  5035  00096C  50F5               	movf	tablat,w,c
  5036  00096E  0FD0               	addlw	208
  5037  000970  0D0A               	mullw	10
  5038  000972  50F3               	movf	prodl,w,c
  5039  000974  2424               	addwf	??_GetMcuFwVersion,w,c
  5040  000976  0FD0               	addlw	208
  5041  000978  6F70               	movwf	(GetMcuFwVersion@TxMsg+12)& (0+255),b
  5042                           
  5043                           ; BSR set to: 0
  5044                           ;SystemStatus.c: 46: TxMsg[(0x4) + 9] = ((("17:01:16"[3] - '0') * 10 + "17:01:16"[4] - '
      +                          0') & 0xFF00) >> 8;
  5045  00097A  0ED0               	movlw	208
  5046  00097C  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  5047  00097E  0EFF               	movlw	255
  5048  000980  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  5049  000982  0EA4               	movlw	low (STR_18+3)
  5050  000984  6EF6               	movwf	tblptrl,c
  5051  000986  0E06               	movlw	high (STR_18+3)
  5052  000988  6EF7               	movwf	tblptrh,c
  5053  00098A                     	if	0	;tblptru may be non-zero
  5054  00098A                     	endif
  5055  00098A                     	if	0	;tblptru may be non-zero
  5056  00098A                     	endif
  5057  00098A  0008               	tblrd		*
  5058  00098C  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  5059  000990  0ED0               	movlw	208
  5060  000992  2426               	addwf	??_GetMcuFwVersion+2,w,c
  5061  000994  6E18               	movwf	___wmul@multiplier,c
  5062  000996  6A19               	clrf	___wmul@multiplier+1,c
  5063  000998  0EFF               	movlw	255
  5064  00099A  2219               	addwfc	___wmul@multiplier+1,f,c
  5065  00099C  0E00               	movlw	0
  5066  00099E  6E1B               	movwf	___wmul@multiplicand+1,c
  5067  0009A0  0E0A               	movlw	10
  5068  0009A2  6E1A               	movwf	___wmul@multiplicand,c
  5069  0009A4  EC82  F020         	call	___wmul	;wreg free
  5070  0009A8  0EA5               	movlw	low (STR_18+4)
  5071  0009AA  6EF6               	movwf	tblptrl,c
  5072  0009AC  0E06               	movlw	high (STR_18+4)
  5073  0009AE  6EF7               	movwf	tblptrh,c
  5074  0009B0                     	if	0	;tblptru may be non-zero
  5075  0009B0                     	endif
  5076  0009B0                     	if	0	;tblptru may be non-zero
  5077  0009B0                     	endif
  5078  0009B0  0008               	tblrd		*
  5079  0009B2  50F5               	movf	tablat,w,c
  5080  0009B4  2618               	addwf	?___wmul,f,c
  5081  0009B6  0E00               	movlw	0
  5082  0009B8  2219               	addwfc	?___wmul+1,f,c
  5083  0009BA  5024               	movf	??_GetMcuFwVersion,w,c
  5084  0009BC  2618               	addwf	?___wmul,f,c
  5085  0009BE  5025               	movf	??_GetMcuFwVersion+1,w,c
  5086  0009C0  2219               	addwfc	?___wmul+1,f,c
  5087  0009C2  C019  F018         	movff	?___wmul+1,?___wmul
  5088  0009C6  6A19               	clrf	?___wmul+1,c
  5089  0009C8  5018               	movf	?___wmul,w,c
  5090  0009CA  0100               	movlb	0	; () banked
  5091  0009CC  6F71               	movwf	(GetMcuFwVersion@TxMsg+13)& (0+255),b
  5092                           
  5093                           ; BSR set to: 0
  5094                           ;SystemStatus.c: 47: TxMsg[(0x4) + 10] = (("17:01:16"[3] - '0') * 10 + "17:01:16"[4] - '
      +                          0') & 0xFF;
  5095  0009CE  0EA5               	movlw	low (STR_18+4)
  5096  0009D0  6EF6               	movwf	tblptrl,c
  5097  0009D2  0E06               	movlw	high (STR_18+4)
  5098  0009D4  6EF7               	movwf	tblptrh,c
  5099  0009D6                     	if	0	;tblptru may be non-zero
  5100  0009D6                     	endif
  5101  0009D6                     	if	0	;tblptru may be non-zero
  5102  0009D6                     	endif
  5103  0009D6  0008               	tblrd		*
  5104  0009D8  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  5105  0009DC  0EA4               	movlw	low (STR_18+3)
  5106  0009DE  6EF6               	movwf	tblptrl,c
  5107  0009E0  0E06               	movlw	high (STR_18+3)
  5108  0009E2  6EF7               	movwf	tblptrh,c
  5109  0009E4                     	if	0	;tblptru may be non-zero
  5110  0009E4                     	endif
  5111  0009E4                     	if	0	;tblptru may be non-zero
  5112  0009E4                     	endif
  5113  0009E4  0008               	tblrd		*
  5114  0009E6  50F5               	movf	tablat,w,c
  5115  0009E8  0FD0               	addlw	208
  5116  0009EA  0D0A               	mullw	10
  5117  0009EC  50F3               	movf	prodl,w,c
  5118  0009EE  2424               	addwf	??_GetMcuFwVersion,w,c
  5119  0009F0  0FD0               	addlw	208
  5120  0009F2  6F72               	movwf	(GetMcuFwVersion@TxMsg+14)& (0+255),b
  5121                           
  5122                           ; BSR set to: 0
  5123                           ;SystemStatus.c: 49: TxMsg[(0x4) + 11] = ((("17:01:16"[6] - '0') * 10 + "17:01:16"[7] - 
      +                          '0') & 0xFF00) >> 8;
  5124  0009F4  0ED0               	movlw	208
  5125  0009F6  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  5126  0009F8  0EFF               	movlw	255
  5127  0009FA  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  5128  0009FC  0EA7               	movlw	low (STR_18+6)
  5129  0009FE  6EF6               	movwf	tblptrl,c
  5130  000A00  0E06               	movlw	high (STR_18+6)
  5131  000A02  6EF7               	movwf	tblptrh,c
  5132  000A04                     	if	0	;tblptru may be non-zero
  5133  000A04                     	endif
  5134  000A04                     	if	0	;tblptru may be non-zero
  5135  000A04                     	endif
  5136  000A04  0008               	tblrd		*
  5137  000A06  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  5138  000A0A  0ED0               	movlw	208
  5139  000A0C  2426               	addwf	??_GetMcuFwVersion+2,w,c
  5140  000A0E  6E18               	movwf	___wmul@multiplier,c
  5141  000A10  6A19               	clrf	___wmul@multiplier+1,c
  5142  000A12  0EFF               	movlw	255
  5143  000A14  2219               	addwfc	___wmul@multiplier+1,f,c
  5144  000A16  0E00               	movlw	0
  5145  000A18  6E1B               	movwf	___wmul@multiplicand+1,c
  5146  000A1A  0E0A               	movlw	10
  5147  000A1C  6E1A               	movwf	___wmul@multiplicand,c
  5148  000A1E  EC82  F020         	call	___wmul	;wreg free
  5149  000A22  0EA8               	movlw	low (STR_18+7)
  5150  000A24  6EF6               	movwf	tblptrl,c
  5151  000A26  0E06               	movlw	high (STR_18+7)
  5152  000A28  6EF7               	movwf	tblptrh,c
  5153  000A2A                     	if	0	;tblptru may be non-zero
  5154  000A2A                     	endif
  5155  000A2A                     	if	0	;tblptru may be non-zero
  5156  000A2A                     	endif
  5157  000A2A  0008               	tblrd		*
  5158  000A2C  50F5               	movf	tablat,w,c
  5159  000A2E  2618               	addwf	?___wmul,f,c
  5160  000A30  0E00               	movlw	0
  5161  000A32  2219               	addwfc	?___wmul+1,f,c
  5162  000A34  5024               	movf	??_GetMcuFwVersion,w,c
  5163  000A36  2618               	addwf	?___wmul,f,c
  5164  000A38  5025               	movf	??_GetMcuFwVersion+1,w,c
  5165  000A3A  2219               	addwfc	?___wmul+1,f,c
  5166  000A3C  C019  F018         	movff	?___wmul+1,?___wmul
  5167  000A40  6A19               	clrf	?___wmul+1,c
  5168  000A42  5018               	movf	?___wmul,w,c
  5169  000A44  0100               	movlb	0	; () banked
  5170  000A46  6F73               	movwf	(GetMcuFwVersion@TxMsg+15)& (0+255),b
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;SystemStatus.c: 50: TxMsg[(0x4) + 12] = (("17:01:16"[6] - '0') * 10 + "17:01:16"[7] - '
      +                          0') & 0xFF;
  5174  000A48  0EA8               	movlw	low (STR_18+7)
  5175  000A4A  6EF6               	movwf	tblptrl,c
  5176  000A4C  0E06               	movlw	high (STR_18+7)
  5177  000A4E  6EF7               	movwf	tblptrh,c
  5178  000A50                     	if	0	;tblptru may be non-zero
  5179  000A50                     	endif
  5180  000A50                     	if	0	;tblptru may be non-zero
  5181  000A50                     	endif
  5182  000A50  0008               	tblrd		*
  5183  000A52  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  5184  000A56  0EA7               	movlw	low (STR_18+6)
  5185  000A58  6EF6               	movwf	tblptrl,c
  5186  000A5A  0E06               	movlw	high (STR_18+6)
  5187  000A5C  6EF7               	movwf	tblptrh,c
  5188  000A5E                     	if	0	;tblptru may be non-zero
  5189  000A5E                     	endif
  5190  000A5E                     	if	0	;tblptru may be non-zero
  5191  000A5E                     	endif
  5192  000A5E  0008               	tblrd		*
  5193  000A60  50F5               	movf	tablat,w,c
  5194  000A62  0FD0               	addlw	208
  5195  000A64  0D0A               	mullw	10
  5196  000A66  50F3               	movf	prodl,w,c
  5197  000A68  2424               	addwf	??_GetMcuFwVersion,w,c
  5198  000A6A  0FD0               	addlw	208
  5199  000A6C  6F74               	movwf	(GetMcuFwVersion@TxMsg+16)& (0+255),b
  5200                           
  5201                           ; BSR set to: 0
  5202                           ;SystemStatus.c: 52: TxMsg[(13) + (0x4)] = crc8(TxMsg, (13) + (0x4));
  5203  000A6E  0E64               	movlw	low GetMcuFwVersion@TxMsg
  5204  000A70  6E18               	movwf	crc8@dataArray,c
  5205  000A72  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5206  000A74  6E19               	movwf	crc8@dataArray+1,c
  5207  000A76  0E00               	movlw	0
  5208  000A78  6E1B               	movwf	crc8@dataSize+1,c
  5209  000A7A  0E11               	movlw	17
  5210  000A7C  6E1A               	movwf	crc8@dataSize,c
  5211  000A7E  EC9C  F01D         	call	_crc8	;wreg free
  5212  000A82  0100               	movlb	0	; () banked
  5213  000A84  6F75               	movwf	(GetMcuFwVersion@TxMsg+17)& (0+255),b
  5214                           
  5215                           ;SystemStatus.c: 54: WriteUartMessage(TxMsg, (13) + (0x4) + 1);
  5216  000A86  0E64               	movlw	low GetMcuFwVersion@TxMsg
  5217  000A88  6E19               	movwf	WriteUartMessage@dataBuf,c
  5218  000A8A  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5219  000A8C  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5220  000A8E  0E00               	movlw	0
  5221  000A90  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5222  000A92  0E12               	movlw	18
  5223  000A94  6E1B               	movwf	WriteUartMessage@dataSize,c
  5224  000A96  EC4E  F01F         	call	_WriteUartMessage	;wreg free
  5225  000A9A  0012               	return		;funcret
  5226  000A9C                     __end_of_GetMcuFwVersion:
  5227                           	opt stack 0
  5228                           tosu	equ	0xFFF
  5229                           tosh	equ	0xFFE
  5230                           tosl	equ	0xFFD
  5231                           pclath	equ	0xFFA
  5232                           tblptru	equ	0xFF8
  5233                           tblptrh	equ	0xFF7
  5234                           tblptrl	equ	0xFF6
  5235                           tablat	equ	0xFF5
  5236                           prodh	equ	0xFF4
  5237                           prodl	equ	0xFF3
  5238                           postinc0	equ	0xFEE
  5239                           plusw0	equ	0xFEB
  5240                           wreg	equ	0xFE8
  5241                           postdec1	equ	0xFE5
  5242                           fsr1l	equ	0xFE1
  5243                           indf2	equ	0xFDF
  5244                           postinc2	equ	0xFDE
  5245                           plusw2	equ	0xFDB
  5246                           fsr2h	equ	0xFDA
  5247                           fsr2l	equ	0xFD9
  5248                           status	equ	0xFD8
  5249                           
  5250 ;; *************** function _FlashReadUart *****************
  5251 ;; Defined at:
  5252 ;;		line 63 in file "FlashApp.c"
  5253 ;; Parameters:    Size  Location     Type
  5254 ;;  data            2   39[BANK0 ] PTR unsigned char 
  5255 ;; Auto vars:     Size  Location     Type
  5256 ;;  idx             2  132[BANK0 ] int 
  5257 ;;  j               2  128[BANK0 ] int 
  5258 ;;  TxMsg          69   47[BANK0 ] unsigned char [69]
  5259 ;;  val             8  116[BANK0 ] struct .
  5260 ;;  numOfSampleT    2  130[BANK0 ] int 
  5261 ;; Return value:  Size  Location     Type
  5262 ;;                  1    wreg      void 
  5263 ;; Registers used:
  5264 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5265 ;; Tracked objects:
  5266 ;;		On entry : 0/0
  5267 ;;		On exit  : 0/0
  5268 ;;		Unchanged: 0/0
  5269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5270 ;;      Params:         0       2       0       0       0       0       0
  5271 ;;      Locals:         0      87       0       0       0       0       0
  5272 ;;      Temps:          0       6       0       0       0       0       0
  5273 ;;      Totals:         0      95       0       0       0       0       0
  5274 ;;Total ram usage:       95 bytes
  5275 ;; Hardware stack levels used:    1
  5276 ;; Hardware stack levels required when called:    8
  5277 ;; This function calls:
  5278 ;;		_FLASH_IsWriteDone
  5279 ;;		_FLASH_ReadByte
  5280 ;;		_GetIntFromUartData
  5281 ;;		_SendAckMessage
  5282 ;;		_WriteUartMessage
  5283 ;;		_ZeroArray
  5284 ;;		_crc8
  5285 ;; This function is called by:
  5286 ;;		_GroupFlashMemory
  5287 ;; This function uses a non-reentrant model
  5288 ;;
  5289                           
  5290                           	psect	text15
  5291  0011DE                     __ptext15:
  5292                           	opt stack 0
  5293  0011DE                     _FlashReadUart:
  5294                           	opt stack 20
  5295                           
  5296                           ;FlashApp.c: 69: int16_t numOfSampleToRead = 0x0;
  5297                           
  5298                           ;incstack = 0
  5299  0011DE  0E00               	movlw	0
  5300  0011E0  0100               	movlb	0	; () banked
  5301  0011E2  6FE3               	movwf	(FlashReadUart@numOfSampleToRead+1)& (0+255),b
  5302  0011E4  0E00               	movlw	0
  5303  0011E6  6FE2               	movwf	FlashReadUart@numOfSampleToRead& (0+255),b
  5304                           
  5305                           ; BSR set to: 0
  5306                           ;FlashApp.c: 70: INT_VAL val = GetIntFromUartData(10, data);
  5307  0011E8  C087  F066         	movff	FlashReadUart@data,GetIntFromUartData@data
  5308  0011EC  C088  F067         	movff	FlashReadUart@data+1,GetIntFromUartData@data+1
  5309  0011F0  0E0A               	movlw	10
  5310  0011F2  EC59  F00E         	call	_GetIntFromUartData
  5311  0011F6  EE20  F0D4         	lfsr	2,FlashReadUart@val
  5312  0011FA  0E07               	movlw	7
  5313  0011FC                     u8301:
  5314  0011FC  CFEB FFDB          	movff	plusw0,plusw2
  5315  001200  06E8               	decf	wreg,f,c
  5316  001202  E2FC               	bc	u8301
  5317                           
  5318                           ;FlashApp.c: 72: int numOfSampleToRead = val.num;
  5319  001204  C0D4  F0E2         	movff	FlashReadUart@val,FlashReadUart@numOfSampleToRead
  5320  001208  C0D5  F0E3         	movff	FlashReadUart@val+1,FlashReadUart@numOfSampleToRead+1
  5321                           
  5322                           ;FlashApp.c: 74: char TxMsg[(64) + (0x4) + 1];
  5323                           ;FlashApp.c: 76: if (FLASH_IsWriteDone() == 0)
  5324  00120C  ECC1  F021         	call	_FLASH_IsWriteDone	;wreg free
  5325  001210  0900               	iorlw	0
  5326  001212  B4D8               	btfsc	status,2,c
  5327  001214  0012               	return	
  5328                           
  5329                           ;FlashApp.c: 80: }
  5330                           ;FlashApp.c: 82: if(numOfValidateSamples == 0)
  5331                           
  5332                           ;FlashApp.c: 78: {
  5333                           ;FlashApp.c: 79: return;
  5334  001216  0101               	movlb	1	; () banked
  5335  001218  5130               	movf	_numOfValidateSamples& (0+255),w,b
  5336  00121A  1131               	iorwf	(_numOfValidateSamples+1)& (0+255),w,b
  5337  00121C  1132               	iorwf	(_numOfValidateSamples+2)& (0+255),w,b
  5338  00121E  1133               	iorwf	(_numOfValidateSamples+3)& (0+255),w,b
  5339  001220  A4D8               	btfss	status,2,c
  5340  001222  D005               	goto	l326
  5341                           
  5342                           ; BSR set to: 1
  5343                           ;FlashApp.c: 83: {
  5344                           ;FlashApp.c: 84: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_NO_SAMPLE_YET)
      +                          ;
  5345  001224  0E55               	movlw	85
  5346  001226  6E24               	movwf	SendAckMessage@inRequest,c
  5347  001228  0E05               	movlw	5
  5348  00122A  EC73  F01D         	call	_SendAckMessage
  5349  00122E                     l326:
  5350                           
  5351                           ;FlashApp.c: 85: }
  5352                           ;FlashApp.c: 88: numOfSampleToRead = numOfSampleToRead >= numOfValidateSamples ? numOfVa
      +                          lidateSamples : numOfSampleToRead;
  5353  00122E  C0E2  F089         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  5354  001232  C0E3  F08A         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  5355  001236  0E00               	movlw	0
  5356  001238  0100               	movlb	0	; () banked
  5357  00123A  BF8A               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5358  00123C  0EFF               	movlw	255
  5359  00123E  6F8B               	movwf	(??_FlashReadUart+2)& (0+255),b
  5360  001240  6F8C               	movwf	(??_FlashReadUart+3)& (0+255),b
  5361  001242  0101               	movlb	1	; () banked
  5362  001244  5130               	movf	_numOfValidateSamples& (0+255),w,b
  5363  001246  0100               	movlb	0	; () banked
  5364  001248  5D89               	subwf	??_FlashReadUart& (0+255),w,b
  5365  00124A  0101               	movlb	1	; () banked
  5366  00124C  5131               	movf	(_numOfValidateSamples+1)& (0+255),w,b
  5367  00124E  0100               	movlb	0	; () banked
  5368  001250  598A               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  5369  001252  0101               	movlb	1	; () banked
  5370  001254  5132               	movf	(_numOfValidateSamples+2)& (0+255),w,b
  5371  001256  0100               	movlb	0	; () banked
  5372  001258  598B               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  5373  00125A  0101               	movlb	1	; () banked
  5374  00125C  5133               	movf	(_numOfValidateSamples+3)& (0+255),w,b
  5375  00125E  0100               	movlb	0	; () banked
  5376  001260  598C               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  5377  001262  B0D8               	btfsc	status,0,c
  5378  001264  D00A               	goto	l328
  5379                           
  5380                           ; BSR set to: 0
  5381  001266  C0E2  F0DC         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$609
  5382  00126A  C0E3  F0DD         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$609+1
  5383  00126E  0E00               	movlw	0
  5384  001270  BFDD               	btfsc	(_FlashReadUart$609+1)& (0+255),7,b
  5385  001272  0EFF               	movlw	-1
  5386  001274  6FDE               	movwf	(_FlashReadUart$609+2)& (0+255),b
  5387  001276  6FDF               	movwf	(_FlashReadUart$609+3)& (0+255),b
  5388  001278  D008               	goto	l330
  5389  00127A                     l328:
  5390                           
  5391                           ; BSR set to: 0
  5392  00127A  C130  F0DC         	movff	_numOfValidateSamples,_FlashReadUart$609
  5393  00127E  C131  F0DD         	movff	_numOfValidateSamples+1,_FlashReadUart$609+1
  5394  001282  C132  F0DE         	movff	_numOfValidateSamples+2,_FlashReadUart$609+2
  5395  001286  C133  F0DF         	movff	_numOfValidateSamples+3,_FlashReadUart$609+3
  5396  00128A                     l330:
  5397                           
  5398                           ; BSR set to: 0
  5399  00128A  C0DC  F0E2         	movff	_FlashReadUart$609,FlashReadUart@numOfSampleToRead
  5400  00128E  C0DD  F0E3         	movff	_FlashReadUart$609+1,FlashReadUart@numOfSampleToRead+1
  5401                           
  5402                           ;FlashApp.c: 91: readAddress = writeAddress;
  5403  001292  C03E  F1C8         	movff	_writeAddress,_readAddress
  5404  001296  C03F  F1C9         	movff	_writeAddress+1,_readAddress+1
  5405  00129A  C040  F1CA         	movff	_writeAddress+2,_readAddress+2
  5406  00129E  C041  F1CB         	movff	_writeAddress+3,_readAddress+3
  5407                           
  5408                           ; BSR set to: 0
  5409                           ;FlashApp.c: 93: for (int j=0; j<numOfSampleToRead; j++)
  5410  0012A2  0E00               	movlw	0
  5411  0012A4  6FE1               	movwf	(FlashReadUart@j+1)& (0+255),b
  5412  0012A6  0E00               	movlw	0
  5413  0012A8  6FE0               	movwf	FlashReadUart@j& (0+255),b
  5414  0012AA  D08A               	goto	l331
  5415  0012AC                     
  5416                           ; BSR set to: 0
  5417                           ;FlashApp.c: 94: {
  5418                           ;FlashApp.c: 96: if(readAddress > 0)
  5419                           
  5420                           ; BSR set to: 0
  5421  0012AC  0101               	movlb	1	; () banked
  5422  0012AE  51C8               	movf	_readAddress& (0+255),w,b
  5423  0012B0  11C9               	iorwf	(_readAddress+1)& (0+255),w,b
  5424  0012B2  11CA               	iorwf	(_readAddress+2)& (0+255),w,b
  5425  0012B4  11CB               	iorwf	(_readAddress+3)& (0+255),w,b
  5426  0012B6  B4D8               	btfsc	status,2,c
  5427  0012B8  D007               	goto	l333
  5428                           
  5429                           ; BSR set to: 1
  5430                           ;FlashApp.c: 97: {
  5431                           ;FlashApp.c: 98: readAddress -= (64);
  5432  0012BA  0E40               	movlw	64
  5433  0012BC  5FC8               	subwf	_readAddress& (0+255),f,b
  5434  0012BE  0E00               	movlw	0
  5435  0012C0  5BC9               	subwfb	(_readAddress+1)& (0+255),f,b
  5436  0012C2  5BCA               	subwfb	(_readAddress+2)& (0+255),f,b
  5437  0012C4  5BCB               	subwfb	(_readAddress+3)& (0+255),f,b
  5438                           
  5439                           ;FlashApp.c: 99: }
  5440  0012C6  D008               	goto	l334
  5441  0012C8                     l333:
  5442                           
  5443                           ; BSR set to: 1
  5444                           ;FlashApp.c: 100: else
  5445                           ;FlashApp.c: 101: {
  5446                           ;FlashApp.c: 102: readAddress = 0x7FF0 - (64);
  5447                           
  5448                           ; BSR set to: 1
  5449  0012C8  0EB0               	movlw	176
  5450  0012CA  6FC8               	movwf	_readAddress& (0+255),b
  5451  0012CC  0E7F               	movlw	127
  5452  0012CE  6FC9               	movwf	(_readAddress+1)& (0+255),b
  5453  0012D0  0E00               	movlw	0
  5454  0012D2  6FCA               	movwf	(_readAddress+2)& (0+255),b
  5455  0012D4  0E00               	movlw	0
  5456  0012D6  6FCB               	movwf	(_readAddress+3)& (0+255),b
  5457  0012D8                     l334:
  5458                           
  5459                           ; BSR set to: 1
  5460                           ;FlashApp.c: 103: }
  5461                           ;FlashApp.c: 106: ZeroArray(TxMsg, (64) + (0x4) + 1);
  5462                           
  5463                           ; BSR set to: 1
  5464  0012D8  0E8F               	movlw	low FlashReadUart@TxMsg
  5465  0012DA  6E20               	movwf	ZeroArray@array,c
  5466  0012DC  0E00               	movlw	high FlashReadUart@TxMsg
  5467  0012DE  6E21               	movwf	ZeroArray@array+1,c
  5468  0012E0  0E00               	movlw	0
  5469  0012E2  6E23               	movwf	ZeroArray@size+1,c
  5470  0012E4  0E45               	movlw	69
  5471  0012E6  6E22               	movwf	ZeroArray@size,c
  5472  0012E8  EC1B  F021         	call	_ZeroArray	;wreg free
  5473                           
  5474                           ;FlashApp.c: 107: TxMsg[(0)] = (0x24);
  5475  0012EC  0E24               	movlw	36
  5476  0012EE  0100               	movlb	0	; () banked
  5477  0012F0  6F8F               	movwf	FlashReadUart@TxMsg& (0+255),b
  5478                           
  5479                           ; BSR set to: 0
  5480                           ;FlashApp.c: 108: TxMsg[(1)] = FLASH_MSG;
  5481  0012F2  0E05               	movlw	5
  5482  0012F4  6F90               	movwf	(FlashReadUart@TxMsg+1)& (0+255),b
  5483                           
  5484                           ; BSR set to: 0
  5485                           ;FlashApp.c: 109: TxMsg[(2)] = FLASH_SEND_RAW_DATA;
  5486  0012F6  0E54               	movlw	84
  5487  0012F8  6F91               	movwf	(FlashReadUart@TxMsg+2)& (0+255),b
  5488                           
  5489                           ; BSR set to: 0
  5490                           ;FlashApp.c: 110: TxMsg[(3)] = (64);
  5491  0012FA  0E40               	movlw	64
  5492  0012FC  6F92               	movwf	(FlashReadUart@TxMsg+3)& (0+255),b
  5493                           
  5494                           ; BSR set to: 0
  5495                           ;FlashApp.c: 112: for(int idx = 0; idx < (64); idx++)
  5496  0012FE  0E00               	movlw	0
  5497  001300  6FE5               	movwf	(FlashReadUart@idx+1)& (0+255),b
  5498  001302  0E00               	movlw	0
  5499  001304  6FE4               	movwf	FlashReadUart@idx& (0+255),b
  5500  001306                     l8283:
  5501                           
  5502                           ; BSR set to: 0
  5503  001306  BFE5               	btfsc	(FlashReadUart@idx+1)& (0+255),7,b
  5504  001308  D006               	goto	l335
  5505  00130A  51E5               	movf	(FlashReadUart@idx+1)& (0+255),w,b
  5506  00130C  E134               	bnz	l8293
  5507  00130E  0E40               	movlw	64
  5508  001310  5DE4               	subwf	FlashReadUart@idx& (0+255),w,b
  5509  001312  B0D8               	btfsc	status,0,c
  5510  001314  D030               	goto	u8360
  5511  001316                     l335:
  5512                           
  5513                           ; BSR set to: 0
  5514                           ;FlashApp.c: 113: {
  5515                           ;FlashApp.c: 114: TxMsg[(0x4) + idx] = FLASH_ReadByte(readAddress + idx);
  5516                           
  5517                           ; BSR set to: 0
  5518  001316  0E04               	movlw	4
  5519  001318  25E4               	addwf	FlashReadUart@idx& (0+255),w,b
  5520  00131A  6F89               	movwf	??_FlashReadUart& (0+255),b
  5521  00131C  0E00               	movlw	0
  5522  00131E  21E5               	addwfc	(FlashReadUart@idx+1)& (0+255),w,b
  5523  001320  6F8A               	movwf	(??_FlashReadUart+1)& (0+255),b
  5524  001322  0E8F               	movlw	low FlashReadUart@TxMsg
  5525  001324  2589               	addwf	??_FlashReadUart& (0+255),w,b
  5526  001326  6ED9               	movwf	fsr2l,c
  5527  001328  0E00               	movlw	high FlashReadUart@TxMsg
  5528  00132A  218A               	addwfc	(??_FlashReadUart+1)& (0+255),w,b
  5529  00132C  6EDA               	movwf	fsr2h,c
  5530  00132E  C0E4  F08B         	movff	FlashReadUart@idx,??_FlashReadUart+2
  5531  001332  C0E5  F08C         	movff	FlashReadUart@idx+1,??_FlashReadUart+3
  5532  001336  0E00               	movlw	0
  5533  001338  BF8C               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  5534  00133A  0EFF               	movlw	255
  5535  00133C  6F8D               	movwf	(??_FlashReadUart+4)& (0+255),b
  5536  00133E  6F8E               	movwf	(??_FlashReadUart+5)& (0+255),b
  5537  001340  0101               	movlb	1	; () banked
  5538  001342  51C8               	movf	_readAddress& (0+255),w,b
  5539  001344  0100               	movlb	0	; () banked
  5540  001346  258B               	addwf	(??_FlashReadUart+2)& (0+255),w,b
  5541  001348  6E18               	movwf	FLASH_ReadByte@flashAddr,c
  5542  00134A  0101               	movlb	1	; () banked
  5543  00134C  51C9               	movf	(_readAddress+1)& (0+255),w,b
  5544  00134E  0100               	movlb	0	; () banked
  5545  001350  218C               	addwfc	(??_FlashReadUart+3)& (0+255),w,b
  5546  001352  6E19               	movwf	FLASH_ReadByte@flashAddr+1,c
  5547  001354  0101               	movlb	1	; () banked
  5548  001356  51CA               	movf	(_readAddress+2)& (0+255),w,b
  5549  001358  0100               	movlb	0	; () banked
  5550  00135A  218D               	addwfc	(??_FlashReadUart+4)& (0+255),w,b
  5551  00135C  6E1A               	movwf	FLASH_ReadByte@flashAddr+2,c
  5552  00135E  0101               	movlb	1	; () banked
  5553  001360  51CB               	movf	(_readAddress+3)& (0+255),w,b
  5554  001362  0100               	movlb	0	; () banked
  5555  001364  218E               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  5556  001366  6E1B               	movwf	FLASH_ReadByte@flashAddr+3,c
  5557  001368  EC93  F021         	call	_FLASH_ReadByte	;wreg free
  5558  00136C  6EDF               	movwf	indf2,c
  5559  00136E  0100               	movlb	0	; () banked
  5560  001370  4BE4               	infsnz	FlashReadUart@idx& (0+255),f,b
  5561  001372  2BE5               	incf	(FlashReadUart@idx+1)& (0+255),f,b
  5562  001374  D7C8               	goto	l8283
  5563  001376                     u8360:
  5564  001376                     l8293:
  5565                           
  5566                           ; BSR set to: 0
  5567                           ;FlashApp.c: 115: }
  5568                           ;FlashApp.c: 117: TxMsg[(64) + (0x4)] = crc8(TxMsg, (64) + (0x4));
  5569  001376  0E8F               	movlw	low FlashReadUart@TxMsg
  5570  001378  6E18               	movwf	crc8@dataArray,c
  5571  00137A  0E00               	movlw	high FlashReadUart@TxMsg
  5572  00137C  6E19               	movwf	crc8@dataArray+1,c
  5573  00137E  0E00               	movlw	0
  5574  001380  6E1B               	movwf	crc8@dataSize+1,c
  5575  001382  0E44               	movlw	68
  5576  001384  6E1A               	movwf	crc8@dataSize,c
  5577  001386  EC9C  F01D         	call	_crc8	;wreg free
  5578  00138A  0100               	movlb	0	; () banked
  5579  00138C  6FD3               	movwf	(FlashReadUart@TxMsg+68)& (0+255),b
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;FlashApp.c: 119: WriteUartMessage(TxMsg, (64) + (0x4) + 1);
  5583  00138E  0E8F               	movlw	low FlashReadUart@TxMsg
  5584  001390  6E19               	movwf	WriteUartMessage@dataBuf,c
  5585  001392  0E00               	movlw	high FlashReadUart@TxMsg
  5586  001394  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5587  001396  0E00               	movlw	0
  5588  001398  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5589  00139A  0E45               	movlw	69
  5590  00139C  6E1B               	movwf	WriteUartMessage@dataSize,c
  5591  00139E  EC4E  F01F         	call	_WriteUartMessage	;wreg free
  5592                           
  5593                           ;FlashApp.c: 120: _delay((unsigned long)((200)*(8000000/4000.0)));
  5594  0013A2  0E03               	movlw	3
  5595  0013A4  0100               	movlb	0	; () banked
  5596  0013A6  6F8A               	movwf	(??_FlashReadUart+1)& (0+255),b
  5597  0013A8  0E08               	movlw	8
  5598  0013AA  6F89               	movwf	??_FlashReadUart& (0+255),b
  5599  0013AC  0E77               	movlw	119
  5600  0013AE                     u9047:
  5601  0013AE  2EE8               	decfsz	wreg,f,c
  5602  0013B0  D7FE               	bra	u9047
  5603  0013B2  2F89               	decfsz	??_FlashReadUart& (0+255),f,b
  5604  0013B4  D7FC               	bra	u9047
  5605  0013B6  2F8A               	decfsz	(??_FlashReadUart+1)& (0+255),f,b
  5606  0013B8  D7FA               	bra	u9047
  5607  0013BA  0100               	movlb	0	; () banked
  5608  0013BC  4BE0               	infsnz	FlashReadUart@j& (0+255),f,b
  5609  0013BE  2BE1               	incf	(FlashReadUart@j+1)& (0+255),f,b
  5610  0013C0                     l331:
  5611                           
  5612                           ; BSR set to: 0
  5613                           
  5614                           ; BSR set to: 0
  5615  0013C0  51E2               	movf	FlashReadUart@numOfSampleToRead& (0+255),w,b
  5616  0013C2  5DE0               	subwf	FlashReadUart@j& (0+255),w,b
  5617  0013C4  51E1               	movf	(FlashReadUart@j+1)& (0+255),w,b
  5618  0013C6  0A80               	xorlw	128
  5619  0013C8  6F89               	movwf	??_FlashReadUart& (0+255),b
  5620  0013CA  51E3               	movf	(FlashReadUart@numOfSampleToRead+1)& (0+255),w,b
  5621  0013CC  0A80               	xorlw	128
  5622  0013CE  5989               	subwfb	??_FlashReadUart& (0+255),w,b
  5623  0013D0  B0D8               	btfsc	status,0,c
  5624  0013D2  0012               	return	
  5625  0013D4  D76B               	goto	l332
  5626  0013D6                     __end_of_FlashReadUart:
  5627                           	opt stack 0
  5628                           tosu	equ	0xFFF
  5629                           tosh	equ	0xFFE
  5630                           tosl	equ	0xFFD
  5631                           pclath	equ	0xFFA
  5632                           tblptru	equ	0xFF8
  5633                           tblptrh	equ	0xFF7
  5634                           tblptrl	equ	0xFF6
  5635                           tablat	equ	0xFF5
  5636                           prodh	equ	0xFF4
  5637                           prodl	equ	0xFF3
  5638                           postinc0	equ	0xFEE
  5639                           plusw0	equ	0xFEB
  5640                           wreg	equ	0xFE8
  5641                           postdec1	equ	0xFE5
  5642                           fsr1l	equ	0xFE1
  5643                           indf2	equ	0xFDF
  5644                           postinc2	equ	0xFDE
  5645                           plusw2	equ	0xFDB
  5646                           fsr2h	equ	0xFDA
  5647                           fsr2l	equ	0xFD9
  5648                           status	equ	0xFD8
  5649                           
  5650 ;; *************** function _FLASH_ReadByte *****************
  5651 ;; Defined at:
  5652 ;;		line 58 in file "mcc_generated_files/memory.c"
  5653 ;; Parameters:    Size  Location     Type
  5654 ;;  flashAddr       4   23[COMRAM] unsigned long 
  5655 ;; Auto vars:     Size  Location     Type
  5656 ;;		None
  5657 ;; Return value:  Size  Location     Type
  5658 ;;                  1    wreg      unsigned char 
  5659 ;; Registers used:
  5660 ;;		wreg, status,2
  5661 ;; Tracked objects:
  5662 ;;		On entry : 0/0
  5663 ;;		On exit  : 0/0
  5664 ;;		Unchanged: 0/0
  5665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5666 ;;      Params:         4       0       0       0       0       0       0
  5667 ;;      Locals:         0       0       0       0       0       0       0
  5668 ;;      Temps:          0       0       0       0       0       0       0
  5669 ;;      Totals:         4       0       0       0       0       0       0
  5670 ;;Total ram usage:        4 bytes
  5671 ;; Hardware stack levels used:    1
  5672 ;; Hardware stack levels required when called:    4
  5673 ;; This function calls:
  5674 ;;		Nothing
  5675 ;; This function is called by:
  5676 ;;		_FlashReadUart
  5677 ;;		_FLASH_ReadWord
  5678 ;;		_FLASH_WriteByte
  5679 ;; This function uses a non-reentrant model
  5680 ;;
  5681                           
  5682                           	psect	text16
  5683  004326                     __ptext16:
  5684                           	opt stack 0
  5685  004326                     _FLASH_ReadByte:
  5686                           	opt stack 23
  5687                           
  5688                           ;memory.c: 60: TBLPTRU = (uint8_t)((flashAddr & 0x00FF0000) >> 16);
  5689                           
  5690                           ;incstack = 0
  5691  004326  C01A  FFF8         	movff	FLASH_ReadByte@flashAddr+2,tblptru	;volatile
  5692                           
  5693                           ;memory.c: 61: TBLPTRH = (uint8_t)((flashAddr & 0x0000FF00)>> 8);
  5694  00432A  C019  FFF7         	movff	FLASH_ReadByte@flashAddr+1,tblptrh	;volatile
  5695                           
  5696                           ;memory.c: 62: TBLPTRL = (uint8_t)(flashAddr & 0x000000FF);
  5697  00432E  C018  FFF6         	movff	FLASH_ReadByte@flashAddr,tblptrl	;volatile
  5698  004332  0008               	tblrd		*	;# 
  5699                           
  5700                           ;memory.c: 66: return (TABLAT);
  5701  004334  50F5               	movf	tablat,w,c	;volatile
  5702  004336  0012               	return	
  5703  004338                     __end_of_FLASH_ReadByte:
  5704                           	opt stack 0
  5705                           tosu	equ	0xFFF
  5706                           tosh	equ	0xFFE
  5707                           tosl	equ	0xFFD
  5708                           pclath	equ	0xFFA
  5709                           tblptru	equ	0xFF8
  5710                           tblptrh	equ	0xFF7
  5711                           tblptrl	equ	0xFF6
  5712                           tablat	equ	0xFF5
  5713                           prodh	equ	0xFF4
  5714                           prodl	equ	0xFF3
  5715                           postinc0	equ	0xFEE
  5716                           plusw0	equ	0xFEB
  5717                           wreg	equ	0xFE8
  5718                           postdec1	equ	0xFE5
  5719                           fsr1l	equ	0xFE1
  5720                           indf2	equ	0xFDF
  5721                           postinc2	equ	0xFDE
  5722                           plusw2	equ	0xFDB
  5723                           fsr2h	equ	0xFDA
  5724                           fsr2l	equ	0xFD9
  5725                           status	equ	0xFD8
  5726                           
  5727 ;; *************** function _FlashReadCondition *****************
  5728 ;; Defined at:
  5729 ;;		line 138 in file "FlashApp.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;		None
  5732 ;; Auto vars:     Size  Location     Type
  5733 ;;  TxMsg           9   39[COMRAM] unsigned char [9]
  5734 ;; Return value:  Size  Location     Type
  5735 ;;                  1    wreg      void 
  5736 ;; Registers used:
  5737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5738 ;; Tracked objects:
  5739 ;;		On entry : 0/0
  5740 ;;		On exit  : 0/0
  5741 ;;		Unchanged: 0/0
  5742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5743 ;;      Params:         0       0       0       0       0       0       0
  5744 ;;      Locals:         9       0       0       0       0       0       0
  5745 ;;      Temps:          4       0       0       0       0       0       0
  5746 ;;      Totals:        13       0       0       0       0       0       0
  5747 ;;Total ram usage:       13 bytes
  5748 ;; Hardware stack levels used:    1
  5749 ;; Hardware stack levels required when called:    6
  5750 ;; This function calls:
  5751 ;;		_WriteUartMessage
  5752 ;;		_ZeroArray
  5753 ;;		_crc8
  5754 ;;		_make8
  5755 ;; This function is called by:
  5756 ;;		_GroupFlashMemory
  5757 ;; This function uses a non-reentrant model
  5758 ;;
  5759                           
  5760                           	psect	text17
  5761  00218C                     __ptext17:
  5762                           	opt stack 0
  5763  00218C                     _FlashReadCondition:
  5764                           	opt stack 22
  5765                           
  5766                           ;FlashApp.c: 141: char TxMsg[4 + (0x4) + 1];
  5767                           ;FlashApp.c: 142: ZeroArray(TxMsg, 4 + (0x4) + 1);
  5768                           
  5769                           ;incstack = 0
  5770  00218C  0E28               	movlw	low FlashReadCondition@TxMsg
  5771  00218E  6E20               	movwf	ZeroArray@array,c
  5772  002190  0E00               	movlw	high FlashReadCondition@TxMsg
  5773  002192  6E21               	movwf	ZeroArray@array+1,c
  5774  002194  0E00               	movlw	0
  5775  002196  6E23               	movwf	ZeroArray@size+1,c
  5776  002198  0E09               	movlw	9
  5777  00219A  6E22               	movwf	ZeroArray@size,c
  5778  00219C  EC1B  F021         	call	_ZeroArray	;wreg free
  5779                           
  5780                           ;FlashApp.c: 145: TxMsg[(0)] = (0x24);
  5781  0021A0  0E24               	movlw	36
  5782  0021A2  6E28               	movwf	FlashReadCondition@TxMsg,c
  5783                           
  5784                           ;FlashApp.c: 146: TxMsg[(1)] = FLASH_MSG;
  5785  0021A4  0E05               	movlw	5
  5786  0021A6  6E29               	movwf	FlashReadCondition@TxMsg+1,c
  5787                           
  5788                           ;FlashApp.c: 147: TxMsg[(2)] = FLASH_READ_CONDITION;
  5789  0021A8  0E52               	movlw	82
  5790  0021AA  6E2A               	movwf	FlashReadCondition@TxMsg+2,c
  5791                           
  5792                           ;FlashApp.c: 148: TxMsg[(3)] = 4;
  5793  0021AC  0E04               	movlw	4
  5794  0021AE  6E2B               	movwf	FlashReadCondition@TxMsg+3,c
  5795                           
  5796                           ;FlashApp.c: 153: TxMsg[(0x4) + 0] = make8(0x7FF0 - 0x4580,1);
  5797  0021B0  0E70               	movlw	112
  5798  0021B2  6E18               	movwf	make8@data,c
  5799  0021B4  0E3A               	movlw	58
  5800  0021B6  6E19               	movwf	make8@data+1,c
  5801  0021B8  0E00               	movlw	0
  5802  0021BA  6E1A               	movwf	make8@data+2,c
  5803  0021BC  0E00               	movlw	0
  5804  0021BE  6E1B               	movwf	make8@data+3,c
  5805  0021C0  0E01               	movlw	1
  5806  0021C2  6E1C               	movwf	make8@dataLocation,c
  5807  0021C4  EC15  F01C         	call	_make8	;wreg free
  5808  0021C8  6E2C               	movwf	FlashReadCondition@TxMsg+4,c
  5809                           
  5810                           ;FlashApp.c: 154: TxMsg[(0x4) + 1] = make8(0x7FF0 - 0x4580,0);
  5811  0021CA  0E70               	movlw	112
  5812  0021CC  6E18               	movwf	make8@data,c
  5813  0021CE  0E3A               	movlw	58
  5814  0021D0  6E19               	movwf	make8@data+1,c
  5815  0021D2  0E00               	movlw	0
  5816  0021D4  6E1A               	movwf	make8@data+2,c
  5817  0021D6  0E00               	movlw	0
  5818  0021D8  6E1B               	movwf	make8@data+3,c
  5819  0021DA  0E00               	movlw	0
  5820  0021DC  6E1C               	movwf	make8@dataLocation,c
  5821  0021DE  EC15  F01C         	call	_make8	;wreg free
  5822  0021E2  6E2D               	movwf	FlashReadCondition@TxMsg+5,c
  5823                           
  5824                           ;FlashApp.c: 157: TxMsg[(0x4) + 2] = make8(0x7FF0 - writeAddress,1);
  5825  0021E4  C03E  F024         	movff	_writeAddress,??_FlashReadCondition
  5826  0021E8  C03F  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5827  0021EC  C040  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5828  0021F0  C041  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5829  0021F4  1E24               	comf	??_FlashReadCondition,f,c
  5830  0021F6  1E25               	comf	??_FlashReadCondition+1,f,c
  5831  0021F8  1E26               	comf	??_FlashReadCondition+2,f,c
  5832  0021FA  1E27               	comf	??_FlashReadCondition+3,f,c
  5833  0021FC  2A24               	incf	??_FlashReadCondition,f,c
  5834  0021FE  0E00               	movlw	0
  5835  002200  2225               	addwfc	??_FlashReadCondition+1,f,c
  5836  002202  2226               	addwfc	??_FlashReadCondition+2,f,c
  5837  002204  2227               	addwfc	??_FlashReadCondition+3,f,c
  5838  002206  0EF0               	movlw	240
  5839  002208  2424               	addwf	??_FlashReadCondition,w,c
  5840  00220A  6E18               	movwf	make8@data,c
  5841  00220C  0E7F               	movlw	127
  5842  00220E  2025               	addwfc	??_FlashReadCondition+1,w,c
  5843  002210  6E19               	movwf	make8@data+1,c
  5844  002212  0E00               	movlw	0
  5845  002214  2026               	addwfc	??_FlashReadCondition+2,w,c
  5846  002216  6E1A               	movwf	make8@data+2,c
  5847  002218  0E00               	movlw	0
  5848  00221A  2027               	addwfc	??_FlashReadCondition+3,w,c
  5849  00221C  6E1B               	movwf	make8@data+3,c
  5850  00221E  0E01               	movlw	1
  5851  002220  6E1C               	movwf	make8@dataLocation,c
  5852  002222  EC15  F01C         	call	_make8	;wreg free
  5853  002226  6E2E               	movwf	FlashReadCondition@TxMsg+6,c
  5854                           
  5855                           ;FlashApp.c: 158: TxMsg[(0x4) + 3] = make8(0x7FF0 - writeAddress,0);
  5856  002228  C03E  F024         	movff	_writeAddress,??_FlashReadCondition
  5857  00222C  C03F  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5858  002230  C040  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5859  002234  C041  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5860  002238  1E24               	comf	??_FlashReadCondition,f,c
  5861  00223A  1E25               	comf	??_FlashReadCondition+1,f,c
  5862  00223C  1E26               	comf	??_FlashReadCondition+2,f,c
  5863  00223E  1E27               	comf	??_FlashReadCondition+3,f,c
  5864  002240  2A24               	incf	??_FlashReadCondition,f,c
  5865  002242  0E00               	movlw	0
  5866  002244  2225               	addwfc	??_FlashReadCondition+1,f,c
  5867  002246  2226               	addwfc	??_FlashReadCondition+2,f,c
  5868  002248  2227               	addwfc	??_FlashReadCondition+3,f,c
  5869  00224A  0EF0               	movlw	240
  5870  00224C  2424               	addwf	??_FlashReadCondition,w,c
  5871  00224E  6E18               	movwf	make8@data,c
  5872  002250  0E7F               	movlw	127
  5873  002252  2025               	addwfc	??_FlashReadCondition+1,w,c
  5874  002254  6E19               	movwf	make8@data+1,c
  5875  002256  0E00               	movlw	0
  5876  002258  2026               	addwfc	??_FlashReadCondition+2,w,c
  5877  00225A  6E1A               	movwf	make8@data+2,c
  5878  00225C  0E00               	movlw	0
  5879  00225E  2027               	addwfc	??_FlashReadCondition+3,w,c
  5880  002260  6E1B               	movwf	make8@data+3,c
  5881  002262  0E00               	movlw	0
  5882  002264  6E1C               	movwf	make8@dataLocation,c
  5883  002266  EC15  F01C         	call	_make8	;wreg free
  5884  00226A  6E2F               	movwf	FlashReadCondition@TxMsg+7,c
  5885                           
  5886                           ;FlashApp.c: 160: TxMsg[4 + (0x4)] = crc8(TxMsg, 4 + (0x4));
  5887  00226C  0E28               	movlw	low FlashReadCondition@TxMsg
  5888  00226E  6E18               	movwf	crc8@dataArray,c
  5889  002270  0E00               	movlw	high FlashReadCondition@TxMsg
  5890  002272  6E19               	movwf	crc8@dataArray+1,c
  5891  002274  0E00               	movlw	0
  5892  002276  6E1B               	movwf	crc8@dataSize+1,c
  5893  002278  0E08               	movlw	8
  5894  00227A  6E1A               	movwf	crc8@dataSize,c
  5895  00227C  EC9C  F01D         	call	_crc8	;wreg free
  5896  002280  6E30               	movwf	FlashReadCondition@TxMsg+8,c
  5897                           
  5898                           ;FlashApp.c: 162: WriteUartMessage(TxMsg, 4 + (0x4) + 1);
  5899  002282  0E28               	movlw	low FlashReadCondition@TxMsg
  5900  002284  6E19               	movwf	WriteUartMessage@dataBuf,c
  5901  002286  0E00               	movlw	high FlashReadCondition@TxMsg
  5902  002288  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5903  00228A  0E00               	movlw	0
  5904  00228C  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5905  00228E  0E09               	movlw	9
  5906  002290  6E1B               	movwf	WriteUartMessage@dataSize,c
  5907  002292  EC4E  F01F         	call	_WriteUartMessage	;wreg free
  5908  002296  0012               	return		;funcret
  5909  002298                     __end_of_FlashReadCondition:
  5910                           	opt stack 0
  5911                           tosu	equ	0xFFF
  5912                           tosh	equ	0xFFE
  5913                           tosl	equ	0xFFD
  5914                           pclath	equ	0xFFA
  5915                           tblptru	equ	0xFF8
  5916                           tblptrh	equ	0xFF7
  5917                           tblptrl	equ	0xFF6
  5918                           tablat	equ	0xFF5
  5919                           prodh	equ	0xFF4
  5920                           prodl	equ	0xFF3
  5921                           postinc0	equ	0xFEE
  5922                           plusw0	equ	0xFEB
  5923                           wreg	equ	0xFE8
  5924                           postdec1	equ	0xFE5
  5925                           fsr1l	equ	0xFE1
  5926                           indf2	equ	0xFDF
  5927                           postinc2	equ	0xFDE
  5928                           plusw2	equ	0xFDB
  5929                           fsr2h	equ	0xFDA
  5930                           fsr2l	equ	0xFD9
  5931                           status	equ	0xFD8
  5932                           
  5933 ;; *************** function _FlashEreaseMem *****************
  5934 ;; Defined at:
  5935 ;;		line 129 in file "FlashApp.c"
  5936 ;; Parameters:    Size  Location     Type
  5937 ;;		None
  5938 ;; Auto vars:     Size  Location     Type
  5939 ;;		None
  5940 ;; Return value:  Size  Location     Type
  5941 ;;                  1    wreg      void 
  5942 ;; Registers used:
  5943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5944 ;; Tracked objects:
  5945 ;;		On entry : 0/0
  5946 ;;		On exit  : 0/0
  5947 ;;		Unchanged: 0/0
  5948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5949 ;;      Params:         0       0       0       0       0       0       0
  5950 ;;      Locals:         0       0       0       0       0       0       0
  5951 ;;      Temps:          0       0       0       0       0       0       0
  5952 ;;      Totals:         0       0       0       0       0       0       0
  5953 ;;Total ram usage:        0 bytes
  5954 ;; Hardware stack levels used:    1
  5955 ;; Hardware stack levels required when called:    7
  5956 ;; This function calls:
  5957 ;;		_SendAckMessage
  5958 ;;		_ZeroArray
  5959 ;; This function is called by:
  5960 ;;		_GroupFlashMemory
  5961 ;; This function uses a non-reentrant model
  5962 ;;
  5963                           
  5964                           	psect	text18
  5965  003A94                     __ptext18:
  5966                           	opt stack 0
  5967  003A94                     _FlashEreaseMem:
  5968                           	opt stack 21
  5969                           
  5970                           ;FlashApp.c: 131: writeAddress = 0x4580;
  5971                           
  5972                           ;incstack = 0
  5973  003A94  0E80               	movlw	128
  5974  003A96  6E3E               	movwf	_writeAddress,c
  5975  003A98  0E45               	movlw	69
  5976  003A9A  6E3F               	movwf	_writeAddress+1,c
  5977  003A9C  0E00               	movlw	0
  5978  003A9E  6E40               	movwf	_writeAddress+2,c
  5979  003AA0  0E00               	movlw	0
  5980  003AA2  6E41               	movwf	_writeAddress+3,c
  5981                           
  5982                           ;FlashApp.c: 132: readAddress = 0x4580;
  5983  003AA4  0E80               	movlw	128
  5984  003AA6  0101               	movlb	1	; () banked
  5985  003AA8  6FC8               	movwf	_readAddress& (0+255),b
  5986  003AAA  0E45               	movlw	69
  5987  003AAC  6FC9               	movwf	(_readAddress+1)& (0+255),b
  5988  003AAE  0E00               	movlw	0
  5989  003AB0  6FCA               	movwf	(_readAddress+2)& (0+255),b
  5990  003AB2  0E00               	movlw	0
  5991  003AB4  6FCB               	movwf	(_readAddress+3)& (0+255),b
  5992                           
  5993                           ;FlashApp.c: 133: numOfValidateSamples = 0;
  5994  003AB6  0E00               	movlw	0
  5995  003AB8  6F30               	movwf	_numOfValidateSamples& (0+255),b
  5996  003ABA  0E00               	movlw	0
  5997  003ABC  6F31               	movwf	(_numOfValidateSamples+1)& (0+255),b
  5998  003ABE  0E00               	movlw	0
  5999  003AC0  6F32               	movwf	(_numOfValidateSamples+2)& (0+255),b
  6000  003AC2  0E00               	movlw	0
  6001  003AC4  6F33               	movwf	(_numOfValidateSamples+3)& (0+255),b
  6002                           
  6003                           ; BSR set to: 1
  6004                           ;FlashApp.c: 134: ZeroArray(sampleArray, (64)/sizeof(adc_result_t));
  6005  003AC6  0E3C               	movlw	low _sampleArray
  6006  003AC8  6E20               	movwf	ZeroArray@array,c
  6007  003ACA  0E01               	movlw	high _sampleArray
  6008  003ACC  6E21               	movwf	ZeroArray@array+1,c
  6009  003ACE  0E00               	movlw	0
  6010  003AD0  6E23               	movwf	ZeroArray@size+1,c
  6011  003AD2  0E20               	movlw	32
  6012  003AD4  6E22               	movwf	ZeroArray@size,c
  6013  003AD6  EC1B  F021         	call	_ZeroArray	;wreg free
  6014                           
  6015                           ;FlashApp.c: 135: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_EREASE_MEMORY
      +                          );
  6016  003ADA  0E51               	movlw	81
  6017  003ADC  6E24               	movwf	SendAckMessage@inRequest,c
  6018  003ADE  0E05               	movlw	5
  6019  003AE0  EC73  F01D         	call	_SendAckMessage
  6020  003AE4  0012               	return		;funcret
  6021  003AE6                     __end_of_FlashEreaseMem:
  6022                           	opt stack 0
  6023                           tosu	equ	0xFFF
  6024                           tosh	equ	0xFFE
  6025                           tosl	equ	0xFFD
  6026                           pclath	equ	0xFFA
  6027                           tblptru	equ	0xFF8
  6028                           tblptrh	equ	0xFF7
  6029                           tblptrl	equ	0xFF6
  6030                           tablat	equ	0xFF5
  6031                           prodh	equ	0xFF4
  6032                           prodl	equ	0xFF3
  6033                           postinc0	equ	0xFEE
  6034                           plusw0	equ	0xFEB
  6035                           wreg	equ	0xFE8
  6036                           postdec1	equ	0xFE5
  6037                           fsr1l	equ	0xFE1
  6038                           indf2	equ	0xFDF
  6039                           postinc2	equ	0xFDE
  6040                           plusw2	equ	0xFDB
  6041                           fsr2h	equ	0xFDA
  6042                           fsr2l	equ	0xFD9
  6043                           status	equ	0xFD8
  6044                           
  6045 ;; *************** function _DacSetValue *****************
  6046 ;; Defined at:
  6047 ;;		line 30 in file "DacApp.c"
  6048 ;; Parameters:    Size  Location     Type
  6049 ;;  data            2   42[BANK0 ] PTR unsigned char 
  6050 ;;		 -> rxMsgData(20), 
  6051 ;; Auto vars:     Size  Location     Type
  6052 ;;  retVal          8   49[BANK0 ] struct .
  6053 ;;  dacIndex        1   48[BANK0 ] char 
  6054 ;; Return value:  Size  Location     Type
  6055 ;;                  1    wreg      void 
  6056 ;; Registers used:
  6057 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6058 ;; Tracked objects:
  6059 ;;		On entry : 0/0
  6060 ;;		On exit  : 0/0
  6061 ;;		Unchanged: 0/0
  6062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6063 ;;      Params:         0       2       0       0       0       0       0
  6064 ;;      Locals:         0       9       0       0       0       0       0
  6065 ;;      Temps:          0       4       0       0       0       0       0
  6066 ;;      Totals:         0      15       0       0       0       0       0
  6067 ;;Total ram usage:       15 bytes
  6068 ;; Hardware stack levels used:    1
  6069 ;; Hardware stack levels required when called:    8
  6070 ;; This function calls:
  6071 ;;		_GetIntFromUartData
  6072 ;;		_SWSPI_send_word
  6073 ;;		_SendAckMessage
  6074 ;;		_StoreIntInEeprom
  6075 ;; This function is called by:
  6076 ;;		_GroupDAC
  6077 ;; This function uses a non-reentrant model
  6078 ;;
  6079                           
  6080                           	psect	text19
  6081  0030AE                     __ptext19:
  6082                           	opt stack 0
  6083  0030AE                     _DacSetValue:
  6084                           	opt stack 20
  6085                           
  6086                           ;DacApp.c: 32: INT_VAL retVal;
  6087                           ;DacApp.c: 33: retVal = GetIntFromUartData(16, data);
  6088                           
  6089                           ;incstack = 0
  6090  0030AE  C08A  F066         	movff	DacSetValue@data,GetIntFromUartData@data
  6091  0030B2  C08B  F067         	movff	DacSetValue@data+1,GetIntFromUartData@data+1
  6092  0030B6  0E10               	movlw	16
  6093  0030B8  EC59  F00E         	call	_GetIntFromUartData
  6094  0030BC  EE20  F091         	lfsr	2,DacSetValue@retVal
  6095  0030C0  0E07               	movlw	7
  6096  0030C2                     u8381:
  6097  0030C2  CFEB FFDB          	movff	plusw0,plusw2
  6098  0030C6  06E8               	decf	wreg,f,c
  6099  0030C8  E2FC               	bc	u8381
  6100                           
  6101                           ;DacApp.c: 34: SWSPI_send_word(EXT_DAC, retVal.num, 1);
  6102  0030CA  C091  F029         	movff	DacSetValue@retVal,SWSPI_send_word@data
  6103  0030CE  C092  F02A         	movff	DacSetValue@retVal+1,SWSPI_send_word@data+1
  6104  0030D2  C093  F02B         	movff	DacSetValue@retVal+2,SWSPI_send_word@data+2
  6105  0030D6  C094  F02C         	movff	DacSetValue@retVal+3,SWSPI_send_word@data+3
  6106  0030DA  0E01               	movlw	1
  6107  0030DC  6E2D               	movwf	SWSPI_send_word@dataSize,c
  6108  0030DE  0E02               	movlw	2
  6109  0030E0  EC02  F018         	call	_SWSPI_send_word
  6110                           
  6111                           ;DacApp.c: 37: int8_t dacIndex = (retVal.num >> 14);
  6112  0030E4  C091  F08C         	movff	DacSetValue@retVal,??_DacSetValue
  6113  0030E8  C092  F08D         	movff	DacSetValue@retVal+1,??_DacSetValue+1
  6114  0030EC  C093  F08E         	movff	DacSetValue@retVal+2,??_DacSetValue+2
  6115  0030F0  C094  F08F         	movff	DacSetValue@retVal+3,??_DacSetValue+3
  6116  0030F4  0E0F               	movlw	15
  6117  0030F6  D006               	goto	u8390
  6118  0030F8                     u8395:
  6119  0030F8  0100               	movlb	0	; () banked
  6120  0030FA  90D8               	bcf	status,0,c
  6121  0030FC  338F               	rrcf	(??_DacSetValue+3)& (0+255),f,b
  6122  0030FE  338E               	rrcf	(??_DacSetValue+2)& (0+255),f,b
  6123  003100  338D               	rrcf	(??_DacSetValue+1)& (0+255),f,b
  6124  003102  338C               	rrcf	??_DacSetValue& (0+255),f,b
  6125  003104                     u8390:
  6126  003104  2EE8               	decfsz	wreg,f,c
  6127  003106  D7F8               	goto	u8395
  6128  003108  518C               	movf	??_DacSetValue& (0+255),w,b
  6129  00310A  6F90               	movwf	DacSetValue@dacIndex& (0+255),b
  6130                           
  6131                           ; BSR set to: 0
  6132                           ;DacApp.c: 38: StoreIntInEeprom(retVal.num, (0x40) | DAC_ADDRES[dacIndex], 2);
  6133  00310C  C091  F021         	movff	DacSetValue@retVal,StoreIntInEeprom@data
  6134  003110  C092  F022         	movff	DacSetValue@retVal+1,StoreIntInEeprom@data+1
  6135  003114  C093  F023         	movff	DacSetValue@retVal+2,StoreIntInEeprom@data+2
  6136  003118  C094  F024         	movff	DacSetValue@retVal+3,StoreIntInEeprom@data+3
  6137  00311C  5190               	movf	DacSetValue@dacIndex& (0+255),w,b
  6138  00311E  0D01               	mullw	1
  6139  003120  0E58               	movlw	low _DAC_ADDRES
  6140  003122  24F3               	addwf	prodl,w,c
  6141  003124  6EF6               	movwf	tblptrl,c
  6142  003126  0E06               	movlw	high _DAC_ADDRES
  6143  003128  20F4               	addwfc	prodh,w,c
  6144  00312A  6EF7               	movwf	tblptrh,c
  6145  00312C                     	if	0	;There are less than 3 active tblptr bytes
  6146  00312C                     	endif
  6147  00312C  0008               	tblrd		*
  6148  00312E  50F5               	movf	tablat,w,c
  6149  003130  0940               	iorlw	64
  6150  003132  6E25               	movwf	StoreIntInEeprom@address,c
  6151  003134  0E00               	movlw	0
  6152  003136  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  6153  003138  0E02               	movlw	2
  6154  00313A  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  6155  00313C  ECFA  F01E         	call	_StoreIntInEeprom	;wreg free
  6156                           
  6157                           ;DacApp.c: 41: SendAckMessage((MSG_GROUPS)DAC_MSG, (MSG_REQUEST)DAC_SET_VALUE);
  6158  003140  0E61               	movlw	97
  6159  003142  6E24               	movwf	SendAckMessage@inRequest,c
  6160  003144  0E06               	movlw	6
  6161  003146  EC73  F01D         	call	_SendAckMessage
  6162  00314A  0012               	return		;funcret
  6163  00314C                     __end_of_DacSetValue:
  6164                           	opt stack 0
  6165                           tosu	equ	0xFFF
  6166                           tosh	equ	0xFFE
  6167                           tosl	equ	0xFFD
  6168                           pclath	equ	0xFFA
  6169                           tblptru	equ	0xFF8
  6170                           tblptrh	equ	0xFF7
  6171                           tblptrl	equ	0xFF6
  6172                           tablat	equ	0xFF5
  6173                           prodh	equ	0xFF4
  6174                           prodl	equ	0xFF3
  6175                           postinc0	equ	0xFEE
  6176                           plusw0	equ	0xFEB
  6177                           wreg	equ	0xFE8
  6178                           postdec1	equ	0xFE5
  6179                           fsr1l	equ	0xFE1
  6180                           indf2	equ	0xFDF
  6181                           postinc2	equ	0xFDE
  6182                           plusw2	equ	0xFDB
  6183                           fsr2h	equ	0xFDA
  6184                           fsr2l	equ	0xFD9
  6185                           status	equ	0xFD8
  6186                           
  6187 ;; *************** function _GetIntFromUartData *****************
  6188 ;; Defined at:
  6189 ;;		line 47 in file "SystemCommon.c"
  6190 ;; Parameters:    Size  Location     Type
  6191 ;;  num             1    wreg     char 
  6192 ;;  data            2    6[BANK0 ] PTR unsigned char 
  6193 ;;		 -> rxMsgData(20), 
  6194 ;; Auto vars:     Size  Location     Type
  6195 ;;  num             1   26[BANK0 ] char 
  6196 ;;  idxCon          2   36[BANK0 ] int 
  6197 ;;  dataRegArr     10   16[BANK0 ] unsigned char [10]
  6198 ;;  retVal          8   28[BANK0 ] struct .
  6199 ;;  idxData         1   38[BANK0 ] unsigned char 
  6200 ;;  recVal          1   27[BANK0 ] unsigned char 
  6201 ;; Return value:  Size  Location     Type
  6202 ;;                  8    6[BANK0 ] struct .
  6203 ;; Registers used:
  6204 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6210 ;;      Params:         0       8       0       0       0       0       0
  6211 ;;      Locals:         0      23       0       0       0       0       0
  6212 ;;      Temps:          0       2       0       0       0       0       0
  6213 ;;      Totals:         0      33       0       0       0       0       0
  6214 ;;Total ram usage:       33 bytes
  6215 ;; Hardware stack levels used:    1
  6216 ;; Hardware stack levels required when called:    7
  6217 ;; This function calls:
  6218 ;;		_ZeroArray
  6219 ;;		_strtol
  6220 ;; This function is called by:
  6221 ;;		_FlashReadUart
  6222 ;;		_DacSetValue
  6223 ;;		_UpdateSynthFreq
  6224 ;; This function uses a non-reentrant model
  6225 ;;
  6226                           
  6227                           	psect	text20
  6228  001CB2                     __ptext20:
  6229                           	opt stack 0
  6230  001CB2                     _GetIntFromUartData:
  6231                           	opt stack 20
  6232                           
  6233                           ;incstack = 0
  6234                           ;GetIntFromUartData@num stored from wreg
  6235  001CB2  0100               	movlb	0	; () banked
  6236  001CB4  6F7A               	movwf	GetIntFromUartData@num& (0+255),b
  6237                           
  6238                           ;SystemCommon.c: 49: INT_VAL retVal;
  6239                           ;SystemCommon.c: 50: retVal.num = 0;
  6240  001CB6  0E00               	movlw	0
  6241  001CB8  0100               	movlb	0	; () banked
  6242  001CBA  6F7C               	movwf	GetIntFromUartData@retVal& (0+255),b
  6243  001CBC  0E00               	movlw	0
  6244  001CBE  6F7D               	movwf	(GetIntFromUartData@retVal+1)& (0+255),b
  6245  001CC0  0E00               	movlw	0
  6246  001CC2  6F7E               	movwf	(GetIntFromUartData@retVal+2)& (0+255),b
  6247  001CC4  0E00               	movlw	0
  6248  001CC6  6F7F               	movwf	(GetIntFromUartData@retVal+3)& (0+255),b
  6249                           
  6250                           ;SystemCommon.c: 51: retVal.con = 0;
  6251  001CC8  0E00               	movlw	0
  6252  001CCA  6F80               	movwf	(GetIntFromUartData@retVal+4)& (0+255),b
  6253  001CCC  0E00               	movlw	0
  6254  001CCE  6F81               	movwf	(GetIntFromUartData@retVal+5)& (0+255),b
  6255  001CD0  0E00               	movlw	0
  6256  001CD2  6F82               	movwf	(GetIntFromUartData@retVal+6)& (0+255),b
  6257  001CD4  0E00               	movlw	0
  6258  001CD6  6F83               	movwf	(GetIntFromUartData@retVal+7)& (0+255),b
  6259                           
  6260                           ;SystemCommon.c: 52: uint8_t idxData = 0;
  6261  001CD8  0E00               	movlw	0
  6262  001CDA  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  6263                           
  6264                           ;SystemCommon.c: 53: char recVal = (0);
  6265  001CDC  0E00               	movlw	0
  6266  001CDE  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6267                           
  6268                           ; BSR set to: 0
  6269                           ;SystemCommon.c: 55: char dataRegArr[0xA];
  6270                           ;SystemCommon.c: 56: ZeroArray(dataRegArr, 0xA);
  6271  001CE0  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6272  001CE2  6E20               	movwf	ZeroArray@array,c
  6273  001CE4  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6274  001CE6  6E21               	movwf	ZeroArray@array+1,c
  6275  001CE8  0E00               	movlw	0
  6276  001CEA  6E23               	movwf	ZeroArray@size+1,c
  6277  001CEC  0E0A               	movlw	10
  6278  001CEE  6E22               	movwf	ZeroArray@size,c
  6279  001CF0  EC1B  F021         	call	_ZeroArray	;wreg free
  6280                           
  6281                           ;SystemCommon.c: 58: for(idxData = 0; idxData < 0xA; idxData++)
  6282  001CF4  0E00               	movlw	0
  6283  001CF6  0100               	movlb	0	; () banked
  6284  001CF8  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  6285  001CFA                     l8009:
  6286                           
  6287                           ; BSR set to: 0
  6288  001CFA  0E09               	movlw	9
  6289  001CFC  6586               	cpfsgt	GetIntFromUartData@idxData& (0+255),b
  6290  001CFE  D001               	goto	l1408
  6291  001D00  D01D               	goto	u7980
  6292  001D02                     l1408:
  6293                           
  6294                           ; BSR set to: 0
  6295                           ;SystemCommon.c: 59: {
  6296                           ;SystemCommon.c: 60: recVal = data[idxData];
  6297                           
  6298                           ; BSR set to: 0
  6299  001D02  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6300  001D04  0D01               	mullw	1
  6301  001D06  50F3               	movf	prodl,w,c
  6302  001D08  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6303  001D0A  6ED9               	movwf	fsr2l,c
  6304  001D0C  50F4               	movf	prodh,w,c
  6305  001D0E  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6306  001D10  6EDA               	movwf	fsr2h,c
  6307  001D12  50DF               	movf	indf2,w,c
  6308  001D14  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6309                           
  6310                           ; BSR set to: 0
  6311                           ;SystemCommon.c: 61: if(recVal == 0x10)
  6312  001D16  0E10               	movlw	16
  6313  001D18  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  6314  001D1A  A4D8               	btfss	status,2,c
  6315  001D1C  D002               	goto	l1410
  6316                           
  6317                           ; BSR set to: 0
  6318                           ;SystemCommon.c: 62: {
  6319                           ;SystemCommon.c: 63: idxData++;
  6320  001D1E  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  6321                           
  6322                           ;SystemCommon.c: 64: break;
  6323  001D20  D00D               	goto	u7980
  6324  001D22                     l1410:
  6325                           
  6326                           ; BSR set to: 0
  6327                           ;SystemCommon.c: 66: else
  6328                           ;SystemCommon.c: 67: {
  6329                           ;SystemCommon.c: 68: dataRegArr[idxData] = recVal + '0';
  6330                           
  6331                           ; BSR set to: 0
  6332  001D22  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6333  001D24  0D01               	mullw	1
  6334  001D26  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6335  001D28  24F3               	addwf	prodl,w,c
  6336  001D2A  6ED9               	movwf	fsr2l,c
  6337  001D2C  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6338  001D2E  20F4               	addwfc	prodh,w,c
  6339  001D30  6EDA               	movwf	fsr2h,c
  6340  001D32  517B               	movf	GetIntFromUartData@recVal& (0+255),w,b
  6341  001D34  0F30               	addlw	48
  6342  001D36  6EDF               	movwf	indf2,c
  6343                           
  6344                           ; BSR set to: 0
  6345                           
  6346                           ; BSR set to: 0
  6347  001D38  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  6348  001D3A  D7DF               	goto	l8009
  6349  001D3C                     u7980:
  6350                           
  6351                           ; BSR set to: 0
  6352                           ;SystemCommon.c: 69: }
  6353                           ;SystemCommon.c: 70: }
  6354                           ;SystemCommon.c: 71: retVal.num = strtol(dataRegArr, (0), num);
  6355                           
  6356                           ; BSR set to: 0
  6357  001D3C  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6358  001D3E  6E26               	movwf	strtol@s,c
  6359  001D40  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6360  001D42  6E27               	movwf	strtol@s+1,c
  6361  001D44  0E00               	movlw	0
  6362  001D46  6E28               	movwf	strtol@endptr,c
  6363  001D48  0E00               	movlw	0
  6364  001D4A  6E29               	movwf	strtol@endptr+1,c
  6365  001D4C  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  6366  001D4E  6E2A               	movwf	strtol@base,c
  6367  001D50  6A2B               	clrf	strtol@base+1,c
  6368  001D52  BE2A               	btfsc	strtol@base,7,c
  6369  001D54  062B               	decf	strtol@base+1,f,c
  6370  001D56  ECD7  F00B         	call	_strtol	;wreg free
  6371  001D5A  C026  F07C         	movff	?_strtol,GetIntFromUartData@retVal
  6372  001D5E  C027  F07D         	movff	?_strtol+1,GetIntFromUartData@retVal+1
  6373  001D62  C028  F07E         	movff	?_strtol+2,GetIntFromUartData@retVal+2
  6374  001D66  C029  F07F         	movff	?_strtol+3,GetIntFromUartData@retVal+3
  6375                           
  6376                           ;SystemCommon.c: 73: ZeroArray(dataRegArr, 0xA);
  6377  001D6A  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6378  001D6C  6E20               	movwf	ZeroArray@array,c
  6379  001D6E  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6380  001D70  6E21               	movwf	ZeroArray@array+1,c
  6381  001D72  0E00               	movlw	0
  6382  001D74  6E23               	movwf	ZeroArray@size+1,c
  6383  001D76  0E0A               	movlw	10
  6384  001D78  6E22               	movwf	ZeroArray@size,c
  6385  001D7A  EC1B  F021         	call	_ZeroArray	;wreg free
  6386                           
  6387                           ;SystemCommon.c: 75: for(int idxCon = 0; idxCon < 0xA; idxCon++)
  6388  001D7E  0E00               	movlw	0
  6389  001D80  0100               	movlb	0	; () banked
  6390  001D82  6F85               	movwf	(GetIntFromUartData@idxCon+1)& (0+255),b
  6391  001D84  0E00               	movlw	0
  6392  001D86  6F84               	movwf	GetIntFromUartData@idxCon& (0+255),b
  6393  001D88                     l8031:
  6394                           
  6395                           ; BSR set to: 0
  6396  001D88  BF85               	btfsc	(GetIntFromUartData@idxCon+1)& (0+255),7,b
  6397  001D8A  D006               	goto	l1412
  6398  001D8C  5185               	movf	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6399  001D8E  E12E               	bnz	l8049
  6400  001D90  0E0A               	movlw	10
  6401  001D92  5D84               	subwf	GetIntFromUartData@idxCon& (0+255),w,b
  6402  001D94  B0D8               	btfsc	status,0,c
  6403  001D96  D02A               	goto	u8010
  6404  001D98                     l1412:
  6405                           
  6406                           ; BSR set to: 0
  6407                           ;SystemCommon.c: 76: {
  6408                           ;SystemCommon.c: 77: recVal = data[idxData + idxCon];
  6409                           
  6410                           ; BSR set to: 0
  6411  001D98  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6412  001D9A  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6413  001D9C  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  6414  001D9E  0E00               	movlw	0
  6415  001DA0  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6416  001DA2  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  6417  001DA4  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  6418  001DA6  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6419  001DA8  6ED9               	movwf	fsr2l,c
  6420  001DAA  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  6421  001DAC  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6422  001DAE  6EDA               	movwf	fsr2h,c
  6423  001DB0  50DF               	movf	indf2,w,c
  6424  001DB2  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6425                           
  6426                           ; BSR set to: 0
  6427                           ;SystemCommon.c: 78: if(recVal == 0x23)
  6428  001DB4  0E23               	movlw	35
  6429  001DB6  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  6430  001DB8  B4D8               	btfsc	status,2,c
  6431  001DBA  D018               	goto	u8010
  6432                           
  6433                           ; BSR set to: 0
  6434                           ;SystemCommon.c: 82: else
  6435                           ;SystemCommon.c: 83: {
  6436                           ;SystemCommon.c: 84: dataRegArr[idxCon] = data[idxCon + idxData] + '0';
  6437                           
  6438                           ; BSR set to: 0
  6439                           
  6440                           ; BSR set to: 0
  6441                           ;SystemCommon.c: 81: }
  6442                           
  6443                           ; BSR set to: 0
  6444                           ;SystemCommon.c: 79: {
  6445                           ;SystemCommon.c: 80: break;
  6446  001DBC  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6447  001DBE  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6448  001DC0  6ED9               	movwf	fsr2l,c
  6449  001DC2  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6450  001DC4  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6451  001DC6  6EDA               	movwf	fsr2h,c
  6452  001DC8  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6453  001DCA  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6454  001DCC  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  6455  001DCE  0E00               	movlw	0
  6456  001DD0  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6457  001DD2  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  6458  001DD4  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  6459  001DD6  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6460  001DD8  6EE1               	movwf	fsr1l,c
  6461  001DDA  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  6462  001DDC  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6463  001DDE  6EE2               	movwf	fsr1h,c
  6464  001DE0  50E7               	movf	indf1,w,c
  6465  001DE2  0F30               	addlw	48
  6466  001DE4  6EDF               	movwf	indf2,c
  6467                           
  6468                           ; BSR set to: 0
  6469                           
  6470                           ; BSR set to: 0
  6471  001DE6  4B84               	infsnz	GetIntFromUartData@idxCon& (0+255),f,b
  6472  001DE8  2B85               	incf	(GetIntFromUartData@idxCon+1)& (0+255),f,b
  6473  001DEA  D7CE               	goto	l8031
  6474  001DEC                     u8010:
  6475  001DEC                     l8049:
  6476                           
  6477                           ; BSR set to: 0
  6478                           ;SystemCommon.c: 85: }
  6479                           ;SystemCommon.c: 86: }
  6480                           ;SystemCommon.c: 87: retVal.con = strtol(dataRegArr, (0), num);
  6481  001DEC  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6482  001DEE  6E26               	movwf	strtol@s,c
  6483  001DF0  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6484  001DF2  6E27               	movwf	strtol@s+1,c
  6485  001DF4  0E00               	movlw	0
  6486  001DF6  6E28               	movwf	strtol@endptr,c
  6487  001DF8  0E00               	movlw	0
  6488  001DFA  6E29               	movwf	strtol@endptr+1,c
  6489  001DFC  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  6490  001DFE  6E2A               	movwf	strtol@base,c
  6491  001E00  6A2B               	clrf	strtol@base+1,c
  6492  001E02  BE2A               	btfsc	strtol@base,7,c
  6493  001E04  062B               	decf	strtol@base+1,f,c
  6494  001E06  ECD7  F00B         	call	_strtol	;wreg free
  6495  001E0A  C026  F080         	movff	?_strtol,GetIntFromUartData@retVal+4
  6496  001E0E  C027  F081         	movff	?_strtol+1,GetIntFromUartData@retVal+5
  6497  001E12  C028  F082         	movff	?_strtol+2,GetIntFromUartData@retVal+6
  6498  001E16  C029  F083         	movff	?_strtol+3,GetIntFromUartData@retVal+7
  6499                           
  6500                           ;SystemCommon.c: 89: return retVal;
  6501  001E1A  EE20  F07C         	lfsr	2,GetIntFromUartData@retVal
  6502  001E1E  EE00  F066         	lfsr	0,?_GetIntFromUartData
  6503  001E22  0E07               	movlw	7
  6504  001E24                     u8021:
  6505  001E24  CFDB FFEB          	movff	plusw2,plusw0
  6506  001E28  06E8               	decf	wreg,f,c
  6507  001E2A  E2FC               	bc	u8021
  6508  001E2C  0012               	return	
  6509  001E2E                     __end_of_GetIntFromUartData:
  6510                           	opt stack 0
  6511                           tosu	equ	0xFFF
  6512                           tosh	equ	0xFFE
  6513                           tosl	equ	0xFFD
  6514                           pclath	equ	0xFFA
  6515                           tblptru	equ	0xFF8
  6516                           tblptrh	equ	0xFF7
  6517                           tblptrl	equ	0xFF6
  6518                           tablat	equ	0xFF5
  6519                           prodh	equ	0xFF4
  6520                           prodl	equ	0xFF3
  6521                           postinc0	equ	0xFEE
  6522                           plusw0	equ	0xFEB
  6523                           wreg	equ	0xFE8
  6524                           indf1	equ	0xFE7
  6525                           postdec1	equ	0xFE5
  6526                           fsr1h	equ	0xFE2
  6527                           fsr1l	equ	0xFE1
  6528                           indf2	equ	0xFDF
  6529                           postinc2	equ	0xFDE
  6530                           plusw2	equ	0xFDB
  6531                           fsr2h	equ	0xFDA
  6532                           fsr2l	equ	0xFD9
  6533                           status	equ	0xFD8
  6534                           
  6535 ;; *************** function _strtol *****************
  6536 ;; Defined at:
  6537 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  6538 ;; Parameters:    Size  Location     Type
  6539 ;;  s               2   37[COMRAM] PTR const unsigned char 
  6540 ;;		 -> GetIntFromUartData@dataRegArr(10), 
  6541 ;;  endptr          2   39[COMRAM] PTR PTR unsigned char 
  6542 ;;		 -> NULL(0), 
  6543 ;;  base            2   41[COMRAM] int 
  6544 ;; Auto vars:     Size  Location     Type
  6545 ;;  a               4    1[BANK0 ] long 
  6546 ;;  c               1    5[BANK0 ] unsigned char 
  6547 ;;  sign            1    0[BANK0 ] unsigned char 
  6548 ;; Return value:  Size  Location     Type
  6549 ;;                  4   37[COMRAM] long 
  6550 ;; Registers used:
  6551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6552 ;; Tracked objects:
  6553 ;;		On entry : 0/0
  6554 ;;		On exit  : 0/0
  6555 ;;		Unchanged: 0/0
  6556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6557 ;;      Params:         6       0       0       0       0       0       0
  6558 ;;      Locals:         0       6       0       0       0       0       0
  6559 ;;      Temps:          4       0       0       0       0       0       0
  6560 ;;      Totals:        10       6       0       0       0       0       0
  6561 ;;Total ram usage:       16 bytes
  6562 ;; Hardware stack levels used:    1
  6563 ;; Hardware stack levels required when called:    6
  6564 ;; This function calls:
  6565 ;;		___lmul
  6566 ;;		_isalpha
  6567 ;;		_isdigit
  6568 ;;		_isspace
  6569 ;;		_toupper
  6570 ;; This function is called by:
  6571 ;;		_GetIntFromUartData
  6572 ;; This function uses a non-reentrant model
  6573 ;;
  6574                           
  6575                           	psect	text21
  6576  0017AE                     __ptext21:
  6577                           	opt stack 0
  6578  0017AE                     _strtol:
  6579                           	opt stack 20
  6580                           
  6581                           ;incstack = 0
  6582  0017AE  C026  FFD9         	movff	strtol@s,fsr2l
  6583  0017B2  C027  FFDA         	movff	strtol@s+1,fsr2h
  6584  0017B6  50DF               	movf	indf2,w,c
  6585  0017B8  0100               	movlb	0	; () banked
  6586  0017BA  6F65               	movwf	strtol@c& (0+255),b
  6587                           
  6588                           ; BSR set to: 0
  6589  0017BC  4A26               	infsnz	strtol@s,f,c
  6590  0017BE  2A27               	incf	strtol@s+1,f,c
  6591                           
  6592                           ; BSR set to: 0
  6593  0017C0  5165               	movf	strtol@c& (0+255),w,b
  6594  0017C2  EC6F  F020         	call	_isspace
  6595  0017C6  B0D8               	btfsc	status,0,c
  6596  0017C8  D7F2               	goto	_strtol
  6597  0017CA  0E00               	movlw	0
  6598  0017CC  0100               	movlb	0	; () banked
  6599  0017CE  6F61               	movwf	strtol@a& (0+255),b
  6600  0017D0  0E00               	movlw	0
  6601  0017D2  6F62               	movwf	(strtol@a+1)& (0+255),b
  6602  0017D4  0E00               	movlw	0
  6603  0017D6  6F63               	movwf	(strtol@a+2)& (0+255),b
  6604  0017D8  0E00               	movlw	0
  6605  0017DA  6F64               	movwf	(strtol@a+3)& (0+255),b
  6606  0017DC  0E00               	movlw	0
  6607  0017DE  6F60               	movwf	strtol@sign& (0+255),b
  6608                           
  6609                           ; BSR set to: 0
  6610  0017E0  0E2D               	movlw	45
  6611  0017E2  1965               	xorwf	strtol@c& (0+255),w,b
  6612  0017E4  A4D8               	btfss	status,2,c
  6613  0017E6  D003               	goto	l2175
  6614                           
  6615                           ; BSR set to: 0
  6616  0017E8  0E01               	movlw	1
  6617  0017EA  6F60               	movwf	strtol@sign& (0+255),b
  6618  0017EC  D004               	goto	u7810
  6619  0017EE                     l2175:
  6620                           
  6621                           ; BSR set to: 0
  6622                           
  6623                           ; BSR set to: 0
  6624  0017EE  0E2B               	movlw	43
  6625  0017F0  1965               	xorwf	strtol@c& (0+255),w,b
  6626  0017F2  A4D8               	btfss	status,2,c
  6627  0017F4  D008               	goto	l2177
  6628  0017F6                     u7810:
  6629                           
  6630                           ; BSR set to: 0
  6631  0017F6  C026  FFD9         	movff	strtol@s,fsr2l
  6632  0017FA  C027  FFDA         	movff	strtol@s+1,fsr2h
  6633  0017FE  50DF               	movf	indf2,w,c
  6634  001800  6F65               	movwf	strtol@c& (0+255),b
  6635                           
  6636                           ; BSR set to: 0
  6637  001802  4A26               	infsnz	strtol@s,f,c
  6638  001804  2A27               	incf	strtol@s+1,f,c
  6639  001806                     l2177:
  6640                           
  6641                           ; BSR set to: 0
  6642                           
  6643                           ; BSR set to: 0
  6644                           
  6645                           ; BSR set to: 0
  6646  001806  0E30               	movlw	48
  6647  001808  1965               	xorwf	strtol@c& (0+255),w,b
  6648  00180A  A4D8               	btfss	status,2,c
  6649  00180C  D02E               	goto	l2185
  6650                           
  6651                           ; BSR set to: 0
  6652  00180E  C026  FFD9         	movff	strtol@s,fsr2l
  6653  001812  C027  FFDA         	movff	strtol@s+1,fsr2h
  6654  001816  50DF               	movf	indf2,w,c
  6655  001818  6F65               	movwf	strtol@c& (0+255),b
  6656                           
  6657                           ; BSR set to: 0
  6658  00181A  4A26               	infsnz	strtol@s,f,c
  6659  00181C  2A27               	incf	strtol@s+1,f,c
  6660                           
  6661                           ; BSR set to: 0
  6662  00181E  502A               	movf	strtol@base,w,c
  6663  001820  102B               	iorwf	strtol@base+1,w,c
  6664  001822  B4D8               	btfsc	status,2,c
  6665  001824  D005               	goto	u7840
  6666                           
  6667                           ; BSR set to: 0
  6668  001826  0E10               	movlw	16
  6669  001828  182A               	xorwf	strtol@base,w,c
  6670  00182A  102B               	iorwf	strtol@base+1,w,c
  6671  00182C  A4D8               	btfss	status,2,c
  6672  00182E  D015               	goto	l2179
  6673  001830                     u7840:
  6674                           
  6675                           ; BSR set to: 0
  6676                           
  6677                           ; BSR set to: 0
  6678  001830  0E78               	movlw	120
  6679  001832  1965               	xorwf	strtol@c& (0+255),w,b
  6680  001834  B4D8               	btfsc	status,2,c
  6681  001836  D004               	goto	u7860
  6682                           
  6683                           ; BSR set to: 0
  6684  001838  0E58               	movlw	88
  6685  00183A  1965               	xorwf	strtol@c& (0+255),w,b
  6686  00183C  A4D8               	btfss	status,2,c
  6687  00183E  D00D               	goto	l2179
  6688  001840                     u7860:
  6689                           
  6690                           ; BSR set to: 0
  6691                           
  6692                           ; BSR set to: 0
  6693  001840  0E00               	movlw	0
  6694  001842  6E2B               	movwf	strtol@base+1,c
  6695  001844  0E10               	movlw	16
  6696  001846  6E2A               	movwf	strtol@base,c
  6697                           
  6698                           ; BSR set to: 0
  6699  001848  C026  FFD9         	movff	strtol@s,fsr2l
  6700  00184C  C027  FFDA         	movff	strtol@s+1,fsr2h
  6701  001850  50DF               	movf	indf2,w,c
  6702  001852  6F65               	movwf	strtol@c& (0+255),b
  6703                           
  6704                           ; BSR set to: 0
  6705  001854  4A26               	infsnz	strtol@s,f,c
  6706  001856  2A27               	incf	strtol@s+1,f,c
  6707  001858  D008               	goto	l2185
  6708  00185A                     l2179:
  6709                           
  6710                           ; BSR set to: 0
  6711                           
  6712                           ; BSR set to: 0
  6713  00185A  502A               	movf	strtol@base,w,c
  6714  00185C  102B               	iorwf	strtol@base+1,w,c
  6715  00185E  A4D8               	btfss	status,2,c
  6716  001860  D004               	goto	l2185
  6717                           
  6718                           ; BSR set to: 0
  6719  001862  0E00               	movlw	0
  6720  001864  6E2B               	movwf	strtol@base+1,c
  6721  001866  0E08               	movlw	8
  6722  001868  6E2A               	movwf	strtol@base,c
  6723  00186A                     l2185:
  6724                           
  6725                           ; BSR set to: 0
  6726                           
  6727                           ; BSR set to: 0
  6728                           
  6729                           ; BSR set to: 0
  6730                           
  6731                           ; BSR set to: 0
  6732  00186A  502A               	movf	strtol@base,w,c
  6733  00186C  102B               	iorwf	strtol@base+1,w,c
  6734  00186E  A4D8               	btfss	status,2,c
  6735  001870  D004               	goto	l2186
  6736                           
  6737                           ; BSR set to: 0
  6738  001872  0E00               	movlw	0
  6739  001874  6E2B               	movwf	strtol@base+1,c
  6740  001876  0E0A               	movlw	10
  6741  001878  6E2A               	movwf	strtol@base,c
  6742  00187A                     l2186:
  6743                           
  6744                           ; BSR set to: 0
  6745                           
  6746                           ; BSR set to: 0
  6747                           
  6748                           ; BSR set to: 0
  6749  00187A  5165               	movf	strtol@c& (0+255),w,b
  6750  00187C  EC5B  F020         	call	_isalpha
  6751  001880  A0D8               	btfss	status,0,c
  6752  001882  D008               	goto	l2188
  6753  001884  0100               	movlb	0	; () banked
  6754  001886  5165               	movf	strtol@c& (0+255),w,b
  6755  001888  EC75  F021         	call	_toupper
  6756  00188C  0FC9               	addlw	201
  6757  00188E  0100               	movlb	0	; () banked
  6758  001890  6F65               	movwf	strtol@c& (0+255),b
  6759  001892  D009               	goto	l2191
  6760  001894                     l2188:
  6761                           
  6762                           ; BSR set to: 0
  6763  001894  0100               	movlb	0	; () banked
  6764  001896  5165               	movf	strtol@c& (0+255),w,b
  6765  001898  ECFD  F020         	call	_isdigit
  6766  00189C  A0D8               	btfss	status,0,c
  6767  00189E  D039               	goto	l2192
  6768  0018A0  0E30               	movlw	48
  6769  0018A2  0100               	movlb	0	; () banked
  6770  0018A4  5F65               	subwf	strtol@c& (0+255),f,b
  6771  0018A6                     l2191:
  6772                           
  6773                           ; BSR set to: 0
  6774                           
  6775                           ; BSR set to: 0
  6776                           
  6777                           ; BSR set to: 0
  6778  0018A6  5165               	movf	strtol@c& (0+255),w,b
  6779  0018A8  6E2C               	movwf	??_strtol& (0+255),c
  6780  0018AA  6A2D               	clrf	(??_strtol+1)& (0+255),c
  6781  0018AC  502A               	movf	strtol@base,w,c
  6782  0018AE  5C2C               	subwf	??_strtol,w,c
  6783  0018B0  502D               	movf	??_strtol+1,w,c
  6784  0018B2  0A80               	xorlw	128
  6785  0018B4  6E2E               	movwf	(??_strtol+2)& (0+255),c
  6786  0018B6  502B               	movf	strtol@base+1,w,c
  6787  0018B8  0A80               	xorlw	128
  6788  0018BA  582E               	subwfb	(??_strtol+2)& (0+255),w,c
  6789  0018BC  B0D8               	btfsc	status,0,c
  6790  0018BE  D029               	goto	l2192
  6791                           
  6792                           ; BSR set to: 0
  6793                           
  6794                           ; BSR set to: 0
  6795                           
  6796                           ; BSR set to: 0
  6797  0018C0  C02A  F01A         	movff	strtol@base,___lmul@multiplier
  6798  0018C4  C02B  F01B         	movff	strtol@base+1,___lmul@multiplier+1
  6799  0018C8  0E00               	movlw	0
  6800  0018CA  BE1B               	btfsc	___lmul@multiplier+1,7,c
  6801  0018CC  0EFF               	movlw	-1
  6802  0018CE  6E1C               	movwf	___lmul@multiplier+2,c
  6803  0018D0  6E1D               	movwf	___lmul@multiplier+3,c
  6804  0018D2  C061  F01E         	movff	strtol@a,___lmul@multiplicand
  6805  0018D6  C062  F01F         	movff	strtol@a+1,___lmul@multiplicand+1
  6806  0018DA  C063  F020         	movff	strtol@a+2,___lmul@multiplicand+2
  6807  0018DE  C064  F021         	movff	strtol@a+3,___lmul@multiplicand+3
  6808  0018E2  EC1F  F01D         	call	___lmul	;wreg free
  6809  0018E6  0100               	movlb	0	; () banked
  6810  0018E8  5165               	movf	strtol@c& (0+255),w,b
  6811  0018EA  241A               	addwf	?___lmul,w,c
  6812  0018EC  6F61               	movwf	strtol@a& (0+255),b
  6813  0018EE  0E00               	movlw	0
  6814  0018F0  201B               	addwfc	?___lmul+1,w,c
  6815  0018F2  6F62               	movwf	(strtol@a+1)& (0+255),b
  6816  0018F4  0E00               	movlw	0
  6817  0018F6  201C               	addwfc	?___lmul+2,w,c
  6818  0018F8  6F63               	movwf	(strtol@a+2)& (0+255),b
  6819  0018FA  0E00               	movlw	0
  6820  0018FC  201D               	addwfc	?___lmul+3,w,c
  6821  0018FE  6F64               	movwf	(strtol@a+3)& (0+255),b
  6822                           
  6823                           ; BSR set to: 0
  6824  001900  C026  FFD9         	movff	strtol@s,fsr2l
  6825  001904  C027  FFDA         	movff	strtol@s+1,fsr2h
  6826  001908  50DF               	movf	indf2,w,c
  6827  00190A  6F65               	movwf	strtol@c& (0+255),b
  6828                           
  6829                           ; BSR set to: 0
  6830  00190C  4A26               	infsnz	strtol@s,f,c
  6831  00190E  2A27               	incf	strtol@s+1,f,c
  6832  001910  D7B4               	goto	l2186
  6833  001912                     l2192:
  6834                           
  6835                           ; BSR set to: 0
  6836  001912  5028               	movf	strtol@endptr,w,c
  6837  001914  1029               	iorwf	strtol@endptr+1,w,c
  6838  001916  B4D8               	btfsc	status,2,c
  6839  001918  D00E               	goto	l2194
  6840  00191A  0EFF               	movlw	255
  6841  00191C  2426               	addwf	strtol@s,w,c
  6842  00191E  6E2C               	movwf	??_strtol& (0+255),c
  6843  001920  0EFF               	movlw	255
  6844  001922  2027               	addwfc	strtol@s+1,w,c
  6845  001924  6E2D               	movwf	(??_strtol+1)& (0+255),c
  6846  001926  C028  FFD9         	movff	strtol@endptr,fsr2l
  6847  00192A  C029  FFDA         	movff	strtol@endptr+1,fsr2h
  6848  00192E  C02C  FFDE         	movff	??_strtol,postinc2
  6849  001932  C02D  FFDD         	movff	??_strtol+1,postdec2
  6850  001936                     l2194:
  6851  001936  0100               	movlb	0	; () banked
  6852  001938  5160               	movf	strtol@sign& (0+255),w,b
  6853  00193A  B4D8               	btfsc	status,2,c
  6854  00193C  D01A               	goto	l2195
  6855                           
  6856                           ; BSR set to: 0
  6857  00193E  C061  F02C         	movff	strtol@a,??_strtol
  6858  001942  C062  F02D         	movff	strtol@a+1,??_strtol+1
  6859  001946  C063  F02E         	movff	strtol@a+2,??_strtol+2
  6860  00194A  C064  F02F         	movff	strtol@a+3,??_strtol+3
  6861  00194E  1E2C               	comf	??_strtol,f,c
  6862  001950  1E2D               	comf	??_strtol+1,f,c
  6863  001952  1E2E               	comf	??_strtol+2,f,c
  6864  001954  1E2F               	comf	??_strtol+3,f,c
  6865  001956  2A2C               	incf	??_strtol,f,c
  6866  001958  0E00               	movlw	0
  6867  00195A  222D               	addwfc	??_strtol+1,f,c
  6868  00195C  222E               	addwfc	??_strtol+2,f,c
  6869  00195E  222F               	addwfc	??_strtol+3,f,c
  6870  001960  C02C  F026         	movff	??_strtol,?_strtol
  6871  001964  C02D  F027         	movff	??_strtol+1,?_strtol+1
  6872  001968  C02E  F028         	movff	??_strtol+2,?_strtol+2
  6873  00196C  C02F  F029         	movff	??_strtol+3,?_strtol+3
  6874                           
  6875                           ; BSR set to: 0
  6876  001970  0012               	return	
  6877  001972                     l2195:
  6878                           
  6879                           ; BSR set to: 0
  6880  001972  C061  F026         	movff	strtol@a,?_strtol
  6881  001976  C062  F027         	movff	strtol@a+1,?_strtol+1
  6882  00197A  C063  F028         	movff	strtol@a+2,?_strtol+2
  6883  00197E  C064  F029         	movff	strtol@a+3,?_strtol+3
  6884                           
  6885                           ; BSR set to: 0
  6886  001982  0012               	return		;funcret
  6887  001984                     __end_of_strtol:
  6888                           	opt stack 0
  6889                           tosu	equ	0xFFF
  6890                           tosh	equ	0xFFE
  6891                           tosl	equ	0xFFD
  6892                           pclath	equ	0xFFA
  6893                           tblptru	equ	0xFF8
  6894                           tblptrh	equ	0xFF7
  6895                           tblptrl	equ	0xFF6
  6896                           tablat	equ	0xFF5
  6897                           prodh	equ	0xFF4
  6898                           prodl	equ	0xFF3
  6899                           postinc0	equ	0xFEE
  6900                           plusw0	equ	0xFEB
  6901                           wreg	equ	0xFE8
  6902                           indf1	equ	0xFE7
  6903                           postdec1	equ	0xFE5
  6904                           fsr1h	equ	0xFE2
  6905                           fsr1l	equ	0xFE1
  6906                           indf2	equ	0xFDF
  6907                           postinc2	equ	0xFDE
  6908                           postdec2	equ	0xFDD
  6909                           plusw2	equ	0xFDB
  6910                           fsr2h	equ	0xFDA
  6911                           fsr2l	equ	0xFD9
  6912                           status	equ	0xFD8
  6913                           
  6914 ;; *************** function _toupper *****************
  6915 ;; Defined at:
  6916 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  6917 ;; Parameters:    Size  Location     Type
  6918 ;;  c               1    wreg     unsigned char 
  6919 ;; Auto vars:     Size  Location     Type
  6920 ;;  c               1   23[COMRAM] unsigned char 
  6921 ;; Return value:  Size  Location     Type
  6922 ;;                  1    wreg      unsigned char 
  6923 ;; Registers used:
  6924 ;;		wreg, status,2, status,0
  6925 ;; Tracked objects:
  6926 ;;		On entry : 0/0
  6927 ;;		On exit  : 0/0
  6928 ;;		Unchanged: 0/0
  6929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6930 ;;      Params:         0       0       0       0       0       0       0
  6931 ;;      Locals:         1       0       0       0       0       0       0
  6932 ;;      Temps:          0       0       0       0       0       0       0
  6933 ;;      Totals:         1       0       0       0       0       0       0
  6934 ;;Total ram usage:        1 bytes
  6935 ;; Hardware stack levels used:    1
  6936 ;; Hardware stack levels required when called:    4
  6937 ;; This function calls:
  6938 ;;		Nothing
  6939 ;; This function is called by:
  6940 ;;		_strtol
  6941 ;; This function uses a non-reentrant model
  6942 ;;
  6943                           
  6944                           	psect	text22
  6945  0042EA                     __ptext22:
  6946                           	opt stack 0
  6947  0042EA                     _toupper:
  6948                           	opt stack 21
  6949                           
  6950                           ; BSR set to: 0
  6951                           ;incstack = 0
  6952                           ;toupper@c stored from wreg
  6953  0042EA  6E18               	movwf	toupper@c,c
  6954  0042EC  0E7B               	movlw	123
  6955  0042EE  6018               	cpfslt	toupper@c,c
  6956  0042F0  D004               	goto	l2199
  6957  0042F2  0E60               	movlw	96
  6958  0042F4  6418               	cpfsgt	toupper@c,c
  6959  0042F6  D001               	goto	l2199
  6960  0042F8  9A18               	bcf	toupper@c,5,c
  6961  0042FA                     l2199:
  6962  0042FA  5018               	movf	toupper@c,w,c
  6963  0042FC  0012               	return	
  6964  0042FE                     __end_of_toupper:
  6965                           	opt stack 0
  6966                           tosu	equ	0xFFF
  6967                           tosh	equ	0xFFE
  6968                           tosl	equ	0xFFD
  6969                           pclath	equ	0xFFA
  6970                           tblptru	equ	0xFF8
  6971                           tblptrh	equ	0xFF7
  6972                           tblptrl	equ	0xFF6
  6973                           tablat	equ	0xFF5
  6974                           prodh	equ	0xFF4
  6975                           prodl	equ	0xFF3
  6976                           postinc0	equ	0xFEE
  6977                           plusw0	equ	0xFEB
  6978                           wreg	equ	0xFE8
  6979                           indf1	equ	0xFE7
  6980                           postdec1	equ	0xFE5
  6981                           fsr1h	equ	0xFE2
  6982                           fsr1l	equ	0xFE1
  6983                           indf2	equ	0xFDF
  6984                           postinc2	equ	0xFDE
  6985                           postdec2	equ	0xFDD
  6986                           plusw2	equ	0xFDB
  6987                           fsr2h	equ	0xFDA
  6988                           fsr2l	equ	0xFD9
  6989                           status	equ	0xFD8
  6990                           
  6991 ;; *************** function _isspace *****************
  6992 ;; Defined at:
  6993 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  6994 ;; Parameters:    Size  Location     Type
  6995 ;;  c               1    wreg     unsigned char 
  6996 ;; Auto vars:     Size  Location     Type
  6997 ;;  c               1   25[COMRAM] unsigned char 
  6998 ;; Return value:  Size  Location     Type
  6999 ;;		None               void
  7000 ;; Registers used:
  7001 ;;		wreg, status,2, status,0
  7002 ;; Tracked objects:
  7003 ;;		On entry : 0/0
  7004 ;;		On exit  : 0/0
  7005 ;;		Unchanged: 0/0
  7006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7007 ;;      Params:         0       0       0       0       0       0       0
  7008 ;;      Locals:         2       0       0       0       0       0       0
  7009 ;;      Temps:          1       0       0       0       0       0       0
  7010 ;;      Totals:         3       0       0       0       0       0       0
  7011 ;;Total ram usage:        3 bytes
  7012 ;; Hardware stack levels used:    1
  7013 ;; Hardware stack levels required when called:    4
  7014 ;; This function calls:
  7015 ;;		Nothing
  7016 ;; This function is called by:
  7017 ;;		_strtol
  7018 ;; This function uses a non-reentrant model
  7019 ;;
  7020                           
  7021                           	psect	text23
  7022  0040DE                     __ptext23:
  7023                           	opt stack 0
  7024  0040DE                     _isspace:
  7025                           	opt stack 21
  7026                           
  7027                           ;incstack = 0
  7028                           ;isspace@c stored from wreg
  7029  0040DE  6E1A               	movwf	isspace@c,c
  7030  0040E0  0E01               	movlw	1
  7031  0040E2  6E19               	movwf	_isspace$3332,c
  7032  0040E4  0E20               	movlw	32
  7033  0040E6  181A               	xorwf	isspace@c,w,c
  7034  0040E8  B4D8               	btfsc	status,2,c
  7035  0040EA  D008               	goto	l2281
  7036  0040EC  0E0E               	movlw	14
  7037  0040EE  601A               	cpfslt	isspace@c,c
  7038  0040F0  D003               	goto	u7580
  7039  0040F2  0E09               	movlw	9
  7040  0040F4  601A               	cpfslt	isspace@c,c
  7041  0040F6  D002               	goto	l2281
  7042  0040F8                     u7580:
  7043  0040F8  0E00               	movlw	0
  7044  0040FA  6E19               	movwf	_isspace$3332,c
  7045  0040FC                     l2281:
  7046  0040FC  C019  F018         	movff	_isspace$3332,??_isspace
  7047  004100  3018               	rrcf	??_isspace,w,c
  7048  004102  0012               	return	
  7049  004104                     __end_of_isspace:
  7050                           	opt stack 0
  7051                           tosu	equ	0xFFF
  7052                           tosh	equ	0xFFE
  7053                           tosl	equ	0xFFD
  7054                           pclath	equ	0xFFA
  7055                           tblptru	equ	0xFF8
  7056                           tblptrh	equ	0xFF7
  7057                           tblptrl	equ	0xFF6
  7058                           tablat	equ	0xFF5
  7059                           prodh	equ	0xFF4
  7060                           prodl	equ	0xFF3
  7061                           postinc0	equ	0xFEE
  7062                           plusw0	equ	0xFEB
  7063                           wreg	equ	0xFE8
  7064                           indf1	equ	0xFE7
  7065                           postdec1	equ	0xFE5
  7066                           fsr1h	equ	0xFE2
  7067                           fsr1l	equ	0xFE1
  7068                           indf2	equ	0xFDF
  7069                           postinc2	equ	0xFDE
  7070                           postdec2	equ	0xFDD
  7071                           plusw2	equ	0xFDB
  7072                           fsr2h	equ	0xFDA
  7073                           fsr2l	equ	0xFD9
  7074                           status	equ	0xFD8
  7075                           
  7076 ;; *************** function _isdigit *****************
  7077 ;; Defined at:
  7078 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  7079 ;; Parameters:    Size  Location     Type
  7080 ;;  c               1    wreg     unsigned char 
  7081 ;; Auto vars:     Size  Location     Type
  7082 ;;  c               1   25[COMRAM] unsigned char 
  7083 ;; Return value:  Size  Location     Type
  7084 ;;		None               void
  7085 ;; Registers used:
  7086 ;;		wreg, status,2, status,0
  7087 ;; Tracked objects:
  7088 ;;		On entry : 0/0
  7089 ;;		On exit  : 0/0
  7090 ;;		Unchanged: 0/0
  7091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7092 ;;      Params:         0       0       0       0       0       0       0
  7093 ;;      Locals:         2       0       0       0       0       0       0
  7094 ;;      Temps:          1       0       0       0       0       0       0
  7095 ;;      Totals:         3       0       0       0       0       0       0
  7096 ;;Total ram usage:        3 bytes
  7097 ;; Hardware stack levels used:    1
  7098 ;; Hardware stack levels required when called:    4
  7099 ;; This function calls:
  7100 ;;		Nothing
  7101 ;; This function is called by:
  7102 ;;		_strtol
  7103 ;; This function uses a non-reentrant model
  7104 ;;
  7105                           
  7106                           	psect	text24
  7107  0041FA                     __ptext24:
  7108                           	opt stack 0
  7109  0041FA                     _isdigit:
  7110                           	opt stack 21
  7111                           
  7112                           ;incstack = 0
  7113                           ;isdigit@c stored from wreg
  7114  0041FA  6E1A               	movwf	isdigit@c,c
  7115  0041FC  0E00               	movlw	0
  7116  0041FE  6E19               	movwf	_isdigit$3329,c
  7117  004200  0E3A               	movlw	58
  7118  004202  601A               	cpfslt	isdigit@c,c
  7119  004204  D005               	goto	l2276
  7120  004206  0E2F               	movlw	47
  7121  004208  641A               	cpfsgt	isdigit@c,c
  7122  00420A  D002               	goto	l2276
  7123  00420C  0E01               	movlw	1
  7124  00420E  6E19               	movwf	_isdigit$3329,c
  7125  004210                     l2276:
  7126  004210  C019  F018         	movff	_isdigit$3329,??_isdigit
  7127  004214  3018               	rrcf	??_isdigit,w,c
  7128  004216  0012               	return	
  7129  004218                     __end_of_isdigit:
  7130                           	opt stack 0
  7131                           tosu	equ	0xFFF
  7132                           tosh	equ	0xFFE
  7133                           tosl	equ	0xFFD
  7134                           pclath	equ	0xFFA
  7135                           tblptru	equ	0xFF8
  7136                           tblptrh	equ	0xFF7
  7137                           tblptrl	equ	0xFF6
  7138                           tablat	equ	0xFF5
  7139                           prodh	equ	0xFF4
  7140                           prodl	equ	0xFF3
  7141                           postinc0	equ	0xFEE
  7142                           plusw0	equ	0xFEB
  7143                           wreg	equ	0xFE8
  7144                           indf1	equ	0xFE7
  7145                           postdec1	equ	0xFE5
  7146                           fsr1h	equ	0xFE2
  7147                           fsr1l	equ	0xFE1
  7148                           indf2	equ	0xFDF
  7149                           postinc2	equ	0xFDE
  7150                           postdec2	equ	0xFDD
  7151                           plusw2	equ	0xFDB
  7152                           fsr2h	equ	0xFDA
  7153                           fsr2l	equ	0xFD9
  7154                           status	equ	0xFD8
  7155                           
  7156 ;; *************** function _isalpha *****************
  7157 ;; Defined at:
  7158 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  7159 ;; Parameters:    Size  Location     Type
  7160 ;;  c               1    wreg     unsigned char 
  7161 ;; Auto vars:     Size  Location     Type
  7162 ;;  c               1   28[COMRAM] unsigned char 
  7163 ;; Return value:  Size  Location     Type
  7164 ;;		None               void
  7165 ;; Registers used:
  7166 ;;		wreg, status,2, status,0, cstack
  7167 ;; Tracked objects:
  7168 ;;		On entry : 0/0
  7169 ;;		On exit  : 0/0
  7170 ;;		Unchanged: 0/0
  7171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7172 ;;      Params:         0       0       0       0       0       0       0
  7173 ;;      Locals:         2       0       0       0       0       0       0
  7174 ;;      Temps:          1       0       0       0       0       0       0
  7175 ;;      Totals:         3       0       0       0       0       0       0
  7176 ;;Total ram usage:        3 bytes
  7177 ;; Hardware stack levels used:    1
  7178 ;; Hardware stack levels required when called:    5
  7179 ;; This function calls:
  7180 ;;		_isupper
  7181 ;; This function is called by:
  7182 ;;		_strtol
  7183 ;; This function uses a non-reentrant model
  7184 ;;
  7185                           
  7186                           	psect	text25
  7187  0040B6                     __ptext25:
  7188                           	opt stack 0
  7189  0040B6                     _isalpha:
  7190                           	opt stack 20
  7191                           
  7192                           ;incstack = 0
  7193                           ;isalpha@c stored from wreg
  7194  0040B6  6E1D               	movwf	isalpha@c,c
  7195  0040B8  0E01               	movlw	1
  7196  0040BA  6E1C               	movwf	_isalpha$3326,c
  7197  0040BC  0E7B               	movlw	123
  7198  0040BE  601D               	cpfslt	isalpha@c,c
  7199  0040C0  D003               	goto	u7600
  7200  0040C2  0E61               	movlw	97
  7201  0040C4  601D               	cpfslt	isalpha@c,c
  7202  0040C6  D007               	goto	l2271
  7203  0040C8                     u7600:
  7204  0040C8  501D               	movf	isalpha@c,w,c
  7205  0040CA  EC0C  F021         	call	_isupper
  7206  0040CE  B0D8               	btfsc	status,0,c
  7207  0040D0  D002               	goto	l2271
  7208  0040D2  0E00               	movlw	0
  7209  0040D4  6E1C               	movwf	_isalpha$3326,c
  7210  0040D6                     l2271:
  7211  0040D6  C01C  F01B         	movff	_isalpha$3326,??_isalpha
  7212  0040DA  301B               	rrcf	??_isalpha,w,c
  7213  0040DC  0012               	return	
  7214  0040DE                     __end_of_isalpha:
  7215                           	opt stack 0
  7216                           tosu	equ	0xFFF
  7217                           tosh	equ	0xFFE
  7218                           tosl	equ	0xFFD
  7219                           pclath	equ	0xFFA
  7220                           tblptru	equ	0xFF8
  7221                           tblptrh	equ	0xFF7
  7222                           tblptrl	equ	0xFF6
  7223                           tablat	equ	0xFF5
  7224                           prodh	equ	0xFF4
  7225                           prodl	equ	0xFF3
  7226                           postinc0	equ	0xFEE
  7227                           plusw0	equ	0xFEB
  7228                           wreg	equ	0xFE8
  7229                           indf1	equ	0xFE7
  7230                           postdec1	equ	0xFE5
  7231                           fsr1h	equ	0xFE2
  7232                           fsr1l	equ	0xFE1
  7233                           indf2	equ	0xFDF
  7234                           postinc2	equ	0xFDE
  7235                           postdec2	equ	0xFDD
  7236                           plusw2	equ	0xFDB
  7237                           fsr2h	equ	0xFDA
  7238                           fsr2l	equ	0xFD9
  7239                           status	equ	0xFD8
  7240                           
  7241 ;; *************** function _isupper *****************
  7242 ;; Defined at:
  7243 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  7244 ;; Parameters:    Size  Location     Type
  7245 ;;  c               1    wreg     unsigned char 
  7246 ;; Auto vars:     Size  Location     Type
  7247 ;;  c               1   25[COMRAM] unsigned char 
  7248 ;; Return value:  Size  Location     Type
  7249 ;;		None               void
  7250 ;; Registers used:
  7251 ;;		wreg, status,2, status,0
  7252 ;; Tracked objects:
  7253 ;;		On entry : 0/0
  7254 ;;		On exit  : 0/0
  7255 ;;		Unchanged: 0/0
  7256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7257 ;;      Params:         0       0       0       0       0       0       0
  7258 ;;      Locals:         2       0       0       0       0       0       0
  7259 ;;      Temps:          1       0       0       0       0       0       0
  7260 ;;      Totals:         3       0       0       0       0       0       0
  7261 ;;Total ram usage:        3 bytes
  7262 ;; Hardware stack levels used:    1
  7263 ;; Hardware stack levels required when called:    4
  7264 ;; This function calls:
  7265 ;;		Nothing
  7266 ;; This function is called by:
  7267 ;;		_isalpha
  7268 ;; This function uses a non-reentrant model
  7269 ;;
  7270                           
  7271                           	psect	text26
  7272  004218                     __ptext26:
  7273                           	opt stack 0
  7274  004218                     _isupper:
  7275                           	opt stack 20
  7276                           
  7277                           ;incstack = 0
  7278                           ;isupper@c stored from wreg
  7279  004218  6E1A               	movwf	isupper@c,c
  7280  00421A  0E00               	movlw	0
  7281  00421C  6E19               	movwf	_isupper$3335,c
  7282  00421E  0E5B               	movlw	91
  7283  004220  601A               	cpfslt	isupper@c,c
  7284  004222  D005               	goto	l2286
  7285  004224  0E40               	movlw	64
  7286  004226  641A               	cpfsgt	isupper@c,c
  7287  004228  D002               	goto	l2286
  7288  00422A  0E01               	movlw	1
  7289  00422C  6E19               	movwf	_isupper$3335,c
  7290  00422E                     l2286:
  7291  00422E  C019  F018         	movff	_isupper$3335,??_isupper
  7292  004232  3018               	rrcf	??_isupper,w,c
  7293  004234  0012               	return	
  7294  004236                     __end_of_isupper:
  7295                           	opt stack 0
  7296                           tosu	equ	0xFFF
  7297                           tosh	equ	0xFFE
  7298                           tosl	equ	0xFFD
  7299                           pclath	equ	0xFFA
  7300                           tblptru	equ	0xFF8
  7301                           tblptrh	equ	0xFF7
  7302                           tblptrl	equ	0xFF6
  7303                           tablat	equ	0xFF5
  7304                           prodh	equ	0xFF4
  7305                           prodl	equ	0xFF3
  7306                           postinc0	equ	0xFEE
  7307                           plusw0	equ	0xFEB
  7308                           wreg	equ	0xFE8
  7309                           indf1	equ	0xFE7
  7310                           postdec1	equ	0xFE5
  7311                           fsr1h	equ	0xFE2
  7312                           fsr1l	equ	0xFE1
  7313                           indf2	equ	0xFDF
  7314                           postinc2	equ	0xFDE
  7315                           postdec2	equ	0xFDD
  7316                           plusw2	equ	0xFDB
  7317                           fsr2h	equ	0xFDA
  7318                           fsr2l	equ	0xFD9
  7319                           status	equ	0xFD8
  7320                           
  7321 ;; *************** function _DacReadValue *****************
  7322 ;; Defined at:
  7323 ;;		line 44 in file "DacApp.c"
  7324 ;; Parameters:    Size  Location     Type
  7325 ;;  data            2  104[BANK0 ] PTR unsigned char 
  7326 ;;		 -> rxMsgData(20), 
  7327 ;; Auto vars:     Size  Location     Type
  7328 ;;  byteIdx         2  120[BANK0 ] int 
  7329 ;;  TxMsg           7  113[BANK0 ] unsigned char [7]
  7330 ;;  readVal         2  110[BANK0 ] unsigned int 
  7331 ;;  dacIndex        1  112[BANK0 ] unsigned char 
  7332 ;;  byteNum         1  109[BANK0 ] unsigned char 
  7333 ;;  regNum          1  108[BANK0 ] unsigned char 
  7334 ;; Return value:  Size  Location     Type
  7335 ;;                  1    wreg      void 
  7336 ;; Registers used:
  7337 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7338 ;; Tracked objects:
  7339 ;;		On entry : 0/0
  7340 ;;		On exit  : 0/0
  7341 ;;		Unchanged: 0/0
  7342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7343 ;;      Params:         0       2       0       0       0       0       0
  7344 ;;      Locals:         0      14       0       0       0       0       0
  7345 ;;      Temps:          0       2       0       0       0       0       0
  7346 ;;      Totals:         0      18       0       0       0       0       0
  7347 ;;Total ram usage:       18 bytes
  7348 ;; Hardware stack levels used:    1
  7349 ;; Hardware stack levels required when called:   10
  7350 ;; This function calls:
  7351 ;;		_ReadIntFromEeprom
  7352 ;;		_WriteUartMessage
  7353 ;;		_ZeroArray
  7354 ;;		_crc8
  7355 ;;		_make8
  7356 ;; This function is called by:
  7357 ;;		_GroupDAC
  7358 ;; This function uses a non-reentrant model
  7359 ;;
  7360                           
  7361                           	psect	text27
  7362  002756                     __ptext27:
  7363                           	opt stack 0
  7364  002756                     _DacReadValue:
  7365                           	opt stack 18
  7366                           
  7367                           ;DacApp.c: 46: uint16_t readVal;
  7368                           ;DacApp.c: 47: uint8_t regNum = 0, byteNum = 0;
  7369                           
  7370                           ;incstack = 0
  7371  002756  0E00               	movlw	0
  7372  002758  0100               	movlb	0	; () banked
  7373  00275A  6FCC               	movwf	DacReadValue@regNum& (0+255),b
  7374  00275C  0E00               	movlw	0
  7375  00275E  6FCD               	movwf	DacReadValue@byteNum& (0+255),b
  7376                           
  7377                           ; BSR set to: 0
  7378                           ;DacApp.c: 48: char TxMsg[2 + (0x4) + 1];
  7379                           ;DacApp.c: 49: ZeroArray(TxMsg, 2 + (0x4) + 1);
  7380  002760  0ED1               	movlw	low DacReadValue@TxMsg
  7381  002762  6E20               	movwf	ZeroArray@array,c
  7382  002764  0E00               	movlw	high DacReadValue@TxMsg
  7383  002766  6E21               	movwf	ZeroArray@array+1,c
  7384  002768  0E00               	movlw	0
  7385  00276A  6E23               	movwf	ZeroArray@size+1,c
  7386  00276C  0E07               	movlw	7
  7387  00276E  6E22               	movwf	ZeroArray@size,c
  7388  002770  EC1B  F021         	call	_ZeroArray	;wreg free
  7389                           
  7390                           ;DacApp.c: 52: TxMsg[(0)] = (0x24);
  7391  002774  0E24               	movlw	36
  7392  002776  0100               	movlb	0	; () banked
  7393  002778  6FD1               	movwf	DacReadValue@TxMsg& (0+255),b
  7394                           
  7395                           ; BSR set to: 0
  7396                           ;DacApp.c: 53: TxMsg[(1)] = DAC_MSG;
  7397  00277A  0E06               	movlw	6
  7398  00277C  6FD2               	movwf	(DacReadValue@TxMsg+1)& (0+255),b
  7399                           
  7400                           ; BSR set to: 0
  7401                           ;DacApp.c: 54: TxMsg[(2)] = DAC_READ_VALUE;
  7402  00277E  0E62               	movlw	98
  7403  002780  6FD3               	movwf	(DacReadValue@TxMsg+2)& (0+255),b
  7404                           
  7405                           ; BSR set to: 0
  7406                           ;DacApp.c: 55: TxMsg[(3)] = 2;
  7407  002782  0E02               	movlw	2
  7408  002784  6FD4               	movwf	(DacReadValue@TxMsg+3)& (0+255),b
  7409                           
  7410                           ; BSR set to: 0
  7411                           ;DacApp.c: 57: uint8_t dacIndex = data[0];
  7412  002786  C0C8  FFD9         	movff	DacReadValue@data,fsr2l
  7413  00278A  C0C9  FFDA         	movff	DacReadValue@data+1,fsr2h
  7414  00278E  50DF               	movf	indf2,w,c
  7415  002790  6FD0               	movwf	DacReadValue@dacIndex& (0+255),b
  7416                           
  7417                           ; BSR set to: 0
  7418                           ;DacApp.c: 58: uint16_t readVal = ReadIntFromEeprom((0x40) | DAC_ADDRES[dacIndex], 2);
  7419  002792  0E00               	movlw	0
  7420  002794  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  7421  002796  0E02               	movlw	2
  7422  002798  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  7423  00279A  51D0               	movf	DacReadValue@dacIndex& (0+255),w,b
  7424  00279C  0D01               	mullw	1
  7425  00279E  0E58               	movlw	low _DAC_ADDRES
  7426  0027A0  24F3               	addwf	prodl,w,c
  7427  0027A2  6EF6               	movwf	tblptrl,c
  7428  0027A4  0E06               	movlw	high _DAC_ADDRES
  7429  0027A6  20F4               	addwfc	prodh,w,c
  7430  0027A8  6EF7               	movwf	tblptrh,c
  7431  0027AA                     	if	0	;There are less than 3 active tblptr bytes
  7432  0027AA                     	endif
  7433  0027AA  0008               	tblrd		*
  7434  0027AC  50F5               	movf	tablat,w,c
  7435  0027AE  0940               	iorlw	64
  7436  0027B0  ECAC  F00F         	call	_ReadIntFromEeprom
  7437  0027B4  C0B1  F0CE         	movff	?_ReadIntFromEeprom,DacReadValue@readVal
  7438  0027B8  C0B2  F0CF         	movff	?_ReadIntFromEeprom+1,DacReadValue@readVal+1
  7439                           
  7440                           ;DacApp.c: 60: for(int byteIdx = 0; byteIdx < 2; byteIdx++)
  7441  0027BC  0E00               	movlw	0
  7442  0027BE  0100               	movlb	0	; () banked
  7443  0027C0  6FD9               	movwf	(DacReadValue@byteIdx+1)& (0+255),b
  7444  0027C2  0E00               	movlw	0
  7445  0027C4  6FD8               	movwf	DacReadValue@byteIdx& (0+255),b
  7446  0027C6                     l8357:
  7447                           
  7448                           ; BSR set to: 0
  7449  0027C6  BFD9               	btfsc	(DacReadValue@byteIdx+1)& (0+255),7,b
  7450  0027C8  D006               	goto	l419
  7451  0027CA  51D9               	movf	(DacReadValue@byteIdx+1)& (0+255),w,b
  7452  0027CC  E11F               	bnz	l8367
  7453  0027CE  0E02               	movlw	2
  7454  0027D0  5DD8               	subwf	DacReadValue@byteIdx& (0+255),w,b
  7455  0027D2  B0D8               	btfsc	status,0,c
  7456  0027D4  D01B               	goto	u8410
  7457  0027D6                     l419:
  7458                           
  7459                           ; BSR set to: 0
  7460                           ;DacApp.c: 61: {
  7461                           ;DacApp.c: 62: TxMsg[(0x4) + byteIdx] = make8(readVal, byteIdx);
  7462                           
  7463                           ; BSR set to: 0
  7464  0027D6  0E04               	movlw	4
  7465  0027D8  25D8               	addwf	DacReadValue@byteIdx& (0+255),w,b
  7466  0027DA  6FCA               	movwf	??_DacReadValue& (0+255),b
  7467  0027DC  0E00               	movlw	0
  7468  0027DE  21D9               	addwfc	(DacReadValue@byteIdx+1)& (0+255),w,b
  7469  0027E0  6FCB               	movwf	(??_DacReadValue+1)& (0+255),b
  7470  0027E2  0ED1               	movlw	low DacReadValue@TxMsg
  7471  0027E4  25CA               	addwf	??_DacReadValue& (0+255),w,b
  7472  0027E6  6ED9               	movwf	fsr2l,c
  7473  0027E8  0E00               	movlw	high DacReadValue@TxMsg
  7474  0027EA  21CB               	addwfc	(??_DacReadValue+1)& (0+255),w,b
  7475  0027EC  6EDA               	movwf	fsr2h,c
  7476  0027EE  C0CE  F018         	movff	DacReadValue@readVal,make8@data
  7477  0027F2  C0CF  F019         	movff	DacReadValue@readVal+1,make8@data+1
  7478  0027F6  6A1A               	clrf	make8@data+2,c
  7479  0027F8  6A1B               	clrf	make8@data+3,c
  7480  0027FA  C0D8  F01C         	movff	DacReadValue@byteIdx,make8@dataLocation
  7481  0027FE  EC15  F01C         	call	_make8	;wreg free
  7482  002802  6EDF               	movwf	indf2,c
  7483  002804  0100               	movlb	0	; () banked
  7484  002806  4BD8               	infsnz	DacReadValue@byteIdx& (0+255),f,b
  7485  002808  2BD9               	incf	(DacReadValue@byteIdx+1)& (0+255),f,b
  7486  00280A  D7DD               	goto	l8357
  7487  00280C                     u8410:
  7488  00280C                     l8367:
  7489                           
  7490                           ; BSR set to: 0
  7491                           ;DacApp.c: 63: }
  7492                           ;DacApp.c: 64: TxMsg[2 + (0x4)] = crc8(TxMsg, 2 + (0x4));
  7493  00280C  0ED1               	movlw	low DacReadValue@TxMsg
  7494  00280E  6E18               	movwf	crc8@dataArray,c
  7495  002810  0E00               	movlw	high DacReadValue@TxMsg
  7496  002812  6E19               	movwf	crc8@dataArray+1,c
  7497  002814  0E00               	movlw	0
  7498  002816  6E1B               	movwf	crc8@dataSize+1,c
  7499  002818  0E06               	movlw	6
  7500  00281A  6E1A               	movwf	crc8@dataSize,c
  7501  00281C  EC9C  F01D         	call	_crc8	;wreg free
  7502  002820  0100               	movlb	0	; () banked
  7503  002822  6FD7               	movwf	(DacReadValue@TxMsg+6)& (0+255),b
  7504                           
  7505                           ; BSR set to: 0
  7506                           ;DacApp.c: 65: WriteUartMessage(TxMsg, 2 + (0x4) + 1);
  7507  002824  0ED1               	movlw	low DacReadValue@TxMsg
  7508  002826  6E19               	movwf	WriteUartMessage@dataBuf,c
  7509  002828  0E00               	movlw	high DacReadValue@TxMsg
  7510  00282A  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  7511  00282C  0E00               	movlw	0
  7512  00282E  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  7513  002830  0E07               	movlw	7
  7514  002832  6E1B               	movwf	WriteUartMessage@dataSize,c
  7515  002834  EC4E  F01F         	call	_WriteUartMessage	;wreg free
  7516  002838  0012               	return		;funcret
  7517  00283A                     __end_of_DacReadValue:
  7518                           	opt stack 0
  7519                           tosu	equ	0xFFF
  7520                           tosh	equ	0xFFE
  7521                           tosl	equ	0xFFD
  7522                           pclath	equ	0xFFA
  7523                           tblptru	equ	0xFF8
  7524                           tblptrh	equ	0xFF7
  7525                           tblptrl	equ	0xFF6
  7526                           tablat	equ	0xFF5
  7527                           prodh	equ	0xFF4
  7528                           prodl	equ	0xFF3
  7529                           postinc0	equ	0xFEE
  7530                           plusw0	equ	0xFEB
  7531                           wreg	equ	0xFE8
  7532                           indf1	equ	0xFE7
  7533                           postdec1	equ	0xFE5
  7534                           fsr1h	equ	0xFE2
  7535                           fsr1l	equ	0xFE1
  7536                           indf2	equ	0xFDF
  7537                           postinc2	equ	0xFDE
  7538                           postdec2	equ	0xFDD
  7539                           plusw2	equ	0xFDB
  7540                           fsr2h	equ	0xFDA
  7541                           fsr2l	equ	0xFD9
  7542                           status	equ	0xFD8
  7543                           
  7544 ;; *************** function _testLeds *****************
  7545 ;; Defined at:
  7546 ;;		line 43 in file "LedsApp.c"
  7547 ;; Parameters:    Size  Location     Type
  7548 ;;		None
  7549 ;; Auto vars:     Size  Location     Type
  7550 ;;  idx             2   44[COMRAM] int 
  7551 ;; Return value:  Size  Location     Type
  7552 ;;                  1    wreg      void 
  7553 ;; Registers used:
  7554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7555 ;; Tracked objects:
  7556 ;;		On entry : 0/0
  7557 ;;		On exit  : 0/0
  7558 ;;		Unchanged: 0/0
  7559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7560 ;;      Params:         0       0       0       0       0       0       0
  7561 ;;      Locals:         2       0       0       0       0       0       0
  7562 ;;      Temps:          1       0       0       0       0       0       0
  7563 ;;      Totals:         3       0       0       0       0       0       0
  7564 ;;Total ram usage:        3 bytes
  7565 ;; Hardware stack levels used:    1
  7566 ;; Hardware stack levels required when called:    7
  7567 ;; This function calls:
  7568 ;;		_SendAckMessage
  7569 ;; This function is called by:
  7570 ;;		_GroupControlMcu
  7571 ;; This function uses a non-reentrant model
  7572 ;;
  7573                           
  7574                           	psect	text28
  7575  0035D2                     __ptext28:
  7576                           	opt stack 0
  7577  0035D2                     _testLeds:
  7578                           	opt stack 21
  7579                           
  7580                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  7581                           
  7582                           ;incstack = 0
  7583  0035D2  0E00               	movlw	0
  7584  0035D4  6E2E               	movwf	testLeds@idx+1,c
  7585  0035D6  0E00               	movlw	0
  7586  0035D8  6E2D               	movwf	testLeds@idx,c
  7587  0035DA                     l8177:
  7588  0035DA  BE2E               	btfsc	testLeds@idx+1,7,c
  7589  0035DC  D006               	goto	l60
  7590  0035DE  502E               	movf	testLeds@idx+1,w,c
  7591  0035E0  E127               	bnz	l8191
  7592  0035E2  0E0A               	movlw	10
  7593  0035E4  5C2D               	subwf	testLeds@idx,w,c
  7594  0035E6  B0D8               	btfsc	status,0,c
  7595  0035E8  D023               	goto	u8230
  7596  0035EA                     l60:
  7597                           
  7598                           ;LedsApp.c: 47: {
  7599                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  7600  0035EA  808B               	bsf	3979,0,c	;volatile
  7601                           
  7602                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  7603  0035EC  0E82               	movlw	130
  7604  0035EE  6E2C               	movwf	??_testLeds& (0+255),c
  7605  0035F0  0EDE               	movlw	222
  7606  0035F2                     u9057:
  7607  0035F2  2EE8               	decfsz	wreg,f,c
  7608  0035F4  D7FE               	bra	u9057
  7609  0035F6  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7610  0035F8  D7FC               	bra	u9057
  7611                           
  7612                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  7613  0035FA  888A               	bsf	3978,4,c	;volatile
  7614                           
  7615                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  7616  0035FC  0E82               	movlw	130
  7617  0035FE  6E2C               	movwf	??_testLeds& (0+255),c
  7618  003600  0EDE               	movlw	222
  7619  003602                     u9067:
  7620  003602  2EE8               	decfsz	wreg,f,c
  7621  003604  D7FE               	bra	u9067
  7622  003606  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7623  003608  D7FC               	bra	u9067
  7624                           
  7625                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  7626  00360A  908B               	bcf	3979,0,c	;volatile
  7627                           
  7628                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  7629  00360C  0E82               	movlw	130
  7630  00360E  6E2C               	movwf	??_testLeds& (0+255),c
  7631  003610  0EDE               	movlw	222
  7632  003612                     u9077:
  7633  003612  2EE8               	decfsz	wreg,f,c
  7634  003614  D7FE               	bra	u9077
  7635  003616  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7636  003618  D7FC               	bra	u9077
  7637                           
  7638                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  7639  00361A  988A               	bcf	3978,4,c	;volatile
  7640                           
  7641                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  7642  00361C  0E82               	movlw	130
  7643  00361E  6E2C               	movwf	??_testLeds& (0+255),c
  7644  003620  0EDE               	movlw	222
  7645  003622                     u9087:
  7646  003622  2EE8               	decfsz	wreg,f,c
  7647  003624  D7FE               	bra	u9087
  7648  003626  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7649  003628  D7FC               	bra	u9087
  7650  00362A  4A2D               	infsnz	testLeds@idx,f,c
  7651  00362C  2A2E               	incf	testLeds@idx+1,f,c
  7652  00362E  D7D5               	goto	l8177
  7653  003630                     u8230:
  7654  003630                     l8191:
  7655                           
  7656                           ;LedsApp.c: 57: }
  7657                           ;LedsApp.c: 59: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_TEST_LEDS);
  7658  003630  0E14               	movlw	20
  7659  003632  6E24               	movwf	SendAckMessage@inRequest,c
  7660  003634  0E01               	movlw	1
  7661  003636  EC73  F01D         	call	_SendAckMessage
  7662  00363A  0012               	return	
  7663  00363C                     __end_of_testLeds:
  7664                           	opt stack 0
  7665                           tosu	equ	0xFFF
  7666                           tosh	equ	0xFFE
  7667                           tosl	equ	0xFFD
  7668                           pclath	equ	0xFFA
  7669                           tblptru	equ	0xFF8
  7670                           tblptrh	equ	0xFF7
  7671                           tblptrl	equ	0xFF6
  7672                           tablat	equ	0xFF5
  7673                           prodh	equ	0xFF4
  7674                           prodl	equ	0xFF3
  7675                           postinc0	equ	0xFEE
  7676                           plusw0	equ	0xFEB
  7677                           wreg	equ	0xFE8
  7678                           indf1	equ	0xFE7
  7679                           postdec1	equ	0xFE5
  7680                           fsr1h	equ	0xFE2
  7681                           fsr1l	equ	0xFE1
  7682                           indf2	equ	0xFDF
  7683                           postinc2	equ	0xFDE
  7684                           postdec2	equ	0xFDD
  7685                           plusw2	equ	0xFDB
  7686                           fsr2h	equ	0xFDA
  7687                           fsr2l	equ	0xFD9
  7688                           status	equ	0xFD8
  7689                           
  7690 ;; *************** function _ResetMcu *****************
  7691 ;; Defined at:
  7692 ;;		line 144 in file "SystemCommon.c"
  7693 ;; Parameters:    Size  Location     Type
  7694 ;;		None
  7695 ;; Auto vars:     Size  Location     Type
  7696 ;;		None
  7697 ;; Return value:  Size  Location     Type
  7698 ;;                  1    wreg      void 
  7699 ;; Registers used:
  7700 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7701 ;; Tracked objects:
  7702 ;;		On entry : 0/0
  7703 ;;		On exit  : 0/0
  7704 ;;		Unchanged: 0/0
  7705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7706 ;;      Params:         0       0       0       0       0       0       0
  7707 ;;      Locals:         0       0       0       0       0       0       0
  7708 ;;      Temps:          0       0       0       0       0       0       0
  7709 ;;      Totals:         0       0       0       0       0       0       0
  7710 ;;Total ram usage:        0 bytes
  7711 ;; Hardware stack levels used:    1
  7712 ;; Hardware stack levels required when called:    7
  7713 ;; This function calls:
  7714 ;;		_SendAckMessage
  7715 ;; This function is called by:
  7716 ;;		_GroupControlMcu
  7717 ;; This function uses a non-reentrant model
  7718 ;;
  7719                           
  7720                           	psect	text29
  7721  004358                     __ptext29:
  7722                           	opt stack 0
  7723  004358                     _ResetMcu:
  7724                           	opt stack 21
  7725                           
  7726                           ;SystemCommon.c: 147: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET
      +                          _MCU);
  7727                           
  7728                           ;incstack = 0
  7729  004358  0E11               	movlw	17
  7730  00435A  6E24               	movwf	SendAckMessage@inRequest,c
  7731  00435C  0E01               	movlw	1
  7732  00435E  EC73  F01D         	call	_SendAckMessage
  7733  004362  00FF               	reset		;# 
  7734  004364  0012               	return		;funcret
  7735  004366                     __end_of_ResetMcu:
  7736                           	opt stack 0
  7737                           tosu	equ	0xFFF
  7738                           tosh	equ	0xFFE
  7739                           tosl	equ	0xFFD
  7740                           pclath	equ	0xFFA
  7741                           tblptru	equ	0xFF8
  7742                           tblptrh	equ	0xFF7
  7743                           tblptrl	equ	0xFF6
  7744                           tablat	equ	0xFF5
  7745                           prodh	equ	0xFF4
  7746                           prodl	equ	0xFF3
  7747                           postinc0	equ	0xFEE
  7748                           plusw0	equ	0xFEB
  7749                           wreg	equ	0xFE8
  7750                           indf1	equ	0xFE7
  7751                           postdec1	equ	0xFE5
  7752                           fsr1h	equ	0xFE2
  7753                           fsr1l	equ	0xFE1
  7754                           indf2	equ	0xFDF
  7755                           postinc2	equ	0xFDE
  7756                           postdec2	equ	0xFDD
  7757                           plusw2	equ	0xFDB
  7758                           fsr2h	equ	0xFDA
  7759                           fsr2l	equ	0xFD9
  7760                           status	equ	0xFD8
  7761                           
  7762 ;; *************** function _SetChannelMode *****************
  7763 ;; Defined at:
  7764 ;;		line 30 in file "AdcApp.c"
  7765 ;; Parameters:    Size  Location     Type
  7766 ;;  data            2   43[COMRAM] PTR unsigned char 
  7767 ;; Auto vars:     Size  Location     Type
  7768 ;;		None
  7769 ;; Return value:  Size  Location     Type
  7770 ;;                  1    wreg      void 
  7771 ;; Registers used:
  7772 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7773 ;; Tracked objects:
  7774 ;;		On entry : 0/0
  7775 ;;		On exit  : 0/0
  7776 ;;		Unchanged: 0/0
  7777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7778 ;;      Params:         2       0       0       0       0       0       0
  7779 ;;      Locals:         0       0       0       0       0       0       0
  7780 ;;      Temps:          0       0       0       0       0       0       0
  7781 ;;      Totals:         2       0       0       0       0       0       0
  7782 ;;Total ram usage:        2 bytes
  7783 ;; Hardware stack levels used:    1
  7784 ;; Hardware stack levels required when called:    7
  7785 ;; This function calls:
  7786 ;;		_SendAckMessage
  7787 ;; This function is called by:
  7788 ;;		_GroupAdc
  7789 ;; This function uses a non-reentrant model
  7790 ;;
  7791                           
  7792                           	psect	text30
  7793  003FD4                     __ptext30:
  7794                           	opt stack 0
  7795  003FD4                     _SetChannelMode:
  7796                           	opt stack 21
  7797                           
  7798                           ;AdcApp.c: 32: adcSampleMode = data[0];
  7799                           
  7800                           ;incstack = 0
  7801  003FD4  C02C  FFD9         	movff	SetChannelMode@data,fsr2l
  7802  003FD8  C02D  FFDA         	movff	SetChannelMode@data+1,fsr2h
  7803  003FDC  50DF               	movf	indf2,w,c
  7804  003FDE  6E3D               	movwf	_adcSampleMode,c
  7805                           
  7806                           ;AdcApp.c: 33: if (adcSampleMode == SINGLE_CHANNEL)
  7807  003FE0  043D               	decf	_adcSampleMode,w,c
  7808  003FE2  A4D8               	btfss	status,2,c
  7809  003FE4  D009               	goto	l122
  7810                           
  7811                           ;AdcApp.c: 34: {
  7812                           ;AdcApp.c: 35: channel = data[1];
  7813  003FE6  EE20 F001          	lfsr	2,1
  7814  003FEA  502C               	movf	SetChannelMode@data,w,c
  7815  003FEC  26D9               	addwf	fsr2l,f,c
  7816  003FEE  502D               	movf	SetChannelMode@data+1,w,c
  7817  003FF0  22DA               	addwfc	fsr2h,f,c
  7818  003FF2  50DF               	movf	indf2,w,c
  7819  003FF4  0100               	movlb	0	; () banked
  7820  003FF6  6FF6               	movwf	_channel& (0+255),b
  7821  003FF8                     l122:
  7822                           
  7823                           ;AdcApp.c: 36: }
  7824                           ;AdcApp.c: 37: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CHANNEL_MODE);
  7825                           
  7826                           ; BSR set to: 0
  7827  003FF8  0E32               	movlw	50
  7828  003FFA  6E24               	movwf	SendAckMessage@inRequest,c
  7829  003FFC  0E03               	movlw	3
  7830  003FFE  EC73  F01D         	call	_SendAckMessage
  7831  004002  0012               	return		;funcret
  7832  004004                     __end_of_SetChannelMode:
  7833                           	opt stack 0
  7834                           tosu	equ	0xFFF
  7835                           tosh	equ	0xFFE
  7836                           tosl	equ	0xFFD
  7837                           pclath	equ	0xFFA
  7838                           tblptru	equ	0xFF8
  7839                           tblptrh	equ	0xFF7
  7840                           tblptrl	equ	0xFF6
  7841                           tablat	equ	0xFF5
  7842                           prodh	equ	0xFF4
  7843                           prodl	equ	0xFF3
  7844                           postinc0	equ	0xFEE
  7845                           plusw0	equ	0xFEB
  7846                           wreg	equ	0xFE8
  7847                           indf1	equ	0xFE7
  7848                           postdec1	equ	0xFE5
  7849                           fsr1h	equ	0xFE2
  7850                           fsr1l	equ	0xFE1
  7851                           indf2	equ	0xFDF
  7852                           postinc2	equ	0xFDE
  7853                           postdec2	equ	0xFDD
  7854                           plusw2	equ	0xFDB
  7855                           fsr2h	equ	0xFDA
  7856                           fsr2l	equ	0xFD9
  7857                           status	equ	0xFD8
  7858                           
  7859 ;; *************** function _EUSART1_Read *****************
  7860 ;; Defined at:
  7861 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  7862 ;; Parameters:    Size  Location     Type
  7863 ;;		None
  7864 ;; Auto vars:     Size  Location     Type
  7865 ;;  readValue       2   24[COMRAM] unsigned int 
  7866 ;; Return value:  Size  Location     Type
  7867 ;;                  1    wreg      unsigned char 
  7868 ;; Registers used:
  7869 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7870 ;; Tracked objects:
  7871 ;;		On entry : 0/0
  7872 ;;		On exit  : 0/0
  7873 ;;		Unchanged: 0/0
  7874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7875 ;;      Params:         0       0       0       0       0       0       0
  7876 ;;      Locals:         2       0       0       0       0       0       0
  7877 ;;      Temps:          1       0       0       0       0       0       0
  7878 ;;      Totals:         3       0       0       0       0       0       0
  7879 ;;Total ram usage:        3 bytes
  7880 ;; Hardware stack levels used:    1
  7881 ;; Hardware stack levels required when called:    4
  7882 ;; This function calls:
  7883 ;;		Nothing
  7884 ;; This function is called by:
  7885 ;;		_readUartMessage
  7886 ;; This function uses a non-reentrant model
  7887 ;;
  7888                           
  7889                           	psect	text31
  7890  003B86                     __ptext31:
  7891                           	opt stack 0
  7892  003B86                     _EUSART1_Read:
  7893                           	opt stack 25
  7894                           
  7895                           ;eusart1.c: 112: uint16_t readValue = 0;
  7896                           
  7897                           ;incstack = 0
  7898  003B86  0E00               	movlw	0
  7899  003B88  6E1A               	movwf	EUSART1_Read@readValue+1,c
  7900  003B8A  0E00               	movlw	0
  7901  003B8C  6E19               	movwf	EUSART1_Read@readValue,c
  7902                           
  7903                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  7904  003B8E  0100               	movlb	0	; () banked
  7905  003B90  51F5               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  7906  003B92  A4D8               	btfss	status,2,c
  7907  003B94  D002               	goto	l895
  7908                           
  7909                           ; BSR set to: 0
  7910                           ;eusart1.c: 120: {
  7911                           ;eusart1.c: 121: return readValue;
  7912  003B96  5019               	movf	EUSART1_Read@readValue,w,c
  7913                           
  7914                           ; BSR set to: 0
  7915  003B98  0012               	return	
  7916  003B9A                     l895:
  7917                           
  7918                           ; BSR set to: 0
  7919                           ;eusart1.c: 122: }
  7920                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  7921                           
  7922                           ; BSR set to: 0
  7923  003B9A  5033               	movf	_eusart1RxTail,w,c	;volatile
  7924  003B9C  0D01               	mullw	1
  7925  003B9E  0E00               	movlw	low _eusart1RxBuffer
  7926  003BA0  24F3               	addwf	prodl,w,c
  7927  003BA2  6ED9               	movwf	fsr2l,c
  7928  003BA4  0E01               	movlw	high _eusart1RxBuffer
  7929  003BA6  20F4               	addwfc	prodh,w,c
  7930  003BA8  6EDA               	movwf	fsr2h,c
  7931  003BAA  50DF               	movf	indf2,w,c
  7932  003BAC  6E18               	movwf	??_EUSART1_Read& (0+255),c
  7933  003BAE  5018               	movf	??_EUSART1_Read,w,c
  7934  003BB0  6E19               	movwf	EUSART1_Read@readValue,c
  7935  003BB2  6A1A               	clrf	EUSART1_Read@readValue+1,c
  7936                           
  7937                           ; BSR set to: 0
  7938  003BB4  2A33               	incf	_eusart1RxTail,f,c	;volatile
  7939                           
  7940                           ; BSR set to: 0
  7941                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  7942  003BB6  0E27               	movlw	39
  7943  003BB8  6433               	cpfsgt	_eusart1RxTail,c	;volatile
  7944  003BBA  D002               	goto	l897
  7945                           
  7946                           ; BSR set to: 0
  7947                           ;eusart1.c: 126: {
  7948                           ;eusart1.c: 127: eusart1RxTail = 0;
  7949  003BBC  0E00               	movlw	0
  7950  003BBE  6E33               	movwf	_eusart1RxTail,c	;volatile
  7951  003BC0                     l897:
  7952                           
  7953                           ; BSR set to: 0
  7954                           ;eusart1.c: 128: }
  7955                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  7956                           
  7957                           ; BSR set to: 0
  7958  003BC0  9A9D               	bcf	3997,5,c	;volatile
  7959                           
  7960                           ; BSR set to: 0
  7961                           ;eusart1.c: 130: eusart1RxCount--;
  7962  003BC2  07F5               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  7963                           
  7964                           ; BSR set to: 0
  7965                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  7966  003BC4  8A9D               	bsf	3997,5,c	;volatile
  7967                           
  7968                           ; BSR set to: 0
  7969                           ;eusart1.c: 133: return readValue;
  7970  003BC6  5019               	movf	EUSART1_Read@readValue,w,c
  7971  003BC8  0012               	return	
  7972  003BCA                     __end_of_EUSART1_Read:
  7973                           	opt stack 0
  7974                           tosu	equ	0xFFF
  7975                           tosh	equ	0xFFE
  7976                           tosl	equ	0xFFD
  7977                           pclath	equ	0xFFA
  7978                           tblptru	equ	0xFF8
  7979                           tblptrh	equ	0xFF7
  7980                           tblptrl	equ	0xFF6
  7981                           tablat	equ	0xFF5
  7982                           prodh	equ	0xFF4
  7983                           prodl	equ	0xFF3
  7984                           postinc0	equ	0xFEE
  7985                           plusw0	equ	0xFEB
  7986                           wreg	equ	0xFE8
  7987                           indf1	equ	0xFE7
  7988                           postdec1	equ	0xFE5
  7989                           fsr1h	equ	0xFE2
  7990                           fsr1l	equ	0xFE1
  7991                           indf2	equ	0xFDF
  7992                           postinc2	equ	0xFDE
  7993                           postdec2	equ	0xFDD
  7994                           plusw2	equ	0xFDB
  7995                           fsr2h	equ	0xFDA
  7996                           fsr2l	equ	0xFD9
  7997                           status	equ	0xFD8
  7998                           
  7999 ;; *************** function _keepAliveSignalUart *****************
  8000 ;; Defined at:
  8001 ;;		line 93 in file "SystemStatus.c"
  8002 ;; Parameters:    Size  Location     Type
  8003 ;;		None
  8004 ;; Auto vars:     Size  Location     Type
  8005 ;;		None
  8006 ;; Return value:  Size  Location     Type
  8007 ;;                  1    wreg      void 
  8008 ;; Registers used:
  8009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8010 ;; Tracked objects:
  8011 ;;		On entry : 0/0
  8012 ;;		On exit  : 0/0
  8013 ;;		Unchanged: 0/0
  8014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8015 ;;      Params:         0       0       0       0       0       0       0
  8016 ;;      Locals:         0       0       0       0       0       0       0
  8017 ;;      Temps:          0       0       0       0       0       0       0
  8018 ;;      Totals:         0       0       0       0       0       0       0
  8019 ;;Total ram usage:        0 bytes
  8020 ;; Hardware stack levels used:    1
  8021 ;; Hardware stack levels required when called:    7
  8022 ;; This function calls:
  8023 ;;		_SendAckMessage
  8024 ;; This function is called by:
  8025 ;;		_main
  8026 ;; This function uses a non-reentrant model
  8027 ;;
  8028                           
  8029                           	psect	text32
  8030  004390                     __ptext32:
  8031                           	opt stack 0
  8032  004390                     _keepAliveSignalUart:
  8033                           	opt stack 23
  8034                           
  8035                           ;SystemStatus.c: 95: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_KEEP_A
      +                          LIVE);
  8036                           
  8037                           ; BSR set to: 0
  8038                           ;incstack = 0
  8039  004390  0E15               	movlw	21
  8040  004392  6E24               	movwf	SendAckMessage@inRequest,c
  8041  004394  0E01               	movlw	1
  8042  004396  EC73  F01D         	call	_SendAckMessage
  8043  00439A  0012               	return		;funcret
  8044  00439C                     __end_of_keepAliveSignalUart:
  8045                           	opt stack 0
  8046                           tosu	equ	0xFFF
  8047                           tosh	equ	0xFFE
  8048                           tosl	equ	0xFFD
  8049                           pclath	equ	0xFFA
  8050                           tblptru	equ	0xFF8
  8051                           tblptrh	equ	0xFF7
  8052                           tblptrl	equ	0xFF6
  8053                           tablat	equ	0xFF5
  8054                           prodh	equ	0xFF4
  8055                           prodl	equ	0xFF3
  8056                           postinc0	equ	0xFEE
  8057                           plusw0	equ	0xFEB
  8058                           wreg	equ	0xFE8
  8059                           indf1	equ	0xFE7
  8060                           postdec1	equ	0xFE5
  8061                           fsr1h	equ	0xFE2
  8062                           fsr1l	equ	0xFE1
  8063                           indf2	equ	0xFDF
  8064                           postinc2	equ	0xFDE
  8065                           postdec2	equ	0xFDD
  8066                           plusw2	equ	0xFDB
  8067                           fsr2h	equ	0xFDA
  8068                           fsr2l	equ	0xFD9
  8069                           status	equ	0xFD8
  8070                           
  8071 ;; *************** function _keepAliveSignalLed *****************
  8072 ;; Defined at:
  8073 ;;		line 35 in file "LedsApp.c"
  8074 ;; Parameters:    Size  Location     Type
  8075 ;;		None
  8076 ;; Auto vars:     Size  Location     Type
  8077 ;;		None
  8078 ;; Return value:  Size  Location     Type
  8079 ;;                  1    wreg      void 
  8080 ;; Registers used:
  8081 ;;		wreg, status,2, status,0
  8082 ;; Tracked objects:
  8083 ;;		On entry : 0/0
  8084 ;;		On exit  : 0/0
  8085 ;;		Unchanged: 0/0
  8086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8087 ;;      Params:         0       0       0       0       0       0       0
  8088 ;;      Locals:         0       0       0       0       0       0       0
  8089 ;;      Temps:          1       0       0       0       0       0       0
  8090 ;;      Totals:         1       0       0       0       0       0       0
  8091 ;;Total ram usage:        1 bytes
  8092 ;; Hardware stack levels used:    1
  8093 ;; Hardware stack levels required when called:    4
  8094 ;; This function calls:
  8095 ;;		Nothing
  8096 ;; This function is called by:
  8097 ;;		_main
  8098 ;; This function uses a non-reentrant model
  8099 ;;
  8100                           
  8101                           	psect	text33
  8102  0042A6                     __ptext33:
  8103                           	opt stack 0
  8104  0042A6                     _keepAliveSignalLed:
  8105                           	opt stack 26
  8106                           
  8107                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  8108                           
  8109                           ;incstack = 0
  8110  0042A6  B08B               	btfsc	3979,0,c	;volatile
  8111  0042A8  D003               	goto	u5800
  8112  0042AA  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  8113  0042AC  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  8114  0042AE  D001               	goto	u5818
  8115  0042B0                     u5800:
  8116  0042B0  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  8117  0042B2                     u5818:
  8118  0042B2  508B               	movf	3979,w,c	;volatile
  8119  0042B4  1818               	xorwf	??_keepAliveSignalLed,w,c
  8120  0042B6  0BFE               	andlw	-2
  8121  0042B8  1818               	xorwf	??_keepAliveSignalLed,w,c
  8122  0042BA  6E8B               	movwf	3979,c	;volatile
  8123  0042BC  0012               	return		;funcret
  8124  0042BE                     __end_of_keepAliveSignalLed:
  8125                           	opt stack 0
  8126                           tosu	equ	0xFFF
  8127                           tosh	equ	0xFFE
  8128                           tosl	equ	0xFFD
  8129                           pclath	equ	0xFFA
  8130                           tblptru	equ	0xFF8
  8131                           tblptrh	equ	0xFF7
  8132                           tblptrl	equ	0xFF6
  8133                           tablat	equ	0xFF5
  8134                           prodh	equ	0xFF4
  8135                           prodl	equ	0xFF3
  8136                           postinc0	equ	0xFEE
  8137                           plusw0	equ	0xFEB
  8138                           wreg	equ	0xFE8
  8139                           indf1	equ	0xFE7
  8140                           postdec1	equ	0xFE5
  8141                           fsr1h	equ	0xFE2
  8142                           fsr1l	equ	0xFE1
  8143                           indf2	equ	0xFDF
  8144                           postinc2	equ	0xFDE
  8145                           postdec2	equ	0xFDD
  8146                           plusw2	equ	0xFDB
  8147                           fsr2h	equ	0xFDA
  8148                           fsr2l	equ	0xFD9
  8149                           status	equ	0xFD8
  8150                           
  8151 ;; *************** function _SynthLdDetect *****************
  8152 ;; Defined at:
  8153 ;;		line 212 in file "SyntApp.c"
  8154 ;; Parameters:    Size  Location     Type
  8155 ;;		None
  8156 ;; Auto vars:     Size  Location     Type
  8157 ;;		None
  8158 ;; Return value:  Size  Location     Type
  8159 ;;                  1    wreg      void 
  8160 ;; Registers used:
  8161 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8162 ;; Tracked objects:
  8163 ;;		On entry : 0/0
  8164 ;;		On exit  : 0/0
  8165 ;;		Unchanged: 0/0
  8166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8167 ;;      Params:         0       0       0       0       0       0       0
  8168 ;;      Locals:         0       0       0       0       0       0       0
  8169 ;;      Temps:          0       0       0       0       0       0       0
  8170 ;;      Totals:         0       0       0       0       0       0       0
  8171 ;;Total ram usage:        0 bytes
  8172 ;; Hardware stack levels used:    1
  8173 ;; Hardware stack levels required when called:   11
  8174 ;; This function calls:
  8175 ;;		_BlinkErrorLeds
  8176 ;;		_InitSynth
  8177 ;;		___awmod
  8178 ;; This function is called by:
  8179 ;;		_main
  8180 ;; This function uses a non-reentrant model
  8181 ;;
  8182                           
  8183                           	psect	text34
  8184  002A00                     __ptext34:
  8185                           	opt stack 0
  8186  002A00                     _SynthLdDetect:
  8187                           	opt stack 19
  8188                           
  8189                           ;SyntApp.c: 216: if(PORTDbits.RD4 == 0)
  8190                           
  8191                           ;incstack = 0
  8192  002A00  B883               	btfsc	3971,4,c	;volatile
  8193  002A02  D01E               	goto	l557
  8194                           
  8195                           ;SyntApp.c: 217: {
  8196                           ;SyntApp.c: 218: if(synthLdRxCnt > 0)
  8197  002A04  5043               	movf	_synthLdRxCnt,w,c
  8198  002A06  0A80               	xorlw	128
  8199  002A08  0F7F               	addlw	-129
  8200  002A0A  A0D8               	btfss	status,0,c
  8201  002A0C  D005               	goto	l558
  8202                           
  8203                           ;SyntApp.c: 219: {
  8204                           ;SyntApp.c: 220: InitSynth(SYNTH_RX);
  8205  002A0E  0E01               	movlw	1
  8206  002A10  ECA6  F006         	call	_InitSynth
  8207                           
  8208                           ;SyntApp.c: 221: synthLdRxCnt--;
  8209  002A14  0643               	decf	_synthLdRxCnt,f,c
  8210                           
  8211                           ;SyntApp.c: 222: }
  8212  002A16  D003               	goto	l559
  8213  002A18                     l558:
  8214                           
  8215                           ;SyntApp.c: 223: else
  8216                           ;SyntApp.c: 224: {
  8217                           ;SyntApp.c: 225: BlinkErrorLeds(FAIL_SYNTH_RX_LATCH);
  8218  002A18  0E03               	movlw	3
  8219  002A1A  ECB7  F01B         	call	_BlinkErrorLeds
  8220  002A1E                     l559:
  8221                           
  8222                           ;SyntApp.c: 226: }
  8223                           ;SyntApp.c: 227: synthLdRxArray[synthLdRxArrayCnt++ % 12] = UNLOCK;
  8224  002A1E  C038  F018         	movff	_synthLdRxArrayCnt,___awmod@dividend
  8225  002A22  6A19               	clrf	___awmod@dividend+1,c
  8226  002A24  0E00               	movlw	0
  8227  002A26  6E1B               	movwf	___awmod@divisor+1,c
  8228  002A28  0E0C               	movlw	12
  8229  002A2A  6E1A               	movwf	___awmod@divisor,c
  8230  002A2C  ECB1  F01A         	call	___awmod	;wreg free
  8231  002A30  0EB0               	movlw	low _synthLdRxArray
  8232  002A32  2418               	addwf	?___awmod,w,c
  8233  002A34  6ED9               	movwf	fsr2l,c
  8234  002A36  0E01               	movlw	high _synthLdRxArray
  8235  002A38  2019               	addwfc	?___awmod+1,w,c
  8236  002A3A  6EDA               	movwf	fsr2h,c
  8237  002A3C  0E00               	movlw	0
  8238  002A3E  D012               	goto	L3
  8239  002A40                     l557:
  8240                           
  8241                           ;SyntApp.c: 229: else
  8242                           ;SyntApp.c: 230: {
  8243                           ;SyntApp.c: 231: synthLdRxCnt = 2;
  8244  002A40  0E02               	movlw	2
  8245  002A42  6E43               	movwf	_synthLdRxCnt,c
  8246                           
  8247                           ;SyntApp.c: 232: synthLdRxArray[synthLdRxArrayCnt++ % 12] = LOCK;
  8248  002A44  C038  F018         	movff	_synthLdRxArrayCnt,___awmod@dividend
  8249  002A48  6A19               	clrf	___awmod@dividend+1,c
  8250  002A4A  0E00               	movlw	0
  8251  002A4C  6E1B               	movwf	___awmod@divisor+1,c
  8252  002A4E  0E0C               	movlw	12
  8253  002A50  6E1A               	movwf	___awmod@divisor,c
  8254  002A52  ECB1  F01A         	call	___awmod	;wreg free
  8255  002A56  0EB0               	movlw	low _synthLdRxArray
  8256  002A58  2418               	addwf	?___awmod,w,c
  8257  002A5A  6ED9               	movwf	fsr2l,c
  8258  002A5C  0E01               	movlw	high _synthLdRxArray
  8259  002A5E  2019               	addwfc	?___awmod+1,w,c
  8260  002A60  6EDA               	movwf	fsr2h,c
  8261  002A62  0E01               	movlw	1
  8262  002A64                     L3:
  8263  002A64  6EDF               	movwf	indf2,c
  8264  002A66  2A38               	incf	_synthLdRxArrayCnt,f,c
  8265                           
  8266                           ;SyntApp.c: 233: }
  8267                           ;SyntApp.c: 238: if(PORTDbits.RD1 == 0)
  8268  002A68  B283               	btfsc	3971,1,c	;volatile
  8269  002A6A  D020               	goto	l561
  8270                           
  8271                           ;SyntApp.c: 239: {
  8272                           ;SyntApp.c: 240: if(synthLdTxCnt > 0)
  8273  002A6C  5042               	movf	_synthLdTxCnt,w,c
  8274  002A6E  0A80               	xorlw	128
  8275  002A70  0F7F               	addlw	-129
  8276  002A72  A0D8               	btfss	status,0,c
  8277  002A74  D005               	goto	l562
  8278                           
  8279                           ;SyntApp.c: 241: {
  8280                           ;SyntApp.c: 242: InitSynth(SYNTH_TX);
  8281  002A76  0E00               	movlw	0
  8282  002A78  ECA6  F006         	call	_InitSynth
  8283                           
  8284                           ;SyntApp.c: 243: synthLdTxCnt--;
  8285  002A7C  0642               	decf	_synthLdTxCnt,f,c
  8286                           
  8287                           ;SyntApp.c: 244: }
  8288  002A7E  D003               	goto	l563
  8289  002A80                     l562:
  8290                           
  8291                           ;SyntApp.c: 245: else
  8292                           ;SyntApp.c: 246: {
  8293                           ;SyntApp.c: 247: BlinkErrorLeds(FAIL_SYNTH_TX_LATCH);
  8294  002A80  0E04               	movlw	4
  8295  002A82  ECB7  F01B         	call	_BlinkErrorLeds
  8296  002A86                     l563:
  8297                           
  8298                           ;SyntApp.c: 248: }
  8299                           ;SyntApp.c: 249: synthLdTxArray[synthLdTxArrayCnt++ % 12] = UNLOCK;
  8300  002A86  C037  F018         	movff	_synthLdTxArrayCnt,___awmod@dividend
  8301  002A8A  6A19               	clrf	___awmod@dividend+1,c
  8302  002A8C  0E00               	movlw	0
  8303  002A8E  6E1B               	movwf	___awmod@divisor+1,c
  8304  002A90  0E0C               	movlw	12
  8305  002A92  6E1A               	movwf	___awmod@divisor,c
  8306  002A94  ECB1  F01A         	call	___awmod	;wreg free
  8307  002A98  0EA4               	movlw	low _synthLdTxArray
  8308  002A9A  2418               	addwf	?___awmod,w,c
  8309  002A9C  6ED9               	movwf	fsr2l,c
  8310  002A9E  0E01               	movlw	high _synthLdTxArray
  8311  002AA0  2019               	addwfc	?___awmod+1,w,c
  8312  002AA2  6EDA               	movwf	fsr2h,c
  8313  002AA4  0E00               	movlw	0
  8314  002AA6  6EDF               	movwf	indf2,c
  8315  002AA8  2A37               	incf	_synthLdTxArrayCnt,f,c
  8316                           
  8317                           ;SyntApp.c: 250: }
  8318  002AAA  0012               	return	
  8319  002AAC                     l561:
  8320                           
  8321                           ;SyntApp.c: 251: else
  8322                           ;SyntApp.c: 252: {
  8323                           ;SyntApp.c: 253: synthLdTxCnt = 2;
  8324  002AAC  0E02               	movlw	2
  8325  002AAE  6E42               	movwf	_synthLdTxCnt,c
  8326                           
  8327                           ;SyntApp.c: 254: synthLdTxArray[synthLdTxArrayCnt++ % 12] = LOCK;
  8328  002AB0  C037  F018         	movff	_synthLdTxArrayCnt,___awmod@dividend
  8329  002AB4  6A19               	clrf	___awmod@dividend+1,c
  8330  002AB6  0E00               	movlw	0
  8331  002AB8  6E1B               	movwf	___awmod@divisor+1,c
  8332  002ABA  0E0C               	movlw	12
  8333  002ABC  6E1A               	movwf	___awmod@divisor,c
  8334  002ABE  ECB1  F01A         	call	___awmod	;wreg free
  8335  002AC2  0EA4               	movlw	low _synthLdTxArray
  8336  002AC4  2418               	addwf	?___awmod,w,c
  8337  002AC6  6ED9               	movwf	fsr2l,c
  8338  002AC8  0E01               	movlw	high _synthLdTxArray
  8339  002ACA  2019               	addwfc	?___awmod+1,w,c
  8340  002ACC  6EDA               	movwf	fsr2h,c
  8341  002ACE  0E01               	movlw	1
  8342  002AD0  6EDF               	movwf	indf2,c
  8343  002AD2  2A37               	incf	_synthLdTxArrayCnt,f,c
  8344  002AD4  0012               	return	
  8345  002AD6                     __end_of_SynthLdDetect:
  8346                           	opt stack 0
  8347                           tosu	equ	0xFFF
  8348                           tosh	equ	0xFFE
  8349                           tosl	equ	0xFFD
  8350                           pclath	equ	0xFFA
  8351                           tblptru	equ	0xFF8
  8352                           tblptrh	equ	0xFF7
  8353                           tblptrl	equ	0xFF6
  8354                           tablat	equ	0xFF5
  8355                           prodh	equ	0xFF4
  8356                           prodl	equ	0xFF3
  8357                           postinc0	equ	0xFEE
  8358                           plusw0	equ	0xFEB
  8359                           wreg	equ	0xFE8
  8360                           indf1	equ	0xFE7
  8361                           postdec1	equ	0xFE5
  8362                           fsr1h	equ	0xFE2
  8363                           fsr1l	equ	0xFE1
  8364                           indf2	equ	0xFDF
  8365                           postinc2	equ	0xFDE
  8366                           postdec2	equ	0xFDD
  8367                           plusw2	equ	0xFDB
  8368                           fsr2h	equ	0xFDA
  8369                           fsr2l	equ	0xFD9
  8370                           status	equ	0xFD8
  8371                           
  8372 ;; *************** function ___awmod *****************
  8373 ;; Defined at:
  8374 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  8375 ;; Parameters:    Size  Location     Type
  8376 ;;  dividend        2   23[COMRAM] int 
  8377 ;;  divisor         2   25[COMRAM] int 
  8378 ;; Auto vars:     Size  Location     Type
  8379 ;;  sign            1   28[COMRAM] unsigned char 
  8380 ;;  counter         1   27[COMRAM] unsigned char 
  8381 ;; Return value:  Size  Location     Type
  8382 ;;                  2   23[COMRAM] int 
  8383 ;; Registers used:
  8384 ;;		wreg, status,2, status,0
  8385 ;; Tracked objects:
  8386 ;;		On entry : 0/0
  8387 ;;		On exit  : 0/0
  8388 ;;		Unchanged: 0/0
  8389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8390 ;;      Params:         4       0       0       0       0       0       0
  8391 ;;      Locals:         2       0       0       0       0       0       0
  8392 ;;      Temps:          0       0       0       0       0       0       0
  8393 ;;      Totals:         6       0       0       0       0       0       0
  8394 ;;Total ram usage:        6 bytes
  8395 ;; Hardware stack levels used:    1
  8396 ;; Hardware stack levels required when called:    4
  8397 ;; This function calls:
  8398 ;;		Nothing
  8399 ;; This function is called by:
  8400 ;;		_SynthLdDetect
  8401 ;; This function uses a non-reentrant model
  8402 ;;
  8403                           
  8404                           	psect	text35
  8405  003562                     __ptext35:
  8406                           	opt stack 0
  8407  003562                     ___awmod:
  8408                           	opt stack 25
  8409                           
  8410                           ;incstack = 0
  8411  003562  0E00               	movlw	0
  8412  003564  6E1D               	movwf	___awmod@sign,c
  8413  003566  AE19               	btfss	___awmod@dividend+1,7,c
  8414  003568  D006               	goto	l1777
  8415  00356A  6C18               	negf	___awmod@dividend,c
  8416  00356C  1E19               	comf	___awmod@dividend+1,f,c
  8417  00356E  B0D8               	btfsc	status,0,c
  8418  003570  2A19               	incf	___awmod@dividend+1,f,c
  8419  003572  0E01               	movlw	1
  8420  003574  6E1D               	movwf	___awmod@sign,c
  8421  003576                     l1777:
  8422  003576  AE1B               	btfss	___awmod@divisor+1,7,c
  8423  003578  D004               	goto	l1778
  8424  00357A  6C1A               	negf	___awmod@divisor,c
  8425  00357C  1E1B               	comf	___awmod@divisor+1,f,c
  8426  00357E  B0D8               	btfsc	status,0,c
  8427  003580  2A1B               	incf	___awmod@divisor+1,f,c
  8428  003582                     l1778:
  8429  003582  501A               	movf	___awmod@divisor,w,c
  8430  003584  101B               	iorwf	___awmod@divisor+1,w,c
  8431  003586  B4D8               	btfsc	status,2,c
  8432  003588  D018               	goto	l1785
  8433  00358A  0E01               	movlw	1
  8434  00358C  6E1C               	movwf	___awmod@counter,c
  8435  00358E  D004               	goto	l1780
  8436  003590  90D8               	bcf	status,0,c
  8437  003592  361A               	rlcf	___awmod@divisor,f,c
  8438  003594  361B               	rlcf	___awmod@divisor+1,f,c
  8439  003596  2A1C               	incf	___awmod@counter,f,c
  8440  003598                     l1780:
  8441  003598  AE1B               	btfss	___awmod@divisor+1,7,c
  8442  00359A  D7FA               	goto	l1781
  8443  00359C                     u5720:
  8444  00359C  501A               	movf	___awmod@divisor,w,c
  8445  00359E  5C18               	subwf	___awmod@dividend,w,c
  8446  0035A0  501B               	movf	___awmod@divisor+1,w,c
  8447  0035A2  5819               	subwfb	___awmod@dividend+1,w,c
  8448  0035A4  A0D8               	btfss	status,0,c
  8449  0035A6  D004               	goto	l1784
  8450  0035A8  501A               	movf	___awmod@divisor,w,c
  8451  0035AA  5E18               	subwf	___awmod@dividend,f,c
  8452  0035AC  501B               	movf	___awmod@divisor+1,w,c
  8453  0035AE  5A19               	subwfb	___awmod@dividend+1,f,c
  8454  0035B0                     l1784:
  8455  0035B0  90D8               	bcf	status,0,c
  8456  0035B2  321B               	rrcf	___awmod@divisor+1,f,c
  8457  0035B4  321A               	rrcf	___awmod@divisor,f,c
  8458  0035B6  2E1C               	decfsz	___awmod@counter,f,c
  8459  0035B8  D7F1               	goto	u5720
  8460  0035BA                     l1785:
  8461  0035BA  501D               	movf	___awmod@sign,w,c
  8462  0035BC  B4D8               	btfsc	status,2,c
  8463  0035BE  D004               	goto	l1786
  8464  0035C0  6C18               	negf	___awmod@dividend,c
  8465  0035C2  1E19               	comf	___awmod@dividend+1,f,c
  8466  0035C4  B0D8               	btfsc	status,0,c
  8467  0035C6  2A19               	incf	___awmod@dividend+1,f,c
  8468  0035C8                     l1786:
  8469  0035C8  C018  F018         	movff	___awmod@dividend,?___awmod
  8470  0035CC  C019  F019         	movff	___awmod@dividend+1,?___awmod+1
  8471  0035D0  0012               	return	
  8472  0035D2                     __end_of___awmod:
  8473                           	opt stack 0
  8474                           tosu	equ	0xFFF
  8475                           tosh	equ	0xFFE
  8476                           tosl	equ	0xFFD
  8477                           pclath	equ	0xFFA
  8478                           tblptru	equ	0xFF8
  8479                           tblptrh	equ	0xFF7
  8480                           tblptrl	equ	0xFF6
  8481                           tablat	equ	0xFF5
  8482                           prodh	equ	0xFF4
  8483                           prodl	equ	0xFF3
  8484                           postinc0	equ	0xFEE
  8485                           plusw0	equ	0xFEB
  8486                           wreg	equ	0xFE8
  8487                           indf1	equ	0xFE7
  8488                           postdec1	equ	0xFE5
  8489                           fsr1h	equ	0xFE2
  8490                           fsr1l	equ	0xFE1
  8491                           indf2	equ	0xFDF
  8492                           postinc2	equ	0xFDE
  8493                           postdec2	equ	0xFDD
  8494                           plusw2	equ	0xFDB
  8495                           fsr2h	equ	0xFDA
  8496                           fsr2l	equ	0xFD9
  8497                           status	equ	0xFD8
  8498                           
  8499 ;; *************** function _BlinkErrorLeds *****************
  8500 ;; Defined at:
  8501 ;;		line 13 in file "LedsApp.c"
  8502 ;; Parameters:    Size  Location     Type
  8503 ;;  state           1    wreg     enum E7598
  8504 ;; Auto vars:     Size  Location     Type
  8505 ;;  state           1   26[COMRAM] enum E7598
  8506 ;;  idx             2   27[COMRAM] int 
  8507 ;; Return value:  Size  Location     Type
  8508 ;;                  1    wreg      void 
  8509 ;; Registers used:
  8510 ;;		wreg, status,2, status,0
  8511 ;; Tracked objects:
  8512 ;;		On entry : 0/0
  8513 ;;		On exit  : 0/0
  8514 ;;		Unchanged: 0/0
  8515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8516 ;;      Params:         0       0       0       0       0       0       0
  8517 ;;      Locals:         3       0       0       0       0       0       0
  8518 ;;      Temps:          3       0       0       0       0       0       0
  8519 ;;      Totals:         6       0       0       0       0       0       0
  8520 ;;Total ram usage:        6 bytes
  8521 ;; Hardware stack levels used:    1
  8522 ;; Hardware stack levels required when called:    4
  8523 ;; This function calls:
  8524 ;;		Nothing
  8525 ;; This function is called by:
  8526 ;;		_SynthLdDetect
  8527 ;;		_main
  8528 ;; This function uses a non-reentrant model
  8529 ;;
  8530                           
  8531                           	psect	text36
  8532  00376E                     __ptext36:
  8533                           	opt stack 0
  8534  00376E                     _BlinkErrorLeds:
  8535                           	opt stack 25
  8536                           
  8537                           ;incstack = 0
  8538                           ;BlinkErrorLeds@state stored from wreg
  8539  00376E  6E1B               	movwf	BlinkErrorLeds@state,c
  8540                           
  8541                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
  8542  003770  0E00               	movlw	0
  8543  003772  6E1D               	movwf	BlinkErrorLeds@idx+1,c
  8544  003774  0E00               	movlw	0
  8545  003776  6E1C               	movwf	BlinkErrorLeds@idx,c
  8546  003778                     l6351:
  8547  003778  501B               	movf	BlinkErrorLeds@state,w,c
  8548  00377A  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8549  00377C  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
  8550  00377E  5018               	movf	??_BlinkErrorLeds,w,c
  8551  003780  5C1C               	subwf	BlinkErrorLeds@idx,w,c
  8552  003782  501D               	movf	BlinkErrorLeds@idx+1,w,c
  8553  003784  0A80               	xorlw	128
  8554  003786  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
  8555  003788  5019               	movf	??_BlinkErrorLeds+1,w,c
  8556  00378A  0A80               	xorlw	128
  8557  00378C  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
  8558  00378E  B0D8               	btfsc	status,0,c
  8559  003790  0012               	return	
  8560                           
  8561                           ;LedsApp.c: 16: {
  8562                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
  8563  003792  988A               	bcf	3978,4,c	;volatile
  8564                           
  8565                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
  8566  003794  0E02               	movlw	2
  8567  003796  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
  8568  003798  0E04               	movlw	4
  8569  00379A  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8570  00379C  0EBA               	movlw	186
  8571  00379E                     u9097:
  8572  00379E  2EE8               	decfsz	wreg,f,c
  8573  0037A0  D7FE               	bra	u9097
  8574  0037A2  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
  8575  0037A4  D7FC               	bra	u9097
  8576  0037A6  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
  8577  0037A8  D7FA               	bra	u9097
  8578  0037AA  D000               	nop2	
  8579                           
  8580                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
  8581  0037AC  888A               	bsf	3978,4,c	;volatile
  8582                           
  8583                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
  8584  0037AE  0E02               	movlw	2
  8585  0037B0  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
  8586  0037B2  0E04               	movlw	4
  8587  0037B4  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8588  0037B6  0EBA               	movlw	186
  8589  0037B8                     u9107:
  8590  0037B8  2EE8               	decfsz	wreg,f,c
  8591  0037BA  D7FE               	bra	u9107
  8592  0037BC  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
  8593  0037BE  D7FC               	bra	u9107
  8594  0037C0  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
  8595  0037C2  D7FA               	bra	u9107
  8596  0037C4  D000               	nop2	
  8597  0037C6  4A1C               	infsnz	BlinkErrorLeds@idx,f,c
  8598  0037C8  2A1D               	incf	BlinkErrorLeds@idx+1,f,c
  8599  0037CA  D7D6               	goto	l6351
  8600  0037CC                     __end_of_BlinkErrorLeds:
  8601                           	opt stack 0
  8602                           tosu	equ	0xFFF
  8603                           tosh	equ	0xFFE
  8604                           tosl	equ	0xFFD
  8605                           pclath	equ	0xFFA
  8606                           tblptru	equ	0xFF8
  8607                           tblptrh	equ	0xFF7
  8608                           tblptrl	equ	0xFF6
  8609                           tablat	equ	0xFF5
  8610                           prodh	equ	0xFF4
  8611                           prodl	equ	0xFF3
  8612                           postinc0	equ	0xFEE
  8613                           plusw0	equ	0xFEB
  8614                           wreg	equ	0xFE8
  8615                           indf1	equ	0xFE7
  8616                           postdec1	equ	0xFE5
  8617                           fsr1h	equ	0xFE2
  8618                           fsr1l	equ	0xFE1
  8619                           indf2	equ	0xFDF
  8620                           postinc2	equ	0xFDE
  8621                           postdec2	equ	0xFDD
  8622                           plusw2	equ	0xFDB
  8623                           fsr2h	equ	0xFDA
  8624                           fsr2l	equ	0xFD9
  8625                           status	equ	0xFD8
  8626                           
  8627 ;; *************** function _SetMcuSystem *****************
  8628 ;; Defined at:
  8629 ;;		line 11 in file "SystemSettings.c"
  8630 ;; Parameters:    Size  Location     Type
  8631 ;;		None
  8632 ;; Auto vars:     Size  Location     Type
  8633 ;;		None
  8634 ;; Return value:  Size  Location     Type
  8635 ;;                  1    wreg      void 
  8636 ;; Registers used:
  8637 ;;		wreg, status,2, status,0, cstack
  8638 ;; Tracked objects:
  8639 ;;		On entry : 0/0
  8640 ;;		On exit  : 0/0
  8641 ;;		Unchanged: 0/0
  8642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8643 ;;      Params:         0       0       0       0       0       0       0
  8644 ;;      Locals:         0       0       0       0       0       0       0
  8645 ;;      Temps:          0       0       0       0       0       0       0
  8646 ;;      Totals:         0       0       0       0       0       0       0
  8647 ;;Total ram usage:        0 bytes
  8648 ;; Hardware stack levels used:    1
  8649 ;; Hardware stack levels required when called:    7
  8650 ;; This function calls:
  8651 ;;		_SYSTEM_Initialize
  8652 ;; This function is called by:
  8653 ;;		_main
  8654 ;; This function uses a non-reentrant model
  8655 ;;
  8656                           
  8657                           	psect	text37
  8658  0043A8                     __ptext37:
  8659                           	opt stack 0
  8660  0043A8                     _SetMcuSystem:
  8661                           	opt stack 23
  8662                           
  8663                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  8664                           
  8665                           ;incstack = 0
  8666  0043A8  EC46  F021         	call	_SYSTEM_Initialize	;wreg free
  8667                           
  8668                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  8669  0043AC  8EF2               	bsf	intcon,7,c	;volatile
  8670                           
  8671                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  8672  0043AE  8CF2               	bsf	intcon,6,c	;volatile
  8673  0043B0  0012               	return		;funcret
  8674  0043B2                     __end_of_SetMcuSystem:
  8675                           	opt stack 0
  8676                           tosu	equ	0xFFF
  8677                           tosh	equ	0xFFE
  8678                           tosl	equ	0xFFD
  8679                           pclath	equ	0xFFA
  8680                           tblptru	equ	0xFF8
  8681                           tblptrh	equ	0xFF7
  8682                           tblptrl	equ	0xFF6
  8683                           tablat	equ	0xFF5
  8684                           prodh	equ	0xFF4
  8685                           prodl	equ	0xFF3
  8686                           intcon	equ	0xFF2
  8687                           postinc0	equ	0xFEE
  8688                           plusw0	equ	0xFEB
  8689                           wreg	equ	0xFE8
  8690                           indf1	equ	0xFE7
  8691                           postdec1	equ	0xFE5
  8692                           fsr1h	equ	0xFE2
  8693                           fsr1l	equ	0xFE1
  8694                           indf2	equ	0xFDF
  8695                           postinc2	equ	0xFDE
  8696                           postdec2	equ	0xFDD
  8697                           plusw2	equ	0xFDB
  8698                           fsr2h	equ	0xFDA
  8699                           fsr2l	equ	0xFD9
  8700                           status	equ	0xFD8
  8701                           
  8702 ;; *************** function _SYSTEM_Initialize *****************
  8703 ;; Defined at:
  8704 ;;		line 112 in file "mcc_generated_files/mcc.c"
  8705 ;; Parameters:    Size  Location     Type
  8706 ;;		None
  8707 ;; Auto vars:     Size  Location     Type
  8708 ;;		None
  8709 ;; Return value:  Size  Location     Type
  8710 ;;                  1    wreg      void 
  8711 ;; Registers used:
  8712 ;;		wreg, status,2, status,0, cstack
  8713 ;; Tracked objects:
  8714 ;;		On entry : 0/0
  8715 ;;		On exit  : 0/0
  8716 ;;		Unchanged: 0/0
  8717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8718 ;;      Params:         0       0       0       0       0       0       0
  8719 ;;      Locals:         0       0       0       0       0       0       0
  8720 ;;      Temps:          0       0       0       0       0       0       0
  8721 ;;      Totals:         0       0       0       0       0       0       0
  8722 ;;Total ram usage:        0 bytes
  8723 ;; Hardware stack levels used:    1
  8724 ;; Hardware stack levels required when called:    6
  8725 ;; This function calls:
  8726 ;;		_ADC_Initialize
  8727 ;;		_EUSART1_Initialize
  8728 ;;		_INTERRUPT_Initialize
  8729 ;;		_OSCILLATOR_Initialize
  8730 ;;		_PIN_MANAGER_Initialize
  8731 ;;		_TMR0_Initialize
  8732 ;; This function is called by:
  8733 ;;		_SetMcuSystem
  8734 ;; This function uses a non-reentrant model
  8735 ;;
  8736                           
  8737                           	psect	text38
  8738  00428C                     __ptext38:
  8739                           	opt stack 0
  8740  00428C                     _SYSTEM_Initialize:
  8741                           	opt stack 23
  8742                           
  8743                           ;mcc.c: 114: INTERRUPT_Initialize();
  8744                           
  8745                           ;incstack = 0
  8746  00428C  ECF4  F021         	call	_INTERRUPT_Initialize	;wreg free
  8747                           
  8748                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  8749  004290  EC85  F01B         	call	_PIN_MANAGER_Initialize	;wreg free
  8750                           
  8751                           ;mcc.c: 116: OSCILLATOR_Initialize();
  8752  004294  ECB3  F021         	call	_OSCILLATOR_Initialize	;wreg free
  8753                           
  8754                           ;mcc.c: 117: TMR0_Initialize();
  8755  004298  EC9E  F01F         	call	_TMR0_Initialize	;wreg free
  8756                           
  8757                           ;mcc.c: 118: ADC_Initialize();
  8758  00429C  EC5F  F021         	call	_ADC_Initialize	;wreg free
  8759                           
  8760                           ;mcc.c: 119: EUSART1_Initialize();
  8761  0042A0  ECDE  F01E         	call	_EUSART1_Initialize	;wreg free
  8762  0042A4  0012               	return		;funcret
  8763  0042A6                     __end_of_SYSTEM_Initialize:
  8764                           	opt stack 0
  8765                           tosu	equ	0xFFF
  8766                           tosh	equ	0xFFE
  8767                           tosl	equ	0xFFD
  8768                           pclath	equ	0xFFA
  8769                           tblptru	equ	0xFF8
  8770                           tblptrh	equ	0xFF7
  8771                           tblptrl	equ	0xFF6
  8772                           tablat	equ	0xFF5
  8773                           prodh	equ	0xFF4
  8774                           prodl	equ	0xFF3
  8775                           intcon	equ	0xFF2
  8776                           postinc0	equ	0xFEE
  8777                           plusw0	equ	0xFEB
  8778                           wreg	equ	0xFE8
  8779                           indf1	equ	0xFE7
  8780                           postdec1	equ	0xFE5
  8781                           fsr1h	equ	0xFE2
  8782                           fsr1l	equ	0xFE1
  8783                           indf2	equ	0xFDF
  8784                           postinc2	equ	0xFDE
  8785                           postdec2	equ	0xFDD
  8786                           plusw2	equ	0xFDB
  8787                           fsr2h	equ	0xFDA
  8788                           fsr2l	equ	0xFD9
  8789                           status	equ	0xFD8
  8790                           
  8791 ;; *************** function _TMR0_Initialize *****************
  8792 ;; Defined at:
  8793 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  8794 ;; Parameters:    Size  Location     Type
  8795 ;;		None
  8796 ;; Auto vars:     Size  Location     Type
  8797 ;;		None
  8798 ;; Return value:  Size  Location     Type
  8799 ;;                  1    wreg      void 
  8800 ;; Registers used:
  8801 ;;		wreg, status,2, status,0, cstack
  8802 ;; Tracked objects:
  8803 ;;		On entry : 0/0
  8804 ;;		On exit  : 0/0
  8805 ;;		Unchanged: 0/0
  8806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8807 ;;      Params:         0       0       0       0       0       0       0
  8808 ;;      Locals:         0       0       0       0       0       0       0
  8809 ;;      Temps:          2       0       0       0       0       0       0
  8810 ;;      Totals:         2       0       0       0       0       0       0
  8811 ;;Total ram usage:        2 bytes
  8812 ;; Hardware stack levels used:    1
  8813 ;; Hardware stack levels required when called:    5
  8814 ;; This function calls:
  8815 ;;		_TMR0_SetInterruptHandler
  8816 ;; This function is called by:
  8817 ;;		_SYSTEM_Initialize
  8818 ;; This function uses a non-reentrant model
  8819 ;;
  8820                           
  8821                           	psect	text39
  8822  003F3C                     __ptext39:
  8823                           	opt stack 0
  8824  003F3C                     _TMR0_Initialize:
  8825                           	opt stack 23
  8826                           
  8827                           ;tmr0.c: 71: TMR0H = 0xF8;
  8828                           
  8829                           ;incstack = 0
  8830  003F3C  0EF8               	movlw	248
  8831  003F3E  6ED7               	movwf	4055,c	;volatile
  8832                           
  8833                           ;tmr0.c: 74: TMR0L = 0x2F;
  8834  003F40  0E2F               	movlw	47
  8835  003F42  6ED6               	movwf	4054,c	;volatile
  8836                           
  8837                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  8838  003F44  50D6               	movf	4054,w,c	;volatile
  8839  003F46  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  8840  003F4A  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  8841  003F4C  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  8842  003F50  6A1A               	clrf	??_TMR0_Initialize,c
  8843  003F52  101A               	iorwf	??_TMR0_Initialize,w,c
  8844  003F54  6E46               	movwf	_timer0ReloadVal,c	;volatile
  8845  003F56  501B               	movf	??_TMR0_Initialize+1,w,c
  8846  003F58  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  8847                           
  8848                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  8849  003F5A  94F2               	bcf	intcon,2,c	;volatile
  8850                           
  8851                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  8852  003F5C  8AF2               	bsf	intcon,5,c	;volatile
  8853                           
  8854                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  8855  003F5E  0E00               	movlw	0
  8856  003F60  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  8857  003F62  0E00               	movlw	0
  8858  003F64  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  8859  003F66  ECD9  F021         	call	_TMR0_SetInterruptHandler	;wreg free
  8860                           
  8861                           ;tmr0.c: 90: T0CON = 0x90;
  8862  003F6A  0E90               	movlw	144
  8863  003F6C  6ED5               	movwf	4053,c	;volatile
  8864  003F6E  0012               	return		;funcret
  8865  003F70                     __end_of_TMR0_Initialize:
  8866                           	opt stack 0
  8867                           tosu	equ	0xFFF
  8868                           tosh	equ	0xFFE
  8869                           tosl	equ	0xFFD
  8870                           pclath	equ	0xFFA
  8871                           tblptru	equ	0xFF8
  8872                           tblptrh	equ	0xFF7
  8873                           tblptrl	equ	0xFF6
  8874                           tablat	equ	0xFF5
  8875                           prodh	equ	0xFF4
  8876                           prodl	equ	0xFF3
  8877                           intcon	equ	0xFF2
  8878                           postinc0	equ	0xFEE
  8879                           plusw0	equ	0xFEB
  8880                           wreg	equ	0xFE8
  8881                           indf1	equ	0xFE7
  8882                           postdec1	equ	0xFE5
  8883                           fsr1h	equ	0xFE2
  8884                           fsr1l	equ	0xFE1
  8885                           indf2	equ	0xFDF
  8886                           postinc2	equ	0xFDE
  8887                           postdec2	equ	0xFDD
  8888                           plusw2	equ	0xFDB
  8889                           fsr2h	equ	0xFDA
  8890                           fsr2l	equ	0xFD9
  8891                           status	equ	0xFD8
  8892                           
  8893 ;; *************** function _TMR0_SetInterruptHandler *****************
  8894 ;; Defined at:
  8895 ;;		line 179 in file "mcc_generated_files/tmr0.c"
  8896 ;; Parameters:    Size  Location     Type
  8897 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  8898 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;		None
  8901 ;; Return value:  Size  Location     Type
  8902 ;;                  1    wreg      void 
  8903 ;; Registers used:
  8904 ;;		wreg, status,2, status,0
  8905 ;; Tracked objects:
  8906 ;;		On entry : 0/0
  8907 ;;		On exit  : 0/0
  8908 ;;		Unchanged: 0/0
  8909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8910 ;;      Params:         2       0       0       0       0       0       0
  8911 ;;      Locals:         0       0       0       0       0       0       0
  8912 ;;      Temps:          0       0       0       0       0       0       0
  8913 ;;      Totals:         2       0       0       0       0       0       0
  8914 ;;Total ram usage:        2 bytes
  8915 ;; Hardware stack levels used:    1
  8916 ;; Hardware stack levels required when called:    4
  8917 ;; This function calls:
  8918 ;;		Nothing
  8919 ;; This function is called by:
  8920 ;;		_TMR0_Initialize
  8921 ;; This function uses a non-reentrant model
  8922 ;;
  8923                           
  8924                           	psect	text40
  8925  0043B2                     __ptext40:
  8926                           	opt stack 0
  8927  0043B2                     _TMR0_SetInterruptHandler:
  8928                           	opt stack 23
  8929                           
  8930                           ;tmr0.c: 180: TMR0_InterruptHandler = InterruptHandler;
  8931                           
  8932                           ;incstack = 0
  8933  0043B2  C018  F1CC         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  8934  0043B6  C019  F1CD         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  8935  0043BA  0012               	return		;funcret
  8936  0043BC                     __end_of_TMR0_SetInterruptHandler:
  8937                           	opt stack 0
  8938                           tosu	equ	0xFFF
  8939                           tosh	equ	0xFFE
  8940                           tosl	equ	0xFFD
  8941                           pclath	equ	0xFFA
  8942                           tblptru	equ	0xFF8
  8943                           tblptrh	equ	0xFF7
  8944                           tblptrl	equ	0xFF6
  8945                           tablat	equ	0xFF5
  8946                           prodh	equ	0xFF4
  8947                           prodl	equ	0xFF3
  8948                           intcon	equ	0xFF2
  8949                           postinc0	equ	0xFEE
  8950                           plusw0	equ	0xFEB
  8951                           wreg	equ	0xFE8
  8952                           indf1	equ	0xFE7
  8953                           postdec1	equ	0xFE5
  8954                           fsr1h	equ	0xFE2
  8955                           fsr1l	equ	0xFE1
  8956                           indf2	equ	0xFDF
  8957                           postinc2	equ	0xFDE
  8958                           postdec2	equ	0xFDD
  8959                           plusw2	equ	0xFDB
  8960                           fsr2h	equ	0xFDA
  8961                           fsr2l	equ	0xFD9
  8962                           status	equ	0xFD8
  8963                           
  8964 ;; *************** function _PIN_MANAGER_Initialize *****************
  8965 ;; Defined at:
  8966 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  8967 ;; Parameters:    Size  Location     Type
  8968 ;;		None
  8969 ;; Auto vars:     Size  Location     Type
  8970 ;;		None
  8971 ;; Return value:  Size  Location     Type
  8972 ;;                  1    wreg      void 
  8973 ;; Registers used:
  8974 ;;		wreg, status,2, status,0, cstack
  8975 ;; Tracked objects:
  8976 ;;		On entry : 0/0
  8977 ;;		On exit  : 0/0
  8978 ;;		Unchanged: 0/0
  8979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8980 ;;      Params:         0       0       0       0       0       0       0
  8981 ;;      Locals:         0       0       0       0       0       0       0
  8982 ;;      Temps:          0       0       0       0       0       0       0
  8983 ;;      Totals:         0       0       0       0       0       0       0
  8984 ;;Total ram usage:        0 bytes
  8985 ;; Hardware stack levels used:    1
  8986 ;; Hardware stack levels required when called:    5
  8987 ;; This function calls:
  8988 ;;		_IOCB4_SetInterruptHandler
  8989 ;;		_IOCB5_SetInterruptHandler
  8990 ;; This function is called by:
  8991 ;;		_SYSTEM_Initialize
  8992 ;; This function uses a non-reentrant model
  8993 ;;
  8994                           
  8995                           	psect	text41
  8996  00370A                     __ptext41:
  8997                           	opt stack 0
  8998  00370A                     _PIN_MANAGER_Initialize:
  8999                           	opt stack 23
  9000                           
  9001                           ;pin_manager.c: 60: LATE = 0x00;
  9002                           
  9003                           ;incstack = 0
  9004  00370A  0E00               	movlw	0
  9005  00370C  6E8D               	movwf	3981,c	;volatile
  9006                           
  9007                           ;pin_manager.c: 61: LATD = 0x00;
  9008  00370E  0E00               	movlw	0
  9009  003710  6E8C               	movwf	3980,c	;volatile
  9010                           
  9011                           ;pin_manager.c: 62: LATA = 0x06;
  9012  003712  0E06               	movlw	6
  9013  003714  6E89               	movwf	3977,c	;volatile
  9014                           
  9015                           ;pin_manager.c: 63: LATB = 0x00;
  9016  003716  0E00               	movlw	0
  9017  003718  6E8A               	movwf	3978,c	;volatile
  9018                           
  9019                           ;pin_manager.c: 64: LATC = 0x00;
  9020  00371A  0E00               	movlw	0
  9021  00371C  6E8B               	movwf	3979,c	;volatile
  9022                           
  9023                           ;pin_manager.c: 69: TRISE = 0x07;
  9024  00371E  0E07               	movlw	7
  9025  003720  6E96               	movwf	3990,c	;volatile
  9026                           
  9027                           ;pin_manager.c: 70: TRISA = 0xE1;
  9028  003722  0EE1               	movlw	225
  9029  003724  6E92               	movwf	3986,c	;volatile
  9030                           
  9031                           ;pin_manager.c: 71: TRISB = 0xEF;
  9032  003726  0EEF               	movlw	239
  9033  003728  6E93               	movwf	3987,c	;volatile
  9034                           
  9035                           ;pin_manager.c: 72: TRISC = 0x80;
  9036  00372A  0E80               	movlw	128
  9037  00372C  6E94               	movwf	3988,c	;volatile
  9038                           
  9039                           ;pin_manager.c: 73: TRISD = 0xF2;
  9040  00372E  0EF2               	movlw	242
  9041  003730  6E95               	movwf	3989,c	;volatile
  9042                           
  9043                           ;pin_manager.c: 78: ANSELC = 0x34;
  9044  003732  0E34               	movlw	52
  9045  003734  010F               	movlb	15	; () banked
  9046  003736  6F3A               	movwf	58,b	;volatile
  9047                           
  9048                           ;pin_manager.c: 79: ANSELB = 0x3E;
  9049  003738  0E3E               	movlw	62
  9050  00373A  6F39               	movwf	57,b	;volatile
  9051                           
  9052                           ;pin_manager.c: 80: ANSELD = 0xE4;
  9053  00373C  0EE4               	movlw	228
  9054  00373E  6F3B               	movwf	59,b	;volatile
  9055                           
  9056                           ;pin_manager.c: 81: ANSELE = 0x07;
  9057  003740  0E07               	movlw	7
  9058  003742  6F3C               	movwf	60,b	;volatile
  9059                           
  9060                           ;pin_manager.c: 82: ANSELA = 0x2F;
  9061  003744  0E2F               	movlw	47
  9062  003746  6F38               	movwf	56,b	;volatile
  9063                           
  9064                           ;pin_manager.c: 87: WPUB = 0xC3;
  9065  003748  0EC3               	movlw	195
  9066  00374A  6E61               	movwf	3937,c	;volatile
  9067                           
  9068                           ; BSR set to: 15
  9069                           ;pin_manager.c: 88: INTCON2bits.nRBPU = 0;
  9070  00374C  9EF1               	bcf	intcon2,7,c	;volatile
  9071                           
  9072                           ; BSR set to: 15
  9073                           ;pin_manager.c: 96: IOCBbits.IOCB4 = 1;
  9074  00374E  8862               	bsf	3938,4,c	;volatile
  9075                           
  9076                           ; BSR set to: 15
  9077                           ;pin_manager.c: 97: IOCBbits.IOCB5 = 1;
  9078  003750  8A62               	bsf	3938,5,c	;volatile
  9079                           
  9080                           ; BSR set to: 15
  9081                           ;pin_manager.c: 100: IOCB4_SetInterruptHandler(IOCB4_DefaultInterruptHandler);
  9082  003752  0EF6               	movlw	low _IOCB4_DefaultInterruptHandler
  9083  003754  6E18               	movwf	IOCB4_SetInterruptHandler@InterruptHandler,c
  9084  003756  0E43               	movlw	high _IOCB4_DefaultInterruptHandler
  9085  003758  6E19               	movwf	IOCB4_SetInterruptHandler@InterruptHandler+1,c
  9086  00375A  ECE3  F021         	call	_IOCB4_SetInterruptHandler	;wreg free
  9087                           
  9088                           ;pin_manager.c: 101: IOCB5_SetInterruptHandler(IOCB5_DefaultInterruptHandler);
  9089  00375E  0EF4               	movlw	low _IOCB5_DefaultInterruptHandler
  9090  003760  6E18               	movwf	IOCB5_SetInterruptHandler@InterruptHandler,c
  9091  003762  0E43               	movlw	high _IOCB5_DefaultInterruptHandler
  9092  003764  6E19               	movwf	IOCB5_SetInterruptHandler@InterruptHandler+1,c
  9093  003766  ECDE  F021         	call	_IOCB5_SetInterruptHandler	;wreg free
  9094                           
  9095                           ;pin_manager.c: 104: INTCONbits.RBIE = 1;
  9096  00376A  86F2               	bsf	intcon,3,c	;volatile
  9097  00376C  0012               	return		;funcret
  9098  00376E                     __end_of_PIN_MANAGER_Initialize:
  9099                           	opt stack 0
  9100                           tosu	equ	0xFFF
  9101                           tosh	equ	0xFFE
  9102                           tosl	equ	0xFFD
  9103                           pclath	equ	0xFFA
  9104                           tblptru	equ	0xFF8
  9105                           tblptrh	equ	0xFF7
  9106                           tblptrl	equ	0xFF6
  9107                           tablat	equ	0xFF5
  9108                           prodh	equ	0xFF4
  9109                           prodl	equ	0xFF3
  9110                           intcon	equ	0xFF2
  9111                           intcon2	equ	0xFF1
  9112                           postinc0	equ	0xFEE
  9113                           plusw0	equ	0xFEB
  9114                           wreg	equ	0xFE8
  9115                           indf1	equ	0xFE7
  9116                           postdec1	equ	0xFE5
  9117                           fsr1h	equ	0xFE2
  9118                           fsr1l	equ	0xFE1
  9119                           indf2	equ	0xFDF
  9120                           postinc2	equ	0xFDE
  9121                           postdec2	equ	0xFDD
  9122                           plusw2	equ	0xFDB
  9123                           fsr2h	equ	0xFDA
  9124                           fsr2l	equ	0xFD9
  9125                           status	equ	0xFD8
  9126                           
  9127 ;; *************** function _IOCB5_SetInterruptHandler *****************
  9128 ;; Defined at:
  9129 ;;		line 172 in file "mcc_generated_files/pin_manager.c"
  9130 ;; Parameters:    Size  Location     Type
  9131 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  9132 ;;		 -> IOCB5_DefaultInterruptHandler(1), 
  9133 ;; Auto vars:     Size  Location     Type
  9134 ;;		None
  9135 ;; Return value:  Size  Location     Type
  9136 ;;                  1    wreg      void 
  9137 ;; Registers used:
  9138 ;;		wreg, status,2, status,0
  9139 ;; Tracked objects:
  9140 ;;		On entry : 0/0
  9141 ;;		On exit  : 0/0
  9142 ;;		Unchanged: 0/0
  9143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9144 ;;      Params:         2       0       0       0       0       0       0
  9145 ;;      Locals:         0       0       0       0       0       0       0
  9146 ;;      Temps:          0       0       0       0       0       0       0
  9147 ;;      Totals:         2       0       0       0       0       0       0
  9148 ;;Total ram usage:        2 bytes
  9149 ;; Hardware stack levels used:    1
  9150 ;; Hardware stack levels required when called:    4
  9151 ;; This function calls:
  9152 ;;		Nothing
  9153 ;; This function is called by:
  9154 ;;		_PIN_MANAGER_Initialize
  9155 ;; This function uses a non-reentrant model
  9156 ;;
  9157                           
  9158                           	psect	text42
  9159  0043BC                     __ptext42:
  9160                           	opt stack 0
  9161  0043BC                     _IOCB5_SetInterruptHandler:
  9162                           	opt stack 23
  9163                           
  9164                           ;pin_manager.c: 173: IOCB5_InterruptHandler = InterruptHandler;
  9165                           
  9166                           ;incstack = 0
  9167  0043BC  C018  F1CE         	movff	IOCB5_SetInterruptHandler@InterruptHandler,_IOCB5_InterruptHandler
  9168  0043C0  C019  F1CF         	movff	IOCB5_SetInterruptHandler@InterruptHandler+1,_IOCB5_InterruptHandler+1
  9169  0043C4  0012               	return		;funcret
  9170  0043C6                     __end_of_IOCB5_SetInterruptHandler:
  9171                           	opt stack 0
  9172                           tosu	equ	0xFFF
  9173                           tosh	equ	0xFFE
  9174                           tosl	equ	0xFFD
  9175                           pclath	equ	0xFFA
  9176                           tblptru	equ	0xFF8
  9177                           tblptrh	equ	0xFF7
  9178                           tblptrl	equ	0xFF6
  9179                           tablat	equ	0xFF5
  9180                           prodh	equ	0xFF4
  9181                           prodl	equ	0xFF3
  9182                           intcon	equ	0xFF2
  9183                           intcon2	equ	0xFF1
  9184                           postinc0	equ	0xFEE
  9185                           plusw0	equ	0xFEB
  9186                           wreg	equ	0xFE8
  9187                           indf1	equ	0xFE7
  9188                           postdec1	equ	0xFE5
  9189                           fsr1h	equ	0xFE2
  9190                           fsr1l	equ	0xFE1
  9191                           indf2	equ	0xFDF
  9192                           postinc2	equ	0xFDE
  9193                           postdec2	equ	0xFDD
  9194                           plusw2	equ	0xFDB
  9195                           fsr2h	equ	0xFDA
  9196                           fsr2l	equ	0xFD9
  9197                           status	equ	0xFD8
  9198                           
  9199 ;; *************** function _IOCB4_SetInterruptHandler *****************
  9200 ;; Defined at:
  9201 ;;		line 143 in file "mcc_generated_files/pin_manager.c"
  9202 ;; Parameters:    Size  Location     Type
  9203 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  9204 ;;		 -> IOCB4_DefaultInterruptHandler(1), 
  9205 ;; Auto vars:     Size  Location     Type
  9206 ;;		None
  9207 ;; Return value:  Size  Location     Type
  9208 ;;                  1    wreg      void 
  9209 ;; Registers used:
  9210 ;;		wreg, status,2, status,0
  9211 ;; Tracked objects:
  9212 ;;		On entry : 0/0
  9213 ;;		On exit  : 0/0
  9214 ;;		Unchanged: 0/0
  9215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9216 ;;      Params:         2       0       0       0       0       0       0
  9217 ;;      Locals:         0       0       0       0       0       0       0
  9218 ;;      Temps:          0       0       0       0       0       0       0
  9219 ;;      Totals:         2       0       0       0       0       0       0
  9220 ;;Total ram usage:        2 bytes
  9221 ;; Hardware stack levels used:    1
  9222 ;; Hardware stack levels required when called:    4
  9223 ;; This function calls:
  9224 ;;		Nothing
  9225 ;; This function is called by:
  9226 ;;		_PIN_MANAGER_Initialize
  9227 ;; This function uses a non-reentrant model
  9228 ;;
  9229                           
  9230                           	psect	text43
  9231  0043C6                     __ptext43:
  9232                           	opt stack 0
  9233  0043C6                     _IOCB4_SetInterruptHandler:
  9234                           	opt stack 23
  9235                           
  9236                           ;pin_manager.c: 144: IOCB4_InterruptHandler = InterruptHandler;
  9237                           
  9238                           ;incstack = 0
  9239  0043C6  C018  F1D0         	movff	IOCB4_SetInterruptHandler@InterruptHandler,_IOCB4_InterruptHandler
  9240  0043CA  C019  F1D1         	movff	IOCB4_SetInterruptHandler@InterruptHandler+1,_IOCB4_InterruptHandler+1
  9241  0043CE  0012               	return		;funcret
  9242  0043D0                     __end_of_IOCB4_SetInterruptHandler:
  9243                           	opt stack 0
  9244                           tosu	equ	0xFFF
  9245                           tosh	equ	0xFFE
  9246                           tosl	equ	0xFFD
  9247                           pclath	equ	0xFFA
  9248                           tblptru	equ	0xFF8
  9249                           tblptrh	equ	0xFF7
  9250                           tblptrl	equ	0xFF6
  9251                           tablat	equ	0xFF5
  9252                           prodh	equ	0xFF4
  9253                           prodl	equ	0xFF3
  9254                           intcon	equ	0xFF2
  9255                           intcon2	equ	0xFF1
  9256                           postinc0	equ	0xFEE
  9257                           plusw0	equ	0xFEB
  9258                           wreg	equ	0xFE8
  9259                           indf1	equ	0xFE7
  9260                           postdec1	equ	0xFE5
  9261                           fsr1h	equ	0xFE2
  9262                           fsr1l	equ	0xFE1
  9263                           indf2	equ	0xFDF
  9264                           postinc2	equ	0xFDE
  9265                           postdec2	equ	0xFDD
  9266                           plusw2	equ	0xFDB
  9267                           fsr2h	equ	0xFDA
  9268                           fsr2l	equ	0xFD9
  9269                           status	equ	0xFD8
  9270                           
  9271 ;; *************** function _OSCILLATOR_Initialize *****************
  9272 ;; Defined at:
  9273 ;;		line 122 in file "mcc_generated_files/mcc.c"
  9274 ;; Parameters:    Size  Location     Type
  9275 ;;		None
  9276 ;; Auto vars:     Size  Location     Type
  9277 ;;		None
  9278 ;; Return value:  Size  Location     Type
  9279 ;;                  1    wreg      void 
  9280 ;; Registers used:
  9281 ;;		wreg, status,2
  9282 ;; Tracked objects:
  9283 ;;		On entry : 0/0
  9284 ;;		On exit  : 0/0
  9285 ;;		Unchanged: 0/0
  9286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9287 ;;      Params:         0       0       0       0       0       0       0
  9288 ;;      Locals:         0       0       0       0       0       0       0
  9289 ;;      Temps:          0       0       0       0       0       0       0
  9290 ;;      Totals:         0       0       0       0       0       0       0
  9291 ;;Total ram usage:        0 bytes
  9292 ;; Hardware stack levels used:    1
  9293 ;; Hardware stack levels required when called:    4
  9294 ;; This function calls:
  9295 ;;		Nothing
  9296 ;; This function is called by:
  9297 ;;		_SYSTEM_Initialize
  9298 ;; This function uses a non-reentrant model
  9299 ;;
  9300                           
  9301                           	psect	text44
  9302  004366                     __ptext44:
  9303                           	opt stack 0
  9304  004366                     _OSCILLATOR_Initialize:
  9305                           	opt stack 24
  9306                           
  9307                           ;mcc.c: 125: OSCCON = 0x60;
  9308                           
  9309                           ;incstack = 0
  9310  004366  0E60               	movlw	96
  9311  004368  6ED3               	movwf	4051,c	;volatile
  9312                           
  9313                           ;mcc.c: 127: OSCCON2 = 0x04;
  9314  00436A  0E04               	movlw	4
  9315  00436C  6ED2               	movwf	4050,c	;volatile
  9316                           
  9317                           ;mcc.c: 129: OSCTUNE = 0x80;
  9318  00436E  0E80               	movlw	128
  9319  004370  6E9B               	movwf	3995,c	;volatile
  9320  004372  0012               	return		;funcret
  9321  004374                     __end_of_OSCILLATOR_Initialize:
  9322                           	opt stack 0
  9323                           tosu	equ	0xFFF
  9324                           tosh	equ	0xFFE
  9325                           tosl	equ	0xFFD
  9326                           pclath	equ	0xFFA
  9327                           tblptru	equ	0xFF8
  9328                           tblptrh	equ	0xFF7
  9329                           tblptrl	equ	0xFF6
  9330                           tablat	equ	0xFF5
  9331                           prodh	equ	0xFF4
  9332                           prodl	equ	0xFF3
  9333                           intcon	equ	0xFF2
  9334                           intcon2	equ	0xFF1
  9335                           postinc0	equ	0xFEE
  9336                           plusw0	equ	0xFEB
  9337                           wreg	equ	0xFE8
  9338                           indf1	equ	0xFE7
  9339                           postdec1	equ	0xFE5
  9340                           fsr1h	equ	0xFE2
  9341                           fsr1l	equ	0xFE1
  9342                           indf2	equ	0xFDF
  9343                           postinc2	equ	0xFDE
  9344                           postdec2	equ	0xFDD
  9345                           plusw2	equ	0xFDB
  9346                           fsr2h	equ	0xFDA
  9347                           fsr2l	equ	0xFD9
  9348                           status	equ	0xFD8
  9349                           
  9350 ;; *************** function _INTERRUPT_Initialize *****************
  9351 ;; Defined at:
  9352 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  9353 ;; Parameters:    Size  Location     Type
  9354 ;;		None
  9355 ;; Auto vars:     Size  Location     Type
  9356 ;;		None
  9357 ;; Return value:  Size  Location     Type
  9358 ;;                  1    wreg      void 
  9359 ;; Registers used:
  9360 ;;		None
  9361 ;; Tracked objects:
  9362 ;;		On entry : 0/0
  9363 ;;		On exit  : 0/0
  9364 ;;		Unchanged: 0/0
  9365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9366 ;;      Params:         0       0       0       0       0       0       0
  9367 ;;      Locals:         0       0       0       0       0       0       0
  9368 ;;      Temps:          0       0       0       0       0       0       0
  9369 ;;      Totals:         0       0       0       0       0       0       0
  9370 ;;Total ram usage:        0 bytes
  9371 ;; Hardware stack levels used:    1
  9372 ;; Hardware stack levels required when called:    4
  9373 ;; This function calls:
  9374 ;;		Nothing
  9375 ;; This function is called by:
  9376 ;;		_SYSTEM_Initialize
  9377 ;; This function uses a non-reentrant model
  9378 ;;
  9379                           
  9380                           	psect	text45
  9381  0043E8                     __ptext45:
  9382                           	opt stack 0
  9383  0043E8                     _INTERRUPT_Initialize:
  9384                           	opt stack 24
  9385                           
  9386                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  9387                           
  9388                           ;incstack = 0
  9389  0043E8  9ED0               	bcf	4048,7,c	;volatile
  9390  0043EA  0012               	return		;funcret
  9391  0043EC                     __end_of_INTERRUPT_Initialize:
  9392                           	opt stack 0
  9393                           tosu	equ	0xFFF
  9394                           tosh	equ	0xFFE
  9395                           tosl	equ	0xFFD
  9396                           pclath	equ	0xFFA
  9397                           tblptru	equ	0xFF8
  9398                           tblptrh	equ	0xFF7
  9399                           tblptrl	equ	0xFF6
  9400                           tablat	equ	0xFF5
  9401                           prodh	equ	0xFF4
  9402                           prodl	equ	0xFF3
  9403                           intcon	equ	0xFF2
  9404                           intcon2	equ	0xFF1
  9405                           postinc0	equ	0xFEE
  9406                           plusw0	equ	0xFEB
  9407                           wreg	equ	0xFE8
  9408                           indf1	equ	0xFE7
  9409                           postdec1	equ	0xFE5
  9410                           fsr1h	equ	0xFE2
  9411                           fsr1l	equ	0xFE1
  9412                           indf2	equ	0xFDF
  9413                           postinc2	equ	0xFDE
  9414                           postdec2	equ	0xFDD
  9415                           plusw2	equ	0xFDB
  9416                           fsr2h	equ	0xFDA
  9417                           fsr2l	equ	0xFD9
  9418                           status	equ	0xFD8
  9419                           
  9420 ;; *************** function _EUSART1_Initialize *****************
  9421 ;; Defined at:
  9422 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  9423 ;; Parameters:    Size  Location     Type
  9424 ;;		None
  9425 ;; Auto vars:     Size  Location     Type
  9426 ;;		None
  9427 ;; Return value:  Size  Location     Type
  9428 ;;                  1    wreg      void 
  9429 ;; Registers used:
  9430 ;;		wreg, status,2
  9431 ;; Tracked objects:
  9432 ;;		On entry : 0/0
  9433 ;;		On exit  : 0/0
  9434 ;;		Unchanged: 0/0
  9435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9436 ;;      Params:         0       0       0       0       0       0       0
  9437 ;;      Locals:         0       0       0       0       0       0       0
  9438 ;;      Temps:          0       0       0       0       0       0       0
  9439 ;;      Totals:         0       0       0       0       0       0       0
  9440 ;;Total ram usage:        0 bytes
  9441 ;; Hardware stack levels used:    1
  9442 ;; Hardware stack levels required when called:    4
  9443 ;; This function calls:
  9444 ;;		Nothing
  9445 ;; This function is called by:
  9446 ;;		_SYSTEM_Initialize
  9447 ;; This function uses a non-reentrant model
  9448 ;;
  9449                           
  9450                           	psect	text46
  9451  003DBC                     __ptext46:
  9452                           	opt stack 0
  9453  003DBC                     _EUSART1_Initialize:
  9454                           	opt stack 24
  9455                           
  9456                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  9457                           
  9458                           ;incstack = 0
  9459  003DBC  9A9D               	bcf	3997,5,c	;volatile
  9460                           
  9461                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  9462  003DBE  989D               	bcf	3997,4,c	;volatile
  9463                           
  9464                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  9465  003DC0  0E08               	movlw	8
  9466  003DC2  6EB8               	movwf	4024,c	;volatile
  9467                           
  9468                           ;eusart1.c: 85: RCSTA1 = 0x90;
  9469  003DC4  0E90               	movlw	144
  9470  003DC6  6EAB               	movwf	4011,c	;volatile
  9471                           
  9472                           ;eusart1.c: 88: TXSTA1 = 0x24;
  9473  003DC8  0E24               	movlw	36
  9474  003DCA  6EAC               	movwf	4012,c	;volatile
  9475                           
  9476                           ;eusart1.c: 91: SPBRG1 = 0x10;
  9477  003DCC  0E10               	movlw	16
  9478  003DCE  6EAF               	movwf	4015,c	;volatile
  9479                           
  9480                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  9481  003DD0  0E00               	movlw	0
  9482  003DD2  6EB0               	movwf	4016,c	;volatile
  9483                           
  9484                           ;eusart1.c: 98: eusart1TxHead = 0;
  9485  003DD4  0E00               	movlw	0
  9486  003DD6  6E36               	movwf	_eusart1TxHead,c	;volatile
  9487                           
  9488                           ;eusart1.c: 99: eusart1TxTail = 0;
  9489  003DD8  0E00               	movlw	0
  9490  003DDA  6E35               	movwf	_eusart1TxTail,c	;volatile
  9491                           
  9492                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  9493  003DDC  0E46               	movlw	70
  9494  003DDE  0101               	movlb	1	; () banked
  9495  003DE0  6FD2               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  9496                           
  9497                           ;eusart1.c: 102: eusart1RxHead = 0;
  9498  003DE2  0E00               	movlw	0
  9499  003DE4  6E34               	movwf	_eusart1RxHead,c	;volatile
  9500                           
  9501                           ;eusart1.c: 103: eusart1RxTail = 0;
  9502  003DE6  0E00               	movlw	0
  9503  003DE8  6E33               	movwf	_eusart1RxTail,c	;volatile
  9504                           
  9505                           ;eusart1.c: 104: eusart1RxCount = 0;
  9506  003DEA  0E00               	movlw	0
  9507  003DEC  0100               	movlb	0	; () banked
  9508  003DEE  6FF5               	movwf	_eusart1RxCount& (0+255),b	;volatile
  9509                           
  9510                           ; BSR set to: 0
  9511                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  9512  003DF0  8A9D               	bsf	3997,5,c	;volatile
  9513                           
  9514                           ; BSR set to: 0
  9515  003DF2  0012               	return		;funcret
  9516  003DF4                     __end_of_EUSART1_Initialize:
  9517                           	opt stack 0
  9518                           tosu	equ	0xFFF
  9519                           tosh	equ	0xFFE
  9520                           tosl	equ	0xFFD
  9521                           pclath	equ	0xFFA
  9522                           tblptru	equ	0xFF8
  9523                           tblptrh	equ	0xFF7
  9524                           tblptrl	equ	0xFF6
  9525                           tablat	equ	0xFF5
  9526                           prodh	equ	0xFF4
  9527                           prodl	equ	0xFF3
  9528                           intcon	equ	0xFF2
  9529                           intcon2	equ	0xFF1
  9530                           postinc0	equ	0xFEE
  9531                           plusw0	equ	0xFEB
  9532                           wreg	equ	0xFE8
  9533                           indf1	equ	0xFE7
  9534                           postdec1	equ	0xFE5
  9535                           fsr1h	equ	0xFE2
  9536                           fsr1l	equ	0xFE1
  9537                           indf2	equ	0xFDF
  9538                           postinc2	equ	0xFDE
  9539                           postdec2	equ	0xFDD
  9540                           plusw2	equ	0xFDB
  9541                           fsr2h	equ	0xFDA
  9542                           fsr2l	equ	0xFD9
  9543                           status	equ	0xFD8
  9544                           
  9545 ;; *************** function _ADC_Initialize *****************
  9546 ;; Defined at:
  9547 ;;		line 58 in file "mcc_generated_files/adc.c"
  9548 ;; Parameters:    Size  Location     Type
  9549 ;;		None
  9550 ;; Auto vars:     Size  Location     Type
  9551 ;;		None
  9552 ;; Return value:  Size  Location     Type
  9553 ;;                  1    wreg      void 
  9554 ;; Registers used:
  9555 ;;		wreg, status,2
  9556 ;; Tracked objects:
  9557 ;;		On entry : 0/0
  9558 ;;		On exit  : 0/0
  9559 ;;		Unchanged: 0/0
  9560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9561 ;;      Params:         0       0       0       0       0       0       0
  9562 ;;      Locals:         0       0       0       0       0       0       0
  9563 ;;      Temps:          0       0       0       0       0       0       0
  9564 ;;      Totals:         0       0       0       0       0       0       0
  9565 ;;Total ram usage:        0 bytes
  9566 ;; Hardware stack levels used:    1
  9567 ;; Hardware stack levels required when called:    4
  9568 ;; This function calls:
  9569 ;;		Nothing
  9570 ;; This function is called by:
  9571 ;;		_SYSTEM_Initialize
  9572 ;; This function uses a non-reentrant model
  9573 ;;
  9574                           
  9575                           	psect	text47
  9576  0042BE                     __ptext47:
  9577                           	opt stack 0
  9578  0042BE                     _ADC_Initialize:
  9579                           	opt stack 24
  9580                           
  9581                           ;adc.c: 63: ADCON0 = 0x05;
  9582                           
  9583                           ; BSR set to: 0
  9584                           ;incstack = 0
  9585  0042BE  0E05               	movlw	5
  9586  0042C0  6EC2               	movwf	4034,c	;volatile
  9587                           
  9588                           ;adc.c: 66: ADCON1 = 0x00;
  9589  0042C2  0E00               	movlw	0
  9590  0042C4  6EC1               	movwf	4033,c	;volatile
  9591                           
  9592                           ;adc.c: 69: ADCON2 = 0x87;
  9593  0042C6  0E87               	movlw	135
  9594  0042C8  6EC0               	movwf	4032,c	;volatile
  9595                           
  9596                           ;adc.c: 72: ADRESL = 0x00;
  9597  0042CA  0E00               	movlw	0
  9598  0042CC  6EC3               	movwf	4035,c	;volatile
  9599                           
  9600                           ;adc.c: 75: ADRESH = 0x00;
  9601  0042CE  0E00               	movlw	0
  9602  0042D0  6EC4               	movwf	4036,c	;volatile
  9603  0042D2  0012               	return		;funcret
  9604  0042D4                     __end_of_ADC_Initialize:
  9605                           	opt stack 0
  9606                           tosu	equ	0xFFF
  9607                           tosh	equ	0xFFE
  9608                           tosl	equ	0xFFD
  9609                           pclath	equ	0xFFA
  9610                           tblptru	equ	0xFF8
  9611                           tblptrh	equ	0xFF7
  9612                           tblptrl	equ	0xFF6
  9613                           tablat	equ	0xFF5
  9614                           prodh	equ	0xFF4
  9615                           prodl	equ	0xFF3
  9616                           intcon	equ	0xFF2
  9617                           intcon2	equ	0xFF1
  9618                           postinc0	equ	0xFEE
  9619                           plusw0	equ	0xFEB
  9620                           wreg	equ	0xFE8
  9621                           indf1	equ	0xFE7
  9622                           postdec1	equ	0xFE5
  9623                           fsr1h	equ	0xFE2
  9624                           fsr1l	equ	0xFE1
  9625                           indf2	equ	0xFDF
  9626                           postinc2	equ	0xFDE
  9627                           postdec2	equ	0xFDD
  9628                           plusw2	equ	0xFDB
  9629                           fsr2h	equ	0xFDA
  9630                           fsr2l	equ	0xFD9
  9631                           status	equ	0xFD8
  9632                           
  9633 ;; *************** function _SetMcuRunTime *****************
  9634 ;; Defined at:
  9635 ;;		line 57 in file "SystemStatus.c"
  9636 ;; Parameters:    Size  Location     Type
  9637 ;;		None
  9638 ;; Auto vars:     Size  Location     Type
  9639 ;;		None
  9640 ;; Return value:  Size  Location     Type
  9641 ;;                  1    wreg      void 
  9642 ;; Registers used:
  9643 ;;		wreg, status,2, status,0, cstack
  9644 ;; Tracked objects:
  9645 ;;		On entry : 0/0
  9646 ;;		On exit  : 0/0
  9647 ;;		Unchanged: 0/0
  9648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9649 ;;      Params:         0       0       0       0       0       0       0
  9650 ;;      Locals:         0       0       0       0       0       0       0
  9651 ;;      Temps:          0       0       0       0       0       0       0
  9652 ;;      Totals:         0       0       0       0       0       0       0
  9653 ;;Total ram usage:        0 bytes
  9654 ;; Hardware stack levels used:    1
  9655 ;; Hardware stack levels required when called:    5
  9656 ;; This function calls:
  9657 ;;		___llmod
  9658 ;; This function is called by:
  9659 ;;		_main
  9660 ;; This function uses a non-reentrant model
  9661 ;;
  9662                           
  9663                           	psect	text48
  9664  003BCA                     __ptext48:
  9665                           	opt stack 0
  9666  003BCA                     _SetMcuRunTime:
  9667                           	opt stack 25
  9668                           
  9669                           ;SystemStatus.c: 59: mcuRunTimeIn5SecTicks++;
  9670                           
  9671                           ;incstack = 0
  9672  003BCA  0E01               	movlw	1
  9673  003BCC  0101               	movlb	1	; () banked
  9674  003BCE  2728               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  9675  003BD0  0E00               	movlw	0
  9676  003BD2  2329               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  9677  003BD4  232A               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  9678  003BD6  232B               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  9679                           
  9680                           ; BSR set to: 1
  9681                           ;SystemStatus.c: 60: mcuRunTimeIn5SecTicks %= (17280);
  9682  003BD8  C128  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  9683  003BDC  C129  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  9684  003BE0  C12A  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  9685  003BE4  C12B  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  9686  003BE8  0E80               	movlw	128
  9687  003BEA  6E1C               	movwf	___llmod@divisor,c
  9688  003BEC  0E43               	movlw	67
  9689  003BEE  6E1D               	movwf	___llmod@divisor+1,c
  9690  003BF0  0E00               	movlw	0
  9691  003BF2  6E1E               	movwf	___llmod@divisor+2,c
  9692  003BF4  0E00               	movlw	0
  9693  003BF6  6E1F               	movwf	___llmod@divisor+3,c
  9694  003BF8  EC52  F01B         	call	___llmod	;wreg free
  9695  003BFC  C018  F128         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  9696  003C00  C019  F129         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  9697  003C04  C01A  F12A         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  9698  003C08  C01B  F12B         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  9699  003C0C  0012               	return		;funcret
  9700  003C0E                     __end_of_SetMcuRunTime:
  9701                           	opt stack 0
  9702                           tosu	equ	0xFFF
  9703                           tosh	equ	0xFFE
  9704                           tosl	equ	0xFFD
  9705                           pclath	equ	0xFFA
  9706                           tblptru	equ	0xFF8
  9707                           tblptrh	equ	0xFF7
  9708                           tblptrl	equ	0xFF6
  9709                           tablat	equ	0xFF5
  9710                           prodh	equ	0xFF4
  9711                           prodl	equ	0xFF3
  9712                           intcon	equ	0xFF2
  9713                           intcon2	equ	0xFF1
  9714                           postinc0	equ	0xFEE
  9715                           plusw0	equ	0xFEB
  9716                           wreg	equ	0xFE8
  9717                           indf1	equ	0xFE7
  9718                           postdec1	equ	0xFE5
  9719                           fsr1h	equ	0xFE2
  9720                           fsr1l	equ	0xFE1
  9721                           indf2	equ	0xFDF
  9722                           postinc2	equ	0xFDE
  9723                           postdec2	equ	0xFDD
  9724                           plusw2	equ	0xFDB
  9725                           fsr2h	equ	0xFDA
  9726                           fsr2l	equ	0xFD9
  9727                           status	equ	0xFD8
  9728                           
  9729 ;; *************** function ___llmod *****************
  9730 ;; Defined at:
  9731 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  9732 ;; Parameters:    Size  Location     Type
  9733 ;;  dividend        4   23[COMRAM] unsigned long 
  9734 ;;  divisor         4   27[COMRAM] unsigned long 
  9735 ;; Auto vars:     Size  Location     Type
  9736 ;;  counter         1   31[COMRAM] unsigned char 
  9737 ;; Return value:  Size  Location     Type
  9738 ;;                  4   23[COMRAM] unsigned long 
  9739 ;; Registers used:
  9740 ;;		wreg, status,2, status,0
  9741 ;; Tracked objects:
  9742 ;;		On entry : 0/0
  9743 ;;		On exit  : 0/0
  9744 ;;		Unchanged: 0/0
  9745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9746 ;;      Params:         8       0       0       0       0       0       0
  9747 ;;      Locals:         1       0       0       0       0       0       0
  9748 ;;      Temps:          0       0       0       0       0       0       0
  9749 ;;      Totals:         9       0       0       0       0       0       0
  9750 ;;Total ram usage:        9 bytes
  9751 ;; Hardware stack levels used:    1
  9752 ;; Hardware stack levels required when called:    4
  9753 ;; This function calls:
  9754 ;;		Nothing
  9755 ;; This function is called by:
  9756 ;;		_SetMcuRunTime
  9757 ;;		_GetMcuRunTime
  9758 ;; This function uses a non-reentrant model
  9759 ;;
  9760                           
  9761                           	psect	text49
  9762  0036A4                     __ptext49:
  9763                           	opt stack 0
  9764  0036A4                     ___llmod:
  9765                           	opt stack 23
  9766                           
  9767                           ;incstack = 0
  9768  0036A4  501C               	movf	___llmod@divisor,w,c
  9769  0036A6  101D               	iorwf	___llmod@divisor+1,w,c
  9770  0036A8  101E               	iorwf	___llmod@divisor+2,w,c
  9771  0036AA  101F               	iorwf	___llmod@divisor+3,w,c
  9772  0036AC  B4D8               	btfsc	status,2,c
  9773  0036AE  D024               	goto	l1962
  9774  0036B0  0E01               	movlw	1
  9775  0036B2  6E20               	movwf	___llmod@counter,c
  9776  0036B4  D006               	goto	l1957
  9777  0036B6  90D8               	bcf	status,0,c
  9778  0036B8  361C               	rlcf	___llmod@divisor,f,c
  9779  0036BA  361D               	rlcf	___llmod@divisor+1,f,c
  9780  0036BC  361E               	rlcf	___llmod@divisor+2,f,c
  9781  0036BE  361F               	rlcf	___llmod@divisor+3,f,c
  9782  0036C0  2A20               	incf	___llmod@counter,f,c
  9783  0036C2                     l1957:
  9784  0036C2  AE1F               	btfss	___llmod@divisor+3,7,c
  9785  0036C4  D7F8               	goto	l1958
  9786  0036C6                     u8200:
  9787  0036C6  501C               	movf	___llmod@divisor,w,c
  9788  0036C8  5C18               	subwf	___llmod@dividend,w,c
  9789  0036CA  501D               	movf	___llmod@divisor+1,w,c
  9790  0036CC  5819               	subwfb	___llmod@dividend+1,w,c
  9791  0036CE  501E               	movf	___llmod@divisor+2,w,c
  9792  0036D0  581A               	subwfb	___llmod@dividend+2,w,c
  9793  0036D2  501F               	movf	___llmod@divisor+3,w,c
  9794  0036D4  581B               	subwfb	___llmod@dividend+3,w,c
  9795  0036D6  A0D8               	btfss	status,0,c
  9796  0036D8  D008               	goto	l1961
  9797  0036DA  501C               	movf	___llmod@divisor,w,c
  9798  0036DC  5E18               	subwf	___llmod@dividend,f,c
  9799  0036DE  501D               	movf	___llmod@divisor+1,w,c
  9800  0036E0  5A19               	subwfb	___llmod@dividend+1,f,c
  9801  0036E2  501E               	movf	___llmod@divisor+2,w,c
  9802  0036E4  5A1A               	subwfb	___llmod@dividend+2,f,c
  9803  0036E6  501F               	movf	___llmod@divisor+3,w,c
  9804  0036E8  5A1B               	subwfb	___llmod@dividend+3,f,c
  9805  0036EA                     l1961:
  9806  0036EA  90D8               	bcf	status,0,c
  9807  0036EC  321F               	rrcf	___llmod@divisor+3,f,c
  9808  0036EE  321E               	rrcf	___llmod@divisor+2,f,c
  9809  0036F0  321D               	rrcf	___llmod@divisor+1,f,c
  9810  0036F2  321C               	rrcf	___llmod@divisor,f,c
  9811  0036F4  2E20               	decfsz	___llmod@counter,f,c
  9812  0036F6  D7E7               	goto	u8200
  9813  0036F8                     l1962:
  9814  0036F8  C018  F018         	movff	___llmod@dividend,?___llmod
  9815  0036FC  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
  9816  003700  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
  9817  003704  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
  9818  003708  0012               	return		;funcret
  9819  00370A                     __end_of___llmod:
  9820                           	opt stack 0
  9821                           tosu	equ	0xFFF
  9822                           tosh	equ	0xFFE
  9823                           tosl	equ	0xFFD
  9824                           pclath	equ	0xFFA
  9825                           tblptru	equ	0xFF8
  9826                           tblptrh	equ	0xFF7
  9827                           tblptrl	equ	0xFF6
  9828                           tablat	equ	0xFF5
  9829                           prodh	equ	0xFF4
  9830                           prodl	equ	0xFF3
  9831                           intcon	equ	0xFF2
  9832                           intcon2	equ	0xFF1
  9833                           postinc0	equ	0xFEE
  9834                           plusw0	equ	0xFEB
  9835                           wreg	equ	0xFE8
  9836                           indf1	equ	0xFE7
  9837                           postdec1	equ	0xFE5
  9838                           fsr1h	equ	0xFE2
  9839                           fsr1l	equ	0xFE1
  9840                           indf2	equ	0xFDF
  9841                           postinc2	equ	0xFDE
  9842                           postdec2	equ	0xFDD
  9843                           plusw2	equ	0xFDB
  9844                           fsr2h	equ	0xFDA
  9845                           fsr2l	equ	0xFD9
  9846                           status	equ	0xFD8
  9847                           
  9848 ;; *************** function _SendSystemStartAck *****************
  9849 ;; Defined at:
  9850 ;;		line 153 in file "SystemCommon.c"
  9851 ;; Parameters:    Size  Location     Type
  9852 ;;		None
  9853 ;; Auto vars:     Size  Location     Type
  9854 ;;		None
  9855 ;; Return value:  Size  Location     Type
  9856 ;;                  1    wreg      void 
  9857 ;; Registers used:
  9858 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9859 ;; Tracked objects:
  9860 ;;		On entry : 0/0
  9861 ;;		On exit  : 0/0
  9862 ;;		Unchanged: 0/0
  9863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9864 ;;      Params:         0       0       0       0       0       0       0
  9865 ;;      Locals:         0       0       0       0       0       0       0
  9866 ;;      Temps:          0       0       0       0       0       0       0
  9867 ;;      Totals:         0       0       0       0       0       0       0
  9868 ;;Total ram usage:        0 bytes
  9869 ;; Hardware stack levels used:    1
  9870 ;; Hardware stack levels required when called:    7
  9871 ;; This function calls:
  9872 ;;		_SendAckMessage
  9873 ;; This function is called by:
  9874 ;;		_main
  9875 ;; This function uses a non-reentrant model
  9876 ;;
  9877                           
  9878                           	psect	text50
  9879  00439C                     __ptext50:
  9880                           	opt stack 0
  9881  00439C                     _SendSystemStartAck:
  9882                           	opt stack 23
  9883                           
  9884                           ;SystemCommon.c: 155: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_SYSTE
      +                          M_START);
  9885                           
  9886                           ;incstack = 0
  9887  00439C  0E10               	movlw	16
  9888  00439E  6E24               	movwf	SendAckMessage@inRequest,c
  9889  0043A0  0E01               	movlw	1
  9890  0043A2  EC73  F01D         	call	_SendAckMessage
  9891  0043A6  0012               	return		;funcret
  9892  0043A8                     __end_of_SendSystemStartAck:
  9893                           	opt stack 0
  9894                           tosu	equ	0xFFF
  9895                           tosh	equ	0xFFE
  9896                           tosl	equ	0xFFD
  9897                           pclath	equ	0xFFA
  9898                           tblptru	equ	0xFF8
  9899                           tblptrh	equ	0xFF7
  9900                           tblptrl	equ	0xFF6
  9901                           tablat	equ	0xFF5
  9902                           prodh	equ	0xFF4
  9903                           prodl	equ	0xFF3
  9904                           intcon	equ	0xFF2
  9905                           intcon2	equ	0xFF1
  9906                           postinc0	equ	0xFEE
  9907                           plusw0	equ	0xFEB
  9908                           wreg	equ	0xFE8
  9909                           indf1	equ	0xFE7
  9910                           postdec1	equ	0xFE5
  9911                           fsr1h	equ	0xFE2
  9912                           fsr1l	equ	0xFE1
  9913                           indf2	equ	0xFDF
  9914                           postinc2	equ	0xFDE
  9915                           postdec2	equ	0xFDD
  9916                           plusw2	equ	0xFDB
  9917                           fsr2h	equ	0xFDA
  9918                           fsr2l	equ	0xFD9
  9919                           status	equ	0xFD8
  9920                           
  9921 ;; *************** function _SendAckMessage *****************
  9922 ;; Defined at:
  9923 ;;		line 171 in file "EusartApp.c"
  9924 ;; Parameters:    Size  Location     Type
  9925 ;;  inGroup         1    wreg     enum E7193
  9926 ;;  inRequest       1   35[COMRAM] enum E7201
  9927 ;; Auto vars:     Size  Location     Type
  9928 ;;  inGroup         1   36[COMRAM] enum E7193
  9929 ;;  TxMsg           6   37[COMRAM] unsigned char [6]
  9930 ;; Return value:  Size  Location     Type
  9931 ;;                  1    wreg      void 
  9932 ;; Registers used:
  9933 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9934 ;; Tracked objects:
  9935 ;;		On entry : 0/0
  9936 ;;		On exit  : 0/0
  9937 ;;		Unchanged: 0/0
  9938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9939 ;;      Params:         1       0       0       0       0       0       0
  9940 ;;      Locals:         7       0       0       0       0       0       0
  9941 ;;      Temps:          0       0       0       0       0       0       0
  9942 ;;      Totals:         8       0       0       0       0       0       0
  9943 ;;Total ram usage:        8 bytes
  9944 ;; Hardware stack levels used:    1
  9945 ;; Hardware stack levels required when called:    6
  9946 ;; This function calls:
  9947 ;;		_WriteUartMessage
  9948 ;;		_ZeroArray
  9949 ;;		_crc8
  9950 ;; This function is called by:
  9951 ;;		_testLeds
  9952 ;;		_SetChannelMode
  9953 ;;		_FlashReadUart
  9954 ;;		_FlashEreaseMem
  9955 ;;		_DacSetValue
  9956 ;;		_UpdateSynthFreq
  9957 ;;		_SetSynthOper
  9958 ;;		_ResetMcu
  9959 ;;		_SendSystemStartAck
  9960 ;;		_keepAliveSignalUart
  9961 ;; This function uses a non-reentrant model
  9962 ;;
  9963                           
  9964                           	psect	text51
  9965  003AE6                     __ptext51:
  9966                           	opt stack 0
  9967  003AE6                     _SendAckMessage:
  9968                           	opt stack 21
  9969                           
  9970                           ;incstack = 0
  9971                           ;SendAckMessage@inGroup stored from wreg
  9972  003AE6  6E25               	movwf	SendAckMessage@inGroup,c
  9973                           
  9974                           ;EusartApp.c: 174: char TxMsg[(0x5) + 1];
  9975                           ;EusartApp.c: 175: ZeroArray(TxMsg, (0x5) + 1);
  9976  003AE8  0E26               	movlw	low SendAckMessage@TxMsg
  9977  003AEA  6E20               	movwf	ZeroArray@array,c
  9978  003AEC  0E00               	movlw	high SendAckMessage@TxMsg
  9979  003AEE  6E21               	movwf	ZeroArray@array+1,c
  9980  003AF0  0E00               	movlw	0
  9981  003AF2  6E23               	movwf	ZeroArray@size+1,c
  9982  003AF4  0E06               	movlw	6
  9983  003AF6  6E22               	movwf	ZeroArray@size,c
  9984  003AF8  EC1B  F021         	call	_ZeroArray	;wreg free
  9985                           
  9986                           ;EusartApp.c: 178: TxMsg[(0)] = (0x24);
  9987  003AFC  0E24               	movlw	36
  9988  003AFE  6E26               	movwf	SendAckMessage@TxMsg,c
  9989                           
  9990                           ;EusartApp.c: 179: TxMsg[(1)] = inGroup;
  9991  003B00  C025  F027         	movff	SendAckMessage@inGroup,SendAckMessage@TxMsg+1
  9992                           
  9993                           ;EusartApp.c: 180: TxMsg[(2)] = inRequest;
  9994  003B04  C024  F028         	movff	SendAckMessage@inRequest,SendAckMessage@TxMsg+2
  9995                           
  9996                           ;EusartApp.c: 181: TxMsg[(3)] = 0;
  9997  003B08  0E00               	movlw	0
  9998  003B0A  6E29               	movwf	SendAckMessage@TxMsg+3,c
  9999                           
 10000                           ;EusartApp.c: 183: TxMsg[(0x5)] = crc8(TxMsg, (0x5));
 10001  003B0C  0E26               	movlw	low SendAckMessage@TxMsg
 10002  003B0E  6E18               	movwf	crc8@dataArray,c
 10003  003B10  0E00               	movlw	high SendAckMessage@TxMsg
 10004  003B12  6E19               	movwf	crc8@dataArray+1,c
 10005  003B14  0E00               	movlw	0
 10006  003B16  6E1B               	movwf	crc8@dataSize+1,c
 10007  003B18  0E05               	movlw	5
 10008  003B1A  6E1A               	movwf	crc8@dataSize,c
 10009  003B1C  EC9C  F01D         	call	_crc8	;wreg free
 10010  003B20  6E2B               	movwf	SendAckMessage@TxMsg+5,c
 10011                           
 10012                           ;EusartApp.c: 185: WriteUartMessage(TxMsg, (0x5) + 1);
 10013  003B22  0E26               	movlw	low SendAckMessage@TxMsg
 10014  003B24  6E19               	movwf	WriteUartMessage@dataBuf,c
 10015  003B26  0E00               	movlw	high SendAckMessage@TxMsg
 10016  003B28  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
 10017  003B2A  0E00               	movlw	0
 10018  003B2C  6E1C               	movwf	WriteUartMessage@dataSize+1,c
 10019  003B2E  0E06               	movlw	6
 10020  003B30  6E1B               	movwf	WriteUartMessage@dataSize,c
 10021  003B32  EC4E  F01F         	call	_WriteUartMessage	;wreg free
 10022  003B36  0012               	return		;funcret
 10023  003B38                     __end_of_SendAckMessage:
 10024                           	opt stack 0
 10025                           tosu	equ	0xFFF
 10026                           tosh	equ	0xFFE
 10027                           tosl	equ	0xFFD
 10028                           pclath	equ	0xFFA
 10029                           tblptru	equ	0xFF8
 10030                           tblptrh	equ	0xFF7
 10031                           tblptrl	equ	0xFF6
 10032                           tablat	equ	0xFF5
 10033                           prodh	equ	0xFF4
 10034                           prodl	equ	0xFF3
 10035                           intcon	equ	0xFF2
 10036                           intcon2	equ	0xFF1
 10037                           postinc0	equ	0xFEE
 10038                           plusw0	equ	0xFEB
 10039                           wreg	equ	0xFE8
 10040                           indf1	equ	0xFE7
 10041                           postdec1	equ	0xFE5
 10042                           fsr1h	equ	0xFE2
 10043                           fsr1l	equ	0xFE1
 10044                           indf2	equ	0xFDF
 10045                           postinc2	equ	0xFDE
 10046                           postdec2	equ	0xFDD
 10047                           plusw2	equ	0xFDB
 10048                           fsr2h	equ	0xFDA
 10049                           fsr2l	equ	0xFD9
 10050                           status	equ	0xFD8
 10051                           
 10052 ;; *************** function _crc8 *****************
 10053 ;; Defined at:
 10054 ;;		line 13 in file "SystemCommon.c"
 10055 ;; Parameters:    Size  Location     Type
 10056 ;;  dataArray       2   23[COMRAM] PTR unsigned char 
 10057 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(18), SynthReadData@TxMsg(29), DacReadValue@TxMsg(7), 
 10058 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
 10059 ;;  dataSize        2   25[COMRAM] int 
 10060 ;; Auto vars:     Size  Location     Type
 10061 ;;  i               2   30[COMRAM] int 
 10062 ;;  crc             2   28[COMRAM] int 
 10063 ;; Return value:  Size  Location     Type
 10064 ;;                  1    wreg      unsigned char 
 10065 ;; Registers used:
 10066 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10067 ;; Tracked objects:
 10068 ;;		On entry : 0/0
 10069 ;;		On exit  : 0/0
 10070 ;;		Unchanged: 0/0
 10071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10072 ;;      Params:         4       0       0       0       0       0       0
 10073 ;;      Locals:         4       0       0       0       0       0       0
 10074 ;;      Temps:          1       0       0       0       0       0       0
 10075 ;;      Totals:         9       0       0       0       0       0       0
 10076 ;;Total ram usage:        9 bytes
 10077 ;; Hardware stack levels used:    1
 10078 ;; Hardware stack levels required when called:    4
 10079 ;; This function calls:
 10080 ;;		Nothing
 10081 ;; This function is called by:
 10082 ;;		_readUartMessage
 10083 ;;		_SendAckMessage
 10084 ;;		_FlashReadUart
 10085 ;;		_FlashReadCondition
 10086 ;;		_DacReadValue
 10087 ;;		_SynthReadData
 10088 ;;		_GetMcuFwVersion
 10089 ;;		_GetMcuRunTime
 10090 ;; This function uses a non-reentrant model
 10091 ;;
 10092                           
 10093                           	psect	text52
 10094  003B38                     __ptext52:
 10095                           	opt stack 0
 10096  003B38                     _crc8:
 10097                           	opt stack 25
 10098                           
 10099                           ;SystemCommon.c: 15: int crc = 0;
 10100                           
 10101                           ;incstack = 0
 10102  003B38  0E00               	movlw	0
 10103  003B3A  6E1E               	movwf	crc8@crc+1,c
 10104  003B3C  0E00               	movlw	0
 10105  003B3E  6E1D               	movwf	crc8@crc,c
 10106                           
 10107                           ;SystemCommon.c: 16: for (int i = 0; i < dataSize; i++)
 10108  003B40  0E00               	movlw	0
 10109  003B42  6E20               	movwf	crc8@i+1,c
 10110  003B44  0E00               	movlw	0
 10111  003B46  6E1F               	movwf	crc8@i,c
 10112  003B48  D00E               	goto	l1389
 10113  003B4A                     
 10114                           ;SystemCommon.c: 17: {
 10115                           ;SystemCommon.c: 18: crc += dataArray[i];
 10116  003B4A  501F               	movf	crc8@i,w,c
 10117  003B4C  2418               	addwf	crc8@dataArray,w,c
 10118  003B4E  6ED9               	movwf	fsr2l,c
 10119  003B50  5020               	movf	crc8@i+1,w,c
 10120  003B52  2019               	addwfc	crc8@dataArray+1,w,c
 10121  003B54  6EDA               	movwf	fsr2h,c
 10122  003B56  50DF               	movf	indf2,w,c
 10123  003B58  6E1C               	movwf	??_crc8& (0+255),c
 10124  003B5A  501C               	movf	??_crc8,w,c
 10125  003B5C  261D               	addwf	crc8@crc,f,c
 10126  003B5E  0E00               	movlw	0
 10127  003B60  221E               	addwfc	crc8@crc+1,f,c
 10128  003B62  4A1F               	infsnz	crc8@i,f,c
 10129  003B64  2A20               	incf	crc8@i+1,f,c
 10130  003B66                     l1389:
 10131  003B66  501A               	movf	crc8@dataSize,w,c
 10132  003B68  5C1F               	subwf	crc8@i,w,c
 10133  003B6A  5020               	movf	crc8@i+1,w,c
 10134  003B6C  0A80               	xorlw	128
 10135  003B6E  6E1C               	movwf	??_crc8& (0+255),c
 10136  003B70  501B               	movf	crc8@dataSize+1,w,c
 10137  003B72  0A80               	xorlw	128
 10138  003B74  581C               	subwfb	??_crc8& (0+255),w,c
 10139  003B76  A0D8               	btfss	status,0,c
 10140  003B78  D7E8               	goto	l1390
 10141                           
 10142                           ;SystemCommon.c: 19: }
 10143                           ;SystemCommon.c: 20: crc &= 0xff;
 10144  003B7A  0EFF               	movlw	255
 10145  003B7C  161D               	andwf	crc8@crc,f,c
 10146  003B7E  0E00               	movlw	0
 10147  003B80  161E               	andwf	crc8@crc+1,f,c
 10148                           
 10149                           ;SystemCommon.c: 21: return crc;
 10150  003B82  501D               	movf	crc8@crc,w,c
 10151  003B84  0012               	return	
 10152  003B86                     __end_of_crc8:
 10153                           	opt stack 0
 10154                           tosu	equ	0xFFF
 10155                           tosh	equ	0xFFE
 10156                           tosl	equ	0xFFD
 10157                           pclath	equ	0xFFA
 10158                           tblptru	equ	0xFF8
 10159                           tblptrh	equ	0xFF7
 10160                           tblptrl	equ	0xFF6
 10161                           tablat	equ	0xFF5
 10162                           prodh	equ	0xFF4
 10163                           prodl	equ	0xFF3
 10164                           intcon	equ	0xFF2
 10165                           intcon2	equ	0xFF1
 10166                           postinc0	equ	0xFEE
 10167                           plusw0	equ	0xFEB
 10168                           wreg	equ	0xFE8
 10169                           indf1	equ	0xFE7
 10170                           postdec1	equ	0xFE5
 10171                           fsr1h	equ	0xFE2
 10172                           fsr1l	equ	0xFE1
 10173                           indf2	equ	0xFDF
 10174                           postinc2	equ	0xFDE
 10175                           postdec2	equ	0xFDD
 10176                           plusw2	equ	0xFDB
 10177                           fsr2h	equ	0xFDA
 10178                           fsr2l	equ	0xFD9
 10179                           status	equ	0xFD8
 10180                           
 10181 ;; *************** function _ZeroArray *****************
 10182 ;; Defined at:
 10183 ;;		line 24 in file "SystemCommon.c"
 10184 ;; Parameters:    Size  Location     Type
 10185 ;;  array           2   31[COMRAM] PTR unsigned char 
 10186 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SynthReadData@TxMsg(29), SynthReadData@eepromDataA
      +rray(20), 
 10187 ;;		 -> DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), 
 10188 ;;		 -> SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 10189 ;;  size            2   33[COMRAM] int 
 10190 ;; Auto vars:     Size  Location     Type
 10191 ;;		None
 10192 ;; Return value:  Size  Location     Type
 10193 ;;                  1    wreg      void 
 10194 ;; Registers used:
 10195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10196 ;; Tracked objects:
 10197 ;;		On entry : 0/0
 10198 ;;		On exit  : 0/0
 10199 ;;		Unchanged: 0/0
 10200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10201 ;;      Params:         4       0       0       0       0       0       0
 10202 ;;      Locals:         0       0       0       0       0       0       0
 10203 ;;      Temps:          0       0       0       0       0       0       0
 10204 ;;      Totals:         4       0       0       0       0       0       0
 10205 ;;Total ram usage:        4 bytes
 10206 ;; Hardware stack levels used:    1
 10207 ;; Hardware stack levels required when called:    5
 10208 ;; This function calls:
 10209 ;;		_memset
 10210 ;; This function is called by:
 10211 ;;		_readUartMessage
 10212 ;;		_InitRxMessageParams
 10213 ;;		_SendAckMessage
 10214 ;;		_FlashReadUart
 10215 ;;		_FlashEreaseMem
 10216 ;;		_FlashReadCondition
 10217 ;;		_DacReadValue
 10218 ;;		_SynthReadData
 10219 ;;		_GetIntFromUartData
 10220 ;;		_GetMcuFwVersion
 10221 ;; This function uses a non-reentrant model
 10222 ;;
 10223                           
 10224                           	psect	text53
 10225  004236                     __ptext53:
 10226                           	opt stack 0
 10227  004236                     _ZeroArray:
 10228                           	opt stack 24
 10229                           
 10230                           ;SystemCommon.c: 26: memset(array, 0x0, size);
 10231                           
 10232                           ;incstack = 0
 10233  004236  C020  F018         	movff	ZeroArray@array,memset@p1
 10234  00423A  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
 10235  00423E  0E00               	movlw	0
 10236  004240  6E1B               	movwf	memset@c+1,c
 10237  004242  0E00               	movlw	0
 10238  004244  6E1A               	movwf	memset@c,c
 10239  004246  C022  F01C         	movff	ZeroArray@size,memset@n
 10240  00424A  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
 10241  00424E  EC31  F020         	call	_memset	;wreg free
 10242  004252  0012               	return		;funcret
 10243  004254                     __end_of_ZeroArray:
 10244                           	opt stack 0
 10245                           tosu	equ	0xFFF
 10246                           tosh	equ	0xFFE
 10247                           tosl	equ	0xFFD
 10248                           pclath	equ	0xFFA
 10249                           tblptru	equ	0xFF8
 10250                           tblptrh	equ	0xFF7
 10251                           tblptrl	equ	0xFF6
 10252                           tablat	equ	0xFF5
 10253                           prodh	equ	0xFF4
 10254                           prodl	equ	0xFF3
 10255                           intcon	equ	0xFF2
 10256                           intcon2	equ	0xFF1
 10257                           postinc0	equ	0xFEE
 10258                           plusw0	equ	0xFEB
 10259                           wreg	equ	0xFE8
 10260                           indf1	equ	0xFE7
 10261                           postdec1	equ	0xFE5
 10262                           fsr1h	equ	0xFE2
 10263                           fsr1l	equ	0xFE1
 10264                           indf2	equ	0xFDF
 10265                           postinc2	equ	0xFDE
 10266                           postdec2	equ	0xFDD
 10267                           plusw2	equ	0xFDB
 10268                           fsr2h	equ	0xFDA
 10269                           fsr2l	equ	0xFD9
 10270                           status	equ	0xFD8
 10271                           
 10272 ;; *************** function _WriteUartMessage *****************
 10273 ;; Defined at:
 10274 ;;		line 158 in file "EusartApp.c"
 10275 ;; Parameters:    Size  Location     Type
 10276 ;;  dataBuf         2   24[COMRAM] PTR unsigned char 
 10277 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(18), SynthReadData@TxMsg(29), DacReadValue@TxMsg(7), 
 10278 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), 
 10279 ;;  dataSize        2   26[COMRAM] int 
 10280 ;; Auto vars:     Size  Location     Type
 10281 ;;  idx             2   29[COMRAM] int 
 10282 ;; Return value:  Size  Location     Type
 10283 ;;                  1    wreg      void 
 10284 ;; Registers used:
 10285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10286 ;; Tracked objects:
 10287 ;;		On entry : 0/0
 10288 ;;		On exit  : 0/0
 10289 ;;		Unchanged: 0/0
 10290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10291 ;;      Params:         4       0       0       0       0       0       0
 10292 ;;      Locals:         2       0       0       0       0       0       0
 10293 ;;      Temps:          1       0       0       0       0       0       0
 10294 ;;      Totals:         7       0       0       0       0       0       0
 10295 ;;Total ram usage:        7 bytes
 10296 ;; Hardware stack levels used:    1
 10297 ;; Hardware stack levels required when called:    5
 10298 ;; This function calls:
 10299 ;;		_EUSART1_Write
 10300 ;; This function is called by:
 10301 ;;		_SendAckMessage
 10302 ;;		_FlashReadUart
 10303 ;;		_FlashReadCondition
 10304 ;;		_DacReadValue
 10305 ;;		_SynthReadData
 10306 ;;		_GetMcuFwVersion
 10307 ;;		_GetMcuRunTime
 10308 ;; This function uses a non-reentrant model
 10309 ;;
 10310                           
 10311                           	psect	text54
 10312  003E9C                     __ptext54:
 10313                           	opt stack 0
 10314  003E9C                     _WriteUartMessage:
 10315                           	opt stack 21
 10316                           
 10317                           ;EusartApp.c: 160: for(int idx = 0; idx < dataSize; idx++)
 10318                           
 10319                           ;incstack = 0
 10320  003E9C  0E00               	movlw	0
 10321  003E9E  6E1F               	movwf	WriteUartMessage@idx+1,c
 10322  003EA0  0E00               	movlw	0
 10323  003EA2  6E1E               	movwf	WriteUartMessage@idx,c
 10324  003EA4  D00B               	goto	l234
 10325  003EA6                     
 10326                           ;EusartApp.c: 161: {
 10327                           ;EusartApp.c: 162: EUSART1_Write(dataBuf[idx]);
 10328  003EA6  501E               	movf	WriteUartMessage@idx,w,c
 10329  003EA8  2419               	addwf	WriteUartMessage@dataBuf,w,c
 10330  003EAA  6ED9               	movwf	fsr2l,c
 10331  003EAC  501F               	movf	WriteUartMessage@idx+1,w,c
 10332  003EAE  201A               	addwfc	WriteUartMessage@dataBuf+1,w,c
 10333  003EB0  6EDA               	movwf	fsr2h,c
 10334  003EB2  50DF               	movf	indf2,w,c
 10335  003EB4  EC68  F01E         	call	_EUSART1_Write
 10336  003EB8  4A1E               	infsnz	WriteUartMessage@idx,f,c
 10337  003EBA  2A1F               	incf	WriteUartMessage@idx+1,f,c
 10338  003EBC                     l234:
 10339  003EBC  501B               	movf	WriteUartMessage@dataSize,w,c
 10340  003EBE  5C1E               	subwf	WriteUartMessage@idx,w,c
 10341  003EC0  501F               	movf	WriteUartMessage@idx+1,w,c
 10342  003EC2  0A80               	xorlw	128
 10343  003EC4  6E1D               	movwf	??_WriteUartMessage& (0+255),c
 10344  003EC6  501C               	movf	WriteUartMessage@dataSize+1,w,c
 10345  003EC8  0A80               	xorlw	128
 10346  003ECA  581D               	subwfb	??_WriteUartMessage& (0+255),w,c
 10347  003ECC  B0D8               	btfsc	status,0,c
 10348  003ECE  0012               	return	
 10349  003ED0  D7EA               	goto	l235
 10350  003ED2                     __end_of_WriteUartMessage:
 10351                           	opt stack 0
 10352                           tosu	equ	0xFFF
 10353                           tosh	equ	0xFFE
 10354                           tosl	equ	0xFFD
 10355                           pclath	equ	0xFFA
 10356                           tblptru	equ	0xFF8
 10357                           tblptrh	equ	0xFF7
 10358                           tblptrl	equ	0xFF6
 10359                           tablat	equ	0xFF5
 10360                           prodh	equ	0xFF4
 10361                           prodl	equ	0xFF3
 10362                           intcon	equ	0xFF2
 10363                           intcon2	equ	0xFF1
 10364                           postinc0	equ	0xFEE
 10365                           plusw0	equ	0xFEB
 10366                           wreg	equ	0xFE8
 10367                           indf1	equ	0xFE7
 10368                           postdec1	equ	0xFE5
 10369                           fsr1h	equ	0xFE2
 10370                           fsr1l	equ	0xFE1
 10371                           indf2	equ	0xFDF
 10372                           postinc2	equ	0xFDE
 10373                           postdec2	equ	0xFDD
 10374                           plusw2	equ	0xFDB
 10375                           fsr2h	equ	0xFDA
 10376                           fsr2l	equ	0xFD9
 10377                           status	equ	0xFD8
 10378                           
 10379 ;; *************** function _EUSART1_Write *****************
 10380 ;; Defined at:
 10381 ;;		line 157 in file "mcc_generated_files/eusart1.c"
 10382 ;; Parameters:    Size  Location     Type
 10383 ;;  txData          1    wreg     unsigned char 
 10384 ;; Auto vars:     Size  Location     Type
 10385 ;;  txData          1   23[COMRAM] unsigned char 
 10386 ;; Return value:  Size  Location     Type
 10387 ;;                  1    wreg      void 
 10388 ;; Registers used:
 10389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10390 ;; Tracked objects:
 10391 ;;		On entry : 0/0
 10392 ;;		On exit  : 0/0
 10393 ;;		Unchanged: 0/0
 10394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10395 ;;      Params:         0       0       0       0       0       0       0
 10396 ;;      Locals:         1       0       0       0       0       0       0
 10397 ;;      Temps:          0       0       0       0       0       0       0
 10398 ;;      Totals:         1       0       0       0       0       0       0
 10399 ;;Total ram usage:        1 bytes
 10400 ;; Hardware stack levels used:    1
 10401 ;; Hardware stack levels required when called:    4
 10402 ;; This function calls:
 10403 ;;		Nothing
 10404 ;; This function is called by:
 10405 ;;		_WriteUartMessage
 10406 ;; This function uses a non-reentrant model
 10407 ;;
 10408                           
 10409                           	psect	text55
 10410  003CD0                     __ptext55:
 10411                           	opt stack 0
 10412  003CD0                     _EUSART1_Write:
 10413                           	opt stack 21
 10414                           
 10415                           ;incstack = 0
 10416                           ;EUSART1_Write@txData stored from wreg
 10417  003CD0  6E18               	movwf	EUSART1_Write@txData,c
 10418  003CD2                     
 10419                           ;eusart1.c: 160: {
 10420                           
 10421                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
 10422  003CD2  0101               	movlb	1	; () banked
 10423  003CD4  51D2               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 10424  003CD6  B4D8               	btfsc	status,2,c
 10425  003CD8  D7FC               	goto	l7635
 10426                           
 10427                           ; BSR set to: 1
 10428                           ;eusart1.c: 161: }
 10429                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
 10430  003CDA  B89D               	btfsc	3997,4,c	;volatile
 10431  003CDC  D003               	goto	l908
 10432                           
 10433                           ; BSR set to: 1
 10434                           ;eusart1.c: 164: {
 10435                           ;eusart1.c: 165: TXREG1 = txData;
 10436  003CDE  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 10437                           
 10438                           ;eusart1.c: 166: }
 10439  003CE2  D012               	goto	l909
 10440  003CE4                     l908:
 10441                           
 10442                           ; BSR set to: 1
 10443                           ;eusart1.c: 167: else
 10444                           ;eusart1.c: 168: {
 10445                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
 10446  003CE4  989D               	bcf	3997,4,c	;volatile
 10447                           
 10448                           ; BSR set to: 1
 10449                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
 10450  003CE6  5036               	movf	_eusart1TxHead,w,c	;volatile
 10451  003CE8  0D01               	mullw	1
 10452  003CEA  0E00               	movlw	low _eusart1TxBuffer
 10453  003CEC  24F3               	addwf	prodl,w,c
 10454  003CEE  6ED9               	movwf	fsr2l,c
 10455  003CF0  0E02               	movlw	high _eusart1TxBuffer
 10456  003CF2  20F4               	addwfc	prodh,w,c
 10457  003CF4  6EDA               	movwf	fsr2h,c
 10458  003CF6  C018  FFDF         	movff	EUSART1_Write@txData,indf2
 10459                           
 10460                           ; BSR set to: 1
 10461  003CFA  2A36               	incf	_eusart1TxHead,f,c	;volatile
 10462                           
 10463                           ; BSR set to: 1
 10464                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 10465  003CFC  0E45               	movlw	69
 10466  003CFE  6436               	cpfsgt	_eusart1TxHead,c	;volatile
 10467  003D00  D002               	goto	l910
 10468                           
 10469                           ; BSR set to: 1
 10470                           ;eusart1.c: 172: {
 10471                           ;eusart1.c: 173: eusart1TxHead = 0;
 10472  003D02  0E00               	movlw	0
 10473  003D04  6E36               	movwf	_eusart1TxHead,c	;volatile
 10474  003D06                     l910:
 10475                           
 10476                           ; BSR set to: 1
 10477                           ;eusart1.c: 174: }
 10478                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
 10479                           
 10480                           ; BSR set to: 1
 10481  003D06  07D2               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 10482  003D08                     l909:
 10483                           
 10484                           ; BSR set to: 1
 10485                           ;eusart1.c: 176: }
 10486                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
 10487                           
 10488                           ; BSR set to: 1
 10489  003D08  889D               	bsf	3997,4,c	;volatile
 10490                           
 10491                           ; BSR set to: 1
 10492  003D0A  0012               	return		;funcret
 10493  003D0C                     __end_of_EUSART1_Write:
 10494                           	opt stack 0
 10495                           tosu	equ	0xFFF
 10496                           tosh	equ	0xFFE
 10497                           tosl	equ	0xFFD
 10498                           pclath	equ	0xFFA
 10499                           tblptru	equ	0xFF8
 10500                           tblptrh	equ	0xFF7
 10501                           tblptrl	equ	0xFF6
 10502                           tablat	equ	0xFF5
 10503                           prodh	equ	0xFF4
 10504                           prodl	equ	0xFF3
 10505                           intcon	equ	0xFF2
 10506                           intcon2	equ	0xFF1
 10507                           postinc0	equ	0xFEE
 10508                           plusw0	equ	0xFEB
 10509                           wreg	equ	0xFE8
 10510                           indf1	equ	0xFE7
 10511                           postdec1	equ	0xFE5
 10512                           fsr1h	equ	0xFE2
 10513                           fsr1l	equ	0xFE1
 10514                           indf2	equ	0xFDF
 10515                           postinc2	equ	0xFDE
 10516                           postdec2	equ	0xFDD
 10517                           plusw2	equ	0xFDB
 10518                           fsr2h	equ	0xFDA
 10519                           fsr2l	equ	0xFD9
 10520                           status	equ	0xFD8
 10521                           
 10522 ;; *************** function _InitSystemApplicationManagers *****************
 10523 ;; Defined at:
 10524 ;;		line 33 in file "SystemSettings.c"
 10525 ;; Parameters:    Size  Location     Type
 10526 ;;		None
 10527 ;; Auto vars:     Size  Location     Type
 10528 ;;		None
 10529 ;; Return value:  Size  Location     Type
 10530 ;;                  1    wreg      void 
 10531 ;; Registers used:
 10532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10533 ;; Tracked objects:
 10534 ;;		On entry : 0/0
 10535 ;;		On exit  : 0/0
 10536 ;;		Unchanged: 0/0
 10537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10538 ;;      Params:         0       0       0       0       0       0       0
 10539 ;;      Locals:         0       0       0       0       0       0       0
 10540 ;;      Temps:          0       0       0       0       0       0       0
 10541 ;;      Totals:         0       0       0       0       0       0       0
 10542 ;;Total ram usage:        0 bytes
 10543 ;; Hardware stack levels used:    1
 10544 ;; Hardware stack levels required when called:   12
 10545 ;; This function calls:
 10546 ;;		_ClearMcuRunTime
 10547 ;;		_DacInit
 10548 ;;		_InitAdcApplicationMgr
 10549 ;;		_PLLInitialize
 10550 ;;		_TMR0_StartTimer
 10551 ;; This function is called by:
 10552 ;;		_main
 10553 ;; This function uses a non-reentrant model
 10554 ;;
 10555                           
 10556                           	psect	text56
 10557  0042D4                     __ptext56:
 10558                           	opt stack 0
 10559  0042D4                     _InitSystemApplicationManagers:
 10560                           	opt stack 18
 10561                           
 10562                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
 10563                           
 10564                           ; BSR set to: 1
 10565                           ;incstack = 0
 10566  0042D4  ECF1  F021         	call	_InitAdcApplicationMgr	;wreg free
 10567                           
 10568                           ;SystemSettings.c: 39: TMR0_StartTimer();
 10569  0042D8  ECF6  F021         	call	_TMR0_StartTimer	;wreg free
 10570                           
 10571                           ;SystemSettings.c: 42: PLLInitialize();
 10572  0042DC  EC49  F01E         	call	_PLLInitialize	;wreg free
 10573                           
 10574                           ;SystemSettings.c: 45: ClearMcuRunTime();
 10575  0042E0  EC89  F021         	call	_ClearMcuRunTime	;wreg free
 10576                           
 10577                           ;SystemSettings.c: 48: DacInit();
 10578  0042E4  EC1D  F014         	call	_DacInit	;wreg free
 10579  0042E8  0012               	return		;funcret
 10580  0042EA                     __end_of_InitSystemApplicationManagers:
 10581                           	opt stack 0
 10582                           tosu	equ	0xFFF
 10583                           tosh	equ	0xFFE
 10584                           tosl	equ	0xFFD
 10585                           pclath	equ	0xFFA
 10586                           tblptru	equ	0xFF8
 10587                           tblptrh	equ	0xFF7
 10588                           tblptrl	equ	0xFF6
 10589                           tablat	equ	0xFF5
 10590                           prodh	equ	0xFF4
 10591                           prodl	equ	0xFF3
 10592                           intcon	equ	0xFF2
 10593                           intcon2	equ	0xFF1
 10594                           postinc0	equ	0xFEE
 10595                           plusw0	equ	0xFEB
 10596                           wreg	equ	0xFE8
 10597                           indf1	equ	0xFE7
 10598                           postdec1	equ	0xFE5
 10599                           fsr1h	equ	0xFE2
 10600                           fsr1l	equ	0xFE1
 10601                           indf2	equ	0xFDF
 10602                           postinc2	equ	0xFDE
 10603                           postdec2	equ	0xFDD
 10604                           plusw2	equ	0xFDB
 10605                           fsr2h	equ	0xFDA
 10606                           fsr2l	equ	0xFD9
 10607                           status	equ	0xFD8
 10608                           
 10609 ;; *************** function _TMR0_StartTimer *****************
 10610 ;; Defined at:
 10611 ;;		line 93 in file "mcc_generated_files/tmr0.c"
 10612 ;; Parameters:    Size  Location     Type
 10613 ;;		None
 10614 ;; Auto vars:     Size  Location     Type
 10615 ;;		None
 10616 ;; Return value:  Size  Location     Type
 10617 ;;                  1    wreg      void 
 10618 ;; Registers used:
 10619 ;;		None
 10620 ;; Tracked objects:
 10621 ;;		On entry : 0/0
 10622 ;;		On exit  : 0/0
 10623 ;;		Unchanged: 0/0
 10624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10625 ;;      Params:         0       0       0       0       0       0       0
 10626 ;;      Locals:         0       0       0       0       0       0       0
 10627 ;;      Temps:          0       0       0       0       0       0       0
 10628 ;;      Totals:         0       0       0       0       0       0       0
 10629 ;;Total ram usage:        0 bytes
 10630 ;; Hardware stack levels used:    1
 10631 ;; Hardware stack levels required when called:    4
 10632 ;; This function calls:
 10633 ;;		Nothing
 10634 ;; This function is called by:
 10635 ;;		_InitSystemApplicationManagers
 10636 ;; This function uses a non-reentrant model
 10637 ;;
 10638                           
 10639                           	psect	text57
 10640  0043EC                     __ptext57:
 10641                           	opt stack 0
 10642  0043EC                     _TMR0_StartTimer:
 10643                           	opt stack 25
 10644                           
 10645                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
 10646                           
 10647                           ;incstack = 0
 10648  0043EC  8ED5               	bsf	4053,7,c	;volatile
 10649  0043EE  0012               	return		;funcret
 10650  0043F0                     __end_of_TMR0_StartTimer:
 10651                           	opt stack 0
 10652                           tosu	equ	0xFFF
 10653                           tosh	equ	0xFFE
 10654                           tosl	equ	0xFFD
 10655                           pclath	equ	0xFFA
 10656                           tblptru	equ	0xFF8
 10657                           tblptrh	equ	0xFF7
 10658                           tblptrl	equ	0xFF6
 10659                           tablat	equ	0xFF5
 10660                           prodh	equ	0xFF4
 10661                           prodl	equ	0xFF3
 10662                           intcon	equ	0xFF2
 10663                           intcon2	equ	0xFF1
 10664                           postinc0	equ	0xFEE
 10665                           plusw0	equ	0xFEB
 10666                           wreg	equ	0xFE8
 10667                           indf1	equ	0xFE7
 10668                           postdec1	equ	0xFE5
 10669                           fsr1h	equ	0xFE2
 10670                           fsr1l	equ	0xFE1
 10671                           indf2	equ	0xFDF
 10672                           postinc2	equ	0xFDE
 10673                           postdec2	equ	0xFDD
 10674                           plusw2	equ	0xFDB
 10675                           fsr2h	equ	0xFDA
 10676                           fsr2l	equ	0xFD9
 10677                           status	equ	0xFD8
 10678                           
 10679 ;; *************** function _PLLInitialize *****************
 10680 ;; Defined at:
 10681 ;;		line 29 in file "SyntApp.c"
 10682 ;; Parameters:    Size  Location     Type
 10683 ;;		None
 10684 ;; Auto vars:     Size  Location     Type
 10685 ;;		None
 10686 ;; Return value:  Size  Location     Type
 10687 ;;                  1    wreg      void 
 10688 ;; Registers used:
 10689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10690 ;; Tracked objects:
 10691 ;;		On entry : 0/0
 10692 ;;		On exit  : 0/0
 10693 ;;		Unchanged: 0/0
 10694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10695 ;;      Params:         0       0       0       0       0       0       0
 10696 ;;      Locals:         0       0       0       0       0       0       0
 10697 ;;      Temps:          0       0       0       0       0       0       0
 10698 ;;      Totals:         0       0       0       0       0       0       0
 10699 ;;Total ram usage:        0 bytes
 10700 ;; Hardware stack levels used:    1
 10701 ;; Hardware stack levels required when called:   11
 10702 ;; This function calls:
 10703 ;;		_FillArray
 10704 ;;		_InitSynth
 10705 ;; This function is called by:
 10706 ;;		_InitSystemApplicationManagers
 10707 ;; This function uses a non-reentrant model
 10708 ;;
 10709                           
 10710                           	psect	text58
 10711  003C92                     __ptext58:
 10712                           	opt stack 0
 10713  003C92                     _PLLInitialize:
 10714                           	opt stack 18
 10715                           
 10716                           ;SyntApp.c: 31: InitSynth(SYNTH_TX);
 10717                           
 10718                           ;incstack = 0
 10719  003C92  0E00               	movlw	0
 10720  003C94  ECA6  F006         	call	_InitSynth
 10721                           
 10722                           ;SyntApp.c: 32: InitSynth(SYNTH_RX);
 10723  003C98  0E01               	movlw	1
 10724  003C9A  ECA6  F006         	call	_InitSynth
 10725                           
 10726                           ;SyntApp.c: 35: FillArray(synthLdRxArray, sizeof(synthLdRxArray), 0x0);
 10727  003C9E  0EB0               	movlw	low _synthLdRxArray
 10728  003CA0  6E20               	movwf	FillArray@array,c
 10729  003CA2  0E01               	movlw	high _synthLdRxArray
 10730  003CA4  6E21               	movwf	FillArray@array+1,c
 10731  003CA6  0E00               	movlw	0
 10732  003CA8  6E23               	movwf	FillArray@size+1,c
 10733  003CAA  0E0C               	movlw	12
 10734  003CAC  6E22               	movwf	FillArray@size,c
 10735  003CAE  0E00               	movlw	0
 10736  003CB0  6E24               	movwf	FillArray@value,c
 10737  003CB2  EC38  F021         	call	_FillArray	;wreg free
 10738                           
 10739                           ;SyntApp.c: 36: FillArray(synthLdTxArray, sizeof(synthLdTxArray), 0x0);
 10740  003CB6  0EA4               	movlw	low _synthLdTxArray
 10741  003CB8  6E20               	movwf	FillArray@array,c
 10742  003CBA  0E01               	movlw	high _synthLdTxArray
 10743  003CBC  6E21               	movwf	FillArray@array+1,c
 10744  003CBE  0E00               	movlw	0
 10745  003CC0  6E23               	movwf	FillArray@size+1,c
 10746  003CC2  0E0C               	movlw	12
 10747  003CC4  6E22               	movwf	FillArray@size,c
 10748  003CC6  0E00               	movlw	0
 10749  003CC8  6E24               	movwf	FillArray@value,c
 10750  003CCA  EC38  F021         	call	_FillArray	;wreg free
 10751  003CCE  0012               	return		;funcret
 10752  003CD0                     __end_of_PLLInitialize:
 10753                           	opt stack 0
 10754                           tosu	equ	0xFFF
 10755                           tosh	equ	0xFFE
 10756                           tosl	equ	0xFFD
 10757                           pclath	equ	0xFFA
 10758                           tblptru	equ	0xFF8
 10759                           tblptrh	equ	0xFF7
 10760                           tblptrl	equ	0xFF6
 10761                           tablat	equ	0xFF5
 10762                           prodh	equ	0xFF4
 10763                           prodl	equ	0xFF3
 10764                           intcon	equ	0xFF2
 10765                           intcon2	equ	0xFF1
 10766                           postinc0	equ	0xFEE
 10767                           plusw0	equ	0xFEB
 10768                           wreg	equ	0xFE8
 10769                           indf1	equ	0xFE7
 10770                           postdec1	equ	0xFE5
 10771                           fsr1h	equ	0xFE2
 10772                           fsr1l	equ	0xFE1
 10773                           indf2	equ	0xFDF
 10774                           postinc2	equ	0xFDE
 10775                           postdec2	equ	0xFDD
 10776                           plusw2	equ	0xFDB
 10777                           fsr2h	equ	0xFDA
 10778                           fsr2l	equ	0xFD9
 10779                           status	equ	0xFD8
 10780                           
 10781 ;; *************** function _InitSynth *****************
 10782 ;; Defined at:
 10783 ;;		line 39 in file "SyntApp.c"
 10784 ;; Parameters:    Size  Location     Type
 10785 ;;  cType           1    wreg     enum E1
 10786 ;; Auto vars:     Size  Location     Type
 10787 ;;  cType           1  108[BANK0 ] enum E1
 10788 ;;  idx             1  109[BANK0 ] unsigned char 
 10789 ;;  EepromVal       4  104[BANK0 ] unsigned long 
 10790 ;;  regNum          1  110[BANK0 ] unsigned char 
 10791 ;; Return value:  Size  Location     Type
 10792 ;;                  1    wreg      void 
 10793 ;; Registers used:
 10794 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10795 ;; Tracked objects:
 10796 ;;		On entry : 0/0
 10797 ;;		On exit  : 0/0
 10798 ;;		Unchanged: 0/0
 10799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10800 ;;      Params:         0       0       0       0       0       0       0
 10801 ;;      Locals:         0       7       0       0       0       0       0
 10802 ;;      Temps:          0       0       0       0       0       0       0
 10803 ;;      Totals:         0       7       0       0       0       0       0
 10804 ;;Total ram usage:        7 bytes
 10805 ;; Hardware stack levels used:    1
 10806 ;; Hardware stack levels required when called:   10
 10807 ;; This function calls:
 10808 ;;		_ReadIntFromEeprom
 10809 ;;		_SWSPI_send_word
 10810 ;;		_StoreIntInEeprom
 10811 ;;		_SwSpi_Set_CE_Pin
 10812 ;; This function is called by:
 10813 ;;		_PLLInitialize
 10814 ;;		_SetSynthOper
 10815 ;;		_SynthLdDetect
 10816 ;; This function uses a non-reentrant model
 10817 ;;
 10818                           
 10819                           	psect	text59
 10820  000D4C                     __ptext59:
 10821                           	opt stack 0
 10822  000D4C                     _InitSynth:
 10823                           	opt stack 17
 10824                           
 10825                           ;incstack = 0
 10826                           ;InitSynth@cType stored from wreg
 10827  000D4C  0100               	movlb	0	; () banked
 10828  000D4E  6FCC               	movwf	InitSynth@cType& (0+255),b
 10829                           
 10830                           ;SyntApp.c: 41: SwSpi_Set_CE_Pin(cType, 1);
 10831  000D50  0E01               	movlw	1
 10832  000D52  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
 10833  000D54  0100               	movlb	0	; () banked
 10834  000D56  51CC               	movf	InitSynth@cType& (0+255),w,b
 10835  000D58  EC86  F01E         	call	_SwSpi_Set_CE_Pin
 10836                           
 10837                           ;SyntApp.c: 43: uint8_t regNum = 0;
 10838  000D5C  0E00               	movlw	0
 10839  000D5E  0100               	movlb	0	; () banked
 10840  000D60  6FCE               	movwf	InitSynth@regNum& (0+255),b
 10841                           
 10842                           ; BSR set to: 0
 10843                           ;SyntApp.c: 44: uint32_t EepromVal = 0x0;
 10844  000D62  0E00               	movlw	0
 10845  000D64  6FC8               	movwf	InitSynth@EepromVal& (0+255),b
 10846  000D66  0E00               	movlw	0
 10847  000D68  6FC9               	movwf	(InitSynth@EepromVal+1)& (0+255),b
 10848  000D6A  0E00               	movlw	0
 10849  000D6C  6FCA               	movwf	(InitSynth@EepromVal+2)& (0+255),b
 10850  000D6E  0E00               	movlw	0
 10851  000D70  6FCB               	movwf	(InitSynth@EepromVal+3)& (0+255),b
 10852                           
 10853                           ; BSR set to: 0
 10854                           ;SyntApp.c: 47: for(uint8_t idx = 0; idx < 14; idx++)
 10855  000D72  0E00               	movlw	0
 10856  000D74  6FCD               	movwf	InitSynth@idx& (0+255),b
 10857  000D76                     l8063:
 10858                           
 10859                           ; BSR set to: 0
 10860  000D76  0E0D               	movlw	13
 10861  000D78  65CD               	cpfsgt	InitSynth@idx& (0+255),b
 10862  000D7A  D001               	goto	l507
 10863  000D7C  0012               	return	
 10864  000D7E                     l507:
 10865                           
 10866                           ; BSR set to: 0
 10867                           ;SyntApp.c: 48: {
 10868                           ;SyntApp.c: 49: regNum = 14 - idx - 1;
 10869                           
 10870                           ; BSR set to: 0
 10871  000D7E  29CD               	incf	InitSynth@idx& (0+255),w,b
 10872  000D80  0800               	sublw	0
 10873  000D82  0F0E               	addlw	14
 10874  000D84  6FCE               	movwf	InitSynth@regNum& (0+255),b
 10875                           
 10876                           ; BSR set to: 0
 10877                           ;SyntApp.c: 50: if(regNum == 0x0 || regNum == 0x1 || regNum == 0x2 || regNum == 0x4 || r
      +                          egNum == 0x6 || regNum == 0xA)
 10878  000D86  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10879  000D88  B4D8               	btfsc	status,2,c
 10880  000D8A  D013               	goto	u8090
 10881                           
 10882                           ; BSR set to: 0
 10883  000D8C  05CE               	decf	InitSynth@regNum& (0+255),w,b
 10884  000D8E  B4D8               	btfsc	status,2,c
 10885  000D90  D010               	goto	u8090
 10886                           
 10887                           ; BSR set to: 0
 10888  000D92  0E02               	movlw	2
 10889  000D94  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10890  000D96  B4D8               	btfsc	status,2,c
 10891  000D98  D00C               	goto	u8090
 10892                           
 10893                           ; BSR set to: 0
 10894  000D9A  0E04               	movlw	4
 10895  000D9C  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10896  000D9E  B4D8               	btfsc	status,2,c
 10897  000DA0  D008               	goto	u8090
 10898                           
 10899                           ; BSR set to: 0
 10900  000DA2  0E06               	movlw	6
 10901  000DA4  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10902  000DA6  B4D8               	btfsc	status,2,c
 10903  000DA8  D004               	goto	u8090
 10904                           
 10905                           ; BSR set to: 0
 10906  000DAA  0E0A               	movlw	10
 10907  000DAC  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10908  000DAE  A4D8               	btfss	status,2,c
 10909  000DB0  D0EB               	goto	l509
 10910  000DB2                     u8090:
 10911                           
 10912                           ; BSR set to: 0
 10913                           ;SyntApp.c: 51: {
 10914                           ;SyntApp.c: 52: if(cType == SYNTH_TX)
 10915                           
 10916                           ; BSR set to: 0
 10917  000DB2  51CC               	movf	InitSynth@cType& (0+255),w,b
 10918  000DB4  A4D8               	btfss	status,2,c
 10919  000DB6  D071               	goto	l512
 10920                           
 10921                           ; BSR set to: 0
 10922                           ;SyntApp.c: 53: {
 10923                           ;SyntApp.c: 54: EepromVal = ReadIntFromEeprom((0) | SYNTH_ADDRES[regNum], 4);
 10924  000DB8  0E00               	movlw	0
 10925  000DBA  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 10926  000DBC  0E04               	movlw	4
 10927  000DBE  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 10928  000DC0  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10929  000DC2  0D01               	mullw	1
 10930  000DC4  0E39               	movlw	low _SYNTH_ADDRES
 10931  000DC6  24F3               	addwf	prodl,w,c
 10932  000DC8  6EF6               	movwf	tblptrl,c
 10933  000DCA  0E06               	movlw	high _SYNTH_ADDRES
 10934  000DCC  20F4               	addwfc	prodh,w,c
 10935  000DCE  6EF7               	movwf	tblptrh,c
 10936  000DD0                     	if	0	;There are less than 3 active tblptr bytes
 10937  000DD0                     	endif
 10938  000DD0  0008               	tblrd		*
 10939  000DD2  50F5               	movf	tablat,w,c
 10940  000DD4  ECAC  F00F         	call	_ReadIntFromEeprom
 10941  000DD8  C0B1  F0C8         	movff	?_ReadIntFromEeprom,InitSynth@EepromVal
 10942  000DDC  C0B2  F0C9         	movff	?_ReadIntFromEeprom+1,InitSynth@EepromVal+1
 10943  000DE0  C0B3  F0CA         	movff	?_ReadIntFromEeprom+2,InitSynth@EepromVal+2
 10944  000DE4  C0B4  F0CB         	movff	?_ReadIntFromEeprom+3,InitSynth@EepromVal+3
 10945                           
 10946                           ;SyntApp.c: 55: if(EepromVal == 0xFFFFFFFF)
 10947  000DE8  0100               	movlb	0	; () banked
 10948  000DEA  29C8               	incf	InitSynth@EepromVal& (0+255),w,b
 10949  000DEC  E147               	bnz	l8091
 10950  000DEE  29C9               	incf	(InitSynth@EepromVal+1)& (0+255),w,b
 10951  000DF0  E145               	bnz	l8091
 10952  000DF2  29CA               	incf	(InitSynth@EepromVal+2)& (0+255),w,b
 10953  000DF4  E143               	bnz	l8091
 10954  000DF6  29CB               	incf	(InitSynth@EepromVal+3)& (0+255),w,b
 10955  000DF8  A4D8               	btfss	status,2,c
 10956  000DFA  D040               	goto	l513
 10957                           
 10958                           ; BSR set to: 0
 10959                           ;SyntApp.c: 56: {
 10960                           ;SyntApp.c: 57: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 10961  000DFC  51CD               	movf	InitSynth@idx& (0+255),w,b
 10962  000DFE  0D04               	mullw	4
 10963  000E00  0E01               	movlw	low _SYNTH_REGS
 10964  000E02  24F3               	addwf	prodl,w,c
 10965  000E04  6EF6               	movwf	tblptrl,c
 10966  000E06  0E06               	movlw	high _SYNTH_REGS
 10967  000E08  20F4               	addwfc	prodh,w,c
 10968  000E0A  6EF7               	movwf	tblptrh,c
 10969  000E0C                     	if	0	;There are less than 3 active tblptr bytes
 10970  000E0C                     	endif
 10971  000E0C  0009               	tblrd		*+
 10972  000E0E  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 10973  000E12  0009               	tblrd		*+
 10974  000E14  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 10975  000E18  0009               	tblrd		*+
 10976  000E1A  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 10977  000E1E  000A               	tblrd		*-
 10978  000E20  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 10979  000E24  0E03               	movlw	3
 10980  000E26  6E2D               	movwf	SWSPI_send_word@dataSize,c
 10981  000E28  51CC               	movf	InitSynth@cType& (0+255),w,b
 10982  000E2A  EC02  F018         	call	_SWSPI_send_word
 10983                           
 10984                           ;SyntApp.c: 58: StoreIntInEeprom(SYNTH_REGS[idx], (0) | SYNTH_ADDRES[regNum], 4);
 10985  000E2E  0100               	movlb	0	; () banked
 10986  000E30  51CD               	movf	InitSynth@idx& (0+255),w,b
 10987  000E32  0D04               	mullw	4
 10988  000E34  0E01               	movlw	low _SYNTH_REGS
 10989  000E36  24F3               	addwf	prodl,w,c
 10990  000E38  6EF6               	movwf	tblptrl,c
 10991  000E3A  0E06               	movlw	high _SYNTH_REGS
 10992  000E3C  20F4               	addwfc	prodh,w,c
 10993  000E3E  6EF7               	movwf	tblptrh,c
 10994  000E40                     	if	0	;There are less than 3 active tblptr bytes
 10995  000E40                     	endif
 10996  000E40  0009               	tblrd		*+
 10997  000E42  CFF5 F021          	movff	tablat,StoreIntInEeprom@data
 10998  000E46  0009               	tblrd		*+
 10999  000E48  CFF5 F022          	movff	tablat,StoreIntInEeprom@data+1
 11000  000E4C  0009               	tblrd		*+
 11001  000E4E  CFF5 F023          	movff	tablat,StoreIntInEeprom@data+2
 11002  000E52  000A               	tblrd		*-
 11003  000E54  CFF5 F024          	movff	tablat,StoreIntInEeprom@data+3
 11004  000E58  51CE               	movf	InitSynth@regNum& (0+255),w,b
 11005  000E5A  0D01               	mullw	1
 11006  000E5C  0E39               	movlw	low _SYNTH_ADDRES
 11007  000E5E  24F3               	addwf	prodl,w,c
 11008  000E60  6EF6               	movwf	tblptrl,c
 11009  000E62  0E06               	movlw	high _SYNTH_ADDRES
 11010  000E64  20F4               	addwfc	prodh,w,c
 11011  000E66  6EF7               	movwf	tblptrh,c
 11012  000E68                     	if	0	;There are less than 3 active tblptr bytes
 11013  000E68                     	endif
 11014  000E68  0008               	tblrd		*
 11015  000E6A  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
 11016  000E6E  0E00               	movlw	0
 11017  000E70  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 11018  000E72  0E04               	movlw	4
 11019  000E74  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 11020  000E76  ECFA  F01E         	call	_StoreIntInEeprom	;wreg free
 11021                           
 11022                           ;SyntApp.c: 59: }
 11023  000E7A  D0A0               	goto	l519
 11024  000E7C                     l513:
 11025  000E7C                     l8091:
 11026                           
 11027                           ;SyntApp.c: 60: else
 11028                           ;SyntApp.c: 61: {
 11029                           ;SyntApp.c: 62: SWSPI_send_word(cType, EepromVal,3);
 11030  000E7C  C0C8  F029         	movff	InitSynth@EepromVal,SWSPI_send_word@data
 11031  000E80  C0C9  F02A         	movff	InitSynth@EepromVal+1,SWSPI_send_word@data+1
 11032  000E84  C0CA  F02B         	movff	InitSynth@EepromVal+2,SWSPI_send_word@data+2
 11033  000E88  C0CB  F02C         	movff	InitSynth@EepromVal+3,SWSPI_send_word@data+3
 11034  000E8C  0E03               	movlw	3
 11035  000E8E  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11036  000E90  0100               	movlb	0	; () banked
 11037  000E92  51CC               	movf	InitSynth@cType& (0+255),w,b
 11038  000E94  EC02  F018         	call	_SWSPI_send_word
 11039                           
 11040                           ;SyntApp.c: 63: }
 11041                           ;SyntApp.c: 64: }
 11042  000E98  D091               	goto	l519
 11043  000E9A                     l512:
 11044                           
 11045                           ;SyntApp.c: 65: else if (cType == SYNTH_RX)
 11046  000E9A  0100               	movlb	0	; () banked
 11047  000E9C  05CC               	decf	InitSynth@cType& (0+255),w,b
 11048  000E9E  A4D8               	btfss	status,2,c
 11049  000EA0  D08D               	goto	l519
 11050                           
 11051                           ; BSR set to: 0
 11052                           ;SyntApp.c: 66: {
 11053                           ;SyntApp.c: 67: EepromVal = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[regNum], 4);
 11054  000EA2  0E00               	movlw	0
 11055  000EA4  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 11056  000EA6  0E04               	movlw	4
 11057  000EA8  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 11058  000EAA  51CE               	movf	InitSynth@regNum& (0+255),w,b
 11059  000EAC  0D01               	mullw	1
 11060  000EAE  0E39               	movlw	low _SYNTH_ADDRES
 11061  000EB0  24F3               	addwf	prodl,w,c
 11062  000EB2  6EF6               	movwf	tblptrl,c
 11063  000EB4  0E06               	movlw	high _SYNTH_ADDRES
 11064  000EB6  20F4               	addwfc	prodh,w,c
 11065  000EB8  6EF7               	movwf	tblptrh,c
 11066  000EBA                     	if	0	;There are less than 3 active tblptr bytes
 11067  000EBA                     	endif
 11068  000EBA  0008               	tblrd		*
 11069  000EBC  50F5               	movf	tablat,w,c
 11070  000EBE  0920               	iorlw	32
 11071  000EC0  ECAC  F00F         	call	_ReadIntFromEeprom
 11072  000EC4  C0B1  F0C8         	movff	?_ReadIntFromEeprom,InitSynth@EepromVal
 11073  000EC8  C0B2  F0C9         	movff	?_ReadIntFromEeprom+1,InitSynth@EepromVal+1
 11074  000ECC  C0B3  F0CA         	movff	?_ReadIntFromEeprom+2,InitSynth@EepromVal+2
 11075  000ED0  C0B4  F0CB         	movff	?_ReadIntFromEeprom+3,InitSynth@EepromVal+3
 11076                           
 11077                           ;SyntApp.c: 68: if(EepromVal == 0xFFFFFFFF)
 11078  000ED4  0100               	movlb	0	; () banked
 11079  000ED6  29C8               	incf	InitSynth@EepromVal& (0+255),w,b
 11080  000ED8  E148               	bnz	l8103
 11081  000EDA  29C9               	incf	(InitSynth@EepromVal+1)& (0+255),w,b
 11082  000EDC  E146               	bnz	l8103
 11083  000EDE  29CA               	incf	(InitSynth@EepromVal+2)& (0+255),w,b
 11084  000EE0  E144               	bnz	l8103
 11085  000EE2  29CB               	incf	(InitSynth@EepromVal+3)& (0+255),w,b
 11086  000EE4  A4D8               	btfss	status,2,c
 11087  000EE6  D041               	goto	l517
 11088                           
 11089                           ; BSR set to: 0
 11090                           ;SyntApp.c: 69: {
 11091                           ;SyntApp.c: 70: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 11092  000EE8  51CD               	movf	InitSynth@idx& (0+255),w,b
 11093  000EEA  0D04               	mullw	4
 11094  000EEC  0E01               	movlw	low _SYNTH_REGS
 11095  000EEE  24F3               	addwf	prodl,w,c
 11096  000EF0  6EF6               	movwf	tblptrl,c
 11097  000EF2  0E06               	movlw	high _SYNTH_REGS
 11098  000EF4  20F4               	addwfc	prodh,w,c
 11099  000EF6  6EF7               	movwf	tblptrh,c
 11100  000EF8                     	if	0	;There are less than 3 active tblptr bytes
 11101  000EF8                     	endif
 11102  000EF8  0009               	tblrd		*+
 11103  000EFA  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 11104  000EFE  0009               	tblrd		*+
 11105  000F00  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 11106  000F04  0009               	tblrd		*+
 11107  000F06  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 11108  000F0A  000A               	tblrd		*-
 11109  000F0C  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 11110  000F10  0E03               	movlw	3
 11111  000F12  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11112  000F14  51CC               	movf	InitSynth@cType& (0+255),w,b
 11113  000F16  EC02  F018         	call	_SWSPI_send_word
 11114                           
 11115                           ;SyntApp.c: 71: StoreIntInEeprom(SYNTH_REGS[idx], (0x20) | SYNTH_ADDRES[regNum], 4);
 11116  000F1A  0100               	movlb	0	; () banked
 11117  000F1C  51CD               	movf	InitSynth@idx& (0+255),w,b
 11118  000F1E  0D04               	mullw	4
 11119  000F20  0E01               	movlw	low _SYNTH_REGS
 11120  000F22  24F3               	addwf	prodl,w,c
 11121  000F24  6EF6               	movwf	tblptrl,c
 11122  000F26  0E06               	movlw	high _SYNTH_REGS
 11123  000F28  20F4               	addwfc	prodh,w,c
 11124  000F2A  6EF7               	movwf	tblptrh,c
 11125  000F2C                     	if	0	;There are less than 3 active tblptr bytes
 11126  000F2C                     	endif
 11127  000F2C  0009               	tblrd		*+
 11128  000F2E  CFF5 F021          	movff	tablat,StoreIntInEeprom@data
 11129  000F32  0009               	tblrd		*+
 11130  000F34  CFF5 F022          	movff	tablat,StoreIntInEeprom@data+1
 11131  000F38  0009               	tblrd		*+
 11132  000F3A  CFF5 F023          	movff	tablat,StoreIntInEeprom@data+2
 11133  000F3E  000A               	tblrd		*-
 11134  000F40  CFF5 F024          	movff	tablat,StoreIntInEeprom@data+3
 11135  000F44  51CE               	movf	InitSynth@regNum& (0+255),w,b
 11136  000F46  0D01               	mullw	1
 11137  000F48  0E39               	movlw	low _SYNTH_ADDRES
 11138  000F4A  24F3               	addwf	prodl,w,c
 11139  000F4C  6EF6               	movwf	tblptrl,c
 11140  000F4E  0E06               	movlw	high _SYNTH_ADDRES
 11141  000F50  20F4               	addwfc	prodh,w,c
 11142  000F52  6EF7               	movwf	tblptrh,c
 11143  000F54                     	if	0	;There are less than 3 active tblptr bytes
 11144  000F54                     	endif
 11145  000F54  0008               	tblrd		*
 11146  000F56  50F5               	movf	tablat,w,c
 11147  000F58  0920               	iorlw	32
 11148  000F5A  6E25               	movwf	StoreIntInEeprom@address,c
 11149  000F5C  0E00               	movlw	0
 11150  000F5E  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 11151  000F60  0E04               	movlw	4
 11152  000F62  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 11153  000F64  ECFA  F01E         	call	_StoreIntInEeprom	;wreg free
 11154                           
 11155                           ;SyntApp.c: 72: }
 11156  000F68  D029               	goto	l519
 11157  000F6A                     l517:
 11158  000F6A                     l8103:
 11159                           
 11160                           ;SyntApp.c: 73: else
 11161                           ;SyntApp.c: 74: {
 11162                           ;SyntApp.c: 75: SWSPI_send_word(cType, EepromVal,3);
 11163  000F6A  C0C8  F029         	movff	InitSynth@EepromVal,SWSPI_send_word@data
 11164  000F6E  C0C9  F02A         	movff	InitSynth@EepromVal+1,SWSPI_send_word@data+1
 11165  000F72  C0CA  F02B         	movff	InitSynth@EepromVal+2,SWSPI_send_word@data+2
 11166  000F76  C0CB  F02C         	movff	InitSynth@EepromVal+3,SWSPI_send_word@data+3
 11167  000F7A  0E03               	movlw	3
 11168  000F7C  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11169  000F7E  0100               	movlb	0	; () banked
 11170  000F80  51CC               	movf	InitSynth@cType& (0+255),w,b
 11171  000F82  EC02  F018         	call	_SWSPI_send_word
 11172                           
 11173                           ;SyntApp.c: 76: }
 11174                           ;SyntApp.c: 77: }
 11175                           ;SyntApp.c: 78: }
 11176  000F86  D01A               	goto	l519
 11177  000F88                     l509:
 11178                           
 11179                           ;SyntApp.c: 79: else
 11180                           ;SyntApp.c: 80: {
 11181                           ;SyntApp.c: 81: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 11182  000F88  0100               	movlb	0	; () banked
 11183  000F8A  51CD               	movf	InitSynth@idx& (0+255),w,b
 11184  000F8C  0D04               	mullw	4
 11185  000F8E  0E01               	movlw	low _SYNTH_REGS
 11186  000F90  24F3               	addwf	prodl,w,c
 11187  000F92  6EF6               	movwf	tblptrl,c
 11188  000F94  0E06               	movlw	high _SYNTH_REGS
 11189  000F96  20F4               	addwfc	prodh,w,c
 11190  000F98  6EF7               	movwf	tblptrh,c
 11191  000F9A                     	if	0	;There are less than 3 active tblptr bytes
 11192  000F9A                     	endif
 11193  000F9A  0009               	tblrd		*+
 11194  000F9C  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 11195  000FA0  0009               	tblrd		*+
 11196  000FA2  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 11197  000FA6  0009               	tblrd		*+
 11198  000FA8  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 11199  000FAC  000A               	tblrd		*-
 11200  000FAE  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 11201  000FB2  0E03               	movlw	3
 11202  000FB4  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11203  000FB6  51CC               	movf	InitSynth@cType& (0+255),w,b
 11204  000FB8  EC02  F018         	call	_SWSPI_send_word
 11205  000FBC                     l519:
 11206  000FBC  0100               	movlb	0	; () banked
 11207  000FBE  2BCD               	incf	InitSynth@idx& (0+255),f,b
 11208  000FC0  D6DA               	goto	l8063
 11209  000FC2                     __end_of_InitSynth:
 11210                           	opt stack 0
 11211                           tosu	equ	0xFFF
 11212                           tosh	equ	0xFFE
 11213                           tosl	equ	0xFFD
 11214                           pclath	equ	0xFFA
 11215                           tblptru	equ	0xFF8
 11216                           tblptrh	equ	0xFF7
 11217                           tblptrl	equ	0xFF6
 11218                           tablat	equ	0xFF5
 11219                           prodh	equ	0xFF4
 11220                           prodl	equ	0xFF3
 11221                           intcon	equ	0xFF2
 11222                           intcon2	equ	0xFF1
 11223                           postinc0	equ	0xFEE
 11224                           plusw0	equ	0xFEB
 11225                           wreg	equ	0xFE8
 11226                           indf1	equ	0xFE7
 11227                           postdec1	equ	0xFE5
 11228                           fsr1h	equ	0xFE2
 11229                           fsr1l	equ	0xFE1
 11230                           indf2	equ	0xFDF
 11231                           postinc2	equ	0xFDE
 11232                           postdec2	equ	0xFDD
 11233                           plusw2	equ	0xFDB
 11234                           fsr2h	equ	0xFDA
 11235                           fsr2l	equ	0xFD9
 11236                           status	equ	0xFD8
 11237                           
 11238 ;; *************** function _SwSpi_Set_CE_Pin *****************
 11239 ;; Defined at:
 11240 ;;		line 201 in file "SwSpiApp.c"
 11241 ;; Parameters:    Size  Location     Type
 11242 ;;  phrType         1    wreg     enum E1
 11243 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11244 ;; Auto vars:     Size  Location     Type
 11245 ;;  phrType         1   24[COMRAM] enum E1
 11246 ;; Return value:  Size  Location     Type
 11247 ;;                  1    wreg      void 
 11248 ;; Registers used:
 11249 ;;		wreg, status,2, status,0
 11250 ;; Tracked objects:
 11251 ;;		On entry : 0/0
 11252 ;;		On exit  : 0/0
 11253 ;;		Unchanged: 0/0
 11254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11255 ;;      Params:         1       0       0       0       0       0       0
 11256 ;;      Locals:         1       0       0       0       0       0       0
 11257 ;;      Temps:          0       0       0       0       0       0       0
 11258 ;;      Totals:         2       0       0       0       0       0       0
 11259 ;;Total ram usage:        2 bytes
 11260 ;; Hardware stack levels used:    1
 11261 ;; Hardware stack levels required when called:    4
 11262 ;; This function calls:
 11263 ;;		Nothing
 11264 ;; This function is called by:
 11265 ;;		_InitSynth
 11266 ;;		_SetSynthOper
 11267 ;; This function uses a non-reentrant model
 11268 ;;
 11269                           
 11270                           	psect	text60
 11271  003D0C                     __ptext60:
 11272                           	opt stack 0
 11273  003D0C                     _SwSpi_Set_CE_Pin:
 11274                           	opt stack 23
 11275                           
 11276                           ; BSR set to: 0
 11277                           ;incstack = 0
 11278                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
 11279  003D0C  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
 11280                           
 11281                           ;SwSpiApp.c: 203: switch(phrType)
 11282  003D0E  D014               	goto	l723
 11283  003D10                     
 11284                           ;SwSpiApp.c: 206: if(cPinMode == 1)
 11285  003D10  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11286  003D12  A4D8               	btfss	status,2,c
 11287  003D14  D002               	goto	l725
 11288                           
 11289                           ;SwSpiApp.c: 207: {
 11290                           ;SwSpiApp.c: 208: do { LATCbits.LATC1 = 1; } while(0);
 11291  003D16  828B               	bsf	3979,1,c	;volatile
 11292                           
 11293                           ;SwSpiApp.c: 209: }
 11294  003D18  0012               	return	
 11295  003D1A                     l725:
 11296                           
 11297                           ;SwSpiApp.c: 210: else if(cPinMode == 0)
 11298  003D1A  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11299  003D1C  A4D8               	btfss	status,2,c
 11300  003D1E  0012               	return	
 11301                           
 11302                           ;SwSpiApp.c: 211: {
 11303                           ;SwSpiApp.c: 212: do { LATCbits.LATC1 = 0; } while(0);
 11304  003D20  928B               	bcf	3979,1,c	;volatile
 11305                           
 11306                           ;SwSpiApp.c: 213: }
 11307                           ;SwSpiApp.c: 214: break;
 11308  003D22  0012               	return	
 11309  003D24                     
 11310                           ;SwSpiApp.c: 217: if(cPinMode == 1)
 11311  003D24  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11312  003D26  A4D8               	btfss	status,2,c
 11313  003D28  D002               	goto	l734
 11314                           
 11315                           ;SwSpiApp.c: 218: {
 11316                           ;SwSpiApp.c: 219: do { LATDbits.LATD2 = 1; } while(0);
 11317  003D2A  848C               	bsf	3980,2,c	;volatile
 11318                           
 11319                           ;SwSpiApp.c: 220: }
 11320  003D2C  0012               	return	
 11321  003D2E                     l734:
 11322                           
 11323                           ;SwSpiApp.c: 221: else if(cPinMode == 0)
 11324  003D2E  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11325  003D30  A4D8               	btfss	status,2,c
 11326  003D32  0012               	return	
 11327                           
 11328                           ;SwSpiApp.c: 222: {
 11329                           ;SwSpiApp.c: 223: do { LATDbits.LATD2 = 0; } while(0);
 11330  003D34  948C               	bcf	3980,2,c	;volatile
 11331                           
 11332                           ;SwSpiApp.c: 226: }
 11333                           
 11334                           ;SwSpiApp.c: 224: }
 11335                           ;SwSpiApp.c: 225: break;
 11336  003D36  0012               	return	
 11337  003D38                     l723:
 11338  003D38  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
 11339                           
 11340                           ; Switch size 1, requested type "space"
 11341                           ; Number of cases is 2, Range of values is 0 to 1
 11342                           ; switch strategies available:
 11343                           ; Name         Instructions Cycles
 11344                           ; simple_byte            7     4 (average)
 11345                           ;	Chosen strategy is simple_byte
 11346  003D3A  0A00               	xorlw	0	; case 0
 11347  003D3C  B4D8               	btfsc	status,2,c
 11348  003D3E  D7E8               	goto	l724
 11349  003D40  0A01               	xorlw	1	; case 1
 11350  003D42  A4D8               	btfss	status,2,c
 11351  003D44  0012               	return	
 11352  003D46  D7EE               	goto	l733
 11353  003D48                     __end_of_SwSpi_Set_CE_Pin:
 11354                           	opt stack 0
 11355                           tosu	equ	0xFFF
 11356                           tosh	equ	0xFFE
 11357                           tosl	equ	0xFFD
 11358                           pclath	equ	0xFFA
 11359                           tblptru	equ	0xFF8
 11360                           tblptrh	equ	0xFF7
 11361                           tblptrl	equ	0xFF6
 11362                           tablat	equ	0xFF5
 11363                           prodh	equ	0xFF4
 11364                           prodl	equ	0xFF3
 11365                           intcon	equ	0xFF2
 11366                           intcon2	equ	0xFF1
 11367                           postinc0	equ	0xFEE
 11368                           plusw0	equ	0xFEB
 11369                           wreg	equ	0xFE8
 11370                           indf1	equ	0xFE7
 11371                           postdec1	equ	0xFE5
 11372                           fsr1h	equ	0xFE2
 11373                           fsr1l	equ	0xFE1
 11374                           indf2	equ	0xFDF
 11375                           postinc2	equ	0xFDE
 11376                           postdec2	equ	0xFDD
 11377                           plusw2	equ	0xFDB
 11378                           fsr2h	equ	0xFDA
 11379                           fsr2l	equ	0xFD9
 11380                           status	equ	0xFD8
 11381                           
 11382 ;; *************** function _InitAdcApplicationMgr *****************
 11383 ;; Defined at:
 11384 ;;		line 20 in file "AdcApp.c"
 11385 ;; Parameters:    Size  Location     Type
 11386 ;;		None
 11387 ;; Auto vars:     Size  Location     Type
 11388 ;;		None
 11389 ;; Return value:  Size  Location     Type
 11390 ;;                  1    wreg      void 
 11391 ;; Registers used:
 11392 ;;		wreg, status,2
 11393 ;; Tracked objects:
 11394 ;;		On entry : 0/0
 11395 ;;		On exit  : 0/0
 11396 ;;		Unchanged: 0/0
 11397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11398 ;;      Params:         0       0       0       0       0       0       0
 11399 ;;      Locals:         0       0       0       0       0       0       0
 11400 ;;      Temps:          0       0       0       0       0       0       0
 11401 ;;      Totals:         0       0       0       0       0       0       0
 11402 ;;Total ram usage:        0 bytes
 11403 ;; Hardware stack levels used:    1
 11404 ;; Hardware stack levels required when called:    4
 11405 ;; This function calls:
 11406 ;;		Nothing
 11407 ;; This function is called by:
 11408 ;;		_InitSystemApplicationManagers
 11409 ;; This function uses a non-reentrant model
 11410 ;;
 11411                           
 11412                           	psect	text61
 11413  0043E2                     __ptext61:
 11414                           	opt stack 0
 11415  0043E2                     _InitAdcApplicationMgr:
 11416                           	opt stack 25
 11417                           
 11418                           ;AdcApp.c: 22: adcSampleMode = CIRCULAR;
 11419                           
 11420                           ;incstack = 0
 11421  0043E2  0E00               	movlw	0
 11422  0043E4  6E3D               	movwf	_adcSampleMode,c
 11423  0043E6  0012               	return		;funcret
 11424  0043E8                     __end_of_InitAdcApplicationMgr:
 11425                           	opt stack 0
 11426                           tosu	equ	0xFFF
 11427                           tosh	equ	0xFFE
 11428                           tosl	equ	0xFFD
 11429                           pclath	equ	0xFFA
 11430                           tblptru	equ	0xFF8
 11431                           tblptrh	equ	0xFF7
 11432                           tblptrl	equ	0xFF6
 11433                           tablat	equ	0xFF5
 11434                           prodh	equ	0xFF4
 11435                           prodl	equ	0xFF3
 11436                           intcon	equ	0xFF2
 11437                           intcon2	equ	0xFF1
 11438                           postinc0	equ	0xFEE
 11439                           plusw0	equ	0xFEB
 11440                           wreg	equ	0xFE8
 11441                           indf1	equ	0xFE7
 11442                           postdec1	equ	0xFE5
 11443                           fsr1h	equ	0xFE2
 11444                           fsr1l	equ	0xFE1
 11445                           indf2	equ	0xFDF
 11446                           postinc2	equ	0xFDE
 11447                           postdec2	equ	0xFDD
 11448                           plusw2	equ	0xFDB
 11449                           fsr2h	equ	0xFDA
 11450                           fsr2l	equ	0xFD9
 11451                           status	equ	0xFD8
 11452                           
 11453 ;; *************** function _DacInit *****************
 11454 ;; Defined at:
 11455 ;;		line 11 in file "DacApp.c"
 11456 ;; Parameters:    Size  Location     Type
 11457 ;;		None
 11458 ;; Auto vars:     Size  Location     Type
 11459 ;;  dacInput        2  106[BANK0 ] unsigned int 
 11460 ;;  idx             1  108[BANK0 ] char 
 11461 ;; Return value:  Size  Location     Type
 11462 ;;                  1    wreg      void 
 11463 ;; Registers used:
 11464 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11465 ;; Tracked objects:
 11466 ;;		On entry : 0/0
 11467 ;;		On exit  : 0/0
 11468 ;;		Unchanged: 0/0
 11469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11470 ;;      Params:         0       0       0       0       0       0       0
 11471 ;;      Locals:         0       3       0       0       0       0       0
 11472 ;;      Temps:          0       2       0       0       0       0       0
 11473 ;;      Totals:         0       5       0       0       0       0       0
 11474 ;;Total ram usage:        5 bytes
 11475 ;; Hardware stack levels used:    1
 11476 ;; Hardware stack levels required when called:   10
 11477 ;; This function calls:
 11478 ;;		_ReadIntFromEeprom
 11479 ;;		_SWSPI_send_word
 11480 ;;		_StoreIntInEeprom
 11481 ;; This function is called by:
 11482 ;;		_InitSystemApplicationManagers
 11483 ;; This function uses a non-reentrant model
 11484 ;;
 11485                           
 11486                           	psect	text62
 11487  00283A                     __ptext62:
 11488                           	opt stack 0
 11489  00283A                     _DacInit:
 11490                           	opt stack 19
 11491                           
 11492                           ;DacApp.c: 13: for(int8_t idx = 0; idx < (4); idx++)
 11493                           
 11494                           ;incstack = 0
 11495  00283A  0E00               	movlw	0
 11496  00283C  0100               	movlb	0	; () banked
 11497  00283E  6FCC               	movwf	DacInit@idx& (0+255),b
 11498  002840                     l8603:
 11499                           
 11500                           ; BSR set to: 0
 11501  002840  51CC               	movf	DacInit@idx& (0+255),w,b
 11502  002842  0A80               	xorlw	128
 11503  002844  0F7C               	addlw	-132
 11504  002846  B0D8               	btfsc	status,0,c
 11505  002848  0012               	return	
 11506                           
 11507                           ; BSR set to: 0
 11508                           ;DacApp.c: 14: {
 11509                           ;DacApp.c: 15: uint16_t dacInput = ReadIntFromEeprom((0x40) | DAC_ADDRES[idx], 2);
 11510                           
 11511                           ; BSR set to: 0
 11512                           
 11513                           ; BSR set to: 0
 11514  00284A  0E00               	movlw	0
 11515  00284C  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 11516  00284E  0E02               	movlw	2
 11517  002850  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 11518  002852  51CC               	movf	DacInit@idx& (0+255),w,b
 11519  002854  0D01               	mullw	1
 11520  002856  0E58               	movlw	low _DAC_ADDRES
 11521  002858  24F3               	addwf	prodl,w,c
 11522  00285A  6EF6               	movwf	tblptrl,c
 11523  00285C  0E06               	movlw	high _DAC_ADDRES
 11524  00285E  20F4               	addwfc	prodh,w,c
 11525  002860  6EF7               	movwf	tblptrh,c
 11526  002862                     	if	0	;There are less than 3 active tblptr bytes
 11527  002862                     	endif
 11528  002862  0008               	tblrd		*
 11529  002864  50F5               	movf	tablat,w,c
 11530  002866  0940               	iorlw	64
 11531  002868  ECAC  F00F         	call	_ReadIntFromEeprom
 11532  00286C  C0B1  F0CA         	movff	?_ReadIntFromEeprom,DacInit@dacInput
 11533  002870  C0B2  F0CB         	movff	?_ReadIntFromEeprom+1,DacInit@dacInput+1
 11534                           
 11535                           ;DacApp.c: 16: if(dacInput == 0xFFFF)
 11536  002874  0100               	movlb	0	; () banked
 11537  002876  29CA               	incf	DacInit@dacInput& (0+255),w,b
 11538  002878  E144               	bnz	l8615
 11539  00287A  29CB               	incf	(DacInit@dacInput+1)& (0+255),w,b
 11540  00287C  A4D8               	btfss	status,2,c
 11541  00287E  D041               	goto	l411
 11542                           
 11543                           ; BSR set to: 0
 11544                           ;DacApp.c: 17: {
 11545                           ;DacApp.c: 18: SWSPI_send_word(EXT_DAC, DAC_DEFAULT_INIT_VALUES[idx], 1);
 11546  002880  51CC               	movf	DacInit@idx& (0+255),w,b
 11547  002882  0D02               	mullw	2
 11548  002884  0E50               	movlw	low _DAC_DEFAULT_INIT_VALUES
 11549  002886  24F3               	addwf	prodl,w,c
 11550  002888  6EF6               	movwf	tblptrl,c
 11551  00288A  0E06               	movlw	high _DAC_DEFAULT_INIT_VALUES
 11552  00288C  20F4               	addwfc	prodh,w,c
 11553  00288E  6EF7               	movwf	tblptrh,c
 11554  002890                     	if	0	;There are less than 3 active tblptr bytes
 11555  002890                     	endif
 11556  002890  0009               	tblrd		*+
 11557  002892  CFF5 F0C8          	movff	tablat,??_DacInit
 11558  002896  0009               	tblrd		*+
 11559  002898  CFF5 F0C9          	movff	tablat,??_DacInit+1
 11560  00289C  C0C8  F029         	movff	??_DacInit,SWSPI_send_word@data
 11561  0028A0  C0C9  F02A         	movff	??_DacInit+1,SWSPI_send_word@data+1
 11562  0028A4  6A2B               	clrf	SWSPI_send_word@data+2,c
 11563  0028A6  6A2C               	clrf	SWSPI_send_word@data+3,c
 11564  0028A8  0E01               	movlw	1
 11565  0028AA  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11566  0028AC  0E02               	movlw	2
 11567  0028AE  EC02  F018         	call	_SWSPI_send_word
 11568                           
 11569                           ;DacApp.c: 19: StoreIntInEeprom(DAC_DEFAULT_INIT_VALUES[idx], (0x40) | DAC_ADDRES[idx], 
      +                          2);
 11570  0028B2  0100               	movlb	0	; () banked
 11571  0028B4  51CC               	movf	DacInit@idx& (0+255),w,b
 11572  0028B6  0D02               	mullw	2
 11573  0028B8  0E50               	movlw	low _DAC_DEFAULT_INIT_VALUES
 11574  0028BA  24F3               	addwf	prodl,w,c
 11575  0028BC  6EF6               	movwf	tblptrl,c
 11576  0028BE  0E06               	movlw	high _DAC_DEFAULT_INIT_VALUES
 11577  0028C0  20F4               	addwfc	prodh,w,c
 11578  0028C2  6EF7               	movwf	tblptrh,c
 11579  0028C4                     	if	0	;There are less than 3 active tblptr bytes
 11580  0028C4                     	endif
 11581  0028C4  0009               	tblrd		*+
 11582  0028C6  CFF5 F0C8          	movff	tablat,??_DacInit
 11583  0028CA  0009               	tblrd		*+
 11584  0028CC  CFF5 F0C9          	movff	tablat,??_DacInit+1
 11585  0028D0  C0C8  F021         	movff	??_DacInit,StoreIntInEeprom@data
 11586  0028D4  C0C9  F022         	movff	??_DacInit+1,StoreIntInEeprom@data+1
 11587  0028D8  6A23               	clrf	StoreIntInEeprom@data+2,c
 11588  0028DA  6A24               	clrf	StoreIntInEeprom@data+3,c
 11589  0028DC  51CC               	movf	DacInit@idx& (0+255),w,b
 11590  0028DE  0D01               	mullw	1
 11591  0028E0  0E58               	movlw	low _DAC_ADDRES
 11592  0028E2  24F3               	addwf	prodl,w,c
 11593  0028E4  6EF6               	movwf	tblptrl,c
 11594  0028E6  0E06               	movlw	high _DAC_ADDRES
 11595  0028E8  20F4               	addwfc	prodh,w,c
 11596  0028EA  6EF7               	movwf	tblptrh,c
 11597  0028EC                     	if	0	;There are less than 3 active tblptr bytes
 11598  0028EC                     	endif
 11599  0028EC  0008               	tblrd		*
 11600  0028EE  50F5               	movf	tablat,w,c
 11601  0028F0  0940               	iorlw	64
 11602  0028F2  6E25               	movwf	StoreIntInEeprom@address,c
 11603  0028F4  0E00               	movlw	0
 11604  0028F6  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 11605  0028F8  0E02               	movlw	2
 11606  0028FA  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 11607  0028FC  ECFA  F01E         	call	_StoreIntInEeprom	;wreg free
 11608                           
 11609                           ;DacApp.c: 20: }
 11610  002900  D00B               	goto	l412
 11611  002902                     l411:
 11612  002902                     l8615:
 11613                           
 11614                           ;DacApp.c: 21: else
 11615                           ;DacApp.c: 22: {
 11616                           ;DacApp.c: 23: SWSPI_send_word(EXT_DAC, dacInput, 1);
 11617  002902  C0CA  F029         	movff	DacInit@dacInput,SWSPI_send_word@data
 11618  002906  C0CB  F02A         	movff	DacInit@dacInput+1,SWSPI_send_word@data+1
 11619  00290A  6A2B               	clrf	SWSPI_send_word@data+2,c
 11620  00290C  6A2C               	clrf	SWSPI_send_word@data+3,c
 11621  00290E  0E01               	movlw	1
 11622  002910  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11623  002912  0E02               	movlw	2
 11624  002914  EC02  F018         	call	_SWSPI_send_word
 11625  002918                     l412:
 11626  002918  0100               	movlb	0	; () banked
 11627  00291A  2BCC               	incf	DacInit@idx& (0+255),f,b
 11628  00291C  D791               	goto	l8603
 11629  00291E                     __end_of_DacInit:
 11630                           	opt stack 0
 11631                           tosu	equ	0xFFF
 11632                           tosh	equ	0xFFE
 11633                           tosl	equ	0xFFD
 11634                           pclath	equ	0xFFA
 11635                           tblptru	equ	0xFF8
 11636                           tblptrh	equ	0xFF7
 11637                           tblptrl	equ	0xFF6
 11638                           tablat	equ	0xFF5
 11639                           prodh	equ	0xFF4
 11640                           prodl	equ	0xFF3
 11641                           intcon	equ	0xFF2
 11642                           intcon2	equ	0xFF1
 11643                           postinc0	equ	0xFEE
 11644                           plusw0	equ	0xFEB
 11645                           wreg	equ	0xFE8
 11646                           indf1	equ	0xFE7
 11647                           postdec1	equ	0xFE5
 11648                           fsr1h	equ	0xFE2
 11649                           fsr1l	equ	0xFE1
 11650                           indf2	equ	0xFDF
 11651                           postinc2	equ	0xFDE
 11652                           postdec2	equ	0xFDD
 11653                           plusw2	equ	0xFDB
 11654                           fsr2h	equ	0xFDA
 11655                           fsr2l	equ	0xFD9
 11656                           status	equ	0xFD8
 11657                           
 11658 ;; *************** function _StoreIntInEeprom *****************
 11659 ;; Defined at:
 11660 ;;		line 122 in file "SystemCommon.c"
 11661 ;; Parameters:    Size  Location     Type
 11662 ;;  data            4   32[COMRAM] unsigned long 
 11663 ;;  address         1   36[COMRAM] unsigned char 
 11664 ;;  numOfByes       2   37[COMRAM] int 
 11665 ;; Auto vars:     Size  Location     Type
 11666 ;;  val             1   39[COMRAM] unsigned char 
 11667 ;;  idx             1   40[COMRAM] unsigned char 
 11668 ;; Return value:  Size  Location     Type
 11669 ;;                  1    wreg      void 
 11670 ;; Registers used:
 11671 ;;		wreg, status,2, status,0, cstack
 11672 ;; Tracked objects:
 11673 ;;		On entry : 0/0
 11674 ;;		On exit  : 0/0
 11675 ;;		Unchanged: 0/0
 11676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11677 ;;      Params:         7       0       0       0       0       0       0
 11678 ;;      Locals:         2       0       0       0       0       0       0
 11679 ;;      Temps:          0       0       0       0       0       0       0
 11680 ;;      Totals:         9       0       0       0       0       0       0
 11681 ;;Total ram usage:        9 bytes
 11682 ;; Hardware stack levels used:    1
 11683 ;; Hardware stack levels required when called:    6
 11684 ;; This function calls:
 11685 ;;		_EepromWrite
 11686 ;;		_make8
 11687 ;; This function is called by:
 11688 ;;		_DacInit
 11689 ;;		_DacSetValue
 11690 ;;		_InitSynth
 11691 ;;		_UpdateSynthFreq
 11692 ;; This function uses a non-reentrant model
 11693 ;;
 11694                           
 11695                           	psect	text63
 11696  003DF4                     __ptext63:
 11697                           	opt stack 0
 11698  003DF4                     _StoreIntInEeprom:
 11699                           	opt stack 21
 11700                           
 11701                           ;SystemCommon.c: 124: for(uint8_t idx = numOfByes; idx; idx--)
 11702                           
 11703                           ; BSR set to: 0
 11704                           ;incstack = 0
 11705  003DF4  C026  F029         	movff	StoreIntInEeprom@numOfByes,StoreIntInEeprom@idx
 11706  003DF8  D015               	goto	l1434
 11707  003DFA                     
 11708                           ;SystemCommon.c: 125: {
 11709                           ;SystemCommon.c: 126: uint8_t val = make8(data, idx - 1);
 11710  003DFA  C021  F018         	movff	StoreIntInEeprom@data,make8@data
 11711  003DFE  C022  F019         	movff	StoreIntInEeprom@data+1,make8@data+1
 11712  003E02  C023  F01A         	movff	StoreIntInEeprom@data+2,make8@data+2
 11713  003E06  C024  F01B         	movff	StoreIntInEeprom@data+3,make8@data+3
 11714  003E0A  0429               	decf	StoreIntInEeprom@idx,w,c
 11715  003E0C  6E1C               	movwf	make8@dataLocation,c
 11716  003E0E  EC15  F01C         	call	_make8	;wreg free
 11717  003E12  6E28               	movwf	StoreIntInEeprom@val,c
 11718                           
 11719                           ;SystemCommon.c: 127: EepromWrite(address - idx, val);
 11720  003E14  C028  F01B         	movff	StoreIntInEeprom@val,EepromWrite@data
 11721  003E18  5029               	movf	StoreIntInEeprom@idx,w,c
 11722  003E1A  0800               	sublw	0
 11723  003E1C  2425               	addwf	StoreIntInEeprom@address,w,c
 11724  003E1E  ECBA  F021         	call	_EepromWrite
 11725  003E22  0629               	decf	StoreIntInEeprom@idx,f,c
 11726  003E24                     l1434:
 11727  003E24  5029               	movf	StoreIntInEeprom@idx,w,c
 11728  003E26  B4D8               	btfsc	status,2,c
 11729  003E28  0012               	return	
 11730  003E2A  D7E7               	goto	l1435
 11731  003E2C                     __end_of_StoreIntInEeprom:
 11732                           	opt stack 0
 11733                           tosu	equ	0xFFF
 11734                           tosh	equ	0xFFE
 11735                           tosl	equ	0xFFD
 11736                           pclath	equ	0xFFA
 11737                           tblptru	equ	0xFF8
 11738                           tblptrh	equ	0xFF7
 11739                           tblptrl	equ	0xFF6
 11740                           tablat	equ	0xFF5
 11741                           prodh	equ	0xFF4
 11742                           prodl	equ	0xFF3
 11743                           intcon	equ	0xFF2
 11744                           intcon2	equ	0xFF1
 11745                           postinc0	equ	0xFEE
 11746                           plusw0	equ	0xFEB
 11747                           wreg	equ	0xFE8
 11748                           indf1	equ	0xFE7
 11749                           postdec1	equ	0xFE5
 11750                           fsr1h	equ	0xFE2
 11751                           fsr1l	equ	0xFE1
 11752                           indf2	equ	0xFDF
 11753                           postinc2	equ	0xFDE
 11754                           postdec2	equ	0xFDD
 11755                           plusw2	equ	0xFDB
 11756                           fsr2h	equ	0xFDA
 11757                           fsr2l	equ	0xFD9
 11758                           status	equ	0xFD8
 11759                           
 11760 ;; *************** function _EepromWrite *****************
 11761 ;; Defined at:
 11762 ;;		line 180 in file "FlashApp.c"
 11763 ;; Parameters:    Size  Location     Type
 11764 ;;  address         1    wreg     unsigned char 
 11765 ;;  data            1   26[COMRAM] unsigned char 
 11766 ;; Auto vars:     Size  Location     Type
 11767 ;;  address         1   27[COMRAM] unsigned char 
 11768 ;; Return value:  Size  Location     Type
 11769 ;;                  1    wreg      void 
 11770 ;; Registers used:
 11771 ;;		wreg, status,2, cstack
 11772 ;; Tracked objects:
 11773 ;;		On entry : 0/0
 11774 ;;		On exit  : 0/0
 11775 ;;		Unchanged: 0/0
 11776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11777 ;;      Params:         1       0       0       0       0       0       0
 11778 ;;      Locals:         1       0       0       0       0       0       0
 11779 ;;      Temps:          0       0       0       0       0       0       0
 11780 ;;      Totals:         2       0       0       0       0       0       0
 11781 ;;Total ram usage:        2 bytes
 11782 ;; Hardware stack levels used:    1
 11783 ;; Hardware stack levels required when called:    5
 11784 ;; This function calls:
 11785 ;;		_DATAEE_WriteByte
 11786 ;; This function is called by:
 11787 ;;		_StoreIntInEeprom
 11788 ;; This function uses a non-reentrant model
 11789 ;;
 11790                           
 11791                           	psect	text64
 11792  004374                     __ptext64:
 11793                           	opt stack 0
 11794  004374                     _EepromWrite:
 11795                           	opt stack 21
 11796                           
 11797                           ;incstack = 0
 11798                           ;EepromWrite@address stored from wreg
 11799  004374  6E1C               	movwf	EepromWrite@address,c
 11800                           
 11801                           ;FlashApp.c: 182: DATAEE_WriteByte(address, data);
 11802  004376  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
 11803  00437A  501C               	movf	EepromWrite@address,w,c
 11804  00437C  EC69  F01F         	call	_DATAEE_WriteByte
 11805  004380  0012               	return		;funcret
 11806  004382                     __end_of_EepromWrite:
 11807                           	opt stack 0
 11808                           tosu	equ	0xFFF
 11809                           tosh	equ	0xFFE
 11810                           tosl	equ	0xFFD
 11811                           pclath	equ	0xFFA
 11812                           tblptru	equ	0xFF8
 11813                           tblptrh	equ	0xFF7
 11814                           tblptrl	equ	0xFF6
 11815                           tablat	equ	0xFF5
 11816                           prodh	equ	0xFF4
 11817                           prodl	equ	0xFF3
 11818                           intcon	equ	0xFF2
 11819                           intcon2	equ	0xFF1
 11820                           postinc0	equ	0xFEE
 11821                           plusw0	equ	0xFEB
 11822                           wreg	equ	0xFE8
 11823                           indf1	equ	0xFE7
 11824                           postdec1	equ	0xFE5
 11825                           fsr1h	equ	0xFE2
 11826                           fsr1l	equ	0xFE1
 11827                           indf2	equ	0xFDF
 11828                           postinc2	equ	0xFDE
 11829                           postdec2	equ	0xFDD
 11830                           plusw2	equ	0xFDB
 11831                           fsr2h	equ	0xFDA
 11832                           fsr2l	equ	0xFD9
 11833                           status	equ	0xFD8
 11834                           
 11835 ;; *************** function _DATAEE_WriteByte *****************
 11836 ;; Defined at:
 11837 ;;		line 167 in file "mcc_generated_files/memory.c"
 11838 ;; Parameters:    Size  Location     Type
 11839 ;;  bAdd            1    wreg     unsigned char 
 11840 ;;  bData           1   23[COMRAM] unsigned char 
 11841 ;; Auto vars:     Size  Location     Type
 11842 ;;  bAdd            1   24[COMRAM] unsigned char 
 11843 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
 11844 ;; Return value:  Size  Location     Type
 11845 ;;                  1    wreg      void 
 11846 ;; Registers used:
 11847 ;;		wreg, status,2
 11848 ;; Tracked objects:
 11849 ;;		On entry : 0/0
 11850 ;;		On exit  : 0/0
 11851 ;;		Unchanged: 0/0
 11852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11853 ;;      Params:         1       0       0       0       0       0       0
 11854 ;;      Locals:         2       0       0       0       0       0       0
 11855 ;;      Temps:          0       0       0       0       0       0       0
 11856 ;;      Totals:         3       0       0       0       0       0       0
 11857 ;;Total ram usage:        3 bytes
 11858 ;; Hardware stack levels used:    1
 11859 ;; Hardware stack levels required when called:    4
 11860 ;; This function calls:
 11861 ;;		Nothing
 11862 ;; This function is called by:
 11863 ;;		_EepromWrite
 11864 ;; This function uses a non-reentrant model
 11865 ;;
 11866                           
 11867                           	psect	text65
 11868  003ED2                     __ptext65:
 11869                           	opt stack 0
 11870  003ED2                     _DATAEE_WriteByte:
 11871                           	opt stack 21
 11872                           
 11873                           ;incstack = 0
 11874                           ;DATAEE_WriteByte@bAdd stored from wreg
 11875  003ED2  6E19               	movwf	DATAEE_WriteByte@bAdd,c
 11876                           
 11877                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
 11878  003ED4  0E00               	movlw	0
 11879  003ED6  BEF2               	btfsc	intcon,7,c	;volatile
 11880  003ED8  0E01               	movlw	1
 11881  003EDA  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
 11882                           
 11883                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
 11884  003EDC  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
 11885                           
 11886                           ;memory.c: 172: EEDATA = bData;
 11887  003EE0  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
 11888                           
 11889                           ;memory.c: 173: EECON1bits.EEPGD = 0;
 11890  003EE4  9EA6               	bcf	4006,7,c	;volsfr
 11891                           
 11892                           ;memory.c: 174: EECON1bits.CFGS = 0;
 11893  003EE6  9CA6               	bcf	4006,6,c	;volsfr
 11894                           
 11895                           ;memory.c: 175: EECON1bits.WREN = 1;
 11896  003EE8  84A6               	bsf	4006,2,c	;volsfr
 11897                           
 11898                           ;memory.c: 176: INTCONbits.GIE = 0;
 11899  003EEA  9EF2               	bcf	intcon,7,c	;volatile
 11900                           
 11901                           ;memory.c: 177: EECON2 = 0x55;
 11902  003EEC  0E55               	movlw	85
 11903  003EEE  6EA7               	movwf	4007,c	;volsfr
 11904                           
 11905                           ;memory.c: 178: EECON2 = 0xAA;
 11906  003EF0  0EAA               	movlw	170
 11907  003EF2  6EA7               	movwf	4007,c	;volsfr
 11908                           
 11909                           ;memory.c: 179: EECON1bits.WR = 1;
 11910  003EF4  82A6               	bsf	4006,1,c	;volsfr
 11911  003EF6                     
 11912                           ;memory.c: 182: {
 11913  003EF6  B2A6               	btfsc	4006,1,c	;volsfr
 11914  003EF8  D7FE               	goto	l1056
 11915                           
 11916                           ;memory.c: 183: }
 11917                           ;memory.c: 185: EECON1bits.WREN = 0;
 11918  003EFA  94A6               	bcf	4006,2,c	;volsfr
 11919                           
 11920                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
 11921  003EFC  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
 11922  003EFE  D002               	bra	u7075
 11923  003F00  9EF2               	bcf	intcon,7,c	;volatile
 11924  003F02  D001               	bra	u7076
 11925  003F04                     u7075:
 11926  003F04  8EF2               	bsf	intcon,7,c	;volatile
 11927  003F06                     u7076:
 11928  003F06  0012               	return		;funcret
 11929  003F08                     __end_of_DATAEE_WriteByte:
 11930                           	opt stack 0
 11931                           tosu	equ	0xFFF
 11932                           tosh	equ	0xFFE
 11933                           tosl	equ	0xFFD
 11934                           pclath	equ	0xFFA
 11935                           tblptru	equ	0xFF8
 11936                           tblptrh	equ	0xFF7
 11937                           tblptrl	equ	0xFF6
 11938                           tablat	equ	0xFF5
 11939                           prodh	equ	0xFF4
 11940                           prodl	equ	0xFF3
 11941                           intcon	equ	0xFF2
 11942                           intcon2	equ	0xFF1
 11943                           postinc0	equ	0xFEE
 11944                           plusw0	equ	0xFEB
 11945                           wreg	equ	0xFE8
 11946                           indf1	equ	0xFE7
 11947                           postdec1	equ	0xFE5
 11948                           fsr1h	equ	0xFE2
 11949                           fsr1l	equ	0xFE1
 11950                           indf2	equ	0xFDF
 11951                           postinc2	equ	0xFDE
 11952                           postdec2	equ	0xFDD
 11953                           plusw2	equ	0xFDB
 11954                           fsr2h	equ	0xFDA
 11955                           fsr2l	equ	0xFD9
 11956                           status	equ	0xFD8
 11957                           
 11958 ;; *************** function _SWSPI_send_word *****************
 11959 ;; Defined at:
 11960 ;;		line 17 in file "SwSpiApp.c"
 11961 ;; Parameters:    Size  Location     Type
 11962 ;;  phrType         1    wreg     enum E1
 11963 ;;  data            4   40[COMRAM] unsigned long 
 11964 ;;  dataSize        1   44[COMRAM] unsigned char 
 11965 ;; Auto vars:     Size  Location     Type
 11966 ;;  phrType         1   41[BANK0 ] enum E1
 11967 ;;  datac           1   38[BANK0 ] unsigned char 
 11968 ;;  idx             2   39[BANK0 ] int 
 11969 ;; Return value:  Size  Location     Type
 11970 ;;                  1    wreg      void 
 11971 ;; Registers used:
 11972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11973 ;; Tracked objects:
 11974 ;;		On entry : 0/0
 11975 ;;		On exit  : 0/0
 11976 ;;		Unchanged: 0/0
 11977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11978 ;;      Params:         5       0       0       0       0       0       0
 11979 ;;      Locals:         0       4       0       0       0       0       0
 11980 ;;      Temps:          0       0       0       0       0       0       0
 11981 ;;      Totals:         5       4       0       0       0       0       0
 11982 ;;Total ram usage:        9 bytes
 11983 ;; Hardware stack levels used:    1
 11984 ;; Hardware stack levels required when called:    7
 11985 ;; This function calls:
 11986 ;;		_SWSPI_DAC_send_bits
 11987 ;;		_SWSPI_Synth_send_bits
 11988 ;;		_SwSpi_Set_Dac_Sync_Pin
 11989 ;;		_SwSpi_Set_Synth_Le_Pin
 11990 ;;		_make8
 11991 ;; This function is called by:
 11992 ;;		_DacInit
 11993 ;;		_DacSetValue
 11994 ;;		_InitSynth
 11995 ;;		_UpdateSynthFreq
 11996 ;; This function uses a non-reentrant model
 11997 ;;
 11998                           
 11999                           	psect	text66
 12000  003004                     __ptext66:
 12001                           	opt stack 0
 12002  003004                     _SWSPI_send_word:
 12003                           	opt stack 20
 12004                           
 12005                           ;incstack = 0
 12006                           ;SWSPI_send_word@phrType stored from wreg
 12007  003004  0100               	movlb	0	; () banked
 12008  003006  6F89               	movwf	SWSPI_send_word@phrType& (0+255),b
 12009                           
 12010                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 12011  003008  9EF2               	bcf	intcon,7,c	;volatile
 12012                           
 12013                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 12014  00300A  0100               	movlb	0	; () banked
 12015  00300C  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12016  00300E  B4D8               	btfsc	status,2,c
 12017  003010  D003               	goto	u7700
 12018                           
 12019                           ; BSR set to: 0
 12020  003012  0589               	decf	SWSPI_send_word@phrType& (0+255),w,b
 12021  003014  A4D8               	btfss	status,2,c
 12022  003016  D018               	goto	l632
 12023  003018                     u7700:
 12024                           
 12025                           ; BSR set to: 0
 12026                           ;SwSpiApp.c: 24: {
 12027                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 12028                           
 12029                           ; BSR set to: 0
 12030  003018  0E00               	movlw	0
 12031  00301A  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 12032  00301C  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12033  00301E  ECA4  F01E         	call	_SwSpi_Set_Synth_Le_Pin
 12034                           
 12035                           ;SwSpiApp.c: 26: SWSPI_Synth_send_bits(phrType, data);
 12036  003022  C029  F025         	movff	SWSPI_send_word@data,SWSPI_Synth_send_bits@data
 12037  003026  C02A  F026         	movff	SWSPI_send_word@data+1,SWSPI_Synth_send_bits@data+1
 12038  00302A  C02B  F027         	movff	SWSPI_send_word@data+2,SWSPI_Synth_send_bits@data+2
 12039  00302E  C02C  F028         	movff	SWSPI_send_word@data+3,SWSPI_Synth_send_bits@data+3
 12040  003032  0100               	movlb	0	; () banked
 12041  003034  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12042  003036  EC3D  F016         	call	_SWSPI_Synth_send_bits
 12043                           
 12044                           ;SwSpiApp.c: 27: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 12045  00303A  0E01               	movlw	1
 12046  00303C  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 12047  00303E  0100               	movlb	0	; () banked
 12048  003040  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12049  003042  ECA4  F01E         	call	_SwSpi_Set_Synth_Le_Pin
 12050                           
 12051                           ;SwSpiApp.c: 28: }
 12052  003046  D031               	goto	l636
 12053  003048                     l632:
 12054                           
 12055                           ;SwSpiApp.c: 29: else if(phrType == EXT_DAC)
 12056  003048  0E02               	movlw	2
 12057  00304A  0100               	movlb	0	; () banked
 12058  00304C  1989               	xorwf	SWSPI_send_word@phrType& (0+255),w,b
 12059  00304E  A4D8               	btfss	status,2,c
 12060  003050  D02C               	goto	l636
 12061                           
 12062                           ; BSR set to: 0
 12063                           ;SwSpiApp.c: 30: {
 12064                           ;SwSpiApp.c: 31: SwSpi_Set_Dac_Sync_Pin(0);
 12065  003052  0E00               	movlw	0
 12066  003054  EC2A  F021         	call	_SwSpi_Set_Dac_Sync_Pin
 12067                           
 12068                           ;SwSpiApp.c: 32: for(int idx = dataSize + 1; idx > 0; idx--)
 12069  003058  0E01               	movlw	1
 12070  00305A  242D               	addwf	SWSPI_send_word@dataSize,w,c
 12071  00305C  0100               	movlb	0	; () banked
 12072  00305E  6F87               	movwf	SWSPI_send_word@idx& (0+255),b
 12073  003060  6B88               	clrf	(SWSPI_send_word@idx+1)& (0+255),b
 12074  003062  0E00               	movlw	0
 12075  003064  2388               	addwfc	(SWSPI_send_word@idx+1)& (0+255),f,b
 12076  003066                     l7873:
 12077                           
 12078                           ; BSR set to: 0
 12079  003066  BF88               	btfsc	(SWSPI_send_word@idx+1)& (0+255),7,b
 12080  003068  D01D               	goto	u7730
 12081  00306A  5188               	movf	(SWSPI_send_word@idx+1)& (0+255),w,b
 12082  00306C  E103               	bnz	l7877
 12083  00306E  0587               	decf	SWSPI_send_word@idx& (0+255),w,b
 12084  003070  A0D8               	btfss	status,0,c
 12085  003072  D018               	goto	u7730
 12086  003074                     l7877:
 12087                           
 12088                           ; BSR set to: 0
 12089                           ;SwSpiApp.c: 33: {
 12090                           ;SwSpiApp.c: 34: uint8_t datac = make8(data, idx - 1);
 12091  003074  C029  F018         	movff	SWSPI_send_word@data,make8@data
 12092  003078  C02A  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 12093  00307C  C02B  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 12094  003080  C02C  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 12095  003084  0587               	decf	SWSPI_send_word@idx& (0+255),w,b
 12096  003086  6E1C               	movwf	make8@dataLocation,c
 12097  003088  EC15  F01C         	call	_make8	;wreg free
 12098  00308C  0100               	movlb	0	; () banked
 12099  00308E  6F86               	movwf	SWSPI_send_word@datac& (0+255),b
 12100                           
 12101                           ;SwSpiApp.c: 35: SWSPI_DAC_send_bits(phrType, datac);
 12102  003090  C086  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 12103  003094  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12104  003096  EC9D  F01C         	call	_SWSPI_DAC_send_bits
 12105  00309A  0100               	movlb	0	; () banked
 12106  00309C  0787               	decf	SWSPI_send_word@idx& (0+255),f,b
 12107  00309E  A0D8               	btfss	status,0,c
 12108  0030A0  0788               	decf	(SWSPI_send_word@idx+1)& (0+255),f,b
 12109  0030A2  D7E1               	goto	l7873
 12110  0030A4                     u7730:
 12111                           
 12112                           ; BSR set to: 0
 12113                           ;SwSpiApp.c: 36: }
 12114                           ;SwSpiApp.c: 37: SwSpi_Set_Dac_Sync_Pin(1);
 12115                           
 12116                           ; BSR set to: 0
 12117  0030A4  0E01               	movlw	1
 12118  0030A6  EC2A  F021         	call	_SwSpi_Set_Dac_Sync_Pin
 12119  0030AA                     l636:
 12120                           
 12121                           ;SwSpiApp.c: 38: }
 12122                           ;SwSpiApp.c: 40: (INTCONbits.GIE = 1);
 12123  0030AA  8EF2               	bsf	intcon,7,c	;volatile
 12124  0030AC  0012               	return		;funcret
 12125  0030AE                     __end_of_SWSPI_send_word:
 12126                           	opt stack 0
 12127                           tosu	equ	0xFFF
 12128                           tosh	equ	0xFFE
 12129                           tosl	equ	0xFFD
 12130                           pclath	equ	0xFFA
 12131                           tblptru	equ	0xFF8
 12132                           tblptrh	equ	0xFF7
 12133                           tblptrl	equ	0xFF6
 12134                           tablat	equ	0xFF5
 12135                           prodh	equ	0xFF4
 12136                           prodl	equ	0xFF3
 12137                           intcon	equ	0xFF2
 12138                           intcon2	equ	0xFF1
 12139                           postinc0	equ	0xFEE
 12140                           plusw0	equ	0xFEB
 12141                           wreg	equ	0xFE8
 12142                           indf1	equ	0xFE7
 12143                           postdec1	equ	0xFE5
 12144                           fsr1h	equ	0xFE2
 12145                           fsr1l	equ	0xFE1
 12146                           indf2	equ	0xFDF
 12147                           postinc2	equ	0xFDE
 12148                           postdec2	equ	0xFDD
 12149                           plusw2	equ	0xFDB
 12150                           fsr2h	equ	0xFDA
 12151                           fsr2l	equ	0xFD9
 12152                           status	equ	0xFD8
 12153                           
 12154 ;; *************** function _make8 *****************
 12155 ;; Defined at:
 12156 ;;		line 92 in file "SystemCommon.c"
 12157 ;; Parameters:    Size  Location     Type
 12158 ;;  data            4   23[COMRAM] unsigned long 
 12159 ;;  dataLocation    1   27[COMRAM] unsigned char 
 12160 ;; Auto vars:     Size  Location     Type
 12161 ;;		None
 12162 ;; Return value:  Size  Location     Type
 12163 ;;                  1    wreg      unsigned char 
 12164 ;; Registers used:
 12165 ;;		wreg, status,2, status,0
 12166 ;; Tracked objects:
 12167 ;;		On entry : 0/0
 12168 ;;		On exit  : 0/0
 12169 ;;		Unchanged: 0/0
 12170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12171 ;;      Params:         5       0       0       0       0       0       0
 12172 ;;      Locals:         0       0       0       0       0       0       0
 12173 ;;      Temps:          4       0       0       0       0       0       0
 12174 ;;      Totals:         9       0       0       0       0       0       0
 12175 ;;Total ram usage:        9 bytes
 12176 ;; Hardware stack levels used:    1
 12177 ;; Hardware stack levels required when called:    4
 12178 ;; This function calls:
 12179 ;;		Nothing
 12180 ;; This function is called by:
 12181 ;;		_FlashReadCondition
 12182 ;;		_DacReadValue
 12183 ;;		_SynthReadData
 12184 ;;		_SWSPI_send_word
 12185 ;;		_StoreIntInEeprom
 12186 ;; This function uses a non-reentrant model
 12187 ;;
 12188                           
 12189                           	psect	text67
 12190  00382A                     __ptext67:
 12191                           	opt stack 0
 12192  00382A                     _make8:
 12193                           	opt stack 22
 12194                           
 12195                           ;SystemCommon.c: 94: switch(dataLocation)
 12196                           
 12197                           ;incstack = 0
 12198  00382A  D01F               	goto	l1419
 12199  00382C                     
 12200                           ;SystemCommon.c: 97: return (data & 0x000000ff);
 12201  00382C  5018               	movf	make8@data,w,c
 12202  00382E  0012               	return	
 12203  003830                     
 12204                           ;SystemCommon.c: 100: return (data & 0x0000ff00) >> 8;
 12205  003830  5019               	movf	make8@data+1,w,c
 12206  003832  0012               	return	
 12207  003834                     
 12208                           ;SystemCommon.c: 103: return (data & 0x00ff0000) >> 16;
 12209  003834  501A               	movf	make8@data+2,w,c
 12210  003836  0012               	return	
 12211  003838                     
 12212                           ;SystemCommon.c: 106: return (data & 0xff000000) >> 24;
 12213  003838  0E00               	movlw	0
 12214  00383A  1418               	andwf	make8@data,w,c
 12215  00383C  6E1D               	movwf	??_make8& (0+255),c
 12216  00383E  0E00               	movlw	0
 12217  003840  1419               	andwf	make8@data+1,w,c
 12218  003842  6E1E               	movwf	(??_make8+1)& (0+255),c
 12219  003844  0E00               	movlw	0
 12220  003846  141A               	andwf	make8@data+2,w,c
 12221  003848  6E1F               	movwf	(??_make8+2)& (0+255),c
 12222  00384A  0EFF               	movlw	255
 12223  00384C  141B               	andwf	make8@data+3,w,c
 12224  00384E  6E20               	movwf	(??_make8+3)& (0+255),c
 12225  003850  0E19               	movlw	25
 12226  003852  D005               	goto	u7440
 12227  003854                     u7445:
 12228  003854  90D8               	bcf	status,0,c
 12229  003856  3220               	rrcf	??_make8+3,f,c
 12230  003858  321F               	rrcf	??_make8+2,f,c
 12231  00385A  321E               	rrcf	??_make8+1,f,c
 12232  00385C  321D               	rrcf	??_make8,f,c
 12233  00385E                     u7440:
 12234  00385E  2EE8               	decfsz	wreg,f,c
 12235  003860  D7F9               	goto	u7445
 12236  003862  501D               	movf	??_make8,w,c
 12237  003864  0012               	return	
 12238  003866                     
 12239                           ;SystemCommon.c: 109: return (0);
 12240  003866  0E00               	movlw	0
 12241                           
 12242                           ;SystemCommon.c: 110: }
 12243  003868  0012               	return	
 12244  00386A                     l1419:
 12245  00386A  501C               	movf	make8@dataLocation,w,c
 12246                           
 12247                           ; Switch size 1, requested type "space"
 12248                           ; Number of cases is 4, Range of values is 0 to 3
 12249                           ; switch strategies available:
 12250                           ; Name         Instructions Cycles
 12251                           ; simple_byte           13     7 (average)
 12252                           ;	Chosen strategy is simple_byte
 12253  00386C  0A00               	xorlw	0	; case 0
 12254  00386E  B4D8               	btfsc	status,2,c
 12255  003870  D7DD               	goto	l1420
 12256  003872  0A01               	xorlw	1	; case 1
 12257  003874  B4D8               	btfsc	status,2,c
 12258  003876  D7DC               	goto	l1422
 12259  003878  0A03               	xorlw	3	; case 2
 12260  00387A  B4D8               	btfsc	status,2,c
 12261  00387C  D7DB               	goto	l1423
 12262  00387E  0A01               	xorlw	1	; case 3
 12263  003880  B4D8               	btfsc	status,2,c
 12264  003882  D7DA               	goto	l1424
 12265  003884  D7F0               	goto	l1425
 12266  003886                     __end_of_make8:
 12267                           	opt stack 0
 12268                           tosu	equ	0xFFF
 12269                           tosh	equ	0xFFE
 12270                           tosl	equ	0xFFD
 12271                           pclath	equ	0xFFA
 12272                           tblptru	equ	0xFF8
 12273                           tblptrh	equ	0xFF7
 12274                           tblptrl	equ	0xFF6
 12275                           tablat	equ	0xFF5
 12276                           prodh	equ	0xFF4
 12277                           prodl	equ	0xFF3
 12278                           intcon	equ	0xFF2
 12279                           intcon2	equ	0xFF1
 12280                           postinc0	equ	0xFEE
 12281                           plusw0	equ	0xFEB
 12282                           wreg	equ	0xFE8
 12283                           indf1	equ	0xFE7
 12284                           postdec1	equ	0xFE5
 12285                           fsr1h	equ	0xFE2
 12286                           fsr1l	equ	0xFE1
 12287                           indf2	equ	0xFDF
 12288                           postinc2	equ	0xFDE
 12289                           postdec2	equ	0xFDD
 12290                           plusw2	equ	0xFDB
 12291                           fsr2h	equ	0xFDA
 12292                           fsr2l	equ	0xFD9
 12293                           status	equ	0xFD8
 12294                           
 12295 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 12296 ;; Defined at:
 12297 ;;		line 232 in file "SwSpiApp.c"
 12298 ;; Parameters:    Size  Location     Type
 12299 ;;  phrType         1    wreg     enum E1
 12300 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12301 ;; Auto vars:     Size  Location     Type
 12302 ;;  phrType         1   24[COMRAM] enum E1
 12303 ;; Return value:  Size  Location     Type
 12304 ;;                  1    wreg      void 
 12305 ;; Registers used:
 12306 ;;		wreg, status,2, status,0
 12307 ;; Tracked objects:
 12308 ;;		On entry : 0/0
 12309 ;;		On exit  : 0/0
 12310 ;;		Unchanged: 0/0
 12311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12312 ;;      Params:         1       0       0       0       0       0       0
 12313 ;;      Locals:         1       0       0       0       0       0       0
 12314 ;;      Temps:          0       0       0       0       0       0       0
 12315 ;;      Totals:         2       0       0       0       0       0       0
 12316 ;;Total ram usage:        2 bytes
 12317 ;; Hardware stack levels used:    1
 12318 ;; Hardware stack levels required when called:    4
 12319 ;; This function calls:
 12320 ;;		Nothing
 12321 ;; This function is called by:
 12322 ;;		_SWSPI_send_word
 12323 ;; This function uses a non-reentrant model
 12324 ;;
 12325                           
 12326                           	psect	text68
 12327  003D48                     __ptext68:
 12328                           	opt stack 0
 12329  003D48                     _SwSpi_Set_Synth_Le_Pin:
 12330                           	opt stack 22
 12331                           
 12332                           ;incstack = 0
 12333                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 12334  003D48  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 12335                           
 12336                           ;SwSpiApp.c: 234: switch(phrType)
 12337  003D4A  D014               	goto	l744
 12338  003D4C                     
 12339                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 12340  003D4C  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12341  003D4E  A4D8               	btfss	status,2,c
 12342  003D50  D002               	goto	l746
 12343                           
 12344                           ;SwSpiApp.c: 238: {
 12345                           ;SwSpiApp.c: 239: do { LATCbits.LATC2 = 1; } while(0);
 12346  003D52  848B               	bsf	3979,2,c	;volatile
 12347                           
 12348                           ;SwSpiApp.c: 240: }
 12349  003D54  0012               	return	
 12350  003D56                     l746:
 12351                           
 12352                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 12353  003D56  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12354  003D58  A4D8               	btfss	status,2,c
 12355  003D5A  0012               	return	
 12356                           
 12357                           ;SwSpiApp.c: 242: {
 12358                           ;SwSpiApp.c: 243: do { LATCbits.LATC2 = 0; } while(0);
 12359  003D5C  948B               	bcf	3979,2,c	;volatile
 12360                           
 12361                           ;SwSpiApp.c: 244: }
 12362                           ;SwSpiApp.c: 245: break;
 12363  003D5E  0012               	return	
 12364  003D60                     
 12365                           ;SwSpiApp.c: 248: if(cPinMode == 1)
 12366  003D60  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12367  003D62  A4D8               	btfss	status,2,c
 12368  003D64  D002               	goto	l755
 12369                           
 12370                           ;SwSpiApp.c: 249: {
 12371                           ;SwSpiApp.c: 250: do { LATDbits.LATD3 = 1; } while(0);
 12372  003D66  868C               	bsf	3980,3,c	;volatile
 12373                           
 12374                           ;SwSpiApp.c: 251: }
 12375  003D68  0012               	return	
 12376  003D6A                     l755:
 12377                           
 12378                           ;SwSpiApp.c: 252: else if(cPinMode == 0)
 12379  003D6A  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12380  003D6C  A4D8               	btfss	status,2,c
 12381  003D6E  0012               	return	
 12382                           
 12383                           ;SwSpiApp.c: 253: {
 12384                           ;SwSpiApp.c: 254: do { LATDbits.LATD3 = 0; } while(0);
 12385  003D70  968C               	bcf	3980,3,c	;volatile
 12386                           
 12387                           ;SwSpiApp.c: 257: }
 12388                           
 12389                           ;SwSpiApp.c: 255: }
 12390                           ;SwSpiApp.c: 256: break;
 12391  003D72  0012               	return	
 12392  003D74                     l744:
 12393  003D74  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 12394                           
 12395                           ; Switch size 1, requested type "space"
 12396                           ; Number of cases is 2, Range of values is 0 to 1
 12397                           ; switch strategies available:
 12398                           ; Name         Instructions Cycles
 12399                           ; simple_byte            7     4 (average)
 12400                           ;	Chosen strategy is simple_byte
 12401  003D76  0A00               	xorlw	0	; case 0
 12402  003D78  B4D8               	btfsc	status,2,c
 12403  003D7A  D7E8               	goto	l745
 12404  003D7C  0A01               	xorlw	1	; case 1
 12405  003D7E  A4D8               	btfss	status,2,c
 12406  003D80  0012               	return	
 12407  003D82  D7EE               	goto	l754
 12408  003D84                     __end_of_SwSpi_Set_Synth_Le_Pin:
 12409                           	opt stack 0
 12410                           tosu	equ	0xFFF
 12411                           tosh	equ	0xFFE
 12412                           tosl	equ	0xFFD
 12413                           pclath	equ	0xFFA
 12414                           tblptru	equ	0xFF8
 12415                           tblptrh	equ	0xFF7
 12416                           tblptrl	equ	0xFF6
 12417                           tablat	equ	0xFF5
 12418                           prodh	equ	0xFF4
 12419                           prodl	equ	0xFF3
 12420                           intcon	equ	0xFF2
 12421                           intcon2	equ	0xFF1
 12422                           postinc0	equ	0xFEE
 12423                           plusw0	equ	0xFEB
 12424                           wreg	equ	0xFE8
 12425                           indf1	equ	0xFE7
 12426                           postdec1	equ	0xFE5
 12427                           fsr1h	equ	0xFE2
 12428                           fsr1l	equ	0xFE1
 12429                           indf2	equ	0xFDF
 12430                           postinc2	equ	0xFDE
 12431                           postdec2	equ	0xFDD
 12432                           plusw2	equ	0xFDB
 12433                           fsr2h	equ	0xFDA
 12434                           fsr2l	equ	0xFD9
 12435                           status	equ	0xFD8
 12436                           
 12437 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 12438 ;; Defined at:
 12439 ;;		line 260 in file "SwSpiApp.c"
 12440 ;; Parameters:    Size  Location     Type
 12441 ;;  cPinMode        1    wreg     unsigned char 
 12442 ;; Auto vars:     Size  Location     Type
 12443 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12444 ;; Return value:  Size  Location     Type
 12445 ;;                  1    wreg      void 
 12446 ;; Registers used:
 12447 ;;		wreg, status,2, status,0
 12448 ;; Tracked objects:
 12449 ;;		On entry : 0/0
 12450 ;;		On exit  : 0/0
 12451 ;;		Unchanged: 0/0
 12452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12453 ;;      Params:         0       0       0       0       0       0       0
 12454 ;;      Locals:         1       0       0       0       0       0       0
 12455 ;;      Temps:          0       0       0       0       0       0       0
 12456 ;;      Totals:         1       0       0       0       0       0       0
 12457 ;;Total ram usage:        1 bytes
 12458 ;; Hardware stack levels used:    1
 12459 ;; Hardware stack levels required when called:    4
 12460 ;; This function calls:
 12461 ;;		Nothing
 12462 ;; This function is called by:
 12463 ;;		_SWSPI_send_word
 12464 ;; This function uses a non-reentrant model
 12465 ;;
 12466                           
 12467                           	psect	text69
 12468  004254                     __ptext69:
 12469                           	opt stack 0
 12470  004254                     _SwSpi_Set_Dac_Sync_Pin:
 12471                           	opt stack 22
 12472                           
 12473                           ;incstack = 0
 12474                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 12475  004254  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 12476                           
 12477                           ;SwSpiApp.c: 262: switch(cPinMode)
 12478  004256  D004               	goto	l765
 12479  004258                     
 12480                           ;SwSpiApp.c: 265: do { LATAbits.LATA2 = 0; } while(0);
 12481  004258  9489               	bcf	3977,2,c	;volatile
 12482                           
 12483                           ;SwSpiApp.c: 266: break;
 12484  00425A  0012               	return	
 12485  00425C                     
 12486                           ;SwSpiApp.c: 269: do { LATAbits.LATA2 = 1; } while(0);
 12487  00425C  8489               	bsf	3977,2,c	;volatile
 12488                           
 12489                           ;SwSpiApp.c: 271: }
 12490                           
 12491                           ;SwSpiApp.c: 270: break;
 12492  00425E  0012               	return	
 12493  004260                     l765:
 12494  004260  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 12495                           
 12496                           ; Switch size 1, requested type "space"
 12497                           ; Number of cases is 2, Range of values is 0 to 1
 12498                           ; switch strategies available:
 12499                           ; Name         Instructions Cycles
 12500                           ; simple_byte            7     4 (average)
 12501                           ;	Chosen strategy is simple_byte
 12502  004262  0A00               	xorlw	0	; case 0
 12503  004264  B4D8               	btfsc	status,2,c
 12504  004266  D7F8               	goto	l766
 12505  004268  0A01               	xorlw	1	; case 1
 12506  00426A  A4D8               	btfss	status,2,c
 12507  00426C  0012               	return	
 12508  00426E  D7F6               	goto	l770
 12509  004270                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 12510                           	opt stack 0
 12511                           tosu	equ	0xFFF
 12512                           tosh	equ	0xFFE
 12513                           tosl	equ	0xFFD
 12514                           pclath	equ	0xFFA
 12515                           tblptru	equ	0xFF8
 12516                           tblptrh	equ	0xFF7
 12517                           tblptrl	equ	0xFF6
 12518                           tablat	equ	0xFF5
 12519                           prodh	equ	0xFF4
 12520                           prodl	equ	0xFF3
 12521                           intcon	equ	0xFF2
 12522                           intcon2	equ	0xFF1
 12523                           postinc0	equ	0xFEE
 12524                           plusw0	equ	0xFEB
 12525                           wreg	equ	0xFE8
 12526                           indf1	equ	0xFE7
 12527                           postdec1	equ	0xFE5
 12528                           fsr1h	equ	0xFE2
 12529                           fsr1l	equ	0xFE1
 12530                           indf2	equ	0xFDF
 12531                           postinc2	equ	0xFDE
 12532                           postdec2	equ	0xFDD
 12533                           plusw2	equ	0xFDB
 12534                           fsr2h	equ	0xFDA
 12535                           fsr2l	equ	0xFD9
 12536                           status	equ	0xFD8
 12537                           
 12538 ;; *************** function _SWSPI_Synth_send_bits *****************
 12539 ;; Defined at:
 12540 ;;		line 67 in file "SwSpiApp.c"
 12541 ;; Parameters:    Size  Location     Type
 12542 ;;  phrType         1    wreg     enum E1
 12543 ;;  data            4   36[COMRAM] unsigned long 
 12544 ;; Auto vars:     Size  Location     Type
 12545 ;;  phrType         1   37[BANK0 ] enum E1
 12546 ;;  bitArray       32    0[BANK0 ] unsigned char [32]
 12547 ;;  mask            4   32[BANK0 ] unsigned long 
 12548 ;;  count           1   36[BANK0 ] unsigned char 
 12549 ;; Return value:  Size  Location     Type
 12550 ;;                  1    wreg      void 
 12551 ;; Registers used:
 12552 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12553 ;; Tracked objects:
 12554 ;;		On entry : 0/0
 12555 ;;		On exit  : 0/0
 12556 ;;		Unchanged: 0/0
 12557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12558 ;;      Params:         4       0       0       0       0       0       0
 12559 ;;      Locals:         0      38       0       0       0       0       0
 12560 ;;      Temps:          0       0       0       0       0       0       0
 12561 ;;      Totals:         4      38       0       0       0       0       0
 12562 ;;Total ram usage:       42 bytes
 12563 ;; Hardware stack levels used:    1
 12564 ;; Hardware stack levels required when called:    6
 12565 ;; This function calls:
 12566 ;;		_FillArray
 12567 ;;		_Make32bitsArray
 12568 ;;		_SwSpi_Clk_Pin
 12569 ;;		_SwSpi_Data_Pin
 12570 ;; This function is called by:
 12571 ;;		_SWSPI_send_word
 12572 ;; This function uses a non-reentrant model
 12573 ;;
 12574                           
 12575                           	psect	text70
 12576  002C7A                     __ptext70:
 12577                           	opt stack 0
 12578  002C7A                     _SWSPI_Synth_send_bits:
 12579                           	opt stack 20
 12580                           
 12581                           ;incstack = 0
 12582                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 12583  002C7A  0100               	movlb	0	; () banked
 12584  002C7C  6F85               	movwf	SWSPI_Synth_send_bits@phrType& (0+255),b
 12585                           
 12586                           ;SwSpiApp.c: 69: uint8_t count;
 12587                           ;SwSpiApp.c: 70: uint32_t mask = 0x1;
 12588  002C7E  0E01               	movlw	1
 12589  002C80  0100               	movlb	0	; () banked
 12590  002C82  6F80               	movwf	SWSPI_Synth_send_bits@mask& (0+255),b
 12591  002C84  0E00               	movlw	0
 12592  002C86  6F81               	movwf	(SWSPI_Synth_send_bits@mask+1)& (0+255),b
 12593  002C88  0E00               	movlw	0
 12594  002C8A  6F82               	movwf	(SWSPI_Synth_send_bits@mask+2)& (0+255),b
 12595  002C8C  0E00               	movlw	0
 12596  002C8E  6F83               	movwf	(SWSPI_Synth_send_bits@mask+3)& (0+255),b
 12597                           
 12598                           ; BSR set to: 0
 12599                           ;SwSpiApp.c: 72: bool bitArray[32];
 12600                           ;SwSpiApp.c: 73: FillArray(bitArray, sizeof(bitArray), 0x0);
 12601  002C90  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 12602  002C92  6E20               	movwf	FillArray@array,c
 12603  002C94  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12604  002C96  6E21               	movwf	FillArray@array+1,c
 12605  002C98  0E00               	movlw	0
 12606  002C9A  6E23               	movwf	FillArray@size+1,c
 12607  002C9C  0E20               	movlw	32
 12608  002C9E  6E22               	movwf	FillArray@size,c
 12609  002CA0  0E00               	movlw	0
 12610  002CA2  6E24               	movwf	FillArray@value,c
 12611  002CA4  EC38  F021         	call	_FillArray	;wreg free
 12612                           
 12613                           ;SwSpiApp.c: 75: Make32bitsArray(bitArray, data);
 12614  002CA8  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 12615  002CAA  6E18               	movwf	Make32bitsArray@array,c
 12616  002CAC  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12617  002CAE  6E19               	movwf	Make32bitsArray@array+1,c
 12618  002CB0  C025  F01A         	movff	SWSPI_Synth_send_bits@data,Make32bitsArray@data
 12619  002CB4  C026  F01B         	movff	SWSPI_Synth_send_bits@data+1,Make32bitsArray@data+1
 12620  002CB8  C027  F01C         	movff	SWSPI_Synth_send_bits@data+2,Make32bitsArray@data+2
 12621  002CBC  C028  F01D         	movff	SWSPI_Synth_send_bits@data+3,Make32bitsArray@data+3
 12622  002CC0  EC71  F01C         	call	_Make32bitsArray	;wreg free
 12623                           
 12624                           ;SwSpiApp.c: 77: for (count = 0; count <= 31 ; count++)
 12625  002CC4  0E00               	movlw	0
 12626  002CC6  0100               	movlb	0	; () banked
 12627  002CC8  6F84               	movwf	SWSPI_Synth_send_bits@count& (0+255),b
 12628  002CCA                     l7707:
 12629                           
 12630                           ; BSR set to: 0
 12631  002CCA  0E1F               	movlw	31
 12632  002CCC  6584               	cpfsgt	SWSPI_Synth_send_bits@count& (0+255),b
 12633  002CCE  D001               	goto	l650
 12634  002CD0  D026               	goto	u7510
 12635  002CD2                     l650:
 12636                           
 12637                           ; BSR set to: 0
 12638                           ;SwSpiApp.c: 78: {
 12639                           ;SwSpiApp.c: 80: SwSpi_Clk_Pin(phrType, 0);
 12640                           
 12641                           ; BSR set to: 0
 12642  002CD2  0E00               	movlw	0
 12643  002CD4  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12644  002CD6  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12645  002CD8  ECF4  F01C         	call	_SwSpi_Clk_Pin
 12646                           
 12647                           ;SwSpiApp.c: 82: if (bitArray[count])
 12648  002CDC  0100               	movlb	0	; () banked
 12649  002CDE  5184               	movf	SWSPI_Synth_send_bits@count& (0+255),w,b
 12650  002CE0  0D01               	mullw	1
 12651  002CE2  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 12652  002CE4  24F3               	addwf	prodl,w,c
 12653  002CE6  6ED9               	movwf	fsr2l,c
 12654  002CE8  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12655  002CEA  20F4               	addwfc	prodh,w,c
 12656  002CEC  6EDA               	movwf	fsr2h,c
 12657  002CEE  50DF               	movf	indf2,w,c
 12658  002CF0  B4D8               	btfsc	status,2,c
 12659  002CF2  D006               	goto	l652
 12660                           
 12661                           ; BSR set to: 0
 12662                           ;SwSpiApp.c: 83: {
 12663                           ;SwSpiApp.c: 84: SwSpi_Data_Pin(phrType, 1);
 12664  002CF4  0E01               	movlw	1
 12665  002CF6  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12666  002CF8  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12667  002CFA  ECC9  F01C         	call	_SwSpi_Data_Pin
 12668                           
 12669                           ;SwSpiApp.c: 85: }
 12670  002CFE  D006               	goto	l653
 12671  002D00                     l652:
 12672                           
 12673                           ;SwSpiApp.c: 86: else
 12674                           ;SwSpiApp.c: 87: {
 12675                           ;SwSpiApp.c: 88: SwSpi_Data_Pin(phrType, 0);
 12676  002D00  0E00               	movlw	0
 12677  002D02  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12678  002D04  0100               	movlb	0	; () banked
 12679  002D06  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12680  002D08  ECC9  F01C         	call	_SwSpi_Data_Pin
 12681  002D0C                     l653:
 12682                           
 12683                           ;SwSpiApp.c: 89: }
 12684                           ;SwSpiApp.c: 91: SwSpi_Clk_Pin(phrType, 1);
 12685  002D0C  0E01               	movlw	1
 12686  002D0E  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12687  002D10  0100               	movlb	0	; () banked
 12688  002D12  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12689  002D14  ECF4  F01C         	call	_SwSpi_Clk_Pin
 12690  002D18  0100               	movlb	0	; () banked
 12691  002D1A  2B84               	incf	SWSPI_Synth_send_bits@count& (0+255),f,b
 12692  002D1C  D7D6               	goto	l7707
 12693  002D1E                     u7510:
 12694                           
 12695                           ; BSR set to: 0
 12696                           ;SwSpiApp.c: 92: }
 12697                           ;SwSpiApp.c: 94: _delay((unsigned long)((50)*(8000000/4000000.0)));
 12698                           
 12699                           ; BSR set to: 0
 12700  002D1E  0E21               	movlw	33
 12701  002D20                     u9117:
 12702  002D20  2EE8               	decfsz	wreg,f,c
 12703  002D22  D7FE               	bra	u9117
 12704  002D24  F000               	nop	
 12705                           
 12706                           ;SwSpiApp.c: 95: SwSpi_Data_Pin(phrType, 0);
 12707  002D26  0E00               	movlw	0
 12708  002D28  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12709  002D2A  0100               	movlb	0	; () banked
 12710  002D2C  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12711  002D2E  ECC9  F01C         	call	_SwSpi_Data_Pin
 12712                           
 12713                           ;SwSpiApp.c: 96: SwSpi_Clk_Pin(phrType, 0);
 12714  002D32  0E00               	movlw	0
 12715  002D34  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12716  002D36  0100               	movlb	0	; () banked
 12717  002D38  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12718  002D3A  ECF4  F01C         	call	_SwSpi_Clk_Pin
 12719  002D3E  0012               	return		;funcret
 12720  002D40                     __end_of_SWSPI_Synth_send_bits:
 12721                           	opt stack 0
 12722                           tosu	equ	0xFFF
 12723                           tosh	equ	0xFFE
 12724                           tosl	equ	0xFFD
 12725                           pclath	equ	0xFFA
 12726                           tblptru	equ	0xFF8
 12727                           tblptrh	equ	0xFF7
 12728                           tblptrl	equ	0xFF6
 12729                           tablat	equ	0xFF5
 12730                           prodh	equ	0xFF4
 12731                           prodl	equ	0xFF3
 12732                           intcon	equ	0xFF2
 12733                           intcon2	equ	0xFF1
 12734                           postinc0	equ	0xFEE
 12735                           plusw0	equ	0xFEB
 12736                           wreg	equ	0xFE8
 12737                           indf1	equ	0xFE7
 12738                           postdec1	equ	0xFE5
 12739                           fsr1h	equ	0xFE2
 12740                           fsr1l	equ	0xFE1
 12741                           indf2	equ	0xFDF
 12742                           postinc2	equ	0xFDE
 12743                           postdec2	equ	0xFDD
 12744                           plusw2	equ	0xFDB
 12745                           fsr2h	equ	0xFDA
 12746                           fsr2l	equ	0xFD9
 12747                           status	equ	0xFD8
 12748                           
 12749 ;; *************** function _Make32bitsArray *****************
 12750 ;; Defined at:
 12751 ;;		line 113 in file "SystemCommon.c"
 12752 ;; Parameters:    Size  Location     Type
 12753 ;;  array           2   23[COMRAM] PTR unsigned char 
 12754 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 12755 ;;  data            4   25[COMRAM] unsigned long 
 12756 ;; Auto vars:     Size  Location     Type
 12757 ;;  idx             2   31[COMRAM] int 
 12758 ;; Return value:  Size  Location     Type
 12759 ;;                  1    wreg      void 
 12760 ;; Registers used:
 12761 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12762 ;; Tracked objects:
 12763 ;;		On entry : 0/0
 12764 ;;		On exit  : 0/0
 12765 ;;		Unchanged: 0/0
 12766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12767 ;;      Params:         6       0       0       0       0       0       0
 12768 ;;      Locals:         2       0       0       0       0       0       0
 12769 ;;      Temps:          2       0       0       0       0       0       0
 12770 ;;      Totals:        10       0       0       0       0       0       0
 12771 ;;Total ram usage:       10 bytes
 12772 ;; Hardware stack levels used:    1
 12773 ;; Hardware stack levels required when called:    4
 12774 ;; This function calls:
 12775 ;;		Nothing
 12776 ;; This function is called by:
 12777 ;;		_SWSPI_Synth_send_bits
 12778 ;; This function uses a non-reentrant model
 12779 ;;
 12780                           
 12781                           	psect	text71
 12782  0038E2                     __ptext71:
 12783                           	opt stack 0
 12784  0038E2                     _Make32bitsArray:
 12785                           	opt stack 21
 12786                           
 12787                           ;SystemCommon.c: 115: for(int idx = 0; idx <= 32; idx++)
 12788                           
 12789                           ;incstack = 0
 12790  0038E2  0E00               	movlw	0
 12791  0038E4  6E21               	movwf	Make32bitsArray@idx+1,c
 12792  0038E6  0E00               	movlw	0
 12793  0038E8  6E20               	movwf	Make32bitsArray@idx,c
 12794  0038EA                     l7495:
 12795  0038EA  BE21               	btfsc	Make32bitsArray@idx+1,7,c
 12796  0038EC  D006               	goto	l1429
 12797  0038EE  5021               	movf	Make32bitsArray@idx+1,w,c
 12798  0038F0  E123               	bnz	l1431
 12799  0038F2  0E21               	movlw	33
 12800  0038F4  5C20               	subwf	Make32bitsArray@idx,w,c
 12801  0038F6  B0D8               	btfsc	status,0,c
 12802  0038F8  0012               	return	
 12803  0038FA                     l1429:
 12804                           
 12805                           ;SystemCommon.c: 116: {
 12806                           ;SystemCommon.c: 117: array[32 - idx - 1] = data % 2;
 12807  0038FA  0E01               	movlw	1
 12808  0038FC  2420               	addwf	Make32bitsArray@idx,w,c
 12809  0038FE  6E1E               	movwf	??_Make32bitsArray& (0+255),c
 12810  003900  0E00               	movlw	0
 12811  003902  2021               	addwfc	Make32bitsArray@idx+1,w,c
 12812  003904  6E1F               	movwf	(??_Make32bitsArray+1)& (0+255),c
 12813  003906  1E1E               	comf	??_Make32bitsArray,f,c
 12814  003908  1E1F               	comf	??_Make32bitsArray+1,f,c
 12815  00390A  4A1E               	infsnz	??_Make32bitsArray,f,c
 12816  00390C  2A1F               	incf	??_Make32bitsArray+1,f,c
 12817  00390E  0E20               	movlw	32
 12818  003910  261E               	addwf	??_Make32bitsArray,f,c
 12819  003912  0E00               	movlw	0
 12820  003914  221F               	addwfc	??_Make32bitsArray+1,f,c
 12821  003916  501E               	movf	??_Make32bitsArray,w,c
 12822  003918  2418               	addwf	Make32bitsArray@array,w,c
 12823  00391A  6ED9               	movwf	fsr2l,c
 12824  00391C  501F               	movf	??_Make32bitsArray+1,w,c
 12825  00391E  2019               	addwfc	Make32bitsArray@array+1,w,c
 12826  003920  6EDA               	movwf	fsr2h,c
 12827  003922  501A               	movf	Make32bitsArray@data,w,c
 12828  003924  0B01               	andlw	1
 12829  003926  6EDF               	movwf	indf2,c
 12830                           
 12831                           ;SystemCommon.c: 118: data /= 2;
 12832  003928  90D8               	bcf	status,0,c
 12833  00392A  321D               	rrcf	Make32bitsArray@data+3,f,c
 12834  00392C  321C               	rrcf	Make32bitsArray@data+2,f,c
 12835  00392E  321B               	rrcf	Make32bitsArray@data+1,f,c
 12836  003930  321A               	rrcf	Make32bitsArray@data,f,c
 12837  003932  4A20               	infsnz	Make32bitsArray@idx,f,c
 12838  003934  2A21               	incf	Make32bitsArray@idx+1,f,c
 12839  003936  D7D9               	goto	l7495
 12840  003938                     l1431:
 12841  003938  0012               	return		;funcret
 12842  00393A                     __end_of_Make32bitsArray:
 12843                           	opt stack 0
 12844                           tosu	equ	0xFFF
 12845                           tosh	equ	0xFFE
 12846                           tosl	equ	0xFFD
 12847                           pclath	equ	0xFFA
 12848                           tblptru	equ	0xFF8
 12849                           tblptrh	equ	0xFF7
 12850                           tblptrl	equ	0xFF6
 12851                           tablat	equ	0xFF5
 12852                           prodh	equ	0xFF4
 12853                           prodl	equ	0xFF3
 12854                           intcon	equ	0xFF2
 12855                           intcon2	equ	0xFF1
 12856                           postinc0	equ	0xFEE
 12857                           plusw0	equ	0xFEB
 12858                           wreg	equ	0xFE8
 12859                           indf1	equ	0xFE7
 12860                           postdec1	equ	0xFE5
 12861                           fsr1h	equ	0xFE2
 12862                           fsr1l	equ	0xFE1
 12863                           indf2	equ	0xFDF
 12864                           postinc2	equ	0xFDE
 12865                           postdec2	equ	0xFDD
 12866                           plusw2	equ	0xFDB
 12867                           fsr2h	equ	0xFDA
 12868                           fsr2l	equ	0xFD9
 12869                           status	equ	0xFD8
 12870                           
 12871 ;; *************** function _FillArray *****************
 12872 ;; Defined at:
 12873 ;;		line 29 in file "SystemCommon.c"
 12874 ;; Parameters:    Size  Location     Type
 12875 ;;  array           2   31[COMRAM] PTR unsigned char 
 12876 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), synthLdTxArray(12), synthLdRxArray(12), 
 12877 ;;  size            2   33[COMRAM] int 
 12878 ;;  value           1   35[COMRAM] unsigned char 
 12879 ;; Auto vars:     Size  Location     Type
 12880 ;;		None
 12881 ;; Return value:  Size  Location     Type
 12882 ;;                  1    wreg      void 
 12883 ;; Registers used:
 12884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12885 ;; Tracked objects:
 12886 ;;		On entry : 0/0
 12887 ;;		On exit  : 0/0
 12888 ;;		Unchanged: 0/0
 12889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12890 ;;      Params:         5       0       0       0       0       0       0
 12891 ;;      Locals:         0       0       0       0       0       0       0
 12892 ;;      Temps:          0       0       0       0       0       0       0
 12893 ;;      Totals:         5       0       0       0       0       0       0
 12894 ;;Total ram usage:        5 bytes
 12895 ;; Hardware stack levels used:    1
 12896 ;; Hardware stack levels required when called:    5
 12897 ;; This function calls:
 12898 ;;		_memset
 12899 ;; This function is called by:
 12900 ;;		_PLLInitialize
 12901 ;;		_SWSPI_Synth_send_bits
 12902 ;; This function uses a non-reentrant model
 12903 ;;
 12904                           
 12905                           	psect	text72
 12906  004270                     __ptext72:
 12907                           	opt stack 0
 12908  004270                     _FillArray:
 12909                           	opt stack 20
 12910                           
 12911                           ;SystemCommon.c: 31: memset(array, value, size);
 12912                           
 12913                           ;incstack = 0
 12914  004270  C020  F018         	movff	FillArray@array,memset@p1
 12915  004274  C021  F019         	movff	FillArray@array+1,memset@p1+1
 12916  004278  C024  F01A         	movff	FillArray@value,memset@c
 12917  00427C  6A1B               	clrf	memset@c+1,c
 12918  00427E  C022  F01C         	movff	FillArray@size,memset@n
 12919  004282  C023  F01D         	movff	FillArray@size+1,memset@n+1
 12920  004286  EC31  F020         	call	_memset	;wreg free
 12921  00428A  0012               	return		;funcret
 12922  00428C                     __end_of_FillArray:
 12923                           	opt stack 0
 12924                           tosu	equ	0xFFF
 12925                           tosh	equ	0xFFE
 12926                           tosl	equ	0xFFD
 12927                           pclath	equ	0xFFA
 12928                           tblptru	equ	0xFF8
 12929                           tblptrh	equ	0xFF7
 12930                           tblptrl	equ	0xFF6
 12931                           tablat	equ	0xFF5
 12932                           prodh	equ	0xFF4
 12933                           prodl	equ	0xFF3
 12934                           intcon	equ	0xFF2
 12935                           intcon2	equ	0xFF1
 12936                           postinc0	equ	0xFEE
 12937                           plusw0	equ	0xFEB
 12938                           wreg	equ	0xFE8
 12939                           indf1	equ	0xFE7
 12940                           postdec1	equ	0xFE5
 12941                           fsr1h	equ	0xFE2
 12942                           fsr1l	equ	0xFE1
 12943                           indf2	equ	0xFDF
 12944                           postinc2	equ	0xFDE
 12945                           postdec2	equ	0xFDD
 12946                           plusw2	equ	0xFDB
 12947                           fsr2h	equ	0xFDA
 12948                           fsr2l	equ	0xFD9
 12949                           status	equ	0xFD8
 12950                           
 12951 ;; *************** function _memset *****************
 12952 ;; Defined at:
 12953 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 12954 ;; Parameters:    Size  Location     Type
 12955 ;;  p1              2   23[COMRAM] PTR void 
 12956 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@
      +TxMsg(29), 
 12957 ;;		 -> SynthReadData@eepromDataArray(20), DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), 
 12958 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 12959 ;;		 -> synthLdTxArray(12), synthLdRxArray(12), 
 12960 ;;  c               2   25[COMRAM] int 
 12961 ;;  n               2   27[COMRAM] unsigned int 
 12962 ;; Auto vars:     Size  Location     Type
 12963 ;;  p               2   29[COMRAM] PTR unsigned char 
 12964 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@
      +TxMsg(29), 
 12965 ;;		 -> SynthReadData@eepromDataArray(20), DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), 
 12966 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 12967 ;;		 -> synthLdTxArray(12), synthLdRxArray(12), 
 12968 ;; Return value:  Size  Location     Type
 12969 ;;                  2   23[COMRAM] PTR void 
 12970 ;; Registers used:
 12971 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12972 ;; Tracked objects:
 12973 ;;		On entry : 0/0
 12974 ;;		On exit  : 0/0
 12975 ;;		Unchanged: 0/0
 12976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12977 ;;      Params:         6       0       0       0       0       0       0
 12978 ;;      Locals:         2       0       0       0       0       0       0
 12979 ;;      Temps:          0       0       0       0       0       0       0
 12980 ;;      Totals:         8       0       0       0       0       0       0
 12981 ;;Total ram usage:        8 bytes
 12982 ;; Hardware stack levels used:    1
 12983 ;; Hardware stack levels required when called:    4
 12984 ;; This function calls:
 12985 ;;		Nothing
 12986 ;; This function is called by:
 12987 ;;		_ZeroArray
 12988 ;;		_FillArray
 12989 ;; This function uses a non-reentrant model
 12990 ;;
 12991                           
 12992                           	psect	text73
 12993  004062                     __ptext73:
 12994                           	opt stack 0
 12995  004062                     _memset:
 12996                           	opt stack 24
 12997                           
 12998                           ;incstack = 0
 12999  004062  C018  F01E         	movff	memset@p1,memset@p
 13000  004066  C019  F01F         	movff	memset@p1+1,memset@p+1
 13001  00406A  D008               	goto	l2024
 13002  00406C                     l7277:
 13003  00406C  C01E  FFD9         	movff	memset@p,fsr2l
 13004  004070  C01F  FFDA         	movff	memset@p+1,fsr2h
 13005  004074  C01A  FFDF         	movff	memset@c,indf2
 13006  004078  4A1E               	infsnz	memset@p,f,c
 13007  00407A  2A1F               	incf	memset@p+1,f,c
 13008  00407C                     l2024:
 13009  00407C  061C               	decf	memset@n,f,c
 13010  00407E  A0D8               	btfss	status,0,c
 13011  004080  061D               	decf	memset@n+1,f,c
 13012  004082  281C               	incf	memset@n,w,c
 13013  004084  E1F3               	bnz	l7277
 13014  004086  281D               	incf	memset@n+1,w,c
 13015  004088  B4D8               	btfsc	status,2,c
 13016  00408A  0012               	return	
 13017  00408C  D7EF               	goto	l2025
 13018  00408E                     __end_of_memset:
 13019                           	opt stack 0
 13020                           tosu	equ	0xFFF
 13021                           tosh	equ	0xFFE
 13022                           tosl	equ	0xFFD
 13023                           pclath	equ	0xFFA
 13024                           tblptru	equ	0xFF8
 13025                           tblptrh	equ	0xFF7
 13026                           tblptrl	equ	0xFF6
 13027                           tablat	equ	0xFF5
 13028                           prodh	equ	0xFF4
 13029                           prodl	equ	0xFF3
 13030                           intcon	equ	0xFF2
 13031                           intcon2	equ	0xFF1
 13032                           postinc0	equ	0xFEE
 13033                           plusw0	equ	0xFEB
 13034                           wreg	equ	0xFE8
 13035                           indf1	equ	0xFE7
 13036                           postdec1	equ	0xFE5
 13037                           fsr1h	equ	0xFE2
 13038                           fsr1l	equ	0xFE1
 13039                           indf2	equ	0xFDF
 13040                           postinc2	equ	0xFDE
 13041                           postdec2	equ	0xFDD
 13042                           plusw2	equ	0xFDB
 13043                           fsr2h	equ	0xFDA
 13044                           fsr2l	equ	0xFD9
 13045                           status	equ	0xFD8
 13046                           
 13047 ;; *************** function _SWSPI_DAC_send_bits *****************
 13048 ;; Defined at:
 13049 ;;		line 43 in file "SwSpiApp.c"
 13050 ;; Parameters:    Size  Location     Type
 13051 ;;  phrType         1    wreg     enum E1
 13052 ;;  data            1   25[COMRAM] unsigned char 
 13053 ;; Auto vars:     Size  Location     Type
 13054 ;;  phrType         1   27[COMRAM] enum E1
 13055 ;;  count           1   26[COMRAM] unsigned char 
 13056 ;; Return value:  Size  Location     Type
 13057 ;;                  1    wreg      void 
 13058 ;; Registers used:
 13059 ;;		wreg, status,2, status,0, cstack
 13060 ;; Tracked objects:
 13061 ;;		On entry : 0/0
 13062 ;;		On exit  : 0/0
 13063 ;;		Unchanged: 0/0
 13064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13065 ;;      Params:         1       0       0       0       0       0       0
 13066 ;;      Locals:         2       0       0       0       0       0       0
 13067 ;;      Temps:          0       0       0       0       0       0       0
 13068 ;;      Totals:         3       0       0       0       0       0       0
 13069 ;;Total ram usage:        3 bytes
 13070 ;; Hardware stack levels used:    1
 13071 ;; Hardware stack levels required when called:    5
 13072 ;; This function calls:
 13073 ;;		_SwSpi_Clk_Pin
 13074 ;;		_SwSpi_Data_Pin
 13075 ;; This function is called by:
 13076 ;;		_SWSPI_send_word
 13077 ;; This function uses a non-reentrant model
 13078 ;;
 13079                           
 13080                           	psect	text74
 13081  00393A                     __ptext74:
 13082                           	opt stack 0
 13083  00393A                     _SWSPI_DAC_send_bits:
 13084                           	opt stack 21
 13085                           
 13086                           ;incstack = 0
 13087                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 13088  00393A  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 13089                           
 13090                           ;SwSpiApp.c: 45: uint8_t count;
 13091                           ;SwSpiApp.c: 46: for (count = 8; count ; count--, data <<= 1)
 13092  00393C  0E08               	movlw	8
 13093  00393E  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 13094  003940  D01A               	goto	l642
 13095  003942                     
 13096                           ;SwSpiApp.c: 47: {
 13097                           ;SwSpiApp.c: 48: SwSpi_Clk_Pin(phrType, 1);
 13098  003942  0E01               	movlw	1
 13099  003944  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13100  003946  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13101  003948  ECF4  F01C         	call	_SwSpi_Clk_Pin
 13102                           
 13103                           ;SwSpiApp.c: 50: if (data & 0X80)
 13104  00394C  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 13105  00394E  D006               	goto	l644
 13106                           
 13107                           ;SwSpiApp.c: 51: {
 13108                           ;SwSpiApp.c: 53: SwSpi_Data_Pin(phrType, 1);
 13109  003950  0E01               	movlw	1
 13110  003952  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13111  003954  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13112  003956  ECC9  F01C         	call	_SwSpi_Data_Pin
 13113                           
 13114                           ;SwSpiApp.c: 54: }
 13115  00395A  D005               	goto	l645
 13116  00395C                     l644:
 13117                           
 13118                           ;SwSpiApp.c: 55: else
 13119                           ;SwSpiApp.c: 56: {
 13120                           ;SwSpiApp.c: 57: SwSpi_Data_Pin(phrType, 0);
 13121  00395C  0E00               	movlw	0
 13122  00395E  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13123  003960  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13124  003962  ECC9  F01C         	call	_SwSpi_Data_Pin
 13125  003966                     l645:
 13126                           
 13127                           ;SwSpiApp.c: 58: }
 13128                           ;SwSpiApp.c: 60: SwSpi_Clk_Pin(phrType, 0);
 13129  003966  0E00               	movlw	0
 13130  003968  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13131  00396A  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13132  00396C  ECF4  F01C         	call	_SwSpi_Clk_Pin
 13133  003970  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 13134  003972  90D8               	bcf	status,0,c
 13135  003974  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 13136  003976                     l642:
 13137  003976  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 13138  003978  A4D8               	btfss	status,2,c
 13139  00397A  D7E3               	goto	l643
 13140                           
 13141                           ;SwSpiApp.c: 61: }
 13142                           ;SwSpiApp.c: 63: SwSpi_Data_Pin(phrType, 0);
 13143  00397C  0E00               	movlw	0
 13144  00397E  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13145  003980  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13146  003982  ECC9  F01C         	call	_SwSpi_Data_Pin
 13147                           
 13148                           ;SwSpiApp.c: 64: SwSpi_Clk_Pin(phrType, 0);
 13149  003986  0E00               	movlw	0
 13150  003988  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13151  00398A  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13152  00398C  ECF4  F01C         	call	_SwSpi_Clk_Pin
 13153  003990  0012               	return		;funcret
 13154  003992                     __end_of_SWSPI_DAC_send_bits:
 13155                           	opt stack 0
 13156                           tosu	equ	0xFFF
 13157                           tosh	equ	0xFFE
 13158                           tosl	equ	0xFFD
 13159                           pclath	equ	0xFFA
 13160                           tblptru	equ	0xFF8
 13161                           tblptrh	equ	0xFF7
 13162                           tblptrl	equ	0xFF6
 13163                           tablat	equ	0xFF5
 13164                           prodh	equ	0xFF4
 13165                           prodl	equ	0xFF3
 13166                           intcon	equ	0xFF2
 13167                           intcon2	equ	0xFF1
 13168                           postinc0	equ	0xFEE
 13169                           plusw0	equ	0xFEB
 13170                           wreg	equ	0xFE8
 13171                           indf1	equ	0xFE7
 13172                           postdec1	equ	0xFE5
 13173                           fsr1h	equ	0xFE2
 13174                           fsr1l	equ	0xFE1
 13175                           indf2	equ	0xFDF
 13176                           postinc2	equ	0xFDE
 13177                           postdec2	equ	0xFDD
 13178                           plusw2	equ	0xFDB
 13179                           fsr2h	equ	0xFDA
 13180                           fsr2l	equ	0xFD9
 13181                           status	equ	0xFD8
 13182                           
 13183 ;; *************** function _SwSpi_Data_Pin *****************
 13184 ;; Defined at:
 13185 ;;		line 103 in file "SwSpiApp.c"
 13186 ;; Parameters:    Size  Location     Type
 13187 ;;  phrType         1    wreg     enum E1
 13188 ;;  cPinMode        1   23[COMRAM] unsigned char 
 13189 ;; Auto vars:     Size  Location     Type
 13190 ;;  phrType         1   24[COMRAM] enum E1
 13191 ;; Return value:  Size  Location     Type
 13192 ;;                  1    wreg      void 
 13193 ;; Registers used:
 13194 ;;		wreg, status,2, status,0
 13195 ;; Tracked objects:
 13196 ;;		On entry : 0/0
 13197 ;;		On exit  : 0/0
 13198 ;;		Unchanged: 0/0
 13199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13200 ;;      Params:         1       0       0       0       0       0       0
 13201 ;;      Locals:         1       0       0       0       0       0       0
 13202 ;;      Temps:          0       0       0       0       0       0       0
 13203 ;;      Totals:         2       0       0       0       0       0       0
 13204 ;;Total ram usage:        2 bytes
 13205 ;; Hardware stack levels used:    1
 13206 ;; Hardware stack levels required when called:    4
 13207 ;; This function calls:
 13208 ;;		Nothing
 13209 ;; This function is called by:
 13210 ;;		_SWSPI_DAC_send_bits
 13211 ;;		_SWSPI_Synth_send_bits
 13212 ;; This function uses a non-reentrant model
 13213 ;;
 13214                           
 13215                           	psect	text75
 13216  003992                     __ptext75:
 13217                           	opt stack 0
 13218  003992                     _SwSpi_Data_Pin:
 13219                           	opt stack 21
 13220                           
 13221                           ;incstack = 0
 13222                           ;SwSpi_Data_Pin@phrType stored from wreg
 13223  003992  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 13224                           
 13225                           ;SwSpiApp.c: 105: switch(phrType)
 13226  003994  D01E               	goto	l657
 13227  003996                     
 13228                           ;SwSpiApp.c: 108: if(cPinMode == 1)
 13229  003996  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 13230  003998  A4D8               	btfss	status,2,c
 13231  00399A  D002               	goto	l659
 13232                           
 13233                           ;SwSpiApp.c: 109: {
 13234                           ;SwSpiApp.c: 110: do { LATDbits.LATD0 = 1; } while(0);
 13235  00399C  808C               	bsf	3980,0,c	;volatile
 13236                           
 13237                           ;SwSpiApp.c: 111: }
 13238  00399E  0012               	return	
 13239  0039A0                     l659:
 13240                           
 13241                           ;SwSpiApp.c: 112: else if (cPinMode == 0)
 13242  0039A0  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 13243  0039A2  A4D8               	btfss	status,2,c
 13244  0039A4  0012               	return	
 13245                           
 13246                           ;SwSpiApp.c: 113: {
 13247                           ;SwSpiApp.c: 114: do { LATDbits.LATD0 = 0; } while(0);
 13248  0039A6  908C               	bcf	3980,0,c	;volatile
 13249                           
 13250                           ;SwSpiApp.c: 115: }
 13251                           ;SwSpiApp.c: 116: break;
 13252  0039A8  0012               	return	
 13253  0039AA                     
 13254                           ;SwSpiApp.c: 119: if(cPinMode == 1)
 13255  0039AA  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 13256  0039AC  A4D8               	btfss	status,2,c
 13257  0039AE  D002               	goto	l668
 13258                           
 13259                           ;SwSpiApp.c: 120: {
 13260                           ;SwSpiApp.c: 121: do { LATCbits.LATC5 = 1; } while(0);
 13261  0039B0  8A8B               	bsf	3979,5,c	;volatile
 13262                           
 13263                           ;SwSpiApp.c: 122: }
 13264  0039B2  0012               	return	
 13265  0039B4                     l668:
 13266                           
 13267                           ;SwSpiApp.c: 123: else if (cPinMode == 0)
 13268  0039B4  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 13269  0039B6  A4D8               	btfss	status,2,c
 13270  0039B8  0012               	return	
 13271                           
 13272                           ;SwSpiApp.c: 124: {
 13273                           ;SwSpiApp.c: 125: do { LATCbits.LATC5 = 0; } while(0);
 13274  0039BA  9A8B               	bcf	3979,5,c	;volatile
 13275                           
 13276                           ;SwSpiApp.c: 126: }
 13277                           ;SwSpiApp.c: 127: break;
 13278  0039BC  0012               	return	
 13279  0039BE                     
 13280                           ;SwSpiApp.c: 130: if(cPinMode == 1)
 13281  0039BE  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 13282  0039C0  A4D8               	btfss	status,2,c
 13283  0039C2  D002               	goto	l676
 13284                           
 13285                           ;SwSpiApp.c: 131: {
 13286                           ;SwSpiApp.c: 132: do { LATAbits.LATA4 = 1; } while(0);
 13287  0039C4  8889               	bsf	3977,4,c	;volatile
 13288                           
 13289                           ;SwSpiApp.c: 133: }
 13290  0039C6  0012               	return	
 13291  0039C8                     l676:
 13292                           
 13293                           ;SwSpiApp.c: 134: else if (cPinMode == 0)
 13294  0039C8  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 13295  0039CA  A4D8               	btfss	status,2,c
 13296  0039CC  0012               	return	
 13297                           
 13298                           ;SwSpiApp.c: 135: {
 13299                           ;SwSpiApp.c: 136: do { LATAbits.LATA4 = 0; } while(0);
 13300  0039CE  9889               	bcf	3977,4,c	;volatile
 13301                           
 13302                           ;SwSpiApp.c: 139: }
 13303                           
 13304                           ;SwSpiApp.c: 137: }
 13305                           ;SwSpiApp.c: 138: break;
 13306  0039D0  0012               	return	
 13307  0039D2                     l657:
 13308  0039D2  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 13309                           
 13310                           ; Switch size 1, requested type "space"
 13311                           ; Number of cases is 3, Range of values is 0 to 2
 13312                           ; switch strategies available:
 13313                           ; Name         Instructions Cycles
 13314                           ; simple_byte           10     6 (average)
 13315                           ;	Chosen strategy is simple_byte
 13316  0039D4  0A00               	xorlw	0	; case 0
 13317  0039D6  B4D8               	btfsc	status,2,c
 13318  0039D8  D7DE               	goto	l658
 13319  0039DA  0A01               	xorlw	1	; case 1
 13320  0039DC  B4D8               	btfsc	status,2,c
 13321  0039DE  D7E5               	goto	l667
 13322  0039E0  0A03               	xorlw	3	; case 2
 13323  0039E2  A4D8               	btfss	status,2,c
 13324  0039E4  0012               	return	
 13325  0039E6  D7EB               	goto	l675
 13326  0039E8                     __end_of_SwSpi_Data_Pin:
 13327                           	opt stack 0
 13328                           tosu	equ	0xFFF
 13329                           tosh	equ	0xFFE
 13330                           tosl	equ	0xFFD
 13331                           pclath	equ	0xFFA
 13332                           tblptru	equ	0xFF8
 13333                           tblptrh	equ	0xFF7
 13334                           tblptrl	equ	0xFF6
 13335                           tablat	equ	0xFF5
 13336                           prodh	equ	0xFF4
 13337                           prodl	equ	0xFF3
 13338                           intcon	equ	0xFF2
 13339                           intcon2	equ	0xFF1
 13340                           postinc0	equ	0xFEE
 13341                           plusw0	equ	0xFEB
 13342                           wreg	equ	0xFE8
 13343                           indf1	equ	0xFE7
 13344                           postdec1	equ	0xFE5
 13345                           fsr1h	equ	0xFE2
 13346                           fsr1l	equ	0xFE1
 13347                           indf2	equ	0xFDF
 13348                           postinc2	equ	0xFDE
 13349                           postdec2	equ	0xFDD
 13350                           plusw2	equ	0xFDB
 13351                           fsr2h	equ	0xFDA
 13352                           fsr2l	equ	0xFD9
 13353                           status	equ	0xFD8
 13354                           
 13355 ;; *************** function _SwSpi_Clk_Pin *****************
 13356 ;; Defined at:
 13357 ;;		line 142 in file "SwSpiApp.c"
 13358 ;; Parameters:    Size  Location     Type
 13359 ;;  phrType         1    wreg     enum E1
 13360 ;;  cPinMode        1   23[COMRAM] unsigned char 
 13361 ;; Auto vars:     Size  Location     Type
 13362 ;;  phrType         1   24[COMRAM] enum E1
 13363 ;; Return value:  Size  Location     Type
 13364 ;;                  1    wreg      void 
 13365 ;; Registers used:
 13366 ;;		wreg, status,2, status,0
 13367 ;; Tracked objects:
 13368 ;;		On entry : 0/0
 13369 ;;		On exit  : 0/0
 13370 ;;		Unchanged: 0/0
 13371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13372 ;;      Params:         1       0       0       0       0       0       0
 13373 ;;      Locals:         1       0       0       0       0       0       0
 13374 ;;      Temps:          0       0       0       0       0       0       0
 13375 ;;      Totals:         2       0       0       0       0       0       0
 13376 ;;Total ram usage:        2 bytes
 13377 ;; Hardware stack levels used:    1
 13378 ;; Hardware stack levels required when called:    4
 13379 ;; This function calls:
 13380 ;;		Nothing
 13381 ;; This function is called by:
 13382 ;;		_SWSPI_DAC_send_bits
 13383 ;;		_SWSPI_Synth_send_bits
 13384 ;;		_SwSpi_Synth_Toggle_Clock
 13385 ;; This function uses a non-reentrant model
 13386 ;;
 13387                           
 13388                           	psect	text76
 13389  0039E8                     __ptext76:
 13390                           	opt stack 0
 13391  0039E8                     _SwSpi_Clk_Pin:
 13392                           	opt stack 21
 13393                           
 13394                           ;incstack = 0
 13395                           ;SwSpi_Clk_Pin@phrType stored from wreg
 13396  0039E8  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 13397                           
 13398                           ;SwSpiApp.c: 144: switch(phrType)
 13399  0039EA  D01E               	goto	l686
 13400  0039EC                     
 13401                           ;SwSpiApp.c: 147: if(cPinMode == 1)
 13402  0039EC  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 13403  0039EE  A4D8               	btfss	status,2,c
 13404  0039F0  D002               	goto	l688
 13405                           
 13406                           ;SwSpiApp.c: 148: {
 13407                           ;SwSpiApp.c: 149: do { LATCbits.LATC3 = 1; } while(0);
 13408  0039F2  868B               	bsf	3979,3,c	;volatile
 13409                           
 13410                           ;SwSpiApp.c: 150: }
 13411  0039F4  0012               	return	
 13412  0039F6                     l688:
 13413                           
 13414                           ;SwSpiApp.c: 151: else if (cPinMode == 0)
 13415  0039F6  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 13416  0039F8  A4D8               	btfss	status,2,c
 13417  0039FA  0012               	return	
 13418                           
 13419                           ;SwSpiApp.c: 152: {
 13420                           ;SwSpiApp.c: 153: do { LATCbits.LATC3 = 0; } while(0);
 13421  0039FC  968B               	bcf	3979,3,c	;volatile
 13422                           
 13423                           ;SwSpiApp.c: 154: }
 13424                           ;SwSpiApp.c: 155: break;
 13425  0039FE  0012               	return	
 13426  003A00                     
 13427                           ;SwSpiApp.c: 158: if(cPinMode == 1)
 13428  003A00  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 13429  003A02  A4D8               	btfss	status,2,c
 13430  003A04  D002               	goto	l697
 13431                           
 13432                           ;SwSpiApp.c: 159: {
 13433                           ;SwSpiApp.c: 160: do { LATCbits.LATC4 = 1; } while(0);
 13434  003A06  888B               	bsf	3979,4,c	;volatile
 13435                           
 13436                           ;SwSpiApp.c: 161: }
 13437  003A08  0012               	return	
 13438  003A0A                     l697:
 13439                           
 13440                           ;SwSpiApp.c: 162: else if (cPinMode == 0)
 13441  003A0A  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 13442  003A0C  A4D8               	btfss	status,2,c
 13443  003A0E  0012               	return	
 13444                           
 13445                           ;SwSpiApp.c: 163: {
 13446                           ;SwSpiApp.c: 164: do { LATCbits.LATC4 = 0; } while(0);
 13447  003A10  988B               	bcf	3979,4,c	;volatile
 13448                           
 13449                           ;SwSpiApp.c: 165: }
 13450                           ;SwSpiApp.c: 167: break;
 13451  003A12  0012               	return	
 13452  003A14                     
 13453                           ;SwSpiApp.c: 170: if(cPinMode == 1)
 13454  003A14  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 13455  003A16  A4D8               	btfss	status,2,c
 13456  003A18  D002               	goto	l705
 13457                           
 13458                           ;SwSpiApp.c: 171: {
 13459                           ;SwSpiApp.c: 172: do { LATAbits.LATA3 = 1; } while(0);
 13460  003A1A  8689               	bsf	3977,3,c	;volatile
 13461                           
 13462                           ;SwSpiApp.c: 173: }
 13463  003A1C  0012               	return	
 13464  003A1E                     l705:
 13465                           
 13466                           ;SwSpiApp.c: 174: else if (cPinMode == 0)
 13467  003A1E  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 13468  003A20  A4D8               	btfss	status,2,c
 13469  003A22  0012               	return	
 13470                           
 13471                           ;SwSpiApp.c: 175: {
 13472                           ;SwSpiApp.c: 176: do { LATAbits.LATA3 = 0; } while(0);
 13473  003A24  9689               	bcf	3977,3,c	;volatile
 13474                           
 13475                           ;SwSpiApp.c: 179: }
 13476                           
 13477                           ;SwSpiApp.c: 177: }
 13478                           ;SwSpiApp.c: 178: break;
 13479  003A26  0012               	return	
 13480  003A28                     l686:
 13481  003A28  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 13482                           
 13483                           ; Switch size 1, requested type "space"
 13484                           ; Number of cases is 3, Range of values is 0 to 2
 13485                           ; switch strategies available:
 13486                           ; Name         Instructions Cycles
 13487                           ; simple_byte           10     6 (average)
 13488                           ;	Chosen strategy is simple_byte
 13489  003A2A  0A00               	xorlw	0	; case 0
 13490  003A2C  B4D8               	btfsc	status,2,c
 13491  003A2E  D7DE               	goto	l687
 13492  003A30  0A01               	xorlw	1	; case 1
 13493  003A32  B4D8               	btfsc	status,2,c
 13494  003A34  D7E5               	goto	l696
 13495  003A36  0A03               	xorlw	3	; case 2
 13496  003A38  A4D8               	btfss	status,2,c
 13497  003A3A  0012               	return	
 13498  003A3C  D7EB               	goto	l704
 13499  003A3E                     __end_of_SwSpi_Clk_Pin:
 13500                           	opt stack 0
 13501                           tosu	equ	0xFFF
 13502                           tosh	equ	0xFFE
 13503                           tosl	equ	0xFFD
 13504                           pclath	equ	0xFFA
 13505                           tblptru	equ	0xFF8
 13506                           tblptrh	equ	0xFF7
 13507                           tblptrl	equ	0xFF6
 13508                           tablat	equ	0xFF5
 13509                           prodh	equ	0xFF4
 13510                           prodl	equ	0xFF3
 13511                           intcon	equ	0xFF2
 13512                           intcon2	equ	0xFF1
 13513                           postinc0	equ	0xFEE
 13514                           plusw0	equ	0xFEB
 13515                           wreg	equ	0xFE8
 13516                           indf1	equ	0xFE7
 13517                           postdec1	equ	0xFE5
 13518                           fsr1h	equ	0xFE2
 13519                           fsr1l	equ	0xFE1
 13520                           indf2	equ	0xFDF
 13521                           postinc2	equ	0xFDE
 13522                           postdec2	equ	0xFDD
 13523                           plusw2	equ	0xFDB
 13524                           fsr2h	equ	0xFDA
 13525                           fsr2l	equ	0xFD9
 13526                           status	equ	0xFD8
 13527                           
 13528 ;; *************** function _ReadIntFromEeprom *****************
 13529 ;; Defined at:
 13530 ;;		line 131 in file "SystemCommon.c"
 13531 ;; Parameters:    Size  Location     Type
 13532 ;;  address         1    wreg     unsigned char 
 13533 ;;  numOfByes       2   81[BANK0 ] int 
 13534 ;; Auto vars:     Size  Location     Type
 13535 ;;  address         1   98[BANK0 ] unsigned char 
 13536 ;;  base            4   88[BANK0 ] unsigned long 
 13537 ;;  idx             1  103[BANK0 ] unsigned char 
 13538 ;;  retVal          4   99[BANK0 ] unsigned long 
 13539 ;; Return value:  Size  Location     Type
 13540 ;;                  4   81[BANK0 ] unsigned long 
 13541 ;; Registers used:
 13542 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13543 ;; Tracked objects:
 13544 ;;		On entry : 0/0
 13545 ;;		On exit  : 0/0
 13546 ;;		Unchanged: 0/0
 13547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13548 ;;      Params:         0       4       0       0       0       0       0
 13549 ;;      Locals:         0      16       0       0       0       0       0
 13550 ;;      Temps:          0       3       0       0       0       0       0
 13551 ;;      Totals:         0      23       0       0       0       0       0
 13552 ;;Total ram usage:       23 bytes
 13553 ;; Hardware stack levels used:    1
 13554 ;; Hardware stack levels required when called:    9
 13555 ;; This function calls:
 13556 ;;		_EepromRead
 13557 ;;		___awtoft
 13558 ;;		___fttol
 13559 ;;		___lmul
 13560 ;;		_pow
 13561 ;; This function is called by:
 13562 ;;		_DacInit
 13563 ;;		_DacReadValue
 13564 ;;		_InitSynth
 13565 ;;		_SynthReadData
 13566 ;; This function uses a non-reentrant model
 13567 ;;
 13568                           
 13569                           	psect	text77
 13570  001F58                     __ptext77:
 13571                           	opt stack 0
 13572  001F58                     _ReadIntFromEeprom:
 13573                           	opt stack 18
 13574                           
 13575                           ;incstack = 0
 13576                           ;ReadIntFromEeprom@address stored from wreg
 13577  001F58  0100               	movlb	0	; () banked
 13578  001F5A  6FC2               	movwf	ReadIntFromEeprom@address& (0+255),b
 13579                           
 13580                           ;SystemCommon.c: 133: uint32_t retVal = 0x00;
 13581  001F5C  0E00               	movlw	0
 13582  001F5E  0100               	movlb	0	; () banked
 13583  001F60  6FC3               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 13584  001F62  0E00               	movlw	0
 13585  001F64  6FC4               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 13586  001F66  0E00               	movlw	0
 13587  001F68  6FC5               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 13588  001F6A  0E00               	movlw	0
 13589  001F6C  6FC6               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 13590                           
 13591                           ; BSR set to: 0
 13592                           ;SystemCommon.c: 134: address -= numOfByes;
 13593  001F6E  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13594  001F70  5FC2               	subwf	ReadIntFromEeprom@address& (0+255),f,b
 13595                           
 13596                           ; BSR set to: 0
 13597                           ;SystemCommon.c: 136: for(uint8_t idx = 0; idx < numOfByes; idx++)
 13598  001F72  0E00               	movlw	0
 13599  001F74  6FC7               	movwf	ReadIntFromEeprom@idx& (0+255),b
 13600  001F76  D06D               	goto	l1440
 13601  001F78                     
 13602                           ; BSR set to: 0
 13603                           ;SystemCommon.c: 137: {
 13604                           ;SystemCommon.c: 138: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 13605                           
 13606                           ; BSR set to: 0
 13607  001F78  51C7               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 13608  001F7A  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 13609  001F7C  6BB6               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 13610  001F7E  0E01               	movlw	1
 13611  001F80  27B5               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 13612  001F82  0E00               	movlw	0
 13613  001F84  23B6               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13614  001F86  1FB5               	comf	??_ReadIntFromEeprom& (0+255),f,b
 13615  001F88  1FB6               	comf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13616  001F8A  4BB5               	infsnz	??_ReadIntFromEeprom& (0+255),f,b
 13617  001F8C  2BB6               	incf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13618  001F8E  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13619  001F90  27B5               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 13620  001F92  51B2               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 13621  001F94  23B6               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13622  001F96  90D8               	bcf	status,0,c
 13623  001F98  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13624  001F9A  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13625  001F9C  90D8               	bcf	status,0,c
 13626  001F9E  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13627  001FA0  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13628  001FA2  90D8               	bcf	status,0,c
 13629  001FA4  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13630  001FA6  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13631  001FA8  C0B5  F020         	movff	??_ReadIntFromEeprom,___awtoft@c
 13632  001FAC  C0B6  F021         	movff	??_ReadIntFromEeprom+1,___awtoft@c+1
 13633  001FB0  EC16  F01F         	call	___awtoft	;wreg free
 13634  001FB4  C020  F0BC         	movff	?___awtoft,_ReadIntFromEeprom$3600
 13635  001FB8  C021  F0BD         	movff	?___awtoft+1,_ReadIntFromEeprom$3600+1
 13636  001FBC  C022  F0BE         	movff	?___awtoft+2,_ReadIntFromEeprom$3600+2
 13637                           
 13638                           ;SystemCommon.c: 137: {
 13639                           ;SystemCommon.c: 138: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 13640  001FC0  C0BC  F0A3         	movff	_ReadIntFromEeprom$3600,pow@y
 13641  001FC4  C0BD  F0A4         	movff	_ReadIntFromEeprom$3600+1,pow@y+1
 13642  001FC8  C0BE  F0A5         	movff	_ReadIntFromEeprom$3600+2,pow@y+2
 13643  001FCC  0E00               	movlw	0
 13644  001FCE  0100               	movlb	0	; () banked
 13645  001FD0  6FA0               	movwf	pow@x& (0+255),b
 13646  001FD2  0E00               	movlw	0
 13647  001FD4  6FA1               	movwf	(pow@x+1)& (0+255),b
 13648  001FD6  0E40               	movlw	64
 13649  001FD8  6FA2               	movwf	(pow@x+2)& (0+255),b
 13650  001FDA  EC99  F00D         	call	_pow	;wreg free
 13651  001FDE  C0A0  F0BF         	movff	?_pow,_ReadIntFromEeprom$3601
 13652  001FE2  C0A1  F0C0         	movff	?_pow+1,_ReadIntFromEeprom$3601+1
 13653  001FE6  C0A2  F0C1         	movff	?_pow+2,_ReadIntFromEeprom$3601+2
 13654                           
 13655                           ;SystemCommon.c: 137: {
 13656                           ;SystemCommon.c: 138: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 13657  001FEA  C0BF  F078         	movff	_ReadIntFromEeprom$3601,___fttol@f1
 13658  001FEE  C0C0  F079         	movff	_ReadIntFromEeprom$3601+1,___fttol@f1+1
 13659  001FF2  C0C1  F07A         	movff	_ReadIntFromEeprom$3601+2,___fttol@f1+2
 13660  001FF6  ECCE  F011         	call	___fttol	;wreg free
 13661  001FFA  C078  F0B8         	movff	?___fttol,ReadIntFromEeprom@base
 13662  001FFE  C079  F0B9         	movff	?___fttol+1,ReadIntFromEeprom@base+1
 13663  002002  C07A  F0BA         	movff	?___fttol+2,ReadIntFromEeprom@base+2
 13664  002006  C07B  F0BB         	movff	?___fttol+3,ReadIntFromEeprom@base+3
 13665                           
 13666                           ;SystemCommon.c: 139: retVal = retVal | EepromRead(address + idx) * base;
 13667  00200A  0100               	movlb	0	; () banked
 13668  00200C  51C2               	movf	ReadIntFromEeprom@address& (0+255),w,b
 13669  00200E  25C7               	addwf	ReadIntFromEeprom@idx& (0+255),w,b
 13670  002010  ECE8  F021         	call	_EepromRead
 13671  002014  0100               	movlb	0	; () banked
 13672  002016  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 13673  002018  51B5               	movf	??_ReadIntFromEeprom& (0+255),w,b
 13674  00201A  6E1A               	movwf	___lmul@multiplier,c
 13675  00201C  6A1B               	clrf	___lmul@multiplier+1,c
 13676  00201E  6A1C               	clrf	___lmul@multiplier+2,c
 13677  002020  6A1D               	clrf	___lmul@multiplier+3,c
 13678  002022  C0B8  F01E         	movff	ReadIntFromEeprom@base,___lmul@multiplicand
 13679  002026  C0B9  F01F         	movff	ReadIntFromEeprom@base+1,___lmul@multiplicand+1
 13680  00202A  C0BA  F020         	movff	ReadIntFromEeprom@base+2,___lmul@multiplicand+2
 13681  00202E  C0BB  F021         	movff	ReadIntFromEeprom@base+3,___lmul@multiplicand+3
 13682  002032  EC1F  F01D         	call	___lmul	;wreg free
 13683  002036  0100               	movlb	0	; () banked
 13684  002038  51C3               	movf	ReadIntFromEeprom@retVal& (0+255),w,b
 13685  00203A  101A               	iorwf	?___lmul,w,c
 13686  00203C  6FC3               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 13687  00203E  51C4               	movf	(ReadIntFromEeprom@retVal+1)& (0+255),w,b
 13688  002040  101B               	iorwf	?___lmul+1,w,c
 13689  002042  6FC4               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 13690  002044  51C5               	movf	(ReadIntFromEeprom@retVal+2)& (0+255),w,b
 13691  002046  101C               	iorwf	?___lmul+2,w,c
 13692  002048  6FC5               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 13693  00204A  51C6               	movf	(ReadIntFromEeprom@retVal+3)& (0+255),w,b
 13694  00204C  101D               	iorwf	?___lmul+3,w,c
 13695  00204E  6FC6               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 13696                           
 13697                           ; BSR set to: 0
 13698  002050  2BC7               	incf	ReadIntFromEeprom@idx& (0+255),f,b
 13699  002052                     l1440:
 13700                           
 13701                           ; BSR set to: 0
 13702                           
 13703                           ; BSR set to: 0
 13704  002052  51C7               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 13705  002054  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 13706  002056  6BB6               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 13707  002058  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13708  00205A  5DB5               	subwf	??_ReadIntFromEeprom& (0+255),w,b
 13709  00205C  51B6               	movf	(??_ReadIntFromEeprom+1)& (0+255),w,b
 13710  00205E  0A80               	xorlw	128
 13711  002060  6FB7               	movwf	(??_ReadIntFromEeprom+2)& (0+255),b
 13712  002062  51B2               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 13713  002064  0A80               	xorlw	128
 13714  002066  59B7               	subwfb	(??_ReadIntFromEeprom+2)& (0+255),w,b
 13715  002068  A0D8               	btfss	status,0,c
 13716  00206A  D786               	goto	l1441
 13717                           
 13718                           ; BSR set to: 0
 13719                           ;SystemCommon.c: 140: }
 13720                           ;SystemCommon.c: 141: return retVal;
 13721  00206C  C0C3  F0B1         	movff	ReadIntFromEeprom@retVal,?_ReadIntFromEeprom
 13722  002070  C0C4  F0B2         	movff	ReadIntFromEeprom@retVal+1,?_ReadIntFromEeprom+1
 13723  002074  C0C5  F0B3         	movff	ReadIntFromEeprom@retVal+2,?_ReadIntFromEeprom+2
 13724  002078  C0C6  F0B4         	movff	ReadIntFromEeprom@retVal+3,?_ReadIntFromEeprom+3
 13725                           
 13726                           ; BSR set to: 0
 13727  00207C  0012               	return		;funcret
 13728  00207E                     __end_of_ReadIntFromEeprom:
 13729                           	opt stack 0
 13730                           tosu	equ	0xFFF
 13731                           tosh	equ	0xFFE
 13732                           tosl	equ	0xFFD
 13733                           pclath	equ	0xFFA
 13734                           tblptru	equ	0xFF8
 13735                           tblptrh	equ	0xFF7
 13736                           tblptrl	equ	0xFF6
 13737                           tablat	equ	0xFF5
 13738                           prodh	equ	0xFF4
 13739                           prodl	equ	0xFF3
 13740                           intcon	equ	0xFF2
 13741                           intcon2	equ	0xFF1
 13742                           postinc0	equ	0xFEE
 13743                           plusw0	equ	0xFEB
 13744                           wreg	equ	0xFE8
 13745                           indf1	equ	0xFE7
 13746                           postdec1	equ	0xFE5
 13747                           fsr1h	equ	0xFE2
 13748                           fsr1l	equ	0xFE1
 13749                           indf2	equ	0xFDF
 13750                           postinc2	equ	0xFDE
 13751                           postdec2	equ	0xFDD
 13752                           plusw2	equ	0xFDB
 13753                           fsr2h	equ	0xFDA
 13754                           fsr2l	equ	0xFD9
 13755                           status	equ	0xFD8
 13756                           
 13757 ;; *************** function ___lmul *****************
 13758 ;; Defined at:
 13759 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 13760 ;; Parameters:    Size  Location     Type
 13761 ;;  multiplier      4   25[COMRAM] unsigned long 
 13762 ;;  multiplicand    4   29[COMRAM] unsigned long 
 13763 ;; Auto vars:     Size  Location     Type
 13764 ;;  product         4   33[COMRAM] unsigned long 
 13765 ;; Return value:  Size  Location     Type
 13766 ;;                  4   25[COMRAM] unsigned long 
 13767 ;; Registers used:
 13768 ;;		wreg, status,2, status,0
 13769 ;; Tracked objects:
 13770 ;;		On entry : 0/0
 13771 ;;		On exit  : 0/0
 13772 ;;		Unchanged: 0/0
 13773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13774 ;;      Params:         8       0       0       0       0       0       0
 13775 ;;      Locals:         4       0       0       0       0       0       0
 13776 ;;      Temps:          0       0       0       0       0       0       0
 13777 ;;      Totals:        12       0       0       0       0       0       0
 13778 ;;Total ram usage:       12 bytes
 13779 ;; Hardware stack levels used:    1
 13780 ;; Hardware stack levels required when called:    4
 13781 ;; This function calls:
 13782 ;;		Nothing
 13783 ;; This function is called by:
 13784 ;;		_ReadIntFromEeprom
 13785 ;;		_strtol
 13786 ;; This function uses a non-reentrant model
 13787 ;;
 13788                           
 13789                           	psect	text78
 13790  003A3E                     __ptext78:
 13791                           	opt stack 0
 13792  003A3E                     ___lmul:
 13793                           	opt stack 21
 13794                           
 13795                           ; BSR set to: 0
 13796                           ;incstack = 0
 13797  003A3E  0E00               	movlw	0
 13798  003A40  6E22               	movwf	___lmul@product,c
 13799  003A42  0E00               	movlw	0
 13800  003A44  6E23               	movwf	___lmul@product+1,c
 13801  003A46  0E00               	movlw	0
 13802  003A48  6E24               	movwf	___lmul@product+2,c
 13803  003A4A  0E00               	movlw	0
 13804  003A4C  6E25               	movwf	___lmul@product+3,c
 13805  003A4E  A01A               	btfss	___lmul@multiplier,0,c
 13806  003A50  D008               	goto	l1609
 13807  003A52  501E               	movf	___lmul@multiplicand,w,c
 13808  003A54  2622               	addwf	___lmul@product,f,c
 13809  003A56  501F               	movf	___lmul@multiplicand+1,w,c
 13810  003A58  2223               	addwfc	___lmul@product+1,f,c
 13811  003A5A  5020               	movf	___lmul@multiplicand+2,w,c
 13812  003A5C  2224               	addwfc	___lmul@product+2,f,c
 13813  003A5E  5021               	movf	___lmul@multiplicand+3,w,c
 13814  003A60  2225               	addwfc	___lmul@product+3,f,c
 13815  003A62                     l1609:
 13816  003A62  90D8               	bcf	status,0,c
 13817  003A64  361E               	rlcf	___lmul@multiplicand,f,c
 13818  003A66  361F               	rlcf	___lmul@multiplicand+1,f,c
 13819  003A68  3620               	rlcf	___lmul@multiplicand+2,f,c
 13820  003A6A  3621               	rlcf	___lmul@multiplicand+3,f,c
 13821  003A6C  90D8               	bcf	status,0,c
 13822  003A6E  321D               	rrcf	___lmul@multiplier+3,f,c
 13823  003A70  321C               	rrcf	___lmul@multiplier+2,f,c
 13824  003A72  321B               	rrcf	___lmul@multiplier+1,f,c
 13825  003A74  321A               	rrcf	___lmul@multiplier,f,c
 13826  003A76  501A               	movf	___lmul@multiplier,w,c
 13827  003A78  101B               	iorwf	___lmul@multiplier+1,w,c
 13828  003A7A  101C               	iorwf	___lmul@multiplier+2,w,c
 13829  003A7C  101D               	iorwf	___lmul@multiplier+3,w,c
 13830  003A7E  A4D8               	btfss	status,2,c
 13831  003A80  D7E6               	goto	l1608
 13832  003A82  C022  F01A         	movff	___lmul@product,?___lmul
 13833  003A86  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 13834  003A8A  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 13835  003A8E  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 13836  003A92  0012               	return		;funcret
 13837  003A94                     __end_of___lmul:
 13838                           	opt stack 0
 13839                           tosu	equ	0xFFF
 13840                           tosh	equ	0xFFE
 13841                           tosl	equ	0xFFD
 13842                           pclath	equ	0xFFA
 13843                           tblptru	equ	0xFF8
 13844                           tblptrh	equ	0xFF7
 13845                           tblptrl	equ	0xFF6
 13846                           tablat	equ	0xFF5
 13847                           prodh	equ	0xFF4
 13848                           prodl	equ	0xFF3
 13849                           intcon	equ	0xFF2
 13850                           intcon2	equ	0xFF1
 13851                           postinc0	equ	0xFEE
 13852                           plusw0	equ	0xFEB
 13853                           wreg	equ	0xFE8
 13854                           indf1	equ	0xFE7
 13855                           postdec1	equ	0xFE5
 13856                           fsr1h	equ	0xFE2
 13857                           fsr1l	equ	0xFE1
 13858                           indf2	equ	0xFDF
 13859                           postinc2	equ	0xFDE
 13860                           postdec2	equ	0xFDD
 13861                           plusw2	equ	0xFDB
 13862                           fsr2h	equ	0xFDA
 13863                           fsr2l	equ	0xFD9
 13864                           status	equ	0xFD8
 13865                           
 13866 ;; *************** function _EepromRead *****************
 13867 ;; Defined at:
 13868 ;;		line 175 in file "FlashApp.c"
 13869 ;; Parameters:    Size  Location     Type
 13870 ;;  address         1    wreg     unsigned char 
 13871 ;; Auto vars:     Size  Location     Type
 13872 ;;  address         1   24[COMRAM] unsigned char 
 13873 ;; Return value:  Size  Location     Type
 13874 ;;                  1    wreg      unsigned char 
 13875 ;; Registers used:
 13876 ;;		wreg, status,2, cstack
 13877 ;; Tracked objects:
 13878 ;;		On entry : 0/0
 13879 ;;		On exit  : 0/0
 13880 ;;		Unchanged: 0/0
 13881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13882 ;;      Params:         0       0       0       0       0       0       0
 13883 ;;      Locals:         1       0       0       0       0       0       0
 13884 ;;      Temps:          0       0       0       0       0       0       0
 13885 ;;      Totals:         1       0       0       0       0       0       0
 13886 ;;Total ram usage:        1 bytes
 13887 ;; Hardware stack levels used:    1
 13888 ;; Hardware stack levels required when called:    5
 13889 ;; This function calls:
 13890 ;;		_DATAEE_ReadByte
 13891 ;; This function is called by:
 13892 ;;		_ReadIntFromEeprom
 13893 ;; This function uses a non-reentrant model
 13894 ;;
 13895                           
 13896                           	psect	text79
 13897  0043D0                     __ptext79:
 13898                           	opt stack 0
 13899  0043D0                     _EepromRead:
 13900                           	opt stack 21
 13901                           
 13902                           ;incstack = 0
 13903                           ;EepromRead@address stored from wreg
 13904  0043D0  6E19               	movwf	EepromRead@address,c
 13905                           
 13906                           ;FlashApp.c: 177: return DATAEE_ReadByte(address);
 13907  0043D2  5019               	movf	EepromRead@address,w,c
 13908  0043D4  EC7F  F021         	call	_DATAEE_ReadByte
 13909  0043D8  0012               	return	
 13910  0043DA                     __end_of_EepromRead:
 13911                           	opt stack 0
 13912                           tosu	equ	0xFFF
 13913                           tosh	equ	0xFFE
 13914                           tosl	equ	0xFFD
 13915                           pclath	equ	0xFFA
 13916                           tblptru	equ	0xFF8
 13917                           tblptrh	equ	0xFF7
 13918                           tblptrl	equ	0xFF6
 13919                           tablat	equ	0xFF5
 13920                           prodh	equ	0xFF4
 13921                           prodl	equ	0xFF3
 13922                           intcon	equ	0xFF2
 13923                           intcon2	equ	0xFF1
 13924                           postinc0	equ	0xFEE
 13925                           plusw0	equ	0xFEB
 13926                           wreg	equ	0xFE8
 13927                           indf1	equ	0xFE7
 13928                           postdec1	equ	0xFE5
 13929                           fsr1h	equ	0xFE2
 13930                           fsr1l	equ	0xFE1
 13931                           indf2	equ	0xFDF
 13932                           postinc2	equ	0xFDE
 13933                           postdec2	equ	0xFDD
 13934                           plusw2	equ	0xFDB
 13935                           fsr2h	equ	0xFDA
 13936                           fsr2l	equ	0xFD9
 13937                           status	equ	0xFD8
 13938                           
 13939 ;; *************** function _DATAEE_ReadByte *****************
 13940 ;; Defined at:
 13941 ;;		line 194 in file "mcc_generated_files/memory.c"
 13942 ;; Parameters:    Size  Location     Type
 13943 ;;  bAdd            1    wreg     unsigned char 
 13944 ;; Auto vars:     Size  Location     Type
 13945 ;;  bAdd            1   23[COMRAM] unsigned char 
 13946 ;; Return value:  Size  Location     Type
 13947 ;;                  1    wreg      unsigned char 
 13948 ;; Registers used:
 13949 ;;		wreg, status,2
 13950 ;; Tracked objects:
 13951 ;;		On entry : 0/0
 13952 ;;		On exit  : 0/0
 13953 ;;		Unchanged: 0/0
 13954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13955 ;;      Params:         0       0       0       0       0       0       0
 13956 ;;      Locals:         1       0       0       0       0       0       0
 13957 ;;      Temps:          0       0       0       0       0       0       0
 13958 ;;      Totals:         1       0       0       0       0       0       0
 13959 ;;Total ram usage:        1 bytes
 13960 ;; Hardware stack levels used:    1
 13961 ;; Hardware stack levels required when called:    4
 13962 ;; This function calls:
 13963 ;;		Nothing
 13964 ;; This function is called by:
 13965 ;;		_EepromRead
 13966 ;; This function uses a non-reentrant model
 13967 ;;
 13968                           
 13969                           	psect	text80
 13970  0042FE                     __ptext80:
 13971                           	opt stack 0
 13972  0042FE                     _DATAEE_ReadByte:
 13973                           	opt stack 21
 13974                           
 13975                           ;incstack = 0
 13976                           ;DATAEE_ReadByte@bAdd stored from wreg
 13977  0042FE  6E18               	movwf	DATAEE_ReadByte@bAdd,c
 13978                           
 13979                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
 13980  004300  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
 13981                           
 13982                           ;memory.c: 198: EECON1bits.CFGS = 0;
 13983  004304  9CA6               	bcf	4006,6,c	;volsfr
 13984                           
 13985                           ;memory.c: 199: EECON1bits.EEPGD = 0;
 13986  004306  9EA6               	bcf	4006,7,c	;volsfr
 13987                           
 13988                           ;memory.c: 200: EECON1bits.RD = 1;
 13989  004308  80A6               	bsf	4006,0,c	;volsfr
 13990                           
 13991                           ;memory.c: 201: __nop();
 13992  00430A  F000               	nop	
 13993                           
 13994                           ;memory.c: 202: __nop();
 13995  00430C  F000               	nop	
 13996                           
 13997                           ;memory.c: 204: return (EEDATA);
 13998  00430E  50A8               	movf	4008,w,c	;volatile
 13999  004310  0012               	return	
 14000  004312                     __end_of_DATAEE_ReadByte:
 14001                           	opt stack 0
 14002                           tosu	equ	0xFFF
 14003                           tosh	equ	0xFFE
 14004                           tosl	equ	0xFFD
 14005                           pclath	equ	0xFFA
 14006                           tblptru	equ	0xFF8
 14007                           tblptrh	equ	0xFF7
 14008                           tblptrl	equ	0xFF6
 14009                           tablat	equ	0xFF5
 14010                           prodh	equ	0xFF4
 14011                           prodl	equ	0xFF3
 14012                           intcon	equ	0xFF2
 14013                           intcon2	equ	0xFF1
 14014                           postinc0	equ	0xFEE
 14015                           plusw0	equ	0xFEB
 14016                           wreg	equ	0xFE8
 14017                           indf1	equ	0xFE7
 14018                           postdec1	equ	0xFE5
 14019                           fsr1h	equ	0xFE2
 14020                           fsr1l	equ	0xFE1
 14021                           indf2	equ	0xFDF
 14022                           postinc2	equ	0xFDE
 14023                           postdec2	equ	0xFDD
 14024                           plusw2	equ	0xFDB
 14025                           fsr2h	equ	0xFDA
 14026                           fsr2l	equ	0xFD9
 14027                           status	equ	0xFD8
 14028                           
 14029 ;; *************** function _ClearMcuRunTime *****************
 14030 ;; Defined at:
 14031 ;;		line 63 in file "SystemStatus.c"
 14032 ;; Parameters:    Size  Location     Type
 14033 ;;		None
 14034 ;; Auto vars:     Size  Location     Type
 14035 ;;		None
 14036 ;; Return value:  Size  Location     Type
 14037 ;;                  1    wreg      void 
 14038 ;; Registers used:
 14039 ;;		wreg, status,2
 14040 ;; Tracked objects:
 14041 ;;		On entry : 0/0
 14042 ;;		On exit  : 0/0
 14043 ;;		Unchanged: 0/0
 14044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14045 ;;      Params:         0       0       0       0       0       0       0
 14046 ;;      Locals:         0       0       0       0       0       0       0
 14047 ;;      Temps:          0       0       0       0       0       0       0
 14048 ;;      Totals:         0       0       0       0       0       0       0
 14049 ;;Total ram usage:        0 bytes
 14050 ;; Hardware stack levels used:    1
 14051 ;; Hardware stack levels required when called:    4
 14052 ;; This function calls:
 14053 ;;		Nothing
 14054 ;; This function is called by:
 14055 ;;		_InitSystemApplicationManagers
 14056 ;; This function uses a non-reentrant model
 14057 ;;
 14058                           
 14059                           	psect	text81
 14060  004312                     __ptext81:
 14061                           	opt stack 0
 14062  004312                     _ClearMcuRunTime:
 14063                           	opt stack 25
 14064                           
 14065                           ;SystemStatus.c: 65: mcuRunTimeIn5SecTicks = 0;
 14066                           
 14067                           ;incstack = 0
 14068  004312  0E00               	movlw	0
 14069  004314  0101               	movlb	1	; () banked
 14070  004316  6F28               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 14071  004318  0E00               	movlw	0
 14072  00431A  6F29               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 14073  00431C  0E00               	movlw	0
 14074  00431E  6F2A               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 14075  004320  0E00               	movlw	0
 14076  004322  6F2B               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 14077                           
 14078                           ; BSR set to: 1
 14079  004324  0012               	return		;funcret
 14080  004326                     __end_of_ClearMcuRunTime:
 14081                           	opt stack 0
 14082                           tosu	equ	0xFFF
 14083                           tosh	equ	0xFFE
 14084                           tosl	equ	0xFFD
 14085                           pclath	equ	0xFFA
 14086                           tblptru	equ	0xFF8
 14087                           tblptrh	equ	0xFF7
 14088                           tblptrl	equ	0xFF6
 14089                           tablat	equ	0xFF5
 14090                           prodh	equ	0xFF4
 14091                           prodl	equ	0xFF3
 14092                           intcon	equ	0xFF2
 14093                           intcon2	equ	0xFF1
 14094                           postinc0	equ	0xFEE
 14095                           plusw0	equ	0xFEB
 14096                           wreg	equ	0xFE8
 14097                           indf1	equ	0xFE7
 14098                           postdec1	equ	0xFE5
 14099                           fsr1h	equ	0xFE2
 14100                           fsr1l	equ	0xFE1
 14101                           indf2	equ	0xFDF
 14102                           postinc2	equ	0xFDE
 14103                           postdec2	equ	0xFDD
 14104                           plusw2	equ	0xFDB
 14105                           fsr2h	equ	0xFDA
 14106                           fsr2l	equ	0xFD9
 14107                           status	equ	0xFD8
 14108                           
 14109 ;; *************** function _CheckFlashPrecentage *****************
 14110 ;; Defined at:
 14111 ;;		line 165 in file "FlashApp.c"
 14112 ;; Parameters:    Size  Location     Type
 14113 ;;		None
 14114 ;; Auto vars:     Size  Location     Type
 14115 ;;  precentage      3   28[BANK0 ] void 
 14116 ;; Return value:  Size  Location     Type
 14117 ;;                  1    wreg      unsigned char 
 14118 ;; Registers used:
 14119 ;;		wreg, status,2, status,0, cstack
 14120 ;; Tracked objects:
 14121 ;;		On entry : 0/0
 14122 ;;		On exit  : 0/0
 14123 ;;		Unchanged: 0/0
 14124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14125 ;;      Params:         0       0       0       0       0       0       0
 14126 ;;      Locals:         0       3       0       0       0       0       0
 14127 ;;      Temps:          0       4       0       0       0       0       0
 14128 ;;      Totals:         0       7       0       0       0       0       0
 14129 ;;Total ram usage:        7 bytes
 14130 ;; Hardware stack levels used:    1
 14131 ;; Hardware stack levels required when called:    6
 14132 ;; This function calls:
 14133 ;;		___ftdiv
 14134 ;;		___ftge
 14135 ;;		___ftmul
 14136 ;;		___lltoft
 14137 ;; This function is called by:
 14138 ;;		_main
 14139 ;; This function uses a non-reentrant model
 14140 ;;
 14141                           
 14142                           	psect	text82
 14143  002DFC                     __ptext82:
 14144                           	opt stack 0
 14145  002DFC                     _CheckFlashPrecentage:
 14146                           	opt stack 24
 14147                           
 14148                           ;FlashApp.c: 167: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
 14149                           
 14150                           ; BSR set to: 1
 14151                           ;incstack = 0
 14152  002DFC  0EE0               	movlw	224
 14153  002DFE  6E2C               	movwf	___ftdiv@f2,c
 14154  002E00  0EFF               	movlw	255
 14155  002E02  6E2D               	movwf	___ftdiv@f2+1,c
 14156  002E04  0E46               	movlw	70
 14157  002E06  6E2E               	movwf	___ftdiv@f2+2,c
 14158  002E08  C03E  F078         	movff	_writeAddress,??_CheckFlashPrecentage
 14159  002E0C  C03F  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
 14160  002E10  C040  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
 14161  002E14  C041  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
 14162  002E18  0100               	movlb	0	; () banked
 14163  002E1A  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
 14164  002E1C  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
 14165  002E1E  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
 14166  002E20  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
 14167  002E22  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
 14168  002E24  0E00               	movlw	0
 14169  002E26  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
 14170  002E28  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
 14171  002E2A  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
 14172  002E2C  0EF0               	movlw	240
 14173  002E2E  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
 14174  002E30  6E20               	movwf	___lltoft@c,c
 14175  002E32  0E7F               	movlw	127
 14176  002E34  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
 14177  002E36  6E21               	movwf	___lltoft@c+1,c
 14178  002E38  0E00               	movlw	0
 14179  002E3A  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
 14180  002E3C  6E22               	movwf	___lltoft@c+2,c
 14181  002E3E  0E00               	movlw	0
 14182  002E40  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
 14183  002E42  6E23               	movwf	___lltoft@c+3,c
 14184  002E44  EC43  F01C         	call	___lltoft	;wreg free
 14185  002E48  C020  F029         	movff	?___lltoft,___ftdiv@f1
 14186  002E4C  C021  F02A         	movff	?___lltoft+1,___ftdiv@f1+1
 14187  002E50  C022  F02B         	movff	?___lltoft+2,___ftdiv@f1+2
 14188  002E54  ECC5  F012         	call	___ftdiv	;wreg free
 14189  002E58  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14190  002E5C  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14191  002E60  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14192  002E64  0E00               	movlw	0
 14193  002E66  0100               	movlb	0	; () banked
 14194  002E68  6F6C               	movwf	___ftmul@f2& (0+255),b
 14195  002E6A  0EC8               	movlw	200
 14196  002E6C  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14197  002E6E  0E42               	movlw	66
 14198  002E70  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14199  002E72  EC4A  F012         	call	___ftmul	;wreg free
 14200  002E76  C069  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
 14201  002E7A  C06A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
 14202  002E7E  C06B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
 14203                           
 14204                           ;FlashApp.c: 168: return (precentage > 75) ? 1 : 0;
 14205  002E82  0E00               	movlw	0
 14206  002E84  6E18               	movwf	___ftge@ff1,c
 14207  002E86  0E96               	movlw	150
 14208  002E88  6E19               	movwf	___ftge@ff1+1,c
 14209  002E8A  0E42               	movlw	66
 14210  002E8C  6E1A               	movwf	___ftge@ff1+2,c
 14211  002E8E  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
 14212  002E92  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
 14213  002E96  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
 14214  002E9A  ECEE  F018         	call	___ftge	;wreg free
 14215  002E9E  B0D8               	btfsc	status,0,c
 14216  002EA0  D002               	goto	u8910
 14217  002EA2  0E01               	movlw	1
 14218  002EA4  0012               	return	
 14219  002EA6                     u8910:
 14220  002EA6  0E00               	movlw	0
 14221  002EA8  0012               	return	
 14222  002EAA                     __end_of_CheckFlashPrecentage:
 14223                           	opt stack 0
 14224                           tosu	equ	0xFFF
 14225                           tosh	equ	0xFFE
 14226                           tosl	equ	0xFFD
 14227                           pclath	equ	0xFFA
 14228                           tblptru	equ	0xFF8
 14229                           tblptrh	equ	0xFF7
 14230                           tblptrl	equ	0xFF6
 14231                           tablat	equ	0xFF5
 14232                           prodh	equ	0xFF4
 14233                           prodl	equ	0xFF3
 14234                           intcon	equ	0xFF2
 14235                           intcon2	equ	0xFF1
 14236                           postinc0	equ	0xFEE
 14237                           plusw0	equ	0xFEB
 14238                           wreg	equ	0xFE8
 14239                           indf1	equ	0xFE7
 14240                           postdec1	equ	0xFE5
 14241                           fsr1h	equ	0xFE2
 14242                           fsr1l	equ	0xFE1
 14243                           indf2	equ	0xFDF
 14244                           postinc2	equ	0xFDE
 14245                           postdec2	equ	0xFDD
 14246                           plusw2	equ	0xFDB
 14247                           fsr2h	equ	0xFDA
 14248                           fsr2l	equ	0xFD9
 14249                           status	equ	0xFD8
 14250                           
 14251 ;; *************** function _BlinkOkLeds *****************
 14252 ;; Defined at:
 14253 ;;		line 24 in file "LedsApp.c"
 14254 ;; Parameters:    Size  Location     Type
 14255 ;;  state           1    wreg     enum E7595
 14256 ;; Auto vars:     Size  Location     Type
 14257 ;;  state           1   26[COMRAM] enum E7595
 14258 ;;  idx             2   27[COMRAM] int 
 14259 ;; Return value:  Size  Location     Type
 14260 ;;                  1    wreg      void 
 14261 ;; Registers used:
 14262 ;;		wreg, status,2, status,0
 14263 ;; Tracked objects:
 14264 ;;		On entry : 0/0
 14265 ;;		On exit  : 0/0
 14266 ;;		Unchanged: 0/0
 14267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14268 ;;      Params:         0       0       0       0       0       0       0
 14269 ;;      Locals:         3       0       0       0       0       0       0
 14270 ;;      Temps:          3       0       0       0       0       0       0
 14271 ;;      Totals:         6       0       0       0       0       0       0
 14272 ;;Total ram usage:        6 bytes
 14273 ;; Hardware stack levels used:    1
 14274 ;; Hardware stack levels required when called:    4
 14275 ;; This function calls:
 14276 ;;		Nothing
 14277 ;; This function is called by:
 14278 ;;		_main
 14279 ;; This function uses a non-reentrant model
 14280 ;;
 14281                           
 14282                           	psect	text83
 14283  0037CC                     __ptext83:
 14284                           	opt stack 0
 14285  0037CC                     _BlinkOkLeds:
 14286                           	opt stack 26
 14287                           
 14288                           ;incstack = 0
 14289                           ;BlinkOkLeds@state stored from wreg
 14290  0037CC  6E1B               	movwf	BlinkOkLeds@state,c
 14291                           
 14292                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 14293  0037CE  0E00               	movlw	0
 14294  0037D0  6E1D               	movwf	BlinkOkLeds@idx+1,c
 14295  0037D2  0E00               	movlw	0
 14296  0037D4  6E1C               	movwf	BlinkOkLeds@idx,c
 14297  0037D6                     l6613:
 14298  0037D6  501B               	movf	BlinkOkLeds@state,w,c
 14299  0037D8  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14300  0037DA  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 14301  0037DC  5018               	movf	??_BlinkOkLeds,w,c
 14302  0037DE  5C1C               	subwf	BlinkOkLeds@idx,w,c
 14303  0037E0  501D               	movf	BlinkOkLeds@idx+1,w,c
 14304  0037E2  0A80               	xorlw	128
 14305  0037E4  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 14306  0037E6  5019               	movf	??_BlinkOkLeds+1,w,c
 14307  0037E8  0A80               	xorlw	128
 14308  0037EA  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 14309  0037EC  B0D8               	btfsc	status,0,c
 14310  0037EE  0012               	return	
 14311                           
 14312                           ;LedsApp.c: 27: {
 14313                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 14314  0037F0  908B               	bcf	3979,0,c	;volatile
 14315                           
 14316                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 14317  0037F2  0E02               	movlw	2
 14318  0037F4  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 14319  0037F6  0E04               	movlw	4
 14320  0037F8  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14321  0037FA  0EBA               	movlw	186
 14322  0037FC                     u9127:
 14323  0037FC  2EE8               	decfsz	wreg,f,c
 14324  0037FE  D7FE               	bra	u9127
 14325  003800  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 14326  003802  D7FC               	bra	u9127
 14327  003804  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 14328  003806  D7FA               	bra	u9127
 14329  003808  D000               	nop2	
 14330                           
 14331                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 14332  00380A  808B               	bsf	3979,0,c	;volatile
 14333                           
 14334                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 14335  00380C  0E02               	movlw	2
 14336  00380E  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 14337  003810  0E04               	movlw	4
 14338  003812  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14339  003814  0EBA               	movlw	186
 14340  003816                     u9137:
 14341  003816  2EE8               	decfsz	wreg,f,c
 14342  003818  D7FE               	bra	u9137
 14343  00381A  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 14344  00381C  D7FC               	bra	u9137
 14345  00381E  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 14346  003820  D7FA               	bra	u9137
 14347  003822  D000               	nop2	
 14348  003824  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 14349  003826  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 14350  003828  D7D6               	goto	l6613
 14351  00382A                     __end_of_BlinkOkLeds:
 14352                           	opt stack 0
 14353                           tosu	equ	0xFFF
 14354                           tosh	equ	0xFFE
 14355                           tosl	equ	0xFFD
 14356                           pclath	equ	0xFFA
 14357                           tblptru	equ	0xFF8
 14358                           tblptrh	equ	0xFF7
 14359                           tblptrl	equ	0xFF6
 14360                           tablat	equ	0xFF5
 14361                           prodh	equ	0xFF4
 14362                           prodl	equ	0xFF3
 14363                           intcon	equ	0xFF2
 14364                           intcon2	equ	0xFF1
 14365                           postinc0	equ	0xFEE
 14366                           plusw0	equ	0xFEB
 14367                           wreg	equ	0xFE8
 14368                           indf1	equ	0xFE7
 14369                           postdec1	equ	0xFE5
 14370                           fsr1h	equ	0xFE2
 14371                           fsr1l	equ	0xFE1
 14372                           indf2	equ	0xFDF
 14373                           postinc2	equ	0xFDE
 14374                           postdec2	equ	0xFDD
 14375                           plusw2	equ	0xFDB
 14376                           fsr2h	equ	0xFDA
 14377                           fsr2l	equ	0xFD9
 14378                           status	equ	0xFD8
 14379                           
 14380 ;; *************** function _AdcConvert *****************
 14381 ;; Defined at:
 14382 ;;		line 43 in file "AdcApp.c"
 14383 ;; Parameters:    Size  Location     Type
 14384 ;;		None
 14385 ;; Auto vars:     Size  Location     Type
 14386 ;;  _adcResult      2   83[BANK0 ] unsigned int 
 14387 ;;  _adcResult      2   85[BANK0 ] unsigned int 
 14388 ;;  adcRes          2   91[BANK0 ] unsigned int 
 14389 ;;  ldTxSate        2   89[BANK0 ] unsigned int 
 14390 ;;  ldRxSate        2   87[BANK0 ] unsigned int 
 14391 ;;  idx             1   96[BANK0 ] unsigned char 
 14392 ;; Return value:  Size  Location     Type
 14393 ;;                  1    wreg      void 
 14394 ;; Registers used:
 14395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14396 ;; Tracked objects:
 14397 ;;		On entry : 0/0
 14398 ;;		On exit  : 0/0
 14399 ;;		Unchanged: 0/0
 14400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14401 ;;      Params:         0       0       0       0       0       0       0
 14402 ;;      Locals:         0      14       0       0       0       0       0
 14403 ;;      Temps:          0       2       0       0       0       0       0
 14404 ;;      Totals:         0      16       0       0       0       0       0
 14405 ;;Total ram usage:       16 bytes
 14406 ;; Hardware stack levels used:    1
 14407 ;; Hardware stack levels required when called:    9
 14408 ;; This function calls:
 14409 ;;		_ADC_GetConversion
 14410 ;;		_FlashSampleWrite
 14411 ;;		_GetUint16FromBitArray
 14412 ;;		___ftdiv
 14413 ;;		___ftmul
 14414 ;;		___fttol
 14415 ;;		___lwtoft
 14416 ;;		_pow
 14417 ;; This function is called by:
 14418 ;;		_main
 14419 ;; This function uses a non-reentrant model
 14420 ;;
 14421                           
 14422                           	psect	text84
 14423  000FC2                     __ptext84:
 14424                           	opt stack 0
 14425  000FC2                     _AdcConvert:
 14426                           	opt stack 21
 14427                           
 14428                           ;AdcApp.c: 48: uint16_t adcRes = 0;
 14429                           
 14430                           ;incstack = 0
 14431  000FC2  0E00               	movlw	0
 14432  000FC4  0100               	movlb	0	; () banked
 14433  000FC6  6FBC               	movwf	(AdcConvert@adcRes+1)& (0+255),b
 14434  000FC8  0E00               	movlw	0
 14435  000FCA  6FBB               	movwf	AdcConvert@adcRes& (0+255),b
 14436                           
 14437                           ;AdcApp.c: 49: uint8_t idx = 0;
 14438  000FCC  0E00               	movlw	0
 14439  000FCE  6FC0               	movwf	AdcConvert@idx& (0+255),b
 14440                           
 14441                           ;AdcApp.c: 50: uint16_t ldRxSate = 0, ldTxSate = 0;
 14442  000FD0  0E00               	movlw	0
 14443  000FD2  6FB8               	movwf	(AdcConvert@ldRxSate+1)& (0+255),b
 14444  000FD4  0E00               	movlw	0
 14445  000FD6  6FB7               	movwf	AdcConvert@ldRxSate& (0+255),b
 14446  000FD8  0E00               	movlw	0
 14447  000FDA  6FBA               	movwf	(AdcConvert@ldTxSate+1)& (0+255),b
 14448  000FDC  0E00               	movlw	0
 14449  000FDE  6FB9               	movwf	AdcConvert@ldTxSate& (0+255),b
 14450                           
 14451                           ;AdcApp.c: 51: if (adcSampleMode == CIRCULAR)
 14452  000FE0  503D               	movf	_adcSampleMode,w,c
 14453  000FE2  A4D8               	btfss	status,2,c
 14454  000FE4  D0A3               	goto	l126
 14455                           
 14456                           ; BSR set to: 0
 14457                           ;AdcApp.c: 52: {
 14458                           ;AdcApp.c: 53: for(idx = 0; idx < (9); idx++)
 14459  000FE6  0E00               	movlw	0
 14460  000FE8  6FC0               	movwf	AdcConvert@idx& (0+255),b
 14461  000FEA                     l8703:
 14462                           
 14463                           ; BSR set to: 0
 14464  000FEA  0E08               	movlw	8
 14465  000FEC  65C0               	cpfsgt	AdcConvert@idx& (0+255),b
 14466  000FEE  D001               	goto	l127
 14467  000FF0  D06D               	goto	u8770
 14468  000FF2                     l127:
 14469                           
 14470                           ; BSR set to: 0
 14471                           ;AdcApp.c: 54: {
 14472                           ;AdcApp.c: 55: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
 14473                           
 14474                           ; BSR set to: 0
 14475  000FF2  51C0               	movf	AdcConvert@idx& (0+255),w,b
 14476  000FF4  0D01               	mullw	1
 14477  000FF6  0E47               	movlw	low _channelArr
 14478  000FF8  24F3               	addwf	prodl,w,c
 14479  000FFA  6EF6               	movwf	tblptrl,c
 14480  000FFC  0E06               	movlw	high _channelArr
 14481  000FFE  20F4               	addwfc	prodh,w,c
 14482  001000  6EF7               	movwf	tblptrh,c
 14483  001002                     	if	0	;There are less than 3 active tblptr bytes
 14484  001002                     	endif
 14485  001002  0008               	tblrd		*
 14486  001004  50F5               	movf	tablat,w,c
 14487  001006  EC02  F020         	call	_ADC_GetConversion
 14488  00100A  C018  F0B3         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
 14489  00100E  C019  F0B4         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
 14490                           
 14491                           ;AdcApp.c: 56: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14492  001012  0E00               	movlw	0
 14493  001014  0100               	movlb	0	; () banked
 14494  001016  6FA3               	movwf	pow@y& (0+255),b
 14495  001018  0E20               	movlw	32
 14496  00101A  6FA4               	movwf	(pow@y+1)& (0+255),b
 14497  00101C  0E41               	movlw	65
 14498  00101E  6FA5               	movwf	(pow@y+2)& (0+255),b
 14499  001020  0E00               	movlw	0
 14500  001022  6FA0               	movwf	pow@x& (0+255),b
 14501  001024  0E00               	movlw	0
 14502  001026  6FA1               	movwf	(pow@x+1)& (0+255),b
 14503  001028  0E40               	movlw	64
 14504  00102A  6FA2               	movwf	(pow@x+2)& (0+255),b
 14505  00102C  EC99  F00D         	call	_pow	;wreg free
 14506  001030  C0A0  F0BD         	movff	?_pow,_AdcConvert$3599
 14507  001034  C0A1  F0BE         	movff	?_pow+1,_AdcConvert$3599+1
 14508  001038  C0A2  F0BF         	movff	?_pow+2,_AdcConvert$3599+2
 14509                           
 14510                           ;AdcApp.c: 56: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14511  00103C  0EC0               	movlw	192
 14512  00103E  0100               	movlb	0	; () banked
 14513  001040  6F6C               	movwf	___ftmul@f2& (0+255),b
 14514  001042  0E50               	movlw	80
 14515  001044  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14516  001046  0E45               	movlw	69
 14517  001048  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14518  00104A  C0BD  F02C         	movff	_AdcConvert$3599,___ftdiv@f2
 14519  00104E  C0BE  F02D         	movff	_AdcConvert$3599+1,___ftdiv@f2+1
 14520  001052  C0BF  F02E         	movff	_AdcConvert$3599+2,___ftdiv@f2+2
 14521  001056  C0B3  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
 14522  00105A  C0B4  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
 14523  00105E  ECB9  F020         	call	___lwtoft	;wreg free
 14524  001062  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 14525  001066  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 14526  00106A  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 14527  00106E  ECC5  F012         	call	___ftdiv	;wreg free
 14528  001072  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14529  001076  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14530  00107A  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14531  00107E  EC4A  F012         	call	___ftmul	;wreg free
 14532  001082  C069  F078         	movff	?___ftmul,___fttol@f1
 14533  001086  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 14534  00108A  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 14535  00108E  ECCE  F011         	call	___fttol	;wreg free
 14536  001092  C078  F0BB         	movff	?___fttol,AdcConvert@adcRes
 14537  001096  C079  F0BC         	movff	?___fttol+1,AdcConvert@adcRes+1
 14538                           
 14539                           ;AdcApp.c: 57: FlashSampleWrite(adcRes, idx + 1);
 14540  00109A  C0BB  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 14541  00109E  C0BC  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 14542  0010A2  0100               	movlb	0	; () banked
 14543  0010A4  29C0               	incf	AdcConvert@idx& (0+255),w,b
 14544  0010A6  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14545  0010A8  EC4C  F011         	call	_FlashSampleWrite	;wreg free
 14546                           
 14547                           ;AdcApp.c: 58: _delay((unsigned long)((250)*(8000000/4000.0)));
 14548  0010AC  0E03               	movlw	3
 14549  0010AE  0100               	movlb	0	; () banked
 14550  0010B0  6FB2               	movwf	(??_AdcConvert+1)& (0+255),b
 14551  0010B2  0E8A               	movlw	138
 14552  0010B4  6FB1               	movwf	??_AdcConvert& (0+255),b
 14553  0010B6  0E55               	movlw	85
 14554  0010B8                     u9147:
 14555  0010B8  2EE8               	decfsz	wreg,f,c
 14556  0010BA  D7FE               	bra	u9147
 14557  0010BC  2FB1               	decfsz	??_AdcConvert& (0+255),f,b
 14558  0010BE  D7FC               	bra	u9147
 14559  0010C0  2FB2               	decfsz	(??_AdcConvert+1)& (0+255),f,b
 14560  0010C2  D7FA               	bra	u9147
 14561  0010C4  D000               	nop2	
 14562  0010C6  0100               	movlb	0	; () banked
 14563  0010C8  2BC0               	incf	AdcConvert@idx& (0+255),f,b
 14564  0010CA  D78F               	goto	l8703
 14565  0010CC                     u8770:
 14566                           
 14567                           ; BSR set to: 0
 14568                           ;AdcApp.c: 59: }
 14569                           ;AdcApp.c: 62: ldRxSate = GetUint16FromBitArray(synthLdRxArray, 12);
 14570                           
 14571                           ; BSR set to: 0
 14572  0010CC  0EB0               	movlw	low _synthLdRxArray
 14573  0010CE  6E18               	movwf	GetUint16FromBitArray@bitarray,c
 14574  0010D0  0E01               	movlw	high _synthLdRxArray
 14575  0010D2  6E19               	movwf	GetUint16FromBitArray@bitarray+1,c
 14576  0010D4  0E00               	movlw	0
 14577  0010D6  6E1B               	movwf	GetUint16FromBitArray@numOfBits+1,c
 14578  0010D8  0E0C               	movlw	12
 14579  0010DA  6E1A               	movwf	GetUint16FromBitArray@numOfBits,c
 14580  0010DC  EC1E  F01B         	call	_GetUint16FromBitArray	;wreg free
 14581  0010E0  C018  F0B7         	movff	?_GetUint16FromBitArray,AdcConvert@ldRxSate
 14582  0010E4  C019  F0B8         	movff	?_GetUint16FromBitArray+1,AdcConvert@ldRxSate+1
 14583                           
 14584                           ;AdcApp.c: 63: FlashSampleWrite(ldRxSate, idx + 1);
 14585  0010E8  C0B7  F02D         	movff	AdcConvert@ldRxSate,FlashSampleWrite@sampleData
 14586  0010EC  C0B8  F02E         	movff	AdcConvert@ldRxSate+1,FlashSampleWrite@sampleData+1
 14587  0010F0  0100               	movlb	0	; () banked
 14588  0010F2  29C0               	incf	AdcConvert@idx& (0+255),w,b
 14589  0010F4  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14590  0010F6  EC4C  F011         	call	_FlashSampleWrite	;wreg free
 14591                           
 14592                           ;AdcApp.c: 64: ldTxSate = GetUint16FromBitArray(synthLdTxArray, 12);
 14593  0010FA  0EA4               	movlw	low _synthLdTxArray
 14594  0010FC  6E18               	movwf	GetUint16FromBitArray@bitarray,c
 14595  0010FE  0E01               	movlw	high _synthLdTxArray
 14596  001100  6E19               	movwf	GetUint16FromBitArray@bitarray+1,c
 14597  001102  0E00               	movlw	0
 14598  001104  6E1B               	movwf	GetUint16FromBitArray@numOfBits+1,c
 14599  001106  0E0C               	movlw	12
 14600  001108  6E1A               	movwf	GetUint16FromBitArray@numOfBits,c
 14601  00110A  EC1E  F01B         	call	_GetUint16FromBitArray	;wreg free
 14602  00110E  C018  F0B9         	movff	?_GetUint16FromBitArray,AdcConvert@ldTxSate
 14603  001112  C019  F0BA         	movff	?_GetUint16FromBitArray+1,AdcConvert@ldTxSate+1
 14604                           
 14605                           ;AdcApp.c: 65: FlashSampleWrite(ldTxSate, idx + 2);
 14606  001116  C0B9  F02D         	movff	AdcConvert@ldTxSate,FlashSampleWrite@sampleData
 14607  00111A  C0BA  F02E         	movff	AdcConvert@ldTxSate+1,FlashSampleWrite@sampleData+1
 14608  00111E  0100               	movlb	0	; () banked
 14609  001120  51C0               	movf	AdcConvert@idx& (0+255),w,b
 14610  001122  0F02               	addlw	2
 14611  001124  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14612  001126  EC4C  F011         	call	_FlashSampleWrite	;wreg free
 14613                           
 14614                           ;AdcApp.c: 67: }
 14615  00112A  0012               	return	
 14616  00112C                     l126:
 14617                           
 14618                           ;AdcApp.c: 68: else if (adcSampleMode == SINGLE_CHANNEL)
 14619  00112C  043D               	decf	_adcSampleMode,w,c
 14620  00112E  A4D8               	btfss	status,2,c
 14621  001130  0012               	return	
 14622                           
 14623                           ;AdcApp.c: 69: {
 14624                           ;AdcApp.c: 70: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
 14625  001132  0100               	movlb	0	; () banked
 14626  001134  51F6               	movf	_channel& (0+255),w,b
 14627  001136  0D01               	mullw	1
 14628  001138  0E47               	movlw	low _channelArr
 14629  00113A  24F3               	addwf	prodl,w,c
 14630  00113C  6EF6               	movwf	tblptrl,c
 14631  00113E  0E06               	movlw	high _channelArr
 14632  001140  20F4               	addwfc	prodh,w,c
 14633  001142  6EF7               	movwf	tblptrh,c
 14634  001144                     	if	0	;There are less than 3 active tblptr bytes
 14635  001144                     	endif
 14636  001144  0008               	tblrd		*
 14637  001146  50F5               	movf	tablat,w,c
 14638  001148  EC02  F020         	call	_ADC_GetConversion
 14639  00114C  C018  F0B5         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_350
 14640  001150  C019  F0B6         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_350+1
 14641                           
 14642                           ;AdcApp.c: 71: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14643  001154  0E00               	movlw	0
 14644  001156  0100               	movlb	0	; () banked
 14645  001158  6FA3               	movwf	pow@y& (0+255),b
 14646  00115A  0E20               	movlw	32
 14647  00115C  6FA4               	movwf	(pow@y+1)& (0+255),b
 14648  00115E  0E41               	movlw	65
 14649  001160  6FA5               	movwf	(pow@y+2)& (0+255),b
 14650  001162  0E00               	movlw	0
 14651  001164  6FA0               	movwf	pow@x& (0+255),b
 14652  001166  0E00               	movlw	0
 14653  001168  6FA1               	movwf	(pow@x+1)& (0+255),b
 14654  00116A  0E40               	movlw	64
 14655  00116C  6FA2               	movwf	(pow@x+2)& (0+255),b
 14656  00116E  EC99  F00D         	call	_pow	;wreg free
 14657  001172  C0A0  F0BD         	movff	?_pow,_AdcConvert$3599
 14658  001176  C0A1  F0BE         	movff	?_pow+1,_AdcConvert$3599+1
 14659  00117A  C0A2  F0BF         	movff	?_pow+2,_AdcConvert$3599+2
 14660                           
 14661                           ;AdcApp.c: 71: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14662  00117E  0EC0               	movlw	192
 14663  001180  0100               	movlb	0	; () banked
 14664  001182  6F6C               	movwf	___ftmul@f2& (0+255),b
 14665  001184  0E50               	movlw	80
 14666  001186  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14667  001188  0E45               	movlw	69
 14668  00118A  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14669  00118C  C0BD  F02C         	movff	_AdcConvert$3599,___ftdiv@f2
 14670  001190  C0BE  F02D         	movff	_AdcConvert$3599+1,___ftdiv@f2+1
 14671  001194  C0BF  F02E         	movff	_AdcConvert$3599+2,___ftdiv@f2+2
 14672  001198  C0B5  F020         	movff	AdcConvert@_adcResult_350,___lwtoft@c
 14673  00119C  C0B6  F021         	movff	AdcConvert@_adcResult_350+1,___lwtoft@c+1
 14674  0011A0  ECB9  F020         	call	___lwtoft	;wreg free
 14675  0011A4  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 14676  0011A8  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 14677  0011AC  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 14678  0011B0  ECC5  F012         	call	___ftdiv	;wreg free
 14679  0011B4  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14680  0011B8  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14681  0011BC  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14682  0011C0  EC4A  F012         	call	___ftmul	;wreg free
 14683  0011C4  C069  F078         	movff	?___ftmul,___fttol@f1
 14684  0011C8  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 14685  0011CC  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 14686  0011D0  ECCE  F011         	call	___fttol	;wreg free
 14687  0011D4  C078  F0BB         	movff	?___fttol,AdcConvert@adcRes
 14688  0011D8  C079  F0BC         	movff	?___fttol+1,AdcConvert@adcRes+1
 14689  0011DC  0012               	return	
 14690  0011DE                     __end_of_AdcConvert:
 14691                           	opt stack 0
 14692                           tosu	equ	0xFFF
 14693                           tosh	equ	0xFFE
 14694                           tosl	equ	0xFFD
 14695                           pclath	equ	0xFFA
 14696                           tblptru	equ	0xFF8
 14697                           tblptrh	equ	0xFF7
 14698                           tblptrl	equ	0xFF6
 14699                           tablat	equ	0xFF5
 14700                           prodh	equ	0xFF4
 14701                           prodl	equ	0xFF3
 14702                           intcon	equ	0xFF2
 14703                           intcon2	equ	0xFF1
 14704                           postinc0	equ	0xFEE
 14705                           plusw0	equ	0xFEB
 14706                           wreg	equ	0xFE8
 14707                           indf1	equ	0xFE7
 14708                           postdec1	equ	0xFE5
 14709                           fsr1h	equ	0xFE2
 14710                           fsr1l	equ	0xFE1
 14711                           indf2	equ	0xFDF
 14712                           postinc2	equ	0xFDE
 14713                           postdec2	equ	0xFDD
 14714                           plusw2	equ	0xFDB
 14715                           fsr2h	equ	0xFDA
 14716                           fsr2l	equ	0xFD9
 14717                           status	equ	0xFD8
 14718                           
 14719 ;; *************** function _pow *****************
 14720 ;; Defined at:
 14721 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 14722 ;; Parameters:    Size  Location     Type
 14723 ;;  x               3   64[BANK0 ] void 
 14724 ;;  y               3   67[BANK0 ] void 
 14725 ;; Auto vars:     Size  Location     Type
 14726 ;;  yi              4   77[BANK0 ] unsigned long 
 14727 ;;  sign            1   76[BANK0 ] unsigned char 
 14728 ;; Return value:  Size  Location     Type
 14729 ;;                  3   64[BANK0 ] unsigned char 
 14730 ;; Registers used:
 14731 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14732 ;; Tracked objects:
 14733 ;;		On entry : 0/0
 14734 ;;		On exit  : 0/0
 14735 ;;		Unchanged: 0/0
 14736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14737 ;;      Params:         0       6       0       0       0       0       0
 14738 ;;      Locals:         0      11       0       0       0       0       0
 14739 ;;      Temps:          0       0       0       0       0       0       0
 14740 ;;      Totals:         0      17       0       0       0       0       0
 14741 ;;Total ram usage:       17 bytes
 14742 ;; Hardware stack levels used:    1
 14743 ;; Hardware stack levels required when called:    8
 14744 ;; This function calls:
 14745 ;;		___ftge
 14746 ;;		___ftmul
 14747 ;;		___ftneg
 14748 ;;		___fttol
 14749 ;;		___lltoft
 14750 ;;		_exp
 14751 ;;		_log
 14752 ;; This function is called by:
 14753 ;;		_AdcConvert
 14754 ;;		_ReadIntFromEeprom
 14755 ;; This function uses a non-reentrant model
 14756 ;;
 14757                           
 14758                           	psect	text85
 14759  001B32                     __ptext85:
 14760                           	opt stack 0
 14761  001B32                     _pow:
 14762                           	opt stack 18
 14763                           
 14764                           ;incstack = 0
 14765  001B32  0E00               	movlw	0
 14766  001B34  0100               	movlb	0	; () banked
 14767  001B36  6FAC               	movwf	pow@sign& (0+255),b
 14768                           
 14769                           ; BSR set to: 0
 14770  001B38  51A0               	movf	pow@x& (0+255),w,b
 14771  001B3A  11A1               	iorwf	(pow@x+1)& (0+255),w,b
 14772  001B3C  11A2               	iorwf	(pow@x+2)& (0+255),w,b
 14773  001B3E  A4D8               	btfss	status,2,c
 14774  001B40  D01D               	goto	l2036
 14775                           
 14776                           ; BSR set to: 0
 14777  001B42  0E00               	movlw	0
 14778  001B44  6E18               	movwf	___ftge@ff1,c
 14779  001B46  0E00               	movlw	0
 14780  001B48  6E19               	movwf	___ftge@ff1+1,c
 14781  001B4A  0E00               	movlw	0
 14782  001B4C  6E1A               	movwf	___ftge@ff1+2,c
 14783  001B4E  C0A3  F01B         	movff	pow@y,___ftge@ff2
 14784  001B52  C0A4  F01C         	movff	pow@y+1,___ftge@ff2+1
 14785  001B56  C0A5  F01D         	movff	pow@y+2,___ftge@ff2+2
 14786  001B5A  ECEE  F018         	call	___ftge	;wreg free
 14787  001B5E  A0D8               	btfss	status,0,c
 14788  001B60  D005               	goto	l2037
 14789  001B62  0E00               	movlw	0
 14790  001B64  0101               	movlb	1	; () banked
 14791  001B66  6F35               	movwf	(_errno+1)& (0+255),b
 14792  001B68  0E21               	movlw	33
 14793  001B6A  6F34               	movwf	_errno& (0+255),b
 14794  001B6C                     l2037:
 14795  001B6C  0E00               	movlw	0
 14796  001B6E  0100               	movlb	0	; () banked
 14797  001B70  6FA0               	movwf	?_pow& (0+255),b
 14798  001B72  0E00               	movlw	0
 14799  001B74  6FA1               	movwf	(?_pow+1)& (0+255),b
 14800  001B76  0E00               	movlw	0
 14801  001B78  6FA2               	movwf	(?_pow+2)& (0+255),b
 14802                           
 14803                           ; BSR set to: 0
 14804  001B7A  0012               	return	
 14805  001B7C                     l2036:
 14806                           
 14807                           ; BSR set to: 0
 14808                           
 14809                           ; BSR set to: 0
 14810  001B7C  51A3               	movf	pow@y& (0+255),w,b
 14811  001B7E  11A4               	iorwf	(pow@y+1)& (0+255),w,b
 14812  001B80  11A5               	iorwf	(pow@y+2)& (0+255),w,b
 14813  001B82  A4D8               	btfss	status,2,c
 14814  001B84  D007               	goto	l2039
 14815                           
 14816                           ; BSR set to: 0
 14817  001B86  0E00               	movlw	0
 14818  001B88  6FA0               	movwf	?_pow& (0+255),b
 14819  001B8A  0E80               	movlw	128
 14820  001B8C  6FA1               	movwf	(?_pow+1)& (0+255),b
 14821  001B8E  0E3F               	movlw	63
 14822  001B90  6FA2               	movwf	(?_pow+2)& (0+255),b
 14823                           
 14824                           ; BSR set to: 0
 14825  001B92  0012               	return	
 14826  001B94                     l2039:
 14827                           
 14828                           ; BSR set to: 0
 14829                           
 14830                           ; BSR set to: 0
 14831  001B94  AFA2               	btfss	(pow@x+2)& (0+255),7,b
 14832  001B96  D043               	goto	l2040
 14833                           
 14834                           ; BSR set to: 0
 14835  001B98  C0A3  F078         	movff	pow@y,___fttol@f1
 14836  001B9C  C0A4  F079         	movff	pow@y+1,___fttol@f1+1
 14837  001BA0  C0A5  F07A         	movff	pow@y+2,___fttol@f1+2
 14838  001BA4  ECCE  F011         	call	___fttol	;wreg free
 14839  001BA8  C078  F0AD         	movff	?___fttol,pow@yi
 14840  001BAC  C079  F0AE         	movff	?___fttol+1,pow@yi+1
 14841  001BB0  C07A  F0AF         	movff	?___fttol+2,pow@yi+2
 14842  001BB4  C07B  F0B0         	movff	?___fttol+3,pow@yi+3
 14843  001BB8  C0AD  F020         	movff	pow@yi,___lltoft@c
 14844  001BBC  C0AE  F021         	movff	pow@yi+1,___lltoft@c+1
 14845  001BC0  C0AF  F022         	movff	pow@yi+2,___lltoft@c+2
 14846  001BC4  C0B0  F023         	movff	pow@yi+3,___lltoft@c+3
 14847  001BC8  EC43  F01C         	call	___lltoft	;wreg free
 14848  001BCC  0100               	movlb	0	; () banked
 14849  001BCE  51A3               	movf	pow@y& (0+255),w,b
 14850  001BD0  1820               	xorwf	?___lltoft,w,c
 14851  001BD2  E107               	bnz	u7390
 14852  001BD4  51A4               	movf	(pow@y+1)& (0+255),w,b
 14853  001BD6  1821               	xorwf	?___lltoft+1,w,c
 14854  001BD8  E104               	bnz	u7390
 14855  001BDA  51A5               	movf	(pow@y+2)& (0+255),w,b
 14856  001BDC  1822               	xorwf	?___lltoft+2,w,c
 14857  001BDE  B4D8               	btfsc	status,2,c
 14858  001BE0  D00D               	goto	l2041
 14859  001BE2                     u7390:
 14860                           
 14861                           ; BSR set to: 0
 14862  001BE2  0E00               	movlw	0
 14863  001BE4  0101               	movlb	1	; () banked
 14864  001BE6  6F35               	movwf	(_errno+1)& (0+255),b
 14865  001BE8  0E21               	movlw	33
 14866  001BEA  6F34               	movwf	_errno& (0+255),b
 14867  001BEC  0E00               	movlw	0
 14868  001BEE  0100               	movlb	0	; () banked
 14869  001BF0  6FA0               	movwf	?_pow& (0+255),b
 14870  001BF2  0E00               	movlw	0
 14871  001BF4  6FA1               	movwf	(?_pow+1)& (0+255),b
 14872  001BF6  0E00               	movlw	0
 14873  001BF8  6FA2               	movwf	(?_pow+2)& (0+255),b
 14874                           
 14875                           ; BSR set to: 0
 14876  001BFA  0012               	return	
 14877  001BFC                     l2041:
 14878                           
 14879                           ; BSR set to: 0
 14880                           
 14881                           ; BSR set to: 0
 14882  001BFC  51AD               	movf	pow@yi& (0+255),w,b
 14883  001BFE  0B01               	andlw	1
 14884  001C00  6FAC               	movwf	pow@sign& (0+255),b
 14885                           
 14886                           ; BSR set to: 0
 14887  001C02  C0A0  F018         	movff	pow@x,___ftneg@f1
 14888  001C06  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 14889  001C0A  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 14890  001C0E  ECA7  F020         	call	___ftneg	;wreg free
 14891  001C12  C018  F0A0         	movff	?___ftneg,pow@x
 14892  001C16  C019  F0A1         	movff	?___ftneg+1,pow@x+1
 14893  001C1A  C01A  F0A2         	movff	?___ftneg+2,pow@x+2
 14894  001C1E                     l2040:
 14895  001C1E  C0A0  F08E         	movff	pow@x,log@x
 14896  001C22  C0A1  F08F         	movff	pow@x+1,log@x+1
 14897  001C26  C0A2  F090         	movff	pow@x+2,log@x+2
 14898  001C2A  EC17  F00F         	call	_log	;wreg free
 14899  001C2E  C08E  F0A6         	movff	?_log,_pow$3602
 14900  001C32  C08F  F0A7         	movff	?_log+1,_pow$3602+1
 14901  001C36  C090  F0A8         	movff	?_log+2,_pow$3602+2
 14902  001C3A  C0A6  F069         	movff	_pow$3602,___ftmul@f1
 14903  001C3E  C0A7  F06A         	movff	_pow$3602+1,___ftmul@f1+1
 14904  001C42  C0A8  F06B         	movff	_pow$3602+2,___ftmul@f1+2
 14905  001C46  C0A3  F06C         	movff	pow@y,___ftmul@f2
 14906  001C4A  C0A4  F06D         	movff	pow@y+1,___ftmul@f2+1
 14907  001C4E  C0A5  F06E         	movff	pow@y+2,___ftmul@f2+2
 14908  001C52  EC4A  F012         	call	___ftmul	;wreg free
 14909  001C56  C069  F0A9         	movff	?___ftmul,_pow$3603
 14910  001C5A  C06A  F0AA         	movff	?___ftmul+1,_pow$3603+1
 14911  001C5E  C06B  F0AB         	movff	?___ftmul+2,_pow$3603+2
 14912  001C62  C0A9  F097         	movff	_pow$3603,exp@x
 14913  001C66  C0AA  F098         	movff	_pow$3603+1,exp@x+1
 14914  001C6A  C0AB  F099         	movff	_pow$3603+2,exp@x+2
 14915  001C6E  ECEB  F009         	call	_exp	;wreg free
 14916  001C72  C097  F0A0         	movff	?_exp,pow@x
 14917  001C76  C098  F0A1         	movff	?_exp+1,pow@x+1
 14918  001C7A  C099  F0A2         	movff	?_exp+2,pow@x+2
 14919  001C7E  0100               	movlb	0	; () banked
 14920  001C80  51AC               	movf	pow@sign& (0+255),w,b
 14921  001C82  B4D8               	btfsc	status,2,c
 14922  001C84  D00F               	goto	l2042
 14923                           
 14924                           ; BSR set to: 0
 14925  001C86  C0A0  F018         	movff	pow@x,___ftneg@f1
 14926  001C8A  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 14927  001C8E  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 14928  001C92  ECA7  F020         	call	___ftneg	;wreg free
 14929  001C96  C018  F0A0         	movff	?___ftneg,?_pow
 14930  001C9A  C019  F0A1         	movff	?___ftneg+1,?_pow+1
 14931  001C9E  C01A  F0A2         	movff	?___ftneg+2,?_pow+2
 14932  001CA2  0012               	return	
 14933  001CA4                     l2042:
 14934                           
 14935                           ; BSR set to: 0
 14936  001CA4  C0A0  F0A0         	movff	pow@x,?_pow
 14937  001CA8  C0A1  F0A1         	movff	pow@x+1,?_pow+1
 14938  001CAC  C0A2  F0A2         	movff	pow@x+2,?_pow+2
 14939  001CB0  0012               	return		;funcret
 14940  001CB2                     __end_of_pow:
 14941                           	opt stack 0
 14942                           tosu	equ	0xFFF
 14943                           tosh	equ	0xFFE
 14944                           tosl	equ	0xFFD
 14945                           pclath	equ	0xFFA
 14946                           tblptru	equ	0xFF8
 14947                           tblptrh	equ	0xFF7
 14948                           tblptrl	equ	0xFF6
 14949                           tablat	equ	0xFF5
 14950                           prodh	equ	0xFF4
 14951                           prodl	equ	0xFF3
 14952                           intcon	equ	0xFF2
 14953                           intcon2	equ	0xFF1
 14954                           postinc0	equ	0xFEE
 14955                           plusw0	equ	0xFEB
 14956                           wreg	equ	0xFE8
 14957                           indf1	equ	0xFE7
 14958                           postdec1	equ	0xFE5
 14959                           fsr1h	equ	0xFE2
 14960                           fsr1l	equ	0xFE1
 14961                           indf2	equ	0xFDF
 14962                           postinc2	equ	0xFDE
 14963                           postdec2	equ	0xFDD
 14964                           plusw2	equ	0xFDB
 14965                           fsr2h	equ	0xFDA
 14966                           fsr2l	equ	0xFD9
 14967                           status	equ	0xFD8
 14968                           
 14969 ;; *************** function _log *****************
 14970 ;; Defined at:
 14971 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 14972 ;; Parameters:    Size  Location     Type
 14973 ;;  x               3   46[BANK0 ] unsigned char 
 14974 ;; Auto vars:     Size  Location     Type
 14975 ;;  exponent        2   49[BANK0 ] int 
 14976 ;; Return value:  Size  Location     Type
 14977 ;;                  3   46[BANK0 ] int 
 14978 ;; Registers used:
 14979 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14980 ;; Tracked objects:
 14981 ;;		On entry : 0/0
 14982 ;;		On exit  : 0/0
 14983 ;;		Unchanged: 0/0
 14984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14985 ;;      Params:         0       3       0       0       0       0       0
 14986 ;;      Locals:         0       2       0       0       0       0       0
 14987 ;;      Temps:          0       0       0       0       0       0       0
 14988 ;;      Totals:         0       5       0       0       0       0       0
 14989 ;;Total ram usage:        5 bytes
 14990 ;; Hardware stack levels used:    1
 14991 ;; Hardware stack levels required when called:    7
 14992 ;; This function calls:
 14993 ;;		___awtoft
 14994 ;;		___ftadd
 14995 ;;		___ftmul
 14996 ;;		_eval_poly
 14997 ;;		_frexp
 14998 ;; This function is called by:
 14999 ;;		_pow
 15000 ;; This function uses a non-reentrant model
 15001 ;;
 15002                           
 15003                           	psect	text86
 15004  001E2E                     __ptext86:
 15005                           	opt stack 0
 15006  001E2E                     _log:
 15007                           	opt stack 18
 15008                           
 15009                           ;incstack = 0
 15010  001E2E  0100               	movlb	0	; () banked
 15011  001E30  AF90               	btfss	(log@x+2)& (0+255),7,b
 15012  001E32  D00D               	goto	l2298
 15013                           
 15014                           ; BSR set to: 0
 15015  001E34  0E00               	movlw	0
 15016  001E36  0101               	movlb	1	; () banked
 15017  001E38  6F35               	movwf	(_errno+1)& (0+255),b
 15018  001E3A  0E21               	movlw	33
 15019  001E3C  6F34               	movwf	_errno& (0+255),b
 15020  001E3E  0E00               	movlw	0
 15021  001E40  0100               	movlb	0	; () banked
 15022  001E42  6F8E               	movwf	?_log& (0+255),b
 15023  001E44  0E00               	movlw	0
 15024  001E46  6F8F               	movwf	(?_log+1)& (0+255),b
 15025  001E48  0E00               	movlw	0
 15026  001E4A  6F90               	movwf	(?_log+2)& (0+255),b
 15027                           
 15028                           ; BSR set to: 0
 15029  001E4C  0012               	return	
 15030  001E4E                     l2298:
 15031                           
 15032                           ; BSR set to: 0
 15033                           
 15034                           ; BSR set to: 0
 15035  001E4E  518E               	movf	log@x& (0+255),w,b
 15036  001E50  118F               	iorwf	(log@x+1)& (0+255),w,b
 15037  001E52  1190               	iorwf	(log@x+2)& (0+255),w,b
 15038  001E54  A4D8               	btfss	status,2,c
 15039  001E56  D00D               	goto	l2300
 15040                           
 15041                           ; BSR set to: 0
 15042  001E58  0E00               	movlw	0
 15043  001E5A  0101               	movlb	1	; () banked
 15044  001E5C  6F35               	movwf	(_errno+1)& (0+255),b
 15045  001E5E  0E22               	movlw	34
 15046  001E60  6F34               	movwf	_errno& (0+255),b
 15047  001E62  0E00               	movlw	0
 15048  001E64  0100               	movlb	0	; () banked
 15049  001E66  6F8E               	movwf	?_log& (0+255),b
 15050  001E68  0E00               	movlw	0
 15051  001E6A  6F8F               	movwf	(?_log+1)& (0+255),b
 15052  001E6C  0E00               	movlw	0
 15053  001E6E  6F90               	movwf	(?_log+2)& (0+255),b
 15054                           
 15055                           ; BSR set to: 0
 15056  001E70  0012               	return	
 15057  001E72                     l2300:
 15058                           
 15059                           ; BSR set to: 0
 15060                           
 15061                           ; BSR set to: 0
 15062  001E72  0E00               	movlw	0
 15063  001E74  6F6C               	movwf	___ftmul@f2& (0+255),b
 15064  001E76  0E00               	movlw	0
 15065  001E78  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 15066  001E7A  0E40               	movlw	64
 15067  001E7C  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 15068  001E7E  0E91               	movlw	low log@exponent
 15069  001E80  6E1B               	movwf	frexp@eptr,c
 15070  001E82  0E00               	movlw	high log@exponent
 15071  001E84  6E1C               	movwf	frexp@eptr+1,c
 15072  001E86  C08E  F018         	movff	log@x,frexp@value
 15073  001E8A  C08F  F019         	movff	log@x+1,frexp@value+1
 15074  001E8E  C090  F01A         	movff	log@x+2,frexp@value+2
 15075  001E92  ECA6  F018         	call	_frexp	;wreg free
 15076  001E96  C018  F069         	movff	?_frexp,___ftmul@f1
 15077  001E9A  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
 15078  001E9E  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
 15079  001EA2  EC4A  F012         	call	___ftmul	;wreg free
 15080  001EA6  C069  F078         	movff	?___ftmul,___ftadd@f1
 15081  001EAA  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 15082  001EAE  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 15083  001EB2  0E00               	movlw	0
 15084  001EB4  0100               	movlb	0	; () banked
 15085  001EB6  6F7B               	movwf	___ftadd@f2& (0+255),b
 15086  001EB8  0E80               	movlw	128
 15087  001EBA  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 15088  001EBC  0EBF               	movlw	191
 15089  001EBE  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 15090  001EC0  ECC2  F00C         	call	___ftadd	;wreg free
 15091  001EC4  C078  F08E         	movff	?___ftadd,log@x
 15092  001EC8  C079  F08F         	movff	?___ftadd+1,log@x+1
 15093  001ECC  C07A  F090         	movff	?___ftadd+2,log@x+2
 15094  001ED0  0100               	movlb	0	; () banked
 15095  001ED2  0791               	decf	log@exponent& (0+255),f,b
 15096  001ED4  A0D8               	btfss	status,0,c
 15097  001ED6  0792               	decf	(log@exponent+1)& (0+255),f,b
 15098                           
 15099                           ; BSR set to: 0
 15100  001ED8  C08E  F084         	movff	log@x,eval_poly@x
 15101  001EDC  C08F  F085         	movff	log@x+1,eval_poly@x+1
 15102  001EE0  C090  F086         	movff	log@x+2,eval_poly@x+2
 15103  001EE4  0E7A               	movlw	low log@coeff
 15104  001EE6  6F87               	movwf	eval_poly@d& (0+255),b
 15105  001EE8  0E06               	movlw	high log@coeff
 15106  001EEA  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 15107  001EEC  0E00               	movlw	0
 15108  001EEE  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 15109  001EF0  0E08               	movlw	8
 15110  001EF2  6F89               	movwf	eval_poly@n& (0+255),b
 15111  001EF4  EC6B  F015         	call	_eval_poly	;wreg free
 15112  001EF8  C084  F08E         	movff	?_eval_poly,log@x
 15113  001EFC  C085  F08F         	movff	?_eval_poly+1,log@x+1
 15114  001F00  C086  F090         	movff	?_eval_poly+2,log@x+2
 15115  001F04  0E72               	movlw	114
 15116  001F06  0100               	movlb	0	; () banked
 15117  001F08  6F6C               	movwf	___ftmul@f2& (0+255),b
 15118  001F0A  0E31               	movlw	49
 15119  001F0C  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 15120  001F0E  0E3F               	movlw	63
 15121  001F10  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 15122  001F12  C091  F020         	movff	log@exponent,___awtoft@c
 15123  001F16  C092  F021         	movff	log@exponent+1,___awtoft@c+1
 15124  001F1A  EC16  F01F         	call	___awtoft	;wreg free
 15125  001F1E  C020  F069         	movff	?___awtoft,___ftmul@f1
 15126  001F22  C021  F06A         	movff	?___awtoft+1,___ftmul@f1+1
 15127  001F26  C022  F06B         	movff	?___awtoft+2,___ftmul@f1+2
 15128  001F2A  EC4A  F012         	call	___ftmul	;wreg free
 15129  001F2E  C069  F078         	movff	?___ftmul,___ftadd@f1
 15130  001F32  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 15131  001F36  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 15132  001F3A  C08E  F07B         	movff	log@x,___ftadd@f2
 15133  001F3E  C08F  F07C         	movff	log@x+1,___ftadd@f2+1
 15134  001F42  C090  F07D         	movff	log@x+2,___ftadd@f2+2
 15135  001F46  ECC2  F00C         	call	___ftadd	;wreg free
 15136  001F4A  C078  F08E         	movff	?___ftadd,?_log
 15137  001F4E  C079  F08F         	movff	?___ftadd+1,?_log+1
 15138  001F52  C07A  F090         	movff	?___ftadd+2,?_log+2
 15139  001F56  0012               	return	
 15140  001F58                     __end_of_log:
 15141                           	opt stack 0
 15142                           tosu	equ	0xFFF
 15143                           tosh	equ	0xFFE
 15144                           tosl	equ	0xFFD
 15145                           pclath	equ	0xFFA
 15146                           tblptru	equ	0xFF8
 15147                           tblptrh	equ	0xFF7
 15148                           tblptrl	equ	0xFF6
 15149                           tablat	equ	0xFF5
 15150                           prodh	equ	0xFF4
 15151                           prodl	equ	0xFF3
 15152                           intcon	equ	0xFF2
 15153                           intcon2	equ	0xFF1
 15154                           postinc0	equ	0xFEE
 15155                           plusw0	equ	0xFEB
 15156                           wreg	equ	0xFE8
 15157                           indf1	equ	0xFE7
 15158                           postdec1	equ	0xFE5
 15159                           fsr1h	equ	0xFE2
 15160                           fsr1l	equ	0xFE1
 15161                           indf2	equ	0xFDF
 15162                           postinc2	equ	0xFDE
 15163                           postdec2	equ	0xFDD
 15164                           plusw2	equ	0xFDB
 15165                           fsr2h	equ	0xFDA
 15166                           fsr2l	equ	0xFD9
 15167                           status	equ	0xFD8
 15168                           
 15169 ;; *************** function _exp *****************
 15170 ;; Defined at:
 15171 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 15172 ;; Parameters:    Size  Location     Type
 15173 ;;  x               3   55[BANK0 ] int 
 15174 ;; Auto vars:     Size  Location     Type
 15175 ;;  exponent        2   61[BANK0 ] int 
 15176 ;;  sign            1   63[BANK0 ] unsigned char 
 15177 ;; Return value:  Size  Location     Type
 15178 ;;                  3   55[BANK0 ] unsigned char 
 15179 ;; Registers used:
 15180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15181 ;; Tracked objects:
 15182 ;;		On entry : 0/0
 15183 ;;		On exit  : 0/0
 15184 ;;		Unchanged: 0/0
 15185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15186 ;;      Params:         0       3       0       0       0       0       0
 15187 ;;      Locals:         0       6       0       0       0       0       0
 15188 ;;      Temps:          0       0       0       0       0       0       0
 15189 ;;      Totals:         0       9       0       0       0       0       0
 15190 ;;Total ram usage:        9 bytes
 15191 ;; Hardware stack levels used:    1
 15192 ;; Hardware stack levels required when called:    7
 15193 ;; This function calls:
 15194 ;;		___awtoft
 15195 ;;		___ftdiv
 15196 ;;		___ftge
 15197 ;;		___ftmul
 15198 ;;		___ftneg
 15199 ;;		___ftsub
 15200 ;;		___fttol
 15201 ;;		_eval_poly
 15202 ;;		_floor
 15203 ;;		_ldexp
 15204 ;; This function is called by:
 15205 ;;		_pow
 15206 ;; This function uses a non-reentrant model
 15207 ;;
 15208                           
 15209                           	psect	text87
 15210  0013D6                     __ptext87:
 15211                           	opt stack 0
 15212  0013D6                     _exp:
 15213                           	opt stack 18
 15214                           
 15215                           ;incstack = 0
 15216  0013D6  0100               	movlb	0	; () banked
 15217  0013D8  5197               	movf	exp@x& (0+255),w,b
 15218  0013DA  1198               	iorwf	(exp@x+1)& (0+255),w,b
 15219  0013DC  1199               	iorwf	(exp@x+2)& (0+255),w,b
 15220  0013DE  A4D8               	btfss	status,2,c
 15221  0013E0  D007               	goto	l2234
 15222                           
 15223                           ; BSR set to: 0
 15224  0013E2  0E00               	movlw	0
 15225  0013E4  6F97               	movwf	?_exp& (0+255),b
 15226  0013E6  0E80               	movlw	128
 15227  0013E8  6F98               	movwf	(?_exp+1)& (0+255),b
 15228  0013EA  0E3F               	movlw	63
 15229  0013EC  6F99               	movwf	(?_exp+2)& (0+255),b
 15230                           
 15231                           ; BSR set to: 0
 15232  0013EE  0012               	return	
 15233  0013F0                     l2234:
 15234                           
 15235                           ; BSR set to: 0
 15236                           
 15237                           ; BSR set to: 0
 15238  0013F0  0E72               	movlw	114
 15239  0013F2  6E18               	movwf	___ftge@ff1,c
 15240  0013F4  0E31               	movlw	49
 15241  0013F6  6E19               	movwf	___ftge@ff1+1,c
 15242  0013F8  0E44               	movlw	68
 15243  0013FA  6E1A               	movwf	___ftge@ff1+2,c
 15244  0013FC  C097  F01B         	movff	exp@x,___ftge@ff2
 15245  001400  C098  F01C         	movff	exp@x+1,___ftge@ff2+1
 15246  001404  C099  F01D         	movff	exp@x+2,___ftge@ff2+2
 15247  001408  ECEE  F018         	call	___ftge	;wreg free
 15248  00140C  B0D8               	btfsc	status,0,c
 15249  00140E  D00D               	goto	l2236
 15250  001410  0E00               	movlw	0
 15251  001412  0101               	movlb	1	; () banked
 15252  001414  6F35               	movwf	(_errno+1)& (0+255),b
 15253  001416  0E22               	movlw	34
 15254  001418  6F34               	movwf	_errno& (0+255),b
 15255  00141A  0EFF               	movlw	255
 15256  00141C  0100               	movlb	0	; () banked
 15257  00141E  6F97               	movwf	?_exp& (0+255),b
 15258  001420  0E7F               	movlw	127
 15259  001422  6F98               	movwf	(?_exp+1)& (0+255),b
 15260  001424  0E7F               	movlw	127
 15261  001426  6F99               	movwf	(?_exp+2)& (0+255),b
 15262                           
 15263                           ; BSR set to: 0
 15264  001428  0012               	return	
 15265  00142A                     l2236:
 15266                           
 15267                           ; BSR set to: 0
 15268  00142A  C097  F018         	movff	exp@x,___ftge@ff1
 15269  00142E  C098  F019         	movff	exp@x+1,___ftge@ff1+1
 15270  001432  C099  F01A         	movff	exp@x+2,___ftge@ff1+2
 15271  001436  0E49               	movlw	73
 15272  001438  6E1B               	movwf	___ftge@ff2,c
 15273  00143A  0E3A               	movlw	58
 15274  00143C  6E1C               	movwf	___ftge@ff2+1,c
 15275  00143E  0EC4               	movlw	196
 15276  001440  6E1D               	movwf	___ftge@ff2+2,c
 15277  001442  ECEE  F018         	call	___ftge	;wreg free
 15278  001446  B0D8               	btfsc	status,0,c
 15279  001448  D00D               	goto	l2237
 15280  00144A  0E00               	movlw	0
 15281  00144C  0101               	movlb	1	; () banked
 15282  00144E  6F35               	movwf	(_errno+1)& (0+255),b
 15283  001450  0E22               	movlw	34
 15284  001452  6F34               	movwf	_errno& (0+255),b
 15285  001454  0E00               	movlw	0
 15286  001456  0100               	movlb	0	; () banked
 15287  001458  6F97               	movwf	?_exp& (0+255),b
 15288  00145A  0E00               	movlw	0
 15289  00145C  6F98               	movwf	(?_exp+1)& (0+255),b
 15290  00145E  0E00               	movlw	0
 15291  001460  6F99               	movwf	(?_exp+2)& (0+255),b
 15292                           
 15293                           ; BSR set to: 0
 15294  001462  0012               	return	
 15295  001464                     l2237:
 15296                           
 15297                           ; BSR set to: 0
 15298  001464  0100               	movlb	0	; () banked
 15299  001466  AF99               	btfss	(exp@x+2)& (0+255),7,b
 15300  001468  D002               	goto	u7280
 15301  00146A  0E01               	movlw	1
 15302  00146C  D001               	goto	u7290
 15303  00146E                     u7280:
 15304  00146E  0E00               	movlw	0
 15305  001470                     u7290:
 15306  001470  6F9F               	movwf	exp@sign& (0+255),b
 15307                           
 15308                           ; BSR set to: 0
 15309  001472  519F               	movf	exp@sign& (0+255),w,b
 15310  001474  B4D8               	btfsc	status,2,c
 15311  001476  D00E               	goto	l2238
 15312                           
 15313                           ; BSR set to: 0
 15314  001478  C097  F018         	movff	exp@x,___ftneg@f1
 15315  00147C  C098  F019         	movff	exp@x+1,___ftneg@f1+1
 15316  001480  C099  F01A         	movff	exp@x+2,___ftneg@f1+2
 15317  001484  ECA7  F020         	call	___ftneg	;wreg free
 15318  001488  C018  F097         	movff	?___ftneg,exp@x
 15319  00148C  C019  F098         	movff	?___ftneg+1,exp@x+1
 15320  001490  C01A  F099         	movff	?___ftneg+2,exp@x+2
 15321  001494                     l2238:
 15322  001494  C097  F069         	movff	exp@x,___ftmul@f1
 15323  001498  C098  F06A         	movff	exp@x+1,___ftmul@f1+1
 15324  00149C  C099  F06B         	movff	exp@x+2,___ftmul@f1+2
 15325  0014A0  0EAA               	movlw	170
 15326  0014A2  0100               	movlb	0	; () banked
 15327  0014A4  6F6C               	movwf	___ftmul@f2& (0+255),b
 15328  0014A6  0EB8               	movlw	184
 15329  0014A8  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 15330  0014AA  0E3F               	movlw	63
 15331  0014AC  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 15332  0014AE  EC4A  F012         	call	___ftmul	;wreg free
 15333  0014B2  C069  F097         	movff	?___ftmul,exp@x
 15334  0014B6  C06A  F098         	movff	?___ftmul+1,exp@x+1
 15335  0014BA  C06B  F099         	movff	?___ftmul+2,exp@x+2
 15336  0014BE  C097  F08F         	movff	exp@x,floor@x
 15337  0014C2  C098  F090         	movff	exp@x+1,floor@x+1
 15338  0014C6  C099  F091         	movff	exp@x+2,floor@x+2
 15339  0014CA  EC8F  F014         	call	_floor	;wreg free
 15340  0014CE  C08F  F09A         	movff	?_floor,_exp$3604
 15341  0014D2  C090  F09B         	movff	?_floor+1,_exp$3604+1
 15342  0014D6  C091  F09C         	movff	?_floor+2,_exp$3604+2
 15343  0014DA  C09A  F078         	movff	_exp$3604,___fttol@f1
 15344  0014DE  C09B  F079         	movff	_exp$3604+1,___fttol@f1+1
 15345  0014E2  C09C  F07A         	movff	_exp$3604+2,___fttol@f1+2
 15346  0014E6  ECCE  F011         	call	___fttol	;wreg free
 15347  0014EA  C078  F09D         	movff	?___fttol,exp@exponent
 15348  0014EE  C079  F09E         	movff	?___fttol+1,exp@exponent+1
 15349  0014F2  C097  F084         	movff	exp@x,___ftsub@f1
 15350  0014F6  C098  F085         	movff	exp@x+1,___ftsub@f1+1
 15351  0014FA  C099  F086         	movff	exp@x+2,___ftsub@f1+2
 15352  0014FE  C09D  F020         	movff	exp@exponent,___awtoft@c
 15353  001502  C09E  F021         	movff	exp@exponent+1,___awtoft@c+1
 15354  001506  EC16  F01F         	call	___awtoft	;wreg free
 15355  00150A  C020  F087         	movff	?___awtoft,___ftsub@f2
 15356  00150E  C021  F088         	movff	?___awtoft+1,___ftsub@f2+1
 15357  001512  C022  F089         	movff	?___awtoft+2,___ftsub@f2+2
 15358  001516  EC07  F01E         	call	___ftsub	;wreg free
 15359  00151A  C084  F097         	movff	?___ftsub,exp@x
 15360  00151E  C085  F098         	movff	?___ftsub+1,exp@x+1
 15361  001522  C086  F099         	movff	?___ftsub+2,exp@x+2
 15362  001526  C097  F084         	movff	exp@x,eval_poly@x
 15363  00152A  C098  F085         	movff	exp@x+1,eval_poly@x+1
 15364  00152E  C099  F086         	movff	exp@x+2,eval_poly@x+2
 15365  001532  0E5C               	movlw	low exp@coeff
 15366  001534  0100               	movlb	0	; () banked
 15367  001536  6F87               	movwf	eval_poly@d& (0+255),b
 15368  001538  0E06               	movlw	high exp@coeff
 15369  00153A  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 15370  00153C  0E00               	movlw	0
 15371  00153E  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 15372  001540  0E09               	movlw	9
 15373  001542  6F89               	movwf	eval_poly@n& (0+255),b
 15374  001544  EC6B  F015         	call	_eval_poly	;wreg free
 15375  001548  C084  F08E         	movff	?_eval_poly,ldexp@value
 15376  00154C  C085  F08F         	movff	?_eval_poly+1,ldexp@value+1
 15377  001550  C086  F090         	movff	?_eval_poly+2,ldexp@value+2
 15378  001554  C09D  F091         	movff	exp@exponent,ldexp@newexp
 15379  001558  C09E  F092         	movff	exp@exponent+1,ldexp@newexp+1
 15380  00155C  ECD6  F015         	call	_ldexp	;wreg free
 15381  001560  C08E  F097         	movff	?_ldexp,exp@x
 15382  001564  C08F  F098         	movff	?_ldexp+1,exp@x+1
 15383  001568  C090  F099         	movff	?_ldexp+2,exp@x+2
 15384  00156C  0100               	movlb	0	; () banked
 15385  00156E  519F               	movf	exp@sign& (0+255),w,b
 15386  001570  B4D8               	btfsc	status,2,c
 15387  001572  D025               	goto	l2239
 15388                           
 15389                           ; BSR set to: 0
 15390  001574  2997               	incf	exp@x& (0+255),w,b
 15391  001576  E10E               	bnz	l7579
 15392  001578  0E7F               	movlw	127
 15393  00157A  1998               	xorwf	(exp@x+1)& (0+255),w,b
 15394  00157C  E10B               	bnz	l7579
 15395  00157E  0E7F               	movlw	127
 15396  001580  1999               	xorwf	(exp@x+2)& (0+255),w,b
 15397  001582  A4D8               	btfss	status,2,c
 15398  001584  D007               	goto	l2240
 15399                           
 15400                           ; BSR set to: 0
 15401  001586  0E00               	movlw	0
 15402  001588  6F97               	movwf	?_exp& (0+255),b
 15403  00158A  0E00               	movlw	0
 15404  00158C  6F98               	movwf	(?_exp+1)& (0+255),b
 15405  00158E  0E00               	movlw	0
 15406  001590  6F99               	movwf	(?_exp+2)& (0+255),b
 15407                           
 15408                           ; BSR set to: 0
 15409  001592  0012               	return	
 15410  001594                     l2240:
 15411  001594                     l7579:
 15412                           
 15413                           ; BSR set to: 0
 15414  001594  0E00               	movlw	0
 15415  001596  6E29               	movwf	___ftdiv@f1,c
 15416  001598  0E80               	movlw	128
 15417  00159A  6E2A               	movwf	___ftdiv@f1+1,c
 15418  00159C  0E3F               	movlw	63
 15419  00159E  6E2B               	movwf	___ftdiv@f1+2,c
 15420  0015A0  C097  F02C         	movff	exp@x,___ftdiv@f2
 15421  0015A4  C098  F02D         	movff	exp@x+1,___ftdiv@f2+1
 15422  0015A8  C099  F02E         	movff	exp@x+2,___ftdiv@f2+2
 15423  0015AC  ECC5  F012         	call	___ftdiv	;wreg free
 15424  0015B0  C029  F097         	movff	?___ftdiv,?_exp
 15425  0015B4  C02A  F098         	movff	?___ftdiv+1,?_exp+1
 15426  0015B8  C02B  F099         	movff	?___ftdiv+2,?_exp+2
 15427  0015BC  0012               	return	
 15428  0015BE                     l2239:
 15429                           
 15430                           ; BSR set to: 0
 15431  0015BE  C097  F097         	movff	exp@x,?_exp
 15432  0015C2  C098  F098         	movff	exp@x+1,?_exp+1
 15433  0015C6  C099  F099         	movff	exp@x+2,?_exp+2
 15434  0015CA  0012               	return		;funcret
 15435  0015CC                     __end_of_exp:
 15436                           	opt stack 0
 15437                           tosu	equ	0xFFF
 15438                           tosh	equ	0xFFE
 15439                           tosl	equ	0xFFD
 15440                           pclath	equ	0xFFA
 15441                           tblptru	equ	0xFF8
 15442                           tblptrh	equ	0xFF7
 15443                           tblptrl	equ	0xFF6
 15444                           tablat	equ	0xFF5
 15445                           prodh	equ	0xFF4
 15446                           prodl	equ	0xFF3
 15447                           intcon	equ	0xFF2
 15448                           intcon2	equ	0xFF1
 15449                           postinc0	equ	0xFEE
 15450                           plusw0	equ	0xFEB
 15451                           wreg	equ	0xFE8
 15452                           indf1	equ	0xFE7
 15453                           postdec1	equ	0xFE5
 15454                           fsr1h	equ	0xFE2
 15455                           fsr1l	equ	0xFE1
 15456                           indf2	equ	0xFDF
 15457                           postinc2	equ	0xFDE
 15458                           postdec2	equ	0xFDD
 15459                           plusw2	equ	0xFDB
 15460                           fsr2h	equ	0xFDA
 15461                           fsr2l	equ	0xFD9
 15462                           status	equ	0xFD8
 15463                           
 15464 ;; *************** function _ldexp *****************
 15465 ;; Defined at:
 15466 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 15467 ;; Parameters:    Size  Location     Type
 15468 ;;  value           3   46[BANK0 ] unsigned char 
 15469 ;;  newexp          2   49[BANK0 ] int 
 15470 ;; Auto vars:     Size  Location     Type
 15471 ;;		None
 15472 ;; Return value:  Size  Location     Type
 15473 ;;                  3   46[BANK0 ] int 
 15474 ;; Registers used:
 15475 ;;		wreg, status,2, status,0
 15476 ;; Tracked objects:
 15477 ;;		On entry : 0/0
 15478 ;;		On exit  : 0/0
 15479 ;;		Unchanged: 0/0
 15480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15481 ;;      Params:         0       5       0       0       0       0       0
 15482 ;;      Locals:         0       0       0       0       0       0       0
 15483 ;;      Temps:          0       2       0       0       0       0       0
 15484 ;;      Totals:         0       7       0       0       0       0       0
 15485 ;;Total ram usage:        7 bytes
 15486 ;; Hardware stack levels used:    1
 15487 ;; Hardware stack levels required when called:    4
 15488 ;; This function calls:
 15489 ;;		Nothing
 15490 ;; This function is called by:
 15491 ;;		_exp
 15492 ;; This function uses a non-reentrant model
 15493 ;;
 15494                           
 15495                           	psect	text88
 15496  002BAC                     __ptext88:
 15497                           	opt stack 0
 15498  002BAC                     _ldexp:
 15499                           	opt stack 20
 15500                           
 15501                           ;incstack = 0
 15502  002BAC  0100               	movlb	0	; () banked
 15503  002BAE  518E               	movf	ldexp@value& (0+255),w,b
 15504  002BB0  118F               	iorwf	(ldexp@value+1)& (0+255),w,b
 15505  002BB2  1190               	iorwf	(ldexp@value+2)& (0+255),w,b
 15506  002BB4  A4D8               	btfss	status,2,c
 15507  002BB6  D007               	goto	l2258
 15508                           
 15509                           ; BSR set to: 0
 15510  002BB8  0E00               	movlw	0
 15511  002BBA  6F8E               	movwf	?_ldexp& (0+255),b
 15512  002BBC  0E00               	movlw	0
 15513  002BBE  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15514  002BC0  0E00               	movlw	0
 15515  002BC2  6F90               	movwf	(?_ldexp+2)& (0+255),b
 15516                           
 15517                           ; BSR set to: 0
 15518  002BC4  0012               	return	
 15519  002BC6                     l2258:
 15520                           
 15521                           ; BSR set to: 0
 15522                           
 15523                           ; BSR set to: 0
 15524  002BC6  5190               	movf	(ldexp@value+2)& (0+255),w,b
 15525  002BC8  0B7F               	andlw	127
 15526  002BCA  6F93               	movwf	??_ldexp& (0+255),b
 15527  002BCC  6B94               	clrf	(??_ldexp+1)& (0+255),b
 15528  002BCE  90D8               	bcf	status,0,c
 15529  002BD0  3793               	rlcf	??_ldexp& (0+255),f,b
 15530  002BD2  3794               	rlcf	(??_ldexp+1)& (0+255),f,b
 15531  002BD4  5193               	movf	??_ldexp& (0+255),w,b
 15532  002BD6  2791               	addwf	ldexp@newexp& (0+255),f,b
 15533  002BD8  5194               	movf	(??_ldexp+1)& (0+255),w,b
 15534  002BDA  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 15535  002BDC  AF8F               	btfss	(ldexp@value+1)& (0+255),7,b
 15536  002BDE  D003               	goto	u7020
 15537  002BE0  6B93               	clrf	??_ldexp& (0+255),b
 15538  002BE2  2B93               	incf	??_ldexp& (0+255),f,b
 15539  002BE4  D002               	goto	u7028
 15540  002BE6                     u7020:
 15541  002BE6  0100               	movlb	0	; () banked
 15542  002BE8  6B93               	clrf	??_ldexp& (0+255),b
 15543  002BEA                     u7028:
 15544  002BEA  5193               	movf	??_ldexp& (0+255),w,b
 15545  002BEC  2791               	addwf	ldexp@newexp& (0+255),f,b
 15546  002BEE  0E00               	movlw	0
 15547  002BF0  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 15548  002BF2  AF92               	btfss	(ldexp@newexp+1)& (0+255),7,b
 15549  002BF4  D00D               	goto	l2260
 15550                           
 15551                           ; BSR set to: 0
 15552  002BF6  0E00               	movlw	0
 15553  002BF8  0101               	movlb	1	; () banked
 15554  002BFA  6F35               	movwf	(_errno+1)& (0+255),b
 15555  002BFC  0E22               	movlw	34
 15556  002BFE  6F34               	movwf	_errno& (0+255),b
 15557  002C00  0E00               	movlw	0
 15558  002C02  0100               	movlb	0	; () banked
 15559  002C04  6F8E               	movwf	?_ldexp& (0+255),b
 15560  002C06  0E00               	movlw	0
 15561  002C08  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15562  002C0A  0E00               	movlw	0
 15563  002C0C                     L4:
 15564  002C0C  6F90               	movwf	(?_ldexp+2)& (0+255),b
 15565                           
 15566                           ; BSR set to: 0
 15567  002C0E  0012               	return	
 15568  002C10                     l2260:
 15569                           
 15570                           ; BSR set to: 0
 15571                           
 15572                           ; BSR set to: 0
 15573  002C10  BF92               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 15574  002C12  D017               	goto	l2262
 15575  002C14  0592               	decf	(ldexp@newexp+1)& (0+255),w,b
 15576  002C16  A0D8               	btfss	status,0,c
 15577  002C18  D014               	goto	l2262
 15578                           
 15579                           ; BSR set to: 0
 15580  002C1A  0E00               	movlw	0
 15581  002C1C  0101               	movlb	1	; () banked
 15582  002C1E  6F35               	movwf	(_errno+1)& (0+255),b
 15583  002C20  0E22               	movlw	34
 15584  002C22  6F34               	movwf	_errno& (0+255),b
 15585                           
 15586                           ; BSR set to: 1
 15587  002C24  0100               	movlb	0	; () banked
 15588  002C26  AF90               	btfss	(ldexp@value+2)& (0+255),7,b
 15589  002C28  D006               	goto	l2263
 15590                           
 15591                           ; BSR set to: 0
 15592  002C2A  0EFF               	movlw	255
 15593  002C2C  6F8E               	movwf	?_ldexp& (0+255),b
 15594  002C2E  0E7F               	movlw	127
 15595  002C30  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15596  002C32  0EFF               	movlw	255
 15597  002C34  D7EB               	goto	L4
 15598  002C36                     l2263:
 15599                           
 15600                           ; BSR set to: 0
 15601                           
 15602                           ; BSR set to: 0
 15603  002C36  0EFF               	movlw	255
 15604  002C38  6F8E               	movwf	?_ldexp& (0+255),b
 15605  002C3A  0E7F               	movlw	127
 15606  002C3C  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15607  002C3E  0E7F               	movlw	127
 15608  002C40  D7E5               	goto	L4
 15609  002C42                     l2262:
 15610                           
 15611                           ; BSR set to: 0
 15612                           
 15613                           ; BSR set to: 0
 15614  002C42  3592               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 15615  002C44  3192               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 15616  002C46  6F94               	movwf	(??_ldexp+1)& (0+255),b
 15617  002C48  3191               	rrcf	ldexp@newexp& (0+255),w,b
 15618  002C4A  6F93               	movwf	??_ldexp& (0+255),b
 15619  002C4C  5190               	movf	(ldexp@value+2)& (0+255),w,b
 15620  002C4E  1993               	xorwf	??_ldexp& (0+255),w,b
 15621  002C50  0B80               	andlw	-128
 15622  002C52  1993               	xorwf	??_ldexp& (0+255),w,b
 15623  002C54  6F90               	movwf	(ldexp@value+2)& (0+255),b
 15624  002C56  C091  F093         	movff	ldexp@newexp,??_ldexp
 15625  002C5A  0E01               	movlw	1
 15626  002C5C  1793               	andwf	??_ldexp& (0+255),f,b
 15627  002C5E  3393               	rrcf	??_ldexp& (0+255),f,b
 15628  002C60  3393               	rrcf	??_ldexp& (0+255),f,b
 15629  002C62  518F               	movf	(ldexp@value+1)& (0+255),w,b
 15630  002C64  1993               	xorwf	??_ldexp& (0+255),w,b
 15631  002C66  0B7F               	andlw	-129
 15632  002C68  1993               	xorwf	??_ldexp& (0+255),w,b
 15633  002C6A  6F8F               	movwf	(ldexp@value+1)& (0+255),b
 15634                           
 15635                           ; BSR set to: 0
 15636                           
 15637                           ; BSR set to: 0
 15638                           
 15639                           ; BSR set to: 0
 15640  002C6C  C08E  F08E         	movff	ldexp@value,?_ldexp
 15641  002C70  C08F  F08F         	movff	ldexp@value+1,?_ldexp+1
 15642  002C74  C090  F090         	movff	ldexp@value+2,?_ldexp+2
 15643  002C78  0012               	return	
 15644  002C7A                     __end_of_ldexp:
 15645                           	opt stack 0
 15646                           tosu	equ	0xFFF
 15647                           tosh	equ	0xFFE
 15648                           tosl	equ	0xFFD
 15649                           pclath	equ	0xFFA
 15650                           tblptru	equ	0xFF8
 15651                           tblptrh	equ	0xFF7
 15652                           tblptrl	equ	0xFF6
 15653                           tablat	equ	0xFF5
 15654                           prodh	equ	0xFF4
 15655                           prodl	equ	0xFF3
 15656                           intcon	equ	0xFF2
 15657                           intcon2	equ	0xFF1
 15658                           postinc0	equ	0xFEE
 15659                           plusw0	equ	0xFEB
 15660                           wreg	equ	0xFE8
 15661                           indf1	equ	0xFE7
 15662                           postdec1	equ	0xFE5
 15663                           fsr1h	equ	0xFE2
 15664                           fsr1l	equ	0xFE1
 15665                           indf2	equ	0xFDF
 15666                           postinc2	equ	0xFDE
 15667                           postdec2	equ	0xFDD
 15668                           plusw2	equ	0xFDB
 15669                           fsr2h	equ	0xFDA
 15670                           fsr2l	equ	0xFD9
 15671                           status	equ	0xFD8
 15672                           
 15673 ;; *************** function _floor *****************
 15674 ;; Defined at:
 15675 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 15676 ;; Parameters:    Size  Location     Type
 15677 ;;  x               3   47[BANK0 ] int 
 15678 ;; Auto vars:     Size  Location     Type
 15679 ;;  i               3   50[BANK0 ] int 
 15680 ;;  expon           2   53[BANK0 ] int 
 15681 ;; Return value:  Size  Location     Type
 15682 ;;                  3   47[BANK0 ] int 
 15683 ;; Registers used:
 15684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15685 ;; Tracked objects:
 15686 ;;		On entry : 0/0
 15687 ;;		On exit  : 0/0
 15688 ;;		Unchanged: 0/0
 15689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15690 ;;      Params:         0       3       0       0       0       0       0
 15691 ;;      Locals:         0       5       0       0       0       0       0
 15692 ;;      Temps:          0       0       0       0       0       0       0
 15693 ;;      Totals:         0       8       0       0       0       0       0
 15694 ;;Total ram usage:        8 bytes
 15695 ;; Hardware stack levels used:    1
 15696 ;; Hardware stack levels required when called:    6
 15697 ;; This function calls:
 15698 ;;		___altoft
 15699 ;;		___ftadd
 15700 ;;		___ftge
 15701 ;;		___fttol
 15702 ;;		_frexp
 15703 ;; This function is called by:
 15704 ;;		_exp
 15705 ;; This function uses a non-reentrant model
 15706 ;;
 15707                           
 15708                           	psect	text89
 15709  00291E                     __ptext89:
 15710                           	opt stack 0
 15711  00291E                     _floor:
 15712                           	opt stack 18
 15713                           
 15714                           ; BSR set to: 0
 15715                           ;incstack = 0
 15716  00291E  C08F  F018         	movff	floor@x,frexp@value
 15717  002922  C090  F019         	movff	floor@x+1,frexp@value+1
 15718  002926  C091  F01A         	movff	floor@x+2,frexp@value+2
 15719  00292A  0E95               	movlw	low floor@expon
 15720  00292C  6E1B               	movwf	frexp@eptr,c
 15721  00292E  0E00               	movlw	high floor@expon
 15722  002930  6E1C               	movwf	frexp@eptr+1,c
 15723  002932  ECA6  F018         	call	_frexp	;wreg free
 15724  002936  0100               	movlb	0	; () banked
 15725  002938  AF96               	btfss	(floor@expon+1)& (0+255),7,b
 15726  00293A  D010               	goto	l2245
 15727                           
 15728                           ; BSR set to: 0
 15729  00293C  AF91               	btfss	(floor@x+2)& (0+255),7,b
 15730  00293E  D007               	goto	l2246
 15731                           
 15732                           ; BSR set to: 0
 15733  002940  0E00               	movlw	0
 15734  002942  6F8F               	movwf	?_floor& (0+255),b
 15735  002944  0E80               	movlw	128
 15736  002946  6F90               	movwf	(?_floor+1)& (0+255),b
 15737  002948  0EBF               	movlw	191
 15738  00294A  6F91               	movwf	(?_floor+2)& (0+255),b
 15739                           
 15740                           ; BSR set to: 0
 15741  00294C  0012               	return	
 15742  00294E                     l2246:
 15743                           
 15744                           ; BSR set to: 0
 15745                           
 15746                           ; BSR set to: 0
 15747  00294E  0E00               	movlw	0
 15748  002950  6F8F               	movwf	?_floor& (0+255),b
 15749  002952  0E00               	movlw	0
 15750  002954  6F90               	movwf	(?_floor+1)& (0+255),b
 15751  002956  0E00               	movlw	0
 15752  002958  6F91               	movwf	(?_floor+2)& (0+255),b
 15753                           
 15754                           ; BSR set to: 0
 15755  00295A  0012               	return	
 15756  00295C                     l2245:
 15757                           
 15758                           ; BSR set to: 0
 15759                           
 15760                           ; BSR set to: 0
 15761  00295C  5196               	movf	(floor@expon+1)& (0+255),w,b
 15762  00295E  E104               	bnz	u6980
 15763  002960  0E15               	movlw	21
 15764  002962  5D95               	subwf	floor@expon& (0+255),w,b
 15765  002964  A0D8               	btfss	status,0,c
 15766  002966  D007               	goto	l2248
 15767  002968                     u6980:
 15768                           
 15769                           ; BSR set to: 0
 15770  002968  C08F  F08F         	movff	floor@x,?_floor
 15771  00296C  C090  F090         	movff	floor@x+1,?_floor+1
 15772  002970  C091  F091         	movff	floor@x+2,?_floor+2
 15773  002974  0012               	return	
 15774  002976                     l2248:
 15775                           
 15776                           ; BSR set to: 0
 15777                           
 15778                           ; BSR set to: 0
 15779  002976  C08F  F078         	movff	floor@x,___fttol@f1
 15780  00297A  C090  F079         	movff	floor@x+1,___fttol@f1+1
 15781  00297E  C091  F07A         	movff	floor@x+2,___fttol@f1+2
 15782  002982  ECCE  F011         	call	___fttol	;wreg free
 15783  002986  C078  F087         	movff	?___fttol,___altoft@c
 15784  00298A  C079  F088         	movff	?___fttol+1,___altoft@c+1
 15785  00298E  C07A  F089         	movff	?___fttol+2,___altoft@c+2
 15786  002992  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
 15787  002996  EC3A  F01A         	call	___altoft	;wreg free
 15788  00299A  C087  F092         	movff	?___altoft,floor@i
 15789  00299E  C088  F093         	movff	?___altoft+1,floor@i+1
 15790  0029A2  C089  F094         	movff	?___altoft+2,floor@i+2
 15791  0029A6  C08F  F018         	movff	floor@x,___ftge@ff1
 15792  0029AA  C090  F019         	movff	floor@x+1,___ftge@ff1+1
 15793  0029AE  C091  F01A         	movff	floor@x+2,___ftge@ff1+2
 15794  0029B2  C092  F01B         	movff	floor@i,___ftge@ff2
 15795  0029B6  C093  F01C         	movff	floor@i+1,___ftge@ff2+1
 15796  0029BA  C094  F01D         	movff	floor@i+2,___ftge@ff2+2
 15797  0029BE  ECEE  F018         	call	___ftge	;wreg free
 15798  0029C2  B0D8               	btfsc	status,0,c
 15799  0029C4  D016               	goto	l2249
 15800  0029C6  C092  F078         	movff	floor@i,___ftadd@f1
 15801  0029CA  C093  F079         	movff	floor@i+1,___ftadd@f1+1
 15802  0029CE  C094  F07A         	movff	floor@i+2,___ftadd@f1+2
 15803  0029D2  0E00               	movlw	0
 15804  0029D4  0100               	movlb	0	; () banked
 15805  0029D6  6F7B               	movwf	___ftadd@f2& (0+255),b
 15806  0029D8  0E80               	movlw	128
 15807  0029DA  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 15808  0029DC  0EBF               	movlw	191
 15809  0029DE  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 15810  0029E0  ECC2  F00C         	call	___ftadd	;wreg free
 15811  0029E4  C078  F08F         	movff	?___ftadd,?_floor
 15812  0029E8  C079  F090         	movff	?___ftadd+1,?_floor+1
 15813  0029EC  C07A  F091         	movff	?___ftadd+2,?_floor+2
 15814  0029F0  0012               	return	
 15815  0029F2                     l2249:
 15816  0029F2  C092  F08F         	movff	floor@i,?_floor
 15817  0029F6  C093  F090         	movff	floor@i+1,?_floor+1
 15818  0029FA  C094  F091         	movff	floor@i+2,?_floor+2
 15819  0029FE  0012               	return		;funcret
 15820  002A00                     __end_of_floor:
 15821                           	opt stack 0
 15822                           tosu	equ	0xFFF
 15823                           tosh	equ	0xFFE
 15824                           tosl	equ	0xFFD
 15825                           pclath	equ	0xFFA
 15826                           tblptru	equ	0xFF8
 15827                           tblptrh	equ	0xFF7
 15828                           tblptrl	equ	0xFF6
 15829                           tablat	equ	0xFF5
 15830                           prodh	equ	0xFF4
 15831                           prodl	equ	0xFF3
 15832                           intcon	equ	0xFF2
 15833                           intcon2	equ	0xFF1
 15834                           postinc0	equ	0xFEE
 15835                           plusw0	equ	0xFEB
 15836                           wreg	equ	0xFE8
 15837                           indf1	equ	0xFE7
 15838                           postdec1	equ	0xFE5
 15839                           fsr1h	equ	0xFE2
 15840                           fsr1l	equ	0xFE1
 15841                           indf2	equ	0xFDF
 15842                           postinc2	equ	0xFDE
 15843                           postdec2	equ	0xFDD
 15844                           plusw2	equ	0xFDB
 15845                           fsr2h	equ	0xFDA
 15846                           fsr2l	equ	0xFD9
 15847                           status	equ	0xFD8
 15848                           
 15849 ;; *************** function _frexp *****************
 15850 ;; Defined at:
 15851 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 15852 ;; Parameters:    Size  Location     Type
 15853 ;;  value           3   23[COMRAM] int 
 15854 ;;  eptr            2   26[COMRAM] PTR int 
 15855 ;;		 -> log@exponent(2), floor@expon(2), 
 15856 ;; Auto vars:     Size  Location     Type
 15857 ;;		None
 15858 ;; Return value:  Size  Location     Type
 15859 ;;                  3   23[COMRAM] PTR int 
 15860 ;; Registers used:
 15861 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15862 ;; Tracked objects:
 15863 ;;		On entry : 0/0
 15864 ;;		On exit  : 0/0
 15865 ;;		Unchanged: 0/0
 15866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15867 ;;      Params:         5       0       0       0       0       0       0
 15868 ;;      Locals:         0       0       0       0       0       0       0
 15869 ;;      Temps:          2       0       0       0       0       0       0
 15870 ;;      Totals:         7       0       0       0       0       0       0
 15871 ;;Total ram usage:        7 bytes
 15872 ;; Hardware stack levels used:    1
 15873 ;; Hardware stack levels required when called:    4
 15874 ;; This function calls:
 15875 ;;		Nothing
 15876 ;; This function is called by:
 15877 ;;		_floor
 15878 ;;		_log
 15879 ;; This function uses a non-reentrant model
 15880 ;;
 15881                           
 15882                           	psect	text90
 15883  00314C                     __ptext90:
 15884                           	opt stack 0
 15885  00314C                     _frexp:
 15886                           	opt stack 20
 15887                           
 15888                           ;incstack = 0
 15889  00314C  5018               	movf	frexp@value,w,c
 15890  00314E  1019               	iorwf	frexp@value+1,w,c
 15891  003150  101A               	iorwf	frexp@value+2,w,c
 15892  003152  A4D8               	btfss	status,2,c
 15893  003154  D00F               	goto	l2254
 15894  003156  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15895  00315A  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15896  00315E  0E00               	movlw	0
 15897  003160  6EDE               	movwf	postinc2,c
 15898  003162  0E00               	movlw	0
 15899  003164  6EDD               	movwf	postdec2,c
 15900  003166  0E00               	movlw	0
 15901  003168  6E18               	movwf	?_frexp,c
 15902  00316A  0E00               	movlw	0
 15903  00316C  6E19               	movwf	?_frexp+1,c
 15904  00316E  0E00               	movlw	0
 15905  003170  6E1A               	movwf	?_frexp+2,c
 15906  003172  0012               	return	
 15907  003174                     l2254:
 15908  003174  501A               	movf	frexp@value+2,w,c
 15909  003176  0B7F               	andlw	127
 15910  003178  6E1D               	movwf	??_frexp& (0+255),c
 15911  00317A  6A1E               	clrf	(??_frexp+1)& (0+255),c
 15912  00317C  90D8               	bcf	status,0,c
 15913  00317E  361D               	rlcf	??_frexp,f,c
 15914  003180  361E               	rlcf	??_frexp+1,f,c
 15915  003182  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15916  003186  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15917  00318A  C01D  FFDE         	movff	??_frexp,postinc2
 15918  00318E  C01E  FFDD         	movff	??_frexp+1,postdec2
 15919  003192  AE19               	btfss	frexp@value+1,7,c
 15920  003194  D003               	goto	u6860
 15921  003196  6A1D               	clrf	??_frexp& (0+255),c
 15922  003198  2A1D               	incf	??_frexp& (0+255),f,c
 15923  00319A  D001               	goto	u6868
 15924  00319C                     u6860:
 15925  00319C  6A1D               	clrf	??_frexp& (0+255),c
 15926  00319E                     u6868:
 15927  00319E  501D               	movf	??_frexp,w,c
 15928  0031A0  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15929  0031A4  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15930  0031A8  12DE               	iorwf	postinc2,f,c
 15931  0031AA  0E00               	movlw	0
 15932  0031AC  12DD               	iorwf	postdec2,f,c
 15933  0031AE  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15934  0031B2  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15935  0031B6  0E82               	movlw	130
 15936  0031B8  26DE               	addwf	postinc2,f,c
 15937  0031BA  0EFF               	movlw	255
 15938  0031BC  22DD               	addwfc	postdec2,f,c
 15939  0031BE  801A               	bsf	frexp@value+2,0,c
 15940  0031C0  821A               	bsf	frexp@value+2,1,c
 15941  0031C2  841A               	bsf	frexp@value+2,2,c
 15942  0031C4  861A               	bsf	frexp@value+2,3,c
 15943  0031C6  881A               	bsf	frexp@value+2,4,c
 15944  0031C8  8A1A               	bsf	frexp@value+2,5,c
 15945  0031CA  9C1A               	bcf	frexp@value+2,6,c
 15946  0031CC  9E19               	bcf	frexp@value+1,7,c
 15947  0031CE  C018  F018         	movff	frexp@value,?_frexp
 15948  0031D2  C019  F019         	movff	frexp@value+1,?_frexp+1
 15949  0031D6  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 15950  0031DA  0012               	return	
 15951  0031DC                     __end_of_frexp:
 15952                           	opt stack 0
 15953                           tosu	equ	0xFFF
 15954                           tosh	equ	0xFFE
 15955                           tosl	equ	0xFFD
 15956                           pclath	equ	0xFFA
 15957                           tblptru	equ	0xFF8
 15958                           tblptrh	equ	0xFF7
 15959                           tblptrl	equ	0xFF6
 15960                           tablat	equ	0xFF5
 15961                           prodh	equ	0xFF4
 15962                           prodl	equ	0xFF3
 15963                           intcon	equ	0xFF2
 15964                           intcon2	equ	0xFF1
 15965                           postinc0	equ	0xFEE
 15966                           plusw0	equ	0xFEB
 15967                           wreg	equ	0xFE8
 15968                           indf1	equ	0xFE7
 15969                           postdec1	equ	0xFE5
 15970                           fsr1h	equ	0xFE2
 15971                           fsr1l	equ	0xFE1
 15972                           indf2	equ	0xFDF
 15973                           postinc2	equ	0xFDE
 15974                           postdec2	equ	0xFDD
 15975                           plusw2	equ	0xFDB
 15976                           fsr2h	equ	0xFDA
 15977                           fsr2l	equ	0xFD9
 15978                           status	equ	0xFD8
 15979                           
 15980 ;; *************** function ___fttol *****************
 15981 ;; Defined at:
 15982 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 15983 ;; Parameters:    Size  Location     Type
 15984 ;;  f1              3   24[BANK0 ] float 
 15985 ;; Auto vars:     Size  Location     Type
 15986 ;;  lval            4   34[BANK0 ] unsigned long 
 15987 ;;  exp1            1   38[BANK0 ] unsigned char 
 15988 ;;  sign1           1   33[BANK0 ] unsigned char 
 15989 ;; Return value:  Size  Location     Type
 15990 ;;                  4   24[BANK0 ] long 
 15991 ;; Registers used:
 15992 ;;		wreg, status,2, status,0
 15993 ;; Tracked objects:
 15994 ;;		On entry : 0/0
 15995 ;;		On exit  : 0/0
 15996 ;;		Unchanged: 0/0
 15997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15998 ;;      Params:         0       4       0       0       0       0       0
 15999 ;;      Locals:         0       6       0       0       0       0       0
 16000 ;;      Temps:          0       5       0       0       0       0       0
 16001 ;;      Totals:         0      15       0       0       0       0       0
 16002 ;;Total ram usage:       15 bytes
 16003 ;; Hardware stack levels used:    1
 16004 ;; Hardware stack levels required when called:    4
 16005 ;; This function calls:
 16006 ;;		Nothing
 16007 ;; This function is called by:
 16008 ;;		_AdcConvert
 16009 ;;		_ReadIntFromEeprom
 16010 ;;		_pow
 16011 ;;		_exp
 16012 ;;		_floor
 16013 ;; This function uses a non-reentrant model
 16014 ;;
 16015                           
 16016                           	psect	text91
 16017  00239C                     __ptext91:
 16018                           	opt stack 0
 16019  00239C                     ___fttol:
 16020                           	opt stack 19
 16021                           
 16022                           ;incstack = 0
 16023  00239C  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 16024  0023A0  0100               	movlb	0	; () banked
 16025  0023A2  6B7D               	clrf	(??___fttol+1)& (0+255),b
 16026  0023A4  6B7E               	clrf	(??___fttol+2)& (0+255),b
 16027  0023A6  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 16028  0023A8  377C               	rlcf	??___fttol& (0+255),f,b
 16029  0023AA  E301               	bnc	u6771
 16030  0023AC  817D               	bsf	(??___fttol+1)& (0+255),0,b
 16031  0023AE                     u6771:
 16032  0023AE  517C               	movf	??___fttol& (0+255),w,b
 16033  0023B0  6F86               	movwf	___fttol@exp1& (0+255),b
 16034  0023B2  5186               	movf	___fttol@exp1& (0+255),w,b
 16035  0023B4  A4D8               	btfss	status,2,c
 16036  0023B6  D009               	goto	l1911
 16037                           
 16038                           ; BSR set to: 0
 16039  0023B8  0E00               	movlw	0
 16040  0023BA  6F78               	movwf	?___fttol& (0+255),b
 16041  0023BC  0E00               	movlw	0
 16042  0023BE  6F79               	movwf	(?___fttol+1)& (0+255),b
 16043  0023C0  0E00               	movlw	0
 16044  0023C2  6F7A               	movwf	(?___fttol+2)& (0+255),b
 16045  0023C4  0E00               	movlw	0
 16046  0023C6  6F7B               	movwf	(?___fttol+3)& (0+255),b
 16047                           
 16048                           ; BSR set to: 0
 16049  0023C8  0012               	return	
 16050  0023CA                     l1911:
 16051                           
 16052                           ; BSR set to: 0
 16053                           
 16054                           ; BSR set to: 0
 16055  0023CA  0E17               	movlw	23
 16056  0023CC  6F7C               	movwf	??___fttol& (0+255),b
 16057  0023CE  C078  F07D         	movff	___fttol@f1,??___fttol+1
 16058  0023D2  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 16059  0023D6  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 16060  0023DA  297C               	incf	??___fttol& (0+255),w,b
 16061  0023DC  6F80               	movwf	(??___fttol+4)& (0+255),b
 16062  0023DE  D004               	goto	u6790
 16063  0023E0                     u6795:
 16064  0023E0  90D8               	bcf	status,0,c
 16065  0023E2  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 16066  0023E4  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 16067  0023E6  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 16068  0023E8                     u6790:
 16069  0023E8  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 16070  0023EA  D7FA               	goto	u6795
 16071  0023EC  0100               	movlb	0	; () banked
 16072  0023EE  517D               	movf	(??___fttol+1)& (0+255),w,b
 16073  0023F0  6F81               	movwf	___fttol@sign1& (0+255),b
 16074                           
 16075                           ; BSR set to: 0
 16076  0023F2  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 16077                           
 16078                           ; BSR set to: 0
 16079  0023F4  0EFF               	movlw	255
 16080  0023F6  1778               	andwf	___fttol@f1& (0+255),f,b
 16081  0023F8  0EFF               	movlw	255
 16082  0023FA  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 16083  0023FC  0E00               	movlw	0
 16084  0023FE  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 16085                           
 16086                           ; BSR set to: 0
 16087  002400  5178               	movf	___fttol@f1& (0+255),w,b
 16088  002402  6F82               	movwf	___fttol@lval& (0+255),b
 16089  002404  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 16090  002406  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 16091  002408  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 16092  00240A  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 16093  00240C  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 16094                           
 16095                           ; BSR set to: 0
 16096  00240E  0E8E               	movlw	142
 16097  002410  5F86               	subwf	___fttol@exp1& (0+255),f,b
 16098                           
 16099                           ; BSR set to: 0
 16100  002412  AF86               	btfss	___fttol@exp1& (0+255),7,b
 16101  002414  D016               	goto	l1913
 16102                           
 16103                           ; BSR set to: 0
 16104  002416  5186               	movf	___fttol@exp1& (0+255),w,b
 16105  002418  0A80               	xorlw	128
 16106  00241A  0F8F               	addlw	143
 16107  00241C  B0D8               	btfsc	status,0,c
 16108  00241E  D009               	goto	l1914
 16109                           
 16110                           ; BSR set to: 0
 16111  002420  0E00               	movlw	0
 16112  002422  6F78               	movwf	?___fttol& (0+255),b
 16113  002424  0E00               	movlw	0
 16114  002426  6F79               	movwf	(?___fttol+1)& (0+255),b
 16115  002428  0E00               	movlw	0
 16116  00242A  6F7A               	movwf	(?___fttol+2)& (0+255),b
 16117  00242C  0E00               	movlw	0
 16118  00242E  6F7B               	movwf	(?___fttol+3)& (0+255),b
 16119                           
 16120                           ; BSR set to: 0
 16121  002430  0012               	return	
 16122  002432                     l1914:
 16123                           
 16124                           ; BSR set to: 0
 16125                           
 16126                           ; BSR set to: 0
 16127                           
 16128                           ; BSR set to: 0
 16129  002432  90D8               	bcf	status,0,c
 16130  002434  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 16131  002436  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 16132  002438  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 16133  00243A  3382               	rrcf	___fttol@lval& (0+255),f,b
 16134                           
 16135                           ; BSR set to: 0
 16136  00243C  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 16137  00243E  D7F9               	goto	l1914
 16138                           
 16139                           ; BSR set to: 0
 16140  002440  D015               	goto	u6830
 16141  002442                     l1913:
 16142                           
 16143                           ; BSR set to: 0
 16144                           
 16145                           ; BSR set to: 0
 16146  002442  0E17               	movlw	23
 16147  002444  6586               	cpfsgt	___fttol@exp1& (0+255),b
 16148  002446  D00F               	goto	l1919
 16149                           
 16150                           ; BSR set to: 0
 16151  002448  0E00               	movlw	0
 16152  00244A  6F78               	movwf	?___fttol& (0+255),b
 16153  00244C  0E00               	movlw	0
 16154  00244E  6F79               	movwf	(?___fttol+1)& (0+255),b
 16155  002450  0E00               	movlw	0
 16156  002452  6F7A               	movwf	(?___fttol+2)& (0+255),b
 16157  002454  0E00               	movlw	0
 16158  002456  6F7B               	movwf	(?___fttol+3)& (0+255),b
 16159                           
 16160                           ; BSR set to: 0
 16161  002458  0012               	return	
 16162  00245A                     
 16163                           ; BSR set to: 0
 16164                           
 16165                           ; BSR set to: 0
 16166  00245A  90D8               	bcf	status,0,c
 16167  00245C  3782               	rlcf	___fttol@lval& (0+255),f,b
 16168  00245E  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 16169  002460  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 16170  002462  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 16171  002464  0786               	decf	___fttol@exp1& (0+255),f,b
 16172  002466                     l1919:
 16173                           
 16174                           ; BSR set to: 0
 16175                           
 16176                           ; BSR set to: 0
 16177  002466  5186               	movf	___fttol@exp1& (0+255),w,b
 16178  002468  A4D8               	btfss	status,2,c
 16179  00246A  D7F7               	goto	l1920
 16180  00246C                     u6830:
 16181                           
 16182                           ; BSR set to: 0
 16183                           
 16184                           ; BSR set to: 0
 16185                           
 16186                           ; BSR set to: 0
 16187  00246C  5181               	movf	___fttol@sign1& (0+255),w,b
 16188  00246E  B4D8               	btfsc	status,2,c
 16189  002470  D008               	goto	l1922
 16190                           
 16191                           ; BSR set to: 0
 16192  002472  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 16193  002474  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 16194  002476  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 16195  002478  6D82               	negf	___fttol@lval& (0+255),b
 16196  00247A  0E00               	movlw	0
 16197  00247C  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 16198  00247E  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 16199  002480  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 16200  002482                     l1922:
 16201                           
 16202                           ; BSR set to: 0
 16203                           
 16204                           ; BSR set to: 0
 16205  002482  C082  F078         	movff	___fttol@lval,?___fttol
 16206  002486  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 16207  00248A  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 16208  00248E  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 16209  002492  0012               	return	
 16210  002494                     __end_of___fttol:
 16211                           	opt stack 0
 16212                           tosu	equ	0xFFF
 16213                           tosh	equ	0xFFE
 16214                           tosl	equ	0xFFD
 16215                           pclath	equ	0xFFA
 16216                           tblptru	equ	0xFF8
 16217                           tblptrh	equ	0xFF7
 16218                           tblptrl	equ	0xFF6
 16219                           tablat	equ	0xFF5
 16220                           prodh	equ	0xFF4
 16221                           prodl	equ	0xFF3
 16222                           intcon	equ	0xFF2
 16223                           intcon2	equ	0xFF1
 16224                           postinc0	equ	0xFEE
 16225                           plusw0	equ	0xFEB
 16226                           wreg	equ	0xFE8
 16227                           indf1	equ	0xFE7
 16228                           postdec1	equ	0xFE5
 16229                           fsr1h	equ	0xFE2
 16230                           fsr1l	equ	0xFE1
 16231                           indf2	equ	0xFDF
 16232                           postinc2	equ	0xFDE
 16233                           postdec2	equ	0xFDD
 16234                           plusw2	equ	0xFDB
 16235                           fsr2h	equ	0xFDA
 16236                           fsr2l	equ	0xFD9
 16237                           status	equ	0xFD8
 16238                           
 16239 ;; *************** function ___ftge *****************
 16240 ;; Defined at:
 16241 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 16242 ;; Parameters:    Size  Location     Type
 16243 ;;  ff1             3   23[COMRAM] float 
 16244 ;;  ff2             3   26[COMRAM] float 
 16245 ;; Auto vars:     Size  Location     Type
 16246 ;;		None
 16247 ;; Return value:  Size  Location     Type
 16248 ;;		None               void
 16249 ;; Registers used:
 16250 ;;		wreg, status,2, status,0
 16251 ;; Tracked objects:
 16252 ;;		On entry : 0/0
 16253 ;;		On exit  : 0/0
 16254 ;;		Unchanged: 0/0
 16255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16256 ;;      Params:         6       0       0       0       0       0       0
 16257 ;;      Locals:         0       0       0       0       0       0       0
 16258 ;;      Temps:          3       0       0       0       0       0       0
 16259 ;;      Totals:         9       0       0       0       0       0       0
 16260 ;;Total ram usage:        9 bytes
 16261 ;; Hardware stack levels used:    1
 16262 ;; Hardware stack levels required when called:    4
 16263 ;; This function calls:
 16264 ;;		Nothing
 16265 ;; This function is called by:
 16266 ;;		_CheckFlashPrecentage
 16267 ;;		_pow
 16268 ;;		_exp
 16269 ;;		_floor
 16270 ;; This function uses a non-reentrant model
 16271 ;;
 16272                           
 16273                           	psect	text92
 16274  0031DC                     __ptext92:
 16275                           	opt stack 0
 16276  0031DC                     ___ftge:
 16277                           	opt stack 19
 16278                           
 16279                           ; BSR set to: 0
 16280                           ;incstack = 0
 16281  0031DC  AE1A               	btfss	___ftge@ff1+2,7,c
 16282  0031DE  D016               	goto	l1883
 16283  0031E0  C018  F01E         	movff	___ftge@ff1,??___ftge
 16284  0031E4  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 16285  0031E8  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 16286  0031EC  1E1E               	comf	??___ftge,f,c
 16287  0031EE  1E1F               	comf	??___ftge+1,f,c
 16288  0031F0  1E20               	comf	??___ftge+2,f,c
 16289  0031F2  2A1E               	incf	??___ftge,f,c
 16290  0031F4  0E00               	movlw	0
 16291  0031F6  221F               	addwfc	??___ftge+1,f,c
 16292  0031F8  2220               	addwfc	??___ftge+2,f,c
 16293  0031FA  0E00               	movlw	0
 16294  0031FC  241E               	addwf	??___ftge,w,c
 16295  0031FE  6E18               	movwf	___ftge@ff1,c
 16296  003200  0E00               	movlw	0
 16297  003202  201F               	addwfc	??___ftge+1,w,c
 16298  003204  6E19               	movwf	___ftge@ff1+1,c
 16299  003206  0E80               	movlw	128
 16300  003208  2020               	addwfc	??___ftge+2,w,c
 16301  00320A  6E1A               	movwf	___ftge@ff1+2,c
 16302  00320C                     l1883:
 16303  00320C  AE1D               	btfss	___ftge@ff2+2,7,c
 16304  00320E  D016               	goto	l1884
 16305  003210  C01B  F01E         	movff	___ftge@ff2,??___ftge
 16306  003214  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 16307  003218  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 16308  00321C  1E1E               	comf	??___ftge,f,c
 16309  00321E  1E1F               	comf	??___ftge+1,f,c
 16310  003220  1E20               	comf	??___ftge+2,f,c
 16311  003222  2A1E               	incf	??___ftge,f,c
 16312  003224  0E00               	movlw	0
 16313  003226  221F               	addwfc	??___ftge+1,f,c
 16314  003228  2220               	addwfc	??___ftge+2,f,c
 16315  00322A  0E00               	movlw	0
 16316  00322C  241E               	addwf	??___ftge,w,c
 16317  00322E  6E1B               	movwf	___ftge@ff2,c
 16318  003230  0E00               	movlw	0
 16319  003232  201F               	addwfc	??___ftge+1,w,c
 16320  003234  6E1C               	movwf	___ftge@ff2+1,c
 16321  003236  0E80               	movlw	128
 16322  003238  2020               	addwfc	??___ftge+2,w,c
 16323  00323A  6E1D               	movwf	___ftge@ff2+2,c
 16324  00323C                     l1884:
 16325  00323C  0E00               	movlw	0
 16326  00323E  1A18               	xorwf	___ftge@ff1,f,c
 16327  003240  0E00               	movlw	0
 16328  003242  1A19               	xorwf	___ftge@ff1+1,f,c
 16329  003244  0E80               	movlw	128
 16330  003246  1A1A               	xorwf	___ftge@ff1+2,f,c
 16331  003248  0E00               	movlw	0
 16332  00324A  1A1B               	xorwf	___ftge@ff2,f,c
 16333  00324C  0E00               	movlw	0
 16334  00324E  1A1C               	xorwf	___ftge@ff2+1,f,c
 16335  003250  0E80               	movlw	128
 16336  003252  1A1D               	xorwf	___ftge@ff2+2,f,c
 16337  003254  501B               	movf	___ftge@ff2,w,c
 16338  003256  5C18               	subwf	___ftge@ff1,w,c
 16339  003258  501C               	movf	___ftge@ff2+1,w,c
 16340  00325A  5819               	subwfb	___ftge@ff1+1,w,c
 16341  00325C  501D               	movf	___ftge@ff2+2,w,c
 16342  00325E  581A               	subwfb	___ftge@ff1+2,w,c
 16343  003260  B0D8               	btfsc	status,0,c
 16344  003262  D002               	goto	l7011
 16345  003264  90D8               	bcf	status,0,c
 16346  003266  0012               	return	
 16347  003268                     l7011:
 16348  003268  80D8               	bsf	status,0,c
 16349  00326A  0012               	return	
 16350  00326C                     __end_of___ftge:
 16351                           	opt stack 0
 16352                           tosu	equ	0xFFF
 16353                           tosh	equ	0xFFE
 16354                           tosl	equ	0xFFD
 16355                           pclath	equ	0xFFA
 16356                           tblptru	equ	0xFF8
 16357                           tblptrh	equ	0xFF7
 16358                           tblptrl	equ	0xFF6
 16359                           tablat	equ	0xFF5
 16360                           prodh	equ	0xFF4
 16361                           prodl	equ	0xFF3
 16362                           intcon	equ	0xFF2
 16363                           intcon2	equ	0xFF1
 16364                           postinc0	equ	0xFEE
 16365                           plusw0	equ	0xFEB
 16366                           wreg	equ	0xFE8
 16367                           indf1	equ	0xFE7
 16368                           postdec1	equ	0xFE5
 16369                           fsr1h	equ	0xFE2
 16370                           fsr1l	equ	0xFE1
 16371                           indf2	equ	0xFDF
 16372                           postinc2	equ	0xFDE
 16373                           postdec2	equ	0xFDD
 16374                           plusw2	equ	0xFDB
 16375                           fsr2h	equ	0xFDA
 16376                           fsr2l	equ	0xFD9
 16377                           status	equ	0xFD8
 16378                           
 16379 ;; *************** function ___altoft *****************
 16380 ;; Defined at:
 16381 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 16382 ;; Parameters:    Size  Location     Type
 16383 ;;  c               4   39[BANK0 ] long 
 16384 ;; Auto vars:     Size  Location     Type
 16385 ;;  sign            1   47[COMRAM] unsigned char 
 16386 ;;  exp             1   46[COMRAM] unsigned char 
 16387 ;; Return value:  Size  Location     Type
 16388 ;;                  3   39[BANK0 ] float 
 16389 ;; Registers used:
 16390 ;;		wreg, status,2, status,0, cstack
 16391 ;; Tracked objects:
 16392 ;;		On entry : 0/0
 16393 ;;		On exit  : 0/0
 16394 ;;		Unchanged: 0/0
 16395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16396 ;;      Params:         0       4       0       0       0       0       0
 16397 ;;      Locals:         2       0       0       0       0       0       0
 16398 ;;      Temps:          0       4       0       0       0       0       0
 16399 ;;      Totals:         2       8       0       0       0       0       0
 16400 ;;Total ram usage:       10 bytes
 16401 ;; Hardware stack levels used:    1
 16402 ;; Hardware stack levels required when called:    5
 16403 ;; This function calls:
 16404 ;;		___ftpack
 16405 ;; This function is called by:
 16406 ;;		_floor
 16407 ;; This function uses a non-reentrant model
 16408 ;;
 16409                           
 16410                           	psect	text93
 16411  003474                     __ptext93:
 16412                           	opt stack 0
 16413  003474                     ___altoft:
 16414                           	opt stack 18
 16415                           
 16416                           ;incstack = 0
 16417  003474  0E00               	movlw	0
 16418  003476  6E30               	movwf	___altoft@sign,c
 16419  003478  0E8E               	movlw	142
 16420  00347A  6E2F               	movwf	___altoft@exp,c
 16421  00347C  0100               	movlb	0	; () banked
 16422  00347E  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
 16423  003480  D011               	goto	l1681
 16424                           
 16425                           ; BSR set to: 0
 16426  003482  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
 16427  003484  1F89               	comf	(___altoft@c+2)& (0+255),f,b
 16428  003486  1F88               	comf	(___altoft@c+1)& (0+255),f,b
 16429  003488  6D87               	negf	___altoft@c& (0+255),b
 16430  00348A  0E00               	movlw	0
 16431  00348C  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
 16432  00348E  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
 16433  003490  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
 16434                           
 16435                           ; BSR set to: 0
 16436  003492  0E01               	movlw	1
 16437  003494  6E30               	movwf	___altoft@sign,c
 16438                           
 16439                           ; BSR set to: 0
 16440  003496  D006               	goto	l1681
 16441  003498                     
 16442                           ; BSR set to: 0
 16443                           
 16444                           ; BSR set to: 0
 16445  003498  90D8               	bcf	status,0,c
 16446  00349A  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
 16447  00349C  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
 16448  00349E  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
 16449  0034A0  3387               	rrcf	___altoft@c& (0+255),f,b
 16450  0034A2  2A2F               	incf	___altoft@exp,f,c
 16451  0034A4                     l1681:
 16452                           
 16453                           ; BSR set to: 0
 16454                           
 16455                           ; BSR set to: 0
 16456  0034A4  0E00               	movlw	0
 16457  0034A6  1587               	andwf	___altoft@c& (0+255),w,b
 16458  0034A8  6F8B               	movwf	??___altoft& (0+255),b
 16459  0034AA  0E00               	movlw	0
 16460  0034AC  1588               	andwf	(___altoft@c+1)& (0+255),w,b
 16461  0034AE  6F8C               	movwf	(??___altoft+1)& (0+255),b
 16462  0034B0  0E00               	movlw	0
 16463  0034B2  1589               	andwf	(___altoft@c+2)& (0+255),w,b
 16464  0034B4  6F8D               	movwf	(??___altoft+2)& (0+255),b
 16465  0034B6  0EFF               	movlw	255
 16466  0034B8  158A               	andwf	(___altoft@c+3)& (0+255),w,b
 16467  0034BA  6F8E               	movwf	(??___altoft+3)& (0+255),b
 16468  0034BC  518B               	movf	??___altoft& (0+255),w,b
 16469  0034BE  118C               	iorwf	(??___altoft+1)& (0+255),w,b
 16470  0034C0  118D               	iorwf	(??___altoft+2)& (0+255),w,b
 16471  0034C2  118E               	iorwf	(??___altoft+3)& (0+255),w,b
 16472  0034C4  A4D8               	btfss	status,2,c
 16473  0034C6  D7E8               	goto	l1682
 16474                           
 16475                           ; BSR set to: 0
 16476                           
 16477                           ; BSR set to: 0
 16478  0034C8  C087  F018         	movff	___altoft@c,___ftpack@arg
 16479  0034CC  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
 16480  0034D0  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 16481  0034D4  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 16482  0034D8  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 16483  0034DC  EC55  F017         	call	___ftpack	;wreg free
 16484  0034E0  C018  F087         	movff	?___ftpack,?___altoft
 16485  0034E4  C019  F088         	movff	?___ftpack+1,?___altoft+1
 16486  0034E8  C01A  F089         	movff	?___ftpack+2,?___altoft+2
 16487  0034EC  0012               	return	
 16488  0034EE                     __end_of___altoft:
 16489                           	opt stack 0
 16490                           tosu	equ	0xFFF
 16491                           tosh	equ	0xFFE
 16492                           tosl	equ	0xFFD
 16493                           pclath	equ	0xFFA
 16494                           tblptru	equ	0xFF8
 16495                           tblptrh	equ	0xFF7
 16496                           tblptrl	equ	0xFF6
 16497                           tablat	equ	0xFF5
 16498                           prodh	equ	0xFF4
 16499                           prodl	equ	0xFF3
 16500                           intcon	equ	0xFF2
 16501                           intcon2	equ	0xFF1
 16502                           postinc0	equ	0xFEE
 16503                           plusw0	equ	0xFEB
 16504                           wreg	equ	0xFE8
 16505                           indf1	equ	0xFE7
 16506                           postdec1	equ	0xFE5
 16507                           fsr1h	equ	0xFE2
 16508                           fsr1l	equ	0xFE1
 16509                           indf2	equ	0xFDF
 16510                           postinc2	equ	0xFDE
 16511                           postdec2	equ	0xFDD
 16512                           plusw2	equ	0xFDB
 16513                           fsr2h	equ	0xFDA
 16514                           fsr2l	equ	0xFD9
 16515                           status	equ	0xFD8
 16516                           
 16517 ;; *************** function _eval_poly *****************
 16518 ;; Defined at:
 16519 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 16520 ;; Parameters:    Size  Location     Type
 16521 ;;  x               3   36[BANK0 ] float 
 16522 ;;  d               2   39[BANK0 ] PTR const 
 16523 ;;		 -> log@coeff(27), exp@coeff(30), 
 16524 ;;  n               2   41[BANK0 ] int 
 16525 ;; Auto vars:     Size  Location     Type
 16526 ;;  res             3   43[BANK0 ] int 
 16527 ;; Return value:  Size  Location     Type
 16528 ;;                  3   36[BANK0 ] int 
 16529 ;; Registers used:
 16530 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16531 ;; Tracked objects:
 16532 ;;		On entry : 0/0
 16533 ;;		On exit  : 0/0
 16534 ;;		Unchanged: 0/0
 16535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16536 ;;      Params:         0       7       0       0       0       0       0
 16537 ;;      Locals:         0       3       0       0       0       0       0
 16538 ;;      Temps:          2       0       0       0       0       0       0
 16539 ;;      Totals:         2      10       0       0       0       0       0
 16540 ;;Total ram usage:       12 bytes
 16541 ;; Hardware stack levels used:    1
 16542 ;; Hardware stack levels required when called:    6
 16543 ;; This function calls:
 16544 ;;		___ftadd
 16545 ;;		___ftmul
 16546 ;;		___wmul
 16547 ;; This function is called by:
 16548 ;;		_exp
 16549 ;;		_log
 16550 ;; This function uses a non-reentrant model
 16551 ;;
 16552                           
 16553                           	psect	text94
 16554  002AD6                     __ptext94:
 16555                           	opt stack 0
 16556  002AD6                     _eval_poly:
 16557                           	opt stack 18
 16558                           
 16559                           ;incstack = 0
 16560  002AD6  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 16561  002ADA  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 16562  002ADE  0E00               	movlw	0
 16563  002AE0  6E1B               	movwf	___wmul@multiplicand+1,c
 16564  002AE2  0E03               	movlw	3
 16565  002AE4  6E1A               	movwf	___wmul@multiplicand,c
 16566  002AE6  EC82  F020         	call	___wmul	;wreg free
 16567  002AEA  C087  F02F         	movff	eval_poly@d,??_eval_poly
 16568  002AEE  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 16569  002AF2  5018               	movf	?___wmul,w,c
 16570  002AF4  262F               	addwf	??_eval_poly,f,c
 16571  002AF6  5019               	movf	?___wmul+1,w,c
 16572  002AF8  2230               	addwfc	??_eval_poly+1,f,c
 16573  002AFA  C02F  FFF6         	movff	??_eval_poly,tblptrl
 16574  002AFE  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 16575  002B02                     	if	0	;tblptru may be non-zero
 16576  002B02                     	endif
 16577  002B02                     	if	0	;tblptru may be non-zero
 16578  002B02                     	endif
 16579  002B02  0009               	tblrd		*+
 16580  002B04  CFF5 F08B          	movff	tablat,eval_poly@res
 16581  002B08  0009               	tblrd		*+
 16582  002B0A  CFF5 F08C          	movff	tablat,eval_poly@res+1
 16583  002B0E  000A               	tblrd		*-
 16584  002B10  CFF5 F08D          	movff	tablat,eval_poly@res+2
 16585  002B14  D03F               	goto	l2306
 16586  002B16  C08B  F06C         	movff	eval_poly@res,___ftmul@f2
 16587  002B1A  C08C  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
 16588  002B1E  C08D  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
 16589  002B22  C084  F069         	movff	eval_poly@x,___ftmul@f1
 16590  002B26  C085  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
 16591  002B2A  C086  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
 16592  002B2E  EC4A  F012         	call	___ftmul	;wreg free
 16593  002B32  C069  F078         	movff	?___ftmul,___ftadd@f1
 16594  002B36  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 16595  002B3A  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 16596  002B3E  0E00               	movlw	0
 16597  002B40  6E1B               	movwf	___wmul@multiplicand+1,c
 16598  002B42  0E03               	movlw	3
 16599  002B44  6E1A               	movwf	___wmul@multiplicand,c
 16600  002B46  0100               	movlb	0	; () banked
 16601  002B48  0789               	decf	eval_poly@n& (0+255),f,b
 16602  002B4A  A0D8               	btfss	status,0,c
 16603  002B4C  078A               	decf	(eval_poly@n+1)& (0+255),f,b
 16604  002B4E  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 16605  002B52  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 16606  002B56  EC82  F020         	call	___wmul	;wreg free
 16607  002B5A  C087  F02F         	movff	eval_poly@d,??_eval_poly
 16608  002B5E  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 16609  002B62  5018               	movf	?___wmul,w,c
 16610  002B64  262F               	addwf	??_eval_poly,f,c
 16611  002B66  5019               	movf	?___wmul+1,w,c
 16612  002B68  2230               	addwfc	??_eval_poly+1,f,c
 16613  002B6A  C02F  FFF6         	movff	??_eval_poly,tblptrl
 16614  002B6E  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 16615  002B72                     	if	0	;tblptru may be non-zero
 16616  002B72                     	endif
 16617  002B72                     	if	0	;tblptru may be non-zero
 16618  002B72                     	endif
 16619  002B72  0009               	tblrd		*+
 16620  002B74  CFF5 F07B          	movff	tablat,___ftadd@f2
 16621  002B78  0009               	tblrd		*+
 16622  002B7A  CFF5 F07C          	movff	tablat,___ftadd@f2+1
 16623  002B7E  000A               	tblrd		*-
 16624  002B80  CFF5 F07D          	movff	tablat,___ftadd@f2+2
 16625  002B84  ECC2  F00C         	call	___ftadd	;wreg free
 16626  002B88  C078  F08B         	movff	?___ftadd,eval_poly@res
 16627  002B8C  C079  F08C         	movff	?___ftadd+1,eval_poly@res+1
 16628  002B90  C07A  F08D         	movff	?___ftadd+2,eval_poly@res+2
 16629  002B94                     l2306:
 16630  002B94  0100               	movlb	0	; () banked
 16631  002B96  5189               	movf	eval_poly@n& (0+255),w,b
 16632  002B98  118A               	iorwf	(eval_poly@n+1)& (0+255),w,b
 16633  002B9A  A4D8               	btfss	status,2,c
 16634  002B9C  D7BC               	goto	l2307
 16635                           
 16636                           ; BSR set to: 0
 16637  002B9E  C08B  F084         	movff	eval_poly@res,?_eval_poly
 16638  002BA2  C08C  F085         	movff	eval_poly@res+1,?_eval_poly+1
 16639  002BA6  C08D  F086         	movff	eval_poly@res+2,?_eval_poly+2
 16640                           
 16641                           ; BSR set to: 0
 16642  002BAA  0012               	return		;funcret
 16643  002BAC                     __end_of_eval_poly:
 16644                           	opt stack 0
 16645                           tosu	equ	0xFFF
 16646                           tosh	equ	0xFFE
 16647                           tosl	equ	0xFFD
 16648                           pclath	equ	0xFFA
 16649                           tblptru	equ	0xFF8
 16650                           tblptrh	equ	0xFF7
 16651                           tblptrl	equ	0xFF6
 16652                           tablat	equ	0xFF5
 16653                           prodh	equ	0xFF4
 16654                           prodl	equ	0xFF3
 16655                           intcon	equ	0xFF2
 16656                           intcon2	equ	0xFF1
 16657                           postinc0	equ	0xFEE
 16658                           plusw0	equ	0xFEB
 16659                           wreg	equ	0xFE8
 16660                           indf1	equ	0xFE7
 16661                           postdec1	equ	0xFE5
 16662                           fsr1h	equ	0xFE2
 16663                           fsr1l	equ	0xFE1
 16664                           indf2	equ	0xFDF
 16665                           postinc2	equ	0xFDE
 16666                           postdec2	equ	0xFDD
 16667                           plusw2	equ	0xFDB
 16668                           fsr2h	equ	0xFDA
 16669                           fsr2l	equ	0xFD9
 16670                           status	equ	0xFD8
 16671                           
 16672 ;; *************** function ___wmul *****************
 16673 ;; Defined at:
 16674 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 16675 ;; Parameters:    Size  Location     Type
 16676 ;;  multiplier      2   23[COMRAM] unsigned int 
 16677 ;;  multiplicand    2   25[COMRAM] unsigned int 
 16678 ;; Auto vars:     Size  Location     Type
 16679 ;;  product         2   27[COMRAM] unsigned int 
 16680 ;; Return value:  Size  Location     Type
 16681 ;;                  2   23[COMRAM] unsigned int 
 16682 ;; Registers used:
 16683 ;;		wreg, status,2, status,0, prodl, prodh
 16684 ;; Tracked objects:
 16685 ;;		On entry : 0/0
 16686 ;;		On exit  : 0/0
 16687 ;;		Unchanged: 0/0
 16688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16689 ;;      Params:         4       0       0       0       0       0       0
 16690 ;;      Locals:         2       0       0       0       0       0       0
 16691 ;;      Temps:          0       0       0       0       0       0       0
 16692 ;;      Totals:         6       0       0       0       0       0       0
 16693 ;;Total ram usage:        6 bytes
 16694 ;; Hardware stack levels used:    1
 16695 ;; Hardware stack levels required when called:    4
 16696 ;; This function calls:
 16697 ;;		Nothing
 16698 ;; This function is called by:
 16699 ;;		_GetMcuFwVersion
 16700 ;;		_eval_poly
 16701 ;; This function uses a non-reentrant model
 16702 ;;
 16703                           
 16704                           	psect	text95
 16705  004104                     __ptext95:
 16706                           	opt stack 0
 16707  004104                     ___wmul:
 16708                           	opt stack 19
 16709                           
 16710                           ; BSR set to: 0
 16711                           ;incstack = 0
 16712  004104  5018               	movf	___wmul@multiplier,w,c
 16713  004106  021A               	mulwf	___wmul@multiplicand,c
 16714  004108  CFF3 F01C          	movff	prodl,___wmul@product
 16715  00410C  CFF4 F01D          	movff	prodh,___wmul@product+1
 16716  004110  5018               	movf	___wmul@multiplier,w,c
 16717  004112  021B               	mulwf	___wmul@multiplicand+1,c
 16718  004114  50F3               	movf	prodl,w,c
 16719  004116  261D               	addwf	___wmul@product+1,f,c
 16720  004118  5019               	movf	___wmul@multiplier+1,w,c
 16721  00411A  021A               	mulwf	___wmul@multiplicand,c
 16722  00411C  50F3               	movf	prodl,w,c
 16723  00411E  261D               	addwf	___wmul@product+1,f,c
 16724  004120  C01C  F018         	movff	___wmul@product,?___wmul
 16725  004124  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 16726  004128  0012               	return	
 16727  00412A                     __end_of___wmul:
 16728                           	opt stack 0
 16729                           tosu	equ	0xFFF
 16730                           tosh	equ	0xFFE
 16731                           tosl	equ	0xFFD
 16732                           pclath	equ	0xFFA
 16733                           tblptru	equ	0xFF8
 16734                           tblptrh	equ	0xFF7
 16735                           tblptrl	equ	0xFF6
 16736                           tablat	equ	0xFF5
 16737                           prodh	equ	0xFF4
 16738                           prodl	equ	0xFF3
 16739                           intcon	equ	0xFF2
 16740                           intcon2	equ	0xFF1
 16741                           postinc0	equ	0xFEE
 16742                           plusw0	equ	0xFEB
 16743                           wreg	equ	0xFE8
 16744                           indf1	equ	0xFE7
 16745                           postdec1	equ	0xFE5
 16746                           fsr1h	equ	0xFE2
 16747                           fsr1l	equ	0xFE1
 16748                           indf2	equ	0xFDF
 16749                           postinc2	equ	0xFDE
 16750                           postdec2	equ	0xFDD
 16751                           plusw2	equ	0xFDB
 16752                           fsr2h	equ	0xFDA
 16753                           fsr2l	equ	0xFD9
 16754                           status	equ	0xFD8
 16755                           
 16756 ;; *************** function ___ftmul *****************
 16757 ;; Defined at:
 16758 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 16759 ;; Parameters:    Size  Location     Type
 16760 ;;  f1              3    9[BANK0 ] float 
 16761 ;;  f2              3   12[BANK0 ] float 
 16762 ;; Auto vars:     Size  Location     Type
 16763 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 16764 ;;  sign            1   23[BANK0 ] unsigned char 
 16765 ;;  cntr            1   22[BANK0 ] unsigned char 
 16766 ;;  exp             1   18[BANK0 ] unsigned char 
 16767 ;; Return value:  Size  Location     Type
 16768 ;;                  3    9[BANK0 ] float 
 16769 ;; Registers used:
 16770 ;;		wreg, status,2, status,0, cstack
 16771 ;; Tracked objects:
 16772 ;;		On entry : 0/0
 16773 ;;		On exit  : 0/0
 16774 ;;		Unchanged: 0/0
 16775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16776 ;;      Params:         0       6       0       0       0       0       0
 16777 ;;      Locals:         0       6       0       0       0       0       0
 16778 ;;      Temps:          0       3       0       0       0       0       0
 16779 ;;      Totals:         0      15       0       0       0       0       0
 16780 ;;Total ram usage:       15 bytes
 16781 ;; Hardware stack levels used:    1
 16782 ;; Hardware stack levels required when called:    5
 16783 ;; This function calls:
 16784 ;;		___ftpack
 16785 ;; This function is called by:
 16786 ;;		_AdcConvert
 16787 ;;		_CheckFlashPrecentage
 16788 ;;		_pow
 16789 ;;		_exp
 16790 ;;		_log
 16791 ;;		_eval_poly
 16792 ;; This function uses a non-reentrant model
 16793 ;;
 16794                           
 16795                           	psect	text96
 16796  002494                     __ptext96:
 16797                           	opt stack 0
 16798  002494                     ___ftmul:
 16799                           	opt stack 18
 16800                           
 16801                           ;incstack = 0
 16802  002494  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
 16803  002498  0100               	movlb	0	; () banked
 16804  00249A  6B70               	clrf	(??___ftmul+1)& (0+255),b
 16805  00249C  6B71               	clrf	(??___ftmul+2)& (0+255),b
 16806  00249E  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 16807  0024A0  376F               	rlcf	??___ftmul& (0+255),f,b
 16808  0024A2  E301               	bnc	u6681
 16809  0024A4  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 16810  0024A6                     u6681:
 16811  0024A6  516F               	movf	??___ftmul& (0+255),w,b
 16812  0024A8  6F72               	movwf	___ftmul@exp& (0+255),b
 16813  0024AA  5172               	movf	___ftmul@exp& (0+255),w,b
 16814  0024AC  A4D8               	btfss	status,2,c
 16815  0024AE  D007               	goto	l1890
 16816                           
 16817                           ; BSR set to: 0
 16818  0024B0  0E00               	movlw	0
 16819  0024B2  6F69               	movwf	?___ftmul& (0+255),b
 16820  0024B4  0E00               	movlw	0
 16821  0024B6  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 16822  0024B8  0E00               	movlw	0
 16823  0024BA  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 16824                           
 16825                           ; BSR set to: 0
 16826  0024BC  0012               	return	
 16827  0024BE                     l1890:
 16828                           
 16829                           ; BSR set to: 0
 16830                           
 16831                           ; BSR set to: 0
 16832  0024BE  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
 16833  0024C2  6B70               	clrf	(??___ftmul+1)& (0+255),b
 16834  0024C4  6B71               	clrf	(??___ftmul+2)& (0+255),b
 16835  0024C6  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 16836  0024C8  376F               	rlcf	??___ftmul& (0+255),f,b
 16837  0024CA  E301               	bnc	u6701
 16838  0024CC  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 16839  0024CE                     u6701:
 16840  0024CE  516F               	movf	??___ftmul& (0+255),w,b
 16841  0024D0  6F77               	movwf	___ftmul@sign& (0+255),b
 16842  0024D2  5177               	movf	___ftmul@sign& (0+255),w,b
 16843  0024D4  A4D8               	btfss	status,2,c
 16844  0024D6  D007               	goto	l1892
 16845                           
 16846                           ; BSR set to: 0
 16847  0024D8  0E00               	movlw	0
 16848  0024DA  6F69               	movwf	?___ftmul& (0+255),b
 16849  0024DC  0E00               	movlw	0
 16850  0024DE  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 16851  0024E0  0E00               	movlw	0
 16852  0024E2  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 16853                           
 16854                           ; BSR set to: 0
 16855  0024E4  0012               	return	
 16856  0024E6                     l1892:
 16857                           
 16858                           ; BSR set to: 0
 16859                           
 16860                           ; BSR set to: 0
 16861  0024E6  5177               	movf	___ftmul@sign& (0+255),w,b
 16862  0024E8  0F7B               	addlw	123
 16863  0024EA  2772               	addwf	___ftmul@exp& (0+255),f,b
 16864                           
 16865                           ; BSR set to: 0
 16866  0024EC  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
 16867  0024F0  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 16868  0024F2  1B77               	xorwf	___ftmul@sign& (0+255),f,b
 16869  0024F4  0E80               	movlw	128
 16870  0024F6  1777               	andwf	___ftmul@sign& (0+255),f,b
 16871                           
 16872                           ; BSR set to: 0
 16873  0024F8  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 16874                           
 16875                           ; BSR set to: 0
 16876  0024FA  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 16877                           
 16878                           ; BSR set to: 0
 16879  0024FC  0EFF               	movlw	255
 16880  0024FE  176C               	andwf	___ftmul@f2& (0+255),f,b
 16881  002500  0EFF               	movlw	255
 16882  002502  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 16883  002504  0E00               	movlw	0
 16884  002506  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 16885                           
 16886                           ; BSR set to: 0
 16887  002508  0E00               	movlw	0
 16888  00250A  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
 16889  00250C  0E00               	movlw	0
 16890  00250E  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 16891  002510  0E00               	movlw	0
 16892  002512  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 16893                           
 16894                           ; BSR set to: 0
 16895  002514  0E07               	movlw	7
 16896  002516  6F76               	movwf	___ftmul@cntr& (0+255),b
 16897  002518                     
 16898                           ; BSR set to: 0
 16899                           
 16900                           ; BSR set to: 0
 16901  002518  A169               	btfss	___ftmul@f1& (0+255),0,b
 16902  00251A  D006               	goto	l1894
 16903                           
 16904                           ; BSR set to: 0
 16905  00251C  516C               	movf	___ftmul@f2& (0+255),w,b
 16906  00251E  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 16907  002520  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 16908  002522  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 16909  002524  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 16910  002526  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 16911  002528                     l1894:
 16912                           
 16913                           ; BSR set to: 0
 16914                           
 16915                           ; BSR set to: 0
 16916  002528  90D8               	bcf	status,0,c
 16917  00252A  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 16918  00252C  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 16919  00252E  3369               	rrcf	___ftmul@f1& (0+255),f,b
 16920  002530  90D8               	bcf	status,0,c
 16921  002532  376C               	rlcf	___ftmul@f2& (0+255),f,b
 16922  002534  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 16923  002536  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 16924                           
 16925                           ; BSR set to: 0
 16926  002538  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 16927  00253A  D7EE               	goto	l1893
 16928                           
 16929                           ; BSR set to: 0
 16930                           
 16931                           ; BSR set to: 0
 16932  00253C  0E09               	movlw	9
 16933  00253E  6F76               	movwf	___ftmul@cntr& (0+255),b
 16934  002540                     
 16935                           ; BSR set to: 0
 16936                           
 16937                           ; BSR set to: 0
 16938  002540  A169               	btfss	___ftmul@f1& (0+255),0,b
 16939  002542  D006               	goto	l1897
 16940                           
 16941                           ; BSR set to: 0
 16942  002544  516C               	movf	___ftmul@f2& (0+255),w,b
 16943  002546  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 16944  002548  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 16945  00254A  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 16946  00254C  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 16947  00254E  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 16948  002550                     l1897:
 16949                           
 16950                           ; BSR set to: 0
 16951                           
 16952                           ; BSR set to: 0
 16953  002550  90D8               	bcf	status,0,c
 16954  002552  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 16955  002554  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 16956  002556  3369               	rrcf	___ftmul@f1& (0+255),f,b
 16957  002558  90D8               	bcf	status,0,c
 16958  00255A  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 16959  00255C  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 16960  00255E  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 16961                           
 16962                           ; BSR set to: 0
 16963  002560  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 16964  002562  D7EE               	goto	l1896
 16965                           
 16966                           ; BSR set to: 0
 16967                           
 16968                           ; BSR set to: 0
 16969  002564  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 16970  002568  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 16971  00256C  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 16972  002570  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
 16973  002574  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
 16974  002578  EC55  F017         	call	___ftpack	;wreg free
 16975  00257C  C018  F069         	movff	?___ftpack,?___ftmul
 16976  002580  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
 16977  002584  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
 16978  002588  0012               	return	
 16979  00258A                     __end_of___ftmul:
 16980                           	opt stack 0
 16981                           tosu	equ	0xFFF
 16982                           tosh	equ	0xFFE
 16983                           tosl	equ	0xFFD
 16984                           pclath	equ	0xFFA
 16985                           tblptru	equ	0xFF8
 16986                           tblptrh	equ	0xFF7
 16987                           tblptrl	equ	0xFF6
 16988                           tablat	equ	0xFF5
 16989                           prodh	equ	0xFF4
 16990                           prodl	equ	0xFF3
 16991                           intcon	equ	0xFF2
 16992                           intcon2	equ	0xFF1
 16993                           postinc0	equ	0xFEE
 16994                           plusw0	equ	0xFEB
 16995                           wreg	equ	0xFE8
 16996                           indf1	equ	0xFE7
 16997                           postdec1	equ	0xFE5
 16998                           fsr1h	equ	0xFE2
 16999                           fsr1l	equ	0xFE1
 17000                           indf2	equ	0xFDF
 17001                           postinc2	equ	0xFDE
 17002                           postdec2	equ	0xFDD
 17003                           plusw2	equ	0xFDB
 17004                           fsr2h	equ	0xFDA
 17005                           fsr2l	equ	0xFD9
 17006                           status	equ	0xFD8
 17007                           
 17008 ;; *************** function ___ftsub *****************
 17009 ;; Defined at:
 17010 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 17011 ;; Parameters:    Size  Location     Type
 17012 ;;  f1              3   36[BANK0 ] float 
 17013 ;;  f2              3   39[BANK0 ] float 
 17014 ;; Auto vars:     Size  Location     Type
 17015 ;;		None
 17016 ;; Return value:  Size  Location     Type
 17017 ;;                  3   36[BANK0 ] float 
 17018 ;; Registers used:
 17019 ;;		wreg, status,2, status,0, cstack
 17020 ;; Tracked objects:
 17021 ;;		On entry : 0/0
 17022 ;;		On exit  : 0/0
 17023 ;;		Unchanged: 0/0
 17024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17025 ;;      Params:         0       6       0       0       0       0       0
 17026 ;;      Locals:         0       0       0       0       0       0       0
 17027 ;;      Temps:          0       0       0       0       0       0       0
 17028 ;;      Totals:         0       6       0       0       0       0       0
 17029 ;;Total ram usage:        6 bytes
 17030 ;; Hardware stack levels used:    1
 17031 ;; Hardware stack levels required when called:    6
 17032 ;; This function calls:
 17033 ;;		___ftadd
 17034 ;; This function is called by:
 17035 ;;		_exp
 17036 ;; This function uses a non-reentrant model
 17037 ;;
 17038                           
 17039                           	psect	text97
 17040  003C0E                     __ptext97:
 17041                           	opt stack 0
 17042  003C0E                     ___ftsub:
 17043                           	opt stack 18
 17044                           
 17045                           ;incstack = 0
 17046  003C0E  0100               	movlb	0	; () banked
 17047  003C10  5187               	movf	___ftsub@f2& (0+255),w,b
 17048  003C12  1188               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 17049  003C14  1189               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 17050  003C16  B4D8               	btfsc	status,2,c
 17051  003C18  D006               	goto	l1907
 17052                           
 17053                           ; BSR set to: 0
 17054  003C1A  0E00               	movlw	0
 17055  003C1C  1B87               	xorwf	___ftsub@f2& (0+255),f,b
 17056  003C1E  0E00               	movlw	0
 17057  003C20  1B88               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 17058  003C22  0E80               	movlw	128
 17059  003C24  1B89               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 17060  003C26                     l1907:
 17061                           
 17062                           ; BSR set to: 0
 17063                           
 17064                           ; BSR set to: 0
 17065  003C26  C084  F078         	movff	___ftsub@f1,___ftadd@f1
 17066  003C2A  C085  F079         	movff	___ftsub@f1+1,___ftadd@f1+1
 17067  003C2E  C086  F07A         	movff	___ftsub@f1+2,___ftadd@f1+2
 17068  003C32  C087  F07B         	movff	___ftsub@f2,___ftadd@f2
 17069  003C36  C088  F07C         	movff	___ftsub@f2+1,___ftadd@f2+1
 17070  003C3A  C089  F07D         	movff	___ftsub@f2+2,___ftadd@f2+2
 17071  003C3E  ECC2  F00C         	call	___ftadd	;wreg free
 17072  003C42  C078  F084         	movff	?___ftadd,?___ftsub
 17073  003C46  C079  F085         	movff	?___ftadd+1,?___ftsub+1
 17074  003C4A  C07A  F086         	movff	?___ftadd+2,?___ftsub+2
 17075  003C4E  0012               	return	
 17076  003C50                     __end_of___ftsub:
 17077                           	opt stack 0
 17078                           tosu	equ	0xFFF
 17079                           tosh	equ	0xFFE
 17080                           tosl	equ	0xFFD
 17081                           pclath	equ	0xFFA
 17082                           tblptru	equ	0xFF8
 17083                           tblptrh	equ	0xFF7
 17084                           tblptrl	equ	0xFF6
 17085                           tablat	equ	0xFF5
 17086                           prodh	equ	0xFF4
 17087                           prodl	equ	0xFF3
 17088                           intcon	equ	0xFF2
 17089                           intcon2	equ	0xFF1
 17090                           postinc0	equ	0xFEE
 17091                           plusw0	equ	0xFEB
 17092                           wreg	equ	0xFE8
 17093                           indf1	equ	0xFE7
 17094                           postdec1	equ	0xFE5
 17095                           fsr1h	equ	0xFE2
 17096                           fsr1l	equ	0xFE1
 17097                           indf2	equ	0xFDF
 17098                           postinc2	equ	0xFDE
 17099                           postdec2	equ	0xFDD
 17100                           plusw2	equ	0xFDB
 17101                           fsr2h	equ	0xFDA
 17102                           fsr2l	equ	0xFD9
 17103                           status	equ	0xFD8
 17104                           
 17105 ;; *************** function ___ftadd *****************
 17106 ;; Defined at:
 17107 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 17108 ;; Parameters:    Size  Location     Type
 17109 ;;  f1              3   24[BANK0 ] float 
 17110 ;;  f2              3   27[BANK0 ] float 
 17111 ;; Auto vars:     Size  Location     Type
 17112 ;;  exp1            1   35[BANK0 ] unsigned char 
 17113 ;;  exp2            1   34[BANK0 ] unsigned char 
 17114 ;;  sign            1   33[BANK0 ] unsigned char 
 17115 ;; Return value:  Size  Location     Type
 17116 ;;                  3   24[BANK0 ] float 
 17117 ;; Registers used:
 17118 ;;		wreg, status,2, status,0, cstack
 17119 ;; Tracked objects:
 17120 ;;		On entry : 0/0
 17121 ;;		On exit  : 0/0
 17122 ;;		Unchanged: 0/0
 17123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17124 ;;      Params:         0       6       0       0       0       0       0
 17125 ;;      Locals:         0       3       0       0       0       0       0
 17126 ;;      Temps:          0       3       0       0       0       0       0
 17127 ;;      Totals:         0      12       0       0       0       0       0
 17128 ;;Total ram usage:       12 bytes
 17129 ;; Hardware stack levels used:    1
 17130 ;; Hardware stack levels required when called:    5
 17131 ;; This function calls:
 17132 ;;		___ftpack
 17133 ;; This function is called by:
 17134 ;;		___ftsub
 17135 ;;		_floor
 17136 ;;		_log
 17137 ;;		_eval_poly
 17138 ;; This function uses a non-reentrant model
 17139 ;;
 17140                           
 17141                           	psect	text98
 17142  001984                     __ptext98:
 17143                           	opt stack 0
 17144  001984                     ___ftadd:
 17145                           	opt stack 18
 17146                           
 17147                           ;incstack = 0
 17148  001984  C07A  F07E         	movff	___ftadd@f1+2,??___ftadd
 17149  001988  0100               	movlb	0	; () banked
 17150  00198A  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 17151  00198C  6B80               	clrf	(??___ftadd+2)& (0+255),b
 17152  00198E  3579               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 17153  001990  377E               	rlcf	??___ftadd& (0+255),f,b
 17154  001992  E301               	bnc	u6471
 17155  001994  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 17156  001996                     u6471:
 17157  001996  517E               	movf	??___ftadd& (0+255),w,b
 17158  001998  6F83               	movwf	___ftadd@exp1& (0+255),b
 17159  00199A  C07D  F07E         	movff	___ftadd@f2+2,??___ftadd
 17160  00199E  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 17161  0019A0  6B80               	clrf	(??___ftadd+2)& (0+255),b
 17162  0019A2  357C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 17163  0019A4  377E               	rlcf	??___ftadd& (0+255),f,b
 17164  0019A6  E301               	bnc	u6481
 17165  0019A8  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 17166  0019AA                     u6481:
 17167  0019AA  517E               	movf	??___ftadd& (0+255),w,b
 17168  0019AC  6F82               	movwf	___ftadd@exp2& (0+255),b
 17169                           
 17170                           ; BSR set to: 0
 17171  0019AE  5183               	movf	___ftadd@exp1& (0+255),w,b
 17172  0019B0  B4D8               	btfsc	status,2,c
 17173  0019B2  D00B               	goto	u6510
 17174                           
 17175                           ; BSR set to: 0
 17176  0019B4  5182               	movf	___ftadd@exp2& (0+255),w,b
 17177  0019B6  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 17178  0019B8  B0D8               	btfsc	status,0,c
 17179  0019BA  D00E               	goto	l1842
 17180                           
 17181                           ; BSR set to: 0
 17182  0019BC  5183               	movf	___ftadd@exp1& (0+255),w,b
 17183  0019BE  0800               	sublw	0
 17184  0019C0  2582               	addwf	___ftadd@exp2& (0+255),w,b
 17185  0019C2  6F7E               	movwf	??___ftadd& (0+255),b
 17186  0019C4  0E18               	movlw	24
 17187  0019C6  657E               	cpfsgt	??___ftadd& (0+255),b
 17188  0019C8  D007               	goto	l1842
 17189  0019CA                     u6510:
 17190                           
 17191                           ; BSR set to: 0
 17192  0019CA  C07B  F078         	movff	___ftadd@f2,?___ftadd
 17193  0019CE  C07C  F079         	movff	___ftadd@f2+1,?___ftadd+1
 17194  0019D2  C07D  F07A         	movff	___ftadd@f2+2,?___ftadd+2
 17195  0019D6  0012               	return	
 17196  0019D8                     l1842:
 17197                           
 17198                           ; BSR set to: 0
 17199                           
 17200                           ; BSR set to: 0
 17201  0019D8  5182               	movf	___ftadd@exp2& (0+255),w,b
 17202  0019DA  B4D8               	btfsc	status,2,c
 17203  0019DC  D00B               	goto	u6540
 17204                           
 17205                           ; BSR set to: 0
 17206  0019DE  5183               	movf	___ftadd@exp1& (0+255),w,b
 17207  0019E0  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 17208  0019E2  B0D8               	btfsc	status,0,c
 17209  0019E4  D00E               	goto	l1846
 17210                           
 17211                           ; BSR set to: 0
 17212  0019E6  5182               	movf	___ftadd@exp2& (0+255),w,b
 17213  0019E8  0800               	sublw	0
 17214  0019EA  2583               	addwf	___ftadd@exp1& (0+255),w,b
 17215  0019EC  6F7E               	movwf	??___ftadd& (0+255),b
 17216  0019EE  0E18               	movlw	24
 17217  0019F0  657E               	cpfsgt	??___ftadd& (0+255),b
 17218  0019F2  D007               	goto	l1846
 17219  0019F4                     u6540:
 17220                           
 17221                           ; BSR set to: 0
 17222  0019F4  C078  F078         	movff	___ftadd@f1,?___ftadd
 17223  0019F8  C079  F079         	movff	___ftadd@f1+1,?___ftadd+1
 17224  0019FC  C07A  F07A         	movff	___ftadd@f1+2,?___ftadd+2
 17225  001A00  0012               	return	
 17226  001A02                     l1846:
 17227                           
 17228                           ; BSR set to: 0
 17229                           
 17230                           ; BSR set to: 0
 17231  001A02  0E06               	movlw	6
 17232  001A04  6F81               	movwf	___ftadd@sign& (0+255),b
 17233                           
 17234                           ; BSR set to: 0
 17235  001A06  BF7A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 17236                           
 17237                           ; BSR set to: 0
 17238  001A08  8F81               	bsf	___ftadd@sign& (0+255),7,b
 17239                           
 17240                           ; BSR set to: 0
 17241                           
 17242                           ; BSR set to: 0
 17243  001A0A  BF7D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 17244                           
 17245                           ; BSR set to: 0
 17246  001A0C  8D81               	bsf	___ftadd@sign& (0+255),6,b
 17247                           
 17248                           ; BSR set to: 0
 17249  001A0E  8F79               	bsf	(___ftadd@f1+1)& (0+255),7,b
 17250                           
 17251                           ; BSR set to: 0
 17252  001A10  0EFF               	movlw	255
 17253  001A12  1778               	andwf	___ftadd@f1& (0+255),f,b
 17254  001A14  0EFF               	movlw	255
 17255  001A16  1779               	andwf	(___ftadd@f1+1)& (0+255),f,b
 17256  001A18  0E00               	movlw	0
 17257  001A1A  177A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 17258  001A1C  8F7C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 17259                           
 17260                           ; BSR set to: 0
 17261  001A1E  0EFF               	movlw	255
 17262  001A20  177B               	andwf	___ftadd@f2& (0+255),f,b
 17263  001A22  0EFF               	movlw	255
 17264  001A24  177C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 17265  001A26  0E00               	movlw	0
 17266  001A28  177D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 17267                           
 17268                           ; BSR set to: 0
 17269  001A2A  5182               	movf	___ftadd@exp2& (0+255),w,b
 17270  001A2C  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 17271  001A2E  B0D8               	btfsc	status,0,c
 17272  001A30  D01B               	goto	l1851
 17273  001A32                     u6570:
 17274                           
 17275                           ; BSR set to: 0
 17276                           
 17277                           ; BSR set to: 0
 17278  001A32  90D8               	bcf	status,0,c
 17279  001A34  377B               	rlcf	___ftadd@f2& (0+255),f,b
 17280  001A36  377C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 17281  001A38  377D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 17282  001A3A  0782               	decf	___ftadd@exp2& (0+255),f,b
 17283                           
 17284                           ; BSR set to: 0
 17285  001A3C  5183               	movf	___ftadd@exp1& (0+255),w,b
 17286  001A3E  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 17287  001A40  B4D8               	btfsc	status,2,c
 17288  001A42  D00D               	goto	l1856
 17289                           
 17290                           ; BSR set to: 0
 17291  001A44  0781               	decf	___ftadd@sign& (0+255),f,b
 17292  001A46  C081  F07E         	movff	___ftadd@sign,??___ftadd
 17293  001A4A  0E07               	movlw	7
 17294  001A4C  177E               	andwf	??___ftadd& (0+255),f,b
 17295  001A4E  B4D8               	btfsc	status,2,c
 17296  001A50  D006               	goto	l1856
 17297  001A52  D7EF               	goto	u6570
 17298  001A54                     
 17299                           ; BSR set to: 0
 17300                           
 17301                           ; BSR set to: 0
 17302  001A54  90D8               	bcf	status,0,c
 17303  001A56  337A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 17304  001A58  3379               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 17305  001A5A  3378               	rrcf	___ftadd@f1& (0+255),f,b
 17306  001A5C  2B83               	incf	___ftadd@exp1& (0+255),f,b
 17307  001A5E                     l1856:
 17308                           
 17309                           ; BSR set to: 0
 17310                           
 17311                           ; BSR set to: 0
 17312  001A5E  5182               	movf	___ftadd@exp2& (0+255),w,b
 17313  001A60  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 17314  001A62  B4D8               	btfsc	status,2,c
 17315  001A64  D01F               	goto	u6640
 17316  001A66  D7F6               	goto	l1857
 17317  001A68                     l1851:
 17318                           
 17319                           ; BSR set to: 0
 17320                           
 17321                           ; BSR set to: 0
 17322  001A68  5183               	movf	___ftadd@exp1& (0+255),w,b
 17323  001A6A  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 17324  001A6C  B0D8               	btfsc	status,0,c
 17325  001A6E  D01A               	goto	u6640
 17326  001A70                     u6610:
 17327                           
 17328                           ; BSR set to: 0
 17329                           
 17330                           ; BSR set to: 0
 17331  001A70  90D8               	bcf	status,0,c
 17332  001A72  3778               	rlcf	___ftadd@f1& (0+255),f,b
 17333  001A74  3779               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 17334  001A76  377A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 17335  001A78  0783               	decf	___ftadd@exp1& (0+255),f,b
 17336                           
 17337                           ; BSR set to: 0
 17338  001A7A  5183               	movf	___ftadd@exp1& (0+255),w,b
 17339  001A7C  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 17340  001A7E  B4D8               	btfsc	status,2,c
 17341  001A80  D00D               	goto	l1865
 17342                           
 17343                           ; BSR set to: 0
 17344  001A82  0781               	decf	___ftadd@sign& (0+255),f,b
 17345  001A84  C081  F07E         	movff	___ftadd@sign,??___ftadd
 17346  001A88  0E07               	movlw	7
 17347  001A8A  177E               	andwf	??___ftadd& (0+255),f,b
 17348  001A8C  B4D8               	btfsc	status,2,c
 17349  001A8E  D006               	goto	l1865
 17350  001A90  D7EF               	goto	u6610
 17351  001A92                     
 17352                           ; BSR set to: 0
 17353                           
 17354                           ; BSR set to: 0
 17355  001A92  90D8               	bcf	status,0,c
 17356  001A94  337D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 17357  001A96  337C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 17358  001A98  337B               	rrcf	___ftadd@f2& (0+255),f,b
 17359  001A9A  2B82               	incf	___ftadd@exp2& (0+255),f,b
 17360  001A9C                     l1865:
 17361                           
 17362                           ; BSR set to: 0
 17363                           
 17364                           ; BSR set to: 0
 17365  001A9C  5182               	movf	___ftadd@exp2& (0+255),w,b
 17366  001A9E  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 17367  001AA0  A4D8               	btfss	status,2,c
 17368  001AA2  D7F7               	goto	l1866
 17369  001AA4                     u6640:
 17370                           
 17371                           ; BSR set to: 0
 17372                           
 17373                           ; BSR set to: 0
 17374                           
 17375                           ; BSR set to: 0
 17376  001AA4  AF81               	btfss	___ftadd@sign& (0+255),7,b
 17377  001AA6  D00C               	goto	l1868
 17378                           
 17379                           ; BSR set to: 0
 17380  001AA8  0EFF               	movlw	255
 17381  001AAA  1B78               	xorwf	___ftadd@f1& (0+255),f,b
 17382  001AAC  0EFF               	movlw	255
 17383  001AAE  1B79               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 17384  001AB0  0EFF               	movlw	255
 17385  001AB2  1B7A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 17386  001AB4  0E01               	movlw	1
 17387  001AB6  2778               	addwf	___ftadd@f1& (0+255),f,b
 17388  001AB8  0E00               	movlw	0
 17389  001ABA  2379               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 17390  001ABC  0E00               	movlw	0
 17391  001ABE  237A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 17392  001AC0                     l1868:
 17393                           
 17394                           ; BSR set to: 0
 17395  001AC0  AD81               	btfss	___ftadd@sign& (0+255),6,b
 17396  001AC2  D00C               	goto	l1869
 17397                           
 17398                           ; BSR set to: 0
 17399  001AC4  0EFF               	movlw	255
 17400  001AC6  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 17401  001AC8  0EFF               	movlw	255
 17402  001ACA  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 17403  001ACC  0EFF               	movlw	255
 17404  001ACE  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 17405  001AD0  0E01               	movlw	1
 17406  001AD2  277B               	addwf	___ftadd@f2& (0+255),f,b
 17407  001AD4  0E00               	movlw	0
 17408  001AD6  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17409  001AD8  0E00               	movlw	0
 17410  001ADA  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17411  001ADC                     l1869:
 17412                           
 17413                           ; BSR set to: 0
 17414                           
 17415                           ; BSR set to: 0
 17416  001ADC  0E00               	movlw	0
 17417  001ADE  6F81               	movwf	___ftadd@sign& (0+255),b
 17418                           
 17419                           ; BSR set to: 0
 17420  001AE0  5178               	movf	___ftadd@f1& (0+255),w,b
 17421  001AE2  277B               	addwf	___ftadd@f2& (0+255),f,b
 17422  001AE4  5179               	movf	(___ftadd@f1+1)& (0+255),w,b
 17423  001AE6  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17424  001AE8  517A               	movf	(___ftadd@f1+2)& (0+255),w,b
 17425  001AEA  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17426                           
 17427                           ; BSR set to: 0
 17428  001AEC  AF7D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 17429  001AEE  D00E               	goto	l1870
 17430                           
 17431                           ; BSR set to: 0
 17432  001AF0  0EFF               	movlw	255
 17433  001AF2  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 17434  001AF4  0EFF               	movlw	255
 17435  001AF6  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 17436  001AF8  0EFF               	movlw	255
 17437  001AFA  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 17438  001AFC  0E01               	movlw	1
 17439  001AFE  277B               	addwf	___ftadd@f2& (0+255),f,b
 17440  001B00  0E00               	movlw	0
 17441  001B02  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17442  001B04  0E00               	movlw	0
 17443  001B06  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17444                           
 17445                           ; BSR set to: 0
 17446  001B08  0E01               	movlw	1
 17447  001B0A  6F81               	movwf	___ftadd@sign& (0+255),b
 17448  001B0C                     l1870:
 17449                           
 17450                           ; BSR set to: 0
 17451                           
 17452                           ; BSR set to: 0
 17453  001B0C  C07B  F018         	movff	___ftadd@f2,___ftpack@arg
 17454  001B10  C07C  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 17455  001B14  C07D  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 17456  001B18  C083  F01B         	movff	___ftadd@exp1,___ftpack@exp
 17457  001B1C  C081  F01C         	movff	___ftadd@sign,___ftpack@sign
 17458  001B20  EC55  F017         	call	___ftpack	;wreg free
 17459  001B24  C018  F078         	movff	?___ftpack,?___ftadd
 17460  001B28  C019  F079         	movff	?___ftpack+1,?___ftadd+1
 17461  001B2C  C01A  F07A         	movff	?___ftpack+2,?___ftadd+2
 17462  001B30  0012               	return	
 17463  001B32                     __end_of___ftadd:
 17464                           	opt stack 0
 17465                           tosu	equ	0xFFF
 17466                           tosh	equ	0xFFE
 17467                           tosl	equ	0xFFD
 17468                           pclath	equ	0xFFA
 17469                           tblptru	equ	0xFF8
 17470                           tblptrh	equ	0xFF7
 17471                           tblptrl	equ	0xFF6
 17472                           tablat	equ	0xFF5
 17473                           prodh	equ	0xFF4
 17474                           prodl	equ	0xFF3
 17475                           intcon	equ	0xFF2
 17476                           intcon2	equ	0xFF1
 17477                           postinc0	equ	0xFEE
 17478                           plusw0	equ	0xFEB
 17479                           wreg	equ	0xFE8
 17480                           indf1	equ	0xFE7
 17481                           postdec1	equ	0xFE5
 17482                           fsr1h	equ	0xFE2
 17483                           fsr1l	equ	0xFE1
 17484                           indf2	equ	0xFDF
 17485                           postinc2	equ	0xFDE
 17486                           postdec2	equ	0xFDD
 17487                           plusw2	equ	0xFDB
 17488                           fsr2h	equ	0xFDA
 17489                           fsr2l	equ	0xFD9
 17490                           status	equ	0xFD8
 17491                           
 17492 ;; *************** function ___ftneg *****************
 17493 ;; Defined at:
 17494 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 17495 ;; Parameters:    Size  Location     Type
 17496 ;;  f1              3   23[COMRAM] float 
 17497 ;; Auto vars:     Size  Location     Type
 17498 ;;		None
 17499 ;; Return value:  Size  Location     Type
 17500 ;;                  3   23[COMRAM] float 
 17501 ;; Registers used:
 17502 ;;		wreg, status,2, status,0
 17503 ;; Tracked objects:
 17504 ;;		On entry : 0/0
 17505 ;;		On exit  : 0/0
 17506 ;;		Unchanged: 0/0
 17507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17508 ;;      Params:         3       0       0       0       0       0       0
 17509 ;;      Locals:         0       0       0       0       0       0       0
 17510 ;;      Temps:          0       0       0       0       0       0       0
 17511 ;;      Totals:         3       0       0       0       0       0       0
 17512 ;;Total ram usage:        3 bytes
 17513 ;; Hardware stack levels used:    1
 17514 ;; Hardware stack levels required when called:    4
 17515 ;; This function calls:
 17516 ;;		Nothing
 17517 ;; This function is called by:
 17518 ;;		_pow
 17519 ;;		_exp
 17520 ;; This function uses a non-reentrant model
 17521 ;;
 17522                           
 17523                           	psect	text99
 17524  00414E                     __ptext99:
 17525                           	opt stack 0
 17526  00414E                     ___ftneg:
 17527                           	opt stack 20
 17528                           
 17529                           ;incstack = 0
 17530  00414E  5018               	movf	___ftneg@f1,w,c
 17531  004150  1019               	iorwf	___ftneg@f1+1,w,c
 17532  004152  101A               	iorwf	___ftneg@f1+2,w,c
 17533  004154  B4D8               	btfsc	status,2,c
 17534  004156  D006               	goto	l1901
 17535  004158  0E00               	movlw	0
 17536  00415A  1A18               	xorwf	___ftneg@f1,f,c
 17537  00415C  0E00               	movlw	0
 17538  00415E  1A19               	xorwf	___ftneg@f1+1,f,c
 17539  004160  0E80               	movlw	128
 17540  004162  1A1A               	xorwf	___ftneg@f1+2,f,c
 17541  004164                     l1901:
 17542  004164  C018  F018         	movff	___ftneg@f1,?___ftneg
 17543  004168  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 17544  00416C  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 17545  004170  0012               	return		;funcret
 17546  004172                     __end_of___ftneg:
 17547                           	opt stack 0
 17548                           tosu	equ	0xFFF
 17549                           tosh	equ	0xFFE
 17550                           tosl	equ	0xFFD
 17551                           pclath	equ	0xFFA
 17552                           tblptru	equ	0xFF8
 17553                           tblptrh	equ	0xFF7
 17554                           tblptrl	equ	0xFF6
 17555                           tablat	equ	0xFF5
 17556                           prodh	equ	0xFF4
 17557                           prodl	equ	0xFF3
 17558                           intcon	equ	0xFF2
 17559                           intcon2	equ	0xFF1
 17560                           postinc0	equ	0xFEE
 17561                           plusw0	equ	0xFEB
 17562                           wreg	equ	0xFE8
 17563                           indf1	equ	0xFE7
 17564                           postdec1	equ	0xFE5
 17565                           fsr1h	equ	0xFE2
 17566                           fsr1l	equ	0xFE1
 17567                           indf2	equ	0xFDF
 17568                           postinc2	equ	0xFDE
 17569                           postdec2	equ	0xFDD
 17570                           plusw2	equ	0xFDB
 17571                           fsr2h	equ	0xFDA
 17572                           fsr2l	equ	0xFD9
 17573                           status	equ	0xFD8
 17574                           
 17575 ;; *************** function ___ftdiv *****************
 17576 ;; Defined at:
 17577 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 17578 ;; Parameters:    Size  Location     Type
 17579 ;;  f1              3   40[COMRAM] float 
 17580 ;;  f2              3   43[COMRAM] float 
 17581 ;; Auto vars:     Size  Location     Type
 17582 ;;  f3              3    4[BANK0 ] float 
 17583 ;;  sign            1    8[BANK0 ] unsigned char 
 17584 ;;  exp             1    7[BANK0 ] unsigned char 
 17585 ;;  cntr            1    3[BANK0 ] unsigned char 
 17586 ;; Return value:  Size  Location     Type
 17587 ;;                  3   40[COMRAM] float 
 17588 ;; Registers used:
 17589 ;;		wreg, status,2, status,0, cstack
 17590 ;; Tracked objects:
 17591 ;;		On entry : 0/0
 17592 ;;		On exit  : 0/0
 17593 ;;		Unchanged: 0/0
 17594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17595 ;;      Params:         6       0       0       0       0       0       0
 17596 ;;      Locals:         0       6       0       0       0       0       0
 17597 ;;      Temps:          0       3       0       0       0       0       0
 17598 ;;      Totals:         6       9       0       0       0       0       0
 17599 ;;Total ram usage:       15 bytes
 17600 ;; Hardware stack levels used:    1
 17601 ;; Hardware stack levels required when called:    5
 17602 ;; This function calls:
 17603 ;;		___ftpack
 17604 ;; This function is called by:
 17605 ;;		_AdcConvert
 17606 ;;		_CheckFlashPrecentage
 17607 ;;		_exp
 17608 ;; This function uses a non-reentrant model
 17609 ;;
 17610                           
 17611                           	psect	text100
 17612  00258A                     __ptext100:
 17613                           	opt stack 0
 17614  00258A                     ___ftdiv:
 17615                           	opt stack 19
 17616                           
 17617                           ;incstack = 0
 17618  00258A  C02B  F060         	movff	___ftdiv@f1+2,??___ftdiv
 17619  00258E  0100               	movlb	0	; () banked
 17620  002590  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 17621  002592  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 17622  002594  342A               	rlcf	___ftdiv@f1+1,w,c
 17623  002596  3760               	rlcf	??___ftdiv& (0+255),f,b
 17624  002598  E301               	bnc	u6881
 17625  00259A  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 17626  00259C                     u6881:
 17627  00259C  5160               	movf	??___ftdiv& (0+255),w,b
 17628  00259E  6F67               	movwf	___ftdiv@exp& (0+255),b
 17629  0025A0  5167               	movf	___ftdiv@exp& (0+255),w,b
 17630  0025A2  A4D8               	btfss	status,2,c
 17631  0025A4  D007               	goto	l1875
 17632                           
 17633                           ; BSR set to: 0
 17634  0025A6  0E00               	movlw	0
 17635  0025A8  6E29               	movwf	?___ftdiv,c
 17636  0025AA  0E00               	movlw	0
 17637  0025AC  6E2A               	movwf	?___ftdiv+1,c
 17638  0025AE  0E00               	movlw	0
 17639  0025B0  6E2B               	movwf	?___ftdiv+2,c
 17640                           
 17641                           ; BSR set to: 0
 17642  0025B2  0012               	return	
 17643  0025B4                     l1875:
 17644                           
 17645                           ; BSR set to: 0
 17646                           
 17647                           ; BSR set to: 0
 17648  0025B4  C02E  F060         	movff	___ftdiv@f2+2,??___ftdiv
 17649  0025B8  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 17650  0025BA  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 17651  0025BC  342D               	rlcf	___ftdiv@f2+1,w,c
 17652  0025BE  3760               	rlcf	??___ftdiv& (0+255),f,b
 17653  0025C0  E301               	bnc	u6901
 17654  0025C2  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 17655  0025C4                     u6901:
 17656  0025C4  5160               	movf	??___ftdiv& (0+255),w,b
 17657  0025C6  6F68               	movwf	___ftdiv@sign& (0+255),b
 17658  0025C8  5168               	movf	___ftdiv@sign& (0+255),w,b
 17659  0025CA  A4D8               	btfss	status,2,c
 17660  0025CC  D007               	goto	l1877
 17661                           
 17662                           ; BSR set to: 0
 17663  0025CE  0E00               	movlw	0
 17664  0025D0  6E29               	movwf	?___ftdiv,c
 17665  0025D2  0E00               	movlw	0
 17666  0025D4  6E2A               	movwf	?___ftdiv+1,c
 17667  0025D6  0E00               	movlw	0
 17668  0025D8  6E2B               	movwf	?___ftdiv+2,c
 17669                           
 17670                           ; BSR set to: 0
 17671  0025DA  0012               	return	
 17672  0025DC                     l1877:
 17673                           
 17674                           ; BSR set to: 0
 17675                           
 17676                           ; BSR set to: 0
 17677  0025DC  0E00               	movlw	0
 17678  0025DE  6F64               	movwf	___ftdiv@f3& (0+255),b
 17679  0025E0  0E00               	movlw	0
 17680  0025E2  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 17681  0025E4  0E00               	movlw	0
 17682  0025E6  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 17683                           
 17684                           ; BSR set to: 0
 17685  0025E8  5168               	movf	___ftdiv@sign& (0+255),w,b
 17686  0025EA  0F89               	addlw	137
 17687  0025EC  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 17688                           
 17689                           ; BSR set to: 0
 17690  0025EE  C02B  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 17691                           
 17692                           ; BSR set to: 0
 17693  0025F2  502E               	movf	___ftdiv@f2+2,w,c
 17694  0025F4  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 17695                           
 17696                           ; BSR set to: 0
 17697  0025F6  0E80               	movlw	128
 17698  0025F8  1768               	andwf	___ftdiv@sign& (0+255),f,b
 17699                           
 17700                           ; BSR set to: 0
 17701  0025FA  8E2A               	bsf	___ftdiv@f1+1,7,c
 17702                           
 17703                           ; BSR set to: 0
 17704  0025FC  0EFF               	movlw	255
 17705  0025FE  1629               	andwf	___ftdiv@f1,f,c
 17706  002600  0EFF               	movlw	255
 17707  002602  162A               	andwf	___ftdiv@f1+1,f,c
 17708  002604  0E00               	movlw	0
 17709  002606  162B               	andwf	___ftdiv@f1+2,f,c
 17710                           
 17711                           ; BSR set to: 0
 17712  002608  8E2D               	bsf	___ftdiv@f2+1,7,c
 17713                           
 17714                           ; BSR set to: 0
 17715  00260A  0EFF               	movlw	255
 17716  00260C  162C               	andwf	___ftdiv@f2,f,c
 17717  00260E  0EFF               	movlw	255
 17718  002610  162D               	andwf	___ftdiv@f2+1,f,c
 17719  002612  0E00               	movlw	0
 17720  002614  162E               	andwf	___ftdiv@f2+2,f,c
 17721                           
 17722                           ; BSR set to: 0
 17723  002616  0E18               	movlw	24
 17724  002618  6F63               	movwf	___ftdiv@cntr& (0+255),b
 17725  00261A                     
 17726                           ; BSR set to: 0
 17727                           
 17728                           ; BSR set to: 0
 17729  00261A  90D8               	bcf	status,0,c
 17730  00261C  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 17731  00261E  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 17732  002620  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 17733                           
 17734                           ; BSR set to: 0
 17735  002622  502C               	movf	___ftdiv@f2,w,c
 17736  002624  5C29               	subwf	___ftdiv@f1,w,c
 17737  002626  502D               	movf	___ftdiv@f2+1,w,c
 17738  002628  582A               	subwfb	___ftdiv@f1+1,w,c
 17739  00262A  502E               	movf	___ftdiv@f2+2,w,c
 17740  00262C  582B               	subwfb	___ftdiv@f1+2,w,c
 17741  00262E  A0D8               	btfss	status,0,c
 17742  002630  D007               	goto	l1879
 17743                           
 17744                           ; BSR set to: 0
 17745  002632  502C               	movf	___ftdiv@f2,w,c
 17746  002634  5E29               	subwf	___ftdiv@f1,f,c
 17747  002636  502D               	movf	___ftdiv@f2+1,w,c
 17748  002638  5A2A               	subwfb	___ftdiv@f1+1,f,c
 17749  00263A  502E               	movf	___ftdiv@f2+2,w,c
 17750  00263C  5A2B               	subwfb	___ftdiv@f1+2,f,c
 17751                           
 17752                           ; BSR set to: 0
 17753  00263E  8164               	bsf	___ftdiv@f3& (0+255),0,b
 17754  002640                     l1879:
 17755                           
 17756                           ; BSR set to: 0
 17757  002640  90D8               	bcf	status,0,c
 17758  002642  3629               	rlcf	___ftdiv@f1,f,c
 17759  002644  362A               	rlcf	___ftdiv@f1+1,f,c
 17760  002646  362B               	rlcf	___ftdiv@f1+2,f,c
 17761                           
 17762                           ; BSR set to: 0
 17763  002648  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 17764  00264A  D7E7               	goto	l1878
 17765                           
 17766                           ; BSR set to: 0
 17767                           
 17768                           ; BSR set to: 0
 17769  00264C  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 17770  002650  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 17771  002654  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 17772  002658  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 17773  00265C  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 17774  002660  EC55  F017         	call	___ftpack	;wreg free
 17775  002664  C018  F029         	movff	?___ftpack,?___ftdiv
 17776  002668  C019  F02A         	movff	?___ftpack+1,?___ftdiv+1
 17777  00266C  C01A  F02B         	movff	?___ftpack+2,?___ftdiv+2
 17778  002670  0012               	return	
 17779  002672                     __end_of___ftdiv:
 17780                           	opt stack 0
 17781                           tosu	equ	0xFFF
 17782                           tosh	equ	0xFFE
 17783                           tosl	equ	0xFFD
 17784                           pclath	equ	0xFFA
 17785                           tblptru	equ	0xFF8
 17786                           tblptrh	equ	0xFF7
 17787                           tblptrl	equ	0xFF6
 17788                           tablat	equ	0xFF5
 17789                           prodh	equ	0xFF4
 17790                           prodl	equ	0xFF3
 17791                           intcon	equ	0xFF2
 17792                           intcon2	equ	0xFF1
 17793                           postinc0	equ	0xFEE
 17794                           plusw0	equ	0xFEB
 17795                           wreg	equ	0xFE8
 17796                           indf1	equ	0xFE7
 17797                           postdec1	equ	0xFE5
 17798                           fsr1h	equ	0xFE2
 17799                           fsr1l	equ	0xFE1
 17800                           indf2	equ	0xFDF
 17801                           postinc2	equ	0xFDE
 17802                           postdec2	equ	0xFDD
 17803                           plusw2	equ	0xFDB
 17804                           fsr2h	equ	0xFDA
 17805                           fsr2l	equ	0xFD9
 17806                           status	equ	0xFD8
 17807                           
 17808 ;; *************** function ___awtoft *****************
 17809 ;; Defined at:
 17810 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 17811 ;; Parameters:    Size  Location     Type
 17812 ;;  c               2   31[COMRAM] int 
 17813 ;; Auto vars:     Size  Location     Type
 17814 ;;  sign            1   34[COMRAM] unsigned char 
 17815 ;; Return value:  Size  Location     Type
 17816 ;;                  3   31[COMRAM] float 
 17817 ;; Registers used:
 17818 ;;		wreg, status,2, status,0, cstack
 17819 ;; Tracked objects:
 17820 ;;		On entry : 0/0
 17821 ;;		On exit  : 0/0
 17822 ;;		Unchanged: 0/0
 17823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17824 ;;      Params:         3       0       0       0       0       0       0
 17825 ;;      Locals:         1       0       0       0       0       0       0
 17826 ;;      Temps:          0       0       0       0       0       0       0
 17827 ;;      Totals:         4       0       0       0       0       0       0
 17828 ;;Total ram usage:        4 bytes
 17829 ;; Hardware stack levels used:    1
 17830 ;; Hardware stack levels required when called:    5
 17831 ;; This function calls:
 17832 ;;		___ftpack
 17833 ;; This function is called by:
 17834 ;;		_ReadIntFromEeprom
 17835 ;;		_exp
 17836 ;;		_log
 17837 ;; This function uses a non-reentrant model
 17838 ;;
 17839                           
 17840                           	psect	text101
 17841  003E2C                     __ptext101:
 17842                           	opt stack 0
 17843  003E2C                     ___awtoft:
 17844                           	opt stack 19
 17845                           
 17846                           ;incstack = 0
 17847  003E2C  0E00               	movlw	0
 17848  003E2E  6E23               	movwf	___awtoft@sign,c
 17849  003E30  AE21               	btfss	___awtoft@c+1,7,c
 17850  003E32  D006               	goto	l1792
 17851  003E34  6C20               	negf	___awtoft@c,c
 17852  003E36  1E21               	comf	___awtoft@c+1,f,c
 17853  003E38  B0D8               	btfsc	status,0,c
 17854  003E3A  2A21               	incf	___awtoft@c+1,f,c
 17855  003E3C  0E01               	movlw	1
 17856  003E3E  6E23               	movwf	___awtoft@sign,c
 17857  003E40                     l1792:
 17858  003E40  C020  F018         	movff	___awtoft@c,___ftpack@arg
 17859  003E44  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 17860  003E48  6A1A               	clrf	___ftpack@arg+2,c
 17861  003E4A  0E8E               	movlw	142
 17862  003E4C  6E1B               	movwf	___ftpack@exp,c
 17863  003E4E  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 17864  003E52  EC55  F017         	call	___ftpack	;wreg free
 17865  003E56  C018  F020         	movff	?___ftpack,?___awtoft
 17866  003E5A  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 17867  003E5E  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 17868  003E62  0012               	return	
 17869  003E64                     __end_of___awtoft:
 17870                           	opt stack 0
 17871                           tosu	equ	0xFFF
 17872                           tosh	equ	0xFFE
 17873                           tosl	equ	0xFFD
 17874                           pclath	equ	0xFFA
 17875                           tblptru	equ	0xFF8
 17876                           tblptrh	equ	0xFF7
 17877                           tblptrl	equ	0xFF6
 17878                           tablat	equ	0xFF5
 17879                           prodh	equ	0xFF4
 17880                           prodl	equ	0xFF3
 17881                           intcon	equ	0xFF2
 17882                           intcon2	equ	0xFF1
 17883                           postinc0	equ	0xFEE
 17884                           plusw0	equ	0xFEB
 17885                           wreg	equ	0xFE8
 17886                           indf1	equ	0xFE7
 17887                           postdec1	equ	0xFE5
 17888                           fsr1h	equ	0xFE2
 17889                           fsr1l	equ	0xFE1
 17890                           indf2	equ	0xFDF
 17891                           postinc2	equ	0xFDE
 17892                           postdec2	equ	0xFDD
 17893                           plusw2	equ	0xFDB
 17894                           fsr2h	equ	0xFDA
 17895                           fsr2l	equ	0xFD9
 17896                           status	equ	0xFD8
 17897                           
 17898 ;; *************** function ___lltoft *****************
 17899 ;; Defined at:
 17900 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 17901 ;; Parameters:    Size  Location     Type
 17902 ;;  c               4   31[COMRAM] unsigned long 
 17903 ;; Auto vars:     Size  Location     Type
 17904 ;;  exp             1   39[COMRAM] unsigned char 
 17905 ;; Return value:  Size  Location     Type
 17906 ;;                  3   31[COMRAM] float 
 17907 ;; Registers used:
 17908 ;;		wreg, status,2, status,0, cstack
 17909 ;; Tracked objects:
 17910 ;;		On entry : 0/0
 17911 ;;		On exit  : 0/0
 17912 ;;		Unchanged: 0/0
 17913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17914 ;;      Params:         4       0       0       0       0       0       0
 17915 ;;      Locals:         1       0       0       0       0       0       0
 17916 ;;      Temps:          4       0       0       0       0       0       0
 17917 ;;      Totals:         9       0       0       0       0       0       0
 17918 ;;Total ram usage:        9 bytes
 17919 ;; Hardware stack levels used:    1
 17920 ;; Hardware stack levels required when called:    5
 17921 ;; This function calls:
 17922 ;;		___ftpack
 17923 ;; This function is called by:
 17924 ;;		_CheckFlashPrecentage
 17925 ;;		_pow
 17926 ;; This function uses a non-reentrant model
 17927 ;;
 17928                           
 17929                           	psect	text102
 17930  003886                     __ptext102:
 17931                           	opt stack 0
 17932  003886                     ___lltoft:
 17933                           	opt stack 20
 17934                           
 17935                           ;incstack = 0
 17936  003886  0E8E               	movlw	142
 17937  003888  6E28               	movwf	___lltoft@exp,c
 17938  00388A  D006               	goto	l1968
 17939  00388C  90D8               	bcf	status,0,c
 17940  00388E  3223               	rrcf	___lltoft@c+3,f,c
 17941  003890  3222               	rrcf	___lltoft@c+2,f,c
 17942  003892  3221               	rrcf	___lltoft@c+1,f,c
 17943  003894  3220               	rrcf	___lltoft@c,f,c
 17944  003896  2A28               	incf	___lltoft@exp,f,c
 17945  003898                     l1968:
 17946  003898  0E00               	movlw	0
 17947  00389A  1420               	andwf	___lltoft@c,w,c
 17948  00389C  6E24               	movwf	??___lltoft& (0+255),c
 17949  00389E  0E00               	movlw	0
 17950  0038A0  1421               	andwf	___lltoft@c+1,w,c
 17951  0038A2  6E25               	movwf	(??___lltoft+1)& (0+255),c
 17952  0038A4  0E00               	movlw	0
 17953  0038A6  1422               	andwf	___lltoft@c+2,w,c
 17954  0038A8  6E26               	movwf	(??___lltoft+2)& (0+255),c
 17955  0038AA  0EFF               	movlw	255
 17956  0038AC  1423               	andwf	___lltoft@c+3,w,c
 17957  0038AE  6E27               	movwf	(??___lltoft+3)& (0+255),c
 17958  0038B0  5024               	movf	??___lltoft,w,c
 17959  0038B2  1025               	iorwf	??___lltoft+1,w,c
 17960  0038B4  1026               	iorwf	??___lltoft+2,w,c
 17961  0038B6  1027               	iorwf	??___lltoft+3,w,c
 17962  0038B8  A4D8               	btfss	status,2,c
 17963  0038BA  D7E8               	goto	l1969
 17964  0038BC  C020  F018         	movff	___lltoft@c,___ftpack@arg
 17965  0038C0  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 17966  0038C4  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 17967  0038C8  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 17968  0038CC  0E00               	movlw	0
 17969  0038CE  6E1C               	movwf	___ftpack@sign,c
 17970  0038D0  EC55  F017         	call	___ftpack	;wreg free
 17971  0038D4  C018  F020         	movff	?___ftpack,?___lltoft
 17972  0038D8  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 17973  0038DC  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 17974  0038E0  0012               	return	
 17975  0038E2                     __end_of___lltoft:
 17976                           	opt stack 0
 17977                           tosu	equ	0xFFF
 17978                           tosh	equ	0xFFE
 17979                           tosl	equ	0xFFD
 17980                           pclath	equ	0xFFA
 17981                           tblptru	equ	0xFF8
 17982                           tblptrh	equ	0xFF7
 17983                           tblptrl	equ	0xFF6
 17984                           tablat	equ	0xFF5
 17985                           prodh	equ	0xFF4
 17986                           prodl	equ	0xFF3
 17987                           intcon	equ	0xFF2
 17988                           intcon2	equ	0xFF1
 17989                           postinc0	equ	0xFEE
 17990                           plusw0	equ	0xFEB
 17991                           wreg	equ	0xFE8
 17992                           indf1	equ	0xFE7
 17993                           postdec1	equ	0xFE5
 17994                           fsr1h	equ	0xFE2
 17995                           fsr1l	equ	0xFE1
 17996                           indf2	equ	0xFDF
 17997                           postinc2	equ	0xFDE
 17998                           postdec2	equ	0xFDD
 17999                           plusw2	equ	0xFDB
 18000                           fsr2h	equ	0xFDA
 18001                           fsr2l	equ	0xFD9
 18002                           status	equ	0xFD8
 18003                           
 18004 ;; *************** function ___lwtoft *****************
 18005 ;; Defined at:
 18006 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 18007 ;; Parameters:    Size  Location     Type
 18008 ;;  c               2   31[COMRAM] unsigned int 
 18009 ;; Auto vars:     Size  Location     Type
 18010 ;;		None
 18011 ;; Return value:  Size  Location     Type
 18012 ;;                  3   31[COMRAM] float 
 18013 ;; Registers used:
 18014 ;;		wreg, status,2, status,0, cstack
 18015 ;; Tracked objects:
 18016 ;;		On entry : 0/0
 18017 ;;		On exit  : 0/0
 18018 ;;		Unchanged: 0/0
 18019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18020 ;;      Params:         3       0       0       0       0       0       0
 18021 ;;      Locals:         0       0       0       0       0       0       0
 18022 ;;      Temps:          0       0       0       0       0       0       0
 18023 ;;      Totals:         3       0       0       0       0       0       0
 18024 ;;Total ram usage:        3 bytes
 18025 ;; Hardware stack levels used:    1
 18026 ;; Hardware stack levels required when called:    5
 18027 ;; This function calls:
 18028 ;;		___ftpack
 18029 ;; This function is called by:
 18030 ;;		_AdcConvert
 18031 ;; This function uses a non-reentrant model
 18032 ;;
 18033                           
 18034                           	psect	text103
 18035  004172                     __ptext103:
 18036                           	opt stack 0
 18037  004172                     ___lwtoft:
 18038                           	opt stack 24
 18039                           
 18040                           ;incstack = 0
 18041  004172  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 18042  004176  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 18043  00417A  6A1A               	clrf	___ftpack@arg+2,c
 18044  00417C  0E8E               	movlw	142
 18045  00417E  6E1B               	movwf	___ftpack@exp,c
 18046  004180  0E00               	movlw	0
 18047  004182  6E1C               	movwf	___ftpack@sign,c
 18048  004184  EC55  F017         	call	___ftpack	;wreg free
 18049  004188  C018  F020         	movff	?___ftpack,?___lwtoft
 18050  00418C  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 18051  004190  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 18052  004194  0012               	return	
 18053  004196                     __end_of___lwtoft:
 18054                           	opt stack 0
 18055                           tosu	equ	0xFFF
 18056                           tosh	equ	0xFFE
 18057                           tosl	equ	0xFFD
 18058                           pclath	equ	0xFFA
 18059                           tblptru	equ	0xFF8
 18060                           tblptrh	equ	0xFF7
 18061                           tblptrl	equ	0xFF6
 18062                           tablat	equ	0xFF5
 18063                           prodh	equ	0xFF4
 18064                           prodl	equ	0xFF3
 18065                           intcon	equ	0xFF2
 18066                           intcon2	equ	0xFF1
 18067                           postinc0	equ	0xFEE
 18068                           plusw0	equ	0xFEB
 18069                           wreg	equ	0xFE8
 18070                           indf1	equ	0xFE7
 18071                           postdec1	equ	0xFE5
 18072                           fsr1h	equ	0xFE2
 18073                           fsr1l	equ	0xFE1
 18074                           indf2	equ	0xFDF
 18075                           postinc2	equ	0xFDE
 18076                           postdec2	equ	0xFDD
 18077                           plusw2	equ	0xFDB
 18078                           fsr2h	equ	0xFDA
 18079                           fsr2l	equ	0xFD9
 18080                           status	equ	0xFD8
 18081                           
 18082 ;; *************** function ___ftpack *****************
 18083 ;; Defined at:
 18084 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 18085 ;; Parameters:    Size  Location     Type
 18086 ;;  arg             3   23[COMRAM] unsigned um
 18087 ;;  exp             1   26[COMRAM] unsigned char 
 18088 ;;  sign            1   27[COMRAM] unsigned char 
 18089 ;; Auto vars:     Size  Location     Type
 18090 ;;		None
 18091 ;; Return value:  Size  Location     Type
 18092 ;;                  3   23[COMRAM] float 
 18093 ;; Registers used:
 18094 ;;		wreg, status,2, status,0
 18095 ;; Tracked objects:
 18096 ;;		On entry : 0/0
 18097 ;;		On exit  : 0/0
 18098 ;;		Unchanged: 0/0
 18099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18100 ;;      Params:         5       0       0       0       0       0       0
 18101 ;;      Locals:         0       0       0       0       0       0       0
 18102 ;;      Temps:          3       0       0       0       0       0       0
 18103 ;;      Totals:         8       0       0       0       0       0       0
 18104 ;;Total ram usage:        8 bytes
 18105 ;; Hardware stack levels used:    1
 18106 ;; Hardware stack levels required when called:    4
 18107 ;; This function calls:
 18108 ;;		Nothing
 18109 ;; This function is called by:
 18110 ;;		___altoft
 18111 ;;		___awtoft
 18112 ;;		___ftadd
 18113 ;;		___ftdiv
 18114 ;;		___ftmul
 18115 ;;		___lltoft
 18116 ;;		___lwtoft
 18117 ;; This function uses a non-reentrant model
 18118 ;;
 18119                           
 18120                           	psect	text104
 18121  002EAA                     __ptext104:
 18122                           	opt stack 0
 18123  002EAA                     ___ftpack:
 18124                           	opt stack 18
 18125                           
 18126                           ;incstack = 0
 18127  002EAA  501B               	movf	___ftpack@exp,w,c
 18128  002EAC  B4D8               	btfsc	status,2,c
 18129  002EAE  D005               	goto	u6380
 18130  002EB0  5018               	movf	___ftpack@arg,w,c
 18131  002EB2  1019               	iorwf	___ftpack@arg+1,w,c
 18132  002EB4  101A               	iorwf	___ftpack@arg+2,w,c
 18133  002EB6  A4D8               	btfss	status,2,c
 18134  002EB8  D00C               	goto	l1811
 18135  002EBA                     u6380:
 18136  002EBA  0E00               	movlw	0
 18137  002EBC  6E18               	movwf	?___ftpack,c
 18138  002EBE  0E00               	movlw	0
 18139  002EC0  6E19               	movwf	?___ftpack+1,c
 18140  002EC2  0E00               	movlw	0
 18141  002EC4  6E1A               	movwf	?___ftpack+2,c
 18142  002EC6  0012               	return	
 18143  002EC8  2A1B               	incf	___ftpack@exp,f,c
 18144  002ECA  90D8               	bcf	status,0,c
 18145  002ECC  321A               	rrcf	___ftpack@arg+2,f,c
 18146  002ECE  3219               	rrcf	___ftpack@arg+1,f,c
 18147  002ED0  3218               	rrcf	___ftpack@arg,f,c
 18148  002ED2                     l1811:
 18149  002ED2  0E00               	movlw	0
 18150  002ED4  1418               	andwf	___ftpack@arg,w,c
 18151  002ED6  6E1D               	movwf	??___ftpack& (0+255),c
 18152  002ED8  0E00               	movlw	0
 18153  002EDA  1419               	andwf	___ftpack@arg+1,w,c
 18154  002EDC  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 18155  002EDE  0EFE               	movlw	254
 18156  002EE0  141A               	andwf	___ftpack@arg+2,w,c
 18157  002EE2  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 18158  002EE4  501D               	movf	??___ftpack,w,c
 18159  002EE6  101E               	iorwf	??___ftpack+1,w,c
 18160  002EE8  101F               	iorwf	??___ftpack+2,w,c
 18161  002EEA  B4D8               	btfsc	status,2,c
 18162  002EEC  D00C               	goto	l1814
 18163  002EEE  D7EC               	goto	l1812
 18164  002EF0  2A1B               	incf	___ftpack@exp,f,c
 18165  002EF2  0E01               	movlw	1
 18166  002EF4  2618               	addwf	___ftpack@arg,f,c
 18167  002EF6  0E00               	movlw	0
 18168  002EF8  2219               	addwfc	___ftpack@arg+1,f,c
 18169  002EFA  0E00               	movlw	0
 18170  002EFC  221A               	addwfc	___ftpack@arg+2,f,c
 18171  002EFE  90D8               	bcf	status,0,c
 18172  002F00  321A               	rrcf	___ftpack@arg+2,f,c
 18173  002F02  3219               	rrcf	___ftpack@arg+1,f,c
 18174  002F04  3218               	rrcf	___ftpack@arg,f,c
 18175  002F06                     l1814:
 18176  002F06  0E00               	movlw	0
 18177  002F08  1418               	andwf	___ftpack@arg,w,c
 18178  002F0A  6E1D               	movwf	??___ftpack& (0+255),c
 18179  002F0C  0E00               	movlw	0
 18180  002F0E  1419               	andwf	___ftpack@arg+1,w,c
 18181  002F10  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 18182  002F12  0EFF               	movlw	255
 18183  002F14  141A               	andwf	___ftpack@arg+2,w,c
 18184  002F16  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 18185  002F18  501D               	movf	??___ftpack,w,c
 18186  002F1A  101E               	iorwf	??___ftpack+1,w,c
 18187  002F1C  101F               	iorwf	??___ftpack+2,w,c
 18188  002F1E  B4D8               	btfsc	status,2,c
 18189  002F20  D006               	goto	l1817
 18190  002F22  D7E6               	goto	l1815
 18191  002F24  061B               	decf	___ftpack@exp,f,c
 18192  002F26  90D8               	bcf	status,0,c
 18193  002F28  3618               	rlcf	___ftpack@arg,f,c
 18194  002F2A  3619               	rlcf	___ftpack@arg+1,f,c
 18195  002F2C  361A               	rlcf	___ftpack@arg+2,f,c
 18196  002F2E                     l1817:
 18197  002F2E  BE19               	btfsc	___ftpack@arg+1,7,c
 18198  002F30  D003               	goto	u6420
 18199  002F32  0E02               	movlw	2
 18200  002F34  601B               	cpfslt	___ftpack@exp,c
 18201  002F36  D7F6               	goto	l1818
 18202  002F38                     u6420:
 18203  002F38  A01B               	btfss	___ftpack@exp,0,c
 18204  002F3A  9E19               	bcf	___ftpack@arg+1,7,c
 18205  002F3C  90D8               	bcf	status,0,c
 18206  002F3E  321B               	rrcf	___ftpack@exp,f,c
 18207  002F40  501B               	movf	___ftpack@exp,w,c
 18208  002F42  121A               	iorwf	___ftpack@arg+2,f,c
 18209  002F44  501C               	movf	___ftpack@sign,w,c
 18210  002F46  A4D8               	btfss	status,2,c
 18211  002F48  8E1A               	bsf	___ftpack@arg+2,7,c
 18212  002F4A  C018  F018         	movff	___ftpack@arg,?___ftpack
 18213  002F4E  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 18214  002F52  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 18215  002F56  0012               	return	
 18216  002F58                     __end_of___ftpack:
 18217                           	opt stack 0
 18218                           tosu	equ	0xFFF
 18219                           tosh	equ	0xFFE
 18220                           tosl	equ	0xFFD
 18221                           pclath	equ	0xFFA
 18222                           tblptru	equ	0xFF8
 18223                           tblptrh	equ	0xFF7
 18224                           tblptrl	equ	0xFF6
 18225                           tablat	equ	0xFF5
 18226                           prodh	equ	0xFF4
 18227                           prodl	equ	0xFF3
 18228                           intcon	equ	0xFF2
 18229                           intcon2	equ	0xFF1
 18230                           postinc0	equ	0xFEE
 18231                           plusw0	equ	0xFEB
 18232                           wreg	equ	0xFE8
 18233                           indf1	equ	0xFE7
 18234                           postdec1	equ	0xFE5
 18235                           fsr1h	equ	0xFE2
 18236                           fsr1l	equ	0xFE1
 18237                           indf2	equ	0xFDF
 18238                           postinc2	equ	0xFDE
 18239                           postdec2	equ	0xFDD
 18240                           plusw2	equ	0xFDB
 18241                           fsr2h	equ	0xFDA
 18242                           fsr2l	equ	0xFD9
 18243                           status	equ	0xFD8
 18244                           
 18245 ;; *************** function _GetUint16FromBitArray *****************
 18246 ;; Defined at:
 18247 ;;		line 34 in file "SystemCommon.c"
 18248 ;; Parameters:    Size  Location     Type
 18249 ;;  bitarray        2   23[COMRAM] PTR unsigned char 
 18250 ;;		 -> synthLdTxArray(12), synthLdRxArray(12), 
 18251 ;;  numOfBits       2   25[COMRAM] int 
 18252 ;; Auto vars:     Size  Location     Type
 18253 ;;  i               2   32[COMRAM] int 
 18254 ;;  res             2   30[COMRAM] unsigned int 
 18255 ;; Return value:  Size  Location     Type
 18256 ;;                  2   23[COMRAM] unsigned int 
 18257 ;; Registers used:
 18258 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18259 ;; Tracked objects:
 18260 ;;		On entry : 0/0
 18261 ;;		On exit  : 0/0
 18262 ;;		Unchanged: 0/0
 18263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18264 ;;      Params:         4       0       0       0       0       0       0
 18265 ;;      Locals:         4       0       0       0       0       0       0
 18266 ;;      Temps:          3       0       0       0       0       0       0
 18267 ;;      Totals:        11       0       0       0       0       0       0
 18268 ;;Total ram usage:       11 bytes
 18269 ;; Hardware stack levels used:    1
 18270 ;; Hardware stack levels required when called:    4
 18271 ;; This function calls:
 18272 ;;		Nothing
 18273 ;; This function is called by:
 18274 ;;		_AdcConvert
 18275 ;; This function uses a non-reentrant model
 18276 ;;
 18277                           
 18278                           	psect	text105
 18279  00363C                     __ptext105:
 18280                           	opt stack 0
 18281  00363C                     _GetUint16FromBitArray:
 18282                           	opt stack 25
 18283                           
 18284                           ;SystemCommon.c: 36: uint16_t res = 0;
 18285                           
 18286                           ;incstack = 0
 18287  00363C  0E00               	movlw	0
 18288  00363E  6E20               	movwf	GetUint16FromBitArray@res+1,c
 18289  003640  0E00               	movlw	0
 18290  003642  6E1F               	movwf	GetUint16FromBitArray@res,c
 18291                           
 18292                           ;SystemCommon.c: 37: for (int i = 0 ; i < numOfBits ; i++)
 18293  003644  0E00               	movlw	0
 18294  003646  6E22               	movwf	GetUint16FromBitArray@i+1,c
 18295  003648  0E00               	movlw	0
 18296  00364A  6E21               	movwf	GetUint16FromBitArray@i,c
 18297  00364C  D01C               	goto	l1401
 18298  00364E                     
 18299                           ;SystemCommon.c: 38: {
 18300                           ;SystemCommon.c: 39: if (bitarray[i])
 18301  00364E  5021               	movf	GetUint16FromBitArray@i,w,c
 18302  003650  2418               	addwf	GetUint16FromBitArray@bitarray,w,c
 18303  003652  6ED9               	movwf	fsr2l,c
 18304  003654  5022               	movf	GetUint16FromBitArray@i+1,w,c
 18305  003656  2019               	addwfc	GetUint16FromBitArray@bitarray+1,w,c
 18306  003658  6EDA               	movwf	fsr2h,c
 18307  00365A  50DF               	movf	indf2,w,c
 18308  00365C  B4D8               	btfsc	status,2,c
 18309  00365E  D011               	goto	l1403
 18310                           
 18311                           ;SystemCommon.c: 40: {
 18312                           ;SystemCommon.c: 41: res |= (uint16_t)(1 << i);
 18313  003660  C021  F01C         	movff	GetUint16FromBitArray@i,??_GetUint16FromBitArray
 18314  003664  0E01               	movlw	1
 18315  003666  6E1D               	movwf	(??_GetUint16FromBitArray+1)& (0+255),c
 18316  003668  0E00               	movlw	0
 18317  00366A  6E1E               	movwf	(??_GetUint16FromBitArray+2)& (0+255),c
 18318  00366C  2A1C               	incf	??_GetUint16FromBitArray,f,c
 18319  00366E  D003               	goto	u5584
 18320  003670                     u5585:
 18321  003670  90D8               	bcf	status,0,c
 18322  003672  361D               	rlcf	??_GetUint16FromBitArray+1,f,c
 18323  003674  361E               	rlcf	??_GetUint16FromBitArray+2,f,c
 18324  003676                     u5584:
 18325  003676  2E1C               	decfsz	??_GetUint16FromBitArray,f,c
 18326  003678  D7FB               	goto	u5585
 18327  00367A  501D               	movf	??_GetUint16FromBitArray+1,w,c
 18328  00367C  121F               	iorwf	GetUint16FromBitArray@res,f,c
 18329  00367E  501E               	movf	??_GetUint16FromBitArray+2,w,c
 18330  003680  1220               	iorwf	GetUint16FromBitArray@res+1,f,c
 18331  003682                     l1403:
 18332  003682  4A21               	infsnz	GetUint16FromBitArray@i,f,c
 18333  003684  2A22               	incf	GetUint16FromBitArray@i+1,f,c
 18334  003686                     l1401:
 18335  003686  501A               	movf	GetUint16FromBitArray@numOfBits,w,c
 18336  003688  5C21               	subwf	GetUint16FromBitArray@i,w,c
 18337  00368A  5022               	movf	GetUint16FromBitArray@i+1,w,c
 18338  00368C  0A80               	xorlw	128
 18339  00368E  6E1C               	movwf	??_GetUint16FromBitArray& (0+255),c
 18340  003690  501B               	movf	GetUint16FromBitArray@numOfBits+1,w,c
 18341  003692  0A80               	xorlw	128
 18342  003694  581C               	subwfb	??_GetUint16FromBitArray& (0+255),w,c
 18343  003696  A0D8               	btfss	status,0,c
 18344  003698  D7DA               	goto	l1402
 18345                           
 18346                           ;SystemCommon.c: 42: }
 18347                           ;SystemCommon.c: 43: }
 18348                           ;SystemCommon.c: 44: return res;
 18349  00369A  C01F  F018         	movff	GetUint16FromBitArray@res,?_GetUint16FromBitArray
 18350  00369E  C020  F019         	movff	GetUint16FromBitArray@res+1,?_GetUint16FromBitArray+1
 18351  0036A2  0012               	return		;funcret
 18352  0036A4                     __end_of_GetUint16FromBitArray:
 18353                           	opt stack 0
 18354                           tosu	equ	0xFFF
 18355                           tosh	equ	0xFFE
 18356                           tosl	equ	0xFFD
 18357                           pclath	equ	0xFFA
 18358                           tblptru	equ	0xFF8
 18359                           tblptrh	equ	0xFF7
 18360                           tblptrl	equ	0xFF6
 18361                           tablat	equ	0xFF5
 18362                           prodh	equ	0xFF4
 18363                           prodl	equ	0xFF3
 18364                           intcon	equ	0xFF2
 18365                           intcon2	equ	0xFF1
 18366                           postinc0	equ	0xFEE
 18367                           plusw0	equ	0xFEB
 18368                           wreg	equ	0xFE8
 18369                           indf1	equ	0xFE7
 18370                           postdec1	equ	0xFE5
 18371                           fsr1h	equ	0xFE2
 18372                           fsr1l	equ	0xFE1
 18373                           indf2	equ	0xFDF
 18374                           postinc2	equ	0xFDE
 18375                           postdec2	equ	0xFDD
 18376                           plusw2	equ	0xFDB
 18377                           fsr2h	equ	0xFDA
 18378                           fsr2l	equ	0xFD9
 18379                           status	equ	0xFD8
 18380                           
 18381 ;; *************** function _FlashSampleWrite *****************
 18382 ;; Defined at:
 18383 ;;		line 29 in file "FlashApp.c"
 18384 ;; Parameters:    Size  Location     Type
 18385 ;;  sampleData      2   44[COMRAM] unsigned int 
 18386 ;;  channelNum      1   46[COMRAM] unsigned char 
 18387 ;; Auto vars:     Size  Location     Type
 18388 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 18389 ;; Return value:  Size  Location     Type
 18390 ;;                  1    wreg      void 
 18391 ;; Registers used:
 18392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18393 ;; Tracked objects:
 18394 ;;		On entry : 0/0
 18395 ;;		On exit  : 0/0
 18396 ;;		Unchanged: 0/0
 18397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18398 ;;      Params:         3       0       0       0       0       0       0
 18399 ;;      Locals:         0       2       0       0       0       0       0
 18400 ;;      Temps:          0       2       0       0       0       0       0
 18401 ;;      Totals:         3       4       0       0       0       0       0
 18402 ;;Total ram usage:        7 bytes
 18403 ;; Hardware stack levels used:    1
 18404 ;; Hardware stack levels required when called:    6
 18405 ;; This function calls:
 18406 ;;		_FLASH_IsWriteDone
 18407 ;;		_FLASH_WriteBlock
 18408 ;; This function is called by:
 18409 ;;		_AdcConvert
 18410 ;; This function uses a non-reentrant model
 18411 ;;
 18412                           
 18413                           	psect	text106
 18414  002298                     __ptext106:
 18415                           	opt stack 0
 18416  002298                     _FlashSampleWrite:
 18417                           	opt stack 23
 18418                           
 18419                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 18420                           
 18421                           ;incstack = 0
 18422  002298  502F               	movf	FlashSampleWrite@channelNum,w,c
 18423  00229A  0100               	movlb	0	; () banked
 18424  00229C  6F60               	movwf	??_FlashSampleWrite& (0+255),b
 18425  00229E  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
 18426  0022A0  0E0C               	movlw	12
 18427  0022A2                     u8665:
 18428  0022A2  90D8               	bcf	status,0,c
 18429  0022A4  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 18430  0022A6  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 18431  0022A8  2EE8               	decfsz	wreg,f,c
 18432  0022AA  D7FB               	goto	u8665
 18433  0022AC  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 18434  0022B0  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 18435                           
 18436                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 18437  0022B4  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 18438  0022B6  122D               	iorwf	FlashSampleWrite@sampleData,f,c
 18439  0022B8  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 18440  0022BA  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
 18441                           
 18442                           ; BSR set to: 0
 18443                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 18444  0022BC  90D8               	bcf	status,0,c
 18445  0022BE  0101               	movlb	1	; () banked
 18446  0022C0  3536               	rlcf	_sampleCount& (0+255),w,b
 18447  0022C2  6ED9               	movwf	fsr2l,c
 18448  0022C4  3537               	rlcf	(_sampleCount+1)& (0+255),w,b
 18449  0022C6  6EDA               	movwf	fsr2h,c
 18450  0022C8  0E3C               	movlw	low _sampleArray
 18451  0022CA  26D9               	addwf	fsr2l,f,c
 18452  0022CC  0E01               	movlw	high _sampleArray
 18453  0022CE  22DA               	addwfc	fsr2h,f,c
 18454  0022D0  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 18455  0022D4  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 18456                           
 18457                           ; BSR set to: 1
 18458                           ;FlashApp.c: 35: sampleCount ++;
 18459  0022D8  4B36               	infsnz	_sampleCount& (0+255),f,b
 18460  0022DA  2B37               	incf	(_sampleCount+1)& (0+255),f,b
 18461                           
 18462                           ; BSR set to: 1
 18463                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 18464  0022DC  C136  F060         	movff	_sampleCount,??_FlashSampleWrite
 18465  0022E0  C137  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
 18466  0022E4  90D8               	bcf	status,0,c
 18467  0022E6  0100               	movlb	0	; () banked
 18468  0022E8  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 18469  0022EA  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 18470  0022EC  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 18471  0022EE  E104               	bnz	u8670
 18472  0022F0  0E40               	movlw	64
 18473  0022F2  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
 18474  0022F4  A0D8               	btfss	status,0,c
 18475  0022F6  0012               	return	
 18476  0022F8                     u8670:
 18477                           
 18478                           ; BSR set to: 0
 18479  0022F8  ECC1  F021         	call	_FLASH_IsWriteDone	;wreg free
 18480  0022FC  0900               	iorlw	0
 18481  0022FE  B4D8               	btfsc	status,2,c
 18482  002300  0012               	return	
 18483                           
 18484                           ;FlashApp.c: 38: {
 18485                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 18486  002302  C03E  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 18487  002306  C03F  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 18488  00230A  C040  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 18489  00230E  C041  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 18490  002312  0E3C               	movlw	low _sampleArray
 18491  002314  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 18492  002316  0E01               	movlw	high _sampleArray
 18493  002318  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 18494  00231A  ECA0  F016         	call	_FLASH_WriteBlock	;wreg free
 18495                           
 18496                           ;FlashApp.c: 40: writeAddress += (64);
 18497  00231E  0E40               	movlw	64
 18498  002320  263E               	addwf	_writeAddress,f,c
 18499  002322  0E00               	movlw	0
 18500  002324  223F               	addwfc	_writeAddress+1,f,c
 18501  002326  2240               	addwfc	_writeAddress+2,f,c
 18502  002328  2241               	addwfc	_writeAddress+3,f,c
 18503                           
 18504                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 18505  00232A  5041               	movf	_writeAddress+3,w,c
 18506  00232C  1040               	iorwf	_writeAddress+2,w,c
 18507  00232E  E106               	bnz	u8690
 18508  002330  0EF0               	movlw	240
 18509  002332  5C3E               	subwf	_writeAddress,w,c
 18510  002334  0E7F               	movlw	127
 18511  002336  583F               	subwfb	_writeAddress+1,w,c
 18512  002338  A0D8               	btfss	status,0,c
 18513  00233A  D01A               	goto	l319
 18514  00233C                     u8690:
 18515                           
 18516                           ;FlashApp.c: 42: {
 18517                           ;FlashApp.c: 43: writeAddress = 0x4580;
 18518  00233C  0E80               	movlw	128
 18519  00233E  6E3E               	movwf	_writeAddress,c
 18520  002340  0E45               	movlw	69
 18521  002342  6E3F               	movwf	_writeAddress+1,c
 18522  002344  0E00               	movlw	0
 18523  002346  6E40               	movwf	_writeAddress+2,c
 18524  002348  0E00               	movlw	0
 18525  00234A  6E41               	movwf	_writeAddress+3,c
 18526                           
 18527                           ;FlashApp.c: 44: isReWriteDone = 1;
 18528  00234C  0E01               	movlw	1
 18529  00234E  0101               	movlb	1	; () banked
 18530  002350  6F3A               	movwf	_isReWriteDone& (0+255),b
 18531                           
 18532                           ; BSR set to: 1
 18533                           ;FlashApp.c: 45: if (readAddress == 0x4580)
 18534  002352  0E80               	movlw	128
 18535  002354  19C8               	xorwf	_readAddress& (0+255),w,b
 18536  002356  E10C               	bnz	l318
 18537  002358  0E45               	movlw	69
 18538  00235A  19C9               	xorwf	(_readAddress+1)& (0+255),w,b
 18539  00235C  11CA               	iorwf	(_readAddress+2)& (0+255),w,b
 18540  00235E  11CB               	iorwf	(_readAddress+3)& (0+255),w,b
 18541  002360  A4D8               	btfss	status,2,c
 18542  002362  D006               	goto	l319
 18543                           
 18544                           ; BSR set to: 1
 18545                           ;FlashApp.c: 46: {
 18546                           ;FlashApp.c: 47: readAddress += (64);
 18547  002364  0E40               	movlw	64
 18548  002366  27C8               	addwf	_readAddress& (0+255),f,b
 18549  002368  0E00               	movlw	0
 18550  00236A  23C9               	addwfc	(_readAddress+1)& (0+255),f,b
 18551  00236C  23CA               	addwfc	(_readAddress+2)& (0+255),f,b
 18552  00236E  23CB               	addwfc	(_readAddress+3)& (0+255),f,b
 18553  002370                     l319:
 18554  002370                     l318:
 18555                           
 18556                           ;FlashApp.c: 48: }
 18557                           ;FlashApp.c: 49: }
 18558                           ;FlashApp.c: 52: if (numOfValidateSamples < ((0x4580-0x7FF0)/(64)))
 18559  002370  0E17               	movlw	23
 18560  002372  0101               	movlb	1	; () banked
 18561  002374  5D30               	subwf	_numOfValidateSamples& (0+255),w,b
 18562  002376  0EFF               	movlw	255
 18563  002378  5931               	subwfb	(_numOfValidateSamples+1)& (0+255),w,b
 18564  00237A  0EFF               	movlw	255
 18565  00237C  5932               	subwfb	(_numOfValidateSamples+2)& (0+255),w,b
 18566  00237E  0EFF               	movlw	255
 18567  002380  5933               	subwfb	(_numOfValidateSamples+3)& (0+255),w,b
 18568  002382  B0D8               	btfsc	status,0,c
 18569  002384  D006               	goto	l320
 18570                           
 18571                           ; BSR set to: 1
 18572                           ;FlashApp.c: 53: {
 18573                           ;FlashApp.c: 54: numOfValidateSamples++;
 18574  002386  0E01               	movlw	1
 18575  002388  2730               	addwf	_numOfValidateSamples& (0+255),f,b
 18576  00238A  0E00               	movlw	0
 18577  00238C  2331               	addwfc	(_numOfValidateSamples+1)& (0+255),f,b
 18578  00238E  2332               	addwfc	(_numOfValidateSamples+2)& (0+255),f,b
 18579  002390  2333               	addwfc	(_numOfValidateSamples+3)& (0+255),f,b
 18580  002392                     l320:
 18581                           
 18582                           ; BSR set to: 1
 18583                           ;FlashApp.c: 55: }
 18584                           ;FlashApp.c: 56: sampleCount = 0;
 18585                           
 18586                           ; BSR set to: 1
 18587  002392  0E00               	movlw	0
 18588  002394  6F37               	movwf	(_sampleCount+1)& (0+255),b
 18589  002396  0E00               	movlw	0
 18590  002398  6F36               	movwf	_sampleCount& (0+255),b
 18591  00239A  0012               	return	
 18592  00239C                     __end_of_FlashSampleWrite:
 18593                           	opt stack 0
 18594                           tosu	equ	0xFFF
 18595                           tosh	equ	0xFFE
 18596                           tosl	equ	0xFFD
 18597                           pclath	equ	0xFFA
 18598                           tblptru	equ	0xFF8
 18599                           tblptrh	equ	0xFF7
 18600                           tblptrl	equ	0xFF6
 18601                           tablat	equ	0xFF5
 18602                           prodh	equ	0xFF4
 18603                           prodl	equ	0xFF3
 18604                           intcon	equ	0xFF2
 18605                           intcon2	equ	0xFF1
 18606                           postinc0	equ	0xFEE
 18607                           plusw0	equ	0xFEB
 18608                           wreg	equ	0xFE8
 18609                           indf1	equ	0xFE7
 18610                           postdec1	equ	0xFE5
 18611                           fsr1h	equ	0xFE2
 18612                           fsr1l	equ	0xFE1
 18613                           indf2	equ	0xFDF
 18614                           postinc2	equ	0xFDE
 18615                           postdec2	equ	0xFDD
 18616                           plusw2	equ	0xFDB
 18617                           fsr2h	equ	0xFDA
 18618                           fsr2l	equ	0xFD9
 18619                           status	equ	0xFD8
 18620                           
 18621 ;; *************** function _FLASH_WriteBlock *****************
 18622 ;; Defined at:
 18623 ;;		line 93 in file "mcc_generated_files/memory.c"
 18624 ;; Parameters:    Size  Location     Type
 18625 ;;  writeAddr       4   28[COMRAM] unsigned long 
 18626 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 18627 ;;		 -> sampleArray(64), 
 18628 ;; Auto vars:     Size  Location     Type
 18629 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 18630 ;;  i               1   43[COMRAM] unsigned char 
 18631 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 18632 ;; Return value:  Size  Location     Type
 18633 ;;                  1    wreg      char 
 18634 ;; Registers used:
 18635 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18636 ;; Tracked objects:
 18637 ;;		On entry : 0/0
 18638 ;;		On exit  : 0/0
 18639 ;;		Unchanged: 0/0
 18640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18641 ;;      Params:         6       0       0       0       0       0       0
 18642 ;;      Locals:         6       0       0       0       0       0       0
 18643 ;;      Temps:          4       0       0       0       0       0       0
 18644 ;;      Totals:        16       0       0       0       0       0       0
 18645 ;;Total ram usage:       16 bytes
 18646 ;; Hardware stack levels used:    1
 18647 ;; Hardware stack levels required when called:    5
 18648 ;; This function calls:
 18649 ;;		_FLASH_EraseBlock
 18650 ;; This function is called by:
 18651 ;;		_FlashSampleWrite
 18652 ;;		_FLASH_WriteByte
 18653 ;; This function uses a non-reentrant model
 18654 ;;
 18655                           
 18656                           	psect	text107
 18657  002D40                     __ptext107:
 18658                           	opt stack 0
 18659  002D40                     _FLASH_WriteBlock:
 18660                           	opt stack 23
 18661                           
 18662                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 18663                           
 18664                           ;incstack = 0
 18665  002D40  0EC0               	movlw	192
 18666  002D42  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 18667  002D44  0E7F               	movlw	127
 18668  002D46  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 18669  002D48  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 18670  002D4C  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 18671  002D50  5023               	movf	??_FLASH_WriteBlock,w,c
 18672  002D52  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 18673  002D54  5024               	movf	??_FLASH_WriteBlock+1,w,c
 18674  002D56  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 18675  002D58  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 18676  002D5C  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 18677  002D60  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 18678  002D62  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 18679                           
 18680                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 18681  002D64  0E00               	movlw	0
 18682  002D66  BEF2               	btfsc	intcon,7,c	;volatile
 18683  002D68  0E01               	movlw	1
 18684  002D6A  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 18685                           
 18686                           ;memory.c: 97: uint8_t i;
 18687                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 18688  002D6C  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 18689  002D6E  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 18690  002D70  E144               	bnz	l1045
 18691  002D72  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 18692  002D74  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 18693  002D76  E141               	bnz	l1045
 18694  002D78  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 18695  002D7A  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 18696  002D7C  E13E               	bnz	l1045
 18697  002D7E  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 18698  002D80  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 18699  002D82  A4D8               	btfss	status,2,c
 18700  002D84  0012               	return	
 18701                           
 18702                           ;memory.c: 103: }
 18703                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 18704                           
 18705                           ;memory.c: 101: {
 18706                           ;memory.c: 102: return -1;
 18707                           ;	Return value of _FLASH_WriteBlock is never used
 18708  002D86  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 18709  002D8A  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 18710  002D8E  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 18711  002D92  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 18712  002D96  ECB8  F01F         	call	_FLASH_EraseBlock	;wreg free
 18713                           
 18714                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 18715  002D9A  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 18716                           
 18717                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 18718  002D9E  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 18719                           
 18720                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 18721  002DA2  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 18722                           
 18723                           ;memory.c: 114: for (i=0; i<(64); i++)
 18724  002DA6  0E00               	movlw	0
 18725  002DA8  6E2C               	movwf	FLASH_WriteBlock@i,c
 18726  002DAA                     l8221:
 18727  002DAA  0E3F               	movlw	63
 18728  002DAC  642C               	cpfsgt	FLASH_WriteBlock@i,c
 18729  002DAE  D001               	goto	l1046
 18730  002DB0  D013               	goto	u8280
 18731  002DB2                     l1046:
 18732                           
 18733                           ;memory.c: 115: {
 18734                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 18735  002DB2  502C               	movf	FLASH_WriteBlock@i,w,c
 18736  002DB4  0D01               	mullw	1
 18737  002DB6  50F3               	movf	prodl,w,c
 18738  002DB8  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 18739  002DBA  6ED9               	movwf	fsr2l,c
 18740  002DBC  50F4               	movf	prodh,w,c
 18741  002DBE  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 18742  002DC0  6EDA               	movwf	fsr2h,c
 18743  002DC2  50DF               	movf	indf2,w,c
 18744  002DC4  6EF5               	movwf	tablat,c	;volatile
 18745                           
 18746                           ;memory.c: 118: if (i == ((64)-1))
 18747  002DC6  0E3F               	movlw	63
 18748  002DC8  182C               	xorwf	FLASH_WriteBlock@i,w,c
 18749  002DCA  A4D8               	btfss	status,2,c
 18750  002DCC  D002               	goto	l1048
 18751  002DCE  000C               	tblwt		*	;# 
 18752                           
 18753                           ;memory.c: 121: }
 18754  002DD0  D001               	goto	l1049
 18755  002DD2                     l1048:
 18756  002DD2  000D               	tblwt		*+	;# 
 18757  002DD4                     l1049:
 18758  002DD4  2A2C               	incf	FLASH_WriteBlock@i,f,c
 18759  002DD6  D7E9               	goto	l8221
 18760  002DD8                     u8280:
 18761                           
 18762                           ;memory.c: 125: }
 18763                           ;memory.c: 126: }
 18764                           ;memory.c: 128: PIR2bits.EEIF = 1;
 18765  002DD8  88A1               	bsf	4001,4,c	;volatile
 18766                           
 18767                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 18768  002DDA  8EA6               	bsf	4006,7,c	;volsfr
 18769                           
 18770                           ;memory.c: 130: EECON1bits.CFGS = 0;
 18771  002DDC  9CA6               	bcf	4006,6,c	;volsfr
 18772                           
 18773                           ;memory.c: 131: EECON1bits.WREN = 1;
 18774  002DDE  84A6               	bsf	4006,2,c	;volsfr
 18775                           
 18776                           ;memory.c: 132: INTCONbits.GIE = 0;
 18777  002DE0  9EF2               	bcf	intcon,7,c	;volatile
 18778                           
 18779                           ;memory.c: 133: EECON2 = 0x55;
 18780  002DE2  0E55               	movlw	85
 18781  002DE4  6EA7               	movwf	4007,c	;volsfr
 18782                           
 18783                           ;memory.c: 134: EECON2 = 0xAA;
 18784  002DE6  0EAA               	movlw	170
 18785  002DE8  6EA7               	movwf	4007,c	;volsfr
 18786                           
 18787                           ;memory.c: 135: EECON1bits.WR = 1;
 18788  002DEA  82A6               	bsf	4006,1,c	;volsfr
 18789                           
 18790                           ;memory.c: 137: EECON1bits.WREN = 0;
 18791  002DEC  94A6               	bcf	4006,2,c	;volsfr
 18792                           
 18793                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 18794  002DEE  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 18795  002DF0  D002               	bra	u8295
 18796  002DF2  9EF2               	bcf	intcon,7,c	;volatile
 18797  002DF4  D001               	bra	u8296
 18798  002DF6                     u8295:
 18799  002DF6  8EF2               	bsf	intcon,7,c	;volatile
 18800  002DF8                     u8296:
 18801  002DF8  0012               	return	
 18802  002DFA                     l1045:
 18803  002DFA  0012               	return		;funcret
 18804  002DFC                     __end_of_FLASH_WriteBlock:
 18805                           	opt stack 0
 18806                           tosu	equ	0xFFF
 18807                           tosh	equ	0xFFE
 18808                           tosl	equ	0xFFD
 18809                           pclath	equ	0xFFA
 18810                           tblptru	equ	0xFF8
 18811                           tblptrh	equ	0xFF7
 18812                           tblptrl	equ	0xFF6
 18813                           tablat	equ	0xFF5
 18814                           prodh	equ	0xFF4
 18815                           prodl	equ	0xFF3
 18816                           intcon	equ	0xFF2
 18817                           intcon2	equ	0xFF1
 18818                           postinc0	equ	0xFEE
 18819                           plusw0	equ	0xFEB
 18820                           wreg	equ	0xFE8
 18821                           indf1	equ	0xFE7
 18822                           postdec1	equ	0xFE5
 18823                           fsr1h	equ	0xFE2
 18824                           fsr1l	equ	0xFE1
 18825                           indf2	equ	0xFDF
 18826                           postinc2	equ	0xFDE
 18827                           postdec2	equ	0xFDD
 18828                           plusw2	equ	0xFDB
 18829                           fsr2h	equ	0xFDA
 18830                           fsr2l	equ	0xFD9
 18831                           status	equ	0xFD8
 18832                           
 18833 ;; *************** function _FLASH_EraseBlock *****************
 18834 ;; Defined at:
 18835 ;;		line 144 in file "mcc_generated_files/memory.c"
 18836 ;; Parameters:    Size  Location     Type
 18837 ;;  baseAddr        4   23[COMRAM] unsigned long 
 18838 ;; Auto vars:     Size  Location     Type
 18839 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 18840 ;; Return value:  Size  Location     Type
 18841 ;;                  1    wreg      void 
 18842 ;; Registers used:
 18843 ;;		wreg, status,2
 18844 ;; Tracked objects:
 18845 ;;		On entry : 0/0
 18846 ;;		On exit  : 0/0
 18847 ;;		Unchanged: 0/0
 18848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18849 ;;      Params:         4       0       0       0       0       0       0
 18850 ;;      Locals:         1       0       0       0       0       0       0
 18851 ;;      Temps:          0       0       0       0       0       0       0
 18852 ;;      Totals:         5       0       0       0       0       0       0
 18853 ;;Total ram usage:        5 bytes
 18854 ;; Hardware stack levels used:    1
 18855 ;; Hardware stack levels required when called:    4
 18856 ;; This function calls:
 18857 ;;		Nothing
 18858 ;; This function is called by:
 18859 ;;		_FLASH_WriteBlock
 18860 ;; This function uses a non-reentrant model
 18861 ;;
 18862                           
 18863                           	psect	text108
 18864  003F70                     __ptext108:
 18865                           	opt stack 0
 18866  003F70                     _FLASH_EraseBlock:
 18867                           	opt stack 23
 18868                           
 18869                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 18870                           
 18871                           ;incstack = 0
 18872  003F70  0E00               	movlw	0
 18873  003F72  BEF2               	btfsc	intcon,7,c	;volatile
 18874  003F74  0E01               	movlw	1
 18875  003F76  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 18876                           
 18877                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 18878  003F78  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 18879                           
 18880                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 18881  003F7C  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 18882                           
 18883                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 18884  003F80  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 18885                           
 18886                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 18887  003F84  8EA6               	bsf	4006,7,c	;volsfr
 18888                           
 18889                           ;memory.c: 153: EECON1bits.CFGS = 0;
 18890  003F86  9CA6               	bcf	4006,6,c	;volsfr
 18891                           
 18892                           ;memory.c: 154: EECON1bits.WREN = 1;
 18893  003F88  84A6               	bsf	4006,2,c	;volsfr
 18894                           
 18895                           ;memory.c: 155: EECON1bits.FREE = 1;
 18896  003F8A  88A6               	bsf	4006,4,c	;volsfr
 18897                           
 18898                           ;memory.c: 156: INTCONbits.GIE = 0;
 18899  003F8C  9EF2               	bcf	intcon,7,c	;volatile
 18900                           
 18901                           ;memory.c: 157: EECON2 = 0x55;
 18902  003F8E  0E55               	movlw	85
 18903  003F90  6EA7               	movwf	4007,c	;volsfr
 18904                           
 18905                           ;memory.c: 158: EECON2 = 0xAA;
 18906  003F92  0EAA               	movlw	170
 18907  003F94  6EA7               	movwf	4007,c	;volsfr
 18908                           
 18909                           ;memory.c: 159: EECON1bits.WR = 1;
 18910  003F96  82A6               	bsf	4006,1,c	;volsfr
 18911                           
 18912                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 18913  003F98  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 18914  003F9A  D002               	bra	u8155
 18915  003F9C  9EF2               	bcf	intcon,7,c	;volatile
 18916  003F9E  D001               	bra	u8156
 18917  003FA0                     u8155:
 18918  003FA0  8EF2               	bsf	intcon,7,c	;volatile
 18919  003FA2                     u8156:
 18920  003FA2  0012               	return		;funcret
 18921  003FA4                     __end_of_FLASH_EraseBlock:
 18922                           	opt stack 0
 18923                           tosu	equ	0xFFF
 18924                           tosh	equ	0xFFE
 18925                           tosl	equ	0xFFD
 18926                           pclath	equ	0xFFA
 18927                           tblptru	equ	0xFF8
 18928                           tblptrh	equ	0xFF7
 18929                           tblptrl	equ	0xFF6
 18930                           tablat	equ	0xFF5
 18931                           prodh	equ	0xFF4
 18932                           prodl	equ	0xFF3
 18933                           intcon	equ	0xFF2
 18934                           intcon2	equ	0xFF1
 18935                           postinc0	equ	0xFEE
 18936                           plusw0	equ	0xFEB
 18937                           wreg	equ	0xFE8
 18938                           indf1	equ	0xFE7
 18939                           postdec1	equ	0xFE5
 18940                           fsr1h	equ	0xFE2
 18941                           fsr1l	equ	0xFE1
 18942                           indf2	equ	0xFDF
 18943                           postinc2	equ	0xFDE
 18944                           postdec2	equ	0xFDD
 18945                           plusw2	equ	0xFDB
 18946                           fsr2h	equ	0xFDA
 18947                           fsr2l	equ	0xFD9
 18948                           status	equ	0xFD8
 18949                           
 18950 ;; *************** function _FLASH_IsWriteDone *****************
 18951 ;; Defined at:
 18952 ;;		line 189 in file "mcc_generated_files/memory.c"
 18953 ;; Parameters:    Size  Location     Type
 18954 ;;		None
 18955 ;; Auto vars:     Size  Location     Type
 18956 ;;		None
 18957 ;; Return value:  Size  Location     Type
 18958 ;;                  1    wreg      unsigned char 
 18959 ;; Registers used:
 18960 ;;		wreg
 18961 ;; Tracked objects:
 18962 ;;		On entry : 0/0
 18963 ;;		On exit  : 0/0
 18964 ;;		Unchanged: 0/0
 18965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18966 ;;      Params:         0       0       0       0       0       0       0
 18967 ;;      Locals:         0       0       0       0       0       0       0
 18968 ;;      Temps:          0       0       0       0       0       0       0
 18969 ;;      Totals:         0       0       0       0       0       0       0
 18970 ;;Total ram usage:        0 bytes
 18971 ;; Hardware stack levels used:    1
 18972 ;; Hardware stack levels required when called:    4
 18973 ;; This function calls:
 18974 ;;		Nothing
 18975 ;; This function is called by:
 18976 ;;		_FlashSampleWrite
 18977 ;;		_FlashReadUart
 18978 ;; This function uses a non-reentrant model
 18979 ;;
 18980                           
 18981                           	psect	text109
 18982  004382                     __ptext109:
 18983                           	opt stack 0
 18984  004382                     _FLASH_IsWriteDone:
 18985                           	opt stack 23
 18986                           
 18987                           ;memory.c: 191: return (EECON1bits.WR == 0);
 18988                           
 18989                           ;incstack = 0
 18990  004382  A2A6               	btfss	4006,1,c	;volsfr
 18991  004384  D001               	goto	u7941
 18992  004386  D002               	goto	u7940
 18993  004388                     u7941:
 18994  004388  0E01               	movlw	1
 18995  00438A  0012               	return	
 18996  00438C                     u7940:
 18997  00438C  0E00               	movlw	0
 18998  00438E  0012               	return	
 18999  004390                     __end_of_FLASH_IsWriteDone:
 19000                           	opt stack 0
 19001                           tosu	equ	0xFFF
 19002                           tosh	equ	0xFFE
 19003                           tosl	equ	0xFFD
 19004                           pclath	equ	0xFFA
 19005                           tblptru	equ	0xFF8
 19006                           tblptrh	equ	0xFF7
 19007                           tblptrl	equ	0xFF6
 19008                           tablat	equ	0xFF5
 19009                           prodh	equ	0xFF4
 19010                           prodl	equ	0xFF3
 19011                           intcon	equ	0xFF2
 19012                           intcon2	equ	0xFF1
 19013                           postinc0	equ	0xFEE
 19014                           plusw0	equ	0xFEB
 19015                           wreg	equ	0xFE8
 19016                           indf1	equ	0xFE7
 19017                           postdec1	equ	0xFE5
 19018                           fsr1h	equ	0xFE2
 19019                           fsr1l	equ	0xFE1
 19020                           indf2	equ	0xFDF
 19021                           postinc2	equ	0xFDE
 19022                           postdec2	equ	0xFDD
 19023                           plusw2	equ	0xFDB
 19024                           fsr2h	equ	0xFDA
 19025                           fsr2l	equ	0xFD9
 19026                           status	equ	0xFD8
 19027                           
 19028 ;; *************** function _ADC_GetConversion *****************
 19029 ;; Defined at:
 19030 ;;		line 106 in file "mcc_generated_files/adc.c"
 19031 ;; Parameters:    Size  Location     Type
 19032 ;;  channel         1    wreg     enum E6975
 19033 ;; Auto vars:     Size  Location     Type
 19034 ;;  channel         1   27[COMRAM] enum E6975
 19035 ;; Return value:  Size  Location     Type
 19036 ;;                  2   23[COMRAM] unsigned int 
 19037 ;; Registers used:
 19038 ;;		wreg, status,2, status,0
 19039 ;; Tracked objects:
 19040 ;;		On entry : 0/0
 19041 ;;		On exit  : 0/0
 19042 ;;		Unchanged: 0/0
 19043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19044 ;;      Params:         2       0       0       0       0       0       0
 19045 ;;      Locals:         1       0       0       0       0       0       0
 19046 ;;      Temps:          2       0       0       0       0       0       0
 19047 ;;      Totals:         5       0       0       0       0       0       0
 19048 ;;Total ram usage:        5 bytes
 19049 ;; Hardware stack levels used:    1
 19050 ;; Hardware stack levels required when called:    4
 19051 ;; This function calls:
 19052 ;;		Nothing
 19053 ;; This function is called by:
 19054 ;;		_AdcConvert
 19055 ;; This function uses a non-reentrant model
 19056 ;;
 19057                           
 19058                           	psect	text110
 19059  004004                     __ptext110:
 19060                           	opt stack 0
 19061  004004                     _ADC_GetConversion:
 19062                           	opt stack 25
 19063                           
 19064                           ;incstack = 0
 19065                           ;ADC_GetConversion@channel stored from wreg
 19066  004004  6E1C               	movwf	ADC_GetConversion@channel,c
 19067                           
 19068                           ;adc.c: 109: ADCON0bits.CHS = channel;
 19069  004006  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 19070  00400A  461A               	rlncf	??_ADC_GetConversion,f,c
 19071  00400C  461A               	rlncf	??_ADC_GetConversion,f,c
 19072  00400E  50C2               	movf	4034,w,c	;volatile
 19073  004010  181A               	xorwf	??_ADC_GetConversion,w,c
 19074  004012  0B83               	andlw	-125
 19075  004014  181A               	xorwf	??_ADC_GetConversion,w,c
 19076  004016  6EC2               	movwf	4034,c	;volatile
 19077                           
 19078                           ;adc.c: 112: ADCON0bits.ADON = 1;
 19079  004018  80C2               	bsf	4034,0,c	;volatile
 19080                           
 19081                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 19082  00401A  82C2               	bsf	4034,1,c	;volatile
 19083  00401C                     
 19084                           ;adc.c: 119: {
 19085  00401C  B2C2               	btfsc	4034,1,c	;volatile
 19086  00401E  D7FE               	goto	l1162
 19087                           
 19088                           ;adc.c: 120: }
 19089                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 19090  004020  50C4               	movf	4036,w,c	;volatile
 19091  004022  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 19092  004024  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 19093  004026  50C3               	movf	4035,w,c	;volatile
 19094  004028  241A               	addwf	??_ADC_GetConversion,w,c
 19095  00402A  6E18               	movwf	?_ADC_GetConversion,c
 19096  00402C  0E00               	movlw	0
 19097  00402E  201B               	addwfc	??_ADC_GetConversion+1,w,c
 19098  004030  6E19               	movwf	?_ADC_GetConversion+1,c
 19099  004032  0012               	return	
 19100  004034                     __end_of_ADC_GetConversion:
 19101                           	opt stack 0
 19102                           tosu	equ	0xFFF
 19103                           tosh	equ	0xFFE
 19104                           tosl	equ	0xFFD
 19105                           pclath	equ	0xFFA
 19106                           tblptru	equ	0xFF8
 19107                           tblptrh	equ	0xFF7
 19108                           tblptrl	equ	0xFF6
 19109                           tablat	equ	0xFF5
 19110                           prodh	equ	0xFF4
 19111                           prodl	equ	0xFF3
 19112                           intcon	equ	0xFF2
 19113                           intcon2	equ	0xFF1
 19114                           postinc0	equ	0xFEE
 19115                           plusw0	equ	0xFEB
 19116                           wreg	equ	0xFE8
 19117                           indf1	equ	0xFE7
 19118                           postdec1	equ	0xFE5
 19119                           fsr1h	equ	0xFE2
 19120                           fsr1l	equ	0xFE1
 19121                           indf2	equ	0xFDF
 19122                           postinc2	equ	0xFDE
 19123                           postdec2	equ	0xFDD
 19124                           plusw2	equ	0xFDB
 19125                           fsr2h	equ	0xFDA
 19126                           fsr2l	equ	0xFD9
 19127                           status	equ	0xFD8
 19128                           
 19129 ;; *************** function _INTERRUPT_InterruptManager *****************
 19130 ;; Defined at:
 19131 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 19132 ;; Parameters:    Size  Location     Type
 19133 ;;		None
 19134 ;; Auto vars:     Size  Location     Type
 19135 ;;		None
 19136 ;; Return value:  Size  Location     Type
 19137 ;;                  1    wreg      void 
 19138 ;; Registers used:
 19139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 19140 ;; Tracked objects:
 19141 ;;		On entry : 0/0
 19142 ;;		On exit  : 0/0
 19143 ;;		Unchanged: 0/0
 19144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19145 ;;      Params:         0       0       0       0       0       0       0
 19146 ;;      Locals:         0       0       0       0       0       0       0
 19147 ;;      Temps:         18       0       0       0       0       0       0
 19148 ;;      Totals:        18       0       0       0       0       0       0
 19149 ;;Total ram usage:       18 bytes
 19150 ;; Hardware stack levels used:    1
 19151 ;; Hardware stack levels required when called:    3
 19152 ;; This function calls:
 19153 ;;		_EUSART1_Receive_ISR
 19154 ;;		_EUSART1_Transmit_ISR
 19155 ;;		_MEMORY_ISR
 19156 ;;		_PIN_MANAGER_IOC
 19157 ;;		_TMR0_ISR
 19158 ;; This function is called by:
 19159 ;;		Interrupt level 2
 19160 ;; This function uses a non-reentrant model
 19161 ;;
 19162                           
 19163                           	psect	intcode
 19164  000008                     __pintcode:
 19165                           	opt stack 0
 19166  000008                     _INTERRUPT_InterruptManager:
 19167                           	opt stack 17
 19168                           
 19169                           ;incstack = 0
 19170  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19171  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 19172  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 19173  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 19174  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 19175  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 19176  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 19177  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 19178  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 19179  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 19180  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 19181  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 19182  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 19183  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 19184  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 19185  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 19186  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 19187  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 19188  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 19189                           
 19190                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 19191  000052  B6F2               	btfsc	intcon,3,c	;volatile
 19192  000054  A0F2               	btfss	intcon,0,c	;volatile
 19193  000056  D003               	goto	i2l843
 19194                           
 19195                           ;interrupt_manager.c: 61: {
 19196                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 19197  000058  ECA4  F021         	call	_PIN_MANAGER_IOC	;wreg free
 19198                           
 19199                           ;interrupt_manager.c: 63: }
 19200  00005C  D019               	goto	i2l852
 19201  00005E                     i2l843:
 19202                           
 19203                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 19204  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 19205  000060  A4F2               	btfss	intcon,2,c	;volatile
 19206  000062  D003               	goto	i2l845
 19207                           
 19208                           ;interrupt_manager.c: 65: {
 19209                           ;interrupt_manager.c: 66: TMR0_ISR();
 19210  000064  ECAC  F017         	call	_TMR0_ISR	;wreg free
 19211                           
 19212                           ;interrupt_manager.c: 67: }
 19213  000068  D013               	goto	i2l852
 19214  00006A                     i2l845:
 19215                           
 19216                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 19217  00006A  ACF2               	btfss	intcon,6,c	;volatile
 19218  00006C  D011               	goto	i2l852
 19219                           
 19220                           ;interrupt_manager.c: 69: {
 19221                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 19222  00006E  B8A0               	btfsc	4000,4,c	;volatile
 19223  000070  A8A1               	btfss	4001,4,c	;volatile
 19224  000072  D003               	goto	i2l848
 19225                           
 19226                           ;interrupt_manager.c: 71: {
 19227                           ;interrupt_manager.c: 72: MEMORY_ISR();
 19228  000074  ECF8  F021         	call	_MEMORY_ISR	;wreg free
 19229                           
 19230                           ;interrupt_manager.c: 73: }
 19231  000078  D00B               	goto	i2l852
 19232  00007A                     i2l848:
 19233                           
 19234                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 19235  00007A  B89D               	btfsc	3997,4,c	;volatile
 19236  00007C  A89E               	btfss	3998,4,c	;volatile
 19237  00007E  D003               	goto	i2l850
 19238                           
 19239                           ;interrupt_manager.c: 75: {
 19240                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 19241  000080  EC32  F01F         	call	_EUSART1_Transmit_ISR	;wreg free
 19242                           
 19243                           ;interrupt_manager.c: 77: }
 19244  000084  D005               	goto	i2l852
 19245  000086                     i2l850:
 19246                           
 19247                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 19248  000086  BA9D               	btfsc	3997,5,c	;volatile
 19249  000088  AA9E               	btfss	3998,5,c	;volatile
 19250  00008A  D002               	goto	i2l852
 19251                           
 19252                           ;interrupt_manager.c: 79: {
 19253                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 19254  00008C  EC1A  F020         	call	_EUSART1_Receive_ISR	;wreg free
 19255  000090                     i2l852:
 19256                           
 19257                           ;interrupt_manager.c: 87: else
 19258                           ;interrupt_manager.c: 88: {
 19259                           
 19260                           ;interrupt_manager.c: 85: }
 19261                           ;interrupt_manager.c: 86: }
 19262                           
 19263                           ;interrupt_manager.c: 82: else
 19264                           ;interrupt_manager.c: 83: {
 19265  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 19266  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 19267  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 19268  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 19269  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 19270  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 19271  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 19272  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 19273  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 19274  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 19275  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 19276  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 19277  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 19278  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 19279  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 19280  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 19281  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 19282  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 19283  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19284  0000DA  0011               	retfie		f
 19285  0000DC                     __end_of_INTERRUPT_InterruptManager:
 19286                           	opt stack 0
 19287                           tosu	equ	0xFFF
 19288                           tosh	equ	0xFFE
 19289                           tosl	equ	0xFFD
 19290                           pclatu	equ	0xFFB
 19291                           pclath	equ	0xFFA
 19292                           tblptru	equ	0xFF8
 19293                           tblptrh	equ	0xFF7
 19294                           tblptrl	equ	0xFF6
 19295                           tablat	equ	0xFF5
 19296                           prodh	equ	0xFF4
 19297                           prodl	equ	0xFF3
 19298                           intcon	equ	0xFF2
 19299                           intcon2	equ	0xFF1
 19300                           postinc0	equ	0xFEE
 19301                           plusw0	equ	0xFEB
 19302                           fsr0h	equ	0xFEA
 19303                           fsr0l	equ	0xFE9
 19304                           wreg	equ	0xFE8
 19305                           indf1	equ	0xFE7
 19306                           postdec1	equ	0xFE5
 19307                           fsr1h	equ	0xFE2
 19308                           fsr1l	equ	0xFE1
 19309                           indf2	equ	0xFDF
 19310                           postinc2	equ	0xFDE
 19311                           postdec2	equ	0xFDD
 19312                           plusw2	equ	0xFDB
 19313                           fsr2h	equ	0xFDA
 19314                           fsr2l	equ	0xFD9
 19315                           status	equ	0xFD8
 19316                           
 19317 ;; *************** function _TMR0_ISR *****************
 19318 ;; Defined at:
 19319 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 19320 ;; Parameters:    Size  Location     Type
 19321 ;;		None
 19322 ;; Auto vars:     Size  Location     Type
 19323 ;;		None
 19324 ;; Return value:  Size  Location     Type
 19325 ;;                  1    wreg      void 
 19326 ;; Registers used:
 19327 ;;		wreg, status,2, status,0, cstack
 19328 ;; Tracked objects:
 19329 ;;		On entry : 0/0
 19330 ;;		On exit  : 0/0
 19331 ;;		Unchanged: 0/0
 19332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19333 ;;      Params:         0       0       0       0       0       0       0
 19334 ;;      Locals:         0       0       0       0       0       0       0
 19335 ;;      Temps:          0       0       0       0       0       0       0
 19336 ;;      Totals:         0       0       0       0       0       0       0
 19337 ;;Total ram usage:        0 bytes
 19338 ;; Hardware stack levels used:    1
 19339 ;; Hardware stack levels required when called:    1
 19340 ;; This function calls:
 19341 ;;		___lwmod
 19342 ;; This function is called by:
 19343 ;;		_INTERRUPT_InterruptManager
 19344 ;; This function uses a non-reentrant model
 19345 ;;
 19346                           
 19347                           	psect	text112
 19348  002F58                     __ptext112:
 19349                           	opt stack 0
 19350  002F58                     _TMR0_ISR:
 19351                           	opt stack 18
 19352                           
 19353                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 19354                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 19355                           
 19356                           ;incstack = 0
 19357  002F58  94F2               	bcf	intcon,2,c	;volatile
 19358                           
 19359                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 19360  002F5A  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 19361  002F5C  6ED7               	movwf	4055,c	;volatile
 19362                           
 19363                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 19364  002F5E  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 19365                           
 19366                           ;tmr0.c: 144: CountCallBack++;
 19367  002F62  4A31               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 19368  002F64  2A32               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 19369                           
 19370                           ;tmr0.c: 145: if ((CountCallBack % 250) == 0)
 19371  002F66  C031  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19372  002F6A  C032  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19373  002F6E  0E00               	movlw	0
 19374  002F70  6E04               	movwf	___lwmod@divisor+1,c
 19375  002F72  0EFA               	movlw	250
 19376  002F74  6E03               	movwf	___lwmod@divisor,c
 19377  002F76  EC28  F01E         	call	___lwmod	;wreg free
 19378  002F7A  5001               	movf	?___lwmod,w,c
 19379  002F7C  1002               	iorwf	?___lwmod+1,w,c
 19380  002F7E  A4D8               	btfss	status,2,c
 19381  002F80  D003               	goto	i2l1116
 19382                           
 19383                           ;tmr0.c: 146: {
 19384                           ;tmr0.c: 147: Timer0_SynthLd = 1;
 19385  002F82  0E01               	movlw	1
 19386  002F84  0100               	movlb	0	; () banked
 19387  002F86  6FFA               	movwf	_Timer0_SynthLd& (0+255),b	;volatile
 19388  002F88                     i2l1116:
 19389                           
 19390                           ;tmr0.c: 148: }
 19391                           ;tmr0.c: 149: if ((CountCallBack % 800) == 0)
 19392                           
 19393                           ; BSR set to: 0
 19394  002F88  C031  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19395  002F8C  C032  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19396  002F90  0E03               	movlw	3
 19397  002F92  6E04               	movwf	___lwmod@divisor+1,c
 19398  002F94  0E20               	movlw	32
 19399  002F96  6E03               	movwf	___lwmod@divisor,c
 19400  002F98  EC28  F01E         	call	___lwmod	;wreg free
 19401  002F9C  5001               	movf	?___lwmod,w,c
 19402  002F9E  1002               	iorwf	?___lwmod+1,w,c
 19403  002FA0  A4D8               	btfss	status,2,c
 19404  002FA2  D003               	goto	i2l1117
 19405                           
 19406                           ;tmr0.c: 150: {
 19407                           ;tmr0.c: 151: Timer0_Sampling = 1;
 19408  002FA4  0E01               	movlw	1
 19409  002FA6  0100               	movlb	0	; () banked
 19410  002FA8  6FF9               	movwf	_Timer0_Sampling& (0+255),b	;volatile
 19411  002FAA                     i2l1117:
 19412                           
 19413                           ;tmr0.c: 152: }
 19414                           ;tmr0.c: 153: if ((CountCallBack % 350) == 0)
 19415                           
 19416                           ; BSR set to: 0
 19417  002FAA  C031  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19418  002FAE  C032  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19419  002FB2  0E01               	movlw	1
 19420  002FB4  6E04               	movwf	___lwmod@divisor+1,c
 19421  002FB6  0E5E               	movlw	94
 19422  002FB8  6E03               	movwf	___lwmod@divisor,c
 19423  002FBA  EC28  F01E         	call	___lwmod	;wreg free
 19424  002FBE  5001               	movf	?___lwmod,w,c
 19425  002FC0  1002               	iorwf	?___lwmod+1,w,c
 19426  002FC2  A4D8               	btfss	status,2,c
 19427  002FC4  D003               	goto	i2l1118
 19428                           
 19429                           ;tmr0.c: 154: {
 19430                           ;tmr0.c: 155: Timer0_KeepAlive = 1;
 19431  002FC6  0E01               	movlw	1
 19432  002FC8  0100               	movlb	0	; () banked
 19433  002FCA  6FF8               	movwf	_Timer0_KeepAlive& (0+255),b	;volatile
 19434  002FCC                     i2l1118:
 19435                           
 19436                           ;tmr0.c: 156: }
 19437                           ;tmr0.c: 157: if ((CountCallBack % 10) == 0)
 19438                           
 19439                           ; BSR set to: 0
 19440  002FCC  C031  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19441  002FD0  C032  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19442  002FD4  0E00               	movlw	0
 19443  002FD6  6E04               	movwf	___lwmod@divisor+1,c
 19444  002FD8  0E0A               	movlw	10
 19445  002FDA  6E03               	movwf	___lwmod@divisor,c
 19446  002FDC  EC28  F01E         	call	___lwmod	;wreg free
 19447  002FE0  5001               	movf	?___lwmod,w,c
 19448  002FE2  1002               	iorwf	?___lwmod+1,w,c
 19449  002FE4  A4D8               	btfss	status,2,c
 19450  002FE6  D003               	goto	i2l1119
 19451                           
 19452                           ;tmr0.c: 158: {
 19453                           ;tmr0.c: 159: Timer0_OneSec = 1;
 19454  002FE8  0E01               	movlw	1
 19455  002FEA  0100               	movlb	0	; () banked
 19456  002FEC  6FF7               	movwf	_Timer0_OneSec& (0+255),b	;volatile
 19457  002FEE                     i2l1119:
 19458                           
 19459                           ;tmr0.c: 160: }
 19460                           ;tmr0.c: 161: if(CountCallBack >= 35000)
 19461                           
 19462                           ; BSR set to: 0
 19463  002FEE  0EB8               	movlw	184
 19464  002FF0  5C31               	subwf	TMR0_ISR@CountCallBack,w,c	;volatile
 19465  002FF2  0E88               	movlw	136
 19466  002FF4  5832               	subwfb	TMR0_ISR@CountCallBack+1,w,c	;volatile
 19467  002FF6  A0D8               	btfss	status,0,c
 19468  002FF8  0012               	return	
 19469                           
 19470                           ;tmr0.c: 163: {
 19471                           ;tmr0.c: 165: CountCallBack = 0;
 19472  002FFA  0E00               	movlw	0
 19473  002FFC  6E32               	movwf	TMR0_ISR@CountCallBack+1,c	;volatile
 19474  002FFE  0E00               	movlw	0
 19475  003000  6E31               	movwf	TMR0_ISR@CountCallBack,c	;volatile
 19476  003002  0012               	return	
 19477  003004                     __end_of_TMR0_ISR:
 19478                           	opt stack 0
 19479                           tosu	equ	0xFFF
 19480                           tosh	equ	0xFFE
 19481                           tosl	equ	0xFFD
 19482                           pclatu	equ	0xFFB
 19483                           pclath	equ	0xFFA
 19484                           tblptru	equ	0xFF8
 19485                           tblptrh	equ	0xFF7
 19486                           tblptrl	equ	0xFF6
 19487                           tablat	equ	0xFF5
 19488                           prodh	equ	0xFF4
 19489                           prodl	equ	0xFF3
 19490                           intcon	equ	0xFF2
 19491                           intcon2	equ	0xFF1
 19492                           postinc0	equ	0xFEE
 19493                           plusw0	equ	0xFEB
 19494                           fsr0h	equ	0xFEA
 19495                           fsr0l	equ	0xFE9
 19496                           wreg	equ	0xFE8
 19497                           indf1	equ	0xFE7
 19498                           postdec1	equ	0xFE5
 19499                           fsr1h	equ	0xFE2
 19500                           fsr1l	equ	0xFE1
 19501                           indf2	equ	0xFDF
 19502                           postinc2	equ	0xFDE
 19503                           postdec2	equ	0xFDD
 19504                           plusw2	equ	0xFDB
 19505                           fsr2h	equ	0xFDA
 19506                           fsr2l	equ	0xFD9
 19507                           status	equ	0xFD8
 19508                           
 19509 ;; *************** function ___lwmod *****************
 19510 ;; Defined at:
 19511 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 19512 ;; Parameters:    Size  Location     Type
 19513 ;;  dividend        2    0[COMRAM] unsigned int 
 19514 ;;  divisor         2    2[COMRAM] unsigned int 
 19515 ;; Auto vars:     Size  Location     Type
 19516 ;;  counter         1    4[COMRAM] unsigned char 
 19517 ;; Return value:  Size  Location     Type
 19518 ;;                  2    0[COMRAM] unsigned int 
 19519 ;; Registers used:
 19520 ;;		wreg, status,2, status,0
 19521 ;; Tracked objects:
 19522 ;;		On entry : 0/0
 19523 ;;		On exit  : 0/0
 19524 ;;		Unchanged: 0/0
 19525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19526 ;;      Params:         4       0       0       0       0       0       0
 19527 ;;      Locals:         1       0       0       0       0       0       0
 19528 ;;      Temps:          0       0       0       0       0       0       0
 19529 ;;      Totals:         5       0       0       0       0       0       0
 19530 ;;Total ram usage:        5 bytes
 19531 ;; Hardware stack levels used:    1
 19532 ;; This function calls:
 19533 ;;		Nothing
 19534 ;; This function is called by:
 19535 ;;		_TMR0_ISR
 19536 ;; This function uses a non-reentrant model
 19537 ;;
 19538                           
 19539                           	psect	text113
 19540  003C50                     __ptext113:
 19541                           	opt stack 0
 19542  003C50                     ___lwmod:
 19543                           	opt stack 18
 19544                           
 19545                           ;incstack = 0
 19546  003C50  5003               	movf	___lwmod@divisor,w,c
 19547  003C52  1004               	iorwf	___lwmod@divisor+1,w,c
 19548  003C54  B4D8               	btfsc	status,2,c
 19549  003C56  D018               	goto	i2l2015
 19550  003C58  0E01               	movlw	1
 19551  003C5A  6E05               	movwf	___lwmod@counter,c
 19552  003C5C  D004               	goto	i2l2010
 19553  003C5E  90D8               	bcf	status,0,c
 19554  003C60  3603               	rlcf	___lwmod@divisor,f,c
 19555  003C62  3604               	rlcf	___lwmod@divisor+1,f,c
 19556  003C64  2A05               	incf	___lwmod@counter,f,c
 19557  003C66                     i2l2010:
 19558  003C66  AE04               	btfss	___lwmod@divisor+1,7,c
 19559  003C68  D7FA               	goto	i2l2011
 19560  003C6A                     i2u576_40:
 19561  003C6A  5003               	movf	___lwmod@divisor,w,c
 19562  003C6C  5C01               	subwf	___lwmod@dividend,w,c
 19563  003C6E  5004               	movf	___lwmod@divisor+1,w,c
 19564  003C70  5802               	subwfb	___lwmod@dividend+1,w,c
 19565  003C72  A0D8               	btfss	status,0,c
 19566  003C74  D004               	goto	i2l2014
 19567  003C76  5003               	movf	___lwmod@divisor,w,c
 19568  003C78  5E01               	subwf	___lwmod@dividend,f,c
 19569  003C7A  5004               	movf	___lwmod@divisor+1,w,c
 19570  003C7C  5A02               	subwfb	___lwmod@dividend+1,f,c
 19571  003C7E                     i2l2014:
 19572  003C7E  90D8               	bcf	status,0,c
 19573  003C80  3204               	rrcf	___lwmod@divisor+1,f,c
 19574  003C82  3203               	rrcf	___lwmod@divisor,f,c
 19575  003C84  2E05               	decfsz	___lwmod@counter,f,c
 19576  003C86  D7F1               	goto	i2u576_40
 19577  003C88                     i2l2015:
 19578  003C88  C001  F001         	movff	___lwmod@dividend,?___lwmod
 19579  003C8C  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 19580  003C90  0012               	return		;funcret
 19581  003C92                     __end_of___lwmod:
 19582                           	opt stack 0
 19583                           tosu	equ	0xFFF
 19584                           tosh	equ	0xFFE
 19585                           tosl	equ	0xFFD
 19586                           pclatu	equ	0xFFB
 19587                           pclath	equ	0xFFA
 19588                           tblptru	equ	0xFF8
 19589                           tblptrh	equ	0xFF7
 19590                           tblptrl	equ	0xFF6
 19591                           tablat	equ	0xFF5
 19592                           prodh	equ	0xFF4
 19593                           prodl	equ	0xFF3
 19594                           intcon	equ	0xFF2
 19595                           intcon2	equ	0xFF1
 19596                           postinc0	equ	0xFEE
 19597                           plusw0	equ	0xFEB
 19598                           fsr0h	equ	0xFEA
 19599                           fsr0l	equ	0xFE9
 19600                           wreg	equ	0xFE8
 19601                           indf1	equ	0xFE7
 19602                           postdec1	equ	0xFE5
 19603                           fsr1h	equ	0xFE2
 19604                           fsr1l	equ	0xFE1
 19605                           indf2	equ	0xFDF
 19606                           postinc2	equ	0xFDE
 19607                           postdec2	equ	0xFDD
 19608                           plusw2	equ	0xFDB
 19609                           fsr2h	equ	0xFDA
 19610                           fsr2l	equ	0xFD9
 19611                           status	equ	0xFD8
 19612                           
 19613 ;; *************** function _PIN_MANAGER_IOC *****************
 19614 ;; Defined at:
 19615 ;;		line 108 in file "mcc_generated_files/pin_manager.c"
 19616 ;; Parameters:    Size  Location     Type
 19617 ;;		None
 19618 ;; Auto vars:     Size  Location     Type
 19619 ;;		None
 19620 ;; Return value:  Size  Location     Type
 19621 ;;                  1    wreg      void 
 19622 ;; Registers used:
 19623 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19624 ;; Tracked objects:
 19625 ;;		On entry : 0/0
 19626 ;;		On exit  : 0/0
 19627 ;;		Unchanged: 0/0
 19628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19629 ;;      Params:         0       0       0       0       0       0       0
 19630 ;;      Locals:         0       0       0       0       0       0       0
 19631 ;;      Temps:          0       0       0       0       0       0       0
 19632 ;;      Totals:         0       0       0       0       0       0       0
 19633 ;;Total ram usage:        0 bytes
 19634 ;; Hardware stack levels used:    1
 19635 ;; Hardware stack levels required when called:    2
 19636 ;; This function calls:
 19637 ;;		_IOCB4_ISR
 19638 ;;		_IOCB5_ISR
 19639 ;; This function is called by:
 19640 ;;		_INTERRUPT_InterruptManager
 19641 ;; This function uses a non-reentrant model
 19642 ;;
 19643                           
 19644                           	psect	text114
 19645  004348                     __ptext114:
 19646                           	opt stack 0
 19647  004348                     _PIN_MANAGER_IOC:
 19648                           	opt stack 17
 19649                           
 19650                           ;pin_manager.c: 111: if(IOCBbits.IOCB4 == 1)
 19651                           
 19652                           ;incstack = 0
 19653  004348  B862               	btfsc	3938,4,c	;volatile
 19654                           
 19655                           ;pin_manager.c: 112: {
 19656                           ;pin_manager.c: 113: IOCB4_ISR();
 19657  00434A  ECDC  F020         	call	_IOCB4_ISR	;wreg free
 19658                           
 19659                           ;pin_manager.c: 114: }
 19660                           ;pin_manager.c: 116: if(IOCBbits.IOCB5 == 1)
 19661  00434E  BA62               	btfsc	3938,5,c	;volatile
 19662                           
 19663                           ;pin_manager.c: 117: {
 19664                           ;pin_manager.c: 118: IOCB5_ISR();
 19665  004350  ECCB  F020         	call	_IOCB5_ISR	;wreg free
 19666                           
 19667                           ;pin_manager.c: 119: }
 19668                           ;pin_manager.c: 122: INTCONbits.RBIF = 0;
 19669  004354  90F2               	bcf	intcon,0,c	;volatile
 19670  004356  0012               	return		;funcret
 19671  004358                     __end_of_PIN_MANAGER_IOC:
 19672                           	opt stack 0
 19673                           tosu	equ	0xFFF
 19674                           tosh	equ	0xFFE
 19675                           tosl	equ	0xFFD
 19676                           pclatu	equ	0xFFB
 19677                           pclath	equ	0xFFA
 19678                           tblptru	equ	0xFF8
 19679                           tblptrh	equ	0xFF7
 19680                           tblptrl	equ	0xFF6
 19681                           tablat	equ	0xFF5
 19682                           prodh	equ	0xFF4
 19683                           prodl	equ	0xFF3
 19684                           intcon	equ	0xFF2
 19685                           intcon2	equ	0xFF1
 19686                           postinc0	equ	0xFEE
 19687                           plusw0	equ	0xFEB
 19688                           fsr0h	equ	0xFEA
 19689                           fsr0l	equ	0xFE9
 19690                           wreg	equ	0xFE8
 19691                           indf1	equ	0xFE7
 19692                           postdec1	equ	0xFE5
 19693                           fsr1h	equ	0xFE2
 19694                           fsr1l	equ	0xFE1
 19695                           indf2	equ	0xFDF
 19696                           postinc2	equ	0xFDE
 19697                           postdec2	equ	0xFDD
 19698                           plusw2	equ	0xFDB
 19699                           fsr2h	equ	0xFDA
 19700                           fsr2l	equ	0xFD9
 19701                           status	equ	0xFD8
 19702                           
 19703 ;; *************** function _IOCB5_ISR *****************
 19704 ;; Defined at:
 19705 ;;		line 158 in file "mcc_generated_files/pin_manager.c"
 19706 ;; Parameters:    Size  Location     Type
 19707 ;;		None
 19708 ;; Auto vars:     Size  Location     Type
 19709 ;;		None
 19710 ;; Return value:  Size  Location     Type
 19711 ;;                  1    wreg      void 
 19712 ;; Registers used:
 19713 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19714 ;; Tracked objects:
 19715 ;;		On entry : 0/0
 19716 ;;		On exit  : 0/0
 19717 ;;		Unchanged: 0/0
 19718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19719 ;;      Params:         0       0       0       0       0       0       0
 19720 ;;      Locals:         0       0       0       0       0       0       0
 19721 ;;      Temps:          0       0       0       0       0       0       0
 19722 ;;      Totals:         0       0       0       0       0       0       0
 19723 ;;Total ram usage:        0 bytes
 19724 ;; Hardware stack levels used:    1
 19725 ;; Hardware stack levels required when called:    1
 19726 ;; This function calls:
 19727 ;;		Absolute function
 19728 ;;		_IOCB5_DefaultInterruptHandler
 19729 ;; This function is called by:
 19730 ;;		_PIN_MANAGER_IOC
 19731 ;; This function uses a non-reentrant model
 19732 ;;
 19733                           
 19734                           	psect	text115
 19735  004196                     __ptext115:
 19736                           	opt stack 0
 19737  004196                     _IOCB5_ISR:
 19738                           	opt stack 17
 19739                           
 19740                           ;pin_manager.c: 163: if(IOCB5_InterruptHandler)
 19741                           
 19742                           ;incstack = 0
 19743  004196  0101               	movlb	1	; () banked
 19744  004198  51CE               	movf	_IOCB5_InterruptHandler& (0+255),w,b
 19745  00419A  11CF               	iorwf	(_IOCB5_InterruptHandler+1)& (0+255),w,b
 19746  00419C  B4D8               	btfsc	status,2,c
 19747  00419E  0012               	return	
 19748                           
 19749                           ; BSR set to: 1
 19750                           ;pin_manager.c: 164: {
 19751                           ;pin_manager.c: 165: IOCB5_InterruptHandler();
 19752  0041A0  D801               	call	i2u568_48
 19753  0041A2  0012               	return	
 19754  0041A4                     i2u568_48:
 19755  0041A4  0005               	push	
 19756  0041A6  6EFA               	movwf	pclath,c
 19757  0041A8  51CE               	movf	_IOCB5_InterruptHandler& (0+255),w,b
 19758  0041AA  6EFD               	movwf	tosl,c
 19759  0041AC  51CF               	movf	(_IOCB5_InterruptHandler+1)& (0+255),w,b
 19760  0041AE  6EFE               	movwf	tosh,c
 19761  0041B0  50F8               	movf	tblptru,w,c
 19762  0041B2  6EFF               	movwf	tosu,c
 19763  0041B4  50FA               	movf	pclath,w,c
 19764  0041B6  0012               	return		;indir
 19765  0041B8                     __end_of_IOCB5_ISR:
 19766                           	opt stack 0
 19767                           tosu	equ	0xFFF
 19768                           tosh	equ	0xFFE
 19769                           tosl	equ	0xFFD
 19770                           pclatu	equ	0xFFB
 19771                           pclath	equ	0xFFA
 19772                           tblptru	equ	0xFF8
 19773                           tblptrh	equ	0xFF7
 19774                           tblptrl	equ	0xFF6
 19775                           tablat	equ	0xFF5
 19776                           prodh	equ	0xFF4
 19777                           prodl	equ	0xFF3
 19778                           intcon	equ	0xFF2
 19779                           intcon2	equ	0xFF1
 19780                           postinc0	equ	0xFEE
 19781                           plusw0	equ	0xFEB
 19782                           fsr0h	equ	0xFEA
 19783                           fsr0l	equ	0xFE9
 19784                           wreg	equ	0xFE8
 19785                           indf1	equ	0xFE7
 19786                           postdec1	equ	0xFE5
 19787                           fsr1h	equ	0xFE2
 19788                           fsr1l	equ	0xFE1
 19789                           indf2	equ	0xFDF
 19790                           postinc2	equ	0xFDE
 19791                           postdec2	equ	0xFDD
 19792                           plusw2	equ	0xFDB
 19793                           fsr2h	equ	0xFDA
 19794                           fsr2l	equ	0xFD9
 19795                           status	equ	0xFD8
 19796                           
 19797 ;; *************** function _IOCB5_DefaultInterruptHandler *****************
 19798 ;; Defined at:
 19799 ;;		line 179 in file "mcc_generated_files/pin_manager.c"
 19800 ;; Parameters:    Size  Location     Type
 19801 ;;		None
 19802 ;; Auto vars:     Size  Location     Type
 19803 ;;		None
 19804 ;; Return value:  Size  Location     Type
 19805 ;;                  1    wreg      void 
 19806 ;; Registers used:
 19807 ;;		None
 19808 ;; Tracked objects:
 19809 ;;		On entry : 0/0
 19810 ;;		On exit  : 0/0
 19811 ;;		Unchanged: 0/0
 19812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19813 ;;      Params:         0       0       0       0       0       0       0
 19814 ;;      Locals:         0       0       0       0       0       0       0
 19815 ;;      Temps:          0       0       0       0       0       0       0
 19816 ;;      Totals:         0       0       0       0       0       0       0
 19817 ;;Total ram usage:        0 bytes
 19818 ;; Hardware stack levels used:    1
 19819 ;; This function calls:
 19820 ;;		Nothing
 19821 ;; This function is called by:
 19822 ;;		_PIN_MANAGER_Initialize
 19823 ;;		_IOCB5_ISR
 19824 ;; This function uses a non-reentrant model
 19825 ;;
 19826                           
 19827                           	psect	text116
 19828  0043F4                     __ptext116:
 19829                           	opt stack 0
 19830  0043F4                     _IOCB5_DefaultInterruptHandler:
 19831                           	opt stack 17
 19832                           
 19833                           ;incstack = 0
 19834  0043F4  0012               	return		;funcret
 19835  0043F6                     __end_of_IOCB5_DefaultInterruptHandler:
 19836                           	opt stack 0
 19837                           tosu	equ	0xFFF
 19838                           tosh	equ	0xFFE
 19839                           tosl	equ	0xFFD
 19840                           pclatu	equ	0xFFB
 19841                           pclath	equ	0xFFA
 19842                           tblptru	equ	0xFF8
 19843                           tblptrh	equ	0xFF7
 19844                           tblptrl	equ	0xFF6
 19845                           tablat	equ	0xFF5
 19846                           prodh	equ	0xFF4
 19847                           prodl	equ	0xFF3
 19848                           intcon	equ	0xFF2
 19849                           intcon2	equ	0xFF1
 19850                           postinc0	equ	0xFEE
 19851                           plusw0	equ	0xFEB
 19852                           fsr0h	equ	0xFEA
 19853                           fsr0l	equ	0xFE9
 19854                           wreg	equ	0xFE8
 19855                           indf1	equ	0xFE7
 19856                           postdec1	equ	0xFE5
 19857                           fsr1h	equ	0xFE2
 19858                           fsr1l	equ	0xFE1
 19859                           indf2	equ	0xFDF
 19860                           postinc2	equ	0xFDE
 19861                           postdec2	equ	0xFDD
 19862                           plusw2	equ	0xFDB
 19863                           fsr2h	equ	0xFDA
 19864                           fsr2l	equ	0xFD9
 19865                           status	equ	0xFD8
 19866                           
 19867 ;; *************** function _IOCB4_ISR *****************
 19868 ;; Defined at:
 19869 ;;		line 129 in file "mcc_generated_files/pin_manager.c"
 19870 ;; Parameters:    Size  Location     Type
 19871 ;;		None
 19872 ;; Auto vars:     Size  Location     Type
 19873 ;;		None
 19874 ;; Return value:  Size  Location     Type
 19875 ;;                  1    wreg      void 
 19876 ;; Registers used:
 19877 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19878 ;; Tracked objects:
 19879 ;;		On entry : 0/0
 19880 ;;		On exit  : 0/0
 19881 ;;		Unchanged: 0/0
 19882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19883 ;;      Params:         0       0       0       0       0       0       0
 19884 ;;      Locals:         0       0       0       0       0       0       0
 19885 ;;      Temps:          0       0       0       0       0       0       0
 19886 ;;      Totals:         0       0       0       0       0       0       0
 19887 ;;Total ram usage:        0 bytes
 19888 ;; Hardware stack levels used:    1
 19889 ;; Hardware stack levels required when called:    1
 19890 ;; This function calls:
 19891 ;;		Absolute function
 19892 ;;		_IOCB4_DefaultInterruptHandler
 19893 ;; This function is called by:
 19894 ;;		_PIN_MANAGER_IOC
 19895 ;; This function uses a non-reentrant model
 19896 ;;
 19897                           
 19898                           	psect	text117
 19899  0041B8                     __ptext117:
 19900                           	opt stack 0
 19901  0041B8                     _IOCB4_ISR:
 19902                           	opt stack 17
 19903                           
 19904                           ;pin_manager.c: 134: if(IOCB4_InterruptHandler)
 19905                           
 19906                           ;incstack = 0
 19907  0041B8  0101               	movlb	1	; () banked
 19908  0041BA  51D0               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 19909  0041BC  11D1               	iorwf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 19910  0041BE  B4D8               	btfsc	status,2,c
 19911  0041C0  0012               	return	
 19912                           
 19913                           ; BSR set to: 1
 19914                           ;pin_manager.c: 135: {
 19915                           ;pin_manager.c: 136: IOCB4_InterruptHandler();
 19916  0041C2  D801               	call	i2u566_48
 19917  0041C4  0012               	return	
 19918  0041C6                     i2u566_48:
 19919  0041C6  0005               	push	
 19920  0041C8  6EFA               	movwf	pclath,c
 19921  0041CA  51D0               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 19922  0041CC  6EFD               	movwf	tosl,c
 19923  0041CE  51D1               	movf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 19924  0041D0  6EFE               	movwf	tosh,c
 19925  0041D2  50F8               	movf	tblptru,w,c
 19926  0041D4  6EFF               	movwf	tosu,c
 19927  0041D6  50FA               	movf	pclath,w,c
 19928  0041D8  0012               	return		;indir
 19929  0041DA                     __end_of_IOCB4_ISR:
 19930                           	opt stack 0
 19931                           tosu	equ	0xFFF
 19932                           tosh	equ	0xFFE
 19933                           tosl	equ	0xFFD
 19934                           pclatu	equ	0xFFB
 19935                           pclath	equ	0xFFA
 19936                           tblptru	equ	0xFF8
 19937                           tblptrh	equ	0xFF7
 19938                           tblptrl	equ	0xFF6
 19939                           tablat	equ	0xFF5
 19940                           prodh	equ	0xFF4
 19941                           prodl	equ	0xFF3
 19942                           intcon	equ	0xFF2
 19943                           intcon2	equ	0xFF1
 19944                           postinc0	equ	0xFEE
 19945                           plusw0	equ	0xFEB
 19946                           fsr0h	equ	0xFEA
 19947                           fsr0l	equ	0xFE9
 19948                           wreg	equ	0xFE8
 19949                           indf1	equ	0xFE7
 19950                           postdec1	equ	0xFE5
 19951                           fsr1h	equ	0xFE2
 19952                           fsr1l	equ	0xFE1
 19953                           indf2	equ	0xFDF
 19954                           postinc2	equ	0xFDE
 19955                           postdec2	equ	0xFDD
 19956                           plusw2	equ	0xFDB
 19957                           fsr2h	equ	0xFDA
 19958                           fsr2l	equ	0xFD9
 19959                           status	equ	0xFD8
 19960                           
 19961 ;; *************** function _IOCB4_DefaultInterruptHandler *****************
 19962 ;; Defined at:
 19963 ;;		line 150 in file "mcc_generated_files/pin_manager.c"
 19964 ;; Parameters:    Size  Location     Type
 19965 ;;		None
 19966 ;; Auto vars:     Size  Location     Type
 19967 ;;		None
 19968 ;; Return value:  Size  Location     Type
 19969 ;;                  1    wreg      void 
 19970 ;; Registers used:
 19971 ;;		None
 19972 ;; Tracked objects:
 19973 ;;		On entry : 0/0
 19974 ;;		On exit  : 0/0
 19975 ;;		Unchanged: 0/0
 19976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19977 ;;      Params:         0       0       0       0       0       0       0
 19978 ;;      Locals:         0       0       0       0       0       0       0
 19979 ;;      Temps:          0       0       0       0       0       0       0
 19980 ;;      Totals:         0       0       0       0       0       0       0
 19981 ;;Total ram usage:        0 bytes
 19982 ;; Hardware stack levels used:    1
 19983 ;; This function calls:
 19984 ;;		Nothing
 19985 ;; This function is called by:
 19986 ;;		_PIN_MANAGER_Initialize
 19987 ;;		_IOCB4_ISR
 19988 ;; This function uses a non-reentrant model
 19989 ;;
 19990                           
 19991                           	psect	text118
 19992  0043F6                     __ptext118:
 19993                           	opt stack 0
 19994  0043F6                     _IOCB4_DefaultInterruptHandler:
 19995                           	opt stack 17
 19996                           
 19997                           ;incstack = 0
 19998  0043F6  0012               	return		;funcret
 19999  0043F8                     __end_of_IOCB4_DefaultInterruptHandler:
 20000                           	opt stack 0
 20001                           tosu	equ	0xFFF
 20002                           tosh	equ	0xFFE
 20003                           tosl	equ	0xFFD
 20004                           pclatu	equ	0xFFB
 20005                           pclath	equ	0xFFA
 20006                           tblptru	equ	0xFF8
 20007                           tblptrh	equ	0xFF7
 20008                           tblptrl	equ	0xFF6
 20009                           tablat	equ	0xFF5
 20010                           prodh	equ	0xFF4
 20011                           prodl	equ	0xFF3
 20012                           intcon	equ	0xFF2
 20013                           intcon2	equ	0xFF1
 20014                           postinc0	equ	0xFEE
 20015                           plusw0	equ	0xFEB
 20016                           fsr0h	equ	0xFEA
 20017                           fsr0l	equ	0xFE9
 20018                           wreg	equ	0xFE8
 20019                           indf1	equ	0xFE7
 20020                           postdec1	equ	0xFE5
 20021                           fsr1h	equ	0xFE2
 20022                           fsr1l	equ	0xFE1
 20023                           indf2	equ	0xFDF
 20024                           postinc2	equ	0xFDE
 20025                           postdec2	equ	0xFDD
 20026                           plusw2	equ	0xFDB
 20027                           fsr2h	equ	0xFDA
 20028                           fsr2l	equ	0xFD9
 20029                           status	equ	0xFD8
 20030                           
 20031 ;; *************** function _MEMORY_ISR *****************
 20032 ;; Defined at:
 20033 ;;		line 206 in file "mcc_generated_files/memory.c"
 20034 ;; Parameters:    Size  Location     Type
 20035 ;;		None
 20036 ;; Auto vars:     Size  Location     Type
 20037 ;;		None
 20038 ;; Return value:  Size  Location     Type
 20039 ;;                  1    wreg      void 
 20040 ;; Registers used:
 20041 ;;		None
 20042 ;; Tracked objects:
 20043 ;;		On entry : 0/0
 20044 ;;		On exit  : 0/0
 20045 ;;		Unchanged: 0/0
 20046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20047 ;;      Params:         0       0       0       0       0       0       0
 20048 ;;      Locals:         0       0       0       0       0       0       0
 20049 ;;      Temps:          0       0       0       0       0       0       0
 20050 ;;      Totals:         0       0       0       0       0       0       0
 20051 ;;Total ram usage:        0 bytes
 20052 ;; Hardware stack levels used:    1
 20053 ;; This function calls:
 20054 ;;		Nothing
 20055 ;; This function is called by:
 20056 ;;		_INTERRUPT_InterruptManager
 20057 ;; This function uses a non-reentrant model
 20058 ;;
 20059                           
 20060                           	psect	text119
 20061  0043F0                     __ptext119:
 20062                           	opt stack 0
 20063  0043F0                     _MEMORY_ISR:
 20064                           	opt stack 19
 20065                           
 20066                           ;memory.c: 209: PIR2bits.EEIF = 0;
 20067                           
 20068                           ;incstack = 0
 20069  0043F0  98A1               	bcf	4001,4,c	;volatile
 20070  0043F2  0012               	return		;funcret
 20071  0043F4                     __end_of_MEMORY_ISR:
 20072                           	opt stack 0
 20073                           tosu	equ	0xFFF
 20074                           tosh	equ	0xFFE
 20075                           tosl	equ	0xFFD
 20076                           pclatu	equ	0xFFB
 20077                           pclath	equ	0xFFA
 20078                           tblptru	equ	0xFF8
 20079                           tblptrh	equ	0xFF7
 20080                           tblptrl	equ	0xFF6
 20081                           tablat	equ	0xFF5
 20082                           prodh	equ	0xFF4
 20083                           prodl	equ	0xFF3
 20084                           intcon	equ	0xFF2
 20085                           intcon2	equ	0xFF1
 20086                           postinc0	equ	0xFEE
 20087                           plusw0	equ	0xFEB
 20088                           fsr0h	equ	0xFEA
 20089                           fsr0l	equ	0xFE9
 20090                           wreg	equ	0xFE8
 20091                           indf1	equ	0xFE7
 20092                           postdec1	equ	0xFE5
 20093                           fsr1h	equ	0xFE2
 20094                           fsr1l	equ	0xFE1
 20095                           indf2	equ	0xFDF
 20096                           postinc2	equ	0xFDE
 20097                           postdec2	equ	0xFDD
 20098                           plusw2	equ	0xFDB
 20099                           fsr2h	equ	0xFDA
 20100                           fsr2l	equ	0xFD9
 20101                           status	equ	0xFD8
 20102                           
 20103 ;; *************** function _EUSART1_Transmit_ISR *****************
 20104 ;; Defined at:
 20105 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 20106 ;; Parameters:    Size  Location     Type
 20107 ;;		None
 20108 ;; Auto vars:     Size  Location     Type
 20109 ;;		None
 20110 ;; Return value:  Size  Location     Type
 20111 ;;                  1    wreg      void 
 20112 ;; Registers used:
 20113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20114 ;; Tracked objects:
 20115 ;;		On entry : 0/0
 20116 ;;		On exit  : 0/0
 20117 ;;		Unchanged: 0/0
 20118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20119 ;;      Params:         0       0       0       0       0       0       0
 20120 ;;      Locals:         0       0       0       0       0       0       0
 20121 ;;      Temps:          0       0       0       0       0       0       0
 20122 ;;      Totals:         0       0       0       0       0       0       0
 20123 ;;Total ram usage:        0 bytes
 20124 ;; Hardware stack levels used:    1
 20125 ;; This function calls:
 20126 ;;		Nothing
 20127 ;; This function is called by:
 20128 ;;		_INTERRUPT_InterruptManager
 20129 ;; This function uses a non-reentrant model
 20130 ;;
 20131                           
 20132                           	psect	text120
 20133  003E64                     __ptext120:
 20134                           	opt stack 0
 20135  003E64                     _EUSART1_Transmit_ISR:
 20136                           	opt stack 19
 20137                           
 20138                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 20139                           
 20140                           ;incstack = 0
 20141  003E64  0E46               	movlw	70
 20142  003E66  0101               	movlb	1	; () banked
 20143  003E68  61D2               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 20144  003E6A  D012               	goto	i2l914
 20145                           
 20146                           ; BSR set to: 1
 20147                           ;eusart1.c: 186: {
 20148                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 20149  003E6C  5035               	movf	_eusart1TxTail,w,c	;volatile
 20150  003E6E  0D01               	mullw	1
 20151  003E70  0E00               	movlw	low _eusart1TxBuffer
 20152  003E72  24F3               	addwf	prodl,w,c
 20153  003E74  6ED9               	movwf	fsr2l,c
 20154  003E76  0E02               	movlw	high _eusart1TxBuffer
 20155  003E78  20F4               	addwfc	prodh,w,c
 20156  003E7A  6EDA               	movwf	fsr2h,c
 20157  003E7C  50DF               	movf	indf2,w,c
 20158  003E7E  6EAD               	movwf	4013,c	;volatile
 20159                           
 20160                           ; BSR set to: 1
 20161  003E80  2A35               	incf	_eusart1TxTail,f,c	;volatile
 20162                           
 20163                           ; BSR set to: 1
 20164                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 20165  003E82  0E45               	movlw	69
 20166  003E84  6435               	cpfsgt	_eusart1TxTail,c	;volatile
 20167  003E86  D002               	goto	i2l915
 20168                           
 20169                           ; BSR set to: 1
 20170                           ;eusart1.c: 189: {
 20171                           ;eusart1.c: 190: eusart1TxTail = 0;
 20172  003E88  0E00               	movlw	0
 20173  003E8A  6E35               	movwf	_eusart1TxTail,c	;volatile
 20174  003E8C                     i2l915:
 20175                           
 20176                           ; BSR set to: 1
 20177                           ;eusart1.c: 191: }
 20178                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 20179                           
 20180                           ; BSR set to: 1
 20181  003E8C  2BD2               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 20182                           
 20183                           ;eusart1.c: 193: }
 20184  003E8E  0012               	return	
 20185  003E90                     i2l914:
 20186                           
 20187                           ; BSR set to: 1
 20188                           ;eusart1.c: 194: else
 20189                           ;eusart1.c: 195: {
 20190                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 20191  003E90  989D               	bcf	3997,4,c	;volatile
 20192                           
 20193                           ; BSR set to: 1
 20194                           ;eusart1.c: 197: eusart1TxTail = 0;
 20195  003E92  0E00               	movlw	0
 20196  003E94  6E35               	movwf	_eusart1TxTail,c	;volatile
 20197                           
 20198                           ;eusart1.c: 198: eusart1TxHead = 0;
 20199  003E96  0E00               	movlw	0
 20200  003E98  6E36               	movwf	_eusart1TxHead,c	;volatile
 20201  003E9A  0012               	return	
 20202  003E9C                     __end_of_EUSART1_Transmit_ISR:
 20203                           	opt stack 0
 20204                           tosu	equ	0xFFF
 20205                           tosh	equ	0xFFE
 20206                           tosl	equ	0xFFD
 20207                           pclatu	equ	0xFFB
 20208                           pclath	equ	0xFFA
 20209                           tblptru	equ	0xFF8
 20210                           tblptrh	equ	0xFF7
 20211                           tblptrl	equ	0xFF6
 20212                           tablat	equ	0xFF5
 20213                           prodh	equ	0xFF4
 20214                           prodl	equ	0xFF3
 20215                           intcon	equ	0xFF2
 20216                           intcon2	equ	0xFF1
 20217                           postinc0	equ	0xFEE
 20218                           plusw0	equ	0xFEB
 20219                           fsr0h	equ	0xFEA
 20220                           fsr0l	equ	0xFE9
 20221                           wreg	equ	0xFE8
 20222                           indf1	equ	0xFE7
 20223                           postdec1	equ	0xFE5
 20224                           fsr1h	equ	0xFE2
 20225                           fsr1l	equ	0xFE1
 20226                           indf2	equ	0xFDF
 20227                           postinc2	equ	0xFDE
 20228                           postdec2	equ	0xFDD
 20229                           plusw2	equ	0xFDB
 20230                           fsr2h	equ	0xFDA
 20231                           fsr2l	equ	0xFD9
 20232                           status	equ	0xFD8
 20233                           
 20234 ;; *************** function _EUSART1_Receive_ISR *****************
 20235 ;; Defined at:
 20236 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 20237 ;; Parameters:    Size  Location     Type
 20238 ;;		None
 20239 ;; Auto vars:     Size  Location     Type
 20240 ;;		None
 20241 ;; Return value:  Size  Location     Type
 20242 ;;                  1    wreg      void 
 20243 ;; Registers used:
 20244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20245 ;; Tracked objects:
 20246 ;;		On entry : 0/0
 20247 ;;		On exit  : 0/0
 20248 ;;		Unchanged: 0/0
 20249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20250 ;;      Params:         0       0       0       0       0       0       0
 20251 ;;      Locals:         0       0       0       0       0       0       0
 20252 ;;      Temps:          0       0       0       0       0       0       0
 20253 ;;      Totals:         0       0       0       0       0       0       0
 20254 ;;Total ram usage:        0 bytes
 20255 ;; Hardware stack levels used:    1
 20256 ;; This function calls:
 20257 ;;		Nothing
 20258 ;; This function is called by:
 20259 ;;		_INTERRUPT_InterruptManager
 20260 ;; This function uses a non-reentrant model
 20261 ;;
 20262                           
 20263                           	psect	text121
 20264  004034                     __ptext121:
 20265                           	opt stack 0
 20266  004034                     _EUSART1_Receive_ISR:
 20267                           	opt stack 19
 20268                           
 20269                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 20270                           
 20271                           ; BSR set to: 1
 20272                           ;incstack = 0
 20273  004034  A2AB               	btfss	4011,1,c	;volatile
 20274  004036  D002               	goto	i2l920
 20275                           
 20276                           ;eusart1.c: 206: {
 20277                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 20278  004038  98AB               	bcf	4011,4,c	;volatile
 20279                           
 20280                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 20281  00403A  88AB               	bsf	4011,4,c	;volatile
 20282  00403C                     i2l920:
 20283                           
 20284                           ;eusart1.c: 210: }
 20285                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 20286  00403C  5034               	movf	_eusart1RxHead,w,c	;volatile
 20287  00403E  0D01               	mullw	1
 20288  004040  0E00               	movlw	low _eusart1RxBuffer
 20289  004042  24F3               	addwf	prodl,w,c
 20290  004044  6ED9               	movwf	fsr2l,c
 20291  004046  0E01               	movlw	high _eusart1RxBuffer
 20292  004048  20F4               	addwfc	prodh,w,c
 20293  00404A  6EDA               	movwf	fsr2h,c
 20294  00404C  CFAE FFDF          	movff	4014,indf2	;volatile
 20295  004050  2A34               	incf	_eusart1RxHead,f,c	;volatile
 20296                           
 20297                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 20298  004052  0E27               	movlw	39
 20299  004054  6434               	cpfsgt	_eusart1RxHead,c	;volatile
 20300  004056  D002               	goto	i2l921
 20301                           
 20302                           ;eusart1.c: 217: {
 20303                           ;eusart1.c: 218: eusart1RxHead = 0;
 20304  004058  0E00               	movlw	0
 20305  00405A  6E34               	movwf	_eusart1RxHead,c	;volatile
 20306  00405C                     i2l921:
 20307                           
 20308                           ;eusart1.c: 219: }
 20309                           ;eusart1.c: 220: eusart1RxCount++;
 20310  00405C  0100               	movlb	0	; () banked
 20311  00405E  2BF5               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 20312                           
 20313                           ; BSR set to: 0
 20314  004060  0012               	return		;funcret
 20315  004062                     __end_of_EUSART1_Receive_ISR:
 20316                           	opt stack 0
 20317                           tosu	equ	0xFFF
 20318                           tosh	equ	0xFFE
 20319                           tosl	equ	0xFFD
 20320                           pclatu	equ	0xFFB
 20321                           pclath	equ	0xFFA
 20322                           tblptru	equ	0xFF8
 20323                           tblptrh	equ	0xFF7
 20324                           tblptrl	equ	0xFF6
 20325                           tablat	equ	0xFF5
 20326                           prodh	equ	0xFF4
 20327                           prodl	equ	0xFF3
 20328                           intcon	equ	0xFF2
 20329                           intcon2	equ	0xFF1
 20330                           postinc0	equ	0xFEE
 20331                           plusw0	equ	0xFEB
 20332                           fsr0h	equ	0xFEA
 20333                           fsr0l	equ	0xFE9
 20334                           wreg	equ	0xFE8
 20335                           indf1	equ	0xFE7
 20336                           postdec1	equ	0xFE5
 20337                           fsr1h	equ	0xFE2
 20338                           fsr1l	equ	0xFE1
 20339                           indf2	equ	0xFDF
 20340                           postinc2	equ	0xFDE
 20341                           postdec2	equ	0xFDD
 20342                           plusw2	equ	0xFDB
 20343                           fsr2h	equ	0xFDA
 20344                           fsr2l	equ	0xFD9
 20345                           status	equ	0xFD8
 20346                           tosu	equ	0xFFF
 20347                           tosh	equ	0xFFE
 20348                           tosl	equ	0xFFD
 20349                           pclatu	equ	0xFFB
 20350                           pclath	equ	0xFFA
 20351                           tblptru	equ	0xFF8
 20352                           tblptrh	equ	0xFF7
 20353                           tblptrl	equ	0xFF6
 20354                           tablat	equ	0xFF5
 20355                           prodh	equ	0xFF4
 20356                           prodl	equ	0xFF3
 20357                           intcon	equ	0xFF2
 20358                           intcon2	equ	0xFF1
 20359                           postinc0	equ	0xFEE
 20360                           plusw0	equ	0xFEB
 20361                           fsr0h	equ	0xFEA
 20362                           fsr0l	equ	0xFE9
 20363                           wreg	equ	0xFE8
 20364                           indf1	equ	0xFE7
 20365                           postdec1	equ	0xFE5
 20366                           fsr1h	equ	0xFE2
 20367                           fsr1l	equ	0xFE1
 20368                           indf2	equ	0xFDF
 20369                           postinc2	equ	0xFDE
 20370                           postdec2	equ	0xFDD
 20371                           plusw2	equ	0xFDB
 20372                           fsr2h	equ	0xFDA
 20373                           fsr2l	equ	0xFD9
 20374                           status	equ	0xFD8
 20375                           
 20376                           	psect	text122
 20377  000000                     __ptext122:
 20378                           	opt stack 0
 20379                           tosu	equ	0xFFF
 20380                           tosh	equ	0xFFE
 20381                           tosl	equ	0xFFD
 20382                           pclatu	equ	0xFFB
 20383                           pclath	equ	0xFFA
 20384                           tblptru	equ	0xFF8
 20385                           tblptrh	equ	0xFF7
 20386                           tblptrl	equ	0xFF6
 20387                           tablat	equ	0xFF5
 20388                           prodh	equ	0xFF4
 20389                           prodl	equ	0xFF3
 20390                           intcon	equ	0xFF2
 20391                           intcon2	equ	0xFF1
 20392                           postinc0	equ	0xFEE
 20393                           plusw0	equ	0xFEB
 20394                           fsr0h	equ	0xFEA
 20395                           fsr0l	equ	0xFE9
 20396                           wreg	equ	0xFE8
 20397                           indf1	equ	0xFE7
 20398                           postdec1	equ	0xFE5
 20399                           fsr1h	equ	0xFE2
 20400                           fsr1l	equ	0xFE1
 20401                           indf2	equ	0xFDF
 20402                           postinc2	equ	0xFDE
 20403                           postdec2	equ	0xFDD
 20404                           plusw2	equ	0xFDB
 20405                           fsr2h	equ	0xFDA
 20406                           fsr2l	equ	0xFD9
 20407                           status	equ	0xFD8
 20408                           
 20409                           	psect	rparam
 20410  0000                     tosu	equ	0xFFF
 20411                           tosh	equ	0xFFE
 20412                           tosl	equ	0xFFD
 20413                           pclatu	equ	0xFFB
 20414                           pclath	equ	0xFFA
 20415                           tblptru	equ	0xFF8
 20416                           tblptrh	equ	0xFF7
 20417                           tblptrl	equ	0xFF6
 20418                           tablat	equ	0xFF5
 20419                           prodh	equ	0xFF4
 20420                           prodl	equ	0xFF3
 20421                           intcon	equ	0xFF2
 20422                           intcon2	equ	0xFF1
 20423                           postinc0	equ	0xFEE
 20424                           plusw0	equ	0xFEB
 20425                           fsr0h	equ	0xFEA
 20426                           fsr0l	equ	0xFE9
 20427                           wreg	equ	0xFE8
 20428                           indf1	equ	0xFE7
 20429                           postdec1	equ	0xFE5
 20430                           fsr1h	equ	0xFE2
 20431                           fsr1l	equ	0xFE1
 20432                           indf2	equ	0xFDF
 20433                           postinc2	equ	0xFDE
 20434                           postdec2	equ	0xFDD
 20435                           plusw2	equ	0xFDB
 20436                           fsr2h	equ	0xFDA
 20437                           fsr2l	equ	0xFD9
 20438                           status	equ	0xFD8
 20439                           
 20440                           	psect	temp
 20441  000048                     btemp:
 20442                           	opt stack 0
 20443  000048                     	ds	1
 20444  0000                     int$flags	set	btemp
 20445  0000                     wtemp6	set	btemp+1
 20446                           tosu	equ	0xFFF
 20447                           tosh	equ	0xFFE
 20448                           tosl	equ	0xFFD
 20449                           pclatu	equ	0xFFB
 20450                           pclath	equ	0xFFA
 20451                           tblptru	equ	0xFF8
 20452                           tblptrh	equ	0xFF7
 20453                           tblptrl	equ	0xFF6
 20454                           tablat	equ	0xFF5
 20455                           prodh	equ	0xFF4
 20456                           prodl	equ	0xFF3
 20457                           intcon	equ	0xFF2
 20458                           intcon2	equ	0xFF1
 20459                           postinc0	equ	0xFEE
 20460                           plusw0	equ	0xFEB
 20461                           fsr0h	equ	0xFEA
 20462                           fsr0l	equ	0xFE9
 20463                           wreg	equ	0xFE8
 20464                           indf1	equ	0xFE7
 20465                           postdec1	equ	0xFE5
 20466                           fsr1h	equ	0xFE2
 20467                           fsr1l	equ	0xFE1
 20468                           indf2	equ	0xFDF
 20469                           postinc2	equ	0xFDE
 20470                           postdec2	equ	0xFDD
 20471                           plusw2	equ	0xFDB
 20472                           fsr2h	equ	0xFDA
 20473                           fsr2l	equ	0xFD9
 20474                           status	equ	0xFD8


Data Sizes:
    Strings     21
    Constant    148
    Data        24
    BSS         282
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160    144     155
    BANK1           256      0     211
    BANK2           256     55     125
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    readUartMessage$3606	PTR FTN()void  size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 

    SynthReadData@data	PTR unsigned char  size(2) Largest target is 0

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 10
		 -> GetIntFromUartData@dataRegArr(BANK0[10]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK2[29]), 
		 -> SynthReadData@eepromDataArray(BANK2[20]), DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK2[29]), 
		 -> SynthReadData@eepromDataArray(BANK2[20]), DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    Make32bitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    GetUint16FromBitArray@bitarray	PTR unsigned char  size(2) Largest target is 12
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    FillArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK2[29]), 
		 -> SynthReadData@eepromDataArray(BANK2[20]), DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SynthReadData@TxMsg(BANK2[29]), SynthReadData@eepromDataArray(BANK2[20]), 
		 -> DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    crc8@dataArray	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[18]), SynthReadData@TxMsg(BANK2[29]), DacReadValue@TxMsg(BANK0[7]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK1[20]), 

    GroupDAC@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 64
		 -> sampleArray(BANK1[64]), 

    IOCB5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB5_DefaultInterruptHandler(), 

    IOCB5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCB5_DefaultInterruptHandler(), 

    IOCB4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB4_DefaultInterruptHandler(), 

    IOCB4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCB4_DefaultInterruptHandler(), 

    UpdateSynthFreq@data	PTR unsigned char  size(2) Largest target is 0

    DacReadValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    DacSetValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    FlashReadUart@data	PTR unsigned char  size(2) Largest target is 0

    WriteUartMessage@dataBuf	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[18]), SynthReadData@TxMsg(BANK2[29]), DacReadValue@TxMsg(BANK0[7]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), 

    SetChannelMode@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _GetMcuRunTime->___lldiv
    _GetMcuFwVersion->_ZeroArray
    _GroupFlashMemory->_FlashReadCondition
    _FlashReadCondition->_ZeroArray
    _FlashEreaseMem->_SendAckMessage
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _testLeds->_SendAckMessage
    _ResetMcu->_SendAckMessage
    _SetChannelMode->_SendAckMessage
    _keepAliveSignalUart->_SendAckMessage
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB5_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendSystemStartAck->_SendAckMessage
    _SendAckMessage->_ZeroArray
    _ZeroArray->_memset
    _WriteUartMessage->_EUSART1_Write
    _StoreIntInEeprom->_make8
    _EepromWrite->_DATAEE_WriteByte
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _SWSPI_Synth_send_bits->_FillArray
    _FillArray->_memset
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    ___lmul->_EepromRead
    _EepromRead->_DATAEE_ReadByte
    _CheckFlashPrecentage->___ftdiv
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _main->_readUartMessage
    _readUartMessage->_GroupAdc
    _readUartMessage->_GroupControlMcu
    _readUartMessage->_GroupDAC
    _readUartMessage->_GroupFlashMemory
    _readUartMessage->_GroupStatusAndVersion
    _readUartMessage->_GroupSynthesizers
    _UpdateSynthFreq->_SWSPI_send_word
    _SynthReadData->_ReadIntFromEeprom
    _SetSynthOper->_InitSynth
    _GroupFlashMemory->_FlashReadUart
    _FlashReadUart->_GetIntFromUartData
    _DacSetValue->_SWSPI_send_word
    _GetIntFromUartData->_strtol
    _DacReadValue->_ReadIntFromEeprom
    _SynthLdDetect->_InitSynth
    _PLLInitialize->_InitSynth
    _InitSynth->_ReadIntFromEeprom
    _DacInit->_ReadIntFromEeprom
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _ReadIntFromEeprom->_pow
    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _GroupSynthesizers->_SynthReadData

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  940742
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
                 _SendSystemStartAck
                      _SetMcuRunTime
                       _SetMcuSystem
                      _SynthLdDetect
                 _keepAliveSignalLed
                _keepAliveSignalUart
                    _readUartMessage
 ---------------------------------------------------------------------------------
 (1) _readUartMessage                                      7     7      0  470095
                                            137 BANK0      7     7      0
                       _EUSART1_Read
                           _GroupAdc *
                    _GroupControlMcu *
                           _GroupDAC *
                   _GroupFlashMemory *
              _GroupStatusAndVersion *
                  _GroupSynthesizers *
                _InitRxMessageParams
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    2899
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupSynthesizers                                    3     1      2  253163
                                            134 BANK0      3     1      2
                       _SetSynthOper
                      _SynthReadData
                    _UpdateSynthFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateSynthFreq                                     11     9      2   29069
                                             42 BANK0     11     9      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (3) _SynthReadData                                       57    55      2  104580
                                            104 BANK0      2     0      2
                                              0 BANK2     55    55      0
                  _ReadIntFromEeprom
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _SetSynthOper                                         1     1      0  119359
                                            111 BANK0      1     1      0
                          _InitSynth
                     _SendAckMessage
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (2) _GroupStatusAndVersion                                4     1      3   13626
                                            134 BANK0      3     1      2
                    _GetMcuFwVersion
                      _GetMcuRunTime
 ---------------------------------------------------------------------------------
 (3) _GetMcuRunTime                                       17    17      0    4498
                                             36 COMRAM     2     2      0
                                              0 BANK0     15    15      0
                   _WriteUartMessage
                            ___lldiv
                            ___llmod
                               _crc8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _GetMcuFwVersion                                     33    33      0    9097
                                             35 COMRAM     7     7      0
                                              0 BANK0     26    26      0
                   _WriteUartMessage
                          _ZeroArray
                             ___wmul
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _GroupFlashMemory                                     3     1      2   39925
                                            134 BANK0      3     1      2
                     _FlashEreaseMem
                 _FlashReadCondition
                      _FlashReadUart
 ---------------------------------------------------------------------------------
 (3) _FlashReadUart                                       95    93      2   21465
                                             39 BANK0     95    93      2
                  _FLASH_IsWriteDone
                     _FLASH_ReadByte
                 _GetIntFromUartData
                     _SendAckMessage
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _FLASH_ReadByte                                       4     0      4     370
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _FlashReadCondition                                  13    13      0    7960
                                             35 COMRAM    13    13      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _FlashEreaseMem                                       0     0      0   10438
                     _SendAckMessage
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupDAC                                             3     1      2  132796
                                            134 BANK0      3     1      2
                       _DacReadValue
                        _DacSetValue
 ---------------------------------------------------------------------------------
 (3) _DacSetValue                                         15    13      2   28790
                                             42 BANK0     15    13      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  33    25      8    6841
                                              6 BANK0     33    25      8
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2723
                                             37 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _DacReadValue                                        18    16      2  103848
                                            104 BANK0     18    16      2
                  _ReadIntFromEeprom
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (2) _GroupControlMcu                                      4     1      3   15177
                                            134 BANK0      3     1      2
                           _ResetMcu
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0    7607
                                             43 COMRAM     3     3      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetMcu                                             0     0      0    7539
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupAdc                                             3     1      2    7753
                                            134 BANK0      3     1      2
                     _SetChannelMode
 ---------------------------------------------------------------------------------
 (3) _SetChannelMode                                       2     0      2    7691
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      46
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalUart                                  0     0      0    7539
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SynthLdDetect                                        0     0      0  112203
                     _BlinkErrorLeds
                          _InitSynth
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     904
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _BlinkErrorLeds                                       6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0     294
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     294
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0     196
          _IOCB4_SetInterruptHandler
          _IOCB5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _IOCB5_SetInterruptHandler                            2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _IOCB4_SetInterruptHandler                            2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     592
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     592
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendSystemStartAck                                   0     0      0    7539
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _SendAckMessage                                       8     7      1    7539
                                             35 COMRAM     8     7      1
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _crc8                                                 9     5      4    1610
                                             23 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ZeroArray                                            4     0      4    2899
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _WriteUartMessage                                     7     3      4    1452
                                             24 COMRAM     7     3      4
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0  222879
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        0     0      0  112789
                          _FillArray
                          _InitSynth
 ---------------------------------------------------------------------------------
 (4) _InitSynth                                            7     7      0  111209
                                            104 BANK0      7     7      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_CE_Pin                                     2     1      1     425
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              5     5      0  110090
                                            104 BANK0      5     5      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _StoreIntInEeprom                                     9     2      7    3779
                                             32 COMRAM     9     2      7
                        _EepromWrite
                              _make8
 ---------------------------------------------------------------------------------
 (5) _EepromWrite                                          2     1      1     338
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_WriteByte                                     3     2      1     186
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (4) _SWSPI_send_word                                      9     4      5   10380
                                             40 COMRAM     5     0      5
                                             38 BANK0      4     4      0
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5    1595
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SWSPI_Synth_send_bits                               42    38      4    4135
                                             36 COMRAM     4     0      4
                                              0 BANK0     38    38      0
                          _FillArray
                    _Make32bitsArray
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _Make32bitsArray                                     10     4      6     344
                                             23 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (6) _FillArray                                            5     0      5    1580
                                             31 COMRAM     5     0      5
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     677
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _SWSPI_DAC_send_bits                                  3     2      1    2041
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Data_Pin                                       2     1      1     757
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Clk_Pin                                        2     1      1     937
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _ReadIntFromEeprom                                   23    19      4   95674
                                             81 BANK0     23    19      4
                         _EepromRead
                           ___awtoft
                            ___fttol
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     636
                                             25 COMRAM    12     4      8
                         _EepromRead (ARG)
 ---------------------------------------------------------------------------------
 (5) _EepromRead                                           1     1      0      62
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_ReadByte                                      1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   14121
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          16    16      0  105300
                                             81 BANK0     16    16      0
                  _ADC_GetConversion
                   _FlashSampleWrite
              _GetUint16FromBitArray
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (5) _pow                                                 17    11      6   88933
                                             64 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (6) _log                                                  5     2      3   28922
                                             46 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _exp                                                  9     6      3   47974
                                             55 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (7) _ldexp                                                7     2      5     539
                                             46 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (7) _floor                                                8     5      3   11854
                                             47 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (7) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     911
                                             24 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6    1098
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) ___altoft                                            10     6      4    3367
                                             46 COMRAM     2     2      0
                                             39 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (7) _eval_poly                                           12     5      7   13735
                                             46 COMRAM     2     2      0
                                             36 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___wmul                                               6     2      4    2322
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     335
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             4     1      3    3476
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _GetUint16FromBitArray                               11     7      4     440
                                             23 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1631
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6     992
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                         18    18      0     767
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     767
                            ___lwmod
 ---------------------------------------------------------------------------------
 (13) ___lwmod                                             5     1      4     767
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (12) _PIN_MANAGER_IOC                                     0     0      0       0
                          _IOCB4_ISR
                          _IOCB5_ISR
 ---------------------------------------------------------------------------------
 (13) _IOCB5_ISR                                           0     0      0       0
                   Absolute function *
      _IOCB5_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (14) _IOCB5_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _IOCB4_ISR                                           0     0      0       0
                   Absolute function *
      _IOCB4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (14) _IOCB4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _MEMORY_ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     _GetUint16FromBitArray
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _FillArray
             _memset
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _StoreIntInEeprom
         _EepromWrite
           _DATAEE_WriteByte
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
       _FillArray
         _memset
       _InitSynth
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
         _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SendSystemStartAck
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
         _IOCB4_SetInterruptHandler
         _IOCB5_SetInterruptHandler
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _SynthLdDetect
     _BlinkErrorLeds
     _InitSynth
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _FillArray
             _memset
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _StoreIntInEeprom
         _EepromWrite
           _DATAEE_WriteByte
         _make8
       _SwSpi_Set_CE_Pin
     ___awmod
   _keepAliveSignalLed
   _keepAliveSignalUart
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _readUartMessage
     _EUSART1_Read
     _GroupAdc *
       _SetChannelMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupControlMcu *
       _ResetMcu
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _testLeds
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupDAC *
       _DacReadValue
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _DacSetValue
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _GroupFlashMemory *
       _FlashEreaseMem
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _ZeroArray
           _memset
       _FlashReadCondition
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _FlashReadUart
         _FLASH_IsWriteDone
         _FLASH_ReadByte
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
     _GroupStatusAndVersion *
       _GetMcuFwVersion
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         ___wmul
         _crc8
       _GetMcuRunTime
         _WriteUartMessage
           _EUSART1_Write
         ___lldiv
         ___llmod
         _crc8
     _GroupSynthesizers *
       _SetSynthOper
         _InitSynth
           _ReadIntFromEeprom
             _EepromRead
               _DATAEE_ReadByte
             ___awtoft
               ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _pow
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___wmul
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___wmul
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
           _SWSPI_send_word
             _SWSPI_DAC_send_bits
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SWSPI_Synth_send_bits
               _FillArray
                 _memset
               _Make32bitsArray
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
             _make8
           _StoreIntInEeprom
             _EepromWrite
               _DATAEE_WriteByte
             _make8
           _SwSpi_Set_CE_Pin
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _SwSpi_Set_CE_Pin
       _SynthReadData
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _UpdateSynthFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _ZeroArray *
       _memset
     _crc8 *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
     _IOCB4_ISR
       Absolute function(Fake) *
       _IOCB4_DefaultInterruptHandler *
     _IOCB5_ISR
       Absolute function(Fake) *
       _IOCB5_DefaultInterruptHandler *
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100     37      7D       8       48.8%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      D3       6       82.4%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     90      9B       4       96.9%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     232       9        0.0%
DATA                 0      0     232      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Mar 27 17:01:21 2018

              __size_of_SendSystemStartAck 000C                          ??_GetMcuFwVersion 0024  
               __end_of_keepAliveSignalLed 42BE                               ___altoft@exp 002F  
                 _eusart1TxBufferRemaining 01D2                         readUartMessage@idx 00ED  
                 GetIntFromUartData@idxCon 0084                            _GroupControlMcu 3FA4  
              __end_of_keepAliveSignalUart 439C                              ___altoft@sign 0030  
               __size_of_FLASH_IsWriteDone 000E                                         l60 35EA  
                 GetIntFromUartData@recVal 007B                   GetIntFromUartData@retVal 007C  
                      __end_of_BlinkOkLeds 382A                            _SWSPI_send_word 3004  
                      ___wmul@multiplicand 001A         __size_of_IOCB4_SetInterruptHandler 000A  
                          _timer0ReloadVal 0046                 ?_IOCB4_SetInterruptHandler 0018  
                             __CFG_CP0$OFF 000000                               __CFG_CP1$OFF 000000  
                             __CFG_CP2$OFF 000000                               __CFG_CP3$OFF 000000  
                             ___ftadd@exp1 0083                               ___ftadd@exp2 0082  
                             ___ftadd@sign 0081                                ?_MEMORY_ISR 0001  
                                      l122 3FF8                                        l202 177A  
                                      l211 1610                                        l203 15D4  
                                      l221 16C8                                        l213 1628  
                                      l126 112C                                        l222 168C  
                                      l206 15E0                                        l127 0FF2  
                                      l215 1640                                        l207 160A  
                                      l320 2392                                        l224 16E8  
                                      l217 165E                                        l234 3EBC  
                                      l330 128A                                        l226 1720  
                                      l411 2902                                        l235 3EA6  
                                      l331 13C0                                        l219 1664  
                                      l412 2918                                        l332 12AC  
                                      l228 1728                                        l333 12C8  
                                      l318 2370                                        l334 12D8  
                                      l326 122E                                        l319 2370  
                                      l335 1316                                        l512 0E9A  
                                      l328 127A                                        l513 0E7C  
                                      l507 0D7E                                        l419 27D6  
                                      l523 2114                                        l524 2104  
                                      l509 0F88                                        l517 0F6A  
                                      l533 3438                                        l534 3420  
                                      l519 0FBC                                        l535 342C  
                                      l551 0D14                                        l543 0BAE  
                                      l704 3A14                                        l632 3048  
                                      l528 217C                                        l705 3A1E  
                                      l561 2AAC                                        l545 0C96  
                                      l642 3976                                        l650 2CD2  
                                      l562 2A80                                        l538 345C  
                                      l546 0CA4                                        l643 3942  
                                      l723 3D38                                        l563 2A86  
                                      l539 3468                                        l644 395C  
                                      l652 2D00                                        l636 30AA  
                                      l724 3D10                                        l548 0CB0  
                                      l645 3966                                        l653 2D0C  
                                      l733 3D24                                        l725 3D1A  
                                      l557 2A40                                        l734 3D2E  
                                      l910 3D06                                        l558 2A18  
                                      l559 2A1E                                        l744 3D74  
                                      l657 39D2                                        l745 3D4C  
                                      l658 3996                                        l770 425C  
                                      l754 3D60                                        l746 3D56  
                                      l675 39BE                                        l667 39AA  
                                      l659 39A0                                        l755 3D6A  
                                      l676 39C8                                        l668 39B4  
                                      l908 3CE4                                        l765 4260  
                                      l909 3D08                                        l686 3A28  
                                      l766 4258                                        l687 39EC  
                                      l696 3A00                                        l688 39F6  
                                      l697 3A0A                                        l895 3B9A  
                                      l897 3BC0                               __CFG_CPB$OFF 000000  
                             __CFG_CPD$OFF 000000                       readUartMessage@chRec 00EF  
                        ??_Make32bitsArray 001E                                 _SYNTH_REGS 0601  
                                      _exp 13D6                                        _log 1E2E  
                                      _pow 1B32                               ___awmod@sign 001D  
                                      prod 000FF3                                        tosl 000FFD  
                                      wreg 000FE8             ?_InitSystemApplicationManagers 0001  
                             __CFG_LVP$OFF 000000                 __end_of_FlashReadCondition 2298  
                           InitSynth@cType 00CC                               ___ftdiv@cntr 0063  
                       __size_of_IOCB4_ISR 0022                         __size_of_IOCB5_ISR 0022  
                             ___ftdiv@sign 0068                                       l1045 2DFA  
                                     l1046 2DB2                                       l1310 32C2  
                                     l1303 41EE                                       l1048 2DD2  
                                     l2040 1C1E                                       l2024 407C  
                                     l1056 3EF6                                       l1304 41E0  
                                     l1049 2DD4                                       l1401 3686  
                                     l2041 1BFC                                       l2025 406C  
                                     l1162 401C                                       l1402 364E  
                                     l2042 1CA4                                       l1410 1D22  
                                     l1314 3272                                       l1403 3682  
                                     l1315 3282                                       l2300 1E72  
                                     l2036 1B7C                                       l1420 382C  
                                     l1412 1D98                                       l1316 3292  
                                     l1324 3DA4                                       l2037 1B6C  
                                     l1501 0872                                       l1317 329A  
                                     l1325 3D8A                                       l1333 3F2A  
                                     l1422 3830                                       l1318 32A2  
                                     l1334 3F0E                                       l2039 1B94  
                                     l1431 3938                                       l1423 3834  
                                     l1503 08BE                                       l1319 32B2  
                                     l1327 3D90                                       l2240 1594  
                                     l1440 2052                                       l1424 3838  
                                     l1408 1D02                                       l1328 3D96  
                                     l1336 3F1C                                       l1441 1F78  
                                     l1425 3866                                       l1505 08EC  
                                     l2306 2B94                                       l2234 13F0  
                                     l1434 3E24                                       l2307 2B16  
                                     l1419 386A                                       l1435 3DFA  
                                     l1515 26AC                                       l2260 2C10  
                                     l2236 142A                                       l2245 295C  
                                     l2237 1464                                       l1429 38FA  
                                     l1285 3FB6                                       l2254 3174  
                                     l2246 294E                                       l2262 2C42  
                                     l2238 1494                                       l1390 3B4A  
                                     l1286 3FAA                                       l2263 2C36  
                                     l2239 15BE                                       l2271 40D6  
                                     l2191 18A6                                       l2175 17EE  
                                     l1295 413C                                       l2248 2976  
                                     l1608 3A4E                                       l2192 1912  
                                     l1288 3FB0                                       l1296 4130  
                                     l2249 29F2                                       l1609 3A62  
                                     l2281 40FC                                       l2185 186A  
                                     l2177 1806                                       l2258 2BC6  
                                     l2194 1936                                       l2186 187A  
                                     l1298 4136                                       l1811 2ED2  
                                     l2195 1972                                       l2179 185A  
                                     l1812 2EC8                                       l2276 4210  
                                     l2188 1894                                       l1901 4164  
                                     l1389 3B66                                       l1814 2F06  
                                     l2286 422E                                       l1815 2EF0  
                                     l1911 23CA                                       l2199 42FA  
                                     l1591 3550                                       l1920 245A  
                                     l1817 2F2E                                       l1681 34A4  
                                     l1913 2442                                       l1585 3500  
                                     l1818 2F24                                       l1842 19D8  
                                     l1682 3498                                       l1922 2482  
                                     l1914 2432                                       l2298 1E4E  
                                     l1586 3518                                       l1851 1A68  
                                     l1907 3C26                                       l1499 0844  
                                     l1780 3598                                       l1588 353E  
                                     l1781 3590                                       l1589 3532  
                                     l1870 1B0C                                       l1846 1A02  
                                     l1919 2466                                       l1951 335A  
                                     l1792 3E40                                       l1856 1A5E  
                                     l1784 35B0                                       l1952 3368  
                                     l1865 1A9C                                       l1857 1A54  
                                     l1961 36EA                                       l1785 35BA  
                                     l1777 3576                                       l1866 1A92  
                                     l1890 24BE                                       l1962 36F8  
                                     l1786 35C8                                       l1778 3582  
                                     l1875 25B4                                       l7011 3268  
                                     l1883 320C                                       l1947 3326  
                                     l1868 1AC0                                       l1892 24E6  
                                     l1884 323C                                       l1948 331A  
                                     l1877 25DC                                       l1869 1ADC  
                                     l1893 2518                                       l1957 36C2  
                                     l1878 261A                                       l1894 2528  
                                     l1958 36B6                                       l1879 2640  
                                     l1968 3898                                       l1896 2540  
                                     l1969 388C                                       l1897 2550  
                                     l8103 0F6A                                       l6351 3778  
                                     l8031 1D88                                       l8009 1CFA  
                                     ?_exp 0097                                       l8221 2DAA  
                                     l6613 37D6                                       ?_log 008E  
                                     l8063 0D76                                       l8049 1DEC  
                                     l8091 0E7C                                       l7277 406C  
                                     l8191 3630                                       l8177 35DA  
                                     l7707 2CCA                                       l8603 2840  
                                     l7635 3CD2                                       l8283 1306  
                                     l8357 27C6                                       l8293 1376  
                                     l8703 0FEA                                       l7495 38EA  
                                     l8615 2902                                       l8367 280C  
                                     l8473 0CA8                                       l7579 1594  
                                     l8555 269C                                       l8467 0C9C  
                                     l8567 2728                                       l7873 3066  
                                     l7877 3074                                       ?_pow 00A0  
                                     STR_1 0695                                       STR_2 0695  
                                     STR_3 0695                                       STR_4 0695  
                                     STR_5 0695                                       STR_6 0695  
                                     STR_7 0695                                       STR_8 0695  
                                     STR_9 0695                         EepromWrite@address 001C  
                                     _LATA 000F89                                       _LATB 000F8A  
                                     _LATC 000F8B                                       _LATD 000F8C  
                                     _LATE 000F8D                                       u7020 2BE6  
                                     u8010 1DEC                                       u6420 2F38  
                                     u7028 2BEA                                       u8021 1E24  
                                     u6510 19CA                                       u8200 36C6  
                                     u5720 359C                                       u5800 42B0  
                                     u6610 1A70                                       u7075 3F04  
                                     u6380 2EBA                                       u6540 19F4  
                                     u7076 3F06                                       u6701 24CE  
                                     u8301 11FC                                       u7510 2D1E  
                                     u8230 3630                                       u6471 1996  
                                     u5584 3676                                       u6640 1AA4  
                                     u7280 146E                                       u7440 385E  
                                     u7600 40C8                                       u5585 3670  
                                     u6481 19AA                                       u6570 1A32  
                                     u7290 1470                                       u8090 0DB2  
                                     u5818 42B2                                       u8410 280C  
                                     u8170 332A                                       u8155 3FA0  
                                     u9107 37B8                                       u8156 3FA2  
                                     u7700 3018                                       u6901 25C4  
                                     u9117 2D20                                       u7445 3854  
                                     u8421 2096                                       u6830 246C  
                                     u7390 1BE2                                       u9127 37FC  
                                     u9047 13AE                                       u8280 2DD8  
                                     u8360 1376                                       u8520 344A  
                                     u8600 0D08                                       u6681 24A6  
                                     u9137 3816                                       u9057 35F2  
                                     u7730 30A4                                       u7810 17F6  
                                     u8530 344C                                       u6771 23AE  
                                     u9147 10B8                                       u9067 3602  
                                     u6860 319C                                       u7580 40F8  
                                     u9077 3612                                       u8381 30C2  
                                     u6790 23E8                                       u8390 3104  
                                     u8295 2DF6                                       u9087 3622  
                                     u8296 2DF8                                       u7840 1830  
                                     u8480 340E                                       u6881 259C  
                                     u9097 379E                                       u8650 2728  
                                     u8490 3410                                       u6795 23E0  
                                     u8395 30F8                                       u7940 438C  
                                     u6868 319E                                       u6980 2968  
                                     u7860 1840                                       u7941 4388  
                                     u8670 22F8                                       u8910 2EA6  
                                     u8590 0D04                                       u8665 22A2  
                                     u8690 233C                                       u8770 10CC  
                                     u7980 1D3C                                       u8908 1754  
                                     u8909 1772                   ??_SwSpi_Set_Synth_Le_Pin 0019  
                                     _WPUB 000F61                              _EUSART1_Write 3CD0  
                                     _crc8 3B38                    ??_InitAdcApplicationMgr 0018  
                                     _data 013B                                       _main 34EE  
                             ___ftpack@arg 0018                              ?_EUSART1_Read 0001  
                             ___ftpack@exp 001B                            _TMR0_StartTimer 43EC  
                          __end_of_DacInit 291E                                       fsr0h 000FEA  
                                     fsr1h 000FE2                                       fsr2h 000FDA  
                                     fsr0l 000FE9                                       indf1 000FE7  
                                     indf2 000FDF                                       fsr1l 000FE1  
                                     fsr2l 000FD9                                       btemp 0048  
                            __CFG_BORV$190 000000                                       exp@x 0097  
                                     log@x 008E                          ?_FLASH_WriteBlock 001D  
                         ?_ClearMcuRunTime 0001                                       pow@x 00A0  
                                     pow@y 00A3                                       prodh 000FF4  
                                     prodl 000FF3                  GroupStatusAndVersion@data 00E6  
            __size_of_CheckFlashPrecentage 00AE                                       start 00DC  
                            __CFG_IESO$OFF 000000                          DacReadValue@TxMsg 00D1  
                      __end_of_EepromWrite 4382                         ??_FLASH_WriteBlock 0023  
                            _adcSampleMode 003D                               ___ftmul@cntr 0076  
                             ___param_bank 000000                               ___ftmul@sign 0077  
                           _BlinkErrorLeds 376E                               ___fttol@exp1 0086  
                __size_of_DATAEE_WriteByte 0036                                      ??_exp 0031  
                                    ??_log 0031                               ___fttol@lval 0082  
                                    ??_pow 0031                    __end_of_TMR0_Initialize 3F70  
                   _ReadIntFromEeprom$3600 00BC                     _ReadIntFromEeprom$3601 00BF  
           __size_of_OSCILLATOR_Initialize 000E              __end_of_OSCILLATOR_Initialize 4374  
                                    ?_crc8 0018                 SWSPI_DAC_send_bits@phrType 001C  
                                    ?_main 0001                                      _EEADR 000FA9  
                          __end_of___ftadd 1B32                     GetUint16FromBitArray@i 0021  
                                    STR_10 0695                                      STR_11 0695  
                                    STR_20 06A1                                      STR_12 0695  
                                    STR_21 06A1                                      STR_13 0695  
                                    STR_22 06A1                                      STR_14 0695  
                                    STR_23 06A1                                      STR_15 0695  
                                    STR_24 06A1                                      STR_16 0695  
                                    STR_25 06A1                                      STR_17 0695  
          __size_of_SwSpi_Set_Dac_Sync_Pin 001C                                      STR_26 06A1  
                                    STR_18 06A1                                      STR_27 06A1  
                                    STR_19 06A1                                      STR_28 06A1  
                          __end_of___awmod 35D2                                      STR_29 06A1  
                          __end_of___ftdiv 2672          __end_of_IOCB4_SetInterruptHandler 43D0  
                          __end_of___ftneg 4172                            __end_of___lldiv 337A  
                               _EepromRead 43D0                            __end_of___ftmul 258A  
                                    _T0CON 000FD5                            __end_of___llmod 370A  
                          __end_of___ftsub 3C50                            __end_of___fttol 2494  
                             _SYNTH_ADDRES 0639                             __CFG_DEBUG$OFF 000000  
                          InitSynth@regNum 00CE                            __end_of___lwmod 3C92  
                      StoreIntInEeprom@idx 0029                                      i2l920 403C  
                                    i2l921 405C                                      i2l914 3E90  
                                    i2l850 0086                                      i2l915 3E8C  
                                    i2l843 005E                                      i2l852 0090  
                                    i2l845 006A                                      i2l848 007A  
                      StoreIntInEeprom@val 0028                                      _TMR0H 000FD7  
                                    _TMR0L 000FD6                                      _TRISA 000F92  
                                    _TRISB 000F93                                      _TRISC 000F94  
                                    _TRISD 000F95                                      _TRISE 000F96  
                      _SWSPI_DAC_send_bits 393A          __size_of_TMR0_SetInterruptHandler 000A  
                            __CFG_WRT0$OFF 000000                              __CFG_WRT1$OFF 000000  
               __end_of_GetIntFromUartData 1E2E                              __CFG_WRT2$OFF 000000  
                      ___lmul@multiplicand 001E                  ?_TMR0_SetInterruptHandler 0018  
                            __CFG_WRT3$OFF 000000                               ___lltoft@exp 0028  
                     _EUSART1_Transmit_ISR 3E64                             __CFG_EBTR0$OFF 000000  
                           __CFG_FCMEN$OFF 000000                             __CFG_EBTR1$OFF 000000  
                           __CFG_EBTR2$OFF 000000                             __CFG_EBTR3$OFF 000000  
                        ?_WriteUartMessage 0019                           __end_of_TMR0_ISR 3004  
                            __CFG_WRTB$OFF 000000                              __CFG_WRTC$OFF 000000  
                            __CFG_WRTD$OFF 000000                            DacSetValue@data 008A  
                          _DATAEE_ReadByte 42FE                             __CFG_EBTRB$OFF 000000  
                            ___awtoft@sign 0023                    __end_of_PIN_MANAGER_IOC 4358  
                                    crc8@i 001F                                      _make8 382A  
           __size_of_SWSPI_Synth_send_bits 00C6                      __end_of_GetMcuRunTime 2756  
                                    _count 0138                                      _floor 291E  
                                    _ldexp 2BAC                                      _frexp 314C  
                                    _errno 0134              __end_of_SWSPI_Synth_send_bits 2D40  
                          __end_of_isalpha 40DE                            __end_of_isdigit 4218  
                                    _group 00F3             __size_of_GetUint16FromBitArray 0068  
                       ??_WriteUartMessage 001D                         __CFG_MCLRE$EXTMCLR 000000  
                            ___ftpack@sign 001C                    ??_GroupStatusAndVersion 0031  
            __end_of_GetUint16FromBitArray 36A4                            __end_of_isspace 4104  
                           ?_EUSART1_Write 0001                                ?_AdcConvert 0001  
                           __CFG_BOREN$OFF 000000                            __end_of_isupper 4236  
                                    pclath 000FFA                                      tablat 000FF5  
                        ??_UpdateSynthFreq 0030                                      pow@yi 00AD  
                           ??_EUSART1_Read 0018                             FillArray@array 0020  
                                    plusw0 000FEB                                      plusw2 000FDB  
                                    status 000FD8                             FillArray@value 0024  
                                    wtemp6 0049                       ReadIntFromEeprom@idx 00C7  
                           __CFG_HFOFST$ON 000000                            __end_of_toupper 42FE  
           SwSpi_Set_Synth_Le_Pin@cPinMode 0018                     __size_of_SynthLdDetect 00D6  
                  __end_of_GroupControlMcu 3FD4                        __size_of_MEMORY_ISR 0004  
                           __CFG_PBADEN$ON 000000                                exp@exponent 009D  
           CheckFlashPrecentage@precentage 007C                       ?_SWSPI_DAC_send_bits 001A  
                   __end_of_BlinkErrorLeds 37CC            ??_IOCB4_DefaultInterruptHandler 0001  
                              ldexp@newexp 0091                    __end_of_SWSPI_send_word 30AE  
                              _BlinkOkLeds 37CC                    WriteUartMessage@dataBuf 0019  
                          __initialization 337A                                log@exponent 0091  
                             __end_of_crc8 3B86                 __end_of_EUSART1_Initialize 3DF4  
                             __end_of_main 3562                         DacReadValue@regNum 00CC  
                        __end_of_IOCB4_ISR 41DA                          __end_of_IOCB5_ISR 41B8  
                  FLASH_ReadByte@flashAddr 0018                ?_INTERRUPT_InterruptManager 0001  
                         __end_of_GroupDAC 3F3C                     __size_of_SynthReadData 02B0  
                          _readUartMessage 15CC                           __end_of_GroupAdc 41FA  
                                   ??_crc8 001C                                     ??_main 0031  
                            ___fttol@sign1 0081                          ?_SwSpi_Set_CE_Pin 0018  
                            __activetblptr 000002                    __size_of_FLASH_ReadByte 0012  
                         __end_of_ResetMcu 4366                         __size_of_FillArray 001C  
                             _writeAddress 003E                         ??_SwSpi_Set_CE_Pin 0019  
                    ?_EUSART1_Transmit_ISR 0001                    __end_of_TMR0_StartTimer 43F0  
                                   ?_make8 0018                                     _ADCON0 000FC2  
                                   _ADCON1 000FC1                                     _ADCON2 000FC0  
                                   ?_floor 008F                  FLASH_WriteBlock@writeAddr 001D  
                                   ?_ldexp 008E                                     ?_frexp 0018  
                         __end_of___altoft 34EE                           ___llmod@dividend 0018  
                                   _ADRESH 000FC4                                     _ADRESL 000FC3  
                                   _EEDATA 000FA8                                  ??_DacInit 00C8  
                                   _EECON2 000FA7                           __end_of___awtoft 3E64  
                                   _ANSELA 000F38                                     _ANSELB 000F39  
                                   _ANSELC 000F3A                                     _ANSELD 000F3B  
                                   _ANSELE 000F3C                           __end_of___ftpack 2F58  
           ?_IOCB5_DefaultInterruptHandler 0001                           __end_of___lltoft 38E2  
                        _FlashReadUart$609 00DC                          ?_FlashSampleWrite 002D  
                                   i2l2010 3C66                                     i2l2011 3C5E  
                                   i2l1116 2F88                                     i2l1117 2FAA  
                                   i2l2014 3C7E                                     i2l1118 2FCC  
                                   i2l2015 3C88                                     i2l1119 2FEE  
                           __CFG_WDTEN$OFF 000000                       StoreIntInEeprom@data 0021  
                                   _TABLAT 000FF5                                _EepromWrite 4374  
                                   _RCREG1 000FAE                           __end_of___lwtoft 4196  
                  __size_of_FlashEreaseMem 0052                  __size_of_FLASH_EraseBlock 0034  
                                   _RCSTA1 000FAB                          SynthReadData@data 00C8  
          __size_of_SwSpi_Set_Synth_Le_Pin 003C                                     _OSCCON 000FD3  
                                   _SPBRG1 000FAF                     _SwSpi_Set_Dac_Sync_Pin 4254  
                  __size_of_SwSpi_Data_Pin 0056                   GroupSynthesizers@request 00E8  
                       ??_FlashSampleWrite 0060                                     _TXREG1 000FAD  
                                   _TXSTA1 000FAC                         __size_of_InitSynth 0276  
                    ??_SWSPI_DAC_send_bits 001B                             _Timer0_SynthLd 00FA  
                 __end_of_GroupFlashMemory 3DBC                            ?_BlinkErrorLeds 0001  
                           __CFG_PWRTEN$ON 000000                             __CFG_XINST$OFF 000000  
                             _synthLdRxCnt 0043                               _synthLdTxCnt 0042  
                                   _cState 00F4                                     ___ftge 31DC  
                                   ___lmul 3A3E                  SWSPI_Synth_send_bits@data 0025  
                                   ___wmul 4104                                  ??___ftadd 007E  
                SWSPI_Synth_send_bits@mask 0080                                  ??___awmod 001C  
                                ??___ftdiv 0060                                  ??___ftneg 001B  
                                ??___lldiv 0020                                  ??___ftmul 006F  
                    __end_of_PLLInitialize 3CD0                                  ??___llmod 0020  
                                ??___ftsub 002F                                  ??___fttol 007C  
                                ??___lwmod 0005             SwSpi_Set_Dac_Sync_Pin@cPinMode 0018  
                         ?_TMR0_Initialize 0001                                     _memset 4062  
                       __end_of_DAC_ADDRES 065C                                     clear_0 33C0  
                                   clear_1 33CC                                     clear_2 33D8  
                                   clear_3 33E4                            ___awmod@divisor 001A  
                      __size_of_AdcConvert 021C                            ___awmod@counter 001C  
                  __end_of_DATAEE_ReadByte 4312                                ?_EepromRead 0001  
                                   _strtol 17AE                                     floor@i 0092  
                    __end_of_SwSpi_Clk_Pin 3A3E                                     floor@x 008F  
                    ___ftmul@f3_as_product 0073                              _SynthLdDetect 2A00  
                 SWSPI_DAC_send_bits@count 001B                 FlashSampleWrite@channelNum 002F  
                             __pdataCOMRAM 003E                                  ??_isalpha 001B  
                                ??_isdigit 0018                      __end_of_FlashReadUart 13D6  
                         __end_of_testLeds 363C                              ?_SetMcuSystem 0001  
                             __mediumconst 0000                                  ??_isspace 0018  
                                   tblptrh 000FF7                                  ??_isupper 0018  
                                   tblptrl 000FF6                                     tblptru 000FF8  
                 ADC_GetConversion@channel 001C                            ??_EUSART1_Write 0018  
 TMR0_SetInterruptHandler@InterruptHandler 0018  IOCB5_SetInterruptHandler@InterruptHandler 0018  
IOCB4_SetInterruptHandler@InterruptHandler 0018               __size_of_InitRxMessageParams 0028  
                         ?_PIN_MANAGER_IOC 0001                      ReadIntFromEeprom@base 00B8  
                          _eusart1RxBuffer 0100                                  ??_toupper 0018  
                       __size_of_ZeroArray 001E              __size_of_INTERRUPT_Initialize 0004  
                            _SynthReadData 0A9C                            _eusart1TxBuffer 0200  
                          _GetMcuFwVersion 06AC                           __end_ofexp@coeff 067A  
                        _SYSTEM_Initialize 428C                           __end_oflog@coeff 0695  
                               __accesstop 0060                    __end_of__initialization 33EA  
                               ___altoft@c 0087                              ZeroArray@size 0022  
                               ___ftadd@f1 0078                                 ___ftadd@f2 007B  
                               ___ftge@ff1 0018                                 ___ftge@ff2 001B  
                       ?_SYSTEM_Initialize 0001                               eval_poly@res 008B  
                            ___rparam_used 000001                                 ___ftdiv@f1 0029  
                               ___ftdiv@f2 002C                                 ___ftdiv@f3 0064  
                         ?_GroupControlMcu 00E6               GroupStatusAndVersion@request 00E9  
                             InitSynth@idx 00CD                          __end_of_FillArray 428C  
                               ___ftneg@f1 0018                                 ___awtoft@c 0020  
                  __end_of_readUartMessage 17AE                   WriteUartMessage@dataSize 001B  
                               ___ftmul@f1 0069                                 ___ftmul@f2 006C  
                         ?_SWSPI_send_word 0029                               ?_DacSetValue 008A  
                               ___ftsub@f1 0084                                 ___ftsub@f2 0087  
                               ___fttol@f1 0078                            _Make32bitsArray 38E2  
                           __pcstackCOMRAM 0001                               __pidataBANK1 4338  
                      ??_SYSTEM_Initialize 001C                                  ?_TMR0_ISR 0001  
                      DacReadValue@byteIdx 00D8                                 ___lltoft@c 0020  
                      DacReadValue@byteNum 00CD                              __end_of_make8 3886  
                      DacReadValue@readVal 00CE                           _DATAEE_WriteByte 3ED2  
                            __end_of_floor 2A00                              __end_of_ldexp 2C7A  
                            __end_of_frexp 31DC      __end_of_IOCB4_DefaultInterruptHandler 43F8  
   __size_of_IOCB4_DefaultInterruptHandler 0002              _IOCB4_DefaultInterruptHandler 43F6  
                   _SwSpi_Set_Synth_Le_Pin 3D48                       GroupFlashMemory@data 00E6  
                               ___lwtoft@c 0020                ??_IOCB4_SetInterruptHandler 001A  
                           ?_SynthLdDetect 0001            __end_of_DAC_DEFAULT_INIT_VALUES 0658  
                     __end_of_EUSART1_Read 3BCA                               ??_MEMORY_ISR 0001  
                __size_of_StoreIntInEeprom 0038                     __size_of_SetMcuRunTime 0044  
                   ??_EUSART1_Transmit_ISR 0001                          __end_of_InitSynth 0FC2  
                           ??_SetMcuSystem 001C                      TMR0_ISR@CountCallBack 0031  
            SwSpi_Set_Synth_Le_Pin@phrType 0019                    GroupFlashMemory@request 00E8  
                       _keepAliveSignalLed 42A6                          make8@dataLocation 001C  
              __end_of_EUSART1_Receive_ISR 4062                FLASH_WriteBlock@GIEBitValue 002B  
                             GroupDAC@data 00E6                              ?_SetSynthOper 0001  
                                  ??_make8 001D                                    ??_floor 0031  
                         ?_TMR0_StartTimer 0001                                    ??_ldexp 0093  
                                  ??_frexp 001D                  __end_of_SYSTEM_Initialize 42A6  
                          _AdcConvert$3599 00BD                             ?_SynthReadData 00C8  
                            _eusart1RxHead 0034                       GetMcuFwVersion@TxMsg 0064  
                            _eusart1TxHead 0036                              _eusart1RxTail 0033  
                               __pbssBANK0 00F0                                 __pbssBANK1 0100  
                               __pbssBANK2 0200                              _eusart1TxTail 0035  
                      ?_keepAliveSignalLed 0001                         __size_of_eval_poly 00D6  
                          __CFG_PLLCFG$OFF 000000                                 _channelArr 0647  
                                ?_GroupDAC 00E6                                 __pnvCOMRAM 0046  
                                ?_GroupAdc 00E6             __size_of_InitAdcApplicationMgr 0006  
               __end_of_SendSystemStartAck 43A8              __end_of_InitAdcApplicationMgr 43E8  
                      __size_of_EepromRead 000A                         __end_of_MEMORY_ISR 43F4  
                                ?_ResetMcu 0001                         _FlashReadCondition 218C  
          ??_InitSystemApplicationManagers 0031                         __CFG_CCP2MX$PORTC1 000000  
                                  ?___ftge 0018                             FlashReadUart@j 00E0  
         __end_of_TMR0_SetInterruptHandler 43BC                                    ?___lmul 001A  
                                  ?___wmul 0018                                 ??_TMR0_ISR 0006  
                       __CFG_CCP3MX$PORTB5 000000                         SetChannelMode@data 002C  
                     ??_keepAliveSignalLed 0018                          __end_of_ZeroArray 4254  
                                ?___altoft 0087                                    ?_memset 0018  
                        _ReadIntFromEeprom 1F58                             ___lmul@product 0022  
                      ?_FlashReadCondition 0001         __size_of_IOCB5_SetInterruptHandler 000A  
                                ?___awtoft 0020                                  ?___ftpack 0018  
                             GroupAdc@data 00E6                           FlashReadUart@idx 00E4  
                 GetUint16FromBitArray@res 001F                           FlashReadUart@val 00D4  
               ?_IOCB5_SetInterruptHandler 0018                                  ?___lltoft 0020  
                        _synthLdRxArrayCnt 0038                  __size_of_FLASH_WriteBlock 00BC  
                  __size_of_ADC_Initialize 0016                 FlashSampleWrite@sampleData 002D  
                           _FLASH_ReadByte 4326                                  ?___lwtoft 0020  
             __end_of_CheckFlashPrecentage 2EAA                         ?_ReadIntFromEeprom 00B1  
                                  ?_strtol 0026                           ?_DATAEE_ReadByte 0001  
               GetMcuFwVersion@compileData 0060                            _UpdateSynthFreq 207E  
                          _Timer0_Sampling 00F9               __size_of_keepAliveSignalUart 000C  
                       SynthReadData@TxMsg 0246                    __end_of_GetMcuFwVersion 0A9C  
                       SynthReadData@cType 027A                                    _OSCCON2 000FD2  
                           ??_SetSynthOper 0031                                    _TBLPTRH 000FF7  
                                  _TBLPTRL 000FF6                                    _TBLPTRU 000FF8  
                                  _OSCTUNE 000F9B                                    _SPBRGH1 000FB0  
                        _synthLdTxArrayCnt 0037                        ??_ReadIntFromEeprom 00B5  
                                  _DacInit 283A                      GetIntFromUartData@num 007A  
                         GetMcuRunTime@idx 006D                               ??_AdcConvert 00B1  
                     ??_FlashReadCondition 0024                             _FlashEreaseMem 3A94  
                         _FLASH_EraseBlock 3F70             __size_of_GroupStatusAndVersion 0024  
                           _SwSpi_Data_Pin 3992                  _IOCB4_SetInterruptHandler 43C6  
                     DATAEE_WriteByte@bAdd 0019              __end_of_GroupStatusAndVersion 414E  
                  __end_of_Make32bitsArray 393A                                 ??_GroupDAC 0031  
                               ??_GroupAdc 0031                              _SetMcuRunTime 3BCA  
                       _GetIntFromUartData 1CB2                         FlashReadUart@TxMsg 008F  
                    GroupSynthesizers@data 00E6                                    __Hparam 0000  
                               ??_ResetMcu 002C                  __size_of_WriteUartMessage 0036  
                             ?_BlinkOkLeds 0001                                    __Lparam 0000  
                    SendAckMessage@inGroup 0025                           ?_readUartMessage 0001  
                   GroupControlMcu@request 00E9                                  ?_testLeds 0001  
                __end_of_ReadIntFromEeprom 207E                        ?_GetIntFromUartData 0066  
                          __size_of___ftge 0090                            __size_of___lmul 0056  
                                  ___ftadd 1984                                    ___awmod 3562  
                                  ___ftdiv 258A                                    ___ftneg 414E  
                                  ___lldiv 32F8                            __size_of___wmul 0026  
                                  ___ftmul 2494                                    ___llmod 36A4  
                                  ___ftsub 3C0E                                    ___fttol 239C  
               FlashSampleWrite@rotateLeft 0062                               crc8@dataSize 001A  
                 __size_of_ClearMcuRunTime 0014                                    ___lwmod 3C50  
                     AdcConvert@_adcResult 00B3                               __psmallconst 0600  
                          ??_SynthLdDetect 0031                                 ??___altoft 008B  
                   __end_of_FLASH_ReadByte 4338                            __CFG_STVREN$OFF 000000  
               SWSPI_Synth_send_bits@count 0084                      _mcuRunTimeIn5SecTicks 0128  
                                  _crcCalc 003C                                    _channel 00F6  
                                  __pcinit 337A                                 ??___awtoft 0023  
                               ??___ftpack 001D                          __end_of_eval_poly 2BAC  
                          __size_of_memset 002C                                    __ramtop 0600  
                  __size_of_SendAckMessage 0052                                 ??___lltoft 0024  
                  __size_of_SetChannelMode 0030                                    __ptext0 34EE  
                                  __ptext1 15CC                                    __ptext2 408E  
                                  __ptext3 3F08                                    __ptext4 3D84  
                                  __ptext5 41DA                                    __ptext6 412A  
                                  __ptext7 3FA4                                    __ptext8 326C  
                                  __ptext9 207E                                    crc8@crc 001D  
                       __end_of_AdcConvert 11DE                          DacSetValue@retVal 0091  
                               ??___lwtoft 0023                                  _T0CONbits 000FD5  
        __end_of_IOCB5_SetInterruptHandler 43C6                                  _IOCB4_ISR 41B8  
                                _IOCB5_ISR 4196                          BlinkErrorLeds@idx 001C  
                          __size_of_strtol 01D6                      _OSCILLATOR_Initialize 4366  
                                  _isalpha 40B6                               __size_of_exp 01F6  
                             __size_of_log 012A                                    _isdigit 41FA  
                             __size_of_pow 0180                           ___awmod@dividend 0018  
                       _EUSART1_Initialize 3DBC                   ??_PIN_MANAGER_Initialize 001A  
                                  _isspace 40DE                  StoreIntInEeprom@numOfByes 0026  
                                  _isupper 4218                                    _request 00F2  
                          GroupDAC@request 00E8                            ??_SynthReadData 0031  
                     ??_GetIntFromUartData 006E                     __end_of_FlashEreaseMem 3AE6  
               __size_of_SYSTEM_Initialize 001A                    ?_SwSpi_Set_Dac_Sync_Pin 0001  
                   __end_of_SwSpi_Data_Pin 39E8                    StoreIntInEeprom@address 0025  
                                  _toupper 42EA                       end_of_initialization 33EA  
                                  exp@sign 009F                        ?_EUSART1_Initialize 0001  
                         ??_BlinkErrorLeds 0018                               ?_EepromWrite 001B  
                    _SWSPI_Synth_send_bits 2C7A                  __size_of_SwSpi_Set_CE_Pin 003C  
                    _GetUint16FromBitArray 363C                             ?_SetMcuRunTime 0001  
                                  memset@c 001A                                    memset@n 001C  
                                  memset@p 001E                              __Lmediumconst 0000  
                          ___lldiv@divisor 001C                       __end_of_SetMcuSystem 43B2  
                                  pow@sign 00AC                            ___lldiv@counter 0024  
                        ?_GroupFlashMemory 00E6                           AdcConvert@adcRes 00BB  
                       __end_of_SYNTH_REGS 0639                       UpdateSynthFreq@cType 008C  
                               ??_testLeds 002C                       SWSPI_send_word@datac 0086  
                               _rxMsgQueue 0190                                    postdec1 000FE5  
                                  postdec2 000FDD            ??_IOCB5_DefaultInterruptHandler 0001  
                       ??_GroupFlashMemory 0031                                    postinc0 000FEE  
                                  postinc2 000FDE                      __size_of_EUSART1_Read 0044  
                     SynthReadData@byteNum 027C                        _InitRxMessageParams 408E  
                              testLeds@idx 002D                    __end_of_UpdateSynthFreq 218C  
                     __size_of_DacSetValue 009E                  __size_of_FlashSampleWrite 0104  
                   __size_of_GetMcuRunTime 00E4                       ??_EUSART1_Initialize 0018  
    __end_of_InitSystemApplicationManagers 42EA     __size_of_InitSystemApplicationManagers 0016  
            _InitSystemApplicationManagers 42D4                            ?_FLASH_ReadByte 0018  
                                  strtol@a 0061                                    strtol@c 0065  
                                  strtol@s 0026                   _TMR0_SetInterruptHandler 43B2  
                                _PORTDbits 000F83                               ??_EepromRead 0019  
                         _StoreIntInEeprom 3DF4                                 ?_IOCB4_ISR 0001  
                               ?_IOCB5_ISR 0001                           ?_GetMcuFwVersion 0001  
                           ZeroArray@array 0020             __end_of_SwSpi_Set_Dac_Sync_Pin 4270  
                             strtol@endptr 0028              FLASH_WriteBlock@flashWrBufPtr 0021  
                       GetMcuRunTime@TxMsg 0060                       ?_InitRxMessageParams 0001  
                          ?_FlashEreaseMem 0001                        EUSART1_Write@txData 0018  
                          ?_SwSpi_Data_Pin 0018                   __end_of_DATAEE_WriteByte 3F08  
              __end_of_SWSPI_DAC_send_bits 3992                              ?_DacReadValue 00C8  
                     DacReadValue@dacIndex 00D0                   FLASH_EraseBlock@baseAddr 0018  
                         ?_Make32bitsArray 0018                                ___ftdiv@exp 0067  
                             _EUSART1_Read 3B86                       _CheckFlashPrecentage 2DFC  
                        FLASH_WriteBlock@i 002C                         __end_of_EepromRead 43DA  
                         DacReadValue@data 00C8                                ___ftmul@exp 0072  
                  ?_SwSpi_Set_Synth_Le_Pin 0018                       __end_of_SetSynthOper 3474  
               __size_of_ReadIntFromEeprom 0126                                  _FillArray 4270  
             __end_of_INTERRUPT_Initialize 43EC                             __end_of___ftge 326C  
                           __end_of___lmul 3A94                             __end_of___wmul 412A  
                      GroupControlMcu@data 00E6                              __pidataCOMRAM 43DA  
                        __size_of_TMR0_ISR 00AC                             _ADC_Initialize 42BE  
                         _FLASH_WriteBlock 2D40                     ?_OSCILLATOR_Initialize 0001  
                           __end_of_memset 408E                         InitSynth@EepromVal 00C8  
                               floor@expon 0095                              FillArray@size 0022  
                        ??_ClearMcuRunTime 0018                             __end_of_strtol 1984  
                      start_initialization 337A                                 eval_poly@d 0087  
                               eval_poly@n 0089                                 eval_poly@x 0084  
                              _SynthRxOper 0044                           BlinkOkLeds@state 001B  
                 __size_of_TMR0_Initialize 0034                                 ldexp@value 008E  
                              _SynthTxOper 0045            __size_of_PIN_MANAGER_Initialize 0064  
                    ??_InitRxMessageParams 0024                                __end_of_exp 15CC  
                              __end_of_log 1F58                                __end_of_pow 1CB2  
            GetUint16FromBitArray@bitarray 0018                   AdcConvert@_adcResult_350 00B5  
                                _InitSynth 0D4C                             ??_DacReadValue 00CA  
                            _GetMcuRunTime 2672                     ?_SWSPI_Synth_send_bits 0025  
                          ??_SetMcuRunTime 0021                      __end_of_EUSART1_Write 3D0C  
                   ?_GetUint16FromBitArray 0018                     __size_of_PLLInitialize 003E  
                               frexp@value 0018                            ___llmod@divisor 001C  
                            _Timer0_OneSec 00F7                      ?_CheckFlashPrecentage 0001  
                          ___llmod@counter 0020                        DATAEE_ReadByte@bAdd 0018  
                 __size_of_PIN_MANAGER_IOC 0010                     __size_of_SwSpi_Clk_Pin 0056  
                      SendAckMessage@TxMsg 0026             __end_of_SwSpi_Set_Synth_Le_Pin 3D84  
                           _cntRegUpdateRx 0039                        _keepAliveSignalUart 4390  
                           _cntRegUpdateTx 003A                          __size_of_GroupDAC 0034  
                         _WriteUartMessage 3E9C                          __size_of_GroupAdc 0020  
                   __size_of_FlashReadUart 01F8                                   ??___ftge 001E  
                                 ??___lmul 0022                    SendAckMessage@inRequest 0024  
                                 ??___wmul 001C                  GetIntFromUartData@idxData 0086  
                        __size_of_ResetMcu 000E                       __size_of_BlinkOkLeds 005E  
                               ?_FillArray 0020                     __end_of_ADC_Initialize 42D4  
                         ?_UpdateSynthFreq 008A                                __pdataBANK1 01BC  
                  SWSPI_DAC_send_bits@data 001A                                   ??_memset 001E  
                 __size_of_GroupControlMcu 0030                FLASH_EraseBlock@GIEBitValue 001C  
                           _SendAckMessage 3AE6                             _SetChannelMode 3FD4  
                 __end_of_FLASH_EraseBlock 3FA4                         _SendSystemStartAck 439C  
                 __size_of_SWSPI_send_word 00AA      __end_of_IOCB5_DefaultInterruptHandler 43F6  
   __size_of_IOCB5_DefaultInterruptHandler 0002              _IOCB5_DefaultInterruptHandler 43F4  
              ??_IOCB5_SetInterruptHandler 001A                                   ??_strtol 002C  
                           _eusart1RxCount 00F5                                ??_IOCB4_ISR 0001  
                              ??_IOCB5_ISR 0001                          __size_of___altoft 007A  
                                _ZeroArray 4236                            DacInit@dacInput 00CA  
                        __size_of___awtoft 0038                          __size_of___ftpack 00AE  
                     ?_keepAliveSignalUart 0001                          __size_of___lltoft 005C  
                              __pbssCOMRAM 0031                          __size_of___lwtoft 0024  
            __size_of_EUSART1_Transmit_ISR 0038                              __pcstackBANK0 0060  
                            __pcstackBANK2 0246                               _isalpha$3326 001C  
                      ?_SendSystemStartAck 0001                                 ?_InitSynth 0001  
                             _isdigit$3329 0019                             ?_GetMcuRunTime 0001  
                      DacSetValue@dacIndex 0090                             BlinkOkLeds@idx 001C  
                                 ?_DacInit 0001                      __size_of_SetMcuSystem 000A  
                         _SwSpi_Set_CE_Pin 3D0C               __size_of_EUSART1_Receive_ISR 002E  
            SWSPI_Synth_send_bits@bitArray 0060                    _DAC_DEFAULT_INIT_VALUES 0650  
                     __size_of_EepromWrite 000E                      _TMR0_InterruptHandler 01CC  
                                __pnvBANK1 01CC                          SetSynthOper@cType 00CF  
                 __size_of_TMR0_StartTimer 0004                     _PIN_MANAGER_Initialize 370A  
                     ??_SendSystemStartAck 002C                      _InitAdcApplicationMgr 43E2  
                                __pintcode 0008                     __end_of_SendAckMessage 3B38  
                                __ptext100 258A                                  __ptext101 3E2C  
                                __ptext110 4004                                  __ptext102 3886  
                                __ptext103 4172                                  __ptext120 3E64  
                                __ptext112 2F58                                  __ptext104 2EAA  
                                __ptext121 4034                                  __ptext113 3C50  
                                __ptext105 363C                                  __ptext122 0000  
                                __ptext114 4348                                  __ptext106 2298  
                                __ptext115 4196                                  __ptext107 2D40  
                                __ptext116 43F4                                  __ptext108 3F70  
                                __ptext117 41B8                                  __ptext109 4382  
                                 ?___ftadd 0078                                  __ptext118 43F6  
                                __ptext119 43F0                                   ?___awmod 0018  
                                 ?___ftdiv 0029                     __end_of_SetChannelMode 4004  
                                 ?___ftneg 0018                                   ?___lldiv 0018  
                                 ?___ftmul 0069                                   ?___llmod 0018  
                                 ?___ftsub 0084                                   ?___fttol 0078  
                         _FlashSampleWrite 2298                                   ?___lwmod 0001  
                          ?_ADC_Initialize 0001                           _Timer0_KeepAlive 00F8  
                        __size_of_testLeds 006A                              _PLLInitialize 3C92  
              __size_of_keepAliveSignalLed 0018               ??_INTERRUPT_InterruptManager 0006  
                         __CFG_PRICLKEN$ON 000000                                 ?_ZeroArray 0020  
                              __smallconst 0600                      ??_keepAliveSignalUart 002C  
                                 _BAUDCON1 000FB8                              _SwSpi_Clk_Pin 39E8  
                                 ?_isalpha 0001                                   ?_isdigit 0001  
                                _eval_poly 2AD6                        BlinkErrorLeds@state 001B  
                                 ?_isspace 0001                               _SetMcuSystem 43A8  
                        FlashReadUart@data 0087                                   ?_isupper 0001  
                            _FlashReadUart 11DE                             __size_of_make8 005C  
                           __size_of_floor 00E2                             __size_of_ldexp 00CE  
                           __size_of_frexp 0090                   __size_of_DATAEE_ReadByte 0014  
                                 ?_toupper 0001                       _INTERRUPT_Initialize 43E8  
           FLASH_WriteBlock@blockStartAddr 0027                __size_of_FlashReadCondition 010C  
                _IOCB5_SetInterruptHandler 43BC                          ??_TMR0_Initialize 001A  
                   ??_CheckFlashPrecentage 0078                             ___wmul@product 001C  
                                 _IOCBbits 000F62                                   _LATAbits 000F89  
                                 _LATBbits 000F8A                                   _LATCbits 000F8B  
                                 _LATDbits 000F8C                      __size_of_SetSynthOper 007C  
                 __end_of_StoreIntInEeprom 3E2C             FlashReadUart@numOfSampleToRead 00E2  
                                 _PIE1bits 000F9D                                   _PIE2bits 000FA0  
                    _GroupStatusAndVersion 412A                          _GroupSynthesizers 326C  
      __size_of_INTERRUPT_InterruptManager 00D4                 ??_TMR0_SetInterruptHandler 001A  
                     Make32bitsArray@array 0018                                   _PIR1bits 000F9E  
                         ??_FLASH_ReadByte 001C                                   _PIR2bits 000FA1  
                                _rxMsgData 017C                        UpdateSynthFreq@data 008A  
                                 i2u566_48 41C6                                   i2u576_40 3C6A  
                                 i2u568_48 41A4                        SWSPI_send_word@data 0029  
                       ?_GroupSynthesizers 00E6                                   _RCONbits 000FD0  
                         __CFG_WDTPS$16384 000000                        SynthReadData@regNum 027B  
                                make8@data 0018                                ??_FillArray 0025  
                                 _TMR0_ISR 2F58                            ?_SendAckMessage 0024  
                          ?_SetChannelMode 002C                             ?_PLLInitialize 0001  
                        ??_PIN_MANAGER_IOC 0001                       __end_of_DacReadValue 283A  
                      ??_GroupSynthesizers 0031                     GetIntFromUartData@data 0066  
                  SWSPI_send_word@dataSize 002D                                 _ADCON0bits 000FC2  
                    __end_of_SynthLdDetect 2AD6                   __size_of_readUartMessage 01E2  
                        ___wmul@multiplier 0018                             ?_SwSpi_Clk_Pin 0018  
                         ??_FlashEreaseMem 002C                         __end_of_channelArr 0650  
                         ??_SwSpi_Data_Pin 0019                  __size_of_GroupFlashMemory 0038  
                               ?_eval_poly 0084                             ?_FlashReadUart 0087  
                        ??_GroupControlMcu 0031                            ??_GetMcuRunTime 0025  
                    DATAEE_WriteByte@bData 0018                               _isspace$3332 0019  
                              ??_InitSynth 0031                          ??_SWSPI_send_word 002E  
                               DacInit@idx 00CC                               _SetSynthOper 33F8  
                               _DAC_ADDRES 0658                __size_of_GetIntFromUartData 017C  
                        ___lmul@multiplier 001A                    FlashReadCondition@TxMsg 0028  
                              _INTCON2bits 000FF1                      __end_of_SynthReadData 0D4C  
                                copy_data0 338E                                  copy_data1 33AE  
                    ?_INTERRUPT_Initialize 0001                           __size_of_DacInit 00E4  
                        ?_DATAEE_WriteByte 0018             GetUint16FromBitArray@numOfBits 001A  
                __end_of_GroupSynthesizers 32F8                      EUSART1_Read@readValue 0019  
                 __end_of_FLASH_WriteBlock 2DFC                                   _GroupDAC 3F08  
                       ??_DATAEE_WriteByte 0019                                   _GroupAdc 41DA  
                                frexp@eptr 001B                                 _EECON1bits 000FA6  
                           _synthLdRxArray 01B0                                   __Hrparam 0000  
                   ?_InitAdcApplicationMgr 0001                             _synthLdTxArray 01A4  
                                 _ResetMcu 4358                              ??_DacSetValue 008C  
                              _readAddress 01C8                                   __Lrparam 0000  
             SynthReadData@eepromDataArray 0266                          _ADC_GetConversion 4004  
                          _ClearMcuRunTime 4312                          __CFG_P2BMX$PORTD2 000000  
                  ??_OSCILLATOR_Initialize 0018                         ?_ADC_GetConversion 0018  
                        ??_TMR0_StartTimer 0018                           __size_of___ftadd 01AE  
                         __size_of___awmod 0070                           __size_of___ftdiv 00E8  
                     _numOfValidateSamples 0130                           __size_of___ftneg 0024  
                         __size_of___lldiv 0082                                   ___altoft 3474  
                         __size_of___ftmul 00F6                           __size_of___llmod 0066  
                         __size_of___ftsub 0042                           __size_of___fttol 00F8  
              __size_of_EUSART1_Initialize 0038                           __size_of___lwmod 0042  
                          GroupAdc@request 00E8                                   ___awtoft 3E2C  
                            crc8@dataArray 0018                                   ___ftpack 2EAA  
                         _numOfReadSamples 012C                                   ___lltoft 3886  
                        _FLASH_IsWriteDone 4382                     _IOCB4_InterruptHandler 01D0  
                      WriteUartMessage@idx 001E                                   ___lwtoft 4172  
                              ??_ZeroArray 0024                   GetMcuRunTime@tempRunTime 0069  
                      ??_ADC_GetConversion 001A                                   _exp$3604 009A  
                             _isupper$3335 0019                         ?_FLASH_IsWriteDone 0001  
                                 _dataSize 00F1                      SwSpi_Clk_Pin@cPinMode 0018  
                 __end_of_WriteUartMessage 3ED2                           __size_of_isalpha 0028  
                                 _crcGiven 003B                           __size_of_isdigit 001E  
                  ??_SWSPI_Synth_send_bits 0029                     SwSpi_Data_Pin@cPinMode 0018  
                  ??_GetUint16FromBitArray 001C             ?_IOCB4_DefaultInterruptHandler 0001  
                         __size_of_isspace 0026                                   __ptext10 0A9C  
                                 __ptext11 33F8                                   __ptext20 1CB2  
                                 __ptext12 2672                                   __ptext21 17AE  
                                 __ptext13 32F8                                   __ptext30 3FD4  
                                 __ptext22 42EA                                   __ptext14 06AC  
                                 __ptext31 3B86                                   __ptext23 40DE  
                                 __ptext15 11DE                                   __ptext40 43B2  
                                 __ptext32 4390                                   __ptext24 41FA  
                                 __ptext16 4326                                   __ptext41 370A  
                                 __ptext33 42A6                                   __ptext25 40B6  
                                 __ptext17 218C                                   __ptext50 439C  
                                 __ptext42 43BC                                   __ptext34 2A00  
                                 __ptext26 4218                                   __ptext18 3A94  
                                 __ptext51 3AE6                                   __ptext43 43C6  
                                 __ptext35 3562                                   __ptext27 2756  
                                 __ptext19 30AE                                   __ptext60 3D0C  
                                 __ptext52 3B38                                   __ptext44 4366  
                                 __ptext36 376E                                   __ptext28 35D2  
                                 __ptext61 43E2                                   __ptext53 4236  
                                 __ptext45 43E8                                   __ptext37 43A8  
                                 __ptext29 4358                                   __ptext70 2C7A  
                                 __ptext62 283A                                   __ptext54 3E9C  
                                 __ptext46 3DBC                                   __ptext38 428C  
                                 __ptext71 38E2                                   __ptext63 3DF4  
                                 __ptext55 3CD0                                   __ptext47 42BE  
                                 __ptext39 3F3C                                   __ptext80 42FE  
                                 __ptext72 4270                                   __ptext64 4374  
                                 __ptext56 42D4                                   __ptext48 3BCA  
                                 __ptext81 4312                                   __ptext73 4062  
                                 __ptext65 3ED2                                   __ptext57 43EC  
                                 __ptext49 36A4                                   __ptext90 314C  
                                 __ptext82 2DFC                                   __ptext74 393A  
                                 __ptext66 3004                                   __ptext58 3C92  
                                 __ptext91 239C                                   __ptext83 37CC  
                                 __ptext75 3992                                   __ptext67 382A  
                                 __ptext59 0D4C                                   __ptext92 31DC  
                                 __ptext84 0FC2                                   __ptext76 39E8  
                                 __ptext68 3D48                                   __ptext93 3474  
                                 __ptext85 1B32                                   __ptext77 1F58  
                                 __ptext69 4254                                   __ptext94 2AD6  
                                 __ptext86 1E2E                                   __ptext78 3A3E  
                                 __ptext95 4104                                   __ptext87 13D6  
                                 __ptext79 43D0                                   __ptext96 2494  
                                 __ptext88 2BAC                                   __ptext97 3C0E  
                                 __ptext89 291E                                   __ptext98 1984  
                                 __ptext99 414E                           __size_of_isupper 001E  
             SWSPI_Synth_send_bits@phrType 0085                   SwSpi_Set_CE_Pin@cPinMode 0018  
                                 _pow$3602 00A6                                   _pow$3603 00A9  
                      ??_FLASH_IsWriteDone 0018                DATAEE_WriteByte@GIEBitValue 001A  
                         __size_of_toupper 0014                   __size_of_GetMcuFwVersion 03F0  
                     _GetMcuFwVersion$2702 0078                       _GetMcuFwVersion$2698 0076  
                            __size_of_crc8 004E                              __size_of_main 0074  
                   ?_GroupStatusAndVersion 00E6                       __end_of_SYNTH_ADDRES 0647  
                                 _msgCount 00F0               _TMR0_DefaultInterruptHandler 000000  
                        ??_DATAEE_ReadByte 0018                  __end_of_ADC_GetConversion 4034  
             __size_of_SWSPI_DAC_send_bits 0058                        Make32bitsArray@data 001A  
                       SWSPI_send_word@idx 0087                                _groupsArray 01BC  
                          ??_PLLInitialize 0031                                   _testLeds 35D2  
                  __size_of_BlinkErrorLeds 005E                                   int$flags 0048  
                 __size_of_Make32bitsArray 0058                                 strtol@base 002A  
                               strtol@sign 0060                  __end_of_FLASH_IsWriteDone 4390  
       __end_of_INTERRUPT_InterruptManager 00DC                 _INTERRUPT_InterruptManager 0008  
                       AdcConvert@ldRxSate 00B7                         AdcConvert@ldTxSate 00B9  
                          EepromWrite@data 001B                            ??_SwSpi_Clk_Pin 0019  
                      __end_of_DacSetValue 314C                        _EUSART1_Receive_ISR 4034  
                 __end_of_SwSpi_Set_CE_Pin 3D48                          ?_FLASH_EraseBlock 0018  
              __end_of_InitRxMessageParams 40B6                                   exp@coeff 065C  
                               _MEMORY_ISR 43F0                            ??_FlashReadUart 0089  
                                 log@coeff 067A                     SWSPI_send_word@phrType 0089  
                       ??_FLASH_EraseBlock 001C                                 _INTCONbits 000FF2  
                              ??_eval_poly 002F                                _sampleArray 013C  
                              _sampleCount 0136                                   isalpha@c 001D  
                                 isdigit@c 001A                     ??_INTERRUPT_Initialize 0018  
                                 memset@p1 0018                          ??_readUartMessage 00E9  
                 __end_of_FlashSampleWrite 239C                                   intlevel2 0000  
                     ?_EUSART1_Receive_ISR 0001                      __end_of_SetMcuRunTime 3C0E  
                         ___lwmod@dividend 0001                 __size_of_GroupSynthesizers 008C  
                                 isspace@c 001A                           ___lldiv@dividend 0018  
                    SynthReadData@data_987 0263                    ?_PIN_MANAGER_Initialize 0001  
                        _SynthReadData$988 0264                    __end_of_ClearMcuRunTime 4326  
                               _RCSTA1bits 000FAB                                   isupper@c 001A  
                 ReadIntFromEeprom@address 00C2               __end_of_EUSART1_Transmit_ISR 3E9C  
                            ??_BlinkOkLeds 0018                           ??_ADC_Initialize 0018  
                    __size_of_DacReadValue 00E4                         Make32bitsArray@idx 0020  
                            AdcConvert@idx 00C0                              _isReWriteDone 013A  
                    UpdateSynthFreq@retVal 008D                       SwSpi_Clk_Pin@phrType 0019  
                    SwSpi_Data_Pin@phrType 0019                    SwSpi_Set_CE_Pin@phrType 0019  
                   __size_of_EUSART1_Write 003C                   ??_SwSpi_Set_Dac_Sync_Pin 0018  
                        EepromRead@address 0019                           ___lldiv@quotient 0020  
                         _GroupFlashMemory 3D84                            ___lwmod@divisor 0003  
                          _TMR0_Initialize 3F3C                            ___lwmod@counter 0005  
                 __size_of_UpdateSynthFreq 010E                                   toupper@c 0018  
               ReadIntFromEeprom@numOfByes 00B1                          __CFG_T3CMX$PORTC0 000000  
                  ReadIntFromEeprom@retVal 00C3                              ??_EepromWrite 001C  
                               _AdcConvert 0FC2                      ??_EUSART1_Receive_ISR 0001  
           __end_of_PIN_MANAGER_Initialize 376E                               _DacReadValue 2756  
             GetIntFromUartData@dataRegArr 0070                          __CFG_FOSC$INTIO67 000000  
                   _IOCB5_InterruptHandler 01CE                            _PIN_MANAGER_IOC 4348  
                        ?_StoreIntInEeprom 0021                           ??_SendAckMessage 0025  
               __size_of_ADC_GetConversion 0030                           ??_SetChannelMode 002E  
                       ??_StoreIntInEeprom 0028                                _DacSetValue 30AE  



Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Mar 22 16:42:59 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1,group=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1,group=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1,group=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1,group=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1,group=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1,group=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1,group=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   147                           	psect	text123,global,reloc=2,class=CODE,delta=1
   148                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   149                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   150  0000                     
   151                           ; Version 1.45
   152                           ; Generated 16/11/2017 GMT
   153                           ; 
   154                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   155                           ; All rights reserved.
   156                           ; 
   157                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   158                           ; 
   159                           ; Redistribution and use in source and binary forms, with or without modification, are
   160                           ; permitted provided that the following conditions are met:
   161                           ; 
   162                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   163                           ;        conditions and the following disclaimer.
   164                           ; 
   165                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   166                           ;        of conditions and the following disclaimer in the documentation and/or other
   167                           ;        materials provided with the distribution.
   168                           ; 
   169                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   170                           ;        software without specific prior written permission.
   171                           ; 
   172                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   173                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   174                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   175                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   176                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   177                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   178                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   179                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   180                           ; 
   181                           ; 
   182                           ; Code-generator required, PIC18F45K22 Definitions
   183                           ; 
   184                           ; SFR Addresses
   185  0000                     
   186 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   187  0000                     
   188                           	psect	idataCOMRAM
   189  0044CA                     __pidataCOMRAM:
   190                           	opt stack 0
   191                           
   192                           ;initializer for _writeAddress
   193  0044CA  4500               	dw	17664
   194  0044CC  0000               	dw	0
   195                           
   196                           ;initializer for _SynthRxOper
   197  0044CE  01                 	db	1
   198                           
   199                           ;initializer for _SynthTxOper
   200  0044CF  01                 	db	1
   201                           
   202                           	psect	idataBANK0
   203  0044D0                     __pidataBANK0:
   204                           	opt stack 0
   205                           
   206                           ;initializer for _readAddress
   207  0044D0  4500               	dw	17664
   208  0044D2  0000               	dw	0
   209                           
   210                           ;initializer for _synthLdTxCnt
   211  0044D4  02                 	db	2
   212                           
   213                           ;initializer for _synthLdRxCnt
   214  0044D5  02                 	db	2
   215                           
   216                           	psect	idataBANK1
   217  004474                     __pidataBANK1:
   218                           	opt stack 0
   219                           
   220                           ;initializer for _groupsArray
   221  004474  4A                 	db	low _GroupControlMcu
   222  004475  40                 	db	high _GroupControlMcu
   223  004476  1E                 	db	low _GroupStatusAndVersion
   224  004477  42                 	db	high _GroupStatusAndVersion
   225  004478  CE                 	db	low _GroupAdc
   226  004479  42                 	db	high _GroupAdc
   227  00447A  E2                 	db	low _GroupSynthesizers
   228  00447B  33                 	db	high _GroupSynthesizers
   229  00447C  2A                 	db	low _GroupFlashMemory
   230  00447D  3E                 	db	high _GroupFlashMemory
   231  00447E  AE                 	db	low _GroupDAC
   232  00447F  3F                 	db	high _GroupDAC
   233                           
   234                           	psect	smallconst
   235  000600                     __psmallconst:
   236                           	opt stack 0
   237  000600  00                 	db	0
   238  000601                     _SYNTH_REGS:
   239                           	opt stack 0
   240  000601  041C               	dw	1052
   241  000603  0001               	dw	1
   242  000605  300B               	dw	12299
   243  000607  0061               	dw	97
   244  000609  193A               	dw	6458
   245  00060B  00C0               	dw	192
   246  00060D  FCC9               	dw	64713
   247  00060F  1110               	dw	4368
   248  000611  0428               	dw	1064
   249  000613  102D               	dw	4141
   250  000615  00E7               	dw	231
   251  000617  1200               	dw	4608
   252  000619  6076               	dw	24694
   253  00061B  3500               	dw	13568
   254  00061D  0025               	dw	37
   255  00061F  0080               	dw	128
   256  000621  BF84               	dw	49028
   257  000623  0800               	dw	2048
   258  000625  0003               	dw	3
   259  000627  0000               	dw	0
   260  000629  0012               	dw	18
   261  00062B  0000               	dw	0
   262  00062D  0001               	dw	1
   263  00062F  0C00               	dw	3072
   264  000631  0680               	dw	1664
   265  000633  0020               	dw	32
   266  000635                     __end_of_SYNTH_REGS:
   267                           	opt stack 0
   268  000635                     _SYNTH_ADDRES:
   269                           	opt stack 0
   270  000635  04                 	db	4
   271  000636  08                 	db	8
   272  000637  0C                 	db	12
   273  000638  00                 	db	0
   274  000639  10                 	db	16
   275  00063A  00                 	db	0
   276  00063B  14                 	db	20
   277  00063C  00                 	db	0
   278  00063D  00                 	db	0
   279  00063E  00                 	db	0
   280  00063F  18                 	db	24
   281  000640  00                 	db	0
   282  000641  00                 	db	0
   283  000642                     __end_of_SYNTH_ADDRES:
   284                           	opt stack 0
   285  000642                     _channelArr:
   286                           	opt stack 0
   287  000642  04                 	db	4
   288  000643  05                 	db	5
   289  000644  06                 	db	6
   290  000645  07                 	db	7
   291  000646  08                 	db	8
   292  000647  09                 	db	9
   293  000648  0A                 	db	10
   294  000649  0D                 	db	13
   295  00064A  19                 	db	25
   296  00064B                     __end_of_channelArr:
   297                           	opt stack 0
   298  00064B                     _DAC_DEFAULT_INIT_VALUES:
   299                           	opt stack 0
   300  00064B  2344               	dw	9028
   301  00064D  6344               	dw	25412
   302  00064F  A344               	dw	41796
   303  000651  E344               	dw	58180
   304  000653                     __end_of_DAC_DEFAULT_INIT_VALUES:
   305                           	opt stack 0
   306  000653                     _DAC_ADDRES:
   307                           	opt stack 0
   308  000653  02                 	db	2
   309  000654  04                 	db	4
   310  000655  06                 	db	6
   311  000656  08                 	db	8
   312  000657                     __end_of_DAC_ADDRES:
   313                           	opt stack 0
   314  000657                     exp@coeff:
   315                           	opt stack 0
   316  000657  00                 	db	0
   317  000658  80                 	db	128
   318  000659  3F                 	db	63
   319  00065A  72                 	db	114
   320  00065B  31                 	db	49
   321  00065C  3F                 	db	63
   322  00065D  FE                 	db	254
   323  00065E  75                 	db	117
   324  00065F  3E                 	db	62
   325  000660  58                 	db	88
   326  000661  63                 	db	99
   327  000662  3D                 	db	61
   328  000663  95                 	db	149
   329  000664  1D                 	db	29
   330  000665  3C                 	db	60
   331  000666  C5                 	db	197
   332  000667  AE                 	db	174
   333  000668  3A                 	db	58
   334  000669  79                 	db	121
   335  00066A  21                 	db	33
   336  00066B  39                 	db	57
   337  00066C  94                 	db	148
   338  00066D  80                 	db	128
   339  00066E  37                 	db	55
   340  00066F  93                 	db	147
   341  000670  A7                 	db	167
   342  000671  35                 	db	53
   343  000672  56                 	db	86
   344  000673  15                 	db	21
   345  000674  34                 	db	52
   346  000675                     __end_ofexp@coeff:
   347                           	opt stack 0
   348  000675                     log@coeff:
   349                           	opt stack 0
   350  000675  00                 	db	0
   351  000676  00                 	db	0
   352  000677  00                 	db	0
   353  000678  00                 	db	0
   354  000679  80                 	db	128
   355  00067A  3F                 	db	63
   356  00067B  F0                 	db	240
   357  00067C  FF                 	db	255
   358  00067D  BE                 	db	190
   359  00067E  E2                 	db	226
   360  00067F  A9                 	db	169
   361  000680  3E                 	db	62
   362  000681  83                 	db	131
   363  000682  76                 	db	118
   364  000683  BE                 	db	190
   365  000684  AE                 	db	174
   366  000685  2B                 	db	43
   367  000686  3E                 	db	62
   368  000687  3C                 	db	60
   369  000688  C3                 	db	195
   370  000689  BD                 	db	189
   371  00068A  D2                 	db	210
   372  00068B  13                 	db	19
   373  00068C  3D                 	db	61
   374  00068D  78                 	db	120
   375  00068E  D3                 	db	211
   376  00068F  BB                 	db	187
   377  000690                     __end_oflog@coeff:
   378                           	opt stack 0
   379  000690                     STR_1:
   380                           
   381                           ; BSR set to: 0
   382  000690  4D                 	db	77	;'M'
   383  000691  61                 	db	97	;'a'
   384  000692  72                 	db	114	;'r'
   385  000693  20                 	db	32
   386  000694  32                 	db	50	;'2'
   387  000695  32                 	db	50	;'2'
   388  000696  20                 	db	32
   389  000697  32                 	db	50	;'2'
   390  000698  30                 	db	48	;'0'
   391  000699  31                 	db	49	;'1'
   392  00069A  38                 	db	56	;'8'
   393  00069B  00                 	db	0
   394  00069C                     STR_18:
   395                           
   396                           ; BSR set to: 0
   397  00069C  31                 	db	49	;'1'
   398  00069D  36                 	db	54	;'6'
   399  00069E  3A                 	db	58	;':'
   400  00069F  34                 	db	52	;'4'
   401  0006A0  32                 	db	50	;'2'
   402  0006A1  3A                 	db	58	;':'
   403  0006A2  35                 	db	53	;'5'
   404  0006A3  34                 	db	52	;'4'
   405  0006A4  00                 	db	0
   406  0000                     
   407                           ; #config settings
   408  0006A5  00                 	db	0	; dummy byte at the end
   409  0000                     
   410                           	psect	nvCOMRAM
   411  000046                     __pnvCOMRAM:
   412                           	opt stack 0
   413  000046                     _timer0ReloadVal:
   414                           	opt stack 0
   415  000046                     	ds	2
   416                           
   417                           	psect	nvBANK1
   418  0001E6                     __pnvBANK1:
   419                           	opt stack 0
   420  0001E6                     _TMR0_InterruptHandler:
   421                           	opt stack 0
   422  0001E6                     	ds	2
   423  0001E8                     _IOCB5_InterruptHandler:
   424                           	opt stack 0
   425  0001E8                     	ds	2
   426  0001EA                     _IOCB4_InterruptHandler:
   427                           	opt stack 0
   428  0001EA                     	ds	2
   429  0001EC                     _eusart1TxBufferRemaining:
   430                           	opt stack 0
   431  0001EC                     	ds	1
   432  0000                     _ANSELA	set	3896
   433  0000                     _ANSELE	set	3900
   434  0000                     _ANSELD	set	3899
   435  0000                     _ANSELB	set	3897
   436  0000                     _ANSELC	set	3898
   437  0000                     _ADCON0bits	set	4034
   438  0000                     _ADRESH	set	4036
   439  0000                     _ADRESL	set	4035
   440  0000                     _ADCON2	set	4032
   441  0000                     _ADCON1	set	4033
   442  0000                     _ADCON0	set	4034
   443  0000                     _T0CONbits	set	4053
   444  0000                     _T0CON	set	4053
   445  0000                     _TMR0L	set	4054
   446  0000                     _TMR0H	set	4055
   447  0000                     _EEDATA	set	4008
   448  0000                     _EEADR	set	4009
   449  0000                     _EECON2	set	4007
   450  0000                     _EECON1bits	set	4006
   451  0000                     _TABLAT	set	4085
   452  0000                     _TBLPTRL	set	4086
   453  0000                     _TBLPTRH	set	4087
   454  0000                     _TBLPTRU	set	4088
   455  0000                     _IOCBbits	set	3938
   456  0000                     _INTCON2bits	set	4081
   457  0000                     _WPUB	set	3937
   458  0000                     _TRISD	set	3989
   459  0000                     _TRISC	set	3988
   460  0000                     _TRISB	set	3987
   461  0000                     _TRISA	set	3986
   462  0000                     _TRISE	set	3990
   463  0000                     _LATC	set	3979
   464  0000                     _LATB	set	3978
   465  0000                     _LATA	set	3977
   466  0000                     _LATD	set	3980
   467  0000                     _LATE	set	3981
   468  0000                     _RCREG1	set	4014
   469  0000                     _RCSTA1bits	set	4011
   470  0000                     _TXREG1	set	4013
   471  0000                     _SPBRGH1	set	4016
   472  0000                     _SPBRG1	set	4015
   473  0000                     _TXSTA1	set	4012
   474  0000                     _RCSTA1	set	4011
   475  0000                     _BAUDCON1	set	4024
   476  0000                     _PIR1bits	set	3998
   477  0000                     _PIE1bits	set	3997
   478  0000                     _PIR2bits	set	4001
   479  0000                     _PIE2bits	set	4000
   480  0000                     _RCONbits	set	4048
   481  0000                     _OSCTUNE	set	3995
   482  0000                     _OSCCON2	set	4050
   483  0000                     _OSCCON	set	4051
   484  0000                     _LATAbits	set	3977
   485  0000                     _LATDbits	set	3980
   486  0000                     _INTCONbits	set	4082
   487  0000                     _PORTDbits	set	3971
   488  0000                     _LATCbits	set	3979
   489  0000                     _LATBbits	set	3978
   490                           
   491                           	psect	cinit
   492  0030EC                     __pcinit:
   493                           	opt stack 0
   494  0030EC                     start_initialization:
   495                           	opt stack 0
   496  0030EC                     __initialization:
   497                           	opt stack 0
   498                           
   499                           ; Initialize objects allocated to BANK1 (12 bytes)
   500                           ; load TBLPTR registers with __pidataBANK1
   501  0030EC  0E74               	movlw	low __pidataBANK1
   502  0030EE  6EF6               	movwf	tblptrl,c
   503  0030F0  0E44               	movlw	high __pidataBANK1
   504  0030F2  6EF7               	movwf	tblptrh,c
   505  0030F4  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   506  0030F6  6EF8               	movwf	tblptru,c
   507  0030F8  EE01  F0DA         	lfsr	0,__pdataBANK1
   508  0030FC  EE10 F00C          	lfsr	1,12
   509  003100                     copy_data0:
   510  003100  0009               	tblrd		*+
   511  003102  CFF5 FFEE          	movff	tablat,postinc0
   512  003106  50E5               	movf	postdec1,w,c
   513  003108  50E1               	movf	fsr1l,w,c
   514  00310A  E1FA               	bnz	copy_data0
   515                           
   516                           ; Initialize objects allocated to BANK0 (6 bytes)
   517                           ; load TBLPTR registers with __pidataBANK0
   518  00310C  0ED0               	movlw	low __pidataBANK0
   519  00310E  6EF6               	movwf	tblptrl,c
   520  003110  0E44               	movlw	high __pidataBANK0
   521  003112  6EF7               	movwf	tblptrh,c
   522  003114  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   523  003116  6EF8               	movwf	tblptru,c
   524  003118  EE00  F0F4         	lfsr	0,__pdataBANK0
   525  00311C  EE10 F006          	lfsr	1,6
   526  003120                     copy_data1:
   527  003120  0009               	tblrd		*+
   528  003122  CFF5 FFEE          	movff	tablat,postinc0
   529  003126  50E5               	movf	postdec1,w,c
   530  003128  50E1               	movf	fsr1l,w,c
   531  00312A  E1FA               	bnz	copy_data1
   532                           
   533                           ; Initialize objects allocated to COMRAM (6 bytes)
   534                           ; load TBLPTR registers with __pidataCOMRAM
   535  00312C  0ECA               	movlw	low __pidataCOMRAM
   536  00312E  6EF6               	movwf	tblptrl,c
   537  003130  0E44               	movlw	high __pidataCOMRAM
   538  003132  6EF7               	movwf	tblptrh,c
   539  003134  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   540  003136  6EF8               	movwf	tblptru,c
   541  003138  EE00  F040         	lfsr	0,__pdataCOMRAM
   542  00313C  EE10 F006          	lfsr	1,6
   543  003140                     copy_data2:
   544  003140  0009               	tblrd		*+
   545  003142  CFF5 FFEE          	movff	tablat,postinc0
   546  003146  50E5               	movf	postdec1,w,c
   547  003148  50E1               	movf	fsr1l,w,c
   548  00314A  E1FA               	bnz	copy_data2
   549                           
   550                           ; Clear objects allocated to BANK2 (70 bytes)
   551  00314C  EE02  F05D         	lfsr	0,__pbssBANK2
   552  003150  0E46               	movlw	70
   553  003152                     clear_0:
   554  003152  6AEE               	clrf	postinc0,c
   555  003154  06E8               	decf	wreg,f,c
   556  003156  E1FD               	bnz	clear_0
   557                           
   558                           ; Clear objects allocated to BANK1 (184 bytes)
   559  003158  EE01  F000         	lfsr	0,__pbssBANK1
   560  00315C  0EB8               	movlw	184
   561  00315E                     clear_1:
   562  00315E  6AEE               	clrf	postinc0,c
   563  003160  06E8               	decf	wreg,f,c
   564  003162  E1FD               	bnz	clear_1
   565                           
   566                           ; Clear objects allocated to BANK0 (16 bytes)
   567  003164  EE00  F0E4         	lfsr	0,__pbssBANK0
   568  003168  0E10               	movlw	16
   569  00316A                     clear_2:
   570  00316A  6AEE               	clrf	postinc0,c
   571  00316C  06E8               	decf	wreg,f,c
   572  00316E  E1FD               	bnz	clear_2
   573                           
   574                           ; Clear objects allocated to COMRAM (15 bytes)
   575  003170  EE00  F031         	lfsr	0,__pbssCOMRAM
   576  003174  0E0F               	movlw	15
   577  003176                     clear_3:
   578  003176  6AEE               	clrf	postinc0,c
   579  003178  06E8               	decf	wreg,f,c
   580  00317A  E1FD               	bnz	clear_3
   581  00317C                     end_of_initialization:
   582                           	opt stack 0
   583  00317C                     __end_of__initialization:
   584                           	opt stack 0
   585  00317C  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   586  00317E  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   587  003180  0E00               	movlw	low (__Lmediumconst shr (0+16))
   588  003182  6EF8               	movwf	tblptru,c
   589  003184  0100               	movlb	0
   590  003186  EFF3  F01A         	goto	_main	;jump to C main() function
   591                           tblptru	equ	0xFF8
   592                           tblptrh	equ	0xFF7
   593                           tblptrl	equ	0xFF6
   594                           tablat	equ	0xFF5
   595                           postinc0	equ	0xFEE
   596                           wreg	equ	0xFE8
   597                           postdec1	equ	0xFE5
   598                           fsr1l	equ	0xFE1
   599                           
   600                           	psect	bssCOMRAM
   601  000031                     __pbssCOMRAM:
   602                           	opt stack 0
   603  000031                     _numOfValidateSamples:
   604                           	opt stack 0
   605  000031                     	ds	4
   606  000035                     TMR0_ISR@CountCallBack:
   607                           	opt stack 0
   608  000035                     	ds	2
   609  000037                     _eusart1RxTail:
   610                           	opt stack 0
   611  000037                     	ds	1
   612  000038                     _eusart1RxHead:
   613                           	opt stack 0
   614  000038                     	ds	1
   615  000039                     _eusart1TxTail:
   616                           	opt stack 0
   617  000039                     	ds	1
   618  00003A                     _eusart1TxHead:
   619                           	opt stack 0
   620  00003A                     	ds	1
   621  00003B                     _adcSampleMode:
   622                           	opt stack 0
   623  00003B                     	ds	1
   624  00003C                     _numOfReadSamples:
   625                           	opt stack 0
   626  00003C                     	ds	4
   627                           tblptru	equ	0xFF8
   628                           tblptrh	equ	0xFF7
   629                           tblptrl	equ	0xFF6
   630                           tablat	equ	0xFF5
   631                           postinc0	equ	0xFEE
   632                           wreg	equ	0xFE8
   633                           postdec1	equ	0xFE5
   634                           fsr1l	equ	0xFE1
   635                           
   636                           	psect	dataCOMRAM
   637  000040                     __pdataCOMRAM:
   638                           	opt stack 0
   639  000040                     _writeAddress:
   640                           	opt stack 0
   641  000040                     	ds	4
   642  000044                     _SynthRxOper:
   643                           	opt stack 0
   644  000044                     	ds	1
   645  000045                     _SynthTxOper:
   646                           	opt stack 0
   647  000045                     	ds	1
   648                           tblptru	equ	0xFF8
   649                           tblptrh	equ	0xFF7
   650                           tblptrl	equ	0xFF6
   651                           tablat	equ	0xFF5
   652                           postinc0	equ	0xFEE
   653                           wreg	equ	0xFE8
   654                           postdec1	equ	0xFE5
   655                           fsr1l	equ	0xFE1
   656                           
   657                           	psect	bssBANK0
   658  0000E4                     __pbssBANK0:
   659                           	opt stack 0
   660  0000E4                     _synthLdRxArrayCnt:
   661                           	opt stack 0
   662  0000E4                     	ds	1
   663  0000E5                     _cntRegUpdate:
   664                           	opt stack 0
   665  0000E5                     	ds	1
   666  0000E6                     _isReWriteDone:
   667                           	opt stack 0
   668  0000E6                     	ds	1
   669  0000E7                     _msgCount:
   670                           	opt stack 0
   671  0000E7                     	ds	1
   672  0000E8                     _crcGiven:
   673                           	opt stack 0
   674  0000E8                     	ds	1
   675  0000E9                     _crcCalc:
   676                           	opt stack 0
   677  0000E9                     	ds	1
   678  0000EA                     _dataSize:
   679                           	opt stack 0
   680  0000EA                     	ds	1
   681  0000EB                     _request:
   682                           	opt stack 0
   683  0000EB                     	ds	1
   684  0000EC                     _group:
   685                           	opt stack 0
   686  0000EC                     	ds	1
   687  0000ED                     _cState:
   688                           	opt stack 0
   689  0000ED                     	ds	1
   690  0000EE                     _eusart1RxCount:
   691                           	opt stack 0
   692  0000EE                     	ds	1
   693  0000EF                     _channel:
   694                           	opt stack 0
   695  0000EF                     	ds	1
   696  0000F0                     _Timer0_OneSec:
   697                           	opt stack 0
   698  0000F0                     	ds	1
   699  0000F1                     _Timer0_KeepAlive:
   700                           	opt stack 0
   701  0000F1                     	ds	1
   702  0000F2                     _Timer0_Sampling:
   703                           	opt stack 0
   704  0000F2                     	ds	1
   705  0000F3                     _Timer0_SynthLd:
   706                           	opt stack 0
   707  0000F3                     	ds	1
   708                           tblptru	equ	0xFF8
   709                           tblptrh	equ	0xFF7
   710                           tblptrl	equ	0xFF6
   711                           tablat	equ	0xFF5
   712                           postinc0	equ	0xFEE
   713                           wreg	equ	0xFE8
   714                           postdec1	equ	0xFE5
   715                           fsr1l	equ	0xFE1
   716                           
   717                           	psect	dataBANK0
   718  0000F4                     __pdataBANK0:
   719                           	opt stack 0
   720  0000F4                     _readAddress:
   721                           	opt stack 0
   722  0000F4                     	ds	4
   723  0000F8                     _synthLdTxCnt:
   724                           	opt stack 0
   725  0000F8                     	ds	1
   726  0000F9                     _synthLdRxCnt:
   727                           	opt stack 0
   728  0000F9                     	ds	1
   729                           tblptru	equ	0xFF8
   730                           tblptrh	equ	0xFF7
   731                           tblptrl	equ	0xFF6
   732                           tablat	equ	0xFF5
   733                           postinc0	equ	0xFEE
   734                           wreg	equ	0xFE8
   735                           postdec1	equ	0xFE5
   736                           fsr1l	equ	0xFE1
   737                           
   738                           	psect	bssBANK1
   739  000100                     __pbssBANK1:
   740                           	opt stack 0
   741  000100                     _eusart1RxBuffer:
   742                           	opt stack 0
   743  000100                     	ds	40
   744  000128                     _mcuRunTimeIn5SecTicks:
   745                           	opt stack 0
   746  000128                     	ds	4
   747  00012C                     _errno:
   748                           	opt stack 0
   749  00012C                     	ds	2
   750  00012E                     _sampleCount:
   751                           	opt stack 0
   752  00012E                     	ds	2
   753  000130                     _count:
   754                           	opt stack 0
   755  000130                     	ds	2
   756  000132                     _synthLdTxArrayCnt:
   757                           	opt stack 0
   758  000132                     	ds	1
   759  000133                     _data:
   760                           	opt stack 0
   761  000133                     	ds	1
   762  000134                     _sampleArray:
   763                           	opt stack 0
   764  000134                     	ds	64
   765  000174                     _rxMsgData:
   766                           	opt stack 0
   767  000174                     	ds	20
   768  000188                     _rxMsgQueue:
   769                           	opt stack 0
   770  000188                     	ds	20
   771  00019C                     _synthLdTxArray:
   772                           	opt stack 0
   773  00019C                     	ds	14
   774  0001AA                     _synthLdRxArray:
   775                           	opt stack 0
   776  0001AA                     	ds	14
   777                           tblptru	equ	0xFF8
   778                           tblptrh	equ	0xFF7
   779                           tblptrl	equ	0xFF6
   780                           tablat	equ	0xFF5
   781                           postinc0	equ	0xFEE
   782                           wreg	equ	0xFE8
   783                           postdec1	equ	0xFE5
   784                           fsr1l	equ	0xFE1
   785                           
   786                           	psect	dataBANK1
   787  0001DA                     __pdataBANK1:
   788                           	opt stack 0
   789  0001DA                     _groupsArray:
   790                           	opt stack 0
   791  0001DA                     	ds	12
   792                           tblptru	equ	0xFF8
   793                           tblptrh	equ	0xFF7
   794                           tblptrl	equ	0xFF6
   795                           tablat	equ	0xFF5
   796                           postinc0	equ	0xFEE
   797                           wreg	equ	0xFE8
   798                           postdec1	equ	0xFE5
   799                           fsr1l	equ	0xFE1
   800                           
   801                           	psect	bssBANK2
   802  00025D                     __pbssBANK2:
   803                           	opt stack 0
   804  00025D                     _eusart1TxBuffer:
   805                           	opt stack 0
   806  00025D                     	ds	70
   807                           tblptru	equ	0xFF8
   808                           tblptrh	equ	0xFF7
   809                           tblptrl	equ	0xFF6
   810                           tablat	equ	0xFF5
   811                           postinc0	equ	0xFEE
   812                           wreg	equ	0xFE8
   813                           postdec1	equ	0xFE5
   814                           fsr1l	equ	0xFE1
   815                           
   816                           	psect	cstackBANK2
   817  000200                     __pcstackBANK2:
   818                           	opt stack 0
   819  000200                     FlashReadUart@TxMsg:
   820                           	opt stack 0
   821                           
   822                           ; 69 bytes @ 0x0
   823  000200                     	ds	69
   824  000245                     FlashReadUart@val:
   825                           	opt stack 0
   826                           
   827                           ; 8 bytes @ 0x45
   828  000245                     	ds	8
   829  00024D                     _FlashReadUart$609:
   830                           	opt stack 0
   831                           
   832                           ; 4 bytes @ 0x4D
   833  00024D                     	ds	4
   834  000251                     _FlashReadUart$610:
   835                           	opt stack 0
   836                           
   837                           ; 4 bytes @ 0x51
   838  000251                     	ds	4
   839  000255                     FlashReadUart@j:
   840                           	opt stack 0
   841                           
   842                           ; 2 bytes @ 0x55
   843  000255                     	ds	2
   844  000257                     FlashReadUart@idx:
   845                           	opt stack 0
   846                           
   847                           ; 2 bytes @ 0x57
   848  000257                     	ds	2
   849  000259                     FlashReadUart@offset:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0x59
   853  000259                     	ds	2
   854  00025B                     FlashReadUart@numOfSampleToRead:
   855                           	opt stack 0
   856                           
   857                           ; 2 bytes @ 0x5B
   858  00025B                     	ds	2
   859                           tblptru	equ	0xFF8
   860                           tblptrh	equ	0xFF7
   861                           tblptrl	equ	0xFF6
   862                           tablat	equ	0xFF5
   863                           postinc0	equ	0xFEE
   864                           wreg	equ	0xFE8
   865                           postdec1	equ	0xFE5
   866                           fsr1l	equ	0xFE1
   867                           
   868                           	psect	cstackBANK1
   869  0001B8                     __pcstackBANK1:
   870                           	opt stack 0
   871  0001B8                     SynthReadData@TxMsg:
   872                           	opt stack 0
   873                           
   874                           ; 18 bytes @ 0x0
   875  0001B8                     	ds	18
   876  0001CA                     SynthReadData@data_984:
   877                           	opt stack 0
   878                           
   879                           ; 1 bytes @ 0x12
   880  0001CA                     	ds	1
   881  0001CB                     SynthReadData@cType:
   882                           	opt stack 0
   883                           
   884                           ; 1 bytes @ 0x13
   885  0001CB                     	ds	1
   886  0001CC                     SynthReadData@eepromDataArray:
   887                           	opt stack 0
   888                           
   889                           ; 12 bytes @ 0x14
   890  0001CC                     	ds	12
   891  0001D8                     SynthReadData@regNum:
   892                           	opt stack 0
   893                           
   894                           ; 1 bytes @ 0x20
   895  0001D8                     	ds	1
   896  0001D9                     SynthReadData@byteNum:
   897                           	opt stack 0
   898                           
   899                           ; 1 bytes @ 0x21
   900  0001D9                     	ds	1
   901                           tblptru	equ	0xFF8
   902                           tblptrh	equ	0xFF7
   903                           tblptrl	equ	0xFF6
   904                           tablat	equ	0xFF5
   905                           postinc0	equ	0xFEE
   906                           wreg	equ	0xFE8
   907                           postdec1	equ	0xFE5
   908                           fsr1l	equ	0xFE1
   909                           
   910                           	psect	cstackBANK0
   911  000060                     __pcstackBANK0:
   912                           	opt stack 0
   913  000060                     ??_FlashSampleWrite:
   914  000060                     ??___ftdiv:
   915  000060                     strtol@sign:
   916                           	opt stack 0
   917  000060                     GetMcuFwVersion@compileData:
   918                           	opt stack 0
   919  000060                     GetMcuRunTime@TxMsg:
   920                           	opt stack 0
   921  000060                     SWSPI_Synth_send_bits@bitArray:
   922                           	opt stack 0
   923                           
   924                           ; 32 bytes @ 0x0
   925  000060                     	ds	1
   926  000061                     strtol@a:
   927                           	opt stack 0
   928                           
   929                           ; 4 bytes @ 0x1
   930  000061                     	ds	1
   931  000062                     FlashSampleWrite@rotateLeft:
   932                           	opt stack 0
   933                           
   934                           ; 2 bytes @ 0x2
   935  000062                     	ds	1
   936  000063                     ___ftdiv@cntr:
   937                           	opt stack 0
   938                           
   939                           ; 1 bytes @ 0x3
   940  000063                     	ds	1
   941  000064                     ___ftdiv@f3:
   942                           	opt stack 0
   943  000064                     GetMcuFwVersion@TxMsg:
   944                           	opt stack 0
   945                           
   946                           ; 18 bytes @ 0x4
   947  000064                     	ds	1
   948  000065                     strtol@c:
   949                           	opt stack 0
   950                           
   951                           ; 1 bytes @ 0x5
   952  000065                     	ds	1
   953  000066                     ?_GetIntFromUartData:
   954                           	opt stack 0
   955  000066                     GetIntFromUartData@data:
   956                           	opt stack 0
   957                           
   958                           ; 2 bytes @ 0x6
   959  000066                     	ds	1
   960  000067                     ___ftdiv@exp:
   961                           	opt stack 0
   962                           
   963                           ; 1 bytes @ 0x7
   964  000067                     	ds	1
   965  000068                     ___ftdiv@sign:
   966                           	opt stack 0
   967                           
   968                           ; 1 bytes @ 0x8
   969  000068                     	ds	1
   970  000069                     ?___ftmul:
   971                           	opt stack 0
   972  000069                     ___ftmul@f1:
   973                           	opt stack 0
   974  000069                     GetMcuRunTime@tempRunTime:
   975                           	opt stack 0
   976                           
   977                           ; 4 bytes @ 0x9
   978  000069                     	ds	3
   979  00006C                     ___ftmul@f2:
   980                           	opt stack 0
   981                           
   982                           ; 3 bytes @ 0xC
   983  00006C                     	ds	1
   984  00006D                     GetMcuRunTime@idx:
   985                           	opt stack 0
   986                           
   987                           ; 2 bytes @ 0xD
   988  00006D                     	ds	1
   989  00006E                     ??_GetIntFromUartData:
   990                           
   991                           ; 1 bytes @ 0xE
   992  00006E                     	ds	1
   993  00006F                     ??___ftmul:
   994                           
   995                           ; 1 bytes @ 0xF
   996  00006F                     	ds	1
   997  000070                     GetIntFromUartData@dataRegArr:
   998                           	opt stack 0
   999                           
  1000                           ; 10 bytes @ 0x10
  1001  000070                     	ds	2
  1002  000072                     ___ftmul@exp:
  1003                           	opt stack 0
  1004                           
  1005                           ; 1 bytes @ 0x12
  1006  000072                     	ds	1
  1007  000073                     ___ftmul@f3_as_product:
  1008                           	opt stack 0
  1009                           
  1010                           ; 3 bytes @ 0x13
  1011  000073                     	ds	3
  1012  000076                     ___ftmul@cntr:
  1013                           	opt stack 0
  1014  000076                     _GetMcuFwVersion$2688:
  1015                           	opt stack 0
  1016                           
  1017                           ; 2 bytes @ 0x16
  1018  000076                     	ds	1
  1019  000077                     ___ftmul@sign:
  1020                           	opt stack 0
  1021                           
  1022                           ; 1 bytes @ 0x17
  1023  000077                     	ds	1
  1024  000078                     ??_CheckFlashPrecentage:
  1025  000078                     ?___ftadd:
  1026                           	opt stack 0
  1027  000078                     ?___fttol:
  1028                           	opt stack 0
  1029  000078                     _GetMcuFwVersion$2692:
  1030                           	opt stack 0
  1031  000078                     ___ftadd@f1:
  1032                           	opt stack 0
  1033  000078                     ___fttol@f1:
  1034                           	opt stack 0
  1035                           
  1036                           ; 3 bytes @ 0x18
  1037  000078                     	ds	2
  1038  00007A                     GetIntFromUartData@num:
  1039                           	opt stack 0
  1040                           
  1041                           ; 1 bytes @ 0x1A
  1042  00007A                     	ds	1
  1043  00007B                     GetIntFromUartData@recVal:
  1044                           	opt stack 0
  1045  00007B                     ___ftadd@f2:
  1046                           	opt stack 0
  1047                           
  1048                           ; 3 bytes @ 0x1B
  1049  00007B                     	ds	1
  1050  00007C                     ??___fttol:
  1051  00007C                     CheckFlashPrecentage@precentage:
  1052                           	opt stack 0
  1053  00007C                     GetIntFromUartData@retVal:
  1054                           	opt stack 0
  1055                           
  1056                           ; 8 bytes @ 0x1C
  1057  00007C                     	ds	2
  1058  00007E                     ??___ftadd:
  1059                           
  1060                           ; 1 bytes @ 0x1E
  1061  00007E                     	ds	2
  1062  000080                     SWSPI_Synth_send_bits@mask:
  1063                           	opt stack 0
  1064                           
  1065                           ; 4 bytes @ 0x20
  1066  000080                     	ds	1
  1067  000081                     ___ftadd@sign:
  1068                           	opt stack 0
  1069  000081                     ___fttol@sign1:
  1070                           	opt stack 0
  1071                           
  1072                           ; 1 bytes @ 0x21
  1073  000081                     	ds	1
  1074  000082                     ___ftadd@exp2:
  1075                           	opt stack 0
  1076  000082                     ___fttol@lval:
  1077                           	opt stack 0
  1078                           
  1079                           ; 4 bytes @ 0x22
  1080  000082                     	ds	1
  1081  000083                     ___ftadd@exp1:
  1082                           	opt stack 0
  1083                           
  1084                           ; 1 bytes @ 0x23
  1085  000083                     	ds	1
  1086  000084                     ?___ftsub:
  1087                           	opt stack 0
  1088  000084                     ?_eval_poly:
  1089                           	opt stack 0
  1090  000084                     SWSPI_Synth_send_bits@count:
  1091                           	opt stack 0
  1092  000084                     GetIntFromUartData@idxCon:
  1093                           	opt stack 0
  1094  000084                     ___ftsub@f1:
  1095                           	opt stack 0
  1096  000084                     eval_poly@x:
  1097                           	opt stack 0
  1098                           
  1099                           ; 3 bytes @ 0x24
  1100  000084                     	ds	1
  1101  000085                     SWSPI_Synth_send_bits@phrType:
  1102                           	opt stack 0
  1103                           
  1104                           ; 1 bytes @ 0x25
  1105  000085                     	ds	1
  1106  000086                     SWSPI_send_word@datac:
  1107                           	opt stack 0
  1108  000086                     GetIntFromUartData@idxData:
  1109                           	opt stack 0
  1110  000086                     ___fttol@exp1:
  1111                           	opt stack 0
  1112                           
  1113                           ; 1 bytes @ 0x26
  1114  000086                     	ds	1
  1115  000087                     ?___altoft:
  1116                           	opt stack 0
  1117  000087                     FlashReadUart@data:
  1118                           	opt stack 0
  1119  000087                     SWSPI_send_word@idx:
  1120                           	opt stack 0
  1121  000087                     eval_poly@d:
  1122                           	opt stack 0
  1123  000087                     ___ftsub@f2:
  1124                           	opt stack 0
  1125  000087                     ___altoft@c:
  1126                           	opt stack 0
  1127                           
  1128                           ; 4 bytes @ 0x27
  1129  000087                     	ds	2
  1130  000089                     ??_FlashReadUart:
  1131  000089                     SWSPI_send_word@phrType:
  1132                           	opt stack 0
  1133  000089                     eval_poly@n:
  1134                           	opt stack 0
  1135                           
  1136                           ; 2 bytes @ 0x29
  1137  000089                     	ds	1
  1138  00008A                     DacSetValue@data:
  1139                           	opt stack 0
  1140  00008A                     UpdateSynthFreq@data:
  1141                           	opt stack 0
  1142                           
  1143                           ; 2 bytes @ 0x2A
  1144  00008A                     	ds	1
  1145  00008B                     ??___altoft:
  1146  00008B                     eval_poly@res:
  1147                           	opt stack 0
  1148                           
  1149                           ; 3 bytes @ 0x2B
  1150  00008B                     	ds	1
  1151  00008C                     ??_DacSetValue:
  1152  00008C                     UpdateSynthFreq@cType:
  1153                           	opt stack 0
  1154                           
  1155                           ; 1 bytes @ 0x2C
  1156  00008C                     	ds	1
  1157  00008D                     UpdateSynthFreq@retVal:
  1158                           	opt stack 0
  1159                           
  1160                           ; 8 bytes @ 0x2D
  1161  00008D                     	ds	1
  1162  00008E                     ?_log:
  1163                           	opt stack 0
  1164  00008E                     ?_ldexp:
  1165                           	opt stack 0
  1166  00008E                     ldexp@value:
  1167                           	opt stack 0
  1168  00008E                     log@x:
  1169                           	opt stack 0
  1170                           
  1171                           ; 3 bytes @ 0x2E
  1172  00008E                     	ds	1
  1173  00008F                     ?_floor:
  1174                           	opt stack 0
  1175  00008F                     floor@x:
  1176                           	opt stack 0
  1177                           
  1178                           ; 3 bytes @ 0x2F
  1179  00008F                     	ds	1
  1180  000090                     DacSetValue@dacIndex:
  1181                           	opt stack 0
  1182                           
  1183                           ; 1 bytes @ 0x30
  1184  000090                     	ds	1
  1185  000091                     ldexp@newexp:
  1186                           	opt stack 0
  1187  000091                     log@exponent:
  1188                           	opt stack 0
  1189  000091                     DacSetValue@retVal:
  1190                           	opt stack 0
  1191                           
  1192                           ; 8 bytes @ 0x31
  1193  000091                     	ds	1
  1194  000092                     floor@i:
  1195                           	opt stack 0
  1196                           
  1197                           ; 3 bytes @ 0x32
  1198  000092                     	ds	1
  1199  000093                     ??_ldexp:
  1200                           
  1201                           ; 1 bytes @ 0x33
  1202  000093                     	ds	2
  1203  000095                     floor@expon:
  1204                           	opt stack 0
  1205                           
  1206                           ; 2 bytes @ 0x35
  1207  000095                     	ds	2
  1208  000097                     ?_exp:
  1209                           	opt stack 0
  1210  000097                     exp@x:
  1211                           	opt stack 0
  1212                           
  1213                           ; 3 bytes @ 0x37
  1214  000097                     	ds	3
  1215  00009A                     _exp$3595:
  1216                           	opt stack 0
  1217                           
  1218                           ; 3 bytes @ 0x3A
  1219  00009A                     	ds	3
  1220  00009D                     exp@exponent:
  1221                           	opt stack 0
  1222                           
  1223                           ; 2 bytes @ 0x3D
  1224  00009D                     	ds	2
  1225  00009F                     exp@sign:
  1226                           	opt stack 0
  1227                           
  1228                           ; 1 bytes @ 0x3F
  1229  00009F                     	ds	1
  1230  0000A0                     ?_pow:
  1231                           	opt stack 0
  1232  0000A0                     pow@x:
  1233                           	opt stack 0
  1234                           
  1235                           ; 3 bytes @ 0x40
  1236  0000A0                     	ds	3
  1237  0000A3                     pow@y:
  1238                           	opt stack 0
  1239                           
  1240                           ; 3 bytes @ 0x43
  1241  0000A3                     	ds	3
  1242  0000A6                     _pow$3593:
  1243                           	opt stack 0
  1244                           
  1245                           ; 3 bytes @ 0x46
  1246  0000A6                     	ds	3
  1247  0000A9                     _pow$3594:
  1248                           	opt stack 0
  1249                           
  1250                           ; 3 bytes @ 0x49
  1251  0000A9                     	ds	3
  1252  0000AC                     pow@sign:
  1253                           	opt stack 0
  1254                           
  1255                           ; 1 bytes @ 0x4C
  1256  0000AC                     	ds	1
  1257  0000AD                     pow@yi:
  1258                           	opt stack 0
  1259                           
  1260                           ; 4 bytes @ 0x4D
  1261  0000AD                     	ds	4
  1262  0000B1                     ??_AdcConvert:
  1263  0000B1                     ?_ReadIntFromEeprom:
  1264                           	opt stack 0
  1265  0000B1                     ReadIntFromEeprom@numOfByes:
  1266                           	opt stack 0
  1267                           
  1268                           ; 2 bytes @ 0x51
  1269  0000B1                     	ds	2
  1270  0000B3                     AdcConvert@_adcResult:
  1271                           	opt stack 0
  1272                           
  1273                           ; 2 bytes @ 0x53
  1274  0000B3                     	ds	2
  1275  0000B5                     ??_ReadIntFromEeprom:
  1276  0000B5                     AdcConvert@ldRxSate:
  1277                           	opt stack 0
  1278                           
  1279                           ; 2 bytes @ 0x55
  1280  0000B5                     	ds	2
  1281  0000B7                     AdcConvert@ldTxSate:
  1282                           	opt stack 0
  1283                           
  1284                           ; 2 bytes @ 0x57
  1285  0000B7                     	ds	1
  1286  0000B8                     ReadIntFromEeprom@base:
  1287                           	opt stack 0
  1288                           
  1289                           ; 4 bytes @ 0x58
  1290  0000B8                     	ds	1
  1291  0000B9                     AdcConvert@_adcResult_347:
  1292                           	opt stack 0
  1293                           
  1294                           ; 2 bytes @ 0x59
  1295  0000B9                     	ds	2
  1296  0000BB                     _AdcConvert$3590:
  1297                           	opt stack 0
  1298                           
  1299                           ; 3 bytes @ 0x5B
  1300  0000BB                     	ds	1
  1301  0000BC                     _ReadIntFromEeprom$3591:
  1302                           	opt stack 0
  1303                           
  1304                           ; 3 bytes @ 0x5C
  1305  0000BC                     	ds	2
  1306  0000BE                     AdcConvert@adcRes:
  1307                           	opt stack 0
  1308                           
  1309                           ; 2 bytes @ 0x5E
  1310  0000BE                     	ds	1
  1311  0000BF                     _ReadIntFromEeprom$3592:
  1312                           	opt stack 0
  1313                           
  1314                           ; 3 bytes @ 0x5F
  1315  0000BF                     	ds	1
  1316  0000C0                     AdcConvert@idx:
  1317                           	opt stack 0
  1318                           
  1319                           ; 1 bytes @ 0x60
  1320  0000C0                     	ds	2
  1321  0000C2                     ReadIntFromEeprom@address:
  1322                           	opt stack 0
  1323                           
  1324                           ; 1 bytes @ 0x62
  1325  0000C2                     	ds	1
  1326  0000C3                     ReadIntFromEeprom@retVal:
  1327                           	opt stack 0
  1328                           
  1329                           ; 4 bytes @ 0x63
  1330  0000C3                     	ds	4
  1331  0000C7                     ReadIntFromEeprom@idx:
  1332                           	opt stack 0
  1333                           
  1334                           ; 1 bytes @ 0x67
  1335  0000C7                     	ds	1
  1336  0000C8                     ??_DacInit:
  1337  0000C8                     DacReadValue@data:
  1338                           	opt stack 0
  1339  0000C8                     SynthReadData@data:
  1340                           	opt stack 0
  1341  0000C8                     InitSynth@EepromVal:
  1342                           	opt stack 0
  1343                           
  1344                           ; 4 bytes @ 0x68
  1345  0000C8                     	ds	2
  1346  0000CA                     ??_DacReadValue:
  1347  0000CA                     DacInit@dacInput:
  1348                           	opt stack 0
  1349                           
  1350                           ; 2 bytes @ 0x6A
  1351  0000CA                     	ds	2
  1352  0000CC                     DacInit@idx:
  1353                           	opt stack 0
  1354  0000CC                     DacReadValue@regNum:
  1355                           	opt stack 0
  1356  0000CC                     InitSynth@cType:
  1357                           	opt stack 0
  1358                           
  1359                           ; 1 bytes @ 0x6C
  1360  0000CC                     	ds	1
  1361  0000CD                     DacReadValue@byteNum:
  1362                           	opt stack 0
  1363  0000CD                     InitSynth@idx:
  1364                           	opt stack 0
  1365                           
  1366                           ; 1 bytes @ 0x6D
  1367  0000CD                     	ds	1
  1368  0000CE                     InitSynth@regNum:
  1369                           	opt stack 0
  1370  0000CE                     DacReadValue@readVal:
  1371                           	opt stack 0
  1372                           
  1373                           ; 2 bytes @ 0x6E
  1374  0000CE                     	ds	1
  1375  0000CF                     SetSynthOper@cType:
  1376                           	opt stack 0
  1377                           
  1378                           ; 1 bytes @ 0x6F
  1379  0000CF                     	ds	1
  1380  0000D0                     DacReadValue@dacIndex:
  1381                           	opt stack 0
  1382                           
  1383                           ; 1 bytes @ 0x70
  1384  0000D0                     	ds	1
  1385  0000D1                     DacReadValue@TxMsg:
  1386                           	opt stack 0
  1387                           
  1388                           ; 7 bytes @ 0x71
  1389  0000D1                     	ds	7
  1390  0000D8                     DacReadValue@byteIdx:
  1391                           	opt stack 0
  1392                           
  1393                           ; 2 bytes @ 0x78
  1394  0000D8                     	ds	2
  1395  0000DA                     GroupAdc@data:
  1396                           	opt stack 0
  1397  0000DA                     GroupSynthesizers@data:
  1398                           	opt stack 0
  1399  0000DA                     GroupFlashMemory@data:
  1400                           	opt stack 0
  1401  0000DA                     GroupDAC@data:
  1402                           	opt stack 0
  1403  0000DA                     
  1404                           ; 3 bytes @ 0x7A
  1405  0000DA                     	ds	2
  1406  0000DC                     GroupAdc@request:
  1407                           	opt stack 0
  1408  0000DC                     GroupSynthesizers@request:
  1409                           	opt stack 0
  1410  0000DC                     GroupFlashMemory@request:
  1411                           	opt stack 0
  1412  0000DC                     GroupDAC@request:
  1413                           	opt stack 0
  1414                           
  1415                           ; 1 bytes @ 0x7C
  1416  0000DC                     	ds	1
  1417  0000DD                     ??_readUartMessage:
  1418  0000DD                     GroupControlMcu@request:
  1419                           	opt stack 0
  1420  0000DD                     GroupStatusAndVersion@request:
  1421                           	opt stack 0
  1422                           
  1423                           ; 1 bytes @ 0x7D
  1424  0000DD                     	ds	4
  1425  0000E1                     readUartMessage@idx:
  1426                           	opt stack 0
  1427                           
  1428                           ; 2 bytes @ 0x81
  1429  0000E1                     	ds	2
  1430  0000E3                     readUartMessage@chRec:
  1431                           	opt stack 0
  1432                           
  1433                           ; 1 bytes @ 0x83
  1434  0000E3                     	ds	1
  1435                           tblptru	equ	0xFF8
  1436                           tblptrh	equ	0xFF7
  1437                           tblptrl	equ	0xFF6
  1438                           tablat	equ	0xFF5
  1439                           postinc0	equ	0xFEE
  1440                           wreg	equ	0xFE8
  1441                           postdec1	equ	0xFE5
  1442                           fsr1l	equ	0xFE1
  1443                           
  1444                           	psect	cstackCOMRAM
  1445  000001                     __pcstackCOMRAM:
  1446                           	opt stack 0
  1447  000001                     ?___lwmod:
  1448                           	opt stack 0
  1449  000001                     ___lwmod@dividend:
  1450                           	opt stack 0
  1451                           
  1452                           ; 2 bytes @ 0x0
  1453  000001                     	ds	2
  1454  000003                     ___lwmod@divisor:
  1455                           	opt stack 0
  1456                           
  1457                           ; 2 bytes @ 0x2
  1458  000003                     	ds	2
  1459  000005                     ___lwmod@counter:
  1460                           	opt stack 0
  1461                           
  1462                           ; 1 bytes @ 0x4
  1463  000005                     	ds	1
  1464  000006                     ??_INTERRUPT_InterruptManager:
  1465                           
  1466                           ; 1 bytes @ 0x5
  1467  000006                     	ds	18
  1468  000018                     ??_EUSART1_Read:
  1469  000018                     ??_isspace:
  1470  000018                     ??_isdigit:
  1471  000018                     ??_isupper:
  1472  000018                     ??_BlinkErrorLeds:
  1473  000018                     ??_BlinkOkLeds:
  1474  000018                     ??_keepAliveSignalLed:
  1475  000018                     ?_ADC_GetConversion:
  1476                           	opt stack 0
  1477  000018                     ?_GetUint16FromBitArray:
  1478  000018                     ?_abs:
  1479                           	opt stack 0
  1480  000018                     ?___wmul:
  1481                           	opt stack 0
  1482  000018                     ?___awmod:
  1483                           	opt stack 0
  1484  000018                     ?___ftpack:
  1485                           	opt stack 0
  1486  000018                     ?_frexp:
  1487                           	opt stack 0
  1488  000018                     ?___ftneg:
  1489                           	opt stack 0
  1490  000018                     ?___lldiv:
  1491                           	opt stack 0
  1492  000018                     ?___llmod:
  1493                           	opt stack 0
  1494  000018                     SwSpi_Data_Pin@cPinMode:
  1495                           	opt stack 0
  1496  000018                     SwSpi_Clk_Pin@cPinMode:
  1497                           	opt stack 0
  1498  000018                     SwSpi_Set_CE_Pin@cPinMode:
  1499                           	opt stack 0
  1500  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  1501                           	opt stack 0
  1502  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  1503                           	opt stack 0
  1504  000018                     EUSART1_Write@txData:
  1505                           	opt stack 0
  1506  000018                     DATAEE_WriteByte@bData:
  1507                           	opt stack 0
  1508  000018                     DATAEE_ReadByte@bAdd:
  1509                           	opt stack 0
  1510  000018                     toupper@c:
  1511                           	opt stack 0
  1512  000018                     IOCB4_SetInterruptHandler@InterruptHandler:
  1513                           	opt stack 0
  1514  000018                     IOCB5_SetInterruptHandler@InterruptHandler:
  1515                           	opt stack 0
  1516  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  1517                           	opt stack 0
  1518  000018                     crc8@dataArray:
  1519                           	opt stack 0
  1520  000018                     GetUint16FromBitArray@bitarray:
  1521                           	opt stack 0
  1522  000018                     Make32bitsArray@array:
  1523                           	opt stack 0
  1524  000018                     ___wmul@multiplier:
  1525                           	opt stack 0
  1526  000018                     abs@a:
  1527                           	opt stack 0
  1528  000018                     ___awmod@dividend:
  1529                           	opt stack 0
  1530  000018                     memset@p1:
  1531                           	opt stack 0
  1532  000018                     ___ftpack@arg:
  1533                           	opt stack 0
  1534  000018                     ___ftge@ff1:
  1535                           	opt stack 0
  1536  000018                     ___ftneg@f1:
  1537                           	opt stack 0
  1538  000018                     frexp@value:
  1539                           	opt stack 0
  1540  000018                     FLASH_ReadByte@flashAddr:
  1541                           	opt stack 0
  1542  000018                     FLASH_EraseBlock@baseAddr:
  1543                           	opt stack 0
  1544  000018                     make8@data:
  1545                           	opt stack 0
  1546  000018                     ___lldiv@dividend:
  1547                           	opt stack 0
  1548  000018                     ___llmod@dividend:
  1549                           	opt stack 0
  1550                           
  1551                           ; 4 bytes @ 0x17
  1552  000018                     	ds	1
  1553  000019                     EepromRead@address:
  1554                           	opt stack 0
  1555  000019                     SwSpi_Data_Pin@phrType:
  1556                           	opt stack 0
  1557  000019                     SwSpi_Clk_Pin@phrType:
  1558                           	opt stack 0
  1559  000019                     SwSpi_Set_CE_Pin@phrType:
  1560                           	opt stack 0
  1561  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  1562                           	opt stack 0
  1563  000019                     DATAEE_WriteByte@bAdd:
  1564                           	opt stack 0
  1565  000019                     _isdigit$3320:
  1566                           	opt stack 0
  1567  000019                     _isspace$3323:
  1568                           	opt stack 0
  1569  000019                     _isupper$3326:
  1570                           	opt stack 0
  1571  000019                     WriteUartMessage@dataBuf:
  1572                           	opt stack 0
  1573  000019                     EUSART1_Read@readValue:
  1574                           	opt stack 0
  1575                           
  1576                           ; 2 bytes @ 0x18
  1577  000019                     	ds	1
  1578  00001A                     ??_ADC_GetConversion:
  1579  00001A                     ??_GetUint16FromBitArray:
  1580  00001A                     ??_abs:
  1581  00001A                     ??_TMR0_Initialize:
  1582  00001A                     ?___lmul:
  1583                           	opt stack 0
  1584  00001A                     SWSPI_DAC_send_bits@data:
  1585                           	opt stack 0
  1586  00001A                     DATAEE_WriteByte@GIEBitValue:
  1587                           	opt stack 0
  1588  00001A                     isdigit@c:
  1589                           	opt stack 0
  1590  00001A                     isspace@c:
  1591                           	opt stack 0
  1592  00001A                     isupper@c:
  1593                           	opt stack 0
  1594  00001A                     crc8@dataSize:
  1595                           	opt stack 0
  1596  00001A                     ___wmul@multiplicand:
  1597                           	opt stack 0
  1598  00001A                     ___awmod@divisor:
  1599                           	opt stack 0
  1600  00001A                     memset@c:
  1601                           	opt stack 0
  1602  00001A                     Make32bitsArray@data:
  1603                           	opt stack 0
  1604  00001A                     ___lmul@multiplier:
  1605                           	opt stack 0
  1606                           
  1607                           ; 4 bytes @ 0x19
  1608  00001A                     	ds	1
  1609  00001B                     ??_isalpha:
  1610  00001B                     BlinkErrorLeds@state:
  1611                           	opt stack 0
  1612  00001B                     BlinkOkLeds@state:
  1613                           	opt stack 0
  1614  00001B                     EepromWrite@data:
  1615                           	opt stack 0
  1616  00001B                     SWSPI_DAC_send_bits@count:
  1617                           	opt stack 0
  1618  00001B                     ___ftpack@exp:
  1619                           	opt stack 0
  1620  00001B                     WriteUartMessage@dataSize:
  1621                           	opt stack 0
  1622  00001B                     frexp@eptr:
  1623                           	opt stack 0
  1624  00001B                     ___ftge@ff2:
  1625                           	opt stack 0
  1626                           
  1627                           ; 3 bytes @ 0x1A
  1628  00001B                     	ds	1
  1629  00001C                     ??_crc8:
  1630  00001C                     EepromWrite@address:
  1631                           	opt stack 0
  1632  00001C                     SWSPI_DAC_send_bits@phrType:
  1633                           	opt stack 0
  1634  00001C                     FLASH_EraseBlock@GIEBitValue:
  1635                           	opt stack 0
  1636  00001C                     ADC_GetConversion@channel:
  1637                           	opt stack 0
  1638  00001C                     make8@dataLocation:
  1639                           	opt stack 0
  1640  00001C                     ___awmod@counter:
  1641                           	opt stack 0
  1642  00001C                     ___ftpack@sign:
  1643                           	opt stack 0
  1644  00001C                     _isalpha$3317:
  1645                           	opt stack 0
  1646  00001C                     BlinkErrorLeds@idx:
  1647                           	opt stack 0
  1648  00001C                     BlinkOkLeds@idx:
  1649                           	opt stack 0
  1650  00001C                     ___wmul@product:
  1651                           	opt stack 0
  1652  00001C                     memset@n:
  1653                           	opt stack 0
  1654  00001C                     ___lldiv@divisor:
  1655                           	opt stack 0
  1656  00001C                     ___llmod@divisor:
  1657                           	opt stack 0
  1658                           
  1659                           ; 4 bytes @ 0x1B
  1660  00001C                     	ds	1
  1661  00001D                     ??_make8:
  1662  00001D                     ??___ftpack:
  1663  00001D                     ??_frexp:
  1664  00001D                     ??_WriteUartMessage:
  1665  00001D                     ___awmod@sign:
  1666                           	opt stack 0
  1667  00001D                     isalpha@c:
  1668                           	opt stack 0
  1669  00001D                     crc8@crc:
  1670                           	opt stack 0
  1671  00001D                     GetUint16FromBitArray@res:
  1672                           	opt stack 0
  1673  00001D                     FLASH_WriteBlock@writeAddr:
  1674                           	opt stack 0
  1675                           
  1676                           ; 4 bytes @ 0x1C
  1677  00001D                     	ds	1
  1678  00001E                     ??_Make32bitsArray:
  1679  00001E                     ??___ftge:
  1680  00001E                     WriteUartMessage@idx:
  1681                           	opt stack 0
  1682  00001E                     memset@p:
  1683                           	opt stack 0
  1684  00001E                     ___lmul@multiplicand:
  1685                           	opt stack 0
  1686                           
  1687                           ; 4 bytes @ 0x1D
  1688  00001E                     	ds	1
  1689  00001F                     crc8@i:
  1690                           	opt stack 0
  1691  00001F                     GetUint16FromBitArray@i:
  1692                           	opt stack 0
  1693                           
  1694                           ; 2 bytes @ 0x1E
  1695  00001F                     	ds	1
  1696  000020                     ?___awtoft:
  1697                           	opt stack 0
  1698  000020                     ?___lltoft:
  1699                           	opt stack 0
  1700  000020                     ?___lwtoft:
  1701                           	opt stack 0
  1702  000020                     ___llmod@counter:
  1703                           	opt stack 0
  1704  000020                     ZeroArray@array:
  1705                           	opt stack 0
  1706  000020                     FillArray@array:
  1707                           	opt stack 0
  1708  000020                     Make32bitsArray@idx:
  1709                           	opt stack 0
  1710  000020                     ___awtoft@c:
  1711                           	opt stack 0
  1712  000020                     ___lwtoft@c:
  1713                           	opt stack 0
  1714  000020                     ___lldiv@quotient:
  1715                           	opt stack 0
  1716  000020                     ___lltoft@c:
  1717                           	opt stack 0
  1718                           
  1719                           ; 4 bytes @ 0x1F
  1720  000020                     	ds	1
  1721  000021                     FLASH_WriteBlock@flashWrBufPtr:
  1722                           	opt stack 0
  1723  000021                     StoreIntInEeprom@data:
  1724                           	opt stack 0
  1725                           
  1726                           ; 4 bytes @ 0x20
  1727  000021                     	ds	1
  1728  000022                     ZeroArray@size:
  1729                           	opt stack 0
  1730  000022                     FillArray@size:
  1731                           	opt stack 0
  1732  000022                     ___lmul@product:
  1733                           	opt stack 0
  1734                           
  1735                           ; 4 bytes @ 0x21
  1736  000022                     	ds	1
  1737  000023                     ??_FLASH_WriteBlock:
  1738  000023                     ___awtoft@sign:
  1739                           	opt stack 0
  1740                           
  1741                           ; 1 bytes @ 0x22
  1742  000023                     	ds	1
  1743  000024                     ??_GetMcuFwVersion:
  1744  000024                     ??_FlashReadCondition:
  1745  000024                     ??___lltoft:
  1746  000024                     SendAckMessage@inRequest:
  1747                           	opt stack 0
  1748  000024                     FillArray@value:
  1749                           	opt stack 0
  1750  000024                     ___lldiv@counter:
  1751                           	opt stack 0
  1752                           
  1753                           ; 1 bytes @ 0x23
  1754  000024                     	ds	1
  1755  000025                     ??_GetMcuRunTime:
  1756  000025                     SendAckMessage@inGroup:
  1757                           	opt stack 0
  1758  000025                     StoreIntInEeprom@address:
  1759                           	opt stack 0
  1760  000025                     SWSPI_Synth_send_bits@data:
  1761                           	opt stack 0
  1762                           
  1763                           ; 4 bytes @ 0x24
  1764  000025                     	ds	1
  1765  000026                     ?_strtol:
  1766                           	opt stack 0
  1767  000026                     StoreIntInEeprom@numOfByes:
  1768                           	opt stack 0
  1769  000026                     strtol@s:
  1770                           	opt stack 0
  1771  000026                     SendAckMessage@TxMsg:
  1772                           	opt stack 0
  1773                           
  1774                           ; 6 bytes @ 0x25
  1775  000026                     	ds	1
  1776  000027                     FLASH_WriteBlock@blockStartAddr:
  1777                           	opt stack 0
  1778                           
  1779                           ; 4 bytes @ 0x26
  1780  000027                     	ds	1
  1781  000028                     StoreIntInEeprom@val:
  1782                           	opt stack 0
  1783  000028                     ___lltoft@exp:
  1784                           	opt stack 0
  1785  000028                     strtol@endptr:
  1786                           	opt stack 0
  1787  000028                     FlashReadCondition@TxMsg:
  1788                           	opt stack 0
  1789                           
  1790                           ; 9 bytes @ 0x27
  1791  000028                     	ds	1
  1792  000029                     ?___ftdiv:
  1793                           	opt stack 0
  1794  000029                     StoreIntInEeprom@idx:
  1795                           	opt stack 0
  1796  000029                     ___ftdiv@f1:
  1797                           	opt stack 0
  1798  000029                     SWSPI_send_word@data:
  1799                           	opt stack 0
  1800                           
  1801                           ; 4 bytes @ 0x28
  1802  000029                     	ds	1
  1803  00002A                     strtol@base:
  1804                           	opt stack 0
  1805                           
  1806                           ; 2 bytes @ 0x29
  1807  00002A                     	ds	1
  1808  00002B                     FLASH_WriteBlock@GIEBitValue:
  1809                           	opt stack 0
  1810                           
  1811                           ; 1 bytes @ 0x2A
  1812  00002B                     	ds	1
  1813  00002C                     ??_strtol:
  1814  00002C                     ??_testLeds:
  1815  00002C                     FLASH_WriteBlock@i:
  1816                           	opt stack 0
  1817  00002C                     SetChannelMode@data:
  1818                           	opt stack 0
  1819  00002C                     ___ftdiv@f2:
  1820                           	opt stack 0
  1821                           
  1822                           ; 3 bytes @ 0x2B
  1823  00002C                     	ds	1
  1824  00002D                     SWSPI_send_word@dataSize:
  1825                           	opt stack 0
  1826  00002D                     testLeds@idx:
  1827                           	opt stack 0
  1828  00002D                     FlashSampleWrite@sampleData:
  1829                           	opt stack 0
  1830                           
  1831                           ; 2 bytes @ 0x2C
  1832  00002D                     	ds	1
  1833  00002E                     
  1834                           ; 1 bytes @ 0x2D
  1835  00002E                     	ds	1
  1836  00002F                     ??_eval_poly:
  1837  00002F                     FlashSampleWrite@channelNum:
  1838                           	opt stack 0
  1839  00002F                     ___altoft@exp:
  1840                           	opt stack 0
  1841                           
  1842                           ; 1 bytes @ 0x2E
  1843  00002F                     	ds	1
  1844  000030                     ___altoft@sign:
  1845                           	opt stack 0
  1846                           
  1847                           ; 1 bytes @ 0x2F
  1848  000030                     	ds	1
  1849  000031                     tblptru	equ	0xFF8
  1850                           tblptrh	equ	0xFF7
  1851                           tblptrl	equ	0xFF6
  1852                           tablat	equ	0xFF5
  1853                           postinc0	equ	0xFEE
  1854                           wreg	equ	0xFE8
  1855                           postdec1	equ	0xFE5
  1856                           fsr1l	equ	0xFE1
  1857                           
  1858                           ; 1 bytes @ 0x30
  1859 ;;
  1860 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1861 ;;
  1862 ;; *************** function _main *****************
  1863 ;; Defined at:
  1864 ;;		line 13 in file "main.c"
  1865 ;; Parameters:    Size  Location     Type
  1866 ;;		None
  1867 ;; Auto vars:     Size  Location     Type
  1868 ;;		None
  1869 ;; Return value:  Size  Location     Type
  1870 ;;                  1    wreg      void 
  1871 ;; Registers used:
  1872 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1873 ;; Tracked objects:
  1874 ;;		On entry : 0/0
  1875 ;;		On exit  : 0/0
  1876 ;;		Unchanged: 0/0
  1877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1878 ;;      Params:         0       0       0       0       0       0       0
  1879 ;;      Locals:         0       0       0       0       0       0       0
  1880 ;;      Temps:          0       0       0       0       0       0       0
  1881 ;;      Totals:         0       0       0       0       0       0       0
  1882 ;;Total ram usage:        0 bytes
  1883 ;; Hardware stack levels required when called:   14
  1884 ;; This function calls:
  1885 ;;		_AdcConvert
  1886 ;;		_BlinkErrorLeds
  1887 ;;		_BlinkOkLeds
  1888 ;;		_CheckFlashPrecentage
  1889 ;;		_InitSystemApplicationManagers
  1890 ;;		_SendSystemStartAck
  1891 ;;		_SetMcuRunTime
  1892 ;;		_SetMcuSystem
  1893 ;;		_SynthLdDetect
  1894 ;;		_keepAliveSignalLed
  1895 ;;		_keepAliveSignalUart
  1896 ;;		_readUartMessage
  1897 ;; This function is called by:
  1898 ;;		Startup code after reset
  1899 ;; This function uses a non-reentrant model
  1900 ;;
  1901                           
  1902                           	psect	text0
  1903  0035E6                     __ptext0:
  1904                           	opt stack 0
  1905  0035E6                     _main:
  1906                           	opt stack 17
  1907                           
  1908                           ;main.c: 16: SetMcuSystem();
  1909                           
  1910                           ;incstack = 0
  1911  0035E6  EC4C  F022         	call	_SetMcuSystem	;wreg free
  1912                           
  1913                           ;main.c: 19: InitSystemApplicationManagers();
  1914  0035EA  ECE4  F021         	call	_InitSystemApplicationManagers	;wreg free
  1915                           
  1916                           ;main.c: 22: SendSystemStartAck();
  1917  0035EE  EC46  F022         	call	_SendSystemStartAck	;wreg free
  1918                           
  1919                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  1920  0035F2  0E03               	movlw	3
  1921  0035F4  EC2E  F01C         	call	_BlinkOkLeds
  1922  0035F8                     
  1923                           ;main.c: 28: {
  1924                           ;main.c: 29: readUartMessage();
  1925  0035F8  EC8F  F00A         	call	_readUartMessage	;wreg free
  1926                           
  1927                           ;main.c: 31: if (Timer0_OneSec == 1)
  1928  0035FC  0100               	movlb	0	; () banked
  1929  0035FE  05F0               	decf	_Timer0_OneSec& (0+255),w,b	;volatile
  1930  003600  A4D8               	btfss	status,2,c
  1931  003602  D006               	goto	l1596
  1932                           
  1933                           ; BSR set to: 0
  1934                           ;main.c: 32: {
  1935                           ;main.c: 33: SetMcuRunTime();
  1936  003604  EC57  F01E         	call	_SetMcuRunTime	;wreg free
  1937                           
  1938                           ;main.c: 34: Timer0_OneSec = 0;
  1939  003608  0E00               	movlw	0
  1940  00360A  0100               	movlb	0	; () banked
  1941  00360C  6FF0               	movwf	_Timer0_OneSec& (0+255),b	;volatile
  1942                           
  1943                           ;main.c: 35: }
  1944  00360E  D7F4               	goto	l1595
  1945  003610                     l1596:
  1946                           
  1947                           ; BSR set to: 0
  1948                           ;main.c: 36: else if (Timer0_Sampling == 1)
  1949                           
  1950                           ; BSR set to: 0
  1951  003610  05F2               	decf	_Timer0_Sampling& (0+255),w,b	;volatile
  1952  003612  A4D8               	btfss	status,2,c
  1953  003614  D010               	goto	l1598
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;main.c: 37: {
  1957                           ;main.c: 38: keepAliveSignalLed();
  1958  003616  ECCD  F021         	call	_keepAliveSignalLed	;wreg free
  1959                           
  1960                           ;main.c: 40: if(1 == CheckFlashPrecentage())
  1961  00361A  EC1D  F017         	call	_CheckFlashPrecentage	;wreg free
  1962  00361E  06E8               	decf	wreg,f,c
  1963  003620  A4D8               	btfss	status,2,c
  1964  003622  D003               	goto	l1599
  1965                           
  1966                           ;main.c: 41: {
  1967                           ;main.c: 42: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  1968  003624  0E02               	movlw	2
  1969  003626  ECFF  F01B         	call	_BlinkErrorLeds
  1970  00362A                     l1599:
  1971                           
  1972                           ;main.c: 43: }
  1973                           ;main.c: 46: AdcConvert();
  1974  00362A  EC8F  F008         	call	_AdcConvert	;wreg free
  1975                           
  1976                           ;main.c: 47: Timer0_Sampling = 0;
  1977  00362E  0E00               	movlw	0
  1978  003630  0100               	movlb	0	; () banked
  1979  003632  6FF2               	movwf	_Timer0_Sampling& (0+255),b	;volatile
  1980                           
  1981                           ;main.c: 48: }
  1982  003634  D7E1               	goto	l1595
  1983  003636                     l1598:
  1984                           
  1985                           ; BSR set to: 0
  1986                           ;main.c: 49: else if (Timer0_KeepAlive == 1)
  1987                           
  1988                           ; BSR set to: 0
  1989  003636  05F1               	decf	_Timer0_KeepAlive& (0+255),w,b	;volatile
  1990  003638  A4D8               	btfss	status,2,c
  1991  00363A  D006               	goto	l1601
  1992                           
  1993                           ; BSR set to: 0
  1994                           ;main.c: 50: {
  1995                           ;main.c: 51: keepAliveSignalUart();
  1996  00363C  EC40  F022         	call	_keepAliveSignalUart	;wreg free
  1997                           
  1998                           ;main.c: 52: Timer0_KeepAlive = 0;
  1999  003640  0E00               	movlw	0
  2000  003642  0100               	movlb	0	; () banked
  2001  003644  6FF1               	movwf	_Timer0_KeepAlive& (0+255),b	;volatile
  2002                           
  2003                           ;main.c: 53: }
  2004  003646  D7D8               	goto	l1595
  2005  003648                     l1601:
  2006                           
  2007                           ; BSR set to: 0
  2008                           ;main.c: 54: else if (Timer0_SynthLd == 1)
  2009                           
  2010                           ; BSR set to: 0
  2011  003648  05F3               	decf	_Timer0_SynthLd& (0+255),w,b	;volatile
  2012  00364A  A4D8               	btfss	status,2,c
  2013  00364C  D7D5               	goto	l1595
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;main.c: 55: {
  2017                           ;main.c: 56: SynthLdDetect();
  2018  00364E  EC14  F019         	call	_SynthLdDetect	;wreg free
  2019                           
  2020                           ;main.c: 57: Timer0_SynthLd = 0;
  2021  003652  0E00               	movlw	0
  2022  003654  0100               	movlb	0	; () banked
  2023  003656  6FF3               	movwf	_Timer0_SynthLd& (0+255),b	;volatile
  2024                           
  2025                           ; BSR set to: 0
  2026                           
  2027                           ; BSR set to: 0
  2028                           
  2029                           ; BSR set to: 0
  2030                           
  2031                           ; BSR set to: 0
  2032                           
  2033                           ; BSR set to: 0
  2034  003658  D7CF               	goto	l1595
  2035  00365A                     __end_of_main:
  2036                           	opt stack 0
  2037                           tblptru	equ	0xFF8
  2038                           tblptrh	equ	0xFF7
  2039                           tblptrl	equ	0xFF6
  2040                           tablat	equ	0xFF5
  2041                           postinc0	equ	0xFEE
  2042                           wreg	equ	0xFE8
  2043                           postdec1	equ	0xFE5
  2044                           fsr1l	equ	0xFE1
  2045                           status	equ	0xFD8
  2046                           
  2047 ;; *************** function _readUartMessage *****************
  2048 ;; Defined at:
  2049 ;;		line 28 in file "EusartApp.c"
  2050 ;; Parameters:    Size  Location     Type
  2051 ;;		None
  2052 ;; Auto vars:     Size  Location     Type
  2053 ;;  idx             2  129[BANK0 ] int 
  2054 ;;  chRec           1  131[BANK0 ] unsigned char 
  2055 ;; Return value:  Size  Location     Type
  2056 ;;                  1    wreg      void 
  2057 ;; Registers used:
  2058 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2059 ;; Tracked objects:
  2060 ;;		On entry : 0/0
  2061 ;;		On exit  : 0/0
  2062 ;;		Unchanged: 0/0
  2063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2064 ;;      Params:         0       0       0       0       0       0       0
  2065 ;;      Locals:         0       3       0       0       0       0       0
  2066 ;;      Temps:          0       4       0       0       0       0       0
  2067 ;;      Totals:         0       7       0       0       0       0       0
  2068 ;;Total ram usage:        7 bytes
  2069 ;; Hardware stack levels used:    1
  2070 ;; Hardware stack levels required when called:   13
  2071 ;; This function calls:
  2072 ;;		_EUSART1_Read
  2073 ;;		_GroupAdc
  2074 ;;		_GroupControlMcu
  2075 ;;		_GroupDAC
  2076 ;;		_GroupFlashMemory
  2077 ;;		_GroupStatusAndVersion
  2078 ;;		_GroupSynthesizers
  2079 ;;		_InitRxMessageParams
  2080 ;;		_ZeroArray
  2081 ;;		_crc8
  2082 ;; This function is called by:
  2083 ;;		_main
  2084 ;; This function uses a non-reentrant model
  2085 ;;
  2086                           
  2087                           	psect	text1
  2088  00151E                     __ptext1:
  2089                           	opt stack 0
  2090  00151E                     _readUartMessage:
  2091                           	opt stack 17
  2092                           
  2093                           ;EusartApp.c: 31: uint8_t chRec = (0);
  2094                           
  2095                           ; BSR set to: 0
  2096                           ;incstack = 0
  2097  00151E  0E00               	movlw	0
  2098  001520  0100               	movlb	0	; () banked
  2099  001522  6FE3               	movwf	readUartMessage@chRec& (0+255),b
  2100                           
  2101                           ;EusartApp.c: 32: switch(cState)
  2102  001524  D0D2               	goto	l202
  2103  001526                     
  2104                           ; BSR set to: 0
  2105                           ;EusartApp.c: 37: if(eusart1RxCount > (4))
  2106                           
  2107                           ; BSR set to: 0
  2108  001526  0E04               	movlw	4
  2109  001528  65EE               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2110  00152A  0012               	return	
  2111                           
  2112                           ; BSR set to: 0
  2113                           ;EusartApp.c: 38: {
  2114                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  2115  00152C  0E01               	movlw	1
  2116  00152E  6FED               	movwf	_cState& (0+255),b
  2117                           
  2118                           ; BSR set to: 0
  2119                           ;EusartApp.c: 40: }
  2120                           ;EusartApp.c: 41: return;
  2121                           
  2122                           ; BSR set to: 0
  2123  001530  0012               	return	
  2124  001532                     
  2125                           ; BSR set to: 0
  2126                           ;EusartApp.c: 45: InitRxMessageParams();
  2127                           
  2128                           ; BSR set to: 0
  2129  001532  EC9A  F020         	call	_InitRxMessageParams	;wreg free
  2130                           
  2131                           ;EusartApp.c: 46: msgCount = 0;
  2132  001536  0E00               	movlw	0
  2133  001538  0100               	movlb	0	; () banked
  2134  00153A  6FE7               	movwf	_msgCount& (0+255),b
  2135                           
  2136                           ; BSR set to: 0
  2137                           ;EusartApp.c: 47: if(eusart1RxCount > 1)
  2138  00153C  0E01               	movlw	1
  2139  00153E  65EE               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2140  001540  D00D               	goto	l207
  2141                           
  2142                           ; BSR set to: 0
  2143                           ;EusartApp.c: 48: {
  2144                           ;EusartApp.c: 49: chRec = EUSART1_Read();
  2145  001542  EC35  F01E         	call	_EUSART1_Read	;wreg free
  2146  001546  0100               	movlb	0	; () banked
  2147  001548  6FE3               	movwf	readUartMessage@chRec& (0+255),b
  2148                           
  2149                           ; BSR set to: 0
  2150                           ;EusartApp.c: 50: rxMsgQueue[(0)] = chRec;
  2151  00154A  C0E3  F188         	movff	readUartMessage@chRec,_rxMsgQueue
  2152                           
  2153                           ; BSR set to: 0
  2154                           ;EusartApp.c: 51: if(chRec == (0x24))
  2155  00154E  0E24               	movlw	36
  2156  001550  19E3               	xorwf	readUartMessage@chRec& (0+255),w,b
  2157  001552  A4D8               	btfss	status,2,c
  2158  001554  0012               	return	
  2159                           
  2160                           ; BSR set to: 0
  2161                           ;EusartApp.c: 52: {
  2162                           ;EusartApp.c: 53: cState = READ_GROUP;
  2163  001556  0E02               	movlw	2
  2164  001558  6FED               	movwf	_cState& (0+255),b
  2165                           
  2166                           ; BSR set to: 0
  2167                           ;EusartApp.c: 54: }
  2168                           ;EusartApp.c: 55: }
  2169  00155A  0012               	return	
  2170  00155C                     l207:
  2171                           
  2172                           ; BSR set to: 0
  2173                           ;EusartApp.c: 56: else
  2174                           ;EusartApp.c: 57: {
  2175                           ;EusartApp.c: 58: cState = START_RX_MESSAGE_READ;
  2176                           
  2177                           ; BSR set to: 0
  2178  00155C  0E00               	movlw	0
  2179  00155E  6FED               	movwf	_cState& (0+255),b
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;EusartApp.c: 59: }
  2183                           ;EusartApp.c: 61: break;
  2184  001560  0012               	return	
  2185  001562                     
  2186                           ; BSR set to: 0
  2187                           ;EusartApp.c: 65: if(eusart1RxCount > 1)
  2188                           
  2189                           ; BSR set to: 0
  2190  001562  0E01               	movlw	1
  2191  001564  65EE               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2192  001566  0012               	return	
  2193                           
  2194                           ; BSR set to: 0
  2195                           ;EusartApp.c: 66: {
  2196                           ;EusartApp.c: 67: group = EUSART1_Read();
  2197  001568  EC35  F01E         	call	_EUSART1_Read	;wreg free
  2198  00156C  0100               	movlb	0	; () banked
  2199  00156E  6FEC               	movwf	_group& (0+255),b
  2200                           
  2201                           ; BSR set to: 0
  2202                           ;EusartApp.c: 68: rxMsgQueue[(1)] = group;
  2203  001570  C0EC  F189         	movff	_group,_rxMsgQueue+1
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;EusartApp.c: 69: cState = READ_REQUEST;
  2207  001574  0E03               	movlw	3
  2208  001576  6FED               	movwf	_cState& (0+255),b
  2209                           
  2210                           ; BSR set to: 0
  2211                           ;EusartApp.c: 70: }
  2212                           ;EusartApp.c: 71: break;
  2213  001578  0012               	return	
  2214  00157A                     
  2215                           ; BSR set to: 0
  2216                           ;EusartApp.c: 75: if(eusart1RxCount > 1)
  2217                           
  2218                           ; BSR set to: 0
  2219  00157A  0E01               	movlw	1
  2220  00157C  65EE               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2221  00157E  0012               	return	
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;EusartApp.c: 76: {
  2225                           ;EusartApp.c: 77: request = EUSART1_Read();
  2226  001580  EC35  F01E         	call	_EUSART1_Read	;wreg free
  2227  001584  0100               	movlb	0	; () banked
  2228  001586  6FEB               	movwf	_request& (0+255),b
  2229                           
  2230                           ; BSR set to: 0
  2231                           ;EusartApp.c: 78: rxMsgQueue[(2)] = request;
  2232  001588  C0EB  F18A         	movff	_request,_rxMsgQueue+2
  2233                           
  2234                           ; BSR set to: 0
  2235                           ;EusartApp.c: 79: cState = READ_DATA_SIZE;
  2236  00158C  0E04               	movlw	4
  2237  00158E  6FED               	movwf	_cState& (0+255),b
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;EusartApp.c: 80: }
  2241                           ;EusartApp.c: 81: break;
  2242  001590  0012               	return	
  2243  001592                     
  2244                           ; BSR set to: 0
  2245                           ;EusartApp.c: 84: if(eusart1RxCount > 1)
  2246                           
  2247                           ; BSR set to: 0
  2248  001592  0E01               	movlw	1
  2249  001594  65EE               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2250  001596  0012               	return	
  2251                           
  2252                           ; BSR set to: 0
  2253                           ;EusartApp.c: 85: {
  2254                           ;EusartApp.c: 86: dataSize = EUSART1_Read();
  2255  001598  EC35  F01E         	call	_EUSART1_Read	;wreg free
  2256  00159C  0100               	movlb	0	; () banked
  2257  00159E  6FEA               	movwf	_dataSize& (0+255),b
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;EusartApp.c: 87: rxMsgQueue[(3)] = dataSize;
  2261  0015A0  C0EA  F18B         	movff	_dataSize,_rxMsgQueue+3
  2262                           
  2263                           ; BSR set to: 0
  2264                           ;EusartApp.c: 88: if(dataSize == 0)
  2265  0015A4  51EA               	movf	_dataSize& (0+255),w,b
  2266  0015A6  A4D8               	btfss	status,2,c
  2267  0015A8  D003               	goto	l217
  2268                           
  2269                           ; BSR set to: 0
  2270                           ;EusartApp.c: 89: {
  2271                           ;EusartApp.c: 90: cState = CHECK_CRC;
  2272  0015AA  0E06               	movlw	6
  2273  0015AC  6FED               	movwf	_cState& (0+255),b
  2274                           
  2275                           ;EusartApp.c: 91: }
  2276  0015AE  0012               	return	
  2277  0015B0                     l217:
  2278                           
  2279                           ; BSR set to: 0
  2280                           ;EusartApp.c: 92: else
  2281                           ;EusartApp.c: 93: {
  2282                           ;EusartApp.c: 94: cState = READ_DATA;
  2283                           
  2284                           ; BSR set to: 0
  2285  0015B0  0E05               	movlw	5
  2286  0015B2  6FED               	movwf	_cState& (0+255),b
  2287                           
  2288                           ; BSR set to: 0
  2289                           ;EusartApp.c: 95: }
  2290                           ;EusartApp.c: 97: }
  2291                           ;EusartApp.c: 99: break;
  2292                           
  2293                           ; BSR set to: 0
  2294  0015B4  0012               	return	
  2295  0015B6                     
  2296                           ; BSR set to: 0
  2297                           ;EusartApp.c: 103: if(eusart1RxCount >= dataSize)
  2298                           
  2299                           ; BSR set to: 0
  2300  0015B6  51EA               	movf	_dataSize& (0+255),w,b
  2301  0015B8  5DEE               	subwf	_eusart1RxCount& (0+255),w,b	;volatile
  2302  0015BA  A0D8               	btfss	status,0,c
  2303  0015BC  0012               	return	
  2304                           
  2305                           ; BSR set to: 0
  2306                           ;EusartApp.c: 104: {
  2307                           ;EusartApp.c: 105: ZeroArray(rxMsgData, (0x14));
  2308  0015BE  0E74               	movlw	low _rxMsgData
  2309  0015C0  6E20               	movwf	ZeroArray@array,c
  2310  0015C2  0E01               	movlw	high _rxMsgData
  2311  0015C4  6E21               	movwf	ZeroArray@array+1,c
  2312  0015C6  0E00               	movlw	0
  2313  0015C8  6E23               	movwf	ZeroArray@size+1,c
  2314  0015CA  0E14               	movlw	20
  2315  0015CC  6E22               	movwf	ZeroArray@size,c
  2316  0015CE  EC95  F021         	call	_ZeroArray	;wreg free
  2317                           
  2318                           ;EusartApp.c: 107: for(int idx = 0; idx < dataSize; idx++)
  2319  0015D2  0E00               	movlw	0
  2320  0015D4  0100               	movlb	0	; () banked
  2321  0015D6  6FE2               	movwf	(readUartMessage@idx+1)& (0+255),b
  2322  0015D8  0E00               	movlw	0
  2323  0015DA  6FE1               	movwf	readUartMessage@idx& (0+255),b
  2324  0015DC  D01E               	goto	l221
  2325  0015DE                     
  2326                           ; BSR set to: 0
  2327                           ;EusartApp.c: 108: {
  2328                           ;EusartApp.c: 109: chRec = EUSART1_Read();
  2329                           
  2330                           ; BSR set to: 0
  2331  0015DE  EC35  F01E         	call	_EUSART1_Read	;wreg free
  2332  0015E2  0100               	movlb	0	; () banked
  2333  0015E4  6FE3               	movwf	readUartMessage@chRec& (0+255),b
  2334                           
  2335                           ; BSR set to: 0
  2336                           ;EusartApp.c: 110: rxMsgQueue[(0x4) + msgCount++] = chRec;
  2337  0015E6  51E7               	movf	_msgCount& (0+255),w,b
  2338  0015E8  6FDD               	movwf	??_readUartMessage& (0+255),b
  2339  0015EA  6BDE               	clrf	(??_readUartMessage+1)& (0+255),b
  2340  0015EC  0E04               	movlw	4
  2341  0015EE  27DD               	addwf	??_readUartMessage& (0+255),f,b
  2342  0015F0  0E00               	movlw	0
  2343  0015F2  23DE               	addwfc	(??_readUartMessage+1)& (0+255),f,b
  2344  0015F4  0E88               	movlw	low _rxMsgQueue
  2345  0015F6  25DD               	addwf	??_readUartMessage& (0+255),w,b
  2346  0015F8  6ED9               	movwf	fsr2l,c
  2347  0015FA  0E01               	movlw	high _rxMsgQueue
  2348  0015FC  21DE               	addwfc	(??_readUartMessage+1)& (0+255),w,b
  2349  0015FE  6EDA               	movwf	fsr2h,c
  2350  001600  C0E3  FFDF         	movff	readUartMessage@chRec,indf2
  2351                           
  2352                           ; BSR set to: 0
  2353  001604  2BE7               	incf	_msgCount& (0+255),f,b
  2354                           
  2355                           ; BSR set to: 0
  2356                           ;EusartApp.c: 111: rxMsgData[idx] = chRec;
  2357  001606  0E74               	movlw	low _rxMsgData
  2358  001608  25E1               	addwf	readUartMessage@idx& (0+255),w,b
  2359  00160A  6ED9               	movwf	fsr2l,c
  2360  00160C  0E01               	movlw	high _rxMsgData
  2361  00160E  21E2               	addwfc	(readUartMessage@idx+1)& (0+255),w,b
  2362  001610  6EDA               	movwf	fsr2h,c
  2363  001612  C0E3  FFDF         	movff	readUartMessage@chRec,indf2
  2364                           
  2365                           ; BSR set to: 0
  2366  001616  4BE1               	infsnz	readUartMessage@idx& (0+255),f,b
  2367  001618  2BE2               	incf	(readUartMessage@idx+1)& (0+255),f,b
  2368  00161A                     l221:
  2369                           
  2370                           ; BSR set to: 0
  2371                           
  2372                           ; BSR set to: 0
  2373  00161A  51EA               	movf	_dataSize& (0+255),w,b
  2374  00161C  6FDD               	movwf	??_readUartMessage& (0+255),b
  2375  00161E  6BDE               	clrf	(??_readUartMessage+1)& (0+255),b
  2376  001620  51DD               	movf	??_readUartMessage& (0+255),w,b
  2377  001622  5DE1               	subwf	readUartMessage@idx& (0+255),w,b
  2378  001624  51E2               	movf	(readUartMessage@idx+1)& (0+255),w,b
  2379  001626  0A80               	xorlw	128
  2380  001628  6FDF               	movwf	(??_readUartMessage+2)& (0+255),b
  2381  00162A  51DE               	movf	(??_readUartMessage+1)& (0+255),w,b
  2382  00162C  0A80               	xorlw	128
  2383  00162E  59DF               	subwfb	(??_readUartMessage+2)& (0+255),w,b
  2384  001630  A0D8               	btfss	status,0,c
  2385  001632  D7D5               	goto	l222
  2386                           
  2387                           ; BSR set to: 0
  2388                           ;EusartApp.c: 112: }
  2389                           ;EusartApp.c: 114: cState = CHECK_CRC;
  2390                           
  2391                           ; BSR set to: 0
  2392  001634  0E06               	movlw	6
  2393  001636  6FED               	movwf	_cState& (0+255),b
  2394                           
  2395                           ; BSR set to: 0
  2396                           ;EusartApp.c: 115: }
  2397                           ;EusartApp.c: 116: break;
  2398  001638  0012               	return	
  2399  00163A                     
  2400                           ; BSR set to: 0
  2401                           ;EusartApp.c: 119: if(eusart1RxCount >= 1)
  2402                           
  2403                           ; BSR set to: 0
  2404  00163A  51EE               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  2405  00163C  B4D8               	btfsc	status,2,c
  2406  00163E  0012               	return	
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;EusartApp.c: 120: {
  2410                           ;EusartApp.c: 121: crcGiven = EUSART1_Read();
  2411  001640  EC35  F01E         	call	_EUSART1_Read	;wreg free
  2412  001644  0100               	movlb	0	; () banked
  2413  001646  6FE8               	movwf	_crcGiven& (0+255),b
  2414                           
  2415                           ; BSR set to: 0
  2416                           ;EusartApp.c: 122: crcCalc = crc8(rxMsgQueue, (0x4) + msgCount);
  2417  001648  0E88               	movlw	low _rxMsgQueue
  2418  00164A  6E18               	movwf	crc8@dataArray,c
  2419  00164C  0E01               	movlw	high _rxMsgQueue
  2420  00164E  6E19               	movwf	crc8@dataArray+1,c
  2421  001650  0E04               	movlw	4
  2422  001652  25E7               	addwf	_msgCount& (0+255),w,b
  2423  001654  6E1A               	movwf	crc8@dataSize,c
  2424  001656  6A1B               	clrf	crc8@dataSize+1,c
  2425  001658  0E00               	movlw	0
  2426  00165A  221B               	addwfc	crc8@dataSize+1,f,c
  2427  00165C  EC0E  F01E         	call	_crc8	;wreg free
  2428  001660  0100               	movlb	0	; () banked
  2429  001662  6FE9               	movwf	_crcCalc& (0+255),b
  2430                           
  2431                           ; BSR set to: 0
  2432                           ;EusartApp.c: 124: if(crcGiven == crcCalc)
  2433  001664  51E9               	movf	_crcCalc& (0+255),w,b
  2434  001666  19E8               	xorwf	_crcGiven& (0+255),w,b
  2435  001668  A4D8               	btfss	status,2,c
  2436  00166A  D003               	goto	l226
  2437                           
  2438                           ; BSR set to: 0
  2439                           ;EusartApp.c: 125: {
  2440                           ;EusartApp.c: 126: cState = JUMP_FUNCTION;
  2441  00166C  0E07               	movlw	7
  2442  00166E  6FED               	movwf	_cState& (0+255),b
  2443                           
  2444                           ;EusartApp.c: 127: }
  2445  001670  0012               	return	
  2446  001672                     l226:
  2447                           
  2448                           ; BSR set to: 0
  2449                           ;EusartApp.c: 128: else
  2450                           ;EusartApp.c: 129: {
  2451                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  2452                           
  2453                           ; BSR set to: 0
  2454  001672  0E00               	movlw	0
  2455  001674  6FED               	movwf	_cState& (0+255),b
  2456                           
  2457                           ; BSR set to: 0
  2458                           ;EusartApp.c: 131: }
  2459                           ;EusartApp.c: 132: }
  2460                           ;EusartApp.c: 133: break;
  2461                           
  2462                           ; BSR set to: 0
  2463  001676  0012               	return	
  2464  001678                     
  2465                           ; BSR set to: 0
  2466                           ;EusartApp.c: 136: groupsArray[group - 1](request, rxMsgData);
  2467                           
  2468                           ; BSR set to: 0
  2469  001678  0EFE               	movlw	254
  2470  00167A  6FDD               	movwf	??_readUartMessage& (0+255),b
  2471  00167C  0EFF               	movlw	255
  2472  00167E  6FDE               	movwf	(??_readUartMessage+1)& (0+255),b
  2473  001680  51EC               	movf	_group& (0+255),w,b
  2474  001682  6FDF               	movwf	(??_readUartMessage+2)& (0+255),b
  2475  001684  6BE0               	clrf	(??_readUartMessage+3)& (0+255),b
  2476  001686  90D8               	bcf	status,0,c
  2477  001688  37DF               	rlcf	(??_readUartMessage+2)& (0+255),f,b
  2478  00168A  37E0               	rlcf	(??_readUartMessage+3)& (0+255),f,b
  2479  00168C  51DD               	movf	??_readUartMessage& (0+255),w,b
  2480  00168E  27DF               	addwf	(??_readUartMessage+2)& (0+255),f,b
  2481  001690  51DE               	movf	(??_readUartMessage+1)& (0+255),w,b
  2482  001692  23E0               	addwfc	(??_readUartMessage+3)& (0+255),f,b
  2483  001694  0EDA               	movlw	low _groupsArray
  2484  001696  25DF               	addwf	(??_readUartMessage+2)& (0+255),w,b
  2485  001698  6ED9               	movwf	fsr2l,c
  2486  00169A  0E01               	movlw	high _groupsArray
  2487  00169C  21E0               	addwfc	(??_readUartMessage+3)& (0+255),w,b
  2488  00169E  6EDA               	movwf	fsr2h,c
  2489  0016A0  D801               	call	u9438
  2490  0016A2  D00F               	goto	u9439
  2491  0016A4                     u9438:
  2492  0016A4  0005               	push	
  2493  0016A6  6EFA               	movwf	pclath,c
  2494  0016A8  50DE               	movf	postinc2,w,c
  2495  0016AA  6EFD               	movwf	tosl,c
  2496  0016AC  50DE               	movf	postinc2,w,c
  2497  0016AE  6EFE               	movwf	tosh,c
  2498  0016B0  50F8               	movf	tblptru,w,c
  2499  0016B2  6EFF               	movwf	tosu,c
  2500  0016B4  50FA               	movf	pclath,w,c
  2501  0016B6  0E74               	movlw	low _rxMsgData
  2502  0016B8  6FDA               	movwf	GroupDAC@data& (0+255),b
  2503  0016BA  0E01               	movlw	high _rxMsgData
  2504  0016BC  6FDB               	movwf	(GroupDAC@data+1)& (0+255),b
  2505  0016BE  51EB               	movf	_request& (0+255),w,b
  2506  0016C0  0012               	return		;indir
  2507  0016C2                     u9439:
  2508                           
  2509                           ;EusartApp.c: 137: cState = START_RX_MESSAGE_READ;
  2510  0016C2  0E00               	movlw	0
  2511  0016C4  0100               	movlb	0	; () banked
  2512  0016C6  6FED               	movwf	_cState& (0+255),b
  2513                           
  2514                           ; BSR set to: 0
  2515                           ;EusartApp.c: 139: }
  2516                           
  2517                           ;EusartApp.c: 138: break;
  2518  0016C8  0012               	return	
  2519  0016CA                     l202:
  2520                           
  2521                           ; BSR set to: 0
  2522                           
  2523                           ; BSR set to: 0
  2524  0016CA  51ED               	movf	_cState& (0+255),w,b
  2525                           
  2526                           ; Switch size 1, requested type "space"
  2527                           ; Number of cases is 8, Range of values is 0 to 7
  2528                           ; switch strategies available:
  2529                           ; Name         Instructions Cycles
  2530                           ; simple_byte           25    13 (average)
  2531                           ;	Chosen strategy is simple_byte
  2532  0016CC  0A00               	xorlw	0	; case 0
  2533  0016CE  B4D8               	btfsc	status,2,c
  2534  0016D0  D72A               	goto	l203
  2535  0016D2  0A01               	xorlw	1	; case 1
  2536  0016D4  B4D8               	btfsc	status,2,c
  2537  0016D6  D72D               	goto	l206
  2538  0016D8  0A03               	xorlw	3	; case 2
  2539  0016DA  B4D8               	btfsc	status,2,c
  2540  0016DC  D742               	goto	l211
  2541  0016DE  0A01               	xorlw	1	; case 3
  2542  0016E0  B4D8               	btfsc	status,2,c
  2543  0016E2  D74B               	goto	l213
  2544  0016E4  0A07               	xorlw	7	; case 4
  2545  0016E6  B4D8               	btfsc	status,2,c
  2546  0016E8  D754               	goto	l215
  2547  0016EA  0A01               	xorlw	1	; case 5
  2548  0016EC  B4D8               	btfsc	status,2,c
  2549  0016EE  D763               	goto	l219
  2550  0016F0  0A03               	xorlw	3	; case 6
  2551  0016F2  B4D8               	btfsc	status,2,c
  2552  0016F4  D7A2               	goto	l224
  2553  0016F6  0A01               	xorlw	1	; case 7
  2554  0016F8  A4D8               	btfss	status,2,c
  2555  0016FA  0012               	return	
  2556  0016FC  D7BD               	goto	l228
  2557  0016FE                     __end_of_readUartMessage:
  2558                           	opt stack 0
  2559                           tosu	equ	0xFFF
  2560                           tosh	equ	0xFFE
  2561                           tosl	equ	0xFFD
  2562                           pclath	equ	0xFFA
  2563                           tblptru	equ	0xFF8
  2564                           tblptrh	equ	0xFF7
  2565                           tblptrl	equ	0xFF6
  2566                           tablat	equ	0xFF5
  2567                           postinc0	equ	0xFEE
  2568                           wreg	equ	0xFE8
  2569                           postdec1	equ	0xFE5
  2570                           fsr1l	equ	0xFE1
  2571                           indf2	equ	0xFDF
  2572                           postinc2	equ	0xFDE
  2573                           fsr2h	equ	0xFDA
  2574                           fsr2l	equ	0xFD9
  2575                           status	equ	0xFD8
  2576                           
  2577 ;; *************** function _InitRxMessageParams *****************
  2578 ;; Defined at:
  2579 ;;		line 142 in file "EusartApp.c"
  2580 ;; Parameters:    Size  Location     Type
  2581 ;;		None
  2582 ;; Auto vars:     Size  Location     Type
  2583 ;;		None
  2584 ;; Return value:  Size  Location     Type
  2585 ;;                  1    wreg      void 
  2586 ;; Registers used:
  2587 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2588 ;; Tracked objects:
  2589 ;;		On entry : 0/0
  2590 ;;		On exit  : 0/0
  2591 ;;		Unchanged: 0/0
  2592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2593 ;;      Params:         0       0       0       0       0       0       0
  2594 ;;      Locals:         0       0       0       0       0       0       0
  2595 ;;      Temps:          0       0       0       0       0       0       0
  2596 ;;      Totals:         0       0       0       0       0       0       0
  2597 ;;Total ram usage:        0 bytes
  2598 ;; Hardware stack levels used:    1
  2599 ;; Hardware stack levels required when called:    6
  2600 ;; This function calls:
  2601 ;;		_ZeroArray
  2602 ;; This function is called by:
  2603 ;;		_readUartMessage
  2604 ;; This function uses a non-reentrant model
  2605 ;;
  2606                           
  2607                           	psect	text2
  2608  004134                     __ptext2:
  2609                           	opt stack 0
  2610  004134                     _InitRxMessageParams:
  2611                           	opt stack 23
  2612                           
  2613                           ;EusartApp.c: 146: dataSize = 0;
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;incstack = 0
  2617  004134  0E00               	movlw	0
  2618  004136  0100               	movlb	0	; () banked
  2619  004138  6FEA               	movwf	_dataSize& (0+255),b
  2620                           
  2621                           ;EusartApp.c: 147: crcCalc = 0;
  2622  00413A  0E00               	movlw	0
  2623  00413C  6FE9               	movwf	_crcCalc& (0+255),b
  2624                           
  2625                           ;EusartApp.c: 148: crcGiven = 0;
  2626  00413E  0E00               	movlw	0
  2627  004140  6FE8               	movwf	_crcGiven& (0+255),b
  2628                           
  2629                           ;EusartApp.c: 149: msgCount = 0;
  2630  004142  0E00               	movlw	0
  2631  004144  6FE7               	movwf	_msgCount& (0+255),b
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;EusartApp.c: 150: ZeroArray(rxMsgQueue, (0x14));
  2635  004146  0E88               	movlw	low _rxMsgQueue
  2636  004148  6E20               	movwf	ZeroArray@array,c
  2637  00414A  0E01               	movlw	high _rxMsgQueue
  2638  00414C  6E21               	movwf	ZeroArray@array+1,c
  2639  00414E  0E00               	movlw	0
  2640  004150  6E23               	movwf	ZeroArray@size+1,c
  2641  004152  0E14               	movlw	20
  2642  004154  6E22               	movwf	ZeroArray@size,c
  2643  004156  EC95  F021         	call	_ZeroArray
  2644  00415A  0012               	return		;funcret
  2645  00415C                     __end_of_InitRxMessageParams:
  2646                           	opt stack 0
  2647                           tosu	equ	0xFFF
  2648                           tosh	equ	0xFFE
  2649                           tosl	equ	0xFFD
  2650                           pclath	equ	0xFFA
  2651                           tblptru	equ	0xFF8
  2652                           tblptrh	equ	0xFF7
  2653                           tblptrl	equ	0xFF6
  2654                           tablat	equ	0xFF5
  2655                           postinc0	equ	0xFEE
  2656                           wreg	equ	0xFE8
  2657                           postdec1	equ	0xFE5
  2658                           fsr1l	equ	0xFE1
  2659                           indf2	equ	0xFDF
  2660                           postinc2	equ	0xFDE
  2661                           fsr2h	equ	0xFDA
  2662                           fsr2l	equ	0xFD9
  2663                           status	equ	0xFD8
  2664                           
  2665 ;; *************** function _GroupDAC *****************
  2666 ;; Defined at:
  2667 ;;		line 125 in file "MessageFunctions.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;  request         1    wreg     enum E12
  2670 ;;  data            2  122[BANK0 ] PTR unsigned char 
  2671 ;;		 -> rxMsgData(20), 
  2672 ;; Auto vars:     Size  Location     Type
  2673 ;;  request         1  124[BANK0 ] enum E12
  2674 ;; Return value:  Size  Location     Type
  2675 ;;                  1    wreg      void 
  2676 ;; Registers used:
  2677 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2678 ;; Tracked objects:
  2679 ;;		On entry : 0/0
  2680 ;;		On exit  : 0/0
  2681 ;;		Unchanged: 0/0
  2682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2683 ;;      Params:         0       2       0       0       0       0       0
  2684 ;;      Locals:         0       1       0       0       0       0       0
  2685 ;;      Temps:          0       0       0       0       0       0       0
  2686 ;;      Totals:         0       3       0       0       0       0       0
  2687 ;;Total ram usage:        3 bytes
  2688 ;; Hardware stack levels used:    1
  2689 ;; Hardware stack levels required when called:   11
  2690 ;; This function calls:
  2691 ;;		_DacReadValue
  2692 ;;		_DacSetValue
  2693 ;; This function is called by:
  2694 ;;		_readUartMessage
  2695 ;; This function uses a non-reentrant model
  2696 ;;
  2697                           
  2698                           	psect	text3
  2699  003FAE                     __ptext3:
  2700                           	opt stack 0
  2701  003FAE                     _GroupDAC:
  2702                           	opt stack 18
  2703                           
  2704                           ;incstack = 0
  2705                           ;GroupDAC@request stored from wreg
  2706  003FAE  0100               	movlb	0	; () banked
  2707  003FB0  6FDC               	movwf	GroupDAC@request& (0+255),b
  2708                           
  2709                           ;MessageFunctions.c: 127: switch (request)
  2710  003FB2  D00E               	goto	l1344
  2711  003FB4                     
  2712                           ;MessageFunctions.c: 130: DacSetValue(data);
  2713  003FB4  C0DA  F08A         	movff	GroupDAC@data,DacSetValue@data
  2714  003FB8  C0DB  F08B         	movff	GroupDAC@data+1,DacSetValue@data+1
  2715  003FBC  ECC5  F018         	call	_DacSetValue	;wreg free
  2716                           
  2717                           ;MessageFunctions.c: 131: break;
  2718  003FC0  0012               	return	
  2719  003FC2                     
  2720                           ;MessageFunctions.c: 134: DacReadValue(data);
  2721  003FC2  C0DA  F0C8         	movff	GroupDAC@data,DacReadValue@data
  2722  003FC6  C0DB  F0C9         	movff	GroupDAC@data+1,DacReadValue@data+1
  2723  003FCA  EC35  F014         	call	_DacReadValue	;wreg free
  2724                           
  2725                           ;MessageFunctions.c: 139: }
  2726                           
  2727                           ;MessageFunctions.c: 138: break;
  2728                           
  2729                           ;MessageFunctions.c: 137: default:
  2730                           
  2731                           ;MessageFunctions.c: 135: break;
  2732  003FCE  0012               	return	
  2733  003FD0                     l1344:
  2734  003FD0  0100               	movlb	0	; () banked
  2735  003FD2  51DC               	movf	GroupDAC@request& (0+255),w,b
  2736                           
  2737                           ; Switch size 1, requested type "space"
  2738                           ; Number of cases is 2, Range of values is 97 to 98
  2739                           ; switch strategies available:
  2740                           ; Name         Instructions Cycles
  2741                           ; simple_byte            7     4 (average)
  2742                           ;	Chosen strategy is simple_byte
  2743  003FD4  0A61               	xorlw	97	; case 97
  2744  003FD6  B4D8               	btfsc	status,2,c
  2745  003FD8  D7ED               	goto	l1345
  2746  003FDA  0A03               	xorlw	3	; case 98
  2747  003FDC  A4D8               	btfss	status,2,c
  2748  003FDE  0012               	return	
  2749  003FE0  D7F0               	goto	l1347
  2750  003FE2                     __end_of_GroupDAC:
  2751                           	opt stack 0
  2752                           tosu	equ	0xFFF
  2753                           tosh	equ	0xFFE
  2754                           tosl	equ	0xFFD
  2755                           pclath	equ	0xFFA
  2756                           tblptru	equ	0xFF8
  2757                           tblptrh	equ	0xFF7
  2758                           tblptrl	equ	0xFF6
  2759                           tablat	equ	0xFF5
  2760                           postinc0	equ	0xFEE
  2761                           wreg	equ	0xFE8
  2762                           postdec1	equ	0xFE5
  2763                           fsr1l	equ	0xFE1
  2764                           indf2	equ	0xFDF
  2765                           postinc2	equ	0xFDE
  2766                           fsr2h	equ	0xFDA
  2767                           fsr2l	equ	0xFD9
  2768                           status	equ	0xFD8
  2769                           
  2770 ;; *************** function _GroupFlashMemory *****************
  2771 ;; Defined at:
  2772 ;;		line 104 in file "MessageFunctions.c"
  2773 ;; Parameters:    Size  Location     Type
  2774 ;;  request         1    wreg     enum E12
  2775 ;;  data            2  122[BANK0 ] PTR unsigned char 
  2776 ;; Auto vars:     Size  Location     Type
  2777 ;;  request         1  124[BANK0 ] enum E12
  2778 ;; Return value:  Size  Location     Type
  2779 ;;                  1    wreg      void 
  2780 ;; Registers used:
  2781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2782 ;; Tracked objects:
  2783 ;;		On entry : 0/0
  2784 ;;		On exit  : 0/0
  2785 ;;		Unchanged: 0/0
  2786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2787 ;;      Params:         0       2       0       0       0       0       0
  2788 ;;      Locals:         0       1       0       0       0       0       0
  2789 ;;      Temps:          0       0       0       0       0       0       0
  2790 ;;      Totals:         0       3       0       0       0       0       0
  2791 ;;Total ram usage:        3 bytes
  2792 ;; Hardware stack levels used:    1
  2793 ;; Hardware stack levels required when called:    9
  2794 ;; This function calls:
  2795 ;;		_FlashEreaseMem
  2796 ;;		_FlashReadCondition
  2797 ;;		_FlashReadUart
  2798 ;; This function is called by:
  2799 ;;		_readUartMessage
  2800 ;; This function uses a non-reentrant model
  2801 ;;
  2802                           
  2803                           	psect	text4
  2804  003E2A                     __ptext4:
  2805                           	opt stack 0
  2806  003E2A                     _GroupFlashMemory:
  2807                           	opt stack 20
  2808                           
  2809                           ;incstack = 0
  2810                           ;GroupFlashMemory@request stored from wreg
  2811  003E2A  0100               	movlb	0	; () banked
  2812  003E2C  6FDC               	movwf	GroupFlashMemory@request& (0+255),b
  2813                           
  2814                           ;MessageFunctions.c: 106: switch (request)
  2815  003E2E  D00D               	goto	l1335
  2816  003E30                     
  2817                           ;MessageFunctions.c: 109: FlashEreaseMem();
  2818  003E30  ECBC  F01D         	call	_FlashEreaseMem	;wreg free
  2819                           
  2820                           ;MessageFunctions.c: 110: break;
  2821  003E34  0012               	return	
  2822  003E36                     
  2823                           ;MessageFunctions.c: 113: FlashReadCondition();
  2824  003E36  ECD6  F010         	call	_FlashReadCondition	;wreg free
  2825                           
  2826                           ;MessageFunctions.c: 114: break;
  2827  003E3A  0012               	return	
  2828  003E3C                     
  2829                           ;MessageFunctions.c: 117: FlashReadUart(data);
  2830  003E3C  C0DA  F087         	movff	GroupFlashMemory@data,FlashReadUart@data
  2831  003E40  C0DB  F088         	movff	GroupFlashMemory@data+1,FlashReadUart@data+1
  2832  003E44  EC53  F003         	call	_FlashReadUart	;wreg free
  2833                           
  2834                           ;MessageFunctions.c: 122: }
  2835                           
  2836                           ;MessageFunctions.c: 121: break;
  2837                           
  2838                           ;MessageFunctions.c: 120: default:
  2839                           
  2840                           ;MessageFunctions.c: 118: break;
  2841  003E48  0012               	return	
  2842  003E4A                     l1335:
  2843  003E4A  0100               	movlb	0	; () banked
  2844  003E4C  51DC               	movf	GroupFlashMemory@request& (0+255),w,b
  2845                           
  2846                           ; Switch size 1, requested type "space"
  2847                           ; Number of cases is 3, Range of values is 81 to 83
  2848                           ; switch strategies available:
  2849                           ; Name         Instructions Cycles
  2850                           ; simple_byte           10     6 (average)
  2851                           ;	Chosen strategy is simple_byte
  2852  003E4E  0A51               	xorlw	81	; case 81
  2853  003E50  B4D8               	btfsc	status,2,c
  2854  003E52  D7EE               	goto	l1336
  2855  003E54  0A03               	xorlw	3	; case 82
  2856  003E56  B4D8               	btfsc	status,2,c
  2857  003E58  D7EE               	goto	l1338
  2858  003E5A  0A01               	xorlw	1	; case 83
  2859  003E5C  A4D8               	btfss	status,2,c
  2860  003E5E  0012               	return	
  2861  003E60  D7ED               	goto	l1339
  2862  003E62                     __end_of_GroupFlashMemory:
  2863                           	opt stack 0
  2864                           tosu	equ	0xFFF
  2865                           tosh	equ	0xFFE
  2866                           tosl	equ	0xFFD
  2867                           pclath	equ	0xFFA
  2868                           tblptru	equ	0xFF8
  2869                           tblptrh	equ	0xFF7
  2870                           tblptrl	equ	0xFF6
  2871                           tablat	equ	0xFF5
  2872                           postinc0	equ	0xFEE
  2873                           wreg	equ	0xFE8
  2874                           postdec1	equ	0xFE5
  2875                           fsr1l	equ	0xFE1
  2876                           indf2	equ	0xFDF
  2877                           postinc2	equ	0xFDE
  2878                           fsr2h	equ	0xFDA
  2879                           fsr2l	equ	0xFD9
  2880                           status	equ	0xFD8
  2881                           
  2882 ;; *************** function _GroupAdc *****************
  2883 ;; Defined at:
  2884 ;;		line 51 in file "MessageFunctions.c"
  2885 ;; Parameters:    Size  Location     Type
  2886 ;;  request         1    wreg     enum E12
  2887 ;;  data            2  122[BANK0 ] PTR unsigned char 
  2888 ;; Auto vars:     Size  Location     Type
  2889 ;;  request         1  124[BANK0 ] enum E12
  2890 ;; Return value:  Size  Location     Type
  2891 ;;                  1    wreg      void 
  2892 ;; Registers used:
  2893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2894 ;; Tracked objects:
  2895 ;;		On entry : 0/0
  2896 ;;		On exit  : 0/0
  2897 ;;		Unchanged: 0/0
  2898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2899 ;;      Params:         0       2       0       0       0       0       0
  2900 ;;      Locals:         0       1       0       0       0       0       0
  2901 ;;      Temps:          0       0       0       0       0       0       0
  2902 ;;      Totals:         0       3       0       0       0       0       0
  2903 ;;Total ram usage:        3 bytes
  2904 ;; Hardware stack levels used:    1
  2905 ;; Hardware stack levels required when called:    8
  2906 ;; This function calls:
  2907 ;;		_SetChannelMode
  2908 ;; This function is called by:
  2909 ;;		_readUartMessage
  2910 ;; This function uses a non-reentrant model
  2911 ;;
  2912                           
  2913                           	psect	text5
  2914  0042CE                     __ptext5:
  2915                           	opt stack 0
  2916  0042CE                     _GroupAdc:
  2917                           	opt stack 21
  2918                           
  2919                           ;incstack = 0
  2920                           ;GroupAdc@request stored from wreg
  2921  0042CE  0100               	movlb	0	; () banked
  2922  0042D0  6FDC               	movwf	GroupAdc@request& (0+255),b
  2923                           
  2924                           ;MessageFunctions.c: 53: switch (request)
  2925  0042D2  D007               	goto	l1314
  2926  0042D4                     
  2927                           ;MessageFunctions.c: 56: SetChannelMode(data);
  2928  0042D4  C0DA  F02C         	movff	GroupAdc@data,SetChannelMode@data
  2929  0042D8  C0DB  F02D         	movff	GroupAdc@data+1,SetChannelMode@data+1
  2930  0042DC  EC3D  F020         	call	_SetChannelMode	;wreg free
  2931                           
  2932                           ;MessageFunctions.c: 61: }
  2933                           
  2934                           ;MessageFunctions.c: 60: break;
  2935                           
  2936                           ;MessageFunctions.c: 59: default:
  2937                           
  2938                           ;MessageFunctions.c: 57: break;
  2939  0042E0  0012               	return	
  2940  0042E2                     l1314:
  2941  0042E2  0100               	movlb	0	; () banked
  2942  0042E4  51DC               	movf	GroupAdc@request& (0+255),w,b
  2943                           
  2944                           ; Switch size 1, requested type "space"
  2945                           ; Number of cases is 1, Range of values is 50 to 50
  2946                           ; switch strategies available:
  2947                           ; Name         Instructions Cycles
  2948                           ; simple_byte            4     3 (average)
  2949                           ;	Chosen strategy is simple_byte
  2950  0042E6  0A32               	xorlw	50	; case 50
  2951  0042E8  A4D8               	btfss	status,2,c
  2952  0042EA  0012               	return	
  2953  0042EC  D7F3               	goto	l1315
  2954  0042EE                     __end_of_GroupAdc:
  2955                           	opt stack 0
  2956                           tosu	equ	0xFFF
  2957                           tosh	equ	0xFFE
  2958                           tosl	equ	0xFFD
  2959                           pclath	equ	0xFFA
  2960                           tblptru	equ	0xFF8
  2961                           tblptrh	equ	0xFF7
  2962                           tblptrl	equ	0xFF6
  2963                           tablat	equ	0xFF5
  2964                           postinc0	equ	0xFEE
  2965                           wreg	equ	0xFE8
  2966                           postdec1	equ	0xFE5
  2967                           fsr1l	equ	0xFE1
  2968                           indf2	equ	0xFDF
  2969                           postinc2	equ	0xFDE
  2970                           fsr2h	equ	0xFDA
  2971                           fsr2l	equ	0xFD9
  2972                           status	equ	0xFD8
  2973                           
  2974 ;; *************** function _GroupStatusAndVersion *****************
  2975 ;; Defined at:
  2976 ;;		line 34 in file "MessageFunctions.c"
  2977 ;; Parameters:    Size  Location     Type
  2978 ;;  request         1    wreg     enum E12
  2979 ;;  data            3  122[BANK0 ] PTR unsigned char 
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;  request         1  125[BANK0 ] enum E12
  2982 ;; Return value:  Size  Location     Type
  2983 ;;                  1    wreg      void 
  2984 ;; Registers used:
  2985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2986 ;; Tracked objects:
  2987 ;;		On entry : 0/0
  2988 ;;		On exit  : 0/0
  2989 ;;		Unchanged: 0/0
  2990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2991 ;;      Params:         0       2       0       0       0       0       0
  2992 ;;      Locals:         0       1       0       0       0       0       0
  2993 ;;      Temps:          0       0       0       0       0       0       0
  2994 ;;      Totals:         0       3       0       0       0       0       0
  2995 ;;Total ram usage:        3 bytes
  2996 ;; Hardware stack levels used:    1
  2997 ;; Hardware stack levels required when called:    7
  2998 ;; This function calls:
  2999 ;;		_GetMcuFwVersion
  3000 ;;		_GetMcuRunTime
  3001 ;; This function is called by:
  3002 ;;		_readUartMessage
  3003 ;; This function uses a non-reentrant model
  3004 ;;
  3005                           
  3006                           	psect	text6
  3007  00421E                     __ptext6:
  3008                           	opt stack 0
  3009  00421E                     _GroupStatusAndVersion:
  3010                           	opt stack 22
  3011                           
  3012                           ;incstack = 0
  3013                           ;GroupStatusAndVersion@request stored from wreg
  3014  00421E  0100               	movlb	0	; () banked
  3015  004220  6FDD               	movwf	GroupStatusAndVersion@request& (0+255),b
  3016                           
  3017                           ;MessageFunctions.c: 36: switch (request)
  3018  004222  D006               	goto	l1306
  3019  004224                     
  3020                           ;MessageFunctions.c: 39: GetMcuFwVersion();
  3021  004224  EC5C  F005         	call	_GetMcuFwVersion	;wreg free
  3022                           
  3023                           ;MessageFunctions.c: 40: break;
  3024  004228  0012               	return	
  3025  00422A                     
  3026                           ;MessageFunctions.c: 43: GetMcuRunTime();
  3027  00422A  ECC3  F013         	call	_GetMcuRunTime	;wreg free
  3028                           
  3029                           ;MessageFunctions.c: 48: }
  3030                           
  3031                           ;MessageFunctions.c: 47: break;
  3032                           
  3033                           ;MessageFunctions.c: 46: default:
  3034                           
  3035                           ;MessageFunctions.c: 44: break;
  3036  00422E  0012               	return	
  3037  004230                     l1306:
  3038  004230  0100               	movlb	0	; () banked
  3039  004232  51DD               	movf	GroupStatusAndVersion@request& (0+255),w,b
  3040                           
  3041                           ; Switch size 1, requested type "space"
  3042                           ; Number of cases is 2, Range of values is 33 to 34
  3043                           ; switch strategies available:
  3044                           ; Name         Instructions Cycles
  3045                           ; simple_byte            7     4 (average)
  3046                           ;	Chosen strategy is simple_byte
  3047  004234  0A21               	xorlw	33	; case 33
  3048  004236  B4D8               	btfsc	status,2,c
  3049  004238  D7F8               	goto	l1309
  3050  00423A  0A03               	xorlw	3	; case 34
  3051  00423C  A4D8               	btfss	status,2,c
  3052  00423E  0012               	return	
  3053  004240  D7F1               	goto	l1307
  3054  004242                     __end_of_GroupStatusAndVersion:
  3055                           	opt stack 0
  3056                           tosu	equ	0xFFF
  3057                           tosh	equ	0xFFE
  3058                           tosl	equ	0xFFD
  3059                           pclath	equ	0xFFA
  3060                           tblptru	equ	0xFF8
  3061                           tblptrh	equ	0xFF7
  3062                           tblptrl	equ	0xFF6
  3063                           tablat	equ	0xFF5
  3064                           postinc0	equ	0xFEE
  3065                           wreg	equ	0xFE8
  3066                           postdec1	equ	0xFE5
  3067                           fsr1l	equ	0xFE1
  3068                           indf2	equ	0xFDF
  3069                           postinc2	equ	0xFDE
  3070                           fsr2h	equ	0xFDA
  3071                           fsr2l	equ	0xFD9
  3072                           status	equ	0xFD8
  3073                           
  3074 ;; *************** function _GroupControlMcu *****************
  3075 ;; Defined at:
  3076 ;;		line 11 in file "MessageFunctions.c"
  3077 ;; Parameters:    Size  Location     Type
  3078 ;;  request         1    wreg     enum E12
  3079 ;;  data            3  122[BANK0 ] PTR unsigned char 
  3080 ;; Auto vars:     Size  Location     Type
  3081 ;;  request         1  125[BANK0 ] enum E12
  3082 ;; Return value:  Size  Location     Type
  3083 ;;                  1    wreg      void 
  3084 ;; Registers used:
  3085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3086 ;; Tracked objects:
  3087 ;;		On entry : 0/0
  3088 ;;		On exit  : 0/0
  3089 ;;		Unchanged: 0/0
  3090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3091 ;;      Params:         0       2       0       0       0       0       0
  3092 ;;      Locals:         0       1       0       0       0       0       0
  3093 ;;      Temps:          0       0       0       0       0       0       0
  3094 ;;      Totals:         0       3       0       0       0       0       0
  3095 ;;Total ram usage:        3 bytes
  3096 ;; Hardware stack levels used:    1
  3097 ;; Hardware stack levels required when called:    8
  3098 ;; This function calls:
  3099 ;;		_ResetMcu
  3100 ;;		_testLeds
  3101 ;; This function is called by:
  3102 ;;		_readUartMessage
  3103 ;; This function uses a non-reentrant model
  3104 ;;
  3105                           
  3106                           	psect	text7
  3107  00404A                     __ptext7:
  3108                           	opt stack 0
  3109  00404A                     _GroupControlMcu:
  3110                           	opt stack 21
  3111                           
  3112                           ;incstack = 0
  3113                           ;GroupControlMcu@request stored from wreg
  3114  00404A  0100               	movlb	0	; () banked
  3115  00404C  6FDD               	movwf	GroupControlMcu@request& (0+255),b
  3116                           
  3117                           ;MessageFunctions.c: 13: switch (request)
  3118  00404E  D006               	goto	l1296
  3119  004050                     
  3120                           ;MessageFunctions.c: 16: testLeds();
  3121  004050  EC65  F01B         	call	_testLeds	;wreg free
  3122                           
  3123                           ;MessageFunctions.c: 17: break;
  3124  004054  0012               	return	
  3125  004056                     
  3126                           ;MessageFunctions.c: 20: ResetMcu();
  3127  004056  EC1E  F022         	call	_ResetMcu	;wreg free
  3128                           
  3129                           ;MessageFunctions.c: 31: }
  3130                           
  3131                           ;MessageFunctions.c: 30: break;
  3132                           
  3133                           ;MessageFunctions.c: 29: default:
  3134                           
  3135                           ;MessageFunctions.c: 27: break;
  3136                           
  3137                           ;MessageFunctions.c: 26: case CONTROL_PA2_SET:
  3138                           
  3139                           ;MessageFunctions.c: 24: break;
  3140                           
  3141                           ;MessageFunctions.c: 23: case CONTROL_PA1_SET:
  3142                           
  3143                           ;MessageFunctions.c: 21: break;
  3144  00405A  0012               	return	
  3145  00405C                     l1296:
  3146  00405C  0100               	movlb	0	; () banked
  3147  00405E  51DD               	movf	GroupControlMcu@request& (0+255),w,b
  3148                           
  3149                           ; Switch size 1, requested type "space"
  3150                           ; Number of cases is 4, Range of values is 17 to 20
  3151                           ; switch strategies available:
  3152                           ; Name         Instructions Cycles
  3153                           ; simple_byte           13     7 (average)
  3154                           ;	Chosen strategy is simple_byte
  3155  004060  0A11               	xorlw	17	; case 17
  3156  004062  B4D8               	btfsc	status,2,c
  3157  004064  D7F8               	goto	l1299
  3158  004066  0A03               	xorlw	3	; case 18
  3159  004068  B4D8               	btfsc	status,2,c
  3160  00406A  0012               	return	
  3161  00406C  0A01               	xorlw	1	; case 19
  3162  00406E  B4D8               	btfsc	status,2,c
  3163  004070  0012               	return	
  3164  004072  0A07               	xorlw	7	; case 20
  3165  004074  A4D8               	btfss	status,2,c
  3166  004076  0012               	return	
  3167  004078  D7EB               	goto	l1297
  3168  00407A                     __end_of_GroupControlMcu:
  3169                           	opt stack 0
  3170                           tosu	equ	0xFFF
  3171                           tosh	equ	0xFFE
  3172                           tosl	equ	0xFFD
  3173                           pclath	equ	0xFFA
  3174                           tblptru	equ	0xFF8
  3175                           tblptrh	equ	0xFF7
  3176                           tblptrl	equ	0xFF6
  3177                           tablat	equ	0xFF5
  3178                           postinc0	equ	0xFEE
  3179                           wreg	equ	0xFE8
  3180                           postdec1	equ	0xFE5
  3181                           fsr1l	equ	0xFE1
  3182                           indf2	equ	0xFDF
  3183                           postinc2	equ	0xFDE
  3184                           fsr2h	equ	0xFDA
  3185                           fsr2l	equ	0xFD9
  3186                           status	equ	0xFD8
  3187                           
  3188 ;; *************** function _GroupSynthesizers *****************
  3189 ;; Defined at:
  3190 ;;		line 63 in file "MessageFunctions.c"
  3191 ;; Parameters:    Size  Location     Type
  3192 ;;  request         1    wreg     enum E12
  3193 ;;  data            2  122[BANK0 ] PTR unsigned char 
  3194 ;; Auto vars:     Size  Location     Type
  3195 ;;  request         1  124[BANK0 ] enum E12
  3196 ;; Return value:  Size  Location     Type
  3197 ;;                  1    wreg      void 
  3198 ;; Registers used:
  3199 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3200 ;; Tracked objects:
  3201 ;;		On entry : 0/0
  3202 ;;		On exit  : 0/0
  3203 ;;		Unchanged: 0/0
  3204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3205 ;;      Params:         0       2       0       0       0       0       0
  3206 ;;      Locals:         0       1       0       0       0       0       0
  3207 ;;      Temps:          0       0       0       0       0       0       0
  3208 ;;      Totals:         0       3       0       0       0       0       0
  3209 ;;Total ram usage:        3 bytes
  3210 ;; Hardware stack levels used:    1
  3211 ;; Hardware stack levels required when called:   12
  3212 ;; This function calls:
  3213 ;;		_SetSynthOper
  3214 ;;		_SynthReadData
  3215 ;;		_UpdateSynthFreq
  3216 ;; This function is called by:
  3217 ;;		_readUartMessage
  3218 ;; This function uses a non-reentrant model
  3219 ;;
  3220                           
  3221                           	psect	text8
  3222  0033E2                     __ptext8:
  3223                           	opt stack 0
  3224  0033E2                     _GroupSynthesizers:
  3225                           	opt stack 17
  3226                           
  3227                           ;incstack = 0
  3228                           ;GroupSynthesizers@request stored from wreg
  3229  0033E2  0100               	movlb	0	; () banked
  3230  0033E4  6FDC               	movwf	GroupSynthesizers@request& (0+255),b
  3231                           
  3232                           ;MessageFunctions.c: 65: switch (request)
  3233  0033E6  D028               	goto	l1321
  3234  0033E8                     
  3235                           ;MessageFunctions.c: 76: UpdateSynthFreq(SYNTH_TX, data);
  3236  0033E8  C0DA  F08A         	movff	GroupSynthesizers@data,UpdateSynthFreq@data
  3237  0033EC  C0DB  F08B         	movff	GroupSynthesizers@data+1,UpdateSynthFreq@data+1
  3238  0033F0  0E00               	movlw	0
  3239  0033F2  ECDC  F011         	call	_UpdateSynthFreq
  3240                           
  3241                           ;MessageFunctions.c: 77: break;
  3242  0033F6  0012               	return	
  3243  0033F8                     
  3244                           ;MessageFunctions.c: 80: UpdateSynthFreq(SYNTH_RX, data);
  3245  0033F8  C0DA  F08A         	movff	GroupSynthesizers@data,UpdateSynthFreq@data
  3246  0033FC  C0DB  F08B         	movff	GroupSynthesizers@data+1,UpdateSynthFreq@data+1
  3247  003400  0E01               	movlw	1
  3248  003402  ECDC  F011         	call	_UpdateSynthFreq
  3249                           
  3250                           ;MessageFunctions.c: 81: break;
  3251  003406  0012               	return	
  3252  003408                     
  3253                           ;MessageFunctions.c: 84: SetSynthOper(SYNTH_RX);
  3254  003408  0E01               	movlw	1
  3255  00340A  EC78  F01A         	call	_SetSynthOper
  3256                           
  3257                           ;MessageFunctions.c: 85: break;
  3258  00340E  0012               	return	
  3259  003410                     
  3260                           ;MessageFunctions.c: 88: SetSynthOper(SYNTH_TX);
  3261  003410  0E00               	movlw	0
  3262  003412  EC78  F01A         	call	_SetSynthOper
  3263                           
  3264                           ;MessageFunctions.c: 89: break;
  3265  003416  0012               	return	
  3266  003418                     
  3267                           ;MessageFunctions.c: 92: SynthReadData(SYNTH_RX, data);
  3268  003418  C0DA  F0C8         	movff	GroupSynthesizers@data,SynthReadData@data
  3269  00341C  C0DB  F0C9         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3270  003420  0E01               	movlw	1
  3271  003422  EC7F  F00B         	call	_SynthReadData
  3272                           
  3273                           ;MessageFunctions.c: 93: break;
  3274  003426  0012               	return	
  3275  003428                     
  3276                           ;MessageFunctions.c: 96: SynthReadData(SYNTH_TX, data);
  3277  003428  C0DA  F0C8         	movff	GroupSynthesizers@data,SynthReadData@data
  3278  00342C  C0DB  F0C9         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3279  003430  0E00               	movlw	0
  3280  003432  EC7F  F00B         	call	_SynthReadData
  3281                           
  3282                           ;MessageFunctions.c: 101: }
  3283                           
  3284                           ;MessageFunctions.c: 100: break;
  3285                           
  3286                           ;MessageFunctions.c: 99: default:
  3287                           
  3288                           ;MessageFunctions.c: 97: break;
  3289  003436  0012               	return	
  3290  003438                     l1321:
  3291  003438  0100               	movlb	0	; () banked
  3292  00343A  51DC               	movf	GroupSynthesizers@request& (0+255),w,b
  3293                           
  3294                           ; Switch size 1, requested type "space"
  3295                           ; Number of cases is 8, Range of values is 64 to 71
  3296                           ; switch strategies available:
  3297                           ; Name         Instructions Cycles
  3298                           ; simple_byte           25    13 (average)
  3299                           ;	Chosen strategy is simple_byte
  3300  00343C  0A40               	xorlw	64	; case 64
  3301  00343E  B4D8               	btfsc	status,2,c
  3302  003440  0012               	return	
  3303  003442  0A01               	xorlw	1	; case 65
  3304  003444  B4D8               	btfsc	status,2,c
  3305  003446  0012               	return	
  3306  003448  0A03               	xorlw	3	; case 66
  3307  00344A  B4D8               	btfsc	status,2,c
  3308  00344C  D7CD               	goto	l1325
  3309  00344E  0A01               	xorlw	1	; case 67
  3310  003450  B4D8               	btfsc	status,2,c
  3311  003452  D7D2               	goto	l1326
  3312  003454  0A07               	xorlw	7	; case 68
  3313  003456  B4D8               	btfsc	status,2,c
  3314  003458  D7D7               	goto	l1327
  3315  00345A  0A01               	xorlw	1	; case 69
  3316  00345C  B4D8               	btfsc	status,2,c
  3317  00345E  D7D8               	goto	l1328
  3318  003460  0A03               	xorlw	3	; case 70
  3319  003462  B4D8               	btfsc	status,2,c
  3320  003464  D7D9               	goto	l1329
  3321  003466  0A01               	xorlw	1	; case 71
  3322  003468  A4D8               	btfss	status,2,c
  3323  00346A  0012               	return	
  3324  00346C  D7DD               	goto	l1330
  3325  00346E                     __end_of_GroupSynthesizers:
  3326                           	opt stack 0
  3327                           tosu	equ	0xFFF
  3328                           tosh	equ	0xFFE
  3329                           tosl	equ	0xFFD
  3330                           pclath	equ	0xFFA
  3331                           tblptru	equ	0xFF8
  3332                           tblptrh	equ	0xFF7
  3333                           tblptrl	equ	0xFF6
  3334                           tablat	equ	0xFF5
  3335                           postinc0	equ	0xFEE
  3336                           wreg	equ	0xFE8
  3337                           postdec1	equ	0xFE5
  3338                           fsr1l	equ	0xFE1
  3339                           indf2	equ	0xFDF
  3340                           postinc2	equ	0xFDE
  3341                           fsr2h	equ	0xFDA
  3342                           fsr2l	equ	0xFD9
  3343                           status	equ	0xFD8
  3344                           
  3345 ;; *************** function _UpdateSynthFreq *****************
  3346 ;; Defined at:
  3347 ;;		line 89 in file "SyntApp.c"
  3348 ;; Parameters:    Size  Location     Type
  3349 ;;  cType           1    wreg     enum E1
  3350 ;;  data            2   42[BANK0 ] PTR unsigned char 
  3351 ;; Auto vars:     Size  Location     Type
  3352 ;;  cType           1   44[BANK0 ] enum E1
  3353 ;;  retVal          8   45[BANK0 ] struct .
  3354 ;; Return value:  Size  Location     Type
  3355 ;;                  1    wreg      void 
  3356 ;; Registers used:
  3357 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3358 ;; Tracked objects:
  3359 ;;		On entry : 0/0
  3360 ;;		On exit  : 0/0
  3361 ;;		Unchanged: 0/0
  3362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3363 ;;      Params:         0       2       0       0       0       0       0
  3364 ;;      Locals:         0       9       0       0       0       0       0
  3365 ;;      Temps:          0       0       0       0       0       0       0
  3366 ;;      Totals:         0      11       0       0       0       0       0
  3367 ;;Total ram usage:       11 bytes
  3368 ;; Hardware stack levels used:    1
  3369 ;; Hardware stack levels required when called:    8
  3370 ;; This function calls:
  3371 ;;		_GetIntFromUartData
  3372 ;;		_SWSPI_send_word
  3373 ;;		_SendAckMessage
  3374 ;;		_StoreIntInEeprom
  3375 ;; This function is called by:
  3376 ;;		_GroupSynthesizers
  3377 ;; This function uses a non-reentrant model
  3378 ;;
  3379                           
  3380                           	psect	text9
  3381  0023B8                     __ptext9:
  3382                           	opt stack 0
  3383  0023B8                     _UpdateSynthFreq:
  3384                           	opt stack 20
  3385                           
  3386                           ;incstack = 0
  3387                           ;UpdateSynthFreq@cType stored from wreg
  3388  0023B8  0100               	movlb	0	; () banked
  3389  0023BA  6F8C               	movwf	UpdateSynthFreq@cType& (0+255),b
  3390                           
  3391                           ;SyntApp.c: 91: INT_VAL retVal;
  3392                           ;SyntApp.c: 92: if(cntRegUpdate < 7)
  3393  0023BC  0E07               	movlw	7
  3394  0023BE  0100               	movlb	0	; () banked
  3395  0023C0  61E5               	cpfslt	_cntRegUpdate& (0+255),b
  3396  0023C2  D061               	goto	l537
  3397                           
  3398                           ; BSR set to: 0
  3399                           ;SyntApp.c: 93: {
  3400                           ;SyntApp.c: 94: retVal = GetIntFromUartData(10, data);
  3401  0023C4  C08A  F066         	movff	UpdateSynthFreq@data,GetIntFromUartData@data
  3402  0023C8  C08B  F067         	movff	UpdateSynthFreq@data+1,GetIntFromUartData@data+1
  3403  0023CC  0E0A               	movlw	10
  3404  0023CE  ECF0  F00E         	call	_GetIntFromUartData
  3405  0023D2  EE20  F08D         	lfsr	2,UpdateSynthFreq@retVal
  3406  0023D6  0E07               	movlw	7
  3407  0023D8                     u8961:
  3408  0023D8  CFEB FFDB          	movff	plusw0,plusw2
  3409  0023DC  06E8               	decf	wreg,f,c
  3410  0023DE  E2FC               	bc	u8961
  3411                           
  3412                           ;SyntApp.c: 95: SWSPI_send_word(cType, retVal.num, 3);
  3413  0023E0  C08D  F029         	movff	UpdateSynthFreq@retVal,SWSPI_send_word@data
  3414  0023E4  C08E  F02A         	movff	UpdateSynthFreq@retVal+1,SWSPI_send_word@data+1
  3415  0023E8  C08F  F02B         	movff	UpdateSynthFreq@retVal+2,SWSPI_send_word@data+2
  3416  0023EC  C090  F02C         	movff	UpdateSynthFreq@retVal+3,SWSPI_send_word@data+3
  3417  0023F0  0E03               	movlw	3
  3418  0023F2  6E2D               	movwf	SWSPI_send_word@dataSize,c
  3419  0023F4  0100               	movlb	0	; () banked
  3420  0023F6  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3421  0023F8  EC21  F018         	call	_SWSPI_send_word
  3422                           
  3423                           ;SyntApp.c: 96: if(cType == SYNTH_TX)
  3424  0023FC  0100               	movlb	0	; () banked
  3425  0023FE  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3426  002400  A4D8               	btfss	status,2,c
  3427  002402  D01D               	goto	l538
  3428                           
  3429                           ; BSR set to: 0
  3430                           ;SyntApp.c: 97: {
  3431                           ;SyntApp.c: 98: StoreIntInEeprom(retVal.num, (0) | SYNTH_ADDRES[retVal.con], 4);
  3432  002404  C08D  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3433  002408  C08E  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3434  00240C  C08F  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3435  002410  C090  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3436  002414  0E35               	movlw	low _SYNTH_ADDRES
  3437  002416  2591               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3438  002418  6EF6               	movwf	tblptrl,c
  3439  00241A  0E06               	movlw	high _SYNTH_ADDRES
  3440  00241C  2192               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3441  00241E  6EF7               	movwf	tblptrh,c
  3442  002420                     	if	0	;There are less than 3 active tblptr bytes
  3443  002420                     	endif
  3444  002420  0008               	tblrd		*
  3445  002422  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
  3446  002426  0E00               	movlw	0
  3447  002428  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3448  00242A  0E04               	movlw	4
  3449  00242C  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3450  00242E  EC4D  F01F         	call	_StoreIntInEeprom	;wreg free
  3451                           
  3452                           ;SyntApp.c: 99: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_TX_R
      +                          EG);
  3453  002432  0E48               	movlw	72
  3454  002434  6E24               	movwf	SendAckMessage@inRequest,c
  3455  002436  0E04               	movlw	4
  3456  002438  ECE5  F01D         	call	_SendAckMessage
  3457                           
  3458                           ;SyntApp.c: 100: }
  3459  00243C  D021               	goto	l540
  3460  00243E                     l538:
  3461                           
  3462                           ;SyntApp.c: 101: else if(cType == SYNTH_RX)
  3463  00243E  0100               	movlb	0	; () banked
  3464  002440  058C               	decf	UpdateSynthFreq@cType& (0+255),w,b
  3465  002442  A4D8               	btfss	status,2,c
  3466  002444  D01D               	goto	l540
  3467                           
  3468                           ; BSR set to: 0
  3469                           ;SyntApp.c: 102: {
  3470                           ;SyntApp.c: 103: StoreIntInEeprom(retVal.num, (0x20) | SYNTH_ADDRES[retVal.con], 4);
  3471  002446  C08D  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3472  00244A  C08E  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3473  00244E  C08F  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3474  002452  C090  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3475  002456  0E35               	movlw	low _SYNTH_ADDRES
  3476  002458  2591               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3477  00245A  6EF6               	movwf	tblptrl,c
  3478  00245C  0E06               	movlw	high _SYNTH_ADDRES
  3479  00245E  2192               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3480  002460  6EF7               	movwf	tblptrh,c
  3481  002462                     	if	0	;There are less than 3 active tblptr bytes
  3482  002462                     	endif
  3483  002462  0008               	tblrd		*
  3484  002464  50F5               	movf	tablat,w,c
  3485  002466  0920               	iorlw	32
  3486  002468  6E25               	movwf	StoreIntInEeprom@address,c
  3487  00246A  0E00               	movlw	0
  3488  00246C  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3489  00246E  0E04               	movlw	4
  3490  002470  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3491  002472  EC4D  F01F         	call	_StoreIntInEeprom	;wreg free
  3492                           
  3493                           ;SyntApp.c: 104: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_RX_
      +                          REG);
  3494  002476  0E49               	movlw	73
  3495  002478  6E24               	movwf	SendAckMessage@inRequest,c
  3496  00247A  0E04               	movlw	4
  3497  00247C  ECE5  F01D         	call	_SendAckMessage
  3498  002480                     l540:
  3499                           
  3500                           ;SyntApp.c: 105: }
  3501                           ;SyntApp.c: 106: cntRegUpdate ++;
  3502  002480  0100               	movlb	0	; () banked
  3503  002482  2BE5               	incf	_cntRegUpdate& (0+255),f,b
  3504                           
  3505                           ;SyntApp.c: 107: }
  3506  002484  0012               	return	
  3507  002486                     l537:
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;SyntApp.c: 109: else
  3511                           ;SyntApp.c: 110: {
  3512                           ;SyntApp.c: 111: cntRegUpdate = 0;
  3513                           
  3514                           ; BSR set to: 0
  3515  002486  0E00               	movlw	0
  3516  002488  6FE5               	movwf	_cntRegUpdate& (0+255),b
  3517                           
  3518                           ;SyntApp.c: 112: if(cType == SYNTH_TX)
  3519  00248A  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3520  00248C  A4D8               	btfss	status,2,c
  3521  00248E  D006               	goto	l542
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;SyntApp.c: 113: {
  3525                           ;SyntApp.c: 114: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_SET);
  3526  002490  0E42               	movlw	66
  3527  002492  6E24               	movwf	SendAckMessage@inRequest,c
  3528  002494  0E04               	movlw	4
  3529  002496  ECE5  F01D         	call	_SendAckMessage
  3530                           
  3531                           ;SyntApp.c: 115: }
  3532  00249A  0012               	return	
  3533  00249C                     l542:
  3534                           
  3535                           ;SyntApp.c: 116: else if(cType == SYNTH_RX)
  3536  00249C  0100               	movlb	0	; () banked
  3537  00249E  058C               	decf	UpdateSynthFreq@cType& (0+255),w,b
  3538  0024A0  A4D8               	btfss	status,2,c
  3539  0024A2  0012               	return	
  3540                           
  3541                           ; BSR set to: 0
  3542                           ;SyntApp.c: 117: {
  3543                           ;SyntApp.c: 118: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_SET);
  3544  0024A4  0E43               	movlw	67
  3545  0024A6  6E24               	movwf	SendAckMessage@inRequest,c
  3546  0024A8  0E04               	movlw	4
  3547  0024AA  ECE5  F01D         	call	_SendAckMessage
  3548  0024AE  0012               	return	
  3549  0024B0                     __end_of_UpdateSynthFreq:
  3550                           	opt stack 0
  3551                           tosu	equ	0xFFF
  3552                           tosh	equ	0xFFE
  3553                           tosl	equ	0xFFD
  3554                           pclath	equ	0xFFA
  3555                           tblptru	equ	0xFF8
  3556                           tblptrh	equ	0xFF7
  3557                           tblptrl	equ	0xFF6
  3558                           tablat	equ	0xFF5
  3559                           postinc0	equ	0xFEE
  3560                           plusw0	equ	0xFEB
  3561                           wreg	equ	0xFE8
  3562                           postdec1	equ	0xFE5
  3563                           fsr1l	equ	0xFE1
  3564                           indf2	equ	0xFDF
  3565                           postinc2	equ	0xFDE
  3566                           plusw2	equ	0xFDB
  3567                           fsr2h	equ	0xFDA
  3568                           fsr2l	equ	0xFD9
  3569                           status	equ	0xFD8
  3570                           
  3571 ;; *************** function _SynthReadData *****************
  3572 ;; Defined at:
  3573 ;;		line 158 in file "SyntApp.c"
  3574 ;; Parameters:    Size  Location     Type
  3575 ;;  cType           1    wreg     enum E1
  3576 ;;  data            2  104[BANK0 ] PTR unsigned char 
  3577 ;; Auto vars:     Size  Location     Type
  3578 ;;  cType           1   19[BANK1 ] enum E1
  3579 ;;  data            1   18[BANK1 ] unsigned char 
  3580 ;;  TxMsg          18    0[BANK1 ] unsigned char [18]
  3581 ;;  eepromDataAr   12   20[BANK1 ] unsigned long [3]
  3582 ;;  byteNum         1   33[BANK1 ] unsigned char 
  3583 ;;  regNum          1   32[BANK1 ] unsigned char 
  3584 ;; Return value:  Size  Location     Type
  3585 ;;                  1    wreg      void 
  3586 ;; Registers used:
  3587 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3588 ;; Tracked objects:
  3589 ;;		On entry : 0/0
  3590 ;;		On exit  : 0/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3593 ;;      Params:         0       2       0       0       0       0       0
  3594 ;;      Locals:         0       0      34       0       0       0       0
  3595 ;;      Temps:          0       0       0       0       0       0       0
  3596 ;;      Totals:         0       2      34       0       0       0       0
  3597 ;;Total ram usage:       36 bytes
  3598 ;; Hardware stack levels used:    1
  3599 ;; Hardware stack levels required when called:   10
  3600 ;; This function calls:
  3601 ;;		_ReadIntFromEeprom
  3602 ;;		_WriteUartMessage
  3603 ;;		_ZeroArray
  3604 ;;		_crc8
  3605 ;;		_make8
  3606 ;; This function is called by:
  3607 ;;		_GroupSynthesizers
  3608 ;; This function uses a non-reentrant model
  3609 ;;
  3610                           
  3611                           	psect	text10
  3612  0016FE                     __ptext10:
  3613                           	opt stack 0
  3614  0016FE                     _SynthReadData:
  3615                           	opt stack 18
  3616                           
  3617                           ;incstack = 0
  3618                           ;SynthReadData@cType stored from wreg
  3619  0016FE  0101               	movlb	1	; () banked
  3620  001700  6FCB               	movwf	SynthReadData@cType& (0+255),b
  3621                           
  3622                           ;SyntApp.c: 160: uint32_t eepromDataArray[3];
  3623                           ;SyntApp.c: 161: uint8_t regNum = 0, byteNum = 0;
  3624  001702  0E00               	movlw	0
  3625  001704  0101               	movlb	1	; () banked
  3626  001706  6FD8               	movwf	SynthReadData@regNum& (0+255),b
  3627  001708  0E00               	movlw	0
  3628  00170A  6FD9               	movwf	SynthReadData@byteNum& (0+255),b
  3629                           
  3630                           ; BSR set to: 1
  3631                           ;SyntApp.c: 162: char TxMsg[5 * 3 + 1 + 1 + 1];
  3632                           ;SyntApp.c: 163: ZeroArray(TxMsg, 5 * 3 + 1 + 1 + 1);
  3633  00170C  0EB8               	movlw	low SynthReadData@TxMsg
  3634  00170E  6E20               	movwf	ZeroArray@array,c
  3635  001710  0E01               	movlw	high SynthReadData@TxMsg
  3636  001712  6E21               	movwf	ZeroArray@array+1,c
  3637  001714  0E00               	movlw	0
  3638  001716  6E23               	movwf	ZeroArray@size+1,c
  3639  001718  0E12               	movlw	18
  3640  00171A  6E22               	movwf	ZeroArray@size,c
  3641  00171C  EC95  F021         	call	_ZeroArray	;wreg free
  3642                           
  3643                           ;SyntApp.c: 166: TxMsg[(0)] = (0x24);
  3644  001720  0E24               	movlw	36
  3645  001722  0101               	movlb	1	; () banked
  3646  001724  6FB8               	movwf	SynthReadData@TxMsg& (0+255),b
  3647                           
  3648                           ; BSR set to: 1
  3649                           ;SyntApp.c: 167: TxMsg[(1)] = SYNTH_MSG;
  3650  001726  0E04               	movlw	4
  3651  001728  6FB9               	movwf	(SynthReadData@TxMsg+1)& (0+255),b
  3652                           
  3653                           ; BSR set to: 1
  3654                           ;SyntApp.c: 168: TxMsg[(3)] = 5 * 3 + 1 - (0x4);
  3655  00172A  0E0C               	movlw	12
  3656  00172C  6FBB               	movwf	(SynthReadData@TxMsg+3)& (0+255),b
  3657                           
  3658                           ; BSR set to: 1
  3659                           ;SyntApp.c: 170: if(cType == SYNTH_TX)
  3660  00172E  51CB               	movf	SynthReadData@cType& (0+255),w,b
  3661  001730  A4D8               	btfss	status,2,c
  3662  001732  D03A               	goto	l558
  3663                           
  3664                           ; BSR set to: 1
  3665                           ;SyntApp.c: 171: {
  3666                           ;SyntApp.c: 172: TxMsg[(2)] = SYNTH_DOWN_READ_DATA;
  3667  001734  0E47               	movlw	71
  3668  001736  6FBA               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  3669                           
  3670                           ; BSR set to: 1
  3671                           ;SyntApp.c: 173: eepromDataArray[0] = ReadIntFromEeprom((0) | SYNTH_ADDRES[0], 4);
  3672  001738  0E00               	movlw	0
  3673  00173A  0100               	movlb	0	; () banked
  3674  00173C  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3675  00173E  0E04               	movlw	4
  3676  001740  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3677  001742  0E35               	movlw	low _SYNTH_ADDRES
  3678  001744  6EF6               	movwf	tblptrl,c
  3679  001746                     	if	1	;There is more than 1 active tblptr byte
  3680  001746  0E06               	movlw	high _SYNTH_ADDRES
  3681  001748  6EF7               	movwf	tblptrh,c
  3682  00174A                     	endif
  3683  00174A                     	if	0	;There are less than 3 active tblptr bytes
  3684  00174A                     	endif
  3685  00174A  0008               	tblrd		*
  3686  00174C  50F5               	movf	tablat,w,c
  3687  00174E  EC43  F010         	call	_ReadIntFromEeprom
  3688  001752  C0B1  F1CC         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray
  3689  001756  C0B2  F1CD         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+1
  3690  00175A  C0B3  F1CE         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+2
  3691  00175E  C0B4  F1CF         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+3
  3692                           
  3693                           ;SyntApp.c: 174: eepromDataArray[1] = ReadIntFromEeprom((0) | SYNTH_ADDRES[1], 4);
  3694  001762  0E00               	movlw	0
  3695  001764  0100               	movlb	0	; () banked
  3696  001766  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3697  001768  0E04               	movlw	4
  3698  00176A  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3699  00176C  0E36               	movlw	low (_SYNTH_ADDRES+1)
  3700  00176E  6EF6               	movwf	tblptrl,c
  3701  001770  0E06               	movlw	high (_SYNTH_ADDRES+1)
  3702  001772  6EF7               	movwf	tblptrh,c
  3703  001774                     	if	0	;tblptru may be non-zero
  3704  001774                     	endif
  3705  001774                     	if	0	;tblptru may be non-zero
  3706  001774                     	endif
  3707  001774  0008               	tblrd		*
  3708  001776  50F5               	movf	tablat,w,c
  3709  001778  EC43  F010         	call	_ReadIntFromEeprom
  3710  00177C  C0B1  F1D0         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+4
  3711  001780  C0B2  F1D1         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+5
  3712  001784  C0B3  F1D2         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+6
  3713  001788  C0B4  F1D3         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+7
  3714                           
  3715                           ;SyntApp.c: 175: eepromDataArray[2] = ReadIntFromEeprom((0) | SYNTH_ADDRES[2], 4);
  3716  00178C  0E00               	movlw	0
  3717  00178E  0100               	movlb	0	; () banked
  3718  001790  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3719  001792  0E04               	movlw	4
  3720  001794  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3721  001796  0E37               	movlw	low (_SYNTH_ADDRES+2)
  3722  001798  6EF6               	movwf	tblptrl,c
  3723  00179A  0E06               	movlw	high (_SYNTH_ADDRES+2)
  3724  00179C  6EF7               	movwf	tblptrh,c
  3725  00179E                     	if	0	;tblptru may be non-zero
  3726  00179E                     	endif
  3727  00179E                     	if	0	;tblptru may be non-zero
  3728  00179E                     	endif
  3729  00179E  0008               	tblrd		*
  3730  0017A0  50F5               	movf	tablat,w,c
  3731  0017A2  EC43  F010         	call	_ReadIntFromEeprom
  3732  0017A6  D040               	goto	L1
  3733  0017A8                     l558:
  3734                           
  3735                           ;SyntApp.c: 177: else if (cType == SYNTH_RX)
  3736  0017A8  0101               	movlb	1	; () banked
  3737  0017AA  05CB               	decf	SynthReadData@cType& (0+255),w,b
  3738  0017AC  A4D8               	btfss	status,2,c
  3739  0017AE  D044               	goto	l560
  3740                           
  3741                           ; BSR set to: 1
  3742                           ;SyntApp.c: 178: {
  3743                           ;SyntApp.c: 179: TxMsg[(2)] = SYNTH_UP_READ_DATA;
  3744  0017B0  0E46               	movlw	70
  3745  0017B2  6FBA               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  3746                           
  3747                           ; BSR set to: 1
  3748                           ;SyntApp.c: 180: eepromDataArray[0] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[0], 4);
  3749  0017B4  0E00               	movlw	0
  3750  0017B6  0100               	movlb	0	; () banked
  3751  0017B8  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3752  0017BA  0E04               	movlw	4
  3753  0017BC  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3754  0017BE  0E35               	movlw	low _SYNTH_ADDRES
  3755  0017C0  6EF6               	movwf	tblptrl,c
  3756  0017C2                     	if	1	;There is more than 1 active tblptr byte
  3757  0017C2  0E06               	movlw	high _SYNTH_ADDRES
  3758  0017C4  6EF7               	movwf	tblptrh,c
  3759  0017C6                     	endif
  3760  0017C6                     	if	0	;There are less than 3 active tblptr bytes
  3761  0017C6                     	endif
  3762  0017C6  0008               	tblrd		*
  3763  0017C8  50F5               	movf	tablat,w,c
  3764  0017CA  0920               	iorlw	32
  3765  0017CC  EC43  F010         	call	_ReadIntFromEeprom
  3766  0017D0  C0B1  F1CC         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray
  3767  0017D4  C0B2  F1CD         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+1
  3768  0017D8  C0B3  F1CE         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+2
  3769  0017DC  C0B4  F1CF         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+3
  3770                           
  3771                           ;SyntApp.c: 181: eepromDataArray[1] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[1], 4);
  3772  0017E0  0E00               	movlw	0
  3773  0017E2  0100               	movlb	0	; () banked
  3774  0017E4  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3775  0017E6  0E04               	movlw	4
  3776  0017E8  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3777  0017EA  0E36               	movlw	low (_SYNTH_ADDRES+1)
  3778  0017EC  6EF6               	movwf	tblptrl,c
  3779  0017EE  0E06               	movlw	high (_SYNTH_ADDRES+1)
  3780  0017F0  6EF7               	movwf	tblptrh,c
  3781  0017F2                     	if	0	;tblptru may be non-zero
  3782  0017F2                     	endif
  3783  0017F2                     	if	0	;tblptru may be non-zero
  3784  0017F2                     	endif
  3785  0017F2  0008               	tblrd		*
  3786  0017F4  50F5               	movf	tablat,w,c
  3787  0017F6  0920               	iorlw	32
  3788  0017F8  EC43  F010         	call	_ReadIntFromEeprom
  3789  0017FC  C0B1  F1D0         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+4
  3790  001800  C0B2  F1D1         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+5
  3791  001804  C0B3  F1D2         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+6
  3792  001808  C0B4  F1D3         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+7
  3793                           
  3794                           ;SyntApp.c: 182: eepromDataArray[2] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[2], 4);
  3795  00180C  0E00               	movlw	0
  3796  00180E  0100               	movlb	0	; () banked
  3797  001810  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3798  001812  0E04               	movlw	4
  3799  001814  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3800  001816  0E37               	movlw	low (_SYNTH_ADDRES+2)
  3801  001818  6EF6               	movwf	tblptrl,c
  3802  00181A  0E06               	movlw	high (_SYNTH_ADDRES+2)
  3803  00181C  6EF7               	movwf	tblptrh,c
  3804  00181E                     	if	0	;tblptru may be non-zero
  3805  00181E                     	endif
  3806  00181E                     	if	0	;tblptru may be non-zero
  3807  00181E                     	endif
  3808  00181E  0008               	tblrd		*
  3809  001820  50F5               	movf	tablat,w,c
  3810  001822  0920               	iorlw	32
  3811  001824  EC43  F010         	call	_ReadIntFromEeprom
  3812  001828                     L1:
  3813  001828  C0B1  F1D4         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+8
  3814  00182C  C0B2  F1D5         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+9
  3815  001830  C0B3  F1D6         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+10
  3816  001834  C0B4  F1D7         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+11
  3817  001838                     l560:
  3818                           
  3819                           ;SyntApp.c: 183: }
  3820                           ;SyntApp.c: 185: for(regNum = 0; regNum < 3; regNum++)
  3821  001838  0E00               	movlw	0
  3822  00183A  0101               	movlb	1	; () banked
  3823  00183C  6FD8               	movwf	SynthReadData@regNum& (0+255),b
  3824  00183E                     l8535:
  3825                           
  3826                           ; BSR set to: 1
  3827  00183E  0E02               	movlw	2
  3828  001840  65D8               	cpfsgt	SynthReadData@regNum& (0+255),b
  3829  001842  D001               	goto	l561
  3830  001844  D032               	goto	u9140
  3831  001846                     l561:
  3832                           
  3833                           ; BSR set to: 1
  3834                           ;SyntApp.c: 186: {
  3835                           ;SyntApp.c: 187: for(byteNum = 0; byteNum < (5); byteNum++)
  3836                           
  3837                           ; BSR set to: 1
  3838  001846  0E00               	movlw	0
  3839  001848  6FD9               	movwf	SynthReadData@byteNum& (0+255),b
  3840  00184A                     l8541:
  3841                           
  3842                           ; BSR set to: 1
  3843  00184A  0E04               	movlw	4
  3844  00184C  65D9               	cpfsgt	SynthReadData@byteNum& (0+255),b
  3845  00184E  D001               	goto	l563
  3846  001850  D02A               	goto	u9130
  3847  001852                     l563:
  3848                           
  3849                           ; BSR set to: 1
  3850                           ;SyntApp.c: 188: {
  3851                           ;SyntApp.c: 189: uint8_t data = make8(eepromDataArray[regNum], byteNum);
  3852                           
  3853                           ; BSR set to: 1
  3854  001852  51D8               	movf	SynthReadData@regNum& (0+255),w,b
  3855  001854  0D04               	mullw	4
  3856  001856  0ECC               	movlw	low SynthReadData@eepromDataArray
  3857  001858  24F3               	addwf	prodl,w,c
  3858  00185A  6ED9               	movwf	fsr2l,c
  3859  00185C  0E01               	movlw	high SynthReadData@eepromDataArray
  3860  00185E  20F4               	addwfc	prodh,w,c
  3861  001860  6EDA               	movwf	fsr2h,c
  3862  001862  CFDE F018          	movff	postinc2,make8@data
  3863  001866  CFDE F019          	movff	postinc2,make8@data+1
  3864  00186A  CFDE F01A          	movff	postinc2,make8@data+2
  3865  00186E  CFDE F01B          	movff	postinc2,make8@data+3
  3866  001872  C1D9  F01C         	movff	SynthReadData@byteNum,make8@dataLocation
  3867  001876  EC5D  F01C         	call	_make8	;wreg free
  3868  00187A  0101               	movlb	1	; () banked
  3869  00187C  6FCA               	movwf	SynthReadData@data_984& (0+255),b
  3870                           
  3871                           ; BSR set to: 1
  3872                           ;SyntApp.c: 190: TxMsg[(0x4) + (3 + 1)*regNum + byteNum] = data;
  3873  00187E  51D8               	movf	SynthReadData@regNum& (0+255),w,b
  3874  001880  0D04               	mullw	4
  3875  001882  51D9               	movf	SynthReadData@byteNum& (0+255),w,b
  3876  001884  26F3               	addwf	prodl,f,c
  3877  001886  0E00               	movlw	0
  3878  001888  22F4               	addwfc	prodh,f,c
  3879  00188A  0E04               	movlw	4
  3880  00188C  26F3               	addwf	prodl,f,c
  3881  00188E  0E00               	movlw	0
  3882  001890  22F4               	addwfc	prodh,f,c
  3883  001892  0EB8               	movlw	low SynthReadData@TxMsg
  3884  001894  24F3               	addwf	prodl,w,c
  3885  001896  6ED9               	movwf	fsr2l,c
  3886  001898  0E01               	movlw	high SynthReadData@TxMsg
  3887  00189A  20F4               	addwfc	prodh,w,c
  3888  00189C  6EDA               	movwf	fsr2h,c
  3889  00189E  C1CA  FFDF         	movff	SynthReadData@data_984,indf2
  3890                           
  3891                           ; BSR set to: 1
  3892  0018A2  2BD9               	incf	SynthReadData@byteNum& (0+255),f,b
  3893  0018A4  D7D2               	goto	l8541
  3894  0018A6                     u9130:
  3895                           
  3896                           ; BSR set to: 1
  3897                           
  3898                           ; BSR set to: 1
  3899  0018A6  2BD8               	incf	SynthReadData@regNum& (0+255),f,b
  3900  0018A8  D7CA               	goto	l8535
  3901  0018AA                     u9140:
  3902                           
  3903                           ; BSR set to: 1
  3904                           ;SyntApp.c: 191: }
  3905                           ;SyntApp.c: 192: }
  3906                           ;SyntApp.c: 194: TxMsg[5 * 3 + 1] = 0x9;
  3907                           
  3908                           ; BSR set to: 1
  3909  0018AA  0E09               	movlw	9
  3910  0018AC  6FC8               	movwf	(SynthReadData@TxMsg+16)& (0+255),b
  3911                           
  3912                           ; BSR set to: 1
  3913                           ;SyntApp.c: 195: TxMsg[5 * 3 + 1 + 1] = crc8(TxMsg, 5 * 3 + 1 + 1);
  3914  0018AE  0EB8               	movlw	low SynthReadData@TxMsg
  3915  0018B0  6E18               	movwf	crc8@dataArray,c
  3916  0018B2  0E01               	movlw	high SynthReadData@TxMsg
  3917  0018B4  6E19               	movwf	crc8@dataArray+1,c
  3918  0018B6  0E00               	movlw	0
  3919  0018B8  6E1B               	movwf	crc8@dataSize+1,c
  3920  0018BA  0E11               	movlw	17
  3921  0018BC  6E1A               	movwf	crc8@dataSize,c
  3922  0018BE  EC0E  F01E         	call	_crc8	;wreg free
  3923  0018C2  0101               	movlb	1	; () banked
  3924  0018C4  6FC9               	movwf	(SynthReadData@TxMsg+17)& (0+255),b
  3925                           
  3926                           ; BSR set to: 1
  3927                           ;SyntApp.c: 196: WriteUartMessage(TxMsg, 5 * 3 + 1 + 1 + 1);
  3928  0018C6  0EB8               	movlw	low SynthReadData@TxMsg
  3929  0018C8  6E19               	movwf	WriteUartMessage@dataBuf,c
  3930  0018CA  0E01               	movlw	high SynthReadData@TxMsg
  3931  0018CC  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  3932  0018CE  0E00               	movlw	0
  3933  0018D0  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  3934  0018D2  0E12               	movlw	18
  3935  0018D4  6E1B               	movwf	WriteUartMessage@dataSize,c
  3936  0018D6  ECA1  F01F         	call	_WriteUartMessage	;wreg free
  3937  0018DA  0012               	return		;funcret
  3938  0018DC                     __end_of_SynthReadData:
  3939                           	opt stack 0
  3940                           tosu	equ	0xFFF
  3941                           tosh	equ	0xFFE
  3942                           tosl	equ	0xFFD
  3943                           pclath	equ	0xFFA
  3944                           tblptru	equ	0xFF8
  3945                           tblptrh	equ	0xFF7
  3946                           tblptrl	equ	0xFF6
  3947                           tablat	equ	0xFF5
  3948                           prodh	equ	0xFF4
  3949                           prodl	equ	0xFF3
  3950                           postinc0	equ	0xFEE
  3951                           plusw0	equ	0xFEB
  3952                           wreg	equ	0xFE8
  3953                           postdec1	equ	0xFE5
  3954                           fsr1l	equ	0xFE1
  3955                           indf2	equ	0xFDF
  3956                           postinc2	equ	0xFDE
  3957                           plusw2	equ	0xFDB
  3958                           fsr2h	equ	0xFDA
  3959                           fsr2l	equ	0xFD9
  3960                           status	equ	0xFD8
  3961                           
  3962 ;; *************** function _SetSynthOper *****************
  3963 ;; Defined at:
  3964 ;;		line 127 in file "SyntApp.c"
  3965 ;; Parameters:    Size  Location     Type
  3966 ;;  cType           1    wreg     enum E1
  3967 ;; Auto vars:     Size  Location     Type
  3968 ;;  cType           1  111[BANK0 ] enum E1
  3969 ;; Return value:  Size  Location     Type
  3970 ;;                  1    wreg      void 
  3971 ;; Registers used:
  3972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3973 ;; Tracked objects:
  3974 ;;		On entry : 0/0
  3975 ;;		On exit  : 0/0
  3976 ;;		Unchanged: 0/0
  3977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3978 ;;      Params:         0       0       0       0       0       0       0
  3979 ;;      Locals:         0       1       0       0       0       0       0
  3980 ;;      Temps:          0       0       0       0       0       0       0
  3981 ;;      Totals:         0       1       0       0       0       0       0
  3982 ;;Total ram usage:        1 bytes
  3983 ;; Hardware stack levels used:    1
  3984 ;; Hardware stack levels required when called:   11
  3985 ;; This function calls:
  3986 ;;		_InitSynth
  3987 ;;		_SendAckMessage
  3988 ;;		_SwSpi_Set_CE_Pin
  3989 ;; This function is called by:
  3990 ;;		_GroupSynthesizers
  3991 ;; This function uses a non-reentrant model
  3992 ;;
  3993                           
  3994                           	psect	text11
  3995  0034F0                     __ptext11:
  3996                           	opt stack 0
  3997  0034F0                     _SetSynthOper:
  3998                           	opt stack 17
  3999                           
  4000                           ;incstack = 0
  4001                           ;SetSynthOper@cType stored from wreg
  4002  0034F0  0100               	movlb	0	; () banked
  4003  0034F2  6FCF               	movwf	SetSynthOper@cType& (0+255),b
  4004                           
  4005                           ;SyntApp.c: 129: if(cType == SYNTH_TX)
  4006  0034F4  0100               	movlb	0	; () banked
  4007  0034F6  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4008  0034F8  A4D8               	btfss	status,2,c
  4009  0034FA  D01A               	goto	l548
  4010                           
  4011                           ; BSR set to: 0
  4012                           ;SyntApp.c: 130: {
  4013                           ;SyntApp.c: 131: SynthTxOper = !SynthTxOper;
  4014  0034FC  5045               	movf	_SynthTxOper,w,c
  4015  0034FE  A4D8               	btfss	status,2,c
  4016  003500  D002               	goto	u9020
  4017  003502  0E01               	movlw	1
  4018  003504  D001               	goto	u9030
  4019  003506                     u9020:
  4020  003506  0E00               	movlw	0
  4021  003508                     u9030:
  4022  003508  6E45               	movwf	_SynthTxOper,c
  4023                           
  4024                           ;SyntApp.c: 132: if(SynthTxOper)
  4025  00350A  5045               	movf	_SynthTxOper,w,c
  4026  00350C  B4D8               	btfsc	status,2,c
  4027  00350E  D004               	goto	l549
  4028                           
  4029                           ; BSR set to: 0
  4030                           ;SyntApp.c: 133: {
  4031                           ;SyntApp.c: 134: InitSynth(cType);
  4032  003510  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4033  003512  EC54  F007         	call	_InitSynth
  4034                           
  4035                           ;SyntApp.c: 135: }
  4036  003516  D006               	goto	l550
  4037  003518                     l549:
  4038                           
  4039                           ;SyntApp.c: 136: else
  4040                           ;SyntApp.c: 137: {
  4041                           ;SyntApp.c: 138: SwSpi_Set_CE_Pin(cType, 0);
  4042  003518  0E00               	movlw	0
  4043  00351A  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  4044  00351C  0100               	movlb	0	; () banked
  4045  00351E  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4046  003520  ECD9  F01E         	call	_SwSpi_Set_CE_Pin
  4047  003524                     l550:
  4048                           
  4049                           ;SyntApp.c: 139: }
  4050                           ;SyntApp.c: 140: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_OPER);
  4051  003524  0E45               	movlw	69
  4052  003526  6E24               	movwf	SendAckMessage@inRequest,c
  4053  003528  0E04               	movlw	4
  4054  00352A  ECE5  F01D         	call	_SendAckMessage
  4055                           
  4056                           ;SyntApp.c: 141: }
  4057  00352E  0012               	return	
  4058  003530                     l548:
  4059                           
  4060                           ;SyntApp.c: 142: else if (cType == SYNTH_RX)
  4061  003530  0100               	movlb	0	; () banked
  4062  003532  05CF               	decf	SetSynthOper@cType& (0+255),w,b
  4063  003534  A4D8               	btfss	status,2,c
  4064  003536  0012               	return	
  4065                           
  4066                           ; BSR set to: 0
  4067                           ;SyntApp.c: 143: {
  4068                           ;SyntApp.c: 144: SynthRxOper = !SynthRxOper;
  4069  003538  5044               	movf	_SynthRxOper,w,c
  4070  00353A  A4D8               	btfss	status,2,c
  4071  00353C  D002               	goto	u9060
  4072  00353E  0E01               	movlw	1
  4073  003540  D001               	goto	u9070
  4074  003542                     u9060:
  4075  003542  0E00               	movlw	0
  4076  003544                     u9070:
  4077  003544  6E44               	movwf	_SynthRxOper,c
  4078                           
  4079                           ;SyntApp.c: 145: if(SynthRxOper)
  4080  003546  5044               	movf	_SynthRxOper,w,c
  4081  003548  B4D8               	btfsc	status,2,c
  4082  00354A  D004               	goto	l553
  4083                           
  4084                           ; BSR set to: 0
  4085                           ;SyntApp.c: 146: {
  4086                           ;SyntApp.c: 147: InitSynth(cType);
  4087  00354C  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4088  00354E  EC54  F007         	call	_InitSynth
  4089                           
  4090                           ;SyntApp.c: 148: }
  4091  003552  D006               	goto	l554
  4092  003554                     l553:
  4093                           
  4094                           ;SyntApp.c: 149: else
  4095                           ;SyntApp.c: 150: {
  4096                           ;SyntApp.c: 151: SwSpi_Set_CE_Pin(cType, 0);
  4097  003554  0E00               	movlw	0
  4098  003556  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  4099  003558  0100               	movlb	0	; () banked
  4100  00355A  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4101  00355C  ECD9  F01E         	call	_SwSpi_Set_CE_Pin
  4102  003560                     l554:
  4103                           
  4104                           ;SyntApp.c: 152: }
  4105                           ;SyntApp.c: 153: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_OPER);
  4106  003560  0E44               	movlw	68
  4107  003562  6E24               	movwf	SendAckMessage@inRequest,c
  4108  003564  0E04               	movlw	4
  4109  003566  ECE5  F01D         	call	_SendAckMessage
  4110  00356A  0012               	return	
  4111  00356C                     __end_of_SetSynthOper:
  4112                           	opt stack 0
  4113                           tosu	equ	0xFFF
  4114                           tosh	equ	0xFFE
  4115                           tosl	equ	0xFFD
  4116                           pclath	equ	0xFFA
  4117                           tblptru	equ	0xFF8
  4118                           tblptrh	equ	0xFF7
  4119                           tblptrl	equ	0xFF6
  4120                           tablat	equ	0xFF5
  4121                           prodh	equ	0xFF4
  4122                           prodl	equ	0xFF3
  4123                           postinc0	equ	0xFEE
  4124                           plusw0	equ	0xFEB
  4125                           wreg	equ	0xFE8
  4126                           postdec1	equ	0xFE5
  4127                           fsr1l	equ	0xFE1
  4128                           indf2	equ	0xFDF
  4129                           postinc2	equ	0xFDE
  4130                           plusw2	equ	0xFDB
  4131                           fsr2h	equ	0xFDA
  4132                           fsr2l	equ	0xFD9
  4133                           status	equ	0xFD8
  4134                           
  4135 ;; *************** function _GetMcuRunTime *****************
  4136 ;; Defined at:
  4137 ;;		line 68 in file "SystemStatus.c"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;		None
  4140 ;; Auto vars:     Size  Location     Type
  4141 ;;  idx             2   13[BANK0 ] int 
  4142 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  4143 ;;  tempRunTime     4    9[BANK0 ] unsigned long 
  4144 ;; Return value:  Size  Location     Type
  4145 ;;                  1    wreg      void 
  4146 ;; Registers used:
  4147 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4153 ;;      Params:         0       0       0       0       0       0       0
  4154 ;;      Locals:         0      15       0       0       0       0       0
  4155 ;;      Temps:          2       0       0       0       0       0       0
  4156 ;;      Totals:         2      15       0       0       0       0       0
  4157 ;;Total ram usage:       17 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; Hardware stack levels required when called:    6
  4160 ;; This function calls:
  4161 ;;		_WriteUartMessage
  4162 ;;		___lldiv
  4163 ;;		___llmod
  4164 ;;		_crc8
  4165 ;; This function is called by:
  4166 ;;		_GroupStatusAndVersion
  4167 ;; This function uses a non-reentrant model
  4168 ;;
  4169                           
  4170                           	psect	text12
  4171  002786                     __ptext12:
  4172                           	opt stack 0
  4173  002786                     _GetMcuRunTime:
  4174                           	opt stack 22
  4175                           
  4176                           ;SystemStatus.c: 71: char TxMsg[(0x4) + (0x4) + 1];
  4177                           ;SystemStatus.c: 74: TxMsg[(0)] = (0x24);
  4178                           
  4179                           ;incstack = 0
  4180  002786  0E24               	movlw	36
  4181  002788  0100               	movlb	0	; () banked
  4182  00278A  6F60               	movwf	GetMcuRunTime@TxMsg& (0+255),b
  4183                           
  4184                           ;SystemStatus.c: 75: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4185  00278C  0E02               	movlw	2
  4186  00278E  6F61               	movwf	(GetMcuRunTime@TxMsg+1)& (0+255),b
  4187                           
  4188                           ;SystemStatus.c: 76: TxMsg[(2)] = STATUS_MCU_RUN_TIME;
  4189  002790  0E21               	movlw	33
  4190  002792  6F62               	movwf	(GetMcuRunTime@TxMsg+2)& (0+255),b
  4191                           
  4192                           ;SystemStatus.c: 77: TxMsg[(3)] = (0x4);
  4193  002794  0E04               	movlw	4
  4194  002796  6F63               	movwf	(GetMcuRunTime@TxMsg+3)& (0+255),b
  4195                           
  4196                           ; BSR set to: 0
  4197                           ;SystemStatus.c: 79: uint32_t tempRunTime = mcuRunTimeIn5SecTicks;
  4198  002798  C128  F069         	movff	_mcuRunTimeIn5SecTicks,GetMcuRunTime@tempRunTime
  4199  00279C  C129  F06A         	movff	_mcuRunTimeIn5SecTicks+1,GetMcuRunTime@tempRunTime+1
  4200  0027A0  C12A  F06B         	movff	_mcuRunTimeIn5SecTicks+2,GetMcuRunTime@tempRunTime+2
  4201  0027A4  C12B  F06C         	movff	_mcuRunTimeIn5SecTicks+3,GetMcuRunTime@tempRunTime+3
  4202                           
  4203                           ;SystemStatus.c: 82: for(int idx = 0; idx < (0x4); idx++)
  4204  0027A8  0E00               	movlw	0
  4205  0027AA  6F6E               	movwf	(GetMcuRunTime@idx+1)& (0+255),b
  4206  0027AC  0E00               	movlw	0
  4207  0027AE  6F6D               	movwf	GetMcuRunTime@idx& (0+255),b
  4208  0027B0                     l8621:
  4209                           
  4210                           ; BSR set to: 0
  4211  0027B0  BF6E               	btfsc	(GetMcuRunTime@idx+1)& (0+255),7,b
  4212  0027B2  D006               	goto	l1525
  4213  0027B4  516E               	movf	(GetMcuRunTime@idx+1)& (0+255),w,b
  4214  0027B6  E142               	bnz	l8633
  4215  0027B8  0E04               	movlw	4
  4216  0027BA  5D6D               	subwf	GetMcuRunTime@idx& (0+255),w,b
  4217  0027BC  B0D8               	btfsc	status,0,c
  4218  0027BE  D03E               	goto	u9180
  4219  0027C0                     l1525:
  4220                           
  4221                           ; BSR set to: 0
  4222                           ;SystemStatus.c: 83: {
  4223                           ;SystemStatus.c: 84: TxMsg[(0x4) + idx] = tempRunTime % 10;
  4224                           
  4225                           ; BSR set to: 0
  4226  0027C0  0E04               	movlw	4
  4227  0027C2  256D               	addwf	GetMcuRunTime@idx& (0+255),w,b
  4228  0027C4  6E25               	movwf	??_GetMcuRunTime& (0+255),c
  4229  0027C6  0E00               	movlw	0
  4230  0027C8  216E               	addwfc	(GetMcuRunTime@idx+1)& (0+255),w,b
  4231  0027CA  6E26               	movwf	(??_GetMcuRunTime+1)& (0+255),c
  4232  0027CC  0E60               	movlw	low GetMcuRunTime@TxMsg
  4233  0027CE  2425               	addwf	??_GetMcuRunTime,w,c
  4234  0027D0  6ED9               	movwf	fsr2l,c
  4235  0027D2  0E00               	movlw	high GetMcuRunTime@TxMsg
  4236  0027D4  2026               	addwfc	??_GetMcuRunTime+1,w,c
  4237  0027D6  6EDA               	movwf	fsr2h,c
  4238  0027D8  C069  F018         	movff	GetMcuRunTime@tempRunTime,___llmod@dividend
  4239  0027DC  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___llmod@dividend+1
  4240  0027E0  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___llmod@dividend+2
  4241  0027E4  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___llmod@dividend+3
  4242  0027E8  0E0A               	movlw	10
  4243  0027EA  6E1C               	movwf	___llmod@divisor,c
  4244  0027EC  0E00               	movlw	0
  4245  0027EE  6E1D               	movwf	___llmod@divisor+1,c
  4246  0027F0  0E00               	movlw	0
  4247  0027F2  6E1E               	movwf	___llmod@divisor+2,c
  4248  0027F4  0E00               	movlw	0
  4249  0027F6  6E1F               	movwf	___llmod@divisor+3,c
  4250  0027F8  EC9A  F01B         	call	___llmod	;wreg free
  4251  0027FC  5018               	movf	?___llmod,w,c
  4252  0027FE  6EDF               	movwf	indf2,c
  4253                           
  4254                           ;SystemStatus.c: 85: tempRunTime /= 10;
  4255  002800  C069  F018         	movff	GetMcuRunTime@tempRunTime,___lldiv@dividend
  4256  002804  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___lldiv@dividend+1
  4257  002808  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___lldiv@dividend+2
  4258  00280C  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___lldiv@dividend+3
  4259  002810  0E0A               	movlw	10
  4260  002812  6E1C               	movwf	___lldiv@divisor,c
  4261  002814  0E00               	movlw	0
  4262  002816  6E1D               	movwf	___lldiv@divisor+1,c
  4263  002818  0E00               	movlw	0
  4264  00281A  6E1E               	movwf	___lldiv@divisor+2,c
  4265  00281C  0E00               	movlw	0
  4266  00281E  6E1F               	movwf	___lldiv@divisor+3,c
  4267  002820  EC37  F01A         	call	___lldiv	;wreg free
  4268  002824  C018  F069         	movff	?___lldiv,GetMcuRunTime@tempRunTime
  4269  002828  C019  F06A         	movff	?___lldiv+1,GetMcuRunTime@tempRunTime+1
  4270  00282C  C01A  F06B         	movff	?___lldiv+2,GetMcuRunTime@tempRunTime+2
  4271  002830  C01B  F06C         	movff	?___lldiv+3,GetMcuRunTime@tempRunTime+3
  4272  002834  0100               	movlb	0	; () banked
  4273  002836  4B6D               	infsnz	GetMcuRunTime@idx& (0+255),f,b
  4274  002838  2B6E               	incf	(GetMcuRunTime@idx+1)& (0+255),f,b
  4275  00283A  D7BA               	goto	l8621
  4276  00283C                     u9180:
  4277  00283C                     l8633:
  4278                           
  4279                           ; BSR set to: 0
  4280                           ;SystemStatus.c: 86: }
  4281                           ;SystemStatus.c: 88: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4282  00283C  0E60               	movlw	low GetMcuRunTime@TxMsg
  4283  00283E  6E18               	movwf	crc8@dataArray,c
  4284  002840  0E00               	movlw	high GetMcuRunTime@TxMsg
  4285  002842  6E19               	movwf	crc8@dataArray+1,c
  4286  002844  0E00               	movlw	0
  4287  002846  6E1B               	movwf	crc8@dataSize+1,c
  4288  002848  0E08               	movlw	8
  4289  00284A  6E1A               	movwf	crc8@dataSize,c
  4290  00284C  EC0E  F01E         	call	_crc8	;wreg free
  4291  002850  0100               	movlb	0	; () banked
  4292  002852  6F68               	movwf	(GetMcuRunTime@TxMsg+8)& (0+255),b
  4293                           
  4294                           ; BSR set to: 0
  4295                           ;SystemStatus.c: 90: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4296  002854  0E60               	movlw	low GetMcuRunTime@TxMsg
  4297  002856  6E19               	movwf	WriteUartMessage@dataBuf,c
  4298  002858  0E00               	movlw	high GetMcuRunTime@TxMsg
  4299  00285A  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4300  00285C  0E00               	movlw	0
  4301  00285E  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4302  002860  0E09               	movlw	9
  4303  002862  6E1B               	movwf	WriteUartMessage@dataSize,c
  4304  002864  ECA1  F01F         	call	_WriteUartMessage	;wreg free
  4305  002868  0012               	return		;funcret
  4306  00286A                     __end_of_GetMcuRunTime:
  4307                           	opt stack 0
  4308                           tosu	equ	0xFFF
  4309                           tosh	equ	0xFFE
  4310                           tosl	equ	0xFFD
  4311                           pclath	equ	0xFFA
  4312                           tblptru	equ	0xFF8
  4313                           tblptrh	equ	0xFF7
  4314                           tblptrl	equ	0xFF6
  4315                           tablat	equ	0xFF5
  4316                           prodh	equ	0xFF4
  4317                           prodl	equ	0xFF3
  4318                           postinc0	equ	0xFEE
  4319                           plusw0	equ	0xFEB
  4320                           wreg	equ	0xFE8
  4321                           postdec1	equ	0xFE5
  4322                           fsr1l	equ	0xFE1
  4323                           indf2	equ	0xFDF
  4324                           postinc2	equ	0xFDE
  4325                           plusw2	equ	0xFDB
  4326                           fsr2h	equ	0xFDA
  4327                           fsr2l	equ	0xFD9
  4328                           status	equ	0xFD8
  4329                           
  4330 ;; *************** function ___lldiv *****************
  4331 ;; Defined at:
  4332 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4333 ;; Parameters:    Size  Location     Type
  4334 ;;  dividend        4   23[COMRAM] unsigned long 
  4335 ;;  divisor         4   27[COMRAM] unsigned long 
  4336 ;; Auto vars:     Size  Location     Type
  4337 ;;  quotient        4   31[COMRAM] unsigned long 
  4338 ;;  counter         1   35[COMRAM] unsigned char 
  4339 ;; Return value:  Size  Location     Type
  4340 ;;                  4   23[COMRAM] unsigned long 
  4341 ;; Registers used:
  4342 ;;		wreg, status,2, status,0
  4343 ;; Tracked objects:
  4344 ;;		On entry : 0/0
  4345 ;;		On exit  : 0/0
  4346 ;;		Unchanged: 0/0
  4347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4348 ;;      Params:         8       0       0       0       0       0       0
  4349 ;;      Locals:         5       0       0       0       0       0       0
  4350 ;;      Temps:          0       0       0       0       0       0       0
  4351 ;;      Totals:        13       0       0       0       0       0       0
  4352 ;;Total ram usage:       13 bytes
  4353 ;; Hardware stack levels used:    1
  4354 ;; Hardware stack levels required when called:    4
  4355 ;; This function calls:
  4356 ;;		Nothing
  4357 ;; This function is called by:
  4358 ;;		_GetMcuRunTime
  4359 ;; This function uses a non-reentrant model
  4360 ;;
  4361                           
  4362                           	psect	text13
  4363  00346E                     __ptext13:
  4364                           	opt stack 0
  4365  00346E                     ___lldiv:
  4366                           	opt stack 23
  4367                           
  4368                           ;incstack = 0
  4369  00346E  0E00               	movlw	0
  4370  003470  6E20               	movwf	___lldiv@quotient,c
  4371  003472  0E00               	movlw	0
  4372  003474  6E21               	movwf	___lldiv@quotient+1,c
  4373  003476  0E00               	movlw	0
  4374  003478  6E22               	movwf	___lldiv@quotient+2,c
  4375  00347A  0E00               	movlw	0
  4376  00347C  6E23               	movwf	___lldiv@quotient+3,c
  4377  00347E  501C               	movf	___lldiv@divisor,w,c
  4378  003480  101D               	iorwf	___lldiv@divisor+1,w,c
  4379  003482  101E               	iorwf	___lldiv@divisor+2,w,c
  4380  003484  101F               	iorwf	___lldiv@divisor+3,w,c
  4381  003486  B4D8               	btfsc	status,2,c
  4382  003488  D02A               	goto	l1966
  4383  00348A  0E01               	movlw	1
  4384  00348C  6E24               	movwf	___lldiv@counter,c
  4385  00348E  D006               	goto	l1961
  4386  003490  90D8               	bcf	status,0,c
  4387  003492  361C               	rlcf	___lldiv@divisor,f,c
  4388  003494  361D               	rlcf	___lldiv@divisor+1,f,c
  4389  003496  361E               	rlcf	___lldiv@divisor+2,f,c
  4390  003498  361F               	rlcf	___lldiv@divisor+3,f,c
  4391  00349A  2A24               	incf	___lldiv@counter,f,c
  4392  00349C                     l1961:
  4393  00349C  AE1F               	btfss	___lldiv@divisor+3,7,c
  4394  00349E  D7F8               	goto	l1962
  4395  0034A0                     u8540:
  4396  0034A0  90D8               	bcf	status,0,c
  4397  0034A2  3620               	rlcf	___lldiv@quotient,f,c
  4398  0034A4  3621               	rlcf	___lldiv@quotient+1,f,c
  4399  0034A6  3622               	rlcf	___lldiv@quotient+2,f,c
  4400  0034A8  3623               	rlcf	___lldiv@quotient+3,f,c
  4401  0034AA  501C               	movf	___lldiv@divisor,w,c
  4402  0034AC  5C18               	subwf	___lldiv@dividend,w,c
  4403  0034AE  501D               	movf	___lldiv@divisor+1,w,c
  4404  0034B0  5819               	subwfb	___lldiv@dividend+1,w,c
  4405  0034B2  501E               	movf	___lldiv@divisor+2,w,c
  4406  0034B4  581A               	subwfb	___lldiv@dividend+2,w,c
  4407  0034B6  501F               	movf	___lldiv@divisor+3,w,c
  4408  0034B8  581B               	subwfb	___lldiv@dividend+3,w,c
  4409  0034BA  A0D8               	btfss	status,0,c
  4410  0034BC  D009               	goto	l1965
  4411  0034BE  501C               	movf	___lldiv@divisor,w,c
  4412  0034C0  5E18               	subwf	___lldiv@dividend,f,c
  4413  0034C2  501D               	movf	___lldiv@divisor+1,w,c
  4414  0034C4  5A19               	subwfb	___lldiv@dividend+1,f,c
  4415  0034C6  501E               	movf	___lldiv@divisor+2,w,c
  4416  0034C8  5A1A               	subwfb	___lldiv@dividend+2,f,c
  4417  0034CA  501F               	movf	___lldiv@divisor+3,w,c
  4418  0034CC  5A1B               	subwfb	___lldiv@dividend+3,f,c
  4419  0034CE  8020               	bsf	___lldiv@quotient,0,c
  4420  0034D0                     l1965:
  4421  0034D0  90D8               	bcf	status,0,c
  4422  0034D2  321F               	rrcf	___lldiv@divisor+3,f,c
  4423  0034D4  321E               	rrcf	___lldiv@divisor+2,f,c
  4424  0034D6  321D               	rrcf	___lldiv@divisor+1,f,c
  4425  0034D8  321C               	rrcf	___lldiv@divisor,f,c
  4426  0034DA  2E24               	decfsz	___lldiv@counter,f,c
  4427  0034DC  D7E1               	goto	u8540
  4428  0034DE                     l1966:
  4429  0034DE  C020  F018         	movff	___lldiv@quotient,?___lldiv
  4430  0034E2  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  4431  0034E6  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  4432  0034EA  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  4433  0034EE  0012               	return		;funcret
  4434  0034F0                     __end_of___lldiv:
  4435                           	opt stack 0
  4436                           tosu	equ	0xFFF
  4437                           tosh	equ	0xFFE
  4438                           tosl	equ	0xFFD
  4439                           pclath	equ	0xFFA
  4440                           tblptru	equ	0xFF8
  4441                           tblptrh	equ	0xFF7
  4442                           tblptrl	equ	0xFF6
  4443                           tablat	equ	0xFF5
  4444                           prodh	equ	0xFF4
  4445                           prodl	equ	0xFF3
  4446                           postinc0	equ	0xFEE
  4447                           plusw0	equ	0xFEB
  4448                           wreg	equ	0xFE8
  4449                           postdec1	equ	0xFE5
  4450                           fsr1l	equ	0xFE1
  4451                           indf2	equ	0xFDF
  4452                           postinc2	equ	0xFDE
  4453                           plusw2	equ	0xFDB
  4454                           fsr2h	equ	0xFDA
  4455                           fsr2l	equ	0xFD9
  4456                           status	equ	0xFD8
  4457                           
  4458 ;; *************** function _GetMcuFwVersion *****************
  4459 ;; Defined at:
  4460 ;;		line 14 in file "SystemStatus.c"
  4461 ;; Parameters:    Size  Location     Type
  4462 ;;		None
  4463 ;; Auto vars:     Size  Location     Type
  4464 ;;  TxMsg          18    4[BANK0 ] unsigned char [18]
  4465 ;;  compileData     4    0[BANK0 ] unsigned long 
  4466 ;; Return value:  Size  Location     Type
  4467 ;;                  1    wreg      void 
  4468 ;; Registers used:
  4469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4470 ;; Tracked objects:
  4471 ;;		On entry : 0/0
  4472 ;;		On exit  : 0/0
  4473 ;;		Unchanged: 0/0
  4474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4475 ;;      Params:         0       0       0       0       0       0       0
  4476 ;;      Locals:         0      26       0       0       0       0       0
  4477 ;;      Temps:          7       0       0       0       0       0       0
  4478 ;;      Totals:         7      26       0       0       0       0       0
  4479 ;;Total ram usage:       33 bytes
  4480 ;; Hardware stack levels used:    1
  4481 ;; Hardware stack levels required when called:    6
  4482 ;; This function calls:
  4483 ;;		_WriteUartMessage
  4484 ;;		_ZeroArray
  4485 ;;		___wmul
  4486 ;;		_crc8
  4487 ;; This function is called by:
  4488 ;;		_GroupStatusAndVersion
  4489 ;; This function uses a non-reentrant model
  4490 ;;
  4491                           
  4492                           	psect	text14
  4493  000AB8                     __ptext14:
  4494                           	opt stack 0
  4495  000AB8                     _GetMcuFwVersion:
  4496                           	opt stack 22
  4497                           
  4498                           ;SystemStatus.c: 16: uint32_t compileData = 0x0;
  4499                           
  4500                           ;incstack = 0
  4501  000AB8  0E00               	movlw	0
  4502  000ABA  0100               	movlb	0	; () banked
  4503  000ABC  6F60               	movwf	GetMcuFwVersion@compileData& (0+255),b
  4504  000ABE  0E00               	movlw	0
  4505  000AC0  6F61               	movwf	(GetMcuFwVersion@compileData+1)& (0+255),b
  4506  000AC2  0E00               	movlw	0
  4507  000AC4  6F62               	movwf	(GetMcuFwVersion@compileData+2)& (0+255),b
  4508  000AC6  0E00               	movlw	0
  4509  000AC8  6F63               	movwf	(GetMcuFwVersion@compileData+3)& (0+255),b
  4510                           
  4511                           ; BSR set to: 0
  4512                           ;SystemStatus.c: 19: char TxMsg[(13) + (0x4) + 1];
  4513                           ;SystemStatus.c: 20: ZeroArray(TxMsg, (13) + (0x4) + 1);
  4514  000ACA  0E64               	movlw	low GetMcuFwVersion@TxMsg
  4515  000ACC  6E20               	movwf	ZeroArray@array,c
  4516  000ACE  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4517  000AD0  6E21               	movwf	ZeroArray@array+1,c
  4518  000AD2  0E00               	movlw	0
  4519  000AD4  6E23               	movwf	ZeroArray@size+1,c
  4520  000AD6  0E12               	movlw	18
  4521  000AD8  6E22               	movwf	ZeroArray@size,c
  4522  000ADA  EC95  F021         	call	_ZeroArray	;wreg free
  4523                           
  4524                           ;SystemStatus.c: 23: TxMsg[(0)] = (0x24);
  4525  000ADE  0E24               	movlw	36
  4526  000AE0  0100               	movlb	0	; () banked
  4527  000AE2  6F64               	movwf	GetMcuFwVersion@TxMsg& (0+255),b
  4528                           
  4529                           ; BSR set to: 0
  4530                           ;SystemStatus.c: 24: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4531  000AE4  0E02               	movlw	2
  4532  000AE6  6F65               	movwf	(GetMcuFwVersion@TxMsg+1)& (0+255),b
  4533                           
  4534                           ; BSR set to: 0
  4535                           ;SystemStatus.c: 25: TxMsg[(2)] = STATUS_GET_MCU_FW_VERSION;
  4536  000AE8  0E22               	movlw	34
  4537  000AEA  6F66               	movwf	(GetMcuFwVersion@TxMsg+2)& (0+255),b
  4538                           
  4539                           ; BSR set to: 0
  4540                           ;SystemStatus.c: 26: TxMsg[(3)] = (13);
  4541  000AEC  0E0D               	movlw	13
  4542  000AEE  6F67               	movwf	(GetMcuFwVersion@TxMsg+3)& (0+255),b
  4543                           
  4544                           ; BSR set to: 0
  4545                           ;SystemStatus.c: 29: TxMsg[(0x4) + 0] = (( ("Mar 22 2018"[ 7] - '0') * 1000 + ("Mar 22 2
      +                          018"[ 8] - '0') * 100 + ("Mar 22 2018"[ 9] - '0') * 10 + ("Mar 22 2018"[10] - '0') ) & 0
      +                          xFF00) >> 8;
  4546  000AF0  0ED0               	movlw	208
  4547  000AF2  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4548  000AF4  0EFF               	movlw	255
  4549  000AF6  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4550  000AF8  0E97               	movlw	low (STR_1+7)
  4551  000AFA  6EF6               	movwf	tblptrl,c
  4552  000AFC  0E06               	movlw	high (STR_1+7)
  4553  000AFE  6EF7               	movwf	tblptrh,c
  4554  000B00                     	if	0	;tblptru may be non-zero
  4555  000B00                     	endif
  4556  000B00                     	if	0	;tblptru may be non-zero
  4557  000B00                     	endif
  4558  000B00  0008               	tblrd		*
  4559  000B02  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4560  000B06  0ED0               	movlw	208
  4561  000B08  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4562  000B0A  6E18               	movwf	___wmul@multiplier,c
  4563  000B0C  6A19               	clrf	___wmul@multiplier+1,c
  4564  000B0E  0EFF               	movlw	255
  4565  000B10  2219               	addwfc	___wmul@multiplier+1,f,c
  4566  000B12  0E03               	movlw	3
  4567  000B14  6E1B               	movwf	___wmul@multiplicand+1,c
  4568  000B16  0EE8               	movlw	232
  4569  000B18  6E1A               	movwf	___wmul@multiplicand,c
  4570  000B1A  ECFC  F020         	call	___wmul	;wreg free
  4571  000B1E  0E9A               	movlw	low (STR_1+10)
  4572  000B20  6EF6               	movwf	tblptrl,c
  4573  000B22  0E06               	movlw	high (STR_1+10)
  4574  000B24  6EF7               	movwf	tblptrh,c
  4575  000B26                     	if	0	;tblptru may be non-zero
  4576  000B26                     	endif
  4577  000B26                     	if	0	;tblptru may be non-zero
  4578  000B26                     	endif
  4579  000B26  0008               	tblrd		*
  4580  000B28  50F5               	movf	tablat,w,c
  4581  000B2A  6E27               	movwf	(??_GetMcuFwVersion+3)& (0+255),c
  4582  000B2C  6A28               	clrf	(??_GetMcuFwVersion+4)& (0+255),c
  4583  000B2E  5018               	movf	?___wmul,w,c
  4584  000B30  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4585  000B32  5019               	movf	?___wmul+1,w,c
  4586  000B34  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4587  000B36  0E98               	movlw	low (STR_1+8)
  4588  000B38  6EF6               	movwf	tblptrl,c
  4589  000B3A  0E06               	movlw	high (STR_1+8)
  4590  000B3C  6EF7               	movwf	tblptrh,c
  4591  000B3E                     	if	0	;tblptru may be non-zero
  4592  000B3E                     	endif
  4593  000B3E                     	if	0	;tblptru may be non-zero
  4594  000B3E                     	endif
  4595  000B3E  0008               	tblrd		*
  4596  000B40  CFF5 F029          	movff	tablat,??_GetMcuFwVersion+5
  4597  000B44  0ED0               	movlw	208
  4598  000B46  2429               	addwf	??_GetMcuFwVersion+5,w,c
  4599  000B48  6E18               	movwf	___wmul@multiplier,c
  4600  000B4A  6A19               	clrf	___wmul@multiplier+1,c
  4601  000B4C  0EFF               	movlw	255
  4602  000B4E  2219               	addwfc	___wmul@multiplier+1,f,c
  4603  000B50  0E00               	movlw	0
  4604  000B52  6E1B               	movwf	___wmul@multiplicand+1,c
  4605  000B54  0E64               	movlw	100
  4606  000B56  6E1A               	movwf	___wmul@multiplicand,c
  4607  000B58  ECFC  F020         	call	___wmul	;wreg free
  4608  000B5C  5018               	movf	?___wmul,w,c
  4609  000B5E  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4610  000B60  5019               	movf	?___wmul+1,w,c
  4611  000B62  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4612  000B64  0E99               	movlw	low (STR_1+9)
  4613  000B66  6EF6               	movwf	tblptrl,c
  4614  000B68  0E06               	movlw	high (STR_1+9)
  4615  000B6A  6EF7               	movwf	tblptrh,c
  4616  000B6C                     	if	0	;tblptru may be non-zero
  4617  000B6C                     	endif
  4618  000B6C                     	if	0	;tblptru may be non-zero
  4619  000B6C                     	endif
  4620  000B6C  0008               	tblrd		*
  4621  000B6E  CFF5 F02A          	movff	tablat,??_GetMcuFwVersion+6
  4622  000B72  0ED0               	movlw	208
  4623  000B74  242A               	addwf	??_GetMcuFwVersion+6,w,c
  4624  000B76  6E18               	movwf	___wmul@multiplier,c
  4625  000B78  6A19               	clrf	___wmul@multiplier+1,c
  4626  000B7A  0EFF               	movlw	255
  4627  000B7C  2219               	addwfc	___wmul@multiplier+1,f,c
  4628  000B7E  0E00               	movlw	0
  4629  000B80  6E1B               	movwf	___wmul@multiplicand+1,c
  4630  000B82  0E0A               	movlw	10
  4631  000B84  6E1A               	movwf	___wmul@multiplicand,c
  4632  000B86  ECFC  F020         	call	___wmul	;wreg free
  4633  000B8A  5018               	movf	?___wmul,w,c
  4634  000B8C  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4635  000B8E  5019               	movf	?___wmul+1,w,c
  4636  000B90  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4637  000B92  5024               	movf	??_GetMcuFwVersion,w,c
  4638  000B94  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4639  000B96  5025               	movf	??_GetMcuFwVersion+1,w,c
  4640  000B98  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4641  000B9A  C028  F027         	movff	??_GetMcuFwVersion+4,??_GetMcuFwVersion+3
  4642  000B9E  6A28               	clrf	??_GetMcuFwVersion+4,c
  4643  000BA0  5027               	movf	??_GetMcuFwVersion+3,w,c
  4644  000BA2  0100               	movlb	0	; () banked
  4645  000BA4  6F68               	movwf	(GetMcuFwVersion@TxMsg+4)& (0+255),b
  4646                           
  4647                           ; BSR set to: 0
  4648                           ;SystemStatus.c: 30: TxMsg[(0x4) + 1] = ( ("Mar 22 2018"[ 7] - '0') * 1000 + ("Mar 22 20
      +                          18"[ 8] - '0') * 100 + ("Mar 22 2018"[ 9] - '0') * 10 + ("Mar 22 2018"[10] - '0') ) & 0x
      +                          FF;
  4649  000BA6  0E9A               	movlw	low (STR_1+10)
  4650  000BA8  6EF6               	movwf	tblptrl,c
  4651  000BAA  0E06               	movlw	high (STR_1+10)
  4652  000BAC  6EF7               	movwf	tblptrh,c
  4653  000BAE                     	if	0	;tblptru may be non-zero
  4654  000BAE                     	endif
  4655  000BAE                     	if	0	;tblptru may be non-zero
  4656  000BAE                     	endif
  4657  000BAE  0008               	tblrd		*
  4658  000BB0  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4659  000BB4  0E99               	movlw	low (STR_1+9)
  4660  000BB6  6EF6               	movwf	tblptrl,c
  4661  000BB8  0E06               	movlw	high (STR_1+9)
  4662  000BBA  6EF7               	movwf	tblptrh,c
  4663  000BBC                     	if	0	;tblptru may be non-zero
  4664  000BBC                     	endif
  4665  000BBC                     	if	0	;tblptru may be non-zero
  4666  000BBC                     	endif
  4667  000BBC  0008               	tblrd		*
  4668  000BBE  50F5               	movf	tablat,w,c
  4669  000BC0  0FD0               	addlw	208
  4670  000BC2  0D0A               	mullw	10
  4671  000BC4  CFF3 F025          	movff	prodl,??_GetMcuFwVersion+1
  4672  000BC8  0E98               	movlw	low (STR_1+8)
  4673  000BCA  6EF6               	movwf	tblptrl,c
  4674  000BCC  0E06               	movlw	high (STR_1+8)
  4675  000BCE  6EF7               	movwf	tblptrh,c
  4676  000BD0                     	if	0	;tblptru may be non-zero
  4677  000BD0                     	endif
  4678  000BD0                     	if	0	;tblptru may be non-zero
  4679  000BD0                     	endif
  4680  000BD0  0008               	tblrd		*
  4681  000BD2  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4682  000BD6  0ED0               	movlw	208
  4683  000BD8  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4684  000BDA  6E18               	movwf	___wmul@multiplier,c
  4685  000BDC  6A19               	clrf	___wmul@multiplier+1,c
  4686  000BDE  0EFF               	movlw	255
  4687  000BE0  2219               	addwfc	___wmul@multiplier+1,f,c
  4688  000BE2  0E00               	movlw	0
  4689  000BE4  6E1B               	movwf	___wmul@multiplicand+1,c
  4690  000BE6  0E64               	movlw	100
  4691  000BE8  6E1A               	movwf	___wmul@multiplicand,c
  4692  000BEA  ECFC  F020         	call	___wmul	;wreg free
  4693  000BEE  0E97               	movlw	low (STR_1+7)
  4694  000BF0  6EF6               	movwf	tblptrl,c
  4695  000BF2  0E06               	movlw	high (STR_1+7)
  4696  000BF4  6EF7               	movwf	tblptrh,c
  4697  000BF6                     	if	0	;tblptru may be non-zero
  4698  000BF6                     	endif
  4699  000BF6                     	if	0	;tblptru may be non-zero
  4700  000BF6                     	endif
  4701  000BF6  0008               	tblrd		*
  4702  000BF8  50F5               	movf	tablat,w,c
  4703  000BFA  0FD0               	addlw	208
  4704  000BFC  0DE8               	mullw	232
  4705  000BFE  50F3               	movf	prodl,w,c
  4706  000C00  2418               	addwf	?___wmul,w,c
  4707  000C02  2425               	addwf	??_GetMcuFwVersion+1,w,c
  4708  000C04  2424               	addwf	??_GetMcuFwVersion,w,c
  4709  000C06  0FD0               	addlw	208
  4710  000C08  0100               	movlb	0	; () banked
  4711  000C0A  6F69               	movwf	(GetMcuFwVersion@TxMsg+5)& (0+255),b
  4712                           
  4713                           ; BSR set to: 0
  4714                           ;SystemStatus.c: 33: TxMsg[(0x4) + 2] = "Mar 22 2018"[0];
  4715  000C0C  0E90               	movlw	low STR_1
  4716  000C0E  6EF6               	movwf	tblptrl,c
  4717  000C10                     	if	1	;There is more than 1 active tblptr byte
  4718  000C10  0E06               	movlw	high STR_1
  4719  000C12  6EF7               	movwf	tblptrh,c
  4720  000C14                     	endif
  4721  000C14                     	if	0	;There are less than 3 active tblptr bytes
  4722  000C14                     	endif
  4723  000C14  0008               	tblrd		*
  4724  000C16  CFF5 F06A          	movff	tablat,GetMcuFwVersion@TxMsg+6
  4725                           
  4726                           ; BSR set to: 0
  4727                           ;SystemStatus.c: 34: TxMsg[(0x4) + 3] = "Mar 22 2018"[1];
  4728  000C1A  0E91               	movlw	low (STR_1+1)
  4729  000C1C  6EF6               	movwf	tblptrl,c
  4730  000C1E  0E06               	movlw	high (STR_1+1)
  4731  000C20  6EF7               	movwf	tblptrh,c
  4732  000C22                     	if	0	;tblptru may be non-zero
  4733  000C22                     	endif
  4734  000C22                     	if	0	;tblptru may be non-zero
  4735  000C22                     	endif
  4736  000C22  0008               	tblrd		*
  4737  000C24  CFF5 F06B          	movff	tablat,GetMcuFwVersion@TxMsg+7
  4738                           
  4739                           ; BSR set to: 0
  4740                           ;SystemStatus.c: 35: TxMsg[(0x4) + 4] = "Mar 22 2018"[2];
  4741  000C28  0E92               	movlw	low (STR_1+2)
  4742  000C2A  6EF6               	movwf	tblptrl,c
  4743  000C2C  0E06               	movlw	high (STR_1+2)
  4744  000C2E  6EF7               	movwf	tblptrh,c
  4745  000C30                     	if	0	;tblptru may be non-zero
  4746  000C30                     	endif
  4747  000C30                     	if	0	;tblptru may be non-zero
  4748  000C30                     	endif
  4749  000C30  0008               	tblrd		*
  4750  000C32  CFF5 F06C          	movff	tablat,GetMcuFwVersion@TxMsg+8
  4751                           
  4752                           ; BSR set to: 0
  4753                           ;SystemStatus.c: 38: TxMsg[(0x4) + 5] = (( (("Mar 22 2018"[4] >= '0') ? ("Mar 22 2018"[4
      +                          ] - '0') * 10 : 0) + ("Mar 22 2018"[5] - '0') ) & 0xFF00) >> 8;
  4754  000C36  0E94               	movlw	low (STR_1+4)
  4755  000C38  6EF6               	movwf	tblptrl,c
  4756  000C3A  0E06               	movlw	high (STR_1+4)
  4757  000C3C  6EF7               	movwf	tblptrh,c
  4758  000C3E                     	if	0	;tblptru may be non-zero
  4759  000C3E                     	endif
  4760  000C3E                     	if	0	;tblptru may be non-zero
  4761  000C3E                     	endif
  4762  000C3E  0E30               	movlw	48
  4763  000C40  0008               	tblrd		*
  4764  000C42  60F5               	cpfslt	tablat,c
  4765  000C44  D005               	goto	l1509
  4766                           
  4767                           ; BSR set to: 0
  4768  000C46  0E00               	movlw	0
  4769  000C48  6F77               	movwf	(_GetMcuFwVersion$2688+1)& (0+255),b
  4770  000C4A  0E00               	movlw	0
  4771  000C4C  6F76               	movwf	_GetMcuFwVersion$2688& (0+255),b
  4772  000C4E  D017               	goto	l1511
  4773  000C50                     l1509:
  4774                           
  4775                           ; BSR set to: 0
  4776                           
  4777                           ; BSR set to: 0
  4778  000C50  0E94               	movlw	low (STR_1+4)
  4779  000C52  6EF6               	movwf	tblptrl,c
  4780  000C54  0E06               	movlw	high (STR_1+4)
  4781  000C56  6EF7               	movwf	tblptrh,c
  4782  000C58                     	if	0	;tblptru may be non-zero
  4783  000C58                     	endif
  4784  000C58                     	if	0	;tblptru may be non-zero
  4785  000C58                     	endif
  4786  000C58  0008               	tblrd		*
  4787  000C5A  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4788  000C5E  0ED0               	movlw	208
  4789  000C60  2424               	addwf	??_GetMcuFwVersion,w,c
  4790  000C62  6E18               	movwf	___wmul@multiplier,c
  4791  000C64  6A19               	clrf	___wmul@multiplier+1,c
  4792  000C66  0EFF               	movlw	255
  4793  000C68  2219               	addwfc	___wmul@multiplier+1,f,c
  4794  000C6A  0E00               	movlw	0
  4795  000C6C  6E1B               	movwf	___wmul@multiplicand+1,c
  4796  000C6E  0E0A               	movlw	10
  4797  000C70  6E1A               	movwf	___wmul@multiplicand,c
  4798  000C72  ECFC  F020         	call	___wmul	;wreg free
  4799  000C76  C018  F076         	movff	?___wmul,_GetMcuFwVersion$2688
  4800  000C7A  C019  F077         	movff	?___wmul+1,_GetMcuFwVersion$2688+1
  4801  000C7E                     l1511:
  4802  000C7E  0ED0               	movlw	208
  4803  000C80  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4804  000C82  0EFF               	movlw	255
  4805  000C84  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4806  000C86  0E95               	movlw	low (STR_1+5)
  4807  000C88  6EF6               	movwf	tblptrl,c
  4808  000C8A  0E06               	movlw	high (STR_1+5)
  4809  000C8C  6EF7               	movwf	tblptrh,c
  4810  000C8E                     	if	0	;tblptru may be non-zero
  4811  000C8E                     	endif
  4812  000C8E                     	if	0	;tblptru may be non-zero
  4813  000C8E                     	endif
  4814  000C8E  0008               	tblrd		*
  4815  000C90  50F5               	movf	tablat,w,c
  4816  000C92  0100               	movlb	0	; () banked
  4817  000C94  2576               	addwf	_GetMcuFwVersion$2688& (0+255),w,b
  4818  000C96  6E26               	movwf	(??_GetMcuFwVersion+2)& (0+255),c
  4819  000C98  0E00               	movlw	0
  4820  000C9A  2177               	addwfc	(_GetMcuFwVersion$2688+1)& (0+255),w,b
  4821  000C9C  6E27               	movwf	(??_GetMcuFwVersion+3)& (0+255),c
  4822  000C9E  5024               	movf	??_GetMcuFwVersion,w,c
  4823  000CA0  2626               	addwf	??_GetMcuFwVersion+2,f,c
  4824  000CA2  5025               	movf	??_GetMcuFwVersion+1,w,c
  4825  000CA4  2227               	addwfc	??_GetMcuFwVersion+3,f,c
  4826  000CA6  C027  F026         	movff	??_GetMcuFwVersion+3,??_GetMcuFwVersion+2
  4827  000CAA  6A27               	clrf	??_GetMcuFwVersion+3,c
  4828  000CAC  5026               	movf	??_GetMcuFwVersion+2,w,c
  4829  000CAE  6F6D               	movwf	(GetMcuFwVersion@TxMsg+9)& (0+255),b
  4830                           
  4831                           ; BSR set to: 0
  4832                           ;SystemStatus.c: 39: TxMsg[(0x4) + 6] = ( (("Mar 22 2018"[4] >= '0') ? ("Mar 22 2018"[4]
      +                           - '0') * 10 : 0) + ("Mar 22 2018"[5] - '0') ) & 0xFF;
  4833  000CB0  0E94               	movlw	low (STR_1+4)
  4834  000CB2  6EF6               	movwf	tblptrl,c
  4835  000CB4  0E06               	movlw	high (STR_1+4)
  4836  000CB6  6EF7               	movwf	tblptrh,c
  4837  000CB8                     	if	0	;tblptru may be non-zero
  4838  000CB8                     	endif
  4839  000CB8                     	if	0	;tblptru may be non-zero
  4840  000CB8                     	endif
  4841  000CB8  0E30               	movlw	48
  4842  000CBA  0008               	tblrd		*
  4843  000CBC  60F5               	cpfslt	tablat,c
  4844  000CBE  D005               	goto	l1513
  4845                           
  4846                           ; BSR set to: 0
  4847  000CC0  0E00               	movlw	0
  4848  000CC2  6F79               	movwf	(_GetMcuFwVersion$2692+1)& (0+255),b
  4849  000CC4  0E00               	movlw	0
  4850  000CC6  6F78               	movwf	_GetMcuFwVersion$2692& (0+255),b
  4851  000CC8  D017               	goto	l1515
  4852  000CCA                     l1513:
  4853                           
  4854                           ; BSR set to: 0
  4855                           
  4856                           ; BSR set to: 0
  4857  000CCA  0E94               	movlw	low (STR_1+4)
  4858  000CCC  6EF6               	movwf	tblptrl,c
  4859  000CCE  0E06               	movlw	high (STR_1+4)
  4860  000CD0  6EF7               	movwf	tblptrh,c
  4861  000CD2                     	if	0	;tblptru may be non-zero
  4862  000CD2                     	endif
  4863  000CD2                     	if	0	;tblptru may be non-zero
  4864  000CD2                     	endif
  4865  000CD2  0008               	tblrd		*
  4866  000CD4  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4867  000CD8  0ED0               	movlw	208
  4868  000CDA  2424               	addwf	??_GetMcuFwVersion,w,c
  4869  000CDC  6E18               	movwf	___wmul@multiplier,c
  4870  000CDE  6A19               	clrf	___wmul@multiplier+1,c
  4871  000CE0  0EFF               	movlw	255
  4872  000CE2  2219               	addwfc	___wmul@multiplier+1,f,c
  4873  000CE4  0E00               	movlw	0
  4874  000CE6  6E1B               	movwf	___wmul@multiplicand+1,c
  4875  000CE8  0E0A               	movlw	10
  4876  000CEA  6E1A               	movwf	___wmul@multiplicand,c
  4877  000CEC  ECFC  F020         	call	___wmul	;wreg free
  4878  000CF0  C018  F078         	movff	?___wmul,_GetMcuFwVersion$2692
  4879  000CF4  C019  F079         	movff	?___wmul+1,_GetMcuFwVersion$2692+1
  4880  000CF8                     l1515:
  4881  000CF8  0E95               	movlw	low (STR_1+5)
  4882  000CFA  6EF6               	movwf	tblptrl,c
  4883  000CFC  0E06               	movlw	high (STR_1+5)
  4884  000CFE  6EF7               	movwf	tblptrh,c
  4885  000D00                     	if	0	;tblptru may be non-zero
  4886  000D00                     	endif
  4887  000D00                     	if	0	;tblptru may be non-zero
  4888  000D00                     	endif
  4889  000D00  0008               	tblrd		*
  4890  000D02  50F5               	movf	tablat,w,c
  4891  000D04  0100               	movlb	0	; () banked
  4892  000D06  2578               	addwf	_GetMcuFwVersion$2692& (0+255),w,b
  4893  000D08  0FD0               	addlw	208
  4894  000D0A  6F6E               	movwf	(GetMcuFwVersion@TxMsg+10)& (0+255),b
  4895                           
  4896                           ; BSR set to: 0
  4897                           ;SystemStatus.c: 42: TxMsg[(0x4) + 7] = ((("16:42:54"[0] - '0') * 10 + "16:42:54"[1] - '
      +                          0') & 0xFF00) >> 8;
  4898  000D0C  0ED0               	movlw	208
  4899  000D0E  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4900  000D10  0EFF               	movlw	255
  4901  000D12  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4902  000D14  0E9C               	movlw	low STR_18
  4903  000D16  6EF6               	movwf	tblptrl,c
  4904  000D18                     	if	1	;There is more than 1 active tblptr byte
  4905  000D18  0E06               	movlw	high STR_18
  4906  000D1A  6EF7               	movwf	tblptrh,c
  4907  000D1C                     	endif
  4908  000D1C                     	if	0	;There are less than 3 active tblptr bytes
  4909  000D1C                     	endif
  4910  000D1C  0008               	tblrd		*
  4911  000D1E  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4912  000D22  0ED0               	movlw	208
  4913  000D24  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4914  000D26  6E18               	movwf	___wmul@multiplier,c
  4915  000D28  6A19               	clrf	___wmul@multiplier+1,c
  4916  000D2A  0EFF               	movlw	255
  4917  000D2C  2219               	addwfc	___wmul@multiplier+1,f,c
  4918  000D2E  0E00               	movlw	0
  4919  000D30  6E1B               	movwf	___wmul@multiplicand+1,c
  4920  000D32  0E0A               	movlw	10
  4921  000D34  6E1A               	movwf	___wmul@multiplicand,c
  4922  000D36  ECFC  F020         	call	___wmul	;wreg free
  4923  000D3A  0E9D               	movlw	low (STR_18+1)
  4924  000D3C  6EF6               	movwf	tblptrl,c
  4925  000D3E  0E06               	movlw	high (STR_18+1)
  4926  000D40  6EF7               	movwf	tblptrh,c
  4927  000D42                     	if	0	;tblptru may be non-zero
  4928  000D42                     	endif
  4929  000D42                     	if	0	;tblptru may be non-zero
  4930  000D42                     	endif
  4931  000D42  0008               	tblrd		*
  4932  000D44  50F5               	movf	tablat,w,c
  4933  000D46  2618               	addwf	?___wmul,f,c
  4934  000D48  0E00               	movlw	0
  4935  000D4A  2219               	addwfc	?___wmul+1,f,c
  4936  000D4C  5024               	movf	??_GetMcuFwVersion,w,c
  4937  000D4E  2618               	addwf	?___wmul,f,c
  4938  000D50  5025               	movf	??_GetMcuFwVersion+1,w,c
  4939  000D52  2219               	addwfc	?___wmul+1,f,c
  4940  000D54  C019  F018         	movff	?___wmul+1,?___wmul
  4941  000D58  6A19               	clrf	?___wmul+1,c
  4942  000D5A  5018               	movf	?___wmul,w,c
  4943  000D5C  0100               	movlb	0	; () banked
  4944  000D5E  6F6F               	movwf	(GetMcuFwVersion@TxMsg+11)& (0+255),b
  4945                           
  4946                           ; BSR set to: 0
  4947                           ;SystemStatus.c: 43: TxMsg[(0x4) + 8] = (("16:42:54"[0] - '0') * 10 + "16:42:54"[1] - '0
      +                          ') & 0xFF;
  4948  000D60  0E9D               	movlw	low (STR_18+1)
  4949  000D62  6EF6               	movwf	tblptrl,c
  4950  000D64  0E06               	movlw	high (STR_18+1)
  4951  000D66  6EF7               	movwf	tblptrh,c
  4952  000D68                     	if	0	;tblptru may be non-zero
  4953  000D68                     	endif
  4954  000D68                     	if	0	;tblptru may be non-zero
  4955  000D68                     	endif
  4956  000D68  0008               	tblrd		*
  4957  000D6A  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4958  000D6E  0E9C               	movlw	low STR_18
  4959  000D70  6EF6               	movwf	tblptrl,c
  4960  000D72                     	if	1	;There is more than 1 active tblptr byte
  4961  000D72  0E06               	movlw	high STR_18
  4962  000D74  6EF7               	movwf	tblptrh,c
  4963  000D76                     	endif
  4964  000D76                     	if	0	;There are less than 3 active tblptr bytes
  4965  000D76                     	endif
  4966  000D76  0008               	tblrd		*
  4967  000D78  50F5               	movf	tablat,w,c
  4968  000D7A  0FD0               	addlw	208
  4969  000D7C  0D0A               	mullw	10
  4970  000D7E  50F3               	movf	prodl,w,c
  4971  000D80  2424               	addwf	??_GetMcuFwVersion,w,c
  4972  000D82  0FD0               	addlw	208
  4973  000D84  6F70               	movwf	(GetMcuFwVersion@TxMsg+12)& (0+255),b
  4974                           
  4975                           ; BSR set to: 0
  4976                           ;SystemStatus.c: 46: TxMsg[(0x4) + 9] = ((("16:42:54"[3] - '0') * 10 + "16:42:54"[4] - '
      +                          0') & 0xFF00) >> 8;
  4977  000D86  0ED0               	movlw	208
  4978  000D88  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4979  000D8A  0EFF               	movlw	255
  4980  000D8C  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4981  000D8E  0E9F               	movlw	low (STR_18+3)
  4982  000D90  6EF6               	movwf	tblptrl,c
  4983  000D92  0E06               	movlw	high (STR_18+3)
  4984  000D94  6EF7               	movwf	tblptrh,c
  4985  000D96                     	if	0	;tblptru may be non-zero
  4986  000D96                     	endif
  4987  000D96                     	if	0	;tblptru may be non-zero
  4988  000D96                     	endif
  4989  000D96  0008               	tblrd		*
  4990  000D98  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4991  000D9C  0ED0               	movlw	208
  4992  000D9E  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4993  000DA0  6E18               	movwf	___wmul@multiplier,c
  4994  000DA2  6A19               	clrf	___wmul@multiplier+1,c
  4995  000DA4  0EFF               	movlw	255
  4996  000DA6  2219               	addwfc	___wmul@multiplier+1,f,c
  4997  000DA8  0E00               	movlw	0
  4998  000DAA  6E1B               	movwf	___wmul@multiplicand+1,c
  4999  000DAC  0E0A               	movlw	10
  5000  000DAE  6E1A               	movwf	___wmul@multiplicand,c
  5001  000DB0  ECFC  F020         	call	___wmul	;wreg free
  5002  000DB4  0EA0               	movlw	low (STR_18+4)
  5003  000DB6  6EF6               	movwf	tblptrl,c
  5004  000DB8  0E06               	movlw	high (STR_18+4)
  5005  000DBA  6EF7               	movwf	tblptrh,c
  5006  000DBC                     	if	0	;tblptru may be non-zero
  5007  000DBC                     	endif
  5008  000DBC                     	if	0	;tblptru may be non-zero
  5009  000DBC                     	endif
  5010  000DBC  0008               	tblrd		*
  5011  000DBE  50F5               	movf	tablat,w,c
  5012  000DC0  2618               	addwf	?___wmul,f,c
  5013  000DC2  0E00               	movlw	0
  5014  000DC4  2219               	addwfc	?___wmul+1,f,c
  5015  000DC6  5024               	movf	??_GetMcuFwVersion,w,c
  5016  000DC8  2618               	addwf	?___wmul,f,c
  5017  000DCA  5025               	movf	??_GetMcuFwVersion+1,w,c
  5018  000DCC  2219               	addwfc	?___wmul+1,f,c
  5019  000DCE  C019  F018         	movff	?___wmul+1,?___wmul
  5020  000DD2  6A19               	clrf	?___wmul+1,c
  5021  000DD4  5018               	movf	?___wmul,w,c
  5022  000DD6  0100               	movlb	0	; () banked
  5023  000DD8  6F71               	movwf	(GetMcuFwVersion@TxMsg+13)& (0+255),b
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;SystemStatus.c: 47: TxMsg[(0x4) + 10] = (("16:42:54"[3] - '0') * 10 + "16:42:54"[4] - '
      +                          0') & 0xFF;
  5027  000DDA  0EA0               	movlw	low (STR_18+4)
  5028  000DDC  6EF6               	movwf	tblptrl,c
  5029  000DDE  0E06               	movlw	high (STR_18+4)
  5030  000DE0  6EF7               	movwf	tblptrh,c
  5031  000DE2                     	if	0	;tblptru may be non-zero
  5032  000DE2                     	endif
  5033  000DE2                     	if	0	;tblptru may be non-zero
  5034  000DE2                     	endif
  5035  000DE2  0008               	tblrd		*
  5036  000DE4  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  5037  000DE8  0E9F               	movlw	low (STR_18+3)
  5038  000DEA  6EF6               	movwf	tblptrl,c
  5039  000DEC  0E06               	movlw	high (STR_18+3)
  5040  000DEE  6EF7               	movwf	tblptrh,c
  5041  000DF0                     	if	0	;tblptru may be non-zero
  5042  000DF0                     	endif
  5043  000DF0                     	if	0	;tblptru may be non-zero
  5044  000DF0                     	endif
  5045  000DF0  0008               	tblrd		*
  5046  000DF2  50F5               	movf	tablat,w,c
  5047  000DF4  0FD0               	addlw	208
  5048  000DF6  0D0A               	mullw	10
  5049  000DF8  50F3               	movf	prodl,w,c
  5050  000DFA  2424               	addwf	??_GetMcuFwVersion,w,c
  5051  000DFC  0FD0               	addlw	208
  5052  000DFE  6F72               	movwf	(GetMcuFwVersion@TxMsg+14)& (0+255),b
  5053                           
  5054                           ; BSR set to: 0
  5055                           ;SystemStatus.c: 49: TxMsg[(0x4) + 11] = ((("16:42:54"[6] - '0') * 10 + "16:42:54"[7] - 
      +                          '0') & 0xFF00) >> 8;
  5056  000E00  0ED0               	movlw	208
  5057  000E02  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  5058  000E04  0EFF               	movlw	255
  5059  000E06  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  5060  000E08  0EA2               	movlw	low (STR_18+6)
  5061  000E0A  6EF6               	movwf	tblptrl,c
  5062  000E0C  0E06               	movlw	high (STR_18+6)
  5063  000E0E  6EF7               	movwf	tblptrh,c
  5064  000E10                     	if	0	;tblptru may be non-zero
  5065  000E10                     	endif
  5066  000E10                     	if	0	;tblptru may be non-zero
  5067  000E10                     	endif
  5068  000E10  0008               	tblrd		*
  5069  000E12  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  5070  000E16  0ED0               	movlw	208
  5071  000E18  2426               	addwf	??_GetMcuFwVersion+2,w,c
  5072  000E1A  6E18               	movwf	___wmul@multiplier,c
  5073  000E1C  6A19               	clrf	___wmul@multiplier+1,c
  5074  000E1E  0EFF               	movlw	255
  5075  000E20  2219               	addwfc	___wmul@multiplier+1,f,c
  5076  000E22  0E00               	movlw	0
  5077  000E24  6E1B               	movwf	___wmul@multiplicand+1,c
  5078  000E26  0E0A               	movlw	10
  5079  000E28  6E1A               	movwf	___wmul@multiplicand,c
  5080  000E2A  ECFC  F020         	call	___wmul	;wreg free
  5081  000E2E  0EA3               	movlw	low (STR_18+7)
  5082  000E30  6EF6               	movwf	tblptrl,c
  5083  000E32  0E06               	movlw	high (STR_18+7)
  5084  000E34  6EF7               	movwf	tblptrh,c
  5085  000E36                     	if	0	;tblptru may be non-zero
  5086  000E36                     	endif
  5087  000E36                     	if	0	;tblptru may be non-zero
  5088  000E36                     	endif
  5089  000E36  0008               	tblrd		*
  5090  000E38  50F5               	movf	tablat,w,c
  5091  000E3A  2618               	addwf	?___wmul,f,c
  5092  000E3C  0E00               	movlw	0
  5093  000E3E  2219               	addwfc	?___wmul+1,f,c
  5094  000E40  5024               	movf	??_GetMcuFwVersion,w,c
  5095  000E42  2618               	addwf	?___wmul,f,c
  5096  000E44  5025               	movf	??_GetMcuFwVersion+1,w,c
  5097  000E46  2219               	addwfc	?___wmul+1,f,c
  5098  000E48  C019  F018         	movff	?___wmul+1,?___wmul
  5099  000E4C  6A19               	clrf	?___wmul+1,c
  5100  000E4E  5018               	movf	?___wmul,w,c
  5101  000E50  0100               	movlb	0	; () banked
  5102  000E52  6F73               	movwf	(GetMcuFwVersion@TxMsg+15)& (0+255),b
  5103                           
  5104                           ; BSR set to: 0
  5105                           ;SystemStatus.c: 50: TxMsg[(0x4) + 12] = (("16:42:54"[6] - '0') * 10 + "16:42:54"[7] - '
      +                          0') & 0xFF;
  5106  000E54  0EA3               	movlw	low (STR_18+7)
  5107  000E56  6EF6               	movwf	tblptrl,c
  5108  000E58  0E06               	movlw	high (STR_18+7)
  5109  000E5A  6EF7               	movwf	tblptrh,c
  5110  000E5C                     	if	0	;tblptru may be non-zero
  5111  000E5C                     	endif
  5112  000E5C                     	if	0	;tblptru may be non-zero
  5113  000E5C                     	endif
  5114  000E5C  0008               	tblrd		*
  5115  000E5E  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  5116  000E62  0EA2               	movlw	low (STR_18+6)
  5117  000E64  6EF6               	movwf	tblptrl,c
  5118  000E66  0E06               	movlw	high (STR_18+6)
  5119  000E68  6EF7               	movwf	tblptrh,c
  5120  000E6A                     	if	0	;tblptru may be non-zero
  5121  000E6A                     	endif
  5122  000E6A                     	if	0	;tblptru may be non-zero
  5123  000E6A                     	endif
  5124  000E6A  0008               	tblrd		*
  5125  000E6C  50F5               	movf	tablat,w,c
  5126  000E6E  0FD0               	addlw	208
  5127  000E70  0D0A               	mullw	10
  5128  000E72  50F3               	movf	prodl,w,c
  5129  000E74  2424               	addwf	??_GetMcuFwVersion,w,c
  5130  000E76  0FD0               	addlw	208
  5131  000E78  6F74               	movwf	(GetMcuFwVersion@TxMsg+16)& (0+255),b
  5132                           
  5133                           ; BSR set to: 0
  5134                           ;SystemStatus.c: 52: TxMsg[(13) + (0x4)] = crc8(TxMsg, (13) + (0x4));
  5135  000E7A  0E64               	movlw	low GetMcuFwVersion@TxMsg
  5136  000E7C  6E18               	movwf	crc8@dataArray,c
  5137  000E7E  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5138  000E80  6E19               	movwf	crc8@dataArray+1,c
  5139  000E82  0E00               	movlw	0
  5140  000E84  6E1B               	movwf	crc8@dataSize+1,c
  5141  000E86  0E11               	movlw	17
  5142  000E88  6E1A               	movwf	crc8@dataSize,c
  5143  000E8A  EC0E  F01E         	call	_crc8	;wreg free
  5144  000E8E  0100               	movlb	0	; () banked
  5145  000E90  6F75               	movwf	(GetMcuFwVersion@TxMsg+17)& (0+255),b
  5146                           
  5147                           ;SystemStatus.c: 54: WriteUartMessage(TxMsg, (13) + (0x4) + 1);
  5148  000E92  0E64               	movlw	low GetMcuFwVersion@TxMsg
  5149  000E94  6E19               	movwf	WriteUartMessage@dataBuf,c
  5150  000E96  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5151  000E98  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5152  000E9A  0E00               	movlw	0
  5153  000E9C  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5154  000E9E  0E12               	movlw	18
  5155  000EA0  6E1B               	movwf	WriteUartMessage@dataSize,c
  5156  000EA2  ECA1  F01F         	call	_WriteUartMessage	;wreg free
  5157  000EA6  0012               	return		;funcret
  5158  000EA8                     __end_of_GetMcuFwVersion:
  5159                           	opt stack 0
  5160                           tosu	equ	0xFFF
  5161                           tosh	equ	0xFFE
  5162                           tosl	equ	0xFFD
  5163                           pclath	equ	0xFFA
  5164                           tblptru	equ	0xFF8
  5165                           tblptrh	equ	0xFF7
  5166                           tblptrl	equ	0xFF6
  5167                           tablat	equ	0xFF5
  5168                           prodh	equ	0xFF4
  5169                           prodl	equ	0xFF3
  5170                           postinc0	equ	0xFEE
  5171                           plusw0	equ	0xFEB
  5172                           wreg	equ	0xFE8
  5173                           postdec1	equ	0xFE5
  5174                           fsr1l	equ	0xFE1
  5175                           indf2	equ	0xFDF
  5176                           postinc2	equ	0xFDE
  5177                           plusw2	equ	0xFDB
  5178                           fsr2h	equ	0xFDA
  5179                           fsr2l	equ	0xFD9
  5180                           status	equ	0xFD8
  5181                           
  5182 ;; *************** function _FlashReadUart *****************
  5183 ;; Defined at:
  5184 ;;		line 62 in file "FlashApp.c"
  5185 ;; Parameters:    Size  Location     Type
  5186 ;;  data            2   39[BANK0 ] PTR unsigned char 
  5187 ;; Auto vars:     Size  Location     Type
  5188 ;;  idx             2   87[BANK2 ] int 
  5189 ;;  TxMsg          69    0[BANK2 ] unsigned char [69]
  5190 ;;  val             8   69[BANK2 ] struct .
  5191 ;;  numOfSampleT    2   91[BANK2 ] int 
  5192 ;;  offset          2   89[BANK2 ] int 
  5193 ;;  j               2   85[BANK2 ] int 
  5194 ;; Return value:  Size  Location     Type
  5195 ;;                  1    wreg      void 
  5196 ;; Registers used:
  5197 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5198 ;; Tracked objects:
  5199 ;;		On entry : 0/0
  5200 ;;		On exit  : 0/0
  5201 ;;		Unchanged: 0/0
  5202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5203 ;;      Params:         0       2       0       0       0       0       0
  5204 ;;      Locals:         0       0       0      93       0       0       0
  5205 ;;      Temps:          0      12       0       0       0       0       0
  5206 ;;      Totals:         0      14       0      93       0       0       0
  5207 ;;Total ram usage:      107 bytes
  5208 ;; Hardware stack levels used:    1
  5209 ;; Hardware stack levels required when called:    8
  5210 ;; This function calls:
  5211 ;;		_FLASH_IsWriteDone
  5212 ;;		_FLASH_ReadByte
  5213 ;;		_GetIntFromUartData
  5214 ;;		_SendAckMessage
  5215 ;;		_WriteUartMessage
  5216 ;;		_ZeroArray
  5217 ;;		_abs
  5218 ;;		_crc8
  5219 ;; This function is called by:
  5220 ;;		_GroupFlashMemory
  5221 ;; This function uses a non-reentrant model
  5222 ;;
  5223                           
  5224                           	psect	text15
  5225  0006A6                     __ptext15:
  5226                           	opt stack 0
  5227  0006A6                     _FlashReadUart:
  5228                           	opt stack 20
  5229                           
  5230                           ;FlashApp.c: 65: int j=0;
  5231                           
  5232                           ;incstack = 0
  5233  0006A6  0E00               	movlw	0
  5234  0006A8  0102               	movlb	2	; () banked
  5235  0006AA  6F56               	movwf	(FlashReadUart@j+1)& (0+255),b
  5236  0006AC  0E00               	movlw	0
  5237  0006AE  6F55               	movwf	FlashReadUart@j& (0+255),b
  5238                           
  5239                           ;FlashApp.c: 66: int offset = 0;
  5240  0006B0  0E00               	movlw	0
  5241  0006B2  6F5A               	movwf	(FlashReadUart@offset+1)& (0+255),b
  5242  0006B4  0E00               	movlw	0
  5243  0006B6  6F59               	movwf	FlashReadUart@offset& (0+255),b
  5244                           
  5245                           ; BSR set to: 2
  5246                           ;FlashApp.c: 68: INT_VAL val = GetIntFromUartData(10, data);
  5247  0006B8  C087  F066         	movff	FlashReadUart@data,GetIntFromUartData@data
  5248  0006BC  C088  F067         	movff	FlashReadUart@data+1,GetIntFromUartData@data+1
  5249  0006C0  0E0A               	movlw	10
  5250  0006C2  ECF0  F00E         	call	_GetIntFromUartData
  5251  0006C6  EE22  F045         	lfsr	2,FlashReadUart@val
  5252  0006CA  0E07               	movlw	7
  5253  0006CC                     u8671:
  5254  0006CC  CFEB FFDB          	movff	plusw0,plusw2
  5255  0006D0  06E8               	decf	wreg,f,c
  5256  0006D2  E2FC               	bc	u8671
  5257                           
  5258                           ;FlashApp.c: 69: int numOfSampleToRead = val.num;
  5259  0006D4  C245  F25B         	movff	FlashReadUart@val,FlashReadUart@numOfSampleToRead
  5260  0006D8  C246  F25C         	movff	FlashReadUart@val+1,FlashReadUart@numOfSampleToRead+1
  5261                           
  5262                           ;FlashApp.c: 71: char TxMsg[(64) + (0x4) + 1];
  5263                           ;FlashApp.c: 72: ZeroArray(TxMsg, (64) + (0x4) + 1);
  5264  0006DC  0E00               	movlw	low FlashReadUart@TxMsg
  5265  0006DE  6E20               	movwf	ZeroArray@array,c
  5266  0006E0  0E02               	movlw	high FlashReadUart@TxMsg
  5267  0006E2  6E21               	movwf	ZeroArray@array+1,c
  5268  0006E4  0E00               	movlw	0
  5269  0006E6  6E23               	movwf	ZeroArray@size+1,c
  5270  0006E8  0E45               	movlw	69
  5271  0006EA  6E22               	movwf	ZeroArray@size,c
  5272  0006EC  EC95  F021         	call	_ZeroArray	;wreg free
  5273                           
  5274                           ;FlashApp.c: 75: if (FLASH_IsWriteDone() == 0)
  5275  0006F0  EC33  F022         	call	_FLASH_IsWriteDone	;wreg free
  5276  0006F4  0900               	iorlw	0
  5277  0006F6  B4D8               	btfsc	status,2,c
  5278  0006F8  0012               	return	
  5279                           
  5280                           ;FlashApp.c: 78: }
  5281                           ;FlashApp.c: 80: if (numOfReadSamples)
  5282                           
  5283                           ;FlashApp.c: 76: {
  5284                           ;FlashApp.c: 77: return;
  5285  0006FA  503C               	movf	_numOfReadSamples,w,c
  5286  0006FC  103D               	iorwf	_numOfReadSamples+1,w,c
  5287  0006FE  103E               	iorwf	_numOfReadSamples+2,w,c
  5288  000700  103F               	iorwf	_numOfReadSamples+3,w,c
  5289  000702  B4D8               	btfsc	status,2,c
  5290  000704  D0FB               	goto	l326
  5291                           
  5292                           ;FlashApp.c: 81: {
  5293                           ;FlashApp.c: 82: if (numOfValidateSamples)
  5294  000706  5031               	movf	_numOfValidateSamples,w,c
  5295  000708  1032               	iorwf	_numOfValidateSamples+1,w,c
  5296  00070A  1033               	iorwf	_numOfValidateSamples+2,w,c
  5297  00070C  1034               	iorwf	_numOfValidateSamples+3,w,c
  5298  00070E  B4D8               	btfsc	status,2,c
  5299  000710  D0A4               	goto	l327
  5300                           
  5301                           ;FlashApp.c: 83: {
  5302                           ;FlashApp.c: 84: offset = numOfValidateSamples - (numOfValidateSamples > numOfSampleToRe
      +                          ad)? numOfValidateSamples : numOfSampleToRead;
  5303  000712  C25B  F089         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  5304  000716  C25C  F08A         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  5305  00071A  0E00               	movlw	0
  5306  00071C  0100               	movlb	0	; () banked
  5307  00071E  BF8A               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5308  000720  0EFF               	movlw	255
  5309  000722  6F8B               	movwf	(??_FlashReadUart+2)& (0+255),b
  5310  000724  6F8C               	movwf	(??_FlashReadUart+3)& (0+255),b
  5311  000726  5031               	movf	_numOfValidateSamples,w,c
  5312  000728  5D89               	subwf	??_FlashReadUart& (0+255),w,b
  5313  00072A  5032               	movf	_numOfValidateSamples+1,w,c
  5314  00072C  598A               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  5315  00072E  5033               	movf	_numOfValidateSamples+2,w,c
  5316  000730  598B               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  5317  000732  5034               	movf	_numOfValidateSamples+3,w,c
  5318  000734  598C               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  5319  000736  B0D8               	btfsc	status,0,c
  5320  000738  D002               	goto	u8710
  5321  00073A  0E01               	movlw	1
  5322  00073C  D001               	goto	u8720
  5323  00073E                     u8710:
  5324  00073E  0E00               	movlw	0
  5325  000740                     u8720:
  5326  000740  6F8D               	movwf	(??_FlashReadUart+4)& (0+255),b
  5327  000742  6B8E               	clrf	(??_FlashReadUart+5)& (0+255),b
  5328  000744  6B8F               	clrf	(??_FlashReadUart+6)& (0+255),b
  5329  000746  6B90               	clrf	(??_FlashReadUart+7)& (0+255),b
  5330  000748  1F8D               	comf	(??_FlashReadUart+4)& (0+255),f,b
  5331  00074A  1F8E               	comf	(??_FlashReadUart+5)& (0+255),f,b
  5332  00074C  1F8F               	comf	(??_FlashReadUart+6)& (0+255),f,b
  5333  00074E  1F90               	comf	(??_FlashReadUart+7)& (0+255),f,b
  5334  000750  2B8D               	incf	(??_FlashReadUart+4)& (0+255),f,b
  5335  000752  0E00               	movlw	0
  5336  000754  238E               	addwfc	(??_FlashReadUart+5)& (0+255),f,b
  5337  000756  238F               	addwfc	(??_FlashReadUart+6)& (0+255),f,b
  5338  000758  2390               	addwfc	(??_FlashReadUart+7)& (0+255),f,b
  5339  00075A  5031               	movf	_numOfValidateSamples,w,c
  5340  00075C  258D               	addwf	(??_FlashReadUart+4)& (0+255),w,b
  5341  00075E  6F91               	movwf	(??_FlashReadUart+8)& (0+255),b
  5342  000760  5032               	movf	_numOfValidateSamples+1,w,c
  5343  000762  218E               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  5344  000764  6F92               	movwf	(??_FlashReadUart+9)& (0+255),b
  5345  000766  5033               	movf	_numOfValidateSamples+2,w,c
  5346  000768  218F               	addwfc	(??_FlashReadUart+6)& (0+255),w,b
  5347  00076A  6F93               	movwf	(??_FlashReadUart+10)& (0+255),b
  5348  00076C  5034               	movf	_numOfValidateSamples+3,w,c
  5349  00076E  2190               	addwfc	(??_FlashReadUart+7)& (0+255),w,b
  5350  000770  6F94               	movwf	(??_FlashReadUart+11)& (0+255),b
  5351  000772  5191               	movf	(??_FlashReadUart+8)& (0+255),w,b
  5352  000774  1192               	iorwf	(??_FlashReadUart+9)& (0+255),w,b
  5353  000776  1193               	iorwf	(??_FlashReadUart+10)& (0+255),w,b
  5354  000778  1194               	iorwf	(??_FlashReadUart+11)& (0+255),w,b
  5355  00077A  A4D8               	btfss	status,2,c
  5356  00077C  D00B               	goto	l329
  5357                           
  5358                           ; BSR set to: 0
  5359  00077E  C25B  F24D         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$609
  5360  000782  C25C  F24E         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$609+1
  5361  000786  0102               	movlb	2	; () banked
  5362  000788  0E00               	movlw	0
  5363  00078A  BF4E               	btfsc	(_FlashReadUart$609+1)& (0+255),7,b
  5364  00078C  0EFF               	movlw	-1
  5365  00078E  6F4F               	movwf	(_FlashReadUart$609+2)& (0+255),b
  5366  000790  6F50               	movwf	(_FlashReadUart$609+3)& (0+255),b
  5367  000792  D008               	goto	l331
  5368  000794                     l329:
  5369                           
  5370                           ; BSR set to: 0
  5371  000794  C031  F24D         	movff	_numOfValidateSamples,_FlashReadUart$609
  5372  000798  C032  F24E         	movff	_numOfValidateSamples+1,_FlashReadUart$609+1
  5373  00079C  C033  F24F         	movff	_numOfValidateSamples+2,_FlashReadUart$609+2
  5374  0007A0  C034  F250         	movff	_numOfValidateSamples+3,_FlashReadUart$609+3
  5375  0007A4                     l331:
  5376  0007A4  C24D  F259         	movff	_FlashReadUart$609,FlashReadUart@offset
  5377  0007A8  C24E  F25A         	movff	_FlashReadUart$609+1,FlashReadUart@offset+1
  5378                           
  5379                           ;FlashApp.c: 85: if(offset < 0)
  5380  0007AC  0102               	movlb	2	; () banked
  5381  0007AE  AF5A               	btfss	(FlashReadUart@offset+1)& (0+255),7,b
  5382  0007B0  D09B               	goto	l334
  5383                           
  5384                           ; BSR set to: 2
  5385                           ;FlashApp.c: 86: {
  5386                           ;FlashApp.c: 87: if (abs(offset) > numOfReadSamples)
  5387  0007B2  C259  F018         	movff	FlashReadUart@offset,abs@a
  5388  0007B6  C25A  F019         	movff	FlashReadUart@offset+1,abs@a+1
  5389  0007BA  ECAE  F020         	call	_abs	;wreg free
  5390  0007BE  C018  F089         	movff	?_abs,??_FlashReadUart
  5391  0007C2  C019  F08A         	movff	?_abs+1,??_FlashReadUart+1
  5392  0007C6  0E00               	movlw	0
  5393  0007C8  0100               	movlb	0	; () banked
  5394  0007CA  BF8A               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5395  0007CC  0EFF               	movlw	255
  5396  0007CE  6F8B               	movwf	(??_FlashReadUart+2)& (0+255),b
  5397  0007D0  6F8C               	movwf	(??_FlashReadUart+3)& (0+255),b
  5398  0007D2  5189               	movf	??_FlashReadUart& (0+255),w,b
  5399  0007D4  5C3C               	subwf	_numOfReadSamples,w,c
  5400  0007D6  518A               	movf	(??_FlashReadUart+1)& (0+255),w,b
  5401  0007D8  583D               	subwfb	_numOfReadSamples+1,w,c
  5402  0007DA  518B               	movf	(??_FlashReadUart+2)& (0+255),w,b
  5403  0007DC  583E               	subwfb	_numOfReadSamples+2,w,c
  5404  0007DE  518C               	movf	(??_FlashReadUart+3)& (0+255),w,b
  5405  0007E0  583F               	subwfb	_numOfReadSamples+3,w,c
  5406  0007E2  B0D8               	btfsc	status,0,c
  5407  0007E4  D01E               	goto	l333
  5408                           
  5409                           ; BSR set to: 0
  5410                           ;FlashApp.c: 88: {
  5411                           ;FlashApp.c: 89: numOfSampleToRead += offset + numOfReadSamples;
  5412  0007E6  503C               	movf	_numOfReadSamples,w,c
  5413  0007E8  0102               	movlb	2	; () banked
  5414  0007EA  2559               	addwf	FlashReadUart@offset& (0+255),w,b
  5415  0007EC  0100               	movlb	0	; () banked
  5416  0007EE  6F89               	movwf	??_FlashReadUart& (0+255),b
  5417  0007F0  503D               	movf	_numOfReadSamples+1,w,c
  5418  0007F2  0102               	movlb	2	; () banked
  5419  0007F4  215A               	addwfc	(FlashReadUart@offset+1)& (0+255),w,b
  5420  0007F6  0100               	movlb	0	; () banked
  5421  0007F8  6F8A               	movwf	(??_FlashReadUart+1)& (0+255),b
  5422  0007FA  5189               	movf	??_FlashReadUart& (0+255),w,b
  5423  0007FC  0102               	movlb	2	; () banked
  5424  0007FE  275B               	addwf	FlashReadUart@numOfSampleToRead& (0+255),f,b
  5425  000800  0100               	movlb	0	; () banked
  5426  000802  518A               	movf	(??_FlashReadUart+1)& (0+255),w,b
  5427  000804  0102               	movlb	2	; () banked
  5428  000806  235C               	addwfc	(FlashReadUart@numOfSampleToRead+1)& (0+255),f,b
  5429                           
  5430                           ; BSR set to: 2
  5431                           ;FlashApp.c: 90: offset = numOfReadSamples * (-1);
  5432  000808  C03C  F089         	movff	_numOfReadSamples,??_FlashReadUart
  5433  00080C  C03D  F08A         	movff	_numOfReadSamples+1,??_FlashReadUart+1
  5434  000810  0100               	movlb	0	; () banked
  5435  000812  1F89               	comf	??_FlashReadUart& (0+255),f,b
  5436  000814  1F8A               	comf	(??_FlashReadUart+1)& (0+255),f,b
  5437  000816  4B89               	infsnz	??_FlashReadUart& (0+255),f,b
  5438  000818  2B8A               	incf	(??_FlashReadUart+1)& (0+255),f,b
  5439  00081A  C089  F259         	movff	??_FlashReadUart,FlashReadUart@offset
  5440  00081E  C08A  F25A         	movff	??_FlashReadUart+1,FlashReadUart@offset+1
  5441  000822                     l333:
  5442                           
  5443                           ; BSR set to: 0
  5444                           ;FlashApp.c: 92: }
  5445                           ;FlashApp.c: 94: readAddress += offset * (64);
  5446  000822  C259  F089         	movff	FlashReadUart@offset,??_FlashReadUart
  5447  000826  C25A  F08A         	movff	FlashReadUart@offset+1,??_FlashReadUart+1
  5448  00082A  0E06               	movlw	6
  5449  00082C                     u8765:
  5450  00082C  90D8               	bcf	status,0,c
  5451  00082E  3789               	rlcf	??_FlashReadUart& (0+255),f,b
  5452  000830  378A               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  5453  000832  2EE8               	decfsz	wreg,f,c
  5454  000834  D7FB               	goto	u8765
  5455  000836  C089  F08B         	movff	??_FlashReadUart,??_FlashReadUart+2
  5456  00083A  C08A  F08C         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  5457  00083E  0E00               	movlw	0
  5458  000840  BF8C               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  5459  000842  0EFF               	movlw	255
  5460  000844  6F8D               	movwf	(??_FlashReadUart+4)& (0+255),b
  5461  000846  6F8E               	movwf	(??_FlashReadUart+5)& (0+255),b
  5462  000848  518B               	movf	(??_FlashReadUart+2)& (0+255),w,b
  5463  00084A  27F4               	addwf	_readAddress& (0+255),f,b
  5464  00084C  518C               	movf	(??_FlashReadUart+3)& (0+255),w,b
  5465  00084E  23F5               	addwfc	(_readAddress+1)& (0+255),f,b
  5466  000850  518D               	movf	(??_FlashReadUart+4)& (0+255),w,b
  5467  000852  23F6               	addwfc	(_readAddress+2)& (0+255),f,b
  5468  000854  518E               	movf	(??_FlashReadUart+5)& (0+255),w,b
  5469  000856  23F7               	addwfc	(_readAddress+3)& (0+255),f,b
  5470                           
  5471                           ; BSR set to: 0
  5472                           ;FlashApp.c: 95: }
  5473                           ;FlashApp.c: 96: }
  5474  000858  D047               	goto	l334
  5475  00085A                     l327:
  5476                           
  5477                           ;FlashApp.c: 97: else
  5478                           ;FlashApp.c: 98: {
  5479                           ;FlashApp.c: 99: numOfSampleToRead = (numOfReadSamples > numOfSampleToRead)? numOfSample
      +                          ToRead : numOfReadSamples;
  5480                           
  5481                           ; BSR set to: 0
  5482  00085A  C25B  F089         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  5483  00085E  C25C  F08A         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  5484  000862  0E00               	movlw	0
  5485  000864  0100               	movlb	0	; () banked
  5486  000866  BF8A               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5487  000868  0EFF               	movlw	255
  5488  00086A  6F8B               	movwf	(??_FlashReadUart+2)& (0+255),b
  5489  00086C  6F8C               	movwf	(??_FlashReadUart+3)& (0+255),b
  5490  00086E  503C               	movf	_numOfReadSamples,w,c
  5491  000870  5D89               	subwf	??_FlashReadUart& (0+255),w,b
  5492  000872  503D               	movf	_numOfReadSamples+1,w,c
  5493  000874  598A               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  5494  000876  503E               	movf	_numOfReadSamples+2,w,c
  5495  000878  598B               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  5496  00087A  503F               	movf	_numOfReadSamples+3,w,c
  5497  00087C  598C               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  5498  00087E  A0D8               	btfss	status,0,c
  5499  000880  D009               	goto	l336
  5500                           
  5501                           ; BSR set to: 0
  5502  000882  C03C  F251         	movff	_numOfReadSamples,_FlashReadUart$610
  5503  000886  C03D  F252         	movff	_numOfReadSamples+1,_FlashReadUart$610+1
  5504  00088A  C03E  F253         	movff	_numOfReadSamples+2,_FlashReadUart$610+2
  5505  00088E  C03F  F254         	movff	_numOfReadSamples+3,_FlashReadUart$610+3
  5506  000892  D00A               	goto	l338
  5507  000894                     l336:
  5508                           
  5509                           ; BSR set to: 0
  5510                           
  5511                           ; BSR set to: 0
  5512  000894  C25B  F251         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$610
  5513  000898  C25C  F252         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$610+1
  5514  00089C  0102               	movlb	2	; () banked
  5515  00089E  0E00               	movlw	0
  5516  0008A0  BF52               	btfsc	(_FlashReadUart$610+1)& (0+255),7,b
  5517  0008A2  0EFF               	movlw	-1
  5518  0008A4  6F53               	movwf	(_FlashReadUart$610+2)& (0+255),b
  5519  0008A6  6F54               	movwf	(_FlashReadUart$610+3)& (0+255),b
  5520  0008A8                     l338:
  5521                           
  5522                           ; BSR set to: 2
  5523  0008A8  C251  F25B         	movff	_FlashReadUart$610,FlashReadUart@numOfSampleToRead
  5524  0008AC  C252  F25C         	movff	_FlashReadUart$610+1,FlashReadUart@numOfSampleToRead+1
  5525                           
  5526                           ;FlashApp.c: 100: readAddress -= numOfSampleToRead * (64);
  5527  0008B0  C25B  F089         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  5528  0008B4  C25C  F08A         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  5529  0008B8  0E06               	movlw	6
  5530  0008BA                     u8785:
  5531  0008BA  90D8               	bcf	status,0,c
  5532  0008BC  0100               	movlb	0	; () banked
  5533  0008BE  3789               	rlcf	??_FlashReadUart& (0+255),f,b
  5534  0008C0  378A               	rlcf	(??_FlashReadUart+1)& (0+255),f,b
  5535  0008C2  2EE8               	decfsz	wreg,f,c
  5536  0008C4  D7FA               	goto	u8785
  5537  0008C6  C089  F08B         	movff	??_FlashReadUart,??_FlashReadUart+2
  5538  0008CA  C08A  F08C         	movff	??_FlashReadUart+1,??_FlashReadUart+3
  5539  0008CE  0E00               	movlw	0
  5540  0008D0  BF8C               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  5541  0008D2  0EFF               	movlw	255
  5542  0008D4  6F8D               	movwf	(??_FlashReadUart+4)& (0+255),b
  5543  0008D6  6F8E               	movwf	(??_FlashReadUart+5)& (0+255),b
  5544  0008D8  518B               	movf	(??_FlashReadUart+2)& (0+255),w,b
  5545  0008DA  5FF4               	subwf	_readAddress& (0+255),f,b
  5546  0008DC  518C               	movf	(??_FlashReadUart+3)& (0+255),w,b
  5547  0008DE  5BF5               	subwfb	(_readAddress+1)& (0+255),f,b
  5548  0008E0  518D               	movf	(??_FlashReadUart+4)& (0+255),w,b
  5549  0008E2  5BF6               	subwfb	(_readAddress+2)& (0+255),f,b
  5550  0008E4  518E               	movf	(??_FlashReadUart+5)& (0+255),w,b
  5551  0008E6  5BF7               	subwfb	(_readAddress+3)& (0+255),f,b
  5552  0008E8                     l334:
  5553                           
  5554                           ;FlashApp.c: 101: }
  5555                           ;FlashApp.c: 103: if (readAddress <= 0x4500)
  5556                           
  5557                           ; BSR set to: 0
  5558  0008E8  0100               	movlb	0	; () banked
  5559  0008EA  51F7               	movf	(_readAddress+3)& (0+255),w,b
  5560  0008EC  11F6               	iorwf	(_readAddress+2)& (0+255),w,b
  5561  0008EE  E13E               	bnz	l8353
  5562  0008F0  05F4               	decf	_readAddress& (0+255),w,b
  5563  0008F2  0E45               	movlw	69
  5564  0008F4  59F5               	subwfb	(_readAddress+1)& (0+255),w,b
  5565  0008F6  B0D8               	btfsc	status,0,c
  5566  0008F8  D039               	goto	l344
  5567  0008FA  D023               	goto	u8820
  5568  0008FC                     l326:
  5569                           
  5570                           ;FlashApp.c: 108: else
  5571                           ;FlashApp.c: 109: {
  5572                           ;FlashApp.c: 110: if ((isReWriteDone) && (readAddress <= writeAddress))
  5573                           
  5574                           ; BSR set to: 0
  5575  0008FC  0100               	movlb	0	; () banked
  5576  0008FE  51E6               	movf	_isReWriteDone& (0+255),w,b
  5577  000900  B4D8               	btfsc	status,2,c
  5578  000902  D028               	goto	l341
  5579                           
  5580                           ; BSR set to: 0
  5581  000904  51F4               	movf	_readAddress& (0+255),w,b
  5582  000906  5C40               	subwf	_writeAddress,w,c
  5583  000908  51F5               	movf	(_readAddress+1)& (0+255),w,b
  5584  00090A  5841               	subwfb	_writeAddress+1,w,c
  5585  00090C  51F6               	movf	(_readAddress+2)& (0+255),w,b
  5586  00090E  5842               	subwfb	_writeAddress+2,w,c
  5587  000910  51F7               	movf	(_readAddress+3)& (0+255),w,b
  5588  000912  5843               	subwfb	_writeAddress+3,w,c
  5589  000914  A0D8               	btfss	status,0,c
  5590  000916  D01E               	goto	l341
  5591                           
  5592                           ; BSR set to: 0
  5593                           ;FlashApp.c: 111: {
  5594                           ;FlashApp.c: 112: readAddress = writeAddress + (64);
  5595  000918  0E40               	movlw	64
  5596  00091A  2440               	addwf	_writeAddress,w,c
  5597  00091C  6FF4               	movwf	_readAddress& (0+255),b
  5598  00091E  0E00               	movlw	0
  5599  000920  2041               	addwfc	_writeAddress+1,w,c
  5600  000922  6FF5               	movwf	(_readAddress+1)& (0+255),b
  5601  000924  0E00               	movlw	0
  5602  000926  2042               	addwfc	_writeAddress+2,w,c
  5603  000928  6FF6               	movwf	(_readAddress+2)& (0+255),b
  5604  00092A  0E00               	movlw	0
  5605  00092C  2043               	addwfc	_writeAddress+3,w,c
  5606  00092E  6FF7               	movwf	(_readAddress+3)& (0+255),b
  5607                           
  5608                           ;FlashApp.c: 113: if (readAddress >= 0x7FF0)
  5609  000930  51F7               	movf	(_readAddress+3)& (0+255),w,b
  5610  000932  11F6               	iorwf	(_readAddress+2)& (0+255),w,b
  5611  000934  E106               	bnz	u8820
  5612  000936  0EF0               	movlw	240
  5613  000938  5DF4               	subwf	_readAddress& (0+255),w,b
  5614  00093A  0E7F               	movlw	127
  5615  00093C  59F5               	subwfb	(_readAddress+1)& (0+255),w,b
  5616  00093E  A0D8               	btfss	status,0,c
  5617  000940  D015               	goto	l344
  5618  000942                     u8820:
  5619                           
  5620                           ; BSR set to: 0
  5621                           ;FlashApp.c: 114: {
  5622                           ;FlashApp.c: 115: readAddress = 0x4500;
  5623  000942  0E00               	movlw	0
  5624  000944  6FF4               	movwf	_readAddress& (0+255),b
  5625  000946  0E45               	movlw	69
  5626  000948  6FF5               	movwf	(_readAddress+1)& (0+255),b
  5627  00094A  0E00               	movlw	0
  5628  00094C  6FF6               	movwf	(_readAddress+2)& (0+255),b
  5629  00094E  0E00               	movlw	0
  5630  000950  6FF7               	movwf	(_readAddress+3)& (0+255),b
  5631                           
  5632                           ; BSR set to: 0
  5633                           ;FlashApp.c: 116: }
  5634                           ;FlashApp.c: 118: }
  5635  000952  D00C               	goto	l344
  5636  000954                     l341:
  5637                           
  5638                           ; BSR set to: 0
  5639                           ;FlashApp.c: 119: else
  5640                           ;FlashApp.c: 120: {
  5641                           ;FlashApp.c: 121: if(numOfValidateSamples == 0)
  5642                           
  5643                           ; BSR set to: 0
  5644  000954  5031               	movf	_numOfValidateSamples,w,c
  5645  000956  1032               	iorwf	_numOfValidateSamples+1,w,c
  5646  000958  1033               	iorwf	_numOfValidateSamples+2,w,c
  5647  00095A  1034               	iorwf	_numOfValidateSamples+3,w,c
  5648  00095C  A4D8               	btfss	status,2,c
  5649  00095E  D006               	goto	l344
  5650                           
  5651                           ; BSR set to: 0
  5652                           ;FlashApp.c: 122: {
  5653                           ;FlashApp.c: 123: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_NO_SAMPLE_YET
      +                          );
  5654  000960  0E55               	movlw	85
  5655  000962  6E24               	movwf	SendAckMessage@inRequest,c
  5656  000964  0E05               	movlw	5
  5657  000966  ECE5  F01D         	call	_SendAckMessage
  5658                           
  5659                           ;FlashApp.c: 124: return;
  5660  00096A  0012               	return	
  5661  00096C                     l344:
  5662  00096C                     l8353:
  5663                           
  5664                           ;FlashApp.c: 125: }
  5665                           ;FlashApp.c: 127: }
  5666                           ;FlashApp.c: 128: }
  5667                           ;FlashApp.c: 131: TxMsg[(0)] = (0x24);
  5668  00096C  0E24               	movlw	36
  5669  00096E  0102               	movlb	2	; () banked
  5670  000970  6F00               	movwf	FlashReadUart@TxMsg& (0+255),b
  5671                           
  5672                           ;FlashApp.c: 132: TxMsg[(1)] = FLASH_MSG;
  5673  000972  0E05               	movlw	5
  5674  000974  6F01               	movwf	(FlashReadUart@TxMsg+1)& (0+255),b
  5675                           
  5676                           ;FlashApp.c: 133: TxMsg[(2)] = FLASH_SEND_RAW_DATA;
  5677  000976  0E54               	movlw	84
  5678  000978  6F02               	movwf	(FlashReadUart@TxMsg+2)& (0+255),b
  5679                           
  5680                           ;FlashApp.c: 134: TxMsg[(3)] = (64);
  5681  00097A  0E40               	movlw	64
  5682  00097C  6F03               	movwf	(FlashReadUart@TxMsg+3)& (0+255),b
  5683                           
  5684                           ;FlashApp.c: 137: for (j=0; j<numOfSampleToRead; j++)
  5685  00097E  0E00               	movlw	0
  5686  000980  6F56               	movwf	(FlashReadUart@j+1)& (0+255),b
  5687  000982  0E00               	movlw	0
  5688  000984  6F55               	movwf	FlashReadUart@j& (0+255),b
  5689  000986  D08A               	goto	l345
  5690  000988                     
  5691                           ;FlashApp.c: 138: {
  5692                           ;FlashApp.c: 140: for(int idx = 0; idx < (64); idx++)
  5693                           
  5694                           ; BSR set to: 2
  5695  000988  0E00               	movlw	0
  5696  00098A  0102               	movlb	2	; () banked
  5697  00098C  6F58               	movwf	(FlashReadUart@idx+1)& (0+255),b
  5698  00098E  0E00               	movlw	0
  5699  000990  6F57               	movwf	FlashReadUart@idx& (0+255),b
  5700  000992                     l8357:
  5701                           
  5702                           ; BSR set to: 2
  5703  000992  BF58               	btfsc	(FlashReadUart@idx+1)& (0+255),7,b
  5704  000994  D006               	goto	l347
  5705  000996  5158               	movf	(FlashReadUart@idx+1)& (0+255),w,b
  5706  000998  E12F               	bnz	l8367
  5707  00099A  0E40               	movlw	64
  5708  00099C  5D57               	subwf	FlashReadUart@idx& (0+255),w,b
  5709  00099E  B0D8               	btfsc	status,0,c
  5710  0009A0  D02B               	goto	u8850
  5711  0009A2                     l347:
  5712                           
  5713                           ; BSR set to: 2
  5714                           ;FlashApp.c: 141: {
  5715                           ;FlashApp.c: 142: TxMsg[(0x4) + idx] = FLASH_ReadByte(readAddress + idx);
  5716                           
  5717                           ; BSR set to: 2
  5718  0009A2  0E04               	movlw	4
  5719  0009A4  2557               	addwf	FlashReadUart@idx& (0+255),w,b
  5720  0009A6  0100               	movlb	0	; () banked
  5721  0009A8  6F89               	movwf	??_FlashReadUart& (0+255),b
  5722  0009AA  0E00               	movlw	0
  5723  0009AC  0102               	movlb	2	; () banked
  5724  0009AE  2158               	addwfc	(FlashReadUart@idx+1)& (0+255),w,b
  5725  0009B0  0100               	movlb	0	; () banked
  5726  0009B2  6F8A               	movwf	(??_FlashReadUart+1)& (0+255),b
  5727  0009B4  0E00               	movlw	low FlashReadUart@TxMsg
  5728  0009B6  2589               	addwf	??_FlashReadUart& (0+255),w,b
  5729  0009B8  6ED9               	movwf	fsr2l,c
  5730  0009BA  0E02               	movlw	high FlashReadUart@TxMsg
  5731  0009BC  218A               	addwfc	(??_FlashReadUart+1)& (0+255),w,b
  5732  0009BE  6EDA               	movwf	fsr2h,c
  5733  0009C0  C257  F08B         	movff	FlashReadUart@idx,??_FlashReadUart+2
  5734  0009C4  C258  F08C         	movff	FlashReadUart@idx+1,??_FlashReadUart+3
  5735  0009C8  0E00               	movlw	0
  5736  0009CA  BF8C               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  5737  0009CC  0EFF               	movlw	255
  5738  0009CE  6F8D               	movwf	(??_FlashReadUart+4)& (0+255),b
  5739  0009D0  6F8E               	movwf	(??_FlashReadUart+5)& (0+255),b
  5740  0009D2  51F4               	movf	_readAddress& (0+255),w,b
  5741  0009D4  258B               	addwf	(??_FlashReadUart+2)& (0+255),w,b
  5742  0009D6  6E18               	movwf	FLASH_ReadByte@flashAddr,c
  5743  0009D8  51F5               	movf	(_readAddress+1)& (0+255),w,b
  5744  0009DA  218C               	addwfc	(??_FlashReadUart+3)& (0+255),w,b
  5745  0009DC  6E19               	movwf	FLASH_ReadByte@flashAddr+1,c
  5746  0009DE  51F6               	movf	(_readAddress+2)& (0+255),w,b
  5747  0009E0  218D               	addwfc	(??_FlashReadUart+4)& (0+255),w,b
  5748  0009E2  6E1A               	movwf	FLASH_ReadByte@flashAddr+2,c
  5749  0009E4  51F7               	movf	(_readAddress+3)& (0+255),w,b
  5750  0009E6  218E               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  5751  0009E8  6E1B               	movwf	FLASH_ReadByte@flashAddr+3,c
  5752  0009EA  EC0D  F022         	call	_FLASH_ReadByte	;wreg free
  5753  0009EE  6EDF               	movwf	indf2,c
  5754  0009F0  0102               	movlb	2	; () banked
  5755  0009F2  4B57               	infsnz	FlashReadUart@idx& (0+255),f,b
  5756  0009F4  2B58               	incf	(FlashReadUart@idx+1)& (0+255),f,b
  5757  0009F6  D7CD               	goto	l8357
  5758  0009F8                     u8850:
  5759  0009F8                     l8367:
  5760                           
  5761                           ; BSR set to: 2
  5762                           ;FlashApp.c: 143: }
  5763                           ;FlashApp.c: 145: readAddress += (64);
  5764  0009F8  0E40               	movlw	64
  5765  0009FA  0100               	movlb	0	; () banked
  5766  0009FC  27F4               	addwf	_readAddress& (0+255),f,b
  5767  0009FE  0E00               	movlw	0
  5768  000A00  23F5               	addwfc	(_readAddress+1)& (0+255),f,b
  5769  000A02  23F6               	addwfc	(_readAddress+2)& (0+255),f,b
  5770  000A04  23F7               	addwfc	(_readAddress+3)& (0+255),f,b
  5771                           
  5772                           ;FlashApp.c: 146: if (readAddress >= 0x7FF0)
  5773  000A06  51F7               	movf	(_readAddress+3)& (0+255),w,b
  5774  000A08  11F6               	iorwf	(_readAddress+2)& (0+255),w,b
  5775  000A0A  E106               	bnz	u8860
  5776  000A0C  0EF0               	movlw	240
  5777  000A0E  5DF4               	subwf	_readAddress& (0+255),w,b
  5778  000A10  0E7F               	movlw	127
  5779  000A12  59F5               	subwfb	(_readAddress+1)& (0+255),w,b
  5780  000A14  A0D8               	btfss	status,0,c
  5781  000A16  D008               	goto	l349
  5782  000A18                     u8860:
  5783                           
  5784                           ; BSR set to: 0
  5785                           ;FlashApp.c: 147: {
  5786                           ;FlashApp.c: 148: readAddress = 0x4500;
  5787  000A18  0E00               	movlw	0
  5788  000A1A  6FF4               	movwf	_readAddress& (0+255),b
  5789  000A1C  0E45               	movlw	69
  5790  000A1E  6FF5               	movwf	(_readAddress+1)& (0+255),b
  5791  000A20  0E00               	movlw	0
  5792  000A22  6FF6               	movwf	(_readAddress+2)& (0+255),b
  5793  000A24  0E00               	movlw	0
  5794  000A26  6FF7               	movwf	(_readAddress+3)& (0+255),b
  5795  000A28                     l349:
  5796                           
  5797                           ; BSR set to: 0
  5798                           ;FlashApp.c: 149: }
  5799                           ;FlashApp.c: 150: TxMsg[(64) + (0x4)] = crc8(TxMsg, (64) + (0x4));
  5800                           
  5801                           ; BSR set to: 0
  5802  000A28  0E00               	movlw	low FlashReadUart@TxMsg
  5803  000A2A  6E18               	movwf	crc8@dataArray,c
  5804  000A2C  0E02               	movlw	high FlashReadUart@TxMsg
  5805  000A2E  6E19               	movwf	crc8@dataArray+1,c
  5806  000A30  0E00               	movlw	0
  5807  000A32  6E1B               	movwf	crc8@dataSize+1,c
  5808  000A34  0E44               	movlw	68
  5809  000A36  6E1A               	movwf	crc8@dataSize,c
  5810  000A38  EC0E  F01E         	call	_crc8	;wreg free
  5811  000A3C  0102               	movlb	2	; () banked
  5812  000A3E  6F44               	movwf	(FlashReadUart@TxMsg+68)& (0+255),b
  5813                           
  5814                           ; BSR set to: 2
  5815                           ;FlashApp.c: 152: WriteUartMessage(TxMsg, (64) + (0x4) + 1);
  5816  000A40  0E00               	movlw	low FlashReadUart@TxMsg
  5817  000A42  6E19               	movwf	WriteUartMessage@dataBuf,c
  5818  000A44  0E02               	movlw	high FlashReadUart@TxMsg
  5819  000A46  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5820  000A48  0E00               	movlw	0
  5821  000A4A  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5822  000A4C  0E45               	movlw	69
  5823  000A4E  6E1B               	movwf	WriteUartMessage@dataSize,c
  5824  000A50  ECA1  F01F         	call	_WriteUartMessage	;wreg free
  5825                           
  5826                           ;FlashApp.c: 154: if(numOfValidateSamples)
  5827  000A54  5031               	movf	_numOfValidateSamples,w,c
  5828  000A56  1032               	iorwf	_numOfValidateSamples+1,w,c
  5829  000A58  1033               	iorwf	_numOfValidateSamples+2,w,c
  5830  000A5A  1034               	iorwf	_numOfValidateSamples+3,w,c
  5831  000A5C  B4D8               	btfsc	status,2,c
  5832  000A5E  D01B               	goto	l352
  5833                           
  5834                           ;FlashApp.c: 155: {
  5835                           ;FlashApp.c: 156: if (numOfReadSamples < ((0x4500-0x7FF0)/(64)))
  5836  000A60  0E15               	movlw	21
  5837  000A62  5C3C               	subwf	_numOfReadSamples,w,c
  5838  000A64  0EFF               	movlw	255
  5839  000A66  583D               	subwfb	_numOfReadSamples+1,w,c
  5840  000A68  0EFF               	movlw	255
  5841  000A6A  583E               	subwfb	_numOfReadSamples+2,w,c
  5842  000A6C  0EFF               	movlw	255
  5843  000A6E  583F               	subwfb	_numOfReadSamples+3,w,c
  5844  000A70  B0D8               	btfsc	status,0,c
  5845  000A72  D006               	goto	l351
  5846                           
  5847                           ;FlashApp.c: 157: {
  5848                           ;FlashApp.c: 158: numOfReadSamples++;
  5849  000A74  0E01               	movlw	1
  5850  000A76  263C               	addwf	_numOfReadSamples,f,c
  5851  000A78  0E00               	movlw	0
  5852  000A7A  223D               	addwfc	_numOfReadSamples+1,f,c
  5853  000A7C  223E               	addwfc	_numOfReadSamples+2,f,c
  5854  000A7E  223F               	addwfc	_numOfReadSamples+3,f,c
  5855  000A80                     l351:
  5856                           
  5857                           ;FlashApp.c: 159: }
  5858                           ;FlashApp.c: 160: if (numOfValidateSamples > 0)
  5859  000A80  5031               	movf	_numOfValidateSamples,w,c
  5860  000A82  1032               	iorwf	_numOfValidateSamples+1,w,c
  5861  000A84  1033               	iorwf	_numOfValidateSamples+2,w,c
  5862  000A86  1034               	iorwf	_numOfValidateSamples+3,w,c
  5863  000A88  B4D8               	btfsc	status,2,c
  5864  000A8A  D005               	goto	l352
  5865                           
  5866                           ;FlashApp.c: 161: {
  5867                           ;FlashApp.c: 162: numOfValidateSamples--;
  5868  000A8C  0631               	decf	_numOfValidateSamples,f,c
  5869  000A8E  0E00               	movlw	0
  5870  000A90  5A32               	subwfb	_numOfValidateSamples+1,f,c
  5871  000A92  5A33               	subwfb	_numOfValidateSamples+2,f,c
  5872  000A94  5A34               	subwfb	_numOfValidateSamples+3,f,c
  5873  000A96                     l352:
  5874  000A96  0102               	movlb	2	; () banked
  5875  000A98  4B55               	infsnz	FlashReadUart@j& (0+255),f,b
  5876  000A9A  2B56               	incf	(FlashReadUart@j+1)& (0+255),f,b
  5877  000A9C                     l345:
  5878                           
  5879                           ; BSR set to: 2
  5880                           
  5881                           ; BSR set to: 2
  5882  000A9C  515B               	movf	FlashReadUart@numOfSampleToRead& (0+255),w,b
  5883  000A9E  5D55               	subwf	FlashReadUart@j& (0+255),w,b
  5884  000AA0  5156               	movf	(FlashReadUart@j+1)& (0+255),w,b
  5885  000AA2  0A80               	xorlw	128
  5886  000AA4  0100               	movlb	0	; () banked
  5887  000AA6  6F89               	movwf	??_FlashReadUart& (0+255),b
  5888  000AA8  0102               	movlb	2	; () banked
  5889  000AAA  515C               	movf	(FlashReadUart@numOfSampleToRead+1)& (0+255),w,b
  5890  000AAC  0A80               	xorlw	128
  5891  000AAE  0100               	movlb	0	; () banked
  5892  000AB0  5989               	subwfb	??_FlashReadUart& (0+255),w,b
  5893  000AB2  B0D8               	btfsc	status,0,c
  5894  000AB4  0012               	return	
  5895  000AB6  D768               	goto	l346
  5896  000AB8                     __end_of_FlashReadUart:
  5897                           	opt stack 0
  5898                           tosu	equ	0xFFF
  5899                           tosh	equ	0xFFE
  5900                           tosl	equ	0xFFD
  5901                           pclath	equ	0xFFA
  5902                           tblptru	equ	0xFF8
  5903                           tblptrh	equ	0xFF7
  5904                           tblptrl	equ	0xFF6
  5905                           tablat	equ	0xFF5
  5906                           prodh	equ	0xFF4
  5907                           prodl	equ	0xFF3
  5908                           postinc0	equ	0xFEE
  5909                           plusw0	equ	0xFEB
  5910                           wreg	equ	0xFE8
  5911                           postdec1	equ	0xFE5
  5912                           fsr1l	equ	0xFE1
  5913                           indf2	equ	0xFDF
  5914                           postinc2	equ	0xFDE
  5915                           plusw2	equ	0xFDB
  5916                           fsr2h	equ	0xFDA
  5917                           fsr2l	equ	0xFD9
  5918                           status	equ	0xFD8
  5919                           
  5920 ;; *************** function _abs *****************
  5921 ;; Defined at:
  5922 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\abs.c"
  5923 ;; Parameters:    Size  Location     Type
  5924 ;;  a               2   23[COMRAM] int 
  5925 ;; Auto vars:     Size  Location     Type
  5926 ;;		None
  5927 ;; Return value:  Size  Location     Type
  5928 ;;                  2   23[COMRAM] int 
  5929 ;; Registers used:
  5930 ;;		wreg, status,2, status,0
  5931 ;; Tracked objects:
  5932 ;;		On entry : 0/0
  5933 ;;		On exit  : 0/0
  5934 ;;		Unchanged: 0/0
  5935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5936 ;;      Params:         2       0       0       0       0       0       0
  5937 ;;      Locals:         0       0       0       0       0       0       0
  5938 ;;      Temps:          2       0       0       0       0       0       0
  5939 ;;      Totals:         4       0       0       0       0       0       0
  5940 ;;Total ram usage:        4 bytes
  5941 ;; Hardware stack levels used:    1
  5942 ;; Hardware stack levels required when called:    4
  5943 ;; This function calls:
  5944 ;;		Nothing
  5945 ;; This function is called by:
  5946 ;;		_FlashReadUart
  5947 ;; This function uses a non-reentrant model
  5948 ;;
  5949                           
  5950                           	psect	text16
  5951  00415C                     __ptext16:
  5952                           	opt stack 0
  5953  00415C                     _abs:
  5954                           	opt stack 23
  5955                           
  5956                           ;incstack = 0
  5957  00415C  AE19               	btfss	abs@a+1,7,c
  5958  00415E  D00D               	goto	l1656
  5959  004160  C018  F01A         	movff	abs@a,??_abs
  5960  004164  C019  F01B         	movff	abs@a+1,??_abs+1
  5961  004168  1E1A               	comf	??_abs,f,c
  5962  00416A  1E1B               	comf	??_abs+1,f,c
  5963  00416C  4A1A               	infsnz	??_abs,f,c
  5964  00416E  2A1B               	incf	??_abs+1,f,c
  5965  004170  C01A  F018         	movff	??_abs,?_abs
  5966  004174  C01B  F019         	movff	??_abs+1,?_abs+1
  5967  004178  0012               	return	
  5968  00417A                     l1656:
  5969  00417A  C018  F018         	movff	abs@a,?_abs
  5970  00417E  C019  F019         	movff	abs@a+1,?_abs+1
  5971  004182  0012               	return		;funcret
  5972  004184                     __end_of_abs:
  5973                           	opt stack 0
  5974                           tosu	equ	0xFFF
  5975                           tosh	equ	0xFFE
  5976                           tosl	equ	0xFFD
  5977                           pclath	equ	0xFFA
  5978                           tblptru	equ	0xFF8
  5979                           tblptrh	equ	0xFF7
  5980                           tblptrl	equ	0xFF6
  5981                           tablat	equ	0xFF5
  5982                           prodh	equ	0xFF4
  5983                           prodl	equ	0xFF3
  5984                           postinc0	equ	0xFEE
  5985                           plusw0	equ	0xFEB
  5986                           wreg	equ	0xFE8
  5987                           postdec1	equ	0xFE5
  5988                           fsr1l	equ	0xFE1
  5989                           indf2	equ	0xFDF
  5990                           postinc2	equ	0xFDE
  5991                           plusw2	equ	0xFDB
  5992                           fsr2h	equ	0xFDA
  5993                           fsr2l	equ	0xFD9
  5994                           status	equ	0xFD8
  5995                           
  5996 ;; *************** function _FLASH_ReadByte *****************
  5997 ;; Defined at:
  5998 ;;		line 58 in file "mcc_generated_files/memory.c"
  5999 ;; Parameters:    Size  Location     Type
  6000 ;;  flashAddr       4   23[COMRAM] unsigned long 
  6001 ;; Auto vars:     Size  Location     Type
  6002 ;;		None
  6003 ;; Return value:  Size  Location     Type
  6004 ;;                  1    wreg      unsigned char 
  6005 ;; Registers used:
  6006 ;;		wreg, status,2
  6007 ;; Tracked objects:
  6008 ;;		On entry : 0/0
  6009 ;;		On exit  : 0/0
  6010 ;;		Unchanged: 0/0
  6011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6012 ;;      Params:         4       0       0       0       0       0       0
  6013 ;;      Locals:         0       0       0       0       0       0       0
  6014 ;;      Temps:          0       0       0       0       0       0       0
  6015 ;;      Totals:         4       0       0       0       0       0       0
  6016 ;;Total ram usage:        4 bytes
  6017 ;; Hardware stack levels used:    1
  6018 ;; Hardware stack levels required when called:    4
  6019 ;; This function calls:
  6020 ;;		Nothing
  6021 ;; This function is called by:
  6022 ;;		_FlashReadUart
  6023 ;;		_FLASH_ReadWord
  6024 ;;		_FLASH_WriteByte
  6025 ;; This function uses a non-reentrant model
  6026 ;;
  6027                           
  6028                           	psect	text17
  6029  00441A                     __ptext17:
  6030                           	opt stack 0
  6031  00441A                     _FLASH_ReadByte:
  6032                           	opt stack 23
  6033                           
  6034                           ;memory.c: 60: TBLPTRU = (uint8_t)((flashAddr & 0x00FF0000) >> 16);
  6035                           
  6036                           ;incstack = 0
  6037  00441A  C01A  FFF8         	movff	FLASH_ReadByte@flashAddr+2,tblptru	;volatile
  6038                           
  6039                           ;memory.c: 61: TBLPTRH = (uint8_t)((flashAddr & 0x0000FF00)>> 8);
  6040  00441E  C019  FFF7         	movff	FLASH_ReadByte@flashAddr+1,tblptrh	;volatile
  6041                           
  6042                           ;memory.c: 62: TBLPTRL = (uint8_t)(flashAddr & 0x000000FF);
  6043  004422  C018  FFF6         	movff	FLASH_ReadByte@flashAddr,tblptrl	;volatile
  6044  004426  0008               	tblrd		*	;# 
  6045                           
  6046                           ;memory.c: 66: return (TABLAT);
  6047  004428  50F5               	movf	tablat,w,c	;volatile
  6048  00442A  0012               	return	
  6049  00442C                     __end_of_FLASH_ReadByte:
  6050                           	opt stack 0
  6051                           tosu	equ	0xFFF
  6052                           tosh	equ	0xFFE
  6053                           tosl	equ	0xFFD
  6054                           pclath	equ	0xFFA
  6055                           tblptru	equ	0xFF8
  6056                           tblptrh	equ	0xFF7
  6057                           tblptrl	equ	0xFF6
  6058                           tablat	equ	0xFF5
  6059                           prodh	equ	0xFF4
  6060                           prodl	equ	0xFF3
  6061                           postinc0	equ	0xFEE
  6062                           plusw0	equ	0xFEB
  6063                           wreg	equ	0xFE8
  6064                           postdec1	equ	0xFE5
  6065                           fsr1l	equ	0xFE1
  6066                           indf2	equ	0xFDF
  6067                           postinc2	equ	0xFDE
  6068                           plusw2	equ	0xFDB
  6069                           fsr2h	equ	0xFDA
  6070                           fsr2l	equ	0xFD9
  6071                           status	equ	0xFD8
  6072                           
  6073 ;; *************** function _FlashReadCondition *****************
  6074 ;; Defined at:
  6075 ;;		line 183 in file "FlashApp.c"
  6076 ;; Parameters:    Size  Location     Type
  6077 ;;		None
  6078 ;; Auto vars:     Size  Location     Type
  6079 ;;  TxMsg           9   39[COMRAM] unsigned char [9]
  6080 ;; Return value:  Size  Location     Type
  6081 ;;                  1    wreg      void 
  6082 ;; Registers used:
  6083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6084 ;; Tracked objects:
  6085 ;;		On entry : 0/0
  6086 ;;		On exit  : 0/0
  6087 ;;		Unchanged: 0/0
  6088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6089 ;;      Params:         0       0       0       0       0       0       0
  6090 ;;      Locals:         9       0       0       0       0       0       0
  6091 ;;      Temps:          4       0       0       0       0       0       0
  6092 ;;      Totals:        13       0       0       0       0       0       0
  6093 ;;Total ram usage:       13 bytes
  6094 ;; Hardware stack levels used:    1
  6095 ;; Hardware stack levels required when called:    6
  6096 ;; This function calls:
  6097 ;;		_WriteUartMessage
  6098 ;;		_ZeroArray
  6099 ;;		_crc8
  6100 ;;		_make8
  6101 ;; This function is called by:
  6102 ;;		_GroupFlashMemory
  6103 ;; This function uses a non-reentrant model
  6104 ;;
  6105                           
  6106                           	psect	text18
  6107  0021AC                     __ptext18:
  6108                           	opt stack 0
  6109  0021AC                     _FlashReadCondition:
  6110                           	opt stack 22
  6111                           
  6112                           ;FlashApp.c: 186: char TxMsg[4 + (0x4) + 1];
  6113                           ;FlashApp.c: 187: ZeroArray(TxMsg, 4 + (0x4) + 1);
  6114                           
  6115                           ;incstack = 0
  6116  0021AC  0E28               	movlw	low FlashReadCondition@TxMsg
  6117  0021AE  6E20               	movwf	ZeroArray@array,c
  6118  0021B0  0E00               	movlw	high FlashReadCondition@TxMsg
  6119  0021B2  6E21               	movwf	ZeroArray@array+1,c
  6120  0021B4  0E00               	movlw	0
  6121  0021B6  6E23               	movwf	ZeroArray@size+1,c
  6122  0021B8  0E09               	movlw	9
  6123  0021BA  6E22               	movwf	ZeroArray@size,c
  6124  0021BC  EC95  F021         	call	_ZeroArray	;wreg free
  6125                           
  6126                           ;FlashApp.c: 190: TxMsg[(0)] = (0x24);
  6127  0021C0  0E24               	movlw	36
  6128  0021C2  6E28               	movwf	FlashReadCondition@TxMsg,c
  6129                           
  6130                           ;FlashApp.c: 191: TxMsg[(1)] = FLASH_MSG;
  6131  0021C4  0E05               	movlw	5
  6132  0021C6  6E29               	movwf	FlashReadCondition@TxMsg+1,c
  6133                           
  6134                           ;FlashApp.c: 192: TxMsg[(2)] = FLASH_READ_CONDITION;
  6135  0021C8  0E52               	movlw	82
  6136  0021CA  6E2A               	movwf	FlashReadCondition@TxMsg+2,c
  6137                           
  6138                           ;FlashApp.c: 193: TxMsg[(3)] = 4;
  6139  0021CC  0E04               	movlw	4
  6140  0021CE  6E2B               	movwf	FlashReadCondition@TxMsg+3,c
  6141                           
  6142                           ;FlashApp.c: 198: TxMsg[(0x4) + 0] = make8(0x7FF0 - 0x4500,1);
  6143  0021D0  0EF0               	movlw	240
  6144  0021D2  6E18               	movwf	make8@data,c
  6145  0021D4  0E3A               	movlw	58
  6146  0021D6  6E19               	movwf	make8@data+1,c
  6147  0021D8  0E00               	movlw	0
  6148  0021DA  6E1A               	movwf	make8@data+2,c
  6149  0021DC  0E00               	movlw	0
  6150  0021DE  6E1B               	movwf	make8@data+3,c
  6151  0021E0  0E01               	movlw	1
  6152  0021E2  6E1C               	movwf	make8@dataLocation,c
  6153  0021E4  EC5D  F01C         	call	_make8	;wreg free
  6154  0021E8  6E2C               	movwf	FlashReadCondition@TxMsg+4,c
  6155                           
  6156                           ;FlashApp.c: 199: TxMsg[(0x4) + 1] = make8(0x7FF0 - 0x4500,0);
  6157  0021EA  0EF0               	movlw	240
  6158  0021EC  6E18               	movwf	make8@data,c
  6159  0021EE  0E3A               	movlw	58
  6160  0021F0  6E19               	movwf	make8@data+1,c
  6161  0021F2  0E00               	movlw	0
  6162  0021F4  6E1A               	movwf	make8@data+2,c
  6163  0021F6  0E00               	movlw	0
  6164  0021F8  6E1B               	movwf	make8@data+3,c
  6165  0021FA  0E00               	movlw	0
  6166  0021FC  6E1C               	movwf	make8@dataLocation,c
  6167  0021FE  EC5D  F01C         	call	_make8	;wreg free
  6168  002202  6E2D               	movwf	FlashReadCondition@TxMsg+5,c
  6169                           
  6170                           ;FlashApp.c: 202: TxMsg[(0x4) + 2] = make8(0x7FF0 - writeAddress,1);
  6171  002204  C040  F024         	movff	_writeAddress,??_FlashReadCondition
  6172  002208  C041  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  6173  00220C  C042  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  6174  002210  C043  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  6175  002214  1E24               	comf	??_FlashReadCondition,f,c
  6176  002216  1E25               	comf	??_FlashReadCondition+1,f,c
  6177  002218  1E26               	comf	??_FlashReadCondition+2,f,c
  6178  00221A  1E27               	comf	??_FlashReadCondition+3,f,c
  6179  00221C  2A24               	incf	??_FlashReadCondition,f,c
  6180  00221E  0E00               	movlw	0
  6181  002220  2225               	addwfc	??_FlashReadCondition+1,f,c
  6182  002222  2226               	addwfc	??_FlashReadCondition+2,f,c
  6183  002224  2227               	addwfc	??_FlashReadCondition+3,f,c
  6184  002226  0EF0               	movlw	240
  6185  002228  2424               	addwf	??_FlashReadCondition,w,c
  6186  00222A  6E18               	movwf	make8@data,c
  6187  00222C  0E7F               	movlw	127
  6188  00222E  2025               	addwfc	??_FlashReadCondition+1,w,c
  6189  002230  6E19               	movwf	make8@data+1,c
  6190  002232  0E00               	movlw	0
  6191  002234  2026               	addwfc	??_FlashReadCondition+2,w,c
  6192  002236  6E1A               	movwf	make8@data+2,c
  6193  002238  0E00               	movlw	0
  6194  00223A  2027               	addwfc	??_FlashReadCondition+3,w,c
  6195  00223C  6E1B               	movwf	make8@data+3,c
  6196  00223E  0E01               	movlw	1
  6197  002240  6E1C               	movwf	make8@dataLocation,c
  6198  002242  EC5D  F01C         	call	_make8	;wreg free
  6199  002246  6E2E               	movwf	FlashReadCondition@TxMsg+6,c
  6200                           
  6201                           ;FlashApp.c: 203: TxMsg[(0x4) + 3] = make8(0x7FF0 - writeAddress,0);
  6202  002248  C040  F024         	movff	_writeAddress,??_FlashReadCondition
  6203  00224C  C041  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  6204  002250  C042  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  6205  002254  C043  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  6206  002258  1E24               	comf	??_FlashReadCondition,f,c
  6207  00225A  1E25               	comf	??_FlashReadCondition+1,f,c
  6208  00225C  1E26               	comf	??_FlashReadCondition+2,f,c
  6209  00225E  1E27               	comf	??_FlashReadCondition+3,f,c
  6210  002260  2A24               	incf	??_FlashReadCondition,f,c
  6211  002262  0E00               	movlw	0
  6212  002264  2225               	addwfc	??_FlashReadCondition+1,f,c
  6213  002266  2226               	addwfc	??_FlashReadCondition+2,f,c
  6214  002268  2227               	addwfc	??_FlashReadCondition+3,f,c
  6215  00226A  0EF0               	movlw	240
  6216  00226C  2424               	addwf	??_FlashReadCondition,w,c
  6217  00226E  6E18               	movwf	make8@data,c
  6218  002270  0E7F               	movlw	127
  6219  002272  2025               	addwfc	??_FlashReadCondition+1,w,c
  6220  002274  6E19               	movwf	make8@data+1,c
  6221  002276  0E00               	movlw	0
  6222  002278  2026               	addwfc	??_FlashReadCondition+2,w,c
  6223  00227A  6E1A               	movwf	make8@data+2,c
  6224  00227C  0E00               	movlw	0
  6225  00227E  2027               	addwfc	??_FlashReadCondition+3,w,c
  6226  002280  6E1B               	movwf	make8@data+3,c
  6227  002282  0E00               	movlw	0
  6228  002284  6E1C               	movwf	make8@dataLocation,c
  6229  002286  EC5D  F01C         	call	_make8	;wreg free
  6230  00228A  6E2F               	movwf	FlashReadCondition@TxMsg+7,c
  6231                           
  6232                           ;FlashApp.c: 205: TxMsg[4 + (0x4)] = crc8(TxMsg, 4 + (0x4));
  6233  00228C  0E28               	movlw	low FlashReadCondition@TxMsg
  6234  00228E  6E18               	movwf	crc8@dataArray,c
  6235  002290  0E00               	movlw	high FlashReadCondition@TxMsg
  6236  002292  6E19               	movwf	crc8@dataArray+1,c
  6237  002294  0E00               	movlw	0
  6238  002296  6E1B               	movwf	crc8@dataSize+1,c
  6239  002298  0E08               	movlw	8
  6240  00229A  6E1A               	movwf	crc8@dataSize,c
  6241  00229C  EC0E  F01E         	call	_crc8	;wreg free
  6242  0022A0  6E30               	movwf	FlashReadCondition@TxMsg+8,c
  6243                           
  6244                           ;FlashApp.c: 207: WriteUartMessage(TxMsg, 4 + (0x4) + 1);
  6245  0022A2  0E28               	movlw	low FlashReadCondition@TxMsg
  6246  0022A4  6E19               	movwf	WriteUartMessage@dataBuf,c
  6247  0022A6  0E00               	movlw	high FlashReadCondition@TxMsg
  6248  0022A8  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  6249  0022AA  0E00               	movlw	0
  6250  0022AC  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  6251  0022AE  0E09               	movlw	9
  6252  0022B0  6E1B               	movwf	WriteUartMessage@dataSize,c
  6253  0022B2  ECA1  F01F         	call	_WriteUartMessage	;wreg free
  6254  0022B6  0012               	return		;funcret
  6255  0022B8                     __end_of_FlashReadCondition:
  6256                           	opt stack 0
  6257                           tosu	equ	0xFFF
  6258                           tosh	equ	0xFFE
  6259                           tosl	equ	0xFFD
  6260                           pclath	equ	0xFFA
  6261                           tblptru	equ	0xFF8
  6262                           tblptrh	equ	0xFF7
  6263                           tblptrl	equ	0xFF6
  6264                           tablat	equ	0xFF5
  6265                           prodh	equ	0xFF4
  6266                           prodl	equ	0xFF3
  6267                           postinc0	equ	0xFEE
  6268                           plusw0	equ	0xFEB
  6269                           wreg	equ	0xFE8
  6270                           postdec1	equ	0xFE5
  6271                           fsr1l	equ	0xFE1
  6272                           indf2	equ	0xFDF
  6273                           postinc2	equ	0xFDE
  6274                           plusw2	equ	0xFDB
  6275                           fsr2h	equ	0xFDA
  6276                           fsr2l	equ	0xFD9
  6277                           status	equ	0xFD8
  6278                           
  6279 ;; *************** function _FlashEreaseMem *****************
  6280 ;; Defined at:
  6281 ;;		line 173 in file "FlashApp.c"
  6282 ;; Parameters:    Size  Location     Type
  6283 ;;		None
  6284 ;; Auto vars:     Size  Location     Type
  6285 ;;		None
  6286 ;; Return value:  Size  Location     Type
  6287 ;;                  1    wreg      void 
  6288 ;; Registers used:
  6289 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6290 ;; Tracked objects:
  6291 ;;		On entry : 0/0
  6292 ;;		On exit  : 0/0
  6293 ;;		Unchanged: 0/0
  6294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6295 ;;      Params:         0       0       0       0       0       0       0
  6296 ;;      Locals:         0       0       0       0       0       0       0
  6297 ;;      Temps:          0       0       0       0       0       0       0
  6298 ;;      Totals:         0       0       0       0       0       0       0
  6299 ;;Total ram usage:        0 bytes
  6300 ;; Hardware stack levels used:    1
  6301 ;; Hardware stack levels required when called:    7
  6302 ;; This function calls:
  6303 ;;		_SendAckMessage
  6304 ;;		_ZeroArray
  6305 ;; This function is called by:
  6306 ;;		_GroupFlashMemory
  6307 ;; This function uses a non-reentrant model
  6308 ;;
  6309                           
  6310                           	psect	text19
  6311  003B78                     __ptext19:
  6312                           	opt stack 0
  6313  003B78                     _FlashEreaseMem:
  6314                           	opt stack 21
  6315                           
  6316                           ;FlashApp.c: 175: writeAddress = 0x4500;
  6317                           
  6318                           ;incstack = 0
  6319  003B78  0E00               	movlw	0
  6320  003B7A  6E40               	movwf	_writeAddress,c
  6321  003B7C  0E45               	movlw	69
  6322  003B7E  6E41               	movwf	_writeAddress+1,c
  6323  003B80  0E00               	movlw	0
  6324  003B82  6E42               	movwf	_writeAddress+2,c
  6325  003B84  0E00               	movlw	0
  6326  003B86  6E43               	movwf	_writeAddress+3,c
  6327                           
  6328                           ;FlashApp.c: 176: readAddress = 0x4500;
  6329  003B88  0E00               	movlw	0
  6330  003B8A  0100               	movlb	0	; () banked
  6331  003B8C  6FF4               	movwf	_readAddress& (0+255),b
  6332  003B8E  0E45               	movlw	69
  6333  003B90  6FF5               	movwf	(_readAddress+1)& (0+255),b
  6334  003B92  0E00               	movlw	0
  6335  003B94  6FF6               	movwf	(_readAddress+2)& (0+255),b
  6336  003B96  0E00               	movlw	0
  6337  003B98  6FF7               	movwf	(_readAddress+3)& (0+255),b
  6338                           
  6339                           ;FlashApp.c: 177: numOfValidateSamples = 0;
  6340  003B9A  0E00               	movlw	0
  6341  003B9C  6E31               	movwf	_numOfValidateSamples,c
  6342  003B9E  0E00               	movlw	0
  6343  003BA0  6E32               	movwf	_numOfValidateSamples+1,c
  6344  003BA2  0E00               	movlw	0
  6345  003BA4  6E33               	movwf	_numOfValidateSamples+2,c
  6346  003BA6  0E00               	movlw	0
  6347  003BA8  6E34               	movwf	_numOfValidateSamples+3,c
  6348                           
  6349                           ; BSR set to: 0
  6350                           ;FlashApp.c: 178: ZeroArray(sampleArray, (64)/sizeof(adc_result_t));
  6351  003BAA  0E34               	movlw	low _sampleArray
  6352  003BAC  6E20               	movwf	ZeroArray@array,c
  6353  003BAE  0E01               	movlw	high _sampleArray
  6354  003BB0  6E21               	movwf	ZeroArray@array+1,c
  6355  003BB2  0E00               	movlw	0
  6356  003BB4  6E23               	movwf	ZeroArray@size+1,c
  6357  003BB6  0E20               	movlw	32
  6358  003BB8  6E22               	movwf	ZeroArray@size,c
  6359  003BBA  EC95  F021         	call	_ZeroArray	;wreg free
  6360                           
  6361                           ;FlashApp.c: 179: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_EREASE_MEMORY
      +                          );
  6362  003BBE  0E51               	movlw	81
  6363  003BC0  6E24               	movwf	SendAckMessage@inRequest,c
  6364  003BC2  0E05               	movlw	5
  6365  003BC4  ECE5  F01D         	call	_SendAckMessage
  6366  003BC8  0012               	return		;funcret
  6367  003BCA                     __end_of_FlashEreaseMem:
  6368                           	opt stack 0
  6369                           tosu	equ	0xFFF
  6370                           tosh	equ	0xFFE
  6371                           tosl	equ	0xFFD
  6372                           pclath	equ	0xFFA
  6373                           tblptru	equ	0xFF8
  6374                           tblptrh	equ	0xFF7
  6375                           tblptrl	equ	0xFF6
  6376                           tablat	equ	0xFF5
  6377                           prodh	equ	0xFF4
  6378                           prodl	equ	0xFF3
  6379                           postinc0	equ	0xFEE
  6380                           plusw0	equ	0xFEB
  6381                           wreg	equ	0xFE8
  6382                           postdec1	equ	0xFE5
  6383                           fsr1l	equ	0xFE1
  6384                           indf2	equ	0xFDF
  6385                           postinc2	equ	0xFDE
  6386                           plusw2	equ	0xFDB
  6387                           fsr2h	equ	0xFDA
  6388                           fsr2l	equ	0xFD9
  6389                           status	equ	0xFD8
  6390                           
  6391 ;; *************** function _DacSetValue *****************
  6392 ;; Defined at:
  6393 ;;		line 30 in file "DacApp.c"
  6394 ;; Parameters:    Size  Location     Type
  6395 ;;  data            2   42[BANK0 ] PTR unsigned char 
  6396 ;;		 -> rxMsgData(20), 
  6397 ;; Auto vars:     Size  Location     Type
  6398 ;;  retVal          8   49[BANK0 ] struct .
  6399 ;;  dacIndex        1   48[BANK0 ] char 
  6400 ;; Return value:  Size  Location     Type
  6401 ;;                  1    wreg      void 
  6402 ;; Registers used:
  6403 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6404 ;; Tracked objects:
  6405 ;;		On entry : 0/0
  6406 ;;		On exit  : 0/0
  6407 ;;		Unchanged: 0/0
  6408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6409 ;;      Params:         0       2       0       0       0       0       0
  6410 ;;      Locals:         0       9       0       0       0       0       0
  6411 ;;      Temps:          0       4       0       0       0       0       0
  6412 ;;      Totals:         0      15       0       0       0       0       0
  6413 ;;Total ram usage:       15 bytes
  6414 ;; Hardware stack levels used:    1
  6415 ;; Hardware stack levels required when called:    8
  6416 ;; This function calls:
  6417 ;;		_GetIntFromUartData
  6418 ;;		_SWSPI_send_word
  6419 ;;		_SendAckMessage
  6420 ;;		_StoreIntInEeprom
  6421 ;; This function is called by:
  6422 ;;		_GroupDAC
  6423 ;; This function uses a non-reentrant model
  6424 ;;
  6425                           
  6426                           	psect	text20
  6427  00318A                     __ptext20:
  6428                           	opt stack 0
  6429  00318A                     _DacSetValue:
  6430                           	opt stack 20
  6431                           
  6432                           ;DacApp.c: 32: INT_VAL retVal;
  6433                           ;DacApp.c: 33: retVal = GetIntFromUartData(16, data);
  6434                           
  6435                           ;incstack = 0
  6436  00318A  C08A  F066         	movff	DacSetValue@data,GetIntFromUartData@data
  6437  00318E  C08B  F067         	movff	DacSetValue@data+1,GetIntFromUartData@data+1
  6438  003192  0E10               	movlw	16
  6439  003194  ECF0  F00E         	call	_GetIntFromUartData
  6440  003198  EE20  F091         	lfsr	2,DacSetValue@retVal
  6441  00319C  0E07               	movlw	7
  6442  00319E                     u8911:
  6443  00319E  CFEB FFDB          	movff	plusw0,plusw2
  6444  0031A2  06E8               	decf	wreg,f,c
  6445  0031A4  E2FC               	bc	u8911
  6446                           
  6447                           ;DacApp.c: 34: SWSPI_send_word(EXT_DAC, retVal.num, 1);
  6448  0031A6  C091  F029         	movff	DacSetValue@retVal,SWSPI_send_word@data
  6449  0031AA  C092  F02A         	movff	DacSetValue@retVal+1,SWSPI_send_word@data+1
  6450  0031AE  C093  F02B         	movff	DacSetValue@retVal+2,SWSPI_send_word@data+2
  6451  0031B2  C094  F02C         	movff	DacSetValue@retVal+3,SWSPI_send_word@data+3
  6452  0031B6  0E01               	movlw	1
  6453  0031B8  6E2D               	movwf	SWSPI_send_word@dataSize,c
  6454  0031BA  0E02               	movlw	2
  6455  0031BC  EC21  F018         	call	_SWSPI_send_word
  6456                           
  6457                           ;DacApp.c: 37: int8_t dacIndex = (retVal.num >> 14);
  6458  0031C0  C091  F08C         	movff	DacSetValue@retVal,??_DacSetValue
  6459  0031C4  C092  F08D         	movff	DacSetValue@retVal+1,??_DacSetValue+1
  6460  0031C8  C093  F08E         	movff	DacSetValue@retVal+2,??_DacSetValue+2
  6461  0031CC  C094  F08F         	movff	DacSetValue@retVal+3,??_DacSetValue+3
  6462  0031D0  0E0F               	movlw	15
  6463  0031D2  D006               	goto	u8920
  6464  0031D4                     u8925:
  6465  0031D4  0100               	movlb	0	; () banked
  6466  0031D6  90D8               	bcf	status,0,c
  6467  0031D8  338F               	rrcf	(??_DacSetValue+3)& (0+255),f,b
  6468  0031DA  338E               	rrcf	(??_DacSetValue+2)& (0+255),f,b
  6469  0031DC  338D               	rrcf	(??_DacSetValue+1)& (0+255),f,b
  6470  0031DE  338C               	rrcf	??_DacSetValue& (0+255),f,b
  6471  0031E0                     u8920:
  6472  0031E0  2EE8               	decfsz	wreg,f,c
  6473  0031E2  D7F8               	goto	u8925
  6474  0031E4  518C               	movf	??_DacSetValue& (0+255),w,b
  6475  0031E6  6F90               	movwf	DacSetValue@dacIndex& (0+255),b
  6476                           
  6477                           ; BSR set to: 0
  6478                           ;DacApp.c: 38: StoreIntInEeprom(retVal.num, (0x40) | DAC_ADDRES[dacIndex], 2);
  6479  0031E8  C091  F021         	movff	DacSetValue@retVal,StoreIntInEeprom@data
  6480  0031EC  C092  F022         	movff	DacSetValue@retVal+1,StoreIntInEeprom@data+1
  6481  0031F0  C093  F023         	movff	DacSetValue@retVal+2,StoreIntInEeprom@data+2
  6482  0031F4  C094  F024         	movff	DacSetValue@retVal+3,StoreIntInEeprom@data+3
  6483  0031F8  5190               	movf	DacSetValue@dacIndex& (0+255),w,b
  6484  0031FA  0D01               	mullw	1
  6485  0031FC  0E53               	movlw	low _DAC_ADDRES
  6486  0031FE  24F3               	addwf	prodl,w,c
  6487  003200  6EF6               	movwf	tblptrl,c
  6488  003202  0E06               	movlw	high _DAC_ADDRES
  6489  003204  20F4               	addwfc	prodh,w,c
  6490  003206  6EF7               	movwf	tblptrh,c
  6491  003208                     	if	0	;There are less than 3 active tblptr bytes
  6492  003208                     	endif
  6493  003208  0008               	tblrd		*
  6494  00320A  50F5               	movf	tablat,w,c
  6495  00320C  0940               	iorlw	64
  6496  00320E  6E25               	movwf	StoreIntInEeprom@address,c
  6497  003210  0E00               	movlw	0
  6498  003212  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  6499  003214  0E02               	movlw	2
  6500  003216  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  6501  003218  EC4D  F01F         	call	_StoreIntInEeprom	;wreg free
  6502                           
  6503                           ;DacApp.c: 41: SendAckMessage((MSG_GROUPS)DAC_MSG, (MSG_REQUEST)DAC_SET_VALUE);
  6504  00321C  0E61               	movlw	97
  6505  00321E  6E24               	movwf	SendAckMessage@inRequest,c
  6506  003220  0E06               	movlw	6
  6507  003222  ECE5  F01D         	call	_SendAckMessage
  6508  003226  0012               	return		;funcret
  6509  003228                     __end_of_DacSetValue:
  6510                           	opt stack 0
  6511                           tosu	equ	0xFFF
  6512                           tosh	equ	0xFFE
  6513                           tosl	equ	0xFFD
  6514                           pclath	equ	0xFFA
  6515                           tblptru	equ	0xFF8
  6516                           tblptrh	equ	0xFF7
  6517                           tblptrl	equ	0xFF6
  6518                           tablat	equ	0xFF5
  6519                           prodh	equ	0xFF4
  6520                           prodl	equ	0xFF3
  6521                           postinc0	equ	0xFEE
  6522                           plusw0	equ	0xFEB
  6523                           wreg	equ	0xFE8
  6524                           postdec1	equ	0xFE5
  6525                           fsr1l	equ	0xFE1
  6526                           indf2	equ	0xFDF
  6527                           postinc2	equ	0xFDE
  6528                           plusw2	equ	0xFDB
  6529                           fsr2h	equ	0xFDA
  6530                           fsr2l	equ	0xFD9
  6531                           status	equ	0xFD8
  6532                           
  6533 ;; *************** function _GetIntFromUartData *****************
  6534 ;; Defined at:
  6535 ;;		line 46 in file "SystemCommon.c"
  6536 ;; Parameters:    Size  Location     Type
  6537 ;;  num             1    wreg     char 
  6538 ;;  data            2    6[BANK0 ] PTR unsigned char 
  6539 ;;		 -> rxMsgData(20), 
  6540 ;; Auto vars:     Size  Location     Type
  6541 ;;  num             1   26[BANK0 ] char 
  6542 ;;  idxCon          2   36[BANK0 ] int 
  6543 ;;  dataRegArr     10   16[BANK0 ] unsigned char [10]
  6544 ;;  retVal          8   28[BANK0 ] struct .
  6545 ;;  idxData         1   38[BANK0 ] unsigned char 
  6546 ;;  recVal          1   27[BANK0 ] unsigned char 
  6547 ;; Return value:  Size  Location     Type
  6548 ;;                  8    6[BANK0 ] struct .
  6549 ;; Registers used:
  6550 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6551 ;; Tracked objects:
  6552 ;;		On entry : 0/0
  6553 ;;		On exit  : 0/0
  6554 ;;		Unchanged: 0/0
  6555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6556 ;;      Params:         0       8       0       0       0       0       0
  6557 ;;      Locals:         0      23       0       0       0       0       0
  6558 ;;      Temps:          0       2       0       0       0       0       0
  6559 ;;      Totals:         0      33       0       0       0       0       0
  6560 ;;Total ram usage:       33 bytes
  6561 ;; Hardware stack levels used:    1
  6562 ;; Hardware stack levels required when called:    7
  6563 ;; This function calls:
  6564 ;;		_ZeroArray
  6565 ;;		_strtol
  6566 ;; This function is called by:
  6567 ;;		_FlashReadUart
  6568 ;;		_DacSetValue
  6569 ;;		_UpdateSynthFreq
  6570 ;; This function uses a non-reentrant model
  6571 ;;
  6572                           
  6573                           	psect	text21
  6574  001DE0                     __ptext21:
  6575                           	opt stack 0
  6576  001DE0                     _GetIntFromUartData:
  6577                           	opt stack 20
  6578                           
  6579                           ;incstack = 0
  6580                           ;GetIntFromUartData@num stored from wreg
  6581  001DE0  0100               	movlb	0	; () banked
  6582  001DE2  6F7A               	movwf	GetIntFromUartData@num& (0+255),b
  6583                           
  6584                           ;SystemCommon.c: 48: INT_VAL retVal;
  6585                           ;SystemCommon.c: 49: retVal.num = 0;
  6586  001DE4  0E00               	movlw	0
  6587  001DE6  0100               	movlb	0	; () banked
  6588  001DE8  6F7C               	movwf	GetIntFromUartData@retVal& (0+255),b
  6589  001DEA  0E00               	movlw	0
  6590  001DEC  6F7D               	movwf	(GetIntFromUartData@retVal+1)& (0+255),b
  6591  001DEE  0E00               	movlw	0
  6592  001DF0  6F7E               	movwf	(GetIntFromUartData@retVal+2)& (0+255),b
  6593  001DF2  0E00               	movlw	0
  6594  001DF4  6F7F               	movwf	(GetIntFromUartData@retVal+3)& (0+255),b
  6595                           
  6596                           ;SystemCommon.c: 50: retVal.con = 0;
  6597  001DF6  0E00               	movlw	0
  6598  001DF8  6F80               	movwf	(GetIntFromUartData@retVal+4)& (0+255),b
  6599  001DFA  0E00               	movlw	0
  6600  001DFC  6F81               	movwf	(GetIntFromUartData@retVal+5)& (0+255),b
  6601  001DFE  0E00               	movlw	0
  6602  001E00  6F82               	movwf	(GetIntFromUartData@retVal+6)& (0+255),b
  6603  001E02  0E00               	movlw	0
  6604  001E04  6F83               	movwf	(GetIntFromUartData@retVal+7)& (0+255),b
  6605                           
  6606                           ;SystemCommon.c: 51: uint8_t idxData = 0;
  6607  001E06  0E00               	movlw	0
  6608  001E08  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  6609                           
  6610                           ;SystemCommon.c: 52: char recVal = (0);
  6611  001E0A  0E00               	movlw	0
  6612  001E0C  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6613                           
  6614                           ; BSR set to: 0
  6615                           ;SystemCommon.c: 54: char dataRegArr[0xA];
  6616                           ;SystemCommon.c: 55: ZeroArray(dataRegArr, 0xA);
  6617  001E0E  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6618  001E10  6E20               	movwf	ZeroArray@array,c
  6619  001E12  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6620  001E14  6E21               	movwf	ZeroArray@array+1,c
  6621  001E16  0E00               	movlw	0
  6622  001E18  6E23               	movwf	ZeroArray@size+1,c
  6623  001E1A  0E0A               	movlw	10
  6624  001E1C  6E22               	movwf	ZeroArray@size,c
  6625  001E1E  EC95  F021         	call	_ZeroArray	;wreg free
  6626                           
  6627                           ;SystemCommon.c: 57: for(idxData = 0; idxData < 0xA; idxData++)
  6628  001E22  0E00               	movlw	0
  6629  001E24  0100               	movlb	0	; () banked
  6630  001E26  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  6631  001E28                     l8051:
  6632                           
  6633                           ; BSR set to: 0
  6634  001E28  0E09               	movlw	9
  6635  001E2A  6586               	cpfsgt	GetIntFromUartData@idxData& (0+255),b
  6636  001E2C  D001               	goto	l1418
  6637  001E2E  D01D               	goto	u8340
  6638  001E30                     l1418:
  6639                           
  6640                           ; BSR set to: 0
  6641                           ;SystemCommon.c: 58: {
  6642                           ;SystemCommon.c: 59: recVal = data[idxData];
  6643                           
  6644                           ; BSR set to: 0
  6645  001E30  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6646  001E32  0D01               	mullw	1
  6647  001E34  50F3               	movf	prodl,w,c
  6648  001E36  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6649  001E38  6ED9               	movwf	fsr2l,c
  6650  001E3A  50F4               	movf	prodh,w,c
  6651  001E3C  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6652  001E3E  6EDA               	movwf	fsr2h,c
  6653  001E40  50DF               	movf	indf2,w,c
  6654  001E42  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6655                           
  6656                           ; BSR set to: 0
  6657                           ;SystemCommon.c: 60: if(recVal == 0x10)
  6658  001E44  0E10               	movlw	16
  6659  001E46  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  6660  001E48  A4D8               	btfss	status,2,c
  6661  001E4A  D002               	goto	l1420
  6662                           
  6663                           ; BSR set to: 0
  6664                           ;SystemCommon.c: 61: {
  6665                           ;SystemCommon.c: 62: idxData++;
  6666  001E4C  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  6667                           
  6668                           ;SystemCommon.c: 63: break;
  6669  001E4E  D00D               	goto	u8340
  6670  001E50                     l1420:
  6671                           
  6672                           ; BSR set to: 0
  6673                           ;SystemCommon.c: 65: else
  6674                           ;SystemCommon.c: 66: {
  6675                           ;SystemCommon.c: 67: dataRegArr[idxData] = recVal + '0';
  6676                           
  6677                           ; BSR set to: 0
  6678  001E50  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6679  001E52  0D01               	mullw	1
  6680  001E54  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6681  001E56  24F3               	addwf	prodl,w,c
  6682  001E58  6ED9               	movwf	fsr2l,c
  6683  001E5A  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6684  001E5C  20F4               	addwfc	prodh,w,c
  6685  001E5E  6EDA               	movwf	fsr2h,c
  6686  001E60  517B               	movf	GetIntFromUartData@recVal& (0+255),w,b
  6687  001E62  0F30               	addlw	48
  6688  001E64  6EDF               	movwf	indf2,c
  6689                           
  6690                           ; BSR set to: 0
  6691                           
  6692                           ; BSR set to: 0
  6693  001E66  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  6694  001E68  D7DF               	goto	l8051
  6695  001E6A                     u8340:
  6696                           
  6697                           ; BSR set to: 0
  6698                           ;SystemCommon.c: 68: }
  6699                           ;SystemCommon.c: 69: }
  6700                           ;SystemCommon.c: 70: retVal.num = strtol(dataRegArr, (0), num);
  6701                           
  6702                           ; BSR set to: 0
  6703  001E6A  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6704  001E6C  6E26               	movwf	strtol@s,c
  6705  001E6E  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6706  001E70  6E27               	movwf	strtol@s+1,c
  6707  001E72  0E00               	movlw	0
  6708  001E74  6E28               	movwf	strtol@endptr,c
  6709  001E76  0E00               	movlw	0
  6710  001E78  6E29               	movwf	strtol@endptr+1,c
  6711  001E7A  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  6712  001E7C  6E2A               	movwf	strtol@base,c
  6713  001E7E  6A2B               	clrf	strtol@base+1,c
  6714  001E80  BE2A               	btfsc	strtol@base,7,c
  6715  001E82  062B               	decf	strtol@base+1,f,c
  6716  001E84  EC6E  F00C         	call	_strtol	;wreg free
  6717  001E88  C026  F07C         	movff	?_strtol,GetIntFromUartData@retVal
  6718  001E8C  C027  F07D         	movff	?_strtol+1,GetIntFromUartData@retVal+1
  6719  001E90  C028  F07E         	movff	?_strtol+2,GetIntFromUartData@retVal+2
  6720  001E94  C029  F07F         	movff	?_strtol+3,GetIntFromUartData@retVal+3
  6721                           
  6722                           ;SystemCommon.c: 72: ZeroArray(dataRegArr, 0xA);
  6723  001E98  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6724  001E9A  6E20               	movwf	ZeroArray@array,c
  6725  001E9C  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6726  001E9E  6E21               	movwf	ZeroArray@array+1,c
  6727  001EA0  0E00               	movlw	0
  6728  001EA2  6E23               	movwf	ZeroArray@size+1,c
  6729  001EA4  0E0A               	movlw	10
  6730  001EA6  6E22               	movwf	ZeroArray@size,c
  6731  001EA8  EC95  F021         	call	_ZeroArray	;wreg free
  6732                           
  6733                           ;SystemCommon.c: 74: for(int idxCon = 0; idxCon < 0xA; idxCon++)
  6734  001EAC  0E00               	movlw	0
  6735  001EAE  0100               	movlb	0	; () banked
  6736  001EB0  6F85               	movwf	(GetIntFromUartData@idxCon+1)& (0+255),b
  6737  001EB2  0E00               	movlw	0
  6738  001EB4  6F84               	movwf	GetIntFromUartData@idxCon& (0+255),b
  6739  001EB6                     l8073:
  6740                           
  6741                           ; BSR set to: 0
  6742  001EB6  BF85               	btfsc	(GetIntFromUartData@idxCon+1)& (0+255),7,b
  6743  001EB8  D006               	goto	l1422
  6744  001EBA  5185               	movf	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6745  001EBC  E12E               	bnz	l8091
  6746  001EBE  0E0A               	movlw	10
  6747  001EC0  5D84               	subwf	GetIntFromUartData@idxCon& (0+255),w,b
  6748  001EC2  B0D8               	btfsc	status,0,c
  6749  001EC4  D02A               	goto	u8370
  6750  001EC6                     l1422:
  6751                           
  6752                           ; BSR set to: 0
  6753                           ;SystemCommon.c: 75: {
  6754                           ;SystemCommon.c: 76: recVal = data[idxData + idxCon];
  6755                           
  6756                           ; BSR set to: 0
  6757  001EC6  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6758  001EC8  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6759  001ECA  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  6760  001ECC  0E00               	movlw	0
  6761  001ECE  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6762  001ED0  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  6763  001ED2  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  6764  001ED4  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6765  001ED6  6ED9               	movwf	fsr2l,c
  6766  001ED8  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  6767  001EDA  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6768  001EDC  6EDA               	movwf	fsr2h,c
  6769  001EDE  50DF               	movf	indf2,w,c
  6770  001EE0  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6771                           
  6772                           ; BSR set to: 0
  6773                           ;SystemCommon.c: 77: if(recVal == 0x23)
  6774  001EE2  0E23               	movlw	35
  6775  001EE4  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  6776  001EE6  B4D8               	btfsc	status,2,c
  6777  001EE8  D018               	goto	u8370
  6778                           
  6779                           ; BSR set to: 0
  6780                           ;SystemCommon.c: 81: else
  6781                           ;SystemCommon.c: 82: {
  6782                           ;SystemCommon.c: 83: dataRegArr[idxCon] = data[idxCon + idxData] + '0';
  6783                           
  6784                           ; BSR set to: 0
  6785                           
  6786                           ; BSR set to: 0
  6787                           ;SystemCommon.c: 80: }
  6788                           
  6789                           ; BSR set to: 0
  6790                           ;SystemCommon.c: 78: {
  6791                           ;SystemCommon.c: 79: break;
  6792  001EEA  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6793  001EEC  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6794  001EEE  6ED9               	movwf	fsr2l,c
  6795  001EF0  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6796  001EF2  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6797  001EF4  6EDA               	movwf	fsr2h,c
  6798  001EF6  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6799  001EF8  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6800  001EFA  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  6801  001EFC  0E00               	movlw	0
  6802  001EFE  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6803  001F00  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  6804  001F02  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  6805  001F04  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6806  001F06  6EE1               	movwf	fsr1l,c
  6807  001F08  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  6808  001F0A  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6809  001F0C  6EE2               	movwf	fsr1h,c
  6810  001F0E  50E7               	movf	indf1,w,c
  6811  001F10  0F30               	addlw	48
  6812  001F12  6EDF               	movwf	indf2,c
  6813                           
  6814                           ; BSR set to: 0
  6815                           
  6816                           ; BSR set to: 0
  6817  001F14  4B84               	infsnz	GetIntFromUartData@idxCon& (0+255),f,b
  6818  001F16  2B85               	incf	(GetIntFromUartData@idxCon+1)& (0+255),f,b
  6819  001F18  D7CE               	goto	l8073
  6820  001F1A                     u8370:
  6821  001F1A                     l8091:
  6822                           
  6823                           ; BSR set to: 0
  6824                           ;SystemCommon.c: 84: }
  6825                           ;SystemCommon.c: 85: }
  6826                           ;SystemCommon.c: 86: retVal.con = strtol(dataRegArr, (0), num);
  6827  001F1A  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6828  001F1C  6E26               	movwf	strtol@s,c
  6829  001F1E  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6830  001F20  6E27               	movwf	strtol@s+1,c
  6831  001F22  0E00               	movlw	0
  6832  001F24  6E28               	movwf	strtol@endptr,c
  6833  001F26  0E00               	movlw	0
  6834  001F28  6E29               	movwf	strtol@endptr+1,c
  6835  001F2A  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  6836  001F2C  6E2A               	movwf	strtol@base,c
  6837  001F2E  6A2B               	clrf	strtol@base+1,c
  6838  001F30  BE2A               	btfsc	strtol@base,7,c
  6839  001F32  062B               	decf	strtol@base+1,f,c
  6840  001F34  EC6E  F00C         	call	_strtol	;wreg free
  6841  001F38  C026  F080         	movff	?_strtol,GetIntFromUartData@retVal+4
  6842  001F3C  C027  F081         	movff	?_strtol+1,GetIntFromUartData@retVal+5
  6843  001F40  C028  F082         	movff	?_strtol+2,GetIntFromUartData@retVal+6
  6844  001F44  C029  F083         	movff	?_strtol+3,GetIntFromUartData@retVal+7
  6845                           
  6846                           ;SystemCommon.c: 88: return retVal;
  6847  001F48  EE20  F07C         	lfsr	2,GetIntFromUartData@retVal
  6848  001F4C  EE00  F066         	lfsr	0,?_GetIntFromUartData
  6849  001F50  0E07               	movlw	7
  6850  001F52                     u8381:
  6851  001F52  CFDB FFEB          	movff	plusw2,plusw0
  6852  001F56  06E8               	decf	wreg,f,c
  6853  001F58  E2FC               	bc	u8381
  6854  001F5A  0012               	return	
  6855  001F5C                     __end_of_GetIntFromUartData:
  6856                           	opt stack 0
  6857                           tosu	equ	0xFFF
  6858                           tosh	equ	0xFFE
  6859                           tosl	equ	0xFFD
  6860                           pclath	equ	0xFFA
  6861                           tblptru	equ	0xFF8
  6862                           tblptrh	equ	0xFF7
  6863                           tblptrl	equ	0xFF6
  6864                           tablat	equ	0xFF5
  6865                           prodh	equ	0xFF4
  6866                           prodl	equ	0xFF3
  6867                           postinc0	equ	0xFEE
  6868                           plusw0	equ	0xFEB
  6869                           wreg	equ	0xFE8
  6870                           indf1	equ	0xFE7
  6871                           postdec1	equ	0xFE5
  6872                           fsr1h	equ	0xFE2
  6873                           fsr1l	equ	0xFE1
  6874                           indf2	equ	0xFDF
  6875                           postinc2	equ	0xFDE
  6876                           plusw2	equ	0xFDB
  6877                           fsr2h	equ	0xFDA
  6878                           fsr2l	equ	0xFD9
  6879                           status	equ	0xFD8
  6880                           
  6881 ;; *************** function _strtol *****************
  6882 ;; Defined at:
  6883 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  6884 ;; Parameters:    Size  Location     Type
  6885 ;;  s               2   37[COMRAM] PTR const unsigned char 
  6886 ;;		 -> GetIntFromUartData@dataRegArr(10), 
  6887 ;;  endptr          2   39[COMRAM] PTR PTR unsigned char 
  6888 ;;		 -> NULL(0), 
  6889 ;;  base            2   41[COMRAM] int 
  6890 ;; Auto vars:     Size  Location     Type
  6891 ;;  a               4    1[BANK0 ] long 
  6892 ;;  c               1    5[BANK0 ] unsigned char 
  6893 ;;  sign            1    0[BANK0 ] unsigned char 
  6894 ;; Return value:  Size  Location     Type
  6895 ;;                  4   37[COMRAM] long 
  6896 ;; Registers used:
  6897 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6898 ;; Tracked objects:
  6899 ;;		On entry : 0/0
  6900 ;;		On exit  : 0/0
  6901 ;;		Unchanged: 0/0
  6902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6903 ;;      Params:         6       0       0       0       0       0       0
  6904 ;;      Locals:         0       6       0       0       0       0       0
  6905 ;;      Temps:          4       0       0       0       0       0       0
  6906 ;;      Totals:        10       6       0       0       0       0       0
  6907 ;;Total ram usage:       16 bytes
  6908 ;; Hardware stack levels used:    1
  6909 ;; Hardware stack levels required when called:    6
  6910 ;; This function calls:
  6911 ;;		___lmul
  6912 ;;		_isalpha
  6913 ;;		_isdigit
  6914 ;;		_isspace
  6915 ;;		_toupper
  6916 ;; This function is called by:
  6917 ;;		_GetIntFromUartData
  6918 ;; This function uses a non-reentrant model
  6919 ;;
  6920                           
  6921                           	psect	text22
  6922  0018DC                     __ptext22:
  6923                           	opt stack 0
  6924  0018DC                     _strtol:
  6925                           	opt stack 20
  6926                           
  6927                           ;incstack = 0
  6928  0018DC  C026  FFD9         	movff	strtol@s,fsr2l
  6929  0018E0  C027  FFDA         	movff	strtol@s+1,fsr2h
  6930  0018E4  50DF               	movf	indf2,w,c
  6931  0018E6  0100               	movlb	0	; () banked
  6932  0018E8  6F65               	movwf	strtol@c& (0+255),b
  6933                           
  6934                           ; BSR set to: 0
  6935  0018EA  4A26               	infsnz	strtol@s,f,c
  6936  0018EC  2A27               	incf	strtol@s+1,f,c
  6937                           
  6938                           ; BSR set to: 0
  6939  0018EE  5165               	movf	strtol@c& (0+255),w,b
  6940  0018F0  ECD6  F020         	call	_isspace
  6941  0018F4  B0D8               	btfsc	status,0,c
  6942  0018F6  D7F2               	goto	_strtol
  6943  0018F8  0E00               	movlw	0
  6944  0018FA  0100               	movlb	0	; () banked
  6945  0018FC  6F61               	movwf	strtol@a& (0+255),b
  6946  0018FE  0E00               	movlw	0
  6947  001900  6F62               	movwf	(strtol@a+1)& (0+255),b
  6948  001902  0E00               	movlw	0
  6949  001904  6F63               	movwf	(strtol@a+2)& (0+255),b
  6950  001906  0E00               	movlw	0
  6951  001908  6F64               	movwf	(strtol@a+3)& (0+255),b
  6952  00190A  0E00               	movlw	0
  6953  00190C  6F60               	movwf	strtol@sign& (0+255),b
  6954                           
  6955                           ; BSR set to: 0
  6956  00190E  0E2D               	movlw	45
  6957  001910  1965               	xorwf	strtol@c& (0+255),w,b
  6958  001912  A4D8               	btfss	status,2,c
  6959  001914  D003               	goto	l2189
  6960                           
  6961                           ; BSR set to: 0
  6962  001916  0E01               	movlw	1
  6963  001918  6F60               	movwf	strtol@sign& (0+255),b
  6964  00191A  D004               	goto	u8170
  6965  00191C                     l2189:
  6966                           
  6967                           ; BSR set to: 0
  6968                           
  6969                           ; BSR set to: 0
  6970  00191C  0E2B               	movlw	43
  6971  00191E  1965               	xorwf	strtol@c& (0+255),w,b
  6972  001920  A4D8               	btfss	status,2,c
  6973  001922  D008               	goto	l2191
  6974  001924                     u8170:
  6975                           
  6976                           ; BSR set to: 0
  6977  001924  C026  FFD9         	movff	strtol@s,fsr2l
  6978  001928  C027  FFDA         	movff	strtol@s+1,fsr2h
  6979  00192C  50DF               	movf	indf2,w,c
  6980  00192E  6F65               	movwf	strtol@c& (0+255),b
  6981                           
  6982                           ; BSR set to: 0
  6983  001930  4A26               	infsnz	strtol@s,f,c
  6984  001932  2A27               	incf	strtol@s+1,f,c
  6985  001934                     l2191:
  6986                           
  6987                           ; BSR set to: 0
  6988                           
  6989                           ; BSR set to: 0
  6990                           
  6991                           ; BSR set to: 0
  6992  001934  0E30               	movlw	48
  6993  001936  1965               	xorwf	strtol@c& (0+255),w,b
  6994  001938  A4D8               	btfss	status,2,c
  6995  00193A  D02E               	goto	l2199
  6996                           
  6997                           ; BSR set to: 0
  6998  00193C  C026  FFD9         	movff	strtol@s,fsr2l
  6999  001940  C027  FFDA         	movff	strtol@s+1,fsr2h
  7000  001944  50DF               	movf	indf2,w,c
  7001  001946  6F65               	movwf	strtol@c& (0+255),b
  7002                           
  7003                           ; BSR set to: 0
  7004  001948  4A26               	infsnz	strtol@s,f,c
  7005  00194A  2A27               	incf	strtol@s+1,f,c
  7006                           
  7007                           ; BSR set to: 0
  7008  00194C  502A               	movf	strtol@base,w,c
  7009  00194E  102B               	iorwf	strtol@base+1,w,c
  7010  001950  B4D8               	btfsc	status,2,c
  7011  001952  D005               	goto	u8200
  7012                           
  7013                           ; BSR set to: 0
  7014  001954  0E10               	movlw	16
  7015  001956  182A               	xorwf	strtol@base,w,c
  7016  001958  102B               	iorwf	strtol@base+1,w,c
  7017  00195A  A4D8               	btfss	status,2,c
  7018  00195C  D015               	goto	l2193
  7019  00195E                     u8200:
  7020                           
  7021                           ; BSR set to: 0
  7022                           
  7023                           ; BSR set to: 0
  7024  00195E  0E78               	movlw	120
  7025  001960  1965               	xorwf	strtol@c& (0+255),w,b
  7026  001962  B4D8               	btfsc	status,2,c
  7027  001964  D004               	goto	u8220
  7028                           
  7029                           ; BSR set to: 0
  7030  001966  0E58               	movlw	88
  7031  001968  1965               	xorwf	strtol@c& (0+255),w,b
  7032  00196A  A4D8               	btfss	status,2,c
  7033  00196C  D00D               	goto	l2193
  7034  00196E                     u8220:
  7035                           
  7036                           ; BSR set to: 0
  7037                           
  7038                           ; BSR set to: 0
  7039  00196E  0E00               	movlw	0
  7040  001970  6E2B               	movwf	strtol@base+1,c
  7041  001972  0E10               	movlw	16
  7042  001974  6E2A               	movwf	strtol@base,c
  7043                           
  7044                           ; BSR set to: 0
  7045  001976  C026  FFD9         	movff	strtol@s,fsr2l
  7046  00197A  C027  FFDA         	movff	strtol@s+1,fsr2h
  7047  00197E  50DF               	movf	indf2,w,c
  7048  001980  6F65               	movwf	strtol@c& (0+255),b
  7049                           
  7050                           ; BSR set to: 0
  7051  001982  4A26               	infsnz	strtol@s,f,c
  7052  001984  2A27               	incf	strtol@s+1,f,c
  7053  001986  D008               	goto	l2199
  7054  001988                     l2193:
  7055                           
  7056                           ; BSR set to: 0
  7057                           
  7058                           ; BSR set to: 0
  7059  001988  502A               	movf	strtol@base,w,c
  7060  00198A  102B               	iorwf	strtol@base+1,w,c
  7061  00198C  A4D8               	btfss	status,2,c
  7062  00198E  D004               	goto	l2199
  7063                           
  7064                           ; BSR set to: 0
  7065  001990  0E00               	movlw	0
  7066  001992  6E2B               	movwf	strtol@base+1,c
  7067  001994  0E08               	movlw	8
  7068  001996  6E2A               	movwf	strtol@base,c
  7069  001998                     l2199:
  7070                           
  7071                           ; BSR set to: 0
  7072                           
  7073                           ; BSR set to: 0
  7074                           
  7075                           ; BSR set to: 0
  7076                           
  7077                           ; BSR set to: 0
  7078  001998  502A               	movf	strtol@base,w,c
  7079  00199A  102B               	iorwf	strtol@base+1,w,c
  7080  00199C  A4D8               	btfss	status,2,c
  7081  00199E  D004               	goto	l2200
  7082                           
  7083                           ; BSR set to: 0
  7084  0019A0  0E00               	movlw	0
  7085  0019A2  6E2B               	movwf	strtol@base+1,c
  7086  0019A4  0E0A               	movlw	10
  7087  0019A6  6E2A               	movwf	strtol@base,c
  7088  0019A8                     l2200:
  7089                           
  7090                           ; BSR set to: 0
  7091                           
  7092                           ; BSR set to: 0
  7093                           
  7094                           ; BSR set to: 0
  7095  0019A8  5165               	movf	strtol@c& (0+255),w,b
  7096  0019AA  ECC2  F020         	call	_isalpha
  7097  0019AE  A0D8               	btfss	status,0,c
  7098  0019B0  D008               	goto	l2202
  7099  0019B2  0100               	movlb	0	; () banked
  7100  0019B4  5165               	movf	strtol@c& (0+255),w,b
  7101  0019B6  ECEF  F021         	call	_toupper
  7102  0019BA  0FC9               	addlw	201
  7103  0019BC  0100               	movlb	0	; () banked
  7104  0019BE  6F65               	movwf	strtol@c& (0+255),b
  7105  0019C0  D009               	goto	l2205
  7106  0019C2                     l2202:
  7107                           
  7108                           ; BSR set to: 0
  7109  0019C2  0100               	movlb	0	; () banked
  7110  0019C4  5165               	movf	strtol@c& (0+255),w,b
  7111  0019C6  EC77  F021         	call	_isdigit
  7112  0019CA  A0D8               	btfss	status,0,c
  7113  0019CC  D039               	goto	l2206
  7114  0019CE  0E30               	movlw	48
  7115  0019D0  0100               	movlb	0	; () banked
  7116  0019D2  5F65               	subwf	strtol@c& (0+255),f,b
  7117  0019D4                     l2205:
  7118                           
  7119                           ; BSR set to: 0
  7120                           
  7121                           ; BSR set to: 0
  7122                           
  7123                           ; BSR set to: 0
  7124  0019D4  5165               	movf	strtol@c& (0+255),w,b
  7125  0019D6  6E2C               	movwf	??_strtol& (0+255),c
  7126  0019D8  6A2D               	clrf	(??_strtol+1)& (0+255),c
  7127  0019DA  502A               	movf	strtol@base,w,c
  7128  0019DC  5C2C               	subwf	??_strtol,w,c
  7129  0019DE  502D               	movf	??_strtol+1,w,c
  7130  0019E0  0A80               	xorlw	128
  7131  0019E2  6E2E               	movwf	(??_strtol+2)& (0+255),c
  7132  0019E4  502B               	movf	strtol@base+1,w,c
  7133  0019E6  0A80               	xorlw	128
  7134  0019E8  582E               	subwfb	(??_strtol+2)& (0+255),w,c
  7135  0019EA  B0D8               	btfsc	status,0,c
  7136  0019EC  D029               	goto	l2206
  7137                           
  7138                           ; BSR set to: 0
  7139                           
  7140                           ; BSR set to: 0
  7141                           
  7142                           ; BSR set to: 0
  7143  0019EE  C02A  F01A         	movff	strtol@base,___lmul@multiplier
  7144  0019F2  C02B  F01B         	movff	strtol@base+1,___lmul@multiplier+1
  7145  0019F6  0E00               	movlw	0
  7146  0019F8  BE1B               	btfsc	___lmul@multiplier+1,7,c
  7147  0019FA  0EFF               	movlw	-1
  7148  0019FC  6E1C               	movwf	___lmul@multiplier+2,c
  7149  0019FE  6E1D               	movwf	___lmul@multiplier+3,c
  7150  001A00  C061  F01E         	movff	strtol@a,___lmul@multiplicand
  7151  001A04  C062  F01F         	movff	strtol@a+1,___lmul@multiplicand+1
  7152  001A08  C063  F020         	movff	strtol@a+2,___lmul@multiplicand+2
  7153  001A0C  C064  F021         	movff	strtol@a+3,___lmul@multiplicand+3
  7154  001A10  EC67  F01D         	call	___lmul	;wreg free
  7155  001A14  0100               	movlb	0	; () banked
  7156  001A16  5165               	movf	strtol@c& (0+255),w,b
  7157  001A18  241A               	addwf	?___lmul,w,c
  7158  001A1A  6F61               	movwf	strtol@a& (0+255),b
  7159  001A1C  0E00               	movlw	0
  7160  001A1E  201B               	addwfc	?___lmul+1,w,c
  7161  001A20  6F62               	movwf	(strtol@a+1)& (0+255),b
  7162  001A22  0E00               	movlw	0
  7163  001A24  201C               	addwfc	?___lmul+2,w,c
  7164  001A26  6F63               	movwf	(strtol@a+2)& (0+255),b
  7165  001A28  0E00               	movlw	0
  7166  001A2A  201D               	addwfc	?___lmul+3,w,c
  7167  001A2C  6F64               	movwf	(strtol@a+3)& (0+255),b
  7168                           
  7169                           ; BSR set to: 0
  7170  001A2E  C026  FFD9         	movff	strtol@s,fsr2l
  7171  001A32  C027  FFDA         	movff	strtol@s+1,fsr2h
  7172  001A36  50DF               	movf	indf2,w,c
  7173  001A38  6F65               	movwf	strtol@c& (0+255),b
  7174                           
  7175                           ; BSR set to: 0
  7176  001A3A  4A26               	infsnz	strtol@s,f,c
  7177  001A3C  2A27               	incf	strtol@s+1,f,c
  7178  001A3E  D7B4               	goto	l2200
  7179  001A40                     l2206:
  7180                           
  7181                           ; BSR set to: 0
  7182  001A40  5028               	movf	strtol@endptr,w,c
  7183  001A42  1029               	iorwf	strtol@endptr+1,w,c
  7184  001A44  B4D8               	btfsc	status,2,c
  7185  001A46  D00E               	goto	l2208
  7186  001A48  0EFF               	movlw	255
  7187  001A4A  2426               	addwf	strtol@s,w,c
  7188  001A4C  6E2C               	movwf	??_strtol& (0+255),c
  7189  001A4E  0EFF               	movlw	255
  7190  001A50  2027               	addwfc	strtol@s+1,w,c
  7191  001A52  6E2D               	movwf	(??_strtol+1)& (0+255),c
  7192  001A54  C028  FFD9         	movff	strtol@endptr,fsr2l
  7193  001A58  C029  FFDA         	movff	strtol@endptr+1,fsr2h
  7194  001A5C  C02C  FFDE         	movff	??_strtol,postinc2
  7195  001A60  C02D  FFDD         	movff	??_strtol+1,postdec2
  7196  001A64                     l2208:
  7197  001A64  0100               	movlb	0	; () banked
  7198  001A66  5160               	movf	strtol@sign& (0+255),w,b
  7199  001A68  B4D8               	btfsc	status,2,c
  7200  001A6A  D01A               	goto	l2209
  7201                           
  7202                           ; BSR set to: 0
  7203  001A6C  C061  F02C         	movff	strtol@a,??_strtol
  7204  001A70  C062  F02D         	movff	strtol@a+1,??_strtol+1
  7205  001A74  C063  F02E         	movff	strtol@a+2,??_strtol+2
  7206  001A78  C064  F02F         	movff	strtol@a+3,??_strtol+3
  7207  001A7C  1E2C               	comf	??_strtol,f,c
  7208  001A7E  1E2D               	comf	??_strtol+1,f,c
  7209  001A80  1E2E               	comf	??_strtol+2,f,c
  7210  001A82  1E2F               	comf	??_strtol+3,f,c
  7211  001A84  2A2C               	incf	??_strtol,f,c
  7212  001A86  0E00               	movlw	0
  7213  001A88  222D               	addwfc	??_strtol+1,f,c
  7214  001A8A  222E               	addwfc	??_strtol+2,f,c
  7215  001A8C  222F               	addwfc	??_strtol+3,f,c
  7216  001A8E  C02C  F026         	movff	??_strtol,?_strtol
  7217  001A92  C02D  F027         	movff	??_strtol+1,?_strtol+1
  7218  001A96  C02E  F028         	movff	??_strtol+2,?_strtol+2
  7219  001A9A  C02F  F029         	movff	??_strtol+3,?_strtol+3
  7220                           
  7221                           ; BSR set to: 0
  7222  001A9E  0012               	return	
  7223  001AA0                     l2209:
  7224                           
  7225                           ; BSR set to: 0
  7226  001AA0  C061  F026         	movff	strtol@a,?_strtol
  7227  001AA4  C062  F027         	movff	strtol@a+1,?_strtol+1
  7228  001AA8  C063  F028         	movff	strtol@a+2,?_strtol+2
  7229  001AAC  C064  F029         	movff	strtol@a+3,?_strtol+3
  7230                           
  7231                           ; BSR set to: 0
  7232  001AB0  0012               	return		;funcret
  7233  001AB2                     __end_of_strtol:
  7234                           	opt stack 0
  7235                           tosu	equ	0xFFF
  7236                           tosh	equ	0xFFE
  7237                           tosl	equ	0xFFD
  7238                           pclath	equ	0xFFA
  7239                           tblptru	equ	0xFF8
  7240                           tblptrh	equ	0xFF7
  7241                           tblptrl	equ	0xFF6
  7242                           tablat	equ	0xFF5
  7243                           prodh	equ	0xFF4
  7244                           prodl	equ	0xFF3
  7245                           postinc0	equ	0xFEE
  7246                           plusw0	equ	0xFEB
  7247                           wreg	equ	0xFE8
  7248                           indf1	equ	0xFE7
  7249                           postdec1	equ	0xFE5
  7250                           fsr1h	equ	0xFE2
  7251                           fsr1l	equ	0xFE1
  7252                           indf2	equ	0xFDF
  7253                           postinc2	equ	0xFDE
  7254                           postdec2	equ	0xFDD
  7255                           plusw2	equ	0xFDB
  7256                           fsr2h	equ	0xFDA
  7257                           fsr2l	equ	0xFD9
  7258                           status	equ	0xFD8
  7259                           
  7260 ;; *************** function _toupper *****************
  7261 ;; Defined at:
  7262 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  7263 ;; Parameters:    Size  Location     Type
  7264 ;;  c               1    wreg     unsigned char 
  7265 ;; Auto vars:     Size  Location     Type
  7266 ;;  c               1   23[COMRAM] unsigned char 
  7267 ;; Return value:  Size  Location     Type
  7268 ;;                  1    wreg      unsigned char 
  7269 ;; Registers used:
  7270 ;;		wreg, status,2, status,0
  7271 ;; Tracked objects:
  7272 ;;		On entry : 0/0
  7273 ;;		On exit  : 0/0
  7274 ;;		Unchanged: 0/0
  7275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7276 ;;      Params:         0       0       0       0       0       0       0
  7277 ;;      Locals:         1       0       0       0       0       0       0
  7278 ;;      Temps:          0       0       0       0       0       0       0
  7279 ;;      Totals:         1       0       0       0       0       0       0
  7280 ;;Total ram usage:        1 bytes
  7281 ;; Hardware stack levels used:    1
  7282 ;; Hardware stack levels required when called:    4
  7283 ;; This function calls:
  7284 ;;		Nothing
  7285 ;; This function is called by:
  7286 ;;		_strtol
  7287 ;; This function uses a non-reentrant model
  7288 ;;
  7289                           
  7290                           	psect	text23
  7291  0043DE                     __ptext23:
  7292                           	opt stack 0
  7293  0043DE                     _toupper:
  7294                           	opt stack 21
  7295                           
  7296                           ; BSR set to: 0
  7297                           ;incstack = 0
  7298                           ;toupper@c stored from wreg
  7299  0043DE  6E18               	movwf	toupper@c,c
  7300  0043E0  0E7B               	movlw	123
  7301  0043E2  6018               	cpfslt	toupper@c,c
  7302  0043E4  D004               	goto	l2213
  7303  0043E6  0E60               	movlw	96
  7304  0043E8  6418               	cpfsgt	toupper@c,c
  7305  0043EA  D001               	goto	l2213
  7306  0043EC  9A18               	bcf	toupper@c,5,c
  7307  0043EE                     l2213:
  7308  0043EE  5018               	movf	toupper@c,w,c
  7309  0043F0  0012               	return	
  7310  0043F2                     __end_of_toupper:
  7311                           	opt stack 0
  7312                           tosu	equ	0xFFF
  7313                           tosh	equ	0xFFE
  7314                           tosl	equ	0xFFD
  7315                           pclath	equ	0xFFA
  7316                           tblptru	equ	0xFF8
  7317                           tblptrh	equ	0xFF7
  7318                           tblptrl	equ	0xFF6
  7319                           tablat	equ	0xFF5
  7320                           prodh	equ	0xFF4
  7321                           prodl	equ	0xFF3
  7322                           postinc0	equ	0xFEE
  7323                           plusw0	equ	0xFEB
  7324                           wreg	equ	0xFE8
  7325                           indf1	equ	0xFE7
  7326                           postdec1	equ	0xFE5
  7327                           fsr1h	equ	0xFE2
  7328                           fsr1l	equ	0xFE1
  7329                           indf2	equ	0xFDF
  7330                           postinc2	equ	0xFDE
  7331                           postdec2	equ	0xFDD
  7332                           plusw2	equ	0xFDB
  7333                           fsr2h	equ	0xFDA
  7334                           fsr2l	equ	0xFD9
  7335                           status	equ	0xFD8
  7336                           
  7337 ;; *************** function _isspace *****************
  7338 ;; Defined at:
  7339 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  7340 ;; Parameters:    Size  Location     Type
  7341 ;;  c               1    wreg     unsigned char 
  7342 ;; Auto vars:     Size  Location     Type
  7343 ;;  c               1   25[COMRAM] unsigned char 
  7344 ;; Return value:  Size  Location     Type
  7345 ;;		None               void
  7346 ;; Registers used:
  7347 ;;		wreg, status,2, status,0
  7348 ;; Tracked objects:
  7349 ;;		On entry : 0/0
  7350 ;;		On exit  : 0/0
  7351 ;;		Unchanged: 0/0
  7352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7353 ;;      Params:         0       0       0       0       0       0       0
  7354 ;;      Locals:         2       0       0       0       0       0       0
  7355 ;;      Temps:          1       0       0       0       0       0       0
  7356 ;;      Totals:         3       0       0       0       0       0       0
  7357 ;;Total ram usage:        3 bytes
  7358 ;; Hardware stack levels used:    1
  7359 ;; Hardware stack levels required when called:    4
  7360 ;; This function calls:
  7361 ;;		Nothing
  7362 ;; This function is called by:
  7363 ;;		_strtol
  7364 ;; This function uses a non-reentrant model
  7365 ;;
  7366                           
  7367                           	psect	text24
  7368  0041AC                     __ptext24:
  7369                           	opt stack 0
  7370  0041AC                     _isspace:
  7371                           	opt stack 21
  7372                           
  7373                           ;incstack = 0
  7374                           ;isspace@c stored from wreg
  7375  0041AC  6E1A               	movwf	isspace@c,c
  7376  0041AE  0E01               	movlw	1
  7377  0041B0  6E19               	movwf	_isspace$3323,c
  7378  0041B2  0E20               	movlw	32
  7379  0041B4  181A               	xorwf	isspace@c,w,c
  7380  0041B6  B4D8               	btfsc	status,2,c
  7381  0041B8  D008               	goto	l2295
  7382  0041BA  0E0E               	movlw	14
  7383  0041BC  601A               	cpfslt	isspace@c,c
  7384  0041BE  D003               	goto	u7940
  7385  0041C0  0E09               	movlw	9
  7386  0041C2  601A               	cpfslt	isspace@c,c
  7387  0041C4  D002               	goto	l2295
  7388  0041C6                     u7940:
  7389  0041C6  0E00               	movlw	0
  7390  0041C8  6E19               	movwf	_isspace$3323,c
  7391  0041CA                     l2295:
  7392  0041CA  C019  F018         	movff	_isspace$3323,??_isspace
  7393  0041CE  3018               	rrcf	??_isspace,w,c
  7394  0041D0  0012               	return	
  7395  0041D2                     __end_of_isspace:
  7396                           	opt stack 0
  7397                           tosu	equ	0xFFF
  7398                           tosh	equ	0xFFE
  7399                           tosl	equ	0xFFD
  7400                           pclath	equ	0xFFA
  7401                           tblptru	equ	0xFF8
  7402                           tblptrh	equ	0xFF7
  7403                           tblptrl	equ	0xFF6
  7404                           tablat	equ	0xFF5
  7405                           prodh	equ	0xFF4
  7406                           prodl	equ	0xFF3
  7407                           postinc0	equ	0xFEE
  7408                           plusw0	equ	0xFEB
  7409                           wreg	equ	0xFE8
  7410                           indf1	equ	0xFE7
  7411                           postdec1	equ	0xFE5
  7412                           fsr1h	equ	0xFE2
  7413                           fsr1l	equ	0xFE1
  7414                           indf2	equ	0xFDF
  7415                           postinc2	equ	0xFDE
  7416                           postdec2	equ	0xFDD
  7417                           plusw2	equ	0xFDB
  7418                           fsr2h	equ	0xFDA
  7419                           fsr2l	equ	0xFD9
  7420                           status	equ	0xFD8
  7421                           
  7422 ;; *************** function _isdigit *****************
  7423 ;; Defined at:
  7424 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  7425 ;; Parameters:    Size  Location     Type
  7426 ;;  c               1    wreg     unsigned char 
  7427 ;; Auto vars:     Size  Location     Type
  7428 ;;  c               1   25[COMRAM] unsigned char 
  7429 ;; Return value:  Size  Location     Type
  7430 ;;		None               void
  7431 ;; Registers used:
  7432 ;;		wreg, status,2, status,0
  7433 ;; Tracked objects:
  7434 ;;		On entry : 0/0
  7435 ;;		On exit  : 0/0
  7436 ;;		Unchanged: 0/0
  7437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7438 ;;      Params:         0       0       0       0       0       0       0
  7439 ;;      Locals:         2       0       0       0       0       0       0
  7440 ;;      Temps:          1       0       0       0       0       0       0
  7441 ;;      Totals:         3       0       0       0       0       0       0
  7442 ;;Total ram usage:        3 bytes
  7443 ;; Hardware stack levels used:    1
  7444 ;; Hardware stack levels required when called:    4
  7445 ;; This function calls:
  7446 ;;		Nothing
  7447 ;; This function is called by:
  7448 ;;		_strtol
  7449 ;; This function uses a non-reentrant model
  7450 ;;
  7451                           
  7452                           	psect	text25
  7453  0042EE                     __ptext25:
  7454                           	opt stack 0
  7455  0042EE                     _isdigit:
  7456                           	opt stack 21
  7457                           
  7458                           ;incstack = 0
  7459                           ;isdigit@c stored from wreg
  7460  0042EE  6E1A               	movwf	isdigit@c,c
  7461  0042F0  0E00               	movlw	0
  7462  0042F2  6E19               	movwf	_isdigit$3320,c
  7463  0042F4  0E3A               	movlw	58
  7464  0042F6  601A               	cpfslt	isdigit@c,c
  7465  0042F8  D005               	goto	l2290
  7466  0042FA  0E2F               	movlw	47
  7467  0042FC  641A               	cpfsgt	isdigit@c,c
  7468  0042FE  D002               	goto	l2290
  7469  004300  0E01               	movlw	1
  7470  004302  6E19               	movwf	_isdigit$3320,c
  7471  004304                     l2290:
  7472  004304  C019  F018         	movff	_isdigit$3320,??_isdigit
  7473  004308  3018               	rrcf	??_isdigit,w,c
  7474  00430A  0012               	return	
  7475  00430C                     __end_of_isdigit:
  7476                           	opt stack 0
  7477                           tosu	equ	0xFFF
  7478                           tosh	equ	0xFFE
  7479                           tosl	equ	0xFFD
  7480                           pclath	equ	0xFFA
  7481                           tblptru	equ	0xFF8
  7482                           tblptrh	equ	0xFF7
  7483                           tblptrl	equ	0xFF6
  7484                           tablat	equ	0xFF5
  7485                           prodh	equ	0xFF4
  7486                           prodl	equ	0xFF3
  7487                           postinc0	equ	0xFEE
  7488                           plusw0	equ	0xFEB
  7489                           wreg	equ	0xFE8
  7490                           indf1	equ	0xFE7
  7491                           postdec1	equ	0xFE5
  7492                           fsr1h	equ	0xFE2
  7493                           fsr1l	equ	0xFE1
  7494                           indf2	equ	0xFDF
  7495                           postinc2	equ	0xFDE
  7496                           postdec2	equ	0xFDD
  7497                           plusw2	equ	0xFDB
  7498                           fsr2h	equ	0xFDA
  7499                           fsr2l	equ	0xFD9
  7500                           status	equ	0xFD8
  7501                           
  7502 ;; *************** function _isalpha *****************
  7503 ;; Defined at:
  7504 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  7505 ;; Parameters:    Size  Location     Type
  7506 ;;  c               1    wreg     unsigned char 
  7507 ;; Auto vars:     Size  Location     Type
  7508 ;;  c               1   28[COMRAM] unsigned char 
  7509 ;; Return value:  Size  Location     Type
  7510 ;;		None               void
  7511 ;; Registers used:
  7512 ;;		wreg, status,2, status,0, cstack
  7513 ;; Tracked objects:
  7514 ;;		On entry : 0/0
  7515 ;;		On exit  : 0/0
  7516 ;;		Unchanged: 0/0
  7517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7518 ;;      Params:         0       0       0       0       0       0       0
  7519 ;;      Locals:         2       0       0       0       0       0       0
  7520 ;;      Temps:          1       0       0       0       0       0       0
  7521 ;;      Totals:         3       0       0       0       0       0       0
  7522 ;;Total ram usage:        3 bytes
  7523 ;; Hardware stack levels used:    1
  7524 ;; Hardware stack levels required when called:    5
  7525 ;; This function calls:
  7526 ;;		_isupper
  7527 ;; This function is called by:
  7528 ;;		_strtol
  7529 ;; This function uses a non-reentrant model
  7530 ;;
  7531                           
  7532                           	psect	text26
  7533  004184                     __ptext26:
  7534                           	opt stack 0
  7535  004184                     _isalpha:
  7536                           	opt stack 20
  7537                           
  7538                           ;incstack = 0
  7539                           ;isalpha@c stored from wreg
  7540  004184  6E1D               	movwf	isalpha@c,c
  7541  004186  0E01               	movlw	1
  7542  004188  6E1C               	movwf	_isalpha$3317,c
  7543  00418A  0E7B               	movlw	123
  7544  00418C  601D               	cpfslt	isalpha@c,c
  7545  00418E  D003               	goto	u7960
  7546  004190  0E61               	movlw	97
  7547  004192  601D               	cpfslt	isalpha@c,c
  7548  004194  D007               	goto	l2285
  7549  004196                     u7960:
  7550  004196  501D               	movf	isalpha@c,w,c
  7551  004198  EC86  F021         	call	_isupper
  7552  00419C  B0D8               	btfsc	status,0,c
  7553  00419E  D002               	goto	l2285
  7554  0041A0  0E00               	movlw	0
  7555  0041A2  6E1C               	movwf	_isalpha$3317,c
  7556  0041A4                     l2285:
  7557  0041A4  C01C  F01B         	movff	_isalpha$3317,??_isalpha
  7558  0041A8  301B               	rrcf	??_isalpha,w,c
  7559  0041AA  0012               	return	
  7560  0041AC                     __end_of_isalpha:
  7561                           	opt stack 0
  7562                           tosu	equ	0xFFF
  7563                           tosh	equ	0xFFE
  7564                           tosl	equ	0xFFD
  7565                           pclath	equ	0xFFA
  7566                           tblptru	equ	0xFF8
  7567                           tblptrh	equ	0xFF7
  7568                           tblptrl	equ	0xFF6
  7569                           tablat	equ	0xFF5
  7570                           prodh	equ	0xFF4
  7571                           prodl	equ	0xFF3
  7572                           postinc0	equ	0xFEE
  7573                           plusw0	equ	0xFEB
  7574                           wreg	equ	0xFE8
  7575                           indf1	equ	0xFE7
  7576                           postdec1	equ	0xFE5
  7577                           fsr1h	equ	0xFE2
  7578                           fsr1l	equ	0xFE1
  7579                           indf2	equ	0xFDF
  7580                           postinc2	equ	0xFDE
  7581                           postdec2	equ	0xFDD
  7582                           plusw2	equ	0xFDB
  7583                           fsr2h	equ	0xFDA
  7584                           fsr2l	equ	0xFD9
  7585                           status	equ	0xFD8
  7586                           
  7587 ;; *************** function _isupper *****************
  7588 ;; Defined at:
  7589 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  7590 ;; Parameters:    Size  Location     Type
  7591 ;;  c               1    wreg     unsigned char 
  7592 ;; Auto vars:     Size  Location     Type
  7593 ;;  c               1   25[COMRAM] unsigned char 
  7594 ;; Return value:  Size  Location     Type
  7595 ;;		None               void
  7596 ;; Registers used:
  7597 ;;		wreg, status,2, status,0
  7598 ;; Tracked objects:
  7599 ;;		On entry : 0/0
  7600 ;;		On exit  : 0/0
  7601 ;;		Unchanged: 0/0
  7602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7603 ;;      Params:         0       0       0       0       0       0       0
  7604 ;;      Locals:         2       0       0       0       0       0       0
  7605 ;;      Temps:          1       0       0       0       0       0       0
  7606 ;;      Totals:         3       0       0       0       0       0       0
  7607 ;;Total ram usage:        3 bytes
  7608 ;; Hardware stack levels used:    1
  7609 ;; Hardware stack levels required when called:    4
  7610 ;; This function calls:
  7611 ;;		Nothing
  7612 ;; This function is called by:
  7613 ;;		_isalpha
  7614 ;; This function uses a non-reentrant model
  7615 ;;
  7616                           
  7617                           	psect	text27
  7618  00430C                     __ptext27:
  7619                           	opt stack 0
  7620  00430C                     _isupper:
  7621                           	opt stack 20
  7622                           
  7623                           ;incstack = 0
  7624                           ;isupper@c stored from wreg
  7625  00430C  6E1A               	movwf	isupper@c,c
  7626  00430E  0E00               	movlw	0
  7627  004310  6E19               	movwf	_isupper$3326,c
  7628  004312  0E5B               	movlw	91
  7629  004314  601A               	cpfslt	isupper@c,c
  7630  004316  D005               	goto	l2300
  7631  004318  0E40               	movlw	64
  7632  00431A  641A               	cpfsgt	isupper@c,c
  7633  00431C  D002               	goto	l2300
  7634  00431E  0E01               	movlw	1
  7635  004320  6E19               	movwf	_isupper$3326,c
  7636  004322                     l2300:
  7637  004322  C019  F018         	movff	_isupper$3326,??_isupper
  7638  004326  3018               	rrcf	??_isupper,w,c
  7639  004328  0012               	return	
  7640  00432A                     __end_of_isupper:
  7641                           	opt stack 0
  7642                           tosu	equ	0xFFF
  7643                           tosh	equ	0xFFE
  7644                           tosl	equ	0xFFD
  7645                           pclath	equ	0xFFA
  7646                           tblptru	equ	0xFF8
  7647                           tblptrh	equ	0xFF7
  7648                           tblptrl	equ	0xFF6
  7649                           tablat	equ	0xFF5
  7650                           prodh	equ	0xFF4
  7651                           prodl	equ	0xFF3
  7652                           postinc0	equ	0xFEE
  7653                           plusw0	equ	0xFEB
  7654                           wreg	equ	0xFE8
  7655                           indf1	equ	0xFE7
  7656                           postdec1	equ	0xFE5
  7657                           fsr1h	equ	0xFE2
  7658                           fsr1l	equ	0xFE1
  7659                           indf2	equ	0xFDF
  7660                           postinc2	equ	0xFDE
  7661                           postdec2	equ	0xFDD
  7662                           plusw2	equ	0xFDB
  7663                           fsr2h	equ	0xFDA
  7664                           fsr2l	equ	0xFD9
  7665                           status	equ	0xFD8
  7666                           
  7667 ;; *************** function _DacReadValue *****************
  7668 ;; Defined at:
  7669 ;;		line 44 in file "DacApp.c"
  7670 ;; Parameters:    Size  Location     Type
  7671 ;;  data            2  104[BANK0 ] PTR unsigned char 
  7672 ;;		 -> rxMsgData(20), 
  7673 ;; Auto vars:     Size  Location     Type
  7674 ;;  byteIdx         2  120[BANK0 ] int 
  7675 ;;  TxMsg           7  113[BANK0 ] unsigned char [7]
  7676 ;;  readVal         2  110[BANK0 ] unsigned int 
  7677 ;;  dacIndex        1  112[BANK0 ] unsigned char 
  7678 ;;  byteNum         1  109[BANK0 ] unsigned char 
  7679 ;;  regNum          1  108[BANK0 ] unsigned char 
  7680 ;; Return value:  Size  Location     Type
  7681 ;;                  1    wreg      void 
  7682 ;; Registers used:
  7683 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7684 ;; Tracked objects:
  7685 ;;		On entry : 0/0
  7686 ;;		On exit  : 0/0
  7687 ;;		Unchanged: 0/0
  7688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7689 ;;      Params:         0       2       0       0       0       0       0
  7690 ;;      Locals:         0      14       0       0       0       0       0
  7691 ;;      Temps:          0       2       0       0       0       0       0
  7692 ;;      Totals:         0      18       0       0       0       0       0
  7693 ;;Total ram usage:       18 bytes
  7694 ;; Hardware stack levels used:    1
  7695 ;; Hardware stack levels required when called:   10
  7696 ;; This function calls:
  7697 ;;		_ReadIntFromEeprom
  7698 ;;		_WriteUartMessage
  7699 ;;		_ZeroArray
  7700 ;;		_crc8
  7701 ;;		_make8
  7702 ;; This function is called by:
  7703 ;;		_GroupDAC
  7704 ;; This function uses a non-reentrant model
  7705 ;;
  7706                           
  7707                           	psect	text28
  7708  00286A                     __ptext28:
  7709                           	opt stack 0
  7710  00286A                     _DacReadValue:
  7711                           	opt stack 18
  7712                           
  7713                           ;DacApp.c: 46: uint16_t readVal;
  7714                           ;DacApp.c: 47: uint8_t regNum = 0, byteNum = 0;
  7715                           
  7716                           ;incstack = 0
  7717  00286A  0E00               	movlw	0
  7718  00286C  0100               	movlb	0	; () banked
  7719  00286E  6FCC               	movwf	DacReadValue@regNum& (0+255),b
  7720  002870  0E00               	movlw	0
  7721  002872  6FCD               	movwf	DacReadValue@byteNum& (0+255),b
  7722                           
  7723                           ; BSR set to: 0
  7724                           ;DacApp.c: 48: char TxMsg[2 + (0x4) + 1];
  7725                           ;DacApp.c: 49: ZeroArray(TxMsg, 2 + (0x4) + 1);
  7726  002874  0ED1               	movlw	low DacReadValue@TxMsg
  7727  002876  6E20               	movwf	ZeroArray@array,c
  7728  002878  0E00               	movlw	high DacReadValue@TxMsg
  7729  00287A  6E21               	movwf	ZeroArray@array+1,c
  7730  00287C  0E00               	movlw	0
  7731  00287E  6E23               	movwf	ZeroArray@size+1,c
  7732  002880  0E07               	movlw	7
  7733  002882  6E22               	movwf	ZeroArray@size,c
  7734  002884  EC95  F021         	call	_ZeroArray	;wreg free
  7735                           
  7736                           ;DacApp.c: 52: TxMsg[(0)] = (0x24);
  7737  002888  0E24               	movlw	36
  7738  00288A  0100               	movlb	0	; () banked
  7739  00288C  6FD1               	movwf	DacReadValue@TxMsg& (0+255),b
  7740                           
  7741                           ; BSR set to: 0
  7742                           ;DacApp.c: 53: TxMsg[(1)] = DAC_MSG;
  7743  00288E  0E06               	movlw	6
  7744  002890  6FD2               	movwf	(DacReadValue@TxMsg+1)& (0+255),b
  7745                           
  7746                           ; BSR set to: 0
  7747                           ;DacApp.c: 54: TxMsg[(2)] = DAC_READ_VALUE;
  7748  002892  0E62               	movlw	98
  7749  002894  6FD3               	movwf	(DacReadValue@TxMsg+2)& (0+255),b
  7750                           
  7751                           ; BSR set to: 0
  7752                           ;DacApp.c: 55: TxMsg[(3)] = 2;
  7753  002896  0E02               	movlw	2
  7754  002898  6FD4               	movwf	(DacReadValue@TxMsg+3)& (0+255),b
  7755                           
  7756                           ; BSR set to: 0
  7757                           ;DacApp.c: 57: uint8_t dacIndex = data[0];
  7758  00289A  C0C8  FFD9         	movff	DacReadValue@data,fsr2l
  7759  00289E  C0C9  FFDA         	movff	DacReadValue@data+1,fsr2h
  7760  0028A2  50DF               	movf	indf2,w,c
  7761  0028A4  6FD0               	movwf	DacReadValue@dacIndex& (0+255),b
  7762                           
  7763                           ; BSR set to: 0
  7764                           ;DacApp.c: 58: uint16_t readVal = ReadIntFromEeprom((0x40) | DAC_ADDRES[dacIndex], 2);
  7765  0028A6  0E00               	movlw	0
  7766  0028A8  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  7767  0028AA  0E02               	movlw	2
  7768  0028AC  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  7769  0028AE  51D0               	movf	DacReadValue@dacIndex& (0+255),w,b
  7770  0028B0  0D01               	mullw	1
  7771  0028B2  0E53               	movlw	low _DAC_ADDRES
  7772  0028B4  24F3               	addwf	prodl,w,c
  7773  0028B6  6EF6               	movwf	tblptrl,c
  7774  0028B8  0E06               	movlw	high _DAC_ADDRES
  7775  0028BA  20F4               	addwfc	prodh,w,c
  7776  0028BC  6EF7               	movwf	tblptrh,c
  7777  0028BE                     	if	0	;There are less than 3 active tblptr bytes
  7778  0028BE                     	endif
  7779  0028BE  0008               	tblrd		*
  7780  0028C0  50F5               	movf	tablat,w,c
  7781  0028C2  0940               	iorlw	64
  7782  0028C4  EC43  F010         	call	_ReadIntFromEeprom
  7783  0028C8  C0B1  F0CE         	movff	?_ReadIntFromEeprom,DacReadValue@readVal
  7784  0028CC  C0B2  F0CF         	movff	?_ReadIntFromEeprom+1,DacReadValue@readVal+1
  7785                           
  7786                           ;DacApp.c: 60: for(int byteIdx = 0; byteIdx < 2; byteIdx++)
  7787  0028D0  0E00               	movlw	0
  7788  0028D2  0100               	movlb	0	; () banked
  7789  0028D4  6FD9               	movwf	(DacReadValue@byteIdx+1)& (0+255),b
  7790  0028D6  0E00               	movlw	0
  7791  0028D8  6FD8               	movwf	DacReadValue@byteIdx& (0+255),b
  7792  0028DA                     l8441:
  7793                           
  7794                           ; BSR set to: 0
  7795  0028DA  BFD9               	btfsc	(DacReadValue@byteIdx+1)& (0+255),7,b
  7796  0028DC  D006               	goto	l435
  7797  0028DE  51D9               	movf	(DacReadValue@byteIdx+1)& (0+255),w,b
  7798  0028E0  E11F               	bnz	l8451
  7799  0028E2  0E02               	movlw	2
  7800  0028E4  5DD8               	subwf	DacReadValue@byteIdx& (0+255),w,b
  7801  0028E6  B0D8               	btfsc	status,0,c
  7802  0028E8  D01B               	goto	u8940
  7803  0028EA                     l435:
  7804                           
  7805                           ; BSR set to: 0
  7806                           ;DacApp.c: 61: {
  7807                           ;DacApp.c: 62: TxMsg[(0x4) + byteIdx] = make8(readVal, byteIdx);
  7808                           
  7809                           ; BSR set to: 0
  7810  0028EA  0E04               	movlw	4
  7811  0028EC  25D8               	addwf	DacReadValue@byteIdx& (0+255),w,b
  7812  0028EE  6FCA               	movwf	??_DacReadValue& (0+255),b
  7813  0028F0  0E00               	movlw	0
  7814  0028F2  21D9               	addwfc	(DacReadValue@byteIdx+1)& (0+255),w,b
  7815  0028F4  6FCB               	movwf	(??_DacReadValue+1)& (0+255),b
  7816  0028F6  0ED1               	movlw	low DacReadValue@TxMsg
  7817  0028F8  25CA               	addwf	??_DacReadValue& (0+255),w,b
  7818  0028FA  6ED9               	movwf	fsr2l,c
  7819  0028FC  0E00               	movlw	high DacReadValue@TxMsg
  7820  0028FE  21CB               	addwfc	(??_DacReadValue+1)& (0+255),w,b
  7821  002900  6EDA               	movwf	fsr2h,c
  7822  002902  C0CE  F018         	movff	DacReadValue@readVal,make8@data
  7823  002906  C0CF  F019         	movff	DacReadValue@readVal+1,make8@data+1
  7824  00290A  6A1A               	clrf	make8@data+2,c
  7825  00290C  6A1B               	clrf	make8@data+3,c
  7826  00290E  C0D8  F01C         	movff	DacReadValue@byteIdx,make8@dataLocation
  7827  002912  EC5D  F01C         	call	_make8	;wreg free
  7828  002916  6EDF               	movwf	indf2,c
  7829  002918  0100               	movlb	0	; () banked
  7830  00291A  4BD8               	infsnz	DacReadValue@byteIdx& (0+255),f,b
  7831  00291C  2BD9               	incf	(DacReadValue@byteIdx+1)& (0+255),f,b
  7832  00291E  D7DD               	goto	l8441
  7833  002920                     u8940:
  7834  002920                     l8451:
  7835                           
  7836                           ; BSR set to: 0
  7837                           ;DacApp.c: 63: }
  7838                           ;DacApp.c: 64: TxMsg[2 + (0x4)] = crc8(TxMsg, 2 + (0x4));
  7839  002920  0ED1               	movlw	low DacReadValue@TxMsg
  7840  002922  6E18               	movwf	crc8@dataArray,c
  7841  002924  0E00               	movlw	high DacReadValue@TxMsg
  7842  002926  6E19               	movwf	crc8@dataArray+1,c
  7843  002928  0E00               	movlw	0
  7844  00292A  6E1B               	movwf	crc8@dataSize+1,c
  7845  00292C  0E06               	movlw	6
  7846  00292E  6E1A               	movwf	crc8@dataSize,c
  7847  002930  EC0E  F01E         	call	_crc8	;wreg free
  7848  002934  0100               	movlb	0	; () banked
  7849  002936  6FD7               	movwf	(DacReadValue@TxMsg+6)& (0+255),b
  7850                           
  7851                           ; BSR set to: 0
  7852                           ;DacApp.c: 65: WriteUartMessage(TxMsg, 2 + (0x4) + 1);
  7853  002938  0ED1               	movlw	low DacReadValue@TxMsg
  7854  00293A  6E19               	movwf	WriteUartMessage@dataBuf,c
  7855  00293C  0E00               	movlw	high DacReadValue@TxMsg
  7856  00293E  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  7857  002940  0E00               	movlw	0
  7858  002942  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  7859  002944  0E07               	movlw	7
  7860  002946  6E1B               	movwf	WriteUartMessage@dataSize,c
  7861  002948  ECA1  F01F         	call	_WriteUartMessage	;wreg free
  7862  00294C  0012               	return		;funcret
  7863  00294E                     __end_of_DacReadValue:
  7864                           	opt stack 0
  7865                           tosu	equ	0xFFF
  7866                           tosh	equ	0xFFE
  7867                           tosl	equ	0xFFD
  7868                           pclath	equ	0xFFA
  7869                           tblptru	equ	0xFF8
  7870                           tblptrh	equ	0xFF7
  7871                           tblptrl	equ	0xFF6
  7872                           tablat	equ	0xFF5
  7873                           prodh	equ	0xFF4
  7874                           prodl	equ	0xFF3
  7875                           postinc0	equ	0xFEE
  7876                           plusw0	equ	0xFEB
  7877                           wreg	equ	0xFE8
  7878                           indf1	equ	0xFE7
  7879                           postdec1	equ	0xFE5
  7880                           fsr1h	equ	0xFE2
  7881                           fsr1l	equ	0xFE1
  7882                           indf2	equ	0xFDF
  7883                           postinc2	equ	0xFDE
  7884                           postdec2	equ	0xFDD
  7885                           plusw2	equ	0xFDB
  7886                           fsr2h	equ	0xFDA
  7887                           fsr2l	equ	0xFD9
  7888                           status	equ	0xFD8
  7889                           
  7890 ;; *************** function _testLeds *****************
  7891 ;; Defined at:
  7892 ;;		line 43 in file "LedsApp.c"
  7893 ;; Parameters:    Size  Location     Type
  7894 ;;		None
  7895 ;; Auto vars:     Size  Location     Type
  7896 ;;  idx             2   44[COMRAM] int 
  7897 ;; Return value:  Size  Location     Type
  7898 ;;                  1    wreg      void 
  7899 ;; Registers used:
  7900 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7901 ;; Tracked objects:
  7902 ;;		On entry : 0/0
  7903 ;;		On exit  : 0/0
  7904 ;;		Unchanged: 0/0
  7905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7906 ;;      Params:         0       0       0       0       0       0       0
  7907 ;;      Locals:         2       0       0       0       0       0       0
  7908 ;;      Temps:          1       0       0       0       0       0       0
  7909 ;;      Totals:         3       0       0       0       0       0       0
  7910 ;;Total ram usage:        3 bytes
  7911 ;; Hardware stack levels used:    1
  7912 ;; Hardware stack levels required when called:    7
  7913 ;; This function calls:
  7914 ;;		_SendAckMessage
  7915 ;; This function is called by:
  7916 ;;		_GroupControlMcu
  7917 ;; This function uses a non-reentrant model
  7918 ;;
  7919                           
  7920                           	psect	text29
  7921  0036CA                     __ptext29:
  7922                           	opt stack 0
  7923  0036CA                     _testLeds:
  7924                           	opt stack 21
  7925                           
  7926                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  7927                           
  7928                           ;incstack = 0
  7929  0036CA  0E00               	movlw	0
  7930  0036CC  6E2E               	movwf	testLeds@idx+1,c
  7931  0036CE  0E00               	movlw	0
  7932  0036D0  6E2D               	movwf	testLeds@idx,c
  7933  0036D2                     l8229:
  7934  0036D2  BE2E               	btfsc	testLeds@idx+1,7,c
  7935  0036D4  D006               	goto	l60
  7936  0036D6  502E               	movf	testLeds@idx+1,w,c
  7937  0036D8  E127               	bnz	l8243
  7938  0036DA  0E0A               	movlw	10
  7939  0036DC  5C2D               	subwf	testLeds@idx,w,c
  7940  0036DE  B0D8               	btfsc	status,0,c
  7941  0036E0  D023               	goto	u8600
  7942  0036E2                     l60:
  7943                           
  7944                           ;LedsApp.c: 47: {
  7945                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  7946  0036E2  808B               	bsf	3979,0,c	;volatile
  7947                           
  7948                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  7949  0036E4  0E82               	movlw	130
  7950  0036E6  6E2C               	movwf	??_testLeds& (0+255),c
  7951  0036E8  0EDE               	movlw	222
  7952  0036EA                     u9577:
  7953  0036EA  2EE8               	decfsz	wreg,f,c
  7954  0036EC  D7FE               	bra	u9577
  7955  0036EE  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7956  0036F0  D7FC               	bra	u9577
  7957                           
  7958                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  7959  0036F2  888A               	bsf	3978,4,c	;volatile
  7960                           
  7961                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  7962  0036F4  0E82               	movlw	130
  7963  0036F6  6E2C               	movwf	??_testLeds& (0+255),c
  7964  0036F8  0EDE               	movlw	222
  7965  0036FA                     u9587:
  7966  0036FA  2EE8               	decfsz	wreg,f,c
  7967  0036FC  D7FE               	bra	u9587
  7968  0036FE  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7969  003700  D7FC               	bra	u9587
  7970                           
  7971                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  7972  003702  908B               	bcf	3979,0,c	;volatile
  7973                           
  7974                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  7975  003704  0E82               	movlw	130
  7976  003706  6E2C               	movwf	??_testLeds& (0+255),c
  7977  003708  0EDE               	movlw	222
  7978  00370A                     u9597:
  7979  00370A  2EE8               	decfsz	wreg,f,c
  7980  00370C  D7FE               	bra	u9597
  7981  00370E  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7982  003710  D7FC               	bra	u9597
  7983                           
  7984                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  7985  003712  988A               	bcf	3978,4,c	;volatile
  7986                           
  7987                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  7988  003714  0E82               	movlw	130
  7989  003716  6E2C               	movwf	??_testLeds& (0+255),c
  7990  003718  0EDE               	movlw	222
  7991  00371A                     u9607:
  7992  00371A  2EE8               	decfsz	wreg,f,c
  7993  00371C  D7FE               	bra	u9607
  7994  00371E  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7995  003720  D7FC               	bra	u9607
  7996  003722  4A2D               	infsnz	testLeds@idx,f,c
  7997  003724  2A2E               	incf	testLeds@idx+1,f,c
  7998  003726  D7D5               	goto	l8229
  7999  003728                     u8600:
  8000  003728                     l8243:
  8001                           
  8002                           ;LedsApp.c: 57: }
  8003                           ;LedsApp.c: 59: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_TEST_LEDS);
  8004  003728  0E14               	movlw	20
  8005  00372A  6E24               	movwf	SendAckMessage@inRequest,c
  8006  00372C  0E01               	movlw	1
  8007  00372E  ECE5  F01D         	call	_SendAckMessage
  8008  003732  0012               	return	
  8009  003734                     __end_of_testLeds:
  8010                           	opt stack 0
  8011                           tosu	equ	0xFFF
  8012                           tosh	equ	0xFFE
  8013                           tosl	equ	0xFFD
  8014                           pclath	equ	0xFFA
  8015                           tblptru	equ	0xFF8
  8016                           tblptrh	equ	0xFF7
  8017                           tblptrl	equ	0xFF6
  8018                           tablat	equ	0xFF5
  8019                           prodh	equ	0xFF4
  8020                           prodl	equ	0xFF3
  8021                           postinc0	equ	0xFEE
  8022                           plusw0	equ	0xFEB
  8023                           wreg	equ	0xFE8
  8024                           indf1	equ	0xFE7
  8025                           postdec1	equ	0xFE5
  8026                           fsr1h	equ	0xFE2
  8027                           fsr1l	equ	0xFE1
  8028                           indf2	equ	0xFDF
  8029                           postinc2	equ	0xFDE
  8030                           postdec2	equ	0xFDD
  8031                           plusw2	equ	0xFDB
  8032                           fsr2h	equ	0xFDA
  8033                           fsr2l	equ	0xFD9
  8034                           status	equ	0xFD8
  8035                           
  8036 ;; *************** function _ResetMcu *****************
  8037 ;; Defined at:
  8038 ;;		line 143 in file "SystemCommon.c"
  8039 ;; Parameters:    Size  Location     Type
  8040 ;;		None
  8041 ;; Auto vars:     Size  Location     Type
  8042 ;;		None
  8043 ;; Return value:  Size  Location     Type
  8044 ;;                  1    wreg      void 
  8045 ;; Registers used:
  8046 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8047 ;; Tracked objects:
  8048 ;;		On entry : 0/0
  8049 ;;		On exit  : 0/0
  8050 ;;		Unchanged: 0/0
  8051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8052 ;;      Params:         0       0       0       0       0       0       0
  8053 ;;      Locals:         0       0       0       0       0       0       0
  8054 ;;      Temps:          0       0       0       0       0       0       0
  8055 ;;      Totals:         0       0       0       0       0       0       0
  8056 ;;Total ram usage:        0 bytes
  8057 ;; Hardware stack levels used:    1
  8058 ;; Hardware stack levels required when called:    7
  8059 ;; This function calls:
  8060 ;;		_SendAckMessage
  8061 ;; This function is called by:
  8062 ;;		_GroupControlMcu
  8063 ;; This function uses a non-reentrant model
  8064 ;;
  8065                           
  8066                           	psect	text30
  8067  00443C                     __ptext30:
  8068                           	opt stack 0
  8069  00443C                     _ResetMcu:
  8070                           	opt stack 21
  8071                           
  8072                           ;SystemCommon.c: 146: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET
      +                          _MCU);
  8073                           
  8074                           ;incstack = 0
  8075  00443C  0E11               	movlw	17
  8076  00443E  6E24               	movwf	SendAckMessage@inRequest,c
  8077  004440  0E01               	movlw	1
  8078  004442  ECE5  F01D         	call	_SendAckMessage
  8079  004446  00FF               	reset		;# 
  8080  004448  0012               	return		;funcret
  8081  00444A                     __end_of_ResetMcu:
  8082                           	opt stack 0
  8083                           tosu	equ	0xFFF
  8084                           tosh	equ	0xFFE
  8085                           tosl	equ	0xFFD
  8086                           pclath	equ	0xFFA
  8087                           tblptru	equ	0xFF8
  8088                           tblptrh	equ	0xFF7
  8089                           tblptrl	equ	0xFF6
  8090                           tablat	equ	0xFF5
  8091                           prodh	equ	0xFF4
  8092                           prodl	equ	0xFF3
  8093                           postinc0	equ	0xFEE
  8094                           plusw0	equ	0xFEB
  8095                           wreg	equ	0xFE8
  8096                           indf1	equ	0xFE7
  8097                           postdec1	equ	0xFE5
  8098                           fsr1h	equ	0xFE2
  8099                           fsr1l	equ	0xFE1
  8100                           indf2	equ	0xFDF
  8101                           postinc2	equ	0xFDE
  8102                           postdec2	equ	0xFDD
  8103                           plusw2	equ	0xFDB
  8104                           fsr2h	equ	0xFDA
  8105                           fsr2l	equ	0xFD9
  8106                           status	equ	0xFD8
  8107                           
  8108 ;; *************** function _SetChannelMode *****************
  8109 ;; Defined at:
  8110 ;;		line 30 in file "AdcApp.c"
  8111 ;; Parameters:    Size  Location     Type
  8112 ;;  data            2   43[COMRAM] PTR unsigned char 
  8113 ;; Auto vars:     Size  Location     Type
  8114 ;;		None
  8115 ;; Return value:  Size  Location     Type
  8116 ;;                  1    wreg      void 
  8117 ;; Registers used:
  8118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8119 ;; Tracked objects:
  8120 ;;		On entry : 0/0
  8121 ;;		On exit  : 0/0
  8122 ;;		Unchanged: 0/0
  8123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8124 ;;      Params:         2       0       0       0       0       0       0
  8125 ;;      Locals:         0       0       0       0       0       0       0
  8126 ;;      Temps:          0       0       0       0       0       0       0
  8127 ;;      Totals:         2       0       0       0       0       0       0
  8128 ;;Total ram usage:        2 bytes
  8129 ;; Hardware stack levels used:    1
  8130 ;; Hardware stack levels required when called:    7
  8131 ;; This function calls:
  8132 ;;		_SendAckMessage
  8133 ;; This function is called by:
  8134 ;;		_GroupAdc
  8135 ;; This function uses a non-reentrant model
  8136 ;;
  8137                           
  8138                           	psect	text31
  8139  00407A                     __ptext31:
  8140                           	opt stack 0
  8141  00407A                     _SetChannelMode:
  8142                           	opt stack 21
  8143                           
  8144                           ;AdcApp.c: 32: adcSampleMode = data[0];
  8145                           
  8146                           ;incstack = 0
  8147  00407A  C02C  FFD9         	movff	SetChannelMode@data,fsr2l
  8148  00407E  C02D  FFDA         	movff	SetChannelMode@data+1,fsr2h
  8149  004082  50DF               	movf	indf2,w,c
  8150  004084  6E3B               	movwf	_adcSampleMode,c
  8151                           
  8152                           ;AdcApp.c: 33: if (adcSampleMode == SINGLE_CHANNEL)
  8153  004086  043B               	decf	_adcSampleMode,w,c
  8154  004088  A4D8               	btfss	status,2,c
  8155  00408A  D009               	goto	l122
  8156                           
  8157                           ;AdcApp.c: 34: {
  8158                           ;AdcApp.c: 35: channel = data[1];
  8159  00408C  EE20 F001          	lfsr	2,1
  8160  004090  502C               	movf	SetChannelMode@data,w,c
  8161  004092  26D9               	addwf	fsr2l,f,c
  8162  004094  502D               	movf	SetChannelMode@data+1,w,c
  8163  004096  22DA               	addwfc	fsr2h,f,c
  8164  004098  50DF               	movf	indf2,w,c
  8165  00409A  0100               	movlb	0	; () banked
  8166  00409C  6FEF               	movwf	_channel& (0+255),b
  8167  00409E                     l122:
  8168                           
  8169                           ;AdcApp.c: 36: }
  8170                           ;AdcApp.c: 37: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CHANNEL_MODE);
  8171                           
  8172                           ; BSR set to: 0
  8173  00409E  0E32               	movlw	50
  8174  0040A0  6E24               	movwf	SendAckMessage@inRequest,c
  8175  0040A2  0E03               	movlw	3
  8176  0040A4  ECE5  F01D         	call	_SendAckMessage
  8177  0040A8  0012               	return		;funcret
  8178  0040AA                     __end_of_SetChannelMode:
  8179                           	opt stack 0
  8180                           tosu	equ	0xFFF
  8181                           tosh	equ	0xFFE
  8182                           tosl	equ	0xFFD
  8183                           pclath	equ	0xFFA
  8184                           tblptru	equ	0xFF8
  8185                           tblptrh	equ	0xFF7
  8186                           tblptrl	equ	0xFF6
  8187                           tablat	equ	0xFF5
  8188                           prodh	equ	0xFF4
  8189                           prodl	equ	0xFF3
  8190                           postinc0	equ	0xFEE
  8191                           plusw0	equ	0xFEB
  8192                           wreg	equ	0xFE8
  8193                           indf1	equ	0xFE7
  8194                           postdec1	equ	0xFE5
  8195                           fsr1h	equ	0xFE2
  8196                           fsr1l	equ	0xFE1
  8197                           indf2	equ	0xFDF
  8198                           postinc2	equ	0xFDE
  8199                           postdec2	equ	0xFDD
  8200                           plusw2	equ	0xFDB
  8201                           fsr2h	equ	0xFDA
  8202                           fsr2l	equ	0xFD9
  8203                           status	equ	0xFD8
  8204                           
  8205 ;; *************** function _EUSART1_Read *****************
  8206 ;; Defined at:
  8207 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  8208 ;; Parameters:    Size  Location     Type
  8209 ;;		None
  8210 ;; Auto vars:     Size  Location     Type
  8211 ;;  readValue       2   24[COMRAM] unsigned int 
  8212 ;; Return value:  Size  Location     Type
  8213 ;;                  1    wreg      unsigned char 
  8214 ;; Registers used:
  8215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8216 ;; Tracked objects:
  8217 ;;		On entry : 0/0
  8218 ;;		On exit  : 0/0
  8219 ;;		Unchanged: 0/0
  8220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8221 ;;      Params:         0       0       0       0       0       0       0
  8222 ;;      Locals:         2       0       0       0       0       0       0
  8223 ;;      Temps:          1       0       0       0       0       0       0
  8224 ;;      Totals:         3       0       0       0       0       0       0
  8225 ;;Total ram usage:        3 bytes
  8226 ;; Hardware stack levels used:    1
  8227 ;; Hardware stack levels required when called:    4
  8228 ;; This function calls:
  8229 ;;		Nothing
  8230 ;; This function is called by:
  8231 ;;		_readUartMessage
  8232 ;; This function uses a non-reentrant model
  8233 ;;
  8234                           
  8235                           	psect	text32
  8236  003C6A                     __ptext32:
  8237                           	opt stack 0
  8238  003C6A                     _EUSART1_Read:
  8239                           	opt stack 25
  8240                           
  8241                           ;eusart1.c: 112: uint16_t readValue = 0;
  8242                           
  8243                           ;incstack = 0
  8244  003C6A  0E00               	movlw	0
  8245  003C6C  6E1A               	movwf	EUSART1_Read@readValue+1,c
  8246  003C6E  0E00               	movlw	0
  8247  003C70  6E19               	movwf	EUSART1_Read@readValue,c
  8248                           
  8249                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  8250  003C72  0100               	movlb	0	; () banked
  8251  003C74  51EE               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  8252  003C76  A4D8               	btfss	status,2,c
  8253  003C78  D002               	goto	l906
  8254                           
  8255                           ; BSR set to: 0
  8256                           ;eusart1.c: 120: {
  8257                           ;eusart1.c: 121: return readValue;
  8258  003C7A  5019               	movf	EUSART1_Read@readValue,w,c
  8259                           
  8260                           ; BSR set to: 0
  8261  003C7C  0012               	return	
  8262  003C7E                     l906:
  8263                           
  8264                           ; BSR set to: 0
  8265                           ;eusart1.c: 122: }
  8266                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  8267                           
  8268                           ; BSR set to: 0
  8269  003C7E  5037               	movf	_eusart1RxTail,w,c	;volatile
  8270  003C80  0D01               	mullw	1
  8271  003C82  0E00               	movlw	low _eusart1RxBuffer
  8272  003C84  24F3               	addwf	prodl,w,c
  8273  003C86  6ED9               	movwf	fsr2l,c
  8274  003C88  0E01               	movlw	high _eusart1RxBuffer
  8275  003C8A  20F4               	addwfc	prodh,w,c
  8276  003C8C  6EDA               	movwf	fsr2h,c
  8277  003C8E  50DF               	movf	indf2,w,c
  8278  003C90  6E18               	movwf	??_EUSART1_Read& (0+255),c
  8279  003C92  5018               	movf	??_EUSART1_Read,w,c
  8280  003C94  6E19               	movwf	EUSART1_Read@readValue,c
  8281  003C96  6A1A               	clrf	EUSART1_Read@readValue+1,c
  8282                           
  8283                           ; BSR set to: 0
  8284  003C98  2A37               	incf	_eusart1RxTail,f,c	;volatile
  8285                           
  8286                           ; BSR set to: 0
  8287                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  8288  003C9A  0E27               	movlw	39
  8289  003C9C  6437               	cpfsgt	_eusart1RxTail,c	;volatile
  8290  003C9E  D002               	goto	l908
  8291                           
  8292                           ; BSR set to: 0
  8293                           ;eusart1.c: 126: {
  8294                           ;eusart1.c: 127: eusart1RxTail = 0;
  8295  003CA0  0E00               	movlw	0
  8296  003CA2  6E37               	movwf	_eusart1RxTail,c	;volatile
  8297  003CA4                     l908:
  8298                           
  8299                           ; BSR set to: 0
  8300                           ;eusart1.c: 128: }
  8301                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  8302                           
  8303                           ; BSR set to: 0
  8304  003CA4  9A9D               	bcf	3997,5,c	;volatile
  8305                           
  8306                           ; BSR set to: 0
  8307                           ;eusart1.c: 130: eusart1RxCount--;
  8308  003CA6  07EE               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  8309                           
  8310                           ; BSR set to: 0
  8311                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  8312  003CA8  8A9D               	bsf	3997,5,c	;volatile
  8313                           
  8314                           ; BSR set to: 0
  8315                           ;eusart1.c: 133: return readValue;
  8316  003CAA  5019               	movf	EUSART1_Read@readValue,w,c
  8317  003CAC  0012               	return	
  8318  003CAE                     __end_of_EUSART1_Read:
  8319                           	opt stack 0
  8320                           tosu	equ	0xFFF
  8321                           tosh	equ	0xFFE
  8322                           tosl	equ	0xFFD
  8323                           pclath	equ	0xFFA
  8324                           tblptru	equ	0xFF8
  8325                           tblptrh	equ	0xFF7
  8326                           tblptrl	equ	0xFF6
  8327                           tablat	equ	0xFF5
  8328                           prodh	equ	0xFF4
  8329                           prodl	equ	0xFF3
  8330                           postinc0	equ	0xFEE
  8331                           plusw0	equ	0xFEB
  8332                           wreg	equ	0xFE8
  8333                           indf1	equ	0xFE7
  8334                           postdec1	equ	0xFE5
  8335                           fsr1h	equ	0xFE2
  8336                           fsr1l	equ	0xFE1
  8337                           indf2	equ	0xFDF
  8338                           postinc2	equ	0xFDE
  8339                           postdec2	equ	0xFDD
  8340                           plusw2	equ	0xFDB
  8341                           fsr2h	equ	0xFDA
  8342                           fsr2l	equ	0xFD9
  8343                           status	equ	0xFD8
  8344                           
  8345 ;; *************** function _keepAliveSignalUart *****************
  8346 ;; Defined at:
  8347 ;;		line 93 in file "SystemStatus.c"
  8348 ;; Parameters:    Size  Location     Type
  8349 ;;		None
  8350 ;; Auto vars:     Size  Location     Type
  8351 ;;		None
  8352 ;; Return value:  Size  Location     Type
  8353 ;;                  1    wreg      void 
  8354 ;; Registers used:
  8355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8356 ;; Tracked objects:
  8357 ;;		On entry : 0/0
  8358 ;;		On exit  : 0/0
  8359 ;;		Unchanged: 0/0
  8360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8361 ;;      Params:         0       0       0       0       0       0       0
  8362 ;;      Locals:         0       0       0       0       0       0       0
  8363 ;;      Temps:          0       0       0       0       0       0       0
  8364 ;;      Totals:         0       0       0       0       0       0       0
  8365 ;;Total ram usage:        0 bytes
  8366 ;; Hardware stack levels used:    1
  8367 ;; Hardware stack levels required when called:    7
  8368 ;; This function calls:
  8369 ;;		_SendAckMessage
  8370 ;; This function is called by:
  8371 ;;		_main
  8372 ;; This function uses a non-reentrant model
  8373 ;;
  8374                           
  8375                           	psect	text33
  8376  004480                     __ptext33:
  8377                           	opt stack 0
  8378  004480                     _keepAliveSignalUart:
  8379                           	opt stack 23
  8380                           
  8381                           ;SystemStatus.c: 95: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_KEEP_A
      +                          LIVE);
  8382                           
  8383                           ; BSR set to: 0
  8384                           ;incstack = 0
  8385  004480  0E15               	movlw	21
  8386  004482  6E24               	movwf	SendAckMessage@inRequest,c
  8387  004484  0E01               	movlw	1
  8388  004486  ECE5  F01D         	call	_SendAckMessage
  8389  00448A  0012               	return		;funcret
  8390  00448C                     __end_of_keepAliveSignalUart:
  8391                           	opt stack 0
  8392                           tosu	equ	0xFFF
  8393                           tosh	equ	0xFFE
  8394                           tosl	equ	0xFFD
  8395                           pclath	equ	0xFFA
  8396                           tblptru	equ	0xFF8
  8397                           tblptrh	equ	0xFF7
  8398                           tblptrl	equ	0xFF6
  8399                           tablat	equ	0xFF5
  8400                           prodh	equ	0xFF4
  8401                           prodl	equ	0xFF3
  8402                           postinc0	equ	0xFEE
  8403                           plusw0	equ	0xFEB
  8404                           wreg	equ	0xFE8
  8405                           indf1	equ	0xFE7
  8406                           postdec1	equ	0xFE5
  8407                           fsr1h	equ	0xFE2
  8408                           fsr1l	equ	0xFE1
  8409                           indf2	equ	0xFDF
  8410                           postinc2	equ	0xFDE
  8411                           postdec2	equ	0xFDD
  8412                           plusw2	equ	0xFDB
  8413                           fsr2h	equ	0xFDA
  8414                           fsr2l	equ	0xFD9
  8415                           status	equ	0xFD8
  8416                           
  8417 ;; *************** function _keepAliveSignalLed *****************
  8418 ;; Defined at:
  8419 ;;		line 35 in file "LedsApp.c"
  8420 ;; Parameters:    Size  Location     Type
  8421 ;;		None
  8422 ;; Auto vars:     Size  Location     Type
  8423 ;;		None
  8424 ;; Return value:  Size  Location     Type
  8425 ;;                  1    wreg      void 
  8426 ;; Registers used:
  8427 ;;		wreg, status,2, status,0
  8428 ;; Tracked objects:
  8429 ;;		On entry : 0/0
  8430 ;;		On exit  : 0/0
  8431 ;;		Unchanged: 0/0
  8432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8433 ;;      Params:         0       0       0       0       0       0       0
  8434 ;;      Locals:         0       0       0       0       0       0       0
  8435 ;;      Temps:          1       0       0       0       0       0       0
  8436 ;;      Totals:         1       0       0       0       0       0       0
  8437 ;;Total ram usage:        1 bytes
  8438 ;; Hardware stack levels used:    1
  8439 ;; Hardware stack levels required when called:    4
  8440 ;; This function calls:
  8441 ;;		Nothing
  8442 ;; This function is called by:
  8443 ;;		_main
  8444 ;; This function uses a non-reentrant model
  8445 ;;
  8446                           
  8447                           	psect	text34
  8448  00439A                     __ptext34:
  8449                           	opt stack 0
  8450  00439A                     _keepAliveSignalLed:
  8451                           	opt stack 26
  8452                           
  8453                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  8454                           
  8455                           ;incstack = 0
  8456  00439A  B08B               	btfsc	3979,0,c	;volatile
  8457  00439C  D003               	goto	u6160
  8458  00439E  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  8459  0043A0  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  8460  0043A2  D001               	goto	u6178
  8461  0043A4                     u6160:
  8462  0043A4  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  8463  0043A6                     u6178:
  8464  0043A6  508B               	movf	3979,w,c	;volatile
  8465  0043A8  1818               	xorwf	??_keepAliveSignalLed,w,c
  8466  0043AA  0BFE               	andlw	-2
  8467  0043AC  1818               	xorwf	??_keepAliveSignalLed,w,c
  8468  0043AE  6E8B               	movwf	3979,c	;volatile
  8469  0043B0  0012               	return		;funcret
  8470  0043B2                     __end_of_keepAliveSignalLed:
  8471                           	opt stack 0
  8472                           tosu	equ	0xFFF
  8473                           tosh	equ	0xFFE
  8474                           tosl	equ	0xFFD
  8475                           pclath	equ	0xFFA
  8476                           tblptru	equ	0xFF8
  8477                           tblptrh	equ	0xFF7
  8478                           tblptrl	equ	0xFF6
  8479                           tablat	equ	0xFF5
  8480                           prodh	equ	0xFF4
  8481                           prodl	equ	0xFF3
  8482                           postinc0	equ	0xFEE
  8483                           plusw0	equ	0xFEB
  8484                           wreg	equ	0xFE8
  8485                           indf1	equ	0xFE7
  8486                           postdec1	equ	0xFE5
  8487                           fsr1h	equ	0xFE2
  8488                           fsr1l	equ	0xFE1
  8489                           indf2	equ	0xFDF
  8490                           postinc2	equ	0xFDE
  8491                           postdec2	equ	0xFDD
  8492                           plusw2	equ	0xFDB
  8493                           fsr2h	equ	0xFDA
  8494                           fsr2l	equ	0xFD9
  8495                           status	equ	0xFD8
  8496                           
  8497 ;; *************** function _SynthLdDetect *****************
  8498 ;; Defined at:
  8499 ;;		line 204 in file "SyntApp.c"
  8500 ;; Parameters:    Size  Location     Type
  8501 ;;		None
  8502 ;; Auto vars:     Size  Location     Type
  8503 ;;		None
  8504 ;; Return value:  Size  Location     Type
  8505 ;;                  1    wreg      void 
  8506 ;; Registers used:
  8507 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8508 ;; Tracked objects:
  8509 ;;		On entry : 0/0
  8510 ;;		On exit  : 0/0
  8511 ;;		Unchanged: 0/0
  8512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8513 ;;      Params:         0       0       0       0       0       0       0
  8514 ;;      Locals:         0       0       0       0       0       0       0
  8515 ;;      Temps:          0       0       0       0       0       0       0
  8516 ;;      Totals:         0       0       0       0       0       0       0
  8517 ;;Total ram usage:        0 bytes
  8518 ;; Hardware stack levels used:    1
  8519 ;; Hardware stack levels required when called:   11
  8520 ;; This function calls:
  8521 ;;		_BlinkErrorLeds
  8522 ;;		_InitSynth
  8523 ;;		___awmod
  8524 ;; This function is called by:
  8525 ;;		_main
  8526 ;; This function uses a non-reentrant model
  8527 ;;
  8528                           
  8529                           	psect	text35
  8530  003228                     __ptext35:
  8531                           	opt stack 0
  8532  003228                     _SynthLdDetect:
  8533                           	opt stack 19
  8534                           
  8535                           ;SyntApp.c: 208: if(PORTDbits.RD4 == 0)
  8536                           
  8537                           ;incstack = 0
  8538  003228  B883               	btfsc	3971,4,c	;volatile
  8539  00322A  D020               	goto	l568
  8540                           
  8541                           ;SyntApp.c: 209: {
  8542                           ;SyntApp.c: 210: if(synthLdRxCnt > 0)
  8543  00322C  0100               	movlb	0	; () banked
  8544  00322E  51F9               	movf	_synthLdRxCnt& (0+255),w,b
  8545  003230  0A80               	xorlw	128
  8546  003232  0F7F               	addlw	-129
  8547  003234  A0D8               	btfss	status,0,c
  8548  003236  D006               	goto	l569
  8549                           
  8550                           ; BSR set to: 0
  8551                           ;SyntApp.c: 211: {
  8552                           ;SyntApp.c: 212: InitSynth(SYNTH_RX);
  8553  003238  0E01               	movlw	1
  8554  00323A  EC54  F007         	call	_InitSynth
  8555                           
  8556                           ;SyntApp.c: 213: synthLdRxCnt--;
  8557  00323E  0100               	movlb	0	; () banked
  8558  003240  07F9               	decf	_synthLdRxCnt& (0+255),f,b
  8559                           
  8560                           ;SyntApp.c: 214: }
  8561  003242  D003               	goto	l570
  8562  003244                     l569:
  8563                           
  8564                           ; BSR set to: 0
  8565                           ;SyntApp.c: 215: else
  8566                           ;SyntApp.c: 216: {
  8567                           ;SyntApp.c: 217: BlinkErrorLeds(FAIL_SYNTH_RX_LATCH);
  8568                           
  8569                           ; BSR set to: 0
  8570  003244  0E02               	movlw	2
  8571  003246  ECFF  F01B         	call	_BlinkErrorLeds
  8572  00324A                     l570:
  8573                           
  8574                           ;SyntApp.c: 218: }
  8575                           ;SyntApp.c: 219: synthLdRxArray[synthLdRxArrayCnt++ % 29] = UNLOCK;
  8576  00324A  C0E4  F018         	movff	_synthLdRxArrayCnt,___awmod@dividend
  8577  00324E  6A19               	clrf	___awmod@dividend+1,c
  8578  003250  0E00               	movlw	0
  8579  003252  6E1B               	movwf	___awmod@divisor+1,c
  8580  003254  0E1D               	movlw	29
  8581  003256  6E1A               	movwf	___awmod@divisor,c
  8582  003258  EC2D  F01B         	call	___awmod	;wreg free
  8583  00325C  0EAA               	movlw	low _synthLdRxArray
  8584  00325E  2418               	addwf	?___awmod,w,c
  8585  003260  6ED9               	movwf	fsr2l,c
  8586  003262  0E01               	movlw	high _synthLdRxArray
  8587  003264  2019               	addwfc	?___awmod+1,w,c
  8588  003266  6EDA               	movwf	fsr2h,c
  8589  003268  0E00               	movlw	0
  8590  00326A  D013               	goto	L2
  8591  00326C                     l568:
  8592                           
  8593                           ;SyntApp.c: 221: else
  8594                           ;SyntApp.c: 222: {
  8595                           ;SyntApp.c: 223: synthLdRxCnt = 2;
  8596                           
  8597                           ; BSR set to: 0
  8598  00326C  0E02               	movlw	2
  8599  00326E  0100               	movlb	0	; () banked
  8600  003270  6FF9               	movwf	_synthLdRxCnt& (0+255),b
  8601                           
  8602                           ; BSR set to: 0
  8603                           ;SyntApp.c: 224: synthLdRxArray[synthLdRxArrayCnt++ % 29] = LOCK;
  8604  003272  C0E4  F018         	movff	_synthLdRxArrayCnt,___awmod@dividend
  8605  003276  6A19               	clrf	___awmod@dividend+1,c
  8606  003278  0E00               	movlw	0
  8607  00327A  6E1B               	movwf	___awmod@divisor+1,c
  8608  00327C  0E1D               	movlw	29
  8609  00327E  6E1A               	movwf	___awmod@divisor,c
  8610  003280  EC2D  F01B         	call	___awmod	;wreg free
  8611  003284  0EAA               	movlw	low _synthLdRxArray
  8612  003286  2418               	addwf	?___awmod,w,c
  8613  003288  6ED9               	movwf	fsr2l,c
  8614  00328A  0E01               	movlw	high _synthLdRxArray
  8615  00328C  2019               	addwfc	?___awmod+1,w,c
  8616  00328E  6EDA               	movwf	fsr2h,c
  8617  003290  0E01               	movlw	1
  8618  003292                     L2:
  8619  003292  6EDF               	movwf	indf2,c
  8620  003294  0100               	movlb	0	; () banked
  8621  003296  2BE4               	incf	_synthLdRxArrayCnt& (0+255),f,b
  8622                           
  8623                           ; BSR set to: 0
  8624                           ;SyntApp.c: 225: }
  8625                           ;SyntApp.c: 230: if(PORTDbits.RD1 == 0)
  8626                           
  8627                           ; BSR set to: 0
  8628  003298  B283               	btfsc	3971,1,c	;volatile
  8629  00329A  D00F               	goto	l572
  8630                           
  8631                           ; BSR set to: 0
  8632                           ;SyntApp.c: 231: {
  8633                           ;SyntApp.c: 232: if(synthLdTxCnt > 0)
  8634  00329C  51F8               	movf	_synthLdTxCnt& (0+255),w,b
  8635  00329E  0A80               	xorlw	128
  8636  0032A0  0F7F               	addlw	-129
  8637  0032A2  A0D8               	btfss	status,0,c
  8638  0032A4  D006               	goto	l573
  8639                           
  8640                           ; BSR set to: 0
  8641                           ;SyntApp.c: 233: {
  8642                           ;SyntApp.c: 234: InitSynth(SYNTH_TX);
  8643  0032A6  0E00               	movlw	0
  8644  0032A8  EC54  F007         	call	_InitSynth
  8645                           
  8646                           ;SyntApp.c: 235: synthLdTxCnt--;
  8647  0032AC  0100               	movlb	0	; () banked
  8648  0032AE  07F8               	decf	_synthLdTxCnt& (0+255),f,b
  8649                           
  8650                           ;SyntApp.c: 236: }
  8651  0032B0  0012               	return	
  8652  0032B2                     l573:
  8653                           
  8654                           ; BSR set to: 0
  8655                           ;SyntApp.c: 237: else
  8656                           ;SyntApp.c: 238: {
  8657                           ;SyntApp.c: 239: BlinkErrorLeds(FAIL_SYNTH_TX_LATCH);
  8658                           
  8659                           ; BSR set to: 0
  8660  0032B2  0E02               	movlw	2
  8661  0032B4  ECFF  F01B         	call	_BlinkErrorLeds
  8662                           
  8663                           ;SyntApp.c: 240: }
  8664                           ;SyntApp.c: 241: }
  8665  0032B8  0012               	return	
  8666  0032BA                     l572:
  8667                           
  8668                           ;SyntApp.c: 242: else
  8669                           ;SyntApp.c: 243: {
  8670                           ;SyntApp.c: 244: synthLdTxCnt = 2;
  8671  0032BA  0E02               	movlw	2
  8672  0032BC  0100               	movlb	0	; () banked
  8673  0032BE  6FF8               	movwf	_synthLdTxCnt& (0+255),b
  8674  0032C0  0012               	return	
  8675  0032C2                     __end_of_SynthLdDetect:
  8676                           	opt stack 0
  8677                           tosu	equ	0xFFF
  8678                           tosh	equ	0xFFE
  8679                           tosl	equ	0xFFD
  8680                           pclath	equ	0xFFA
  8681                           tblptru	equ	0xFF8
  8682                           tblptrh	equ	0xFF7
  8683                           tblptrl	equ	0xFF6
  8684                           tablat	equ	0xFF5
  8685                           prodh	equ	0xFF4
  8686                           prodl	equ	0xFF3
  8687                           postinc0	equ	0xFEE
  8688                           plusw0	equ	0xFEB
  8689                           wreg	equ	0xFE8
  8690                           indf1	equ	0xFE7
  8691                           postdec1	equ	0xFE5
  8692                           fsr1h	equ	0xFE2
  8693                           fsr1l	equ	0xFE1
  8694                           indf2	equ	0xFDF
  8695                           postinc2	equ	0xFDE
  8696                           postdec2	equ	0xFDD
  8697                           plusw2	equ	0xFDB
  8698                           fsr2h	equ	0xFDA
  8699                           fsr2l	equ	0xFD9
  8700                           status	equ	0xFD8
  8701                           
  8702 ;; *************** function ___awmod *****************
  8703 ;; Defined at:
  8704 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  8705 ;; Parameters:    Size  Location     Type
  8706 ;;  dividend        2   23[COMRAM] int 
  8707 ;;  divisor         2   25[COMRAM] int 
  8708 ;; Auto vars:     Size  Location     Type
  8709 ;;  sign            1   28[COMRAM] unsigned char 
  8710 ;;  counter         1   27[COMRAM] unsigned char 
  8711 ;; Return value:  Size  Location     Type
  8712 ;;                  2   23[COMRAM] int 
  8713 ;; Registers used:
  8714 ;;		wreg, status,2, status,0
  8715 ;; Tracked objects:
  8716 ;;		On entry : 0/0
  8717 ;;		On exit  : 0/0
  8718 ;;		Unchanged: 0/0
  8719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8720 ;;      Params:         4       0       0       0       0       0       0
  8721 ;;      Locals:         2       0       0       0       0       0       0
  8722 ;;      Temps:          0       0       0       0       0       0       0
  8723 ;;      Totals:         6       0       0       0       0       0       0
  8724 ;;Total ram usage:        6 bytes
  8725 ;; Hardware stack levels used:    1
  8726 ;; Hardware stack levels required when called:    4
  8727 ;; This function calls:
  8728 ;;		Nothing
  8729 ;; This function is called by:
  8730 ;;		_SynthLdDetect
  8731 ;; This function uses a non-reentrant model
  8732 ;;
  8733                           
  8734                           	psect	text36
  8735  00365A                     __ptext36:
  8736                           	opt stack 0
  8737  00365A                     ___awmod:
  8738                           	opt stack 25
  8739                           
  8740                           ;incstack = 0
  8741  00365A  0E00               	movlw	0
  8742  00365C  6E1D               	movwf	___awmod@sign,c
  8743  00365E  AE19               	btfss	___awmod@dividend+1,7,c
  8744  003660  D006               	goto	l1791
  8745  003662  6C18               	negf	___awmod@dividend,c
  8746  003664  1E19               	comf	___awmod@dividend+1,f,c
  8747  003666  B0D8               	btfsc	status,0,c
  8748  003668  2A19               	incf	___awmod@dividend+1,f,c
  8749  00366A  0E01               	movlw	1
  8750  00366C  6E1D               	movwf	___awmod@sign,c
  8751  00366E                     l1791:
  8752  00366E  AE1B               	btfss	___awmod@divisor+1,7,c
  8753  003670  D004               	goto	l1792
  8754  003672  6C1A               	negf	___awmod@divisor,c
  8755  003674  1E1B               	comf	___awmod@divisor+1,f,c
  8756  003676  B0D8               	btfsc	status,0,c
  8757  003678  2A1B               	incf	___awmod@divisor+1,f,c
  8758  00367A                     l1792:
  8759  00367A  501A               	movf	___awmod@divisor,w,c
  8760  00367C  101B               	iorwf	___awmod@divisor+1,w,c
  8761  00367E  B4D8               	btfsc	status,2,c
  8762  003680  D018               	goto	l1799
  8763  003682  0E01               	movlw	1
  8764  003684  6E1C               	movwf	___awmod@counter,c
  8765  003686  D004               	goto	l1794
  8766  003688  90D8               	bcf	status,0,c
  8767  00368A  361A               	rlcf	___awmod@divisor,f,c
  8768  00368C  361B               	rlcf	___awmod@divisor+1,f,c
  8769  00368E  2A1C               	incf	___awmod@counter,f,c
  8770  003690                     l1794:
  8771  003690  AE1B               	btfss	___awmod@divisor+1,7,c
  8772  003692  D7FA               	goto	l1795
  8773  003694                     u6080:
  8774  003694  501A               	movf	___awmod@divisor,w,c
  8775  003696  5C18               	subwf	___awmod@dividend,w,c
  8776  003698  501B               	movf	___awmod@divisor+1,w,c
  8777  00369A  5819               	subwfb	___awmod@dividend+1,w,c
  8778  00369C  A0D8               	btfss	status,0,c
  8779  00369E  D004               	goto	l1798
  8780  0036A0  501A               	movf	___awmod@divisor,w,c
  8781  0036A2  5E18               	subwf	___awmod@dividend,f,c
  8782  0036A4  501B               	movf	___awmod@divisor+1,w,c
  8783  0036A6  5A19               	subwfb	___awmod@dividend+1,f,c
  8784  0036A8                     l1798:
  8785  0036A8  90D8               	bcf	status,0,c
  8786  0036AA  321B               	rrcf	___awmod@divisor+1,f,c
  8787  0036AC  321A               	rrcf	___awmod@divisor,f,c
  8788  0036AE  2E1C               	decfsz	___awmod@counter,f,c
  8789  0036B0  D7F1               	goto	u6080
  8790  0036B2                     l1799:
  8791  0036B2  501D               	movf	___awmod@sign,w,c
  8792  0036B4  B4D8               	btfsc	status,2,c
  8793  0036B6  D004               	goto	l1800
  8794  0036B8  6C18               	negf	___awmod@dividend,c
  8795  0036BA  1E19               	comf	___awmod@dividend+1,f,c
  8796  0036BC  B0D8               	btfsc	status,0,c
  8797  0036BE  2A19               	incf	___awmod@dividend+1,f,c
  8798  0036C0                     l1800:
  8799  0036C0  C018  F018         	movff	___awmod@dividend,?___awmod
  8800  0036C4  C019  F019         	movff	___awmod@dividend+1,?___awmod+1
  8801  0036C8  0012               	return	
  8802  0036CA                     __end_of___awmod:
  8803                           	opt stack 0
  8804                           tosu	equ	0xFFF
  8805                           tosh	equ	0xFFE
  8806                           tosl	equ	0xFFD
  8807                           pclath	equ	0xFFA
  8808                           tblptru	equ	0xFF8
  8809                           tblptrh	equ	0xFF7
  8810                           tblptrl	equ	0xFF6
  8811                           tablat	equ	0xFF5
  8812                           prodh	equ	0xFF4
  8813                           prodl	equ	0xFF3
  8814                           postinc0	equ	0xFEE
  8815                           plusw0	equ	0xFEB
  8816                           wreg	equ	0xFE8
  8817                           indf1	equ	0xFE7
  8818                           postdec1	equ	0xFE5
  8819                           fsr1h	equ	0xFE2
  8820                           fsr1l	equ	0xFE1
  8821                           indf2	equ	0xFDF
  8822                           postinc2	equ	0xFDE
  8823                           postdec2	equ	0xFDD
  8824                           plusw2	equ	0xFDB
  8825                           fsr2h	equ	0xFDA
  8826                           fsr2l	equ	0xFD9
  8827                           status	equ	0xFD8
  8828                           
  8829 ;; *************** function _BlinkErrorLeds *****************
  8830 ;; Defined at:
  8831 ;;		line 13 in file "LedsApp.c"
  8832 ;; Parameters:    Size  Location     Type
  8833 ;;  state           1    wreg     enum E7596
  8834 ;; Auto vars:     Size  Location     Type
  8835 ;;  state           1   26[COMRAM] enum E7596
  8836 ;;  idx             2   27[COMRAM] int 
  8837 ;; Return value:  Size  Location     Type
  8838 ;;                  1    wreg      void 
  8839 ;; Registers used:
  8840 ;;		wreg, status,2, status,0
  8841 ;; Tracked objects:
  8842 ;;		On entry : 0/0
  8843 ;;		On exit  : 0/0
  8844 ;;		Unchanged: 0/0
  8845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8846 ;;      Params:         0       0       0       0       0       0       0
  8847 ;;      Locals:         3       0       0       0       0       0       0
  8848 ;;      Temps:          3       0       0       0       0       0       0
  8849 ;;      Totals:         6       0       0       0       0       0       0
  8850 ;;Total ram usage:        6 bytes
  8851 ;; Hardware stack levels used:    1
  8852 ;; Hardware stack levels required when called:    4
  8853 ;; This function calls:
  8854 ;;		Nothing
  8855 ;; This function is called by:
  8856 ;;		_SynthLdDetect
  8857 ;;		_main
  8858 ;; This function uses a non-reentrant model
  8859 ;;
  8860                           
  8861                           	psect	text37
  8862  0037FE                     __ptext37:
  8863                           	opt stack 0
  8864  0037FE                     _BlinkErrorLeds:
  8865                           	opt stack 25
  8866                           
  8867                           ;incstack = 0
  8868                           ;BlinkErrorLeds@state stored from wreg
  8869  0037FE  6E1B               	movwf	BlinkErrorLeds@state,c
  8870                           
  8871                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
  8872  003800  0E00               	movlw	0
  8873  003802  6E1D               	movwf	BlinkErrorLeds@idx+1,c
  8874  003804  0E00               	movlw	0
  8875  003806  6E1C               	movwf	BlinkErrorLeds@idx,c
  8876  003808                     l6397:
  8877  003808  501B               	movf	BlinkErrorLeds@state,w,c
  8878  00380A  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8879  00380C  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
  8880  00380E  5018               	movf	??_BlinkErrorLeds,w,c
  8881  003810  5C1C               	subwf	BlinkErrorLeds@idx,w,c
  8882  003812  501D               	movf	BlinkErrorLeds@idx+1,w,c
  8883  003814  0A80               	xorlw	128
  8884  003816  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
  8885  003818  5019               	movf	??_BlinkErrorLeds+1,w,c
  8886  00381A  0A80               	xorlw	128
  8887  00381C  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
  8888  00381E  B0D8               	btfsc	status,0,c
  8889  003820  0012               	return	
  8890                           
  8891                           ;LedsApp.c: 16: {
  8892                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
  8893  003822  988A               	bcf	3978,4,c	;volatile
  8894                           
  8895                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
  8896  003824  0E02               	movlw	2
  8897  003826  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
  8898  003828  0E04               	movlw	4
  8899  00382A  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8900  00382C  0EBA               	movlw	186
  8901  00382E                     u9617:
  8902  00382E  2EE8               	decfsz	wreg,f,c
  8903  003830  D7FE               	bra	u9617
  8904  003832  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
  8905  003834  D7FC               	bra	u9617
  8906  003836  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
  8907  003838  D7FA               	bra	u9617
  8908  00383A  D000               	nop2	
  8909                           
  8910                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
  8911  00383C  888A               	bsf	3978,4,c	;volatile
  8912                           
  8913                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
  8914  00383E  0E02               	movlw	2
  8915  003840  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
  8916  003842  0E04               	movlw	4
  8917  003844  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8918  003846  0EBA               	movlw	186
  8919  003848                     u9627:
  8920  003848  2EE8               	decfsz	wreg,f,c
  8921  00384A  D7FE               	bra	u9627
  8922  00384C  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
  8923  00384E  D7FC               	bra	u9627
  8924  003850  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
  8925  003852  D7FA               	bra	u9627
  8926  003854  D000               	nop2	
  8927  003856  4A1C               	infsnz	BlinkErrorLeds@idx,f,c
  8928  003858  2A1D               	incf	BlinkErrorLeds@idx+1,f,c
  8929  00385A  D7D6               	goto	l6397
  8930  00385C                     __end_of_BlinkErrorLeds:
  8931                           	opt stack 0
  8932                           tosu	equ	0xFFF
  8933                           tosh	equ	0xFFE
  8934                           tosl	equ	0xFFD
  8935                           pclath	equ	0xFFA
  8936                           tblptru	equ	0xFF8
  8937                           tblptrh	equ	0xFF7
  8938                           tblptrl	equ	0xFF6
  8939                           tablat	equ	0xFF5
  8940                           prodh	equ	0xFF4
  8941                           prodl	equ	0xFF3
  8942                           postinc0	equ	0xFEE
  8943                           plusw0	equ	0xFEB
  8944                           wreg	equ	0xFE8
  8945                           indf1	equ	0xFE7
  8946                           postdec1	equ	0xFE5
  8947                           fsr1h	equ	0xFE2
  8948                           fsr1l	equ	0xFE1
  8949                           indf2	equ	0xFDF
  8950                           postinc2	equ	0xFDE
  8951                           postdec2	equ	0xFDD
  8952                           plusw2	equ	0xFDB
  8953                           fsr2h	equ	0xFDA
  8954                           fsr2l	equ	0xFD9
  8955                           status	equ	0xFD8
  8956                           
  8957 ;; *************** function _SetMcuSystem *****************
  8958 ;; Defined at:
  8959 ;;		line 11 in file "SystemSettings.c"
  8960 ;; Parameters:    Size  Location     Type
  8961 ;;		None
  8962 ;; Auto vars:     Size  Location     Type
  8963 ;;		None
  8964 ;; Return value:  Size  Location     Type
  8965 ;;                  1    wreg      void 
  8966 ;; Registers used:
  8967 ;;		wreg, status,2, status,0, cstack
  8968 ;; Tracked objects:
  8969 ;;		On entry : 0/0
  8970 ;;		On exit  : 0/0
  8971 ;;		Unchanged: 0/0
  8972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8973 ;;      Params:         0       0       0       0       0       0       0
  8974 ;;      Locals:         0       0       0       0       0       0       0
  8975 ;;      Temps:          0       0       0       0       0       0       0
  8976 ;;      Totals:         0       0       0       0       0       0       0
  8977 ;;Total ram usage:        0 bytes
  8978 ;; Hardware stack levels used:    1
  8979 ;; Hardware stack levels required when called:    7
  8980 ;; This function calls:
  8981 ;;		_SYSTEM_Initialize
  8982 ;; This function is called by:
  8983 ;;		_main
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           	psect	text38
  8988  004498                     __ptext38:
  8989                           	opt stack 0
  8990  004498                     _SetMcuSystem:
  8991                           	opt stack 23
  8992                           
  8993                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  8994                           
  8995                           ;incstack = 0
  8996  004498  ECC0  F021         	call	_SYSTEM_Initialize	;wreg free
  8997                           
  8998                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  8999  00449C  8EF2               	bsf	intcon,7,c	;volatile
  9000                           
  9001                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  9002  00449E  8CF2               	bsf	intcon,6,c	;volatile
  9003  0044A0  0012               	return		;funcret
  9004  0044A2                     __end_of_SetMcuSystem:
  9005                           	opt stack 0
  9006                           tosu	equ	0xFFF
  9007                           tosh	equ	0xFFE
  9008                           tosl	equ	0xFFD
  9009                           pclath	equ	0xFFA
  9010                           tblptru	equ	0xFF8
  9011                           tblptrh	equ	0xFF7
  9012                           tblptrl	equ	0xFF6
  9013                           tablat	equ	0xFF5
  9014                           prodh	equ	0xFF4
  9015                           prodl	equ	0xFF3
  9016                           intcon	equ	0xFF2
  9017                           postinc0	equ	0xFEE
  9018                           plusw0	equ	0xFEB
  9019                           wreg	equ	0xFE8
  9020                           indf1	equ	0xFE7
  9021                           postdec1	equ	0xFE5
  9022                           fsr1h	equ	0xFE2
  9023                           fsr1l	equ	0xFE1
  9024                           indf2	equ	0xFDF
  9025                           postinc2	equ	0xFDE
  9026                           postdec2	equ	0xFDD
  9027                           plusw2	equ	0xFDB
  9028                           fsr2h	equ	0xFDA
  9029                           fsr2l	equ	0xFD9
  9030                           status	equ	0xFD8
  9031                           
  9032 ;; *************** function _SYSTEM_Initialize *****************
  9033 ;; Defined at:
  9034 ;;		line 112 in file "mcc_generated_files/mcc.c"
  9035 ;; Parameters:    Size  Location     Type
  9036 ;;		None
  9037 ;; Auto vars:     Size  Location     Type
  9038 ;;		None
  9039 ;; Return value:  Size  Location     Type
  9040 ;;                  1    wreg      void 
  9041 ;; Registers used:
  9042 ;;		wreg, status,2, status,0, cstack
  9043 ;; Tracked objects:
  9044 ;;		On entry : 0/0
  9045 ;;		On exit  : 0/0
  9046 ;;		Unchanged: 0/0
  9047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9048 ;;      Params:         0       0       0       0       0       0       0
  9049 ;;      Locals:         0       0       0       0       0       0       0
  9050 ;;      Temps:          0       0       0       0       0       0       0
  9051 ;;      Totals:         0       0       0       0       0       0       0
  9052 ;;Total ram usage:        0 bytes
  9053 ;; Hardware stack levels used:    1
  9054 ;; Hardware stack levels required when called:    6
  9055 ;; This function calls:
  9056 ;;		_ADC_Initialize
  9057 ;;		_EUSART1_Initialize
  9058 ;;		_INTERRUPT_Initialize
  9059 ;;		_OSCILLATOR_Initialize
  9060 ;;		_PIN_MANAGER_Initialize
  9061 ;;		_TMR0_Initialize
  9062 ;; This function is called by:
  9063 ;;		_SetMcuSystem
  9064 ;; This function uses a non-reentrant model
  9065 ;;
  9066                           
  9067                           	psect	text39
  9068  004380                     __ptext39:
  9069                           	opt stack 0
  9070  004380                     _SYSTEM_Initialize:
  9071                           	opt stack 23
  9072                           
  9073                           ;mcc.c: 114: INTERRUPT_Initialize();
  9074                           
  9075                           ;incstack = 0
  9076  004380  EC6E  F022         	call	_INTERRUPT_Initialize	;wreg free
  9077                           
  9078                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  9079  004384  ECCD  F01B         	call	_PIN_MANAGER_Initialize	;wreg free
  9080                           
  9081                           ;mcc.c: 116: OSCILLATOR_Initialize();
  9082  004388  EC25  F022         	call	_OSCILLATOR_Initialize	;wreg free
  9083                           
  9084                           ;mcc.c: 117: TMR0_Initialize();
  9085  00438C  ECF1  F01F         	call	_TMR0_Initialize	;wreg free
  9086                           
  9087                           ;mcc.c: 118: ADC_Initialize();
  9088  004390  ECD9  F021         	call	_ADC_Initialize	;wreg free
  9089                           
  9090                           ;mcc.c: 119: EUSART1_Initialize();
  9091  004394  EC31  F01F         	call	_EUSART1_Initialize	;wreg free
  9092  004398  0012               	return		;funcret
  9093  00439A                     __end_of_SYSTEM_Initialize:
  9094                           	opt stack 0
  9095                           tosu	equ	0xFFF
  9096                           tosh	equ	0xFFE
  9097                           tosl	equ	0xFFD
  9098                           pclath	equ	0xFFA
  9099                           tblptru	equ	0xFF8
  9100                           tblptrh	equ	0xFF7
  9101                           tblptrl	equ	0xFF6
  9102                           tablat	equ	0xFF5
  9103                           prodh	equ	0xFF4
  9104                           prodl	equ	0xFF3
  9105                           intcon	equ	0xFF2
  9106                           postinc0	equ	0xFEE
  9107                           plusw0	equ	0xFEB
  9108                           wreg	equ	0xFE8
  9109                           indf1	equ	0xFE7
  9110                           postdec1	equ	0xFE5
  9111                           fsr1h	equ	0xFE2
  9112                           fsr1l	equ	0xFE1
  9113                           indf2	equ	0xFDF
  9114                           postinc2	equ	0xFDE
  9115                           postdec2	equ	0xFDD
  9116                           plusw2	equ	0xFDB
  9117                           fsr2h	equ	0xFDA
  9118                           fsr2l	equ	0xFD9
  9119                           status	equ	0xFD8
  9120                           
  9121 ;; *************** function _TMR0_Initialize *****************
  9122 ;; Defined at:
  9123 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  9124 ;; Parameters:    Size  Location     Type
  9125 ;;		None
  9126 ;; Auto vars:     Size  Location     Type
  9127 ;;		None
  9128 ;; Return value:  Size  Location     Type
  9129 ;;                  1    wreg      void 
  9130 ;; Registers used:
  9131 ;;		wreg, status,2, status,0, cstack
  9132 ;; Tracked objects:
  9133 ;;		On entry : 0/0
  9134 ;;		On exit  : 0/0
  9135 ;;		Unchanged: 0/0
  9136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9137 ;;      Params:         0       0       0       0       0       0       0
  9138 ;;      Locals:         0       0       0       0       0       0       0
  9139 ;;      Temps:          2       0       0       0       0       0       0
  9140 ;;      Totals:         2       0       0       0       0       0       0
  9141 ;;Total ram usage:        2 bytes
  9142 ;; Hardware stack levels used:    1
  9143 ;; Hardware stack levels required when called:    5
  9144 ;; This function calls:
  9145 ;;		_TMR0_SetInterruptHandler
  9146 ;; This function is called by:
  9147 ;;		_SYSTEM_Initialize
  9148 ;; This function uses a non-reentrant model
  9149 ;;
  9150                           
  9151                           	psect	text40
  9152  003FE2                     __ptext40:
  9153                           	opt stack 0
  9154  003FE2                     _TMR0_Initialize:
  9155                           	opt stack 23
  9156                           
  9157                           ;tmr0.c: 71: TMR0H = 0xF8;
  9158                           
  9159                           ;incstack = 0
  9160  003FE2  0EF8               	movlw	248
  9161  003FE4  6ED7               	movwf	4055,c	;volatile
  9162                           
  9163                           ;tmr0.c: 74: TMR0L = 0x2F;
  9164  003FE6  0E2F               	movlw	47
  9165  003FE8  6ED6               	movwf	4054,c	;volatile
  9166                           
  9167                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  9168  003FEA  50D6               	movf	4054,w,c	;volatile
  9169  003FEC  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  9170  003FF0  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  9171  003FF2  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  9172  003FF6  6A1A               	clrf	??_TMR0_Initialize,c
  9173  003FF8  101A               	iorwf	??_TMR0_Initialize,w,c
  9174  003FFA  6E46               	movwf	_timer0ReloadVal,c	;volatile
  9175  003FFC  501B               	movf	??_TMR0_Initialize+1,w,c
  9176  003FFE  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  9177                           
  9178                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  9179  004000  94F2               	bcf	intcon,2,c	;volatile
  9180                           
  9181                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  9182  004002  8AF2               	bsf	intcon,5,c	;volatile
  9183                           
  9184                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  9185  004004  0E00               	movlw	0
  9186  004006  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  9187  004008  0E00               	movlw	0
  9188  00400A  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  9189  00400C  EC51  F022         	call	_TMR0_SetInterruptHandler	;wreg free
  9190                           
  9191                           ;tmr0.c: 90: T0CON = 0x90;
  9192  004010  0E90               	movlw	144
  9193  004012  6ED5               	movwf	4053,c	;volatile
  9194  004014  0012               	return		;funcret
  9195  004016                     __end_of_TMR0_Initialize:
  9196                           	opt stack 0
  9197                           tosu	equ	0xFFF
  9198                           tosh	equ	0xFFE
  9199                           tosl	equ	0xFFD
  9200                           pclath	equ	0xFFA
  9201                           tblptru	equ	0xFF8
  9202                           tblptrh	equ	0xFF7
  9203                           tblptrl	equ	0xFF6
  9204                           tablat	equ	0xFF5
  9205                           prodh	equ	0xFF4
  9206                           prodl	equ	0xFF3
  9207                           intcon	equ	0xFF2
  9208                           postinc0	equ	0xFEE
  9209                           plusw0	equ	0xFEB
  9210                           wreg	equ	0xFE8
  9211                           indf1	equ	0xFE7
  9212                           postdec1	equ	0xFE5
  9213                           fsr1h	equ	0xFE2
  9214                           fsr1l	equ	0xFE1
  9215                           indf2	equ	0xFDF
  9216                           postinc2	equ	0xFDE
  9217                           postdec2	equ	0xFDD
  9218                           plusw2	equ	0xFDB
  9219                           fsr2h	equ	0xFDA
  9220                           fsr2l	equ	0xFD9
  9221                           status	equ	0xFD8
  9222                           
  9223 ;; *************** function _TMR0_SetInterruptHandler *****************
  9224 ;; Defined at:
  9225 ;;		line 179 in file "mcc_generated_files/tmr0.c"
  9226 ;; Parameters:    Size  Location     Type
  9227 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  9228 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  9229 ;; Auto vars:     Size  Location     Type
  9230 ;;		None
  9231 ;; Return value:  Size  Location     Type
  9232 ;;                  1    wreg      void 
  9233 ;; Registers used:
  9234 ;;		wreg, status,2, status,0
  9235 ;; Tracked objects:
  9236 ;;		On entry : 0/0
  9237 ;;		On exit  : 0/0
  9238 ;;		Unchanged: 0/0
  9239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9240 ;;      Params:         2       0       0       0       0       0       0
  9241 ;;      Locals:         0       0       0       0       0       0       0
  9242 ;;      Temps:          0       0       0       0       0       0       0
  9243 ;;      Totals:         2       0       0       0       0       0       0
  9244 ;;Total ram usage:        2 bytes
  9245 ;; Hardware stack levels used:    1
  9246 ;; Hardware stack levels required when called:    4
  9247 ;; This function calls:
  9248 ;;		Nothing
  9249 ;; This function is called by:
  9250 ;;		_TMR0_Initialize
  9251 ;; This function uses a non-reentrant model
  9252 ;;
  9253                           
  9254                           	psect	text41
  9255  0044A2                     __ptext41:
  9256                           	opt stack 0
  9257  0044A2                     _TMR0_SetInterruptHandler:
  9258                           	opt stack 23
  9259                           
  9260                           ;tmr0.c: 180: TMR0_InterruptHandler = InterruptHandler;
  9261                           
  9262                           ;incstack = 0
  9263  0044A2  C018  F1E6         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  9264  0044A6  C019  F1E7         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  9265  0044AA  0012               	return		;funcret
  9266  0044AC                     __end_of_TMR0_SetInterruptHandler:
  9267                           	opt stack 0
  9268                           tosu	equ	0xFFF
  9269                           tosh	equ	0xFFE
  9270                           tosl	equ	0xFFD
  9271                           pclath	equ	0xFFA
  9272                           tblptru	equ	0xFF8
  9273                           tblptrh	equ	0xFF7
  9274                           tblptrl	equ	0xFF6
  9275                           tablat	equ	0xFF5
  9276                           prodh	equ	0xFF4
  9277                           prodl	equ	0xFF3
  9278                           intcon	equ	0xFF2
  9279                           postinc0	equ	0xFEE
  9280                           plusw0	equ	0xFEB
  9281                           wreg	equ	0xFE8
  9282                           indf1	equ	0xFE7
  9283                           postdec1	equ	0xFE5
  9284                           fsr1h	equ	0xFE2
  9285                           fsr1l	equ	0xFE1
  9286                           indf2	equ	0xFDF
  9287                           postinc2	equ	0xFDE
  9288                           postdec2	equ	0xFDD
  9289                           plusw2	equ	0xFDB
  9290                           fsr2h	equ	0xFDA
  9291                           fsr2l	equ	0xFD9
  9292                           status	equ	0xFD8
  9293                           
  9294 ;; *************** function _PIN_MANAGER_Initialize *****************
  9295 ;; Defined at:
  9296 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  9297 ;; Parameters:    Size  Location     Type
  9298 ;;		None
  9299 ;; Auto vars:     Size  Location     Type
  9300 ;;		None
  9301 ;; Return value:  Size  Location     Type
  9302 ;;                  1    wreg      void 
  9303 ;; Registers used:
  9304 ;;		wreg, status,2, status,0, cstack
  9305 ;; Tracked objects:
  9306 ;;		On entry : 0/0
  9307 ;;		On exit  : 0/0
  9308 ;;		Unchanged: 0/0
  9309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9310 ;;      Params:         0       0       0       0       0       0       0
  9311 ;;      Locals:         0       0       0       0       0       0       0
  9312 ;;      Temps:          0       0       0       0       0       0       0
  9313 ;;      Totals:         0       0       0       0       0       0       0
  9314 ;;Total ram usage:        0 bytes
  9315 ;; Hardware stack levels used:    1
  9316 ;; Hardware stack levels required when called:    5
  9317 ;; This function calls:
  9318 ;;		_IOCB4_SetInterruptHandler
  9319 ;;		_IOCB5_SetInterruptHandler
  9320 ;; This function is called by:
  9321 ;;		_SYSTEM_Initialize
  9322 ;; This function uses a non-reentrant model
  9323 ;;
  9324                           
  9325                           	psect	text42
  9326  00379A                     __ptext42:
  9327                           	opt stack 0
  9328  00379A                     _PIN_MANAGER_Initialize:
  9329                           	opt stack 23
  9330                           
  9331                           ;pin_manager.c: 60: LATE = 0x00;
  9332                           
  9333                           ;incstack = 0
  9334  00379A  0E00               	movlw	0
  9335  00379C  6E8D               	movwf	3981,c	;volatile
  9336                           
  9337                           ;pin_manager.c: 61: LATD = 0x00;
  9338  00379E  0E00               	movlw	0
  9339  0037A0  6E8C               	movwf	3980,c	;volatile
  9340                           
  9341                           ;pin_manager.c: 62: LATA = 0x06;
  9342  0037A2  0E06               	movlw	6
  9343  0037A4  6E89               	movwf	3977,c	;volatile
  9344                           
  9345                           ;pin_manager.c: 63: LATB = 0x00;
  9346  0037A6  0E00               	movlw	0
  9347  0037A8  6E8A               	movwf	3978,c	;volatile
  9348                           
  9349                           ;pin_manager.c: 64: LATC = 0x00;
  9350  0037AA  0E00               	movlw	0
  9351  0037AC  6E8B               	movwf	3979,c	;volatile
  9352                           
  9353                           ;pin_manager.c: 69: TRISE = 0x07;
  9354  0037AE  0E07               	movlw	7
  9355  0037B0  6E96               	movwf	3990,c	;volatile
  9356                           
  9357                           ;pin_manager.c: 70: TRISA = 0xE1;
  9358  0037B2  0EE1               	movlw	225
  9359  0037B4  6E92               	movwf	3986,c	;volatile
  9360                           
  9361                           ;pin_manager.c: 71: TRISB = 0xEF;
  9362  0037B6  0EEF               	movlw	239
  9363  0037B8  6E93               	movwf	3987,c	;volatile
  9364                           
  9365                           ;pin_manager.c: 72: TRISC = 0x80;
  9366  0037BA  0E80               	movlw	128
  9367  0037BC  6E94               	movwf	3988,c	;volatile
  9368                           
  9369                           ;pin_manager.c: 73: TRISD = 0xF2;
  9370  0037BE  0EF2               	movlw	242
  9371  0037C0  6E95               	movwf	3989,c	;volatile
  9372                           
  9373                           ;pin_manager.c: 78: ANSELC = 0x34;
  9374  0037C2  0E34               	movlw	52
  9375  0037C4  010F               	movlb	15	; () banked
  9376  0037C6  6F3A               	movwf	58,b	;volatile
  9377                           
  9378                           ;pin_manager.c: 79: ANSELB = 0x3E;
  9379  0037C8  0E3E               	movlw	62
  9380  0037CA  6F39               	movwf	57,b	;volatile
  9381                           
  9382                           ;pin_manager.c: 80: ANSELD = 0xE4;
  9383  0037CC  0EE4               	movlw	228
  9384  0037CE  6F3B               	movwf	59,b	;volatile
  9385                           
  9386                           ;pin_manager.c: 81: ANSELE = 0x07;
  9387  0037D0  0E07               	movlw	7
  9388  0037D2  6F3C               	movwf	60,b	;volatile
  9389                           
  9390                           ;pin_manager.c: 82: ANSELA = 0x2F;
  9391  0037D4  0E2F               	movlw	47
  9392  0037D6  6F38               	movwf	56,b	;volatile
  9393                           
  9394                           ;pin_manager.c: 87: WPUB = 0xC3;
  9395  0037D8  0EC3               	movlw	195
  9396  0037DA  6E61               	movwf	3937,c	;volatile
  9397                           
  9398                           ; BSR set to: 15
  9399                           ;pin_manager.c: 88: INTCON2bits.nRBPU = 0;
  9400  0037DC  9EF1               	bcf	intcon2,7,c	;volatile
  9401                           
  9402                           ; BSR set to: 15
  9403                           ;pin_manager.c: 96: IOCBbits.IOCB4 = 1;
  9404  0037DE  8862               	bsf	3938,4,c	;volatile
  9405                           
  9406                           ; BSR set to: 15
  9407                           ;pin_manager.c: 97: IOCBbits.IOCB5 = 1;
  9408  0037E0  8A62               	bsf	3938,5,c	;volatile
  9409                           
  9410                           ; BSR set to: 15
  9411                           ;pin_manager.c: 100: IOCB4_SetInterruptHandler(IOCB4_DefaultInterruptHandler);
  9412  0037E2  0EEA               	movlw	low _IOCB4_DefaultInterruptHandler
  9413  0037E4  6E18               	movwf	IOCB4_SetInterruptHandler@InterruptHandler,c
  9414  0037E6  0E44               	movlw	high _IOCB4_DefaultInterruptHandler
  9415  0037E8  6E19               	movwf	IOCB4_SetInterruptHandler@InterruptHandler+1,c
  9416  0037EA  EC5B  F022         	call	_IOCB4_SetInterruptHandler	;wreg free
  9417                           
  9418                           ;pin_manager.c: 101: IOCB5_SetInterruptHandler(IOCB5_DefaultInterruptHandler);
  9419  0037EE  0EE8               	movlw	low _IOCB5_DefaultInterruptHandler
  9420  0037F0  6E18               	movwf	IOCB5_SetInterruptHandler@InterruptHandler,c
  9421  0037F2  0E44               	movlw	high _IOCB5_DefaultInterruptHandler
  9422  0037F4  6E19               	movwf	IOCB5_SetInterruptHandler@InterruptHandler+1,c
  9423  0037F6  EC56  F022         	call	_IOCB5_SetInterruptHandler	;wreg free
  9424                           
  9425                           ;pin_manager.c: 104: INTCONbits.RBIE = 1;
  9426  0037FA  86F2               	bsf	intcon,3,c	;volatile
  9427  0037FC  0012               	return		;funcret
  9428  0037FE                     __end_of_PIN_MANAGER_Initialize:
  9429                           	opt stack 0
  9430                           tosu	equ	0xFFF
  9431                           tosh	equ	0xFFE
  9432                           tosl	equ	0xFFD
  9433                           pclath	equ	0xFFA
  9434                           tblptru	equ	0xFF8
  9435                           tblptrh	equ	0xFF7
  9436                           tblptrl	equ	0xFF6
  9437                           tablat	equ	0xFF5
  9438                           prodh	equ	0xFF4
  9439                           prodl	equ	0xFF3
  9440                           intcon	equ	0xFF2
  9441                           intcon2	equ	0xFF1
  9442                           postinc0	equ	0xFEE
  9443                           plusw0	equ	0xFEB
  9444                           wreg	equ	0xFE8
  9445                           indf1	equ	0xFE7
  9446                           postdec1	equ	0xFE5
  9447                           fsr1h	equ	0xFE2
  9448                           fsr1l	equ	0xFE1
  9449                           indf2	equ	0xFDF
  9450                           postinc2	equ	0xFDE
  9451                           postdec2	equ	0xFDD
  9452                           plusw2	equ	0xFDB
  9453                           fsr2h	equ	0xFDA
  9454                           fsr2l	equ	0xFD9
  9455                           status	equ	0xFD8
  9456                           
  9457 ;; *************** function _IOCB5_SetInterruptHandler *****************
  9458 ;; Defined at:
  9459 ;;		line 172 in file "mcc_generated_files/pin_manager.c"
  9460 ;; Parameters:    Size  Location     Type
  9461 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  9462 ;;		 -> IOCB5_DefaultInterruptHandler(1), 
  9463 ;; Auto vars:     Size  Location     Type
  9464 ;;		None
  9465 ;; Return value:  Size  Location     Type
  9466 ;;                  1    wreg      void 
  9467 ;; Registers used:
  9468 ;;		wreg, status,2, status,0
  9469 ;; Tracked objects:
  9470 ;;		On entry : 0/0
  9471 ;;		On exit  : 0/0
  9472 ;;		Unchanged: 0/0
  9473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9474 ;;      Params:         2       0       0       0       0       0       0
  9475 ;;      Locals:         0       0       0       0       0       0       0
  9476 ;;      Temps:          0       0       0       0       0       0       0
  9477 ;;      Totals:         2       0       0       0       0       0       0
  9478 ;;Total ram usage:        2 bytes
  9479 ;; Hardware stack levels used:    1
  9480 ;; Hardware stack levels required when called:    4
  9481 ;; This function calls:
  9482 ;;		Nothing
  9483 ;; This function is called by:
  9484 ;;		_PIN_MANAGER_Initialize
  9485 ;; This function uses a non-reentrant model
  9486 ;;
  9487                           
  9488                           	psect	text43
  9489  0044AC                     __ptext43:
  9490                           	opt stack 0
  9491  0044AC                     _IOCB5_SetInterruptHandler:
  9492                           	opt stack 23
  9493                           
  9494                           ;pin_manager.c: 173: IOCB5_InterruptHandler = InterruptHandler;
  9495                           
  9496                           ;incstack = 0
  9497  0044AC  C018  F1E8         	movff	IOCB5_SetInterruptHandler@InterruptHandler,_IOCB5_InterruptHandler
  9498  0044B0  C019  F1E9         	movff	IOCB5_SetInterruptHandler@InterruptHandler+1,_IOCB5_InterruptHandler+1
  9499  0044B4  0012               	return		;funcret
  9500  0044B6                     __end_of_IOCB5_SetInterruptHandler:
  9501                           	opt stack 0
  9502                           tosu	equ	0xFFF
  9503                           tosh	equ	0xFFE
  9504                           tosl	equ	0xFFD
  9505                           pclath	equ	0xFFA
  9506                           tblptru	equ	0xFF8
  9507                           tblptrh	equ	0xFF7
  9508                           tblptrl	equ	0xFF6
  9509                           tablat	equ	0xFF5
  9510                           prodh	equ	0xFF4
  9511                           prodl	equ	0xFF3
  9512                           intcon	equ	0xFF2
  9513                           intcon2	equ	0xFF1
  9514                           postinc0	equ	0xFEE
  9515                           plusw0	equ	0xFEB
  9516                           wreg	equ	0xFE8
  9517                           indf1	equ	0xFE7
  9518                           postdec1	equ	0xFE5
  9519                           fsr1h	equ	0xFE2
  9520                           fsr1l	equ	0xFE1
  9521                           indf2	equ	0xFDF
  9522                           postinc2	equ	0xFDE
  9523                           postdec2	equ	0xFDD
  9524                           plusw2	equ	0xFDB
  9525                           fsr2h	equ	0xFDA
  9526                           fsr2l	equ	0xFD9
  9527                           status	equ	0xFD8
  9528                           
  9529 ;; *************** function _IOCB4_SetInterruptHandler *****************
  9530 ;; Defined at:
  9531 ;;		line 143 in file "mcc_generated_files/pin_manager.c"
  9532 ;; Parameters:    Size  Location     Type
  9533 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  9534 ;;		 -> IOCB4_DefaultInterruptHandler(1), 
  9535 ;; Auto vars:     Size  Location     Type
  9536 ;;		None
  9537 ;; Return value:  Size  Location     Type
  9538 ;;                  1    wreg      void 
  9539 ;; Registers used:
  9540 ;;		wreg, status,2, status,0
  9541 ;; Tracked objects:
  9542 ;;		On entry : 0/0
  9543 ;;		On exit  : 0/0
  9544 ;;		Unchanged: 0/0
  9545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9546 ;;      Params:         2       0       0       0       0       0       0
  9547 ;;      Locals:         0       0       0       0       0       0       0
  9548 ;;      Temps:          0       0       0       0       0       0       0
  9549 ;;      Totals:         2       0       0       0       0       0       0
  9550 ;;Total ram usage:        2 bytes
  9551 ;; Hardware stack levels used:    1
  9552 ;; Hardware stack levels required when called:    4
  9553 ;; This function calls:
  9554 ;;		Nothing
  9555 ;; This function is called by:
  9556 ;;		_PIN_MANAGER_Initialize
  9557 ;; This function uses a non-reentrant model
  9558 ;;
  9559                           
  9560                           	psect	text44
  9561  0044B6                     __ptext44:
  9562                           	opt stack 0
  9563  0044B6                     _IOCB4_SetInterruptHandler:
  9564                           	opt stack 23
  9565                           
  9566                           ;pin_manager.c: 144: IOCB4_InterruptHandler = InterruptHandler;
  9567                           
  9568                           ;incstack = 0
  9569  0044B6  C018  F1EA         	movff	IOCB4_SetInterruptHandler@InterruptHandler,_IOCB4_InterruptHandler
  9570  0044BA  C019  F1EB         	movff	IOCB4_SetInterruptHandler@InterruptHandler+1,_IOCB4_InterruptHandler+1
  9571  0044BE  0012               	return		;funcret
  9572  0044C0                     __end_of_IOCB4_SetInterruptHandler:
  9573                           	opt stack 0
  9574                           tosu	equ	0xFFF
  9575                           tosh	equ	0xFFE
  9576                           tosl	equ	0xFFD
  9577                           pclath	equ	0xFFA
  9578                           tblptru	equ	0xFF8
  9579                           tblptrh	equ	0xFF7
  9580                           tblptrl	equ	0xFF6
  9581                           tablat	equ	0xFF5
  9582                           prodh	equ	0xFF4
  9583                           prodl	equ	0xFF3
  9584                           intcon	equ	0xFF2
  9585                           intcon2	equ	0xFF1
  9586                           postinc0	equ	0xFEE
  9587                           plusw0	equ	0xFEB
  9588                           wreg	equ	0xFE8
  9589                           indf1	equ	0xFE7
  9590                           postdec1	equ	0xFE5
  9591                           fsr1h	equ	0xFE2
  9592                           fsr1l	equ	0xFE1
  9593                           indf2	equ	0xFDF
  9594                           postinc2	equ	0xFDE
  9595                           postdec2	equ	0xFDD
  9596                           plusw2	equ	0xFDB
  9597                           fsr2h	equ	0xFDA
  9598                           fsr2l	equ	0xFD9
  9599                           status	equ	0xFD8
  9600                           
  9601 ;; *************** function _OSCILLATOR_Initialize *****************
  9602 ;; Defined at:
  9603 ;;		line 122 in file "mcc_generated_files/mcc.c"
  9604 ;; Parameters:    Size  Location     Type
  9605 ;;		None
  9606 ;; Auto vars:     Size  Location     Type
  9607 ;;		None
  9608 ;; Return value:  Size  Location     Type
  9609 ;;                  1    wreg      void 
  9610 ;; Registers used:
  9611 ;;		wreg, status,2
  9612 ;; Tracked objects:
  9613 ;;		On entry : 0/0
  9614 ;;		On exit  : 0/0
  9615 ;;		Unchanged: 0/0
  9616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9617 ;;      Params:         0       0       0       0       0       0       0
  9618 ;;      Locals:         0       0       0       0       0       0       0
  9619 ;;      Temps:          0       0       0       0       0       0       0
  9620 ;;      Totals:         0       0       0       0       0       0       0
  9621 ;;Total ram usage:        0 bytes
  9622 ;; Hardware stack levels used:    1
  9623 ;; Hardware stack levels required when called:    4
  9624 ;; This function calls:
  9625 ;;		Nothing
  9626 ;; This function is called by:
  9627 ;;		_SYSTEM_Initialize
  9628 ;; This function uses a non-reentrant model
  9629 ;;
  9630                           
  9631                           	psect	text45
  9632  00444A                     __ptext45:
  9633                           	opt stack 0
  9634  00444A                     _OSCILLATOR_Initialize:
  9635                           	opt stack 24
  9636                           
  9637                           ;mcc.c: 125: OSCCON = 0x60;
  9638                           
  9639                           ;incstack = 0
  9640  00444A  0E60               	movlw	96
  9641  00444C  6ED3               	movwf	4051,c	;volatile
  9642                           
  9643                           ;mcc.c: 127: OSCCON2 = 0x04;
  9644  00444E  0E04               	movlw	4
  9645  004450  6ED2               	movwf	4050,c	;volatile
  9646                           
  9647                           ;mcc.c: 129: OSCTUNE = 0x80;
  9648  004452  0E80               	movlw	128
  9649  004454  6E9B               	movwf	3995,c	;volatile
  9650  004456  0012               	return		;funcret
  9651  004458                     __end_of_OSCILLATOR_Initialize:
  9652                           	opt stack 0
  9653                           tosu	equ	0xFFF
  9654                           tosh	equ	0xFFE
  9655                           tosl	equ	0xFFD
  9656                           pclath	equ	0xFFA
  9657                           tblptru	equ	0xFF8
  9658                           tblptrh	equ	0xFF7
  9659                           tblptrl	equ	0xFF6
  9660                           tablat	equ	0xFF5
  9661                           prodh	equ	0xFF4
  9662                           prodl	equ	0xFF3
  9663                           intcon	equ	0xFF2
  9664                           intcon2	equ	0xFF1
  9665                           postinc0	equ	0xFEE
  9666                           plusw0	equ	0xFEB
  9667                           wreg	equ	0xFE8
  9668                           indf1	equ	0xFE7
  9669                           postdec1	equ	0xFE5
  9670                           fsr1h	equ	0xFE2
  9671                           fsr1l	equ	0xFE1
  9672                           indf2	equ	0xFDF
  9673                           postinc2	equ	0xFDE
  9674                           postdec2	equ	0xFDD
  9675                           plusw2	equ	0xFDB
  9676                           fsr2h	equ	0xFDA
  9677                           fsr2l	equ	0xFD9
  9678                           status	equ	0xFD8
  9679                           
  9680 ;; *************** function _INTERRUPT_Initialize *****************
  9681 ;; Defined at:
  9682 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  9683 ;; Parameters:    Size  Location     Type
  9684 ;;		None
  9685 ;; Auto vars:     Size  Location     Type
  9686 ;;		None
  9687 ;; Return value:  Size  Location     Type
  9688 ;;                  1    wreg      void 
  9689 ;; Registers used:
  9690 ;;		None
  9691 ;; Tracked objects:
  9692 ;;		On entry : 0/0
  9693 ;;		On exit  : 0/0
  9694 ;;		Unchanged: 0/0
  9695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9696 ;;      Params:         0       0       0       0       0       0       0
  9697 ;;      Locals:         0       0       0       0       0       0       0
  9698 ;;      Temps:          0       0       0       0       0       0       0
  9699 ;;      Totals:         0       0       0       0       0       0       0
  9700 ;;Total ram usage:        0 bytes
  9701 ;; Hardware stack levels used:    1
  9702 ;; Hardware stack levels required when called:    4
  9703 ;; This function calls:
  9704 ;;		Nothing
  9705 ;; This function is called by:
  9706 ;;		_SYSTEM_Initialize
  9707 ;; This function uses a non-reentrant model
  9708 ;;
  9709                           
  9710                           	psect	text46
  9711  0044DC                     __ptext46:
  9712                           	opt stack 0
  9713  0044DC                     _INTERRUPT_Initialize:
  9714                           	opt stack 24
  9715                           
  9716                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  9717                           
  9718                           ;incstack = 0
  9719  0044DC  9ED0               	bcf	4048,7,c	;volatile
  9720  0044DE  0012               	return		;funcret
  9721  0044E0                     __end_of_INTERRUPT_Initialize:
  9722                           	opt stack 0
  9723                           tosu	equ	0xFFF
  9724                           tosh	equ	0xFFE
  9725                           tosl	equ	0xFFD
  9726                           pclath	equ	0xFFA
  9727                           tblptru	equ	0xFF8
  9728                           tblptrh	equ	0xFF7
  9729                           tblptrl	equ	0xFF6
  9730                           tablat	equ	0xFF5
  9731                           prodh	equ	0xFF4
  9732                           prodl	equ	0xFF3
  9733                           intcon	equ	0xFF2
  9734                           intcon2	equ	0xFF1
  9735                           postinc0	equ	0xFEE
  9736                           plusw0	equ	0xFEB
  9737                           wreg	equ	0xFE8
  9738                           indf1	equ	0xFE7
  9739                           postdec1	equ	0xFE5
  9740                           fsr1h	equ	0xFE2
  9741                           fsr1l	equ	0xFE1
  9742                           indf2	equ	0xFDF
  9743                           postinc2	equ	0xFDE
  9744                           postdec2	equ	0xFDD
  9745                           plusw2	equ	0xFDB
  9746                           fsr2h	equ	0xFDA
  9747                           fsr2l	equ	0xFD9
  9748                           status	equ	0xFD8
  9749                           
  9750 ;; *************** function _EUSART1_Initialize *****************
  9751 ;; Defined at:
  9752 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  9753 ;; Parameters:    Size  Location     Type
  9754 ;;		None
  9755 ;; Auto vars:     Size  Location     Type
  9756 ;;		None
  9757 ;; Return value:  Size  Location     Type
  9758 ;;                  1    wreg      void 
  9759 ;; Registers used:
  9760 ;;		wreg, status,2
  9761 ;; Tracked objects:
  9762 ;;		On entry : 0/0
  9763 ;;		On exit  : 0/0
  9764 ;;		Unchanged: 0/0
  9765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9766 ;;      Params:         0       0       0       0       0       0       0
  9767 ;;      Locals:         0       0       0       0       0       0       0
  9768 ;;      Temps:          0       0       0       0       0       0       0
  9769 ;;      Totals:         0       0       0       0       0       0       0
  9770 ;;Total ram usage:        0 bytes
  9771 ;; Hardware stack levels used:    1
  9772 ;; Hardware stack levels required when called:    4
  9773 ;; This function calls:
  9774 ;;		Nothing
  9775 ;; This function is called by:
  9776 ;;		_SYSTEM_Initialize
  9777 ;; This function uses a non-reentrant model
  9778 ;;
  9779                           
  9780                           	psect	text47
  9781  003E62                     __ptext47:
  9782                           	opt stack 0
  9783  003E62                     _EUSART1_Initialize:
  9784                           	opt stack 24
  9785                           
  9786                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  9787                           
  9788                           ;incstack = 0
  9789  003E62  9A9D               	bcf	3997,5,c	;volatile
  9790                           
  9791                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  9792  003E64  989D               	bcf	3997,4,c	;volatile
  9793                           
  9794                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  9795  003E66  0E08               	movlw	8
  9796  003E68  6EB8               	movwf	4024,c	;volatile
  9797                           
  9798                           ;eusart1.c: 85: RCSTA1 = 0x90;
  9799  003E6A  0E90               	movlw	144
  9800  003E6C  6EAB               	movwf	4011,c	;volatile
  9801                           
  9802                           ;eusart1.c: 88: TXSTA1 = 0x24;
  9803  003E6E  0E24               	movlw	36
  9804  003E70  6EAC               	movwf	4012,c	;volatile
  9805                           
  9806                           ;eusart1.c: 91: SPBRG1 = 0x10;
  9807  003E72  0E10               	movlw	16
  9808  003E74  6EAF               	movwf	4015,c	;volatile
  9809                           
  9810                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  9811  003E76  0E00               	movlw	0
  9812  003E78  6EB0               	movwf	4016,c	;volatile
  9813                           
  9814                           ;eusart1.c: 98: eusart1TxHead = 0;
  9815  003E7A  0E00               	movlw	0
  9816  003E7C  6E3A               	movwf	_eusart1TxHead,c	;volatile
  9817                           
  9818                           ;eusart1.c: 99: eusart1TxTail = 0;
  9819  003E7E  0E00               	movlw	0
  9820  003E80  6E39               	movwf	_eusart1TxTail,c	;volatile
  9821                           
  9822                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  9823  003E82  0E46               	movlw	70
  9824  003E84  0101               	movlb	1	; () banked
  9825  003E86  6FEC               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  9826                           
  9827                           ;eusart1.c: 102: eusart1RxHead = 0;
  9828  003E88  0E00               	movlw	0
  9829  003E8A  6E38               	movwf	_eusart1RxHead,c	;volatile
  9830                           
  9831                           ;eusart1.c: 103: eusart1RxTail = 0;
  9832  003E8C  0E00               	movlw	0
  9833  003E8E  6E37               	movwf	_eusart1RxTail,c	;volatile
  9834                           
  9835                           ;eusart1.c: 104: eusart1RxCount = 0;
  9836  003E90  0E00               	movlw	0
  9837  003E92  0100               	movlb	0	; () banked
  9838  003E94  6FEE               	movwf	_eusart1RxCount& (0+255),b	;volatile
  9839                           
  9840                           ; BSR set to: 0
  9841                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  9842  003E96  8A9D               	bsf	3997,5,c	;volatile
  9843                           
  9844                           ; BSR set to: 0
  9845  003E98  0012               	return		;funcret
  9846  003E9A                     __end_of_EUSART1_Initialize:
  9847                           	opt stack 0
  9848                           tosu	equ	0xFFF
  9849                           tosh	equ	0xFFE
  9850                           tosl	equ	0xFFD
  9851                           pclath	equ	0xFFA
  9852                           tblptru	equ	0xFF8
  9853                           tblptrh	equ	0xFF7
  9854                           tblptrl	equ	0xFF6
  9855                           tablat	equ	0xFF5
  9856                           prodh	equ	0xFF4
  9857                           prodl	equ	0xFF3
  9858                           intcon	equ	0xFF2
  9859                           intcon2	equ	0xFF1
  9860                           postinc0	equ	0xFEE
  9861                           plusw0	equ	0xFEB
  9862                           wreg	equ	0xFE8
  9863                           indf1	equ	0xFE7
  9864                           postdec1	equ	0xFE5
  9865                           fsr1h	equ	0xFE2
  9866                           fsr1l	equ	0xFE1
  9867                           indf2	equ	0xFDF
  9868                           postinc2	equ	0xFDE
  9869                           postdec2	equ	0xFDD
  9870                           plusw2	equ	0xFDB
  9871                           fsr2h	equ	0xFDA
  9872                           fsr2l	equ	0xFD9
  9873                           status	equ	0xFD8
  9874                           
  9875 ;; *************** function _ADC_Initialize *****************
  9876 ;; Defined at:
  9877 ;;		line 58 in file "mcc_generated_files/adc.c"
  9878 ;; Parameters:    Size  Location     Type
  9879 ;;		None
  9880 ;; Auto vars:     Size  Location     Type
  9881 ;;		None
  9882 ;; Return value:  Size  Location     Type
  9883 ;;                  1    wreg      void 
  9884 ;; Registers used:
  9885 ;;		wreg, status,2
  9886 ;; Tracked objects:
  9887 ;;		On entry : 0/0
  9888 ;;		On exit  : 0/0
  9889 ;;		Unchanged: 0/0
  9890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9891 ;;      Params:         0       0       0       0       0       0       0
  9892 ;;      Locals:         0       0       0       0       0       0       0
  9893 ;;      Temps:          0       0       0       0       0       0       0
  9894 ;;      Totals:         0       0       0       0       0       0       0
  9895 ;;Total ram usage:        0 bytes
  9896 ;; Hardware stack levels used:    1
  9897 ;; Hardware stack levels required when called:    4
  9898 ;; This function calls:
  9899 ;;		Nothing
  9900 ;; This function is called by:
  9901 ;;		_SYSTEM_Initialize
  9902 ;; This function uses a non-reentrant model
  9903 ;;
  9904                           
  9905                           	psect	text48
  9906  0043B2                     __ptext48:
  9907                           	opt stack 0
  9908  0043B2                     _ADC_Initialize:
  9909                           	opt stack 24
  9910                           
  9911                           ;adc.c: 63: ADCON0 = 0x05;
  9912                           
  9913                           ; BSR set to: 0
  9914                           ;incstack = 0
  9915  0043B2  0E05               	movlw	5
  9916  0043B4  6EC2               	movwf	4034,c	;volatile
  9917                           
  9918                           ;adc.c: 66: ADCON1 = 0x00;
  9919  0043B6  0E00               	movlw	0
  9920  0043B8  6EC1               	movwf	4033,c	;volatile
  9921                           
  9922                           ;adc.c: 69: ADCON2 = 0x87;
  9923  0043BA  0E87               	movlw	135
  9924  0043BC  6EC0               	movwf	4032,c	;volatile
  9925                           
  9926                           ;adc.c: 72: ADRESL = 0x00;
  9927  0043BE  0E00               	movlw	0
  9928  0043C0  6EC3               	movwf	4035,c	;volatile
  9929                           
  9930                           ;adc.c: 75: ADRESH = 0x00;
  9931  0043C2  0E00               	movlw	0
  9932  0043C4  6EC4               	movwf	4036,c	;volatile
  9933  0043C6  0012               	return		;funcret
  9934  0043C8                     __end_of_ADC_Initialize:
  9935                           	opt stack 0
  9936                           tosu	equ	0xFFF
  9937                           tosh	equ	0xFFE
  9938                           tosl	equ	0xFFD
  9939                           pclath	equ	0xFFA
  9940                           tblptru	equ	0xFF8
  9941                           tblptrh	equ	0xFF7
  9942                           tblptrl	equ	0xFF6
  9943                           tablat	equ	0xFF5
  9944                           prodh	equ	0xFF4
  9945                           prodl	equ	0xFF3
  9946                           intcon	equ	0xFF2
  9947                           intcon2	equ	0xFF1
  9948                           postinc0	equ	0xFEE
  9949                           plusw0	equ	0xFEB
  9950                           wreg	equ	0xFE8
  9951                           indf1	equ	0xFE7
  9952                           postdec1	equ	0xFE5
  9953                           fsr1h	equ	0xFE2
  9954                           fsr1l	equ	0xFE1
  9955                           indf2	equ	0xFDF
  9956                           postinc2	equ	0xFDE
  9957                           postdec2	equ	0xFDD
  9958                           plusw2	equ	0xFDB
  9959                           fsr2h	equ	0xFDA
  9960                           fsr2l	equ	0xFD9
  9961                           status	equ	0xFD8
  9962                           
  9963 ;; *************** function _SetMcuRunTime *****************
  9964 ;; Defined at:
  9965 ;;		line 57 in file "SystemStatus.c"
  9966 ;; Parameters:    Size  Location     Type
  9967 ;;		None
  9968 ;; Auto vars:     Size  Location     Type
  9969 ;;		None
  9970 ;; Return value:  Size  Location     Type
  9971 ;;                  1    wreg      void 
  9972 ;; Registers used:
  9973 ;;		wreg, status,2, status,0, cstack
  9974 ;; Tracked objects:
  9975 ;;		On entry : 0/0
  9976 ;;		On exit  : 0/0
  9977 ;;		Unchanged: 0/0
  9978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9979 ;;      Params:         0       0       0       0       0       0       0
  9980 ;;      Locals:         0       0       0       0       0       0       0
  9981 ;;      Temps:          0       0       0       0       0       0       0
  9982 ;;      Totals:         0       0       0       0       0       0       0
  9983 ;;Total ram usage:        0 bytes
  9984 ;; Hardware stack levels used:    1
  9985 ;; Hardware stack levels required when called:    5
  9986 ;; This function calls:
  9987 ;;		___llmod
  9988 ;; This function is called by:
  9989 ;;		_main
  9990 ;; This function uses a non-reentrant model
  9991 ;;
  9992                           
  9993                           	psect	text49
  9994  003CAE                     __ptext49:
  9995                           	opt stack 0
  9996  003CAE                     _SetMcuRunTime:
  9997                           	opt stack 25
  9998                           
  9999                           ;SystemStatus.c: 59: mcuRunTimeIn5SecTicks++;
 10000                           
 10001                           ;incstack = 0
 10002  003CAE  0E01               	movlw	1
 10003  003CB0  0101               	movlb	1	; () banked
 10004  003CB2  2728               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
 10005  003CB4  0E00               	movlw	0
 10006  003CB6  2329               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
 10007  003CB8  232A               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
 10008  003CBA  232B               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
 10009                           
 10010                           ; BSR set to: 1
 10011                           ;SystemStatus.c: 60: mcuRunTimeIn5SecTicks %= (17280);
 10012  003CBC  C128  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
 10013  003CC0  C129  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
 10014  003CC4  C12A  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
 10015  003CC8  C12B  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
 10016  003CCC  0E80               	movlw	128
 10017  003CCE  6E1C               	movwf	___llmod@divisor,c
 10018  003CD0  0E43               	movlw	67
 10019  003CD2  6E1D               	movwf	___llmod@divisor+1,c
 10020  003CD4  0E00               	movlw	0
 10021  003CD6  6E1E               	movwf	___llmod@divisor+2,c
 10022  003CD8  0E00               	movlw	0
 10023  003CDA  6E1F               	movwf	___llmod@divisor+3,c
 10024  003CDC  EC9A  F01B         	call	___llmod	;wreg free
 10025  003CE0  C018  F128         	movff	?___llmod,_mcuRunTimeIn5SecTicks
 10026  003CE4  C019  F129         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
 10027  003CE8  C01A  F12A         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
 10028  003CEC  C01B  F12B         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
 10029  003CF0  0012               	return		;funcret
 10030  003CF2                     __end_of_SetMcuRunTime:
 10031                           	opt stack 0
 10032                           tosu	equ	0xFFF
 10033                           tosh	equ	0xFFE
 10034                           tosl	equ	0xFFD
 10035                           pclath	equ	0xFFA
 10036                           tblptru	equ	0xFF8
 10037                           tblptrh	equ	0xFF7
 10038                           tblptrl	equ	0xFF6
 10039                           tablat	equ	0xFF5
 10040                           prodh	equ	0xFF4
 10041                           prodl	equ	0xFF3
 10042                           intcon	equ	0xFF2
 10043                           intcon2	equ	0xFF1
 10044                           postinc0	equ	0xFEE
 10045                           plusw0	equ	0xFEB
 10046                           wreg	equ	0xFE8
 10047                           indf1	equ	0xFE7
 10048                           postdec1	equ	0xFE5
 10049                           fsr1h	equ	0xFE2
 10050                           fsr1l	equ	0xFE1
 10051                           indf2	equ	0xFDF
 10052                           postinc2	equ	0xFDE
 10053                           postdec2	equ	0xFDD
 10054                           plusw2	equ	0xFDB
 10055                           fsr2h	equ	0xFDA
 10056                           fsr2l	equ	0xFD9
 10057                           status	equ	0xFD8
 10058                           
 10059 ;; *************** function ___llmod *****************
 10060 ;; Defined at:
 10061 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
 10062 ;; Parameters:    Size  Location     Type
 10063 ;;  dividend        4   23[COMRAM] unsigned long 
 10064 ;;  divisor         4   27[COMRAM] unsigned long 
 10065 ;; Auto vars:     Size  Location     Type
 10066 ;;  counter         1   31[COMRAM] unsigned char 
 10067 ;; Return value:  Size  Location     Type
 10068 ;;                  4   23[COMRAM] unsigned long 
 10069 ;; Registers used:
 10070 ;;		wreg, status,2, status,0
 10071 ;; Tracked objects:
 10072 ;;		On entry : 0/0
 10073 ;;		On exit  : 0/0
 10074 ;;		Unchanged: 0/0
 10075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10076 ;;      Params:         8       0       0       0       0       0       0
 10077 ;;      Locals:         1       0       0       0       0       0       0
 10078 ;;      Temps:          0       0       0       0       0       0       0
 10079 ;;      Totals:         9       0       0       0       0       0       0
 10080 ;;Total ram usage:        9 bytes
 10081 ;; Hardware stack levels used:    1
 10082 ;; Hardware stack levels required when called:    4
 10083 ;; This function calls:
 10084 ;;		Nothing
 10085 ;; This function is called by:
 10086 ;;		_SetMcuRunTime
 10087 ;;		_GetMcuRunTime
 10088 ;; This function uses a non-reentrant model
 10089 ;;
 10090                           
 10091                           	psect	text50
 10092  003734                     __ptext50:
 10093                           	opt stack 0
 10094  003734                     ___llmod:
 10095                           	opt stack 23
 10096                           
 10097                           ;incstack = 0
 10098  003734  501C               	movf	___llmod@divisor,w,c
 10099  003736  101D               	iorwf	___llmod@divisor+1,w,c
 10100  003738  101E               	iorwf	___llmod@divisor+2,w,c
 10101  00373A  101F               	iorwf	___llmod@divisor+3,w,c
 10102  00373C  B4D8               	btfsc	status,2,c
 10103  00373E  D024               	goto	l1976
 10104  003740  0E01               	movlw	1
 10105  003742  6E20               	movwf	___llmod@counter,c
 10106  003744  D006               	goto	l1971
 10107  003746  90D8               	bcf	status,0,c
 10108  003748  361C               	rlcf	___llmod@divisor,f,c
 10109  00374A  361D               	rlcf	___llmod@divisor+1,f,c
 10110  00374C  361E               	rlcf	___llmod@divisor+2,f,c
 10111  00374E  361F               	rlcf	___llmod@divisor+3,f,c
 10112  003750  2A20               	incf	___llmod@counter,f,c
 10113  003752                     l1971:
 10114  003752  AE1F               	btfss	___llmod@divisor+3,7,c
 10115  003754  D7F8               	goto	l1972
 10116  003756                     u8570:
 10117  003756  501C               	movf	___llmod@divisor,w,c
 10118  003758  5C18               	subwf	___llmod@dividend,w,c
 10119  00375A  501D               	movf	___llmod@divisor+1,w,c
 10120  00375C  5819               	subwfb	___llmod@dividend+1,w,c
 10121  00375E  501E               	movf	___llmod@divisor+2,w,c
 10122  003760  581A               	subwfb	___llmod@dividend+2,w,c
 10123  003762  501F               	movf	___llmod@divisor+3,w,c
 10124  003764  581B               	subwfb	___llmod@dividend+3,w,c
 10125  003766  A0D8               	btfss	status,0,c
 10126  003768  D008               	goto	l1975
 10127  00376A  501C               	movf	___llmod@divisor,w,c
 10128  00376C  5E18               	subwf	___llmod@dividend,f,c
 10129  00376E  501D               	movf	___llmod@divisor+1,w,c
 10130  003770  5A19               	subwfb	___llmod@dividend+1,f,c
 10131  003772  501E               	movf	___llmod@divisor+2,w,c
 10132  003774  5A1A               	subwfb	___llmod@dividend+2,f,c
 10133  003776  501F               	movf	___llmod@divisor+3,w,c
 10134  003778  5A1B               	subwfb	___llmod@dividend+3,f,c
 10135  00377A                     l1975:
 10136  00377A  90D8               	bcf	status,0,c
 10137  00377C  321F               	rrcf	___llmod@divisor+3,f,c
 10138  00377E  321E               	rrcf	___llmod@divisor+2,f,c
 10139  003780  321D               	rrcf	___llmod@divisor+1,f,c
 10140  003782  321C               	rrcf	___llmod@divisor,f,c
 10141  003784  2E20               	decfsz	___llmod@counter,f,c
 10142  003786  D7E7               	goto	u8570
 10143  003788                     l1976:
 10144  003788  C018  F018         	movff	___llmod@dividend,?___llmod
 10145  00378C  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
 10146  003790  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
 10147  003794  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
 10148  003798  0012               	return		;funcret
 10149  00379A                     __end_of___llmod:
 10150                           	opt stack 0
 10151                           tosu	equ	0xFFF
 10152                           tosh	equ	0xFFE
 10153                           tosl	equ	0xFFD
 10154                           pclath	equ	0xFFA
 10155                           tblptru	equ	0xFF8
 10156                           tblptrh	equ	0xFF7
 10157                           tblptrl	equ	0xFF6
 10158                           tablat	equ	0xFF5
 10159                           prodh	equ	0xFF4
 10160                           prodl	equ	0xFF3
 10161                           intcon	equ	0xFF2
 10162                           intcon2	equ	0xFF1
 10163                           postinc0	equ	0xFEE
 10164                           plusw0	equ	0xFEB
 10165                           wreg	equ	0xFE8
 10166                           indf1	equ	0xFE7
 10167                           postdec1	equ	0xFE5
 10168                           fsr1h	equ	0xFE2
 10169                           fsr1l	equ	0xFE1
 10170                           indf2	equ	0xFDF
 10171                           postinc2	equ	0xFDE
 10172                           postdec2	equ	0xFDD
 10173                           plusw2	equ	0xFDB
 10174                           fsr2h	equ	0xFDA
 10175                           fsr2l	equ	0xFD9
 10176                           status	equ	0xFD8
 10177                           
 10178 ;; *************** function _SendSystemStartAck *****************
 10179 ;; Defined at:
 10180 ;;		line 152 in file "SystemCommon.c"
 10181 ;; Parameters:    Size  Location     Type
 10182 ;;		None
 10183 ;; Auto vars:     Size  Location     Type
 10184 ;;		None
 10185 ;; Return value:  Size  Location     Type
 10186 ;;                  1    wreg      void 
 10187 ;; Registers used:
 10188 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10189 ;; Tracked objects:
 10190 ;;		On entry : 0/0
 10191 ;;		On exit  : 0/0
 10192 ;;		Unchanged: 0/0
 10193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10194 ;;      Params:         0       0       0       0       0       0       0
 10195 ;;      Locals:         0       0       0       0       0       0       0
 10196 ;;      Temps:          0       0       0       0       0       0       0
 10197 ;;      Totals:         0       0       0       0       0       0       0
 10198 ;;Total ram usage:        0 bytes
 10199 ;; Hardware stack levels used:    1
 10200 ;; Hardware stack levels required when called:    7
 10201 ;; This function calls:
 10202 ;;		_SendAckMessage
 10203 ;; This function is called by:
 10204 ;;		_main
 10205 ;; This function uses a non-reentrant model
 10206 ;;
 10207                           
 10208                           	psect	text51
 10209  00448C                     __ptext51:
 10210                           	opt stack 0
 10211  00448C                     _SendSystemStartAck:
 10212                           	opt stack 23
 10213                           
 10214                           ;SystemCommon.c: 154: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_SYSTE
      +                          M_START);
 10215                           
 10216                           ;incstack = 0
 10217  00448C  0E10               	movlw	16
 10218  00448E  6E24               	movwf	SendAckMessage@inRequest,c
 10219  004490  0E01               	movlw	1
 10220  004492  ECE5  F01D         	call	_SendAckMessage
 10221  004496  0012               	return		;funcret
 10222  004498                     __end_of_SendSystemStartAck:
 10223                           	opt stack 0
 10224                           tosu	equ	0xFFF
 10225                           tosh	equ	0xFFE
 10226                           tosl	equ	0xFFD
 10227                           pclath	equ	0xFFA
 10228                           tblptru	equ	0xFF8
 10229                           tblptrh	equ	0xFF7
 10230                           tblptrl	equ	0xFF6
 10231                           tablat	equ	0xFF5
 10232                           prodh	equ	0xFF4
 10233                           prodl	equ	0xFF3
 10234                           intcon	equ	0xFF2
 10235                           intcon2	equ	0xFF1
 10236                           postinc0	equ	0xFEE
 10237                           plusw0	equ	0xFEB
 10238                           wreg	equ	0xFE8
 10239                           indf1	equ	0xFE7
 10240                           postdec1	equ	0xFE5
 10241                           fsr1h	equ	0xFE2
 10242                           fsr1l	equ	0xFE1
 10243                           indf2	equ	0xFDF
 10244                           postinc2	equ	0xFDE
 10245                           postdec2	equ	0xFDD
 10246                           plusw2	equ	0xFDB
 10247                           fsr2h	equ	0xFDA
 10248                           fsr2l	equ	0xFD9
 10249                           status	equ	0xFD8
 10250                           
 10251 ;; *************** function _SendAckMessage *****************
 10252 ;; Defined at:
 10253 ;;		line 171 in file "EusartApp.c"
 10254 ;; Parameters:    Size  Location     Type
 10255 ;;  inGroup         1    wreg     enum E7193
 10256 ;;  inRequest       1   35[COMRAM] enum E7201
 10257 ;; Auto vars:     Size  Location     Type
 10258 ;;  inGroup         1   36[COMRAM] enum E7193
 10259 ;;  TxMsg           6   37[COMRAM] unsigned char [6]
 10260 ;; Return value:  Size  Location     Type
 10261 ;;                  1    wreg      void 
 10262 ;; Registers used:
 10263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10264 ;; Tracked objects:
 10265 ;;		On entry : 0/0
 10266 ;;		On exit  : 0/0
 10267 ;;		Unchanged: 0/0
 10268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10269 ;;      Params:         1       0       0       0       0       0       0
 10270 ;;      Locals:         7       0       0       0       0       0       0
 10271 ;;      Temps:          0       0       0       0       0       0       0
 10272 ;;      Totals:         8       0       0       0       0       0       0
 10273 ;;Total ram usage:        8 bytes
 10274 ;; Hardware stack levels used:    1
 10275 ;; Hardware stack levels required when called:    6
 10276 ;; This function calls:
 10277 ;;		_WriteUartMessage
 10278 ;;		_ZeroArray
 10279 ;;		_crc8
 10280 ;; This function is called by:
 10281 ;;		_testLeds
 10282 ;;		_SetChannelMode
 10283 ;;		_FlashReadUart
 10284 ;;		_FlashEreaseMem
 10285 ;;		_DacSetValue
 10286 ;;		_UpdateSynthFreq
 10287 ;;		_SetSynthOper
 10288 ;;		_ResetMcu
 10289 ;;		_SendSystemStartAck
 10290 ;;		_keepAliveSignalUart
 10291 ;; This function uses a non-reentrant model
 10292 ;;
 10293                           
 10294                           	psect	text52
 10295  003BCA                     __ptext52:
 10296                           	opt stack 0
 10297  003BCA                     _SendAckMessage:
 10298                           	opt stack 21
 10299                           
 10300                           ;incstack = 0
 10301                           ;SendAckMessage@inGroup stored from wreg
 10302  003BCA  6E25               	movwf	SendAckMessage@inGroup,c
 10303                           
 10304                           ;EusartApp.c: 174: char TxMsg[(0x5) + 1];
 10305                           ;EusartApp.c: 175: ZeroArray(TxMsg, (0x5) + 1);
 10306  003BCC  0E26               	movlw	low SendAckMessage@TxMsg
 10307  003BCE  6E20               	movwf	ZeroArray@array,c
 10308  003BD0  0E00               	movlw	high SendAckMessage@TxMsg
 10309  003BD2  6E21               	movwf	ZeroArray@array+1,c
 10310  003BD4  0E00               	movlw	0
 10311  003BD6  6E23               	movwf	ZeroArray@size+1,c
 10312  003BD8  0E06               	movlw	6
 10313  003BDA  6E22               	movwf	ZeroArray@size,c
 10314  003BDC  EC95  F021         	call	_ZeroArray	;wreg free
 10315                           
 10316                           ;EusartApp.c: 178: TxMsg[(0)] = (0x24);
 10317  003BE0  0E24               	movlw	36
 10318  003BE2  6E26               	movwf	SendAckMessage@TxMsg,c
 10319                           
 10320                           ;EusartApp.c: 179: TxMsg[(1)] = inGroup;
 10321  003BE4  C025  F027         	movff	SendAckMessage@inGroup,SendAckMessage@TxMsg+1
 10322                           
 10323                           ;EusartApp.c: 180: TxMsg[(2)] = inRequest;
 10324  003BE8  C024  F028         	movff	SendAckMessage@inRequest,SendAckMessage@TxMsg+2
 10325                           
 10326                           ;EusartApp.c: 181: TxMsg[(3)] = 0;
 10327  003BEC  0E00               	movlw	0
 10328  003BEE  6E29               	movwf	SendAckMessage@TxMsg+3,c
 10329                           
 10330                           ;EusartApp.c: 183: TxMsg[(0x5)] = crc8(TxMsg, (0x5));
 10331  003BF0  0E26               	movlw	low SendAckMessage@TxMsg
 10332  003BF2  6E18               	movwf	crc8@dataArray,c
 10333  003BF4  0E00               	movlw	high SendAckMessage@TxMsg
 10334  003BF6  6E19               	movwf	crc8@dataArray+1,c
 10335  003BF8  0E00               	movlw	0
 10336  003BFA  6E1B               	movwf	crc8@dataSize+1,c
 10337  003BFC  0E05               	movlw	5
 10338  003BFE  6E1A               	movwf	crc8@dataSize,c
 10339  003C00  EC0E  F01E         	call	_crc8	;wreg free
 10340  003C04  6E2B               	movwf	SendAckMessage@TxMsg+5,c
 10341                           
 10342                           ;EusartApp.c: 185: WriteUartMessage(TxMsg, (0x5) + 1);
 10343  003C06  0E26               	movlw	low SendAckMessage@TxMsg
 10344  003C08  6E19               	movwf	WriteUartMessage@dataBuf,c
 10345  003C0A  0E00               	movlw	high SendAckMessage@TxMsg
 10346  003C0C  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
 10347  003C0E  0E00               	movlw	0
 10348  003C10  6E1C               	movwf	WriteUartMessage@dataSize+1,c
 10349  003C12  0E06               	movlw	6
 10350  003C14  6E1B               	movwf	WriteUartMessage@dataSize,c
 10351  003C16  ECA1  F01F         	call	_WriteUartMessage	;wreg free
 10352  003C1A  0012               	return		;funcret
 10353  003C1C                     __end_of_SendAckMessage:
 10354                           	opt stack 0
 10355                           tosu	equ	0xFFF
 10356                           tosh	equ	0xFFE
 10357                           tosl	equ	0xFFD
 10358                           pclath	equ	0xFFA
 10359                           tblptru	equ	0xFF8
 10360                           tblptrh	equ	0xFF7
 10361                           tblptrl	equ	0xFF6
 10362                           tablat	equ	0xFF5
 10363                           prodh	equ	0xFF4
 10364                           prodl	equ	0xFF3
 10365                           intcon	equ	0xFF2
 10366                           intcon2	equ	0xFF1
 10367                           postinc0	equ	0xFEE
 10368                           plusw0	equ	0xFEB
 10369                           wreg	equ	0xFE8
 10370                           indf1	equ	0xFE7
 10371                           postdec1	equ	0xFE5
 10372                           fsr1h	equ	0xFE2
 10373                           fsr1l	equ	0xFE1
 10374                           indf2	equ	0xFDF
 10375                           postinc2	equ	0xFDE
 10376                           postdec2	equ	0xFDD
 10377                           plusw2	equ	0xFDB
 10378                           fsr2h	equ	0xFDA
 10379                           fsr2l	equ	0xFD9
 10380                           status	equ	0xFD8
 10381                           
 10382 ;; *************** function _crc8 *****************
 10383 ;; Defined at:
 10384 ;;		line 13 in file "SystemCommon.c"
 10385 ;; Parameters:    Size  Location     Type
 10386 ;;  dataArray       2   23[COMRAM] PTR unsigned char 
 10387 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(18), SynthReadData@TxMsg(18), DacReadValue@TxMsg(7), 
 10388 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
 10389 ;;  dataSize        2   25[COMRAM] int 
 10390 ;; Auto vars:     Size  Location     Type
 10391 ;;  i               2   30[COMRAM] int 
 10392 ;;  crc             2   28[COMRAM] int 
 10393 ;; Return value:  Size  Location     Type
 10394 ;;                  1    wreg      unsigned char 
 10395 ;; Registers used:
 10396 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10397 ;; Tracked objects:
 10398 ;;		On entry : 0/0
 10399 ;;		On exit  : 0/0
 10400 ;;		Unchanged: 0/0
 10401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10402 ;;      Params:         4       0       0       0       0       0       0
 10403 ;;      Locals:         4       0       0       0       0       0       0
 10404 ;;      Temps:          1       0       0       0       0       0       0
 10405 ;;      Totals:         9       0       0       0       0       0       0
 10406 ;;Total ram usage:        9 bytes
 10407 ;; Hardware stack levels used:    1
 10408 ;; Hardware stack levels required when called:    4
 10409 ;; This function calls:
 10410 ;;		Nothing
 10411 ;; This function is called by:
 10412 ;;		_readUartMessage
 10413 ;;		_SendAckMessage
 10414 ;;		_FlashReadUart
 10415 ;;		_FlashReadCondition
 10416 ;;		_DacReadValue
 10417 ;;		_SynthReadData
 10418 ;;		_GetMcuFwVersion
 10419 ;;		_GetMcuRunTime
 10420 ;; This function uses a non-reentrant model
 10421 ;;
 10422                           
 10423                           	psect	text53
 10424  003C1C                     __ptext53:
 10425                           	opt stack 0
 10426  003C1C                     _crc8:
 10427                           	opt stack 25
 10428                           
 10429                           ;SystemCommon.c: 15: int crc = 0;
 10430                           
 10431                           ;incstack = 0
 10432  003C1C  0E00               	movlw	0
 10433  003C1E  6E1E               	movwf	crc8@crc+1,c
 10434  003C20  0E00               	movlw	0
 10435  003C22  6E1D               	movwf	crc8@crc,c
 10436                           
 10437                           ;SystemCommon.c: 16: for (int i = 0; i < dataSize; i++)
 10438  003C24  0E00               	movlw	0
 10439  003C26  6E20               	movwf	crc8@i+1,c
 10440  003C28  0E00               	movlw	0
 10441  003C2A  6E1F               	movwf	crc8@i,c
 10442  003C2C  D00E               	goto	l1400
 10443  003C2E                     
 10444                           ;SystemCommon.c: 17: {
 10445                           ;SystemCommon.c: 18: crc += dataArray[i];
 10446  003C2E  501F               	movf	crc8@i,w,c
 10447  003C30  2418               	addwf	crc8@dataArray,w,c
 10448  003C32  6ED9               	movwf	fsr2l,c
 10449  003C34  5020               	movf	crc8@i+1,w,c
 10450  003C36  2019               	addwfc	crc8@dataArray+1,w,c
 10451  003C38  6EDA               	movwf	fsr2h,c
 10452  003C3A  50DF               	movf	indf2,w,c
 10453  003C3C  6E1C               	movwf	??_crc8& (0+255),c
 10454  003C3E  501C               	movf	??_crc8,w,c
 10455  003C40  261D               	addwf	crc8@crc,f,c
 10456  003C42  0E00               	movlw	0
 10457  003C44  221E               	addwfc	crc8@crc+1,f,c
 10458  003C46  4A1F               	infsnz	crc8@i,f,c
 10459  003C48  2A20               	incf	crc8@i+1,f,c
 10460  003C4A                     l1400:
 10461  003C4A  501A               	movf	crc8@dataSize,w,c
 10462  003C4C  5C1F               	subwf	crc8@i,w,c
 10463  003C4E  5020               	movf	crc8@i+1,w,c
 10464  003C50  0A80               	xorlw	128
 10465  003C52  6E1C               	movwf	??_crc8& (0+255),c
 10466  003C54  501B               	movf	crc8@dataSize+1,w,c
 10467  003C56  0A80               	xorlw	128
 10468  003C58  581C               	subwfb	??_crc8& (0+255),w,c
 10469  003C5A  A0D8               	btfss	status,0,c
 10470  003C5C  D7E8               	goto	l1401
 10471                           
 10472                           ;SystemCommon.c: 19: }
 10473                           ;SystemCommon.c: 20: crc &= 0xff;
 10474  003C5E  0EFF               	movlw	255
 10475  003C60  161D               	andwf	crc8@crc,f,c
 10476  003C62  0E00               	movlw	0
 10477  003C64  161E               	andwf	crc8@crc+1,f,c
 10478                           
 10479                           ;SystemCommon.c: 21: return crc;
 10480  003C66  501D               	movf	crc8@crc,w,c
 10481  003C68  0012               	return	
 10482  003C6A                     __end_of_crc8:
 10483                           	opt stack 0
 10484                           tosu	equ	0xFFF
 10485                           tosh	equ	0xFFE
 10486                           tosl	equ	0xFFD
 10487                           pclath	equ	0xFFA
 10488                           tblptru	equ	0xFF8
 10489                           tblptrh	equ	0xFF7
 10490                           tblptrl	equ	0xFF6
 10491                           tablat	equ	0xFF5
 10492                           prodh	equ	0xFF4
 10493                           prodl	equ	0xFF3
 10494                           intcon	equ	0xFF2
 10495                           intcon2	equ	0xFF1
 10496                           postinc0	equ	0xFEE
 10497                           plusw0	equ	0xFEB
 10498                           wreg	equ	0xFE8
 10499                           indf1	equ	0xFE7
 10500                           postdec1	equ	0xFE5
 10501                           fsr1h	equ	0xFE2
 10502                           fsr1l	equ	0xFE1
 10503                           indf2	equ	0xFDF
 10504                           postinc2	equ	0xFDE
 10505                           postdec2	equ	0xFDD
 10506                           plusw2	equ	0xFDB
 10507                           fsr2h	equ	0xFDA
 10508                           fsr2l	equ	0xFD9
 10509                           status	equ	0xFD8
 10510                           
 10511 ;; *************** function _ZeroArray *****************
 10512 ;; Defined at:
 10513 ;;		line 24 in file "SystemCommon.c"
 10514 ;; Parameters:    Size  Location     Type
 10515 ;;  array           2   31[COMRAM] PTR unsigned char 
 10516 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SynthReadData@TxMsg(18), DacReadValue@TxMsg(7), 
 10517 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), SendAckMessage@TxMsg(6), 
 10518 ;;		 -> rxMsgData(20), rxMsgQueue(20), 
 10519 ;;  size            2   33[COMRAM] int 
 10520 ;; Auto vars:     Size  Location     Type
 10521 ;;		None
 10522 ;; Return value:  Size  Location     Type
 10523 ;;                  1    wreg      void 
 10524 ;; Registers used:
 10525 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10526 ;; Tracked objects:
 10527 ;;		On entry : 0/0
 10528 ;;		On exit  : 0/0
 10529 ;;		Unchanged: 0/0
 10530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10531 ;;      Params:         4       0       0       0       0       0       0
 10532 ;;      Locals:         0       0       0       0       0       0       0
 10533 ;;      Temps:          0       0       0       0       0       0       0
 10534 ;;      Totals:         4       0       0       0       0       0       0
 10535 ;;Total ram usage:        4 bytes
 10536 ;; Hardware stack levels used:    1
 10537 ;; Hardware stack levels required when called:    5
 10538 ;; This function calls:
 10539 ;;		_memset
 10540 ;; This function is called by:
 10541 ;;		_readUartMessage
 10542 ;;		_InitRxMessageParams
 10543 ;;		_SendAckMessage
 10544 ;;		_FlashReadUart
 10545 ;;		_FlashEreaseMem
 10546 ;;		_FlashReadCondition
 10547 ;;		_DacReadValue
 10548 ;;		_SynthReadData
 10549 ;;		_GetIntFromUartData
 10550 ;;		_GetMcuFwVersion
 10551 ;; This function uses a non-reentrant model
 10552 ;;
 10553                           
 10554                           	psect	text54
 10555  00432A                     __ptext54:
 10556                           	opt stack 0
 10557  00432A                     _ZeroArray:
 10558                           	opt stack 24
 10559                           
 10560                           ;SystemCommon.c: 26: memset(array, 0x0, size);
 10561                           
 10562                           ;incstack = 0
 10563  00432A  C020  F018         	movff	ZeroArray@array,memset@p1
 10564  00432E  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
 10565  004332  0E00               	movlw	0
 10566  004334  6E1B               	movwf	memset@c+1,c
 10567  004336  0E00               	movlw	0
 10568  004338  6E1A               	movwf	memset@c,c
 10569  00433A  C022  F01C         	movff	ZeroArray@size,memset@n
 10570  00433E  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
 10571  004342  EC84  F020         	call	_memset	;wreg free
 10572  004346  0012               	return		;funcret
 10573  004348                     __end_of_ZeroArray:
 10574                           	opt stack 0
 10575                           tosu	equ	0xFFF
 10576                           tosh	equ	0xFFE
 10577                           tosl	equ	0xFFD
 10578                           pclath	equ	0xFFA
 10579                           tblptru	equ	0xFF8
 10580                           tblptrh	equ	0xFF7
 10581                           tblptrl	equ	0xFF6
 10582                           tablat	equ	0xFF5
 10583                           prodh	equ	0xFF4
 10584                           prodl	equ	0xFF3
 10585                           intcon	equ	0xFF2
 10586                           intcon2	equ	0xFF1
 10587                           postinc0	equ	0xFEE
 10588                           plusw0	equ	0xFEB
 10589                           wreg	equ	0xFE8
 10590                           indf1	equ	0xFE7
 10591                           postdec1	equ	0xFE5
 10592                           fsr1h	equ	0xFE2
 10593                           fsr1l	equ	0xFE1
 10594                           indf2	equ	0xFDF
 10595                           postinc2	equ	0xFDE
 10596                           postdec2	equ	0xFDD
 10597                           plusw2	equ	0xFDB
 10598                           fsr2h	equ	0xFDA
 10599                           fsr2l	equ	0xFD9
 10600                           status	equ	0xFD8
 10601                           
 10602 ;; *************** function _WriteUartMessage *****************
 10603 ;; Defined at:
 10604 ;;		line 158 in file "EusartApp.c"
 10605 ;; Parameters:    Size  Location     Type
 10606 ;;  dataBuf         2   24[COMRAM] PTR unsigned char 
 10607 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(18), SynthReadData@TxMsg(18), DacReadValue@TxMsg(7), 
 10608 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), 
 10609 ;;  dataSize        2   26[COMRAM] int 
 10610 ;; Auto vars:     Size  Location     Type
 10611 ;;  idx             2   29[COMRAM] int 
 10612 ;; Return value:  Size  Location     Type
 10613 ;;                  1    wreg      void 
 10614 ;; Registers used:
 10615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10616 ;; Tracked objects:
 10617 ;;		On entry : 0/0
 10618 ;;		On exit  : 0/0
 10619 ;;		Unchanged: 0/0
 10620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10621 ;;      Params:         4       0       0       0       0       0       0
 10622 ;;      Locals:         2       0       0       0       0       0       0
 10623 ;;      Temps:          1       0       0       0       0       0       0
 10624 ;;      Totals:         7       0       0       0       0       0       0
 10625 ;;Total ram usage:        7 bytes
 10626 ;; Hardware stack levels used:    1
 10627 ;; Hardware stack levels required when called:    5
 10628 ;; This function calls:
 10629 ;;		_EUSART1_Write
 10630 ;; This function is called by:
 10631 ;;		_SendAckMessage
 10632 ;;		_FlashReadUart
 10633 ;;		_FlashReadCondition
 10634 ;;		_DacReadValue
 10635 ;;		_SynthReadData
 10636 ;;		_GetMcuFwVersion
 10637 ;;		_GetMcuRunTime
 10638 ;; This function uses a non-reentrant model
 10639 ;;
 10640                           
 10641                           	psect	text55
 10642  003F42                     __ptext55:
 10643                           	opt stack 0
 10644  003F42                     _WriteUartMessage:
 10645                           	opt stack 21
 10646                           
 10647                           ;EusartApp.c: 160: for(int idx = 0; idx < dataSize; idx++)
 10648                           
 10649                           ;incstack = 0
 10650  003F42  0E00               	movlw	0
 10651  003F44  6E1F               	movwf	WriteUartMessage@idx+1,c
 10652  003F46  0E00               	movlw	0
 10653  003F48  6E1E               	movwf	WriteUartMessage@idx,c
 10654  003F4A  D00B               	goto	l234
 10655  003F4C                     
 10656                           ;EusartApp.c: 161: {
 10657                           ;EusartApp.c: 162: EUSART1_Write(dataBuf[idx]);
 10658  003F4C  501E               	movf	WriteUartMessage@idx,w,c
 10659  003F4E  2419               	addwf	WriteUartMessage@dataBuf,w,c
 10660  003F50  6ED9               	movwf	fsr2l,c
 10661  003F52  501F               	movf	WriteUartMessage@idx+1,w,c
 10662  003F54  201A               	addwfc	WriteUartMessage@dataBuf+1,w,c
 10663  003F56  6EDA               	movwf	fsr2h,c
 10664  003F58  50DF               	movf	indf2,w,c
 10665  003F5A  ECBB  F01E         	call	_EUSART1_Write
 10666  003F5E  4A1E               	infsnz	WriteUartMessage@idx,f,c
 10667  003F60  2A1F               	incf	WriteUartMessage@idx+1,f,c
 10668  003F62                     l234:
 10669  003F62  501B               	movf	WriteUartMessage@dataSize,w,c
 10670  003F64  5C1E               	subwf	WriteUartMessage@idx,w,c
 10671  003F66  501F               	movf	WriteUartMessage@idx+1,w,c
 10672  003F68  0A80               	xorlw	128
 10673  003F6A  6E1D               	movwf	??_WriteUartMessage& (0+255),c
 10674  003F6C  501C               	movf	WriteUartMessage@dataSize+1,w,c
 10675  003F6E  0A80               	xorlw	128
 10676  003F70  581D               	subwfb	??_WriteUartMessage& (0+255),w,c
 10677  003F72  B0D8               	btfsc	status,0,c
 10678  003F74  0012               	return	
 10679  003F76  D7EA               	goto	l235
 10680  003F78                     __end_of_WriteUartMessage:
 10681                           	opt stack 0
 10682                           tosu	equ	0xFFF
 10683                           tosh	equ	0xFFE
 10684                           tosl	equ	0xFFD
 10685                           pclath	equ	0xFFA
 10686                           tblptru	equ	0xFF8
 10687                           tblptrh	equ	0xFF7
 10688                           tblptrl	equ	0xFF6
 10689                           tablat	equ	0xFF5
 10690                           prodh	equ	0xFF4
 10691                           prodl	equ	0xFF3
 10692                           intcon	equ	0xFF2
 10693                           intcon2	equ	0xFF1
 10694                           postinc0	equ	0xFEE
 10695                           plusw0	equ	0xFEB
 10696                           wreg	equ	0xFE8
 10697                           indf1	equ	0xFE7
 10698                           postdec1	equ	0xFE5
 10699                           fsr1h	equ	0xFE2
 10700                           fsr1l	equ	0xFE1
 10701                           indf2	equ	0xFDF
 10702                           postinc2	equ	0xFDE
 10703                           postdec2	equ	0xFDD
 10704                           plusw2	equ	0xFDB
 10705                           fsr2h	equ	0xFDA
 10706                           fsr2l	equ	0xFD9
 10707                           status	equ	0xFD8
 10708                           
 10709 ;; *************** function _EUSART1_Write *****************
 10710 ;; Defined at:
 10711 ;;		line 157 in file "mcc_generated_files/eusart1.c"
 10712 ;; Parameters:    Size  Location     Type
 10713 ;;  txData          1    wreg     unsigned char 
 10714 ;; Auto vars:     Size  Location     Type
 10715 ;;  txData          1   23[COMRAM] unsigned char 
 10716 ;; Return value:  Size  Location     Type
 10717 ;;                  1    wreg      void 
 10718 ;; Registers used:
 10719 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10720 ;; Tracked objects:
 10721 ;;		On entry : 0/0
 10722 ;;		On exit  : 0/0
 10723 ;;		Unchanged: 0/0
 10724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10725 ;;      Params:         0       0       0       0       0       0       0
 10726 ;;      Locals:         1       0       0       0       0       0       0
 10727 ;;      Temps:          0       0       0       0       0       0       0
 10728 ;;      Totals:         1       0       0       0       0       0       0
 10729 ;;Total ram usage:        1 bytes
 10730 ;; Hardware stack levels used:    1
 10731 ;; Hardware stack levels required when called:    4
 10732 ;; This function calls:
 10733 ;;		Nothing
 10734 ;; This function is called by:
 10735 ;;		_WriteUartMessage
 10736 ;; This function uses a non-reentrant model
 10737 ;;
 10738                           
 10739                           	psect	text56
 10740  003D76                     __ptext56:
 10741                           	opt stack 0
 10742  003D76                     _EUSART1_Write:
 10743                           	opt stack 21
 10744                           
 10745                           ;incstack = 0
 10746                           ;EUSART1_Write@txData stored from wreg
 10747  003D76  6E18               	movwf	EUSART1_Write@txData,c
 10748  003D78                     
 10749                           ;eusart1.c: 160: {
 10750                           
 10751                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
 10752  003D78  0101               	movlb	1	; () banked
 10753  003D7A  51EC               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 10754  003D7C  B4D8               	btfsc	status,2,c
 10755  003D7E  D7FC               	goto	l7677
 10756                           
 10757                           ; BSR set to: 1
 10758                           ;eusart1.c: 161: }
 10759                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
 10760  003D80  B89D               	btfsc	3997,4,c	;volatile
 10761  003D82  D003               	goto	l919
 10762                           
 10763                           ; BSR set to: 1
 10764                           ;eusart1.c: 164: {
 10765                           ;eusart1.c: 165: TXREG1 = txData;
 10766  003D84  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 10767                           
 10768                           ;eusart1.c: 166: }
 10769  003D88  D012               	goto	l920
 10770  003D8A                     l919:
 10771                           
 10772                           ; BSR set to: 1
 10773                           ;eusart1.c: 167: else
 10774                           ;eusart1.c: 168: {
 10775                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
 10776  003D8A  989D               	bcf	3997,4,c	;volatile
 10777                           
 10778                           ; BSR set to: 1
 10779                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
 10780  003D8C  503A               	movf	_eusart1TxHead,w,c	;volatile
 10781  003D8E  0D01               	mullw	1
 10782  003D90  0E5D               	movlw	low _eusart1TxBuffer
 10783  003D92  24F3               	addwf	prodl,w,c
 10784  003D94  6ED9               	movwf	fsr2l,c
 10785  003D96  0E02               	movlw	high _eusart1TxBuffer
 10786  003D98  20F4               	addwfc	prodh,w,c
 10787  003D9A  6EDA               	movwf	fsr2h,c
 10788  003D9C  C018  FFDF         	movff	EUSART1_Write@txData,indf2
 10789                           
 10790                           ; BSR set to: 1
 10791  003DA0  2A3A               	incf	_eusart1TxHead,f,c	;volatile
 10792                           
 10793                           ; BSR set to: 1
 10794                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 10795  003DA2  0E45               	movlw	69
 10796  003DA4  643A               	cpfsgt	_eusart1TxHead,c	;volatile
 10797  003DA6  D002               	goto	l921
 10798                           
 10799                           ; BSR set to: 1
 10800                           ;eusart1.c: 172: {
 10801                           ;eusart1.c: 173: eusart1TxHead = 0;
 10802  003DA8  0E00               	movlw	0
 10803  003DAA  6E3A               	movwf	_eusart1TxHead,c	;volatile
 10804  003DAC                     l921:
 10805                           
 10806                           ; BSR set to: 1
 10807                           ;eusart1.c: 174: }
 10808                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
 10809                           
 10810                           ; BSR set to: 1
 10811  003DAC  07EC               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 10812  003DAE                     l920:
 10813                           
 10814                           ; BSR set to: 1
 10815                           ;eusart1.c: 176: }
 10816                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
 10817                           
 10818                           ; BSR set to: 1
 10819  003DAE  889D               	bsf	3997,4,c	;volatile
 10820                           
 10821                           ; BSR set to: 1
 10822  003DB0  0012               	return		;funcret
 10823  003DB2                     __end_of_EUSART1_Write:
 10824                           	opt stack 0
 10825                           tosu	equ	0xFFF
 10826                           tosh	equ	0xFFE
 10827                           tosl	equ	0xFFD
 10828                           pclath	equ	0xFFA
 10829                           tblptru	equ	0xFF8
 10830                           tblptrh	equ	0xFF7
 10831                           tblptrl	equ	0xFF6
 10832                           tablat	equ	0xFF5
 10833                           prodh	equ	0xFF4
 10834                           prodl	equ	0xFF3
 10835                           intcon	equ	0xFF2
 10836                           intcon2	equ	0xFF1
 10837                           postinc0	equ	0xFEE
 10838                           plusw0	equ	0xFEB
 10839                           wreg	equ	0xFE8
 10840                           indf1	equ	0xFE7
 10841                           postdec1	equ	0xFE5
 10842                           fsr1h	equ	0xFE2
 10843                           fsr1l	equ	0xFE1
 10844                           indf2	equ	0xFDF
 10845                           postinc2	equ	0xFDE
 10846                           postdec2	equ	0xFDD
 10847                           plusw2	equ	0xFDB
 10848                           fsr2h	equ	0xFDA
 10849                           fsr2l	equ	0xFD9
 10850                           status	equ	0xFD8
 10851                           
 10852 ;; *************** function _InitSystemApplicationManagers *****************
 10853 ;; Defined at:
 10854 ;;		line 33 in file "SystemSettings.c"
 10855 ;; Parameters:    Size  Location     Type
 10856 ;;		None
 10857 ;; Auto vars:     Size  Location     Type
 10858 ;;		None
 10859 ;; Return value:  Size  Location     Type
 10860 ;;                  1    wreg      void 
 10861 ;; Registers used:
 10862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10863 ;; Tracked objects:
 10864 ;;		On entry : 0/0
 10865 ;;		On exit  : 0/0
 10866 ;;		Unchanged: 0/0
 10867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10868 ;;      Params:         0       0       0       0       0       0       0
 10869 ;;      Locals:         0       0       0       0       0       0       0
 10870 ;;      Temps:          0       0       0       0       0       0       0
 10871 ;;      Totals:         0       0       0       0       0       0       0
 10872 ;;Total ram usage:        0 bytes
 10873 ;; Hardware stack levels used:    1
 10874 ;; Hardware stack levels required when called:   12
 10875 ;; This function calls:
 10876 ;;		_ClearMcuRunTime
 10877 ;;		_DacInit
 10878 ;;		_InitAdcApplicationMgr
 10879 ;;		_PLLInitialize
 10880 ;;		_TMR0_StartTimer
 10881 ;; This function is called by:
 10882 ;;		_main
 10883 ;; This function uses a non-reentrant model
 10884 ;;
 10885                           
 10886                           	psect	text57
 10887  0043C8                     __ptext57:
 10888                           	opt stack 0
 10889  0043C8                     _InitSystemApplicationManagers:
 10890                           	opt stack 18
 10891                           
 10892                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
 10893                           
 10894                           ; BSR set to: 1
 10895                           ;incstack = 0
 10896  0043C8  EC6B  F022         	call	_InitAdcApplicationMgr	;wreg free
 10897                           
 10898                           ;SystemSettings.c: 39: TMR0_StartTimer();
 10899  0043CC  EC70  F022         	call	_TMR0_StartTimer	;wreg free
 10900                           
 10901                           ;SystemSettings.c: 42: PLLInitialize();
 10902  0043D0  ECE9  F020         	call	_PLLInitialize	;wreg free
 10903                           
 10904                           ;SystemSettings.c: 45: ClearMcuRunTime();
 10905  0043D4  EC03  F022         	call	_ClearMcuRunTime	;wreg free
 10906                           
 10907                           ;SystemSettings.c: 48: DacInit();
 10908  0043D8  ECA7  F014         	call	_DacInit	;wreg free
 10909  0043DC  0012               	return		;funcret
 10910  0043DE                     __end_of_InitSystemApplicationManagers:
 10911                           	opt stack 0
 10912                           tosu	equ	0xFFF
 10913                           tosh	equ	0xFFE
 10914                           tosl	equ	0xFFD
 10915                           pclath	equ	0xFFA
 10916                           tblptru	equ	0xFF8
 10917                           tblptrh	equ	0xFF7
 10918                           tblptrl	equ	0xFF6
 10919                           tablat	equ	0xFF5
 10920                           prodh	equ	0xFF4
 10921                           prodl	equ	0xFF3
 10922                           intcon	equ	0xFF2
 10923                           intcon2	equ	0xFF1
 10924                           postinc0	equ	0xFEE
 10925                           plusw0	equ	0xFEB
 10926                           wreg	equ	0xFE8
 10927                           indf1	equ	0xFE7
 10928                           postdec1	equ	0xFE5
 10929                           fsr1h	equ	0xFE2
 10930                           fsr1l	equ	0xFE1
 10931                           indf2	equ	0xFDF
 10932                           postinc2	equ	0xFDE
 10933                           postdec2	equ	0xFDD
 10934                           plusw2	equ	0xFDB
 10935                           fsr2h	equ	0xFDA
 10936                           fsr2l	equ	0xFD9
 10937                           status	equ	0xFD8
 10938                           
 10939 ;; *************** function _TMR0_StartTimer *****************
 10940 ;; Defined at:
 10941 ;;		line 93 in file "mcc_generated_files/tmr0.c"
 10942 ;; Parameters:    Size  Location     Type
 10943 ;;		None
 10944 ;; Auto vars:     Size  Location     Type
 10945 ;;		None
 10946 ;; Return value:  Size  Location     Type
 10947 ;;                  1    wreg      void 
 10948 ;; Registers used:
 10949 ;;		None
 10950 ;; Tracked objects:
 10951 ;;		On entry : 0/0
 10952 ;;		On exit  : 0/0
 10953 ;;		Unchanged: 0/0
 10954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10955 ;;      Params:         0       0       0       0       0       0       0
 10956 ;;      Locals:         0       0       0       0       0       0       0
 10957 ;;      Temps:          0       0       0       0       0       0       0
 10958 ;;      Totals:         0       0       0       0       0       0       0
 10959 ;;Total ram usage:        0 bytes
 10960 ;; Hardware stack levels used:    1
 10961 ;; Hardware stack levels required when called:    4
 10962 ;; This function calls:
 10963 ;;		Nothing
 10964 ;; This function is called by:
 10965 ;;		_InitSystemApplicationManagers
 10966 ;; This function uses a non-reentrant model
 10967 ;;
 10968                           
 10969                           	psect	text58
 10970  0044E0                     __ptext58:
 10971                           	opt stack 0
 10972  0044E0                     _TMR0_StartTimer:
 10973                           	opt stack 25
 10974                           
 10975                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
 10976                           
 10977                           ;incstack = 0
 10978  0044E0  8ED5               	bsf	4053,7,c	;volatile
 10979  0044E2  0012               	return		;funcret
 10980  0044E4                     __end_of_TMR0_StartTimer:
 10981                           	opt stack 0
 10982                           tosu	equ	0xFFF
 10983                           tosh	equ	0xFFE
 10984                           tosl	equ	0xFFD
 10985                           pclath	equ	0xFFA
 10986                           tblptru	equ	0xFF8
 10987                           tblptrh	equ	0xFF7
 10988                           tblptrl	equ	0xFF6
 10989                           tablat	equ	0xFF5
 10990                           prodh	equ	0xFF4
 10991                           prodl	equ	0xFF3
 10992                           intcon	equ	0xFF2
 10993                           intcon2	equ	0xFF1
 10994                           postinc0	equ	0xFEE
 10995                           plusw0	equ	0xFEB
 10996                           wreg	equ	0xFE8
 10997                           indf1	equ	0xFE7
 10998                           postdec1	equ	0xFE5
 10999                           fsr1h	equ	0xFE2
 11000                           fsr1l	equ	0xFE1
 11001                           indf2	equ	0xFDF
 11002                           postinc2	equ	0xFDE
 11003                           postdec2	equ	0xFDD
 11004                           plusw2	equ	0xFDB
 11005                           fsr2h	equ	0xFDA
 11006                           fsr2l	equ	0xFD9
 11007                           status	equ	0xFD8
 11008                           
 11009 ;; *************** function _PLLInitialize *****************
 11010 ;; Defined at:
 11011 ;;		line 28 in file "SyntApp.c"
 11012 ;; Parameters:    Size  Location     Type
 11013 ;;		None
 11014 ;; Auto vars:     Size  Location     Type
 11015 ;;		None
 11016 ;; Return value:  Size  Location     Type
 11017 ;;                  1    wreg      void 
 11018 ;; Registers used:
 11019 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11020 ;; Tracked objects:
 11021 ;;		On entry : 0/0
 11022 ;;		On exit  : 0/0
 11023 ;;		Unchanged: 0/0
 11024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11025 ;;      Params:         0       0       0       0       0       0       0
 11026 ;;      Locals:         0       0       0       0       0       0       0
 11027 ;;      Temps:          0       0       0       0       0       0       0
 11028 ;;      Totals:         0       0       0       0       0       0       0
 11029 ;;Total ram usage:        0 bytes
 11030 ;; Hardware stack levels used:    1
 11031 ;; Hardware stack levels required when called:   11
 11032 ;; This function calls:
 11033 ;;		_FillArray
 11034 ;;		_InitSynth
 11035 ;; This function is called by:
 11036 ;;		_InitSystemApplicationManagers
 11037 ;; This function uses a non-reentrant model
 11038 ;;
 11039                           
 11040                           	psect	text59
 11041  0041D2                     __ptext59:
 11042                           	opt stack 0
 11043  0041D2                     _PLLInitialize:
 11044                           	opt stack 18
 11045                           
 11046                           ;SyntApp.c: 30: InitSynth(SYNTH_TX);
 11047                           
 11048                           ;incstack = 0
 11049  0041D2  0E00               	movlw	0
 11050  0041D4  EC54  F007         	call	_InitSynth
 11051                           
 11052                           ;SyntApp.c: 31: InitSynth(SYNTH_RX);
 11053  0041D8  0E01               	movlw	1
 11054  0041DA  EC54  F007         	call	_InitSynth
 11055                           
 11056                           ;SyntApp.c: 34: FillArray(synthLdRxArray, sizeof(synthLdRxArray), 0xFF);
 11057  0041DE  0EAA               	movlw	low _synthLdRxArray
 11058  0041E0  6E20               	movwf	FillArray@array,c
 11059  0041E2  0E01               	movlw	high _synthLdRxArray
 11060  0041E4  6E21               	movwf	FillArray@array+1,c
 11061  0041E6  0E00               	movlw	0
 11062  0041E8  6E23               	movwf	FillArray@size+1,c
 11063  0041EA  0E0E               	movlw	14
 11064  0041EC  6E22               	movwf	FillArray@size,c
 11065  0041EE  0EFF               	movlw	255
 11066  0041F0  6E24               	movwf	FillArray@value,c
 11067  0041F2  ECB2  F021         	call	_FillArray	;wreg free
 11068  0041F6  0012               	return		;funcret
 11069  0041F8                     __end_of_PLLInitialize:
 11070                           	opt stack 0
 11071                           tosu	equ	0xFFF
 11072                           tosh	equ	0xFFE
 11073                           tosl	equ	0xFFD
 11074                           pclath	equ	0xFFA
 11075                           tblptru	equ	0xFF8
 11076                           tblptrh	equ	0xFF7
 11077                           tblptrl	equ	0xFF6
 11078                           tablat	equ	0xFF5
 11079                           prodh	equ	0xFF4
 11080                           prodl	equ	0xFF3
 11081                           intcon	equ	0xFF2
 11082                           intcon2	equ	0xFF1
 11083                           postinc0	equ	0xFEE
 11084                           plusw0	equ	0xFEB
 11085                           wreg	equ	0xFE8
 11086                           indf1	equ	0xFE7
 11087                           postdec1	equ	0xFE5
 11088                           fsr1h	equ	0xFE2
 11089                           fsr1l	equ	0xFE1
 11090                           indf2	equ	0xFDF
 11091                           postinc2	equ	0xFDE
 11092                           postdec2	equ	0xFDD
 11093                           plusw2	equ	0xFDB
 11094                           fsr2h	equ	0xFDA
 11095                           fsr2l	equ	0xFD9
 11096                           status	equ	0xFD8
 11097                           
 11098 ;; *************** function _InitSynth *****************
 11099 ;; Defined at:
 11100 ;;		line 37 in file "SyntApp.c"
 11101 ;; Parameters:    Size  Location     Type
 11102 ;;  cType           1    wreg     enum E1
 11103 ;; Auto vars:     Size  Location     Type
 11104 ;;  cType           1  108[BANK0 ] enum E1
 11105 ;;  idx             1  109[BANK0 ] unsigned char 
 11106 ;;  EepromVal       4  104[BANK0 ] unsigned long 
 11107 ;;  regNum          1  110[BANK0 ] unsigned char 
 11108 ;; Return value:  Size  Location     Type
 11109 ;;                  1    wreg      void 
 11110 ;; Registers used:
 11111 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11112 ;; Tracked objects:
 11113 ;;		On entry : 0/0
 11114 ;;		On exit  : 0/0
 11115 ;;		Unchanged: 0/0
 11116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11117 ;;      Params:         0       0       0       0       0       0       0
 11118 ;;      Locals:         0       7       0       0       0       0       0
 11119 ;;      Temps:          0       0       0       0       0       0       0
 11120 ;;      Totals:         0       7       0       0       0       0       0
 11121 ;;Total ram usage:        7 bytes
 11122 ;; Hardware stack levels used:    1
 11123 ;; Hardware stack levels required when called:   10
 11124 ;; This function calls:
 11125 ;;		_ReadIntFromEeprom
 11126 ;;		_SWSPI_send_word
 11127 ;;		_StoreIntInEeprom
 11128 ;;		_SwSpi_Set_CE_Pin
 11129 ;; This function is called by:
 11130 ;;		_PLLInitialize
 11131 ;;		_SetSynthOper
 11132 ;;		_SynthLdDetect
 11133 ;; This function uses a non-reentrant model
 11134 ;;
 11135                           
 11136                           	psect	text60
 11137  000EA8                     __ptext60:
 11138                           	opt stack 0
 11139  000EA8                     _InitSynth:
 11140                           	opt stack 17
 11141                           
 11142                           ;incstack = 0
 11143                           ;InitSynth@cType stored from wreg
 11144  000EA8  0100               	movlb	0	; () banked
 11145  000EAA  6FCC               	movwf	InitSynth@cType& (0+255),b
 11146                           
 11147                           ;SyntApp.c: 39: SwSpi_Set_CE_Pin(cType, 1);
 11148  000EAC  0E01               	movlw	1
 11149  000EAE  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
 11150  000EB0  0100               	movlb	0	; () banked
 11151  000EB2  51CC               	movf	InitSynth@cType& (0+255),w,b
 11152  000EB4  ECD9  F01E         	call	_SwSpi_Set_CE_Pin
 11153                           
 11154                           ;SyntApp.c: 41: uint8_t regNum = 0;
 11155  000EB8  0E00               	movlw	0
 11156  000EBA  0100               	movlb	0	; () banked
 11157  000EBC  6FCE               	movwf	InitSynth@regNum& (0+255),b
 11158                           
 11159                           ; BSR set to: 0
 11160                           ;SyntApp.c: 42: uint32_t EepromVal = 0x0;
 11161  000EBE  0E00               	movlw	0
 11162  000EC0  6FC8               	movwf	InitSynth@EepromVal& (0+255),b
 11163  000EC2  0E00               	movlw	0
 11164  000EC4  6FC9               	movwf	(InitSynth@EepromVal+1)& (0+255),b
 11165  000EC6  0E00               	movlw	0
 11166  000EC8  6FCA               	movwf	(InitSynth@EepromVal+2)& (0+255),b
 11167  000ECA  0E00               	movlw	0
 11168  000ECC  6FCB               	movwf	(InitSynth@EepromVal+3)& (0+255),b
 11169                           
 11170                           ; BSR set to: 0
 11171                           ;SyntApp.c: 45: for(uint8_t idx = 0; idx < 13; idx++)
 11172  000ECE  0E00               	movlw	0
 11173  000ED0  6FCD               	movwf	InitSynth@idx& (0+255),b
 11174  000ED2                     l8115:
 11175                           
 11176                           ; BSR set to: 0
 11177  000ED2  0E0C               	movlw	12
 11178  000ED4  65CD               	cpfsgt	InitSynth@idx& (0+255),b
 11179  000ED6  D001               	goto	l521
 11180  000ED8  0012               	return	
 11181  000EDA                     l521:
 11182                           
 11183                           ; BSR set to: 0
 11184                           ;SyntApp.c: 46: {
 11185                           ;SyntApp.c: 47: regNum = 13 - idx - 1;
 11186                           
 11187                           ; BSR set to: 0
 11188  000EDA  29CD               	incf	InitSynth@idx& (0+255),w,b
 11189  000EDC  0800               	sublw	0
 11190  000EDE  0F0D               	addlw	13
 11191  000EE0  6FCE               	movwf	InitSynth@regNum& (0+255),b
 11192                           
 11193                           ; BSR set to: 0
 11194                           ;SyntApp.c: 48: if(regNum == 0x0 || regNum == 0x1 || regNum == 0x2 || regNum == 0x4 || r
      +                          egNum == 0x6 || regNum == 0xA)
 11195  000EE2  51CE               	movf	InitSynth@regNum& (0+255),w,b
 11196  000EE4  B4D8               	btfsc	status,2,c
 11197  000EE6  D013               	goto	u8460
 11198                           
 11199                           ; BSR set to: 0
 11200  000EE8  05CE               	decf	InitSynth@regNum& (0+255),w,b
 11201  000EEA  B4D8               	btfsc	status,2,c
 11202  000EEC  D010               	goto	u8460
 11203                           
 11204                           ; BSR set to: 0
 11205  000EEE  0E02               	movlw	2
 11206  000EF0  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 11207  000EF2  B4D8               	btfsc	status,2,c
 11208  000EF4  D00C               	goto	u8460
 11209                           
 11210                           ; BSR set to: 0
 11211  000EF6  0E04               	movlw	4
 11212  000EF8  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 11213  000EFA  B4D8               	btfsc	status,2,c
 11214  000EFC  D008               	goto	u8460
 11215                           
 11216                           ; BSR set to: 0
 11217  000EFE  0E06               	movlw	6
 11218  000F00  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 11219  000F02  B4D8               	btfsc	status,2,c
 11220  000F04  D004               	goto	u8460
 11221                           
 11222                           ; BSR set to: 0
 11223  000F06  0E0A               	movlw	10
 11224  000F08  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 11225  000F0A  A4D8               	btfss	status,2,c
 11226  000F0C  D0EB               	goto	l523
 11227  000F0E                     u8460:
 11228                           
 11229                           ; BSR set to: 0
 11230                           ;SyntApp.c: 49: {
 11231                           ;SyntApp.c: 50: if(cType == SYNTH_TX)
 11232                           
 11233                           ; BSR set to: 0
 11234  000F0E  51CC               	movf	InitSynth@cType& (0+255),w,b
 11235  000F10  A4D8               	btfss	status,2,c
 11236  000F12  D071               	goto	l526
 11237                           
 11238                           ; BSR set to: 0
 11239                           ;SyntApp.c: 51: {
 11240                           ;SyntApp.c: 52: EepromVal = ReadIntFromEeprom((0) | SYNTH_ADDRES[regNum], 4);
 11241  000F14  0E00               	movlw	0
 11242  000F16  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 11243  000F18  0E04               	movlw	4
 11244  000F1A  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 11245  000F1C  51CE               	movf	InitSynth@regNum& (0+255),w,b
 11246  000F1E  0D01               	mullw	1
 11247  000F20  0E35               	movlw	low _SYNTH_ADDRES
 11248  000F22  24F3               	addwf	prodl,w,c
 11249  000F24  6EF6               	movwf	tblptrl,c
 11250  000F26  0E06               	movlw	high _SYNTH_ADDRES
 11251  000F28  20F4               	addwfc	prodh,w,c
 11252  000F2A  6EF7               	movwf	tblptrh,c
 11253  000F2C                     	if	0	;There are less than 3 active tblptr bytes
 11254  000F2C                     	endif
 11255  000F2C  0008               	tblrd		*
 11256  000F2E  50F5               	movf	tablat,w,c
 11257  000F30  EC43  F010         	call	_ReadIntFromEeprom
 11258  000F34  C0B1  F0C8         	movff	?_ReadIntFromEeprom,InitSynth@EepromVal
 11259  000F38  C0B2  F0C9         	movff	?_ReadIntFromEeprom+1,InitSynth@EepromVal+1
 11260  000F3C  C0B3  F0CA         	movff	?_ReadIntFromEeprom+2,InitSynth@EepromVal+2
 11261  000F40  C0B4  F0CB         	movff	?_ReadIntFromEeprom+3,InitSynth@EepromVal+3
 11262                           
 11263                           ;SyntApp.c: 53: if(EepromVal == 0xFFFFFFFF)
 11264  000F44  0100               	movlb	0	; () banked
 11265  000F46  29C8               	incf	InitSynth@EepromVal& (0+255),w,b
 11266  000F48  E147               	bnz	l8143
 11267  000F4A  29C9               	incf	(InitSynth@EepromVal+1)& (0+255),w,b
 11268  000F4C  E145               	bnz	l8143
 11269  000F4E  29CA               	incf	(InitSynth@EepromVal+2)& (0+255),w,b
 11270  000F50  E143               	bnz	l8143
 11271  000F52  29CB               	incf	(InitSynth@EepromVal+3)& (0+255),w,b
 11272  000F54  A4D8               	btfss	status,2,c
 11273  000F56  D040               	goto	l527
 11274                           
 11275                           ; BSR set to: 0
 11276                           ;SyntApp.c: 54: {
 11277                           ;SyntApp.c: 55: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 11278  000F58  51CD               	movf	InitSynth@idx& (0+255),w,b
 11279  000F5A  0D04               	mullw	4
 11280  000F5C  0E01               	movlw	low _SYNTH_REGS
 11281  000F5E  24F3               	addwf	prodl,w,c
 11282  000F60  6EF6               	movwf	tblptrl,c
 11283  000F62  0E06               	movlw	high _SYNTH_REGS
 11284  000F64  20F4               	addwfc	prodh,w,c
 11285  000F66  6EF7               	movwf	tblptrh,c
 11286  000F68                     	if	0	;There are less than 3 active tblptr bytes
 11287  000F68                     	endif
 11288  000F68  0009               	tblrd		*+
 11289  000F6A  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 11290  000F6E  0009               	tblrd		*+
 11291  000F70  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 11292  000F74  0009               	tblrd		*+
 11293  000F76  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 11294  000F7A  000A               	tblrd		*-
 11295  000F7C  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 11296  000F80  0E03               	movlw	3
 11297  000F82  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11298  000F84  51CC               	movf	InitSynth@cType& (0+255),w,b
 11299  000F86  EC21  F018         	call	_SWSPI_send_word
 11300                           
 11301                           ;SyntApp.c: 56: StoreIntInEeprom(SYNTH_REGS[idx], (0) | SYNTH_ADDRES[regNum], 4);
 11302  000F8A  0100               	movlb	0	; () banked
 11303  000F8C  51CD               	movf	InitSynth@idx& (0+255),w,b
 11304  000F8E  0D04               	mullw	4
 11305  000F90  0E01               	movlw	low _SYNTH_REGS
 11306  000F92  24F3               	addwf	prodl,w,c
 11307  000F94  6EF6               	movwf	tblptrl,c
 11308  000F96  0E06               	movlw	high _SYNTH_REGS
 11309  000F98  20F4               	addwfc	prodh,w,c
 11310  000F9A  6EF7               	movwf	tblptrh,c
 11311  000F9C                     	if	0	;There are less than 3 active tblptr bytes
 11312  000F9C                     	endif
 11313  000F9C  0009               	tblrd		*+
 11314  000F9E  CFF5 F021          	movff	tablat,StoreIntInEeprom@data
 11315  000FA2  0009               	tblrd		*+
 11316  000FA4  CFF5 F022          	movff	tablat,StoreIntInEeprom@data+1
 11317  000FA8  0009               	tblrd		*+
 11318  000FAA  CFF5 F023          	movff	tablat,StoreIntInEeprom@data+2
 11319  000FAE  000A               	tblrd		*-
 11320  000FB0  CFF5 F024          	movff	tablat,StoreIntInEeprom@data+3
 11321  000FB4  51CE               	movf	InitSynth@regNum& (0+255),w,b
 11322  000FB6  0D01               	mullw	1
 11323  000FB8  0E35               	movlw	low _SYNTH_ADDRES
 11324  000FBA  24F3               	addwf	prodl,w,c
 11325  000FBC  6EF6               	movwf	tblptrl,c
 11326  000FBE  0E06               	movlw	high _SYNTH_ADDRES
 11327  000FC0  20F4               	addwfc	prodh,w,c
 11328  000FC2  6EF7               	movwf	tblptrh,c
 11329  000FC4                     	if	0	;There are less than 3 active tblptr bytes
 11330  000FC4                     	endif
 11331  000FC4  0008               	tblrd		*
 11332  000FC6  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
 11333  000FCA  0E00               	movlw	0
 11334  000FCC  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 11335  000FCE  0E04               	movlw	4
 11336  000FD0  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 11337  000FD2  EC4D  F01F         	call	_StoreIntInEeprom	;wreg free
 11338                           
 11339                           ;SyntApp.c: 57: }
 11340  000FD6  D0A0               	goto	l533
 11341  000FD8                     l527:
 11342  000FD8                     l8143:
 11343                           
 11344                           ;SyntApp.c: 58: else
 11345                           ;SyntApp.c: 59: {
 11346                           ;SyntApp.c: 60: SWSPI_send_word(cType, EepromVal,3);
 11347  000FD8  C0C8  F029         	movff	InitSynth@EepromVal,SWSPI_send_word@data
 11348  000FDC  C0C9  F02A         	movff	InitSynth@EepromVal+1,SWSPI_send_word@data+1
 11349  000FE0  C0CA  F02B         	movff	InitSynth@EepromVal+2,SWSPI_send_word@data+2
 11350  000FE4  C0CB  F02C         	movff	InitSynth@EepromVal+3,SWSPI_send_word@data+3
 11351  000FE8  0E03               	movlw	3
 11352  000FEA  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11353  000FEC  0100               	movlb	0	; () banked
 11354  000FEE  51CC               	movf	InitSynth@cType& (0+255),w,b
 11355  000FF0  EC21  F018         	call	_SWSPI_send_word
 11356                           
 11357                           ;SyntApp.c: 61: }
 11358                           ;SyntApp.c: 62: }
 11359  000FF4  D091               	goto	l533
 11360  000FF6                     l526:
 11361                           
 11362                           ;SyntApp.c: 63: else if (cType == SYNTH_RX)
 11363  000FF6  0100               	movlb	0	; () banked
 11364  000FF8  05CC               	decf	InitSynth@cType& (0+255),w,b
 11365  000FFA  A4D8               	btfss	status,2,c
 11366  000FFC  D08D               	goto	l533
 11367                           
 11368                           ; BSR set to: 0
 11369                           ;SyntApp.c: 64: {
 11370                           ;SyntApp.c: 65: EepromVal = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[regNum], 4);
 11371  000FFE  0E00               	movlw	0
 11372  001000  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 11373  001002  0E04               	movlw	4
 11374  001004  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 11375  001006  51CE               	movf	InitSynth@regNum& (0+255),w,b
 11376  001008  0D01               	mullw	1
 11377  00100A  0E35               	movlw	low _SYNTH_ADDRES
 11378  00100C  24F3               	addwf	prodl,w,c
 11379  00100E  6EF6               	movwf	tblptrl,c
 11380  001010  0E06               	movlw	high _SYNTH_ADDRES
 11381  001012  20F4               	addwfc	prodh,w,c
 11382  001014  6EF7               	movwf	tblptrh,c
 11383  001016                     	if	0	;There are less than 3 active tblptr bytes
 11384  001016                     	endif
 11385  001016  0008               	tblrd		*
 11386  001018  50F5               	movf	tablat,w,c
 11387  00101A  0920               	iorlw	32
 11388  00101C  EC43  F010         	call	_ReadIntFromEeprom
 11389  001020  C0B1  F0C8         	movff	?_ReadIntFromEeprom,InitSynth@EepromVal
 11390  001024  C0B2  F0C9         	movff	?_ReadIntFromEeprom+1,InitSynth@EepromVal+1
 11391  001028  C0B3  F0CA         	movff	?_ReadIntFromEeprom+2,InitSynth@EepromVal+2
 11392  00102C  C0B4  F0CB         	movff	?_ReadIntFromEeprom+3,InitSynth@EepromVal+3
 11393                           
 11394                           ;SyntApp.c: 66: if(EepromVal == 0xFFFFFFFF)
 11395  001030  0100               	movlb	0	; () banked
 11396  001032  29C8               	incf	InitSynth@EepromVal& (0+255),w,b
 11397  001034  E148               	bnz	l8155
 11398  001036  29C9               	incf	(InitSynth@EepromVal+1)& (0+255),w,b
 11399  001038  E146               	bnz	l8155
 11400  00103A  29CA               	incf	(InitSynth@EepromVal+2)& (0+255),w,b
 11401  00103C  E144               	bnz	l8155
 11402  00103E  29CB               	incf	(InitSynth@EepromVal+3)& (0+255),w,b
 11403  001040  A4D8               	btfss	status,2,c
 11404  001042  D041               	goto	l531
 11405                           
 11406                           ; BSR set to: 0
 11407                           ;SyntApp.c: 67: {
 11408                           ;SyntApp.c: 68: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 11409  001044  51CD               	movf	InitSynth@idx& (0+255),w,b
 11410  001046  0D04               	mullw	4
 11411  001048  0E01               	movlw	low _SYNTH_REGS
 11412  00104A  24F3               	addwf	prodl,w,c
 11413  00104C  6EF6               	movwf	tblptrl,c
 11414  00104E  0E06               	movlw	high _SYNTH_REGS
 11415  001050  20F4               	addwfc	prodh,w,c
 11416  001052  6EF7               	movwf	tblptrh,c
 11417  001054                     	if	0	;There are less than 3 active tblptr bytes
 11418  001054                     	endif
 11419  001054  0009               	tblrd		*+
 11420  001056  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 11421  00105A  0009               	tblrd		*+
 11422  00105C  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 11423  001060  0009               	tblrd		*+
 11424  001062  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 11425  001066  000A               	tblrd		*-
 11426  001068  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 11427  00106C  0E03               	movlw	3
 11428  00106E  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11429  001070  51CC               	movf	InitSynth@cType& (0+255),w,b
 11430  001072  EC21  F018         	call	_SWSPI_send_word
 11431                           
 11432                           ;SyntApp.c: 69: StoreIntInEeprom(SYNTH_REGS[idx], (0x20) | SYNTH_ADDRES[regNum], 4);
 11433  001076  0100               	movlb	0	; () banked
 11434  001078  51CD               	movf	InitSynth@idx& (0+255),w,b
 11435  00107A  0D04               	mullw	4
 11436  00107C  0E01               	movlw	low _SYNTH_REGS
 11437  00107E  24F3               	addwf	prodl,w,c
 11438  001080  6EF6               	movwf	tblptrl,c
 11439  001082  0E06               	movlw	high _SYNTH_REGS
 11440  001084  20F4               	addwfc	prodh,w,c
 11441  001086  6EF7               	movwf	tblptrh,c
 11442  001088                     	if	0	;There are less than 3 active tblptr bytes
 11443  001088                     	endif
 11444  001088  0009               	tblrd		*+
 11445  00108A  CFF5 F021          	movff	tablat,StoreIntInEeprom@data
 11446  00108E  0009               	tblrd		*+
 11447  001090  CFF5 F022          	movff	tablat,StoreIntInEeprom@data+1
 11448  001094  0009               	tblrd		*+
 11449  001096  CFF5 F023          	movff	tablat,StoreIntInEeprom@data+2
 11450  00109A  000A               	tblrd		*-
 11451  00109C  CFF5 F024          	movff	tablat,StoreIntInEeprom@data+3
 11452  0010A0  51CE               	movf	InitSynth@regNum& (0+255),w,b
 11453  0010A2  0D01               	mullw	1
 11454  0010A4  0E35               	movlw	low _SYNTH_ADDRES
 11455  0010A6  24F3               	addwf	prodl,w,c
 11456  0010A8  6EF6               	movwf	tblptrl,c
 11457  0010AA  0E06               	movlw	high _SYNTH_ADDRES
 11458  0010AC  20F4               	addwfc	prodh,w,c
 11459  0010AE  6EF7               	movwf	tblptrh,c
 11460  0010B0                     	if	0	;There are less than 3 active tblptr bytes
 11461  0010B0                     	endif
 11462  0010B0  0008               	tblrd		*
 11463  0010B2  50F5               	movf	tablat,w,c
 11464  0010B4  0920               	iorlw	32
 11465  0010B6  6E25               	movwf	StoreIntInEeprom@address,c
 11466  0010B8  0E00               	movlw	0
 11467  0010BA  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 11468  0010BC  0E04               	movlw	4
 11469  0010BE  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 11470  0010C0  EC4D  F01F         	call	_StoreIntInEeprom	;wreg free
 11471                           
 11472                           ;SyntApp.c: 70: }
 11473  0010C4  D029               	goto	l533
 11474  0010C6                     l531:
 11475  0010C6                     l8155:
 11476                           
 11477                           ;SyntApp.c: 71: else
 11478                           ;SyntApp.c: 72: {
 11479                           ;SyntApp.c: 73: SWSPI_send_word(cType, EepromVal,3);
 11480  0010C6  C0C8  F029         	movff	InitSynth@EepromVal,SWSPI_send_word@data
 11481  0010CA  C0C9  F02A         	movff	InitSynth@EepromVal+1,SWSPI_send_word@data+1
 11482  0010CE  C0CA  F02B         	movff	InitSynth@EepromVal+2,SWSPI_send_word@data+2
 11483  0010D2  C0CB  F02C         	movff	InitSynth@EepromVal+3,SWSPI_send_word@data+3
 11484  0010D6  0E03               	movlw	3
 11485  0010D8  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11486  0010DA  0100               	movlb	0	; () banked
 11487  0010DC  51CC               	movf	InitSynth@cType& (0+255),w,b
 11488  0010DE  EC21  F018         	call	_SWSPI_send_word
 11489                           
 11490                           ;SyntApp.c: 74: }
 11491                           ;SyntApp.c: 75: }
 11492                           ;SyntApp.c: 78: }
 11493  0010E2  D01A               	goto	l533
 11494  0010E4                     l523:
 11495                           
 11496                           ;SyntApp.c: 79: else
 11497                           ;SyntApp.c: 80: {
 11498                           ;SyntApp.c: 81: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 11499  0010E4  0100               	movlb	0	; () banked
 11500  0010E6  51CD               	movf	InitSynth@idx& (0+255),w,b
 11501  0010E8  0D04               	mullw	4
 11502  0010EA  0E01               	movlw	low _SYNTH_REGS
 11503  0010EC  24F3               	addwf	prodl,w,c
 11504  0010EE  6EF6               	movwf	tblptrl,c
 11505  0010F0  0E06               	movlw	high _SYNTH_REGS
 11506  0010F2  20F4               	addwfc	prodh,w,c
 11507  0010F4  6EF7               	movwf	tblptrh,c
 11508  0010F6                     	if	0	;There are less than 3 active tblptr bytes
 11509  0010F6                     	endif
 11510  0010F6  0009               	tblrd		*+
 11511  0010F8  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 11512  0010FC  0009               	tblrd		*+
 11513  0010FE  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 11514  001102  0009               	tblrd		*+
 11515  001104  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 11516  001108  000A               	tblrd		*-
 11517  00110A  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 11518  00110E  0E03               	movlw	3
 11519  001110  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11520  001112  51CC               	movf	InitSynth@cType& (0+255),w,b
 11521  001114  EC21  F018         	call	_SWSPI_send_word
 11522  001118                     l533:
 11523  001118  0100               	movlb	0	; () banked
 11524  00111A  2BCD               	incf	InitSynth@idx& (0+255),f,b
 11525  00111C  D6DA               	goto	l8115
 11526  00111E                     __end_of_InitSynth:
 11527                           	opt stack 0
 11528                           tosu	equ	0xFFF
 11529                           tosh	equ	0xFFE
 11530                           tosl	equ	0xFFD
 11531                           pclath	equ	0xFFA
 11532                           tblptru	equ	0xFF8
 11533                           tblptrh	equ	0xFF7
 11534                           tblptrl	equ	0xFF6
 11535                           tablat	equ	0xFF5
 11536                           prodh	equ	0xFF4
 11537                           prodl	equ	0xFF3
 11538                           intcon	equ	0xFF2
 11539                           intcon2	equ	0xFF1
 11540                           postinc0	equ	0xFEE
 11541                           plusw0	equ	0xFEB
 11542                           wreg	equ	0xFE8
 11543                           indf1	equ	0xFE7
 11544                           postdec1	equ	0xFE5
 11545                           fsr1h	equ	0xFE2
 11546                           fsr1l	equ	0xFE1
 11547                           indf2	equ	0xFDF
 11548                           postinc2	equ	0xFDE
 11549                           postdec2	equ	0xFDD
 11550                           plusw2	equ	0xFDB
 11551                           fsr2h	equ	0xFDA
 11552                           fsr2l	equ	0xFD9
 11553                           status	equ	0xFD8
 11554                           
 11555 ;; *************** function _SwSpi_Set_CE_Pin *****************
 11556 ;; Defined at:
 11557 ;;		line 201 in file "SwSpiApp.c"
 11558 ;; Parameters:    Size  Location     Type
 11559 ;;  phrType         1    wreg     enum E1
 11560 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11561 ;; Auto vars:     Size  Location     Type
 11562 ;;  phrType         1   24[COMRAM] enum E1
 11563 ;; Return value:  Size  Location     Type
 11564 ;;                  1    wreg      void 
 11565 ;; Registers used:
 11566 ;;		wreg, status,2, status,0
 11567 ;; Tracked objects:
 11568 ;;		On entry : 0/0
 11569 ;;		On exit  : 0/0
 11570 ;;		Unchanged: 0/0
 11571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11572 ;;      Params:         1       0       0       0       0       0       0
 11573 ;;      Locals:         1       0       0       0       0       0       0
 11574 ;;      Temps:          0       0       0       0       0       0       0
 11575 ;;      Totals:         2       0       0       0       0       0       0
 11576 ;;Total ram usage:        2 bytes
 11577 ;; Hardware stack levels used:    1
 11578 ;; Hardware stack levels required when called:    4
 11579 ;; This function calls:
 11580 ;;		Nothing
 11581 ;; This function is called by:
 11582 ;;		_InitSynth
 11583 ;;		_SetSynthOper
 11584 ;; This function uses a non-reentrant model
 11585 ;;
 11586                           
 11587                           	psect	text61
 11588  003DB2                     __ptext61:
 11589                           	opt stack 0
 11590  003DB2                     _SwSpi_Set_CE_Pin:
 11591                           	opt stack 23
 11592                           
 11593                           ; BSR set to: 0
 11594                           ;incstack = 0
 11595                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
 11596  003DB2  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
 11597                           
 11598                           ;SwSpiApp.c: 203: switch(phrType)
 11599  003DB4  D014               	goto	l734
 11600  003DB6                     
 11601                           ;SwSpiApp.c: 206: if(cPinMode == 1)
 11602  003DB6  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11603  003DB8  A4D8               	btfss	status,2,c
 11604  003DBA  D002               	goto	l736
 11605                           
 11606                           ;SwSpiApp.c: 207: {
 11607                           ;SwSpiApp.c: 208: do { LATCbits.LATC1 = 1; } while(0);
 11608  003DBC  828B               	bsf	3979,1,c	;volatile
 11609                           
 11610                           ;SwSpiApp.c: 209: }
 11611  003DBE  0012               	return	
 11612  003DC0                     l736:
 11613                           
 11614                           ;SwSpiApp.c: 210: else if(cPinMode == 0)
 11615  003DC0  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11616  003DC2  A4D8               	btfss	status,2,c
 11617  003DC4  0012               	return	
 11618                           
 11619                           ;SwSpiApp.c: 211: {
 11620                           ;SwSpiApp.c: 212: do { LATCbits.LATC1 = 0; } while(0);
 11621  003DC6  928B               	bcf	3979,1,c	;volatile
 11622                           
 11623                           ;SwSpiApp.c: 213: }
 11624                           ;SwSpiApp.c: 214: break;
 11625  003DC8  0012               	return	
 11626  003DCA                     
 11627                           ;SwSpiApp.c: 217: if(cPinMode == 1)
 11628  003DCA  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11629  003DCC  A4D8               	btfss	status,2,c
 11630  003DCE  D002               	goto	l745
 11631                           
 11632                           ;SwSpiApp.c: 218: {
 11633                           ;SwSpiApp.c: 219: do { LATDbits.LATD2 = 1; } while(0);
 11634  003DD0  848C               	bsf	3980,2,c	;volatile
 11635                           
 11636                           ;SwSpiApp.c: 220: }
 11637  003DD2  0012               	return	
 11638  003DD4                     l745:
 11639                           
 11640                           ;SwSpiApp.c: 221: else if(cPinMode == 0)
 11641  003DD4  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11642  003DD6  A4D8               	btfss	status,2,c
 11643  003DD8  0012               	return	
 11644                           
 11645                           ;SwSpiApp.c: 222: {
 11646                           ;SwSpiApp.c: 223: do { LATDbits.LATD2 = 0; } while(0);
 11647  003DDA  948C               	bcf	3980,2,c	;volatile
 11648                           
 11649                           ;SwSpiApp.c: 226: }
 11650                           
 11651                           ;SwSpiApp.c: 224: }
 11652                           ;SwSpiApp.c: 225: break;
 11653  003DDC  0012               	return	
 11654  003DDE                     l734:
 11655  003DDE  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
 11656                           
 11657                           ; Switch size 1, requested type "space"
 11658                           ; Number of cases is 2, Range of values is 0 to 1
 11659                           ; switch strategies available:
 11660                           ; Name         Instructions Cycles
 11661                           ; simple_byte            7     4 (average)
 11662                           ;	Chosen strategy is simple_byte
 11663  003DE0  0A00               	xorlw	0	; case 0
 11664  003DE2  B4D8               	btfsc	status,2,c
 11665  003DE4  D7E8               	goto	l735
 11666  003DE6  0A01               	xorlw	1	; case 1
 11667  003DE8  A4D8               	btfss	status,2,c
 11668  003DEA  0012               	return	
 11669  003DEC  D7EE               	goto	l744
 11670  003DEE                     __end_of_SwSpi_Set_CE_Pin:
 11671                           	opt stack 0
 11672                           tosu	equ	0xFFF
 11673                           tosh	equ	0xFFE
 11674                           tosl	equ	0xFFD
 11675                           pclath	equ	0xFFA
 11676                           tblptru	equ	0xFF8
 11677                           tblptrh	equ	0xFF7
 11678                           tblptrl	equ	0xFF6
 11679                           tablat	equ	0xFF5
 11680                           prodh	equ	0xFF4
 11681                           prodl	equ	0xFF3
 11682                           intcon	equ	0xFF2
 11683                           intcon2	equ	0xFF1
 11684                           postinc0	equ	0xFEE
 11685                           plusw0	equ	0xFEB
 11686                           wreg	equ	0xFE8
 11687                           indf1	equ	0xFE7
 11688                           postdec1	equ	0xFE5
 11689                           fsr1h	equ	0xFE2
 11690                           fsr1l	equ	0xFE1
 11691                           indf2	equ	0xFDF
 11692                           postinc2	equ	0xFDE
 11693                           postdec2	equ	0xFDD
 11694                           plusw2	equ	0xFDB
 11695                           fsr2h	equ	0xFDA
 11696                           fsr2l	equ	0xFD9
 11697                           status	equ	0xFD8
 11698                           
 11699 ;; *************** function _InitAdcApplicationMgr *****************
 11700 ;; Defined at:
 11701 ;;		line 20 in file "AdcApp.c"
 11702 ;; Parameters:    Size  Location     Type
 11703 ;;		None
 11704 ;; Auto vars:     Size  Location     Type
 11705 ;;		None
 11706 ;; Return value:  Size  Location     Type
 11707 ;;                  1    wreg      void 
 11708 ;; Registers used:
 11709 ;;		wreg, status,2
 11710 ;; Tracked objects:
 11711 ;;		On entry : 0/0
 11712 ;;		On exit  : 0/0
 11713 ;;		Unchanged: 0/0
 11714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11715 ;;      Params:         0       0       0       0       0       0       0
 11716 ;;      Locals:         0       0       0       0       0       0       0
 11717 ;;      Temps:          0       0       0       0       0       0       0
 11718 ;;      Totals:         0       0       0       0       0       0       0
 11719 ;;Total ram usage:        0 bytes
 11720 ;; Hardware stack levels used:    1
 11721 ;; Hardware stack levels required when called:    4
 11722 ;; This function calls:
 11723 ;;		Nothing
 11724 ;; This function is called by:
 11725 ;;		_InitSystemApplicationManagers
 11726 ;; This function uses a non-reentrant model
 11727 ;;
 11728                           
 11729                           	psect	text62
 11730  0044D6                     __ptext62:
 11731                           	opt stack 0
 11732  0044D6                     _InitAdcApplicationMgr:
 11733                           	opt stack 25
 11734                           
 11735                           ;AdcApp.c: 22: adcSampleMode = CIRCULAR;
 11736                           
 11737                           ;incstack = 0
 11738  0044D6  0E00               	movlw	0
 11739  0044D8  6E3B               	movwf	_adcSampleMode,c
 11740  0044DA  0012               	return		;funcret
 11741  0044DC                     __end_of_InitAdcApplicationMgr:
 11742                           	opt stack 0
 11743                           tosu	equ	0xFFF
 11744                           tosh	equ	0xFFE
 11745                           tosl	equ	0xFFD
 11746                           pclath	equ	0xFFA
 11747                           tblptru	equ	0xFF8
 11748                           tblptrh	equ	0xFF7
 11749                           tblptrl	equ	0xFF6
 11750                           tablat	equ	0xFF5
 11751                           prodh	equ	0xFF4
 11752                           prodl	equ	0xFF3
 11753                           intcon	equ	0xFF2
 11754                           intcon2	equ	0xFF1
 11755                           postinc0	equ	0xFEE
 11756                           plusw0	equ	0xFEB
 11757                           wreg	equ	0xFE8
 11758                           indf1	equ	0xFE7
 11759                           postdec1	equ	0xFE5
 11760                           fsr1h	equ	0xFE2
 11761                           fsr1l	equ	0xFE1
 11762                           indf2	equ	0xFDF
 11763                           postinc2	equ	0xFDE
 11764                           postdec2	equ	0xFDD
 11765                           plusw2	equ	0xFDB
 11766                           fsr2h	equ	0xFDA
 11767                           fsr2l	equ	0xFD9
 11768                           status	equ	0xFD8
 11769                           
 11770 ;; *************** function _DacInit *****************
 11771 ;; Defined at:
 11772 ;;		line 11 in file "DacApp.c"
 11773 ;; Parameters:    Size  Location     Type
 11774 ;;		None
 11775 ;; Auto vars:     Size  Location     Type
 11776 ;;  dacInput        2  106[BANK0 ] unsigned int 
 11777 ;;  idx             1  108[BANK0 ] char 
 11778 ;; Return value:  Size  Location     Type
 11779 ;;                  1    wreg      void 
 11780 ;; Registers used:
 11781 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11782 ;; Tracked objects:
 11783 ;;		On entry : 0/0
 11784 ;;		On exit  : 0/0
 11785 ;;		Unchanged: 0/0
 11786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11787 ;;      Params:         0       0       0       0       0       0       0
 11788 ;;      Locals:         0       3       0       0       0       0       0
 11789 ;;      Temps:          0       2       0       0       0       0       0
 11790 ;;      Totals:         0       5       0       0       0       0       0
 11791 ;;Total ram usage:        5 bytes
 11792 ;; Hardware stack levels used:    1
 11793 ;; Hardware stack levels required when called:   10
 11794 ;; This function calls:
 11795 ;;		_ReadIntFromEeprom
 11796 ;;		_SWSPI_send_word
 11797 ;;		_StoreIntInEeprom
 11798 ;; This function is called by:
 11799 ;;		_InitSystemApplicationManagers
 11800 ;; This function uses a non-reentrant model
 11801 ;;
 11802                           
 11803                           	psect	text63
 11804  00294E                     __ptext63:
 11805                           	opt stack 0
 11806  00294E                     _DacInit:
 11807                           	opt stack 19
 11808                           
 11809                           ;DacApp.c: 13: for(int8_t idx = 0; idx < (4); idx++)
 11810                           
 11811                           ;incstack = 0
 11812  00294E  0E00               	movlw	0
 11813  002950  0100               	movlb	0	; () banked
 11814  002952  6FCC               	movwf	DacInit@idx& (0+255),b
 11815  002954                     l8669:
 11816                           
 11817                           ; BSR set to: 0
 11818  002954  51CC               	movf	DacInit@idx& (0+255),w,b
 11819  002956  0A80               	xorlw	128
 11820  002958  0F7C               	addlw	-132
 11821  00295A  B0D8               	btfsc	status,0,c
 11822  00295C  0012               	return	
 11823                           
 11824                           ; BSR set to: 0
 11825                           ;DacApp.c: 14: {
 11826                           ;DacApp.c: 15: uint16_t dacInput = ReadIntFromEeprom((0x40) | DAC_ADDRES[idx], 2);
 11827                           
 11828                           ; BSR set to: 0
 11829                           
 11830                           ; BSR set to: 0
 11831  00295E  0E00               	movlw	0
 11832  002960  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 11833  002962  0E02               	movlw	2
 11834  002964  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 11835  002966  51CC               	movf	DacInit@idx& (0+255),w,b
 11836  002968  0D01               	mullw	1
 11837  00296A  0E53               	movlw	low _DAC_ADDRES
 11838  00296C  24F3               	addwf	prodl,w,c
 11839  00296E  6EF6               	movwf	tblptrl,c
 11840  002970  0E06               	movlw	high _DAC_ADDRES
 11841  002972  20F4               	addwfc	prodh,w,c
 11842  002974  6EF7               	movwf	tblptrh,c
 11843  002976                     	if	0	;There are less than 3 active tblptr bytes
 11844  002976                     	endif
 11845  002976  0008               	tblrd		*
 11846  002978  50F5               	movf	tablat,w,c
 11847  00297A  0940               	iorlw	64
 11848  00297C  EC43  F010         	call	_ReadIntFromEeprom
 11849  002980  C0B1  F0CA         	movff	?_ReadIntFromEeprom,DacInit@dacInput
 11850  002984  C0B2  F0CB         	movff	?_ReadIntFromEeprom+1,DacInit@dacInput+1
 11851                           
 11852                           ;DacApp.c: 16: if(dacInput == 0xFFFF)
 11853  002988  0100               	movlb	0	; () banked
 11854  00298A  29CA               	incf	DacInit@dacInput& (0+255),w,b
 11855  00298C  E144               	bnz	l8681
 11856  00298E  29CB               	incf	(DacInit@dacInput+1)& (0+255),w,b
 11857  002990  A4D8               	btfss	status,2,c
 11858  002992  D041               	goto	l427
 11859                           
 11860                           ; BSR set to: 0
 11861                           ;DacApp.c: 17: {
 11862                           ;DacApp.c: 18: SWSPI_send_word(EXT_DAC, DAC_DEFAULT_INIT_VALUES[idx], 1);
 11863  002994  51CC               	movf	DacInit@idx& (0+255),w,b
 11864  002996  0D02               	mullw	2
 11865  002998  0E4B               	movlw	low _DAC_DEFAULT_INIT_VALUES
 11866  00299A  24F3               	addwf	prodl,w,c
 11867  00299C  6EF6               	movwf	tblptrl,c
 11868  00299E  0E06               	movlw	high _DAC_DEFAULT_INIT_VALUES
 11869  0029A0  20F4               	addwfc	prodh,w,c
 11870  0029A2  6EF7               	movwf	tblptrh,c
 11871  0029A4                     	if	0	;There are less than 3 active tblptr bytes
 11872  0029A4                     	endif
 11873  0029A4  0009               	tblrd		*+
 11874  0029A6  CFF5 F0C8          	movff	tablat,??_DacInit
 11875  0029AA  0009               	tblrd		*+
 11876  0029AC  CFF5 F0C9          	movff	tablat,??_DacInit+1
 11877  0029B0  C0C8  F029         	movff	??_DacInit,SWSPI_send_word@data
 11878  0029B4  C0C9  F02A         	movff	??_DacInit+1,SWSPI_send_word@data+1
 11879  0029B8  6A2B               	clrf	SWSPI_send_word@data+2,c
 11880  0029BA  6A2C               	clrf	SWSPI_send_word@data+3,c
 11881  0029BC  0E01               	movlw	1
 11882  0029BE  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11883  0029C0  0E02               	movlw	2
 11884  0029C2  EC21  F018         	call	_SWSPI_send_word
 11885                           
 11886                           ;DacApp.c: 19: StoreIntInEeprom(DAC_DEFAULT_INIT_VALUES[idx], (0x40) | DAC_ADDRES[idx], 
      +                          2);
 11887  0029C6  0100               	movlb	0	; () banked
 11888  0029C8  51CC               	movf	DacInit@idx& (0+255),w,b
 11889  0029CA  0D02               	mullw	2
 11890  0029CC  0E4B               	movlw	low _DAC_DEFAULT_INIT_VALUES
 11891  0029CE  24F3               	addwf	prodl,w,c
 11892  0029D0  6EF6               	movwf	tblptrl,c
 11893  0029D2  0E06               	movlw	high _DAC_DEFAULT_INIT_VALUES
 11894  0029D4  20F4               	addwfc	prodh,w,c
 11895  0029D6  6EF7               	movwf	tblptrh,c
 11896  0029D8                     	if	0	;There are less than 3 active tblptr bytes
 11897  0029D8                     	endif
 11898  0029D8  0009               	tblrd		*+
 11899  0029DA  CFF5 F0C8          	movff	tablat,??_DacInit
 11900  0029DE  0009               	tblrd		*+
 11901  0029E0  CFF5 F0C9          	movff	tablat,??_DacInit+1
 11902  0029E4  C0C8  F021         	movff	??_DacInit,StoreIntInEeprom@data
 11903  0029E8  C0C9  F022         	movff	??_DacInit+1,StoreIntInEeprom@data+1
 11904  0029EC  6A23               	clrf	StoreIntInEeprom@data+2,c
 11905  0029EE  6A24               	clrf	StoreIntInEeprom@data+3,c
 11906  0029F0  51CC               	movf	DacInit@idx& (0+255),w,b
 11907  0029F2  0D01               	mullw	1
 11908  0029F4  0E53               	movlw	low _DAC_ADDRES
 11909  0029F6  24F3               	addwf	prodl,w,c
 11910  0029F8  6EF6               	movwf	tblptrl,c
 11911  0029FA  0E06               	movlw	high _DAC_ADDRES
 11912  0029FC  20F4               	addwfc	prodh,w,c
 11913  0029FE  6EF7               	movwf	tblptrh,c
 11914  002A00                     	if	0	;There are less than 3 active tblptr bytes
 11915  002A00                     	endif
 11916  002A00  0008               	tblrd		*
 11917  002A02  50F5               	movf	tablat,w,c
 11918  002A04  0940               	iorlw	64
 11919  002A06  6E25               	movwf	StoreIntInEeprom@address,c
 11920  002A08  0E00               	movlw	0
 11921  002A0A  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 11922  002A0C  0E02               	movlw	2
 11923  002A0E  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 11924  002A10  EC4D  F01F         	call	_StoreIntInEeprom	;wreg free
 11925                           
 11926                           ;DacApp.c: 20: }
 11927  002A14  D00B               	goto	l428
 11928  002A16                     l427:
 11929  002A16                     l8681:
 11930                           
 11931                           ;DacApp.c: 21: else
 11932                           ;DacApp.c: 22: {
 11933                           ;DacApp.c: 23: SWSPI_send_word(EXT_DAC, dacInput, 1);
 11934  002A16  C0CA  F029         	movff	DacInit@dacInput,SWSPI_send_word@data
 11935  002A1A  C0CB  F02A         	movff	DacInit@dacInput+1,SWSPI_send_word@data+1
 11936  002A1E  6A2B               	clrf	SWSPI_send_word@data+2,c
 11937  002A20  6A2C               	clrf	SWSPI_send_word@data+3,c
 11938  002A22  0E01               	movlw	1
 11939  002A24  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11940  002A26  0E02               	movlw	2
 11941  002A28  EC21  F018         	call	_SWSPI_send_word
 11942  002A2C                     l428:
 11943  002A2C  0100               	movlb	0	; () banked
 11944  002A2E  2BCC               	incf	DacInit@idx& (0+255),f,b
 11945  002A30  D791               	goto	l8669
 11946  002A32                     __end_of_DacInit:
 11947                           	opt stack 0
 11948                           tosu	equ	0xFFF
 11949                           tosh	equ	0xFFE
 11950                           tosl	equ	0xFFD
 11951                           pclath	equ	0xFFA
 11952                           tblptru	equ	0xFF8
 11953                           tblptrh	equ	0xFF7
 11954                           tblptrl	equ	0xFF6
 11955                           tablat	equ	0xFF5
 11956                           prodh	equ	0xFF4
 11957                           prodl	equ	0xFF3
 11958                           intcon	equ	0xFF2
 11959                           intcon2	equ	0xFF1
 11960                           postinc0	equ	0xFEE
 11961                           plusw0	equ	0xFEB
 11962                           wreg	equ	0xFE8
 11963                           indf1	equ	0xFE7
 11964                           postdec1	equ	0xFE5
 11965                           fsr1h	equ	0xFE2
 11966                           fsr1l	equ	0xFE1
 11967                           indf2	equ	0xFDF
 11968                           postinc2	equ	0xFDE
 11969                           postdec2	equ	0xFDD
 11970                           plusw2	equ	0xFDB
 11971                           fsr2h	equ	0xFDA
 11972                           fsr2l	equ	0xFD9
 11973                           status	equ	0xFD8
 11974                           
 11975 ;; *************** function _StoreIntInEeprom *****************
 11976 ;; Defined at:
 11977 ;;		line 121 in file "SystemCommon.c"
 11978 ;; Parameters:    Size  Location     Type
 11979 ;;  data            4   32[COMRAM] unsigned long 
 11980 ;;  address         1   36[COMRAM] unsigned char 
 11981 ;;  numOfByes       2   37[COMRAM] int 
 11982 ;; Auto vars:     Size  Location     Type
 11983 ;;  val             1   39[COMRAM] unsigned char 
 11984 ;;  idx             1   40[COMRAM] unsigned char 
 11985 ;; Return value:  Size  Location     Type
 11986 ;;                  1    wreg      void 
 11987 ;; Registers used:
 11988 ;;		wreg, status,2, status,0, cstack
 11989 ;; Tracked objects:
 11990 ;;		On entry : 0/0
 11991 ;;		On exit  : 0/0
 11992 ;;		Unchanged: 0/0
 11993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11994 ;;      Params:         7       0       0       0       0       0       0
 11995 ;;      Locals:         2       0       0       0       0       0       0
 11996 ;;      Temps:          0       0       0       0       0       0       0
 11997 ;;      Totals:         9       0       0       0       0       0       0
 11998 ;;Total ram usage:        9 bytes
 11999 ;; Hardware stack levels used:    1
 12000 ;; Hardware stack levels required when called:    6
 12001 ;; This function calls:
 12002 ;;		_EepromWrite
 12003 ;;		_make8
 12004 ;; This function is called by:
 12005 ;;		_DacInit
 12006 ;;		_DacSetValue
 12007 ;;		_InitSynth
 12008 ;;		_UpdateSynthFreq
 12009 ;; This function uses a non-reentrant model
 12010 ;;
 12011                           
 12012                           	psect	text64
 12013  003E9A                     __ptext64:
 12014                           	opt stack 0
 12015  003E9A                     _StoreIntInEeprom:
 12016                           	opt stack 21
 12017                           
 12018                           ;SystemCommon.c: 123: for(uint8_t idx = numOfByes; idx; idx--)
 12019                           
 12020                           ; BSR set to: 0
 12021                           ;incstack = 0
 12022  003E9A  C026  F029         	movff	StoreIntInEeprom@numOfByes,StoreIntInEeprom@idx
 12023  003E9E  D015               	goto	l1444
 12024  003EA0                     
 12025                           ;SystemCommon.c: 124: {
 12026                           ;SystemCommon.c: 125: uint8_t val = make8(data, idx - 1);
 12027  003EA0  C021  F018         	movff	StoreIntInEeprom@data,make8@data
 12028  003EA4  C022  F019         	movff	StoreIntInEeprom@data+1,make8@data+1
 12029  003EA8  C023  F01A         	movff	StoreIntInEeprom@data+2,make8@data+2
 12030  003EAC  C024  F01B         	movff	StoreIntInEeprom@data+3,make8@data+3
 12031  003EB0  0429               	decf	StoreIntInEeprom@idx,w,c
 12032  003EB2  6E1C               	movwf	make8@dataLocation,c
 12033  003EB4  EC5D  F01C         	call	_make8	;wreg free
 12034  003EB8  6E28               	movwf	StoreIntInEeprom@val,c
 12035                           
 12036                           ;SystemCommon.c: 126: EepromWrite(address - idx, val);
 12037  003EBA  C028  F01B         	movff	StoreIntInEeprom@val,EepromWrite@data
 12038  003EBE  5029               	movf	StoreIntInEeprom@idx,w,c
 12039  003EC0  0800               	sublw	0
 12040  003EC2  2425               	addwf	StoreIntInEeprom@address,w,c
 12041  003EC4  EC2C  F022         	call	_EepromWrite
 12042  003EC8  0629               	decf	StoreIntInEeprom@idx,f,c
 12043  003ECA                     l1444:
 12044  003ECA  5029               	movf	StoreIntInEeprom@idx,w,c
 12045  003ECC  B4D8               	btfsc	status,2,c
 12046  003ECE  0012               	return	
 12047  003ED0  D7E7               	goto	l1445
 12048  003ED2                     __end_of_StoreIntInEeprom:
 12049                           	opt stack 0
 12050                           tosu	equ	0xFFF
 12051                           tosh	equ	0xFFE
 12052                           tosl	equ	0xFFD
 12053                           pclath	equ	0xFFA
 12054                           tblptru	equ	0xFF8
 12055                           tblptrh	equ	0xFF7
 12056                           tblptrl	equ	0xFF6
 12057                           tablat	equ	0xFF5
 12058                           prodh	equ	0xFF4
 12059                           prodl	equ	0xFF3
 12060                           intcon	equ	0xFF2
 12061                           intcon2	equ	0xFF1
 12062                           postinc0	equ	0xFEE
 12063                           plusw0	equ	0xFEB
 12064                           wreg	equ	0xFE8
 12065                           indf1	equ	0xFE7
 12066                           postdec1	equ	0xFE5
 12067                           fsr1h	equ	0xFE2
 12068                           fsr1l	equ	0xFE1
 12069                           indf2	equ	0xFDF
 12070                           postinc2	equ	0xFDE
 12071                           postdec2	equ	0xFDD
 12072                           plusw2	equ	0xFDB
 12073                           fsr2h	equ	0xFDA
 12074                           fsr2l	equ	0xFD9
 12075                           status	equ	0xFD8
 12076                           
 12077 ;; *************** function _EepromWrite *****************
 12078 ;; Defined at:
 12079 ;;		line 225 in file "FlashApp.c"
 12080 ;; Parameters:    Size  Location     Type
 12081 ;;  address         1    wreg     unsigned char 
 12082 ;;  data            1   26[COMRAM] unsigned char 
 12083 ;; Auto vars:     Size  Location     Type
 12084 ;;  address         1   27[COMRAM] unsigned char 
 12085 ;; Return value:  Size  Location     Type
 12086 ;;                  1    wreg      void 
 12087 ;; Registers used:
 12088 ;;		wreg, status,2, cstack
 12089 ;; Tracked objects:
 12090 ;;		On entry : 0/0
 12091 ;;		On exit  : 0/0
 12092 ;;		Unchanged: 0/0
 12093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12094 ;;      Params:         1       0       0       0       0       0       0
 12095 ;;      Locals:         1       0       0       0       0       0       0
 12096 ;;      Temps:          0       0       0       0       0       0       0
 12097 ;;      Totals:         2       0       0       0       0       0       0
 12098 ;;Total ram usage:        2 bytes
 12099 ;; Hardware stack levels used:    1
 12100 ;; Hardware stack levels required when called:    5
 12101 ;; This function calls:
 12102 ;;		_DATAEE_WriteByte
 12103 ;; This function is called by:
 12104 ;;		_StoreIntInEeprom
 12105 ;; This function uses a non-reentrant model
 12106 ;;
 12107                           
 12108                           	psect	text65
 12109  004458                     __ptext65:
 12110                           	opt stack 0
 12111  004458                     _EepromWrite:
 12112                           	opt stack 21
 12113                           
 12114                           ;incstack = 0
 12115                           ;EepromWrite@address stored from wreg
 12116  004458  6E1C               	movwf	EepromWrite@address,c
 12117                           
 12118                           ;FlashApp.c: 227: DATAEE_WriteByte(address, data);
 12119  00445A  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
 12120  00445E  501C               	movf	EepromWrite@address,w,c
 12121  004460  ECBC  F01F         	call	_DATAEE_WriteByte
 12122  004464  0012               	return		;funcret
 12123  004466                     __end_of_EepromWrite:
 12124                           	opt stack 0
 12125                           tosu	equ	0xFFF
 12126                           tosh	equ	0xFFE
 12127                           tosl	equ	0xFFD
 12128                           pclath	equ	0xFFA
 12129                           tblptru	equ	0xFF8
 12130                           tblptrh	equ	0xFF7
 12131                           tblptrl	equ	0xFF6
 12132                           tablat	equ	0xFF5
 12133                           prodh	equ	0xFF4
 12134                           prodl	equ	0xFF3
 12135                           intcon	equ	0xFF2
 12136                           intcon2	equ	0xFF1
 12137                           postinc0	equ	0xFEE
 12138                           plusw0	equ	0xFEB
 12139                           wreg	equ	0xFE8
 12140                           indf1	equ	0xFE7
 12141                           postdec1	equ	0xFE5
 12142                           fsr1h	equ	0xFE2
 12143                           fsr1l	equ	0xFE1
 12144                           indf2	equ	0xFDF
 12145                           postinc2	equ	0xFDE
 12146                           postdec2	equ	0xFDD
 12147                           plusw2	equ	0xFDB
 12148                           fsr2h	equ	0xFDA
 12149                           fsr2l	equ	0xFD9
 12150                           status	equ	0xFD8
 12151                           
 12152 ;; *************** function _DATAEE_WriteByte *****************
 12153 ;; Defined at:
 12154 ;;		line 167 in file "mcc_generated_files/memory.c"
 12155 ;; Parameters:    Size  Location     Type
 12156 ;;  bAdd            1    wreg     unsigned char 
 12157 ;;  bData           1   23[COMRAM] unsigned char 
 12158 ;; Auto vars:     Size  Location     Type
 12159 ;;  bAdd            1   24[COMRAM] unsigned char 
 12160 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
 12161 ;; Return value:  Size  Location     Type
 12162 ;;                  1    wreg      void 
 12163 ;; Registers used:
 12164 ;;		wreg, status,2
 12165 ;; Tracked objects:
 12166 ;;		On entry : 0/0
 12167 ;;		On exit  : 0/0
 12168 ;;		Unchanged: 0/0
 12169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12170 ;;      Params:         1       0       0       0       0       0       0
 12171 ;;      Locals:         2       0       0       0       0       0       0
 12172 ;;      Temps:          0       0       0       0       0       0       0
 12173 ;;      Totals:         3       0       0       0       0       0       0
 12174 ;;Total ram usage:        3 bytes
 12175 ;; Hardware stack levels used:    1
 12176 ;; Hardware stack levels required when called:    4
 12177 ;; This function calls:
 12178 ;;		Nothing
 12179 ;; This function is called by:
 12180 ;;		_EepromWrite
 12181 ;; This function uses a non-reentrant model
 12182 ;;
 12183                           
 12184                           	psect	text66
 12185  003F78                     __ptext66:
 12186                           	opt stack 0
 12187  003F78                     _DATAEE_WriteByte:
 12188                           	opt stack 21
 12189                           
 12190                           ;incstack = 0
 12191                           ;DATAEE_WriteByte@bAdd stored from wreg
 12192  003F78  6E19               	movwf	DATAEE_WriteByte@bAdd,c
 12193                           
 12194                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
 12195  003F7A  0E00               	movlw	0
 12196  003F7C  BEF2               	btfsc	intcon,7,c	;volatile
 12197  003F7E  0E01               	movlw	1
 12198  003F80  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
 12199                           
 12200                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
 12201  003F82  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
 12202                           
 12203                           ;memory.c: 172: EEDATA = bData;
 12204  003F86  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
 12205                           
 12206                           ;memory.c: 173: EECON1bits.EEPGD = 0;
 12207  003F8A  9EA6               	bcf	4006,7,c	;volsfr
 12208                           
 12209                           ;memory.c: 174: EECON1bits.CFGS = 0;
 12210  003F8C  9CA6               	bcf	4006,6,c	;volsfr
 12211                           
 12212                           ;memory.c: 175: EECON1bits.WREN = 1;
 12213  003F8E  84A6               	bsf	4006,2,c	;volsfr
 12214                           
 12215                           ;memory.c: 176: INTCONbits.GIE = 0;
 12216  003F90  9EF2               	bcf	intcon,7,c	;volatile
 12217                           
 12218                           ;memory.c: 177: EECON2 = 0x55;
 12219  003F92  0E55               	movlw	85
 12220  003F94  6EA7               	movwf	4007,c	;volsfr
 12221                           
 12222                           ;memory.c: 178: EECON2 = 0xAA;
 12223  003F96  0EAA               	movlw	170
 12224  003F98  6EA7               	movwf	4007,c	;volsfr
 12225                           
 12226                           ;memory.c: 179: EECON1bits.WR = 1;
 12227  003F9A  82A6               	bsf	4006,1,c	;volsfr
 12228  003F9C                     
 12229                           ;memory.c: 182: {
 12230  003F9C  B2A6               	btfsc	4006,1,c	;volsfr
 12231  003F9E  D7FE               	goto	l1067
 12232                           
 12233                           ;memory.c: 183: }
 12234                           ;memory.c: 185: EECON1bits.WREN = 0;
 12235  003FA0  94A6               	bcf	4006,2,c	;volsfr
 12236                           
 12237                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
 12238  003FA2  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
 12239  003FA4  D002               	bra	u7435
 12240  003FA6  9EF2               	bcf	intcon,7,c	;volatile
 12241  003FA8  D001               	bra	u7436
 12242  003FAA                     u7435:
 12243  003FAA  8EF2               	bsf	intcon,7,c	;volatile
 12244  003FAC                     u7436:
 12245  003FAC  0012               	return		;funcret
 12246  003FAE                     __end_of_DATAEE_WriteByte:
 12247                           	opt stack 0
 12248                           tosu	equ	0xFFF
 12249                           tosh	equ	0xFFE
 12250                           tosl	equ	0xFFD
 12251                           pclath	equ	0xFFA
 12252                           tblptru	equ	0xFF8
 12253                           tblptrh	equ	0xFF7
 12254                           tblptrl	equ	0xFF6
 12255                           tablat	equ	0xFF5
 12256                           prodh	equ	0xFF4
 12257                           prodl	equ	0xFF3
 12258                           intcon	equ	0xFF2
 12259                           intcon2	equ	0xFF1
 12260                           postinc0	equ	0xFEE
 12261                           plusw0	equ	0xFEB
 12262                           wreg	equ	0xFE8
 12263                           indf1	equ	0xFE7
 12264                           postdec1	equ	0xFE5
 12265                           fsr1h	equ	0xFE2
 12266                           fsr1l	equ	0xFE1
 12267                           indf2	equ	0xFDF
 12268                           postinc2	equ	0xFDE
 12269                           postdec2	equ	0xFDD
 12270                           plusw2	equ	0xFDB
 12271                           fsr2h	equ	0xFDA
 12272                           fsr2l	equ	0xFD9
 12273                           status	equ	0xFD8
 12274                           
 12275 ;; *************** function _SWSPI_send_word *****************
 12276 ;; Defined at:
 12277 ;;		line 17 in file "SwSpiApp.c"
 12278 ;; Parameters:    Size  Location     Type
 12279 ;;  phrType         1    wreg     enum E1
 12280 ;;  data            4   40[COMRAM] unsigned long 
 12281 ;;  dataSize        1   44[COMRAM] unsigned char 
 12282 ;; Auto vars:     Size  Location     Type
 12283 ;;  phrType         1   41[BANK0 ] enum E1
 12284 ;;  datac           1   38[BANK0 ] unsigned char 
 12285 ;;  idx             2   39[BANK0 ] int 
 12286 ;; Return value:  Size  Location     Type
 12287 ;;                  1    wreg      void 
 12288 ;; Registers used:
 12289 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12290 ;; Tracked objects:
 12291 ;;		On entry : 0/0
 12292 ;;		On exit  : 0/0
 12293 ;;		Unchanged: 0/0
 12294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12295 ;;      Params:         5       0       0       0       0       0       0
 12296 ;;      Locals:         0       4       0       0       0       0       0
 12297 ;;      Temps:          0       0       0       0       0       0       0
 12298 ;;      Totals:         5       4       0       0       0       0       0
 12299 ;;Total ram usage:        9 bytes
 12300 ;; Hardware stack levels used:    1
 12301 ;; Hardware stack levels required when called:    7
 12302 ;; This function calls:
 12303 ;;		_SWSPI_DAC_send_bits
 12304 ;;		_SWSPI_Synth_send_bits
 12305 ;;		_SwSpi_Set_Dac_Sync_Pin
 12306 ;;		_SwSpi_Set_Synth_Le_Pin
 12307 ;;		_make8
 12308 ;; This function is called by:
 12309 ;;		_DacInit
 12310 ;;		_DacSetValue
 12311 ;;		_InitSynth
 12312 ;;		_UpdateSynthFreq
 12313 ;; This function uses a non-reentrant model
 12314 ;;
 12315                           
 12316                           	psect	text67
 12317  003042                     __ptext67:
 12318                           	opt stack 0
 12319  003042                     _SWSPI_send_word:
 12320                           	opt stack 20
 12321                           
 12322                           ;incstack = 0
 12323                           ;SWSPI_send_word@phrType stored from wreg
 12324  003042  0100               	movlb	0	; () banked
 12325  003044  6F89               	movwf	SWSPI_send_word@phrType& (0+255),b
 12326                           
 12327                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 12328  003046  9EF2               	bcf	intcon,7,c	;volatile
 12329                           
 12330                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 12331  003048  0100               	movlb	0	; () banked
 12332  00304A  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12333  00304C  B4D8               	btfsc	status,2,c
 12334  00304E  D003               	goto	u8060
 12335                           
 12336                           ; BSR set to: 0
 12337  003050  0589               	decf	SWSPI_send_word@phrType& (0+255),w,b
 12338  003052  A4D8               	btfss	status,2,c
 12339  003054  D018               	goto	l643
 12340  003056                     u8060:
 12341                           
 12342                           ; BSR set to: 0
 12343                           ;SwSpiApp.c: 24: {
 12344                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 12345                           
 12346                           ; BSR set to: 0
 12347  003056  0E00               	movlw	0
 12348  003058  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 12349  00305A  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12350  00305C  ECF7  F01E         	call	_SwSpi_Set_Synth_Le_Pin
 12351                           
 12352                           ;SwSpiApp.c: 26: SWSPI_Synth_send_bits(phrType, data);
 12353  003060  C029  F025         	movff	SWSPI_send_word@data,SWSPI_Synth_send_bits@data
 12354  003064  C02A  F026         	movff	SWSPI_send_word@data+1,SWSPI_Synth_send_bits@data+1
 12355  003068  C02B  F027         	movff	SWSPI_send_word@data+2,SWSPI_Synth_send_bits@data+2
 12356  00306C  C02C  F028         	movff	SWSPI_send_word@data+3,SWSPI_Synth_send_bits@data+3
 12357  003070  0100               	movlb	0	; () banked
 12358  003072  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12359  003074  EC5C  F016         	call	_SWSPI_Synth_send_bits
 12360                           
 12361                           ;SwSpiApp.c: 27: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 12362  003078  0E01               	movlw	1
 12363  00307A  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 12364  00307C  0100               	movlb	0	; () banked
 12365  00307E  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12366  003080  ECF7  F01E         	call	_SwSpi_Set_Synth_Le_Pin
 12367                           
 12368                           ;SwSpiApp.c: 28: }
 12369  003084  D031               	goto	l647
 12370  003086                     l643:
 12371                           
 12372                           ;SwSpiApp.c: 29: else if(phrType == EXT_DAC)
 12373  003086  0E02               	movlw	2
 12374  003088  0100               	movlb	0	; () banked
 12375  00308A  1989               	xorwf	SWSPI_send_word@phrType& (0+255),w,b
 12376  00308C  A4D8               	btfss	status,2,c
 12377  00308E  D02C               	goto	l647
 12378                           
 12379                           ; BSR set to: 0
 12380                           ;SwSpiApp.c: 30: {
 12381                           ;SwSpiApp.c: 31: SwSpi_Set_Dac_Sync_Pin(0);
 12382  003090  0E00               	movlw	0
 12383  003092  ECA4  F021         	call	_SwSpi_Set_Dac_Sync_Pin
 12384                           
 12385                           ;SwSpiApp.c: 32: for(int idx = dataSize + 1; idx > 0; idx--)
 12386  003096  0E01               	movlw	1
 12387  003098  242D               	addwf	SWSPI_send_word@dataSize,w,c
 12388  00309A  0100               	movlb	0	; () banked
 12389  00309C  6F87               	movwf	SWSPI_send_word@idx& (0+255),b
 12390  00309E  6B88               	clrf	(SWSPI_send_word@idx+1)& (0+255),b
 12391  0030A0  0E00               	movlw	0
 12392  0030A2  2388               	addwfc	(SWSPI_send_word@idx+1)& (0+255),f,b
 12393  0030A4                     l7915:
 12394                           
 12395                           ; BSR set to: 0
 12396  0030A4  BF88               	btfsc	(SWSPI_send_word@idx+1)& (0+255),7,b
 12397  0030A6  D01D               	goto	u8090
 12398  0030A8  5188               	movf	(SWSPI_send_word@idx+1)& (0+255),w,b
 12399  0030AA  E103               	bnz	l7919
 12400  0030AC  0587               	decf	SWSPI_send_word@idx& (0+255),w,b
 12401  0030AE  A0D8               	btfss	status,0,c
 12402  0030B0  D018               	goto	u8090
 12403  0030B2                     l7919:
 12404                           
 12405                           ; BSR set to: 0
 12406                           ;SwSpiApp.c: 33: {
 12407                           ;SwSpiApp.c: 34: uint8_t datac = make8(data, idx - 1);
 12408  0030B2  C029  F018         	movff	SWSPI_send_word@data,make8@data
 12409  0030B6  C02A  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 12410  0030BA  C02B  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 12411  0030BE  C02C  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 12412  0030C2  0587               	decf	SWSPI_send_word@idx& (0+255),w,b
 12413  0030C4  6E1C               	movwf	make8@dataLocation,c
 12414  0030C6  EC5D  F01C         	call	_make8	;wreg free
 12415  0030CA  0100               	movlb	0	; () banked
 12416  0030CC  6F86               	movwf	SWSPI_send_word@datac& (0+255),b
 12417                           
 12418                           ;SwSpiApp.c: 35: SWSPI_DAC_send_bits(phrType, datac);
 12419  0030CE  C086  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 12420  0030D2  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12421  0030D4  ECE5  F01C         	call	_SWSPI_DAC_send_bits
 12422  0030D8  0100               	movlb	0	; () banked
 12423  0030DA  0787               	decf	SWSPI_send_word@idx& (0+255),f,b
 12424  0030DC  A0D8               	btfss	status,0,c
 12425  0030DE  0788               	decf	(SWSPI_send_word@idx+1)& (0+255),f,b
 12426  0030E0  D7E1               	goto	l7915
 12427  0030E2                     u8090:
 12428                           
 12429                           ; BSR set to: 0
 12430                           ;SwSpiApp.c: 36: }
 12431                           ;SwSpiApp.c: 37: SwSpi_Set_Dac_Sync_Pin(1);
 12432                           
 12433                           ; BSR set to: 0
 12434  0030E2  0E01               	movlw	1
 12435  0030E4  ECA4  F021         	call	_SwSpi_Set_Dac_Sync_Pin
 12436  0030E8                     l647:
 12437                           
 12438                           ;SwSpiApp.c: 38: }
 12439                           ;SwSpiApp.c: 40: (INTCONbits.GIE = 1);
 12440  0030E8  8EF2               	bsf	intcon,7,c	;volatile
 12441  0030EA  0012               	return		;funcret
 12442  0030EC                     __end_of_SWSPI_send_word:
 12443                           	opt stack 0
 12444                           tosu	equ	0xFFF
 12445                           tosh	equ	0xFFE
 12446                           tosl	equ	0xFFD
 12447                           pclath	equ	0xFFA
 12448                           tblptru	equ	0xFF8
 12449                           tblptrh	equ	0xFF7
 12450                           tblptrl	equ	0xFF6
 12451                           tablat	equ	0xFF5
 12452                           prodh	equ	0xFF4
 12453                           prodl	equ	0xFF3
 12454                           intcon	equ	0xFF2
 12455                           intcon2	equ	0xFF1
 12456                           postinc0	equ	0xFEE
 12457                           plusw0	equ	0xFEB
 12458                           wreg	equ	0xFE8
 12459                           indf1	equ	0xFE7
 12460                           postdec1	equ	0xFE5
 12461                           fsr1h	equ	0xFE2
 12462                           fsr1l	equ	0xFE1
 12463                           indf2	equ	0xFDF
 12464                           postinc2	equ	0xFDE
 12465                           postdec2	equ	0xFDD
 12466                           plusw2	equ	0xFDB
 12467                           fsr2h	equ	0xFDA
 12468                           fsr2l	equ	0xFD9
 12469                           status	equ	0xFD8
 12470                           
 12471 ;; *************** function _make8 *****************
 12472 ;; Defined at:
 12473 ;;		line 91 in file "SystemCommon.c"
 12474 ;; Parameters:    Size  Location     Type
 12475 ;;  data            4   23[COMRAM] unsigned long 
 12476 ;;  dataLocation    1   27[COMRAM] unsigned char 
 12477 ;; Auto vars:     Size  Location     Type
 12478 ;;		None
 12479 ;; Return value:  Size  Location     Type
 12480 ;;                  1    wreg      unsigned char 
 12481 ;; Registers used:
 12482 ;;		wreg, status,2, status,0
 12483 ;; Tracked objects:
 12484 ;;		On entry : 0/0
 12485 ;;		On exit  : 0/0
 12486 ;;		Unchanged: 0/0
 12487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12488 ;;      Params:         5       0       0       0       0       0       0
 12489 ;;      Locals:         0       0       0       0       0       0       0
 12490 ;;      Temps:          4       0       0       0       0       0       0
 12491 ;;      Totals:         9       0       0       0       0       0       0
 12492 ;;Total ram usage:        9 bytes
 12493 ;; Hardware stack levels used:    1
 12494 ;; Hardware stack levels required when called:    4
 12495 ;; This function calls:
 12496 ;;		Nothing
 12497 ;; This function is called by:
 12498 ;;		_FlashReadCondition
 12499 ;;		_DacReadValue
 12500 ;;		_SynthReadData
 12501 ;;		_SWSPI_send_word
 12502 ;;		_StoreIntInEeprom
 12503 ;; This function uses a non-reentrant model
 12504 ;;
 12505                           
 12506                           	psect	text68
 12507  0038BA                     __ptext68:
 12508                           	opt stack 0
 12509  0038BA                     _make8:
 12510                           	opt stack 22
 12511                           
 12512                           ;SystemCommon.c: 93: switch(dataLocation)
 12513                           
 12514                           ;incstack = 0
 12515  0038BA  D01F               	goto	l1429
 12516  0038BC                     
 12517                           ;SystemCommon.c: 96: return (data & 0x000000ff);
 12518  0038BC  5018               	movf	make8@data,w,c
 12519  0038BE  0012               	return	
 12520  0038C0                     
 12521                           ;SystemCommon.c: 99: return (data & 0x0000ff00) >> 8;
 12522  0038C0  5019               	movf	make8@data+1,w,c
 12523  0038C2  0012               	return	
 12524  0038C4                     
 12525                           ;SystemCommon.c: 102: return (data & 0x00ff0000) >> 16;
 12526  0038C4  501A               	movf	make8@data+2,w,c
 12527  0038C6  0012               	return	
 12528  0038C8                     
 12529                           ;SystemCommon.c: 105: return (data & 0xff000000) >> 24;
 12530  0038C8  0E00               	movlw	0
 12531  0038CA  1418               	andwf	make8@data,w,c
 12532  0038CC  6E1D               	movwf	??_make8& (0+255),c
 12533  0038CE  0E00               	movlw	0
 12534  0038D0  1419               	andwf	make8@data+1,w,c
 12535  0038D2  6E1E               	movwf	(??_make8+1)& (0+255),c
 12536  0038D4  0E00               	movlw	0
 12537  0038D6  141A               	andwf	make8@data+2,w,c
 12538  0038D8  6E1F               	movwf	(??_make8+2)& (0+255),c
 12539  0038DA  0EFF               	movlw	255
 12540  0038DC  141B               	andwf	make8@data+3,w,c
 12541  0038DE  6E20               	movwf	(??_make8+3)& (0+255),c
 12542  0038E0  0E19               	movlw	25
 12543  0038E2  D005               	goto	u7800
 12544  0038E4                     u7805:
 12545  0038E4  90D8               	bcf	status,0,c
 12546  0038E6  3220               	rrcf	??_make8+3,f,c
 12547  0038E8  321F               	rrcf	??_make8+2,f,c
 12548  0038EA  321E               	rrcf	??_make8+1,f,c
 12549  0038EC  321D               	rrcf	??_make8,f,c
 12550  0038EE                     u7800:
 12551  0038EE  2EE8               	decfsz	wreg,f,c
 12552  0038F0  D7F9               	goto	u7805
 12553  0038F2  501D               	movf	??_make8,w,c
 12554  0038F4  0012               	return	
 12555  0038F6                     
 12556                           ;SystemCommon.c: 108: return (0);
 12557  0038F6  0E00               	movlw	0
 12558                           
 12559                           ;SystemCommon.c: 109: }
 12560  0038F8  0012               	return	
 12561  0038FA                     l1429:
 12562  0038FA  501C               	movf	make8@dataLocation,w,c
 12563                           
 12564                           ; Switch size 1, requested type "space"
 12565                           ; Number of cases is 4, Range of values is 0 to 3
 12566                           ; switch strategies available:
 12567                           ; Name         Instructions Cycles
 12568                           ; simple_byte           13     7 (average)
 12569                           ;	Chosen strategy is simple_byte
 12570  0038FC  0A00               	xorlw	0	; case 0
 12571  0038FE  B4D8               	btfsc	status,2,c
 12572  003900  D7DD               	goto	l1430
 12573  003902  0A01               	xorlw	1	; case 1
 12574  003904  B4D8               	btfsc	status,2,c
 12575  003906  D7DC               	goto	l1432
 12576  003908  0A03               	xorlw	3	; case 2
 12577  00390A  B4D8               	btfsc	status,2,c
 12578  00390C  D7DB               	goto	l1433
 12579  00390E  0A01               	xorlw	1	; case 3
 12580  003910  B4D8               	btfsc	status,2,c
 12581  003912  D7DA               	goto	l1434
 12582  003914  D7F0               	goto	l1435
 12583  003916                     __end_of_make8:
 12584                           	opt stack 0
 12585                           tosu	equ	0xFFF
 12586                           tosh	equ	0xFFE
 12587                           tosl	equ	0xFFD
 12588                           pclath	equ	0xFFA
 12589                           tblptru	equ	0xFF8
 12590                           tblptrh	equ	0xFF7
 12591                           tblptrl	equ	0xFF6
 12592                           tablat	equ	0xFF5
 12593                           prodh	equ	0xFF4
 12594                           prodl	equ	0xFF3
 12595                           intcon	equ	0xFF2
 12596                           intcon2	equ	0xFF1
 12597                           postinc0	equ	0xFEE
 12598                           plusw0	equ	0xFEB
 12599                           wreg	equ	0xFE8
 12600                           indf1	equ	0xFE7
 12601                           postdec1	equ	0xFE5
 12602                           fsr1h	equ	0xFE2
 12603                           fsr1l	equ	0xFE1
 12604                           indf2	equ	0xFDF
 12605                           postinc2	equ	0xFDE
 12606                           postdec2	equ	0xFDD
 12607                           plusw2	equ	0xFDB
 12608                           fsr2h	equ	0xFDA
 12609                           fsr2l	equ	0xFD9
 12610                           status	equ	0xFD8
 12611                           
 12612 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 12613 ;; Defined at:
 12614 ;;		line 232 in file "SwSpiApp.c"
 12615 ;; Parameters:    Size  Location     Type
 12616 ;;  phrType         1    wreg     enum E1
 12617 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12618 ;; Auto vars:     Size  Location     Type
 12619 ;;  phrType         1   24[COMRAM] enum E1
 12620 ;; Return value:  Size  Location     Type
 12621 ;;                  1    wreg      void 
 12622 ;; Registers used:
 12623 ;;		wreg, status,2, status,0
 12624 ;; Tracked objects:
 12625 ;;		On entry : 0/0
 12626 ;;		On exit  : 0/0
 12627 ;;		Unchanged: 0/0
 12628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12629 ;;      Params:         1       0       0       0       0       0       0
 12630 ;;      Locals:         1       0       0       0       0       0       0
 12631 ;;      Temps:          0       0       0       0       0       0       0
 12632 ;;      Totals:         2       0       0       0       0       0       0
 12633 ;;Total ram usage:        2 bytes
 12634 ;; Hardware stack levels used:    1
 12635 ;; Hardware stack levels required when called:    4
 12636 ;; This function calls:
 12637 ;;		Nothing
 12638 ;; This function is called by:
 12639 ;;		_SWSPI_send_word
 12640 ;; This function uses a non-reentrant model
 12641 ;;
 12642                           
 12643                           	psect	text69
 12644  003DEE                     __ptext69:
 12645                           	opt stack 0
 12646  003DEE                     _SwSpi_Set_Synth_Le_Pin:
 12647                           	opt stack 22
 12648                           
 12649                           ;incstack = 0
 12650                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 12651  003DEE  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 12652                           
 12653                           ;SwSpiApp.c: 234: switch(phrType)
 12654  003DF0  D014               	goto	l755
 12655  003DF2                     
 12656                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 12657  003DF2  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12658  003DF4  A4D8               	btfss	status,2,c
 12659  003DF6  D002               	goto	l757
 12660                           
 12661                           ;SwSpiApp.c: 238: {
 12662                           ;SwSpiApp.c: 239: do { LATCbits.LATC2 = 1; } while(0);
 12663  003DF8  848B               	bsf	3979,2,c	;volatile
 12664                           
 12665                           ;SwSpiApp.c: 240: }
 12666  003DFA  0012               	return	
 12667  003DFC                     l757:
 12668                           
 12669                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 12670  003DFC  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12671  003DFE  A4D8               	btfss	status,2,c
 12672  003E00  0012               	return	
 12673                           
 12674                           ;SwSpiApp.c: 242: {
 12675                           ;SwSpiApp.c: 243: do { LATCbits.LATC2 = 0; } while(0);
 12676  003E02  948B               	bcf	3979,2,c	;volatile
 12677                           
 12678                           ;SwSpiApp.c: 244: }
 12679                           ;SwSpiApp.c: 245: break;
 12680  003E04  0012               	return	
 12681  003E06                     
 12682                           ;SwSpiApp.c: 248: if(cPinMode == 1)
 12683  003E06  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12684  003E08  A4D8               	btfss	status,2,c
 12685  003E0A  D002               	goto	l766
 12686                           
 12687                           ;SwSpiApp.c: 249: {
 12688                           ;SwSpiApp.c: 250: do { LATDbits.LATD3 = 1; } while(0);
 12689  003E0C  868C               	bsf	3980,3,c	;volatile
 12690                           
 12691                           ;SwSpiApp.c: 251: }
 12692  003E0E  0012               	return	
 12693  003E10                     l766:
 12694                           
 12695                           ;SwSpiApp.c: 252: else if(cPinMode == 0)
 12696  003E10  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12697  003E12  A4D8               	btfss	status,2,c
 12698  003E14  0012               	return	
 12699                           
 12700                           ;SwSpiApp.c: 253: {
 12701                           ;SwSpiApp.c: 254: do { LATDbits.LATD3 = 0; } while(0);
 12702  003E16  968C               	bcf	3980,3,c	;volatile
 12703                           
 12704                           ;SwSpiApp.c: 257: }
 12705                           
 12706                           ;SwSpiApp.c: 255: }
 12707                           ;SwSpiApp.c: 256: break;
 12708  003E18  0012               	return	
 12709  003E1A                     l755:
 12710  003E1A  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 12711                           
 12712                           ; Switch size 1, requested type "space"
 12713                           ; Number of cases is 2, Range of values is 0 to 1
 12714                           ; switch strategies available:
 12715                           ; Name         Instructions Cycles
 12716                           ; simple_byte            7     4 (average)
 12717                           ;	Chosen strategy is simple_byte
 12718  003E1C  0A00               	xorlw	0	; case 0
 12719  003E1E  B4D8               	btfsc	status,2,c
 12720  003E20  D7E8               	goto	l756
 12721  003E22  0A01               	xorlw	1	; case 1
 12722  003E24  A4D8               	btfss	status,2,c
 12723  003E26  0012               	return	
 12724  003E28  D7EE               	goto	l765
 12725  003E2A                     __end_of_SwSpi_Set_Synth_Le_Pin:
 12726                           	opt stack 0
 12727                           tosu	equ	0xFFF
 12728                           tosh	equ	0xFFE
 12729                           tosl	equ	0xFFD
 12730                           pclath	equ	0xFFA
 12731                           tblptru	equ	0xFF8
 12732                           tblptrh	equ	0xFF7
 12733                           tblptrl	equ	0xFF6
 12734                           tablat	equ	0xFF5
 12735                           prodh	equ	0xFF4
 12736                           prodl	equ	0xFF3
 12737                           intcon	equ	0xFF2
 12738                           intcon2	equ	0xFF1
 12739                           postinc0	equ	0xFEE
 12740                           plusw0	equ	0xFEB
 12741                           wreg	equ	0xFE8
 12742                           indf1	equ	0xFE7
 12743                           postdec1	equ	0xFE5
 12744                           fsr1h	equ	0xFE2
 12745                           fsr1l	equ	0xFE1
 12746                           indf2	equ	0xFDF
 12747                           postinc2	equ	0xFDE
 12748                           postdec2	equ	0xFDD
 12749                           plusw2	equ	0xFDB
 12750                           fsr2h	equ	0xFDA
 12751                           fsr2l	equ	0xFD9
 12752                           status	equ	0xFD8
 12753                           
 12754 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 12755 ;; Defined at:
 12756 ;;		line 260 in file "SwSpiApp.c"
 12757 ;; Parameters:    Size  Location     Type
 12758 ;;  cPinMode        1    wreg     unsigned char 
 12759 ;; Auto vars:     Size  Location     Type
 12760 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12761 ;; Return value:  Size  Location     Type
 12762 ;;                  1    wreg      void 
 12763 ;; Registers used:
 12764 ;;		wreg, status,2, status,0
 12765 ;; Tracked objects:
 12766 ;;		On entry : 0/0
 12767 ;;		On exit  : 0/0
 12768 ;;		Unchanged: 0/0
 12769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12770 ;;      Params:         0       0       0       0       0       0       0
 12771 ;;      Locals:         1       0       0       0       0       0       0
 12772 ;;      Temps:          0       0       0       0       0       0       0
 12773 ;;      Totals:         1       0       0       0       0       0       0
 12774 ;;Total ram usage:        1 bytes
 12775 ;; Hardware stack levels used:    1
 12776 ;; Hardware stack levels required when called:    4
 12777 ;; This function calls:
 12778 ;;		Nothing
 12779 ;; This function is called by:
 12780 ;;		_SWSPI_send_word
 12781 ;; This function uses a non-reentrant model
 12782 ;;
 12783                           
 12784                           	psect	text70
 12785  004348                     __ptext70:
 12786                           	opt stack 0
 12787  004348                     _SwSpi_Set_Dac_Sync_Pin:
 12788                           	opt stack 22
 12789                           
 12790                           ;incstack = 0
 12791                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 12792  004348  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 12793                           
 12794                           ;SwSpiApp.c: 262: switch(cPinMode)
 12795  00434A  D004               	goto	l776
 12796  00434C                     
 12797                           ;SwSpiApp.c: 265: do { LATAbits.LATA2 = 0; } while(0);
 12798  00434C  9489               	bcf	3977,2,c	;volatile
 12799                           
 12800                           ;SwSpiApp.c: 266: break;
 12801  00434E  0012               	return	
 12802  004350                     
 12803                           ;SwSpiApp.c: 269: do { LATAbits.LATA2 = 1; } while(0);
 12804  004350  8489               	bsf	3977,2,c	;volatile
 12805                           
 12806                           ;SwSpiApp.c: 271: }
 12807                           
 12808                           ;SwSpiApp.c: 270: break;
 12809  004352  0012               	return	
 12810  004354                     l776:
 12811  004354  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 12812                           
 12813                           ; Switch size 1, requested type "space"
 12814                           ; Number of cases is 2, Range of values is 0 to 1
 12815                           ; switch strategies available:
 12816                           ; Name         Instructions Cycles
 12817                           ; simple_byte            7     4 (average)
 12818                           ;	Chosen strategy is simple_byte
 12819  004356  0A00               	xorlw	0	; case 0
 12820  004358  B4D8               	btfsc	status,2,c
 12821  00435A  D7F8               	goto	l777
 12822  00435C  0A01               	xorlw	1	; case 1
 12823  00435E  A4D8               	btfss	status,2,c
 12824  004360  0012               	return	
 12825  004362  D7F6               	goto	l781
 12826  004364                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 12827                           	opt stack 0
 12828                           tosu	equ	0xFFF
 12829                           tosh	equ	0xFFE
 12830                           tosl	equ	0xFFD
 12831                           pclath	equ	0xFFA
 12832                           tblptru	equ	0xFF8
 12833                           tblptrh	equ	0xFF7
 12834                           tblptrl	equ	0xFF6
 12835                           tablat	equ	0xFF5
 12836                           prodh	equ	0xFF4
 12837                           prodl	equ	0xFF3
 12838                           intcon	equ	0xFF2
 12839                           intcon2	equ	0xFF1
 12840                           postinc0	equ	0xFEE
 12841                           plusw0	equ	0xFEB
 12842                           wreg	equ	0xFE8
 12843                           indf1	equ	0xFE7
 12844                           postdec1	equ	0xFE5
 12845                           fsr1h	equ	0xFE2
 12846                           fsr1l	equ	0xFE1
 12847                           indf2	equ	0xFDF
 12848                           postinc2	equ	0xFDE
 12849                           postdec2	equ	0xFDD
 12850                           plusw2	equ	0xFDB
 12851                           fsr2h	equ	0xFDA
 12852                           fsr2l	equ	0xFD9
 12853                           status	equ	0xFD8
 12854                           
 12855 ;; *************** function _SWSPI_Synth_send_bits *****************
 12856 ;; Defined at:
 12857 ;;		line 67 in file "SwSpiApp.c"
 12858 ;; Parameters:    Size  Location     Type
 12859 ;;  phrType         1    wreg     enum E1
 12860 ;;  data            4   36[COMRAM] unsigned long 
 12861 ;; Auto vars:     Size  Location     Type
 12862 ;;  phrType         1   37[BANK0 ] enum E1
 12863 ;;  bitArray       32    0[BANK0 ] unsigned char [32]
 12864 ;;  mask            4   32[BANK0 ] unsigned long 
 12865 ;;  count           1   36[BANK0 ] unsigned char 
 12866 ;; Return value:  Size  Location     Type
 12867 ;;                  1    wreg      void 
 12868 ;; Registers used:
 12869 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12870 ;; Tracked objects:
 12871 ;;		On entry : 0/0
 12872 ;;		On exit  : 0/0
 12873 ;;		Unchanged: 0/0
 12874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12875 ;;      Params:         4       0       0       0       0       0       0
 12876 ;;      Locals:         0      38       0       0       0       0       0
 12877 ;;      Temps:          0       0       0       0       0       0       0
 12878 ;;      Totals:         4      38       0       0       0       0       0
 12879 ;;Total ram usage:       42 bytes
 12880 ;; Hardware stack levels used:    1
 12881 ;; Hardware stack levels required when called:    6
 12882 ;; This function calls:
 12883 ;;		_FillArray
 12884 ;;		_Make32bitsArray
 12885 ;;		_SwSpi_Clk_Pin
 12886 ;;		_SwSpi_Data_Pin
 12887 ;; This function is called by:
 12888 ;;		_SWSPI_send_word
 12889 ;; This function uses a non-reentrant model
 12890 ;;
 12891                           
 12892                           	psect	text71
 12893  002CB8                     __ptext71:
 12894                           	opt stack 0
 12895  002CB8                     _SWSPI_Synth_send_bits:
 12896                           	opt stack 20
 12897                           
 12898                           ;incstack = 0
 12899                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 12900  002CB8  0100               	movlb	0	; () banked
 12901  002CBA  6F85               	movwf	SWSPI_Synth_send_bits@phrType& (0+255),b
 12902                           
 12903                           ;SwSpiApp.c: 69: uint8_t count;
 12904                           ;SwSpiApp.c: 70: uint32_t mask = 0x1;
 12905  002CBC  0E01               	movlw	1
 12906  002CBE  0100               	movlb	0	; () banked
 12907  002CC0  6F80               	movwf	SWSPI_Synth_send_bits@mask& (0+255),b
 12908  002CC2  0E00               	movlw	0
 12909  002CC4  6F81               	movwf	(SWSPI_Synth_send_bits@mask+1)& (0+255),b
 12910  002CC6  0E00               	movlw	0
 12911  002CC8  6F82               	movwf	(SWSPI_Synth_send_bits@mask+2)& (0+255),b
 12912  002CCA  0E00               	movlw	0
 12913  002CCC  6F83               	movwf	(SWSPI_Synth_send_bits@mask+3)& (0+255),b
 12914                           
 12915                           ; BSR set to: 0
 12916                           ;SwSpiApp.c: 72: bool bitArray[32];
 12917                           ;SwSpiApp.c: 73: FillArray(bitArray, sizeof(bitArray), 0x0);
 12918  002CCE  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 12919  002CD0  6E20               	movwf	FillArray@array,c
 12920  002CD2  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12921  002CD4  6E21               	movwf	FillArray@array+1,c
 12922  002CD6  0E00               	movlw	0
 12923  002CD8  6E23               	movwf	FillArray@size+1,c
 12924  002CDA  0E20               	movlw	32
 12925  002CDC  6E22               	movwf	FillArray@size,c
 12926  002CDE  0E00               	movlw	0
 12927  002CE0  6E24               	movwf	FillArray@value,c
 12928  002CE2  ECB2  F021         	call	_FillArray	;wreg free
 12929                           
 12930                           ;SwSpiApp.c: 75: Make32bitsArray(bitArray, data);
 12931  002CE6  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 12932  002CE8  6E18               	movwf	Make32bitsArray@array,c
 12933  002CEA  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12934  002CEC  6E19               	movwf	Make32bitsArray@array+1,c
 12935  002CEE  C025  F01A         	movff	SWSPI_Synth_send_bits@data,Make32bitsArray@data
 12936  002CF2  C026  F01B         	movff	SWSPI_Synth_send_bits@data+1,Make32bitsArray@data+1
 12937  002CF6  C027  F01C         	movff	SWSPI_Synth_send_bits@data+2,Make32bitsArray@data+2
 12938  002CFA  C028  F01D         	movff	SWSPI_Synth_send_bits@data+3,Make32bitsArray@data+3
 12939  002CFE  ECB9  F01C         	call	_Make32bitsArray	;wreg free
 12940                           
 12941                           ;SwSpiApp.c: 77: for (count = 0; count <= 31 ; count++)
 12942  002D02  0E00               	movlw	0
 12943  002D04  0100               	movlb	0	; () banked
 12944  002D06  6F84               	movwf	SWSPI_Synth_send_bits@count& (0+255),b
 12945  002D08                     l7749:
 12946                           
 12947                           ; BSR set to: 0
 12948  002D08  0E1F               	movlw	31
 12949  002D0A  6584               	cpfsgt	SWSPI_Synth_send_bits@count& (0+255),b
 12950  002D0C  D001               	goto	l661
 12951  002D0E  D026               	goto	u7870
 12952  002D10                     l661:
 12953                           
 12954                           ; BSR set to: 0
 12955                           ;SwSpiApp.c: 78: {
 12956                           ;SwSpiApp.c: 80: SwSpi_Clk_Pin(phrType, 0);
 12957                           
 12958                           ; BSR set to: 0
 12959  002D10  0E00               	movlw	0
 12960  002D12  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12961  002D14  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12962  002D16  EC3C  F01D         	call	_SwSpi_Clk_Pin
 12963                           
 12964                           ;SwSpiApp.c: 82: if (bitArray[count])
 12965  002D1A  0100               	movlb	0	; () banked
 12966  002D1C  5184               	movf	SWSPI_Synth_send_bits@count& (0+255),w,b
 12967  002D1E  0D01               	mullw	1
 12968  002D20  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 12969  002D22  24F3               	addwf	prodl,w,c
 12970  002D24  6ED9               	movwf	fsr2l,c
 12971  002D26  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12972  002D28  20F4               	addwfc	prodh,w,c
 12973  002D2A  6EDA               	movwf	fsr2h,c
 12974  002D2C  50DF               	movf	indf2,w,c
 12975  002D2E  B4D8               	btfsc	status,2,c
 12976  002D30  D006               	goto	l663
 12977                           
 12978                           ; BSR set to: 0
 12979                           ;SwSpiApp.c: 83: {
 12980                           ;SwSpiApp.c: 84: SwSpi_Data_Pin(phrType, 1);
 12981  002D32  0E01               	movlw	1
 12982  002D34  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12983  002D36  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12984  002D38  EC11  F01D         	call	_SwSpi_Data_Pin
 12985                           
 12986                           ;SwSpiApp.c: 85: }
 12987  002D3C  D006               	goto	l664
 12988  002D3E                     l663:
 12989                           
 12990                           ;SwSpiApp.c: 86: else
 12991                           ;SwSpiApp.c: 87: {
 12992                           ;SwSpiApp.c: 88: SwSpi_Data_Pin(phrType, 0);
 12993  002D3E  0E00               	movlw	0
 12994  002D40  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12995  002D42  0100               	movlb	0	; () banked
 12996  002D44  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12997  002D46  EC11  F01D         	call	_SwSpi_Data_Pin
 12998  002D4A                     l664:
 12999                           
 13000                           ;SwSpiApp.c: 89: }
 13001                           ;SwSpiApp.c: 91: SwSpi_Clk_Pin(phrType, 1);
 13002  002D4A  0E01               	movlw	1
 13003  002D4C  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13004  002D4E  0100               	movlb	0	; () banked
 13005  002D50  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 13006  002D52  EC3C  F01D         	call	_SwSpi_Clk_Pin
 13007  002D56  0100               	movlb	0	; () banked
 13008  002D58  2B84               	incf	SWSPI_Synth_send_bits@count& (0+255),f,b
 13009  002D5A  D7D6               	goto	l7749
 13010  002D5C                     u7870:
 13011                           
 13012                           ; BSR set to: 0
 13013                           ;SwSpiApp.c: 92: }
 13014                           ;SwSpiApp.c: 94: _delay((unsigned long)((50)*(8000000/4000000.0)));
 13015                           
 13016                           ; BSR set to: 0
 13017  002D5C  0E21               	movlw	33
 13018  002D5E                     u9637:
 13019  002D5E  2EE8               	decfsz	wreg,f,c
 13020  002D60  D7FE               	bra	u9637
 13021  002D62  F000               	nop	
 13022                           
 13023                           ;SwSpiApp.c: 95: SwSpi_Data_Pin(phrType, 0);
 13024  002D64  0E00               	movlw	0
 13025  002D66  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13026  002D68  0100               	movlb	0	; () banked
 13027  002D6A  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 13028  002D6C  EC11  F01D         	call	_SwSpi_Data_Pin
 13029                           
 13030                           ;SwSpiApp.c: 96: SwSpi_Clk_Pin(phrType, 0);
 13031  002D70  0E00               	movlw	0
 13032  002D72  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13033  002D74  0100               	movlb	0	; () banked
 13034  002D76  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 13035  002D78  EC3C  F01D         	call	_SwSpi_Clk_Pin
 13036  002D7C  0012               	return		;funcret
 13037  002D7E                     __end_of_SWSPI_Synth_send_bits:
 13038                           	opt stack 0
 13039                           tosu	equ	0xFFF
 13040                           tosh	equ	0xFFE
 13041                           tosl	equ	0xFFD
 13042                           pclath	equ	0xFFA
 13043                           tblptru	equ	0xFF8
 13044                           tblptrh	equ	0xFF7
 13045                           tblptrl	equ	0xFF6
 13046                           tablat	equ	0xFF5
 13047                           prodh	equ	0xFF4
 13048                           prodl	equ	0xFF3
 13049                           intcon	equ	0xFF2
 13050                           intcon2	equ	0xFF1
 13051                           postinc0	equ	0xFEE
 13052                           plusw0	equ	0xFEB
 13053                           wreg	equ	0xFE8
 13054                           indf1	equ	0xFE7
 13055                           postdec1	equ	0xFE5
 13056                           fsr1h	equ	0xFE2
 13057                           fsr1l	equ	0xFE1
 13058                           indf2	equ	0xFDF
 13059                           postinc2	equ	0xFDE
 13060                           postdec2	equ	0xFDD
 13061                           plusw2	equ	0xFDB
 13062                           fsr2h	equ	0xFDA
 13063                           fsr2l	equ	0xFD9
 13064                           status	equ	0xFD8
 13065                           
 13066 ;; *************** function _Make32bitsArray *****************
 13067 ;; Defined at:
 13068 ;;		line 112 in file "SystemCommon.c"
 13069 ;; Parameters:    Size  Location     Type
 13070 ;;  array           2   23[COMRAM] PTR unsigned char 
 13071 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 13072 ;;  data            4   25[COMRAM] unsigned long 
 13073 ;; Auto vars:     Size  Location     Type
 13074 ;;  idx             2   31[COMRAM] int 
 13075 ;; Return value:  Size  Location     Type
 13076 ;;                  1    wreg      void 
 13077 ;; Registers used:
 13078 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13079 ;; Tracked objects:
 13080 ;;		On entry : 0/0
 13081 ;;		On exit  : 0/0
 13082 ;;		Unchanged: 0/0
 13083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13084 ;;      Params:         6       0       0       0       0       0       0
 13085 ;;      Locals:         2       0       0       0       0       0       0
 13086 ;;      Temps:          2       0       0       0       0       0       0
 13087 ;;      Totals:        10       0       0       0       0       0       0
 13088 ;;Total ram usage:       10 bytes
 13089 ;; Hardware stack levels used:    1
 13090 ;; Hardware stack levels required when called:    4
 13091 ;; This function calls:
 13092 ;;		Nothing
 13093 ;; This function is called by:
 13094 ;;		_SWSPI_Synth_send_bits
 13095 ;; This function uses a non-reentrant model
 13096 ;;
 13097                           
 13098                           	psect	text72
 13099  003972                     __ptext72:
 13100                           	opt stack 0
 13101  003972                     _Make32bitsArray:
 13102                           	opt stack 21
 13103                           
 13104                           ;SystemCommon.c: 114: for(int idx = 0; idx <= 32; idx++)
 13105                           
 13106                           ;incstack = 0
 13107  003972  0E00               	movlw	0
 13108  003974  6E21               	movwf	Make32bitsArray@idx+1,c
 13109  003976  0E00               	movlw	0
 13110  003978  6E20               	movwf	Make32bitsArray@idx,c
 13111  00397A                     l7537:
 13112  00397A  BE21               	btfsc	Make32bitsArray@idx+1,7,c
 13113  00397C  D006               	goto	l1439
 13114  00397E  5021               	movf	Make32bitsArray@idx+1,w,c
 13115  003980  E123               	bnz	l1441
 13116  003982  0E21               	movlw	33
 13117  003984  5C20               	subwf	Make32bitsArray@idx,w,c
 13118  003986  B0D8               	btfsc	status,0,c
 13119  003988  0012               	return	
 13120  00398A                     l1439:
 13121                           
 13122                           ;SystemCommon.c: 115: {
 13123                           ;SystemCommon.c: 116: array[32 - idx - 1] = data % 2;
 13124  00398A  0E01               	movlw	1
 13125  00398C  2420               	addwf	Make32bitsArray@idx,w,c
 13126  00398E  6E1E               	movwf	??_Make32bitsArray& (0+255),c
 13127  003990  0E00               	movlw	0
 13128  003992  2021               	addwfc	Make32bitsArray@idx+1,w,c
 13129  003994  6E1F               	movwf	(??_Make32bitsArray+1)& (0+255),c
 13130  003996  1E1E               	comf	??_Make32bitsArray,f,c
 13131  003998  1E1F               	comf	??_Make32bitsArray+1,f,c
 13132  00399A  4A1E               	infsnz	??_Make32bitsArray,f,c
 13133  00399C  2A1F               	incf	??_Make32bitsArray+1,f,c
 13134  00399E  0E20               	movlw	32
 13135  0039A0  261E               	addwf	??_Make32bitsArray,f,c
 13136  0039A2  0E00               	movlw	0
 13137  0039A4  221F               	addwfc	??_Make32bitsArray+1,f,c
 13138  0039A6  501E               	movf	??_Make32bitsArray,w,c
 13139  0039A8  2418               	addwf	Make32bitsArray@array,w,c
 13140  0039AA  6ED9               	movwf	fsr2l,c
 13141  0039AC  501F               	movf	??_Make32bitsArray+1,w,c
 13142  0039AE  2019               	addwfc	Make32bitsArray@array+1,w,c
 13143  0039B0  6EDA               	movwf	fsr2h,c
 13144  0039B2  501A               	movf	Make32bitsArray@data,w,c
 13145  0039B4  0B01               	andlw	1
 13146  0039B6  6EDF               	movwf	indf2,c
 13147                           
 13148                           ;SystemCommon.c: 117: data /= 2;
 13149  0039B8  90D8               	bcf	status,0,c
 13150  0039BA  321D               	rrcf	Make32bitsArray@data+3,f,c
 13151  0039BC  321C               	rrcf	Make32bitsArray@data+2,f,c
 13152  0039BE  321B               	rrcf	Make32bitsArray@data+1,f,c
 13153  0039C0  321A               	rrcf	Make32bitsArray@data,f,c
 13154  0039C2  4A20               	infsnz	Make32bitsArray@idx,f,c
 13155  0039C4  2A21               	incf	Make32bitsArray@idx+1,f,c
 13156  0039C6  D7D9               	goto	l7537
 13157  0039C8                     l1441:
 13158  0039C8  0012               	return		;funcret
 13159  0039CA                     __end_of_Make32bitsArray:
 13160                           	opt stack 0
 13161                           tosu	equ	0xFFF
 13162                           tosh	equ	0xFFE
 13163                           tosl	equ	0xFFD
 13164                           pclath	equ	0xFFA
 13165                           tblptru	equ	0xFF8
 13166                           tblptrh	equ	0xFF7
 13167                           tblptrl	equ	0xFF6
 13168                           tablat	equ	0xFF5
 13169                           prodh	equ	0xFF4
 13170                           prodl	equ	0xFF3
 13171                           intcon	equ	0xFF2
 13172                           intcon2	equ	0xFF1
 13173                           postinc0	equ	0xFEE
 13174                           plusw0	equ	0xFEB
 13175                           wreg	equ	0xFE8
 13176                           indf1	equ	0xFE7
 13177                           postdec1	equ	0xFE5
 13178                           fsr1h	equ	0xFE2
 13179                           fsr1l	equ	0xFE1
 13180                           indf2	equ	0xFDF
 13181                           postinc2	equ	0xFDE
 13182                           postdec2	equ	0xFDD
 13183                           plusw2	equ	0xFDB
 13184                           fsr2h	equ	0xFDA
 13185                           fsr2l	equ	0xFD9
 13186                           status	equ	0xFD8
 13187                           
 13188 ;; *************** function _FillArray *****************
 13189 ;; Defined at:
 13190 ;;		line 29 in file "SystemCommon.c"
 13191 ;; Parameters:    Size  Location     Type
 13192 ;;  array           2   31[COMRAM] PTR unsigned char 
 13193 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), synthLdRxArray(14), 
 13194 ;;  size            2   33[COMRAM] int 
 13195 ;;  value           1   35[COMRAM] unsigned char 
 13196 ;; Auto vars:     Size  Location     Type
 13197 ;;		None
 13198 ;; Return value:  Size  Location     Type
 13199 ;;                  1    wreg      void 
 13200 ;; Registers used:
 13201 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13202 ;; Tracked objects:
 13203 ;;		On entry : 0/0
 13204 ;;		On exit  : 0/0
 13205 ;;		Unchanged: 0/0
 13206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13207 ;;      Params:         5       0       0       0       0       0       0
 13208 ;;      Locals:         0       0       0       0       0       0       0
 13209 ;;      Temps:          0       0       0       0       0       0       0
 13210 ;;      Totals:         5       0       0       0       0       0       0
 13211 ;;Total ram usage:        5 bytes
 13212 ;; Hardware stack levels used:    1
 13213 ;; Hardware stack levels required when called:    5
 13214 ;; This function calls:
 13215 ;;		_memset
 13216 ;; This function is called by:
 13217 ;;		_PLLInitialize
 13218 ;;		_SWSPI_Synth_send_bits
 13219 ;; This function uses a non-reentrant model
 13220 ;;
 13221                           
 13222                           	psect	text73
 13223  004364                     __ptext73:
 13224                           	opt stack 0
 13225  004364                     _FillArray:
 13226                           	opt stack 20
 13227                           
 13228                           ;SystemCommon.c: 31: memset(array, value, size);
 13229                           
 13230                           ;incstack = 0
 13231  004364  C020  F018         	movff	FillArray@array,memset@p1
 13232  004368  C021  F019         	movff	FillArray@array+1,memset@p1+1
 13233  00436C  C024  F01A         	movff	FillArray@value,memset@c
 13234  004370  6A1B               	clrf	memset@c+1,c
 13235  004372  C022  F01C         	movff	FillArray@size,memset@n
 13236  004376  C023  F01D         	movff	FillArray@size+1,memset@n+1
 13237  00437A  EC84  F020         	call	_memset	;wreg free
 13238  00437E  0012               	return		;funcret
 13239  004380                     __end_of_FillArray:
 13240                           	opt stack 0
 13241                           tosu	equ	0xFFF
 13242                           tosh	equ	0xFFE
 13243                           tosl	equ	0xFFD
 13244                           pclath	equ	0xFFA
 13245                           tblptru	equ	0xFF8
 13246                           tblptrh	equ	0xFF7
 13247                           tblptrl	equ	0xFF6
 13248                           tablat	equ	0xFF5
 13249                           prodh	equ	0xFF4
 13250                           prodl	equ	0xFF3
 13251                           intcon	equ	0xFF2
 13252                           intcon2	equ	0xFF1
 13253                           postinc0	equ	0xFEE
 13254                           plusw0	equ	0xFEB
 13255                           wreg	equ	0xFE8
 13256                           indf1	equ	0xFE7
 13257                           postdec1	equ	0xFE5
 13258                           fsr1h	equ	0xFE2
 13259                           fsr1l	equ	0xFE1
 13260                           indf2	equ	0xFDF
 13261                           postinc2	equ	0xFDE
 13262                           postdec2	equ	0xFDD
 13263                           plusw2	equ	0xFDB
 13264                           fsr2h	equ	0xFDA
 13265                           fsr2l	equ	0xFD9
 13266                           status	equ	0xFD8
 13267                           
 13268 ;; *************** function _memset *****************
 13269 ;; Defined at:
 13270 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 13271 ;; Parameters:    Size  Location     Type
 13272 ;;  p1              2   23[COMRAM] PTR void 
 13273 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@
      +TxMsg(18), 
 13274 ;;		 -> DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), 
 13275 ;;		 -> SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), synthLdRxArray(14), 
 13276 ;;  c               2   25[COMRAM] int 
 13277 ;;  n               2   27[COMRAM] unsigned int 
 13278 ;; Auto vars:     Size  Location     Type
 13279 ;;  p               2   29[COMRAM] PTR unsigned char 
 13280 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@
      +TxMsg(18), 
 13281 ;;		 -> DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), 
 13282 ;;		 -> SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), synthLdRxArray(14), 
 13283 ;; Return value:  Size  Location     Type
 13284 ;;                  2   23[COMRAM] PTR void 
 13285 ;; Registers used:
 13286 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13287 ;; Tracked objects:
 13288 ;;		On entry : 0/0
 13289 ;;		On exit  : 0/0
 13290 ;;		Unchanged: 0/0
 13291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13292 ;;      Params:         6       0       0       0       0       0       0
 13293 ;;      Locals:         2       0       0       0       0       0       0
 13294 ;;      Temps:          0       0       0       0       0       0       0
 13295 ;;      Totals:         8       0       0       0       0       0       0
 13296 ;;Total ram usage:        8 bytes
 13297 ;; Hardware stack levels used:    1
 13298 ;; Hardware stack levels required when called:    4
 13299 ;; This function calls:
 13300 ;;		Nothing
 13301 ;; This function is called by:
 13302 ;;		_ZeroArray
 13303 ;;		_FillArray
 13304 ;; This function uses a non-reentrant model
 13305 ;;
 13306                           
 13307                           	psect	text74
 13308  004108                     __ptext74:
 13309                           	opt stack 0
 13310  004108                     _memset:
 13311                           	opt stack 24
 13312                           
 13313                           ;incstack = 0
 13314  004108  C018  F01E         	movff	memset@p1,memset@p
 13315  00410C  C019  F01F         	movff	memset@p1+1,memset@p+1
 13316  004110  D008               	goto	l2038
 13317  004112                     l7319:
 13318  004112  C01E  FFD9         	movff	memset@p,fsr2l
 13319  004116  C01F  FFDA         	movff	memset@p+1,fsr2h
 13320  00411A  C01A  FFDF         	movff	memset@c,indf2
 13321  00411E  4A1E               	infsnz	memset@p,f,c
 13322  004120  2A1F               	incf	memset@p+1,f,c
 13323  004122                     l2038:
 13324  004122  061C               	decf	memset@n,f,c
 13325  004124  A0D8               	btfss	status,0,c
 13326  004126  061D               	decf	memset@n+1,f,c
 13327  004128  281C               	incf	memset@n,w,c
 13328  00412A  E1F3               	bnz	l7319
 13329  00412C  281D               	incf	memset@n+1,w,c
 13330  00412E  B4D8               	btfsc	status,2,c
 13331  004130  0012               	return	
 13332  004132  D7EF               	goto	l2039
 13333  004134                     __end_of_memset:
 13334                           	opt stack 0
 13335                           tosu	equ	0xFFF
 13336                           tosh	equ	0xFFE
 13337                           tosl	equ	0xFFD
 13338                           pclath	equ	0xFFA
 13339                           tblptru	equ	0xFF8
 13340                           tblptrh	equ	0xFF7
 13341                           tblptrl	equ	0xFF6
 13342                           tablat	equ	0xFF5
 13343                           prodh	equ	0xFF4
 13344                           prodl	equ	0xFF3
 13345                           intcon	equ	0xFF2
 13346                           intcon2	equ	0xFF1
 13347                           postinc0	equ	0xFEE
 13348                           plusw0	equ	0xFEB
 13349                           wreg	equ	0xFE8
 13350                           indf1	equ	0xFE7
 13351                           postdec1	equ	0xFE5
 13352                           fsr1h	equ	0xFE2
 13353                           fsr1l	equ	0xFE1
 13354                           indf2	equ	0xFDF
 13355                           postinc2	equ	0xFDE
 13356                           postdec2	equ	0xFDD
 13357                           plusw2	equ	0xFDB
 13358                           fsr2h	equ	0xFDA
 13359                           fsr2l	equ	0xFD9
 13360                           status	equ	0xFD8
 13361                           
 13362 ;; *************** function _SWSPI_DAC_send_bits *****************
 13363 ;; Defined at:
 13364 ;;		line 43 in file "SwSpiApp.c"
 13365 ;; Parameters:    Size  Location     Type
 13366 ;;  phrType         1    wreg     enum E1
 13367 ;;  data            1   25[COMRAM] unsigned char 
 13368 ;; Auto vars:     Size  Location     Type
 13369 ;;  phrType         1   27[COMRAM] enum E1
 13370 ;;  count           1   26[COMRAM] unsigned char 
 13371 ;; Return value:  Size  Location     Type
 13372 ;;                  1    wreg      void 
 13373 ;; Registers used:
 13374 ;;		wreg, status,2, status,0, cstack
 13375 ;; Tracked objects:
 13376 ;;		On entry : 0/0
 13377 ;;		On exit  : 0/0
 13378 ;;		Unchanged: 0/0
 13379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13380 ;;      Params:         1       0       0       0       0       0       0
 13381 ;;      Locals:         2       0       0       0       0       0       0
 13382 ;;      Temps:          0       0       0       0       0       0       0
 13383 ;;      Totals:         3       0       0       0       0       0       0
 13384 ;;Total ram usage:        3 bytes
 13385 ;; Hardware stack levels used:    1
 13386 ;; Hardware stack levels required when called:    5
 13387 ;; This function calls:
 13388 ;;		_SwSpi_Clk_Pin
 13389 ;;		_SwSpi_Data_Pin
 13390 ;; This function is called by:
 13391 ;;		_SWSPI_send_word
 13392 ;; This function uses a non-reentrant model
 13393 ;;
 13394                           
 13395                           	psect	text75
 13396  0039CA                     __ptext75:
 13397                           	opt stack 0
 13398  0039CA                     _SWSPI_DAC_send_bits:
 13399                           	opt stack 21
 13400                           
 13401                           ;incstack = 0
 13402                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 13403  0039CA  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 13404                           
 13405                           ;SwSpiApp.c: 45: uint8_t count;
 13406                           ;SwSpiApp.c: 46: for (count = 8; count ; count--, data <<= 1)
 13407  0039CC  0E08               	movlw	8
 13408  0039CE  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 13409  0039D0  D01A               	goto	l653
 13410  0039D2                     
 13411                           ;SwSpiApp.c: 47: {
 13412                           ;SwSpiApp.c: 48: SwSpi_Clk_Pin(phrType, 1);
 13413  0039D2  0E01               	movlw	1
 13414  0039D4  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13415  0039D6  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13416  0039D8  EC3C  F01D         	call	_SwSpi_Clk_Pin
 13417                           
 13418                           ;SwSpiApp.c: 50: if (data & 0X80)
 13419  0039DC  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 13420  0039DE  D006               	goto	l655
 13421                           
 13422                           ;SwSpiApp.c: 51: {
 13423                           ;SwSpiApp.c: 53: SwSpi_Data_Pin(phrType, 1);
 13424  0039E0  0E01               	movlw	1
 13425  0039E2  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13426  0039E4  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13427  0039E6  EC11  F01D         	call	_SwSpi_Data_Pin
 13428                           
 13429                           ;SwSpiApp.c: 54: }
 13430  0039EA  D005               	goto	l656
 13431  0039EC                     l655:
 13432                           
 13433                           ;SwSpiApp.c: 55: else
 13434                           ;SwSpiApp.c: 56: {
 13435                           ;SwSpiApp.c: 57: SwSpi_Data_Pin(phrType, 0);
 13436  0039EC  0E00               	movlw	0
 13437  0039EE  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13438  0039F0  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13439  0039F2  EC11  F01D         	call	_SwSpi_Data_Pin
 13440  0039F6                     l656:
 13441                           
 13442                           ;SwSpiApp.c: 58: }
 13443                           ;SwSpiApp.c: 60: SwSpi_Clk_Pin(phrType, 0);
 13444  0039F6  0E00               	movlw	0
 13445  0039F8  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13446  0039FA  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13447  0039FC  EC3C  F01D         	call	_SwSpi_Clk_Pin
 13448  003A00  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 13449  003A02  90D8               	bcf	status,0,c
 13450  003A04  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 13451  003A06                     l653:
 13452  003A06  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 13453  003A08  A4D8               	btfss	status,2,c
 13454  003A0A  D7E3               	goto	l654
 13455                           
 13456                           ;SwSpiApp.c: 61: }
 13457                           ;SwSpiApp.c: 63: SwSpi_Data_Pin(phrType, 0);
 13458  003A0C  0E00               	movlw	0
 13459  003A0E  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13460  003A10  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13461  003A12  EC11  F01D         	call	_SwSpi_Data_Pin
 13462                           
 13463                           ;SwSpiApp.c: 64: SwSpi_Clk_Pin(phrType, 0);
 13464  003A16  0E00               	movlw	0
 13465  003A18  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13466  003A1A  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13467  003A1C  EC3C  F01D         	call	_SwSpi_Clk_Pin
 13468  003A20  0012               	return		;funcret
 13469  003A22                     __end_of_SWSPI_DAC_send_bits:
 13470                           	opt stack 0
 13471                           tosu	equ	0xFFF
 13472                           tosh	equ	0xFFE
 13473                           tosl	equ	0xFFD
 13474                           pclath	equ	0xFFA
 13475                           tblptru	equ	0xFF8
 13476                           tblptrh	equ	0xFF7
 13477                           tblptrl	equ	0xFF6
 13478                           tablat	equ	0xFF5
 13479                           prodh	equ	0xFF4
 13480                           prodl	equ	0xFF3
 13481                           intcon	equ	0xFF2
 13482                           intcon2	equ	0xFF1
 13483                           postinc0	equ	0xFEE
 13484                           plusw0	equ	0xFEB
 13485                           wreg	equ	0xFE8
 13486                           indf1	equ	0xFE7
 13487                           postdec1	equ	0xFE5
 13488                           fsr1h	equ	0xFE2
 13489                           fsr1l	equ	0xFE1
 13490                           indf2	equ	0xFDF
 13491                           postinc2	equ	0xFDE
 13492                           postdec2	equ	0xFDD
 13493                           plusw2	equ	0xFDB
 13494                           fsr2h	equ	0xFDA
 13495                           fsr2l	equ	0xFD9
 13496                           status	equ	0xFD8
 13497                           
 13498 ;; *************** function _SwSpi_Data_Pin *****************
 13499 ;; Defined at:
 13500 ;;		line 103 in file "SwSpiApp.c"
 13501 ;; Parameters:    Size  Location     Type
 13502 ;;  phrType         1    wreg     enum E1
 13503 ;;  cPinMode        1   23[COMRAM] unsigned char 
 13504 ;; Auto vars:     Size  Location     Type
 13505 ;;  phrType         1   24[COMRAM] enum E1
 13506 ;; Return value:  Size  Location     Type
 13507 ;;                  1    wreg      void 
 13508 ;; Registers used:
 13509 ;;		wreg, status,2, status,0
 13510 ;; Tracked objects:
 13511 ;;		On entry : 0/0
 13512 ;;		On exit  : 0/0
 13513 ;;		Unchanged: 0/0
 13514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13515 ;;      Params:         1       0       0       0       0       0       0
 13516 ;;      Locals:         1       0       0       0       0       0       0
 13517 ;;      Temps:          0       0       0       0       0       0       0
 13518 ;;      Totals:         2       0       0       0       0       0       0
 13519 ;;Total ram usage:        2 bytes
 13520 ;; Hardware stack levels used:    1
 13521 ;; Hardware stack levels required when called:    4
 13522 ;; This function calls:
 13523 ;;		Nothing
 13524 ;; This function is called by:
 13525 ;;		_SWSPI_DAC_send_bits
 13526 ;;		_SWSPI_Synth_send_bits
 13527 ;; This function uses a non-reentrant model
 13528 ;;
 13529                           
 13530                           	psect	text76
 13531  003A22                     __ptext76:
 13532                           	opt stack 0
 13533  003A22                     _SwSpi_Data_Pin:
 13534                           	opt stack 21
 13535                           
 13536                           ;incstack = 0
 13537                           ;SwSpi_Data_Pin@phrType stored from wreg
 13538  003A22  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 13539                           
 13540                           ;SwSpiApp.c: 105: switch(phrType)
 13541  003A24  D01E               	goto	l668
 13542  003A26                     
 13543                           ;SwSpiApp.c: 108: if(cPinMode == 1)
 13544  003A26  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 13545  003A28  A4D8               	btfss	status,2,c
 13546  003A2A  D002               	goto	l670
 13547                           
 13548                           ;SwSpiApp.c: 109: {
 13549                           ;SwSpiApp.c: 110: do { LATDbits.LATD0 = 1; } while(0);
 13550  003A2C  808C               	bsf	3980,0,c	;volatile
 13551                           
 13552                           ;SwSpiApp.c: 111: }
 13553  003A2E  0012               	return	
 13554  003A30                     l670:
 13555                           
 13556                           ;SwSpiApp.c: 112: else if (cPinMode == 0)
 13557  003A30  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 13558  003A32  A4D8               	btfss	status,2,c
 13559  003A34  0012               	return	
 13560                           
 13561                           ;SwSpiApp.c: 113: {
 13562                           ;SwSpiApp.c: 114: do { LATDbits.LATD0 = 0; } while(0);
 13563  003A36  908C               	bcf	3980,0,c	;volatile
 13564                           
 13565                           ;SwSpiApp.c: 115: }
 13566                           ;SwSpiApp.c: 116: break;
 13567  003A38  0012               	return	
 13568  003A3A                     
 13569                           ;SwSpiApp.c: 119: if(cPinMode == 1)
 13570  003A3A  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 13571  003A3C  A4D8               	btfss	status,2,c
 13572  003A3E  D002               	goto	l679
 13573                           
 13574                           ;SwSpiApp.c: 120: {
 13575                           ;SwSpiApp.c: 121: do { LATCbits.LATC5 = 1; } while(0);
 13576  003A40  8A8B               	bsf	3979,5,c	;volatile
 13577                           
 13578                           ;SwSpiApp.c: 122: }
 13579  003A42  0012               	return	
 13580  003A44                     l679:
 13581                           
 13582                           ;SwSpiApp.c: 123: else if (cPinMode == 0)
 13583  003A44  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 13584  003A46  A4D8               	btfss	status,2,c
 13585  003A48  0012               	return	
 13586                           
 13587                           ;SwSpiApp.c: 124: {
 13588                           ;SwSpiApp.c: 125: do { LATCbits.LATC5 = 0; } while(0);
 13589  003A4A  9A8B               	bcf	3979,5,c	;volatile
 13590                           
 13591                           ;SwSpiApp.c: 126: }
 13592                           ;SwSpiApp.c: 127: break;
 13593  003A4C  0012               	return	
 13594  003A4E                     
 13595                           ;SwSpiApp.c: 130: if(cPinMode == 1)
 13596  003A4E  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 13597  003A50  A4D8               	btfss	status,2,c
 13598  003A52  D002               	goto	l687
 13599                           
 13600                           ;SwSpiApp.c: 131: {
 13601                           ;SwSpiApp.c: 132: do { LATAbits.LATA4 = 1; } while(0);
 13602  003A54  8889               	bsf	3977,4,c	;volatile
 13603                           
 13604                           ;SwSpiApp.c: 133: }
 13605  003A56  0012               	return	
 13606  003A58                     l687:
 13607                           
 13608                           ;SwSpiApp.c: 134: else if (cPinMode == 0)
 13609  003A58  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 13610  003A5A  A4D8               	btfss	status,2,c
 13611  003A5C  0012               	return	
 13612                           
 13613                           ;SwSpiApp.c: 135: {
 13614                           ;SwSpiApp.c: 136: do { LATAbits.LATA4 = 0; } while(0);
 13615  003A5E  9889               	bcf	3977,4,c	;volatile
 13616                           
 13617                           ;SwSpiApp.c: 139: }
 13618                           
 13619                           ;SwSpiApp.c: 137: }
 13620                           ;SwSpiApp.c: 138: break;
 13621  003A60  0012               	return	
 13622  003A62                     l668:
 13623  003A62  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 13624                           
 13625                           ; Switch size 1, requested type "space"
 13626                           ; Number of cases is 3, Range of values is 0 to 2
 13627                           ; switch strategies available:
 13628                           ; Name         Instructions Cycles
 13629                           ; simple_byte           10     6 (average)
 13630                           ;	Chosen strategy is simple_byte
 13631  003A64  0A00               	xorlw	0	; case 0
 13632  003A66  B4D8               	btfsc	status,2,c
 13633  003A68  D7DE               	goto	l669
 13634  003A6A  0A01               	xorlw	1	; case 1
 13635  003A6C  B4D8               	btfsc	status,2,c
 13636  003A6E  D7E5               	goto	l678
 13637  003A70  0A03               	xorlw	3	; case 2
 13638  003A72  A4D8               	btfss	status,2,c
 13639  003A74  0012               	return	
 13640  003A76  D7EB               	goto	l686
 13641  003A78                     __end_of_SwSpi_Data_Pin:
 13642                           	opt stack 0
 13643                           tosu	equ	0xFFF
 13644                           tosh	equ	0xFFE
 13645                           tosl	equ	0xFFD
 13646                           pclath	equ	0xFFA
 13647                           tblptru	equ	0xFF8
 13648                           tblptrh	equ	0xFF7
 13649                           tblptrl	equ	0xFF6
 13650                           tablat	equ	0xFF5
 13651                           prodh	equ	0xFF4
 13652                           prodl	equ	0xFF3
 13653                           intcon	equ	0xFF2
 13654                           intcon2	equ	0xFF1
 13655                           postinc0	equ	0xFEE
 13656                           plusw0	equ	0xFEB
 13657                           wreg	equ	0xFE8
 13658                           indf1	equ	0xFE7
 13659                           postdec1	equ	0xFE5
 13660                           fsr1h	equ	0xFE2
 13661                           fsr1l	equ	0xFE1
 13662                           indf2	equ	0xFDF
 13663                           postinc2	equ	0xFDE
 13664                           postdec2	equ	0xFDD
 13665                           plusw2	equ	0xFDB
 13666                           fsr2h	equ	0xFDA
 13667                           fsr2l	equ	0xFD9
 13668                           status	equ	0xFD8
 13669                           
 13670 ;; *************** function _SwSpi_Clk_Pin *****************
 13671 ;; Defined at:
 13672 ;;		line 142 in file "SwSpiApp.c"
 13673 ;; Parameters:    Size  Location     Type
 13674 ;;  phrType         1    wreg     enum E1
 13675 ;;  cPinMode        1   23[COMRAM] unsigned char 
 13676 ;; Auto vars:     Size  Location     Type
 13677 ;;  phrType         1   24[COMRAM] enum E1
 13678 ;; Return value:  Size  Location     Type
 13679 ;;                  1    wreg      void 
 13680 ;; Registers used:
 13681 ;;		wreg, status,2, status,0
 13682 ;; Tracked objects:
 13683 ;;		On entry : 0/0
 13684 ;;		On exit  : 0/0
 13685 ;;		Unchanged: 0/0
 13686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13687 ;;      Params:         1       0       0       0       0       0       0
 13688 ;;      Locals:         1       0       0       0       0       0       0
 13689 ;;      Temps:          0       0       0       0       0       0       0
 13690 ;;      Totals:         2       0       0       0       0       0       0
 13691 ;;Total ram usage:        2 bytes
 13692 ;; Hardware stack levels used:    1
 13693 ;; Hardware stack levels required when called:    4
 13694 ;; This function calls:
 13695 ;;		Nothing
 13696 ;; This function is called by:
 13697 ;;		_SWSPI_DAC_send_bits
 13698 ;;		_SWSPI_Synth_send_bits
 13699 ;;		_SwSpi_Synth_Toggle_Clock
 13700 ;; This function uses a non-reentrant model
 13701 ;;
 13702                           
 13703                           	psect	text77
 13704  003A78                     __ptext77:
 13705                           	opt stack 0
 13706  003A78                     _SwSpi_Clk_Pin:
 13707                           	opt stack 21
 13708                           
 13709                           ;incstack = 0
 13710                           ;SwSpi_Clk_Pin@phrType stored from wreg
 13711  003A78  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 13712                           
 13713                           ;SwSpiApp.c: 144: switch(phrType)
 13714  003A7A  D01E               	goto	l697
 13715  003A7C                     
 13716                           ;SwSpiApp.c: 147: if(cPinMode == 1)
 13717  003A7C  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 13718  003A7E  A4D8               	btfss	status,2,c
 13719  003A80  D002               	goto	l699
 13720                           
 13721                           ;SwSpiApp.c: 148: {
 13722                           ;SwSpiApp.c: 149: do { LATCbits.LATC3 = 1; } while(0);
 13723  003A82  868B               	bsf	3979,3,c	;volatile
 13724                           
 13725                           ;SwSpiApp.c: 150: }
 13726  003A84  0012               	return	
 13727  003A86                     l699:
 13728                           
 13729                           ;SwSpiApp.c: 151: else if (cPinMode == 0)
 13730  003A86  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 13731  003A88  A4D8               	btfss	status,2,c
 13732  003A8A  0012               	return	
 13733                           
 13734                           ;SwSpiApp.c: 152: {
 13735                           ;SwSpiApp.c: 153: do { LATCbits.LATC3 = 0; } while(0);
 13736  003A8C  968B               	bcf	3979,3,c	;volatile
 13737                           
 13738                           ;SwSpiApp.c: 154: }
 13739                           ;SwSpiApp.c: 155: break;
 13740  003A8E  0012               	return	
 13741  003A90                     
 13742                           ;SwSpiApp.c: 158: if(cPinMode == 1)
 13743  003A90  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 13744  003A92  A4D8               	btfss	status,2,c
 13745  003A94  D002               	goto	l708
 13746                           
 13747                           ;SwSpiApp.c: 159: {
 13748                           ;SwSpiApp.c: 160: do { LATCbits.LATC4 = 1; } while(0);
 13749  003A96  888B               	bsf	3979,4,c	;volatile
 13750                           
 13751                           ;SwSpiApp.c: 161: }
 13752  003A98  0012               	return	
 13753  003A9A                     l708:
 13754                           
 13755                           ;SwSpiApp.c: 162: else if (cPinMode == 0)
 13756  003A9A  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 13757  003A9C  A4D8               	btfss	status,2,c
 13758  003A9E  0012               	return	
 13759                           
 13760                           ;SwSpiApp.c: 163: {
 13761                           ;SwSpiApp.c: 164: do { LATCbits.LATC4 = 0; } while(0);
 13762  003AA0  988B               	bcf	3979,4,c	;volatile
 13763                           
 13764                           ;SwSpiApp.c: 165: }
 13765                           ;SwSpiApp.c: 167: break;
 13766  003AA2  0012               	return	
 13767  003AA4                     
 13768                           ;SwSpiApp.c: 170: if(cPinMode == 1)
 13769  003AA4  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 13770  003AA6  A4D8               	btfss	status,2,c
 13771  003AA8  D002               	goto	l716
 13772                           
 13773                           ;SwSpiApp.c: 171: {
 13774                           ;SwSpiApp.c: 172: do { LATAbits.LATA3 = 1; } while(0);
 13775  003AAA  8689               	bsf	3977,3,c	;volatile
 13776                           
 13777                           ;SwSpiApp.c: 173: }
 13778  003AAC  0012               	return	
 13779  003AAE                     l716:
 13780                           
 13781                           ;SwSpiApp.c: 174: else if (cPinMode == 0)
 13782  003AAE  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 13783  003AB0  A4D8               	btfss	status,2,c
 13784  003AB2  0012               	return	
 13785                           
 13786                           ;SwSpiApp.c: 175: {
 13787                           ;SwSpiApp.c: 176: do { LATAbits.LATA3 = 0; } while(0);
 13788  003AB4  9689               	bcf	3977,3,c	;volatile
 13789                           
 13790                           ;SwSpiApp.c: 179: }
 13791                           
 13792                           ;SwSpiApp.c: 177: }
 13793                           ;SwSpiApp.c: 178: break;
 13794  003AB6  0012               	return	
 13795  003AB8                     l697:
 13796  003AB8  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 13797                           
 13798                           ; Switch size 1, requested type "space"
 13799                           ; Number of cases is 3, Range of values is 0 to 2
 13800                           ; switch strategies available:
 13801                           ; Name         Instructions Cycles
 13802                           ; simple_byte           10     6 (average)
 13803                           ;	Chosen strategy is simple_byte
 13804  003ABA  0A00               	xorlw	0	; case 0
 13805  003ABC  B4D8               	btfsc	status,2,c
 13806  003ABE  D7DE               	goto	l698
 13807  003AC0  0A01               	xorlw	1	; case 1
 13808  003AC2  B4D8               	btfsc	status,2,c
 13809  003AC4  D7E5               	goto	l707
 13810  003AC6  0A03               	xorlw	3	; case 2
 13811  003AC8  A4D8               	btfss	status,2,c
 13812  003ACA  0012               	return	
 13813  003ACC  D7EB               	goto	l715
 13814  003ACE                     __end_of_SwSpi_Clk_Pin:
 13815                           	opt stack 0
 13816                           tosu	equ	0xFFF
 13817                           tosh	equ	0xFFE
 13818                           tosl	equ	0xFFD
 13819                           pclath	equ	0xFFA
 13820                           tblptru	equ	0xFF8
 13821                           tblptrh	equ	0xFF7
 13822                           tblptrl	equ	0xFF6
 13823                           tablat	equ	0xFF5
 13824                           prodh	equ	0xFF4
 13825                           prodl	equ	0xFF3
 13826                           intcon	equ	0xFF2
 13827                           intcon2	equ	0xFF1
 13828                           postinc0	equ	0xFEE
 13829                           plusw0	equ	0xFEB
 13830                           wreg	equ	0xFE8
 13831                           indf1	equ	0xFE7
 13832                           postdec1	equ	0xFE5
 13833                           fsr1h	equ	0xFE2
 13834                           fsr1l	equ	0xFE1
 13835                           indf2	equ	0xFDF
 13836                           postinc2	equ	0xFDE
 13837                           postdec2	equ	0xFDD
 13838                           plusw2	equ	0xFDB
 13839                           fsr2h	equ	0xFDA
 13840                           fsr2l	equ	0xFD9
 13841                           status	equ	0xFD8
 13842                           
 13843 ;; *************** function _ReadIntFromEeprom *****************
 13844 ;; Defined at:
 13845 ;;		line 130 in file "SystemCommon.c"
 13846 ;; Parameters:    Size  Location     Type
 13847 ;;  address         1    wreg     unsigned char 
 13848 ;;  numOfByes       2   81[BANK0 ] int 
 13849 ;; Auto vars:     Size  Location     Type
 13850 ;;  address         1   98[BANK0 ] unsigned char 
 13851 ;;  base            4   88[BANK0 ] unsigned long 
 13852 ;;  idx             1  103[BANK0 ] unsigned char 
 13853 ;;  retVal          4   99[BANK0 ] unsigned long 
 13854 ;; Return value:  Size  Location     Type
 13855 ;;                  4   81[BANK0 ] unsigned long 
 13856 ;; Registers used:
 13857 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13858 ;; Tracked objects:
 13859 ;;		On entry : 0/0
 13860 ;;		On exit  : 0/0
 13861 ;;		Unchanged: 0/0
 13862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13863 ;;      Params:         0       4       0       0       0       0       0
 13864 ;;      Locals:         0      16       0       0       0       0       0
 13865 ;;      Temps:          0       3       0       0       0       0       0
 13866 ;;      Totals:         0      23       0       0       0       0       0
 13867 ;;Total ram usage:       23 bytes
 13868 ;; Hardware stack levels used:    1
 13869 ;; Hardware stack levels required when called:    9
 13870 ;; This function calls:
 13871 ;;		_EepromRead
 13872 ;;		___awtoft
 13873 ;;		___fttol
 13874 ;;		___lmul
 13875 ;;		_pow
 13876 ;; This function is called by:
 13877 ;;		_DacInit
 13878 ;;		_DacReadValue
 13879 ;;		_InitSynth
 13880 ;;		_SynthReadData
 13881 ;; This function uses a non-reentrant model
 13882 ;;
 13883                           
 13884                           	psect	text78
 13885  002086                     __ptext78:
 13886                           	opt stack 0
 13887  002086                     _ReadIntFromEeprom:
 13888                           	opt stack 18
 13889                           
 13890                           ;incstack = 0
 13891                           ;ReadIntFromEeprom@address stored from wreg
 13892  002086  0100               	movlb	0	; () banked
 13893  002088  6FC2               	movwf	ReadIntFromEeprom@address& (0+255),b
 13894                           
 13895                           ;SystemCommon.c: 132: uint32_t retVal = 0x00;
 13896  00208A  0E00               	movlw	0
 13897  00208C  0100               	movlb	0	; () banked
 13898  00208E  6FC3               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 13899  002090  0E00               	movlw	0
 13900  002092  6FC4               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 13901  002094  0E00               	movlw	0
 13902  002096  6FC5               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 13903  002098  0E00               	movlw	0
 13904  00209A  6FC6               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 13905                           
 13906                           ; BSR set to: 0
 13907                           ;SystemCommon.c: 133: address -= numOfByes;
 13908  00209C  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13909  00209E  5FC2               	subwf	ReadIntFromEeprom@address& (0+255),f,b
 13910                           
 13911                           ; BSR set to: 0
 13912                           ;SystemCommon.c: 135: for(uint8_t idx = 0; idx < numOfByes; idx++)
 13913  0020A0  0E00               	movlw	0
 13914  0020A2  6FC7               	movwf	ReadIntFromEeprom@idx& (0+255),b
 13915  0020A4  D06D               	goto	l1450
 13916  0020A6                     
 13917                           ; BSR set to: 0
 13918                           ;SystemCommon.c: 136: {
 13919                           ;SystemCommon.c: 137: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 13920                           
 13921                           ; BSR set to: 0
 13922  0020A6  51C7               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 13923  0020A8  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 13924  0020AA  6BB6               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 13925  0020AC  0E01               	movlw	1
 13926  0020AE  27B5               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 13927  0020B0  0E00               	movlw	0
 13928  0020B2  23B6               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13929  0020B4  1FB5               	comf	??_ReadIntFromEeprom& (0+255),f,b
 13930  0020B6  1FB6               	comf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13931  0020B8  4BB5               	infsnz	??_ReadIntFromEeprom& (0+255),f,b
 13932  0020BA  2BB6               	incf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13933  0020BC  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13934  0020BE  27B5               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 13935  0020C0  51B2               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 13936  0020C2  23B6               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13937  0020C4  90D8               	bcf	status,0,c
 13938  0020C6  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13939  0020C8  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13940  0020CA  90D8               	bcf	status,0,c
 13941  0020CC  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13942  0020CE  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13943  0020D0  90D8               	bcf	status,0,c
 13944  0020D2  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13945  0020D4  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13946  0020D6  C0B5  F020         	movff	??_ReadIntFromEeprom,___awtoft@c
 13947  0020DA  C0B6  F021         	movff	??_ReadIntFromEeprom+1,___awtoft@c+1
 13948  0020DE  EC69  F01F         	call	___awtoft	;wreg free
 13949  0020E2  C020  F0BC         	movff	?___awtoft,_ReadIntFromEeprom$3591
 13950  0020E6  C021  F0BD         	movff	?___awtoft+1,_ReadIntFromEeprom$3591+1
 13951  0020EA  C022  F0BE         	movff	?___awtoft+2,_ReadIntFromEeprom$3591+2
 13952                           
 13953                           ;SystemCommon.c: 136: {
 13954                           ;SystemCommon.c: 137: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 13955  0020EE  C0BC  F0A3         	movff	_ReadIntFromEeprom$3591,pow@y
 13956  0020F2  C0BD  F0A4         	movff	_ReadIntFromEeprom$3591+1,pow@y+1
 13957  0020F6  C0BE  F0A5         	movff	_ReadIntFromEeprom$3591+2,pow@y+2
 13958  0020FA  0E00               	movlw	0
 13959  0020FC  0100               	movlb	0	; () banked
 13960  0020FE  6FA0               	movwf	pow@x& (0+255),b
 13961  002100  0E00               	movlw	0
 13962  002102  6FA1               	movwf	(pow@x+1)& (0+255),b
 13963  002104  0E40               	movlw	64
 13964  002106  6FA2               	movwf	(pow@x+2)& (0+255),b
 13965  002108  EC30  F00E         	call	_pow	;wreg free
 13966  00210C  C0A0  F0BF         	movff	?_pow,_ReadIntFromEeprom$3592
 13967  002110  C0A1  F0C0         	movff	?_pow+1,_ReadIntFromEeprom$3592+1
 13968  002114  C0A2  F0C1         	movff	?_pow+2,_ReadIntFromEeprom$3592+2
 13969                           
 13970                           ;SystemCommon.c: 136: {
 13971                           ;SystemCommon.c: 137: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 13972  002118  C0BF  F078         	movff	_ReadIntFromEeprom$3592,___fttol@f1
 13973  00211C  C0C0  F079         	movff	_ReadIntFromEeprom$3592+1,___fttol@f1+1
 13974  002120  C0C1  F07A         	movff	_ReadIntFromEeprom$3592+2,___fttol@f1+2
 13975  002124  EC58  F012         	call	___fttol	;wreg free
 13976  002128  C078  F0B8         	movff	?___fttol,ReadIntFromEeprom@base
 13977  00212C  C079  F0B9         	movff	?___fttol+1,ReadIntFromEeprom@base+1
 13978  002130  C07A  F0BA         	movff	?___fttol+2,ReadIntFromEeprom@base+2
 13979  002134  C07B  F0BB         	movff	?___fttol+3,ReadIntFromEeprom@base+3
 13980                           
 13981                           ;SystemCommon.c: 138: retVal = retVal | EepromRead(address + idx) * base;
 13982  002138  0100               	movlb	0	; () banked
 13983  00213A  51C2               	movf	ReadIntFromEeprom@address& (0+255),w,b
 13984  00213C  25C7               	addwf	ReadIntFromEeprom@idx& (0+255),w,b
 13985  00213E  EC60  F022         	call	_EepromRead
 13986  002142  0100               	movlb	0	; () banked
 13987  002144  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 13988  002146  51B5               	movf	??_ReadIntFromEeprom& (0+255),w,b
 13989  002148  6E1A               	movwf	___lmul@multiplier,c
 13990  00214A  6A1B               	clrf	___lmul@multiplier+1,c
 13991  00214C  6A1C               	clrf	___lmul@multiplier+2,c
 13992  00214E  6A1D               	clrf	___lmul@multiplier+3,c
 13993  002150  C0B8  F01E         	movff	ReadIntFromEeprom@base,___lmul@multiplicand
 13994  002154  C0B9  F01F         	movff	ReadIntFromEeprom@base+1,___lmul@multiplicand+1
 13995  002158  C0BA  F020         	movff	ReadIntFromEeprom@base+2,___lmul@multiplicand+2
 13996  00215C  C0BB  F021         	movff	ReadIntFromEeprom@base+3,___lmul@multiplicand+3
 13997  002160  EC67  F01D         	call	___lmul	;wreg free
 13998  002164  0100               	movlb	0	; () banked
 13999  002166  51C3               	movf	ReadIntFromEeprom@retVal& (0+255),w,b
 14000  002168  101A               	iorwf	?___lmul,w,c
 14001  00216A  6FC3               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 14002  00216C  51C4               	movf	(ReadIntFromEeprom@retVal+1)& (0+255),w,b
 14003  00216E  101B               	iorwf	?___lmul+1,w,c
 14004  002170  6FC4               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 14005  002172  51C5               	movf	(ReadIntFromEeprom@retVal+2)& (0+255),w,b
 14006  002174  101C               	iorwf	?___lmul+2,w,c
 14007  002176  6FC5               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 14008  002178  51C6               	movf	(ReadIntFromEeprom@retVal+3)& (0+255),w,b
 14009  00217A  101D               	iorwf	?___lmul+3,w,c
 14010  00217C  6FC6               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 14011                           
 14012                           ; BSR set to: 0
 14013  00217E  2BC7               	incf	ReadIntFromEeprom@idx& (0+255),f,b
 14014  002180                     l1450:
 14015                           
 14016                           ; BSR set to: 0
 14017                           
 14018                           ; BSR set to: 0
 14019  002180  51C7               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 14020  002182  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 14021  002184  6BB6               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 14022  002186  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 14023  002188  5DB5               	subwf	??_ReadIntFromEeprom& (0+255),w,b
 14024  00218A  51B6               	movf	(??_ReadIntFromEeprom+1)& (0+255),w,b
 14025  00218C  0A80               	xorlw	128
 14026  00218E  6FB7               	movwf	(??_ReadIntFromEeprom+2)& (0+255),b
 14027  002190  51B2               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 14028  002192  0A80               	xorlw	128
 14029  002194  59B7               	subwfb	(??_ReadIntFromEeprom+2)& (0+255),w,b
 14030  002196  A0D8               	btfss	status,0,c
 14031  002198  D786               	goto	l1451
 14032                           
 14033                           ; BSR set to: 0
 14034                           ;SystemCommon.c: 139: }
 14035                           ;SystemCommon.c: 140: return retVal;
 14036  00219A  C0C3  F0B1         	movff	ReadIntFromEeprom@retVal,?_ReadIntFromEeprom
 14037  00219E  C0C4  F0B2         	movff	ReadIntFromEeprom@retVal+1,?_ReadIntFromEeprom+1
 14038  0021A2  C0C5  F0B3         	movff	ReadIntFromEeprom@retVal+2,?_ReadIntFromEeprom+2
 14039  0021A6  C0C6  F0B4         	movff	ReadIntFromEeprom@retVal+3,?_ReadIntFromEeprom+3
 14040                           
 14041                           ; BSR set to: 0
 14042  0021AA  0012               	return		;funcret
 14043  0021AC                     __end_of_ReadIntFromEeprom:
 14044                           	opt stack 0
 14045                           tosu	equ	0xFFF
 14046                           tosh	equ	0xFFE
 14047                           tosl	equ	0xFFD
 14048                           pclath	equ	0xFFA
 14049                           tblptru	equ	0xFF8
 14050                           tblptrh	equ	0xFF7
 14051                           tblptrl	equ	0xFF6
 14052                           tablat	equ	0xFF5
 14053                           prodh	equ	0xFF4
 14054                           prodl	equ	0xFF3
 14055                           intcon	equ	0xFF2
 14056                           intcon2	equ	0xFF1
 14057                           postinc0	equ	0xFEE
 14058                           plusw0	equ	0xFEB
 14059                           wreg	equ	0xFE8
 14060                           indf1	equ	0xFE7
 14061                           postdec1	equ	0xFE5
 14062                           fsr1h	equ	0xFE2
 14063                           fsr1l	equ	0xFE1
 14064                           indf2	equ	0xFDF
 14065                           postinc2	equ	0xFDE
 14066                           postdec2	equ	0xFDD
 14067                           plusw2	equ	0xFDB
 14068                           fsr2h	equ	0xFDA
 14069                           fsr2l	equ	0xFD9
 14070                           status	equ	0xFD8
 14071                           
 14072 ;; *************** function ___lmul *****************
 14073 ;; Defined at:
 14074 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 14075 ;; Parameters:    Size  Location     Type
 14076 ;;  multiplier      4   25[COMRAM] unsigned long 
 14077 ;;  multiplicand    4   29[COMRAM] unsigned long 
 14078 ;; Auto vars:     Size  Location     Type
 14079 ;;  product         4   33[COMRAM] unsigned long 
 14080 ;; Return value:  Size  Location     Type
 14081 ;;                  4   25[COMRAM] unsigned long 
 14082 ;; Registers used:
 14083 ;;		wreg, status,2, status,0
 14084 ;; Tracked objects:
 14085 ;;		On entry : 0/0
 14086 ;;		On exit  : 0/0
 14087 ;;		Unchanged: 0/0
 14088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14089 ;;      Params:         8       0       0       0       0       0       0
 14090 ;;      Locals:         4       0       0       0       0       0       0
 14091 ;;      Temps:          0       0       0       0       0       0       0
 14092 ;;      Totals:        12       0       0       0       0       0       0
 14093 ;;Total ram usage:       12 bytes
 14094 ;; Hardware stack levels used:    1
 14095 ;; Hardware stack levels required when called:    4
 14096 ;; This function calls:
 14097 ;;		Nothing
 14098 ;; This function is called by:
 14099 ;;		_ReadIntFromEeprom
 14100 ;;		_strtol
 14101 ;; This function uses a non-reentrant model
 14102 ;;
 14103                           
 14104                           	psect	text79
 14105  003ACE                     __ptext79:
 14106                           	opt stack 0
 14107  003ACE                     ___lmul:
 14108                           	opt stack 21
 14109                           
 14110                           ; BSR set to: 0
 14111                           ;incstack = 0
 14112  003ACE  0E00               	movlw	0
 14113  003AD0  6E22               	movwf	___lmul@product,c
 14114  003AD2  0E00               	movlw	0
 14115  003AD4  6E23               	movwf	___lmul@product+1,c
 14116  003AD6  0E00               	movlw	0
 14117  003AD8  6E24               	movwf	___lmul@product+2,c
 14118  003ADA  0E00               	movlw	0
 14119  003ADC  6E25               	movwf	___lmul@product+3,c
 14120  003ADE  A01A               	btfss	___lmul@multiplier,0,c
 14121  003AE0  D008               	goto	l1619
 14122  003AE2  501E               	movf	___lmul@multiplicand,w,c
 14123  003AE4  2622               	addwf	___lmul@product,f,c
 14124  003AE6  501F               	movf	___lmul@multiplicand+1,w,c
 14125  003AE8  2223               	addwfc	___lmul@product+1,f,c
 14126  003AEA  5020               	movf	___lmul@multiplicand+2,w,c
 14127  003AEC  2224               	addwfc	___lmul@product+2,f,c
 14128  003AEE  5021               	movf	___lmul@multiplicand+3,w,c
 14129  003AF0  2225               	addwfc	___lmul@product+3,f,c
 14130  003AF2                     l1619:
 14131  003AF2  90D8               	bcf	status,0,c
 14132  003AF4  361E               	rlcf	___lmul@multiplicand,f,c
 14133  003AF6  361F               	rlcf	___lmul@multiplicand+1,f,c
 14134  003AF8  3620               	rlcf	___lmul@multiplicand+2,f,c
 14135  003AFA  3621               	rlcf	___lmul@multiplicand+3,f,c
 14136  003AFC  90D8               	bcf	status,0,c
 14137  003AFE  321D               	rrcf	___lmul@multiplier+3,f,c
 14138  003B00  321C               	rrcf	___lmul@multiplier+2,f,c
 14139  003B02  321B               	rrcf	___lmul@multiplier+1,f,c
 14140  003B04  321A               	rrcf	___lmul@multiplier,f,c
 14141  003B06  501A               	movf	___lmul@multiplier,w,c
 14142  003B08  101B               	iorwf	___lmul@multiplier+1,w,c
 14143  003B0A  101C               	iorwf	___lmul@multiplier+2,w,c
 14144  003B0C  101D               	iorwf	___lmul@multiplier+3,w,c
 14145  003B0E  A4D8               	btfss	status,2,c
 14146  003B10  D7E6               	goto	l1618
 14147  003B12  C022  F01A         	movff	___lmul@product,?___lmul
 14148  003B16  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 14149  003B1A  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 14150  003B1E  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 14151  003B22  0012               	return		;funcret
 14152  003B24                     __end_of___lmul:
 14153                           	opt stack 0
 14154                           tosu	equ	0xFFF
 14155                           tosh	equ	0xFFE
 14156                           tosl	equ	0xFFD
 14157                           pclath	equ	0xFFA
 14158                           tblptru	equ	0xFF8
 14159                           tblptrh	equ	0xFF7
 14160                           tblptrl	equ	0xFF6
 14161                           tablat	equ	0xFF5
 14162                           prodh	equ	0xFF4
 14163                           prodl	equ	0xFF3
 14164                           intcon	equ	0xFF2
 14165                           intcon2	equ	0xFF1
 14166                           postinc0	equ	0xFEE
 14167                           plusw0	equ	0xFEB
 14168                           wreg	equ	0xFE8
 14169                           indf1	equ	0xFE7
 14170                           postdec1	equ	0xFE5
 14171                           fsr1h	equ	0xFE2
 14172                           fsr1l	equ	0xFE1
 14173                           indf2	equ	0xFDF
 14174                           postinc2	equ	0xFDE
 14175                           postdec2	equ	0xFDD
 14176                           plusw2	equ	0xFDB
 14177                           fsr2h	equ	0xFDA
 14178                           fsr2l	equ	0xFD9
 14179                           status	equ	0xFD8
 14180                           
 14181 ;; *************** function _EepromRead *****************
 14182 ;; Defined at:
 14183 ;;		line 220 in file "FlashApp.c"
 14184 ;; Parameters:    Size  Location     Type
 14185 ;;  address         1    wreg     unsigned char 
 14186 ;; Auto vars:     Size  Location     Type
 14187 ;;  address         1   24[COMRAM] unsigned char 
 14188 ;; Return value:  Size  Location     Type
 14189 ;;                  1    wreg      unsigned char 
 14190 ;; Registers used:
 14191 ;;		wreg, status,2, cstack
 14192 ;; Tracked objects:
 14193 ;;		On entry : 0/0
 14194 ;;		On exit  : 0/0
 14195 ;;		Unchanged: 0/0
 14196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14197 ;;      Params:         0       0       0       0       0       0       0
 14198 ;;      Locals:         1       0       0       0       0       0       0
 14199 ;;      Temps:          0       0       0       0       0       0       0
 14200 ;;      Totals:         1       0       0       0       0       0       0
 14201 ;;Total ram usage:        1 bytes
 14202 ;; Hardware stack levels used:    1
 14203 ;; Hardware stack levels required when called:    5
 14204 ;; This function calls:
 14205 ;;		_DATAEE_ReadByte
 14206 ;; This function is called by:
 14207 ;;		_ReadIntFromEeprom
 14208 ;; This function uses a non-reentrant model
 14209 ;;
 14210                           
 14211                           	psect	text80
 14212  0044C0                     __ptext80:
 14213                           	opt stack 0
 14214  0044C0                     _EepromRead:
 14215                           	opt stack 21
 14216                           
 14217                           ;incstack = 0
 14218                           ;EepromRead@address stored from wreg
 14219  0044C0  6E19               	movwf	EepromRead@address,c
 14220                           
 14221                           ;FlashApp.c: 222: return DATAEE_ReadByte(address);
 14222  0044C2  5019               	movf	EepromRead@address,w,c
 14223  0044C4  ECF9  F021         	call	_DATAEE_ReadByte
 14224  0044C8  0012               	return	
 14225  0044CA                     __end_of_EepromRead:
 14226                           	opt stack 0
 14227                           tosu	equ	0xFFF
 14228                           tosh	equ	0xFFE
 14229                           tosl	equ	0xFFD
 14230                           pclath	equ	0xFFA
 14231                           tblptru	equ	0xFF8
 14232                           tblptrh	equ	0xFF7
 14233                           tblptrl	equ	0xFF6
 14234                           tablat	equ	0xFF5
 14235                           prodh	equ	0xFF4
 14236                           prodl	equ	0xFF3
 14237                           intcon	equ	0xFF2
 14238                           intcon2	equ	0xFF1
 14239                           postinc0	equ	0xFEE
 14240                           plusw0	equ	0xFEB
 14241                           wreg	equ	0xFE8
 14242                           indf1	equ	0xFE7
 14243                           postdec1	equ	0xFE5
 14244                           fsr1h	equ	0xFE2
 14245                           fsr1l	equ	0xFE1
 14246                           indf2	equ	0xFDF
 14247                           postinc2	equ	0xFDE
 14248                           postdec2	equ	0xFDD
 14249                           plusw2	equ	0xFDB
 14250                           fsr2h	equ	0xFDA
 14251                           fsr2l	equ	0xFD9
 14252                           status	equ	0xFD8
 14253                           
 14254 ;; *************** function _DATAEE_ReadByte *****************
 14255 ;; Defined at:
 14256 ;;		line 194 in file "mcc_generated_files/memory.c"
 14257 ;; Parameters:    Size  Location     Type
 14258 ;;  bAdd            1    wreg     unsigned char 
 14259 ;; Auto vars:     Size  Location     Type
 14260 ;;  bAdd            1   23[COMRAM] unsigned char 
 14261 ;; Return value:  Size  Location     Type
 14262 ;;                  1    wreg      unsigned char 
 14263 ;; Registers used:
 14264 ;;		wreg, status,2
 14265 ;; Tracked objects:
 14266 ;;		On entry : 0/0
 14267 ;;		On exit  : 0/0
 14268 ;;		Unchanged: 0/0
 14269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14270 ;;      Params:         0       0       0       0       0       0       0
 14271 ;;      Locals:         1       0       0       0       0       0       0
 14272 ;;      Temps:          0       0       0       0       0       0       0
 14273 ;;      Totals:         1       0       0       0       0       0       0
 14274 ;;Total ram usage:        1 bytes
 14275 ;; Hardware stack levels used:    1
 14276 ;; Hardware stack levels required when called:    4
 14277 ;; This function calls:
 14278 ;;		Nothing
 14279 ;; This function is called by:
 14280 ;;		_EepromRead
 14281 ;; This function uses a non-reentrant model
 14282 ;;
 14283                           
 14284                           	psect	text81
 14285  0043F2                     __ptext81:
 14286                           	opt stack 0
 14287  0043F2                     _DATAEE_ReadByte:
 14288                           	opt stack 21
 14289                           
 14290                           ;incstack = 0
 14291                           ;DATAEE_ReadByte@bAdd stored from wreg
 14292  0043F2  6E18               	movwf	DATAEE_ReadByte@bAdd,c
 14293                           
 14294                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
 14295  0043F4  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
 14296                           
 14297                           ;memory.c: 198: EECON1bits.CFGS = 0;
 14298  0043F8  9CA6               	bcf	4006,6,c	;volsfr
 14299                           
 14300                           ;memory.c: 199: EECON1bits.EEPGD = 0;
 14301  0043FA  9EA6               	bcf	4006,7,c	;volsfr
 14302                           
 14303                           ;memory.c: 200: EECON1bits.RD = 1;
 14304  0043FC  80A6               	bsf	4006,0,c	;volsfr
 14305                           
 14306                           ;memory.c: 201: __nop();
 14307  0043FE  F000               	nop	
 14308                           
 14309                           ;memory.c: 202: __nop();
 14310  004400  F000               	nop	
 14311                           
 14312                           ;memory.c: 204: return (EEDATA);
 14313  004402  50A8               	movf	4008,w,c	;volatile
 14314  004404  0012               	return	
 14315  004406                     __end_of_DATAEE_ReadByte:
 14316                           	opt stack 0
 14317                           tosu	equ	0xFFF
 14318                           tosh	equ	0xFFE
 14319                           tosl	equ	0xFFD
 14320                           pclath	equ	0xFFA
 14321                           tblptru	equ	0xFF8
 14322                           tblptrh	equ	0xFF7
 14323                           tblptrl	equ	0xFF6
 14324                           tablat	equ	0xFF5
 14325                           prodh	equ	0xFF4
 14326                           prodl	equ	0xFF3
 14327                           intcon	equ	0xFF2
 14328                           intcon2	equ	0xFF1
 14329                           postinc0	equ	0xFEE
 14330                           plusw0	equ	0xFEB
 14331                           wreg	equ	0xFE8
 14332                           indf1	equ	0xFE7
 14333                           postdec1	equ	0xFE5
 14334                           fsr1h	equ	0xFE2
 14335                           fsr1l	equ	0xFE1
 14336                           indf2	equ	0xFDF
 14337                           postinc2	equ	0xFDE
 14338                           postdec2	equ	0xFDD
 14339                           plusw2	equ	0xFDB
 14340                           fsr2h	equ	0xFDA
 14341                           fsr2l	equ	0xFD9
 14342                           status	equ	0xFD8
 14343                           
 14344 ;; *************** function _ClearMcuRunTime *****************
 14345 ;; Defined at:
 14346 ;;		line 63 in file "SystemStatus.c"
 14347 ;; Parameters:    Size  Location     Type
 14348 ;;		None
 14349 ;; Auto vars:     Size  Location     Type
 14350 ;;		None
 14351 ;; Return value:  Size  Location     Type
 14352 ;;                  1    wreg      void 
 14353 ;; Registers used:
 14354 ;;		wreg, status,2
 14355 ;; Tracked objects:
 14356 ;;		On entry : 0/0
 14357 ;;		On exit  : 0/0
 14358 ;;		Unchanged: 0/0
 14359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14360 ;;      Params:         0       0       0       0       0       0       0
 14361 ;;      Locals:         0       0       0       0       0       0       0
 14362 ;;      Temps:          0       0       0       0       0       0       0
 14363 ;;      Totals:         0       0       0       0       0       0       0
 14364 ;;Total ram usage:        0 bytes
 14365 ;; Hardware stack levels used:    1
 14366 ;; Hardware stack levels required when called:    4
 14367 ;; This function calls:
 14368 ;;		Nothing
 14369 ;; This function is called by:
 14370 ;;		_InitSystemApplicationManagers
 14371 ;; This function uses a non-reentrant model
 14372 ;;
 14373                           
 14374                           	psect	text82
 14375  004406                     __ptext82:
 14376                           	opt stack 0
 14377  004406                     _ClearMcuRunTime:
 14378                           	opt stack 25
 14379                           
 14380                           ;SystemStatus.c: 65: mcuRunTimeIn5SecTicks = 0;
 14381                           
 14382                           ;incstack = 0
 14383  004406  0E00               	movlw	0
 14384  004408  0101               	movlb	1	; () banked
 14385  00440A  6F28               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 14386  00440C  0E00               	movlw	0
 14387  00440E  6F29               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 14388  004410  0E00               	movlw	0
 14389  004412  6F2A               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 14390  004414  0E00               	movlw	0
 14391  004416  6F2B               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 14392                           
 14393                           ; BSR set to: 1
 14394  004418  0012               	return		;funcret
 14395  00441A                     __end_of_ClearMcuRunTime:
 14396                           	opt stack 0
 14397                           tosu	equ	0xFFF
 14398                           tosh	equ	0xFFE
 14399                           tosl	equ	0xFFD
 14400                           pclath	equ	0xFFA
 14401                           tblptru	equ	0xFF8
 14402                           tblptrh	equ	0xFF7
 14403                           tblptrl	equ	0xFF6
 14404                           tablat	equ	0xFF5
 14405                           prodh	equ	0xFF4
 14406                           prodl	equ	0xFF3
 14407                           intcon	equ	0xFF2
 14408                           intcon2	equ	0xFF1
 14409                           postinc0	equ	0xFEE
 14410                           plusw0	equ	0xFEB
 14411                           wreg	equ	0xFE8
 14412                           indf1	equ	0xFE7
 14413                           postdec1	equ	0xFE5
 14414                           fsr1h	equ	0xFE2
 14415                           fsr1l	equ	0xFE1
 14416                           indf2	equ	0xFDF
 14417                           postinc2	equ	0xFDE
 14418                           postdec2	equ	0xFDD
 14419                           plusw2	equ	0xFDB
 14420                           fsr2h	equ	0xFDA
 14421                           fsr2l	equ	0xFD9
 14422                           status	equ	0xFD8
 14423                           
 14424 ;; *************** function _CheckFlashPrecentage *****************
 14425 ;; Defined at:
 14426 ;;		line 210 in file "FlashApp.c"
 14427 ;; Parameters:    Size  Location     Type
 14428 ;;		None
 14429 ;; Auto vars:     Size  Location     Type
 14430 ;;  precentage      3   28[BANK0 ] void 
 14431 ;; Return value:  Size  Location     Type
 14432 ;;                  1    wreg      unsigned char 
 14433 ;; Registers used:
 14434 ;;		wreg, status,2, status,0, cstack
 14435 ;; Tracked objects:
 14436 ;;		On entry : 0/0
 14437 ;;		On exit  : 0/0
 14438 ;;		Unchanged: 0/0
 14439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14440 ;;      Params:         0       0       0       0       0       0       0
 14441 ;;      Locals:         0       3       0       0       0       0       0
 14442 ;;      Temps:          0       4       0       0       0       0       0
 14443 ;;      Totals:         0       7       0       0       0       0       0
 14444 ;;Total ram usage:        7 bytes
 14445 ;; Hardware stack levels used:    1
 14446 ;; Hardware stack levels required when called:    6
 14447 ;; This function calls:
 14448 ;;		___ftdiv
 14449 ;;		___ftge
 14450 ;;		___ftmul
 14451 ;;		___lltoft
 14452 ;; This function is called by:
 14453 ;;		_main
 14454 ;; This function uses a non-reentrant model
 14455 ;;
 14456                           
 14457                           	psect	text83
 14458  002E3A                     __ptext83:
 14459                           	opt stack 0
 14460  002E3A                     _CheckFlashPrecentage:
 14461                           	opt stack 24
 14462                           
 14463                           ;FlashApp.c: 212: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
 14464                           
 14465                           ; BSR set to: 1
 14466                           ;incstack = 0
 14467  002E3A  0EE0               	movlw	224
 14468  002E3C  6E2C               	movwf	___ftdiv@f2,c
 14469  002E3E  0EFF               	movlw	255
 14470  002E40  6E2D               	movwf	___ftdiv@f2+1,c
 14471  002E42  0E46               	movlw	70
 14472  002E44  6E2E               	movwf	___ftdiv@f2+2,c
 14473  002E46  C040  F078         	movff	_writeAddress,??_CheckFlashPrecentage
 14474  002E4A  C041  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
 14475  002E4E  C042  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
 14476  002E52  C043  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
 14477  002E56  0100               	movlb	0	; () banked
 14478  002E58  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
 14479  002E5A  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
 14480  002E5C  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
 14481  002E5E  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
 14482  002E60  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
 14483  002E62  0E00               	movlw	0
 14484  002E64  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
 14485  002E66  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
 14486  002E68  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
 14487  002E6A  0EF0               	movlw	240
 14488  002E6C  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
 14489  002E6E  6E20               	movwf	___lltoft@c,c
 14490  002E70  0E7F               	movlw	127
 14491  002E72  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
 14492  002E74  6E21               	movwf	___lltoft@c+1,c
 14493  002E76  0E00               	movlw	0
 14494  002E78  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
 14495  002E7A  6E22               	movwf	___lltoft@c+2,c
 14496  002E7C  0E00               	movlw	0
 14497  002E7E  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
 14498  002E80  6E23               	movwf	___lltoft@c+3,c
 14499  002E82  EC8B  F01C         	call	___lltoft	;wreg free
 14500  002E86  C020  F029         	movff	?___lltoft,___ftdiv@f1
 14501  002E8A  C021  F02A         	movff	?___lltoft+1,___ftdiv@f1+1
 14502  002E8E  C022  F02B         	movff	?___lltoft+2,___ftdiv@f1+2
 14503  002E92  EC4F  F013         	call	___ftdiv	;wreg free
 14504  002E96  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14505  002E9A  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14506  002E9E  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14507  002EA2  0E00               	movlw	0
 14508  002EA4  0100               	movlb	0	; () banked
 14509  002EA6  6F6C               	movwf	___ftmul@f2& (0+255),b
 14510  002EA8  0EC8               	movlw	200
 14511  002EAA  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14512  002EAC  0E42               	movlw	66
 14513  002EAE  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14514  002EB0  ECD4  F012         	call	___ftmul	;wreg free
 14515  002EB4  C069  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
 14516  002EB8  C06A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
 14517  002EBC  C06B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
 14518                           
 14519                           ;FlashApp.c: 213: return (precentage > 75) ? 1 : 0;
 14520  002EC0  0E00               	movlw	0
 14521  002EC2  6E18               	movwf	___ftge@ff1,c
 14522  002EC4  0E96               	movlw	150
 14523  002EC6  6E19               	movwf	___ftge@ff1+1,c
 14524  002EC8  0E42               	movlw	66
 14525  002ECA  6E1A               	movwf	___ftge@ff1+2,c
 14526  002ECC  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
 14527  002ED0  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
 14528  002ED4  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
 14529  002ED8  ECA9  F019         	call	___ftge	;wreg free
 14530  002EDC  B0D8               	btfsc	status,0,c
 14531  002EDE  D002               	goto	u9440
 14532  002EE0  0E01               	movlw	1
 14533  002EE2  0012               	return	
 14534  002EE4                     u9440:
 14535  002EE4  0E00               	movlw	0
 14536  002EE6  0012               	return	
 14537  002EE8                     __end_of_CheckFlashPrecentage:
 14538                           	opt stack 0
 14539                           tosu	equ	0xFFF
 14540                           tosh	equ	0xFFE
 14541                           tosl	equ	0xFFD
 14542                           pclath	equ	0xFFA
 14543                           tblptru	equ	0xFF8
 14544                           tblptrh	equ	0xFF7
 14545                           tblptrl	equ	0xFF6
 14546                           tablat	equ	0xFF5
 14547                           prodh	equ	0xFF4
 14548                           prodl	equ	0xFF3
 14549                           intcon	equ	0xFF2
 14550                           intcon2	equ	0xFF1
 14551                           postinc0	equ	0xFEE
 14552                           plusw0	equ	0xFEB
 14553                           wreg	equ	0xFE8
 14554                           indf1	equ	0xFE7
 14555                           postdec1	equ	0xFE5
 14556                           fsr1h	equ	0xFE2
 14557                           fsr1l	equ	0xFE1
 14558                           indf2	equ	0xFDF
 14559                           postinc2	equ	0xFDE
 14560                           postdec2	equ	0xFDD
 14561                           plusw2	equ	0xFDB
 14562                           fsr2h	equ	0xFDA
 14563                           fsr2l	equ	0xFD9
 14564                           status	equ	0xFD8
 14565                           
 14566 ;; *************** function _BlinkOkLeds *****************
 14567 ;; Defined at:
 14568 ;;		line 24 in file "LedsApp.c"
 14569 ;; Parameters:    Size  Location     Type
 14570 ;;  state           1    wreg     enum E7593
 14571 ;; Auto vars:     Size  Location     Type
 14572 ;;  state           1   26[COMRAM] enum E7593
 14573 ;;  idx             2   27[COMRAM] int 
 14574 ;; Return value:  Size  Location     Type
 14575 ;;                  1    wreg      void 
 14576 ;; Registers used:
 14577 ;;		wreg, status,2, status,0
 14578 ;; Tracked objects:
 14579 ;;		On entry : 0/0
 14580 ;;		On exit  : 0/0
 14581 ;;		Unchanged: 0/0
 14582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14583 ;;      Params:         0       0       0       0       0       0       0
 14584 ;;      Locals:         3       0       0       0       0       0       0
 14585 ;;      Temps:          3       0       0       0       0       0       0
 14586 ;;      Totals:         6       0       0       0       0       0       0
 14587 ;;Total ram usage:        6 bytes
 14588 ;; Hardware stack levels used:    1
 14589 ;; Hardware stack levels required when called:    4
 14590 ;; This function calls:
 14591 ;;		Nothing
 14592 ;; This function is called by:
 14593 ;;		_main
 14594 ;; This function uses a non-reentrant model
 14595 ;;
 14596                           
 14597                           	psect	text84
 14598  00385C                     __ptext84:
 14599                           	opt stack 0
 14600  00385C                     _BlinkOkLeds:
 14601                           	opt stack 26
 14602                           
 14603                           ;incstack = 0
 14604                           ;BlinkOkLeds@state stored from wreg
 14605  00385C  6E1B               	movwf	BlinkOkLeds@state,c
 14606                           
 14607                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 14608  00385E  0E00               	movlw	0
 14609  003860  6E1D               	movwf	BlinkOkLeds@idx+1,c
 14610  003862  0E00               	movlw	0
 14611  003864  6E1C               	movwf	BlinkOkLeds@idx,c
 14612  003866                     l6661:
 14613  003866  501B               	movf	BlinkOkLeds@state,w,c
 14614  003868  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14615  00386A  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 14616  00386C  5018               	movf	??_BlinkOkLeds,w,c
 14617  00386E  5C1C               	subwf	BlinkOkLeds@idx,w,c
 14618  003870  501D               	movf	BlinkOkLeds@idx+1,w,c
 14619  003872  0A80               	xorlw	128
 14620  003874  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 14621  003876  5019               	movf	??_BlinkOkLeds+1,w,c
 14622  003878  0A80               	xorlw	128
 14623  00387A  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 14624  00387C  B0D8               	btfsc	status,0,c
 14625  00387E  0012               	return	
 14626                           
 14627                           ;LedsApp.c: 27: {
 14628                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 14629  003880  908B               	bcf	3979,0,c	;volatile
 14630                           
 14631                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 14632  003882  0E02               	movlw	2
 14633  003884  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 14634  003886  0E04               	movlw	4
 14635  003888  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14636  00388A  0EBA               	movlw	186
 14637  00388C                     u9647:
 14638  00388C  2EE8               	decfsz	wreg,f,c
 14639  00388E  D7FE               	bra	u9647
 14640  003890  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 14641  003892  D7FC               	bra	u9647
 14642  003894  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 14643  003896  D7FA               	bra	u9647
 14644  003898  D000               	nop2	
 14645                           
 14646                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 14647  00389A  808B               	bsf	3979,0,c	;volatile
 14648                           
 14649                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 14650  00389C  0E02               	movlw	2
 14651  00389E  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 14652  0038A0  0E04               	movlw	4
 14653  0038A2  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14654  0038A4  0EBA               	movlw	186
 14655  0038A6                     u9657:
 14656  0038A6  2EE8               	decfsz	wreg,f,c
 14657  0038A8  D7FE               	bra	u9657
 14658  0038AA  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 14659  0038AC  D7FC               	bra	u9657
 14660  0038AE  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 14661  0038B0  D7FA               	bra	u9657
 14662  0038B2  D000               	nop2	
 14663  0038B4  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 14664  0038B6  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 14665  0038B8  D7D6               	goto	l6661
 14666  0038BA                     __end_of_BlinkOkLeds:
 14667                           	opt stack 0
 14668                           tosu	equ	0xFFF
 14669                           tosh	equ	0xFFE
 14670                           tosl	equ	0xFFD
 14671                           pclath	equ	0xFFA
 14672                           tblptru	equ	0xFF8
 14673                           tblptrh	equ	0xFF7
 14674                           tblptrl	equ	0xFF6
 14675                           tablat	equ	0xFF5
 14676                           prodh	equ	0xFF4
 14677                           prodl	equ	0xFF3
 14678                           intcon	equ	0xFF2
 14679                           intcon2	equ	0xFF1
 14680                           postinc0	equ	0xFEE
 14681                           plusw0	equ	0xFEB
 14682                           wreg	equ	0xFE8
 14683                           indf1	equ	0xFE7
 14684                           postdec1	equ	0xFE5
 14685                           fsr1h	equ	0xFE2
 14686                           fsr1l	equ	0xFE1
 14687                           indf2	equ	0xFDF
 14688                           postinc2	equ	0xFDE
 14689                           postdec2	equ	0xFDD
 14690                           plusw2	equ	0xFDB
 14691                           fsr2h	equ	0xFDA
 14692                           fsr2l	equ	0xFD9
 14693                           status	equ	0xFD8
 14694                           
 14695 ;; *************** function _AdcConvert *****************
 14696 ;; Defined at:
 14697 ;;		line 43 in file "AdcApp.c"
 14698 ;; Parameters:    Size  Location     Type
 14699 ;;		None
 14700 ;; Auto vars:     Size  Location     Type
 14701 ;;  _adcResult      2   83[BANK0 ] unsigned int 
 14702 ;;  _adcResult      2   89[BANK0 ] unsigned int 
 14703 ;;  ldTxSate        2   87[BANK0 ] unsigned int 
 14704 ;;  ldRxSate        2   85[BANK0 ] unsigned int 
 14705 ;;  adcRes          2   94[BANK0 ] unsigned int 
 14706 ;;  idx             1   96[BANK0 ] unsigned char 
 14707 ;; Return value:  Size  Location     Type
 14708 ;;                  1    wreg      void 
 14709 ;; Registers used:
 14710 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14711 ;; Tracked objects:
 14712 ;;		On entry : 0/0
 14713 ;;		On exit  : 0/0
 14714 ;;		Unchanged: 0/0
 14715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14716 ;;      Params:         0       0       0       0       0       0       0
 14717 ;;      Locals:         0      14       0       0       0       0       0
 14718 ;;      Temps:          0       2       0       0       0       0       0
 14719 ;;      Totals:         0      16       0       0       0       0       0
 14720 ;;Total ram usage:       16 bytes
 14721 ;; Hardware stack levels used:    1
 14722 ;; Hardware stack levels required when called:    9
 14723 ;; This function calls:
 14724 ;;		_ADC_GetConversion
 14725 ;;		_FlashSampleWrite
 14726 ;;		_GetUint16FromBitArray
 14727 ;;		___ftdiv
 14728 ;;		___ftmul
 14729 ;;		___fttol
 14730 ;;		___lwtoft
 14731 ;;		_pow
 14732 ;; This function is called by:
 14733 ;;		_main
 14734 ;; This function uses a non-reentrant model
 14735 ;;
 14736                           
 14737                           	psect	text85
 14738  00111E                     __ptext85:
 14739                           	opt stack 0
 14740  00111E                     _AdcConvert:
 14741                           	opt stack 21
 14742                           
 14743                           ;AdcApp.c: 48: uint16_t adcRes = 0;
 14744                           
 14745                           ;incstack = 0
 14746  00111E  0E00               	movlw	0
 14747  001120  0100               	movlb	0	; () banked
 14748  001122  6FBF               	movwf	(AdcConvert@adcRes+1)& (0+255),b
 14749  001124  0E00               	movlw	0
 14750  001126  6FBE               	movwf	AdcConvert@adcRes& (0+255),b
 14751                           
 14752                           ;AdcApp.c: 49: uint8_t idx = 0;
 14753  001128  0E00               	movlw	0
 14754  00112A  6FC0               	movwf	AdcConvert@idx& (0+255),b
 14755                           
 14756                           ;AdcApp.c: 51: if (adcSampleMode == CIRCULAR)
 14757  00112C  503B               	movf	_adcSampleMode,w,c
 14758  00112E  A4D8               	btfss	status,2,c
 14759  001130  D09A               	goto	l126
 14760                           
 14761                           ; BSR set to: 0
 14762                           ;AdcApp.c: 52: {
 14763                           ;AdcApp.c: 53: for(idx = 0; idx < (9); idx++)
 14764  001132  0E00               	movlw	0
 14765  001134  6FC0               	movwf	AdcConvert@idx& (0+255),b
 14766  001136                     l8767:
 14767                           
 14768                           ; BSR set to: 0
 14769  001136  0E08               	movlw	8
 14770  001138  65C0               	cpfsgt	AdcConvert@idx& (0+255),b
 14771  00113A  D001               	goto	l127
 14772  00113C  D06D               	goto	u9300
 14773  00113E                     l127:
 14774                           
 14775                           ; BSR set to: 0
 14776                           ;AdcApp.c: 54: {
 14777                           ;AdcApp.c: 55: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
 14778                           
 14779                           ; BSR set to: 0
 14780  00113E  51C0               	movf	AdcConvert@idx& (0+255),w,b
 14781  001140  0D01               	mullw	1
 14782  001142  0E42               	movlw	low _channelArr
 14783  001144  24F3               	addwf	prodl,w,c
 14784  001146  6EF6               	movwf	tblptrl,c
 14785  001148  0E06               	movlw	high _channelArr
 14786  00114A  20F4               	addwfc	prodh,w,c
 14787  00114C  6EF7               	movwf	tblptrh,c
 14788  00114E                     	if	0	;There are less than 3 active tblptr bytes
 14789  00114E                     	endif
 14790  00114E  0008               	tblrd		*
 14791  001150  50F5               	movf	tablat,w,c
 14792  001152  EC55  F020         	call	_ADC_GetConversion
 14793  001156  C018  F0B3         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
 14794  00115A  C019  F0B4         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
 14795                           
 14796                           ;AdcApp.c: 56: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14797  00115E  0E00               	movlw	0
 14798  001160  0100               	movlb	0	; () banked
 14799  001162  6FA3               	movwf	pow@y& (0+255),b
 14800  001164  0E20               	movlw	32
 14801  001166  6FA4               	movwf	(pow@y+1)& (0+255),b
 14802  001168  0E41               	movlw	65
 14803  00116A  6FA5               	movwf	(pow@y+2)& (0+255),b
 14804  00116C  0E00               	movlw	0
 14805  00116E  6FA0               	movwf	pow@x& (0+255),b
 14806  001170  0E00               	movlw	0
 14807  001172  6FA1               	movwf	(pow@x+1)& (0+255),b
 14808  001174  0E40               	movlw	64
 14809  001176  6FA2               	movwf	(pow@x+2)& (0+255),b
 14810  001178  EC30  F00E         	call	_pow	;wreg free
 14811  00117C  C0A0  F0BB         	movff	?_pow,_AdcConvert$3590
 14812  001180  C0A1  F0BC         	movff	?_pow+1,_AdcConvert$3590+1
 14813  001184  C0A2  F0BD         	movff	?_pow+2,_AdcConvert$3590+2
 14814                           
 14815                           ;AdcApp.c: 56: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14816  001188  0EC0               	movlw	192
 14817  00118A  0100               	movlb	0	; () banked
 14818  00118C  6F6C               	movwf	___ftmul@f2& (0+255),b
 14819  00118E  0E50               	movlw	80
 14820  001190  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14821  001192  0E45               	movlw	69
 14822  001194  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14823  001196  C0BB  F02C         	movff	_AdcConvert$3590,___ftdiv@f2
 14824  00119A  C0BC  F02D         	movff	_AdcConvert$3590+1,___ftdiv@f2+1
 14825  00119E  C0BD  F02E         	movff	_AdcConvert$3590+2,___ftdiv@f2+2
 14826  0011A2  C0B3  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
 14827  0011A6  C0B4  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
 14828  0011AA  EC33  F021         	call	___lwtoft	;wreg free
 14829  0011AE  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 14830  0011B2  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 14831  0011B6  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 14832  0011BA  EC4F  F013         	call	___ftdiv	;wreg free
 14833  0011BE  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14834  0011C2  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14835  0011C6  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14836  0011CA  ECD4  F012         	call	___ftmul	;wreg free
 14837  0011CE  C069  F078         	movff	?___ftmul,___fttol@f1
 14838  0011D2  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 14839  0011D6  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 14840  0011DA  EC58  F012         	call	___fttol	;wreg free
 14841  0011DE  C078  F0BE         	movff	?___fttol,AdcConvert@adcRes
 14842  0011E2  C079  F0BF         	movff	?___fttol+1,AdcConvert@adcRes+1
 14843                           
 14844                           ;AdcApp.c: 57: FlashSampleWrite(adcRes, idx + 1);
 14845  0011E6  C0BE  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 14846  0011EA  C0BF  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 14847  0011EE  0100               	movlb	0	; () banked
 14848  0011F0  29C0               	incf	AdcConvert@idx& (0+255),w,b
 14849  0011F2  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14850  0011F4  EC5C  F011         	call	_FlashSampleWrite	;wreg free
 14851                           
 14852                           ;AdcApp.c: 58: _delay((unsigned long)((250)*(8000000/4000.0)));
 14853  0011F8  0E03               	movlw	3
 14854  0011FA  0100               	movlb	0	; () banked
 14855  0011FC  6FB2               	movwf	(??_AdcConvert+1)& (0+255),b
 14856  0011FE  0E8A               	movlw	138
 14857  001200  6FB1               	movwf	??_AdcConvert& (0+255),b
 14858  001202  0E55               	movlw	85
 14859  001204                     u9667:
 14860  001204  2EE8               	decfsz	wreg,f,c
 14861  001206  D7FE               	bra	u9667
 14862  001208  2FB1               	decfsz	??_AdcConvert& (0+255),f,b
 14863  00120A  D7FC               	bra	u9667
 14864  00120C  2FB2               	decfsz	(??_AdcConvert+1)& (0+255),f,b
 14865  00120E  D7FA               	bra	u9667
 14866  001210  D000               	nop2	
 14867  001212  0100               	movlb	0	; () banked
 14868  001214  2BC0               	incf	AdcConvert@idx& (0+255),f,b
 14869  001216  D78F               	goto	l8767
 14870  001218                     u9300:
 14871                           
 14872                           ; BSR set to: 0
 14873                           ;AdcApp.c: 59: }
 14874                           ;AdcApp.c: 62: uint16_t ldRxSate = GetUint16FromBitArray(synthLdRxArray);
 14875                           
 14876                           ; BSR set to: 0
 14877  001218  0EAA               	movlw	low _synthLdRxArray
 14878  00121A  6E18               	movwf	GetUint16FromBitArray@bitarray,c
 14879  00121C  0E01               	movlw	high _synthLdRxArray
 14880  00121E  6E19               	movwf	GetUint16FromBitArray@bitarray+1,c
 14881  001220  EC92  F01D         	call	_GetUint16FromBitArray	;wreg free
 14882  001224  C018  F0B5         	movff	?_GetUint16FromBitArray,AdcConvert@ldRxSate
 14883  001228  C019  F0B6         	movff	?_GetUint16FromBitArray+1,AdcConvert@ldRxSate+1
 14884                           
 14885                           ;AdcApp.c: 63: FlashSampleWrite(ldRxSate, idx + 1);
 14886  00122C  C0B5  F02D         	movff	AdcConvert@ldRxSate,FlashSampleWrite@sampleData
 14887  001230  C0B6  F02E         	movff	AdcConvert@ldRxSate+1,FlashSampleWrite@sampleData+1
 14888  001234  0100               	movlb	0	; () banked
 14889  001236  29C0               	incf	AdcConvert@idx& (0+255),w,b
 14890  001238  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14891  00123A  EC5C  F011         	call	_FlashSampleWrite	;wreg free
 14892                           
 14893                           ;AdcApp.c: 64: uint16_t ldTxSate = GetUint16FromBitArray(synthLdTxArray);
 14894  00123E  0E9C               	movlw	low _synthLdTxArray
 14895  001240  6E18               	movwf	GetUint16FromBitArray@bitarray,c
 14896  001242  0E01               	movlw	high _synthLdTxArray
 14897  001244  6E19               	movwf	GetUint16FromBitArray@bitarray+1,c
 14898  001246  EC92  F01D         	call	_GetUint16FromBitArray	;wreg free
 14899  00124A  C018  F0B7         	movff	?_GetUint16FromBitArray,AdcConvert@ldTxSate
 14900  00124E  C019  F0B8         	movff	?_GetUint16FromBitArray+1,AdcConvert@ldTxSate+1
 14901                           
 14902                           ;AdcApp.c: 65: FlashSampleWrite(ldTxSate, idx + 1);
 14903  001252  C0B7  F02D         	movff	AdcConvert@ldTxSate,FlashSampleWrite@sampleData
 14904  001256  C0B8  F02E         	movff	AdcConvert@ldTxSate+1,FlashSampleWrite@sampleData+1
 14905  00125A  0100               	movlb	0	; () banked
 14906  00125C  29C0               	incf	AdcConvert@idx& (0+255),w,b
 14907  00125E  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14908  001260  EC5C  F011         	call	_FlashSampleWrite	;wreg free
 14909                           
 14910                           ;AdcApp.c: 67: }
 14911  001264  0012               	return	
 14912  001266                     l126:
 14913                           
 14914                           ;AdcApp.c: 68: else if (adcSampleMode == SINGLE_CHANNEL)
 14915  001266  043B               	decf	_adcSampleMode,w,c
 14916  001268  A4D8               	btfss	status,2,c
 14917  00126A  0012               	return	
 14918                           
 14919                           ;AdcApp.c: 69: {
 14920                           ;AdcApp.c: 70: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
 14921  00126C  0100               	movlb	0	; () banked
 14922  00126E  51EF               	movf	_channel& (0+255),w,b
 14923  001270  0D01               	mullw	1
 14924  001272  0E42               	movlw	low _channelArr
 14925  001274  24F3               	addwf	prodl,w,c
 14926  001276  6EF6               	movwf	tblptrl,c
 14927  001278  0E06               	movlw	high _channelArr
 14928  00127A  20F4               	addwfc	prodh,w,c
 14929  00127C  6EF7               	movwf	tblptrh,c
 14930  00127E                     	if	0	;There are less than 3 active tblptr bytes
 14931  00127E                     	endif
 14932  00127E  0008               	tblrd		*
 14933  001280  50F5               	movf	tablat,w,c
 14934  001282  EC55  F020         	call	_ADC_GetConversion
 14935  001286  C018  F0B9         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_347
 14936  00128A  C019  F0BA         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_347+1
 14937                           
 14938                           ;AdcApp.c: 71: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14939  00128E  0E00               	movlw	0
 14940  001290  0100               	movlb	0	; () banked
 14941  001292  6FA3               	movwf	pow@y& (0+255),b
 14942  001294  0E20               	movlw	32
 14943  001296  6FA4               	movwf	(pow@y+1)& (0+255),b
 14944  001298  0E41               	movlw	65
 14945  00129A  6FA5               	movwf	(pow@y+2)& (0+255),b
 14946  00129C  0E00               	movlw	0
 14947  00129E  6FA0               	movwf	pow@x& (0+255),b
 14948  0012A0  0E00               	movlw	0
 14949  0012A2  6FA1               	movwf	(pow@x+1)& (0+255),b
 14950  0012A4  0E40               	movlw	64
 14951  0012A6  6FA2               	movwf	(pow@x+2)& (0+255),b
 14952  0012A8  EC30  F00E         	call	_pow	;wreg free
 14953  0012AC  C0A0  F0BB         	movff	?_pow,_AdcConvert$3590
 14954  0012B0  C0A1  F0BC         	movff	?_pow+1,_AdcConvert$3590+1
 14955  0012B4  C0A2  F0BD         	movff	?_pow+2,_AdcConvert$3590+2
 14956                           
 14957                           ;AdcApp.c: 71: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14958  0012B8  0EC0               	movlw	192
 14959  0012BA  0100               	movlb	0	; () banked
 14960  0012BC  6F6C               	movwf	___ftmul@f2& (0+255),b
 14961  0012BE  0E50               	movlw	80
 14962  0012C0  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14963  0012C2  0E45               	movlw	69
 14964  0012C4  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14965  0012C6  C0BB  F02C         	movff	_AdcConvert$3590,___ftdiv@f2
 14966  0012CA  C0BC  F02D         	movff	_AdcConvert$3590+1,___ftdiv@f2+1
 14967  0012CE  C0BD  F02E         	movff	_AdcConvert$3590+2,___ftdiv@f2+2
 14968  0012D2  C0B9  F020         	movff	AdcConvert@_adcResult_347,___lwtoft@c
 14969  0012D6  C0BA  F021         	movff	AdcConvert@_adcResult_347+1,___lwtoft@c+1
 14970  0012DA  EC33  F021         	call	___lwtoft	;wreg free
 14971  0012DE  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 14972  0012E2  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 14973  0012E6  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 14974  0012EA  EC4F  F013         	call	___ftdiv	;wreg free
 14975  0012EE  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14976  0012F2  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14977  0012F6  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14978  0012FA  ECD4  F012         	call	___ftmul	;wreg free
 14979  0012FE  C069  F078         	movff	?___ftmul,___fttol@f1
 14980  001302  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 14981  001306  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 14982  00130A  EC58  F012         	call	___fttol	;wreg free
 14983  00130E  C078  F0BE         	movff	?___fttol,AdcConvert@adcRes
 14984  001312  C079  F0BF         	movff	?___fttol+1,AdcConvert@adcRes+1
 14985                           
 14986                           ;AdcApp.c: 72: FlashSampleWrite(adcRes, 1);
 14987  001316  C0BE  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 14988  00131A  C0BF  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 14989  00131E  0E01               	movlw	1
 14990  001320  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14991  001322  EC5C  F011         	call	_FlashSampleWrite	;wreg free
 14992  001326  0012               	return	
 14993  001328                     __end_of_AdcConvert:
 14994                           	opt stack 0
 14995                           tosu	equ	0xFFF
 14996                           tosh	equ	0xFFE
 14997                           tosl	equ	0xFFD
 14998                           pclath	equ	0xFFA
 14999                           tblptru	equ	0xFF8
 15000                           tblptrh	equ	0xFF7
 15001                           tblptrl	equ	0xFF6
 15002                           tablat	equ	0xFF5
 15003                           prodh	equ	0xFF4
 15004                           prodl	equ	0xFF3
 15005                           intcon	equ	0xFF2
 15006                           intcon2	equ	0xFF1
 15007                           postinc0	equ	0xFEE
 15008                           plusw0	equ	0xFEB
 15009                           wreg	equ	0xFE8
 15010                           indf1	equ	0xFE7
 15011                           postdec1	equ	0xFE5
 15012                           fsr1h	equ	0xFE2
 15013                           fsr1l	equ	0xFE1
 15014                           indf2	equ	0xFDF
 15015                           postinc2	equ	0xFDE
 15016                           postdec2	equ	0xFDD
 15017                           plusw2	equ	0xFDB
 15018                           fsr2h	equ	0xFDA
 15019                           fsr2l	equ	0xFD9
 15020                           status	equ	0xFD8
 15021                           
 15022 ;; *************** function _pow *****************
 15023 ;; Defined at:
 15024 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 15025 ;; Parameters:    Size  Location     Type
 15026 ;;  x               3   64[BANK0 ] void 
 15027 ;;  y               3   67[BANK0 ] void 
 15028 ;; Auto vars:     Size  Location     Type
 15029 ;;  yi              4   77[BANK0 ] unsigned long 
 15030 ;;  sign            1   76[BANK0 ] unsigned char 
 15031 ;; Return value:  Size  Location     Type
 15032 ;;                  3   64[BANK0 ] unsigned char 
 15033 ;; Registers used:
 15034 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15035 ;; Tracked objects:
 15036 ;;		On entry : 0/0
 15037 ;;		On exit  : 0/0
 15038 ;;		Unchanged: 0/0
 15039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15040 ;;      Params:         0       6       0       0       0       0       0
 15041 ;;      Locals:         0      11       0       0       0       0       0
 15042 ;;      Temps:          0       0       0       0       0       0       0
 15043 ;;      Totals:         0      17       0       0       0       0       0
 15044 ;;Total ram usage:       17 bytes
 15045 ;; Hardware stack levels used:    1
 15046 ;; Hardware stack levels required when called:    8
 15047 ;; This function calls:
 15048 ;;		___ftge
 15049 ;;		___ftmul
 15050 ;;		___ftneg
 15051 ;;		___fttol
 15052 ;;		___lltoft
 15053 ;;		_exp
 15054 ;;		_log
 15055 ;; This function is called by:
 15056 ;;		_AdcConvert
 15057 ;;		_ReadIntFromEeprom
 15058 ;; This function uses a non-reentrant model
 15059 ;;
 15060                           
 15061                           	psect	text86
 15062  001C60                     __ptext86:
 15063                           	opt stack 0
 15064  001C60                     _pow:
 15065                           	opt stack 18
 15066                           
 15067                           ;incstack = 0
 15068  001C60  0E00               	movlw	0
 15069  001C62  0100               	movlb	0	; () banked
 15070  001C64  6FAC               	movwf	pow@sign& (0+255),b
 15071                           
 15072                           ; BSR set to: 0
 15073  001C66  51A0               	movf	pow@x& (0+255),w,b
 15074  001C68  11A1               	iorwf	(pow@x+1)& (0+255),w,b
 15075  001C6A  11A2               	iorwf	(pow@x+2)& (0+255),w,b
 15076  001C6C  A4D8               	btfss	status,2,c
 15077  001C6E  D01D               	goto	l2050
 15078                           
 15079                           ; BSR set to: 0
 15080  001C70  0E00               	movlw	0
 15081  001C72  6E18               	movwf	___ftge@ff1,c
 15082  001C74  0E00               	movlw	0
 15083  001C76  6E19               	movwf	___ftge@ff1+1,c
 15084  001C78  0E00               	movlw	0
 15085  001C7A  6E1A               	movwf	___ftge@ff1+2,c
 15086  001C7C  C0A3  F01B         	movff	pow@y,___ftge@ff2
 15087  001C80  C0A4  F01C         	movff	pow@y+1,___ftge@ff2+1
 15088  001C84  C0A5  F01D         	movff	pow@y+2,___ftge@ff2+2
 15089  001C88  ECA9  F019         	call	___ftge	;wreg free
 15090  001C8C  A0D8               	btfss	status,0,c
 15091  001C8E  D005               	goto	l2051
 15092  001C90  0E00               	movlw	0
 15093  001C92  0101               	movlb	1	; () banked
 15094  001C94  6F2D               	movwf	(_errno+1)& (0+255),b
 15095  001C96  0E21               	movlw	33
 15096  001C98  6F2C               	movwf	_errno& (0+255),b
 15097  001C9A                     l2051:
 15098  001C9A  0E00               	movlw	0
 15099  001C9C  0100               	movlb	0	; () banked
 15100  001C9E  6FA0               	movwf	?_pow& (0+255),b
 15101  001CA0  0E00               	movlw	0
 15102  001CA2  6FA1               	movwf	(?_pow+1)& (0+255),b
 15103  001CA4  0E00               	movlw	0
 15104  001CA6  6FA2               	movwf	(?_pow+2)& (0+255),b
 15105                           
 15106                           ; BSR set to: 0
 15107  001CA8  0012               	return	
 15108  001CAA                     l2050:
 15109                           
 15110                           ; BSR set to: 0
 15111                           
 15112                           ; BSR set to: 0
 15113  001CAA  51A3               	movf	pow@y& (0+255),w,b
 15114  001CAC  11A4               	iorwf	(pow@y+1)& (0+255),w,b
 15115  001CAE  11A5               	iorwf	(pow@y+2)& (0+255),w,b
 15116  001CB0  A4D8               	btfss	status,2,c
 15117  001CB2  D007               	goto	l2053
 15118                           
 15119                           ; BSR set to: 0
 15120  001CB4  0E00               	movlw	0
 15121  001CB6  6FA0               	movwf	?_pow& (0+255),b
 15122  001CB8  0E80               	movlw	128
 15123  001CBA  6FA1               	movwf	(?_pow+1)& (0+255),b
 15124  001CBC  0E3F               	movlw	63
 15125  001CBE  6FA2               	movwf	(?_pow+2)& (0+255),b
 15126                           
 15127                           ; BSR set to: 0
 15128  001CC0  0012               	return	
 15129  001CC2                     l2053:
 15130                           
 15131                           ; BSR set to: 0
 15132                           
 15133                           ; BSR set to: 0
 15134  001CC2  AFA2               	btfss	(pow@x+2)& (0+255),7,b
 15135  001CC4  D043               	goto	l2054
 15136                           
 15137                           ; BSR set to: 0
 15138  001CC6  C0A3  F078         	movff	pow@y,___fttol@f1
 15139  001CCA  C0A4  F079         	movff	pow@y+1,___fttol@f1+1
 15140  001CCE  C0A5  F07A         	movff	pow@y+2,___fttol@f1+2
 15141  001CD2  EC58  F012         	call	___fttol	;wreg free
 15142  001CD6  C078  F0AD         	movff	?___fttol,pow@yi
 15143  001CDA  C079  F0AE         	movff	?___fttol+1,pow@yi+1
 15144  001CDE  C07A  F0AF         	movff	?___fttol+2,pow@yi+2
 15145  001CE2  C07B  F0B0         	movff	?___fttol+3,pow@yi+3
 15146  001CE6  C0AD  F020         	movff	pow@yi,___lltoft@c
 15147  001CEA  C0AE  F021         	movff	pow@yi+1,___lltoft@c+1
 15148  001CEE  C0AF  F022         	movff	pow@yi+2,___lltoft@c+2
 15149  001CF2  C0B0  F023         	movff	pow@yi+3,___lltoft@c+3
 15150  001CF6  EC8B  F01C         	call	___lltoft	;wreg free
 15151  001CFA  0100               	movlb	0	; () banked
 15152  001CFC  51A3               	movf	pow@y& (0+255),w,b
 15153  001CFE  1820               	xorwf	?___lltoft,w,c
 15154  001D00  E107               	bnz	u7750
 15155  001D02  51A4               	movf	(pow@y+1)& (0+255),w,b
 15156  001D04  1821               	xorwf	?___lltoft+1,w,c
 15157  001D06  E104               	bnz	u7750
 15158  001D08  51A5               	movf	(pow@y+2)& (0+255),w,b
 15159  001D0A  1822               	xorwf	?___lltoft+2,w,c
 15160  001D0C  B4D8               	btfsc	status,2,c
 15161  001D0E  D00D               	goto	l2055
 15162  001D10                     u7750:
 15163                           
 15164                           ; BSR set to: 0
 15165  001D10  0E00               	movlw	0
 15166  001D12  0101               	movlb	1	; () banked
 15167  001D14  6F2D               	movwf	(_errno+1)& (0+255),b
 15168  001D16  0E21               	movlw	33
 15169  001D18  6F2C               	movwf	_errno& (0+255),b
 15170  001D1A  0E00               	movlw	0
 15171  001D1C  0100               	movlb	0	; () banked
 15172  001D1E  6FA0               	movwf	?_pow& (0+255),b
 15173  001D20  0E00               	movlw	0
 15174  001D22  6FA1               	movwf	(?_pow+1)& (0+255),b
 15175  001D24  0E00               	movlw	0
 15176  001D26  6FA2               	movwf	(?_pow+2)& (0+255),b
 15177                           
 15178                           ; BSR set to: 0
 15179  001D28  0012               	return	
 15180  001D2A                     l2055:
 15181                           
 15182                           ; BSR set to: 0
 15183                           
 15184                           ; BSR set to: 0
 15185  001D2A  51AD               	movf	pow@yi& (0+255),w,b
 15186  001D2C  0B01               	andlw	1
 15187  001D2E  6FAC               	movwf	pow@sign& (0+255),b
 15188                           
 15189                           ; BSR set to: 0
 15190  001D30  C0A0  F018         	movff	pow@x,___ftneg@f1
 15191  001D34  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 15192  001D38  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 15193  001D3C  EC21  F021         	call	___ftneg	;wreg free
 15194  001D40  C018  F0A0         	movff	?___ftneg,pow@x
 15195  001D44  C019  F0A1         	movff	?___ftneg+1,pow@x+1
 15196  001D48  C01A  F0A2         	movff	?___ftneg+2,pow@x+2
 15197  001D4C                     l2054:
 15198  001D4C  C0A0  F08E         	movff	pow@x,log@x
 15199  001D50  C0A1  F08F         	movff	pow@x+1,log@x+1
 15200  001D54  C0A2  F090         	movff	pow@x+2,log@x+2
 15201  001D58  ECAE  F00F         	call	_log	;wreg free
 15202  001D5C  C08E  F0A6         	movff	?_log,_pow$3593
 15203  001D60  C08F  F0A7         	movff	?_log+1,_pow$3593+1
 15204  001D64  C090  F0A8         	movff	?_log+2,_pow$3593+2
 15205  001D68  C0A6  F069         	movff	_pow$3593,___ftmul@f1
 15206  001D6C  C0A7  F06A         	movff	_pow$3593+1,___ftmul@f1+1
 15207  001D70  C0A8  F06B         	movff	_pow$3593+2,___ftmul@f1+2
 15208  001D74  C0A3  F06C         	movff	pow@y,___ftmul@f2
 15209  001D78  C0A4  F06D         	movff	pow@y+1,___ftmul@f2+1
 15210  001D7C  C0A5  F06E         	movff	pow@y+2,___ftmul@f2+2
 15211  001D80  ECD4  F012         	call	___ftmul	;wreg free
 15212  001D84  C069  F0A9         	movff	?___ftmul,_pow$3594
 15213  001D88  C06A  F0AA         	movff	?___ftmul+1,_pow$3594+1
 15214  001D8C  C06B  F0AB         	movff	?___ftmul+2,_pow$3594+2
 15215  001D90  C0A9  F097         	movff	_pow$3594,exp@x
 15216  001D94  C0AA  F098         	movff	_pow$3594+1,exp@x+1
 15217  001D98  C0AB  F099         	movff	_pow$3594+2,exp@x+2
 15218  001D9C  EC94  F009         	call	_exp	;wreg free
 15219  001DA0  C097  F0A0         	movff	?_exp,pow@x
 15220  001DA4  C098  F0A1         	movff	?_exp+1,pow@x+1
 15221  001DA8  C099  F0A2         	movff	?_exp+2,pow@x+2
 15222  001DAC  0100               	movlb	0	; () banked
 15223  001DAE  51AC               	movf	pow@sign& (0+255),w,b
 15224  001DB0  B4D8               	btfsc	status,2,c
 15225  001DB2  D00F               	goto	l2056
 15226                           
 15227                           ; BSR set to: 0
 15228  001DB4  C0A0  F018         	movff	pow@x,___ftneg@f1
 15229  001DB8  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 15230  001DBC  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 15231  001DC0  EC21  F021         	call	___ftneg	;wreg free
 15232  001DC4  C018  F0A0         	movff	?___ftneg,?_pow
 15233  001DC8  C019  F0A1         	movff	?___ftneg+1,?_pow+1
 15234  001DCC  C01A  F0A2         	movff	?___ftneg+2,?_pow+2
 15235  001DD0  0012               	return	
 15236  001DD2                     l2056:
 15237                           
 15238                           ; BSR set to: 0
 15239  001DD2  C0A0  F0A0         	movff	pow@x,?_pow
 15240  001DD6  C0A1  F0A1         	movff	pow@x+1,?_pow+1
 15241  001DDA  C0A2  F0A2         	movff	pow@x+2,?_pow+2
 15242  001DDE  0012               	return		;funcret
 15243  001DE0                     __end_of_pow:
 15244                           	opt stack 0
 15245                           tosu	equ	0xFFF
 15246                           tosh	equ	0xFFE
 15247                           tosl	equ	0xFFD
 15248                           pclath	equ	0xFFA
 15249                           tblptru	equ	0xFF8
 15250                           tblptrh	equ	0xFF7
 15251                           tblptrl	equ	0xFF6
 15252                           tablat	equ	0xFF5
 15253                           prodh	equ	0xFF4
 15254                           prodl	equ	0xFF3
 15255                           intcon	equ	0xFF2
 15256                           intcon2	equ	0xFF1
 15257                           postinc0	equ	0xFEE
 15258                           plusw0	equ	0xFEB
 15259                           wreg	equ	0xFE8
 15260                           indf1	equ	0xFE7
 15261                           postdec1	equ	0xFE5
 15262                           fsr1h	equ	0xFE2
 15263                           fsr1l	equ	0xFE1
 15264                           indf2	equ	0xFDF
 15265                           postinc2	equ	0xFDE
 15266                           postdec2	equ	0xFDD
 15267                           plusw2	equ	0xFDB
 15268                           fsr2h	equ	0xFDA
 15269                           fsr2l	equ	0xFD9
 15270                           status	equ	0xFD8
 15271                           
 15272 ;; *************** function _log *****************
 15273 ;; Defined at:
 15274 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 15275 ;; Parameters:    Size  Location     Type
 15276 ;;  x               3   46[BANK0 ] unsigned char 
 15277 ;; Auto vars:     Size  Location     Type
 15278 ;;  exponent        2   49[BANK0 ] int 
 15279 ;; Return value:  Size  Location     Type
 15280 ;;                  3   46[BANK0 ] int 
 15281 ;; Registers used:
 15282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15283 ;; Tracked objects:
 15284 ;;		On entry : 0/0
 15285 ;;		On exit  : 0/0
 15286 ;;		Unchanged: 0/0
 15287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15288 ;;      Params:         0       3       0       0       0       0       0
 15289 ;;      Locals:         0       2       0       0       0       0       0
 15290 ;;      Temps:          0       0       0       0       0       0       0
 15291 ;;      Totals:         0       5       0       0       0       0       0
 15292 ;;Total ram usage:        5 bytes
 15293 ;; Hardware stack levels used:    1
 15294 ;; Hardware stack levels required when called:    7
 15295 ;; This function calls:
 15296 ;;		___awtoft
 15297 ;;		___ftadd
 15298 ;;		___ftmul
 15299 ;;		_eval_poly
 15300 ;;		_frexp
 15301 ;; This function is called by:
 15302 ;;		_pow
 15303 ;; This function uses a non-reentrant model
 15304 ;;
 15305                           
 15306                           	psect	text87
 15307  001F5C                     __ptext87:
 15308                           	opt stack 0
 15309  001F5C                     _log:
 15310                           	opt stack 18
 15311                           
 15312                           ;incstack = 0
 15313  001F5C  0100               	movlb	0	; () banked
 15314  001F5E  AF90               	btfss	(log@x+2)& (0+255),7,b
 15315  001F60  D00D               	goto	l2312
 15316                           
 15317                           ; BSR set to: 0
 15318  001F62  0E00               	movlw	0
 15319  001F64  0101               	movlb	1	; () banked
 15320  001F66  6F2D               	movwf	(_errno+1)& (0+255),b
 15321  001F68  0E21               	movlw	33
 15322  001F6A  6F2C               	movwf	_errno& (0+255),b
 15323  001F6C  0E00               	movlw	0
 15324  001F6E  0100               	movlb	0	; () banked
 15325  001F70  6F8E               	movwf	?_log& (0+255),b
 15326  001F72  0E00               	movlw	0
 15327  001F74  6F8F               	movwf	(?_log+1)& (0+255),b
 15328  001F76  0E00               	movlw	0
 15329  001F78  6F90               	movwf	(?_log+2)& (0+255),b
 15330                           
 15331                           ; BSR set to: 0
 15332  001F7A  0012               	return	
 15333  001F7C                     l2312:
 15334                           
 15335                           ; BSR set to: 0
 15336                           
 15337                           ; BSR set to: 0
 15338  001F7C  518E               	movf	log@x& (0+255),w,b
 15339  001F7E  118F               	iorwf	(log@x+1)& (0+255),w,b
 15340  001F80  1190               	iorwf	(log@x+2)& (0+255),w,b
 15341  001F82  A4D8               	btfss	status,2,c
 15342  001F84  D00D               	goto	l2314
 15343                           
 15344                           ; BSR set to: 0
 15345  001F86  0E00               	movlw	0
 15346  001F88  0101               	movlb	1	; () banked
 15347  001F8A  6F2D               	movwf	(_errno+1)& (0+255),b
 15348  001F8C  0E22               	movlw	34
 15349  001F8E  6F2C               	movwf	_errno& (0+255),b
 15350  001F90  0E00               	movlw	0
 15351  001F92  0100               	movlb	0	; () banked
 15352  001F94  6F8E               	movwf	?_log& (0+255),b
 15353  001F96  0E00               	movlw	0
 15354  001F98  6F8F               	movwf	(?_log+1)& (0+255),b
 15355  001F9A  0E00               	movlw	0
 15356  001F9C  6F90               	movwf	(?_log+2)& (0+255),b
 15357                           
 15358                           ; BSR set to: 0
 15359  001F9E  0012               	return	
 15360  001FA0                     l2314:
 15361                           
 15362                           ; BSR set to: 0
 15363                           
 15364                           ; BSR set to: 0
 15365  001FA0  0E00               	movlw	0
 15366  001FA2  6F6C               	movwf	___ftmul@f2& (0+255),b
 15367  001FA4  0E00               	movlw	0
 15368  001FA6  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 15369  001FA8  0E40               	movlw	64
 15370  001FAA  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 15371  001FAC  0E91               	movlw	low log@exponent
 15372  001FAE  6E1B               	movwf	frexp@eptr,c
 15373  001FB0  0E00               	movlw	high log@exponent
 15374  001FB2  6E1C               	movwf	frexp@eptr+1,c
 15375  001FB4  C08E  F018         	movff	log@x,frexp@value
 15376  001FB8  C08F  F019         	movff	log@x+1,frexp@value+1
 15377  001FBC  C090  F01A         	movff	log@x+2,frexp@value+2
 15378  001FC0  EC61  F019         	call	_frexp	;wreg free
 15379  001FC4  C018  F069         	movff	?_frexp,___ftmul@f1
 15380  001FC8  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
 15381  001FCC  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
 15382  001FD0  ECD4  F012         	call	___ftmul	;wreg free
 15383  001FD4  C069  F078         	movff	?___ftmul,___ftadd@f1
 15384  001FD8  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 15385  001FDC  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 15386  001FE0  0E00               	movlw	0
 15387  001FE2  0100               	movlb	0	; () banked
 15388  001FE4  6F7B               	movwf	___ftadd@f2& (0+255),b
 15389  001FE6  0E80               	movlw	128
 15390  001FE8  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 15391  001FEA  0EBF               	movlw	191
 15392  001FEC  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 15393  001FEE  EC59  F00D         	call	___ftadd	;wreg free
 15394  001FF2  C078  F08E         	movff	?___ftadd,log@x
 15395  001FF6  C079  F08F         	movff	?___ftadd+1,log@x+1
 15396  001FFA  C07A  F090         	movff	?___ftadd+2,log@x+2
 15397  001FFE  0100               	movlb	0	; () banked
 15398  002000  0791               	decf	log@exponent& (0+255),f,b
 15399  002002  A0D8               	btfss	status,0,c
 15400  002004  0792               	decf	(log@exponent+1)& (0+255),f,b
 15401                           
 15402                           ; BSR set to: 0
 15403  002006  C08E  F084         	movff	log@x,eval_poly@x
 15404  00200A  C08F  F085         	movff	log@x+1,eval_poly@x+1
 15405  00200E  C090  F086         	movff	log@x+2,eval_poly@x+2
 15406  002012  0E75               	movlw	low log@coeff
 15407  002014  6F87               	movwf	eval_poly@d& (0+255),b
 15408  002016  0E06               	movlw	high log@coeff
 15409  002018  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 15410  00201A  0E00               	movlw	0
 15411  00201C  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 15412  00201E  0E08               	movlw	8
 15413  002020  6F89               	movwf	eval_poly@n& (0+255),b
 15414  002022  EC8A  F015         	call	_eval_poly	;wreg free
 15415  002026  C084  F08E         	movff	?_eval_poly,log@x
 15416  00202A  C085  F08F         	movff	?_eval_poly+1,log@x+1
 15417  00202E  C086  F090         	movff	?_eval_poly+2,log@x+2
 15418  002032  0E72               	movlw	114
 15419  002034  0100               	movlb	0	; () banked
 15420  002036  6F6C               	movwf	___ftmul@f2& (0+255),b
 15421  002038  0E31               	movlw	49
 15422  00203A  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 15423  00203C  0E3F               	movlw	63
 15424  00203E  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 15425  002040  C091  F020         	movff	log@exponent,___awtoft@c
 15426  002044  C092  F021         	movff	log@exponent+1,___awtoft@c+1
 15427  002048  EC69  F01F         	call	___awtoft	;wreg free
 15428  00204C  C020  F069         	movff	?___awtoft,___ftmul@f1
 15429  002050  C021  F06A         	movff	?___awtoft+1,___ftmul@f1+1
 15430  002054  C022  F06B         	movff	?___awtoft+2,___ftmul@f1+2
 15431  002058  ECD4  F012         	call	___ftmul	;wreg free
 15432  00205C  C069  F078         	movff	?___ftmul,___ftadd@f1
 15433  002060  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 15434  002064  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 15435  002068  C08E  F07B         	movff	log@x,___ftadd@f2
 15436  00206C  C08F  F07C         	movff	log@x+1,___ftadd@f2+1
 15437  002070  C090  F07D         	movff	log@x+2,___ftadd@f2+2
 15438  002074  EC59  F00D         	call	___ftadd	;wreg free
 15439  002078  C078  F08E         	movff	?___ftadd,?_log
 15440  00207C  C079  F08F         	movff	?___ftadd+1,?_log+1
 15441  002080  C07A  F090         	movff	?___ftadd+2,?_log+2
 15442  002084  0012               	return	
 15443  002086                     __end_of_log:
 15444                           	opt stack 0
 15445                           tosu	equ	0xFFF
 15446                           tosh	equ	0xFFE
 15447                           tosl	equ	0xFFD
 15448                           pclath	equ	0xFFA
 15449                           tblptru	equ	0xFF8
 15450                           tblptrh	equ	0xFF7
 15451                           tblptrl	equ	0xFF6
 15452                           tablat	equ	0xFF5
 15453                           prodh	equ	0xFF4
 15454                           prodl	equ	0xFF3
 15455                           intcon	equ	0xFF2
 15456                           intcon2	equ	0xFF1
 15457                           postinc0	equ	0xFEE
 15458                           plusw0	equ	0xFEB
 15459                           wreg	equ	0xFE8
 15460                           indf1	equ	0xFE7
 15461                           postdec1	equ	0xFE5
 15462                           fsr1h	equ	0xFE2
 15463                           fsr1l	equ	0xFE1
 15464                           indf2	equ	0xFDF
 15465                           postinc2	equ	0xFDE
 15466                           postdec2	equ	0xFDD
 15467                           plusw2	equ	0xFDB
 15468                           fsr2h	equ	0xFDA
 15469                           fsr2l	equ	0xFD9
 15470                           status	equ	0xFD8
 15471                           
 15472 ;; *************** function _exp *****************
 15473 ;; Defined at:
 15474 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 15475 ;; Parameters:    Size  Location     Type
 15476 ;;  x               3   55[BANK0 ] int 
 15477 ;; Auto vars:     Size  Location     Type
 15478 ;;  exponent        2   61[BANK0 ] int 
 15479 ;;  sign            1   63[BANK0 ] unsigned char 
 15480 ;; Return value:  Size  Location     Type
 15481 ;;                  3   55[BANK0 ] unsigned char 
 15482 ;; Registers used:
 15483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15484 ;; Tracked objects:
 15485 ;;		On entry : 0/0
 15486 ;;		On exit  : 0/0
 15487 ;;		Unchanged: 0/0
 15488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15489 ;;      Params:         0       3       0       0       0       0       0
 15490 ;;      Locals:         0       6       0       0       0       0       0
 15491 ;;      Temps:          0       0       0       0       0       0       0
 15492 ;;      Totals:         0       9       0       0       0       0       0
 15493 ;;Total ram usage:        9 bytes
 15494 ;; Hardware stack levels used:    1
 15495 ;; Hardware stack levels required when called:    7
 15496 ;; This function calls:
 15497 ;;		___awtoft
 15498 ;;		___ftdiv
 15499 ;;		___ftge
 15500 ;;		___ftmul
 15501 ;;		___ftneg
 15502 ;;		___ftsub
 15503 ;;		___fttol
 15504 ;;		_eval_poly
 15505 ;;		_floor
 15506 ;;		_ldexp
 15507 ;; This function is called by:
 15508 ;;		_pow
 15509 ;; This function uses a non-reentrant model
 15510 ;;
 15511                           
 15512                           	psect	text88
 15513  001328                     __ptext88:
 15514                           	opt stack 0
 15515  001328                     _exp:
 15516                           	opt stack 18
 15517                           
 15518                           ;incstack = 0
 15519  001328  0100               	movlb	0	; () banked
 15520  00132A  5197               	movf	exp@x& (0+255),w,b
 15521  00132C  1198               	iorwf	(exp@x+1)& (0+255),w,b
 15522  00132E  1199               	iorwf	(exp@x+2)& (0+255),w,b
 15523  001330  A4D8               	btfss	status,2,c
 15524  001332  D007               	goto	l2248
 15525                           
 15526                           ; BSR set to: 0
 15527  001334  0E00               	movlw	0
 15528  001336  6F97               	movwf	?_exp& (0+255),b
 15529  001338  0E80               	movlw	128
 15530  00133A  6F98               	movwf	(?_exp+1)& (0+255),b
 15531  00133C  0E3F               	movlw	63
 15532  00133E  6F99               	movwf	(?_exp+2)& (0+255),b
 15533                           
 15534                           ; BSR set to: 0
 15535  001340  0012               	return	
 15536  001342                     l2248:
 15537                           
 15538                           ; BSR set to: 0
 15539                           
 15540                           ; BSR set to: 0
 15541  001342  0E72               	movlw	114
 15542  001344  6E18               	movwf	___ftge@ff1,c
 15543  001346  0E31               	movlw	49
 15544  001348  6E19               	movwf	___ftge@ff1+1,c
 15545  00134A  0E44               	movlw	68
 15546  00134C  6E1A               	movwf	___ftge@ff1+2,c
 15547  00134E  C097  F01B         	movff	exp@x,___ftge@ff2
 15548  001352  C098  F01C         	movff	exp@x+1,___ftge@ff2+1
 15549  001356  C099  F01D         	movff	exp@x+2,___ftge@ff2+2
 15550  00135A  ECA9  F019         	call	___ftge	;wreg free
 15551  00135E  B0D8               	btfsc	status,0,c
 15552  001360  D00D               	goto	l2250
 15553  001362  0E00               	movlw	0
 15554  001364  0101               	movlb	1	; () banked
 15555  001366  6F2D               	movwf	(_errno+1)& (0+255),b
 15556  001368  0E22               	movlw	34
 15557  00136A  6F2C               	movwf	_errno& (0+255),b
 15558  00136C  0EFF               	movlw	255
 15559  00136E  0100               	movlb	0	; () banked
 15560  001370  6F97               	movwf	?_exp& (0+255),b
 15561  001372  0E7F               	movlw	127
 15562  001374  6F98               	movwf	(?_exp+1)& (0+255),b
 15563  001376  0E7F               	movlw	127
 15564  001378  6F99               	movwf	(?_exp+2)& (0+255),b
 15565                           
 15566                           ; BSR set to: 0
 15567  00137A  0012               	return	
 15568  00137C                     l2250:
 15569                           
 15570                           ; BSR set to: 0
 15571  00137C  C097  F018         	movff	exp@x,___ftge@ff1
 15572  001380  C098  F019         	movff	exp@x+1,___ftge@ff1+1
 15573  001384  C099  F01A         	movff	exp@x+2,___ftge@ff1+2
 15574  001388  0E49               	movlw	73
 15575  00138A  6E1B               	movwf	___ftge@ff2,c
 15576  00138C  0E3A               	movlw	58
 15577  00138E  6E1C               	movwf	___ftge@ff2+1,c
 15578  001390  0EC4               	movlw	196
 15579  001392  6E1D               	movwf	___ftge@ff2+2,c
 15580  001394  ECA9  F019         	call	___ftge	;wreg free
 15581  001398  B0D8               	btfsc	status,0,c
 15582  00139A  D00D               	goto	l2251
 15583  00139C  0E00               	movlw	0
 15584  00139E  0101               	movlb	1	; () banked
 15585  0013A0  6F2D               	movwf	(_errno+1)& (0+255),b
 15586  0013A2  0E22               	movlw	34
 15587  0013A4  6F2C               	movwf	_errno& (0+255),b
 15588  0013A6  0E00               	movlw	0
 15589  0013A8  0100               	movlb	0	; () banked
 15590  0013AA  6F97               	movwf	?_exp& (0+255),b
 15591  0013AC  0E00               	movlw	0
 15592  0013AE  6F98               	movwf	(?_exp+1)& (0+255),b
 15593  0013B0  0E00               	movlw	0
 15594  0013B2  6F99               	movwf	(?_exp+2)& (0+255),b
 15595                           
 15596                           ; BSR set to: 0
 15597  0013B4  0012               	return	
 15598  0013B6                     l2251:
 15599                           
 15600                           ; BSR set to: 0
 15601  0013B6  0100               	movlb	0	; () banked
 15602  0013B8  AF99               	btfss	(exp@x+2)& (0+255),7,b
 15603  0013BA  D002               	goto	u7640
 15604  0013BC  0E01               	movlw	1
 15605  0013BE  D001               	goto	u7650
 15606  0013C0                     u7640:
 15607  0013C0  0E00               	movlw	0
 15608  0013C2                     u7650:
 15609  0013C2  6F9F               	movwf	exp@sign& (0+255),b
 15610                           
 15611                           ; BSR set to: 0
 15612  0013C4  519F               	movf	exp@sign& (0+255),w,b
 15613  0013C6  B4D8               	btfsc	status,2,c
 15614  0013C8  D00E               	goto	l2252
 15615                           
 15616                           ; BSR set to: 0
 15617  0013CA  C097  F018         	movff	exp@x,___ftneg@f1
 15618  0013CE  C098  F019         	movff	exp@x+1,___ftneg@f1+1
 15619  0013D2  C099  F01A         	movff	exp@x+2,___ftneg@f1+2
 15620  0013D6  EC21  F021         	call	___ftneg	;wreg free
 15621  0013DA  C018  F097         	movff	?___ftneg,exp@x
 15622  0013DE  C019  F098         	movff	?___ftneg+1,exp@x+1
 15623  0013E2  C01A  F099         	movff	?___ftneg+2,exp@x+2
 15624  0013E6                     l2252:
 15625  0013E6  C097  F069         	movff	exp@x,___ftmul@f1
 15626  0013EA  C098  F06A         	movff	exp@x+1,___ftmul@f1+1
 15627  0013EE  C099  F06B         	movff	exp@x+2,___ftmul@f1+2
 15628  0013F2  0EAA               	movlw	170
 15629  0013F4  0100               	movlb	0	; () banked
 15630  0013F6  6F6C               	movwf	___ftmul@f2& (0+255),b
 15631  0013F8  0EB8               	movlw	184
 15632  0013FA  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 15633  0013FC  0E3F               	movlw	63
 15634  0013FE  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 15635  001400  ECD4  F012         	call	___ftmul	;wreg free
 15636  001404  C069  F097         	movff	?___ftmul,exp@x
 15637  001408  C06A  F098         	movff	?___ftmul+1,exp@x+1
 15638  00140C  C06B  F099         	movff	?___ftmul+2,exp@x+2
 15639  001410  C097  F08F         	movff	exp@x,floor@x
 15640  001414  C098  F090         	movff	exp@x+1,floor@x+1
 15641  001418  C099  F091         	movff	exp@x+2,floor@x+2
 15642  00141C  EC19  F015         	call	_floor	;wreg free
 15643  001420  C08F  F09A         	movff	?_floor,_exp$3595
 15644  001424  C090  F09B         	movff	?_floor+1,_exp$3595+1
 15645  001428  C091  F09C         	movff	?_floor+2,_exp$3595+2
 15646  00142C  C09A  F078         	movff	_exp$3595,___fttol@f1
 15647  001430  C09B  F079         	movff	_exp$3595+1,___fttol@f1+1
 15648  001434  C09C  F07A         	movff	_exp$3595+2,___fttol@f1+2
 15649  001438  EC58  F012         	call	___fttol	;wreg free
 15650  00143C  C078  F09D         	movff	?___fttol,exp@exponent
 15651  001440  C079  F09E         	movff	?___fttol+1,exp@exponent+1
 15652  001444  C097  F084         	movff	exp@x,___ftsub@f1
 15653  001448  C098  F085         	movff	exp@x+1,___ftsub@f1+1
 15654  00144C  C099  F086         	movff	exp@x+2,___ftsub@f1+2
 15655  001450  C09D  F020         	movff	exp@exponent,___awtoft@c
 15656  001454  C09E  F021         	movff	exp@exponent+1,___awtoft@c+1
 15657  001458  EC69  F01F         	call	___awtoft	;wreg free
 15658  00145C  C020  F087         	movff	?___awtoft,___ftsub@f2
 15659  001460  C021  F088         	movff	?___awtoft+1,___ftsub@f2+1
 15660  001464  C022  F089         	movff	?___awtoft+2,___ftsub@f2+2
 15661  001468  EC79  F01E         	call	___ftsub	;wreg free
 15662  00146C  C084  F097         	movff	?___ftsub,exp@x
 15663  001470  C085  F098         	movff	?___ftsub+1,exp@x+1
 15664  001474  C086  F099         	movff	?___ftsub+2,exp@x+2
 15665  001478  C097  F084         	movff	exp@x,eval_poly@x
 15666  00147C  C098  F085         	movff	exp@x+1,eval_poly@x+1
 15667  001480  C099  F086         	movff	exp@x+2,eval_poly@x+2
 15668  001484  0E57               	movlw	low exp@coeff
 15669  001486  0100               	movlb	0	; () banked
 15670  001488  6F87               	movwf	eval_poly@d& (0+255),b
 15671  00148A  0E06               	movlw	high exp@coeff
 15672  00148C  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 15673  00148E  0E00               	movlw	0
 15674  001490  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 15675  001492  0E09               	movlw	9
 15676  001494  6F89               	movwf	eval_poly@n& (0+255),b
 15677  001496  EC8A  F015         	call	_eval_poly	;wreg free
 15678  00149A  C084  F08E         	movff	?_eval_poly,ldexp@value
 15679  00149E  C085  F08F         	movff	?_eval_poly+1,ldexp@value+1
 15680  0014A2  C086  F090         	movff	?_eval_poly+2,ldexp@value+2
 15681  0014A6  C09D  F091         	movff	exp@exponent,ldexp@newexp
 15682  0014AA  C09E  F092         	movff	exp@exponent+1,ldexp@newexp+1
 15683  0014AE  ECF5  F015         	call	_ldexp	;wreg free
 15684  0014B2  C08E  F097         	movff	?_ldexp,exp@x
 15685  0014B6  C08F  F098         	movff	?_ldexp+1,exp@x+1
 15686  0014BA  C090  F099         	movff	?_ldexp+2,exp@x+2
 15687  0014BE  0100               	movlb	0	; () banked
 15688  0014C0  519F               	movf	exp@sign& (0+255),w,b
 15689  0014C2  B4D8               	btfsc	status,2,c
 15690  0014C4  D025               	goto	l2253
 15691                           
 15692                           ; BSR set to: 0
 15693  0014C6  2997               	incf	exp@x& (0+255),w,b
 15694  0014C8  E10E               	bnz	l7621
 15695  0014CA  0E7F               	movlw	127
 15696  0014CC  1998               	xorwf	(exp@x+1)& (0+255),w,b
 15697  0014CE  E10B               	bnz	l7621
 15698  0014D0  0E7F               	movlw	127
 15699  0014D2  1999               	xorwf	(exp@x+2)& (0+255),w,b
 15700  0014D4  A4D8               	btfss	status,2,c
 15701  0014D6  D007               	goto	l2254
 15702                           
 15703                           ; BSR set to: 0
 15704  0014D8  0E00               	movlw	0
 15705  0014DA  6F97               	movwf	?_exp& (0+255),b
 15706  0014DC  0E00               	movlw	0
 15707  0014DE  6F98               	movwf	(?_exp+1)& (0+255),b
 15708  0014E0  0E00               	movlw	0
 15709  0014E2  6F99               	movwf	(?_exp+2)& (0+255),b
 15710                           
 15711                           ; BSR set to: 0
 15712  0014E4  0012               	return	
 15713  0014E6                     l2254:
 15714  0014E6                     l7621:
 15715                           
 15716                           ; BSR set to: 0
 15717  0014E6  0E00               	movlw	0
 15718  0014E8  6E29               	movwf	___ftdiv@f1,c
 15719  0014EA  0E80               	movlw	128
 15720  0014EC  6E2A               	movwf	___ftdiv@f1+1,c
 15721  0014EE  0E3F               	movlw	63
 15722  0014F0  6E2B               	movwf	___ftdiv@f1+2,c
 15723  0014F2  C097  F02C         	movff	exp@x,___ftdiv@f2
 15724  0014F6  C098  F02D         	movff	exp@x+1,___ftdiv@f2+1
 15725  0014FA  C099  F02E         	movff	exp@x+2,___ftdiv@f2+2
 15726  0014FE  EC4F  F013         	call	___ftdiv	;wreg free
 15727  001502  C029  F097         	movff	?___ftdiv,?_exp
 15728  001506  C02A  F098         	movff	?___ftdiv+1,?_exp+1
 15729  00150A  C02B  F099         	movff	?___ftdiv+2,?_exp+2
 15730  00150E  0012               	return	
 15731  001510                     l2253:
 15732                           
 15733                           ; BSR set to: 0
 15734  001510  C097  F097         	movff	exp@x,?_exp
 15735  001514  C098  F098         	movff	exp@x+1,?_exp+1
 15736  001518  C099  F099         	movff	exp@x+2,?_exp+2
 15737  00151C  0012               	return		;funcret
 15738  00151E                     __end_of_exp:
 15739                           	opt stack 0
 15740                           tosu	equ	0xFFF
 15741                           tosh	equ	0xFFE
 15742                           tosl	equ	0xFFD
 15743                           pclath	equ	0xFFA
 15744                           tblptru	equ	0xFF8
 15745                           tblptrh	equ	0xFF7
 15746                           tblptrl	equ	0xFF6
 15747                           tablat	equ	0xFF5
 15748                           prodh	equ	0xFF4
 15749                           prodl	equ	0xFF3
 15750                           intcon	equ	0xFF2
 15751                           intcon2	equ	0xFF1
 15752                           postinc0	equ	0xFEE
 15753                           plusw0	equ	0xFEB
 15754                           wreg	equ	0xFE8
 15755                           indf1	equ	0xFE7
 15756                           postdec1	equ	0xFE5
 15757                           fsr1h	equ	0xFE2
 15758                           fsr1l	equ	0xFE1
 15759                           indf2	equ	0xFDF
 15760                           postinc2	equ	0xFDE
 15761                           postdec2	equ	0xFDD
 15762                           plusw2	equ	0xFDB
 15763                           fsr2h	equ	0xFDA
 15764                           fsr2l	equ	0xFD9
 15765                           status	equ	0xFD8
 15766                           
 15767 ;; *************** function _ldexp *****************
 15768 ;; Defined at:
 15769 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 15770 ;; Parameters:    Size  Location     Type
 15771 ;;  value           3   46[BANK0 ] unsigned char 
 15772 ;;  newexp          2   49[BANK0 ] int 
 15773 ;; Auto vars:     Size  Location     Type
 15774 ;;		None
 15775 ;; Return value:  Size  Location     Type
 15776 ;;                  3   46[BANK0 ] int 
 15777 ;; Registers used:
 15778 ;;		wreg, status,2, status,0
 15779 ;; Tracked objects:
 15780 ;;		On entry : 0/0
 15781 ;;		On exit  : 0/0
 15782 ;;		Unchanged: 0/0
 15783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15784 ;;      Params:         0       5       0       0       0       0       0
 15785 ;;      Locals:         0       0       0       0       0       0       0
 15786 ;;      Temps:          0       2       0       0       0       0       0
 15787 ;;      Totals:         0       7       0       0       0       0       0
 15788 ;;Total ram usage:        7 bytes
 15789 ;; Hardware stack levels used:    1
 15790 ;; Hardware stack levels required when called:    4
 15791 ;; This function calls:
 15792 ;;		Nothing
 15793 ;; This function is called by:
 15794 ;;		_exp
 15795 ;; This function uses a non-reentrant model
 15796 ;;
 15797                           
 15798                           	psect	text89
 15799  002BEA                     __ptext89:
 15800                           	opt stack 0
 15801  002BEA                     _ldexp:
 15802                           	opt stack 20
 15803                           
 15804                           ;incstack = 0
 15805  002BEA  0100               	movlb	0	; () banked
 15806  002BEC  518E               	movf	ldexp@value& (0+255),w,b
 15807  002BEE  118F               	iorwf	(ldexp@value+1)& (0+255),w,b
 15808  002BF0  1190               	iorwf	(ldexp@value+2)& (0+255),w,b
 15809  002BF2  A4D8               	btfss	status,2,c
 15810  002BF4  D007               	goto	l2272
 15811                           
 15812                           ; BSR set to: 0
 15813  002BF6  0E00               	movlw	0
 15814  002BF8  6F8E               	movwf	?_ldexp& (0+255),b
 15815  002BFA  0E00               	movlw	0
 15816  002BFC  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15817  002BFE  0E00               	movlw	0
 15818  002C00  6F90               	movwf	(?_ldexp+2)& (0+255),b
 15819                           
 15820                           ; BSR set to: 0
 15821  002C02  0012               	return	
 15822  002C04                     l2272:
 15823                           
 15824                           ; BSR set to: 0
 15825                           
 15826                           ; BSR set to: 0
 15827  002C04  5190               	movf	(ldexp@value+2)& (0+255),w,b
 15828  002C06  0B7F               	andlw	127
 15829  002C08  6F93               	movwf	??_ldexp& (0+255),b
 15830  002C0A  6B94               	clrf	(??_ldexp+1)& (0+255),b
 15831  002C0C  90D8               	bcf	status,0,c
 15832  002C0E  3793               	rlcf	??_ldexp& (0+255),f,b
 15833  002C10  3794               	rlcf	(??_ldexp+1)& (0+255),f,b
 15834  002C12  5193               	movf	??_ldexp& (0+255),w,b
 15835  002C14  2791               	addwf	ldexp@newexp& (0+255),f,b
 15836  002C16  5194               	movf	(??_ldexp+1)& (0+255),w,b
 15837  002C18  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 15838  002C1A  AF8F               	btfss	(ldexp@value+1)& (0+255),7,b
 15839  002C1C  D003               	goto	u7380
 15840  002C1E  6B93               	clrf	??_ldexp& (0+255),b
 15841  002C20  2B93               	incf	??_ldexp& (0+255),f,b
 15842  002C22  D002               	goto	u7388
 15843  002C24                     u7380:
 15844  002C24  0100               	movlb	0	; () banked
 15845  002C26  6B93               	clrf	??_ldexp& (0+255),b
 15846  002C28                     u7388:
 15847  002C28  5193               	movf	??_ldexp& (0+255),w,b
 15848  002C2A  2791               	addwf	ldexp@newexp& (0+255),f,b
 15849  002C2C  0E00               	movlw	0
 15850  002C2E  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 15851  002C30  AF92               	btfss	(ldexp@newexp+1)& (0+255),7,b
 15852  002C32  D00D               	goto	l2274
 15853                           
 15854                           ; BSR set to: 0
 15855  002C34  0E00               	movlw	0
 15856  002C36  0101               	movlb	1	; () banked
 15857  002C38  6F2D               	movwf	(_errno+1)& (0+255),b
 15858  002C3A  0E22               	movlw	34
 15859  002C3C  6F2C               	movwf	_errno& (0+255),b
 15860  002C3E  0E00               	movlw	0
 15861  002C40  0100               	movlb	0	; () banked
 15862  002C42  6F8E               	movwf	?_ldexp& (0+255),b
 15863  002C44  0E00               	movlw	0
 15864  002C46  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15865  002C48  0E00               	movlw	0
 15866  002C4A                     L3:
 15867  002C4A  6F90               	movwf	(?_ldexp+2)& (0+255),b
 15868                           
 15869                           ; BSR set to: 0
 15870  002C4C  0012               	return	
 15871  002C4E                     l2274:
 15872                           
 15873                           ; BSR set to: 0
 15874                           
 15875                           ; BSR set to: 0
 15876  002C4E  BF92               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 15877  002C50  D017               	goto	l2276
 15878  002C52  0592               	decf	(ldexp@newexp+1)& (0+255),w,b
 15879  002C54  A0D8               	btfss	status,0,c
 15880  002C56  D014               	goto	l2276
 15881                           
 15882                           ; BSR set to: 0
 15883  002C58  0E00               	movlw	0
 15884  002C5A  0101               	movlb	1	; () banked
 15885  002C5C  6F2D               	movwf	(_errno+1)& (0+255),b
 15886  002C5E  0E22               	movlw	34
 15887  002C60  6F2C               	movwf	_errno& (0+255),b
 15888                           
 15889                           ; BSR set to: 1
 15890  002C62  0100               	movlb	0	; () banked
 15891  002C64  AF90               	btfss	(ldexp@value+2)& (0+255),7,b
 15892  002C66  D006               	goto	l2277
 15893                           
 15894                           ; BSR set to: 0
 15895  002C68  0EFF               	movlw	255
 15896  002C6A  6F8E               	movwf	?_ldexp& (0+255),b
 15897  002C6C  0E7F               	movlw	127
 15898  002C6E  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15899  002C70  0EFF               	movlw	255
 15900  002C72  D7EB               	goto	L3
 15901  002C74                     l2277:
 15902                           
 15903                           ; BSR set to: 0
 15904                           
 15905                           ; BSR set to: 0
 15906  002C74  0EFF               	movlw	255
 15907  002C76  6F8E               	movwf	?_ldexp& (0+255),b
 15908  002C78  0E7F               	movlw	127
 15909  002C7A  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15910  002C7C  0E7F               	movlw	127
 15911  002C7E  D7E5               	goto	L3
 15912  002C80                     l2276:
 15913                           
 15914                           ; BSR set to: 0
 15915                           
 15916                           ; BSR set to: 0
 15917  002C80  3592               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 15918  002C82  3192               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 15919  002C84  6F94               	movwf	(??_ldexp+1)& (0+255),b
 15920  002C86  3191               	rrcf	ldexp@newexp& (0+255),w,b
 15921  002C88  6F93               	movwf	??_ldexp& (0+255),b
 15922  002C8A  5190               	movf	(ldexp@value+2)& (0+255),w,b
 15923  002C8C  1993               	xorwf	??_ldexp& (0+255),w,b
 15924  002C8E  0B80               	andlw	-128
 15925  002C90  1993               	xorwf	??_ldexp& (0+255),w,b
 15926  002C92  6F90               	movwf	(ldexp@value+2)& (0+255),b
 15927  002C94  C091  F093         	movff	ldexp@newexp,??_ldexp
 15928  002C98  0E01               	movlw	1
 15929  002C9A  1793               	andwf	??_ldexp& (0+255),f,b
 15930  002C9C  3393               	rrcf	??_ldexp& (0+255),f,b
 15931  002C9E  3393               	rrcf	??_ldexp& (0+255),f,b
 15932  002CA0  518F               	movf	(ldexp@value+1)& (0+255),w,b
 15933  002CA2  1993               	xorwf	??_ldexp& (0+255),w,b
 15934  002CA4  0B7F               	andlw	-129
 15935  002CA6  1993               	xorwf	??_ldexp& (0+255),w,b
 15936  002CA8  6F8F               	movwf	(ldexp@value+1)& (0+255),b
 15937                           
 15938                           ; BSR set to: 0
 15939                           
 15940                           ; BSR set to: 0
 15941                           
 15942                           ; BSR set to: 0
 15943  002CAA  C08E  F08E         	movff	ldexp@value,?_ldexp
 15944  002CAE  C08F  F08F         	movff	ldexp@value+1,?_ldexp+1
 15945  002CB2  C090  F090         	movff	ldexp@value+2,?_ldexp+2
 15946  002CB6  0012               	return	
 15947  002CB8                     __end_of_ldexp:
 15948                           	opt stack 0
 15949                           tosu	equ	0xFFF
 15950                           tosh	equ	0xFFE
 15951                           tosl	equ	0xFFD
 15952                           pclath	equ	0xFFA
 15953                           tblptru	equ	0xFF8
 15954                           tblptrh	equ	0xFF7
 15955                           tblptrl	equ	0xFF6
 15956                           tablat	equ	0xFF5
 15957                           prodh	equ	0xFF4
 15958                           prodl	equ	0xFF3
 15959                           intcon	equ	0xFF2
 15960                           intcon2	equ	0xFF1
 15961                           postinc0	equ	0xFEE
 15962                           plusw0	equ	0xFEB
 15963                           wreg	equ	0xFE8
 15964                           indf1	equ	0xFE7
 15965                           postdec1	equ	0xFE5
 15966                           fsr1h	equ	0xFE2
 15967                           fsr1l	equ	0xFE1
 15968                           indf2	equ	0xFDF
 15969                           postinc2	equ	0xFDE
 15970                           postdec2	equ	0xFDD
 15971                           plusw2	equ	0xFDB
 15972                           fsr2h	equ	0xFDA
 15973                           fsr2l	equ	0xFD9
 15974                           status	equ	0xFD8
 15975                           
 15976 ;; *************** function _floor *****************
 15977 ;; Defined at:
 15978 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 15979 ;; Parameters:    Size  Location     Type
 15980 ;;  x               3   47[BANK0 ] int 
 15981 ;; Auto vars:     Size  Location     Type
 15982 ;;  i               3   50[BANK0 ] int 
 15983 ;;  expon           2   53[BANK0 ] int 
 15984 ;; Return value:  Size  Location     Type
 15985 ;;                  3   47[BANK0 ] int 
 15986 ;; Registers used:
 15987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15988 ;; Tracked objects:
 15989 ;;		On entry : 0/0
 15990 ;;		On exit  : 0/0
 15991 ;;		Unchanged: 0/0
 15992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15993 ;;      Params:         0       3       0       0       0       0       0
 15994 ;;      Locals:         0       5       0       0       0       0       0
 15995 ;;      Temps:          0       0       0       0       0       0       0
 15996 ;;      Totals:         0       8       0       0       0       0       0
 15997 ;;Total ram usage:        8 bytes
 15998 ;; Hardware stack levels used:    1
 15999 ;; Hardware stack levels required when called:    6
 16000 ;; This function calls:
 16001 ;;		___altoft
 16002 ;;		___ftadd
 16003 ;;		___ftge
 16004 ;;		___fttol
 16005 ;;		_frexp
 16006 ;; This function is called by:
 16007 ;;		_exp
 16008 ;; This function uses a non-reentrant model
 16009 ;;
 16010                           
 16011                           	psect	text90
 16012  002A32                     __ptext90:
 16013                           	opt stack 0
 16014  002A32                     _floor:
 16015                           	opt stack 18
 16016                           
 16017                           ; BSR set to: 0
 16018                           ;incstack = 0
 16019  002A32  C08F  F018         	movff	floor@x,frexp@value
 16020  002A36  C090  F019         	movff	floor@x+1,frexp@value+1
 16021  002A3A  C091  F01A         	movff	floor@x+2,frexp@value+2
 16022  002A3E  0E95               	movlw	low floor@expon
 16023  002A40  6E1B               	movwf	frexp@eptr,c
 16024  002A42  0E00               	movlw	high floor@expon
 16025  002A44  6E1C               	movwf	frexp@eptr+1,c
 16026  002A46  EC61  F019         	call	_frexp	;wreg free
 16027  002A4A  0100               	movlb	0	; () banked
 16028  002A4C  AF96               	btfss	(floor@expon+1)& (0+255),7,b
 16029  002A4E  D010               	goto	l2259
 16030                           
 16031                           ; BSR set to: 0
 16032  002A50  AF91               	btfss	(floor@x+2)& (0+255),7,b
 16033  002A52  D007               	goto	l2260
 16034                           
 16035                           ; BSR set to: 0
 16036  002A54  0E00               	movlw	0
 16037  002A56  6F8F               	movwf	?_floor& (0+255),b
 16038  002A58  0E80               	movlw	128
 16039  002A5A  6F90               	movwf	(?_floor+1)& (0+255),b
 16040  002A5C  0EBF               	movlw	191
 16041  002A5E  6F91               	movwf	(?_floor+2)& (0+255),b
 16042                           
 16043                           ; BSR set to: 0
 16044  002A60  0012               	return	
 16045  002A62                     l2260:
 16046                           
 16047                           ; BSR set to: 0
 16048                           
 16049                           ; BSR set to: 0
 16050  002A62  0E00               	movlw	0
 16051  002A64  6F8F               	movwf	?_floor& (0+255),b
 16052  002A66  0E00               	movlw	0
 16053  002A68  6F90               	movwf	(?_floor+1)& (0+255),b
 16054  002A6A  0E00               	movlw	0
 16055  002A6C  6F91               	movwf	(?_floor+2)& (0+255),b
 16056                           
 16057                           ; BSR set to: 0
 16058  002A6E  0012               	return	
 16059  002A70                     l2259:
 16060                           
 16061                           ; BSR set to: 0
 16062                           
 16063                           ; BSR set to: 0
 16064  002A70  5196               	movf	(floor@expon+1)& (0+255),w,b
 16065  002A72  E104               	bnz	u7340
 16066  002A74  0E15               	movlw	21
 16067  002A76  5D95               	subwf	floor@expon& (0+255),w,b
 16068  002A78  A0D8               	btfss	status,0,c
 16069  002A7A  D007               	goto	l2262
 16070  002A7C                     u7340:
 16071                           
 16072                           ; BSR set to: 0
 16073  002A7C  C08F  F08F         	movff	floor@x,?_floor
 16074  002A80  C090  F090         	movff	floor@x+1,?_floor+1
 16075  002A84  C091  F091         	movff	floor@x+2,?_floor+2
 16076  002A88  0012               	return	
 16077  002A8A                     l2262:
 16078                           
 16079                           ; BSR set to: 0
 16080                           
 16081                           ; BSR set to: 0
 16082  002A8A  C08F  F078         	movff	floor@x,___fttol@f1
 16083  002A8E  C090  F079         	movff	floor@x+1,___fttol@f1+1
 16084  002A92  C091  F07A         	movff	floor@x+2,___fttol@f1+2
 16085  002A96  EC58  F012         	call	___fttol	;wreg free
 16086  002A9A  C078  F087         	movff	?___fttol,___altoft@c
 16087  002A9E  C079  F088         	movff	?___fttol+1,___altoft@c+1
 16088  002AA2  C07A  F089         	movff	?___fttol+2,___altoft@c+2
 16089  002AA6  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
 16090  002AAA  ECB6  F01A         	call	___altoft	;wreg free
 16091  002AAE  C087  F092         	movff	?___altoft,floor@i
 16092  002AB2  C088  F093         	movff	?___altoft+1,floor@i+1
 16093  002AB6  C089  F094         	movff	?___altoft+2,floor@i+2
 16094  002ABA  C08F  F018         	movff	floor@x,___ftge@ff1
 16095  002ABE  C090  F019         	movff	floor@x+1,___ftge@ff1+1
 16096  002AC2  C091  F01A         	movff	floor@x+2,___ftge@ff1+2
 16097  002AC6  C092  F01B         	movff	floor@i,___ftge@ff2
 16098  002ACA  C093  F01C         	movff	floor@i+1,___ftge@ff2+1
 16099  002ACE  C094  F01D         	movff	floor@i+2,___ftge@ff2+2
 16100  002AD2  ECA9  F019         	call	___ftge	;wreg free
 16101  002AD6  B0D8               	btfsc	status,0,c
 16102  002AD8  D016               	goto	l2263
 16103  002ADA  C092  F078         	movff	floor@i,___ftadd@f1
 16104  002ADE  C093  F079         	movff	floor@i+1,___ftadd@f1+1
 16105  002AE2  C094  F07A         	movff	floor@i+2,___ftadd@f1+2
 16106  002AE6  0E00               	movlw	0
 16107  002AE8  0100               	movlb	0	; () banked
 16108  002AEA  6F7B               	movwf	___ftadd@f2& (0+255),b
 16109  002AEC  0E80               	movlw	128
 16110  002AEE  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 16111  002AF0  0EBF               	movlw	191
 16112  002AF2  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 16113  002AF4  EC59  F00D         	call	___ftadd	;wreg free
 16114  002AF8  C078  F08F         	movff	?___ftadd,?_floor
 16115  002AFC  C079  F090         	movff	?___ftadd+1,?_floor+1
 16116  002B00  C07A  F091         	movff	?___ftadd+2,?_floor+2
 16117  002B04  0012               	return	
 16118  002B06                     l2263:
 16119  002B06  C092  F08F         	movff	floor@i,?_floor
 16120  002B0A  C093  F090         	movff	floor@i+1,?_floor+1
 16121  002B0E  C094  F091         	movff	floor@i+2,?_floor+2
 16122  002B12  0012               	return		;funcret
 16123  002B14                     __end_of_floor:
 16124                           	opt stack 0
 16125                           tosu	equ	0xFFF
 16126                           tosh	equ	0xFFE
 16127                           tosl	equ	0xFFD
 16128                           pclath	equ	0xFFA
 16129                           tblptru	equ	0xFF8
 16130                           tblptrh	equ	0xFF7
 16131                           tblptrl	equ	0xFF6
 16132                           tablat	equ	0xFF5
 16133                           prodh	equ	0xFF4
 16134                           prodl	equ	0xFF3
 16135                           intcon	equ	0xFF2
 16136                           intcon2	equ	0xFF1
 16137                           postinc0	equ	0xFEE
 16138                           plusw0	equ	0xFEB
 16139                           wreg	equ	0xFE8
 16140                           indf1	equ	0xFE7
 16141                           postdec1	equ	0xFE5
 16142                           fsr1h	equ	0xFE2
 16143                           fsr1l	equ	0xFE1
 16144                           indf2	equ	0xFDF
 16145                           postinc2	equ	0xFDE
 16146                           postdec2	equ	0xFDD
 16147                           plusw2	equ	0xFDB
 16148                           fsr2h	equ	0xFDA
 16149                           fsr2l	equ	0xFD9
 16150                           status	equ	0xFD8
 16151                           
 16152 ;; *************** function _frexp *****************
 16153 ;; Defined at:
 16154 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 16155 ;; Parameters:    Size  Location     Type
 16156 ;;  value           3   23[COMRAM] int 
 16157 ;;  eptr            2   26[COMRAM] PTR int 
 16158 ;;		 -> log@exponent(2), floor@expon(2), 
 16159 ;; Auto vars:     Size  Location     Type
 16160 ;;		None
 16161 ;; Return value:  Size  Location     Type
 16162 ;;                  3   23[COMRAM] PTR int 
 16163 ;; Registers used:
 16164 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16165 ;; Tracked objects:
 16166 ;;		On entry : 0/0
 16167 ;;		On exit  : 0/0
 16168 ;;		Unchanged: 0/0
 16169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16170 ;;      Params:         5       0       0       0       0       0       0
 16171 ;;      Locals:         0       0       0       0       0       0       0
 16172 ;;      Temps:          2       0       0       0       0       0       0
 16173 ;;      Totals:         7       0       0       0       0       0       0
 16174 ;;Total ram usage:        7 bytes
 16175 ;; Hardware stack levels used:    1
 16176 ;; Hardware stack levels required when called:    4
 16177 ;; This function calls:
 16178 ;;		Nothing
 16179 ;; This function is called by:
 16180 ;;		_floor
 16181 ;;		_log
 16182 ;; This function uses a non-reentrant model
 16183 ;;
 16184                           
 16185                           	psect	text91
 16186  0032C2                     __ptext91:
 16187                           	opt stack 0
 16188  0032C2                     _frexp:
 16189                           	opt stack 20
 16190                           
 16191                           ;incstack = 0
 16192  0032C2  5018               	movf	frexp@value,w,c
 16193  0032C4  1019               	iorwf	frexp@value+1,w,c
 16194  0032C6  101A               	iorwf	frexp@value+2,w,c
 16195  0032C8  A4D8               	btfss	status,2,c
 16196  0032CA  D00F               	goto	l2268
 16197  0032CC  C01B  FFD9         	movff	frexp@eptr,fsr2l
 16198  0032D0  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 16199  0032D4  0E00               	movlw	0
 16200  0032D6  6EDE               	movwf	postinc2,c
 16201  0032D8  0E00               	movlw	0
 16202  0032DA  6EDD               	movwf	postdec2,c
 16203  0032DC  0E00               	movlw	0
 16204  0032DE  6E18               	movwf	?_frexp,c
 16205  0032E0  0E00               	movlw	0
 16206  0032E2  6E19               	movwf	?_frexp+1,c
 16207  0032E4  0E00               	movlw	0
 16208  0032E6  6E1A               	movwf	?_frexp+2,c
 16209  0032E8  0012               	return	
 16210  0032EA                     l2268:
 16211  0032EA  501A               	movf	frexp@value+2,w,c
 16212  0032EC  0B7F               	andlw	127
 16213  0032EE  6E1D               	movwf	??_frexp& (0+255),c
 16214  0032F0  6A1E               	clrf	(??_frexp+1)& (0+255),c
 16215  0032F2  90D8               	bcf	status,0,c
 16216  0032F4  361D               	rlcf	??_frexp,f,c
 16217  0032F6  361E               	rlcf	??_frexp+1,f,c
 16218  0032F8  C01B  FFD9         	movff	frexp@eptr,fsr2l
 16219  0032FC  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 16220  003300  C01D  FFDE         	movff	??_frexp,postinc2
 16221  003304  C01E  FFDD         	movff	??_frexp+1,postdec2
 16222  003308  AE19               	btfss	frexp@value+1,7,c
 16223  00330A  D003               	goto	u7220
 16224  00330C  6A1D               	clrf	??_frexp& (0+255),c
 16225  00330E  2A1D               	incf	??_frexp& (0+255),f,c
 16226  003310  D001               	goto	u7228
 16227  003312                     u7220:
 16228  003312  6A1D               	clrf	??_frexp& (0+255),c
 16229  003314                     u7228:
 16230  003314  501D               	movf	??_frexp,w,c
 16231  003316  C01B  FFD9         	movff	frexp@eptr,fsr2l
 16232  00331A  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 16233  00331E  12DE               	iorwf	postinc2,f,c
 16234  003320  0E00               	movlw	0
 16235  003322  12DD               	iorwf	postdec2,f,c
 16236  003324  C01B  FFD9         	movff	frexp@eptr,fsr2l
 16237  003328  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 16238  00332C  0E82               	movlw	130
 16239  00332E  26DE               	addwf	postinc2,f,c
 16240  003330  0EFF               	movlw	255
 16241  003332  22DD               	addwfc	postdec2,f,c
 16242  003334  801A               	bsf	frexp@value+2,0,c
 16243  003336  821A               	bsf	frexp@value+2,1,c
 16244  003338  841A               	bsf	frexp@value+2,2,c
 16245  00333A  861A               	bsf	frexp@value+2,3,c
 16246  00333C  881A               	bsf	frexp@value+2,4,c
 16247  00333E  8A1A               	bsf	frexp@value+2,5,c
 16248  003340  9C1A               	bcf	frexp@value+2,6,c
 16249  003342  9E19               	bcf	frexp@value+1,7,c
 16250  003344  C018  F018         	movff	frexp@value,?_frexp
 16251  003348  C019  F019         	movff	frexp@value+1,?_frexp+1
 16252  00334C  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 16253  003350  0012               	return	
 16254  003352                     __end_of_frexp:
 16255                           	opt stack 0
 16256                           tosu	equ	0xFFF
 16257                           tosh	equ	0xFFE
 16258                           tosl	equ	0xFFD
 16259                           pclath	equ	0xFFA
 16260                           tblptru	equ	0xFF8
 16261                           tblptrh	equ	0xFF7
 16262                           tblptrl	equ	0xFF6
 16263                           tablat	equ	0xFF5
 16264                           prodh	equ	0xFF4
 16265                           prodl	equ	0xFF3
 16266                           intcon	equ	0xFF2
 16267                           intcon2	equ	0xFF1
 16268                           postinc0	equ	0xFEE
 16269                           plusw0	equ	0xFEB
 16270                           wreg	equ	0xFE8
 16271                           indf1	equ	0xFE7
 16272                           postdec1	equ	0xFE5
 16273                           fsr1h	equ	0xFE2
 16274                           fsr1l	equ	0xFE1
 16275                           indf2	equ	0xFDF
 16276                           postinc2	equ	0xFDE
 16277                           postdec2	equ	0xFDD
 16278                           plusw2	equ	0xFDB
 16279                           fsr2h	equ	0xFDA
 16280                           fsr2l	equ	0xFD9
 16281                           status	equ	0xFD8
 16282                           
 16283 ;; *************** function ___fttol *****************
 16284 ;; Defined at:
 16285 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 16286 ;; Parameters:    Size  Location     Type
 16287 ;;  f1              3   24[BANK0 ] float 
 16288 ;; Auto vars:     Size  Location     Type
 16289 ;;  lval            4   34[BANK0 ] unsigned long 
 16290 ;;  exp1            1   38[BANK0 ] unsigned char 
 16291 ;;  sign1           1   33[BANK0 ] unsigned char 
 16292 ;; Return value:  Size  Location     Type
 16293 ;;                  4   24[BANK0 ] long 
 16294 ;; Registers used:
 16295 ;;		wreg, status,2, status,0
 16296 ;; Tracked objects:
 16297 ;;		On entry : 0/0
 16298 ;;		On exit  : 0/0
 16299 ;;		Unchanged: 0/0
 16300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16301 ;;      Params:         0       4       0       0       0       0       0
 16302 ;;      Locals:         0       6       0       0       0       0       0
 16303 ;;      Temps:          0       5       0       0       0       0       0
 16304 ;;      Totals:         0      15       0       0       0       0       0
 16305 ;;Total ram usage:       15 bytes
 16306 ;; Hardware stack levels used:    1
 16307 ;; Hardware stack levels required when called:    4
 16308 ;; This function calls:
 16309 ;;		Nothing
 16310 ;; This function is called by:
 16311 ;;		_AdcConvert
 16312 ;;		_ReadIntFromEeprom
 16313 ;;		_pow
 16314 ;;		_exp
 16315 ;;		_floor
 16316 ;; This function uses a non-reentrant model
 16317 ;;
 16318                           
 16319                           	psect	text92
 16320  0024B0                     __ptext92:
 16321                           	opt stack 0
 16322  0024B0                     ___fttol:
 16323                           	opt stack 19
 16324                           
 16325                           ;incstack = 0
 16326  0024B0  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 16327  0024B4  0100               	movlb	0	; () banked
 16328  0024B6  6B7D               	clrf	(??___fttol+1)& (0+255),b
 16329  0024B8  6B7E               	clrf	(??___fttol+2)& (0+255),b
 16330  0024BA  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 16331  0024BC  377C               	rlcf	??___fttol& (0+255),f,b
 16332  0024BE  E301               	bnc	u7131
 16333  0024C0  817D               	bsf	(??___fttol+1)& (0+255),0,b
 16334  0024C2                     u7131:
 16335  0024C2  517C               	movf	??___fttol& (0+255),w,b
 16336  0024C4  6F86               	movwf	___fttol@exp1& (0+255),b
 16337  0024C6  5186               	movf	___fttol@exp1& (0+255),w,b
 16338  0024C8  A4D8               	btfss	status,2,c
 16339  0024CA  D009               	goto	l1925
 16340                           
 16341                           ; BSR set to: 0
 16342  0024CC  0E00               	movlw	0
 16343  0024CE  6F78               	movwf	?___fttol& (0+255),b
 16344  0024D0  0E00               	movlw	0
 16345  0024D2  6F79               	movwf	(?___fttol+1)& (0+255),b
 16346  0024D4  0E00               	movlw	0
 16347  0024D6  6F7A               	movwf	(?___fttol+2)& (0+255),b
 16348  0024D8  0E00               	movlw	0
 16349  0024DA  6F7B               	movwf	(?___fttol+3)& (0+255),b
 16350                           
 16351                           ; BSR set to: 0
 16352  0024DC  0012               	return	
 16353  0024DE                     l1925:
 16354                           
 16355                           ; BSR set to: 0
 16356                           
 16357                           ; BSR set to: 0
 16358  0024DE  0E17               	movlw	23
 16359  0024E0  6F7C               	movwf	??___fttol& (0+255),b
 16360  0024E2  C078  F07D         	movff	___fttol@f1,??___fttol+1
 16361  0024E6  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 16362  0024EA  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 16363  0024EE  297C               	incf	??___fttol& (0+255),w,b
 16364  0024F0  6F80               	movwf	(??___fttol+4)& (0+255),b
 16365  0024F2  D004               	goto	u7150
 16366  0024F4                     u7155:
 16367  0024F4  90D8               	bcf	status,0,c
 16368  0024F6  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 16369  0024F8  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 16370  0024FA  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 16371  0024FC                     u7150:
 16372  0024FC  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 16373  0024FE  D7FA               	goto	u7155
 16374  002500  0100               	movlb	0	; () banked
 16375  002502  517D               	movf	(??___fttol+1)& (0+255),w,b
 16376  002504  6F81               	movwf	___fttol@sign1& (0+255),b
 16377                           
 16378                           ; BSR set to: 0
 16379  002506  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 16380                           
 16381                           ; BSR set to: 0
 16382  002508  0EFF               	movlw	255
 16383  00250A  1778               	andwf	___fttol@f1& (0+255),f,b
 16384  00250C  0EFF               	movlw	255
 16385  00250E  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 16386  002510  0E00               	movlw	0
 16387  002512  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 16388                           
 16389                           ; BSR set to: 0
 16390  002514  5178               	movf	___fttol@f1& (0+255),w,b
 16391  002516  6F82               	movwf	___fttol@lval& (0+255),b
 16392  002518  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 16393  00251A  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 16394  00251C  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 16395  00251E  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 16396  002520  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 16397                           
 16398                           ; BSR set to: 0
 16399  002522  0E8E               	movlw	142
 16400  002524  5F86               	subwf	___fttol@exp1& (0+255),f,b
 16401                           
 16402                           ; BSR set to: 0
 16403  002526  AF86               	btfss	___fttol@exp1& (0+255),7,b
 16404  002528  D016               	goto	l1927
 16405                           
 16406                           ; BSR set to: 0
 16407  00252A  5186               	movf	___fttol@exp1& (0+255),w,b
 16408  00252C  0A80               	xorlw	128
 16409  00252E  0F8F               	addlw	143
 16410  002530  B0D8               	btfsc	status,0,c
 16411  002532  D009               	goto	l1928
 16412                           
 16413                           ; BSR set to: 0
 16414  002534  0E00               	movlw	0
 16415  002536  6F78               	movwf	?___fttol& (0+255),b
 16416  002538  0E00               	movlw	0
 16417  00253A  6F79               	movwf	(?___fttol+1)& (0+255),b
 16418  00253C  0E00               	movlw	0
 16419  00253E  6F7A               	movwf	(?___fttol+2)& (0+255),b
 16420  002540  0E00               	movlw	0
 16421  002542  6F7B               	movwf	(?___fttol+3)& (0+255),b
 16422                           
 16423                           ; BSR set to: 0
 16424  002544  0012               	return	
 16425  002546                     l1928:
 16426                           
 16427                           ; BSR set to: 0
 16428                           
 16429                           ; BSR set to: 0
 16430                           
 16431                           ; BSR set to: 0
 16432  002546  90D8               	bcf	status,0,c
 16433  002548  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 16434  00254A  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 16435  00254C  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 16436  00254E  3382               	rrcf	___fttol@lval& (0+255),f,b
 16437                           
 16438                           ; BSR set to: 0
 16439  002550  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 16440  002552  D7F9               	goto	l1928
 16441                           
 16442                           ; BSR set to: 0
 16443  002554  D015               	goto	u7190
 16444  002556                     l1927:
 16445                           
 16446                           ; BSR set to: 0
 16447                           
 16448                           ; BSR set to: 0
 16449  002556  0E17               	movlw	23
 16450  002558  6586               	cpfsgt	___fttol@exp1& (0+255),b
 16451  00255A  D00F               	goto	l1933
 16452                           
 16453                           ; BSR set to: 0
 16454  00255C  0E00               	movlw	0
 16455  00255E  6F78               	movwf	?___fttol& (0+255),b
 16456  002560  0E00               	movlw	0
 16457  002562  6F79               	movwf	(?___fttol+1)& (0+255),b
 16458  002564  0E00               	movlw	0
 16459  002566  6F7A               	movwf	(?___fttol+2)& (0+255),b
 16460  002568  0E00               	movlw	0
 16461  00256A  6F7B               	movwf	(?___fttol+3)& (0+255),b
 16462                           
 16463                           ; BSR set to: 0
 16464  00256C  0012               	return	
 16465  00256E                     
 16466                           ; BSR set to: 0
 16467                           
 16468                           ; BSR set to: 0
 16469  00256E  90D8               	bcf	status,0,c
 16470  002570  3782               	rlcf	___fttol@lval& (0+255),f,b
 16471  002572  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 16472  002574  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 16473  002576  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 16474  002578  0786               	decf	___fttol@exp1& (0+255),f,b
 16475  00257A                     l1933:
 16476                           
 16477                           ; BSR set to: 0
 16478                           
 16479                           ; BSR set to: 0
 16480  00257A  5186               	movf	___fttol@exp1& (0+255),w,b
 16481  00257C  A4D8               	btfss	status,2,c
 16482  00257E  D7F7               	goto	l1934
 16483  002580                     u7190:
 16484                           
 16485                           ; BSR set to: 0
 16486                           
 16487                           ; BSR set to: 0
 16488                           
 16489                           ; BSR set to: 0
 16490  002580  5181               	movf	___fttol@sign1& (0+255),w,b
 16491  002582  B4D8               	btfsc	status,2,c
 16492  002584  D008               	goto	l1936
 16493                           
 16494                           ; BSR set to: 0
 16495  002586  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 16496  002588  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 16497  00258A  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 16498  00258C  6D82               	negf	___fttol@lval& (0+255),b
 16499  00258E  0E00               	movlw	0
 16500  002590  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 16501  002592  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 16502  002594  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 16503  002596                     l1936:
 16504                           
 16505                           ; BSR set to: 0
 16506                           
 16507                           ; BSR set to: 0
 16508  002596  C082  F078         	movff	___fttol@lval,?___fttol
 16509  00259A  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 16510  00259E  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 16511  0025A2  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 16512  0025A6  0012               	return	
 16513  0025A8                     __end_of___fttol:
 16514                           	opt stack 0
 16515                           tosu	equ	0xFFF
 16516                           tosh	equ	0xFFE
 16517                           tosl	equ	0xFFD
 16518                           pclath	equ	0xFFA
 16519                           tblptru	equ	0xFF8
 16520                           tblptrh	equ	0xFF7
 16521                           tblptrl	equ	0xFF6
 16522                           tablat	equ	0xFF5
 16523                           prodh	equ	0xFF4
 16524                           prodl	equ	0xFF3
 16525                           intcon	equ	0xFF2
 16526                           intcon2	equ	0xFF1
 16527                           postinc0	equ	0xFEE
 16528                           plusw0	equ	0xFEB
 16529                           wreg	equ	0xFE8
 16530                           indf1	equ	0xFE7
 16531                           postdec1	equ	0xFE5
 16532                           fsr1h	equ	0xFE2
 16533                           fsr1l	equ	0xFE1
 16534                           indf2	equ	0xFDF
 16535                           postinc2	equ	0xFDE
 16536                           postdec2	equ	0xFDD
 16537                           plusw2	equ	0xFDB
 16538                           fsr2h	equ	0xFDA
 16539                           fsr2l	equ	0xFD9
 16540                           status	equ	0xFD8
 16541                           
 16542 ;; *************** function ___ftge *****************
 16543 ;; Defined at:
 16544 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 16545 ;; Parameters:    Size  Location     Type
 16546 ;;  ff1             3   23[COMRAM] float 
 16547 ;;  ff2             3   26[COMRAM] float 
 16548 ;; Auto vars:     Size  Location     Type
 16549 ;;		None
 16550 ;; Return value:  Size  Location     Type
 16551 ;;		None               void
 16552 ;; Registers used:
 16553 ;;		wreg, status,2, status,0
 16554 ;; Tracked objects:
 16555 ;;		On entry : 0/0
 16556 ;;		On exit  : 0/0
 16557 ;;		Unchanged: 0/0
 16558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16559 ;;      Params:         6       0       0       0       0       0       0
 16560 ;;      Locals:         0       0       0       0       0       0       0
 16561 ;;      Temps:          3       0       0       0       0       0       0
 16562 ;;      Totals:         9       0       0       0       0       0       0
 16563 ;;Total ram usage:        9 bytes
 16564 ;; Hardware stack levels used:    1
 16565 ;; Hardware stack levels required when called:    4
 16566 ;; This function calls:
 16567 ;;		Nothing
 16568 ;; This function is called by:
 16569 ;;		_CheckFlashPrecentage
 16570 ;;		_pow
 16571 ;;		_exp
 16572 ;;		_floor
 16573 ;; This function uses a non-reentrant model
 16574 ;;
 16575                           
 16576                           	psect	text93
 16577  003352                     __ptext93:
 16578                           	opt stack 0
 16579  003352                     ___ftge:
 16580                           	opt stack 19
 16581                           
 16582                           ; BSR set to: 0
 16583                           ;incstack = 0
 16584  003352  AE1A               	btfss	___ftge@ff1+2,7,c
 16585  003354  D016               	goto	l1897
 16586  003356  C018  F01E         	movff	___ftge@ff1,??___ftge
 16587  00335A  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 16588  00335E  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 16589  003362  1E1E               	comf	??___ftge,f,c
 16590  003364  1E1F               	comf	??___ftge+1,f,c
 16591  003366  1E20               	comf	??___ftge+2,f,c
 16592  003368  2A1E               	incf	??___ftge,f,c
 16593  00336A  0E00               	movlw	0
 16594  00336C  221F               	addwfc	??___ftge+1,f,c
 16595  00336E  2220               	addwfc	??___ftge+2,f,c
 16596  003370  0E00               	movlw	0
 16597  003372  241E               	addwf	??___ftge,w,c
 16598  003374  6E18               	movwf	___ftge@ff1,c
 16599  003376  0E00               	movlw	0
 16600  003378  201F               	addwfc	??___ftge+1,w,c
 16601  00337A  6E19               	movwf	___ftge@ff1+1,c
 16602  00337C  0E80               	movlw	128
 16603  00337E  2020               	addwfc	??___ftge+2,w,c
 16604  003380  6E1A               	movwf	___ftge@ff1+2,c
 16605  003382                     l1897:
 16606  003382  AE1D               	btfss	___ftge@ff2+2,7,c
 16607  003384  D016               	goto	l1898
 16608  003386  C01B  F01E         	movff	___ftge@ff2,??___ftge
 16609  00338A  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 16610  00338E  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 16611  003392  1E1E               	comf	??___ftge,f,c
 16612  003394  1E1F               	comf	??___ftge+1,f,c
 16613  003396  1E20               	comf	??___ftge+2,f,c
 16614  003398  2A1E               	incf	??___ftge,f,c
 16615  00339A  0E00               	movlw	0
 16616  00339C  221F               	addwfc	??___ftge+1,f,c
 16617  00339E  2220               	addwfc	??___ftge+2,f,c
 16618  0033A0  0E00               	movlw	0
 16619  0033A2  241E               	addwf	??___ftge,w,c
 16620  0033A4  6E1B               	movwf	___ftge@ff2,c
 16621  0033A6  0E00               	movlw	0
 16622  0033A8  201F               	addwfc	??___ftge+1,w,c
 16623  0033AA  6E1C               	movwf	___ftge@ff2+1,c
 16624  0033AC  0E80               	movlw	128
 16625  0033AE  2020               	addwfc	??___ftge+2,w,c
 16626  0033B0  6E1D               	movwf	___ftge@ff2+2,c
 16627  0033B2                     l1898:
 16628  0033B2  0E00               	movlw	0
 16629  0033B4  1A18               	xorwf	___ftge@ff1,f,c
 16630  0033B6  0E00               	movlw	0
 16631  0033B8  1A19               	xorwf	___ftge@ff1+1,f,c
 16632  0033BA  0E80               	movlw	128
 16633  0033BC  1A1A               	xorwf	___ftge@ff1+2,f,c
 16634  0033BE  0E00               	movlw	0
 16635  0033C0  1A1B               	xorwf	___ftge@ff2,f,c
 16636  0033C2  0E00               	movlw	0
 16637  0033C4  1A1C               	xorwf	___ftge@ff2+1,f,c
 16638  0033C6  0E80               	movlw	128
 16639  0033C8  1A1D               	xorwf	___ftge@ff2+2,f,c
 16640  0033CA  501B               	movf	___ftge@ff2,w,c
 16641  0033CC  5C18               	subwf	___ftge@ff1,w,c
 16642  0033CE  501C               	movf	___ftge@ff2+1,w,c
 16643  0033D0  5819               	subwfb	___ftge@ff1+1,w,c
 16644  0033D2  501D               	movf	___ftge@ff2+2,w,c
 16645  0033D4  581A               	subwfb	___ftge@ff1+2,w,c
 16646  0033D6  B0D8               	btfsc	status,0,c
 16647  0033D8  D002               	goto	l7053
 16648  0033DA  90D8               	bcf	status,0,c
 16649  0033DC  0012               	return	
 16650  0033DE                     l7053:
 16651  0033DE  80D8               	bsf	status,0,c
 16652  0033E0  0012               	return	
 16653  0033E2                     __end_of___ftge:
 16654                           	opt stack 0
 16655                           tosu	equ	0xFFF
 16656                           tosh	equ	0xFFE
 16657                           tosl	equ	0xFFD
 16658                           pclath	equ	0xFFA
 16659                           tblptru	equ	0xFF8
 16660                           tblptrh	equ	0xFF7
 16661                           tblptrl	equ	0xFF6
 16662                           tablat	equ	0xFF5
 16663                           prodh	equ	0xFF4
 16664                           prodl	equ	0xFF3
 16665                           intcon	equ	0xFF2
 16666                           intcon2	equ	0xFF1
 16667                           postinc0	equ	0xFEE
 16668                           plusw0	equ	0xFEB
 16669                           wreg	equ	0xFE8
 16670                           indf1	equ	0xFE7
 16671                           postdec1	equ	0xFE5
 16672                           fsr1h	equ	0xFE2
 16673                           fsr1l	equ	0xFE1
 16674                           indf2	equ	0xFDF
 16675                           postinc2	equ	0xFDE
 16676                           postdec2	equ	0xFDD
 16677                           plusw2	equ	0xFDB
 16678                           fsr2h	equ	0xFDA
 16679                           fsr2l	equ	0xFD9
 16680                           status	equ	0xFD8
 16681                           
 16682 ;; *************** function ___altoft *****************
 16683 ;; Defined at:
 16684 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 16685 ;; Parameters:    Size  Location     Type
 16686 ;;  c               4   39[BANK0 ] long 
 16687 ;; Auto vars:     Size  Location     Type
 16688 ;;  sign            1   47[COMRAM] unsigned char 
 16689 ;;  exp             1   46[COMRAM] unsigned char 
 16690 ;; Return value:  Size  Location     Type
 16691 ;;                  3   39[BANK0 ] float 
 16692 ;; Registers used:
 16693 ;;		wreg, status,2, status,0, cstack
 16694 ;; Tracked objects:
 16695 ;;		On entry : 0/0
 16696 ;;		On exit  : 0/0
 16697 ;;		Unchanged: 0/0
 16698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16699 ;;      Params:         0       4       0       0       0       0       0
 16700 ;;      Locals:         2       0       0       0       0       0       0
 16701 ;;      Temps:          0       4       0       0       0       0       0
 16702 ;;      Totals:         2       8       0       0       0       0       0
 16703 ;;Total ram usage:       10 bytes
 16704 ;; Hardware stack levels used:    1
 16705 ;; Hardware stack levels required when called:    5
 16706 ;; This function calls:
 16707 ;;		___ftpack
 16708 ;; This function is called by:
 16709 ;;		_floor
 16710 ;; This function uses a non-reentrant model
 16711 ;;
 16712                           
 16713                           	psect	text94
 16714  00356C                     __ptext94:
 16715                           	opt stack 0
 16716  00356C                     ___altoft:
 16717                           	opt stack 18
 16718                           
 16719                           ;incstack = 0
 16720  00356C  0E00               	movlw	0
 16721  00356E  6E30               	movwf	___altoft@sign,c
 16722  003570  0E8E               	movlw	142
 16723  003572  6E2F               	movwf	___altoft@exp,c
 16724  003574  0100               	movlb	0	; () banked
 16725  003576  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
 16726  003578  D011               	goto	l1695
 16727                           
 16728                           ; BSR set to: 0
 16729  00357A  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
 16730  00357C  1F89               	comf	(___altoft@c+2)& (0+255),f,b
 16731  00357E  1F88               	comf	(___altoft@c+1)& (0+255),f,b
 16732  003580  6D87               	negf	___altoft@c& (0+255),b
 16733  003582  0E00               	movlw	0
 16734  003584  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
 16735  003586  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
 16736  003588  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
 16737                           
 16738                           ; BSR set to: 0
 16739  00358A  0E01               	movlw	1
 16740  00358C  6E30               	movwf	___altoft@sign,c
 16741                           
 16742                           ; BSR set to: 0
 16743  00358E  D006               	goto	l1695
 16744  003590                     
 16745                           ; BSR set to: 0
 16746                           
 16747                           ; BSR set to: 0
 16748  003590  90D8               	bcf	status,0,c
 16749  003592  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
 16750  003594  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
 16751  003596  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
 16752  003598  3387               	rrcf	___altoft@c& (0+255),f,b
 16753  00359A  2A2F               	incf	___altoft@exp,f,c
 16754  00359C                     l1695:
 16755                           
 16756                           ; BSR set to: 0
 16757                           
 16758                           ; BSR set to: 0
 16759  00359C  0E00               	movlw	0
 16760  00359E  1587               	andwf	___altoft@c& (0+255),w,b
 16761  0035A0  6F8B               	movwf	??___altoft& (0+255),b
 16762  0035A2  0E00               	movlw	0
 16763  0035A4  1588               	andwf	(___altoft@c+1)& (0+255),w,b
 16764  0035A6  6F8C               	movwf	(??___altoft+1)& (0+255),b
 16765  0035A8  0E00               	movlw	0
 16766  0035AA  1589               	andwf	(___altoft@c+2)& (0+255),w,b
 16767  0035AC  6F8D               	movwf	(??___altoft+2)& (0+255),b
 16768  0035AE  0EFF               	movlw	255
 16769  0035B0  158A               	andwf	(___altoft@c+3)& (0+255),w,b
 16770  0035B2  6F8E               	movwf	(??___altoft+3)& (0+255),b
 16771  0035B4  518B               	movf	??___altoft& (0+255),w,b
 16772  0035B6  118C               	iorwf	(??___altoft+1)& (0+255),w,b
 16773  0035B8  118D               	iorwf	(??___altoft+2)& (0+255),w,b
 16774  0035BA  118E               	iorwf	(??___altoft+3)& (0+255),w,b
 16775  0035BC  A4D8               	btfss	status,2,c
 16776  0035BE  D7E8               	goto	l1696
 16777                           
 16778                           ; BSR set to: 0
 16779                           
 16780                           ; BSR set to: 0
 16781  0035C0  C087  F018         	movff	___altoft@c,___ftpack@arg
 16782  0035C4  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
 16783  0035C8  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 16784  0035CC  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 16785  0035D0  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 16786  0035D4  EC74  F017         	call	___ftpack	;wreg free
 16787  0035D8  C018  F087         	movff	?___ftpack,?___altoft
 16788  0035DC  C019  F088         	movff	?___ftpack+1,?___altoft+1
 16789  0035E0  C01A  F089         	movff	?___ftpack+2,?___altoft+2
 16790  0035E4  0012               	return	
 16791  0035E6                     __end_of___altoft:
 16792                           	opt stack 0
 16793                           tosu	equ	0xFFF
 16794                           tosh	equ	0xFFE
 16795                           tosl	equ	0xFFD
 16796                           pclath	equ	0xFFA
 16797                           tblptru	equ	0xFF8
 16798                           tblptrh	equ	0xFF7
 16799                           tblptrl	equ	0xFF6
 16800                           tablat	equ	0xFF5
 16801                           prodh	equ	0xFF4
 16802                           prodl	equ	0xFF3
 16803                           intcon	equ	0xFF2
 16804                           intcon2	equ	0xFF1
 16805                           postinc0	equ	0xFEE
 16806                           plusw0	equ	0xFEB
 16807                           wreg	equ	0xFE8
 16808                           indf1	equ	0xFE7
 16809                           postdec1	equ	0xFE5
 16810                           fsr1h	equ	0xFE2
 16811                           fsr1l	equ	0xFE1
 16812                           indf2	equ	0xFDF
 16813                           postinc2	equ	0xFDE
 16814                           postdec2	equ	0xFDD
 16815                           plusw2	equ	0xFDB
 16816                           fsr2h	equ	0xFDA
 16817                           fsr2l	equ	0xFD9
 16818                           status	equ	0xFD8
 16819                           
 16820 ;; *************** function _eval_poly *****************
 16821 ;; Defined at:
 16822 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 16823 ;; Parameters:    Size  Location     Type
 16824 ;;  x               3   36[BANK0 ] float 
 16825 ;;  d               2   39[BANK0 ] PTR const 
 16826 ;;		 -> log@coeff(27), exp@coeff(30), 
 16827 ;;  n               2   41[BANK0 ] int 
 16828 ;; Auto vars:     Size  Location     Type
 16829 ;;  res             3   43[BANK0 ] int 
 16830 ;; Return value:  Size  Location     Type
 16831 ;;                  3   36[BANK0 ] int 
 16832 ;; Registers used:
 16833 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16834 ;; Tracked objects:
 16835 ;;		On entry : 0/0
 16836 ;;		On exit  : 0/0
 16837 ;;		Unchanged: 0/0
 16838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16839 ;;      Params:         0       7       0       0       0       0       0
 16840 ;;      Locals:         0       3       0       0       0       0       0
 16841 ;;      Temps:          2       0       0       0       0       0       0
 16842 ;;      Totals:         2      10       0       0       0       0       0
 16843 ;;Total ram usage:       12 bytes
 16844 ;; Hardware stack levels used:    1
 16845 ;; Hardware stack levels required when called:    6
 16846 ;; This function calls:
 16847 ;;		___ftadd
 16848 ;;		___ftmul
 16849 ;;		___wmul
 16850 ;; This function is called by:
 16851 ;;		_exp
 16852 ;;		_log
 16853 ;; This function uses a non-reentrant model
 16854 ;;
 16855                           
 16856                           	psect	text95
 16857  002B14                     __ptext95:
 16858                           	opt stack 0
 16859  002B14                     _eval_poly:
 16860                           	opt stack 18
 16861                           
 16862                           ;incstack = 0
 16863  002B14  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 16864  002B18  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 16865  002B1C  0E00               	movlw	0
 16866  002B1E  6E1B               	movwf	___wmul@multiplicand+1,c
 16867  002B20  0E03               	movlw	3
 16868  002B22  6E1A               	movwf	___wmul@multiplicand,c
 16869  002B24  ECFC  F020         	call	___wmul	;wreg free
 16870  002B28  C087  F02F         	movff	eval_poly@d,??_eval_poly
 16871  002B2C  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 16872  002B30  5018               	movf	?___wmul,w,c
 16873  002B32  262F               	addwf	??_eval_poly,f,c
 16874  002B34  5019               	movf	?___wmul+1,w,c
 16875  002B36  2230               	addwfc	??_eval_poly+1,f,c
 16876  002B38  C02F  FFF6         	movff	??_eval_poly,tblptrl
 16877  002B3C  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 16878  002B40                     	if	0	;tblptru may be non-zero
 16879  002B40                     	endif
 16880  002B40                     	if	0	;tblptru may be non-zero
 16881  002B40                     	endif
 16882  002B40  0009               	tblrd		*+
 16883  002B42  CFF5 F08B          	movff	tablat,eval_poly@res
 16884  002B46  0009               	tblrd		*+
 16885  002B48  CFF5 F08C          	movff	tablat,eval_poly@res+1
 16886  002B4C  000A               	tblrd		*-
 16887  002B4E  CFF5 F08D          	movff	tablat,eval_poly@res+2
 16888  002B52  D03F               	goto	l2320
 16889  002B54  C08B  F06C         	movff	eval_poly@res,___ftmul@f2
 16890  002B58  C08C  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
 16891  002B5C  C08D  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
 16892  002B60  C084  F069         	movff	eval_poly@x,___ftmul@f1
 16893  002B64  C085  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
 16894  002B68  C086  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
 16895  002B6C  ECD4  F012         	call	___ftmul	;wreg free
 16896  002B70  C069  F078         	movff	?___ftmul,___ftadd@f1
 16897  002B74  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 16898  002B78  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 16899  002B7C  0E00               	movlw	0
 16900  002B7E  6E1B               	movwf	___wmul@multiplicand+1,c
 16901  002B80  0E03               	movlw	3
 16902  002B82  6E1A               	movwf	___wmul@multiplicand,c
 16903  002B84  0100               	movlb	0	; () banked
 16904  002B86  0789               	decf	eval_poly@n& (0+255),f,b
 16905  002B88  A0D8               	btfss	status,0,c
 16906  002B8A  078A               	decf	(eval_poly@n+1)& (0+255),f,b
 16907  002B8C  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 16908  002B90  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 16909  002B94  ECFC  F020         	call	___wmul	;wreg free
 16910  002B98  C087  F02F         	movff	eval_poly@d,??_eval_poly
 16911  002B9C  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 16912  002BA0  5018               	movf	?___wmul,w,c
 16913  002BA2  262F               	addwf	??_eval_poly,f,c
 16914  002BA4  5019               	movf	?___wmul+1,w,c
 16915  002BA6  2230               	addwfc	??_eval_poly+1,f,c
 16916  002BA8  C02F  FFF6         	movff	??_eval_poly,tblptrl
 16917  002BAC  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 16918  002BB0                     	if	0	;tblptru may be non-zero
 16919  002BB0                     	endif
 16920  002BB0                     	if	0	;tblptru may be non-zero
 16921  002BB0                     	endif
 16922  002BB0  0009               	tblrd		*+
 16923  002BB2  CFF5 F07B          	movff	tablat,___ftadd@f2
 16924  002BB6  0009               	tblrd		*+
 16925  002BB8  CFF5 F07C          	movff	tablat,___ftadd@f2+1
 16926  002BBC  000A               	tblrd		*-
 16927  002BBE  CFF5 F07D          	movff	tablat,___ftadd@f2+2
 16928  002BC2  EC59  F00D         	call	___ftadd	;wreg free
 16929  002BC6  C078  F08B         	movff	?___ftadd,eval_poly@res
 16930  002BCA  C079  F08C         	movff	?___ftadd+1,eval_poly@res+1
 16931  002BCE  C07A  F08D         	movff	?___ftadd+2,eval_poly@res+2
 16932  002BD2                     l2320:
 16933  002BD2  0100               	movlb	0	; () banked
 16934  002BD4  5189               	movf	eval_poly@n& (0+255),w,b
 16935  002BD6  118A               	iorwf	(eval_poly@n+1)& (0+255),w,b
 16936  002BD8  A4D8               	btfss	status,2,c
 16937  002BDA  D7BC               	goto	l2321
 16938                           
 16939                           ; BSR set to: 0
 16940  002BDC  C08B  F084         	movff	eval_poly@res,?_eval_poly
 16941  002BE0  C08C  F085         	movff	eval_poly@res+1,?_eval_poly+1
 16942  002BE4  C08D  F086         	movff	eval_poly@res+2,?_eval_poly+2
 16943                           
 16944                           ; BSR set to: 0
 16945  002BE8  0012               	return		;funcret
 16946  002BEA                     __end_of_eval_poly:
 16947                           	opt stack 0
 16948                           tosu	equ	0xFFF
 16949                           tosh	equ	0xFFE
 16950                           tosl	equ	0xFFD
 16951                           pclath	equ	0xFFA
 16952                           tblptru	equ	0xFF8
 16953                           tblptrh	equ	0xFF7
 16954                           tblptrl	equ	0xFF6
 16955                           tablat	equ	0xFF5
 16956                           prodh	equ	0xFF4
 16957                           prodl	equ	0xFF3
 16958                           intcon	equ	0xFF2
 16959                           intcon2	equ	0xFF1
 16960                           postinc0	equ	0xFEE
 16961                           plusw0	equ	0xFEB
 16962                           wreg	equ	0xFE8
 16963                           indf1	equ	0xFE7
 16964                           postdec1	equ	0xFE5
 16965                           fsr1h	equ	0xFE2
 16966                           fsr1l	equ	0xFE1
 16967                           indf2	equ	0xFDF
 16968                           postinc2	equ	0xFDE
 16969                           postdec2	equ	0xFDD
 16970                           plusw2	equ	0xFDB
 16971                           fsr2h	equ	0xFDA
 16972                           fsr2l	equ	0xFD9
 16973                           status	equ	0xFD8
 16974                           
 16975 ;; *************** function ___wmul *****************
 16976 ;; Defined at:
 16977 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 16978 ;; Parameters:    Size  Location     Type
 16979 ;;  multiplier      2   23[COMRAM] unsigned int 
 16980 ;;  multiplicand    2   25[COMRAM] unsigned int 
 16981 ;; Auto vars:     Size  Location     Type
 16982 ;;  product         2   27[COMRAM] unsigned int 
 16983 ;; Return value:  Size  Location     Type
 16984 ;;                  2   23[COMRAM] unsigned int 
 16985 ;; Registers used:
 16986 ;;		wreg, status,2, status,0, prodl, prodh
 16987 ;; Tracked objects:
 16988 ;;		On entry : 0/0
 16989 ;;		On exit  : 0/0
 16990 ;;		Unchanged: 0/0
 16991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16992 ;;      Params:         4       0       0       0       0       0       0
 16993 ;;      Locals:         2       0       0       0       0       0       0
 16994 ;;      Temps:          0       0       0       0       0       0       0
 16995 ;;      Totals:         6       0       0       0       0       0       0
 16996 ;;Total ram usage:        6 bytes
 16997 ;; Hardware stack levels used:    1
 16998 ;; Hardware stack levels required when called:    4
 16999 ;; This function calls:
 17000 ;;		Nothing
 17001 ;; This function is called by:
 17002 ;;		_GetMcuFwVersion
 17003 ;;		_eval_poly
 17004 ;; This function uses a non-reentrant model
 17005 ;;
 17006                           
 17007                           	psect	text96
 17008  0041F8                     __ptext96:
 17009                           	opt stack 0
 17010  0041F8                     ___wmul:
 17011                           	opt stack 19
 17012                           
 17013                           ; BSR set to: 0
 17014                           ;incstack = 0
 17015  0041F8  5018               	movf	___wmul@multiplier,w,c
 17016  0041FA  021A               	mulwf	___wmul@multiplicand,c
 17017  0041FC  CFF3 F01C          	movff	prodl,___wmul@product
 17018  004200  CFF4 F01D          	movff	prodh,___wmul@product+1
 17019  004204  5018               	movf	___wmul@multiplier,w,c
 17020  004206  021B               	mulwf	___wmul@multiplicand+1,c
 17021  004208  50F3               	movf	prodl,w,c
 17022  00420A  261D               	addwf	___wmul@product+1,f,c
 17023  00420C  5019               	movf	___wmul@multiplier+1,w,c
 17024  00420E  021A               	mulwf	___wmul@multiplicand,c
 17025  004210  50F3               	movf	prodl,w,c
 17026  004212  261D               	addwf	___wmul@product+1,f,c
 17027  004214  C01C  F018         	movff	___wmul@product,?___wmul
 17028  004218  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 17029  00421C  0012               	return	
 17030  00421E                     __end_of___wmul:
 17031                           	opt stack 0
 17032                           tosu	equ	0xFFF
 17033                           tosh	equ	0xFFE
 17034                           tosl	equ	0xFFD
 17035                           pclath	equ	0xFFA
 17036                           tblptru	equ	0xFF8
 17037                           tblptrh	equ	0xFF7
 17038                           tblptrl	equ	0xFF6
 17039                           tablat	equ	0xFF5
 17040                           prodh	equ	0xFF4
 17041                           prodl	equ	0xFF3
 17042                           intcon	equ	0xFF2
 17043                           intcon2	equ	0xFF1
 17044                           postinc0	equ	0xFEE
 17045                           plusw0	equ	0xFEB
 17046                           wreg	equ	0xFE8
 17047                           indf1	equ	0xFE7
 17048                           postdec1	equ	0xFE5
 17049                           fsr1h	equ	0xFE2
 17050                           fsr1l	equ	0xFE1
 17051                           indf2	equ	0xFDF
 17052                           postinc2	equ	0xFDE
 17053                           postdec2	equ	0xFDD
 17054                           plusw2	equ	0xFDB
 17055                           fsr2h	equ	0xFDA
 17056                           fsr2l	equ	0xFD9
 17057                           status	equ	0xFD8
 17058                           
 17059 ;; *************** function ___ftmul *****************
 17060 ;; Defined at:
 17061 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 17062 ;; Parameters:    Size  Location     Type
 17063 ;;  f1              3    9[BANK0 ] float 
 17064 ;;  f2              3   12[BANK0 ] float 
 17065 ;; Auto vars:     Size  Location     Type
 17066 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 17067 ;;  sign            1   23[BANK0 ] unsigned char 
 17068 ;;  cntr            1   22[BANK0 ] unsigned char 
 17069 ;;  exp             1   18[BANK0 ] unsigned char 
 17070 ;; Return value:  Size  Location     Type
 17071 ;;                  3    9[BANK0 ] float 
 17072 ;; Registers used:
 17073 ;;		wreg, status,2, status,0, cstack
 17074 ;; Tracked objects:
 17075 ;;		On entry : 0/0
 17076 ;;		On exit  : 0/0
 17077 ;;		Unchanged: 0/0
 17078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17079 ;;      Params:         0       6       0       0       0       0       0
 17080 ;;      Locals:         0       6       0       0       0       0       0
 17081 ;;      Temps:          0       3       0       0       0       0       0
 17082 ;;      Totals:         0      15       0       0       0       0       0
 17083 ;;Total ram usage:       15 bytes
 17084 ;; Hardware stack levels used:    1
 17085 ;; Hardware stack levels required when called:    5
 17086 ;; This function calls:
 17087 ;;		___ftpack
 17088 ;; This function is called by:
 17089 ;;		_AdcConvert
 17090 ;;		_CheckFlashPrecentage
 17091 ;;		_pow
 17092 ;;		_exp
 17093 ;;		_log
 17094 ;;		_eval_poly
 17095 ;; This function uses a non-reentrant model
 17096 ;;
 17097                           
 17098                           	psect	text97
 17099  0025A8                     __ptext97:
 17100                           	opt stack 0
 17101  0025A8                     ___ftmul:
 17102                           	opt stack 18
 17103                           
 17104                           ;incstack = 0
 17105  0025A8  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
 17106  0025AC  0100               	movlb	0	; () banked
 17107  0025AE  6B70               	clrf	(??___ftmul+1)& (0+255),b
 17108  0025B0  6B71               	clrf	(??___ftmul+2)& (0+255),b
 17109  0025B2  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 17110  0025B4  376F               	rlcf	??___ftmul& (0+255),f,b
 17111  0025B6  E301               	bnc	u7041
 17112  0025B8  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 17113  0025BA                     u7041:
 17114  0025BA  516F               	movf	??___ftmul& (0+255),w,b
 17115  0025BC  6F72               	movwf	___ftmul@exp& (0+255),b
 17116  0025BE  5172               	movf	___ftmul@exp& (0+255),w,b
 17117  0025C0  A4D8               	btfss	status,2,c
 17118  0025C2  D007               	goto	l1904
 17119                           
 17120                           ; BSR set to: 0
 17121  0025C4  0E00               	movlw	0
 17122  0025C6  6F69               	movwf	?___ftmul& (0+255),b
 17123  0025C8  0E00               	movlw	0
 17124  0025CA  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 17125  0025CC  0E00               	movlw	0
 17126  0025CE  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 17127                           
 17128                           ; BSR set to: 0
 17129  0025D0  0012               	return	
 17130  0025D2                     l1904:
 17131                           
 17132                           ; BSR set to: 0
 17133                           
 17134                           ; BSR set to: 0
 17135  0025D2  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
 17136  0025D6  6B70               	clrf	(??___ftmul+1)& (0+255),b
 17137  0025D8  6B71               	clrf	(??___ftmul+2)& (0+255),b
 17138  0025DA  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 17139  0025DC  376F               	rlcf	??___ftmul& (0+255),f,b
 17140  0025DE  E301               	bnc	u7061
 17141  0025E0  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 17142  0025E2                     u7061:
 17143  0025E2  516F               	movf	??___ftmul& (0+255),w,b
 17144  0025E4  6F77               	movwf	___ftmul@sign& (0+255),b
 17145  0025E6  5177               	movf	___ftmul@sign& (0+255),w,b
 17146  0025E8  A4D8               	btfss	status,2,c
 17147  0025EA  D007               	goto	l1906
 17148                           
 17149                           ; BSR set to: 0
 17150  0025EC  0E00               	movlw	0
 17151  0025EE  6F69               	movwf	?___ftmul& (0+255),b
 17152  0025F0  0E00               	movlw	0
 17153  0025F2  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 17154  0025F4  0E00               	movlw	0
 17155  0025F6  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 17156                           
 17157                           ; BSR set to: 0
 17158  0025F8  0012               	return	
 17159  0025FA                     l1906:
 17160                           
 17161                           ; BSR set to: 0
 17162                           
 17163                           ; BSR set to: 0
 17164  0025FA  5177               	movf	___ftmul@sign& (0+255),w,b
 17165  0025FC  0F7B               	addlw	123
 17166  0025FE  2772               	addwf	___ftmul@exp& (0+255),f,b
 17167                           
 17168                           ; BSR set to: 0
 17169  002600  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
 17170  002604  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 17171  002606  1B77               	xorwf	___ftmul@sign& (0+255),f,b
 17172  002608  0E80               	movlw	128
 17173  00260A  1777               	andwf	___ftmul@sign& (0+255),f,b
 17174                           
 17175                           ; BSR set to: 0
 17176  00260C  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 17177                           
 17178                           ; BSR set to: 0
 17179  00260E  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 17180                           
 17181                           ; BSR set to: 0
 17182  002610  0EFF               	movlw	255
 17183  002612  176C               	andwf	___ftmul@f2& (0+255),f,b
 17184  002614  0EFF               	movlw	255
 17185  002616  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 17186  002618  0E00               	movlw	0
 17187  00261A  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 17188                           
 17189                           ; BSR set to: 0
 17190  00261C  0E00               	movlw	0
 17191  00261E  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
 17192  002620  0E00               	movlw	0
 17193  002622  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 17194  002624  0E00               	movlw	0
 17195  002626  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 17196                           
 17197                           ; BSR set to: 0
 17198  002628  0E07               	movlw	7
 17199  00262A  6F76               	movwf	___ftmul@cntr& (0+255),b
 17200  00262C                     
 17201                           ; BSR set to: 0
 17202                           
 17203                           ; BSR set to: 0
 17204  00262C  A169               	btfss	___ftmul@f1& (0+255),0,b
 17205  00262E  D006               	goto	l1908
 17206                           
 17207                           ; BSR set to: 0
 17208  002630  516C               	movf	___ftmul@f2& (0+255),w,b
 17209  002632  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 17210  002634  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 17211  002636  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 17212  002638  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 17213  00263A  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 17214  00263C                     l1908:
 17215                           
 17216                           ; BSR set to: 0
 17217                           
 17218                           ; BSR set to: 0
 17219  00263C  90D8               	bcf	status,0,c
 17220  00263E  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 17221  002640  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 17222  002642  3369               	rrcf	___ftmul@f1& (0+255),f,b
 17223  002644  90D8               	bcf	status,0,c
 17224  002646  376C               	rlcf	___ftmul@f2& (0+255),f,b
 17225  002648  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 17226  00264A  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 17227                           
 17228                           ; BSR set to: 0
 17229  00264C  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 17230  00264E  D7EE               	goto	l1907
 17231                           
 17232                           ; BSR set to: 0
 17233                           
 17234                           ; BSR set to: 0
 17235  002650  0E09               	movlw	9
 17236  002652  6F76               	movwf	___ftmul@cntr& (0+255),b
 17237  002654                     
 17238                           ; BSR set to: 0
 17239                           
 17240                           ; BSR set to: 0
 17241  002654  A169               	btfss	___ftmul@f1& (0+255),0,b
 17242  002656  D006               	goto	l1911
 17243                           
 17244                           ; BSR set to: 0
 17245  002658  516C               	movf	___ftmul@f2& (0+255),w,b
 17246  00265A  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 17247  00265C  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 17248  00265E  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 17249  002660  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 17250  002662  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 17251  002664                     l1911:
 17252                           
 17253                           ; BSR set to: 0
 17254                           
 17255                           ; BSR set to: 0
 17256  002664  90D8               	bcf	status,0,c
 17257  002666  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 17258  002668  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 17259  00266A  3369               	rrcf	___ftmul@f1& (0+255),f,b
 17260  00266C  90D8               	bcf	status,0,c
 17261  00266E  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 17262  002670  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 17263  002672  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 17264                           
 17265                           ; BSR set to: 0
 17266  002674  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 17267  002676  D7EE               	goto	l1910
 17268                           
 17269                           ; BSR set to: 0
 17270                           
 17271                           ; BSR set to: 0
 17272  002678  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 17273  00267C  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 17274  002680  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 17275  002684  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
 17276  002688  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
 17277  00268C  EC74  F017         	call	___ftpack	;wreg free
 17278  002690  C018  F069         	movff	?___ftpack,?___ftmul
 17279  002694  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
 17280  002698  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
 17281  00269C  0012               	return	
 17282  00269E                     __end_of___ftmul:
 17283                           	opt stack 0
 17284                           tosu	equ	0xFFF
 17285                           tosh	equ	0xFFE
 17286                           tosl	equ	0xFFD
 17287                           pclath	equ	0xFFA
 17288                           tblptru	equ	0xFF8
 17289                           tblptrh	equ	0xFF7
 17290                           tblptrl	equ	0xFF6
 17291                           tablat	equ	0xFF5
 17292                           prodh	equ	0xFF4
 17293                           prodl	equ	0xFF3
 17294                           intcon	equ	0xFF2
 17295                           intcon2	equ	0xFF1
 17296                           postinc0	equ	0xFEE
 17297                           plusw0	equ	0xFEB
 17298                           wreg	equ	0xFE8
 17299                           indf1	equ	0xFE7
 17300                           postdec1	equ	0xFE5
 17301                           fsr1h	equ	0xFE2
 17302                           fsr1l	equ	0xFE1
 17303                           indf2	equ	0xFDF
 17304                           postinc2	equ	0xFDE
 17305                           postdec2	equ	0xFDD
 17306                           plusw2	equ	0xFDB
 17307                           fsr2h	equ	0xFDA
 17308                           fsr2l	equ	0xFD9
 17309                           status	equ	0xFD8
 17310                           
 17311 ;; *************** function ___ftsub *****************
 17312 ;; Defined at:
 17313 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 17314 ;; Parameters:    Size  Location     Type
 17315 ;;  f1              3   36[BANK0 ] float 
 17316 ;;  f2              3   39[BANK0 ] float 
 17317 ;; Auto vars:     Size  Location     Type
 17318 ;;		None
 17319 ;; Return value:  Size  Location     Type
 17320 ;;                  3   36[BANK0 ] float 
 17321 ;; Registers used:
 17322 ;;		wreg, status,2, status,0, cstack
 17323 ;; Tracked objects:
 17324 ;;		On entry : 0/0
 17325 ;;		On exit  : 0/0
 17326 ;;		Unchanged: 0/0
 17327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17328 ;;      Params:         0       6       0       0       0       0       0
 17329 ;;      Locals:         0       0       0       0       0       0       0
 17330 ;;      Temps:          0       0       0       0       0       0       0
 17331 ;;      Totals:         0       6       0       0       0       0       0
 17332 ;;Total ram usage:        6 bytes
 17333 ;; Hardware stack levels used:    1
 17334 ;; Hardware stack levels required when called:    6
 17335 ;; This function calls:
 17336 ;;		___ftadd
 17337 ;; This function is called by:
 17338 ;;		_exp
 17339 ;; This function uses a non-reentrant model
 17340 ;;
 17341                           
 17342                           	psect	text98
 17343  003CF2                     __ptext98:
 17344                           	opt stack 0
 17345  003CF2                     ___ftsub:
 17346                           	opt stack 18
 17347                           
 17348                           ;incstack = 0
 17349  003CF2  0100               	movlb	0	; () banked
 17350  003CF4  5187               	movf	___ftsub@f2& (0+255),w,b
 17351  003CF6  1188               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 17352  003CF8  1189               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 17353  003CFA  B4D8               	btfsc	status,2,c
 17354  003CFC  D006               	goto	l1921
 17355                           
 17356                           ; BSR set to: 0
 17357  003CFE  0E00               	movlw	0
 17358  003D00  1B87               	xorwf	___ftsub@f2& (0+255),f,b
 17359  003D02  0E00               	movlw	0
 17360  003D04  1B88               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 17361  003D06  0E80               	movlw	128
 17362  003D08  1B89               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 17363  003D0A                     l1921:
 17364                           
 17365                           ; BSR set to: 0
 17366                           
 17367                           ; BSR set to: 0
 17368  003D0A  C084  F078         	movff	___ftsub@f1,___ftadd@f1
 17369  003D0E  C085  F079         	movff	___ftsub@f1+1,___ftadd@f1+1
 17370  003D12  C086  F07A         	movff	___ftsub@f1+2,___ftadd@f1+2
 17371  003D16  C087  F07B         	movff	___ftsub@f2,___ftadd@f2
 17372  003D1A  C088  F07C         	movff	___ftsub@f2+1,___ftadd@f2+1
 17373  003D1E  C089  F07D         	movff	___ftsub@f2+2,___ftadd@f2+2
 17374  003D22  EC59  F00D         	call	___ftadd	;wreg free
 17375  003D26  C078  F084         	movff	?___ftadd,?___ftsub
 17376  003D2A  C079  F085         	movff	?___ftadd+1,?___ftsub+1
 17377  003D2E  C07A  F086         	movff	?___ftadd+2,?___ftsub+2
 17378  003D32  0012               	return	
 17379  003D34                     __end_of___ftsub:
 17380                           	opt stack 0
 17381                           tosu	equ	0xFFF
 17382                           tosh	equ	0xFFE
 17383                           tosl	equ	0xFFD
 17384                           pclath	equ	0xFFA
 17385                           tblptru	equ	0xFF8
 17386                           tblptrh	equ	0xFF7
 17387                           tblptrl	equ	0xFF6
 17388                           tablat	equ	0xFF5
 17389                           prodh	equ	0xFF4
 17390                           prodl	equ	0xFF3
 17391                           intcon	equ	0xFF2
 17392                           intcon2	equ	0xFF1
 17393                           postinc0	equ	0xFEE
 17394                           plusw0	equ	0xFEB
 17395                           wreg	equ	0xFE8
 17396                           indf1	equ	0xFE7
 17397                           postdec1	equ	0xFE5
 17398                           fsr1h	equ	0xFE2
 17399                           fsr1l	equ	0xFE1
 17400                           indf2	equ	0xFDF
 17401                           postinc2	equ	0xFDE
 17402                           postdec2	equ	0xFDD
 17403                           plusw2	equ	0xFDB
 17404                           fsr2h	equ	0xFDA
 17405                           fsr2l	equ	0xFD9
 17406                           status	equ	0xFD8
 17407                           
 17408 ;; *************** function ___ftadd *****************
 17409 ;; Defined at:
 17410 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 17411 ;; Parameters:    Size  Location     Type
 17412 ;;  f1              3   24[BANK0 ] float 
 17413 ;;  f2              3   27[BANK0 ] float 
 17414 ;; Auto vars:     Size  Location     Type
 17415 ;;  exp1            1   35[BANK0 ] unsigned char 
 17416 ;;  exp2            1   34[BANK0 ] unsigned char 
 17417 ;;  sign            1   33[BANK0 ] unsigned char 
 17418 ;; Return value:  Size  Location     Type
 17419 ;;                  3   24[BANK0 ] float 
 17420 ;; Registers used:
 17421 ;;		wreg, status,2, status,0, cstack
 17422 ;; Tracked objects:
 17423 ;;		On entry : 0/0
 17424 ;;		On exit  : 0/0
 17425 ;;		Unchanged: 0/0
 17426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17427 ;;      Params:         0       6       0       0       0       0       0
 17428 ;;      Locals:         0       3       0       0       0       0       0
 17429 ;;      Temps:          0       3       0       0       0       0       0
 17430 ;;      Totals:         0      12       0       0       0       0       0
 17431 ;;Total ram usage:       12 bytes
 17432 ;; Hardware stack levels used:    1
 17433 ;; Hardware stack levels required when called:    5
 17434 ;; This function calls:
 17435 ;;		___ftpack
 17436 ;; This function is called by:
 17437 ;;		___ftsub
 17438 ;;		_floor
 17439 ;;		_log
 17440 ;;		_eval_poly
 17441 ;; This function uses a non-reentrant model
 17442 ;;
 17443                           
 17444                           	psect	text99
 17445  001AB2                     __ptext99:
 17446                           	opt stack 0
 17447  001AB2                     ___ftadd:
 17448                           	opt stack 18
 17449                           
 17450                           ;incstack = 0
 17451  001AB2  C07A  F07E         	movff	___ftadd@f1+2,??___ftadd
 17452  001AB6  0100               	movlb	0	; () banked
 17453  001AB8  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 17454  001ABA  6B80               	clrf	(??___ftadd+2)& (0+255),b
 17455  001ABC  3579               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 17456  001ABE  377E               	rlcf	??___ftadd& (0+255),f,b
 17457  001AC0  E301               	bnc	u6831
 17458  001AC2  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 17459  001AC4                     u6831:
 17460  001AC4  517E               	movf	??___ftadd& (0+255),w,b
 17461  001AC6  6F83               	movwf	___ftadd@exp1& (0+255),b
 17462  001AC8  C07D  F07E         	movff	___ftadd@f2+2,??___ftadd
 17463  001ACC  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 17464  001ACE  6B80               	clrf	(??___ftadd+2)& (0+255),b
 17465  001AD0  357C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 17466  001AD2  377E               	rlcf	??___ftadd& (0+255),f,b
 17467  001AD4  E301               	bnc	u6841
 17468  001AD6  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 17469  001AD8                     u6841:
 17470  001AD8  517E               	movf	??___ftadd& (0+255),w,b
 17471  001ADA  6F82               	movwf	___ftadd@exp2& (0+255),b
 17472                           
 17473                           ; BSR set to: 0
 17474  001ADC  5183               	movf	___ftadd@exp1& (0+255),w,b
 17475  001ADE  B4D8               	btfsc	status,2,c
 17476  001AE0  D00B               	goto	u6870
 17477                           
 17478                           ; BSR set to: 0
 17479  001AE2  5182               	movf	___ftadd@exp2& (0+255),w,b
 17480  001AE4  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 17481  001AE6  B0D8               	btfsc	status,0,c
 17482  001AE8  D00E               	goto	l1856
 17483                           
 17484                           ; BSR set to: 0
 17485  001AEA  5183               	movf	___ftadd@exp1& (0+255),w,b
 17486  001AEC  0800               	sublw	0
 17487  001AEE  2582               	addwf	___ftadd@exp2& (0+255),w,b
 17488  001AF0  6F7E               	movwf	??___ftadd& (0+255),b
 17489  001AF2  0E18               	movlw	24
 17490  001AF4  657E               	cpfsgt	??___ftadd& (0+255),b
 17491  001AF6  D007               	goto	l1856
 17492  001AF8                     u6870:
 17493                           
 17494                           ; BSR set to: 0
 17495  001AF8  C07B  F078         	movff	___ftadd@f2,?___ftadd
 17496  001AFC  C07C  F079         	movff	___ftadd@f2+1,?___ftadd+1
 17497  001B00  C07D  F07A         	movff	___ftadd@f2+2,?___ftadd+2
 17498  001B04  0012               	return	
 17499  001B06                     l1856:
 17500                           
 17501                           ; BSR set to: 0
 17502                           
 17503                           ; BSR set to: 0
 17504  001B06  5182               	movf	___ftadd@exp2& (0+255),w,b
 17505  001B08  B4D8               	btfsc	status,2,c
 17506  001B0A  D00B               	goto	u6900
 17507                           
 17508                           ; BSR set to: 0
 17509  001B0C  5183               	movf	___ftadd@exp1& (0+255),w,b
 17510  001B0E  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 17511  001B10  B0D8               	btfsc	status,0,c
 17512  001B12  D00E               	goto	l1860
 17513                           
 17514                           ; BSR set to: 0
 17515  001B14  5182               	movf	___ftadd@exp2& (0+255),w,b
 17516  001B16  0800               	sublw	0
 17517  001B18  2583               	addwf	___ftadd@exp1& (0+255),w,b
 17518  001B1A  6F7E               	movwf	??___ftadd& (0+255),b
 17519  001B1C  0E18               	movlw	24
 17520  001B1E  657E               	cpfsgt	??___ftadd& (0+255),b
 17521  001B20  D007               	goto	l1860
 17522  001B22                     u6900:
 17523                           
 17524                           ; BSR set to: 0
 17525  001B22  C078  F078         	movff	___ftadd@f1,?___ftadd
 17526  001B26  C079  F079         	movff	___ftadd@f1+1,?___ftadd+1
 17527  001B2A  C07A  F07A         	movff	___ftadd@f1+2,?___ftadd+2
 17528  001B2E  0012               	return	
 17529  001B30                     l1860:
 17530                           
 17531                           ; BSR set to: 0
 17532                           
 17533                           ; BSR set to: 0
 17534  001B30  0E06               	movlw	6
 17535  001B32  6F81               	movwf	___ftadd@sign& (0+255),b
 17536                           
 17537                           ; BSR set to: 0
 17538  001B34  BF7A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 17539                           
 17540                           ; BSR set to: 0
 17541  001B36  8F81               	bsf	___ftadd@sign& (0+255),7,b
 17542                           
 17543                           ; BSR set to: 0
 17544                           
 17545                           ; BSR set to: 0
 17546  001B38  BF7D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 17547                           
 17548                           ; BSR set to: 0
 17549  001B3A  8D81               	bsf	___ftadd@sign& (0+255),6,b
 17550                           
 17551                           ; BSR set to: 0
 17552  001B3C  8F79               	bsf	(___ftadd@f1+1)& (0+255),7,b
 17553                           
 17554                           ; BSR set to: 0
 17555  001B3E  0EFF               	movlw	255
 17556  001B40  1778               	andwf	___ftadd@f1& (0+255),f,b
 17557  001B42  0EFF               	movlw	255
 17558  001B44  1779               	andwf	(___ftadd@f1+1)& (0+255),f,b
 17559  001B46  0E00               	movlw	0
 17560  001B48  177A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 17561  001B4A  8F7C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 17562                           
 17563                           ; BSR set to: 0
 17564  001B4C  0EFF               	movlw	255
 17565  001B4E  177B               	andwf	___ftadd@f2& (0+255),f,b
 17566  001B50  0EFF               	movlw	255
 17567  001B52  177C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 17568  001B54  0E00               	movlw	0
 17569  001B56  177D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 17570                           
 17571                           ; BSR set to: 0
 17572  001B58  5182               	movf	___ftadd@exp2& (0+255),w,b
 17573  001B5A  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 17574  001B5C  B0D8               	btfsc	status,0,c
 17575  001B5E  D01B               	goto	l1865
 17576  001B60                     u6930:
 17577                           
 17578                           ; BSR set to: 0
 17579                           
 17580                           ; BSR set to: 0
 17581  001B60  90D8               	bcf	status,0,c
 17582  001B62  377B               	rlcf	___ftadd@f2& (0+255),f,b
 17583  001B64  377C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 17584  001B66  377D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 17585  001B68  0782               	decf	___ftadd@exp2& (0+255),f,b
 17586                           
 17587                           ; BSR set to: 0
 17588  001B6A  5183               	movf	___ftadd@exp1& (0+255),w,b
 17589  001B6C  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 17590  001B6E  B4D8               	btfsc	status,2,c
 17591  001B70  D00D               	goto	l1870
 17592                           
 17593                           ; BSR set to: 0
 17594  001B72  0781               	decf	___ftadd@sign& (0+255),f,b
 17595  001B74  C081  F07E         	movff	___ftadd@sign,??___ftadd
 17596  001B78  0E07               	movlw	7
 17597  001B7A  177E               	andwf	??___ftadd& (0+255),f,b
 17598  001B7C  B4D8               	btfsc	status,2,c
 17599  001B7E  D006               	goto	l1870
 17600  001B80  D7EF               	goto	u6930
 17601  001B82                     
 17602                           ; BSR set to: 0
 17603                           
 17604                           ; BSR set to: 0
 17605  001B82  90D8               	bcf	status,0,c
 17606  001B84  337A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 17607  001B86  3379               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 17608  001B88  3378               	rrcf	___ftadd@f1& (0+255),f,b
 17609  001B8A  2B83               	incf	___ftadd@exp1& (0+255),f,b
 17610  001B8C                     l1870:
 17611                           
 17612                           ; BSR set to: 0
 17613                           
 17614                           ; BSR set to: 0
 17615  001B8C  5182               	movf	___ftadd@exp2& (0+255),w,b
 17616  001B8E  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 17617  001B90  B4D8               	btfsc	status,2,c
 17618  001B92  D01F               	goto	u7000
 17619  001B94  D7F6               	goto	l1871
 17620  001B96                     l1865:
 17621                           
 17622                           ; BSR set to: 0
 17623                           
 17624                           ; BSR set to: 0
 17625  001B96  5183               	movf	___ftadd@exp1& (0+255),w,b
 17626  001B98  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 17627  001B9A  B0D8               	btfsc	status,0,c
 17628  001B9C  D01A               	goto	u7000
 17629  001B9E                     u6970:
 17630                           
 17631                           ; BSR set to: 0
 17632                           
 17633                           ; BSR set to: 0
 17634  001B9E  90D8               	bcf	status,0,c
 17635  001BA0  3778               	rlcf	___ftadd@f1& (0+255),f,b
 17636  001BA2  3779               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 17637  001BA4  377A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 17638  001BA6  0783               	decf	___ftadd@exp1& (0+255),f,b
 17639                           
 17640                           ; BSR set to: 0
 17641  001BA8  5183               	movf	___ftadd@exp1& (0+255),w,b
 17642  001BAA  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 17643  001BAC  B4D8               	btfsc	status,2,c
 17644  001BAE  D00D               	goto	l1879
 17645                           
 17646                           ; BSR set to: 0
 17647  001BB0  0781               	decf	___ftadd@sign& (0+255),f,b
 17648  001BB2  C081  F07E         	movff	___ftadd@sign,??___ftadd
 17649  001BB6  0E07               	movlw	7
 17650  001BB8  177E               	andwf	??___ftadd& (0+255),f,b
 17651  001BBA  B4D8               	btfsc	status,2,c
 17652  001BBC  D006               	goto	l1879
 17653  001BBE  D7EF               	goto	u6970
 17654  001BC0                     
 17655                           ; BSR set to: 0
 17656                           
 17657                           ; BSR set to: 0
 17658  001BC0  90D8               	bcf	status,0,c
 17659  001BC2  337D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 17660  001BC4  337C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 17661  001BC6  337B               	rrcf	___ftadd@f2& (0+255),f,b
 17662  001BC8  2B82               	incf	___ftadd@exp2& (0+255),f,b
 17663  001BCA                     l1879:
 17664                           
 17665                           ; BSR set to: 0
 17666                           
 17667                           ; BSR set to: 0
 17668  001BCA  5182               	movf	___ftadd@exp2& (0+255),w,b
 17669  001BCC  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 17670  001BCE  A4D8               	btfss	status,2,c
 17671  001BD0  D7F7               	goto	l1880
 17672  001BD2                     u7000:
 17673                           
 17674                           ; BSR set to: 0
 17675                           
 17676                           ; BSR set to: 0
 17677                           
 17678                           ; BSR set to: 0
 17679  001BD2  AF81               	btfss	___ftadd@sign& (0+255),7,b
 17680  001BD4  D00C               	goto	l1882
 17681                           
 17682                           ; BSR set to: 0
 17683  001BD6  0EFF               	movlw	255
 17684  001BD8  1B78               	xorwf	___ftadd@f1& (0+255),f,b
 17685  001BDA  0EFF               	movlw	255
 17686  001BDC  1B79               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 17687  001BDE  0EFF               	movlw	255
 17688  001BE0  1B7A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 17689  001BE2  0E01               	movlw	1
 17690  001BE4  2778               	addwf	___ftadd@f1& (0+255),f,b
 17691  001BE6  0E00               	movlw	0
 17692  001BE8  2379               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 17693  001BEA  0E00               	movlw	0
 17694  001BEC  237A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 17695  001BEE                     l1882:
 17696                           
 17697                           ; BSR set to: 0
 17698  001BEE  AD81               	btfss	___ftadd@sign& (0+255),6,b
 17699  001BF0  D00C               	goto	l1883
 17700                           
 17701                           ; BSR set to: 0
 17702  001BF2  0EFF               	movlw	255
 17703  001BF4  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 17704  001BF6  0EFF               	movlw	255
 17705  001BF8  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 17706  001BFA  0EFF               	movlw	255
 17707  001BFC  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 17708  001BFE  0E01               	movlw	1
 17709  001C00  277B               	addwf	___ftadd@f2& (0+255),f,b
 17710  001C02  0E00               	movlw	0
 17711  001C04  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17712  001C06  0E00               	movlw	0
 17713  001C08  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17714  001C0A                     l1883:
 17715                           
 17716                           ; BSR set to: 0
 17717                           
 17718                           ; BSR set to: 0
 17719  001C0A  0E00               	movlw	0
 17720  001C0C  6F81               	movwf	___ftadd@sign& (0+255),b
 17721                           
 17722                           ; BSR set to: 0
 17723  001C0E  5178               	movf	___ftadd@f1& (0+255),w,b
 17724  001C10  277B               	addwf	___ftadd@f2& (0+255),f,b
 17725  001C12  5179               	movf	(___ftadd@f1+1)& (0+255),w,b
 17726  001C14  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17727  001C16  517A               	movf	(___ftadd@f1+2)& (0+255),w,b
 17728  001C18  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17729                           
 17730                           ; BSR set to: 0
 17731  001C1A  AF7D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 17732  001C1C  D00E               	goto	l1884
 17733                           
 17734                           ; BSR set to: 0
 17735  001C1E  0EFF               	movlw	255
 17736  001C20  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 17737  001C22  0EFF               	movlw	255
 17738  001C24  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 17739  001C26  0EFF               	movlw	255
 17740  001C28  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 17741  001C2A  0E01               	movlw	1
 17742  001C2C  277B               	addwf	___ftadd@f2& (0+255),f,b
 17743  001C2E  0E00               	movlw	0
 17744  001C30  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17745  001C32  0E00               	movlw	0
 17746  001C34  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17747                           
 17748                           ; BSR set to: 0
 17749  001C36  0E01               	movlw	1
 17750  001C38  6F81               	movwf	___ftadd@sign& (0+255),b
 17751  001C3A                     l1884:
 17752                           
 17753                           ; BSR set to: 0
 17754                           
 17755                           ; BSR set to: 0
 17756  001C3A  C07B  F018         	movff	___ftadd@f2,___ftpack@arg
 17757  001C3E  C07C  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 17758  001C42  C07D  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 17759  001C46  C083  F01B         	movff	___ftadd@exp1,___ftpack@exp
 17760  001C4A  C081  F01C         	movff	___ftadd@sign,___ftpack@sign
 17761  001C4E  EC74  F017         	call	___ftpack	;wreg free
 17762  001C52  C018  F078         	movff	?___ftpack,?___ftadd
 17763  001C56  C019  F079         	movff	?___ftpack+1,?___ftadd+1
 17764  001C5A  C01A  F07A         	movff	?___ftpack+2,?___ftadd+2
 17765  001C5E  0012               	return	
 17766  001C60                     __end_of___ftadd:
 17767                           	opt stack 0
 17768                           tosu	equ	0xFFF
 17769                           tosh	equ	0xFFE
 17770                           tosl	equ	0xFFD
 17771                           pclath	equ	0xFFA
 17772                           tblptru	equ	0xFF8
 17773                           tblptrh	equ	0xFF7
 17774                           tblptrl	equ	0xFF6
 17775                           tablat	equ	0xFF5
 17776                           prodh	equ	0xFF4
 17777                           prodl	equ	0xFF3
 17778                           intcon	equ	0xFF2
 17779                           intcon2	equ	0xFF1
 17780                           postinc0	equ	0xFEE
 17781                           plusw0	equ	0xFEB
 17782                           wreg	equ	0xFE8
 17783                           indf1	equ	0xFE7
 17784                           postdec1	equ	0xFE5
 17785                           fsr1h	equ	0xFE2
 17786                           fsr1l	equ	0xFE1
 17787                           indf2	equ	0xFDF
 17788                           postinc2	equ	0xFDE
 17789                           postdec2	equ	0xFDD
 17790                           plusw2	equ	0xFDB
 17791                           fsr2h	equ	0xFDA
 17792                           fsr2l	equ	0xFD9
 17793                           status	equ	0xFD8
 17794                           
 17795 ;; *************** function ___ftneg *****************
 17796 ;; Defined at:
 17797 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 17798 ;; Parameters:    Size  Location     Type
 17799 ;;  f1              3   23[COMRAM] float 
 17800 ;; Auto vars:     Size  Location     Type
 17801 ;;		None
 17802 ;; Return value:  Size  Location     Type
 17803 ;;                  3   23[COMRAM] float 
 17804 ;; Registers used:
 17805 ;;		wreg, status,2, status,0
 17806 ;; Tracked objects:
 17807 ;;		On entry : 0/0
 17808 ;;		On exit  : 0/0
 17809 ;;		Unchanged: 0/0
 17810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17811 ;;      Params:         3       0       0       0       0       0       0
 17812 ;;      Locals:         0       0       0       0       0       0       0
 17813 ;;      Temps:          0       0       0       0       0       0       0
 17814 ;;      Totals:         3       0       0       0       0       0       0
 17815 ;;Total ram usage:        3 bytes
 17816 ;; Hardware stack levels used:    1
 17817 ;; Hardware stack levels required when called:    4
 17818 ;; This function calls:
 17819 ;;		Nothing
 17820 ;; This function is called by:
 17821 ;;		_pow
 17822 ;;		_exp
 17823 ;; This function uses a non-reentrant model
 17824 ;;
 17825                           
 17826                           	psect	text100
 17827  004242                     __ptext100:
 17828                           	opt stack 0
 17829  004242                     ___ftneg:
 17830                           	opt stack 20
 17831                           
 17832                           ;incstack = 0
 17833  004242  5018               	movf	___ftneg@f1,w,c
 17834  004244  1019               	iorwf	___ftneg@f1+1,w,c
 17835  004246  101A               	iorwf	___ftneg@f1+2,w,c
 17836  004248  B4D8               	btfsc	status,2,c
 17837  00424A  D006               	goto	l1915
 17838  00424C  0E00               	movlw	0
 17839  00424E  1A18               	xorwf	___ftneg@f1,f,c
 17840  004250  0E00               	movlw	0
 17841  004252  1A19               	xorwf	___ftneg@f1+1,f,c
 17842  004254  0E80               	movlw	128
 17843  004256  1A1A               	xorwf	___ftneg@f1+2,f,c
 17844  004258                     l1915:
 17845  004258  C018  F018         	movff	___ftneg@f1,?___ftneg
 17846  00425C  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 17847  004260  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 17848  004264  0012               	return		;funcret
 17849  004266                     __end_of___ftneg:
 17850                           	opt stack 0
 17851                           tosu	equ	0xFFF
 17852                           tosh	equ	0xFFE
 17853                           tosl	equ	0xFFD
 17854                           pclath	equ	0xFFA
 17855                           tblptru	equ	0xFF8
 17856                           tblptrh	equ	0xFF7
 17857                           tblptrl	equ	0xFF6
 17858                           tablat	equ	0xFF5
 17859                           prodh	equ	0xFF4
 17860                           prodl	equ	0xFF3
 17861                           intcon	equ	0xFF2
 17862                           intcon2	equ	0xFF1
 17863                           postinc0	equ	0xFEE
 17864                           plusw0	equ	0xFEB
 17865                           wreg	equ	0xFE8
 17866                           indf1	equ	0xFE7
 17867                           postdec1	equ	0xFE5
 17868                           fsr1h	equ	0xFE2
 17869                           fsr1l	equ	0xFE1
 17870                           indf2	equ	0xFDF
 17871                           postinc2	equ	0xFDE
 17872                           postdec2	equ	0xFDD
 17873                           plusw2	equ	0xFDB
 17874                           fsr2h	equ	0xFDA
 17875                           fsr2l	equ	0xFD9
 17876                           status	equ	0xFD8
 17877                           
 17878 ;; *************** function ___ftdiv *****************
 17879 ;; Defined at:
 17880 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 17881 ;; Parameters:    Size  Location     Type
 17882 ;;  f1              3   40[COMRAM] float 
 17883 ;;  f2              3   43[COMRAM] float 
 17884 ;; Auto vars:     Size  Location     Type
 17885 ;;  f3              3    4[BANK0 ] float 
 17886 ;;  sign            1    8[BANK0 ] unsigned char 
 17887 ;;  exp             1    7[BANK0 ] unsigned char 
 17888 ;;  cntr            1    3[BANK0 ] unsigned char 
 17889 ;; Return value:  Size  Location     Type
 17890 ;;                  3   40[COMRAM] float 
 17891 ;; Registers used:
 17892 ;;		wreg, status,2, status,0, cstack
 17893 ;; Tracked objects:
 17894 ;;		On entry : 0/0
 17895 ;;		On exit  : 0/0
 17896 ;;		Unchanged: 0/0
 17897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17898 ;;      Params:         6       0       0       0       0       0       0
 17899 ;;      Locals:         0       6       0       0       0       0       0
 17900 ;;      Temps:          0       3       0       0       0       0       0
 17901 ;;      Totals:         6       9       0       0       0       0       0
 17902 ;;Total ram usage:       15 bytes
 17903 ;; Hardware stack levels used:    1
 17904 ;; Hardware stack levels required when called:    5
 17905 ;; This function calls:
 17906 ;;		___ftpack
 17907 ;; This function is called by:
 17908 ;;		_AdcConvert
 17909 ;;		_CheckFlashPrecentage
 17910 ;;		_exp
 17911 ;; This function uses a non-reentrant model
 17912 ;;
 17913                           
 17914                           	psect	text101
 17915  00269E                     __ptext101:
 17916                           	opt stack 0
 17917  00269E                     ___ftdiv:
 17918                           	opt stack 19
 17919                           
 17920                           ;incstack = 0
 17921  00269E  C02B  F060         	movff	___ftdiv@f1+2,??___ftdiv
 17922  0026A2  0100               	movlb	0	; () banked
 17923  0026A4  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 17924  0026A6  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 17925  0026A8  342A               	rlcf	___ftdiv@f1+1,w,c
 17926  0026AA  3760               	rlcf	??___ftdiv& (0+255),f,b
 17927  0026AC  E301               	bnc	u7241
 17928  0026AE  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 17929  0026B0                     u7241:
 17930  0026B0  5160               	movf	??___ftdiv& (0+255),w,b
 17931  0026B2  6F67               	movwf	___ftdiv@exp& (0+255),b
 17932  0026B4  5167               	movf	___ftdiv@exp& (0+255),w,b
 17933  0026B6  A4D8               	btfss	status,2,c
 17934  0026B8  D007               	goto	l1889
 17935                           
 17936                           ; BSR set to: 0
 17937  0026BA  0E00               	movlw	0
 17938  0026BC  6E29               	movwf	?___ftdiv,c
 17939  0026BE  0E00               	movlw	0
 17940  0026C0  6E2A               	movwf	?___ftdiv+1,c
 17941  0026C2  0E00               	movlw	0
 17942  0026C4  6E2B               	movwf	?___ftdiv+2,c
 17943                           
 17944                           ; BSR set to: 0
 17945  0026C6  0012               	return	
 17946  0026C8                     l1889:
 17947                           
 17948                           ; BSR set to: 0
 17949                           
 17950                           ; BSR set to: 0
 17951  0026C8  C02E  F060         	movff	___ftdiv@f2+2,??___ftdiv
 17952  0026CC  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 17953  0026CE  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 17954  0026D0  342D               	rlcf	___ftdiv@f2+1,w,c
 17955  0026D2  3760               	rlcf	??___ftdiv& (0+255),f,b
 17956  0026D4  E301               	bnc	u7261
 17957  0026D6  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 17958  0026D8                     u7261:
 17959  0026D8  5160               	movf	??___ftdiv& (0+255),w,b
 17960  0026DA  6F68               	movwf	___ftdiv@sign& (0+255),b
 17961  0026DC  5168               	movf	___ftdiv@sign& (0+255),w,b
 17962  0026DE  A4D8               	btfss	status,2,c
 17963  0026E0  D007               	goto	l1891
 17964                           
 17965                           ; BSR set to: 0
 17966  0026E2  0E00               	movlw	0
 17967  0026E4  6E29               	movwf	?___ftdiv,c
 17968  0026E6  0E00               	movlw	0
 17969  0026E8  6E2A               	movwf	?___ftdiv+1,c
 17970  0026EA  0E00               	movlw	0
 17971  0026EC  6E2B               	movwf	?___ftdiv+2,c
 17972                           
 17973                           ; BSR set to: 0
 17974  0026EE  0012               	return	
 17975  0026F0                     l1891:
 17976                           
 17977                           ; BSR set to: 0
 17978                           
 17979                           ; BSR set to: 0
 17980  0026F0  0E00               	movlw	0
 17981  0026F2  6F64               	movwf	___ftdiv@f3& (0+255),b
 17982  0026F4  0E00               	movlw	0
 17983  0026F6  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 17984  0026F8  0E00               	movlw	0
 17985  0026FA  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 17986                           
 17987                           ; BSR set to: 0
 17988  0026FC  5168               	movf	___ftdiv@sign& (0+255),w,b
 17989  0026FE  0F89               	addlw	137
 17990  002700  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 17991                           
 17992                           ; BSR set to: 0
 17993  002702  C02B  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 17994                           
 17995                           ; BSR set to: 0
 17996  002706  502E               	movf	___ftdiv@f2+2,w,c
 17997  002708  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 17998                           
 17999                           ; BSR set to: 0
 18000  00270A  0E80               	movlw	128
 18001  00270C  1768               	andwf	___ftdiv@sign& (0+255),f,b
 18002                           
 18003                           ; BSR set to: 0
 18004  00270E  8E2A               	bsf	___ftdiv@f1+1,7,c
 18005                           
 18006                           ; BSR set to: 0
 18007  002710  0EFF               	movlw	255
 18008  002712  1629               	andwf	___ftdiv@f1,f,c
 18009  002714  0EFF               	movlw	255
 18010  002716  162A               	andwf	___ftdiv@f1+1,f,c
 18011  002718  0E00               	movlw	0
 18012  00271A  162B               	andwf	___ftdiv@f1+2,f,c
 18013                           
 18014                           ; BSR set to: 0
 18015  00271C  8E2D               	bsf	___ftdiv@f2+1,7,c
 18016                           
 18017                           ; BSR set to: 0
 18018  00271E  0EFF               	movlw	255
 18019  002720  162C               	andwf	___ftdiv@f2,f,c
 18020  002722  0EFF               	movlw	255
 18021  002724  162D               	andwf	___ftdiv@f2+1,f,c
 18022  002726  0E00               	movlw	0
 18023  002728  162E               	andwf	___ftdiv@f2+2,f,c
 18024                           
 18025                           ; BSR set to: 0
 18026  00272A  0E18               	movlw	24
 18027  00272C  6F63               	movwf	___ftdiv@cntr& (0+255),b
 18028  00272E                     
 18029                           ; BSR set to: 0
 18030                           
 18031                           ; BSR set to: 0
 18032  00272E  90D8               	bcf	status,0,c
 18033  002730  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 18034  002732  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 18035  002734  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 18036                           
 18037                           ; BSR set to: 0
 18038  002736  502C               	movf	___ftdiv@f2,w,c
 18039  002738  5C29               	subwf	___ftdiv@f1,w,c
 18040  00273A  502D               	movf	___ftdiv@f2+1,w,c
 18041  00273C  582A               	subwfb	___ftdiv@f1+1,w,c
 18042  00273E  502E               	movf	___ftdiv@f2+2,w,c
 18043  002740  582B               	subwfb	___ftdiv@f1+2,w,c
 18044  002742  A0D8               	btfss	status,0,c
 18045  002744  D007               	goto	l1893
 18046                           
 18047                           ; BSR set to: 0
 18048  002746  502C               	movf	___ftdiv@f2,w,c
 18049  002748  5E29               	subwf	___ftdiv@f1,f,c
 18050  00274A  502D               	movf	___ftdiv@f2+1,w,c
 18051  00274C  5A2A               	subwfb	___ftdiv@f1+1,f,c
 18052  00274E  502E               	movf	___ftdiv@f2+2,w,c
 18053  002750  5A2B               	subwfb	___ftdiv@f1+2,f,c
 18054                           
 18055                           ; BSR set to: 0
 18056  002752  8164               	bsf	___ftdiv@f3& (0+255),0,b
 18057  002754                     l1893:
 18058                           
 18059                           ; BSR set to: 0
 18060  002754  90D8               	bcf	status,0,c
 18061  002756  3629               	rlcf	___ftdiv@f1,f,c
 18062  002758  362A               	rlcf	___ftdiv@f1+1,f,c
 18063  00275A  362B               	rlcf	___ftdiv@f1+2,f,c
 18064                           
 18065                           ; BSR set to: 0
 18066  00275C  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 18067  00275E  D7E7               	goto	l1892
 18068                           
 18069                           ; BSR set to: 0
 18070                           
 18071                           ; BSR set to: 0
 18072  002760  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 18073  002764  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 18074  002768  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 18075  00276C  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 18076  002770  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 18077  002774  EC74  F017         	call	___ftpack	;wreg free
 18078  002778  C018  F029         	movff	?___ftpack,?___ftdiv
 18079  00277C  C019  F02A         	movff	?___ftpack+1,?___ftdiv+1
 18080  002780  C01A  F02B         	movff	?___ftpack+2,?___ftdiv+2
 18081  002784  0012               	return	
 18082  002786                     __end_of___ftdiv:
 18083                           	opt stack 0
 18084                           tosu	equ	0xFFF
 18085                           tosh	equ	0xFFE
 18086                           tosl	equ	0xFFD
 18087                           pclath	equ	0xFFA
 18088                           tblptru	equ	0xFF8
 18089                           tblptrh	equ	0xFF7
 18090                           tblptrl	equ	0xFF6
 18091                           tablat	equ	0xFF5
 18092                           prodh	equ	0xFF4
 18093                           prodl	equ	0xFF3
 18094                           intcon	equ	0xFF2
 18095                           intcon2	equ	0xFF1
 18096                           postinc0	equ	0xFEE
 18097                           plusw0	equ	0xFEB
 18098                           wreg	equ	0xFE8
 18099                           indf1	equ	0xFE7
 18100                           postdec1	equ	0xFE5
 18101                           fsr1h	equ	0xFE2
 18102                           fsr1l	equ	0xFE1
 18103                           indf2	equ	0xFDF
 18104                           postinc2	equ	0xFDE
 18105                           postdec2	equ	0xFDD
 18106                           plusw2	equ	0xFDB
 18107                           fsr2h	equ	0xFDA
 18108                           fsr2l	equ	0xFD9
 18109                           status	equ	0xFD8
 18110                           
 18111 ;; *************** function ___awtoft *****************
 18112 ;; Defined at:
 18113 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 18114 ;; Parameters:    Size  Location     Type
 18115 ;;  c               2   31[COMRAM] int 
 18116 ;; Auto vars:     Size  Location     Type
 18117 ;;  sign            1   34[COMRAM] unsigned char 
 18118 ;; Return value:  Size  Location     Type
 18119 ;;                  3   31[COMRAM] float 
 18120 ;; Registers used:
 18121 ;;		wreg, status,2, status,0, cstack
 18122 ;; Tracked objects:
 18123 ;;		On entry : 0/0
 18124 ;;		On exit  : 0/0
 18125 ;;		Unchanged: 0/0
 18126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18127 ;;      Params:         3       0       0       0       0       0       0
 18128 ;;      Locals:         1       0       0       0       0       0       0
 18129 ;;      Temps:          0       0       0       0       0       0       0
 18130 ;;      Totals:         4       0       0       0       0       0       0
 18131 ;;Total ram usage:        4 bytes
 18132 ;; Hardware stack levels used:    1
 18133 ;; Hardware stack levels required when called:    5
 18134 ;; This function calls:
 18135 ;;		___ftpack
 18136 ;; This function is called by:
 18137 ;;		_ReadIntFromEeprom
 18138 ;;		_exp
 18139 ;;		_log
 18140 ;; This function uses a non-reentrant model
 18141 ;;
 18142                           
 18143                           	psect	text102
 18144  003ED2                     __ptext102:
 18145                           	opt stack 0
 18146  003ED2                     ___awtoft:
 18147                           	opt stack 19
 18148                           
 18149                           ;incstack = 0
 18150  003ED2  0E00               	movlw	0
 18151  003ED4  6E23               	movwf	___awtoft@sign,c
 18152  003ED6  AE21               	btfss	___awtoft@c+1,7,c
 18153  003ED8  D006               	goto	l1806
 18154  003EDA  6C20               	negf	___awtoft@c,c
 18155  003EDC  1E21               	comf	___awtoft@c+1,f,c
 18156  003EDE  B0D8               	btfsc	status,0,c
 18157  003EE0  2A21               	incf	___awtoft@c+1,f,c
 18158  003EE2  0E01               	movlw	1
 18159  003EE4  6E23               	movwf	___awtoft@sign,c
 18160  003EE6                     l1806:
 18161  003EE6  C020  F018         	movff	___awtoft@c,___ftpack@arg
 18162  003EEA  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 18163  003EEE  6A1A               	clrf	___ftpack@arg+2,c
 18164  003EF0  0E8E               	movlw	142
 18165  003EF2  6E1B               	movwf	___ftpack@exp,c
 18166  003EF4  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 18167  003EF8  EC74  F017         	call	___ftpack	;wreg free
 18168  003EFC  C018  F020         	movff	?___ftpack,?___awtoft
 18169  003F00  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 18170  003F04  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 18171  003F08  0012               	return	
 18172  003F0A                     __end_of___awtoft:
 18173                           	opt stack 0
 18174                           tosu	equ	0xFFF
 18175                           tosh	equ	0xFFE
 18176                           tosl	equ	0xFFD
 18177                           pclath	equ	0xFFA
 18178                           tblptru	equ	0xFF8
 18179                           tblptrh	equ	0xFF7
 18180                           tblptrl	equ	0xFF6
 18181                           tablat	equ	0xFF5
 18182                           prodh	equ	0xFF4
 18183                           prodl	equ	0xFF3
 18184                           intcon	equ	0xFF2
 18185                           intcon2	equ	0xFF1
 18186                           postinc0	equ	0xFEE
 18187                           plusw0	equ	0xFEB
 18188                           wreg	equ	0xFE8
 18189                           indf1	equ	0xFE7
 18190                           postdec1	equ	0xFE5
 18191                           fsr1h	equ	0xFE2
 18192                           fsr1l	equ	0xFE1
 18193                           indf2	equ	0xFDF
 18194                           postinc2	equ	0xFDE
 18195                           postdec2	equ	0xFDD
 18196                           plusw2	equ	0xFDB
 18197                           fsr2h	equ	0xFDA
 18198                           fsr2l	equ	0xFD9
 18199                           status	equ	0xFD8
 18200                           
 18201 ;; *************** function ___lltoft *****************
 18202 ;; Defined at:
 18203 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 18204 ;; Parameters:    Size  Location     Type
 18205 ;;  c               4   31[COMRAM] unsigned long 
 18206 ;; Auto vars:     Size  Location     Type
 18207 ;;  exp             1   39[COMRAM] unsigned char 
 18208 ;; Return value:  Size  Location     Type
 18209 ;;                  3   31[COMRAM] float 
 18210 ;; Registers used:
 18211 ;;		wreg, status,2, status,0, cstack
 18212 ;; Tracked objects:
 18213 ;;		On entry : 0/0
 18214 ;;		On exit  : 0/0
 18215 ;;		Unchanged: 0/0
 18216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18217 ;;      Params:         4       0       0       0       0       0       0
 18218 ;;      Locals:         1       0       0       0       0       0       0
 18219 ;;      Temps:          4       0       0       0       0       0       0
 18220 ;;      Totals:         9       0       0       0       0       0       0
 18221 ;;Total ram usage:        9 bytes
 18222 ;; Hardware stack levels used:    1
 18223 ;; Hardware stack levels required when called:    5
 18224 ;; This function calls:
 18225 ;;		___ftpack
 18226 ;; This function is called by:
 18227 ;;		_CheckFlashPrecentage
 18228 ;;		_pow
 18229 ;; This function uses a non-reentrant model
 18230 ;;
 18231                           
 18232                           	psect	text103
 18233  003916                     __ptext103:
 18234                           	opt stack 0
 18235  003916                     ___lltoft:
 18236                           	opt stack 20
 18237                           
 18238                           ;incstack = 0
 18239  003916  0E8E               	movlw	142
 18240  003918  6E28               	movwf	___lltoft@exp,c
 18241  00391A  D006               	goto	l1982
 18242  00391C  90D8               	bcf	status,0,c
 18243  00391E  3223               	rrcf	___lltoft@c+3,f,c
 18244  003920  3222               	rrcf	___lltoft@c+2,f,c
 18245  003922  3221               	rrcf	___lltoft@c+1,f,c
 18246  003924  3220               	rrcf	___lltoft@c,f,c
 18247  003926  2A28               	incf	___lltoft@exp,f,c
 18248  003928                     l1982:
 18249  003928  0E00               	movlw	0
 18250  00392A  1420               	andwf	___lltoft@c,w,c
 18251  00392C  6E24               	movwf	??___lltoft& (0+255),c
 18252  00392E  0E00               	movlw	0
 18253  003930  1421               	andwf	___lltoft@c+1,w,c
 18254  003932  6E25               	movwf	(??___lltoft+1)& (0+255),c
 18255  003934  0E00               	movlw	0
 18256  003936  1422               	andwf	___lltoft@c+2,w,c
 18257  003938  6E26               	movwf	(??___lltoft+2)& (0+255),c
 18258  00393A  0EFF               	movlw	255
 18259  00393C  1423               	andwf	___lltoft@c+3,w,c
 18260  00393E  6E27               	movwf	(??___lltoft+3)& (0+255),c
 18261  003940  5024               	movf	??___lltoft,w,c
 18262  003942  1025               	iorwf	??___lltoft+1,w,c
 18263  003944  1026               	iorwf	??___lltoft+2,w,c
 18264  003946  1027               	iorwf	??___lltoft+3,w,c
 18265  003948  A4D8               	btfss	status,2,c
 18266  00394A  D7E8               	goto	l1983
 18267  00394C  C020  F018         	movff	___lltoft@c,___ftpack@arg
 18268  003950  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 18269  003954  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 18270  003958  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 18271  00395C  0E00               	movlw	0
 18272  00395E  6E1C               	movwf	___ftpack@sign,c
 18273  003960  EC74  F017         	call	___ftpack	;wreg free
 18274  003964  C018  F020         	movff	?___ftpack,?___lltoft
 18275  003968  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 18276  00396C  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 18277  003970  0012               	return	
 18278  003972                     __end_of___lltoft:
 18279                           	opt stack 0
 18280                           tosu	equ	0xFFF
 18281                           tosh	equ	0xFFE
 18282                           tosl	equ	0xFFD
 18283                           pclath	equ	0xFFA
 18284                           tblptru	equ	0xFF8
 18285                           tblptrh	equ	0xFF7
 18286                           tblptrl	equ	0xFF6
 18287                           tablat	equ	0xFF5
 18288                           prodh	equ	0xFF4
 18289                           prodl	equ	0xFF3
 18290                           intcon	equ	0xFF2
 18291                           intcon2	equ	0xFF1
 18292                           postinc0	equ	0xFEE
 18293                           plusw0	equ	0xFEB
 18294                           wreg	equ	0xFE8
 18295                           indf1	equ	0xFE7
 18296                           postdec1	equ	0xFE5
 18297                           fsr1h	equ	0xFE2
 18298                           fsr1l	equ	0xFE1
 18299                           indf2	equ	0xFDF
 18300                           postinc2	equ	0xFDE
 18301                           postdec2	equ	0xFDD
 18302                           plusw2	equ	0xFDB
 18303                           fsr2h	equ	0xFDA
 18304                           fsr2l	equ	0xFD9
 18305                           status	equ	0xFD8
 18306                           
 18307 ;; *************** function ___lwtoft *****************
 18308 ;; Defined at:
 18309 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 18310 ;; Parameters:    Size  Location     Type
 18311 ;;  c               2   31[COMRAM] unsigned int 
 18312 ;; Auto vars:     Size  Location     Type
 18313 ;;		None
 18314 ;; Return value:  Size  Location     Type
 18315 ;;                  3   31[COMRAM] float 
 18316 ;; Registers used:
 18317 ;;		wreg, status,2, status,0, cstack
 18318 ;; Tracked objects:
 18319 ;;		On entry : 0/0
 18320 ;;		On exit  : 0/0
 18321 ;;		Unchanged: 0/0
 18322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18323 ;;      Params:         3       0       0       0       0       0       0
 18324 ;;      Locals:         0       0       0       0       0       0       0
 18325 ;;      Temps:          0       0       0       0       0       0       0
 18326 ;;      Totals:         3       0       0       0       0       0       0
 18327 ;;Total ram usage:        3 bytes
 18328 ;; Hardware stack levels used:    1
 18329 ;; Hardware stack levels required when called:    5
 18330 ;; This function calls:
 18331 ;;		___ftpack
 18332 ;; This function is called by:
 18333 ;;		_AdcConvert
 18334 ;; This function uses a non-reentrant model
 18335 ;;
 18336                           
 18337                           	psect	text104
 18338  004266                     __ptext104:
 18339                           	opt stack 0
 18340  004266                     ___lwtoft:
 18341                           	opt stack 24
 18342                           
 18343                           ;incstack = 0
 18344  004266  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 18345  00426A  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 18346  00426E  6A1A               	clrf	___ftpack@arg+2,c
 18347  004270  0E8E               	movlw	142
 18348  004272  6E1B               	movwf	___ftpack@exp,c
 18349  004274  0E00               	movlw	0
 18350  004276  6E1C               	movwf	___ftpack@sign,c
 18351  004278  EC74  F017         	call	___ftpack	;wreg free
 18352  00427C  C018  F020         	movff	?___ftpack,?___lwtoft
 18353  004280  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 18354  004284  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 18355  004288  0012               	return	
 18356  00428A                     __end_of___lwtoft:
 18357                           	opt stack 0
 18358                           tosu	equ	0xFFF
 18359                           tosh	equ	0xFFE
 18360                           tosl	equ	0xFFD
 18361                           pclath	equ	0xFFA
 18362                           tblptru	equ	0xFF8
 18363                           tblptrh	equ	0xFF7
 18364                           tblptrl	equ	0xFF6
 18365                           tablat	equ	0xFF5
 18366                           prodh	equ	0xFF4
 18367                           prodl	equ	0xFF3
 18368                           intcon	equ	0xFF2
 18369                           intcon2	equ	0xFF1
 18370                           postinc0	equ	0xFEE
 18371                           plusw0	equ	0xFEB
 18372                           wreg	equ	0xFE8
 18373                           indf1	equ	0xFE7
 18374                           postdec1	equ	0xFE5
 18375                           fsr1h	equ	0xFE2
 18376                           fsr1l	equ	0xFE1
 18377                           indf2	equ	0xFDF
 18378                           postinc2	equ	0xFDE
 18379                           postdec2	equ	0xFDD
 18380                           plusw2	equ	0xFDB
 18381                           fsr2h	equ	0xFDA
 18382                           fsr2l	equ	0xFD9
 18383                           status	equ	0xFD8
 18384                           
 18385 ;; *************** function ___ftpack *****************
 18386 ;; Defined at:
 18387 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 18388 ;; Parameters:    Size  Location     Type
 18389 ;;  arg             3   23[COMRAM] unsigned um
 18390 ;;  exp             1   26[COMRAM] unsigned char 
 18391 ;;  sign            1   27[COMRAM] unsigned char 
 18392 ;; Auto vars:     Size  Location     Type
 18393 ;;		None
 18394 ;; Return value:  Size  Location     Type
 18395 ;;                  3   23[COMRAM] float 
 18396 ;; Registers used:
 18397 ;;		wreg, status,2, status,0
 18398 ;; Tracked objects:
 18399 ;;		On entry : 0/0
 18400 ;;		On exit  : 0/0
 18401 ;;		Unchanged: 0/0
 18402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18403 ;;      Params:         5       0       0       0       0       0       0
 18404 ;;      Locals:         0       0       0       0       0       0       0
 18405 ;;      Temps:          3       0       0       0       0       0       0
 18406 ;;      Totals:         8       0       0       0       0       0       0
 18407 ;;Total ram usage:        8 bytes
 18408 ;; Hardware stack levels used:    1
 18409 ;; Hardware stack levels required when called:    4
 18410 ;; This function calls:
 18411 ;;		Nothing
 18412 ;; This function is called by:
 18413 ;;		___altoft
 18414 ;;		___awtoft
 18415 ;;		___ftadd
 18416 ;;		___ftdiv
 18417 ;;		___ftmul
 18418 ;;		___lltoft
 18419 ;;		___lwtoft
 18420 ;; This function uses a non-reentrant model
 18421 ;;
 18422                           
 18423                           	psect	text105
 18424  002EE8                     __ptext105:
 18425                           	opt stack 0
 18426  002EE8                     ___ftpack:
 18427                           	opt stack 18
 18428                           
 18429                           ;incstack = 0
 18430  002EE8  501B               	movf	___ftpack@exp,w,c
 18431  002EEA  B4D8               	btfsc	status,2,c
 18432  002EEC  D005               	goto	u6740
 18433  002EEE  5018               	movf	___ftpack@arg,w,c
 18434  002EF0  1019               	iorwf	___ftpack@arg+1,w,c
 18435  002EF2  101A               	iorwf	___ftpack@arg+2,w,c
 18436  002EF4  A4D8               	btfss	status,2,c
 18437  002EF6  D00C               	goto	l1825
 18438  002EF8                     u6740:
 18439  002EF8  0E00               	movlw	0
 18440  002EFA  6E18               	movwf	?___ftpack,c
 18441  002EFC  0E00               	movlw	0
 18442  002EFE  6E19               	movwf	?___ftpack+1,c
 18443  002F00  0E00               	movlw	0
 18444  002F02  6E1A               	movwf	?___ftpack+2,c
 18445  002F04  0012               	return	
 18446  002F06  2A1B               	incf	___ftpack@exp,f,c
 18447  002F08  90D8               	bcf	status,0,c
 18448  002F0A  321A               	rrcf	___ftpack@arg+2,f,c
 18449  002F0C  3219               	rrcf	___ftpack@arg+1,f,c
 18450  002F0E  3218               	rrcf	___ftpack@arg,f,c
 18451  002F10                     l1825:
 18452  002F10  0E00               	movlw	0
 18453  002F12  1418               	andwf	___ftpack@arg,w,c
 18454  002F14  6E1D               	movwf	??___ftpack& (0+255),c
 18455  002F16  0E00               	movlw	0
 18456  002F18  1419               	andwf	___ftpack@arg+1,w,c
 18457  002F1A  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 18458  002F1C  0EFE               	movlw	254
 18459  002F1E  141A               	andwf	___ftpack@arg+2,w,c
 18460  002F20  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 18461  002F22  501D               	movf	??___ftpack,w,c
 18462  002F24  101E               	iorwf	??___ftpack+1,w,c
 18463  002F26  101F               	iorwf	??___ftpack+2,w,c
 18464  002F28  B4D8               	btfsc	status,2,c
 18465  002F2A  D00C               	goto	l1828
 18466  002F2C  D7EC               	goto	l1826
 18467  002F2E  2A1B               	incf	___ftpack@exp,f,c
 18468  002F30  0E01               	movlw	1
 18469  002F32  2618               	addwf	___ftpack@arg,f,c
 18470  002F34  0E00               	movlw	0
 18471  002F36  2219               	addwfc	___ftpack@arg+1,f,c
 18472  002F38  0E00               	movlw	0
 18473  002F3A  221A               	addwfc	___ftpack@arg+2,f,c
 18474  002F3C  90D8               	bcf	status,0,c
 18475  002F3E  321A               	rrcf	___ftpack@arg+2,f,c
 18476  002F40  3219               	rrcf	___ftpack@arg+1,f,c
 18477  002F42  3218               	rrcf	___ftpack@arg,f,c
 18478  002F44                     l1828:
 18479  002F44  0E00               	movlw	0
 18480  002F46  1418               	andwf	___ftpack@arg,w,c
 18481  002F48  6E1D               	movwf	??___ftpack& (0+255),c
 18482  002F4A  0E00               	movlw	0
 18483  002F4C  1419               	andwf	___ftpack@arg+1,w,c
 18484  002F4E  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 18485  002F50  0EFF               	movlw	255
 18486  002F52  141A               	andwf	___ftpack@arg+2,w,c
 18487  002F54  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 18488  002F56  501D               	movf	??___ftpack,w,c
 18489  002F58  101E               	iorwf	??___ftpack+1,w,c
 18490  002F5A  101F               	iorwf	??___ftpack+2,w,c
 18491  002F5C  B4D8               	btfsc	status,2,c
 18492  002F5E  D006               	goto	l1831
 18493  002F60  D7E6               	goto	l1829
 18494  002F62  061B               	decf	___ftpack@exp,f,c
 18495  002F64  90D8               	bcf	status,0,c
 18496  002F66  3618               	rlcf	___ftpack@arg,f,c
 18497  002F68  3619               	rlcf	___ftpack@arg+1,f,c
 18498  002F6A  361A               	rlcf	___ftpack@arg+2,f,c
 18499  002F6C                     l1831:
 18500  002F6C  BE19               	btfsc	___ftpack@arg+1,7,c
 18501  002F6E  D003               	goto	u6780
 18502  002F70  0E02               	movlw	2
 18503  002F72  601B               	cpfslt	___ftpack@exp,c
 18504  002F74  D7F6               	goto	l1832
 18505  002F76                     u6780:
 18506  002F76  A01B               	btfss	___ftpack@exp,0,c
 18507  002F78  9E19               	bcf	___ftpack@arg+1,7,c
 18508  002F7A  90D8               	bcf	status,0,c
 18509  002F7C  321B               	rrcf	___ftpack@exp,f,c
 18510  002F7E  501B               	movf	___ftpack@exp,w,c
 18511  002F80  121A               	iorwf	___ftpack@arg+2,f,c
 18512  002F82  501C               	movf	___ftpack@sign,w,c
 18513  002F84  A4D8               	btfss	status,2,c
 18514  002F86  8E1A               	bsf	___ftpack@arg+2,7,c
 18515  002F88  C018  F018         	movff	___ftpack@arg,?___ftpack
 18516  002F8C  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 18517  002F90  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 18518  002F94  0012               	return	
 18519  002F96                     __end_of___ftpack:
 18520                           	opt stack 0
 18521                           tosu	equ	0xFFF
 18522                           tosh	equ	0xFFE
 18523                           tosl	equ	0xFFD
 18524                           pclath	equ	0xFFA
 18525                           tblptru	equ	0xFF8
 18526                           tblptrh	equ	0xFF7
 18527                           tblptrl	equ	0xFF6
 18528                           tablat	equ	0xFF5
 18529                           prodh	equ	0xFF4
 18530                           prodl	equ	0xFF3
 18531                           intcon	equ	0xFF2
 18532                           intcon2	equ	0xFF1
 18533                           postinc0	equ	0xFEE
 18534                           plusw0	equ	0xFEB
 18535                           wreg	equ	0xFE8
 18536                           indf1	equ	0xFE7
 18537                           postdec1	equ	0xFE5
 18538                           fsr1h	equ	0xFE2
 18539                           fsr1l	equ	0xFE1
 18540                           indf2	equ	0xFDF
 18541                           postinc2	equ	0xFDE
 18542                           postdec2	equ	0xFDD
 18543                           plusw2	equ	0xFDB
 18544                           fsr2h	equ	0xFDA
 18545                           fsr2l	equ	0xFD9
 18546                           status	equ	0xFD8
 18547                           
 18548 ;; *************** function _GetUint16FromBitArray *****************
 18549 ;; Defined at:
 18550 ;;		line 34 in file "SystemCommon.c"
 18551 ;; Parameters:    Size  Location     Type
 18552 ;;  bitarray        2   23[COMRAM] PTR unsigned char 
 18553 ;;		 -> synthLdTxArray(14), synthLdRxArray(14), 
 18554 ;; Auto vars:     Size  Location     Type
 18555 ;;  i               2   30[COMRAM] int 
 18556 ;;  res             2   28[COMRAM] unsigned int 
 18557 ;; Return value:  Size  Location     Type
 18558 ;;                  2   23[COMRAM] unsigned int 
 18559 ;; Registers used:
 18560 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18561 ;; Tracked objects:
 18562 ;;		On entry : 0/0
 18563 ;;		On exit  : 0/0
 18564 ;;		Unchanged: 0/0
 18565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18566 ;;      Params:         2       0       0       0       0       0       0
 18567 ;;      Locals:         4       0       0       0       0       0       0
 18568 ;;      Temps:          3       0       0       0       0       0       0
 18569 ;;      Totals:         9       0       0       0       0       0       0
 18570 ;;Total ram usage:        9 bytes
 18571 ;; Hardware stack levels used:    1
 18572 ;; Hardware stack levels required when called:    4
 18573 ;; This function calls:
 18574 ;;		Nothing
 18575 ;; This function is called by:
 18576 ;;		_AdcConvert
 18577 ;; This function uses a non-reentrant model
 18578 ;;
 18579                           
 18580                           	psect	text106
 18581  003B24                     __ptext106:
 18582                           	opt stack 0
 18583  003B24                     _GetUint16FromBitArray:
 18584                           	opt stack 25
 18585                           
 18586                           ;SystemCommon.c: 36: uint16_t res = 0;
 18587                           
 18588                           ;incstack = 0
 18589  003B24  0E00               	movlw	0
 18590  003B26  6E1E               	movwf	GetUint16FromBitArray@res+1,c
 18591  003B28  0E00               	movlw	0
 18592  003B2A  6E1D               	movwf	GetUint16FromBitArray@res,c
 18593                           
 18594                           ;SystemCommon.c: 37: for (int i = 0 ; i != 16 ; i++)
 18595  003B2C  0E00               	movlw	0
 18596  003B2E  6E20               	movwf	GetUint16FromBitArray@i+1,c
 18597  003B30  0E00               	movlw	0
 18598  003B32  6E1F               	movwf	GetUint16FromBitArray@i,c
 18599  003B34                     l6447:
 18600  003B34  0E10               	movlw	16
 18601  003B36  181F               	xorwf	GetUint16FromBitArray@i,w,c
 18602  003B38  1020               	iorwf	GetUint16FromBitArray@i+1,w,c
 18603  003B3A  B4D8               	btfsc	status,2,c
 18604  003B3C  0012               	return	
 18605                           
 18606                           ;SystemCommon.c: 38: {
 18607                           ;SystemCommon.c: 39: if (bitarray[i])
 18608  003B3E  501F               	movf	GetUint16FromBitArray@i,w,c
 18609  003B40  2418               	addwf	GetUint16FromBitArray@bitarray,w,c
 18610  003B42  6ED9               	movwf	fsr2l,c
 18611  003B44  5020               	movf	GetUint16FromBitArray@i+1,w,c
 18612  003B46  2019               	addwfc	GetUint16FromBitArray@bitarray+1,w,c
 18613  003B48  6EDA               	movwf	fsr2h,c
 18614  003B4A  50DF               	movf	indf2,w,c
 18615  003B4C  B4D8               	btfsc	status,2,c
 18616  003B4E  D011               	goto	l1414
 18617                           
 18618                           ;SystemCommon.c: 40: {
 18619                           ;SystemCommon.c: 41: res |= (uint16_t)(1 << i);
 18620  003B50  C01F  F01A         	movff	GetUint16FromBitArray@i,??_GetUint16FromBitArray
 18621  003B54  0E01               	movlw	1
 18622  003B56  6E1B               	movwf	(??_GetUint16FromBitArray+1)& (0+255),c
 18623  003B58  0E00               	movlw	0
 18624  003B5A  6E1C               	movwf	(??_GetUint16FromBitArray+2)& (0+255),c
 18625  003B5C  2A1A               	incf	??_GetUint16FromBitArray,f,c
 18626  003B5E  D003               	goto	u5944
 18627  003B60                     u5945:
 18628  003B60  90D8               	bcf	status,0,c
 18629  003B62  361B               	rlcf	??_GetUint16FromBitArray+1,f,c
 18630  003B64  361C               	rlcf	??_GetUint16FromBitArray+2,f,c
 18631  003B66                     u5944:
 18632  003B66  2E1A               	decfsz	??_GetUint16FromBitArray,f,c
 18633  003B68  D7FB               	goto	u5945
 18634  003B6A  501B               	movf	??_GetUint16FromBitArray+1,w,c
 18635  003B6C  121D               	iorwf	GetUint16FromBitArray@res,f,c
 18636  003B6E  501C               	movf	??_GetUint16FromBitArray+2,w,c
 18637  003B70  121E               	iorwf	GetUint16FromBitArray@res+1,f,c
 18638  003B72                     l1414:
 18639  003B72  4A1F               	infsnz	GetUint16FromBitArray@i,f,c
 18640  003B74  2A20               	incf	GetUint16FromBitArray@i+1,f,c
 18641  003B76  D7DE               	goto	l6447
 18642  003B78                     __end_of_GetUint16FromBitArray:
 18643                           	opt stack 0
 18644                           tosu	equ	0xFFF
 18645                           tosh	equ	0xFFE
 18646                           tosl	equ	0xFFD
 18647                           pclath	equ	0xFFA
 18648                           tblptru	equ	0xFF8
 18649                           tblptrh	equ	0xFF7
 18650                           tblptrl	equ	0xFF6
 18651                           tablat	equ	0xFF5
 18652                           prodh	equ	0xFF4
 18653                           prodl	equ	0xFF3
 18654                           intcon	equ	0xFF2
 18655                           intcon2	equ	0xFF1
 18656                           postinc0	equ	0xFEE
 18657                           plusw0	equ	0xFEB
 18658                           wreg	equ	0xFE8
 18659                           indf1	equ	0xFE7
 18660                           postdec1	equ	0xFE5
 18661                           fsr1h	equ	0xFE2
 18662                           fsr1l	equ	0xFE1
 18663                           indf2	equ	0xFDF
 18664                           postinc2	equ	0xFDE
 18665                           postdec2	equ	0xFDD
 18666                           plusw2	equ	0xFDB
 18667                           fsr2h	equ	0xFDA
 18668                           fsr2l	equ	0xFD9
 18669                           status	equ	0xFD8
 18670                           
 18671 ;; *************** function _FlashSampleWrite *****************
 18672 ;; Defined at:
 18673 ;;		line 29 in file "FlashApp.c"
 18674 ;; Parameters:    Size  Location     Type
 18675 ;;  sampleData      2   44[COMRAM] unsigned int 
 18676 ;;  channelNum      1   46[COMRAM] unsigned char 
 18677 ;; Auto vars:     Size  Location     Type
 18678 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 18679 ;; Return value:  Size  Location     Type
 18680 ;;                  1    wreg      void 
 18681 ;; Registers used:
 18682 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18683 ;; Tracked objects:
 18684 ;;		On entry : 0/0
 18685 ;;		On exit  : 0/0
 18686 ;;		Unchanged: 0/0
 18687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18688 ;;      Params:         3       0       0       0       0       0       0
 18689 ;;      Locals:         0       2       0       0       0       0       0
 18690 ;;      Temps:          0       2       0       0       0       0       0
 18691 ;;      Totals:         3       4       0       0       0       0       0
 18692 ;;Total ram usage:        7 bytes
 18693 ;; Hardware stack levels used:    1
 18694 ;; Hardware stack levels required when called:    6
 18695 ;; This function calls:
 18696 ;;		_FLASH_IsWriteDone
 18697 ;;		_FLASH_WriteBlock
 18698 ;; This function is called by:
 18699 ;;		_AdcConvert
 18700 ;; This function uses a non-reentrant model
 18701 ;;
 18702                           
 18703                           	psect	text107
 18704  0022B8                     __ptext107:
 18705                           	opt stack 0
 18706  0022B8                     _FlashSampleWrite:
 18707                           	opt stack 23
 18708                           
 18709                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 18710                           
 18711                           ;incstack = 0
 18712  0022B8  502F               	movf	FlashSampleWrite@channelNum,w,c
 18713  0022BA  0100               	movlb	0	; () banked
 18714  0022BC  6F60               	movwf	??_FlashSampleWrite& (0+255),b
 18715  0022BE  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
 18716  0022C0  0E0C               	movlw	12
 18717  0022C2                     u9195:
 18718  0022C2  90D8               	bcf	status,0,c
 18719  0022C4  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 18720  0022C6  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 18721  0022C8  2EE8               	decfsz	wreg,f,c
 18722  0022CA  D7FB               	goto	u9195
 18723  0022CC  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 18724  0022D0  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 18725                           
 18726                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 18727  0022D4  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 18728  0022D6  122D               	iorwf	FlashSampleWrite@sampleData,f,c
 18729  0022D8  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 18730  0022DA  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
 18731                           
 18732                           ; BSR set to: 0
 18733                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 18734  0022DC  90D8               	bcf	status,0,c
 18735  0022DE  0101               	movlb	1	; () banked
 18736  0022E0  352E               	rlcf	_sampleCount& (0+255),w,b
 18737  0022E2  6ED9               	movwf	fsr2l,c
 18738  0022E4  352F               	rlcf	(_sampleCount+1)& (0+255),w,b
 18739  0022E6  6EDA               	movwf	fsr2h,c
 18740  0022E8  0E34               	movlw	low _sampleArray
 18741  0022EA  26D9               	addwf	fsr2l,f,c
 18742  0022EC  0E01               	movlw	high _sampleArray
 18743  0022EE  22DA               	addwfc	fsr2h,f,c
 18744  0022F0  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 18745  0022F4  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 18746                           
 18747                           ; BSR set to: 1
 18748                           ;FlashApp.c: 35: sampleCount ++;
 18749  0022F8  4B2E               	infsnz	_sampleCount& (0+255),f,b
 18750  0022FA  2B2F               	incf	(_sampleCount+1)& (0+255),f,b
 18751                           
 18752                           ; BSR set to: 1
 18753                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 18754  0022FC  C12E  F060         	movff	_sampleCount,??_FlashSampleWrite
 18755  002300  C12F  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
 18756  002304  90D8               	bcf	status,0,c
 18757  002306  0100               	movlb	0	; () banked
 18758  002308  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 18759  00230A  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 18760  00230C  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 18761  00230E  E104               	bnz	u9200
 18762  002310  0E40               	movlw	64
 18763  002312  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
 18764  002314  A0D8               	btfss	status,0,c
 18765  002316  0012               	return	
 18766  002318                     u9200:
 18767                           
 18768                           ; BSR set to: 0
 18769  002318  EC33  F022         	call	_FLASH_IsWriteDone	;wreg free
 18770  00231C  0900               	iorlw	0
 18771  00231E  B4D8               	btfsc	status,2,c
 18772  002320  0012               	return	
 18773                           
 18774                           ;FlashApp.c: 38: {
 18775                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 18776  002322  C040  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 18777  002326  C041  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 18778  00232A  C042  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 18779  00232E  C043  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 18780  002332  0E34               	movlw	low _sampleArray
 18781  002334  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 18782  002336  0E01               	movlw	high _sampleArray
 18783  002338  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 18784  00233A  ECBF  F016         	call	_FLASH_WriteBlock	;wreg free
 18785                           
 18786                           ;FlashApp.c: 40: writeAddress += (64);
 18787  00233E  0E40               	movlw	64
 18788  002340  2640               	addwf	_writeAddress,f,c
 18789  002342  0E00               	movlw	0
 18790  002344  2241               	addwfc	_writeAddress+1,f,c
 18791  002346  2242               	addwfc	_writeAddress+2,f,c
 18792  002348  2243               	addwfc	_writeAddress+3,f,c
 18793                           
 18794                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 18795  00234A  5043               	movf	_writeAddress+3,w,c
 18796  00234C  1042               	iorwf	_writeAddress+2,w,c
 18797  00234E  E106               	bnz	u9220
 18798  002350  0EF0               	movlw	240
 18799  002352  5C40               	subwf	_writeAddress,w,c
 18800  002354  0E7F               	movlw	127
 18801  002356  5841               	subwfb	_writeAddress+1,w,c
 18802  002358  A0D8               	btfss	status,0,c
 18803  00235A  D018               	goto	l319
 18804  00235C                     u9220:
 18805                           
 18806                           ;FlashApp.c: 42: {
 18807                           ;FlashApp.c: 43: writeAddress = 0x4500;
 18808  00235C  0E00               	movlw	0
 18809  00235E  6E40               	movwf	_writeAddress,c
 18810  002360  0E45               	movlw	69
 18811  002362  6E41               	movwf	_writeAddress+1,c
 18812  002364  0E00               	movlw	0
 18813  002366  6E42               	movwf	_writeAddress+2,c
 18814  002368  0E00               	movlw	0
 18815  00236A  6E43               	movwf	_writeAddress+3,c
 18816                           
 18817                           ;FlashApp.c: 44: isReWriteDone = 1;
 18818  00236C  0E01               	movlw	1
 18819  00236E  0100               	movlb	0	; () banked
 18820  002370  6FE6               	movwf	_isReWriteDone& (0+255),b
 18821                           
 18822                           ; BSR set to: 0
 18823                           ;FlashApp.c: 45: if (readAddress == 0x4500)
 18824  002372  0E45               	movlw	69
 18825  002374  19F5               	xorwf	(_readAddress+1)& (0+255),w,b
 18826  002376  11F4               	iorwf	_readAddress& (0+255),w,b
 18827  002378  11F6               	iorwf	(_readAddress+2)& (0+255),w,b
 18828  00237A  11F7               	iorwf	(_readAddress+3)& (0+255),w,b
 18829  00237C  A4D8               	btfss	status,2,c
 18830  00237E  D006               	goto	l319
 18831                           
 18832                           ; BSR set to: 0
 18833                           ;FlashApp.c: 46: {
 18834                           ;FlashApp.c: 47: readAddress += (64);
 18835  002380  0E40               	movlw	64
 18836  002382  27F4               	addwf	_readAddress& (0+255),f,b
 18837  002384  0E00               	movlw	0
 18838  002386  23F5               	addwfc	(_readAddress+1)& (0+255),f,b
 18839  002388  23F6               	addwfc	(_readAddress+2)& (0+255),f,b
 18840  00238A  23F7               	addwfc	(_readAddress+3)& (0+255),f,b
 18841  00238C                     l319:
 18842                           
 18843                           ;FlashApp.c: 48: }
 18844                           ;FlashApp.c: 49: }
 18845                           ;FlashApp.c: 51: if (numOfValidateSamples < ((0x4500-0x7FF0)/(64)))
 18846                           
 18847                           ; BSR set to: 0
 18848  00238C  0E15               	movlw	21
 18849  00238E  5C31               	subwf	_numOfValidateSamples,w,c
 18850  002390  0EFF               	movlw	255
 18851  002392  5832               	subwfb	_numOfValidateSamples+1,w,c
 18852  002394  0EFF               	movlw	255
 18853  002396  5833               	subwfb	_numOfValidateSamples+2,w,c
 18854  002398  0EFF               	movlw	255
 18855  00239A  5834               	subwfb	_numOfValidateSamples+3,w,c
 18856  00239C  B0D8               	btfsc	status,0,c
 18857  00239E  D006               	goto	l320
 18858                           
 18859                           ;FlashApp.c: 52: {
 18860                           ;FlashApp.c: 53: numOfValidateSamples++;
 18861  0023A0  0E01               	movlw	1
 18862  0023A2  2631               	addwf	_numOfValidateSamples,f,c
 18863  0023A4  0E00               	movlw	0
 18864  0023A6  2232               	addwfc	_numOfValidateSamples+1,f,c
 18865  0023A8  2233               	addwfc	_numOfValidateSamples+2,f,c
 18866  0023AA  2234               	addwfc	_numOfValidateSamples+3,f,c
 18867  0023AC                     l320:
 18868                           
 18869                           ;FlashApp.c: 54: }
 18870                           ;FlashApp.c: 55: sampleCount = 0;
 18871  0023AC  0E00               	movlw	0
 18872  0023AE  0101               	movlb	1	; () banked
 18873  0023B0  6F2F               	movwf	(_sampleCount+1)& (0+255),b
 18874  0023B2  0E00               	movlw	0
 18875  0023B4  6F2E               	movwf	_sampleCount& (0+255),b
 18876  0023B6  0012               	return	
 18877  0023B8                     __end_of_FlashSampleWrite:
 18878                           	opt stack 0
 18879                           tosu	equ	0xFFF
 18880                           tosh	equ	0xFFE
 18881                           tosl	equ	0xFFD
 18882                           pclath	equ	0xFFA
 18883                           tblptru	equ	0xFF8
 18884                           tblptrh	equ	0xFF7
 18885                           tblptrl	equ	0xFF6
 18886                           tablat	equ	0xFF5
 18887                           prodh	equ	0xFF4
 18888                           prodl	equ	0xFF3
 18889                           intcon	equ	0xFF2
 18890                           intcon2	equ	0xFF1
 18891                           postinc0	equ	0xFEE
 18892                           plusw0	equ	0xFEB
 18893                           wreg	equ	0xFE8
 18894                           indf1	equ	0xFE7
 18895                           postdec1	equ	0xFE5
 18896                           fsr1h	equ	0xFE2
 18897                           fsr1l	equ	0xFE1
 18898                           indf2	equ	0xFDF
 18899                           postinc2	equ	0xFDE
 18900                           postdec2	equ	0xFDD
 18901                           plusw2	equ	0xFDB
 18902                           fsr2h	equ	0xFDA
 18903                           fsr2l	equ	0xFD9
 18904                           status	equ	0xFD8
 18905                           
 18906 ;; *************** function _FLASH_WriteBlock *****************
 18907 ;; Defined at:
 18908 ;;		line 93 in file "mcc_generated_files/memory.c"
 18909 ;; Parameters:    Size  Location     Type
 18910 ;;  writeAddr       4   28[COMRAM] unsigned long 
 18911 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 18912 ;;		 -> sampleArray(64), 
 18913 ;; Auto vars:     Size  Location     Type
 18914 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 18915 ;;  i               1   43[COMRAM] unsigned char 
 18916 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 18917 ;; Return value:  Size  Location     Type
 18918 ;;                  1    wreg      char 
 18919 ;; Registers used:
 18920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18921 ;; Tracked objects:
 18922 ;;		On entry : 0/0
 18923 ;;		On exit  : 0/0
 18924 ;;		Unchanged: 0/0
 18925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18926 ;;      Params:         6       0       0       0       0       0       0
 18927 ;;      Locals:         6       0       0       0       0       0       0
 18928 ;;      Temps:          4       0       0       0       0       0       0
 18929 ;;      Totals:        16       0       0       0       0       0       0
 18930 ;;Total ram usage:       16 bytes
 18931 ;; Hardware stack levels used:    1
 18932 ;; Hardware stack levels required when called:    5
 18933 ;; This function calls:
 18934 ;;		_FLASH_EraseBlock
 18935 ;; This function is called by:
 18936 ;;		_FlashSampleWrite
 18937 ;;		_FLASH_WriteByte
 18938 ;; This function uses a non-reentrant model
 18939 ;;
 18940                           
 18941                           	psect	text108
 18942  002D7E                     __ptext108:
 18943                           	opt stack 0
 18944  002D7E                     _FLASH_WriteBlock:
 18945                           	opt stack 23
 18946                           
 18947                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 18948                           
 18949                           ;incstack = 0
 18950  002D7E  0EC0               	movlw	192
 18951  002D80  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 18952  002D82  0E7F               	movlw	127
 18953  002D84  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 18954  002D86  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 18955  002D8A  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 18956  002D8E  5023               	movf	??_FLASH_WriteBlock,w,c
 18957  002D90  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 18958  002D92  5024               	movf	??_FLASH_WriteBlock+1,w,c
 18959  002D94  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 18960  002D96  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 18961  002D9A  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 18962  002D9E  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 18963  002DA0  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 18964                           
 18965                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 18966  002DA2  0E00               	movlw	0
 18967  002DA4  BEF2               	btfsc	intcon,7,c	;volatile
 18968  002DA6  0E01               	movlw	1
 18969  002DA8  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 18970                           
 18971                           ;memory.c: 97: uint8_t i;
 18972                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 18973  002DAA  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 18974  002DAC  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 18975  002DAE  E144               	bnz	l1056
 18976  002DB0  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 18977  002DB2  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 18978  002DB4  E141               	bnz	l1056
 18979  002DB6  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 18980  002DB8  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 18981  002DBA  E13E               	bnz	l1056
 18982  002DBC  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 18983  002DBE  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 18984  002DC0  A4D8               	btfss	status,2,c
 18985  002DC2  0012               	return	
 18986                           
 18987                           ;memory.c: 103: }
 18988                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 18989                           
 18990                           ;memory.c: 101: {
 18991                           ;memory.c: 102: return -1;
 18992                           ;	Return value of _FLASH_WriteBlock is never used
 18993  002DC4  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 18994  002DC8  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 18995  002DCC  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 18996  002DD0  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 18997  002DD4  EC0B  F020         	call	_FLASH_EraseBlock	;wreg free
 18998                           
 18999                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 19000  002DD8  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 19001                           
 19002                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 19003  002DDC  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 19004                           
 19005                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 19006  002DE0  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 19007                           
 19008                           ;memory.c: 114: for (i=0; i<(64); i++)
 19009  002DE4  0E00               	movlw	0
 19010  002DE6  6E2C               	movwf	FLASH_WriteBlock@i,c
 19011  002DE8                     l8273:
 19012  002DE8  0E3F               	movlw	63
 19013  002DEA  642C               	cpfsgt	FLASH_WriteBlock@i,c
 19014  002DEC  D001               	goto	l1057
 19015  002DEE  D013               	goto	u8650
 19016  002DF0                     l1057:
 19017                           
 19018                           ;memory.c: 115: {
 19019                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 19020  002DF0  502C               	movf	FLASH_WriteBlock@i,w,c
 19021  002DF2  0D01               	mullw	1
 19022  002DF4  50F3               	movf	prodl,w,c
 19023  002DF6  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 19024  002DF8  6ED9               	movwf	fsr2l,c
 19025  002DFA  50F4               	movf	prodh,w,c
 19026  002DFC  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 19027  002DFE  6EDA               	movwf	fsr2h,c
 19028  002E00  50DF               	movf	indf2,w,c
 19029  002E02  6EF5               	movwf	tablat,c	;volatile
 19030                           
 19031                           ;memory.c: 118: if (i == ((64)-1))
 19032  002E04  0E3F               	movlw	63
 19033  002E06  182C               	xorwf	FLASH_WriteBlock@i,w,c
 19034  002E08  A4D8               	btfss	status,2,c
 19035  002E0A  D002               	goto	l1059
 19036  002E0C  000C               	tblwt		*	;# 
 19037                           
 19038                           ;memory.c: 121: }
 19039  002E0E  D001               	goto	l1060
 19040  002E10                     l1059:
 19041  002E10  000D               	tblwt		*+	;# 
 19042  002E12                     l1060:
 19043  002E12  2A2C               	incf	FLASH_WriteBlock@i,f,c
 19044  002E14  D7E9               	goto	l8273
 19045  002E16                     u8650:
 19046                           
 19047                           ;memory.c: 125: }
 19048                           ;memory.c: 126: }
 19049                           ;memory.c: 128: PIR2bits.EEIF = 1;
 19050  002E16  88A1               	bsf	4001,4,c	;volatile
 19051                           
 19052                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 19053  002E18  8EA6               	bsf	4006,7,c	;volsfr
 19054                           
 19055                           ;memory.c: 130: EECON1bits.CFGS = 0;
 19056  002E1A  9CA6               	bcf	4006,6,c	;volsfr
 19057                           
 19058                           ;memory.c: 131: EECON1bits.WREN = 1;
 19059  002E1C  84A6               	bsf	4006,2,c	;volsfr
 19060                           
 19061                           ;memory.c: 132: INTCONbits.GIE = 0;
 19062  002E1E  9EF2               	bcf	intcon,7,c	;volatile
 19063                           
 19064                           ;memory.c: 133: EECON2 = 0x55;
 19065  002E20  0E55               	movlw	85
 19066  002E22  6EA7               	movwf	4007,c	;volsfr
 19067                           
 19068                           ;memory.c: 134: EECON2 = 0xAA;
 19069  002E24  0EAA               	movlw	170
 19070  002E26  6EA7               	movwf	4007,c	;volsfr
 19071                           
 19072                           ;memory.c: 135: EECON1bits.WR = 1;
 19073  002E28  82A6               	bsf	4006,1,c	;volsfr
 19074                           
 19075                           ;memory.c: 137: EECON1bits.WREN = 0;
 19076  002E2A  94A6               	bcf	4006,2,c	;volsfr
 19077                           
 19078                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 19079  002E2C  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 19080  002E2E  D002               	bra	u8665
 19081  002E30  9EF2               	bcf	intcon,7,c	;volatile
 19082  002E32  D001               	bra	u8666
 19083  002E34                     u8665:
 19084  002E34  8EF2               	bsf	intcon,7,c	;volatile
 19085  002E36                     u8666:
 19086  002E36  0012               	return	
 19087  002E38                     l1056:
 19088  002E38  0012               	return		;funcret
 19089  002E3A                     __end_of_FLASH_WriteBlock:
 19090                           	opt stack 0
 19091                           tosu	equ	0xFFF
 19092                           tosh	equ	0xFFE
 19093                           tosl	equ	0xFFD
 19094                           pclath	equ	0xFFA
 19095                           tblptru	equ	0xFF8
 19096                           tblptrh	equ	0xFF7
 19097                           tblptrl	equ	0xFF6
 19098                           tablat	equ	0xFF5
 19099                           prodh	equ	0xFF4
 19100                           prodl	equ	0xFF3
 19101                           intcon	equ	0xFF2
 19102                           intcon2	equ	0xFF1
 19103                           postinc0	equ	0xFEE
 19104                           plusw0	equ	0xFEB
 19105                           wreg	equ	0xFE8
 19106                           indf1	equ	0xFE7
 19107                           postdec1	equ	0xFE5
 19108                           fsr1h	equ	0xFE2
 19109                           fsr1l	equ	0xFE1
 19110                           indf2	equ	0xFDF
 19111                           postinc2	equ	0xFDE
 19112                           postdec2	equ	0xFDD
 19113                           plusw2	equ	0xFDB
 19114                           fsr2h	equ	0xFDA
 19115                           fsr2l	equ	0xFD9
 19116                           status	equ	0xFD8
 19117                           
 19118 ;; *************** function _FLASH_EraseBlock *****************
 19119 ;; Defined at:
 19120 ;;		line 144 in file "mcc_generated_files/memory.c"
 19121 ;; Parameters:    Size  Location     Type
 19122 ;;  baseAddr        4   23[COMRAM] unsigned long 
 19123 ;; Auto vars:     Size  Location     Type
 19124 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 19125 ;; Return value:  Size  Location     Type
 19126 ;;                  1    wreg      void 
 19127 ;; Registers used:
 19128 ;;		wreg, status,2
 19129 ;; Tracked objects:
 19130 ;;		On entry : 0/0
 19131 ;;		On exit  : 0/0
 19132 ;;		Unchanged: 0/0
 19133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19134 ;;      Params:         4       0       0       0       0       0       0
 19135 ;;      Locals:         1       0       0       0       0       0       0
 19136 ;;      Temps:          0       0       0       0       0       0       0
 19137 ;;      Totals:         5       0       0       0       0       0       0
 19138 ;;Total ram usage:        5 bytes
 19139 ;; Hardware stack levels used:    1
 19140 ;; Hardware stack levels required when called:    4
 19141 ;; This function calls:
 19142 ;;		Nothing
 19143 ;; This function is called by:
 19144 ;;		_FLASH_WriteBlock
 19145 ;; This function uses a non-reentrant model
 19146 ;;
 19147                           
 19148                           	psect	text109
 19149  004016                     __ptext109:
 19150                           	opt stack 0
 19151  004016                     _FLASH_EraseBlock:
 19152                           	opt stack 23
 19153                           
 19154                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 19155                           
 19156                           ;incstack = 0
 19157  004016  0E00               	movlw	0
 19158  004018  BEF2               	btfsc	intcon,7,c	;volatile
 19159  00401A  0E01               	movlw	1
 19160  00401C  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 19161                           
 19162                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 19163  00401E  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 19164                           
 19165                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 19166  004022  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 19167                           
 19168                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 19169  004026  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 19170                           
 19171                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 19172  00402A  8EA6               	bsf	4006,7,c	;volsfr
 19173                           
 19174                           ;memory.c: 153: EECON1bits.CFGS = 0;
 19175  00402C  9CA6               	bcf	4006,6,c	;volsfr
 19176                           
 19177                           ;memory.c: 154: EECON1bits.WREN = 1;
 19178  00402E  84A6               	bsf	4006,2,c	;volsfr
 19179                           
 19180                           ;memory.c: 155: EECON1bits.FREE = 1;
 19181  004030  88A6               	bsf	4006,4,c	;volsfr
 19182                           
 19183                           ;memory.c: 156: INTCONbits.GIE = 0;
 19184  004032  9EF2               	bcf	intcon,7,c	;volatile
 19185                           
 19186                           ;memory.c: 157: EECON2 = 0x55;
 19187  004034  0E55               	movlw	85
 19188  004036  6EA7               	movwf	4007,c	;volsfr
 19189                           
 19190                           ;memory.c: 158: EECON2 = 0xAA;
 19191  004038  0EAA               	movlw	170
 19192  00403A  6EA7               	movwf	4007,c	;volsfr
 19193                           
 19194                           ;memory.c: 159: EECON1bits.WR = 1;
 19195  00403C  82A6               	bsf	4006,1,c	;volsfr
 19196                           
 19197                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 19198  00403E  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 19199  004040  D002               	bra	u8525
 19200  004042  9EF2               	bcf	intcon,7,c	;volatile
 19201  004044  D001               	bra	u8526
 19202  004046                     u8525:
 19203  004046  8EF2               	bsf	intcon,7,c	;volatile
 19204  004048                     u8526:
 19205  004048  0012               	return		;funcret
 19206  00404A                     __end_of_FLASH_EraseBlock:
 19207                           	opt stack 0
 19208                           tosu	equ	0xFFF
 19209                           tosh	equ	0xFFE
 19210                           tosl	equ	0xFFD
 19211                           pclath	equ	0xFFA
 19212                           tblptru	equ	0xFF8
 19213                           tblptrh	equ	0xFF7
 19214                           tblptrl	equ	0xFF6
 19215                           tablat	equ	0xFF5
 19216                           prodh	equ	0xFF4
 19217                           prodl	equ	0xFF3
 19218                           intcon	equ	0xFF2
 19219                           intcon2	equ	0xFF1
 19220                           postinc0	equ	0xFEE
 19221                           plusw0	equ	0xFEB
 19222                           wreg	equ	0xFE8
 19223                           indf1	equ	0xFE7
 19224                           postdec1	equ	0xFE5
 19225                           fsr1h	equ	0xFE2
 19226                           fsr1l	equ	0xFE1
 19227                           indf2	equ	0xFDF
 19228                           postinc2	equ	0xFDE
 19229                           postdec2	equ	0xFDD
 19230                           plusw2	equ	0xFDB
 19231                           fsr2h	equ	0xFDA
 19232                           fsr2l	equ	0xFD9
 19233                           status	equ	0xFD8
 19234                           
 19235 ;; *************** function _FLASH_IsWriteDone *****************
 19236 ;; Defined at:
 19237 ;;		line 189 in file "mcc_generated_files/memory.c"
 19238 ;; Parameters:    Size  Location     Type
 19239 ;;		None
 19240 ;; Auto vars:     Size  Location     Type
 19241 ;;		None
 19242 ;; Return value:  Size  Location     Type
 19243 ;;                  1    wreg      unsigned char 
 19244 ;; Registers used:
 19245 ;;		wreg
 19246 ;; Tracked objects:
 19247 ;;		On entry : 0/0
 19248 ;;		On exit  : 0/0
 19249 ;;		Unchanged: 0/0
 19250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19251 ;;      Params:         0       0       0       0       0       0       0
 19252 ;;      Locals:         0       0       0       0       0       0       0
 19253 ;;      Temps:          0       0       0       0       0       0       0
 19254 ;;      Totals:         0       0       0       0       0       0       0
 19255 ;;Total ram usage:        0 bytes
 19256 ;; Hardware stack levels used:    1
 19257 ;; Hardware stack levels required when called:    4
 19258 ;; This function calls:
 19259 ;;		Nothing
 19260 ;; This function is called by:
 19261 ;;		_FlashSampleWrite
 19262 ;;		_FlashReadUart
 19263 ;; This function uses a non-reentrant model
 19264 ;;
 19265                           
 19266                           	psect	text110
 19267  004466                     __ptext110:
 19268                           	opt stack 0
 19269  004466                     _FLASH_IsWriteDone:
 19270                           	opt stack 23
 19271                           
 19272                           ;memory.c: 191: return (EECON1bits.WR == 0);
 19273                           
 19274                           ;incstack = 0
 19275  004466  A2A6               	btfss	4006,1,c	;volsfr
 19276  004468  D001               	goto	u8301
 19277  00446A  D002               	goto	u8300
 19278  00446C                     u8301:
 19279  00446C  0E01               	movlw	1
 19280  00446E  0012               	return	
 19281  004470                     u8300:
 19282  004470  0E00               	movlw	0
 19283  004472  0012               	return	
 19284  004474                     __end_of_FLASH_IsWriteDone:
 19285                           	opt stack 0
 19286                           tosu	equ	0xFFF
 19287                           tosh	equ	0xFFE
 19288                           tosl	equ	0xFFD
 19289                           pclath	equ	0xFFA
 19290                           tblptru	equ	0xFF8
 19291                           tblptrh	equ	0xFF7
 19292                           tblptrl	equ	0xFF6
 19293                           tablat	equ	0xFF5
 19294                           prodh	equ	0xFF4
 19295                           prodl	equ	0xFF3
 19296                           intcon	equ	0xFF2
 19297                           intcon2	equ	0xFF1
 19298                           postinc0	equ	0xFEE
 19299                           plusw0	equ	0xFEB
 19300                           wreg	equ	0xFE8
 19301                           indf1	equ	0xFE7
 19302                           postdec1	equ	0xFE5
 19303                           fsr1h	equ	0xFE2
 19304                           fsr1l	equ	0xFE1
 19305                           indf2	equ	0xFDF
 19306                           postinc2	equ	0xFDE
 19307                           postdec2	equ	0xFDD
 19308                           plusw2	equ	0xFDB
 19309                           fsr2h	equ	0xFDA
 19310                           fsr2l	equ	0xFD9
 19311                           status	equ	0xFD8
 19312                           
 19313 ;; *************** function _ADC_GetConversion *****************
 19314 ;; Defined at:
 19315 ;;		line 106 in file "mcc_generated_files/adc.c"
 19316 ;; Parameters:    Size  Location     Type
 19317 ;;  channel         1    wreg     enum E6975
 19318 ;; Auto vars:     Size  Location     Type
 19319 ;;  channel         1   27[COMRAM] enum E6975
 19320 ;; Return value:  Size  Location     Type
 19321 ;;                  2   23[COMRAM] unsigned int 
 19322 ;; Registers used:
 19323 ;;		wreg, status,2, status,0
 19324 ;; Tracked objects:
 19325 ;;		On entry : 0/0
 19326 ;;		On exit  : 0/0
 19327 ;;		Unchanged: 0/0
 19328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19329 ;;      Params:         2       0       0       0       0       0       0
 19330 ;;      Locals:         1       0       0       0       0       0       0
 19331 ;;      Temps:          2       0       0       0       0       0       0
 19332 ;;      Totals:         5       0       0       0       0       0       0
 19333 ;;Total ram usage:        5 bytes
 19334 ;; Hardware stack levels used:    1
 19335 ;; Hardware stack levels required when called:    4
 19336 ;; This function calls:
 19337 ;;		Nothing
 19338 ;; This function is called by:
 19339 ;;		_AdcConvert
 19340 ;; This function uses a non-reentrant model
 19341 ;;
 19342                           
 19343                           	psect	text111
 19344  0040AA                     __ptext111:
 19345                           	opt stack 0
 19346  0040AA                     _ADC_GetConversion:
 19347                           	opt stack 25
 19348                           
 19349                           ;incstack = 0
 19350                           ;ADC_GetConversion@channel stored from wreg
 19351  0040AA  6E1C               	movwf	ADC_GetConversion@channel,c
 19352                           
 19353                           ;adc.c: 109: ADCON0bits.CHS = channel;
 19354  0040AC  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 19355  0040B0  461A               	rlncf	??_ADC_GetConversion,f,c
 19356  0040B2  461A               	rlncf	??_ADC_GetConversion,f,c
 19357  0040B4  50C2               	movf	4034,w,c	;volatile
 19358  0040B6  181A               	xorwf	??_ADC_GetConversion,w,c
 19359  0040B8  0B83               	andlw	-125
 19360  0040BA  181A               	xorwf	??_ADC_GetConversion,w,c
 19361  0040BC  6EC2               	movwf	4034,c	;volatile
 19362                           
 19363                           ;adc.c: 112: ADCON0bits.ADON = 1;
 19364  0040BE  80C2               	bsf	4034,0,c	;volatile
 19365                           
 19366                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 19367  0040C0  82C2               	bsf	4034,1,c	;volatile
 19368  0040C2                     
 19369                           ;adc.c: 119: {
 19370  0040C2  B2C2               	btfsc	4034,1,c	;volatile
 19371  0040C4  D7FE               	goto	l1173
 19372                           
 19373                           ;adc.c: 120: }
 19374                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 19375  0040C6  50C4               	movf	4036,w,c	;volatile
 19376  0040C8  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 19377  0040CA  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 19378  0040CC  50C3               	movf	4035,w,c	;volatile
 19379  0040CE  241A               	addwf	??_ADC_GetConversion,w,c
 19380  0040D0  6E18               	movwf	?_ADC_GetConversion,c
 19381  0040D2  0E00               	movlw	0
 19382  0040D4  201B               	addwfc	??_ADC_GetConversion+1,w,c
 19383  0040D6  6E19               	movwf	?_ADC_GetConversion+1,c
 19384  0040D8  0012               	return	
 19385  0040DA                     __end_of_ADC_GetConversion:
 19386                           	opt stack 0
 19387                           tosu	equ	0xFFF
 19388                           tosh	equ	0xFFE
 19389                           tosl	equ	0xFFD
 19390                           pclath	equ	0xFFA
 19391                           tblptru	equ	0xFF8
 19392                           tblptrh	equ	0xFF7
 19393                           tblptrl	equ	0xFF6
 19394                           tablat	equ	0xFF5
 19395                           prodh	equ	0xFF4
 19396                           prodl	equ	0xFF3
 19397                           intcon	equ	0xFF2
 19398                           intcon2	equ	0xFF1
 19399                           postinc0	equ	0xFEE
 19400                           plusw0	equ	0xFEB
 19401                           wreg	equ	0xFE8
 19402                           indf1	equ	0xFE7
 19403                           postdec1	equ	0xFE5
 19404                           fsr1h	equ	0xFE2
 19405                           fsr1l	equ	0xFE1
 19406                           indf2	equ	0xFDF
 19407                           postinc2	equ	0xFDE
 19408                           postdec2	equ	0xFDD
 19409                           plusw2	equ	0xFDB
 19410                           fsr2h	equ	0xFDA
 19411                           fsr2l	equ	0xFD9
 19412                           status	equ	0xFD8
 19413                           
 19414 ;; *************** function _INTERRUPT_InterruptManager *****************
 19415 ;; Defined at:
 19416 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 19417 ;; Parameters:    Size  Location     Type
 19418 ;;		None
 19419 ;; Auto vars:     Size  Location     Type
 19420 ;;		None
 19421 ;; Return value:  Size  Location     Type
 19422 ;;                  1    wreg      void 
 19423 ;; Registers used:
 19424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 19425 ;; Tracked objects:
 19426 ;;		On entry : 0/0
 19427 ;;		On exit  : 0/0
 19428 ;;		Unchanged: 0/0
 19429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19430 ;;      Params:         0       0       0       0       0       0       0
 19431 ;;      Locals:         0       0       0       0       0       0       0
 19432 ;;      Temps:         18       0       0       0       0       0       0
 19433 ;;      Totals:        18       0       0       0       0       0       0
 19434 ;;Total ram usage:       18 bytes
 19435 ;; Hardware stack levels used:    1
 19436 ;; Hardware stack levels required when called:    3
 19437 ;; This function calls:
 19438 ;;		_EUSART1_Receive_ISR
 19439 ;;		_EUSART1_Transmit_ISR
 19440 ;;		_MEMORY_ISR
 19441 ;;		_PIN_MANAGER_IOC
 19442 ;;		_TMR0_ISR
 19443 ;; This function is called by:
 19444 ;;		Interrupt level 2
 19445 ;; This function uses a non-reentrant model
 19446 ;;
 19447                           
 19448                           	psect	intcode
 19449  000008                     __pintcode:
 19450                           	opt stack 0
 19451  000008                     _INTERRUPT_InterruptManager:
 19452                           	opt stack 17
 19453                           
 19454                           ;incstack = 0
 19455  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19456  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 19457  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 19458  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 19459  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 19460  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 19461  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 19462  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 19463  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 19464  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 19465  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 19466  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 19467  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 19468  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 19469  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 19470  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 19471  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 19472  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 19473  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 19474                           
 19475                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 19476  000052  B6F2               	btfsc	intcon,3,c	;volatile
 19477  000054  A0F2               	btfss	intcon,0,c	;volatile
 19478  000056  D003               	goto	i2l854
 19479                           
 19480                           ;interrupt_manager.c: 61: {
 19481                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 19482  000058  EC16  F022         	call	_PIN_MANAGER_IOC	;wreg free
 19483                           
 19484                           ;interrupt_manager.c: 63: }
 19485  00005C  D019               	goto	i2l863
 19486  00005E                     i2l854:
 19487                           
 19488                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 19489  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 19490  000060  A4F2               	btfss	intcon,2,c	;volatile
 19491  000062  D003               	goto	i2l856
 19492                           
 19493                           ;interrupt_manager.c: 65: {
 19494                           ;interrupt_manager.c: 66: TMR0_ISR();
 19495  000064  ECCB  F017         	call	_TMR0_ISR	;wreg free
 19496                           
 19497                           ;interrupt_manager.c: 67: }
 19498  000068  D013               	goto	i2l863
 19499  00006A                     i2l856:
 19500                           
 19501                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 19502  00006A  ACF2               	btfss	intcon,6,c	;volatile
 19503  00006C  D011               	goto	i2l863
 19504                           
 19505                           ;interrupt_manager.c: 69: {
 19506                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 19507  00006E  B8A0               	btfsc	4000,4,c	;volatile
 19508  000070  A8A1               	btfss	4001,4,c	;volatile
 19509  000072  D003               	goto	i2l859
 19510                           
 19511                           ;interrupt_manager.c: 71: {
 19512                           ;interrupt_manager.c: 72: MEMORY_ISR();
 19513  000074  EC72  F022         	call	_MEMORY_ISR	;wreg free
 19514                           
 19515                           ;interrupt_manager.c: 73: }
 19516  000078  D00B               	goto	i2l863
 19517  00007A                     i2l859:
 19518                           
 19519                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 19520  00007A  B89D               	btfsc	3997,4,c	;volatile
 19521  00007C  A89E               	btfss	3998,4,c	;volatile
 19522  00007E  D003               	goto	i2l861
 19523                           
 19524                           ;interrupt_manager.c: 75: {
 19525                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 19526  000080  EC85  F01F         	call	_EUSART1_Transmit_ISR	;wreg free
 19527                           
 19528                           ;interrupt_manager.c: 77: }
 19529  000084  D005               	goto	i2l863
 19530  000086                     i2l861:
 19531                           
 19532                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 19533  000086  BA9D               	btfsc	3997,5,c	;volatile
 19534  000088  AA9E               	btfss	3998,5,c	;volatile
 19535  00008A  D002               	goto	i2l863
 19536                           
 19537                           ;interrupt_manager.c: 79: {
 19538                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 19539  00008C  EC6D  F020         	call	_EUSART1_Receive_ISR	;wreg free
 19540  000090                     i2l863:
 19541                           
 19542                           ;interrupt_manager.c: 87: else
 19543                           ;interrupt_manager.c: 88: {
 19544                           
 19545                           ;interrupt_manager.c: 85: }
 19546                           ;interrupt_manager.c: 86: }
 19547                           
 19548                           ;interrupt_manager.c: 82: else
 19549                           ;interrupt_manager.c: 83: {
 19550  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 19551  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 19552  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 19553  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 19554  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 19555  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 19556  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 19557  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 19558  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 19559  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 19560  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 19561  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 19562  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 19563  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 19564  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 19565  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 19566  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 19567  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 19568  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19569  0000DA  0011               	retfie		f
 19570  0000DC                     __end_of_INTERRUPT_InterruptManager:
 19571                           	opt stack 0
 19572                           tosu	equ	0xFFF
 19573                           tosh	equ	0xFFE
 19574                           tosl	equ	0xFFD
 19575                           pclatu	equ	0xFFB
 19576                           pclath	equ	0xFFA
 19577                           tblptru	equ	0xFF8
 19578                           tblptrh	equ	0xFF7
 19579                           tblptrl	equ	0xFF6
 19580                           tablat	equ	0xFF5
 19581                           prodh	equ	0xFF4
 19582                           prodl	equ	0xFF3
 19583                           intcon	equ	0xFF2
 19584                           intcon2	equ	0xFF1
 19585                           postinc0	equ	0xFEE
 19586                           plusw0	equ	0xFEB
 19587                           fsr0h	equ	0xFEA
 19588                           fsr0l	equ	0xFE9
 19589                           wreg	equ	0xFE8
 19590                           indf1	equ	0xFE7
 19591                           postdec1	equ	0xFE5
 19592                           fsr1h	equ	0xFE2
 19593                           fsr1l	equ	0xFE1
 19594                           indf2	equ	0xFDF
 19595                           postinc2	equ	0xFDE
 19596                           postdec2	equ	0xFDD
 19597                           plusw2	equ	0xFDB
 19598                           fsr2h	equ	0xFDA
 19599                           fsr2l	equ	0xFD9
 19600                           status	equ	0xFD8
 19601                           
 19602 ;; *************** function _TMR0_ISR *****************
 19603 ;; Defined at:
 19604 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 19605 ;; Parameters:    Size  Location     Type
 19606 ;;		None
 19607 ;; Auto vars:     Size  Location     Type
 19608 ;;		None
 19609 ;; Return value:  Size  Location     Type
 19610 ;;                  1    wreg      void 
 19611 ;; Registers used:
 19612 ;;		wreg, status,2, status,0, cstack
 19613 ;; Tracked objects:
 19614 ;;		On entry : 0/0
 19615 ;;		On exit  : 0/0
 19616 ;;		Unchanged: 0/0
 19617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19618 ;;      Params:         0       0       0       0       0       0       0
 19619 ;;      Locals:         0       0       0       0       0       0       0
 19620 ;;      Temps:          0       0       0       0       0       0       0
 19621 ;;      Totals:         0       0       0       0       0       0       0
 19622 ;;Total ram usage:        0 bytes
 19623 ;; Hardware stack levels used:    1
 19624 ;; Hardware stack levels required when called:    1
 19625 ;; This function calls:
 19626 ;;		___lwmod
 19627 ;; This function is called by:
 19628 ;;		_INTERRUPT_InterruptManager
 19629 ;; This function uses a non-reentrant model
 19630 ;;
 19631                           
 19632                           	psect	text113
 19633  002F96                     __ptext113:
 19634                           	opt stack 0
 19635  002F96                     _TMR0_ISR:
 19636                           	opt stack 18
 19637                           
 19638                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 19639                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 19640                           
 19641                           ;incstack = 0
 19642  002F96  94F2               	bcf	intcon,2,c	;volatile
 19643                           
 19644                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 19645  002F98  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 19646  002F9A  6ED7               	movwf	4055,c	;volatile
 19647                           
 19648                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 19649  002F9C  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 19650                           
 19651                           ;tmr0.c: 144: CountCallBack++;
 19652  002FA0  4A35               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 19653  002FA2  2A36               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 19654                           
 19655                           ;tmr0.c: 145: if ((CountCallBack % 20) == 0)
 19656  002FA4  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19657  002FA8  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19658  002FAC  0E00               	movlw	0
 19659  002FAE  6E04               	movwf	___lwmod@divisor+1,c
 19660  002FB0  0E14               	movlw	20
 19661  002FB2  6E03               	movwf	___lwmod@divisor,c
 19662  002FB4  EC9A  F01E         	call	___lwmod	;wreg free
 19663  002FB8  5001               	movf	?___lwmod,w,c
 19664  002FBA  1002               	iorwf	?___lwmod+1,w,c
 19665  002FBC  A4D8               	btfss	status,2,c
 19666  002FBE  D003               	goto	i2l1127
 19667                           
 19668                           ;tmr0.c: 146: {
 19669                           ;tmr0.c: 147: Timer0_SynthLd = 1;
 19670  002FC0  0E01               	movlw	1
 19671  002FC2  0100               	movlb	0	; () banked
 19672  002FC4  6FF3               	movwf	_Timer0_SynthLd& (0+255),b	;volatile
 19673  002FC6                     i2l1127:
 19674                           
 19675                           ;tmr0.c: 148: }
 19676                           ;tmr0.c: 149: if ((CountCallBack % 100) == 0)
 19677                           
 19678                           ; BSR set to: 0
 19679  002FC6  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19680  002FCA  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19681  002FCE  0E00               	movlw	0
 19682  002FD0  6E04               	movwf	___lwmod@divisor+1,c
 19683  002FD2  0E64               	movlw	100
 19684  002FD4  6E03               	movwf	___lwmod@divisor,c
 19685  002FD6  EC9A  F01E         	call	___lwmod	;wreg free
 19686  002FDA  5001               	movf	?___lwmod,w,c
 19687  002FDC  1002               	iorwf	?___lwmod+1,w,c
 19688  002FDE  A4D8               	btfss	status,2,c
 19689  002FE0  D003               	goto	i2l1128
 19690                           
 19691                           ;tmr0.c: 150: {
 19692                           ;tmr0.c: 151: Timer0_Sampling = 1;
 19693  002FE2  0E01               	movlw	1
 19694  002FE4  0100               	movlb	0	; () banked
 19695  002FE6  6FF2               	movwf	_Timer0_Sampling& (0+255),b	;volatile
 19696  002FE8                     i2l1128:
 19697                           
 19698                           ;tmr0.c: 152: }
 19699                           ;tmr0.c: 153: if ((CountCallBack % 200) == 0)
 19700                           
 19701                           ; BSR set to: 0
 19702  002FE8  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19703  002FEC  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19704  002FF0  0E00               	movlw	0
 19705  002FF2  6E04               	movwf	___lwmod@divisor+1,c
 19706  002FF4  0EC8               	movlw	200
 19707  002FF6  6E03               	movwf	___lwmod@divisor,c
 19708  002FF8  EC9A  F01E         	call	___lwmod	;wreg free
 19709  002FFC  5001               	movf	?___lwmod,w,c
 19710  002FFE  1002               	iorwf	?___lwmod+1,w,c
 19711  003000  A4D8               	btfss	status,2,c
 19712  003002  D003               	goto	i2l1129
 19713                           
 19714                           ;tmr0.c: 154: {
 19715                           ;tmr0.c: 155: Timer0_KeepAlive = 1;
 19716  003004  0E01               	movlw	1
 19717  003006  0100               	movlb	0	; () banked
 19718  003008  6FF1               	movwf	_Timer0_KeepAlive& (0+255),b	;volatile
 19719  00300A                     i2l1129:
 19720                           
 19721                           ;tmr0.c: 156: }
 19722                           ;tmr0.c: 157: if ((CountCallBack % 10) == 0)
 19723                           
 19724                           ; BSR set to: 0
 19725  00300A  C035  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19726  00300E  C036  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19727  003012  0E00               	movlw	0
 19728  003014  6E04               	movwf	___lwmod@divisor+1,c
 19729  003016  0E0A               	movlw	10
 19730  003018  6E03               	movwf	___lwmod@divisor,c
 19731  00301A  EC9A  F01E         	call	___lwmod	;wreg free
 19732  00301E  5001               	movf	?___lwmod,w,c
 19733  003020  1002               	iorwf	?___lwmod+1,w,c
 19734  003022  A4D8               	btfss	status,2,c
 19735  003024  D003               	goto	i2l1130
 19736                           
 19737                           ;tmr0.c: 158: {
 19738                           ;tmr0.c: 159: Timer0_OneSec = 1;
 19739  003026  0E01               	movlw	1
 19740  003028  0100               	movlb	0	; () banked
 19741  00302A  6FF0               	movwf	_Timer0_OneSec& (0+255),b	;volatile
 19742  00302C                     i2l1130:
 19743                           
 19744                           ;tmr0.c: 160: }
 19745                           ;tmr0.c: 161: if(CountCallBack >= 35000)
 19746                           
 19747                           ; BSR set to: 0
 19748  00302C  0EB8               	movlw	184
 19749  00302E  5C35               	subwf	TMR0_ISR@CountCallBack,w,c	;volatile
 19750  003030  0E88               	movlw	136
 19751  003032  5836               	subwfb	TMR0_ISR@CountCallBack+1,w,c	;volatile
 19752  003034  A0D8               	btfss	status,0,c
 19753  003036  0012               	return	
 19754                           
 19755                           ;tmr0.c: 163: {
 19756                           ;tmr0.c: 165: CountCallBack = 0;
 19757  003038  0E00               	movlw	0
 19758  00303A  6E36               	movwf	TMR0_ISR@CountCallBack+1,c	;volatile
 19759  00303C  0E00               	movlw	0
 19760  00303E  6E35               	movwf	TMR0_ISR@CountCallBack,c	;volatile
 19761  003040  0012               	return	
 19762  003042                     __end_of_TMR0_ISR:
 19763                           	opt stack 0
 19764                           tosu	equ	0xFFF
 19765                           tosh	equ	0xFFE
 19766                           tosl	equ	0xFFD
 19767                           pclatu	equ	0xFFB
 19768                           pclath	equ	0xFFA
 19769                           tblptru	equ	0xFF8
 19770                           tblptrh	equ	0xFF7
 19771                           tblptrl	equ	0xFF6
 19772                           tablat	equ	0xFF5
 19773                           prodh	equ	0xFF4
 19774                           prodl	equ	0xFF3
 19775                           intcon	equ	0xFF2
 19776                           intcon2	equ	0xFF1
 19777                           postinc0	equ	0xFEE
 19778                           plusw0	equ	0xFEB
 19779                           fsr0h	equ	0xFEA
 19780                           fsr0l	equ	0xFE9
 19781                           wreg	equ	0xFE8
 19782                           indf1	equ	0xFE7
 19783                           postdec1	equ	0xFE5
 19784                           fsr1h	equ	0xFE2
 19785                           fsr1l	equ	0xFE1
 19786                           indf2	equ	0xFDF
 19787                           postinc2	equ	0xFDE
 19788                           postdec2	equ	0xFDD
 19789                           plusw2	equ	0xFDB
 19790                           fsr2h	equ	0xFDA
 19791                           fsr2l	equ	0xFD9
 19792                           status	equ	0xFD8
 19793                           
 19794 ;; *************** function ___lwmod *****************
 19795 ;; Defined at:
 19796 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 19797 ;; Parameters:    Size  Location     Type
 19798 ;;  dividend        2    0[COMRAM] unsigned int 
 19799 ;;  divisor         2    2[COMRAM] unsigned int 
 19800 ;; Auto vars:     Size  Location     Type
 19801 ;;  counter         1    4[COMRAM] unsigned char 
 19802 ;; Return value:  Size  Location     Type
 19803 ;;                  2    0[COMRAM] unsigned int 
 19804 ;; Registers used:
 19805 ;;		wreg, status,2, status,0
 19806 ;; Tracked objects:
 19807 ;;		On entry : 0/0
 19808 ;;		On exit  : 0/0
 19809 ;;		Unchanged: 0/0
 19810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19811 ;;      Params:         4       0       0       0       0       0       0
 19812 ;;      Locals:         1       0       0       0       0       0       0
 19813 ;;      Temps:          0       0       0       0       0       0       0
 19814 ;;      Totals:         5       0       0       0       0       0       0
 19815 ;;Total ram usage:        5 bytes
 19816 ;; Hardware stack levels used:    1
 19817 ;; This function calls:
 19818 ;;		Nothing
 19819 ;; This function is called by:
 19820 ;;		_TMR0_ISR
 19821 ;; This function uses a non-reentrant model
 19822 ;;
 19823                           
 19824                           	psect	text114
 19825  003D34                     __ptext114:
 19826                           	opt stack 0
 19827  003D34                     ___lwmod:
 19828                           	opt stack 18
 19829                           
 19830                           ;incstack = 0
 19831  003D34  5003               	movf	___lwmod@divisor,w,c
 19832  003D36  1004               	iorwf	___lwmod@divisor+1,w,c
 19833  003D38  B4D8               	btfsc	status,2,c
 19834  003D3A  D018               	goto	i2l2029
 19835  003D3C  0E01               	movlw	1
 19836  003D3E  6E05               	movwf	___lwmod@counter,c
 19837  003D40  D004               	goto	i2l2024
 19838  003D42  90D8               	bcf	status,0,c
 19839  003D44  3603               	rlcf	___lwmod@divisor,f,c
 19840  003D46  3604               	rlcf	___lwmod@divisor+1,f,c
 19841  003D48  2A05               	incf	___lwmod@counter,f,c
 19842  003D4A                     i2l2024:
 19843  003D4A  AE04               	btfss	___lwmod@divisor+1,7,c
 19844  003D4C  D7FA               	goto	i2l2025
 19845  003D4E                     i2u612_40:
 19846  003D4E  5003               	movf	___lwmod@divisor,w,c
 19847  003D50  5C01               	subwf	___lwmod@dividend,w,c
 19848  003D52  5004               	movf	___lwmod@divisor+1,w,c
 19849  003D54  5802               	subwfb	___lwmod@dividend+1,w,c
 19850  003D56  A0D8               	btfss	status,0,c
 19851  003D58  D004               	goto	i2l2028
 19852  003D5A  5003               	movf	___lwmod@divisor,w,c
 19853  003D5C  5E01               	subwf	___lwmod@dividend,f,c
 19854  003D5E  5004               	movf	___lwmod@divisor+1,w,c
 19855  003D60  5A02               	subwfb	___lwmod@dividend+1,f,c
 19856  003D62                     i2l2028:
 19857  003D62  90D8               	bcf	status,0,c
 19858  003D64  3204               	rrcf	___lwmod@divisor+1,f,c
 19859  003D66  3203               	rrcf	___lwmod@divisor,f,c
 19860  003D68  2E05               	decfsz	___lwmod@counter,f,c
 19861  003D6A  D7F1               	goto	i2u612_40
 19862  003D6C                     i2l2029:
 19863  003D6C  C001  F001         	movff	___lwmod@dividend,?___lwmod
 19864  003D70  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 19865  003D74  0012               	return		;funcret
 19866  003D76                     __end_of___lwmod:
 19867                           	opt stack 0
 19868                           tosu	equ	0xFFF
 19869                           tosh	equ	0xFFE
 19870                           tosl	equ	0xFFD
 19871                           pclatu	equ	0xFFB
 19872                           pclath	equ	0xFFA
 19873                           tblptru	equ	0xFF8
 19874                           tblptrh	equ	0xFF7
 19875                           tblptrl	equ	0xFF6
 19876                           tablat	equ	0xFF5
 19877                           prodh	equ	0xFF4
 19878                           prodl	equ	0xFF3
 19879                           intcon	equ	0xFF2
 19880                           intcon2	equ	0xFF1
 19881                           postinc0	equ	0xFEE
 19882                           plusw0	equ	0xFEB
 19883                           fsr0h	equ	0xFEA
 19884                           fsr0l	equ	0xFE9
 19885                           wreg	equ	0xFE8
 19886                           indf1	equ	0xFE7
 19887                           postdec1	equ	0xFE5
 19888                           fsr1h	equ	0xFE2
 19889                           fsr1l	equ	0xFE1
 19890                           indf2	equ	0xFDF
 19891                           postinc2	equ	0xFDE
 19892                           postdec2	equ	0xFDD
 19893                           plusw2	equ	0xFDB
 19894                           fsr2h	equ	0xFDA
 19895                           fsr2l	equ	0xFD9
 19896                           status	equ	0xFD8
 19897                           
 19898 ;; *************** function _PIN_MANAGER_IOC *****************
 19899 ;; Defined at:
 19900 ;;		line 108 in file "mcc_generated_files/pin_manager.c"
 19901 ;; Parameters:    Size  Location     Type
 19902 ;;		None
 19903 ;; Auto vars:     Size  Location     Type
 19904 ;;		None
 19905 ;; Return value:  Size  Location     Type
 19906 ;;                  1    wreg      void 
 19907 ;; Registers used:
 19908 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19909 ;; Tracked objects:
 19910 ;;		On entry : 0/0
 19911 ;;		On exit  : 0/0
 19912 ;;		Unchanged: 0/0
 19913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19914 ;;      Params:         0       0       0       0       0       0       0
 19915 ;;      Locals:         0       0       0       0       0       0       0
 19916 ;;      Temps:          0       0       0       0       0       0       0
 19917 ;;      Totals:         0       0       0       0       0       0       0
 19918 ;;Total ram usage:        0 bytes
 19919 ;; Hardware stack levels used:    1
 19920 ;; Hardware stack levels required when called:    2
 19921 ;; This function calls:
 19922 ;;		_IOCB4_ISR
 19923 ;;		_IOCB5_ISR
 19924 ;; This function is called by:
 19925 ;;		_INTERRUPT_InterruptManager
 19926 ;; This function uses a non-reentrant model
 19927 ;;
 19928                           
 19929                           	psect	text115
 19930  00442C                     __ptext115:
 19931                           	opt stack 0
 19932  00442C                     _PIN_MANAGER_IOC:
 19933                           	opt stack 17
 19934                           
 19935                           ;pin_manager.c: 111: if(IOCBbits.IOCB4 == 1)
 19936                           
 19937                           ;incstack = 0
 19938  00442C  B862               	btfsc	3938,4,c	;volatile
 19939                           
 19940                           ;pin_manager.c: 112: {
 19941                           ;pin_manager.c: 113: IOCB4_ISR();
 19942  00442E  EC56  F021         	call	_IOCB4_ISR	;wreg free
 19943                           
 19944                           ;pin_manager.c: 114: }
 19945                           ;pin_manager.c: 116: if(IOCBbits.IOCB5 == 1)
 19946  004432  BA62               	btfsc	3938,5,c	;volatile
 19947                           
 19948                           ;pin_manager.c: 117: {
 19949                           ;pin_manager.c: 118: IOCB5_ISR();
 19950  004434  EC45  F021         	call	_IOCB5_ISR	;wreg free
 19951                           
 19952                           ;pin_manager.c: 119: }
 19953                           ;pin_manager.c: 122: INTCONbits.RBIF = 0;
 19954  004438  90F2               	bcf	intcon,0,c	;volatile
 19955  00443A  0012               	return		;funcret
 19956  00443C                     __end_of_PIN_MANAGER_IOC:
 19957                           	opt stack 0
 19958                           tosu	equ	0xFFF
 19959                           tosh	equ	0xFFE
 19960                           tosl	equ	0xFFD
 19961                           pclatu	equ	0xFFB
 19962                           pclath	equ	0xFFA
 19963                           tblptru	equ	0xFF8
 19964                           tblptrh	equ	0xFF7
 19965                           tblptrl	equ	0xFF6
 19966                           tablat	equ	0xFF5
 19967                           prodh	equ	0xFF4
 19968                           prodl	equ	0xFF3
 19969                           intcon	equ	0xFF2
 19970                           intcon2	equ	0xFF1
 19971                           postinc0	equ	0xFEE
 19972                           plusw0	equ	0xFEB
 19973                           fsr0h	equ	0xFEA
 19974                           fsr0l	equ	0xFE9
 19975                           wreg	equ	0xFE8
 19976                           indf1	equ	0xFE7
 19977                           postdec1	equ	0xFE5
 19978                           fsr1h	equ	0xFE2
 19979                           fsr1l	equ	0xFE1
 19980                           indf2	equ	0xFDF
 19981                           postinc2	equ	0xFDE
 19982                           postdec2	equ	0xFDD
 19983                           plusw2	equ	0xFDB
 19984                           fsr2h	equ	0xFDA
 19985                           fsr2l	equ	0xFD9
 19986                           status	equ	0xFD8
 19987                           
 19988 ;; *************** function _IOCB5_ISR *****************
 19989 ;; Defined at:
 19990 ;;		line 158 in file "mcc_generated_files/pin_manager.c"
 19991 ;; Parameters:    Size  Location     Type
 19992 ;;		None
 19993 ;; Auto vars:     Size  Location     Type
 19994 ;;		None
 19995 ;; Return value:  Size  Location     Type
 19996 ;;                  1    wreg      void 
 19997 ;; Registers used:
 19998 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19999 ;; Tracked objects:
 20000 ;;		On entry : 0/0
 20001 ;;		On exit  : 0/0
 20002 ;;		Unchanged: 0/0
 20003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20004 ;;      Params:         0       0       0       0       0       0       0
 20005 ;;      Locals:         0       0       0       0       0       0       0
 20006 ;;      Temps:          0       0       0       0       0       0       0
 20007 ;;      Totals:         0       0       0       0       0       0       0
 20008 ;;Total ram usage:        0 bytes
 20009 ;; Hardware stack levels used:    1
 20010 ;; Hardware stack levels required when called:    1
 20011 ;; This function calls:
 20012 ;;		Absolute function
 20013 ;;		_IOCB5_DefaultInterruptHandler
 20014 ;; This function is called by:
 20015 ;;		_PIN_MANAGER_IOC
 20016 ;; This function uses a non-reentrant model
 20017 ;;
 20018                           
 20019                           	psect	text116
 20020  00428A                     __ptext116:
 20021                           	opt stack 0
 20022  00428A                     _IOCB5_ISR:
 20023                           	opt stack 17
 20024                           
 20025                           ;pin_manager.c: 163: if(IOCB5_InterruptHandler)
 20026                           
 20027                           ;incstack = 0
 20028  00428A  0101               	movlb	1	; () banked
 20029  00428C  51E8               	movf	_IOCB5_InterruptHandler& (0+255),w,b
 20030  00428E  11E9               	iorwf	(_IOCB5_InterruptHandler+1)& (0+255),w,b
 20031  004290  B4D8               	btfsc	status,2,c
 20032  004292  0012               	return	
 20033                           
 20034                           ; BSR set to: 1
 20035                           ;pin_manager.c: 164: {
 20036                           ;pin_manager.c: 165: IOCB5_InterruptHandler();
 20037  004294  D801               	call	i2u604_48
 20038  004296  0012               	return	
 20039  004298                     i2u604_48:
 20040  004298  0005               	push	
 20041  00429A  6EFA               	movwf	pclath,c
 20042  00429C  51E8               	movf	_IOCB5_InterruptHandler& (0+255),w,b
 20043  00429E  6EFD               	movwf	tosl,c
 20044  0042A0  51E9               	movf	(_IOCB5_InterruptHandler+1)& (0+255),w,b
 20045  0042A2  6EFE               	movwf	tosh,c
 20046  0042A4  50F8               	movf	tblptru,w,c
 20047  0042A6  6EFF               	movwf	tosu,c
 20048  0042A8  50FA               	movf	pclath,w,c
 20049  0042AA  0012               	return		;indir
 20050  0042AC                     __end_of_IOCB5_ISR:
 20051                           	opt stack 0
 20052                           tosu	equ	0xFFF
 20053                           tosh	equ	0xFFE
 20054                           tosl	equ	0xFFD
 20055                           pclatu	equ	0xFFB
 20056                           pclath	equ	0xFFA
 20057                           tblptru	equ	0xFF8
 20058                           tblptrh	equ	0xFF7
 20059                           tblptrl	equ	0xFF6
 20060                           tablat	equ	0xFF5
 20061                           prodh	equ	0xFF4
 20062                           prodl	equ	0xFF3
 20063                           intcon	equ	0xFF2
 20064                           intcon2	equ	0xFF1
 20065                           postinc0	equ	0xFEE
 20066                           plusw0	equ	0xFEB
 20067                           fsr0h	equ	0xFEA
 20068                           fsr0l	equ	0xFE9
 20069                           wreg	equ	0xFE8
 20070                           indf1	equ	0xFE7
 20071                           postdec1	equ	0xFE5
 20072                           fsr1h	equ	0xFE2
 20073                           fsr1l	equ	0xFE1
 20074                           indf2	equ	0xFDF
 20075                           postinc2	equ	0xFDE
 20076                           postdec2	equ	0xFDD
 20077                           plusw2	equ	0xFDB
 20078                           fsr2h	equ	0xFDA
 20079                           fsr2l	equ	0xFD9
 20080                           status	equ	0xFD8
 20081                           
 20082 ;; *************** function _IOCB5_DefaultInterruptHandler *****************
 20083 ;; Defined at:
 20084 ;;		line 179 in file "mcc_generated_files/pin_manager.c"
 20085 ;; Parameters:    Size  Location     Type
 20086 ;;		None
 20087 ;; Auto vars:     Size  Location     Type
 20088 ;;		None
 20089 ;; Return value:  Size  Location     Type
 20090 ;;                  1    wreg      void 
 20091 ;; Registers used:
 20092 ;;		None
 20093 ;; Tracked objects:
 20094 ;;		On entry : 0/0
 20095 ;;		On exit  : 0/0
 20096 ;;		Unchanged: 0/0
 20097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20098 ;;      Params:         0       0       0       0       0       0       0
 20099 ;;      Locals:         0       0       0       0       0       0       0
 20100 ;;      Temps:          0       0       0       0       0       0       0
 20101 ;;      Totals:         0       0       0       0       0       0       0
 20102 ;;Total ram usage:        0 bytes
 20103 ;; Hardware stack levels used:    1
 20104 ;; This function calls:
 20105 ;;		Nothing
 20106 ;; This function is called by:
 20107 ;;		_PIN_MANAGER_Initialize
 20108 ;;		_IOCB5_ISR
 20109 ;; This function uses a non-reentrant model
 20110 ;;
 20111                           
 20112                           	psect	text117
 20113  0044E8                     __ptext117:
 20114                           	opt stack 0
 20115  0044E8                     _IOCB5_DefaultInterruptHandler:
 20116                           	opt stack 17
 20117                           
 20118                           ;incstack = 0
 20119  0044E8  0012               	return		;funcret
 20120  0044EA                     __end_of_IOCB5_DefaultInterruptHandler:
 20121                           	opt stack 0
 20122                           tosu	equ	0xFFF
 20123                           tosh	equ	0xFFE
 20124                           tosl	equ	0xFFD
 20125                           pclatu	equ	0xFFB
 20126                           pclath	equ	0xFFA
 20127                           tblptru	equ	0xFF8
 20128                           tblptrh	equ	0xFF7
 20129                           tblptrl	equ	0xFF6
 20130                           tablat	equ	0xFF5
 20131                           prodh	equ	0xFF4
 20132                           prodl	equ	0xFF3
 20133                           intcon	equ	0xFF2
 20134                           intcon2	equ	0xFF1
 20135                           postinc0	equ	0xFEE
 20136                           plusw0	equ	0xFEB
 20137                           fsr0h	equ	0xFEA
 20138                           fsr0l	equ	0xFE9
 20139                           wreg	equ	0xFE8
 20140                           indf1	equ	0xFE7
 20141                           postdec1	equ	0xFE5
 20142                           fsr1h	equ	0xFE2
 20143                           fsr1l	equ	0xFE1
 20144                           indf2	equ	0xFDF
 20145                           postinc2	equ	0xFDE
 20146                           postdec2	equ	0xFDD
 20147                           plusw2	equ	0xFDB
 20148                           fsr2h	equ	0xFDA
 20149                           fsr2l	equ	0xFD9
 20150                           status	equ	0xFD8
 20151                           
 20152 ;; *************** function _IOCB4_ISR *****************
 20153 ;; Defined at:
 20154 ;;		line 129 in file "mcc_generated_files/pin_manager.c"
 20155 ;; Parameters:    Size  Location     Type
 20156 ;;		None
 20157 ;; Auto vars:     Size  Location     Type
 20158 ;;		None
 20159 ;; Return value:  Size  Location     Type
 20160 ;;                  1    wreg      void 
 20161 ;; Registers used:
 20162 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 20163 ;; Tracked objects:
 20164 ;;		On entry : 0/0
 20165 ;;		On exit  : 0/0
 20166 ;;		Unchanged: 0/0
 20167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20168 ;;      Params:         0       0       0       0       0       0       0
 20169 ;;      Locals:         0       0       0       0       0       0       0
 20170 ;;      Temps:          0       0       0       0       0       0       0
 20171 ;;      Totals:         0       0       0       0       0       0       0
 20172 ;;Total ram usage:        0 bytes
 20173 ;; Hardware stack levels used:    1
 20174 ;; Hardware stack levels required when called:    1
 20175 ;; This function calls:
 20176 ;;		Absolute function
 20177 ;;		_IOCB4_DefaultInterruptHandler
 20178 ;; This function is called by:
 20179 ;;		_PIN_MANAGER_IOC
 20180 ;; This function uses a non-reentrant model
 20181 ;;
 20182                           
 20183                           	psect	text118
 20184  0042AC                     __ptext118:
 20185                           	opt stack 0
 20186  0042AC                     _IOCB4_ISR:
 20187                           	opt stack 17
 20188                           
 20189                           ;pin_manager.c: 134: if(IOCB4_InterruptHandler)
 20190                           
 20191                           ;incstack = 0
 20192  0042AC  0101               	movlb	1	; () banked
 20193  0042AE  51EA               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 20194  0042B0  11EB               	iorwf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 20195  0042B2  B4D8               	btfsc	status,2,c
 20196  0042B4  0012               	return	
 20197                           
 20198                           ; BSR set to: 1
 20199                           ;pin_manager.c: 135: {
 20200                           ;pin_manager.c: 136: IOCB4_InterruptHandler();
 20201  0042B6  D801               	call	i2u602_48
 20202  0042B8  0012               	return	
 20203  0042BA                     i2u602_48:
 20204  0042BA  0005               	push	
 20205  0042BC  6EFA               	movwf	pclath,c
 20206  0042BE  51EA               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 20207  0042C0  6EFD               	movwf	tosl,c
 20208  0042C2  51EB               	movf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 20209  0042C4  6EFE               	movwf	tosh,c
 20210  0042C6  50F8               	movf	tblptru,w,c
 20211  0042C8  6EFF               	movwf	tosu,c
 20212  0042CA  50FA               	movf	pclath,w,c
 20213  0042CC  0012               	return		;indir
 20214  0042CE                     __end_of_IOCB4_ISR:
 20215                           	opt stack 0
 20216                           tosu	equ	0xFFF
 20217                           tosh	equ	0xFFE
 20218                           tosl	equ	0xFFD
 20219                           pclatu	equ	0xFFB
 20220                           pclath	equ	0xFFA
 20221                           tblptru	equ	0xFF8
 20222                           tblptrh	equ	0xFF7
 20223                           tblptrl	equ	0xFF6
 20224                           tablat	equ	0xFF5
 20225                           prodh	equ	0xFF4
 20226                           prodl	equ	0xFF3
 20227                           intcon	equ	0xFF2
 20228                           intcon2	equ	0xFF1
 20229                           postinc0	equ	0xFEE
 20230                           plusw0	equ	0xFEB
 20231                           fsr0h	equ	0xFEA
 20232                           fsr0l	equ	0xFE9
 20233                           wreg	equ	0xFE8
 20234                           indf1	equ	0xFE7
 20235                           postdec1	equ	0xFE5
 20236                           fsr1h	equ	0xFE2
 20237                           fsr1l	equ	0xFE1
 20238                           indf2	equ	0xFDF
 20239                           postinc2	equ	0xFDE
 20240                           postdec2	equ	0xFDD
 20241                           plusw2	equ	0xFDB
 20242                           fsr2h	equ	0xFDA
 20243                           fsr2l	equ	0xFD9
 20244                           status	equ	0xFD8
 20245                           
 20246 ;; *************** function _IOCB4_DefaultInterruptHandler *****************
 20247 ;; Defined at:
 20248 ;;		line 150 in file "mcc_generated_files/pin_manager.c"
 20249 ;; Parameters:    Size  Location     Type
 20250 ;;		None
 20251 ;; Auto vars:     Size  Location     Type
 20252 ;;		None
 20253 ;; Return value:  Size  Location     Type
 20254 ;;                  1    wreg      void 
 20255 ;; Registers used:
 20256 ;;		None
 20257 ;; Tracked objects:
 20258 ;;		On entry : 0/0
 20259 ;;		On exit  : 0/0
 20260 ;;		Unchanged: 0/0
 20261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20262 ;;      Params:         0       0       0       0       0       0       0
 20263 ;;      Locals:         0       0       0       0       0       0       0
 20264 ;;      Temps:          0       0       0       0       0       0       0
 20265 ;;      Totals:         0       0       0       0       0       0       0
 20266 ;;Total ram usage:        0 bytes
 20267 ;; Hardware stack levels used:    1
 20268 ;; This function calls:
 20269 ;;		Nothing
 20270 ;; This function is called by:
 20271 ;;		_PIN_MANAGER_Initialize
 20272 ;;		_IOCB4_ISR
 20273 ;; This function uses a non-reentrant model
 20274 ;;
 20275                           
 20276                           	psect	text119
 20277  0044EA                     __ptext119:
 20278                           	opt stack 0
 20279  0044EA                     _IOCB4_DefaultInterruptHandler:
 20280                           	opt stack 17
 20281                           
 20282                           ;incstack = 0
 20283  0044EA  0012               	return		;funcret
 20284  0044EC                     __end_of_IOCB4_DefaultInterruptHandler:
 20285                           	opt stack 0
 20286                           tosu	equ	0xFFF
 20287                           tosh	equ	0xFFE
 20288                           tosl	equ	0xFFD
 20289                           pclatu	equ	0xFFB
 20290                           pclath	equ	0xFFA
 20291                           tblptru	equ	0xFF8
 20292                           tblptrh	equ	0xFF7
 20293                           tblptrl	equ	0xFF6
 20294                           tablat	equ	0xFF5
 20295                           prodh	equ	0xFF4
 20296                           prodl	equ	0xFF3
 20297                           intcon	equ	0xFF2
 20298                           intcon2	equ	0xFF1
 20299                           postinc0	equ	0xFEE
 20300                           plusw0	equ	0xFEB
 20301                           fsr0h	equ	0xFEA
 20302                           fsr0l	equ	0xFE9
 20303                           wreg	equ	0xFE8
 20304                           indf1	equ	0xFE7
 20305                           postdec1	equ	0xFE5
 20306                           fsr1h	equ	0xFE2
 20307                           fsr1l	equ	0xFE1
 20308                           indf2	equ	0xFDF
 20309                           postinc2	equ	0xFDE
 20310                           postdec2	equ	0xFDD
 20311                           plusw2	equ	0xFDB
 20312                           fsr2h	equ	0xFDA
 20313                           fsr2l	equ	0xFD9
 20314                           status	equ	0xFD8
 20315                           
 20316 ;; *************** function _MEMORY_ISR *****************
 20317 ;; Defined at:
 20318 ;;		line 206 in file "mcc_generated_files/memory.c"
 20319 ;; Parameters:    Size  Location     Type
 20320 ;;		None
 20321 ;; Auto vars:     Size  Location     Type
 20322 ;;		None
 20323 ;; Return value:  Size  Location     Type
 20324 ;;                  1    wreg      void 
 20325 ;; Registers used:
 20326 ;;		None
 20327 ;; Tracked objects:
 20328 ;;		On entry : 0/0
 20329 ;;		On exit  : 0/0
 20330 ;;		Unchanged: 0/0
 20331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20332 ;;      Params:         0       0       0       0       0       0       0
 20333 ;;      Locals:         0       0       0       0       0       0       0
 20334 ;;      Temps:          0       0       0       0       0       0       0
 20335 ;;      Totals:         0       0       0       0       0       0       0
 20336 ;;Total ram usage:        0 bytes
 20337 ;; Hardware stack levels used:    1
 20338 ;; This function calls:
 20339 ;;		Nothing
 20340 ;; This function is called by:
 20341 ;;		_INTERRUPT_InterruptManager
 20342 ;; This function uses a non-reentrant model
 20343 ;;
 20344                           
 20345                           	psect	text120
 20346  0044E4                     __ptext120:
 20347                           	opt stack 0
 20348  0044E4                     _MEMORY_ISR:
 20349                           	opt stack 19
 20350                           
 20351                           ;memory.c: 209: PIR2bits.EEIF = 0;
 20352                           
 20353                           ;incstack = 0
 20354  0044E4  98A1               	bcf	4001,4,c	;volatile
 20355  0044E6  0012               	return		;funcret
 20356  0044E8                     __end_of_MEMORY_ISR:
 20357                           	opt stack 0
 20358                           tosu	equ	0xFFF
 20359                           tosh	equ	0xFFE
 20360                           tosl	equ	0xFFD
 20361                           pclatu	equ	0xFFB
 20362                           pclath	equ	0xFFA
 20363                           tblptru	equ	0xFF8
 20364                           tblptrh	equ	0xFF7
 20365                           tblptrl	equ	0xFF6
 20366                           tablat	equ	0xFF5
 20367                           prodh	equ	0xFF4
 20368                           prodl	equ	0xFF3
 20369                           intcon	equ	0xFF2
 20370                           intcon2	equ	0xFF1
 20371                           postinc0	equ	0xFEE
 20372                           plusw0	equ	0xFEB
 20373                           fsr0h	equ	0xFEA
 20374                           fsr0l	equ	0xFE9
 20375                           wreg	equ	0xFE8
 20376                           indf1	equ	0xFE7
 20377                           postdec1	equ	0xFE5
 20378                           fsr1h	equ	0xFE2
 20379                           fsr1l	equ	0xFE1
 20380                           indf2	equ	0xFDF
 20381                           postinc2	equ	0xFDE
 20382                           postdec2	equ	0xFDD
 20383                           plusw2	equ	0xFDB
 20384                           fsr2h	equ	0xFDA
 20385                           fsr2l	equ	0xFD9
 20386                           status	equ	0xFD8
 20387                           
 20388 ;; *************** function _EUSART1_Transmit_ISR *****************
 20389 ;; Defined at:
 20390 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 20391 ;; Parameters:    Size  Location     Type
 20392 ;;		None
 20393 ;; Auto vars:     Size  Location     Type
 20394 ;;		None
 20395 ;; Return value:  Size  Location     Type
 20396 ;;                  1    wreg      void 
 20397 ;; Registers used:
 20398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20399 ;; Tracked objects:
 20400 ;;		On entry : 0/0
 20401 ;;		On exit  : 0/0
 20402 ;;		Unchanged: 0/0
 20403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20404 ;;      Params:         0       0       0       0       0       0       0
 20405 ;;      Locals:         0       0       0       0       0       0       0
 20406 ;;      Temps:          0       0       0       0       0       0       0
 20407 ;;      Totals:         0       0       0       0       0       0       0
 20408 ;;Total ram usage:        0 bytes
 20409 ;; Hardware stack levels used:    1
 20410 ;; This function calls:
 20411 ;;		Nothing
 20412 ;; This function is called by:
 20413 ;;		_INTERRUPT_InterruptManager
 20414 ;; This function uses a non-reentrant model
 20415 ;;
 20416                           
 20417                           	psect	text121
 20418  003F0A                     __ptext121:
 20419                           	opt stack 0
 20420  003F0A                     _EUSART1_Transmit_ISR:
 20421                           	opt stack 19
 20422                           
 20423                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 20424                           
 20425                           ;incstack = 0
 20426  003F0A  0E46               	movlw	70
 20427  003F0C  0101               	movlb	1	; () banked
 20428  003F0E  61EC               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 20429  003F10  D012               	goto	i2l925
 20430                           
 20431                           ; BSR set to: 1
 20432                           ;eusart1.c: 186: {
 20433                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 20434  003F12  5039               	movf	_eusart1TxTail,w,c	;volatile
 20435  003F14  0D01               	mullw	1
 20436  003F16  0E5D               	movlw	low _eusart1TxBuffer
 20437  003F18  24F3               	addwf	prodl,w,c
 20438  003F1A  6ED9               	movwf	fsr2l,c
 20439  003F1C  0E02               	movlw	high _eusart1TxBuffer
 20440  003F1E  20F4               	addwfc	prodh,w,c
 20441  003F20  6EDA               	movwf	fsr2h,c
 20442  003F22  50DF               	movf	indf2,w,c
 20443  003F24  6EAD               	movwf	4013,c	;volatile
 20444                           
 20445                           ; BSR set to: 1
 20446  003F26  2A39               	incf	_eusart1TxTail,f,c	;volatile
 20447                           
 20448                           ; BSR set to: 1
 20449                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 20450  003F28  0E45               	movlw	69
 20451  003F2A  6439               	cpfsgt	_eusart1TxTail,c	;volatile
 20452  003F2C  D002               	goto	i2l926
 20453                           
 20454                           ; BSR set to: 1
 20455                           ;eusart1.c: 189: {
 20456                           ;eusart1.c: 190: eusart1TxTail = 0;
 20457  003F2E  0E00               	movlw	0
 20458  003F30  6E39               	movwf	_eusart1TxTail,c	;volatile
 20459  003F32                     i2l926:
 20460                           
 20461                           ; BSR set to: 1
 20462                           ;eusart1.c: 191: }
 20463                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 20464                           
 20465                           ; BSR set to: 1
 20466  003F32  2BEC               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 20467                           
 20468                           ;eusart1.c: 193: }
 20469  003F34  0012               	return	
 20470  003F36                     i2l925:
 20471                           
 20472                           ; BSR set to: 1
 20473                           ;eusart1.c: 194: else
 20474                           ;eusart1.c: 195: {
 20475                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 20476  003F36  989D               	bcf	3997,4,c	;volatile
 20477                           
 20478                           ; BSR set to: 1
 20479                           ;eusart1.c: 197: eusart1TxTail = 0;
 20480  003F38  0E00               	movlw	0
 20481  003F3A  6E39               	movwf	_eusart1TxTail,c	;volatile
 20482                           
 20483                           ;eusart1.c: 198: eusart1TxHead = 0;
 20484  003F3C  0E00               	movlw	0
 20485  003F3E  6E3A               	movwf	_eusart1TxHead,c	;volatile
 20486  003F40  0012               	return	
 20487  003F42                     __end_of_EUSART1_Transmit_ISR:
 20488                           	opt stack 0
 20489                           tosu	equ	0xFFF
 20490                           tosh	equ	0xFFE
 20491                           tosl	equ	0xFFD
 20492                           pclatu	equ	0xFFB
 20493                           pclath	equ	0xFFA
 20494                           tblptru	equ	0xFF8
 20495                           tblptrh	equ	0xFF7
 20496                           tblptrl	equ	0xFF6
 20497                           tablat	equ	0xFF5
 20498                           prodh	equ	0xFF4
 20499                           prodl	equ	0xFF3
 20500                           intcon	equ	0xFF2
 20501                           intcon2	equ	0xFF1
 20502                           postinc0	equ	0xFEE
 20503                           plusw0	equ	0xFEB
 20504                           fsr0h	equ	0xFEA
 20505                           fsr0l	equ	0xFE9
 20506                           wreg	equ	0xFE8
 20507                           indf1	equ	0xFE7
 20508                           postdec1	equ	0xFE5
 20509                           fsr1h	equ	0xFE2
 20510                           fsr1l	equ	0xFE1
 20511                           indf2	equ	0xFDF
 20512                           postinc2	equ	0xFDE
 20513                           postdec2	equ	0xFDD
 20514                           plusw2	equ	0xFDB
 20515                           fsr2h	equ	0xFDA
 20516                           fsr2l	equ	0xFD9
 20517                           status	equ	0xFD8
 20518                           
 20519 ;; *************** function _EUSART1_Receive_ISR *****************
 20520 ;; Defined at:
 20521 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 20522 ;; Parameters:    Size  Location     Type
 20523 ;;		None
 20524 ;; Auto vars:     Size  Location     Type
 20525 ;;		None
 20526 ;; Return value:  Size  Location     Type
 20527 ;;                  1    wreg      void 
 20528 ;; Registers used:
 20529 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20530 ;; Tracked objects:
 20531 ;;		On entry : 0/0
 20532 ;;		On exit  : 0/0
 20533 ;;		Unchanged: 0/0
 20534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20535 ;;      Params:         0       0       0       0       0       0       0
 20536 ;;      Locals:         0       0       0       0       0       0       0
 20537 ;;      Temps:          0       0       0       0       0       0       0
 20538 ;;      Totals:         0       0       0       0       0       0       0
 20539 ;;Total ram usage:        0 bytes
 20540 ;; Hardware stack levels used:    1
 20541 ;; This function calls:
 20542 ;;		Nothing
 20543 ;; This function is called by:
 20544 ;;		_INTERRUPT_InterruptManager
 20545 ;; This function uses a non-reentrant model
 20546 ;;
 20547                           
 20548                           	psect	text122
 20549  0040DA                     __ptext122:
 20550                           	opt stack 0
 20551  0040DA                     _EUSART1_Receive_ISR:
 20552                           	opt stack 19
 20553                           
 20554                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 20555                           
 20556                           ; BSR set to: 1
 20557                           ;incstack = 0
 20558  0040DA  A2AB               	btfss	4011,1,c	;volatile
 20559  0040DC  D002               	goto	i2l931
 20560                           
 20561                           ;eusart1.c: 206: {
 20562                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 20563  0040DE  98AB               	bcf	4011,4,c	;volatile
 20564                           
 20565                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 20566  0040E0  88AB               	bsf	4011,4,c	;volatile
 20567  0040E2                     i2l931:
 20568                           
 20569                           ;eusart1.c: 210: }
 20570                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 20571  0040E2  5038               	movf	_eusart1RxHead,w,c	;volatile
 20572  0040E4  0D01               	mullw	1
 20573  0040E6  0E00               	movlw	low _eusart1RxBuffer
 20574  0040E8  24F3               	addwf	prodl,w,c
 20575  0040EA  6ED9               	movwf	fsr2l,c
 20576  0040EC  0E01               	movlw	high _eusart1RxBuffer
 20577  0040EE  20F4               	addwfc	prodh,w,c
 20578  0040F0  6EDA               	movwf	fsr2h,c
 20579  0040F2  CFAE FFDF          	movff	4014,indf2	;volatile
 20580  0040F6  2A38               	incf	_eusart1RxHead,f,c	;volatile
 20581                           
 20582                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 20583  0040F8  0E27               	movlw	39
 20584  0040FA  6438               	cpfsgt	_eusart1RxHead,c	;volatile
 20585  0040FC  D002               	goto	i2l932
 20586                           
 20587                           ;eusart1.c: 217: {
 20588                           ;eusart1.c: 218: eusart1RxHead = 0;
 20589  0040FE  0E00               	movlw	0
 20590  004100  6E38               	movwf	_eusart1RxHead,c	;volatile
 20591  004102                     i2l932:
 20592                           
 20593                           ;eusart1.c: 219: }
 20594                           ;eusart1.c: 220: eusart1RxCount++;
 20595  004102  0100               	movlb	0	; () banked
 20596  004104  2BEE               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 20597                           
 20598                           ; BSR set to: 0
 20599  004106  0012               	return		;funcret
 20600  004108                     __end_of_EUSART1_Receive_ISR:
 20601                           	opt stack 0
 20602                           tosu	equ	0xFFF
 20603                           tosh	equ	0xFFE
 20604                           tosl	equ	0xFFD
 20605                           pclatu	equ	0xFFB
 20606                           pclath	equ	0xFFA
 20607                           tblptru	equ	0xFF8
 20608                           tblptrh	equ	0xFF7
 20609                           tblptrl	equ	0xFF6
 20610                           tablat	equ	0xFF5
 20611                           prodh	equ	0xFF4
 20612                           prodl	equ	0xFF3
 20613                           intcon	equ	0xFF2
 20614                           intcon2	equ	0xFF1
 20615                           postinc0	equ	0xFEE
 20616                           plusw0	equ	0xFEB
 20617                           fsr0h	equ	0xFEA
 20618                           fsr0l	equ	0xFE9
 20619                           wreg	equ	0xFE8
 20620                           indf1	equ	0xFE7
 20621                           postdec1	equ	0xFE5
 20622                           fsr1h	equ	0xFE2
 20623                           fsr1l	equ	0xFE1
 20624                           indf2	equ	0xFDF
 20625                           postinc2	equ	0xFDE
 20626                           postdec2	equ	0xFDD
 20627                           plusw2	equ	0xFDB
 20628                           fsr2h	equ	0xFDA
 20629                           fsr2l	equ	0xFD9
 20630                           status	equ	0xFD8
 20631                           tosu	equ	0xFFF
 20632                           tosh	equ	0xFFE
 20633                           tosl	equ	0xFFD
 20634                           pclatu	equ	0xFFB
 20635                           pclath	equ	0xFFA
 20636                           tblptru	equ	0xFF8
 20637                           tblptrh	equ	0xFF7
 20638                           tblptrl	equ	0xFF6
 20639                           tablat	equ	0xFF5
 20640                           prodh	equ	0xFF4
 20641                           prodl	equ	0xFF3
 20642                           intcon	equ	0xFF2
 20643                           intcon2	equ	0xFF1
 20644                           postinc0	equ	0xFEE
 20645                           plusw0	equ	0xFEB
 20646                           fsr0h	equ	0xFEA
 20647                           fsr0l	equ	0xFE9
 20648                           wreg	equ	0xFE8
 20649                           indf1	equ	0xFE7
 20650                           postdec1	equ	0xFE5
 20651                           fsr1h	equ	0xFE2
 20652                           fsr1l	equ	0xFE1
 20653                           indf2	equ	0xFDF
 20654                           postinc2	equ	0xFDE
 20655                           postdec2	equ	0xFDD
 20656                           plusw2	equ	0xFDB
 20657                           fsr2h	equ	0xFDA
 20658                           fsr2l	equ	0xFD9
 20659                           status	equ	0xFD8
 20660                           
 20661                           	psect	text123
 20662  000000                     __ptext123:
 20663                           	opt stack 0
 20664                           tosu	equ	0xFFF
 20665                           tosh	equ	0xFFE
 20666                           tosl	equ	0xFFD
 20667                           pclatu	equ	0xFFB
 20668                           pclath	equ	0xFFA
 20669                           tblptru	equ	0xFF8
 20670                           tblptrh	equ	0xFF7
 20671                           tblptrl	equ	0xFF6
 20672                           tablat	equ	0xFF5
 20673                           prodh	equ	0xFF4
 20674                           prodl	equ	0xFF3
 20675                           intcon	equ	0xFF2
 20676                           intcon2	equ	0xFF1
 20677                           postinc0	equ	0xFEE
 20678                           plusw0	equ	0xFEB
 20679                           fsr0h	equ	0xFEA
 20680                           fsr0l	equ	0xFE9
 20681                           wreg	equ	0xFE8
 20682                           indf1	equ	0xFE7
 20683                           postdec1	equ	0xFE5
 20684                           fsr1h	equ	0xFE2
 20685                           fsr1l	equ	0xFE1
 20686                           indf2	equ	0xFDF
 20687                           postinc2	equ	0xFDE
 20688                           postdec2	equ	0xFDD
 20689                           plusw2	equ	0xFDB
 20690                           fsr2h	equ	0xFDA
 20691                           fsr2l	equ	0xFD9
 20692                           status	equ	0xFD8
 20693                           
 20694                           	psect	rparam
 20695  0000                     tosu	equ	0xFFF
 20696                           tosh	equ	0xFFE
 20697                           tosl	equ	0xFFD
 20698                           pclatu	equ	0xFFB
 20699                           pclath	equ	0xFFA
 20700                           tblptru	equ	0xFF8
 20701                           tblptrh	equ	0xFF7
 20702                           tblptrl	equ	0xFF6
 20703                           tablat	equ	0xFF5
 20704                           prodh	equ	0xFF4
 20705                           prodl	equ	0xFF3
 20706                           intcon	equ	0xFF2
 20707                           intcon2	equ	0xFF1
 20708                           postinc0	equ	0xFEE
 20709                           plusw0	equ	0xFEB
 20710                           fsr0h	equ	0xFEA
 20711                           fsr0l	equ	0xFE9
 20712                           wreg	equ	0xFE8
 20713                           indf1	equ	0xFE7
 20714                           postdec1	equ	0xFE5
 20715                           fsr1h	equ	0xFE2
 20716                           fsr1l	equ	0xFE1
 20717                           indf2	equ	0xFDF
 20718                           postinc2	equ	0xFDE
 20719                           postdec2	equ	0xFDD
 20720                           plusw2	equ	0xFDB
 20721                           fsr2h	equ	0xFDA
 20722                           fsr2l	equ	0xFD9
 20723                           status	equ	0xFD8
 20724                           
 20725                           	psect	temp
 20726  000048                     btemp:
 20727                           	opt stack 0
 20728  000048                     	ds	1
 20729  0000                     int$flags	set	btemp
 20730  0000                     wtemp6	set	btemp+1
 20731                           tosu	equ	0xFFF
 20732                           tosh	equ	0xFFE
 20733                           tosl	equ	0xFFD
 20734                           pclatu	equ	0xFFB
 20735                           pclath	equ	0xFFA
 20736                           tblptru	equ	0xFF8
 20737                           tblptrh	equ	0xFF7
 20738                           tblptrl	equ	0xFF6
 20739                           tablat	equ	0xFF5
 20740                           prodh	equ	0xFF4
 20741                           prodl	equ	0xFF3
 20742                           intcon	equ	0xFF2
 20743                           intcon2	equ	0xFF1
 20744                           postinc0	equ	0xFEE
 20745                           plusw0	equ	0xFEB
 20746                           fsr0h	equ	0xFEA
 20747                           fsr0l	equ	0xFE9
 20748                           wreg	equ	0xFE8
 20749                           indf1	equ	0xFE7
 20750                           postdec1	equ	0xFE5
 20751                           fsr1h	equ	0xFE2
 20752                           fsr1l	equ	0xFE1
 20753                           indf2	equ	0xFDF
 20754                           postinc2	equ	0xFDE
 20755                           postdec2	equ	0xFDD
 20756                           plusw2	equ	0xFDB
 20757                           fsr2h	equ	0xFDA
 20758                           fsr2l	equ	0xFD9
 20759                           status	equ	0xFD8


Data Sizes:
    Strings     21
    Constant    143
    Data        24
    BSS         285
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160    132     154
    BANK1           256     34     237
    BANK2           256     93     163
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    readUartMessage$3597	PTR FTN()void  size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 

    SynthReadData@data	PTR unsigned char  size(2) Largest target is 0

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 10
		 -> GetIntFromUartData@dataRegArr(BANK0[10]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK1[18]), 
		 -> DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK2[69]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), synthLdRxArray(BANK1[14]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK1[18]), 
		 -> DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK2[69]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), synthLdRxArray(BANK1[14]), 

    Make32bitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    GetUint16FromBitArray@bitarray	PTR unsigned char  size(2) Largest target is 14
		 -> synthLdTxArray(BANK1[14]), synthLdRxArray(BANK1[14]), 

    FillArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), synthLdRxArray(BANK1[14]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK1[18]), 
		 -> DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK2[69]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), synthLdRxArray(BANK1[14]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SynthReadData@TxMsg(BANK1[18]), DacReadValue@TxMsg(BANK0[7]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK2[69]), sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), 
		 -> rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    crc8@dataArray	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[18]), SynthReadData@TxMsg(BANK1[18]), DacReadValue@TxMsg(BANK0[7]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK2[69]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK1[20]), 

    GroupDAC@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 64
		 -> sampleArray(BANK1[64]), 

    IOCB5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB5_DefaultInterruptHandler(), 

    IOCB5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCB5_DefaultInterruptHandler(), 

    IOCB4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB4_DefaultInterruptHandler(), 

    IOCB4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCB4_DefaultInterruptHandler(), 

    UpdateSynthFreq@data	PTR unsigned char  size(2) Largest target is 0

    DacReadValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    DacSetValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    FlashReadUart@data	PTR unsigned char  size(2) Largest target is 0

    WriteUartMessage@dataBuf	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[18]), SynthReadData@TxMsg(BANK1[18]), DacReadValue@TxMsg(BANK0[7]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK2[69]), SendAckMessage@TxMsg(COMRAM[6]), 

    SetChannelMode@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _GetMcuRunTime->___lldiv
    _GetMcuFwVersion->_ZeroArray
    _GroupFlashMemory->_FlashReadCondition
    _FlashReadCondition->_ZeroArray
    _FlashEreaseMem->_SendAckMessage
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _testLeds->_SendAckMessage
    _ResetMcu->_SendAckMessage
    _SetChannelMode->_SendAckMessage
    _keepAliveSignalUart->_SendAckMessage
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB5_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendSystemStartAck->_SendAckMessage
    _SendAckMessage->_ZeroArray
    _ZeroArray->_memset
    _WriteUartMessage->_EUSART1_Write
    _StoreIntInEeprom->_make8
    _EepromWrite->_DATAEE_WriteByte
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _SWSPI_Synth_send_bits->_FillArray
    _FillArray->_memset
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    ___lmul->_EepromRead
    _EepromRead->_DATAEE_ReadByte
    _CheckFlashPrecentage->___ftdiv
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _main->_readUartMessage
    _readUartMessage->_GroupAdc
    _readUartMessage->_GroupControlMcu
    _readUartMessage->_GroupDAC
    _readUartMessage->_GroupFlashMemory
    _readUartMessage->_GroupStatusAndVersion
    _readUartMessage->_GroupSynthesizers
    _UpdateSynthFreq->_SWSPI_send_word
    _SynthReadData->_ReadIntFromEeprom
    _SetSynthOper->_InitSynth
    _FlashReadUart->_GetIntFromUartData
    _GroupDAC->_DacReadValue
    _DacSetValue->_SWSPI_send_word
    _GetIntFromUartData->_strtol
    _DacReadValue->_ReadIntFromEeprom
    _SynthLdDetect->_InitSynth
    _PLLInitialize->_InitSynth
    _InitSynth->_ReadIntFromEeprom
    _DacInit->_ReadIntFromEeprom
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _ReadIntFromEeprom->_pow
    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _GroupSynthesizers->_SynthReadData

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _GroupFlashMemory->_FlashReadUart

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  931838
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
                 _SendSystemStartAck
                      _SetMcuRunTime
                       _SetMcuSystem
                      _SynthLdDetect
                 _keepAliveSignalLed
                _keepAliveSignalUart
                    _readUartMessage
 ---------------------------------------------------------------------------------
 (1) _readUartMessage                                      7     7      0  464524
                                            125 BANK0      7     7      0
                       _EUSART1_Read
                           _GroupAdc *
                    _GroupControlMcu *
                           _GroupDAC *
                   _GroupFlashMemory *
              _GroupStatusAndVersion *
                  _GroupSynthesizers *
                _InitRxMessageParams
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    2719
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupSynthesizers                                    3     1      2  250570
                                            122 BANK0      3     1      2
                       _SetSynthOper
                      _SynthReadData
                    _UpdateSynthFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateSynthFreq                                     11     9      2   28259
                                             42 BANK0     11     9      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (3) _SynthReadData                                       36    34      2  103787
                                            104 BANK0      2     0      2
                                              0 BANK1     34    34      0
                  _ReadIntFromEeprom
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _SetSynthOper                                         1     1      0  118369
                                            111 BANK0      1     1      0
                          _InitSynth
                     _SendAckMessage
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (2) _GroupStatusAndVersion                                4     1      3   13446
                                            122 BANK0      3     1      2
                    _GetMcuFwVersion
                      _GetMcuRunTime
 ---------------------------------------------------------------------------------
 (3) _GetMcuRunTime                                       17    17      0    4498
                                             36 COMRAM     2     2      0
                                              0 BANK0     15    15      0
                   _WriteUartMessage
                            ___lldiv
                            ___llmod
                               _crc8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _GetMcuFwVersion                                     33    33      0    8917
                                             35 COMRAM     7     7      0
                                              0 BANK0     26    26      0
                   _WriteUartMessage
                          _ZeroArray
                             ___wmul
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _GroupFlashMemory                                     3     1      2   39377
                                            122 BANK0      3     1      2
                     _FlashEreaseMem
                 _FlashReadCondition
                      _FlashReadUart
 ---------------------------------------------------------------------------------
 (3) _FlashReadUart                                      107   105      2   21457
                                             39 BANK0     14    12      2
                                              0 BANK2     93    93      0
                  _FLASH_IsWriteDone
                     _FLASH_ReadByte
                 _GetIntFromUartData
                     _SendAckMessage
                   _WriteUartMessage
                          _ZeroArray
                                _abs
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _abs                                                  4     2      2     183
                                             23 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (4) _FLASH_ReadByte                                       4     0      4     453
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _FlashReadCondition                                  13    13      0    7780
                                             35 COMRAM    13    13      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _FlashEreaseMem                                       0     0      0   10078
                     _SendAckMessage
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupDAC                                             3     1      2  131446
                                            122 BANK0      3     1      2
                       _DacReadValue
                        _DacSetValue
 ---------------------------------------------------------------------------------
 (3) _DacSetValue                                         15    13      2   27980
                                             42 BANK0     15    13      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  33    25      8    6661
                                              6 BANK0     33    25      8
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2723
                                             37 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _DacReadValue                                        18    16      2  103308
                                            104 BANK0     18    16      2
                  _ReadIntFromEeprom
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (2) _GroupControlMcu                                      4     1      3   14817
                                            122 BANK0      3     1      2
                           _ResetMcu
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0    7427
                                             43 COMRAM     3     3      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetMcu                                             0     0      0    7359
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupAdc                                             3     1      2    7573
                                            122 BANK0      3     1      2
                     _SetChannelMode
 ---------------------------------------------------------------------------------
 (3) _SetChannelMode                                       2     0      2    7511
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      46
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalUart                                  0     0      0    7359
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SynthLdDetect                                        0     0      0  111089
                     _BlinkErrorLeds
                          _InitSynth
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     600
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _BlinkErrorLeds                                       6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0     294
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     294
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0     196
          _IOCB4_SetInterruptHandler
          _IOCB5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _IOCB5_SetInterruptHandler                            2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _IOCB4_SetInterruptHandler                            2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     592
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     592
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendSystemStartAck                                   0     0      0    7359
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _SendAckMessage                                       8     7      1    7359
                                             35 COMRAM     8     7      1
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _crc8                                                 9     5      4    1610
                                             23 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ZeroArray                                            4     0      4    2719
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _WriteUartMessage                                     7     3      4    1452
                                             24 COMRAM     7     3      4
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0  220989
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        0     0      0  111709
                          _FillArray
                          _InitSynth
 ---------------------------------------------------------------------------------
 (4) _InitSynth                                            7     7      0  110399
                                            104 BANK0      7     7      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_CE_Pin                                     2     1      1     425
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              5     5      0  109280
                                            104 BANK0      5     5      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _StoreIntInEeprom                                     9     2      7    3779
                                             32 COMRAM     9     2      7
                        _EepromWrite
                              _make8
 ---------------------------------------------------------------------------------
 (5) _EepromWrite                                          2     1      1     338
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_WriteByte                                     3     2      1     186
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (4) _SWSPI_send_word                                      9     4      5    9930
                                             40 COMRAM     5     0      5
                                             38 BANK0      4     4      0
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5    1595
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SWSPI_Synth_send_bits                               42    38      4    3865
                                             36 COMRAM     4     0      4
                                              0 BANK0     38    38      0
                          _FillArray
                    _Make32bitsArray
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _Make32bitsArray                                     10     4      6     344
                                             23 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (6) _FillArray                                            5     0      5    1310
                                             31 COMRAM     5     0      5
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     677
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _SWSPI_DAC_send_bits                                  3     2      1    2041
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Data_Pin                                       2     1      1     757
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Clk_Pin                                        2     1      1     937
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _ReadIntFromEeprom                                   23    19      4   95314
                                             81 BANK0     23    19      4
                         _EepromRead
                           ___awtoft
                            ___fttol
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     636
                                             25 COMRAM    12     4      8
                         _EepromRead (ARG)
 ---------------------------------------------------------------------------------
 (5) _EepromRead                                           1     1      0      62
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_ReadByte                                      1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   14121
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          16    16      0  105331
                                             81 BANK0     16    16      0
                  _ADC_GetConversion
                   _FlashSampleWrite
              _GetUint16FromBitArray
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (5) _pow                                                 17    11      6   88933
                                             64 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (6) _log                                                  5     2      3   28922
                                             46 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _exp                                                  9     6      3   47974
                                             55 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (7) _ldexp                                                7     2      5     539
                                             46 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (7) _floor                                                8     5      3   11854
                                             47 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (7) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     911
                                             24 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6    1098
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) ___altoft                                            10     6      4    3367
                                             46 COMRAM     2     2      0
                                             39 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (7) _eval_poly                                           12     5      7   13735
                                             46 COMRAM     2     2      0
                                             36 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___wmul                                               6     2      4    2322
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     335
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             4     1      3    3476
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _GetUint16FromBitArray                                9     7      2     266
                                             23 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1811
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6     992
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                         18    18      0     767
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     767
                            ___lwmod
 ---------------------------------------------------------------------------------
 (13) ___lwmod                                             5     1      4     767
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (12) _PIN_MANAGER_IOC                                     0     0      0       0
                          _IOCB4_ISR
                          _IOCB5_ISR
 ---------------------------------------------------------------------------------
 (13) _IOCB5_ISR                                           0     0      0       0
                   Absolute function *
      _IOCB5_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (14) _IOCB5_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _IOCB4_ISR                                           0     0      0       0
                   Absolute function *
      _IOCB4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (14) _IOCB4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _MEMORY_ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     _GetUint16FromBitArray
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _FillArray
             _memset
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _StoreIntInEeprom
         _EepromWrite
           _DATAEE_WriteByte
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
       _FillArray
         _memset
       _InitSynth
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
         _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SendSystemStartAck
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
         _IOCB4_SetInterruptHandler
         _IOCB5_SetInterruptHandler
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _SynthLdDetect
     _BlinkErrorLeds
     _InitSynth
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _FillArray
             _memset
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _StoreIntInEeprom
         _EepromWrite
           _DATAEE_WriteByte
         _make8
       _SwSpi_Set_CE_Pin
     ___awmod
   _keepAliveSignalLed
   _keepAliveSignalUart
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _readUartMessage
     _EUSART1_Read
     _GroupAdc *
       _SetChannelMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupControlMcu *
       _ResetMcu
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _testLeds
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupDAC *
       _DacReadValue
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _DacSetValue
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _GroupFlashMemory *
       _FlashEreaseMem
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _ZeroArray
           _memset
       _FlashReadCondition
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _FlashReadUart
         _FLASH_IsWriteDone
         _FLASH_ReadByte
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _abs
         _crc8
     _GroupStatusAndVersion *
       _GetMcuFwVersion
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         ___wmul
         _crc8
       _GetMcuRunTime
         _WriteUartMessage
           _EUSART1_Write
         ___lldiv
         ___llmod
         _crc8
     _GroupSynthesizers *
       _SetSynthOper
         _InitSynth
           _ReadIntFromEeprom
             _EepromRead
               _DATAEE_ReadByte
             ___awtoft
               ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _pow
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___wmul
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___wmul
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
           _SWSPI_send_word
             _SWSPI_DAC_send_bits
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SWSPI_Synth_send_bits
               _FillArray
                 _memset
               _Make32bitsArray
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
             _make8
           _StoreIntInEeprom
             _EepromWrite
               _DATAEE_WriteByte
             _make8
           _SwSpi_Set_CE_Pin
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _SwSpi_Set_CE_Pin
       _SynthReadData
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _UpdateSynthFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _ZeroArray *
       _memset
     _crc8 *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
     _IOCB4_ISR
       Absolute function(Fake) *
       _IOCB4_DefaultInterruptHandler *
     _IOCB5_ISR
       Absolute function(Fake) *
       _IOCB5_DefaultInterruptHandler *
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100     5D      A3       8       63.7%
BITBANK1           100      0       0       5        0.0%
BANK1              100     22      ED       6       92.6%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     84      9A       4       96.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     271       9        0.0%
DATA                 0      0     271      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Mar 22 16:42:59 2018

              __size_of_SendSystemStartAck 000C                          ??_GetMcuFwVersion 0024  
               __end_of_keepAliveSignalLed 43B2                               ___altoft@exp 002F  
                 _eusart1TxBufferRemaining 01EC                         readUartMessage@idx 00E1  
                 GetIntFromUartData@idxCon 0084                            _GroupControlMcu 404A  
              __end_of_keepAliveSignalUart 448C                              ___altoft@sign 0030  
               __size_of_FLASH_IsWriteDone 000E                                         l60 36E2  
                 GetIntFromUartData@recVal 007B                   GetIntFromUartData@retVal 007C  
                      __end_of_BlinkOkLeds 38BA                            _SWSPI_send_word 3042  
                      ___wmul@multiplicand 001A         __size_of_IOCB4_SetInterruptHandler 000A  
                          _timer0ReloadVal 0046                 ?_IOCB4_SetInterruptHandler 0018  
                             __CFG_CP0$OFF 000000                               __CFG_CP1$OFF 000000  
                             __CFG_CP2$OFF 000000                               __CFG_CP3$OFF 000000  
                             ___ftadd@exp1 0083                               ___ftadd@exp2 0082  
                             ___ftadd@sign 0081                                ?_MEMORY_ISR 0001  
                                      l122 409E                                        l202 16CA  
                                      l211 1562                                        l203 1526  
                                      l221 161A                                        l213 157A  
                                      l126 1266                                        l222 15DE  
                                      l206 1532                                        l127 113E  
                                      l215 1592                                        l207 155C  
                                      l320 23AC                                        l224 163A  
                                      l217 15B0                                        l234 3F62  
                                      l226 1672                                        l235 3F4C  
                                      l331 07A4                                        l219 15B6  
                                      l228 1678                                        l341 0954  
                                      l333 0822                                        l326 08FC  
                                      l334 08E8                                        l319 238C  
                                      l351 0A80                                        l327 085A  
                                      l352 0A96                                        l344 096C  
                                      l336 0894                                        l521 0EDA  
                                      l345 0A9C                                        l329 0794  
                                      l346 0988                                        l338 08A8  
                                      l427 2A16                                        l523 10E4  
                                      l531 10C6                                        l435 28EA  
                                      l347 09A2                                        l428 2A2C  
                                      l540 2480                                        l533 1118  
                                      l349 0A28                                        l526 0FF6  
                                      l550 3524                                        l542 249C  
                                      l527 0FD8                                        l560 1838  
                                      l553 3554                                        l561 1846  
                                      l537 2486                                        l570 324A  
                                      l554 3560                                        l538 243E  
                                      l715 3AA4                                        l707 3A90  
                                      l643 3086                                        l563 1852  
                                      l716 3AAE                                        l708 3A9A  
                                      l572 32BA                                        l548 3530  
                                      l653 3A06                                        l661 2D10  
                                      l573 32B2                                        l549 3518  
                                      l670 3A30                                        l654 39D2  
                                      l734 3DDE                                        l558 17A8  
                                      l655 39EC                                        l663 2D3E  
                                      l647 30E8                                        l735 3DB6  
                                      l656 39F6                                        l664 2D4A  
                                      l744 3DCA                                        l736 3DC0  
                                      l920 3DAE                                        l568 326C  
                                      l745 3DD4                                        l921 3DAC  
                                      l569 3244                                        l906 3C7E  
                                      l755 3E1A                                        l668 3A62  
                                      l756 3DF2                                        l908 3CA4  
                                      l669 3A26                                        l781 4350  
                                      l765 3E06                                        l757 3DFC  
                                      l686 3A4E                                        l678 3A3A  
                                      l766 3E10                                        l687 3A58  
                                      l679 3A44                                        l919 3D8A  
                                      l776 4354                                        l697 3AB8  
                                      l777 434C                                        l698 3A7C  
                                      l699 3A86                               __CFG_CPB$OFF 000000  
                             __CFG_CPD$OFF 000000                       readUartMessage@chRec 00E3  
                        ??_Make32bitsArray 001E                                 _SYNTH_REGS 0601  
                                      _abs 415C                                        _exp 1328  
                                      _log 1F5C                                        _pow 1C60  
                             ___awmod@sign 001D                                        prod 000FF3  
                                      tosl 000FFD                                        wreg 000FE8  
           ?_InitSystemApplicationManagers 0001                               __CFG_LVP$OFF 000000  
               __end_of_FlashReadCondition 22B8                             InitSynth@cType 00CC  
                             ___ftdiv@cntr 0063                         __size_of_IOCB4_ISR 0022  
                       __size_of_IOCB5_ISR 0022                               ___ftdiv@sign 0068  
                                     ?_abs 0018                                       l1060 2E12  
                                     l1056 2E38                                       l1400 3C4A  
                                     l2200 19A8                                       l1057 2DF0  
                                     l1401 3C2E                                       l1321 3438  
                                     l2050 1CAA                                       l2202 19C2  
                                     l1330 3428                                       l1306 4230  
                                     l1314 42E2                                       l1059 2E10  
                                     l2051 1C9A                                       l1067 3F9C  
                                     l1307 4224                                       l1315 42D4  
                                     l2300 4322                                       l1420 1E50  
                                     l1173 40C2                                       l2053 1CC2  
                                     l2213 43EE                                       l2205 19D4  
                                     l1325 33E8                                       l1309 422A  
                                     l1414 3B72                                       l2054 1D4C  
                                     l2038 4122                                       l1430 38BC  
                                     l2206 1A40                                       l1422 1EC6  
                                     l1326 33F8                                       l2055 1D2A  
                                     l2039 4112                                       l1511 0C7E  
                                     l1327 3408                                       l1335 3E4A  
                                     l2320 2BD2                                       l2312 1F7C  
                                     l2056 1DD2                                       l1432 38C0  
                                     l2208 1A64                                       l1328 3410  
                                     l1336 3E30                                       l1344 3FD0  
                                     l2321 2B54                                       l1441 39C8  
                                     l1433 38C4                                       l2209 1AA0  
                                     l1513 0CCA                                       l1329 3418  
                                     l1345 3FB4                                       l1601 3648  
                                     l2250 137C                                       l2314 1FA0  
                                     l1450 2180                                       l1434 38C8  
                                     l1418 1E30                                       l1338 3E36  
                                     l2251 13B6                                       l1451 20A6  
                                     l1435 38F6                                       l1515 0CF8  
                                     l1339 3E3C                                       l1347 3FC2  
                                     l2260 2A62                                       l2252 13E6  
                                     l1444 3ECA                                       l2253 1510  
                                     l1429 38FA                                       l1445 3EA0  
                                     l1509 0C50                                       l1525 27C0  
                                     l2262 2A8A                                       l2254 14E6  
                                     l2263 2B06                                       l1439 398A  
                                     l2191 1934                                       l2272 2C04  
                                     l2248 1342                                       l1800 36C0  
                                     l1296 405C                                       l2193 1988  
                                     l1297 4050                                       l2274 2C4E  
                                     l1618 3ADE                                       l2290 4304  
                                     l2259 2A70                                       l1619 3AF2  
                                     l1299 4056                                       l2268 32EA  
                                     l2276 2C80                                       l2277 2C74  
                                     l2285 41A4                                       l2189 191C  
                                     l1806 3EE6                                       l1910 2654  
                                     l1831 2F6C                                       l1911 2664  
                                     l2295 41CA                                       l2199 1998  
                                     l1832 2F62                                       l1904 25D2  
                                     l1656 417A                                       l1825 2F10  
                                     l1921 3D0A                                       l1826 2F06  
                                     l1906 25FA                                       l1915 4258  
                                     l1907 262C                                       l1595 35F8  
                                     l1828 2F44                                       l1860 1B30  
                                     l1908 263C                                       l1596 3610  
                                     l1829 2F2E                                       l1933 257A  
                                     l1925 24DE                                       l1870 1B8C  
                                     l1934 256E                                       l1598 3636  
                                     l1871 1B82                                       l1695 359C  
                                     l1927 2556                                       l1791 366E  
                                     l1599 362A                                       l1880 1BC0  
                                     l1856 1B06                                       l1696 3590  
                                     l1936 2596                                       l1928 2546  
                                     l1792 367A                                       l1865 1B96  
                                     l1961 349C                                       l1882 1BEE  
                                     l1794 3690                                       l1962 3490  
                                     l1891 26F0                                       l1883 1C0A  
                                     l1971 3752                                       l1795 3688  
                                     l1892 272E                                       l1884 1C3A  
                                     l1972 3746                                       l1893 2754  
                                     l1965 34D0                                       l1982 3928  
                                     l1798 36A8                                       l1966 34DE  
                                     l1983 391C                                       l1879 1BCA  
                                     l1975 377A                                       l1799 36B2  
                                     l1976 3788                                       l1889 26C8  
                                     l1897 3382                                       l1898 33B2  
                                     l7053 33DE                                       l8115 0ED2  
                                     l8051 1E28                                       ?_exp 0097  
                                     ?_log 008E                                       l6447 3B34  
                                     l7319 4112                                       l8143 0FD8  
                                     l8073 1EB6                                       l8155 10C6  
                                     l8243 3728                                       l8091 1F1A  
                                     l7621 14E6                                       l6661 3866  
                                     l6397 3808                                       l8229 36D2  
                                     l8273 2DE8                                       l7537 397A  
                                     l8441 28DA                                       l8353 096C  
                                     l8451 2920                                       l8357 0992  
                                     l8621 27B0                                       l8541 184A  
                                     l8367 09F8                                       l8535 183E  
                                     l8633 283C                                       l7915 30A4  
                                     l7749 2D08                                       l7677 3D78  
                                     l7919 30B2                                       l8681 2A16  
                                     l8669 2954                                       ?_pow 00A0  
                                     l8767 1136                                       STR_1 0690  
                                     STR_2 0690                                       STR_3 0690  
                                     STR_4 0690                                       STR_5 0690  
                                     STR_6 0690                                       STR_7 0690  
                                     STR_8 0690                                       STR_9 0690  
                       EepromWrite@address 001C                                       _LATA 000F89  
                                     _LATB 000F8A                                       _LATC 000F8B  
                                     _LATD 000F8C                                       _LATE 000F8D  
                                     u7000 1BD2                                       u6080 3694  
                                     u6160 43A4                                       u7041 25BA  
                                     u7131 24C2                                       u7220 3312  
                                     u7061 25E2                                       u7150 24FC  
                                     u8200 195E                                       u7241 26B0  
                                     u6178 43A6                                       u7155 24F4  
                                     u8300 4470                                       u7228 3314  
                                     u7340 2A7C                                       u8060 3056  
                                     u8220 196E                                       u9020 3506  
                                     u8301 446C                                       u7261 26D8  
                                     u7190 2580                                       u9030 3508  
                                     u9200 2318                                       u8090 30E2  
                                     u8170 1924                                       u9130 18A6  
                                     u7435 3FAA                                       u9220 235C  
                                     u6740 2EF8                                       u6900 1B22  
                                     u7380 2C24                                       u9300 1218  
                                     u7436 3FAC                                       u8340 1E6A  
                                     u9060 3542                                       u9140 18AA  
                                     u9070 3544                                       u6831 1AC4  
                                     u5944 3B66                                       u7640 13C0  
                                     u7800 38EE                                       u8600 3728  
                                     u5945 3B60                                       u6841 1AD8  
                                     u6930 1B60                                       u7650 13C2  
                                     u8370 1F1A                                       u6780 2F76  
                                     u7388 2C28                                       u8460 0F0E  
                                     u8540 34A0                                       u9180 283C  
                                     u8525 4046                                       u7805 38E4  
                                     u8381 1F52                                       u8526 4048  
                                     u6870 1AF8                                       u7750 1D10  
                                     u8710 073E                                       u9440 2EE4  
                                     u8720 0740                                       u8650 2E16  
                                     u6970 1B9E                                       u8570 3756  
                                     u9195 22C2                                       u7940 41C6  
                                     u8820 0942                                       u7870 2D5C  
                                     u9438 16A4                                       u9607 371A  
                                     u8911 319E                                       u8671 06CC  
                                     u9439 16C2                                       u7960 4196  
                                     u8920 31E0                                       u8665 2E34  
                                     u9617 382E                                       u8666 2E36  
                                     u8850 09F8                                       u9627 3848  
                                     u8940 2920                                       u8860 0A18  
                                     u9637 2D5E                                       u8925 31D4  
                                     u8765 082C                                       u9647 388C  
                                     u9657 38A6                                       u9577 36EA  
                                     u8785 08BA                                       u8961 23D8  
                                     u9667 1204                                       u9587 36FA  
                                     u9597 370A                   ??_SwSpi_Set_Synth_Le_Pin 0019  
                                     _WPUB 000F61                              _EUSART1_Write 3D76  
                                     abs@a 0018                                       _crc8 3C1C  
                  ??_InitAdcApplicationMgr 0018                                       _data 0133  
                                     _main 35E6                               ___ftpack@arg 0018  
                            ?_EUSART1_Read 0001                               ___ftpack@exp 001B  
                          _TMR0_StartTimer 44E0                            __end_of_DacInit 2A32  
                                     fsr0h 000FEA                                       fsr1h 000FE2  
                                     fsr2h 000FDA                                       fsr0l 000FE9  
                                     indf1 000FE7                                       indf2 000FDF  
                                     fsr1l 000FE1                                       fsr2l 000FD9  
                                     btemp 0048                              __CFG_BORV$190 000000  
                                     exp@x 0097                                       log@x 008E  
                        ?_FLASH_WriteBlock 001D                           ?_ClearMcuRunTime 0001  
                                     pow@x 00A0                                       pow@y 00A3  
                                     prodh 000FF4                                       prodl 000FF3  
                GroupStatusAndVersion@data 00DA              __size_of_CheckFlashPrecentage 00AE  
                                     start 00DC                              __CFG_IESO$OFF 000000  
                        DacReadValue@TxMsg 00D1                        __end_of_EepromWrite 4466  
                       ??_FLASH_WriteBlock 0023                              _adcSampleMode 003B  
                             ___ftmul@cntr 0076                               ___param_bank 000000  
                             ___ftmul@sign 0077                             _BlinkErrorLeds 37FE  
                             ___fttol@exp1 0086                                      ??_abs 001A  
                __size_of_DATAEE_WriteByte 0036                                      ??_exp 0031  
                                    ??_log 0031                               ___fttol@lval 0082  
                                    ??_pow 0031                    __end_of_TMR0_Initialize 4016  
                   _ReadIntFromEeprom$3591 00BC                     _ReadIntFromEeprom$3592 00BF  
           __size_of_OSCILLATOR_Initialize 000E              __end_of_OSCILLATOR_Initialize 4458  
                                    ?_crc8 0018                 SWSPI_DAC_send_bits@phrType 001C  
                                    ?_main 0001                                      _EEADR 000FA9  
                          __end_of___ftadd 1C60                     GetUint16FromBitArray@i 001F  
                                    STR_10 0690                                      STR_11 0690  
                                    STR_20 069C                                      STR_12 0690  
                                    STR_21 069C                                      STR_13 0690  
                                    STR_22 069C                                      STR_14 0690  
                                    STR_23 069C                                      STR_15 0690  
                                    STR_24 069C                                      STR_16 0690  
                                    STR_25 069C                                      STR_17 0690  
          __size_of_SwSpi_Set_Dac_Sync_Pin 001C                                      STR_26 069C  
                                    STR_18 069C                                      STR_27 069C  
                                    STR_19 069C                                      STR_28 069C  
                          __end_of___awmod 36CA                                      STR_29 069C  
                          __end_of___ftdiv 2786          __end_of_IOCB4_SetInterruptHandler 44C0  
                          __end_of___ftneg 4266                            __end_of___lldiv 34F0  
                               _EepromRead 44C0                            __end_of___ftmul 269E  
                                    _T0CON 000FD5                            __end_of___llmod 379A  
                          __end_of___ftsub 3D34                            __end_of___fttol 25A8  
                             _SYNTH_ADDRES 0635                             __CFG_DEBUG$OFF 000000  
                          InitSynth@regNum 00CE                            __end_of___lwmod 3D76  
                      StoreIntInEeprom@idx 0029                                      i2l931 40E2  
                                    i2l932 4102                                      i2l925 3F36  
                                    i2l861 0086                                      i2l926 3F32  
                                    i2l854 005E                                      i2l863 0090  
                                    i2l856 006A                                      i2l859 007A  
                      StoreIntInEeprom@val 0028                                      _TMR0H 000FD7  
                                    _TMR0L 000FD6                                      _TRISA 000F92  
                                    _TRISB 000F93                                      _TRISC 000F94  
                                    _TRISD 000F95                                      _TRISE 000F96  
                      _SWSPI_DAC_send_bits 39CA          __size_of_TMR0_SetInterruptHandler 000A  
                            __CFG_WRT0$OFF 000000                              __CFG_WRT1$OFF 000000  
               __end_of_GetIntFromUartData 1F5C                              __CFG_WRT2$OFF 000000  
                      ___lmul@multiplicand 001E                  ?_TMR0_SetInterruptHandler 0018  
                            __CFG_WRT3$OFF 000000                               ___lltoft@exp 0028  
                     _EUSART1_Transmit_ISR 3F0A                             __CFG_EBTR0$OFF 000000  
                           __CFG_FCMEN$OFF 000000                             __CFG_EBTR1$OFF 000000  
                           __CFG_EBTR2$OFF 000000                             __CFG_EBTR3$OFF 000000  
                        ?_WriteUartMessage 0019                           __end_of_TMR0_ISR 3042  
                            __CFG_WRTB$OFF 000000                              __CFG_WRTC$OFF 000000  
                            __CFG_WRTD$OFF 000000                            DacSetValue@data 008A  
                          _DATAEE_ReadByte 43F2                             __CFG_EBTRB$OFF 000000  
                            ___awtoft@sign 0023                    __end_of_PIN_MANAGER_IOC 443C  
                                    crc8@i 001F                                      _make8 38BA  
           __size_of_SWSPI_Synth_send_bits 00C6                      __end_of_GetMcuRunTime 286A  
                                    _count 0130                                      _floor 2A32  
                                    _ldexp 2BEA                                      _frexp 32C2  
                                    _errno 012C              __end_of_SWSPI_Synth_send_bits 2D7E  
                          __end_of_isalpha 41AC                            __end_of_isdigit 430C  
                                    _group 00EC             __size_of_GetUint16FromBitArray 0054  
                       ??_WriteUartMessage 001D                         __CFG_MCLRE$EXTMCLR 000000  
                            ___ftpack@sign 001C                    ??_GroupStatusAndVersion 0031  
            __end_of_GetUint16FromBitArray 3B78                            __end_of_isspace 41D2  
                           ?_EUSART1_Write 0001                                ?_AdcConvert 0001  
                           __CFG_BOREN$OFF 000000                            __end_of_isupper 432A  
                                    pclath 000FFA                                      tablat 000FF5  
                        ??_UpdateSynthFreq 0030                                      pow@yi 00AD  
                           ??_EUSART1_Read 0018                             FillArray@array 0020  
                                    plusw0 000FEB                                      plusw2 000FDB  
                                    status 000FD8                             FillArray@value 0024  
                                    wtemp6 0049                       ReadIntFromEeprom@idx 00C7  
                           __CFG_HFOFST$ON 000000                            __end_of_toupper 43F2  
           SwSpi_Set_Synth_Le_Pin@cPinMode 0018                     __size_of_SynthLdDetect 009A  
                  __end_of_GroupControlMcu 407A                        __size_of_MEMORY_ISR 0004  
                           __CFG_PBADEN$ON 000000                                exp@exponent 009D  
           CheckFlashPrecentage@precentage 007C                       ?_SWSPI_DAC_send_bits 001A  
                   __end_of_BlinkErrorLeds 385C            ??_IOCB4_DefaultInterruptHandler 0001  
                              ldexp@newexp 0091                    __end_of_SWSPI_send_word 30EC  
                              _BlinkOkLeds 385C                    WriteUartMessage@dataBuf 0019  
                          __initialization 30EC                                log@exponent 0091  
                             __end_of_crc8 3C6A                 __end_of_EUSART1_Initialize 3E9A  
                             __end_of_main 365A                         DacReadValue@regNum 00CC  
                        __end_of_IOCB4_ISR 42CE                          __end_of_IOCB5_ISR 42AC  
                  FLASH_ReadByte@flashAddr 0018                ?_INTERRUPT_InterruptManager 0001  
                         __end_of_GroupDAC 3FE2                     __size_of_SynthReadData 01DE  
                          _readUartMessage 151E                           __end_of_GroupAdc 42EE  
                                   ??_crc8 001C                                     ??_main 0031  
                            ___fttol@sign1 0081                          ?_SwSpi_Set_CE_Pin 0018  
                            __activetblptr 000002                    __size_of_FLASH_ReadByte 0012  
                         __end_of_ResetMcu 444A                         __size_of_FillArray 001C  
                             _writeAddress 0040                         ??_SwSpi_Set_CE_Pin 0019  
                    ?_EUSART1_Transmit_ISR 0001                    __end_of_TMR0_StartTimer 44E4  
                                   ?_make8 0018                                     _ADCON0 000FC2  
                                   _ADCON1 000FC1                                     _ADCON2 000FC0  
                                   ?_floor 008F                  FLASH_WriteBlock@writeAddr 001D  
                                   ?_ldexp 008E                                     ?_frexp 0018  
                         __end_of___altoft 35E6                           ___llmod@dividend 0018  
                                   _ADRESH 000FC4                                     _ADRESL 000FC3  
                                   _EEDATA 000FA8                                  ??_DacInit 00C8  
                                   _EECON2 000FA7                           __end_of___awtoft 3F0A  
                                   _ANSELA 000F38                                     _ANSELB 000F39  
                                   _ANSELC 000F3A                                     _ANSELD 000F3B  
                                   _ANSELE 000F3C                           __end_of___ftpack 2F96  
           ?_IOCB5_DefaultInterruptHandler 0001                           __end_of___lltoft 3972  
                        _FlashReadUart$610 0251                          _FlashReadUart$609 024D  
                        ?_FlashSampleWrite 002D                                     i2l1130 302C  
                                   i2l1127 2FC6                                     i2l2024 3D4A  
                                   i2l1128 2FE8                                     i2l2025 3D42  
                                   i2l1129 300A                                     i2l2028 3D62  
                                   i2l2029 3D6C                             __CFG_WDTEN$OFF 000000  
                     StoreIntInEeprom@data 0021                                     _TABLAT 000FF5  
                              _EepromWrite 4458                                     _RCREG1 000FAE  
                         __end_of___lwtoft 428A                    __size_of_FlashEreaseMem 0052  
                __size_of_FLASH_EraseBlock 0034                                     _RCSTA1 000FAB  
                        SynthReadData@data 00C8            __size_of_SwSpi_Set_Synth_Le_Pin 003C  
                                   _OSCCON 000FD3                                     _SPBRG1 000FAF  
                   _SwSpi_Set_Dac_Sync_Pin 4348                    __size_of_SwSpi_Data_Pin 0056  
                 GroupSynthesizers@request 00DC                         ??_FlashSampleWrite 0060  
                                   _TXREG1 000FAD                                     _TXSTA1 000FAC  
                       __size_of_InitSynth 0276                      ??_SWSPI_DAC_send_bits 001B  
                           _Timer0_SynthLd 00F3                   __end_of_GroupFlashMemory 3E62  
                          ?_BlinkErrorLeds 0001                             __CFG_PWRTEN$ON 000000  
                           __CFG_XINST$OFF 000000                               _synthLdRxCnt 00F9  
                             _synthLdTxCnt 00F8                                     _cState 00ED  
                                   ___ftge 3352                                     ___lmul 3ACE  
                SWSPI_Synth_send_bits@data 0025                                     ___wmul 41F8  
                                ??___ftadd 007E                  SWSPI_Synth_send_bits@mask 0080  
                                ??___awmod 001C                                  ??___ftdiv 0060  
                                ??___ftneg 001B                                  ??___lldiv 0020  
                                ??___ftmul 006F                      __end_of_PLLInitialize 41F8  
                                ??___llmod 0020                                  ??___ftsub 002F  
                                ??___fttol 007C                                  ??___lwmod 0005  
           SwSpi_Set_Dac_Sync_Pin@cPinMode 0018                           ?_TMR0_Initialize 0001  
                                   _memset 4108                         __end_of_DAC_ADDRES 0657  
                                   clear_0 3152                                     clear_1 315E  
                                   clear_2 316A                                     clear_3 3176  
                          ___awmod@divisor 001A                        __size_of_AdcConvert 020A  
                          ___awmod@counter 001C                    __end_of_DATAEE_ReadByte 4406  
                              ?_EepromRead 0001                                     _strtol 18DC  
                                   floor@i 0092                      __end_of_SwSpi_Clk_Pin 3ACE  
                                   floor@x 008F                      ___ftmul@f3_as_product 0073  
                            _SynthLdDetect 3228                   SWSPI_DAC_send_bits@count 001B  
               FlashSampleWrite@channelNum 002F                               __pdataCOMRAM 0040  
                                ??_isalpha 001B                                  ??_isdigit 0018  
                    __end_of_FlashReadUart 0AB8                           __end_of_testLeds 3734  
                            ?_SetMcuSystem 0001                               __mediumconst 0000  
                                ??_isspace 0018                                     tblptrh 000FF7  
                                ??_isupper 0018                                     tblptrl 000FF6  
                                   tblptru 000FF8                   ADC_GetConversion@channel 001C  
                          ??_EUSART1_Write 0018   TMR0_SetInterruptHandler@InterruptHandler 0018  
IOCB5_SetInterruptHandler@InterruptHandler 0018  IOCB4_SetInterruptHandler@InterruptHandler 0018  
             __size_of_InitRxMessageParams 0028                           ?_PIN_MANAGER_IOC 0001  
                    ReadIntFromEeprom@base 00B8                            _eusart1RxBuffer 0100  
                                ??_toupper 0018                         __size_of_ZeroArray 001E  
            __size_of_INTERRUPT_Initialize 0004                              _SynthReadData 16FE  
                          _eusart1TxBuffer 025D                            _GetMcuFwVersion 0AB8  
                         __end_ofexp@coeff 0675                          _SYSTEM_Initialize 4380  
                         __end_oflog@coeff 0690                                 __accesstop 0060  
                  __end_of__initialization 317C                                 ___altoft@c 0087  
                            ZeroArray@size 0022                                 ___ftadd@f1 0078  
                               ___ftadd@f2 007B                                 ___ftge@ff1 0018  
                               ___ftge@ff2 001B                         ?_SYSTEM_Initialize 0001  
                             eval_poly@res 008B                              ___rparam_used 000001  
                               ___ftdiv@f1 0029                                 ___ftdiv@f2 002C  
                               ___ftdiv@f3 0064                           ?_GroupControlMcu 00DA  
             GroupStatusAndVersion@request 00DD                               InitSynth@idx 00CD  
                        __end_of_FillArray 4380                                 ___ftneg@f1 0018  
                               ___awtoft@c 0020                    __end_of_readUartMessage 16FE  
                 WriteUartMessage@dataSize 001B                                 ___ftmul@f1 0069  
                               ___ftmul@f2 006C                           ?_SWSPI_send_word 0029  
                             ?_DacSetValue 008A                                 ___ftsub@f1 0084  
                               ___ftsub@f2 0087                                 ___fttol@f1 0078  
                          _Make32bitsArray 3972                             __pcstackCOMRAM 0001  
                             __pidataBANK0 44D0                               __pidataBANK1 4474  
                      ??_SYSTEM_Initialize 001C                                  ?_TMR0_ISR 0001  
                      DacReadValue@byteIdx 00D8                                 ___lltoft@c 0020  
                      DacReadValue@byteNum 00CD                              __end_of_make8 3916  
                      DacReadValue@readVal 00CE                           _DATAEE_WriteByte 3F78  
                            __end_of_floor 2B14                              __end_of_ldexp 2CB8  
                            __end_of_frexp 3352      __end_of_IOCB4_DefaultInterruptHandler 44EC  
   __size_of_IOCB4_DefaultInterruptHandler 0002              _IOCB4_DefaultInterruptHandler 44EA  
                   _SwSpi_Set_Synth_Le_Pin 3DEE                       GroupFlashMemory@data 00DA  
                               ___lwtoft@c 0020                ??_IOCB4_SetInterruptHandler 001A  
                           ?_SynthLdDetect 0001            __end_of_DAC_DEFAULT_INIT_VALUES 0653  
                     __end_of_EUSART1_Read 3CAE                               ??_MEMORY_ISR 0001  
                __size_of_StoreIntInEeprom 0038                     __size_of_SetMcuRunTime 0044  
                   ??_EUSART1_Transmit_ISR 0001                          __end_of_InitSynth 111E  
                           ??_SetMcuSystem 001C                      TMR0_ISR@CountCallBack 0035  
            SwSpi_Set_Synth_Le_Pin@phrType 0019                    GroupFlashMemory@request 00DC  
                       _keepAliveSignalLed 439A                          make8@dataLocation 001C  
              __end_of_EUSART1_Receive_ISR 4108                FLASH_WriteBlock@GIEBitValue 002B  
                             GroupDAC@data 00DA                              ?_SetSynthOper 0001  
                                  ??_make8 001D                                    ??_floor 0031  
                         ?_TMR0_StartTimer 0001                                    ??_ldexp 0093  
                                  ??_frexp 001D                  __end_of_SYSTEM_Initialize 439A  
                          _AdcConvert$3590 00BB                             ?_SynthReadData 00C8  
                            _eusart1RxHead 0038                       GetMcuFwVersion@TxMsg 0064  
                            _eusart1TxHead 003A                              _eusart1RxTail 0037  
                               __pbssBANK0 00E4                                 __pbssBANK1 0100  
                               __pbssBANK2 025D                              _eusart1TxTail 0039  
                      ?_keepAliveSignalLed 0001                         __size_of_eval_poly 00D6  
                          __CFG_PLLCFG$OFF 000000                                 _channelArr 0642  
                                ?_GroupDAC 00DA                                 __pnvCOMRAM 0046  
                                ?_GroupAdc 00DA             __size_of_InitAdcApplicationMgr 0006  
               __end_of_SendSystemStartAck 4498              __end_of_InitAdcApplicationMgr 44DC  
                      __size_of_EepromRead 000A                         __end_of_MEMORY_ISR 44E8  
                                ?_ResetMcu 0001                         _FlashReadCondition 21AC  
          ??_InitSystemApplicationManagers 0031                         __CFG_CCP2MX$PORTC1 000000  
                                  ?___ftge 0018                             FlashReadUart@j 0255  
         __end_of_TMR0_SetInterruptHandler 44AC                                    ?___lmul 001A  
                                  ?___wmul 0018                                 ??_TMR0_ISR 0006  
                       __CFG_CCP3MX$PORTB5 000000                         SetChannelMode@data 002C  
                     ??_keepAliveSignalLed 0018                          __end_of_ZeroArray 4348  
                                ?___altoft 0087                                    ?_memset 0018  
                        _ReadIntFromEeprom 2086                             ___lmul@product 0022  
                      ?_FlashReadCondition 0001         __size_of_IOCB5_SetInterruptHandler 000A  
                                ?___awtoft 0020                                  ?___ftpack 0018  
                             GroupAdc@data 00DA                           FlashReadUart@idx 0257  
                 GetUint16FromBitArray@res 001D                           FlashReadUart@val 0245  
               ?_IOCB5_SetInterruptHandler 0018                                  ?___lltoft 0020  
                        _synthLdRxArrayCnt 00E4                  __size_of_FLASH_WriteBlock 00BC  
                  __size_of_ADC_Initialize 0016                 FlashSampleWrite@sampleData 002D  
                           _FLASH_ReadByte 441A                                  ?___lwtoft 0020  
             __end_of_CheckFlashPrecentage 2EE8                         ?_ReadIntFromEeprom 00B1  
                                  ?_strtol 0026                           ?_DATAEE_ReadByte 0001  
               GetMcuFwVersion@compileData 0060                            _UpdateSynthFreq 23B8  
                          _Timer0_Sampling 00F2               __size_of_keepAliveSignalUart 000C  
                       SynthReadData@TxMsg 01B8                    __end_of_GetMcuFwVersion 0EA8  
                       SynthReadData@cType 01CB                                    _OSCCON2 000FD2  
                           ??_SetSynthOper 0031                                    _TBLPTRH 000FF7  
                                  _TBLPTRL 000FF6                                    _TBLPTRU 000FF8  
                                  _OSCTUNE 000F9B                                    _SPBRGH1 000FB0  
                        _synthLdTxArrayCnt 0132                        ??_ReadIntFromEeprom 00B5  
                                  _DacInit 294E                      GetIntFromUartData@num 007A  
                         GetMcuRunTime@idx 006D                               ??_AdcConvert 00B1  
                     ??_FlashReadCondition 0024                             _FlashEreaseMem 3B78  
                         _FLASH_EraseBlock 4016             __size_of_GroupStatusAndVersion 0024  
                           _SwSpi_Data_Pin 3A22                  _IOCB4_SetInterruptHandler 44B6  
                     DATAEE_WriteByte@bAdd 0019              __end_of_GroupStatusAndVersion 4242  
                  __end_of_Make32bitsArray 39CA                                 ??_GroupDAC 0031  
                               ??_GroupAdc 0031                              _SetMcuRunTime 3CAE  
                       _GetIntFromUartData 1DE0                         FlashReadUart@TxMsg 0200  
                    GroupSynthesizers@data 00DA                                    __Hparam 0000  
                               ??_ResetMcu 002C                  __size_of_WriteUartMessage 0036  
                             ?_BlinkOkLeds 0001                                    __Lparam 0000  
                             _cntRegUpdate 00E5                      SendAckMessage@inGroup 0025  
                         ?_readUartMessage 0001                     GroupControlMcu@request 00DD  
                                ?_testLeds 0001                  __end_of_ReadIntFromEeprom 21AC  
                      ?_GetIntFromUartData 0066                            __size_of___ftge 0090  
                          __size_of___lmul 0056                                    ___ftadd 1AB2  
                                  ___awmod 365A                                    ___ftdiv 269E  
                                  ___ftneg 4242                                    ___lldiv 346E  
                          __size_of___wmul 0026                                    ___ftmul 25A8  
                                  ___llmod 3734                                    ___ftsub 3CF2  
                                  ___fttol 24B0                 FlashSampleWrite@rotateLeft 0062  
                             crc8@dataSize 001A                   __size_of_ClearMcuRunTime 0014  
                                  ___lwmod 3D34                       AdcConvert@_adcResult 00B3  
                             __psmallconst 0600                            ??_SynthLdDetect 0031  
                               ??___altoft 008B                     __end_of_FLASH_ReadByte 442C  
                          __CFG_STVREN$OFF 000000                 SWSPI_Synth_send_bits@count 0084  
                    _mcuRunTimeIn5SecTicks 0128                                    _crcCalc 00E9  
                                  _channel 00EF                                    __pcinit 30EC  
                               ??___awtoft 0023                                 ??___ftpack 001D  
                        __end_of_eval_poly 2BEA                            __size_of_memset 002C  
                                  __ramtop 0600                    __size_of_SendAckMessage 0052  
                               ??___lltoft 0024                    __size_of_SetChannelMode 0030  
                                  __ptext0 35E6                                    __ptext1 151E  
                                  __ptext2 4134                                    __ptext3 3FAE  
                                  __ptext4 3E2A                                    __ptext5 42CE  
                                  __ptext6 421E                                    __ptext7 404A  
                                  __ptext8 33E2                                    __ptext9 23B8  
                                  crc8@crc 001D                         __end_of_AdcConvert 1328  
                        DacSetValue@retVal 0091                                 ??___lwtoft 0023  
                                _T0CONbits 000FD5          __end_of_IOCB5_SetInterruptHandler 44B6  
                                _IOCB4_ISR 42AC                                  _IOCB5_ISR 428A  
                        BlinkErrorLeds@idx 001C                            __size_of_strtol 01D6  
                    _OSCILLATOR_Initialize 444A                               __size_of_abs 0028  
                                  _isalpha 4184                               __size_of_exp 01F6  
                             __size_of_log 012A                                    _isdigit 42EE  
                             __size_of_pow 0180                           ___awmod@dividend 0018  
                       _EUSART1_Initialize 3E62                   ??_PIN_MANAGER_Initialize 001A  
                                  _isspace 41AC                  StoreIntInEeprom@numOfByes 0026  
                                  _isupper 430C                                    _request 00EB  
                          GroupDAC@request 00DC                            ??_SynthReadData 0031  
                     ??_GetIntFromUartData 006E                     __end_of_FlashEreaseMem 3BCA  
               __size_of_SYSTEM_Initialize 001A                    ?_SwSpi_Set_Dac_Sync_Pin 0001  
                   __end_of_SwSpi_Data_Pin 3A78                    StoreIntInEeprom@address 0025  
                                  _toupper 43DE                       end_of_initialization 317C  
                                  exp@sign 009F                        ?_EUSART1_Initialize 0001  
                         ??_BlinkErrorLeds 0018                               ?_EepromWrite 001B  
                    _SWSPI_Synth_send_bits 2CB8                  __size_of_SwSpi_Set_CE_Pin 003C  
                    _GetUint16FromBitArray 3B24                             ?_SetMcuRunTime 0001  
                                  memset@c 001A                                    memset@n 001C  
                                  memset@p 001E                              __Lmediumconst 0000  
                          ___lldiv@divisor 001C                       __end_of_SetMcuSystem 44A2  
                                  pow@sign 00AC                            ___lldiv@counter 0024  
                        ?_GroupFlashMemory 00DA                           AdcConvert@adcRes 00BE  
                       __end_of_SYNTH_REGS 0635                       UpdateSynthFreq@cType 008C  
                               ??_testLeds 002C                       SWSPI_send_word@datac 0086  
                               _rxMsgQueue 0188                                    postdec1 000FE5  
                                  postdec2 000FDD            ??_IOCB5_DefaultInterruptHandler 0001  
                       ??_GroupFlashMemory 0031                                    postinc0 000FEE  
                                  postinc2 000FDE                      __size_of_EUSART1_Read 0044  
                     SynthReadData@byteNum 01D9                        _InitRxMessageParams 4134  
                              testLeds@idx 002D                    __end_of_UpdateSynthFreq 24B0  
                     __size_of_DacSetValue 009E                  __size_of_FlashSampleWrite 0100  
                   __size_of_GetMcuRunTime 00E4                       ??_EUSART1_Initialize 0018  
    __end_of_InitSystemApplicationManagers 43DE     __size_of_InitSystemApplicationManagers 0016  
            _InitSystemApplicationManagers 43C8                            ?_FLASH_ReadByte 0018  
                                  strtol@a 0061                                    strtol@c 0065  
                                  strtol@s 0026                   _TMR0_SetInterruptHandler 44A2  
                                _PORTDbits 000F83                               ??_EepromRead 0019  
                         _StoreIntInEeprom 3E9A                                 ?_IOCB4_ISR 0001  
                               ?_IOCB5_ISR 0001                           ?_GetMcuFwVersion 0001  
                           ZeroArray@array 0020             __end_of_SwSpi_Set_Dac_Sync_Pin 4364  
                             strtol@endptr 0028              FLASH_WriteBlock@flashWrBufPtr 0021  
                       GetMcuRunTime@TxMsg 0060                       ?_InitRxMessageParams 0001  
                          ?_FlashEreaseMem 0001                        EUSART1_Write@txData 0018  
                          ?_SwSpi_Data_Pin 0018                   __end_of_DATAEE_WriteByte 3FAE  
              __end_of_SWSPI_DAC_send_bits 3A22                              ?_DacReadValue 00C8  
                     DacReadValue@dacIndex 00D0                   FLASH_EraseBlock@baseAddr 0018  
                         ?_Make32bitsArray 0018                                ___ftdiv@exp 0067  
                             _EUSART1_Read 3C6A                       _CheckFlashPrecentage 2E3A  
                        FLASH_WriteBlock@i 002C                         __end_of_EepromRead 44CA  
                         DacReadValue@data 00C8                                ___ftmul@exp 0072  
                  ?_SwSpi_Set_Synth_Le_Pin 0018                       __end_of_SetSynthOper 356C  
               __size_of_ReadIntFromEeprom 0126                                  _FillArray 4364  
             __end_of_INTERRUPT_Initialize 44E0                             __end_of___ftge 33E2  
                           __end_of___lmul 3B24                             __end_of___wmul 421E  
                      GroupControlMcu@data 00DA                              __pidataCOMRAM 44CA  
                        __size_of_TMR0_ISR 00AC                             _ADC_Initialize 43B2  
                         _FLASH_WriteBlock 2D7E                     ?_OSCILLATOR_Initialize 0001  
                           __end_of_memset 4134                         InitSynth@EepromVal 00C8  
                               floor@expon 0095                              FillArray@size 0022  
                        ??_ClearMcuRunTime 0018                             __end_of_strtol 1AB2  
                      start_initialization 30EC                                 eval_poly@d 0087  
                               eval_poly@n 0089                                 eval_poly@x 0084  
                              _SynthRxOper 0044                           BlinkOkLeds@state 001B  
                 __size_of_TMR0_Initialize 0034                                 ldexp@value 008E  
                              _SynthTxOper 0045            __size_of_PIN_MANAGER_Initialize 0064  
                              __end_of_abs 4184                      ??_InitRxMessageParams 0024  
                              __end_of_exp 151E                                __end_of_log 2086  
                              __end_of_pow 1DE0              GetUint16FromBitArray@bitarray 0018  
                 AdcConvert@_adcResult_347 00B9                                  _InitSynth 0EA8  
                           ??_DacReadValue 00CA                              _GetMcuRunTime 2786  
                   ?_SWSPI_Synth_send_bits 0025                            ??_SetMcuRunTime 0021  
                    __end_of_EUSART1_Write 3DB2                     ?_GetUint16FromBitArray 0018  
                   __size_of_PLLInitialize 0026                                 frexp@value 0018  
                          ___llmod@divisor 001C                              _Timer0_OneSec 00F0  
                    ?_CheckFlashPrecentage 0001                            ___llmod@counter 0020  
                      DATAEE_ReadByte@bAdd 0018                   __size_of_PIN_MANAGER_IOC 0010  
                   __size_of_SwSpi_Clk_Pin 0056                        SendAckMessage@TxMsg 0026  
           __end_of_SwSpi_Set_Synth_Le_Pin 3E2A                        _keepAliveSignalUart 4480  
                        __size_of_GroupDAC 0034                           _WriteUartMessage 3F42  
                        __size_of_GroupAdc 0020                     __size_of_FlashReadUart 0412  
                                 ??___ftge 001E                                   ??___lmul 0022  
                  SendAckMessage@inRequest 0024                                   ??___wmul 001C  
                GetIntFromUartData@idxData 0086                          __size_of_ResetMcu 000E  
                     __size_of_BlinkOkLeds 005E                                 ?_FillArray 0020  
                   __end_of_ADC_Initialize 43C8                           ?_UpdateSynthFreq 008A  
                              __pdataBANK0 00F4                                __pdataBANK1 01DA  
                  SWSPI_DAC_send_bits@data 001A                                   ??_memset 001E  
                 __size_of_GroupControlMcu 0030                FLASH_EraseBlock@GIEBitValue 001C  
                           _SendAckMessage 3BCA                             _SetChannelMode 407A  
                 __end_of_FLASH_EraseBlock 404A                         _SendSystemStartAck 448C  
                 __size_of_SWSPI_send_word 00AA      __end_of_IOCB5_DefaultInterruptHandler 44EA  
   __size_of_IOCB5_DefaultInterruptHandler 0002              _IOCB5_DefaultInterruptHandler 44E8  
              ??_IOCB5_SetInterruptHandler 001A                                   ??_strtol 002C  
                           _eusart1RxCount 00EE                                ??_IOCB4_ISR 0001  
                              ??_IOCB5_ISR 0001                          __size_of___altoft 007A  
                                _ZeroArray 432A                            DacInit@dacInput 00CA  
                        __size_of___awtoft 0038                          __size_of___ftpack 00AE  
                     ?_keepAliveSignalUart 0001                          __size_of___lltoft 005C  
                              __pbssCOMRAM 0031                          __size_of___lwtoft 0024  
            __size_of_EUSART1_Transmit_ISR 0038                              __pcstackBANK0 0060  
                            __pcstackBANK1 01B8                              __pcstackBANK2 0200  
                             _isalpha$3317 001C                        ?_SendSystemStartAck 0001  
                               ?_InitSynth 0001                               _isdigit$3320 0019  
                           ?_GetMcuRunTime 0001                        DacSetValue@dacIndex 0090  
                           BlinkOkLeds@idx 001C                                   ?_DacInit 0001  
                    __size_of_SetMcuSystem 000A                           _SwSpi_Set_CE_Pin 3DB2  
             __size_of_EUSART1_Receive_ISR 002E              SWSPI_Synth_send_bits@bitArray 0060  
                  _DAC_DEFAULT_INIT_VALUES 064B                       __size_of_EepromWrite 000E  
                    _TMR0_InterruptHandler 01E6                                  __pnvBANK1 01E6  
                        SetSynthOper@cType 00CF                   __size_of_TMR0_StartTimer 0004  
                   _PIN_MANAGER_Initialize 379A                       ??_SendSystemStartAck 002C  
                    _InitAdcApplicationMgr 44D6                                  __pintcode 0008  
                   __end_of_SendAckMessage 3C1C                                  __ptext100 4242  
                                __ptext101 269E                                  __ptext110 4466  
                                __ptext102 3ED2                                  __ptext111 40AA  
                                __ptext103 3916                                  __ptext120 44E4  
                                __ptext104 4266                                  __ptext121 3F0A  
                                __ptext113 2F96                                  __ptext105 2EE8  
                                __ptext122 40DA                                  __ptext114 3D34  
                                __ptext106 3B24                                  __ptext123 0000  
                                __ptext115 442C                                  __ptext107 22B8  
                                __ptext116 428A                                  __ptext108 2D7E  
                                __ptext117 44E8                                  __ptext109 4016  
                                 ?___ftadd 0078                                  __ptext118 42AC  
                                __ptext119 44EA                                   ?___awmod 0018  
                                 ?___ftdiv 0029                     __end_of_SetChannelMode 40AA  
                                 ?___ftneg 0018                                   ?___lldiv 0018  
                                 ?___ftmul 0069                                   ?___llmod 0018  
                                 ?___ftsub 0084                                   ?___fttol 0078  
                         _FlashSampleWrite 22B8                                   ?___lwmod 0001  
                          ?_ADC_Initialize 0001                           _Timer0_KeepAlive 00F1  
                        __size_of_testLeds 006A                              _PLLInitialize 41D2  
              __size_of_keepAliveSignalLed 0018               ??_INTERRUPT_InterruptManager 0006  
                         __CFG_PRICLKEN$ON 000000                                 ?_ZeroArray 0020  
                              __smallconst 0600                      ??_keepAliveSignalUart 002C  
                                 _BAUDCON1 000FB8                              _SwSpi_Clk_Pin 3A78  
                                 ?_isalpha 0001                                   ?_isdigit 0001  
                                _eval_poly 2B14                        BlinkErrorLeds@state 001B  
                                 ?_isspace 0001                               _SetMcuSystem 4498  
                        FlashReadUart@data 0087                                   ?_isupper 0001  
                            _FlashReadUart 06A6                             __size_of_make8 005C  
                           __size_of_floor 00E2                             __size_of_ldexp 00CE  
                           __size_of_frexp 0090                   __size_of_DATAEE_ReadByte 0014  
                                 ?_toupper 0001                       _INTERRUPT_Initialize 44DC  
           FLASH_WriteBlock@blockStartAddr 0027                __size_of_FlashReadCondition 010C  
                _IOCB5_SetInterruptHandler 44AC                          ??_TMR0_Initialize 001A  
                   ??_CheckFlashPrecentage 0078                             ___wmul@product 001C  
                                 _IOCBbits 000F62                                   _LATAbits 000F89  
                                 _LATBbits 000F8A                                   _LATCbits 000F8B  
                                 _LATDbits 000F8C                      __size_of_SetSynthOper 007C  
                 __end_of_StoreIntInEeprom 3ED2             FlashReadUart@numOfSampleToRead 025B  
                                 _PIE1bits 000F9D                                   _PIE2bits 000FA0  
                    _GroupStatusAndVersion 421E                          _GroupSynthesizers 33E2  
      __size_of_INTERRUPT_InterruptManager 00D4                 ??_TMR0_SetInterruptHandler 001A  
                     Make32bitsArray@array 0018                                   _PIR1bits 000F9E  
                         ??_FLASH_ReadByte 001C                                   i2u602_48 42BA  
                                 _PIR2bits 000FA1                                  _rxMsgData 0174  
                                 i2u612_40 3D4E                                   i2u604_48 4298  
                      UpdateSynthFreq@data 008A                        SWSPI_send_word@data 0029  
                       ?_GroupSynthesizers 00DA                                   _RCONbits 000FD0  
                         __CFG_WDTPS$16384 000000                        SynthReadData@regNum 01D8  
                                make8@data 0018                                ??_FillArray 0025  
                                 _TMR0_ISR 2F96                            ?_SendAckMessage 0024  
                          ?_SetChannelMode 002C                             ?_PLLInitialize 0001  
                        ??_PIN_MANAGER_IOC 0001                       __end_of_DacReadValue 294E  
                      ??_GroupSynthesizers 0031                     GetIntFromUartData@data 0066  
                  SWSPI_send_word@dataSize 002D                                 _ADCON0bits 000FC2  
                    __end_of_SynthLdDetect 32C2                   __size_of_readUartMessage 01E0  
                        ___wmul@multiplier 0018                             ?_SwSpi_Clk_Pin 0018  
                         ??_FlashEreaseMem 002C                         __end_of_channelArr 064B  
                         ??_SwSpi_Data_Pin 0019                  __size_of_GroupFlashMemory 0038  
                               ?_eval_poly 0084                             ?_FlashReadUart 0087  
                        ??_GroupControlMcu 0031                            ??_GetMcuRunTime 0025  
                    DATAEE_WriteByte@bData 0018                               _isspace$3323 0019  
                              ??_InitSynth 0031                          ??_SWSPI_send_word 002E  
                               DacInit@idx 00CC                               _SetSynthOper 34F0  
                               _DAC_ADDRES 0653                __size_of_GetIntFromUartData 017C  
                        ___lmul@multiplier 001A                    FlashReadCondition@TxMsg 0028  
                              _INTCON2bits 000FF1                      __end_of_SynthReadData 18DC  
                                copy_data0 3100                                  copy_data1 3120  
                                copy_data2 3140                      ?_INTERRUPT_Initialize 0001  
                         __size_of_DacInit 00E4                          ?_DATAEE_WriteByte 0018  
                __end_of_GroupSynthesizers 346E                      EUSART1_Read@readValue 0019  
                 __end_of_FLASH_WriteBlock 2E3A                                   _GroupDAC 3FAE  
                       ??_DATAEE_WriteByte 0019                                   _GroupAdc 42CE  
                                frexp@eptr 001B                                 _EECON1bits 000FA6  
                           _synthLdRxArray 01AA                                   __Hrparam 0000  
                   ?_InitAdcApplicationMgr 0001                             _synthLdTxArray 019C  
                                 _ResetMcu 443C                              ??_DacSetValue 008C  
                              _readAddress 00F4                                   __Lrparam 0000  
             SynthReadData@eepromDataArray 01CC                          _ADC_GetConversion 40AA  
                      FlashReadUart@offset 0259                            _ClearMcuRunTime 4406  
                        __CFG_P2BMX$PORTD2 000000                    ??_OSCILLATOR_Initialize 0018  
                       ?_ADC_GetConversion 0018                          ??_TMR0_StartTimer 0018  
                         __size_of___ftadd 01AE                           __size_of___awmod 0070  
                         __size_of___ftdiv 00E8                       _numOfValidateSamples 0031  
                         __size_of___ftneg 0024                           __size_of___lldiv 0082  
                                 ___altoft 356C                           __size_of___ftmul 00F6  
                         __size_of___llmod 0066                           __size_of___ftsub 0042  
                         __size_of___fttol 00F8                __size_of_EUSART1_Initialize 0038  
                         __size_of___lwmod 0042                            GroupAdc@request 00DC  
                                 ___awtoft 3ED2                              crc8@dataArray 0018  
                                 ___ftpack 2EE8                           _numOfReadSamples 003C  
                                 ___lltoft 3916                          _FLASH_IsWriteDone 4466  
                   _IOCB4_InterruptHandler 01EA                        WriteUartMessage@idx 001E  
                                 ___lwtoft 4266                                ??_ZeroArray 0024  
                 GetMcuRunTime@tempRunTime 0069                        ??_ADC_GetConversion 001A  
                                 _exp$3595 009A                               _isupper$3326 0019  
                       ?_FLASH_IsWriteDone 0001                                   _dataSize 00EA  
                    SwSpi_Clk_Pin@cPinMode 0018                   __end_of_WriteUartMessage 3F78  
                         __size_of_isalpha 0028                                   _crcGiven 00E8  
                         __size_of_isdigit 001E                    ??_SWSPI_Synth_send_bits 0029  
                   SwSpi_Data_Pin@cPinMode 0018                    ??_GetUint16FromBitArray 001A  
           ?_IOCB4_DefaultInterruptHandler 0001                           __size_of_isspace 0026  
                                 __ptext10 16FE                                   __ptext11 34F0  
                                 __ptext20 318A                                   __ptext12 2786  
                                 __ptext21 1DE0                                   __ptext13 346E  
                                 __ptext30 443C                                   __ptext22 18DC  
                                 __ptext14 0AB8                                   __ptext31 407A  
                                 __ptext23 43DE                                   __ptext15 06A6  
                                 __ptext40 3FE2                                   __ptext32 3C6A  
                                 __ptext24 41AC                                   __ptext16 415C  
                                 __ptext41 44A2                                   __ptext33 4480  
                                 __ptext25 42EE                                   __ptext17 441A  
                                 __ptext50 3734                                   __ptext42 379A  
                                 __ptext34 439A                                   __ptext26 4184  
                                 __ptext18 21AC                                   __ptext51 448C  
                                 __ptext43 44AC                                   __ptext35 3228  
                                 __ptext27 430C                                   __ptext19 3B78  
                                 __ptext60 0EA8                                   __ptext52 3BCA  
                                 __ptext44 44B6                                   __ptext36 365A  
                                 __ptext28 286A                                   __ptext61 3DB2  
                                 __ptext53 3C1C                                   __ptext45 444A  
                                 __ptext37 37FE                                   __ptext29 36CA  
                                 __ptext70 4348                                   __ptext62 44D6  
                                 __ptext54 432A                                   __ptext46 44DC  
                                 __ptext38 4498                                   __ptext71 2CB8  
                                 __ptext63 294E                                   __ptext55 3F42  
                                 __ptext47 3E62                                   __ptext39 4380  
                                 __ptext80 44C0                                   __ptext72 3972  
                                 __ptext64 3E9A                                   __ptext56 3D76  
                                 __ptext48 43B2                                   __ptext81 43F2  
                                 __ptext73 4364                                   __ptext65 4458  
                                 __ptext57 43C8                                   __ptext49 3CAE  
                                 __ptext90 2A32                                   __ptext82 4406  
                                 __ptext74 4108                                   __ptext66 3F78  
                                 __ptext58 44E0                                   __ptext91 32C2  
                                 __ptext83 2E3A                                   __ptext75 39CA  
                                 __ptext67 3042                                   __ptext59 41D2  
                                 __ptext92 24B0                                   __ptext84 385C  
                                 __ptext76 3A22                                   __ptext68 38BA  
                                 __ptext93 3352                                   __ptext85 111E  
                                 __ptext77 3A78                                   __ptext69 3DEE  
                                 __ptext94 356C                                   __ptext86 1C60  
                                 __ptext78 2086                                   __ptext95 2B14  
                                 __ptext87 1F5C                                   __ptext79 3ACE  
                                 __ptext96 41F8                                   __ptext88 1328  
                                 __ptext97 25A8                                   __ptext89 2BEA  
                                 __ptext98 3CF2                                   __ptext99 1AB2  
                         __size_of_isupper 001E               SWSPI_Synth_send_bits@phrType 0085  
                 SwSpi_Set_CE_Pin@cPinMode 0018                                   _pow$3593 00A6  
                                 _pow$3594 00A9                        ??_FLASH_IsWriteDone 0018  
              DATAEE_WriteByte@GIEBitValue 001A                           __size_of_toupper 0014  
                 __size_of_GetMcuFwVersion 03F0                       _GetMcuFwVersion$2692 0078  
                     _GetMcuFwVersion$2688 0076                              __size_of_crc8 004E  
                            __size_of_main 0074                     ?_GroupStatusAndVersion 00DA  
                     __end_of_SYNTH_ADDRES 0642                                   _msgCount 00E7  
             _TMR0_DefaultInterruptHandler 000000                          ??_DATAEE_ReadByte 0018  
                __end_of_ADC_GetConversion 40DA               __size_of_SWSPI_DAC_send_bits 0058  
                      Make32bitsArray@data 001A                         SWSPI_send_word@idx 0087  
                              _groupsArray 01DA                            ??_PLLInitialize 0031  
                                 _testLeds 36CA                    __size_of_BlinkErrorLeds 005E  
                                 int$flags 0048                   __size_of_Make32bitsArray 0058  
                               strtol@base 002A                                 strtol@sign 0060  
                __end_of_FLASH_IsWriteDone 4474         __end_of_INTERRUPT_InterruptManager 00DC  
               _INTERRUPT_InterruptManager 0008                         AdcConvert@ldRxSate 00B5  
                       AdcConvert@ldTxSate 00B7                            EepromWrite@data 001B  
                          ??_SwSpi_Clk_Pin 0019                        __end_of_DacSetValue 3228  
                      _EUSART1_Receive_ISR 40DA                   __end_of_SwSpi_Set_CE_Pin 3DEE  
                        ?_FLASH_EraseBlock 0018                __end_of_InitRxMessageParams 415C  
                                 exp@coeff 0657                                 _MEMORY_ISR 44E4  
                          ??_FlashReadUart 0089                                   log@coeff 0675  
                   SWSPI_send_word@phrType 0089                         ??_FLASH_EraseBlock 001C  
                               _INTCONbits 000FF2                                ??_eval_poly 002F  
                              _sampleArray 0134                                _sampleCount 012E  
                                 isalpha@c 001D                                   isdigit@c 001A  
                   ??_INTERRUPT_Initialize 0018                                   memset@p1 0018  
                        ??_readUartMessage 00DD                   __end_of_FlashSampleWrite 23B8  
                                 intlevel2 0000                       ?_EUSART1_Receive_ISR 0001  
                    __end_of_SetMcuRunTime 3CF2                           ___lwmod@dividend 0001  
               __size_of_GroupSynthesizers 008C                                   isspace@c 001A  
                         ___lldiv@dividend 0018                      SynthReadData@data_984 01CA  
                  ?_PIN_MANAGER_Initialize 0001                    __end_of_ClearMcuRunTime 441A  
                               _RCSTA1bits 000FAB                                   isupper@c 001A  
                 ReadIntFromEeprom@address 00C2               __end_of_EUSART1_Transmit_ISR 3F42  
                            ??_BlinkOkLeds 0018                           ??_ADC_Initialize 0018  
                    __size_of_DacReadValue 00E4                         Make32bitsArray@idx 0020  
                            AdcConvert@idx 00C0                              _isReWriteDone 00E6  
                    UpdateSynthFreq@retVal 008D                       SwSpi_Clk_Pin@phrType 0019  
                    SwSpi_Data_Pin@phrType 0019                    SwSpi_Set_CE_Pin@phrType 0019  
                   __size_of_EUSART1_Write 003C                   ??_SwSpi_Set_Dac_Sync_Pin 0018  
                        EepromRead@address 0019                           ___lldiv@quotient 0020  
                         _GroupFlashMemory 3E2A                            ___lwmod@divisor 0003  
                          _TMR0_Initialize 3FE2                            ___lwmod@counter 0005  
                 __size_of_UpdateSynthFreq 00F8                                   toupper@c 0018  
               ReadIntFromEeprom@numOfByes 00B1                          __CFG_T3CMX$PORTC0 000000  
                  ReadIntFromEeprom@retVal 00C3                              ??_EepromWrite 001C  
                               _AdcConvert 111E                      ??_EUSART1_Receive_ISR 0001  
           __end_of_PIN_MANAGER_Initialize 37FE                               _DacReadValue 286A  
             GetIntFromUartData@dataRegArr 0070                          __CFG_FOSC$INTIO67 000000  
                   _IOCB5_InterruptHandler 01E8                            _PIN_MANAGER_IOC 442C  
                        ?_StoreIntInEeprom 0021                           ??_SendAckMessage 0025  
               __size_of_ADC_GetConversion 0030                           ??_SetChannelMode 002E  
                       ??_StoreIntInEeprom 0028                                _DacSetValue 318A  

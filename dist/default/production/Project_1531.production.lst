

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Mar 25 12:04:39 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1,group=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1,group=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1,group=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1,group=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1,group=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1,group=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1,group=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1,group=1
   120                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   121                           	psect	text100,global,reloc=2,class=CODE,delta=1,group=1
   122                           	psect	text101,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text102,global,reloc=2,class=CODE,delta=1,group=1
   124                           	psect	text103,global,reloc=2,class=CODE,delta=1,group=1
   125                           	psect	text104,global,reloc=2,class=CODE,delta=1,group=1
   126                           	psect	text105,global,reloc=2,class=CODE,delta=1
   127                           	psect	text106,global,reloc=2,class=CODE,delta=1
   128                           	psect	text107,global,reloc=2,class=CODE,delta=1
   129                           	psect	text108,global,reloc=2,class=CODE,delta=1
   130                           	psect	text109,global,reloc=2,class=CODE,delta=1
   131                           	psect	text110,global,reloc=2,class=CODE,delta=1
   132                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   133                           	psect	text112,global,reloc=2,class=CODE,delta=1
   134                           	psect	text113,global,reloc=2,class=CODE,delta=1,group=1
   135                           	psect	text114,global,reloc=2,class=CODE,delta=1
   136                           	psect	text115,global,reloc=2,class=CODE,delta=1
   137                           	psect	text116,global,reloc=2,class=CODE,delta=1
   138                           	psect	text117,global,reloc=2,class=CODE,delta=1
   139                           	psect	text118,global,reloc=2,class=CODE,delta=1
   140                           	psect	text119,global,reloc=2,class=CODE,delta=1
   141                           	psect	text120,global,reloc=2,class=CODE,delta=1
   142                           	psect	text121,global,reloc=2,class=CODE,delta=1
   143                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   144                           	psect	text122,global,reloc=2,class=CODE,delta=1
   145                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   146                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   147  0000                     
   148                           ; Version 1.45
   149                           ; Generated 16/11/2017 GMT
   150                           ; 
   151                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   152                           ; All rights reserved.
   153                           ; 
   154                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   155                           ; 
   156                           ; Redistribution and use in source and binary forms, with or without modification, are
   157                           ; permitted provided that the following conditions are met:
   158                           ; 
   159                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   160                           ;        conditions and the following disclaimer.
   161                           ; 
   162                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   163                           ;        of conditions and the following disclaimer in the documentation and/or other
   164                           ;        materials provided with the distribution.
   165                           ; 
   166                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   167                           ;        software without specific prior written permission.
   168                           ; 
   169                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   170                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   171                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   172                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   173                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   174                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   175                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   176                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   177                           ; 
   178                           ; 
   179                           ; Code-generator required, PIC18F45K22 Definitions
   180                           ; 
   181                           ; SFR Addresses
   182  0000                     
   183 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
   184  0000                     
   185                           	psect	idataCOMRAM
   186  004394                     __pidataCOMRAM:
   187                           	opt stack 0
   188                           
   189                           ;initializer for _writeAddress
   190  004394  4580               	dw	17792
   191  004396  0000               	dw	0
   192                           
   193                           ;initializer for _synthLdTxCnt
   194  004398  02                 	db	2
   195                           
   196                           ;initializer for _synthLdRxCnt
   197  004399  02                 	db	2
   198                           
   199                           ;initializer for _SynthRxOper
   200  00439A  01                 	db	1
   201                           
   202                           ;initializer for _SynthTxOper
   203  00439B  01                 	db	1
   204                           
   205                           	psect	idataBANK1
   206  0042F2                     __pidataBANK1:
   207                           	opt stack 0
   208                           
   209                           ;initializer for _groupsArray
   210  0042F2  5E                 	db	low _GroupControlMcu
   211  0042F3  3F                 	db	high _GroupControlMcu
   212  0042F4  E4                 	db	low _GroupStatusAndVersion
   213  0042F5  40                 	db	high _GroupStatusAndVersion
   214  0042F6  94                 	db	low _GroupAdc
   215  0042F7  41                 	db	high _GroupAdc
   216  0042F8  26                 	db	low _GroupSynthesizers
   217  0042F9  32                 	db	high _GroupSynthesizers
   218  0042FA  40                 	db	low _GroupFlashMemory
   219  0042FB  3D                 	db	high _GroupFlashMemory
   220  0042FC  C2                 	db	low _GroupDAC
   221  0042FD  3E                 	db	high _GroupDAC
   222                           
   223                           ;initializer for _readAddress
   224  0042FE  4580               	dw	17792
   225  004300  0000               	dw	0
   226                           
   227                           	psect	smallconst
   228  000600                     __psmallconst:
   229                           	opt stack 0
   230  000600  00                 	db	0
   231  000601                     _SYNTH_REGS:
   232                           	opt stack 0
   233  000601  041C               	dw	1052
   234  000603  0001               	dw	1
   235  000605  300B               	dw	12299
   236  000607  0061               	dw	97
   237  000609  193A               	dw	6458
   238  00060B  00C0               	dw	192
   239  00060D  FCC9               	dw	64713
   240  00060F  1110               	dw	4368
   241  000611  0428               	dw	1064
   242  000613  102D               	dw	4141
   243  000615  00E7               	dw	231
   244  000617  1200               	dw	4608
   245  000619  6076               	dw	24694
   246  00061B  3500               	dw	13568
   247  00061D  0025               	dw	37
   248  00061F  0080               	dw	128
   249  000621  BF84               	dw	49028
   250  000623  0800               	dw	2048
   251  000625  0003               	dw	3
   252  000627  0000               	dw	0
   253  000629  0012               	dw	18
   254  00062B  0000               	dw	0
   255  00062D  0001               	dw	1
   256  00062F  0C00               	dw	3072
   257  000631  0680               	dw	1664
   258  000633  0020               	dw	32
   259  000635                     __end_of_SYNTH_REGS:
   260                           	opt stack 0
   261  000635                     _SYNTH_ADDRES:
   262                           	opt stack 0
   263  000635  04                 	db	4
   264  000636  08                 	db	8
   265  000637  0C                 	db	12
   266  000638  00                 	db	0
   267  000639  10                 	db	16
   268  00063A  00                 	db	0
   269  00063B  14                 	db	20
   270  00063C  00                 	db	0
   271  00063D  00                 	db	0
   272  00063E  00                 	db	0
   273  00063F  18                 	db	24
   274  000640  00                 	db	0
   275  000641  00                 	db	0
   276  000642                     __end_of_SYNTH_ADDRES:
   277                           	opt stack 0
   278  000642                     _channelArr:
   279                           	opt stack 0
   280  000642  04                 	db	4
   281  000643  05                 	db	5
   282  000644  06                 	db	6
   283  000645  07                 	db	7
   284  000646  08                 	db	8
   285  000647  09                 	db	9
   286  000648  0A                 	db	10
   287  000649  0D                 	db	13
   288  00064A  19                 	db	25
   289  00064B                     __end_of_channelArr:
   290                           	opt stack 0
   291  00064B                     _DAC_DEFAULT_INIT_VALUES:
   292                           	opt stack 0
   293  00064B  2344               	dw	9028
   294  00064D  6344               	dw	25412
   295  00064F  A344               	dw	41796
   296  000651  E344               	dw	58180
   297  000653                     __end_of_DAC_DEFAULT_INIT_VALUES:
   298                           	opt stack 0
   299  000653                     _DAC_ADDRES:
   300                           	opt stack 0
   301  000653  02                 	db	2
   302  000654  04                 	db	4
   303  000655  06                 	db	6
   304  000656  08                 	db	8
   305  000657                     __end_of_DAC_ADDRES:
   306                           	opt stack 0
   307  000657                     exp@coeff:
   308                           	opt stack 0
   309  000657  00                 	db	0
   310  000658  80                 	db	128
   311  000659  3F                 	db	63
   312  00065A  72                 	db	114
   313  00065B  31                 	db	49
   314  00065C  3F                 	db	63
   315  00065D  FE                 	db	254
   316  00065E  75                 	db	117
   317  00065F  3E                 	db	62
   318  000660  58                 	db	88
   319  000661  63                 	db	99
   320  000662  3D                 	db	61
   321  000663  95                 	db	149
   322  000664  1D                 	db	29
   323  000665  3C                 	db	60
   324  000666  C5                 	db	197
   325  000667  AE                 	db	174
   326  000668  3A                 	db	58
   327  000669  79                 	db	121
   328  00066A  21                 	db	33
   329  00066B  39                 	db	57
   330  00066C  94                 	db	148
   331  00066D  80                 	db	128
   332  00066E  37                 	db	55
   333  00066F  93                 	db	147
   334  000670  A7                 	db	167
   335  000671  35                 	db	53
   336  000672  56                 	db	86
   337  000673  15                 	db	21
   338  000674  34                 	db	52
   339  000675                     __end_ofexp@coeff:
   340                           	opt stack 0
   341  000675                     log@coeff:
   342                           	opt stack 0
   343  000675  00                 	db	0
   344  000676  00                 	db	0
   345  000677  00                 	db	0
   346  000678  00                 	db	0
   347  000679  80                 	db	128
   348  00067A  3F                 	db	63
   349  00067B  F0                 	db	240
   350  00067C  FF                 	db	255
   351  00067D  BE                 	db	190
   352  00067E  E2                 	db	226
   353  00067F  A9                 	db	169
   354  000680  3E                 	db	62
   355  000681  83                 	db	131
   356  000682  76                 	db	118
   357  000683  BE                 	db	190
   358  000684  AE                 	db	174
   359  000685  2B                 	db	43
   360  000686  3E                 	db	62
   361  000687  3C                 	db	60
   362  000688  C3                 	db	195
   363  000689  BD                 	db	189
   364  00068A  D2                 	db	210
   365  00068B  13                 	db	19
   366  00068C  3D                 	db	61
   367  00068D  78                 	db	120
   368  00068E  D3                 	db	211
   369  00068F  BB                 	db	187
   370  000690                     __end_oflog@coeff:
   371                           	opt stack 0
   372  000690                     STR_1:
   373                           
   374                           ; BSR set to: 0
   375  000690  4D                 	db	77	;'M'
   376  000691  61                 	db	97	;'a'
   377  000692  72                 	db	114	;'r'
   378  000693  20                 	db	32
   379  000694  32                 	db	50	;'2'
   380  000695  35                 	db	53	;'5'
   381  000696  20                 	db	32
   382  000697  32                 	db	50	;'2'
   383  000698  30                 	db	48	;'0'
   384  000699  31                 	db	49	;'1'
   385  00069A  38                 	db	56	;'8'
   386  00069B  00                 	db	0
   387  00069C                     STR_18:
   388                           
   389                           ; BSR set to: 0
   390  00069C  31                 	db	49	;'1'
   391  00069D  31                 	db	49	;'1'
   392  00069E  3A                 	db	58	;':'
   393  00069F  31                 	db	49	;'1'
   394  0006A0  35                 	db	53	;'5'
   395  0006A1  3A                 	db	58	;':'
   396  0006A2  33                 	db	51	;'3'
   397  0006A3  39                 	db	57	;'9'
   398  0006A4  00                 	db	0
   399  0000                     
   400                           ; #config settings
   401  0006A5  00                 	db	0	; dummy byte at the end
   402  0000                     
   403                           	psect	nvCOMRAM
   404  000046                     __pnvCOMRAM:
   405                           	opt stack 0
   406  000046                     _timer0ReloadVal:
   407                           	opt stack 0
   408  000046                     	ds	2
   409                           
   410                           	psect	nvBANK0
   411  0000FF                     __pnvBANK0:
   412                           	opt stack 0
   413  0000FF                     _eusart1TxBufferRemaining:
   414                           	opt stack 0
   415  0000FF                     	ds	1
   416                           
   417                           	psect	nvBANK1
   418  0001F5                     __pnvBANK1:
   419                           	opt stack 0
   420  0001F5                     _TMR0_InterruptHandler:
   421                           	opt stack 0
   422  0001F5                     	ds	2
   423  0001F7                     _IOCB5_InterruptHandler:
   424                           	opt stack 0
   425  0001F7                     	ds	2
   426  0001F9                     _IOCB4_InterruptHandler:
   427                           	opt stack 0
   428  0001F9                     	ds	2
   429  0000                     _ANSELA	set	3896
   430  0000                     _ANSELE	set	3900
   431  0000                     _ANSELD	set	3899
   432  0000                     _ANSELB	set	3897
   433  0000                     _ANSELC	set	3898
   434  0000                     _ADCON0bits	set	4034
   435  0000                     _ADRESH	set	4036
   436  0000                     _ADRESL	set	4035
   437  0000                     _ADCON2	set	4032
   438  0000                     _ADCON1	set	4033
   439  0000                     _ADCON0	set	4034
   440  0000                     _T0CONbits	set	4053
   441  0000                     _T0CON	set	4053
   442  0000                     _TMR0L	set	4054
   443  0000                     _TMR0H	set	4055
   444  0000                     _EEDATA	set	4008
   445  0000                     _EEADR	set	4009
   446  0000                     _EECON2	set	4007
   447  0000                     _EECON1bits	set	4006
   448  0000                     _TABLAT	set	4085
   449  0000                     _TBLPTRL	set	4086
   450  0000                     _TBLPTRH	set	4087
   451  0000                     _TBLPTRU	set	4088
   452  0000                     _IOCBbits	set	3938
   453  0000                     _INTCON2bits	set	4081
   454  0000                     _WPUB	set	3937
   455  0000                     _TRISD	set	3989
   456  0000                     _TRISC	set	3988
   457  0000                     _TRISB	set	3987
   458  0000                     _TRISA	set	3986
   459  0000                     _TRISE	set	3990
   460  0000                     _LATC	set	3979
   461  0000                     _LATB	set	3978
   462  0000                     _LATA	set	3977
   463  0000                     _LATD	set	3980
   464  0000                     _LATE	set	3981
   465  0000                     _RCREG1	set	4014
   466  0000                     _RCSTA1bits	set	4011
   467  0000                     _TXREG1	set	4013
   468  0000                     _SPBRGH1	set	4016
   469  0000                     _SPBRG1	set	4015
   470  0000                     _TXSTA1	set	4012
   471  0000                     _RCSTA1	set	4011
   472  0000                     _BAUDCON1	set	4024
   473  0000                     _PIR1bits	set	3998
   474  0000                     _PIE1bits	set	3997
   475  0000                     _PIR2bits	set	4001
   476  0000                     _PIE2bits	set	4000
   477  0000                     _RCONbits	set	4048
   478  0000                     _OSCTUNE	set	3995
   479  0000                     _OSCCON2	set	4050
   480  0000                     _OSCCON	set	4051
   481  0000                     _LATAbits	set	3977
   482  0000                     _LATDbits	set	3980
   483  0000                     _INTCONbits	set	4082
   484  0000                     _PORTDbits	set	3971
   485  0000                     _LATCbits	set	3979
   486  0000                     _LATBbits	set	3978
   487                           
   488                           	psect	cinit
   489  003334                     __pcinit:
   490                           	opt stack 0
   491  003334                     start_initialization:
   492                           	opt stack 0
   493  003334                     __initialization:
   494                           	opt stack 0
   495                           
   496                           ; Initialize objects allocated to BANK1 (16 bytes)
   497                           ; load TBLPTR registers with __pidataBANK1
   498  003334  0EF2               	movlw	low __pidataBANK1
   499  003336  6EF6               	movwf	tblptrl,c
   500  003338  0E42               	movlw	high __pidataBANK1
   501  00333A  6EF7               	movwf	tblptrh,c
   502  00333C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   503  00333E  6EF8               	movwf	tblptru,c
   504  003340  EE01  F0E5         	lfsr	0,__pdataBANK1
   505  003344  EE10 F010          	lfsr	1,16
   506  003348                     copy_data0:
   507  003348  0009               	tblrd		*+
   508  00334A  CFF5 FFEE          	movff	tablat,postinc0
   509  00334E  50E5               	movf	postdec1,w,c
   510  003350  50E1               	movf	fsr1l,w,c
   511  003352  E1FA               	bnz	copy_data0
   512                           
   513                           ; Initialize objects allocated to COMRAM (8 bytes)
   514                           ; load TBLPTR registers with __pidataCOMRAM
   515  003354  0E94               	movlw	low __pidataCOMRAM
   516  003356  6EF6               	movwf	tblptrl,c
   517  003358  0E43               	movlw	high __pidataCOMRAM
   518  00335A  6EF7               	movwf	tblptrh,c
   519  00335C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   520  00335E  6EF8               	movwf	tblptru,c
   521  003360  EE00  F03E         	lfsr	0,__pdataCOMRAM
   522  003364  EE10 F008          	lfsr	1,8
   523  003368                     copy_data1:
   524  003368  0009               	tblrd		*+
   525  00336A  CFF5 FFEE          	movff	tablat,postinc0
   526  00336E  50E5               	movf	postdec1,w,c
   527  003370  50E1               	movf	fsr1l,w,c
   528  003372  E1FA               	bnz	copy_data1
   529                           
   530                           ; Clear objects allocated to BANK2 (70 bytes)
   531  003374  EE02  F000         	lfsr	0,__pbssBANK2
   532  003378  0E46               	movlw	70
   533  00337A                     clear_0:
   534  00337A  6AEE               	clrf	postinc0,c
   535  00337C  06E8               	decf	wreg,f,c
   536  00337E  E1FD               	bnz	clear_0
   537                           
   538                           ; Clear objects allocated to BANK1 (178 bytes)
   539  003380  EE01  F000         	lfsr	0,__pbssBANK1
   540  003384  0EB2               	movlw	178
   541  003386                     clear_1:
   542  003386  6AEE               	clrf	postinc0,c
   543  003388  06E8               	decf	wreg,f,c
   544  00338A  E1FD               	bnz	clear_1
   545                           
   546                           ; Clear objects allocated to BANK0 (21 bytes)
   547  00338C  EE00  F0EA         	lfsr	0,__pbssBANK0
   548  003390  0E15               	movlw	21
   549  003392                     clear_2:
   550  003392  6AEE               	clrf	postinc0,c
   551  003394  06E8               	decf	wreg,f,c
   552  003396  E1FD               	bnz	clear_2
   553                           
   554                           ; Clear objects allocated to COMRAM (13 bytes)
   555  003398  EE00  F031         	lfsr	0,__pbssCOMRAM
   556  00339C  0E0D               	movlw	13
   557  00339E                     clear_3:
   558  00339E  6AEE               	clrf	postinc0,c
   559  0033A0  06E8               	decf	wreg,f,c
   560  0033A2  E1FD               	bnz	clear_3
   561  0033A4                     end_of_initialization:
   562                           	opt stack 0
   563  0033A4                     __end_of__initialization:
   564                           	opt stack 0
   565  0033A4  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   566  0033A6  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   567  0033A8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   568  0033AA  6EF8               	movwf	tblptru,c
   569  0033AC  0100               	movlb	0
   570  0033AE  EF54  F01A         	goto	_main	;jump to C main() function
   571                           tblptru	equ	0xFF8
   572                           tblptrh	equ	0xFF7
   573                           tblptrl	equ	0xFF6
   574                           tablat	equ	0xFF5
   575                           postinc0	equ	0xFEE
   576                           wreg	equ	0xFE8
   577                           postdec1	equ	0xFE5
   578                           fsr1l	equ	0xFE1
   579                           
   580                           	psect	bssCOMRAM
   581  000031                     __pbssCOMRAM:
   582                           	opt stack 0
   583  000031                     TMR0_ISR@CountCallBack:
   584                           	opt stack 0
   585  000031                     	ds	2
   586  000033                     _eusart1RxTail:
   587                           	opt stack 0
   588  000033                     	ds	1
   589  000034                     _eusart1RxHead:
   590                           	opt stack 0
   591  000034                     	ds	1
   592  000035                     _eusart1TxTail:
   593                           	opt stack 0
   594  000035                     	ds	1
   595  000036                     _eusart1TxHead:
   596                           	opt stack 0
   597  000036                     	ds	1
   598  000037                     _synthLdTxArrayCnt:
   599                           	opt stack 0
   600  000037                     	ds	1
   601  000038                     _synthLdRxArrayCnt:
   602                           	opt stack 0
   603  000038                     	ds	1
   604  000039                     _cntRegUpdateRx:
   605                           	opt stack 0
   606  000039                     	ds	1
   607  00003A                     _cntRegUpdateTx:
   608                           	opt stack 0
   609  00003A                     	ds	1
   610  00003B                     _isReWriteDone:
   611                           	opt stack 0
   612  00003B                     	ds	1
   613  00003C                     _data:
   614                           	opt stack 0
   615  00003C                     	ds	1
   616  00003D                     _adcSampleMode:
   617                           	opt stack 0
   618  00003D                     	ds	1
   619                           tblptru	equ	0xFF8
   620                           tblptrh	equ	0xFF7
   621                           tblptrl	equ	0xFF6
   622                           tablat	equ	0xFF5
   623                           postinc0	equ	0xFEE
   624                           wreg	equ	0xFE8
   625                           postdec1	equ	0xFE5
   626                           fsr1l	equ	0xFE1
   627                           
   628                           	psect	dataCOMRAM
   629  00003E                     __pdataCOMRAM:
   630                           	opt stack 0
   631  00003E                     _writeAddress:
   632                           	opt stack 0
   633  00003E                     	ds	4
   634  000042                     _synthLdTxCnt:
   635                           	opt stack 0
   636  000042                     	ds	1
   637  000043                     _synthLdRxCnt:
   638                           	opt stack 0
   639  000043                     	ds	1
   640  000044                     _SynthRxOper:
   641                           	opt stack 0
   642  000044                     	ds	1
   643  000045                     _SynthTxOper:
   644                           	opt stack 0
   645  000045                     	ds	1
   646                           tblptru	equ	0xFF8
   647                           tblptrh	equ	0xFF7
   648                           tblptrl	equ	0xFF6
   649                           tablat	equ	0xFF5
   650                           postinc0	equ	0xFEE
   651                           wreg	equ	0xFE8
   652                           postdec1	equ	0xFE5
   653                           fsr1l	equ	0xFE1
   654                           
   655                           	psect	bssBANK0
   656  0000EA                     __pbssBANK0:
   657                           	opt stack 0
   658  0000EA                     _numOfValidateSamples:
   659                           	opt stack 0
   660  0000EA                     	ds	4
   661  0000EE                     _sampleCount:
   662                           	opt stack 0
   663  0000EE                     	ds	2
   664  0000F0                     _count:
   665                           	opt stack 0
   666  0000F0                     	ds	2
   667  0000F2                     _msgCount:
   668                           	opt stack 0
   669  0000F2                     	ds	1
   670  0000F3                     _crcGiven:
   671                           	opt stack 0
   672  0000F3                     	ds	1
   673  0000F4                     _crcCalc:
   674                           	opt stack 0
   675  0000F4                     	ds	1
   676  0000F5                     _dataSize:
   677                           	opt stack 0
   678  0000F5                     	ds	1
   679  0000F6                     _request:
   680                           	opt stack 0
   681  0000F6                     	ds	1
   682  0000F7                     _group:
   683                           	opt stack 0
   684  0000F7                     	ds	1
   685  0000F8                     _cState:
   686                           	opt stack 0
   687  0000F8                     	ds	1
   688  0000F9                     _eusart1RxCount:
   689                           	opt stack 0
   690  0000F9                     	ds	1
   691  0000FA                     _channel:
   692                           	opt stack 0
   693  0000FA                     	ds	1
   694  0000FB                     _Timer0_OneSec:
   695                           	opt stack 0
   696  0000FB                     	ds	1
   697  0000FC                     _Timer0_KeepAlive:
   698                           	opt stack 0
   699  0000FC                     	ds	1
   700  0000FD                     _Timer0_Sampling:
   701                           	opt stack 0
   702  0000FD                     	ds	1
   703  0000FE                     _Timer0_SynthLd:
   704                           	opt stack 0
   705  0000FE                     	ds	1
   706                           tblptru	equ	0xFF8
   707                           tblptrh	equ	0xFF7
   708                           tblptrl	equ	0xFF6
   709                           tablat	equ	0xFF5
   710                           postinc0	equ	0xFEE
   711                           wreg	equ	0xFE8
   712                           postdec1	equ	0xFE5
   713                           fsr1l	equ	0xFE1
   714                           
   715                           	psect	bssBANK1
   716  000100                     __pbssBANK1:
   717                           	opt stack 0
   718  000100                     _eusart1RxBuffer:
   719                           	opt stack 0
   720  000100                     	ds	40
   721  000128                     _mcuRunTimeIn5SecTicks:
   722                           	opt stack 0
   723  000128                     	ds	4
   724  00012C                     _numOfReadSamples:
   725                           	opt stack 0
   726  00012C                     	ds	4
   727  000130                     _errno:
   728                           	opt stack 0
   729  000130                     	ds	2
   730  000132                     _sampleArray:
   731                           	opt stack 0
   732  000132                     	ds	64
   733  000172                     _rxMsgData:
   734                           	opt stack 0
   735  000172                     	ds	20
   736  000186                     _rxMsgQueue:
   737                           	opt stack 0
   738  000186                     	ds	20
   739  00019A                     _synthLdTxArray:
   740                           	opt stack 0
   741  00019A                     	ds	12
   742  0001A6                     _synthLdRxArray:
   743                           	opt stack 0
   744  0001A6                     	ds	12
   745                           tblptru	equ	0xFF8
   746                           tblptrh	equ	0xFF7
   747                           tblptrl	equ	0xFF6
   748                           tablat	equ	0xFF5
   749                           postinc0	equ	0xFEE
   750                           wreg	equ	0xFE8
   751                           postdec1	equ	0xFE5
   752                           fsr1l	equ	0xFE1
   753                           
   754                           	psect	dataBANK1
   755  0001E5                     __pdataBANK1:
   756                           	opt stack 0
   757  0001E5                     _groupsArray:
   758                           	opt stack 0
   759  0001E5                     	ds	12
   760  0001F1                     _readAddress:
   761                           	opt stack 0
   762  0001F1                     	ds	4
   763                           tblptru	equ	0xFF8
   764                           tblptrh	equ	0xFF7
   765                           tblptrl	equ	0xFF6
   766                           tablat	equ	0xFF5
   767                           postinc0	equ	0xFEE
   768                           wreg	equ	0xFE8
   769                           postdec1	equ	0xFE5
   770                           fsr1l	equ	0xFE1
   771                           
   772                           	psect	bssBANK2
   773  000200                     __pbssBANK2:
   774                           	opt stack 0
   775  000200                     _eusart1TxBuffer:
   776                           	opt stack 0
   777  000200                     	ds	70
   778                           tblptru	equ	0xFF8
   779                           tblptrh	equ	0xFF7
   780                           tblptrl	equ	0xFF6
   781                           tablat	equ	0xFF5
   782                           postinc0	equ	0xFEE
   783                           wreg	equ	0xFE8
   784                           postdec1	equ	0xFE5
   785                           fsr1l	equ	0xFE1
   786                           
   787                           	psect	cstackBANK1
   788  0001B2                     __pcstackBANK1:
   789                           	opt stack 0
   790  0001B2                     SynthReadData@TxMsg:
   791                           	opt stack 0
   792                           
   793                           ; 22 bytes @ 0x0
   794  0001B2                     	ds	22
   795  0001C8                     SynthReadData@data_981:
   796                           	opt stack 0
   797                           
   798                           ; 1 bytes @ 0x16
   799  0001C8                     	ds	1
   800  0001C9                     _SynthReadData$982:
   801                           	opt stack 0
   802                           
   803                           ; 2 bytes @ 0x17
   804  0001C9                     	ds	2
   805  0001CB                     SynthReadData@eepromDataArray:
   806                           	opt stack 0
   807                           
   808                           ; 16 bytes @ 0x19
   809  0001CB                     	ds	16
   810  0001DB                     SynthReadData@cType:
   811                           	opt stack 0
   812                           
   813                           ; 1 bytes @ 0x29
   814  0001DB                     	ds	1
   815  0001DC                     SynthReadData@regNum:
   816                           	opt stack 0
   817                           
   818                           ; 1 bytes @ 0x2A
   819  0001DC                     	ds	1
   820  0001DD                     SynthReadData@byteNum:
   821                           	opt stack 0
   822                           
   823                           ; 1 bytes @ 0x2B
   824  0001DD                     	ds	1
   825  0001DE                     ??_readUartMessage:
   826                           
   827                           ; 1 bytes @ 0x2C
   828  0001DE                     	ds	4
   829  0001E2                     readUartMessage@idx:
   830                           	opt stack 0
   831                           
   832                           ; 2 bytes @ 0x30
   833  0001E2                     	ds	2
   834  0001E4                     readUartMessage@chRec:
   835                           	opt stack 0
   836                           
   837                           ; 1 bytes @ 0x32
   838  0001E4                     	ds	1
   839                           tblptru	equ	0xFF8
   840                           tblptrh	equ	0xFF7
   841                           tblptrl	equ	0xFF6
   842                           tablat	equ	0xFF5
   843                           postinc0	equ	0xFEE
   844                           wreg	equ	0xFE8
   845                           postdec1	equ	0xFE5
   846                           fsr1l	equ	0xFE1
   847                           
   848                           	psect	cstackBANK0
   849  000060                     __pcstackBANK0:
   850                           	opt stack 0
   851  000060                     ??_FlashSampleWrite:
   852  000060                     ??___ftdiv:
   853  000060                     strtol@sign:
   854                           	opt stack 0
   855  000060                     GetMcuFwVersion@compileData:
   856                           	opt stack 0
   857  000060                     GetMcuRunTime@TxMsg:
   858                           	opt stack 0
   859  000060                     SWSPI_Synth_send_bits@bitArray:
   860                           	opt stack 0
   861                           
   862                           ; 32 bytes @ 0x0
   863  000060                     	ds	1
   864  000061                     strtol@a:
   865                           	opt stack 0
   866                           
   867                           ; 4 bytes @ 0x1
   868  000061                     	ds	1
   869  000062                     FlashSampleWrite@rotateLeft:
   870                           	opt stack 0
   871                           
   872                           ; 2 bytes @ 0x2
   873  000062                     	ds	1
   874  000063                     ___ftdiv@cntr:
   875                           	opt stack 0
   876                           
   877                           ; 1 bytes @ 0x3
   878  000063                     	ds	1
   879  000064                     ___ftdiv@f3:
   880                           	opt stack 0
   881  000064                     GetMcuFwVersion@TxMsg:
   882                           	opt stack 0
   883                           
   884                           ; 18 bytes @ 0x4
   885  000064                     	ds	1
   886  000065                     strtol@c:
   887                           	opt stack 0
   888                           
   889                           ; 1 bytes @ 0x5
   890  000065                     	ds	1
   891  000066                     ?_GetIntFromUartData:
   892                           	opt stack 0
   893  000066                     GetIntFromUartData@data:
   894                           	opt stack 0
   895                           
   896                           ; 2 bytes @ 0x6
   897  000066                     	ds	1
   898  000067                     ___ftdiv@exp:
   899                           	opt stack 0
   900                           
   901                           ; 1 bytes @ 0x7
   902  000067                     	ds	1
   903  000068                     ___ftdiv@sign:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x8
   907  000068                     	ds	1
   908  000069                     ?___ftmul:
   909                           	opt stack 0
   910  000069                     ___ftmul@f1:
   911                           	opt stack 0
   912  000069                     GetMcuRunTime@tempRunTime:
   913                           	opt stack 0
   914                           
   915                           ; 4 bytes @ 0x9
   916  000069                     	ds	3
   917  00006C                     ___ftmul@f2:
   918                           	opt stack 0
   919                           
   920                           ; 3 bytes @ 0xC
   921  00006C                     	ds	1
   922  00006D                     GetMcuRunTime@idx:
   923                           	opt stack 0
   924                           
   925                           ; 2 bytes @ 0xD
   926  00006D                     	ds	1
   927  00006E                     ??_GetIntFromUartData:
   928                           
   929                           ; 1 bytes @ 0xE
   930  00006E                     	ds	1
   931  00006F                     ??___ftmul:
   932                           
   933                           ; 1 bytes @ 0xF
   934  00006F                     	ds	1
   935  000070                     GetIntFromUartData@dataRegArr:
   936                           	opt stack 0
   937                           
   938                           ; 10 bytes @ 0x10
   939  000070                     	ds	2
   940  000072                     ___ftmul@exp:
   941                           	opt stack 0
   942                           
   943                           ; 1 bytes @ 0x12
   944  000072                     	ds	1
   945  000073                     ___ftmul@f3_as_product:
   946                           	opt stack 0
   947                           
   948                           ; 3 bytes @ 0x13
   949  000073                     	ds	3
   950  000076                     ___ftmul@cntr:
   951                           	opt stack 0
   952  000076                     _GetMcuFwVersion$2687:
   953                           	opt stack 0
   954                           
   955                           ; 2 bytes @ 0x16
   956  000076                     	ds	1
   957  000077                     ___ftmul@sign:
   958                           	opt stack 0
   959                           
   960                           ; 1 bytes @ 0x17
   961  000077                     	ds	1
   962  000078                     ??_CheckFlashPrecentage:
   963  000078                     ?___ftadd:
   964                           	opt stack 0
   965  000078                     ?___fttol:
   966                           	opt stack 0
   967  000078                     _GetMcuFwVersion$2691:
   968                           	opt stack 0
   969  000078                     ___ftadd@f1:
   970                           	opt stack 0
   971  000078                     ___fttol@f1:
   972                           	opt stack 0
   973                           
   974                           ; 3 bytes @ 0x18
   975  000078                     	ds	2
   976  00007A                     GetIntFromUartData@num:
   977                           	opt stack 0
   978                           
   979                           ; 1 bytes @ 0x1A
   980  00007A                     	ds	1
   981  00007B                     GetIntFromUartData@recVal:
   982                           	opt stack 0
   983  00007B                     ___ftadd@f2:
   984                           	opt stack 0
   985                           
   986                           ; 3 bytes @ 0x1B
   987  00007B                     	ds	1
   988  00007C                     ??___fttol:
   989  00007C                     CheckFlashPrecentage@precentage:
   990                           	opt stack 0
   991  00007C                     GetIntFromUartData@retVal:
   992                           	opt stack 0
   993                           
   994                           ; 8 bytes @ 0x1C
   995  00007C                     	ds	2
   996  00007E                     ??___ftadd:
   997                           
   998                           ; 1 bytes @ 0x1E
   999  00007E                     	ds	2
  1000  000080                     SWSPI_Synth_send_bits@mask:
  1001                           	opt stack 0
  1002                           
  1003                           ; 4 bytes @ 0x20
  1004  000080                     	ds	1
  1005  000081                     ___ftadd@sign:
  1006                           	opt stack 0
  1007  000081                     ___fttol@sign1:
  1008                           	opt stack 0
  1009                           
  1010                           ; 1 bytes @ 0x21
  1011  000081                     	ds	1
  1012  000082                     ___ftadd@exp2:
  1013                           	opt stack 0
  1014  000082                     ___fttol@lval:
  1015                           	opt stack 0
  1016                           
  1017                           ; 4 bytes @ 0x22
  1018  000082                     	ds	1
  1019  000083                     ___ftadd@exp1:
  1020                           	opt stack 0
  1021                           
  1022                           ; 1 bytes @ 0x23
  1023  000083                     	ds	1
  1024  000084                     ?___ftsub:
  1025                           	opt stack 0
  1026  000084                     ?_eval_poly:
  1027                           	opt stack 0
  1028  000084                     SWSPI_Synth_send_bits@count:
  1029                           	opt stack 0
  1030  000084                     GetIntFromUartData@idxCon:
  1031                           	opt stack 0
  1032  000084                     ___ftsub@f1:
  1033                           	opt stack 0
  1034  000084                     eval_poly@x:
  1035                           	opt stack 0
  1036                           
  1037                           ; 3 bytes @ 0x24
  1038  000084                     	ds	1
  1039  000085                     SWSPI_Synth_send_bits@phrType:
  1040                           	opt stack 0
  1041                           
  1042                           ; 1 bytes @ 0x25
  1043  000085                     	ds	1
  1044  000086                     SWSPI_send_word@datac:
  1045                           	opt stack 0
  1046  000086                     GetIntFromUartData@idxData:
  1047                           	opt stack 0
  1048  000086                     ___fttol@exp1:
  1049                           	opt stack 0
  1050                           
  1051                           ; 1 bytes @ 0x26
  1052  000086                     	ds	1
  1053  000087                     ?___altoft:
  1054                           	opt stack 0
  1055  000087                     FlashReadUart@data:
  1056                           	opt stack 0
  1057  000087                     SWSPI_send_word@idx:
  1058                           	opt stack 0
  1059  000087                     eval_poly@d:
  1060                           	opt stack 0
  1061  000087                     ___ftsub@f2:
  1062                           	opt stack 0
  1063  000087                     ___altoft@c:
  1064                           	opt stack 0
  1065                           
  1066                           ; 4 bytes @ 0x27
  1067  000087                     	ds	2
  1068  000089                     ??_FlashReadUart:
  1069  000089                     SWSPI_send_word@phrType:
  1070                           	opt stack 0
  1071  000089                     eval_poly@n:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x29
  1075  000089                     	ds	1
  1076  00008A                     DacSetValue@data:
  1077                           	opt stack 0
  1078  00008A                     UpdateSynthFreq@data:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x2A
  1082  00008A                     	ds	1
  1083  00008B                     ??___altoft:
  1084  00008B                     eval_poly@res:
  1085                           	opt stack 0
  1086                           
  1087                           ; 3 bytes @ 0x2B
  1088  00008B                     	ds	1
  1089  00008C                     ??_DacSetValue:
  1090  00008C                     UpdateSynthFreq@cType:
  1091                           	opt stack 0
  1092                           
  1093                           ; 1 bytes @ 0x2C
  1094  00008C                     	ds	1
  1095  00008D                     UpdateSynthFreq@retVal:
  1096                           	opt stack 0
  1097                           
  1098                           ; 8 bytes @ 0x2D
  1099  00008D                     	ds	1
  1100  00008E                     ?_log:
  1101                           	opt stack 0
  1102  00008E                     ?_ldexp:
  1103                           	opt stack 0
  1104  00008E                     ldexp@value:
  1105                           	opt stack 0
  1106  00008E                     log@x:
  1107                           	opt stack 0
  1108                           
  1109                           ; 3 bytes @ 0x2E
  1110  00008E                     	ds	1
  1111  00008F                     ?_floor:
  1112                           	opt stack 0
  1113  00008F                     floor@x:
  1114                           	opt stack 0
  1115  00008F                     FlashReadUart@TxMsg:
  1116                           	opt stack 0
  1117                           
  1118                           ; 69 bytes @ 0x2F
  1119  00008F                     	ds	1
  1120  000090                     DacSetValue@dacIndex:
  1121                           	opt stack 0
  1122                           
  1123                           ; 1 bytes @ 0x30
  1124  000090                     	ds	1
  1125  000091                     ldexp@newexp:
  1126                           	opt stack 0
  1127  000091                     log@exponent:
  1128                           	opt stack 0
  1129  000091                     DacSetValue@retVal:
  1130                           	opt stack 0
  1131                           
  1132                           ; 8 bytes @ 0x31
  1133  000091                     	ds	1
  1134  000092                     floor@i:
  1135                           	opt stack 0
  1136                           
  1137                           ; 3 bytes @ 0x32
  1138  000092                     	ds	1
  1139  000093                     ??_ldexp:
  1140                           
  1141                           ; 1 bytes @ 0x33
  1142  000093                     	ds	2
  1143  000095                     floor@expon:
  1144                           	opt stack 0
  1145                           
  1146                           ; 2 bytes @ 0x35
  1147  000095                     	ds	2
  1148  000097                     ?_exp:
  1149                           	opt stack 0
  1150  000097                     exp@x:
  1151                           	opt stack 0
  1152                           
  1153                           ; 3 bytes @ 0x37
  1154  000097                     	ds	3
  1155  00009A                     _exp$3592:
  1156                           	opt stack 0
  1157                           
  1158                           ; 3 bytes @ 0x3A
  1159  00009A                     	ds	3
  1160  00009D                     exp@exponent:
  1161                           	opt stack 0
  1162                           
  1163                           ; 2 bytes @ 0x3D
  1164  00009D                     	ds	2
  1165  00009F                     exp@sign:
  1166                           	opt stack 0
  1167                           
  1168                           ; 1 bytes @ 0x3F
  1169  00009F                     	ds	1
  1170  0000A0                     ?_pow:
  1171                           	opt stack 0
  1172  0000A0                     pow@x:
  1173                           	opt stack 0
  1174                           
  1175                           ; 3 bytes @ 0x40
  1176  0000A0                     	ds	3
  1177  0000A3                     pow@y:
  1178                           	opt stack 0
  1179                           
  1180                           ; 3 bytes @ 0x43
  1181  0000A3                     	ds	3
  1182  0000A6                     _pow$3590:
  1183                           	opt stack 0
  1184                           
  1185                           ; 3 bytes @ 0x46
  1186  0000A6                     	ds	3
  1187  0000A9                     _pow$3591:
  1188                           	opt stack 0
  1189                           
  1190                           ; 3 bytes @ 0x49
  1191  0000A9                     	ds	3
  1192  0000AC                     pow@sign:
  1193                           	opt stack 0
  1194                           
  1195                           ; 1 bytes @ 0x4C
  1196  0000AC                     	ds	1
  1197  0000AD                     pow@yi:
  1198                           	opt stack 0
  1199                           
  1200                           ; 4 bytes @ 0x4D
  1201  0000AD                     	ds	4
  1202  0000B1                     ??_AdcConvert:
  1203  0000B1                     ?_ReadIntFromEeprom:
  1204                           	opt stack 0
  1205  0000B1                     ReadIntFromEeprom@numOfByes:
  1206                           	opt stack 0
  1207                           
  1208                           ; 2 bytes @ 0x51
  1209  0000B1                     	ds	2
  1210  0000B3                     AdcConvert@_adcResult:
  1211                           	opt stack 0
  1212                           
  1213                           ; 2 bytes @ 0x53
  1214  0000B3                     	ds	2
  1215  0000B5                     ??_ReadIntFromEeprom:
  1216  0000B5                     AdcConvert@_adcResult_348:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0x55
  1220  0000B5                     	ds	2
  1221  0000B7                     AdcConvert@ldRxSate:
  1222                           	opt stack 0
  1223                           
  1224                           ; 2 bytes @ 0x57
  1225  0000B7                     	ds	1
  1226  0000B8                     ReadIntFromEeprom@base:
  1227                           	opt stack 0
  1228                           
  1229                           ; 4 bytes @ 0x58
  1230  0000B8                     	ds	1
  1231  0000B9                     AdcConvert@ldTxSate:
  1232                           	opt stack 0
  1233                           
  1234                           ; 2 bytes @ 0x59
  1235  0000B9                     	ds	2
  1236  0000BB                     _AdcConvert$3587:
  1237                           	opt stack 0
  1238                           
  1239                           ; 3 bytes @ 0x5B
  1240  0000BB                     	ds	1
  1241  0000BC                     _ReadIntFromEeprom$3588:
  1242                           	opt stack 0
  1243                           
  1244                           ; 3 bytes @ 0x5C
  1245  0000BC                     	ds	2
  1246  0000BE                     AdcConvert@adcRes:
  1247                           	opt stack 0
  1248                           
  1249                           ; 2 bytes @ 0x5E
  1250  0000BE                     	ds	1
  1251  0000BF                     _ReadIntFromEeprom$3589:
  1252                           	opt stack 0
  1253                           
  1254                           ; 3 bytes @ 0x5F
  1255  0000BF                     	ds	1
  1256  0000C0                     AdcConvert@idx:
  1257                           	opt stack 0
  1258                           
  1259                           ; 1 bytes @ 0x60
  1260  0000C0                     	ds	2
  1261  0000C2                     ReadIntFromEeprom@address:
  1262                           	opt stack 0
  1263                           
  1264                           ; 1 bytes @ 0x62
  1265  0000C2                     	ds	1
  1266  0000C3                     ReadIntFromEeprom@retVal:
  1267                           	opt stack 0
  1268                           
  1269                           ; 4 bytes @ 0x63
  1270  0000C3                     	ds	4
  1271  0000C7                     ReadIntFromEeprom@idx:
  1272                           	opt stack 0
  1273                           
  1274                           ; 1 bytes @ 0x67
  1275  0000C7                     	ds	1
  1276  0000C8                     ??_DacInit:
  1277  0000C8                     DacReadValue@data:
  1278                           	opt stack 0
  1279  0000C8                     SynthReadData@data:
  1280                           	opt stack 0
  1281  0000C8                     InitSynth@EepromVal:
  1282                           	opt stack 0
  1283                           
  1284                           ; 4 bytes @ 0x68
  1285  0000C8                     	ds	2
  1286  0000CA                     ??_DacReadValue:
  1287  0000CA                     DacInit@dacInput:
  1288                           	opt stack 0
  1289                           
  1290                           ; 2 bytes @ 0x6A
  1291  0000CA                     	ds	2
  1292  0000CC                     DacInit@idx:
  1293                           	opt stack 0
  1294  0000CC                     DacReadValue@regNum:
  1295                           	opt stack 0
  1296  0000CC                     InitSynth@cType:
  1297                           	opt stack 0
  1298                           
  1299                           ; 1 bytes @ 0x6C
  1300  0000CC                     	ds	1
  1301  0000CD                     DacReadValue@byteNum:
  1302                           	opt stack 0
  1303  0000CD                     InitSynth@idx:
  1304                           	opt stack 0
  1305                           
  1306                           ; 1 bytes @ 0x6D
  1307  0000CD                     	ds	1
  1308  0000CE                     InitSynth@regNum:
  1309                           	opt stack 0
  1310  0000CE                     DacReadValue@readVal:
  1311                           	opt stack 0
  1312                           
  1313                           ; 2 bytes @ 0x6E
  1314  0000CE                     	ds	1
  1315  0000CF                     SetSynthOper@cType:
  1316                           	opt stack 0
  1317                           
  1318                           ; 1 bytes @ 0x6F
  1319  0000CF                     	ds	1
  1320  0000D0                     DacReadValue@dacIndex:
  1321                           	opt stack 0
  1322                           
  1323                           ; 1 bytes @ 0x70
  1324  0000D0                     	ds	1
  1325  0000D1                     DacReadValue@TxMsg:
  1326                           	opt stack 0
  1327                           
  1328                           ; 7 bytes @ 0x71
  1329  0000D1                     	ds	3
  1330  0000D4                     FlashReadUart@val:
  1331                           	opt stack 0
  1332                           
  1333                           ; 8 bytes @ 0x74
  1334  0000D4                     	ds	4
  1335  0000D8                     DacReadValue@byteIdx:
  1336                           	opt stack 0
  1337                           
  1338                           ; 2 bytes @ 0x78
  1339  0000D8                     	ds	4
  1340  0000DC                     _FlashReadUart$605:
  1341                           	opt stack 0
  1342                           
  1343                           ; 4 bytes @ 0x7C
  1344  0000DC                     	ds	4
  1345  0000E0                     FlashReadUart@j:
  1346                           	opt stack 0
  1347                           
  1348                           ; 2 bytes @ 0x80
  1349  0000E0                     	ds	2
  1350  0000E2                     FlashReadUart@numOfSampleToRead:
  1351                           	opt stack 0
  1352                           
  1353                           ; 2 bytes @ 0x82
  1354  0000E2                     	ds	2
  1355  0000E4                     FlashReadUart@idx:
  1356                           	opt stack 0
  1357                           
  1358                           ; 2 bytes @ 0x84
  1359  0000E4                     	ds	2
  1360  0000E6                     GroupAdc@data:
  1361                           	opt stack 0
  1362  0000E6                     GroupSynthesizers@data:
  1363                           	opt stack 0
  1364  0000E6                     GroupFlashMemory@data:
  1365                           	opt stack 0
  1366  0000E6                     GroupDAC@data:
  1367                           	opt stack 0
  1368  0000E6                     
  1369                           ; 3 bytes @ 0x86
  1370  0000E6                     	ds	2
  1371  0000E8                     GroupAdc@request:
  1372                           	opt stack 0
  1373  0000E8                     GroupSynthesizers@request:
  1374                           	opt stack 0
  1375  0000E8                     GroupFlashMemory@request:
  1376                           	opt stack 0
  1377  0000E8                     GroupDAC@request:
  1378                           	opt stack 0
  1379                           
  1380                           ; 1 bytes @ 0x88
  1381  0000E8                     	ds	1
  1382  0000E9                     GroupControlMcu@request:
  1383                           	opt stack 0
  1384  0000E9                     GroupStatusAndVersion@request:
  1385                           	opt stack 0
  1386                           
  1387                           ; 1 bytes @ 0x89
  1388  0000E9                     	ds	1
  1389                           tblptru	equ	0xFF8
  1390                           tblptrh	equ	0xFF7
  1391                           tblptrl	equ	0xFF6
  1392                           tablat	equ	0xFF5
  1393                           postinc0	equ	0xFEE
  1394                           wreg	equ	0xFE8
  1395                           postdec1	equ	0xFE5
  1396                           fsr1l	equ	0xFE1
  1397                           
  1398                           	psect	cstackCOMRAM
  1399  000001                     __pcstackCOMRAM:
  1400                           	opt stack 0
  1401  000001                     ?___lwmod:
  1402                           	opt stack 0
  1403  000001                     ___lwmod@dividend:
  1404                           	opt stack 0
  1405                           
  1406                           ; 2 bytes @ 0x0
  1407  000001                     	ds	2
  1408  000003                     ___lwmod@divisor:
  1409                           	opt stack 0
  1410                           
  1411                           ; 2 bytes @ 0x2
  1412  000003                     	ds	2
  1413  000005                     ___lwmod@counter:
  1414                           	opt stack 0
  1415                           
  1416                           ; 1 bytes @ 0x4
  1417  000005                     	ds	1
  1418  000006                     ??_INTERRUPT_InterruptManager:
  1419                           
  1420                           ; 1 bytes @ 0x5
  1421  000006                     	ds	18
  1422  000018                     ??_EUSART1_Read:
  1423  000018                     ??_isspace:
  1424  000018                     ??_isdigit:
  1425  000018                     ??_isupper:
  1426  000018                     ??_BlinkErrorLeds:
  1427  000018                     ??_BlinkOkLeds:
  1428  000018                     ??_keepAliveSignalLed:
  1429  000018                     ?_ADC_GetConversion:
  1430                           	opt stack 0
  1431  000018                     ?_GetUint16FromBitArray:
  1432                           	opt stack 0
  1433  000018                     ?___wmul:
  1434                           	opt stack 0
  1435  000018                     ?___awmod:
  1436                           	opt stack 0
  1437  000018                     ?___ftpack:
  1438                           	opt stack 0
  1439  000018                     ?_frexp:
  1440                           	opt stack 0
  1441  000018                     ?___ftneg:
  1442                           	opt stack 0
  1443  000018                     ?___lldiv:
  1444                           	opt stack 0
  1445  000018                     ?___llmod:
  1446                           	opt stack 0
  1447  000018                     SwSpi_Data_Pin@cPinMode:
  1448                           	opt stack 0
  1449  000018                     SwSpi_Clk_Pin@cPinMode:
  1450                           	opt stack 0
  1451  000018                     SwSpi_Set_CE_Pin@cPinMode:
  1452                           	opt stack 0
  1453  000018                     SwSpi_Set_Synth_Le_Pin@cPinMode:
  1454                           	opt stack 0
  1455  000018                     SwSpi_Set_Dac_Sync_Pin@cPinMode:
  1456                           	opt stack 0
  1457  000018                     EUSART1_Write@txData:
  1458                           	opt stack 0
  1459  000018                     DATAEE_WriteByte@bData:
  1460                           	opt stack 0
  1461  000018                     DATAEE_ReadByte@bAdd:
  1462                           	opt stack 0
  1463  000018                     toupper@c:
  1464                           	opt stack 0
  1465  000018                     IOCB4_SetInterruptHandler@InterruptHandler:
  1466                           	opt stack 0
  1467  000018                     IOCB5_SetInterruptHandler@InterruptHandler:
  1468                           	opt stack 0
  1469  000018                     TMR0_SetInterruptHandler@InterruptHandler:
  1470                           	opt stack 0
  1471  000018                     crc8@dataArray:
  1472                           	opt stack 0
  1473  000018                     GetUint16FromBitArray@bitarray:
  1474                           	opt stack 0
  1475  000018                     Make32bitsArray@array:
  1476                           	opt stack 0
  1477  000018                     ___wmul@multiplier:
  1478                           	opt stack 0
  1479  000018                     ___awmod@dividend:
  1480                           	opt stack 0
  1481  000018                     memset@p1:
  1482                           	opt stack 0
  1483  000018                     ___ftpack@arg:
  1484                           	opt stack 0
  1485  000018                     ___ftge@ff1:
  1486                           	opt stack 0
  1487  000018                     ___ftneg@f1:
  1488                           	opt stack 0
  1489  000018                     frexp@value:
  1490                           	opt stack 0
  1491  000018                     FLASH_ReadByte@flashAddr:
  1492                           	opt stack 0
  1493  000018                     FLASH_EraseBlock@baseAddr:
  1494                           	opt stack 0
  1495  000018                     make8@data:
  1496                           	opt stack 0
  1497  000018                     ___lldiv@dividend:
  1498                           	opt stack 0
  1499  000018                     ___llmod@dividend:
  1500                           	opt stack 0
  1501                           
  1502                           ; 4 bytes @ 0x17
  1503  000018                     	ds	1
  1504  000019                     EepromRead@address:
  1505                           	opt stack 0
  1506  000019                     SwSpi_Data_Pin@phrType:
  1507                           	opt stack 0
  1508  000019                     SwSpi_Clk_Pin@phrType:
  1509                           	opt stack 0
  1510  000019                     SwSpi_Set_CE_Pin@phrType:
  1511                           	opt stack 0
  1512  000019                     SwSpi_Set_Synth_Le_Pin@phrType:
  1513                           	opt stack 0
  1514  000019                     DATAEE_WriteByte@bAdd:
  1515                           	opt stack 0
  1516  000019                     _isdigit$3317:
  1517                           	opt stack 0
  1518  000019                     _isspace$3320:
  1519                           	opt stack 0
  1520  000019                     _isupper$3323:
  1521                           	opt stack 0
  1522  000019                     WriteUartMessage@dataBuf:
  1523                           	opt stack 0
  1524  000019                     EUSART1_Read@readValue:
  1525                           	opt stack 0
  1526                           
  1527                           ; 2 bytes @ 0x18
  1528  000019                     	ds	1
  1529  00001A                     ??_ADC_GetConversion:
  1530  00001A                     ??_TMR0_Initialize:
  1531  00001A                     ?___lmul:
  1532                           	opt stack 0
  1533  00001A                     SWSPI_DAC_send_bits@data:
  1534                           	opt stack 0
  1535  00001A                     DATAEE_WriteByte@GIEBitValue:
  1536                           	opt stack 0
  1537  00001A                     isdigit@c:
  1538                           	opt stack 0
  1539  00001A                     isspace@c:
  1540                           	opt stack 0
  1541  00001A                     isupper@c:
  1542                           	opt stack 0
  1543  00001A                     crc8@dataSize:
  1544                           	opt stack 0
  1545  00001A                     GetUint16FromBitArray@numOfBits:
  1546                           	opt stack 0
  1547  00001A                     ___wmul@multiplicand:
  1548                           	opt stack 0
  1549  00001A                     ___awmod@divisor:
  1550                           	opt stack 0
  1551  00001A                     memset@c:
  1552                           	opt stack 0
  1553  00001A                     Make32bitsArray@data:
  1554                           	opt stack 0
  1555  00001A                     ___lmul@multiplier:
  1556                           	opt stack 0
  1557                           
  1558                           ; 4 bytes @ 0x19
  1559  00001A                     	ds	1
  1560  00001B                     ??_isalpha:
  1561  00001B                     BlinkErrorLeds@state:
  1562                           	opt stack 0
  1563  00001B                     BlinkOkLeds@state:
  1564                           	opt stack 0
  1565  00001B                     EepromWrite@data:
  1566                           	opt stack 0
  1567  00001B                     SWSPI_DAC_send_bits@count:
  1568                           	opt stack 0
  1569  00001B                     ___ftpack@exp:
  1570                           	opt stack 0
  1571  00001B                     WriteUartMessage@dataSize:
  1572                           	opt stack 0
  1573  00001B                     frexp@eptr:
  1574                           	opt stack 0
  1575  00001B                     ___ftge@ff2:
  1576                           	opt stack 0
  1577                           
  1578                           ; 3 bytes @ 0x1A
  1579  00001B                     	ds	1
  1580  00001C                     ??_GetUint16FromBitArray:
  1581  00001C                     ??_crc8:
  1582  00001C                     EepromWrite@address:
  1583                           	opt stack 0
  1584  00001C                     SWSPI_DAC_send_bits@phrType:
  1585                           	opt stack 0
  1586  00001C                     FLASH_EraseBlock@GIEBitValue:
  1587                           	opt stack 0
  1588  00001C                     ADC_GetConversion@channel:
  1589                           	opt stack 0
  1590  00001C                     make8@dataLocation:
  1591                           	opt stack 0
  1592  00001C                     ___awmod@counter:
  1593                           	opt stack 0
  1594  00001C                     ___ftpack@sign:
  1595                           	opt stack 0
  1596  00001C                     _isalpha$3314:
  1597                           	opt stack 0
  1598  00001C                     BlinkErrorLeds@idx:
  1599                           	opt stack 0
  1600  00001C                     BlinkOkLeds@idx:
  1601                           	opt stack 0
  1602  00001C                     ___wmul@product:
  1603                           	opt stack 0
  1604  00001C                     memset@n:
  1605                           	opt stack 0
  1606  00001C                     ___lldiv@divisor:
  1607                           	opt stack 0
  1608  00001C                     ___llmod@divisor:
  1609                           	opt stack 0
  1610                           
  1611                           ; 4 bytes @ 0x1B
  1612  00001C                     	ds	1
  1613  00001D                     ??_make8:
  1614  00001D                     ??___ftpack:
  1615  00001D                     ??_frexp:
  1616  00001D                     ??_WriteUartMessage:
  1617  00001D                     ___awmod@sign:
  1618                           	opt stack 0
  1619  00001D                     isalpha@c:
  1620                           	opt stack 0
  1621  00001D                     crc8@crc:
  1622                           	opt stack 0
  1623  00001D                     FLASH_WriteBlock@writeAddr:
  1624                           	opt stack 0
  1625                           
  1626                           ; 4 bytes @ 0x1C
  1627  00001D                     	ds	1
  1628  00001E                     ??_Make32bitsArray:
  1629  00001E                     ??___ftge:
  1630  00001E                     WriteUartMessage@idx:
  1631                           	opt stack 0
  1632  00001E                     memset@p:
  1633                           	opt stack 0
  1634  00001E                     ___lmul@multiplicand:
  1635                           	opt stack 0
  1636                           
  1637                           ; 4 bytes @ 0x1D
  1638  00001E                     	ds	1
  1639  00001F                     crc8@i:
  1640                           	opt stack 0
  1641  00001F                     GetUint16FromBitArray@res:
  1642                           	opt stack 0
  1643                           
  1644                           ; 2 bytes @ 0x1E
  1645  00001F                     	ds	1
  1646  000020                     ?___awtoft:
  1647                           	opt stack 0
  1648  000020                     ?___lltoft:
  1649                           	opt stack 0
  1650  000020                     ?___lwtoft:
  1651                           	opt stack 0
  1652  000020                     ___llmod@counter:
  1653                           	opt stack 0
  1654  000020                     ZeroArray@array:
  1655                           	opt stack 0
  1656  000020                     FillArray@array:
  1657                           	opt stack 0
  1658  000020                     Make32bitsArray@idx:
  1659                           	opt stack 0
  1660  000020                     ___awtoft@c:
  1661                           	opt stack 0
  1662  000020                     ___lwtoft@c:
  1663                           	opt stack 0
  1664  000020                     ___lldiv@quotient:
  1665                           	opt stack 0
  1666  000020                     ___lltoft@c:
  1667                           	opt stack 0
  1668                           
  1669                           ; 4 bytes @ 0x1F
  1670  000020                     	ds	1
  1671  000021                     FLASH_WriteBlock@flashWrBufPtr:
  1672                           	opt stack 0
  1673  000021                     GetUint16FromBitArray@i:
  1674                           	opt stack 0
  1675  000021                     StoreIntInEeprom@data:
  1676                           	opt stack 0
  1677                           
  1678                           ; 4 bytes @ 0x20
  1679  000021                     	ds	1
  1680  000022                     ZeroArray@size:
  1681                           	opt stack 0
  1682  000022                     FillArray@size:
  1683                           	opt stack 0
  1684  000022                     ___lmul@product:
  1685                           	opt stack 0
  1686                           
  1687                           ; 4 bytes @ 0x21
  1688  000022                     	ds	1
  1689  000023                     ??_FLASH_WriteBlock:
  1690  000023                     ___awtoft@sign:
  1691                           	opt stack 0
  1692                           
  1693                           ; 1 bytes @ 0x22
  1694  000023                     	ds	1
  1695  000024                     ??_GetMcuFwVersion:
  1696  000024                     ??_FlashReadCondition:
  1697  000024                     ??___lltoft:
  1698  000024                     SendAckMessage@inRequest:
  1699                           	opt stack 0
  1700  000024                     FillArray@value:
  1701                           	opt stack 0
  1702  000024                     ___lldiv@counter:
  1703                           	opt stack 0
  1704                           
  1705                           ; 1 bytes @ 0x23
  1706  000024                     	ds	1
  1707  000025                     ??_GetMcuRunTime:
  1708  000025                     SendAckMessage@inGroup:
  1709                           	opt stack 0
  1710  000025                     StoreIntInEeprom@address:
  1711                           	opt stack 0
  1712  000025                     SWSPI_Synth_send_bits@data:
  1713                           	opt stack 0
  1714                           
  1715                           ; 4 bytes @ 0x24
  1716  000025                     	ds	1
  1717  000026                     ?_strtol:
  1718                           	opt stack 0
  1719  000026                     StoreIntInEeprom@numOfByes:
  1720                           	opt stack 0
  1721  000026                     strtol@s:
  1722                           	opt stack 0
  1723  000026                     SendAckMessage@TxMsg:
  1724                           	opt stack 0
  1725                           
  1726                           ; 6 bytes @ 0x25
  1727  000026                     	ds	1
  1728  000027                     FLASH_WriteBlock@blockStartAddr:
  1729                           	opt stack 0
  1730                           
  1731                           ; 4 bytes @ 0x26
  1732  000027                     	ds	1
  1733  000028                     StoreIntInEeprom@val:
  1734                           	opt stack 0
  1735  000028                     ___lltoft@exp:
  1736                           	opt stack 0
  1737  000028                     strtol@endptr:
  1738                           	opt stack 0
  1739  000028                     FlashReadCondition@TxMsg:
  1740                           	opt stack 0
  1741                           
  1742                           ; 9 bytes @ 0x27
  1743  000028                     	ds	1
  1744  000029                     ?___ftdiv:
  1745                           	opt stack 0
  1746  000029                     StoreIntInEeprom@idx:
  1747                           	opt stack 0
  1748  000029                     ___ftdiv@f1:
  1749                           	opt stack 0
  1750  000029                     SWSPI_send_word@data:
  1751                           	opt stack 0
  1752                           
  1753                           ; 4 bytes @ 0x28
  1754  000029                     	ds	1
  1755  00002A                     strtol@base:
  1756                           	opt stack 0
  1757                           
  1758                           ; 2 bytes @ 0x29
  1759  00002A                     	ds	1
  1760  00002B                     FLASH_WriteBlock@GIEBitValue:
  1761                           	opt stack 0
  1762                           
  1763                           ; 1 bytes @ 0x2A
  1764  00002B                     	ds	1
  1765  00002C                     ??_strtol:
  1766  00002C                     ??_testLeds:
  1767  00002C                     FLASH_WriteBlock@i:
  1768                           	opt stack 0
  1769  00002C                     SetChannelMode@data:
  1770                           	opt stack 0
  1771  00002C                     ___ftdiv@f2:
  1772                           	opt stack 0
  1773                           
  1774                           ; 3 bytes @ 0x2B
  1775  00002C                     	ds	1
  1776  00002D                     SWSPI_send_word@dataSize:
  1777                           	opt stack 0
  1778  00002D                     testLeds@idx:
  1779                           	opt stack 0
  1780  00002D                     FlashSampleWrite@sampleData:
  1781                           	opt stack 0
  1782                           
  1783                           ; 2 bytes @ 0x2C
  1784  00002D                     	ds	1
  1785  00002E                     
  1786                           ; 1 bytes @ 0x2D
  1787  00002E                     	ds	1
  1788  00002F                     ??_eval_poly:
  1789  00002F                     FlashSampleWrite@channelNum:
  1790                           	opt stack 0
  1791  00002F                     ___altoft@exp:
  1792                           	opt stack 0
  1793                           
  1794                           ; 1 bytes @ 0x2E
  1795  00002F                     	ds	1
  1796  000030                     ___altoft@sign:
  1797                           	opt stack 0
  1798                           
  1799                           ; 1 bytes @ 0x2F
  1800  000030                     	ds	1
  1801  000031                     tblptru	equ	0xFF8
  1802                           tblptrh	equ	0xFF7
  1803                           tblptrl	equ	0xFF6
  1804                           tablat	equ	0xFF5
  1805                           postinc0	equ	0xFEE
  1806                           wreg	equ	0xFE8
  1807                           postdec1	equ	0xFE5
  1808                           fsr1l	equ	0xFE1
  1809                           
  1810                           ; 1 bytes @ 0x30
  1811 ;;
  1812 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1813 ;;
  1814 ;; *************** function _main *****************
  1815 ;; Defined at:
  1816 ;;		line 13 in file "main.c"
  1817 ;; Parameters:    Size  Location     Type
  1818 ;;		None
  1819 ;; Auto vars:     Size  Location     Type
  1820 ;;		None
  1821 ;; Return value:  Size  Location     Type
  1822 ;;                  1    wreg      void 
  1823 ;; Registers used:
  1824 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  1825 ;; Tracked objects:
  1826 ;;		On entry : 0/0
  1827 ;;		On exit  : 0/0
  1828 ;;		Unchanged: 0/0
  1829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1830 ;;      Params:         0       0       0       0       0       0       0
  1831 ;;      Locals:         0       0       0       0       0       0       0
  1832 ;;      Temps:          0       0       0       0       0       0       0
  1833 ;;      Totals:         0       0       0       0       0       0       0
  1834 ;;Total ram usage:        0 bytes
  1835 ;; Hardware stack levels required when called:   14
  1836 ;; This function calls:
  1837 ;;		_AdcConvert
  1838 ;;		_BlinkErrorLeds
  1839 ;;		_BlinkOkLeds
  1840 ;;		_CheckFlashPrecentage
  1841 ;;		_InitSystemApplicationManagers
  1842 ;;		_SendSystemStartAck
  1843 ;;		_SetMcuRunTime
  1844 ;;		_SetMcuSystem
  1845 ;;		_SynthLdDetect
  1846 ;;		_keepAliveSignalLed
  1847 ;;		_keepAliveSignalUart
  1848 ;;		_readUartMessage
  1849 ;; This function is called by:
  1850 ;;		Startup code after reset
  1851 ;; This function uses a non-reentrant model
  1852 ;;
  1853                           
  1854                           	psect	text0
  1855  0034A8                     __ptext0:
  1856                           	opt stack 0
  1857  0034A8                     _main:
  1858                           	opt stack 17
  1859                           
  1860                           ;main.c: 16: SetMcuSystem();
  1861                           
  1862                           ;incstack = 0
  1863  0034A8  ECB1  F021         	call	_SetMcuSystem	;wreg free
  1864                           
  1865                           ;main.c: 19: InitSystemApplicationManagers();
  1866  0034AC  EC47  F021         	call	_InitSystemApplicationManagers	;wreg free
  1867                           
  1868                           ;main.c: 22: SendSystemStartAck();
  1869  0034B0  ECAB  F021         	call	_SendSystemStartAck	;wreg free
  1870                           
  1871                           ;main.c: 25: BlinkOkLeds(OK_START_SYSTEM);
  1872  0034B4  0E03               	movlw	3
  1873  0034B6  ECC3  F01B         	call	_BlinkOkLeds
  1874  0034BA                     
  1875                           ;main.c: 28: {
  1876                           ;main.c: 29: readUartMessage();
  1877  0034BA  ECC9  F008         	call	_readUartMessage	;wreg free
  1878                           
  1879                           ;main.c: 31: if (Timer0_OneSec == 1)
  1880  0034BE  0100               	movlb	0	; () banked
  1881  0034C0  05FB               	decf	_Timer0_OneSec& (0+255),w,b	;volatile
  1882  0034C2  A4D8               	btfss	status,2,c
  1883  0034C4  D006               	goto	l1586
  1884                           
  1885                           ; BSR set to: 0
  1886                           ;main.c: 32: {
  1887                           ;main.c: 33: SetMcuRunTime();
  1888  0034C6  ECC3  F01D         	call	_SetMcuRunTime	;wreg free
  1889                           
  1890                           ;main.c: 34: Timer0_OneSec = 0;
  1891  0034CA  0E00               	movlw	0
  1892  0034CC  0100               	movlb	0	; () banked
  1893  0034CE  6FFB               	movwf	_Timer0_OneSec& (0+255),b	;volatile
  1894                           
  1895                           ;main.c: 35: }
  1896  0034D0  D7F4               	goto	l1585
  1897  0034D2                     l1586:
  1898                           
  1899                           ; BSR set to: 0
  1900                           ;main.c: 36: else if (Timer0_Sampling == 1)
  1901                           
  1902                           ; BSR set to: 0
  1903  0034D2  05FD               	decf	_Timer0_Sampling& (0+255),w,b	;volatile
  1904  0034D4  A4D8               	btfss	status,2,c
  1905  0034D6  D010               	goto	l1588
  1906                           
  1907                           ; BSR set to: 0
  1908                           ;main.c: 37: {
  1909                           ;main.c: 38: keepAliveSignalLed();
  1910  0034D8  EC30  F021         	call	_keepAliveSignalLed	;wreg free
  1911                           
  1912                           ;main.c: 40: if(1 == CheckFlashPrecentage())
  1913  0034DC  ECDB  F016         	call	_CheckFlashPrecentage	;wreg free
  1914  0034E0  06E8               	decf	wreg,f,c
  1915  0034E2  A4D8               	btfss	status,2,c
  1916  0034E4  D003               	goto	l1589
  1917                           
  1918                           ;main.c: 41: {
  1919                           ;main.c: 42: BlinkErrorLeds(FAIL_FLASH_MORE_THEN_HELF);
  1920  0034E6  0E02               	movlw	2
  1921  0034E8  EC94  F01B         	call	_BlinkErrorLeds
  1922  0034EC                     l1589:
  1923                           
  1924                           ;main.c: 43: }
  1925                           ;main.c: 46: AdcConvert();
  1926  0034EC  ECB3  F007         	call	_AdcConvert	;wreg free
  1927                           
  1928                           ;main.c: 47: Timer0_Sampling = 0;
  1929  0034F0  0E00               	movlw	0
  1930  0034F2  0100               	movlb	0	; () banked
  1931  0034F4  6FFD               	movwf	_Timer0_Sampling& (0+255),b	;volatile
  1932                           
  1933                           ;main.c: 48: }
  1934  0034F6  D7E1               	goto	l1585
  1935  0034F8                     l1588:
  1936                           
  1937                           ; BSR set to: 0
  1938                           ;main.c: 49: else if (Timer0_KeepAlive == 1)
  1939                           
  1940                           ; BSR set to: 0
  1941  0034F8  05FC               	decf	_Timer0_KeepAlive& (0+255),w,b	;volatile
  1942  0034FA  A4D8               	btfss	status,2,c
  1943  0034FC  D006               	goto	l1591
  1944                           
  1945                           ; BSR set to: 0
  1946                           ;main.c: 50: {
  1947                           ;main.c: 51: keepAliveSignalUart();
  1948  0034FE  ECA5  F021         	call	_keepAliveSignalUart	;wreg free
  1949                           
  1950                           ;main.c: 52: Timer0_KeepAlive = 0;
  1951  003502  0E00               	movlw	0
  1952  003504  0100               	movlb	0	; () banked
  1953  003506  6FFC               	movwf	_Timer0_KeepAlive& (0+255),b	;volatile
  1954                           
  1955                           ;main.c: 53: }
  1956  003508  D7D8               	goto	l1585
  1957  00350A                     l1591:
  1958                           
  1959                           ; BSR set to: 0
  1960                           ;main.c: 54: else if (Timer0_SynthLd == 1)
  1961                           
  1962                           ; BSR set to: 0
  1963  00350A  05FE               	decf	_Timer0_SynthLd& (0+255),w,b	;volatile
  1964  00350C  A4D8               	btfss	status,2,c
  1965  00350E  D7D5               	goto	l1585
  1966                           
  1967                           ; BSR set to: 0
  1968                           ;main.c: 55: {
  1969                           ;main.c: 56: SynthLdDetect();
  1970  003510  ECDD  F014         	call	_SynthLdDetect	;wreg free
  1971                           
  1972                           ;main.c: 57: Timer0_SynthLd = 0;
  1973  003514  0E00               	movlw	0
  1974  003516  0100               	movlb	0	; () banked
  1975  003518  6FFE               	movwf	_Timer0_SynthLd& (0+255),b	;volatile
  1976                           
  1977                           ; BSR set to: 0
  1978                           
  1979                           ; BSR set to: 0
  1980                           
  1981                           ; BSR set to: 0
  1982                           
  1983                           ; BSR set to: 0
  1984                           
  1985                           ; BSR set to: 0
  1986  00351A  D7CF               	goto	l1585
  1987  00351C                     __end_of_main:
  1988                           	opt stack 0
  1989                           tblptru	equ	0xFF8
  1990                           tblptrh	equ	0xFF7
  1991                           tblptrl	equ	0xFF6
  1992                           tablat	equ	0xFF5
  1993                           postinc0	equ	0xFEE
  1994                           wreg	equ	0xFE8
  1995                           postdec1	equ	0xFE5
  1996                           fsr1l	equ	0xFE1
  1997                           status	equ	0xFD8
  1998                           
  1999 ;; *************** function _readUartMessage *****************
  2000 ;; Defined at:
  2001 ;;		line 28 in file "EusartApp.c"
  2002 ;; Parameters:    Size  Location     Type
  2003 ;;		None
  2004 ;; Auto vars:     Size  Location     Type
  2005 ;;  idx             2   48[BANK1 ] int 
  2006 ;;  chRec           1   50[BANK1 ] unsigned char 
  2007 ;; Return value:  Size  Location     Type
  2008 ;;                  1    wreg      void 
  2009 ;; Registers used:
  2010 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2011 ;; Tracked objects:
  2012 ;;		On entry : 0/0
  2013 ;;		On exit  : 0/0
  2014 ;;		Unchanged: 0/0
  2015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2016 ;;      Params:         0       0       0       0       0       0       0
  2017 ;;      Locals:         0       0       3       0       0       0       0
  2018 ;;      Temps:          0       0       4       0       0       0       0
  2019 ;;      Totals:         0       0       7       0       0       0       0
  2020 ;;Total ram usage:        7 bytes
  2021 ;; Hardware stack levels used:    1
  2022 ;; Hardware stack levels required when called:   13
  2023 ;; This function calls:
  2024 ;;		_EUSART1_Read
  2025 ;;		_GroupAdc
  2026 ;;		_GroupControlMcu
  2027 ;;		_GroupDAC
  2028 ;;		_GroupFlashMemory
  2029 ;;		_GroupStatusAndVersion
  2030 ;;		_GroupSynthesizers
  2031 ;;		_InitRxMessageParams
  2032 ;;		_ZeroArray
  2033 ;;		_crc8
  2034 ;; This function is called by:
  2035 ;;		_main
  2036 ;; This function uses a non-reentrant model
  2037 ;;
  2038                           
  2039                           	psect	text1
  2040  001192                     __ptext1:
  2041                           	opt stack 0
  2042  001192                     _readUartMessage:
  2043                           	opt stack 17
  2044                           
  2045                           ;EusartApp.c: 31: uint8_t chRec = (0);
  2046                           
  2047                           ; BSR set to: 0
  2048                           ;incstack = 0
  2049  001192  0E00               	movlw	0
  2050  001194  0101               	movlb	1	; () banked
  2051  001196  6FE4               	movwf	readUartMessage@chRec& (0+255),b
  2052                           
  2053                           ;EusartApp.c: 32: switch(cState)
  2054  001198  D0DF               	goto	l202
  2055  00119A                     
  2056                           ;EusartApp.c: 37: if(eusart1RxCount > (4))
  2057                           
  2058                           ; BSR set to: 1
  2059  00119A  0E04               	movlw	4
  2060  00119C  0100               	movlb	0	; () banked
  2061  00119E  65F9               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2062  0011A0  0012               	return	
  2063                           
  2064                           ; BSR set to: 0
  2065                           ;EusartApp.c: 38: {
  2066                           ;EusartApp.c: 39: cState = FIND_MAGIC;
  2067  0011A2  0E01               	movlw	1
  2068  0011A4  6FF8               	movwf	_cState& (0+255),b
  2069                           
  2070                           ; BSR set to: 0
  2071                           ;EusartApp.c: 40: }
  2072                           ;EusartApp.c: 41: return;
  2073                           
  2074                           ; BSR set to: 0
  2075  0011A6  0012               	return	
  2076  0011A8                     
  2077                           ; BSR set to: 0
  2078                           ;EusartApp.c: 45: InitRxMessageParams();
  2079                           
  2080                           ; BSR set to: 0
  2081  0011A8  EC24  F020         	call	_InitRxMessageParams	;wreg free
  2082                           
  2083                           ;EusartApp.c: 46: msgCount = 0;
  2084  0011AC  0E00               	movlw	0
  2085  0011AE  0100               	movlb	0	; () banked
  2086  0011B0  6FF2               	movwf	_msgCount& (0+255),b
  2087                           
  2088                           ; BSR set to: 0
  2089                           ;EusartApp.c: 47: if(eusart1RxCount > 1)
  2090  0011B2  0E01               	movlw	1
  2091  0011B4  65F9               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2092  0011B6  D00E               	goto	l207
  2093                           
  2094                           ; BSR set to: 0
  2095                           ;EusartApp.c: 48: {
  2096                           ;EusartApp.c: 49: chRec = EUSART1_Read();
  2097  0011B8  ECA1  F01D         	call	_EUSART1_Read	;wreg free
  2098  0011BC  0101               	movlb	1	; () banked
  2099  0011BE  6FE4               	movwf	readUartMessage@chRec& (0+255),b
  2100                           
  2101                           ; BSR set to: 1
  2102                           ;EusartApp.c: 50: rxMsgQueue[(0)] = chRec;
  2103  0011C0  C1E4  F186         	movff	readUartMessage@chRec,_rxMsgQueue
  2104                           
  2105                           ; BSR set to: 1
  2106                           ;EusartApp.c: 51: if(chRec == (0x24))
  2107  0011C4  0E24               	movlw	36
  2108  0011C6  19E4               	xorwf	readUartMessage@chRec& (0+255),w,b
  2109  0011C8  A4D8               	btfss	status,2,c
  2110  0011CA  0012               	return	
  2111                           
  2112                           ; BSR set to: 1
  2113                           ;EusartApp.c: 52: {
  2114                           ;EusartApp.c: 53: cState = READ_GROUP;
  2115  0011CC  0E02               	movlw	2
  2116  0011CE  0100               	movlb	0	; () banked
  2117  0011D0  6FF8               	movwf	_cState& (0+255),b
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;EusartApp.c: 54: }
  2121                           ;EusartApp.c: 55: }
  2122  0011D2  0012               	return	
  2123  0011D4                     l207:
  2124                           
  2125                           ; BSR set to: 0
  2126                           ;EusartApp.c: 56: else
  2127                           ;EusartApp.c: 57: {
  2128                           ;EusartApp.c: 58: cState = START_RX_MESSAGE_READ;
  2129                           
  2130                           ; BSR set to: 0
  2131  0011D4  0E00               	movlw	0
  2132  0011D6  6FF8               	movwf	_cState& (0+255),b
  2133                           
  2134                           ; BSR set to: 0
  2135                           ;EusartApp.c: 59: }
  2136                           ;EusartApp.c: 61: break;
  2137  0011D8  0012               	return	
  2138  0011DA                     
  2139                           ; BSR set to: 0
  2140                           ;EusartApp.c: 65: if(eusart1RxCount > 1)
  2141                           
  2142                           ; BSR set to: 0
  2143  0011DA  0E01               	movlw	1
  2144  0011DC  65F9               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2145  0011DE  0012               	return	
  2146                           
  2147                           ; BSR set to: 0
  2148                           ;EusartApp.c: 66: {
  2149                           ;EusartApp.c: 67: group = EUSART1_Read();
  2150  0011E0  ECA1  F01D         	call	_EUSART1_Read	;wreg free
  2151  0011E4  0100               	movlb	0	; () banked
  2152  0011E6  6FF7               	movwf	_group& (0+255),b
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;EusartApp.c: 68: rxMsgQueue[(1)] = group;
  2156  0011E8  C0F7  F187         	movff	_group,_rxMsgQueue+1
  2157                           
  2158                           ; BSR set to: 0
  2159                           ;EusartApp.c: 69: cState = READ_REQUEST;
  2160  0011EC  0E03               	movlw	3
  2161  0011EE  6FF8               	movwf	_cState& (0+255),b
  2162                           
  2163                           ; BSR set to: 0
  2164                           ;EusartApp.c: 70: }
  2165                           ;EusartApp.c: 71: break;
  2166  0011F0  0012               	return	
  2167  0011F2                     
  2168                           ; BSR set to: 0
  2169                           ;EusartApp.c: 75: if(eusart1RxCount > 1)
  2170                           
  2171                           ; BSR set to: 0
  2172  0011F2  0E01               	movlw	1
  2173  0011F4  65F9               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2174  0011F6  0012               	return	
  2175                           
  2176                           ; BSR set to: 0
  2177                           ;EusartApp.c: 76: {
  2178                           ;EusartApp.c: 77: request = EUSART1_Read();
  2179  0011F8  ECA1  F01D         	call	_EUSART1_Read	;wreg free
  2180  0011FC  0100               	movlb	0	; () banked
  2181  0011FE  6FF6               	movwf	_request& (0+255),b
  2182                           
  2183                           ; BSR set to: 0
  2184                           ;EusartApp.c: 78: rxMsgQueue[(2)] = request;
  2185  001200  C0F6  F188         	movff	_request,_rxMsgQueue+2
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;EusartApp.c: 79: cState = READ_DATA_SIZE;
  2189  001204  0E04               	movlw	4
  2190  001206  6FF8               	movwf	_cState& (0+255),b
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;EusartApp.c: 80: }
  2194                           ;EusartApp.c: 81: break;
  2195  001208  0012               	return	
  2196  00120A                     
  2197                           ; BSR set to: 0
  2198                           ;EusartApp.c: 84: if(eusart1RxCount > 1)
  2199                           
  2200                           ; BSR set to: 0
  2201  00120A  0E01               	movlw	1
  2202  00120C  65F9               	cpfsgt	_eusart1RxCount& (0+255),b	;volatile
  2203  00120E  0012               	return	
  2204                           
  2205                           ; BSR set to: 0
  2206                           ;EusartApp.c: 85: {
  2207                           ;EusartApp.c: 86: dataSize = EUSART1_Read();
  2208  001210  ECA1  F01D         	call	_EUSART1_Read	;wreg free
  2209  001214  0100               	movlb	0	; () banked
  2210  001216  6FF5               	movwf	_dataSize& (0+255),b
  2211                           
  2212                           ; BSR set to: 0
  2213                           ;EusartApp.c: 87: rxMsgQueue[(3)] = dataSize;
  2214  001218  C0F5  F189         	movff	_dataSize,_rxMsgQueue+3
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;EusartApp.c: 88: if(dataSize == 0)
  2218  00121C  51F5               	movf	_dataSize& (0+255),w,b
  2219  00121E  A4D8               	btfss	status,2,c
  2220  001220  D003               	goto	l217
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;EusartApp.c: 89: {
  2224                           ;EusartApp.c: 90: cState = CHECK_CRC;
  2225  001222  0E06               	movlw	6
  2226  001224  6FF8               	movwf	_cState& (0+255),b
  2227                           
  2228                           ;EusartApp.c: 91: }
  2229  001226  0012               	return	
  2230  001228                     l217:
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;EusartApp.c: 92: else
  2234                           ;EusartApp.c: 93: {
  2235                           ;EusartApp.c: 94: cState = READ_DATA;
  2236                           
  2237                           ; BSR set to: 0
  2238  001228  0E05               	movlw	5
  2239  00122A  6FF8               	movwf	_cState& (0+255),b
  2240                           
  2241                           ; BSR set to: 0
  2242                           ;EusartApp.c: 95: }
  2243                           ;EusartApp.c: 97: }
  2244                           ;EusartApp.c: 99: break;
  2245                           
  2246                           ; BSR set to: 0
  2247  00122C  0012               	return	
  2248  00122E                     
  2249                           ; BSR set to: 0
  2250                           ;EusartApp.c: 103: if(eusart1RxCount >= dataSize)
  2251                           
  2252                           ; BSR set to: 0
  2253  00122E  51F5               	movf	_dataSize& (0+255),w,b
  2254  001230  5DF9               	subwf	_eusart1RxCount& (0+255),w,b	;volatile
  2255  001232  A0D8               	btfss	status,0,c
  2256  001234  0012               	return	
  2257                           
  2258                           ; BSR set to: 0
  2259                           ;EusartApp.c: 104: {
  2260                           ;EusartApp.c: 105: ZeroArray(rxMsgData, (0x14));
  2261  001236  0E72               	movlw	low _rxMsgData
  2262  001238  6E20               	movwf	ZeroArray@array,c
  2263  00123A  0E01               	movlw	high _rxMsgData
  2264  00123C  6E21               	movwf	ZeroArray@array+1,c
  2265  00123E  0E00               	movlw	0
  2266  001240  6E23               	movwf	ZeroArray@size+1,c
  2267  001242  0E14               	movlw	20
  2268  001244  6E22               	movwf	ZeroArray@size,c
  2269  001246  ECF8  F020         	call	_ZeroArray	;wreg free
  2270                           
  2271                           ;EusartApp.c: 107: for(int idx = 0; idx < dataSize; idx++)
  2272  00124A  0E00               	movlw	0
  2273  00124C  0101               	movlb	1	; () banked
  2274  00124E  6FE3               	movwf	(readUartMessage@idx+1)& (0+255),b
  2275  001250  0E00               	movlw	0
  2276  001252  6FE2               	movwf	readUartMessage@idx& (0+255),b
  2277  001254  D022               	goto	l221
  2278  001256                     
  2279                           ; BSR set to: 1
  2280                           ;EusartApp.c: 108: {
  2281                           ;EusartApp.c: 109: chRec = EUSART1_Read();
  2282                           
  2283                           ; BSR set to: 1
  2284  001256  ECA1  F01D         	call	_EUSART1_Read	;wreg free
  2285  00125A  0101               	movlb	1	; () banked
  2286  00125C  6FE4               	movwf	readUartMessage@chRec& (0+255),b
  2287                           
  2288                           ; BSR set to: 1
  2289                           ;EusartApp.c: 110: rxMsgQueue[(0x4) + msgCount++] = chRec;
  2290  00125E  0100               	movlb	0	; () banked
  2291  001260  51F2               	movf	_msgCount& (0+255),w,b
  2292  001262  0101               	movlb	1	; () banked
  2293  001264  6FDE               	movwf	??_readUartMessage& (0+255),b
  2294  001266  6BDF               	clrf	(??_readUartMessage+1)& (0+255),b
  2295  001268  0E04               	movlw	4
  2296  00126A  27DE               	addwf	??_readUartMessage& (0+255),f,b
  2297  00126C  0E00               	movlw	0
  2298  00126E  23DF               	addwfc	(??_readUartMessage+1)& (0+255),f,b
  2299  001270  0E86               	movlw	low _rxMsgQueue
  2300  001272  25DE               	addwf	??_readUartMessage& (0+255),w,b
  2301  001274  6ED9               	movwf	fsr2l,c
  2302  001276  0E01               	movlw	high _rxMsgQueue
  2303  001278  21DF               	addwfc	(??_readUartMessage+1)& (0+255),w,b
  2304  00127A  6EDA               	movwf	fsr2h,c
  2305  00127C  C1E4  FFDF         	movff	readUartMessage@chRec,indf2
  2306                           
  2307                           ; BSR set to: 1
  2308  001280  0100               	movlb	0	; () banked
  2309  001282  2BF2               	incf	_msgCount& (0+255),f,b
  2310                           
  2311                           ; BSR set to: 0
  2312                           ;EusartApp.c: 111: rxMsgData[idx] = chRec;
  2313  001284  0E72               	movlw	low _rxMsgData
  2314  001286  0101               	movlb	1	; () banked
  2315  001288  25E2               	addwf	readUartMessage@idx& (0+255),w,b
  2316  00128A  6ED9               	movwf	fsr2l,c
  2317  00128C  0E01               	movlw	high _rxMsgData
  2318  00128E  21E3               	addwfc	(readUartMessage@idx+1)& (0+255),w,b
  2319  001290  6EDA               	movwf	fsr2h,c
  2320  001292  C1E4  FFDF         	movff	readUartMessage@chRec,indf2
  2321                           
  2322                           ; BSR set to: 1
  2323  001296  4BE2               	infsnz	readUartMessage@idx& (0+255),f,b
  2324  001298  2BE3               	incf	(readUartMessage@idx+1)& (0+255),f,b
  2325  00129A                     l221:
  2326                           
  2327                           ; BSR set to: 1
  2328                           
  2329                           ; BSR set to: 1
  2330  00129A  0100               	movlb	0	; () banked
  2331  00129C  51F5               	movf	_dataSize& (0+255),w,b
  2332  00129E  0101               	movlb	1	; () banked
  2333  0012A0  6FDE               	movwf	??_readUartMessage& (0+255),b
  2334  0012A2  6BDF               	clrf	(??_readUartMessage+1)& (0+255),b
  2335  0012A4  51DE               	movf	??_readUartMessage& (0+255),w,b
  2336  0012A6  5DE2               	subwf	readUartMessage@idx& (0+255),w,b
  2337  0012A8  51E3               	movf	(readUartMessage@idx+1)& (0+255),w,b
  2338  0012AA  0A80               	xorlw	128
  2339  0012AC  6FE0               	movwf	(??_readUartMessage+2)& (0+255),b
  2340  0012AE  51DF               	movf	(??_readUartMessage+1)& (0+255),w,b
  2341  0012B0  0A80               	xorlw	128
  2342  0012B2  59E0               	subwfb	(??_readUartMessage+2)& (0+255),w,b
  2343  0012B4  A0D8               	btfss	status,0,c
  2344  0012B6  D7CF               	goto	l222
  2345                           
  2346                           ; BSR set to: 1
  2347                           ;EusartApp.c: 112: }
  2348                           ;EusartApp.c: 114: cState = CHECK_CRC;
  2349                           
  2350                           ; BSR set to: 1
  2351  0012B8  0E06               	movlw	6
  2352  0012BA  0100               	movlb	0	; () banked
  2353  0012BC  6FF8               	movwf	_cState& (0+255),b
  2354                           
  2355                           ; BSR set to: 0
  2356                           ;EusartApp.c: 115: }
  2357                           ;EusartApp.c: 116: break;
  2358  0012BE  0012               	return	
  2359  0012C0                     
  2360                           ; BSR set to: 0
  2361                           ;EusartApp.c: 119: if(eusart1RxCount >= 1)
  2362                           
  2363                           ; BSR set to: 0
  2364  0012C0  51F9               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  2365  0012C2  B4D8               	btfsc	status,2,c
  2366  0012C4  0012               	return	
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;EusartApp.c: 120: {
  2370                           ;EusartApp.c: 121: crcGiven = EUSART1_Read();
  2371  0012C6  ECA1  F01D         	call	_EUSART1_Read	;wreg free
  2372  0012CA  0100               	movlb	0	; () banked
  2373  0012CC  6FF3               	movwf	_crcGiven& (0+255),b
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;EusartApp.c: 122: crcCalc = crc8(rxMsgQueue, (0x4) + msgCount);
  2377  0012CE  0E86               	movlw	low _rxMsgQueue
  2378  0012D0  6E18               	movwf	crc8@dataArray,c
  2379  0012D2  0E01               	movlw	high _rxMsgQueue
  2380  0012D4  6E19               	movwf	crc8@dataArray+1,c
  2381  0012D6  0E04               	movlw	4
  2382  0012D8  25F2               	addwf	_msgCount& (0+255),w,b
  2383  0012DA  6E1A               	movwf	crc8@dataSize,c
  2384  0012DC  6A1B               	clrf	crc8@dataSize+1,c
  2385  0012DE  0E00               	movlw	0
  2386  0012E0  221B               	addwfc	crc8@dataSize+1,f,c
  2387  0012E2  EC7A  F01D         	call	_crc8	;wreg free
  2388  0012E6  0100               	movlb	0	; () banked
  2389  0012E8  6FF4               	movwf	_crcCalc& (0+255),b
  2390                           
  2391                           ; BSR set to: 0
  2392                           ;EusartApp.c: 124: if(crcGiven == crcCalc)
  2393  0012EA  51F4               	movf	_crcCalc& (0+255),w,b
  2394  0012EC  19F3               	xorwf	_crcGiven& (0+255),w,b
  2395  0012EE  A4D8               	btfss	status,2,c
  2396  0012F0  D003               	goto	l226
  2397                           
  2398                           ; BSR set to: 0
  2399                           ;EusartApp.c: 125: {
  2400                           ;EusartApp.c: 126: cState = JUMP_FUNCTION;
  2401  0012F2  0E07               	movlw	7
  2402  0012F4  6FF8               	movwf	_cState& (0+255),b
  2403                           
  2404                           ;EusartApp.c: 127: }
  2405  0012F6  0012               	return	
  2406  0012F8                     l226:
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;EusartApp.c: 128: else
  2410                           ;EusartApp.c: 129: {
  2411                           ;EusartApp.c: 130: cState = START_RX_MESSAGE_READ;
  2412                           
  2413                           ; BSR set to: 0
  2414  0012F8  0E00               	movlw	0
  2415  0012FA  6FF8               	movwf	_cState& (0+255),b
  2416                           
  2417                           ; BSR set to: 0
  2418                           ;EusartApp.c: 131: }
  2419                           ;EusartApp.c: 132: }
  2420                           ;EusartApp.c: 133: break;
  2421                           
  2422                           ; BSR set to: 0
  2423  0012FC  0012               	return	
  2424  0012FE                     
  2425                           ; BSR set to: 0
  2426                           ;EusartApp.c: 136: groupsArray[group - 1](request, rxMsgData);
  2427                           
  2428                           ; BSR set to: 0
  2429  0012FE  0EFE               	movlw	254
  2430  001300  0101               	movlb	1	; () banked
  2431  001302  6FDE               	movwf	??_readUartMessage& (0+255),b
  2432  001304  0EFF               	movlw	255
  2433  001306  6FDF               	movwf	(??_readUartMessage+1)& (0+255),b
  2434  001308  0100               	movlb	0	; () banked
  2435  00130A  51F7               	movf	_group& (0+255),w,b
  2436  00130C  0101               	movlb	1	; () banked
  2437  00130E  6FE0               	movwf	(??_readUartMessage+2)& (0+255),b
  2438  001310  6BE1               	clrf	(??_readUartMessage+3)& (0+255),b
  2439  001312  90D8               	bcf	status,0,c
  2440  001314  37E0               	rlcf	(??_readUartMessage+2)& (0+255),f,b
  2441  001316  37E1               	rlcf	(??_readUartMessage+3)& (0+255),f,b
  2442  001318  51DE               	movf	??_readUartMessage& (0+255),w,b
  2443  00131A  27E0               	addwf	(??_readUartMessage+2)& (0+255),f,b
  2444  00131C  51DF               	movf	(??_readUartMessage+1)& (0+255),w,b
  2445  00131E  23E1               	addwfc	(??_readUartMessage+3)& (0+255),f,b
  2446  001320  0EE5               	movlw	low _groupsArray
  2447  001322  25E0               	addwf	(??_readUartMessage+2)& (0+255),w,b
  2448  001324  6ED9               	movwf	fsr2l,c
  2449  001326  0E01               	movlw	high _groupsArray
  2450  001328  21E1               	addwfc	(??_readUartMessage+3)& (0+255),w,b
  2451  00132A  6EDA               	movwf	fsr2h,c
  2452  00132C  D801               	call	u8928
  2453  00132E  D010               	goto	u8929
  2454  001330                     u8928:
  2455  001330  0005               	push	
  2456  001332  6EFA               	movwf	pclath,c
  2457  001334  50DE               	movf	postinc2,w,c
  2458  001336  6EFD               	movwf	tosl,c
  2459  001338  50DE               	movf	postinc2,w,c
  2460  00133A  6EFE               	movwf	tosh,c
  2461  00133C  50F8               	movf	tblptru,w,c
  2462  00133E  6EFF               	movwf	tosu,c
  2463  001340  50FA               	movf	pclath,w,c
  2464  001342  0E72               	movlw	low _rxMsgData
  2465  001344  0100               	movlb	0	; () banked
  2466  001346  6FE6               	movwf	GroupDAC@data& (0+255),b
  2467  001348  0E01               	movlw	high _rxMsgData
  2468  00134A  6FE7               	movwf	(GroupDAC@data+1)& (0+255),b
  2469  00134C  51F6               	movf	_request& (0+255),w,b
  2470  00134E  0012               	return		;indir
  2471  001350                     u8929:
  2472                           
  2473                           ;EusartApp.c: 137: cState = START_RX_MESSAGE_READ;
  2474  001350  0E00               	movlw	0
  2475  001352  0100               	movlb	0	; () banked
  2476  001354  6FF8               	movwf	_cState& (0+255),b
  2477                           
  2478                           ; BSR set to: 0
  2479                           ;EusartApp.c: 139: }
  2480                           
  2481                           ;EusartApp.c: 138: break;
  2482  001356  0012               	return	
  2483  001358                     l202:
  2484                           
  2485                           ; BSR set to: 0
  2486  001358  0100               	movlb	0	; () banked
  2487  00135A  51F8               	movf	_cState& (0+255),w,b
  2488                           
  2489                           ; Switch size 1, requested type "space"
  2490                           ; Number of cases is 8, Range of values is 0 to 7
  2491                           ; switch strategies available:
  2492                           ; Name         Instructions Cycles
  2493                           ; simple_byte           25    13 (average)
  2494                           ;	Chosen strategy is simple_byte
  2495  00135C  0A00               	xorlw	0	; case 0
  2496  00135E  B4D8               	btfsc	status,2,c
  2497  001360  D71C               	goto	l203
  2498  001362  0A01               	xorlw	1	; case 1
  2499  001364  B4D8               	btfsc	status,2,c
  2500  001366  D720               	goto	l206
  2501  001368  0A03               	xorlw	3	; case 2
  2502  00136A  B4D8               	btfsc	status,2,c
  2503  00136C  D736               	goto	l211
  2504  00136E  0A01               	xorlw	1	; case 3
  2505  001370  B4D8               	btfsc	status,2,c
  2506  001372  D73F               	goto	l213
  2507  001374  0A07               	xorlw	7	; case 4
  2508  001376  B4D8               	btfsc	status,2,c
  2509  001378  D748               	goto	l215
  2510  00137A  0A01               	xorlw	1	; case 5
  2511  00137C  B4D8               	btfsc	status,2,c
  2512  00137E  D757               	goto	l219
  2513  001380  0A03               	xorlw	3	; case 6
  2514  001382  B4D8               	btfsc	status,2,c
  2515  001384  D79D               	goto	l224
  2516  001386  0A01               	xorlw	1	; case 7
  2517  001388  A4D8               	btfss	status,2,c
  2518  00138A  0012               	return	
  2519  00138C  D7B8               	goto	l228
  2520  00138E                     __end_of_readUartMessage:
  2521                           	opt stack 0
  2522                           tosu	equ	0xFFF
  2523                           tosh	equ	0xFFE
  2524                           tosl	equ	0xFFD
  2525                           pclath	equ	0xFFA
  2526                           tblptru	equ	0xFF8
  2527                           tblptrh	equ	0xFF7
  2528                           tblptrl	equ	0xFF6
  2529                           tablat	equ	0xFF5
  2530                           postinc0	equ	0xFEE
  2531                           wreg	equ	0xFE8
  2532                           postdec1	equ	0xFE5
  2533                           fsr1l	equ	0xFE1
  2534                           indf2	equ	0xFDF
  2535                           postinc2	equ	0xFDE
  2536                           fsr2h	equ	0xFDA
  2537                           fsr2l	equ	0xFD9
  2538                           status	equ	0xFD8
  2539                           
  2540 ;; *************** function _InitRxMessageParams *****************
  2541 ;; Defined at:
  2542 ;;		line 142 in file "EusartApp.c"
  2543 ;; Parameters:    Size  Location     Type
  2544 ;;		None
  2545 ;; Auto vars:     Size  Location     Type
  2546 ;;		None
  2547 ;; Return value:  Size  Location     Type
  2548 ;;                  1    wreg      void 
  2549 ;; Registers used:
  2550 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2551 ;; Tracked objects:
  2552 ;;		On entry : 0/0
  2553 ;;		On exit  : 0/0
  2554 ;;		Unchanged: 0/0
  2555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2556 ;;      Params:         0       0       0       0       0       0       0
  2557 ;;      Locals:         0       0       0       0       0       0       0
  2558 ;;      Temps:          0       0       0       0       0       0       0
  2559 ;;      Totals:         0       0       0       0       0       0       0
  2560 ;;Total ram usage:        0 bytes
  2561 ;; Hardware stack levels used:    1
  2562 ;; Hardware stack levels required when called:    6
  2563 ;; This function calls:
  2564 ;;		_ZeroArray
  2565 ;; This function is called by:
  2566 ;;		_readUartMessage
  2567 ;; This function uses a non-reentrant model
  2568 ;;
  2569                           
  2570                           	psect	text2
  2571  004048                     __ptext2:
  2572                           	opt stack 0
  2573  004048                     _InitRxMessageParams:
  2574                           	opt stack 23
  2575                           
  2576                           ;EusartApp.c: 146: dataSize = 0;
  2577                           
  2578                           ;incstack = 0
  2579  004048  0E00               	movlw	0
  2580  00404A  0100               	movlb	0	; () banked
  2581  00404C  6FF5               	movwf	_dataSize& (0+255),b
  2582                           
  2583                           ;EusartApp.c: 147: crcCalc = 0;
  2584  00404E  0E00               	movlw	0
  2585  004050  6FF4               	movwf	_crcCalc& (0+255),b
  2586                           
  2587                           ;EusartApp.c: 148: crcGiven = 0;
  2588  004052  0E00               	movlw	0
  2589  004054  6FF3               	movwf	_crcGiven& (0+255),b
  2590                           
  2591                           ;EusartApp.c: 149: msgCount = 0;
  2592  004056  0E00               	movlw	0
  2593  004058  6FF2               	movwf	_msgCount& (0+255),b
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;EusartApp.c: 150: ZeroArray(rxMsgQueue, (0x14));
  2597  00405A  0E86               	movlw	low _rxMsgQueue
  2598  00405C  6E20               	movwf	ZeroArray@array,c
  2599  00405E  0E01               	movlw	high _rxMsgQueue
  2600  004060  6E21               	movwf	ZeroArray@array+1,c
  2601  004062  0E00               	movlw	0
  2602  004064  6E23               	movwf	ZeroArray@size+1,c
  2603  004066  0E14               	movlw	20
  2604  004068  6E22               	movwf	ZeroArray@size,c
  2605  00406A  ECF8  F020         	call	_ZeroArray
  2606  00406E  0012               	return		;funcret
  2607  004070                     __end_of_InitRxMessageParams:
  2608                           	opt stack 0
  2609                           tosu	equ	0xFFF
  2610                           tosh	equ	0xFFE
  2611                           tosl	equ	0xFFD
  2612                           pclath	equ	0xFFA
  2613                           tblptru	equ	0xFF8
  2614                           tblptrh	equ	0xFF7
  2615                           tblptrl	equ	0xFF6
  2616                           tablat	equ	0xFF5
  2617                           postinc0	equ	0xFEE
  2618                           wreg	equ	0xFE8
  2619                           postdec1	equ	0xFE5
  2620                           fsr1l	equ	0xFE1
  2621                           indf2	equ	0xFDF
  2622                           postinc2	equ	0xFDE
  2623                           fsr2h	equ	0xFDA
  2624                           fsr2l	equ	0xFD9
  2625                           status	equ	0xFD8
  2626                           
  2627 ;; *************** function _GroupDAC *****************
  2628 ;; Defined at:
  2629 ;;		line 125 in file "MessageFunctions.c"
  2630 ;; Parameters:    Size  Location     Type
  2631 ;;  request         1    wreg     enum E12
  2632 ;;  data            2  134[BANK0 ] PTR unsigned char 
  2633 ;;		 -> rxMsgData(20), 
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;  request         1  136[BANK0 ] enum E12
  2636 ;; Return value:  Size  Location     Type
  2637 ;;                  1    wreg      void 
  2638 ;; Registers used:
  2639 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2640 ;; Tracked objects:
  2641 ;;		On entry : 0/0
  2642 ;;		On exit  : 0/0
  2643 ;;		Unchanged: 0/0
  2644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2645 ;;      Params:         0       2       0       0       0       0       0
  2646 ;;      Locals:         0       1       0       0       0       0       0
  2647 ;;      Temps:          0       0       0       0       0       0       0
  2648 ;;      Totals:         0       3       0       0       0       0       0
  2649 ;;Total ram usage:        3 bytes
  2650 ;; Hardware stack levels used:    1
  2651 ;; Hardware stack levels required when called:   11
  2652 ;; This function calls:
  2653 ;;		_DacReadValue
  2654 ;;		_DacSetValue
  2655 ;; This function is called by:
  2656 ;;		_readUartMessage
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           	psect	text3
  2661  003EC2                     __ptext3:
  2662                           	opt stack 0
  2663  003EC2                     _GroupDAC:
  2664                           	opt stack 18
  2665                           
  2666                           ;incstack = 0
  2667                           ;GroupDAC@request stored from wreg
  2668  003EC2  0100               	movlb	0	; () banked
  2669  003EC4  6FE8               	movwf	GroupDAC@request& (0+255),b
  2670                           
  2671                           ;MessageFunctions.c: 127: switch (request)
  2672  003EC6  D00E               	goto	l1333
  2673  003EC8                     
  2674                           ;MessageFunctions.c: 130: DacSetValue(data);
  2675  003EC8  C0E6  F08A         	movff	GroupDAC@data,DacSetValue@data
  2676  003ECC  C0E7  F08B         	movff	GroupDAC@data+1,DacSetValue@data+1
  2677  003ED0  EC34  F018         	call	_DacSetValue	;wreg free
  2678                           
  2679                           ;MessageFunctions.c: 131: break;
  2680  003ED4  0012               	return	
  2681  003ED6                     
  2682                           ;MessageFunctions.c: 134: DacReadValue(data);
  2683  003ED6  C0E6  F0C8         	movff	GroupDAC@data,DacReadValue@data
  2684  003EDA  C0E7  F0C9         	movff	GroupDAC@data+1,DacReadValue@data+1
  2685  003EDE  EC88  F013         	call	_DacReadValue	;wreg free
  2686                           
  2687                           ;MessageFunctions.c: 139: }
  2688                           
  2689                           ;MessageFunctions.c: 138: break;
  2690                           
  2691                           ;MessageFunctions.c: 137: default:
  2692                           
  2693                           ;MessageFunctions.c: 135: break;
  2694  003EE2  0012               	return	
  2695  003EE4                     l1333:
  2696  003EE4  0100               	movlb	0	; () banked
  2697  003EE6  51E8               	movf	GroupDAC@request& (0+255),w,b
  2698                           
  2699                           ; Switch size 1, requested type "space"
  2700                           ; Number of cases is 2, Range of values is 97 to 98
  2701                           ; switch strategies available:
  2702                           ; Name         Instructions Cycles
  2703                           ; simple_byte            7     4 (average)
  2704                           ;	Chosen strategy is simple_byte
  2705  003EE8  0A61               	xorlw	97	; case 97
  2706  003EEA  B4D8               	btfsc	status,2,c
  2707  003EEC  D7ED               	goto	l1334
  2708  003EEE  0A03               	xorlw	3	; case 98
  2709  003EF0  A4D8               	btfss	status,2,c
  2710  003EF2  0012               	return	
  2711  003EF4  D7F0               	goto	l1336
  2712  003EF6                     __end_of_GroupDAC:
  2713                           	opt stack 0
  2714                           tosu	equ	0xFFF
  2715                           tosh	equ	0xFFE
  2716                           tosl	equ	0xFFD
  2717                           pclath	equ	0xFFA
  2718                           tblptru	equ	0xFF8
  2719                           tblptrh	equ	0xFF7
  2720                           tblptrl	equ	0xFF6
  2721                           tablat	equ	0xFF5
  2722                           postinc0	equ	0xFEE
  2723                           wreg	equ	0xFE8
  2724                           postdec1	equ	0xFE5
  2725                           fsr1l	equ	0xFE1
  2726                           indf2	equ	0xFDF
  2727                           postinc2	equ	0xFDE
  2728                           fsr2h	equ	0xFDA
  2729                           fsr2l	equ	0xFD9
  2730                           status	equ	0xFD8
  2731                           
  2732 ;; *************** function _GroupFlashMemory *****************
  2733 ;; Defined at:
  2734 ;;		line 104 in file "MessageFunctions.c"
  2735 ;; Parameters:    Size  Location     Type
  2736 ;;  request         1    wreg     enum E12
  2737 ;;  data            2  134[BANK0 ] PTR unsigned char 
  2738 ;; Auto vars:     Size  Location     Type
  2739 ;;  request         1  136[BANK0 ] enum E12
  2740 ;; Return value:  Size  Location     Type
  2741 ;;                  1    wreg      void 
  2742 ;; Registers used:
  2743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2744 ;; Tracked objects:
  2745 ;;		On entry : 0/0
  2746 ;;		On exit  : 0/0
  2747 ;;		Unchanged: 0/0
  2748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2749 ;;      Params:         0       2       0       0       0       0       0
  2750 ;;      Locals:         0       1       0       0       0       0       0
  2751 ;;      Temps:          0       0       0       0       0       0       0
  2752 ;;      Totals:         0       3       0       0       0       0       0
  2753 ;;Total ram usage:        3 bytes
  2754 ;; Hardware stack levels used:    1
  2755 ;; Hardware stack levels required when called:    9
  2756 ;; This function calls:
  2757 ;;		_FlashEreaseMem
  2758 ;;		_FlashReadCondition
  2759 ;;		_FlashReadUart
  2760 ;; This function is called by:
  2761 ;;		_readUartMessage
  2762 ;; This function uses a non-reentrant model
  2763 ;;
  2764                           
  2765                           	psect	text4
  2766  003D40                     __ptext4:
  2767                           	opt stack 0
  2768  003D40                     _GroupFlashMemory:
  2769                           	opt stack 20
  2770                           
  2771                           ;incstack = 0
  2772                           ;GroupFlashMemory@request stored from wreg
  2773  003D40  0100               	movlb	0	; () banked
  2774  003D42  6FE8               	movwf	GroupFlashMemory@request& (0+255),b
  2775                           
  2776                           ;MessageFunctions.c: 106: switch (request)
  2777  003D44  D00D               	goto	l1324
  2778  003D46                     
  2779                           ;MessageFunctions.c: 109: FlashEreaseMem();
  2780  003D46  EC27  F01D         	call	_FlashEreaseMem	;wreg free
  2781                           
  2782                           ;MessageFunctions.c: 110: break;
  2783  003D4A  0012               	return	
  2784  003D4C                     
  2785                           ;MessageFunctions.c: 113: FlashReadCondition();
  2786  003D4C  ECA5  F010         	call	_FlashReadCondition	;wreg free
  2787                           
  2788                           ;MessageFunctions.c: 114: break;
  2789  003D50  0012               	return	
  2790  003D52                     
  2791                           ;MessageFunctions.c: 117: FlashReadUart(data);
  2792  003D52  C0E6  F087         	movff	GroupFlashMemory@data,FlashReadUart@data
  2793  003D56  C0E7  F088         	movff	GroupFlashMemory@data+1,FlashReadUart@data+1
  2794  003D5A  ECC2  F00A         	call	_FlashReadUart	;wreg free
  2795                           
  2796                           ;MessageFunctions.c: 122: }
  2797                           
  2798                           ;MessageFunctions.c: 121: break;
  2799                           
  2800                           ;MessageFunctions.c: 120: default:
  2801                           
  2802                           ;MessageFunctions.c: 118: break;
  2803  003D5E  0012               	return	
  2804  003D60                     l1324:
  2805  003D60  0100               	movlb	0	; () banked
  2806  003D62  51E8               	movf	GroupFlashMemory@request& (0+255),w,b
  2807                           
  2808                           ; Switch size 1, requested type "space"
  2809                           ; Number of cases is 3, Range of values is 81 to 83
  2810                           ; switch strategies available:
  2811                           ; Name         Instructions Cycles
  2812                           ; simple_byte           10     6 (average)
  2813                           ;	Chosen strategy is simple_byte
  2814  003D64  0A51               	xorlw	81	; case 81
  2815  003D66  B4D8               	btfsc	status,2,c
  2816  003D68  D7EE               	goto	l1325
  2817  003D6A  0A03               	xorlw	3	; case 82
  2818  003D6C  B4D8               	btfsc	status,2,c
  2819  003D6E  D7EE               	goto	l1327
  2820  003D70  0A01               	xorlw	1	; case 83
  2821  003D72  A4D8               	btfss	status,2,c
  2822  003D74  0012               	return	
  2823  003D76  D7ED               	goto	l1328
  2824  003D78                     __end_of_GroupFlashMemory:
  2825                           	opt stack 0
  2826                           tosu	equ	0xFFF
  2827                           tosh	equ	0xFFE
  2828                           tosl	equ	0xFFD
  2829                           pclath	equ	0xFFA
  2830                           tblptru	equ	0xFF8
  2831                           tblptrh	equ	0xFF7
  2832                           tblptrl	equ	0xFF6
  2833                           tablat	equ	0xFF5
  2834                           postinc0	equ	0xFEE
  2835                           wreg	equ	0xFE8
  2836                           postdec1	equ	0xFE5
  2837                           fsr1l	equ	0xFE1
  2838                           indf2	equ	0xFDF
  2839                           postinc2	equ	0xFDE
  2840                           fsr2h	equ	0xFDA
  2841                           fsr2l	equ	0xFD9
  2842                           status	equ	0xFD8
  2843                           
  2844 ;; *************** function _GroupAdc *****************
  2845 ;; Defined at:
  2846 ;;		line 51 in file "MessageFunctions.c"
  2847 ;; Parameters:    Size  Location     Type
  2848 ;;  request         1    wreg     enum E12
  2849 ;;  data            2  134[BANK0 ] PTR unsigned char 
  2850 ;; Auto vars:     Size  Location     Type
  2851 ;;  request         1  136[BANK0 ] enum E12
  2852 ;; Return value:  Size  Location     Type
  2853 ;;                  1    wreg      void 
  2854 ;; Registers used:
  2855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2856 ;; Tracked objects:
  2857 ;;		On entry : 0/0
  2858 ;;		On exit  : 0/0
  2859 ;;		Unchanged: 0/0
  2860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2861 ;;      Params:         0       2       0       0       0       0       0
  2862 ;;      Locals:         0       1       0       0       0       0       0
  2863 ;;      Temps:          0       0       0       0       0       0       0
  2864 ;;      Totals:         0       3       0       0       0       0       0
  2865 ;;Total ram usage:        3 bytes
  2866 ;; Hardware stack levels used:    1
  2867 ;; Hardware stack levels required when called:    8
  2868 ;; This function calls:
  2869 ;;		_SetChannelMode
  2870 ;; This function is called by:
  2871 ;;		_readUartMessage
  2872 ;; This function uses a non-reentrant model
  2873 ;;
  2874                           
  2875                           	psect	text5
  2876  004194                     __ptext5:
  2877                           	opt stack 0
  2878  004194                     _GroupAdc:
  2879                           	opt stack 21
  2880                           
  2881                           ;incstack = 0
  2882                           ;GroupAdc@request stored from wreg
  2883  004194  0100               	movlb	0	; () banked
  2884  004196  6FE8               	movwf	GroupAdc@request& (0+255),b
  2885                           
  2886                           ;MessageFunctions.c: 53: switch (request)
  2887  004198  D007               	goto	l1303
  2888  00419A                     
  2889                           ;MessageFunctions.c: 56: SetChannelMode(data);
  2890  00419A  C0E6  F02C         	movff	GroupAdc@data,SetChannelMode@data
  2891  00419E  C0E7  F02D         	movff	GroupAdc@data+1,SetChannelMode@data+1
  2892  0041A2  ECC7  F01F         	call	_SetChannelMode	;wreg free
  2893                           
  2894                           ;MessageFunctions.c: 61: }
  2895                           
  2896                           ;MessageFunctions.c: 60: break;
  2897                           
  2898                           ;MessageFunctions.c: 59: default:
  2899                           
  2900                           ;MessageFunctions.c: 57: break;
  2901  0041A6  0012               	return	
  2902  0041A8                     l1303:
  2903  0041A8  0100               	movlb	0	; () banked
  2904  0041AA  51E8               	movf	GroupAdc@request& (0+255),w,b
  2905                           
  2906                           ; Switch size 1, requested type "space"
  2907                           ; Number of cases is 1, Range of values is 50 to 50
  2908                           ; switch strategies available:
  2909                           ; Name         Instructions Cycles
  2910                           ; simple_byte            4     3 (average)
  2911                           ;	Chosen strategy is simple_byte
  2912  0041AC  0A32               	xorlw	50	; case 50
  2913  0041AE  A4D8               	btfss	status,2,c
  2914  0041B0  0012               	return	
  2915  0041B2  D7F3               	goto	l1304
  2916  0041B4                     __end_of_GroupAdc:
  2917                           	opt stack 0
  2918                           tosu	equ	0xFFF
  2919                           tosh	equ	0xFFE
  2920                           tosl	equ	0xFFD
  2921                           pclath	equ	0xFFA
  2922                           tblptru	equ	0xFF8
  2923                           tblptrh	equ	0xFF7
  2924                           tblptrl	equ	0xFF6
  2925                           tablat	equ	0xFF5
  2926                           postinc0	equ	0xFEE
  2927                           wreg	equ	0xFE8
  2928                           postdec1	equ	0xFE5
  2929                           fsr1l	equ	0xFE1
  2930                           indf2	equ	0xFDF
  2931                           postinc2	equ	0xFDE
  2932                           fsr2h	equ	0xFDA
  2933                           fsr2l	equ	0xFD9
  2934                           status	equ	0xFD8
  2935                           
  2936 ;; *************** function _GroupStatusAndVersion *****************
  2937 ;; Defined at:
  2938 ;;		line 34 in file "MessageFunctions.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;  request         1    wreg     enum E12
  2941 ;;  data            3  134[BANK0 ] PTR unsigned char 
  2942 ;; Auto vars:     Size  Location     Type
  2943 ;;  request         1  137[BANK0 ] enum E12
  2944 ;; Return value:  Size  Location     Type
  2945 ;;                  1    wreg      void 
  2946 ;; Registers used:
  2947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2948 ;; Tracked objects:
  2949 ;;		On entry : 0/0
  2950 ;;		On exit  : 0/0
  2951 ;;		Unchanged: 0/0
  2952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2953 ;;      Params:         0       2       0       0       0       0       0
  2954 ;;      Locals:         0       1       0       0       0       0       0
  2955 ;;      Temps:          0       0       0       0       0       0       0
  2956 ;;      Totals:         0       3       0       0       0       0       0
  2957 ;;Total ram usage:        3 bytes
  2958 ;; Hardware stack levels used:    1
  2959 ;; Hardware stack levels required when called:    7
  2960 ;; This function calls:
  2961 ;;		_GetMcuFwVersion
  2962 ;;		_GetMcuRunTime
  2963 ;; This function is called by:
  2964 ;;		_readUartMessage
  2965 ;; This function uses a non-reentrant model
  2966 ;;
  2967                           
  2968                           	psect	text6
  2969  0040E4                     __ptext6:
  2970                           	opt stack 0
  2971  0040E4                     _GroupStatusAndVersion:
  2972                           	opt stack 22
  2973                           
  2974                           ;incstack = 0
  2975                           ;GroupStatusAndVersion@request stored from wreg
  2976  0040E4  0100               	movlb	0	; () banked
  2977  0040E6  6FE9               	movwf	GroupStatusAndVersion@request& (0+255),b
  2978                           
  2979                           ;MessageFunctions.c: 36: switch (request)
  2980  0040E8  D006               	goto	l1295
  2981  0040EA                     
  2982                           ;MessageFunctions.c: 39: GetMcuFwVersion();
  2983  0040EA  EC53  F003         	call	_GetMcuFwVersion	;wreg free
  2984                           
  2985                           ;MessageFunctions.c: 40: break;
  2986  0040EE  0012               	return	
  2987  0040F0                     
  2988                           ;MessageFunctions.c: 43: GetMcuRunTime();
  2989  0040F0  EC16  F013         	call	_GetMcuRunTime	;wreg free
  2990                           
  2991                           ;MessageFunctions.c: 48: }
  2992                           
  2993                           ;MessageFunctions.c: 47: break;
  2994                           
  2995                           ;MessageFunctions.c: 46: default:
  2996                           
  2997                           ;MessageFunctions.c: 44: break;
  2998  0040F4  0012               	return	
  2999  0040F6                     l1295:
  3000  0040F6  0100               	movlb	0	; () banked
  3001  0040F8  51E9               	movf	GroupStatusAndVersion@request& (0+255),w,b
  3002                           
  3003                           ; Switch size 1, requested type "space"
  3004                           ; Number of cases is 2, Range of values is 33 to 34
  3005                           ; switch strategies available:
  3006                           ; Name         Instructions Cycles
  3007                           ; simple_byte            7     4 (average)
  3008                           ;	Chosen strategy is simple_byte
  3009  0040FA  0A21               	xorlw	33	; case 33
  3010  0040FC  B4D8               	btfsc	status,2,c
  3011  0040FE  D7F8               	goto	l1298
  3012  004100  0A03               	xorlw	3	; case 34
  3013  004102  A4D8               	btfss	status,2,c
  3014  004104  0012               	return	
  3015  004106  D7F1               	goto	l1296
  3016  004108                     __end_of_GroupStatusAndVersion:
  3017                           	opt stack 0
  3018                           tosu	equ	0xFFF
  3019                           tosh	equ	0xFFE
  3020                           tosl	equ	0xFFD
  3021                           pclath	equ	0xFFA
  3022                           tblptru	equ	0xFF8
  3023                           tblptrh	equ	0xFF7
  3024                           tblptrl	equ	0xFF6
  3025                           tablat	equ	0xFF5
  3026                           postinc0	equ	0xFEE
  3027                           wreg	equ	0xFE8
  3028                           postdec1	equ	0xFE5
  3029                           fsr1l	equ	0xFE1
  3030                           indf2	equ	0xFDF
  3031                           postinc2	equ	0xFDE
  3032                           fsr2h	equ	0xFDA
  3033                           fsr2l	equ	0xFD9
  3034                           status	equ	0xFD8
  3035                           
  3036 ;; *************** function _GroupControlMcu *****************
  3037 ;; Defined at:
  3038 ;;		line 11 in file "MessageFunctions.c"
  3039 ;; Parameters:    Size  Location     Type
  3040 ;;  request         1    wreg     enum E12
  3041 ;;  data            3  134[BANK0 ] PTR unsigned char 
  3042 ;; Auto vars:     Size  Location     Type
  3043 ;;  request         1  137[BANK0 ] enum E12
  3044 ;; Return value:  Size  Location     Type
  3045 ;;                  1    wreg      void 
  3046 ;; Registers used:
  3047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3048 ;; Tracked objects:
  3049 ;;		On entry : 0/0
  3050 ;;		On exit  : 0/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3053 ;;      Params:         0       2       0       0       0       0       0
  3054 ;;      Locals:         0       1       0       0       0       0       0
  3055 ;;      Temps:          0       0       0       0       0       0       0
  3056 ;;      Totals:         0       3       0       0       0       0       0
  3057 ;;Total ram usage:        3 bytes
  3058 ;; Hardware stack levels used:    1
  3059 ;; Hardware stack levels required when called:    8
  3060 ;; This function calls:
  3061 ;;		_ResetMcu
  3062 ;;		_testLeds
  3063 ;; This function is called by:
  3064 ;;		_readUartMessage
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           	psect	text7
  3069  003F5E                     __ptext7:
  3070                           	opt stack 0
  3071  003F5E                     _GroupControlMcu:
  3072                           	opt stack 21
  3073                           
  3074                           ;incstack = 0
  3075                           ;GroupControlMcu@request stored from wreg
  3076  003F5E  0100               	movlb	0	; () banked
  3077  003F60  6FE9               	movwf	GroupControlMcu@request& (0+255),b
  3078                           
  3079                           ;MessageFunctions.c: 13: switch (request)
  3080  003F62  D006               	goto	l1285
  3081  003F64                     
  3082                           ;MessageFunctions.c: 16: testLeds();
  3083  003F64  ECC6  F01A         	call	_testLeds	;wreg free
  3084                           
  3085                           ;MessageFunctions.c: 17: break;
  3086  003F68  0012               	return	
  3087  003F6A                     
  3088                           ;MessageFunctions.c: 20: ResetMcu();
  3089  003F6A  EC89  F021         	call	_ResetMcu	;wreg free
  3090                           
  3091                           ;MessageFunctions.c: 31: }
  3092                           
  3093                           ;MessageFunctions.c: 30: break;
  3094                           
  3095                           ;MessageFunctions.c: 29: default:
  3096                           
  3097                           ;MessageFunctions.c: 27: break;
  3098                           
  3099                           ;MessageFunctions.c: 26: case CONTROL_PA2_SET:
  3100                           
  3101                           ;MessageFunctions.c: 24: break;
  3102                           
  3103                           ;MessageFunctions.c: 23: case CONTROL_PA1_SET:
  3104                           
  3105                           ;MessageFunctions.c: 21: break;
  3106  003F6E  0012               	return	
  3107  003F70                     l1285:
  3108  003F70  0100               	movlb	0	; () banked
  3109  003F72  51E9               	movf	GroupControlMcu@request& (0+255),w,b
  3110                           
  3111                           ; Switch size 1, requested type "space"
  3112                           ; Number of cases is 4, Range of values is 17 to 20
  3113                           ; switch strategies available:
  3114                           ; Name         Instructions Cycles
  3115                           ; simple_byte           13     7 (average)
  3116                           ;	Chosen strategy is simple_byte
  3117  003F74  0A11               	xorlw	17	; case 17
  3118  003F76  B4D8               	btfsc	status,2,c
  3119  003F78  D7F8               	goto	l1288
  3120  003F7A  0A03               	xorlw	3	; case 18
  3121  003F7C  B4D8               	btfsc	status,2,c
  3122  003F7E  0012               	return	
  3123  003F80  0A01               	xorlw	1	; case 19
  3124  003F82  B4D8               	btfsc	status,2,c
  3125  003F84  0012               	return	
  3126  003F86  0A07               	xorlw	7	; case 20
  3127  003F88  A4D8               	btfss	status,2,c
  3128  003F8A  0012               	return	
  3129  003F8C  D7EB               	goto	l1286
  3130  003F8E                     __end_of_GroupControlMcu:
  3131                           	opt stack 0
  3132                           tosu	equ	0xFFF
  3133                           tosh	equ	0xFFE
  3134                           tosl	equ	0xFFD
  3135                           pclath	equ	0xFFA
  3136                           tblptru	equ	0xFF8
  3137                           tblptrh	equ	0xFF7
  3138                           tblptrl	equ	0xFF6
  3139                           tablat	equ	0xFF5
  3140                           postinc0	equ	0xFEE
  3141                           wreg	equ	0xFE8
  3142                           postdec1	equ	0xFE5
  3143                           fsr1l	equ	0xFE1
  3144                           indf2	equ	0xFDF
  3145                           postinc2	equ	0xFDE
  3146                           fsr2h	equ	0xFDA
  3147                           fsr2l	equ	0xFD9
  3148                           status	equ	0xFD8
  3149                           
  3150 ;; *************** function _GroupSynthesizers *****************
  3151 ;; Defined at:
  3152 ;;		line 63 in file "MessageFunctions.c"
  3153 ;; Parameters:    Size  Location     Type
  3154 ;;  request         1    wreg     enum E12
  3155 ;;  data            2  134[BANK0 ] PTR unsigned char 
  3156 ;; Auto vars:     Size  Location     Type
  3157 ;;  request         1  136[BANK0 ] enum E12
  3158 ;; Return value:  Size  Location     Type
  3159 ;;                  1    wreg      void 
  3160 ;; Registers used:
  3161 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3162 ;; Tracked objects:
  3163 ;;		On entry : 0/0
  3164 ;;		On exit  : 0/0
  3165 ;;		Unchanged: 0/0
  3166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3167 ;;      Params:         0       2       0       0       0       0       0
  3168 ;;      Locals:         0       1       0       0       0       0       0
  3169 ;;      Temps:          0       0       0       0       0       0       0
  3170 ;;      Totals:         0       3       0       0       0       0       0
  3171 ;;Total ram usage:        3 bytes
  3172 ;; Hardware stack levels used:    1
  3173 ;; Hardware stack levels required when called:   12
  3174 ;; This function calls:
  3175 ;;		_SetSynthOper
  3176 ;;		_SynthReadData
  3177 ;;		_UpdateSynthFreq
  3178 ;; This function is called by:
  3179 ;;		_readUartMessage
  3180 ;; This function uses a non-reentrant model
  3181 ;;
  3182                           
  3183                           	psect	text8
  3184  003226                     __ptext8:
  3185                           	opt stack 0
  3186  003226                     _GroupSynthesizers:
  3187                           	opt stack 17
  3188                           
  3189                           ;incstack = 0
  3190                           ;GroupSynthesizers@request stored from wreg
  3191  003226  0100               	movlb	0	; () banked
  3192  003228  6FE8               	movwf	GroupSynthesizers@request& (0+255),b
  3193                           
  3194                           ;MessageFunctions.c: 65: switch (request)
  3195  00322A  D028               	goto	l1310
  3196  00322C                     
  3197                           ;MessageFunctions.c: 76: UpdateSynthFreq(SYNTH_TX, data);
  3198  00322C  C0E6  F08A         	movff	GroupSynthesizers@data,UpdateSynthFreq@data
  3199  003230  C0E7  F08B         	movff	GroupSynthesizers@data+1,UpdateSynthFreq@data+1
  3200  003234  0E00               	movlw	0
  3201  003236  EC1E  F010         	call	_UpdateSynthFreq
  3202                           
  3203                           ;MessageFunctions.c: 77: break;
  3204  00323A  0012               	return	
  3205  00323C                     
  3206                           ;MessageFunctions.c: 80: UpdateSynthFreq(SYNTH_RX, data);
  3207  00323C  C0E6  F08A         	movff	GroupSynthesizers@data,UpdateSynthFreq@data
  3208  003240  C0E7  F08B         	movff	GroupSynthesizers@data+1,UpdateSynthFreq@data+1
  3209  003244  0E01               	movlw	1
  3210  003246  EC1E  F010         	call	_UpdateSynthFreq
  3211                           
  3212                           ;MessageFunctions.c: 81: break;
  3213  00324A  0012               	return	
  3214  00324C                     
  3215                           ;MessageFunctions.c: 84: SetSynthOper(SYNTH_RX);
  3216  00324C  0E01               	movlw	1
  3217  00324E  ECD9  F019         	call	_SetSynthOper
  3218                           
  3219                           ;MessageFunctions.c: 85: break;
  3220  003252  0012               	return	
  3221  003254                     
  3222                           ;MessageFunctions.c: 88: SetSynthOper(SYNTH_TX);
  3223  003254  0E00               	movlw	0
  3224  003256  ECD9  F019         	call	_SetSynthOper
  3225                           
  3226                           ;MessageFunctions.c: 89: break;
  3227  00325A  0012               	return	
  3228  00325C                     
  3229                           ;MessageFunctions.c: 92: SynthReadData(SYNTH_RX, data);
  3230  00325C  C0E6  F0C8         	movff	GroupSynthesizers@data,SynthReadData@data
  3231  003260  C0E7  F0C9         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3232  003264  0E01               	movlw	1
  3233  003266  EC86  F006         	call	_SynthReadData
  3234                           
  3235                           ;MessageFunctions.c: 93: break;
  3236  00326A  0012               	return	
  3237  00326C                     
  3238                           ;MessageFunctions.c: 96: SynthReadData(SYNTH_TX, data);
  3239  00326C  C0E6  F0C8         	movff	GroupSynthesizers@data,SynthReadData@data
  3240  003270  C0E7  F0C9         	movff	GroupSynthesizers@data+1,SynthReadData@data+1
  3241  003274  0E00               	movlw	0
  3242  003276  EC86  F006         	call	_SynthReadData
  3243                           
  3244                           ;MessageFunctions.c: 101: }
  3245                           
  3246                           ;MessageFunctions.c: 100: break;
  3247                           
  3248                           ;MessageFunctions.c: 99: default:
  3249                           
  3250                           ;MessageFunctions.c: 97: break;
  3251  00327A  0012               	return	
  3252  00327C                     l1310:
  3253  00327C  0100               	movlb	0	; () banked
  3254  00327E  51E8               	movf	GroupSynthesizers@request& (0+255),w,b
  3255                           
  3256                           ; Switch size 1, requested type "space"
  3257                           ; Number of cases is 8, Range of values is 64 to 71
  3258                           ; switch strategies available:
  3259                           ; Name         Instructions Cycles
  3260                           ; simple_byte           25    13 (average)
  3261                           ;	Chosen strategy is simple_byte
  3262  003280  0A40               	xorlw	64	; case 64
  3263  003282  B4D8               	btfsc	status,2,c
  3264  003284  0012               	return	
  3265  003286  0A01               	xorlw	1	; case 65
  3266  003288  B4D8               	btfsc	status,2,c
  3267  00328A  0012               	return	
  3268  00328C  0A03               	xorlw	3	; case 66
  3269  00328E  B4D8               	btfsc	status,2,c
  3270  003290  D7CD               	goto	l1314
  3271  003292  0A01               	xorlw	1	; case 67
  3272  003294  B4D8               	btfsc	status,2,c
  3273  003296  D7D2               	goto	l1315
  3274  003298  0A07               	xorlw	7	; case 68
  3275  00329A  B4D8               	btfsc	status,2,c
  3276  00329C  D7D7               	goto	l1316
  3277  00329E  0A01               	xorlw	1	; case 69
  3278  0032A0  B4D8               	btfsc	status,2,c
  3279  0032A2  D7D8               	goto	l1317
  3280  0032A4  0A03               	xorlw	3	; case 70
  3281  0032A6  B4D8               	btfsc	status,2,c
  3282  0032A8  D7D9               	goto	l1318
  3283  0032AA  0A01               	xorlw	1	; case 71
  3284  0032AC  A4D8               	btfss	status,2,c
  3285  0032AE  0012               	return	
  3286  0032B0  D7DD               	goto	l1319
  3287  0032B2                     __end_of_GroupSynthesizers:
  3288                           	opt stack 0
  3289                           tosu	equ	0xFFF
  3290                           tosh	equ	0xFFE
  3291                           tosl	equ	0xFFD
  3292                           pclath	equ	0xFFA
  3293                           tblptru	equ	0xFF8
  3294                           tblptrh	equ	0xFF7
  3295                           tblptrl	equ	0xFF6
  3296                           tablat	equ	0xFF5
  3297                           postinc0	equ	0xFEE
  3298                           wreg	equ	0xFE8
  3299                           postdec1	equ	0xFE5
  3300                           fsr1l	equ	0xFE1
  3301                           indf2	equ	0xFDF
  3302                           postinc2	equ	0xFDE
  3303                           fsr2h	equ	0xFDA
  3304                           fsr2l	equ	0xFD9
  3305                           status	equ	0xFD8
  3306                           
  3307 ;; *************** function _UpdateSynthFreq *****************
  3308 ;; Defined at:
  3309 ;;		line 91 in file "SyntApp.c"
  3310 ;; Parameters:    Size  Location     Type
  3311 ;;  cType           1    wreg     enum E1
  3312 ;;  data            2   42[BANK0 ] PTR unsigned char 
  3313 ;; Auto vars:     Size  Location     Type
  3314 ;;  cType           1   44[BANK0 ] enum E1
  3315 ;;  retVal          8   45[BANK0 ] struct .
  3316 ;; Return value:  Size  Location     Type
  3317 ;;                  1    wreg      void 
  3318 ;; Registers used:
  3319 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3320 ;; Tracked objects:
  3321 ;;		On entry : 0/0
  3322 ;;		On exit  : 0/0
  3323 ;;		Unchanged: 0/0
  3324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3325 ;;      Params:         0       2       0       0       0       0       0
  3326 ;;      Locals:         0       9       0       0       0       0       0
  3327 ;;      Temps:          0       0       0       0       0       0       0
  3328 ;;      Totals:         0      11       0       0       0       0       0
  3329 ;;Total ram usage:       11 bytes
  3330 ;; Hardware stack levels used:    1
  3331 ;; Hardware stack levels required when called:    8
  3332 ;; This function calls:
  3333 ;;		_GetIntFromUartData
  3334 ;;		_SWSPI_send_word
  3335 ;;		_SendAckMessage
  3336 ;;		_StoreIntInEeprom
  3337 ;; This function is called by:
  3338 ;;		_GroupSynthesizers
  3339 ;; This function uses a non-reentrant model
  3340 ;;
  3341                           
  3342                           	psect	text9
  3343  00203C                     __ptext9:
  3344                           	opt stack 0
  3345  00203C                     _UpdateSynthFreq:
  3346                           	opt stack 20
  3347                           
  3348                           ;incstack = 0
  3349                           ;UpdateSynthFreq@cType stored from wreg
  3350  00203C  0100               	movlb	0	; () banked
  3351  00203E  6F8C               	movwf	UpdateSynthFreq@cType& (0+255),b
  3352                           
  3353                           ;SyntApp.c: 93: INT_VAL retVal;
  3354                           ;SyntApp.c: 95: retVal = GetIntFromUartData(10, data);
  3355  002040  C08A  F066         	movff	UpdateSynthFreq@data,GetIntFromUartData@data
  3356  002044  C08B  F067         	movff	UpdateSynthFreq@data+1,GetIntFromUartData@data+1
  3357  002048  0E0A               	movlw	10
  3358  00204A  EC38  F00E         	call	_GetIntFromUartData
  3359  00204E  EE20  F08D         	lfsr	2,UpdateSynthFreq@retVal
  3360  002052  0E07               	movlw	7
  3361  002054                     u8421:
  3362  002054  CFEB FFDB          	movff	plusw0,plusw2
  3363  002058  06E8               	decf	wreg,f,c
  3364  00205A  E2FC               	bc	u8421
  3365                           
  3366                           ;SyntApp.c: 97: if(cType == SYNTH_TX)
  3367  00205C  0100               	movlb	0	; () banked
  3368  00205E  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3369  002060  A4D8               	btfss	status,2,c
  3370  002062  D037               	goto	l523
  3371                           
  3372                           ; BSR set to: 0
  3373                           ;SyntApp.c: 98: {
  3374                           ;SyntApp.c: 99: if(cntRegUpdateTx < 7)
  3375  002064  0E07               	movlw	7
  3376  002066  603A               	cpfslt	_cntRegUpdateTx,c
  3377  002068  D02C               	goto	l524
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;SyntApp.c: 100: {
  3381                           ;SyntApp.c: 101: SWSPI_send_word(cType, retVal.num, 3);
  3382  00206A  C08D  F029         	movff	UpdateSynthFreq@retVal,SWSPI_send_word@data
  3383  00206E  C08E  F02A         	movff	UpdateSynthFreq@retVal+1,SWSPI_send_word@data+1
  3384  002072  C08F  F02B         	movff	UpdateSynthFreq@retVal+2,SWSPI_send_word@data+2
  3385  002076  C090  F02C         	movff	UpdateSynthFreq@retVal+3,SWSPI_send_word@data+3
  3386  00207A  0E03               	movlw	3
  3387  00207C  6E2D               	movwf	SWSPI_send_word@dataSize,c
  3388  00207E  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3389  002080  ECDF  F017         	call	_SWSPI_send_word
  3390                           
  3391                           ;SyntApp.c: 102: StoreIntInEeprom(retVal.num, (0) | SYNTH_ADDRES[retVal.con], 4);
  3392  002084  C08D  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3393  002088  C08E  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3394  00208C  C08F  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3395  002090  C090  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3396  002094  0E35               	movlw	low _SYNTH_ADDRES
  3397  002096  0100               	movlb	0	; () banked
  3398  002098  2591               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3399  00209A  6EF6               	movwf	tblptrl,c
  3400  00209C  0E06               	movlw	high _SYNTH_ADDRES
  3401  00209E  2192               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3402  0020A0  6EF7               	movwf	tblptrh,c
  3403  0020A2                     	if	0	;There are less than 3 active tblptr bytes
  3404  0020A2                     	endif
  3405  0020A2  0008               	tblrd		*
  3406  0020A4  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
  3407  0020A8  0E00               	movlw	0
  3408  0020AA  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3409  0020AC  0E04               	movlw	4
  3410  0020AE  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3411  0020B0  ECBC  F01E         	call	_StoreIntInEeprom	;wreg free
  3412                           
  3413                           ;SyntApp.c: 103: cntRegUpdateTx ++;
  3414  0020B4  2A3A               	incf	_cntRegUpdateTx,f,c
  3415                           
  3416                           ;SyntApp.c: 104: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_TX_
      +                          REG);
  3417  0020B6  0E48               	movlw	72
  3418  0020B8  6E24               	movwf	SendAckMessage@inRequest,c
  3419  0020BA  0E04               	movlw	4
  3420  0020BC  EC51  F01D         	call	_SendAckMessage
  3421                           
  3422                           ;SyntApp.c: 105: }
  3423  0020C0  0012               	return	
  3424  0020C2                     l524:
  3425                           
  3426                           ;SyntApp.c: 106: else
  3427                           ;SyntApp.c: 107: {
  3428                           ;SyntApp.c: 108: cntRegUpdateTx = 0;
  3429  0020C2  0E00               	movlw	0
  3430  0020C4  6E3A               	movwf	_cntRegUpdateTx,c
  3431                           
  3432                           ;SyntApp.c: 109: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_SET);
  3433  0020C6  0E42               	movlw	66
  3434  0020C8  6E24               	movwf	SendAckMessage@inRequest,c
  3435  0020CA  0E04               	movlw	4
  3436  0020CC  EC51  F01D         	call	_SendAckMessage
  3437                           
  3438                           ;SyntApp.c: 110: }
  3439                           ;SyntApp.c: 111: }
  3440  0020D0  0012               	return	
  3441  0020D2                     l523:
  3442                           
  3443                           ;SyntApp.c: 112: else if(cType == SYNTH_RX)
  3444  0020D2  0100               	movlb	0	; () banked
  3445  0020D4  058C               	decf	UpdateSynthFreq@cType& (0+255),w,b
  3446  0020D6  A4D8               	btfss	status,2,c
  3447  0020D8  0012               	return	
  3448                           
  3449                           ; BSR set to: 0
  3450                           ;SyntApp.c: 113: {
  3451                           ;SyntApp.c: 114: if(cntRegUpdateRx < 7)
  3452  0020DA  0E07               	movlw	7
  3453  0020DC  6039               	cpfslt	_cntRegUpdateRx,c
  3454  0020DE  D02D               	goto	l528
  3455                           
  3456                           ; BSR set to: 0
  3457                           ;SyntApp.c: 115: {
  3458                           ;SyntApp.c: 116: SWSPI_send_word(cType, retVal.num, 3);
  3459  0020E0  C08D  F029         	movff	UpdateSynthFreq@retVal,SWSPI_send_word@data
  3460  0020E4  C08E  F02A         	movff	UpdateSynthFreq@retVal+1,SWSPI_send_word@data+1
  3461  0020E8  C08F  F02B         	movff	UpdateSynthFreq@retVal+2,SWSPI_send_word@data+2
  3462  0020EC  C090  F02C         	movff	UpdateSynthFreq@retVal+3,SWSPI_send_word@data+3
  3463  0020F0  0E03               	movlw	3
  3464  0020F2  6E2D               	movwf	SWSPI_send_word@dataSize,c
  3465  0020F4  518C               	movf	UpdateSynthFreq@cType& (0+255),w,b
  3466  0020F6  ECDF  F017         	call	_SWSPI_send_word
  3467                           
  3468                           ;SyntApp.c: 117: StoreIntInEeprom(retVal.num, (0x20) | SYNTH_ADDRES[retVal.con], 4);
  3469  0020FA  C08D  F021         	movff	UpdateSynthFreq@retVal,StoreIntInEeprom@data
  3470  0020FE  C08E  F022         	movff	UpdateSynthFreq@retVal+1,StoreIntInEeprom@data+1
  3471  002102  C08F  F023         	movff	UpdateSynthFreq@retVal+2,StoreIntInEeprom@data+2
  3472  002106  C090  F024         	movff	UpdateSynthFreq@retVal+3,StoreIntInEeprom@data+3
  3473  00210A  0E35               	movlw	low _SYNTH_ADDRES
  3474  00210C  0100               	movlb	0	; () banked
  3475  00210E  2591               	addwf	(UpdateSynthFreq@retVal+4)& (0+255),w,b
  3476  002110  6EF6               	movwf	tblptrl,c
  3477  002112  0E06               	movlw	high _SYNTH_ADDRES
  3478  002114  2192               	addwfc	(UpdateSynthFreq@retVal+5)& (0+255),w,b
  3479  002116  6EF7               	movwf	tblptrh,c
  3480  002118                     	if	0	;There are less than 3 active tblptr bytes
  3481  002118                     	endif
  3482  002118  0008               	tblrd		*
  3483  00211A  50F5               	movf	tablat,w,c
  3484  00211C  0920               	iorlw	32
  3485  00211E  6E25               	movwf	StoreIntInEeprom@address,c
  3486  002120  0E00               	movlw	0
  3487  002122  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  3488  002124  0E04               	movlw	4
  3489  002126  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  3490  002128  ECBC  F01E         	call	_StoreIntInEeprom	;wreg free
  3491                           
  3492                           ;SyntApp.c: 118: cntRegUpdateRx ++;
  3493  00212C  2A39               	incf	_cntRegUpdateRx,f,c
  3494                           
  3495                           ;SyntApp.c: 119: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_REQ_ANTHER_RX_
      +                          REG);
  3496  00212E  0E49               	movlw	73
  3497  002130  6E24               	movwf	SendAckMessage@inRequest,c
  3498  002132  0E04               	movlw	4
  3499  002134  EC51  F01D         	call	_SendAckMessage
  3500                           
  3501                           ;SyntApp.c: 120: }
  3502  002138  0012               	return	
  3503  00213A                     l528:
  3504                           
  3505                           ;SyntApp.c: 121: else
  3506                           ;SyntApp.c: 122: {
  3507                           ;SyntApp.c: 123: cntRegUpdateRx = 0;
  3508  00213A  0E00               	movlw	0
  3509  00213C  6E39               	movwf	_cntRegUpdateRx,c
  3510                           
  3511                           ;SyntApp.c: 124: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_SET);
  3512  00213E  0E43               	movlw	67
  3513  002140  6E24               	movwf	SendAckMessage@inRequest,c
  3514  002142  0E04               	movlw	4
  3515  002144  EC51  F01D         	call	_SendAckMessage
  3516  002148  0012               	return	
  3517  00214A                     __end_of_UpdateSynthFreq:
  3518                           	opt stack 0
  3519                           tosu	equ	0xFFF
  3520                           tosh	equ	0xFFE
  3521                           tosl	equ	0xFFD
  3522                           pclath	equ	0xFFA
  3523                           tblptru	equ	0xFF8
  3524                           tblptrh	equ	0xFF7
  3525                           tblptrl	equ	0xFF6
  3526                           tablat	equ	0xFF5
  3527                           postinc0	equ	0xFEE
  3528                           plusw0	equ	0xFEB
  3529                           wreg	equ	0xFE8
  3530                           postdec1	equ	0xFE5
  3531                           fsr1l	equ	0xFE1
  3532                           indf2	equ	0xFDF
  3533                           postinc2	equ	0xFDE
  3534                           plusw2	equ	0xFDB
  3535                           fsr2h	equ	0xFDA
  3536                           fsr2l	equ	0xFD9
  3537                           status	equ	0xFD8
  3538                           
  3539 ;; *************** function _SynthReadData *****************
  3540 ;; Defined at:
  3541 ;;		line 163 in file "SyntApp.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;  cType           1    wreg     enum E1
  3544 ;;  data            2  104[BANK0 ] PTR unsigned char 
  3545 ;; Auto vars:     Size  Location     Type
  3546 ;;  cType           1   41[BANK1 ] enum E1
  3547 ;;  data            1   22[BANK1 ] unsigned char 
  3548 ;;  TxMsg          22    0[BANK1 ] unsigned char [22]
  3549 ;;  eepromDataAr   16   25[BANK1 ] unsigned long [4]
  3550 ;;  byteNum         1   43[BANK1 ] unsigned char 
  3551 ;;  regNum          1   42[BANK1 ] unsigned char 
  3552 ;; Return value:  Size  Location     Type
  3553 ;;                  1    wreg      void 
  3554 ;; Registers used:
  3555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3556 ;; Tracked objects:
  3557 ;;		On entry : 0/0
  3558 ;;		On exit  : 0/0
  3559 ;;		Unchanged: 0/0
  3560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3561 ;;      Params:         0       2       0       0       0       0       0
  3562 ;;      Locals:         0       0      44       0       0       0       0
  3563 ;;      Temps:          0       0       0       0       0       0       0
  3564 ;;      Totals:         0       2      44       0       0       0       0
  3565 ;;Total ram usage:       46 bytes
  3566 ;; Hardware stack levels used:    1
  3567 ;; Hardware stack levels required when called:   10
  3568 ;; This function calls:
  3569 ;;		_ReadIntFromEeprom
  3570 ;;		_WriteUartMessage
  3571 ;;		_ZeroArray
  3572 ;;		_crc8
  3573 ;;		_make8
  3574 ;; This function is called by:
  3575 ;;		_GroupSynthesizers
  3576 ;; This function uses a non-reentrant model
  3577 ;;
  3578                           
  3579                           	psect	text10
  3580  000D0C                     __ptext10:
  3581                           	opt stack 0
  3582  000D0C                     _SynthReadData:
  3583                           	opt stack 18
  3584                           
  3585                           ;incstack = 0
  3586                           ;SynthReadData@cType stored from wreg
  3587  000D0C  0101               	movlb	1	; () banked
  3588  000D0E  6FDB               	movwf	SynthReadData@cType& (0+255),b
  3589                           
  3590                           ;SyntApp.c: 165: uint32_t eepromDataArray[4];
  3591                           ;SyntApp.c: 166: ZeroArray(eepromDataArray, sizeof(eepromDataArray));
  3592  000D10  0ECB               	movlw	low SynthReadData@eepromDataArray
  3593  000D12  6E20               	movwf	ZeroArray@array,c
  3594  000D14  0E01               	movlw	high SynthReadData@eepromDataArray
  3595  000D16  6E21               	movwf	ZeroArray@array+1,c
  3596  000D18  0E00               	movlw	0
  3597  000D1A  6E23               	movwf	ZeroArray@size+1,c
  3598  000D1C  0E10               	movlw	16
  3599  000D1E  6E22               	movwf	ZeroArray@size,c
  3600  000D20  ECF8  F020         	call	_ZeroArray	;wreg free
  3601                           
  3602                           ;SyntApp.c: 167: uint8_t regNum = 0, byteNum = 0;
  3603  000D24  0E00               	movlw	0
  3604  000D26  0101               	movlb	1	; () banked
  3605  000D28  6FDC               	movwf	SynthReadData@regNum& (0+255),b
  3606                           
  3607                           ; BSR set to: 1
  3608  000D2A  0E00               	movlw	0
  3609  000D2C  6FDD               	movwf	SynthReadData@byteNum& (0+255),b
  3610                           
  3611                           ;SyntApp.c: 168: char TxMsg[5 * 4 + 1 + 1];
  3612                           ;SyntApp.c: 169: ZeroArray(TxMsg, 5 * 4 + 1 + 1);
  3613  000D2E  0EB2               	movlw	low SynthReadData@TxMsg
  3614  000D30  6E20               	movwf	ZeroArray@array,c
  3615  000D32  0E01               	movlw	high SynthReadData@TxMsg
  3616  000D34  6E21               	movwf	ZeroArray@array+1,c
  3617  000D36  0E00               	movlw	0
  3618  000D38  6E23               	movwf	ZeroArray@size+1,c
  3619  000D3A  0E16               	movlw	22
  3620  000D3C  6E22               	movwf	ZeroArray@size,c
  3621  000D3E  ECF8  F020         	call	_ZeroArray	;wreg free
  3622                           
  3623                           ;SyntApp.c: 172: TxMsg[(0)] = (0x24);
  3624  000D42  0E24               	movlw	36
  3625  000D44  0101               	movlb	1	; () banked
  3626  000D46  6FB2               	movwf	SynthReadData@TxMsg& (0+255),b
  3627                           
  3628                           ; BSR set to: 1
  3629                           ;SyntApp.c: 173: TxMsg[(1)] = SYNTH_MSG;
  3630  000D48  0E04               	movlw	4
  3631  000D4A  6FB3               	movwf	(SynthReadData@TxMsg+1)& (0+255),b
  3632                           
  3633                           ; BSR set to: 1
  3634                           ;SyntApp.c: 174: TxMsg[(3)] = 5 * 4 - (0x4);
  3635  000D4C  0E10               	movlw	16
  3636  000D4E  6FB5               	movwf	(SynthReadData@TxMsg+3)& (0+255),b
  3637                           
  3638                           ; BSR set to: 1
  3639                           ;SyntApp.c: 176: if(cType == SYNTH_TX)
  3640  000D50  51DB               	movf	SynthReadData@cType& (0+255),w,b
  3641  000D52  A4D8               	btfss	status,2,c
  3642  000D54  D04F               	goto	l543
  3643                           
  3644                           ; BSR set to: 1
  3645                           ;SyntApp.c: 177: {
  3646                           ;SyntApp.c: 178: TxMsg[(2)] = SYNTH_DOWN_READ_DATA;
  3647  000D56  0E47               	movlw	71
  3648  000D58  6FB4               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  3649                           
  3650                           ; BSR set to: 1
  3651                           ;SyntApp.c: 179: eepromDataArray[0] = ReadIntFromEeprom((0) | SYNTH_ADDRES[0], 4);
  3652  000D5A  0E00               	movlw	0
  3653  000D5C  0100               	movlb	0	; () banked
  3654  000D5E  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3655  000D60  0E04               	movlw	4
  3656  000D62  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3657  000D64  0E35               	movlw	low _SYNTH_ADDRES
  3658  000D66  6EF6               	movwf	tblptrl,c
  3659  000D68                     	if	1	;There is more than 1 active tblptr byte
  3660  000D68  0E06               	movlw	high _SYNTH_ADDRES
  3661  000D6A  6EF7               	movwf	tblptrh,c
  3662  000D6C                     	endif
  3663  000D6C                     	if	0	;There are less than 3 active tblptr bytes
  3664  000D6C                     	endif
  3665  000D6C  0008               	tblrd		*
  3666  000D6E  50F5               	movf	tablat,w,c
  3667  000D70  EC8B  F00F         	call	_ReadIntFromEeprom
  3668  000D74  C0B1  F1CB         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray
  3669  000D78  C0B2  F1CC         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+1
  3670  000D7C  C0B3  F1CD         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+2
  3671  000D80  C0B4  F1CE         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+3
  3672                           
  3673                           ;SyntApp.c: 180: eepromDataArray[1] = ReadIntFromEeprom((0) | SYNTH_ADDRES[1], 4);
  3674  000D84  0E00               	movlw	0
  3675  000D86  0100               	movlb	0	; () banked
  3676  000D88  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3677  000D8A  0E04               	movlw	4
  3678  000D8C  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3679  000D8E  0E36               	movlw	low (_SYNTH_ADDRES+1)
  3680  000D90  6EF6               	movwf	tblptrl,c
  3681  000D92  0E06               	movlw	high (_SYNTH_ADDRES+1)
  3682  000D94  6EF7               	movwf	tblptrh,c
  3683  000D96                     	if	0	;tblptru may be non-zero
  3684  000D96                     	endif
  3685  000D96                     	if	0	;tblptru may be non-zero
  3686  000D96                     	endif
  3687  000D96  0008               	tblrd		*
  3688  000D98  50F5               	movf	tablat,w,c
  3689  000D9A  EC8B  F00F         	call	_ReadIntFromEeprom
  3690  000D9E  C0B1  F1CF         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+4
  3691  000DA2  C0B2  F1D0         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+5
  3692  000DA6  C0B3  F1D1         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+6
  3693  000DAA  C0B4  F1D2         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+7
  3694                           
  3695                           ;SyntApp.c: 181: eepromDataArray[2] = ReadIntFromEeprom((0) | SYNTH_ADDRES[2], 4);
  3696  000DAE  0E00               	movlw	0
  3697  000DB0  0100               	movlb	0	; () banked
  3698  000DB2  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3699  000DB4  0E04               	movlw	4
  3700  000DB6  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3701  000DB8  0E37               	movlw	low (_SYNTH_ADDRES+2)
  3702  000DBA  6EF6               	movwf	tblptrl,c
  3703  000DBC  0E06               	movlw	high (_SYNTH_ADDRES+2)
  3704  000DBE  6EF7               	movwf	tblptrh,c
  3705  000DC0                     	if	0	;tblptru may be non-zero
  3706  000DC0                     	endif
  3707  000DC0                     	if	0	;tblptru may be non-zero
  3708  000DC0                     	endif
  3709  000DC0  0008               	tblrd		*
  3710  000DC2  50F5               	movf	tablat,w,c
  3711  000DC4  EC8B  F00F         	call	_ReadIntFromEeprom
  3712  000DC8  C0B1  F1D3         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+8
  3713  000DCC  C0B2  F1D4         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+9
  3714  000DD0  C0B3  F1D5         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+10
  3715  000DD4  C0B4  F1D6         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+11
  3716                           
  3717                           ;SyntApp.c: 182: eepromDataArray[3] = ReadIntFromEeprom((0) | SYNTH_ADDRES[4], 4);
  3718  000DD8  0E00               	movlw	0
  3719  000DDA  0100               	movlb	0	; () banked
  3720  000DDC  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3721  000DDE  0E04               	movlw	4
  3722  000DE0  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3723  000DE2  0E39               	movlw	low (_SYNTH_ADDRES+4)
  3724  000DE4  6EF6               	movwf	tblptrl,c
  3725  000DE6  0E06               	movlw	high (_SYNTH_ADDRES+4)
  3726  000DE8  6EF7               	movwf	tblptrh,c
  3727  000DEA                     	if	0	;tblptru may be non-zero
  3728  000DEA                     	endif
  3729  000DEA                     	if	0	;tblptru may be non-zero
  3730  000DEA                     	endif
  3731  000DEA  0008               	tblrd		*
  3732  000DEC  50F5               	movf	tablat,w,c
  3733  000DEE  EC8B  F00F         	call	_ReadIntFromEeprom
  3734  000DF2  D056               	goto	L2
  3735  000DF4                     l543:
  3736                           
  3737                           ;SyntApp.c: 184: else if (cType == SYNTH_RX)
  3738  000DF4  0101               	movlb	1	; () banked
  3739  000DF6  05DB               	decf	SynthReadData@cType& (0+255),w,b
  3740  000DF8  A4D8               	btfss	status,2,c
  3741  000DFA  D05A               	goto	l545
  3742                           
  3743                           ; BSR set to: 1
  3744                           ;SyntApp.c: 185: {
  3745                           ;SyntApp.c: 186: TxMsg[(2)] = SYNTH_UP_READ_DATA;
  3746  000DFC  0E46               	movlw	70
  3747  000DFE  6FB4               	movwf	(SynthReadData@TxMsg+2)& (0+255),b
  3748                           
  3749                           ; BSR set to: 1
  3750                           ;SyntApp.c: 187: eepromDataArray[0] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[0], 4);
  3751  000E00  0E00               	movlw	0
  3752  000E02  0100               	movlb	0	; () banked
  3753  000E04  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3754  000E06  0E04               	movlw	4
  3755  000E08  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3756  000E0A  0E35               	movlw	low _SYNTH_ADDRES
  3757  000E0C  6EF6               	movwf	tblptrl,c
  3758  000E0E                     	if	1	;There is more than 1 active tblptr byte
  3759  000E0E  0E06               	movlw	high _SYNTH_ADDRES
  3760  000E10  6EF7               	movwf	tblptrh,c
  3761  000E12                     	endif
  3762  000E12                     	if	0	;There are less than 3 active tblptr bytes
  3763  000E12                     	endif
  3764  000E12  0008               	tblrd		*
  3765  000E14  50F5               	movf	tablat,w,c
  3766  000E16  0920               	iorlw	32
  3767  000E18  EC8B  F00F         	call	_ReadIntFromEeprom
  3768  000E1C  C0B1  F1CB         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray
  3769  000E20  C0B2  F1CC         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+1
  3770  000E24  C0B3  F1CD         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+2
  3771  000E28  C0B4  F1CE         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+3
  3772                           
  3773                           ;SyntApp.c: 188: eepromDataArray[1] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[1], 4);
  3774  000E2C  0E00               	movlw	0
  3775  000E2E  0100               	movlb	0	; () banked
  3776  000E30  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3777  000E32  0E04               	movlw	4
  3778  000E34  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3779  000E36  0E36               	movlw	low (_SYNTH_ADDRES+1)
  3780  000E38  6EF6               	movwf	tblptrl,c
  3781  000E3A  0E06               	movlw	high (_SYNTH_ADDRES+1)
  3782  000E3C  6EF7               	movwf	tblptrh,c
  3783  000E3E                     	if	0	;tblptru may be non-zero
  3784  000E3E                     	endif
  3785  000E3E                     	if	0	;tblptru may be non-zero
  3786  000E3E                     	endif
  3787  000E3E  0008               	tblrd		*
  3788  000E40  50F5               	movf	tablat,w,c
  3789  000E42  0920               	iorlw	32
  3790  000E44  EC8B  F00F         	call	_ReadIntFromEeprom
  3791  000E48  C0B1  F1CF         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+4
  3792  000E4C  C0B2  F1D0         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+5
  3793  000E50  C0B3  F1D1         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+6
  3794  000E54  C0B4  F1D2         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+7
  3795                           
  3796                           ;SyntApp.c: 189: eepromDataArray[2] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[2], 4);
  3797  000E58  0E00               	movlw	0
  3798  000E5A  0100               	movlb	0	; () banked
  3799  000E5C  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3800  000E5E  0E04               	movlw	4
  3801  000E60  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3802  000E62  0E37               	movlw	low (_SYNTH_ADDRES+2)
  3803  000E64  6EF6               	movwf	tblptrl,c
  3804  000E66  0E06               	movlw	high (_SYNTH_ADDRES+2)
  3805  000E68  6EF7               	movwf	tblptrh,c
  3806  000E6A                     	if	0	;tblptru may be non-zero
  3807  000E6A                     	endif
  3808  000E6A                     	if	0	;tblptru may be non-zero
  3809  000E6A                     	endif
  3810  000E6A  0008               	tblrd		*
  3811  000E6C  50F5               	movf	tablat,w,c
  3812  000E6E  0920               	iorlw	32
  3813  000E70  EC8B  F00F         	call	_ReadIntFromEeprom
  3814  000E74  C0B1  F1D3         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+8
  3815  000E78  C0B2  F1D4         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+9
  3816  000E7C  C0B3  F1D5         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+10
  3817  000E80  C0B4  F1D6         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+11
  3818                           
  3819                           ;SyntApp.c: 190: eepromDataArray[3] = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[4], 4);
  3820  000E84  0E00               	movlw	0
  3821  000E86  0100               	movlb	0	; () banked
  3822  000E88  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  3823  000E8A  0E04               	movlw	4
  3824  000E8C  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  3825  000E8E  0E39               	movlw	low (_SYNTH_ADDRES+4)
  3826  000E90  6EF6               	movwf	tblptrl,c
  3827  000E92  0E06               	movlw	high (_SYNTH_ADDRES+4)
  3828  000E94  6EF7               	movwf	tblptrh,c
  3829  000E96                     	if	0	;tblptru may be non-zero
  3830  000E96                     	endif
  3831  000E96                     	if	0	;tblptru may be non-zero
  3832  000E96                     	endif
  3833  000E96  0008               	tblrd		*
  3834  000E98  50F5               	movf	tablat,w,c
  3835  000E9A  0920               	iorlw	32
  3836  000E9C  EC8B  F00F         	call	_ReadIntFromEeprom
  3837  000EA0                     L2:
  3838  000EA0  C0B1  F1D7         	movff	?_ReadIntFromEeprom,SynthReadData@eepromDataArray+12
  3839  000EA4  C0B2  F1D8         	movff	?_ReadIntFromEeprom+1,SynthReadData@eepromDataArray+13
  3840  000EA8  C0B3  F1D9         	movff	?_ReadIntFromEeprom+2,SynthReadData@eepromDataArray+14
  3841  000EAC  C0B4  F1DA         	movff	?_ReadIntFromEeprom+3,SynthReadData@eepromDataArray+15
  3842  000EB0                     l545:
  3843                           
  3844                           ;SyntApp.c: 191: }
  3845                           ;SyntApp.c: 193: for(regNum = 0; regNum < 4; regNum++)
  3846  000EB0  0E00               	movlw	0
  3847  000EB2  0101               	movlb	1	; () banked
  3848  000EB4  6FDC               	movwf	SynthReadData@regNum& (0+255),b
  3849  000EB6                     l8459:
  3850                           
  3851                           ; BSR set to: 1
  3852  000EB6  0E03               	movlw	3
  3853  000EB8  65DC               	cpfsgt	SynthReadData@regNum& (0+255),b
  3854  000EBA  D001               	goto	l546
  3855  000EBC  D032               	goto	u8600
  3856  000EBE                     l546:
  3857                           
  3858                           ; BSR set to: 1
  3859                           ;SyntApp.c: 194: {
  3860                           ;SyntApp.c: 195: for(byteNum = 0; byteNum < (5); byteNum++)
  3861                           
  3862                           ; BSR set to: 1
  3863  000EBE  0E00               	movlw	0
  3864  000EC0  6FDD               	movwf	SynthReadData@byteNum& (0+255),b
  3865  000EC2                     l8465:
  3866                           
  3867                           ; BSR set to: 1
  3868  000EC2  0E04               	movlw	4
  3869  000EC4  65DD               	cpfsgt	SynthReadData@byteNum& (0+255),b
  3870  000EC6  D001               	goto	l548
  3871  000EC8  D02A               	goto	u8590
  3872  000ECA                     l548:
  3873                           
  3874                           ; BSR set to: 1
  3875                           ;SyntApp.c: 196: {
  3876                           ;SyntApp.c: 197: uint8_t data = make8(eepromDataArray[regNum], byteNum);
  3877                           
  3878                           ; BSR set to: 1
  3879  000ECA  51DC               	movf	SynthReadData@regNum& (0+255),w,b
  3880  000ECC  0D04               	mullw	4
  3881  000ECE  0ECB               	movlw	low SynthReadData@eepromDataArray
  3882  000ED0  24F3               	addwf	prodl,w,c
  3883  000ED2  6ED9               	movwf	fsr2l,c
  3884  000ED4  0E01               	movlw	high SynthReadData@eepromDataArray
  3885  000ED6  20F4               	addwfc	prodh,w,c
  3886  000ED8  6EDA               	movwf	fsr2h,c
  3887  000EDA  CFDE F018          	movff	postinc2,make8@data
  3888  000EDE  CFDE F019          	movff	postinc2,make8@data+1
  3889  000EE2  CFDE F01A          	movff	postinc2,make8@data+2
  3890  000EE6  CFDE F01B          	movff	postinc2,make8@data+3
  3891  000EEA  C1DD  F01C         	movff	SynthReadData@byteNum,make8@dataLocation
  3892  000EEE  ECF2  F01B         	call	_make8	;wreg free
  3893  000EF2  0101               	movlb	1	; () banked
  3894  000EF4  6FC8               	movwf	SynthReadData@data_981& (0+255),b
  3895                           
  3896                           ; BSR set to: 1
  3897                           ;SyntApp.c: 198: TxMsg[(0x4) + (4)*regNum + byteNum] = data;
  3898  000EF6  51DC               	movf	SynthReadData@regNum& (0+255),w,b
  3899  000EF8  0D04               	mullw	4
  3900  000EFA  51DD               	movf	SynthReadData@byteNum& (0+255),w,b
  3901  000EFC  26F3               	addwf	prodl,f,c
  3902  000EFE  0E00               	movlw	0
  3903  000F00  22F4               	addwfc	prodh,f,c
  3904  000F02  0E04               	movlw	4
  3905  000F04  26F3               	addwf	prodl,f,c
  3906  000F06  0E00               	movlw	0
  3907  000F08  22F4               	addwfc	prodh,f,c
  3908  000F0A  0EB2               	movlw	low SynthReadData@TxMsg
  3909  000F0C  24F3               	addwf	prodl,w,c
  3910  000F0E  6ED9               	movwf	fsr2l,c
  3911  000F10  0E01               	movlw	high SynthReadData@TxMsg
  3912  000F12  20F4               	addwfc	prodh,w,c
  3913  000F14  6EDA               	movwf	fsr2h,c
  3914  000F16  C1C8  FFDF         	movff	SynthReadData@data_981,indf2
  3915                           
  3916                           ; BSR set to: 1
  3917  000F1A  2BDD               	incf	SynthReadData@byteNum& (0+255),f,b
  3918  000F1C  D7D2               	goto	l8465
  3919  000F1E                     u8590:
  3920                           
  3921                           ; BSR set to: 1
  3922                           
  3923                           ; BSR set to: 1
  3924  000F1E  2BDC               	incf	SynthReadData@regNum& (0+255),f,b
  3925  000F20  D7CA               	goto	l8459
  3926  000F22                     u8600:
  3927                           
  3928                           ; BSR set to: 1
  3929                           ;SyntApp.c: 199: }
  3930                           ;SyntApp.c: 200: }
  3931                           ;SyntApp.c: 202: TxMsg[5 * 4] = cType == SYNTH_TX ? SynthTxOper : SynthRxOper;
  3932                           
  3933                           ; BSR set to: 1
  3934  000F22  51DB               	movf	SynthReadData@cType& (0+255),w,b
  3935  000F24  B4D8               	btfsc	status,2,c
  3936  000F26  D003               	goto	l551
  3937                           
  3938                           ; BSR set to: 1
  3939  000F28  C044  F1C9         	movff	_SynthRxOper,_SynthReadData$982
  3940  000F2C  D002               	goto	L1
  3941  000F2E                     l551:
  3942                           
  3943                           ; BSR set to: 1
  3944  000F2E  C045  F1C9         	movff	_SynthTxOper,_SynthReadData$982
  3945  000F32                     L1:
  3946  000F32  6BCA               	clrf	(_SynthReadData$982+1)& (0+255),b
  3947                           
  3948                           ; BSR set to: 1
  3949  000F34  C1C9  F1C6         	movff	_SynthReadData$982,SynthReadData@TxMsg+20
  3950                           
  3951                           ; BSR set to: 1
  3952                           ;SyntApp.c: 203: TxMsg[5 * 4 + 1] = crc8(TxMsg, 5 * 4 + 1);
  3953  000F38  0EB2               	movlw	low SynthReadData@TxMsg
  3954  000F3A  6E18               	movwf	crc8@dataArray,c
  3955  000F3C  0E01               	movlw	high SynthReadData@TxMsg
  3956  000F3E  6E19               	movwf	crc8@dataArray+1,c
  3957  000F40  0E00               	movlw	0
  3958  000F42  6E1B               	movwf	crc8@dataSize+1,c
  3959  000F44  0E15               	movlw	21
  3960  000F46  6E1A               	movwf	crc8@dataSize,c
  3961  000F48  EC7A  F01D         	call	_crc8	;wreg free
  3962  000F4C  0101               	movlb	1	; () banked
  3963  000F4E  6FC7               	movwf	(SynthReadData@TxMsg+21)& (0+255),b
  3964                           
  3965                           ; BSR set to: 1
  3966                           ;SyntApp.c: 204: WriteUartMessage(TxMsg, 5 * 4 + 1 + 1);
  3967  000F50  0EB2               	movlw	low SynthReadData@TxMsg
  3968  000F52  6E19               	movwf	WriteUartMessage@dataBuf,c
  3969  000F54  0E01               	movlw	high SynthReadData@TxMsg
  3970  000F56  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  3971  000F58  0E00               	movlw	0
  3972  000F5A  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  3973  000F5C  0E16               	movlw	22
  3974  000F5E  6E1B               	movwf	WriteUartMessage@dataSize,c
  3975  000F60  EC2B  F01F         	call	_WriteUartMessage	;wreg free
  3976  000F64  0012               	return		;funcret
  3977  000F66                     __end_of_SynthReadData:
  3978                           	opt stack 0
  3979                           tosu	equ	0xFFF
  3980                           tosh	equ	0xFFE
  3981                           tosl	equ	0xFFD
  3982                           pclath	equ	0xFFA
  3983                           tblptru	equ	0xFF8
  3984                           tblptrh	equ	0xFF7
  3985                           tblptrl	equ	0xFF6
  3986                           tablat	equ	0xFF5
  3987                           prodh	equ	0xFF4
  3988                           prodl	equ	0xFF3
  3989                           postinc0	equ	0xFEE
  3990                           plusw0	equ	0xFEB
  3991                           wreg	equ	0xFE8
  3992                           postdec1	equ	0xFE5
  3993                           fsr1l	equ	0xFE1
  3994                           indf2	equ	0xFDF
  3995                           postinc2	equ	0xFDE
  3996                           plusw2	equ	0xFDB
  3997                           fsr2h	equ	0xFDA
  3998                           fsr2l	equ	0xFD9
  3999                           status	equ	0xFD8
  4000                           
  4001 ;; *************** function _SetSynthOper *****************
  4002 ;; Defined at:
  4003 ;;		line 132 in file "SyntApp.c"
  4004 ;; Parameters:    Size  Location     Type
  4005 ;;  cType           1    wreg     enum E1
  4006 ;; Auto vars:     Size  Location     Type
  4007 ;;  cType           1  111[BANK0 ] enum E1
  4008 ;; Return value:  Size  Location     Type
  4009 ;;                  1    wreg      void 
  4010 ;; Registers used:
  4011 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4012 ;; Tracked objects:
  4013 ;;		On entry : 0/0
  4014 ;;		On exit  : 0/0
  4015 ;;		Unchanged: 0/0
  4016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4017 ;;      Params:         0       0       0       0       0       0       0
  4018 ;;      Locals:         0       1       0       0       0       0       0
  4019 ;;      Temps:          0       0       0       0       0       0       0
  4020 ;;      Totals:         0       1       0       0       0       0       0
  4021 ;;Total ram usage:        1 bytes
  4022 ;; Hardware stack levels used:    1
  4023 ;; Hardware stack levels required when called:   11
  4024 ;; This function calls:
  4025 ;;		_InitSynth
  4026 ;;		_SendAckMessage
  4027 ;;		_SwSpi_Set_CE_Pin
  4028 ;; This function is called by:
  4029 ;;		_GroupSynthesizers
  4030 ;; This function uses a non-reentrant model
  4031 ;;
  4032                           
  4033                           	psect	text11
  4034  0033B2                     __ptext11:
  4035                           	opt stack 0
  4036  0033B2                     _SetSynthOper:
  4037                           	opt stack 17
  4038                           
  4039                           ;incstack = 0
  4040                           ;SetSynthOper@cType stored from wreg
  4041  0033B2  0100               	movlb	0	; () banked
  4042  0033B4  6FCF               	movwf	SetSynthOper@cType& (0+255),b
  4043                           
  4044                           ;SyntApp.c: 134: if(cType == SYNTH_TX)
  4045  0033B6  0100               	movlb	0	; () banked
  4046  0033B8  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4047  0033BA  A4D8               	btfss	status,2,c
  4048  0033BC  D01A               	goto	l533
  4049                           
  4050                           ; BSR set to: 0
  4051                           ;SyntApp.c: 135: {
  4052                           ;SyntApp.c: 136: SynthTxOper = !SynthTxOper;
  4053  0033BE  5045               	movf	_SynthTxOper,w,c
  4054  0033C0  A4D8               	btfss	status,2,c
  4055  0033C2  D002               	goto	u8480
  4056  0033C4  0E01               	movlw	1
  4057  0033C6  D001               	goto	u8490
  4058  0033C8                     u8480:
  4059  0033C8  0E00               	movlw	0
  4060  0033CA                     u8490:
  4061  0033CA  6E45               	movwf	_SynthTxOper,c
  4062                           
  4063                           ;SyntApp.c: 137: if(SynthTxOper)
  4064  0033CC  5045               	movf	_SynthTxOper,w,c
  4065  0033CE  B4D8               	btfsc	status,2,c
  4066  0033D0  D004               	goto	l534
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;SyntApp.c: 138: {
  4070                           ;SyntApp.c: 139: InitSynth(cType);
  4071  0033D2  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4072  0033D4  EC4B  F005         	call	_InitSynth
  4073                           
  4074                           ;SyntApp.c: 140: }
  4075  0033D8  D006               	goto	l535
  4076  0033DA                     l534:
  4077                           
  4078                           ;SyntApp.c: 141: else
  4079                           ;SyntApp.c: 142: {
  4080                           ;SyntApp.c: 143: SwSpi_Set_CE_Pin(cType, 0);
  4081  0033DA  0E00               	movlw	0
  4082  0033DC  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  4083  0033DE  0100               	movlb	0	; () banked
  4084  0033E0  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4085  0033E2  EC64  F01E         	call	_SwSpi_Set_CE_Pin
  4086  0033E6                     l535:
  4087                           
  4088                           ;SyntApp.c: 144: }
  4089                           ;SyntApp.c: 145: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_DOWN_OPER);
  4090  0033E6  0E45               	movlw	69
  4091  0033E8  6E24               	movwf	SendAckMessage@inRequest,c
  4092  0033EA  0E04               	movlw	4
  4093  0033EC  EC51  F01D         	call	_SendAckMessage
  4094                           
  4095                           ;SyntApp.c: 146: }
  4096  0033F0  0012               	return	
  4097  0033F2                     l533:
  4098                           
  4099                           ;SyntApp.c: 147: else if (cType == SYNTH_RX)
  4100  0033F2  0100               	movlb	0	; () banked
  4101  0033F4  05CF               	decf	SetSynthOper@cType& (0+255),w,b
  4102  0033F6  A4D8               	btfss	status,2,c
  4103  0033F8  0012               	return	
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;SyntApp.c: 148: {
  4107                           ;SyntApp.c: 149: SynthRxOper = !SynthRxOper;
  4108  0033FA  5044               	movf	_SynthRxOper,w,c
  4109  0033FC  A4D8               	btfss	status,2,c
  4110  0033FE  D002               	goto	u8520
  4111  003400  0E01               	movlw	1
  4112  003402  D001               	goto	u8530
  4113  003404                     u8520:
  4114  003404  0E00               	movlw	0
  4115  003406                     u8530:
  4116  003406  6E44               	movwf	_SynthRxOper,c
  4117                           
  4118                           ;SyntApp.c: 150: if(SynthRxOper)
  4119  003408  5044               	movf	_SynthRxOper,w,c
  4120  00340A  B4D8               	btfsc	status,2,c
  4121  00340C  D004               	goto	l538
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;SyntApp.c: 151: {
  4125                           ;SyntApp.c: 152: InitSynth(cType);
  4126  00340E  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4127  003410  EC4B  F005         	call	_InitSynth
  4128                           
  4129                           ;SyntApp.c: 153: }
  4130  003414  D006               	goto	l539
  4131  003416                     l538:
  4132                           
  4133                           ;SyntApp.c: 154: else
  4134                           ;SyntApp.c: 155: {
  4135                           ;SyntApp.c: 156: SwSpi_Set_CE_Pin(cType, 0);
  4136  003416  0E00               	movlw	0
  4137  003418  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
  4138  00341A  0100               	movlb	0	; () banked
  4139  00341C  51CF               	movf	SetSynthOper@cType& (0+255),w,b
  4140  00341E  EC64  F01E         	call	_SwSpi_Set_CE_Pin
  4141  003422                     l539:
  4142                           
  4143                           ;SyntApp.c: 157: }
  4144                           ;SyntApp.c: 158: SendAckMessage((MSG_GROUPS)SYNTH_MSG, (MSG_REQUEST)SYNTH_UP_OPER);
  4145  003422  0E44               	movlw	68
  4146  003424  6E24               	movwf	SendAckMessage@inRequest,c
  4147  003426  0E04               	movlw	4
  4148  003428  EC51  F01D         	call	_SendAckMessage
  4149  00342C  0012               	return	
  4150  00342E                     __end_of_SetSynthOper:
  4151                           	opt stack 0
  4152                           tosu	equ	0xFFF
  4153                           tosh	equ	0xFFE
  4154                           tosl	equ	0xFFD
  4155                           pclath	equ	0xFFA
  4156                           tblptru	equ	0xFF8
  4157                           tblptrh	equ	0xFF7
  4158                           tblptrl	equ	0xFF6
  4159                           tablat	equ	0xFF5
  4160                           prodh	equ	0xFF4
  4161                           prodl	equ	0xFF3
  4162                           postinc0	equ	0xFEE
  4163                           plusw0	equ	0xFEB
  4164                           wreg	equ	0xFE8
  4165                           postdec1	equ	0xFE5
  4166                           fsr1l	equ	0xFE1
  4167                           indf2	equ	0xFDF
  4168                           postinc2	equ	0xFDE
  4169                           plusw2	equ	0xFDB
  4170                           fsr2h	equ	0xFDA
  4171                           fsr2l	equ	0xFD9
  4172                           status	equ	0xFD8
  4173                           
  4174 ;; *************** function _GetMcuRunTime *****************
  4175 ;; Defined at:
  4176 ;;		line 68 in file "SystemStatus.c"
  4177 ;; Parameters:    Size  Location     Type
  4178 ;;		None
  4179 ;; Auto vars:     Size  Location     Type
  4180 ;;  idx             2   13[BANK0 ] int 
  4181 ;;  TxMsg           9    0[BANK0 ] unsigned char [9]
  4182 ;;  tempRunTime     4    9[BANK0 ] unsigned long 
  4183 ;; Return value:  Size  Location     Type
  4184 ;;                  1    wreg      void 
  4185 ;; Registers used:
  4186 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4187 ;; Tracked objects:
  4188 ;;		On entry : 0/0
  4189 ;;		On exit  : 0/0
  4190 ;;		Unchanged: 0/0
  4191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4192 ;;      Params:         0       0       0       0       0       0       0
  4193 ;;      Locals:         0      15       0       0       0       0       0
  4194 ;;      Temps:          2       0       0       0       0       0       0
  4195 ;;      Totals:         2      15       0       0       0       0       0
  4196 ;;Total ram usage:       17 bytes
  4197 ;; Hardware stack levels used:    1
  4198 ;; Hardware stack levels required when called:    6
  4199 ;; This function calls:
  4200 ;;		_WriteUartMessage
  4201 ;;		___lldiv
  4202 ;;		___llmod
  4203 ;;		_crc8
  4204 ;; This function is called by:
  4205 ;;		_GroupStatusAndVersion
  4206 ;; This function uses a non-reentrant model
  4207 ;;
  4208                           
  4209                           	psect	text12
  4210  00262C                     __ptext12:
  4211                           	opt stack 0
  4212  00262C                     _GetMcuRunTime:
  4213                           	opt stack 22
  4214                           
  4215                           ;SystemStatus.c: 71: char TxMsg[(0x4) + (0x4) + 1];
  4216                           ;SystemStatus.c: 74: TxMsg[(0)] = (0x24);
  4217                           
  4218                           ;incstack = 0
  4219  00262C  0E24               	movlw	36
  4220  00262E  0100               	movlb	0	; () banked
  4221  002630  6F60               	movwf	GetMcuRunTime@TxMsg& (0+255),b
  4222                           
  4223                           ;SystemStatus.c: 75: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4224  002632  0E02               	movlw	2
  4225  002634  6F61               	movwf	(GetMcuRunTime@TxMsg+1)& (0+255),b
  4226                           
  4227                           ;SystemStatus.c: 76: TxMsg[(2)] = STATUS_MCU_RUN_TIME;
  4228  002636  0E21               	movlw	33
  4229  002638  6F62               	movwf	(GetMcuRunTime@TxMsg+2)& (0+255),b
  4230                           
  4231                           ;SystemStatus.c: 77: TxMsg[(3)] = (0x4);
  4232  00263A  0E04               	movlw	4
  4233  00263C  6F63               	movwf	(GetMcuRunTime@TxMsg+3)& (0+255),b
  4234                           
  4235                           ; BSR set to: 0
  4236                           ;SystemStatus.c: 79: uint32_t tempRunTime = mcuRunTimeIn5SecTicks;
  4237  00263E  C128  F069         	movff	_mcuRunTimeIn5SecTicks,GetMcuRunTime@tempRunTime
  4238  002642  C129  F06A         	movff	_mcuRunTimeIn5SecTicks+1,GetMcuRunTime@tempRunTime+1
  4239  002646  C12A  F06B         	movff	_mcuRunTimeIn5SecTicks+2,GetMcuRunTime@tempRunTime+2
  4240  00264A  C12B  F06C         	movff	_mcuRunTimeIn5SecTicks+3,GetMcuRunTime@tempRunTime+3
  4241                           
  4242                           ;SystemStatus.c: 82: for(int idx = 0; idx < (0x4); idx++)
  4243  00264E  0E00               	movlw	0
  4244  002650  6F6E               	movwf	(GetMcuRunTime@idx+1)& (0+255),b
  4245  002652  0E00               	movlw	0
  4246  002654  6F6D               	movwf	GetMcuRunTime@idx& (0+255),b
  4247  002656                     l8547:
  4248                           
  4249                           ; BSR set to: 0
  4250  002656  BF6E               	btfsc	(GetMcuRunTime@idx+1)& (0+255),7,b
  4251  002658  D006               	goto	l1515
  4252  00265A  516E               	movf	(GetMcuRunTime@idx+1)& (0+255),w,b
  4253  00265C  E142               	bnz	l8559
  4254  00265E  0E04               	movlw	4
  4255  002660  5D6D               	subwf	GetMcuRunTime@idx& (0+255),w,b
  4256  002662  B0D8               	btfsc	status,0,c
  4257  002664  D03E               	goto	u8650
  4258  002666                     l1515:
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;SystemStatus.c: 83: {
  4262                           ;SystemStatus.c: 84: TxMsg[(0x4) + idx] = tempRunTime % 10;
  4263                           
  4264                           ; BSR set to: 0
  4265  002666  0E04               	movlw	4
  4266  002668  256D               	addwf	GetMcuRunTime@idx& (0+255),w,b
  4267  00266A  6E25               	movwf	??_GetMcuRunTime& (0+255),c
  4268  00266C  0E00               	movlw	0
  4269  00266E  216E               	addwfc	(GetMcuRunTime@idx+1)& (0+255),w,b
  4270  002670  6E26               	movwf	(??_GetMcuRunTime+1)& (0+255),c
  4271  002672  0E60               	movlw	low GetMcuRunTime@TxMsg
  4272  002674  2425               	addwf	??_GetMcuRunTime,w,c
  4273  002676  6ED9               	movwf	fsr2l,c
  4274  002678  0E00               	movlw	high GetMcuRunTime@TxMsg
  4275  00267A  2026               	addwfc	??_GetMcuRunTime+1,w,c
  4276  00267C  6EDA               	movwf	fsr2h,c
  4277  00267E  C069  F018         	movff	GetMcuRunTime@tempRunTime,___llmod@dividend
  4278  002682  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___llmod@dividend+1
  4279  002686  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___llmod@dividend+2
  4280  00268A  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___llmod@dividend+3
  4281  00268E  0E0A               	movlw	10
  4282  002690  6E1C               	movwf	___llmod@divisor,c
  4283  002692  0E00               	movlw	0
  4284  002694  6E1D               	movwf	___llmod@divisor+1,c
  4285  002696  0E00               	movlw	0
  4286  002698  6E1E               	movwf	___llmod@divisor+2,c
  4287  00269A  0E00               	movlw	0
  4288  00269C  6E1F               	movwf	___llmod@divisor+3,c
  4289  00269E  EC2F  F01B         	call	___llmod	;wreg free
  4290  0026A2  5018               	movf	?___llmod,w,c
  4291  0026A4  6EDF               	movwf	indf2,c
  4292                           
  4293                           ;SystemStatus.c: 85: tempRunTime /= 10;
  4294  0026A6  C069  F018         	movff	GetMcuRunTime@tempRunTime,___lldiv@dividend
  4295  0026AA  C06A  F019         	movff	GetMcuRunTime@tempRunTime+1,___lldiv@dividend+1
  4296  0026AE  C06B  F01A         	movff	GetMcuRunTime@tempRunTime+2,___lldiv@dividend+2
  4297  0026B2  C06C  F01B         	movff	GetMcuRunTime@tempRunTime+3,___lldiv@dividend+3
  4298  0026B6  0E0A               	movlw	10
  4299  0026B8  6E1C               	movwf	___lldiv@divisor,c
  4300  0026BA  0E00               	movlw	0
  4301  0026BC  6E1D               	movwf	___lldiv@divisor+1,c
  4302  0026BE  0E00               	movlw	0
  4303  0026C0  6E1E               	movwf	___lldiv@divisor+2,c
  4304  0026C2  0E00               	movlw	0
  4305  0026C4  6E1F               	movwf	___lldiv@divisor+3,c
  4306  0026C6  EC59  F019         	call	___lldiv	;wreg free
  4307  0026CA  C018  F069         	movff	?___lldiv,GetMcuRunTime@tempRunTime
  4308  0026CE  C019  F06A         	movff	?___lldiv+1,GetMcuRunTime@tempRunTime+1
  4309  0026D2  C01A  F06B         	movff	?___lldiv+2,GetMcuRunTime@tempRunTime+2
  4310  0026D6  C01B  F06C         	movff	?___lldiv+3,GetMcuRunTime@tempRunTime+3
  4311  0026DA  0100               	movlb	0	; () banked
  4312  0026DC  4B6D               	infsnz	GetMcuRunTime@idx& (0+255),f,b
  4313  0026DE  2B6E               	incf	(GetMcuRunTime@idx+1)& (0+255),f,b
  4314  0026E0  D7BA               	goto	l8547
  4315  0026E2                     u8650:
  4316  0026E2                     l8559:
  4317                           
  4318                           ; BSR set to: 0
  4319                           ;SystemStatus.c: 86: }
  4320                           ;SystemStatus.c: 88: TxMsg[(0x4) + (0x4)] = crc8(TxMsg, (0x4) + (0x4));
  4321  0026E2  0E60               	movlw	low GetMcuRunTime@TxMsg
  4322  0026E4  6E18               	movwf	crc8@dataArray,c
  4323  0026E6  0E00               	movlw	high GetMcuRunTime@TxMsg
  4324  0026E8  6E19               	movwf	crc8@dataArray+1,c
  4325  0026EA  0E00               	movlw	0
  4326  0026EC  6E1B               	movwf	crc8@dataSize+1,c
  4327  0026EE  0E08               	movlw	8
  4328  0026F0  6E1A               	movwf	crc8@dataSize,c
  4329  0026F2  EC7A  F01D         	call	_crc8	;wreg free
  4330  0026F6  0100               	movlb	0	; () banked
  4331  0026F8  6F68               	movwf	(GetMcuRunTime@TxMsg+8)& (0+255),b
  4332                           
  4333                           ; BSR set to: 0
  4334                           ;SystemStatus.c: 90: WriteUartMessage(TxMsg, (0x4) + (0x4) + 1);
  4335  0026FA  0E60               	movlw	low GetMcuRunTime@TxMsg
  4336  0026FC  6E19               	movwf	WriteUartMessage@dataBuf,c
  4337  0026FE  0E00               	movlw	high GetMcuRunTime@TxMsg
  4338  002700  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  4339  002702  0E00               	movlw	0
  4340  002704  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  4341  002706  0E09               	movlw	9
  4342  002708  6E1B               	movwf	WriteUartMessage@dataSize,c
  4343  00270A  EC2B  F01F         	call	_WriteUartMessage	;wreg free
  4344  00270E  0012               	return		;funcret
  4345  002710                     __end_of_GetMcuRunTime:
  4346                           	opt stack 0
  4347                           tosu	equ	0xFFF
  4348                           tosh	equ	0xFFE
  4349                           tosl	equ	0xFFD
  4350                           pclath	equ	0xFFA
  4351                           tblptru	equ	0xFF8
  4352                           tblptrh	equ	0xFF7
  4353                           tblptrl	equ	0xFF6
  4354                           tablat	equ	0xFF5
  4355                           prodh	equ	0xFF4
  4356                           prodl	equ	0xFF3
  4357                           postinc0	equ	0xFEE
  4358                           plusw0	equ	0xFEB
  4359                           wreg	equ	0xFE8
  4360                           postdec1	equ	0xFE5
  4361                           fsr1l	equ	0xFE1
  4362                           indf2	equ	0xFDF
  4363                           postinc2	equ	0xFDE
  4364                           plusw2	equ	0xFDB
  4365                           fsr2h	equ	0xFDA
  4366                           fsr2l	equ	0xFD9
  4367                           status	equ	0xFD8
  4368                           
  4369 ;; *************** function ___lldiv *****************
  4370 ;; Defined at:
  4371 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  4372 ;; Parameters:    Size  Location     Type
  4373 ;;  dividend        4   23[COMRAM] unsigned long 
  4374 ;;  divisor         4   27[COMRAM] unsigned long 
  4375 ;; Auto vars:     Size  Location     Type
  4376 ;;  quotient        4   31[COMRAM] unsigned long 
  4377 ;;  counter         1   35[COMRAM] unsigned char 
  4378 ;; Return value:  Size  Location     Type
  4379 ;;                  4   23[COMRAM] unsigned long 
  4380 ;; Registers used:
  4381 ;;		wreg, status,2, status,0
  4382 ;; Tracked objects:
  4383 ;;		On entry : 0/0
  4384 ;;		On exit  : 0/0
  4385 ;;		Unchanged: 0/0
  4386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4387 ;;      Params:         8       0       0       0       0       0       0
  4388 ;;      Locals:         5       0       0       0       0       0       0
  4389 ;;      Temps:          0       0       0       0       0       0       0
  4390 ;;      Totals:        13       0       0       0       0       0       0
  4391 ;;Total ram usage:       13 bytes
  4392 ;; Hardware stack levels used:    1
  4393 ;; Hardware stack levels required when called:    4
  4394 ;; This function calls:
  4395 ;;		Nothing
  4396 ;; This function is called by:
  4397 ;;		_GetMcuRunTime
  4398 ;; This function uses a non-reentrant model
  4399 ;;
  4400                           
  4401                           	psect	text13
  4402  0032B2                     __ptext13:
  4403                           	opt stack 0
  4404  0032B2                     ___lldiv:
  4405                           	opt stack 23
  4406                           
  4407                           ;incstack = 0
  4408  0032B2  0E00               	movlw	0
  4409  0032B4  6E20               	movwf	___lldiv@quotient,c
  4410  0032B6  0E00               	movlw	0
  4411  0032B8  6E21               	movwf	___lldiv@quotient+1,c
  4412  0032BA  0E00               	movlw	0
  4413  0032BC  6E22               	movwf	___lldiv@quotient+2,c
  4414  0032BE  0E00               	movlw	0
  4415  0032C0  6E23               	movwf	___lldiv@quotient+3,c
  4416  0032C2  501C               	movf	___lldiv@divisor,w,c
  4417  0032C4  101D               	iorwf	___lldiv@divisor+1,w,c
  4418  0032C6  101E               	iorwf	___lldiv@divisor+2,w,c
  4419  0032C8  101F               	iorwf	___lldiv@divisor+3,w,c
  4420  0032CA  B4D8               	btfsc	status,2,c
  4421  0032CC  D02A               	goto	l1952
  4422  0032CE  0E01               	movlw	1
  4423  0032D0  6E24               	movwf	___lldiv@counter,c
  4424  0032D2  D006               	goto	l1947
  4425  0032D4  90D8               	bcf	status,0,c
  4426  0032D6  361C               	rlcf	___lldiv@divisor,f,c
  4427  0032D8  361D               	rlcf	___lldiv@divisor+1,f,c
  4428  0032DA  361E               	rlcf	___lldiv@divisor+2,f,c
  4429  0032DC  361F               	rlcf	___lldiv@divisor+3,f,c
  4430  0032DE  2A24               	incf	___lldiv@counter,f,c
  4431  0032E0                     l1947:
  4432  0032E0  AE1F               	btfss	___lldiv@divisor+3,7,c
  4433  0032E2  D7F8               	goto	l1948
  4434  0032E4                     u8170:
  4435  0032E4  90D8               	bcf	status,0,c
  4436  0032E6  3620               	rlcf	___lldiv@quotient,f,c
  4437  0032E8  3621               	rlcf	___lldiv@quotient+1,f,c
  4438  0032EA  3622               	rlcf	___lldiv@quotient+2,f,c
  4439  0032EC  3623               	rlcf	___lldiv@quotient+3,f,c
  4440  0032EE  501C               	movf	___lldiv@divisor,w,c
  4441  0032F0  5C18               	subwf	___lldiv@dividend,w,c
  4442  0032F2  501D               	movf	___lldiv@divisor+1,w,c
  4443  0032F4  5819               	subwfb	___lldiv@dividend+1,w,c
  4444  0032F6  501E               	movf	___lldiv@divisor+2,w,c
  4445  0032F8  581A               	subwfb	___lldiv@dividend+2,w,c
  4446  0032FA  501F               	movf	___lldiv@divisor+3,w,c
  4447  0032FC  581B               	subwfb	___lldiv@dividend+3,w,c
  4448  0032FE  A0D8               	btfss	status,0,c
  4449  003300  D009               	goto	l1951
  4450  003302  501C               	movf	___lldiv@divisor,w,c
  4451  003304  5E18               	subwf	___lldiv@dividend,f,c
  4452  003306  501D               	movf	___lldiv@divisor+1,w,c
  4453  003308  5A19               	subwfb	___lldiv@dividend+1,f,c
  4454  00330A  501E               	movf	___lldiv@divisor+2,w,c
  4455  00330C  5A1A               	subwfb	___lldiv@dividend+2,f,c
  4456  00330E  501F               	movf	___lldiv@divisor+3,w,c
  4457  003310  5A1B               	subwfb	___lldiv@dividend+3,f,c
  4458  003312  8020               	bsf	___lldiv@quotient,0,c
  4459  003314                     l1951:
  4460  003314  90D8               	bcf	status,0,c
  4461  003316  321F               	rrcf	___lldiv@divisor+3,f,c
  4462  003318  321E               	rrcf	___lldiv@divisor+2,f,c
  4463  00331A  321D               	rrcf	___lldiv@divisor+1,f,c
  4464  00331C  321C               	rrcf	___lldiv@divisor,f,c
  4465  00331E  2E24               	decfsz	___lldiv@counter,f,c
  4466  003320  D7E1               	goto	u8170
  4467  003322                     l1952:
  4468  003322  C020  F018         	movff	___lldiv@quotient,?___lldiv
  4469  003326  C021  F019         	movff	___lldiv@quotient+1,?___lldiv+1
  4470  00332A  C022  F01A         	movff	___lldiv@quotient+2,?___lldiv+2
  4471  00332E  C023  F01B         	movff	___lldiv@quotient+3,?___lldiv+3
  4472  003332  0012               	return		;funcret
  4473  003334                     __end_of___lldiv:
  4474                           	opt stack 0
  4475                           tosu	equ	0xFFF
  4476                           tosh	equ	0xFFE
  4477                           tosl	equ	0xFFD
  4478                           pclath	equ	0xFFA
  4479                           tblptru	equ	0xFF8
  4480                           tblptrh	equ	0xFF7
  4481                           tblptrl	equ	0xFF6
  4482                           tablat	equ	0xFF5
  4483                           prodh	equ	0xFF4
  4484                           prodl	equ	0xFF3
  4485                           postinc0	equ	0xFEE
  4486                           plusw0	equ	0xFEB
  4487                           wreg	equ	0xFE8
  4488                           postdec1	equ	0xFE5
  4489                           fsr1l	equ	0xFE1
  4490                           indf2	equ	0xFDF
  4491                           postinc2	equ	0xFDE
  4492                           plusw2	equ	0xFDB
  4493                           fsr2h	equ	0xFDA
  4494                           fsr2l	equ	0xFD9
  4495                           status	equ	0xFD8
  4496                           
  4497 ;; *************** function _GetMcuFwVersion *****************
  4498 ;; Defined at:
  4499 ;;		line 14 in file "SystemStatus.c"
  4500 ;; Parameters:    Size  Location     Type
  4501 ;;		None
  4502 ;; Auto vars:     Size  Location     Type
  4503 ;;  TxMsg          18    4[BANK0 ] unsigned char [18]
  4504 ;;  compileData     4    0[BANK0 ] unsigned long 
  4505 ;; Return value:  Size  Location     Type
  4506 ;;                  1    wreg      void 
  4507 ;; Registers used:
  4508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4509 ;; Tracked objects:
  4510 ;;		On entry : 0/0
  4511 ;;		On exit  : 0/0
  4512 ;;		Unchanged: 0/0
  4513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4514 ;;      Params:         0       0       0       0       0       0       0
  4515 ;;      Locals:         0      26       0       0       0       0       0
  4516 ;;      Temps:          7       0       0       0       0       0       0
  4517 ;;      Totals:         7      26       0       0       0       0       0
  4518 ;;Total ram usage:       33 bytes
  4519 ;; Hardware stack levels used:    1
  4520 ;; Hardware stack levels required when called:    6
  4521 ;; This function calls:
  4522 ;;		_WriteUartMessage
  4523 ;;		_ZeroArray
  4524 ;;		___wmul
  4525 ;;		_crc8
  4526 ;; This function is called by:
  4527 ;;		_GroupStatusAndVersion
  4528 ;; This function uses a non-reentrant model
  4529 ;;
  4530                           
  4531                           	psect	text14
  4532  0006A6                     __ptext14:
  4533                           	opt stack 0
  4534  0006A6                     _GetMcuFwVersion:
  4535                           	opt stack 22
  4536                           
  4537                           ;SystemStatus.c: 16: uint32_t compileData = 0x0;
  4538                           
  4539                           ;incstack = 0
  4540  0006A6  0E00               	movlw	0
  4541  0006A8  0100               	movlb	0	; () banked
  4542  0006AA  6F60               	movwf	GetMcuFwVersion@compileData& (0+255),b
  4543  0006AC  0E00               	movlw	0
  4544  0006AE  6F61               	movwf	(GetMcuFwVersion@compileData+1)& (0+255),b
  4545  0006B0  0E00               	movlw	0
  4546  0006B2  6F62               	movwf	(GetMcuFwVersion@compileData+2)& (0+255),b
  4547  0006B4  0E00               	movlw	0
  4548  0006B6  6F63               	movwf	(GetMcuFwVersion@compileData+3)& (0+255),b
  4549                           
  4550                           ; BSR set to: 0
  4551                           ;SystemStatus.c: 19: char TxMsg[(13) + (0x4) + 1];
  4552                           ;SystemStatus.c: 20: ZeroArray(TxMsg, (13) + (0x4) + 1);
  4553  0006B8  0E64               	movlw	low GetMcuFwVersion@TxMsg
  4554  0006BA  6E20               	movwf	ZeroArray@array,c
  4555  0006BC  0E00               	movlw	high GetMcuFwVersion@TxMsg
  4556  0006BE  6E21               	movwf	ZeroArray@array+1,c
  4557  0006C0  0E00               	movlw	0
  4558  0006C2  6E23               	movwf	ZeroArray@size+1,c
  4559  0006C4  0E12               	movlw	18
  4560  0006C6  6E22               	movwf	ZeroArray@size,c
  4561  0006C8  ECF8  F020         	call	_ZeroArray	;wreg free
  4562                           
  4563                           ;SystemStatus.c: 23: TxMsg[(0)] = (0x24);
  4564  0006CC  0E24               	movlw	36
  4565  0006CE  0100               	movlb	0	; () banked
  4566  0006D0  6F64               	movwf	GetMcuFwVersion@TxMsg& (0+255),b
  4567                           
  4568                           ; BSR set to: 0
  4569                           ;SystemStatus.c: 24: TxMsg[(1)] = MCU_STATUS_VERSION_MSG;
  4570  0006D2  0E02               	movlw	2
  4571  0006D4  6F65               	movwf	(GetMcuFwVersion@TxMsg+1)& (0+255),b
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;SystemStatus.c: 25: TxMsg[(2)] = STATUS_GET_MCU_FW_VERSION;
  4575  0006D6  0E22               	movlw	34
  4576  0006D8  6F66               	movwf	(GetMcuFwVersion@TxMsg+2)& (0+255),b
  4577                           
  4578                           ; BSR set to: 0
  4579                           ;SystemStatus.c: 26: TxMsg[(3)] = (13);
  4580  0006DA  0E0D               	movlw	13
  4581  0006DC  6F67               	movwf	(GetMcuFwVersion@TxMsg+3)& (0+255),b
  4582                           
  4583                           ; BSR set to: 0
  4584                           ;SystemStatus.c: 29: TxMsg[(0x4) + 0] = (( ("Mar 25 2018"[ 7] - '0') * 1000 + ("Mar 25 2
      +                          018"[ 8] - '0') * 100 + ("Mar 25 2018"[ 9] - '0') * 10 + ("Mar 25 2018"[10] - '0') ) & 0
      +                          xFF00) >> 8;
  4585  0006DE  0ED0               	movlw	208
  4586  0006E0  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4587  0006E2  0EFF               	movlw	255
  4588  0006E4  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4589  0006E6  0E97               	movlw	low (STR_1+7)
  4590  0006E8  6EF6               	movwf	tblptrl,c
  4591  0006EA  0E06               	movlw	high (STR_1+7)
  4592  0006EC  6EF7               	movwf	tblptrh,c
  4593  0006EE                     	if	0	;tblptru may be non-zero
  4594  0006EE                     	endif
  4595  0006EE                     	if	0	;tblptru may be non-zero
  4596  0006EE                     	endif
  4597  0006EE  0008               	tblrd		*
  4598  0006F0  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4599  0006F4  0ED0               	movlw	208
  4600  0006F6  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4601  0006F8  6E18               	movwf	___wmul@multiplier,c
  4602  0006FA  6A19               	clrf	___wmul@multiplier+1,c
  4603  0006FC  0EFF               	movlw	255
  4604  0006FE  2219               	addwfc	___wmul@multiplier+1,f,c
  4605  000700  0E03               	movlw	3
  4606  000702  6E1B               	movwf	___wmul@multiplicand+1,c
  4607  000704  0EE8               	movlw	232
  4608  000706  6E1A               	movwf	___wmul@multiplicand,c
  4609  000708  EC5F  F020         	call	___wmul	;wreg free
  4610  00070C  0E9A               	movlw	low (STR_1+10)
  4611  00070E  6EF6               	movwf	tblptrl,c
  4612  000710  0E06               	movlw	high (STR_1+10)
  4613  000712  6EF7               	movwf	tblptrh,c
  4614  000714                     	if	0	;tblptru may be non-zero
  4615  000714                     	endif
  4616  000714                     	if	0	;tblptru may be non-zero
  4617  000714                     	endif
  4618  000714  0008               	tblrd		*
  4619  000716  50F5               	movf	tablat,w,c
  4620  000718  6E27               	movwf	(??_GetMcuFwVersion+3)& (0+255),c
  4621  00071A  6A28               	clrf	(??_GetMcuFwVersion+4)& (0+255),c
  4622  00071C  5018               	movf	?___wmul,w,c
  4623  00071E  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4624  000720  5019               	movf	?___wmul+1,w,c
  4625  000722  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4626  000724  0E98               	movlw	low (STR_1+8)
  4627  000726  6EF6               	movwf	tblptrl,c
  4628  000728  0E06               	movlw	high (STR_1+8)
  4629  00072A  6EF7               	movwf	tblptrh,c
  4630  00072C                     	if	0	;tblptru may be non-zero
  4631  00072C                     	endif
  4632  00072C                     	if	0	;tblptru may be non-zero
  4633  00072C                     	endif
  4634  00072C  0008               	tblrd		*
  4635  00072E  CFF5 F029          	movff	tablat,??_GetMcuFwVersion+5
  4636  000732  0ED0               	movlw	208
  4637  000734  2429               	addwf	??_GetMcuFwVersion+5,w,c
  4638  000736  6E18               	movwf	___wmul@multiplier,c
  4639  000738  6A19               	clrf	___wmul@multiplier+1,c
  4640  00073A  0EFF               	movlw	255
  4641  00073C  2219               	addwfc	___wmul@multiplier+1,f,c
  4642  00073E  0E00               	movlw	0
  4643  000740  6E1B               	movwf	___wmul@multiplicand+1,c
  4644  000742  0E64               	movlw	100
  4645  000744  6E1A               	movwf	___wmul@multiplicand,c
  4646  000746  EC5F  F020         	call	___wmul	;wreg free
  4647  00074A  5018               	movf	?___wmul,w,c
  4648  00074C  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4649  00074E  5019               	movf	?___wmul+1,w,c
  4650  000750  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4651  000752  0E99               	movlw	low (STR_1+9)
  4652  000754  6EF6               	movwf	tblptrl,c
  4653  000756  0E06               	movlw	high (STR_1+9)
  4654  000758  6EF7               	movwf	tblptrh,c
  4655  00075A                     	if	0	;tblptru may be non-zero
  4656  00075A                     	endif
  4657  00075A                     	if	0	;tblptru may be non-zero
  4658  00075A                     	endif
  4659  00075A  0008               	tblrd		*
  4660  00075C  CFF5 F02A          	movff	tablat,??_GetMcuFwVersion+6
  4661  000760  0ED0               	movlw	208
  4662  000762  242A               	addwf	??_GetMcuFwVersion+6,w,c
  4663  000764  6E18               	movwf	___wmul@multiplier,c
  4664  000766  6A19               	clrf	___wmul@multiplier+1,c
  4665  000768  0EFF               	movlw	255
  4666  00076A  2219               	addwfc	___wmul@multiplier+1,f,c
  4667  00076C  0E00               	movlw	0
  4668  00076E  6E1B               	movwf	___wmul@multiplicand+1,c
  4669  000770  0E0A               	movlw	10
  4670  000772  6E1A               	movwf	___wmul@multiplicand,c
  4671  000774  EC5F  F020         	call	___wmul	;wreg free
  4672  000778  5018               	movf	?___wmul,w,c
  4673  00077A  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4674  00077C  5019               	movf	?___wmul+1,w,c
  4675  00077E  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4676  000780  5024               	movf	??_GetMcuFwVersion,w,c
  4677  000782  2627               	addwf	??_GetMcuFwVersion+3,f,c
  4678  000784  5025               	movf	??_GetMcuFwVersion+1,w,c
  4679  000786  2228               	addwfc	??_GetMcuFwVersion+4,f,c
  4680  000788  C028  F027         	movff	??_GetMcuFwVersion+4,??_GetMcuFwVersion+3
  4681  00078C  6A28               	clrf	??_GetMcuFwVersion+4,c
  4682  00078E  5027               	movf	??_GetMcuFwVersion+3,w,c
  4683  000790  0100               	movlb	0	; () banked
  4684  000792  6F68               	movwf	(GetMcuFwVersion@TxMsg+4)& (0+255),b
  4685                           
  4686                           ; BSR set to: 0
  4687                           ;SystemStatus.c: 30: TxMsg[(0x4) + 1] = ( ("Mar 25 2018"[ 7] - '0') * 1000 + ("Mar 25 20
      +                          18"[ 8] - '0') * 100 + ("Mar 25 2018"[ 9] - '0') * 10 + ("Mar 25 2018"[10] - '0') ) & 0x
      +                          FF;
  4688  000794  0E9A               	movlw	low (STR_1+10)
  4689  000796  6EF6               	movwf	tblptrl,c
  4690  000798  0E06               	movlw	high (STR_1+10)
  4691  00079A  6EF7               	movwf	tblptrh,c
  4692  00079C                     	if	0	;tblptru may be non-zero
  4693  00079C                     	endif
  4694  00079C                     	if	0	;tblptru may be non-zero
  4695  00079C                     	endif
  4696  00079C  0008               	tblrd		*
  4697  00079E  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4698  0007A2  0E99               	movlw	low (STR_1+9)
  4699  0007A4  6EF6               	movwf	tblptrl,c
  4700  0007A6  0E06               	movlw	high (STR_1+9)
  4701  0007A8  6EF7               	movwf	tblptrh,c
  4702  0007AA                     	if	0	;tblptru may be non-zero
  4703  0007AA                     	endif
  4704  0007AA                     	if	0	;tblptru may be non-zero
  4705  0007AA                     	endif
  4706  0007AA  0008               	tblrd		*
  4707  0007AC  50F5               	movf	tablat,w,c
  4708  0007AE  0FD0               	addlw	208
  4709  0007B0  0D0A               	mullw	10
  4710  0007B2  CFF3 F025          	movff	prodl,??_GetMcuFwVersion+1
  4711  0007B6  0E98               	movlw	low (STR_1+8)
  4712  0007B8  6EF6               	movwf	tblptrl,c
  4713  0007BA  0E06               	movlw	high (STR_1+8)
  4714  0007BC  6EF7               	movwf	tblptrh,c
  4715  0007BE                     	if	0	;tblptru may be non-zero
  4716  0007BE                     	endif
  4717  0007BE                     	if	0	;tblptru may be non-zero
  4718  0007BE                     	endif
  4719  0007BE  0008               	tblrd		*
  4720  0007C0  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4721  0007C4  0ED0               	movlw	208
  4722  0007C6  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4723  0007C8  6E18               	movwf	___wmul@multiplier,c
  4724  0007CA  6A19               	clrf	___wmul@multiplier+1,c
  4725  0007CC  0EFF               	movlw	255
  4726  0007CE  2219               	addwfc	___wmul@multiplier+1,f,c
  4727  0007D0  0E00               	movlw	0
  4728  0007D2  6E1B               	movwf	___wmul@multiplicand+1,c
  4729  0007D4  0E64               	movlw	100
  4730  0007D6  6E1A               	movwf	___wmul@multiplicand,c
  4731  0007D8  EC5F  F020         	call	___wmul	;wreg free
  4732  0007DC  0E97               	movlw	low (STR_1+7)
  4733  0007DE  6EF6               	movwf	tblptrl,c
  4734  0007E0  0E06               	movlw	high (STR_1+7)
  4735  0007E2  6EF7               	movwf	tblptrh,c
  4736  0007E4                     	if	0	;tblptru may be non-zero
  4737  0007E4                     	endif
  4738  0007E4                     	if	0	;tblptru may be non-zero
  4739  0007E4                     	endif
  4740  0007E4  0008               	tblrd		*
  4741  0007E6  50F5               	movf	tablat,w,c
  4742  0007E8  0FD0               	addlw	208
  4743  0007EA  0DE8               	mullw	232
  4744  0007EC  50F3               	movf	prodl,w,c
  4745  0007EE  2418               	addwf	?___wmul,w,c
  4746  0007F0  2425               	addwf	??_GetMcuFwVersion+1,w,c
  4747  0007F2  2424               	addwf	??_GetMcuFwVersion,w,c
  4748  0007F4  0FD0               	addlw	208
  4749  0007F6  0100               	movlb	0	; () banked
  4750  0007F8  6F69               	movwf	(GetMcuFwVersion@TxMsg+5)& (0+255),b
  4751                           
  4752                           ; BSR set to: 0
  4753                           ;SystemStatus.c: 33: TxMsg[(0x4) + 2] = "Mar 25 2018"[0];
  4754  0007FA  0E90               	movlw	low STR_1
  4755  0007FC  6EF6               	movwf	tblptrl,c
  4756  0007FE                     	if	1	;There is more than 1 active tblptr byte
  4757  0007FE  0E06               	movlw	high STR_1
  4758  000800  6EF7               	movwf	tblptrh,c
  4759  000802                     	endif
  4760  000802                     	if	0	;There are less than 3 active tblptr bytes
  4761  000802                     	endif
  4762  000802  0008               	tblrd		*
  4763  000804  CFF5 F06A          	movff	tablat,GetMcuFwVersion@TxMsg+6
  4764                           
  4765                           ; BSR set to: 0
  4766                           ;SystemStatus.c: 34: TxMsg[(0x4) + 3] = "Mar 25 2018"[1];
  4767  000808  0E91               	movlw	low (STR_1+1)
  4768  00080A  6EF6               	movwf	tblptrl,c
  4769  00080C  0E06               	movlw	high (STR_1+1)
  4770  00080E  6EF7               	movwf	tblptrh,c
  4771  000810                     	if	0	;tblptru may be non-zero
  4772  000810                     	endif
  4773  000810                     	if	0	;tblptru may be non-zero
  4774  000810                     	endif
  4775  000810  0008               	tblrd		*
  4776  000812  CFF5 F06B          	movff	tablat,GetMcuFwVersion@TxMsg+7
  4777                           
  4778                           ; BSR set to: 0
  4779                           ;SystemStatus.c: 35: TxMsg[(0x4) + 4] = "Mar 25 2018"[2];
  4780  000816  0E92               	movlw	low (STR_1+2)
  4781  000818  6EF6               	movwf	tblptrl,c
  4782  00081A  0E06               	movlw	high (STR_1+2)
  4783  00081C  6EF7               	movwf	tblptrh,c
  4784  00081E                     	if	0	;tblptru may be non-zero
  4785  00081E                     	endif
  4786  00081E                     	if	0	;tblptru may be non-zero
  4787  00081E                     	endif
  4788  00081E  0008               	tblrd		*
  4789  000820  CFF5 F06C          	movff	tablat,GetMcuFwVersion@TxMsg+8
  4790                           
  4791                           ; BSR set to: 0
  4792                           ;SystemStatus.c: 38: TxMsg[(0x4) + 5] = (( (("Mar 25 2018"[4] >= '0') ? ("Mar 25 2018"[4
      +                          ] - '0') * 10 : 0) + ("Mar 25 2018"[5] - '0') ) & 0xFF00) >> 8;
  4793  000824  0E94               	movlw	low (STR_1+4)
  4794  000826  6EF6               	movwf	tblptrl,c
  4795  000828  0E06               	movlw	high (STR_1+4)
  4796  00082A  6EF7               	movwf	tblptrh,c
  4797  00082C                     	if	0	;tblptru may be non-zero
  4798  00082C                     	endif
  4799  00082C                     	if	0	;tblptru may be non-zero
  4800  00082C                     	endif
  4801  00082C  0E30               	movlw	48
  4802  00082E  0008               	tblrd		*
  4803  000830  60F5               	cpfslt	tablat,c
  4804  000832  D005               	goto	l1499
  4805                           
  4806                           ; BSR set to: 0
  4807  000834  0E00               	movlw	0
  4808  000836  6F77               	movwf	(_GetMcuFwVersion$2687+1)& (0+255),b
  4809  000838  0E00               	movlw	0
  4810  00083A  6F76               	movwf	_GetMcuFwVersion$2687& (0+255),b
  4811  00083C  D017               	goto	l1501
  4812  00083E                     l1499:
  4813                           
  4814                           ; BSR set to: 0
  4815                           
  4816                           ; BSR set to: 0
  4817  00083E  0E94               	movlw	low (STR_1+4)
  4818  000840  6EF6               	movwf	tblptrl,c
  4819  000842  0E06               	movlw	high (STR_1+4)
  4820  000844  6EF7               	movwf	tblptrh,c
  4821  000846                     	if	0	;tblptru may be non-zero
  4822  000846                     	endif
  4823  000846                     	if	0	;tblptru may be non-zero
  4824  000846                     	endif
  4825  000846  0008               	tblrd		*
  4826  000848  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4827  00084C  0ED0               	movlw	208
  4828  00084E  2424               	addwf	??_GetMcuFwVersion,w,c
  4829  000850  6E18               	movwf	___wmul@multiplier,c
  4830  000852  6A19               	clrf	___wmul@multiplier+1,c
  4831  000854  0EFF               	movlw	255
  4832  000856  2219               	addwfc	___wmul@multiplier+1,f,c
  4833  000858  0E00               	movlw	0
  4834  00085A  6E1B               	movwf	___wmul@multiplicand+1,c
  4835  00085C  0E0A               	movlw	10
  4836  00085E  6E1A               	movwf	___wmul@multiplicand,c
  4837  000860  EC5F  F020         	call	___wmul	;wreg free
  4838  000864  C018  F076         	movff	?___wmul,_GetMcuFwVersion$2687
  4839  000868  C019  F077         	movff	?___wmul+1,_GetMcuFwVersion$2687+1
  4840  00086C                     l1501:
  4841  00086C  0ED0               	movlw	208
  4842  00086E  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4843  000870  0EFF               	movlw	255
  4844  000872  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4845  000874  0E95               	movlw	low (STR_1+5)
  4846  000876  6EF6               	movwf	tblptrl,c
  4847  000878  0E06               	movlw	high (STR_1+5)
  4848  00087A  6EF7               	movwf	tblptrh,c
  4849  00087C                     	if	0	;tblptru may be non-zero
  4850  00087C                     	endif
  4851  00087C                     	if	0	;tblptru may be non-zero
  4852  00087C                     	endif
  4853  00087C  0008               	tblrd		*
  4854  00087E  50F5               	movf	tablat,w,c
  4855  000880  0100               	movlb	0	; () banked
  4856  000882  2576               	addwf	_GetMcuFwVersion$2687& (0+255),w,b
  4857  000884  6E26               	movwf	(??_GetMcuFwVersion+2)& (0+255),c
  4858  000886  0E00               	movlw	0
  4859  000888  2177               	addwfc	(_GetMcuFwVersion$2687+1)& (0+255),w,b
  4860  00088A  6E27               	movwf	(??_GetMcuFwVersion+3)& (0+255),c
  4861  00088C  5024               	movf	??_GetMcuFwVersion,w,c
  4862  00088E  2626               	addwf	??_GetMcuFwVersion+2,f,c
  4863  000890  5025               	movf	??_GetMcuFwVersion+1,w,c
  4864  000892  2227               	addwfc	??_GetMcuFwVersion+3,f,c
  4865  000894  C027  F026         	movff	??_GetMcuFwVersion+3,??_GetMcuFwVersion+2
  4866  000898  6A27               	clrf	??_GetMcuFwVersion+3,c
  4867  00089A  5026               	movf	??_GetMcuFwVersion+2,w,c
  4868  00089C  6F6D               	movwf	(GetMcuFwVersion@TxMsg+9)& (0+255),b
  4869                           
  4870                           ; BSR set to: 0
  4871                           ;SystemStatus.c: 39: TxMsg[(0x4) + 6] = ( (("Mar 25 2018"[4] >= '0') ? ("Mar 25 2018"[4]
      +                           - '0') * 10 : 0) + ("Mar 25 2018"[5] - '0') ) & 0xFF;
  4872  00089E  0E94               	movlw	low (STR_1+4)
  4873  0008A0  6EF6               	movwf	tblptrl,c
  4874  0008A2  0E06               	movlw	high (STR_1+4)
  4875  0008A4  6EF7               	movwf	tblptrh,c
  4876  0008A6                     	if	0	;tblptru may be non-zero
  4877  0008A6                     	endif
  4878  0008A6                     	if	0	;tblptru may be non-zero
  4879  0008A6                     	endif
  4880  0008A6  0E30               	movlw	48
  4881  0008A8  0008               	tblrd		*
  4882  0008AA  60F5               	cpfslt	tablat,c
  4883  0008AC  D005               	goto	l1503
  4884                           
  4885                           ; BSR set to: 0
  4886  0008AE  0E00               	movlw	0
  4887  0008B0  6F79               	movwf	(_GetMcuFwVersion$2691+1)& (0+255),b
  4888  0008B2  0E00               	movlw	0
  4889  0008B4  6F78               	movwf	_GetMcuFwVersion$2691& (0+255),b
  4890  0008B6  D017               	goto	l1505
  4891  0008B8                     l1503:
  4892                           
  4893                           ; BSR set to: 0
  4894                           
  4895                           ; BSR set to: 0
  4896  0008B8  0E94               	movlw	low (STR_1+4)
  4897  0008BA  6EF6               	movwf	tblptrl,c
  4898  0008BC  0E06               	movlw	high (STR_1+4)
  4899  0008BE  6EF7               	movwf	tblptrh,c
  4900  0008C0                     	if	0	;tblptru may be non-zero
  4901  0008C0                     	endif
  4902  0008C0                     	if	0	;tblptru may be non-zero
  4903  0008C0                     	endif
  4904  0008C0  0008               	tblrd		*
  4905  0008C2  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4906  0008C6  0ED0               	movlw	208
  4907  0008C8  2424               	addwf	??_GetMcuFwVersion,w,c
  4908  0008CA  6E18               	movwf	___wmul@multiplier,c
  4909  0008CC  6A19               	clrf	___wmul@multiplier+1,c
  4910  0008CE  0EFF               	movlw	255
  4911  0008D0  2219               	addwfc	___wmul@multiplier+1,f,c
  4912  0008D2  0E00               	movlw	0
  4913  0008D4  6E1B               	movwf	___wmul@multiplicand+1,c
  4914  0008D6  0E0A               	movlw	10
  4915  0008D8  6E1A               	movwf	___wmul@multiplicand,c
  4916  0008DA  EC5F  F020         	call	___wmul	;wreg free
  4917  0008DE  C018  F078         	movff	?___wmul,_GetMcuFwVersion$2691
  4918  0008E2  C019  F079         	movff	?___wmul+1,_GetMcuFwVersion$2691+1
  4919  0008E6                     l1505:
  4920  0008E6  0E95               	movlw	low (STR_1+5)
  4921  0008E8  6EF6               	movwf	tblptrl,c
  4922  0008EA  0E06               	movlw	high (STR_1+5)
  4923  0008EC  6EF7               	movwf	tblptrh,c
  4924  0008EE                     	if	0	;tblptru may be non-zero
  4925  0008EE                     	endif
  4926  0008EE                     	if	0	;tblptru may be non-zero
  4927  0008EE                     	endif
  4928  0008EE  0008               	tblrd		*
  4929  0008F0  50F5               	movf	tablat,w,c
  4930  0008F2  0100               	movlb	0	; () banked
  4931  0008F4  2578               	addwf	_GetMcuFwVersion$2691& (0+255),w,b
  4932  0008F6  0FD0               	addlw	208
  4933  0008F8  6F6E               	movwf	(GetMcuFwVersion@TxMsg+10)& (0+255),b
  4934                           
  4935                           ; BSR set to: 0
  4936                           ;SystemStatus.c: 42: TxMsg[(0x4) + 7] = ((("11:15:39"[0] - '0') * 10 + "11:15:39"[1] - '
      +                          0') & 0xFF00) >> 8;
  4937  0008FA  0ED0               	movlw	208
  4938  0008FC  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  4939  0008FE  0EFF               	movlw	255
  4940  000900  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  4941  000902  0E9C               	movlw	low STR_18
  4942  000904  6EF6               	movwf	tblptrl,c
  4943  000906                     	if	1	;There is more than 1 active tblptr byte
  4944  000906  0E06               	movlw	high STR_18
  4945  000908  6EF7               	movwf	tblptrh,c
  4946  00090A                     	endif
  4947  00090A                     	if	0	;There are less than 3 active tblptr bytes
  4948  00090A                     	endif
  4949  00090A  0008               	tblrd		*
  4950  00090C  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  4951  000910  0ED0               	movlw	208
  4952  000912  2426               	addwf	??_GetMcuFwVersion+2,w,c
  4953  000914  6E18               	movwf	___wmul@multiplier,c
  4954  000916  6A19               	clrf	___wmul@multiplier+1,c
  4955  000918  0EFF               	movlw	255
  4956  00091A  2219               	addwfc	___wmul@multiplier+1,f,c
  4957  00091C  0E00               	movlw	0
  4958  00091E  6E1B               	movwf	___wmul@multiplicand+1,c
  4959  000920  0E0A               	movlw	10
  4960  000922  6E1A               	movwf	___wmul@multiplicand,c
  4961  000924  EC5F  F020         	call	___wmul	;wreg free
  4962  000928  0E9D               	movlw	low (STR_18+1)
  4963  00092A  6EF6               	movwf	tblptrl,c
  4964  00092C  0E06               	movlw	high (STR_18+1)
  4965  00092E  6EF7               	movwf	tblptrh,c
  4966  000930                     	if	0	;tblptru may be non-zero
  4967  000930                     	endif
  4968  000930                     	if	0	;tblptru may be non-zero
  4969  000930                     	endif
  4970  000930  0008               	tblrd		*
  4971  000932  50F5               	movf	tablat,w,c
  4972  000934  2618               	addwf	?___wmul,f,c
  4973  000936  0E00               	movlw	0
  4974  000938  2219               	addwfc	?___wmul+1,f,c
  4975  00093A  5024               	movf	??_GetMcuFwVersion,w,c
  4976  00093C  2618               	addwf	?___wmul,f,c
  4977  00093E  5025               	movf	??_GetMcuFwVersion+1,w,c
  4978  000940  2219               	addwfc	?___wmul+1,f,c
  4979  000942  C019  F018         	movff	?___wmul+1,?___wmul
  4980  000946  6A19               	clrf	?___wmul+1,c
  4981  000948  5018               	movf	?___wmul,w,c
  4982  00094A  0100               	movlb	0	; () banked
  4983  00094C  6F6F               	movwf	(GetMcuFwVersion@TxMsg+11)& (0+255),b
  4984                           
  4985                           ; BSR set to: 0
  4986                           ;SystemStatus.c: 43: TxMsg[(0x4) + 8] = (("11:15:39"[0] - '0') * 10 + "11:15:39"[1] - '0
      +                          ') & 0xFF;
  4987  00094E  0E9D               	movlw	low (STR_18+1)
  4988  000950  6EF6               	movwf	tblptrl,c
  4989  000952  0E06               	movlw	high (STR_18+1)
  4990  000954  6EF7               	movwf	tblptrh,c
  4991  000956                     	if	0	;tblptru may be non-zero
  4992  000956                     	endif
  4993  000956                     	if	0	;tblptru may be non-zero
  4994  000956                     	endif
  4995  000956  0008               	tblrd		*
  4996  000958  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  4997  00095C  0E9C               	movlw	low STR_18
  4998  00095E  6EF6               	movwf	tblptrl,c
  4999  000960                     	if	1	;There is more than 1 active tblptr byte
  5000  000960  0E06               	movlw	high STR_18
  5001  000962  6EF7               	movwf	tblptrh,c
  5002  000964                     	endif
  5003  000964                     	if	0	;There are less than 3 active tblptr bytes
  5004  000964                     	endif
  5005  000964  0008               	tblrd		*
  5006  000966  50F5               	movf	tablat,w,c
  5007  000968  0FD0               	addlw	208
  5008  00096A  0D0A               	mullw	10
  5009  00096C  50F3               	movf	prodl,w,c
  5010  00096E  2424               	addwf	??_GetMcuFwVersion,w,c
  5011  000970  0FD0               	addlw	208
  5012  000972  6F70               	movwf	(GetMcuFwVersion@TxMsg+12)& (0+255),b
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;SystemStatus.c: 46: TxMsg[(0x4) + 9] = ((("11:15:39"[3] - '0') * 10 + "11:15:39"[4] - '
      +                          0') & 0xFF00) >> 8;
  5016  000974  0ED0               	movlw	208
  5017  000976  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  5018  000978  0EFF               	movlw	255
  5019  00097A  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  5020  00097C  0E9F               	movlw	low (STR_18+3)
  5021  00097E  6EF6               	movwf	tblptrl,c
  5022  000980  0E06               	movlw	high (STR_18+3)
  5023  000982  6EF7               	movwf	tblptrh,c
  5024  000984                     	if	0	;tblptru may be non-zero
  5025  000984                     	endif
  5026  000984                     	if	0	;tblptru may be non-zero
  5027  000984                     	endif
  5028  000984  0008               	tblrd		*
  5029  000986  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  5030  00098A  0ED0               	movlw	208
  5031  00098C  2426               	addwf	??_GetMcuFwVersion+2,w,c
  5032  00098E  6E18               	movwf	___wmul@multiplier,c
  5033  000990  6A19               	clrf	___wmul@multiplier+1,c
  5034  000992  0EFF               	movlw	255
  5035  000994  2219               	addwfc	___wmul@multiplier+1,f,c
  5036  000996  0E00               	movlw	0
  5037  000998  6E1B               	movwf	___wmul@multiplicand+1,c
  5038  00099A  0E0A               	movlw	10
  5039  00099C  6E1A               	movwf	___wmul@multiplicand,c
  5040  00099E  EC5F  F020         	call	___wmul	;wreg free
  5041  0009A2  0EA0               	movlw	low (STR_18+4)
  5042  0009A4  6EF6               	movwf	tblptrl,c
  5043  0009A6  0E06               	movlw	high (STR_18+4)
  5044  0009A8  6EF7               	movwf	tblptrh,c
  5045  0009AA                     	if	0	;tblptru may be non-zero
  5046  0009AA                     	endif
  5047  0009AA                     	if	0	;tblptru may be non-zero
  5048  0009AA                     	endif
  5049  0009AA  0008               	tblrd		*
  5050  0009AC  50F5               	movf	tablat,w,c
  5051  0009AE  2618               	addwf	?___wmul,f,c
  5052  0009B0  0E00               	movlw	0
  5053  0009B2  2219               	addwfc	?___wmul+1,f,c
  5054  0009B4  5024               	movf	??_GetMcuFwVersion,w,c
  5055  0009B6  2618               	addwf	?___wmul,f,c
  5056  0009B8  5025               	movf	??_GetMcuFwVersion+1,w,c
  5057  0009BA  2219               	addwfc	?___wmul+1,f,c
  5058  0009BC  C019  F018         	movff	?___wmul+1,?___wmul
  5059  0009C0  6A19               	clrf	?___wmul+1,c
  5060  0009C2  5018               	movf	?___wmul,w,c
  5061  0009C4  0100               	movlb	0	; () banked
  5062  0009C6  6F71               	movwf	(GetMcuFwVersion@TxMsg+13)& (0+255),b
  5063                           
  5064                           ; BSR set to: 0
  5065                           ;SystemStatus.c: 47: TxMsg[(0x4) + 10] = (("11:15:39"[3] - '0') * 10 + "11:15:39"[4] - '
      +                          0') & 0xFF;
  5066  0009C8  0EA0               	movlw	low (STR_18+4)
  5067  0009CA  6EF6               	movwf	tblptrl,c
  5068  0009CC  0E06               	movlw	high (STR_18+4)
  5069  0009CE  6EF7               	movwf	tblptrh,c
  5070  0009D0                     	if	0	;tblptru may be non-zero
  5071  0009D0                     	endif
  5072  0009D0                     	if	0	;tblptru may be non-zero
  5073  0009D0                     	endif
  5074  0009D0  0008               	tblrd		*
  5075  0009D2  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  5076  0009D6  0E9F               	movlw	low (STR_18+3)
  5077  0009D8  6EF6               	movwf	tblptrl,c
  5078  0009DA  0E06               	movlw	high (STR_18+3)
  5079  0009DC  6EF7               	movwf	tblptrh,c
  5080  0009DE                     	if	0	;tblptru may be non-zero
  5081  0009DE                     	endif
  5082  0009DE                     	if	0	;tblptru may be non-zero
  5083  0009DE                     	endif
  5084  0009DE  0008               	tblrd		*
  5085  0009E0  50F5               	movf	tablat,w,c
  5086  0009E2  0FD0               	addlw	208
  5087  0009E4  0D0A               	mullw	10
  5088  0009E6  50F3               	movf	prodl,w,c
  5089  0009E8  2424               	addwf	??_GetMcuFwVersion,w,c
  5090  0009EA  0FD0               	addlw	208
  5091  0009EC  6F72               	movwf	(GetMcuFwVersion@TxMsg+14)& (0+255),b
  5092                           
  5093                           ; BSR set to: 0
  5094                           ;SystemStatus.c: 49: TxMsg[(0x4) + 11] = ((("11:15:39"[6] - '0') * 10 + "11:15:39"[7] - 
      +                          '0') & 0xFF00) >> 8;
  5095  0009EE  0ED0               	movlw	208
  5096  0009F0  6E24               	movwf	??_GetMcuFwVersion& (0+255),c
  5097  0009F2  0EFF               	movlw	255
  5098  0009F4  6E25               	movwf	(??_GetMcuFwVersion+1)& (0+255),c
  5099  0009F6  0EA2               	movlw	low (STR_18+6)
  5100  0009F8  6EF6               	movwf	tblptrl,c
  5101  0009FA  0E06               	movlw	high (STR_18+6)
  5102  0009FC  6EF7               	movwf	tblptrh,c
  5103  0009FE                     	if	0	;tblptru may be non-zero
  5104  0009FE                     	endif
  5105  0009FE                     	if	0	;tblptru may be non-zero
  5106  0009FE                     	endif
  5107  0009FE  0008               	tblrd		*
  5108  000A00  CFF5 F026          	movff	tablat,??_GetMcuFwVersion+2
  5109  000A04  0ED0               	movlw	208
  5110  000A06  2426               	addwf	??_GetMcuFwVersion+2,w,c
  5111  000A08  6E18               	movwf	___wmul@multiplier,c
  5112  000A0A  6A19               	clrf	___wmul@multiplier+1,c
  5113  000A0C  0EFF               	movlw	255
  5114  000A0E  2219               	addwfc	___wmul@multiplier+1,f,c
  5115  000A10  0E00               	movlw	0
  5116  000A12  6E1B               	movwf	___wmul@multiplicand+1,c
  5117  000A14  0E0A               	movlw	10
  5118  000A16  6E1A               	movwf	___wmul@multiplicand,c
  5119  000A18  EC5F  F020         	call	___wmul	;wreg free
  5120  000A1C  0EA3               	movlw	low (STR_18+7)
  5121  000A1E  6EF6               	movwf	tblptrl,c
  5122  000A20  0E06               	movlw	high (STR_18+7)
  5123  000A22  6EF7               	movwf	tblptrh,c
  5124  000A24                     	if	0	;tblptru may be non-zero
  5125  000A24                     	endif
  5126  000A24                     	if	0	;tblptru may be non-zero
  5127  000A24                     	endif
  5128  000A24  0008               	tblrd		*
  5129  000A26  50F5               	movf	tablat,w,c
  5130  000A28  2618               	addwf	?___wmul,f,c
  5131  000A2A  0E00               	movlw	0
  5132  000A2C  2219               	addwfc	?___wmul+1,f,c
  5133  000A2E  5024               	movf	??_GetMcuFwVersion,w,c
  5134  000A30  2618               	addwf	?___wmul,f,c
  5135  000A32  5025               	movf	??_GetMcuFwVersion+1,w,c
  5136  000A34  2219               	addwfc	?___wmul+1,f,c
  5137  000A36  C019  F018         	movff	?___wmul+1,?___wmul
  5138  000A3A  6A19               	clrf	?___wmul+1,c
  5139  000A3C  5018               	movf	?___wmul,w,c
  5140  000A3E  0100               	movlb	0	; () banked
  5141  000A40  6F73               	movwf	(GetMcuFwVersion@TxMsg+15)& (0+255),b
  5142                           
  5143                           ; BSR set to: 0
  5144                           ;SystemStatus.c: 50: TxMsg[(0x4) + 12] = (("11:15:39"[6] - '0') * 10 + "11:15:39"[7] - '
      +                          0') & 0xFF;
  5145  000A42  0EA3               	movlw	low (STR_18+7)
  5146  000A44  6EF6               	movwf	tblptrl,c
  5147  000A46  0E06               	movlw	high (STR_18+7)
  5148  000A48  6EF7               	movwf	tblptrh,c
  5149  000A4A                     	if	0	;tblptru may be non-zero
  5150  000A4A                     	endif
  5151  000A4A                     	if	0	;tblptru may be non-zero
  5152  000A4A                     	endif
  5153  000A4A  0008               	tblrd		*
  5154  000A4C  CFF5 F024          	movff	tablat,??_GetMcuFwVersion
  5155  000A50  0EA2               	movlw	low (STR_18+6)
  5156  000A52  6EF6               	movwf	tblptrl,c
  5157  000A54  0E06               	movlw	high (STR_18+6)
  5158  000A56  6EF7               	movwf	tblptrh,c
  5159  000A58                     	if	0	;tblptru may be non-zero
  5160  000A58                     	endif
  5161  000A58                     	if	0	;tblptru may be non-zero
  5162  000A58                     	endif
  5163  000A58  0008               	tblrd		*
  5164  000A5A  50F5               	movf	tablat,w,c
  5165  000A5C  0FD0               	addlw	208
  5166  000A5E  0D0A               	mullw	10
  5167  000A60  50F3               	movf	prodl,w,c
  5168  000A62  2424               	addwf	??_GetMcuFwVersion,w,c
  5169  000A64  0FD0               	addlw	208
  5170  000A66  6F74               	movwf	(GetMcuFwVersion@TxMsg+16)& (0+255),b
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;SystemStatus.c: 52: TxMsg[(13) + (0x4)] = crc8(TxMsg, (13) + (0x4));
  5174  000A68  0E64               	movlw	low GetMcuFwVersion@TxMsg
  5175  000A6A  6E18               	movwf	crc8@dataArray,c
  5176  000A6C  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5177  000A6E  6E19               	movwf	crc8@dataArray+1,c
  5178  000A70  0E00               	movlw	0
  5179  000A72  6E1B               	movwf	crc8@dataSize+1,c
  5180  000A74  0E11               	movlw	17
  5181  000A76  6E1A               	movwf	crc8@dataSize,c
  5182  000A78  EC7A  F01D         	call	_crc8	;wreg free
  5183  000A7C  0100               	movlb	0	; () banked
  5184  000A7E  6F75               	movwf	(GetMcuFwVersion@TxMsg+17)& (0+255),b
  5185                           
  5186                           ;SystemStatus.c: 54: WriteUartMessage(TxMsg, (13) + (0x4) + 1);
  5187  000A80  0E64               	movlw	low GetMcuFwVersion@TxMsg
  5188  000A82  6E19               	movwf	WriteUartMessage@dataBuf,c
  5189  000A84  0E00               	movlw	high GetMcuFwVersion@TxMsg
  5190  000A86  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5191  000A88  0E00               	movlw	0
  5192  000A8A  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5193  000A8C  0E12               	movlw	18
  5194  000A8E  6E1B               	movwf	WriteUartMessage@dataSize,c
  5195  000A90  EC2B  F01F         	call	_WriteUartMessage	;wreg free
  5196  000A94  0012               	return		;funcret
  5197  000A96                     __end_of_GetMcuFwVersion:
  5198                           	opt stack 0
  5199                           tosu	equ	0xFFF
  5200                           tosh	equ	0xFFE
  5201                           tosl	equ	0xFFD
  5202                           pclath	equ	0xFFA
  5203                           tblptru	equ	0xFF8
  5204                           tblptrh	equ	0xFF7
  5205                           tblptrl	equ	0xFF6
  5206                           tablat	equ	0xFF5
  5207                           prodh	equ	0xFF4
  5208                           prodl	equ	0xFF3
  5209                           postinc0	equ	0xFEE
  5210                           plusw0	equ	0xFEB
  5211                           wreg	equ	0xFE8
  5212                           postdec1	equ	0xFE5
  5213                           fsr1l	equ	0xFE1
  5214                           indf2	equ	0xFDF
  5215                           postinc2	equ	0xFDE
  5216                           plusw2	equ	0xFDB
  5217                           fsr2h	equ	0xFDA
  5218                           fsr2l	equ	0xFD9
  5219                           status	equ	0xFD8
  5220                           
  5221 ;; *************** function _FlashReadUart *****************
  5222 ;; Defined at:
  5223 ;;		line 63 in file "FlashApp.c"
  5224 ;; Parameters:    Size  Location     Type
  5225 ;;  data            2   39[BANK0 ] PTR unsigned char 
  5226 ;; Auto vars:     Size  Location     Type
  5227 ;;  idx             2  132[BANK0 ] int 
  5228 ;;  j               2  128[BANK0 ] int 
  5229 ;;  TxMsg          69   47[BANK0 ] unsigned char [69]
  5230 ;;  val             8  116[BANK0 ] struct .
  5231 ;;  numOfSampleT    2  130[BANK0 ] int 
  5232 ;; Return value:  Size  Location     Type
  5233 ;;                  1    wreg      void 
  5234 ;; Registers used:
  5235 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5236 ;; Tracked objects:
  5237 ;;		On entry : 0/0
  5238 ;;		On exit  : 0/0
  5239 ;;		Unchanged: 0/0
  5240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5241 ;;      Params:         0       2       0       0       0       0       0
  5242 ;;      Locals:         0      87       0       0       0       0       0
  5243 ;;      Temps:          0       6       0       0       0       0       0
  5244 ;;      Totals:         0      95       0       0       0       0       0
  5245 ;;Total ram usage:       95 bytes
  5246 ;; Hardware stack levels used:    1
  5247 ;; Hardware stack levels required when called:    8
  5248 ;; This function calls:
  5249 ;;		_FLASH_IsWriteDone
  5250 ;;		_FLASH_ReadByte
  5251 ;;		_GetIntFromUartData
  5252 ;;		_SendAckMessage
  5253 ;;		_WriteUartMessage
  5254 ;;		_ZeroArray
  5255 ;;		_crc8
  5256 ;; This function is called by:
  5257 ;;		_GroupFlashMemory
  5258 ;; This function uses a non-reentrant model
  5259 ;;
  5260                           
  5261                           	psect	text15
  5262  001584                     __ptext15:
  5263                           	opt stack 0
  5264  001584                     _FlashReadUart:
  5265                           	opt stack 20
  5266                           
  5267                           ;FlashApp.c: 69: int16_t numOfSampleToRead = 0x0;
  5268                           
  5269                           ;incstack = 0
  5270  001584  0E00               	movlw	0
  5271  001586  0100               	movlb	0	; () banked
  5272  001588  6FE3               	movwf	(FlashReadUart@numOfSampleToRead+1)& (0+255),b
  5273  00158A  0E00               	movlw	0
  5274  00158C  6FE2               	movwf	FlashReadUart@numOfSampleToRead& (0+255),b
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;FlashApp.c: 70: INT_VAL val = GetIntFromUartData(10, data);
  5278  00158E  C087  F066         	movff	FlashReadUart@data,GetIntFromUartData@data
  5279  001592  C088  F067         	movff	FlashReadUart@data+1,GetIntFromUartData@data+1
  5280  001596  0E0A               	movlw	10
  5281  001598  EC38  F00E         	call	_GetIntFromUartData
  5282  00159C  EE20  F0D4         	lfsr	2,FlashReadUart@val
  5283  0015A0  0E07               	movlw	7
  5284  0015A2                     u8301:
  5285  0015A2  CFEB FFDB          	movff	plusw0,plusw2
  5286  0015A6  06E8               	decf	wreg,f,c
  5287  0015A8  E2FC               	bc	u8301
  5288                           
  5289                           ;FlashApp.c: 72: int numOfSampleToRead = val.num;
  5290  0015AA  C0D4  F0E2         	movff	FlashReadUart@val,FlashReadUart@numOfSampleToRead
  5291  0015AE  C0D5  F0E3         	movff	FlashReadUart@val+1,FlashReadUart@numOfSampleToRead+1
  5292                           
  5293                           ;FlashApp.c: 74: char TxMsg[(64) + (0x4) + 1];
  5294                           ;FlashApp.c: 76: if (FLASH_IsWriteDone() == 0)
  5295  0015B2  EC9E  F021         	call	_FLASH_IsWriteDone	;wreg free
  5296  0015B6  0900               	iorlw	0
  5297  0015B8  B4D8               	btfsc	status,2,c
  5298  0015BA  0012               	return	
  5299                           
  5300                           ;FlashApp.c: 80: }
  5301                           ;FlashApp.c: 82: if(numOfValidateSamples == 0)
  5302                           
  5303                           ;FlashApp.c: 78: {
  5304                           ;FlashApp.c: 79: return;
  5305  0015BC  0100               	movlb	0	; () banked
  5306  0015BE  51EA               	movf	_numOfValidateSamples& (0+255),w,b
  5307  0015C0  11EB               	iorwf	(_numOfValidateSamples+1)& (0+255),w,b
  5308  0015C2  11EC               	iorwf	(_numOfValidateSamples+2)& (0+255),w,b
  5309  0015C4  11ED               	iorwf	(_numOfValidateSamples+3)& (0+255),w,b
  5310  0015C6  A4D8               	btfss	status,2,c
  5311  0015C8  D005               	goto	l326
  5312                           
  5313                           ; BSR set to: 0
  5314                           ;FlashApp.c: 83: {
  5315                           ;FlashApp.c: 84: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_NO_SAMPLE_YET)
      +                          ;
  5316  0015CA  0E55               	movlw	85
  5317  0015CC  6E24               	movwf	SendAckMessage@inRequest,c
  5318  0015CE  0E05               	movlw	5
  5319  0015D0  EC51  F01D         	call	_SendAckMessage
  5320  0015D4                     l326:
  5321                           
  5322                           ;FlashApp.c: 85: }
  5323                           ;FlashApp.c: 88: numOfSampleToRead = numOfSampleToRead >= numOfValidateSamples ? numOfVa
      +                          lidateSamples : numOfSampleToRead;
  5324  0015D4  C0E2  F089         	movff	FlashReadUart@numOfSampleToRead,??_FlashReadUart
  5325  0015D8  C0E3  F08A         	movff	FlashReadUart@numOfSampleToRead+1,??_FlashReadUart+1
  5326  0015DC  0E00               	movlw	0
  5327  0015DE  0100               	movlb	0	; () banked
  5328  0015E0  BF8A               	btfsc	(??_FlashReadUart+1)& (0+255),7,b
  5329  0015E2  0EFF               	movlw	255
  5330  0015E4  6F8B               	movwf	(??_FlashReadUart+2)& (0+255),b
  5331  0015E6  6F8C               	movwf	(??_FlashReadUart+3)& (0+255),b
  5332  0015E8  51EA               	movf	_numOfValidateSamples& (0+255),w,b
  5333  0015EA  5D89               	subwf	??_FlashReadUart& (0+255),w,b
  5334  0015EC  51EB               	movf	(_numOfValidateSamples+1)& (0+255),w,b
  5335  0015EE  598A               	subwfb	(??_FlashReadUart+1)& (0+255),w,b
  5336  0015F0  51EC               	movf	(_numOfValidateSamples+2)& (0+255),w,b
  5337  0015F2  598B               	subwfb	(??_FlashReadUart+2)& (0+255),w,b
  5338  0015F4  51ED               	movf	(_numOfValidateSamples+3)& (0+255),w,b
  5339  0015F6  598C               	subwfb	(??_FlashReadUart+3)& (0+255),w,b
  5340  0015F8  B0D8               	btfsc	status,0,c
  5341  0015FA  D00A               	goto	l328
  5342                           
  5343                           ; BSR set to: 0
  5344  0015FC  C0E2  F0DC         	movff	FlashReadUart@numOfSampleToRead,_FlashReadUart$605
  5345  001600  C0E3  F0DD         	movff	FlashReadUart@numOfSampleToRead+1,_FlashReadUart$605+1
  5346  001604  0E00               	movlw	0
  5347  001606  BFDD               	btfsc	(_FlashReadUart$605+1)& (0+255),7,b
  5348  001608  0EFF               	movlw	-1
  5349  00160A  6FDE               	movwf	(_FlashReadUart$605+2)& (0+255),b
  5350  00160C  6FDF               	movwf	(_FlashReadUart$605+3)& (0+255),b
  5351  00160E  D008               	goto	l330
  5352  001610                     l328:
  5353                           
  5354                           ; BSR set to: 0
  5355  001610  C0EA  F0DC         	movff	_numOfValidateSamples,_FlashReadUart$605
  5356  001614  C0EB  F0DD         	movff	_numOfValidateSamples+1,_FlashReadUart$605+1
  5357  001618  C0EC  F0DE         	movff	_numOfValidateSamples+2,_FlashReadUart$605+2
  5358  00161C  C0ED  F0DF         	movff	_numOfValidateSamples+3,_FlashReadUart$605+3
  5359  001620                     l330:
  5360                           
  5361                           ; BSR set to: 0
  5362  001620  C0DC  F0E2         	movff	_FlashReadUart$605,FlashReadUart@numOfSampleToRead
  5363  001624  C0DD  F0E3         	movff	_FlashReadUart$605+1,FlashReadUart@numOfSampleToRead+1
  5364                           
  5365                           ;FlashApp.c: 91: readAddress = writeAddress;
  5366  001628  C03E  F1F1         	movff	_writeAddress,_readAddress
  5367  00162C  C03F  F1F2         	movff	_writeAddress+1,_readAddress+1
  5368  001630  C040  F1F3         	movff	_writeAddress+2,_readAddress+2
  5369  001634  C041  F1F4         	movff	_writeAddress+3,_readAddress+3
  5370                           
  5371                           ; BSR set to: 0
  5372                           ;FlashApp.c: 93: for (int j=0; j<numOfSampleToRead; j++)
  5373  001638  0E00               	movlw	0
  5374  00163A  6FE1               	movwf	(FlashReadUart@j+1)& (0+255),b
  5375  00163C  0E00               	movlw	0
  5376  00163E  6FE0               	movwf	FlashReadUart@j& (0+255),b
  5377  001640  D08A               	goto	l331
  5378  001642                     
  5379                           ; BSR set to: 0
  5380                           ;FlashApp.c: 94: {
  5381                           ;FlashApp.c: 96: if(readAddress > 0)
  5382                           
  5383                           ; BSR set to: 0
  5384  001642  0101               	movlb	1	; () banked
  5385  001644  51F1               	movf	_readAddress& (0+255),w,b
  5386  001646  11F2               	iorwf	(_readAddress+1)& (0+255),w,b
  5387  001648  11F3               	iorwf	(_readAddress+2)& (0+255),w,b
  5388  00164A  11F4               	iorwf	(_readAddress+3)& (0+255),w,b
  5389  00164C  B4D8               	btfsc	status,2,c
  5390  00164E  D007               	goto	l333
  5391                           
  5392                           ; BSR set to: 1
  5393                           ;FlashApp.c: 97: {
  5394                           ;FlashApp.c: 98: readAddress -= (64);
  5395  001650  0E40               	movlw	64
  5396  001652  5FF1               	subwf	_readAddress& (0+255),f,b
  5397  001654  0E00               	movlw	0
  5398  001656  5BF2               	subwfb	(_readAddress+1)& (0+255),f,b
  5399  001658  5BF3               	subwfb	(_readAddress+2)& (0+255),f,b
  5400  00165A  5BF4               	subwfb	(_readAddress+3)& (0+255),f,b
  5401                           
  5402                           ;FlashApp.c: 99: }
  5403  00165C  D008               	goto	l334
  5404  00165E                     l333:
  5405                           
  5406                           ; BSR set to: 1
  5407                           ;FlashApp.c: 100: else
  5408                           ;FlashApp.c: 101: {
  5409                           ;FlashApp.c: 102: readAddress = 0x7FF0 - (64);
  5410                           
  5411                           ; BSR set to: 1
  5412  00165E  0EB0               	movlw	176
  5413  001660  6FF1               	movwf	_readAddress& (0+255),b
  5414  001662  0E7F               	movlw	127
  5415  001664  6FF2               	movwf	(_readAddress+1)& (0+255),b
  5416  001666  0E00               	movlw	0
  5417  001668  6FF3               	movwf	(_readAddress+2)& (0+255),b
  5418  00166A  0E00               	movlw	0
  5419  00166C  6FF4               	movwf	(_readAddress+3)& (0+255),b
  5420  00166E                     l334:
  5421                           
  5422                           ; BSR set to: 1
  5423                           ;FlashApp.c: 103: }
  5424                           ;FlashApp.c: 106: ZeroArray(TxMsg, (64) + (0x4) + 1);
  5425                           
  5426                           ; BSR set to: 1
  5427  00166E  0E8F               	movlw	low FlashReadUart@TxMsg
  5428  001670  6E20               	movwf	ZeroArray@array,c
  5429  001672  0E00               	movlw	high FlashReadUart@TxMsg
  5430  001674  6E21               	movwf	ZeroArray@array+1,c
  5431  001676  0E00               	movlw	0
  5432  001678  6E23               	movwf	ZeroArray@size+1,c
  5433  00167A  0E45               	movlw	69
  5434  00167C  6E22               	movwf	ZeroArray@size,c
  5435  00167E  ECF8  F020         	call	_ZeroArray	;wreg free
  5436                           
  5437                           ;FlashApp.c: 107: TxMsg[(0)] = (0x24);
  5438  001682  0E24               	movlw	36
  5439  001684  0100               	movlb	0	; () banked
  5440  001686  6F8F               	movwf	FlashReadUart@TxMsg& (0+255),b
  5441                           
  5442                           ; BSR set to: 0
  5443                           ;FlashApp.c: 108: TxMsg[(1)] = FLASH_MSG;
  5444  001688  0E05               	movlw	5
  5445  00168A  6F90               	movwf	(FlashReadUart@TxMsg+1)& (0+255),b
  5446                           
  5447                           ; BSR set to: 0
  5448                           ;FlashApp.c: 109: TxMsg[(2)] = FLASH_SEND_RAW_DATA;
  5449  00168C  0E54               	movlw	84
  5450  00168E  6F91               	movwf	(FlashReadUart@TxMsg+2)& (0+255),b
  5451                           
  5452                           ; BSR set to: 0
  5453                           ;FlashApp.c: 110: TxMsg[(3)] = (64);
  5454  001690  0E40               	movlw	64
  5455  001692  6F92               	movwf	(FlashReadUart@TxMsg+3)& (0+255),b
  5456                           
  5457                           ; BSR set to: 0
  5458                           ;FlashApp.c: 112: for(int idx = 0; idx < (64); idx++)
  5459  001694  0E00               	movlw	0
  5460  001696  6FE5               	movwf	(FlashReadUart@idx+1)& (0+255),b
  5461  001698  0E00               	movlw	0
  5462  00169A  6FE4               	movwf	FlashReadUart@idx& (0+255),b
  5463  00169C                     l8281:
  5464                           
  5465                           ; BSR set to: 0
  5466  00169C  BFE5               	btfsc	(FlashReadUart@idx+1)& (0+255),7,b
  5467  00169E  D006               	goto	l335
  5468  0016A0  51E5               	movf	(FlashReadUart@idx+1)& (0+255),w,b
  5469  0016A2  E134               	bnz	l8291
  5470  0016A4  0E40               	movlw	64
  5471  0016A6  5DE4               	subwf	FlashReadUart@idx& (0+255),w,b
  5472  0016A8  B0D8               	btfsc	status,0,c
  5473  0016AA  D030               	goto	u8360
  5474  0016AC                     l335:
  5475                           
  5476                           ; BSR set to: 0
  5477                           ;FlashApp.c: 113: {
  5478                           ;FlashApp.c: 114: TxMsg[(0x4) + idx] = FLASH_ReadByte(readAddress + idx);
  5479                           
  5480                           ; BSR set to: 0
  5481  0016AC  0E04               	movlw	4
  5482  0016AE  25E4               	addwf	FlashReadUart@idx& (0+255),w,b
  5483  0016B0  6F89               	movwf	??_FlashReadUart& (0+255),b
  5484  0016B2  0E00               	movlw	0
  5485  0016B4  21E5               	addwfc	(FlashReadUart@idx+1)& (0+255),w,b
  5486  0016B6  6F8A               	movwf	(??_FlashReadUart+1)& (0+255),b
  5487  0016B8  0E8F               	movlw	low FlashReadUart@TxMsg
  5488  0016BA  2589               	addwf	??_FlashReadUart& (0+255),w,b
  5489  0016BC  6ED9               	movwf	fsr2l,c
  5490  0016BE  0E00               	movlw	high FlashReadUart@TxMsg
  5491  0016C0  218A               	addwfc	(??_FlashReadUart+1)& (0+255),w,b
  5492  0016C2  6EDA               	movwf	fsr2h,c
  5493  0016C4  C0E4  F08B         	movff	FlashReadUart@idx,??_FlashReadUart+2
  5494  0016C8  C0E5  F08C         	movff	FlashReadUart@idx+1,??_FlashReadUart+3
  5495  0016CC  0E00               	movlw	0
  5496  0016CE  BF8C               	btfsc	(??_FlashReadUart+3)& (0+255),7,b
  5497  0016D0  0EFF               	movlw	255
  5498  0016D2  6F8D               	movwf	(??_FlashReadUart+4)& (0+255),b
  5499  0016D4  6F8E               	movwf	(??_FlashReadUart+5)& (0+255),b
  5500  0016D6  0101               	movlb	1	; () banked
  5501  0016D8  51F1               	movf	_readAddress& (0+255),w,b
  5502  0016DA  0100               	movlb	0	; () banked
  5503  0016DC  258B               	addwf	(??_FlashReadUart+2)& (0+255),w,b
  5504  0016DE  6E18               	movwf	FLASH_ReadByte@flashAddr,c
  5505  0016E0  0101               	movlb	1	; () banked
  5506  0016E2  51F2               	movf	(_readAddress+1)& (0+255),w,b
  5507  0016E4  0100               	movlb	0	; () banked
  5508  0016E6  218C               	addwfc	(??_FlashReadUart+3)& (0+255),w,b
  5509  0016E8  6E19               	movwf	FLASH_ReadByte@flashAddr+1,c
  5510  0016EA  0101               	movlb	1	; () banked
  5511  0016EC  51F3               	movf	(_readAddress+2)& (0+255),w,b
  5512  0016EE  0100               	movlb	0	; () banked
  5513  0016F0  218D               	addwfc	(??_FlashReadUart+4)& (0+255),w,b
  5514  0016F2  6E1A               	movwf	FLASH_ReadByte@flashAddr+2,c
  5515  0016F4  0101               	movlb	1	; () banked
  5516  0016F6  51F4               	movf	(_readAddress+3)& (0+255),w,b
  5517  0016F8  0100               	movlb	0	; () banked
  5518  0016FA  218E               	addwfc	(??_FlashReadUart+5)& (0+255),w,b
  5519  0016FC  6E1B               	movwf	FLASH_ReadByte@flashAddr+3,c
  5520  0016FE  EC70  F021         	call	_FLASH_ReadByte	;wreg free
  5521  001702  6EDF               	movwf	indf2,c
  5522  001704  0100               	movlb	0	; () banked
  5523  001706  4BE4               	infsnz	FlashReadUart@idx& (0+255),f,b
  5524  001708  2BE5               	incf	(FlashReadUart@idx+1)& (0+255),f,b
  5525  00170A  D7C8               	goto	l8281
  5526  00170C                     u8360:
  5527  00170C                     l8291:
  5528                           
  5529                           ; BSR set to: 0
  5530                           ;FlashApp.c: 115: }
  5531                           ;FlashApp.c: 117: TxMsg[(64) + (0x4)] = crc8(TxMsg, (64) + (0x4));
  5532  00170C  0E8F               	movlw	low FlashReadUart@TxMsg
  5533  00170E  6E18               	movwf	crc8@dataArray,c
  5534  001710  0E00               	movlw	high FlashReadUart@TxMsg
  5535  001712  6E19               	movwf	crc8@dataArray+1,c
  5536  001714  0E00               	movlw	0
  5537  001716  6E1B               	movwf	crc8@dataSize+1,c
  5538  001718  0E44               	movlw	68
  5539  00171A  6E1A               	movwf	crc8@dataSize,c
  5540  00171C  EC7A  F01D         	call	_crc8	;wreg free
  5541  001720  0100               	movlb	0	; () banked
  5542  001722  6FD3               	movwf	(FlashReadUart@TxMsg+68)& (0+255),b
  5543                           
  5544                           ; BSR set to: 0
  5545                           ;FlashApp.c: 119: WriteUartMessage(TxMsg, (64) + (0x4) + 1);
  5546  001724  0E8F               	movlw	low FlashReadUart@TxMsg
  5547  001726  6E19               	movwf	WriteUartMessage@dataBuf,c
  5548  001728  0E00               	movlw	high FlashReadUart@TxMsg
  5549  00172A  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5550  00172C  0E00               	movlw	0
  5551  00172E  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5552  001730  0E45               	movlw	69
  5553  001732  6E1B               	movwf	WriteUartMessage@dataSize,c
  5554  001734  EC2B  F01F         	call	_WriteUartMessage	;wreg free
  5555                           
  5556                           ;FlashApp.c: 120: _delay((unsigned long)((200)*(8000000/4000.0)));
  5557  001738  0E03               	movlw	3
  5558  00173A  0100               	movlb	0	; () banked
  5559  00173C  6F8A               	movwf	(??_FlashReadUart+1)& (0+255),b
  5560  00173E  0E08               	movlw	8
  5561  001740  6F89               	movwf	??_FlashReadUart& (0+255),b
  5562  001742  0E77               	movlw	119
  5563  001744                     u9067:
  5564  001744  2EE8               	decfsz	wreg,f,c
  5565  001746  D7FE               	bra	u9067
  5566  001748  2F89               	decfsz	??_FlashReadUart& (0+255),f,b
  5567  00174A  D7FC               	bra	u9067
  5568  00174C  2F8A               	decfsz	(??_FlashReadUart+1)& (0+255),f,b
  5569  00174E  D7FA               	bra	u9067
  5570  001750  0100               	movlb	0	; () banked
  5571  001752  4BE0               	infsnz	FlashReadUart@j& (0+255),f,b
  5572  001754  2BE1               	incf	(FlashReadUart@j+1)& (0+255),f,b
  5573  001756                     l331:
  5574                           
  5575                           ; BSR set to: 0
  5576                           
  5577                           ; BSR set to: 0
  5578  001756  51E2               	movf	FlashReadUart@numOfSampleToRead& (0+255),w,b
  5579  001758  5DE0               	subwf	FlashReadUart@j& (0+255),w,b
  5580  00175A  51E1               	movf	(FlashReadUart@j+1)& (0+255),w,b
  5581  00175C  0A80               	xorlw	128
  5582  00175E  6F89               	movwf	??_FlashReadUart& (0+255),b
  5583  001760  51E3               	movf	(FlashReadUart@numOfSampleToRead+1)& (0+255),w,b
  5584  001762  0A80               	xorlw	128
  5585  001764  5989               	subwfb	??_FlashReadUart& (0+255),w,b
  5586  001766  B0D8               	btfsc	status,0,c
  5587  001768  0012               	return	
  5588  00176A  D76B               	goto	l332
  5589  00176C                     __end_of_FlashReadUart:
  5590                           	opt stack 0
  5591                           tosu	equ	0xFFF
  5592                           tosh	equ	0xFFE
  5593                           tosl	equ	0xFFD
  5594                           pclath	equ	0xFFA
  5595                           tblptru	equ	0xFF8
  5596                           tblptrh	equ	0xFF7
  5597                           tblptrl	equ	0xFF6
  5598                           tablat	equ	0xFF5
  5599                           prodh	equ	0xFF4
  5600                           prodl	equ	0xFF3
  5601                           postinc0	equ	0xFEE
  5602                           plusw0	equ	0xFEB
  5603                           wreg	equ	0xFE8
  5604                           postdec1	equ	0xFE5
  5605                           fsr1l	equ	0xFE1
  5606                           indf2	equ	0xFDF
  5607                           postinc2	equ	0xFDE
  5608                           plusw2	equ	0xFDB
  5609                           fsr2h	equ	0xFDA
  5610                           fsr2l	equ	0xFD9
  5611                           status	equ	0xFD8
  5612                           
  5613 ;; *************** function _FLASH_ReadByte *****************
  5614 ;; Defined at:
  5615 ;;		line 58 in file "mcc_generated_files/memory.c"
  5616 ;; Parameters:    Size  Location     Type
  5617 ;;  flashAddr       4   23[COMRAM] unsigned long 
  5618 ;; Auto vars:     Size  Location     Type
  5619 ;;		None
  5620 ;; Return value:  Size  Location     Type
  5621 ;;                  1    wreg      unsigned char 
  5622 ;; Registers used:
  5623 ;;		wreg, status,2
  5624 ;; Tracked objects:
  5625 ;;		On entry : 0/0
  5626 ;;		On exit  : 0/0
  5627 ;;		Unchanged: 0/0
  5628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5629 ;;      Params:         4       0       0       0       0       0       0
  5630 ;;      Locals:         0       0       0       0       0       0       0
  5631 ;;      Temps:          0       0       0       0       0       0       0
  5632 ;;      Totals:         4       0       0       0       0       0       0
  5633 ;;Total ram usage:        4 bytes
  5634 ;; Hardware stack levels used:    1
  5635 ;; Hardware stack levels required when called:    4
  5636 ;; This function calls:
  5637 ;;		Nothing
  5638 ;; This function is called by:
  5639 ;;		_FlashReadUart
  5640 ;;		_FLASH_ReadWord
  5641 ;;		_FLASH_WriteByte
  5642 ;; This function uses a non-reentrant model
  5643 ;;
  5644                           
  5645                           	psect	text16
  5646  0042E0                     __ptext16:
  5647                           	opt stack 0
  5648  0042E0                     _FLASH_ReadByte:
  5649                           	opt stack 23
  5650                           
  5651                           ;memory.c: 60: TBLPTRU = (uint8_t)((flashAddr & 0x00FF0000) >> 16);
  5652                           
  5653                           ;incstack = 0
  5654  0042E0  C01A  FFF8         	movff	FLASH_ReadByte@flashAddr+2,tblptru	;volatile
  5655                           
  5656                           ;memory.c: 61: TBLPTRH = (uint8_t)((flashAddr & 0x0000FF00)>> 8);
  5657  0042E4  C019  FFF7         	movff	FLASH_ReadByte@flashAddr+1,tblptrh	;volatile
  5658                           
  5659                           ;memory.c: 62: TBLPTRL = (uint8_t)(flashAddr & 0x000000FF);
  5660  0042E8  C018  FFF6         	movff	FLASH_ReadByte@flashAddr,tblptrl	;volatile
  5661  0042EC  0008               	tblrd		*	;# 
  5662                           
  5663                           ;memory.c: 66: return (TABLAT);
  5664  0042EE  50F5               	movf	tablat,w,c	;volatile
  5665  0042F0  0012               	return	
  5666  0042F2                     __end_of_FLASH_ReadByte:
  5667                           	opt stack 0
  5668                           tosu	equ	0xFFF
  5669                           tosh	equ	0xFFE
  5670                           tosl	equ	0xFFD
  5671                           pclath	equ	0xFFA
  5672                           tblptru	equ	0xFF8
  5673                           tblptrh	equ	0xFF7
  5674                           tblptrl	equ	0xFF6
  5675                           tablat	equ	0xFF5
  5676                           prodh	equ	0xFF4
  5677                           prodl	equ	0xFF3
  5678                           postinc0	equ	0xFEE
  5679                           plusw0	equ	0xFEB
  5680                           wreg	equ	0xFE8
  5681                           postdec1	equ	0xFE5
  5682                           fsr1l	equ	0xFE1
  5683                           indf2	equ	0xFDF
  5684                           postinc2	equ	0xFDE
  5685                           plusw2	equ	0xFDB
  5686                           fsr2h	equ	0xFDA
  5687                           fsr2l	equ	0xFD9
  5688                           status	equ	0xFD8
  5689                           
  5690 ;; *************** function _FlashReadCondition *****************
  5691 ;; Defined at:
  5692 ;;		line 138 in file "FlashApp.c"
  5693 ;; Parameters:    Size  Location     Type
  5694 ;;		None
  5695 ;; Auto vars:     Size  Location     Type
  5696 ;;  TxMsg           9   39[COMRAM] unsigned char [9]
  5697 ;; Return value:  Size  Location     Type
  5698 ;;                  1    wreg      void 
  5699 ;; Registers used:
  5700 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5701 ;; Tracked objects:
  5702 ;;		On entry : 0/0
  5703 ;;		On exit  : 0/0
  5704 ;;		Unchanged: 0/0
  5705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5706 ;;      Params:         0       0       0       0       0       0       0
  5707 ;;      Locals:         9       0       0       0       0       0       0
  5708 ;;      Temps:          4       0       0       0       0       0       0
  5709 ;;      Totals:        13       0       0       0       0       0       0
  5710 ;;Total ram usage:       13 bytes
  5711 ;; Hardware stack levels used:    1
  5712 ;; Hardware stack levels required when called:    6
  5713 ;; This function calls:
  5714 ;;		_WriteUartMessage
  5715 ;;		_ZeroArray
  5716 ;;		_crc8
  5717 ;;		_make8
  5718 ;; This function is called by:
  5719 ;;		_GroupFlashMemory
  5720 ;; This function uses a non-reentrant model
  5721 ;;
  5722                           
  5723                           	psect	text17
  5724  00214A                     __ptext17:
  5725                           	opt stack 0
  5726  00214A                     _FlashReadCondition:
  5727                           	opt stack 22
  5728                           
  5729                           ;FlashApp.c: 141: char TxMsg[4 + (0x4) + 1];
  5730                           ;FlashApp.c: 142: ZeroArray(TxMsg, 4 + (0x4) + 1);
  5731                           
  5732                           ;incstack = 0
  5733  00214A  0E28               	movlw	low FlashReadCondition@TxMsg
  5734  00214C  6E20               	movwf	ZeroArray@array,c
  5735  00214E  0E00               	movlw	high FlashReadCondition@TxMsg
  5736  002150  6E21               	movwf	ZeroArray@array+1,c
  5737  002152  0E00               	movlw	0
  5738  002154  6E23               	movwf	ZeroArray@size+1,c
  5739  002156  0E09               	movlw	9
  5740  002158  6E22               	movwf	ZeroArray@size,c
  5741  00215A  ECF8  F020         	call	_ZeroArray	;wreg free
  5742                           
  5743                           ;FlashApp.c: 145: TxMsg[(0)] = (0x24);
  5744  00215E  0E24               	movlw	36
  5745  002160  6E28               	movwf	FlashReadCondition@TxMsg,c
  5746                           
  5747                           ;FlashApp.c: 146: TxMsg[(1)] = FLASH_MSG;
  5748  002162  0E05               	movlw	5
  5749  002164  6E29               	movwf	FlashReadCondition@TxMsg+1,c
  5750                           
  5751                           ;FlashApp.c: 147: TxMsg[(2)] = FLASH_READ_CONDITION;
  5752  002166  0E52               	movlw	82
  5753  002168  6E2A               	movwf	FlashReadCondition@TxMsg+2,c
  5754                           
  5755                           ;FlashApp.c: 148: TxMsg[(3)] = 4;
  5756  00216A  0E04               	movlw	4
  5757  00216C  6E2B               	movwf	FlashReadCondition@TxMsg+3,c
  5758                           
  5759                           ;FlashApp.c: 153: TxMsg[(0x4) + 0] = make8(0x7FF0 - 0x4580,1);
  5760  00216E  0E70               	movlw	112
  5761  002170  6E18               	movwf	make8@data,c
  5762  002172  0E3A               	movlw	58
  5763  002174  6E19               	movwf	make8@data+1,c
  5764  002176  0E00               	movlw	0
  5765  002178  6E1A               	movwf	make8@data+2,c
  5766  00217A  0E00               	movlw	0
  5767  00217C  6E1B               	movwf	make8@data+3,c
  5768  00217E  0E01               	movlw	1
  5769  002180  6E1C               	movwf	make8@dataLocation,c
  5770  002182  ECF2  F01B         	call	_make8	;wreg free
  5771  002186  6E2C               	movwf	FlashReadCondition@TxMsg+4,c
  5772                           
  5773                           ;FlashApp.c: 154: TxMsg[(0x4) + 1] = make8(0x7FF0 - 0x4580,0);
  5774  002188  0E70               	movlw	112
  5775  00218A  6E18               	movwf	make8@data,c
  5776  00218C  0E3A               	movlw	58
  5777  00218E  6E19               	movwf	make8@data+1,c
  5778  002190  0E00               	movlw	0
  5779  002192  6E1A               	movwf	make8@data+2,c
  5780  002194  0E00               	movlw	0
  5781  002196  6E1B               	movwf	make8@data+3,c
  5782  002198  0E00               	movlw	0
  5783  00219A  6E1C               	movwf	make8@dataLocation,c
  5784  00219C  ECF2  F01B         	call	_make8	;wreg free
  5785  0021A0  6E2D               	movwf	FlashReadCondition@TxMsg+5,c
  5786                           
  5787                           ;FlashApp.c: 157: TxMsg[(0x4) + 2] = make8(0x7FF0 - writeAddress,1);
  5788  0021A2  C03E  F024         	movff	_writeAddress,??_FlashReadCondition
  5789  0021A6  C03F  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5790  0021AA  C040  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5791  0021AE  C041  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5792  0021B2  1E24               	comf	??_FlashReadCondition,f,c
  5793  0021B4  1E25               	comf	??_FlashReadCondition+1,f,c
  5794  0021B6  1E26               	comf	??_FlashReadCondition+2,f,c
  5795  0021B8  1E27               	comf	??_FlashReadCondition+3,f,c
  5796  0021BA  2A24               	incf	??_FlashReadCondition,f,c
  5797  0021BC  0E00               	movlw	0
  5798  0021BE  2225               	addwfc	??_FlashReadCondition+1,f,c
  5799  0021C0  2226               	addwfc	??_FlashReadCondition+2,f,c
  5800  0021C2  2227               	addwfc	??_FlashReadCondition+3,f,c
  5801  0021C4  0EF0               	movlw	240
  5802  0021C6  2424               	addwf	??_FlashReadCondition,w,c
  5803  0021C8  6E18               	movwf	make8@data,c
  5804  0021CA  0E7F               	movlw	127
  5805  0021CC  2025               	addwfc	??_FlashReadCondition+1,w,c
  5806  0021CE  6E19               	movwf	make8@data+1,c
  5807  0021D0  0E00               	movlw	0
  5808  0021D2  2026               	addwfc	??_FlashReadCondition+2,w,c
  5809  0021D4  6E1A               	movwf	make8@data+2,c
  5810  0021D6  0E00               	movlw	0
  5811  0021D8  2027               	addwfc	??_FlashReadCondition+3,w,c
  5812  0021DA  6E1B               	movwf	make8@data+3,c
  5813  0021DC  0E01               	movlw	1
  5814  0021DE  6E1C               	movwf	make8@dataLocation,c
  5815  0021E0  ECF2  F01B         	call	_make8	;wreg free
  5816  0021E4  6E2E               	movwf	FlashReadCondition@TxMsg+6,c
  5817                           
  5818                           ;FlashApp.c: 158: TxMsg[(0x4) + 3] = make8(0x7FF0 - writeAddress,0);
  5819  0021E6  C03E  F024         	movff	_writeAddress,??_FlashReadCondition
  5820  0021EA  C03F  F025         	movff	_writeAddress+1,??_FlashReadCondition+1
  5821  0021EE  C040  F026         	movff	_writeAddress+2,??_FlashReadCondition+2
  5822  0021F2  C041  F027         	movff	_writeAddress+3,??_FlashReadCondition+3
  5823  0021F6  1E24               	comf	??_FlashReadCondition,f,c
  5824  0021F8  1E25               	comf	??_FlashReadCondition+1,f,c
  5825  0021FA  1E26               	comf	??_FlashReadCondition+2,f,c
  5826  0021FC  1E27               	comf	??_FlashReadCondition+3,f,c
  5827  0021FE  2A24               	incf	??_FlashReadCondition,f,c
  5828  002200  0E00               	movlw	0
  5829  002202  2225               	addwfc	??_FlashReadCondition+1,f,c
  5830  002204  2226               	addwfc	??_FlashReadCondition+2,f,c
  5831  002206  2227               	addwfc	??_FlashReadCondition+3,f,c
  5832  002208  0EF0               	movlw	240
  5833  00220A  2424               	addwf	??_FlashReadCondition,w,c
  5834  00220C  6E18               	movwf	make8@data,c
  5835  00220E  0E7F               	movlw	127
  5836  002210  2025               	addwfc	??_FlashReadCondition+1,w,c
  5837  002212  6E19               	movwf	make8@data+1,c
  5838  002214  0E00               	movlw	0
  5839  002216  2026               	addwfc	??_FlashReadCondition+2,w,c
  5840  002218  6E1A               	movwf	make8@data+2,c
  5841  00221A  0E00               	movlw	0
  5842  00221C  2027               	addwfc	??_FlashReadCondition+3,w,c
  5843  00221E  6E1B               	movwf	make8@data+3,c
  5844  002220  0E00               	movlw	0
  5845  002222  6E1C               	movwf	make8@dataLocation,c
  5846  002224  ECF2  F01B         	call	_make8	;wreg free
  5847  002228  6E2F               	movwf	FlashReadCondition@TxMsg+7,c
  5848                           
  5849                           ;FlashApp.c: 160: TxMsg[4 + (0x4)] = crc8(TxMsg, 4 + (0x4));
  5850  00222A  0E28               	movlw	low FlashReadCondition@TxMsg
  5851  00222C  6E18               	movwf	crc8@dataArray,c
  5852  00222E  0E00               	movlw	high FlashReadCondition@TxMsg
  5853  002230  6E19               	movwf	crc8@dataArray+1,c
  5854  002232  0E00               	movlw	0
  5855  002234  6E1B               	movwf	crc8@dataSize+1,c
  5856  002236  0E08               	movlw	8
  5857  002238  6E1A               	movwf	crc8@dataSize,c
  5858  00223A  EC7A  F01D         	call	_crc8	;wreg free
  5859  00223E  6E30               	movwf	FlashReadCondition@TxMsg+8,c
  5860                           
  5861                           ;FlashApp.c: 162: WriteUartMessage(TxMsg, 4 + (0x4) + 1);
  5862  002240  0E28               	movlw	low FlashReadCondition@TxMsg
  5863  002242  6E19               	movwf	WriteUartMessage@dataBuf,c
  5864  002244  0E00               	movlw	high FlashReadCondition@TxMsg
  5865  002246  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  5866  002248  0E00               	movlw	0
  5867  00224A  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  5868  00224C  0E09               	movlw	9
  5869  00224E  6E1B               	movwf	WriteUartMessage@dataSize,c
  5870  002250  EC2B  F01F         	call	_WriteUartMessage	;wreg free
  5871  002254  0012               	return		;funcret
  5872  002256                     __end_of_FlashReadCondition:
  5873                           	opt stack 0
  5874                           tosu	equ	0xFFF
  5875                           tosh	equ	0xFFE
  5876                           tosl	equ	0xFFD
  5877                           pclath	equ	0xFFA
  5878                           tblptru	equ	0xFF8
  5879                           tblptrh	equ	0xFF7
  5880                           tblptrl	equ	0xFF6
  5881                           tablat	equ	0xFF5
  5882                           prodh	equ	0xFF4
  5883                           prodl	equ	0xFF3
  5884                           postinc0	equ	0xFEE
  5885                           plusw0	equ	0xFEB
  5886                           wreg	equ	0xFE8
  5887                           postdec1	equ	0xFE5
  5888                           fsr1l	equ	0xFE1
  5889                           indf2	equ	0xFDF
  5890                           postinc2	equ	0xFDE
  5891                           plusw2	equ	0xFDB
  5892                           fsr2h	equ	0xFDA
  5893                           fsr2l	equ	0xFD9
  5894                           status	equ	0xFD8
  5895                           
  5896 ;; *************** function _FlashEreaseMem *****************
  5897 ;; Defined at:
  5898 ;;		line 129 in file "FlashApp.c"
  5899 ;; Parameters:    Size  Location     Type
  5900 ;;		None
  5901 ;; Auto vars:     Size  Location     Type
  5902 ;;		None
  5903 ;; Return value:  Size  Location     Type
  5904 ;;                  1    wreg      void 
  5905 ;; Registers used:
  5906 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5907 ;; Tracked objects:
  5908 ;;		On entry : 0/0
  5909 ;;		On exit  : 0/0
  5910 ;;		Unchanged: 0/0
  5911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5912 ;;      Params:         0       0       0       0       0       0       0
  5913 ;;      Locals:         0       0       0       0       0       0       0
  5914 ;;      Temps:          0       0       0       0       0       0       0
  5915 ;;      Totals:         0       0       0       0       0       0       0
  5916 ;;Total ram usage:        0 bytes
  5917 ;; Hardware stack levels used:    1
  5918 ;; Hardware stack levels required when called:    7
  5919 ;; This function calls:
  5920 ;;		_SendAckMessage
  5921 ;;		_ZeroArray
  5922 ;; This function is called by:
  5923 ;;		_GroupFlashMemory
  5924 ;; This function uses a non-reentrant model
  5925 ;;
  5926                           
  5927                           	psect	text18
  5928  003A4E                     __ptext18:
  5929                           	opt stack 0
  5930  003A4E                     _FlashEreaseMem:
  5931                           	opt stack 21
  5932                           
  5933                           ;FlashApp.c: 131: writeAddress = 0x4580;
  5934                           
  5935                           ;incstack = 0
  5936  003A4E  0E80               	movlw	128
  5937  003A50  6E3E               	movwf	_writeAddress,c
  5938  003A52  0E45               	movlw	69
  5939  003A54  6E3F               	movwf	_writeAddress+1,c
  5940  003A56  0E00               	movlw	0
  5941  003A58  6E40               	movwf	_writeAddress+2,c
  5942  003A5A  0E00               	movlw	0
  5943  003A5C  6E41               	movwf	_writeAddress+3,c
  5944                           
  5945                           ;FlashApp.c: 132: readAddress = 0x4580;
  5946  003A5E  0E80               	movlw	128
  5947  003A60  0101               	movlb	1	; () banked
  5948  003A62  6FF1               	movwf	_readAddress& (0+255),b
  5949  003A64  0E45               	movlw	69
  5950  003A66  6FF2               	movwf	(_readAddress+1)& (0+255),b
  5951  003A68  0E00               	movlw	0
  5952  003A6A  6FF3               	movwf	(_readAddress+2)& (0+255),b
  5953  003A6C  0E00               	movlw	0
  5954  003A6E  6FF4               	movwf	(_readAddress+3)& (0+255),b
  5955                           
  5956                           ;FlashApp.c: 133: numOfValidateSamples = 0;
  5957  003A70  0E00               	movlw	0
  5958  003A72  0100               	movlb	0	; () banked
  5959  003A74  6FEA               	movwf	_numOfValidateSamples& (0+255),b
  5960  003A76  0E00               	movlw	0
  5961  003A78  6FEB               	movwf	(_numOfValidateSamples+1)& (0+255),b
  5962  003A7A  0E00               	movlw	0
  5963  003A7C  6FEC               	movwf	(_numOfValidateSamples+2)& (0+255),b
  5964  003A7E  0E00               	movlw	0
  5965  003A80  6FED               	movwf	(_numOfValidateSamples+3)& (0+255),b
  5966                           
  5967                           ; BSR set to: 0
  5968                           ;FlashApp.c: 134: ZeroArray(sampleArray, (64)/sizeof(adc_result_t));
  5969  003A82  0E32               	movlw	low _sampleArray
  5970  003A84  6E20               	movwf	ZeroArray@array,c
  5971  003A86  0E01               	movlw	high _sampleArray
  5972  003A88  6E21               	movwf	ZeroArray@array+1,c
  5973  003A8A  0E00               	movlw	0
  5974  003A8C  6E23               	movwf	ZeroArray@size+1,c
  5975  003A8E  0E20               	movlw	32
  5976  003A90  6E22               	movwf	ZeroArray@size,c
  5977  003A92  ECF8  F020         	call	_ZeroArray	;wreg free
  5978                           
  5979                           ;FlashApp.c: 135: SendAckMessage((MSG_GROUPS)FLASH_MSG, (MSG_REQUEST)FLASH_EREASE_MEMORY
      +                          );
  5980  003A96  0E51               	movlw	81
  5981  003A98  6E24               	movwf	SendAckMessage@inRequest,c
  5982  003A9A  0E05               	movlw	5
  5983  003A9C  EC51  F01D         	call	_SendAckMessage
  5984  003AA0  0012               	return		;funcret
  5985  003AA2                     __end_of_FlashEreaseMem:
  5986                           	opt stack 0
  5987                           tosu	equ	0xFFF
  5988                           tosh	equ	0xFFE
  5989                           tosl	equ	0xFFD
  5990                           pclath	equ	0xFFA
  5991                           tblptru	equ	0xFF8
  5992                           tblptrh	equ	0xFF7
  5993                           tblptrl	equ	0xFF6
  5994                           tablat	equ	0xFF5
  5995                           prodh	equ	0xFF4
  5996                           prodl	equ	0xFF3
  5997                           postinc0	equ	0xFEE
  5998                           plusw0	equ	0xFEB
  5999                           wreg	equ	0xFE8
  6000                           postdec1	equ	0xFE5
  6001                           fsr1l	equ	0xFE1
  6002                           indf2	equ	0xFDF
  6003                           postinc2	equ	0xFDE
  6004                           plusw2	equ	0xFDB
  6005                           fsr2h	equ	0xFDA
  6006                           fsr2l	equ	0xFD9
  6007                           status	equ	0xFD8
  6008                           
  6009 ;; *************** function _DacSetValue *****************
  6010 ;; Defined at:
  6011 ;;		line 30 in file "DacApp.c"
  6012 ;; Parameters:    Size  Location     Type
  6013 ;;  data            2   42[BANK0 ] PTR unsigned char 
  6014 ;;		 -> rxMsgData(20), 
  6015 ;; Auto vars:     Size  Location     Type
  6016 ;;  retVal          8   49[BANK0 ] struct .
  6017 ;;  dacIndex        1   48[BANK0 ] char 
  6018 ;; Return value:  Size  Location     Type
  6019 ;;                  1    wreg      void 
  6020 ;; Registers used:
  6021 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6022 ;; Tracked objects:
  6023 ;;		On entry : 0/0
  6024 ;;		On exit  : 0/0
  6025 ;;		Unchanged: 0/0
  6026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6027 ;;      Params:         0       2       0       0       0       0       0
  6028 ;;      Locals:         0       9       0       0       0       0       0
  6029 ;;      Temps:          0       4       0       0       0       0       0
  6030 ;;      Totals:         0      15       0       0       0       0       0
  6031 ;;Total ram usage:       15 bytes
  6032 ;; Hardware stack levels used:    1
  6033 ;; Hardware stack levels required when called:    8
  6034 ;; This function calls:
  6035 ;;		_GetIntFromUartData
  6036 ;;		_SWSPI_send_word
  6037 ;;		_SendAckMessage
  6038 ;;		_StoreIntInEeprom
  6039 ;; This function is called by:
  6040 ;;		_GroupDAC
  6041 ;; This function uses a non-reentrant model
  6042 ;;
  6043                           
  6044                           	psect	text19
  6045  003068                     __ptext19:
  6046                           	opt stack 0
  6047  003068                     _DacSetValue:
  6048                           	opt stack 20
  6049                           
  6050                           ;DacApp.c: 32: INT_VAL retVal;
  6051                           ;DacApp.c: 33: retVal = GetIntFromUartData(16, data);
  6052                           
  6053                           ;incstack = 0
  6054  003068  C08A  F066         	movff	DacSetValue@data,GetIntFromUartData@data
  6055  00306C  C08B  F067         	movff	DacSetValue@data+1,GetIntFromUartData@data+1
  6056  003070  0E10               	movlw	16
  6057  003072  EC38  F00E         	call	_GetIntFromUartData
  6058  003076  EE20  F091         	lfsr	2,DacSetValue@retVal
  6059  00307A  0E07               	movlw	7
  6060  00307C                     u8381:
  6061  00307C  CFEB FFDB          	movff	plusw0,plusw2
  6062  003080  06E8               	decf	wreg,f,c
  6063  003082  E2FC               	bc	u8381
  6064                           
  6065                           ;DacApp.c: 34: SWSPI_send_word(EXT_DAC, retVal.num, 1);
  6066  003084  C091  F029         	movff	DacSetValue@retVal,SWSPI_send_word@data
  6067  003088  C092  F02A         	movff	DacSetValue@retVal+1,SWSPI_send_word@data+1
  6068  00308C  C093  F02B         	movff	DacSetValue@retVal+2,SWSPI_send_word@data+2
  6069  003090  C094  F02C         	movff	DacSetValue@retVal+3,SWSPI_send_word@data+3
  6070  003094  0E01               	movlw	1
  6071  003096  6E2D               	movwf	SWSPI_send_word@dataSize,c
  6072  003098  0E02               	movlw	2
  6073  00309A  ECDF  F017         	call	_SWSPI_send_word
  6074                           
  6075                           ;DacApp.c: 37: int8_t dacIndex = (retVal.num >> 14);
  6076  00309E  C091  F08C         	movff	DacSetValue@retVal,??_DacSetValue
  6077  0030A2  C092  F08D         	movff	DacSetValue@retVal+1,??_DacSetValue+1
  6078  0030A6  C093  F08E         	movff	DacSetValue@retVal+2,??_DacSetValue+2
  6079  0030AA  C094  F08F         	movff	DacSetValue@retVal+3,??_DacSetValue+3
  6080  0030AE  0E0F               	movlw	15
  6081  0030B0  D006               	goto	u8390
  6082  0030B2                     u8395:
  6083  0030B2  0100               	movlb	0	; () banked
  6084  0030B4  90D8               	bcf	status,0,c
  6085  0030B6  338F               	rrcf	(??_DacSetValue+3)& (0+255),f,b
  6086  0030B8  338E               	rrcf	(??_DacSetValue+2)& (0+255),f,b
  6087  0030BA  338D               	rrcf	(??_DacSetValue+1)& (0+255),f,b
  6088  0030BC  338C               	rrcf	??_DacSetValue& (0+255),f,b
  6089  0030BE                     u8390:
  6090  0030BE  2EE8               	decfsz	wreg,f,c
  6091  0030C0  D7F8               	goto	u8395
  6092  0030C2  518C               	movf	??_DacSetValue& (0+255),w,b
  6093  0030C4  6F90               	movwf	DacSetValue@dacIndex& (0+255),b
  6094                           
  6095                           ; BSR set to: 0
  6096                           ;DacApp.c: 38: StoreIntInEeprom(retVal.num, (0x40) | DAC_ADDRES[dacIndex], 2);
  6097  0030C6  C091  F021         	movff	DacSetValue@retVal,StoreIntInEeprom@data
  6098  0030CA  C092  F022         	movff	DacSetValue@retVal+1,StoreIntInEeprom@data+1
  6099  0030CE  C093  F023         	movff	DacSetValue@retVal+2,StoreIntInEeprom@data+2
  6100  0030D2  C094  F024         	movff	DacSetValue@retVal+3,StoreIntInEeprom@data+3
  6101  0030D6  5190               	movf	DacSetValue@dacIndex& (0+255),w,b
  6102  0030D8  0D01               	mullw	1
  6103  0030DA  0E53               	movlw	low _DAC_ADDRES
  6104  0030DC  24F3               	addwf	prodl,w,c
  6105  0030DE  6EF6               	movwf	tblptrl,c
  6106  0030E0  0E06               	movlw	high _DAC_ADDRES
  6107  0030E2  20F4               	addwfc	prodh,w,c
  6108  0030E4  6EF7               	movwf	tblptrh,c
  6109  0030E6                     	if	0	;There are less than 3 active tblptr bytes
  6110  0030E6                     	endif
  6111  0030E6  0008               	tblrd		*
  6112  0030E8  50F5               	movf	tablat,w,c
  6113  0030EA  0940               	iorlw	64
  6114  0030EC  6E25               	movwf	StoreIntInEeprom@address,c
  6115  0030EE  0E00               	movlw	0
  6116  0030F0  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
  6117  0030F2  0E02               	movlw	2
  6118  0030F4  6E26               	movwf	StoreIntInEeprom@numOfByes,c
  6119  0030F6  ECBC  F01E         	call	_StoreIntInEeprom	;wreg free
  6120                           
  6121                           ;DacApp.c: 41: SendAckMessage((MSG_GROUPS)DAC_MSG, (MSG_REQUEST)DAC_SET_VALUE);
  6122  0030FA  0E61               	movlw	97
  6123  0030FC  6E24               	movwf	SendAckMessage@inRequest,c
  6124  0030FE  0E06               	movlw	6
  6125  003100  EC51  F01D         	call	_SendAckMessage
  6126  003104  0012               	return		;funcret
  6127  003106                     __end_of_DacSetValue:
  6128                           	opt stack 0
  6129                           tosu	equ	0xFFF
  6130                           tosh	equ	0xFFE
  6131                           tosl	equ	0xFFD
  6132                           pclath	equ	0xFFA
  6133                           tblptru	equ	0xFF8
  6134                           tblptrh	equ	0xFF7
  6135                           tblptrl	equ	0xFF6
  6136                           tablat	equ	0xFF5
  6137                           prodh	equ	0xFF4
  6138                           prodl	equ	0xFF3
  6139                           postinc0	equ	0xFEE
  6140                           plusw0	equ	0xFEB
  6141                           wreg	equ	0xFE8
  6142                           postdec1	equ	0xFE5
  6143                           fsr1l	equ	0xFE1
  6144                           indf2	equ	0xFDF
  6145                           postinc2	equ	0xFDE
  6146                           plusw2	equ	0xFDB
  6147                           fsr2h	equ	0xFDA
  6148                           fsr2l	equ	0xFD9
  6149                           status	equ	0xFD8
  6150                           
  6151 ;; *************** function _GetIntFromUartData *****************
  6152 ;; Defined at:
  6153 ;;		line 47 in file "SystemCommon.c"
  6154 ;; Parameters:    Size  Location     Type
  6155 ;;  num             1    wreg     char 
  6156 ;;  data            2    6[BANK0 ] PTR unsigned char 
  6157 ;;		 -> rxMsgData(20), 
  6158 ;; Auto vars:     Size  Location     Type
  6159 ;;  num             1   26[BANK0 ] char 
  6160 ;;  idxCon          2   36[BANK0 ] int 
  6161 ;;  dataRegArr     10   16[BANK0 ] unsigned char [10]
  6162 ;;  retVal          8   28[BANK0 ] struct .
  6163 ;;  idxData         1   38[BANK0 ] unsigned char 
  6164 ;;  recVal          1   27[BANK0 ] unsigned char 
  6165 ;; Return value:  Size  Location     Type
  6166 ;;                  8    6[BANK0 ] struct .
  6167 ;; Registers used:
  6168 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6169 ;; Tracked objects:
  6170 ;;		On entry : 0/0
  6171 ;;		On exit  : 0/0
  6172 ;;		Unchanged: 0/0
  6173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6174 ;;      Params:         0       8       0       0       0       0       0
  6175 ;;      Locals:         0      23       0       0       0       0       0
  6176 ;;      Temps:          0       2       0       0       0       0       0
  6177 ;;      Totals:         0      33       0       0       0       0       0
  6178 ;;Total ram usage:       33 bytes
  6179 ;; Hardware stack levels used:    1
  6180 ;; Hardware stack levels required when called:    7
  6181 ;; This function calls:
  6182 ;;		_ZeroArray
  6183 ;;		_strtol
  6184 ;; This function is called by:
  6185 ;;		_FlashReadUart
  6186 ;;		_DacSetValue
  6187 ;;		_UpdateSynthFreq
  6188 ;; This function uses a non-reentrant model
  6189 ;;
  6190                           
  6191                           	psect	text20
  6192  001C70                     __ptext20:
  6193                           	opt stack 0
  6194  001C70                     _GetIntFromUartData:
  6195                           	opt stack 20
  6196                           
  6197                           ;incstack = 0
  6198                           ;GetIntFromUartData@num stored from wreg
  6199  001C70  0100               	movlb	0	; () banked
  6200  001C72  6F7A               	movwf	GetIntFromUartData@num& (0+255),b
  6201                           
  6202                           ;SystemCommon.c: 49: INT_VAL retVal;
  6203                           ;SystemCommon.c: 50: retVal.num = 0;
  6204  001C74  0E00               	movlw	0
  6205  001C76  0100               	movlb	0	; () banked
  6206  001C78  6F7C               	movwf	GetIntFromUartData@retVal& (0+255),b
  6207  001C7A  0E00               	movlw	0
  6208  001C7C  6F7D               	movwf	(GetIntFromUartData@retVal+1)& (0+255),b
  6209  001C7E  0E00               	movlw	0
  6210  001C80  6F7E               	movwf	(GetIntFromUartData@retVal+2)& (0+255),b
  6211  001C82  0E00               	movlw	0
  6212  001C84  6F7F               	movwf	(GetIntFromUartData@retVal+3)& (0+255),b
  6213                           
  6214                           ;SystemCommon.c: 51: retVal.con = 0;
  6215  001C86  0E00               	movlw	0
  6216  001C88  6F80               	movwf	(GetIntFromUartData@retVal+4)& (0+255),b
  6217  001C8A  0E00               	movlw	0
  6218  001C8C  6F81               	movwf	(GetIntFromUartData@retVal+5)& (0+255),b
  6219  001C8E  0E00               	movlw	0
  6220  001C90  6F82               	movwf	(GetIntFromUartData@retVal+6)& (0+255),b
  6221  001C92  0E00               	movlw	0
  6222  001C94  6F83               	movwf	(GetIntFromUartData@retVal+7)& (0+255),b
  6223                           
  6224                           ;SystemCommon.c: 52: uint8_t idxData = 0;
  6225  001C96  0E00               	movlw	0
  6226  001C98  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  6227                           
  6228                           ;SystemCommon.c: 53: char recVal = (0);
  6229  001C9A  0E00               	movlw	0
  6230  001C9C  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6231                           
  6232                           ; BSR set to: 0
  6233                           ;SystemCommon.c: 55: char dataRegArr[0xA];
  6234                           ;SystemCommon.c: 56: ZeroArray(dataRegArr, 0xA);
  6235  001C9E  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6236  001CA0  6E20               	movwf	ZeroArray@array,c
  6237  001CA2  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6238  001CA4  6E21               	movwf	ZeroArray@array+1,c
  6239  001CA6  0E00               	movlw	0
  6240  001CA8  6E23               	movwf	ZeroArray@size+1,c
  6241  001CAA  0E0A               	movlw	10
  6242  001CAC  6E22               	movwf	ZeroArray@size,c
  6243  001CAE  ECF8  F020         	call	_ZeroArray	;wreg free
  6244                           
  6245                           ;SystemCommon.c: 58: for(idxData = 0; idxData < 0xA; idxData++)
  6246  001CB2  0E00               	movlw	0
  6247  001CB4  0100               	movlb	0	; () banked
  6248  001CB6  6F86               	movwf	GetIntFromUartData@idxData& (0+255),b
  6249  001CB8                     l8001:
  6250                           
  6251                           ; BSR set to: 0
  6252  001CB8  0E09               	movlw	9
  6253  001CBA  6586               	cpfsgt	GetIntFromUartData@idxData& (0+255),b
  6254  001CBC  D001               	goto	l1408
  6255  001CBE  D01D               	goto	u7980
  6256  001CC0                     l1408:
  6257                           
  6258                           ; BSR set to: 0
  6259                           ;SystemCommon.c: 59: {
  6260                           ;SystemCommon.c: 60: recVal = data[idxData];
  6261                           
  6262                           ; BSR set to: 0
  6263  001CC0  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6264  001CC2  0D01               	mullw	1
  6265  001CC4  50F3               	movf	prodl,w,c
  6266  001CC6  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6267  001CC8  6ED9               	movwf	fsr2l,c
  6268  001CCA  50F4               	movf	prodh,w,c
  6269  001CCC  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6270  001CCE  6EDA               	movwf	fsr2h,c
  6271  001CD0  50DF               	movf	indf2,w,c
  6272  001CD2  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6273                           
  6274                           ; BSR set to: 0
  6275                           ;SystemCommon.c: 61: if(recVal == 0x10)
  6276  001CD4  0E10               	movlw	16
  6277  001CD6  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  6278  001CD8  A4D8               	btfss	status,2,c
  6279  001CDA  D002               	goto	l1410
  6280                           
  6281                           ; BSR set to: 0
  6282                           ;SystemCommon.c: 62: {
  6283                           ;SystemCommon.c: 63: idxData++;
  6284  001CDC  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  6285                           
  6286                           ;SystemCommon.c: 64: break;
  6287  001CDE  D00D               	goto	u7980
  6288  001CE0                     l1410:
  6289                           
  6290                           ; BSR set to: 0
  6291                           ;SystemCommon.c: 66: else
  6292                           ;SystemCommon.c: 67: {
  6293                           ;SystemCommon.c: 68: dataRegArr[idxData] = recVal + '0';
  6294                           
  6295                           ; BSR set to: 0
  6296  001CE0  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6297  001CE2  0D01               	mullw	1
  6298  001CE4  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6299  001CE6  24F3               	addwf	prodl,w,c
  6300  001CE8  6ED9               	movwf	fsr2l,c
  6301  001CEA  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6302  001CEC  20F4               	addwfc	prodh,w,c
  6303  001CEE  6EDA               	movwf	fsr2h,c
  6304  001CF0  517B               	movf	GetIntFromUartData@recVal& (0+255),w,b
  6305  001CF2  0F30               	addlw	48
  6306  001CF4  6EDF               	movwf	indf2,c
  6307                           
  6308                           ; BSR set to: 0
  6309                           
  6310                           ; BSR set to: 0
  6311  001CF6  2B86               	incf	GetIntFromUartData@idxData& (0+255),f,b
  6312  001CF8  D7DF               	goto	l8001
  6313  001CFA                     u7980:
  6314                           
  6315                           ; BSR set to: 0
  6316                           ;SystemCommon.c: 69: }
  6317                           ;SystemCommon.c: 70: }
  6318                           ;SystemCommon.c: 71: retVal.num = strtol(dataRegArr, (0), num);
  6319                           
  6320                           ; BSR set to: 0
  6321  001CFA  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6322  001CFC  6E26               	movwf	strtol@s,c
  6323  001CFE  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6324  001D00  6E27               	movwf	strtol@s+1,c
  6325  001D02  0E00               	movlw	0
  6326  001D04  6E28               	movwf	strtol@endptr,c
  6327  001D06  0E00               	movlw	0
  6328  001D08  6E29               	movwf	strtol@endptr+1,c
  6329  001D0A  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  6330  001D0C  6E2A               	movwf	strtol@base,c
  6331  001D0E  6A2B               	clrf	strtol@base+1,c
  6332  001D10  BE2A               	btfsc	strtol@base,7,c
  6333  001D12  062B               	decf	strtol@base+1,f,c
  6334  001D14  ECB6  F00B         	call	_strtol	;wreg free
  6335  001D18  C026  F07C         	movff	?_strtol,GetIntFromUartData@retVal
  6336  001D1C  C027  F07D         	movff	?_strtol+1,GetIntFromUartData@retVal+1
  6337  001D20  C028  F07E         	movff	?_strtol+2,GetIntFromUartData@retVal+2
  6338  001D24  C029  F07F         	movff	?_strtol+3,GetIntFromUartData@retVal+3
  6339                           
  6340                           ;SystemCommon.c: 73: ZeroArray(dataRegArr, 0xA);
  6341  001D28  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6342  001D2A  6E20               	movwf	ZeroArray@array,c
  6343  001D2C  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6344  001D2E  6E21               	movwf	ZeroArray@array+1,c
  6345  001D30  0E00               	movlw	0
  6346  001D32  6E23               	movwf	ZeroArray@size+1,c
  6347  001D34  0E0A               	movlw	10
  6348  001D36  6E22               	movwf	ZeroArray@size,c
  6349  001D38  ECF8  F020         	call	_ZeroArray	;wreg free
  6350                           
  6351                           ;SystemCommon.c: 75: for(int idxCon = 0; idxCon < 0xA; idxCon++)
  6352  001D3C  0E00               	movlw	0
  6353  001D3E  0100               	movlb	0	; () banked
  6354  001D40  6F85               	movwf	(GetIntFromUartData@idxCon+1)& (0+255),b
  6355  001D42  0E00               	movlw	0
  6356  001D44  6F84               	movwf	GetIntFromUartData@idxCon& (0+255),b
  6357  001D46                     l8023:
  6358                           
  6359                           ; BSR set to: 0
  6360  001D46  BF85               	btfsc	(GetIntFromUartData@idxCon+1)& (0+255),7,b
  6361  001D48  D006               	goto	l1412
  6362  001D4A  5185               	movf	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6363  001D4C  E12E               	bnz	l8041
  6364  001D4E  0E0A               	movlw	10
  6365  001D50  5D84               	subwf	GetIntFromUartData@idxCon& (0+255),w,b
  6366  001D52  B0D8               	btfsc	status,0,c
  6367  001D54  D02A               	goto	u8010
  6368  001D56                     l1412:
  6369                           
  6370                           ; BSR set to: 0
  6371                           ;SystemCommon.c: 76: {
  6372                           ;SystemCommon.c: 77: recVal = data[idxData + idxCon];
  6373                           
  6374                           ; BSR set to: 0
  6375  001D56  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6376  001D58  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6377  001D5A  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  6378  001D5C  0E00               	movlw	0
  6379  001D5E  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6380  001D60  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  6381  001D62  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  6382  001D64  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6383  001D66  6ED9               	movwf	fsr2l,c
  6384  001D68  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  6385  001D6A  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6386  001D6C  6EDA               	movwf	fsr2h,c
  6387  001D6E  50DF               	movf	indf2,w,c
  6388  001D70  6F7B               	movwf	GetIntFromUartData@recVal& (0+255),b
  6389                           
  6390                           ; BSR set to: 0
  6391                           ;SystemCommon.c: 78: if(recVal == 0x23)
  6392  001D72  0E23               	movlw	35
  6393  001D74  197B               	xorwf	GetIntFromUartData@recVal& (0+255),w,b
  6394  001D76  B4D8               	btfsc	status,2,c
  6395  001D78  D018               	goto	u8010
  6396                           
  6397                           ; BSR set to: 0
  6398                           ;SystemCommon.c: 82: else
  6399                           ;SystemCommon.c: 83: {
  6400                           ;SystemCommon.c: 84: dataRegArr[idxCon] = data[idxCon + idxData] + '0';
  6401                           
  6402                           ; BSR set to: 0
  6403                           
  6404                           ; BSR set to: 0
  6405                           ;SystemCommon.c: 81: }
  6406                           
  6407                           ; BSR set to: 0
  6408                           ;SystemCommon.c: 79: {
  6409                           ;SystemCommon.c: 80: break;
  6410  001D7A  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6411  001D7C  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6412  001D7E  6ED9               	movwf	fsr2l,c
  6413  001D80  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6414  001D82  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6415  001D84  6EDA               	movwf	fsr2h,c
  6416  001D86  5186               	movf	GetIntFromUartData@idxData& (0+255),w,b
  6417  001D88  2584               	addwf	GetIntFromUartData@idxCon& (0+255),w,b
  6418  001D8A  6F6E               	movwf	??_GetIntFromUartData& (0+255),b
  6419  001D8C  0E00               	movlw	0
  6420  001D8E  2185               	addwfc	(GetIntFromUartData@idxCon+1)& (0+255),w,b
  6421  001D90  6F6F               	movwf	(??_GetIntFromUartData+1)& (0+255),b
  6422  001D92  516E               	movf	??_GetIntFromUartData& (0+255),w,b
  6423  001D94  2566               	addwf	GetIntFromUartData@data& (0+255),w,b
  6424  001D96  6EE1               	movwf	fsr1l,c
  6425  001D98  516F               	movf	(??_GetIntFromUartData+1)& (0+255),w,b
  6426  001D9A  2167               	addwfc	(GetIntFromUartData@data+1)& (0+255),w,b
  6427  001D9C  6EE2               	movwf	fsr1h,c
  6428  001D9E  50E7               	movf	indf1,w,c
  6429  001DA0  0F30               	addlw	48
  6430  001DA2  6EDF               	movwf	indf2,c
  6431                           
  6432                           ; BSR set to: 0
  6433                           
  6434                           ; BSR set to: 0
  6435  001DA4  4B84               	infsnz	GetIntFromUartData@idxCon& (0+255),f,b
  6436  001DA6  2B85               	incf	(GetIntFromUartData@idxCon+1)& (0+255),f,b
  6437  001DA8  D7CE               	goto	l8023
  6438  001DAA                     u8010:
  6439  001DAA                     l8041:
  6440                           
  6441                           ; BSR set to: 0
  6442                           ;SystemCommon.c: 85: }
  6443                           ;SystemCommon.c: 86: }
  6444                           ;SystemCommon.c: 87: retVal.con = strtol(dataRegArr, (0), num);
  6445  001DAA  0E70               	movlw	low GetIntFromUartData@dataRegArr
  6446  001DAC  6E26               	movwf	strtol@s,c
  6447  001DAE  0E00               	movlw	high GetIntFromUartData@dataRegArr
  6448  001DB0  6E27               	movwf	strtol@s+1,c
  6449  001DB2  0E00               	movlw	0
  6450  001DB4  6E28               	movwf	strtol@endptr,c
  6451  001DB6  0E00               	movlw	0
  6452  001DB8  6E29               	movwf	strtol@endptr+1,c
  6453  001DBA  517A               	movf	GetIntFromUartData@num& (0+255),w,b
  6454  001DBC  6E2A               	movwf	strtol@base,c
  6455  001DBE  6A2B               	clrf	strtol@base+1,c
  6456  001DC0  BE2A               	btfsc	strtol@base,7,c
  6457  001DC2  062B               	decf	strtol@base+1,f,c
  6458  001DC4  ECB6  F00B         	call	_strtol	;wreg free
  6459  001DC8  C026  F080         	movff	?_strtol,GetIntFromUartData@retVal+4
  6460  001DCC  C027  F081         	movff	?_strtol+1,GetIntFromUartData@retVal+5
  6461  001DD0  C028  F082         	movff	?_strtol+2,GetIntFromUartData@retVal+6
  6462  001DD4  C029  F083         	movff	?_strtol+3,GetIntFromUartData@retVal+7
  6463                           
  6464                           ;SystemCommon.c: 89: return retVal;
  6465  001DD8  EE20  F07C         	lfsr	2,GetIntFromUartData@retVal
  6466  001DDC  EE00  F066         	lfsr	0,?_GetIntFromUartData
  6467  001DE0  0E07               	movlw	7
  6468  001DE2                     u8021:
  6469  001DE2  CFDB FFEB          	movff	plusw2,plusw0
  6470  001DE6  06E8               	decf	wreg,f,c
  6471  001DE8  E2FC               	bc	u8021
  6472  001DEA  0012               	return	
  6473  001DEC                     __end_of_GetIntFromUartData:
  6474                           	opt stack 0
  6475                           tosu	equ	0xFFF
  6476                           tosh	equ	0xFFE
  6477                           tosl	equ	0xFFD
  6478                           pclath	equ	0xFFA
  6479                           tblptru	equ	0xFF8
  6480                           tblptrh	equ	0xFF7
  6481                           tblptrl	equ	0xFF6
  6482                           tablat	equ	0xFF5
  6483                           prodh	equ	0xFF4
  6484                           prodl	equ	0xFF3
  6485                           postinc0	equ	0xFEE
  6486                           plusw0	equ	0xFEB
  6487                           wreg	equ	0xFE8
  6488                           indf1	equ	0xFE7
  6489                           postdec1	equ	0xFE5
  6490                           fsr1h	equ	0xFE2
  6491                           fsr1l	equ	0xFE1
  6492                           indf2	equ	0xFDF
  6493                           postinc2	equ	0xFDE
  6494                           plusw2	equ	0xFDB
  6495                           fsr2h	equ	0xFDA
  6496                           fsr2l	equ	0xFD9
  6497                           status	equ	0xFD8
  6498                           
  6499 ;; *************** function _strtol *****************
  6500 ;; Defined at:
  6501 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strtol.c"
  6502 ;; Parameters:    Size  Location     Type
  6503 ;;  s               2   37[COMRAM] PTR const unsigned char 
  6504 ;;		 -> GetIntFromUartData@dataRegArr(10), 
  6505 ;;  endptr          2   39[COMRAM] PTR PTR unsigned char 
  6506 ;;		 -> NULL(0), 
  6507 ;;  base            2   41[COMRAM] int 
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;  a               4    1[BANK0 ] long 
  6510 ;;  c               1    5[BANK0 ] unsigned char 
  6511 ;;  sign            1    0[BANK0 ] unsigned char 
  6512 ;; Return value:  Size  Location     Type
  6513 ;;                  4   37[COMRAM] long 
  6514 ;; Registers used:
  6515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6516 ;; Tracked objects:
  6517 ;;		On entry : 0/0
  6518 ;;		On exit  : 0/0
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6521 ;;      Params:         6       0       0       0       0       0       0
  6522 ;;      Locals:         0       6       0       0       0       0       0
  6523 ;;      Temps:          4       0       0       0       0       0       0
  6524 ;;      Totals:        10       6       0       0       0       0       0
  6525 ;;Total ram usage:       16 bytes
  6526 ;; Hardware stack levels used:    1
  6527 ;; Hardware stack levels required when called:    6
  6528 ;; This function calls:
  6529 ;;		___lmul
  6530 ;;		_isalpha
  6531 ;;		_isdigit
  6532 ;;		_isspace
  6533 ;;		_toupper
  6534 ;; This function is called by:
  6535 ;;		_GetIntFromUartData
  6536 ;; This function uses a non-reentrant model
  6537 ;;
  6538                           
  6539                           	psect	text21
  6540  00176C                     __ptext21:
  6541                           	opt stack 0
  6542  00176C                     _strtol:
  6543                           	opt stack 20
  6544                           
  6545                           ;incstack = 0
  6546  00176C  C026  FFD9         	movff	strtol@s,fsr2l
  6547  001770  C027  FFDA         	movff	strtol@s+1,fsr2h
  6548  001774  50DF               	movf	indf2,w,c
  6549  001776  0100               	movlb	0	; () banked
  6550  001778  6F65               	movwf	strtol@c& (0+255),b
  6551                           
  6552                           ; BSR set to: 0
  6553  00177A  4A26               	infsnz	strtol@s,f,c
  6554  00177C  2A27               	incf	strtol@s+1,f,c
  6555                           
  6556                           ; BSR set to: 0
  6557  00177E  5165               	movf	strtol@c& (0+255),w,b
  6558  001780  EC4C  F020         	call	_isspace
  6559  001784  B0D8               	btfsc	status,0,c
  6560  001786  D7F2               	goto	_strtol
  6561  001788  0E00               	movlw	0
  6562  00178A  0100               	movlb	0	; () banked
  6563  00178C  6F61               	movwf	strtol@a& (0+255),b
  6564  00178E  0E00               	movlw	0
  6565  001790  6F62               	movwf	(strtol@a+1)& (0+255),b
  6566  001792  0E00               	movlw	0
  6567  001794  6F63               	movwf	(strtol@a+2)& (0+255),b
  6568  001796  0E00               	movlw	0
  6569  001798  6F64               	movwf	(strtol@a+3)& (0+255),b
  6570  00179A  0E00               	movlw	0
  6571  00179C  6F60               	movwf	strtol@sign& (0+255),b
  6572                           
  6573                           ; BSR set to: 0
  6574  00179E  0E2D               	movlw	45
  6575  0017A0  1965               	xorwf	strtol@c& (0+255),w,b
  6576  0017A2  A4D8               	btfss	status,2,c
  6577  0017A4  D003               	goto	l2175
  6578                           
  6579                           ; BSR set to: 0
  6580  0017A6  0E01               	movlw	1
  6581  0017A8  6F60               	movwf	strtol@sign& (0+255),b
  6582  0017AA  D004               	goto	u7810
  6583  0017AC                     l2175:
  6584                           
  6585                           ; BSR set to: 0
  6586                           
  6587                           ; BSR set to: 0
  6588  0017AC  0E2B               	movlw	43
  6589  0017AE  1965               	xorwf	strtol@c& (0+255),w,b
  6590  0017B0  A4D8               	btfss	status,2,c
  6591  0017B2  D008               	goto	l2177
  6592  0017B4                     u7810:
  6593                           
  6594                           ; BSR set to: 0
  6595  0017B4  C026  FFD9         	movff	strtol@s,fsr2l
  6596  0017B8  C027  FFDA         	movff	strtol@s+1,fsr2h
  6597  0017BC  50DF               	movf	indf2,w,c
  6598  0017BE  6F65               	movwf	strtol@c& (0+255),b
  6599                           
  6600                           ; BSR set to: 0
  6601  0017C0  4A26               	infsnz	strtol@s,f,c
  6602  0017C2  2A27               	incf	strtol@s+1,f,c
  6603  0017C4                     l2177:
  6604                           
  6605                           ; BSR set to: 0
  6606                           
  6607                           ; BSR set to: 0
  6608                           
  6609                           ; BSR set to: 0
  6610  0017C4  0E30               	movlw	48
  6611  0017C6  1965               	xorwf	strtol@c& (0+255),w,b
  6612  0017C8  A4D8               	btfss	status,2,c
  6613  0017CA  D02E               	goto	l2185
  6614                           
  6615                           ; BSR set to: 0
  6616  0017CC  C026  FFD9         	movff	strtol@s,fsr2l
  6617  0017D0  C027  FFDA         	movff	strtol@s+1,fsr2h
  6618  0017D4  50DF               	movf	indf2,w,c
  6619  0017D6  6F65               	movwf	strtol@c& (0+255),b
  6620                           
  6621                           ; BSR set to: 0
  6622  0017D8  4A26               	infsnz	strtol@s,f,c
  6623  0017DA  2A27               	incf	strtol@s+1,f,c
  6624                           
  6625                           ; BSR set to: 0
  6626  0017DC  502A               	movf	strtol@base,w,c
  6627  0017DE  102B               	iorwf	strtol@base+1,w,c
  6628  0017E0  B4D8               	btfsc	status,2,c
  6629  0017E2  D005               	goto	u7840
  6630                           
  6631                           ; BSR set to: 0
  6632  0017E4  0E10               	movlw	16
  6633  0017E6  182A               	xorwf	strtol@base,w,c
  6634  0017E8  102B               	iorwf	strtol@base+1,w,c
  6635  0017EA  A4D8               	btfss	status,2,c
  6636  0017EC  D015               	goto	l2179
  6637  0017EE                     u7840:
  6638                           
  6639                           ; BSR set to: 0
  6640                           
  6641                           ; BSR set to: 0
  6642  0017EE  0E78               	movlw	120
  6643  0017F0  1965               	xorwf	strtol@c& (0+255),w,b
  6644  0017F2  B4D8               	btfsc	status,2,c
  6645  0017F4  D004               	goto	u7860
  6646                           
  6647                           ; BSR set to: 0
  6648  0017F6  0E58               	movlw	88
  6649  0017F8  1965               	xorwf	strtol@c& (0+255),w,b
  6650  0017FA  A4D8               	btfss	status,2,c
  6651  0017FC  D00D               	goto	l2179
  6652  0017FE                     u7860:
  6653                           
  6654                           ; BSR set to: 0
  6655                           
  6656                           ; BSR set to: 0
  6657  0017FE  0E00               	movlw	0
  6658  001800  6E2B               	movwf	strtol@base+1,c
  6659  001802  0E10               	movlw	16
  6660  001804  6E2A               	movwf	strtol@base,c
  6661                           
  6662                           ; BSR set to: 0
  6663  001806  C026  FFD9         	movff	strtol@s,fsr2l
  6664  00180A  C027  FFDA         	movff	strtol@s+1,fsr2h
  6665  00180E  50DF               	movf	indf2,w,c
  6666  001810  6F65               	movwf	strtol@c& (0+255),b
  6667                           
  6668                           ; BSR set to: 0
  6669  001812  4A26               	infsnz	strtol@s,f,c
  6670  001814  2A27               	incf	strtol@s+1,f,c
  6671  001816  D008               	goto	l2185
  6672  001818                     l2179:
  6673                           
  6674                           ; BSR set to: 0
  6675                           
  6676                           ; BSR set to: 0
  6677  001818  502A               	movf	strtol@base,w,c
  6678  00181A  102B               	iorwf	strtol@base+1,w,c
  6679  00181C  A4D8               	btfss	status,2,c
  6680  00181E  D004               	goto	l2185
  6681                           
  6682                           ; BSR set to: 0
  6683  001820  0E00               	movlw	0
  6684  001822  6E2B               	movwf	strtol@base+1,c
  6685  001824  0E08               	movlw	8
  6686  001826  6E2A               	movwf	strtol@base,c
  6687  001828                     l2185:
  6688                           
  6689                           ; BSR set to: 0
  6690                           
  6691                           ; BSR set to: 0
  6692                           
  6693                           ; BSR set to: 0
  6694                           
  6695                           ; BSR set to: 0
  6696  001828  502A               	movf	strtol@base,w,c
  6697  00182A  102B               	iorwf	strtol@base+1,w,c
  6698  00182C  A4D8               	btfss	status,2,c
  6699  00182E  D004               	goto	l2186
  6700                           
  6701                           ; BSR set to: 0
  6702  001830  0E00               	movlw	0
  6703  001832  6E2B               	movwf	strtol@base+1,c
  6704  001834  0E0A               	movlw	10
  6705  001836  6E2A               	movwf	strtol@base,c
  6706  001838                     l2186:
  6707                           
  6708                           ; BSR set to: 0
  6709                           
  6710                           ; BSR set to: 0
  6711                           
  6712                           ; BSR set to: 0
  6713  001838  5165               	movf	strtol@c& (0+255),w,b
  6714  00183A  EC38  F020         	call	_isalpha
  6715  00183E  A0D8               	btfss	status,0,c
  6716  001840  D008               	goto	l2188
  6717  001842  0100               	movlb	0	; () banked
  6718  001844  5165               	movf	strtol@c& (0+255),w,b
  6719  001846  EC52  F021         	call	_toupper
  6720  00184A  0FC9               	addlw	201
  6721  00184C  0100               	movlb	0	; () banked
  6722  00184E  6F65               	movwf	strtol@c& (0+255),b
  6723  001850  D009               	goto	l2191
  6724  001852                     l2188:
  6725                           
  6726                           ; BSR set to: 0
  6727  001852  0100               	movlb	0	; () banked
  6728  001854  5165               	movf	strtol@c& (0+255),w,b
  6729  001856  ECDA  F020         	call	_isdigit
  6730  00185A  A0D8               	btfss	status,0,c
  6731  00185C  D039               	goto	l2192
  6732  00185E  0E30               	movlw	48
  6733  001860  0100               	movlb	0	; () banked
  6734  001862  5F65               	subwf	strtol@c& (0+255),f,b
  6735  001864                     l2191:
  6736                           
  6737                           ; BSR set to: 0
  6738                           
  6739                           ; BSR set to: 0
  6740                           
  6741                           ; BSR set to: 0
  6742  001864  5165               	movf	strtol@c& (0+255),w,b
  6743  001866  6E2C               	movwf	??_strtol& (0+255),c
  6744  001868  6A2D               	clrf	(??_strtol+1)& (0+255),c
  6745  00186A  502A               	movf	strtol@base,w,c
  6746  00186C  5C2C               	subwf	??_strtol,w,c
  6747  00186E  502D               	movf	??_strtol+1,w,c
  6748  001870  0A80               	xorlw	128
  6749  001872  6E2E               	movwf	(??_strtol+2)& (0+255),c
  6750  001874  502B               	movf	strtol@base+1,w,c
  6751  001876  0A80               	xorlw	128
  6752  001878  582E               	subwfb	(??_strtol+2)& (0+255),w,c
  6753  00187A  B0D8               	btfsc	status,0,c
  6754  00187C  D029               	goto	l2192
  6755                           
  6756                           ; BSR set to: 0
  6757                           
  6758                           ; BSR set to: 0
  6759                           
  6760                           ; BSR set to: 0
  6761  00187E  C02A  F01A         	movff	strtol@base,___lmul@multiplier
  6762  001882  C02B  F01B         	movff	strtol@base+1,___lmul@multiplier+1
  6763  001886  0E00               	movlw	0
  6764  001888  BE1B               	btfsc	___lmul@multiplier+1,7,c
  6765  00188A  0EFF               	movlw	-1
  6766  00188C  6E1C               	movwf	___lmul@multiplier+2,c
  6767  00188E  6E1D               	movwf	___lmul@multiplier+3,c
  6768  001890  C061  F01E         	movff	strtol@a,___lmul@multiplicand
  6769  001894  C062  F01F         	movff	strtol@a+1,___lmul@multiplicand+1
  6770  001898  C063  F020         	movff	strtol@a+2,___lmul@multiplicand+2
  6771  00189C  C064  F021         	movff	strtol@a+3,___lmul@multiplicand+3
  6772  0018A0  ECFC  F01C         	call	___lmul	;wreg free
  6773  0018A4  0100               	movlb	0	; () banked
  6774  0018A6  5165               	movf	strtol@c& (0+255),w,b
  6775  0018A8  241A               	addwf	?___lmul,w,c
  6776  0018AA  6F61               	movwf	strtol@a& (0+255),b
  6777  0018AC  0E00               	movlw	0
  6778  0018AE  201B               	addwfc	?___lmul+1,w,c
  6779  0018B0  6F62               	movwf	(strtol@a+1)& (0+255),b
  6780  0018B2  0E00               	movlw	0
  6781  0018B4  201C               	addwfc	?___lmul+2,w,c
  6782  0018B6  6F63               	movwf	(strtol@a+2)& (0+255),b
  6783  0018B8  0E00               	movlw	0
  6784  0018BA  201D               	addwfc	?___lmul+3,w,c
  6785  0018BC  6F64               	movwf	(strtol@a+3)& (0+255),b
  6786                           
  6787                           ; BSR set to: 0
  6788  0018BE  C026  FFD9         	movff	strtol@s,fsr2l
  6789  0018C2  C027  FFDA         	movff	strtol@s+1,fsr2h
  6790  0018C6  50DF               	movf	indf2,w,c
  6791  0018C8  6F65               	movwf	strtol@c& (0+255),b
  6792                           
  6793                           ; BSR set to: 0
  6794  0018CA  4A26               	infsnz	strtol@s,f,c
  6795  0018CC  2A27               	incf	strtol@s+1,f,c
  6796  0018CE  D7B4               	goto	l2186
  6797  0018D0                     l2192:
  6798                           
  6799                           ; BSR set to: 0
  6800  0018D0  5028               	movf	strtol@endptr,w,c
  6801  0018D2  1029               	iorwf	strtol@endptr+1,w,c
  6802  0018D4  B4D8               	btfsc	status,2,c
  6803  0018D6  D00E               	goto	l2194
  6804  0018D8  0EFF               	movlw	255
  6805  0018DA  2426               	addwf	strtol@s,w,c
  6806  0018DC  6E2C               	movwf	??_strtol& (0+255),c
  6807  0018DE  0EFF               	movlw	255
  6808  0018E0  2027               	addwfc	strtol@s+1,w,c
  6809  0018E2  6E2D               	movwf	(??_strtol+1)& (0+255),c
  6810  0018E4  C028  FFD9         	movff	strtol@endptr,fsr2l
  6811  0018E8  C029  FFDA         	movff	strtol@endptr+1,fsr2h
  6812  0018EC  C02C  FFDE         	movff	??_strtol,postinc2
  6813  0018F0  C02D  FFDD         	movff	??_strtol+1,postdec2
  6814  0018F4                     l2194:
  6815  0018F4  0100               	movlb	0	; () banked
  6816  0018F6  5160               	movf	strtol@sign& (0+255),w,b
  6817  0018F8  B4D8               	btfsc	status,2,c
  6818  0018FA  D01A               	goto	l2195
  6819                           
  6820                           ; BSR set to: 0
  6821  0018FC  C061  F02C         	movff	strtol@a,??_strtol
  6822  001900  C062  F02D         	movff	strtol@a+1,??_strtol+1
  6823  001904  C063  F02E         	movff	strtol@a+2,??_strtol+2
  6824  001908  C064  F02F         	movff	strtol@a+3,??_strtol+3
  6825  00190C  1E2C               	comf	??_strtol,f,c
  6826  00190E  1E2D               	comf	??_strtol+1,f,c
  6827  001910  1E2E               	comf	??_strtol+2,f,c
  6828  001912  1E2F               	comf	??_strtol+3,f,c
  6829  001914  2A2C               	incf	??_strtol,f,c
  6830  001916  0E00               	movlw	0
  6831  001918  222D               	addwfc	??_strtol+1,f,c
  6832  00191A  222E               	addwfc	??_strtol+2,f,c
  6833  00191C  222F               	addwfc	??_strtol+3,f,c
  6834  00191E  C02C  F026         	movff	??_strtol,?_strtol
  6835  001922  C02D  F027         	movff	??_strtol+1,?_strtol+1
  6836  001926  C02E  F028         	movff	??_strtol+2,?_strtol+2
  6837  00192A  C02F  F029         	movff	??_strtol+3,?_strtol+3
  6838                           
  6839                           ; BSR set to: 0
  6840  00192E  0012               	return	
  6841  001930                     l2195:
  6842                           
  6843                           ; BSR set to: 0
  6844  001930  C061  F026         	movff	strtol@a,?_strtol
  6845  001934  C062  F027         	movff	strtol@a+1,?_strtol+1
  6846  001938  C063  F028         	movff	strtol@a+2,?_strtol+2
  6847  00193C  C064  F029         	movff	strtol@a+3,?_strtol+3
  6848                           
  6849                           ; BSR set to: 0
  6850  001940  0012               	return		;funcret
  6851  001942                     __end_of_strtol:
  6852                           	opt stack 0
  6853                           tosu	equ	0xFFF
  6854                           tosh	equ	0xFFE
  6855                           tosl	equ	0xFFD
  6856                           pclath	equ	0xFFA
  6857                           tblptru	equ	0xFF8
  6858                           tblptrh	equ	0xFF7
  6859                           tblptrl	equ	0xFF6
  6860                           tablat	equ	0xFF5
  6861                           prodh	equ	0xFF4
  6862                           prodl	equ	0xFF3
  6863                           postinc0	equ	0xFEE
  6864                           plusw0	equ	0xFEB
  6865                           wreg	equ	0xFE8
  6866                           indf1	equ	0xFE7
  6867                           postdec1	equ	0xFE5
  6868                           fsr1h	equ	0xFE2
  6869                           fsr1l	equ	0xFE1
  6870                           indf2	equ	0xFDF
  6871                           postinc2	equ	0xFDE
  6872                           postdec2	equ	0xFDD
  6873                           plusw2	equ	0xFDB
  6874                           fsr2h	equ	0xFDA
  6875                           fsr2l	equ	0xFD9
  6876                           status	equ	0xFD8
  6877                           
  6878 ;; *************** function _toupper *****************
  6879 ;; Defined at:
  6880 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\toupper.c"
  6881 ;; Parameters:    Size  Location     Type
  6882 ;;  c               1    wreg     unsigned char 
  6883 ;; Auto vars:     Size  Location     Type
  6884 ;;  c               1   23[COMRAM] unsigned char 
  6885 ;; Return value:  Size  Location     Type
  6886 ;;                  1    wreg      unsigned char 
  6887 ;; Registers used:
  6888 ;;		wreg, status,2, status,0
  6889 ;; Tracked objects:
  6890 ;;		On entry : 0/0
  6891 ;;		On exit  : 0/0
  6892 ;;		Unchanged: 0/0
  6893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6894 ;;      Params:         0       0       0       0       0       0       0
  6895 ;;      Locals:         1       0       0       0       0       0       0
  6896 ;;      Temps:          0       0       0       0       0       0       0
  6897 ;;      Totals:         1       0       0       0       0       0       0
  6898 ;;Total ram usage:        1 bytes
  6899 ;; Hardware stack levels used:    1
  6900 ;; Hardware stack levels required when called:    4
  6901 ;; This function calls:
  6902 ;;		Nothing
  6903 ;; This function is called by:
  6904 ;;		_strtol
  6905 ;; This function uses a non-reentrant model
  6906 ;;
  6907                           
  6908                           	psect	text22
  6909  0042A4                     __ptext22:
  6910                           	opt stack 0
  6911  0042A4                     _toupper:
  6912                           	opt stack 21
  6913                           
  6914                           ; BSR set to: 0
  6915                           ;incstack = 0
  6916                           ;toupper@c stored from wreg
  6917  0042A4  6E18               	movwf	toupper@c,c
  6918  0042A6  0E7B               	movlw	123
  6919  0042A8  6018               	cpfslt	toupper@c,c
  6920  0042AA  D004               	goto	l2199
  6921  0042AC  0E60               	movlw	96
  6922  0042AE  6418               	cpfsgt	toupper@c,c
  6923  0042B0  D001               	goto	l2199
  6924  0042B2  9A18               	bcf	toupper@c,5,c
  6925  0042B4                     l2199:
  6926  0042B4  5018               	movf	toupper@c,w,c
  6927  0042B6  0012               	return	
  6928  0042B8                     __end_of_toupper:
  6929                           	opt stack 0
  6930                           tosu	equ	0xFFF
  6931                           tosh	equ	0xFFE
  6932                           tosl	equ	0xFFD
  6933                           pclath	equ	0xFFA
  6934                           tblptru	equ	0xFF8
  6935                           tblptrh	equ	0xFF7
  6936                           tblptrl	equ	0xFF6
  6937                           tablat	equ	0xFF5
  6938                           prodh	equ	0xFF4
  6939                           prodl	equ	0xFF3
  6940                           postinc0	equ	0xFEE
  6941                           plusw0	equ	0xFEB
  6942                           wreg	equ	0xFE8
  6943                           indf1	equ	0xFE7
  6944                           postdec1	equ	0xFE5
  6945                           fsr1h	equ	0xFE2
  6946                           fsr1l	equ	0xFE1
  6947                           indf2	equ	0xFDF
  6948                           postinc2	equ	0xFDE
  6949                           postdec2	equ	0xFDD
  6950                           plusw2	equ	0xFDB
  6951                           fsr2h	equ	0xFDA
  6952                           fsr2l	equ	0xFD9
  6953                           status	equ	0xFD8
  6954                           
  6955 ;; *************** function _isspace *****************
  6956 ;; Defined at:
  6957 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isspace.c"
  6958 ;; Parameters:    Size  Location     Type
  6959 ;;  c               1    wreg     unsigned char 
  6960 ;; Auto vars:     Size  Location     Type
  6961 ;;  c               1   25[COMRAM] unsigned char 
  6962 ;; Return value:  Size  Location     Type
  6963 ;;		None               void
  6964 ;; Registers used:
  6965 ;;		wreg, status,2, status,0
  6966 ;; Tracked objects:
  6967 ;;		On entry : 0/0
  6968 ;;		On exit  : 0/0
  6969 ;;		Unchanged: 0/0
  6970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6971 ;;      Params:         0       0       0       0       0       0       0
  6972 ;;      Locals:         2       0       0       0       0       0       0
  6973 ;;      Temps:          1       0       0       0       0       0       0
  6974 ;;      Totals:         3       0       0       0       0       0       0
  6975 ;;Total ram usage:        3 bytes
  6976 ;; Hardware stack levels used:    1
  6977 ;; Hardware stack levels required when called:    4
  6978 ;; This function calls:
  6979 ;;		Nothing
  6980 ;; This function is called by:
  6981 ;;		_strtol
  6982 ;; This function uses a non-reentrant model
  6983 ;;
  6984                           
  6985                           	psect	text23
  6986  004098                     __ptext23:
  6987                           	opt stack 0
  6988  004098                     _isspace:
  6989                           	opt stack 21
  6990                           
  6991                           ;incstack = 0
  6992                           ;isspace@c stored from wreg
  6993  004098  6E1A               	movwf	isspace@c,c
  6994  00409A  0E01               	movlw	1
  6995  00409C  6E19               	movwf	_isspace$3320,c
  6996  00409E  0E20               	movlw	32
  6997  0040A0  181A               	xorwf	isspace@c,w,c
  6998  0040A2  B4D8               	btfsc	status,2,c
  6999  0040A4  D008               	goto	l2281
  7000  0040A6  0E0E               	movlw	14
  7001  0040A8  601A               	cpfslt	isspace@c,c
  7002  0040AA  D003               	goto	u7580
  7003  0040AC  0E09               	movlw	9
  7004  0040AE  601A               	cpfslt	isspace@c,c
  7005  0040B0  D002               	goto	l2281
  7006  0040B2                     u7580:
  7007  0040B2  0E00               	movlw	0
  7008  0040B4  6E19               	movwf	_isspace$3320,c
  7009  0040B6                     l2281:
  7010  0040B6  C019  F018         	movff	_isspace$3320,??_isspace
  7011  0040BA  3018               	rrcf	??_isspace,w,c
  7012  0040BC  0012               	return	
  7013  0040BE                     __end_of_isspace:
  7014                           	opt stack 0
  7015                           tosu	equ	0xFFF
  7016                           tosh	equ	0xFFE
  7017                           tosl	equ	0xFFD
  7018                           pclath	equ	0xFFA
  7019                           tblptru	equ	0xFF8
  7020                           tblptrh	equ	0xFF7
  7021                           tblptrl	equ	0xFF6
  7022                           tablat	equ	0xFF5
  7023                           prodh	equ	0xFF4
  7024                           prodl	equ	0xFF3
  7025                           postinc0	equ	0xFEE
  7026                           plusw0	equ	0xFEB
  7027                           wreg	equ	0xFE8
  7028                           indf1	equ	0xFE7
  7029                           postdec1	equ	0xFE5
  7030                           fsr1h	equ	0xFE2
  7031                           fsr1l	equ	0xFE1
  7032                           indf2	equ	0xFDF
  7033                           postinc2	equ	0xFDE
  7034                           postdec2	equ	0xFDD
  7035                           plusw2	equ	0xFDB
  7036                           fsr2h	equ	0xFDA
  7037                           fsr2l	equ	0xFD9
  7038                           status	equ	0xFD8
  7039                           
  7040 ;; *************** function _isdigit *****************
  7041 ;; Defined at:
  7042 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  7043 ;; Parameters:    Size  Location     Type
  7044 ;;  c               1    wreg     unsigned char 
  7045 ;; Auto vars:     Size  Location     Type
  7046 ;;  c               1   25[COMRAM] unsigned char 
  7047 ;; Return value:  Size  Location     Type
  7048 ;;		None               void
  7049 ;; Registers used:
  7050 ;;		wreg, status,2, status,0
  7051 ;; Tracked objects:
  7052 ;;		On entry : 0/0
  7053 ;;		On exit  : 0/0
  7054 ;;		Unchanged: 0/0
  7055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7056 ;;      Params:         0       0       0       0       0       0       0
  7057 ;;      Locals:         2       0       0       0       0       0       0
  7058 ;;      Temps:          1       0       0       0       0       0       0
  7059 ;;      Totals:         3       0       0       0       0       0       0
  7060 ;;Total ram usage:        3 bytes
  7061 ;; Hardware stack levels used:    1
  7062 ;; Hardware stack levels required when called:    4
  7063 ;; This function calls:
  7064 ;;		Nothing
  7065 ;; This function is called by:
  7066 ;;		_strtol
  7067 ;; This function uses a non-reentrant model
  7068 ;;
  7069                           
  7070                           	psect	text24
  7071  0041B4                     __ptext24:
  7072                           	opt stack 0
  7073  0041B4                     _isdigit:
  7074                           	opt stack 21
  7075                           
  7076                           ;incstack = 0
  7077                           ;isdigit@c stored from wreg
  7078  0041B4  6E1A               	movwf	isdigit@c,c
  7079  0041B6  0E00               	movlw	0
  7080  0041B8  6E19               	movwf	_isdigit$3317,c
  7081  0041BA  0E3A               	movlw	58
  7082  0041BC  601A               	cpfslt	isdigit@c,c
  7083  0041BE  D005               	goto	l2276
  7084  0041C0  0E2F               	movlw	47
  7085  0041C2  641A               	cpfsgt	isdigit@c,c
  7086  0041C4  D002               	goto	l2276
  7087  0041C6  0E01               	movlw	1
  7088  0041C8  6E19               	movwf	_isdigit$3317,c
  7089  0041CA                     l2276:
  7090  0041CA  C019  F018         	movff	_isdigit$3317,??_isdigit
  7091  0041CE  3018               	rrcf	??_isdigit,w,c
  7092  0041D0  0012               	return	
  7093  0041D2                     __end_of_isdigit:
  7094                           	opt stack 0
  7095                           tosu	equ	0xFFF
  7096                           tosh	equ	0xFFE
  7097                           tosl	equ	0xFFD
  7098                           pclath	equ	0xFFA
  7099                           tblptru	equ	0xFF8
  7100                           tblptrh	equ	0xFF7
  7101                           tblptrl	equ	0xFF6
  7102                           tablat	equ	0xFF5
  7103                           prodh	equ	0xFF4
  7104                           prodl	equ	0xFF3
  7105                           postinc0	equ	0xFEE
  7106                           plusw0	equ	0xFEB
  7107                           wreg	equ	0xFE8
  7108                           indf1	equ	0xFE7
  7109                           postdec1	equ	0xFE5
  7110                           fsr1h	equ	0xFE2
  7111                           fsr1l	equ	0xFE1
  7112                           indf2	equ	0xFDF
  7113                           postinc2	equ	0xFDE
  7114                           postdec2	equ	0xFDD
  7115                           plusw2	equ	0xFDB
  7116                           fsr2h	equ	0xFDA
  7117                           fsr2l	equ	0xFD9
  7118                           status	equ	0xFD8
  7119                           
  7120 ;; *************** function _isalpha *****************
  7121 ;; Defined at:
  7122 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isalpha.c"
  7123 ;; Parameters:    Size  Location     Type
  7124 ;;  c               1    wreg     unsigned char 
  7125 ;; Auto vars:     Size  Location     Type
  7126 ;;  c               1   28[COMRAM] unsigned char 
  7127 ;; Return value:  Size  Location     Type
  7128 ;;		None               void
  7129 ;; Registers used:
  7130 ;;		wreg, status,2, status,0, cstack
  7131 ;; Tracked objects:
  7132 ;;		On entry : 0/0
  7133 ;;		On exit  : 0/0
  7134 ;;		Unchanged: 0/0
  7135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7136 ;;      Params:         0       0       0       0       0       0       0
  7137 ;;      Locals:         2       0       0       0       0       0       0
  7138 ;;      Temps:          1       0       0       0       0       0       0
  7139 ;;      Totals:         3       0       0       0       0       0       0
  7140 ;;Total ram usage:        3 bytes
  7141 ;; Hardware stack levels used:    1
  7142 ;; Hardware stack levels required when called:    5
  7143 ;; This function calls:
  7144 ;;		_isupper
  7145 ;; This function is called by:
  7146 ;;		_strtol
  7147 ;; This function uses a non-reentrant model
  7148 ;;
  7149                           
  7150                           	psect	text25
  7151  004070                     __ptext25:
  7152                           	opt stack 0
  7153  004070                     _isalpha:
  7154                           	opt stack 20
  7155                           
  7156                           ;incstack = 0
  7157                           ;isalpha@c stored from wreg
  7158  004070  6E1D               	movwf	isalpha@c,c
  7159  004072  0E01               	movlw	1
  7160  004074  6E1C               	movwf	_isalpha$3314,c
  7161  004076  0E7B               	movlw	123
  7162  004078  601D               	cpfslt	isalpha@c,c
  7163  00407A  D003               	goto	u7600
  7164  00407C  0E61               	movlw	97
  7165  00407E  601D               	cpfslt	isalpha@c,c
  7166  004080  D007               	goto	l2271
  7167  004082                     u7600:
  7168  004082  501D               	movf	isalpha@c,w,c
  7169  004084  ECE9  F020         	call	_isupper
  7170  004088  B0D8               	btfsc	status,0,c
  7171  00408A  D002               	goto	l2271
  7172  00408C  0E00               	movlw	0
  7173  00408E  6E1C               	movwf	_isalpha$3314,c
  7174  004090                     l2271:
  7175  004090  C01C  F01B         	movff	_isalpha$3314,??_isalpha
  7176  004094  301B               	rrcf	??_isalpha,w,c
  7177  004096  0012               	return	
  7178  004098                     __end_of_isalpha:
  7179                           	opt stack 0
  7180                           tosu	equ	0xFFF
  7181                           tosh	equ	0xFFE
  7182                           tosl	equ	0xFFD
  7183                           pclath	equ	0xFFA
  7184                           tblptru	equ	0xFF8
  7185                           tblptrh	equ	0xFF7
  7186                           tblptrl	equ	0xFF6
  7187                           tablat	equ	0xFF5
  7188                           prodh	equ	0xFF4
  7189                           prodl	equ	0xFF3
  7190                           postinc0	equ	0xFEE
  7191                           plusw0	equ	0xFEB
  7192                           wreg	equ	0xFE8
  7193                           indf1	equ	0xFE7
  7194                           postdec1	equ	0xFE5
  7195                           fsr1h	equ	0xFE2
  7196                           fsr1l	equ	0xFE1
  7197                           indf2	equ	0xFDF
  7198                           postinc2	equ	0xFDE
  7199                           postdec2	equ	0xFDD
  7200                           plusw2	equ	0xFDB
  7201                           fsr2h	equ	0xFDA
  7202                           fsr2l	equ	0xFD9
  7203                           status	equ	0xFD8
  7204                           
  7205 ;; *************** function _isupper *****************
  7206 ;; Defined at:
  7207 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isupper.c"
  7208 ;; Parameters:    Size  Location     Type
  7209 ;;  c               1    wreg     unsigned char 
  7210 ;; Auto vars:     Size  Location     Type
  7211 ;;  c               1   25[COMRAM] unsigned char 
  7212 ;; Return value:  Size  Location     Type
  7213 ;;		None               void
  7214 ;; Registers used:
  7215 ;;		wreg, status,2, status,0
  7216 ;; Tracked objects:
  7217 ;;		On entry : 0/0
  7218 ;;		On exit  : 0/0
  7219 ;;		Unchanged: 0/0
  7220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7221 ;;      Params:         0       0       0       0       0       0       0
  7222 ;;      Locals:         2       0       0       0       0       0       0
  7223 ;;      Temps:          1       0       0       0       0       0       0
  7224 ;;      Totals:         3       0       0       0       0       0       0
  7225 ;;Total ram usage:        3 bytes
  7226 ;; Hardware stack levels used:    1
  7227 ;; Hardware stack levels required when called:    4
  7228 ;; This function calls:
  7229 ;;		Nothing
  7230 ;; This function is called by:
  7231 ;;		_isalpha
  7232 ;; This function uses a non-reentrant model
  7233 ;;
  7234                           
  7235                           	psect	text26
  7236  0041D2                     __ptext26:
  7237                           	opt stack 0
  7238  0041D2                     _isupper:
  7239                           	opt stack 20
  7240                           
  7241                           ;incstack = 0
  7242                           ;isupper@c stored from wreg
  7243  0041D2  6E1A               	movwf	isupper@c,c
  7244  0041D4  0E00               	movlw	0
  7245  0041D6  6E19               	movwf	_isupper$3323,c
  7246  0041D8  0E5B               	movlw	91
  7247  0041DA  601A               	cpfslt	isupper@c,c
  7248  0041DC  D005               	goto	l2286
  7249  0041DE  0E40               	movlw	64
  7250  0041E0  641A               	cpfsgt	isupper@c,c
  7251  0041E2  D002               	goto	l2286
  7252  0041E4  0E01               	movlw	1
  7253  0041E6  6E19               	movwf	_isupper$3323,c
  7254  0041E8                     l2286:
  7255  0041E8  C019  F018         	movff	_isupper$3323,??_isupper
  7256  0041EC  3018               	rrcf	??_isupper,w,c
  7257  0041EE  0012               	return	
  7258  0041F0                     __end_of_isupper:
  7259                           	opt stack 0
  7260                           tosu	equ	0xFFF
  7261                           tosh	equ	0xFFE
  7262                           tosl	equ	0xFFD
  7263                           pclath	equ	0xFFA
  7264                           tblptru	equ	0xFF8
  7265                           tblptrh	equ	0xFF7
  7266                           tblptrl	equ	0xFF6
  7267                           tablat	equ	0xFF5
  7268                           prodh	equ	0xFF4
  7269                           prodl	equ	0xFF3
  7270                           postinc0	equ	0xFEE
  7271                           plusw0	equ	0xFEB
  7272                           wreg	equ	0xFE8
  7273                           indf1	equ	0xFE7
  7274                           postdec1	equ	0xFE5
  7275                           fsr1h	equ	0xFE2
  7276                           fsr1l	equ	0xFE1
  7277                           indf2	equ	0xFDF
  7278                           postinc2	equ	0xFDE
  7279                           postdec2	equ	0xFDD
  7280                           plusw2	equ	0xFDB
  7281                           fsr2h	equ	0xFDA
  7282                           fsr2l	equ	0xFD9
  7283                           status	equ	0xFD8
  7284                           
  7285 ;; *************** function _DacReadValue *****************
  7286 ;; Defined at:
  7287 ;;		line 44 in file "DacApp.c"
  7288 ;; Parameters:    Size  Location     Type
  7289 ;;  data            2  104[BANK0 ] PTR unsigned char 
  7290 ;;		 -> rxMsgData(20), 
  7291 ;; Auto vars:     Size  Location     Type
  7292 ;;  byteIdx         2  120[BANK0 ] int 
  7293 ;;  TxMsg           7  113[BANK0 ] unsigned char [7]
  7294 ;;  readVal         2  110[BANK0 ] unsigned int 
  7295 ;;  dacIndex        1  112[BANK0 ] unsigned char 
  7296 ;;  byteNum         1  109[BANK0 ] unsigned char 
  7297 ;;  regNum          1  108[BANK0 ] unsigned char 
  7298 ;; Return value:  Size  Location     Type
  7299 ;;                  1    wreg      void 
  7300 ;; Registers used:
  7301 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7302 ;; Tracked objects:
  7303 ;;		On entry : 0/0
  7304 ;;		On exit  : 0/0
  7305 ;;		Unchanged: 0/0
  7306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7307 ;;      Params:         0       2       0       0       0       0       0
  7308 ;;      Locals:         0      14       0       0       0       0       0
  7309 ;;      Temps:          0       2       0       0       0       0       0
  7310 ;;      Totals:         0      18       0       0       0       0       0
  7311 ;;Total ram usage:       18 bytes
  7312 ;; Hardware stack levels used:    1
  7313 ;; Hardware stack levels required when called:   10
  7314 ;; This function calls:
  7315 ;;		_ReadIntFromEeprom
  7316 ;;		_WriteUartMessage
  7317 ;;		_ZeroArray
  7318 ;;		_crc8
  7319 ;;		_make8
  7320 ;; This function is called by:
  7321 ;;		_GroupDAC
  7322 ;; This function uses a non-reentrant model
  7323 ;;
  7324                           
  7325                           	psect	text27
  7326  002710                     __ptext27:
  7327                           	opt stack 0
  7328  002710                     _DacReadValue:
  7329                           	opt stack 18
  7330                           
  7331                           ;DacApp.c: 46: uint16_t readVal;
  7332                           ;DacApp.c: 47: uint8_t regNum = 0, byteNum = 0;
  7333                           
  7334                           ;incstack = 0
  7335  002710  0E00               	movlw	0
  7336  002712  0100               	movlb	0	; () banked
  7337  002714  6FCC               	movwf	DacReadValue@regNum& (0+255),b
  7338  002716  0E00               	movlw	0
  7339  002718  6FCD               	movwf	DacReadValue@byteNum& (0+255),b
  7340                           
  7341                           ; BSR set to: 0
  7342                           ;DacApp.c: 48: char TxMsg[2 + (0x4) + 1];
  7343                           ;DacApp.c: 49: ZeroArray(TxMsg, 2 + (0x4) + 1);
  7344  00271A  0ED1               	movlw	low DacReadValue@TxMsg
  7345  00271C  6E20               	movwf	ZeroArray@array,c
  7346  00271E  0E00               	movlw	high DacReadValue@TxMsg
  7347  002720  6E21               	movwf	ZeroArray@array+1,c
  7348  002722  0E00               	movlw	0
  7349  002724  6E23               	movwf	ZeroArray@size+1,c
  7350  002726  0E07               	movlw	7
  7351  002728  6E22               	movwf	ZeroArray@size,c
  7352  00272A  ECF8  F020         	call	_ZeroArray	;wreg free
  7353                           
  7354                           ;DacApp.c: 52: TxMsg[(0)] = (0x24);
  7355  00272E  0E24               	movlw	36
  7356  002730  0100               	movlb	0	; () banked
  7357  002732  6FD1               	movwf	DacReadValue@TxMsg& (0+255),b
  7358                           
  7359                           ; BSR set to: 0
  7360                           ;DacApp.c: 53: TxMsg[(1)] = DAC_MSG;
  7361  002734  0E06               	movlw	6
  7362  002736  6FD2               	movwf	(DacReadValue@TxMsg+1)& (0+255),b
  7363                           
  7364                           ; BSR set to: 0
  7365                           ;DacApp.c: 54: TxMsg[(2)] = DAC_READ_VALUE;
  7366  002738  0E62               	movlw	98
  7367  00273A  6FD3               	movwf	(DacReadValue@TxMsg+2)& (0+255),b
  7368                           
  7369                           ; BSR set to: 0
  7370                           ;DacApp.c: 55: TxMsg[(3)] = 2;
  7371  00273C  0E02               	movlw	2
  7372  00273E  6FD4               	movwf	(DacReadValue@TxMsg+3)& (0+255),b
  7373                           
  7374                           ; BSR set to: 0
  7375                           ;DacApp.c: 57: uint8_t dacIndex = data[0];
  7376  002740  C0C8  FFD9         	movff	DacReadValue@data,fsr2l
  7377  002744  C0C9  FFDA         	movff	DacReadValue@data+1,fsr2h
  7378  002748  50DF               	movf	indf2,w,c
  7379  00274A  6FD0               	movwf	DacReadValue@dacIndex& (0+255),b
  7380                           
  7381                           ; BSR set to: 0
  7382                           ;DacApp.c: 58: uint16_t readVal = ReadIntFromEeprom((0x40) | DAC_ADDRES[dacIndex], 2);
  7383  00274C  0E00               	movlw	0
  7384  00274E  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
  7385  002750  0E02               	movlw	2
  7386  002752  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
  7387  002754  51D0               	movf	DacReadValue@dacIndex& (0+255),w,b
  7388  002756  0D01               	mullw	1
  7389  002758  0E53               	movlw	low _DAC_ADDRES
  7390  00275A  24F3               	addwf	prodl,w,c
  7391  00275C  6EF6               	movwf	tblptrl,c
  7392  00275E  0E06               	movlw	high _DAC_ADDRES
  7393  002760  20F4               	addwfc	prodh,w,c
  7394  002762  6EF7               	movwf	tblptrh,c
  7395  002764                     	if	0	;There are less than 3 active tblptr bytes
  7396  002764                     	endif
  7397  002764  0008               	tblrd		*
  7398  002766  50F5               	movf	tablat,w,c
  7399  002768  0940               	iorlw	64
  7400  00276A  EC8B  F00F         	call	_ReadIntFromEeprom
  7401  00276E  C0B1  F0CE         	movff	?_ReadIntFromEeprom,DacReadValue@readVal
  7402  002772  C0B2  F0CF         	movff	?_ReadIntFromEeprom+1,DacReadValue@readVal+1
  7403                           
  7404                           ;DacApp.c: 60: for(int byteIdx = 0; byteIdx < 2; byteIdx++)
  7405  002776  0E00               	movlw	0
  7406  002778  0100               	movlb	0	; () banked
  7407  00277A  6FD9               	movwf	(DacReadValue@byteIdx+1)& (0+255),b
  7408  00277C  0E00               	movlw	0
  7409  00277E  6FD8               	movwf	DacReadValue@byteIdx& (0+255),b
  7410  002780                     l8355:
  7411                           
  7412                           ; BSR set to: 0
  7413  002780  BFD9               	btfsc	(DacReadValue@byteIdx+1)& (0+255),7,b
  7414  002782  D006               	goto	l419
  7415  002784  51D9               	movf	(DacReadValue@byteIdx+1)& (0+255),w,b
  7416  002786  E11F               	bnz	l8365
  7417  002788  0E02               	movlw	2
  7418  00278A  5DD8               	subwf	DacReadValue@byteIdx& (0+255),w,b
  7419  00278C  B0D8               	btfsc	status,0,c
  7420  00278E  D01B               	goto	u8410
  7421  002790                     l419:
  7422                           
  7423                           ; BSR set to: 0
  7424                           ;DacApp.c: 61: {
  7425                           ;DacApp.c: 62: TxMsg[(0x4) + byteIdx] = make8(readVal, byteIdx);
  7426                           
  7427                           ; BSR set to: 0
  7428  002790  0E04               	movlw	4
  7429  002792  25D8               	addwf	DacReadValue@byteIdx& (0+255),w,b
  7430  002794  6FCA               	movwf	??_DacReadValue& (0+255),b
  7431  002796  0E00               	movlw	0
  7432  002798  21D9               	addwfc	(DacReadValue@byteIdx+1)& (0+255),w,b
  7433  00279A  6FCB               	movwf	(??_DacReadValue+1)& (0+255),b
  7434  00279C  0ED1               	movlw	low DacReadValue@TxMsg
  7435  00279E  25CA               	addwf	??_DacReadValue& (0+255),w,b
  7436  0027A0  6ED9               	movwf	fsr2l,c
  7437  0027A2  0E00               	movlw	high DacReadValue@TxMsg
  7438  0027A4  21CB               	addwfc	(??_DacReadValue+1)& (0+255),w,b
  7439  0027A6  6EDA               	movwf	fsr2h,c
  7440  0027A8  C0CE  F018         	movff	DacReadValue@readVal,make8@data
  7441  0027AC  C0CF  F019         	movff	DacReadValue@readVal+1,make8@data+1
  7442  0027B0  6A1A               	clrf	make8@data+2,c
  7443  0027B2  6A1B               	clrf	make8@data+3,c
  7444  0027B4  C0D8  F01C         	movff	DacReadValue@byteIdx,make8@dataLocation
  7445  0027B8  ECF2  F01B         	call	_make8	;wreg free
  7446  0027BC  6EDF               	movwf	indf2,c
  7447  0027BE  0100               	movlb	0	; () banked
  7448  0027C0  4BD8               	infsnz	DacReadValue@byteIdx& (0+255),f,b
  7449  0027C2  2BD9               	incf	(DacReadValue@byteIdx+1)& (0+255),f,b
  7450  0027C4  D7DD               	goto	l8355
  7451  0027C6                     u8410:
  7452  0027C6                     l8365:
  7453                           
  7454                           ; BSR set to: 0
  7455                           ;DacApp.c: 63: }
  7456                           ;DacApp.c: 64: TxMsg[2 + (0x4)] = crc8(TxMsg, 2 + (0x4));
  7457  0027C6  0ED1               	movlw	low DacReadValue@TxMsg
  7458  0027C8  6E18               	movwf	crc8@dataArray,c
  7459  0027CA  0E00               	movlw	high DacReadValue@TxMsg
  7460  0027CC  6E19               	movwf	crc8@dataArray+1,c
  7461  0027CE  0E00               	movlw	0
  7462  0027D0  6E1B               	movwf	crc8@dataSize+1,c
  7463  0027D2  0E06               	movlw	6
  7464  0027D4  6E1A               	movwf	crc8@dataSize,c
  7465  0027D6  EC7A  F01D         	call	_crc8	;wreg free
  7466  0027DA  0100               	movlb	0	; () banked
  7467  0027DC  6FD7               	movwf	(DacReadValue@TxMsg+6)& (0+255),b
  7468                           
  7469                           ; BSR set to: 0
  7470                           ;DacApp.c: 65: WriteUartMessage(TxMsg, 2 + (0x4) + 1);
  7471  0027DE  0ED1               	movlw	low DacReadValue@TxMsg
  7472  0027E0  6E19               	movwf	WriteUartMessage@dataBuf,c
  7473  0027E2  0E00               	movlw	high DacReadValue@TxMsg
  7474  0027E4  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  7475  0027E6  0E00               	movlw	0
  7476  0027E8  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  7477  0027EA  0E07               	movlw	7
  7478  0027EC  6E1B               	movwf	WriteUartMessage@dataSize,c
  7479  0027EE  EC2B  F01F         	call	_WriteUartMessage	;wreg free
  7480  0027F2  0012               	return		;funcret
  7481  0027F4                     __end_of_DacReadValue:
  7482                           	opt stack 0
  7483                           tosu	equ	0xFFF
  7484                           tosh	equ	0xFFE
  7485                           tosl	equ	0xFFD
  7486                           pclath	equ	0xFFA
  7487                           tblptru	equ	0xFF8
  7488                           tblptrh	equ	0xFF7
  7489                           tblptrl	equ	0xFF6
  7490                           tablat	equ	0xFF5
  7491                           prodh	equ	0xFF4
  7492                           prodl	equ	0xFF3
  7493                           postinc0	equ	0xFEE
  7494                           plusw0	equ	0xFEB
  7495                           wreg	equ	0xFE8
  7496                           indf1	equ	0xFE7
  7497                           postdec1	equ	0xFE5
  7498                           fsr1h	equ	0xFE2
  7499                           fsr1l	equ	0xFE1
  7500                           indf2	equ	0xFDF
  7501                           postinc2	equ	0xFDE
  7502                           postdec2	equ	0xFDD
  7503                           plusw2	equ	0xFDB
  7504                           fsr2h	equ	0xFDA
  7505                           fsr2l	equ	0xFD9
  7506                           status	equ	0xFD8
  7507                           
  7508 ;; *************** function _testLeds *****************
  7509 ;; Defined at:
  7510 ;;		line 43 in file "LedsApp.c"
  7511 ;; Parameters:    Size  Location     Type
  7512 ;;		None
  7513 ;; Auto vars:     Size  Location     Type
  7514 ;;  idx             2   44[COMRAM] int 
  7515 ;; Return value:  Size  Location     Type
  7516 ;;                  1    wreg      void 
  7517 ;; Registers used:
  7518 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7519 ;; Tracked objects:
  7520 ;;		On entry : 0/0
  7521 ;;		On exit  : 0/0
  7522 ;;		Unchanged: 0/0
  7523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7524 ;;      Params:         0       0       0       0       0       0       0
  7525 ;;      Locals:         2       0       0       0       0       0       0
  7526 ;;      Temps:          1       0       0       0       0       0       0
  7527 ;;      Totals:         3       0       0       0       0       0       0
  7528 ;;Total ram usage:        3 bytes
  7529 ;; Hardware stack levels used:    1
  7530 ;; Hardware stack levels required when called:    7
  7531 ;; This function calls:
  7532 ;;		_SendAckMessage
  7533 ;; This function is called by:
  7534 ;;		_GroupControlMcu
  7535 ;; This function uses a non-reentrant model
  7536 ;;
  7537                           
  7538                           	psect	text28
  7539  00358C                     __ptext28:
  7540                           	opt stack 0
  7541  00358C                     _testLeds:
  7542                           	opt stack 21
  7543                           
  7544                           ;LedsApp.c: 46: for(int idx = 0; idx < 10; idx++)
  7545                           
  7546                           ;incstack = 0
  7547  00358C  0E00               	movlw	0
  7548  00358E  6E2E               	movwf	testLeds@idx+1,c
  7549  003590  0E00               	movlw	0
  7550  003592  6E2D               	movwf	testLeds@idx,c
  7551  003594                     l8175:
  7552  003594  BE2E               	btfsc	testLeds@idx+1,7,c
  7553  003596  D006               	goto	l60
  7554  003598  502E               	movf	testLeds@idx+1,w,c
  7555  00359A  E127               	bnz	l8189
  7556  00359C  0E0A               	movlw	10
  7557  00359E  5C2D               	subwf	testLeds@idx,w,c
  7558  0035A0  B0D8               	btfsc	status,0,c
  7559  0035A2  D023               	goto	u8230
  7560  0035A4                     l60:
  7561                           
  7562                           ;LedsApp.c: 47: {
  7563                           ;LedsApp.c: 49: LATCbits.LATC0 = 1;
  7564  0035A4  808B               	bsf	3979,0,c	;volatile
  7565                           
  7566                           ;LedsApp.c: 50: _delay((unsigned long)((50)*(8000000/4000.0)));
  7567  0035A6  0E82               	movlw	130
  7568  0035A8  6E2C               	movwf	??_testLeds& (0+255),c
  7569  0035AA  0EDE               	movlw	222
  7570  0035AC                     u9077:
  7571  0035AC  2EE8               	decfsz	wreg,f,c
  7572  0035AE  D7FE               	bra	u9077
  7573  0035B0  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7574  0035B2  D7FC               	bra	u9077
  7575                           
  7576                           ;LedsApp.c: 51: LATBbits.LATB4 = 1;
  7577  0035B4  888A               	bsf	3978,4,c	;volatile
  7578                           
  7579                           ;LedsApp.c: 52: _delay((unsigned long)((50)*(8000000/4000.0)));
  7580  0035B6  0E82               	movlw	130
  7581  0035B8  6E2C               	movwf	??_testLeds& (0+255),c
  7582  0035BA  0EDE               	movlw	222
  7583  0035BC                     u9087:
  7584  0035BC  2EE8               	decfsz	wreg,f,c
  7585  0035BE  D7FE               	bra	u9087
  7586  0035C0  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7587  0035C2  D7FC               	bra	u9087
  7588                           
  7589                           ;LedsApp.c: 53: LATCbits.LATC0 = 0;
  7590  0035C4  908B               	bcf	3979,0,c	;volatile
  7591                           
  7592                           ;LedsApp.c: 54: _delay((unsigned long)((50)*(8000000/4000.0)));
  7593  0035C6  0E82               	movlw	130
  7594  0035C8  6E2C               	movwf	??_testLeds& (0+255),c
  7595  0035CA  0EDE               	movlw	222
  7596  0035CC                     u9097:
  7597  0035CC  2EE8               	decfsz	wreg,f,c
  7598  0035CE  D7FE               	bra	u9097
  7599  0035D0  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7600  0035D2  D7FC               	bra	u9097
  7601                           
  7602                           ;LedsApp.c: 55: LATBbits.LATB4 = 0;
  7603  0035D4  988A               	bcf	3978,4,c	;volatile
  7604                           
  7605                           ;LedsApp.c: 56: _delay((unsigned long)((50)*(8000000/4000.0)));
  7606  0035D6  0E82               	movlw	130
  7607  0035D8  6E2C               	movwf	??_testLeds& (0+255),c
  7608  0035DA  0EDE               	movlw	222
  7609  0035DC                     u9107:
  7610  0035DC  2EE8               	decfsz	wreg,f,c
  7611  0035DE  D7FE               	bra	u9107
  7612  0035E0  2E2C               	decfsz	??_testLeds& (0+255),f,c
  7613  0035E2  D7FC               	bra	u9107
  7614  0035E4  4A2D               	infsnz	testLeds@idx,f,c
  7615  0035E6  2A2E               	incf	testLeds@idx+1,f,c
  7616  0035E8  D7D5               	goto	l8175
  7617  0035EA                     u8230:
  7618  0035EA                     l8189:
  7619                           
  7620                           ;LedsApp.c: 57: }
  7621                           ;LedsApp.c: 59: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_TEST_LEDS);
  7622  0035EA  0E14               	movlw	20
  7623  0035EC  6E24               	movwf	SendAckMessage@inRequest,c
  7624  0035EE  0E01               	movlw	1
  7625  0035F0  EC51  F01D         	call	_SendAckMessage
  7626  0035F4  0012               	return	
  7627  0035F6                     __end_of_testLeds:
  7628                           	opt stack 0
  7629                           tosu	equ	0xFFF
  7630                           tosh	equ	0xFFE
  7631                           tosl	equ	0xFFD
  7632                           pclath	equ	0xFFA
  7633                           tblptru	equ	0xFF8
  7634                           tblptrh	equ	0xFF7
  7635                           tblptrl	equ	0xFF6
  7636                           tablat	equ	0xFF5
  7637                           prodh	equ	0xFF4
  7638                           prodl	equ	0xFF3
  7639                           postinc0	equ	0xFEE
  7640                           plusw0	equ	0xFEB
  7641                           wreg	equ	0xFE8
  7642                           indf1	equ	0xFE7
  7643                           postdec1	equ	0xFE5
  7644                           fsr1h	equ	0xFE2
  7645                           fsr1l	equ	0xFE1
  7646                           indf2	equ	0xFDF
  7647                           postinc2	equ	0xFDE
  7648                           postdec2	equ	0xFDD
  7649                           plusw2	equ	0xFDB
  7650                           fsr2h	equ	0xFDA
  7651                           fsr2l	equ	0xFD9
  7652                           status	equ	0xFD8
  7653                           
  7654 ;; *************** function _ResetMcu *****************
  7655 ;; Defined at:
  7656 ;;		line 144 in file "SystemCommon.c"
  7657 ;; Parameters:    Size  Location     Type
  7658 ;;		None
  7659 ;; Auto vars:     Size  Location     Type
  7660 ;;		None
  7661 ;; Return value:  Size  Location     Type
  7662 ;;                  1    wreg      void 
  7663 ;; Registers used:
  7664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7665 ;; Tracked objects:
  7666 ;;		On entry : 0/0
  7667 ;;		On exit  : 0/0
  7668 ;;		Unchanged: 0/0
  7669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7670 ;;      Params:         0       0       0       0       0       0       0
  7671 ;;      Locals:         0       0       0       0       0       0       0
  7672 ;;      Temps:          0       0       0       0       0       0       0
  7673 ;;      Totals:         0       0       0       0       0       0       0
  7674 ;;Total ram usage:        0 bytes
  7675 ;; Hardware stack levels used:    1
  7676 ;; Hardware stack levels required when called:    7
  7677 ;; This function calls:
  7678 ;;		_SendAckMessage
  7679 ;; This function is called by:
  7680 ;;		_GroupControlMcu
  7681 ;; This function uses a non-reentrant model
  7682 ;;
  7683                           
  7684                           	psect	text29
  7685  004312                     __ptext29:
  7686                           	opt stack 0
  7687  004312                     _ResetMcu:
  7688                           	opt stack 21
  7689                           
  7690                           ;SystemCommon.c: 147: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_RESET
      +                          _MCU);
  7691                           
  7692                           ;incstack = 0
  7693  004312  0E11               	movlw	17
  7694  004314  6E24               	movwf	SendAckMessage@inRequest,c
  7695  004316  0E01               	movlw	1
  7696  004318  EC51  F01D         	call	_SendAckMessage
  7697  00431C  00FF               	reset		;# 
  7698  00431E  0012               	return		;funcret
  7699  004320                     __end_of_ResetMcu:
  7700                           	opt stack 0
  7701                           tosu	equ	0xFFF
  7702                           tosh	equ	0xFFE
  7703                           tosl	equ	0xFFD
  7704                           pclath	equ	0xFFA
  7705                           tblptru	equ	0xFF8
  7706                           tblptrh	equ	0xFF7
  7707                           tblptrl	equ	0xFF6
  7708                           tablat	equ	0xFF5
  7709                           prodh	equ	0xFF4
  7710                           prodl	equ	0xFF3
  7711                           postinc0	equ	0xFEE
  7712                           plusw0	equ	0xFEB
  7713                           wreg	equ	0xFE8
  7714                           indf1	equ	0xFE7
  7715                           postdec1	equ	0xFE5
  7716                           fsr1h	equ	0xFE2
  7717                           fsr1l	equ	0xFE1
  7718                           indf2	equ	0xFDF
  7719                           postinc2	equ	0xFDE
  7720                           postdec2	equ	0xFDD
  7721                           plusw2	equ	0xFDB
  7722                           fsr2h	equ	0xFDA
  7723                           fsr2l	equ	0xFD9
  7724                           status	equ	0xFD8
  7725                           
  7726 ;; *************** function _SetChannelMode *****************
  7727 ;; Defined at:
  7728 ;;		line 30 in file "AdcApp.c"
  7729 ;; Parameters:    Size  Location     Type
  7730 ;;  data            2   43[COMRAM] PTR unsigned char 
  7731 ;; Auto vars:     Size  Location     Type
  7732 ;;		None
  7733 ;; Return value:  Size  Location     Type
  7734 ;;                  1    wreg      void 
  7735 ;; Registers used:
  7736 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7737 ;; Tracked objects:
  7738 ;;		On entry : 0/0
  7739 ;;		On exit  : 0/0
  7740 ;;		Unchanged: 0/0
  7741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7742 ;;      Params:         2       0       0       0       0       0       0
  7743 ;;      Locals:         0       0       0       0       0       0       0
  7744 ;;      Temps:          0       0       0       0       0       0       0
  7745 ;;      Totals:         2       0       0       0       0       0       0
  7746 ;;Total ram usage:        2 bytes
  7747 ;; Hardware stack levels used:    1
  7748 ;; Hardware stack levels required when called:    7
  7749 ;; This function calls:
  7750 ;;		_SendAckMessage
  7751 ;; This function is called by:
  7752 ;;		_GroupAdc
  7753 ;; This function uses a non-reentrant model
  7754 ;;
  7755                           
  7756                           	psect	text30
  7757  003F8E                     __ptext30:
  7758                           	opt stack 0
  7759  003F8E                     _SetChannelMode:
  7760                           	opt stack 21
  7761                           
  7762                           ;AdcApp.c: 32: adcSampleMode = data[0];
  7763                           
  7764                           ;incstack = 0
  7765  003F8E  C02C  FFD9         	movff	SetChannelMode@data,fsr2l
  7766  003F92  C02D  FFDA         	movff	SetChannelMode@data+1,fsr2h
  7767  003F96  50DF               	movf	indf2,w,c
  7768  003F98  6E3D               	movwf	_adcSampleMode,c
  7769                           
  7770                           ;AdcApp.c: 33: if (adcSampleMode == SINGLE_CHANNEL)
  7771  003F9A  043D               	decf	_adcSampleMode,w,c
  7772  003F9C  A4D8               	btfss	status,2,c
  7773  003F9E  D009               	goto	l122
  7774                           
  7775                           ;AdcApp.c: 34: {
  7776                           ;AdcApp.c: 35: channel = data[1];
  7777  003FA0  EE20 F001          	lfsr	2,1
  7778  003FA4  502C               	movf	SetChannelMode@data,w,c
  7779  003FA6  26D9               	addwf	fsr2l,f,c
  7780  003FA8  502D               	movf	SetChannelMode@data+1,w,c
  7781  003FAA  22DA               	addwfc	fsr2h,f,c
  7782  003FAC  50DF               	movf	indf2,w,c
  7783  003FAE  0100               	movlb	0	; () banked
  7784  003FB0  6FFA               	movwf	_channel& (0+255),b
  7785  003FB2                     l122:
  7786                           
  7787                           ;AdcApp.c: 36: }
  7788                           ;AdcApp.c: 37: SendAckMessage((MSG_GROUPS)ADC_MSG, (MSG_REQUEST)ADC_CHANNEL_MODE);
  7789                           
  7790                           ; BSR set to: 0
  7791  003FB2  0E32               	movlw	50
  7792  003FB4  6E24               	movwf	SendAckMessage@inRequest,c
  7793  003FB6  0E03               	movlw	3
  7794  003FB8  EC51  F01D         	call	_SendAckMessage
  7795  003FBC  0012               	return		;funcret
  7796  003FBE                     __end_of_SetChannelMode:
  7797                           	opt stack 0
  7798                           tosu	equ	0xFFF
  7799                           tosh	equ	0xFFE
  7800                           tosl	equ	0xFFD
  7801                           pclath	equ	0xFFA
  7802                           tblptru	equ	0xFF8
  7803                           tblptrh	equ	0xFF7
  7804                           tblptrl	equ	0xFF6
  7805                           tablat	equ	0xFF5
  7806                           prodh	equ	0xFF4
  7807                           prodl	equ	0xFF3
  7808                           postinc0	equ	0xFEE
  7809                           plusw0	equ	0xFEB
  7810                           wreg	equ	0xFE8
  7811                           indf1	equ	0xFE7
  7812                           postdec1	equ	0xFE5
  7813                           fsr1h	equ	0xFE2
  7814                           fsr1l	equ	0xFE1
  7815                           indf2	equ	0xFDF
  7816                           postinc2	equ	0xFDE
  7817                           postdec2	equ	0xFDD
  7818                           plusw2	equ	0xFDB
  7819                           fsr2h	equ	0xFDA
  7820                           fsr2l	equ	0xFD9
  7821                           status	equ	0xFD8
  7822                           
  7823 ;; *************** function _EUSART1_Read *****************
  7824 ;; Defined at:
  7825 ;;		line 110 in file "mcc_generated_files/eusart1.c"
  7826 ;; Parameters:    Size  Location     Type
  7827 ;;		None
  7828 ;; Auto vars:     Size  Location     Type
  7829 ;;  readValue       2   24[COMRAM] unsigned int 
  7830 ;; Return value:  Size  Location     Type
  7831 ;;                  1    wreg      unsigned char 
  7832 ;; Registers used:
  7833 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7834 ;; Tracked objects:
  7835 ;;		On entry : 0/0
  7836 ;;		On exit  : 0/0
  7837 ;;		Unchanged: 0/0
  7838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7839 ;;      Params:         0       0       0       0       0       0       0
  7840 ;;      Locals:         2       0       0       0       0       0       0
  7841 ;;      Temps:          1       0       0       0       0       0       0
  7842 ;;      Totals:         3       0       0       0       0       0       0
  7843 ;;Total ram usage:        3 bytes
  7844 ;; Hardware stack levels used:    1
  7845 ;; Hardware stack levels required when called:    4
  7846 ;; This function calls:
  7847 ;;		Nothing
  7848 ;; This function is called by:
  7849 ;;		_readUartMessage
  7850 ;; This function uses a non-reentrant model
  7851 ;;
  7852                           
  7853                           	psect	text31
  7854  003B42                     __ptext31:
  7855                           	opt stack 0
  7856  003B42                     _EUSART1_Read:
  7857                           	opt stack 25
  7858                           
  7859                           ;eusart1.c: 112: uint16_t readValue = 0;
  7860                           
  7861                           ;incstack = 0
  7862  003B42  0E00               	movlw	0
  7863  003B44  6E1A               	movwf	EUSART1_Read@readValue+1,c
  7864  003B46  0E00               	movlw	0
  7865  003B48  6E19               	movwf	EUSART1_Read@readValue,c
  7866                           
  7867                           ;eusart1.c: 119: if (eusart1RxCount == 0)
  7868  003B4A  0100               	movlb	0	; () banked
  7869  003B4C  51F9               	movf	_eusart1RxCount& (0+255),w,b	;volatile
  7870  003B4E  A4D8               	btfss	status,2,c
  7871  003B50  D002               	goto	l895
  7872                           
  7873                           ; BSR set to: 0
  7874                           ;eusart1.c: 120: {
  7875                           ;eusart1.c: 121: return readValue;
  7876  003B52  5019               	movf	EUSART1_Read@readValue,w,c
  7877                           
  7878                           ; BSR set to: 0
  7879  003B54  0012               	return	
  7880  003B56                     l895:
  7881                           
  7882                           ; BSR set to: 0
  7883                           ;eusart1.c: 122: }
  7884                           ;eusart1.c: 124: readValue = eusart1RxBuffer[eusart1RxTail++];
  7885                           
  7886                           ; BSR set to: 0
  7887  003B56  5033               	movf	_eusart1RxTail,w,c	;volatile
  7888  003B58  0D01               	mullw	1
  7889  003B5A  0E00               	movlw	low _eusart1RxBuffer
  7890  003B5C  24F3               	addwf	prodl,w,c
  7891  003B5E  6ED9               	movwf	fsr2l,c
  7892  003B60  0E01               	movlw	high _eusart1RxBuffer
  7893  003B62  20F4               	addwfc	prodh,w,c
  7894  003B64  6EDA               	movwf	fsr2h,c
  7895  003B66  50DF               	movf	indf2,w,c
  7896  003B68  6E18               	movwf	??_EUSART1_Read& (0+255),c
  7897  003B6A  5018               	movf	??_EUSART1_Read,w,c
  7898  003B6C  6E19               	movwf	EUSART1_Read@readValue,c
  7899  003B6E  6A1A               	clrf	EUSART1_Read@readValue+1,c
  7900                           
  7901                           ; BSR set to: 0
  7902  003B70  2A33               	incf	_eusart1RxTail,f,c	;volatile
  7903                           
  7904                           ; BSR set to: 0
  7905                           ;eusart1.c: 125: if(sizeof(eusart1RxBuffer) <= eusart1RxTail)
  7906  003B72  0E27               	movlw	39
  7907  003B74  6433               	cpfsgt	_eusart1RxTail,c	;volatile
  7908  003B76  D002               	goto	l897
  7909                           
  7910                           ; BSR set to: 0
  7911                           ;eusart1.c: 126: {
  7912                           ;eusart1.c: 127: eusart1RxTail = 0;
  7913  003B78  0E00               	movlw	0
  7914  003B7A  6E33               	movwf	_eusart1RxTail,c	;volatile
  7915  003B7C                     l897:
  7916                           
  7917                           ; BSR set to: 0
  7918                           ;eusart1.c: 128: }
  7919                           ;eusart1.c: 129: PIE1bits.RC1IE = 0;
  7920                           
  7921                           ; BSR set to: 0
  7922  003B7C  9A9D               	bcf	3997,5,c	;volatile
  7923                           
  7924                           ; BSR set to: 0
  7925                           ;eusart1.c: 130: eusart1RxCount--;
  7926  003B7E  07F9               	decf	_eusart1RxCount& (0+255),f,b	;volatile
  7927                           
  7928                           ; BSR set to: 0
  7929                           ;eusart1.c: 131: PIE1bits.RC1IE = 1;
  7930  003B80  8A9D               	bsf	3997,5,c	;volatile
  7931                           
  7932                           ; BSR set to: 0
  7933                           ;eusart1.c: 133: return readValue;
  7934  003B82  5019               	movf	EUSART1_Read@readValue,w,c
  7935  003B84  0012               	return	
  7936  003B86                     __end_of_EUSART1_Read:
  7937                           	opt stack 0
  7938                           tosu	equ	0xFFF
  7939                           tosh	equ	0xFFE
  7940                           tosl	equ	0xFFD
  7941                           pclath	equ	0xFFA
  7942                           tblptru	equ	0xFF8
  7943                           tblptrh	equ	0xFF7
  7944                           tblptrl	equ	0xFF6
  7945                           tablat	equ	0xFF5
  7946                           prodh	equ	0xFF4
  7947                           prodl	equ	0xFF3
  7948                           postinc0	equ	0xFEE
  7949                           plusw0	equ	0xFEB
  7950                           wreg	equ	0xFE8
  7951                           indf1	equ	0xFE7
  7952                           postdec1	equ	0xFE5
  7953                           fsr1h	equ	0xFE2
  7954                           fsr1l	equ	0xFE1
  7955                           indf2	equ	0xFDF
  7956                           postinc2	equ	0xFDE
  7957                           postdec2	equ	0xFDD
  7958                           plusw2	equ	0xFDB
  7959                           fsr2h	equ	0xFDA
  7960                           fsr2l	equ	0xFD9
  7961                           status	equ	0xFD8
  7962                           
  7963 ;; *************** function _keepAliveSignalUart *****************
  7964 ;; Defined at:
  7965 ;;		line 93 in file "SystemStatus.c"
  7966 ;; Parameters:    Size  Location     Type
  7967 ;;		None
  7968 ;; Auto vars:     Size  Location     Type
  7969 ;;		None
  7970 ;; Return value:  Size  Location     Type
  7971 ;;                  1    wreg      void 
  7972 ;; Registers used:
  7973 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7974 ;; Tracked objects:
  7975 ;;		On entry : 0/0
  7976 ;;		On exit  : 0/0
  7977 ;;		Unchanged: 0/0
  7978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7979 ;;      Params:         0       0       0       0       0       0       0
  7980 ;;      Locals:         0       0       0       0       0       0       0
  7981 ;;      Temps:          0       0       0       0       0       0       0
  7982 ;;      Totals:         0       0       0       0       0       0       0
  7983 ;;Total ram usage:        0 bytes
  7984 ;; Hardware stack levels used:    1
  7985 ;; Hardware stack levels required when called:    7
  7986 ;; This function calls:
  7987 ;;		_SendAckMessage
  7988 ;; This function is called by:
  7989 ;;		_main
  7990 ;; This function uses a non-reentrant model
  7991 ;;
  7992                           
  7993                           	psect	text32
  7994  00434A                     __ptext32:
  7995                           	opt stack 0
  7996  00434A                     _keepAliveSignalUart:
  7997                           	opt stack 23
  7998                           
  7999                           ;SystemStatus.c: 95: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_KEEP_A
      +                          LIVE);
  8000                           
  8001                           ; BSR set to: 0
  8002                           ;incstack = 0
  8003  00434A  0E15               	movlw	21
  8004  00434C  6E24               	movwf	SendAckMessage@inRequest,c
  8005  00434E  0E01               	movlw	1
  8006  004350  EC51  F01D         	call	_SendAckMessage
  8007  004354  0012               	return		;funcret
  8008  004356                     __end_of_keepAliveSignalUart:
  8009                           	opt stack 0
  8010                           tosu	equ	0xFFF
  8011                           tosh	equ	0xFFE
  8012                           tosl	equ	0xFFD
  8013                           pclath	equ	0xFFA
  8014                           tblptru	equ	0xFF8
  8015                           tblptrh	equ	0xFF7
  8016                           tblptrl	equ	0xFF6
  8017                           tablat	equ	0xFF5
  8018                           prodh	equ	0xFF4
  8019                           prodl	equ	0xFF3
  8020                           postinc0	equ	0xFEE
  8021                           plusw0	equ	0xFEB
  8022                           wreg	equ	0xFE8
  8023                           indf1	equ	0xFE7
  8024                           postdec1	equ	0xFE5
  8025                           fsr1h	equ	0xFE2
  8026                           fsr1l	equ	0xFE1
  8027                           indf2	equ	0xFDF
  8028                           postinc2	equ	0xFDE
  8029                           postdec2	equ	0xFDD
  8030                           plusw2	equ	0xFDB
  8031                           fsr2h	equ	0xFDA
  8032                           fsr2l	equ	0xFD9
  8033                           status	equ	0xFD8
  8034                           
  8035 ;; *************** function _keepAliveSignalLed *****************
  8036 ;; Defined at:
  8037 ;;		line 35 in file "LedsApp.c"
  8038 ;; Parameters:    Size  Location     Type
  8039 ;;		None
  8040 ;; Auto vars:     Size  Location     Type
  8041 ;;		None
  8042 ;; Return value:  Size  Location     Type
  8043 ;;                  1    wreg      void 
  8044 ;; Registers used:
  8045 ;;		wreg, status,2, status,0
  8046 ;; Tracked objects:
  8047 ;;		On entry : 0/0
  8048 ;;		On exit  : 0/0
  8049 ;;		Unchanged: 0/0
  8050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8051 ;;      Params:         0       0       0       0       0       0       0
  8052 ;;      Locals:         0       0       0       0       0       0       0
  8053 ;;      Temps:          1       0       0       0       0       0       0
  8054 ;;      Totals:         1       0       0       0       0       0       0
  8055 ;;Total ram usage:        1 bytes
  8056 ;; Hardware stack levels used:    1
  8057 ;; Hardware stack levels required when called:    4
  8058 ;; This function calls:
  8059 ;;		Nothing
  8060 ;; This function is called by:
  8061 ;;		_main
  8062 ;; This function uses a non-reentrant model
  8063 ;;
  8064                           
  8065                           	psect	text33
  8066  004260                     __ptext33:
  8067                           	opt stack 0
  8068  004260                     _keepAliveSignalLed:
  8069                           	opt stack 26
  8070                           
  8071                           ;LedsApp.c: 37: LATCbits.LATC0 = !LATCbits.LATC0;
  8072                           
  8073                           ;incstack = 0
  8074  004260  B08B               	btfsc	3979,0,c	;volatile
  8075  004262  D003               	goto	u5800
  8076  004264  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  8077  004266  2A18               	incf	??_keepAliveSignalLed& (0+255),f,c
  8078  004268  D001               	goto	u5818
  8079  00426A                     u5800:
  8080  00426A  6A18               	clrf	??_keepAliveSignalLed& (0+255),c
  8081  00426C                     u5818:
  8082  00426C  508B               	movf	3979,w,c	;volatile
  8083  00426E  1818               	xorwf	??_keepAliveSignalLed,w,c
  8084  004270  0BFE               	andlw	-2
  8085  004272  1818               	xorwf	??_keepAliveSignalLed,w,c
  8086  004274  6E8B               	movwf	3979,c	;volatile
  8087  004276  0012               	return		;funcret
  8088  004278                     __end_of_keepAliveSignalLed:
  8089                           	opt stack 0
  8090                           tosu	equ	0xFFF
  8091                           tosh	equ	0xFFE
  8092                           tosl	equ	0xFFD
  8093                           pclath	equ	0xFFA
  8094                           tblptru	equ	0xFF8
  8095                           tblptrh	equ	0xFF7
  8096                           tblptrl	equ	0xFF6
  8097                           tablat	equ	0xFF5
  8098                           prodh	equ	0xFF4
  8099                           prodl	equ	0xFF3
  8100                           postinc0	equ	0xFEE
  8101                           plusw0	equ	0xFEB
  8102                           wreg	equ	0xFE8
  8103                           indf1	equ	0xFE7
  8104                           postdec1	equ	0xFE5
  8105                           fsr1h	equ	0xFE2
  8106                           fsr1l	equ	0xFE1
  8107                           indf2	equ	0xFDF
  8108                           postinc2	equ	0xFDE
  8109                           postdec2	equ	0xFDD
  8110                           plusw2	equ	0xFDB
  8111                           fsr2h	equ	0xFDA
  8112                           fsr2l	equ	0xFD9
  8113                           status	equ	0xFD8
  8114                           
  8115 ;; *************** function _SynthLdDetect *****************
  8116 ;; Defined at:
  8117 ;;		line 212 in file "SyntApp.c"
  8118 ;; Parameters:    Size  Location     Type
  8119 ;;		None
  8120 ;; Auto vars:     Size  Location     Type
  8121 ;;		None
  8122 ;; Return value:  Size  Location     Type
  8123 ;;                  1    wreg      void 
  8124 ;; Registers used:
  8125 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8126 ;; Tracked objects:
  8127 ;;		On entry : 0/0
  8128 ;;		On exit  : 0/0
  8129 ;;		Unchanged: 0/0
  8130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8131 ;;      Params:         0       0       0       0       0       0       0
  8132 ;;      Locals:         0       0       0       0       0       0       0
  8133 ;;      Temps:          0       0       0       0       0       0       0
  8134 ;;      Totals:         0       0       0       0       0       0       0
  8135 ;;Total ram usage:        0 bytes
  8136 ;; Hardware stack levels used:    1
  8137 ;; Hardware stack levels required when called:   11
  8138 ;; This function calls:
  8139 ;;		_BlinkErrorLeds
  8140 ;;		_InitSynth
  8141 ;;		___awmod
  8142 ;; This function is called by:
  8143 ;;		_main
  8144 ;; This function uses a non-reentrant model
  8145 ;;
  8146                           
  8147                           	psect	text34
  8148  0029BA                     __ptext34:
  8149                           	opt stack 0
  8150  0029BA                     _SynthLdDetect:
  8151                           	opt stack 19
  8152                           
  8153                           ;SyntApp.c: 216: if(PORTDbits.RD4 == 0)
  8154                           
  8155                           ;incstack = 0
  8156  0029BA  B883               	btfsc	3971,4,c	;volatile
  8157  0029BC  D01E               	goto	l557
  8158                           
  8159                           ;SyntApp.c: 217: {
  8160                           ;SyntApp.c: 218: if(synthLdRxCnt > 0)
  8161  0029BE  5043               	movf	_synthLdRxCnt,w,c
  8162  0029C0  0A80               	xorlw	128
  8163  0029C2  0F7F               	addlw	-129
  8164  0029C4  A0D8               	btfss	status,0,c
  8165  0029C6  D005               	goto	l558
  8166                           
  8167                           ;SyntApp.c: 219: {
  8168                           ;SyntApp.c: 220: InitSynth(SYNTH_RX);
  8169  0029C8  0E01               	movlw	1
  8170  0029CA  EC4B  F005         	call	_InitSynth
  8171                           
  8172                           ;SyntApp.c: 221: synthLdRxCnt--;
  8173  0029CE  0643               	decf	_synthLdRxCnt,f,c
  8174                           
  8175                           ;SyntApp.c: 222: }
  8176  0029D0  D003               	goto	l559
  8177  0029D2                     l558:
  8178                           
  8179                           ;SyntApp.c: 223: else
  8180                           ;SyntApp.c: 224: {
  8181                           ;SyntApp.c: 225: BlinkErrorLeds(FAIL_SYNTH_RX_LATCH);
  8182  0029D2  0E02               	movlw	2
  8183  0029D4  EC94  F01B         	call	_BlinkErrorLeds
  8184  0029D8                     l559:
  8185                           
  8186                           ;SyntApp.c: 226: }
  8187                           ;SyntApp.c: 227: synthLdRxArray[synthLdRxArrayCnt++ % 12] = UNLOCK;
  8188  0029D8  C038  F018         	movff	_synthLdRxArrayCnt,___awmod@dividend
  8189  0029DC  6A19               	clrf	___awmod@dividend+1,c
  8190  0029DE  0E00               	movlw	0
  8191  0029E0  6E1B               	movwf	___awmod@divisor+1,c
  8192  0029E2  0E0C               	movlw	12
  8193  0029E4  6E1A               	movwf	___awmod@divisor,c
  8194  0029E6  EC8E  F01A         	call	___awmod	;wreg free
  8195  0029EA  0EA6               	movlw	low _synthLdRxArray
  8196  0029EC  2418               	addwf	?___awmod,w,c
  8197  0029EE  6ED9               	movwf	fsr2l,c
  8198  0029F0  0E01               	movlw	high _synthLdRxArray
  8199  0029F2  2019               	addwfc	?___awmod+1,w,c
  8200  0029F4  6EDA               	movwf	fsr2h,c
  8201  0029F6  0E00               	movlw	0
  8202  0029F8  D012               	goto	L3
  8203  0029FA                     l557:
  8204                           
  8205                           ;SyntApp.c: 229: else
  8206                           ;SyntApp.c: 230: {
  8207                           ;SyntApp.c: 231: synthLdRxCnt = 2;
  8208  0029FA  0E02               	movlw	2
  8209  0029FC  6E43               	movwf	_synthLdRxCnt,c
  8210                           
  8211                           ;SyntApp.c: 232: synthLdRxArray[synthLdRxArrayCnt++ % 12] = LOCK;
  8212  0029FE  C038  F018         	movff	_synthLdRxArrayCnt,___awmod@dividend
  8213  002A02  6A19               	clrf	___awmod@dividend+1,c
  8214  002A04  0E00               	movlw	0
  8215  002A06  6E1B               	movwf	___awmod@divisor+1,c
  8216  002A08  0E0C               	movlw	12
  8217  002A0A  6E1A               	movwf	___awmod@divisor,c
  8218  002A0C  EC8E  F01A         	call	___awmod	;wreg free
  8219  002A10  0EA6               	movlw	low _synthLdRxArray
  8220  002A12  2418               	addwf	?___awmod,w,c
  8221  002A14  6ED9               	movwf	fsr2l,c
  8222  002A16  0E01               	movlw	high _synthLdRxArray
  8223  002A18  2019               	addwfc	?___awmod+1,w,c
  8224  002A1A  6EDA               	movwf	fsr2h,c
  8225  002A1C  0E01               	movlw	1
  8226  002A1E                     L3:
  8227  002A1E  6EDF               	movwf	indf2,c
  8228  002A20  2A38               	incf	_synthLdRxArrayCnt,f,c
  8229                           
  8230                           ;SyntApp.c: 233: }
  8231                           ;SyntApp.c: 238: if(PORTDbits.RD1 == 0)
  8232  002A22  B283               	btfsc	3971,1,c	;volatile
  8233  002A24  D020               	goto	l561
  8234                           
  8235                           ;SyntApp.c: 239: {
  8236                           ;SyntApp.c: 240: if(synthLdTxCnt > 0)
  8237  002A26  5042               	movf	_synthLdTxCnt,w,c
  8238  002A28  0A80               	xorlw	128
  8239  002A2A  0F7F               	addlw	-129
  8240  002A2C  A0D8               	btfss	status,0,c
  8241  002A2E  D005               	goto	l562
  8242                           
  8243                           ;SyntApp.c: 241: {
  8244                           ;SyntApp.c: 242: InitSynth(SYNTH_TX);
  8245  002A30  0E00               	movlw	0
  8246  002A32  EC4B  F005         	call	_InitSynth
  8247                           
  8248                           ;SyntApp.c: 243: synthLdTxCnt--;
  8249  002A36  0642               	decf	_synthLdTxCnt,f,c
  8250                           
  8251                           ;SyntApp.c: 244: }
  8252  002A38  D003               	goto	l563
  8253  002A3A                     l562:
  8254                           
  8255                           ;SyntApp.c: 245: else
  8256                           ;SyntApp.c: 246: {
  8257                           ;SyntApp.c: 247: BlinkErrorLeds(FAIL_SYNTH_TX_LATCH);
  8258  002A3A  0E02               	movlw	2
  8259  002A3C  EC94  F01B         	call	_BlinkErrorLeds
  8260  002A40                     l563:
  8261                           
  8262                           ;SyntApp.c: 248: }
  8263                           ;SyntApp.c: 249: synthLdTxArray[synthLdTxArrayCnt++ % 12] = UNLOCK;
  8264  002A40  C037  F018         	movff	_synthLdTxArrayCnt,___awmod@dividend
  8265  002A44  6A19               	clrf	___awmod@dividend+1,c
  8266  002A46  0E00               	movlw	0
  8267  002A48  6E1B               	movwf	___awmod@divisor+1,c
  8268  002A4A  0E0C               	movlw	12
  8269  002A4C  6E1A               	movwf	___awmod@divisor,c
  8270  002A4E  EC8E  F01A         	call	___awmod	;wreg free
  8271  002A52  0E9A               	movlw	low _synthLdTxArray
  8272  002A54  2418               	addwf	?___awmod,w,c
  8273  002A56  6ED9               	movwf	fsr2l,c
  8274  002A58  0E01               	movlw	high _synthLdTxArray
  8275  002A5A  2019               	addwfc	?___awmod+1,w,c
  8276  002A5C  6EDA               	movwf	fsr2h,c
  8277  002A5E  0E00               	movlw	0
  8278  002A60  6EDF               	movwf	indf2,c
  8279  002A62  2A37               	incf	_synthLdTxArrayCnt,f,c
  8280                           
  8281                           ;SyntApp.c: 250: }
  8282  002A64  0012               	return	
  8283  002A66                     l561:
  8284                           
  8285                           ;SyntApp.c: 251: else
  8286                           ;SyntApp.c: 252: {
  8287                           ;SyntApp.c: 253: synthLdTxCnt = 2;
  8288  002A66  0E02               	movlw	2
  8289  002A68  6E42               	movwf	_synthLdTxCnt,c
  8290                           
  8291                           ;SyntApp.c: 254: synthLdTxArray[synthLdTxArrayCnt++ % 12] = LOCK;
  8292  002A6A  C037  F018         	movff	_synthLdTxArrayCnt,___awmod@dividend
  8293  002A6E  6A19               	clrf	___awmod@dividend+1,c
  8294  002A70  0E00               	movlw	0
  8295  002A72  6E1B               	movwf	___awmod@divisor+1,c
  8296  002A74  0E0C               	movlw	12
  8297  002A76  6E1A               	movwf	___awmod@divisor,c
  8298  002A78  EC8E  F01A         	call	___awmod	;wreg free
  8299  002A7C  0E9A               	movlw	low _synthLdTxArray
  8300  002A7E  2418               	addwf	?___awmod,w,c
  8301  002A80  6ED9               	movwf	fsr2l,c
  8302  002A82  0E01               	movlw	high _synthLdTxArray
  8303  002A84  2019               	addwfc	?___awmod+1,w,c
  8304  002A86  6EDA               	movwf	fsr2h,c
  8305  002A88  0E01               	movlw	1
  8306  002A8A  6EDF               	movwf	indf2,c
  8307  002A8C  2A37               	incf	_synthLdTxArrayCnt,f,c
  8308  002A8E  0012               	return	
  8309  002A90                     __end_of_SynthLdDetect:
  8310                           	opt stack 0
  8311                           tosu	equ	0xFFF
  8312                           tosh	equ	0xFFE
  8313                           tosl	equ	0xFFD
  8314                           pclath	equ	0xFFA
  8315                           tblptru	equ	0xFF8
  8316                           tblptrh	equ	0xFF7
  8317                           tblptrl	equ	0xFF6
  8318                           tablat	equ	0xFF5
  8319                           prodh	equ	0xFF4
  8320                           prodl	equ	0xFF3
  8321                           postinc0	equ	0xFEE
  8322                           plusw0	equ	0xFEB
  8323                           wreg	equ	0xFE8
  8324                           indf1	equ	0xFE7
  8325                           postdec1	equ	0xFE5
  8326                           fsr1h	equ	0xFE2
  8327                           fsr1l	equ	0xFE1
  8328                           indf2	equ	0xFDF
  8329                           postinc2	equ	0xFDE
  8330                           postdec2	equ	0xFDD
  8331                           plusw2	equ	0xFDB
  8332                           fsr2h	equ	0xFDA
  8333                           fsr2l	equ	0xFD9
  8334                           status	equ	0xFD8
  8335                           
  8336 ;; *************** function ___awmod *****************
  8337 ;; Defined at:
  8338 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  8339 ;; Parameters:    Size  Location     Type
  8340 ;;  dividend        2   23[COMRAM] int 
  8341 ;;  divisor         2   25[COMRAM] int 
  8342 ;; Auto vars:     Size  Location     Type
  8343 ;;  sign            1   28[COMRAM] unsigned char 
  8344 ;;  counter         1   27[COMRAM] unsigned char 
  8345 ;; Return value:  Size  Location     Type
  8346 ;;                  2   23[COMRAM] int 
  8347 ;; Registers used:
  8348 ;;		wreg, status,2, status,0
  8349 ;; Tracked objects:
  8350 ;;		On entry : 0/0
  8351 ;;		On exit  : 0/0
  8352 ;;		Unchanged: 0/0
  8353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8354 ;;      Params:         4       0       0       0       0       0       0
  8355 ;;      Locals:         2       0       0       0       0       0       0
  8356 ;;      Temps:          0       0       0       0       0       0       0
  8357 ;;      Totals:         6       0       0       0       0       0       0
  8358 ;;Total ram usage:        6 bytes
  8359 ;; Hardware stack levels used:    1
  8360 ;; Hardware stack levels required when called:    4
  8361 ;; This function calls:
  8362 ;;		Nothing
  8363 ;; This function is called by:
  8364 ;;		_SynthLdDetect
  8365 ;; This function uses a non-reentrant model
  8366 ;;
  8367                           
  8368                           	psect	text35
  8369  00351C                     __ptext35:
  8370                           	opt stack 0
  8371  00351C                     ___awmod:
  8372                           	opt stack 25
  8373                           
  8374                           ;incstack = 0
  8375  00351C  0E00               	movlw	0
  8376  00351E  6E1D               	movwf	___awmod@sign,c
  8377  003520  AE19               	btfss	___awmod@dividend+1,7,c
  8378  003522  D006               	goto	l1777
  8379  003524  6C18               	negf	___awmod@dividend,c
  8380  003526  1E19               	comf	___awmod@dividend+1,f,c
  8381  003528  B0D8               	btfsc	status,0,c
  8382  00352A  2A19               	incf	___awmod@dividend+1,f,c
  8383  00352C  0E01               	movlw	1
  8384  00352E  6E1D               	movwf	___awmod@sign,c
  8385  003530                     l1777:
  8386  003530  AE1B               	btfss	___awmod@divisor+1,7,c
  8387  003532  D004               	goto	l1778
  8388  003534  6C1A               	negf	___awmod@divisor,c
  8389  003536  1E1B               	comf	___awmod@divisor+1,f,c
  8390  003538  B0D8               	btfsc	status,0,c
  8391  00353A  2A1B               	incf	___awmod@divisor+1,f,c
  8392  00353C                     l1778:
  8393  00353C  501A               	movf	___awmod@divisor,w,c
  8394  00353E  101B               	iorwf	___awmod@divisor+1,w,c
  8395  003540  B4D8               	btfsc	status,2,c
  8396  003542  D018               	goto	l1785
  8397  003544  0E01               	movlw	1
  8398  003546  6E1C               	movwf	___awmod@counter,c
  8399  003548  D004               	goto	l1780
  8400  00354A  90D8               	bcf	status,0,c
  8401  00354C  361A               	rlcf	___awmod@divisor,f,c
  8402  00354E  361B               	rlcf	___awmod@divisor+1,f,c
  8403  003550  2A1C               	incf	___awmod@counter,f,c
  8404  003552                     l1780:
  8405  003552  AE1B               	btfss	___awmod@divisor+1,7,c
  8406  003554  D7FA               	goto	l1781
  8407  003556                     u5720:
  8408  003556  501A               	movf	___awmod@divisor,w,c
  8409  003558  5C18               	subwf	___awmod@dividend,w,c
  8410  00355A  501B               	movf	___awmod@divisor+1,w,c
  8411  00355C  5819               	subwfb	___awmod@dividend+1,w,c
  8412  00355E  A0D8               	btfss	status,0,c
  8413  003560  D004               	goto	l1784
  8414  003562  501A               	movf	___awmod@divisor,w,c
  8415  003564  5E18               	subwf	___awmod@dividend,f,c
  8416  003566  501B               	movf	___awmod@divisor+1,w,c
  8417  003568  5A19               	subwfb	___awmod@dividend+1,f,c
  8418  00356A                     l1784:
  8419  00356A  90D8               	bcf	status,0,c
  8420  00356C  321B               	rrcf	___awmod@divisor+1,f,c
  8421  00356E  321A               	rrcf	___awmod@divisor,f,c
  8422  003570  2E1C               	decfsz	___awmod@counter,f,c
  8423  003572  D7F1               	goto	u5720
  8424  003574                     l1785:
  8425  003574  501D               	movf	___awmod@sign,w,c
  8426  003576  B4D8               	btfsc	status,2,c
  8427  003578  D004               	goto	l1786
  8428  00357A  6C18               	negf	___awmod@dividend,c
  8429  00357C  1E19               	comf	___awmod@dividend+1,f,c
  8430  00357E  B0D8               	btfsc	status,0,c
  8431  003580  2A19               	incf	___awmod@dividend+1,f,c
  8432  003582                     l1786:
  8433  003582  C018  F018         	movff	___awmod@dividend,?___awmod
  8434  003586  C019  F019         	movff	___awmod@dividend+1,?___awmod+1
  8435  00358A  0012               	return	
  8436  00358C                     __end_of___awmod:
  8437                           	opt stack 0
  8438                           tosu	equ	0xFFF
  8439                           tosh	equ	0xFFE
  8440                           tosl	equ	0xFFD
  8441                           pclath	equ	0xFFA
  8442                           tblptru	equ	0xFF8
  8443                           tblptrh	equ	0xFF7
  8444                           tblptrl	equ	0xFF6
  8445                           tablat	equ	0xFF5
  8446                           prodh	equ	0xFF4
  8447                           prodl	equ	0xFF3
  8448                           postinc0	equ	0xFEE
  8449                           plusw0	equ	0xFEB
  8450                           wreg	equ	0xFE8
  8451                           indf1	equ	0xFE7
  8452                           postdec1	equ	0xFE5
  8453                           fsr1h	equ	0xFE2
  8454                           fsr1l	equ	0xFE1
  8455                           indf2	equ	0xFDF
  8456                           postinc2	equ	0xFDE
  8457                           postdec2	equ	0xFDD
  8458                           plusw2	equ	0xFDB
  8459                           fsr2h	equ	0xFDA
  8460                           fsr2l	equ	0xFD9
  8461                           status	equ	0xFD8
  8462                           
  8463 ;; *************** function _BlinkErrorLeds *****************
  8464 ;; Defined at:
  8465 ;;		line 13 in file "LedsApp.c"
  8466 ;; Parameters:    Size  Location     Type
  8467 ;;  state           1    wreg     enum E7597
  8468 ;; Auto vars:     Size  Location     Type
  8469 ;;  state           1   26[COMRAM] enum E7597
  8470 ;;  idx             2   27[COMRAM] int 
  8471 ;; Return value:  Size  Location     Type
  8472 ;;                  1    wreg      void 
  8473 ;; Registers used:
  8474 ;;		wreg, status,2, status,0
  8475 ;; Tracked objects:
  8476 ;;		On entry : 0/0
  8477 ;;		On exit  : 0/0
  8478 ;;		Unchanged: 0/0
  8479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8480 ;;      Params:         0       0       0       0       0       0       0
  8481 ;;      Locals:         3       0       0       0       0       0       0
  8482 ;;      Temps:          3       0       0       0       0       0       0
  8483 ;;      Totals:         6       0       0       0       0       0       0
  8484 ;;Total ram usage:        6 bytes
  8485 ;; Hardware stack levels used:    1
  8486 ;; Hardware stack levels required when called:    4
  8487 ;; This function calls:
  8488 ;;		Nothing
  8489 ;; This function is called by:
  8490 ;;		_SynthLdDetect
  8491 ;;		_main
  8492 ;; This function uses a non-reentrant model
  8493 ;;
  8494                           
  8495                           	psect	text36
  8496  003728                     __ptext36:
  8497                           	opt stack 0
  8498  003728                     _BlinkErrorLeds:
  8499                           	opt stack 25
  8500                           
  8501                           ;incstack = 0
  8502                           ;BlinkErrorLeds@state stored from wreg
  8503  003728  6E1B               	movwf	BlinkErrorLeds@state,c
  8504                           
  8505                           ;LedsApp.c: 15: for(int idx = 0; idx < state; idx++)
  8506  00372A  0E00               	movlw	0
  8507  00372C  6E1D               	movwf	BlinkErrorLeds@idx+1,c
  8508  00372E  0E00               	movlw	0
  8509  003730  6E1C               	movwf	BlinkErrorLeds@idx,c
  8510  003732                     l6341:
  8511  003732  501B               	movf	BlinkErrorLeds@state,w,c
  8512  003734  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8513  003736  6A19               	clrf	(??_BlinkErrorLeds+1)& (0+255),c
  8514  003738  5018               	movf	??_BlinkErrorLeds,w,c
  8515  00373A  5C1C               	subwf	BlinkErrorLeds@idx,w,c
  8516  00373C  501D               	movf	BlinkErrorLeds@idx+1,w,c
  8517  00373E  0A80               	xorlw	128
  8518  003740  6E1A               	movwf	(??_BlinkErrorLeds+2)& (0+255),c
  8519  003742  5019               	movf	??_BlinkErrorLeds+1,w,c
  8520  003744  0A80               	xorlw	128
  8521  003746  581A               	subwfb	(??_BlinkErrorLeds+2)& (0+255),w,c
  8522  003748  B0D8               	btfsc	status,0,c
  8523  00374A  0012               	return	
  8524                           
  8525                           ;LedsApp.c: 16: {
  8526                           ;LedsApp.c: 17: LATBbits.LATB4 = 0;
  8527  00374C  988A               	bcf	3978,4,c	;volatile
  8528                           
  8529                           ;LedsApp.c: 18: _delay((unsigned long)((100)*(8000000/4000.0)));
  8530  00374E  0E02               	movlw	2
  8531  003750  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
  8532  003752  0E04               	movlw	4
  8533  003754  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8534  003756  0EBA               	movlw	186
  8535  003758                     u9117:
  8536  003758  2EE8               	decfsz	wreg,f,c
  8537  00375A  D7FE               	bra	u9117
  8538  00375C  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
  8539  00375E  D7FC               	bra	u9117
  8540  003760  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
  8541  003762  D7FA               	bra	u9117
  8542  003764  D000               	nop2	
  8543                           
  8544                           ;LedsApp.c: 19: LATBbits.LATB4 = 1;
  8545  003766  888A               	bsf	3978,4,c	;volatile
  8546                           
  8547                           ;LedsApp.c: 20: _delay((unsigned long)((100)*(8000000/4000.0)));
  8548  003768  0E02               	movlw	2
  8549  00376A  6E19               	movwf	(??_BlinkErrorLeds+1)& (0+255),c
  8550  00376C  0E04               	movlw	4
  8551  00376E  6E18               	movwf	??_BlinkErrorLeds& (0+255),c
  8552  003770  0EBA               	movlw	186
  8553  003772                     u9127:
  8554  003772  2EE8               	decfsz	wreg,f,c
  8555  003774  D7FE               	bra	u9127
  8556  003776  2E18               	decfsz	??_BlinkErrorLeds& (0+255),f,c
  8557  003778  D7FC               	bra	u9127
  8558  00377A  2E19               	decfsz	(??_BlinkErrorLeds+1)& (0+255),f,c
  8559  00377C  D7FA               	bra	u9127
  8560  00377E  D000               	nop2	
  8561  003780  4A1C               	infsnz	BlinkErrorLeds@idx,f,c
  8562  003782  2A1D               	incf	BlinkErrorLeds@idx+1,f,c
  8563  003784  D7D6               	goto	l6341
  8564  003786                     __end_of_BlinkErrorLeds:
  8565                           	opt stack 0
  8566                           tosu	equ	0xFFF
  8567                           tosh	equ	0xFFE
  8568                           tosl	equ	0xFFD
  8569                           pclath	equ	0xFFA
  8570                           tblptru	equ	0xFF8
  8571                           tblptrh	equ	0xFF7
  8572                           tblptrl	equ	0xFF6
  8573                           tablat	equ	0xFF5
  8574                           prodh	equ	0xFF4
  8575                           prodl	equ	0xFF3
  8576                           postinc0	equ	0xFEE
  8577                           plusw0	equ	0xFEB
  8578                           wreg	equ	0xFE8
  8579                           indf1	equ	0xFE7
  8580                           postdec1	equ	0xFE5
  8581                           fsr1h	equ	0xFE2
  8582                           fsr1l	equ	0xFE1
  8583                           indf2	equ	0xFDF
  8584                           postinc2	equ	0xFDE
  8585                           postdec2	equ	0xFDD
  8586                           plusw2	equ	0xFDB
  8587                           fsr2h	equ	0xFDA
  8588                           fsr2l	equ	0xFD9
  8589                           status	equ	0xFD8
  8590                           
  8591 ;; *************** function _SetMcuSystem *****************
  8592 ;; Defined at:
  8593 ;;		line 11 in file "SystemSettings.c"
  8594 ;; Parameters:    Size  Location     Type
  8595 ;;		None
  8596 ;; Auto vars:     Size  Location     Type
  8597 ;;		None
  8598 ;; Return value:  Size  Location     Type
  8599 ;;                  1    wreg      void 
  8600 ;; Registers used:
  8601 ;;		wreg, status,2, status,0, cstack
  8602 ;; Tracked objects:
  8603 ;;		On entry : 0/0
  8604 ;;		On exit  : 0/0
  8605 ;;		Unchanged: 0/0
  8606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8607 ;;      Params:         0       0       0       0       0       0       0
  8608 ;;      Locals:         0       0       0       0       0       0       0
  8609 ;;      Temps:          0       0       0       0       0       0       0
  8610 ;;      Totals:         0       0       0       0       0       0       0
  8611 ;;Total ram usage:        0 bytes
  8612 ;; Hardware stack levels used:    1
  8613 ;; Hardware stack levels required when called:    7
  8614 ;; This function calls:
  8615 ;;		_SYSTEM_Initialize
  8616 ;; This function is called by:
  8617 ;;		_main
  8618 ;; This function uses a non-reentrant model
  8619 ;;
  8620                           
  8621                           	psect	text37
  8622  004362                     __ptext37:
  8623                           	opt stack 0
  8624  004362                     _SetMcuSystem:
  8625                           	opt stack 23
  8626                           
  8627                           ;SystemSettings.c: 14: SYSTEM_Initialize();
  8628                           
  8629                           ;incstack = 0
  8630  004362  EC23  F021         	call	_SYSTEM_Initialize	;wreg free
  8631                           
  8632                           ;SystemSettings.c: 21: (INTCONbits.GIE = 1);
  8633  004366  8EF2               	bsf	intcon,7,c	;volatile
  8634                           
  8635                           ;SystemSettings.c: 27: (INTCONbits.PEIE = 1);
  8636  004368  8CF2               	bsf	intcon,6,c	;volatile
  8637  00436A  0012               	return		;funcret
  8638  00436C                     __end_of_SetMcuSystem:
  8639                           	opt stack 0
  8640                           tosu	equ	0xFFF
  8641                           tosh	equ	0xFFE
  8642                           tosl	equ	0xFFD
  8643                           pclath	equ	0xFFA
  8644                           tblptru	equ	0xFF8
  8645                           tblptrh	equ	0xFF7
  8646                           tblptrl	equ	0xFF6
  8647                           tablat	equ	0xFF5
  8648                           prodh	equ	0xFF4
  8649                           prodl	equ	0xFF3
  8650                           intcon	equ	0xFF2
  8651                           postinc0	equ	0xFEE
  8652                           plusw0	equ	0xFEB
  8653                           wreg	equ	0xFE8
  8654                           indf1	equ	0xFE7
  8655                           postdec1	equ	0xFE5
  8656                           fsr1h	equ	0xFE2
  8657                           fsr1l	equ	0xFE1
  8658                           indf2	equ	0xFDF
  8659                           postinc2	equ	0xFDE
  8660                           postdec2	equ	0xFDD
  8661                           plusw2	equ	0xFDB
  8662                           fsr2h	equ	0xFDA
  8663                           fsr2l	equ	0xFD9
  8664                           status	equ	0xFD8
  8665                           
  8666 ;; *************** function _SYSTEM_Initialize *****************
  8667 ;; Defined at:
  8668 ;;		line 112 in file "mcc_generated_files/mcc.c"
  8669 ;; Parameters:    Size  Location     Type
  8670 ;;		None
  8671 ;; Auto vars:     Size  Location     Type
  8672 ;;		None
  8673 ;; Return value:  Size  Location     Type
  8674 ;;                  1    wreg      void 
  8675 ;; Registers used:
  8676 ;;		wreg, status,2, status,0, cstack
  8677 ;; Tracked objects:
  8678 ;;		On entry : 0/0
  8679 ;;		On exit  : 0/0
  8680 ;;		Unchanged: 0/0
  8681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8682 ;;      Params:         0       0       0       0       0       0       0
  8683 ;;      Locals:         0       0       0       0       0       0       0
  8684 ;;      Temps:          0       0       0       0       0       0       0
  8685 ;;      Totals:         0       0       0       0       0       0       0
  8686 ;;Total ram usage:        0 bytes
  8687 ;; Hardware stack levels used:    1
  8688 ;; Hardware stack levels required when called:    6
  8689 ;; This function calls:
  8690 ;;		_ADC_Initialize
  8691 ;;		_EUSART1_Initialize
  8692 ;;		_INTERRUPT_Initialize
  8693 ;;		_OSCILLATOR_Initialize
  8694 ;;		_PIN_MANAGER_Initialize
  8695 ;;		_TMR0_Initialize
  8696 ;; This function is called by:
  8697 ;;		_SetMcuSystem
  8698 ;; This function uses a non-reentrant model
  8699 ;;
  8700                           
  8701                           	psect	text38
  8702  004246                     __ptext38:
  8703                           	opt stack 0
  8704  004246                     _SYSTEM_Initialize:
  8705                           	opt stack 23
  8706                           
  8707                           ;mcc.c: 114: INTERRUPT_Initialize();
  8708                           
  8709                           ;incstack = 0
  8710  004246  ECD1  F021         	call	_INTERRUPT_Initialize	;wreg free
  8711                           
  8712                           ;mcc.c: 115: PIN_MANAGER_Initialize();
  8713  00424A  EC62  F01B         	call	_PIN_MANAGER_Initialize	;wreg free
  8714                           
  8715                           ;mcc.c: 116: OSCILLATOR_Initialize();
  8716  00424E  EC90  F021         	call	_OSCILLATOR_Initialize	;wreg free
  8717                           
  8718                           ;mcc.c: 117: TMR0_Initialize();
  8719  004252  EC7B  F01F         	call	_TMR0_Initialize	;wreg free
  8720                           
  8721                           ;mcc.c: 118: ADC_Initialize();
  8722  004256  EC3C  F021         	call	_ADC_Initialize	;wreg free
  8723                           
  8724                           ;mcc.c: 119: EUSART1_Initialize();
  8725  00425A  EC10  F01F         	call	_EUSART1_Initialize	;wreg free
  8726  00425E  0012               	return		;funcret
  8727  004260                     __end_of_SYSTEM_Initialize:
  8728                           	opt stack 0
  8729                           tosu	equ	0xFFF
  8730                           tosh	equ	0xFFE
  8731                           tosl	equ	0xFFD
  8732                           pclath	equ	0xFFA
  8733                           tblptru	equ	0xFF8
  8734                           tblptrh	equ	0xFF7
  8735                           tblptrl	equ	0xFF6
  8736                           tablat	equ	0xFF5
  8737                           prodh	equ	0xFF4
  8738                           prodl	equ	0xFF3
  8739                           intcon	equ	0xFF2
  8740                           postinc0	equ	0xFEE
  8741                           plusw0	equ	0xFEB
  8742                           wreg	equ	0xFE8
  8743                           indf1	equ	0xFE7
  8744                           postdec1	equ	0xFE5
  8745                           fsr1h	equ	0xFE2
  8746                           fsr1l	equ	0xFE1
  8747                           indf2	equ	0xFDF
  8748                           postinc2	equ	0xFDE
  8749                           postdec2	equ	0xFDD
  8750                           plusw2	equ	0xFDB
  8751                           fsr2h	equ	0xFDA
  8752                           fsr2l	equ	0xFD9
  8753                           status	equ	0xFD8
  8754                           
  8755 ;; *************** function _TMR0_Initialize *****************
  8756 ;; Defined at:
  8757 ;;		line 66 in file "mcc_generated_files/tmr0.c"
  8758 ;; Parameters:    Size  Location     Type
  8759 ;;		None
  8760 ;; Auto vars:     Size  Location     Type
  8761 ;;		None
  8762 ;; Return value:  Size  Location     Type
  8763 ;;                  1    wreg      void 
  8764 ;; Registers used:
  8765 ;;		wreg, status,2, status,0, cstack
  8766 ;; Tracked objects:
  8767 ;;		On entry : 0/0
  8768 ;;		On exit  : 0/0
  8769 ;;		Unchanged: 0/0
  8770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8771 ;;      Params:         0       0       0       0       0       0       0
  8772 ;;      Locals:         0       0       0       0       0       0       0
  8773 ;;      Temps:          2       0       0       0       0       0       0
  8774 ;;      Totals:         2       0       0       0       0       0       0
  8775 ;;Total ram usage:        2 bytes
  8776 ;; Hardware stack levels used:    1
  8777 ;; Hardware stack levels required when called:    5
  8778 ;; This function calls:
  8779 ;;		_TMR0_SetInterruptHandler
  8780 ;; This function is called by:
  8781 ;;		_SYSTEM_Initialize
  8782 ;; This function uses a non-reentrant model
  8783 ;;
  8784                           
  8785                           	psect	text39
  8786  003EF6                     __ptext39:
  8787                           	opt stack 0
  8788  003EF6                     _TMR0_Initialize:
  8789                           	opt stack 23
  8790                           
  8791                           ;tmr0.c: 71: TMR0H = 0xF8;
  8792                           
  8793                           ;incstack = 0
  8794  003EF6  0EF8               	movlw	248
  8795  003EF8  6ED7               	movwf	4055,c	;volatile
  8796                           
  8797                           ;tmr0.c: 74: TMR0L = 0x2F;
  8798  003EFA  0E2F               	movlw	47
  8799  003EFC  6ED6               	movwf	4054,c	;volatile
  8800                           
  8801                           ;tmr0.c: 78: timer0ReloadVal = (TMR0H << 8) | TMR0L;
  8802  003EFE  50D6               	movf	4054,w,c	;volatile
  8803  003F00  CFD7 F01A          	movff	4055,??_TMR0_Initialize	;volatile
  8804  003F04  6A1B               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  8805  003F06  C01A  F01B         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  8806  003F0A  6A1A               	clrf	??_TMR0_Initialize,c
  8807  003F0C  101A               	iorwf	??_TMR0_Initialize,w,c
  8808  003F0E  6E46               	movwf	_timer0ReloadVal,c	;volatile
  8809  003F10  501B               	movf	??_TMR0_Initialize+1,w,c
  8810  003F12  6E47               	movwf	_timer0ReloadVal+1,c	;volatile
  8811                           
  8812                           ;tmr0.c: 81: INTCONbits.TMR0IF = 0;
  8813  003F14  94F2               	bcf	intcon,2,c	;volatile
  8814                           
  8815                           ;tmr0.c: 84: INTCONbits.TMR0IE = 1;
  8816  003F16  8AF2               	bsf	intcon,5,c	;volatile
  8817                           
  8818                           ;tmr0.c: 87: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  8819  003F18  0E00               	movlw	0
  8820  003F1A  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  8821  003F1C  0E00               	movlw	0
  8822  003F1E  6E19               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  8823  003F20  ECB6  F021         	call	_TMR0_SetInterruptHandler	;wreg free
  8824                           
  8825                           ;tmr0.c: 90: T0CON = 0x90;
  8826  003F24  0E90               	movlw	144
  8827  003F26  6ED5               	movwf	4053,c	;volatile
  8828  003F28  0012               	return		;funcret
  8829  003F2A                     __end_of_TMR0_Initialize:
  8830                           	opt stack 0
  8831                           tosu	equ	0xFFF
  8832                           tosh	equ	0xFFE
  8833                           tosl	equ	0xFFD
  8834                           pclath	equ	0xFFA
  8835                           tblptru	equ	0xFF8
  8836                           tblptrh	equ	0xFF7
  8837                           tblptrl	equ	0xFF6
  8838                           tablat	equ	0xFF5
  8839                           prodh	equ	0xFF4
  8840                           prodl	equ	0xFF3
  8841                           intcon	equ	0xFF2
  8842                           postinc0	equ	0xFEE
  8843                           plusw0	equ	0xFEB
  8844                           wreg	equ	0xFE8
  8845                           indf1	equ	0xFE7
  8846                           postdec1	equ	0xFE5
  8847                           fsr1h	equ	0xFE2
  8848                           fsr1l	equ	0xFE1
  8849                           indf2	equ	0xFDF
  8850                           postinc2	equ	0xFDE
  8851                           postdec2	equ	0xFDD
  8852                           plusw2	equ	0xFDB
  8853                           fsr2h	equ	0xFDA
  8854                           fsr2l	equ	0xFD9
  8855                           status	equ	0xFD8
  8856                           
  8857 ;; *************** function _TMR0_SetInterruptHandler *****************
  8858 ;; Defined at:
  8859 ;;		line 179 in file "mcc_generated_files/tmr0.c"
  8860 ;; Parameters:    Size  Location     Type
  8861 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  8862 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  8863 ;; Auto vars:     Size  Location     Type
  8864 ;;		None
  8865 ;; Return value:  Size  Location     Type
  8866 ;;                  1    wreg      void 
  8867 ;; Registers used:
  8868 ;;		wreg, status,2, status,0
  8869 ;; Tracked objects:
  8870 ;;		On entry : 0/0
  8871 ;;		On exit  : 0/0
  8872 ;;		Unchanged: 0/0
  8873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8874 ;;      Params:         2       0       0       0       0       0       0
  8875 ;;      Locals:         0       0       0       0       0       0       0
  8876 ;;      Temps:          0       0       0       0       0       0       0
  8877 ;;      Totals:         2       0       0       0       0       0       0
  8878 ;;Total ram usage:        2 bytes
  8879 ;; Hardware stack levels used:    1
  8880 ;; Hardware stack levels required when called:    4
  8881 ;; This function calls:
  8882 ;;		Nothing
  8883 ;; This function is called by:
  8884 ;;		_TMR0_Initialize
  8885 ;; This function uses a non-reentrant model
  8886 ;;
  8887                           
  8888                           	psect	text40
  8889  00436C                     __ptext40:
  8890                           	opt stack 0
  8891  00436C                     _TMR0_SetInterruptHandler:
  8892                           	opt stack 23
  8893                           
  8894                           ;tmr0.c: 180: TMR0_InterruptHandler = InterruptHandler;
  8895                           
  8896                           ;incstack = 0
  8897  00436C  C018  F1F5         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  8898  004370  C019  F1F6         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  8899  004374  0012               	return		;funcret
  8900  004376                     __end_of_TMR0_SetInterruptHandler:
  8901                           	opt stack 0
  8902                           tosu	equ	0xFFF
  8903                           tosh	equ	0xFFE
  8904                           tosl	equ	0xFFD
  8905                           pclath	equ	0xFFA
  8906                           tblptru	equ	0xFF8
  8907                           tblptrh	equ	0xFF7
  8908                           tblptrl	equ	0xFF6
  8909                           tablat	equ	0xFF5
  8910                           prodh	equ	0xFF4
  8911                           prodl	equ	0xFF3
  8912                           intcon	equ	0xFF2
  8913                           postinc0	equ	0xFEE
  8914                           plusw0	equ	0xFEB
  8915                           wreg	equ	0xFE8
  8916                           indf1	equ	0xFE7
  8917                           postdec1	equ	0xFE5
  8918                           fsr1h	equ	0xFE2
  8919                           fsr1l	equ	0xFE1
  8920                           indf2	equ	0xFDF
  8921                           postinc2	equ	0xFDE
  8922                           postdec2	equ	0xFDD
  8923                           plusw2	equ	0xFDB
  8924                           fsr2h	equ	0xFDA
  8925                           fsr2l	equ	0xFD9
  8926                           status	equ	0xFD8
  8927                           
  8928 ;; *************** function _PIN_MANAGER_Initialize *****************
  8929 ;; Defined at:
  8930 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  8931 ;; Parameters:    Size  Location     Type
  8932 ;;		None
  8933 ;; Auto vars:     Size  Location     Type
  8934 ;;		None
  8935 ;; Return value:  Size  Location     Type
  8936 ;;                  1    wreg      void 
  8937 ;; Registers used:
  8938 ;;		wreg, status,2, status,0, cstack
  8939 ;; Tracked objects:
  8940 ;;		On entry : 0/0
  8941 ;;		On exit  : 0/0
  8942 ;;		Unchanged: 0/0
  8943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8944 ;;      Params:         0       0       0       0       0       0       0
  8945 ;;      Locals:         0       0       0       0       0       0       0
  8946 ;;      Temps:          0       0       0       0       0       0       0
  8947 ;;      Totals:         0       0       0       0       0       0       0
  8948 ;;Total ram usage:        0 bytes
  8949 ;; Hardware stack levels used:    1
  8950 ;; Hardware stack levels required when called:    5
  8951 ;; This function calls:
  8952 ;;		_IOCB4_SetInterruptHandler
  8953 ;;		_IOCB5_SetInterruptHandler
  8954 ;; This function is called by:
  8955 ;;		_SYSTEM_Initialize
  8956 ;; This function uses a non-reentrant model
  8957 ;;
  8958                           
  8959                           	psect	text41
  8960  0036C4                     __ptext41:
  8961                           	opt stack 0
  8962  0036C4                     _PIN_MANAGER_Initialize:
  8963                           	opt stack 23
  8964                           
  8965                           ;pin_manager.c: 60: LATE = 0x00;
  8966                           
  8967                           ;incstack = 0
  8968  0036C4  0E00               	movlw	0
  8969  0036C6  6E8D               	movwf	3981,c	;volatile
  8970                           
  8971                           ;pin_manager.c: 61: LATD = 0x00;
  8972  0036C8  0E00               	movlw	0
  8973  0036CA  6E8C               	movwf	3980,c	;volatile
  8974                           
  8975                           ;pin_manager.c: 62: LATA = 0x06;
  8976  0036CC  0E06               	movlw	6
  8977  0036CE  6E89               	movwf	3977,c	;volatile
  8978                           
  8979                           ;pin_manager.c: 63: LATB = 0x00;
  8980  0036D0  0E00               	movlw	0
  8981  0036D2  6E8A               	movwf	3978,c	;volatile
  8982                           
  8983                           ;pin_manager.c: 64: LATC = 0x00;
  8984  0036D4  0E00               	movlw	0
  8985  0036D6  6E8B               	movwf	3979,c	;volatile
  8986                           
  8987                           ;pin_manager.c: 69: TRISE = 0x07;
  8988  0036D8  0E07               	movlw	7
  8989  0036DA  6E96               	movwf	3990,c	;volatile
  8990                           
  8991                           ;pin_manager.c: 70: TRISA = 0xE1;
  8992  0036DC  0EE1               	movlw	225
  8993  0036DE  6E92               	movwf	3986,c	;volatile
  8994                           
  8995                           ;pin_manager.c: 71: TRISB = 0xEF;
  8996  0036E0  0EEF               	movlw	239
  8997  0036E2  6E93               	movwf	3987,c	;volatile
  8998                           
  8999                           ;pin_manager.c: 72: TRISC = 0x80;
  9000  0036E4  0E80               	movlw	128
  9001  0036E6  6E94               	movwf	3988,c	;volatile
  9002                           
  9003                           ;pin_manager.c: 73: TRISD = 0xF2;
  9004  0036E8  0EF2               	movlw	242
  9005  0036EA  6E95               	movwf	3989,c	;volatile
  9006                           
  9007                           ;pin_manager.c: 78: ANSELC = 0x34;
  9008  0036EC  0E34               	movlw	52
  9009  0036EE  010F               	movlb	15	; () banked
  9010  0036F0  6F3A               	movwf	58,b	;volatile
  9011                           
  9012                           ;pin_manager.c: 79: ANSELB = 0x3E;
  9013  0036F2  0E3E               	movlw	62
  9014  0036F4  6F39               	movwf	57,b	;volatile
  9015                           
  9016                           ;pin_manager.c: 80: ANSELD = 0xE4;
  9017  0036F6  0EE4               	movlw	228
  9018  0036F8  6F3B               	movwf	59,b	;volatile
  9019                           
  9020                           ;pin_manager.c: 81: ANSELE = 0x07;
  9021  0036FA  0E07               	movlw	7
  9022  0036FC  6F3C               	movwf	60,b	;volatile
  9023                           
  9024                           ;pin_manager.c: 82: ANSELA = 0x2F;
  9025  0036FE  0E2F               	movlw	47
  9026  003700  6F38               	movwf	56,b	;volatile
  9027                           
  9028                           ;pin_manager.c: 87: WPUB = 0xC3;
  9029  003702  0EC3               	movlw	195
  9030  003704  6E61               	movwf	3937,c	;volatile
  9031                           
  9032                           ; BSR set to: 15
  9033                           ;pin_manager.c: 88: INTCON2bits.nRBPU = 0;
  9034  003706  9EF1               	bcf	intcon2,7,c	;volatile
  9035                           
  9036                           ; BSR set to: 15
  9037                           ;pin_manager.c: 96: IOCBbits.IOCB4 = 1;
  9038  003708  8862               	bsf	3938,4,c	;volatile
  9039                           
  9040                           ; BSR set to: 15
  9041                           ;pin_manager.c: 97: IOCBbits.IOCB5 = 1;
  9042  00370A  8A62               	bsf	3938,5,c	;volatile
  9043                           
  9044                           ; BSR set to: 15
  9045                           ;pin_manager.c: 100: IOCB4_SetInterruptHandler(IOCB4_DefaultInterruptHandler);
  9046  00370C  0EB0               	movlw	low _IOCB4_DefaultInterruptHandler
  9047  00370E  6E18               	movwf	IOCB4_SetInterruptHandler@InterruptHandler,c
  9048  003710  0E43               	movlw	high _IOCB4_DefaultInterruptHandler
  9049  003712  6E19               	movwf	IOCB4_SetInterruptHandler@InterruptHandler+1,c
  9050  003714  ECC0  F021         	call	_IOCB4_SetInterruptHandler	;wreg free
  9051                           
  9052                           ;pin_manager.c: 101: IOCB5_SetInterruptHandler(IOCB5_DefaultInterruptHandler);
  9053  003718  0EAE               	movlw	low _IOCB5_DefaultInterruptHandler
  9054  00371A  6E18               	movwf	IOCB5_SetInterruptHandler@InterruptHandler,c
  9055  00371C  0E43               	movlw	high _IOCB5_DefaultInterruptHandler
  9056  00371E  6E19               	movwf	IOCB5_SetInterruptHandler@InterruptHandler+1,c
  9057  003720  ECBB  F021         	call	_IOCB5_SetInterruptHandler	;wreg free
  9058                           
  9059                           ;pin_manager.c: 104: INTCONbits.RBIE = 1;
  9060  003724  86F2               	bsf	intcon,3,c	;volatile
  9061  003726  0012               	return		;funcret
  9062  003728                     __end_of_PIN_MANAGER_Initialize:
  9063                           	opt stack 0
  9064                           tosu	equ	0xFFF
  9065                           tosh	equ	0xFFE
  9066                           tosl	equ	0xFFD
  9067                           pclath	equ	0xFFA
  9068                           tblptru	equ	0xFF8
  9069                           tblptrh	equ	0xFF7
  9070                           tblptrl	equ	0xFF6
  9071                           tablat	equ	0xFF5
  9072                           prodh	equ	0xFF4
  9073                           prodl	equ	0xFF3
  9074                           intcon	equ	0xFF2
  9075                           intcon2	equ	0xFF1
  9076                           postinc0	equ	0xFEE
  9077                           plusw0	equ	0xFEB
  9078                           wreg	equ	0xFE8
  9079                           indf1	equ	0xFE7
  9080                           postdec1	equ	0xFE5
  9081                           fsr1h	equ	0xFE2
  9082                           fsr1l	equ	0xFE1
  9083                           indf2	equ	0xFDF
  9084                           postinc2	equ	0xFDE
  9085                           postdec2	equ	0xFDD
  9086                           plusw2	equ	0xFDB
  9087                           fsr2h	equ	0xFDA
  9088                           fsr2l	equ	0xFD9
  9089                           status	equ	0xFD8
  9090                           
  9091 ;; *************** function _IOCB5_SetInterruptHandler *****************
  9092 ;; Defined at:
  9093 ;;		line 172 in file "mcc_generated_files/pin_manager.c"
  9094 ;; Parameters:    Size  Location     Type
  9095 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  9096 ;;		 -> IOCB5_DefaultInterruptHandler(1), 
  9097 ;; Auto vars:     Size  Location     Type
  9098 ;;		None
  9099 ;; Return value:  Size  Location     Type
  9100 ;;                  1    wreg      void 
  9101 ;; Registers used:
  9102 ;;		wreg, status,2, status,0
  9103 ;; Tracked objects:
  9104 ;;		On entry : 0/0
  9105 ;;		On exit  : 0/0
  9106 ;;		Unchanged: 0/0
  9107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9108 ;;      Params:         2       0       0       0       0       0       0
  9109 ;;      Locals:         0       0       0       0       0       0       0
  9110 ;;      Temps:          0       0       0       0       0       0       0
  9111 ;;      Totals:         2       0       0       0       0       0       0
  9112 ;;Total ram usage:        2 bytes
  9113 ;; Hardware stack levels used:    1
  9114 ;; Hardware stack levels required when called:    4
  9115 ;; This function calls:
  9116 ;;		Nothing
  9117 ;; This function is called by:
  9118 ;;		_PIN_MANAGER_Initialize
  9119 ;; This function uses a non-reentrant model
  9120 ;;
  9121                           
  9122                           	psect	text42
  9123  004376                     __ptext42:
  9124                           	opt stack 0
  9125  004376                     _IOCB5_SetInterruptHandler:
  9126                           	opt stack 23
  9127                           
  9128                           ;pin_manager.c: 173: IOCB5_InterruptHandler = InterruptHandler;
  9129                           
  9130                           ;incstack = 0
  9131  004376  C018  F1F7         	movff	IOCB5_SetInterruptHandler@InterruptHandler,_IOCB5_InterruptHandler
  9132  00437A  C019  F1F8         	movff	IOCB5_SetInterruptHandler@InterruptHandler+1,_IOCB5_InterruptHandler+1
  9133  00437E  0012               	return		;funcret
  9134  004380                     __end_of_IOCB5_SetInterruptHandler:
  9135                           	opt stack 0
  9136                           tosu	equ	0xFFF
  9137                           tosh	equ	0xFFE
  9138                           tosl	equ	0xFFD
  9139                           pclath	equ	0xFFA
  9140                           tblptru	equ	0xFF8
  9141                           tblptrh	equ	0xFF7
  9142                           tblptrl	equ	0xFF6
  9143                           tablat	equ	0xFF5
  9144                           prodh	equ	0xFF4
  9145                           prodl	equ	0xFF3
  9146                           intcon	equ	0xFF2
  9147                           intcon2	equ	0xFF1
  9148                           postinc0	equ	0xFEE
  9149                           plusw0	equ	0xFEB
  9150                           wreg	equ	0xFE8
  9151                           indf1	equ	0xFE7
  9152                           postdec1	equ	0xFE5
  9153                           fsr1h	equ	0xFE2
  9154                           fsr1l	equ	0xFE1
  9155                           indf2	equ	0xFDF
  9156                           postinc2	equ	0xFDE
  9157                           postdec2	equ	0xFDD
  9158                           plusw2	equ	0xFDB
  9159                           fsr2h	equ	0xFDA
  9160                           fsr2l	equ	0xFD9
  9161                           status	equ	0xFD8
  9162                           
  9163 ;; *************** function _IOCB4_SetInterruptHandler *****************
  9164 ;; Defined at:
  9165 ;;		line 143 in file "mcc_generated_files/pin_manager.c"
  9166 ;; Parameters:    Size  Location     Type
  9167 ;;  InterruptHan    2   23[COMRAM] PTR FTN()void 
  9168 ;;		 -> IOCB4_DefaultInterruptHandler(1), 
  9169 ;; Auto vars:     Size  Location     Type
  9170 ;;		None
  9171 ;; Return value:  Size  Location     Type
  9172 ;;                  1    wreg      void 
  9173 ;; Registers used:
  9174 ;;		wreg, status,2, status,0
  9175 ;; Tracked objects:
  9176 ;;		On entry : 0/0
  9177 ;;		On exit  : 0/0
  9178 ;;		Unchanged: 0/0
  9179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9180 ;;      Params:         2       0       0       0       0       0       0
  9181 ;;      Locals:         0       0       0       0       0       0       0
  9182 ;;      Temps:          0       0       0       0       0       0       0
  9183 ;;      Totals:         2       0       0       0       0       0       0
  9184 ;;Total ram usage:        2 bytes
  9185 ;; Hardware stack levels used:    1
  9186 ;; Hardware stack levels required when called:    4
  9187 ;; This function calls:
  9188 ;;		Nothing
  9189 ;; This function is called by:
  9190 ;;		_PIN_MANAGER_Initialize
  9191 ;; This function uses a non-reentrant model
  9192 ;;
  9193                           
  9194                           	psect	text43
  9195  004380                     __ptext43:
  9196                           	opt stack 0
  9197  004380                     _IOCB4_SetInterruptHandler:
  9198                           	opt stack 23
  9199                           
  9200                           ;pin_manager.c: 144: IOCB4_InterruptHandler = InterruptHandler;
  9201                           
  9202                           ;incstack = 0
  9203  004380  C018  F1F9         	movff	IOCB4_SetInterruptHandler@InterruptHandler,_IOCB4_InterruptHandler
  9204  004384  C019  F1FA         	movff	IOCB4_SetInterruptHandler@InterruptHandler+1,_IOCB4_InterruptHandler+1
  9205  004388  0012               	return		;funcret
  9206  00438A                     __end_of_IOCB4_SetInterruptHandler:
  9207                           	opt stack 0
  9208                           tosu	equ	0xFFF
  9209                           tosh	equ	0xFFE
  9210                           tosl	equ	0xFFD
  9211                           pclath	equ	0xFFA
  9212                           tblptru	equ	0xFF8
  9213                           tblptrh	equ	0xFF7
  9214                           tblptrl	equ	0xFF6
  9215                           tablat	equ	0xFF5
  9216                           prodh	equ	0xFF4
  9217                           prodl	equ	0xFF3
  9218                           intcon	equ	0xFF2
  9219                           intcon2	equ	0xFF1
  9220                           postinc0	equ	0xFEE
  9221                           plusw0	equ	0xFEB
  9222                           wreg	equ	0xFE8
  9223                           indf1	equ	0xFE7
  9224                           postdec1	equ	0xFE5
  9225                           fsr1h	equ	0xFE2
  9226                           fsr1l	equ	0xFE1
  9227                           indf2	equ	0xFDF
  9228                           postinc2	equ	0xFDE
  9229                           postdec2	equ	0xFDD
  9230                           plusw2	equ	0xFDB
  9231                           fsr2h	equ	0xFDA
  9232                           fsr2l	equ	0xFD9
  9233                           status	equ	0xFD8
  9234                           
  9235 ;; *************** function _OSCILLATOR_Initialize *****************
  9236 ;; Defined at:
  9237 ;;		line 122 in file "mcc_generated_files/mcc.c"
  9238 ;; Parameters:    Size  Location     Type
  9239 ;;		None
  9240 ;; Auto vars:     Size  Location     Type
  9241 ;;		None
  9242 ;; Return value:  Size  Location     Type
  9243 ;;                  1    wreg      void 
  9244 ;; Registers used:
  9245 ;;		wreg, status,2
  9246 ;; Tracked objects:
  9247 ;;		On entry : 0/0
  9248 ;;		On exit  : 0/0
  9249 ;;		Unchanged: 0/0
  9250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9251 ;;      Params:         0       0       0       0       0       0       0
  9252 ;;      Locals:         0       0       0       0       0       0       0
  9253 ;;      Temps:          0       0       0       0       0       0       0
  9254 ;;      Totals:         0       0       0       0       0       0       0
  9255 ;;Total ram usage:        0 bytes
  9256 ;; Hardware stack levels used:    1
  9257 ;; Hardware stack levels required when called:    4
  9258 ;; This function calls:
  9259 ;;		Nothing
  9260 ;; This function is called by:
  9261 ;;		_SYSTEM_Initialize
  9262 ;; This function uses a non-reentrant model
  9263 ;;
  9264                           
  9265                           	psect	text44
  9266  004320                     __ptext44:
  9267                           	opt stack 0
  9268  004320                     _OSCILLATOR_Initialize:
  9269                           	opt stack 24
  9270                           
  9271                           ;mcc.c: 125: OSCCON = 0x60;
  9272                           
  9273                           ;incstack = 0
  9274  004320  0E60               	movlw	96
  9275  004322  6ED3               	movwf	4051,c	;volatile
  9276                           
  9277                           ;mcc.c: 127: OSCCON2 = 0x04;
  9278  004324  0E04               	movlw	4
  9279  004326  6ED2               	movwf	4050,c	;volatile
  9280                           
  9281                           ;mcc.c: 129: OSCTUNE = 0x80;
  9282  004328  0E80               	movlw	128
  9283  00432A  6E9B               	movwf	3995,c	;volatile
  9284  00432C  0012               	return		;funcret
  9285  00432E                     __end_of_OSCILLATOR_Initialize:
  9286                           	opt stack 0
  9287                           tosu	equ	0xFFF
  9288                           tosh	equ	0xFFE
  9289                           tosl	equ	0xFFD
  9290                           pclath	equ	0xFFA
  9291                           tblptru	equ	0xFF8
  9292                           tblptrh	equ	0xFF7
  9293                           tblptrl	equ	0xFF6
  9294                           tablat	equ	0xFF5
  9295                           prodh	equ	0xFF4
  9296                           prodl	equ	0xFF3
  9297                           intcon	equ	0xFF2
  9298                           intcon2	equ	0xFF1
  9299                           postinc0	equ	0xFEE
  9300                           plusw0	equ	0xFEB
  9301                           wreg	equ	0xFE8
  9302                           indf1	equ	0xFE7
  9303                           postdec1	equ	0xFE5
  9304                           fsr1h	equ	0xFE2
  9305                           fsr1l	equ	0xFE1
  9306                           indf2	equ	0xFDF
  9307                           postinc2	equ	0xFDE
  9308                           postdec2	equ	0xFDD
  9309                           plusw2	equ	0xFDB
  9310                           fsr2h	equ	0xFDA
  9311                           fsr2l	equ	0xFD9
  9312                           status	equ	0xFD8
  9313                           
  9314 ;; *************** function _INTERRUPT_Initialize *****************
  9315 ;; Defined at:
  9316 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
  9317 ;; Parameters:    Size  Location     Type
  9318 ;;		None
  9319 ;; Auto vars:     Size  Location     Type
  9320 ;;		None
  9321 ;; Return value:  Size  Location     Type
  9322 ;;                  1    wreg      void 
  9323 ;; Registers used:
  9324 ;;		None
  9325 ;; Tracked objects:
  9326 ;;		On entry : 0/0
  9327 ;;		On exit  : 0/0
  9328 ;;		Unchanged: 0/0
  9329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9330 ;;      Params:         0       0       0       0       0       0       0
  9331 ;;      Locals:         0       0       0       0       0       0       0
  9332 ;;      Temps:          0       0       0       0       0       0       0
  9333 ;;      Totals:         0       0       0       0       0       0       0
  9334 ;;Total ram usage:        0 bytes
  9335 ;; Hardware stack levels used:    1
  9336 ;; Hardware stack levels required when called:    4
  9337 ;; This function calls:
  9338 ;;		Nothing
  9339 ;; This function is called by:
  9340 ;;		_SYSTEM_Initialize
  9341 ;; This function uses a non-reentrant model
  9342 ;;
  9343                           
  9344                           	psect	text45
  9345  0043A2                     __ptext45:
  9346                           	opt stack 0
  9347  0043A2                     _INTERRUPT_Initialize:
  9348                           	opt stack 24
  9349                           
  9350                           ;interrupt_manager.c: 54: RCONbits.IPEN = 0;
  9351                           
  9352                           ;incstack = 0
  9353  0043A2  9ED0               	bcf	4048,7,c	;volatile
  9354  0043A4  0012               	return		;funcret
  9355  0043A6                     __end_of_INTERRUPT_Initialize:
  9356                           	opt stack 0
  9357                           tosu	equ	0xFFF
  9358                           tosh	equ	0xFFE
  9359                           tosl	equ	0xFFD
  9360                           pclath	equ	0xFFA
  9361                           tblptru	equ	0xFF8
  9362                           tblptrh	equ	0xFF7
  9363                           tblptrl	equ	0xFF6
  9364                           tablat	equ	0xFF5
  9365                           prodh	equ	0xFF4
  9366                           prodl	equ	0xFF3
  9367                           intcon	equ	0xFF2
  9368                           intcon2	equ	0xFF1
  9369                           postinc0	equ	0xFEE
  9370                           plusw0	equ	0xFEB
  9371                           wreg	equ	0xFE8
  9372                           indf1	equ	0xFE7
  9373                           postdec1	equ	0xFE5
  9374                           fsr1h	equ	0xFE2
  9375                           fsr1l	equ	0xFE1
  9376                           indf2	equ	0xFDF
  9377                           postinc2	equ	0xFDE
  9378                           postdec2	equ	0xFDD
  9379                           plusw2	equ	0xFDB
  9380                           fsr2h	equ	0xFDA
  9381                           fsr2l	equ	0xFD9
  9382                           status	equ	0xFD8
  9383                           
  9384 ;; *************** function _EUSART1_Initialize *****************
  9385 ;; Defined at:
  9386 ;;		line 74 in file "mcc_generated_files/eusart1.c"
  9387 ;; Parameters:    Size  Location     Type
  9388 ;;		None
  9389 ;; Auto vars:     Size  Location     Type
  9390 ;;		None
  9391 ;; Return value:  Size  Location     Type
  9392 ;;                  1    wreg      void 
  9393 ;; Registers used:
  9394 ;;		wreg, status,2
  9395 ;; Tracked objects:
  9396 ;;		On entry : 0/0
  9397 ;;		On exit  : 0/0
  9398 ;;		Unchanged: 0/0
  9399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9400 ;;      Params:         0       0       0       0       0       0       0
  9401 ;;      Locals:         0       0       0       0       0       0       0
  9402 ;;      Temps:          0       0       0       0       0       0       0
  9403 ;;      Totals:         0       0       0       0       0       0       0
  9404 ;;Total ram usage:        0 bytes
  9405 ;; Hardware stack levels used:    1
  9406 ;; Hardware stack levels required when called:    4
  9407 ;; This function calls:
  9408 ;;		Nothing
  9409 ;; This function is called by:
  9410 ;;		_SYSTEM_Initialize
  9411 ;; This function uses a non-reentrant model
  9412 ;;
  9413                           
  9414                           	psect	text46
  9415  003E20                     __ptext46:
  9416                           	opt stack 0
  9417  003E20                     _EUSART1_Initialize:
  9418                           	opt stack 24
  9419                           
  9420                           ;eusart1.c: 77: PIE1bits.RC1IE = 0;
  9421                           
  9422                           ;incstack = 0
  9423  003E20  9A9D               	bcf	3997,5,c	;volatile
  9424                           
  9425                           ;eusart1.c: 78: PIE1bits.TX1IE = 0;
  9426  003E22  989D               	bcf	3997,4,c	;volatile
  9427                           
  9428                           ;eusart1.c: 82: BAUDCON1 = 0x08;
  9429  003E24  0E08               	movlw	8
  9430  003E26  6EB8               	movwf	4024,c	;volatile
  9431                           
  9432                           ;eusart1.c: 85: RCSTA1 = 0x90;
  9433  003E28  0E90               	movlw	144
  9434  003E2A  6EAB               	movwf	4011,c	;volatile
  9435                           
  9436                           ;eusart1.c: 88: TXSTA1 = 0x24;
  9437  003E2C  0E24               	movlw	36
  9438  003E2E  6EAC               	movwf	4012,c	;volatile
  9439                           
  9440                           ;eusart1.c: 91: SPBRG1 = 0x10;
  9441  003E30  0E10               	movlw	16
  9442  003E32  6EAF               	movwf	4015,c	;volatile
  9443                           
  9444                           ;eusart1.c: 94: SPBRGH1 = 0x00;
  9445  003E34  0E00               	movlw	0
  9446  003E36  6EB0               	movwf	4016,c	;volatile
  9447                           
  9448                           ;eusart1.c: 98: eusart1TxHead = 0;
  9449  003E38  0E00               	movlw	0
  9450  003E3A  6E36               	movwf	_eusart1TxHead,c	;volatile
  9451                           
  9452                           ;eusart1.c: 99: eusart1TxTail = 0;
  9453  003E3C  0E00               	movlw	0
  9454  003E3E  6E35               	movwf	_eusart1TxTail,c	;volatile
  9455                           
  9456                           ;eusart1.c: 100: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  9457  003E40  0E46               	movlw	70
  9458  003E42  0100               	movlb	0	; () banked
  9459  003E44  6FFF               	movwf	_eusart1TxBufferRemaining& (0+255),b	;volatile
  9460                           
  9461                           ;eusart1.c: 102: eusart1RxHead = 0;
  9462  003E46  0E00               	movlw	0
  9463  003E48  6E34               	movwf	_eusart1RxHead,c	;volatile
  9464                           
  9465                           ;eusart1.c: 103: eusart1RxTail = 0;
  9466  003E4A  0E00               	movlw	0
  9467  003E4C  6E33               	movwf	_eusart1RxTail,c	;volatile
  9468                           
  9469                           ;eusart1.c: 104: eusart1RxCount = 0;
  9470  003E4E  0E00               	movlw	0
  9471  003E50  6FF9               	movwf	_eusart1RxCount& (0+255),b	;volatile
  9472                           
  9473                           ; BSR set to: 0
  9474                           ;eusart1.c: 107: PIE1bits.RC1IE = 1;
  9475  003E52  8A9D               	bsf	3997,5,c	;volatile
  9476                           
  9477                           ; BSR set to: 0
  9478  003E54  0012               	return		;funcret
  9479  003E56                     __end_of_EUSART1_Initialize:
  9480                           	opt stack 0
  9481                           tosu	equ	0xFFF
  9482                           tosh	equ	0xFFE
  9483                           tosl	equ	0xFFD
  9484                           pclath	equ	0xFFA
  9485                           tblptru	equ	0xFF8
  9486                           tblptrh	equ	0xFF7
  9487                           tblptrl	equ	0xFF6
  9488                           tablat	equ	0xFF5
  9489                           prodh	equ	0xFF4
  9490                           prodl	equ	0xFF3
  9491                           intcon	equ	0xFF2
  9492                           intcon2	equ	0xFF1
  9493                           postinc0	equ	0xFEE
  9494                           plusw0	equ	0xFEB
  9495                           wreg	equ	0xFE8
  9496                           indf1	equ	0xFE7
  9497                           postdec1	equ	0xFE5
  9498                           fsr1h	equ	0xFE2
  9499                           fsr1l	equ	0xFE1
  9500                           indf2	equ	0xFDF
  9501                           postinc2	equ	0xFDE
  9502                           postdec2	equ	0xFDD
  9503                           plusw2	equ	0xFDB
  9504                           fsr2h	equ	0xFDA
  9505                           fsr2l	equ	0xFD9
  9506                           status	equ	0xFD8
  9507                           
  9508 ;; *************** function _ADC_Initialize *****************
  9509 ;; Defined at:
  9510 ;;		line 58 in file "mcc_generated_files/adc.c"
  9511 ;; Parameters:    Size  Location     Type
  9512 ;;		None
  9513 ;; Auto vars:     Size  Location     Type
  9514 ;;		None
  9515 ;; Return value:  Size  Location     Type
  9516 ;;                  1    wreg      void 
  9517 ;; Registers used:
  9518 ;;		wreg, status,2
  9519 ;; Tracked objects:
  9520 ;;		On entry : 0/0
  9521 ;;		On exit  : 0/0
  9522 ;;		Unchanged: 0/0
  9523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9524 ;;      Params:         0       0       0       0       0       0       0
  9525 ;;      Locals:         0       0       0       0       0       0       0
  9526 ;;      Temps:          0       0       0       0       0       0       0
  9527 ;;      Totals:         0       0       0       0       0       0       0
  9528 ;;Total ram usage:        0 bytes
  9529 ;; Hardware stack levels used:    1
  9530 ;; Hardware stack levels required when called:    4
  9531 ;; This function calls:
  9532 ;;		Nothing
  9533 ;; This function is called by:
  9534 ;;		_SYSTEM_Initialize
  9535 ;; This function uses a non-reentrant model
  9536 ;;
  9537                           
  9538                           	psect	text47
  9539  004278                     __ptext47:
  9540                           	opt stack 0
  9541  004278                     _ADC_Initialize:
  9542                           	opt stack 24
  9543                           
  9544                           ;adc.c: 63: ADCON0 = 0x05;
  9545                           
  9546                           ; BSR set to: 0
  9547                           ;incstack = 0
  9548  004278  0E05               	movlw	5
  9549  00427A  6EC2               	movwf	4034,c	;volatile
  9550                           
  9551                           ;adc.c: 66: ADCON1 = 0x00;
  9552  00427C  0E00               	movlw	0
  9553  00427E  6EC1               	movwf	4033,c	;volatile
  9554                           
  9555                           ;adc.c: 69: ADCON2 = 0x87;
  9556  004280  0E87               	movlw	135
  9557  004282  6EC0               	movwf	4032,c	;volatile
  9558                           
  9559                           ;adc.c: 72: ADRESL = 0x00;
  9560  004284  0E00               	movlw	0
  9561  004286  6EC3               	movwf	4035,c	;volatile
  9562                           
  9563                           ;adc.c: 75: ADRESH = 0x00;
  9564  004288  0E00               	movlw	0
  9565  00428A  6EC4               	movwf	4036,c	;volatile
  9566  00428C  0012               	return		;funcret
  9567  00428E                     __end_of_ADC_Initialize:
  9568                           	opt stack 0
  9569                           tosu	equ	0xFFF
  9570                           tosh	equ	0xFFE
  9571                           tosl	equ	0xFFD
  9572                           pclath	equ	0xFFA
  9573                           tblptru	equ	0xFF8
  9574                           tblptrh	equ	0xFF7
  9575                           tblptrl	equ	0xFF6
  9576                           tablat	equ	0xFF5
  9577                           prodh	equ	0xFF4
  9578                           prodl	equ	0xFF3
  9579                           intcon	equ	0xFF2
  9580                           intcon2	equ	0xFF1
  9581                           postinc0	equ	0xFEE
  9582                           plusw0	equ	0xFEB
  9583                           wreg	equ	0xFE8
  9584                           indf1	equ	0xFE7
  9585                           postdec1	equ	0xFE5
  9586                           fsr1h	equ	0xFE2
  9587                           fsr1l	equ	0xFE1
  9588                           indf2	equ	0xFDF
  9589                           postinc2	equ	0xFDE
  9590                           postdec2	equ	0xFDD
  9591                           plusw2	equ	0xFDB
  9592                           fsr2h	equ	0xFDA
  9593                           fsr2l	equ	0xFD9
  9594                           status	equ	0xFD8
  9595                           
  9596 ;; *************** function _SetMcuRunTime *****************
  9597 ;; Defined at:
  9598 ;;		line 57 in file "SystemStatus.c"
  9599 ;; Parameters:    Size  Location     Type
  9600 ;;		None
  9601 ;; Auto vars:     Size  Location     Type
  9602 ;;		None
  9603 ;; Return value:  Size  Location     Type
  9604 ;;                  1    wreg      void 
  9605 ;; Registers used:
  9606 ;;		wreg, status,2, status,0, cstack
  9607 ;; Tracked objects:
  9608 ;;		On entry : 0/0
  9609 ;;		On exit  : 0/0
  9610 ;;		Unchanged: 0/0
  9611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9612 ;;      Params:         0       0       0       0       0       0       0
  9613 ;;      Locals:         0       0       0       0       0       0       0
  9614 ;;      Temps:          0       0       0       0       0       0       0
  9615 ;;      Totals:         0       0       0       0       0       0       0
  9616 ;;Total ram usage:        0 bytes
  9617 ;; Hardware stack levels used:    1
  9618 ;; Hardware stack levels required when called:    5
  9619 ;; This function calls:
  9620 ;;		___llmod
  9621 ;; This function is called by:
  9622 ;;		_main
  9623 ;; This function uses a non-reentrant model
  9624 ;;
  9625                           
  9626                           	psect	text48
  9627  003B86                     __ptext48:
  9628                           	opt stack 0
  9629  003B86                     _SetMcuRunTime:
  9630                           	opt stack 25
  9631                           
  9632                           ;SystemStatus.c: 59: mcuRunTimeIn5SecTicks++;
  9633                           
  9634                           ;incstack = 0
  9635  003B86  0E01               	movlw	1
  9636  003B88  0101               	movlb	1	; () banked
  9637  003B8A  2728               	addwf	_mcuRunTimeIn5SecTicks& (0+255),f,b
  9638  003B8C  0E00               	movlw	0
  9639  003B8E  2329               	addwfc	(_mcuRunTimeIn5SecTicks+1)& (0+255),f,b
  9640  003B90  232A               	addwfc	(_mcuRunTimeIn5SecTicks+2)& (0+255),f,b
  9641  003B92  232B               	addwfc	(_mcuRunTimeIn5SecTicks+3)& (0+255),f,b
  9642                           
  9643                           ; BSR set to: 1
  9644                           ;SystemStatus.c: 60: mcuRunTimeIn5SecTicks %= (17280);
  9645  003B94  C128  F018         	movff	_mcuRunTimeIn5SecTicks,___llmod@dividend
  9646  003B98  C129  F019         	movff	_mcuRunTimeIn5SecTicks+1,___llmod@dividend+1
  9647  003B9C  C12A  F01A         	movff	_mcuRunTimeIn5SecTicks+2,___llmod@dividend+2
  9648  003BA0  C12B  F01B         	movff	_mcuRunTimeIn5SecTicks+3,___llmod@dividend+3
  9649  003BA4  0E80               	movlw	128
  9650  003BA6  6E1C               	movwf	___llmod@divisor,c
  9651  003BA8  0E43               	movlw	67
  9652  003BAA  6E1D               	movwf	___llmod@divisor+1,c
  9653  003BAC  0E00               	movlw	0
  9654  003BAE  6E1E               	movwf	___llmod@divisor+2,c
  9655  003BB0  0E00               	movlw	0
  9656  003BB2  6E1F               	movwf	___llmod@divisor+3,c
  9657  003BB4  EC2F  F01B         	call	___llmod	;wreg free
  9658  003BB8  C018  F128         	movff	?___llmod,_mcuRunTimeIn5SecTicks
  9659  003BBC  C019  F129         	movff	?___llmod+1,_mcuRunTimeIn5SecTicks+1
  9660  003BC0  C01A  F12A         	movff	?___llmod+2,_mcuRunTimeIn5SecTicks+2
  9661  003BC4  C01B  F12B         	movff	?___llmod+3,_mcuRunTimeIn5SecTicks+3
  9662  003BC8  0012               	return		;funcret
  9663  003BCA                     __end_of_SetMcuRunTime:
  9664                           	opt stack 0
  9665                           tosu	equ	0xFFF
  9666                           tosh	equ	0xFFE
  9667                           tosl	equ	0xFFD
  9668                           pclath	equ	0xFFA
  9669                           tblptru	equ	0xFF8
  9670                           tblptrh	equ	0xFF7
  9671                           tblptrl	equ	0xFF6
  9672                           tablat	equ	0xFF5
  9673                           prodh	equ	0xFF4
  9674                           prodl	equ	0xFF3
  9675                           intcon	equ	0xFF2
  9676                           intcon2	equ	0xFF1
  9677                           postinc0	equ	0xFEE
  9678                           plusw0	equ	0xFEB
  9679                           wreg	equ	0xFE8
  9680                           indf1	equ	0xFE7
  9681                           postdec1	equ	0xFE5
  9682                           fsr1h	equ	0xFE2
  9683                           fsr1l	equ	0xFE1
  9684                           indf2	equ	0xFDF
  9685                           postinc2	equ	0xFDE
  9686                           postdec2	equ	0xFDD
  9687                           plusw2	equ	0xFDB
  9688                           fsr2h	equ	0xFDA
  9689                           fsr2l	equ	0xFD9
  9690                           status	equ	0xFD8
  9691                           
  9692 ;; *************** function ___llmod *****************
  9693 ;; Defined at:
  9694 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  9695 ;; Parameters:    Size  Location     Type
  9696 ;;  dividend        4   23[COMRAM] unsigned long 
  9697 ;;  divisor         4   27[COMRAM] unsigned long 
  9698 ;; Auto vars:     Size  Location     Type
  9699 ;;  counter         1   31[COMRAM] unsigned char 
  9700 ;; Return value:  Size  Location     Type
  9701 ;;                  4   23[COMRAM] unsigned long 
  9702 ;; Registers used:
  9703 ;;		wreg, status,2, status,0
  9704 ;; Tracked objects:
  9705 ;;		On entry : 0/0
  9706 ;;		On exit  : 0/0
  9707 ;;		Unchanged: 0/0
  9708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9709 ;;      Params:         8       0       0       0       0       0       0
  9710 ;;      Locals:         1       0       0       0       0       0       0
  9711 ;;      Temps:          0       0       0       0       0       0       0
  9712 ;;      Totals:         9       0       0       0       0       0       0
  9713 ;;Total ram usage:        9 bytes
  9714 ;; Hardware stack levels used:    1
  9715 ;; Hardware stack levels required when called:    4
  9716 ;; This function calls:
  9717 ;;		Nothing
  9718 ;; This function is called by:
  9719 ;;		_SetMcuRunTime
  9720 ;;		_GetMcuRunTime
  9721 ;; This function uses a non-reentrant model
  9722 ;;
  9723                           
  9724                           	psect	text49
  9725  00365E                     __ptext49:
  9726                           	opt stack 0
  9727  00365E                     ___llmod:
  9728                           	opt stack 23
  9729                           
  9730                           ;incstack = 0
  9731  00365E  501C               	movf	___llmod@divisor,w,c
  9732  003660  101D               	iorwf	___llmod@divisor+1,w,c
  9733  003662  101E               	iorwf	___llmod@divisor+2,w,c
  9734  003664  101F               	iorwf	___llmod@divisor+3,w,c
  9735  003666  B4D8               	btfsc	status,2,c
  9736  003668  D024               	goto	l1962
  9737  00366A  0E01               	movlw	1
  9738  00366C  6E20               	movwf	___llmod@counter,c
  9739  00366E  D006               	goto	l1957
  9740  003670  90D8               	bcf	status,0,c
  9741  003672  361C               	rlcf	___llmod@divisor,f,c
  9742  003674  361D               	rlcf	___llmod@divisor+1,f,c
  9743  003676  361E               	rlcf	___llmod@divisor+2,f,c
  9744  003678  361F               	rlcf	___llmod@divisor+3,f,c
  9745  00367A  2A20               	incf	___llmod@counter,f,c
  9746  00367C                     l1957:
  9747  00367C  AE1F               	btfss	___llmod@divisor+3,7,c
  9748  00367E  D7F8               	goto	l1958
  9749  003680                     u8200:
  9750  003680  501C               	movf	___llmod@divisor,w,c
  9751  003682  5C18               	subwf	___llmod@dividend,w,c
  9752  003684  501D               	movf	___llmod@divisor+1,w,c
  9753  003686  5819               	subwfb	___llmod@dividend+1,w,c
  9754  003688  501E               	movf	___llmod@divisor+2,w,c
  9755  00368A  581A               	subwfb	___llmod@dividend+2,w,c
  9756  00368C  501F               	movf	___llmod@divisor+3,w,c
  9757  00368E  581B               	subwfb	___llmod@dividend+3,w,c
  9758  003690  A0D8               	btfss	status,0,c
  9759  003692  D008               	goto	l1961
  9760  003694  501C               	movf	___llmod@divisor,w,c
  9761  003696  5E18               	subwf	___llmod@dividend,f,c
  9762  003698  501D               	movf	___llmod@divisor+1,w,c
  9763  00369A  5A19               	subwfb	___llmod@dividend+1,f,c
  9764  00369C  501E               	movf	___llmod@divisor+2,w,c
  9765  00369E  5A1A               	subwfb	___llmod@dividend+2,f,c
  9766  0036A0  501F               	movf	___llmod@divisor+3,w,c
  9767  0036A2  5A1B               	subwfb	___llmod@dividend+3,f,c
  9768  0036A4                     l1961:
  9769  0036A4  90D8               	bcf	status,0,c
  9770  0036A6  321F               	rrcf	___llmod@divisor+3,f,c
  9771  0036A8  321E               	rrcf	___llmod@divisor+2,f,c
  9772  0036AA  321D               	rrcf	___llmod@divisor+1,f,c
  9773  0036AC  321C               	rrcf	___llmod@divisor,f,c
  9774  0036AE  2E20               	decfsz	___llmod@counter,f,c
  9775  0036B0  D7E7               	goto	u8200
  9776  0036B2                     l1962:
  9777  0036B2  C018  F018         	movff	___llmod@dividend,?___llmod
  9778  0036B6  C019  F019         	movff	___llmod@dividend+1,?___llmod+1
  9779  0036BA  C01A  F01A         	movff	___llmod@dividend+2,?___llmod+2
  9780  0036BE  C01B  F01B         	movff	___llmod@dividend+3,?___llmod+3
  9781  0036C2  0012               	return		;funcret
  9782  0036C4                     __end_of___llmod:
  9783                           	opt stack 0
  9784                           tosu	equ	0xFFF
  9785                           tosh	equ	0xFFE
  9786                           tosl	equ	0xFFD
  9787                           pclath	equ	0xFFA
  9788                           tblptru	equ	0xFF8
  9789                           tblptrh	equ	0xFF7
  9790                           tblptrl	equ	0xFF6
  9791                           tablat	equ	0xFF5
  9792                           prodh	equ	0xFF4
  9793                           prodl	equ	0xFF3
  9794                           intcon	equ	0xFF2
  9795                           intcon2	equ	0xFF1
  9796                           postinc0	equ	0xFEE
  9797                           plusw0	equ	0xFEB
  9798                           wreg	equ	0xFE8
  9799                           indf1	equ	0xFE7
  9800                           postdec1	equ	0xFE5
  9801                           fsr1h	equ	0xFE2
  9802                           fsr1l	equ	0xFE1
  9803                           indf2	equ	0xFDF
  9804                           postinc2	equ	0xFDE
  9805                           postdec2	equ	0xFDD
  9806                           plusw2	equ	0xFDB
  9807                           fsr2h	equ	0xFDA
  9808                           fsr2l	equ	0xFD9
  9809                           status	equ	0xFD8
  9810                           
  9811 ;; *************** function _SendSystemStartAck *****************
  9812 ;; Defined at:
  9813 ;;		line 153 in file "SystemCommon.c"
  9814 ;; Parameters:    Size  Location     Type
  9815 ;;		None
  9816 ;; Auto vars:     Size  Location     Type
  9817 ;;		None
  9818 ;; Return value:  Size  Location     Type
  9819 ;;                  1    wreg      void 
  9820 ;; Registers used:
  9821 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9822 ;; Tracked objects:
  9823 ;;		On entry : 0/0
  9824 ;;		On exit  : 0/0
  9825 ;;		Unchanged: 0/0
  9826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9827 ;;      Params:         0       0       0       0       0       0       0
  9828 ;;      Locals:         0       0       0       0       0       0       0
  9829 ;;      Temps:          0       0       0       0       0       0       0
  9830 ;;      Totals:         0       0       0       0       0       0       0
  9831 ;;Total ram usage:        0 bytes
  9832 ;; Hardware stack levels used:    1
  9833 ;; Hardware stack levels required when called:    7
  9834 ;; This function calls:
  9835 ;;		_SendAckMessage
  9836 ;; This function is called by:
  9837 ;;		_main
  9838 ;; This function uses a non-reentrant model
  9839 ;;
  9840                           
  9841                           	psect	text50
  9842  004356                     __ptext50:
  9843                           	opt stack 0
  9844  004356                     _SendSystemStartAck:
  9845                           	opt stack 23
  9846                           
  9847                           ;SystemCommon.c: 155: SendAckMessage((MSG_GROUPS)CONTROL_MSG, (MSG_REQUEST)CONTROL_SYSTE
      +                          M_START);
  9848                           
  9849                           ;incstack = 0
  9850  004356  0E10               	movlw	16
  9851  004358  6E24               	movwf	SendAckMessage@inRequest,c
  9852  00435A  0E01               	movlw	1
  9853  00435C  EC51  F01D         	call	_SendAckMessage
  9854  004360  0012               	return		;funcret
  9855  004362                     __end_of_SendSystemStartAck:
  9856                           	opt stack 0
  9857                           tosu	equ	0xFFF
  9858                           tosh	equ	0xFFE
  9859                           tosl	equ	0xFFD
  9860                           pclath	equ	0xFFA
  9861                           tblptru	equ	0xFF8
  9862                           tblptrh	equ	0xFF7
  9863                           tblptrl	equ	0xFF6
  9864                           tablat	equ	0xFF5
  9865                           prodh	equ	0xFF4
  9866                           prodl	equ	0xFF3
  9867                           intcon	equ	0xFF2
  9868                           intcon2	equ	0xFF1
  9869                           postinc0	equ	0xFEE
  9870                           plusw0	equ	0xFEB
  9871                           wreg	equ	0xFE8
  9872                           indf1	equ	0xFE7
  9873                           postdec1	equ	0xFE5
  9874                           fsr1h	equ	0xFE2
  9875                           fsr1l	equ	0xFE1
  9876                           indf2	equ	0xFDF
  9877                           postinc2	equ	0xFDE
  9878                           postdec2	equ	0xFDD
  9879                           plusw2	equ	0xFDB
  9880                           fsr2h	equ	0xFDA
  9881                           fsr2l	equ	0xFD9
  9882                           status	equ	0xFD8
  9883                           
  9884 ;; *************** function _SendAckMessage *****************
  9885 ;; Defined at:
  9886 ;;		line 171 in file "EusartApp.c"
  9887 ;; Parameters:    Size  Location     Type
  9888 ;;  inGroup         1    wreg     enum E7193
  9889 ;;  inRequest       1   35[COMRAM] enum E7201
  9890 ;; Auto vars:     Size  Location     Type
  9891 ;;  inGroup         1   36[COMRAM] enum E7193
  9892 ;;  TxMsg           6   37[COMRAM] unsigned char [6]
  9893 ;; Return value:  Size  Location     Type
  9894 ;;                  1    wreg      void 
  9895 ;; Registers used:
  9896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9897 ;; Tracked objects:
  9898 ;;		On entry : 0/0
  9899 ;;		On exit  : 0/0
  9900 ;;		Unchanged: 0/0
  9901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9902 ;;      Params:         1       0       0       0       0       0       0
  9903 ;;      Locals:         7       0       0       0       0       0       0
  9904 ;;      Temps:          0       0       0       0       0       0       0
  9905 ;;      Totals:         8       0       0       0       0       0       0
  9906 ;;Total ram usage:        8 bytes
  9907 ;; Hardware stack levels used:    1
  9908 ;; Hardware stack levels required when called:    6
  9909 ;; This function calls:
  9910 ;;		_WriteUartMessage
  9911 ;;		_ZeroArray
  9912 ;;		_crc8
  9913 ;; This function is called by:
  9914 ;;		_testLeds
  9915 ;;		_SetChannelMode
  9916 ;;		_FlashReadUart
  9917 ;;		_FlashEreaseMem
  9918 ;;		_DacSetValue
  9919 ;;		_UpdateSynthFreq
  9920 ;;		_SetSynthOper
  9921 ;;		_ResetMcu
  9922 ;;		_SendSystemStartAck
  9923 ;;		_keepAliveSignalUart
  9924 ;; This function uses a non-reentrant model
  9925 ;;
  9926                           
  9927                           	psect	text51
  9928  003AA2                     __ptext51:
  9929                           	opt stack 0
  9930  003AA2                     _SendAckMessage:
  9931                           	opt stack 21
  9932                           
  9933                           ;incstack = 0
  9934                           ;SendAckMessage@inGroup stored from wreg
  9935  003AA2  6E25               	movwf	SendAckMessage@inGroup,c
  9936                           
  9937                           ;EusartApp.c: 174: char TxMsg[(0x5) + 1];
  9938                           ;EusartApp.c: 175: ZeroArray(TxMsg, (0x5) + 1);
  9939  003AA4  0E26               	movlw	low SendAckMessage@TxMsg
  9940  003AA6  6E20               	movwf	ZeroArray@array,c
  9941  003AA8  0E00               	movlw	high SendAckMessage@TxMsg
  9942  003AAA  6E21               	movwf	ZeroArray@array+1,c
  9943  003AAC  0E00               	movlw	0
  9944  003AAE  6E23               	movwf	ZeroArray@size+1,c
  9945  003AB0  0E06               	movlw	6
  9946  003AB2  6E22               	movwf	ZeroArray@size,c
  9947  003AB4  ECF8  F020         	call	_ZeroArray	;wreg free
  9948                           
  9949                           ;EusartApp.c: 178: TxMsg[(0)] = (0x24);
  9950  003AB8  0E24               	movlw	36
  9951  003ABA  6E26               	movwf	SendAckMessage@TxMsg,c
  9952                           
  9953                           ;EusartApp.c: 179: TxMsg[(1)] = inGroup;
  9954  003ABC  C025  F027         	movff	SendAckMessage@inGroup,SendAckMessage@TxMsg+1
  9955                           
  9956                           ;EusartApp.c: 180: TxMsg[(2)] = inRequest;
  9957  003AC0  C024  F028         	movff	SendAckMessage@inRequest,SendAckMessage@TxMsg+2
  9958                           
  9959                           ;EusartApp.c: 181: TxMsg[(3)] = 0;
  9960  003AC4  0E00               	movlw	0
  9961  003AC6  6E29               	movwf	SendAckMessage@TxMsg+3,c
  9962                           
  9963                           ;EusartApp.c: 183: TxMsg[(0x5)] = crc8(TxMsg, (0x5));
  9964  003AC8  0E26               	movlw	low SendAckMessage@TxMsg
  9965  003ACA  6E18               	movwf	crc8@dataArray,c
  9966  003ACC  0E00               	movlw	high SendAckMessage@TxMsg
  9967  003ACE  6E19               	movwf	crc8@dataArray+1,c
  9968  003AD0  0E00               	movlw	0
  9969  003AD2  6E1B               	movwf	crc8@dataSize+1,c
  9970  003AD4  0E05               	movlw	5
  9971  003AD6  6E1A               	movwf	crc8@dataSize,c
  9972  003AD8  EC7A  F01D         	call	_crc8	;wreg free
  9973  003ADC  6E2B               	movwf	SendAckMessage@TxMsg+5,c
  9974                           
  9975                           ;EusartApp.c: 185: WriteUartMessage(TxMsg, (0x5) + 1);
  9976  003ADE  0E26               	movlw	low SendAckMessage@TxMsg
  9977  003AE0  6E19               	movwf	WriteUartMessage@dataBuf,c
  9978  003AE2  0E00               	movlw	high SendAckMessage@TxMsg
  9979  003AE4  6E1A               	movwf	WriteUartMessage@dataBuf+1,c
  9980  003AE6  0E00               	movlw	0
  9981  003AE8  6E1C               	movwf	WriteUartMessage@dataSize+1,c
  9982  003AEA  0E06               	movlw	6
  9983  003AEC  6E1B               	movwf	WriteUartMessage@dataSize,c
  9984  003AEE  EC2B  F01F         	call	_WriteUartMessage	;wreg free
  9985  003AF2  0012               	return		;funcret
  9986  003AF4                     __end_of_SendAckMessage:
  9987                           	opt stack 0
  9988                           tosu	equ	0xFFF
  9989                           tosh	equ	0xFFE
  9990                           tosl	equ	0xFFD
  9991                           pclath	equ	0xFFA
  9992                           tblptru	equ	0xFF8
  9993                           tblptrh	equ	0xFF7
  9994                           tblptrl	equ	0xFF6
  9995                           tablat	equ	0xFF5
  9996                           prodh	equ	0xFF4
  9997                           prodl	equ	0xFF3
  9998                           intcon	equ	0xFF2
  9999                           intcon2	equ	0xFF1
 10000                           postinc0	equ	0xFEE
 10001                           plusw0	equ	0xFEB
 10002                           wreg	equ	0xFE8
 10003                           indf1	equ	0xFE7
 10004                           postdec1	equ	0xFE5
 10005                           fsr1h	equ	0xFE2
 10006                           fsr1l	equ	0xFE1
 10007                           indf2	equ	0xFDF
 10008                           postinc2	equ	0xFDE
 10009                           postdec2	equ	0xFDD
 10010                           plusw2	equ	0xFDB
 10011                           fsr2h	equ	0xFDA
 10012                           fsr2l	equ	0xFD9
 10013                           status	equ	0xFD8
 10014                           
 10015 ;; *************** function _crc8 *****************
 10016 ;; Defined at:
 10017 ;;		line 13 in file "SystemCommon.c"
 10018 ;; Parameters:    Size  Location     Type
 10019 ;;  dataArray       2   23[COMRAM] PTR unsigned char 
 10020 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(18), SynthReadData@TxMsg(22), DacReadValue@TxMsg(7), 
 10021 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), rxMsgQueue(20), 
 10022 ;;  dataSize        2   25[COMRAM] int 
 10023 ;; Auto vars:     Size  Location     Type
 10024 ;;  i               2   30[COMRAM] int 
 10025 ;;  crc             2   28[COMRAM] int 
 10026 ;; Return value:  Size  Location     Type
 10027 ;;                  1    wreg      unsigned char 
 10028 ;; Registers used:
 10029 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10030 ;; Tracked objects:
 10031 ;;		On entry : 0/0
 10032 ;;		On exit  : 0/0
 10033 ;;		Unchanged: 0/0
 10034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10035 ;;      Params:         4       0       0       0       0       0       0
 10036 ;;      Locals:         4       0       0       0       0       0       0
 10037 ;;      Temps:          1       0       0       0       0       0       0
 10038 ;;      Totals:         9       0       0       0       0       0       0
 10039 ;;Total ram usage:        9 bytes
 10040 ;; Hardware stack levels used:    1
 10041 ;; Hardware stack levels required when called:    4
 10042 ;; This function calls:
 10043 ;;		Nothing
 10044 ;; This function is called by:
 10045 ;;		_readUartMessage
 10046 ;;		_SendAckMessage
 10047 ;;		_FlashReadUart
 10048 ;;		_FlashReadCondition
 10049 ;;		_DacReadValue
 10050 ;;		_SynthReadData
 10051 ;;		_GetMcuFwVersion
 10052 ;;		_GetMcuRunTime
 10053 ;; This function uses a non-reentrant model
 10054 ;;
 10055                           
 10056                           	psect	text52
 10057  003AF4                     __ptext52:
 10058                           	opt stack 0
 10059  003AF4                     _crc8:
 10060                           	opt stack 25
 10061                           
 10062                           ;SystemCommon.c: 15: int crc = 0;
 10063                           
 10064                           ;incstack = 0
 10065  003AF4  0E00               	movlw	0
 10066  003AF6  6E1E               	movwf	crc8@crc+1,c
 10067  003AF8  0E00               	movlw	0
 10068  003AFA  6E1D               	movwf	crc8@crc,c
 10069                           
 10070                           ;SystemCommon.c: 16: for (int i = 0; i < dataSize; i++)
 10071  003AFC  0E00               	movlw	0
 10072  003AFE  6E20               	movwf	crc8@i+1,c
 10073  003B00  0E00               	movlw	0
 10074  003B02  6E1F               	movwf	crc8@i,c
 10075  003B04  D00E               	goto	l1389
 10076  003B06                     
 10077                           ;SystemCommon.c: 17: {
 10078                           ;SystemCommon.c: 18: crc += dataArray[i];
 10079  003B06  501F               	movf	crc8@i,w,c
 10080  003B08  2418               	addwf	crc8@dataArray,w,c
 10081  003B0A  6ED9               	movwf	fsr2l,c
 10082  003B0C  5020               	movf	crc8@i+1,w,c
 10083  003B0E  2019               	addwfc	crc8@dataArray+1,w,c
 10084  003B10  6EDA               	movwf	fsr2h,c
 10085  003B12  50DF               	movf	indf2,w,c
 10086  003B14  6E1C               	movwf	??_crc8& (0+255),c
 10087  003B16  501C               	movf	??_crc8,w,c
 10088  003B18  261D               	addwf	crc8@crc,f,c
 10089  003B1A  0E00               	movlw	0
 10090  003B1C  221E               	addwfc	crc8@crc+1,f,c
 10091  003B1E  4A1F               	infsnz	crc8@i,f,c
 10092  003B20  2A20               	incf	crc8@i+1,f,c
 10093  003B22                     l1389:
 10094  003B22  501A               	movf	crc8@dataSize,w,c
 10095  003B24  5C1F               	subwf	crc8@i,w,c
 10096  003B26  5020               	movf	crc8@i+1,w,c
 10097  003B28  0A80               	xorlw	128
 10098  003B2A  6E1C               	movwf	??_crc8& (0+255),c
 10099  003B2C  501B               	movf	crc8@dataSize+1,w,c
 10100  003B2E  0A80               	xorlw	128
 10101  003B30  581C               	subwfb	??_crc8& (0+255),w,c
 10102  003B32  A0D8               	btfss	status,0,c
 10103  003B34  D7E8               	goto	l1390
 10104                           
 10105                           ;SystemCommon.c: 19: }
 10106                           ;SystemCommon.c: 20: crc &= 0xff;
 10107  003B36  0EFF               	movlw	255
 10108  003B38  161D               	andwf	crc8@crc,f,c
 10109  003B3A  0E00               	movlw	0
 10110  003B3C  161E               	andwf	crc8@crc+1,f,c
 10111                           
 10112                           ;SystemCommon.c: 21: return crc;
 10113  003B3E  501D               	movf	crc8@crc,w,c
 10114  003B40  0012               	return	
 10115  003B42                     __end_of_crc8:
 10116                           	opt stack 0
 10117                           tosu	equ	0xFFF
 10118                           tosh	equ	0xFFE
 10119                           tosl	equ	0xFFD
 10120                           pclath	equ	0xFFA
 10121                           tblptru	equ	0xFF8
 10122                           tblptrh	equ	0xFF7
 10123                           tblptrl	equ	0xFF6
 10124                           tablat	equ	0xFF5
 10125                           prodh	equ	0xFF4
 10126                           prodl	equ	0xFF3
 10127                           intcon	equ	0xFF2
 10128                           intcon2	equ	0xFF1
 10129                           postinc0	equ	0xFEE
 10130                           plusw0	equ	0xFEB
 10131                           wreg	equ	0xFE8
 10132                           indf1	equ	0xFE7
 10133                           postdec1	equ	0xFE5
 10134                           fsr1h	equ	0xFE2
 10135                           fsr1l	equ	0xFE1
 10136                           indf2	equ	0xFDF
 10137                           postinc2	equ	0xFDE
 10138                           postdec2	equ	0xFDD
 10139                           plusw2	equ	0xFDB
 10140                           fsr2h	equ	0xFDA
 10141                           fsr2l	equ	0xFD9
 10142                           status	equ	0xFD8
 10143                           
 10144 ;; *************** function _ZeroArray *****************
 10145 ;; Defined at:
 10146 ;;		line 24 in file "SystemCommon.c"
 10147 ;; Parameters:    Size  Location     Type
 10148 ;;  array           2   31[COMRAM] PTR unsigned char 
 10149 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SynthReadData@TxMsg(22), SynthReadData@eepromDataA
      +rray(16), 
 10150 ;;		 -> DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), sampleArray(64), 
 10151 ;;		 -> SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 10152 ;;  size            2   33[COMRAM] int 
 10153 ;; Auto vars:     Size  Location     Type
 10154 ;;		None
 10155 ;; Return value:  Size  Location     Type
 10156 ;;                  1    wreg      void 
 10157 ;; Registers used:
 10158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10159 ;; Tracked objects:
 10160 ;;		On entry : 0/0
 10161 ;;		On exit  : 0/0
 10162 ;;		Unchanged: 0/0
 10163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10164 ;;      Params:         4       0       0       0       0       0       0
 10165 ;;      Locals:         0       0       0       0       0       0       0
 10166 ;;      Temps:          0       0       0       0       0       0       0
 10167 ;;      Totals:         4       0       0       0       0       0       0
 10168 ;;Total ram usage:        4 bytes
 10169 ;; Hardware stack levels used:    1
 10170 ;; Hardware stack levels required when called:    5
 10171 ;; This function calls:
 10172 ;;		_memset
 10173 ;; This function is called by:
 10174 ;;		_readUartMessage
 10175 ;;		_InitRxMessageParams
 10176 ;;		_SendAckMessage
 10177 ;;		_FlashReadUart
 10178 ;;		_FlashEreaseMem
 10179 ;;		_FlashReadCondition
 10180 ;;		_DacReadValue
 10181 ;;		_SynthReadData
 10182 ;;		_GetIntFromUartData
 10183 ;;		_GetMcuFwVersion
 10184 ;; This function uses a non-reentrant model
 10185 ;;
 10186                           
 10187                           	psect	text53
 10188  0041F0                     __ptext53:
 10189                           	opt stack 0
 10190  0041F0                     _ZeroArray:
 10191                           	opt stack 24
 10192                           
 10193                           ;SystemCommon.c: 26: memset(array, 0x0, size);
 10194                           
 10195                           ;incstack = 0
 10196  0041F0  C020  F018         	movff	ZeroArray@array,memset@p1
 10197  0041F4  C021  F019         	movff	ZeroArray@array+1,memset@p1+1
 10198  0041F8  0E00               	movlw	0
 10199  0041FA  6E1B               	movwf	memset@c+1,c
 10200  0041FC  0E00               	movlw	0
 10201  0041FE  6E1A               	movwf	memset@c,c
 10202  004200  C022  F01C         	movff	ZeroArray@size,memset@n
 10203  004204  C023  F01D         	movff	ZeroArray@size+1,memset@n+1
 10204  004208  EC0E  F020         	call	_memset	;wreg free
 10205  00420C  0012               	return		;funcret
 10206  00420E                     __end_of_ZeroArray:
 10207                           	opt stack 0
 10208                           tosu	equ	0xFFF
 10209                           tosh	equ	0xFFE
 10210                           tosl	equ	0xFFD
 10211                           pclath	equ	0xFFA
 10212                           tblptru	equ	0xFF8
 10213                           tblptrh	equ	0xFF7
 10214                           tblptrl	equ	0xFF6
 10215                           tablat	equ	0xFF5
 10216                           prodh	equ	0xFF4
 10217                           prodl	equ	0xFF3
 10218                           intcon	equ	0xFF2
 10219                           intcon2	equ	0xFF1
 10220                           postinc0	equ	0xFEE
 10221                           plusw0	equ	0xFEB
 10222                           wreg	equ	0xFE8
 10223                           indf1	equ	0xFE7
 10224                           postdec1	equ	0xFE5
 10225                           fsr1h	equ	0xFE2
 10226                           fsr1l	equ	0xFE1
 10227                           indf2	equ	0xFDF
 10228                           postinc2	equ	0xFDE
 10229                           postdec2	equ	0xFDD
 10230                           plusw2	equ	0xFDB
 10231                           fsr2h	equ	0xFDA
 10232                           fsr2l	equ	0xFD9
 10233                           status	equ	0xFD8
 10234                           
 10235 ;; *************** function _WriteUartMessage *****************
 10236 ;; Defined at:
 10237 ;;		line 158 in file "EusartApp.c"
 10238 ;; Parameters:    Size  Location     Type
 10239 ;;  dataBuf         2   24[COMRAM] PTR unsigned char 
 10240 ;;		 -> GetMcuRunTime@TxMsg(9), GetMcuFwVersion@TxMsg(18), SynthReadData@TxMsg(22), DacReadValue@TxMsg(7), 
 10241 ;;		 -> FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), SendAckMessage@TxMsg(6), 
 10242 ;;  dataSize        2   26[COMRAM] int 
 10243 ;; Auto vars:     Size  Location     Type
 10244 ;;  idx             2   29[COMRAM] int 
 10245 ;; Return value:  Size  Location     Type
 10246 ;;                  1    wreg      void 
 10247 ;; Registers used:
 10248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10249 ;; Tracked objects:
 10250 ;;		On entry : 0/0
 10251 ;;		On exit  : 0/0
 10252 ;;		Unchanged: 0/0
 10253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10254 ;;      Params:         4       0       0       0       0       0       0
 10255 ;;      Locals:         2       0       0       0       0       0       0
 10256 ;;      Temps:          1       0       0       0       0       0       0
 10257 ;;      Totals:         7       0       0       0       0       0       0
 10258 ;;Total ram usage:        7 bytes
 10259 ;; Hardware stack levels used:    1
 10260 ;; Hardware stack levels required when called:    5
 10261 ;; This function calls:
 10262 ;;		_EUSART1_Write
 10263 ;; This function is called by:
 10264 ;;		_SendAckMessage
 10265 ;;		_FlashReadUart
 10266 ;;		_FlashReadCondition
 10267 ;;		_DacReadValue
 10268 ;;		_SynthReadData
 10269 ;;		_GetMcuFwVersion
 10270 ;;		_GetMcuRunTime
 10271 ;; This function uses a non-reentrant model
 10272 ;;
 10273                           
 10274                           	psect	text54
 10275  003E56                     __ptext54:
 10276                           	opt stack 0
 10277  003E56                     _WriteUartMessage:
 10278                           	opt stack 21
 10279                           
 10280                           ;EusartApp.c: 160: for(int idx = 0; idx < dataSize; idx++)
 10281                           
 10282                           ;incstack = 0
 10283  003E56  0E00               	movlw	0
 10284  003E58  6E1F               	movwf	WriteUartMessage@idx+1,c
 10285  003E5A  0E00               	movlw	0
 10286  003E5C  6E1E               	movwf	WriteUartMessage@idx,c
 10287  003E5E  D00B               	goto	l234
 10288  003E60                     
 10289                           ;EusartApp.c: 161: {
 10290                           ;EusartApp.c: 162: EUSART1_Write(dataBuf[idx]);
 10291  003E60  501E               	movf	WriteUartMessage@idx,w,c
 10292  003E62  2419               	addwf	WriteUartMessage@dataBuf,w,c
 10293  003E64  6ED9               	movwf	fsr2l,c
 10294  003E66  501F               	movf	WriteUartMessage@idx+1,w,c
 10295  003E68  201A               	addwfc	WriteUartMessage@dataBuf+1,w,c
 10296  003E6A  6EDA               	movwf	fsr2h,c
 10297  003E6C  50DF               	movf	indf2,w,c
 10298  003E6E  EC46  F01E         	call	_EUSART1_Write
 10299  003E72  4A1E               	infsnz	WriteUartMessage@idx,f,c
 10300  003E74  2A1F               	incf	WriteUartMessage@idx+1,f,c
 10301  003E76                     l234:
 10302  003E76  501B               	movf	WriteUartMessage@dataSize,w,c
 10303  003E78  5C1E               	subwf	WriteUartMessage@idx,w,c
 10304  003E7A  501F               	movf	WriteUartMessage@idx+1,w,c
 10305  003E7C  0A80               	xorlw	128
 10306  003E7E  6E1D               	movwf	??_WriteUartMessage& (0+255),c
 10307  003E80  501C               	movf	WriteUartMessage@dataSize+1,w,c
 10308  003E82  0A80               	xorlw	128
 10309  003E84  581D               	subwfb	??_WriteUartMessage& (0+255),w,c
 10310  003E86  B0D8               	btfsc	status,0,c
 10311  003E88  0012               	return	
 10312  003E8A  D7EA               	goto	l235
 10313  003E8C                     __end_of_WriteUartMessage:
 10314                           	opt stack 0
 10315                           tosu	equ	0xFFF
 10316                           tosh	equ	0xFFE
 10317                           tosl	equ	0xFFD
 10318                           pclath	equ	0xFFA
 10319                           tblptru	equ	0xFF8
 10320                           tblptrh	equ	0xFF7
 10321                           tblptrl	equ	0xFF6
 10322                           tablat	equ	0xFF5
 10323                           prodh	equ	0xFF4
 10324                           prodl	equ	0xFF3
 10325                           intcon	equ	0xFF2
 10326                           intcon2	equ	0xFF1
 10327                           postinc0	equ	0xFEE
 10328                           plusw0	equ	0xFEB
 10329                           wreg	equ	0xFE8
 10330                           indf1	equ	0xFE7
 10331                           postdec1	equ	0xFE5
 10332                           fsr1h	equ	0xFE2
 10333                           fsr1l	equ	0xFE1
 10334                           indf2	equ	0xFDF
 10335                           postinc2	equ	0xFDE
 10336                           postdec2	equ	0xFDD
 10337                           plusw2	equ	0xFDB
 10338                           fsr2h	equ	0xFDA
 10339                           fsr2l	equ	0xFD9
 10340                           status	equ	0xFD8
 10341                           
 10342 ;; *************** function _EUSART1_Write *****************
 10343 ;; Defined at:
 10344 ;;		line 157 in file "mcc_generated_files/eusart1.c"
 10345 ;; Parameters:    Size  Location     Type
 10346 ;;  txData          1    wreg     unsigned char 
 10347 ;; Auto vars:     Size  Location     Type
 10348 ;;  txData          1   23[COMRAM] unsigned char 
 10349 ;; Return value:  Size  Location     Type
 10350 ;;                  1    wreg      void 
 10351 ;; Registers used:
 10352 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10353 ;; Tracked objects:
 10354 ;;		On entry : 0/0
 10355 ;;		On exit  : 0/0
 10356 ;;		Unchanged: 0/0
 10357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10358 ;;      Params:         0       0       0       0       0       0       0
 10359 ;;      Locals:         1       0       0       0       0       0       0
 10360 ;;      Temps:          0       0       0       0       0       0       0
 10361 ;;      Totals:         1       0       0       0       0       0       0
 10362 ;;Total ram usage:        1 bytes
 10363 ;; Hardware stack levels used:    1
 10364 ;; Hardware stack levels required when called:    4
 10365 ;; This function calls:
 10366 ;;		Nothing
 10367 ;; This function is called by:
 10368 ;;		_WriteUartMessage
 10369 ;; This function uses a non-reentrant model
 10370 ;;
 10371                           
 10372                           	psect	text55
 10373  003C8C                     __ptext55:
 10374                           	opt stack 0
 10375  003C8C                     _EUSART1_Write:
 10376                           	opt stack 21
 10377                           
 10378                           ;incstack = 0
 10379                           ;EUSART1_Write@txData stored from wreg
 10380  003C8C  6E18               	movwf	EUSART1_Write@txData,c
 10381  003C8E                     
 10382                           ;eusart1.c: 160: {
 10383                           
 10384                           ;eusart1.c: 159: while(0 == eusart1TxBufferRemaining)
 10385  003C8E  0100               	movlb	0	; () banked
 10386  003C90  51FF               	movf	_eusart1TxBufferRemaining& (0+255),w,b	;volatile
 10387  003C92  B4D8               	btfsc	status,2,c
 10388  003C94  D7FC               	goto	l7627
 10389                           
 10390                           ; BSR set to: 0
 10391                           ;eusart1.c: 161: }
 10392                           ;eusart1.c: 163: if(0 == PIE1bits.TX1IE)
 10393  003C96  B89D               	btfsc	3997,4,c	;volatile
 10394  003C98  D003               	goto	l908
 10395                           
 10396                           ; BSR set to: 0
 10397                           ;eusart1.c: 164: {
 10398                           ;eusart1.c: 165: TXREG1 = txData;
 10399  003C9A  C018  FFAD         	movff	EUSART1_Write@txData,4013	;volatile
 10400                           
 10401                           ;eusart1.c: 166: }
 10402  003C9E  D012               	goto	l909
 10403  003CA0                     l908:
 10404                           
 10405                           ; BSR set to: 0
 10406                           ;eusart1.c: 167: else
 10407                           ;eusart1.c: 168: {
 10408                           ;eusart1.c: 169: PIE1bits.TX1IE = 0;
 10409  003CA0  989D               	bcf	3997,4,c	;volatile
 10410                           
 10411                           ; BSR set to: 0
 10412                           ;eusart1.c: 170: eusart1TxBuffer[eusart1TxHead++] = txData;
 10413  003CA2  5036               	movf	_eusart1TxHead,w,c	;volatile
 10414  003CA4  0D01               	mullw	1
 10415  003CA6  0E00               	movlw	low _eusart1TxBuffer
 10416  003CA8  24F3               	addwf	prodl,w,c
 10417  003CAA  6ED9               	movwf	fsr2l,c
 10418  003CAC  0E02               	movlw	high _eusart1TxBuffer
 10419  003CAE  20F4               	addwfc	prodh,w,c
 10420  003CB0  6EDA               	movwf	fsr2h,c
 10421  003CB2  C018  FFDF         	movff	EUSART1_Write@txData,indf2
 10422                           
 10423                           ; BSR set to: 0
 10424  003CB6  2A36               	incf	_eusart1TxHead,f,c	;volatile
 10425                           
 10426                           ; BSR set to: 0
 10427                           ;eusart1.c: 171: if(sizeof(eusart1TxBuffer) <= eusart1TxHead)
 10428  003CB8  0E45               	movlw	69
 10429  003CBA  6436               	cpfsgt	_eusart1TxHead,c	;volatile
 10430  003CBC  D002               	goto	l910
 10431                           
 10432                           ; BSR set to: 0
 10433                           ;eusart1.c: 172: {
 10434                           ;eusart1.c: 173: eusart1TxHead = 0;
 10435  003CBE  0E00               	movlw	0
 10436  003CC0  6E36               	movwf	_eusart1TxHead,c	;volatile
 10437  003CC2                     l910:
 10438                           
 10439                           ; BSR set to: 0
 10440                           ;eusart1.c: 174: }
 10441                           ;eusart1.c: 175: eusart1TxBufferRemaining--;
 10442                           
 10443                           ; BSR set to: 0
 10444  003CC2  07FF               	decf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 10445  003CC4                     l909:
 10446                           
 10447                           ; BSR set to: 0
 10448                           ;eusart1.c: 176: }
 10449                           ;eusart1.c: 177: PIE1bits.TX1IE = 1;
 10450                           
 10451                           ; BSR set to: 0
 10452  003CC4  889D               	bsf	3997,4,c	;volatile
 10453                           
 10454                           ; BSR set to: 0
 10455  003CC6  0012               	return		;funcret
 10456  003CC8                     __end_of_EUSART1_Write:
 10457                           	opt stack 0
 10458                           tosu	equ	0xFFF
 10459                           tosh	equ	0xFFE
 10460                           tosl	equ	0xFFD
 10461                           pclath	equ	0xFFA
 10462                           tblptru	equ	0xFF8
 10463                           tblptrh	equ	0xFF7
 10464                           tblptrl	equ	0xFF6
 10465                           tablat	equ	0xFF5
 10466                           prodh	equ	0xFF4
 10467                           prodl	equ	0xFF3
 10468                           intcon	equ	0xFF2
 10469                           intcon2	equ	0xFF1
 10470                           postinc0	equ	0xFEE
 10471                           plusw0	equ	0xFEB
 10472                           wreg	equ	0xFE8
 10473                           indf1	equ	0xFE7
 10474                           postdec1	equ	0xFE5
 10475                           fsr1h	equ	0xFE2
 10476                           fsr1l	equ	0xFE1
 10477                           indf2	equ	0xFDF
 10478                           postinc2	equ	0xFDE
 10479                           postdec2	equ	0xFDD
 10480                           plusw2	equ	0xFDB
 10481                           fsr2h	equ	0xFDA
 10482                           fsr2l	equ	0xFD9
 10483                           status	equ	0xFD8
 10484                           
 10485 ;; *************** function _InitSystemApplicationManagers *****************
 10486 ;; Defined at:
 10487 ;;		line 33 in file "SystemSettings.c"
 10488 ;; Parameters:    Size  Location     Type
 10489 ;;		None
 10490 ;; Auto vars:     Size  Location     Type
 10491 ;;		None
 10492 ;; Return value:  Size  Location     Type
 10493 ;;                  1    wreg      void 
 10494 ;; Registers used:
 10495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10496 ;; Tracked objects:
 10497 ;;		On entry : 0/0
 10498 ;;		On exit  : 0/0
 10499 ;;		Unchanged: 0/0
 10500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10501 ;;      Params:         0       0       0       0       0       0       0
 10502 ;;      Locals:         0       0       0       0       0       0       0
 10503 ;;      Temps:          0       0       0       0       0       0       0
 10504 ;;      Totals:         0       0       0       0       0       0       0
 10505 ;;Total ram usage:        0 bytes
 10506 ;; Hardware stack levels used:    1
 10507 ;; Hardware stack levels required when called:   12
 10508 ;; This function calls:
 10509 ;;		_ClearMcuRunTime
 10510 ;;		_DacInit
 10511 ;;		_InitAdcApplicationMgr
 10512 ;;		_PLLInitialize
 10513 ;;		_TMR0_StartTimer
 10514 ;; This function is called by:
 10515 ;;		_main
 10516 ;; This function uses a non-reentrant model
 10517 ;;
 10518                           
 10519                           	psect	text56
 10520  00428E                     __ptext56:
 10521                           	opt stack 0
 10522  00428E                     _InitSystemApplicationManagers:
 10523                           	opt stack 18
 10524                           
 10525                           ;SystemSettings.c: 36: InitAdcApplicationMgr();
 10526                           
 10527                           ; BSR set to: 0
 10528                           ;incstack = 0
 10529  00428E  ECCE  F021         	call	_InitAdcApplicationMgr	;wreg free
 10530                           
 10531                           ;SystemSettings.c: 39: TMR0_StartTimer();
 10532  004292  ECD3  F021         	call	_TMR0_StartTimer	;wreg free
 10533                           
 10534                           ;SystemSettings.c: 42: PLLInitialize();
 10535  004296  EC27  F01E         	call	_PLLInitialize	;wreg free
 10536                           
 10537                           ;SystemSettings.c: 45: ClearMcuRunTime();
 10538  00429A  EC66  F021         	call	_ClearMcuRunTime	;wreg free
 10539                           
 10540                           ;SystemSettings.c: 48: DacInit();
 10541  00429E  ECFA  F013         	call	_DacInit	;wreg free
 10542  0042A2  0012               	return		;funcret
 10543  0042A4                     __end_of_InitSystemApplicationManagers:
 10544                           	opt stack 0
 10545                           tosu	equ	0xFFF
 10546                           tosh	equ	0xFFE
 10547                           tosl	equ	0xFFD
 10548                           pclath	equ	0xFFA
 10549                           tblptru	equ	0xFF8
 10550                           tblptrh	equ	0xFF7
 10551                           tblptrl	equ	0xFF6
 10552                           tablat	equ	0xFF5
 10553                           prodh	equ	0xFF4
 10554                           prodl	equ	0xFF3
 10555                           intcon	equ	0xFF2
 10556                           intcon2	equ	0xFF1
 10557                           postinc0	equ	0xFEE
 10558                           plusw0	equ	0xFEB
 10559                           wreg	equ	0xFE8
 10560                           indf1	equ	0xFE7
 10561                           postdec1	equ	0xFE5
 10562                           fsr1h	equ	0xFE2
 10563                           fsr1l	equ	0xFE1
 10564                           indf2	equ	0xFDF
 10565                           postinc2	equ	0xFDE
 10566                           postdec2	equ	0xFDD
 10567                           plusw2	equ	0xFDB
 10568                           fsr2h	equ	0xFDA
 10569                           fsr2l	equ	0xFD9
 10570                           status	equ	0xFD8
 10571                           
 10572 ;; *************** function _TMR0_StartTimer *****************
 10573 ;; Defined at:
 10574 ;;		line 93 in file "mcc_generated_files/tmr0.c"
 10575 ;; Parameters:    Size  Location     Type
 10576 ;;		None
 10577 ;; Auto vars:     Size  Location     Type
 10578 ;;		None
 10579 ;; Return value:  Size  Location     Type
 10580 ;;                  1    wreg      void 
 10581 ;; Registers used:
 10582 ;;		None
 10583 ;; Tracked objects:
 10584 ;;		On entry : 0/0
 10585 ;;		On exit  : 0/0
 10586 ;;		Unchanged: 0/0
 10587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10588 ;;      Params:         0       0       0       0       0       0       0
 10589 ;;      Locals:         0       0       0       0       0       0       0
 10590 ;;      Temps:          0       0       0       0       0       0       0
 10591 ;;      Totals:         0       0       0       0       0       0       0
 10592 ;;Total ram usage:        0 bytes
 10593 ;; Hardware stack levels used:    1
 10594 ;; Hardware stack levels required when called:    4
 10595 ;; This function calls:
 10596 ;;		Nothing
 10597 ;; This function is called by:
 10598 ;;		_InitSystemApplicationManagers
 10599 ;; This function uses a non-reentrant model
 10600 ;;
 10601                           
 10602                           	psect	text57
 10603  0043A6                     __ptext57:
 10604                           	opt stack 0
 10605  0043A6                     _TMR0_StartTimer:
 10606                           	opt stack 25
 10607                           
 10608                           ;tmr0.c: 96: T0CONbits.TMR0ON = 1;
 10609                           
 10610                           ;incstack = 0
 10611  0043A6  8ED5               	bsf	4053,7,c	;volatile
 10612  0043A8  0012               	return		;funcret
 10613  0043AA                     __end_of_TMR0_StartTimer:
 10614                           	opt stack 0
 10615                           tosu	equ	0xFFF
 10616                           tosh	equ	0xFFE
 10617                           tosl	equ	0xFFD
 10618                           pclath	equ	0xFFA
 10619                           tblptru	equ	0xFF8
 10620                           tblptrh	equ	0xFF7
 10621                           tblptrl	equ	0xFF6
 10622                           tablat	equ	0xFF5
 10623                           prodh	equ	0xFF4
 10624                           prodl	equ	0xFF3
 10625                           intcon	equ	0xFF2
 10626                           intcon2	equ	0xFF1
 10627                           postinc0	equ	0xFEE
 10628                           plusw0	equ	0xFEB
 10629                           wreg	equ	0xFE8
 10630                           indf1	equ	0xFE7
 10631                           postdec1	equ	0xFE5
 10632                           fsr1h	equ	0xFE2
 10633                           fsr1l	equ	0xFE1
 10634                           indf2	equ	0xFDF
 10635                           postinc2	equ	0xFDE
 10636                           postdec2	equ	0xFDD
 10637                           plusw2	equ	0xFDB
 10638                           fsr2h	equ	0xFDA
 10639                           fsr2l	equ	0xFD9
 10640                           status	equ	0xFD8
 10641                           
 10642 ;; *************** function _PLLInitialize *****************
 10643 ;; Defined at:
 10644 ;;		line 29 in file "SyntApp.c"
 10645 ;; Parameters:    Size  Location     Type
 10646 ;;		None
 10647 ;; Auto vars:     Size  Location     Type
 10648 ;;		None
 10649 ;; Return value:  Size  Location     Type
 10650 ;;                  1    wreg      void 
 10651 ;; Registers used:
 10652 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10653 ;; Tracked objects:
 10654 ;;		On entry : 0/0
 10655 ;;		On exit  : 0/0
 10656 ;;		Unchanged: 0/0
 10657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10658 ;;      Params:         0       0       0       0       0       0       0
 10659 ;;      Locals:         0       0       0       0       0       0       0
 10660 ;;      Temps:          0       0       0       0       0       0       0
 10661 ;;      Totals:         0       0       0       0       0       0       0
 10662 ;;Total ram usage:        0 bytes
 10663 ;; Hardware stack levels used:    1
 10664 ;; Hardware stack levels required when called:   11
 10665 ;; This function calls:
 10666 ;;		_FillArray
 10667 ;;		_InitSynth
 10668 ;; This function is called by:
 10669 ;;		_InitSystemApplicationManagers
 10670 ;; This function uses a non-reentrant model
 10671 ;;
 10672                           
 10673                           	psect	text58
 10674  003C4E                     __ptext58:
 10675                           	opt stack 0
 10676  003C4E                     _PLLInitialize:
 10677                           	opt stack 18
 10678                           
 10679                           ;SyntApp.c: 31: InitSynth(SYNTH_TX);
 10680                           
 10681                           ;incstack = 0
 10682  003C4E  0E00               	movlw	0
 10683  003C50  EC4B  F005         	call	_InitSynth
 10684                           
 10685                           ;SyntApp.c: 32: InitSynth(SYNTH_RX);
 10686  003C54  0E01               	movlw	1
 10687  003C56  EC4B  F005         	call	_InitSynth
 10688                           
 10689                           ;SyntApp.c: 35: FillArray(synthLdRxArray, sizeof(synthLdRxArray), 0x0);
 10690  003C5A  0EA6               	movlw	low _synthLdRxArray
 10691  003C5C  6E20               	movwf	FillArray@array,c
 10692  003C5E  0E01               	movlw	high _synthLdRxArray
 10693  003C60  6E21               	movwf	FillArray@array+1,c
 10694  003C62  0E00               	movlw	0
 10695  003C64  6E23               	movwf	FillArray@size+1,c
 10696  003C66  0E0C               	movlw	12
 10697  003C68  6E22               	movwf	FillArray@size,c
 10698  003C6A  0E00               	movlw	0
 10699  003C6C  6E24               	movwf	FillArray@value,c
 10700  003C6E  EC15  F021         	call	_FillArray	;wreg free
 10701                           
 10702                           ;SyntApp.c: 36: FillArray(synthLdTxArray, sizeof(synthLdTxArray), 0x0);
 10703  003C72  0E9A               	movlw	low _synthLdTxArray
 10704  003C74  6E20               	movwf	FillArray@array,c
 10705  003C76  0E01               	movlw	high _synthLdTxArray
 10706  003C78  6E21               	movwf	FillArray@array+1,c
 10707  003C7A  0E00               	movlw	0
 10708  003C7C  6E23               	movwf	FillArray@size+1,c
 10709  003C7E  0E0C               	movlw	12
 10710  003C80  6E22               	movwf	FillArray@size,c
 10711  003C82  0E00               	movlw	0
 10712  003C84  6E24               	movwf	FillArray@value,c
 10713  003C86  EC15  F021         	call	_FillArray	;wreg free
 10714  003C8A  0012               	return		;funcret
 10715  003C8C                     __end_of_PLLInitialize:
 10716                           	opt stack 0
 10717                           tosu	equ	0xFFF
 10718                           tosh	equ	0xFFE
 10719                           tosl	equ	0xFFD
 10720                           pclath	equ	0xFFA
 10721                           tblptru	equ	0xFF8
 10722                           tblptrh	equ	0xFF7
 10723                           tblptrl	equ	0xFF6
 10724                           tablat	equ	0xFF5
 10725                           prodh	equ	0xFF4
 10726                           prodl	equ	0xFF3
 10727                           intcon	equ	0xFF2
 10728                           intcon2	equ	0xFF1
 10729                           postinc0	equ	0xFEE
 10730                           plusw0	equ	0xFEB
 10731                           wreg	equ	0xFE8
 10732                           indf1	equ	0xFE7
 10733                           postdec1	equ	0xFE5
 10734                           fsr1h	equ	0xFE2
 10735                           fsr1l	equ	0xFE1
 10736                           indf2	equ	0xFDF
 10737                           postinc2	equ	0xFDE
 10738                           postdec2	equ	0xFDD
 10739                           plusw2	equ	0xFDB
 10740                           fsr2h	equ	0xFDA
 10741                           fsr2l	equ	0xFD9
 10742                           status	equ	0xFD8
 10743                           
 10744 ;; *************** function _InitSynth *****************
 10745 ;; Defined at:
 10746 ;;		line 39 in file "SyntApp.c"
 10747 ;; Parameters:    Size  Location     Type
 10748 ;;  cType           1    wreg     enum E1
 10749 ;; Auto vars:     Size  Location     Type
 10750 ;;  cType           1  108[BANK0 ] enum E1
 10751 ;;  idx             1  109[BANK0 ] unsigned char 
 10752 ;;  EepromVal       4  104[BANK0 ] unsigned long 
 10753 ;;  regNum          1  110[BANK0 ] unsigned char 
 10754 ;; Return value:  Size  Location     Type
 10755 ;;                  1    wreg      void 
 10756 ;; Registers used:
 10757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10758 ;; Tracked objects:
 10759 ;;		On entry : 0/0
 10760 ;;		On exit  : 0/0
 10761 ;;		Unchanged: 0/0
 10762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10763 ;;      Params:         0       0       0       0       0       0       0
 10764 ;;      Locals:         0       7       0       0       0       0       0
 10765 ;;      Temps:          0       0       0       0       0       0       0
 10766 ;;      Totals:         0       7       0       0       0       0       0
 10767 ;;Total ram usage:        7 bytes
 10768 ;; Hardware stack levels used:    1
 10769 ;; Hardware stack levels required when called:   10
 10770 ;; This function calls:
 10771 ;;		_ReadIntFromEeprom
 10772 ;;		_SWSPI_send_word
 10773 ;;		_StoreIntInEeprom
 10774 ;;		_SwSpi_Set_CE_Pin
 10775 ;; This function is called by:
 10776 ;;		_PLLInitialize
 10777 ;;		_SetSynthOper
 10778 ;;		_SynthLdDetect
 10779 ;; This function uses a non-reentrant model
 10780 ;;
 10781                           
 10782                           	psect	text59
 10783  000A96                     __ptext59:
 10784                           	opt stack 0
 10785  000A96                     _InitSynth:
 10786                           	opt stack 17
 10787                           
 10788                           ;incstack = 0
 10789                           ;InitSynth@cType stored from wreg
 10790  000A96  0100               	movlb	0	; () banked
 10791  000A98  6FCC               	movwf	InitSynth@cType& (0+255),b
 10792                           
 10793                           ;SyntApp.c: 41: SwSpi_Set_CE_Pin(cType, 1);
 10794  000A9A  0E01               	movlw	1
 10795  000A9C  6E18               	movwf	SwSpi_Set_CE_Pin@cPinMode,c
 10796  000A9E  0100               	movlb	0	; () banked
 10797  000AA0  51CC               	movf	InitSynth@cType& (0+255),w,b
 10798  000AA2  EC64  F01E         	call	_SwSpi_Set_CE_Pin
 10799                           
 10800                           ;SyntApp.c: 43: uint8_t regNum = 0;
 10801  000AA6  0E00               	movlw	0
 10802  000AA8  0100               	movlb	0	; () banked
 10803  000AAA  6FCE               	movwf	InitSynth@regNum& (0+255),b
 10804                           
 10805                           ; BSR set to: 0
 10806                           ;SyntApp.c: 44: uint32_t EepromVal = 0x0;
 10807  000AAC  0E00               	movlw	0
 10808  000AAE  6FC8               	movwf	InitSynth@EepromVal& (0+255),b
 10809  000AB0  0E00               	movlw	0
 10810  000AB2  6FC9               	movwf	(InitSynth@EepromVal+1)& (0+255),b
 10811  000AB4  0E00               	movlw	0
 10812  000AB6  6FCA               	movwf	(InitSynth@EepromVal+2)& (0+255),b
 10813  000AB8  0E00               	movlw	0
 10814  000ABA  6FCB               	movwf	(InitSynth@EepromVal+3)& (0+255),b
 10815                           
 10816                           ; BSR set to: 0
 10817                           ;SyntApp.c: 47: for(uint8_t idx = 0; idx < 13; idx++)
 10818  000ABC  0E00               	movlw	0
 10819  000ABE  6FCD               	movwf	InitSynth@idx& (0+255),b
 10820  000AC0                     l8061:
 10821                           
 10822                           ; BSR set to: 0
 10823  000AC0  0E0C               	movlw	12
 10824  000AC2  65CD               	cpfsgt	InitSynth@idx& (0+255),b
 10825  000AC4  D001               	goto	l507
 10826  000AC6  0012               	return	
 10827  000AC8                     l507:
 10828                           
 10829                           ; BSR set to: 0
 10830                           ;SyntApp.c: 48: {
 10831                           ;SyntApp.c: 49: regNum = 13 - idx - 1;
 10832                           
 10833                           ; BSR set to: 0
 10834  000AC8  29CD               	incf	InitSynth@idx& (0+255),w,b
 10835  000ACA  0800               	sublw	0
 10836  000ACC  0F0D               	addlw	13
 10837  000ACE  6FCE               	movwf	InitSynth@regNum& (0+255),b
 10838                           
 10839                           ; BSR set to: 0
 10840                           ;SyntApp.c: 50: if(regNum == 0x0 || regNum == 0x1 || regNum == 0x2 || regNum == 0x4 || r
      +                          egNum == 0x6 || regNum == 0xA)
 10841  000AD0  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10842  000AD2  B4D8               	btfsc	status,2,c
 10843  000AD4  D013               	goto	u8090
 10844                           
 10845                           ; BSR set to: 0
 10846  000AD6  05CE               	decf	InitSynth@regNum& (0+255),w,b
 10847  000AD8  B4D8               	btfsc	status,2,c
 10848  000ADA  D010               	goto	u8090
 10849                           
 10850                           ; BSR set to: 0
 10851  000ADC  0E02               	movlw	2
 10852  000ADE  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10853  000AE0  B4D8               	btfsc	status,2,c
 10854  000AE2  D00C               	goto	u8090
 10855                           
 10856                           ; BSR set to: 0
 10857  000AE4  0E04               	movlw	4
 10858  000AE6  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10859  000AE8  B4D8               	btfsc	status,2,c
 10860  000AEA  D008               	goto	u8090
 10861                           
 10862                           ; BSR set to: 0
 10863  000AEC  0E06               	movlw	6
 10864  000AEE  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10865  000AF0  B4D8               	btfsc	status,2,c
 10866  000AF2  D004               	goto	u8090
 10867                           
 10868                           ; BSR set to: 0
 10869  000AF4  0E0A               	movlw	10
 10870  000AF6  19CE               	xorwf	InitSynth@regNum& (0+255),w,b
 10871  000AF8  A4D8               	btfss	status,2,c
 10872  000AFA  D0EB               	goto	l509
 10873  000AFC                     u8090:
 10874                           
 10875                           ; BSR set to: 0
 10876                           ;SyntApp.c: 51: {
 10877                           ;SyntApp.c: 52: if(cType == SYNTH_TX)
 10878                           
 10879                           ; BSR set to: 0
 10880  000AFC  51CC               	movf	InitSynth@cType& (0+255),w,b
 10881  000AFE  A4D8               	btfss	status,2,c
 10882  000B00  D071               	goto	l512
 10883                           
 10884                           ; BSR set to: 0
 10885                           ;SyntApp.c: 53: {
 10886                           ;SyntApp.c: 54: EepromVal = ReadIntFromEeprom((0) | SYNTH_ADDRES[regNum], 4);
 10887  000B02  0E00               	movlw	0
 10888  000B04  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 10889  000B06  0E04               	movlw	4
 10890  000B08  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 10891  000B0A  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10892  000B0C  0D01               	mullw	1
 10893  000B0E  0E35               	movlw	low _SYNTH_ADDRES
 10894  000B10  24F3               	addwf	prodl,w,c
 10895  000B12  6EF6               	movwf	tblptrl,c
 10896  000B14  0E06               	movlw	high _SYNTH_ADDRES
 10897  000B16  20F4               	addwfc	prodh,w,c
 10898  000B18  6EF7               	movwf	tblptrh,c
 10899  000B1A                     	if	0	;There are less than 3 active tblptr bytes
 10900  000B1A                     	endif
 10901  000B1A  0008               	tblrd		*
 10902  000B1C  50F5               	movf	tablat,w,c
 10903  000B1E  EC8B  F00F         	call	_ReadIntFromEeprom
 10904  000B22  C0B1  F0C8         	movff	?_ReadIntFromEeprom,InitSynth@EepromVal
 10905  000B26  C0B2  F0C9         	movff	?_ReadIntFromEeprom+1,InitSynth@EepromVal+1
 10906  000B2A  C0B3  F0CA         	movff	?_ReadIntFromEeprom+2,InitSynth@EepromVal+2
 10907  000B2E  C0B4  F0CB         	movff	?_ReadIntFromEeprom+3,InitSynth@EepromVal+3
 10908                           
 10909                           ;SyntApp.c: 55: if(EepromVal == 0xFFFFFFFF)
 10910  000B32  0100               	movlb	0	; () banked
 10911  000B34  29C8               	incf	InitSynth@EepromVal& (0+255),w,b
 10912  000B36  E147               	bnz	l8089
 10913  000B38  29C9               	incf	(InitSynth@EepromVal+1)& (0+255),w,b
 10914  000B3A  E145               	bnz	l8089
 10915  000B3C  29CA               	incf	(InitSynth@EepromVal+2)& (0+255),w,b
 10916  000B3E  E143               	bnz	l8089
 10917  000B40  29CB               	incf	(InitSynth@EepromVal+3)& (0+255),w,b
 10918  000B42  A4D8               	btfss	status,2,c
 10919  000B44  D040               	goto	l513
 10920                           
 10921                           ; BSR set to: 0
 10922                           ;SyntApp.c: 56: {
 10923                           ;SyntApp.c: 57: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 10924  000B46  51CD               	movf	InitSynth@idx& (0+255),w,b
 10925  000B48  0D04               	mullw	4
 10926  000B4A  0E01               	movlw	low _SYNTH_REGS
 10927  000B4C  24F3               	addwf	prodl,w,c
 10928  000B4E  6EF6               	movwf	tblptrl,c
 10929  000B50  0E06               	movlw	high _SYNTH_REGS
 10930  000B52  20F4               	addwfc	prodh,w,c
 10931  000B54  6EF7               	movwf	tblptrh,c
 10932  000B56                     	if	0	;There are less than 3 active tblptr bytes
 10933  000B56                     	endif
 10934  000B56  0009               	tblrd		*+
 10935  000B58  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 10936  000B5C  0009               	tblrd		*+
 10937  000B5E  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 10938  000B62  0009               	tblrd		*+
 10939  000B64  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 10940  000B68  000A               	tblrd		*-
 10941  000B6A  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 10942  000B6E  0E03               	movlw	3
 10943  000B70  6E2D               	movwf	SWSPI_send_word@dataSize,c
 10944  000B72  51CC               	movf	InitSynth@cType& (0+255),w,b
 10945  000B74  ECDF  F017         	call	_SWSPI_send_word
 10946                           
 10947                           ;SyntApp.c: 58: StoreIntInEeprom(SYNTH_REGS[idx], (0) | SYNTH_ADDRES[regNum], 4);
 10948  000B78  0100               	movlb	0	; () banked
 10949  000B7A  51CD               	movf	InitSynth@idx& (0+255),w,b
 10950  000B7C  0D04               	mullw	4
 10951  000B7E  0E01               	movlw	low _SYNTH_REGS
 10952  000B80  24F3               	addwf	prodl,w,c
 10953  000B82  6EF6               	movwf	tblptrl,c
 10954  000B84  0E06               	movlw	high _SYNTH_REGS
 10955  000B86  20F4               	addwfc	prodh,w,c
 10956  000B88  6EF7               	movwf	tblptrh,c
 10957  000B8A                     	if	0	;There are less than 3 active tblptr bytes
 10958  000B8A                     	endif
 10959  000B8A  0009               	tblrd		*+
 10960  000B8C  CFF5 F021          	movff	tablat,StoreIntInEeprom@data
 10961  000B90  0009               	tblrd		*+
 10962  000B92  CFF5 F022          	movff	tablat,StoreIntInEeprom@data+1
 10963  000B96  0009               	tblrd		*+
 10964  000B98  CFF5 F023          	movff	tablat,StoreIntInEeprom@data+2
 10965  000B9C  000A               	tblrd		*-
 10966  000B9E  CFF5 F024          	movff	tablat,StoreIntInEeprom@data+3
 10967  000BA2  51CE               	movf	InitSynth@regNum& (0+255),w,b
 10968  000BA4  0D01               	mullw	1
 10969  000BA6  0E35               	movlw	low _SYNTH_ADDRES
 10970  000BA8  24F3               	addwf	prodl,w,c
 10971  000BAA  6EF6               	movwf	tblptrl,c
 10972  000BAC  0E06               	movlw	high _SYNTH_ADDRES
 10973  000BAE  20F4               	addwfc	prodh,w,c
 10974  000BB0  6EF7               	movwf	tblptrh,c
 10975  000BB2                     	if	0	;There are less than 3 active tblptr bytes
 10976  000BB2                     	endif
 10977  000BB2  0008               	tblrd		*
 10978  000BB4  CFF5 F025          	movff	tablat,StoreIntInEeprom@address
 10979  000BB8  0E00               	movlw	0
 10980  000BBA  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 10981  000BBC  0E04               	movlw	4
 10982  000BBE  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 10983  000BC0  ECBC  F01E         	call	_StoreIntInEeprom	;wreg free
 10984                           
 10985                           ;SyntApp.c: 59: }
 10986  000BC4  D0A0               	goto	l519
 10987  000BC6                     l513:
 10988  000BC6                     l8089:
 10989                           
 10990                           ;SyntApp.c: 60: else
 10991                           ;SyntApp.c: 61: {
 10992                           ;SyntApp.c: 62: SWSPI_send_word(cType, EepromVal,3);
 10993  000BC6  C0C8  F029         	movff	InitSynth@EepromVal,SWSPI_send_word@data
 10994  000BCA  C0C9  F02A         	movff	InitSynth@EepromVal+1,SWSPI_send_word@data+1
 10995  000BCE  C0CA  F02B         	movff	InitSynth@EepromVal+2,SWSPI_send_word@data+2
 10996  000BD2  C0CB  F02C         	movff	InitSynth@EepromVal+3,SWSPI_send_word@data+3
 10997  000BD6  0E03               	movlw	3
 10998  000BD8  6E2D               	movwf	SWSPI_send_word@dataSize,c
 10999  000BDA  0100               	movlb	0	; () banked
 11000  000BDC  51CC               	movf	InitSynth@cType& (0+255),w,b
 11001  000BDE  ECDF  F017         	call	_SWSPI_send_word
 11002                           
 11003                           ;SyntApp.c: 63: }
 11004                           ;SyntApp.c: 64: }
 11005  000BE2  D091               	goto	l519
 11006  000BE4                     l512:
 11007                           
 11008                           ;SyntApp.c: 65: else if (cType == SYNTH_RX)
 11009  000BE4  0100               	movlb	0	; () banked
 11010  000BE6  05CC               	decf	InitSynth@cType& (0+255),w,b
 11011  000BE8  A4D8               	btfss	status,2,c
 11012  000BEA  D08D               	goto	l519
 11013                           
 11014                           ; BSR set to: 0
 11015                           ;SyntApp.c: 66: {
 11016                           ;SyntApp.c: 67: EepromVal = ReadIntFromEeprom((0x20) | SYNTH_ADDRES[regNum], 4);
 11017  000BEC  0E00               	movlw	0
 11018  000BEE  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 11019  000BF0  0E04               	movlw	4
 11020  000BF2  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 11021  000BF4  51CE               	movf	InitSynth@regNum& (0+255),w,b
 11022  000BF6  0D01               	mullw	1
 11023  000BF8  0E35               	movlw	low _SYNTH_ADDRES
 11024  000BFA  24F3               	addwf	prodl,w,c
 11025  000BFC  6EF6               	movwf	tblptrl,c
 11026  000BFE  0E06               	movlw	high _SYNTH_ADDRES
 11027  000C00  20F4               	addwfc	prodh,w,c
 11028  000C02  6EF7               	movwf	tblptrh,c
 11029  000C04                     	if	0	;There are less than 3 active tblptr bytes
 11030  000C04                     	endif
 11031  000C04  0008               	tblrd		*
 11032  000C06  50F5               	movf	tablat,w,c
 11033  000C08  0920               	iorlw	32
 11034  000C0A  EC8B  F00F         	call	_ReadIntFromEeprom
 11035  000C0E  C0B1  F0C8         	movff	?_ReadIntFromEeprom,InitSynth@EepromVal
 11036  000C12  C0B2  F0C9         	movff	?_ReadIntFromEeprom+1,InitSynth@EepromVal+1
 11037  000C16  C0B3  F0CA         	movff	?_ReadIntFromEeprom+2,InitSynth@EepromVal+2
 11038  000C1A  C0B4  F0CB         	movff	?_ReadIntFromEeprom+3,InitSynth@EepromVal+3
 11039                           
 11040                           ;SyntApp.c: 68: if(EepromVal == 0xFFFFFFFF)
 11041  000C1E  0100               	movlb	0	; () banked
 11042  000C20  29C8               	incf	InitSynth@EepromVal& (0+255),w,b
 11043  000C22  E148               	bnz	l8101
 11044  000C24  29C9               	incf	(InitSynth@EepromVal+1)& (0+255),w,b
 11045  000C26  E146               	bnz	l8101
 11046  000C28  29CA               	incf	(InitSynth@EepromVal+2)& (0+255),w,b
 11047  000C2A  E144               	bnz	l8101
 11048  000C2C  29CB               	incf	(InitSynth@EepromVal+3)& (0+255),w,b
 11049  000C2E  A4D8               	btfss	status,2,c
 11050  000C30  D041               	goto	l517
 11051                           
 11052                           ; BSR set to: 0
 11053                           ;SyntApp.c: 69: {
 11054                           ;SyntApp.c: 70: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 11055  000C32  51CD               	movf	InitSynth@idx& (0+255),w,b
 11056  000C34  0D04               	mullw	4
 11057  000C36  0E01               	movlw	low _SYNTH_REGS
 11058  000C38  24F3               	addwf	prodl,w,c
 11059  000C3A  6EF6               	movwf	tblptrl,c
 11060  000C3C  0E06               	movlw	high _SYNTH_REGS
 11061  000C3E  20F4               	addwfc	prodh,w,c
 11062  000C40  6EF7               	movwf	tblptrh,c
 11063  000C42                     	if	0	;There are less than 3 active tblptr bytes
 11064  000C42                     	endif
 11065  000C42  0009               	tblrd		*+
 11066  000C44  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 11067  000C48  0009               	tblrd		*+
 11068  000C4A  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 11069  000C4E  0009               	tblrd		*+
 11070  000C50  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 11071  000C54  000A               	tblrd		*-
 11072  000C56  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 11073  000C5A  0E03               	movlw	3
 11074  000C5C  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11075  000C5E  51CC               	movf	InitSynth@cType& (0+255),w,b
 11076  000C60  ECDF  F017         	call	_SWSPI_send_word
 11077                           
 11078                           ;SyntApp.c: 71: StoreIntInEeprom(SYNTH_REGS[idx], (0x20) | SYNTH_ADDRES[regNum], 4);
 11079  000C64  0100               	movlb	0	; () banked
 11080  000C66  51CD               	movf	InitSynth@idx& (0+255),w,b
 11081  000C68  0D04               	mullw	4
 11082  000C6A  0E01               	movlw	low _SYNTH_REGS
 11083  000C6C  24F3               	addwf	prodl,w,c
 11084  000C6E  6EF6               	movwf	tblptrl,c
 11085  000C70  0E06               	movlw	high _SYNTH_REGS
 11086  000C72  20F4               	addwfc	prodh,w,c
 11087  000C74  6EF7               	movwf	tblptrh,c
 11088  000C76                     	if	0	;There are less than 3 active tblptr bytes
 11089  000C76                     	endif
 11090  000C76  0009               	tblrd		*+
 11091  000C78  CFF5 F021          	movff	tablat,StoreIntInEeprom@data
 11092  000C7C  0009               	tblrd		*+
 11093  000C7E  CFF5 F022          	movff	tablat,StoreIntInEeprom@data+1
 11094  000C82  0009               	tblrd		*+
 11095  000C84  CFF5 F023          	movff	tablat,StoreIntInEeprom@data+2
 11096  000C88  000A               	tblrd		*-
 11097  000C8A  CFF5 F024          	movff	tablat,StoreIntInEeprom@data+3
 11098  000C8E  51CE               	movf	InitSynth@regNum& (0+255),w,b
 11099  000C90  0D01               	mullw	1
 11100  000C92  0E35               	movlw	low _SYNTH_ADDRES
 11101  000C94  24F3               	addwf	prodl,w,c
 11102  000C96  6EF6               	movwf	tblptrl,c
 11103  000C98  0E06               	movlw	high _SYNTH_ADDRES
 11104  000C9A  20F4               	addwfc	prodh,w,c
 11105  000C9C  6EF7               	movwf	tblptrh,c
 11106  000C9E                     	if	0	;There are less than 3 active tblptr bytes
 11107  000C9E                     	endif
 11108  000C9E  0008               	tblrd		*
 11109  000CA0  50F5               	movf	tablat,w,c
 11110  000CA2  0920               	iorlw	32
 11111  000CA4  6E25               	movwf	StoreIntInEeprom@address,c
 11112  000CA6  0E00               	movlw	0
 11113  000CA8  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 11114  000CAA  0E04               	movlw	4
 11115  000CAC  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 11116  000CAE  ECBC  F01E         	call	_StoreIntInEeprom	;wreg free
 11117                           
 11118                           ;SyntApp.c: 72: }
 11119  000CB2  D029               	goto	l519
 11120  000CB4                     l517:
 11121  000CB4                     l8101:
 11122                           
 11123                           ;SyntApp.c: 73: else
 11124                           ;SyntApp.c: 74: {
 11125                           ;SyntApp.c: 75: SWSPI_send_word(cType, EepromVal,3);
 11126  000CB4  C0C8  F029         	movff	InitSynth@EepromVal,SWSPI_send_word@data
 11127  000CB8  C0C9  F02A         	movff	InitSynth@EepromVal+1,SWSPI_send_word@data+1
 11128  000CBC  C0CA  F02B         	movff	InitSynth@EepromVal+2,SWSPI_send_word@data+2
 11129  000CC0  C0CB  F02C         	movff	InitSynth@EepromVal+3,SWSPI_send_word@data+3
 11130  000CC4  0E03               	movlw	3
 11131  000CC6  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11132  000CC8  0100               	movlb	0	; () banked
 11133  000CCA  51CC               	movf	InitSynth@cType& (0+255),w,b
 11134  000CCC  ECDF  F017         	call	_SWSPI_send_word
 11135                           
 11136                           ;SyntApp.c: 76: }
 11137                           ;SyntApp.c: 77: }
 11138                           ;SyntApp.c: 80: }
 11139  000CD0  D01A               	goto	l519
 11140  000CD2                     l509:
 11141                           
 11142                           ;SyntApp.c: 81: else
 11143                           ;SyntApp.c: 82: {
 11144                           ;SyntApp.c: 83: SWSPI_send_word(cType, SYNTH_REGS[idx],3);
 11145  000CD2  0100               	movlb	0	; () banked
 11146  000CD4  51CD               	movf	InitSynth@idx& (0+255),w,b
 11147  000CD6  0D04               	mullw	4
 11148  000CD8  0E01               	movlw	low _SYNTH_REGS
 11149  000CDA  24F3               	addwf	prodl,w,c
 11150  000CDC  6EF6               	movwf	tblptrl,c
 11151  000CDE  0E06               	movlw	high _SYNTH_REGS
 11152  000CE0  20F4               	addwfc	prodh,w,c
 11153  000CE2  6EF7               	movwf	tblptrh,c
 11154  000CE4                     	if	0	;There are less than 3 active tblptr bytes
 11155  000CE4                     	endif
 11156  000CE4  0009               	tblrd		*+
 11157  000CE6  CFF5 F029          	movff	tablat,SWSPI_send_word@data
 11158  000CEA  0009               	tblrd		*+
 11159  000CEC  CFF5 F02A          	movff	tablat,SWSPI_send_word@data+1
 11160  000CF0  0009               	tblrd		*+
 11161  000CF2  CFF5 F02B          	movff	tablat,SWSPI_send_word@data+2
 11162  000CF6  000A               	tblrd		*-
 11163  000CF8  CFF5 F02C          	movff	tablat,SWSPI_send_word@data+3
 11164  000CFC  0E03               	movlw	3
 11165  000CFE  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11166  000D00  51CC               	movf	InitSynth@cType& (0+255),w,b
 11167  000D02  ECDF  F017         	call	_SWSPI_send_word
 11168  000D06                     l519:
 11169  000D06  0100               	movlb	0	; () banked
 11170  000D08  2BCD               	incf	InitSynth@idx& (0+255),f,b
 11171  000D0A  D6DA               	goto	l8061
 11172  000D0C                     __end_of_InitSynth:
 11173                           	opt stack 0
 11174                           tosu	equ	0xFFF
 11175                           tosh	equ	0xFFE
 11176                           tosl	equ	0xFFD
 11177                           pclath	equ	0xFFA
 11178                           tblptru	equ	0xFF8
 11179                           tblptrh	equ	0xFF7
 11180                           tblptrl	equ	0xFF6
 11181                           tablat	equ	0xFF5
 11182                           prodh	equ	0xFF4
 11183                           prodl	equ	0xFF3
 11184                           intcon	equ	0xFF2
 11185                           intcon2	equ	0xFF1
 11186                           postinc0	equ	0xFEE
 11187                           plusw0	equ	0xFEB
 11188                           wreg	equ	0xFE8
 11189                           indf1	equ	0xFE7
 11190                           postdec1	equ	0xFE5
 11191                           fsr1h	equ	0xFE2
 11192                           fsr1l	equ	0xFE1
 11193                           indf2	equ	0xFDF
 11194                           postinc2	equ	0xFDE
 11195                           postdec2	equ	0xFDD
 11196                           plusw2	equ	0xFDB
 11197                           fsr2h	equ	0xFDA
 11198                           fsr2l	equ	0xFD9
 11199                           status	equ	0xFD8
 11200                           
 11201 ;; *************** function _SwSpi_Set_CE_Pin *****************
 11202 ;; Defined at:
 11203 ;;		line 201 in file "SwSpiApp.c"
 11204 ;; Parameters:    Size  Location     Type
 11205 ;;  phrType         1    wreg     enum E1
 11206 ;;  cPinMode        1   23[COMRAM] unsigned char 
 11207 ;; Auto vars:     Size  Location     Type
 11208 ;;  phrType         1   24[COMRAM] enum E1
 11209 ;; Return value:  Size  Location     Type
 11210 ;;                  1    wreg      void 
 11211 ;; Registers used:
 11212 ;;		wreg, status,2, status,0
 11213 ;; Tracked objects:
 11214 ;;		On entry : 0/0
 11215 ;;		On exit  : 0/0
 11216 ;;		Unchanged: 0/0
 11217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11218 ;;      Params:         1       0       0       0       0       0       0
 11219 ;;      Locals:         1       0       0       0       0       0       0
 11220 ;;      Temps:          0       0       0       0       0       0       0
 11221 ;;      Totals:         2       0       0       0       0       0       0
 11222 ;;Total ram usage:        2 bytes
 11223 ;; Hardware stack levels used:    1
 11224 ;; Hardware stack levels required when called:    4
 11225 ;; This function calls:
 11226 ;;		Nothing
 11227 ;; This function is called by:
 11228 ;;		_InitSynth
 11229 ;;		_SetSynthOper
 11230 ;; This function uses a non-reentrant model
 11231 ;;
 11232                           
 11233                           	psect	text60
 11234  003CC8                     __ptext60:
 11235                           	opt stack 0
 11236  003CC8                     _SwSpi_Set_CE_Pin:
 11237                           	opt stack 23
 11238                           
 11239                           ; BSR set to: 0
 11240                           ;incstack = 0
 11241                           ;SwSpi_Set_CE_Pin@phrType stored from wreg
 11242  003CC8  6E19               	movwf	SwSpi_Set_CE_Pin@phrType,c
 11243                           
 11244                           ;SwSpiApp.c: 203: switch(phrType)
 11245  003CCA  D014               	goto	l723
 11246  003CCC                     
 11247                           ;SwSpiApp.c: 206: if(cPinMode == 1)
 11248  003CCC  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11249  003CCE  A4D8               	btfss	status,2,c
 11250  003CD0  D002               	goto	l725
 11251                           
 11252                           ;SwSpiApp.c: 207: {
 11253                           ;SwSpiApp.c: 208: do { LATCbits.LATC1 = 1; } while(0);
 11254  003CD2  828B               	bsf	3979,1,c	;volatile
 11255                           
 11256                           ;SwSpiApp.c: 209: }
 11257  003CD4  0012               	return	
 11258  003CD6                     l725:
 11259                           
 11260                           ;SwSpiApp.c: 210: else if(cPinMode == 0)
 11261  003CD6  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11262  003CD8  A4D8               	btfss	status,2,c
 11263  003CDA  0012               	return	
 11264                           
 11265                           ;SwSpiApp.c: 211: {
 11266                           ;SwSpiApp.c: 212: do { LATCbits.LATC1 = 0; } while(0);
 11267  003CDC  928B               	bcf	3979,1,c	;volatile
 11268                           
 11269                           ;SwSpiApp.c: 213: }
 11270                           ;SwSpiApp.c: 214: break;
 11271  003CDE  0012               	return	
 11272  003CE0                     
 11273                           ;SwSpiApp.c: 217: if(cPinMode == 1)
 11274  003CE0  0418               	decf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11275  003CE2  A4D8               	btfss	status,2,c
 11276  003CE4  D002               	goto	l734
 11277                           
 11278                           ;SwSpiApp.c: 218: {
 11279                           ;SwSpiApp.c: 219: do { LATDbits.LATD2 = 1; } while(0);
 11280  003CE6  848C               	bsf	3980,2,c	;volatile
 11281                           
 11282                           ;SwSpiApp.c: 220: }
 11283  003CE8  0012               	return	
 11284  003CEA                     l734:
 11285                           
 11286                           ;SwSpiApp.c: 221: else if(cPinMode == 0)
 11287  003CEA  5018               	movf	SwSpi_Set_CE_Pin@cPinMode,w,c
 11288  003CEC  A4D8               	btfss	status,2,c
 11289  003CEE  0012               	return	
 11290                           
 11291                           ;SwSpiApp.c: 222: {
 11292                           ;SwSpiApp.c: 223: do { LATDbits.LATD2 = 0; } while(0);
 11293  003CF0  948C               	bcf	3980,2,c	;volatile
 11294                           
 11295                           ;SwSpiApp.c: 226: }
 11296                           
 11297                           ;SwSpiApp.c: 224: }
 11298                           ;SwSpiApp.c: 225: break;
 11299  003CF2  0012               	return	
 11300  003CF4                     l723:
 11301  003CF4  5019               	movf	SwSpi_Set_CE_Pin@phrType,w,c
 11302                           
 11303                           ; Switch size 1, requested type "space"
 11304                           ; Number of cases is 2, Range of values is 0 to 1
 11305                           ; switch strategies available:
 11306                           ; Name         Instructions Cycles
 11307                           ; simple_byte            7     4 (average)
 11308                           ;	Chosen strategy is simple_byte
 11309  003CF6  0A00               	xorlw	0	; case 0
 11310  003CF8  B4D8               	btfsc	status,2,c
 11311  003CFA  D7E8               	goto	l724
 11312  003CFC  0A01               	xorlw	1	; case 1
 11313  003CFE  A4D8               	btfss	status,2,c
 11314  003D00  0012               	return	
 11315  003D02  D7EE               	goto	l733
 11316  003D04                     __end_of_SwSpi_Set_CE_Pin:
 11317                           	opt stack 0
 11318                           tosu	equ	0xFFF
 11319                           tosh	equ	0xFFE
 11320                           tosl	equ	0xFFD
 11321                           pclath	equ	0xFFA
 11322                           tblptru	equ	0xFF8
 11323                           tblptrh	equ	0xFF7
 11324                           tblptrl	equ	0xFF6
 11325                           tablat	equ	0xFF5
 11326                           prodh	equ	0xFF4
 11327                           prodl	equ	0xFF3
 11328                           intcon	equ	0xFF2
 11329                           intcon2	equ	0xFF1
 11330                           postinc0	equ	0xFEE
 11331                           plusw0	equ	0xFEB
 11332                           wreg	equ	0xFE8
 11333                           indf1	equ	0xFE7
 11334                           postdec1	equ	0xFE5
 11335                           fsr1h	equ	0xFE2
 11336                           fsr1l	equ	0xFE1
 11337                           indf2	equ	0xFDF
 11338                           postinc2	equ	0xFDE
 11339                           postdec2	equ	0xFDD
 11340                           plusw2	equ	0xFDB
 11341                           fsr2h	equ	0xFDA
 11342                           fsr2l	equ	0xFD9
 11343                           status	equ	0xFD8
 11344                           
 11345 ;; *************** function _InitAdcApplicationMgr *****************
 11346 ;; Defined at:
 11347 ;;		line 20 in file "AdcApp.c"
 11348 ;; Parameters:    Size  Location     Type
 11349 ;;		None
 11350 ;; Auto vars:     Size  Location     Type
 11351 ;;		None
 11352 ;; Return value:  Size  Location     Type
 11353 ;;                  1    wreg      void 
 11354 ;; Registers used:
 11355 ;;		wreg, status,2
 11356 ;; Tracked objects:
 11357 ;;		On entry : 0/0
 11358 ;;		On exit  : 0/0
 11359 ;;		Unchanged: 0/0
 11360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11361 ;;      Params:         0       0       0       0       0       0       0
 11362 ;;      Locals:         0       0       0       0       0       0       0
 11363 ;;      Temps:          0       0       0       0       0       0       0
 11364 ;;      Totals:         0       0       0       0       0       0       0
 11365 ;;Total ram usage:        0 bytes
 11366 ;; Hardware stack levels used:    1
 11367 ;; Hardware stack levels required when called:    4
 11368 ;; This function calls:
 11369 ;;		Nothing
 11370 ;; This function is called by:
 11371 ;;		_InitSystemApplicationManagers
 11372 ;; This function uses a non-reentrant model
 11373 ;;
 11374                           
 11375                           	psect	text61
 11376  00439C                     __ptext61:
 11377                           	opt stack 0
 11378  00439C                     _InitAdcApplicationMgr:
 11379                           	opt stack 25
 11380                           
 11381                           ;AdcApp.c: 22: adcSampleMode = CIRCULAR;
 11382                           
 11383                           ;incstack = 0
 11384  00439C  0E00               	movlw	0
 11385  00439E  6E3D               	movwf	_adcSampleMode,c
 11386  0043A0  0012               	return		;funcret
 11387  0043A2                     __end_of_InitAdcApplicationMgr:
 11388                           	opt stack 0
 11389                           tosu	equ	0xFFF
 11390                           tosh	equ	0xFFE
 11391                           tosl	equ	0xFFD
 11392                           pclath	equ	0xFFA
 11393                           tblptru	equ	0xFF8
 11394                           tblptrh	equ	0xFF7
 11395                           tblptrl	equ	0xFF6
 11396                           tablat	equ	0xFF5
 11397                           prodh	equ	0xFF4
 11398                           prodl	equ	0xFF3
 11399                           intcon	equ	0xFF2
 11400                           intcon2	equ	0xFF1
 11401                           postinc0	equ	0xFEE
 11402                           plusw0	equ	0xFEB
 11403                           wreg	equ	0xFE8
 11404                           indf1	equ	0xFE7
 11405                           postdec1	equ	0xFE5
 11406                           fsr1h	equ	0xFE2
 11407                           fsr1l	equ	0xFE1
 11408                           indf2	equ	0xFDF
 11409                           postinc2	equ	0xFDE
 11410                           postdec2	equ	0xFDD
 11411                           plusw2	equ	0xFDB
 11412                           fsr2h	equ	0xFDA
 11413                           fsr2l	equ	0xFD9
 11414                           status	equ	0xFD8
 11415                           
 11416 ;; *************** function _DacInit *****************
 11417 ;; Defined at:
 11418 ;;		line 11 in file "DacApp.c"
 11419 ;; Parameters:    Size  Location     Type
 11420 ;;		None
 11421 ;; Auto vars:     Size  Location     Type
 11422 ;;  dacInput        2  106[BANK0 ] unsigned int 
 11423 ;;  idx             1  108[BANK0 ] char 
 11424 ;; Return value:  Size  Location     Type
 11425 ;;                  1    wreg      void 
 11426 ;; Registers used:
 11427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11428 ;; Tracked objects:
 11429 ;;		On entry : 0/0
 11430 ;;		On exit  : 0/0
 11431 ;;		Unchanged: 0/0
 11432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11433 ;;      Params:         0       0       0       0       0       0       0
 11434 ;;      Locals:         0       3       0       0       0       0       0
 11435 ;;      Temps:          0       2       0       0       0       0       0
 11436 ;;      Totals:         0       5       0       0       0       0       0
 11437 ;;Total ram usage:        5 bytes
 11438 ;; Hardware stack levels used:    1
 11439 ;; Hardware stack levels required when called:   10
 11440 ;; This function calls:
 11441 ;;		_ReadIntFromEeprom
 11442 ;;		_SWSPI_send_word
 11443 ;;		_StoreIntInEeprom
 11444 ;; This function is called by:
 11445 ;;		_InitSystemApplicationManagers
 11446 ;; This function uses a non-reentrant model
 11447 ;;
 11448                           
 11449                           	psect	text62
 11450  0027F4                     __ptext62:
 11451                           	opt stack 0
 11452  0027F4                     _DacInit:
 11453                           	opt stack 19
 11454                           
 11455                           ;DacApp.c: 13: for(int8_t idx = 0; idx < (4); idx++)
 11456                           
 11457                           ;incstack = 0
 11458  0027F4  0E00               	movlw	0
 11459  0027F6  0100               	movlb	0	; () banked
 11460  0027F8  6FCC               	movwf	DacInit@idx& (0+255),b
 11461  0027FA                     l8619:
 11462                           
 11463                           ; BSR set to: 0
 11464  0027FA  51CC               	movf	DacInit@idx& (0+255),w,b
 11465  0027FC  0A80               	xorlw	128
 11466  0027FE  0F7C               	addlw	-132
 11467  002800  B0D8               	btfsc	status,0,c
 11468  002802  0012               	return	
 11469                           
 11470                           ; BSR set to: 0
 11471                           ;DacApp.c: 14: {
 11472                           ;DacApp.c: 15: uint16_t dacInput = ReadIntFromEeprom((0x40) | DAC_ADDRES[idx], 2);
 11473                           
 11474                           ; BSR set to: 0
 11475                           
 11476                           ; BSR set to: 0
 11477  002804  0E00               	movlw	0
 11478  002806  6FB2               	movwf	(ReadIntFromEeprom@numOfByes+1)& (0+255),b
 11479  002808  0E02               	movlw	2
 11480  00280A  6FB1               	movwf	ReadIntFromEeprom@numOfByes& (0+255),b
 11481  00280C  51CC               	movf	DacInit@idx& (0+255),w,b
 11482  00280E  0D01               	mullw	1
 11483  002810  0E53               	movlw	low _DAC_ADDRES
 11484  002812  24F3               	addwf	prodl,w,c
 11485  002814  6EF6               	movwf	tblptrl,c
 11486  002816  0E06               	movlw	high _DAC_ADDRES
 11487  002818  20F4               	addwfc	prodh,w,c
 11488  00281A  6EF7               	movwf	tblptrh,c
 11489  00281C                     	if	0	;There are less than 3 active tblptr bytes
 11490  00281C                     	endif
 11491  00281C  0008               	tblrd		*
 11492  00281E  50F5               	movf	tablat,w,c
 11493  002820  0940               	iorlw	64
 11494  002822  EC8B  F00F         	call	_ReadIntFromEeprom
 11495  002826  C0B1  F0CA         	movff	?_ReadIntFromEeprom,DacInit@dacInput
 11496  00282A  C0B2  F0CB         	movff	?_ReadIntFromEeprom+1,DacInit@dacInput+1
 11497                           
 11498                           ;DacApp.c: 16: if(dacInput == 0xFFFF)
 11499  00282E  0100               	movlb	0	; () banked
 11500  002830  29CA               	incf	DacInit@dacInput& (0+255),w,b
 11501  002832  E144               	bnz	l8631
 11502  002834  29CB               	incf	(DacInit@dacInput+1)& (0+255),w,b
 11503  002836  A4D8               	btfss	status,2,c
 11504  002838  D041               	goto	l411
 11505                           
 11506                           ; BSR set to: 0
 11507                           ;DacApp.c: 17: {
 11508                           ;DacApp.c: 18: SWSPI_send_word(EXT_DAC, DAC_DEFAULT_INIT_VALUES[idx], 1);
 11509  00283A  51CC               	movf	DacInit@idx& (0+255),w,b
 11510  00283C  0D02               	mullw	2
 11511  00283E  0E4B               	movlw	low _DAC_DEFAULT_INIT_VALUES
 11512  002840  24F3               	addwf	prodl,w,c
 11513  002842  6EF6               	movwf	tblptrl,c
 11514  002844  0E06               	movlw	high _DAC_DEFAULT_INIT_VALUES
 11515  002846  20F4               	addwfc	prodh,w,c
 11516  002848  6EF7               	movwf	tblptrh,c
 11517  00284A                     	if	0	;There are less than 3 active tblptr bytes
 11518  00284A                     	endif
 11519  00284A  0009               	tblrd		*+
 11520  00284C  CFF5 F0C8          	movff	tablat,??_DacInit
 11521  002850  0009               	tblrd		*+
 11522  002852  CFF5 F0C9          	movff	tablat,??_DacInit+1
 11523  002856  C0C8  F029         	movff	??_DacInit,SWSPI_send_word@data
 11524  00285A  C0C9  F02A         	movff	??_DacInit+1,SWSPI_send_word@data+1
 11525  00285E  6A2B               	clrf	SWSPI_send_word@data+2,c
 11526  002860  6A2C               	clrf	SWSPI_send_word@data+3,c
 11527  002862  0E01               	movlw	1
 11528  002864  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11529  002866  0E02               	movlw	2
 11530  002868  ECDF  F017         	call	_SWSPI_send_word
 11531                           
 11532                           ;DacApp.c: 19: StoreIntInEeprom(DAC_DEFAULT_INIT_VALUES[idx], (0x40) | DAC_ADDRES[idx], 
      +                          2);
 11533  00286C  0100               	movlb	0	; () banked
 11534  00286E  51CC               	movf	DacInit@idx& (0+255),w,b
 11535  002870  0D02               	mullw	2
 11536  002872  0E4B               	movlw	low _DAC_DEFAULT_INIT_VALUES
 11537  002874  24F3               	addwf	prodl,w,c
 11538  002876  6EF6               	movwf	tblptrl,c
 11539  002878  0E06               	movlw	high _DAC_DEFAULT_INIT_VALUES
 11540  00287A  20F4               	addwfc	prodh,w,c
 11541  00287C  6EF7               	movwf	tblptrh,c
 11542  00287E                     	if	0	;There are less than 3 active tblptr bytes
 11543  00287E                     	endif
 11544  00287E  0009               	tblrd		*+
 11545  002880  CFF5 F0C8          	movff	tablat,??_DacInit
 11546  002884  0009               	tblrd		*+
 11547  002886  CFF5 F0C9          	movff	tablat,??_DacInit+1
 11548  00288A  C0C8  F021         	movff	??_DacInit,StoreIntInEeprom@data
 11549  00288E  C0C9  F022         	movff	??_DacInit+1,StoreIntInEeprom@data+1
 11550  002892  6A23               	clrf	StoreIntInEeprom@data+2,c
 11551  002894  6A24               	clrf	StoreIntInEeprom@data+3,c
 11552  002896  51CC               	movf	DacInit@idx& (0+255),w,b
 11553  002898  0D01               	mullw	1
 11554  00289A  0E53               	movlw	low _DAC_ADDRES
 11555  00289C  24F3               	addwf	prodl,w,c
 11556  00289E  6EF6               	movwf	tblptrl,c
 11557  0028A0  0E06               	movlw	high _DAC_ADDRES
 11558  0028A2  20F4               	addwfc	prodh,w,c
 11559  0028A4  6EF7               	movwf	tblptrh,c
 11560  0028A6                     	if	0	;There are less than 3 active tblptr bytes
 11561  0028A6                     	endif
 11562  0028A6  0008               	tblrd		*
 11563  0028A8  50F5               	movf	tablat,w,c
 11564  0028AA  0940               	iorlw	64
 11565  0028AC  6E25               	movwf	StoreIntInEeprom@address,c
 11566  0028AE  0E00               	movlw	0
 11567  0028B0  6E27               	movwf	StoreIntInEeprom@numOfByes+1,c
 11568  0028B2  0E02               	movlw	2
 11569  0028B4  6E26               	movwf	StoreIntInEeprom@numOfByes,c
 11570  0028B6  ECBC  F01E         	call	_StoreIntInEeprom	;wreg free
 11571                           
 11572                           ;DacApp.c: 20: }
 11573  0028BA  D00B               	goto	l412
 11574  0028BC                     l411:
 11575  0028BC                     l8631:
 11576                           
 11577                           ;DacApp.c: 21: else
 11578                           ;DacApp.c: 22: {
 11579                           ;DacApp.c: 23: SWSPI_send_word(EXT_DAC, dacInput, 1);
 11580  0028BC  C0CA  F029         	movff	DacInit@dacInput,SWSPI_send_word@data
 11581  0028C0  C0CB  F02A         	movff	DacInit@dacInput+1,SWSPI_send_word@data+1
 11582  0028C4  6A2B               	clrf	SWSPI_send_word@data+2,c
 11583  0028C6  6A2C               	clrf	SWSPI_send_word@data+3,c
 11584  0028C8  0E01               	movlw	1
 11585  0028CA  6E2D               	movwf	SWSPI_send_word@dataSize,c
 11586  0028CC  0E02               	movlw	2
 11587  0028CE  ECDF  F017         	call	_SWSPI_send_word
 11588  0028D2                     l412:
 11589  0028D2  0100               	movlb	0	; () banked
 11590  0028D4  2BCC               	incf	DacInit@idx& (0+255),f,b
 11591  0028D6  D791               	goto	l8619
 11592  0028D8                     __end_of_DacInit:
 11593                           	opt stack 0
 11594                           tosu	equ	0xFFF
 11595                           tosh	equ	0xFFE
 11596                           tosl	equ	0xFFD
 11597                           pclath	equ	0xFFA
 11598                           tblptru	equ	0xFF8
 11599                           tblptrh	equ	0xFF7
 11600                           tblptrl	equ	0xFF6
 11601                           tablat	equ	0xFF5
 11602                           prodh	equ	0xFF4
 11603                           prodl	equ	0xFF3
 11604                           intcon	equ	0xFF2
 11605                           intcon2	equ	0xFF1
 11606                           postinc0	equ	0xFEE
 11607                           plusw0	equ	0xFEB
 11608                           wreg	equ	0xFE8
 11609                           indf1	equ	0xFE7
 11610                           postdec1	equ	0xFE5
 11611                           fsr1h	equ	0xFE2
 11612                           fsr1l	equ	0xFE1
 11613                           indf2	equ	0xFDF
 11614                           postinc2	equ	0xFDE
 11615                           postdec2	equ	0xFDD
 11616                           plusw2	equ	0xFDB
 11617                           fsr2h	equ	0xFDA
 11618                           fsr2l	equ	0xFD9
 11619                           status	equ	0xFD8
 11620                           
 11621 ;; *************** function _StoreIntInEeprom *****************
 11622 ;; Defined at:
 11623 ;;		line 122 in file "SystemCommon.c"
 11624 ;; Parameters:    Size  Location     Type
 11625 ;;  data            4   32[COMRAM] unsigned long 
 11626 ;;  address         1   36[COMRAM] unsigned char 
 11627 ;;  numOfByes       2   37[COMRAM] int 
 11628 ;; Auto vars:     Size  Location     Type
 11629 ;;  val             1   39[COMRAM] unsigned char 
 11630 ;;  idx             1   40[COMRAM] unsigned char 
 11631 ;; Return value:  Size  Location     Type
 11632 ;;                  1    wreg      void 
 11633 ;; Registers used:
 11634 ;;		wreg, status,2, status,0, cstack
 11635 ;; Tracked objects:
 11636 ;;		On entry : 0/0
 11637 ;;		On exit  : 0/0
 11638 ;;		Unchanged: 0/0
 11639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11640 ;;      Params:         7       0       0       0       0       0       0
 11641 ;;      Locals:         2       0       0       0       0       0       0
 11642 ;;      Temps:          0       0       0       0       0       0       0
 11643 ;;      Totals:         9       0       0       0       0       0       0
 11644 ;;Total ram usage:        9 bytes
 11645 ;; Hardware stack levels used:    1
 11646 ;; Hardware stack levels required when called:    6
 11647 ;; This function calls:
 11648 ;;		_EepromWrite
 11649 ;;		_make8
 11650 ;; This function is called by:
 11651 ;;		_DacInit
 11652 ;;		_DacSetValue
 11653 ;;		_InitSynth
 11654 ;;		_UpdateSynthFreq
 11655 ;; This function uses a non-reentrant model
 11656 ;;
 11657                           
 11658                           	psect	text63
 11659  003D78                     __ptext63:
 11660                           	opt stack 0
 11661  003D78                     _StoreIntInEeprom:
 11662                           	opt stack 21
 11663                           
 11664                           ;SystemCommon.c: 124: for(uint8_t idx = numOfByes; idx; idx--)
 11665                           
 11666                           ; BSR set to: 0
 11667                           ;incstack = 0
 11668  003D78  C026  F029         	movff	StoreIntInEeprom@numOfByes,StoreIntInEeprom@idx
 11669  003D7C  D015               	goto	l1434
 11670  003D7E                     
 11671                           ;SystemCommon.c: 125: {
 11672                           ;SystemCommon.c: 126: uint8_t val = make8(data, idx - 1);
 11673  003D7E  C021  F018         	movff	StoreIntInEeprom@data,make8@data
 11674  003D82  C022  F019         	movff	StoreIntInEeprom@data+1,make8@data+1
 11675  003D86  C023  F01A         	movff	StoreIntInEeprom@data+2,make8@data+2
 11676  003D8A  C024  F01B         	movff	StoreIntInEeprom@data+3,make8@data+3
 11677  003D8E  0429               	decf	StoreIntInEeprom@idx,w,c
 11678  003D90  6E1C               	movwf	make8@dataLocation,c
 11679  003D92  ECF2  F01B         	call	_make8	;wreg free
 11680  003D96  6E28               	movwf	StoreIntInEeprom@val,c
 11681                           
 11682                           ;SystemCommon.c: 127: EepromWrite(address - idx, val);
 11683  003D98  C028  F01B         	movff	StoreIntInEeprom@val,EepromWrite@data
 11684  003D9C  5029               	movf	StoreIntInEeprom@idx,w,c
 11685  003D9E  0800               	sublw	0
 11686  003DA0  2425               	addwf	StoreIntInEeprom@address,w,c
 11687  003DA2  EC97  F021         	call	_EepromWrite
 11688  003DA6  0629               	decf	StoreIntInEeprom@idx,f,c
 11689  003DA8                     l1434:
 11690  003DA8  5029               	movf	StoreIntInEeprom@idx,w,c
 11691  003DAA  B4D8               	btfsc	status,2,c
 11692  003DAC  0012               	return	
 11693  003DAE  D7E7               	goto	l1435
 11694  003DB0                     __end_of_StoreIntInEeprom:
 11695                           	opt stack 0
 11696                           tosu	equ	0xFFF
 11697                           tosh	equ	0xFFE
 11698                           tosl	equ	0xFFD
 11699                           pclath	equ	0xFFA
 11700                           tblptru	equ	0xFF8
 11701                           tblptrh	equ	0xFF7
 11702                           tblptrl	equ	0xFF6
 11703                           tablat	equ	0xFF5
 11704                           prodh	equ	0xFF4
 11705                           prodl	equ	0xFF3
 11706                           intcon	equ	0xFF2
 11707                           intcon2	equ	0xFF1
 11708                           postinc0	equ	0xFEE
 11709                           plusw0	equ	0xFEB
 11710                           wreg	equ	0xFE8
 11711                           indf1	equ	0xFE7
 11712                           postdec1	equ	0xFE5
 11713                           fsr1h	equ	0xFE2
 11714                           fsr1l	equ	0xFE1
 11715                           indf2	equ	0xFDF
 11716                           postinc2	equ	0xFDE
 11717                           postdec2	equ	0xFDD
 11718                           plusw2	equ	0xFDB
 11719                           fsr2h	equ	0xFDA
 11720                           fsr2l	equ	0xFD9
 11721                           status	equ	0xFD8
 11722                           
 11723 ;; *************** function _EepromWrite *****************
 11724 ;; Defined at:
 11725 ;;		line 180 in file "FlashApp.c"
 11726 ;; Parameters:    Size  Location     Type
 11727 ;;  address         1    wreg     unsigned char 
 11728 ;;  data            1   26[COMRAM] unsigned char 
 11729 ;; Auto vars:     Size  Location     Type
 11730 ;;  address         1   27[COMRAM] unsigned char 
 11731 ;; Return value:  Size  Location     Type
 11732 ;;                  1    wreg      void 
 11733 ;; Registers used:
 11734 ;;		wreg, status,2, cstack
 11735 ;; Tracked objects:
 11736 ;;		On entry : 0/0
 11737 ;;		On exit  : 0/0
 11738 ;;		Unchanged: 0/0
 11739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11740 ;;      Params:         1       0       0       0       0       0       0
 11741 ;;      Locals:         1       0       0       0       0       0       0
 11742 ;;      Temps:          0       0       0       0       0       0       0
 11743 ;;      Totals:         2       0       0       0       0       0       0
 11744 ;;Total ram usage:        2 bytes
 11745 ;; Hardware stack levels used:    1
 11746 ;; Hardware stack levels required when called:    5
 11747 ;; This function calls:
 11748 ;;		_DATAEE_WriteByte
 11749 ;; This function is called by:
 11750 ;;		_StoreIntInEeprom
 11751 ;; This function uses a non-reentrant model
 11752 ;;
 11753                           
 11754                           	psect	text64
 11755  00432E                     __ptext64:
 11756                           	opt stack 0
 11757  00432E                     _EepromWrite:
 11758                           	opt stack 21
 11759                           
 11760                           ;incstack = 0
 11761                           ;EepromWrite@address stored from wreg
 11762  00432E  6E1C               	movwf	EepromWrite@address,c
 11763                           
 11764                           ;FlashApp.c: 182: DATAEE_WriteByte(address, data);
 11765  004330  C01B  F018         	movff	EepromWrite@data,DATAEE_WriteByte@bData
 11766  004334  501C               	movf	EepromWrite@address,w,c
 11767  004336  EC46  F01F         	call	_DATAEE_WriteByte
 11768  00433A  0012               	return		;funcret
 11769  00433C                     __end_of_EepromWrite:
 11770                           	opt stack 0
 11771                           tosu	equ	0xFFF
 11772                           tosh	equ	0xFFE
 11773                           tosl	equ	0xFFD
 11774                           pclath	equ	0xFFA
 11775                           tblptru	equ	0xFF8
 11776                           tblptrh	equ	0xFF7
 11777                           tblptrl	equ	0xFF6
 11778                           tablat	equ	0xFF5
 11779                           prodh	equ	0xFF4
 11780                           prodl	equ	0xFF3
 11781                           intcon	equ	0xFF2
 11782                           intcon2	equ	0xFF1
 11783                           postinc0	equ	0xFEE
 11784                           plusw0	equ	0xFEB
 11785                           wreg	equ	0xFE8
 11786                           indf1	equ	0xFE7
 11787                           postdec1	equ	0xFE5
 11788                           fsr1h	equ	0xFE2
 11789                           fsr1l	equ	0xFE1
 11790                           indf2	equ	0xFDF
 11791                           postinc2	equ	0xFDE
 11792                           postdec2	equ	0xFDD
 11793                           plusw2	equ	0xFDB
 11794                           fsr2h	equ	0xFDA
 11795                           fsr2l	equ	0xFD9
 11796                           status	equ	0xFD8
 11797                           
 11798 ;; *************** function _DATAEE_WriteByte *****************
 11799 ;; Defined at:
 11800 ;;		line 167 in file "mcc_generated_files/memory.c"
 11801 ;; Parameters:    Size  Location     Type
 11802 ;;  bAdd            1    wreg     unsigned char 
 11803 ;;  bData           1   23[COMRAM] unsigned char 
 11804 ;; Auto vars:     Size  Location     Type
 11805 ;;  bAdd            1   24[COMRAM] unsigned char 
 11806 ;;  GIEBitValue     1   25[COMRAM] unsigned char 
 11807 ;; Return value:  Size  Location     Type
 11808 ;;                  1    wreg      void 
 11809 ;; Registers used:
 11810 ;;		wreg, status,2
 11811 ;; Tracked objects:
 11812 ;;		On entry : 0/0
 11813 ;;		On exit  : 0/0
 11814 ;;		Unchanged: 0/0
 11815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11816 ;;      Params:         1       0       0       0       0       0       0
 11817 ;;      Locals:         2       0       0       0       0       0       0
 11818 ;;      Temps:          0       0       0       0       0       0       0
 11819 ;;      Totals:         3       0       0       0       0       0       0
 11820 ;;Total ram usage:        3 bytes
 11821 ;; Hardware stack levels used:    1
 11822 ;; Hardware stack levels required when called:    4
 11823 ;; This function calls:
 11824 ;;		Nothing
 11825 ;; This function is called by:
 11826 ;;		_EepromWrite
 11827 ;; This function uses a non-reentrant model
 11828 ;;
 11829                           
 11830                           	psect	text65
 11831  003E8C                     __ptext65:
 11832                           	opt stack 0
 11833  003E8C                     _DATAEE_WriteByte:
 11834                           	opt stack 21
 11835                           
 11836                           ;incstack = 0
 11837                           ;DATAEE_WriteByte@bAdd stored from wreg
 11838  003E8C  6E19               	movwf	DATAEE_WriteByte@bAdd,c
 11839                           
 11840                           ;memory.c: 169: uint8_t GIEBitValue = INTCONbits.GIE;
 11841  003E8E  0E00               	movlw	0
 11842  003E90  BEF2               	btfsc	intcon,7,c	;volatile
 11843  003E92  0E01               	movlw	1
 11844  003E94  6E1A               	movwf	DATAEE_WriteByte@GIEBitValue,c
 11845                           
 11846                           ;memory.c: 171: EEADR = (bAdd & 0xFF);
 11847  003E96  C019  FFA9         	movff	DATAEE_WriteByte@bAdd,4009	;volatile
 11848                           
 11849                           ;memory.c: 172: EEDATA = bData;
 11850  003E9A  C018  FFA8         	movff	DATAEE_WriteByte@bData,4008	;volatile
 11851                           
 11852                           ;memory.c: 173: EECON1bits.EEPGD = 0;
 11853  003E9E  9EA6               	bcf	4006,7,c	;volsfr
 11854                           
 11855                           ;memory.c: 174: EECON1bits.CFGS = 0;
 11856  003EA0  9CA6               	bcf	4006,6,c	;volsfr
 11857                           
 11858                           ;memory.c: 175: EECON1bits.WREN = 1;
 11859  003EA2  84A6               	bsf	4006,2,c	;volsfr
 11860                           
 11861                           ;memory.c: 176: INTCONbits.GIE = 0;
 11862  003EA4  9EF2               	bcf	intcon,7,c	;volatile
 11863                           
 11864                           ;memory.c: 177: EECON2 = 0x55;
 11865  003EA6  0E55               	movlw	85
 11866  003EA8  6EA7               	movwf	4007,c	;volsfr
 11867                           
 11868                           ;memory.c: 178: EECON2 = 0xAA;
 11869  003EAA  0EAA               	movlw	170
 11870  003EAC  6EA7               	movwf	4007,c	;volsfr
 11871                           
 11872                           ;memory.c: 179: EECON1bits.WR = 1;
 11873  003EAE  82A6               	bsf	4006,1,c	;volsfr
 11874  003EB0                     
 11875                           ;memory.c: 182: {
 11876  003EB0  B2A6               	btfsc	4006,1,c	;volsfr
 11877  003EB2  D7FE               	goto	l1056
 11878                           
 11879                           ;memory.c: 183: }
 11880                           ;memory.c: 185: EECON1bits.WREN = 0;
 11881  003EB4  94A6               	bcf	4006,2,c	;volsfr
 11882                           
 11883                           ;memory.c: 186: INTCONbits.GIE = GIEBitValue;
 11884  003EB6  B01A               	btfsc	DATAEE_WriteByte@GIEBitValue,0,c
 11885  003EB8  D002               	bra	u7075
 11886  003EBA  9EF2               	bcf	intcon,7,c	;volatile
 11887  003EBC  D001               	bra	u7076
 11888  003EBE                     u7075:
 11889  003EBE  8EF2               	bsf	intcon,7,c	;volatile
 11890  003EC0                     u7076:
 11891  003EC0  0012               	return		;funcret
 11892  003EC2                     __end_of_DATAEE_WriteByte:
 11893                           	opt stack 0
 11894                           tosu	equ	0xFFF
 11895                           tosh	equ	0xFFE
 11896                           tosl	equ	0xFFD
 11897                           pclath	equ	0xFFA
 11898                           tblptru	equ	0xFF8
 11899                           tblptrh	equ	0xFF7
 11900                           tblptrl	equ	0xFF6
 11901                           tablat	equ	0xFF5
 11902                           prodh	equ	0xFF4
 11903                           prodl	equ	0xFF3
 11904                           intcon	equ	0xFF2
 11905                           intcon2	equ	0xFF1
 11906                           postinc0	equ	0xFEE
 11907                           plusw0	equ	0xFEB
 11908                           wreg	equ	0xFE8
 11909                           indf1	equ	0xFE7
 11910                           postdec1	equ	0xFE5
 11911                           fsr1h	equ	0xFE2
 11912                           fsr1l	equ	0xFE1
 11913                           indf2	equ	0xFDF
 11914                           postinc2	equ	0xFDE
 11915                           postdec2	equ	0xFDD
 11916                           plusw2	equ	0xFDB
 11917                           fsr2h	equ	0xFDA
 11918                           fsr2l	equ	0xFD9
 11919                           status	equ	0xFD8
 11920                           
 11921 ;; *************** function _SWSPI_send_word *****************
 11922 ;; Defined at:
 11923 ;;		line 17 in file "SwSpiApp.c"
 11924 ;; Parameters:    Size  Location     Type
 11925 ;;  phrType         1    wreg     enum E1
 11926 ;;  data            4   40[COMRAM] unsigned long 
 11927 ;;  dataSize        1   44[COMRAM] unsigned char 
 11928 ;; Auto vars:     Size  Location     Type
 11929 ;;  phrType         1   41[BANK0 ] enum E1
 11930 ;;  datac           1   38[BANK0 ] unsigned char 
 11931 ;;  idx             2   39[BANK0 ] int 
 11932 ;; Return value:  Size  Location     Type
 11933 ;;                  1    wreg      void 
 11934 ;; Registers used:
 11935 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11936 ;; Tracked objects:
 11937 ;;		On entry : 0/0
 11938 ;;		On exit  : 0/0
 11939 ;;		Unchanged: 0/0
 11940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11941 ;;      Params:         5       0       0       0       0       0       0
 11942 ;;      Locals:         0       4       0       0       0       0       0
 11943 ;;      Temps:          0       0       0       0       0       0       0
 11944 ;;      Totals:         5       4       0       0       0       0       0
 11945 ;;Total ram usage:        9 bytes
 11946 ;; Hardware stack levels used:    1
 11947 ;; Hardware stack levels required when called:    7
 11948 ;; This function calls:
 11949 ;;		_SWSPI_DAC_send_bits
 11950 ;;		_SWSPI_Synth_send_bits
 11951 ;;		_SwSpi_Set_Dac_Sync_Pin
 11952 ;;		_SwSpi_Set_Synth_Le_Pin
 11953 ;;		_make8
 11954 ;; This function is called by:
 11955 ;;		_DacInit
 11956 ;;		_DacSetValue
 11957 ;;		_InitSynth
 11958 ;;		_UpdateSynthFreq
 11959 ;; This function uses a non-reentrant model
 11960 ;;
 11961                           
 11962                           	psect	text66
 11963  002FBE                     __ptext66:
 11964                           	opt stack 0
 11965  002FBE                     _SWSPI_send_word:
 11966                           	opt stack 20
 11967                           
 11968                           ;incstack = 0
 11969                           ;SWSPI_send_word@phrType stored from wreg
 11970  002FBE  0100               	movlb	0	; () banked
 11971  002FC0  6F89               	movwf	SWSPI_send_word@phrType& (0+255),b
 11972                           
 11973                           ;SwSpiApp.c: 19: (INTCONbits.GIE = 0);
 11974  002FC2  9EF2               	bcf	intcon,7,c	;volatile
 11975                           
 11976                           ;SwSpiApp.c: 23: if(phrType == SYNTH_TX || phrType == SYNTH_RX)
 11977  002FC4  0100               	movlb	0	; () banked
 11978  002FC6  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 11979  002FC8  B4D8               	btfsc	status,2,c
 11980  002FCA  D003               	goto	u7700
 11981                           
 11982                           ; BSR set to: 0
 11983  002FCC  0589               	decf	SWSPI_send_word@phrType& (0+255),w,b
 11984  002FCE  A4D8               	btfss	status,2,c
 11985  002FD0  D018               	goto	l632
 11986  002FD2                     u7700:
 11987                           
 11988                           ; BSR set to: 0
 11989                           ;SwSpiApp.c: 24: {
 11990                           ;SwSpiApp.c: 25: SwSpi_Set_Synth_Le_Pin(phrType, 0);
 11991                           
 11992                           ; BSR set to: 0
 11993  002FD2  0E00               	movlw	0
 11994  002FD4  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 11995  002FD6  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 11996  002FD8  EC82  F01E         	call	_SwSpi_Set_Synth_Le_Pin
 11997                           
 11998                           ;SwSpiApp.c: 26: SWSPI_Synth_send_bits(phrType, data);
 11999  002FDC  C029  F025         	movff	SWSPI_send_word@data,SWSPI_Synth_send_bits@data
 12000  002FE0  C02A  F026         	movff	SWSPI_send_word@data+1,SWSPI_Synth_send_bits@data+1
 12001  002FE4  C02B  F027         	movff	SWSPI_send_word@data+2,SWSPI_Synth_send_bits@data+2
 12002  002FE8  C02C  F028         	movff	SWSPI_send_word@data+3,SWSPI_Synth_send_bits@data+3
 12003  002FEC  0100               	movlb	0	; () banked
 12004  002FEE  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12005  002FF0  EC1A  F016         	call	_SWSPI_Synth_send_bits
 12006                           
 12007                           ;SwSpiApp.c: 27: SwSpi_Set_Synth_Le_Pin(phrType, 1);
 12008  002FF4  0E01               	movlw	1
 12009  002FF6  6E18               	movwf	SwSpi_Set_Synth_Le_Pin@cPinMode,c
 12010  002FF8  0100               	movlb	0	; () banked
 12011  002FFA  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12012  002FFC  EC82  F01E         	call	_SwSpi_Set_Synth_Le_Pin
 12013                           
 12014                           ;SwSpiApp.c: 28: }
 12015  003000  D031               	goto	l636
 12016  003002                     l632:
 12017                           
 12018                           ;SwSpiApp.c: 29: else if(phrType == EXT_DAC)
 12019  003002  0E02               	movlw	2
 12020  003004  0100               	movlb	0	; () banked
 12021  003006  1989               	xorwf	SWSPI_send_word@phrType& (0+255),w,b
 12022  003008  A4D8               	btfss	status,2,c
 12023  00300A  D02C               	goto	l636
 12024                           
 12025                           ; BSR set to: 0
 12026                           ;SwSpiApp.c: 30: {
 12027                           ;SwSpiApp.c: 31: SwSpi_Set_Dac_Sync_Pin(0);
 12028  00300C  0E00               	movlw	0
 12029  00300E  EC07  F021         	call	_SwSpi_Set_Dac_Sync_Pin
 12030                           
 12031                           ;SwSpiApp.c: 32: for(int idx = dataSize + 1; idx > 0; idx--)
 12032  003012  0E01               	movlw	1
 12033  003014  242D               	addwf	SWSPI_send_word@dataSize,w,c
 12034  003016  0100               	movlb	0	; () banked
 12035  003018  6F87               	movwf	SWSPI_send_word@idx& (0+255),b
 12036  00301A  6B88               	clrf	(SWSPI_send_word@idx+1)& (0+255),b
 12037  00301C  0E00               	movlw	0
 12038  00301E  2388               	addwfc	(SWSPI_send_word@idx+1)& (0+255),f,b
 12039  003020                     l7865:
 12040                           
 12041                           ; BSR set to: 0
 12042  003020  BF88               	btfsc	(SWSPI_send_word@idx+1)& (0+255),7,b
 12043  003022  D01D               	goto	u7730
 12044  003024  5188               	movf	(SWSPI_send_word@idx+1)& (0+255),w,b
 12045  003026  E103               	bnz	l7869
 12046  003028  0587               	decf	SWSPI_send_word@idx& (0+255),w,b
 12047  00302A  A0D8               	btfss	status,0,c
 12048  00302C  D018               	goto	u7730
 12049  00302E                     l7869:
 12050                           
 12051                           ; BSR set to: 0
 12052                           ;SwSpiApp.c: 33: {
 12053                           ;SwSpiApp.c: 34: uint8_t datac = make8(data, idx - 1);
 12054  00302E  C029  F018         	movff	SWSPI_send_word@data,make8@data
 12055  003032  C02A  F019         	movff	SWSPI_send_word@data+1,make8@data+1
 12056  003036  C02B  F01A         	movff	SWSPI_send_word@data+2,make8@data+2
 12057  00303A  C02C  F01B         	movff	SWSPI_send_word@data+3,make8@data+3
 12058  00303E  0587               	decf	SWSPI_send_word@idx& (0+255),w,b
 12059  003040  6E1C               	movwf	make8@dataLocation,c
 12060  003042  ECF2  F01B         	call	_make8	;wreg free
 12061  003046  0100               	movlb	0	; () banked
 12062  003048  6F86               	movwf	SWSPI_send_word@datac& (0+255),b
 12063                           
 12064                           ;SwSpiApp.c: 35: SWSPI_DAC_send_bits(phrType, datac);
 12065  00304A  C086  F01A         	movff	SWSPI_send_word@datac,SWSPI_DAC_send_bits@data
 12066  00304E  5189               	movf	SWSPI_send_word@phrType& (0+255),w,b
 12067  003050  EC7A  F01C         	call	_SWSPI_DAC_send_bits
 12068  003054  0100               	movlb	0	; () banked
 12069  003056  0787               	decf	SWSPI_send_word@idx& (0+255),f,b
 12070  003058  A0D8               	btfss	status,0,c
 12071  00305A  0788               	decf	(SWSPI_send_word@idx+1)& (0+255),f,b
 12072  00305C  D7E1               	goto	l7865
 12073  00305E                     u7730:
 12074                           
 12075                           ; BSR set to: 0
 12076                           ;SwSpiApp.c: 36: }
 12077                           ;SwSpiApp.c: 37: SwSpi_Set_Dac_Sync_Pin(1);
 12078                           
 12079                           ; BSR set to: 0
 12080  00305E  0E01               	movlw	1
 12081  003060  EC07  F021         	call	_SwSpi_Set_Dac_Sync_Pin
 12082  003064                     l636:
 12083                           
 12084                           ;SwSpiApp.c: 38: }
 12085                           ;SwSpiApp.c: 40: (INTCONbits.GIE = 1);
 12086  003064  8EF2               	bsf	intcon,7,c	;volatile
 12087  003066  0012               	return		;funcret
 12088  003068                     __end_of_SWSPI_send_word:
 12089                           	opt stack 0
 12090                           tosu	equ	0xFFF
 12091                           tosh	equ	0xFFE
 12092                           tosl	equ	0xFFD
 12093                           pclath	equ	0xFFA
 12094                           tblptru	equ	0xFF8
 12095                           tblptrh	equ	0xFF7
 12096                           tblptrl	equ	0xFF6
 12097                           tablat	equ	0xFF5
 12098                           prodh	equ	0xFF4
 12099                           prodl	equ	0xFF3
 12100                           intcon	equ	0xFF2
 12101                           intcon2	equ	0xFF1
 12102                           postinc0	equ	0xFEE
 12103                           plusw0	equ	0xFEB
 12104                           wreg	equ	0xFE8
 12105                           indf1	equ	0xFE7
 12106                           postdec1	equ	0xFE5
 12107                           fsr1h	equ	0xFE2
 12108                           fsr1l	equ	0xFE1
 12109                           indf2	equ	0xFDF
 12110                           postinc2	equ	0xFDE
 12111                           postdec2	equ	0xFDD
 12112                           plusw2	equ	0xFDB
 12113                           fsr2h	equ	0xFDA
 12114                           fsr2l	equ	0xFD9
 12115                           status	equ	0xFD8
 12116                           
 12117 ;; *************** function _make8 *****************
 12118 ;; Defined at:
 12119 ;;		line 92 in file "SystemCommon.c"
 12120 ;; Parameters:    Size  Location     Type
 12121 ;;  data            4   23[COMRAM] unsigned long 
 12122 ;;  dataLocation    1   27[COMRAM] unsigned char 
 12123 ;; Auto vars:     Size  Location     Type
 12124 ;;		None
 12125 ;; Return value:  Size  Location     Type
 12126 ;;                  1    wreg      unsigned char 
 12127 ;; Registers used:
 12128 ;;		wreg, status,2, status,0
 12129 ;; Tracked objects:
 12130 ;;		On entry : 0/0
 12131 ;;		On exit  : 0/0
 12132 ;;		Unchanged: 0/0
 12133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12134 ;;      Params:         5       0       0       0       0       0       0
 12135 ;;      Locals:         0       0       0       0       0       0       0
 12136 ;;      Temps:          4       0       0       0       0       0       0
 12137 ;;      Totals:         9       0       0       0       0       0       0
 12138 ;;Total ram usage:        9 bytes
 12139 ;; Hardware stack levels used:    1
 12140 ;; Hardware stack levels required when called:    4
 12141 ;; This function calls:
 12142 ;;		Nothing
 12143 ;; This function is called by:
 12144 ;;		_FlashReadCondition
 12145 ;;		_DacReadValue
 12146 ;;		_SynthReadData
 12147 ;;		_SWSPI_send_word
 12148 ;;		_StoreIntInEeprom
 12149 ;; This function uses a non-reentrant model
 12150 ;;
 12151                           
 12152                           	psect	text67
 12153  0037E4                     __ptext67:
 12154                           	opt stack 0
 12155  0037E4                     _make8:
 12156                           	opt stack 22
 12157                           
 12158                           ;SystemCommon.c: 94: switch(dataLocation)
 12159                           
 12160                           ;incstack = 0
 12161  0037E4  D01F               	goto	l1419
 12162  0037E6                     
 12163                           ;SystemCommon.c: 97: return (data & 0x000000ff);
 12164  0037E6  5018               	movf	make8@data,w,c
 12165  0037E8  0012               	return	
 12166  0037EA                     
 12167                           ;SystemCommon.c: 100: return (data & 0x0000ff00) >> 8;
 12168  0037EA  5019               	movf	make8@data+1,w,c
 12169  0037EC  0012               	return	
 12170  0037EE                     
 12171                           ;SystemCommon.c: 103: return (data & 0x00ff0000) >> 16;
 12172  0037EE  501A               	movf	make8@data+2,w,c
 12173  0037F0  0012               	return	
 12174  0037F2                     
 12175                           ;SystemCommon.c: 106: return (data & 0xff000000) >> 24;
 12176  0037F2  0E00               	movlw	0
 12177  0037F4  1418               	andwf	make8@data,w,c
 12178  0037F6  6E1D               	movwf	??_make8& (0+255),c
 12179  0037F8  0E00               	movlw	0
 12180  0037FA  1419               	andwf	make8@data+1,w,c
 12181  0037FC  6E1E               	movwf	(??_make8+1)& (0+255),c
 12182  0037FE  0E00               	movlw	0
 12183  003800  141A               	andwf	make8@data+2,w,c
 12184  003802  6E1F               	movwf	(??_make8+2)& (0+255),c
 12185  003804  0EFF               	movlw	255
 12186  003806  141B               	andwf	make8@data+3,w,c
 12187  003808  6E20               	movwf	(??_make8+3)& (0+255),c
 12188  00380A  0E19               	movlw	25
 12189  00380C  D005               	goto	u7440
 12190  00380E                     u7445:
 12191  00380E  90D8               	bcf	status,0,c
 12192  003810  3220               	rrcf	??_make8+3,f,c
 12193  003812  321F               	rrcf	??_make8+2,f,c
 12194  003814  321E               	rrcf	??_make8+1,f,c
 12195  003816  321D               	rrcf	??_make8,f,c
 12196  003818                     u7440:
 12197  003818  2EE8               	decfsz	wreg,f,c
 12198  00381A  D7F9               	goto	u7445
 12199  00381C  501D               	movf	??_make8,w,c
 12200  00381E  0012               	return	
 12201  003820                     
 12202                           ;SystemCommon.c: 109: return (0);
 12203  003820  0E00               	movlw	0
 12204                           
 12205                           ;SystemCommon.c: 110: }
 12206  003822  0012               	return	
 12207  003824                     l1419:
 12208  003824  501C               	movf	make8@dataLocation,w,c
 12209                           
 12210                           ; Switch size 1, requested type "space"
 12211                           ; Number of cases is 4, Range of values is 0 to 3
 12212                           ; switch strategies available:
 12213                           ; Name         Instructions Cycles
 12214                           ; simple_byte           13     7 (average)
 12215                           ;	Chosen strategy is simple_byte
 12216  003826  0A00               	xorlw	0	; case 0
 12217  003828  B4D8               	btfsc	status,2,c
 12218  00382A  D7DD               	goto	l1420
 12219  00382C  0A01               	xorlw	1	; case 1
 12220  00382E  B4D8               	btfsc	status,2,c
 12221  003830  D7DC               	goto	l1422
 12222  003832  0A03               	xorlw	3	; case 2
 12223  003834  B4D8               	btfsc	status,2,c
 12224  003836  D7DB               	goto	l1423
 12225  003838  0A01               	xorlw	1	; case 3
 12226  00383A  B4D8               	btfsc	status,2,c
 12227  00383C  D7DA               	goto	l1424
 12228  00383E  D7F0               	goto	l1425
 12229  003840                     __end_of_make8:
 12230                           	opt stack 0
 12231                           tosu	equ	0xFFF
 12232                           tosh	equ	0xFFE
 12233                           tosl	equ	0xFFD
 12234                           pclath	equ	0xFFA
 12235                           tblptru	equ	0xFF8
 12236                           tblptrh	equ	0xFF7
 12237                           tblptrl	equ	0xFF6
 12238                           tablat	equ	0xFF5
 12239                           prodh	equ	0xFF4
 12240                           prodl	equ	0xFF3
 12241                           intcon	equ	0xFF2
 12242                           intcon2	equ	0xFF1
 12243                           postinc0	equ	0xFEE
 12244                           plusw0	equ	0xFEB
 12245                           wreg	equ	0xFE8
 12246                           indf1	equ	0xFE7
 12247                           postdec1	equ	0xFE5
 12248                           fsr1h	equ	0xFE2
 12249                           fsr1l	equ	0xFE1
 12250                           indf2	equ	0xFDF
 12251                           postinc2	equ	0xFDE
 12252                           postdec2	equ	0xFDD
 12253                           plusw2	equ	0xFDB
 12254                           fsr2h	equ	0xFDA
 12255                           fsr2l	equ	0xFD9
 12256                           status	equ	0xFD8
 12257                           
 12258 ;; *************** function _SwSpi_Set_Synth_Le_Pin *****************
 12259 ;; Defined at:
 12260 ;;		line 232 in file "SwSpiApp.c"
 12261 ;; Parameters:    Size  Location     Type
 12262 ;;  phrType         1    wreg     enum E1
 12263 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12264 ;; Auto vars:     Size  Location     Type
 12265 ;;  phrType         1   24[COMRAM] enum E1
 12266 ;; Return value:  Size  Location     Type
 12267 ;;                  1    wreg      void 
 12268 ;; Registers used:
 12269 ;;		wreg, status,2, status,0
 12270 ;; Tracked objects:
 12271 ;;		On entry : 0/0
 12272 ;;		On exit  : 0/0
 12273 ;;		Unchanged: 0/0
 12274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12275 ;;      Params:         1       0       0       0       0       0       0
 12276 ;;      Locals:         1       0       0       0       0       0       0
 12277 ;;      Temps:          0       0       0       0       0       0       0
 12278 ;;      Totals:         2       0       0       0       0       0       0
 12279 ;;Total ram usage:        2 bytes
 12280 ;; Hardware stack levels used:    1
 12281 ;; Hardware stack levels required when called:    4
 12282 ;; This function calls:
 12283 ;;		Nothing
 12284 ;; This function is called by:
 12285 ;;		_SWSPI_send_word
 12286 ;; This function uses a non-reentrant model
 12287 ;;
 12288                           
 12289                           	psect	text68
 12290  003D04                     __ptext68:
 12291                           	opt stack 0
 12292  003D04                     _SwSpi_Set_Synth_Le_Pin:
 12293                           	opt stack 22
 12294                           
 12295                           ;incstack = 0
 12296                           ;SwSpi_Set_Synth_Le_Pin@phrType stored from wreg
 12297  003D04  6E19               	movwf	SwSpi_Set_Synth_Le_Pin@phrType,c
 12298                           
 12299                           ;SwSpiApp.c: 234: switch(phrType)
 12300  003D06  D014               	goto	l744
 12301  003D08                     
 12302                           ;SwSpiApp.c: 237: if(cPinMode == 1)
 12303  003D08  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12304  003D0A  A4D8               	btfss	status,2,c
 12305  003D0C  D002               	goto	l746
 12306                           
 12307                           ;SwSpiApp.c: 238: {
 12308                           ;SwSpiApp.c: 239: do { LATCbits.LATC2 = 1; } while(0);
 12309  003D0E  848B               	bsf	3979,2,c	;volatile
 12310                           
 12311                           ;SwSpiApp.c: 240: }
 12312  003D10  0012               	return	
 12313  003D12                     l746:
 12314                           
 12315                           ;SwSpiApp.c: 241: else if(cPinMode == 0)
 12316  003D12  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12317  003D14  A4D8               	btfss	status,2,c
 12318  003D16  0012               	return	
 12319                           
 12320                           ;SwSpiApp.c: 242: {
 12321                           ;SwSpiApp.c: 243: do { LATCbits.LATC2 = 0; } while(0);
 12322  003D18  948B               	bcf	3979,2,c	;volatile
 12323                           
 12324                           ;SwSpiApp.c: 244: }
 12325                           ;SwSpiApp.c: 245: break;
 12326  003D1A  0012               	return	
 12327  003D1C                     
 12328                           ;SwSpiApp.c: 248: if(cPinMode == 1)
 12329  003D1C  0418               	decf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12330  003D1E  A4D8               	btfss	status,2,c
 12331  003D20  D002               	goto	l755
 12332                           
 12333                           ;SwSpiApp.c: 249: {
 12334                           ;SwSpiApp.c: 250: do { LATDbits.LATD3 = 1; } while(0);
 12335  003D22  868C               	bsf	3980,3,c	;volatile
 12336                           
 12337                           ;SwSpiApp.c: 251: }
 12338  003D24  0012               	return	
 12339  003D26                     l755:
 12340                           
 12341                           ;SwSpiApp.c: 252: else if(cPinMode == 0)
 12342  003D26  5018               	movf	SwSpi_Set_Synth_Le_Pin@cPinMode,w,c
 12343  003D28  A4D8               	btfss	status,2,c
 12344  003D2A  0012               	return	
 12345                           
 12346                           ;SwSpiApp.c: 253: {
 12347                           ;SwSpiApp.c: 254: do { LATDbits.LATD3 = 0; } while(0);
 12348  003D2C  968C               	bcf	3980,3,c	;volatile
 12349                           
 12350                           ;SwSpiApp.c: 257: }
 12351                           
 12352                           ;SwSpiApp.c: 255: }
 12353                           ;SwSpiApp.c: 256: break;
 12354  003D2E  0012               	return	
 12355  003D30                     l744:
 12356  003D30  5019               	movf	SwSpi_Set_Synth_Le_Pin@phrType,w,c
 12357                           
 12358                           ; Switch size 1, requested type "space"
 12359                           ; Number of cases is 2, Range of values is 0 to 1
 12360                           ; switch strategies available:
 12361                           ; Name         Instructions Cycles
 12362                           ; simple_byte            7     4 (average)
 12363                           ;	Chosen strategy is simple_byte
 12364  003D32  0A00               	xorlw	0	; case 0
 12365  003D34  B4D8               	btfsc	status,2,c
 12366  003D36  D7E8               	goto	l745
 12367  003D38  0A01               	xorlw	1	; case 1
 12368  003D3A  A4D8               	btfss	status,2,c
 12369  003D3C  0012               	return	
 12370  003D3E  D7EE               	goto	l754
 12371  003D40                     __end_of_SwSpi_Set_Synth_Le_Pin:
 12372                           	opt stack 0
 12373                           tosu	equ	0xFFF
 12374                           tosh	equ	0xFFE
 12375                           tosl	equ	0xFFD
 12376                           pclath	equ	0xFFA
 12377                           tblptru	equ	0xFF8
 12378                           tblptrh	equ	0xFF7
 12379                           tblptrl	equ	0xFF6
 12380                           tablat	equ	0xFF5
 12381                           prodh	equ	0xFF4
 12382                           prodl	equ	0xFF3
 12383                           intcon	equ	0xFF2
 12384                           intcon2	equ	0xFF1
 12385                           postinc0	equ	0xFEE
 12386                           plusw0	equ	0xFEB
 12387                           wreg	equ	0xFE8
 12388                           indf1	equ	0xFE7
 12389                           postdec1	equ	0xFE5
 12390                           fsr1h	equ	0xFE2
 12391                           fsr1l	equ	0xFE1
 12392                           indf2	equ	0xFDF
 12393                           postinc2	equ	0xFDE
 12394                           postdec2	equ	0xFDD
 12395                           plusw2	equ	0xFDB
 12396                           fsr2h	equ	0xFDA
 12397                           fsr2l	equ	0xFD9
 12398                           status	equ	0xFD8
 12399                           
 12400 ;; *************** function _SwSpi_Set_Dac_Sync_Pin *****************
 12401 ;; Defined at:
 12402 ;;		line 260 in file "SwSpiApp.c"
 12403 ;; Parameters:    Size  Location     Type
 12404 ;;  cPinMode        1    wreg     unsigned char 
 12405 ;; Auto vars:     Size  Location     Type
 12406 ;;  cPinMode        1   23[COMRAM] unsigned char 
 12407 ;; Return value:  Size  Location     Type
 12408 ;;                  1    wreg      void 
 12409 ;; Registers used:
 12410 ;;		wreg, status,2, status,0
 12411 ;; Tracked objects:
 12412 ;;		On entry : 0/0
 12413 ;;		On exit  : 0/0
 12414 ;;		Unchanged: 0/0
 12415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12416 ;;      Params:         0       0       0       0       0       0       0
 12417 ;;      Locals:         1       0       0       0       0       0       0
 12418 ;;      Temps:          0       0       0       0       0       0       0
 12419 ;;      Totals:         1       0       0       0       0       0       0
 12420 ;;Total ram usage:        1 bytes
 12421 ;; Hardware stack levels used:    1
 12422 ;; Hardware stack levels required when called:    4
 12423 ;; This function calls:
 12424 ;;		Nothing
 12425 ;; This function is called by:
 12426 ;;		_SWSPI_send_word
 12427 ;; This function uses a non-reentrant model
 12428 ;;
 12429                           
 12430                           	psect	text69
 12431  00420E                     __ptext69:
 12432                           	opt stack 0
 12433  00420E                     _SwSpi_Set_Dac_Sync_Pin:
 12434                           	opt stack 22
 12435                           
 12436                           ;incstack = 0
 12437                           ;SwSpi_Set_Dac_Sync_Pin@cPinMode stored from wreg
 12438  00420E  6E18               	movwf	SwSpi_Set_Dac_Sync_Pin@cPinMode,c
 12439                           
 12440                           ;SwSpiApp.c: 262: switch(cPinMode)
 12441  004210  D004               	goto	l765
 12442  004212                     
 12443                           ;SwSpiApp.c: 265: do { LATAbits.LATA2 = 0; } while(0);
 12444  004212  9489               	bcf	3977,2,c	;volatile
 12445                           
 12446                           ;SwSpiApp.c: 266: break;
 12447  004214  0012               	return	
 12448  004216                     
 12449                           ;SwSpiApp.c: 269: do { LATAbits.LATA2 = 1; } while(0);
 12450  004216  8489               	bsf	3977,2,c	;volatile
 12451                           
 12452                           ;SwSpiApp.c: 271: }
 12453                           
 12454                           ;SwSpiApp.c: 270: break;
 12455  004218  0012               	return	
 12456  00421A                     l765:
 12457  00421A  5018               	movf	SwSpi_Set_Dac_Sync_Pin@cPinMode,w,c
 12458                           
 12459                           ; Switch size 1, requested type "space"
 12460                           ; Number of cases is 2, Range of values is 0 to 1
 12461                           ; switch strategies available:
 12462                           ; Name         Instructions Cycles
 12463                           ; simple_byte            7     4 (average)
 12464                           ;	Chosen strategy is simple_byte
 12465  00421C  0A00               	xorlw	0	; case 0
 12466  00421E  B4D8               	btfsc	status,2,c
 12467  004220  D7F8               	goto	l766
 12468  004222  0A01               	xorlw	1	; case 1
 12469  004224  A4D8               	btfss	status,2,c
 12470  004226  0012               	return	
 12471  004228  D7F6               	goto	l770
 12472  00422A                     __end_of_SwSpi_Set_Dac_Sync_Pin:
 12473                           	opt stack 0
 12474                           tosu	equ	0xFFF
 12475                           tosh	equ	0xFFE
 12476                           tosl	equ	0xFFD
 12477                           pclath	equ	0xFFA
 12478                           tblptru	equ	0xFF8
 12479                           tblptrh	equ	0xFF7
 12480                           tblptrl	equ	0xFF6
 12481                           tablat	equ	0xFF5
 12482                           prodh	equ	0xFF4
 12483                           prodl	equ	0xFF3
 12484                           intcon	equ	0xFF2
 12485                           intcon2	equ	0xFF1
 12486                           postinc0	equ	0xFEE
 12487                           plusw0	equ	0xFEB
 12488                           wreg	equ	0xFE8
 12489                           indf1	equ	0xFE7
 12490                           postdec1	equ	0xFE5
 12491                           fsr1h	equ	0xFE2
 12492                           fsr1l	equ	0xFE1
 12493                           indf2	equ	0xFDF
 12494                           postinc2	equ	0xFDE
 12495                           postdec2	equ	0xFDD
 12496                           plusw2	equ	0xFDB
 12497                           fsr2h	equ	0xFDA
 12498                           fsr2l	equ	0xFD9
 12499                           status	equ	0xFD8
 12500                           
 12501 ;; *************** function _SWSPI_Synth_send_bits *****************
 12502 ;; Defined at:
 12503 ;;		line 67 in file "SwSpiApp.c"
 12504 ;; Parameters:    Size  Location     Type
 12505 ;;  phrType         1    wreg     enum E1
 12506 ;;  data            4   36[COMRAM] unsigned long 
 12507 ;; Auto vars:     Size  Location     Type
 12508 ;;  phrType         1   37[BANK0 ] enum E1
 12509 ;;  bitArray       32    0[BANK0 ] unsigned char [32]
 12510 ;;  mask            4   32[BANK0 ] unsigned long 
 12511 ;;  count           1   36[BANK0 ] unsigned char 
 12512 ;; Return value:  Size  Location     Type
 12513 ;;                  1    wreg      void 
 12514 ;; Registers used:
 12515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12516 ;; Tracked objects:
 12517 ;;		On entry : 0/0
 12518 ;;		On exit  : 0/0
 12519 ;;		Unchanged: 0/0
 12520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12521 ;;      Params:         4       0       0       0       0       0       0
 12522 ;;      Locals:         0      38       0       0       0       0       0
 12523 ;;      Temps:          0       0       0       0       0       0       0
 12524 ;;      Totals:         4      38       0       0       0       0       0
 12525 ;;Total ram usage:       42 bytes
 12526 ;; Hardware stack levels used:    1
 12527 ;; Hardware stack levels required when called:    6
 12528 ;; This function calls:
 12529 ;;		_FillArray
 12530 ;;		_Make32bitsArray
 12531 ;;		_SwSpi_Clk_Pin
 12532 ;;		_SwSpi_Data_Pin
 12533 ;; This function is called by:
 12534 ;;		_SWSPI_send_word
 12535 ;; This function uses a non-reentrant model
 12536 ;;
 12537                           
 12538                           	psect	text70
 12539  002C34                     __ptext70:
 12540                           	opt stack 0
 12541  002C34                     _SWSPI_Synth_send_bits:
 12542                           	opt stack 20
 12543                           
 12544                           ;incstack = 0
 12545                           ;SWSPI_Synth_send_bits@phrType stored from wreg
 12546  002C34  0100               	movlb	0	; () banked
 12547  002C36  6F85               	movwf	SWSPI_Synth_send_bits@phrType& (0+255),b
 12548                           
 12549                           ;SwSpiApp.c: 69: uint8_t count;
 12550                           ;SwSpiApp.c: 70: uint32_t mask = 0x1;
 12551  002C38  0E01               	movlw	1
 12552  002C3A  0100               	movlb	0	; () banked
 12553  002C3C  6F80               	movwf	SWSPI_Synth_send_bits@mask& (0+255),b
 12554  002C3E  0E00               	movlw	0
 12555  002C40  6F81               	movwf	(SWSPI_Synth_send_bits@mask+1)& (0+255),b
 12556  002C42  0E00               	movlw	0
 12557  002C44  6F82               	movwf	(SWSPI_Synth_send_bits@mask+2)& (0+255),b
 12558  002C46  0E00               	movlw	0
 12559  002C48  6F83               	movwf	(SWSPI_Synth_send_bits@mask+3)& (0+255),b
 12560                           
 12561                           ; BSR set to: 0
 12562                           ;SwSpiApp.c: 72: bool bitArray[32];
 12563                           ;SwSpiApp.c: 73: FillArray(bitArray, sizeof(bitArray), 0x0);
 12564  002C4A  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 12565  002C4C  6E20               	movwf	FillArray@array,c
 12566  002C4E  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12567  002C50  6E21               	movwf	FillArray@array+1,c
 12568  002C52  0E00               	movlw	0
 12569  002C54  6E23               	movwf	FillArray@size+1,c
 12570  002C56  0E20               	movlw	32
 12571  002C58  6E22               	movwf	FillArray@size,c
 12572  002C5A  0E00               	movlw	0
 12573  002C5C  6E24               	movwf	FillArray@value,c
 12574  002C5E  EC15  F021         	call	_FillArray	;wreg free
 12575                           
 12576                           ;SwSpiApp.c: 75: Make32bitsArray(bitArray, data);
 12577  002C62  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 12578  002C64  6E18               	movwf	Make32bitsArray@array,c
 12579  002C66  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12580  002C68  6E19               	movwf	Make32bitsArray@array+1,c
 12581  002C6A  C025  F01A         	movff	SWSPI_Synth_send_bits@data,Make32bitsArray@data
 12582  002C6E  C026  F01B         	movff	SWSPI_Synth_send_bits@data+1,Make32bitsArray@data+1
 12583  002C72  C027  F01C         	movff	SWSPI_Synth_send_bits@data+2,Make32bitsArray@data+2
 12584  002C76  C028  F01D         	movff	SWSPI_Synth_send_bits@data+3,Make32bitsArray@data+3
 12585  002C7A  EC4E  F01C         	call	_Make32bitsArray	;wreg free
 12586                           
 12587                           ;SwSpiApp.c: 77: for (count = 0; count <= 31 ; count++)
 12588  002C7E  0E00               	movlw	0
 12589  002C80  0100               	movlb	0	; () banked
 12590  002C82  6F84               	movwf	SWSPI_Synth_send_bits@count& (0+255),b
 12591  002C84                     l7699:
 12592                           
 12593                           ; BSR set to: 0
 12594  002C84  0E1F               	movlw	31
 12595  002C86  6584               	cpfsgt	SWSPI_Synth_send_bits@count& (0+255),b
 12596  002C88  D001               	goto	l650
 12597  002C8A  D026               	goto	u7510
 12598  002C8C                     l650:
 12599                           
 12600                           ; BSR set to: 0
 12601                           ;SwSpiApp.c: 78: {
 12602                           ;SwSpiApp.c: 80: SwSpi_Clk_Pin(phrType, 0);
 12603                           
 12604                           ; BSR set to: 0
 12605  002C8C  0E00               	movlw	0
 12606  002C8E  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12607  002C90  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12608  002C92  ECD1  F01C         	call	_SwSpi_Clk_Pin
 12609                           
 12610                           ;SwSpiApp.c: 82: if (bitArray[count])
 12611  002C96  0100               	movlb	0	; () banked
 12612  002C98  5184               	movf	SWSPI_Synth_send_bits@count& (0+255),w,b
 12613  002C9A  0D01               	mullw	1
 12614  002C9C  0E60               	movlw	low SWSPI_Synth_send_bits@bitArray
 12615  002C9E  24F3               	addwf	prodl,w,c
 12616  002CA0  6ED9               	movwf	fsr2l,c
 12617  002CA2  0E00               	movlw	high SWSPI_Synth_send_bits@bitArray
 12618  002CA4  20F4               	addwfc	prodh,w,c
 12619  002CA6  6EDA               	movwf	fsr2h,c
 12620  002CA8  50DF               	movf	indf2,w,c
 12621  002CAA  B4D8               	btfsc	status,2,c
 12622  002CAC  D006               	goto	l652
 12623                           
 12624                           ; BSR set to: 0
 12625                           ;SwSpiApp.c: 83: {
 12626                           ;SwSpiApp.c: 84: SwSpi_Data_Pin(phrType, 1);
 12627  002CAE  0E01               	movlw	1
 12628  002CB0  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12629  002CB2  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12630  002CB4  ECA6  F01C         	call	_SwSpi_Data_Pin
 12631                           
 12632                           ;SwSpiApp.c: 85: }
 12633  002CB8  D006               	goto	l653
 12634  002CBA                     l652:
 12635                           
 12636                           ;SwSpiApp.c: 86: else
 12637                           ;SwSpiApp.c: 87: {
 12638                           ;SwSpiApp.c: 88: SwSpi_Data_Pin(phrType, 0);
 12639  002CBA  0E00               	movlw	0
 12640  002CBC  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12641  002CBE  0100               	movlb	0	; () banked
 12642  002CC0  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12643  002CC2  ECA6  F01C         	call	_SwSpi_Data_Pin
 12644  002CC6                     l653:
 12645                           
 12646                           ;SwSpiApp.c: 89: }
 12647                           ;SwSpiApp.c: 91: SwSpi_Clk_Pin(phrType, 1);
 12648  002CC6  0E01               	movlw	1
 12649  002CC8  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12650  002CCA  0100               	movlb	0	; () banked
 12651  002CCC  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12652  002CCE  ECD1  F01C         	call	_SwSpi_Clk_Pin
 12653  002CD2  0100               	movlb	0	; () banked
 12654  002CD4  2B84               	incf	SWSPI_Synth_send_bits@count& (0+255),f,b
 12655  002CD6  D7D6               	goto	l7699
 12656  002CD8                     u7510:
 12657                           
 12658                           ; BSR set to: 0
 12659                           ;SwSpiApp.c: 92: }
 12660                           ;SwSpiApp.c: 94: _delay((unsigned long)((50)*(8000000/4000000.0)));
 12661                           
 12662                           ; BSR set to: 0
 12663  002CD8  0E21               	movlw	33
 12664  002CDA                     u9137:
 12665  002CDA  2EE8               	decfsz	wreg,f,c
 12666  002CDC  D7FE               	bra	u9137
 12667  002CDE  F000               	nop	
 12668                           
 12669                           ;SwSpiApp.c: 95: SwSpi_Data_Pin(phrType, 0);
 12670  002CE0  0E00               	movlw	0
 12671  002CE2  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 12672  002CE4  0100               	movlb	0	; () banked
 12673  002CE6  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12674  002CE8  ECA6  F01C         	call	_SwSpi_Data_Pin
 12675                           
 12676                           ;SwSpiApp.c: 96: SwSpi_Clk_Pin(phrType, 0);
 12677  002CEC  0E00               	movlw	0
 12678  002CEE  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 12679  002CF0  0100               	movlb	0	; () banked
 12680  002CF2  5185               	movf	SWSPI_Synth_send_bits@phrType& (0+255),w,b
 12681  002CF4  ECD1  F01C         	call	_SwSpi_Clk_Pin
 12682  002CF8  0012               	return		;funcret
 12683  002CFA                     __end_of_SWSPI_Synth_send_bits:
 12684                           	opt stack 0
 12685                           tosu	equ	0xFFF
 12686                           tosh	equ	0xFFE
 12687                           tosl	equ	0xFFD
 12688                           pclath	equ	0xFFA
 12689                           tblptru	equ	0xFF8
 12690                           tblptrh	equ	0xFF7
 12691                           tblptrl	equ	0xFF6
 12692                           tablat	equ	0xFF5
 12693                           prodh	equ	0xFF4
 12694                           prodl	equ	0xFF3
 12695                           intcon	equ	0xFF2
 12696                           intcon2	equ	0xFF1
 12697                           postinc0	equ	0xFEE
 12698                           plusw0	equ	0xFEB
 12699                           wreg	equ	0xFE8
 12700                           indf1	equ	0xFE7
 12701                           postdec1	equ	0xFE5
 12702                           fsr1h	equ	0xFE2
 12703                           fsr1l	equ	0xFE1
 12704                           indf2	equ	0xFDF
 12705                           postinc2	equ	0xFDE
 12706                           postdec2	equ	0xFDD
 12707                           plusw2	equ	0xFDB
 12708                           fsr2h	equ	0xFDA
 12709                           fsr2l	equ	0xFD9
 12710                           status	equ	0xFD8
 12711                           
 12712 ;; *************** function _Make32bitsArray *****************
 12713 ;; Defined at:
 12714 ;;		line 113 in file "SystemCommon.c"
 12715 ;; Parameters:    Size  Location     Type
 12716 ;;  array           2   23[COMRAM] PTR unsigned char 
 12717 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), 
 12718 ;;  data            4   25[COMRAM] unsigned long 
 12719 ;; Auto vars:     Size  Location     Type
 12720 ;;  idx             2   31[COMRAM] int 
 12721 ;; Return value:  Size  Location     Type
 12722 ;;                  1    wreg      void 
 12723 ;; Registers used:
 12724 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12725 ;; Tracked objects:
 12726 ;;		On entry : 0/0
 12727 ;;		On exit  : 0/0
 12728 ;;		Unchanged: 0/0
 12729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12730 ;;      Params:         6       0       0       0       0       0       0
 12731 ;;      Locals:         2       0       0       0       0       0       0
 12732 ;;      Temps:          2       0       0       0       0       0       0
 12733 ;;      Totals:        10       0       0       0       0       0       0
 12734 ;;Total ram usage:       10 bytes
 12735 ;; Hardware stack levels used:    1
 12736 ;; Hardware stack levels required when called:    4
 12737 ;; This function calls:
 12738 ;;		Nothing
 12739 ;; This function is called by:
 12740 ;;		_SWSPI_Synth_send_bits
 12741 ;; This function uses a non-reentrant model
 12742 ;;
 12743                           
 12744                           	psect	text71
 12745  00389C                     __ptext71:
 12746                           	opt stack 0
 12747  00389C                     _Make32bitsArray:
 12748                           	opt stack 21
 12749                           
 12750                           ;SystemCommon.c: 115: for(int idx = 0; idx <= 32; idx++)
 12751                           
 12752                           ;incstack = 0
 12753  00389C  0E00               	movlw	0
 12754  00389E  6E21               	movwf	Make32bitsArray@idx+1,c
 12755  0038A0  0E00               	movlw	0
 12756  0038A2  6E20               	movwf	Make32bitsArray@idx,c
 12757  0038A4                     l7487:
 12758  0038A4  BE21               	btfsc	Make32bitsArray@idx+1,7,c
 12759  0038A6  D006               	goto	l1429
 12760  0038A8  5021               	movf	Make32bitsArray@idx+1,w,c
 12761  0038AA  E123               	bnz	l1431
 12762  0038AC  0E21               	movlw	33
 12763  0038AE  5C20               	subwf	Make32bitsArray@idx,w,c
 12764  0038B0  B0D8               	btfsc	status,0,c
 12765  0038B2  0012               	return	
 12766  0038B4                     l1429:
 12767                           
 12768                           ;SystemCommon.c: 116: {
 12769                           ;SystemCommon.c: 117: array[32 - idx - 1] = data % 2;
 12770  0038B4  0E01               	movlw	1
 12771  0038B6  2420               	addwf	Make32bitsArray@idx,w,c
 12772  0038B8  6E1E               	movwf	??_Make32bitsArray& (0+255),c
 12773  0038BA  0E00               	movlw	0
 12774  0038BC  2021               	addwfc	Make32bitsArray@idx+1,w,c
 12775  0038BE  6E1F               	movwf	(??_Make32bitsArray+1)& (0+255),c
 12776  0038C0  1E1E               	comf	??_Make32bitsArray,f,c
 12777  0038C2  1E1F               	comf	??_Make32bitsArray+1,f,c
 12778  0038C4  4A1E               	infsnz	??_Make32bitsArray,f,c
 12779  0038C6  2A1F               	incf	??_Make32bitsArray+1,f,c
 12780  0038C8  0E20               	movlw	32
 12781  0038CA  261E               	addwf	??_Make32bitsArray,f,c
 12782  0038CC  0E00               	movlw	0
 12783  0038CE  221F               	addwfc	??_Make32bitsArray+1,f,c
 12784  0038D0  501E               	movf	??_Make32bitsArray,w,c
 12785  0038D2  2418               	addwf	Make32bitsArray@array,w,c
 12786  0038D4  6ED9               	movwf	fsr2l,c
 12787  0038D6  501F               	movf	??_Make32bitsArray+1,w,c
 12788  0038D8  2019               	addwfc	Make32bitsArray@array+1,w,c
 12789  0038DA  6EDA               	movwf	fsr2h,c
 12790  0038DC  501A               	movf	Make32bitsArray@data,w,c
 12791  0038DE  0B01               	andlw	1
 12792  0038E0  6EDF               	movwf	indf2,c
 12793                           
 12794                           ;SystemCommon.c: 118: data /= 2;
 12795  0038E2  90D8               	bcf	status,0,c
 12796  0038E4  321D               	rrcf	Make32bitsArray@data+3,f,c
 12797  0038E6  321C               	rrcf	Make32bitsArray@data+2,f,c
 12798  0038E8  321B               	rrcf	Make32bitsArray@data+1,f,c
 12799  0038EA  321A               	rrcf	Make32bitsArray@data,f,c
 12800  0038EC  4A20               	infsnz	Make32bitsArray@idx,f,c
 12801  0038EE  2A21               	incf	Make32bitsArray@idx+1,f,c
 12802  0038F0  D7D9               	goto	l7487
 12803  0038F2                     l1431:
 12804  0038F2  0012               	return		;funcret
 12805  0038F4                     __end_of_Make32bitsArray:
 12806                           	opt stack 0
 12807                           tosu	equ	0xFFF
 12808                           tosh	equ	0xFFE
 12809                           tosl	equ	0xFFD
 12810                           pclath	equ	0xFFA
 12811                           tblptru	equ	0xFF8
 12812                           tblptrh	equ	0xFF7
 12813                           tblptrl	equ	0xFF6
 12814                           tablat	equ	0xFF5
 12815                           prodh	equ	0xFF4
 12816                           prodl	equ	0xFF3
 12817                           intcon	equ	0xFF2
 12818                           intcon2	equ	0xFF1
 12819                           postinc0	equ	0xFEE
 12820                           plusw0	equ	0xFEB
 12821                           wreg	equ	0xFE8
 12822                           indf1	equ	0xFE7
 12823                           postdec1	equ	0xFE5
 12824                           fsr1h	equ	0xFE2
 12825                           fsr1l	equ	0xFE1
 12826                           indf2	equ	0xFDF
 12827                           postinc2	equ	0xFDE
 12828                           postdec2	equ	0xFDD
 12829                           plusw2	equ	0xFDB
 12830                           fsr2h	equ	0xFDA
 12831                           fsr2l	equ	0xFD9
 12832                           status	equ	0xFD8
 12833                           
 12834 ;; *************** function _FillArray *****************
 12835 ;; Defined at:
 12836 ;;		line 29 in file "SystemCommon.c"
 12837 ;; Parameters:    Size  Location     Type
 12838 ;;  array           2   31[COMRAM] PTR unsigned char 
 12839 ;;		 -> SWSPI_Synth_send_bits@bitArray(32), synthLdTxArray(12), synthLdRxArray(12), 
 12840 ;;  size            2   33[COMRAM] int 
 12841 ;;  value           1   35[COMRAM] unsigned char 
 12842 ;; Auto vars:     Size  Location     Type
 12843 ;;		None
 12844 ;; Return value:  Size  Location     Type
 12845 ;;                  1    wreg      void 
 12846 ;; Registers used:
 12847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12848 ;; Tracked objects:
 12849 ;;		On entry : 0/0
 12850 ;;		On exit  : 0/0
 12851 ;;		Unchanged: 0/0
 12852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12853 ;;      Params:         5       0       0       0       0       0       0
 12854 ;;      Locals:         0       0       0       0       0       0       0
 12855 ;;      Temps:          0       0       0       0       0       0       0
 12856 ;;      Totals:         5       0       0       0       0       0       0
 12857 ;;Total ram usage:        5 bytes
 12858 ;; Hardware stack levels used:    1
 12859 ;; Hardware stack levels required when called:    5
 12860 ;; This function calls:
 12861 ;;		_memset
 12862 ;; This function is called by:
 12863 ;;		_PLLInitialize
 12864 ;;		_SWSPI_Synth_send_bits
 12865 ;; This function uses a non-reentrant model
 12866 ;;
 12867                           
 12868                           	psect	text72
 12869  00422A                     __ptext72:
 12870                           	opt stack 0
 12871  00422A                     _FillArray:
 12872                           	opt stack 20
 12873                           
 12874                           ;SystemCommon.c: 31: memset(array, value, size);
 12875                           
 12876                           ;incstack = 0
 12877  00422A  C020  F018         	movff	FillArray@array,memset@p1
 12878  00422E  C021  F019         	movff	FillArray@array+1,memset@p1+1
 12879  004232  C024  F01A         	movff	FillArray@value,memset@c
 12880  004236  6A1B               	clrf	memset@c+1,c
 12881  004238  C022  F01C         	movff	FillArray@size,memset@n
 12882  00423C  C023  F01D         	movff	FillArray@size+1,memset@n+1
 12883  004240  EC0E  F020         	call	_memset	;wreg free
 12884  004244  0012               	return		;funcret
 12885  004246                     __end_of_FillArray:
 12886                           	opt stack 0
 12887                           tosu	equ	0xFFF
 12888                           tosh	equ	0xFFE
 12889                           tosl	equ	0xFFD
 12890                           pclath	equ	0xFFA
 12891                           tblptru	equ	0xFF8
 12892                           tblptrh	equ	0xFF7
 12893                           tblptrl	equ	0xFF6
 12894                           tablat	equ	0xFF5
 12895                           prodh	equ	0xFF4
 12896                           prodl	equ	0xFF3
 12897                           intcon	equ	0xFF2
 12898                           intcon2	equ	0xFF1
 12899                           postinc0	equ	0xFEE
 12900                           plusw0	equ	0xFEB
 12901                           wreg	equ	0xFE8
 12902                           indf1	equ	0xFE7
 12903                           postdec1	equ	0xFE5
 12904                           fsr1h	equ	0xFE2
 12905                           fsr1l	equ	0xFE1
 12906                           indf2	equ	0xFDF
 12907                           postinc2	equ	0xFDE
 12908                           postdec2	equ	0xFDD
 12909                           plusw2	equ	0xFDB
 12910                           fsr2h	equ	0xFDA
 12911                           fsr2l	equ	0xFD9
 12912                           status	equ	0xFD8
 12913                           
 12914 ;; *************** function _memset *****************
 12915 ;; Defined at:
 12916 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
 12917 ;; Parameters:    Size  Location     Type
 12918 ;;  p1              2   23[COMRAM] PTR void 
 12919 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@
      +TxMsg(22), 
 12920 ;;		 -> SynthReadData@eepromDataArray(16), DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), 
 12921 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 12922 ;;		 -> synthLdTxArray(12), synthLdRxArray(12), 
 12923 ;;  c               2   25[COMRAM] int 
 12924 ;;  n               2   27[COMRAM] unsigned int 
 12925 ;; Auto vars:     Size  Location     Type
 12926 ;;  p               2   29[COMRAM] PTR unsigned char 
 12927 ;;		 -> GetMcuFwVersion@TxMsg(18), GetIntFromUartData@dataRegArr(10), SWSPI_Synth_send_bits@bitArray(32), SynthReadData@
      +TxMsg(22), 
 12928 ;;		 -> SynthReadData@eepromDataArray(16), DacReadValue@TxMsg(7), FlashReadCondition@TxMsg(9), FlashReadUart@TxMsg(69), 
 12929 ;;		 -> sampleArray(64), SendAckMessage@TxMsg(6), rxMsgData(20), rxMsgQueue(20), 
 12930 ;;		 -> synthLdTxArray(12), synthLdRxArray(12), 
 12931 ;; Return value:  Size  Location     Type
 12932 ;;                  2   23[COMRAM] PTR void 
 12933 ;; Registers used:
 12934 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12935 ;; Tracked objects:
 12936 ;;		On entry : 0/0
 12937 ;;		On exit  : 0/0
 12938 ;;		Unchanged: 0/0
 12939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12940 ;;      Params:         6       0       0       0       0       0       0
 12941 ;;      Locals:         2       0       0       0       0       0       0
 12942 ;;      Temps:          0       0       0       0       0       0       0
 12943 ;;      Totals:         8       0       0       0       0       0       0
 12944 ;;Total ram usage:        8 bytes
 12945 ;; Hardware stack levels used:    1
 12946 ;; Hardware stack levels required when called:    4
 12947 ;; This function calls:
 12948 ;;		Nothing
 12949 ;; This function is called by:
 12950 ;;		_ZeroArray
 12951 ;;		_FillArray
 12952 ;; This function uses a non-reentrant model
 12953 ;;
 12954                           
 12955                           	psect	text73
 12956  00401C                     __ptext73:
 12957                           	opt stack 0
 12958  00401C                     _memset:
 12959                           	opt stack 24
 12960                           
 12961                           ;incstack = 0
 12962  00401C  C018  F01E         	movff	memset@p1,memset@p
 12963  004020  C019  F01F         	movff	memset@p1+1,memset@p+1
 12964  004024  D008               	goto	l2024
 12965  004026                     l7269:
 12966  004026  C01E  FFD9         	movff	memset@p,fsr2l
 12967  00402A  C01F  FFDA         	movff	memset@p+1,fsr2h
 12968  00402E  C01A  FFDF         	movff	memset@c,indf2
 12969  004032  4A1E               	infsnz	memset@p,f,c
 12970  004034  2A1F               	incf	memset@p+1,f,c
 12971  004036                     l2024:
 12972  004036  061C               	decf	memset@n,f,c
 12973  004038  A0D8               	btfss	status,0,c
 12974  00403A  061D               	decf	memset@n+1,f,c
 12975  00403C  281C               	incf	memset@n,w,c
 12976  00403E  E1F3               	bnz	l7269
 12977  004040  281D               	incf	memset@n+1,w,c
 12978  004042  B4D8               	btfsc	status,2,c
 12979  004044  0012               	return	
 12980  004046  D7EF               	goto	l2025
 12981  004048                     __end_of_memset:
 12982                           	opt stack 0
 12983                           tosu	equ	0xFFF
 12984                           tosh	equ	0xFFE
 12985                           tosl	equ	0xFFD
 12986                           pclath	equ	0xFFA
 12987                           tblptru	equ	0xFF8
 12988                           tblptrh	equ	0xFF7
 12989                           tblptrl	equ	0xFF6
 12990                           tablat	equ	0xFF5
 12991                           prodh	equ	0xFF4
 12992                           prodl	equ	0xFF3
 12993                           intcon	equ	0xFF2
 12994                           intcon2	equ	0xFF1
 12995                           postinc0	equ	0xFEE
 12996                           plusw0	equ	0xFEB
 12997                           wreg	equ	0xFE8
 12998                           indf1	equ	0xFE7
 12999                           postdec1	equ	0xFE5
 13000                           fsr1h	equ	0xFE2
 13001                           fsr1l	equ	0xFE1
 13002                           indf2	equ	0xFDF
 13003                           postinc2	equ	0xFDE
 13004                           postdec2	equ	0xFDD
 13005                           plusw2	equ	0xFDB
 13006                           fsr2h	equ	0xFDA
 13007                           fsr2l	equ	0xFD9
 13008                           status	equ	0xFD8
 13009                           
 13010 ;; *************** function _SWSPI_DAC_send_bits *****************
 13011 ;; Defined at:
 13012 ;;		line 43 in file "SwSpiApp.c"
 13013 ;; Parameters:    Size  Location     Type
 13014 ;;  phrType         1    wreg     enum E1
 13015 ;;  data            1   25[COMRAM] unsigned char 
 13016 ;; Auto vars:     Size  Location     Type
 13017 ;;  phrType         1   27[COMRAM] enum E1
 13018 ;;  count           1   26[COMRAM] unsigned char 
 13019 ;; Return value:  Size  Location     Type
 13020 ;;                  1    wreg      void 
 13021 ;; Registers used:
 13022 ;;		wreg, status,2, status,0, cstack
 13023 ;; Tracked objects:
 13024 ;;		On entry : 0/0
 13025 ;;		On exit  : 0/0
 13026 ;;		Unchanged: 0/0
 13027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13028 ;;      Params:         1       0       0       0       0       0       0
 13029 ;;      Locals:         2       0       0       0       0       0       0
 13030 ;;      Temps:          0       0       0       0       0       0       0
 13031 ;;      Totals:         3       0       0       0       0       0       0
 13032 ;;Total ram usage:        3 bytes
 13033 ;; Hardware stack levels used:    1
 13034 ;; Hardware stack levels required when called:    5
 13035 ;; This function calls:
 13036 ;;		_SwSpi_Clk_Pin
 13037 ;;		_SwSpi_Data_Pin
 13038 ;; This function is called by:
 13039 ;;		_SWSPI_send_word
 13040 ;; This function uses a non-reentrant model
 13041 ;;
 13042                           
 13043                           	psect	text74
 13044  0038F4                     __ptext74:
 13045                           	opt stack 0
 13046  0038F4                     _SWSPI_DAC_send_bits:
 13047                           	opt stack 21
 13048                           
 13049                           ;incstack = 0
 13050                           ;SWSPI_DAC_send_bits@phrType stored from wreg
 13051  0038F4  6E1C               	movwf	SWSPI_DAC_send_bits@phrType,c
 13052                           
 13053                           ;SwSpiApp.c: 45: uint8_t count;
 13054                           ;SwSpiApp.c: 46: for (count = 8; count ; count--, data <<= 1)
 13055  0038F6  0E08               	movlw	8
 13056  0038F8  6E1B               	movwf	SWSPI_DAC_send_bits@count,c
 13057  0038FA  D01A               	goto	l642
 13058  0038FC                     
 13059                           ;SwSpiApp.c: 47: {
 13060                           ;SwSpiApp.c: 48: SwSpi_Clk_Pin(phrType, 1);
 13061  0038FC  0E01               	movlw	1
 13062  0038FE  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13063  003900  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13064  003902  ECD1  F01C         	call	_SwSpi_Clk_Pin
 13065                           
 13066                           ;SwSpiApp.c: 50: if (data & 0X80)
 13067  003906  AE1A               	btfss	SWSPI_DAC_send_bits@data,7,c
 13068  003908  D006               	goto	l644
 13069                           
 13070                           ;SwSpiApp.c: 51: {
 13071                           ;SwSpiApp.c: 53: SwSpi_Data_Pin(phrType, 1);
 13072  00390A  0E01               	movlw	1
 13073  00390C  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13074  00390E  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13075  003910  ECA6  F01C         	call	_SwSpi_Data_Pin
 13076                           
 13077                           ;SwSpiApp.c: 54: }
 13078  003914  D005               	goto	l645
 13079  003916                     l644:
 13080                           
 13081                           ;SwSpiApp.c: 55: else
 13082                           ;SwSpiApp.c: 56: {
 13083                           ;SwSpiApp.c: 57: SwSpi_Data_Pin(phrType, 0);
 13084  003916  0E00               	movlw	0
 13085  003918  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13086  00391A  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13087  00391C  ECA6  F01C         	call	_SwSpi_Data_Pin
 13088  003920                     l645:
 13089                           
 13090                           ;SwSpiApp.c: 58: }
 13091                           ;SwSpiApp.c: 60: SwSpi_Clk_Pin(phrType, 0);
 13092  003920  0E00               	movlw	0
 13093  003922  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13094  003924  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13095  003926  ECD1  F01C         	call	_SwSpi_Clk_Pin
 13096  00392A  061B               	decf	SWSPI_DAC_send_bits@count,f,c
 13097  00392C  90D8               	bcf	status,0,c
 13098  00392E  361A               	rlcf	SWSPI_DAC_send_bits@data,f,c
 13099  003930                     l642:
 13100  003930  501B               	movf	SWSPI_DAC_send_bits@count,w,c
 13101  003932  A4D8               	btfss	status,2,c
 13102  003934  D7E3               	goto	l643
 13103                           
 13104                           ;SwSpiApp.c: 61: }
 13105                           ;SwSpiApp.c: 63: SwSpi_Data_Pin(phrType, 0);
 13106  003936  0E00               	movlw	0
 13107  003938  6E18               	movwf	SwSpi_Data_Pin@cPinMode,c
 13108  00393A  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13109  00393C  ECA6  F01C         	call	_SwSpi_Data_Pin
 13110                           
 13111                           ;SwSpiApp.c: 64: SwSpi_Clk_Pin(phrType, 0);
 13112  003940  0E00               	movlw	0
 13113  003942  6E18               	movwf	SwSpi_Clk_Pin@cPinMode,c
 13114  003944  501C               	movf	SWSPI_DAC_send_bits@phrType,w,c
 13115  003946  ECD1  F01C         	call	_SwSpi_Clk_Pin
 13116  00394A  0012               	return		;funcret
 13117  00394C                     __end_of_SWSPI_DAC_send_bits:
 13118                           	opt stack 0
 13119                           tosu	equ	0xFFF
 13120                           tosh	equ	0xFFE
 13121                           tosl	equ	0xFFD
 13122                           pclath	equ	0xFFA
 13123                           tblptru	equ	0xFF8
 13124                           tblptrh	equ	0xFF7
 13125                           tblptrl	equ	0xFF6
 13126                           tablat	equ	0xFF5
 13127                           prodh	equ	0xFF4
 13128                           prodl	equ	0xFF3
 13129                           intcon	equ	0xFF2
 13130                           intcon2	equ	0xFF1
 13131                           postinc0	equ	0xFEE
 13132                           plusw0	equ	0xFEB
 13133                           wreg	equ	0xFE8
 13134                           indf1	equ	0xFE7
 13135                           postdec1	equ	0xFE5
 13136                           fsr1h	equ	0xFE2
 13137                           fsr1l	equ	0xFE1
 13138                           indf2	equ	0xFDF
 13139                           postinc2	equ	0xFDE
 13140                           postdec2	equ	0xFDD
 13141                           plusw2	equ	0xFDB
 13142                           fsr2h	equ	0xFDA
 13143                           fsr2l	equ	0xFD9
 13144                           status	equ	0xFD8
 13145                           
 13146 ;; *************** function _SwSpi_Data_Pin *****************
 13147 ;; Defined at:
 13148 ;;		line 103 in file "SwSpiApp.c"
 13149 ;; Parameters:    Size  Location     Type
 13150 ;;  phrType         1    wreg     enum E1
 13151 ;;  cPinMode        1   23[COMRAM] unsigned char 
 13152 ;; Auto vars:     Size  Location     Type
 13153 ;;  phrType         1   24[COMRAM] enum E1
 13154 ;; Return value:  Size  Location     Type
 13155 ;;                  1    wreg      void 
 13156 ;; Registers used:
 13157 ;;		wreg, status,2, status,0
 13158 ;; Tracked objects:
 13159 ;;		On entry : 0/0
 13160 ;;		On exit  : 0/0
 13161 ;;		Unchanged: 0/0
 13162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13163 ;;      Params:         1       0       0       0       0       0       0
 13164 ;;      Locals:         1       0       0       0       0       0       0
 13165 ;;      Temps:          0       0       0       0       0       0       0
 13166 ;;      Totals:         2       0       0       0       0       0       0
 13167 ;;Total ram usage:        2 bytes
 13168 ;; Hardware stack levels used:    1
 13169 ;; Hardware stack levels required when called:    4
 13170 ;; This function calls:
 13171 ;;		Nothing
 13172 ;; This function is called by:
 13173 ;;		_SWSPI_DAC_send_bits
 13174 ;;		_SWSPI_Synth_send_bits
 13175 ;; This function uses a non-reentrant model
 13176 ;;
 13177                           
 13178                           	psect	text75
 13179  00394C                     __ptext75:
 13180                           	opt stack 0
 13181  00394C                     _SwSpi_Data_Pin:
 13182                           	opt stack 21
 13183                           
 13184                           ;incstack = 0
 13185                           ;SwSpi_Data_Pin@phrType stored from wreg
 13186  00394C  6E19               	movwf	SwSpi_Data_Pin@phrType,c
 13187                           
 13188                           ;SwSpiApp.c: 105: switch(phrType)
 13189  00394E  D01E               	goto	l657
 13190  003950                     
 13191                           ;SwSpiApp.c: 108: if(cPinMode == 1)
 13192  003950  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 13193  003952  A4D8               	btfss	status,2,c
 13194  003954  D002               	goto	l659
 13195                           
 13196                           ;SwSpiApp.c: 109: {
 13197                           ;SwSpiApp.c: 110: do { LATDbits.LATD0 = 1; } while(0);
 13198  003956  808C               	bsf	3980,0,c	;volatile
 13199                           
 13200                           ;SwSpiApp.c: 111: }
 13201  003958  0012               	return	
 13202  00395A                     l659:
 13203                           
 13204                           ;SwSpiApp.c: 112: else if (cPinMode == 0)
 13205  00395A  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 13206  00395C  A4D8               	btfss	status,2,c
 13207  00395E  0012               	return	
 13208                           
 13209                           ;SwSpiApp.c: 113: {
 13210                           ;SwSpiApp.c: 114: do { LATDbits.LATD0 = 0; } while(0);
 13211  003960  908C               	bcf	3980,0,c	;volatile
 13212                           
 13213                           ;SwSpiApp.c: 115: }
 13214                           ;SwSpiApp.c: 116: break;
 13215  003962  0012               	return	
 13216  003964                     
 13217                           ;SwSpiApp.c: 119: if(cPinMode == 1)
 13218  003964  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 13219  003966  A4D8               	btfss	status,2,c
 13220  003968  D002               	goto	l668
 13221                           
 13222                           ;SwSpiApp.c: 120: {
 13223                           ;SwSpiApp.c: 121: do { LATCbits.LATC5 = 1; } while(0);
 13224  00396A  8A8B               	bsf	3979,5,c	;volatile
 13225                           
 13226                           ;SwSpiApp.c: 122: }
 13227  00396C  0012               	return	
 13228  00396E                     l668:
 13229                           
 13230                           ;SwSpiApp.c: 123: else if (cPinMode == 0)
 13231  00396E  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 13232  003970  A4D8               	btfss	status,2,c
 13233  003972  0012               	return	
 13234                           
 13235                           ;SwSpiApp.c: 124: {
 13236                           ;SwSpiApp.c: 125: do { LATCbits.LATC5 = 0; } while(0);
 13237  003974  9A8B               	bcf	3979,5,c	;volatile
 13238                           
 13239                           ;SwSpiApp.c: 126: }
 13240                           ;SwSpiApp.c: 127: break;
 13241  003976  0012               	return	
 13242  003978                     
 13243                           ;SwSpiApp.c: 130: if(cPinMode == 1)
 13244  003978  0418               	decf	SwSpi_Data_Pin@cPinMode,w,c
 13245  00397A  A4D8               	btfss	status,2,c
 13246  00397C  D002               	goto	l676
 13247                           
 13248                           ;SwSpiApp.c: 131: {
 13249                           ;SwSpiApp.c: 132: do { LATAbits.LATA4 = 1; } while(0);
 13250  00397E  8889               	bsf	3977,4,c	;volatile
 13251                           
 13252                           ;SwSpiApp.c: 133: }
 13253  003980  0012               	return	
 13254  003982                     l676:
 13255                           
 13256                           ;SwSpiApp.c: 134: else if (cPinMode == 0)
 13257  003982  5018               	movf	SwSpi_Data_Pin@cPinMode,w,c
 13258  003984  A4D8               	btfss	status,2,c
 13259  003986  0012               	return	
 13260                           
 13261                           ;SwSpiApp.c: 135: {
 13262                           ;SwSpiApp.c: 136: do { LATAbits.LATA4 = 0; } while(0);
 13263  003988  9889               	bcf	3977,4,c	;volatile
 13264                           
 13265                           ;SwSpiApp.c: 139: }
 13266                           
 13267                           ;SwSpiApp.c: 137: }
 13268                           ;SwSpiApp.c: 138: break;
 13269  00398A  0012               	return	
 13270  00398C                     l657:
 13271  00398C  5019               	movf	SwSpi_Data_Pin@phrType,w,c
 13272                           
 13273                           ; Switch size 1, requested type "space"
 13274                           ; Number of cases is 3, Range of values is 0 to 2
 13275                           ; switch strategies available:
 13276                           ; Name         Instructions Cycles
 13277                           ; simple_byte           10     6 (average)
 13278                           ;	Chosen strategy is simple_byte
 13279  00398E  0A00               	xorlw	0	; case 0
 13280  003990  B4D8               	btfsc	status,2,c
 13281  003992  D7DE               	goto	l658
 13282  003994  0A01               	xorlw	1	; case 1
 13283  003996  B4D8               	btfsc	status,2,c
 13284  003998  D7E5               	goto	l667
 13285  00399A  0A03               	xorlw	3	; case 2
 13286  00399C  A4D8               	btfss	status,2,c
 13287  00399E  0012               	return	
 13288  0039A0  D7EB               	goto	l675
 13289  0039A2                     __end_of_SwSpi_Data_Pin:
 13290                           	opt stack 0
 13291                           tosu	equ	0xFFF
 13292                           tosh	equ	0xFFE
 13293                           tosl	equ	0xFFD
 13294                           pclath	equ	0xFFA
 13295                           tblptru	equ	0xFF8
 13296                           tblptrh	equ	0xFF7
 13297                           tblptrl	equ	0xFF6
 13298                           tablat	equ	0xFF5
 13299                           prodh	equ	0xFF4
 13300                           prodl	equ	0xFF3
 13301                           intcon	equ	0xFF2
 13302                           intcon2	equ	0xFF1
 13303                           postinc0	equ	0xFEE
 13304                           plusw0	equ	0xFEB
 13305                           wreg	equ	0xFE8
 13306                           indf1	equ	0xFE7
 13307                           postdec1	equ	0xFE5
 13308                           fsr1h	equ	0xFE2
 13309                           fsr1l	equ	0xFE1
 13310                           indf2	equ	0xFDF
 13311                           postinc2	equ	0xFDE
 13312                           postdec2	equ	0xFDD
 13313                           plusw2	equ	0xFDB
 13314                           fsr2h	equ	0xFDA
 13315                           fsr2l	equ	0xFD9
 13316                           status	equ	0xFD8
 13317                           
 13318 ;; *************** function _SwSpi_Clk_Pin *****************
 13319 ;; Defined at:
 13320 ;;		line 142 in file "SwSpiApp.c"
 13321 ;; Parameters:    Size  Location     Type
 13322 ;;  phrType         1    wreg     enum E1
 13323 ;;  cPinMode        1   23[COMRAM] unsigned char 
 13324 ;; Auto vars:     Size  Location     Type
 13325 ;;  phrType         1   24[COMRAM] enum E1
 13326 ;; Return value:  Size  Location     Type
 13327 ;;                  1    wreg      void 
 13328 ;; Registers used:
 13329 ;;		wreg, status,2, status,0
 13330 ;; Tracked objects:
 13331 ;;		On entry : 0/0
 13332 ;;		On exit  : 0/0
 13333 ;;		Unchanged: 0/0
 13334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13335 ;;      Params:         1       0       0       0       0       0       0
 13336 ;;      Locals:         1       0       0       0       0       0       0
 13337 ;;      Temps:          0       0       0       0       0       0       0
 13338 ;;      Totals:         2       0       0       0       0       0       0
 13339 ;;Total ram usage:        2 bytes
 13340 ;; Hardware stack levels used:    1
 13341 ;; Hardware stack levels required when called:    4
 13342 ;; This function calls:
 13343 ;;		Nothing
 13344 ;; This function is called by:
 13345 ;;		_SWSPI_DAC_send_bits
 13346 ;;		_SWSPI_Synth_send_bits
 13347 ;;		_SwSpi_Synth_Toggle_Clock
 13348 ;; This function uses a non-reentrant model
 13349 ;;
 13350                           
 13351                           	psect	text76
 13352  0039A2                     __ptext76:
 13353                           	opt stack 0
 13354  0039A2                     _SwSpi_Clk_Pin:
 13355                           	opt stack 21
 13356                           
 13357                           ;incstack = 0
 13358                           ;SwSpi_Clk_Pin@phrType stored from wreg
 13359  0039A2  6E19               	movwf	SwSpi_Clk_Pin@phrType,c
 13360                           
 13361                           ;SwSpiApp.c: 144: switch(phrType)
 13362  0039A4  D01E               	goto	l686
 13363  0039A6                     
 13364                           ;SwSpiApp.c: 147: if(cPinMode == 1)
 13365  0039A6  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 13366  0039A8  A4D8               	btfss	status,2,c
 13367  0039AA  D002               	goto	l688
 13368                           
 13369                           ;SwSpiApp.c: 148: {
 13370                           ;SwSpiApp.c: 149: do { LATCbits.LATC3 = 1; } while(0);
 13371  0039AC  868B               	bsf	3979,3,c	;volatile
 13372                           
 13373                           ;SwSpiApp.c: 150: }
 13374  0039AE  0012               	return	
 13375  0039B0                     l688:
 13376                           
 13377                           ;SwSpiApp.c: 151: else if (cPinMode == 0)
 13378  0039B0  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 13379  0039B2  A4D8               	btfss	status,2,c
 13380  0039B4  0012               	return	
 13381                           
 13382                           ;SwSpiApp.c: 152: {
 13383                           ;SwSpiApp.c: 153: do { LATCbits.LATC3 = 0; } while(0);
 13384  0039B6  968B               	bcf	3979,3,c	;volatile
 13385                           
 13386                           ;SwSpiApp.c: 154: }
 13387                           ;SwSpiApp.c: 155: break;
 13388  0039B8  0012               	return	
 13389  0039BA                     
 13390                           ;SwSpiApp.c: 158: if(cPinMode == 1)
 13391  0039BA  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 13392  0039BC  A4D8               	btfss	status,2,c
 13393  0039BE  D002               	goto	l697
 13394                           
 13395                           ;SwSpiApp.c: 159: {
 13396                           ;SwSpiApp.c: 160: do { LATCbits.LATC4 = 1; } while(0);
 13397  0039C0  888B               	bsf	3979,4,c	;volatile
 13398                           
 13399                           ;SwSpiApp.c: 161: }
 13400  0039C2  0012               	return	
 13401  0039C4                     l697:
 13402                           
 13403                           ;SwSpiApp.c: 162: else if (cPinMode == 0)
 13404  0039C4  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 13405  0039C6  A4D8               	btfss	status,2,c
 13406  0039C8  0012               	return	
 13407                           
 13408                           ;SwSpiApp.c: 163: {
 13409                           ;SwSpiApp.c: 164: do { LATCbits.LATC4 = 0; } while(0);
 13410  0039CA  988B               	bcf	3979,4,c	;volatile
 13411                           
 13412                           ;SwSpiApp.c: 165: }
 13413                           ;SwSpiApp.c: 167: break;
 13414  0039CC  0012               	return	
 13415  0039CE                     
 13416                           ;SwSpiApp.c: 170: if(cPinMode == 1)
 13417  0039CE  0418               	decf	SwSpi_Clk_Pin@cPinMode,w,c
 13418  0039D0  A4D8               	btfss	status,2,c
 13419  0039D2  D002               	goto	l705
 13420                           
 13421                           ;SwSpiApp.c: 171: {
 13422                           ;SwSpiApp.c: 172: do { LATAbits.LATA3 = 1; } while(0);
 13423  0039D4  8689               	bsf	3977,3,c	;volatile
 13424                           
 13425                           ;SwSpiApp.c: 173: }
 13426  0039D6  0012               	return	
 13427  0039D8                     l705:
 13428                           
 13429                           ;SwSpiApp.c: 174: else if (cPinMode == 0)
 13430  0039D8  5018               	movf	SwSpi_Clk_Pin@cPinMode,w,c
 13431  0039DA  A4D8               	btfss	status,2,c
 13432  0039DC  0012               	return	
 13433                           
 13434                           ;SwSpiApp.c: 175: {
 13435                           ;SwSpiApp.c: 176: do { LATAbits.LATA3 = 0; } while(0);
 13436  0039DE  9689               	bcf	3977,3,c	;volatile
 13437                           
 13438                           ;SwSpiApp.c: 179: }
 13439                           
 13440                           ;SwSpiApp.c: 177: }
 13441                           ;SwSpiApp.c: 178: break;
 13442  0039E0  0012               	return	
 13443  0039E2                     l686:
 13444  0039E2  5019               	movf	SwSpi_Clk_Pin@phrType,w,c
 13445                           
 13446                           ; Switch size 1, requested type "space"
 13447                           ; Number of cases is 3, Range of values is 0 to 2
 13448                           ; switch strategies available:
 13449                           ; Name         Instructions Cycles
 13450                           ; simple_byte           10     6 (average)
 13451                           ;	Chosen strategy is simple_byte
 13452  0039E4  0A00               	xorlw	0	; case 0
 13453  0039E6  B4D8               	btfsc	status,2,c
 13454  0039E8  D7DE               	goto	l687
 13455  0039EA  0A01               	xorlw	1	; case 1
 13456  0039EC  B4D8               	btfsc	status,2,c
 13457  0039EE  D7E5               	goto	l696
 13458  0039F0  0A03               	xorlw	3	; case 2
 13459  0039F2  A4D8               	btfss	status,2,c
 13460  0039F4  0012               	return	
 13461  0039F6  D7EB               	goto	l704
 13462  0039F8                     __end_of_SwSpi_Clk_Pin:
 13463                           	opt stack 0
 13464                           tosu	equ	0xFFF
 13465                           tosh	equ	0xFFE
 13466                           tosl	equ	0xFFD
 13467                           pclath	equ	0xFFA
 13468                           tblptru	equ	0xFF8
 13469                           tblptrh	equ	0xFF7
 13470                           tblptrl	equ	0xFF6
 13471                           tablat	equ	0xFF5
 13472                           prodh	equ	0xFF4
 13473                           prodl	equ	0xFF3
 13474                           intcon	equ	0xFF2
 13475                           intcon2	equ	0xFF1
 13476                           postinc0	equ	0xFEE
 13477                           plusw0	equ	0xFEB
 13478                           wreg	equ	0xFE8
 13479                           indf1	equ	0xFE7
 13480                           postdec1	equ	0xFE5
 13481                           fsr1h	equ	0xFE2
 13482                           fsr1l	equ	0xFE1
 13483                           indf2	equ	0xFDF
 13484                           postinc2	equ	0xFDE
 13485                           postdec2	equ	0xFDD
 13486                           plusw2	equ	0xFDB
 13487                           fsr2h	equ	0xFDA
 13488                           fsr2l	equ	0xFD9
 13489                           status	equ	0xFD8
 13490                           
 13491 ;; *************** function _ReadIntFromEeprom *****************
 13492 ;; Defined at:
 13493 ;;		line 131 in file "SystemCommon.c"
 13494 ;; Parameters:    Size  Location     Type
 13495 ;;  address         1    wreg     unsigned char 
 13496 ;;  numOfByes       2   81[BANK0 ] int 
 13497 ;; Auto vars:     Size  Location     Type
 13498 ;;  address         1   98[BANK0 ] unsigned char 
 13499 ;;  base            4   88[BANK0 ] unsigned long 
 13500 ;;  idx             1  103[BANK0 ] unsigned char 
 13501 ;;  retVal          4   99[BANK0 ] unsigned long 
 13502 ;; Return value:  Size  Location     Type
 13503 ;;                  4   81[BANK0 ] unsigned long 
 13504 ;; Registers used:
 13505 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13506 ;; Tracked objects:
 13507 ;;		On entry : 0/0
 13508 ;;		On exit  : 0/0
 13509 ;;		Unchanged: 0/0
 13510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13511 ;;      Params:         0       4       0       0       0       0       0
 13512 ;;      Locals:         0      16       0       0       0       0       0
 13513 ;;      Temps:          0       3       0       0       0       0       0
 13514 ;;      Totals:         0      23       0       0       0       0       0
 13515 ;;Total ram usage:       23 bytes
 13516 ;; Hardware stack levels used:    1
 13517 ;; Hardware stack levels required when called:    9
 13518 ;; This function calls:
 13519 ;;		_EepromRead
 13520 ;;		___awtoft
 13521 ;;		___fttol
 13522 ;;		___lmul
 13523 ;;		_pow
 13524 ;; This function is called by:
 13525 ;;		_DacInit
 13526 ;;		_DacReadValue
 13527 ;;		_InitSynth
 13528 ;;		_SynthReadData
 13529 ;; This function uses a non-reentrant model
 13530 ;;
 13531                           
 13532                           	psect	text77
 13533  001F16                     __ptext77:
 13534                           	opt stack 0
 13535  001F16                     _ReadIntFromEeprom:
 13536                           	opt stack 18
 13537                           
 13538                           ;incstack = 0
 13539                           ;ReadIntFromEeprom@address stored from wreg
 13540  001F16  0100               	movlb	0	; () banked
 13541  001F18  6FC2               	movwf	ReadIntFromEeprom@address& (0+255),b
 13542                           
 13543                           ;SystemCommon.c: 133: uint32_t retVal = 0x00;
 13544  001F1A  0E00               	movlw	0
 13545  001F1C  0100               	movlb	0	; () banked
 13546  001F1E  6FC3               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 13547  001F20  0E00               	movlw	0
 13548  001F22  6FC4               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 13549  001F24  0E00               	movlw	0
 13550  001F26  6FC5               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 13551  001F28  0E00               	movlw	0
 13552  001F2A  6FC6               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 13553                           
 13554                           ; BSR set to: 0
 13555                           ;SystemCommon.c: 134: address -= numOfByes;
 13556  001F2C  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13557  001F2E  5FC2               	subwf	ReadIntFromEeprom@address& (0+255),f,b
 13558                           
 13559                           ; BSR set to: 0
 13560                           ;SystemCommon.c: 136: for(uint8_t idx = 0; idx < numOfByes; idx++)
 13561  001F30  0E00               	movlw	0
 13562  001F32  6FC7               	movwf	ReadIntFromEeprom@idx& (0+255),b
 13563  001F34  D06D               	goto	l1440
 13564  001F36                     
 13565                           ; BSR set to: 0
 13566                           ;SystemCommon.c: 137: {
 13567                           ;SystemCommon.c: 138: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 13568                           
 13569                           ; BSR set to: 0
 13570  001F36  51C7               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 13571  001F38  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 13572  001F3A  6BB6               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 13573  001F3C  0E01               	movlw	1
 13574  001F3E  27B5               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 13575  001F40  0E00               	movlw	0
 13576  001F42  23B6               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13577  001F44  1FB5               	comf	??_ReadIntFromEeprom& (0+255),f,b
 13578  001F46  1FB6               	comf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13579  001F48  4BB5               	infsnz	??_ReadIntFromEeprom& (0+255),f,b
 13580  001F4A  2BB6               	incf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13581  001F4C  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13582  001F4E  27B5               	addwf	??_ReadIntFromEeprom& (0+255),f,b
 13583  001F50  51B2               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 13584  001F52  23B6               	addwfc	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13585  001F54  90D8               	bcf	status,0,c
 13586  001F56  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13587  001F58  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13588  001F5A  90D8               	bcf	status,0,c
 13589  001F5C  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13590  001F5E  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13591  001F60  90D8               	bcf	status,0,c
 13592  001F62  37B5               	rlcf	??_ReadIntFromEeprom& (0+255),f,b
 13593  001F64  37B6               	rlcf	(??_ReadIntFromEeprom+1)& (0+255),f,b
 13594  001F66  C0B5  F020         	movff	??_ReadIntFromEeprom,___awtoft@c
 13595  001F6A  C0B6  F021         	movff	??_ReadIntFromEeprom+1,___awtoft@c+1
 13596  001F6E  ECD8  F01E         	call	___awtoft	;wreg free
 13597  001F72  C020  F0BC         	movff	?___awtoft,_ReadIntFromEeprom$3588
 13598  001F76  C021  F0BD         	movff	?___awtoft+1,_ReadIntFromEeprom$3588+1
 13599  001F7A  C022  F0BE         	movff	?___awtoft+2,_ReadIntFromEeprom$3588+2
 13600                           
 13601                           ;SystemCommon.c: 137: {
 13602                           ;SystemCommon.c: 138: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 13603  001F7E  C0BC  F0A3         	movff	_ReadIntFromEeprom$3588,pow@y
 13604  001F82  C0BD  F0A4         	movff	_ReadIntFromEeprom$3588+1,pow@y+1
 13605  001F86  C0BE  F0A5         	movff	_ReadIntFromEeprom$3588+2,pow@y+2
 13606  001F8A  0E00               	movlw	0
 13607  001F8C  0100               	movlb	0	; () banked
 13608  001F8E  6FA0               	movwf	pow@x& (0+255),b
 13609  001F90  0E00               	movlw	0
 13610  001F92  6FA1               	movwf	(pow@x+1)& (0+255),b
 13611  001F94  0E40               	movlw	64
 13612  001F96  6FA2               	movwf	(pow@x+2)& (0+255),b
 13613  001F98  EC78  F00D         	call	_pow	;wreg free
 13614  001F9C  C0A0  F0BF         	movff	?_pow,_ReadIntFromEeprom$3589
 13615  001FA0  C0A1  F0C0         	movff	?_pow+1,_ReadIntFromEeprom$3589+1
 13616  001FA4  C0A2  F0C1         	movff	?_pow+2,_ReadIntFromEeprom$3589+2
 13617                           
 13618                           ;SystemCommon.c: 137: {
 13619                           ;SystemCommon.c: 138: uint32_t base = pow(2,8*(numOfByes - 1 - idx));
 13620  001FA8  C0BF  F078         	movff	_ReadIntFromEeprom$3589,___fttol@f1
 13621  001FAC  C0C0  F079         	movff	_ReadIntFromEeprom$3589+1,___fttol@f1+1
 13622  001FB0  C0C1  F07A         	movff	_ReadIntFromEeprom$3589+2,___fttol@f1+2
 13623  001FB4  ECAB  F011         	call	___fttol	;wreg free
 13624  001FB8  C078  F0B8         	movff	?___fttol,ReadIntFromEeprom@base
 13625  001FBC  C079  F0B9         	movff	?___fttol+1,ReadIntFromEeprom@base+1
 13626  001FC0  C07A  F0BA         	movff	?___fttol+2,ReadIntFromEeprom@base+2
 13627  001FC4  C07B  F0BB         	movff	?___fttol+3,ReadIntFromEeprom@base+3
 13628                           
 13629                           ;SystemCommon.c: 139: retVal = retVal | EepromRead(address + idx) * base;
 13630  001FC8  0100               	movlb	0	; () banked
 13631  001FCA  51C2               	movf	ReadIntFromEeprom@address& (0+255),w,b
 13632  001FCC  25C7               	addwf	ReadIntFromEeprom@idx& (0+255),w,b
 13633  001FCE  ECC5  F021         	call	_EepromRead
 13634  001FD2  0100               	movlb	0	; () banked
 13635  001FD4  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 13636  001FD6  51B5               	movf	??_ReadIntFromEeprom& (0+255),w,b
 13637  001FD8  6E1A               	movwf	___lmul@multiplier,c
 13638  001FDA  6A1B               	clrf	___lmul@multiplier+1,c
 13639  001FDC  6A1C               	clrf	___lmul@multiplier+2,c
 13640  001FDE  6A1D               	clrf	___lmul@multiplier+3,c
 13641  001FE0  C0B8  F01E         	movff	ReadIntFromEeprom@base,___lmul@multiplicand
 13642  001FE4  C0B9  F01F         	movff	ReadIntFromEeprom@base+1,___lmul@multiplicand+1
 13643  001FE8  C0BA  F020         	movff	ReadIntFromEeprom@base+2,___lmul@multiplicand+2
 13644  001FEC  C0BB  F021         	movff	ReadIntFromEeprom@base+3,___lmul@multiplicand+3
 13645  001FF0  ECFC  F01C         	call	___lmul	;wreg free
 13646  001FF4  0100               	movlb	0	; () banked
 13647  001FF6  51C3               	movf	ReadIntFromEeprom@retVal& (0+255),w,b
 13648  001FF8  101A               	iorwf	?___lmul,w,c
 13649  001FFA  6FC3               	movwf	ReadIntFromEeprom@retVal& (0+255),b
 13650  001FFC  51C4               	movf	(ReadIntFromEeprom@retVal+1)& (0+255),w,b
 13651  001FFE  101B               	iorwf	?___lmul+1,w,c
 13652  002000  6FC4               	movwf	(ReadIntFromEeprom@retVal+1)& (0+255),b
 13653  002002  51C5               	movf	(ReadIntFromEeprom@retVal+2)& (0+255),w,b
 13654  002004  101C               	iorwf	?___lmul+2,w,c
 13655  002006  6FC5               	movwf	(ReadIntFromEeprom@retVal+2)& (0+255),b
 13656  002008  51C6               	movf	(ReadIntFromEeprom@retVal+3)& (0+255),w,b
 13657  00200A  101D               	iorwf	?___lmul+3,w,c
 13658  00200C  6FC6               	movwf	(ReadIntFromEeprom@retVal+3)& (0+255),b
 13659                           
 13660                           ; BSR set to: 0
 13661  00200E  2BC7               	incf	ReadIntFromEeprom@idx& (0+255),f,b
 13662  002010                     l1440:
 13663                           
 13664                           ; BSR set to: 0
 13665                           
 13666                           ; BSR set to: 0
 13667  002010  51C7               	movf	ReadIntFromEeprom@idx& (0+255),w,b
 13668  002012  6FB5               	movwf	??_ReadIntFromEeprom& (0+255),b
 13669  002014  6BB6               	clrf	(??_ReadIntFromEeprom+1)& (0+255),b
 13670  002016  51B1               	movf	ReadIntFromEeprom@numOfByes& (0+255),w,b
 13671  002018  5DB5               	subwf	??_ReadIntFromEeprom& (0+255),w,b
 13672  00201A  51B6               	movf	(??_ReadIntFromEeprom+1)& (0+255),w,b
 13673  00201C  0A80               	xorlw	128
 13674  00201E  6FB7               	movwf	(??_ReadIntFromEeprom+2)& (0+255),b
 13675  002020  51B2               	movf	(ReadIntFromEeprom@numOfByes+1)& (0+255),w,b
 13676  002022  0A80               	xorlw	128
 13677  002024  59B7               	subwfb	(??_ReadIntFromEeprom+2)& (0+255),w,b
 13678  002026  A0D8               	btfss	status,0,c
 13679  002028  D786               	goto	l1441
 13680                           
 13681                           ; BSR set to: 0
 13682                           ;SystemCommon.c: 140: }
 13683                           ;SystemCommon.c: 141: return retVal;
 13684  00202A  C0C3  F0B1         	movff	ReadIntFromEeprom@retVal,?_ReadIntFromEeprom
 13685  00202E  C0C4  F0B2         	movff	ReadIntFromEeprom@retVal+1,?_ReadIntFromEeprom+1
 13686  002032  C0C5  F0B3         	movff	ReadIntFromEeprom@retVal+2,?_ReadIntFromEeprom+2
 13687  002036  C0C6  F0B4         	movff	ReadIntFromEeprom@retVal+3,?_ReadIntFromEeprom+3
 13688                           
 13689                           ; BSR set to: 0
 13690  00203A  0012               	return		;funcret
 13691  00203C                     __end_of_ReadIntFromEeprom:
 13692                           	opt stack 0
 13693                           tosu	equ	0xFFF
 13694                           tosh	equ	0xFFE
 13695                           tosl	equ	0xFFD
 13696                           pclath	equ	0xFFA
 13697                           tblptru	equ	0xFF8
 13698                           tblptrh	equ	0xFF7
 13699                           tblptrl	equ	0xFF6
 13700                           tablat	equ	0xFF5
 13701                           prodh	equ	0xFF4
 13702                           prodl	equ	0xFF3
 13703                           intcon	equ	0xFF2
 13704                           intcon2	equ	0xFF1
 13705                           postinc0	equ	0xFEE
 13706                           plusw0	equ	0xFEB
 13707                           wreg	equ	0xFE8
 13708                           indf1	equ	0xFE7
 13709                           postdec1	equ	0xFE5
 13710                           fsr1h	equ	0xFE2
 13711                           fsr1l	equ	0xFE1
 13712                           indf2	equ	0xFDF
 13713                           postinc2	equ	0xFDE
 13714                           postdec2	equ	0xFDD
 13715                           plusw2	equ	0xFDB
 13716                           fsr2h	equ	0xFDA
 13717                           fsr2l	equ	0xFD9
 13718                           status	equ	0xFD8
 13719                           
 13720 ;; *************** function ___lmul *****************
 13721 ;; Defined at:
 13722 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 13723 ;; Parameters:    Size  Location     Type
 13724 ;;  multiplier      4   25[COMRAM] unsigned long 
 13725 ;;  multiplicand    4   29[COMRAM] unsigned long 
 13726 ;; Auto vars:     Size  Location     Type
 13727 ;;  product         4   33[COMRAM] unsigned long 
 13728 ;; Return value:  Size  Location     Type
 13729 ;;                  4   25[COMRAM] unsigned long 
 13730 ;; Registers used:
 13731 ;;		wreg, status,2, status,0
 13732 ;; Tracked objects:
 13733 ;;		On entry : 0/0
 13734 ;;		On exit  : 0/0
 13735 ;;		Unchanged: 0/0
 13736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13737 ;;      Params:         8       0       0       0       0       0       0
 13738 ;;      Locals:         4       0       0       0       0       0       0
 13739 ;;      Temps:          0       0       0       0       0       0       0
 13740 ;;      Totals:        12       0       0       0       0       0       0
 13741 ;;Total ram usage:       12 bytes
 13742 ;; Hardware stack levels used:    1
 13743 ;; Hardware stack levels required when called:    4
 13744 ;; This function calls:
 13745 ;;		Nothing
 13746 ;; This function is called by:
 13747 ;;		_ReadIntFromEeprom
 13748 ;;		_strtol
 13749 ;; This function uses a non-reentrant model
 13750 ;;
 13751                           
 13752                           	psect	text78
 13753  0039F8                     __ptext78:
 13754                           	opt stack 0
 13755  0039F8                     ___lmul:
 13756                           	opt stack 21
 13757                           
 13758                           ; BSR set to: 0
 13759                           ;incstack = 0
 13760  0039F8  0E00               	movlw	0
 13761  0039FA  6E22               	movwf	___lmul@product,c
 13762  0039FC  0E00               	movlw	0
 13763  0039FE  6E23               	movwf	___lmul@product+1,c
 13764  003A00  0E00               	movlw	0
 13765  003A02  6E24               	movwf	___lmul@product+2,c
 13766  003A04  0E00               	movlw	0
 13767  003A06  6E25               	movwf	___lmul@product+3,c
 13768  003A08  A01A               	btfss	___lmul@multiplier,0,c
 13769  003A0A  D008               	goto	l1609
 13770  003A0C  501E               	movf	___lmul@multiplicand,w,c
 13771  003A0E  2622               	addwf	___lmul@product,f,c
 13772  003A10  501F               	movf	___lmul@multiplicand+1,w,c
 13773  003A12  2223               	addwfc	___lmul@product+1,f,c
 13774  003A14  5020               	movf	___lmul@multiplicand+2,w,c
 13775  003A16  2224               	addwfc	___lmul@product+2,f,c
 13776  003A18  5021               	movf	___lmul@multiplicand+3,w,c
 13777  003A1A  2225               	addwfc	___lmul@product+3,f,c
 13778  003A1C                     l1609:
 13779  003A1C  90D8               	bcf	status,0,c
 13780  003A1E  361E               	rlcf	___lmul@multiplicand,f,c
 13781  003A20  361F               	rlcf	___lmul@multiplicand+1,f,c
 13782  003A22  3620               	rlcf	___lmul@multiplicand+2,f,c
 13783  003A24  3621               	rlcf	___lmul@multiplicand+3,f,c
 13784  003A26  90D8               	bcf	status,0,c
 13785  003A28  321D               	rrcf	___lmul@multiplier+3,f,c
 13786  003A2A  321C               	rrcf	___lmul@multiplier+2,f,c
 13787  003A2C  321B               	rrcf	___lmul@multiplier+1,f,c
 13788  003A2E  321A               	rrcf	___lmul@multiplier,f,c
 13789  003A30  501A               	movf	___lmul@multiplier,w,c
 13790  003A32  101B               	iorwf	___lmul@multiplier+1,w,c
 13791  003A34  101C               	iorwf	___lmul@multiplier+2,w,c
 13792  003A36  101D               	iorwf	___lmul@multiplier+3,w,c
 13793  003A38  A4D8               	btfss	status,2,c
 13794  003A3A  D7E6               	goto	l1608
 13795  003A3C  C022  F01A         	movff	___lmul@product,?___lmul
 13796  003A40  C023  F01B         	movff	___lmul@product+1,?___lmul+1
 13797  003A44  C024  F01C         	movff	___lmul@product+2,?___lmul+2
 13798  003A48  C025  F01D         	movff	___lmul@product+3,?___lmul+3
 13799  003A4C  0012               	return		;funcret
 13800  003A4E                     __end_of___lmul:
 13801                           	opt stack 0
 13802                           tosu	equ	0xFFF
 13803                           tosh	equ	0xFFE
 13804                           tosl	equ	0xFFD
 13805                           pclath	equ	0xFFA
 13806                           tblptru	equ	0xFF8
 13807                           tblptrh	equ	0xFF7
 13808                           tblptrl	equ	0xFF6
 13809                           tablat	equ	0xFF5
 13810                           prodh	equ	0xFF4
 13811                           prodl	equ	0xFF3
 13812                           intcon	equ	0xFF2
 13813                           intcon2	equ	0xFF1
 13814                           postinc0	equ	0xFEE
 13815                           plusw0	equ	0xFEB
 13816                           wreg	equ	0xFE8
 13817                           indf1	equ	0xFE7
 13818                           postdec1	equ	0xFE5
 13819                           fsr1h	equ	0xFE2
 13820                           fsr1l	equ	0xFE1
 13821                           indf2	equ	0xFDF
 13822                           postinc2	equ	0xFDE
 13823                           postdec2	equ	0xFDD
 13824                           plusw2	equ	0xFDB
 13825                           fsr2h	equ	0xFDA
 13826                           fsr2l	equ	0xFD9
 13827                           status	equ	0xFD8
 13828                           
 13829 ;; *************** function _EepromRead *****************
 13830 ;; Defined at:
 13831 ;;		line 175 in file "FlashApp.c"
 13832 ;; Parameters:    Size  Location     Type
 13833 ;;  address         1    wreg     unsigned char 
 13834 ;; Auto vars:     Size  Location     Type
 13835 ;;  address         1   24[COMRAM] unsigned char 
 13836 ;; Return value:  Size  Location     Type
 13837 ;;                  1    wreg      unsigned char 
 13838 ;; Registers used:
 13839 ;;		wreg, status,2, cstack
 13840 ;; Tracked objects:
 13841 ;;		On entry : 0/0
 13842 ;;		On exit  : 0/0
 13843 ;;		Unchanged: 0/0
 13844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13845 ;;      Params:         0       0       0       0       0       0       0
 13846 ;;      Locals:         1       0       0       0       0       0       0
 13847 ;;      Temps:          0       0       0       0       0       0       0
 13848 ;;      Totals:         1       0       0       0       0       0       0
 13849 ;;Total ram usage:        1 bytes
 13850 ;; Hardware stack levels used:    1
 13851 ;; Hardware stack levels required when called:    5
 13852 ;; This function calls:
 13853 ;;		_DATAEE_ReadByte
 13854 ;; This function is called by:
 13855 ;;		_ReadIntFromEeprom
 13856 ;; This function uses a non-reentrant model
 13857 ;;
 13858                           
 13859                           	psect	text79
 13860  00438A                     __ptext79:
 13861                           	opt stack 0
 13862  00438A                     _EepromRead:
 13863                           	opt stack 21
 13864                           
 13865                           ;incstack = 0
 13866                           ;EepromRead@address stored from wreg
 13867  00438A  6E19               	movwf	EepromRead@address,c
 13868                           
 13869                           ;FlashApp.c: 177: return DATAEE_ReadByte(address);
 13870  00438C  5019               	movf	EepromRead@address,w,c
 13871  00438E  EC5C  F021         	call	_DATAEE_ReadByte
 13872  004392  0012               	return	
 13873  004394                     __end_of_EepromRead:
 13874                           	opt stack 0
 13875                           tosu	equ	0xFFF
 13876                           tosh	equ	0xFFE
 13877                           tosl	equ	0xFFD
 13878                           pclath	equ	0xFFA
 13879                           tblptru	equ	0xFF8
 13880                           tblptrh	equ	0xFF7
 13881                           tblptrl	equ	0xFF6
 13882                           tablat	equ	0xFF5
 13883                           prodh	equ	0xFF4
 13884                           prodl	equ	0xFF3
 13885                           intcon	equ	0xFF2
 13886                           intcon2	equ	0xFF1
 13887                           postinc0	equ	0xFEE
 13888                           plusw0	equ	0xFEB
 13889                           wreg	equ	0xFE8
 13890                           indf1	equ	0xFE7
 13891                           postdec1	equ	0xFE5
 13892                           fsr1h	equ	0xFE2
 13893                           fsr1l	equ	0xFE1
 13894                           indf2	equ	0xFDF
 13895                           postinc2	equ	0xFDE
 13896                           postdec2	equ	0xFDD
 13897                           plusw2	equ	0xFDB
 13898                           fsr2h	equ	0xFDA
 13899                           fsr2l	equ	0xFD9
 13900                           status	equ	0xFD8
 13901                           
 13902 ;; *************** function _DATAEE_ReadByte *****************
 13903 ;; Defined at:
 13904 ;;		line 194 in file "mcc_generated_files/memory.c"
 13905 ;; Parameters:    Size  Location     Type
 13906 ;;  bAdd            1    wreg     unsigned char 
 13907 ;; Auto vars:     Size  Location     Type
 13908 ;;  bAdd            1   23[COMRAM] unsigned char 
 13909 ;; Return value:  Size  Location     Type
 13910 ;;                  1    wreg      unsigned char 
 13911 ;; Registers used:
 13912 ;;		wreg, status,2
 13913 ;; Tracked objects:
 13914 ;;		On entry : 0/0
 13915 ;;		On exit  : 0/0
 13916 ;;		Unchanged: 0/0
 13917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13918 ;;      Params:         0       0       0       0       0       0       0
 13919 ;;      Locals:         1       0       0       0       0       0       0
 13920 ;;      Temps:          0       0       0       0       0       0       0
 13921 ;;      Totals:         1       0       0       0       0       0       0
 13922 ;;Total ram usage:        1 bytes
 13923 ;; Hardware stack levels used:    1
 13924 ;; Hardware stack levels required when called:    4
 13925 ;; This function calls:
 13926 ;;		Nothing
 13927 ;; This function is called by:
 13928 ;;		_EepromRead
 13929 ;; This function uses a non-reentrant model
 13930 ;;
 13931                           
 13932                           	psect	text80
 13933  0042B8                     __ptext80:
 13934                           	opt stack 0
 13935  0042B8                     _DATAEE_ReadByte:
 13936                           	opt stack 21
 13937                           
 13938                           ;incstack = 0
 13939                           ;DATAEE_ReadByte@bAdd stored from wreg
 13940  0042B8  6E18               	movwf	DATAEE_ReadByte@bAdd,c
 13941                           
 13942                           ;memory.c: 197: EEADR = (bAdd & 0xFF);
 13943  0042BA  C018  FFA9         	movff	DATAEE_ReadByte@bAdd,4009	;volatile
 13944                           
 13945                           ;memory.c: 198: EECON1bits.CFGS = 0;
 13946  0042BE  9CA6               	bcf	4006,6,c	;volsfr
 13947                           
 13948                           ;memory.c: 199: EECON1bits.EEPGD = 0;
 13949  0042C0  9EA6               	bcf	4006,7,c	;volsfr
 13950                           
 13951                           ;memory.c: 200: EECON1bits.RD = 1;
 13952  0042C2  80A6               	bsf	4006,0,c	;volsfr
 13953                           
 13954                           ;memory.c: 201: __nop();
 13955  0042C4  F000               	nop	
 13956                           
 13957                           ;memory.c: 202: __nop();
 13958  0042C6  F000               	nop	
 13959                           
 13960                           ;memory.c: 204: return (EEDATA);
 13961  0042C8  50A8               	movf	4008,w,c	;volatile
 13962  0042CA  0012               	return	
 13963  0042CC                     __end_of_DATAEE_ReadByte:
 13964                           	opt stack 0
 13965                           tosu	equ	0xFFF
 13966                           tosh	equ	0xFFE
 13967                           tosl	equ	0xFFD
 13968                           pclath	equ	0xFFA
 13969                           tblptru	equ	0xFF8
 13970                           tblptrh	equ	0xFF7
 13971                           tblptrl	equ	0xFF6
 13972                           tablat	equ	0xFF5
 13973                           prodh	equ	0xFF4
 13974                           prodl	equ	0xFF3
 13975                           intcon	equ	0xFF2
 13976                           intcon2	equ	0xFF1
 13977                           postinc0	equ	0xFEE
 13978                           plusw0	equ	0xFEB
 13979                           wreg	equ	0xFE8
 13980                           indf1	equ	0xFE7
 13981                           postdec1	equ	0xFE5
 13982                           fsr1h	equ	0xFE2
 13983                           fsr1l	equ	0xFE1
 13984                           indf2	equ	0xFDF
 13985                           postinc2	equ	0xFDE
 13986                           postdec2	equ	0xFDD
 13987                           plusw2	equ	0xFDB
 13988                           fsr2h	equ	0xFDA
 13989                           fsr2l	equ	0xFD9
 13990                           status	equ	0xFD8
 13991                           
 13992 ;; *************** function _ClearMcuRunTime *****************
 13993 ;; Defined at:
 13994 ;;		line 63 in file "SystemStatus.c"
 13995 ;; Parameters:    Size  Location     Type
 13996 ;;		None
 13997 ;; Auto vars:     Size  Location     Type
 13998 ;;		None
 13999 ;; Return value:  Size  Location     Type
 14000 ;;                  1    wreg      void 
 14001 ;; Registers used:
 14002 ;;		wreg, status,2
 14003 ;; Tracked objects:
 14004 ;;		On entry : 0/0
 14005 ;;		On exit  : 0/0
 14006 ;;		Unchanged: 0/0
 14007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14008 ;;      Params:         0       0       0       0       0       0       0
 14009 ;;      Locals:         0       0       0       0       0       0       0
 14010 ;;      Temps:          0       0       0       0       0       0       0
 14011 ;;      Totals:         0       0       0       0       0       0       0
 14012 ;;Total ram usage:        0 bytes
 14013 ;; Hardware stack levels used:    1
 14014 ;; Hardware stack levels required when called:    4
 14015 ;; This function calls:
 14016 ;;		Nothing
 14017 ;; This function is called by:
 14018 ;;		_InitSystemApplicationManagers
 14019 ;; This function uses a non-reentrant model
 14020 ;;
 14021                           
 14022                           	psect	text81
 14023  0042CC                     __ptext81:
 14024                           	opt stack 0
 14025  0042CC                     _ClearMcuRunTime:
 14026                           	opt stack 25
 14027                           
 14028                           ;SystemStatus.c: 65: mcuRunTimeIn5SecTicks = 0;
 14029                           
 14030                           ;incstack = 0
 14031  0042CC  0E00               	movlw	0
 14032  0042CE  0101               	movlb	1	; () banked
 14033  0042D0  6F28               	movwf	_mcuRunTimeIn5SecTicks& (0+255),b
 14034  0042D2  0E00               	movlw	0
 14035  0042D4  6F29               	movwf	(_mcuRunTimeIn5SecTicks+1)& (0+255),b
 14036  0042D6  0E00               	movlw	0
 14037  0042D8  6F2A               	movwf	(_mcuRunTimeIn5SecTicks+2)& (0+255),b
 14038  0042DA  0E00               	movlw	0
 14039  0042DC  6F2B               	movwf	(_mcuRunTimeIn5SecTicks+3)& (0+255),b
 14040                           
 14041                           ; BSR set to: 1
 14042  0042DE  0012               	return		;funcret
 14043  0042E0                     __end_of_ClearMcuRunTime:
 14044                           	opt stack 0
 14045                           tosu	equ	0xFFF
 14046                           tosh	equ	0xFFE
 14047                           tosl	equ	0xFFD
 14048                           pclath	equ	0xFFA
 14049                           tblptru	equ	0xFF8
 14050                           tblptrh	equ	0xFF7
 14051                           tblptrl	equ	0xFF6
 14052                           tablat	equ	0xFF5
 14053                           prodh	equ	0xFF4
 14054                           prodl	equ	0xFF3
 14055                           intcon	equ	0xFF2
 14056                           intcon2	equ	0xFF1
 14057                           postinc0	equ	0xFEE
 14058                           plusw0	equ	0xFEB
 14059                           wreg	equ	0xFE8
 14060                           indf1	equ	0xFE7
 14061                           postdec1	equ	0xFE5
 14062                           fsr1h	equ	0xFE2
 14063                           fsr1l	equ	0xFE1
 14064                           indf2	equ	0xFDF
 14065                           postinc2	equ	0xFDE
 14066                           postdec2	equ	0xFDD
 14067                           plusw2	equ	0xFDB
 14068                           fsr2h	equ	0xFDA
 14069                           fsr2l	equ	0xFD9
 14070                           status	equ	0xFD8
 14071                           
 14072 ;; *************** function _CheckFlashPrecentage *****************
 14073 ;; Defined at:
 14074 ;;		line 165 in file "FlashApp.c"
 14075 ;; Parameters:    Size  Location     Type
 14076 ;;		None
 14077 ;; Auto vars:     Size  Location     Type
 14078 ;;  precentage      3   28[BANK0 ] void 
 14079 ;; Return value:  Size  Location     Type
 14080 ;;                  1    wreg      unsigned char 
 14081 ;; Registers used:
 14082 ;;		wreg, status,2, status,0, cstack
 14083 ;; Tracked objects:
 14084 ;;		On entry : 0/0
 14085 ;;		On exit  : 0/0
 14086 ;;		Unchanged: 0/0
 14087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14088 ;;      Params:         0       0       0       0       0       0       0
 14089 ;;      Locals:         0       3       0       0       0       0       0
 14090 ;;      Temps:          0       4       0       0       0       0       0
 14091 ;;      Totals:         0       7       0       0       0       0       0
 14092 ;;Total ram usage:        7 bytes
 14093 ;; Hardware stack levels used:    1
 14094 ;; Hardware stack levels required when called:    6
 14095 ;; This function calls:
 14096 ;;		___ftdiv
 14097 ;;		___ftge
 14098 ;;		___ftmul
 14099 ;;		___lltoft
 14100 ;; This function is called by:
 14101 ;;		_main
 14102 ;; This function uses a non-reentrant model
 14103 ;;
 14104                           
 14105                           	psect	text82
 14106  002DB6                     __ptext82:
 14107                           	opt stack 0
 14108  002DB6                     _CheckFlashPrecentage:
 14109                           	opt stack 24
 14110                           
 14111                           ;FlashApp.c: 167: double precentage = ((double)(0x7FF0 - writeAddress) / 0x7FF0) * 100;
 14112                           
 14113                           ; BSR set to: 1
 14114                           ;incstack = 0
 14115  002DB6  0EE0               	movlw	224
 14116  002DB8  6E2C               	movwf	___ftdiv@f2,c
 14117  002DBA  0EFF               	movlw	255
 14118  002DBC  6E2D               	movwf	___ftdiv@f2+1,c
 14119  002DBE  0E46               	movlw	70
 14120  002DC0  6E2E               	movwf	___ftdiv@f2+2,c
 14121  002DC2  C03E  F078         	movff	_writeAddress,??_CheckFlashPrecentage
 14122  002DC6  C03F  F079         	movff	_writeAddress+1,??_CheckFlashPrecentage+1
 14123  002DCA  C040  F07A         	movff	_writeAddress+2,??_CheckFlashPrecentage+2
 14124  002DCE  C041  F07B         	movff	_writeAddress+3,??_CheckFlashPrecentage+3
 14125  002DD2  0100               	movlb	0	; () banked
 14126  002DD4  1F78               	comf	??_CheckFlashPrecentage& (0+255),f,b
 14127  002DD6  1F79               	comf	(??_CheckFlashPrecentage+1)& (0+255),f,b
 14128  002DD8  1F7A               	comf	(??_CheckFlashPrecentage+2)& (0+255),f,b
 14129  002DDA  1F7B               	comf	(??_CheckFlashPrecentage+3)& (0+255),f,b
 14130  002DDC  2B78               	incf	??_CheckFlashPrecentage& (0+255),f,b
 14131  002DDE  0E00               	movlw	0
 14132  002DE0  2379               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),f,b
 14133  002DE2  237A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),f,b
 14134  002DE4  237B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),f,b
 14135  002DE6  0EF0               	movlw	240
 14136  002DE8  2578               	addwf	??_CheckFlashPrecentage& (0+255),w,b
 14137  002DEA  6E20               	movwf	___lltoft@c,c
 14138  002DEC  0E7F               	movlw	127
 14139  002DEE  2179               	addwfc	(??_CheckFlashPrecentage+1)& (0+255),w,b
 14140  002DF0  6E21               	movwf	___lltoft@c+1,c
 14141  002DF2  0E00               	movlw	0
 14142  002DF4  217A               	addwfc	(??_CheckFlashPrecentage+2)& (0+255),w,b
 14143  002DF6  6E22               	movwf	___lltoft@c+2,c
 14144  002DF8  0E00               	movlw	0
 14145  002DFA  217B               	addwfc	(??_CheckFlashPrecentage+3)& (0+255),w,b
 14146  002DFC  6E23               	movwf	___lltoft@c+3,c
 14147  002DFE  EC20  F01C         	call	___lltoft	;wreg free
 14148  002E02  C020  F029         	movff	?___lltoft,___ftdiv@f1
 14149  002E06  C021  F02A         	movff	?___lltoft+1,___ftdiv@f1+1
 14150  002E0A  C022  F02B         	movff	?___lltoft+2,___ftdiv@f1+2
 14151  002E0E  ECA2  F012         	call	___ftdiv	;wreg free
 14152  002E12  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14153  002E16  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14154  002E1A  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14155  002E1E  0E00               	movlw	0
 14156  002E20  0100               	movlb	0	; () banked
 14157  002E22  6F6C               	movwf	___ftmul@f2& (0+255),b
 14158  002E24  0EC8               	movlw	200
 14159  002E26  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14160  002E28  0E42               	movlw	66
 14161  002E2A  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14162  002E2C  EC27  F012         	call	___ftmul	;wreg free
 14163  002E30  C069  F07C         	movff	?___ftmul,CheckFlashPrecentage@precentage
 14164  002E34  C06A  F07D         	movff	?___ftmul+1,CheckFlashPrecentage@precentage+1
 14165  002E38  C06B  F07E         	movff	?___ftmul+2,CheckFlashPrecentage@precentage+2
 14166                           
 14167                           ;FlashApp.c: 168: return (precentage > 75) ? 1 : 0;
 14168  002E3C  0E00               	movlw	0
 14169  002E3E  6E18               	movwf	___ftge@ff1,c
 14170  002E40  0E96               	movlw	150
 14171  002E42  6E19               	movwf	___ftge@ff1+1,c
 14172  002E44  0E42               	movlw	66
 14173  002E46  6E1A               	movwf	___ftge@ff1+2,c
 14174  002E48  C07C  F01B         	movff	CheckFlashPrecentage@precentage,___ftge@ff2
 14175  002E4C  C07D  F01C         	movff	CheckFlashPrecentage@precentage+1,___ftge@ff2+1
 14176  002E50  C07E  F01D         	movff	CheckFlashPrecentage@precentage+2,___ftge@ff2+2
 14177  002E54  ECCB  F018         	call	___ftge	;wreg free
 14178  002E58  B0D8               	btfsc	status,0,c
 14179  002E5A  D002               	goto	u8930
 14180  002E5C  0E01               	movlw	1
 14181  002E5E  0012               	return	
 14182  002E60                     u8930:
 14183  002E60  0E00               	movlw	0
 14184  002E62  0012               	return	
 14185  002E64                     __end_of_CheckFlashPrecentage:
 14186                           	opt stack 0
 14187                           tosu	equ	0xFFF
 14188                           tosh	equ	0xFFE
 14189                           tosl	equ	0xFFD
 14190                           pclath	equ	0xFFA
 14191                           tblptru	equ	0xFF8
 14192                           tblptrh	equ	0xFF7
 14193                           tblptrl	equ	0xFF6
 14194                           tablat	equ	0xFF5
 14195                           prodh	equ	0xFF4
 14196                           prodl	equ	0xFF3
 14197                           intcon	equ	0xFF2
 14198                           intcon2	equ	0xFF1
 14199                           postinc0	equ	0xFEE
 14200                           plusw0	equ	0xFEB
 14201                           wreg	equ	0xFE8
 14202                           indf1	equ	0xFE7
 14203                           postdec1	equ	0xFE5
 14204                           fsr1h	equ	0xFE2
 14205                           fsr1l	equ	0xFE1
 14206                           indf2	equ	0xFDF
 14207                           postinc2	equ	0xFDE
 14208                           postdec2	equ	0xFDD
 14209                           plusw2	equ	0xFDB
 14210                           fsr2h	equ	0xFDA
 14211                           fsr2l	equ	0xFD9
 14212                           status	equ	0xFD8
 14213                           
 14214 ;; *************** function _BlinkOkLeds *****************
 14215 ;; Defined at:
 14216 ;;		line 24 in file "LedsApp.c"
 14217 ;; Parameters:    Size  Location     Type
 14218 ;;  state           1    wreg     enum E7594
 14219 ;; Auto vars:     Size  Location     Type
 14220 ;;  state           1   26[COMRAM] enum E7594
 14221 ;;  idx             2   27[COMRAM] int 
 14222 ;; Return value:  Size  Location     Type
 14223 ;;                  1    wreg      void 
 14224 ;; Registers used:
 14225 ;;		wreg, status,2, status,0
 14226 ;; Tracked objects:
 14227 ;;		On entry : 0/0
 14228 ;;		On exit  : 0/0
 14229 ;;		Unchanged: 0/0
 14230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14231 ;;      Params:         0       0       0       0       0       0       0
 14232 ;;      Locals:         3       0       0       0       0       0       0
 14233 ;;      Temps:          3       0       0       0       0       0       0
 14234 ;;      Totals:         6       0       0       0       0       0       0
 14235 ;;Total ram usage:        6 bytes
 14236 ;; Hardware stack levels used:    1
 14237 ;; Hardware stack levels required when called:    4
 14238 ;; This function calls:
 14239 ;;		Nothing
 14240 ;; This function is called by:
 14241 ;;		_main
 14242 ;; This function uses a non-reentrant model
 14243 ;;
 14244                           
 14245                           	psect	text83
 14246  003786                     __ptext83:
 14247                           	opt stack 0
 14248  003786                     _BlinkOkLeds:
 14249                           	opt stack 26
 14250                           
 14251                           ;incstack = 0
 14252                           ;BlinkOkLeds@state stored from wreg
 14253  003786  6E1B               	movwf	BlinkOkLeds@state,c
 14254                           
 14255                           ;LedsApp.c: 26: for(int idx = 0; idx < state; idx++)
 14256  003788  0E00               	movlw	0
 14257  00378A  6E1D               	movwf	BlinkOkLeds@idx+1,c
 14258  00378C  0E00               	movlw	0
 14259  00378E  6E1C               	movwf	BlinkOkLeds@idx,c
 14260  003790                     l6603:
 14261  003790  501B               	movf	BlinkOkLeds@state,w,c
 14262  003792  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14263  003794  6A19               	clrf	(??_BlinkOkLeds+1)& (0+255),c
 14264  003796  5018               	movf	??_BlinkOkLeds,w,c
 14265  003798  5C1C               	subwf	BlinkOkLeds@idx,w,c
 14266  00379A  501D               	movf	BlinkOkLeds@idx+1,w,c
 14267  00379C  0A80               	xorlw	128
 14268  00379E  6E1A               	movwf	(??_BlinkOkLeds+2)& (0+255),c
 14269  0037A0  5019               	movf	??_BlinkOkLeds+1,w,c
 14270  0037A2  0A80               	xorlw	128
 14271  0037A4  581A               	subwfb	(??_BlinkOkLeds+2)& (0+255),w,c
 14272  0037A6  B0D8               	btfsc	status,0,c
 14273  0037A8  0012               	return	
 14274                           
 14275                           ;LedsApp.c: 27: {
 14276                           ;LedsApp.c: 28: LATCbits.LATC0 = 0;
 14277  0037AA  908B               	bcf	3979,0,c	;volatile
 14278                           
 14279                           ;LedsApp.c: 29: _delay((unsigned long)((100)*(8000000/4000.0)));
 14280  0037AC  0E02               	movlw	2
 14281  0037AE  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 14282  0037B0  0E04               	movlw	4
 14283  0037B2  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14284  0037B4  0EBA               	movlw	186
 14285  0037B6                     u9147:
 14286  0037B6  2EE8               	decfsz	wreg,f,c
 14287  0037B8  D7FE               	bra	u9147
 14288  0037BA  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 14289  0037BC  D7FC               	bra	u9147
 14290  0037BE  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 14291  0037C0  D7FA               	bra	u9147
 14292  0037C2  D000               	nop2	
 14293                           
 14294                           ;LedsApp.c: 30: LATCbits.LATC0 = 1;
 14295  0037C4  808B               	bsf	3979,0,c	;volatile
 14296                           
 14297                           ;LedsApp.c: 31: _delay((unsigned long)((100)*(8000000/4000.0)));
 14298  0037C6  0E02               	movlw	2
 14299  0037C8  6E19               	movwf	(??_BlinkOkLeds+1)& (0+255),c
 14300  0037CA  0E04               	movlw	4
 14301  0037CC  6E18               	movwf	??_BlinkOkLeds& (0+255),c
 14302  0037CE  0EBA               	movlw	186
 14303  0037D0                     u9157:
 14304  0037D0  2EE8               	decfsz	wreg,f,c
 14305  0037D2  D7FE               	bra	u9157
 14306  0037D4  2E18               	decfsz	??_BlinkOkLeds& (0+255),f,c
 14307  0037D6  D7FC               	bra	u9157
 14308  0037D8  2E19               	decfsz	(??_BlinkOkLeds+1)& (0+255),f,c
 14309  0037DA  D7FA               	bra	u9157
 14310  0037DC  D000               	nop2	
 14311  0037DE  4A1C               	infsnz	BlinkOkLeds@idx,f,c
 14312  0037E0  2A1D               	incf	BlinkOkLeds@idx+1,f,c
 14313  0037E2  D7D6               	goto	l6603
 14314  0037E4                     __end_of_BlinkOkLeds:
 14315                           	opt stack 0
 14316                           tosu	equ	0xFFF
 14317                           tosh	equ	0xFFE
 14318                           tosl	equ	0xFFD
 14319                           pclath	equ	0xFFA
 14320                           tblptru	equ	0xFF8
 14321                           tblptrh	equ	0xFF7
 14322                           tblptrl	equ	0xFF6
 14323                           tablat	equ	0xFF5
 14324                           prodh	equ	0xFF4
 14325                           prodl	equ	0xFF3
 14326                           intcon	equ	0xFF2
 14327                           intcon2	equ	0xFF1
 14328                           postinc0	equ	0xFEE
 14329                           plusw0	equ	0xFEB
 14330                           wreg	equ	0xFE8
 14331                           indf1	equ	0xFE7
 14332                           postdec1	equ	0xFE5
 14333                           fsr1h	equ	0xFE2
 14334                           fsr1l	equ	0xFE1
 14335                           indf2	equ	0xFDF
 14336                           postinc2	equ	0xFDE
 14337                           postdec2	equ	0xFDD
 14338                           plusw2	equ	0xFDB
 14339                           fsr2h	equ	0xFDA
 14340                           fsr2l	equ	0xFD9
 14341                           status	equ	0xFD8
 14342                           
 14343 ;; *************** function _AdcConvert *****************
 14344 ;; Defined at:
 14345 ;;		line 43 in file "AdcApp.c"
 14346 ;; Parameters:    Size  Location     Type
 14347 ;;		None
 14348 ;; Auto vars:     Size  Location     Type
 14349 ;;  _adcResult      2   83[BANK0 ] unsigned int 
 14350 ;;  _adcResult      2   85[BANK0 ] unsigned int 
 14351 ;;  adcRes          2   94[BANK0 ] unsigned int 
 14352 ;;  ldTxSate        2   89[BANK0 ] unsigned int 
 14353 ;;  ldRxSate        2   87[BANK0 ] unsigned int 
 14354 ;;  idx             1   96[BANK0 ] unsigned char 
 14355 ;; Return value:  Size  Location     Type
 14356 ;;                  1    wreg      void 
 14357 ;; Registers used:
 14358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14359 ;; Tracked objects:
 14360 ;;		On entry : 0/0
 14361 ;;		On exit  : 0/0
 14362 ;;		Unchanged: 0/0
 14363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14364 ;;      Params:         0       0       0       0       0       0       0
 14365 ;;      Locals:         0      14       0       0       0       0       0
 14366 ;;      Temps:          0       2       0       0       0       0       0
 14367 ;;      Totals:         0      16       0       0       0       0       0
 14368 ;;Total ram usage:       16 bytes
 14369 ;; Hardware stack levels used:    1
 14370 ;; Hardware stack levels required when called:    9
 14371 ;; This function calls:
 14372 ;;		_ADC_GetConversion
 14373 ;;		_FlashSampleWrite
 14374 ;;		_GetUint16FromBitArray
 14375 ;;		___ftdiv
 14376 ;;		___ftmul
 14377 ;;		___fttol
 14378 ;;		___lwtoft
 14379 ;;		_pow
 14380 ;; This function is called by:
 14381 ;;		_main
 14382 ;; This function uses a non-reentrant model
 14383 ;;
 14384                           
 14385                           	psect	text84
 14386  000F66                     __ptext84:
 14387                           	opt stack 0
 14388  000F66                     _AdcConvert:
 14389                           	opt stack 21
 14390                           
 14391                           ;AdcApp.c: 48: uint16_t adcRes = 0;
 14392                           
 14393                           ;incstack = 0
 14394  000F66  0E00               	movlw	0
 14395  000F68  0100               	movlb	0	; () banked
 14396  000F6A  6FBF               	movwf	(AdcConvert@adcRes+1)& (0+255),b
 14397  000F6C  0E00               	movlw	0
 14398  000F6E  6FBE               	movwf	AdcConvert@adcRes& (0+255),b
 14399                           
 14400                           ;AdcApp.c: 49: uint8_t idx = 0;
 14401  000F70  0E00               	movlw	0
 14402  000F72  6FC0               	movwf	AdcConvert@idx& (0+255),b
 14403                           
 14404                           ;AdcApp.c: 50: uint16_t ldRxSate = 0, ldTxSate = 0;
 14405  000F74  0E00               	movlw	0
 14406  000F76  6FB8               	movwf	(AdcConvert@ldRxSate+1)& (0+255),b
 14407  000F78  0E00               	movlw	0
 14408  000F7A  6FB7               	movwf	AdcConvert@ldRxSate& (0+255),b
 14409  000F7C  0E00               	movlw	0
 14410  000F7E  6FBA               	movwf	(AdcConvert@ldTxSate+1)& (0+255),b
 14411  000F80  0E00               	movlw	0
 14412  000F82  6FB9               	movwf	AdcConvert@ldTxSate& (0+255),b
 14413                           
 14414                           ;AdcApp.c: 51: if (adcSampleMode == CIRCULAR)
 14415  000F84  503D               	movf	_adcSampleMode,w,c
 14416  000F86  A4D8               	btfss	status,2,c
 14417  000F88  D0A3               	goto	l126
 14418                           
 14419                           ; BSR set to: 0
 14420                           ;AdcApp.c: 52: {
 14421                           ;AdcApp.c: 53: for(idx = 0; idx < (9); idx++)
 14422  000F8A  0E00               	movlw	0
 14423  000F8C  6FC0               	movwf	AdcConvert@idx& (0+255),b
 14424  000F8E                     l8719:
 14425                           
 14426                           ; BSR set to: 0
 14427  000F8E  0E08               	movlw	8
 14428  000F90  65C0               	cpfsgt	AdcConvert@idx& (0+255),b
 14429  000F92  D001               	goto	l127
 14430  000F94  D06D               	goto	u8790
 14431  000F96                     l127:
 14432                           
 14433                           ; BSR set to: 0
 14434                           ;AdcApp.c: 54: {
 14435                           ;AdcApp.c: 55: adc_result_t _adcResult = ADC_GetConversion(channelArr[idx]);
 14436                           
 14437                           ; BSR set to: 0
 14438  000F96  51C0               	movf	AdcConvert@idx& (0+255),w,b
 14439  000F98  0D01               	mullw	1
 14440  000F9A  0E42               	movlw	low _channelArr
 14441  000F9C  24F3               	addwf	prodl,w,c
 14442  000F9E  6EF6               	movwf	tblptrl,c
 14443  000FA0  0E06               	movlw	high _channelArr
 14444  000FA2  20F4               	addwfc	prodh,w,c
 14445  000FA4  6EF7               	movwf	tblptrh,c
 14446  000FA6                     	if	0	;There are less than 3 active tblptr bytes
 14447  000FA6                     	endif
 14448  000FA6  0008               	tblrd		*
 14449  000FA8  50F5               	movf	tablat,w,c
 14450  000FAA  ECDF  F01F         	call	_ADC_GetConversion
 14451  000FAE  C018  F0B3         	movff	?_ADC_GetConversion,AdcConvert@_adcResult
 14452  000FB2  C019  F0B4         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult+1
 14453                           
 14454                           ;AdcApp.c: 56: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14455  000FB6  0E00               	movlw	0
 14456  000FB8  0100               	movlb	0	; () banked
 14457  000FBA  6FA3               	movwf	pow@y& (0+255),b
 14458  000FBC  0E20               	movlw	32
 14459  000FBE  6FA4               	movwf	(pow@y+1)& (0+255),b
 14460  000FC0  0E41               	movlw	65
 14461  000FC2  6FA5               	movwf	(pow@y+2)& (0+255),b
 14462  000FC4  0E00               	movlw	0
 14463  000FC6  6FA0               	movwf	pow@x& (0+255),b
 14464  000FC8  0E00               	movlw	0
 14465  000FCA  6FA1               	movwf	(pow@x+1)& (0+255),b
 14466  000FCC  0E40               	movlw	64
 14467  000FCE  6FA2               	movwf	(pow@x+2)& (0+255),b
 14468  000FD0  EC78  F00D         	call	_pow	;wreg free
 14469  000FD4  C0A0  F0BB         	movff	?_pow,_AdcConvert$3587
 14470  000FD8  C0A1  F0BC         	movff	?_pow+1,_AdcConvert$3587+1
 14471  000FDC  C0A2  F0BD         	movff	?_pow+2,_AdcConvert$3587+2
 14472                           
 14473                           ;AdcApp.c: 56: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14474  000FE0  0EC0               	movlw	192
 14475  000FE2  0100               	movlb	0	; () banked
 14476  000FE4  6F6C               	movwf	___ftmul@f2& (0+255),b
 14477  000FE6  0E50               	movlw	80
 14478  000FE8  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14479  000FEA  0E45               	movlw	69
 14480  000FEC  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14481  000FEE  C0BB  F02C         	movff	_AdcConvert$3587,___ftdiv@f2
 14482  000FF2  C0BC  F02D         	movff	_AdcConvert$3587+1,___ftdiv@f2+1
 14483  000FF6  C0BD  F02E         	movff	_AdcConvert$3587+2,___ftdiv@f2+2
 14484  000FFA  C0B3  F020         	movff	AdcConvert@_adcResult,___lwtoft@c
 14485  000FFE  C0B4  F021         	movff	AdcConvert@_adcResult+1,___lwtoft@c+1
 14486  001002  EC96  F020         	call	___lwtoft	;wreg free
 14487  001006  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 14488  00100A  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 14489  00100E  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 14490  001012  ECA2  F012         	call	___ftdiv	;wreg free
 14491  001016  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14492  00101A  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14493  00101E  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14494  001022  EC27  F012         	call	___ftmul	;wreg free
 14495  001026  C069  F078         	movff	?___ftmul,___fttol@f1
 14496  00102A  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 14497  00102E  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 14498  001032  ECAB  F011         	call	___fttol	;wreg free
 14499  001036  C078  F0BE         	movff	?___fttol,AdcConvert@adcRes
 14500  00103A  C079  F0BF         	movff	?___fttol+1,AdcConvert@adcRes+1
 14501                           
 14502                           ;AdcApp.c: 57: FlashSampleWrite(adcRes, idx + 1);
 14503  00103E  C0BE  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 14504  001042  C0BF  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 14505  001046  0100               	movlb	0	; () banked
 14506  001048  29C0               	incf	AdcConvert@idx& (0+255),w,b
 14507  00104A  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14508  00104C  EC2B  F011         	call	_FlashSampleWrite	;wreg free
 14509                           
 14510                           ;AdcApp.c: 58: _delay((unsigned long)((250)*(8000000/4000.0)));
 14511  001050  0E03               	movlw	3
 14512  001052  0100               	movlb	0	; () banked
 14513  001054  6FB2               	movwf	(??_AdcConvert+1)& (0+255),b
 14514  001056  0E8A               	movlw	138
 14515  001058  6FB1               	movwf	??_AdcConvert& (0+255),b
 14516  00105A  0E55               	movlw	85
 14517  00105C                     u9167:
 14518  00105C  2EE8               	decfsz	wreg,f,c
 14519  00105E  D7FE               	bra	u9167
 14520  001060  2FB1               	decfsz	??_AdcConvert& (0+255),f,b
 14521  001062  D7FC               	bra	u9167
 14522  001064  2FB2               	decfsz	(??_AdcConvert+1)& (0+255),f,b
 14523  001066  D7FA               	bra	u9167
 14524  001068  D000               	nop2	
 14525  00106A  0100               	movlb	0	; () banked
 14526  00106C  2BC0               	incf	AdcConvert@idx& (0+255),f,b
 14527  00106E  D78F               	goto	l8719
 14528  001070                     u8790:
 14529                           
 14530                           ; BSR set to: 0
 14531                           ;AdcApp.c: 59: }
 14532                           ;AdcApp.c: 62: ldRxSate = GetUint16FromBitArray(synthLdRxArray, 12);
 14533                           
 14534                           ; BSR set to: 0
 14535  001070  0EA6               	movlw	low _synthLdRxArray
 14536  001072  6E18               	movwf	GetUint16FromBitArray@bitarray,c
 14537  001074  0E01               	movlw	high _synthLdRxArray
 14538  001076  6E19               	movwf	GetUint16FromBitArray@bitarray+1,c
 14539  001078  0E00               	movlw	0
 14540  00107A  6E1B               	movwf	GetUint16FromBitArray@numOfBits+1,c
 14541  00107C  0E0C               	movlw	12
 14542  00107E  6E1A               	movwf	GetUint16FromBitArray@numOfBits,c
 14543  001080  ECFB  F01A         	call	_GetUint16FromBitArray	;wreg free
 14544  001084  C018  F0B7         	movff	?_GetUint16FromBitArray,AdcConvert@ldRxSate
 14545  001088  C019  F0B8         	movff	?_GetUint16FromBitArray+1,AdcConvert@ldRxSate+1
 14546                           
 14547                           ;AdcApp.c: 63: FlashSampleWrite(ldRxSate, idx + 1);
 14548  00108C  C0B7  F02D         	movff	AdcConvert@ldRxSate,FlashSampleWrite@sampleData
 14549  001090  C0B8  F02E         	movff	AdcConvert@ldRxSate+1,FlashSampleWrite@sampleData+1
 14550  001094  0100               	movlb	0	; () banked
 14551  001096  29C0               	incf	AdcConvert@idx& (0+255),w,b
 14552  001098  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14553  00109A  EC2B  F011         	call	_FlashSampleWrite	;wreg free
 14554                           
 14555                           ;AdcApp.c: 64: ldTxSate = GetUint16FromBitArray(synthLdTxArray, 12);
 14556  00109E  0E9A               	movlw	low _synthLdTxArray
 14557  0010A0  6E18               	movwf	GetUint16FromBitArray@bitarray,c
 14558  0010A2  0E01               	movlw	high _synthLdTxArray
 14559  0010A4  6E19               	movwf	GetUint16FromBitArray@bitarray+1,c
 14560  0010A6  0E00               	movlw	0
 14561  0010A8  6E1B               	movwf	GetUint16FromBitArray@numOfBits+1,c
 14562  0010AA  0E0C               	movlw	12
 14563  0010AC  6E1A               	movwf	GetUint16FromBitArray@numOfBits,c
 14564  0010AE  ECFB  F01A         	call	_GetUint16FromBitArray	;wreg free
 14565  0010B2  C018  F0B9         	movff	?_GetUint16FromBitArray,AdcConvert@ldTxSate
 14566  0010B6  C019  F0BA         	movff	?_GetUint16FromBitArray+1,AdcConvert@ldTxSate+1
 14567                           
 14568                           ;AdcApp.c: 65: FlashSampleWrite(ldTxSate, idx + 2);
 14569  0010BA  C0B9  F02D         	movff	AdcConvert@ldTxSate,FlashSampleWrite@sampleData
 14570  0010BE  C0BA  F02E         	movff	AdcConvert@ldTxSate+1,FlashSampleWrite@sampleData+1
 14571  0010C2  0100               	movlb	0	; () banked
 14572  0010C4  51C0               	movf	AdcConvert@idx& (0+255),w,b
 14573  0010C6  0F02               	addlw	2
 14574  0010C8  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14575  0010CA  EC2B  F011         	call	_FlashSampleWrite	;wreg free
 14576                           
 14577                           ;AdcApp.c: 67: }
 14578  0010CE  0012               	return	
 14579  0010D0                     l126:
 14580                           
 14581                           ;AdcApp.c: 68: else if (adcSampleMode == SINGLE_CHANNEL)
 14582  0010D0  043D               	decf	_adcSampleMode,w,c
 14583  0010D2  A4D8               	btfss	status,2,c
 14584  0010D4  0012               	return	
 14585                           
 14586                           ;AdcApp.c: 69: {
 14587                           ;AdcApp.c: 70: adc_result_t _adcResult = ADC_GetConversion(channelArr[channel]);
 14588  0010D6  0100               	movlb	0	; () banked
 14589  0010D8  51FA               	movf	_channel& (0+255),w,b
 14590  0010DA  0D01               	mullw	1
 14591  0010DC  0E42               	movlw	low _channelArr
 14592  0010DE  24F3               	addwf	prodl,w,c
 14593  0010E0  6EF6               	movwf	tblptrl,c
 14594  0010E2  0E06               	movlw	high _channelArr
 14595  0010E4  20F4               	addwfc	prodh,w,c
 14596  0010E6  6EF7               	movwf	tblptrh,c
 14597  0010E8                     	if	0	;There are less than 3 active tblptr bytes
 14598  0010E8                     	endif
 14599  0010E8  0008               	tblrd		*
 14600  0010EA  50F5               	movf	tablat,w,c
 14601  0010EC  ECDF  F01F         	call	_ADC_GetConversion
 14602  0010F0  C018  F0B5         	movff	?_ADC_GetConversion,AdcConvert@_adcResult_348
 14603  0010F4  C019  F0B6         	movff	?_ADC_GetConversion+1,AdcConvert@_adcResult_348+1
 14604                           
 14605                           ;AdcApp.c: 71: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14606  0010F8  0E00               	movlw	0
 14607  0010FA  0100               	movlb	0	; () banked
 14608  0010FC  6FA3               	movwf	pow@y& (0+255),b
 14609  0010FE  0E20               	movlw	32
 14610  001100  6FA4               	movwf	(pow@y+1)& (0+255),b
 14611  001102  0E41               	movlw	65
 14612  001104  6FA5               	movwf	(pow@y+2)& (0+255),b
 14613  001106  0E00               	movlw	0
 14614  001108  6FA0               	movwf	pow@x& (0+255),b
 14615  00110A  0E00               	movlw	0
 14616  00110C  6FA1               	movwf	(pow@x+1)& (0+255),b
 14617  00110E  0E40               	movlw	64
 14618  001110  6FA2               	movwf	(pow@x+2)& (0+255),b
 14619  001112  EC78  F00D         	call	_pow	;wreg free
 14620  001116  C0A0  F0BB         	movff	?_pow,_AdcConvert$3587
 14621  00111A  C0A1  F0BC         	movff	?_pow+1,_AdcConvert$3587+1
 14622  00111E  C0A2  F0BD         	movff	?_pow+2,_AdcConvert$3587+2
 14623                           
 14624                           ;AdcApp.c: 71: adcRes = (_adcResult/pow(2,(10)))*(3340);
 14625  001122  0EC0               	movlw	192
 14626  001124  0100               	movlb	0	; () banked
 14627  001126  6F6C               	movwf	___ftmul@f2& (0+255),b
 14628  001128  0E50               	movlw	80
 14629  00112A  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 14630  00112C  0E45               	movlw	69
 14631  00112E  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 14632  001130  C0BB  F02C         	movff	_AdcConvert$3587,___ftdiv@f2
 14633  001134  C0BC  F02D         	movff	_AdcConvert$3587+1,___ftdiv@f2+1
 14634  001138  C0BD  F02E         	movff	_AdcConvert$3587+2,___ftdiv@f2+2
 14635  00113C  C0B5  F020         	movff	AdcConvert@_adcResult_348,___lwtoft@c
 14636  001140  C0B6  F021         	movff	AdcConvert@_adcResult_348+1,___lwtoft@c+1
 14637  001144  EC96  F020         	call	___lwtoft	;wreg free
 14638  001148  C020  F029         	movff	?___lwtoft,___ftdiv@f1
 14639  00114C  C021  F02A         	movff	?___lwtoft+1,___ftdiv@f1+1
 14640  001150  C022  F02B         	movff	?___lwtoft+2,___ftdiv@f1+2
 14641  001154  ECA2  F012         	call	___ftdiv	;wreg free
 14642  001158  C029  F069         	movff	?___ftdiv,___ftmul@f1
 14643  00115C  C02A  F06A         	movff	?___ftdiv+1,___ftmul@f1+1
 14644  001160  C02B  F06B         	movff	?___ftdiv+2,___ftmul@f1+2
 14645  001164  EC27  F012         	call	___ftmul	;wreg free
 14646  001168  C069  F078         	movff	?___ftmul,___fttol@f1
 14647  00116C  C06A  F079         	movff	?___ftmul+1,___fttol@f1+1
 14648  001170  C06B  F07A         	movff	?___ftmul+2,___fttol@f1+2
 14649  001174  ECAB  F011         	call	___fttol	;wreg free
 14650  001178  C078  F0BE         	movff	?___fttol,AdcConvert@adcRes
 14651  00117C  C079  F0BF         	movff	?___fttol+1,AdcConvert@adcRes+1
 14652                           
 14653                           ;AdcApp.c: 72: FlashSampleWrite(adcRes, 1);
 14654  001180  C0BE  F02D         	movff	AdcConvert@adcRes,FlashSampleWrite@sampleData
 14655  001184  C0BF  F02E         	movff	AdcConvert@adcRes+1,FlashSampleWrite@sampleData+1
 14656  001188  0E01               	movlw	1
 14657  00118A  6E2F               	movwf	FlashSampleWrite@channelNum,c
 14658  00118C  EC2B  F011         	call	_FlashSampleWrite	;wreg free
 14659  001190  0012               	return	
 14660  001192                     __end_of_AdcConvert:
 14661                           	opt stack 0
 14662                           tosu	equ	0xFFF
 14663                           tosh	equ	0xFFE
 14664                           tosl	equ	0xFFD
 14665                           pclath	equ	0xFFA
 14666                           tblptru	equ	0xFF8
 14667                           tblptrh	equ	0xFF7
 14668                           tblptrl	equ	0xFF6
 14669                           tablat	equ	0xFF5
 14670                           prodh	equ	0xFF4
 14671                           prodl	equ	0xFF3
 14672                           intcon	equ	0xFF2
 14673                           intcon2	equ	0xFF1
 14674                           postinc0	equ	0xFEE
 14675                           plusw0	equ	0xFEB
 14676                           wreg	equ	0xFE8
 14677                           indf1	equ	0xFE7
 14678                           postdec1	equ	0xFE5
 14679                           fsr1h	equ	0xFE2
 14680                           fsr1l	equ	0xFE1
 14681                           indf2	equ	0xFDF
 14682                           postinc2	equ	0xFDE
 14683                           postdec2	equ	0xFDD
 14684                           plusw2	equ	0xFDB
 14685                           fsr2h	equ	0xFDA
 14686                           fsr2l	equ	0xFD9
 14687                           status	equ	0xFD8
 14688                           
 14689 ;; *************** function _pow *****************
 14690 ;; Defined at:
 14691 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\pow.c"
 14692 ;; Parameters:    Size  Location     Type
 14693 ;;  x               3   64[BANK0 ] void 
 14694 ;;  y               3   67[BANK0 ] void 
 14695 ;; Auto vars:     Size  Location     Type
 14696 ;;  yi              4   77[BANK0 ] unsigned long 
 14697 ;;  sign            1   76[BANK0 ] unsigned char 
 14698 ;; Return value:  Size  Location     Type
 14699 ;;                  3   64[BANK0 ] unsigned char 
 14700 ;; Registers used:
 14701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14702 ;; Tracked objects:
 14703 ;;		On entry : 0/0
 14704 ;;		On exit  : 0/0
 14705 ;;		Unchanged: 0/0
 14706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14707 ;;      Params:         0       6       0       0       0       0       0
 14708 ;;      Locals:         0      11       0       0       0       0       0
 14709 ;;      Temps:          0       0       0       0       0       0       0
 14710 ;;      Totals:         0      17       0       0       0       0       0
 14711 ;;Total ram usage:       17 bytes
 14712 ;; Hardware stack levels used:    1
 14713 ;; Hardware stack levels required when called:    8
 14714 ;; This function calls:
 14715 ;;		___ftge
 14716 ;;		___ftmul
 14717 ;;		___ftneg
 14718 ;;		___fttol
 14719 ;;		___lltoft
 14720 ;;		_exp
 14721 ;;		_log
 14722 ;; This function is called by:
 14723 ;;		_AdcConvert
 14724 ;;		_ReadIntFromEeprom
 14725 ;; This function uses a non-reentrant model
 14726 ;;
 14727                           
 14728                           	psect	text85
 14729  001AF0                     __ptext85:
 14730                           	opt stack 0
 14731  001AF0                     _pow:
 14732                           	opt stack 18
 14733                           
 14734                           ;incstack = 0
 14735  001AF0  0E00               	movlw	0
 14736  001AF2  0100               	movlb	0	; () banked
 14737  001AF4  6FAC               	movwf	pow@sign& (0+255),b
 14738                           
 14739                           ; BSR set to: 0
 14740  001AF6  51A0               	movf	pow@x& (0+255),w,b
 14741  001AF8  11A1               	iorwf	(pow@x+1)& (0+255),w,b
 14742  001AFA  11A2               	iorwf	(pow@x+2)& (0+255),w,b
 14743  001AFC  A4D8               	btfss	status,2,c
 14744  001AFE  D01D               	goto	l2036
 14745                           
 14746                           ; BSR set to: 0
 14747  001B00  0E00               	movlw	0
 14748  001B02  6E18               	movwf	___ftge@ff1,c
 14749  001B04  0E00               	movlw	0
 14750  001B06  6E19               	movwf	___ftge@ff1+1,c
 14751  001B08  0E00               	movlw	0
 14752  001B0A  6E1A               	movwf	___ftge@ff1+2,c
 14753  001B0C  C0A3  F01B         	movff	pow@y,___ftge@ff2
 14754  001B10  C0A4  F01C         	movff	pow@y+1,___ftge@ff2+1
 14755  001B14  C0A5  F01D         	movff	pow@y+2,___ftge@ff2+2
 14756  001B18  ECCB  F018         	call	___ftge	;wreg free
 14757  001B1C  A0D8               	btfss	status,0,c
 14758  001B1E  D005               	goto	l2037
 14759  001B20  0E00               	movlw	0
 14760  001B22  0101               	movlb	1	; () banked
 14761  001B24  6F31               	movwf	(_errno+1)& (0+255),b
 14762  001B26  0E21               	movlw	33
 14763  001B28  6F30               	movwf	_errno& (0+255),b
 14764  001B2A                     l2037:
 14765  001B2A  0E00               	movlw	0
 14766  001B2C  0100               	movlb	0	; () banked
 14767  001B2E  6FA0               	movwf	?_pow& (0+255),b
 14768  001B30  0E00               	movlw	0
 14769  001B32  6FA1               	movwf	(?_pow+1)& (0+255),b
 14770  001B34  0E00               	movlw	0
 14771  001B36  6FA2               	movwf	(?_pow+2)& (0+255),b
 14772                           
 14773                           ; BSR set to: 0
 14774  001B38  0012               	return	
 14775  001B3A                     l2036:
 14776                           
 14777                           ; BSR set to: 0
 14778                           
 14779                           ; BSR set to: 0
 14780  001B3A  51A3               	movf	pow@y& (0+255),w,b
 14781  001B3C  11A4               	iorwf	(pow@y+1)& (0+255),w,b
 14782  001B3E  11A5               	iorwf	(pow@y+2)& (0+255),w,b
 14783  001B40  A4D8               	btfss	status,2,c
 14784  001B42  D007               	goto	l2039
 14785                           
 14786                           ; BSR set to: 0
 14787  001B44  0E00               	movlw	0
 14788  001B46  6FA0               	movwf	?_pow& (0+255),b
 14789  001B48  0E80               	movlw	128
 14790  001B4A  6FA1               	movwf	(?_pow+1)& (0+255),b
 14791  001B4C  0E3F               	movlw	63
 14792  001B4E  6FA2               	movwf	(?_pow+2)& (0+255),b
 14793                           
 14794                           ; BSR set to: 0
 14795  001B50  0012               	return	
 14796  001B52                     l2039:
 14797                           
 14798                           ; BSR set to: 0
 14799                           
 14800                           ; BSR set to: 0
 14801  001B52  AFA2               	btfss	(pow@x+2)& (0+255),7,b
 14802  001B54  D043               	goto	l2040
 14803                           
 14804                           ; BSR set to: 0
 14805  001B56  C0A3  F078         	movff	pow@y,___fttol@f1
 14806  001B5A  C0A4  F079         	movff	pow@y+1,___fttol@f1+1
 14807  001B5E  C0A5  F07A         	movff	pow@y+2,___fttol@f1+2
 14808  001B62  ECAB  F011         	call	___fttol	;wreg free
 14809  001B66  C078  F0AD         	movff	?___fttol,pow@yi
 14810  001B6A  C079  F0AE         	movff	?___fttol+1,pow@yi+1
 14811  001B6E  C07A  F0AF         	movff	?___fttol+2,pow@yi+2
 14812  001B72  C07B  F0B0         	movff	?___fttol+3,pow@yi+3
 14813  001B76  C0AD  F020         	movff	pow@yi,___lltoft@c
 14814  001B7A  C0AE  F021         	movff	pow@yi+1,___lltoft@c+1
 14815  001B7E  C0AF  F022         	movff	pow@yi+2,___lltoft@c+2
 14816  001B82  C0B0  F023         	movff	pow@yi+3,___lltoft@c+3
 14817  001B86  EC20  F01C         	call	___lltoft	;wreg free
 14818  001B8A  0100               	movlb	0	; () banked
 14819  001B8C  51A3               	movf	pow@y& (0+255),w,b
 14820  001B8E  1820               	xorwf	?___lltoft,w,c
 14821  001B90  E107               	bnz	u7390
 14822  001B92  51A4               	movf	(pow@y+1)& (0+255),w,b
 14823  001B94  1821               	xorwf	?___lltoft+1,w,c
 14824  001B96  E104               	bnz	u7390
 14825  001B98  51A5               	movf	(pow@y+2)& (0+255),w,b
 14826  001B9A  1822               	xorwf	?___lltoft+2,w,c
 14827  001B9C  B4D8               	btfsc	status,2,c
 14828  001B9E  D00D               	goto	l2041
 14829  001BA0                     u7390:
 14830                           
 14831                           ; BSR set to: 0
 14832  001BA0  0E00               	movlw	0
 14833  001BA2  0101               	movlb	1	; () banked
 14834  001BA4  6F31               	movwf	(_errno+1)& (0+255),b
 14835  001BA6  0E21               	movlw	33
 14836  001BA8  6F30               	movwf	_errno& (0+255),b
 14837  001BAA  0E00               	movlw	0
 14838  001BAC  0100               	movlb	0	; () banked
 14839  001BAE  6FA0               	movwf	?_pow& (0+255),b
 14840  001BB0  0E00               	movlw	0
 14841  001BB2  6FA1               	movwf	(?_pow+1)& (0+255),b
 14842  001BB4  0E00               	movlw	0
 14843  001BB6  6FA2               	movwf	(?_pow+2)& (0+255),b
 14844                           
 14845                           ; BSR set to: 0
 14846  001BB8  0012               	return	
 14847  001BBA                     l2041:
 14848                           
 14849                           ; BSR set to: 0
 14850                           
 14851                           ; BSR set to: 0
 14852  001BBA  51AD               	movf	pow@yi& (0+255),w,b
 14853  001BBC  0B01               	andlw	1
 14854  001BBE  6FAC               	movwf	pow@sign& (0+255),b
 14855                           
 14856                           ; BSR set to: 0
 14857  001BC0  C0A0  F018         	movff	pow@x,___ftneg@f1
 14858  001BC4  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 14859  001BC8  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 14860  001BCC  EC84  F020         	call	___ftneg	;wreg free
 14861  001BD0  C018  F0A0         	movff	?___ftneg,pow@x
 14862  001BD4  C019  F0A1         	movff	?___ftneg+1,pow@x+1
 14863  001BD8  C01A  F0A2         	movff	?___ftneg+2,pow@x+2
 14864  001BDC                     l2040:
 14865  001BDC  C0A0  F08E         	movff	pow@x,log@x
 14866  001BE0  C0A1  F08F         	movff	pow@x+1,log@x+1
 14867  001BE4  C0A2  F090         	movff	pow@x+2,log@x+2
 14868  001BE8  ECF6  F00E         	call	_log	;wreg free
 14869  001BEC  C08E  F0A6         	movff	?_log,_pow$3590
 14870  001BF0  C08F  F0A7         	movff	?_log+1,_pow$3590+1
 14871  001BF4  C090  F0A8         	movff	?_log+2,_pow$3590+2
 14872  001BF8  C0A6  F069         	movff	_pow$3590,___ftmul@f1
 14873  001BFC  C0A7  F06A         	movff	_pow$3590+1,___ftmul@f1+1
 14874  001C00  C0A8  F06B         	movff	_pow$3590+2,___ftmul@f1+2
 14875  001C04  C0A3  F06C         	movff	pow@y,___ftmul@f2
 14876  001C08  C0A4  F06D         	movff	pow@y+1,___ftmul@f2+1
 14877  001C0C  C0A5  F06E         	movff	pow@y+2,___ftmul@f2+2
 14878  001C10  EC27  F012         	call	___ftmul	;wreg free
 14879  001C14  C069  F0A9         	movff	?___ftmul,_pow$3591
 14880  001C18  C06A  F0AA         	movff	?___ftmul+1,_pow$3591+1
 14881  001C1C  C06B  F0AB         	movff	?___ftmul+2,_pow$3591+2
 14882  001C20  C0A9  F097         	movff	_pow$3591,exp@x
 14883  001C24  C0AA  F098         	movff	_pow$3591+1,exp@x+1
 14884  001C28  C0AB  F099         	movff	_pow$3591+2,exp@x+2
 14885  001C2C  ECC7  F009         	call	_exp	;wreg free
 14886  001C30  C097  F0A0         	movff	?_exp,pow@x
 14887  001C34  C098  F0A1         	movff	?_exp+1,pow@x+1
 14888  001C38  C099  F0A2         	movff	?_exp+2,pow@x+2
 14889  001C3C  0100               	movlb	0	; () banked
 14890  001C3E  51AC               	movf	pow@sign& (0+255),w,b
 14891  001C40  B4D8               	btfsc	status,2,c
 14892  001C42  D00F               	goto	l2042
 14893                           
 14894                           ; BSR set to: 0
 14895  001C44  C0A0  F018         	movff	pow@x,___ftneg@f1
 14896  001C48  C0A1  F019         	movff	pow@x+1,___ftneg@f1+1
 14897  001C4C  C0A2  F01A         	movff	pow@x+2,___ftneg@f1+2
 14898  001C50  EC84  F020         	call	___ftneg	;wreg free
 14899  001C54  C018  F0A0         	movff	?___ftneg,?_pow
 14900  001C58  C019  F0A1         	movff	?___ftneg+1,?_pow+1
 14901  001C5C  C01A  F0A2         	movff	?___ftneg+2,?_pow+2
 14902  001C60  0012               	return	
 14903  001C62                     l2042:
 14904                           
 14905                           ; BSR set to: 0
 14906  001C62  C0A0  F0A0         	movff	pow@x,?_pow
 14907  001C66  C0A1  F0A1         	movff	pow@x+1,?_pow+1
 14908  001C6A  C0A2  F0A2         	movff	pow@x+2,?_pow+2
 14909  001C6E  0012               	return		;funcret
 14910  001C70                     __end_of_pow:
 14911                           	opt stack 0
 14912                           tosu	equ	0xFFF
 14913                           tosh	equ	0xFFE
 14914                           tosl	equ	0xFFD
 14915                           pclath	equ	0xFFA
 14916                           tblptru	equ	0xFF8
 14917                           tblptrh	equ	0xFF7
 14918                           tblptrl	equ	0xFF6
 14919                           tablat	equ	0xFF5
 14920                           prodh	equ	0xFF4
 14921                           prodl	equ	0xFF3
 14922                           intcon	equ	0xFF2
 14923                           intcon2	equ	0xFF1
 14924                           postinc0	equ	0xFEE
 14925                           plusw0	equ	0xFEB
 14926                           wreg	equ	0xFE8
 14927                           indf1	equ	0xFE7
 14928                           postdec1	equ	0xFE5
 14929                           fsr1h	equ	0xFE2
 14930                           fsr1l	equ	0xFE1
 14931                           indf2	equ	0xFDF
 14932                           postinc2	equ	0xFDE
 14933                           postdec2	equ	0xFDD
 14934                           plusw2	equ	0xFDB
 14935                           fsr2h	equ	0xFDA
 14936                           fsr2l	equ	0xFD9
 14937                           status	equ	0xFD8
 14938                           
 14939 ;; *************** function _log *****************
 14940 ;; Defined at:
 14941 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
 14942 ;; Parameters:    Size  Location     Type
 14943 ;;  x               3   46[BANK0 ] unsigned char 
 14944 ;; Auto vars:     Size  Location     Type
 14945 ;;  exponent        2   49[BANK0 ] int 
 14946 ;; Return value:  Size  Location     Type
 14947 ;;                  3   46[BANK0 ] int 
 14948 ;; Registers used:
 14949 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14950 ;; Tracked objects:
 14951 ;;		On entry : 0/0
 14952 ;;		On exit  : 0/0
 14953 ;;		Unchanged: 0/0
 14954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14955 ;;      Params:         0       3       0       0       0       0       0
 14956 ;;      Locals:         0       2       0       0       0       0       0
 14957 ;;      Temps:          0       0       0       0       0       0       0
 14958 ;;      Totals:         0       5       0       0       0       0       0
 14959 ;;Total ram usage:        5 bytes
 14960 ;; Hardware stack levels used:    1
 14961 ;; Hardware stack levels required when called:    7
 14962 ;; This function calls:
 14963 ;;		___awtoft
 14964 ;;		___ftadd
 14965 ;;		___ftmul
 14966 ;;		_eval_poly
 14967 ;;		_frexp
 14968 ;; This function is called by:
 14969 ;;		_pow
 14970 ;; This function uses a non-reentrant model
 14971 ;;
 14972                           
 14973                           	psect	text86
 14974  001DEC                     __ptext86:
 14975                           	opt stack 0
 14976  001DEC                     _log:
 14977                           	opt stack 18
 14978                           
 14979                           ;incstack = 0
 14980  001DEC  0100               	movlb	0	; () banked
 14981  001DEE  AF90               	btfss	(log@x+2)& (0+255),7,b
 14982  001DF0  D00D               	goto	l2298
 14983                           
 14984                           ; BSR set to: 0
 14985  001DF2  0E00               	movlw	0
 14986  001DF4  0101               	movlb	1	; () banked
 14987  001DF6  6F31               	movwf	(_errno+1)& (0+255),b
 14988  001DF8  0E21               	movlw	33
 14989  001DFA  6F30               	movwf	_errno& (0+255),b
 14990  001DFC  0E00               	movlw	0
 14991  001DFE  0100               	movlb	0	; () banked
 14992  001E00  6F8E               	movwf	?_log& (0+255),b
 14993  001E02  0E00               	movlw	0
 14994  001E04  6F8F               	movwf	(?_log+1)& (0+255),b
 14995  001E06  0E00               	movlw	0
 14996  001E08  6F90               	movwf	(?_log+2)& (0+255),b
 14997                           
 14998                           ; BSR set to: 0
 14999  001E0A  0012               	return	
 15000  001E0C                     l2298:
 15001                           
 15002                           ; BSR set to: 0
 15003                           
 15004                           ; BSR set to: 0
 15005  001E0C  518E               	movf	log@x& (0+255),w,b
 15006  001E0E  118F               	iorwf	(log@x+1)& (0+255),w,b
 15007  001E10  1190               	iorwf	(log@x+2)& (0+255),w,b
 15008  001E12  A4D8               	btfss	status,2,c
 15009  001E14  D00D               	goto	l2300
 15010                           
 15011                           ; BSR set to: 0
 15012  001E16  0E00               	movlw	0
 15013  001E18  0101               	movlb	1	; () banked
 15014  001E1A  6F31               	movwf	(_errno+1)& (0+255),b
 15015  001E1C  0E22               	movlw	34
 15016  001E1E  6F30               	movwf	_errno& (0+255),b
 15017  001E20  0E00               	movlw	0
 15018  001E22  0100               	movlb	0	; () banked
 15019  001E24  6F8E               	movwf	?_log& (0+255),b
 15020  001E26  0E00               	movlw	0
 15021  001E28  6F8F               	movwf	(?_log+1)& (0+255),b
 15022  001E2A  0E00               	movlw	0
 15023  001E2C  6F90               	movwf	(?_log+2)& (0+255),b
 15024                           
 15025                           ; BSR set to: 0
 15026  001E2E  0012               	return	
 15027  001E30                     l2300:
 15028                           
 15029                           ; BSR set to: 0
 15030                           
 15031                           ; BSR set to: 0
 15032  001E30  0E00               	movlw	0
 15033  001E32  6F6C               	movwf	___ftmul@f2& (0+255),b
 15034  001E34  0E00               	movlw	0
 15035  001E36  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 15036  001E38  0E40               	movlw	64
 15037  001E3A  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 15038  001E3C  0E91               	movlw	low log@exponent
 15039  001E3E  6E1B               	movwf	frexp@eptr,c
 15040  001E40  0E00               	movlw	high log@exponent
 15041  001E42  6E1C               	movwf	frexp@eptr+1,c
 15042  001E44  C08E  F018         	movff	log@x,frexp@value
 15043  001E48  C08F  F019         	movff	log@x+1,frexp@value+1
 15044  001E4C  C090  F01A         	movff	log@x+2,frexp@value+2
 15045  001E50  EC83  F018         	call	_frexp	;wreg free
 15046  001E54  C018  F069         	movff	?_frexp,___ftmul@f1
 15047  001E58  C019  F06A         	movff	?_frexp+1,___ftmul@f1+1
 15048  001E5C  C01A  F06B         	movff	?_frexp+2,___ftmul@f1+2
 15049  001E60  EC27  F012         	call	___ftmul	;wreg free
 15050  001E64  C069  F078         	movff	?___ftmul,___ftadd@f1
 15051  001E68  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 15052  001E6C  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 15053  001E70  0E00               	movlw	0
 15054  001E72  0100               	movlb	0	; () banked
 15055  001E74  6F7B               	movwf	___ftadd@f2& (0+255),b
 15056  001E76  0E80               	movlw	128
 15057  001E78  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 15058  001E7A  0EBF               	movlw	191
 15059  001E7C  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 15060  001E7E  ECA1  F00C         	call	___ftadd	;wreg free
 15061  001E82  C078  F08E         	movff	?___ftadd,log@x
 15062  001E86  C079  F08F         	movff	?___ftadd+1,log@x+1
 15063  001E8A  C07A  F090         	movff	?___ftadd+2,log@x+2
 15064  001E8E  0100               	movlb	0	; () banked
 15065  001E90  0791               	decf	log@exponent& (0+255),f,b
 15066  001E92  A0D8               	btfss	status,0,c
 15067  001E94  0792               	decf	(log@exponent+1)& (0+255),f,b
 15068                           
 15069                           ; BSR set to: 0
 15070  001E96  C08E  F084         	movff	log@x,eval_poly@x
 15071  001E9A  C08F  F085         	movff	log@x+1,eval_poly@x+1
 15072  001E9E  C090  F086         	movff	log@x+2,eval_poly@x+2
 15073  001EA2  0E75               	movlw	low log@coeff
 15074  001EA4  6F87               	movwf	eval_poly@d& (0+255),b
 15075  001EA6  0E06               	movlw	high log@coeff
 15076  001EA8  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 15077  001EAA  0E00               	movlw	0
 15078  001EAC  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 15079  001EAE  0E08               	movlw	8
 15080  001EB0  6F89               	movwf	eval_poly@n& (0+255),b
 15081  001EB2  EC48  F015         	call	_eval_poly	;wreg free
 15082  001EB6  C084  F08E         	movff	?_eval_poly,log@x
 15083  001EBA  C085  F08F         	movff	?_eval_poly+1,log@x+1
 15084  001EBE  C086  F090         	movff	?_eval_poly+2,log@x+2
 15085  001EC2  0E72               	movlw	114
 15086  001EC4  0100               	movlb	0	; () banked
 15087  001EC6  6F6C               	movwf	___ftmul@f2& (0+255),b
 15088  001EC8  0E31               	movlw	49
 15089  001ECA  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 15090  001ECC  0E3F               	movlw	63
 15091  001ECE  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 15092  001ED0  C091  F020         	movff	log@exponent,___awtoft@c
 15093  001ED4  C092  F021         	movff	log@exponent+1,___awtoft@c+1
 15094  001ED8  ECD8  F01E         	call	___awtoft	;wreg free
 15095  001EDC  C020  F069         	movff	?___awtoft,___ftmul@f1
 15096  001EE0  C021  F06A         	movff	?___awtoft+1,___ftmul@f1+1
 15097  001EE4  C022  F06B         	movff	?___awtoft+2,___ftmul@f1+2
 15098  001EE8  EC27  F012         	call	___ftmul	;wreg free
 15099  001EEC  C069  F078         	movff	?___ftmul,___ftadd@f1
 15100  001EF0  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 15101  001EF4  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 15102  001EF8  C08E  F07B         	movff	log@x,___ftadd@f2
 15103  001EFC  C08F  F07C         	movff	log@x+1,___ftadd@f2+1
 15104  001F00  C090  F07D         	movff	log@x+2,___ftadd@f2+2
 15105  001F04  ECA1  F00C         	call	___ftadd	;wreg free
 15106  001F08  C078  F08E         	movff	?___ftadd,?_log
 15107  001F0C  C079  F08F         	movff	?___ftadd+1,?_log+1
 15108  001F10  C07A  F090         	movff	?___ftadd+2,?_log+2
 15109  001F14  0012               	return	
 15110  001F16                     __end_of_log:
 15111                           	opt stack 0
 15112                           tosu	equ	0xFFF
 15113                           tosh	equ	0xFFE
 15114                           tosl	equ	0xFFD
 15115                           pclath	equ	0xFFA
 15116                           tblptru	equ	0xFF8
 15117                           tblptrh	equ	0xFF7
 15118                           tblptrl	equ	0xFF6
 15119                           tablat	equ	0xFF5
 15120                           prodh	equ	0xFF4
 15121                           prodl	equ	0xFF3
 15122                           intcon	equ	0xFF2
 15123                           intcon2	equ	0xFF1
 15124                           postinc0	equ	0xFEE
 15125                           plusw0	equ	0xFEB
 15126                           wreg	equ	0xFE8
 15127                           indf1	equ	0xFE7
 15128                           postdec1	equ	0xFE5
 15129                           fsr1h	equ	0xFE2
 15130                           fsr1l	equ	0xFE1
 15131                           indf2	equ	0xFDF
 15132                           postinc2	equ	0xFDE
 15133                           postdec2	equ	0xFDD
 15134                           plusw2	equ	0xFDB
 15135                           fsr2h	equ	0xFDA
 15136                           fsr2l	equ	0xFD9
 15137                           status	equ	0xFD8
 15138                           
 15139 ;; *************** function _exp *****************
 15140 ;; Defined at:
 15141 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\exp.c"
 15142 ;; Parameters:    Size  Location     Type
 15143 ;;  x               3   55[BANK0 ] int 
 15144 ;; Auto vars:     Size  Location     Type
 15145 ;;  exponent        2   61[BANK0 ] int 
 15146 ;;  sign            1   63[BANK0 ] unsigned char 
 15147 ;; Return value:  Size  Location     Type
 15148 ;;                  3   55[BANK0 ] unsigned char 
 15149 ;; Registers used:
 15150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15151 ;; Tracked objects:
 15152 ;;		On entry : 0/0
 15153 ;;		On exit  : 0/0
 15154 ;;		Unchanged: 0/0
 15155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15156 ;;      Params:         0       3       0       0       0       0       0
 15157 ;;      Locals:         0       6       0       0       0       0       0
 15158 ;;      Temps:          0       0       0       0       0       0       0
 15159 ;;      Totals:         0       9       0       0       0       0       0
 15160 ;;Total ram usage:        9 bytes
 15161 ;; Hardware stack levels used:    1
 15162 ;; Hardware stack levels required when called:    7
 15163 ;; This function calls:
 15164 ;;		___awtoft
 15165 ;;		___ftdiv
 15166 ;;		___ftge
 15167 ;;		___ftmul
 15168 ;;		___ftneg
 15169 ;;		___ftsub
 15170 ;;		___fttol
 15171 ;;		_eval_poly
 15172 ;;		_floor
 15173 ;;		_ldexp
 15174 ;; This function is called by:
 15175 ;;		_pow
 15176 ;; This function uses a non-reentrant model
 15177 ;;
 15178                           
 15179                           	psect	text87
 15180  00138E                     __ptext87:
 15181                           	opt stack 0
 15182  00138E                     _exp:
 15183                           	opt stack 18
 15184                           
 15185                           ;incstack = 0
 15186  00138E  0100               	movlb	0	; () banked
 15187  001390  5197               	movf	exp@x& (0+255),w,b
 15188  001392  1198               	iorwf	(exp@x+1)& (0+255),w,b
 15189  001394  1199               	iorwf	(exp@x+2)& (0+255),w,b
 15190  001396  A4D8               	btfss	status,2,c
 15191  001398  D007               	goto	l2234
 15192                           
 15193                           ; BSR set to: 0
 15194  00139A  0E00               	movlw	0
 15195  00139C  6F97               	movwf	?_exp& (0+255),b
 15196  00139E  0E80               	movlw	128
 15197  0013A0  6F98               	movwf	(?_exp+1)& (0+255),b
 15198  0013A2  0E3F               	movlw	63
 15199  0013A4  6F99               	movwf	(?_exp+2)& (0+255),b
 15200                           
 15201                           ; BSR set to: 0
 15202  0013A6  0012               	return	
 15203  0013A8                     l2234:
 15204                           
 15205                           ; BSR set to: 0
 15206                           
 15207                           ; BSR set to: 0
 15208  0013A8  0E72               	movlw	114
 15209  0013AA  6E18               	movwf	___ftge@ff1,c
 15210  0013AC  0E31               	movlw	49
 15211  0013AE  6E19               	movwf	___ftge@ff1+1,c
 15212  0013B0  0E44               	movlw	68
 15213  0013B2  6E1A               	movwf	___ftge@ff1+2,c
 15214  0013B4  C097  F01B         	movff	exp@x,___ftge@ff2
 15215  0013B8  C098  F01C         	movff	exp@x+1,___ftge@ff2+1
 15216  0013BC  C099  F01D         	movff	exp@x+2,___ftge@ff2+2
 15217  0013C0  ECCB  F018         	call	___ftge	;wreg free
 15218  0013C4  B0D8               	btfsc	status,0,c
 15219  0013C6  D00D               	goto	l2236
 15220  0013C8  0E00               	movlw	0
 15221  0013CA  0101               	movlb	1	; () banked
 15222  0013CC  6F31               	movwf	(_errno+1)& (0+255),b
 15223  0013CE  0E22               	movlw	34
 15224  0013D0  6F30               	movwf	_errno& (0+255),b
 15225  0013D2  0EFF               	movlw	255
 15226  0013D4  0100               	movlb	0	; () banked
 15227  0013D6  6F97               	movwf	?_exp& (0+255),b
 15228  0013D8  0E7F               	movlw	127
 15229  0013DA  6F98               	movwf	(?_exp+1)& (0+255),b
 15230  0013DC  0E7F               	movlw	127
 15231  0013DE  6F99               	movwf	(?_exp+2)& (0+255),b
 15232                           
 15233                           ; BSR set to: 0
 15234  0013E0  0012               	return	
 15235  0013E2                     l2236:
 15236                           
 15237                           ; BSR set to: 0
 15238  0013E2  C097  F018         	movff	exp@x,___ftge@ff1
 15239  0013E6  C098  F019         	movff	exp@x+1,___ftge@ff1+1
 15240  0013EA  C099  F01A         	movff	exp@x+2,___ftge@ff1+2
 15241  0013EE  0E49               	movlw	73
 15242  0013F0  6E1B               	movwf	___ftge@ff2,c
 15243  0013F2  0E3A               	movlw	58
 15244  0013F4  6E1C               	movwf	___ftge@ff2+1,c
 15245  0013F6  0EC4               	movlw	196
 15246  0013F8  6E1D               	movwf	___ftge@ff2+2,c
 15247  0013FA  ECCB  F018         	call	___ftge	;wreg free
 15248  0013FE  B0D8               	btfsc	status,0,c
 15249  001400  D00D               	goto	l2237
 15250  001402  0E00               	movlw	0
 15251  001404  0101               	movlb	1	; () banked
 15252  001406  6F31               	movwf	(_errno+1)& (0+255),b
 15253  001408  0E22               	movlw	34
 15254  00140A  6F30               	movwf	_errno& (0+255),b
 15255  00140C  0E00               	movlw	0
 15256  00140E  0100               	movlb	0	; () banked
 15257  001410  6F97               	movwf	?_exp& (0+255),b
 15258  001412  0E00               	movlw	0
 15259  001414  6F98               	movwf	(?_exp+1)& (0+255),b
 15260  001416  0E00               	movlw	0
 15261  001418  6F99               	movwf	(?_exp+2)& (0+255),b
 15262                           
 15263                           ; BSR set to: 0
 15264  00141A  0012               	return	
 15265  00141C                     l2237:
 15266                           
 15267                           ; BSR set to: 0
 15268  00141C  0100               	movlb	0	; () banked
 15269  00141E  AF99               	btfss	(exp@x+2)& (0+255),7,b
 15270  001420  D002               	goto	u7280
 15271  001422  0E01               	movlw	1
 15272  001424  D001               	goto	u7290
 15273  001426                     u7280:
 15274  001426  0E00               	movlw	0
 15275  001428                     u7290:
 15276  001428  6F9F               	movwf	exp@sign& (0+255),b
 15277                           
 15278                           ; BSR set to: 0
 15279  00142A  519F               	movf	exp@sign& (0+255),w,b
 15280  00142C  B4D8               	btfsc	status,2,c
 15281  00142E  D00E               	goto	l2238
 15282                           
 15283                           ; BSR set to: 0
 15284  001430  C097  F018         	movff	exp@x,___ftneg@f1
 15285  001434  C098  F019         	movff	exp@x+1,___ftneg@f1+1
 15286  001438  C099  F01A         	movff	exp@x+2,___ftneg@f1+2
 15287  00143C  EC84  F020         	call	___ftneg	;wreg free
 15288  001440  C018  F097         	movff	?___ftneg,exp@x
 15289  001444  C019  F098         	movff	?___ftneg+1,exp@x+1
 15290  001448  C01A  F099         	movff	?___ftneg+2,exp@x+2
 15291  00144C                     l2238:
 15292  00144C  C097  F069         	movff	exp@x,___ftmul@f1
 15293  001450  C098  F06A         	movff	exp@x+1,___ftmul@f1+1
 15294  001454  C099  F06B         	movff	exp@x+2,___ftmul@f1+2
 15295  001458  0EAA               	movlw	170
 15296  00145A  0100               	movlb	0	; () banked
 15297  00145C  6F6C               	movwf	___ftmul@f2& (0+255),b
 15298  00145E  0EB8               	movlw	184
 15299  001460  6F6D               	movwf	(___ftmul@f2+1)& (0+255),b
 15300  001462  0E3F               	movlw	63
 15301  001464  6F6E               	movwf	(___ftmul@f2+2)& (0+255),b
 15302  001466  EC27  F012         	call	___ftmul	;wreg free
 15303  00146A  C069  F097         	movff	?___ftmul,exp@x
 15304  00146E  C06A  F098         	movff	?___ftmul+1,exp@x+1
 15305  001472  C06B  F099         	movff	?___ftmul+2,exp@x+2
 15306  001476  C097  F08F         	movff	exp@x,floor@x
 15307  00147A  C098  F090         	movff	exp@x+1,floor@x+1
 15308  00147E  C099  F091         	movff	exp@x+2,floor@x+2
 15309  001482  EC6C  F014         	call	_floor	;wreg free
 15310  001486  C08F  F09A         	movff	?_floor,_exp$3592
 15311  00148A  C090  F09B         	movff	?_floor+1,_exp$3592+1
 15312  00148E  C091  F09C         	movff	?_floor+2,_exp$3592+2
 15313  001492  C09A  F078         	movff	_exp$3592,___fttol@f1
 15314  001496  C09B  F079         	movff	_exp$3592+1,___fttol@f1+1
 15315  00149A  C09C  F07A         	movff	_exp$3592+2,___fttol@f1+2
 15316  00149E  ECAB  F011         	call	___fttol	;wreg free
 15317  0014A2  C078  F09D         	movff	?___fttol,exp@exponent
 15318  0014A6  C079  F09E         	movff	?___fttol+1,exp@exponent+1
 15319  0014AA  C097  F084         	movff	exp@x,___ftsub@f1
 15320  0014AE  C098  F085         	movff	exp@x+1,___ftsub@f1+1
 15321  0014B2  C099  F086         	movff	exp@x+2,___ftsub@f1+2
 15322  0014B6  C09D  F020         	movff	exp@exponent,___awtoft@c
 15323  0014BA  C09E  F021         	movff	exp@exponent+1,___awtoft@c+1
 15324  0014BE  ECD8  F01E         	call	___awtoft	;wreg free
 15325  0014C2  C020  F087         	movff	?___awtoft,___ftsub@f2
 15326  0014C6  C021  F088         	movff	?___awtoft+1,___ftsub@f2+1
 15327  0014CA  C022  F089         	movff	?___awtoft+2,___ftsub@f2+2
 15328  0014CE  ECE5  F01D         	call	___ftsub	;wreg free
 15329  0014D2  C084  F097         	movff	?___ftsub,exp@x
 15330  0014D6  C085  F098         	movff	?___ftsub+1,exp@x+1
 15331  0014DA  C086  F099         	movff	?___ftsub+2,exp@x+2
 15332  0014DE  C097  F084         	movff	exp@x,eval_poly@x
 15333  0014E2  C098  F085         	movff	exp@x+1,eval_poly@x+1
 15334  0014E6  C099  F086         	movff	exp@x+2,eval_poly@x+2
 15335  0014EA  0E57               	movlw	low exp@coeff
 15336  0014EC  0100               	movlb	0	; () banked
 15337  0014EE  6F87               	movwf	eval_poly@d& (0+255),b
 15338  0014F0  0E06               	movlw	high exp@coeff
 15339  0014F2  6F88               	movwf	(eval_poly@d+1)& (0+255),b
 15340  0014F4  0E00               	movlw	0
 15341  0014F6  6F8A               	movwf	(eval_poly@n+1)& (0+255),b
 15342  0014F8  0E09               	movlw	9
 15343  0014FA  6F89               	movwf	eval_poly@n& (0+255),b
 15344  0014FC  EC48  F015         	call	_eval_poly	;wreg free
 15345  001500  C084  F08E         	movff	?_eval_poly,ldexp@value
 15346  001504  C085  F08F         	movff	?_eval_poly+1,ldexp@value+1
 15347  001508  C086  F090         	movff	?_eval_poly+2,ldexp@value+2
 15348  00150C  C09D  F091         	movff	exp@exponent,ldexp@newexp
 15349  001510  C09E  F092         	movff	exp@exponent+1,ldexp@newexp+1
 15350  001514  ECB3  F015         	call	_ldexp	;wreg free
 15351  001518  C08E  F097         	movff	?_ldexp,exp@x
 15352  00151C  C08F  F098         	movff	?_ldexp+1,exp@x+1
 15353  001520  C090  F099         	movff	?_ldexp+2,exp@x+2
 15354  001524  0100               	movlb	0	; () banked
 15355  001526  519F               	movf	exp@sign& (0+255),w,b
 15356  001528  B4D8               	btfsc	status,2,c
 15357  00152A  D025               	goto	l2239
 15358                           
 15359                           ; BSR set to: 0
 15360  00152C  2997               	incf	exp@x& (0+255),w,b
 15361  00152E  E10E               	bnz	l7571
 15362  001530  0E7F               	movlw	127
 15363  001532  1998               	xorwf	(exp@x+1)& (0+255),w,b
 15364  001534  E10B               	bnz	l7571
 15365  001536  0E7F               	movlw	127
 15366  001538  1999               	xorwf	(exp@x+2)& (0+255),w,b
 15367  00153A  A4D8               	btfss	status,2,c
 15368  00153C  D007               	goto	l2240
 15369                           
 15370                           ; BSR set to: 0
 15371  00153E  0E00               	movlw	0
 15372  001540  6F97               	movwf	?_exp& (0+255),b
 15373  001542  0E00               	movlw	0
 15374  001544  6F98               	movwf	(?_exp+1)& (0+255),b
 15375  001546  0E00               	movlw	0
 15376  001548  6F99               	movwf	(?_exp+2)& (0+255),b
 15377                           
 15378                           ; BSR set to: 0
 15379  00154A  0012               	return	
 15380  00154C                     l2240:
 15381  00154C                     l7571:
 15382                           
 15383                           ; BSR set to: 0
 15384  00154C  0E00               	movlw	0
 15385  00154E  6E29               	movwf	___ftdiv@f1,c
 15386  001550  0E80               	movlw	128
 15387  001552  6E2A               	movwf	___ftdiv@f1+1,c
 15388  001554  0E3F               	movlw	63
 15389  001556  6E2B               	movwf	___ftdiv@f1+2,c
 15390  001558  C097  F02C         	movff	exp@x,___ftdiv@f2
 15391  00155C  C098  F02D         	movff	exp@x+1,___ftdiv@f2+1
 15392  001560  C099  F02E         	movff	exp@x+2,___ftdiv@f2+2
 15393  001564  ECA2  F012         	call	___ftdiv	;wreg free
 15394  001568  C029  F097         	movff	?___ftdiv,?_exp
 15395  00156C  C02A  F098         	movff	?___ftdiv+1,?_exp+1
 15396  001570  C02B  F099         	movff	?___ftdiv+2,?_exp+2
 15397  001574  0012               	return	
 15398  001576                     l2239:
 15399                           
 15400                           ; BSR set to: 0
 15401  001576  C097  F097         	movff	exp@x,?_exp
 15402  00157A  C098  F098         	movff	exp@x+1,?_exp+1
 15403  00157E  C099  F099         	movff	exp@x+2,?_exp+2
 15404  001582  0012               	return		;funcret
 15405  001584                     __end_of_exp:
 15406                           	opt stack 0
 15407                           tosu	equ	0xFFF
 15408                           tosh	equ	0xFFE
 15409                           tosl	equ	0xFFD
 15410                           pclath	equ	0xFFA
 15411                           tblptru	equ	0xFF8
 15412                           tblptrh	equ	0xFF7
 15413                           tblptrl	equ	0xFF6
 15414                           tablat	equ	0xFF5
 15415                           prodh	equ	0xFF4
 15416                           prodl	equ	0xFF3
 15417                           intcon	equ	0xFF2
 15418                           intcon2	equ	0xFF1
 15419                           postinc0	equ	0xFEE
 15420                           plusw0	equ	0xFEB
 15421                           wreg	equ	0xFE8
 15422                           indf1	equ	0xFE7
 15423                           postdec1	equ	0xFE5
 15424                           fsr1h	equ	0xFE2
 15425                           fsr1l	equ	0xFE1
 15426                           indf2	equ	0xFDF
 15427                           postinc2	equ	0xFDE
 15428                           postdec2	equ	0xFDD
 15429                           plusw2	equ	0xFDB
 15430                           fsr2h	equ	0xFDA
 15431                           fsr2l	equ	0xFD9
 15432                           status	equ	0xFD8
 15433                           
 15434 ;; *************** function _ldexp *****************
 15435 ;; Defined at:
 15436 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 15437 ;; Parameters:    Size  Location     Type
 15438 ;;  value           3   46[BANK0 ] unsigned char 
 15439 ;;  newexp          2   49[BANK0 ] int 
 15440 ;; Auto vars:     Size  Location     Type
 15441 ;;		None
 15442 ;; Return value:  Size  Location     Type
 15443 ;;                  3   46[BANK0 ] int 
 15444 ;; Registers used:
 15445 ;;		wreg, status,2, status,0
 15446 ;; Tracked objects:
 15447 ;;		On entry : 0/0
 15448 ;;		On exit  : 0/0
 15449 ;;		Unchanged: 0/0
 15450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15451 ;;      Params:         0       5       0       0       0       0       0
 15452 ;;      Locals:         0       0       0       0       0       0       0
 15453 ;;      Temps:          0       2       0       0       0       0       0
 15454 ;;      Totals:         0       7       0       0       0       0       0
 15455 ;;Total ram usage:        7 bytes
 15456 ;; Hardware stack levels used:    1
 15457 ;; Hardware stack levels required when called:    4
 15458 ;; This function calls:
 15459 ;;		Nothing
 15460 ;; This function is called by:
 15461 ;;		_exp
 15462 ;; This function uses a non-reentrant model
 15463 ;;
 15464                           
 15465                           	psect	text88
 15466  002B66                     __ptext88:
 15467                           	opt stack 0
 15468  002B66                     _ldexp:
 15469                           	opt stack 20
 15470                           
 15471                           ;incstack = 0
 15472  002B66  0100               	movlb	0	; () banked
 15473  002B68  518E               	movf	ldexp@value& (0+255),w,b
 15474  002B6A  118F               	iorwf	(ldexp@value+1)& (0+255),w,b
 15475  002B6C  1190               	iorwf	(ldexp@value+2)& (0+255),w,b
 15476  002B6E  A4D8               	btfss	status,2,c
 15477  002B70  D007               	goto	l2258
 15478                           
 15479                           ; BSR set to: 0
 15480  002B72  0E00               	movlw	0
 15481  002B74  6F8E               	movwf	?_ldexp& (0+255),b
 15482  002B76  0E00               	movlw	0
 15483  002B78  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15484  002B7A  0E00               	movlw	0
 15485  002B7C  6F90               	movwf	(?_ldexp+2)& (0+255),b
 15486                           
 15487                           ; BSR set to: 0
 15488  002B7E  0012               	return	
 15489  002B80                     l2258:
 15490                           
 15491                           ; BSR set to: 0
 15492                           
 15493                           ; BSR set to: 0
 15494  002B80  5190               	movf	(ldexp@value+2)& (0+255),w,b
 15495  002B82  0B7F               	andlw	127
 15496  002B84  6F93               	movwf	??_ldexp& (0+255),b
 15497  002B86  6B94               	clrf	(??_ldexp+1)& (0+255),b
 15498  002B88  90D8               	bcf	status,0,c
 15499  002B8A  3793               	rlcf	??_ldexp& (0+255),f,b
 15500  002B8C  3794               	rlcf	(??_ldexp+1)& (0+255),f,b
 15501  002B8E  5193               	movf	??_ldexp& (0+255),w,b
 15502  002B90  2791               	addwf	ldexp@newexp& (0+255),f,b
 15503  002B92  5194               	movf	(??_ldexp+1)& (0+255),w,b
 15504  002B94  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 15505  002B96  AF8F               	btfss	(ldexp@value+1)& (0+255),7,b
 15506  002B98  D003               	goto	u7020
 15507  002B9A  6B93               	clrf	??_ldexp& (0+255),b
 15508  002B9C  2B93               	incf	??_ldexp& (0+255),f,b
 15509  002B9E  D002               	goto	u7028
 15510  002BA0                     u7020:
 15511  002BA0  0100               	movlb	0	; () banked
 15512  002BA2  6B93               	clrf	??_ldexp& (0+255),b
 15513  002BA4                     u7028:
 15514  002BA4  5193               	movf	??_ldexp& (0+255),w,b
 15515  002BA6  2791               	addwf	ldexp@newexp& (0+255),f,b
 15516  002BA8  0E00               	movlw	0
 15517  002BAA  2392               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 15518  002BAC  AF92               	btfss	(ldexp@newexp+1)& (0+255),7,b
 15519  002BAE  D00D               	goto	l2260
 15520                           
 15521                           ; BSR set to: 0
 15522  002BB0  0E00               	movlw	0
 15523  002BB2  0101               	movlb	1	; () banked
 15524  002BB4  6F31               	movwf	(_errno+1)& (0+255),b
 15525  002BB6  0E22               	movlw	34
 15526  002BB8  6F30               	movwf	_errno& (0+255),b
 15527  002BBA  0E00               	movlw	0
 15528  002BBC  0100               	movlb	0	; () banked
 15529  002BBE  6F8E               	movwf	?_ldexp& (0+255),b
 15530  002BC0  0E00               	movlw	0
 15531  002BC2  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15532  002BC4  0E00               	movlw	0
 15533  002BC6                     L4:
 15534  002BC6  6F90               	movwf	(?_ldexp+2)& (0+255),b
 15535                           
 15536                           ; BSR set to: 0
 15537  002BC8  0012               	return	
 15538  002BCA                     l2260:
 15539                           
 15540                           ; BSR set to: 0
 15541                           
 15542                           ; BSR set to: 0
 15543  002BCA  BF92               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 15544  002BCC  D017               	goto	l2262
 15545  002BCE  0592               	decf	(ldexp@newexp+1)& (0+255),w,b
 15546  002BD0  A0D8               	btfss	status,0,c
 15547  002BD2  D014               	goto	l2262
 15548                           
 15549                           ; BSR set to: 0
 15550  002BD4  0E00               	movlw	0
 15551  002BD6  0101               	movlb	1	; () banked
 15552  002BD8  6F31               	movwf	(_errno+1)& (0+255),b
 15553  002BDA  0E22               	movlw	34
 15554  002BDC  6F30               	movwf	_errno& (0+255),b
 15555                           
 15556                           ; BSR set to: 1
 15557  002BDE  0100               	movlb	0	; () banked
 15558  002BE0  AF90               	btfss	(ldexp@value+2)& (0+255),7,b
 15559  002BE2  D006               	goto	l2263
 15560                           
 15561                           ; BSR set to: 0
 15562  002BE4  0EFF               	movlw	255
 15563  002BE6  6F8E               	movwf	?_ldexp& (0+255),b
 15564  002BE8  0E7F               	movlw	127
 15565  002BEA  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15566  002BEC  0EFF               	movlw	255
 15567  002BEE  D7EB               	goto	L4
 15568  002BF0                     l2263:
 15569                           
 15570                           ; BSR set to: 0
 15571                           
 15572                           ; BSR set to: 0
 15573  002BF0  0EFF               	movlw	255
 15574  002BF2  6F8E               	movwf	?_ldexp& (0+255),b
 15575  002BF4  0E7F               	movlw	127
 15576  002BF6  6F8F               	movwf	(?_ldexp+1)& (0+255),b
 15577  002BF8  0E7F               	movlw	127
 15578  002BFA  D7E5               	goto	L4
 15579  002BFC                     l2262:
 15580                           
 15581                           ; BSR set to: 0
 15582                           
 15583                           ; BSR set to: 0
 15584  002BFC  3592               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 15585  002BFE  3192               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 15586  002C00  6F94               	movwf	(??_ldexp+1)& (0+255),b
 15587  002C02  3191               	rrcf	ldexp@newexp& (0+255),w,b
 15588  002C04  6F93               	movwf	??_ldexp& (0+255),b
 15589  002C06  5190               	movf	(ldexp@value+2)& (0+255),w,b
 15590  002C08  1993               	xorwf	??_ldexp& (0+255),w,b
 15591  002C0A  0B80               	andlw	-128
 15592  002C0C  1993               	xorwf	??_ldexp& (0+255),w,b
 15593  002C0E  6F90               	movwf	(ldexp@value+2)& (0+255),b
 15594  002C10  C091  F093         	movff	ldexp@newexp,??_ldexp
 15595  002C14  0E01               	movlw	1
 15596  002C16  1793               	andwf	??_ldexp& (0+255),f,b
 15597  002C18  3393               	rrcf	??_ldexp& (0+255),f,b
 15598  002C1A  3393               	rrcf	??_ldexp& (0+255),f,b
 15599  002C1C  518F               	movf	(ldexp@value+1)& (0+255),w,b
 15600  002C1E  1993               	xorwf	??_ldexp& (0+255),w,b
 15601  002C20  0B7F               	andlw	-129
 15602  002C22  1993               	xorwf	??_ldexp& (0+255),w,b
 15603  002C24  6F8F               	movwf	(ldexp@value+1)& (0+255),b
 15604                           
 15605                           ; BSR set to: 0
 15606                           
 15607                           ; BSR set to: 0
 15608                           
 15609                           ; BSR set to: 0
 15610  002C26  C08E  F08E         	movff	ldexp@value,?_ldexp
 15611  002C2A  C08F  F08F         	movff	ldexp@value+1,?_ldexp+1
 15612  002C2E  C090  F090         	movff	ldexp@value+2,?_ldexp+2
 15613  002C32  0012               	return	
 15614  002C34                     __end_of_ldexp:
 15615                           	opt stack 0
 15616                           tosu	equ	0xFFF
 15617                           tosh	equ	0xFFE
 15618                           tosl	equ	0xFFD
 15619                           pclath	equ	0xFFA
 15620                           tblptru	equ	0xFF8
 15621                           tblptrh	equ	0xFF7
 15622                           tblptrl	equ	0xFF6
 15623                           tablat	equ	0xFF5
 15624                           prodh	equ	0xFF4
 15625                           prodl	equ	0xFF3
 15626                           intcon	equ	0xFF2
 15627                           intcon2	equ	0xFF1
 15628                           postinc0	equ	0xFEE
 15629                           plusw0	equ	0xFEB
 15630                           wreg	equ	0xFE8
 15631                           indf1	equ	0xFE7
 15632                           postdec1	equ	0xFE5
 15633                           fsr1h	equ	0xFE2
 15634                           fsr1l	equ	0xFE1
 15635                           indf2	equ	0xFDF
 15636                           postinc2	equ	0xFDE
 15637                           postdec2	equ	0xFDD
 15638                           plusw2	equ	0xFDB
 15639                           fsr2h	equ	0xFDA
 15640                           fsr2l	equ	0xFD9
 15641                           status	equ	0xFD8
 15642                           
 15643 ;; *************** function _floor *****************
 15644 ;; Defined at:
 15645 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
 15646 ;; Parameters:    Size  Location     Type
 15647 ;;  x               3   47[BANK0 ] int 
 15648 ;; Auto vars:     Size  Location     Type
 15649 ;;  i               3   50[BANK0 ] int 
 15650 ;;  expon           2   53[BANK0 ] int 
 15651 ;; Return value:  Size  Location     Type
 15652 ;;                  3   47[BANK0 ] int 
 15653 ;; Registers used:
 15654 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15655 ;; Tracked objects:
 15656 ;;		On entry : 0/0
 15657 ;;		On exit  : 0/0
 15658 ;;		Unchanged: 0/0
 15659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15660 ;;      Params:         0       3       0       0       0       0       0
 15661 ;;      Locals:         0       5       0       0       0       0       0
 15662 ;;      Temps:          0       0       0       0       0       0       0
 15663 ;;      Totals:         0       8       0       0       0       0       0
 15664 ;;Total ram usage:        8 bytes
 15665 ;; Hardware stack levels used:    1
 15666 ;; Hardware stack levels required when called:    6
 15667 ;; This function calls:
 15668 ;;		___altoft
 15669 ;;		___ftadd
 15670 ;;		___ftge
 15671 ;;		___fttol
 15672 ;;		_frexp
 15673 ;; This function is called by:
 15674 ;;		_exp
 15675 ;; This function uses a non-reentrant model
 15676 ;;
 15677                           
 15678                           	psect	text89
 15679  0028D8                     __ptext89:
 15680                           	opt stack 0
 15681  0028D8                     _floor:
 15682                           	opt stack 18
 15683                           
 15684                           ; BSR set to: 0
 15685                           ;incstack = 0
 15686  0028D8  C08F  F018         	movff	floor@x,frexp@value
 15687  0028DC  C090  F019         	movff	floor@x+1,frexp@value+1
 15688  0028E0  C091  F01A         	movff	floor@x+2,frexp@value+2
 15689  0028E4  0E95               	movlw	low floor@expon
 15690  0028E6  6E1B               	movwf	frexp@eptr,c
 15691  0028E8  0E00               	movlw	high floor@expon
 15692  0028EA  6E1C               	movwf	frexp@eptr+1,c
 15693  0028EC  EC83  F018         	call	_frexp	;wreg free
 15694  0028F0  0100               	movlb	0	; () banked
 15695  0028F2  AF96               	btfss	(floor@expon+1)& (0+255),7,b
 15696  0028F4  D010               	goto	l2245
 15697                           
 15698                           ; BSR set to: 0
 15699  0028F6  AF91               	btfss	(floor@x+2)& (0+255),7,b
 15700  0028F8  D007               	goto	l2246
 15701                           
 15702                           ; BSR set to: 0
 15703  0028FA  0E00               	movlw	0
 15704  0028FC  6F8F               	movwf	?_floor& (0+255),b
 15705  0028FE  0E80               	movlw	128
 15706  002900  6F90               	movwf	(?_floor+1)& (0+255),b
 15707  002902  0EBF               	movlw	191
 15708  002904  6F91               	movwf	(?_floor+2)& (0+255),b
 15709                           
 15710                           ; BSR set to: 0
 15711  002906  0012               	return	
 15712  002908                     l2246:
 15713                           
 15714                           ; BSR set to: 0
 15715                           
 15716                           ; BSR set to: 0
 15717  002908  0E00               	movlw	0
 15718  00290A  6F8F               	movwf	?_floor& (0+255),b
 15719  00290C  0E00               	movlw	0
 15720  00290E  6F90               	movwf	(?_floor+1)& (0+255),b
 15721  002910  0E00               	movlw	0
 15722  002912  6F91               	movwf	(?_floor+2)& (0+255),b
 15723                           
 15724                           ; BSR set to: 0
 15725  002914  0012               	return	
 15726  002916                     l2245:
 15727                           
 15728                           ; BSR set to: 0
 15729                           
 15730                           ; BSR set to: 0
 15731  002916  5196               	movf	(floor@expon+1)& (0+255),w,b
 15732  002918  E104               	bnz	u6980
 15733  00291A  0E15               	movlw	21
 15734  00291C  5D95               	subwf	floor@expon& (0+255),w,b
 15735  00291E  A0D8               	btfss	status,0,c
 15736  002920  D007               	goto	l2248
 15737  002922                     u6980:
 15738                           
 15739                           ; BSR set to: 0
 15740  002922  C08F  F08F         	movff	floor@x,?_floor
 15741  002926  C090  F090         	movff	floor@x+1,?_floor+1
 15742  00292A  C091  F091         	movff	floor@x+2,?_floor+2
 15743  00292E  0012               	return	
 15744  002930                     l2248:
 15745                           
 15746                           ; BSR set to: 0
 15747                           
 15748                           ; BSR set to: 0
 15749  002930  C08F  F078         	movff	floor@x,___fttol@f1
 15750  002934  C090  F079         	movff	floor@x+1,___fttol@f1+1
 15751  002938  C091  F07A         	movff	floor@x+2,___fttol@f1+2
 15752  00293C  ECAB  F011         	call	___fttol	;wreg free
 15753  002940  C078  F087         	movff	?___fttol,___altoft@c
 15754  002944  C079  F088         	movff	?___fttol+1,___altoft@c+1
 15755  002948  C07A  F089         	movff	?___fttol+2,___altoft@c+2
 15756  00294C  C07B  F08A         	movff	?___fttol+3,___altoft@c+3
 15757  002950  EC17  F01A         	call	___altoft	;wreg free
 15758  002954  C087  F092         	movff	?___altoft,floor@i
 15759  002958  C088  F093         	movff	?___altoft+1,floor@i+1
 15760  00295C  C089  F094         	movff	?___altoft+2,floor@i+2
 15761  002960  C08F  F018         	movff	floor@x,___ftge@ff1
 15762  002964  C090  F019         	movff	floor@x+1,___ftge@ff1+1
 15763  002968  C091  F01A         	movff	floor@x+2,___ftge@ff1+2
 15764  00296C  C092  F01B         	movff	floor@i,___ftge@ff2
 15765  002970  C093  F01C         	movff	floor@i+1,___ftge@ff2+1
 15766  002974  C094  F01D         	movff	floor@i+2,___ftge@ff2+2
 15767  002978  ECCB  F018         	call	___ftge	;wreg free
 15768  00297C  B0D8               	btfsc	status,0,c
 15769  00297E  D016               	goto	l2249
 15770  002980  C092  F078         	movff	floor@i,___ftadd@f1
 15771  002984  C093  F079         	movff	floor@i+1,___ftadd@f1+1
 15772  002988  C094  F07A         	movff	floor@i+2,___ftadd@f1+2
 15773  00298C  0E00               	movlw	0
 15774  00298E  0100               	movlb	0	; () banked
 15775  002990  6F7B               	movwf	___ftadd@f2& (0+255),b
 15776  002992  0E80               	movlw	128
 15777  002994  6F7C               	movwf	(___ftadd@f2+1)& (0+255),b
 15778  002996  0EBF               	movlw	191
 15779  002998  6F7D               	movwf	(___ftadd@f2+2)& (0+255),b
 15780  00299A  ECA1  F00C         	call	___ftadd	;wreg free
 15781  00299E  C078  F08F         	movff	?___ftadd,?_floor
 15782  0029A2  C079  F090         	movff	?___ftadd+1,?_floor+1
 15783  0029A6  C07A  F091         	movff	?___ftadd+2,?_floor+2
 15784  0029AA  0012               	return	
 15785  0029AC                     l2249:
 15786  0029AC  C092  F08F         	movff	floor@i,?_floor
 15787  0029B0  C093  F090         	movff	floor@i+1,?_floor+1
 15788  0029B4  C094  F091         	movff	floor@i+2,?_floor+2
 15789  0029B8  0012               	return		;funcret
 15790  0029BA                     __end_of_floor:
 15791                           	opt stack 0
 15792                           tosu	equ	0xFFF
 15793                           tosh	equ	0xFFE
 15794                           tosl	equ	0xFFD
 15795                           pclath	equ	0xFFA
 15796                           tblptru	equ	0xFF8
 15797                           tblptrh	equ	0xFF7
 15798                           tblptrl	equ	0xFF6
 15799                           tablat	equ	0xFF5
 15800                           prodh	equ	0xFF4
 15801                           prodl	equ	0xFF3
 15802                           intcon	equ	0xFF2
 15803                           intcon2	equ	0xFF1
 15804                           postinc0	equ	0xFEE
 15805                           plusw0	equ	0xFEB
 15806                           wreg	equ	0xFE8
 15807                           indf1	equ	0xFE7
 15808                           postdec1	equ	0xFE5
 15809                           fsr1h	equ	0xFE2
 15810                           fsr1l	equ	0xFE1
 15811                           indf2	equ	0xFDF
 15812                           postinc2	equ	0xFDE
 15813                           postdec2	equ	0xFDD
 15814                           plusw2	equ	0xFDB
 15815                           fsr2h	equ	0xFDA
 15816                           fsr2l	equ	0xFD9
 15817                           status	equ	0xFD8
 15818                           
 15819 ;; *************** function _frexp *****************
 15820 ;; Defined at:
 15821 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
 15822 ;; Parameters:    Size  Location     Type
 15823 ;;  value           3   23[COMRAM] int 
 15824 ;;  eptr            2   26[COMRAM] PTR int 
 15825 ;;		 -> log@exponent(2), floor@expon(2), 
 15826 ;; Auto vars:     Size  Location     Type
 15827 ;;		None
 15828 ;; Return value:  Size  Location     Type
 15829 ;;                  3   23[COMRAM] PTR int 
 15830 ;; Registers used:
 15831 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15832 ;; Tracked objects:
 15833 ;;		On entry : 0/0
 15834 ;;		On exit  : 0/0
 15835 ;;		Unchanged: 0/0
 15836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15837 ;;      Params:         5       0       0       0       0       0       0
 15838 ;;      Locals:         0       0       0       0       0       0       0
 15839 ;;      Temps:          2       0       0       0       0       0       0
 15840 ;;      Totals:         7       0       0       0       0       0       0
 15841 ;;Total ram usage:        7 bytes
 15842 ;; Hardware stack levels used:    1
 15843 ;; Hardware stack levels required when called:    4
 15844 ;; This function calls:
 15845 ;;		Nothing
 15846 ;; This function is called by:
 15847 ;;		_floor
 15848 ;;		_log
 15849 ;; This function uses a non-reentrant model
 15850 ;;
 15851                           
 15852                           	psect	text90
 15853  003106                     __ptext90:
 15854                           	opt stack 0
 15855  003106                     _frexp:
 15856                           	opt stack 20
 15857                           
 15858                           ;incstack = 0
 15859  003106  5018               	movf	frexp@value,w,c
 15860  003108  1019               	iorwf	frexp@value+1,w,c
 15861  00310A  101A               	iorwf	frexp@value+2,w,c
 15862  00310C  A4D8               	btfss	status,2,c
 15863  00310E  D00F               	goto	l2254
 15864  003110  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15865  003114  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15866  003118  0E00               	movlw	0
 15867  00311A  6EDE               	movwf	postinc2,c
 15868  00311C  0E00               	movlw	0
 15869  00311E  6EDD               	movwf	postdec2,c
 15870  003120  0E00               	movlw	0
 15871  003122  6E18               	movwf	?_frexp,c
 15872  003124  0E00               	movlw	0
 15873  003126  6E19               	movwf	?_frexp+1,c
 15874  003128  0E00               	movlw	0
 15875  00312A  6E1A               	movwf	?_frexp+2,c
 15876  00312C  0012               	return	
 15877  00312E                     l2254:
 15878  00312E  501A               	movf	frexp@value+2,w,c
 15879  003130  0B7F               	andlw	127
 15880  003132  6E1D               	movwf	??_frexp& (0+255),c
 15881  003134  6A1E               	clrf	(??_frexp+1)& (0+255),c
 15882  003136  90D8               	bcf	status,0,c
 15883  003138  361D               	rlcf	??_frexp,f,c
 15884  00313A  361E               	rlcf	??_frexp+1,f,c
 15885  00313C  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15886  003140  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15887  003144  C01D  FFDE         	movff	??_frexp,postinc2
 15888  003148  C01E  FFDD         	movff	??_frexp+1,postdec2
 15889  00314C  AE19               	btfss	frexp@value+1,7,c
 15890  00314E  D003               	goto	u6860
 15891  003150  6A1D               	clrf	??_frexp& (0+255),c
 15892  003152  2A1D               	incf	??_frexp& (0+255),f,c
 15893  003154  D001               	goto	u6868
 15894  003156                     u6860:
 15895  003156  6A1D               	clrf	??_frexp& (0+255),c
 15896  003158                     u6868:
 15897  003158  501D               	movf	??_frexp,w,c
 15898  00315A  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15899  00315E  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15900  003162  12DE               	iorwf	postinc2,f,c
 15901  003164  0E00               	movlw	0
 15902  003166  12DD               	iorwf	postdec2,f,c
 15903  003168  C01B  FFD9         	movff	frexp@eptr,fsr2l
 15904  00316C  C01C  FFDA         	movff	frexp@eptr+1,fsr2h
 15905  003170  0E82               	movlw	130
 15906  003172  26DE               	addwf	postinc2,f,c
 15907  003174  0EFF               	movlw	255
 15908  003176  22DD               	addwfc	postdec2,f,c
 15909  003178  801A               	bsf	frexp@value+2,0,c
 15910  00317A  821A               	bsf	frexp@value+2,1,c
 15911  00317C  841A               	bsf	frexp@value+2,2,c
 15912  00317E  861A               	bsf	frexp@value+2,3,c
 15913  003180  881A               	bsf	frexp@value+2,4,c
 15914  003182  8A1A               	bsf	frexp@value+2,5,c
 15915  003184  9C1A               	bcf	frexp@value+2,6,c
 15916  003186  9E19               	bcf	frexp@value+1,7,c
 15917  003188  C018  F018         	movff	frexp@value,?_frexp
 15918  00318C  C019  F019         	movff	frexp@value+1,?_frexp+1
 15919  003190  C01A  F01A         	movff	frexp@value+2,?_frexp+2
 15920  003194  0012               	return	
 15921  003196                     __end_of_frexp:
 15922                           	opt stack 0
 15923                           tosu	equ	0xFFF
 15924                           tosh	equ	0xFFE
 15925                           tosl	equ	0xFFD
 15926                           pclath	equ	0xFFA
 15927                           tblptru	equ	0xFF8
 15928                           tblptrh	equ	0xFF7
 15929                           tblptrl	equ	0xFF6
 15930                           tablat	equ	0xFF5
 15931                           prodh	equ	0xFF4
 15932                           prodl	equ	0xFF3
 15933                           intcon	equ	0xFF2
 15934                           intcon2	equ	0xFF1
 15935                           postinc0	equ	0xFEE
 15936                           plusw0	equ	0xFEB
 15937                           wreg	equ	0xFE8
 15938                           indf1	equ	0xFE7
 15939                           postdec1	equ	0xFE5
 15940                           fsr1h	equ	0xFE2
 15941                           fsr1l	equ	0xFE1
 15942                           indf2	equ	0xFDF
 15943                           postinc2	equ	0xFDE
 15944                           postdec2	equ	0xFDD
 15945                           plusw2	equ	0xFDB
 15946                           fsr2h	equ	0xFDA
 15947                           fsr2l	equ	0xFD9
 15948                           status	equ	0xFD8
 15949                           
 15950 ;; *************** function ___fttol *****************
 15951 ;; Defined at:
 15952 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 15953 ;; Parameters:    Size  Location     Type
 15954 ;;  f1              3   24[BANK0 ] float 
 15955 ;; Auto vars:     Size  Location     Type
 15956 ;;  lval            4   34[BANK0 ] unsigned long 
 15957 ;;  exp1            1   38[BANK0 ] unsigned char 
 15958 ;;  sign1           1   33[BANK0 ] unsigned char 
 15959 ;; Return value:  Size  Location     Type
 15960 ;;                  4   24[BANK0 ] long 
 15961 ;; Registers used:
 15962 ;;		wreg, status,2, status,0
 15963 ;; Tracked objects:
 15964 ;;		On entry : 0/0
 15965 ;;		On exit  : 0/0
 15966 ;;		Unchanged: 0/0
 15967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15968 ;;      Params:         0       4       0       0       0       0       0
 15969 ;;      Locals:         0       6       0       0       0       0       0
 15970 ;;      Temps:          0       5       0       0       0       0       0
 15971 ;;      Totals:         0      15       0       0       0       0       0
 15972 ;;Total ram usage:       15 bytes
 15973 ;; Hardware stack levels used:    1
 15974 ;; Hardware stack levels required when called:    4
 15975 ;; This function calls:
 15976 ;;		Nothing
 15977 ;; This function is called by:
 15978 ;;		_AdcConvert
 15979 ;;		_ReadIntFromEeprom
 15980 ;;		_pow
 15981 ;;		_exp
 15982 ;;		_floor
 15983 ;; This function uses a non-reentrant model
 15984 ;;
 15985                           
 15986                           	psect	text91
 15987  002356                     __ptext91:
 15988                           	opt stack 0
 15989  002356                     ___fttol:
 15990                           	opt stack 19
 15991                           
 15992                           ;incstack = 0
 15993  002356  C07A  F07C         	movff	___fttol@f1+2,??___fttol
 15994  00235A  0100               	movlb	0	; () banked
 15995  00235C  6B7D               	clrf	(??___fttol+1)& (0+255),b
 15996  00235E  6B7E               	clrf	(??___fttol+2)& (0+255),b
 15997  002360  3579               	rlcf	(___fttol@f1+1)& (0+255),w,b
 15998  002362  377C               	rlcf	??___fttol& (0+255),f,b
 15999  002364  E301               	bnc	u6771
 16000  002366  817D               	bsf	(??___fttol+1)& (0+255),0,b
 16001  002368                     u6771:
 16002  002368  517C               	movf	??___fttol& (0+255),w,b
 16003  00236A  6F86               	movwf	___fttol@exp1& (0+255),b
 16004  00236C  5186               	movf	___fttol@exp1& (0+255),w,b
 16005  00236E  A4D8               	btfss	status,2,c
 16006  002370  D009               	goto	l1911
 16007                           
 16008                           ; BSR set to: 0
 16009  002372  0E00               	movlw	0
 16010  002374  6F78               	movwf	?___fttol& (0+255),b
 16011  002376  0E00               	movlw	0
 16012  002378  6F79               	movwf	(?___fttol+1)& (0+255),b
 16013  00237A  0E00               	movlw	0
 16014  00237C  6F7A               	movwf	(?___fttol+2)& (0+255),b
 16015  00237E  0E00               	movlw	0
 16016  002380  6F7B               	movwf	(?___fttol+3)& (0+255),b
 16017                           
 16018                           ; BSR set to: 0
 16019  002382  0012               	return	
 16020  002384                     l1911:
 16021                           
 16022                           ; BSR set to: 0
 16023                           
 16024                           ; BSR set to: 0
 16025  002384  0E17               	movlw	23
 16026  002386  6F7C               	movwf	??___fttol& (0+255),b
 16027  002388  C078  F07D         	movff	___fttol@f1,??___fttol+1
 16028  00238C  C079  F07E         	movff	___fttol@f1+1,??___fttol+2
 16029  002390  C07A  F07F         	movff	___fttol@f1+2,??___fttol+3
 16030  002394  297C               	incf	??___fttol& (0+255),w,b
 16031  002396  6F80               	movwf	(??___fttol+4)& (0+255),b
 16032  002398  D004               	goto	u6790
 16033  00239A                     u6795:
 16034  00239A  90D8               	bcf	status,0,c
 16035  00239C  337F               	rrcf	(??___fttol+3)& (0+255),f,b
 16036  00239E  337E               	rrcf	(??___fttol+2)& (0+255),f,b
 16037  0023A0  337D               	rrcf	(??___fttol+1)& (0+255),f,b
 16038  0023A2                     u6790:
 16039  0023A2  2F80               	decfsz	(??___fttol+4)& (0+255),f,b
 16040  0023A4  D7FA               	goto	u6795
 16041  0023A6  0100               	movlb	0	; () banked
 16042  0023A8  517D               	movf	(??___fttol+1)& (0+255),w,b
 16043  0023AA  6F81               	movwf	___fttol@sign1& (0+255),b
 16044                           
 16045                           ; BSR set to: 0
 16046  0023AC  8F79               	bsf	(___fttol@f1+1)& (0+255),7,b
 16047                           
 16048                           ; BSR set to: 0
 16049  0023AE  0EFF               	movlw	255
 16050  0023B0  1778               	andwf	___fttol@f1& (0+255),f,b
 16051  0023B2  0EFF               	movlw	255
 16052  0023B4  1779               	andwf	(___fttol@f1+1)& (0+255),f,b
 16053  0023B6  0E00               	movlw	0
 16054  0023B8  177A               	andwf	(___fttol@f1+2)& (0+255),f,b
 16055                           
 16056                           ; BSR set to: 0
 16057  0023BA  5178               	movf	___fttol@f1& (0+255),w,b
 16058  0023BC  6F82               	movwf	___fttol@lval& (0+255),b
 16059  0023BE  5179               	movf	(___fttol@f1+1)& (0+255),w,b
 16060  0023C0  6F83               	movwf	(___fttol@lval+1)& (0+255),b
 16061  0023C2  517A               	movf	(___fttol@f1+2)& (0+255),w,b
 16062  0023C4  6F84               	movwf	(___fttol@lval+2)& (0+255),b
 16063  0023C6  6B85               	clrf	(___fttol@lval+3)& (0+255),b
 16064                           
 16065                           ; BSR set to: 0
 16066  0023C8  0E8E               	movlw	142
 16067  0023CA  5F86               	subwf	___fttol@exp1& (0+255),f,b
 16068                           
 16069                           ; BSR set to: 0
 16070  0023CC  AF86               	btfss	___fttol@exp1& (0+255),7,b
 16071  0023CE  D016               	goto	l1913
 16072                           
 16073                           ; BSR set to: 0
 16074  0023D0  5186               	movf	___fttol@exp1& (0+255),w,b
 16075  0023D2  0A80               	xorlw	128
 16076  0023D4  0F8F               	addlw	143
 16077  0023D6  B0D8               	btfsc	status,0,c
 16078  0023D8  D009               	goto	l1914
 16079                           
 16080                           ; BSR set to: 0
 16081  0023DA  0E00               	movlw	0
 16082  0023DC  6F78               	movwf	?___fttol& (0+255),b
 16083  0023DE  0E00               	movlw	0
 16084  0023E0  6F79               	movwf	(?___fttol+1)& (0+255),b
 16085  0023E2  0E00               	movlw	0
 16086  0023E4  6F7A               	movwf	(?___fttol+2)& (0+255),b
 16087  0023E6  0E00               	movlw	0
 16088  0023E8  6F7B               	movwf	(?___fttol+3)& (0+255),b
 16089                           
 16090                           ; BSR set to: 0
 16091  0023EA  0012               	return	
 16092  0023EC                     l1914:
 16093                           
 16094                           ; BSR set to: 0
 16095                           
 16096                           ; BSR set to: 0
 16097                           
 16098                           ; BSR set to: 0
 16099  0023EC  90D8               	bcf	status,0,c
 16100  0023EE  3385               	rrcf	(___fttol@lval+3)& (0+255),f,b
 16101  0023F0  3384               	rrcf	(___fttol@lval+2)& (0+255),f,b
 16102  0023F2  3383               	rrcf	(___fttol@lval+1)& (0+255),f,b
 16103  0023F4  3382               	rrcf	___fttol@lval& (0+255),f,b
 16104                           
 16105                           ; BSR set to: 0
 16106  0023F6  3F86               	incfsz	___fttol@exp1& (0+255),f,b
 16107  0023F8  D7F9               	goto	l1914
 16108                           
 16109                           ; BSR set to: 0
 16110  0023FA  D015               	goto	u6830
 16111  0023FC                     l1913:
 16112                           
 16113                           ; BSR set to: 0
 16114                           
 16115                           ; BSR set to: 0
 16116  0023FC  0E17               	movlw	23
 16117  0023FE  6586               	cpfsgt	___fttol@exp1& (0+255),b
 16118  002400  D00F               	goto	l1919
 16119                           
 16120                           ; BSR set to: 0
 16121  002402  0E00               	movlw	0
 16122  002404  6F78               	movwf	?___fttol& (0+255),b
 16123  002406  0E00               	movlw	0
 16124  002408  6F79               	movwf	(?___fttol+1)& (0+255),b
 16125  00240A  0E00               	movlw	0
 16126  00240C  6F7A               	movwf	(?___fttol+2)& (0+255),b
 16127  00240E  0E00               	movlw	0
 16128  002410  6F7B               	movwf	(?___fttol+3)& (0+255),b
 16129                           
 16130                           ; BSR set to: 0
 16131  002412  0012               	return	
 16132  002414                     
 16133                           ; BSR set to: 0
 16134                           
 16135                           ; BSR set to: 0
 16136  002414  90D8               	bcf	status,0,c
 16137  002416  3782               	rlcf	___fttol@lval& (0+255),f,b
 16138  002418  3783               	rlcf	(___fttol@lval+1)& (0+255),f,b
 16139  00241A  3784               	rlcf	(___fttol@lval+2)& (0+255),f,b
 16140  00241C  3785               	rlcf	(___fttol@lval+3)& (0+255),f,b
 16141  00241E  0786               	decf	___fttol@exp1& (0+255),f,b
 16142  002420                     l1919:
 16143                           
 16144                           ; BSR set to: 0
 16145                           
 16146                           ; BSR set to: 0
 16147  002420  5186               	movf	___fttol@exp1& (0+255),w,b
 16148  002422  A4D8               	btfss	status,2,c
 16149  002424  D7F7               	goto	l1920
 16150  002426                     u6830:
 16151                           
 16152                           ; BSR set to: 0
 16153                           
 16154                           ; BSR set to: 0
 16155                           
 16156                           ; BSR set to: 0
 16157  002426  5181               	movf	___fttol@sign1& (0+255),w,b
 16158  002428  B4D8               	btfsc	status,2,c
 16159  00242A  D008               	goto	l1922
 16160                           
 16161                           ; BSR set to: 0
 16162  00242C  1F85               	comf	(___fttol@lval+3)& (0+255),f,b
 16163  00242E  1F84               	comf	(___fttol@lval+2)& (0+255),f,b
 16164  002430  1F83               	comf	(___fttol@lval+1)& (0+255),f,b
 16165  002432  6D82               	negf	___fttol@lval& (0+255),b
 16166  002434  0E00               	movlw	0
 16167  002436  2383               	addwfc	(___fttol@lval+1)& (0+255),f,b
 16168  002438  2384               	addwfc	(___fttol@lval+2)& (0+255),f,b
 16169  00243A  2385               	addwfc	(___fttol@lval+3)& (0+255),f,b
 16170  00243C                     l1922:
 16171                           
 16172                           ; BSR set to: 0
 16173                           
 16174                           ; BSR set to: 0
 16175  00243C  C082  F078         	movff	___fttol@lval,?___fttol
 16176  002440  C083  F079         	movff	___fttol@lval+1,?___fttol+1
 16177  002444  C084  F07A         	movff	___fttol@lval+2,?___fttol+2
 16178  002448  C085  F07B         	movff	___fttol@lval+3,?___fttol+3
 16179  00244C  0012               	return	
 16180  00244E                     __end_of___fttol:
 16181                           	opt stack 0
 16182                           tosu	equ	0xFFF
 16183                           tosh	equ	0xFFE
 16184                           tosl	equ	0xFFD
 16185                           pclath	equ	0xFFA
 16186                           tblptru	equ	0xFF8
 16187                           tblptrh	equ	0xFF7
 16188                           tblptrl	equ	0xFF6
 16189                           tablat	equ	0xFF5
 16190                           prodh	equ	0xFF4
 16191                           prodl	equ	0xFF3
 16192                           intcon	equ	0xFF2
 16193                           intcon2	equ	0xFF1
 16194                           postinc0	equ	0xFEE
 16195                           plusw0	equ	0xFEB
 16196                           wreg	equ	0xFE8
 16197                           indf1	equ	0xFE7
 16198                           postdec1	equ	0xFE5
 16199                           fsr1h	equ	0xFE2
 16200                           fsr1l	equ	0xFE1
 16201                           indf2	equ	0xFDF
 16202                           postinc2	equ	0xFDE
 16203                           postdec2	equ	0xFDD
 16204                           plusw2	equ	0xFDB
 16205                           fsr2h	equ	0xFDA
 16206                           fsr2l	equ	0xFD9
 16207                           status	equ	0xFD8
 16208                           
 16209 ;; *************** function ___ftge *****************
 16210 ;; Defined at:
 16211 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
 16212 ;; Parameters:    Size  Location     Type
 16213 ;;  ff1             3   23[COMRAM] float 
 16214 ;;  ff2             3   26[COMRAM] float 
 16215 ;; Auto vars:     Size  Location     Type
 16216 ;;		None
 16217 ;; Return value:  Size  Location     Type
 16218 ;;		None               void
 16219 ;; Registers used:
 16220 ;;		wreg, status,2, status,0
 16221 ;; Tracked objects:
 16222 ;;		On entry : 0/0
 16223 ;;		On exit  : 0/0
 16224 ;;		Unchanged: 0/0
 16225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16226 ;;      Params:         6       0       0       0       0       0       0
 16227 ;;      Locals:         0       0       0       0       0       0       0
 16228 ;;      Temps:          3       0       0       0       0       0       0
 16229 ;;      Totals:         9       0       0       0       0       0       0
 16230 ;;Total ram usage:        9 bytes
 16231 ;; Hardware stack levels used:    1
 16232 ;; Hardware stack levels required when called:    4
 16233 ;; This function calls:
 16234 ;;		Nothing
 16235 ;; This function is called by:
 16236 ;;		_CheckFlashPrecentage
 16237 ;;		_pow
 16238 ;;		_exp
 16239 ;;		_floor
 16240 ;; This function uses a non-reentrant model
 16241 ;;
 16242                           
 16243                           	psect	text92
 16244  003196                     __ptext92:
 16245                           	opt stack 0
 16246  003196                     ___ftge:
 16247                           	opt stack 19
 16248                           
 16249                           ; BSR set to: 0
 16250                           ;incstack = 0
 16251  003196  AE1A               	btfss	___ftge@ff1+2,7,c
 16252  003198  D016               	goto	l1883
 16253  00319A  C018  F01E         	movff	___ftge@ff1,??___ftge
 16254  00319E  C019  F01F         	movff	___ftge@ff1+1,??___ftge+1
 16255  0031A2  C01A  F020         	movff	___ftge@ff1+2,??___ftge+2
 16256  0031A6  1E1E               	comf	??___ftge,f,c
 16257  0031A8  1E1F               	comf	??___ftge+1,f,c
 16258  0031AA  1E20               	comf	??___ftge+2,f,c
 16259  0031AC  2A1E               	incf	??___ftge,f,c
 16260  0031AE  0E00               	movlw	0
 16261  0031B0  221F               	addwfc	??___ftge+1,f,c
 16262  0031B2  2220               	addwfc	??___ftge+2,f,c
 16263  0031B4  0E00               	movlw	0
 16264  0031B6  241E               	addwf	??___ftge,w,c
 16265  0031B8  6E18               	movwf	___ftge@ff1,c
 16266  0031BA  0E00               	movlw	0
 16267  0031BC  201F               	addwfc	??___ftge+1,w,c
 16268  0031BE  6E19               	movwf	___ftge@ff1+1,c
 16269  0031C0  0E80               	movlw	128
 16270  0031C2  2020               	addwfc	??___ftge+2,w,c
 16271  0031C4  6E1A               	movwf	___ftge@ff1+2,c
 16272  0031C6                     l1883:
 16273  0031C6  AE1D               	btfss	___ftge@ff2+2,7,c
 16274  0031C8  D016               	goto	l1884
 16275  0031CA  C01B  F01E         	movff	___ftge@ff2,??___ftge
 16276  0031CE  C01C  F01F         	movff	___ftge@ff2+1,??___ftge+1
 16277  0031D2  C01D  F020         	movff	___ftge@ff2+2,??___ftge+2
 16278  0031D6  1E1E               	comf	??___ftge,f,c
 16279  0031D8  1E1F               	comf	??___ftge+1,f,c
 16280  0031DA  1E20               	comf	??___ftge+2,f,c
 16281  0031DC  2A1E               	incf	??___ftge,f,c
 16282  0031DE  0E00               	movlw	0
 16283  0031E0  221F               	addwfc	??___ftge+1,f,c
 16284  0031E2  2220               	addwfc	??___ftge+2,f,c
 16285  0031E4  0E00               	movlw	0
 16286  0031E6  241E               	addwf	??___ftge,w,c
 16287  0031E8  6E1B               	movwf	___ftge@ff2,c
 16288  0031EA  0E00               	movlw	0
 16289  0031EC  201F               	addwfc	??___ftge+1,w,c
 16290  0031EE  6E1C               	movwf	___ftge@ff2+1,c
 16291  0031F0  0E80               	movlw	128
 16292  0031F2  2020               	addwfc	??___ftge+2,w,c
 16293  0031F4  6E1D               	movwf	___ftge@ff2+2,c
 16294  0031F6                     l1884:
 16295  0031F6  0E00               	movlw	0
 16296  0031F8  1A18               	xorwf	___ftge@ff1,f,c
 16297  0031FA  0E00               	movlw	0
 16298  0031FC  1A19               	xorwf	___ftge@ff1+1,f,c
 16299  0031FE  0E80               	movlw	128
 16300  003200  1A1A               	xorwf	___ftge@ff1+2,f,c
 16301  003202  0E00               	movlw	0
 16302  003204  1A1B               	xorwf	___ftge@ff2,f,c
 16303  003206  0E00               	movlw	0
 16304  003208  1A1C               	xorwf	___ftge@ff2+1,f,c
 16305  00320A  0E80               	movlw	128
 16306  00320C  1A1D               	xorwf	___ftge@ff2+2,f,c
 16307  00320E  501B               	movf	___ftge@ff2,w,c
 16308  003210  5C18               	subwf	___ftge@ff1,w,c
 16309  003212  501C               	movf	___ftge@ff2+1,w,c
 16310  003214  5819               	subwfb	___ftge@ff1+1,w,c
 16311  003216  501D               	movf	___ftge@ff2+2,w,c
 16312  003218  581A               	subwfb	___ftge@ff1+2,w,c
 16313  00321A  B0D8               	btfsc	status,0,c
 16314  00321C  D002               	goto	l7003
 16315  00321E  90D8               	bcf	status,0,c
 16316  003220  0012               	return	
 16317  003222                     l7003:
 16318  003222  80D8               	bsf	status,0,c
 16319  003224  0012               	return	
 16320  003226                     __end_of___ftge:
 16321                           	opt stack 0
 16322                           tosu	equ	0xFFF
 16323                           tosh	equ	0xFFE
 16324                           tosl	equ	0xFFD
 16325                           pclath	equ	0xFFA
 16326                           tblptru	equ	0xFF8
 16327                           tblptrh	equ	0xFF7
 16328                           tblptrl	equ	0xFF6
 16329                           tablat	equ	0xFF5
 16330                           prodh	equ	0xFF4
 16331                           prodl	equ	0xFF3
 16332                           intcon	equ	0xFF2
 16333                           intcon2	equ	0xFF1
 16334                           postinc0	equ	0xFEE
 16335                           plusw0	equ	0xFEB
 16336                           wreg	equ	0xFE8
 16337                           indf1	equ	0xFE7
 16338                           postdec1	equ	0xFE5
 16339                           fsr1h	equ	0xFE2
 16340                           fsr1l	equ	0xFE1
 16341                           indf2	equ	0xFDF
 16342                           postinc2	equ	0xFDE
 16343                           postdec2	equ	0xFDD
 16344                           plusw2	equ	0xFDB
 16345                           fsr2h	equ	0xFDA
 16346                           fsr2l	equ	0xFD9
 16347                           status	equ	0xFD8
 16348                           
 16349 ;; *************** function ___altoft *****************
 16350 ;; Defined at:
 16351 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\altoft.c"
 16352 ;; Parameters:    Size  Location     Type
 16353 ;;  c               4   39[BANK0 ] long 
 16354 ;; Auto vars:     Size  Location     Type
 16355 ;;  sign            1   47[COMRAM] unsigned char 
 16356 ;;  exp             1   46[COMRAM] unsigned char 
 16357 ;; Return value:  Size  Location     Type
 16358 ;;                  3   39[BANK0 ] float 
 16359 ;; Registers used:
 16360 ;;		wreg, status,2, status,0, cstack
 16361 ;; Tracked objects:
 16362 ;;		On entry : 0/0
 16363 ;;		On exit  : 0/0
 16364 ;;		Unchanged: 0/0
 16365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16366 ;;      Params:         0       4       0       0       0       0       0
 16367 ;;      Locals:         2       0       0       0       0       0       0
 16368 ;;      Temps:          0       4       0       0       0       0       0
 16369 ;;      Totals:         2       8       0       0       0       0       0
 16370 ;;Total ram usage:       10 bytes
 16371 ;; Hardware stack levels used:    1
 16372 ;; Hardware stack levels required when called:    5
 16373 ;; This function calls:
 16374 ;;		___ftpack
 16375 ;; This function is called by:
 16376 ;;		_floor
 16377 ;; This function uses a non-reentrant model
 16378 ;;
 16379                           
 16380                           	psect	text93
 16381  00342E                     __ptext93:
 16382                           	opt stack 0
 16383  00342E                     ___altoft:
 16384                           	opt stack 18
 16385                           
 16386                           ;incstack = 0
 16387  00342E  0E00               	movlw	0
 16388  003430  6E30               	movwf	___altoft@sign,c
 16389  003432  0E8E               	movlw	142
 16390  003434  6E2F               	movwf	___altoft@exp,c
 16391  003436  0100               	movlb	0	; () banked
 16392  003438  AF8A               	btfss	(___altoft@c+3)& (0+255),7,b
 16393  00343A  D011               	goto	l1681
 16394                           
 16395                           ; BSR set to: 0
 16396  00343C  1F8A               	comf	(___altoft@c+3)& (0+255),f,b
 16397  00343E  1F89               	comf	(___altoft@c+2)& (0+255),f,b
 16398  003440  1F88               	comf	(___altoft@c+1)& (0+255),f,b
 16399  003442  6D87               	negf	___altoft@c& (0+255),b
 16400  003444  0E00               	movlw	0
 16401  003446  2388               	addwfc	(___altoft@c+1)& (0+255),f,b
 16402  003448  2389               	addwfc	(___altoft@c+2)& (0+255),f,b
 16403  00344A  238A               	addwfc	(___altoft@c+3)& (0+255),f,b
 16404                           
 16405                           ; BSR set to: 0
 16406  00344C  0E01               	movlw	1
 16407  00344E  6E30               	movwf	___altoft@sign,c
 16408                           
 16409                           ; BSR set to: 0
 16410  003450  D006               	goto	l1681
 16411  003452                     
 16412                           ; BSR set to: 0
 16413                           
 16414                           ; BSR set to: 0
 16415  003452  90D8               	bcf	status,0,c
 16416  003454  338A               	rrcf	(___altoft@c+3)& (0+255),f,b
 16417  003456  3389               	rrcf	(___altoft@c+2)& (0+255),f,b
 16418  003458  3388               	rrcf	(___altoft@c+1)& (0+255),f,b
 16419  00345A  3387               	rrcf	___altoft@c& (0+255),f,b
 16420  00345C  2A2F               	incf	___altoft@exp,f,c
 16421  00345E                     l1681:
 16422                           
 16423                           ; BSR set to: 0
 16424                           
 16425                           ; BSR set to: 0
 16426  00345E  0E00               	movlw	0
 16427  003460  1587               	andwf	___altoft@c& (0+255),w,b
 16428  003462  6F8B               	movwf	??___altoft& (0+255),b
 16429  003464  0E00               	movlw	0
 16430  003466  1588               	andwf	(___altoft@c+1)& (0+255),w,b
 16431  003468  6F8C               	movwf	(??___altoft+1)& (0+255),b
 16432  00346A  0E00               	movlw	0
 16433  00346C  1589               	andwf	(___altoft@c+2)& (0+255),w,b
 16434  00346E  6F8D               	movwf	(??___altoft+2)& (0+255),b
 16435  003470  0EFF               	movlw	255
 16436  003472  158A               	andwf	(___altoft@c+3)& (0+255),w,b
 16437  003474  6F8E               	movwf	(??___altoft+3)& (0+255),b
 16438  003476  518B               	movf	??___altoft& (0+255),w,b
 16439  003478  118C               	iorwf	(??___altoft+1)& (0+255),w,b
 16440  00347A  118D               	iorwf	(??___altoft+2)& (0+255),w,b
 16441  00347C  118E               	iorwf	(??___altoft+3)& (0+255),w,b
 16442  00347E  A4D8               	btfss	status,2,c
 16443  003480  D7E8               	goto	l1682
 16444                           
 16445                           ; BSR set to: 0
 16446                           
 16447                           ; BSR set to: 0
 16448  003482  C087  F018         	movff	___altoft@c,___ftpack@arg
 16449  003486  C088  F019         	movff	___altoft@c+1,___ftpack@arg+1
 16450  00348A  C089  F01A         	movff	___altoft@c+2,___ftpack@arg+2
 16451  00348E  C02F  F01B         	movff	___altoft@exp,___ftpack@exp
 16452  003492  C030  F01C         	movff	___altoft@sign,___ftpack@sign
 16453  003496  EC32  F017         	call	___ftpack	;wreg free
 16454  00349A  C018  F087         	movff	?___ftpack,?___altoft
 16455  00349E  C019  F088         	movff	?___ftpack+1,?___altoft+1
 16456  0034A2  C01A  F089         	movff	?___ftpack+2,?___altoft+2
 16457  0034A6  0012               	return	
 16458  0034A8                     __end_of___altoft:
 16459                           	opt stack 0
 16460                           tosu	equ	0xFFF
 16461                           tosh	equ	0xFFE
 16462                           tosl	equ	0xFFD
 16463                           pclath	equ	0xFFA
 16464                           tblptru	equ	0xFF8
 16465                           tblptrh	equ	0xFF7
 16466                           tblptrl	equ	0xFF6
 16467                           tablat	equ	0xFF5
 16468                           prodh	equ	0xFF4
 16469                           prodl	equ	0xFF3
 16470                           intcon	equ	0xFF2
 16471                           intcon2	equ	0xFF1
 16472                           postinc0	equ	0xFEE
 16473                           plusw0	equ	0xFEB
 16474                           wreg	equ	0xFE8
 16475                           indf1	equ	0xFE7
 16476                           postdec1	equ	0xFE5
 16477                           fsr1h	equ	0xFE2
 16478                           fsr1l	equ	0xFE1
 16479                           indf2	equ	0xFDF
 16480                           postinc2	equ	0xFDE
 16481                           postdec2	equ	0xFDD
 16482                           plusw2	equ	0xFDB
 16483                           fsr2h	equ	0xFDA
 16484                           fsr2l	equ	0xFD9
 16485                           status	equ	0xFD8
 16486                           
 16487 ;; *************** function _eval_poly *****************
 16488 ;; Defined at:
 16489 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
 16490 ;; Parameters:    Size  Location     Type
 16491 ;;  x               3   36[BANK0 ] float 
 16492 ;;  d               2   39[BANK0 ] PTR const 
 16493 ;;		 -> log@coeff(27), exp@coeff(30), 
 16494 ;;  n               2   41[BANK0 ] int 
 16495 ;; Auto vars:     Size  Location     Type
 16496 ;;  res             3   43[BANK0 ] int 
 16497 ;; Return value:  Size  Location     Type
 16498 ;;                  3   36[BANK0 ] int 
 16499 ;; Registers used:
 16500 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16501 ;; Tracked objects:
 16502 ;;		On entry : 0/0
 16503 ;;		On exit  : 0/0
 16504 ;;		Unchanged: 0/0
 16505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16506 ;;      Params:         0       7       0       0       0       0       0
 16507 ;;      Locals:         0       3       0       0       0       0       0
 16508 ;;      Temps:          2       0       0       0       0       0       0
 16509 ;;      Totals:         2      10       0       0       0       0       0
 16510 ;;Total ram usage:       12 bytes
 16511 ;; Hardware stack levels used:    1
 16512 ;; Hardware stack levels required when called:    6
 16513 ;; This function calls:
 16514 ;;		___ftadd
 16515 ;;		___ftmul
 16516 ;;		___wmul
 16517 ;; This function is called by:
 16518 ;;		_exp
 16519 ;;		_log
 16520 ;; This function uses a non-reentrant model
 16521 ;;
 16522                           
 16523                           	psect	text94
 16524  002A90                     __ptext94:
 16525                           	opt stack 0
 16526  002A90                     _eval_poly:
 16527                           	opt stack 18
 16528                           
 16529                           ;incstack = 0
 16530  002A90  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 16531  002A94  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 16532  002A98  0E00               	movlw	0
 16533  002A9A  6E1B               	movwf	___wmul@multiplicand+1,c
 16534  002A9C  0E03               	movlw	3
 16535  002A9E  6E1A               	movwf	___wmul@multiplicand,c
 16536  002AA0  EC5F  F020         	call	___wmul	;wreg free
 16537  002AA4  C087  F02F         	movff	eval_poly@d,??_eval_poly
 16538  002AA8  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 16539  002AAC  5018               	movf	?___wmul,w,c
 16540  002AAE  262F               	addwf	??_eval_poly,f,c
 16541  002AB0  5019               	movf	?___wmul+1,w,c
 16542  002AB2  2230               	addwfc	??_eval_poly+1,f,c
 16543  002AB4  C02F  FFF6         	movff	??_eval_poly,tblptrl
 16544  002AB8  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 16545  002ABC                     	if	0	;tblptru may be non-zero
 16546  002ABC                     	endif
 16547  002ABC                     	if	0	;tblptru may be non-zero
 16548  002ABC                     	endif
 16549  002ABC  0009               	tblrd		*+
 16550  002ABE  CFF5 F08B          	movff	tablat,eval_poly@res
 16551  002AC2  0009               	tblrd		*+
 16552  002AC4  CFF5 F08C          	movff	tablat,eval_poly@res+1
 16553  002AC8  000A               	tblrd		*-
 16554  002ACA  CFF5 F08D          	movff	tablat,eval_poly@res+2
 16555  002ACE  D03F               	goto	l2306
 16556  002AD0  C08B  F06C         	movff	eval_poly@res,___ftmul@f2
 16557  002AD4  C08C  F06D         	movff	eval_poly@res+1,___ftmul@f2+1
 16558  002AD8  C08D  F06E         	movff	eval_poly@res+2,___ftmul@f2+2
 16559  002ADC  C084  F069         	movff	eval_poly@x,___ftmul@f1
 16560  002AE0  C085  F06A         	movff	eval_poly@x+1,___ftmul@f1+1
 16561  002AE4  C086  F06B         	movff	eval_poly@x+2,___ftmul@f1+2
 16562  002AE8  EC27  F012         	call	___ftmul	;wreg free
 16563  002AEC  C069  F078         	movff	?___ftmul,___ftadd@f1
 16564  002AF0  C06A  F079         	movff	?___ftmul+1,___ftadd@f1+1
 16565  002AF4  C06B  F07A         	movff	?___ftmul+2,___ftadd@f1+2
 16566  002AF8  0E00               	movlw	0
 16567  002AFA  6E1B               	movwf	___wmul@multiplicand+1,c
 16568  002AFC  0E03               	movlw	3
 16569  002AFE  6E1A               	movwf	___wmul@multiplicand,c
 16570  002B00  0100               	movlb	0	; () banked
 16571  002B02  0789               	decf	eval_poly@n& (0+255),f,b
 16572  002B04  A0D8               	btfss	status,0,c
 16573  002B06  078A               	decf	(eval_poly@n+1)& (0+255),f,b
 16574  002B08  C089  F018         	movff	eval_poly@n,___wmul@multiplier
 16575  002B0C  C08A  F019         	movff	eval_poly@n+1,___wmul@multiplier+1
 16576  002B10  EC5F  F020         	call	___wmul	;wreg free
 16577  002B14  C087  F02F         	movff	eval_poly@d,??_eval_poly
 16578  002B18  C088  F030         	movff	eval_poly@d+1,??_eval_poly+1
 16579  002B1C  5018               	movf	?___wmul,w,c
 16580  002B1E  262F               	addwf	??_eval_poly,f,c
 16581  002B20  5019               	movf	?___wmul+1,w,c
 16582  002B22  2230               	addwfc	??_eval_poly+1,f,c
 16583  002B24  C02F  FFF6         	movff	??_eval_poly,tblptrl
 16584  002B28  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 16585  002B2C                     	if	0	;tblptru may be non-zero
 16586  002B2C                     	endif
 16587  002B2C                     	if	0	;tblptru may be non-zero
 16588  002B2C                     	endif
 16589  002B2C  0009               	tblrd		*+
 16590  002B2E  CFF5 F07B          	movff	tablat,___ftadd@f2
 16591  002B32  0009               	tblrd		*+
 16592  002B34  CFF5 F07C          	movff	tablat,___ftadd@f2+1
 16593  002B38  000A               	tblrd		*-
 16594  002B3A  CFF5 F07D          	movff	tablat,___ftadd@f2+2
 16595  002B3E  ECA1  F00C         	call	___ftadd	;wreg free
 16596  002B42  C078  F08B         	movff	?___ftadd,eval_poly@res
 16597  002B46  C079  F08C         	movff	?___ftadd+1,eval_poly@res+1
 16598  002B4A  C07A  F08D         	movff	?___ftadd+2,eval_poly@res+2
 16599  002B4E                     l2306:
 16600  002B4E  0100               	movlb	0	; () banked
 16601  002B50  5189               	movf	eval_poly@n& (0+255),w,b
 16602  002B52  118A               	iorwf	(eval_poly@n+1)& (0+255),w,b
 16603  002B54  A4D8               	btfss	status,2,c
 16604  002B56  D7BC               	goto	l2307
 16605                           
 16606                           ; BSR set to: 0
 16607  002B58  C08B  F084         	movff	eval_poly@res,?_eval_poly
 16608  002B5C  C08C  F085         	movff	eval_poly@res+1,?_eval_poly+1
 16609  002B60  C08D  F086         	movff	eval_poly@res+2,?_eval_poly+2
 16610                           
 16611                           ; BSR set to: 0
 16612  002B64  0012               	return		;funcret
 16613  002B66                     __end_of_eval_poly:
 16614                           	opt stack 0
 16615                           tosu	equ	0xFFF
 16616                           tosh	equ	0xFFE
 16617                           tosl	equ	0xFFD
 16618                           pclath	equ	0xFFA
 16619                           tblptru	equ	0xFF8
 16620                           tblptrh	equ	0xFF7
 16621                           tblptrl	equ	0xFF6
 16622                           tablat	equ	0xFF5
 16623                           prodh	equ	0xFF4
 16624                           prodl	equ	0xFF3
 16625                           intcon	equ	0xFF2
 16626                           intcon2	equ	0xFF1
 16627                           postinc0	equ	0xFEE
 16628                           plusw0	equ	0xFEB
 16629                           wreg	equ	0xFE8
 16630                           indf1	equ	0xFE7
 16631                           postdec1	equ	0xFE5
 16632                           fsr1h	equ	0xFE2
 16633                           fsr1l	equ	0xFE1
 16634                           indf2	equ	0xFDF
 16635                           postinc2	equ	0xFDE
 16636                           postdec2	equ	0xFDD
 16637                           plusw2	equ	0xFDB
 16638                           fsr2h	equ	0xFDA
 16639                           fsr2l	equ	0xFD9
 16640                           status	equ	0xFD8
 16641                           
 16642 ;; *************** function ___wmul *****************
 16643 ;; Defined at:
 16644 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 16645 ;; Parameters:    Size  Location     Type
 16646 ;;  multiplier      2   23[COMRAM] unsigned int 
 16647 ;;  multiplicand    2   25[COMRAM] unsigned int 
 16648 ;; Auto vars:     Size  Location     Type
 16649 ;;  product         2   27[COMRAM] unsigned int 
 16650 ;; Return value:  Size  Location     Type
 16651 ;;                  2   23[COMRAM] unsigned int 
 16652 ;; Registers used:
 16653 ;;		wreg, status,2, status,0, prodl, prodh
 16654 ;; Tracked objects:
 16655 ;;		On entry : 0/0
 16656 ;;		On exit  : 0/0
 16657 ;;		Unchanged: 0/0
 16658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16659 ;;      Params:         4       0       0       0       0       0       0
 16660 ;;      Locals:         2       0       0       0       0       0       0
 16661 ;;      Temps:          0       0       0       0       0       0       0
 16662 ;;      Totals:         6       0       0       0       0       0       0
 16663 ;;Total ram usage:        6 bytes
 16664 ;; Hardware stack levels used:    1
 16665 ;; Hardware stack levels required when called:    4
 16666 ;; This function calls:
 16667 ;;		Nothing
 16668 ;; This function is called by:
 16669 ;;		_GetMcuFwVersion
 16670 ;;		_eval_poly
 16671 ;; This function uses a non-reentrant model
 16672 ;;
 16673                           
 16674                           	psect	text95
 16675  0040BE                     __ptext95:
 16676                           	opt stack 0
 16677  0040BE                     ___wmul:
 16678                           	opt stack 19
 16679                           
 16680                           ; BSR set to: 0
 16681                           ;incstack = 0
 16682  0040BE  5018               	movf	___wmul@multiplier,w,c
 16683  0040C0  021A               	mulwf	___wmul@multiplicand,c
 16684  0040C2  CFF3 F01C          	movff	prodl,___wmul@product
 16685  0040C6  CFF4 F01D          	movff	prodh,___wmul@product+1
 16686  0040CA  5018               	movf	___wmul@multiplier,w,c
 16687  0040CC  021B               	mulwf	___wmul@multiplicand+1,c
 16688  0040CE  50F3               	movf	prodl,w,c
 16689  0040D0  261D               	addwf	___wmul@product+1,f,c
 16690  0040D2  5019               	movf	___wmul@multiplier+1,w,c
 16691  0040D4  021A               	mulwf	___wmul@multiplicand,c
 16692  0040D6  50F3               	movf	prodl,w,c
 16693  0040D8  261D               	addwf	___wmul@product+1,f,c
 16694  0040DA  C01C  F018         	movff	___wmul@product,?___wmul
 16695  0040DE  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 16696  0040E2  0012               	return	
 16697  0040E4                     __end_of___wmul:
 16698                           	opt stack 0
 16699                           tosu	equ	0xFFF
 16700                           tosh	equ	0xFFE
 16701                           tosl	equ	0xFFD
 16702                           pclath	equ	0xFFA
 16703                           tblptru	equ	0xFF8
 16704                           tblptrh	equ	0xFF7
 16705                           tblptrl	equ	0xFF6
 16706                           tablat	equ	0xFF5
 16707                           prodh	equ	0xFF4
 16708                           prodl	equ	0xFF3
 16709                           intcon	equ	0xFF2
 16710                           intcon2	equ	0xFF1
 16711                           postinc0	equ	0xFEE
 16712                           plusw0	equ	0xFEB
 16713                           wreg	equ	0xFE8
 16714                           indf1	equ	0xFE7
 16715                           postdec1	equ	0xFE5
 16716                           fsr1h	equ	0xFE2
 16717                           fsr1l	equ	0xFE1
 16718                           indf2	equ	0xFDF
 16719                           postinc2	equ	0xFDE
 16720                           postdec2	equ	0xFDD
 16721                           plusw2	equ	0xFDB
 16722                           fsr2h	equ	0xFDA
 16723                           fsr2l	equ	0xFD9
 16724                           status	equ	0xFD8
 16725                           
 16726 ;; *************** function ___ftmul *****************
 16727 ;; Defined at:
 16728 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 16729 ;; Parameters:    Size  Location     Type
 16730 ;;  f1              3    9[BANK0 ] float 
 16731 ;;  f2              3   12[BANK0 ] float 
 16732 ;; Auto vars:     Size  Location     Type
 16733 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
 16734 ;;  sign            1   23[BANK0 ] unsigned char 
 16735 ;;  cntr            1   22[BANK0 ] unsigned char 
 16736 ;;  exp             1   18[BANK0 ] unsigned char 
 16737 ;; Return value:  Size  Location     Type
 16738 ;;                  3    9[BANK0 ] float 
 16739 ;; Registers used:
 16740 ;;		wreg, status,2, status,0, cstack
 16741 ;; Tracked objects:
 16742 ;;		On entry : 0/0
 16743 ;;		On exit  : 0/0
 16744 ;;		Unchanged: 0/0
 16745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16746 ;;      Params:         0       6       0       0       0       0       0
 16747 ;;      Locals:         0       6       0       0       0       0       0
 16748 ;;      Temps:          0       3       0       0       0       0       0
 16749 ;;      Totals:         0      15       0       0       0       0       0
 16750 ;;Total ram usage:       15 bytes
 16751 ;; Hardware stack levels used:    1
 16752 ;; Hardware stack levels required when called:    5
 16753 ;; This function calls:
 16754 ;;		___ftpack
 16755 ;; This function is called by:
 16756 ;;		_AdcConvert
 16757 ;;		_CheckFlashPrecentage
 16758 ;;		_pow
 16759 ;;		_exp
 16760 ;;		_log
 16761 ;;		_eval_poly
 16762 ;; This function uses a non-reentrant model
 16763 ;;
 16764                           
 16765                           	psect	text96
 16766  00244E                     __ptext96:
 16767                           	opt stack 0
 16768  00244E                     ___ftmul:
 16769                           	opt stack 18
 16770                           
 16771                           ;incstack = 0
 16772  00244E  C06B  F06F         	movff	___ftmul@f1+2,??___ftmul
 16773  002452  0100               	movlb	0	; () banked
 16774  002454  6B70               	clrf	(??___ftmul+1)& (0+255),b
 16775  002456  6B71               	clrf	(??___ftmul+2)& (0+255),b
 16776  002458  356A               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 16777  00245A  376F               	rlcf	??___ftmul& (0+255),f,b
 16778  00245C  E301               	bnc	u6681
 16779  00245E  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 16780  002460                     u6681:
 16781  002460  516F               	movf	??___ftmul& (0+255),w,b
 16782  002462  6F72               	movwf	___ftmul@exp& (0+255),b
 16783  002464  5172               	movf	___ftmul@exp& (0+255),w,b
 16784  002466  A4D8               	btfss	status,2,c
 16785  002468  D007               	goto	l1890
 16786                           
 16787                           ; BSR set to: 0
 16788  00246A  0E00               	movlw	0
 16789  00246C  6F69               	movwf	?___ftmul& (0+255),b
 16790  00246E  0E00               	movlw	0
 16791  002470  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 16792  002472  0E00               	movlw	0
 16793  002474  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 16794                           
 16795                           ; BSR set to: 0
 16796  002476  0012               	return	
 16797  002478                     l1890:
 16798                           
 16799                           ; BSR set to: 0
 16800                           
 16801                           ; BSR set to: 0
 16802  002478  C06E  F06F         	movff	___ftmul@f2+2,??___ftmul
 16803  00247C  6B70               	clrf	(??___ftmul+1)& (0+255),b
 16804  00247E  6B71               	clrf	(??___ftmul+2)& (0+255),b
 16805  002480  356D               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 16806  002482  376F               	rlcf	??___ftmul& (0+255),f,b
 16807  002484  E301               	bnc	u6701
 16808  002486  8170               	bsf	(??___ftmul+1)& (0+255),0,b
 16809  002488                     u6701:
 16810  002488  516F               	movf	??___ftmul& (0+255),w,b
 16811  00248A  6F77               	movwf	___ftmul@sign& (0+255),b
 16812  00248C  5177               	movf	___ftmul@sign& (0+255),w,b
 16813  00248E  A4D8               	btfss	status,2,c
 16814  002490  D007               	goto	l1892
 16815                           
 16816                           ; BSR set to: 0
 16817  002492  0E00               	movlw	0
 16818  002494  6F69               	movwf	?___ftmul& (0+255),b
 16819  002496  0E00               	movlw	0
 16820  002498  6F6A               	movwf	(?___ftmul+1)& (0+255),b
 16821  00249A  0E00               	movlw	0
 16822  00249C  6F6B               	movwf	(?___ftmul+2)& (0+255),b
 16823                           
 16824                           ; BSR set to: 0
 16825  00249E  0012               	return	
 16826  0024A0                     l1892:
 16827                           
 16828                           ; BSR set to: 0
 16829                           
 16830                           ; BSR set to: 0
 16831  0024A0  5177               	movf	___ftmul@sign& (0+255),w,b
 16832  0024A2  0F7B               	addlw	123
 16833  0024A4  2772               	addwf	___ftmul@exp& (0+255),f,b
 16834                           
 16835                           ; BSR set to: 0
 16836  0024A6  C06B  F077         	movff	___ftmul@f1+2,___ftmul@sign
 16837  0024AA  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 16838  0024AC  1B77               	xorwf	___ftmul@sign& (0+255),f,b
 16839  0024AE  0E80               	movlw	128
 16840  0024B0  1777               	andwf	___ftmul@sign& (0+255),f,b
 16841                           
 16842                           ; BSR set to: 0
 16843  0024B2  8F6A               	bsf	(___ftmul@f1+1)& (0+255),7,b
 16844                           
 16845                           ; BSR set to: 0
 16846  0024B4  8F6D               	bsf	(___ftmul@f2+1)& (0+255),7,b
 16847                           
 16848                           ; BSR set to: 0
 16849  0024B6  0EFF               	movlw	255
 16850  0024B8  176C               	andwf	___ftmul@f2& (0+255),f,b
 16851  0024BA  0EFF               	movlw	255
 16852  0024BC  176D               	andwf	(___ftmul@f2+1)& (0+255),f,b
 16853  0024BE  0E00               	movlw	0
 16854  0024C0  176E               	andwf	(___ftmul@f2+2)& (0+255),f,b
 16855                           
 16856                           ; BSR set to: 0
 16857  0024C2  0E00               	movlw	0
 16858  0024C4  6F73               	movwf	___ftmul@f3_as_product& (0+255),b
 16859  0024C6  0E00               	movlw	0
 16860  0024C8  6F74               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 16861  0024CA  0E00               	movlw	0
 16862  0024CC  6F75               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 16863                           
 16864                           ; BSR set to: 0
 16865  0024CE  0E07               	movlw	7
 16866  0024D0  6F76               	movwf	___ftmul@cntr& (0+255),b
 16867  0024D2                     
 16868                           ; BSR set to: 0
 16869                           
 16870                           ; BSR set to: 0
 16871  0024D2  A169               	btfss	___ftmul@f1& (0+255),0,b
 16872  0024D4  D006               	goto	l1894
 16873                           
 16874                           ; BSR set to: 0
 16875  0024D6  516C               	movf	___ftmul@f2& (0+255),w,b
 16876  0024D8  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 16877  0024DA  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 16878  0024DC  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 16879  0024DE  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 16880  0024E0  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 16881  0024E2                     l1894:
 16882                           
 16883                           ; BSR set to: 0
 16884                           
 16885                           ; BSR set to: 0
 16886  0024E2  90D8               	bcf	status,0,c
 16887  0024E4  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 16888  0024E6  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 16889  0024E8  3369               	rrcf	___ftmul@f1& (0+255),f,b
 16890  0024EA  90D8               	bcf	status,0,c
 16891  0024EC  376C               	rlcf	___ftmul@f2& (0+255),f,b
 16892  0024EE  376D               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 16893  0024F0  376E               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 16894                           
 16895                           ; BSR set to: 0
 16896  0024F2  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 16897  0024F4  D7EE               	goto	l1893
 16898                           
 16899                           ; BSR set to: 0
 16900                           
 16901                           ; BSR set to: 0
 16902  0024F6  0E09               	movlw	9
 16903  0024F8  6F76               	movwf	___ftmul@cntr& (0+255),b
 16904  0024FA                     
 16905                           ; BSR set to: 0
 16906                           
 16907                           ; BSR set to: 0
 16908  0024FA  A169               	btfss	___ftmul@f1& (0+255),0,b
 16909  0024FC  D006               	goto	l1897
 16910                           
 16911                           ; BSR set to: 0
 16912  0024FE  516C               	movf	___ftmul@f2& (0+255),w,b
 16913  002500  2773               	addwf	___ftmul@f3_as_product& (0+255),f,b
 16914  002502  516D               	movf	(___ftmul@f2+1)& (0+255),w,b
 16915  002504  2374               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 16916  002506  516E               	movf	(___ftmul@f2+2)& (0+255),w,b
 16917  002508  2375               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 16918  00250A                     l1897:
 16919                           
 16920                           ; BSR set to: 0
 16921                           
 16922                           ; BSR set to: 0
 16923  00250A  90D8               	bcf	status,0,c
 16924  00250C  336B               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 16925  00250E  336A               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 16926  002510  3369               	rrcf	___ftmul@f1& (0+255),f,b
 16927  002512  90D8               	bcf	status,0,c
 16928  002514  3375               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 16929  002516  3374               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 16930  002518  3373               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 16931                           
 16932                           ; BSR set to: 0
 16933  00251A  2F76               	decfsz	___ftmul@cntr& (0+255),f,b
 16934  00251C  D7EE               	goto	l1896
 16935                           
 16936                           ; BSR set to: 0
 16937                           
 16938                           ; BSR set to: 0
 16939  00251E  C073  F018         	movff	___ftmul@f3_as_product,___ftpack@arg
 16940  002522  C074  F019         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 16941  002526  C075  F01A         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 16942  00252A  C072  F01B         	movff	___ftmul@exp,___ftpack@exp
 16943  00252E  C077  F01C         	movff	___ftmul@sign,___ftpack@sign
 16944  002532  EC32  F017         	call	___ftpack	;wreg free
 16945  002536  C018  F069         	movff	?___ftpack,?___ftmul
 16946  00253A  C019  F06A         	movff	?___ftpack+1,?___ftmul+1
 16947  00253E  C01A  F06B         	movff	?___ftpack+2,?___ftmul+2
 16948  002542  0012               	return	
 16949  002544                     __end_of___ftmul:
 16950                           	opt stack 0
 16951                           tosu	equ	0xFFF
 16952                           tosh	equ	0xFFE
 16953                           tosl	equ	0xFFD
 16954                           pclath	equ	0xFFA
 16955                           tblptru	equ	0xFF8
 16956                           tblptrh	equ	0xFF7
 16957                           tblptrl	equ	0xFF6
 16958                           tablat	equ	0xFF5
 16959                           prodh	equ	0xFF4
 16960                           prodl	equ	0xFF3
 16961                           intcon	equ	0xFF2
 16962                           intcon2	equ	0xFF1
 16963                           postinc0	equ	0xFEE
 16964                           plusw0	equ	0xFEB
 16965                           wreg	equ	0xFE8
 16966                           indf1	equ	0xFE7
 16967                           postdec1	equ	0xFE5
 16968                           fsr1h	equ	0xFE2
 16969                           fsr1l	equ	0xFE1
 16970                           indf2	equ	0xFDF
 16971                           postinc2	equ	0xFDE
 16972                           postdec2	equ	0xFDD
 16973                           plusw2	equ	0xFDB
 16974                           fsr2h	equ	0xFDA
 16975                           fsr2l	equ	0xFD9
 16976                           status	equ	0xFD8
 16977                           
 16978 ;; *************** function ___ftsub *****************
 16979 ;; Defined at:
 16980 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
 16981 ;; Parameters:    Size  Location     Type
 16982 ;;  f1              3   36[BANK0 ] float 
 16983 ;;  f2              3   39[BANK0 ] float 
 16984 ;; Auto vars:     Size  Location     Type
 16985 ;;		None
 16986 ;; Return value:  Size  Location     Type
 16987 ;;                  3   36[BANK0 ] float 
 16988 ;; Registers used:
 16989 ;;		wreg, status,2, status,0, cstack
 16990 ;; Tracked objects:
 16991 ;;		On entry : 0/0
 16992 ;;		On exit  : 0/0
 16993 ;;		Unchanged: 0/0
 16994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16995 ;;      Params:         0       6       0       0       0       0       0
 16996 ;;      Locals:         0       0       0       0       0       0       0
 16997 ;;      Temps:          0       0       0       0       0       0       0
 16998 ;;      Totals:         0       6       0       0       0       0       0
 16999 ;;Total ram usage:        6 bytes
 17000 ;; Hardware stack levels used:    1
 17001 ;; Hardware stack levels required when called:    6
 17002 ;; This function calls:
 17003 ;;		___ftadd
 17004 ;; This function is called by:
 17005 ;;		_exp
 17006 ;; This function uses a non-reentrant model
 17007 ;;
 17008                           
 17009                           	psect	text97
 17010  003BCA                     __ptext97:
 17011                           	opt stack 0
 17012  003BCA                     ___ftsub:
 17013                           	opt stack 18
 17014                           
 17015                           ;incstack = 0
 17016  003BCA  0100               	movlb	0	; () banked
 17017  003BCC  5187               	movf	___ftsub@f2& (0+255),w,b
 17018  003BCE  1188               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 17019  003BD0  1189               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 17020  003BD2  B4D8               	btfsc	status,2,c
 17021  003BD4  D006               	goto	l1907
 17022                           
 17023                           ; BSR set to: 0
 17024  003BD6  0E00               	movlw	0
 17025  003BD8  1B87               	xorwf	___ftsub@f2& (0+255),f,b
 17026  003BDA  0E00               	movlw	0
 17027  003BDC  1B88               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 17028  003BDE  0E80               	movlw	128
 17029  003BE0  1B89               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 17030  003BE2                     l1907:
 17031                           
 17032                           ; BSR set to: 0
 17033                           
 17034                           ; BSR set to: 0
 17035  003BE2  C084  F078         	movff	___ftsub@f1,___ftadd@f1
 17036  003BE6  C085  F079         	movff	___ftsub@f1+1,___ftadd@f1+1
 17037  003BEA  C086  F07A         	movff	___ftsub@f1+2,___ftadd@f1+2
 17038  003BEE  C087  F07B         	movff	___ftsub@f2,___ftadd@f2
 17039  003BF2  C088  F07C         	movff	___ftsub@f2+1,___ftadd@f2+1
 17040  003BF6  C089  F07D         	movff	___ftsub@f2+2,___ftadd@f2+2
 17041  003BFA  ECA1  F00C         	call	___ftadd	;wreg free
 17042  003BFE  C078  F084         	movff	?___ftadd,?___ftsub
 17043  003C02  C079  F085         	movff	?___ftadd+1,?___ftsub+1
 17044  003C06  C07A  F086         	movff	?___ftadd+2,?___ftsub+2
 17045  003C0A  0012               	return	
 17046  003C0C                     __end_of___ftsub:
 17047                           	opt stack 0
 17048                           tosu	equ	0xFFF
 17049                           tosh	equ	0xFFE
 17050                           tosl	equ	0xFFD
 17051                           pclath	equ	0xFFA
 17052                           tblptru	equ	0xFF8
 17053                           tblptrh	equ	0xFF7
 17054                           tblptrl	equ	0xFF6
 17055                           tablat	equ	0xFF5
 17056                           prodh	equ	0xFF4
 17057                           prodl	equ	0xFF3
 17058                           intcon	equ	0xFF2
 17059                           intcon2	equ	0xFF1
 17060                           postinc0	equ	0xFEE
 17061                           plusw0	equ	0xFEB
 17062                           wreg	equ	0xFE8
 17063                           indf1	equ	0xFE7
 17064                           postdec1	equ	0xFE5
 17065                           fsr1h	equ	0xFE2
 17066                           fsr1l	equ	0xFE1
 17067                           indf2	equ	0xFDF
 17068                           postinc2	equ	0xFDE
 17069                           postdec2	equ	0xFDD
 17070                           plusw2	equ	0xFDB
 17071                           fsr2h	equ	0xFDA
 17072                           fsr2l	equ	0xFD9
 17073                           status	equ	0xFD8
 17074                           
 17075 ;; *************** function ___ftadd *****************
 17076 ;; Defined at:
 17077 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
 17078 ;; Parameters:    Size  Location     Type
 17079 ;;  f1              3   24[BANK0 ] float 
 17080 ;;  f2              3   27[BANK0 ] float 
 17081 ;; Auto vars:     Size  Location     Type
 17082 ;;  exp1            1   35[BANK0 ] unsigned char 
 17083 ;;  exp2            1   34[BANK0 ] unsigned char 
 17084 ;;  sign            1   33[BANK0 ] unsigned char 
 17085 ;; Return value:  Size  Location     Type
 17086 ;;                  3   24[BANK0 ] float 
 17087 ;; Registers used:
 17088 ;;		wreg, status,2, status,0, cstack
 17089 ;; Tracked objects:
 17090 ;;		On entry : 0/0
 17091 ;;		On exit  : 0/0
 17092 ;;		Unchanged: 0/0
 17093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17094 ;;      Params:         0       6       0       0       0       0       0
 17095 ;;      Locals:         0       3       0       0       0       0       0
 17096 ;;      Temps:          0       3       0       0       0       0       0
 17097 ;;      Totals:         0      12       0       0       0       0       0
 17098 ;;Total ram usage:       12 bytes
 17099 ;; Hardware stack levels used:    1
 17100 ;; Hardware stack levels required when called:    5
 17101 ;; This function calls:
 17102 ;;		___ftpack
 17103 ;; This function is called by:
 17104 ;;		___ftsub
 17105 ;;		_floor
 17106 ;;		_log
 17107 ;;		_eval_poly
 17108 ;; This function uses a non-reentrant model
 17109 ;;
 17110                           
 17111                           	psect	text98
 17112  001942                     __ptext98:
 17113                           	opt stack 0
 17114  001942                     ___ftadd:
 17115                           	opt stack 18
 17116                           
 17117                           ;incstack = 0
 17118  001942  C07A  F07E         	movff	___ftadd@f1+2,??___ftadd
 17119  001946  0100               	movlb	0	; () banked
 17120  001948  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 17121  00194A  6B80               	clrf	(??___ftadd+2)& (0+255),b
 17122  00194C  3579               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 17123  00194E  377E               	rlcf	??___ftadd& (0+255),f,b
 17124  001950  E301               	bnc	u6471
 17125  001952  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 17126  001954                     u6471:
 17127  001954  517E               	movf	??___ftadd& (0+255),w,b
 17128  001956  6F83               	movwf	___ftadd@exp1& (0+255),b
 17129  001958  C07D  F07E         	movff	___ftadd@f2+2,??___ftadd
 17130  00195C  6B7F               	clrf	(??___ftadd+1)& (0+255),b
 17131  00195E  6B80               	clrf	(??___ftadd+2)& (0+255),b
 17132  001960  357C               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 17133  001962  377E               	rlcf	??___ftadd& (0+255),f,b
 17134  001964  E301               	bnc	u6481
 17135  001966  817F               	bsf	(??___ftadd+1)& (0+255),0,b
 17136  001968                     u6481:
 17137  001968  517E               	movf	??___ftadd& (0+255),w,b
 17138  00196A  6F82               	movwf	___ftadd@exp2& (0+255),b
 17139                           
 17140                           ; BSR set to: 0
 17141  00196C  5183               	movf	___ftadd@exp1& (0+255),w,b
 17142  00196E  B4D8               	btfsc	status,2,c
 17143  001970  D00B               	goto	u6510
 17144                           
 17145                           ; BSR set to: 0
 17146  001972  5182               	movf	___ftadd@exp2& (0+255),w,b
 17147  001974  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 17148  001976  B0D8               	btfsc	status,0,c
 17149  001978  D00E               	goto	l1842
 17150                           
 17151                           ; BSR set to: 0
 17152  00197A  5183               	movf	___ftadd@exp1& (0+255),w,b
 17153  00197C  0800               	sublw	0
 17154  00197E  2582               	addwf	___ftadd@exp2& (0+255),w,b
 17155  001980  6F7E               	movwf	??___ftadd& (0+255),b
 17156  001982  0E18               	movlw	24
 17157  001984  657E               	cpfsgt	??___ftadd& (0+255),b
 17158  001986  D007               	goto	l1842
 17159  001988                     u6510:
 17160                           
 17161                           ; BSR set to: 0
 17162  001988  C07B  F078         	movff	___ftadd@f2,?___ftadd
 17163  00198C  C07C  F079         	movff	___ftadd@f2+1,?___ftadd+1
 17164  001990  C07D  F07A         	movff	___ftadd@f2+2,?___ftadd+2
 17165  001994  0012               	return	
 17166  001996                     l1842:
 17167                           
 17168                           ; BSR set to: 0
 17169                           
 17170                           ; BSR set to: 0
 17171  001996  5182               	movf	___ftadd@exp2& (0+255),w,b
 17172  001998  B4D8               	btfsc	status,2,c
 17173  00199A  D00B               	goto	u6540
 17174                           
 17175                           ; BSR set to: 0
 17176  00199C  5183               	movf	___ftadd@exp1& (0+255),w,b
 17177  00199E  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 17178  0019A0  B0D8               	btfsc	status,0,c
 17179  0019A2  D00E               	goto	l1846
 17180                           
 17181                           ; BSR set to: 0
 17182  0019A4  5182               	movf	___ftadd@exp2& (0+255),w,b
 17183  0019A6  0800               	sublw	0
 17184  0019A8  2583               	addwf	___ftadd@exp1& (0+255),w,b
 17185  0019AA  6F7E               	movwf	??___ftadd& (0+255),b
 17186  0019AC  0E18               	movlw	24
 17187  0019AE  657E               	cpfsgt	??___ftadd& (0+255),b
 17188  0019B0  D007               	goto	l1846
 17189  0019B2                     u6540:
 17190                           
 17191                           ; BSR set to: 0
 17192  0019B2  C078  F078         	movff	___ftadd@f1,?___ftadd
 17193  0019B6  C079  F079         	movff	___ftadd@f1+1,?___ftadd+1
 17194  0019BA  C07A  F07A         	movff	___ftadd@f1+2,?___ftadd+2
 17195  0019BE  0012               	return	
 17196  0019C0                     l1846:
 17197                           
 17198                           ; BSR set to: 0
 17199                           
 17200                           ; BSR set to: 0
 17201  0019C0  0E06               	movlw	6
 17202  0019C2  6F81               	movwf	___ftadd@sign& (0+255),b
 17203                           
 17204                           ; BSR set to: 0
 17205  0019C4  BF7A               	btfsc	(___ftadd@f1+2)& (0+255),7,b
 17206                           
 17207                           ; BSR set to: 0
 17208  0019C6  8F81               	bsf	___ftadd@sign& (0+255),7,b
 17209                           
 17210                           ; BSR set to: 0
 17211                           
 17212                           ; BSR set to: 0
 17213  0019C8  BF7D               	btfsc	(___ftadd@f2+2)& (0+255),7,b
 17214                           
 17215                           ; BSR set to: 0
 17216  0019CA  8D81               	bsf	___ftadd@sign& (0+255),6,b
 17217                           
 17218                           ; BSR set to: 0
 17219  0019CC  8F79               	bsf	(___ftadd@f1+1)& (0+255),7,b
 17220                           
 17221                           ; BSR set to: 0
 17222  0019CE  0EFF               	movlw	255
 17223  0019D0  1778               	andwf	___ftadd@f1& (0+255),f,b
 17224  0019D2  0EFF               	movlw	255
 17225  0019D4  1779               	andwf	(___ftadd@f1+1)& (0+255),f,b
 17226  0019D6  0E00               	movlw	0
 17227  0019D8  177A               	andwf	(___ftadd@f1+2)& (0+255),f,b
 17228  0019DA  8F7C               	bsf	(___ftadd@f2+1)& (0+255),7,b
 17229                           
 17230                           ; BSR set to: 0
 17231  0019DC  0EFF               	movlw	255
 17232  0019DE  177B               	andwf	___ftadd@f2& (0+255),f,b
 17233  0019E0  0EFF               	movlw	255
 17234  0019E2  177C               	andwf	(___ftadd@f2+1)& (0+255),f,b
 17235  0019E4  0E00               	movlw	0
 17236  0019E6  177D               	andwf	(___ftadd@f2+2)& (0+255),f,b
 17237                           
 17238                           ; BSR set to: 0
 17239  0019E8  5182               	movf	___ftadd@exp2& (0+255),w,b
 17240  0019EA  5D83               	subwf	___ftadd@exp1& (0+255),w,b
 17241  0019EC  B0D8               	btfsc	status,0,c
 17242  0019EE  D01B               	goto	l1851
 17243  0019F0                     u6570:
 17244                           
 17245                           ; BSR set to: 0
 17246                           
 17247                           ; BSR set to: 0
 17248  0019F0  90D8               	bcf	status,0,c
 17249  0019F2  377B               	rlcf	___ftadd@f2& (0+255),f,b
 17250  0019F4  377C               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 17251  0019F6  377D               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 17252  0019F8  0782               	decf	___ftadd@exp2& (0+255),f,b
 17253                           
 17254                           ; BSR set to: 0
 17255  0019FA  5183               	movf	___ftadd@exp1& (0+255),w,b
 17256  0019FC  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 17257  0019FE  B4D8               	btfsc	status,2,c
 17258  001A00  D00D               	goto	l1856
 17259                           
 17260                           ; BSR set to: 0
 17261  001A02  0781               	decf	___ftadd@sign& (0+255),f,b
 17262  001A04  C081  F07E         	movff	___ftadd@sign,??___ftadd
 17263  001A08  0E07               	movlw	7
 17264  001A0A  177E               	andwf	??___ftadd& (0+255),f,b
 17265  001A0C  B4D8               	btfsc	status,2,c
 17266  001A0E  D006               	goto	l1856
 17267  001A10  D7EF               	goto	u6570
 17268  001A12                     
 17269                           ; BSR set to: 0
 17270                           
 17271                           ; BSR set to: 0
 17272  001A12  90D8               	bcf	status,0,c
 17273  001A14  337A               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 17274  001A16  3379               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 17275  001A18  3378               	rrcf	___ftadd@f1& (0+255),f,b
 17276  001A1A  2B83               	incf	___ftadd@exp1& (0+255),f,b
 17277  001A1C                     l1856:
 17278                           
 17279                           ; BSR set to: 0
 17280                           
 17281                           ; BSR set to: 0
 17282  001A1C  5182               	movf	___ftadd@exp2& (0+255),w,b
 17283  001A1E  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 17284  001A20  B4D8               	btfsc	status,2,c
 17285  001A22  D01F               	goto	u6640
 17286  001A24  D7F6               	goto	l1857
 17287  001A26                     l1851:
 17288                           
 17289                           ; BSR set to: 0
 17290                           
 17291                           ; BSR set to: 0
 17292  001A26  5183               	movf	___ftadd@exp1& (0+255),w,b
 17293  001A28  5D82               	subwf	___ftadd@exp2& (0+255),w,b
 17294  001A2A  B0D8               	btfsc	status,0,c
 17295  001A2C  D01A               	goto	u6640
 17296  001A2E                     u6610:
 17297                           
 17298                           ; BSR set to: 0
 17299                           
 17300                           ; BSR set to: 0
 17301  001A2E  90D8               	bcf	status,0,c
 17302  001A30  3778               	rlcf	___ftadd@f1& (0+255),f,b
 17303  001A32  3779               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 17304  001A34  377A               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 17305  001A36  0783               	decf	___ftadd@exp1& (0+255),f,b
 17306                           
 17307                           ; BSR set to: 0
 17308  001A38  5183               	movf	___ftadd@exp1& (0+255),w,b
 17309  001A3A  1982               	xorwf	___ftadd@exp2& (0+255),w,b
 17310  001A3C  B4D8               	btfsc	status,2,c
 17311  001A3E  D00D               	goto	l1865
 17312                           
 17313                           ; BSR set to: 0
 17314  001A40  0781               	decf	___ftadd@sign& (0+255),f,b
 17315  001A42  C081  F07E         	movff	___ftadd@sign,??___ftadd
 17316  001A46  0E07               	movlw	7
 17317  001A48  177E               	andwf	??___ftadd& (0+255),f,b
 17318  001A4A  B4D8               	btfsc	status,2,c
 17319  001A4C  D006               	goto	l1865
 17320  001A4E  D7EF               	goto	u6610
 17321  001A50                     
 17322                           ; BSR set to: 0
 17323                           
 17324                           ; BSR set to: 0
 17325  001A50  90D8               	bcf	status,0,c
 17326  001A52  337D               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 17327  001A54  337C               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 17328  001A56  337B               	rrcf	___ftadd@f2& (0+255),f,b
 17329  001A58  2B82               	incf	___ftadd@exp2& (0+255),f,b
 17330  001A5A                     l1865:
 17331                           
 17332                           ; BSR set to: 0
 17333                           
 17334                           ; BSR set to: 0
 17335  001A5A  5182               	movf	___ftadd@exp2& (0+255),w,b
 17336  001A5C  1983               	xorwf	___ftadd@exp1& (0+255),w,b
 17337  001A5E  A4D8               	btfss	status,2,c
 17338  001A60  D7F7               	goto	l1866
 17339  001A62                     u6640:
 17340                           
 17341                           ; BSR set to: 0
 17342                           
 17343                           ; BSR set to: 0
 17344                           
 17345                           ; BSR set to: 0
 17346  001A62  AF81               	btfss	___ftadd@sign& (0+255),7,b
 17347  001A64  D00C               	goto	l1868
 17348                           
 17349                           ; BSR set to: 0
 17350  001A66  0EFF               	movlw	255
 17351  001A68  1B78               	xorwf	___ftadd@f1& (0+255),f,b
 17352  001A6A  0EFF               	movlw	255
 17353  001A6C  1B79               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 17354  001A6E  0EFF               	movlw	255
 17355  001A70  1B7A               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 17356  001A72  0E01               	movlw	1
 17357  001A74  2778               	addwf	___ftadd@f1& (0+255),f,b
 17358  001A76  0E00               	movlw	0
 17359  001A78  2379               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 17360  001A7A  0E00               	movlw	0
 17361  001A7C  237A               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 17362  001A7E                     l1868:
 17363                           
 17364                           ; BSR set to: 0
 17365  001A7E  AD81               	btfss	___ftadd@sign& (0+255),6,b
 17366  001A80  D00C               	goto	l1869
 17367                           
 17368                           ; BSR set to: 0
 17369  001A82  0EFF               	movlw	255
 17370  001A84  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 17371  001A86  0EFF               	movlw	255
 17372  001A88  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 17373  001A8A  0EFF               	movlw	255
 17374  001A8C  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 17375  001A8E  0E01               	movlw	1
 17376  001A90  277B               	addwf	___ftadd@f2& (0+255),f,b
 17377  001A92  0E00               	movlw	0
 17378  001A94  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17379  001A96  0E00               	movlw	0
 17380  001A98  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17381  001A9A                     l1869:
 17382                           
 17383                           ; BSR set to: 0
 17384                           
 17385                           ; BSR set to: 0
 17386  001A9A  0E00               	movlw	0
 17387  001A9C  6F81               	movwf	___ftadd@sign& (0+255),b
 17388                           
 17389                           ; BSR set to: 0
 17390  001A9E  5178               	movf	___ftadd@f1& (0+255),w,b
 17391  001AA0  277B               	addwf	___ftadd@f2& (0+255),f,b
 17392  001AA2  5179               	movf	(___ftadd@f1+1)& (0+255),w,b
 17393  001AA4  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17394  001AA6  517A               	movf	(___ftadd@f1+2)& (0+255),w,b
 17395  001AA8  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17396                           
 17397                           ; BSR set to: 0
 17398  001AAA  AF7D               	btfss	(___ftadd@f2+2)& (0+255),7,b
 17399  001AAC  D00E               	goto	l1870
 17400                           
 17401                           ; BSR set to: 0
 17402  001AAE  0EFF               	movlw	255
 17403  001AB0  1B7B               	xorwf	___ftadd@f2& (0+255),f,b
 17404  001AB2  0EFF               	movlw	255
 17405  001AB4  1B7C               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 17406  001AB6  0EFF               	movlw	255
 17407  001AB8  1B7D               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 17408  001ABA  0E01               	movlw	1
 17409  001ABC  277B               	addwf	___ftadd@f2& (0+255),f,b
 17410  001ABE  0E00               	movlw	0
 17411  001AC0  237C               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 17412  001AC2  0E00               	movlw	0
 17413  001AC4  237D               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 17414                           
 17415                           ; BSR set to: 0
 17416  001AC6  0E01               	movlw	1
 17417  001AC8  6F81               	movwf	___ftadd@sign& (0+255),b
 17418  001ACA                     l1870:
 17419                           
 17420                           ; BSR set to: 0
 17421                           
 17422                           ; BSR set to: 0
 17423  001ACA  C07B  F018         	movff	___ftadd@f2,___ftpack@arg
 17424  001ACE  C07C  F019         	movff	___ftadd@f2+1,___ftpack@arg+1
 17425  001AD2  C07D  F01A         	movff	___ftadd@f2+2,___ftpack@arg+2
 17426  001AD6  C083  F01B         	movff	___ftadd@exp1,___ftpack@exp
 17427  001ADA  C081  F01C         	movff	___ftadd@sign,___ftpack@sign
 17428  001ADE  EC32  F017         	call	___ftpack	;wreg free
 17429  001AE2  C018  F078         	movff	?___ftpack,?___ftadd
 17430  001AE6  C019  F079         	movff	?___ftpack+1,?___ftadd+1
 17431  001AEA  C01A  F07A         	movff	?___ftpack+2,?___ftadd+2
 17432  001AEE  0012               	return	
 17433  001AF0                     __end_of___ftadd:
 17434                           	opt stack 0
 17435                           tosu	equ	0xFFF
 17436                           tosh	equ	0xFFE
 17437                           tosl	equ	0xFFD
 17438                           pclath	equ	0xFFA
 17439                           tblptru	equ	0xFF8
 17440                           tblptrh	equ	0xFF7
 17441                           tblptrl	equ	0xFF6
 17442                           tablat	equ	0xFF5
 17443                           prodh	equ	0xFF4
 17444                           prodl	equ	0xFF3
 17445                           intcon	equ	0xFF2
 17446                           intcon2	equ	0xFF1
 17447                           postinc0	equ	0xFEE
 17448                           plusw0	equ	0xFEB
 17449                           wreg	equ	0xFE8
 17450                           indf1	equ	0xFE7
 17451                           postdec1	equ	0xFE5
 17452                           fsr1h	equ	0xFE2
 17453                           fsr1l	equ	0xFE1
 17454                           indf2	equ	0xFDF
 17455                           postinc2	equ	0xFDE
 17456                           postdec2	equ	0xFDD
 17457                           plusw2	equ	0xFDB
 17458                           fsr2h	equ	0xFDA
 17459                           fsr2l	equ	0xFD9
 17460                           status	equ	0xFD8
 17461                           
 17462 ;; *************** function ___ftneg *****************
 17463 ;; Defined at:
 17464 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftneg.c"
 17465 ;; Parameters:    Size  Location     Type
 17466 ;;  f1              3   23[COMRAM] float 
 17467 ;; Auto vars:     Size  Location     Type
 17468 ;;		None
 17469 ;; Return value:  Size  Location     Type
 17470 ;;                  3   23[COMRAM] float 
 17471 ;; Registers used:
 17472 ;;		wreg, status,2, status,0
 17473 ;; Tracked objects:
 17474 ;;		On entry : 0/0
 17475 ;;		On exit  : 0/0
 17476 ;;		Unchanged: 0/0
 17477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17478 ;;      Params:         3       0       0       0       0       0       0
 17479 ;;      Locals:         0       0       0       0       0       0       0
 17480 ;;      Temps:          0       0       0       0       0       0       0
 17481 ;;      Totals:         3       0       0       0       0       0       0
 17482 ;;Total ram usage:        3 bytes
 17483 ;; Hardware stack levels used:    1
 17484 ;; Hardware stack levels required when called:    4
 17485 ;; This function calls:
 17486 ;;		Nothing
 17487 ;; This function is called by:
 17488 ;;		_pow
 17489 ;;		_exp
 17490 ;; This function uses a non-reentrant model
 17491 ;;
 17492                           
 17493                           	psect	text99
 17494  004108                     __ptext99:
 17495                           	opt stack 0
 17496  004108                     ___ftneg:
 17497                           	opt stack 20
 17498                           
 17499                           ;incstack = 0
 17500  004108  5018               	movf	___ftneg@f1,w,c
 17501  00410A  1019               	iorwf	___ftneg@f1+1,w,c
 17502  00410C  101A               	iorwf	___ftneg@f1+2,w,c
 17503  00410E  B4D8               	btfsc	status,2,c
 17504  004110  D006               	goto	l1901
 17505  004112  0E00               	movlw	0
 17506  004114  1A18               	xorwf	___ftneg@f1,f,c
 17507  004116  0E00               	movlw	0
 17508  004118  1A19               	xorwf	___ftneg@f1+1,f,c
 17509  00411A  0E80               	movlw	128
 17510  00411C  1A1A               	xorwf	___ftneg@f1+2,f,c
 17511  00411E                     l1901:
 17512  00411E  C018  F018         	movff	___ftneg@f1,?___ftneg
 17513  004122  C019  F019         	movff	___ftneg@f1+1,?___ftneg+1
 17514  004126  C01A  F01A         	movff	___ftneg@f1+2,?___ftneg+2
 17515  00412A  0012               	return		;funcret
 17516  00412C                     __end_of___ftneg:
 17517                           	opt stack 0
 17518                           tosu	equ	0xFFF
 17519                           tosh	equ	0xFFE
 17520                           tosl	equ	0xFFD
 17521                           pclath	equ	0xFFA
 17522                           tblptru	equ	0xFF8
 17523                           tblptrh	equ	0xFF7
 17524                           tblptrl	equ	0xFF6
 17525                           tablat	equ	0xFF5
 17526                           prodh	equ	0xFF4
 17527                           prodl	equ	0xFF3
 17528                           intcon	equ	0xFF2
 17529                           intcon2	equ	0xFF1
 17530                           postinc0	equ	0xFEE
 17531                           plusw0	equ	0xFEB
 17532                           wreg	equ	0xFE8
 17533                           indf1	equ	0xFE7
 17534                           postdec1	equ	0xFE5
 17535                           fsr1h	equ	0xFE2
 17536                           fsr1l	equ	0xFE1
 17537                           indf2	equ	0xFDF
 17538                           postinc2	equ	0xFDE
 17539                           postdec2	equ	0xFDD
 17540                           plusw2	equ	0xFDB
 17541                           fsr2h	equ	0xFDA
 17542                           fsr2l	equ	0xFD9
 17543                           status	equ	0xFD8
 17544                           
 17545 ;; *************** function ___ftdiv *****************
 17546 ;; Defined at:
 17547 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 17548 ;; Parameters:    Size  Location     Type
 17549 ;;  f1              3   40[COMRAM] float 
 17550 ;;  f2              3   43[COMRAM] float 
 17551 ;; Auto vars:     Size  Location     Type
 17552 ;;  f3              3    4[BANK0 ] float 
 17553 ;;  sign            1    8[BANK0 ] unsigned char 
 17554 ;;  exp             1    7[BANK0 ] unsigned char 
 17555 ;;  cntr            1    3[BANK0 ] unsigned char 
 17556 ;; Return value:  Size  Location     Type
 17557 ;;                  3   40[COMRAM] float 
 17558 ;; Registers used:
 17559 ;;		wreg, status,2, status,0, cstack
 17560 ;; Tracked objects:
 17561 ;;		On entry : 0/0
 17562 ;;		On exit  : 0/0
 17563 ;;		Unchanged: 0/0
 17564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17565 ;;      Params:         6       0       0       0       0       0       0
 17566 ;;      Locals:         0       6       0       0       0       0       0
 17567 ;;      Temps:          0       3       0       0       0       0       0
 17568 ;;      Totals:         6       9       0       0       0       0       0
 17569 ;;Total ram usage:       15 bytes
 17570 ;; Hardware stack levels used:    1
 17571 ;; Hardware stack levels required when called:    5
 17572 ;; This function calls:
 17573 ;;		___ftpack
 17574 ;; This function is called by:
 17575 ;;		_AdcConvert
 17576 ;;		_CheckFlashPrecentage
 17577 ;;		_exp
 17578 ;; This function uses a non-reentrant model
 17579 ;;
 17580                           
 17581                           	psect	text100
 17582  002544                     __ptext100:
 17583                           	opt stack 0
 17584  002544                     ___ftdiv:
 17585                           	opt stack 19
 17586                           
 17587                           ;incstack = 0
 17588  002544  C02B  F060         	movff	___ftdiv@f1+2,??___ftdiv
 17589  002548  0100               	movlb	0	; () banked
 17590  00254A  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 17591  00254C  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 17592  00254E  342A               	rlcf	___ftdiv@f1+1,w,c
 17593  002550  3760               	rlcf	??___ftdiv& (0+255),f,b
 17594  002552  E301               	bnc	u6881
 17595  002554  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 17596  002556                     u6881:
 17597  002556  5160               	movf	??___ftdiv& (0+255),w,b
 17598  002558  6F67               	movwf	___ftdiv@exp& (0+255),b
 17599  00255A  5167               	movf	___ftdiv@exp& (0+255),w,b
 17600  00255C  A4D8               	btfss	status,2,c
 17601  00255E  D007               	goto	l1875
 17602                           
 17603                           ; BSR set to: 0
 17604  002560  0E00               	movlw	0
 17605  002562  6E29               	movwf	?___ftdiv,c
 17606  002564  0E00               	movlw	0
 17607  002566  6E2A               	movwf	?___ftdiv+1,c
 17608  002568  0E00               	movlw	0
 17609  00256A  6E2B               	movwf	?___ftdiv+2,c
 17610                           
 17611                           ; BSR set to: 0
 17612  00256C  0012               	return	
 17613  00256E                     l1875:
 17614                           
 17615                           ; BSR set to: 0
 17616                           
 17617                           ; BSR set to: 0
 17618  00256E  C02E  F060         	movff	___ftdiv@f2+2,??___ftdiv
 17619  002572  6B61               	clrf	(??___ftdiv+1)& (0+255),b
 17620  002574  6B62               	clrf	(??___ftdiv+2)& (0+255),b
 17621  002576  342D               	rlcf	___ftdiv@f2+1,w,c
 17622  002578  3760               	rlcf	??___ftdiv& (0+255),f,b
 17623  00257A  E301               	bnc	u6901
 17624  00257C  8161               	bsf	(??___ftdiv+1)& (0+255),0,b
 17625  00257E                     u6901:
 17626  00257E  5160               	movf	??___ftdiv& (0+255),w,b
 17627  002580  6F68               	movwf	___ftdiv@sign& (0+255),b
 17628  002582  5168               	movf	___ftdiv@sign& (0+255),w,b
 17629  002584  A4D8               	btfss	status,2,c
 17630  002586  D007               	goto	l1877
 17631                           
 17632                           ; BSR set to: 0
 17633  002588  0E00               	movlw	0
 17634  00258A  6E29               	movwf	?___ftdiv,c
 17635  00258C  0E00               	movlw	0
 17636  00258E  6E2A               	movwf	?___ftdiv+1,c
 17637  002590  0E00               	movlw	0
 17638  002592  6E2B               	movwf	?___ftdiv+2,c
 17639                           
 17640                           ; BSR set to: 0
 17641  002594  0012               	return	
 17642  002596                     l1877:
 17643                           
 17644                           ; BSR set to: 0
 17645                           
 17646                           ; BSR set to: 0
 17647  002596  0E00               	movlw	0
 17648  002598  6F64               	movwf	___ftdiv@f3& (0+255),b
 17649  00259A  0E00               	movlw	0
 17650  00259C  6F65               	movwf	(___ftdiv@f3+1)& (0+255),b
 17651  00259E  0E00               	movlw	0
 17652  0025A0  6F66               	movwf	(___ftdiv@f3+2)& (0+255),b
 17653                           
 17654                           ; BSR set to: 0
 17655  0025A2  5168               	movf	___ftdiv@sign& (0+255),w,b
 17656  0025A4  0F89               	addlw	137
 17657  0025A6  5F67               	subwf	___ftdiv@exp& (0+255),f,b
 17658                           
 17659                           ; BSR set to: 0
 17660  0025A8  C02B  F068         	movff	___ftdiv@f1+2,___ftdiv@sign
 17661                           
 17662                           ; BSR set to: 0
 17663  0025AC  502E               	movf	___ftdiv@f2+2,w,c
 17664  0025AE  1B68               	xorwf	___ftdiv@sign& (0+255),f,b
 17665                           
 17666                           ; BSR set to: 0
 17667  0025B0  0E80               	movlw	128
 17668  0025B2  1768               	andwf	___ftdiv@sign& (0+255),f,b
 17669                           
 17670                           ; BSR set to: 0
 17671  0025B4  8E2A               	bsf	___ftdiv@f1+1,7,c
 17672                           
 17673                           ; BSR set to: 0
 17674  0025B6  0EFF               	movlw	255
 17675  0025B8  1629               	andwf	___ftdiv@f1,f,c
 17676  0025BA  0EFF               	movlw	255
 17677  0025BC  162A               	andwf	___ftdiv@f1+1,f,c
 17678  0025BE  0E00               	movlw	0
 17679  0025C0  162B               	andwf	___ftdiv@f1+2,f,c
 17680                           
 17681                           ; BSR set to: 0
 17682  0025C2  8E2D               	bsf	___ftdiv@f2+1,7,c
 17683                           
 17684                           ; BSR set to: 0
 17685  0025C4  0EFF               	movlw	255
 17686  0025C6  162C               	andwf	___ftdiv@f2,f,c
 17687  0025C8  0EFF               	movlw	255
 17688  0025CA  162D               	andwf	___ftdiv@f2+1,f,c
 17689  0025CC  0E00               	movlw	0
 17690  0025CE  162E               	andwf	___ftdiv@f2+2,f,c
 17691                           
 17692                           ; BSR set to: 0
 17693  0025D0  0E18               	movlw	24
 17694  0025D2  6F63               	movwf	___ftdiv@cntr& (0+255),b
 17695  0025D4                     
 17696                           ; BSR set to: 0
 17697                           
 17698                           ; BSR set to: 0
 17699  0025D4  90D8               	bcf	status,0,c
 17700  0025D6  3764               	rlcf	___ftdiv@f3& (0+255),f,b
 17701  0025D8  3765               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 17702  0025DA  3766               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 17703                           
 17704                           ; BSR set to: 0
 17705  0025DC  502C               	movf	___ftdiv@f2,w,c
 17706  0025DE  5C29               	subwf	___ftdiv@f1,w,c
 17707  0025E0  502D               	movf	___ftdiv@f2+1,w,c
 17708  0025E2  582A               	subwfb	___ftdiv@f1+1,w,c
 17709  0025E4  502E               	movf	___ftdiv@f2+2,w,c
 17710  0025E6  582B               	subwfb	___ftdiv@f1+2,w,c
 17711  0025E8  A0D8               	btfss	status,0,c
 17712  0025EA  D007               	goto	l1879
 17713                           
 17714                           ; BSR set to: 0
 17715  0025EC  502C               	movf	___ftdiv@f2,w,c
 17716  0025EE  5E29               	subwf	___ftdiv@f1,f,c
 17717  0025F0  502D               	movf	___ftdiv@f2+1,w,c
 17718  0025F2  5A2A               	subwfb	___ftdiv@f1+1,f,c
 17719  0025F4  502E               	movf	___ftdiv@f2+2,w,c
 17720  0025F6  5A2B               	subwfb	___ftdiv@f1+2,f,c
 17721                           
 17722                           ; BSR set to: 0
 17723  0025F8  8164               	bsf	___ftdiv@f3& (0+255),0,b
 17724  0025FA                     l1879:
 17725                           
 17726                           ; BSR set to: 0
 17727  0025FA  90D8               	bcf	status,0,c
 17728  0025FC  3629               	rlcf	___ftdiv@f1,f,c
 17729  0025FE  362A               	rlcf	___ftdiv@f1+1,f,c
 17730  002600  362B               	rlcf	___ftdiv@f1+2,f,c
 17731                           
 17732                           ; BSR set to: 0
 17733  002602  2F63               	decfsz	___ftdiv@cntr& (0+255),f,b
 17734  002604  D7E7               	goto	l1878
 17735                           
 17736                           ; BSR set to: 0
 17737                           
 17738                           ; BSR set to: 0
 17739  002606  C064  F018         	movff	___ftdiv@f3,___ftpack@arg
 17740  00260A  C065  F019         	movff	___ftdiv@f3+1,___ftpack@arg+1
 17741  00260E  C066  F01A         	movff	___ftdiv@f3+2,___ftpack@arg+2
 17742  002612  C067  F01B         	movff	___ftdiv@exp,___ftpack@exp
 17743  002616  C068  F01C         	movff	___ftdiv@sign,___ftpack@sign
 17744  00261A  EC32  F017         	call	___ftpack	;wreg free
 17745  00261E  C018  F029         	movff	?___ftpack,?___ftdiv
 17746  002622  C019  F02A         	movff	?___ftpack+1,?___ftdiv+1
 17747  002626  C01A  F02B         	movff	?___ftpack+2,?___ftdiv+2
 17748  00262A  0012               	return	
 17749  00262C                     __end_of___ftdiv:
 17750                           	opt stack 0
 17751                           tosu	equ	0xFFF
 17752                           tosh	equ	0xFFE
 17753                           tosl	equ	0xFFD
 17754                           pclath	equ	0xFFA
 17755                           tblptru	equ	0xFF8
 17756                           tblptrh	equ	0xFF7
 17757                           tblptrl	equ	0xFF6
 17758                           tablat	equ	0xFF5
 17759                           prodh	equ	0xFF4
 17760                           prodl	equ	0xFF3
 17761                           intcon	equ	0xFF2
 17762                           intcon2	equ	0xFF1
 17763                           postinc0	equ	0xFEE
 17764                           plusw0	equ	0xFEB
 17765                           wreg	equ	0xFE8
 17766                           indf1	equ	0xFE7
 17767                           postdec1	equ	0xFE5
 17768                           fsr1h	equ	0xFE2
 17769                           fsr1l	equ	0xFE1
 17770                           indf2	equ	0xFDF
 17771                           postinc2	equ	0xFDE
 17772                           postdec2	equ	0xFDD
 17773                           plusw2	equ	0xFDB
 17774                           fsr2h	equ	0xFDA
 17775                           fsr2l	equ	0xFD9
 17776                           status	equ	0xFD8
 17777                           
 17778 ;; *************** function ___awtoft *****************
 17779 ;; Defined at:
 17780 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 17781 ;; Parameters:    Size  Location     Type
 17782 ;;  c               2   31[COMRAM] int 
 17783 ;; Auto vars:     Size  Location     Type
 17784 ;;  sign            1   34[COMRAM] unsigned char 
 17785 ;; Return value:  Size  Location     Type
 17786 ;;                  3   31[COMRAM] float 
 17787 ;; Registers used:
 17788 ;;		wreg, status,2, status,0, cstack
 17789 ;; Tracked objects:
 17790 ;;		On entry : 0/0
 17791 ;;		On exit  : 0/0
 17792 ;;		Unchanged: 0/0
 17793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17794 ;;      Params:         3       0       0       0       0       0       0
 17795 ;;      Locals:         1       0       0       0       0       0       0
 17796 ;;      Temps:          0       0       0       0       0       0       0
 17797 ;;      Totals:         4       0       0       0       0       0       0
 17798 ;;Total ram usage:        4 bytes
 17799 ;; Hardware stack levels used:    1
 17800 ;; Hardware stack levels required when called:    5
 17801 ;; This function calls:
 17802 ;;		___ftpack
 17803 ;; This function is called by:
 17804 ;;		_ReadIntFromEeprom
 17805 ;;		_exp
 17806 ;;		_log
 17807 ;; This function uses a non-reentrant model
 17808 ;;
 17809                           
 17810                           	psect	text101
 17811  003DB0                     __ptext101:
 17812                           	opt stack 0
 17813  003DB0                     ___awtoft:
 17814                           	opt stack 19
 17815                           
 17816                           ;incstack = 0
 17817  003DB0  0E00               	movlw	0
 17818  003DB2  6E23               	movwf	___awtoft@sign,c
 17819  003DB4  AE21               	btfss	___awtoft@c+1,7,c
 17820  003DB6  D006               	goto	l1792
 17821  003DB8  6C20               	negf	___awtoft@c,c
 17822  003DBA  1E21               	comf	___awtoft@c+1,f,c
 17823  003DBC  B0D8               	btfsc	status,0,c
 17824  003DBE  2A21               	incf	___awtoft@c+1,f,c
 17825  003DC0  0E01               	movlw	1
 17826  003DC2  6E23               	movwf	___awtoft@sign,c
 17827  003DC4                     l1792:
 17828  003DC4  C020  F018         	movff	___awtoft@c,___ftpack@arg
 17829  003DC8  C021  F019         	movff	___awtoft@c+1,___ftpack@arg+1
 17830  003DCC  6A1A               	clrf	___ftpack@arg+2,c
 17831  003DCE  0E8E               	movlw	142
 17832  003DD0  6E1B               	movwf	___ftpack@exp,c
 17833  003DD2  C023  F01C         	movff	___awtoft@sign,___ftpack@sign
 17834  003DD6  EC32  F017         	call	___ftpack	;wreg free
 17835  003DDA  C018  F020         	movff	?___ftpack,?___awtoft
 17836  003DDE  C019  F021         	movff	?___ftpack+1,?___awtoft+1
 17837  003DE2  C01A  F022         	movff	?___ftpack+2,?___awtoft+2
 17838  003DE6  0012               	return	
 17839  003DE8                     __end_of___awtoft:
 17840                           	opt stack 0
 17841                           tosu	equ	0xFFF
 17842                           tosh	equ	0xFFE
 17843                           tosl	equ	0xFFD
 17844                           pclath	equ	0xFFA
 17845                           tblptru	equ	0xFF8
 17846                           tblptrh	equ	0xFF7
 17847                           tblptrl	equ	0xFF6
 17848                           tablat	equ	0xFF5
 17849                           prodh	equ	0xFF4
 17850                           prodl	equ	0xFF3
 17851                           intcon	equ	0xFF2
 17852                           intcon2	equ	0xFF1
 17853                           postinc0	equ	0xFEE
 17854                           plusw0	equ	0xFEB
 17855                           wreg	equ	0xFE8
 17856                           indf1	equ	0xFE7
 17857                           postdec1	equ	0xFE5
 17858                           fsr1h	equ	0xFE2
 17859                           fsr1l	equ	0xFE1
 17860                           indf2	equ	0xFDF
 17861                           postinc2	equ	0xFDE
 17862                           postdec2	equ	0xFDD
 17863                           plusw2	equ	0xFDB
 17864                           fsr2h	equ	0xFDA
 17865                           fsr2l	equ	0xFD9
 17866                           status	equ	0xFD8
 17867                           
 17868 ;; *************** function ___lltoft *****************
 17869 ;; Defined at:
 17870 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lltoft.c"
 17871 ;; Parameters:    Size  Location     Type
 17872 ;;  c               4   31[COMRAM] unsigned long 
 17873 ;; Auto vars:     Size  Location     Type
 17874 ;;  exp             1   39[COMRAM] unsigned char 
 17875 ;; Return value:  Size  Location     Type
 17876 ;;                  3   31[COMRAM] float 
 17877 ;; Registers used:
 17878 ;;		wreg, status,2, status,0, cstack
 17879 ;; Tracked objects:
 17880 ;;		On entry : 0/0
 17881 ;;		On exit  : 0/0
 17882 ;;		Unchanged: 0/0
 17883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17884 ;;      Params:         4       0       0       0       0       0       0
 17885 ;;      Locals:         1       0       0       0       0       0       0
 17886 ;;      Temps:          4       0       0       0       0       0       0
 17887 ;;      Totals:         9       0       0       0       0       0       0
 17888 ;;Total ram usage:        9 bytes
 17889 ;; Hardware stack levels used:    1
 17890 ;; Hardware stack levels required when called:    5
 17891 ;; This function calls:
 17892 ;;		___ftpack
 17893 ;; This function is called by:
 17894 ;;		_CheckFlashPrecentage
 17895 ;;		_pow
 17896 ;; This function uses a non-reentrant model
 17897 ;;
 17898                           
 17899                           	psect	text102
 17900  003840                     __ptext102:
 17901                           	opt stack 0
 17902  003840                     ___lltoft:
 17903                           	opt stack 20
 17904                           
 17905                           ;incstack = 0
 17906  003840  0E8E               	movlw	142
 17907  003842  6E28               	movwf	___lltoft@exp,c
 17908  003844  D006               	goto	l1968
 17909  003846  90D8               	bcf	status,0,c
 17910  003848  3223               	rrcf	___lltoft@c+3,f,c
 17911  00384A  3222               	rrcf	___lltoft@c+2,f,c
 17912  00384C  3221               	rrcf	___lltoft@c+1,f,c
 17913  00384E  3220               	rrcf	___lltoft@c,f,c
 17914  003850  2A28               	incf	___lltoft@exp,f,c
 17915  003852                     l1968:
 17916  003852  0E00               	movlw	0
 17917  003854  1420               	andwf	___lltoft@c,w,c
 17918  003856  6E24               	movwf	??___lltoft& (0+255),c
 17919  003858  0E00               	movlw	0
 17920  00385A  1421               	andwf	___lltoft@c+1,w,c
 17921  00385C  6E25               	movwf	(??___lltoft+1)& (0+255),c
 17922  00385E  0E00               	movlw	0
 17923  003860  1422               	andwf	___lltoft@c+2,w,c
 17924  003862  6E26               	movwf	(??___lltoft+2)& (0+255),c
 17925  003864  0EFF               	movlw	255
 17926  003866  1423               	andwf	___lltoft@c+3,w,c
 17927  003868  6E27               	movwf	(??___lltoft+3)& (0+255),c
 17928  00386A  5024               	movf	??___lltoft,w,c
 17929  00386C  1025               	iorwf	??___lltoft+1,w,c
 17930  00386E  1026               	iorwf	??___lltoft+2,w,c
 17931  003870  1027               	iorwf	??___lltoft+3,w,c
 17932  003872  A4D8               	btfss	status,2,c
 17933  003874  D7E8               	goto	l1969
 17934  003876  C020  F018         	movff	___lltoft@c,___ftpack@arg
 17935  00387A  C021  F019         	movff	___lltoft@c+1,___ftpack@arg+1
 17936  00387E  C022  F01A         	movff	___lltoft@c+2,___ftpack@arg+2
 17937  003882  C028  F01B         	movff	___lltoft@exp,___ftpack@exp
 17938  003886  0E00               	movlw	0
 17939  003888  6E1C               	movwf	___ftpack@sign,c
 17940  00388A  EC32  F017         	call	___ftpack	;wreg free
 17941  00388E  C018  F020         	movff	?___ftpack,?___lltoft
 17942  003892  C019  F021         	movff	?___ftpack+1,?___lltoft+1
 17943  003896  C01A  F022         	movff	?___ftpack+2,?___lltoft+2
 17944  00389A  0012               	return	
 17945  00389C                     __end_of___lltoft:
 17946                           	opt stack 0
 17947                           tosu	equ	0xFFF
 17948                           tosh	equ	0xFFE
 17949                           tosl	equ	0xFFD
 17950                           pclath	equ	0xFFA
 17951                           tblptru	equ	0xFF8
 17952                           tblptrh	equ	0xFF7
 17953                           tblptrl	equ	0xFF6
 17954                           tablat	equ	0xFF5
 17955                           prodh	equ	0xFF4
 17956                           prodl	equ	0xFF3
 17957                           intcon	equ	0xFF2
 17958                           intcon2	equ	0xFF1
 17959                           postinc0	equ	0xFEE
 17960                           plusw0	equ	0xFEB
 17961                           wreg	equ	0xFE8
 17962                           indf1	equ	0xFE7
 17963                           postdec1	equ	0xFE5
 17964                           fsr1h	equ	0xFE2
 17965                           fsr1l	equ	0xFE1
 17966                           indf2	equ	0xFDF
 17967                           postinc2	equ	0xFDE
 17968                           postdec2	equ	0xFDD
 17969                           plusw2	equ	0xFDB
 17970                           fsr2h	equ	0xFDA
 17971                           fsr2l	equ	0xFD9
 17972                           status	equ	0xFD8
 17973                           
 17974 ;; *************** function ___lwtoft *****************
 17975 ;; Defined at:
 17976 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwtoft.c"
 17977 ;; Parameters:    Size  Location     Type
 17978 ;;  c               2   31[COMRAM] unsigned int 
 17979 ;; Auto vars:     Size  Location     Type
 17980 ;;		None
 17981 ;; Return value:  Size  Location     Type
 17982 ;;                  3   31[COMRAM] float 
 17983 ;; Registers used:
 17984 ;;		wreg, status,2, status,0, cstack
 17985 ;; Tracked objects:
 17986 ;;		On entry : 0/0
 17987 ;;		On exit  : 0/0
 17988 ;;		Unchanged: 0/0
 17989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17990 ;;      Params:         3       0       0       0       0       0       0
 17991 ;;      Locals:         0       0       0       0       0       0       0
 17992 ;;      Temps:          0       0       0       0       0       0       0
 17993 ;;      Totals:         3       0       0       0       0       0       0
 17994 ;;Total ram usage:        3 bytes
 17995 ;; Hardware stack levels used:    1
 17996 ;; Hardware stack levels required when called:    5
 17997 ;; This function calls:
 17998 ;;		___ftpack
 17999 ;; This function is called by:
 18000 ;;		_AdcConvert
 18001 ;; This function uses a non-reentrant model
 18002 ;;
 18003                           
 18004                           	psect	text103
 18005  00412C                     __ptext103:
 18006                           	opt stack 0
 18007  00412C                     ___lwtoft:
 18008                           	opt stack 24
 18009                           
 18010                           ;incstack = 0
 18011  00412C  C020  F018         	movff	___lwtoft@c,___ftpack@arg
 18012  004130  C021  F019         	movff	___lwtoft@c+1,___ftpack@arg+1
 18013  004134  6A1A               	clrf	___ftpack@arg+2,c
 18014  004136  0E8E               	movlw	142
 18015  004138  6E1B               	movwf	___ftpack@exp,c
 18016  00413A  0E00               	movlw	0
 18017  00413C  6E1C               	movwf	___ftpack@sign,c
 18018  00413E  EC32  F017         	call	___ftpack	;wreg free
 18019  004142  C018  F020         	movff	?___ftpack,?___lwtoft
 18020  004146  C019  F021         	movff	?___ftpack+1,?___lwtoft+1
 18021  00414A  C01A  F022         	movff	?___ftpack+2,?___lwtoft+2
 18022  00414E  0012               	return	
 18023  004150                     __end_of___lwtoft:
 18024                           	opt stack 0
 18025                           tosu	equ	0xFFF
 18026                           tosh	equ	0xFFE
 18027                           tosl	equ	0xFFD
 18028                           pclath	equ	0xFFA
 18029                           tblptru	equ	0xFF8
 18030                           tblptrh	equ	0xFF7
 18031                           tblptrl	equ	0xFF6
 18032                           tablat	equ	0xFF5
 18033                           prodh	equ	0xFF4
 18034                           prodl	equ	0xFF3
 18035                           intcon	equ	0xFF2
 18036                           intcon2	equ	0xFF1
 18037                           postinc0	equ	0xFEE
 18038                           plusw0	equ	0xFEB
 18039                           wreg	equ	0xFE8
 18040                           indf1	equ	0xFE7
 18041                           postdec1	equ	0xFE5
 18042                           fsr1h	equ	0xFE2
 18043                           fsr1l	equ	0xFE1
 18044                           indf2	equ	0xFDF
 18045                           postinc2	equ	0xFDE
 18046                           postdec2	equ	0xFDD
 18047                           plusw2	equ	0xFDB
 18048                           fsr2h	equ	0xFDA
 18049                           fsr2l	equ	0xFD9
 18050                           status	equ	0xFD8
 18051                           
 18052 ;; *************** function ___ftpack *****************
 18053 ;; Defined at:
 18054 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 18055 ;; Parameters:    Size  Location     Type
 18056 ;;  arg             3   23[COMRAM] unsigned um
 18057 ;;  exp             1   26[COMRAM] unsigned char 
 18058 ;;  sign            1   27[COMRAM] unsigned char 
 18059 ;; Auto vars:     Size  Location     Type
 18060 ;;		None
 18061 ;; Return value:  Size  Location     Type
 18062 ;;                  3   23[COMRAM] float 
 18063 ;; Registers used:
 18064 ;;		wreg, status,2, status,0
 18065 ;; Tracked objects:
 18066 ;;		On entry : 0/0
 18067 ;;		On exit  : 0/0
 18068 ;;		Unchanged: 0/0
 18069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18070 ;;      Params:         5       0       0       0       0       0       0
 18071 ;;      Locals:         0       0       0       0       0       0       0
 18072 ;;      Temps:          3       0       0       0       0       0       0
 18073 ;;      Totals:         8       0       0       0       0       0       0
 18074 ;;Total ram usage:        8 bytes
 18075 ;; Hardware stack levels used:    1
 18076 ;; Hardware stack levels required when called:    4
 18077 ;; This function calls:
 18078 ;;		Nothing
 18079 ;; This function is called by:
 18080 ;;		___altoft
 18081 ;;		___awtoft
 18082 ;;		___ftadd
 18083 ;;		___ftdiv
 18084 ;;		___ftmul
 18085 ;;		___lltoft
 18086 ;;		___lwtoft
 18087 ;; This function uses a non-reentrant model
 18088 ;;
 18089                           
 18090                           	psect	text104
 18091  002E64                     __ptext104:
 18092                           	opt stack 0
 18093  002E64                     ___ftpack:
 18094                           	opt stack 18
 18095                           
 18096                           ;incstack = 0
 18097  002E64  501B               	movf	___ftpack@exp,w,c
 18098  002E66  B4D8               	btfsc	status,2,c
 18099  002E68  D005               	goto	u6380
 18100  002E6A  5018               	movf	___ftpack@arg,w,c
 18101  002E6C  1019               	iorwf	___ftpack@arg+1,w,c
 18102  002E6E  101A               	iorwf	___ftpack@arg+2,w,c
 18103  002E70  A4D8               	btfss	status,2,c
 18104  002E72  D00C               	goto	l1811
 18105  002E74                     u6380:
 18106  002E74  0E00               	movlw	0
 18107  002E76  6E18               	movwf	?___ftpack,c
 18108  002E78  0E00               	movlw	0
 18109  002E7A  6E19               	movwf	?___ftpack+1,c
 18110  002E7C  0E00               	movlw	0
 18111  002E7E  6E1A               	movwf	?___ftpack+2,c
 18112  002E80  0012               	return	
 18113  002E82  2A1B               	incf	___ftpack@exp,f,c
 18114  002E84  90D8               	bcf	status,0,c
 18115  002E86  321A               	rrcf	___ftpack@arg+2,f,c
 18116  002E88  3219               	rrcf	___ftpack@arg+1,f,c
 18117  002E8A  3218               	rrcf	___ftpack@arg,f,c
 18118  002E8C                     l1811:
 18119  002E8C  0E00               	movlw	0
 18120  002E8E  1418               	andwf	___ftpack@arg,w,c
 18121  002E90  6E1D               	movwf	??___ftpack& (0+255),c
 18122  002E92  0E00               	movlw	0
 18123  002E94  1419               	andwf	___ftpack@arg+1,w,c
 18124  002E96  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 18125  002E98  0EFE               	movlw	254
 18126  002E9A  141A               	andwf	___ftpack@arg+2,w,c
 18127  002E9C  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 18128  002E9E  501D               	movf	??___ftpack,w,c
 18129  002EA0  101E               	iorwf	??___ftpack+1,w,c
 18130  002EA2  101F               	iorwf	??___ftpack+2,w,c
 18131  002EA4  B4D8               	btfsc	status,2,c
 18132  002EA6  D00C               	goto	l1814
 18133  002EA8  D7EC               	goto	l1812
 18134  002EAA  2A1B               	incf	___ftpack@exp,f,c
 18135  002EAC  0E01               	movlw	1
 18136  002EAE  2618               	addwf	___ftpack@arg,f,c
 18137  002EB0  0E00               	movlw	0
 18138  002EB2  2219               	addwfc	___ftpack@arg+1,f,c
 18139  002EB4  0E00               	movlw	0
 18140  002EB6  221A               	addwfc	___ftpack@arg+2,f,c
 18141  002EB8  90D8               	bcf	status,0,c
 18142  002EBA  321A               	rrcf	___ftpack@arg+2,f,c
 18143  002EBC  3219               	rrcf	___ftpack@arg+1,f,c
 18144  002EBE  3218               	rrcf	___ftpack@arg,f,c
 18145  002EC0                     l1814:
 18146  002EC0  0E00               	movlw	0
 18147  002EC2  1418               	andwf	___ftpack@arg,w,c
 18148  002EC4  6E1D               	movwf	??___ftpack& (0+255),c
 18149  002EC6  0E00               	movlw	0
 18150  002EC8  1419               	andwf	___ftpack@arg+1,w,c
 18151  002ECA  6E1E               	movwf	(??___ftpack+1)& (0+255),c
 18152  002ECC  0EFF               	movlw	255
 18153  002ECE  141A               	andwf	___ftpack@arg+2,w,c
 18154  002ED0  6E1F               	movwf	(??___ftpack+2)& (0+255),c
 18155  002ED2  501D               	movf	??___ftpack,w,c
 18156  002ED4  101E               	iorwf	??___ftpack+1,w,c
 18157  002ED6  101F               	iorwf	??___ftpack+2,w,c
 18158  002ED8  B4D8               	btfsc	status,2,c
 18159  002EDA  D006               	goto	l1817
 18160  002EDC  D7E6               	goto	l1815
 18161  002EDE  061B               	decf	___ftpack@exp,f,c
 18162  002EE0  90D8               	bcf	status,0,c
 18163  002EE2  3618               	rlcf	___ftpack@arg,f,c
 18164  002EE4  3619               	rlcf	___ftpack@arg+1,f,c
 18165  002EE6  361A               	rlcf	___ftpack@arg+2,f,c
 18166  002EE8                     l1817:
 18167  002EE8  BE19               	btfsc	___ftpack@arg+1,7,c
 18168  002EEA  D003               	goto	u6420
 18169  002EEC  0E02               	movlw	2
 18170  002EEE  601B               	cpfslt	___ftpack@exp,c
 18171  002EF0  D7F6               	goto	l1818
 18172  002EF2                     u6420:
 18173  002EF2  A01B               	btfss	___ftpack@exp,0,c
 18174  002EF4  9E19               	bcf	___ftpack@arg+1,7,c
 18175  002EF6  90D8               	bcf	status,0,c
 18176  002EF8  321B               	rrcf	___ftpack@exp,f,c
 18177  002EFA  501B               	movf	___ftpack@exp,w,c
 18178  002EFC  121A               	iorwf	___ftpack@arg+2,f,c
 18179  002EFE  501C               	movf	___ftpack@sign,w,c
 18180  002F00  A4D8               	btfss	status,2,c
 18181  002F02  8E1A               	bsf	___ftpack@arg+2,7,c
 18182  002F04  C018  F018         	movff	___ftpack@arg,?___ftpack
 18183  002F08  C019  F019         	movff	___ftpack@arg+1,?___ftpack+1
 18184  002F0C  C01A  F01A         	movff	___ftpack@arg+2,?___ftpack+2
 18185  002F10  0012               	return	
 18186  002F12                     __end_of___ftpack:
 18187                           	opt stack 0
 18188                           tosu	equ	0xFFF
 18189                           tosh	equ	0xFFE
 18190                           tosl	equ	0xFFD
 18191                           pclath	equ	0xFFA
 18192                           tblptru	equ	0xFF8
 18193                           tblptrh	equ	0xFF7
 18194                           tblptrl	equ	0xFF6
 18195                           tablat	equ	0xFF5
 18196                           prodh	equ	0xFF4
 18197                           prodl	equ	0xFF3
 18198                           intcon	equ	0xFF2
 18199                           intcon2	equ	0xFF1
 18200                           postinc0	equ	0xFEE
 18201                           plusw0	equ	0xFEB
 18202                           wreg	equ	0xFE8
 18203                           indf1	equ	0xFE7
 18204                           postdec1	equ	0xFE5
 18205                           fsr1h	equ	0xFE2
 18206                           fsr1l	equ	0xFE1
 18207                           indf2	equ	0xFDF
 18208                           postinc2	equ	0xFDE
 18209                           postdec2	equ	0xFDD
 18210                           plusw2	equ	0xFDB
 18211                           fsr2h	equ	0xFDA
 18212                           fsr2l	equ	0xFD9
 18213                           status	equ	0xFD8
 18214                           
 18215 ;; *************** function _GetUint16FromBitArray *****************
 18216 ;; Defined at:
 18217 ;;		line 34 in file "SystemCommon.c"
 18218 ;; Parameters:    Size  Location     Type
 18219 ;;  bitarray        2   23[COMRAM] PTR unsigned char 
 18220 ;;		 -> synthLdTxArray(12), synthLdRxArray(12), 
 18221 ;;  numOfBits       2   25[COMRAM] int 
 18222 ;; Auto vars:     Size  Location     Type
 18223 ;;  i               2   32[COMRAM] int 
 18224 ;;  res             2   30[COMRAM] unsigned int 
 18225 ;; Return value:  Size  Location     Type
 18226 ;;                  2   23[COMRAM] unsigned int 
 18227 ;; Registers used:
 18228 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18229 ;; Tracked objects:
 18230 ;;		On entry : 0/0
 18231 ;;		On exit  : 0/0
 18232 ;;		Unchanged: 0/0
 18233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18234 ;;      Params:         4       0       0       0       0       0       0
 18235 ;;      Locals:         4       0       0       0       0       0       0
 18236 ;;      Temps:          3       0       0       0       0       0       0
 18237 ;;      Totals:        11       0       0       0       0       0       0
 18238 ;;Total ram usage:       11 bytes
 18239 ;; Hardware stack levels used:    1
 18240 ;; Hardware stack levels required when called:    4
 18241 ;; This function calls:
 18242 ;;		Nothing
 18243 ;; This function is called by:
 18244 ;;		_AdcConvert
 18245 ;; This function uses a non-reentrant model
 18246 ;;
 18247                           
 18248                           	psect	text105
 18249  0035F6                     __ptext105:
 18250                           	opt stack 0
 18251  0035F6                     _GetUint16FromBitArray:
 18252                           	opt stack 25
 18253                           
 18254                           ;SystemCommon.c: 36: uint16_t res = 0;
 18255                           
 18256                           ;incstack = 0
 18257  0035F6  0E00               	movlw	0
 18258  0035F8  6E20               	movwf	GetUint16FromBitArray@res+1,c
 18259  0035FA  0E00               	movlw	0
 18260  0035FC  6E1F               	movwf	GetUint16FromBitArray@res,c
 18261                           
 18262                           ;SystemCommon.c: 37: for (int i = 0 ; i < numOfBits ; i++)
 18263  0035FE  0E00               	movlw	0
 18264  003600  6E22               	movwf	GetUint16FromBitArray@i+1,c
 18265  003602  0E00               	movlw	0
 18266  003604  6E21               	movwf	GetUint16FromBitArray@i,c
 18267  003606  D01C               	goto	l1401
 18268  003608                     
 18269                           ;SystemCommon.c: 38: {
 18270                           ;SystemCommon.c: 39: if (bitarray[i])
 18271  003608  5021               	movf	GetUint16FromBitArray@i,w,c
 18272  00360A  2418               	addwf	GetUint16FromBitArray@bitarray,w,c
 18273  00360C  6ED9               	movwf	fsr2l,c
 18274  00360E  5022               	movf	GetUint16FromBitArray@i+1,w,c
 18275  003610  2019               	addwfc	GetUint16FromBitArray@bitarray+1,w,c
 18276  003612  6EDA               	movwf	fsr2h,c
 18277  003614  50DF               	movf	indf2,w,c
 18278  003616  B4D8               	btfsc	status,2,c
 18279  003618  D011               	goto	l1403
 18280                           
 18281                           ;SystemCommon.c: 40: {
 18282                           ;SystemCommon.c: 41: res |= (uint16_t)(1 << i);
 18283  00361A  C021  F01C         	movff	GetUint16FromBitArray@i,??_GetUint16FromBitArray
 18284  00361E  0E01               	movlw	1
 18285  003620  6E1D               	movwf	(??_GetUint16FromBitArray+1)& (0+255),c
 18286  003622  0E00               	movlw	0
 18287  003624  6E1E               	movwf	(??_GetUint16FromBitArray+2)& (0+255),c
 18288  003626  2A1C               	incf	??_GetUint16FromBitArray,f,c
 18289  003628  D003               	goto	u5584
 18290  00362A                     u5585:
 18291  00362A  90D8               	bcf	status,0,c
 18292  00362C  361D               	rlcf	??_GetUint16FromBitArray+1,f,c
 18293  00362E  361E               	rlcf	??_GetUint16FromBitArray+2,f,c
 18294  003630                     u5584:
 18295  003630  2E1C               	decfsz	??_GetUint16FromBitArray,f,c
 18296  003632  D7FB               	goto	u5585
 18297  003634  501D               	movf	??_GetUint16FromBitArray+1,w,c
 18298  003636  121F               	iorwf	GetUint16FromBitArray@res,f,c
 18299  003638  501E               	movf	??_GetUint16FromBitArray+2,w,c
 18300  00363A  1220               	iorwf	GetUint16FromBitArray@res+1,f,c
 18301  00363C                     l1403:
 18302  00363C  4A21               	infsnz	GetUint16FromBitArray@i,f,c
 18303  00363E  2A22               	incf	GetUint16FromBitArray@i+1,f,c
 18304  003640                     l1401:
 18305  003640  501A               	movf	GetUint16FromBitArray@numOfBits,w,c
 18306  003642  5C21               	subwf	GetUint16FromBitArray@i,w,c
 18307  003644  5022               	movf	GetUint16FromBitArray@i+1,w,c
 18308  003646  0A80               	xorlw	128
 18309  003648  6E1C               	movwf	??_GetUint16FromBitArray& (0+255),c
 18310  00364A  501B               	movf	GetUint16FromBitArray@numOfBits+1,w,c
 18311  00364C  0A80               	xorlw	128
 18312  00364E  581C               	subwfb	??_GetUint16FromBitArray& (0+255),w,c
 18313  003650  A0D8               	btfss	status,0,c
 18314  003652  D7DA               	goto	l1402
 18315                           
 18316                           ;SystemCommon.c: 42: }
 18317                           ;SystemCommon.c: 43: }
 18318                           ;SystemCommon.c: 44: return res;
 18319  003654  C01F  F018         	movff	GetUint16FromBitArray@res,?_GetUint16FromBitArray
 18320  003658  C020  F019         	movff	GetUint16FromBitArray@res+1,?_GetUint16FromBitArray+1
 18321  00365C  0012               	return		;funcret
 18322  00365E                     __end_of_GetUint16FromBitArray:
 18323                           	opt stack 0
 18324                           tosu	equ	0xFFF
 18325                           tosh	equ	0xFFE
 18326                           tosl	equ	0xFFD
 18327                           pclath	equ	0xFFA
 18328                           tblptru	equ	0xFF8
 18329                           tblptrh	equ	0xFF7
 18330                           tblptrl	equ	0xFF6
 18331                           tablat	equ	0xFF5
 18332                           prodh	equ	0xFF4
 18333                           prodl	equ	0xFF3
 18334                           intcon	equ	0xFF2
 18335                           intcon2	equ	0xFF1
 18336                           postinc0	equ	0xFEE
 18337                           plusw0	equ	0xFEB
 18338                           wreg	equ	0xFE8
 18339                           indf1	equ	0xFE7
 18340                           postdec1	equ	0xFE5
 18341                           fsr1h	equ	0xFE2
 18342                           fsr1l	equ	0xFE1
 18343                           indf2	equ	0xFDF
 18344                           postinc2	equ	0xFDE
 18345                           postdec2	equ	0xFDD
 18346                           plusw2	equ	0xFDB
 18347                           fsr2h	equ	0xFDA
 18348                           fsr2l	equ	0xFD9
 18349                           status	equ	0xFD8
 18350                           
 18351 ;; *************** function _FlashSampleWrite *****************
 18352 ;; Defined at:
 18353 ;;		line 29 in file "FlashApp.c"
 18354 ;; Parameters:    Size  Location     Type
 18355 ;;  sampleData      2   44[COMRAM] unsigned int 
 18356 ;;  channelNum      1   46[COMRAM] unsigned char 
 18357 ;; Auto vars:     Size  Location     Type
 18358 ;;  rotateLeft      2    2[BANK0 ] unsigned int 
 18359 ;; Return value:  Size  Location     Type
 18360 ;;                  1    wreg      void 
 18361 ;; Registers used:
 18362 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18363 ;; Tracked objects:
 18364 ;;		On entry : 0/0
 18365 ;;		On exit  : 0/0
 18366 ;;		Unchanged: 0/0
 18367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18368 ;;      Params:         3       0       0       0       0       0       0
 18369 ;;      Locals:         0       2       0       0       0       0       0
 18370 ;;      Temps:          0       2       0       0       0       0       0
 18371 ;;      Totals:         3       4       0       0       0       0       0
 18372 ;;Total ram usage:        7 bytes
 18373 ;; Hardware stack levels used:    1
 18374 ;; Hardware stack levels required when called:    6
 18375 ;; This function calls:
 18376 ;;		_FLASH_IsWriteDone
 18377 ;;		_FLASH_WriteBlock
 18378 ;; This function is called by:
 18379 ;;		_AdcConvert
 18380 ;; This function uses a non-reentrant model
 18381 ;;
 18382                           
 18383                           	psect	text106
 18384  002256                     __ptext106:
 18385                           	opt stack 0
 18386  002256                     _FlashSampleWrite:
 18387                           	opt stack 23
 18388                           
 18389                           ;FlashApp.c: 32: uint16_t rotateLeft = (channelNum << 12);
 18390                           
 18391                           ;incstack = 0
 18392  002256  502F               	movf	FlashSampleWrite@channelNum,w,c
 18393  002258  0100               	movlb	0	; () banked
 18394  00225A  6F60               	movwf	??_FlashSampleWrite& (0+255),b
 18395  00225C  6B61               	clrf	(??_FlashSampleWrite+1)& (0+255),b
 18396  00225E  0E0C               	movlw	12
 18397  002260                     u8665:
 18398  002260  90D8               	bcf	status,0,c
 18399  002262  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 18400  002264  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 18401  002266  2EE8               	decfsz	wreg,f,c
 18402  002268  D7FB               	goto	u8665
 18403  00226A  C060  F062         	movff	??_FlashSampleWrite,FlashSampleWrite@rotateLeft
 18404  00226E  C061  F063         	movff	??_FlashSampleWrite+1,FlashSampleWrite@rotateLeft+1
 18405                           
 18406                           ;FlashApp.c: 33: sampleData |= rotateLeft;
 18407  002272  5162               	movf	FlashSampleWrite@rotateLeft& (0+255),w,b
 18408  002274  122D               	iorwf	FlashSampleWrite@sampleData,f,c
 18409  002276  5163               	movf	(FlashSampleWrite@rotateLeft+1)& (0+255),w,b
 18410  002278  122E               	iorwf	FlashSampleWrite@sampleData+1,f,c
 18411                           
 18412                           ; BSR set to: 0
 18413                           ;FlashApp.c: 34: sampleArray[sampleCount] = sampleData;
 18414  00227A  90D8               	bcf	status,0,c
 18415  00227C  35EE               	rlcf	_sampleCount& (0+255),w,b
 18416  00227E  6ED9               	movwf	fsr2l,c
 18417  002280  35EF               	rlcf	(_sampleCount+1)& (0+255),w,b
 18418  002282  6EDA               	movwf	fsr2h,c
 18419  002284  0E32               	movlw	low _sampleArray
 18420  002286  26D9               	addwf	fsr2l,f,c
 18421  002288  0E01               	movlw	high _sampleArray
 18422  00228A  22DA               	addwfc	fsr2h,f,c
 18423  00228C  C02D  FFDE         	movff	FlashSampleWrite@sampleData,postinc2
 18424  002290  C02E  FFDD         	movff	FlashSampleWrite@sampleData+1,postdec2
 18425                           
 18426                           ; BSR set to: 0
 18427                           ;FlashApp.c: 35: sampleCount ++;
 18428  002294  4BEE               	infsnz	_sampleCount& (0+255),f,b
 18429  002296  2BEF               	incf	(_sampleCount+1)& (0+255),f,b
 18430                           
 18431                           ; BSR set to: 0
 18432                           ;FlashApp.c: 37: if(((sampleCount*sizeof(adc_result_t)) >= (64)) && FLASH_IsWriteDone())
 18433  002298  C0EE  F060         	movff	_sampleCount,??_FlashSampleWrite
 18434  00229C  C0EF  F061         	movff	_sampleCount+1,??_FlashSampleWrite+1
 18435  0022A0  90D8               	bcf	status,0,c
 18436  0022A2  3760               	rlcf	??_FlashSampleWrite& (0+255),f,b
 18437  0022A4  3761               	rlcf	(??_FlashSampleWrite+1)& (0+255),f,b
 18438  0022A6  5161               	movf	(??_FlashSampleWrite+1)& (0+255),w,b
 18439  0022A8  E104               	bnz	u8670
 18440  0022AA  0E40               	movlw	64
 18441  0022AC  5D60               	subwf	??_FlashSampleWrite& (0+255),w,b
 18442  0022AE  A0D8               	btfss	status,0,c
 18443  0022B0  0012               	return	
 18444  0022B2                     u8670:
 18445                           
 18446                           ; BSR set to: 0
 18447  0022B2  EC9E  F021         	call	_FLASH_IsWriteDone	;wreg free
 18448  0022B6  0900               	iorlw	0
 18449  0022B8  B4D8               	btfsc	status,2,c
 18450  0022BA  0012               	return	
 18451                           
 18452                           ;FlashApp.c: 38: {
 18453                           ;FlashApp.c: 39: FLASH_WriteBlock(writeAddress, (uint8_t *)sampleArray);
 18454  0022BC  C03E  F01D         	movff	_writeAddress,FLASH_WriteBlock@writeAddr
 18455  0022C0  C03F  F01E         	movff	_writeAddress+1,FLASH_WriteBlock@writeAddr+1
 18456  0022C4  C040  F01F         	movff	_writeAddress+2,FLASH_WriteBlock@writeAddr+2
 18457  0022C8  C041  F020         	movff	_writeAddress+3,FLASH_WriteBlock@writeAddr+3
 18458  0022CC  0E32               	movlw	low _sampleArray
 18459  0022CE  6E21               	movwf	FLASH_WriteBlock@flashWrBufPtr,c
 18460  0022D0  0E01               	movlw	high _sampleArray
 18461  0022D2  6E22               	movwf	FLASH_WriteBlock@flashWrBufPtr+1,c
 18462  0022D4  EC7D  F016         	call	_FLASH_WriteBlock	;wreg free
 18463                           
 18464                           ;FlashApp.c: 40: writeAddress += (64);
 18465  0022D8  0E40               	movlw	64
 18466  0022DA  263E               	addwf	_writeAddress,f,c
 18467  0022DC  0E00               	movlw	0
 18468  0022DE  223F               	addwfc	_writeAddress+1,f,c
 18469  0022E0  2240               	addwfc	_writeAddress+2,f,c
 18470  0022E2  2241               	addwfc	_writeAddress+3,f,c
 18471                           
 18472                           ;FlashApp.c: 41: if (writeAddress >= 0x7FF0)
 18473  0022E4  5041               	movf	_writeAddress+3,w,c
 18474  0022E6  1040               	iorwf	_writeAddress+2,w,c
 18475  0022E8  E106               	bnz	u8690
 18476  0022EA  0EF0               	movlw	240
 18477  0022EC  5C3E               	subwf	_writeAddress,w,c
 18478  0022EE  0E7F               	movlw	127
 18479  0022F0  583F               	subwfb	_writeAddress+1,w,c
 18480  0022F2  A0D8               	btfss	status,0,c
 18481  0022F4  D01A               	goto	l319
 18482  0022F6                     u8690:
 18483                           
 18484                           ;FlashApp.c: 42: {
 18485                           ;FlashApp.c: 43: writeAddress = 0x4580;
 18486  0022F6  0E80               	movlw	128
 18487  0022F8  6E3E               	movwf	_writeAddress,c
 18488  0022FA  0E45               	movlw	69
 18489  0022FC  6E3F               	movwf	_writeAddress+1,c
 18490  0022FE  0E00               	movlw	0
 18491  002300  6E40               	movwf	_writeAddress+2,c
 18492  002302  0E00               	movlw	0
 18493  002304  6E41               	movwf	_writeAddress+3,c
 18494                           
 18495                           ;FlashApp.c: 44: isReWriteDone = 1;
 18496  002306  0E01               	movlw	1
 18497  002308  6E3B               	movwf	_isReWriteDone,c
 18498                           
 18499                           ;FlashApp.c: 45: if (readAddress == 0x4580)
 18500  00230A  0E80               	movlw	128
 18501  00230C  0101               	movlb	1	; () banked
 18502  00230E  19F1               	xorwf	_readAddress& (0+255),w,b
 18503  002310  E10C               	bnz	l318
 18504  002312  0E45               	movlw	69
 18505  002314  19F2               	xorwf	(_readAddress+1)& (0+255),w,b
 18506  002316  11F3               	iorwf	(_readAddress+2)& (0+255),w,b
 18507  002318  11F4               	iorwf	(_readAddress+3)& (0+255),w,b
 18508  00231A  A4D8               	btfss	status,2,c
 18509  00231C  D006               	goto	l319
 18510                           
 18511                           ; BSR set to: 1
 18512                           ;FlashApp.c: 46: {
 18513                           ;FlashApp.c: 47: readAddress += (64);
 18514  00231E  0E40               	movlw	64
 18515  002320  27F1               	addwf	_readAddress& (0+255),f,b
 18516  002322  0E00               	movlw	0
 18517  002324  23F2               	addwfc	(_readAddress+1)& (0+255),f,b
 18518  002326  23F3               	addwfc	(_readAddress+2)& (0+255),f,b
 18519  002328  23F4               	addwfc	(_readAddress+3)& (0+255),f,b
 18520  00232A                     l319:
 18521  00232A                     l318:
 18522                           
 18523                           ;FlashApp.c: 48: }
 18524                           ;FlashApp.c: 49: }
 18525                           ;FlashApp.c: 52: if (numOfValidateSamples < ((0x4580-0x7FF0)/(64)))
 18526  00232A  0E17               	movlw	23
 18527  00232C  0100               	movlb	0	; () banked
 18528  00232E  5DEA               	subwf	_numOfValidateSamples& (0+255),w,b
 18529  002330  0EFF               	movlw	255
 18530  002332  59EB               	subwfb	(_numOfValidateSamples+1)& (0+255),w,b
 18531  002334  0EFF               	movlw	255
 18532  002336  59EC               	subwfb	(_numOfValidateSamples+2)& (0+255),w,b
 18533  002338  0EFF               	movlw	255
 18534  00233A  59ED               	subwfb	(_numOfValidateSamples+3)& (0+255),w,b
 18535  00233C  B0D8               	btfsc	status,0,c
 18536  00233E  D006               	goto	l320
 18537                           
 18538                           ; BSR set to: 0
 18539                           ;FlashApp.c: 53: {
 18540                           ;FlashApp.c: 54: numOfValidateSamples++;
 18541  002340  0E01               	movlw	1
 18542  002342  27EA               	addwf	_numOfValidateSamples& (0+255),f,b
 18543  002344  0E00               	movlw	0
 18544  002346  23EB               	addwfc	(_numOfValidateSamples+1)& (0+255),f,b
 18545  002348  23EC               	addwfc	(_numOfValidateSamples+2)& (0+255),f,b
 18546  00234A  23ED               	addwfc	(_numOfValidateSamples+3)& (0+255),f,b
 18547  00234C                     l320:
 18548                           
 18549                           ; BSR set to: 0
 18550                           ;FlashApp.c: 55: }
 18551                           ;FlashApp.c: 56: sampleCount = 0;
 18552                           
 18553                           ; BSR set to: 0
 18554  00234C  0E00               	movlw	0
 18555  00234E  6FEF               	movwf	(_sampleCount+1)& (0+255),b
 18556  002350  0E00               	movlw	0
 18557  002352  6FEE               	movwf	_sampleCount& (0+255),b
 18558  002354  0012               	return	
 18559  002356                     __end_of_FlashSampleWrite:
 18560                           	opt stack 0
 18561                           tosu	equ	0xFFF
 18562                           tosh	equ	0xFFE
 18563                           tosl	equ	0xFFD
 18564                           pclath	equ	0xFFA
 18565                           tblptru	equ	0xFF8
 18566                           tblptrh	equ	0xFF7
 18567                           tblptrl	equ	0xFF6
 18568                           tablat	equ	0xFF5
 18569                           prodh	equ	0xFF4
 18570                           prodl	equ	0xFF3
 18571                           intcon	equ	0xFF2
 18572                           intcon2	equ	0xFF1
 18573                           postinc0	equ	0xFEE
 18574                           plusw0	equ	0xFEB
 18575                           wreg	equ	0xFE8
 18576                           indf1	equ	0xFE7
 18577                           postdec1	equ	0xFE5
 18578                           fsr1h	equ	0xFE2
 18579                           fsr1l	equ	0xFE1
 18580                           indf2	equ	0xFDF
 18581                           postinc2	equ	0xFDE
 18582                           postdec2	equ	0xFDD
 18583                           plusw2	equ	0xFDB
 18584                           fsr2h	equ	0xFDA
 18585                           fsr2l	equ	0xFD9
 18586                           status	equ	0xFD8
 18587                           
 18588 ;; *************** function _FLASH_WriteBlock *****************
 18589 ;; Defined at:
 18590 ;;		line 93 in file "mcc_generated_files/memory.c"
 18591 ;; Parameters:    Size  Location     Type
 18592 ;;  writeAddr       4   28[COMRAM] unsigned long 
 18593 ;;  flashWrBufPt    2   32[COMRAM] PTR unsigned char 
 18594 ;;		 -> sampleArray(64), 
 18595 ;; Auto vars:     Size  Location     Type
 18596 ;;  blockStartAd    4   38[COMRAM] unsigned long 
 18597 ;;  i               1   43[COMRAM] unsigned char 
 18598 ;;  GIEBitValue     1   42[COMRAM] unsigned char 
 18599 ;; Return value:  Size  Location     Type
 18600 ;;                  1    wreg      char 
 18601 ;; Registers used:
 18602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18603 ;; Tracked objects:
 18604 ;;		On entry : 0/0
 18605 ;;		On exit  : 0/0
 18606 ;;		Unchanged: 0/0
 18607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18608 ;;      Params:         6       0       0       0       0       0       0
 18609 ;;      Locals:         6       0       0       0       0       0       0
 18610 ;;      Temps:          4       0       0       0       0       0       0
 18611 ;;      Totals:        16       0       0       0       0       0       0
 18612 ;;Total ram usage:       16 bytes
 18613 ;; Hardware stack levels used:    1
 18614 ;; Hardware stack levels required when called:    5
 18615 ;; This function calls:
 18616 ;;		_FLASH_EraseBlock
 18617 ;; This function is called by:
 18618 ;;		_FlashSampleWrite
 18619 ;;		_FLASH_WriteByte
 18620 ;; This function uses a non-reentrant model
 18621 ;;
 18622                           
 18623                           	psect	text107
 18624  002CFA                     __ptext107:
 18625                           	opt stack 0
 18626  002CFA                     _FLASH_WriteBlock:
 18627                           	opt stack 23
 18628                           
 18629                           ;memory.c: 95: uint32_t blockStartAddr = (uint32_t )(writeAddr & ((0x8000-1) ^ ((64)-1))
      +                          );
 18630                           
 18631                           ;incstack = 0
 18632  002CFA  0EC0               	movlw	192
 18633  002CFC  6E23               	movwf	??_FLASH_WriteBlock& (0+255),c
 18634  002CFE  0E7F               	movlw	127
 18635  002D00  6E24               	movwf	(??_FLASH_WriteBlock+1)& (0+255),c
 18636  002D02  C01D  F025         	movff	FLASH_WriteBlock@writeAddr,??_FLASH_WriteBlock+2
 18637  002D06  C01E  F026         	movff	FLASH_WriteBlock@writeAddr+1,??_FLASH_WriteBlock+3
 18638  002D0A  5023               	movf	??_FLASH_WriteBlock,w,c
 18639  002D0C  1625               	andwf	??_FLASH_WriteBlock+2,f,c
 18640  002D0E  5024               	movf	??_FLASH_WriteBlock+1,w,c
 18641  002D10  1626               	andwf	??_FLASH_WriteBlock+3,f,c
 18642  002D12  C025  F027         	movff	??_FLASH_WriteBlock+2,FLASH_WriteBlock@blockStartAddr
 18643  002D16  C026  F028         	movff	??_FLASH_WriteBlock+3,FLASH_WriteBlock@blockStartAddr+1
 18644  002D1A  6A29               	clrf	FLASH_WriteBlock@blockStartAddr+2,c
 18645  002D1C  6A2A               	clrf	FLASH_WriteBlock@blockStartAddr+3,c
 18646                           
 18647                           ;memory.c: 96: uint8_t GIEBitValue = INTCONbits.GIE;
 18648  002D1E  0E00               	movlw	0
 18649  002D20  BEF2               	btfsc	intcon,7,c	;volatile
 18650  002D22  0E01               	movlw	1
 18651  002D24  6E2B               	movwf	FLASH_WriteBlock@GIEBitValue,c
 18652                           
 18653                           ;memory.c: 97: uint8_t i;
 18654                           ;memory.c: 100: if( writeAddr != blockStartAddr )
 18655  002D26  5027               	movf	FLASH_WriteBlock@blockStartAddr,w,c
 18656  002D28  181D               	xorwf	FLASH_WriteBlock@writeAddr,w,c
 18657  002D2A  E144               	bnz	l1045
 18658  002D2C  5028               	movf	FLASH_WriteBlock@blockStartAddr+1,w,c
 18659  002D2E  181E               	xorwf	FLASH_WriteBlock@writeAddr+1,w,c
 18660  002D30  E141               	bnz	l1045
 18661  002D32  5029               	movf	FLASH_WriteBlock@blockStartAddr+2,w,c
 18662  002D34  181F               	xorwf	FLASH_WriteBlock@writeAddr+2,w,c
 18663  002D36  E13E               	bnz	l1045
 18664  002D38  502A               	movf	FLASH_WriteBlock@blockStartAddr+3,w,c
 18665  002D3A  1820               	xorwf	FLASH_WriteBlock@writeAddr+3,w,c
 18666  002D3C  A4D8               	btfss	status,2,c
 18667  002D3E  0012               	return	
 18668                           
 18669                           ;memory.c: 103: }
 18670                           ;memory.c: 106: FLASH_EraseBlock(writeAddr);
 18671                           
 18672                           ;memory.c: 101: {
 18673                           ;memory.c: 102: return -1;
 18674                           ;	Return value of _FLASH_WriteBlock is never used
 18675  002D40  C01D  F018         	movff	FLASH_WriteBlock@writeAddr,FLASH_EraseBlock@baseAddr
 18676  002D44  C01E  F019         	movff	FLASH_WriteBlock@writeAddr+1,FLASH_EraseBlock@baseAddr+1
 18677  002D48  C01F  F01A         	movff	FLASH_WriteBlock@writeAddr+2,FLASH_EraseBlock@baseAddr+2
 18678  002D4C  C020  F01B         	movff	FLASH_WriteBlock@writeAddr+3,FLASH_EraseBlock@baseAddr+3
 18679  002D50  EC95  F01F         	call	_FLASH_EraseBlock	;wreg free
 18680                           
 18681                           ;memory.c: 109: TBLPTRU = (uint8_t)((writeAddr & 0x00FF0000) >> 16);
 18682  002D54  C01F  FFF8         	movff	FLASH_WriteBlock@writeAddr+2,tblptru	;volatile
 18683                           
 18684                           ;memory.c: 110: TBLPTRH = (uint8_t)((writeAddr & 0x0000FF00)>> 8);
 18685  002D58  C01E  FFF7         	movff	FLASH_WriteBlock@writeAddr+1,tblptrh	;volatile
 18686                           
 18687                           ;memory.c: 111: TBLPTRL = (uint8_t)(writeAddr & 0x000000FF);
 18688  002D5C  C01D  FFF6         	movff	FLASH_WriteBlock@writeAddr,tblptrl	;volatile
 18689                           
 18690                           ;memory.c: 114: for (i=0; i<(64); i++)
 18691  002D60  0E00               	movlw	0
 18692  002D62  6E2C               	movwf	FLASH_WriteBlock@i,c
 18693  002D64                     l8219:
 18694  002D64  0E3F               	movlw	63
 18695  002D66  642C               	cpfsgt	FLASH_WriteBlock@i,c
 18696  002D68  D001               	goto	l1046
 18697  002D6A  D013               	goto	u8280
 18698  002D6C                     l1046:
 18699                           
 18700                           ;memory.c: 115: {
 18701                           ;memory.c: 116: TABLAT = flashWrBufPtr[i];
 18702  002D6C  502C               	movf	FLASH_WriteBlock@i,w,c
 18703  002D6E  0D01               	mullw	1
 18704  002D70  50F3               	movf	prodl,w,c
 18705  002D72  2421               	addwf	FLASH_WriteBlock@flashWrBufPtr,w,c
 18706  002D74  6ED9               	movwf	fsr2l,c
 18707  002D76  50F4               	movf	prodh,w,c
 18708  002D78  2022               	addwfc	FLASH_WriteBlock@flashWrBufPtr+1,w,c
 18709  002D7A  6EDA               	movwf	fsr2h,c
 18710  002D7C  50DF               	movf	indf2,w,c
 18711  002D7E  6EF5               	movwf	tablat,c	;volatile
 18712                           
 18713                           ;memory.c: 118: if (i == ((64)-1))
 18714  002D80  0E3F               	movlw	63
 18715  002D82  182C               	xorwf	FLASH_WriteBlock@i,w,c
 18716  002D84  A4D8               	btfss	status,2,c
 18717  002D86  D002               	goto	l1048
 18718  002D88  000C               	tblwt		*	;# 
 18719                           
 18720                           ;memory.c: 121: }
 18721  002D8A  D001               	goto	l1049
 18722  002D8C                     l1048:
 18723  002D8C  000D               	tblwt		*+	;# 
 18724  002D8E                     l1049:
 18725  002D8E  2A2C               	incf	FLASH_WriteBlock@i,f,c
 18726  002D90  D7E9               	goto	l8219
 18727  002D92                     u8280:
 18728                           
 18729                           ;memory.c: 125: }
 18730                           ;memory.c: 126: }
 18731                           ;memory.c: 128: PIR2bits.EEIF = 1;
 18732  002D92  88A1               	bsf	4001,4,c	;volatile
 18733                           
 18734                           ;memory.c: 129: EECON1bits.EEPGD = 1;
 18735  002D94  8EA6               	bsf	4006,7,c	;volsfr
 18736                           
 18737                           ;memory.c: 130: EECON1bits.CFGS = 0;
 18738  002D96  9CA6               	bcf	4006,6,c	;volsfr
 18739                           
 18740                           ;memory.c: 131: EECON1bits.WREN = 1;
 18741  002D98  84A6               	bsf	4006,2,c	;volsfr
 18742                           
 18743                           ;memory.c: 132: INTCONbits.GIE = 0;
 18744  002D9A  9EF2               	bcf	intcon,7,c	;volatile
 18745                           
 18746                           ;memory.c: 133: EECON2 = 0x55;
 18747  002D9C  0E55               	movlw	85
 18748  002D9E  6EA7               	movwf	4007,c	;volsfr
 18749                           
 18750                           ;memory.c: 134: EECON2 = 0xAA;
 18751  002DA0  0EAA               	movlw	170
 18752  002DA2  6EA7               	movwf	4007,c	;volsfr
 18753                           
 18754                           ;memory.c: 135: EECON1bits.WR = 1;
 18755  002DA4  82A6               	bsf	4006,1,c	;volsfr
 18756                           
 18757                           ;memory.c: 137: EECON1bits.WREN = 0;
 18758  002DA6  94A6               	bcf	4006,2,c	;volsfr
 18759                           
 18760                           ;memory.c: 138: INTCONbits.GIE = GIEBitValue;
 18761  002DA8  B02B               	btfsc	FLASH_WriteBlock@GIEBitValue,0,c
 18762  002DAA  D002               	bra	u8295
 18763  002DAC  9EF2               	bcf	intcon,7,c	;volatile
 18764  002DAE  D001               	bra	u8296
 18765  002DB0                     u8295:
 18766  002DB0  8EF2               	bsf	intcon,7,c	;volatile
 18767  002DB2                     u8296:
 18768  002DB2  0012               	return	
 18769  002DB4                     l1045:
 18770  002DB4  0012               	return		;funcret
 18771  002DB6                     __end_of_FLASH_WriteBlock:
 18772                           	opt stack 0
 18773                           tosu	equ	0xFFF
 18774                           tosh	equ	0xFFE
 18775                           tosl	equ	0xFFD
 18776                           pclath	equ	0xFFA
 18777                           tblptru	equ	0xFF8
 18778                           tblptrh	equ	0xFF7
 18779                           tblptrl	equ	0xFF6
 18780                           tablat	equ	0xFF5
 18781                           prodh	equ	0xFF4
 18782                           prodl	equ	0xFF3
 18783                           intcon	equ	0xFF2
 18784                           intcon2	equ	0xFF1
 18785                           postinc0	equ	0xFEE
 18786                           plusw0	equ	0xFEB
 18787                           wreg	equ	0xFE8
 18788                           indf1	equ	0xFE7
 18789                           postdec1	equ	0xFE5
 18790                           fsr1h	equ	0xFE2
 18791                           fsr1l	equ	0xFE1
 18792                           indf2	equ	0xFDF
 18793                           postinc2	equ	0xFDE
 18794                           postdec2	equ	0xFDD
 18795                           plusw2	equ	0xFDB
 18796                           fsr2h	equ	0xFDA
 18797                           fsr2l	equ	0xFD9
 18798                           status	equ	0xFD8
 18799                           
 18800 ;; *************** function _FLASH_EraseBlock *****************
 18801 ;; Defined at:
 18802 ;;		line 144 in file "mcc_generated_files/memory.c"
 18803 ;; Parameters:    Size  Location     Type
 18804 ;;  baseAddr        4   23[COMRAM] unsigned long 
 18805 ;; Auto vars:     Size  Location     Type
 18806 ;;  GIEBitValue     1   27[COMRAM] unsigned char 
 18807 ;; Return value:  Size  Location     Type
 18808 ;;                  1    wreg      void 
 18809 ;; Registers used:
 18810 ;;		wreg, status,2
 18811 ;; Tracked objects:
 18812 ;;		On entry : 0/0
 18813 ;;		On exit  : 0/0
 18814 ;;		Unchanged: 0/0
 18815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18816 ;;      Params:         4       0       0       0       0       0       0
 18817 ;;      Locals:         1       0       0       0       0       0       0
 18818 ;;      Temps:          0       0       0       0       0       0       0
 18819 ;;      Totals:         5       0       0       0       0       0       0
 18820 ;;Total ram usage:        5 bytes
 18821 ;; Hardware stack levels used:    1
 18822 ;; Hardware stack levels required when called:    4
 18823 ;; This function calls:
 18824 ;;		Nothing
 18825 ;; This function is called by:
 18826 ;;		_FLASH_WriteBlock
 18827 ;; This function uses a non-reentrant model
 18828 ;;
 18829                           
 18830                           	psect	text108
 18831  003F2A                     __ptext108:
 18832                           	opt stack 0
 18833  003F2A                     _FLASH_EraseBlock:
 18834                           	opt stack 23
 18835                           
 18836                           ;memory.c: 146: uint8_t GIEBitValue = INTCONbits.GIE;
 18837                           
 18838                           ;incstack = 0
 18839  003F2A  0E00               	movlw	0
 18840  003F2C  BEF2               	btfsc	intcon,7,c	;volatile
 18841  003F2E  0E01               	movlw	1
 18842  003F30  6E1C               	movwf	FLASH_EraseBlock@GIEBitValue,c
 18843                           
 18844                           ;memory.c: 148: TBLPTRU = (uint8_t)((baseAddr & 0x00FF0000) >> 16);
 18845  003F32  C01A  FFF8         	movff	FLASH_EraseBlock@baseAddr+2,tblptru	;volatile
 18846                           
 18847                           ;memory.c: 149: TBLPTRH = (uint8_t)((baseAddr & 0x0000FF00)>> 8);
 18848  003F36  C019  FFF7         	movff	FLASH_EraseBlock@baseAddr+1,tblptrh	;volatile
 18849                           
 18850                           ;memory.c: 150: TBLPTRL = (uint8_t)(baseAddr & 0x000000FF);
 18851  003F3A  C018  FFF6         	movff	FLASH_EraseBlock@baseAddr,tblptrl	;volatile
 18852                           
 18853                           ;memory.c: 152: EECON1bits.EEPGD = 1;
 18854  003F3E  8EA6               	bsf	4006,7,c	;volsfr
 18855                           
 18856                           ;memory.c: 153: EECON1bits.CFGS = 0;
 18857  003F40  9CA6               	bcf	4006,6,c	;volsfr
 18858                           
 18859                           ;memory.c: 154: EECON1bits.WREN = 1;
 18860  003F42  84A6               	bsf	4006,2,c	;volsfr
 18861                           
 18862                           ;memory.c: 155: EECON1bits.FREE = 1;
 18863  003F44  88A6               	bsf	4006,4,c	;volsfr
 18864                           
 18865                           ;memory.c: 156: INTCONbits.GIE = 0;
 18866  003F46  9EF2               	bcf	intcon,7,c	;volatile
 18867                           
 18868                           ;memory.c: 157: EECON2 = 0x55;
 18869  003F48  0E55               	movlw	85
 18870  003F4A  6EA7               	movwf	4007,c	;volsfr
 18871                           
 18872                           ;memory.c: 158: EECON2 = 0xAA;
 18873  003F4C  0EAA               	movlw	170
 18874  003F4E  6EA7               	movwf	4007,c	;volsfr
 18875                           
 18876                           ;memory.c: 159: EECON1bits.WR = 1;
 18877  003F50  82A6               	bsf	4006,1,c	;volsfr
 18878                           
 18879                           ;memory.c: 160: INTCONbits.GIE = GIEBitValue;
 18880  003F52  B01C               	btfsc	FLASH_EraseBlock@GIEBitValue,0,c
 18881  003F54  D002               	bra	u8155
 18882  003F56  9EF2               	bcf	intcon,7,c	;volatile
 18883  003F58  D001               	bra	u8156
 18884  003F5A                     u8155:
 18885  003F5A  8EF2               	bsf	intcon,7,c	;volatile
 18886  003F5C                     u8156:
 18887  003F5C  0012               	return		;funcret
 18888  003F5E                     __end_of_FLASH_EraseBlock:
 18889                           	opt stack 0
 18890                           tosu	equ	0xFFF
 18891                           tosh	equ	0xFFE
 18892                           tosl	equ	0xFFD
 18893                           pclath	equ	0xFFA
 18894                           tblptru	equ	0xFF8
 18895                           tblptrh	equ	0xFF7
 18896                           tblptrl	equ	0xFF6
 18897                           tablat	equ	0xFF5
 18898                           prodh	equ	0xFF4
 18899                           prodl	equ	0xFF3
 18900                           intcon	equ	0xFF2
 18901                           intcon2	equ	0xFF1
 18902                           postinc0	equ	0xFEE
 18903                           plusw0	equ	0xFEB
 18904                           wreg	equ	0xFE8
 18905                           indf1	equ	0xFE7
 18906                           postdec1	equ	0xFE5
 18907                           fsr1h	equ	0xFE2
 18908                           fsr1l	equ	0xFE1
 18909                           indf2	equ	0xFDF
 18910                           postinc2	equ	0xFDE
 18911                           postdec2	equ	0xFDD
 18912                           plusw2	equ	0xFDB
 18913                           fsr2h	equ	0xFDA
 18914                           fsr2l	equ	0xFD9
 18915                           status	equ	0xFD8
 18916                           
 18917 ;; *************** function _FLASH_IsWriteDone *****************
 18918 ;; Defined at:
 18919 ;;		line 189 in file "mcc_generated_files/memory.c"
 18920 ;; Parameters:    Size  Location     Type
 18921 ;;		None
 18922 ;; Auto vars:     Size  Location     Type
 18923 ;;		None
 18924 ;; Return value:  Size  Location     Type
 18925 ;;                  1    wreg      unsigned char 
 18926 ;; Registers used:
 18927 ;;		wreg
 18928 ;; Tracked objects:
 18929 ;;		On entry : 0/0
 18930 ;;		On exit  : 0/0
 18931 ;;		Unchanged: 0/0
 18932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18933 ;;      Params:         0       0       0       0       0       0       0
 18934 ;;      Locals:         0       0       0       0       0       0       0
 18935 ;;      Temps:          0       0       0       0       0       0       0
 18936 ;;      Totals:         0       0       0       0       0       0       0
 18937 ;;Total ram usage:        0 bytes
 18938 ;; Hardware stack levels used:    1
 18939 ;; Hardware stack levels required when called:    4
 18940 ;; This function calls:
 18941 ;;		Nothing
 18942 ;; This function is called by:
 18943 ;;		_FlashSampleWrite
 18944 ;;		_FlashReadUart
 18945 ;; This function uses a non-reentrant model
 18946 ;;
 18947                           
 18948                           	psect	text109
 18949  00433C                     __ptext109:
 18950                           	opt stack 0
 18951  00433C                     _FLASH_IsWriteDone:
 18952                           	opt stack 23
 18953                           
 18954                           ;memory.c: 191: return (EECON1bits.WR == 0);
 18955                           
 18956                           ;incstack = 0
 18957  00433C  A2A6               	btfss	4006,1,c	;volsfr
 18958  00433E  D001               	goto	u7941
 18959  004340  D002               	goto	u7940
 18960  004342                     u7941:
 18961  004342  0E01               	movlw	1
 18962  004344  0012               	return	
 18963  004346                     u7940:
 18964  004346  0E00               	movlw	0
 18965  004348  0012               	return	
 18966  00434A                     __end_of_FLASH_IsWriteDone:
 18967                           	opt stack 0
 18968                           tosu	equ	0xFFF
 18969                           tosh	equ	0xFFE
 18970                           tosl	equ	0xFFD
 18971                           pclath	equ	0xFFA
 18972                           tblptru	equ	0xFF8
 18973                           tblptrh	equ	0xFF7
 18974                           tblptrl	equ	0xFF6
 18975                           tablat	equ	0xFF5
 18976                           prodh	equ	0xFF4
 18977                           prodl	equ	0xFF3
 18978                           intcon	equ	0xFF2
 18979                           intcon2	equ	0xFF1
 18980                           postinc0	equ	0xFEE
 18981                           plusw0	equ	0xFEB
 18982                           wreg	equ	0xFE8
 18983                           indf1	equ	0xFE7
 18984                           postdec1	equ	0xFE5
 18985                           fsr1h	equ	0xFE2
 18986                           fsr1l	equ	0xFE1
 18987                           indf2	equ	0xFDF
 18988                           postinc2	equ	0xFDE
 18989                           postdec2	equ	0xFDD
 18990                           plusw2	equ	0xFDB
 18991                           fsr2h	equ	0xFDA
 18992                           fsr2l	equ	0xFD9
 18993                           status	equ	0xFD8
 18994                           
 18995 ;; *************** function _ADC_GetConversion *****************
 18996 ;; Defined at:
 18997 ;;		line 106 in file "mcc_generated_files/adc.c"
 18998 ;; Parameters:    Size  Location     Type
 18999 ;;  channel         1    wreg     enum E6975
 19000 ;; Auto vars:     Size  Location     Type
 19001 ;;  channel         1   27[COMRAM] enum E6975
 19002 ;; Return value:  Size  Location     Type
 19003 ;;                  2   23[COMRAM] unsigned int 
 19004 ;; Registers used:
 19005 ;;		wreg, status,2, status,0
 19006 ;; Tracked objects:
 19007 ;;		On entry : 0/0
 19008 ;;		On exit  : 0/0
 19009 ;;		Unchanged: 0/0
 19010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19011 ;;      Params:         2       0       0       0       0       0       0
 19012 ;;      Locals:         1       0       0       0       0       0       0
 19013 ;;      Temps:          2       0       0       0       0       0       0
 19014 ;;      Totals:         5       0       0       0       0       0       0
 19015 ;;Total ram usage:        5 bytes
 19016 ;; Hardware stack levels used:    1
 19017 ;; Hardware stack levels required when called:    4
 19018 ;; This function calls:
 19019 ;;		Nothing
 19020 ;; This function is called by:
 19021 ;;		_AdcConvert
 19022 ;; This function uses a non-reentrant model
 19023 ;;
 19024                           
 19025                           	psect	text110
 19026  003FBE                     __ptext110:
 19027                           	opt stack 0
 19028  003FBE                     _ADC_GetConversion:
 19029                           	opt stack 25
 19030                           
 19031                           ;incstack = 0
 19032                           ;ADC_GetConversion@channel stored from wreg
 19033  003FBE  6E1C               	movwf	ADC_GetConversion@channel,c
 19034                           
 19035                           ;adc.c: 109: ADCON0bits.CHS = channel;
 19036  003FC0  C01C  F01A         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
 19037  003FC4  461A               	rlncf	??_ADC_GetConversion,f,c
 19038  003FC6  461A               	rlncf	??_ADC_GetConversion,f,c
 19039  003FC8  50C2               	movf	4034,w,c	;volatile
 19040  003FCA  181A               	xorwf	??_ADC_GetConversion,w,c
 19041  003FCC  0B83               	andlw	-125
 19042  003FCE  181A               	xorwf	??_ADC_GetConversion,w,c
 19043  003FD0  6EC2               	movwf	4034,c	;volatile
 19044                           
 19045                           ;adc.c: 112: ADCON0bits.ADON = 1;
 19046  003FD2  80C2               	bsf	4034,0,c	;volatile
 19047                           
 19048                           ;adc.c: 115: ADCON0bits.GO_nDONE = 1;
 19049  003FD4  82C2               	bsf	4034,1,c	;volatile
 19050  003FD6                     
 19051                           ;adc.c: 119: {
 19052  003FD6  B2C2               	btfsc	4034,1,c	;volatile
 19053  003FD8  D7FE               	goto	l1162
 19054                           
 19055                           ;adc.c: 120: }
 19056                           ;adc.c: 122: return ((ADRESH << 8) + ADRESL);
 19057  003FDA  50C4               	movf	4036,w,c	;volatile
 19058  003FDC  6E1B               	movwf	(??_ADC_GetConversion+1)& (0+255),c
 19059  003FDE  6A1A               	clrf	??_ADC_GetConversion& (0+255),c
 19060  003FE0  50C3               	movf	4035,w,c	;volatile
 19061  003FE2  241A               	addwf	??_ADC_GetConversion,w,c
 19062  003FE4  6E18               	movwf	?_ADC_GetConversion,c
 19063  003FE6  0E00               	movlw	0
 19064  003FE8  201B               	addwfc	??_ADC_GetConversion+1,w,c
 19065  003FEA  6E19               	movwf	?_ADC_GetConversion+1,c
 19066  003FEC  0012               	return	
 19067  003FEE                     __end_of_ADC_GetConversion:
 19068                           	opt stack 0
 19069                           tosu	equ	0xFFF
 19070                           tosh	equ	0xFFE
 19071                           tosl	equ	0xFFD
 19072                           pclath	equ	0xFFA
 19073                           tblptru	equ	0xFF8
 19074                           tblptrh	equ	0xFF7
 19075                           tblptrl	equ	0xFF6
 19076                           tablat	equ	0xFF5
 19077                           prodh	equ	0xFF4
 19078                           prodl	equ	0xFF3
 19079                           intcon	equ	0xFF2
 19080                           intcon2	equ	0xFF1
 19081                           postinc0	equ	0xFEE
 19082                           plusw0	equ	0xFEB
 19083                           wreg	equ	0xFE8
 19084                           indf1	equ	0xFE7
 19085                           postdec1	equ	0xFE5
 19086                           fsr1h	equ	0xFE2
 19087                           fsr1l	equ	0xFE1
 19088                           indf2	equ	0xFDF
 19089                           postinc2	equ	0xFDE
 19090                           postdec2	equ	0xFDD
 19091                           plusw2	equ	0xFDB
 19092                           fsr2h	equ	0xFDA
 19093                           fsr2l	equ	0xFD9
 19094                           status	equ	0xFD8
 19095                           
 19096 ;; *************** function _INTERRUPT_InterruptManager *****************
 19097 ;; Defined at:
 19098 ;;		line 57 in file "mcc_generated_files/interrupt_manager.c"
 19099 ;; Parameters:    Size  Location     Type
 19100 ;;		None
 19101 ;; Auto vars:     Size  Location     Type
 19102 ;;		None
 19103 ;; Return value:  Size  Location     Type
 19104 ;;                  1    wreg      void 
 19105 ;; Registers used:
 19106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 19107 ;; Tracked objects:
 19108 ;;		On entry : 0/0
 19109 ;;		On exit  : 0/0
 19110 ;;		Unchanged: 0/0
 19111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19112 ;;      Params:         0       0       0       0       0       0       0
 19113 ;;      Locals:         0       0       0       0       0       0       0
 19114 ;;      Temps:         18       0       0       0       0       0       0
 19115 ;;      Totals:        18       0       0       0       0       0       0
 19116 ;;Total ram usage:       18 bytes
 19117 ;; Hardware stack levels used:    1
 19118 ;; Hardware stack levels required when called:    3
 19119 ;; This function calls:
 19120 ;;		_EUSART1_Receive_ISR
 19121 ;;		_EUSART1_Transmit_ISR
 19122 ;;		_MEMORY_ISR
 19123 ;;		_PIN_MANAGER_IOC
 19124 ;;		_TMR0_ISR
 19125 ;; This function is called by:
 19126 ;;		Interrupt level 2
 19127 ;; This function uses a non-reentrant model
 19128 ;;
 19129                           
 19130                           	psect	intcode
 19131  000008                     __pintcode:
 19132                           	opt stack 0
 19133  000008                     _INTERRUPT_InterruptManager:
 19134                           	opt stack 17
 19135                           
 19136                           ;incstack = 0
 19137  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19138  00000A  CFFA F006          	movff	pclath,??_INTERRUPT_InterruptManager
 19139  00000E  CFFB F007          	movff	pclatu,??_INTERRUPT_InterruptManager+1
 19140  000012  CFE9 F008          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
 19141  000016  CFEA F009          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
 19142  00001A  CFE1 F00A          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
 19143  00001E  CFE2 F00B          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
 19144  000022  CFD9 F00C          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
 19145  000026  CFDA F00D          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
 19146  00002A  CFF3 F00E          	movff	prodl,??_INTERRUPT_InterruptManager+8
 19147  00002E  CFF4 F00F          	movff	prodh,??_INTERRUPT_InterruptManager+9
 19148  000032  CFF6 F010          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
 19149  000036  CFF7 F011          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
 19150  00003A  CFF8 F012          	movff	tblptru,??_INTERRUPT_InterruptManager+12
 19151  00003E  CFF5 F013          	movff	tablat,??_INTERRUPT_InterruptManager+13
 19152  000042  C048  F014         	movff	btemp,??_INTERRUPT_InterruptManager+14
 19153  000046  C049  F015         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
 19154  00004A  C04A  F016         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
 19155  00004E  C04B  F017         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
 19156                           
 19157                           ;interrupt_manager.c: 60: if(INTCONbits.RBIE == 1 && INTCONbits.RBIF == 1)
 19158  000052  B6F2               	btfsc	intcon,3,c	;volatile
 19159  000054  A0F2               	btfss	intcon,0,c	;volatile
 19160  000056  D003               	goto	i2l843
 19161                           
 19162                           ;interrupt_manager.c: 61: {
 19163                           ;interrupt_manager.c: 62: PIN_MANAGER_IOC();
 19164  000058  EC81  F021         	call	_PIN_MANAGER_IOC	;wreg free
 19165                           
 19166                           ;interrupt_manager.c: 63: }
 19167  00005C  D019               	goto	i2l852
 19168  00005E                     i2l843:
 19169                           
 19170                           ;interrupt_manager.c: 64: else if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 19171  00005E  BAF2               	btfsc	intcon,5,c	;volatile
 19172  000060  A4F2               	btfss	intcon,2,c	;volatile
 19173  000062  D003               	goto	i2l845
 19174                           
 19175                           ;interrupt_manager.c: 65: {
 19176                           ;interrupt_manager.c: 66: TMR0_ISR();
 19177  000064  EC89  F017         	call	_TMR0_ISR	;wreg free
 19178                           
 19179                           ;interrupt_manager.c: 67: }
 19180  000068  D013               	goto	i2l852
 19181  00006A                     i2l845:
 19182                           
 19183                           ;interrupt_manager.c: 68: else if(INTCONbits.PEIE == 1)
 19184  00006A  ACF2               	btfss	intcon,6,c	;volatile
 19185  00006C  D011               	goto	i2l852
 19186                           
 19187                           ;interrupt_manager.c: 69: {
 19188                           ;interrupt_manager.c: 70: if(PIE2bits.EEIE == 1 && PIR2bits.EEIF == 1)
 19189  00006E  B8A0               	btfsc	4000,4,c	;volatile
 19190  000070  A8A1               	btfss	4001,4,c	;volatile
 19191  000072  D003               	goto	i2l848
 19192                           
 19193                           ;interrupt_manager.c: 71: {
 19194                           ;interrupt_manager.c: 72: MEMORY_ISR();
 19195  000074  ECD5  F021         	call	_MEMORY_ISR	;wreg free
 19196                           
 19197                           ;interrupt_manager.c: 73: }
 19198  000078  D00B               	goto	i2l852
 19199  00007A                     i2l848:
 19200                           
 19201                           ;interrupt_manager.c: 74: else if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
 19202  00007A  B89D               	btfsc	3997,4,c	;volatile
 19203  00007C  A89E               	btfss	3998,4,c	;volatile
 19204  00007E  D003               	goto	i2l850
 19205                           
 19206                           ;interrupt_manager.c: 75: {
 19207                           ;interrupt_manager.c: 76: EUSART1_Transmit_ISR();
 19208  000080  ECF4  F01E         	call	_EUSART1_Transmit_ISR	;wreg free
 19209                           
 19210                           ;interrupt_manager.c: 77: }
 19211  000084  D005               	goto	i2l852
 19212  000086                     i2l850:
 19213                           
 19214                           ;interrupt_manager.c: 78: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
 19215  000086  BA9D               	btfsc	3997,5,c	;volatile
 19216  000088  AA9E               	btfss	3998,5,c	;volatile
 19217  00008A  D002               	goto	i2l852
 19218                           
 19219                           ;interrupt_manager.c: 79: {
 19220                           ;interrupt_manager.c: 80: EUSART1_Receive_ISR();
 19221  00008C  ECF7  F01F         	call	_EUSART1_Receive_ISR	;wreg free
 19222  000090                     i2l852:
 19223                           
 19224                           ;interrupt_manager.c: 87: else
 19225                           ;interrupt_manager.c: 88: {
 19226                           
 19227                           ;interrupt_manager.c: 85: }
 19228                           ;interrupt_manager.c: 86: }
 19229                           
 19230                           ;interrupt_manager.c: 82: else
 19231                           ;interrupt_manager.c: 83: {
 19232  000090  C017  F04B         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
 19233  000094  C016  F04A         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
 19234  000098  C015  F049         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
 19235  00009C  C014  F048         	movff	??_INTERRUPT_InterruptManager+14,btemp
 19236  0000A0  C013  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
 19237  0000A4  C012  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
 19238  0000A8  C011  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
 19239  0000AC  C010  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
 19240  0000B0  C00F  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
 19241  0000B4  C00E  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
 19242  0000B8  C00D  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
 19243  0000BC  C00C  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
 19244  0000C0  C00B  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
 19245  0000C4  C00A  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
 19246  0000C8  C009  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
 19247  0000CC  C008  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
 19248  0000D0  C007  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
 19249  0000D4  C006  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
 19250  0000D8  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19251  0000DA  0011               	retfie		f
 19252  0000DC                     __end_of_INTERRUPT_InterruptManager:
 19253                           	opt stack 0
 19254                           tosu	equ	0xFFF
 19255                           tosh	equ	0xFFE
 19256                           tosl	equ	0xFFD
 19257                           pclatu	equ	0xFFB
 19258                           pclath	equ	0xFFA
 19259                           tblptru	equ	0xFF8
 19260                           tblptrh	equ	0xFF7
 19261                           tblptrl	equ	0xFF6
 19262                           tablat	equ	0xFF5
 19263                           prodh	equ	0xFF4
 19264                           prodl	equ	0xFF3
 19265                           intcon	equ	0xFF2
 19266                           intcon2	equ	0xFF1
 19267                           postinc0	equ	0xFEE
 19268                           plusw0	equ	0xFEB
 19269                           fsr0h	equ	0xFEA
 19270                           fsr0l	equ	0xFE9
 19271                           wreg	equ	0xFE8
 19272                           indf1	equ	0xFE7
 19273                           postdec1	equ	0xFE5
 19274                           fsr1h	equ	0xFE2
 19275                           fsr1l	equ	0xFE1
 19276                           indf2	equ	0xFDF
 19277                           postinc2	equ	0xFDE
 19278                           postdec2	equ	0xFDD
 19279                           plusw2	equ	0xFDB
 19280                           fsr2h	equ	0xFDA
 19281                           fsr2l	equ	0xFD9
 19282                           status	equ	0xFD8
 19283                           
 19284 ;; *************** function _TMR0_ISR *****************
 19285 ;; Defined at:
 19286 ;;		line 132 in file "mcc_generated_files/tmr0.c"
 19287 ;; Parameters:    Size  Location     Type
 19288 ;;		None
 19289 ;; Auto vars:     Size  Location     Type
 19290 ;;		None
 19291 ;; Return value:  Size  Location     Type
 19292 ;;                  1    wreg      void 
 19293 ;; Registers used:
 19294 ;;		wreg, status,2, status,0, cstack
 19295 ;; Tracked objects:
 19296 ;;		On entry : 0/0
 19297 ;;		On exit  : 0/0
 19298 ;;		Unchanged: 0/0
 19299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19300 ;;      Params:         0       0       0       0       0       0       0
 19301 ;;      Locals:         0       0       0       0       0       0       0
 19302 ;;      Temps:          0       0       0       0       0       0       0
 19303 ;;      Totals:         0       0       0       0       0       0       0
 19304 ;;Total ram usage:        0 bytes
 19305 ;; Hardware stack levels used:    1
 19306 ;; Hardware stack levels required when called:    1
 19307 ;; This function calls:
 19308 ;;		___lwmod
 19309 ;; This function is called by:
 19310 ;;		_INTERRUPT_InterruptManager
 19311 ;; This function uses a non-reentrant model
 19312 ;;
 19313                           
 19314                           	psect	text112
 19315  002F12                     __ptext112:
 19316                           	opt stack 0
 19317  002F12                     _TMR0_ISR:
 19318                           	opt stack 18
 19319                           
 19320                           ;tmr0.c: 134: static volatile uint16_t CountCallBack = 0;
 19321                           ;tmr0.c: 137: INTCONbits.TMR0IF = 0;
 19322                           
 19323                           ;incstack = 0
 19324  002F12  94F2               	bcf	intcon,2,c	;volatile
 19325                           
 19326                           ;tmr0.c: 141: TMR0H = timer0ReloadVal >> 8;
 19327  002F14  5047               	movf	_timer0ReloadVal+1,w,c	;volatile
 19328  002F16  6ED7               	movwf	4055,c	;volatile
 19329                           
 19330                           ;tmr0.c: 142: TMR0L = (uint8_t) timer0ReloadVal;
 19331  002F18  C046  FFD6         	movff	_timer0ReloadVal,4054	;volatile
 19332                           
 19333                           ;tmr0.c: 144: CountCallBack++;
 19334  002F1C  4A31               	infsnz	TMR0_ISR@CountCallBack,f,c	;volatile
 19335  002F1E  2A32               	incf	TMR0_ISR@CountCallBack+1,f,c	;volatile
 19336                           
 19337                           ;tmr0.c: 145: if ((CountCallBack % 250) == 0)
 19338  002F20  C031  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19339  002F24  C032  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19340  002F28  0E00               	movlw	0
 19341  002F2A  6E04               	movwf	___lwmod@divisor+1,c
 19342  002F2C  0EFA               	movlw	250
 19343  002F2E  6E03               	movwf	___lwmod@divisor,c
 19344  002F30  EC06  F01E         	call	___lwmod	;wreg free
 19345  002F34  5001               	movf	?___lwmod,w,c
 19346  002F36  1002               	iorwf	?___lwmod+1,w,c
 19347  002F38  A4D8               	btfss	status,2,c
 19348  002F3A  D003               	goto	i2l1116
 19349                           
 19350                           ;tmr0.c: 146: {
 19351                           ;tmr0.c: 147: Timer0_SynthLd = 1;
 19352  002F3C  0E01               	movlw	1
 19353  002F3E  0100               	movlb	0	; () banked
 19354  002F40  6FFE               	movwf	_Timer0_SynthLd& (0+255),b	;volatile
 19355  002F42                     i2l1116:
 19356                           
 19357                           ;tmr0.c: 148: }
 19358                           ;tmr0.c: 149: if ((CountCallBack % 1300) == 0)
 19359                           
 19360                           ; BSR set to: 0
 19361  002F42  C031  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19362  002F46  C032  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19363  002F4A  0E05               	movlw	5
 19364  002F4C  6E04               	movwf	___lwmod@divisor+1,c
 19365  002F4E  0E14               	movlw	20
 19366  002F50  6E03               	movwf	___lwmod@divisor,c
 19367  002F52  EC06  F01E         	call	___lwmod	;wreg free
 19368  002F56  5001               	movf	?___lwmod,w,c
 19369  002F58  1002               	iorwf	?___lwmod+1,w,c
 19370  002F5A  A4D8               	btfss	status,2,c
 19371  002F5C  D003               	goto	i2l1117
 19372                           
 19373                           ;tmr0.c: 150: {
 19374                           ;tmr0.c: 151: Timer0_Sampling = 1;
 19375  002F5E  0E01               	movlw	1
 19376  002F60  0100               	movlb	0	; () banked
 19377  002F62  6FFD               	movwf	_Timer0_Sampling& (0+255),b	;volatile
 19378  002F64                     i2l1117:
 19379                           
 19380                           ;tmr0.c: 152: }
 19381                           ;tmr0.c: 153: if ((CountCallBack % 350) == 0)
 19382                           
 19383                           ; BSR set to: 0
 19384  002F64  C031  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19385  002F68  C032  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19386  002F6C  0E01               	movlw	1
 19387  002F6E  6E04               	movwf	___lwmod@divisor+1,c
 19388  002F70  0E5E               	movlw	94
 19389  002F72  6E03               	movwf	___lwmod@divisor,c
 19390  002F74  EC06  F01E         	call	___lwmod	;wreg free
 19391  002F78  5001               	movf	?___lwmod,w,c
 19392  002F7A  1002               	iorwf	?___lwmod+1,w,c
 19393  002F7C  A4D8               	btfss	status,2,c
 19394  002F7E  D003               	goto	i2l1118
 19395                           
 19396                           ;tmr0.c: 154: {
 19397                           ;tmr0.c: 155: Timer0_KeepAlive = 1;
 19398  002F80  0E01               	movlw	1
 19399  002F82  0100               	movlb	0	; () banked
 19400  002F84  6FFC               	movwf	_Timer0_KeepAlive& (0+255),b	;volatile
 19401  002F86                     i2l1118:
 19402                           
 19403                           ;tmr0.c: 156: }
 19404                           ;tmr0.c: 157: if ((CountCallBack % 10) == 0)
 19405                           
 19406                           ; BSR set to: 0
 19407  002F86  C031  F001         	movff	TMR0_ISR@CountCallBack,___lwmod@dividend	;volatile
 19408  002F8A  C032  F002         	movff	TMR0_ISR@CountCallBack+1,___lwmod@dividend+1	;volatile
 19409  002F8E  0E00               	movlw	0
 19410  002F90  6E04               	movwf	___lwmod@divisor+1,c
 19411  002F92  0E0A               	movlw	10
 19412  002F94  6E03               	movwf	___lwmod@divisor,c
 19413  002F96  EC06  F01E         	call	___lwmod	;wreg free
 19414  002F9A  5001               	movf	?___lwmod,w,c
 19415  002F9C  1002               	iorwf	?___lwmod+1,w,c
 19416  002F9E  A4D8               	btfss	status,2,c
 19417  002FA0  D003               	goto	i2l1119
 19418                           
 19419                           ;tmr0.c: 158: {
 19420                           ;tmr0.c: 159: Timer0_OneSec = 1;
 19421  002FA2  0E01               	movlw	1
 19422  002FA4  0100               	movlb	0	; () banked
 19423  002FA6  6FFB               	movwf	_Timer0_OneSec& (0+255),b	;volatile
 19424  002FA8                     i2l1119:
 19425                           
 19426                           ;tmr0.c: 160: }
 19427                           ;tmr0.c: 161: if(CountCallBack >= 35000)
 19428                           
 19429                           ; BSR set to: 0
 19430  002FA8  0EB8               	movlw	184
 19431  002FAA  5C31               	subwf	TMR0_ISR@CountCallBack,w,c	;volatile
 19432  002FAC  0E88               	movlw	136
 19433  002FAE  5832               	subwfb	TMR0_ISR@CountCallBack+1,w,c	;volatile
 19434  002FB0  A0D8               	btfss	status,0,c
 19435  002FB2  0012               	return	
 19436                           
 19437                           ;tmr0.c: 163: {
 19438                           ;tmr0.c: 165: CountCallBack = 0;
 19439  002FB4  0E00               	movlw	0
 19440  002FB6  6E32               	movwf	TMR0_ISR@CountCallBack+1,c	;volatile
 19441  002FB8  0E00               	movlw	0
 19442  002FBA  6E31               	movwf	TMR0_ISR@CountCallBack,c	;volatile
 19443  002FBC  0012               	return	
 19444  002FBE                     __end_of_TMR0_ISR:
 19445                           	opt stack 0
 19446                           tosu	equ	0xFFF
 19447                           tosh	equ	0xFFE
 19448                           tosl	equ	0xFFD
 19449                           pclatu	equ	0xFFB
 19450                           pclath	equ	0xFFA
 19451                           tblptru	equ	0xFF8
 19452                           tblptrh	equ	0xFF7
 19453                           tblptrl	equ	0xFF6
 19454                           tablat	equ	0xFF5
 19455                           prodh	equ	0xFF4
 19456                           prodl	equ	0xFF3
 19457                           intcon	equ	0xFF2
 19458                           intcon2	equ	0xFF1
 19459                           postinc0	equ	0xFEE
 19460                           plusw0	equ	0xFEB
 19461                           fsr0h	equ	0xFEA
 19462                           fsr0l	equ	0xFE9
 19463                           wreg	equ	0xFE8
 19464                           indf1	equ	0xFE7
 19465                           postdec1	equ	0xFE5
 19466                           fsr1h	equ	0xFE2
 19467                           fsr1l	equ	0xFE1
 19468                           indf2	equ	0xFDF
 19469                           postinc2	equ	0xFDE
 19470                           postdec2	equ	0xFDD
 19471                           plusw2	equ	0xFDB
 19472                           fsr2h	equ	0xFDA
 19473                           fsr2l	equ	0xFD9
 19474                           status	equ	0xFD8
 19475                           
 19476 ;; *************** function ___lwmod *****************
 19477 ;; Defined at:
 19478 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 19479 ;; Parameters:    Size  Location     Type
 19480 ;;  dividend        2    0[COMRAM] unsigned int 
 19481 ;;  divisor         2    2[COMRAM] unsigned int 
 19482 ;; Auto vars:     Size  Location     Type
 19483 ;;  counter         1    4[COMRAM] unsigned char 
 19484 ;; Return value:  Size  Location     Type
 19485 ;;                  2    0[COMRAM] unsigned int 
 19486 ;; Registers used:
 19487 ;;		wreg, status,2, status,0
 19488 ;; Tracked objects:
 19489 ;;		On entry : 0/0
 19490 ;;		On exit  : 0/0
 19491 ;;		Unchanged: 0/0
 19492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19493 ;;      Params:         4       0       0       0       0       0       0
 19494 ;;      Locals:         1       0       0       0       0       0       0
 19495 ;;      Temps:          0       0       0       0       0       0       0
 19496 ;;      Totals:         5       0       0       0       0       0       0
 19497 ;;Total ram usage:        5 bytes
 19498 ;; Hardware stack levels used:    1
 19499 ;; This function calls:
 19500 ;;		Nothing
 19501 ;; This function is called by:
 19502 ;;		_TMR0_ISR
 19503 ;; This function uses a non-reentrant model
 19504 ;;
 19505                           
 19506                           	psect	text113
 19507  003C0C                     __ptext113:
 19508                           	opt stack 0
 19509  003C0C                     ___lwmod:
 19510                           	opt stack 18
 19511                           
 19512                           ;incstack = 0
 19513  003C0C  5003               	movf	___lwmod@divisor,w,c
 19514  003C0E  1004               	iorwf	___lwmod@divisor+1,w,c
 19515  003C10  B4D8               	btfsc	status,2,c
 19516  003C12  D018               	goto	i2l2015
 19517  003C14  0E01               	movlw	1
 19518  003C16  6E05               	movwf	___lwmod@counter,c
 19519  003C18  D004               	goto	i2l2010
 19520  003C1A  90D8               	bcf	status,0,c
 19521  003C1C  3603               	rlcf	___lwmod@divisor,f,c
 19522  003C1E  3604               	rlcf	___lwmod@divisor+1,f,c
 19523  003C20  2A05               	incf	___lwmod@counter,f,c
 19524  003C22                     i2l2010:
 19525  003C22  AE04               	btfss	___lwmod@divisor+1,7,c
 19526  003C24  D7FA               	goto	i2l2011
 19527  003C26                     i2u576_40:
 19528  003C26  5003               	movf	___lwmod@divisor,w,c
 19529  003C28  5C01               	subwf	___lwmod@dividend,w,c
 19530  003C2A  5004               	movf	___lwmod@divisor+1,w,c
 19531  003C2C  5802               	subwfb	___lwmod@dividend+1,w,c
 19532  003C2E  A0D8               	btfss	status,0,c
 19533  003C30  D004               	goto	i2l2014
 19534  003C32  5003               	movf	___lwmod@divisor,w,c
 19535  003C34  5E01               	subwf	___lwmod@dividend,f,c
 19536  003C36  5004               	movf	___lwmod@divisor+1,w,c
 19537  003C38  5A02               	subwfb	___lwmod@dividend+1,f,c
 19538  003C3A                     i2l2014:
 19539  003C3A  90D8               	bcf	status,0,c
 19540  003C3C  3204               	rrcf	___lwmod@divisor+1,f,c
 19541  003C3E  3203               	rrcf	___lwmod@divisor,f,c
 19542  003C40  2E05               	decfsz	___lwmod@counter,f,c
 19543  003C42  D7F1               	goto	i2u576_40
 19544  003C44                     i2l2015:
 19545  003C44  C001  F001         	movff	___lwmod@dividend,?___lwmod
 19546  003C48  C002  F002         	movff	___lwmod@dividend+1,?___lwmod+1
 19547  003C4C  0012               	return		;funcret
 19548  003C4E                     __end_of___lwmod:
 19549                           	opt stack 0
 19550                           tosu	equ	0xFFF
 19551                           tosh	equ	0xFFE
 19552                           tosl	equ	0xFFD
 19553                           pclatu	equ	0xFFB
 19554                           pclath	equ	0xFFA
 19555                           tblptru	equ	0xFF8
 19556                           tblptrh	equ	0xFF7
 19557                           tblptrl	equ	0xFF6
 19558                           tablat	equ	0xFF5
 19559                           prodh	equ	0xFF4
 19560                           prodl	equ	0xFF3
 19561                           intcon	equ	0xFF2
 19562                           intcon2	equ	0xFF1
 19563                           postinc0	equ	0xFEE
 19564                           plusw0	equ	0xFEB
 19565                           fsr0h	equ	0xFEA
 19566                           fsr0l	equ	0xFE9
 19567                           wreg	equ	0xFE8
 19568                           indf1	equ	0xFE7
 19569                           postdec1	equ	0xFE5
 19570                           fsr1h	equ	0xFE2
 19571                           fsr1l	equ	0xFE1
 19572                           indf2	equ	0xFDF
 19573                           postinc2	equ	0xFDE
 19574                           postdec2	equ	0xFDD
 19575                           plusw2	equ	0xFDB
 19576                           fsr2h	equ	0xFDA
 19577                           fsr2l	equ	0xFD9
 19578                           status	equ	0xFD8
 19579                           
 19580 ;; *************** function _PIN_MANAGER_IOC *****************
 19581 ;; Defined at:
 19582 ;;		line 108 in file "mcc_generated_files/pin_manager.c"
 19583 ;; Parameters:    Size  Location     Type
 19584 ;;		None
 19585 ;; Auto vars:     Size  Location     Type
 19586 ;;		None
 19587 ;; Return value:  Size  Location     Type
 19588 ;;                  1    wreg      void 
 19589 ;; Registers used:
 19590 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19591 ;; Tracked objects:
 19592 ;;		On entry : 0/0
 19593 ;;		On exit  : 0/0
 19594 ;;		Unchanged: 0/0
 19595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19596 ;;      Params:         0       0       0       0       0       0       0
 19597 ;;      Locals:         0       0       0       0       0       0       0
 19598 ;;      Temps:          0       0       0       0       0       0       0
 19599 ;;      Totals:         0       0       0       0       0       0       0
 19600 ;;Total ram usage:        0 bytes
 19601 ;; Hardware stack levels used:    1
 19602 ;; Hardware stack levels required when called:    2
 19603 ;; This function calls:
 19604 ;;		_IOCB4_ISR
 19605 ;;		_IOCB5_ISR
 19606 ;; This function is called by:
 19607 ;;		_INTERRUPT_InterruptManager
 19608 ;; This function uses a non-reentrant model
 19609 ;;
 19610                           
 19611                           	psect	text114
 19612  004302                     __ptext114:
 19613                           	opt stack 0
 19614  004302                     _PIN_MANAGER_IOC:
 19615                           	opt stack 17
 19616                           
 19617                           ;pin_manager.c: 111: if(IOCBbits.IOCB4 == 1)
 19618                           
 19619                           ;incstack = 0
 19620  004302  B862               	btfsc	3938,4,c	;volatile
 19621                           
 19622                           ;pin_manager.c: 112: {
 19623                           ;pin_manager.c: 113: IOCB4_ISR();
 19624  004304  ECB9  F020         	call	_IOCB4_ISR	;wreg free
 19625                           
 19626                           ;pin_manager.c: 114: }
 19627                           ;pin_manager.c: 116: if(IOCBbits.IOCB5 == 1)
 19628  004308  BA62               	btfsc	3938,5,c	;volatile
 19629                           
 19630                           ;pin_manager.c: 117: {
 19631                           ;pin_manager.c: 118: IOCB5_ISR();
 19632  00430A  ECA8  F020         	call	_IOCB5_ISR	;wreg free
 19633                           
 19634                           ;pin_manager.c: 119: }
 19635                           ;pin_manager.c: 122: INTCONbits.RBIF = 0;
 19636  00430E  90F2               	bcf	intcon,0,c	;volatile
 19637  004310  0012               	return		;funcret
 19638  004312                     __end_of_PIN_MANAGER_IOC:
 19639                           	opt stack 0
 19640                           tosu	equ	0xFFF
 19641                           tosh	equ	0xFFE
 19642                           tosl	equ	0xFFD
 19643                           pclatu	equ	0xFFB
 19644                           pclath	equ	0xFFA
 19645                           tblptru	equ	0xFF8
 19646                           tblptrh	equ	0xFF7
 19647                           tblptrl	equ	0xFF6
 19648                           tablat	equ	0xFF5
 19649                           prodh	equ	0xFF4
 19650                           prodl	equ	0xFF3
 19651                           intcon	equ	0xFF2
 19652                           intcon2	equ	0xFF1
 19653                           postinc0	equ	0xFEE
 19654                           plusw0	equ	0xFEB
 19655                           fsr0h	equ	0xFEA
 19656                           fsr0l	equ	0xFE9
 19657                           wreg	equ	0xFE8
 19658                           indf1	equ	0xFE7
 19659                           postdec1	equ	0xFE5
 19660                           fsr1h	equ	0xFE2
 19661                           fsr1l	equ	0xFE1
 19662                           indf2	equ	0xFDF
 19663                           postinc2	equ	0xFDE
 19664                           postdec2	equ	0xFDD
 19665                           plusw2	equ	0xFDB
 19666                           fsr2h	equ	0xFDA
 19667                           fsr2l	equ	0xFD9
 19668                           status	equ	0xFD8
 19669                           
 19670 ;; *************** function _IOCB5_ISR *****************
 19671 ;; Defined at:
 19672 ;;		line 158 in file "mcc_generated_files/pin_manager.c"
 19673 ;; Parameters:    Size  Location     Type
 19674 ;;		None
 19675 ;; Auto vars:     Size  Location     Type
 19676 ;;		None
 19677 ;; Return value:  Size  Location     Type
 19678 ;;                  1    wreg      void 
 19679 ;; Registers used:
 19680 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19681 ;; Tracked objects:
 19682 ;;		On entry : 0/0
 19683 ;;		On exit  : 0/0
 19684 ;;		Unchanged: 0/0
 19685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19686 ;;      Params:         0       0       0       0       0       0       0
 19687 ;;      Locals:         0       0       0       0       0       0       0
 19688 ;;      Temps:          0       0       0       0       0       0       0
 19689 ;;      Totals:         0       0       0       0       0       0       0
 19690 ;;Total ram usage:        0 bytes
 19691 ;; Hardware stack levels used:    1
 19692 ;; Hardware stack levels required when called:    1
 19693 ;; This function calls:
 19694 ;;		Absolute function
 19695 ;;		_IOCB5_DefaultInterruptHandler
 19696 ;; This function is called by:
 19697 ;;		_PIN_MANAGER_IOC
 19698 ;; This function uses a non-reentrant model
 19699 ;;
 19700                           
 19701                           	psect	text115
 19702  004150                     __ptext115:
 19703                           	opt stack 0
 19704  004150                     _IOCB5_ISR:
 19705                           	opt stack 17
 19706                           
 19707                           ;pin_manager.c: 163: if(IOCB5_InterruptHandler)
 19708                           
 19709                           ;incstack = 0
 19710  004150  0101               	movlb	1	; () banked
 19711  004152  51F7               	movf	_IOCB5_InterruptHandler& (0+255),w,b
 19712  004154  11F8               	iorwf	(_IOCB5_InterruptHandler+1)& (0+255),w,b
 19713  004156  B4D8               	btfsc	status,2,c
 19714  004158  0012               	return	
 19715                           
 19716                           ; BSR set to: 1
 19717                           ;pin_manager.c: 164: {
 19718                           ;pin_manager.c: 165: IOCB5_InterruptHandler();
 19719  00415A  D801               	call	i2u568_48
 19720  00415C  0012               	return	
 19721  00415E                     i2u568_48:
 19722  00415E  0005               	push	
 19723  004160  6EFA               	movwf	pclath,c
 19724  004162  51F7               	movf	_IOCB5_InterruptHandler& (0+255),w,b
 19725  004164  6EFD               	movwf	tosl,c
 19726  004166  51F8               	movf	(_IOCB5_InterruptHandler+1)& (0+255),w,b
 19727  004168  6EFE               	movwf	tosh,c
 19728  00416A  50F8               	movf	tblptru,w,c
 19729  00416C  6EFF               	movwf	tosu,c
 19730  00416E  50FA               	movf	pclath,w,c
 19731  004170  0012               	return		;indir
 19732  004172                     __end_of_IOCB5_ISR:
 19733                           	opt stack 0
 19734                           tosu	equ	0xFFF
 19735                           tosh	equ	0xFFE
 19736                           tosl	equ	0xFFD
 19737                           pclatu	equ	0xFFB
 19738                           pclath	equ	0xFFA
 19739                           tblptru	equ	0xFF8
 19740                           tblptrh	equ	0xFF7
 19741                           tblptrl	equ	0xFF6
 19742                           tablat	equ	0xFF5
 19743                           prodh	equ	0xFF4
 19744                           prodl	equ	0xFF3
 19745                           intcon	equ	0xFF2
 19746                           intcon2	equ	0xFF1
 19747                           postinc0	equ	0xFEE
 19748                           plusw0	equ	0xFEB
 19749                           fsr0h	equ	0xFEA
 19750                           fsr0l	equ	0xFE9
 19751                           wreg	equ	0xFE8
 19752                           indf1	equ	0xFE7
 19753                           postdec1	equ	0xFE5
 19754                           fsr1h	equ	0xFE2
 19755                           fsr1l	equ	0xFE1
 19756                           indf2	equ	0xFDF
 19757                           postinc2	equ	0xFDE
 19758                           postdec2	equ	0xFDD
 19759                           plusw2	equ	0xFDB
 19760                           fsr2h	equ	0xFDA
 19761                           fsr2l	equ	0xFD9
 19762                           status	equ	0xFD8
 19763                           
 19764 ;; *************** function _IOCB5_DefaultInterruptHandler *****************
 19765 ;; Defined at:
 19766 ;;		line 179 in file "mcc_generated_files/pin_manager.c"
 19767 ;; Parameters:    Size  Location     Type
 19768 ;;		None
 19769 ;; Auto vars:     Size  Location     Type
 19770 ;;		None
 19771 ;; Return value:  Size  Location     Type
 19772 ;;                  1    wreg      void 
 19773 ;; Registers used:
 19774 ;;		None
 19775 ;; Tracked objects:
 19776 ;;		On entry : 0/0
 19777 ;;		On exit  : 0/0
 19778 ;;		Unchanged: 0/0
 19779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19780 ;;      Params:         0       0       0       0       0       0       0
 19781 ;;      Locals:         0       0       0       0       0       0       0
 19782 ;;      Temps:          0       0       0       0       0       0       0
 19783 ;;      Totals:         0       0       0       0       0       0       0
 19784 ;;Total ram usage:        0 bytes
 19785 ;; Hardware stack levels used:    1
 19786 ;; This function calls:
 19787 ;;		Nothing
 19788 ;; This function is called by:
 19789 ;;		_PIN_MANAGER_Initialize
 19790 ;;		_IOCB5_ISR
 19791 ;; This function uses a non-reentrant model
 19792 ;;
 19793                           
 19794                           	psect	text116
 19795  0043AE                     __ptext116:
 19796                           	opt stack 0
 19797  0043AE                     _IOCB5_DefaultInterruptHandler:
 19798                           	opt stack 17
 19799                           
 19800                           ;incstack = 0
 19801  0043AE  0012               	return		;funcret
 19802  0043B0                     __end_of_IOCB5_DefaultInterruptHandler:
 19803                           	opt stack 0
 19804                           tosu	equ	0xFFF
 19805                           tosh	equ	0xFFE
 19806                           tosl	equ	0xFFD
 19807                           pclatu	equ	0xFFB
 19808                           pclath	equ	0xFFA
 19809                           tblptru	equ	0xFF8
 19810                           tblptrh	equ	0xFF7
 19811                           tblptrl	equ	0xFF6
 19812                           tablat	equ	0xFF5
 19813                           prodh	equ	0xFF4
 19814                           prodl	equ	0xFF3
 19815                           intcon	equ	0xFF2
 19816                           intcon2	equ	0xFF1
 19817                           postinc0	equ	0xFEE
 19818                           plusw0	equ	0xFEB
 19819                           fsr0h	equ	0xFEA
 19820                           fsr0l	equ	0xFE9
 19821                           wreg	equ	0xFE8
 19822                           indf1	equ	0xFE7
 19823                           postdec1	equ	0xFE5
 19824                           fsr1h	equ	0xFE2
 19825                           fsr1l	equ	0xFE1
 19826                           indf2	equ	0xFDF
 19827                           postinc2	equ	0xFDE
 19828                           postdec2	equ	0xFDD
 19829                           plusw2	equ	0xFDB
 19830                           fsr2h	equ	0xFDA
 19831                           fsr2l	equ	0xFD9
 19832                           status	equ	0xFD8
 19833                           
 19834 ;; *************** function _IOCB4_ISR *****************
 19835 ;; Defined at:
 19836 ;;		line 129 in file "mcc_generated_files/pin_manager.c"
 19837 ;; Parameters:    Size  Location     Type
 19838 ;;		None
 19839 ;; Auto vars:     Size  Location     Type
 19840 ;;		None
 19841 ;; Return value:  Size  Location     Type
 19842 ;;                  1    wreg      void 
 19843 ;; Registers used:
 19844 ;;		wreg, status,2, status,0, pclath, tosl, cstack
 19845 ;; Tracked objects:
 19846 ;;		On entry : 0/0
 19847 ;;		On exit  : 0/0
 19848 ;;		Unchanged: 0/0
 19849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19850 ;;      Params:         0       0       0       0       0       0       0
 19851 ;;      Locals:         0       0       0       0       0       0       0
 19852 ;;      Temps:          0       0       0       0       0       0       0
 19853 ;;      Totals:         0       0       0       0       0       0       0
 19854 ;;Total ram usage:        0 bytes
 19855 ;; Hardware stack levels used:    1
 19856 ;; Hardware stack levels required when called:    1
 19857 ;; This function calls:
 19858 ;;		Absolute function
 19859 ;;		_IOCB4_DefaultInterruptHandler
 19860 ;; This function is called by:
 19861 ;;		_PIN_MANAGER_IOC
 19862 ;; This function uses a non-reentrant model
 19863 ;;
 19864                           
 19865                           	psect	text117
 19866  004172                     __ptext117:
 19867                           	opt stack 0
 19868  004172                     _IOCB4_ISR:
 19869                           	opt stack 17
 19870                           
 19871                           ;pin_manager.c: 134: if(IOCB4_InterruptHandler)
 19872                           
 19873                           ;incstack = 0
 19874  004172  0101               	movlb	1	; () banked
 19875  004174  51F9               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 19876  004176  11FA               	iorwf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 19877  004178  B4D8               	btfsc	status,2,c
 19878  00417A  0012               	return	
 19879                           
 19880                           ; BSR set to: 1
 19881                           ;pin_manager.c: 135: {
 19882                           ;pin_manager.c: 136: IOCB4_InterruptHandler();
 19883  00417C  D801               	call	i2u566_48
 19884  00417E  0012               	return	
 19885  004180                     i2u566_48:
 19886  004180  0005               	push	
 19887  004182  6EFA               	movwf	pclath,c
 19888  004184  51F9               	movf	_IOCB4_InterruptHandler& (0+255),w,b
 19889  004186  6EFD               	movwf	tosl,c
 19890  004188  51FA               	movf	(_IOCB4_InterruptHandler+1)& (0+255),w,b
 19891  00418A  6EFE               	movwf	tosh,c
 19892  00418C  50F8               	movf	tblptru,w,c
 19893  00418E  6EFF               	movwf	tosu,c
 19894  004190  50FA               	movf	pclath,w,c
 19895  004192  0012               	return		;indir
 19896  004194                     __end_of_IOCB4_ISR:
 19897                           	opt stack 0
 19898                           tosu	equ	0xFFF
 19899                           tosh	equ	0xFFE
 19900                           tosl	equ	0xFFD
 19901                           pclatu	equ	0xFFB
 19902                           pclath	equ	0xFFA
 19903                           tblptru	equ	0xFF8
 19904                           tblptrh	equ	0xFF7
 19905                           tblptrl	equ	0xFF6
 19906                           tablat	equ	0xFF5
 19907                           prodh	equ	0xFF4
 19908                           prodl	equ	0xFF3
 19909                           intcon	equ	0xFF2
 19910                           intcon2	equ	0xFF1
 19911                           postinc0	equ	0xFEE
 19912                           plusw0	equ	0xFEB
 19913                           fsr0h	equ	0xFEA
 19914                           fsr0l	equ	0xFE9
 19915                           wreg	equ	0xFE8
 19916                           indf1	equ	0xFE7
 19917                           postdec1	equ	0xFE5
 19918                           fsr1h	equ	0xFE2
 19919                           fsr1l	equ	0xFE1
 19920                           indf2	equ	0xFDF
 19921                           postinc2	equ	0xFDE
 19922                           postdec2	equ	0xFDD
 19923                           plusw2	equ	0xFDB
 19924                           fsr2h	equ	0xFDA
 19925                           fsr2l	equ	0xFD9
 19926                           status	equ	0xFD8
 19927                           
 19928 ;; *************** function _IOCB4_DefaultInterruptHandler *****************
 19929 ;; Defined at:
 19930 ;;		line 150 in file "mcc_generated_files/pin_manager.c"
 19931 ;; Parameters:    Size  Location     Type
 19932 ;;		None
 19933 ;; Auto vars:     Size  Location     Type
 19934 ;;		None
 19935 ;; Return value:  Size  Location     Type
 19936 ;;                  1    wreg      void 
 19937 ;; Registers used:
 19938 ;;		None
 19939 ;; Tracked objects:
 19940 ;;		On entry : 0/0
 19941 ;;		On exit  : 0/0
 19942 ;;		Unchanged: 0/0
 19943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19944 ;;      Params:         0       0       0       0       0       0       0
 19945 ;;      Locals:         0       0       0       0       0       0       0
 19946 ;;      Temps:          0       0       0       0       0       0       0
 19947 ;;      Totals:         0       0       0       0       0       0       0
 19948 ;;Total ram usage:        0 bytes
 19949 ;; Hardware stack levels used:    1
 19950 ;; This function calls:
 19951 ;;		Nothing
 19952 ;; This function is called by:
 19953 ;;		_PIN_MANAGER_Initialize
 19954 ;;		_IOCB4_ISR
 19955 ;; This function uses a non-reentrant model
 19956 ;;
 19957                           
 19958                           	psect	text118
 19959  0043B0                     __ptext118:
 19960                           	opt stack 0
 19961  0043B0                     _IOCB4_DefaultInterruptHandler:
 19962                           	opt stack 17
 19963                           
 19964                           ;incstack = 0
 19965  0043B0  0012               	return		;funcret
 19966  0043B2                     __end_of_IOCB4_DefaultInterruptHandler:
 19967                           	opt stack 0
 19968                           tosu	equ	0xFFF
 19969                           tosh	equ	0xFFE
 19970                           tosl	equ	0xFFD
 19971                           pclatu	equ	0xFFB
 19972                           pclath	equ	0xFFA
 19973                           tblptru	equ	0xFF8
 19974                           tblptrh	equ	0xFF7
 19975                           tblptrl	equ	0xFF6
 19976                           tablat	equ	0xFF5
 19977                           prodh	equ	0xFF4
 19978                           prodl	equ	0xFF3
 19979                           intcon	equ	0xFF2
 19980                           intcon2	equ	0xFF1
 19981                           postinc0	equ	0xFEE
 19982                           plusw0	equ	0xFEB
 19983                           fsr0h	equ	0xFEA
 19984                           fsr0l	equ	0xFE9
 19985                           wreg	equ	0xFE8
 19986                           indf1	equ	0xFE7
 19987                           postdec1	equ	0xFE5
 19988                           fsr1h	equ	0xFE2
 19989                           fsr1l	equ	0xFE1
 19990                           indf2	equ	0xFDF
 19991                           postinc2	equ	0xFDE
 19992                           postdec2	equ	0xFDD
 19993                           plusw2	equ	0xFDB
 19994                           fsr2h	equ	0xFDA
 19995                           fsr2l	equ	0xFD9
 19996                           status	equ	0xFD8
 19997                           
 19998 ;; *************** function _MEMORY_ISR *****************
 19999 ;; Defined at:
 20000 ;;		line 206 in file "mcc_generated_files/memory.c"
 20001 ;; Parameters:    Size  Location     Type
 20002 ;;		None
 20003 ;; Auto vars:     Size  Location     Type
 20004 ;;		None
 20005 ;; Return value:  Size  Location     Type
 20006 ;;                  1    wreg      void 
 20007 ;; Registers used:
 20008 ;;		None
 20009 ;; Tracked objects:
 20010 ;;		On entry : 0/0
 20011 ;;		On exit  : 0/0
 20012 ;;		Unchanged: 0/0
 20013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20014 ;;      Params:         0       0       0       0       0       0       0
 20015 ;;      Locals:         0       0       0       0       0       0       0
 20016 ;;      Temps:          0       0       0       0       0       0       0
 20017 ;;      Totals:         0       0       0       0       0       0       0
 20018 ;;Total ram usage:        0 bytes
 20019 ;; Hardware stack levels used:    1
 20020 ;; This function calls:
 20021 ;;		Nothing
 20022 ;; This function is called by:
 20023 ;;		_INTERRUPT_InterruptManager
 20024 ;; This function uses a non-reentrant model
 20025 ;;
 20026                           
 20027                           	psect	text119
 20028  0043AA                     __ptext119:
 20029                           	opt stack 0
 20030  0043AA                     _MEMORY_ISR:
 20031                           	opt stack 19
 20032                           
 20033                           ;memory.c: 209: PIR2bits.EEIF = 0;
 20034                           
 20035                           ;incstack = 0
 20036  0043AA  98A1               	bcf	4001,4,c	;volatile
 20037  0043AC  0012               	return		;funcret
 20038  0043AE                     __end_of_MEMORY_ISR:
 20039                           	opt stack 0
 20040                           tosu	equ	0xFFF
 20041                           tosh	equ	0xFFE
 20042                           tosl	equ	0xFFD
 20043                           pclatu	equ	0xFFB
 20044                           pclath	equ	0xFFA
 20045                           tblptru	equ	0xFF8
 20046                           tblptrh	equ	0xFF7
 20047                           tblptrl	equ	0xFF6
 20048                           tablat	equ	0xFF5
 20049                           prodh	equ	0xFF4
 20050                           prodl	equ	0xFF3
 20051                           intcon	equ	0xFF2
 20052                           intcon2	equ	0xFF1
 20053                           postinc0	equ	0xFEE
 20054                           plusw0	equ	0xFEB
 20055                           fsr0h	equ	0xFEA
 20056                           fsr0l	equ	0xFE9
 20057                           wreg	equ	0xFE8
 20058                           indf1	equ	0xFE7
 20059                           postdec1	equ	0xFE5
 20060                           fsr1h	equ	0xFE2
 20061                           fsr1l	equ	0xFE1
 20062                           indf2	equ	0xFDF
 20063                           postinc2	equ	0xFDE
 20064                           postdec2	equ	0xFDD
 20065                           plusw2	equ	0xFDB
 20066                           fsr2h	equ	0xFDA
 20067                           fsr2l	equ	0xFD9
 20068                           status	equ	0xFD8
 20069                           
 20070 ;; *************** function _EUSART1_Transmit_ISR *****************
 20071 ;; Defined at:
 20072 ;;		line 181 in file "mcc_generated_files/eusart1.c"
 20073 ;; Parameters:    Size  Location     Type
 20074 ;;		None
 20075 ;; Auto vars:     Size  Location     Type
 20076 ;;		None
 20077 ;; Return value:  Size  Location     Type
 20078 ;;                  1    wreg      void 
 20079 ;; Registers used:
 20080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20081 ;; Tracked objects:
 20082 ;;		On entry : 0/0
 20083 ;;		On exit  : 0/0
 20084 ;;		Unchanged: 0/0
 20085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20086 ;;      Params:         0       0       0       0       0       0       0
 20087 ;;      Locals:         0       0       0       0       0       0       0
 20088 ;;      Temps:          0       0       0       0       0       0       0
 20089 ;;      Totals:         0       0       0       0       0       0       0
 20090 ;;Total ram usage:        0 bytes
 20091 ;; Hardware stack levels used:    1
 20092 ;; This function calls:
 20093 ;;		Nothing
 20094 ;; This function is called by:
 20095 ;;		_INTERRUPT_InterruptManager
 20096 ;; This function uses a non-reentrant model
 20097 ;;
 20098                           
 20099                           	psect	text120
 20100  003DE8                     __ptext120:
 20101                           	opt stack 0
 20102  003DE8                     _EUSART1_Transmit_ISR:
 20103                           	opt stack 19
 20104                           
 20105                           ;eusart1.c: 185: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
 20106                           
 20107                           ;incstack = 0
 20108  003DE8  0E46               	movlw	70
 20109  003DEA  0100               	movlb	0	; () banked
 20110  003DEC  61FF               	cpfslt	_eusart1TxBufferRemaining& (0+255),b	;volatile
 20111  003DEE  D012               	goto	i2l914
 20112                           
 20113                           ; BSR set to: 0
 20114                           ;eusart1.c: 186: {
 20115                           ;eusart1.c: 187: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
 20116  003DF0  5035               	movf	_eusart1TxTail,w,c	;volatile
 20117  003DF2  0D01               	mullw	1
 20118  003DF4  0E00               	movlw	low _eusart1TxBuffer
 20119  003DF6  24F3               	addwf	prodl,w,c
 20120  003DF8  6ED9               	movwf	fsr2l,c
 20121  003DFA  0E02               	movlw	high _eusart1TxBuffer
 20122  003DFC  20F4               	addwfc	prodh,w,c
 20123  003DFE  6EDA               	movwf	fsr2h,c
 20124  003E00  50DF               	movf	indf2,w,c
 20125  003E02  6EAD               	movwf	4013,c	;volatile
 20126                           
 20127                           ; BSR set to: 0
 20128  003E04  2A35               	incf	_eusart1TxTail,f,c	;volatile
 20129                           
 20130                           ; BSR set to: 0
 20131                           ;eusart1.c: 188: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
 20132  003E06  0E45               	movlw	69
 20133  003E08  6435               	cpfsgt	_eusart1TxTail,c	;volatile
 20134  003E0A  D002               	goto	i2l915
 20135                           
 20136                           ; BSR set to: 0
 20137                           ;eusart1.c: 189: {
 20138                           ;eusart1.c: 190: eusart1TxTail = 0;
 20139  003E0C  0E00               	movlw	0
 20140  003E0E  6E35               	movwf	_eusart1TxTail,c	;volatile
 20141  003E10                     i2l915:
 20142                           
 20143                           ; BSR set to: 0
 20144                           ;eusart1.c: 191: }
 20145                           ;eusart1.c: 192: eusart1TxBufferRemaining++;
 20146                           
 20147                           ; BSR set to: 0
 20148  003E10  2BFF               	incf	_eusart1TxBufferRemaining& (0+255),f,b	;volatile
 20149                           
 20150                           ;eusart1.c: 193: }
 20151  003E12  0012               	return	
 20152  003E14                     i2l914:
 20153                           
 20154                           ; BSR set to: 0
 20155                           ;eusart1.c: 194: else
 20156                           ;eusart1.c: 195: {
 20157                           ;eusart1.c: 196: PIE1bits.TX1IE = 0;
 20158  003E14  989D               	bcf	3997,4,c	;volatile
 20159                           
 20160                           ; BSR set to: 0
 20161                           ;eusart1.c: 197: eusart1TxTail = 0;
 20162  003E16  0E00               	movlw	0
 20163  003E18  6E35               	movwf	_eusart1TxTail,c	;volatile
 20164                           
 20165                           ;eusart1.c: 198: eusart1TxHead = 0;
 20166  003E1A  0E00               	movlw	0
 20167  003E1C  6E36               	movwf	_eusart1TxHead,c	;volatile
 20168  003E1E  0012               	return	
 20169  003E20                     __end_of_EUSART1_Transmit_ISR:
 20170                           	opt stack 0
 20171                           tosu	equ	0xFFF
 20172                           tosh	equ	0xFFE
 20173                           tosl	equ	0xFFD
 20174                           pclatu	equ	0xFFB
 20175                           pclath	equ	0xFFA
 20176                           tblptru	equ	0xFF8
 20177                           tblptrh	equ	0xFF7
 20178                           tblptrl	equ	0xFF6
 20179                           tablat	equ	0xFF5
 20180                           prodh	equ	0xFF4
 20181                           prodl	equ	0xFF3
 20182                           intcon	equ	0xFF2
 20183                           intcon2	equ	0xFF1
 20184                           postinc0	equ	0xFEE
 20185                           plusw0	equ	0xFEB
 20186                           fsr0h	equ	0xFEA
 20187                           fsr0l	equ	0xFE9
 20188                           wreg	equ	0xFE8
 20189                           indf1	equ	0xFE7
 20190                           postdec1	equ	0xFE5
 20191                           fsr1h	equ	0xFE2
 20192                           fsr1l	equ	0xFE1
 20193                           indf2	equ	0xFDF
 20194                           postinc2	equ	0xFDE
 20195                           postdec2	equ	0xFDD
 20196                           plusw2	equ	0xFDB
 20197                           fsr2h	equ	0xFDA
 20198                           fsr2l	equ	0xFD9
 20199                           status	equ	0xFD8
 20200                           
 20201 ;; *************** function _EUSART1_Receive_ISR *****************
 20202 ;; Defined at:
 20203 ;;		line 202 in file "mcc_generated_files/eusart1.c"
 20204 ;; Parameters:    Size  Location     Type
 20205 ;;		None
 20206 ;; Auto vars:     Size  Location     Type
 20207 ;;		None
 20208 ;; Return value:  Size  Location     Type
 20209 ;;                  1    wreg      void 
 20210 ;; Registers used:
 20211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20212 ;; Tracked objects:
 20213 ;;		On entry : 0/0
 20214 ;;		On exit  : 0/0
 20215 ;;		Unchanged: 0/0
 20216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20217 ;;      Params:         0       0       0       0       0       0       0
 20218 ;;      Locals:         0       0       0       0       0       0       0
 20219 ;;      Temps:          0       0       0       0       0       0       0
 20220 ;;      Totals:         0       0       0       0       0       0       0
 20221 ;;Total ram usage:        0 bytes
 20222 ;; Hardware stack levels used:    1
 20223 ;; This function calls:
 20224 ;;		Nothing
 20225 ;; This function is called by:
 20226 ;;		_INTERRUPT_InterruptManager
 20227 ;; This function uses a non-reentrant model
 20228 ;;
 20229                           
 20230                           	psect	text121
 20231  003FEE                     __ptext121:
 20232                           	opt stack 0
 20233  003FEE                     _EUSART1_Receive_ISR:
 20234                           	opt stack 19
 20235                           
 20236                           ;eusart1.c: 205: if(1 == RCSTA1bits.OERR)
 20237                           
 20238                           ; BSR set to: 0
 20239                           ;incstack = 0
 20240  003FEE  A2AB               	btfss	4011,1,c	;volatile
 20241  003FF0  D002               	goto	i2l920
 20242                           
 20243                           ;eusart1.c: 206: {
 20244                           ;eusart1.c: 208: RCSTA1bits.CREN = 0;
 20245  003FF2  98AB               	bcf	4011,4,c	;volatile
 20246                           
 20247                           ;eusart1.c: 209: RCSTA1bits.CREN = 1;
 20248  003FF4  88AB               	bsf	4011,4,c	;volatile
 20249  003FF6                     i2l920:
 20250                           
 20251                           ;eusart1.c: 210: }
 20252                           ;eusart1.c: 215: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
 20253  003FF6  5034               	movf	_eusart1RxHead,w,c	;volatile
 20254  003FF8  0D01               	mullw	1
 20255  003FFA  0E00               	movlw	low _eusart1RxBuffer
 20256  003FFC  24F3               	addwf	prodl,w,c
 20257  003FFE  6ED9               	movwf	fsr2l,c
 20258  004000  0E01               	movlw	high _eusart1RxBuffer
 20259  004002  20F4               	addwfc	prodh,w,c
 20260  004004  6EDA               	movwf	fsr2h,c
 20261  004006  CFAE FFDF          	movff	4014,indf2	;volatile
 20262  00400A  2A34               	incf	_eusart1RxHead,f,c	;volatile
 20263                           
 20264                           ;eusart1.c: 216: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
 20265  00400C  0E27               	movlw	39
 20266  00400E  6434               	cpfsgt	_eusart1RxHead,c	;volatile
 20267  004010  D002               	goto	i2l921
 20268                           
 20269                           ;eusart1.c: 217: {
 20270                           ;eusart1.c: 218: eusart1RxHead = 0;
 20271  004012  0E00               	movlw	0
 20272  004014  6E34               	movwf	_eusart1RxHead,c	;volatile
 20273  004016                     i2l921:
 20274                           
 20275                           ;eusart1.c: 219: }
 20276                           ;eusart1.c: 220: eusart1RxCount++;
 20277  004016  0100               	movlb	0	; () banked
 20278  004018  2BF9               	incf	_eusart1RxCount& (0+255),f,b	;volatile
 20279                           
 20280                           ; BSR set to: 0
 20281  00401A  0012               	return		;funcret
 20282  00401C                     __end_of_EUSART1_Receive_ISR:
 20283                           	opt stack 0
 20284                           tosu	equ	0xFFF
 20285                           tosh	equ	0xFFE
 20286                           tosl	equ	0xFFD
 20287                           pclatu	equ	0xFFB
 20288                           pclath	equ	0xFFA
 20289                           tblptru	equ	0xFF8
 20290                           tblptrh	equ	0xFF7
 20291                           tblptrl	equ	0xFF6
 20292                           tablat	equ	0xFF5
 20293                           prodh	equ	0xFF4
 20294                           prodl	equ	0xFF3
 20295                           intcon	equ	0xFF2
 20296                           intcon2	equ	0xFF1
 20297                           postinc0	equ	0xFEE
 20298                           plusw0	equ	0xFEB
 20299                           fsr0h	equ	0xFEA
 20300                           fsr0l	equ	0xFE9
 20301                           wreg	equ	0xFE8
 20302                           indf1	equ	0xFE7
 20303                           postdec1	equ	0xFE5
 20304                           fsr1h	equ	0xFE2
 20305                           fsr1l	equ	0xFE1
 20306                           indf2	equ	0xFDF
 20307                           postinc2	equ	0xFDE
 20308                           postdec2	equ	0xFDD
 20309                           plusw2	equ	0xFDB
 20310                           fsr2h	equ	0xFDA
 20311                           fsr2l	equ	0xFD9
 20312                           status	equ	0xFD8
 20313                           tosu	equ	0xFFF
 20314                           tosh	equ	0xFFE
 20315                           tosl	equ	0xFFD
 20316                           pclatu	equ	0xFFB
 20317                           pclath	equ	0xFFA
 20318                           tblptru	equ	0xFF8
 20319                           tblptrh	equ	0xFF7
 20320                           tblptrl	equ	0xFF6
 20321                           tablat	equ	0xFF5
 20322                           prodh	equ	0xFF4
 20323                           prodl	equ	0xFF3
 20324                           intcon	equ	0xFF2
 20325                           intcon2	equ	0xFF1
 20326                           postinc0	equ	0xFEE
 20327                           plusw0	equ	0xFEB
 20328                           fsr0h	equ	0xFEA
 20329                           fsr0l	equ	0xFE9
 20330                           wreg	equ	0xFE8
 20331                           indf1	equ	0xFE7
 20332                           postdec1	equ	0xFE5
 20333                           fsr1h	equ	0xFE2
 20334                           fsr1l	equ	0xFE1
 20335                           indf2	equ	0xFDF
 20336                           postinc2	equ	0xFDE
 20337                           postdec2	equ	0xFDD
 20338                           plusw2	equ	0xFDB
 20339                           fsr2h	equ	0xFDA
 20340                           fsr2l	equ	0xFD9
 20341                           status	equ	0xFD8
 20342                           
 20343                           	psect	text122
 20344  000000                     __ptext122:
 20345                           	opt stack 0
 20346                           tosu	equ	0xFFF
 20347                           tosh	equ	0xFFE
 20348                           tosl	equ	0xFFD
 20349                           pclatu	equ	0xFFB
 20350                           pclath	equ	0xFFA
 20351                           tblptru	equ	0xFF8
 20352                           tblptrh	equ	0xFF7
 20353                           tblptrl	equ	0xFF6
 20354                           tablat	equ	0xFF5
 20355                           prodh	equ	0xFF4
 20356                           prodl	equ	0xFF3
 20357                           intcon	equ	0xFF2
 20358                           intcon2	equ	0xFF1
 20359                           postinc0	equ	0xFEE
 20360                           plusw0	equ	0xFEB
 20361                           fsr0h	equ	0xFEA
 20362                           fsr0l	equ	0xFE9
 20363                           wreg	equ	0xFE8
 20364                           indf1	equ	0xFE7
 20365                           postdec1	equ	0xFE5
 20366                           fsr1h	equ	0xFE2
 20367                           fsr1l	equ	0xFE1
 20368                           indf2	equ	0xFDF
 20369                           postinc2	equ	0xFDE
 20370                           postdec2	equ	0xFDD
 20371                           plusw2	equ	0xFDB
 20372                           fsr2h	equ	0xFDA
 20373                           fsr2l	equ	0xFD9
 20374                           status	equ	0xFD8
 20375                           
 20376                           	psect	rparam
 20377  0000                     tosu	equ	0xFFF
 20378                           tosh	equ	0xFFE
 20379                           tosl	equ	0xFFD
 20380                           pclatu	equ	0xFFB
 20381                           pclath	equ	0xFFA
 20382                           tblptru	equ	0xFF8
 20383                           tblptrh	equ	0xFF7
 20384                           tblptrl	equ	0xFF6
 20385                           tablat	equ	0xFF5
 20386                           prodh	equ	0xFF4
 20387                           prodl	equ	0xFF3
 20388                           intcon	equ	0xFF2
 20389                           intcon2	equ	0xFF1
 20390                           postinc0	equ	0xFEE
 20391                           plusw0	equ	0xFEB
 20392                           fsr0h	equ	0xFEA
 20393                           fsr0l	equ	0xFE9
 20394                           wreg	equ	0xFE8
 20395                           indf1	equ	0xFE7
 20396                           postdec1	equ	0xFE5
 20397                           fsr1h	equ	0xFE2
 20398                           fsr1l	equ	0xFE1
 20399                           indf2	equ	0xFDF
 20400                           postinc2	equ	0xFDE
 20401                           postdec2	equ	0xFDD
 20402                           plusw2	equ	0xFDB
 20403                           fsr2h	equ	0xFDA
 20404                           fsr2l	equ	0xFD9
 20405                           status	equ	0xFD8
 20406                           
 20407                           	psect	temp
 20408  000048                     btemp:
 20409                           	opt stack 0
 20410  000048                     	ds	1
 20411  0000                     int$flags	set	btemp
 20412  0000                     wtemp6	set	btemp+1
 20413                           tosu	equ	0xFFF
 20414                           tosh	equ	0xFFE
 20415                           tosl	equ	0xFFD
 20416                           pclatu	equ	0xFFB
 20417                           pclath	equ	0xFFA
 20418                           tblptru	equ	0xFF8
 20419                           tblptrh	equ	0xFF7
 20420                           tblptrl	equ	0xFF6
 20421                           tablat	equ	0xFF5
 20422                           prodh	equ	0xFF4
 20423                           prodl	equ	0xFF3
 20424                           intcon	equ	0xFF2
 20425                           intcon2	equ	0xFF1
 20426                           postinc0	equ	0xFEE
 20427                           plusw0	equ	0xFEB
 20428                           fsr0h	equ	0xFEA
 20429                           fsr0l	equ	0xFE9
 20430                           wreg	equ	0xFE8
 20431                           indf1	equ	0xFE7
 20432                           postdec1	equ	0xFE5
 20433                           fsr1h	equ	0xFE2
 20434                           fsr1l	equ	0xFE1
 20435                           indf2	equ	0xFDF
 20436                           postinc2	equ	0xFDE
 20437                           postdec2	equ	0xFDD
 20438                           plusw2	equ	0xFDB
 20439                           fsr2h	equ	0xFDA
 20440                           fsr2l	equ	0xFD9
 20441                           status	equ	0xFD8


Data Sizes:
    Strings     21
    Constant    143
    Data        24
    BSS         282
    Persistent  9
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160    137     159
    BANK1           256     51     251
    BANK2           256      0      70
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    readUartMessage$3594	PTR FTN()void  size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 

    SynthReadData@data	PTR unsigned char  size(2) Largest target is 0

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    strtol@endptr	PTR PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strtol@s	PTR const unsigned char  size(2) Largest target is 10
		 -> GetIntFromUartData@dataRegArr(BANK0[10]), 

    memset@p1	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK1[22]), 
		 -> SynthReadData@eepromDataArray(BANK1[16]), DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    memset@p	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK1[22]), 
		 -> SynthReadData@eepromDataArray(BANK1[16]), DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    Make32bitsArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), 

    GetIntFromUartData@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    GetUint16FromBitArray@bitarray	PTR unsigned char  size(2) Largest target is 12
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    FillArray@array	PTR unsigned char  size(2) Largest target is 32
		 -> SWSPI_Synth_send_bits@bitArray(BANK0[32]), synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    sp__memset	PTR void  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SWSPI_Synth_send_bits@bitArray(BANK0[32]), SynthReadData@TxMsg(BANK1[22]), 
		 -> SynthReadData@eepromDataArray(BANK1[16]), DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), 
		 -> sampleArray(BANK1[64]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 
		 -> synthLdTxArray(BANK1[12]), synthLdRxArray(BANK1[12]), 

    ZeroArray@array	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuFwVersion@TxMsg(BANK0[18]), GetIntFromUartData@dataRegArr(BANK0[10]), SynthReadData@TxMsg(BANK1[22]), SynthReadData@eepromDataArray(BANK1[16]), 
		 -> DacReadValue@TxMsg(BANK0[7]), FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), sampleArray(BANK1[64]), 
		 -> SendAckMessage@TxMsg(COMRAM[6]), rxMsgData(BANK1[20]), rxMsgQueue(BANK1[20]), 

    crc8@dataArray	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[18]), SynthReadData@TxMsg(BANK1[22]), DacReadValue@TxMsg(BANK0[7]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), rxMsgQueue(BANK1[20]), 

    GroupDAC@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    FLASH_WriteBlock@flashWrBufPtr	PTR unsigned char  size(2) Largest target is 64
		 -> sampleArray(BANK1[64]), 

    IOCB5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB5_DefaultInterruptHandler(), 

    IOCB5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCB5_DefaultInterruptHandler(), 

    IOCB4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCB4_DefaultInterruptHandler(), 

    IOCB4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), IOCB4_DefaultInterruptHandler(), 

    UpdateSynthFreq@data	PTR unsigned char  size(2) Largest target is 0

    DacReadValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    DacSetValue@data	PTR unsigned char  size(2) Largest target is 20
		 -> rxMsgData(BANK1[20]), 

    FlashReadUart@data	PTR unsigned char  size(2) Largest target is 0

    WriteUartMessage@dataBuf	PTR unsigned char  size(2) Largest target is 69
		 -> GetMcuRunTime@TxMsg(BANK0[9]), GetMcuFwVersion@TxMsg(BANK0[18]), SynthReadData@TxMsg(BANK1[22]), DacReadValue@TxMsg(BANK0[7]), 
		 -> FlashReadCondition@TxMsg(COMRAM[9]), FlashReadUart@TxMsg(BANK0[69]), SendAckMessage@TxMsg(COMRAM[6]), 

    SetChannelMode@data	PTR unsigned char  size(2) Largest target is 0

    groupsArray	PTR FTN()void [6] size(2) Largest target is 1
		 -> GroupDAC(), GroupFlashMemory(), GroupSynthesizers(), GroupAdc(), 
		 -> GroupStatusAndVersion(), GroupControlMcu(), 


Critical Paths under _main in COMRAM

    _InitRxMessageParams->_ZeroArray
    _GetMcuRunTime->___lldiv
    _GetMcuFwVersion->_ZeroArray
    _GroupFlashMemory->_FlashReadCondition
    _FlashReadCondition->_ZeroArray
    _FlashEreaseMem->_SendAckMessage
    _GetIntFromUartData->_strtol
    _strtol->___lmul
    _isalpha->_isupper
    _testLeds->_SendAckMessage
    _ResetMcu->_SendAckMessage
    _SetChannelMode->_SendAckMessage
    _keepAliveSignalUart->_SendAckMessage
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCB5_SetInterruptHandler
    _SetMcuRunTime->___llmod
    _SendSystemStartAck->_SendAckMessage
    _SendAckMessage->_ZeroArray
    _ZeroArray->_memset
    _WriteUartMessage->_EUSART1_Write
    _StoreIntInEeprom->_make8
    _EepromWrite->_DATAEE_WriteByte
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _SWSPI_Synth_send_bits->_FillArray
    _FillArray->_memset
    _SWSPI_DAC_send_bits->_SwSpi_Clk_Pin
    _SWSPI_DAC_send_bits->_SwSpi_Data_Pin
    ___lmul->_EepromRead
    _EepromRead->_DATAEE_ReadByte
    _CheckFlashPrecentage->___ftdiv
    _log->_eval_poly
    _exp->_eval_poly
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftdiv
    ___ftmul->___ftdiv
    ___ftdiv->___lltoft
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___lwtoft->___ftpack
    _FlashSampleWrite->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR0_ISR->___lwmod

Critical Paths under _main in BANK0

    _readUartMessage->_GroupAdc
    _readUartMessage->_GroupControlMcu
    _readUartMessage->_GroupDAC
    _readUartMessage->_GroupFlashMemory
    _readUartMessage->_GroupStatusAndVersion
    _readUartMessage->_GroupSynthesizers
    _UpdateSynthFreq->_SWSPI_send_word
    _SynthReadData->_ReadIntFromEeprom
    _SetSynthOper->_InitSynth
    _GroupFlashMemory->_FlashReadUart
    _FlashReadUart->_GetIntFromUartData
    _DacSetValue->_SWSPI_send_word
    _GetIntFromUartData->_strtol
    _DacReadValue->_ReadIntFromEeprom
    _SynthLdDetect->_InitSynth
    _PLLInitialize->_InitSynth
    _InitSynth->_ReadIntFromEeprom
    _DacInit->_ReadIntFromEeprom
    _SWSPI_send_word->_SWSPI_Synth_send_bits
    _ReadIntFromEeprom->_pow
    _CheckFlashPrecentage->___ftmul
    _AdcConvert->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftmul
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___ftdiv
    ___ftsub->___ftadd
    ___ftadd->___ftmul

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_readUartMessage
    _GroupSynthesizers->_SynthReadData

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  939904
                         _AdcConvert
                     _BlinkErrorLeds
                        _BlinkOkLeds
               _CheckFlashPrecentage
      _InitSystemApplicationManagers
                 _SendSystemStartAck
                      _SetMcuRunTime
                       _SetMcuSystem
                      _SynthLdDetect
                 _keepAliveSignalLed
                _keepAliveSignalUart
                    _readUartMessage
 ---------------------------------------------------------------------------------
 (1) _readUartMessage                                      7     7      0  469586
                                             44 BANK1      7     7      0
                       _EUSART1_Read
                           _GroupAdc *
                    _GroupControlMcu *
                           _GroupDAC *
                   _GroupFlashMemory *
              _GroupStatusAndVersion *
                  _GroupSynthesizers *
                _InitRxMessageParams
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _InitRxMessageParams                                  0     0      0    2899
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupSynthesizers                                    3     1      2  252729
                                            134 BANK0      3     1      2
                       _SetSynthOper
                      _SynthReadData
                    _UpdateSynthFreq
 ---------------------------------------------------------------------------------
 (3) _UpdateSynthFreq                                     11     9      2   29069
                                             42 BANK0     11     9      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (3) _SynthReadData                                       46    44      2  104326
                                            104 BANK0      2     0      2
                                              0 BANK1     44    44      0
                  _ReadIntFromEeprom
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _SetSynthOper                                         1     1      0  119179
                                            111 BANK0      1     1      0
                          _InitSynth
                     _SendAckMessage
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (2) _GroupStatusAndVersion                                4     1      3   13626
                                            134 BANK0      3     1      2
                    _GetMcuFwVersion
                      _GetMcuRunTime
 ---------------------------------------------------------------------------------
 (3) _GetMcuRunTime                                       17    17      0    4498
                                             36 COMRAM     2     2      0
                                              0 BANK0     15    15      0
                   _WriteUartMessage
                            ___lldiv
                            ___llmod
                               _crc8
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     421
                                             23 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _GetMcuFwVersion                                     33    33      0    9097
                                             35 COMRAM     7     7      0
                                              0 BANK0     26    26      0
                   _WriteUartMessage
                          _ZeroArray
                             ___wmul
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _GroupFlashMemory                                     3     1      2   40008
                                            134 BANK0      3     1      2
                     _FlashEreaseMem
                 _FlashReadCondition
                      _FlashReadUart
 ---------------------------------------------------------------------------------
 (3) _FlashReadUart                                       95    93      2   21548
                                             39 BANK0     95    93      2
                  _FLASH_IsWriteDone
                     _FLASH_ReadByte
                 _GetIntFromUartData
                     _SendAckMessage
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (4) _FLASH_ReadByte                                       4     0      4     453
                                             23 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (3) _FlashReadCondition                                  13    13      0    7960
                                             35 COMRAM    13    13      0
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (3) _FlashEreaseMem                                       0     0      0   10438
                     _SendAckMessage
                          _ZeroArray
 ---------------------------------------------------------------------------------
 (2) _GroupDAC                                             3     1      2  132616
                                            134 BANK0      3     1      2
                       _DacReadValue
                        _DacSetValue
 ---------------------------------------------------------------------------------
 (3) _DacSetValue                                         15    13      2   28790
                                             42 BANK0     15    13      2
                 _GetIntFromUartData
                    _SWSPI_send_word
                     _SendAckMessage
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _GetIntFromUartData                                  33    25      8    6841
                                              6 BANK0     33    25      8
                          _ZeroArray
                             _strtol
 ---------------------------------------------------------------------------------
 (5) _strtol                                              16    10      6    2723
                                             37 COMRAM    10     4      6
                                              0 BANK0      6     6      0
                             ___lmul
                            _isalpha
                            _isdigit
                            _isspace
                            _toupper
 ---------------------------------------------------------------------------------
 (6) _toupper                                              1     1      0      96
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _isspace                                              3     3      0     130
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) _isalpha                                              3     3      0     229
                                             26 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              3     3      0      99
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (3) _DacReadValue                                        18    16      2  103668
                                            104 BANK0     18    16      2
                  _ReadIntFromEeprom
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
                              _make8
 ---------------------------------------------------------------------------------
 (2) _GroupControlMcu                                      4     1      3   15177
                                            134 BANK0      3     1      2
                           _ResetMcu
                           _testLeds
 ---------------------------------------------------------------------------------
 (3) _testLeds                                             3     3      0    7607
                                             43 COMRAM     3     3      0
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (3) _ResetMcu                                             0     0      0    7539
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _GroupAdc                                             3     1      2    7753
                                            134 BANK0      3     1      2
                     _SetChannelMode
 ---------------------------------------------------------------------------------
 (3) _SetChannelMode                                       2     0      2    7691
                                             43 COMRAM     2     0      2
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         3     3      0      68
                                             23 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalUart                                  0     0      0    7539
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (1) _keepAliveSignalLed                                   1     1      0       0
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SynthLdDetect                                        0     0      0  112023
                     _BlinkErrorLeds
                          _InitSynth
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     904
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _BlinkErrorLeds                                       6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _SetMcuSystem                                         0     0      0     294
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     294
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      2     2      0      98
                                             25 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0     196
          _IOCB4_SetInterruptHandler
          _IOCB5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _IOCB5_SetInterruptHandler                            2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _IOCB4_SetInterruptHandler                            2     0      2      98
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SetMcuRunTime                                        0     0      0     592
                            ___llmod
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     592
                                             23 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (1) _SendSystemStartAck                                   0     0      0    7539
                     _SendAckMessage
 ---------------------------------------------------------------------------------
 (4) _SendAckMessage                                       8     7      1    7539
                                             35 COMRAM     8     7      1
                   _WriteUartMessage
                          _ZeroArray
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _crc8                                                 9     5      4    1610
                                             23 COMRAM     9     5      4
 ---------------------------------------------------------------------------------
 (2) _ZeroArray                                            4     0      4    2899
                                             31 COMRAM     4     0      4
                             _memset
 ---------------------------------------------------------------------------------
 (5) _WriteUartMessage                                     7     3      4    1452
                                             24 COMRAM     7     3      4
                      _EUSART1_Write
 ---------------------------------------------------------------------------------
 (6) _EUSART1_Write                                        1     1      0      62
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitSystemApplicationManagers                        0     0      0  222519
                    _ClearMcuRunTime
                            _DacInit
              _InitAdcApplicationMgr
                      _PLLInitialize
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (2) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PLLInitialize                                        0     0      0  112609
                          _FillArray
                          _InitSynth
 ---------------------------------------------------------------------------------
 (4) _InitSynth                                            7     7      0  111029
                                            104 BANK0      7     7      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
                   _SwSpi_Set_CE_Pin
 ---------------------------------------------------------------------------------
 (4) _SwSpi_Set_CE_Pin                                     2     1      1     425
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _InitAdcApplicationMgr                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DacInit                                              5     5      0  109910
                                            104 BANK0      5     5      0
                  _ReadIntFromEeprom
                    _SWSPI_send_word
                   _StoreIntInEeprom
 ---------------------------------------------------------------------------------
 (4) _StoreIntInEeprom                                     9     2      7    3779
                                             32 COMRAM     9     2      7
                        _EepromWrite
                              _make8
 ---------------------------------------------------------------------------------
 (5) _EepromWrite                                          2     1      1     338
                                             26 COMRAM     2     1      1
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_WriteByte                                     3     2      1     186
                                             23 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (4) _SWSPI_send_word                                      9     4      5   10380
                                             40 COMRAM     5     0      5
                                             38 BANK0      4     4      0
                _SWSPI_DAC_send_bits
              _SWSPI_Synth_send_bits
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
                              _make8
 ---------------------------------------------------------------------------------
 (5) _make8                                                9     4      5    1595
                                             23 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Synth_Le_Pin                               2     1      1     335
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (5) _SwSpi_Set_Dac_Sync_Pin                               1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _SWSPI_Synth_send_bits                               42    38      4    4135
                                             36 COMRAM     4     0      4
                                              0 BANK0     38    38      0
                          _FillArray
                    _Make32bitsArray
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _Make32bitsArray                                     10     4      6     344
                                             23 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 (6) _FillArray                                            5     0      5    1580
                                             31 COMRAM     5     0      5
                             _memset
 ---------------------------------------------------------------------------------
 (3) _memset                                               8     2      6     677
                                             23 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (5) _SWSPI_DAC_send_bits                                  3     2      1    2041
                                             25 COMRAM     3     2      1
                      _SwSpi_Clk_Pin
                     _SwSpi_Data_Pin
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Data_Pin                                       2     1      1     757
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (6) _SwSpi_Clk_Pin                                        2     1      1     937
                                             23 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (4) _ReadIntFromEeprom                                   23    19      4   95494
                                             81 BANK0     23    19      4
                         _EepromRead
                           ___awtoft
                            ___fttol
                             ___lmul
                                _pow
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     636
                                             25 COMRAM    12     4      8
                         _EepromRead (ARG)
 ---------------------------------------------------------------------------------
 (5) _EepromRead                                           1     1      0      62
                                             24 COMRAM     1     1      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (6) _DATAEE_ReadByte                                      1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ClearMcuRunTime                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckFlashPrecentage                                 7     7      0   14121
                                             24 BANK0      7     7      0
                            ___ftdiv
                             ___ftge
                            ___ftmul
                           ___lltoft
 ---------------------------------------------------------------------------------
 (1) _BlinkOkLeds                                          6     6      0      90
                                             23 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _AdcConvert                                          16    16      0  105511
                                             81 BANK0     16    16      0
                  _ADC_GetConversion
                   _FlashSampleWrite
              _GetUint16FromBitArray
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
                                _pow
 ---------------------------------------------------------------------------------
 (5) _pow                                                 17    11      6   88933
                                             64 BANK0     17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (6) _log                                                  5     2      3   28922
                                             46 BANK0      5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (6) _exp                                                  9     6      3   47974
                                             55 BANK0      9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
                                _log (ARG)
 ---------------------------------------------------------------------------------
 (7) _ldexp                                                7     2      5     539
                                             46 BANK0      7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (7) _floor                                                8     5      3   11854
                                             47 BANK0      8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (7) _frexp                                                7     2      5     682
                                             23 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (8) ___fttol                                             15    11      4     911
                                             24 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (8) ___ftge                                               9     3      6    1098
                                             23 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (8) ___altoft                                            10     6      4    3367
                                             46 COMRAM     2     2      0
                                             39 BANK0      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (7) _eval_poly                                           12     5      7   13735
                                             46 COMRAM     2     2      0
                                             36 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (8) ___wmul                                               6     2      4    2322
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) ___ftmul                                             15     9      6    5281
                                              9 BANK0     15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    5754
                                             36 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             12     6      6    5338
                                             24 BANK0     12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     335
                                             23 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             15     9      6    4353
                                             40 COMRAM     6     0      6
                                              0 BANK0      9     9      0
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             4     1      3    3476
                                             31 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             9     5      4    3355
                                             31 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3284
                                             31 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    3073
                                             23 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _GetUint16FromBitArray                               11     7      4     440
                                             23 COMRAM    11     7      4
 ---------------------------------------------------------------------------------
 (2) _FlashSampleWrite                                     7     4      3    1811
                                             44 COMRAM     3     0      3
                                              0 BANK0      4     4      0
                  _FLASH_IsWriteDone
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    16    10      6     992
                                             28 COMRAM    16    10      6
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     5     1      4     217
                                             23 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (4) _FLASH_IsWriteDone                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             23 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                         18    18      0     767
                                              5 COMRAM    18    18      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                         _MEMORY_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            0     0      0     767
                            ___lwmod
 ---------------------------------------------------------------------------------
 (13) ___lwmod                                             5     1      4     767
                                              0 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (12) _PIN_MANAGER_IOC                                     0     0      0       0
                          _IOCB4_ISR
                          _IOCB5_ISR
 ---------------------------------------------------------------------------------
 (13) _IOCB5_ISR                                           0     0      0       0
                   Absolute function *
      _IOCB5_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (14) _IOCB5_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _IOCB4_ISR                                           0     0      0       0
                   Absolute function *
      _IOCB4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (14) _IOCB4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _MEMORY_ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _AdcConvert
     _ADC_GetConversion
     _FlashSampleWrite
       _FLASH_IsWriteDone
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     _GetUint16FromBitArray
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
         _log (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           _eval_poly
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___wmul
           _frexp
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
             _frexp (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___wmul
         _frexp
   _BlinkErrorLeds
   _BlinkOkLeds
   _CheckFlashPrecentage
     ___ftdiv
       ___ftpack
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftge
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lltoft (ARG)
         ___ftpack
       ___lwtoft (ARG)
         ___ftpack
       _frexp (ARG)
     ___lltoft
       ___ftpack
   _InitSystemApplicationManagers
     _ClearMcuRunTime
     _DacInit
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _FillArray
             _memset
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _StoreIntInEeprom
         _EepromWrite
           _DATAEE_WriteByte
         _make8
     _InitAdcApplicationMgr
     _PLLInitialize
       _FillArray
         _memset
       _InitSynth
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
         _SwSpi_Set_CE_Pin
     _TMR0_StartTimer
   _SendSystemStartAck
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _SetMcuRunTime
     ___llmod
   _SetMcuSystem
     _SYSTEM_Initialize
       _ADC_Initialize
       _EUSART1_Initialize
       _INTERRUPT_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
         _IOCB4_SetInterruptHandler
         _IOCB5_SetInterruptHandler
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
   _SynthLdDetect
     _BlinkErrorLeds
     _InitSynth
       _ReadIntFromEeprom
         _EepromRead
           _DATAEE_ReadByte
         ___awtoft
           ___ftpack
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___lmul
           _EepromRead (ARG)
             _DATAEE_ReadByte
         _pow
           ___ftge
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _frexp (ARG)
           ___ftneg
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _exp
             ___awtoft
               ___ftpack
             ___ftdiv
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___ftsub
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _floor
               ___altoft
                 ___ftpack
                 ___fttol (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftge
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _frexp
             _ldexp
               _eval_poly (ARG)
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
             _log (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
           _log
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
               _frexp (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             _eval_poly
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___wmul
             _frexp
       _SWSPI_send_word
         _SWSPI_DAC_send_bits
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SWSPI_Synth_send_bits
           _FillArray
             _memset
           _Make32bitsArray
           _SwSpi_Clk_Pin
           _SwSpi_Data_Pin
         _SwSpi_Set_Dac_Sync_Pin
         _SwSpi_Set_Synth_Le_Pin
         _make8
       _StoreIntInEeprom
         _EepromWrite
           _DATAEE_WriteByte
         _make8
       _SwSpi_Set_CE_Pin
     ___awmod
   _keepAliveSignalLed
   _keepAliveSignalUart
     _SendAckMessage
       _WriteUartMessage
         _EUSART1_Write
       _ZeroArray
         _memset
       _crc8
   _readUartMessage
     _EUSART1_Read
     _GroupAdc *
       _SetChannelMode
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupControlMcu *
       _ResetMcu
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
       _testLeds
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
     _GroupDAC *
       _DacReadValue
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _DacSetValue
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _GroupFlashMemory *
       _FlashEreaseMem
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _ZeroArray
           _memset
       _FlashReadCondition
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _FlashReadUart
         _FLASH_IsWriteDone
         _FLASH_ReadByte
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
     _GroupStatusAndVersion *
       _GetMcuFwVersion
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         ___wmul
         _crc8
       _GetMcuRunTime
         _WriteUartMessage
           _EUSART1_Write
         ___lldiv
         ___llmod
         _crc8
     _GroupSynthesizers *
       _SetSynthOper
         _InitSynth
           _ReadIntFromEeprom
             _EepromRead
               _DATAEE_ReadByte
             ___awtoft
               ___ftpack
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _pow
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___lltoft
                 ___ftpack
               _exp
                 ___awtoft
                   ___ftpack
                 ___ftdiv
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftge
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftneg
                 ___ftsub
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _floor
                   ___altoft
                     ___ftpack
                     ___fttol (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___lwtoft (ARG)
                         ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftge
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                   _frexp
                 _ldexp
                   _eval_poly (ARG)
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___wmul
                 _log (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   _eval_poly
                     ___ftadd
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                             ___ftpack
                           ___lwtoft (ARG)
                             ___ftpack
                         ___ftpack (ARG)
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                         _frexp (ARG)
                       ___ftpack (ARG)
                       ___wmul (ARG)
                       _frexp (ARG)
                     ___ftmul
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___wmul
                   _frexp
               _log
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
           _SWSPI_send_word
             _SWSPI_DAC_send_bits
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SWSPI_Synth_send_bits
               _FillArray
                 _memset
               _Make32bitsArray
               _SwSpi_Clk_Pin
               _SwSpi_Data_Pin
             _SwSpi_Set_Dac_Sync_Pin
             _SwSpi_Set_Synth_Le_Pin
             _make8
           _StoreIntInEeprom
             _EepromWrite
               _DATAEE_WriteByte
             _make8
           _SwSpi_Set_CE_Pin
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _SwSpi_Set_CE_Pin
       _SynthReadData
         _ReadIntFromEeprom
           _EepromRead
             _DATAEE_ReadByte
           ___awtoft
             ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___lmul
             _EepromRead (ARG)
               _DATAEE_ReadByte
           _pow
             ___ftge
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _frexp (ARG)
             ___ftneg
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _exp
               ___awtoft
                 ___ftpack
               ___ftdiv
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftge
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               ___ftneg
               ___ftsub
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _floor
                 ___altoft
                   ___ftpack
                   ___fttol (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___lwtoft (ARG)
                       ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftge
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___lwtoft (ARG)
                     ___ftpack
                 _frexp
               _ldexp
                 _eval_poly (ARG)
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
               _log (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 _eval_poly
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___ftpack
                         ___lltoft (ARG)
                           ___ftpack
                         ___lwtoft (ARG)
                           ___ftpack
                       ___ftpack (ARG)
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                       _frexp (ARG)
                     ___ftpack (ARG)
                     ___wmul (ARG)
                     _frexp (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___wmul
                 _frexp
             _log
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                 _frexp (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
                 _frexp (ARG)
               _eval_poly
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___ftpack
                       ___lltoft (ARG)
                         ___ftpack
                       ___lwtoft (ARG)
                         ___ftpack
                     ___ftpack (ARG)
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                     _frexp (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                   _frexp (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___ftpack
                     ___lltoft (ARG)
                       ___ftpack
                     ___lwtoft (ARG)
                       ___ftpack
                   ___ftpack (ARG)
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                   _frexp (ARG)
                 ___wmul
               _frexp
         _WriteUartMessage
           _EUSART1_Write
         _ZeroArray
           _memset
         _crc8
         _make8
       _UpdateSynthFreq
         _GetIntFromUartData
           _ZeroArray
             _memset
           _strtol
             ___lmul
               _EepromRead (ARG)
                 _DATAEE_ReadByte
             _isalpha
               _isupper
             _isdigit
             _isspace
             _toupper
         _SWSPI_send_word
           _SWSPI_DAC_send_bits
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SWSPI_Synth_send_bits
             _FillArray
               _memset
             _Make32bitsArray
             _SwSpi_Clk_Pin
             _SwSpi_Data_Pin
           _SwSpi_Set_Dac_Sync_Pin
           _SwSpi_Set_Synth_Le_Pin
           _make8
         _SendAckMessage
           _WriteUartMessage
             _EUSART1_Write
           _ZeroArray
             _memset
           _crc8
         _StoreIntInEeprom
           _EepromWrite
             _DATAEE_WriteByte
           _make8
     _InitRxMessageParams *
       _ZeroArray
         _memset
     _ZeroArray *
       _memset
     _crc8 *

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _MEMORY_ISR
   _PIN_MANAGER_IOC
     _IOCB4_ISR
       Absolute function(Fake) *
       _IOCB4_DefaultInterruptHandler *
     _IOCB5_ISR
       Absolute function(Fake) *
       _IOCB5_DefaultInterruptHandler *
   _TMR0_ISR
     ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      46       8       27.3%
BITBANK1           100      0       0       5        0.0%
BANK1              100     33      FB       6       98.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     89      9F       4       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     227       9        0.0%
DATA                 0      0     227      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Mar 25 12:04:39 2018

              __size_of_SendSystemStartAck 000C                          ??_GetMcuFwVersion 0024  
               __end_of_keepAliveSignalLed 4278                               ___altoft@exp 002F  
                 _eusart1TxBufferRemaining 00FF                         readUartMessage@idx 01E2  
                 GetIntFromUartData@idxCon 0084                            _GroupControlMcu 3F5E  
              __end_of_keepAliveSignalUart 4356                              ___altoft@sign 0030  
               __size_of_FLASH_IsWriteDone 000E                                         l60 35A4  
                 GetIntFromUartData@recVal 007B                   GetIntFromUartData@retVal 007C  
                      __end_of_BlinkOkLeds 37E4                            _SWSPI_send_word 2FBE  
                      ___wmul@multiplicand 001A         __size_of_IOCB4_SetInterruptHandler 000A  
                          _timer0ReloadVal 0046                 ?_IOCB4_SetInterruptHandler 0018  
                             __CFG_CP0$OFF 000000                               __CFG_CP1$OFF 000000  
                             __CFG_CP2$OFF 000000                               __CFG_CP3$OFF 000000  
                             ___ftadd@exp1 0083                               ___ftadd@exp2 0082  
                             ___ftadd@sign 0081                                ?_MEMORY_ISR 0001  
                                      l122 3FB2                                        l202 1358  
                                      l211 11DA                                        l203 119A  
                                      l221 129A                                        l213 11F2  
                                      l126 10D0                                        l222 1256  
                                      l206 11A8                                        l127 0F96  
                                      l215 120A                                        l207 11D4  
                                      l320 234C                                        l224 12C0  
                                      l217 1228                                        l234 3E76  
                                      l330 1620                                        l226 12F8  
                                      l411 28BC                                        l235 3E60  
                                      l331 1756                                        l219 122E  
                                      l412 28D2                                        l332 1642  
                                      l228 12FE                                        l333 165E  
                                      l318 232A                                        l334 166E  
                                      l326 15D4                                        l319 232A  
                                      l335 16AC                                        l512 0BE4  
                                      l328 1610                                        l513 0BC6  
                                      l507 0AC8                                        l419 2790  
                                      l523 20D2                                        l524 20C2  
                                      l509 0CD2                                        l517 0CB4  
                                      l533 33F2                                        l534 33DA  
                                      l519 0D06                                        l535 33E6  
                                      l551 0F2E                                        l543 0DF4  
                                      l704 39CE                                        l632 3002  
                                      l528 213A                                        l705 39D8  
                                      l561 2A66                                        l545 0EB0  
                                      l642 3930                                        l650 2C8C  
                                      l562 2A3A                                        l538 3416  
                                      l546 0EBE                                        l643 38FC  
                                      l723 3CF4                                        l563 2A40  
                                      l539 3422                                        l644 3916  
                                      l652 2CBA                                        l636 3064  
                                      l724 3CCC                                        l548 0ECA  
                                      l645 3920                                        l653 2CC6  
                                      l733 3CE0                                        l725 3CD6  
                                      l557 29FA                                        l734 3CEA  
                                      l910 3CC2                                        l558 29D2  
                                      l559 29D8                                        l744 3D30  
                                      l657 398C                                        l745 3D08  
                                      l658 3950                                        l770 4216  
                                      l754 3D1C                                        l746 3D12  
                                      l675 3978                                        l667 3964  
                                      l659 395A                                        l755 3D26  
                                      l676 3982                                        l668 396E  
                                      l908 3CA0                                        l765 421A  
                                      l909 3CC4                                        l686 39E2  
                                      l766 4212                                        l687 39A6  
                                      l696 39BA                                        l688 39B0  
                                      l697 39C4                                        l895 3B56  
                                      l897 3B7C                               __CFG_CPB$OFF 000000  
                             __CFG_CPD$OFF 000000                       readUartMessage@chRec 01E4  
                        ??_Make32bitsArray 001E                                 _SYNTH_REGS 0601  
                                      _exp 138E                                        _log 1DEC  
                                      _pow 1AF0                               ___awmod@sign 001D  
                                      prod 000FF3                                        tosl 000FFD  
                                      wreg 000FE8             ?_InitSystemApplicationManagers 0001  
                             __CFG_LVP$OFF 000000                 __end_of_FlashReadCondition 2256  
                           InitSynth@cType 00CC                               ___ftdiv@cntr 0063  
                       __size_of_IOCB4_ISR 0022                         __size_of_IOCB5_ISR 0022  
                             ___ftdiv@sign 0068                                       l1045 2DB4  
                                     l1046 2D6C                                       l1310 327C  
                                     l1303 41A8                                       l1048 2D8C  
                                     l2040 1BDC                                       l2024 4036  
                                     l1056 3EB0                                       l1304 419A  
                                     l1049 2D8E                                       l1401 3640  
                                     l2041 1BBA                                       l2025 4026  
                                     l1162 3FD6                                       l1402 3608  
                                     l2042 1C62                                       l1410 1CE0  
                                     l1314 322C                                       l1403 363C  
                                     l1315 323C                                       l2300 1E30  
                                     l2036 1B3A                                       l1420 37E6  
                                     l1412 1D56                                       l1316 324C  
                                     l1324 3D60                                       l2037 1B2A  
                                     l1501 086C                                       l1317 3254  
                                     l1325 3D46                                       l1333 3EE4  
                                     l1422 37EA                                       l1318 325C  
                                     l1334 3EC8                                       l2039 1B52  
                                     l1431 38F2                                       l1423 37EE  
                                     l1503 08B8                                       l1319 326C  
                                     l1327 3D4C                                       l2240 154C  
                                     l1440 2010                                       l1424 37F2  
                                     l1408 1CC0                                       l1328 3D52  
                                     l1336 3ED6                                       l1441 1F36  
                                     l1425 3820                                       l1505 08E6  
                                     l2306 2B4E                                       l2234 13A8  
                                     l1434 3DA8                                       l2307 2AD0  
                                     l1419 3824                                       l1435 3D7E  
                                     l1515 2666                                       l2260 2BCA  
                                     l2236 13E2                                       l2245 2916  
                                     l2237 141C                                       l1429 38B4  
                                     l1285 3F70                                       l2254 312E  
                                     l2246 2908                                       l2262 2BFC  
                                     l2238 144C                                       l1390 3B06  
                                     l1286 3F64                                       l2263 2BF0  
                                     l2239 1576                                       l2271 4090  
                                     l2191 1864                                       l2175 17AC  
                                     l1295 40F6                                       l2248 2930  
                                     l1608 3A08                                       l2192 18D0  
                                     l1288 3F6A                                       l1296 40EA  
                                     l2249 29AC                                       l1609 3A1C  
                                     l2281 40B6                                       l2185 1828  
                                     l2177 17C4                                       l2258 2B80  
                                     l2194 18F4                                       l2186 1838  
                                     l1298 40F0                                       l1811 2E8C  
                                     l2195 1930                                       l2179 1818  
                                     l1812 2E82                                       l2276 41CA  
                                     l2188 1852                                       l1901 411E  
                                     l1389 3B22                                       l1814 2EC0  
                                     l2286 41E8                                       l1815 2EAA  
                                     l1911 2384                                       l2199 42B4  
                                     l1591 350A                                       l1920 2414  
                                     l1817 2EE8                                       l1681 345E  
                                     l1913 23FC                                       l1585 34BA  
                                     l1818 2EDE                                       l1842 1996  
                                     l1682 3452                                       l1922 243C  
                                     l1914 23EC                                       l2298 1E0C  
                                     l1586 34D2                                       l1851 1A26  
                                     l1907 3BE2                                       l1499 083E  
                                     l1780 3552                                       l1588 34F8  
                                     l1781 354A                                       l1589 34EC  
                                     l1870 1ACA                                       l1846 19C0  
                                     l1919 2420                                       l1951 3314  
                                     l1792 3DC4                                       l1856 1A1C  
                                     l1784 356A                                       l1952 3322  
                                     l1865 1A5A                                       l1857 1A12  
                                     l1961 36A4                                       l1785 3574  
                                     l1777 3530                                       l1866 1A50  
                                     l1890 2478                                       l1962 36B2  
                                     l1786 3582                                       l1778 353C  
                                     l1875 256E                                       l7003 3222  
                                     l1883 31C6                                       l1947 32E0  
                                     l1868 1A7E                                       l1892 24A0  
                                     l1884 31F6                                       l1948 32D4  
                                     l1877 2596                                       l1869 1A9A  
                                     l1893 24D2                                       l1957 367C  
                                     l1878 25D4                                       l1894 24E2  
                                     l1958 3670                                       l1879 25FA  
                                     l1968 3852                                       l1896 24FA  
                                     l1969 3846                                       l1897 250A  
                                     l8001 1CB8                                       l8101 0CB4  
                                     l6341 3732                                       l8023 1D46  
                                     l8041 1DAA                                       l6603 3790  
                                     ?_exp 0097                                       l8061 0AC0  
                                     ?_log 008E                                       l8219 2D64  
                                     l7269 4026                                       l8175 3594  
                                     l8089 0BC6                                       l8281 169C  
                                     l7571 154C                                       l7627 3C8E  
                                     l8355 2780                                       l8291 170C  
                                     l8189 35EA                                       l8365 27C6  
                                     l7487 38A4                                       l8631 28BC  
                                     l8465 0EC2                                       l8619 27FA  
                                     l8547 2656                                       l8459 0EB6  
                                     l8719 0F8E                                       l8559 26E2  
                                     l7865 3020                                       l7699 2C84  
                                     l7869 302E                                       ?_pow 00A0  
                                     STR_1 0690                                       STR_2 0690  
                                     STR_3 0690                                       STR_4 0690  
                                     STR_5 0690                                       STR_6 0690  
                                     STR_7 0690                                       STR_8 0690  
                                     STR_9 0690                         EepromWrite@address 001C  
                                     _LATA 000F89                                       _LATB 000F8A  
                                     _LATC 000F8B                                       _LATD 000F8C  
                                     _LATE 000F8D                                       u7020 2BA0  
                                     u8010 1DAA                                       u6420 2EF2  
                                     u7028 2BA4                                       u8021 1DE2  
                                     u6510 1988                                       u8200 3680  
                                     u5720 3556                                       u5800 426A  
                                     u6610 1A2E                                       u7075 3EBE  
                                     u6380 2E74                                       u6540 19B2  
                                     u7076 3EC0                                       u6701 2488  
                                     u8301 15A2                                       u7510 2CD8  
                                     u8230 35EA                                       u6471 1954  
                                     u5584 3630                                       u6640 1A62  
                                     u7280 1426                                       u7440 3818  
                                     u7600 4082                                       u5585 362A  
                                     u6481 1968                                       u6570 19F0  
                                     u7290 1428                                       u8090 0AFC  
                                     u5818 426C                                       u8410 27C6  
                                     u8170 32E4                                       u8155 3F5A  
                                     u9107 35DC                                       u8156 3F5C  
                                     u7700 2FD2                                       u6901 257E  
                                     u7445 380E                                       u9117 3758  
                                     u8421 2054                                       u6830 2426  
                                     u7390 1BA0                                       u9127 3772  
                                     u8280 2D92                                       u8360 170C  
                                     u8520 3404                                       u8600 0F22  
                                     u6681 2460                                       u9137 2CDA  
                                     u7730 305E                                       u7810 17B4  
                                     u8530 3406                                       u6771 2368  
                                     u9147 37B6                                       u9067 1744  
                                     u6860 3156                                       u7580 40B2  
                                     u9157 37D0                                       u9077 35AC  
                                     u8381 307C                                       u6790 23A2  
                                     u8390 30BE                                       u8295 2DB0  
                                     u9167 105C                                       u9087 35BC  
                                     u8296 2DB2                                       u7840 17EE  
                                     u8480 33C8                                       u6881 2556  
                                     u9097 35CC                                       u8650 26E2  
                                     u8490 33CA                                       u6795 239A  
                                     u8395 30B2                                       u7940 4346  
                                     u6868 3158                                       u6980 2922  
                                     u7860 17FE                                       u7941 4342  
                                     u8670 22B2                                       u8590 0F1E  
                                     u8665 2260                                       u8690 22F6  
                                     u8930 2E60                                       u7980 1CFA  
                                     u8790 1070                                       u8928 1330  
                                     u8929 1350                   ??_SwSpi_Set_Synth_Le_Pin 0019  
                                     _WPUB 000F61                              _EUSART1_Write 3C8C  
                                     _crc8 3AF4                    ??_InitAdcApplicationMgr 0018  
                                     _data 003C                                       _main 34A8  
                             ___ftpack@arg 0018                              ?_EUSART1_Read 0001  
                             ___ftpack@exp 001B                            _TMR0_StartTimer 43A6  
                          __end_of_DacInit 28D8                                       fsr0h 000FEA  
                                     fsr1h 000FE2                                       fsr2h 000FDA  
                                     fsr0l 000FE9                                       indf1 000FE7  
                                     indf2 000FDF                                       fsr1l 000FE1  
                                     fsr2l 000FD9                                       btemp 0048  
                            __CFG_BORV$190 000000                                       exp@x 0097  
                                     log@x 008E                          ?_FLASH_WriteBlock 001D  
                         ?_ClearMcuRunTime 0001                                       pow@x 00A0  
                                     pow@y 00A3                                       prodh 000FF4  
                                     prodl 000FF3                  GroupStatusAndVersion@data 00E6  
            __size_of_CheckFlashPrecentage 00AE                                       start 00DC  
                            __CFG_IESO$OFF 000000                          DacReadValue@TxMsg 00D1  
                      __end_of_EepromWrite 433C                         ??_FLASH_WriteBlock 0023  
                            _adcSampleMode 003D                               ___ftmul@cntr 0076  
                             ___param_bank 000000                               ___ftmul@sign 0077  
                           _BlinkErrorLeds 3728                               ___fttol@exp1 0086  
                __size_of_DATAEE_WriteByte 0036                                      ??_exp 0031  
                                    ??_log 0031                               ___fttol@lval 0082  
                                    ??_pow 0031                    __end_of_TMR0_Initialize 3F2A  
                   _ReadIntFromEeprom$3588 00BC                     _ReadIntFromEeprom$3589 00BF  
           __size_of_OSCILLATOR_Initialize 000E              __end_of_OSCILLATOR_Initialize 432E  
                                    ?_crc8 0018                 SWSPI_DAC_send_bits@phrType 001C  
                                    ?_main 0001                                      _EEADR 000FA9  
                          __end_of___ftadd 1AF0                     GetUint16FromBitArray@i 0021  
                                    STR_10 0690                                      STR_11 0690  
                                    STR_12 0690                                      STR_20 069C  
                                    STR_13 0690                                      STR_21 069C  
                                    STR_14 0690                                      STR_22 069C  
                                    STR_15 0690                                      STR_23 069C  
                                    STR_16 0690                                      STR_24 069C  
                                    STR_17 0690                                      STR_25 069C  
          __size_of_SwSpi_Set_Dac_Sync_Pin 001C                                      STR_26 069C  
                                    STR_18 069C                                      STR_27 069C  
                                    STR_19 069C                                      STR_28 069C  
                          __end_of___awmod 358C                                      STR_29 069C  
                          __end_of___ftdiv 262C          __end_of_IOCB4_SetInterruptHandler 438A  
                          __end_of___ftneg 412C                            __end_of___lldiv 3334  
                               _EepromRead 438A                            __end_of___ftmul 2544  
                                    _T0CON 000FD5                            __end_of___llmod 36C4  
                          __end_of___ftsub 3C0C                            __end_of___fttol 244E  
                             _SYNTH_ADDRES 0635                             __CFG_DEBUG$OFF 000000  
                          InitSynth@regNum 00CE                            __end_of___lwmod 3C4E  
                      StoreIntInEeprom@idx 0029                                      i2l920 3FF6  
                                    i2l921 4016                                      i2l914 3E14  
                                    i2l850 0086                                      i2l915 3E10  
                                    i2l843 005E                                      i2l852 0090  
                                    i2l845 006A                                      i2l848 007A  
                      StoreIntInEeprom@val 0028                                      _TMR0H 000FD7  
                                    _TMR0L 000FD6                                      _TRISA 000F92  
                                    _TRISB 000F93                                      _TRISC 000F94  
                                    _TRISD 000F95                                      _TRISE 000F96  
                      _SWSPI_DAC_send_bits 38F4          __size_of_TMR0_SetInterruptHandler 000A  
                            __CFG_WRT0$OFF 000000                              __CFG_WRT1$OFF 000000  
               __end_of_GetIntFromUartData 1DEC                              __CFG_WRT2$OFF 000000  
                      ___lmul@multiplicand 001E                  ?_TMR0_SetInterruptHandler 0018  
                            __CFG_WRT3$OFF 000000                               ___lltoft@exp 0028  
                     _EUSART1_Transmit_ISR 3DE8                             __CFG_EBTR0$OFF 000000  
                           __CFG_FCMEN$OFF 000000                             __CFG_EBTR1$OFF 000000  
                           __CFG_EBTR2$OFF 000000                             __CFG_EBTR3$OFF 000000  
                        ?_WriteUartMessage 0019                           __end_of_TMR0_ISR 2FBE  
                            __CFG_WRTB$OFF 000000                              __CFG_WRTC$OFF 000000  
                            __CFG_WRTD$OFF 000000                            DacSetValue@data 008A  
                          _DATAEE_ReadByte 42B8                             __CFG_EBTRB$OFF 000000  
                            ___awtoft@sign 0023                    __end_of_PIN_MANAGER_IOC 4312  
                                    crc8@i 001F                                      _make8 37E4  
           __size_of_SWSPI_Synth_send_bits 00C6                      __end_of_GetMcuRunTime 2710  
                                    _count 00F0                                      _floor 28D8  
                                    _ldexp 2B66                                      _frexp 3106  
                                    _errno 0130              __end_of_SWSPI_Synth_send_bits 2CFA  
                          __end_of_isalpha 4098                            __end_of_isdigit 41D2  
                                    _group 00F7             __size_of_GetUint16FromBitArray 0068  
                       ??_WriteUartMessage 001D                         __CFG_MCLRE$EXTMCLR 000000  
                            ___ftpack@sign 001C                    ??_GroupStatusAndVersion 0031  
            __end_of_GetUint16FromBitArray 365E                            __end_of_isspace 40BE  
                           ?_EUSART1_Write 0001                                ?_AdcConvert 0001  
                           __CFG_BOREN$OFF 000000                            __end_of_isupper 41F0  
                                    pclath 000FFA                                      tablat 000FF5  
                        ??_UpdateSynthFreq 0030                                      pow@yi 00AD  
                           ??_EUSART1_Read 0018                             FillArray@array 0020  
                                    plusw0 000FEB                                      plusw2 000FDB  
                                    status 000FD8                             FillArray@value 0024  
                                    wtemp6 0049                       ReadIntFromEeprom@idx 00C7  
                           __CFG_HFOFST$ON 000000                            __end_of_toupper 42B8  
           SwSpi_Set_Synth_Le_Pin@cPinMode 0018                     __size_of_SynthLdDetect 00D6  
                  __end_of_GroupControlMcu 3F8E                        __size_of_MEMORY_ISR 0004  
                           __CFG_PBADEN$ON 000000                                exp@exponent 009D  
           CheckFlashPrecentage@precentage 007C                       ?_SWSPI_DAC_send_bits 001A  
                   __end_of_BlinkErrorLeds 3786            ??_IOCB4_DefaultInterruptHandler 0001  
                              ldexp@newexp 0091                    __end_of_SWSPI_send_word 3068  
                              _BlinkOkLeds 3786                    WriteUartMessage@dataBuf 0019  
                          __initialization 3334                                log@exponent 0091  
                             __end_of_crc8 3B42                 __end_of_EUSART1_Initialize 3E56  
                             __end_of_main 351C                         DacReadValue@regNum 00CC  
                        __end_of_IOCB4_ISR 4194                          __end_of_IOCB5_ISR 4172  
                  FLASH_ReadByte@flashAddr 0018                ?_INTERRUPT_InterruptManager 0001  
                         __end_of_GroupDAC 3EF6                     __size_of_SynthReadData 025A  
                          _readUartMessage 1192                           __end_of_GroupAdc 41B4  
                                   ??_crc8 001C                                     ??_main 0031  
                            ___fttol@sign1 0081                          ?_SwSpi_Set_CE_Pin 0018  
                            __activetblptr 000002                    __size_of_FLASH_ReadByte 0012  
                         __end_of_ResetMcu 4320                         __size_of_FillArray 001C  
                             _writeAddress 003E                         ??_SwSpi_Set_CE_Pin 0019  
                    ?_EUSART1_Transmit_ISR 0001                    __end_of_TMR0_StartTimer 43AA  
                                   ?_make8 0018                                     _ADCON0 000FC2  
                                   _ADCON1 000FC1                                     _ADCON2 000FC0  
                                   ?_floor 008F                  FLASH_WriteBlock@writeAddr 001D  
                                   ?_ldexp 008E                                     ?_frexp 0018  
                         __end_of___altoft 34A8                           ___llmod@dividend 0018  
                                   _ADRESH 000FC4                                     _ADRESL 000FC3  
                                   _EEDATA 000FA8                                  ??_DacInit 00C8  
                                   _EECON2 000FA7                           __end_of___awtoft 3DE8  
                                   _ANSELA 000F38                                     _ANSELB 000F39  
                                   _ANSELC 000F3A                                     _ANSELD 000F3B  
                                   _ANSELE 000F3C                           __end_of___ftpack 2F12  
           ?_IOCB5_DefaultInterruptHandler 0001                           __end_of___lltoft 389C  
                        _FlashReadUart$605 00DC                          ?_FlashSampleWrite 002D  
                                   i2l2010 3C22                                     i2l2011 3C1A  
                                   i2l1116 2F42                                     i2l1117 2F64  
                                   i2l2014 3C3A                                     i2l1118 2F86  
                                   i2l2015 3C44                                     i2l1119 2FA8  
                           __CFG_WDTEN$OFF 000000                       StoreIntInEeprom@data 0021  
                                   _TABLAT 000FF5                                _EepromWrite 432E  
                                   _RCREG1 000FAE                           __end_of___lwtoft 4150  
                  __size_of_FlashEreaseMem 0054                  __size_of_FLASH_EraseBlock 0034  
                                   _RCSTA1 000FAB                          SynthReadData@data 00C8  
          __size_of_SwSpi_Set_Synth_Le_Pin 003C                                     _OSCCON 000FD3  
                                   _SPBRG1 000FAF                     _SwSpi_Set_Dac_Sync_Pin 420E  
                  __size_of_SwSpi_Data_Pin 0056                   GroupSynthesizers@request 00E8  
                       ??_FlashSampleWrite 0060                                     _TXREG1 000FAD  
                                   _TXSTA1 000FAC                         __size_of_InitSynth 0276  
                    ??_SWSPI_DAC_send_bits 001B                             _Timer0_SynthLd 00FE  
                 __end_of_GroupFlashMemory 3D78                            ?_BlinkErrorLeds 0001  
                           __CFG_PWRTEN$ON 000000                             __CFG_XINST$OFF 000000  
                             _synthLdRxCnt 0043                               _synthLdTxCnt 0042  
                                   _cState 00F8                                     ___ftge 3196  
                                   ___lmul 39F8                  SWSPI_Synth_send_bits@data 0025  
                                   ___wmul 40BE                                  ??___ftadd 007E  
                SWSPI_Synth_send_bits@mask 0080                                  ??___awmod 001C  
                                ??___ftdiv 0060                                  ??___ftneg 001B  
                                ??___lldiv 0020                                  ??___ftmul 006F  
                    __end_of_PLLInitialize 3C8C                                  ??___llmod 0020  
                                ??___ftsub 002F                                  ??___fttol 007C  
                                ??___lwmod 0005             SwSpi_Set_Dac_Sync_Pin@cPinMode 0018  
                         ?_TMR0_Initialize 0001                                     _memset 401C  
                       __end_of_DAC_ADDRES 0657                                     clear_0 337A  
                                   clear_1 3386                                     clear_2 3392  
                                   clear_3 339E                            ___awmod@divisor 001A  
                      __size_of_AdcConvert 022C                            ___awmod@counter 001C  
                  __end_of_DATAEE_ReadByte 42CC                                ?_EepromRead 0001  
                                   _strtol 176C                                     floor@i 0092  
                    __end_of_SwSpi_Clk_Pin 39F8                                     floor@x 008F  
                    ___ftmul@f3_as_product 0073                              _SynthLdDetect 29BA  
                 SWSPI_DAC_send_bits@count 001B                 FlashSampleWrite@channelNum 002F  
                             __pdataCOMRAM 003E                                  ??_isalpha 001B  
                                ??_isdigit 0018                      __end_of_FlashReadUart 176C  
                         __end_of_testLeds 35F6                              ?_SetMcuSystem 0001  
                             __mediumconst 0000                                  ??_isspace 0018  
                                   tblptrh 000FF7                                  ??_isupper 0018  
                                   tblptrl 000FF6                                     tblptru 000FF8  
                 ADC_GetConversion@channel 001C                            ??_EUSART1_Write 0018  
 TMR0_SetInterruptHandler@InterruptHandler 0018  IOCB5_SetInterruptHandler@InterruptHandler 0018  
IOCB4_SetInterruptHandler@InterruptHandler 0018               __size_of_InitRxMessageParams 0028  
                         ?_PIN_MANAGER_IOC 0001                      ReadIntFromEeprom@base 00B8  
                          _eusart1RxBuffer 0100                                  ??_toupper 0018  
                       __size_of_ZeroArray 001E              __size_of_INTERRUPT_Initialize 0004  
                            _SynthReadData 0D0C                            _eusart1TxBuffer 0200  
                          _GetMcuFwVersion 06A6                           __end_ofexp@coeff 0675  
                        _SYSTEM_Initialize 4246                           __end_oflog@coeff 0690  
                               __accesstop 0060                    __end_of__initialization 33A4  
                               ___altoft@c 0087                              ZeroArray@size 0022  
                               ___ftadd@f1 0078                                 ___ftadd@f2 007B  
                               ___ftge@ff1 0018                                 ___ftge@ff2 001B  
                       ?_SYSTEM_Initialize 0001                               eval_poly@res 008B  
                            ___rparam_used 000001                                 ___ftdiv@f1 0029  
                               ___ftdiv@f2 002C                                 ___ftdiv@f3 0064  
                         ?_GroupControlMcu 00E6               GroupStatusAndVersion@request 00E9  
                             InitSynth@idx 00CD                          __end_of_FillArray 4246  
                               ___ftneg@f1 0018                                 ___awtoft@c 0020  
                  __end_of_readUartMessage 138E                   WriteUartMessage@dataSize 001B  
                               ___ftmul@f1 0069                                 ___ftmul@f2 006C  
                         ?_SWSPI_send_word 0029                               ?_DacSetValue 008A  
                               ___ftsub@f1 0084                                 ___ftsub@f2 0087  
                               ___fttol@f1 0078                            _Make32bitsArray 389C  
                           __pcstackCOMRAM 0001                               __pidataBANK1 42F2  
                      ??_SYSTEM_Initialize 001C                                  ?_TMR0_ISR 0001  
                      DacReadValue@byteIdx 00D8                                 ___lltoft@c 0020  
                      DacReadValue@byteNum 00CD                              __end_of_make8 3840  
                      DacReadValue@readVal 00CE                           _DATAEE_WriteByte 3E8C  
                            __end_of_floor 29BA                              __end_of_ldexp 2C34  
                            __end_of_frexp 3196      __end_of_IOCB4_DefaultInterruptHandler 43B2  
   __size_of_IOCB4_DefaultInterruptHandler 0002              _IOCB4_DefaultInterruptHandler 43B0  
                   _SwSpi_Set_Synth_Le_Pin 3D04                       GroupFlashMemory@data 00E6  
                               ___lwtoft@c 0020                ??_IOCB4_SetInterruptHandler 001A  
                           ?_SynthLdDetect 0001            __end_of_DAC_DEFAULT_INIT_VALUES 0653  
                     __end_of_EUSART1_Read 3B86                               ??_MEMORY_ISR 0001  
                __size_of_StoreIntInEeprom 0038                     __size_of_SetMcuRunTime 0044  
                   ??_EUSART1_Transmit_ISR 0001                          __end_of_InitSynth 0D0C  
                           ??_SetMcuSystem 001C                      TMR0_ISR@CountCallBack 0031  
            SwSpi_Set_Synth_Le_Pin@phrType 0019                    GroupFlashMemory@request 00E8  
                       _keepAliveSignalLed 4260                          make8@dataLocation 001C  
              __end_of_EUSART1_Receive_ISR 401C                FLASH_WriteBlock@GIEBitValue 002B  
                             GroupDAC@data 00E6                              ?_SetSynthOper 0001  
                                  ??_make8 001D                                    ??_floor 0031  
                         ?_TMR0_StartTimer 0001                                    ??_ldexp 0093  
                                  ??_frexp 001D                  __end_of_SYSTEM_Initialize 4260  
                          _AdcConvert$3587 00BB                             ?_SynthReadData 00C8  
                            _eusart1RxHead 0034                       GetMcuFwVersion@TxMsg 0064  
                            _eusart1TxHead 0036                              _eusart1RxTail 0033  
                               __pbssBANK0 00EA                                 __pbssBANK1 0100  
                               __pbssBANK2 0200                              _eusart1TxTail 0035  
                      ?_keepAliveSignalLed 0001                         __size_of_eval_poly 00D6  
                          __CFG_PLLCFG$OFF 000000                                 _channelArr 0642  
                                ?_GroupDAC 00E6                                 __pnvCOMRAM 0046  
                                ?_GroupAdc 00E6             __size_of_InitAdcApplicationMgr 0006  
               __end_of_SendSystemStartAck 4362              __end_of_InitAdcApplicationMgr 43A2  
                      __size_of_EepromRead 000A                         __end_of_MEMORY_ISR 43AE  
                                ?_ResetMcu 0001                         _FlashReadCondition 214A  
          ??_InitSystemApplicationManagers 0031                         __CFG_CCP2MX$PORTC1 000000  
                                  ?___ftge 0018                             FlashReadUart@j 00E0  
         __end_of_TMR0_SetInterruptHandler 4376                                    ?___lmul 001A  
                                  ?___wmul 0018                                 ??_TMR0_ISR 0006  
                       __CFG_CCP3MX$PORTB5 000000                         SetChannelMode@data 002C  
                     ??_keepAliveSignalLed 0018                          __end_of_ZeroArray 420E  
                                ?___altoft 0087                                    ?_memset 0018  
                        _ReadIntFromEeprom 1F16                             ___lmul@product 0022  
                      ?_FlashReadCondition 0001         __size_of_IOCB5_SetInterruptHandler 000A  
                                ?___awtoft 0020                                  ?___ftpack 0018  
                             GroupAdc@data 00E6                           FlashReadUart@idx 00E4  
                 GetUint16FromBitArray@res 001F                           FlashReadUart@val 00D4  
               ?_IOCB5_SetInterruptHandler 0018                                  ?___lltoft 0020  
                        _synthLdRxArrayCnt 0038                  __size_of_FLASH_WriteBlock 00BC  
                  __size_of_ADC_Initialize 0016                 FlashSampleWrite@sampleData 002D  
                           _FLASH_ReadByte 42E0                                  ?___lwtoft 0020  
             __end_of_CheckFlashPrecentage 2E64                         ?_ReadIntFromEeprom 00B1  
                                  ?_strtol 0026                           ?_DATAEE_ReadByte 0001  
               GetMcuFwVersion@compileData 0060                            _UpdateSynthFreq 203C  
                          _Timer0_Sampling 00FD               __size_of_keepAliveSignalUart 000C  
                       SynthReadData@TxMsg 01B2                    __end_of_GetMcuFwVersion 0A96  
                       SynthReadData@cType 01DB                                    _OSCCON2 000FD2  
                           ??_SetSynthOper 0031                                    _TBLPTRH 000FF7  
                                  _TBLPTRL 000FF6                                    _TBLPTRU 000FF8  
                                  _OSCTUNE 000F9B                                    _SPBRGH1 000FB0  
                        _synthLdTxArrayCnt 0037                        ??_ReadIntFromEeprom 00B5  
                                  _DacInit 27F4                      GetIntFromUartData@num 007A  
                         GetMcuRunTime@idx 006D                               ??_AdcConvert 00B1  
                     ??_FlashReadCondition 0024                             _FlashEreaseMem 3A4E  
                         _FLASH_EraseBlock 3F2A             __size_of_GroupStatusAndVersion 0024  
                           _SwSpi_Data_Pin 394C                  _IOCB4_SetInterruptHandler 4380  
                     DATAEE_WriteByte@bAdd 0019              __end_of_GroupStatusAndVersion 4108  
                  __end_of_Make32bitsArray 38F4                                 ??_GroupDAC 0031  
                               ??_GroupAdc 0031                              _SetMcuRunTime 3B86  
                       _GetIntFromUartData 1C70                         FlashReadUart@TxMsg 008F  
                    GroupSynthesizers@data 00E6                                    __Hparam 0000  
                               ??_ResetMcu 002C                  __size_of_WriteUartMessage 0036  
                             ?_BlinkOkLeds 0001                                    __Lparam 0000  
                    SendAckMessage@inGroup 0025                           ?_readUartMessage 0001  
                   GroupControlMcu@request 00E9                                  ?_testLeds 0001  
                __end_of_ReadIntFromEeprom 203C                        ?_GetIntFromUartData 0066  
                          __size_of___ftge 0090                            __size_of___lmul 0056  
                                  ___ftadd 1942                                    ___awmod 351C  
                                  ___ftdiv 2544                                    ___ftneg 4108  
                                  ___lldiv 32B2                            __size_of___wmul 0026  
                                  ___ftmul 244E                                    ___llmod 365E  
                                  ___ftsub 3BCA                                    ___fttol 2356  
               FlashSampleWrite@rotateLeft 0062                               crc8@dataSize 001A  
                 __size_of_ClearMcuRunTime 0014                                    ___lwmod 3C0C  
                     AdcConvert@_adcResult 00B3                               __psmallconst 0600  
                          ??_SynthLdDetect 0031                                 ??___altoft 008B  
                   __end_of_FLASH_ReadByte 42F2                            __CFG_STVREN$OFF 000000  
               SWSPI_Synth_send_bits@count 0084                      _mcuRunTimeIn5SecTicks 0128  
                                  _crcCalc 00F4                                    _channel 00FA  
                                  __pcinit 3334                                 ??___awtoft 0023  
                               ??___ftpack 001D                          __end_of_eval_poly 2B66  
                          __size_of_memset 002C                                    __ramtop 0600  
                  __size_of_SendAckMessage 0052                                 ??___lltoft 0024  
                  __size_of_SetChannelMode 0030                                    __ptext0 34A8  
                                  __ptext1 1192                                    __ptext2 4048  
                                  __ptext3 3EC2                                    __ptext4 3D40  
                                  __ptext5 4194                                    __ptext6 40E4  
                                  __ptext7 3F5E                                    __ptext8 3226  
                                  __ptext9 203C                                    crc8@crc 001D  
                       __end_of_AdcConvert 1192                          DacSetValue@retVal 0091  
                               ??___lwtoft 0023                                  _T0CONbits 000FD5  
        __end_of_IOCB5_SetInterruptHandler 4380                                  _IOCB4_ISR 4172  
                                _IOCB5_ISR 4150                          BlinkErrorLeds@idx 001C  
                          __size_of_strtol 01D6                      _OSCILLATOR_Initialize 4320  
                                  _isalpha 4070                               __size_of_exp 01F6  
                             __size_of_log 012A                                    _isdigit 41B4  
                             __size_of_pow 0180                           ___awmod@dividend 0018  
                       _EUSART1_Initialize 3E20                   ??_PIN_MANAGER_Initialize 001A  
                                  _isspace 4098                  StoreIntInEeprom@numOfByes 0026  
                                  _isupper 41D2                                    _request 00F6  
                          GroupDAC@request 00E8                            ??_SynthReadData 0031  
                     ??_GetIntFromUartData 006E                     __end_of_FlashEreaseMem 3AA2  
               __size_of_SYSTEM_Initialize 001A                    ?_SwSpi_Set_Dac_Sync_Pin 0001  
                   __end_of_SwSpi_Data_Pin 39A2                    StoreIntInEeprom@address 0025  
                                  _toupper 42A4                       end_of_initialization 33A4  
                                  exp@sign 009F                        ?_EUSART1_Initialize 0001  
                         ??_BlinkErrorLeds 0018                               ?_EepromWrite 001B  
                    _SWSPI_Synth_send_bits 2C34                  __size_of_SwSpi_Set_CE_Pin 003C  
                    _GetUint16FromBitArray 35F6                             ?_SetMcuRunTime 0001  
                                  memset@c 001A                                    memset@n 001C  
                                  memset@p 001E                              __Lmediumconst 0000  
                          ___lldiv@divisor 001C                       __end_of_SetMcuSystem 436C  
                                  pow@sign 00AC                            ___lldiv@counter 0024  
                        ?_GroupFlashMemory 00E6                           AdcConvert@adcRes 00BE  
                       __end_of_SYNTH_REGS 0635                       UpdateSynthFreq@cType 008C  
                               ??_testLeds 002C                       SWSPI_send_word@datac 0086  
                               _rxMsgQueue 0186                                    postdec1 000FE5  
                                  postdec2 000FDD            ??_IOCB5_DefaultInterruptHandler 0001  
                       ??_GroupFlashMemory 0031                                    postinc0 000FEE  
                                  postinc2 000FDE                      __size_of_EUSART1_Read 0044  
                     SynthReadData@byteNum 01DD                        _InitRxMessageParams 4048  
                              testLeds@idx 002D                    __end_of_UpdateSynthFreq 214A  
                     __size_of_DacSetValue 009E                  __size_of_FlashSampleWrite 0100  
                   __size_of_GetMcuRunTime 00E4                       ??_EUSART1_Initialize 0018  
    __end_of_InitSystemApplicationManagers 42A4     __size_of_InitSystemApplicationManagers 0016  
            _InitSystemApplicationManagers 428E                            ?_FLASH_ReadByte 0018  
                                  strtol@a 0061                                    strtol@c 0065  
                                  strtol@s 0026                   _TMR0_SetInterruptHandler 436C  
                                _PORTDbits 000F83                               ??_EepromRead 0019  
                         _StoreIntInEeprom 3D78                                 ?_IOCB4_ISR 0001  
                               ?_IOCB5_ISR 0001                           ?_GetMcuFwVersion 0001  
                           ZeroArray@array 0020             __end_of_SwSpi_Set_Dac_Sync_Pin 422A  
                             strtol@endptr 0028              FLASH_WriteBlock@flashWrBufPtr 0021  
                       GetMcuRunTime@TxMsg 0060                       ?_InitRxMessageParams 0001  
                          ?_FlashEreaseMem 0001                        EUSART1_Write@txData 0018  
                          ?_SwSpi_Data_Pin 0018                   __end_of_DATAEE_WriteByte 3EC2  
              __end_of_SWSPI_DAC_send_bits 394C                              ?_DacReadValue 00C8  
                     DacReadValue@dacIndex 00D0                   FLASH_EraseBlock@baseAddr 0018  
                         ?_Make32bitsArray 0018                                ___ftdiv@exp 0067  
                             _EUSART1_Read 3B42                       _CheckFlashPrecentage 2DB6  
                        FLASH_WriteBlock@i 002C                         __end_of_EepromRead 4394  
                         DacReadValue@data 00C8                                ___ftmul@exp 0072  
                  ?_SwSpi_Set_Synth_Le_Pin 0018                       __end_of_SetSynthOper 342E  
               __size_of_ReadIntFromEeprom 0126                                  _FillArray 422A  
             __end_of_INTERRUPT_Initialize 43A6                             __end_of___ftge 3226  
                           __end_of___lmul 3A4E                             __end_of___wmul 40E4  
                      GroupControlMcu@data 00E6                              __pidataCOMRAM 4394  
                        __size_of_TMR0_ISR 00AC                             _ADC_Initialize 4278  
                         _FLASH_WriteBlock 2CFA                     ?_OSCILLATOR_Initialize 0001  
                           __end_of_memset 4048                         InitSynth@EepromVal 00C8  
                               floor@expon 0095                              FillArray@size 0022  
                        ??_ClearMcuRunTime 0018                             __end_of_strtol 1942  
                      start_initialization 3334                                 eval_poly@d 0087  
                               eval_poly@n 0089                                 eval_poly@x 0084  
                              _SynthRxOper 0044                           BlinkOkLeds@state 001B  
                 __size_of_TMR0_Initialize 0034                                 ldexp@value 008E  
                              _SynthTxOper 0045            __size_of_PIN_MANAGER_Initialize 0064  
                    ??_InitRxMessageParams 0024                                __end_of_exp 1584  
                              __end_of_log 1F16                                __end_of_pow 1C70  
            GetUint16FromBitArray@bitarray 0018                   AdcConvert@_adcResult_348 00B5  
                                _InitSynth 0A96                             ??_DacReadValue 00CA  
                            _GetMcuRunTime 262C                     ?_SWSPI_Synth_send_bits 0025  
                          ??_SetMcuRunTime 0021                      __end_of_EUSART1_Write 3CC8  
                   ?_GetUint16FromBitArray 0018                     __size_of_PLLInitialize 003E  
                               frexp@value 0018                            ___llmod@divisor 001C  
                            _Timer0_OneSec 00FB                      ?_CheckFlashPrecentage 0001  
                          ___llmod@counter 0020                        DATAEE_ReadByte@bAdd 0018  
                 __size_of_PIN_MANAGER_IOC 0010                     __size_of_SwSpi_Clk_Pin 0056  
                      SendAckMessage@TxMsg 0026             __end_of_SwSpi_Set_Synth_Le_Pin 3D40  
                           _cntRegUpdateRx 0039                        _keepAliveSignalUart 434A  
                           _cntRegUpdateTx 003A                          __size_of_GroupDAC 0034  
                         _WriteUartMessage 3E56                          __size_of_GroupAdc 0020  
                   __size_of_FlashReadUart 01E8                                   ??___ftge 001E  
                                 ??___lmul 0022                    SendAckMessage@inRequest 0024  
                                 ??___wmul 001C                  GetIntFromUartData@idxData 0086  
                        __size_of_ResetMcu 000E                       __size_of_BlinkOkLeds 005E  
                               ?_FillArray 0020                     __end_of_ADC_Initialize 428E  
                         ?_UpdateSynthFreq 008A                                __pdataBANK1 01E5  
                  SWSPI_DAC_send_bits@data 001A                                   ??_memset 001E  
                 __size_of_GroupControlMcu 0030                FLASH_EraseBlock@GIEBitValue 001C  
                           _SendAckMessage 3AA2                             _SetChannelMode 3F8E  
                 __end_of_FLASH_EraseBlock 3F5E                         _SendSystemStartAck 4356  
                 __size_of_SWSPI_send_word 00AA      __end_of_IOCB5_DefaultInterruptHandler 43B0  
   __size_of_IOCB5_DefaultInterruptHandler 0002              _IOCB5_DefaultInterruptHandler 43AE  
              ??_IOCB5_SetInterruptHandler 001A                                   ??_strtol 002C  
                           _eusart1RxCount 00F9                                ??_IOCB4_ISR 0001  
                              ??_IOCB5_ISR 0001                          __size_of___altoft 007A  
                                _ZeroArray 41F0                            DacInit@dacInput 00CA  
                        __size_of___awtoft 0038                          __size_of___ftpack 00AE  
                     ?_keepAliveSignalUart 0001                          __size_of___lltoft 005C  
                              __pbssCOMRAM 0031                          __size_of___lwtoft 0024  
            __size_of_EUSART1_Transmit_ISR 0038                              __pcstackBANK0 0060  
                            __pcstackBANK1 01B2                               _isalpha$3314 001C  
                      ?_SendSystemStartAck 0001                                 ?_InitSynth 0001  
                             _isdigit$3317 0019                             ?_GetMcuRunTime 0001  
                      DacSetValue@dacIndex 0090                             BlinkOkLeds@idx 001C  
                                 ?_DacInit 0001                      __size_of_SetMcuSystem 000A  
                         _SwSpi_Set_CE_Pin 3CC8               __size_of_EUSART1_Receive_ISR 002E  
            SWSPI_Synth_send_bits@bitArray 0060                    _DAC_DEFAULT_INIT_VALUES 064B  
                     __size_of_EepromWrite 000E                      _TMR0_InterruptHandler 01F5  
                                __pnvBANK0 00FF                                  __pnvBANK1 01F5  
                        SetSynthOper@cType 00CF                   __size_of_TMR0_StartTimer 0004  
                   _PIN_MANAGER_Initialize 36C4                       ??_SendSystemStartAck 002C  
                    _InitAdcApplicationMgr 439C                                  __pintcode 0008  
                   __end_of_SendAckMessage 3AF4                                  __ptext100 2544  
                                __ptext101 3DB0                                  __ptext110 3FBE  
                                __ptext102 3840                                  __ptext103 412C  
                                __ptext120 3DE8                                  __ptext112 2F12  
                                __ptext104 2E64                                  __ptext121 3FEE  
                                __ptext113 3C0C                                  __ptext105 35F6  
                                __ptext122 0000                                  __ptext114 4302  
                                __ptext106 2256                                  __ptext115 4150  
                                __ptext107 2CFA                                  __ptext116 43AE  
                                __ptext108 3F2A                                  __ptext117 4172  
                                __ptext109 433C                                   ?___ftadd 0078  
                                __ptext118 43B0                                  __ptext119 43AA  
                                 ?___awmod 0018                                   ?___ftdiv 0029  
                   __end_of_SetChannelMode 3FBE                                   ?___ftneg 0018  
                                 ?___lldiv 0018                                   ?___ftmul 0069  
                                 ?___llmod 0018                                   ?___ftsub 0084  
                                 ?___fttol 0078                           _FlashSampleWrite 2256  
                                 ?___lwmod 0001                            ?_ADC_Initialize 0001  
                         _Timer0_KeepAlive 00FC                          __size_of_testLeds 006A  
                            _PLLInitialize 3C4E                __size_of_keepAliveSignalLed 0018  
             ??_INTERRUPT_InterruptManager 0006                           __CFG_PRICLKEN$ON 000000  
                               ?_ZeroArray 0020                                __smallconst 0600  
                    ??_keepAliveSignalUart 002C                                   _BAUDCON1 000FB8  
                            _SwSpi_Clk_Pin 39A2                                   ?_isalpha 0001  
                                 ?_isdigit 0001                                  _eval_poly 2A90  
                      BlinkErrorLeds@state 001B                                   ?_isspace 0001  
                             _SetMcuSystem 4362                          FlashReadUart@data 0087  
                                 ?_isupper 0001                              _FlashReadUart 1584  
                           __size_of_make8 005C                             __size_of_floor 00E2  
                           __size_of_ldexp 00CE                             __size_of_frexp 0090  
                 __size_of_DATAEE_ReadByte 0014                                   ?_toupper 0001  
                     _INTERRUPT_Initialize 43A2             FLASH_WriteBlock@blockStartAddr 0027  
              __size_of_FlashReadCondition 010C                  _IOCB5_SetInterruptHandler 4376  
                        ??_TMR0_Initialize 001A                     ??_CheckFlashPrecentage 0078  
                           ___wmul@product 001C                                   _IOCBbits 000F62  
                                 _LATAbits 000F89                                   _LATBbits 000F8A  
                                 _LATCbits 000F8B                                   _LATDbits 000F8C  
                    __size_of_SetSynthOper 007C                   __end_of_StoreIntInEeprom 3DB0  
           FlashReadUart@numOfSampleToRead 00E2                                   _PIE1bits 000F9D  
                                 _PIE2bits 000FA0                      _GroupStatusAndVersion 40E4  
                        _GroupSynthesizers 3226        __size_of_INTERRUPT_InterruptManager 00D4  
               ??_TMR0_SetInterruptHandler 001A                       Make32bitsArray@array 0018  
                                 _PIR1bits 000F9E                           ??_FLASH_ReadByte 001C  
                                 _PIR2bits 000FA1                                  _rxMsgData 0172  
                      UpdateSynthFreq@data 008A                                   i2u566_48 4180  
                                 i2u576_40 3C26                                   i2u568_48 415E  
                      SWSPI_send_word@data 0029                         ?_GroupSynthesizers 00E6  
                                 _RCONbits 000FD0                           __CFG_WDTPS$16384 000000  
                      SynthReadData@regNum 01DC                                  make8@data 0018  
                              ??_FillArray 0025                                   _TMR0_ISR 2F12  
                          ?_SendAckMessage 0024                            ?_SetChannelMode 002C  
                           ?_PLLInitialize 0001                          ??_PIN_MANAGER_IOC 0001  
                     __end_of_DacReadValue 27F4                        ??_GroupSynthesizers 0031  
                   GetIntFromUartData@data 0066                    SWSPI_send_word@dataSize 002D  
                               _ADCON0bits 000FC2                      __end_of_SynthLdDetect 2A90  
                 __size_of_readUartMessage 01FC                          ___wmul@multiplier 0018  
                           ?_SwSpi_Clk_Pin 0018                           ??_FlashEreaseMem 002C  
                       __end_of_channelArr 064B                           ??_SwSpi_Data_Pin 0019  
                __size_of_GroupFlashMemory 0038                                 ?_eval_poly 0084  
                           ?_FlashReadUart 0087                          ??_GroupControlMcu 0031  
                          ??_GetMcuRunTime 0025                      DATAEE_WriteByte@bData 0018  
                             _isspace$3320 0019                                ??_InitSynth 0031  
                        ??_SWSPI_send_word 002E                                 DacInit@idx 00CC  
                             _SetSynthOper 33B2                                 _DAC_ADDRES 0653  
              __size_of_GetIntFromUartData 017C                          ___lmul@multiplier 001A  
                  FlashReadCondition@TxMsg 0028                                _INTCON2bits 000FF1  
                    __end_of_SynthReadData 0F66                                  copy_data0 3348  
                                copy_data1 3368                      ?_INTERRUPT_Initialize 0001  
                         __size_of_DacInit 00E4                          ?_DATAEE_WriteByte 0018  
           GetUint16FromBitArray@numOfBits 001A                  __end_of_GroupSynthesizers 32B2  
                    EUSART1_Read@readValue 0019                   __end_of_FLASH_WriteBlock 2DB6  
                                 _GroupDAC 3EC2                         ??_DATAEE_WriteByte 0019  
                                 _GroupAdc 4194                                  frexp@eptr 001B  
                               _EECON1bits 000FA6                             _synthLdRxArray 01A6  
                                 __Hrparam 0000                     ?_InitAdcApplicationMgr 0001  
                           _synthLdTxArray 019A                                   _ResetMcu 4312  
                            ??_DacSetValue 008C                                _readAddress 01F1  
                                 __Lrparam 0000               SynthReadData@eepromDataArray 01CB  
                        _ADC_GetConversion 3FBE                            _ClearMcuRunTime 42CC  
                        __CFG_P2BMX$PORTD2 000000                    ??_OSCILLATOR_Initialize 0018  
                       ?_ADC_GetConversion 0018                          ??_TMR0_StartTimer 0018  
                         __size_of___ftadd 01AE                           __size_of___awmod 0070  
                         __size_of___ftdiv 00E8                       _numOfValidateSamples 00EA  
                         __size_of___ftneg 0024                           __size_of___lldiv 0082  
                                 ___altoft 342E                           __size_of___ftmul 00F6  
                         __size_of___llmod 0066                           __size_of___ftsub 0042  
                         __size_of___fttol 00F8                __size_of_EUSART1_Initialize 0036  
                         __size_of___lwmod 0042                            GroupAdc@request 00E8  
                                 ___awtoft 3DB0                              crc8@dataArray 0018  
                                 ___ftpack 2E64                           _numOfReadSamples 012C  
                                 ___lltoft 3840                          _FLASH_IsWriteDone 433C  
                   _IOCB4_InterruptHandler 01F9                        WriteUartMessage@idx 001E  
                                 ___lwtoft 412C                                ??_ZeroArray 0024  
                 GetMcuRunTime@tempRunTime 0069                        ??_ADC_GetConversion 001A  
                                 _exp$3592 009A                               _isupper$3323 0019  
                       ?_FLASH_IsWriteDone 0001                                   _dataSize 00F5  
                    SwSpi_Clk_Pin@cPinMode 0018                   __end_of_WriteUartMessage 3E8C  
                         __size_of_isalpha 0028                                   _crcGiven 00F3  
                         __size_of_isdigit 001E                    ??_SWSPI_Synth_send_bits 0029  
                   SwSpi_Data_Pin@cPinMode 0018                    ??_GetUint16FromBitArray 001C  
           ?_IOCB4_DefaultInterruptHandler 0001                           __size_of_isspace 0026  
                                 __ptext10 0D0C                                   __ptext11 33B2  
                                 __ptext20 1C70                                   __ptext12 262C  
                                 __ptext21 176C                                   __ptext13 32B2  
                                 __ptext30 3F8E                                   __ptext22 42A4  
                                 __ptext14 06A6                                   __ptext31 3B42  
                                 __ptext23 4098                                   __ptext15 1584  
                                 __ptext40 436C                                   __ptext32 434A  
                                 __ptext24 41B4                                   __ptext16 42E0  
                                 __ptext41 36C4                                   __ptext33 4260  
                                 __ptext25 4070                                   __ptext17 214A  
                                 __ptext50 4356                                   __ptext42 4376  
                                 __ptext34 29BA                                   __ptext26 41D2  
                                 __ptext18 3A4E                                   __ptext51 3AA2  
                                 __ptext43 4380                                   __ptext35 351C  
                                 __ptext27 2710                                   __ptext19 3068  
                                 __ptext60 3CC8                                   __ptext52 3AF4  
                                 __ptext44 4320                                   __ptext36 3728  
                                 __ptext28 358C                                   __ptext61 439C  
                                 __ptext53 41F0                                   __ptext45 43A2  
                                 __ptext37 4362                                   __ptext29 4312  
                                 __ptext70 2C34                                   __ptext62 27F4  
                                 __ptext54 3E56                                   __ptext46 3E20  
                                 __ptext38 4246                                   __ptext71 389C  
                                 __ptext63 3D78                                   __ptext55 3C8C  
                                 __ptext47 4278                                   __ptext39 3EF6  
                                 __ptext80 42B8                                   __ptext72 422A  
                                 __ptext64 432E                                   __ptext56 428E  
                                 __ptext48 3B86                                   __ptext81 42CC  
                                 __ptext73 401C                                   __ptext65 3E8C  
                                 __ptext57 43A6                                   __ptext49 365E  
                                 __ptext90 3106                                   __ptext82 2DB6  
                                 __ptext74 38F4                                   __ptext66 2FBE  
                                 __ptext58 3C4E                                   __ptext91 2356  
                                 __ptext83 3786                                   __ptext75 394C  
                                 __ptext67 37E4                                   __ptext59 0A96  
                                 __ptext92 3196                                   __ptext84 0F66  
                                 __ptext76 39A2                                   __ptext68 3D04  
                                 __ptext93 342E                                   __ptext85 1AF0  
                                 __ptext77 1F16                                   __ptext69 420E  
                                 __ptext94 2A90                                   __ptext86 1DEC  
                                 __ptext78 39F8                                   __ptext95 40BE  
                                 __ptext87 138E                                   __ptext79 438A  
                                 __ptext96 244E                                   __ptext88 2B66  
                                 __ptext97 3BCA                                   __ptext89 28D8  
                                 __ptext98 1942                                   __ptext99 4108  
                         __size_of_isupper 001E               SWSPI_Synth_send_bits@phrType 0085  
                 SwSpi_Set_CE_Pin@cPinMode 0018                                   _pow$3590 00A6  
                                 _pow$3591 00A9                        ??_FLASH_IsWriteDone 0018  
              DATAEE_WriteByte@GIEBitValue 001A                           __size_of_toupper 0014  
                 __size_of_GetMcuFwVersion 03F0                       _GetMcuFwVersion$2691 0078  
                     _GetMcuFwVersion$2687 0076                              __size_of_crc8 004E  
                            __size_of_main 0074                     ?_GroupStatusAndVersion 00E6  
                     __end_of_SYNTH_ADDRES 0642                                   _msgCount 00F2  
             _TMR0_DefaultInterruptHandler 000000                          ??_DATAEE_ReadByte 0018  
                __end_of_ADC_GetConversion 3FEE               __size_of_SWSPI_DAC_send_bits 0058  
                      Make32bitsArray@data 001A                         SWSPI_send_word@idx 0087  
                              _groupsArray 01E5                            ??_PLLInitialize 0031  
                                 _testLeds 358C                    __size_of_BlinkErrorLeds 005E  
                                 int$flags 0048                   __size_of_Make32bitsArray 0058  
                               strtol@base 002A                                 strtol@sign 0060  
                __end_of_FLASH_IsWriteDone 434A         __end_of_INTERRUPT_InterruptManager 00DC  
               _INTERRUPT_InterruptManager 0008                         AdcConvert@ldRxSate 00B7  
                       AdcConvert@ldTxSate 00B9                            EepromWrite@data 001B  
                          ??_SwSpi_Clk_Pin 0019                        __end_of_DacSetValue 3106  
                      _EUSART1_Receive_ISR 3FEE                   __end_of_SwSpi_Set_CE_Pin 3D04  
                        ?_FLASH_EraseBlock 0018                __end_of_InitRxMessageParams 4070  
                                 exp@coeff 0657                                 _MEMORY_ISR 43AA  
                          ??_FlashReadUart 0089                                   log@coeff 0675  
                   SWSPI_send_word@phrType 0089                         ??_FLASH_EraseBlock 001C  
                               _INTCONbits 000FF2                                ??_eval_poly 002F  
                              _sampleArray 0132                                _sampleCount 00EE  
                                 isalpha@c 001D                                   isdigit@c 001A  
                   ??_INTERRUPT_Initialize 0018                                   memset@p1 0018  
                        ??_readUartMessage 01DE                   __end_of_FlashSampleWrite 2356  
                                 intlevel2 0000                       ?_EUSART1_Receive_ISR 0001  
                    __end_of_SetMcuRunTime 3BCA                           ___lwmod@dividend 0001  
               __size_of_GroupSynthesizers 008C                                   isspace@c 001A  
                    SynthReadData@data_981 01C8                           ___lldiv@dividend 0018  
                  ?_PIN_MANAGER_Initialize 0001                          _SynthReadData$982 01C9  
                  __end_of_ClearMcuRunTime 42E0                                 _RCSTA1bits 000FAB  
                                 isupper@c 001A                   ReadIntFromEeprom@address 00C2  
             __end_of_EUSART1_Transmit_ISR 3E20                              ??_BlinkOkLeds 0018  
                         ??_ADC_Initialize 0018                      __size_of_DacReadValue 00E4  
                       Make32bitsArray@idx 0020                              AdcConvert@idx 00C0  
                            _isReWriteDone 003B                      UpdateSynthFreq@retVal 008D  
                     SwSpi_Clk_Pin@phrType 0019                      SwSpi_Data_Pin@phrType 0019  
                  SwSpi_Set_CE_Pin@phrType 0019                     __size_of_EUSART1_Write 003C  
                 ??_SwSpi_Set_Dac_Sync_Pin 0018                          EepromRead@address 0019  
                         ___lldiv@quotient 0020                           _GroupFlashMemory 3D40  
                          ___lwmod@divisor 0003                            _TMR0_Initialize 3EF6  
                          ___lwmod@counter 0005                   __size_of_UpdateSynthFreq 010E  
                                 toupper@c 0018                 ReadIntFromEeprom@numOfByes 00B1  
                        __CFG_T3CMX$PORTC0 000000                    ReadIntFromEeprom@retVal 00C3  
                            ??_EepromWrite 001C                                 _AdcConvert 0F66  
                    ??_EUSART1_Receive_ISR 0001             __end_of_PIN_MANAGER_Initialize 3728  
                             _DacReadValue 2710               GetIntFromUartData@dataRegArr 0070  
                        __CFG_FOSC$INTIO67 000000                     _IOCB5_InterruptHandler 01F7  
                          _PIN_MANAGER_IOC 4302                          ?_StoreIntInEeprom 0021  
                         ??_SendAckMessage 0025                 __size_of_ADC_GetConversion 0030  
                         ??_SetChannelMode 002E                         ??_StoreIntInEeprom 0028  
                              _DacSetValue 3068  
